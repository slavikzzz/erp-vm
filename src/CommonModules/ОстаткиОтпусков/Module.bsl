///////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА ОСТАТКИ ОТПУСКОВ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция формирует описание таблицы данных для функции расчета остатка отпуска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с колонками, описанными в тексте метода.
//
Функция ОписаниеТаблицыДанных() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Сотрудник и дата, на которую определяется остаток отпуска. Это ключ, который должен быть уникальным для каждой
	// строки.
	ТаблицаДанных.Колонки.Добавить("Сотрудник",						Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ДатаОстатков",					Новый ОписаниеТипов("Дата"));
	
	// Остатки отпуска на указанную дату.
	// Если ЭтоРасчетПриУвольнении = Истина, тогда алгоритм будет игнорировать движения, сделанные расчетом при увольнении.
	ТаблицаДанных.Колонки.Добавить("ЭтоРасчетПриУвольнении",		Новый ОписаниеТипов("Булево"));
	
	// График отпусков на год.
	// Фактические отпуска учитываются до даты документа, после даты документа только запланированные, если
	// ЭтоЗапланированныйОтпуск = Истина.
	ТаблицаДанных.Колонки.Добавить("ЭтоЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДатаДокумента",					Новый ОписаниеТипов("Дата"));
	
	// График отпусков и Отпуска организаций.
	// Если указан период отпуска, то для него по производственному календарю будет посчитано количество календарных дней
	// отпуска и рабочие года, за которые эти остатки были и будут заработаны.
	// Для каждого периода в поле Примечание будет добавлена информация о том, как остатки отпуска будут израсходованы на
	// указанный период. ДатаОкончания = ДатаОстатков всегда.
	ТаблицаДанных.Колонки.Добавить("ДатаНачала",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ТекущийРегистратор",			Документы.ТипВсеСсылки());
	
	// Отбор по виду ежегодного отпуска.
	ТаблицаДанных.Колонки.Добавить("ОтборПоВидуЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТФактическиеОтпускаСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовСотрудников - перечисленные через запятую имена полей
//				таблицы фильтра (Сотрудник, НачалоПериода, ОкончаниеПериода).
//		ИмяВТФактическиеОтпускаСотрудников - имя создаваемой временной таблицы.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовСотрудников.
//			ПоляОтбораСотрудников - Структура
//			ИмяВТФактическиеОтпускаСотрудников
//
Функция ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,НачалоПериода,ОкончаниеПериода", ИмяВТФактическиеОтпускаСотрудников = "ВТФактическиеОтпускаСотрудников") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц",				МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников",	ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников",					ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТФактическиеОтпускаСотрудников",		ИмяВТФактическиеОтпускаСотрудников);
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Создает и помещает в менеджер временных таблиц
//	таблицу ВТФактическиеОтпускаСотрудников с данными фактических отпусков
//	сотрудников за период. Список сотрудников и периодов,
//	по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
//	таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
//	колонки имена которых переданы в метод ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная
//				методом ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников.
//		ТолькоРазрешенные - Булево
//	
// Помещает в менеджер таблицу ВТФактическиеОтпускаСотрудников,
//	содержащую данные о времени сотрудников по производственным календарям с полями:
//		Сотрудник,
//		ВидЕжегодногоОтпуска,
//		ДатаНачала,
//		ДатаОкончания,
//		КоличествоДней,
//		ЭтоКомпенсация,
//		Регистратор,
//		РабочийПериодС,
//		РабочийПериодПо,
//		Основание
//
Процедура СоздатьВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = ЗапросВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные);
	Запрос.МенеджерВременныхТаблиц	= ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf78-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВводНачальныхОстатковОтпусков);
	
КонецПроцедуры

#КонецОбласти

// Формирует справку по отпускам сотрудника на выбранную дату.
//
// Параметры:
//	СписокСотрудников - Массив из СправочникСсылка.Сотрудники, СправочникСсылка.Сотрудники - сотрудник или массив
//	 сотрудников, оформленных по трудовому договору, для которых необходимо узнать остатки отпусков;
//	ДатаОстатков - Дата - Дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ЭтоРасчетПриУвольнении - Булево - Если признак установлен, то функция будет считать, что сотрудник увольняется датой
//	 ДатаОстатков.
//
// Возвращаемое значение:
//	ТабличныйДокумент - Табличный документ, в котором находится справка по отпускам.
Функция СправкаПоОтпускамСотрудника(Знач СписокСотрудников, Знач ДатаОстатков = '00010101',
	Знач ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СписокСотрудников) Или ТипЗнч(СписокСотрудников) = Тип("Массив")
		И СписокСотрудников.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСобытий = ТаблицаСобытийДляСправки(СписокСотрудников, ДатаОстатков, ЭтоРасчетПриУвольнении);
	
	ТабДокумент = ПечатнаяФормаСправкиПоОтпускамСотрудника(ТаблицаСобытий);
		
	Возврат ТабДокумент;
	
КонецФункции

// Возвращает заполненную по данным таблицы событий печатную форму справки по отпускам сотрудника.
// 
// Параметры:
//  ТаблицаСобытий - см. ТаблицаСобытийДляСправки
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Печатная форма справки по отпускам сотрудника
Функция ПечатнаяФормаСправкиПоОтпускамСотрудника(ТаблицаСобытий) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	ФорматДаты = "ДФ='d MMM yyyy ""г.""'";
	ФорматЧисла = "ЧДЦ=2; ЧРД=; ЧРГ=,";
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоОтпускамСотрудника";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакетаДляПечати());
	
	ПервыйСотрудник = Истина;
	Для Каждого Результат Из ТаблицаСобытий Цикл
		
		Если Не ПервыйСотрудник Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйСотрудник = Ложь;
		
		// Шапка отчета: место работы сотрудника и дата приема.
		ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
		ОбластьМакета.Параметры.Заполнить(Результат);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
			И ЗначениеЗаполнено(ОбластьМакета.Параметры.ТекущееПодразделение) Тогда
				
			ОбластьМакета.Параметры.ТекущееПодразделение =
				ОбластьМакета.Параметры.ТекущееПодразделение.ПолноеНаименование();
				
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Определяем виды отпусков, которые будут отображаться в справке.
		ТаблицаВидовОтпусковСотрудника = Неопределено;
		Для каждого СтрокаСобытий Из Результат.ДанныеСобытий Цикл
			
			Если ЗначениеЗаполнено(СтрокаСобытий.ПраваНаОтпуска) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.ПраваНаОтпуска, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСобытий.НачальныеОстаткиОтпусков) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.НачальныеОстаткиОтпусков, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСобытий.ФактическиеОтпуска) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.ФактическиеОтпуска, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТаблицаВидовОтпусковСотрудника = Неопределено ИЛИ ТаблицаВидовОтпусковСотрудника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыОтпусковСотрудника = ТаблицаВидовОтпусковСотрудника.ВыгрузитьКолонку("ВидОтпуска");
				
		// Шапка таблицы.
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета|Тело");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
			// Выводим их.
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета|ВидОтпуска");
			ОбластьМакета.Параметры.ВидОтпуска = ВидОтпуска;
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЦикла; 
		
		// Цикл по событиям.
		Для каждого СобытиеОтпусков Из Результат.ДанныеСобытий Цикл
			
			ЕстьНачальныеОстатки = (НЕ СобытиеОтпусков.НачальныеОстаткиОтпусков = Неопределено
				И СобытиеОтпусков.НачальныеОстаткиОтпусков.Количество() > 0);
			
			// Вывод события-шапки.
			Если СобытиеОтпусков.ПоследнееСобытие Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Сегодня|Тело");
			ИначеЕсли ЗначениеЗаполнено(СобытиеОтпусков.ДокументСобытие) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСРасшифровкой|Тело");
				ОбластьМакета.Параметры.ТекстРасшифровка = СобытиеОтпусков.ДокументСобытие;
			Иначе	
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка|Тело");
			КонецЕсли;
			
			ОбластьМакета.Параметры.Период = Формат(СобытиеОтпусков.ДатаСобытия, ФорматДаты);
			ОбластьМакета.Параметры.Событие = СобытиеОтпусков.Событие;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
				Если ЕстьНачальныеОстатки Тогда
					// Если есть остатки - выводим.
					ОбластьМакета = Макет.ПолучитьОбласть("НачальныеОстатки|ВидОтпуска");
					ОстатокОтпуска = 0;
					Для каждого НачальныйОстатокОтпуска Из СобытиеОтпусков.НачальныеОстаткиОтпусков Цикл
						Если НачальныйОстатокОтпуска.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							ОстатокОтпуска = ОстатокОтпуска + НачальныйОстатокОтпуска.КоличествоДней;
						КонецЕсли;
					КонецЦикла; 
					ОбластьМакета.Параметры.КоличествоДней = Формат(ОстатокОтпуска, ФорматЧисла);
				ИначеЕсли СобытиеОтпусков.ПоследнееСобытие Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Сегодня|ВидОтпуска");
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка|ВидОтпуска");
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
			
			// Вывод прав на отпуск.
			Если ЗначениеЗаполнено(СобытиеОтпусков.ПраваНаОтпуска) Тогда
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					
					ПраваНаОтпуск = НайтиВидОтпускаВМассивеСтруктур(СобытиеОтпусков.ПраваНаОтпуска, ВидОтпуска);
					Если ПраваНаОтпуск = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПравоНаОтпуск = ПраваНаОтпуск[0];
					Если СобытиеОтпусков.Событие = НСтр("ru = 'Введены начальные данные';
														|en = 'Initial data is entered'") 
						И ПравоНаОтпуск.КоличествоДнейОтпускаВГод = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Право на отпуск %1 - %2 дн.';
							|en = 'Leave entitlement %1 - %2 days'"),
						ПравоНаОтпуск.ВидЕжегодногоОтпускаНаименование,
						ПравоНаОтпуск.КоличествоДнейОтпускаВГод);
					ТабДокумент.Вывести(ОбластьМакета);
					
				КонецЦикла; 
			КонецЕсли;
			
			// Если это остатки - выводим информацию по годам.
			Если НЕ СобытиеОтпусков.НачальныеОстаткиОтпусков = Неопределено Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Остатки отпусков введены за периоды работы:';
														|en = 'Remaining leaves are entered for the work periods:'");
				ТабДокумент.Вывести(ОбластьМакета);
				
				ПредыдущийВидОтпуска = Неопределено;
				
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					
					ОстаткиОтпуска = НайтиВидОтпускаВМассивеСтруктур(СобытиеОтпусков.НачальныеОстаткиОтпусков,
						ВидОтпуска);
					Если ОстаткиОтпуска = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для каждого ОстатокОтпуска Из ОстаткиОтпуска Цикл
						
						Если ПредыдущийВидОтпуска = Неопределено
							ИЛИ ОстатокОтпуска.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда
								
							ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
							ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"	" + НСтр("ru = 'для отпуска ""%1"":';
												|en = 'for leave ""%1"":'"),
								ОстатокОтпуска.ВидЕжегодногоОтпускаНаименование);
							ТабДокумент.Вывести(ОбластьМакета);
							
						КонецЕсли;
						
						ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
						ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"		" + НСтр("ru = '%1 - %2';
												|en = '%1 - %2'"),
							Формат(ОстатокОтпуска.РабочийГодНачало,ФорматДаты),
							Формат(ОстатокОтпуска.РабочийГодОкончание,ФорматДаты));
						ТабДокумент.Вывести(ОбластьМакета);
						
						ПредыдущийВидОтпуска = ОстатокОтпуска.ВидЕжегодногоОтпуска;
						
					КонецЦикла;
					
				КонецЦикла; 
			КонецЕсли;
			
			// Вывод накопленных дней
			Если Не ЕстьНачальныеОстатки Тогда
				Если ЗначениеЗаполнено(СобытиеОтпусков.НакопленоСПредыдущегоСобытия) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|Тело");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Накоплено за период %1 - %2';
							|en = 'Accumulated for the period %1 - %2'"),
						Формат(СобытиеОтпусков.ДатаПредыдущегоСобытия, ФорматДаты),
						Формат(?(СобытиеОтпусков.Событие = НСтр("ru = 'Отпуск по уходу за ребенком';
																|en = 'Child care leave'"),
							СобытиеОтпусков.ДатаСобытия - 86400, СобытиеОтпусков.ДатаСобытия), ФорматДаты));
					ТабДокумент.Вывести(ОбластьМакета);
					
					Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
						КоличествоДней = 0;
						Для каждого НакоплениеОтпуска Из СобытиеОтпусков.НакопленоСПредыдущегоСобытия Цикл
							Если НакоплениеОтпуска.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
								КоличествоДней = НакоплениеОтпуска.КоличествоДнейЗаПериод;
								Прервать;
							КонецЕсли;
						КонецЦикла; 
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|ВидОтпуска");
						ОбластьМакета.Параметры.КоличествоДней = ?(КоличествоДней = 0, "",
							"+" + Формат(КоличествоДней, ФорматЧисла));
						ТабДокумент.Присоединить(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			// Вывод событий-отпусков
			Если ЗначениеЗаполнено(СобытиеОтпусков.ФактическиеОтпуска) Тогда
				// Вывод фактических отпусков
				// Определяем дату окончания в случае если отпусков несколько.
				ЕстьКомпенсация = Ложь;
				ЕстьРеальныйОтпуск = Ложь;
				ДнейКомпенсации = 0;
				
				ПериодыОтпуска = Новый ТаблицаЗначений;
				ПериодыОтпуска.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
				ПериодыОтпуска.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
				
				ДатаОкончанияОтпуска = СобытиеОтпусков.ДатаСобытия;
				Для каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
					
					ЕстьКомпенсация = ЕстьКомпенсация ИЛИ ФактическийОтпуск.Компенсация;
					ЕстьРеальныйОтпуск = ЕстьРеальныйОтпуск ИЛИ НЕ ФактическийОтпуск.Компенсация;
					
					Если ФактическийОтпуск.Компенсация Тогда
						ДнейКомпенсации = ДнейКомпенсации + ФактическийОтпуск.КоличествоДнейОтпуска;
					КонецЕсли;
					
					Для Каждого СтрокаПериода Из ФактическийОтпуск.ПериодыОтпуска Цикл 
						ЗаполнитьЗначенияСвойств(ПериодыОтпуска.Добавить(), СтрокаПериода);
					КонецЦикла;
					
				КонецЦикла; 
				
				ПериодыОтпуска.Свернуть("ДатаНачала,ДатаОкончания");
				ПредставлениеПериода = "";
				Для Каждого СтрокаПериода Из ПериодыОтпуска Цикл 
					ПредставлениеПериода = ПредставлениеПериода + ?(ПредставлениеПериода = "", "", "; ")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - %2';
																						|en = '%1 - %2'"), 
						Формат(СтрокаПериода.ДатаНачала, ФорматДаты), Формат(СтрокаПериода.ДатаОкончания, ФорматДаты));
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|Тело");
				Если ЕстьКомпенсация И ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Период отпуска: %1 (+ %2 дн. компенсации)';
							|en = 'Leave period: %1 (+ %2 days of compensation)'"), ПредставлениеПериода,
						Формат(ДнейКомпенсации, ФорматЧисла));
				ИначеЕсли ЕстьКомпенсация И Не ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Компенсация отпуска (%1 дн.)';
							|en = 'Leave compensation (%1 days)'"), Формат(ДнейКомпенсации, ФорматЧисла));
				ИначеЕсли ЕстьРеальныйОтпуск И Не ЕстьКомпенсация Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Период отпуска: %1';
							|en = 'Leave period: %1'"), ПредставлениеПериода);
				КонецЕсли;
				
				ОбластьМакета.Параметры.Текст  = ТекстЗаголовка;
				ТабДокумент.Вывести(ОбластьМакета);
				
				ПродолжительностьОтпусков = Новый Соответствие;
				Для Каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					КоличествоДней = 0;
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|ВидОтпуска");
					Для каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
						Если ФактическийОтпуск.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							КоличествоДней = КоличествоДней + ФактическийОтпуск.КоличествоДнейОтпуска;
						КонецЕсли;
					КонецЦикла;
					Если КоличествоДней > 0 Тогда
						ОбластьМакета.Параметры.КоличествоДней = "-"+Формат(КоличествоДней,ФорматЧисла);
					ИначеЕсли КоличествоДней < 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|ВидОтпуска");
						ОбластьМакета.Параметры.КоличествоДней = "+"+Формат(-КоличествоДней,ФорматЧисла);
					Иначе
						ОбластьМакета.Параметры.КоличествоДней = "";
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьМакета);
					ПродолжительностьОтпусков.Вставить(ВидОтпуска, КоличествоДней);
				КонецЦикла;
				
				Для Каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					КоличествоДней = ПродолжительностьОтпусков[ВидОтпуска];
					Если КоличествоДней = Неопределено Или КоличествоДней = 0 Тогда 
						Продолжить;
					КонецЕсли;
					Если КоличествоДней < 0 Тогда
						КоличествоСтрок = Результат.ЗаработанныеПрава.Количество();
						Для Сч = 1 По КоличествоСтрок Цикл
							Если КоличествоДней = 0 Тогда 
								Прервать;
							КонецЕсли;
							РабочийГод = Результат.ЗаработанныеПрава[КоличествоСтрок - Сч];
							Если РабочийГод.ВидЕжегодногоОтпуска <> ВидОтпуска Тогда 
								Продолжить;
							КонецЕсли;
							Если РабочийГод.ИспользованоДней = 0 Тогда 
								Продолжить;
							КонецЕсли;
							ИспользованоДнейЗаПериод = Макс(РабочийГод.ИспользованоДней + КоличествоДней, 0);
							КоличествоДней = КоличествоДней + РабочийГод.ИспользованоДней - ИспользованоДнейЗаПериод;
							РабочийГод.ИспользованоДней = ИспользованоДнейЗаПериод;
						КонецЦикла;
						Продолжить;
					КонецЕсли;
					РабочийГодПредставление = "";
					Для Каждого РабочийГод Из Результат.ЗаработанныеПрава Цикл
						Если КоличествоДней = 0 Тогда 
							Прервать;
						КонецЕсли;
						Если РабочийГод.ВидЕжегодногоОтпуска <> ВидОтпуска Тогда 
							Продолжить;
						КонецЕсли;
						Если РабочийГод.КоличествоДней = РабочийГод.ИспользованоДней Тогда 
							Продолжить;
						КонецЕсли;
						КоличествоДнейЗаПериод = Мин(КоличествоДней, РабочийГод.КоличествоДней - РабочийГод.ИспользованоДней);
						РабочийГод.ИспользованоДней = РабочийГод.ИспользованоДней + КоличествоДнейЗаПериод;
						КоличествоДней = КоличествоДней - КоличествоДнейЗаПериод;
						РабочийГодПредставление = РабочийГодПредставление + ?(РабочийГодПредставление = "", "", "; ")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 дн. за период %2 - %3';
																							|en = '%1 days for the period %2 - %3'"), КоличествоДнейЗаПериод, Формат(РабочийГод.ДатаНачала, ФорматДаты), Формат(РабочийГод.ДатаОкончания, ФорматДаты));
					КонецЦикла;
					Если КоличествоДней > 0 Тогда
						РабочийГодПредставление = РабочийГодПредставление + ?(РабочийГодПредставление = "", "", "; ")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 дн. за будущие периоды';
																							|en = '%1 days for future periods'"), КоличествоДней);
					КонецЕсли;
					Если РабочийГодПредставление <> "" Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: %2';
																													|en = '%1: %2'"), ВидОтпуска, РабочийГодПредставление);
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(СобытиеОтпусков.Отклонения) Тогда
				ОтпускОтклонение = СобытиеОтпусков.Отклонения;
				// Вывод отпусков-отклонений.
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Период отпуска: %1 - %2';
						|en = 'Leave period: %1 - %2 '"),
					Формат(ОтпускОтклонение.ДатаНачалаОтсутствия,ФорматДаты),
					Формат(ОтпускОтклонение.ДатаОкончанияОтсутствия,ФорматДаты));
				ОбластьМакета.Параметры.Текст  = ТекстЗаголовка;
				ТабДокумент.Вывести(ОбластьМакета);
				
				Если ОтпускОтклонение.КоличествоДнейПродления = Null Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Дата окончания рабочего года определена как %1';
								|en = 'End date of the working year is set to %1'"),
							Формат(ОтпускОтклонение.ДатаНачалаОтсутствия - 86400, ФорматДаты));
					ТабДокумент.Вывести(ОбластьМакета);
				ИначеЕсли ОтпускОтклонение.КоличествоДнейПродления > 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					Если СобытиеОтпусков.РабочиеГодаОтпусков.Количество() > 0 Тогда
						ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'На %1 дн. продлены рабочие года отпусков:';
								|en = 'Leave working years are extended for %1 days:'"), ОтпускОтклонение.КоличествоДнейПродления);
					Иначе
						ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'На %1 дн. продлен рабочий год отпуска:';
								|en = 'Leave working year is extended for %1 days:'"), ОтпускОтклонение.КоличествоДнейПродления);
					КонецЕсли;
					ТабДокумент.Вывести(ОбластьМакета);
					
					Для каждого РабочийГод Из СобытиеОтпусков.РабочиеГодаОтпусков Цикл
						Если ВидыОтпусковСотрудника.Найти(РабочийГод.ВидОтпуска) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
						ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"		" + НСтр("ru = 'для отпуска %1: %2 - %3';
												|en = 'for leave %1: %2 - %3'"),
							РабочийГод.ВидОтпуска,
							Формат(РабочийГод.РабочийГодДатаНачала,ФорматДаты),
							Формат(РабочийГод.РабочийГодДатаОкончания,ФорматДаты));
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЦикла; 
				КонецЕсли;
			
			КонецЕсли;
			
			// Вывод расшифровки расчета заработанных прав
			Если ЗначениеЗаполнено(СобытиеОтпусков.РасшифровкаПрав) Тогда
				
				Для Каждого СтрокаРасшифровки Из СобытиеОтпусков.РасшифровкаПрав.Расшифровка Цикл 
					
					ТекстРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Право на отпуск: %1 дн.; Среднемесячное количество рабочих дней: %2';
							|en = 'Leave entitlement: %1 days. Average monthly number of workdays: %2'"), 
						СтрокаРасшифровки.ДнейОтпускаВГод, Окр(СтрокаРасшифровки.СреднемесячноеКоличествоДней, 2));
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст = ТекстРасшифровки;
					ТабДокумент.Вывести(ОбластьМакета);
					
					ТекстРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отработано месяцев: %1';
							|en = 'Months worked: %1'"), СтрокаРасшифровки.ОтработаноМесяцев);
					Если СтрокаРасшифровки.ОтработаноМесяцев < 12 Тогда 
						ОтработаноДней = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 дн.';
								|en = '%1 days'"), СтрокаРасшифровки.ОтработаноДней);
						ТекстРасшифровки = ТекстРасшифровки + " (" + ОтработаноДней + ")";
					КонецЕсли;
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст = ТекстРасшифровки;
					ТабДокумент.Вывести(ОбластьМакета);
					
					ТекстРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Заработано за период %1 - %2: %3 дн.';
							|en = 'Earned for the period %1 - %2: %3 days'"), 
						Формат(СобытиеОтпусков.РасшифровкаПрав.ДатаНачала, ФорматДаты),
						Формат(СобытиеОтпусков.РасшифровкаПрав.ДатаОкончания, ФорматДаты),
						Окр(СтрокаРасшифровки.ЗаработаноДней, 2));
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст = ТекстРасшифровки;
					ТабДокумент.Вывести(ОбластьМакета);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		СтруктураОстатковОтпусков = РазложитьТаблицуОстатковОтпусков(Результат.ДанныеОстатков);
		
		ОстаткиОтпусковПоВидуОтпуска = СтруктураОстатковОтпусков.ОстаткиОтпусковПоВидуОтпуска;
		ПоложительныеОстатки = СтруктураОстатковОтпусков.ПоложительныеОстатки;
		АвансовыеОтпуска = СтруктураОстатковОтпусков.ОтрицательныеОстатки;
		
		// Подвал отчета: текущий остаток отпуска.
		ОбластьМакета = Макет.ПолучитьОбласть("ОстатокОтпуска|Тело");
		ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Остаток отпуска';
												|en = 'Remaining leave'");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывод остатков отпусков.
		Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
			СтрокаДней = ОстаткиОтпусковПоВидуОтпуска.Найти(ВидОтпуска, "ВидЕжегодногоОтпуска");
			ОбластьМакета = Макет.ПолучитьОбласть("ОстатокОтпуска|ВидОтпуска");
			ОбластьМакета.Параметры.КоличествоДней = ?(СтрокаДней= Неопределено, "0,00",
				Формат(СтрокаДней.КоличествоДней,ФорматЧисла));
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЦикла;
		
		// Вывод рабочих лет.
		Если ПоложительныеОстатки.Количество() > 0 Тогда
			// Выводим рабочие года по остаткам отпусков.
			ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
			ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Остатки отпусков накоплены за следующие периоды работы:';
													|en = 'Remaining leaves are accumulated for the following work periods:'");
			ТабДокумент.Вывести(ОбластьМакета);
			ПредыдущийВидОтпуска = Неопределено;
			Для каждого СтрокаОстатков Из ПоложительныеОстатки Цикл
				Если СтрокаОстатков.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"	" + НСтр("ru = 'для отпуска ""%1"":';
										|en = 'for leave ""%1"":'"),
						СтрокаОстатков.ВидОтпускаНаименование);
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"		" + НСтр("ru = '%1 - %2 (%3 дн.)';
										|en = '%1 - %2 (%3 d.)'"),
					Формат(СтрокаОстатков.РабочийГодС, ФорматДаты),
					Формат(СтрокаОстатков.РабочийГодПо, ФорматДаты),
					Формат(СтрокаОстатков.КоличествоДней, ФорматЧисла));
				ТабДокумент.Вывести(ОбластьМакета);
				ПредыдущийВидОтпуска = СтрокаОстатков.ВидЕжегодногоОтпуска;
			КонецЦикла;
		КонецЕсли;
		
		Если АвансовыеОтпуска.Количество() > 0 Тогда
			// Выводим рабочие года по остаткам отпусков.
			ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
			ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Были использованы авансом отпуска за следующие периоды работы:';
													|en = 'Leaves for the following work periods were used in advance:'");
			ТабДокумент.Вывести(ОбластьМакета);
			ПредыдущийВидОтпуска = Неопределено;
			Для каждого СтрокаОстатков Из АвансовыеОтпуска Цикл
				Если СтрокаОстатков.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"	" + НСтр("ru = 'для отпуска ""%1"":';
										|en = 'for leave ""%1"":'"),
						СтрокаОстатков.ВидОтпускаНаименование);
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"		" + НСтр("ru = '%1 - %2';
										|en = '%1 - %2'"),
					Формат(СтрокаОстатков.РабочийГодС, ФорматДаты),
					Формат(СтрокаОстатков.РабочийГодПо, ФорматДаты));
				ТабДокумент.Вывести(ОбластьМакета);
				ПредыдущийВидОтпуска = СтрокаОстатков.ВидЕжегодногоОтпуска;
			КонецЦикла;
		КонецЕсли;
		
		// Будущие отпуска
		ЦветФона = Новый Цвет(144, 238, 144);
		Если Результат.БудущиеОтпуска.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("БудущиеОтпуска|Тело");
			ОбластьМакета.Область().ЦветФона = ЦветФона;
			ТабДокумент.Вывести(ОбластьМакета);
			Для Каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("БудущиеОтпуска|ВидОтпуска");
				ОбластьМакета.Область().ЦветФона = ЦветФона;
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		БудущиеОтпуска = Новый Соответствие;
		
		Для Каждого СобытиеОтпусков Из Результат.БудущиеОтпуска Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСРасшифровкой|Тело");
			ОбластьМакета.Область().ЦветФона = ЦветФона;
			ОбластьМакета.Параметры.ТекстРасшифровка = СобытиеОтпусков.ДокументСобытие;
			ОбластьМакета.Параметры.Период = Формат(СобытиеОтпусков.ДатаСобытия, ФорматДаты);
			ОбластьМакета.Параметры.Событие = СобытиеОтпусков.Событие;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Для Каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка|ВидОтпуска");
				ОбластьМакета.Область().ЦветФона = ЦветФона;
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СобытиеОтпусков.ФактическиеОтпуска) Тогда
				// Вывод фактических отпусков
				// Определяем дату окончания в случае если отпусков несколько.
				ЕстьКомпенсация = Ложь;
				ЕстьРеальныйОтпуск = Ложь;
				ДнейКомпенсации = 0;
				
				ПериодыОтпуска = Новый ТаблицаЗначений;
				ПериодыОтпуска.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
				ПериодыОтпуска.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
				
				Для Каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
					ЕстьКомпенсация = ЕстьКомпенсация Или ФактическийОтпуск.Компенсация;
					ЕстьРеальныйОтпуск = ЕстьРеальныйОтпуск Или Не ФактическийОтпуск.Компенсация;
					Если ФактическийОтпуск.Компенсация Тогда
						ДнейКомпенсации = ДнейКомпенсации + ФактическийОтпуск.КоличествоДнейОтпуска;
					КонецЕсли;
					Для Каждого СтрокаПериода Из ФактическийОтпуск.ПериодыОтпуска Цикл 
						ЗаполнитьЗначенияСвойств(ПериодыОтпуска.Добавить(), СтрокаПериода);
					КонецЦикла;
				КонецЦикла; 
				
				ПериодыОтпуска.Свернуть("ДатаНачала,ДатаОкончания");
				ПредставлениеПериода = "";
				Для Каждого СтрокаПериода Из ПериодыОтпуска Цикл 
					ПредставлениеПериода = ПредставлениеПериода + ?(ПредставлениеПериода = "", "", "; ")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - %2';
																						|en = '%1 - %2'"), 
						Формат(СтрокаПериода.ДатаНачала, ФорматДаты), Формат(СтрокаПериода.ДатаОкончания, ФорматДаты));
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|Тело");
				ОбластьМакета.Область().ЦветФона = ЦветФона;
				Если ЕстьКомпенсация И ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Период отпуска: %1 (+ %2 дн. компенсации)';
							|en = 'Leave period: %1 (+ %2 days of compensation)'"), ПредставлениеПериода,
						Формат(ДнейКомпенсации, ФорматЧисла));
				ИначеЕсли ЕстьКомпенсация И Не ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Компенсация отпуска (%1 дн.)';
							|en = 'Leave compensation (%1 days)'"), Формат(ДнейКомпенсации, ФорматЧисла));
				ИначеЕсли ЕстьРеальныйОтпуск И Не ЕстьКомпенсация Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Период отпуска: %1';
							|en = 'Leave period: %1'"), ПредставлениеПериода);
				КонецЕсли;
				
				ОбластьМакета.Параметры.Текст  = ТекстЗаголовка;
				ТабДокумент.Вывести(ОбластьМакета);
				
				Для Каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					КоличествоДней = 0;
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|ВидОтпуска");
					ОбластьМакета.Область().ЦветФона = ЦветФона;
					Для Каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
						Если ФактическийОтпуск.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							КоличествоДней = КоличествоДней + ФактическийОтпуск.КоличествоДнейОтпуска;
						КонецЕсли;
					КонецЦикла;
					Если КоличествоДней > 0 Тогда
						ОбластьМакета.Параметры.КоличествоДней = "-" + Формат(КоличествоДней, ФорматЧисла);
					ИначеЕсли КоличествоДней < 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|ВидОтпуска");
						ОбластьМакета.Область().ЦветФона = ЦветФона;
						ОбластьМакета.Параметры.КоличествоДней = "+" + Формат(-КоличествоДней, ФорматЧисла);
					Иначе
						ОбластьМакета.Параметры.КоличествоДней = "";
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьМакета);
					ИспользованоДней = БудущиеОтпуска[ВидОтпуска];
					ИспользованоДней = ?(ИспользованоДней = Неопределено, КоличествоДней,
						ИспользованоДней + КоличествоДней);
					БудущиеОтпуска.Вставить(ВидОтпуска, ИспользованоДней);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат.БудущиеОтпуска.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОстатокБудущиеОтпуска|Тело");
			ОбластьМакета.Область().ЦветФона = ЦветФона;
			ТабДокумент.Вывести(ОбластьМакета);
			Для Каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("ОстатокБудущиеОтпуска|ВидОтпуска");
				ОбластьМакета.Область().ЦветФона = ЦветФона;
				СтрокаДней = ОстаткиОтпусковПоВидуОтпуска.Найти(ВидОтпуска, "ВидЕжегодногоОтпуска");
				КоличествоДней = ?(СтрокаДней = Неопределено, 0, СтрокаДней.КоличествоДней);
				ИспользованоДней = ?(БудущиеОтпуска[ВидОтпуска] = Неопределено, 0, БудущиеОтпуска[ВидОтпуска]);
				ОбластьМакета.Параметры.КоличествоДней = ?(КоличествоДней - ИспользованоДней = 0, "0,00",
					Формат(КоличествоДней - ИспользованоДней, ФорматЧисла));
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// Вывод разделителя.
		ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
		ОбластьМакета.Параметры.Текст  = "";
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

// Возвращает структуру, которая используется для передачи параметров для функции ОстаткиОтпусков().
// 	- ДатаОстатков 				- дата, на которую происходит расчет остатков.
// 	- Сотрудники				- массив сотрудников или одиночное значение типа СправочникСсылка.Сотрудники
// 	- ВидыОтпусков				- массив видов отпусков или одиночное значение типа СправочникСсылка.ВидыОтпусков
// 	- ИсключаемыеРегистраторы 	- массив ссылок регистраторов или одиночное значение типа ДокументСсылка.
//
Функция ОписаниеПараметровДляОстаткиОтпусков() Экспорт

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаОстатков", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Сотрудники");
	СтруктураПараметров.Вставить("ВидыОтпусков");
	СтруктураПараметров.Вставить("ИсключаемыеРегистраторы");
	СтруктураПараметров.Вставить("ЭтоРасчетПриУвольнении", Ложь);
	СтруктураПараметров.Вставить("ЗаработанныеПраваНаГодВперед", Ложь);
	СтруктураПараметров.Вставить("ОтраслевыеОсобенности");
	
	Возврат СтруктураПараметров;

КонецФункции

// Функция, отвечающая за расчет отпусков, положенных сотруднику.
// Предоставляет данные для специализированных функций служебного программного интерфейса.
// Не должна вызываться напрямую из библиотек зарплатно-кадровой функциональности.
//
// Параметры
//	СтруктураПараметров - тип Структура, со следующими полями (см. ОстаткиОтпусков.ОписаниеПараметровДляОстаткиОтпусков()).
//		* ДатаОстатков				- дата, на которую вычисляются остатки, тип Дата
//		* Сотрудники 				- список сотрудников, тип Массив или СправочникСсылка.Сотрудники
//		* ВидыОтпусков 				- список видов отпусков, тип Массив или СправочникСсылка.ВидыОтпусков
//		* ИсключаемыеРегистраторы	- список регистраторов, исключаемых при расчете остатков, тип Массив или ДокументСсылка.
//
// Возвращаемое значение:
//  ТаблицаЗначений - остатки отпусков сотрудников в разрезе рабочих лет, таблица значений с колонками:
//		* Сотрудник					- сотрудник
//		* ВидОтпуска				- вид отпуска
//		* ВидОтпускаНаименование    - наименование вида отпуска
//		* РабочийГодДатаНачала		- начало рабочего года
//		* РабочийГодДатаОкончания	- конец рабочего года
//		* Дни                       - остаток отпуска.
//
Функция ОстаткиОтпусков(ПараметрыОстатков) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОстатков.Сотрудники)
		И ТипЗнч(ПараметрыОстатков.Сотрудники) <> Тип("Массив") Тогда
		
		СотрудникМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОстатков.Сотрудники);
		ПараметрыОстатков.Сотрудники = СотрудникМассив;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОстатков.ВидыОтпусков)
		И ТипЗнч(ПараметрыОстатков.ВидыОтпусков) <> Тип("Массив") Тогда
		
		ВидыОтпусковМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОстатков.ВидыОтпусков);
		ПараметрыОстатков.ВидыОтпусков = ВидыОтпусковМассив;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОстатков.ИсключаемыеРегистраторы)
		И ТипЗнч(ПараметрыОстатков.ИсключаемыеРегистраторы) <> Тип("Массив") Тогда
		
		РегистраторМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОстатков.ИсключаемыеРегистраторы);
		ПараметрыОстатков.ИсключаемыеРегистраторы = РегистраторМассив;
		
	КонецЕсли;
	
	// Заполняем регистр ЗаработанныеПраваНаОтпуска.
	ДатаОстатков = ?(ПараметрыОстатков.ЗаработанныеПраваНаГодВперед, ДобавитьМесяц(ПараметрыОстатков.ДатаОстатков, 12), ПараметрыОстатков.ДатаОстатков);
    РасчетЗаработанныхОтпусков(
		ПараметрыОстатков.Сотрудники,
		ДатаОстатков,
		ПараметрыОстатков.ЭтоРасчетПриУвольнении,
		ПараметрыОстатков.ОтраслевыеОсобенности);
	
	ПараметрыТаблицыОстатков = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОстатков);
	ТаблицаРасчета = ТаблицаОстатковОтпусков(ПараметрыТаблицыОстатков);
	
	Возврат ТаблицаРасчета;
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТЗаработанныеПраваНаОтпуска.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц,
//		ИмяВременнойТаблицыОтборовСотрудников - Строка - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовСотрудников - Строка - перечисленные через запятую имена полей
//				таблицы фильтра (Сотрудник, НачалоПериода, ОкончаниеПериода).
//		ИмяВТЗаработанныеПраваНаОтпуска - Строка - имя создаваемой временной таблицы.
//
// Возвращаемое значение:
//		Структура:
//			* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц,
//			* ИмяВременнойТаблицыОтборовСотрудников - Строка,
//			* ПоляОтбораСотрудников - Структура,
//			* ИмяВТЗаработанныеПраваНаОтпуска - Строка
//
Функция ОписательВременныхТаблицДляСоздатьВТЗаработанныеПраваНаОтпуска(
		МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников,
		ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,НачалоПериода,ОкончаниеПериода",
		ИмяВТЗаработанныеПраваНаОтпуска = "ВТЗаработанныеПраваНаОтпуска") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц",				МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников",	ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников",					ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТЗаработанныеПраваНаОтпуска",		ИмяВТЗаработанныеПраваНаОтпуска);
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Создает и помещает в менеджер временных таблиц
//	таблицу ВТЗаработанныеПраваНаОтпуска с данными заработанных прав на отпуска
//	сотрудников за период. Список сотрудников и периодов,
//	по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
//	таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
//	колонки имена которых переданы в метод ОписательВременныхТаблицДляСоздатьВТЗаработанныеПраваНаОтпуска.
//
// Параметры:
//		ОписательВременныхТаблиц - Структура - сформированная
//				методом ОписательВременныхТаблицДляСоздатьВТЗаработанныеПраваНаОтпуска.
//		ТолькоРазрешенные - Булево
//	
// Помещает в менеджер таблицу ВТЗаработанныеПраваНаОтпуска с колонками:
//		Сотрудник,
//		ВидЕжегодногоОтпуска,
//		ДатаНачала,
//		ДатаОкончания,
//		КоличествоДней,
//		КоличествоДнейЗаПериод
//
Процедура СоздатьВТЗаработанныеПраваНаОтпуска(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = ЗапросВТЗаработанныеПраваНаОтпуска(ОписательВременныхТаблиц, ТолькоРазрешенные);
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

#Область ЗаполнениеТабличныхЧастейПравамиНаОтпуска

// Описатель параметров для ЗаполнитьПоложеннымиПравамиСотрудника() и ЗаполнитьДействующимиПравамиСотрудника().
//
Функция ОписаниеПараметровДанныхКадровогоДокумента() Экспорт
	
	ДанныеДокумента = Новый Структура;
	
	ДанныеДокумента.Вставить("Регистратор");
	ДанныеДокумента.Вставить("Сотрудник");
	ДанныеДокумента.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Описатель параметров для ЗаполнитьПоложеннымиПравамиСотрудника()
//
Функция ОписаниеПараметровДанныхПозиции() Экспорт

	ДанныеПозиции = Новый Структура;
	
	ДанныеПозиции.Вставить("ДолжностьПоШтатномуРасписанию");
	ДанныеПозиции.Вставить("Подразделение");
	ДанныеПозиции.Вставить("Должность");
	ДанныеПозиции.Вставить("Территория");
	
	Возврат ДанныеПозиции;

КонецФункции

// Процедура заполняет объект ежегодными отпусками, которые предоставляются сотруднику.
//
// Параметры:
// 	ТабличнаяЧастьОбъекта	 - табличная часть для заполнения.
// 	ДанныеДокумента			 - данные кадрового документа
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента().
// 	ДанныеНовойПозиции		 - набор параметров устанавливаемой позиции.
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхПозиции().
// 	ДанныеПрошлойПозиции	 - набор параметров прошлой позиции, на основании которых были сформированы текущие права на отпуска сотрудника.
//								Необязательный.
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхПозиции().
//
Процедура ЗаполнитьПоложеннымиПравамиСотрудника(ТабличнаяЧастьОбъекта, ДанныеДокумента, ДанныеНовойПозиции, ДанныеПрошлойПозиции = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеДокумента.ДатаСобытия) Тогда
		ДанныеДокумента.ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта.Очистить();
	
	// Получаем действующие права.
	ДействующиеПрава = ДействующиеПраваСотрудника(ДанныеДокумента.Сотрудник, ДанныеДокумента.ДатаСобытия, ДанныеДокумента.Регистратор);
	
	// Получаем пул отпусков по данным текущей позиции.	
	ОтпускаПоПозиции = ОтпускаПоПозиции(ДанныеДокумента.ДатаСобытия, ДанныеНовойПозиции);
	ОтпускаПоТерритории = ОтпускаПоТерритории(ДанныеНовойПозиции.Территория, ДанныеДокумента.ДатаСобытия);
	
	ЕстьПодсистемаРабочиеМестаОхраныТруда = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда");
	Если ЕстьПодсистемаРабочиеМестаОхраныТруда Тогда 
		МодульРабочиеМестаОхраныТрудаФормы = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТрудаФормы");
		ОтпускаПоРабочемуМесту = МодульРабочиеМестаОхраныТрудаФормы.ОтпускаПоРабочемуМесту(ДанныеНовойПозиции);
	КонецЕсли;
	
	// В том случае, если есть предыдущие права - необходимо понять, какие из действующих прав были обусловлены
	// предыдущими данными позиции (ДолжностьШР, Подразделение, Должность, Территория).
	// В том случае, если они не присутствуют в правах новой позиции - удалить из назначаемых прав.
	Если ДанныеПрошлойПозиции <> Неопределено Тогда
		НаборПредыдущихПрав = ДействующиеПрава.Скопировать();
		
		ПериодПредыдущихЗначений = Неопределено;
		Если Не ДанныеДокумента.Свойство("ПериодПредыдущихЗначений", ПериодПредыдущихЗначений)
			Или Не ЗначениеЗаполнено(ПериодПредыдущихЗначений) Тогда
			
			ПериодПредыдущихЗначений = ДанныеДокумента.ДатаСобытия;
		КонецЕсли;
		
		МассивПрав = Новый Массив;
		МассивПрав.Добавить(ОтпускаПоПозиции(ПериодПредыдущихЗначений, ДанныеПрошлойПозиции));
		МассивПрав.Добавить(ОтпускаПоТерритории(ДанныеПрошлойПозиции.Территория, ДанныеДокумента.ДатаСобытия));
		Если ЕстьПодсистемаРабочиеМестаОхраныТруда Тогда 
			МассивПрав.Добавить(МодульРабочиеМестаОхраныТрудаФормы.ОтпускаПоРабочемуМесту(ДанныеПрошлойПозиции));
		КонецЕсли;
		ПредыдущиеПраваПозиции = ОбъединитьПулыПравНаОтпуска(МассивПрав);
		
		МассивПрав = Новый Массив;
		МассивПрав.Добавить(ОтпускаПоПозиции);
		МассивПрав.Добавить(ОтпускаПоТерритории);
		Если ЕстьПодсистемаРабочиеМестаОхраныТруда Тогда 
			МассивПрав.Добавить(ОтпускаПоРабочемуМесту);
		КонецЕсли;
		НовыеПраваПозиции = ОбъединитьПулыПравНаОтпуска(МассивПрав);
		
		УдалитьНеактуальныеОтпускаПозицииИзДействующихПрав(ДействующиеПрава, ПредыдущиеПраваПозиции, НовыеПраваПозиции);
	Иначе
		ПредыдущиеПрава = Неопределено;
	КонецЕсли;
	
	МассивПрав = Новый Массив;
	МассивПрав.Добавить(ДействующиеПрава);
	МассивПрав.Добавить(ОтпускаПоПозиции);
	МассивПрав.Добавить(ОтпускаПоТерритории);
	Если ЕстьПодсистемаРабочиеМестаОхраныТруда Тогда 
		МассивПрав.Добавить(ОтпускаПоРабочемуМесту);
	КонецЕсли;
	МассивПрав.Добавить(ЛичныеЕжегодныеОтпуска(ДанныеДокумента.Сотрудник));
	
	ИтоговаяТаблицаПрав = ОбъединитьПулыПравНаОтпуска(МассивПрав);
	
	ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, ИтоговаяТаблицаПрав, НаборПредыдущихПрав);
	
КонецПроцедуры

// Процедура заполняет объект ежегодными отпусками, которые предоставляются сотруднику.
//
// Параметры:
// 	ТабличнаяЧастьОбъекта	 - табличная часть для заполнения.
// 	ДанныеДокумента			 - данные кадрового документа
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента().
//
Процедура ЗаполнитьДействующимиПравамиСотрудника(ТабличнаяЧастьОбъекта, ДанныеДокумента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеДокумента.ДатаСобытия) Тогда
		ДанныеДокумента.ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта.Очистить();
	
	ДействующиеПрава = ДействующиеПраваСотрудника(ДанныеДокумента.Сотрудник, ДанныеДокумента.ДатаСобытия, ДанныеДокумента.Регистратор);	
	
	ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, ДействующиеПрава, ДействующиеПрава);
	
КонецПроцедуры

// Процедура заполняет объект ежегодными отпусками, которые предоставляются сотруднику.
//
// Параметры:
// 	ТабличнаяЧастьОбъекта	 - табличная часть для заполнения.
// 	ДанныеДокумента			 - данные кадрового документа
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента().
//
Процедура ЗаполнитьПоложеннымиПравамиПозициюШР(ТабличнаяЧастьОбъекта, Подразделение, Должность, ДатаСобытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта.Очистить();
	
	ПоложенныеОтпуска = ЕжегодныеОтпускаДляПозицииШтатногоРасписания(Подразделение, Должность, ДатаСобытия);
	
	ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, ПоложенныеОтпуска);
	
КонецПроцедуры

#КонецОбласти 

// Получение остатка отпуска

// Функция рассчитывает остаток отпуска для одного сотрудника на выбранную дату.
//
// Параметры:
//	Сотрудник				- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ИсключаемыйРегистратор	- необязательный, регистратор, исключаемый из расчета.
//	ЭтоРасчетПриУвольнении	- необязательный, если признак установлен, то функция будет считать, что сотрудник увольняется датой
//	                         ДатаОстатков.
//
// Возвращаемое значение:
//	Структура с остатком, рабочим периодом остатка, текстовым представлением остатка и вложенными структурами с
//	остатками в разрезе отпусков и рабочих лет.
//
Функция ОстатокОтпускаСотрудникаНаДату(Сотрудник, ДатаОстатков = '00010101', ИсключаемыйРегистратор = Неопределено, ЭтоРасчетПриУвольнении = Ложь,
	ОтраслевыеОсобенности = Неопределено) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("ОстатокНаДату", 0);
	ВозвращаемаяСтруктура.Вставить("РабочийГодС", Дата(1, 1, 1));
	ВозвращаемаяСтруктура.Вставить("РабочийГодПо", Дата(1, 1, 1));
	ВозвращаемаяСтруктура.Вставить("Примечание", "");
	ВозвращаемаяСтруктура.Вставить("ОстаткиВРазрезеВидовОтпусков", Новый Массив);
	ВозвращаемаяСтруктура.Вставить("ОстаткиВРазрезеРабочихЛетИВидовОтпусков", Новый Массив);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ВозвращаемаяСтруктура; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПараметрыОтбора = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыОтбора.ДатаОстатков			= НачалоДня(ДатаОстатков);
	ПараметрыОтбора.Сотрудники 				= Сотрудник;
	ПараметрыОтбора.ИсключаемыеРегистраторы	= ИсключаемыйРегистратор;
	ПараметрыОтбора.ЭтоРасчетПриУвольнении	= ЭтоРасчетПриУвольнении;
	ПараметрыОтбора.ОтраслевыеОсобенности = ОтраслевыеОсобенности;
	
	Результат = ОстаткиОтпусков(ПараметрыОтбора);
	СтруктураОстатковОтпусков = РазложитьТаблицуОстатковОтпусков(Результат, Сотрудник);
	
	ОбщиеОстаткиСотрудника = СтруктураОстатковОтпусков.ОстаткиОтпусков;
	Если ОбщиеОстаткиСотрудника.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемаяСтруктура, ОбщиеОстаткиСотрудника[0]);
		ВозвращаемаяСтруктура.ОстатокНаДату = ОбщиеОстаткиСотрудника[0].КоличествоДней;
	КонецЕсли;
	ВозвращаемаяСтруктура.Примечание = Строка(ВозвращаемаяСтруктура.ОстатокНаДату) + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней", ВозвращаемаяСтруктура.ОстатокНаДату);
	
	ВозвращаемаяСтруктура.ОстаткиВРазрезеВидовОтпусков = СтруктураОстатковОтпусков.ОстаткиОтпусковПоВидуОтпуска;
	ВозвращаемаяСтруктура.ОстаткиВРазрезеРабочихЛетИВидовОтпусков = СтруктураОстатковОтпусков.ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Функция рассчитывает сводные остатки отпусков для списка сотрудников. Остаток рассчитывается на конец дня.
//
// Параметры:
//	Сотрудники				- список сотрудников;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ВидыОтпусков			- массив элементов справочника ВидыОтпусков, по которым необходимы остатки, если не указано
//								остатки получаются по всем видам отпусков.
//
Функция ОстаткиОтпусковСотрудниковНаДату(Сотрудники, ДатаОстатков = '00010101', ВидыОтпусков = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтруктураПараметров = ОписаниеПараметровДляОстаткиОтпусков();
	СтруктураПараметров.Сотрудники	 = Сотрудники;
	СтруктураПараметров.ДатаОстатков = НачалоДня(ДатаОстатков);
	СтруктураПараметров.ВидыОтпусков = ВидыОтпусков;
	
	Результат = ОстаткиОтпусков(СтруктураПараметров);
	СтруктураОстатковОтпусков = РазложитьТаблицуОстатковОтпусков(Результат);
	
	СводныеОстатки = СтруктураОстатковОтпусков.ОстаткиОтпусков;
	
	Возврат СводныеОстатки;
	
КонецФункции

// Возвращает структуру для передачи параметров в РабочийПериодОтпуска()
//
Функция ПараметрыПолученияРабочегоПериодаОтпуска() Экспорт 

	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Сотрудник");
	ПараметрыПолучения.Вставить("ТекущийРегистратор");
	ПараметрыПолучения.Вставить("ВидОтпуска");
	ПараметрыПолучения.Вставить("ДатаНачала");
	ПараметрыПолучения.Вставить("ДатаОкончания");
	ПараметрыПолучения.Вставить("ДатаКомпенсации", Дата("00010101"));
	ПараметрыПолучения.Вставить("КоличествоДнейКомпенсации", 0);
	Возврат ПараметрыПолучения;

КонецФункции
            
// Функция определяет общий рабочий период для указанного отпуска с учетом компенсации.
//
// Параметры:
//	Структура со следующими полями (см. ПараметрыПолученияРабочегоПериодаОтпуска()):
//		Сотрудник					- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//		ТекущийРегистратор			- При определении рабочего периода движения, сделанные переданным регистратором, будут
//		                     			проигнорированы.
//		ВидОтпуска					- Вид ежегодного отпуска.
//		ДатаНачала					- Дата начала отпуска.
//		ДатаОкончания				- Дата окончания отпуска.
//		ДатаКомпенсации				- Дата компенсации отпуска.
//		КоличествоДнейКомпенсации	- Количество дней компенсации отпуска.
//
// Возвращаемое значение:
//	Структура с периодом рабочего года.
//
Функция РабочийПериодОтпуска(СтруктураПараметров) Экспорт
	
	ДатаОстатков = СтруктураПараметров.ДатаНачала;
	Если ДатаОстатков = Дата(1, 1, 1) Тогда
		ДатаОстатков = СтруктураПараметров.ДатаКомпенсации;
	КонецЕсли;
	
	ОписаниеВидаОтпуска = ОписаниеВидаОтпуска(СтруктураПараметров.ВидОтпуска, ОтпускСотрудникаВРабочихДняхПоДоговору(СтруктураПараметров.Сотрудник, ДатаОстатков));
	ЕжегодныйОтпуск = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ВидОтпуска, "ОтпускЯвляетсяЕжегодным");
	
	КоличествоДнейОтпуска = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(
		СтруктураПараметров.Сотрудник,
		СтруктураПараметров.ДатаНачала,
		СтруктураПараметров.ДатаОкончания,
		ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням,
		ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		
	Если КоличествоДнейОтпуска = 0 
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		КоличествоДнейОтпуска = Модуль.КалендарныхДнейОтпуска(СтруктураПараметров.ДатаНачала,СтруктураПараметров.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням);
	КонецЕсли;
	
	РасходуетсяДней = КоличествоДнейОтпуска + СтруктураПараметров.КоличествоДнейКомпенсации;
	
	ПараметрыВызова = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыВызова.Сотрудники = СтруктураПараметров.Сотрудник;
	ПараметрыВызова.ДатаОстатков = НачалоДня(ДатаОстатков);
	ПараметрыВызова.ВидыОтпусков = СтруктураПараметров.ВидОтпуска;
	ПараметрыВызова.ИсключаемыеРегистраторы = СтруктураПараметров.ТекущийРегистратор;
	
	ОстаткиОтпусковСотрудника = ОстаткиОтпусков(ПараметрыВызова);
	
	ОбщийОстатокОтпуска = ОстаткиОтпусковСотрудника.Итог("Дни");
	Если РасходуетсяДней > ОбщийОстатокОтпуска Тогда
		// Остатков отпуска на текущий момент не хватает, необходимо посчитать "будущие" остатки.
		// Чтобы не получить бесконечную итерацию, устанавливаем максимальную дату "заглядывания в будущее".
		// 1. получаем остатки на максимальную дату.
		
		ГодДаты = Год(ТекущаяДатаСеанса()) + 5;
		МесяцДаты = Месяц(ТекущаяДатаСеанса());
		ДеньДаты = Мин(День(ТекущаяДатаСеанса()), День(КонецМесяца(Дата(ГодДаты, МесяцДаты, 1))));
		
		МаксимальнаяДата = Дата(ГодДаты, МесяцДаты, ДеньДаты);
		Для каждого ОстатокОтпуска Из ОстаткиОтпусковСотрудника Цикл
			МаксимальнаяДата = Макс(МаксимальнаяДата, ОстатокОтпуска.РабочийГодДатаОкончания);
		КонецЦикла;
		ПараметрыВызова.ДатаОстатков = МаксимальнаяДата;
		ОстаткиОтпусковСотрудника = ОстаткиОтпусков(ПараметрыВызова);
	КонецЕсли;	
		
	РабочийГодПериодаС = '00010101';
	РабочийГодПериодаПо = '00010101';
	Для каждого ОстатокОтпуска Из ОстаткиОтпусковСотрудника Цикл
		Если РасходуетсяДней <= 0 Тогда
			Прервать;
		КонецЕсли;
		Если ОстатокОтпуска.Дни < 0 Тогда
			РабочийГодПериодаС = ОстатокОтпуска.РабочийГодДатаНачала;
			РабочийГодПериодаПо = ОстатокОтпуска.РабочийГодДатаОкончания;
			Прервать;
		КонецЕсли;
		Если РабочийГодПериодаС = '00010101' Тогда
			РабочийГодПериодаС = ОстатокОтпуска.РабочийГодДатаНачала;
		КонецЕсли;
		РабочийГодПериодаПо = ОстатокОтпуска.РабочийГодДатаОкончания;
		РасходуетсяДней = РасходуетсяДней - ОстатокОтпуска.Дни;
	КонецЦикла; 
	
	// Если расход идет авансом, то:
	Если РасходуетсяДней > 0 Тогда
		Если РабочийГодПериодаС = '00010101' Тогда
			РабочийГодПериодаС = ?(РабочийГодПериодаПо = '00010101', НачалоДня(ДатаОстатков), КонецДня(РабочийГодПериодаПо) + 1);
		КонецЕсли;
		Если РабочийГодПериодаПо = '00010101' Тогда
			РабочийГодПериодаПо = ДобавитьМесяц(РабочийГодПериодаС, 12) - 1;
		Иначе
			РабочийГодПериодаПо = ДобавитьМесяц(РабочийГодПериодаПо, 12);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("РабочийГодС, РабочийГодПо", РабочийГодПериодаС, РабочийГодПериодаПо);
	
КонецФункции

// Функция определяет общий рабочий период для всех указанных отпусков и компенсаций.
//
// Параметры:
//	Сотрудник			- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ТекущийРегистратор	- При определении рабочего периода движения, сделанные переданным регистратором, будут
//	                     проигнорированы.
//	СписокОтпусков		- Таблица значений со списком отпусков:
//		ДатаНачала			- Дата начала отпуска.
//		ДатаОкончания		- Дата окончания отпуска.
//		ВидОтпуска			- Вид ежегодного отпуска.
//	СписокКомпенсаций	- Таблица значений со списком компенсаций.
//		ДатаКомпенсации		- Дата компенсации отпуска.
//		КоличествоДней		- Количество дней компенсации отпуска.
//		ВидОтпуска			- Вид ежегодного отпуска.
//
// Возвращаемое значение:
//	Структура с периодом общего для всех отпусков рабочего года.
//
Функция РабочиеПериодыСпискаОтпусков(Сотрудник, ТекущийРегистратор, СписокОтпусков, СписокКомпенсаций) Экспорт
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	ДатаОстатков = Дата(1, 1, 1);
	Для Каждого Отпуск Из СписокОтпусков Цикл
		Если ДатаОстатков = Дата(1, 1, 1) Или ДатаОстатков > Отпуск.ДатаНачала Тогда
			ДатаОстатков = Отпуск.ДатаНачала;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Компенсация Из СписокКомпенсаций Цикл
		Если ДатаОстатков = Дата(1, 1, 1) Или ДатаОстатков > Компенсация.ДатаКомпенсации Тогда
			ДатаОстатков = Компенсация.ДатаКомпенсации;
		КонецЕсли;
	КонецЦикла;
	
	МассивОтпусков = Новый Массив;
	Для Каждого Отпуск Из СписокОтпусков Цикл
		МассивОтпусков.Добавить(Отпуск.ВидОтпуска);
	КонецЦикла;
	
	МассивКомпенсаций = Новый Массив;
	Для Каждого Компенсация Из СписокКомпенсаций Цикл
		МассивКомпенсаций.Добавить(Компенсация.ВидОтпуска);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпусков, МассивКомпенсаций, Истина);
	
	ПараметрыВызова = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыВызова.Сотрудники = Сотрудник;
	ПараметрыВызова.ДатаОстатков = НачалоДня(Дата(Год(ДатаОстатков) + 5, Месяц(ДатаОстатков), День(ДатаОстатков)));
	ПараметрыВызова.ВидыОтпусков = МассивОтпусков;
	ПараметрыВызова.ИсключаемыеРегистраторы = ТекущийРегистратор;
	
	ОстаткиОтпусковСотрудника = ОстаткиОтпусков(ПараметрыВызова);
	
	РабочиеПериодыПоВидамОтпусков = Новый Соответствие;
	
	ВидОтпуска = Неопределено;
	
	Для Каждого Результат Из ОстаткиОтпусковСотрудника Цикл
		
		Если ВидОтпуска <> Результат.ВидОтпуска Тогда
			РабочийГодС		= '00010101';
			РабочийГодПо	= '00010101';
			
			КоличествоДней = 0;
			СтрокиОтпуска = СписокОтпусков.НайтиСтроки(Новый Структура("ВидОтпуска", Результат.ВидОтпуска));
			Для Каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
				КоличествоДней = КоличествоДней + СтрокаОтпуска.КоличествоДней;
			КонецЦикла;			
			СтрокиКомпенсации = СписокКомпенсаций.НайтиСтроки(Новый Структура("ВидОтпуска", Результат.ВидОтпуска));
			Для Каждого СтрокаКомпенсации Из СтрокиКомпенсации Цикл
				КоличествоДней = КоличествоДней + СтрокаКомпенсации.КоличествоДней;
			КонецЦикла;		
			
			ВидОтпуска = Результат.ВидОтпуска;
		КонецЕсли; 
		
		Если КоличествоДней <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РабочийГодС) Или РабочийГодС > Результат.РабочийГодДатаНачала Тогда
			РабочийГодС		= Результат.РабочийГодДатаНачала;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РабочийГодПо) Или РабочийГодПо < Результат.РабочийГодДатаОкончания Тогда
			РабочийГодПо	= Результат.РабочийГодДатаОкончания;
		КонецЕсли;
		РабочиеПериодыПоВидамОтпусков.Вставить(
			Результат.ВидОтпуска,
			Новый Структура("РабочийГодС, РабочийГодПо", РабочийГодС, РабочийГодПо));
		КоличествоДней = КоличествоДней - Результат.Дни;
	КонецЦикла;
		
	Возврат РабочиеПериодыПоВидамОтпусков;
	
КонецФункции

// Функция возвращает имя макета для подсистемы Печать.
//
Функция ИмяМакетаДляПечати() Экспорт
	
	Возврат "ОбщийМакет.ПФ_MXL_СправкаПоОтпускамСотрудника";
	
КонецФункции

// Процедура заполняет объект ежегодными отпусками, которые предоставляются всем сотрудникам.
//
// Параметры:
//	Объект	- ДокументОбъект, в котором есть ТЧ ЕжегодныеОтпуска.
//  ОчищатьПередЗаполнением - Булево.
//
Процедура ЗаполнитьОбщимиЕжегоднымиОтпусками(Объект, ОчищатьПередЗаполнением = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.КоличествоДнейВГод
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.ПометкаУдаления
	|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
	|	И (НЕ ВидыОтпусков.КоличествоДнейВГод = 0
	|			ИЛИ НЕ ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит))
	|	И НЕ ВидыОтпусков.Недействителен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОтпусков.Предопределенный УБЫВ,
	|	ВидыОтпусков.Наименование";
	
	ТаблицаОтпусков = Запрос.Выполнить().Выгрузить();
	Если ОчищатьПередЗаполнением Тогда
		Объект.ЕжегодныеОтпуска.Загрузить(ТаблицаОтпусков);
	Иначе
		
		Для каждого СтрокаТаблицыОтпусков Из ТаблицаОтпусков Цикл
			ЗаполнитьЗначенияСвойств(Объект.ЕжегодныеОтпуска.Добавить(), СтрокаТаблицыОтпусков);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает сведения о предоставляемых на дату события отпусках сотрудника и выводит в документе сведения
//  об отличиях введенных в документ данных по сравнению с прочитанными.
//
// Параметры:
//	Объект					- ДокументОбъект, в котором есть Сотрудник и ТЧ ЕжегодныеОтпуска.
//	ИмяРеквизитаДатаСобытия	- Имя реквизита из переменной Объект, по которому необходимо определять дату получения
//	                          данных.
//
Процедура ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахСотрудника(Объект, ИмяРеквизитаДатаСобытия) Экспорт
	
	Если Объект.ЕжегодныеОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЧЕжегодныеОтпускаПредыдущие = ЕжегодныеОтпускаСотрудника(Объект.Сотрудник, Объект[ИмяРеквизитаДатаСобытия], Объект.Ссылка);
	
	Для Каждого СтрокаОтпуска Из Объект.ЕжегодныеОтпуска Цикл
		СтруктураПоиска = Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска);
		НайденныеСтроки = ТЧЕжегодныеОтпускаПредыдущие.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОтпуска.ДействующийОтпуск			= Истина;
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, НайденныеСтроки[0].КоличествоДнейВГод);
		Иначе
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
		КонецЕсли;
		ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет объект ежегодными отпусками, которые указаны в штатном расписании.
//
// Параметры:
//	Объект									- ДокументОбъект, в котором есть ТЧ Позиции и ТЧ ЕжегодныеОтпуска.
//
Процедура ЗаполнитьЕжегоднымиОтпускамиШтатногоРасписания(Объект, ДатаВступленияВСилу) Экспорт
	
	Позиции = Объект.Позиции.ВыгрузитьКолонку("Позиция");
	ЕжегодныеОтпускаПозиций = ЕжегодныеОтпускаПозицииШтатногоРасписания(Позиции, ДатаВступленияВСилу, Объект.Ссылка);
	Если ЕжегодныеОтпускаПозиций.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Позиции", Позиции);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка КАК ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ИЗ
			|	Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ШтатноеРасписаниеЕжегодныеОтпуска
			|ГДЕ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка В(&Позиции)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ВидЕжегодногоОтпуска";
			
		ЕжегодныеОтпускаПозиций = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ДополнитьСведениями = ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура");
	Для Каждого СтрокаПозиции Из Объект.Позиции Цикл
		
		ОтпускаПозиции = ЕжегодныеОтпускаПозиций.НайтиСтроки(Новый Структура("ПозицияШтатногоРасписания", СтрокаПозиции.Позиция));
		Для Каждого СтрокаОтпускаПоПозиции Из ОтпускаПозиции Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции);
			СтруктураПоиска.Вставить("ВидЕжегодногоОтпуска", СтрокаОтпускаПоПозиции.ВидЕжегодногоОтпуска);
			
			СтрокиОтпускаПозиции = Объект.ЕжегодныеОтпуска.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОтпускаПозиции.Количество() = 0 Тогда
				
				СтрокаОтпуска = Объект.ЕжегодныеОтпуска.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтпуска, СтрокаОтпускаПоПозиции);
				СтрокаОтпуска.ИдентификаторСтрокиПозиции	= СтрокаПозиции.ИдентификаторСтрокиПозиции;
				
			ИначеЕсли СтрокиОтпускаПозиции[0].КоличествоДнейВГод = 0 Тогда
				
				СтрокаОтпуска = СтрокиОтпускаПозиции[0];
				СтрокаОтпуска.КоличествоДнейВГод = СтрокаОтпускаПоПозиции.КоличествоДнейВГод;
				
			КонецЕсли;
			
			Если ДополнитьСведениями Тогда
				СтрокаОтпуска.ДействующийОтпуск			= Истина;
				СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
				ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура читает сведения о предоставляемых на дату события отпусках штатного расписания и выводит в документе
// сведения об отличиях введенных в документ данных по сравнению с прочитанными.
//
// Параметры:
//	Объект					- ДокументОбъект, в котором есть ТЧ Позиции и ТЧ ЕжегодныеОтпуска.
//
Процедура ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахШтатногоРасписания(Объект, ДатаВступленияВСилу) Экспорт
	
	Если Объект.ЕжегодныеОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЧЕжегодныеОтпускаПредыдущие = ЕжегодныеОтпускаПозицииШтатногоРасписания(Объект.Позиции.Выгрузить(, "Позиция"), ДатаВступленияВСилу, Объект.Ссылка);
	
	Для Каждого СтрокаОтпуска Из Объект.ЕжегодныеОтпуска Цикл
		СтрокиПозиции = Объект.Позиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаОтпуска.ИдентификаторСтрокиПозиции));
		Если СтрокиПозиции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ПозицияШтатногоРасписания, ВидЕжегодногоОтпуска", СтрокиПозиции[0].Позиция, СтрокаОтпуска.ВидЕжегодногоОтпуска);
		НайденныеСтроки = ТЧЕжегодныеОтпускаПредыдущие.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОтпуска.ДействующийОтпуск			= Истина;
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, НайденныеСтроки[0].КоличествоДнейВГод);
		Иначе
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
		КонецЕсли;
		ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает условное оформление в форме для ТЧ "Ежегодные отпуска".
//
// Параметры:
//	Форма	- Форма с ТЧ ЕжегодныеОтпуска.
//
Процедура УстановитьУсловноеОформлениеЕжегодныхОтпусков(Форма) Экспорт
	
	СтруктураОпределения = Новый Структура("Объект",Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураОпределения,Форма);
	Если СтруктураОпределения.Объект = Неопределено Тогда
		СтрокаОтпусков = "ЕжегодныеОтпуска";
	Иначе
		СтрокаОтпусков = "Объект.ЕжегодныеОтпуска";
	КонецЕсли;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".КоличествоДнейВГод");
	ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ТекущееКоличествоДнейВГод");
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ЕжегодныеОтпуска.Действие" );
		ЭлементОтбора.ПравоеЗначение	= Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ДействующийОтпуск");
		ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".Действие");
	ЭлементОтбора.ПравоеЗначение	= Перечисления.ДействияСЕжегоднымиОтпусками.Отменить;
	
КонецПроцедуры

// Функция возвращает количество дней отпуска в год по умолчанию.
//
// Параметры:
//	ВидЕжегодногоОтпуска - СправочникСсылка.ВидОтпуска - вид отпуска, для которого необходимо получить количество дней
//	                                                     по умолчанию.
//
Функция КоличествоДнейОтпускаВГодПоУмолчанию(ВидЕжегодногоОтпуска) Экспорт
	
	Если ВидЕжегодногоОтпуска = Неопределено Или ВидЕжегодногоОтпуска.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска,КоличествоДнейВГод");
	Если РеквизитыОбъекта.ХарактерЗависимостиДнейОтпуска <> ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит") Тогда
		Возврат Неопределено;
	Иначе
		Возврат РеквизитыОбъекта.КоличествоДнейВГод;
	КонецЕсли;
	
КонецФункции

// Формирует форматированную строку с информацией о ежегодных отпусках сотрудника.
// Параметры:
// 	ТаблицаОтпусков - таблица значений с правами на отпуск сотрудника.
// 	ТолькоПросмотр - состояние открытия формы.
// 	РежимФормирования - режим формирования надписи.
//		* 0 - простой список отпусков
//		* 1 - расширенное представление, с учетом изменений
//		* 2 - краткий вывод измененных отпусков.
//
Функция НадписьПраваНаОтпуск(ТаблицаОтпусков, ТолькоПросмотр, РежимФормирования = 0) Экспорт
	
	МассивФорматированнойСтроки = ПредставлениеПраваНаОтпускПоКоллекцииСтрок(ТаблицаОтпусков, ТолькоПросмотр, РежимФормирования);
	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированнойСтроки);

КонецФункции

// Проведение по регистрам

// Заполняет движения видами ежегодных отпусков по штатному расписанию
//		ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		ДатаСобытия
//		ПозицияШтатногоРасписания
//		ВидЕжегодногоОтпуска
//		КоличествоДнейВГод
//
Процедура СформироватьДвиженияЕжегодныхОтпусковПоШтатномуРасписанию(Движения, ДатаСобытия, ЕжегодныеОтпуска) Экспорт
	
	Движения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Записывать = Истина;
	Пока ЕжегодныеОтпуска.Следующий() Цикл
		НоваяСтрока = Движения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Добавить();
		НоваяСтрока.Дата						= ДатаСобытия;
		НоваяСтрока.ПозицияШтатногоРасписания	= ЕжегодныеОтпуска.ПозицияШтатногоРасписания;
		НоваяСтрока.ВидЕжегодногоОтпуска		= ЕжегодныеОтпуска.ВидЕжегодногоОтпуска;
		НоваяСтрока.КоличествоДнейВГод			= ЕжегодныеОтпуска.КоличествоДнейВГод;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения положенными видами ежегодных отпусков
//		ПоложенныеВидыЕжегодныхОтпусков.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		ДатаСобытия
//		Сотрудник
//		ВидЕжегодногоОтпуска
//		КоличествоДнейВГод
//
Процедура СформироватьДвиженияПоложенныхЕжегодныхОтпусков(РегистраторСсылка, Движения, ЕжегодныеОтпуска) Экспорт
	
	ИспользуемВозвратныеСобытия = Ложь;
	Если ЕжегодныеОтпуска.Колонки.Найти("ДействуетДо") <> Неопределено Тогда
		Для Каждого СтрокаОтпуск Из ЕжегодныеОтпуска Цикл
			Если ЗначениеЗаполнено(СтрокаОтпуск.ДействуетДо) Тогда
				ИспользуемВозвратныеСобытия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЕстьИспользуется = ЕжегодныеОтпуска.Колонки.Найти("Используется") <> Неопределено;
	
	Если НЕ ИспользуемВозвратныеСобытия Тогда
		// Просто записываем данные в регистр.
		Для Каждого Строка Из ЕжегодныеОтпуска Цикл 
			НоваяСтрока = Движения.ПоложенныеВидыЕжегодныхОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = Строка.ДатаСобытия;
			Если ЕстьИспользуется Тогда
				НоваяСтрока.Используется = Строка.Используется;
			Иначе
				НоваяСтрока.Используется = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИспользованиеПоОкончанииОпределено = ЕжегодныеОтпуска.Колонки.Найти("ИспользуетсяПоОкончании") <> Неопределено;
		
		// Формируем движения с учетом текущего состояния регистра.
		// Формируем таблицу измерений.
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ИзмеренияДаты.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		
		Для Каждого СтрокаДвижений Из ЕжегодныеОтпуска Цикл 
			НоваяСтрока = ИзмеренияДаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
			НоваяСтрока.Период = СтрокаДвижений.ДатаСобытия;
		КонецЦикла;
		
		// Смотрим картину на дату проведения.
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТПоложенныеВидыЕжегодныхОтпусков(МенеджерВременныхТаблиц, ИзмеренияДаты, РегистраторСсылка, Ложь);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеОтпуска.ПериодЗаписи,
		|	ПоложенныеОтпуска.Сотрудник,
		|	ПоложенныеОтпуска.ВидЕжегодногоОтпуска,
		|	ПоложенныеОтпуска.КоличествоДнейВГод,
		|	ПоложенныеОтпуска.Используется,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЗависитОтСтажа
		|ИЗ
		|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ПоложенныеОтпуска.ВидЕжегодногоОтпуска = ВидыОтпусков.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеОтпуска.ПериодЗаписи,
		|	ПоложенныеОтпуска.Сотрудник,
		|	ПоложенныеОтпуска.ВидЕжегодногоОтпуска,
		|	ПоложенныеОтпуска.КоличествоДнейВГод,
		|	ПоложенныеОтпуска.Используется");	
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДействующиеПрава = Запрос.Выполнить().Выгрузить();
		
		// необходимо обработать возвратные стажевые движения
		ТаблицаВозвратныхПравЗависящихОтСтажа = Новый ТаблицаЗначений;
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
		
		СтрокиНабораВозвратныхПравЗависящихОтСтажа = Новый Массив;
		
		Для Каждого Строка Из ЕжегодныеОтпуска Цикл
			
			// Движения с возвратным значениями записываются всегда.
			// Движения не меняющие состав начислений записываются в случаях изменения состояния.
			Если НЕ ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				
				СтруктураОтбораСтрок = Новый Структура;
				СтруктураОтбораСтрок.Вставить("Сотрудник", Строка.Сотрудник);
				СтруктураОтбораСтрок.Вставить("ВидЕжегодногоОтпуска", Строка.ВидЕжегодногоОтпуска);
				
				СтрокиПредыдущихЗначений = ДействующиеПрава.НайтиСтроки(СтруктураОтбораСтрок);
				Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
					Если СтрокиПредыдущихЗначений[0].КоличествоДнейВГод = Строка.КоличествоДнейВГод
						И СтрокиПредыдущихЗначений[0].Используется = Строка.Используется Тогда
						Продолжить;
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
			
			НоваяСтрока = Движения.ПоложенныеВидыЕжегодныхОтпусков.Добавить();
			НоваяСтрока.Период = Строка.ДатаСобытия;
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			НоваяСтрока.ВидЕжегодногоОтпуска = Строка.ВидЕжегодногоОтпуска;
			НоваяСтрока.КоличествоДнейВГод = Строка.КоличествоДнейВГод;
			НоваяСтрока.Используется = Строка.Используется;
			
			// Записываем возвратную информацию.
			Если ЗначениеЗаполнено(Строка.ДействуетДо)
				И Строка.ДействуетДо > НоваяСтрока.Период Тогда
				
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				
				СтруктураОтбораСтрок = Новый Структура;
				СтруктураОтбораСтрок.Вставить("Сотрудник", НоваяСтрока.Сотрудник);
				СтруктураОтбораСтрок.Вставить("ВидЕжегодногоОтпуска", НоваяСтрока.ВидЕжегодногоОтпуска);
				СтруктураОтбораСтрок.Вставить("Используется", Истина);
				
				СтрокиДействующихНачислений = ДействующиеПрава.НайтиСтроки(СтруктураОтбораСтрок);
				Если СтрокиДействующихНачислений.Количество() > 0 Тогда
					
					НоваяСтрока.ИспользуетсяПоОкончании = Истина;
					НоваяСтрока.КоличествоДнейВГодПоОкончании = СтрокиДействующихНачислений[0].КоличествоДнейВГод;
					
					Если СтрокиДействующихНачислений[0].ЗависитОтСтажа Тогда
						
						СтрокаПрава = ТаблицаВозвратныхПравЗависящихОтСтажа.Добавить();
						СтрокаПрава.НачалоПериода = СтрокиДействующихНачислений[0].ПериодЗаписи;
						СтрокаПрава.ОкончаниеПериода = НоваяСтрока.ДействуетДо;
						СтрокаПрава.Сотрудник = НоваяСтрока.Сотрудник;
						СтрокаПрава.ВидЕжегодногоОтпуска = НоваяСтрока.ВидЕжегодногоОтпуска;
						
						СтрокиНабораВозвратныхПравЗависящихОтСтажа.Добавить(НоваяСтрока);
						
					КонецЕсли;
					
					Если ИспользованиеПоОкончанииОпределено Тогда
						НоваяСтрока.ИспользуетсяПоОкончании = Строка.ИспользуетсяПоОкончании;	
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
		// Если есть стажевые движения
		Если ТаблицаВозвратныхПравЗависящихОтСтажа.Количество() > 0 Тогда
			ОбновитьРазмерПоОкончанииДляЗависимыхОтСтажа(ТаблицаВозвратныхПравЗависящихОтСтажа, СтрокиНабораВозвратныхПравЗависящихОтСтажа);
		КонецЕсли; 
		
	КонецЕсли;
	
	Движения.ПоложенныеВидыЕжегодныхОтпусков.Записать();
	Движения.ПоложенныеВидыЕжегодныхОтпусков.Записывать = Ложь;
	
КонецПроцедуры

// Заполняет движения положенными видами ежегодных отпусков
//		НачальныеОстаткиОтпусков.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		Сотрудник
//		ВидЕжегодногоОтпуска
//		НачалоРабочегоГода
//		ДатаНачальныхОстатков
//		КоличествоДней
//
Процедура СформироватьДвиженияНачальныхОстатковОтпусков(Движения, ЕжегодныеОтпуска) Экспорт
	
	Для Каждого СтрокаДанных Из ЕжегодныеОтпуска Цикл
		
		Если СтрокаДанных.ДатаОстатка = Дата(1, 1, 1) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движения.НачальныеОстаткиОтпусков.Добавить(), СтрокаДанных);
		
	КонецЦикла;
	Движения.НачальныеОстаткиОтпусков.Записать();
	Движения.НачальныеОстаткиОтпусков.Записывать = Ложь;
	
КонецПроцедуры

// Заполняет движения отсутствий, сдвигающих рабочий год
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		Сотрудник
//		ВидЕжегодногоОтпуска
//		Состояние
//		ДатаОстатка
//		КоличествоДней
//
Процедура СформироватьДвиженияОтсутствийСдвигающихРабочийГод(Движения, ОтсутствияСдвигающиеРабочийГод) Экспорт
	
	Для Каждого СтрокаОтсутствий Из ОтсутствияСдвигающиеРабочийГод Цикл
		Если СтрокаОтсутствий.ДатаОстатка = Дата(1, 1, 1) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движения.ОтсутствияСдвигающиеРабочийГод.Добавить(), СтрокаОтсутствий);
	КонецЦикла;
	
	Движения.ОтсутствияСдвигающиеРабочийГод.Записать();
	Движения.ОтсутствияСдвигающиеРабочийГод.Записывать = Ложь;
	
КонецПроцедуры

// Формирует структуру параметров для СформироватьДвиженияФактическихОтпусков.
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	ДатаРегистрации
//	Начисления	- таблица начислений из данных для проведения.
//
Функция ПараметрыДляСформироватьДвиженияФактическихОтпусков() Экспорт

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаРегистрации", '00010101');
	Параметры.Вставить("Начисления", Неопределено);
	Параметры.Вставить("РабочиеПериоды", Неопределено);
	Параметры.Вставить("Основания", Неопределено);
	Параметры.Вставить("ПериодНачисления", '00010101');
	Параметры.Вставить("ДатыНачалаКомпенсаций", Неопределено);

	Возврат Параметры;

КонецФункции

// Заполняет движения периодами фактических отпусков
//		ФактическиеОтпуска.
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	Параметры - структура, см. ПараметрыДляСформироватьДвиженияФактическихОтпусков().
//
Процедура СформироватьДвиженияФактическихОтпусков(Движения, Отказ, Параметры) Экспорт
	
	Начисления = Параметры.Начисления;
	КатегорииОплатыДолейРКСН = ПланыВидовРасчета.Начисления.КатегорииНачисленийОплатыДолейРКиСН();
	
	Если Параметры.РабочиеПериоды = Неопределено Тогда
		РабочиеПериоды = Новый Соответствие;
	Иначе
		РабочиеПериоды = Параметры.РабочиеПериоды;
	КонецЕсли;
	
	Если Параметры.Основания = Неопределено Тогда
		Основания = Новый Соответствие;
	Иначе
		Основания = Параметры.Основания;
	КонецЕсли;
	
	Если Параметры.ДатыНачалаКомпенсаций = Неопределено Тогда
		
		Начисления.Сортировать("Сотрудник, ДатаОкончания УБЫВ", Новый СравнениеЗначений);
		
		ДатыНачалаКомпенсаций = Новый Соответствие;
		Для Каждого СтрокаДанных Из Начисления Цикл
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Или КатегорииОплатыДолейРКСН.Найти(СтрокаДанных.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаДанных.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
				Продолжить;
			КонецЕсли;
			Если ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДатыНачалаКомпенсаций.Вставить(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОкончания);
		КонецЦикла;
		
	Иначе
		ДатыНачалаКомпенсаций = Параметры.ДатыНачалаКомпенсаций;
	КонецЕсли;
	
	Начисления.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ДатыНачалаОтпусков = Новый ТаблицаЗначений;
	ДатыНачалаОтпусков.Колонки.Добавить("Сотрудник");
	ДатыНачалаОтпусков.Колонки.Добавить("ДатаНачала");
	ДатыНачалаОтпусков.Колонки.Добавить("Сторно");
	ПараметрыОтбора = Новый Структура;
	
	Для Каждого СтрокаДанных Из Начисления Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Или КатегорииОплатыДолейРКСН.Найти(СтрокаДанных.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОтбора.Вставить("Сотрудник", СтрокаДанных.Сотрудник);
		ПараметрыОтбора.Вставить("Сторно", СтрокаДанных.Сторно);
		Если ДатыНачалаОтпусков.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДанных.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДатыНачалаОтпусков.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	// Заполняем движения.
	Движения.ФактическиеОтпуска.Записывать = Истина;
	
	// Сортируем таблицу начислений под используемый алгоритм, сторно-записи сортируем внутри сотрудников.
	Начисления.Сортировать("Сотрудник, ВидЕжегодногоОтпуска, Сторно, ДатаНачала", Новый СравнениеЗначений);
	
	ПредыдущийСотрудник				= Неопределено;
	ПредыдущийВидЕжегодногоОтпуска	= Неопределено;
	ПредыдущаяДатаОкончания			= Неопределено;
	Для Каждого СтрокаДанных Из Начисления Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Или КатегорииОплатыДолейРКСН.Найти(СтрокаДанных.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийСотрудник <> СтрокаДанных.Сотрудник Или ПредыдущийВидЕжегодногоОтпуска <> СтрокаДанных.ВидЕжегодногоОтпуска Или КонецДня(ПредыдущаяДатаОкончания) + 1 <> НачалоДня(СтрокаДанных.ДатаНачала) Тогда
			НоваяСтрока = Движения.ФактическиеОтпуска.Добавить();
			// Измерения
			НоваяСтрока.Сотрудник				= СтрокаДанных.Сотрудник;
			НоваяСтрока.ВидЕжегодногоОтпуска	= СтрокаДанных.ВидЕжегодногоОтпуска;
			// Ресурсы
			НоваяСтрока.Количество				= 0;
			// Реквизиты
			НоваяСтрока.ДатаРегистрации			= Параметры.ДатаРегистрации;
			НоваяСтрока.Компенсация				= СтрокаДанных.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать;
			Если НоваяСтрока.Компенсация Тогда
				НоваяСтрока.ДатаНачала			= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
			Иначе
				НоваяСтрока.ДатаНачала			= СтрокаДанных.ДатаНачала;
			КонецЕсли;
			
			// Необязательные реквизиты
			РабочийПериодСотрудника = РабочиеПериоды.Получить(СтрокаДанных.Сотрудник);
			Если РабочийПериодСотрудника = Неопределено Тогда
				РабочийПериод = РабочиеПериоды.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			Иначе
				РабочийПериод = РабочийПериодСотрудника.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			КонецЕсли; 
			
			Если РабочийПериод <> Неопределено Тогда
				НоваяСтрока.РабочийПериодС		= РабочийПериод.РабочийПериодС;
				НоваяСтрока.РабочийПериодПо		= РабочийПериод.РабочийПериодПо;
			КонецЕсли;
			
			ОснованияСотрудников = Основания.Получить(СтрокаДанных.Сотрудник);
			Если ОснованияСотрудников = Неопределено Тогда
				Основание = Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			Иначе
				Основание = ОснованияСотрудников.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			КонецЕсли;
			
			НоваяСтрока.Основание				= Основание;
			
		КонецЕсли;
		
		// Ресурсы
		НоваяСтрока.Количество					= НоваяСтрока.Количество + СтрокаДанных.ОплаченоДней;
		
		Если НоваяСтрока.Компенсация Тогда
			// Свойства
			НоваяСтрока.Период					= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
			// Реквизиты
			НоваяСтрока.ДатаОкончания			= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
		Иначе
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Сотрудник", СтрокаДанных.Сотрудник);
			// Свойства
			ПараметрыОтбора.Вставить("Сторно", НоваяСтрока.Количество <= 0);
			НайденныеСтроки = ДатыНачалаОтпусков.НайтиСтроки(ПараметрыОтбора);
			ДатаНачала = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].ДатаНачала, ДатыНачалаОтпусков[0].ДатаНачала);
			НоваяСтрока.Период					= ДатаНачала;
			// Реквизиты
			НоваяСтрока.ДатаОкончания			= СтрокаДанных.ДатаОкончания;
		КонецЕсли;
		
		НоваяСтрока.ПериодНачисления 		= ?(Параметры.ПериодНачисления = Неопределено, НоваяСтрока.Период, Параметры.ПериодНачисления);
		
		ПредыдущийСотрудник				= НоваяСтрока.Сотрудник;
		ПредыдущийВидЕжегодногоОтпуска	= НоваяСтрока.ВидЕжегодногоОтпуска;
		ПредыдущаяДатаОкончания			= НоваяСтрока.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения удержаниями за неотработанный отпуск
//		ФактическиеОтпуска.
//
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	Параметры - структура, см. ПараметрыДляСформироватьДвиженияФактическихОтпусков().
//
Процедура СформироватьДвиженияФактическихОтпусковПоУдержаниям(Движения, Параметры) Экспорт
	
	Удержания = Параметры.Начисления;
	
	Движения.ФактическиеОтпуска.Записывать = Истина;
	
	Если Параметры.РабочиеПериоды = Неопределено Тогда
		РабочиеПериоды = Новый Соответствие;
	Иначе
		РабочиеПериоды = Параметры.РабочиеПериоды;
	КонецЕсли;
	
	Если Параметры.Основания = Неопределено Тогда
		Основания = Новый Соответствие;
	Иначе
		Основания = Параметры.Основания;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из Удержания Цикл
		
		НоваяСтрока = Движения.ФактическиеОтпуска.Добавить();
		
		// Свойства
		НоваяСтрока.Период					= СтрокаДанных.ДатаУвольнения;
		// Измерения
		НоваяСтрока.Сотрудник				= СтрокаДанных.Сотрудник;
		НоваяСтрока.ВидЕжегодногоОтпуска	= СтрокаДанных.ВидЕжегодногоОтпуска;
		// Ресурсы
		НоваяСтрока.Количество				= СтрокаДанных.КоличествоДнейКомпенсации * (-1);
		// Реквизиты
		НоваяСтрока.ДатаРегистрации			= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.ДатаНачала				= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.ДатаОкончания			= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.Компенсация				= Истина;
		НоваяСтрока.ПериодНачисления 		= ?(Параметры.ПериодНачисления = Неопределено, НоваяСтрока.Период, Параметры.ПериодНачисления);
		
		// Необязательные реквизиты
		РабочийПериодСотрудника = РабочиеПериоды.Получить(СтрокаДанных.Сотрудник);
		Если РабочийПериодСотрудника = Неопределено Тогда
			РабочийПериод = РабочиеПериоды.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		Иначе
			РабочийПериод = РабочийПериодСотрудника.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		КонецЕсли; 
		
		Если РабочийПериод <> Неопределено Тогда
			НоваяСтрока.РабочийПериодС		= РабочийПериод.РабочийПериодС;
			НоваяСтрока.РабочийПериодПо		= РабочийПериод.РабочийПериодПо;
		КонецЕсли;
		
		ОснованияСотрудников = Основания.Получить(СтрокаДанных.Сотрудник);
		Если ОснованияСотрудников = Неопределено Тогда
			Основание = Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		Иначе
			Основание = ОснованияСотрудников.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		КонецЕсли; 
		
		НоваяСтрока.Основание				= Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаПериодовОтпусков() Экспорт
	
	ДанныеСостояний = Новый ТаблицаЗначений;
	ДанныеСостояний.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеСостояний.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ДанныеСостояний.Колонки.Добавить("Компенсация", Новый ОписаниеТипов("Булево"));
	ДанныеСостояний.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	ДанныеСостояний.Колонки.Добавить("РабочийПериодС", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("РабочийПериодПо", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСотрудника"));
	ДанныеСостояний.Колонки.Добавить("ОтсутствиеВТечениеЧастиСмены", Новый ОписаниеТипов("Булево"));
	ДанныеСостояний.Колонки.Добавить("Основание", Новый ОписаниеТипов("Строка"));
	ДанныеСостояний.Колонки.Добавить("ПериодЗаписи", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("ИсходныйДокумент", Метаданные.ОпределяемыеТипы.РегистраторыПериодовОтпусковКарточкиСотрудника.Тип);
	ДанныеСостояний.Колонки.Добавить("ИсходныйДокументДата", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("ИсходныйДокументНомер", Новый ОписаниеТипов("Строка"));
	
	Возврат ДанныеСостояний;
	
КонецФункции

Процедура СформироватьДвиженияПериодовОтпусков(Движения, ДокументСсылка, ПериодыОтпусков) Экспорт 
	
	Для Каждого ПериодОтпуска Из ПериодыОтпусков Цикл
		Если Не ЗначениеЗаполнено(ПериодОтпуска.ДатаНачала) И Не ПериодОтпуска.Компенсация Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Движения.ПериодыОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПериодОтпуска);
		НоваяСтрока.ДокументОснование = ДокументСсылка;
	КонецЦикла;
	
	Движения.ПериодыОтпусков.Записать();
	Движения.ПериодыОтпусков.Записывать = Ложь;
	
КонецПроцедуры

// Работа с регистром ЗаработанныеПраваНаОтпуска

// Обслуживает регламентное задание РасчетЗаработанныхОтпусков.
// Производит заполнение регистра "ЗаработанныеПраваНаОтпуска".
Процедура РасчетЗаработанныхОтпусков(МассивСотрудников = Неопределено, Знач ДатаРасчета = Неопределено, ЭтоРасчетПриУвольнении = Ложь,
	ОтраслевыеОсобенности = Неопределено) Экспорт
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Если массив сотрудников не задан - надо рассчитать всех сотрудников.
	Если МассивСотрудников = Неопределено Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.НачалоПериода = ДатаРасчета;
		ПараметрыПолучения.ОкончаниеПериода = ДатаРасчета;
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
		МассивСотрудников = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РассчитатьЗаработанныеОтпускаСпискуСотрудников(
		МассивСотрудников,
		ДатаРасчета,
		ЭтоРасчетПриУвольнении,
		ОтраслевыеОсобенности);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет записи регистра ЗаработанныеПраваНаОтпуска согласно переданной таблице значений.
// Колонки таблицы значений
//	Сотрудник
//	ВидЕжегодногоОтпуска
//	Период - начало периода, начиная с которого необходимо удалить записи.
Процедура УдалитьЗаписиЗаработанныхОтпусков(ТаблицаУдаляемыхЗаписей) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СбрасываемСотрудникаЦеликом =  ТаблицаУдаляемыхЗаписей.Колонки.Найти("ВидЕжегодногоОтпуска") = Неопределено;
	
	Для каждого СтрокаУдаляемыхЗаписей Из ТаблицаУдаляемыхЗаписей Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаработанныеПраваНаОтпуска.Период,
		|	ЗаработанныеПраваНаОтпуска.Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней,
		|	ЗаработанныеПраваНаОтпуска.ДатаНачала,
		|	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
		|ИЗ
		|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|ГДЕ
		|	ЗаработанныеПраваНаОтпуска.Сотрудник = &Сотрудник
		|	И ЗаработанныеПраваНаОтпуска.Период < &Период";
		
		Если НЕ СбрасываемСотрудникаЦеликом Тогда
		
			Запрос.Текст = Запрос.Текст + "	И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = &ВидЕжегодногоОтпуска";
			Запрос.УстановитьПараметр("ВидЕжегодногоОтпуска", СтрокаУдаляемыхЗаписей.ВидЕжегодногоОтпуска);
		    НаборЗаписей.Отбор.ВидЕжегодногоОтпуска.Установить(СтрокаУдаляемыхЗаписей.ВидЕжегодногоОтпуска);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Период", СтрокаУдаляемыхЗаписей.Период);
		Запрос.УстановитьПараметр("Сотрудник", СтрокаУдаляемыхЗаписей.Сотрудник);
		
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаУдаляемыхЗаписей.Сотрудник);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла; 	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Корректирует расчет вида отпуска ОтпускПострадавшимВАварииЧАЭС, проставляя ему "ОплаченоДней".
//
Процедура ПеренестиРезультатыРасчетаОтпускаЧАЭС(СтрокаДанных, ИсходныеДанные) Экспорт

	Если НЕ ТипЗнч(СтрокаДанных) = Тип("ДанныеФормыЭлементКоллекции")
		ИЛИ НЕ СтрокаДанных.Свойство("Начисление") Тогда
		Возврат;
	КонецЕсли;
	
	ВидОтпуска = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаДанных.Начисление).ВидОтпуска;
	Если НЕ ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.ОплаченоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаНачала, СтрокаДанных.ДатаОкончания, Истина, Истина);

КонецПроцедуры

// Возвращает массив видов отпусков не подлежащих компенсации при увольнении
// 
// Возвращаемое значение:
//  ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении - Массив.
//
Функция ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении() Экспорт
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении = Новый Массив;
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	Возврат ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении;
КонецФункции

#Область ОбработчикиОбновления
	
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4957e2ae-8714-4b47-9397-89fad2c19579");
	Обработчик.Процедура = "Документы.ОтпускаСотрудников.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Отпуск сотрудников"".';
									|en = 'Fills in closing dates of editing the ""Employee leaves"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.49";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьТаблицуПереносовВПереносеОтпуска";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ba1460fb-bc4a-496a-99ae-30959227e374");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов документа Перенос отпуска.';
									|en = 'Fill in attributes of the Leave transfer document.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.50";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьПеренесеннуюДатаНачалаВРегистреПлановыеЕжегодныеОтпуска";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6be6e11f-b5f3-4c79-b79e-09a8f9b00373");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Плановые ежегодные отпуска.';
									|en = 'Fill in attributes of the Scheduled annual leaves register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.51";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьПримечаниеВГрафикеОтпусков";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("be362ddd-d545-4862-ba85-9e973bb1f671");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов документа График отпусков.';
									|en = 'Fill in attributes of the Leave schedule document.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.52";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьПримечаниеВРегистреПлановыеЕжегодныеОтпуска";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ac1dd6f1-cf14-4220-a453-e524996390c2");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Примечание регистра Плановые ежегодные отпуска.';
									|en = 'Fill in the Note attribute of the ""Scheduled annual leaves"" register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.15";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьПеренесеннуюДатуОкончанияИКоличествоДнейВРегистреПлановыеЕжегодныеОтпуска";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("04860ed2-f337-4af8-bf05-e5c01e5bc088");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Плановые ежегодные отпуска.';
									|en = 'Fill in attributes of the Scheduled annual leaves register.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.20.65";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьРегистрПериодыОтпусков";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("65ba279b-8b7b-4dd5-a8d4-bf90cb3449b7");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Периоды отпусков.';
									|en = 'Fill in attributes of the Leave period register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.20.65";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьРегистрПериодыОтпусковИспр";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("270f3d72-a1ea-41b2-8cbf-512f2bbf46c1");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Периоды отпусков испр.';
									|en = 'Fill in attributes of the Leave period register adj.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.20.66";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьРегистрДанныеОтпусковКарточкиСотрудника";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b45c3a1c-6120-49d7-8486-86353ec18ffa");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Данные отпусков карточки сотрудника.';
									|en = 'Fill in attributes of register Employee card leave data.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.9";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьДокументОтпускаСотрудниковВРегистреПериодыОтпусков";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7df5de88-de89-40c9-bf85-f87dd3f46b2b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Периоды отпусков.';
									|en = 'Fill in attributes of the Leave period register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.9";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьДокументОтпускаСотрудниковВРегистреПериодыОтпусковИспр";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4596b12a-fc9d-4836-aa2c-e050dc8c42af");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Периоды отпусков испр.';
									|en = 'Fill in attributes of the Leave period register adj.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.9";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьДокументОтпускаСотрудниковВРегистреДанныеОтпусковКарточкиСотрудника";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("487577f4-4251-4aa4-b50d-da2d015b694d");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра Данные отпусков карточки сотрудника.';
									|en = 'Fill in attributes of register Employee card leave data.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.13";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьТаблицуСотрудникиДокументаОтпускаСотрудников";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d46f4d90-4180-40cb-a422-692fa5336193");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение документа Отпуск сотрудников.';
									|en = 'Fill the ""Employee leaves"" document.'");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПереносовВПереносеОтпуска(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПереносОтпуска.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПереносОтпуска КАК ПереносОтпуска
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПереносОтпуска.Переносы КАК ПереносОтпускаПереносы
	               |		ПО ПереносОтпуска.Ссылка = ПереносОтпускаПереносы.Ссылка
	               |ГДЕ
	               |	ПереносОтпускаПереносы.Ссылка ЕСТЬ NULL
	               |	И НЕ ПереносОтпуска.ПометкаУдаления
	               |	И ПереносОтпуска.УдалитьДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ПереносОтпуска", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ПереносОтпуска = Выборка.Ссылка.ПолучитьОбъект();
		НоваяСтрока = ПереносОтпуска.Переносы.Добавить();
		НоваяСтрока.ДатаНачала = ПереносОтпуска.УдалитьДатаНачала;
		НоваяСтрока.ДатаОкончания = ПереносОтпуска.УдалитьДатаОкончания;
		НоваяСтрока.КоличествоДней = ПереносОтпуска.УдалитьКоличествоДней;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПереносОтпуска);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПеренесеннуюДатаНачалаВРегистреПлановыеЕжегодныеОтпуска(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеЕжегодныеОтпуска.*
	               |ИЗ
	               |	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
	               |ГДЕ
	               |	ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ПлановыеЕжегодныеОтпуска.УдалитьПеренесеннаяДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ИзмеренияРегистра = Новый Массив;
	Для Каждого Измерение Из Метаданные.РегистрыСведений.ПлановыеЕжегодныеОтпуска.Измерения Цикл 
		ИзмеренияРегистра.Добавить(Измерение.Имя);
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеЕжегодныеОтпуска", "Сотрудник", Выборка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		// Удаление старой записи
		НаборЗаписей = РегистрыСведений.ПлановыеЕжегодныеОтпуска.СоздатьНаборЗаписей();
		Для Каждого ИзмерениеРегистра Из ИзмеренияРегистра Цикл
			НаборЗаписей.Отбор[ИзмерениеРегистра].Установить(Выборка[ИзмерениеРегистра]);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		// Добавление новой записи
		НаборЗаписей = РегистрыСведений.ПлановыеЕжегодныеОтпуска.СоздатьНаборЗаписей();
		Для Каждого ИзмерениеРегистра Из ИзмеренияРегистра Цикл
			Значение = ?(ИзмерениеРегистра = "ПеренесеннаяДатаНачала", Выборка.УдалитьПеренесеннаяДатаНачала, Выборка[ИзмерениеРегистра]);
			НаборЗаписей.Отбор[ИзмерениеРегистра].Установить(Значение);
		КонецЦикла;
		
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПеренесеннаяДатаНачала = Выборка.УдалитьПеренесеннаяДатаНачала;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПримечаниеВГрафикеОтпусков(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГрафикОтпусковСотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ГрафикОтпусков.Сотрудники КАК ГрафикОтпусковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	               |		ПО ГрафикОтпусковСотрудники.ВидОтпуска = ВидыОтпусков.Ссылка
	               |			И (ГрафикОтпусковСотрудники.ВидОтпуска <> &ОсновнойОтпуск)
	               |			И (НЕ ГрафикОтпусковСотрудники.Ссылка.ПометкаУдаления)
	               |			И (ГрафикОтпусковСотрудники.Примечание = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	НаименованияВидовОтпусков = Новый Соответствие;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОтпусков.Ссылка КАК Ссылка,
	               |	ВидыОтпусков.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ВидыОтпусков КАК ВидыОтпусков";
	
	ВыборкаВидовОтпусков = Запрос.Выполнить().Выбрать(); 
	Пока ВыборкаВидовОтпусков.Следующий() Цикл 
		НаименованияВидовОтпусков.Вставить(ВыборкаВидовОтпусков.Ссылка, ВыборкаВидовОтпусков.Наименование);
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ГрафикОтпусков", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ГрафикОтпусков = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаСотрудника Из ГрафикОтпусков.Сотрудники Цикл 
			Если ЗначениеЗаполнено(СтрокаСотрудника.ВидОтпуска) 
				И Не ЗначениеЗаполнено(СтрокаСотрудника.Примечание)
				И СтрокаСотрудника.ВидОтпуска <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				НаименованиеОтпуска = НаименованияВидовОтпусков[СтрокаСотрудника.ВидОтпуска];
				СтрокаСотрудника.Примечание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Доп.отпуск: %1';
																											|en = 'Exc. leave:%1'"), НаименованиеОтпуска);	
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГрафикОтпусков);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПримечаниеВРегистреПлановыеЕжегодныеОтпуска(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлановыеЕжегодныеОтпуска.ДокументПланирования КАК ДокументПланирования
	               |ПОМЕСТИТЬ ВТГрафикиОтпусков
	               |ИЗ
	               |	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
	               |ГДЕ
	               |	ПлановыеЕжегодныеОтпуска.ВидОтпуска <> &ОсновнойОтпуск
	               |	И ПлановыеЕжегодныеОтпуска.Примечание = """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГрафикОтпусковСотрудники.Ссылка КАК Ссылка,
	               |	ГрафикОтпусковСотрудники.НомерСтроки КАК НомерСтроки,
	               |	ГрафикОтпусковСотрудники.Сотрудник КАК Сотрудник,
	               |	ГрафикОтпусковСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ГрафикОтпусковСотрудники.ВидОтпуска КАК ВидОтпуска,
	               |	ГрафикОтпусковСотрудники.ДатаНачала КАК ДатаНачала,
	               |	ГрафикОтпусковСотрудники.ДатаОкончания КАК ДатаОкончания,
	               |	ГрафикОтпусковСотрудники.КоличествоДней КАК КоличествоДней,
	               |	ГрафикОтпусковСотрудники.Примечание КАК Примечание
	               |ПОМЕСТИТЬ ВТСотрудники
	               |ИЗ
	               |	Документ.ГрафикОтпусков.Сотрудники КАК ГрафикОтпусковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиОтпусков КАК ГрафикиОтпусков
	               |		ПО ГрафикОтпусковСотрудники.Ссылка = ГрафикиОтпусков.ДокументПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПереносОтпуска.Сотрудник КАК Сотрудник,
	               |	ПереносОтпуска.ИсходнаяДатаНачала КАК ДатаНачала,
	               |	МАКСИМУМ(ПереносОтпуска.Ссылка) КАК ДокументПереноса
	               |ПОМЕСТИТЬ ВТДокументыПереноса
	               |ИЗ
	               |	ВТСотрудники КАК Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереносОтпуска КАК ПереносОтпуска
	               |		ПО Сотрудники.Сотрудник = ПереносОтпуска.Сотрудник
	               |			И Сотрудники.ДатаНачала = ПереносОтпуска.ИсходнаяДатаНачала
	               |			И (ПереносОтпуска.Проведен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПереносОтпуска.Сотрудник,
	               |	ПереносОтпуска.ИсходнаяДатаНачала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыПереноса.Сотрудник КАК Сотрудник,
	               |	ДокументыПереноса.ДатаНачала КАК ДатаНачала,
	               |	ДокументыПереноса.ДокументПереноса КАК ДокументПереноса,
	               |	ПереносОтпускаПереносы.ДатаНачала КАК ПеренесеннаяДатаНачала
	               |ПОМЕСТИТЬ ВТПереносыОтпусков
	               |ИЗ
	               |	ВТДокументыПереноса КАК ДокументыПереноса
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереносОтпуска.Переносы КАК ПереносОтпускаПереносы
	               |		ПО ДокументыПереноса.ДокументПереноса = ПереносОтпускаПереносы.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.НомерСтроки КАК НомерСтроки,
	               |	Сотрудники.Ссылка.Организация КАК Организация,
	               |	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	Сотрудники.Сотрудник КАК Сотрудник,
	               |	Сотрудники.ДатаНачала КАК ДатаНачала,
	               |	ЕСТЬNULL(ПереносыОтпусков.ПеренесеннаяДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ПеренесеннаяДатаНачала,
	               |	Сотрудники.Ссылка КАК ДокументПланирования,
	               |	Сотрудники.КоличествоДней КАК КоличествоДней,
	               |	Сотрудники.ВидОтпуска КАК ВидОтпуска,
	               |	Сотрудники.ДатаОкончания КАК ДатаОкончания,
	               |	ПереносыОтпусков.ДокументПереноса КАК ДокументПереноса,
	               |	Сотрудники.Примечание КАК Примечание
	               |ПОМЕСТИТЬ ВТДанныеДокументов
	               |ИЗ
	               |	ВТСотрудники КАК Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереносыОтпусков КАК ПереносыОтпусков
	               |		ПО Сотрудники.Сотрудник = ПереносыОтпусков.Сотрудник
	               |			И Сотрудники.ДатаНачала = ПереносыОтпусков.ДатаНачала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПлановыеЕжегодныеОтпуска.Организация КАК Организация,
	               |	ПлановыеЕжегодныеОтпуска.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПлановыеЕжегодныеОтпуска.Сотрудник КАК Сотрудник,
	               |	ПлановыеЕжегодныеОтпуска.ДатаНачала КАК ДатаНачала,
	               |	ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала КАК ПеренесеннаяДатаНачала,
	               |	ПлановыеЕжегодныеОтпуска.Запланирован КАК Запланирован,
	               |	ПлановыеЕжегодныеОтпуска.Перенесен КАК Перенесен,
	               |	ПлановыеЕжегодныеОтпуска.ДокументПланирования КАК ДокументПланирования,
	               |	ПлановыеЕжегодныеОтпуска.КоличествоДней КАК КоличествоДней,
	               |	ПлановыеЕжегодныеОтпуска.ВидОтпуска КАК ВидОтпуска,
	               |	ПлановыеЕжегодныеОтпуска.ДатаОкончания КАК ДатаОкончания,
	               |	ПлановыеЕжегодныеОтпуска.УдалитьПеренесеннаяДатаНачала КАК УдалитьПеренесеннаяДатаНачала,
	               |	ПлановыеЕжегодныеОтпуска.ДокументПереноса КАК ДокументПереноса,
	               |	ДанныеДокументов.Примечание КАК Примечание
	               |ИЗ
	               |	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
	               |		ПО ПлановыеЕжегодныеОтпуска.Организация = ДанныеДокументов.Организация
	               |			И ПлановыеЕжегодныеОтпуска.ФизическоеЛицо = ДанныеДокументов.ФизическоеЛицо
	               |			И ПлановыеЕжегодныеОтпуска.Сотрудник = ДанныеДокументов.Сотрудник
	               |			И ПлановыеЕжегодныеОтпуска.ДатаНачала = ДанныеДокументов.ДатаНачала
	               |			И ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала = ДанныеДокументов.ПеренесеннаяДатаНачала
	               |			И ПлановыеЕжегодныеОтпуска.ДокументПланирования = ДанныеДокументов.ДокументПланирования
	               |			И (ПлановыеЕжегодныеОтпуска.ВидОтпуска <> &ОсновнойОтпуск)
	               |			И (ПлановыеЕжегодныеОтпуска.Примечание = """")
	               |			И (ДанныеДокументов.Примечание <> """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ИзмеренияРегистра = Новый Массив;
	Для Каждого Измерение Из Метаданные.РегистрыСведений.ПлановыеЕжегодныеОтпуска.Измерения Цикл 
		ИзмеренияРегистра.Добавить(Измерение.Имя);
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеЕжегодныеОтпуска", "Сотрудник", Выборка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПлановыеЕжегодныеОтпуска.СоздатьНаборЗаписей();
		Для Каждого ИзмерениеРегистра Из ИзмеренияРегистра Цикл
			НаборЗаписей.Отбор[ИзмерениеРегистра].Установить(Выборка[ИзмерениеРегистра]);
		КонецЦикла;
		
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПеренесеннуюДатуОкончанияИКоличествоДнейВРегистреПлановыеЕжегодныеОтпуска(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
	               |	ПереносОтпускаПереносы.ДатаОкончания КАК ПеренесеннаяДатаОкончания,
	               |	ПереносОтпускаПереносы.КоличествоДней КАК ПеренесенноеКоличествоДней,
	               |	ПлановыеЕжегодныеОтпуска.*
	               |ИЗ
	               |	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереносОтпуска.Переносы КАК ПереносОтпускаПереносы
	               |		ПО ПлановыеЕжегодныеОтпуска.ДокументПереноса = ПереносОтпускаПереносы.Ссылка
	               |			И ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала = ПереносОтпускаПереносы.ДатаНачала
	               |ГДЕ
	               |	ПереносОтпускаПереносы.ДатаОкончания <> ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаОкончания
	               |	И ПереносОтпускаПереносы.КоличествоДней <> ПлановыеЕжегодныеОтпуска.ПеренесенноеКоличествоДней";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ИзмеренияРегистра = Новый Массив;
	Для Каждого Измерение Из Метаданные.РегистрыСведений.ПлановыеЕжегодныеОтпуска.Измерения Цикл 
		ИзмеренияРегистра.Добавить(Измерение.Имя);
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеЕжегодныеОтпуска", "Сотрудник", Выборка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПлановыеЕжегодныеОтпуска.СоздатьНаборЗаписей();
		Для Каждого ИзмерениеРегистра Из ИзмеренияРегистра Цикл
			НаборЗаписей.Отбор[ИзмерениеРегистра].Установить(Выборка[ИзмерениеРегистра]);
		КонецЦикла;
		
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыОтпусков(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Документ.БольничныйЛист");
	ИменаТаблиц.Добавить("Документ.Отпуск");
	ИменаТаблиц.Добавить("Документ.ОтпускБезСохраненияОплаты");
	ИменаТаблиц.Добавить("Документ.ОтпускБезСохраненияОплатыСписком");
	ИменаТаблиц.Добавить("Документ.ОтпускПоУходуЗаРебенком");
	
	ТекстыЗапросов = Новый Массив;
	ПервыйЗапрос = Истина;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Отпуск.Ссылка КАК Регистратор
			|ПОМЕСТИТЬ ВТРегистраторыПредварительно
			|ИЗ
			|	#ИмяТаблицы КАК Отпуск
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
			|		ПО Отпуск.Ссылка = ПериодыОтпусков.Регистратор
			|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК ДокументИсправление
			|		ПО Отпуск.Ссылка = ДокументИсправление.ИсправленныйДокумент
			|			И (ДокументИсправление.Проведен)
			|ГДЕ
			|	Отпуск.Проведен
			|	И ПериодыОтпусков.Регистратор ЕСТЬ NULL
			|	И ДокументИсправление.Ссылка ЕСТЬ NULL
			|	И &Условие";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
		
		Если Не ПервыйЗапрос Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТРегистраторыПредварительно", "");
		КонецЕсли;
		
		Если ИмяТаблицы = "Документ.БольничныйЛист" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "(Отпуск.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам))");
		ИначеЕсли ИмяТаблицы = "Документ.Отпуск" Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "(Отпуск.ПредоставитьОсновнойОтпуск ИЛИ Отпуск.ПредоставитьДополнительныйОтпуск ИЛИ Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ИСТИНА");
		КонецЕсли;
		
		ПервыйЗапрос = Ложь;
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	// Увольнение
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.Увольнение КАК Отпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ПО Отпуск.Ссылка = ПериодыОтпусков.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК ДокументИсправление
		|		ПО Отпуск.Ссылка = ДокументИсправление.ИсправленныйДокумент
		|			И (ДокументИсправление.Проведен)
		|ГДЕ
		|	Отпуск.Проведен
		|	И ПериодыОтпусков.Регистратор ЕСТЬ NULL
		|	И ДокументИсправление.Ссылка ЕСТЬ NULL
		|	И Отпуск.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.Увольнение.ДополнительныеОтпуска КАК Отпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ПО Отпуск.Ссылка = ПериодыОтпусков.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК ДокументИсправление
		|		ПО Отпуск.Ссылка = ДокументИсправление.ИсправленныйДокумент
		|			И (ДокументИсправление.Проведен)
		|ГДЕ
		|	Отпуск.Ссылка.Проведен
		|	И ПериодыОтпусков.Регистратор ЕСТЬ NULL
		|	И ДокументИсправление.Ссылка ЕСТЬ NULL
		|	И Отпуск.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК Отпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ПО Отпуск.Ссылка = ПериодыОтпусков.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком КАК ДокументИсправление
		|		ПО Отпуск.Ссылка = ДокументИсправление.ИсправленныйДокумент
		|			И (ДокументИсправление.Проведен)
		|ГДЕ
		|	Отпуск.Ссылка.Проведен
		|	И ПериодыОтпусков.Регистратор ЕСТЬ NULL
		|	И ДокументИсправление.Ссылка ЕСТЬ NULL
		|	И Отпуск.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК Отпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ПО Отпуск.Ссылка = ПериодыОтпусков.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком КАК ДокументИсправление
		|		ПО Отпуск.Ссылка = ДокументИсправление.ИсправленныйДокумент
		|			И (ДокументИсправление.Проведен)
		|ГДЕ
		|	Отпуск.Ссылка.Проведен
		|	И ПериодыОтпусков.Регистратор ЕСТЬ NULL
		|	И ДокументИсправление.Ссылка ЕСТЬ NULL
		|	И Отпуск.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		Модуль.ДополнитьЗапросВТРегистраторыПериодыОтпусков(ТекстыЗапросов);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	РегистраторыПредварительно.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТРегистраторыПредварительно КАК РегистраторыПредварительно";
				   
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Регистраторы.Регистратор КАК Регистратор,
		|	Отпуск.Сотрудник КАК Сотрудник,
		|	Отпуск.Ссылка КАК ДокументОснование,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания,
		|	&ОсновнойОтпуск КАК ВидОтпуска,
		|	Отпуск.КоличествоДнейОсновногоОтпуска КАК КоличествоДней,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийПериодС,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийПериодПо,
		|	ЛОЖЬ КАК ОтсутствиеВТечениеЧастиСмены,
		|	NULL КАК Состояние,
		|	Отпуск.Основание КАК Основание,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ПериодЗаписи,
		|	ЛОЖЬ КАК Компенсация,
		|	Отпуск.Дата КАК Дата,
		|	Отпуск.Номер КАК Номер,
		|	Отпуск.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Отпуск.Ссылка = Регистраторы.Регистратор
		|			И (Отпуск.ПредоставитьОсновнойОтпуск)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	Отпуск.Сотрудник,
		|	Отпуск.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	&ОсновнойОтпуск,
		|	Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	Отпуск.Основание,
		|	Отпуск.Дата,
		|	ИСТИНА,
		|	Отпуск.Дата,
		|	Отпуск.Номер,
		|	Отпуск.ИсправленныйДокумент
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Отпуск.Ссылка = Регистраторы.Регистратор
		|			И (Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	ДополнительныеОтпуска.Ссылка.Сотрудник,
		|	ДополнительныеОтпуска.Ссылка,
		|	ДополнительныеОтпуска.ДатаНачала,
		|	ДополнительныеОтпуска.ДатаОкончания,
		|	ДополнительныеОтпуска.ВидОтпуска,
		|	ДополнительныеОтпуска.КоличествоДней,
		|	ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	ДополнительныеОтпуска.Основание,
		|	ДополнительныеОтпуска.ДатаНачала,
		|	ЛОЖЬ,
		|	ДополнительныеОтпуска.Ссылка.Дата,
		|	ДополнительныеОтпуска.Ссылка.Номер,
		|	ДополнительныеОтпуска.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ДополнительныеОтпуска.Ссылка = Регистраторы.Регистратор
		|			И (ДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск)
		|			И (ДополнительныеОтпуска.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	ДополнительныеОтпуска.Ссылка.Сотрудник,
		|	ДополнительныеОтпуска.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДополнительныеОтпуска.ВидОтпуска,
		|	ДополнительныеОтпуска.КоличествоДнейКомпенсации,
		|	ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	ДополнительныеОтпуска.Основание,
		|	ДополнительныеОтпуска.Ссылка.Дата,
		|	ИСТИНА,
		|	ДополнительныеОтпуска.Ссылка.Дата,
		|	ДополнительныеОтпуска.Ссылка.Номер,
		|	ДополнительныеОтпуска.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ДополнительныеОтпуска.Ссылка = Регистраторы.Регистратор
		|			И (ДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск)
		|			И (ДополнительныеОтпуска.КоличествоДнейКомпенсации > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	БольничныйЛист.Сотрудник,
		|	БольничныйЛист.Ссылка,
		|	БольничныйЛист.ДатаНачала,
		|	БольничныйЛист.ДатаОкончания,
		|	NULL,
		|	РАЗНОСТЬДАТ(БольничныйЛист.ДатаНачала, БольничныйЛист.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам),
		|	"""",
		|	БольничныйЛист.ДатаНачала,
		|	ЛОЖЬ,
		|	БольничныйЛист.Дата,
		|	БольничныйЛист.Номер,
		|	БольничныйЛист.ИсправленныйДокумент
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО БольничныйЛист.Ссылка = Регистраторы.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания,
		|	ОтпускБезСохраненияОплаты.ВидОтпуска,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплаты.ДатаНачала, ОтпускБезСохраненияОплаты.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ОтпускБезСохраненияОплаты.ОтсутствиеВТечениеЧастиСмены,
		|	NULL,
		|	"""",
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ЛОЖЬ,
		|	ОтпускБезСохраненияОплаты.Дата,
		|	ОтпускБезСохраненияОплаты.Номер,
		|	ОтпускБезСохраненияОплаты.ИсправленныйДокумент
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ОтпускБезСохраненияОплаты.Ссылка = Регистраторы.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	ОтпускБезСохраненияОплатыСотрудники.Сотрудник,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка,
		|	ОтпускБезСохраненияОплатыСотрудники.ДатаНачала,
		|	ОтпускБезСохраненияОплатыСотрудники.ДатаОкончания,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.ВидОтпуска,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплатыСотрудники.ДатаНачала, ОтпускБезСохраненияОплатыСотрудники.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ,
		|	NULL,
		|	"""",
		|	ОтпускБезСохраненияОплатыСотрудники.ДатаНачала,
		|	ЛОЖЬ,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.Дата,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.Номер,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплатыСписком.Сотрудники КАК ОтпускБезСохраненияОплатыСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ОтпускБезСохраненияОплатыСотрудники.Ссылка = Регистраторы.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник,
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
		|	NULL,
		|	РАЗНОСТЬДАТ(ОтпускПоУходуЗаРебенком.ДатаНачала, ОтпускПоУходуЗаРебенком.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком),
		|	"""",
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ЛОЖЬ,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ОтпускПоУходуЗаРебенком.Номер,
		|	ОтпускПоУходуЗаРебенком.ИсправленныйДокумент
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ОтпускПоУходуЗаРебенком.Ссылка = Регистраторы.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	Увольнение.Сотрудник,
		|	Увольнение.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	&ОсновнойОтпуск,
		|	Увольнение.ДнейКомпенсацииУдержанияОтпуска,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо,
		|	ЛОЖЬ,
		|	NULL,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.ДатаУвольнения,
		|	ИСТИНА,
		|	Увольнение.Дата,
		|	Увольнение.Номер,
		|	Увольнение.ИсправленныйДокумент
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Увольнение.Ссылка = Регистраторы.Регистратор
		|			И (Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник,
		|	УвольнениеДополнительныеОтпуска.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	УвольнениеДополнительныеОтпуска.ВидОтпуска,
		|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
		|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ОснованиеУвольнения,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ДатаУвольнения,
		|	ИСТИНА,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Дата,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Номер,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО УвольнениеДополнительныеОтпуска.Ссылка = Регистраторы.Регистратор
		|			И (УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомСотрудники.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	&ОсновнойОтпуск,
		|	УвольнениеСпискомСотрудники.ДнейКомпенсацииУдержанияОтпуска,
		|	УвольнениеСпискомСотрудники.РабочийГодС,
		|	УвольнениеСпискомСотрудники.РабочийГодПо,
		|	ЛОЖЬ,
		|	NULL,
		|	УвольнениеСпискомСотрудники.ОснованиеУвольнения,
		|	УвольнениеСпискомСотрудники.ДатаУвольнения,
		|	ИСТИНА,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата,
		|	УвольнениеСпискомСотрудники.Ссылка.Номер,
		|	УвольнениеСпискомСотрудники.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО УвольнениеСпискомСотрудники.Ссылка = Регистраторы.Регистратор
		|			И (УвольнениеСпискомСотрудники.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомДополнительныеОтпуска.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	УвольнениеСпискомДополнительныеОтпуска.ВидОтпуска,
		|	УвольнениеСпискомДополнительныеОтпуска.ДнейКомпенсацииУдержания,
		|	УвольнениеСпискомДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеСпискомДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	УвольнениеСпискомСотрудники.ОснованиеУвольнения,
		|	УвольнениеСпискомСотрудники.ДатаУвольнения,
		|	ИСТИНА,
		|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.Дата,
		|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.Номер,
		|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеСпискомДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО УвольнениеСпискомДополнительныеОтпуска.Ссылка = Регистраторы.Регистратор
		|			И (УвольнениеСпискомДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ПО УвольнениеСпискомДополнительныеОтпуска.Ссылка = УвольнениеСпискомСотрудники.Ссылка
		|			И УвольнениеСпискомДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = УвольнениеСпискомСотрудники.ИдентификаторСтрокиСотрудника";
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		Модуль.ДополнитьЗапросВТДанныеДокументовПериодыОтпусков(ТекстЗапроса);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументов.Регистратор КАК Регистратор,
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.ДокументОснование КАК ДокументОснование,
		|	ДанныеДокументов.ВидОтпуска КАК ВидОтпуска,
		|	ДанныеДокументов.ДатаНачала КАК ДатаНачала,
		|	МАКСИМУМ(ДанныеДокументов.ДатаОкончания) КАК ДатаОкончания,
		|	СУММА(ДанныеДокументов.КоличествоДней) КАК КоличествоДней,
		|	МИНИМУМ(ДанныеДокументов.РабочийПериодС) КАК РабочийПериодС,
		|	МАКСИМУМ(ДанныеДокументов.РабочийПериодПо) КАК РабочийПериодПо,
		|	МАКСИМУМ(ДанныеДокументов.ОтсутствиеВТечениеЧастиСмены) КАК ОтсутствиеВТечениеЧастиСмены,
		|	МАКСИМУМ(ДанныеДокументов.Состояние) КАК Состояние,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ДанныеДокументов.Основание КАК СТРОКА(1024))) КАК Основание,
		|	МАКСИМУМ(ДанныеДокументов.ПериодЗаписи) КАК ПериодЗаписи,
		|	МАКСИМУМ(ДанныеДокументов.Компенсация) КАК Компенсация,
		|	МАКСИМУМ(ДанныеДокументов.Дата) КАК Дата,
		|	МАКСИМУМ(ДанныеДокументов.Номер) КАК Номер,
		|	МАКСИМУМ(ДанныеДокументов.ИсправленныйДокумент) КАК ИсправленныйДокумент
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокументов.Регистратор,
		|	ДанныеДокументов.Сотрудник,
		|	ДанныеДокументов.ДокументОснование,
		|	ДанныеДокументов.ДатаНачала,
		|	ДанныеДокументов.ВидОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	Сотрудник,
		|	ДатаНачала,
		|	ВидОтпуска";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПериодыОтпусков.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ПериодыОтпусков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			Если Не ЗначениеЗаполнено(НоваяЗапись.Состояние) Тогда 
				НоваяЗапись.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(Выборка.ВидОтпуска);
			КонецЕсли;
			НоваяЗапись.ИсходныйДокумент = Выборка.ДокументОснование;
			НоваяЗапись.ИсходныйДокументДата = Выборка.Дата;
			НоваяЗапись.ИсходныйДокументНомер = Выборка.Номер;
			Если ЗначениеЗаполнено(Выборка.ИсправленныйДокумент) Тогда 
				НоваяЗапись.ИсходныйДокумент = ИсправлениеДокументовЗарплатаКадры.ПервыйДокументЦепочкиИсправлений(Выборка.ИсправленныйДокумент);
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяЗапись.ИсходныйДокумент, "Дата, Номер"); 
			    НоваяЗапись.ИсходныйДокументДата = ЗначенияРеквизитов["Дата"];
			    НоваяЗапись.ИсходныйДокументНомер = ЗначенияРеквизитов["Номер"];
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
				   
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыОтпусковИспр(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Документ.БольничныйЛист");
	ИменаТаблиц.Добавить("Документ.Отпуск");
	ИменаТаблиц.Добавить("Документ.ОтпускБезСохраненияОплаты");
	ИменаТаблиц.Добавить("Документ.ОтпускБезСохраненияОплатыСписком");
	ИменаТаблиц.Добавить("Документ.ОтпускПоУходуЗаРебенком");
	
	ТекстыЗапросов = Новый Массив;
	ПервыйЗапрос = Истина;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Отпуск.Ссылка КАК РегистраторИзмерение,
			|	Отпуск.ИсправленныйДокумент КАК ДокументОснование
			|ПОМЕСТИТЬ ВТРегистраторыПредварительно
			|ИЗ
			|	#ИмяТаблицы КАК Отпуск
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК ИсправленныйОтпуск
			|		ПО Отпуск.ИсправленныйДокумент = ИсправленныйОтпуск.Ссылка
			|			И (Отпуск.Проведен)
			|			И (ИсправленныйОтпуск.Проведен)
			|			И &Условие
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусковИспр КАК ПериодыОтпусковИспр
			|		ПО Отпуск.Ссылка = ПериодыОтпусковИспр.РегистраторИзмерение
			|ГДЕ
			|	ПериодыОтпусковИспр.РегистраторИзмерение ЕСТЬ NULL";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
		
		Если Не ПервыйЗапрос Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТРегистраторыПредварительно", "");
		КонецЕсли;
		
		Если ИмяТаблицы = "Документ.БольничныйЛист" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "(Отпуск.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам))");
		ИначеЕсли ИмяТаблицы = "Документ.Отпуск" Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "(Отпуск.ПредоставитьОсновнойОтпуск ИЛИ Отпуск.ПредоставитьДополнительныйОтпуск ИЛИ Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ИСТИНА");
		КонецЕсли;
		
		ПервыйЗапрос = Ложь;
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	// Увольнение
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Ссылка КАК РегистраторИзмерение,
		|	Отпуск.ИсправленныйДокумент КАК ДокументОснование
		|ИЗ
		|	Документ.Увольнение КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК ИсправленныйОтпуск
		|		ПО Отпуск.ИсправленныйДокумент = ИсправленныйОтпуск.Ссылка
		|			И (Отпуск.Проведен)
		|			И (ИсправленныйОтпуск.Проведен)
		|			И (Отпуск.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусковИспр КАК ПериодыОтпусковИспр
		|		ПО Отпуск.Ссылка = ПериодыОтпусковИспр.РегистраторИзмерение
		|ГДЕ
		|	ПериодыОтпусковИспр.РегистраторИзмерение ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Ссылка,
		|	Отпуск.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.Увольнение.ДополнительныеОтпуска КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК ИсправленныйОтпуск
		|		ПО Отпуск.Ссылка.ИсправленныйДокумент = ИсправленныйОтпуск.Ссылка
		|			И (Отпуск.Ссылка.Проведен)
		|			И (ИсправленныйОтпуск.Проведен)
		|			И (Отпуск.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусковИспр КАК ПериодыОтпусковИспр
		|		ПО Отпуск.Ссылка = ПериодыОтпусковИспр.РегистраторИзмерение
		|ГДЕ
		|	ПериодыОтпусковИспр.РегистраторИзмерение ЕСТЬ NULL";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		Модуль.ДополнитьЗапросВТРегистраторыПериодыОтпусковИспр(ТекстыЗапросов);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	РегистраторыПредварительно.РегистраторИзмерение КАК РегистраторИзмерение,
		|	РегистраторыПредварительно.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТРегистраторыПредварительно КАК РегистраторыПредварительно";
				   
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение КАК РегистраторИзмерение,
		|	Отпуск.Сотрудник КАК Сотрудник,
		|	Отпуск.Ссылка КАК ДокументОснование,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания,
		|	&ОсновнойОтпуск КАК ВидОтпуска,
		|	Отпуск.КоличествоДнейОсновногоОтпуска КАК КоличествоДней,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийПериодС,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийПериодПо,
		|	ЛОЖЬ КАК ОтсутствиеВТечениеЧастиСмены,
		|	NULL КАК Состояние,
		|	Отпуск.Основание КАК Основание,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ПериодЗаписи,
		|	ЛОЖЬ КАК Компенсация,
		|	Отпуск.Дата КАК Дата,
		|	Отпуск.Номер КАК Номер,
		|	Отпуск.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Отпуск.Ссылка = Регистраторы.ДокументОснование
		|			И (Отпуск.ПредоставитьОсновнойОтпуск)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	Отпуск.Сотрудник,
		|	Отпуск.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	&ОсновнойОтпуск,
		|	Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	Отпуск.Основание,
		|	Отпуск.Дата,
		|	ИСТИНА,
		|	Отпуск.Дата,
		|	Отпуск.Номер,
		|	Отпуск.ИсправленныйДокумент
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Отпуск.Ссылка = Регистраторы.ДокументОснование
		|			И (Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	ДополнительныеОтпуска.Ссылка.Сотрудник,
		|	ДополнительныеОтпуска.Ссылка,
		|	ДополнительныеОтпуска.ДатаНачала,
		|	ДополнительныеОтпуска.ДатаОкончания,
		|	ДополнительныеОтпуска.ВидОтпуска,
		|	ДополнительныеОтпуска.КоличествоДней,
		|	ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	ДополнительныеОтпуска.Основание,
		|	ДополнительныеОтпуска.ДатаНачала,
		|	ЛОЖЬ,
		|	ДополнительныеОтпуска.Ссылка.Дата,
		|	ДополнительныеОтпуска.Ссылка.Номер,
		|	ДополнительныеОтпуска.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ДополнительныеОтпуска.Ссылка = Регистраторы.ДокументОснование
		|			И (ДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск)
		|			И (ДополнительныеОтпуска.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	ДополнительныеОтпуска.Ссылка.Сотрудник,
		|	ДополнительныеОтпуска.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДополнительныеОтпуска.ВидОтпуска,
		|	ДополнительныеОтпуска.КоличествоДнейКомпенсации,
		|	ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	ДополнительныеОтпуска.Основание,
		|	ДополнительныеОтпуска.Ссылка.Дата,
		|	ИСТИНА,
		|	ДополнительныеОтпуска.Ссылка.Дата,
		|	ДополнительныеОтпуска.Ссылка.Номер,
		|	ДополнительныеОтпуска.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ДополнительныеОтпуска.Ссылка = Регистраторы.ДокументОснование
		|			И (ДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск)
		|			И (ДополнительныеОтпуска.КоличествоДнейКомпенсации > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	БольничныйЛист.Сотрудник,
		|	БольничныйЛист.Ссылка,
		|	БольничныйЛист.ДатаНачала,
		|	БольничныйЛист.ДатаОкончания,
		|	NULL,
		|	РАЗНОСТЬДАТ(БольничныйЛист.ДатаНачала, БольничныйЛист.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам),
		|	"""",
		|	БольничныйЛист.ДатаНачала,
		|	ЛОЖЬ,
		|	БольничныйЛист.Дата,
		|	БольничныйЛист.Номер,
		|	БольничныйЛист.ИсправленныйДокумент
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО БольничныйЛист.Ссылка = Регистраторы.ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания,
		|	ОтпускБезСохраненияОплаты.ВидОтпуска,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплаты.ДатаНачала, ОтпускБезСохраненияОплаты.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ОтпускБезСохраненияОплаты.ОтсутствиеВТечениеЧастиСмены,
		|	NULL,
		|	"""",
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ЛОЖЬ,
		|	ОтпускБезСохраненияОплаты.Дата,
		|	ОтпускБезСохраненияОплаты.Номер,
		|	ОтпускБезСохраненияОплаты.ИсправленныйДокумент
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ОтпускБезСохраненияОплаты.Ссылка = Регистраторы.ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	ОтпускБезСохраненияОплатыСотрудники.Сотрудник,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка,
		|	ОтпускБезСохраненияОплатыСотрудники.ДатаНачала,
		|	ОтпускБезСохраненияОплатыСотрудники.ДатаОкончания,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.ВидОтпуска,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплатыСотрудники.ДатаНачала, ОтпускБезСохраненияОплатыСотрудники.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ,
		|	NULL,
		|	"""",
		|	ОтпускБезСохраненияОплатыСотрудники.ДатаНачала,
		|	ЛОЖЬ,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.Дата,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.Номер,
		|	ОтпускБезСохраненияОплатыСотрудники.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплатыСписком.Сотрудники КАК ОтпускБезСохраненияОплатыСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ОтпускБезСохраненияОплатыСотрудники.Ссылка = Регистраторы.ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник,
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
		|	NULL,
		|	РАЗНОСТЬДАТ(ОтпускПоУходуЗаРебенком.ДатаНачала, ОтпускПоУходуЗаРебенком.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком),
		|	"""",
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ЛОЖЬ,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ОтпускПоУходуЗаРебенком.Номер,
		|	ОтпускПоУходуЗаРебенком.ИсправленныйДокумент
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ОтпускПоУходуЗаРебенком.Ссылка = Регистраторы.ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	Увольнение.Сотрудник,
		|	Увольнение.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	&ОсновнойОтпуск,
		|	Увольнение.ДнейКомпенсацииУдержанияОтпуска,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо,
		|	ЛОЖЬ,
		|	NULL,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.ДатаУвольнения,
		|	ИСТИНА,
		|	Увольнение.Дата,
		|	Увольнение.Номер,
		|	Увольнение.ИсправленныйДокумент
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Увольнение.Ссылка = Регистраторы.ДокументОснование
		|			И (Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Регистраторы.РегистраторИзмерение,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник,
		|	УвольнениеДополнительныеОтпуска.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	УвольнениеДополнительныеОтпуска.ВидОтпуска,
		|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
		|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ЛОЖЬ,
		|	NULL,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ОснованиеУвольнения,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ДатаУвольнения,
		|	ИСТИНА,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Дата,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Номер,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ИсправленныйДокумент
		|ИЗ
		|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО УвольнениеДополнительныеОтпуска.Ссылка = Регистраторы.ДокументОснование
		|			И (УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные))";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		Модуль.ДополнитьЗапросВТДанныеДокументовПериодыОтпусковИспр(ТекстЗапроса);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументов.РегистраторИзмерение КАК РегистраторИзмерение,
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.ДокументОснование КАК ДокументОснование,
		|	ДанныеДокументов.ВидОтпуска КАК ВидОтпуска,
		|	ДанныеДокументов.ДатаНачала КАК ДатаНачала,
		|	МАКСИМУМ(ДанныеДокументов.ДатаОкончания) КАК ДатаОкончания,
		|	СУММА(ДанныеДокументов.КоличествоДней) КАК КоличествоДней,
		|	МИНИМУМ(ДанныеДокументов.РабочийПериодС) КАК РабочийПериодС,
		|	МАКСИМУМ(ДанныеДокументов.РабочийПериодПо) КАК РабочийПериодПо,
		|	МАКСИМУМ(ДанныеДокументов.ОтсутствиеВТечениеЧастиСмены) КАК ОтсутствиеВТечениеЧастиСмены,
		|	МАКСИМУМ(ДанныеДокументов.Состояние) КАК Состояние,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ДанныеДокументов.Основание КАК СТРОКА(1024))) КАК Основание,
		|	МАКСИМУМ(ДанныеДокументов.ПериодЗаписи) КАК ПериодЗаписи,
		|	МАКСИМУМ(ДанныеДокументов.Компенсация) КАК Компенсация,
		|	МАКСИМУМ(ДанныеДокументов.Дата) КАК Дата,
		|	МАКСИМУМ(ДанныеДокументов.Номер) КАК Номер,
		|	МАКСИМУМ(ДанныеДокументов.ИсправленныйДокумент) КАК ИсправленныйДокумент
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокументов.РегистраторИзмерение,
		|	ДанныеДокументов.Сотрудник,
		|	ДанныеДокументов.ДатаНачала,
		|	ДанныеДокументов.ДокументОснование,
		|	ДанныеДокументов.ВидОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистраторИзмерение,
		|	Сотрудник,
		|	ДатаНачала,
		|	ВидОтпуска";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("РегистраторИзмерение") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПериодыОтпусковИспр", "РегистраторИзмерение", Выборка.РегистраторИзмерение) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ПериодыОтпусковИспр.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РегистраторИзмерение.Установить(Выборка.РегистраторИзмерение);
		Пока Выборка.Следующий() Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			Если Не ЗначениеЗаполнено(НоваяЗапись.Состояние) Тогда 
				НоваяЗапись.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(Выборка.ВидОтпуска);
			КонецЕсли;
			НоваяЗапись.ИсходныйДокумент = Выборка.ДокументОснование;
			НоваяЗапись.ИсходныйДокументДата = Выборка.Дата;
			НоваяЗапись.ИсходныйДокументНомер = Выборка.Номер;
			Если ЗначениеЗаполнено(Выборка.ИсправленныйДокумент) Тогда 
				НоваяЗапись.ИсходныйДокумент = ИсправлениеДокументовЗарплатаКадры.ПервыйДокументЦепочкиИсправлений(Выборка.ИсправленныйДокумент);
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяЗапись.ИсходныйДокумент, "Дата, Номер"); 
			    НоваяЗапись.ИсходныйДокументДата = ЗначенияРеквизитов["Дата"];
			    НоваяЗапись.ИсходныйДокументНомер = ЗначенияРеквизитов["Номер"];
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
				   
КонецПроцедуры

Процедура ЗаполнитьРегистрДанныеОтпусковКарточкиСотрудника(ПараметрыОбновления = Неопределено) Экспорт
	
	СостоянияОтпуска = Новый Массив;
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускОсновной);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	
	ПредставлениеСостояний = Новый Соответствие;
	ПредставлениеСостояний.Вставить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам, НСтр("ru = 'Отпуск по беременности и родам';
																										|en = 'Maternity leave'"));
	ПредставлениеСостояний.Вставить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком, НСтр("ru = 'Отпуск по уходу за ребенком';
																									|en = 'Child care leave'"));
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ПериодыОтпусков.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОтпусковКарточкиСотрудника КАК ДанныеОтпусковКарточкиСотрудника
		|		ПО ПериодыОтпусков.Сотрудник = ДанныеОтпусковКарточкиСотрудника.Сотрудник
		|ГДЕ
		|	ДанныеОтпусковКарточкиСотрудника.Сотрудник ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	СоздатьВТДанныеОтпусковКарточкиСотрудника(Запрос.МенеджерВременныхТаблиц, Сотрудники);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОтпусков.Сотрудник КАК Сотрудник,
		|	ДанныеОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ДанныеОтпусков.ДатаНачала КАК ДатаНачала,
		|	ДанныеОтпусков.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеОтпусков.ДокументОснование КАК ДокументОснование,
		|	ДанныеОтпусков.Состояние КАК Состояние,
		|	ДанныеОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ДанныеОтпусков.ВидОтпускаПредставление КАК ВидОтпускаПредставление,
		|	ДанныеОтпусков.КоличествоДней КАК КоличествоДней,
		|	ДанныеОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ДанныеОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ДанныеОтпусков.Компенсация КАК Компенсация,
		|	ДанныеОтпусков.Основание КАК Основание,
		|	ДанныеОтпусков.ИсходнаяДатаНачала КАК ИсходнаяДатаНачала,
		|	ДанныеОтпусков.ИсходнаяДатаОкончания КАК ИсходнаяДатаОкончания,
		|	ДанныеОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ДанныеОтпусков.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	ДанныеОтпусков.ИсходныйДокументНомер КАК ИсходныйДокументНомер,
		|	ДанныеОтпусков.ВидДоговора КАК ВидДоговора
		|ИЗ
		|	ВТДанныеОтпусковКарточкиСотрудника КАК ДанныеОтпусков
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ДанныеОтпусковКарточкиСотрудника", "Сотрудник", Выборка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ДанныеОтпусковКарточкиСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
			НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
			НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
			НаборЗаписей.Отбор.ВидОтпуска.Установить(Выборка.ВидОтпуска);
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			Если Выборка.ДатаНачала <> Выборка.ИсходнаяДатаНачала Или Выборка.ДатаОкончания <> Выборка.ИсходнаяДатаОкончания Тогда 
				Если СостоянияОтпуска.Найти(Выборка.Состояние) = Неопределено Тогда 
					НоваяЗапись.КоличествоДней = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(Выборка.ДатаНачала, Выборка.ДатаОкончания);
				ИначеЕсли НоваяЗапись.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего
					Или НоваяЗапись.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ВоеннослужащийПоПризыву Тогда 
					Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
						Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
						НоваяЗапись.КоличествоДней = Модуль.КалендарныхДнейОтпуска(Выборка.ДатаНачала,Выборка.ДатаОкончания);
					КонецЕсли;
				Иначе 
					ОтпускВРабочихДняхПоДоговору = ОстаткиОтпусков.ОтпускСотрудникаВРабочихДняхПоДоговору(Выборка.Сотрудник, Выборка.ДатаНачала);
					ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(Выборка.ВидОтпуска, ОтпускВРабочихДняхПоДоговору);
					НоваяЗапись.КоличествоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(Выборка.Сотрудник, Выборка.ДатаНачала, Выборка.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяЗапись.ВидОтпускаПредставление) Тогда 
				НоваяЗапись.ВидОтпускаПредставление = ПредставлениеСостояний[Выборка.Состояние];
			КонецЕсли;
			НоваяЗапись.Основание = КадровыйУчет.ОснованиеДляРеестра(Выборка.ИсходныйДокументДата, Выборка.ИсходныйДокументНомер);
			Если ЗначениеЗаполнено(Выборка.Основание) Тогда
				НоваяЗапись.Основание = НоваяЗапись.Основание + " " + Выборка.Основание;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументОтпускаСотрудниковВРегистреПериодыОтпусков(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыОтпусков.Регистратор КАК Регистратор,
		|	ПериодыОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ОтпускаСотрудников.Ссылка КАК Ссылка,
		|	ОтпускаСотрудников.Дата КАК Дата,
		|	ОтпускаСотрудников.Номер КАК Номер
		|ПОМЕСТИТЬ ВТИсходныеДокументы
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО Отпуск.ДокументЗаполнения = ОтпускаСотрудников.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ПО Отпуск.Ссылка = ПериодыОтпусков.ИсходныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ИсходныеДокументы.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТИсходныеДокументы КАК ИсходныеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыОтпусков.Регистратор КАК Регистратор,
		|	ПериодыОтпусков.Сотрудник КАК Сотрудник,
		|	ПериодыОтпусков.ДатаНачала КАК ДатаНачала,
		|	ПериодыОтпусков.ДокументОснование КАК ДокументОснование,
		|	ПериодыОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ПериодыОтпусков.ДатаОкончания КАК ДатаОкончания,
		|	ПериодыОтпусков.КоличествоДней КАК КоличествоДней,
		|	ПериодыОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ПериодыОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ПериодыОтпусков.ОтсутствиеВТечениеЧастиСмены КАК ОтсутствиеВТечениеЧастиСмены,
		|	ПериодыОтпусков.Состояние КАК Состояние,
		|	ПериодыОтпусков.Основание КАК Основание,
		|	ПериодыОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ПериодыОтпусков.Компенсация КАК Компенсация,
		|	ВЫБОР
		|		КОГДА ИсходныеДокументы.Ссылка ЕСТЬ NULL
		|			ТОГДА ПериодыОтпусков.ИсходныйДокумент
		|		ИНАЧЕ ИсходныеДокументы.Ссылка
		|	КОНЕЦ КАК ИсходныйДокумент,
		|	ВЫБОР
		|		КОГДА ИсходныеДокументы.Ссылка ЕСТЬ NULL
		|			ТОГДА ПериодыОтпусков.ИсходныйДокументДата
		|		ИНАЧЕ ИсходныеДокументы.Дата
		|	КОНЕЦ КАК ИсходныйДокументДата,
		|	ВЫБОР
		|		КОГДА ИсходныеДокументы.Ссылка ЕСТЬ NULL
		|			ТОГДА ПериодыОтпусков.ИсходныйДокументНомер
		|		ИНАЧЕ ИсходныеДокументы.Номер
		|	КОНЕЦ КАК ИсходныйДокументНомер
		|ИЗ
		|	РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПериодыОтпусков.Регистратор = Регистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходныеДокументы КАК ИсходныеДокументы
		|		ПО ПериодыОтпусков.Регистратор = ИсходныеДокументы.Регистратор
		|			И ПериодыОтпусков.ИсходныйДокумент = ИсходныеДокументы.ИсходныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	Сотрудник,
		|	ДатаНачала,
		|	ВидОтпуска";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПериодыОтпусков.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ПериодыОтпусков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументОтпускаСотрудниковВРегистреПериодыОтпусковИспр(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ПериодыОтпусковИспр.РегистраторИзмерение КАК РегистраторИзмерение,
		|	ПериодыОтпусковИспр.Сотрудник КАК Сотрудник,
		|	ПериодыОтпусковИспр.ДатаНачала КАК ДатаНачала,
		|	ПериодыОтпусковИспр.ДокументОснование КАК ДокументОснование,
		|	ПериодыОтпусковИспр.ВидОтпуска КАК ВидОтпуска,
		|	ПериодыОтпусковИспр.ДатаОкончания КАК ДатаОкончания,
		|	ПериодыОтпусковИспр.КоличествоДней КАК КоличествоДней,
		|	ПериодыОтпусковИспр.РабочийПериодС КАК РабочийПериодС,
		|	ПериодыОтпусковИспр.РабочийПериодПо КАК РабочийПериодПо,
		|	ПериодыОтпусковИспр.ОтсутствиеВТечениеЧастиСмены КАК ОтсутствиеВТечениеЧастиСмены,
		|	ПериодыОтпусковИспр.Состояние КАК Состояние,
		|	ПериодыОтпусковИспр.Основание КАК Основание,
		|	ПериодыОтпусковИспр.ПериодЗаписи КАК ПериодЗаписи,
		|	ПериодыОтпусковИспр.Компенсация КАК Компенсация,
		|	ОтпускаСотрудников.Ссылка КАК ИсходныйДокумент,
		|	ОтпускаСотрудников.Дата КАК ИсходныйДокументДата,
		|	ОтпускаСотрудников.Номер КАК ИсходныйДокументНомер
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО Отпуск.ДокументЗаполнения = ОтпускаСотрудников.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусковИспр КАК ПериодыОтпусковИспр
		|		ПО Отпуск.Ссылка = ПериодыОтпусковИспр.ИсходныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистраторИзмерение,
		|	Сотрудник,
		|	ДатаНачала,
		|	ВидОтпуска";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("РегистраторИзмерение") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПериодыОтпусковИспр", "РегистраторИзмерение", Выборка.РегистраторИзмерение) Тогда
			Продолжить;
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ПериодыОтпусковИспр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РегистраторИзмерение.Установить(Выборка.РегистраторИзмерение);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
			НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
			НаборЗаписей.Отбор.ВидОтпуска.Установить(Выборка.ВидОтпуска);
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументОтпускаСотрудниковВРегистреДанныеОтпусковКарточкиСотрудника(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ДанныеОтпусков.Сотрудник КАК Сотрудник,
		|	ДанныеОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ДанныеОтпусков.ДатаНачала КАК ДатаНачала,
		|	ДанныеОтпусков.ДокументОснование КАК ДокументОснование,
		|	ДанныеОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ДанныеОтпусков.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеОтпусков.Состояние КАК Состояние,
		|	ДанныеОтпусков.КоличествоДней КАК КоличествоДней,
		|	ДанныеОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ДанныеОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ДанныеОтпусков.ВидДоговора КАК ВидДоговора,
		|	ДанныеОтпусков.ВидОтпускаПредставление КАК ВидОтпускаПредставление,
		|	ДанныеОтпусков.Компенсация КАК Компенсация,
		|	ОтпускаСотрудников.Ссылка КАК ИсходныйДокумент,
		|	ОтпускаСотрудников.Дата КАК ИсходныйДокументДата,
		|	ОтпускаСотрудников.Номер КАК ИсходныйДокументНомер
		|ПОМЕСТИТЬ ВТДанныеОтпусков
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО Отпуск.ДокументЗаполнения = ОтпускаСотрудников.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОтпусковКарточкиСотрудника КАК ДанныеОтпусков
		|		ПО Отпуск.Ссылка = ДанныеОтпусков.ИсходныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтпусков.Сотрудник КАК Сотрудник,
		|	ДанныеОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ДанныеОтпусков.ДатаНачала КАК ДатаНачала,
		|	ДанныеОтпусков.ДокументОснование КАК ДокументОснование,
		|	ДанныеОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ДанныеОтпусков.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеОтпусков.Состояние КАК Состояние,
		|	ДанныеОтпусков.КоличествоДней КАК КоличествоДней,
		|	ДанныеОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ДанныеОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ДанныеОтпусков.ВидДоговора КАК ВидДоговора,
		|	ДанныеОтпусков.ВидОтпускаПредставление КАК ВидОтпускаПредставление,
		|	ДанныеОтпусков.Компенсация КАК Компенсация,
		|	ДанныеОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ДанныеОтпусков.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	ДанныеОтпусков.ИсходныйДокументНомер КАК ИсходныйДокументНомер,
		|	ПериодыОтпусков.Основание КАК Основание
		|ИЗ
		|	ВТДанныеОтпусков КАК ДанныеОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ПО ДанныеОтпусков.ДокументОснование = ПериодыОтпусков.Регистратор
		|			И ДанныеОтпусков.Сотрудник = ПериодыОтпусков.Сотрудник
		|			И ДанныеОтпусков.ВидОтпуска = ПериодыОтпусков.ВидОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ПериодЗаписи,
		|	ДатаНачала,
		|	ВидОтпуска";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ДанныеОтпусковКарточкиСотрудника", "Сотрудник", Выборка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ДанныеОтпусковКарточкиСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
			НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
			НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
			НаборЗаписей.Отбор.ВидОтпуска.Установить(Выборка.ВидОтпуска);
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Основание = КадровыйУчет.ОснованиеДляРеестра(Выборка.ИсходныйДокументДата, Выборка.ИсходныйДокументНомер);
			Если ЗначениеЗаполнено(Выборка.Основание) Тогда
				НоваяЗапись.Основание = НоваяЗапись.Основание + " " + Выборка.Основание;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСотрудникиДокументаОтпускаСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ОтпускаСотрудниковОтпуска.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтпускаСотрудников.Отпуска КАК ОтпускаСотрудниковОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников.Сотрудники КАК ОтпускаСотрудниковСотрудники
		|		ПО ОтпускаСотрудниковОтпуска.Ссылка = ОтпускаСотрудниковСотрудники.Ссылка
		|ГДЕ
		|	ОтпускаСотрудниковСотрудники.Ссылка ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ОтпускаСотрудников", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Отпуска.Сортировать("УдалитьСотрудник, ДатаНачала");
		
		Отпуска = Новый Соответствие;
		НеоформленныеОтпуска = Новый Массив;
		Для Каждого СтрокаОтпуска Из ДокументОбъект.Отпуска Цикл
			Если Не ЗначениеЗаполнено(СтрокаОтпуска.УдалитьОтпуск) Тогда 
				НеоформленныеОтпуска.Добавить(СтрокаОтпуска);
				Продолжить;
			КонецЕсли;
			ВидыОтпусков = Отпуска[СтрокаОтпуска.УдалитьОтпуск];
			Если ВидыОтпусков = Неопределено Тогда 
				ВидыОтпусков = Новый Массив;
			КонецЕсли;
			ВидыОтпусков.Добавить(СтрокаОтпуска);
			Отпуска.Вставить(СтрокаОтпуска.УдалитьОтпуск, ВидыОтпусков);
		КонецЦикла;
		
		СписокОтпусков = ОбщегоНазначения.ВыгрузитьКолонку(Отпуска, "Ключ");
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокОтпусков", СписокОтпусков);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Отпуск.Ссылка КАК Отпуск,
			|	Отпуск.Сотрудник КАК Сотрудник,
			|	Отпуск.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Отпуск.ПредоставитьМатериальнуюПомощьПриОтпуске КАК ПредоставитьМатериальнуюПомощьПриОтпуске,
			|	Отпуск.ПредоставитьЕдиновременнуюВыплатуКОтпуску КАК ПредоставитьЕдиновременнуюВыплатуКОтпуску,
			|	Отпуск.ОсвобождатьСтавку КАК ОсвобождатьСтавку,
			|	ЛОЖЬ КАК ОтпускБезОплаты
			|ИЗ
			|	Документ.Отпуск КАК Отпуск
			|ГДЕ
			|	Отпуск.Ссылка В(&СписокОтпусков)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОтпускБезСохраненияОплаты.Ссылка,
			|	ОтпускБезСохраненияОплаты.Сотрудник,
			|	ОтпускБезСохраненияОплаты.ФизическоеЛицо,
			|	ЛОЖЬ,
			|	ЛОЖЬ,
			|	ОтпускБезСохраненияОплаты.ОсвобождатьСтавку,
			|	ИСТИНА
			|ИЗ
			|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
			|ГДЕ
			|	ОтпускБезСохраненияОплаты.Ссылка В(&СписокОтпусков)";
		
		ДанныеОтпусков = Запрос.Выполнить().Выгрузить();
		ДанныеОтпусков.Индексы.Добавить("Отпуск");
		
		ИдентификаторСтрокиСотрудника = 1;
		
		Для Каждого КлючИЗначение Из Отпуска Цикл 
			НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
			НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника;
			ДанныеОтпуска = ДанныеОтпусков.Найти(КлючИЗначение.Ключ, "Отпуск");
			Если ДанныеОтпуска <> Неопределено Тогда 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОтпуска);
			КонецЕсли;
			Для Каждого ОтпускСотрудника Из КлючИЗначение.Значение Цикл
				Если ЗначениеЗаполнено(ОтпускСотрудника.ДатаНачала) Тогда 
					НоваяСтрока.ДатаНачала = ?(ЗначениеЗаполнено(НоваяСтрока.ДатаНачала), 
						Мин(НоваяСтрока.ДатаНачала, ОтпускСотрудника.ДатаНачала), ОтпускСотрудника.ДатаНачала);
				КонецЕсли;
				Если ЗначениеЗаполнено(ОтпускСотрудника.ДатаОкончания) Тогда 
					НоваяСтрока.ДатаОкончания = ?(ЗначениеЗаполнено(НоваяСтрока.ДатаОкончания), 
						Макс(НоваяСтрока.ДатаОкончания, ОтпускСотрудника.ДатаОкончания), ОтпускСотрудника.ДатаОкончания);
				КонецЕсли;
				ОтпускСотрудника.ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника;
			КонецЦикла;
			ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника + 1;
		КонецЦикла;
		
		ПредыдущаяСтрока = Неопределено;
		ОтпускБезОплаты = Истина;
		ОписанияВидовОтпусков = Новый Соответствие;
		
		Для Каждого ОтпускСотрудника Из НеоформленныеОтпуска Цикл
			ОписаниеВидаОтпуска = ОписанияВидовОтпусков[ОтпускСотрудника.ВидОтпуска];
			Если ОписаниеВидаОтпуска = Неопределено Тогда
				ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(ОтпускСотрудника.ВидОтпуска);
				ОписанияВидовОтпусков.Вставить(ОтпускСотрудника.ВидОтпуска, ОписаниеВидаОтпуска);
			КонецЕсли;
			Если ПредыдущаяСтрока = Неопределено Тогда 
				НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
				НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника;
			ИначеЕсли ПредыдущаяСтрока.УдалитьСотрудник <> ОтпускСотрудника.УдалитьСотрудник
				Или ОтпускСотрудника.ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной")
				Или Не ЗначениеЗаполнено(ОтпускСотрудника.ДатаНачала)
				Или ОтпускСотрудника.ДатаНачала <> ПредыдущаяСтрока.ДатаОкончания + 86400 Тогда 
				НоваяСтрока.ОтпускБезОплаты = ОтпускБезОплаты;
				ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника + 1;
				ОтпускБезОплаты = Истина;
				НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
				НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника;
			КонецЕсли;	
			Если ЗначениеЗаполнено(ОтпускСотрудника.ДатаНачала) Тогда 
				НоваяСтрока.ДатаНачала = ?(ЗначениеЗаполнено(НоваяСтрока.ДатаНачала), 
					Мин(НоваяСтрока.ДатаНачала, ОтпускСотрудника.ДатаНачала), ОтпускСотрудника.ДатаНачала);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтпускСотрудника.ДатаОкончания) Тогда 
				НоваяСтрока.ДатаОкончания = ?(ЗначениеЗаполнено(НоваяСтрока.ДатаОкончания), 
					Макс(НоваяСтрока.ДатаОкончания, ОтпускСотрудника.ДатаОкончания), ОтпускСотрудника.ДатаОкончания);
			КонецЕсли;
			НоваяСтрока.Сотрудник = ОтпускСотрудника.УдалитьСотрудник;
			НоваяСтрока.ФизическоеЛицо = ОтпускСотрудника.УдалитьФизическоеЛицо;
			НоваяСтрока.ПредоставитьЕдиновременнуюВыплатуКОтпуску = ОтпускСотрудника.УдалитьПредоставитьЕдиновременнуюВыплатуКОтпуску;
			Если Не ОписаниеВидаОтпуска.ОтпускБезОплаты Тогда 
				ОтпускБезОплаты = Ложь;
			КонецЕсли;
			ОтпускСотрудника.ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника;
			ПредыдущаяСтрока = ОтпускСотрудника;
		КонецЦикла;
		
		ДокументОбъект.Сотрудники.Сортировать("Сотрудник, ДатаНачала");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СведенияОЕжегодныхОтпускахСотрудников

Функция ДобавитьПолеСведенийОЕжегодныхОтпусках(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЕжегодныхОтпусках(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЕжегодныхОтпусках", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОЕжегодныхОтпусках(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОЕжегодныхОтпусках(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КоличествоДнейОтпускаОбщее")
		Или ИмяПоля = ВРег("КоличествоДнейОсновногоОтпуска")
		Или ИмяПоля = ВРег("КоличествоДнейОтпускаЧАЭС")
		Или ИмяПоля = ВРег("КоличествоДнейСеверногоОтпуска")
		Или ИмяПоля = ВРег("КоличествоДнейОтпускаЗаВредность");
		
КонецФункции

Функция ПутьКДаннымСведенийОЕжегодныхОтпусках(Знач ИмяПоля)
	
	ПутьКДанным = "КоличестваДнейЕжегодныхОтпусковСотрудников." + ИмяПоля;
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЕжегодныхОтпусках(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОЕжегодныхОтпусках");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТЕжегодныеОтпускаСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник,
		|	ОсновнойОтпуск.КоличествоДнейВГод КАК КоличествоДнейОсновногоОтпуска,
		|	ОтпускаЧАЭС.КоличествоДнейВГод КАК КоличествоДнейОтпускаЧАЭС,
		|	СеверныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейСеверногоОтпуска,
		|	ОтпускаЗаВредность.КоличествоДнейВГод КАК КоличествоДнейОтпускаЗаВредность,
		|	СУММА(ЕСТЬNULL(ВсеОтпуска.КоличествоДнейВГод, 0)) КАК КоличествоДнейОтпускаОбщее
		|ПОМЕСТИТЬ ВТКоличестваДнейЕжегодныхОтпусковСотрудников
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборов
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ВсеОтпуска
		|		ПО ТаблицаОтборов.Период = ВсеОтпуска.Период
		|			И ТаблицаОтборов.Сотрудник = ВсеОтпуска.Сотрудник}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОсновнойОтпуск
		|		ПО ТаблицаОтборов.Период = ОсновнойОтпуск.Период
		|			И ТаблицаОтборов.Сотрудник = ОсновнойОтпуск.Сотрудник
		|			И (ОсновнойОтпуск.ВидЕжегодногоОтпуска = &ОтпускОсновной)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОтпускаЧАЭС
		|		ПО ТаблицаОтборов.Период = ОтпускаЧАЭС.Период
		|			И ТаблицаОтборов.Сотрудник = ОтпускаЧАЭС.Сотрудник
		|			И (ОтпускаЧАЭС.ВидЕжегодногоОтпуска = &ОтпускПострадавшимВАварииЧАЭС)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК СеверныеОтпуска
		|		ПО ТаблицаОтборов.Период = СеверныеОтпуска.Период
		|			И ТаблицаОтборов.Сотрудник = СеверныеОтпуска.Сотрудник
		|			И (СеверныеОтпуска.ВидЕжегодногоОтпуска = &ОтпускСеверный)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОтпускаЗаВредность
		|		ПО ТаблицаОтборов.Период = ОтпускаЗаВредность.Период
		|			И ТаблицаОтборов.Сотрудник = ОтпускаЗаВредность.Сотрудник
		|			И (ОтпускаЗаВредность.ВидЕжегодногоОтпуска = &ОтпускЗаВредность)}
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник,
		|	ОсновнойОтпуск.КоличествоДнейВГод,
		|	ОтпускаЧАЭС.КоличествоДнейВГод,
		|	СеверныеОтпуска.КоличествоДнейВГод,
		|	ОтпускаЗаВредность.КоличествоДнейВГод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЕжегодныеОтпускаСотрудников";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ОтпускОсновной = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	Запрос.УстановитьПараметр("ОтпускОсновной", ?(ОтпускОсновной = Неопределено, NULL, ОтпускОсновной));
	
	ОтпускПострадавшимВАварииЧАЭС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ?(ОтпускПострадавшимВАварииЧАЭС = Неопределено, NULL, ОтпускПострадавшимВАварииЧАЭС));
	
	ОтпускСеверный = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный");
	Запрос.УстановитьПараметр("ОтпускСеверный", ?(ОтпускСеверный = Неопределено, NULL, ОтпускСеверный));
	
	ОтпускЗаВредность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	Запрос.УстановитьПараметр("ОтпускЗаВредность", ?(ОтпускЗаВредность = Неопределено, NULL, ОтпускЗаВредность));
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличестваДнейЕжегодныхОтпусковСотрудников КАК КоличестваДнейЕжегодныхОтпусковСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = КоличестваДнейЕжегодныхОтпусковСотрудников.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КоличестваДнейЕжегодныхОтпусковСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТКоличестваДнейЕжегодныхОтпусковСотрудников");
	
КонецПроцедуры

Функция ЗапросВТЕжегодныеОтпускаСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсключаемыйРегистратор = Неопределено, ИмяВТЕжегодныеОтпускаСотрудников = "ВТЕжегодныеОтпускаСотрудников") Экспорт
	
	// Действующие отпуска сотрудников
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		"Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить(
		"Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ИндексироватьПо = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВидЕжегодногоОтпуска");
	
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы,	"Регистратор", "<>", ИсключаемыйРегистратор);
			
	КонецЕсли; 
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПоложенныеВидыЕжегодныхОтпусков",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		"ВТДействующиеОтпуска");
	
	// Специальные отпуска сотрудников
	
	ОписательВременнойТаблицыОтборовФизическихЛиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо",
		ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗапросВТСпециальныеОтпуска = ЗапросВТСпециальныеОтпускаФизическихЛиц(
		ТолькоРазрешенные, ОписательВременнойТаблицыОтборовФизическихЛиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТСпециальныеОтпуска);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
		|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.КоличествоДнейВГод КАК КоличествоДнейВГод,
		|	ВидыОтпусков.Предопределенный КАК Предопределенный,
		|	ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам КАК ПредоставлятьОтпускВсемСотрудникам,
		|	ВидыОтпусков.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТОтпускаСотрудниковПоложенныеВсем
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВидыОтпусков.ПометкаУдаления
		|	И НЕ ВидыОтпусков.Недействителен
		|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
		|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействующиеОтпуска.Период КАК Период,
		|	ДействующиеОтпуска.Сотрудник КАК Сотрудник,
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ДействующиеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ДействующиеОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ДействующиеОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам КАК ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ДействующиеОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).Наименование КАК ВидЕжегодногоОтпускаНаименование
		|ПОМЕСТИТЬ ВТЕжегодныеОтпускаСотрудников
		|ИЗ
		|	ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|ГДЕ
		|	ДействующиеОтпуска.Используется
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник,
		|	СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска,
		|	СпециальныеОтпускаСотрудников.КоличествоДнейВГод,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).Предопределенный,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).Наименование
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпециальныеОтпускаФизическихЛиц КАК СпециальныеОтпускаСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|			ПО (ВЫРАЗИТЬ(ДействующиеОтпуска.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|				И СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска = ДействующиеОтпуска.ВидЕжегодногоОтпуска
		|		ПО ТаблицаОтборов.Период = СпециальныеОтпускаСотрудников.Период
		|			И (ВЫРАЗИТЬ(ТаблицаОтборов.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|ГДЕ
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Период,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.КоличествоДнейВГод,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Предопределенный,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ПредоставлятьОтпускВсемСотрудникам,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Наименование
		|ИЗ
		|	ВТОтпускаСотрудниковПоложенныеВсем КАК ЕжегодныеОтпускаСотрудниковПоложенныеВсем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|		ПО ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник = ДействующиеОтпуска.Сотрудник
		|			И ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска = ДействующиеОтпуска.ВидЕжегодногоОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальныеОтпускаФизическихЛиц КАК СпециальныеОтпускаСотрудников
		|		ПО (ВЫРАЗИТЬ(ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|			И ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска = СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска ЕСТЬ NULL
		|	И СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДействующиеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСпециальныеОтпускаФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтпускаСотрудниковПоложенныеВсем";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТЕжегодныеОтпускаСотрудников", ИмяВТЕжегодныеОтпускаСотрудников);

	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСпециальныеОтпускаФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальныеОтпускаФизическихЛиц = "ВТСпециальныеОтпускаФизическихЛиц")
	
	Запрос = Новый Запрос;
	
	ИспользоватьЧАЭС = ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС");
	Запрос.УстановитьПараметр("ИспользоватьЧАЭС", ИспользоватьЧАЭС);
	
	ОтпускПострадавшимВАварииЧАЭС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ?(ОтпускПострадавшимВАварииЧАЭС = Неопределено, Справочники.ВидыОтпусков.ПустаяСсылка(), ОтпускПострадавшимВАварииЧАЭС));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска КАК КоличествоДнейВГод,
		|	&ОтпускПострадавшимВАварииЧАЭС КАК ВидЕжегодногоОтпуска,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(&ОтпускПострадавшимВАварииЧАЭС, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(&ОтпускПострадавшимВАварииЧАЭС, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам КАК ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(&ОтпускПострадавшимВАварииЧАЭС, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК Справочник.ВидыОтпусков).Наименование КАК ВидЕжегодногоОтпускаНаименование
		|ПОМЕСТИТЬ ВТСпециальныеОтпускаФизическихЛиц
		|ИЗ
		|	РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС КАК СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ПО СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.ФизическоеЛицо = ТаблицаОтборов.ФизическоеЛицо
		|ГДЕ
		|	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска > 0
		|	И &ИспользоватьЧАЭС";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСпециальныеОтпускаФизическихЛиц", ИмяВТСпециальныеОтпускаФизическихЛиц);

	Возврат Запрос;
		
КонецФункции

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля) Экспорт
	
	// Права на отпуск
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоДнейОтпускаОбщее";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПраваНаОтпуск.КоличествоДнейВсего";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоДнейОтпускаЗаВредность";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПраваНаОтпуск.КоличествоДнейЗаВредность";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоДнейОсновногоОтпуска";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПраваНаОтпуск.КоличествоДнейОбщегоОтпуска";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоДнейОтпускаЧАЭС";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПраваНаОтпуск.КоличествоДнейОтпускаЧАЭС";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоДнейСеверногоОтпуска";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПраваНаОтпуск.КоличествоДнейСеверного";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	
КонецПроцедуры

#КонецОбласти

// Возвращает признак того, является ли сотрудник работающим по специфическому трудовому договору
// (см. ст. 291 и ст. 295 ТК РФ), которые подразумевают предоставление основного отпуска в рабочих днях.
// Признак возвращается на дату среза.
// 
Функция ОтпускСотрудникаВРабочихДняхПоДоговору(Сотрудник, ДатаСреза) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Или Не ЗначениеЗаполнено(ДатаСреза) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СпособыРасчета = СпособыРасчетаОтпусковСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), ДатаСреза);
	
	Возврат ?(СпособыРасчета[Сотрудник] = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке, Истина, Ложь);
	
КонецФункции

Функция ОписаниеВидаОтпуска(ВидОтпуска, ОтпускВРабочихДняхПоДоговору = Ложь) Экспорт
	
	СпособРасчетаПоКалендарнымДням = Истина;
	ЕжегодныйОтпуск = Истина;
	ОтпускБезОплаты = Ложь;
	
	Если ЗначениеЗаполнено(ВидОтпуска) Тогда
		РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОтпуска, "СпособРасчетаОтпуска, ОтпускЯвляетсяЕжегодным, ОтпускБезОплаты");
		
		СпособРасчетаПоКалендарнымДням = 
			РеквизитыОтпуска.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях 
			ИЛИ (РеквизитыОтпуска.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора И НЕ ОтпускВРабочихДняхПоДоговору);
		
		ЕжегодныйОтпуск = РеквизитыОтпуска.ОтпускЯвляетсяЕжегодным;
		ОтпускБезОплаты = РеквизитыОтпуска.ОтпускБезОплаты;
		
	КонецЕсли;
	
	Возврат Новый Структура("СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск, ОтпускБезОплаты", СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск, ОтпускБезОплаты); 
	
КонецФункции

// Формирует временную таблицу, на основе переданной, с признаком того, попадает ли сотрудник под ст. 291 и ст. 295 ТК
// РФ на дату среза. Параметры
// 	МенеджерВременныхТаблиц - менеджер временных таблиц, обязательно содержащий ВТ "ВТКадровыеДанныеСотрудников" со следующими полями
// 		- ДатаПриема
// 		- ДатаОкончания
// 		- СрочныйДоговор
// 		- СезонныйДоговор
// 	ИмяВТСотрудники - Строка, имя ВТ с отбором Сотрудник-Дата
// 	ИменаПолей      - Строка, имена полей Сотрудника и Даты в ВТ отбора
// 	ИмяВТРезультата - Строка, имя создаваемой внутренней таблицы.
//
Процедура СоздатьВТДоговорыСотрудниковСОтпускомВРабочихДнях(МенеджерВременныхТаблиц, ИмяВТСотрудники, ИменаПолей, ПолучатьКадровыеДанные = Истина, ИмяВТРезультата = "ВТДоговорыСотрудниковСОтпускомВРабочихДнях") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПолучатьКадровыеДанные Тогда
		ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковДляОтпусковВРабочихДнях";
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц, ИмяВТСотрудники, ИменаПолей);
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ИмяВТКадровыеДанныеСотрудников;
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь,
			"ДатаПриема,ДатаОкончания,СрочныйДоговор,СезонныйДоговор,ЯвляетсяСудьей,РасчетОтпускаПоРабочимДням");
	Иначе
		ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудников";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТКадровыеДанныеСотрудников.Сотрудник,
		|	ВТКадровыеДанныеСотрудников.Период,
		|	ВТКадровыеДанныеСотрудников.ЯвляетсяСудьей,
		|	ВТКадровыеДанныеСотрудников.РасчетОтпускаПоРабочимДням,
		|	ВТКадровыеДанныеСотрудников.СезонныйДоговор,
		|	ВЫБОР
		|		КОГДА НЕ ВТКадровыеДанныеСотрудников.СрочныйДоговор
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВТКадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВТКадровыеДанныеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА ДОБАВИТЬКДАТЕ(ВТКадровыеДанныеСотрудников.ДатаПриема, МЕСЯЦ, 2) > ВТКадровыеДанныеСотрудников.ДатаОкончания
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КраткосрочныйДоговор,
		|	ВТКадровыеДанныеСотрудников.ДатаПриема КАК ДатаНачалаДействия,
		|	ВТКадровыеДанныеСотрудников.ДатаОкончания КАК ДатаОкончанияДействия
		|ПОМЕСТИТЬ ВТДанныеДоговоровСотрудников
		|ИЗ
		|	%ВТКадровыеДанныеСотрудников% КАК ВТКадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоговоровСотрудников.Сотрудник,
		|	ДанныеДоговоровСотрудников.Период,
		|	ДанныеДоговоровСотрудников.ЯвляетсяСудьей,
		|	ДанныеДоговоровСотрудников.РасчетОтпускаПоРабочимДням,
		|	ДанныеДоговоровСотрудников.СезонныйДоговор,
		|	ДанныеДоговоровСотрудников.КраткосрочныйДоговор,
		|	ВЫБОР
		|		КОГДА НЕ ДанныеДоговоровСотрудников.СезонныйДоговор
		|				И НЕ ДанныеДоговоровСотрудников.КраткосрочныйДоговор
		|				И НЕ ДанныеДоговоровСотрудников.РасчетОтпускаПоРабочимДням
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеДоговоровСотрудников.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ИСТИНА
		|				КОГДА ДанныеДоговоровСотрудников.Период >= ДанныеДоговоровСотрудников.ДатаНачалаДействия
		|						И ДанныеДоговоровСотрудников.Период <= ДанныеДоговоровСотрудников.ДатаОкончанияДействия
		|					ТОГДА ИСТИНА
		|				КОГДА ДанныеДоговоровСотрудников.РасчетОтпускаПоРабочимДням
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК ОтпускВРабочихДняхПоДоговору
		|ПОМЕСТИТЬ %ВТДоговорыСотрудниковСОтпускомВРабочихДнях%
		|ИЗ
		|	ВТДанныеДоговоровСотрудников КАК ДанныеДоговоровСотрудников";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТДоговорыСотрудниковСОтпускомВРабочихДнях%", ИмяВТРезультата);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТКадровыеДанныеСотрудников%", ИмяВТКадровыеДанныеСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТДанныеДоговоровСотрудников");
	Если ПолучатьКадровыеДанные Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, ИмяВТКадровыеДанныеСотрудников);
	КонецЕсли;
	
	Запрос.Выполнить();
		
КонецПроцедуры

// Программная обертка вокруг СоздатьВТДоговорыСотрудниковСОтпускомВРабочихДнях
// Параметры:
// 	ТаблицаСотрудников - ТаблицаЗначений - таблица с колонками:
// 		- Сотрудник - СправочникСсылка.Сотрудники
// 		- Период    - Дата
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица с колонками:
// 		- Сотрудник 					- СправочникСсылка.Сотрудники
// 		- Период					    - Дата
// 		- ОтпускВРабочихДняхПоДоговору 	- булево.
//
Функция ДоговорыСотрудниковСОтпускомВРабочихДнях(ТаблицаСотрудников) Экспорт 
	ДоговорыСотрудниковСОтпускомВРабочихДнях = ТаблицаСотрудников.Скопировать();
	ДоговорыСотрудниковСОтпускомВРабочихДнях.Колонки.Добавить("ОтпускВРабочихДняхПоДоговору", Новый ОписаниеТипов("Булево"));
	
	ТребуютсяКадровыеДанные = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		ТребуютсяКадровыеДанные = Модуль.ИспользуетсяРасчетДенежногоСодержанияСудей();
	КонецЕсли;
		
	КадровыеДанные = Неопределено;
	Если ТребуютсяКадровыеДанные Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаСотрудников, "ВТФильтр");
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТФильтр");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "ЯвляетсяСудьей,РасчетОтпускаПоРабочимДням");
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ ВТКадровыеДанныеСотрудников");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КадровыеДанные = Запрос.Выполнить().Выгрузить();
		КадровыеДанные.Индексы.Добавить("Сотрудник, Период");
	КонецЕсли;	
	
	СведенияОДоговорах = КонтрактыДоговорыСотрудников.СведенияОКонтрактахДоговорахСотрудников(ТаблицаСотрудников, "СезонныйДоговор, СрочныйДоговор, ДатаОкончания");	
	СведенияОДоговорах.Индексы.Добавить("Сотрудник, Период");
	
	СтруктураПоиска = Новый Структура("Сотрудник, Период");
	
	СтрокиЗависимыеОтСрочности = Новый Массив();
	Для Каждого СтрокаРезультирующейТаблицы Из ДоговорыСотрудниковСОтпускомВРабочихДнях Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРезультирующейТаблицы);
		СведенияОДоговоре = СведенияОДоговорах.НайтиСтроки(СтруктураПоиска)[0];
		РасчетОтпускаПоРабочимДням = Ложь;
		Если КадровыеДанные <> Неопределено Тогда
			РасчетОтпускаПоРабочимДням = КадровыеДанные.НайтиСтроки(СтруктураПоиска)[0].РасчетОтпускаПоРабочимДням;
		КонецЕсли;	
		
		Если РасчетОтпускаПоРабочимДням Тогда
			СтрокаРезультирующейТаблицы.ОтпускВРабочихДняхПоДоговору = Истина;
		ИначеЕсли СведенияОДоговоре.СезонныйДоговор
		 	Или СведенияОДоговоре.СрочныйДоговор Тогда 
		 	
		 	СтрокиЗависимыеОтСрочности.Добавить(СтрокаРезультирующейТаблицы);
		КонецЕсли; 			
	КонецЦикла;	
	
	Если СтрокиЗависимыеОтСрочности.Количество() = 0 Тогда
		Возврат ДоговорыСотрудниковСОтпускомВРабочихДнях;
	КонецЕсли;	
	
	СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиЗависимыеОтСрочности, "Сотрудник", Истина);
	ПериодыРаботыСотрудников = КадровыйУчет.ПериодыРаботыСотрудников(СписокСотрудников);
	ПериодыРаботыСотрудников.Индексы.Добавить("Сотрудник");
	
	Для Каждого СтрокаРезультирующейТаблицы Из СтрокиЗависимыеОтСрочности Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПоиска);
		СведенияОДоговоре = СведенияОДоговорах.НайтиСтроки(СтруктураПоиска)[0];
		
		ПериодыРаботы = ПериодыРаботыСотрудников.НайтиСтроки(Новый Структура("Сотрудник", СтрокаРезультирующейТаблицы.Сотрудник));
		ДатаПриема = '00010101';
		Если ПериодыРаботы.Количество() > 0 Тогда
			ДатаПриема = ПериодыРаботы[0].ДатаПриема;
		КонецЕсли;				
		СтрокаРезультирующейТаблицы.ОтпускВРабочихДняхПоДоговору = ОтпускДляСрочногоДоговораВРабочихДнях(
			СтрокаРезультирующейТаблицы.Период, 
			СведенияОДоговоре.СезонныйДоговор,
			ДатаПриема,
			СведенияОДоговоре.ДатаОкончания);
	КонецЦикла;	
	
	Возврат ДоговорыСотрудниковСОтпускомВРабочихДнях;
КонецФункции

// Возвращает "Истина" в том случае, если в переданном массиве отпусков содержатся только отпуска по рабочим дням.
//
Функция СодержатсяТолькоОтпускаПоРабочимДням(МассивВидовОтпусков, Сотрудник, ДатаСреза = '00010101') Экспорт
	
	Если МассивВидовОтпусков.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ДатаСреза) Тогда
		ДатаСреза = ТекущаяДатаСеанса();
	КонецЕсли;
	ОтпускВРабочихДняхПоДоговору = ОтпускСотрудникаВРабочихДняхПоДоговору(Сотрудник, ДатаСреза);	
	
	ЕстьКалендарныеДни = Ложь;
	
	ЗначенияРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовОтпусков, "СпособРасчетаОтпуска");
	
	Для каждого ЗначениеРеквизита Из ЗначенияРеквизита Цикл
		Если ЗначениеРеквизита.Значение = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора Тогда
			ЕстьКалендарныеДни = Не ОтпускВРабочихДняхПоДоговору;
		ИначеЕсли ЗначениеРеквизита.Значение = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях Тогда
			ЕстьКалендарныеДни = Истина;
		КонецЕсли;
		Если ЕстьКалендарныеДни Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Не ЕстьКалендарныеДни;
	
КонецФункции

// Процедура создает временную таблицу со списком сотрудников и периодов 
// 
Процедура СоздатьВТСотрудникиТребовавшиеПереквалификациюДней(МенеджерВременныхТаблиц, ИмяВТСотрудники, ИмяВТКадровыеДанныеСотрудников = "")

	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"СведенияКонтрактаДоговораСотрудника",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТСотрудники,"Сотрудник"),
		ПараметрыПостроения,
		"ВТСведенияКонтрактаДоговораСотрудника");
		
	Если Не ЗначениеЗаполнено(ИмяВТКадровыеДанныеСотрудников) Тогда
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц, ИмяВТСотрудники, "Сотрудник,ДатаНачала");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ДатаПриема");
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияДоговораСотрудника.Сотрудник,
		|	ВЫБОР
		|		КОГДА СведенияДоговораСотрудника.СрочныйДоговор
		|			ТОГДА ВЫБОР
		|					КОГДА СведенияДоговораСотрудника.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ЛОЖЬ
		|					КОГДА КадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ЛОЖЬ
		|					КОГДА ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаПриема, МЕСЯЦ, 2) > СведенияДоговораСотрудника.ДатаОкончания
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КраткосрочныйДоговор,
		|	СведенияДоговораСотрудника.СезонныйДоговор,
		|	СведенияДоговораСотрудника.Период КАК ДатаНачала,
		|	СведенияДоговораСотрудника.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДетальныеЗаписи
		|ИЗ
		|	ВТСведенияКонтрактаДоговораСотрудника КАК СведенияДоговораСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО СведенияДоговораСотрудника.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСотрудникиДетальныеЗаписи.Сотрудник,
		|	МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.КраткосрочныйДоговор) КАК КраткосрочныйДоговор,
		|	МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.СезонныйДоговор) КАК СезонныйДоговор
		|ПОМЕСТИТЬ ВТСотрудникиКВыдаче
		|ИЗ
		|	ВТСотрудникиДетальныеЗаписи КАК ВТСотрудникиДетальныеЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСотрудникиДетальныеЗаписи.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.КраткосрочныйДоговор)
		|		ИЛИ МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.СезонныйДоговор))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСотрудникиДетальныеЗаписи.Сотрудник,
		|	ВТСотрудникиДетальныеЗаписи.ДатаНачала,
		|	ВТСотрудникиДетальныеЗаписи.ДатаОкончания,
		|	ВТСотрудникиДетальныеЗаписи.КраткосрочныйДоговор,
		|	ВТСотрудникиДетальныеЗаписи.СезонныйДоговор
		|ПОМЕСТИТЬ ВТСотрудникиТребовавшиеПереквалификациюДней
		|ИЗ
		|	ВТСотрудникиДетальныеЗаписи КАК ВТСотрудникиДетальныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиКВыдаче КАК ВТСотрудникиКВыдаче
		|		ПО ВТСотрудникиДетальныеЗаписи.Сотрудник = ВТСотрудникиКВыдаче.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиДетальныеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиКВыдаче";
		
	Запрос.Выполнить();

КонецПроцедуры

Функция ЕстьСтажевыеОтпуска() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОтпусков.Ссылка
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Формирует временную таблицу с правами сотрудников на ежегодные отпуска.
// Создает ВТ со следующими колонками:
// 		Сотрудник
// 		ВидЕжегодногоОтпуска
// 		КоличествоДнейВГод
// Параметры:
// 		МенеджерВременныхТаблиц
// 		ОписаниеФильтра
//			- Таблица значений, с колонками совпадающими с измерениями регистра ПоложенныеВидыЕжегодныхОтпусков.
//			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
// 		РегистраторСсылка - исключаемый регистратор
// 		ИмяВТ - имя создаваемой временной таблицы.
//
Процедура СоздатьВТПоложенныеВидыЕжегодныхОтпусков(МенеджерВременныхТаблиц, Знач ОписаниеФильтра, РегистраторСсылка = Неопределено, ТолькоАктуальные = Истина, ИмяВТ = "ВТПоложенныеВидыЕжегодныхОтпусков") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(ОписаниеФильтра) = Тип("ТаблицаЗначений") Тогда
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеФильтра);
	КонецЕсли;
	
	// Формируем ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Истина;
	Если РегистраторСсылка <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", РегистраторСсылка);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПоложенныеВидыЕжегодныхОтпусков",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоложенныеВидыЕжегодныхОтпусков.Период,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПериодЗаписи,
	|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
	|ПОМЕСТИТЬ ВТПоложенныеВидыЕжегодныхОтпусков
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних КАК ПоложенныеВидыЕжегодныхОтпусков";
	
	Если ТолькоАктуальные Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПоложенныеВидыЕжегодныхОтпусков", ИмяВТ);
	Запрос.Выполнить();

КонецПроцедуры

Функция СпособыРасчетаОтпусковСотрудников(Сотрудники, ДатаАктуальности) Экспорт
	
	СпособыРасчета = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
		Возврат СпособыРасчета;
	КонецЕсли;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники,
		"ДатаПриема,ДатаОкончания,СрочныйДоговор,СезонныйДоговор,КраткосрочныйТрудовойДоговор,ЯвляетсяСудьей,РасчетОтпускаПоРабочимДням", ДатаАктуальности);
	
	Если КадровыеДанныеСотрудников.Количество() = 0 Тогда
		Возврат СпособыРасчета;
	КонецЕсли;
	
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		// Если это не срочный договор - значит он уже и не краткосрочный и не сезонный.
		Если Не ЗначениеЗаполнено(КадровыеДанныеСотрудника.СрочныйДоговор) Или Не КадровыеДанныеСотрудника.СрочныйДоговор Тогда
			Если Не КадровыеДанныеСотрудника.РасчетОтпускаПоРабочимДням Тогда 
				СпособыРасчета.Вставить(КадровыеДанныеСотрудника.Сотрудник, Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням);
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаОкончания)
			Или Не ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаПриема) Тогда
			СрочныйДоговорДействует = Истина;
		Иначе
			СрочныйДоговорДействует = НачалоДня(КадровыеДанныеСотрудника.ДатаПриема) <= ДатаАктуальности
				И ДатаАктуальности <= КонецДня(КадровыеДанныеСотрудника.ДатаОкончания);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КадровыеДанныеСотрудника.КраткосрочныйТрудовойДоговор) Тогда
			КраткосрочныйТД = Ложь;
		Иначе
			КраткосрочныйТД = КадровыеДанныеСотрудника.КраткосрочныйТрудовойДоговор И СрочныйДоговорДействует;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудника.СезонныйДоговор) Тогда
			СезонныйТД = Ложь;
		Иначе
			СезонныйТД = КадровыеДанныеСотрудника.СезонныйДоговор И СрочныйДоговорДействует;
		КонецЕсли;	
	
		СпособРасчета = ?(КраткосрочныйТД Или СезонныйТД Или КадровыеДанныеСотрудника.РасчетОтпускаПоРабочимДням, Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке, Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням);
		СпособыРасчета.Вставить(КадровыеДанныеСотрудника.Сотрудник, СпособРасчета);
		
	КонецЦикла;
	
	Возврат СпособыРасчета;
	
КонецФункции

Процедура СоздатьВТГрафикОтпусковДляЛичныхКабинетов(МенеджерВременныхТаблиц) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отбор.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Сотрудник ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Сотрудник ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаОкончания
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Сотрудник ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесенноеКоличествоДней
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.КоличествоДней
		|	КОНЕЦ КАК КоличествоДней
		|ПОМЕСТИТЬ ВТГрафикОтпусков
		|ИЗ
		|	ВТОтборГрафиковОтпусков КАК Отбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
		|		ПО Отбор.ФизическоеЛицо = ПлановыеЕжегодныеОтпуска.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РаспределениеОбщегоПериодаОтпускаПоВидамОтпусков(ОстаткиОтпусковСотрудника, КоличествоДнейОтпуска) Экспорт
	
	ВидыОтпусков = Новый Соответствие;
	
	ОсновнойОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	ОсталосьСписать = КоличествоДнейОтпуска;
	
	СписатьОстатокОтпуска(ОстаткиОтпусковСотрудника, ОсталосьСписать, ВидыОтпусков);
	
	ОстаткиВидовОтпусков = Новый Соответствие;
	ДанныеОтпусков = Новый Соответствие;
	Для Каждого СтрокаОстатка Из ОстаткиОтпусковСотрудника Цикл
		ОстатокОтпуска = ОстаткиВидовОтпусков[СтрокаОстатка.ВидОтпуска];
		Если ОстатокОтпуска = Неопределено Тогда
			ОстатокОтпуска = 0;
		КонецЕсли;
		ОстатокОтпуска = ОстатокОтпуска + СтрокаОстатка.Дни;
		ОстаткиВидовОтпусков.Вставить(СтрокаОстатка.ВидОтпуска, ОстатокОтпуска);
		ДанныеОтпуска = ДанныеОтпусков[СтрокаОстатка.ВидОтпуска];
		Если ДанныеОтпуска = Неопределено Тогда
			ДанныеОтпуска = Новый Массив;
			ДанныеОтпусков.Вставить(СтрокаОстатка.ВидОтпуска, ДанныеОтпуска);
		КонецЕсли;
		ДанныеОтпуска.Добавить(СтрокаОстатка);
	КонецЦикла;
	
	ОсталосьСписатьДополнение = 0;
	РаспределениеОстатка = Новый Соответствие;
	Для Каждого КлючИЗначение Из ВидыОтпусков Цикл
		ВидОтпуска = КлючИЗначение.Ключ;
		ПродолжительностьОтпуска = Цел(КлючИЗначение.Значение);
		ДробнаяЧасть = КлючИЗначение.Значение - ПродолжительностьОтпуска;
		Если ДробнаяЧасть <> 0 Тогда
			ОстатокОтпуска = ОстаткиВидовОтпусков[ВидОтпуска];
			ДанныеОтпуска = ДанныеОтпусков[ВидОтпуска];
			Если ОстатокОтпуска >= 1 - ДробнаяЧасть Тогда
				ПродолжительностьОтпуска = ПродолжительностьОтпуска + 1;
				ОсталосьСписатьДополнение = ОсталосьСписатьДополнение + ДробнаяЧасть - 1;
				СписатьОстатокОтпуска(ДанныеОтпуска, 1 - ДробнаяЧасть);
			Иначе 
				ОсталосьСписатьДополнение = ОсталосьСписатьДополнение + ДробнаяЧасть;
			КонецЕсли;
		КонецЕсли;
		Если ПродолжительностьОтпуска <> 0 Тогда
			РаспределениеОстатка.Вставить(ВидОтпуска, ПродолжительностьОтпуска);
		КонецЕсли;
	КонецЦикла;
	
	ОсталосьСписать = ОсталосьСписать + Окр(ОсталосьСписатьДополнение);
	
	Если ОсталосьСписать <> 0 Тогда
		ПродолжительностьОтпуска = РаспределениеОстатка[ОсновнойОтпуск];
		Если ПродолжительностьОтпуска = Неопределено Тогда
			ПродолжительностьОтпуска = 0;
		КонецЕсли;
		ПродолжительностьОтпуска = ПродолжительностьОтпуска + ОсталосьСписать;
		РаспределениеОстатка.Вставить(ОсновнойОтпуск, ПродолжительностьОтпуска);
	КонецЕсли;
	
	Возврат РаспределениеОстатка;
	
КонецФункции

Процедура СписатьОстатокОтпуска(ОстаткиОтпусковСотрудника, ОсталосьСписать, ВидыОтпусков = Неопределено)
	
	Если ВидыОтпусков = Неопределено Тогда
		ВидыОтпусков = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаОстатка Из ОстаткиОтпусковСотрудника Цикл
		Если СтрокаОстатка.Дни <= 0 Тогда
			Продолжить;
		КонецЕсли;
		ПродолжительностьОтпуска = ВидыОтпусков[СтрокаОстатка.ВидОтпуска];
		Если ПродолжительностьОтпуска = Неопределено Тогда
			ПродолжительностьОтпуска = 0;
		КонецЕсли;
		КоличествоДней = Мин(ОсталосьСписать, СтрокаОстатка.Дни);
		ПродолжительностьОтпуска = ПродолжительностьОтпуска + КоличествоДней;
		ВидыОтпусков.Вставить(СтрокаОстатка.ВидОтпуска, ПродолжительностьОтпуска);
		ОсталосьСписать = ОсталосьСписать - КоличествоДней;
		СтрокаОстатка.Дни = СтрокаОстатка.Дни - КоличествоДней;
		Если ОсталосьСписать = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ГрафикОтпусковСотрудников(Сотрудники, НачалоПериода, ОкончаниеПериода) Экспорт 
	
	ГрафикОтпусков = Новый ТаблицаЗначений;
	ГрафикОтпусков.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ГрафикОтпусков.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ГрафикОтпусков.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ГрафикОтпусков.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ГрафикОтпусков;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеЕжегодныеОтпуска.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиОтбор
		|ИЗ
		|	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
		|ГДЕ
		|	ПлановыеЕжегодныеОтпуска.Сотрудник В(&Сотрудники)
		|	И ВЫБОР
		|			КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|				ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала
		|			ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаНачала
		|		КОНЕЦ МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеЕжегодныеОтпуска.Сотрудник КАК Сотрудник,
		|	ПлановыеЕжегодныеОтпуска.ВидОтпуска КАК ВидОтпуска,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаОкончания
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПлановыеЕжегодныеОтпуска
		|ИЗ
		|	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОтбор КАК СотрудникиОтбор
		|		ПО ПлановыеЕжегодныеОтпуска.Сотрудник = СотрудникиОтбор.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеЕжегодныеОтпуска.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(ПлановыеЕжегодныеОтпуска.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТПлановыеОтпускаОтбор
		|ИЗ
		|	ВТПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеЕжегодныеОтпуска КАК ПредыдущиеОтпуска
		|		ПО ПлановыеЕжегодныеОтпуска.Сотрудник = ПредыдущиеОтпуска.Сотрудник
		|			И (ПлановыеЕжегодныеОтпуска.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (ПлановыеЕжегодныеОтпуска.ДатаНачала = ДОБАВИТЬКДАТЕ(ПредыдущиеОтпуска.ДатаОкончания, ДЕНЬ, 1))
		|ГДЕ
		|	ПлановыеЕжегодныеОтпуска.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ПредыдущиеОтпуска.Сотрудник ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеЕжегодныеОтпуска.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеЕжегодныеОтпуска.Сотрудник КАК Сотрудник,
		|	ПлановыеЕжегодныеОтпуска.ВидОтпуска КАК ВидОтпуска,
		|	ПлановыеЕжегодныеОтпуска.ДатаНачала КАК ДатаНачала,
		|	ПлановыеЕжегодныеОтпуска.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеОтпускаОтбор КАК ПлановыеОтпускаОтбор
		|		ПО ПлановыеЕжегодныеОтпуска.Сотрудник = ПлановыеОтпускаОтбор.Сотрудник
		|			И ПлановыеЕжегодныеОтпуска.ДатаНачала >= ПлановыеОтпускаОтбор.ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ДатаНачала";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ПредыдущаяСтрока = Неопределено;
		Пока Выборка.Следующий() Цикл 
			Если ПредыдущаяСтрока <> Неопределено 
				И Выборка.ДатаНачала = ПредыдущаяСтрока.ДатаОкончания + 86400 Тогда
				Если Выборка.ВидОтпуска = ПредыдущаяСтрока.ВидОтпуска Тогда 
					ПредыдущаяСтрока.ДатаОкончания = Выборка.ДатаОкончания;
				Иначе 
					НоваяСтрока = ГрафикОтпусков.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					ПредыдущаяСтрока = НоваяСтрока;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если Выборка.ДатаНачала > ОкончаниеПериода Тогда 
				Прервать;
			КонецЕсли;
			НоваяСтрока = ГрафикОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ПредыдущаяСтрока = НоваяСтрока;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ГрафикОтпусков;
	
КонецФункции

Процедура СоздатьВТДопустимаяПродолжительностьОтпуска(МенеджерВременныхТаблиц, Остатки, ДатаАктуальности) Экспорт
	
	Основной = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", Остатки);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Основной", Основной);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ВидОтпуска КАК ВидОтпуска,
		|	ИсходныеДанные.РабочийГодДатаНачала КАК РабочийГодДатаНачала,
		|	ИсходныеДанные.РабочийГодДатаОкончания КАК РабочийГодДатаОкончания,
		|	ИсходныеДанные.Дни КАК Дни
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ВидОтпуска КАК ВидОтпуска,
		|	МИНИМУМ(ИсходныеДанные.РабочийГодДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТМинимальныеДатыНачала
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ВидОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МинимальныеДатыНачала.Сотрудник КАК Сотрудник,
		|	МинимальныеДатыНачала.ВидОтпуска КАК ВидОтпуска,
		|	МАКСИМУМ(ЗаработанныеПраваНаДатуАктуальности.КоличествоДней) КАК КоличествоДнейДатаАктуальности,
		|	МАКСИМУМ(ЕСТЬNULL(ПредыдущийПериод.КоличествоДней, 0)) КАК КоличествоДнейНачалоГода
		|ПОМЕСТИТЬ ВТЗаработанныеПрава
		|ИЗ
		|	ВТМинимальныеДатыНачала КАК МинимальныеДатыНачала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаДатуАктуальности
		|		ПО МинимальныеДатыНачала.Сотрудник = ЗаработанныеПраваНаДатуАктуальности.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ЗаработанныеПраваНаДатуАктуальности.ВидЕжегодногоОтпуска
		|			И МинимальныеДатыНачала.ДатаНачала = ЗаработанныеПраваНаДатуАктуальности.ДатаНачала
		|			И (ЗаработанныеПраваНаДатуАктуальности.Период <= КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ПредыдущийПериод
		|		ПО МинимальныеДатыНачала.Сотрудник = ПредыдущийПериод.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ПредыдущийПериод.ВидЕжегодногоОтпуска
		|			И МинимальныеДатыНачала.ДатаНачала > ПредыдущийПериод.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	МинимальныеДатыНачала.Сотрудник,
		|	МинимальныеДатыНачала.ВидОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.РабочийГодДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.РабочийГодДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТРабочийГодОсновногоОтпуска
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныеДатыНачала КАК МинимальныеДатыНачала
		|		ПО ИсходныеДанные.Сотрудник = МинимальныеДатыНачала.Сотрудник
		|			И ИсходныеДанные.ВидОтпуска = МинимальныеДатыНачала.ВидОтпуска
		|			И ИсходныеДанные.РабочийГодДатаНачала = МинимальныеДатыНачала.ДатаНачала
		|			И (ИсходныеДанные.ВидОтпуска = &Основной)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
		|	МАКСИМУМ(ЗаработанныеПраваНаОтпуска.КоличествоДней) КАК КоличествоДнейКонецГода
		|ПОМЕСТИТЬ ВТЗаработанныеПраваКонецГода
		|ИЗ
		|	ВТРабочийГодОсновногоОтпуска КАК РабочийГодОсновногоОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО РабочийГодОсновногоОтпуска.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И РабочийГодОсновногоОтпуска.ДатаОкончания >= ЗаработанныеПраваНаОтпуска.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаработанныеПраваНаОтпуска.Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МинимальныеДатыНачала.Сотрудник КАК Сотрудник,
		|	МинимальныеДатыНачала.ВидОтпуска КАК ВидОтпуска,
		|	ЗаработанныеПрава.КоличествоДнейДатаАктуальности - ЗаработанныеПрава.КоличествоДнейНачалоГода - ИсходныеДанные.Дни КАК Использовано,
		|	ЕСТЬNULL(ЗаработанныеПраваКонецГода.КоличествоДнейКонецГода, 0) - ЗаработанныеПрава.КоличествоДнейДатаАктуальности + ИсходныеДанные.Дни КАК ОстатокКонецГода
		|ПОМЕСТИТЬ ВТДопустимаяПродолжительностьОтпуска
		|ИЗ
		|	ВТМинимальныеДатыНачала КАК МинимальныеДатыНачала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО МинимальныеДатыНачала.Сотрудник = ИсходныеДанные.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ИсходныеДанные.ВидОтпуска
		|			И МинимальныеДатыНачала.ДатаНачала = ИсходныеДанные.РабочийГодДатаНачала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаработанныеПрава КАК ЗаработанныеПрава
		|		ПО МинимальныеДатыНачала.Сотрудник = ЗаработанныеПрава.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ЗаработанныеПрава.ВидОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаработанныеПраваКонецГода КАК ЗаработанныеПраваКонецГода
		|		ПО МинимальныеДатыНачала.Сотрудник = ЗаработанныеПраваКонецГода.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ЗаработанныеПраваКонецГода.ВидОтпуска";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДоступноеКоличествоДнейКомпенсацииОтпуска(Остатки, ДатаАктуальности) Экспорт
	
	ДниКомпенсации = Новый Соответствие;
	
	Основной = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	ОтпускЗаВредность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ИсходныеДанные.Колонки.Добавить("РабочийГодДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("РабочийГодДатаОкончания", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("Дни", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("МинимальнаяПродолжительность", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаОстатков Из Остатки Цикл 
		Если СтрокаОстатков.ВидОтпуска = Основной Или СтрокаОстатков.ВидОтпуска = ОтпускЗаВредность Тогда
			НоваяСтрока = ИсходныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
			НоваяСтрока.МинимальнаяПродолжительность = ?(СтрокаОстатков.ВидОтпуска = Основной, 28, 7);
			Продолжить;
		КонецЕсли;
		КоличествоДней = ДниКомпенсации[СтрокаОстатков.Сотрудник];
		КоличествоДней = ?(КоличествоДней = Неопределено, 0, КоличествоДней) + СтрокаОстатков.Дни;
		ДниКомпенсации.Вставить(СтрокаОстатков.Сотрудник, КоличествоДней);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ВидОтпуска КАК ВидОтпуска,
		|	ИсходныеДанные.РабочийГодДатаНачала КАК РабочийГодДатаНачала,
		|	ИсходныеДанные.РабочийГодДатаОкончания КАК РабочийГодДатаОкончания,
		|	ИсходныеДанные.Дни КАК Дни,
		|	ИсходныеДанные.МинимальнаяПродолжительность КАК МинимальнаяПродолжительность
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ВидОтпуска КАК ВидОтпуска,
		|	МИНИМУМ(ИсходныеДанные.РабочийГодДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТМинимальныеДатыНачала
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ВидОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МинимальныеДатыНачала.Сотрудник КАК Сотрудник,
		|	МинимальныеДатыНачала.ВидОтпуска КАК ВидОтпуска,
		|	МАКСИМУМ(ЗаработанныеПраваНаОтпуска.КоличествоДней) КАК КоличествоДнейКонецГода,
		|	МАКСИМУМ(ЕСТЬNULL(ПредыдущийПериод.КоличествоДней, 0)) КАК КоличествоДнейНачалоГода
		|ПОМЕСТИТЬ ВТЗаработанныеПрава
		|ИЗ
		|	ВТМинимальныеДатыНачала КАК МинимальныеДатыНачала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО МинимальныеДатыНачала.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
		|			И МинимальныеДатыНачала.ДатаНачала = ЗаработанныеПраваНаОтпуска.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ПредыдущийПериод
		|		ПО МинимальныеДатыНачала.Сотрудник = ПредыдущийПериод.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ПредыдущийПериод.ВидЕжегодногоОтпуска
		|			И МинимальныеДатыНачала.ДатаНачала > ПредыдущийПериод.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	МинимальныеДатыНачала.Сотрудник,
		|	МинимальныеДатыНачала.ВидОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МинимальныеДатыНачала.Сотрудник КАК Сотрудник,
		|	МинимальныеДатыНачала.ВидОтпуска КАК ВидОтпуска,
		|	ИсходныеДанные.Дни КАК Остаток,
		|	ИсходныеДанные.МинимальнаяПродолжительность КАК МинимальнаяПродолжительность,
		|	ЗаработанныеПрава.КоличествоДнейКонецГода - ЗаработанныеПрава.КоличествоДнейНачалоГода КАК Заработано
		|ПОМЕСТИТЬ ВТПервыйГодОстатков
		|ИЗ
		|	ВТМинимальныеДатыНачала КАК МинимальныеДатыНачала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО МинимальныеДатыНачала.Сотрудник = ИсходныеДанные.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ИсходныеДанные.ВидОтпуска
		|			И МинимальныеДатыНачала.ДатаНачала = ИсходныеДанные.РабочийГодДатаНачала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаработанныеПрава КАК ЗаработанныеПрава
		|		ПО МинимальныеДатыНачала.Сотрудник = ЗаработанныеПрава.Сотрудник
		|			И МинимальныеДатыНачала.ВидОтпуска = ЗаработанныеПрава.ВидОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ВидОтпуска КАК ВидОтпуска,
		|	ВЫБОР
		|		КОГДА ИсходныеДанные.Дни > ИсходныеДанные.МинимальнаяПродолжительность
		|			ТОГДА ИсходныеДанные.Дни - ИсходныеДанные.МинимальнаяПродолжительность
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДнейКомпенсации
		|ПОМЕСТИТЬ ВТКомпенсацияОтпуска
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныеДатыНачала КАК МинимальныеДатыНачала
		|		ПО ИсходныеДанные.Сотрудник = МинимальныеДатыНачала.Сотрудник
		|			И ИсходныеДанные.ВидОтпуска = МинимальныеДатыНачала.ВидОтпуска
		|			И ИсходныеДанные.РабочийГодДатаНачала > МинимальныеДатыНачала.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПервыйГодОстатков.Сотрудник,
		|	ПервыйГодОстатков.ВидОтпуска,
		|	ВЫБОР
		|		КОГДА ПервыйГодОстатков.Остаток > ПервыйГодОстатков.МинимальнаяПродолжительность
		|			ТОГДА ПервыйГодОстатков.Остаток - ПервыйГодОстатков.МинимальнаяПродолжительность
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ВТПервыйГодОстатков КАК ПервыйГодОстатков
		|ГДЕ
		|	ПервыйГодОстатков.Остаток >= ПервыйГодОстатков.Заработано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервыйГодОстатков.Сотрудник КАК Сотрудник,
		|	ПервыйГодОстатков.ВидОтпуска КАК ВидОтпуска,
		|	ПервыйГодОстатков.Остаток КАК Остаток,
		|	ПервыйГодОстатков.МинимальнаяПродолжительность КАК МинимальнаяПродолжительность,
		|	ПервыйГодОстатков.Заработано КАК Заработано
		|ПОМЕСТИТЬ ВТЧастичноИспользованныйОтпуск
		|ИЗ
		|	ВТПервыйГодОстатков КАК ПервыйГодОстатков
		|ГДЕ
		|	ПервыйГодОстатков.Остаток < ПервыйГодОстатков.Заработано
		|	И ПервыйГодОстатков.Заработано - ПервыйГодОстатков.МинимальнаяПродолжительность > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Период КАК Период,
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
		|	СУММА(ФактическиеОтпуска.Количество) КАК Количество,
		|	ФактическиеОтпуска.Компенсация КАК Компенсация
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЧастичноИспользованныйОтпуск КАК Отбор
		|		ПО ФактическиеОтпуска.Сотрудник = Отбор.Сотрудник
		|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = Отбор.ВидОтпуска
		|			И (ФактическиеОтпуска.Период <= КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ))
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическиеОтпуска.Период,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Компенсация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ВидОтпуска,
		|	Период УБЫВ,
		|	Компенсация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧастичноИспользованныйОтпуск.Сотрудник КАК Сотрудник,
		|	ЧастичноИспользованныйОтпуск.ВидОтпуска КАК ВидОтпуска,
		|	ЧастичноИспользованныйОтпуск.Остаток КАК Остаток,
		|	ЧастичноИспользованныйОтпуск.МинимальнаяПродолжительность КАК МинимальнаяПродолжительность,
		|	ЧастичноИспользованныйОтпуск.Заработано КАК Заработано,
		|	ВЫБОР
		|		КОГДА ЧастичноИспользованныйОтпуск.Заработано - ЧастичноИспользованныйОтпуск.МинимальнаяПродолжительность < ЧастичноИспользованныйОтпуск.Остаток
		|			ТОГДА ЧастичноИспользованныйОтпуск.Заработано - ЧастичноИспользованныйОтпуск.МинимальнаяПродолжительность
		|		ИНАЧЕ ЧастичноИспользованныйОтпуск.Остаток
		|	КОНЕЦ КАК ДнейКомпенсации
		|ИЗ
		|	ВТЧастичноИспользованныйОтпуск КАК ЧастичноИспользованныйОтпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомпенсацияОтпуска.Сотрудник КАК Сотрудник,
		|	СУММА(КомпенсацияОтпуска.ДнейКомпенсации) КАК ДнейКомпенсации
		|ИЗ
		|	ВТКомпенсацияОтпуска КАК КомпенсацияОтпуска
		|ГДЕ
		|	КомпенсацияОтпуска.ДнейКомпенсации > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	КомпенсацияОтпуска.Сотрудник";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДанныеСотрудников = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	ДанныеСотрудников.Индексы.Добавить("Сотрудник, ВидОтпуска");
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидОтпуска") Цикл
			Отбор = Новый Структура("Сотрудник, ВидОтпуска", Выборка.Сотрудник, Выборка.ВидОтпуска);
			ДанныеСотрудника = ДанныеСотрудников.НайтиСтроки(Отбор)[0];
			КоличествоДней = ДанныеСотрудника.Заработано - ДанныеСотрудника.Остаток;
			ИспользованоДнейКомпенсации = 0;
			Пока Выборка.Следующий() Цикл
				СписаноДней = Мин(Выборка.Количество, КоличествоДней);
				Если Выборка.Компенсация Тогда
					ИспользованоДнейКомпенсации = ИспользованоДнейКомпенсации + СписаноДней;
				КонецЕсли;
				КоличествоДней = КоличествоДней - СписаноДней;
				Если КоличествоДней = 0 Тогда
					Если ИспользованоДнейКомпенсации > 0 Тогда
						ДнейКомпенсации = Макс(ДанныеСотрудника.ДнейКомпенсации - ИспользованоДнейКомпенсации, 0);
						ДанныеСотрудника.ДнейКомпенсации = Мин(ДнейКомпенсации, ДанныеСотрудника.Остаток);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеСотрудников.Свернуть("Сотрудник", "ДнейКомпенсации");
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		КоличествоДней = ДниКомпенсации[ДанныеСотрудника.Сотрудник];
		КоличествоДней = ?(КоличествоДней = Неопределено, 0, КоличествоДней) + ДанныеСотрудника.ДнейКомпенсации;
		ДниКомпенсации.Вставить(ДанныеСотрудника.Сотрудник, КоличествоДней);
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		КоличествоДней = ДниКомпенсации[Выборка.Сотрудник];
		КоличествоДней = ?(КоличествоДней = Неопределено, 0, КоличествоДней) + Выборка.ДнейКомпенсации;
		ДниКомпенсации.Вставить(Выборка.Сотрудник, КоличествоДней);
	КонецЦикла;
	
	Возврат ДниКомпенсации;
	
КонецФункции

// Создает новую таблицу событий для справки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Сотрудник - СправочникСсылка.Сотрудники, Строка -
// * ТекущаяОрганизация - СправочникСсылка.Организации, Строка -
// * ТекущееПодразделение - СправочникСсылка.ПодразделенияОрганизаций, Строка -
// * ТекущаяДолжность - СправочникСсылка.Должности, Строка -
// * ДанныеОстатков - Массив из Структура -
// * ДанныеСобытий - Массив из Структура -
// * БудущиеОтпуска - Массив из Структура -
Функция НоваяТаблицаСобытийДляСправки() Экспорт
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники,Строка"));
	ТаблицаРезультата.Колонки.Добавить("ТекущаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации,Строка"));
	ТаблицаРезультата.Колонки.Добавить("ТекущееПодразделение",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций,Строка"));
	ТаблицаРезультата.Колонки.Добавить("ТекущаяДолжность", Новый ОписаниеТипов("СправочникСсылка.Должности,Строка"));
	ТаблицаРезультата.Колонки.Добавить("ДанныеОстатков", Новый ОписаниеТипов("Массив"));
	ТаблицаРезультата.Колонки.Добавить("ДанныеСобытий", Новый ОписаниеТипов("Массив"));
	ТаблицаРезультата.Колонки.Добавить("БудущиеОтпуска", Новый ОписаниеТипов("Массив"));
	ТаблицаРезультата.Колонки.Добавить("ЗаработанныеПрава", Новый ОписаниеТипов("Массив"));
	
	Возврат ТаблицаРезультата;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Функция формирует таблицу событий, связанных с ежегодными отпусками сотрудника,
// которая затем используется для печати справки по отпускам.
// 
// Параметры:
//  Сотрудники - Массив из СправочникСсылка.Сотрудники
//  ДатаОстатков - Дата
//  ЭтоРасчетПриУвольнении - Булево
// 
// Возвращаемое значение:
//  ТаблицаЗначений -- таблица значений с колонками, описанными в тексте метода.
Функция ТаблицаСобытийДляСправки(Сотрудники, ДатаОстатков = '00010101', ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	// Получаем исходные данные
	ТаблицаДанных = ОписаниеТаблицыДанных();
	Для Каждого Сотрудник Из Сотрудники Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник							= Сотрудник;
		Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
		Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.ИндексСтроки	= ТаблицаДанных.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНеРассчитанныхСотрудников(ТаблицаДанных, МенеджерВременныхТаблиц, Истина);
	ИсходныеДанные = ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
	
	ДанныеЗаработанныхПрав = ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц);
	ТаблицаЗаработанныхДнейОтпусков	= ДанныеЗаработанныхПрав.ЗаработанныеПрава;
	РасшифровкаЗаработанныхПрав = ДанныеЗаработанныхПрав.Расшифровка;
	
	ДополненнаяТаблицаДанных		= ИсходныеДанные.Данные;
	
	// Получаем таблицу остатков.
	ПараметрыОтпусков = ОписаниеПараметровДляТаблицаОстатковОтпусков();
	ПараметрыОтпусков.Сотрудники = Сотрудники;
	ПараметрыОтпусков.ДатаОстатков = КонецДня(ДатаОстатков);
	
	ТаблицаОстатков = ТаблицаОстатковОтпусков(ПараметрыОтпусков); 
	
	// Формируем права в разрезе событий.
	СоздатьВТСобытияПравНаОтпуска(МенеджерВременныхТаблиц);
	
	// Получаем будущие отпуска.
	СоздатьВТБудущиеОтпускаСотрудников(МенеджерВременныхТаблиц, Сотрудники, ДатаОстатков);
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудникаРасширенная") Тогда
		СоздатьВТСогласованныеЗаявкиНаОтпуск(МенеджерВременныхТаблиц, Сотрудники, ДатаОстатков);
	КонецЕсли;
	
	// Заполняем таблицу результата.
	ТаблицаРезультата = НоваяТаблицаСобытийДляСправки();
	
	// Цикл по сотрудникам.
	Для Каждого СтрокаДанных Из ДополненнаяТаблицаДанных Цикл
		
		СтрокаРезультата = ТаблицаРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДанных);
		
		// Формируем таблицу событий сотрудника.
		ТаблицаСобытий = ПустаяТаблицаСобытий();
		
		ПраваСотрудника = СобытияИзмененийПравСотрудника(МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПраваСотрудника, ТаблицаСобытий);
		
		ОтпускаСотрудника = СобытияОтпусковСотрудника(МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОтпускаСотрудника, ТаблицаСобытий);
		
		ОтклоненияСотрудника = СобытияОтклоненийСотрудника(МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОтклоненияСотрудника, ТаблицаСобытий);
		
		// Добавляем "событие" сегодня
		НовоеСобытие = ТаблицаСобытий.Добавить();
		НовоеСобытие.ДатаСобытия = СтрокаДанных.ДатаОстатков;
		НовоеСобытие.Событие = НСтр("ru = 'Сегодня';
									|en = 'Today'");
		НовоеСобытие.ПоследнееСобытие = Истина;
		
		ТаблицаСобытий.Сортировать("ДатаСобытия");
		
		// Присвоим начальным событиям "человеческие" имена.
		ЗаменитьРеквизитыСобытийПоНачальнымОстаткамСотрудника(ТаблицаСобытий, МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		
		// Дополним таблицу информацией по заработанным дням.
		ЗаработанныеОтпускаСотрудника = ТаблицаЗаработанныхДнейОтпусков.НайтиСтроки(Новый Структура("Сотрудник",СтрокаДанных.Сотрудник));
		ТаблицаЗаработанныхДнейОтпусковСотрудника = ПустаяТаблицаЗаработанныхДней();
		ЗаработанныеОтпускаПоРабочимГодам = НоваяТаблицаЗаработанныеОтпускаПоРабочимГодам();
		
		ЗаполнитьЗаработанныеДниВТаблицеСобытий(ТаблицаСобытий, ЗаработанныеОтпускаСотрудника, ТаблицаЗаработанныхДнейОтпусковСотрудника, ЗаработанныеОтпускаПоРабочимГодам);
		
		Отбор = Новый Структура("Сотрудник", СтрокаДанных.Сотрудник);
		РасшифровкаЗаработанныхПравСотрудника = РасшифровкаЗаработанныхПрав.НайтиСтроки(Отбор);
		Для Каждого СтрокаРасшифровки Из РасшифровкаЗаработанныхПравСотрудника Цикл 
			Если СтрокаРасшифровки.ДатаОкончания > СтрокаДанных.ДатаОстатков Тогда 
				Продолжить;
			КонецЕсли;
			НовоеСобытие = ТаблицаСобытий.Добавить();
			НовоеСобытие.ДатаСобытия = СтрокаРасшифровки.ДатаОкончания;
			НовоеСобытие.Событие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 - расчет заработанных прав';
					|en = '%1: calculate earned entitlements'"), СтрокаРасшифровки.ВидЕжегодногоОтпуска);
			РасшифровкаПрав = Новый Структура("ДатаНачала, ДатаОкончания, Расшифровка");
			ЗаполнитьЗначенияСвойств(РасшифровкаПрав, СтрокаРасшифровки);
			НовоеСобытие.РасшифровкаПрав = РасшифровкаПрав;
		КонецЦикла;
		Если РасшифровкаЗаработанныхПравСотрудника.Количество() > 0 Тогда 
			ТаблицаСобытий.Сортировать("ДатаСобытия");
		КонецЕсли;
		
		СтрокаРезультата.ДанныеСобытий = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСобытий);
		// Для вывода остатков - добавим в таблицу информацию по остаткам рабочих лет.
		СтрокаРезультата.ДанныеОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура("Сотрудник", СтрокаДанных.Сотрудник));
		
		БудущиеОтпуска = БудущиеОтпускаСотрудника(МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		СтрокаРезультата.БудущиеОтпуска = ОбщегоНазначения.ТаблицаЗначенийВМассив(БудущиеОтпуска);
		
		СтрокаРезультата.ЗаработанныеПрава = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗаработанныеОтпускаПоРабочимГодам);
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция НоваяТаблицаЗаработанныеОтпускаПоРабочимГодам()
	
	ЗаработанныеОтпуска = Новый ТаблицаЗначений;
	ЗаработанныеОтпуска.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗаработанныеОтпуска.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ЗаработанныеОтпуска.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ЗаработанныеОтпуска.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ЗаработанныеОтпуска.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ЗаработанныеОтпуска.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	ЗаработанныеОтпуска.Колонки.Добавить("ИспользованоДней", Новый ОписаниеТипов("Число"));
	
	Возврат ЗаработанныеОтпуска;
	
КонецФункции

Функция ОтпускДляСрочногоДоговораВРабочихДнях(ДатаНачалаОтпуска, ЭтоСезонныйДоговор, ДатаНачалаДоговора, ДатаОкончанияДоговора)
	Если ЭтоСезонныйДоговор Тогда
		Возврат ДатаНачалаОтпуска >= ДатаНачалаДоговора И ДатаНачалаОтпуска <= ДатаОкончанияДоговора
			Или Не ЗначениеЗаполнено(ДатаОкончанияДоговора);
	ИначеЕсли Не ЗначениеЗаполнено(ДатаНачалаДоговора) Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ДатаОкончанияДоговора) Тогда
		Возврат Ложь;
	ИначеЕсли ДобавитьМесяц(ДатаНачалаДоговора, 2) <= ДатаОкончанияДоговора Тогда 	
		Возврат Ложь;
	Иначе		
		Возврат ДатаНачалаОтпуска >= ДатаНачалаДоговора И ДатаНачалаОтпуска <= ДатаОкончанияДоговора;
	КонецЕсли;		
КонецФункции	

Процедура ОбновитьДанныеОтпусковКарточкиСотрудника(Сотрудники) Экспорт 
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияОтпуска = Новый Массив;
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускОсновной);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	
	ПредставлениеСостояний = Новый Соответствие;
	ПредставлениеСостояний.Вставить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам, НСтр("ru = 'Отпуск по беременности и родам';
																										|en = 'Maternity leave'"));
	ПредставлениеСостояний.Вставить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком, НСтр("ru = 'Отпуск по уходу за ребенком';
																									|en = 'Child care leave'"));
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеОтпусковКарточкиСотрудника(Запрос.МенеджерВременныхТаблиц, Сотрудники);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОтпусковКарточкиСотрудника.Сотрудник КАК Сотрудник,
		|	ДанныеОтпусковКарточкиСотрудника.ПериодЗаписи КАК ПериодЗаписи,
		|	ДанныеОтпусковКарточкиСотрудника.ДатаНачала КАК ДатаНачала,
		|	ДанныеОтпусковКарточкиСотрудника.ДокументОснование КАК ДокументОснование,
		|	ДанныеОтпусковКарточкиСотрудника.ВидОтпуска КАК ВидОтпуска
		|ИЗ
		|	ВТТекущиеДанныеОтпусков КАК ДанныеОтпусковКарточкиСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОтпусков КАК ПериодыОтпусков
		|		ПО ДанныеОтпусковКарточкиСотрудника.Сотрудник = ПериодыОтпусков.Сотрудник
		|			И ДанныеОтпусковКарточкиСотрудника.ПериодЗаписи = ПериодыОтпусков.ПериодЗаписи
		|			И ДанныеОтпусковКарточкиСотрудника.ДатаНачала = ПериодыОтпусков.ДатаНачала
		|			И ДанныеОтпусковКарточкиСотрудника.ДатаОкончания = ПериодыОтпусков.ДатаОкончания
		|			И (ПериодыОтпусков.ДокументОснование = ДанныеОтпусковКарточкиСотрудника.ДокументОснование)
		|			И ДанныеОтпусковКарточкиСотрудника.Состояние = ПериодыОтпусков.Состояние
		|			И ДанныеОтпусковКарточкиСотрудника.ВидОтпуска = ПериодыОтпусков.ВидОтпуска
		|ГДЕ
		|	ПериодыОтпусков.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОтпусков.Сотрудник КАК Сотрудник,
		|	ДанныеОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ДанныеОтпусков.ДатаНачала КАК ДатаНачала,
		|	ДанныеОтпусков.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеОтпусков.ДокументОснование КАК ДокументОснование,
		|	ДанныеОтпусков.Состояние КАК Состояние,
		|	ДанныеОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ДанныеОтпусков.ВидОтпускаПредставление КАК ВидОтпускаПредставление,
		|	ДанныеОтпусков.КоличествоДней КАК КоличествоДней,
		|	ДанныеОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ДанныеОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ДанныеОтпусков.Компенсация КАК Компенсация,
		|	ДанныеОтпусков.Основание КАК Основание,
		|	ДанныеОтпусков.ИсходнаяДатаНачала КАК ИсходнаяДатаНачала,
		|	ДанныеОтпусков.ИсходнаяДатаОкончания КАК ИсходнаяДатаОкончания,
		|	ДанныеОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ДанныеОтпусков.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	ДанныеОтпусков.ИсходныйДокументНомер КАК ИсходныйДокументНомер,
		|	ДанныеОтпусков.ВидДоговора КАК ВидДоговора
		|ИЗ
		|	ВТДанныеОтпусковКарточкиСотрудника КАК ДанныеОтпусков";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Удаление записей
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.ДанныеОтпусковКарточкиСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
		НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
		НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
		НаборЗаписей.Отбор.ВидОтпуска.Установить(Выборка.ВидОтпуска);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Добавление записей
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.ДанныеОтпусковКарточкиСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
		НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
		НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
		НаборЗаписей.Отбор.ВидОтпуска.Установить(Выборка.ВидОтпуска);
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		Если Выборка.ДатаНачала <> Выборка.ИсходнаяДатаНачала Или Выборка.ДатаОкончания <> Выборка.ИсходнаяДатаОкончания Тогда 
			Если СостоянияОтпуска.Найти(Выборка.Состояние) = Неопределено Тогда 
				НоваяЗапись.КоличествоДней = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(Выборка.ДатаНачала, Выборка.ДатаОкончания);
			ИначеЕсли НоваяЗапись.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего
				Или НоваяЗапись.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ВоеннослужащийПоПризыву Тогда 
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
					НоваяЗапись.КоличествоДней = Модуль.КалендарныхДнейОтпуска(Выборка.ДатаНачала,Выборка.ДатаОкончания);
				КонецЕсли;
			Иначе 
				ОтпускВРабочихДняхПоДоговору = ОстаткиОтпусков.ОтпускСотрудникаВРабочихДняхПоДоговору(Выборка.Сотрудник, Выборка.ДатаНачала);
				ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(Выборка.ВидОтпуска, ОтпускВРабочихДняхПоДоговору);
				НоваяЗапись.КоличествоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(Выборка.Сотрудник, Выборка.ДатаНачала, Выборка.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяЗапись.ВидОтпускаПредставление) Тогда 
			НоваяЗапись.ВидОтпускаПредставление = ПредставлениеСостояний[Выборка.Состояние];
		КонецЕсли;
		НоваяЗапись.Основание = КадровыйУчет.ОснованиеДляРеестра(Выборка.ИсходныйДокументДата, Выборка.ИсходныйДокументНомер);
		Если ЗначениеЗаполнено(Выборка.Основание) Тогда
			НоваяЗапись.Основание = НоваяЗапись.Основание + " " + Выборка.Основание;
		КонецЕсли;
		НоваяЗапись.ОснованиеДокумента = Выборка.Основание;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТДанныеОтпусковКарточкиСотрудника(МенеджерВременныхТаблиц, Сотрудники)
	
	СостоянияОтпуска = Новый Массив;
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускОсновной);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	СостоянияОтпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	
	СостоянияОтпускаПоУходу = Новый Массив;
	СостоянияОтпускаПоУходу.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	СостоянияОтпускаПоУходу.Добавить(Перечисления.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком);
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	СписокСостояний.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	СписокСостояний.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСостояний, СостоянияОтпуска);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСостояний, СостоянияОтпускаПоУходу);
	
	СостоянияСотрудников.СоздатьВТСостоянияСотрудников(МенеджерВременныхТаблиц, Сотрудники, СписокСостояний);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СостоянияОтпускаПоУходу", СостоянияОтпускаПоУходу);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СостоянияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТРаботаВОтпускеПоУходуЗаРебенком
		|ИЗ
		|	ВТСостоянияСотрудников КАК СостоянияСотрудников
		|ГДЕ
		|	СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
		|	СостоянияСотрудников.ДокументОснование КАК ДокументОснование,
		|	СостоянияСотрудников.Начало КАК Начало,
		|	ВЫБОР
		|		КОГДА СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СостоянияСотрудников.ОкончаниеПредположительно
		|		ИНАЧЕ СостоянияСотрудников.Окончание
		|	КОНЕЦ КАК Окончание
		|ИЗ
		|	ВТСостоянияСотрудников КАК СостоянияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаботаВОтпускеПоУходуЗаРебенком КАК РаботаВОтпускеПоУходуЗаРебенком
		|		ПО СостоянияСотрудников.Сотрудник = РаботаВОтпускеПоУходуЗаРебенком.Сотрудник
		|			И (СостоянияСотрудников.Состояние В (&СостоянияОтпускаПоУходу))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда 
		
		ДанныеСостояний = Новый ТаблицаЗначений;
		ДанныеСостояний.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ДанныеСостояний.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.СостоянияСотрудников.Ресурсы.ДокументОснование.Тип);
		ДанныеСостояний.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
		ДанныеСостояний.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
		
		ПредыдущаяСтрока = Неопределено;
		Пока Выборка.Следующий() Цикл 
			Если ПредыдущаяСтрока <> Неопределено
				И ПредыдущаяСтрока.Сотрудник = Выборка.Сотрудник
				И КонецДня(ПредыдущаяСтрока.Окончание) + 1 = Выборка.Начало Тогда 
				ПредыдущаяСтрока.Окончание = Выборка.Окончание;
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ДанныеСостояний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ПредыдущаяСтрока = НоваяСтрока;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ДанныеСостояний", ДанныеСостояний);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеСостояний.Сотрудник КАК Сотрудник,
			|	ДанныеСостояний.ДокументОснование КАК ДокументОснование,
			|	ДанныеСостояний.Начало КАК Начало,
			|	ДанныеСостояний.Окончание КАК Окончание,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком) КАК Состояние
			|ПОМЕСТИТЬ ВТОтпускПоУходуЗаРебенком
			|ИЗ
			|	&ДанныеСостояний КАК ДанныеСостояний
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
			|	СостоянияСотрудников.ДокументОснование КАК ДокументОснование,
			|	СостоянияСотрудников.Начало КАК Начало,
			|	ВЫБОР
			|		КОГДА СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА СостоянияСотрудников.ОкончаниеПредположительно
			|		ИНАЧЕ СостоянияСотрудников.Окончание
			|	КОНЕЦ КАК Окончание,
			|	СостоянияСотрудников.Состояние КАК Состояние
			|ПОМЕСТИТЬ ВТДанныеСостояний
			|ИЗ
			|	ВТСостоянияСотрудников КАК СостоянияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботаВОтпускеПоУходуЗаРебенком КАК РаботаВОтпускеПоУходуЗаРебенком
			|		ПО СостоянияСотрудников.Сотрудник = РаботаВОтпускеПоУходуЗаРебенком.Сотрудник
			|			И (СостоянияСотрудников.Состояние В (&СостоянияОтпускаПоУходу))
			|ГДЕ
			|	РаботаВОтпускеПоУходуЗаРебенком.Сотрудник ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОтпускПоУходуЗаРебенком.Сотрудник,
			|	ОтпускПоУходуЗаРебенком.ДокументОснование,
			|	ОтпускПоУходуЗаРебенком.Начало,
			|	ОтпускПоУходуЗаРебенком.Окончание,
			|	ОтпускПоУходуЗаРебенком.Состояние
			|ИЗ
			|	ВТОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком";
		
		Запрос.Выполнить();
		
	Иначе 
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
			|	СостоянияСотрудников.ДокументОснование КАК ДокументОснование,
			|	СостоянияСотрудников.Начало КАК Начало,
			|	ВЫБОР
			|		КОГДА СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА СостоянияСотрудников.ОкончаниеПредположительно
			|		ИНАЧЕ СостоянияСотрудников.Окончание
			|	КОНЕЦ КАК Окончание,
			|	СостоянияСотрудников.Состояние КАК Состояние
			|ПОМЕСТИТЬ ВТДанныеСостояний
			|ИЗ
			|	ВТСостоянияСотрудников КАК СостоянияСотрудников";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПериодыОтпусков.Регистратор КАК Регистратор,
		|	ПериодыОтпусков.Сотрудник КАК Сотрудник,
		|	ПериодыОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ПериодыОтпусков.ДатаНачала КАК ДатаНачала,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПересечениеПериодов.ДатаНачала ЕСТЬ NULL
		|				ТОГДА ПериодыОтпусков.ДатаОкончания
		|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ПересечениеПериодов.ДатаНачала, ДЕНЬ, -1)
		|		КОНЕЦ) КАК ДатаОкончания,
		|	ПериодыОтпусков.ДокументОснование КАК ДокументОснование,
		|	ПериодыОтпусков.Состояние КАК Состояние,
		|	ПериодыОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ПериодыОтпусков.КоличествоДней КАК КоличествоДней,
		|	ПериодыОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ПериодыОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ПериодыОтпусков.Компенсация КАК Компенсация,
		|	ПериодыОтпусков.Основание КАК Основание,
		|	ПериодыОтпусков.ДатаНачала КАК ИсходнаяДатаНачала,
		|	ПериодыОтпусков.ДатаОкончания КАК ИсходнаяДатаОкончания,
		|	ПериодыОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ПериодыОтпусков.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	ПериодыОтпусков.ИсходныйДокументНомер КАК ИсходныйДокументНомер
		|ПОМЕСТИТЬ ВТПериодыОтпусковПредварительно
		|ИЗ
		|	РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОтпусков КАК ПересечениеПериодов
		|		ПО ПериодыОтпусков.Сотрудник = ПересечениеПериодов.Сотрудник
		|			И ПериодыОтпусков.Состояние = ПересечениеПериодов.Состояние
		|			И ПериодыОтпусков.ВидОтпуска = ПересечениеПериодов.ВидОтпуска
		|			И ПериодыОтпусков.ОтсутствиеВТечениеЧастиСмены = ПересечениеПериодов.ОтсутствиеВТечениеЧастиСмены
		|			И ПериодыОтпусков.Компенсация = ПересечениеПериодов.Компенсация
		|			И ПериодыОтпусков.ДатаНачала < ПересечениеПериодов.ДатаНачала
		|			И ПериодыОтпусков.ДатаОкончания >= ПересечениеПериодов.ДатаНачала
		|			И (ПериодыОтпусков.Сотрудник В (&Сотрудники))
		|			И (НЕ ПериодыОтпусков.ОтсутствиеВТечениеЧастиСмены)
		|			И (НЕ ПериодыОтпусков.Компенсация)
		|ГДЕ
		|	ПериодыОтпусков.Сотрудник В(&Сотрудники)
		|	И НЕ ПериодыОтпусков.ОтсутствиеВТечениеЧастиСмены
		|	И НЕ ПериодыОтпусков.Компенсация
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыОтпусков.Регистратор,
		|	ПериодыОтпусков.Сотрудник,
		|	ПериодыОтпусков.ПериодЗаписи,
		|	ПериодыОтпусков.ДатаНачала,
		|	ПериодыОтпусков.ДокументОснование,
		|	ПериодыОтпусков.Состояние,
		|	ПериодыОтпусков.ВидОтпуска,
		|	ПериодыОтпусков.КоличествоДней,
		|	ПериодыОтпусков.РабочийПериодС,
		|	ПериодыОтпусков.РабочийПериодПо,
		|	ПериодыОтпусков.Компенсация,
		|	ПериодыОтпусков.Основание,
		|	ПериодыОтпусков.ДатаОкончания,
		|	ПериодыОтпусков.ИсходныйДокумент,
		|	ПериодыОтпусков.ИсходныйДокументДата,
		|	ПериодыОтпусков.ИсходныйДокументНомер,
		|	ПериодыОтпусков.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыОтпусков.Регистратор КАК Регистратор,
		|	ПериодыОтпусков.Сотрудник КАК Сотрудник,
		|	ПериодыОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ВЫБОР
		|		КОГДА ДанныеСостояний.Начало > ПериодыОтпусков.ДатаНачала
		|			ТОГДА ДанныеСостояний.Начало
		|		ИНАЧЕ ПериодыОтпусков.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ДанныеСостояний.Окончание <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ДанныеСостояний.Окончание < ПериодыОтпусков.ДатаОкончания
		|			ТОГДА ДанныеСостояний.Окончание
		|		ИНАЧЕ ПериодыОтпусков.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ПериодыОтпусков.ДокументОснование КАК ДокументОснование,
		|	ПериодыОтпусков.Состояние КАК Состояние,
		|	ПериодыОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ПериодыОтпусков.КоличествоДней КАК КоличествоДней,
		|	ПериодыОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ПериодыОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ПериодыОтпусков.Компенсация КАК Компенсация,
		|	ПериодыОтпусков.Основание КАК Основание,
		|	ПериодыОтпусков.ДатаНачала КАК ИсходнаяДатаНачала,
		|	ПериодыОтпусков.ДатаОкончания КАК ИсходнаяДатаОкончания,
		|	ПериодыОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ПериодыОтпусков.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	ПериодыОтпусков.ИсходныйДокументНомер КАК ИсходныйДокументНомер
		|ПОМЕСТИТЬ ВТПериодыОтпусков
		|ИЗ
		|	ВТПериодыОтпусковПредварительно КАК ПериодыОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСостояний КАК ДанныеСостояний
		|		ПО ПериодыОтпусков.Сотрудник = ДанныеСостояний.Сотрудник
		|			И ПериодыОтпусков.Состояние = ДанныеСостояний.Состояние
		|			И (ПериодыОтпусков.ДатаНачала >= ДанныеСостояний.Начало
		|					И (ПериодыОтпусков.ДатаНачала <= ДанныеСостояний.Окончание
		|						ИЛИ ДанныеСостояний.Окончание = ДАТАВРЕМЯ(1, 1, 1))
		|				ИЛИ ПериодыОтпусков.ДатаОкончания >= ДанныеСостояний.Начало
		|					И (ПериодыОтпусков.ДатаОкончания <= ДанныеСостояний.Окончание
		|						ИЛИ ДанныеСостояний.Окончание = ДАТАВРЕМЯ(1, 1, 1))
		|				ИЛИ ДанныеСостояний.Начало МЕЖДУ ПериодыОтпусков.ДатаНачала И ПериодыОтпусков.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыОтпусков.Регистратор,
		|	ПериодыОтпусков.Сотрудник,
		|	ПериодыОтпусков.ПериодЗаписи,
		|	ПериодыОтпусков.ДатаНачала,
		|	ПериодыОтпусков.ДатаОкончания,
		|	ПериодыОтпусков.ДокументОснование,
		|	ПериодыОтпусков.Состояние,
		|	ПериодыОтпусков.ВидОтпуска,
		|	ПериодыОтпусков.КоличествоДней,
		|	ПериодыОтпусков.РабочийПериодС,
		|	ПериодыОтпусков.РабочийПериодПо,
		|	ПериодыОтпусков.Компенсация,
		|	ПериодыОтпусков.Основание,
		|	ПериодыОтпусков.ДатаНачала,
		|	ПериодыОтпусков.ДатаОкончания,
		|	ПериодыОтпусков.ИсходныйДокумент,
		|	ПериодыОтпусков.ИсходныйДокументДата,
		|	ПериодыОтпусков.ИсходныйДокументНомер
		|ИЗ
		|	РегистрСведений.ПериодыОтпусков КАК ПериодыОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СторнированиеНачислений КАК СторнированиеНачислений
		|		ПО ПериодыОтпусков.Регистратор = СторнированиеНачислений.СторнируемыйДокумент
		|			И (ПериодыОтпусков.Сотрудник В (&Сотрудники))
		|			И (ПериодыОтпусков.ОтсутствиеВТечениеЧастиСмены
		|				ИЛИ ПериодыОтпусков.Компенсация)
		|			И (СторнированиеНачислений.Проведен)
		|ГДЕ
		|	ПериодыОтпусков.Сотрудник В(&Сотрудники)
		|	И СторнированиеНачислений.Ссылка ЕСТЬ NULL
		|	И (ПериодыОтпусков.ОтсутствиеВТечениеЧастиСмены
		|			ИЛИ ПериодыОтпусков.Компенсация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОтпусковКарточкиСотрудника.Сотрудник КАК Сотрудник,
		|	ДанныеОтпусковКарточкиСотрудника.ПериодЗаписи КАК ПериодЗаписи,
		|	ДанныеОтпусковКарточкиСотрудника.ДатаНачала КАК ДатаНачала,
		|	ДанныеОтпусковКарточкиСотрудника.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеОтпусковКарточкиСотрудника.ДокументОснование КАК ДокументОснование,
		|	ДанныеОтпусковКарточкиСотрудника.Состояние КАК Состояние,
		|	ДанныеОтпусковКарточкиСотрудника.ВидОтпуска КАК ВидОтпуска,
		|	ДанныеОтпусковКарточкиСотрудника.РабочийПериодС КАК РабочийПериодС,
		|	ДанныеОтпусковКарточкиСотрудника.РабочийПериодПо КАК РабочийПериодПо,
		|	ДанныеОтпусковКарточкиСотрудника.ОснованиеДокумента КАК ОснованиеДокумента,
		|	ДанныеОтпусковКарточкиСотрудника.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	ДанныеОтпусковКарточкиСотрудника.ИсходныйДокументНомер КАК ИсходныйДокументНомер
		|ПОМЕСТИТЬ ВТТекущиеДанныеОтпусков
		|ИЗ
		|	РегистрСведений.ДанныеОтпусковКарточкиСотрудника КАК ДанныеОтпусковКарточкиСотрудника
		|ГДЕ
		|	ДанныеОтпусковКарточкиСотрудника.Сотрудник В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыОтпусков.Сотрудник КАК Сотрудник,
		|	ПериодыОтпусков.ПериодЗаписи КАК ПериодЗаписи,
		|	ПериодыОтпусков.ДатаНачала КАК ДатаНачала,
		|	ПериодыОтпусков.ДатаОкончания КАК ДатаОкончания,
		|	ПериодыОтпусков.ДокументОснование КАК ДокументОснование,
		|	ПериодыОтпусков.Состояние КАК Состояние,
		|	ПериодыОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	ПериодыОтпусков.КоличествоДней КАК КоличествоДней,
		|	ПериодыОтпусков.РабочийПериодС КАК РабочийПериодС,
		|	ПериодыОтпусков.РабочийПериодПо КАК РабочийПериодПо,
		|	ПериодыОтпусков.Компенсация КАК Компенсация,
		|	ПериодыОтпусков.Основание КАК Основание,
		|	ПериодыОтпусков.ИсходнаяДатаНачала КАК ИсходнаяДатаНачала,
		|	ПериодыОтпусков.ИсходнаяДатаОкончания КАК ИсходнаяДатаОкончания,
		|	ПериодыОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ПериодыОтпусков.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	ПериодыОтпусков.ИсходныйДокументНомер КАК ИсходныйДокументНомер
		|ПОМЕСТИТЬ ВТНовыеЗаписи
		|ИЗ
		|	ВТПериодыОтпусков КАК ПериодыОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанныеОтпусков КАК ДанныеОтпусковКарточкиСотрудника
		|		ПО ПериодыОтпусков.Сотрудник = ДанныеОтпусковКарточкиСотрудника.Сотрудник
		|			И ПериодыОтпусков.ПериодЗаписи = ДанныеОтпусковКарточкиСотрудника.ПериодЗаписи
		|			И ПериодыОтпусков.ДатаНачала = ДанныеОтпусковКарточкиСотрудника.ДатаНачала
		|			И ПериодыОтпусков.ДатаОкончания = ДанныеОтпусковКарточкиСотрудника.ДатаОкончания
		|			И ПериодыОтпусков.ДокументОснование = ДанныеОтпусковКарточкиСотрудника.ДокументОснование
		|			И ПериодыОтпусков.Состояние = ДанныеОтпусковКарточкиСотрудника.Состояние
		|			И ПериодыОтпусков.ВидОтпуска = ДанныеОтпусковКарточкиСотрудника.ВидОтпуска
		|			И ПериодыОтпусков.РабочийПериодС = ДанныеОтпусковКарточкиСотрудника.РабочийПериодС
		|			И ПериодыОтпусков.РабочийПериодПо = ДанныеОтпусковКарточкиСотрудника.РабочийПериодПо
		|			И ПериодыОтпусков.Основание = ДанныеОтпусковКарточкиСотрудника.ОснованиеДокумента
		|			И ПериодыОтпусков.ИсходныйДокументДата = ДанныеОтпусковКарточкиСотрудника.ИсходныйДокументДата
		|			И ПериодыОтпусков.ИсходныйДокументНомер = ДанныеОтпусковКарточкиСотрудника.ИсходныйДокументНомер
		|ГДЕ
		|	ДанныеОтпусковКарточкиСотрудника.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НовыеЗаписи.Сотрудник КАК Сотрудник,
		|	НовыеЗаписи.ПериодЗаписи КАК Период
		|ПОМЕСТИТЬ ВТОтборСотрудников
		|ИЗ
		|	ВТНовыеЗаписи КАК НовыеЗаписи";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТОтборСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ВидДоговора");

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НовыеЗаписи.Сотрудник КАК Сотрудник,
		|	НовыеЗаписи.ПериодЗаписи КАК ПериодЗаписи,
		|	НовыеЗаписи.ДатаНачала КАК ДатаНачала,
		|	НовыеЗаписи.ДатаОкончания КАК ДатаОкончания,
		|	НовыеЗаписи.ДокументОснование КАК ДокументОснование,
		|	НовыеЗаписи.Состояние КАК Состояние,
		|	НовыеЗаписи.ВидОтпуска КАК ВидОтпуска,
		|	ВЫБОР
		|		КОГДА НовыеЗаписи.ВидОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НовыеЗаписи.ВидОтпуска.НаименованиеПолное = """"
		|						ТОГДА НовыеЗаписи.ВидОтпуска.Наименование
		|					ИНАЧЕ ВЫРАЗИТЬ(НовыеЗаписи.ВидОтпуска.НаименованиеПолное КАК СТРОКА(1024))
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ВидОтпускаПредставление,
		|	НовыеЗаписи.КоличествоДней КАК КоличествоДней,
		|	НовыеЗаписи.РабочийПериодС КАК РабочийПериодС,
		|	НовыеЗаписи.РабочийПериодПо КАК РабочийПериодПо,
		|	НовыеЗаписи.Компенсация КАК Компенсация,
		|	НовыеЗаписи.Основание КАК Основание,
		|	НовыеЗаписи.ИсходнаяДатаНачала КАК ИсходнаяДатаНачала,
		|	НовыеЗаписи.ИсходнаяДатаОкончания КАК ИсходнаяДатаОкончания,
		|	НовыеЗаписи.ИсходныйДокумент КАК ИсходныйДокумент,
		|	НовыеЗаписи.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	НовыеЗаписи.ИсходныйДокументНомер КАК ИсходныйДокументНомер,
		|	КадровыеДанные.ВидДоговора КАК ВидДоговора
		|ПОМЕСТИТЬ ВТДанныеОтпусковКарточкиСотрудника
		|ИЗ
		|	ВТНовыеЗаписи КАК НовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|		ПО НовыеЗаписи.Сотрудник = КадровыеДанные.Сотрудник
		|			И НовыеЗаписи.ПериодЗаписи = КадровыеДанные.Период";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Получение остатка отпуска

// Возвращает структуру, которая используется для передачи параметров для функции ОстаткиОтпусков.
// 	- ДатаОстатков - дата, на которую происходит расчет остатков.
// 	- Сотрудники - массив сотрудников или одиночное значение типа СправочникСсылка.Сотрудники
// 	- ВидыОтпусков - массив видов отпусков или одиночное значение типа СправочникСсылка.ВидыОтпусков
// 	- ИсключаемыеРегистраторы - массив ссылок регистраторов или одиночное значение типа ДокументСсылка.
//
Функция ОписаниеПараметровДляТаблицаОстатковОтпусков()

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаОстатков", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Сотрудники");
	СтруктураПараметров.Вставить("ВидыОтпусков");
	СтруктураПараметров.Вставить("ИсключаемыеРегистраторы");
	
	Возврат СтруктураПараметров;

КонецФункции

// Функция возвращает результат компоновки отчета ОстаткиОтпусков в виде таблицы значений.
//
// Параметры
//	СтруктураПараметров - тип Структура, со следующими полями (см. ОстаткиОтпусков.ОписаниеПараметровДляТаблицаОстатковОтпусков()).
//		* ДатаОстатков				- дата, на которую вычисляются остатки, тип Дата
//		* Сотрудники 				- список сотрудников, тип Массив или СправочникСсылка.Сотрудники
//		* ВидыОтпусков 				- список видов отпусков, тип Массив или СправочникСсылка.ВидыОтпусков
//		* ИсключаемыеРегистраторы	- список регистраторов, исключаемых при расчете остатков, тип Массив или ДокументСсылка.
//
// Возвращаемое значение:
//  ТаблицаЗначений - остатки отпусков сотрудников в разрезе рабочих лет, таблица значений с колонками:
//		* Сотрудник					- сотрудник
//		* ВидОтпуска				- вид отпуска
//		* ВидОтпускаНаименование    - наименование вида отпуска
//		* РабочийГодДатаНачала		- начало рабочего года
//		* РабочийГодДатаОкончания	- конец рабочего года
//		* Дни                       - остаток отпуска.
//
Функция ТаблицаОстатковОтпусков(СтруктураПараметров) Экспорт
	
	ОтчетОстаткиОтпусков = Отчеты.ОстаткиОтпусков.Создать();
	НастройкиДанныеРасчета = ОтчетОстаткиОтпусков.СхемаКомпоновкиДанных.ВариантыНастроек.ДанныеРасчета.Настройки;
	ОтчетОстаткиОтпусков.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиДанныеРасчета);
	НастройкиОтчета = ОтчетОстаткиОтпусков.КомпоновщикНастроек.ПолучитьНастройки();
	
	ДатаОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	ДатаОтчета.Значение = СтруктураПараметров.ДатаОстатков;
	ДатаОтчета.Использование = Истина;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ИсключаемыеРегистраторы) Тогда
		РегистраторИсключение = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НеучитываемыйРегистраторОтпусков"));
		РегистраторИсключение.Значение = СтруктураПараметров.ИсключаемыеРегистраторы;
		РегистраторИсключение.Использование = Истина;
	КонецЕсли;
	
	Отбор = НастройкиОтчета.Отбор;
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ЭтоОтпуск", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Дни", ВидСравненияКомпоновкиДанных.НеРавно, 0);
	Если ЗначениеЗаполнено(СтруктураПараметров.Сотрудники) И (СтруктураПараметров.Сотрудники.Количество() > 0) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, СтруктураПараметров.Сотрудники);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.ВидыОтпусков) И (СтруктураПараметров.ВидыОтпусков.Количество() > 0) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ВидОтпуска", ВидСравненияКомпоновкиДанных.ВСписке, СтруктураПараметров.ВидыОтпусков);
	КонецЕсли;
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(ОтчетОстаткиОтпусков.СхемаКомпоновкиДанных, НастройкиОтчета);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКомпоновки = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат РезультатКомпоновки;

КонецФункции

Функция ЗапросВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеОтпускаСотрудниковОтбор.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпускаСотрудниковОтбор.НачалоПериода КАК НачалоПериода,
	|	ФактическиеОтпускаСотрудниковОтбор.ОкончаниеПериода КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТОтборСУчетомОстатков
	|ИЗ
	|	ВТФактическиеОтпускаОтбор КАК ФактическиеОтпускаСотрудниковОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(ФактическиеОтпуска.Количество) КАК Количество,
	|	ФактическиеОтпуска.Компенсация КАК Компенсация,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо КАК РабочийПериодПо,
	|	ПОДСТРОКА(ФактическиеОтпуска.Основание, 1, 1024) КАК Основание,
	|	ФактическиеОтпуска.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборСУчетомОстатков КАК ФактическиеОтпускаОтбор
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаОтбор.Сотрудник
	|			И ФактическиеОтпуска.ДатаОкончания >= ФактическиеОтпускаОтбор.НачалоПериода
	|			И (ФактическиеОтпуска.ДатаНачала <= ФактическиеОтпускаОтбор.ОкончаниеПериода
	|				ИЛИ ФактическиеОтпускаОтбор.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Регистратор,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ПОДСТРОКА(ФактическиеОтпуска.Основание, 1, 1024)
	|
	|ИМЕЮЩИЕ
	|	СУММА(ФактическиеОтпуска.Количество) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ФактическиеОтпуска.Количество КАК Количество,
	|	ФактическиеОтпуска.Компенсация КАК Компенсация,
	|	ФактическиеОтпуска.ВРабочихДнях КАК ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо КАК РабочийПериодПо,
	|	ФактическиеОтпуска.Основание КАК Основание,
	|	ФактическиеОтпуска.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL
	|				И ФактическиеОтпуска.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнируемаяЗапись,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL
	|				И ФактическиеОтпуска.Количество < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторноЗапись
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСоСторноПризнаками
	|ИЗ
	|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ФактическиеОтпускаСторно
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаСторно.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаСторно.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачала = ФактическиеОтпускаСторно.ДатаНачала
	|			И ФактическиеОтпуска.ДатаОкончания = ФактическиеОтпускаСторно.ДатаОкончания
	|			И (ФактическиеОтпуска.Количество = -ФактическиеОтпускаСторно.Количество)
	|			И ФактическиеОтпуска.Регистратор <> ФактическиеОтпускаСторно.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ФактическиеОтпуска.Количество КАК КоличествоДней,
	|	ФактическиеОтпуска.Компенсация КАК ЭтоКомпенсация,
	|	ФактическиеОтпуска.Регистратор КАК Регистратор,
	|	ФактическиеОтпуска.ВРабочихДнях КАК ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо КАК РабочийПериодПо,
	|	ФактическиеОтпуска.Основание КАК Основание
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСотрудников
	|{ВЫБРАТЬ
	|	Сотрудник.*,
	|	ВидЕжегодногоОтпуска.*,
	|	ДатаНачала,
	|	ДатаОкончания,
	|	КоличествоДней,
	|	ЭтоКомпенсация,
	|	Регистратор,
	|	ВРабочихДнях,
	|	РабочийПериодС,
	|	РабочийПериодПо,
	|	Основание}
	|ИЗ
	|	ВТФактическиеОтпускаСоСторноПризнаками КАК ФактическиеОтпуска
	|ГДЕ
	|	НЕ ФактическиеОтпуска.СторнируемаяЗапись
	|	И НЕ ФактическиеОтпуска.СторноЗапись
	|{ГДЕ
	|	ФактическиеОтпуска.Сотрудник.*,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска.*,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Регистратор,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Если Не ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФактическиеОтпускаСотрудников", ОписательВременныхТаблиц.ИмяВТФактическиеОтпускаСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФактическиеОтпускаОтбор", ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.Сотрудник", "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.Сотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.НачалоПериода",  "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.НачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.ОкончаниеПериода",  "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.ОкончаниеПериода);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТЗаработанныеПраваНаОтпуска(ОписательВременныхТаблиц, ТолькоРазрешенные)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаработанныеПраваНаОтпуска.Период КАК Период,
		|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ЗаработанныеПраваНаОтпуска.ДатаНачала КАК ДатаНачала,
		|	ЗаработанныеПраваНаОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод КАК КоличествоДнейЗаПериод
		|ПОМЕСТИТЬ ВТЗаработанныеПраваНаОтпуска
		|ИЗ
		|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаработанныеПраваНаОтпускаОтбор КАК ЗаработанныеПраваНаОтпускаОтбор
		|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = ЗаработанныеПраваНаОтпускаОтбор.Сотрудник
		|		И ЗаработанныеПраваНаОтпуска.Период >= ЗаработанныеПраваНаОтпускаОтбор.НачалоПериода
		|		И (ЗаработанныеПраваНаОтпуска.Период <= ЗаработанныеПраваНаОтпускаОтбор.ОкончаниеПериода
		|		ИЛИ ЗаработанныеПраваНаОтпускаОтбор.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
	
	Если Не ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТЗаработанныеПраваНаОтпуска", ОписательВременныхТаблиц.ИмяВТЗаработанныеПраваНаОтпуска);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТЗаработанныеПраваНаОтпускаОтбор", ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаработанныеПраваНаОтпускаОтбор.Сотрудник", "ЗаработанныеПраваНаОтпускаОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.Сотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаработанныеПраваНаОтпускаОтбор.НачалоПериода", "ЗаработанныеПраваНаОтпускаОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.НачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаработанныеПраваНаОтпускаОтбор.ОкончаниеПериода", "ЗаработанныеПраваНаОтпускаОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.ОкончаниеПериода);
	
	Возврат Запрос;
	
КонецФункции

// Функция готовит 2 виртуальных таблицы по сотрудникам, для которых необходимо рассчитать право на отпуск.
// 	ВТНеРассчитанныеСотрудники, с полями:
// 		* Сотрудник
// 		* ДатаОстатков
// 		* ЭтоРасчетПриУвольнении
// 	ВТНеРассчитанныеВидыОтпусковСотрудников, с полями:
// 		* Сотрудник,
// 		* ВидЕжегодногоОтпуска,
// 		* ДатаНачала,
// 		* ДатаОкончания,
// 		* ЭтоРасчетПриУвольнении.
//
Процедура СоздатьВТНеРассчитанныхСотрудников(ТаблицаДанных, МенеджерВременныхТаблиц, РассчитатьПравоНаОтпускаВсемСотрудникам)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаДанных",	ТаблицаДанных);
	
	// Упаковываем ТЗ в ВТ.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОкончания,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК Период,
		|	ТаблицаДанных.ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТТЗ
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТЗ.Сотрудник,
		|	МАКСИМУМ(ВТТЗ.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ВТТЗ.ДатаОкончания) КАК ДатаОкончания,
		|	МАКСИМУМ(ВТТЗ.Период) КАК Период,
		|	МАКСИМУМ(ВТТЗ.ЭтоРасчетПриУвольнении) КАК ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТТаблицаДанных
		|ИЗ
		|	ВТТЗ КАК ВТТЗ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТТЗ.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТЗ";
	Запрос.Выполнить();
	
	// Формируем виды отпусков для расчета.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПоложенныеВидыЕжегодныхОтпусков",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТТаблицаДанных", "Сотрудник"),,
		"ВТПраваНаОтпуска");

	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Сотрудник КАК Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МИНИМУМ(НачальныеОстаткиОтпусков.РабочийГодНачало) КАК ДатаНачалаРасчета,
		|	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТНачальныеОстатки
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО НачальныеОстаткиОтпусков.Сотрудник = ТаблицаДанных.Сотрудник
		|			И НачальныеОстаткиОтпусков.ДатаОстатка <= ТаблицаДанных.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МИНИМУМ(ПраваНаОтпуска.ПериодЗаписи) КАК ПериодПервогоПрава
		|ПОМЕСТИТЬ ВТПервыеДействующиеПрава
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО ПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
		|			И ПраваНаОтпуска.Период <= ТаблицаДанных.ДатаОкончания
		|ГДЕ
		|	ПраваНаОтпуска.Используется
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ТаблицаДанных.ДатаОкончания) КАК ТаблицаДанныхДатаОкончания,
		|	МАКСИМУМ(ПраваНаОтпуска.ПериодЗаписи) КАК ПериодПоследнегоПрава
		|ПОМЕСТИТЬ ВТУказателиПоследнихДействующихПрав
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО ПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
		|			И ПраваНаОтпуска.Период <= ТаблицаДанных.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.Используется КАК Используется,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.Используется
		|			ТОГДА УказателиПоследних.ТаблицаДанныхДатаОкончания
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПраваНаОтпуска.ПериодЗаписи, ДЕНЬ)
		|	КОНЕЦ КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТДействующиеПраваДатаОкончанияРасчета
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиПоследнихДействующихПрав КАК УказателиПоследних
		|		ПО ПраваНаОтпуска.Сотрудник = УказателиПоследних.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = УказателиПоследних.ВидЕжегодногоОтпуска
		|			И ПраваНаОтпуска.ПериодЗаписи = УказателиПоследних.ПериодПоследнегоПрава
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.Используется КАК Используется,
		|	ЕСТЬNULL(ПервыеДействующиеПрава.ПериодПервогоПрава, ПраваНаОтпуска.ДатаОкончанияРасчета) КАК ДатаНачалаРасчета,
		|	ПраваНаОтпуска.ДатаОкончанияРасчета КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТДействующиеПраваНаОтпуска
		|ИЗ
		|	ВТДействующиеПраваДатаОкончанияРасчета КАК ПраваНаОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервыеДействующиеПрава КАК ПервыеДействующиеПрава
		|		ПО ПраваНаОтпуска.Сотрудник = ПервыеДействующиеПрава.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = ПервыеДействующиеПрава.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПраваНаОтпуска.Сотрудник, НачальныеОстатки.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ПраваНаОтпуска.ВидЕжегодногоОтпуска, НачальныеОстатки.ВидЕжегодногоОтпуска) КАК ВидЕжегодногоОтпуска,
		|	ЕСТЬNULL(ПраваНаОтпуска.Используется, ИСТИНА) КАК Используется,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.ДатаНачалаРасчета ЕСТЬ NULL
		|			ТОГДА НачальныеОстатки.ДатаНачалаРасчета
		|		КОГДА НачальныеОстатки.ДатаНачалаРасчета ЕСТЬ NULL
		|			ТОГДА ПраваНаОтпуска.ДатаНачалаРасчета
		|		КОГДА ПраваНаОтпуска.ДатаНачалаРасчета > НачальныеОстатки.ДатаНачалаРасчета
		|			ТОГДА НачальныеОстатки.ДатаНачалаРасчета
		|		ИНАЧЕ ПраваНаОтпуска.ДатаНачалаРасчета
		|	КОНЕЦ КАК ДатаНачалаРасчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПраваНаОтпуска.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(НачальныеОстатки.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1))
		|			ТОГДА ЕСТЬNULL(ПраваНаОтпуска.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1))
		|		ИНАЧЕ ЕСТЬNULL(НачальныеОстатки.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТСотрудникиСДаннымиДляРасчета
		|ИЗ
		|	ВТДействующиеПраваНаОтпуска КАК ПраваНаОтпуска
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНачальныеОстатки КАК НачальныеОстатки
		|		ПО ПраваНаОтпуска.Сотрудник = НачальныеОстатки.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = НачальныеОстатки.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСДаннымиДляРасчета.Сотрудник КАК Сотрудник,
		|	СотрудникиСДаннымиДляРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	СотрудникиСДаннымиДляРасчета.Используется КАК Используется,
		|	СотрудникиСДаннымиДляРасчета.ДатаНачалаРасчета КАК ДатаНачалаРасчета,
		|	СотрудникиСДаннымиДляРасчета.ДатаОкончанияРасчета КАК ДатаОкончанияРасчета,
		|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТСотрудникиПолнаяТаблицаДляРасчета
		|ИЗ
		|	ВТСотрудникиСДаннымиДляРасчета КАК СотрудникиСДаннымиДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО СотрудникиСДаннымиДляРасчета.Сотрудник = ТаблицаДанных.Сотрудник";
		
	Если РассчитатьПравоНаОтпускаВсемСотрудникам Тогда
		Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ТаблицаДанных.Сотрудник КАК Сотрудник,
			|	ТаблицаДанных.ДатаОкончания КАК ДатаОстатков,
			|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеСотрудники
			|ИЗ
			|	ВТТаблицаДанных КАК ТаблицаДанных
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ДатаОстатков
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СотрудникиПолнаяТаблица.Сотрудник КАК Сотрудник,
			|	СотрудникиПолнаяТаблица.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	СотрудникиПолнаяТаблица.ДатаНачалаРасчета КАК ДатаНачала,
			|	СотрудникиПолнаяТаблица.ДатаОкончанияРасчета КАК ДатаОкончания,
			|	СотрудникиПолнаяТаблица.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеВидыОтпусковСотрудников
			|ИЗ
			|	ВТСотрудникиПолнаяТаблицаДляРасчета КАК СотрудникиПолнаяТаблица";
			
	Иначе
		Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
			|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	МАКСИМУМ(ЗаработанныеПраваНаОтпуска.Период) КАК Период
			|ПОМЕСТИТЬ ВТПоследниеРассчитанныеЗаписи
			|ИЗ
			|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПолнаяТаблицаДляРасчета КАК ПроверяемыеСотрудники
			|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = ПроверяемыеСотрудники.Сотрудник
			|			И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = ПроверяемыеСотрудники.ВидЕжегодногоОтпуска
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаработанныеПраваНаОтпуска.Сотрудник,
			|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеСотрудники.Сотрудник КАК Сотрудник,
			|	ПроверяемыеСотрудники.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ПроверяемыеСотрудники.Используется КАК Используется,
			|	ВЫБОР
			|		КОГДА ЗаработанныеПраваНаОтпуска.Период ЕСТЬ NULL
			|			ТОГДА ПроверяемыеСотрудники.ДатаНачалаРасчета
			|		КОГДА ЗаработанныеПраваНаОтпуска.Период > ПроверяемыеСотрудники.ДатаНачалаРасчета
			|			ТОГДА ЗаработанныеПраваНаОтпуска.Период
			|		ИНАЧЕ ПроверяемыеСотрудники.ДатаНачалаРасчета
			|	КОНЕЦ КАК ДатаНачала,
			|	ПроверяемыеСотрудники.ДатаОкончанияРасчета КАК ДатаОкончания,
			|	ПроверяемыеСотрудники.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТСотрудникиРегистр
			|ИЗ
			|	ВТСотрудникиПолнаяТаблицаДляРасчета КАК ПроверяемыеСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеРассчитанныеЗаписи КАК ЗаработанныеПраваНаОтпуска
			|		ПО ПроверяемыеСотрудники.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
			|			И ПроверяемыеСотрудники.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеСотрудники.Сотрудник КАК Сотрудник,
			|	ПроверяемыеСотрудники.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ПроверяемыеСотрудники.ДатаНачала КАК ДатаНачала,
			|	ПроверяемыеСотрудники.ДатаОкончания КАК ДатаОкончания,
			|	ПроверяемыеСотрудники.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТРегистрНеРассчитанныеСотрудники
			|ИЗ
			|	ВТСотрудникиРегистр КАК ПроверяемыеСотрудники
			|ГДЕ
			|	(ПроверяемыеСотрудники.ДатаНачала < ПроверяемыеСотрудники.ДатаОкончания
			|			ИЛИ НЕ ПроверяемыеСотрудники.Используется
			|				И ПроверяемыеСотрудники.ДатаНачала > ПроверяемыеСотрудники.ДатаОкончания
			|			ИЛИ ПроверяемыеСотрудники.ЭтоРасчетПриУвольнении)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрНеРассчитанныеСотрудники.Сотрудник КАК Сотрудник,
			|	ТаблицаДанных.ДатаОкончания КАК ДатаОстатков,
			|	РегистрНеРассчитанныеСотрудники.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеСотрудники
			|ИЗ
			|	ВТРегистрНеРассчитанныеСотрудники КАК РегистрНеРассчитанныеСотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
			|		ПО РегистрНеРассчитанныеСотрудники.Сотрудник = ТаблицаДанных.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ДатаОстатков
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СотрудникиРегистр.Сотрудник КАК Сотрудник,
			|	СотрудникиРегистр.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	СотрудникиРегистр.ДатаНачала КАК ДатаНачала,
			|	СотрудникиРегистр.ДатаОкончания КАК ДатаОкончания,
			|	СотрудникиРегистр.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеВидыОтпусковСотрудников
			|ИЗ
			|	ВТРегистрНеРассчитанныеСотрудники КАК СотрудникиРегистр
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеРассчитанныеСотрудники КАК НеРассчитанныеСотрудники
			|		ПО СотрудникиРегистр.Сотрудник = НеРассчитанныеСотрудники.Сотрудник";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТТаблицаДанных");
	ИменаВТ.Добавить("ВТПраваНаОтпуска");
	ИменаВТ.Добавить("ВТНачальныеОстатки");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
КонецПроцедуры

// Функция собирает из ИБ все данные, необходимые для расчета остатков, и создает следующие ВТ
// 	- ВТСписокСотрудников
// 	- ВТИсходныеДанные
// 	- ВТВидыОтпусков
// 	- ВТНачальныеОстатки
// 	- ВТОтклонения
// 	- ВТПраваНаОтпуска
// 	- ВТФактическиеОтпуска.
//
Процедура СоздатьВТИсходныхДанныхДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц)
	
	// Для расчета права на отпуск необходимо собрать следующие данные:
	//	0. В МенеджерВременныхТаблиц должна быть таблица ВТНеРассчитанныеСотрудники,
	//     в которой содержатся все сотрудники, для которых нужно считать право на отпуск;
	//	1. Даты приема и увольнения сотрудников;
	//	2. Начальные остатки;
	//	3. Отсутствия, увеличивающие рабочий год;
	//	4. Изменения права на отпуск.
	
	// Для расчета остатков отпусков необходимо собрать следующие данные:
	//	1. Посчитанное право на отпуска;
	//	2. Начальные остатки;
	//	3. Фактические отпуска.
	

	// заполним таблицу "прерывающих" периодов
	ОтборПоПериодам = Перечисления.СостоянияСотрудника.СостоянияПрерывающиеПравоНаОтпуск();
	ПериодыПрерывающиеПравоНаОтпуск = СостоянияСотрудников.СостоянияСотрудников(ТаблицаДанных.ВыгрузитьКолонку("Сотрудник"), ОтборПоПериодам);
	
	// Для вывода справки по отпуску необходимо собирать сведения для расчета права на отпуск даже если в ИБ хранятся
	// актуальные сведения о праве.
	
	ОтпускаБезСохраненияЗарплаты = ОстаткиОтпусковКлиентСервер.ОтпускаБезСохраненияОплаты();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ПериодыПрерывающиеПравоНаОтпуск", ПериодыПрерывающиеПравоНаОтпуск);
	Запрос.УстановитьПараметр("ОтпускаБезСохраненияЗарплаты", ОтпускаБезСохраненияЗарплаты);
	Запрос.УстановитьПараметр("ОтпускПоУходуЗаРебенком", Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	
	// Формируем временную таблицу по переданным в функцию данным.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ЭтоЗапланированныйОтпуск КАК ЭтоЗапланированныйОтпуск,
	|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаДанных.ДатаНачала КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончания КАК ДатаОкончанияПериода,
	|	ТаблицаДанных.ТекущийРегистратор КАК ТекущийРегистратор,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска КАК Справочник.ВидыОтпусков) КАК ОтборПоВидуЕжегодногоОтпуска
	|ПОМЕСТИТЬ ВТТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки,
	|	Сотрудник,
	|	ДатаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СостоянияСотрудников.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(СостоянияСотрудников.Начало, ДЕНЬ) КАК ДатаНачалаОтсутствия,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА СостоянияСотрудников.Состояние = &ОтпускПоУходуЗаРебенком
	|							И СостоянияСотрудников.ОкончаниеПредположительно <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА КОНЕЦПЕРИОДА(СостоянияСотрудников.ОкончаниеПредположительно, ДЕНЬ)
	|					ИНАЧЕ СостоянияСотрудников.Окончание
	|				КОНЕЦ
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СостоянияСотрудников.Окончание, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияОтсутствия,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.Состояние В (&ОтпускаБезСохраненияЗарплаты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	СостоянияСотрудников.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТПериодыПрерывающиеПравоНаОтпуск
	|ИЗ
	|	&ПериодыПрерывающиеПравоНаОтпуск КАК СостоянияСотрудников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	Сотрудники.ДатаОстатков КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТОписаниеФильтраСоздатьВТИмяРегистра
	|ИЗ
	|	ВТНеРассчитанныеСотрудники КАК Сотрудники";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, "ВТТаблицаДанных", "Сотрудник,ДатаОстатков");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь,
		"ДатаПриема,ДатаУвольнения,ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,Пол,КраткосрочныйТрудовойДоговор");
		
	ОписательВременныхТаблиц = УчетРабочегоВремениРасширенный.ОписательВременныхТаблицДляСоздатьВТКалендарноеВремяСотрудников(
		МенеджерВременныхТаблиц, "ВТТаблицаДанных", "Сотрудник", "ДатаНачалаПериода", "ДатаОкончанияПериода");
	УчетРабочегоВремениРасширенный.СоздатьВТКалендарноеВремяСотрудников(ОписательВременныхТаблиц, Ложь);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОписаниеФильтраСоздатьВТИмяРегистра","Сотрудник");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПоложенныеВидыЕжегодныхОтпусков",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПоложенныеВидыЕжегодныхОтпусков");
		
	СоздатьВТСотрудникиТребовавшиеПереквалификациюДней(МенеджерВременныхТаблиц, "ВТОписаниеФильтраСоздатьВТИмяРегистра", "ВТКадровыеДанныеСотрудников");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТДатаНачальныхОстатковПоВидамОтпусков
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	|		ПО ТаблицаДанных.Сотрудник = НачальныеОстаткиОтпусков.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДатаНачальныхОстатковПоВидамОтпусков.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТДатаНачальныхОстатковПоВидамОтпусков.ДатаНачальногоОстатка) КАК ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТДатаНачальныхОстатков
	|ИЗ
	|	ВТДатаНачальныхОстатковПоВидамОтпусков КАК ВТДатаНачальныхОстатковПоВидамОтпусков
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДатаНачальныхОстатковПоВидамОтпусков.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ ФактическиеОтпуска.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.Количество КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.Период КАК ДатаВхожденияВРабочийГод,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.Компенсация
	|			ТОГДА ФактическиеОтпуска.ДатаОкончания
	|		ИНАЧЕ ФактическиеОтпуска.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация КАК Компенсация,
	|	ФактическиеОтпуска.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ФактическиеОтпуска.Регистратор) КАК ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации КАК ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодСИзДокумента,
	|	КОНЕЦПЕРИОДА(ФактическиеОтпуска.РабочийПериодПо, ДЕНЬ) КАК РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.Основание КАК ОснованиеИзДокумента
	|ПОМЕСТИТЬ ВТВсеФактическиеОтпуска
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК ДатаНачальныхОстатков
	|			ПО ФактическиеОтпуска.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|				И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ДатаНачальныхОстатков.ВидЕжегодногоОтпуска
	|				И ФактическиеОтпуска.Период < ДатаНачальныхОстатков.ДатаНачальногоОстатка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ПО ФактическиеОтпуска.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ПО ТаблицаДанных.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаДанных.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаДанных.ДатаДокумента >= ФактическиеОтпуска.Период
	|				КОГДА НЕ ТаблицаДанных.ЭтоРасчетПриУвольнении
	|						И НЕ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|						И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаДанных.ДатаОстатков >= ФактическиеОтпуска.Период
	|			КОНЕЦ)
	|			И (НЕ(ТаблицаДанных.ЭтоРасчетПриУвольнении
	|					И ФактическиеОтпуска.Регистратор ССЫЛКА Документ.Увольнение))
	|			И ТаблицаДанных.ТекущийРегистратор <> ФактическиеОтпуска.Регистратор
	|			И (ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска)
	|			И (ТаблицаДанных.ДатаНачалаПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ НЕ ТаблицаДанных.ДатаНачалаПериода = ВЫБОР
	|						КОГДА ФактическиеОтпуска.Компенсация
	|							ТОГДА ФактическиеОтпуска.ДатаОкончания
	|						ИНАЧЕ ФактическиеОтпуска.ДатаНачала
	|					КОНЕЦ)
	|			И (ТаблицаДанных.ДатаОкончанияПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ НЕ ТаблицаДанных.ДатаОкончанияПериода = ФактическиеОтпуска.ДатаОкончания)
	|ГДЕ
	|	ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактическиеОтпускаСторно.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпускаСторно.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпускаСторно.КоличествоДнейОтпуска КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпускаСторно.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпускаСторно.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСторноЗаписи
	|ИЗ
	|	ВТВсеФактическиеОтпуска КАК ФактическиеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеФактическиеОтпуска КАК ФактическиеОтпускаСторно
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаСторно.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаСторно.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачалаОтпуска = ФактическиеОтпускаСторно.ДатаНачалаОтпуска
	|			И ФактическиеОтпуска.ДатаОкончанияОтпуска = ФактическиеОтпускаСторно.ДатаОкончанияОтпуска
	|			И (ФактическиеОтпуска.КоличествоДнейОтпуска = -ФактическиеОтпускаСторно.КоличествоДнейОтпуска)
	|			И (ФактическиеОтпускаСторно.КоличествоДнейОтпуска < 0)
	|			И ФактическиеОтпуска.Документ <> ФактическиеОтпускаСторно.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	СУММА(ФактическиеОтпуска.КоличествоДнейОтпуска) КАК КоличествоДнейОтпуска
	|ПОМЕСТИТЬ ВТФактическиеОтпускаРезультатСторнирования
	|ИЗ
	|	ВТВсеФактическиеОтпуска КАК ФактическиеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическиеОтпускаСторноЗаписи КАК СторноЗаписи
	|		ПО ФактическиеОтпуска.Сотрудник = СторноЗаписи.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = СторноЗаписи.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачалаОтпуска = СторноЗаписи.ДатаНачалаОтпуска
	|			И ФактическиеОтпуска.ДатаОкончанияОтпуска = СторноЗаписи.ДатаОкончанияОтпуска
	|			И (ФактическиеОтпуска.КоличествоДнейОтпуска = -СторноЗаписи.КоличествоДнейОтпуска
	|				ИЛИ ФактическиеОтпуска.КоличествоДнейОтпуска = СторноЗаписи.КоличествоДнейОтпуска)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска КАК КоличествоДнейОтпуска,
	|	МАКСИМУМ(ФактическиеОтпуска.ДатаРегистрации) КАК ДатаРегистрации
	|ПОМЕСТИТЬ ВТФактическиеОтпускаДатыРегистрации
	|ИЗ
	|	ВТВсеФактическиеОтпуска КАК ФактическиеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическиеОтпускаРезультатСторнирования КАК РезультатСторнирования
	|		ПО ФактическиеОтпуска.Сотрудник = РезультатСторнирования.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = РезультатСторнирования.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачалаОтпуска = РезультатСторнирования.ДатаНачалаОтпуска
	|			И ФактическиеОтпуска.ДатаОкончанияОтпуска = РезультатСторнирования.ДатаОкончанияОтпуска
	|			И ФактическиеОтпуска.КоличествоДнейОтпуска = РезультатСторнирования.КоличествоДнейОтпуска
	|			И (РезультатСторнирования.КоличествоДнейОтпуска > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки КАК ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков КАК ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод КАК ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация КАК Компенсация,
	|	ФактическиеОтпуска.Документ КАК Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента КАК ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации КАК ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента КАК РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента КАК РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента КАК ОснованиеИзДокумента
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	ВТВсеФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОтпускаРезультатСторнирования КАК РезультатСторнирования
	|		ПО ФактическиеОтпуска.Сотрудник = РезультатСторнирования.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = РезультатСторнирования.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачалаОтпуска = РезультатСторнирования.ДатаНачалаОтпуска
	|			И ФактическиеОтпуска.ДатаОкончанияОтпуска = РезультатСторнирования.ДатаОкончанияОтпуска
	|			И (ФактическиеОтпуска.КоличествоДнейОтпуска = -РезультатСторнирования.КоличествоДнейОтпуска
	|				ИЛИ ФактическиеОтпуска.КоличествоДнейОтпуска = РезультатСторнирования.КоличествоДнейОтпуска)
	|ГДЕ
	|	РезультатСторнирования.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента
	|ИЗ
	|	ВТВсеФактическиеОтпуска КАК ФактическиеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическиеОтпускаДатыРегистрации КАК ДатыРегистрации
	|		ПО ФактическиеОтпуска.Сотрудник = ДатыРегистрации.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ДатыРегистрации.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачалаОтпуска = ДатыРегистрации.ДатаНачалаОтпуска
	|			И ФактическиеОтпуска.ДатаОкончанияОтпуска = ДатыРегистрации.ДатаОкончанияОтпуска
	|			И ФактическиеОтпуска.КоличествоДнейОтпуска = ДатыРегистрации.КоличествоДнейОтпуска
	|			И ФактическиеОтпуска.ДатаРегистрации = ДатыРегистрации.ДатаРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ПоложенныеВидыЕжегодныхОтпусков.Период КАК Период,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.Используется
	|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДнейОтпускаВГод,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка < ПоложенныеВидыЕжегодныхОтпусков.Период
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПравоДоВводаОстатка,
	|	ПоложенныеВидыЕжегодныхОтпусков.Используется КАК Используется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПоложенныеВидыЕжегодныхОтпусков.Регистратор) КАК ПредставлениеДокумента,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись КАК ВторичнаяЗапись,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется КАК ПересчетНеТребуется,
	|	НачальныеОстаткиПоВидам.ДатаНачальногоОстатка КАК ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТВсеПраваНаОтпуска
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СотрудникиБезПраваНаОтпуск.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК НачальныеОстаткиПоВидам
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = НачальныеОстаткиПоВидам.Сотрудник
	|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = НачальныеОстаткиПоВидам.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО (СотрудникиБезПраваНаОтпуск.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(ПраваНаОтпуска.Период) КАК Период
	|ПОМЕСТИТЬ ВТУказателиСрезПоследнихПравДоВводаОстатка
	|ИЗ
	|	ВТВсеПраваНаОтпуска КАК ПраваНаОтпуска
	|ГДЕ
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ПраваНаОтпуска.ДатаНачальногоОстатка > ПраваНаОтпуска.Период
	|			ТОГДА ПраваНаОтпуска.ДатаНачальногоОстатка
	|		ИНАЧЕ ПраваНаОтпуска.Период
	|	КОНЕЦ КАК Период,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка КАК ЭтоПравоДоВводаОстатка,
	|	ПраваНаОтпуска.Используется КАК Используется,
	|	ПраваНаОтпуска.Регистратор КАК Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента КАК ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись КАК ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется КАК ПересчетНеТребуется
	|ПОМЕСТИТЬ ВТСрезПоследнихПравДоВводаОстатка
	|ИЗ
	|	ВТВсеПраваНаОтпуска КАК ПраваНаОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиСрезПоследнихПравДоВводаОстатка КАК ВТУказателиСрезПоследнихПравДоВводаОстатка
	|		ПО ПраваНаОтпуска.Сотрудник = ВТУказателиСрезПоследнихПравДоВводаОстатка.Сотрудник
	|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = ВТУказателиСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска
	|			И ПраваНаОтпуска.Период = ВТУказателиСрезПоследнихПравДоВводаОстатка.Период
	|ГДЕ
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиСПереквалификацией.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиСПереквалификацией
	|ИЗ
	|	ВТСотрудникиТребовавшиеПереквалификациюДней КАК СотрудникиСПереквалификацией
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(СотрудникиБезПраваНаОтпуск.Сотрудник КАК Справочник.Сотрудники).Наименование КАК СотрудникНаименование,
	|	СотрудникиБезПраваНаОтпуск.ДатаОстатков КАК ДатаОстатков,
	|	СотрудникиБезПраваНаОтпуск.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL
	|				ИЛИ ДатаНачальныхОстатков.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеныНачальныеОстатки,
	|	ВЫБОР
	|		КОГДА ВТСотрудникиСПереквалификацией.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТребуетПереквалификацииДней
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатков КАК ДатаНачальныхОстатков
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСПереквалификацией КАК ВТСотрудникиСПереквалификацией
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ВТСотрудникиСПереквалификацией.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники).Наименование КАК СотрудникНаименование,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора)
	|			ТОГДА ВЫБОР
	|					КОГДА ТекущиеКадровыеДанныеСотрудников.КраткосрочныйТрудовойДоговор
	|						ТОГДА ЕСТЬNULL(КалендарноеВремяСотрудников.РабочихДнейВПериоде, 0)
	|					ИНАЧЕ ЕСТЬNULL(КалендарноеВремяСотрудников.КалендарныхДнейВПериодеБезУчетаПраздников, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|					ТОГДА ЕСТЬNULL(КалендарноеВремяСотрудников.РабочихДнейВПериоде, 0)
	|				ИНАЧЕ ЕСТЬNULL(КалендарноеВремяСотрудников.КалендарныхДнейВПериодеБезУчетаПраздников, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДнейВПериоде,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема ЕСТЬ NULL
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(ДатаНачальныхОстатков.ДатаНачальногоОстатка, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|	КОНЕЦ КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникУволен,
	|	ВЫБОР
	|		КОГДА ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL
	|				ИЛИ ДатаНачальныхОстатков.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеныНачальныеОстатки,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.Пол КАК Пол,
	|	ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска КАК ОтборПоВидуЕжегодногоОтпуска
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ТаблицаДанных.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарноеВремяСотрудников КАК КалендарноеВремяСотрудников
	|		ПО ТаблицаДанных.Сотрудник = КалендарноеВремяСотрудников.Сотрудник
	|			И ТаблицаДанных.ДатаНачалаПериода = КалендарноеВремяСотрудников.ДатаНачала
	|			И (ТаблицаДанных.ДатаОкончанияПериода = НАЧАЛОПЕРИОДА(КалендарноеВремяСотрудников.ДатаОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатков КАК ДатаНачальныхОстатков
	|		ПО ТаблицаДанных.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.НаименованиеПолное = """"
	|			ТОГДА ВидыЕжегодныхОтпусков.Наименование
	|		ИНАЧЕ ВидыЕжегодныхОтпусков.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ВидыЕжегодныхОтпусков.КоличествоДнейВГод КАК КоличествоДнейВГод,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновнойОтпуск,
	|	ВидыЕжегодныхОтпусков.НакопительныйОтпуск КАК НакопительныйОтпуск
	|ПОМЕСТИТЬ ВТВидыОтпусков
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыЕжегодныхОтпусков
	|ГДЕ
	|	НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления
	|	И ВидыЕжегодныхОтпусков.ОтпускЯвляетсяЕжегодным
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска = &ОсновнойОтпуск
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	НачальныеОстаткиОтпусков.КоличествоДней КАК КоличествоДней,
	|	НачальныеОстаткиОтпусков.РабочийГодНачало КАК РабочийГодНачало,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.РабочийГодНачало <= НачальныеОстаткиОтпусков.РабочийГодОкончание
	|			ТОГДА НачальныеОстаткиОтпусков.РабочийГодОкончание
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НачальныеОстаткиОтпусков.РабочийГодНачало, МЕСЯЦ, 12), ДЕНЬ, -1)
	|	КОНЕЦ КАК РабочийГодОкончание,
	|	НачальныеОстаткиОтпусков.ДатаОстатка КАК ДатаОстатка,
	|	НачальныеОстаткиОтпусков.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТНачальныеОстатки
	|ИЗ
	|	ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК ДатаНачальныхОстатков
	|			ПО НачальныеОстаткиОтпусков.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|				И НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска = ДатаНачальныхОстатков.ВидЕжегодногоОтпуска
	|				И НачальныеОстаткиОтпусков.ДатаОстатка = ДатаНачальныхОстатков.ДатаНачальногоОстатка
	|				И (НачальныеОстаткиОтпусков.РабочийГодНачало <> ДАТАВРЕМЯ(1, 1, 1))
	|				И (НачальныеОстаткиОтпусков.РабочийГодОкончание <> ДАТАВРЕМЯ(1, 1, 1))
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = НачальныеОстаткиОтпусков.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА NULL
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия, ДОБАВИТЬКДАТЕ(ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия, ДЕНЬ, 1), ДЕНЬ)
	|	КОНЕЦ КАК КоличествоДнейОтсутствия,
	|	ВЫБОР
	|		КОГДА ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА NULL
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия, ДОБАВИТЬКДАТЕ(ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия, ДЕНЬ, 1), ДЕНЬ)
	|	КОНЕЦ КАК КоличествоДнейПродления,
	|	ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
	|	ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия КАК ДатаОкончанияОтсутствия,
	|	ПериодыПрерывающиеПравоНаОтпуск.ЯвляетсяОтпускомБезСохраненияЗарплаты КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	ПериодыПрерывающиеПравоНаОтпуск.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТОтклонения
	|ИЗ
	|	ВТПериодыПрерывающиеПравоНаОтпуск КАК ПериодыПрерывающиеПравоНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ПО ПериодыПрерывающиеПравоНаОтпуск.Сотрудник = СотрудникиБезПраваНаОтпуск.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ПраваНаОтпуска.Период, ДЕНЬ) КАК ДатаДействия,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ПраваНаОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.Используется КАК Предоставляется,
	|	ПраваНаОтпуска.Регистратор КАК Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента КАК ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись КАК ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется КАК ПересчетНеТребуется
	|ПОМЕСТИТЬ ВТПраваНаОтпуска
	|ИЗ
	|	ВТВсеПраваНаОтпуска КАК ПраваНаОтпуска
	|ГДЕ
	|	НЕ ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСрезПоследнихПравДоВводаОстатка.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВТСрезПоследнихПравДоВводаОстатка.Период, ДЕНЬ),
	|	ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска,
	|	ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ВТСрезПоследнихПравДоВводаОстатка.КоличествоДнейОтпускаВГод,
	|	ВТСрезПоследнихПравДоВводаОстатка.Используется,
	|	ВТСрезПоследнихПравДоВводаОстатка.Регистратор,
	|	ВТСрезПоследнихПравДоВводаОстатка.ПредставлениеДокумента,
	|	ВТСрезПоследнихПравДоВводаОстатка.ВторичнаяЗапись,
	|	ВТСрезПоследнихПравДоВводаОстатка.ПересчетНеТребуется
	|ИЗ
	|	ВТСрезПоследнихПравДоВводаОстатка КАК ВТСрезПоследнихПравДоВводаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереквалификацияДней.Сотрудник КАК Сотрудник,
	|	ПереквалификацияДней.ДатаНачала КАК ДатаНачала,
	|	ПереквалификацияДней.ДатаОкончания КАК ДатаОкончания,
	|	ПереквалификацияДней.КраткосрочныйДоговор КАК КраткосрочныйДоговор,
	|	ПереквалификацияДней.СезонныйДоговор КАК СезонныйДоговор
	|ПОМЕСТИТЬ ВТПереквалификацияДней
	|ИЗ
	|	ВТСотрудникиТребовавшиеПереквалификациюДней КАК ПереквалификацияДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсутствияСдвигающиеРабочийГод.Сотрудник КАК Сотрудник,
	|	ОтсутствияСдвигающиеРабочийГод.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ОтсутствияСдвигающиеРабочийГод.Состояние КАК Состояние,
	|	ОтсутствияСдвигающиеРабочийГод.ДатаОстатка КАК ДатаОстатка,
	|	ВЫБОР
	|		КОГДА ОтсутствияСдвигающиеРабочийГод.Состояние В (&ОтпускаБезСохраненияЗарплаты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	ОтсутствияСдвигающиеРабочийГод.КоличествоДней КАК КоличествоДней
	|ПОМЕСТИТЬ ВТНачальныеОстаткиОтсутствия
	|ИЗ
	|	РегистрСведений.ОтсутствияСдвигающиеРабочийГод КАК ОтсутствияСдвигающиеРабочийГод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК ДатаНачальныхОстатковПоВидамОтпусков
	|		ПО ОтсутствияСдвигающиеРабочийГод.Сотрудник = ДатаНачальныхОстатковПоВидамОтпусков.Сотрудник
	|			И ОтсутствияСдвигающиеРабочийГод.ВидЕжегодногоОтпуска = ДатаНачальныхОстатковПоВидамОтпусков.ВидЕжегодногоОтпуска
	|			И ОтсутствияСдвигающиеРабочийГод.ДатаОстатка = ДатаНачальныхОстатковПоВидамОтпусков.ДатаНачальногоОстатка";
	
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	Запрос.Выполнить();
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТДатаНачальныхОстатковПоВидамОтпусков");
	ИменаВТ.Добавить("ВТДатаНачальныхОстатков");
	ИменаВТ.Добавить("ВТВсеФактическиеОтпуска");
	ИменаВТ.Добавить("ВТФактическиеОтпускаСторноЗаписи");
	ИменаВТ.Добавить("ВТФактическиеОтпускаРезультатСторнирования");
	ИменаВТ.Добавить("ВТФактическиеОтпускаДатыРегистрации");
	ИменаВТ.Добавить("ВТВсеПраваНаОтпуска");
	ИменаВТ.Добавить("ВТУказателиСрезПоследнихПравДоВводаОстатка");
	ИменаВТ.Добавить("ВТСрезПоследнихПравДоВводаОстатка");
	ИменаВТ.Добавить("ВТСотрудникиСПереквалификацией");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ)
	
КонецПроцедуры

// Выгружает ВТ из СоздатьВТИсходныхДанныхДляРасчетаОстатков() в структуру с таблицами значений.
//
Функция ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц, ОтраслевыеОсобенности = Неопределено)
	
	СоздатьВТИсходныхДанныхДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.СотрудникНаименование КАК СотрудникНаименование,
	|	Сотрудники.ДатаОстатков КАК ДатаОстатков,
	|	Сотрудники.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	Сотрудники.ДатаПриема КАК ДатаПриема,
	|	Сотрудники.ДатаУвольнения КАК ДатаУвольнения,
	|	Сотрудники.ВведеныНачальныеОстатки КАК ВведеныНачальныеОстатки,
	|	Сотрудники.ТребуетПереквалификацииДней КАК ТребуетПереквалификацииДней
	|ИЗ
	|	ВТСписокСотрудников КАК Сотрудники
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.СотрудникНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.СотрудникНаименование КАК СотрудникНаименование,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ТаблицаДанных.КоличествоДнейВПериоде КАК КоличествоДнейВПериоде,
	|	ТаблицаДанных.ДатаПриема КАК ДатаПриема,
	|	ТаблицаДанных.ДатаУвольнения КАК ДатаУвольнения,
	|	ТаблицаДанных.СотрудникУволен КАК СотрудникУволен,
	|	ТаблицаДанных.ВведеныНачальныеОстатки КАК ВведеныНачальныеОстатки,
	|	ТаблицаДанных.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТаблицаДанных.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТаблицаДанных.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТаблицаДанных.Пол КАК Пол,
	|	ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска КАК ОтборПоВидуЕжегодногоОтпуска
	|ИЗ
	|	ВТИсходныеДанные КАК ТаблицаДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДанных.СотрудникНаименование,
	|	ТаблицаДанных.ДатаОстатков,
	|	ТаблицаДанных.ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.ПриоритетВидаЕжегодногоОтпуска КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ВидыОтпусков.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ВидыОтпусков.КоличествоДнейВГод КАК КоличествоДнейВГод,
	|	ВидыОтпусков.ОсновнойОтпуск КАК ОсновнойОтпуск,
	|	ВидыОтпусков.НакопительныйОтпуск КАК НакопительныйОтпуск
	|ИЗ
	|	ВТВидыОтпусков КАК ВидыОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОтпусков.ПриоритетВидаЕжегодногоОтпуска,
	|	ВидыОтпусков.ВидЕжегодногоОтпускаНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальныеОстатки.Сотрудник КАК Сотрудник,
	|	НачальныеОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	НачальныеОстатки.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	НачальныеОстатки.ПриоритетВидаЕжегодногоОтпуска КАК ПриоритетВидаЕжегодногоОтпуска,
	|	НачальныеОстатки.КоличествоДней КАК КоличествоДней,
	|	НачальныеОстатки.РабочийГодНачало КАК РабочийГодНачало,
	|	НачальныеОстатки.РабочийГодОкончание КАК РабочийГодОкончание,
	|	НачальныеОстатки.ДатаОстатка КАК ДатаОстатка,
	|	НачальныеОстатки.Регистратор КАК Регистратор
	|ИЗ
	|	ВТНачальныеОстатки КАК НачальныеОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачальныеОстатки.Сотрудник,
	|	НачальныеОстатки.ПриоритетВидаЕжегодногоОтпуска,
	|	НачальныеОстатки.ВидЕжегодногоОтпускаНаименование,
	|	НачальныеОстатки.РабочийГодНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальныеОстаткиОтсутствия.Сотрудник КАК Сотрудник,
	|	НачальныеОстаткиОтсутствия.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	НачальныеОстаткиОтсутствия.Состояние КАК Состояние,
	|	НачальныеОстаткиОтсутствия.ДатаОстатка КАК ДатаОстатка,
	|	НачальныеОстаткиОтсутствия.ЯвляетсяОтпускомБезСохраненияЗарплаты КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	НачальныеОстаткиОтсутствия.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	ВТНачальныеОстаткиОтсутствия КАК НачальныеОстаткиОтсутствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отклонения.Сотрудник КАК Сотрудник,
	|	Отклонения.КоличествоДнейОтсутствия КАК КоличествоДнейОтсутствия,
	|	Отклонения.КоличествоДнейПродления КАК КоличествоДнейПродления,
	|	Отклонения.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
	|	Отклонения.ДатаОкончанияОтсутствия КАК ДатаОкончанияОтсутствия,
	|	Отклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	Отклонения.Состояние КАК Состояние
	|ИЗ
	|	ВТОтклонения КАК Отклонения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отклонения.Сотрудник,
	|	Отклонения.ДатаНачалаОтсутствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	ПраваНаОтпуска.ДатаДействия КАК ДатаДействия,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.ПриоритетВидаЕжегодногоОтпуска КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.Предоставляется КАК Предоставляется,
	|	ПраваНаОтпуска.Регистратор КАК Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента КАК ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись КАК ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется КАК ПересчетНеТребуется
	|ИЗ
	|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ПриоритетВидаЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.ДатаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереквалификацияДней.Сотрудник КАК Сотрудник,
	|	ПереквалификацияДней.ДатаНачала КАК ДатаНачала,
	|	ПереквалификацияДней.ДатаОкончания КАК ДатаОкончания,
	|	ПереквалификацияДней.КраткосрочныйДоговор КАК КраткосрочныйДоговор,
	|	ПереквалификацияДней.СезонныйДоговор КАК СезонныйДоговор
	|ИЗ
	|	ВТПереквалификацияДней КАК ПереквалификацияДней
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачала УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки КАК ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков КАК ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.ПриоритетВидаЕжегодногоОтпуска КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод КАК ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация КАК Компенсация,
	|	ФактическиеОтпуска.Документ КАК Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента КАК ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации КАК ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента КАК РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента КАК РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента КАК ОснованиеИзДокумента
	|ИЗ
	|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.ПриоритетВидаЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КоличествоПакетов = МассивРезультатов.Количество();
	
	СотрудникиБезПраваНаОтпуск	= МассивРезультатов[КоличествоПакетов-9].Выгрузить();
	
	Данные						= МассивРезультатов[КоличествоПакетов-8].Выгрузить();
	
	ВидыОтпусков				= МассивРезультатов[КоличествоПакетов-7].Выгрузить();
	
	НачальныеОстатки			= МассивРезультатов[КоличествоПакетов-6].Выгрузить();
	НачальныеОстатки.Индексы.Добавить("Сотрудник");
	НачальныеОстатки.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	
	НачальныеОстаткиОтсутствия	= МассивРезультатов[КоличествоПакетов-5].Выгрузить();
	НачальныеОстаткиОтсутствия.Индексы.Добавить("Сотрудник");
	НачальныеОстаткиОтсутствия.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	
	Отклонения					= МассивРезультатов[КоличествоПакетов-4].Выгрузить();
	Отклонения.Индексы.Добавить("Сотрудник");
	
	ПраваНаЕжегодныйОтпуск		= МассивРезультатов[КоличествоПакетов-3].Выгрузить();
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("Сотрудник");
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	
	ПереквалификацияДней = МассивРезультатов[КоличествоПакетов-2].Выгрузить();
	ПереквалификацияДней.Индексы.Добавить("Сотрудник");
	
	ФактическиеОтпуска			= МассивРезультатов[КоличествоПакетов-1].Выгрузить();
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодС",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодПо",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейПрошлыхЛет",	Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейАвансом",		Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ОсталосьСписать",				Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ФактическиеОтпуска.Индексы.Добавить("Сотрудник");
	ФактическиеОтпуска.Индексы.Добавить("ДатаОстатков");
	ФактическиеОтпуска.Индексы.Добавить("ИндексСтроки");
	ФактическиеОтпуска.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ДобавитьОсобенностиРасчетаОстатковОтпусков(ОтраслевыеОсобенности,
			СотрудникиБезПраваНаОтпуск.Найти(Истина, "ЭтоРасчетПриУвольнении") <> Неопределено);
	КонецЕсли;
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("СотрудникиБезПраваНаОтпуск", СотрудникиБезПраваНаОтпуск);
	ВозвращаемаяСтруктура.Вставить("Данные", Данные);
	ВозвращаемаяСтруктура.Вставить("ВидыОтпусков", ВидыОтпусков);
	ВозвращаемаяСтруктура.Вставить("НачальныеОстатки", НачальныеОстатки);
	ВозвращаемаяСтруктура.Вставить("НачальныеОстаткиОтсутствия", НачальныеОстаткиОтсутствия);
	ВозвращаемаяСтруктура.Вставить("Отклонения", Отклонения);
	ВозвращаемаяСтруктура.Вставить("Права", ПраваНаЕжегодныйОтпуск);
	ВозвращаемаяСтруктура.Вставить("ПереквалификацияДней", ПереквалификацияДней);
	ВозвращаемаяСтруктура.Вставить("ФактическиеОтпуска", ФактическиеОтпуска);
	ВозвращаемаяСтруктура.Вставить("ОтраслевыеОсобенности", ОтраслевыеОсобенности);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Функция считает заработанное право на ежегодные отпуска.
//
Функция ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ДатаНачала и ДатаОкончания - границы рабочего года.
	// Период - дата рабочего месяца.
	// КоличествоДней - количество дней отпуска, которые сотрудник заработал с даты приема на работу или даты ввода
	//                  остатков на дату рабочего месяца.
	ИтоговаяТаблицаЗаработанныхПрав = ПустаяТаблицаЗаработанныхДней();
	ДополнениеЗаработанныхПрав = ИтоговаяТаблицаЗаработанныхПрав.СкопироватьКолонки();
	РасшифровкаЗаработанныхПрав = ИтоговаяТаблицаЗаработанныхПрав.СкопироватьКолонки();
	
	// Заполняем результирующую таблицу уже рассчитанными данными из регистра.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ЗаработанныеПраваНаОтпуска.ДатаНачала КАК ДатаНачала,
	|	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДней,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
	|ИЗ
	|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
	|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеРассчитанныеВидыОтпусковСотрудников КАК НеРассчитанныеСотрудники
	|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = НеРассчитанныеСотрудники.Сотрудник
	|			И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = НеРассчитанныеСотрудники.ВидЕжегодногоОтпуска
	|ГДЕ
	|	НеРассчитанныеСотрудники.Сотрудник ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачала,
	|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ИтоговаяТаблицаЗаработанныхПрав.Добавить(), Выборка);
	КонецЦикла;
	
	ИтоговаяТаблицаЗаработанныхПрав.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	
	ТаблицаВидовОтпуска				= ИсходныеДанные.ВидыОтпусков;
	ТаблицаНачальныхОстатков		= ИсходныеДанные.НачальныеОстатки;
	ТаблицаНачальныхОстатковОтсутствия = ИсходныеДанные.НачальныеОстаткиОтсутствия;
	ТаблицаПравНаЕжегодныйОтпуск	= ИсходныеДанные.Права;
	ТаблицаОтклонений				= ИсходныеДанные.Отклонения;
	ТаблицаПереквалификацииДней		= ИсходныеДанные.ПереквалификацияДней;
	
	НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
	
	Для Каждого СотрудникБезПрава Из ИсходныеДанные.СотрудникиБезПраваНаОтпуск Цикл
		
		ОтборПоСотруднику = Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник);
		НаборЗаписей.Отбор.Сотрудник.Установить(СотрудникБезПрава.Сотрудник);
		
		ЗаписатьНабор = Ложь;
		
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпуска Цикл
			
			ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СотрудникБезПрава.Сотрудник, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
			
			ПраваОтпускаВРегистре = ИтоговаяТаблицаЗаработанныхПрав.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			Если ПраваОтпускаВРегистре.Количество() = 0 Тогда
				
				СтруктураПараметров = ОписаниеПараметровДляРассчитатьПраваНаОтпуск();
				СтруктураПараметров.ПраваНаЕжегодныйОтпускПоВидуОтпуска	= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
				СтруктураПараметров.НачальныеОстаткиПоВидуОтпуска = ТаблицаНачальныхОстатков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
				СтруктураПараметров.НачальныеОстаткиОтсутствия = ТаблицаНачальныхОстатковОтсутствия.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
				СтруктураПараметров.ТаблицаОтклонений = ТаблицаОтклонений;
				СтруктураПараметров.ТаблицаПереквалификацииДней = ТаблицаПереквалификацииДней;
				
				ПерерывыПредоставленияРаздвигаютГод = Истина;
				Если СтрокаВидаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный") Тогда
					ПерерывыПредоставленияРаздвигаютГод = Ложь;
				КонецЕсли;
				Если СтрокаВидаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВидаОтпуска.ВидЕжегодногоОтпуска, "НакопительныйОтпуск") Тогда
					ПерерывыПредоставленияРаздвигаютГод = Ложь;
				КонецЕсли;
					
				РабочиеГода = РассчитатьПравоНаОтпуск(СотрудникБезПрава, СтрокаВидаОтпуска, СтруктураПараметров, ПерерывыПредоставленияРаздвигаютГод);
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
					Модуль.ПрименитьОтраслевыеОсобенностиКомпенсации(ИсходныеДанные.ОтраслевыеОсобенности,
						СотрудникБезПрава.ЭтоРасчетПриУвольнении,
						СотрудникБезПрава.ДатаОстатков,
						СотрудникБезПрава.Сотрудник,
						СтрокаВидаОтпуска.ОсновнойОтпуск,
						СтруктураПараметров.ПраваНаЕжегодныйОтпускПоВидуОтпуска,
						РабочиеГода);
				КонецЕсли;
				
				// Дополним набор рассчитанными правами.
				ДополнитьНаборРассчитаннымиПравами(ОтборПоСотрудникуИВидуОтпуска, НаборЗаписей, РабочиеГода);
				
				// Дополняем результирующую таблицу.
				Для Каждого СтрокаНабора Из НаборЗаписей Цикл
					Если СтрокаНабора.ВидЕжегодногоОтпуска <> СтрокаВидаОтпуска.ВидЕжегодногоОтпуска Тогда 
						Продолжить;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ДополнениеЗаработанныхПрав.Добавить(), СтрокаНабора);
				КонецЦикла;
				
				Если СтрокаВидаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВидаОтпуска.ВидЕжегодногоОтпуска, "НакопительныйОтпуск") Тогда
					Для Каждого РабочийГод Из РабочиеГода Цикл 
						Если РабочийГод.Расшифровка.Количество() = 0 Тогда 
							Продолжить;
						КонецЕсли;
						СтрокаРасшифровки = РасшифровкаЗаработанныхПрав.Добавить();
						СтрокаРасшифровки.Сотрудник = СотрудникБезПрава.Сотрудник;
						СтрокаРасшифровки.ВидЕжегодногоОтпуска = СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
						СтрокаРасшифровки.ДатаНачала = РабочийГод.ДатаНачала;
						СтрокаРасшифровки.ДатаОкончания = РабочийГод.ДатаОкончания;
						СтрокаРасшифровки.Расшифровка = РабочийГод.Расшифровка;
					КонецЦикла;
				КонецЕсли;
				
				ЗаписатьНабор = Истина;
				
			Иначе
				// Дополним набор существующими правами.
				ДополнитьНаборПравамиИзТаблицы(НаборЗаписей, ПраваОтпускаВРегистре);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаписатьНабор Тогда 
			ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаНабораЗаписей.Свернуть("ВидЕжегодногоОтпуска, ДатаНачала, ДатаОкончания, КоличествоДней, КоличествоДнейЗаПериод, Период, Сотрудник");
			НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	Если ДополнениеЗаработанныхПрав.Количество() > 0 Тогда 
		ИтоговаяТаблицаЗаработанныхПрав.Индексы.Удалить(0);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнениеЗаработанныхПрав, ИтоговаяТаблицаЗаработанныхПрав);
		ИтоговаяТаблицаЗаработанныхПрав.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	КонецЕсли;
	ИтоговаяТаблицаЗаработанныхПрав.Индексы.Добавить("Сотрудник");
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТОтклонения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанныеОтклонения.ДатаНачалаОтсутствия,
	|	ИсходныеДанныеОтклонения.ДатаОкончанияОтсутствия,
	|	ИсходныеДанныеОтклонения.КоличествоДнейОтсутствия,
	|	ИсходныеДанныеОтклонения.КоличествоДнейПродления,
	|	ИсходныеДанныеОтклонения.Состояние,
	|	ИсходныеДанныеОтклонения.Сотрудник,
	|	ИсходныеДанныеОтклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты
	|ПОМЕСТИТЬ ВТОтклонения
	|ИЗ
	|	&ИсходныеДанныеОтклонения КАК ИсходныеДанныеОтклонения";
	
	Запрос.УстановитьПараметр("ИсходныеДанныеОтклонения", ИсходныеДанные.Отклонения);
	Запрос.Выполнить();
	
	ДанныеЗаработанныхПрав = Новый Структура("ЗаработанныеПрава, Расшифровка");
	ДанныеЗаработанныхПрав.ЗаработанныеПрава = ИтоговаяТаблицаЗаработанныхПрав;
	ДанныеЗаработанныхПрав.Расшифровка = РасшифровкаЗаработанныхПрав;
	
	Возврат ДанныеЗаработанныхПрав;
	
КонецФункции

Функция ОписаниеПараметровДляРассчитатьПраваНаОтпуск()

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ПраваНаЕжегодныйОтпускПоВидуОтпуска");
	СтруктураПараметров.Вставить("НачальныеОстаткиПоВидуОтпуска");
	СтруктураПараметров.Вставить("НачальныеОстаткиОтсутствия");
	СтруктураПараметров.Вставить("ТаблицаОтклонений");
	СтруктураПараметров.Вставить("ТаблицаПереквалификацииДней");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция РассчитатьПравоНаОтпуск(СотрудникБезПрава, СтрокаВидаОтпуска, СтруктураПараметров, ПерерывыПредоставленияРаздвигаютГод = Истина)
	
	ОтборПоСотруднику = Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник);
	ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СотрудникБезПрава.Сотрудник, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
	
	ТаблицаПереквалификацииДней = СтруктураПараметров.ТаблицаПереквалификацииДней;
	ПраваНаЕжегодныйОтпускПоВидуОтпуска	= СтруктураПараметров.ПраваНаЕжегодныйОтпускПоВидуОтпуска;
	НачальныеОстаткиПоВидуОтпуска = СтруктураПараметров.НачальныеОстаткиПоВидуОтпуска;
	НачальныеОстаткиОтсутствия = СтруктураПараметров.НачальныеОстаткиОтсутствия;
	
	ТаблицаОтклонений = СтруктураПараметров.ТаблицаОтклонений;
	ОтклоненияПоСотруднику = ТаблицаОтклонений.НайтиСтроки(ОтборПоСотруднику);
	ТаблицаОтклоненийПоВидуОтпуска = ТаблицаОтклонений.СкопироватьКолонки();
	ТаблицаОтклоненийПоВидуОтпуска.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	
	РабочиеГода = Новый ТаблицаЗначений;
	РабочиеГода.Колонки.Добавить("ДатаНачала",		Новый ОписаниеТипов("Дата"));
	РабочиеГода.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
	РабочиеГода.Колонки.Добавить("РабочиеМесяцы",	Новый ОписаниеТипов("ТаблицаЗначений"));
	РабочиеГода.Колонки.Добавить("Расшифровка",		Новый ОписаниеТипов("Массив"));
	
	УдалитьДублиПрав(ПраваНаЕжегодныйОтпускПоВидуОтпуска);
	
	ЕстьОстаткиПоВидуОтпуска = (НачальныеОстаткиПоВидуОтпуска.Количество() > 0);
	ДатаОстаткаПоВидуОтпуска = ?(ЕстьОстаткиПоВидуОтпуска, НачальныеОстаткиПоВидуОтпуска[0].ДатаОстатка, '00010101');
	
	// Необходимо определить периоды, в которые сотруднику положен отпуск.
	// По умолчанию один период с даты приема на работу или даты начальных остатков остатков по дату увольнения или дату
	// получения остатка.
	// Периоды предоставления вида отпуска объединяем в один большой, на перерывы в предоставлениях делаем строки отклонений.
	ПериодыПредоставленияОтпусков = Новый ТаблицаЗначений;
	ПериодыПредоставленияОтпусков.Колонки.Добавить("ДатаНачала",	Новый ОписаниеТипов("Дата"));
	ПериодыПредоставленияОтпусков.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
	ПериодПредоставленияИтоговый = Новый СтандартныйПериод;
	
	// Добавим в периоды предоставления информацию по остаткам
	Если ЕстьОстаткиПоВидуОтпуска Тогда
		Для каждого НачальныйОстаток Из НачальныеОстаткиПоВидуОтпуска Цикл
			СтрокаПериода = ПериодыПредоставленияОтпусков.Добавить();
			СтрокаПериода.ДатаНачала	= НачальныйОстаток.РабочийГодНачало;
			СтрокаПериода.ДатаОкончания	= Мин(НачальныйОстаток.РабочийГодОкончание, КонецДня(НачальныйОстаток.ДатаОстатка));
			ОбрезатьДатуОкончанияРабочегоГода(СтрокаПериода.ДатаОкончания, СотрудникБезПрава);
		КонецЦикла; 
	КонецЕсли;
	
	// Определяем "честные" периоды.
	ДобавитьНовыйПериод = Истина;
	КоличествоПрав = ПраваНаЕжегодныйОтпускПоВидуОтпуска.Количество();
	Для Номер = 1 По КоличествоПрав Цикл
		ПравоНаОтпуск = ПраваНаЕжегодныйОтпускПоВидуОтпуска[КоличествоПрав - Номер];
		Если ДобавитьНовыйПериод И ПравоНаОтпуск.Предоставляется Тогда
			СтрокаПериода = ПериодыПредоставленияОтпусков.Добавить();
			СтрокаПериода.ДатаНачала	= ПравоНаОтпуск.ДатаДействия;
			ДобавитьНовыйПериод	= Ложь;
		ИначеЕсли Не ДобавитьНовыйПериод И НЕ ПравоНаОтпуск.Предоставляется Тогда
			СтрокаПериода.ДатаОкончания	= ПравоНаОтпуск.ДатаДействия - 1;
			ОбрезатьДатуОкончанияРабочегоГода(СтрокаПериода.ДатаОкончания, СотрудникБезПрава);
			ДобавитьНовыйПериод	= Истина;
		КонецЕсли;
	КонецЦикла;
	// Если сотрудник уволен, то дата окончания последнего рабочего года должна быть равна дате увольнения.
	Если Не ДобавитьНовыйПериод И Не ЗначениеЗаполнено(СтрокаПериода.ДатаОкончания) Тогда
		ОбрезатьДатуОкончанияРабочегоГода(СтрокаПериода.ДатаОкончания, СотрудникБезПрава);
	КонецЕсли;
	
	Если ПериодыПредоставленияОтпусков.Количество() = 0 Тогда
		Возврат РабочиеГода;
	КонецЕсли;
	
	Если ПерерывыПредоставленияРаздвигаютГод Тогда
		// Объединяем их в один, в перерывах регистрируем "отклонения".
		ПрошлыйПериод = Неопределено;
		Для Каждого ПериодПредоставленияОтпуска Из ПериодыПредоставленияОтпусков Цикл
			Если ПериодыПредоставленияОтпусков.Индекс(ПериодПредоставленияОтпуска) <> 0 Тогда
				Если КонецДня(ПрошлыйПериод.ДатаОкончания) + 1 <> НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала) Тогда
					ДнейРазрыва = (НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала) - (КонецДня(ПрошлыйПериод.ДатаОкончания) + 1)) / 86400;
					НовоеОтклонение = ТаблицаОтклоненийПоВидуОтпуска.Добавить();
					НовоеОтклонение.Сотрудник = СотрудникБезПрава.Сотрудник;
					НовоеОтклонение.ВидОтпуска = СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
					НовоеОтклонение.КоличествоДнейОтсутствия = ДнейРазрыва;
					НовоеОтклонение.КоличествоДнейПродления = ДнейРазрыва;
					НовоеОтклонение.ДатаНачалаОтсутствия = КонецДня(ПрошлыйПериод.ДатаОкончания)+1;
					НовоеОтклонение.ДатаОкончанияОтсутствия = НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала)-1;
					НовоеОтклонение.ЯвляетсяОтпускомБезСохраненияЗарплаты = Ложь;
					НовоеОтклонение.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
		    ПрошлыйПериод = ПериодПредоставленияОтпуска;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем непрерывный интервал прав.
	НепрерывноеПравоНаЕжегодныйОтпуск = Новый Массив;
	Для каждого ПравоНаОтпуск Из ПраваНаЕжегодныйОтпускПоВидуОтпуска Цикл
		ПерваяЗапись = (ПраваНаЕжегодныйОтпускПоВидуОтпуска.Найти(ПравоНаОтпуск) + 1 = ПраваНаЕжегодныйОтпускПоВидуОтпуска.Количество());
		Если ПерерывыПредоставленияРаздвигаютГод
			И НЕ ПравоНаОтпуск.Предоставляется
			И НЕ ПерваяЗапись Тогда
		    Продолжить;
		КонецЕсли;
		НепрерывноеПравоНаЕжегодныйОтпуск.Добавить(ПравоНаОтпуск);
	КонецЦикла; 
	УдалитьДублиПрав(НепрерывноеПравоНаЕжегодныйОтпуск);
	
	// Получаем итоговые отклонения по сотруднику.
	ПериодыОтклоненийСотрудника = ТаблицаОтклоненийПоВидуОтпуска.СкопироватьКолонки();
	Для каждого ОтклонениеПоСотруднику Из ОтклоненияПоСотруднику Цикл
		// Если дата начала отклонения раньше даты ввода остатка вида отпуска,
		// то предполагается, что это отклонение уже учтено при вводе остатков.
		Если ОтклонениеПоСотруднику.ДатаНачалаОтсутствия <= ДатаОстаткаПоВидуОтпуска Тогда
			Если ЗначениеЗаполнено(ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия) 
				И ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия <= ДатаОстаткаПоВидуОтпуска Тогда
				Продолжить;
			Иначе 
				ОтклонениеПоСотруднику.ДатаНачалаОтсутствия = ДатаОстаткаПоВидуОтпуска + 86400;
				Если ЗначениеЗаполнено(ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия) Тогда 
					ОтклонениеПоСотруднику.КоличествоДнейПродления = Макс((НачалоДня(ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия) - ОтклонениеПоСотруднику.ДатаНачалаОтсутствия) / 86400 + 1, 0);
					ОтклонениеПоСотруднику.КоличествоДнейОтсутствия = ОтклонениеПоСотруднику.КоличествоДнейПродления;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Не учитываем отклонения в периоды, когда отпуск не предоставлялся.
		Если ПерерывыПредоставленияРаздвигаютГод Тогда
			Для Каждого ОтклонениеПоВидуОтпуска Из ТаблицаОтклоненийПоВидуОтпуска Цикл 
				Если ОтклонениеПоСотруднику.ДатаНачалаОтсутствия > ОтклонениеПоВидуОтпуска.ДатаОкончанияОтсутствия
					Или ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия < ОтклонениеПоВидуОтпуска.ДатаНачалаОтсутствия Тогда 
					Продолжить;
				КонецЕсли;
				Если ОтклонениеПоВидуОтпуска.ДатаНачалаОтсутствия > ОтклонениеПоСотруднику.ДатаНачалаОтсутствия Тогда 
					НоваяСтрока = ПериодыОтклоненийСотрудника.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтклонениеПоСотруднику);
					НоваяСтрока.ДатаОкончанияОтсутствия = ОтклонениеПоВидуОтпуска.ДатаНачалаОтсутствия - 86400;
				КонецЕсли;
				ОтклонениеПоСотруднику.ДатаНачалаОтсутствия = ОтклонениеПоВидуОтпуска.ДатаОкончанияОтсутствия + 86400;
			КонецЦикла;
		КонецЕсли;
		Если ОтклонениеПоСотруднику.ДатаНачалаОтсутствия <= ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия Тогда 
			ЗаполнитьЗначенияСвойств(ПериодыОтклоненийСотрудника.Добавить(), ОтклонениеПоСотруднику);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ПериодОтклонения Из ПериодыОтклоненийСотрудника Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаОтклоненийПоВидуОтпуска.Добавить(), ПериодОтклонения);
	КонецЦикла;
	ТаблицаОтклоненийПоВидуОтпуска.Сортировать("ДатаНачалаОтсутствия");
	
	// Формируем итоговый период.
	ПериодПредоставленияИтоговый.ДатаНачала = ПериодыПредоставленияОтпусков[0].ДатаНачала;
	ПериодПредоставленияИтоговый.ДатаОкончания = ПериодыПредоставленияОтпусков[ПериодыПредоставленияОтпусков.Количество()-1].ДатаОкончания;
	
	// Формируем рабочие года, "нарезаем" даты образования прав.
	СформироватьРабочиеГода(СотрудникБезПрава, РабочиеГода, ТаблицаОтклонений, ТаблицаОтклоненийПоВидуОтпуска, НачальныеОстаткиПоВидуОтпуска, ЕстьОстаткиПоВидуОтпуска, ПериодПредоставленияИтоговый, НачальныеОстаткиОтсутствия, СтрокаВидаОтпуска.НакопительныйОтпуск);
	
	Если СтрокаВидаОтпуска.НакопительныйОтпуск Тогда
		// Определим рабочие месяцы и количество дней отпуска, заработанное на дату рабочего месяца.
		РассчитатьКоличествоДнейНакопительногоОтпуска(СотрудникБезПрава, СтрокаВидаОтпуска, РабочиеГода, НепрерывноеПравоНаЕжегодныйОтпуск);
	Иначе 
		// Для каждого рабочего месяца определим количество дней отпуска, заработанное на дату рабочего месяца.
		РассчитатьКоличествоДнейОтпуска(СотрудникБезПрава, СтрокаВидаОтпуска, РабочиеГода, НепрерывноеПравоНаЕжегодныйОтпуск, ТаблицаПереквалификацииДней);
	КонецЕсли;
	
	Возврат РабочиеГода;
	
КонецФункции

Процедура СформироватьРабочиеГода(СотрудникБезПрава, РабочиеГода, ТаблицаОтклонений, ТаблицаОтклоненийПоВидуОтпуска, НачальныеОстаткиПоВидуОтпуска, ЕстьОстаткиПоВидуОтпуска, ПериодПредоставленияИтоговый, НачальныеОстаткиОтсутствия, НакопительныйОтпуск)

	ПоловиныМесяцевОбычные = Новый Массив;
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(14);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	
	ДлинаСуток = 86400;
	
	ДатаНачалаРабочегоГода		= ПериодПредоставленияИтоговый.ДатаНачала;
	ДатаОкончанияРабочегоГода	= ?(НакопительныйОтпуск, КонецГода(ДатаНачалаРабочегоГода), ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1);
	// Если введены начальные остатки, а рабочий год заканчивается до даты ввода остатков,
	//  необходимо определить тот рабочий год, в который дата начальных остатков попадает.
	// Предполагается что остатки продляют только первый период предоставления.
	Если ЕстьОстаткиПоВидуОтпуска Тогда
		СтрокаОстатков = НачальныеОстаткиПоВидуОтпуска[0];
		Если ЗначениеЗаполнено(СтрокаОстатков.РабочийГодНачало) И ЗначениеЗаполнено(СтрокаОстатков.РабочийГодОкончание) Тогда
			ДатаНачалаРабочегоГода		= СтрокаОстатков.РабочийГодНачало;
			ДатаОкончанияРабочегоГода	= ?(НакопительныйОтпуск, КонецГода(ДатаНачалаРабочегоГода), КонецДня(СтрокаОстатков.РабочийГодОкончание));
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем рабочие года с учетом отклонений.
	// Каждый рабочий год разобьем на рабочие месяцы.
	// Рабочий месяц состоит из даты, в которую сотрудник получает отпуск за отработанный месяц и количество дней за
	// этот месяц.
	МаксимальнаяДатаОкончания = ?(ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания), ПериодПредоставленияИтоговый.ДатаОкончания, СотрудникБезПрава.ДатаОстатков);
	Пока ДатаНачалаРабочегоГода <= МаксимальнаяДатаОкончания Цикл
		
		РабочийГод = РабочиеГода.Добавить();
		РабочийГод.ДатаНачала				= ДатаНачалаРабочегоГода;
		Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И ДатаОкончанияРабочегоГода > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
			ДатаОкончанияРабочегоГода	= ПериодПредоставленияИтоговый.ДатаОкончания;
		КонецЕсли;
		РабочийГод.ДатаОкончания			= ДатаОкончанияРабочегоГода;
						
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("ДатаМесяца",		Новый ОписаниеТипов("Дата"));
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("КоличествоДней",	Новый ОписаниеТипов("Число"));
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("Заполнен",		Новый ОписаниеТипов("Булево"));
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("ОтложеноДней",	Новый ОписаниеТипов("Число"));
		
		// Если для сотрудника введены остатки, добавим остаток как право последним днем.
		НачалоПериода	= РабочийГод.ДатаНачала;
		
		Если ЕстьОстаткиПоВидуОтпуска Тогда
			Для Каждого СтрокаОстатков Из НачальныеОстаткиПоВидуОтпуска Цикл
				
				// В том случае, если есть начальные остатки по данному виду отпуска
				// приводим рабочие года в соответствии с периодом, заданным в остатках.
				Если НачалоДня(РабочийГод.ДатаНачала) = НачалоДня(СтрокаОстатков.РабочийГодНачало) Тогда
					РабочийГод.ДатаОкончания = СтрокаОстатков.РабочийГодОкончание;
					ОбрезатьДатуОкончанияРабочегоГода(РабочийГод.ДатаОкончания, СотрудникБезПрава);
					Если НакопительныйОтпуск И СтрокаОстатков.ДатаОстатка >= СтрокаОстатков.РабочийГодНачало 
						И СтрокаОстатков.ДатаОстатка <= СтрокаОстатков.РабочийГодОкончание Тогда 
						РабочийГод.ДатаОкончания = КонецГода(СтрокаОстатков.ДатаОстатка);
						ОбрезатьДатуОкончанияРабочегоГода(РабочийГод.ДатаОкончания, СотрудникБезПрава);
					КонецЕсли;
				КонецЕсли;
				
				ДатаОкончанияРабочегоГода = РабочийГод.ДатаОкончания;
				
				ДатаЗаписиОстатка = Мин(СтрокаОстатков.РабочийГодОкончание, СтрокаОстатков.ДатаОстатка);
				Если РабочийГод.ДатаНачала > ДатаЗаписиОстатка Или ДатаЗаписиОстатка > РабочийГод.ДатаОкончания Тогда
					Продолжить;
				КонецЕсли;
				
				РабочийМесяц = РабочийГод.РабочиеМесяцы.Добавить();
				РабочийМесяц.ДатаМесяца		= ДатаЗаписиОстатка;
				РабочийМесяц.КоличествоДней	= СтрокаОстатков.КоличествоДней;
				РабочийМесяц.Заполнен = Истина;
				
				ДробнаяЧасть = СтрокаОстатков.КоличествоДней - Цел(СтрокаОстатков.КоличествоДней);
				Если ДробнаяЧасть = 0.33 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.003;
				ИначеЕсли ДробнаяЧасть = 0.66 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.006;
				ИначеЕсли ДробнаяЧасть = 0.99 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.009;
				КонецЕсли;
				
				НачалоПериода = Мин(ДатаЗаписиОстатка, НачалоПериода);
				
				// Если введены отсутствия, сдвигающие рабочий год, дату окончания
				// последнего рабочего года рассчитываем автоматически.
				Если НачалоДня(РабочийГод.ДатаНачала) = НачалоДня(СтрокаОстатков.РабочийГодНачало)
					И Не НакопительныйОтпуск
					И НачальныеОстаткиОтсутствия.Количество() > 0
					И СтрокаОстатков.ДатаОстатка >= СтрокаОстатков.РабочийГодНачало 
					И СтрокаОстатков.ДатаОстатка <= СтрокаОстатков.РабочийГодОкончание Тогда 
					РабочийГод.ДатаОкончания = Мин(РабочийГод.ДатаОкончания, ДобавитьМесяц(РабочийГод.ДатаНачала, 12) - 1);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если НакопительныйОтпуск Тогда 
			ДатаНачалаРабочегоГода		= КонецДня(РабочийГод.ДатаОкончания) + 1;
			ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
		    Продолжить;
		КонецЕсли;
		
		Если РабочийГод.ДатаОкончания < Дата(2006, 10, 6) Тогда
			КоличествоДнейВключаемых = 7;
		Иначе
			КоличествоДнейВключаемых = 14;
		КонецЕсли;
						
		// Заполним рабочие месяца датами по умолчанию.
		НомерМесяца = 1;
		
		ПоловинаПервогоМесяца = ПоловиныМесяцевОбычные[Месяц(РабочийГод.ДатаНачала)-1] + ?(ЭтоВисокосныйМесяц(РабочийГод.ДатаНачала), 0.5, 0);
		ВПервомМесяцеОтработанаПоловина = (ПоловинаПервогоМесяца + 1 >= День(РабочийГод.ДатаНачала));
		
		ДеньПервогоМесяца = День(РабочийГод.ДатаНачала);
		ПоследнийДеньПервогоМесяца = День(КонецМесяца(РабочийГод.ДатаНачала));
		ОтработаноВПервомМесяце = ПоследнийДеньПервогоМесяца - ДеньПервогоМесяца + 1;
		ОсталосьОтработатьДней = ?(ДеньПервогоМесяца = 17 И ПоследнийДеньПервогоМесяца = 31, 16, 15) - ОтработаноВПервомМесяце;
		
		Пока НачалоПериода < РабочийГод.ДатаОкончания Или НомерМесяца = 12 Цикл
			
			Если НомерМесяца = 12 Тогда
				// П. 28 правил об очередных и дополнительных отпусках.
				ДатаМесяца = НачалоПериода - ДлинаСуток;
			Иначе
				// Если в первом месяце отработана половина, определяем дату месяца по продолжительности текущего месяца.
				// Если в первом месяце отработано меньше половины, используем правило 15 дней.
				Если ВПервомМесяцеОтработанаПоловина Тогда 
					ПоловинаМесяца = Окр(ПоловиныМесяцевОбычные[Месяц(НачалоПериода)-1] + ?(ЭтоВисокосныйМесяц(НачалоПериода), 0.5, 0));
					ПоследнийДеньМесяца = НачалоДня(КонецМесяца(НачалоПериода));
					ДатаМесяца = Мин(НачалоПериода - ДлинаСуток + ПоловинаМесяца * ДлинаСуток, ПоследнийДеньМесяца);
				Иначе 
					ДатаМесяца = ?(День(НачалоПериода) = 1, НачалоПериода, КонецМесяца(НачалоПериода) + 1) + (ОсталосьОтработатьДней - 1) * ДлинаСуток;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И ДатаМесяца > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
				Прервать;
			КонецЕсли;
			
			Если ДатаМесяца > РабочийГод.ДатаОкончания Тогда // Дата месяца не попала в текущий рабочий год.
				Прервать;
			КонецЕсли;
			
			// Перед добавлением месяца проверим что он не добавлен остатками.
			ОтборМесяцев = Новый Структура("ДатаМесяца", ДатаМесяца);
			Если РабочийГод.РабочиеМесяцы.НайтиСтроки(ОтборМесяцев).Количество() = 0 Тогда
				РабочийГод.РабочиеМесяцы.Добавить().ДатаМесяца = ДатаМесяца;
			КонецЕсли;
			
			НачалоПериода = ДобавитьМесяц(РабочийГод.ДатаНачала, НомерМесяца);
			Если День(НачалоПериода) < ДеньПервогоМесяца Тогда 
				НачалоПериода = КонецМесяца(НачалоПериода) + 1;
			КонецЕсли;
			
			НомерМесяца = НомерМесяца + 1;
		КонецЦикла;
		
		// Учтем отклонения, указанные при вводе начальных остатков.
		Для Каждого СтрокаОтсутствия Из НачальныеОстаткиОтсутствия Цикл 
			Если ДатаНачалаРабочегоГода > СтрокаОтсутствия.ДатаОстатка Или СтрокаОтсутствия.ДатаОстатка > ДатаОкончанияРабочегоГода Тогда
				Продолжить;
			КонецЕсли;
			КоличествоДнейПродления = СтрокаОтсутствия.КоличествоДней;
			// Отпуска без сохранения первые 7/14 дней в рабочем году не увеличивают рабочий год.
			Если СтрокаОтсутствия.ЯвляетсяОтпускомБезСохраненияЗарплаты Тогда
				КоличествоДнейПродления = Макс(СтрокаОтсутствия.КоличествоДней - КоличествоДнейВключаемых, 0);
				КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - СтрокаОтсутствия.КоличествоДней, 0);
			КонецЕсли;
			// Сдвигаем дату года и месяцы.
			Если КоличествоДнейПродления > 0 Тогда
				РабочийГод.ДатаОкончания = РабочийГод.ДатаОкончания + КоличествоДнейПродления * ДлинаСуток;
				Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И РабочийГод.ДатаОкончания > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
					РабочийГод.ДатаОкончания = ПериодПредоставленияИтоговый.ДатаОкончания;
				КонецЕсли;
				// Сдвиг всех рабочих месяцев после даты начала продления.
				ОтборМесяцев = Новый Структура("Заполнен", Истина);
				ЗаполненныеМесяцы = РабочийГод.РабочиеМесяцы.НайтиСтроки(ОтборМесяцев);
				ЗаполненныеДаты = ОбщегоНазначения.ВыгрузитьКолонку(ЗаполненныеМесяцы, "ДатаМесяца");
				МесяцыДляУдаления = Новый Массив;
				Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
					Если РабочийМесяц.Заполнен Тогда 
						Продолжить;
					КонецЕсли;
					Если РабочийМесяц.ДатаМесяца + КоличествоДнейПродления * ДлинаСуток >= СтрокаОтсутствия.ДатаОстатка Тогда
						РабочийМесяц.ДатаМесяца = РабочийМесяц.ДатаМесяца + КоличествоДнейПродления * ДлинаСуток;
						Если ЗаполненныеДаты.Найти(РабочийМесяц.ДатаМесяца) <> Неопределено Тогда 
							МесяцыДляУдаления.Добавить(РабочийМесяц);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Для Каждого РабочийМесяц Из МесяцыДляУдаления Цикл 
					РабочийГод.РабочиеМесяцы.Удалить(РабочийМесяц);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Продлим рабочие года, изменив дату окончания рабочего года и подвинув каждую дату рабочего месяца.
		ОтклоненияДляУдаления = Новый Массив;
		Для Каждого СтрокаОтклонения Из ТаблицаОтклоненийПоВидуОтпуска Цикл
			Если РабочийГод.ДатаОкончания < СтрокаОтклонения.ДатаНачалаОтсутствия Тогда
				Продолжить;
			КонецЕсли;
			
			Если РабочийГод.ДатаНачала > СтрокаОтклонения.ДатаНачалаОтсутствия Тогда
				Если ЗначениеЗаполнено(СтрокаОтклонения.ДатаОкончанияОтсутствия)
					И СтрокаОтклонения.ДатаОкончанияОтсутствия < РабочийГод.ДатаНачала Тогда 
					Продолжить;
				Иначе 
					СтрокаОтклонения.ДатаНачалаОтсутствия = РабочийГод.ДатаНачала;
				КонецЕсли;
			КонецЕсли;
			
			// Отпуска без сохранения первые 7/14 дней в рабочем году не увеличивают рабочий год.
			КоличествоДнейВключаемыхБыло = 0;
			Если СтрокаОтклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты Тогда
				
				КоличествоДнейВключаемыхБыло = КоличествоДнейВключаемых;
				КоличествоДнейПродления = Макс(СтрокаОтклонения.КоличествоДнейОтсутствия - КоличествоДнейВключаемых, 0);
				КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - СтрокаОтклонения.КоличествоДнейОтсутствия, 0);
				
				СтрокаОтклонения.КоличествоДнейПродления = КоличествоДнейПродления;
				
				СтруктураПоиска = Новый Структура("Сотрудник, Состояние, ДатаНачалаОтсутствия, ДатаОкончанияОтсутствия, ЯвляетсяОтпускомБезСохраненияЗарплаты, Состояние");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОтклонения);
				НайденныеСтроки = ТаблицаОтклонений.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].КоличествоДнейПродления = КоличествоДнейПродления;
				КонецЕсли;
				
			КонецЕсли;
			
			// Увеличение рабочего года
			Если СтрокаОтклонения.КоличествоДнейПродления = NULL Тогда
				// Даты окончания нет, сотрудник ушел надолго, что с ним - мы не знаем, расчет прекращаем датой начала отсутствия.
				РабочийГод.ДатаОкончания = СтрокаОтклонения.ДатаНачалаОтсутствия - ДлинаСуток;
				МаксимальнаяДатаОкончания = СтрокаОтклонения.ДатаНачалаОтсутствия - ДлинаСуток;
			ИначеЕсли СтрокаОтклонения.КоличествоДнейПродления > 0 Тогда
				// Отсутствие с известной датой окончания - сдвигаем дату года и месяцы.
				РабочийГод.ДатаОкончания		= РабочийГод.ДатаОкончания + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
				Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И РабочийГод.ДатаОкончания > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
					РабочийГод.ДатаОкончания	= ПериодПредоставленияИтоговый.ДатаОкончания;
				КонецЕсли;
				// Сдвиг всех рабочих месяцев после даты начала продления.
				Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
					Если РабочийМесяц.ДатаМесяца >= СтрокаОтклонения.ДатаНачалаОтсутствия + КоличествоДнейВключаемыхБыло * ДлинаСуток Тогда
						РабочийМесяц.ДатаМесяца = РабочийМесяц.ДатаМесяца + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОтклоненияДляУдаления.Добавить(СтрокаОтклонения);
		КонецЦикла;
		
		Для Каждого СтрокаОтклонения Из ОтклоненияДляУдаления Цикл
			ТаблицаОтклоненийПоВидуОтпуска.Удалить(СтрокаОтклонения);
		КонецЦикла;
		
		// Удаление рабочих месяцев, вышедших за дату окончания рабочего года.
		РабочиеМесяцыДляУдаления = Новый Массив;
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			Если РабочийМесяц.ДатаМесяца > РабочийГод.ДатаОкончания Тогда
				РабочиеМесяцыДляУдаления.Добавить(РабочийМесяц);
			КонецЕсли;
		КонецЦикла;
		Для Каждого РабочийМесяц Из РабочиеМесяцыДляУдаления Цикл
			РабочийГод.РабочиеМесяцы.Удалить(РабочийМесяц);
		КонецЦикла;
		
		РабочийГод.РабочиеМесяцы.Сортировать("ДатаМесяца");
		
		ДатаНачалаРабочегоГода		= КонецДня(РабочийГод.ДатаОкончания) + 1;
		ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
	КонецЦикла;

КонецПроцедуры

// Заполнение ТЧ "Ежегодные отпуска в документах".

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного сотрудника.
//
Функция ЕжегодныеОтпускаСотрудников(ТаблицаСотрудников, ИсключаемыйРегистратор) Экспорт
 
	ОтпускаСотрудников = Новый Соответствие;
	
	// Создание таблицы - отбора сотрудников
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		| ТаблицаСотрудников.Период,
		| ТаблицаСотрудников.Сотрудник
		|ПОМЕСТИТЬ ВТТаблицаСотрудниковДляПолученияЕжегодныхОтпусков
		|ИЗ
		| &ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников",  ТаблицаСотрудников);
	
	// Получение запроса по ежегодным отпускам сотрудников
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТТаблицаСотрудниковДляПолученияЕжегодныхОтпусков");
	ЗапросВТЕжегодныеОтпуска = ЗапросВТЕжегодныеОтпускаСотрудников(Ложь, ОписательВременнойТаблицыОтборов, ИсключаемыйРегистратор, "ВТЕжегодныеОтпускаСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТЕжегодныеОтпуска);
	
	ФинальныйЗапрос = Новый Запрос;
	ФинальныйЗапрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.КоличествоДнейВГод,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредопределенный,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование
		|ИЗ
		|	ВТЕжегодныеОтпускаСотрудников КАК ПраваНаОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредопределенный УБЫВ,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам УБЫВ,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ФинальныйЗапрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ОтпускаСотрудника = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			ОписаниеОтпуска = Новый Структура("ВидЕжегодногоОтпуска,КоличествоДнейВГод,ВидЕжегодногоОтпускаПредопределенный,ВидЕжегодногоОтпускаНаименование");
			ЗаполнитьЗначенияСвойств(ОписаниеОтпуска, Выборка);
			ОтпускаСотрудника.Добавить(ОписаниеОтпуска);
			
		КонецЦикла;
		
		ОтпускаСотрудников.Вставить(Выборка.Сотрудник, ОтпускаСотрудника);
		
	КонецЦикла; 
	
	Возврат ОтпускаСотрудников;
 
КонецФункции

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного сотрудника.
//
Функция ЕжегодныеОтпускаСотрудника(Сотрудник, ДатаСобытия, Регистратор) Экспорт
	
	// Формируем таблицу фильтров.
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НоваяСтрока = ТаблицаОтборов.Добавить();
	НоваяСтрока.Период = ДатаСобытия;
	НоваяСтрока.Сотрудник = Сотрудник;
	
	ЕжегодныеОтпуска = ЕжегодныеОтпускаСотрудников(ТаблицаОтборов, Регистратор);
	
	// Формируем таблицу результата.
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаСотрудников.Колонки.Добавить("КоличествоДнейВГод", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	
	МассивОтпусков = ЕжегодныеОтпуска.Получить(Сотрудник);
	Если МассивОтпусков <> Неопределено Тогда
		Для каждого ВидОтпуска Из МассивОтпусков Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(), ВидОтпуска);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного списка позиций штатного
// расписания.
//
Функция ЕжегодныеОтпускаПозицииШтатногоРасписания(СписокПозиций, ДатаСобытия, Регистратор = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций",	СписокПозиций);
	Запрос.УстановитьПараметр("ДатаСобытия",	ДатаСобытия);
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата) КАК Дата,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТСрезПоследних
			|ИЗ
			|	РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания В(&СписокПозиций)
			|	И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата <= &ДатаСобытия
			|	И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Регистратор <> &Регистратор
			|	И НЕ ЕСТЬNULL(ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.ПометкаУдаления, ЛОЖЬ)
			|	И НЕ ЕСТЬNULL(ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.Недействителен, ЛОЖЬ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ИЗ
			|	РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
			|		ПО ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания = СрезПоследних.ПозицияШтатногоРасписания
			|			И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата = СрезПоследних.Дата
			|			И (НЕ ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.ПометкаУдаления)
			|			И (НЕ ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.Недействителен)
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.Предопределенный УБЫВ,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам УБЫВ,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска";
		
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка КАК ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ИЗ
			|	Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ШтатноеРасписаниеЕжегодныеОтпуска
			|ГДЕ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка В(&СписокПозиций)
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ГруппаПозицийПодразделения
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.Утверждена
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаУтверждения <= &ДатаСобытия
			|	И (ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаЗакрытия >= &ДатаСобытия
			|			ИЛИ ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ПометкаУдаления
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.Недействителен
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ОтпускЯвляетсяЕжегодным
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.Предопределенный УБЫВ,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам УБЫВ,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Движения по регистрам

// Процедура принудительно рассчитывает заработанные права на ежегодные отпуска по списку сотрудников и записывает
// рассчитанные сведения в регистр.
//
Процедура РассчитатьЗаработанныеОтпускаСпискуСотрудников(СписокСотрудников, ДатаРасчета, ЭтоРасчетПриУвольнении = Ложь,
	ОтраслевыеОсобенности = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СписокСотрудников)
		Или СписокСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник				= Сотрудник;
		Строка.ДатаОстатков				= НачалоДня(ДатаРасчета);
		Строка.ЭтоРасчетПриУвольнении	= ЭтоРасчетПриУвольнении;
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.ИндексСтроки	= ТаблицаДанных.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТНеРассчитанныхСотрудников(ТаблицаДанных, МенеджерВременныхТаблиц, Ложь);
	Если ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТНеРассчитанныеСотрудники") Тогда 
		ИсходныеДанные = ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц, ОтраслевыеОсобенности);
		ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

// Получение временной таблицы фактических отпусков.

// Возвращает структуру описания полей отбора для методов получения фактических отпусков сотрудников.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать три имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "НачалоПериода",
//							третье "ОкончаниеПериода".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	Сотрудник
//				НачалоПериода
//				ОкончаниеПериода
//
Функция ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников = "НачалоПериода,ОкончаниеПериода")
	
	МассивИменПолейОтбораСотрудников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовСотрудников, ",");
	Возврат Новый Структура("Сотрудник,НачалоПериода,ОкончаниеПериода", СокрЛП(МассивИменПолейОтбораСотрудников[0]), СокрЛП(МассивИменПолейОтбораСотрудников[1]), СокрЛП(МассивИменПолейОтбораСотрудников[2]));
	
КонецФункции

// Возвращает строку, содержащую своднуюИнформацию об отпусках сотрудника
// Параметры:
//	КоллекцияСтрок - Таблица значений с правами сотрудника на отпуск.
// 	ТолькоПросмотр - состояние открытия формы.
// 	РежимФормирования - режим формирования надписи.
//		* 0 - простой список отпусков
//		* 1 - расширенное представление, с учетом изменений
//		* 2 - краткий вывод измененных отпусков.
//
Функция ПредставлениеПраваНаОтпускПоКоллекцииСтрок(КоллекцияСтрок, ТолькоПросмотр, РежимФормирования)
	
	Если РежимФормирования = 2 И КоллекцияСтрок.Количество() > 0 Тогда
		// Для вывода краткой информации с изменениями - удалим отмененные отпуска
		МассивСтрокДляУдаления = Новый Массив;
		Для каждого СтрокаОтпуска Из КоллекцияСтрок Цикл
			Если СтрокаОтпуска.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Отменить") Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаОтпуска);
			КонецЕсли;
		КонецЦикла; 
		Для каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
			КоллекцияСтрок.Удалить(КоллекцияСтрок.Найти(УдаляемаяСтрока));
		КонецЦикла; 
	КонецЕсли;
			
	МассивФорматированныхСтрок = Новый Массив;
	
	ПредставлениеПрава = "";
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		ПредставлениеПрава = НСтр("ru = 'Права на отпуск не заданы.';
									|en = 'Leave entitlement is not specified.'");
		МассивФорматированныхСтрок.Добавить(ПредставлениеПрава);
	ИначеЕсли КоллекцияСтрок.Количество() = 1 Тогда
		
		СтрокаОтпуска = КоллекцияСтрок[0];
		
		Заголовок = ?(РежимФормирования = 2, НСтр("ru = 'Изменено право на отпуск';
													|en = 'Changed leave entitlement'"), НСтр("ru = 'Имеет право на ежегодный отпуск';
																							|en = 'Entitled to annual leave'"));
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(Заголовок + " ",,WebЦвета.Черный));
		
		ЦветПрава = WebЦвета.Черный;
		Если РежимФормирования = 1 Тогда
			ПредставлениеПрава = КомментарийИзменения(СтрокаОтпуска);
		Иначе
			Если ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
				ПредставлениеПрава = "";
			Иначе
				Если СтрокаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
					ПредставлениеПрава = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '(%1) дн.';
							|en = '(%1) days'"),
						СтрокаОтпуска.КоличествоДнейВГод);
				Иначе
					ПредставлениеПрава = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 (%2) дн.';
							|en = '%1 (%2) days'"),
						СтрокаОтпуска.ВидЕжегодногоОтпуска,
						СтрокаОтпуска.КоличествоДнейВГод);
					ЦветПрава = WebЦвета.ТемноГрифельноСиний;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПрава + " ",, ЦветПрава));
		
	ИначеЕсли КоллекцияСтрок.Количество() > 1 Тогда
		
		ПредставлениеПрава = "";
		НачалоНовойСтроки = Истина;
		
		Для каждого СтрокаТЧЕжегодныеОтпуска Из КоллекцияСтрок Цикл
			
			Если РежимФормирования = 1 Тогда
				ПредставлениеСтроки = КомментарийИзменения(СтрокаТЧЕжегодныеОтпуска);
			Иначе
				Если ЭтоСтажевыйОтпуск(СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска) Тогда
					ПредставлениеСтроки = Строка(СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска);
				Иначе
					ПредставлениеСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 (%2) дн.';
							|en = '%1 (%2) days'"),
						СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
						СтрокаТЧЕжегодныеОтпуска.КоличествоДнейВГод);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				ПредставлениеПрава = ПредставлениеСтроки + ", " + ПредставлениеПрава;
			Иначе
				ПредставлениеПрава = ПредставлениеПрава + ?(НачалоНовойСтроки, "", ", ") + ПредставлениеСтроки;
				НачалоНовойСтроки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Заголовок = ?(РежимФормирования = 2, НСтр("ru = 'Изменены права на отпуска';
													|en = 'Leave entitlements are changed'"), НСтр("ru = 'Имеет право на ежегодные отпуска';
																							|en = 'Entitled to annual leaves'"));
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(Заголовок + ": ",,WebЦвета.Черный));
		
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПрава + " ",,WebЦвета.ТемноГрифельноСиний));
		
	КонецЕсли;
	
	Возврат МассивФорматированныхСтрок;
	
КонецФункции

// Формирует расширенное представление строки ежедневных отпусков.
Функция КомментарийИзменения(РасширеннаяСтрокаОтпуска)

	Если РасширеннаяСтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Отменить Тогда	
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска(НСтр("ru = 'отменено право на отпуск %1';
																|en = 'leave entitlement is canceled %1'"), РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	ИначеЕсли РасширеннаяСтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить Тогда	
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска(НСтр("ru = 'добавлено право на отпуск %1';
																|en = 'leave entitlement %1 is added'"), РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	ИначеЕсли РасширеннаяСтрокаОтпуска.КоличествоДнейВГод <> РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод
		И НЕ ЭтоСтажевыйОтпуск(РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
		НачалоСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'изменено право на отпуск %1 (%2 дн.';
				|en = 'changed leave entitlement %1 (%2 days'"),
			РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска,
			РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
		Если РасширеннаяСтрокаОтпуска.КоличествоДнейВГод > РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод Тогда
			КонецСтроки = " - " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'на %1 дн. больше)';
					|en = '%1 days more)'"),
				(РасширеннаяСтрокаОтпуска.КоличествоДнейВГод - РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод));
		Иначе	
			КонецСтроки = " - " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'на %1 дн. меньше)';
					|en = '%1 days less)'"),
				(РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод - РасширеннаяСтрокаОтпуска.КоличествоДнейВГод));
		КонецЕсли;
		ПредставлениеСтроки = НачалоСтроки + КонецСтроки;
	Иначе
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска("%1", РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	КонецЕсли;

	Возврат ПредставлениеСтроки;
	
КонецФункции

Функция ПредставлениеСтрокиОтпуска(ТекстКомментария, ВидЕжегодногоОтпуска, КоличествоДнейВГод)

	ТестСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, ВидЕжегодногоОтпуска);
	Если НЕ ЭтоСтажевыйОтпуск(ВидЕжегодногоОтпуска) Тогда
		ТестСтроки = ТестСтроки + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1 дн.)';
																									|en = '(%1 days)'"), КоличествоДнейВГод);
	КонецЕсли;
	
	Возврат ТестСтроки;

КонецФункции

// Удаляет дубли прав и формирует таблицу отпусков.
// 
Процедура СоздатьВТСобытияПравНаОтпуска(МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ДатаДействия,
		|	МАКСИМУМ(ЕСТЬNULL(ПраваНаОтпускаПредыдущее.ДатаДействия, ПраваНаОтпуска.ДатаДействия)) КАК ПредыдущаяДатаДействия,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТПредыдущиеУказатели
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаОтпуска КАК ПраваНаОтпускаПредыдущее
		|		ПО ПраваНаОтпуска.Сотрудник = ПраваНаОтпускаПредыдущее.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = ПраваНаОтпускаПредыдущее.ВидЕжегодногоОтпуска
		|			И ПраваНаОтпуска.ДатаДействия > ПраваНаОтпускаПредыдущее.ДатаДействия
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.ДатаДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ДатаДействия,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование,
		|	ПраваНаОтпуска.ПриоритетВидаЕжегодногоОтпуска,
		|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод,
		|	ПраваНаОтпуска.Предоставляется,
		|	ПраваНаОтпуска.Регистратор,
		|	ПраваНаОтпуска.ПредставлениеДокумента,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.ВторичнаяЗапись
		|			ТОГДА &ИзмененоПраво
		|		ИНАЧЕ ПраваНаОтпуска.ПредставлениеДокумента
		|	КОНЕЦ КАК Событие,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.ВторичнаяЗапись
		|			ТОГДА NULL
		|		ИНАЧЕ ПраваНаОтпуска.Регистратор
		|	КОНЕЦ КАК ДокументСобытие,
		|	ПраваНаОтпуска.ВторичнаяЗапись,
		|	ПраваНаОтпуска.ПересчетНеТребуется,
		|	ВЫБОР
		|		КОГДА ВТПредыдущиеУказатели.ДатаДействия = ВТПредыдущиеУказатели.ПредыдущаяДатаДействия
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПраваНаОтпуска.КоличествоДнейОтпускаВГод - ПраваНаОтпускаПредыдущее.КоличествоДнейОтпускаВГод = 0
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК ДублирующаяЗапись
		|ПОМЕСТИТЬ ВТПраваНаОтпускаБезДублей
		|ИЗ
		|	ВТПредыдущиеУказатели КАК ВТПредыдущиеУказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ПО ВТПредыдущиеУказатели.Сотрудник = ПраваНаОтпуска.Сотрудник
		|			И ВТПредыдущиеУказатели.ВидЕжегодногоОтпуска = ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|			И (НАЧАЛОПЕРИОДА(ВТПредыдущиеУказатели.ДатаДействия, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПраваНаОтпуска.ДатаДействия, ДЕНЬ))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПраваНаОтпуска КАК ПраваНаОтпускаПредыдущее
		|		ПО ВТПредыдущиеУказатели.Сотрудник = ПраваНаОтпускаПредыдущее.Сотрудник
		|			И ВТПредыдущиеУказатели.ВидЕжегодногоОтпуска = ПраваНаОтпускаПредыдущее.ВидЕжегодногоОтпуска
		|			И (НАЧАЛОПЕРИОДА(ВТПредыдущиеУказатели.ПредыдущаяДатаДействия, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПраваНаОтпускаПредыдущее.ДатаДействия, ДЕНЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПраваНаОтпускаБезДублей.Сотрудник КАК Сотрудник,
		|	ВТПраваНаОтпускаБезДублей.ДатаДействия КАК ДатаСобытия,
		|	ВТПраваНаОтпускаБезДублей.Событие,
		|	ВТПраваНаОтпускаБезДублей.ДокументСобытие,
		|	ВТПраваНаОтпускаБезДублей.ВидЕжегодногоОтпуска,
		|	ВТПраваНаОтпускаБезДублей.ВидЕжегодногоОтпускаНаименование,
		|	ВТПраваНаОтпускаБезДублей.ПриоритетВидаЕжегодногоОтпуска,
		|	ВТПраваНаОтпускаБезДублей.Предоставляется,
		|	ВТПраваНаОтпускаБезДублей.КоличествоДнейОтпускаВГод
		|ПОМЕСТИТЬ ВТСобытияПравНаОтпуска
		|ИЗ
		|	ВТПраваНаОтпускаБезДублей КАК ВТПраваНаОтпускаБезДублей
		|ГДЕ
		|	ВТПраваНаОтпускаБезДублей.ДублирующаяЗапись = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПредыдущиеУказатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПраваНаОтпускаБезДублей";
	
	Запрос.УстановитьПараметр("ИзмененоПраво", НСтр("ru = 'Изменено право на отпуск';
													|en = 'Changed leave entitlement'"));
	Запрос.Выполнить();

КонецПроцедуры

// Формирует таблицу событий изменения прав сотрудника.
//
Функция СобытияИзмененийПравСотрудника(МенеджерВременныхТаблиц, Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПрава.Сотрудник,
		|	ВТПрава.ДатаСобытия,
		|	ВТПрава.Событие,
		|	ВТПрава.ДокументСобытие,
		|	ВТПрава.ВидЕжегодногоОтпуска,
		|	ВТПрава.ВидЕжегодногоОтпускаНаименование,
		|	ВТПрава.Предоставляется,
		|	ВТПрава.КоличествоДнейОтпускаВГод
		|ИЗ
		|	ВТСобытияПравНаОтпуска КАК ВТПрава
		|ГДЕ
		|	ВТПрава.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТПрава.ДатаСобытия,
		|	ВТПрава.ПриоритетВидаЕжегодногоОтпуска,
		|	ВТПрава.ВидЕжегодногоОтпускаНаименование";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	ВыборкаСобытий = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ПраваНаОтпуска");
	
	Пока ВыборкаСобытий.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
		НовоеСобытие = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСобытие, ВыборкаСобытий);
		ПраваНаОтпуска = Новый Массив;
		Пока ВыборкаСобытий.Следующий() Цикл
			Событие = Новый Структура("ВидЕжегодногоОтпуска, ВидЕжегодногоОтпускаНаименование, Предоставляется, КоличествоДнейОтпускаВГод");
			ЗаполнитьЗначенияСвойств(Событие, ВыборкаСобытий);
			ПраваНаОтпуска.Добавить(Событие);
		КонецЦикла;
		НовоеСобытие.ПраваНаОтпуска = ПраваНаОтпуска;
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Формирует таблицу событий отпусков сотрудника.
//
Функция СобытияОтпусковСотрудника(МенеджерВременныхТаблиц, Сотрудник)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Отпуска", СостоянияСотрудников.СостоянияОтпусков());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеОтпуска.Документ КАК ДокументСобытие,
		|	ФактическиеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
		|	ФактическиеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
		|	ВЫБОР
		|		КОГДА СостоянияСотрудников.Период > ФактическиеОтпуска.ДатаНачалаОтпуска
		|			ТОГДА СостоянияСотрудников.Период
		|		ИНАЧЕ ФактическиеОтпуска.ДатаНачалаОтпуска
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА СостоянияСотрудников.ДействуетДо < ФактическиеОтпуска.ДатаОкончанияОтпуска
		|			ТОГДА СостоянияСотрудников.ДействуетДо
		|		ИНАЧЕ ФактическиеОтпуска.ДатаОкончанияОтпуска
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|		ПО ФактическиеОтпуска.Сотрудник = СостоянияСотрудников.Сотрудник
		|			И ФактическиеОтпуска.ДатаНачалаОтпуска <= СостоянияСотрудников.ДействуетДо
		|			И ФактическиеОтпуска.ДатаОкончанияОтпуска >= СостоянияСотрудников.Период
		|			И (СостоянияСотрудников.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1))
		|			И (СостоянияСотрудников.Состояние В (&Отпуска))
		|ГДЕ
		|	ФактическиеОтпуска.Сотрудник = &Сотрудник";
	
	ПериодыОтпусков = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод КАК ДатаСобытия,
		|	ФактическиеОтпуска.ПредставлениеДокумента КАК Событие,
		|	ФактическиеОтпуска.Документ КАК ДокументСобытие,
		|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
		|	ФактическиеОтпуска.КоличествоДнейОтпуска,
		|	ФактическиеОтпуска.ДатаНачалаОтпуска,
		|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ПредставлениеДокумента,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
		|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
		|	ФактическиеОтпуска.ОснованиеИзДокумента
		|ИЗ
		|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументСобытие,
		|	ДатаСобытия";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ФактическиеОтпуска");
	
	Отбор = Новый Структура("ДокументСобытие,ДатаНачалаОтпуска,ДатаОкончанияОтпуска");
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокументСобытие") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
			
			НовоеСобытие = ТаблицаСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСобытие, Выборка);
			
			ФактическиеОтпуска = Новый Массив;
			Пока Выборка.Следующий() Цикл
				
				ПериодыОтпуска = Новый Массив;
				ЗаполнитьЗначенияСвойств(Отбор, Выборка);
				НайденныеСтроки = ПериодыОтпусков.НайтиСтроки(Отбор);
				Для Каждого СтрокаПериода Из НайденныеСтроки Цикл 
					ПериодОтпуска = Новый Структура("ДатаНачала,ДатаОкончания", СтрокаПериода.ДатаНачала, СтрокаПериода.ДатаОкончания);
					ПериодыОтпуска.Добавить(ПериодОтпуска);
				КонецЦикла;
				
				Событие = Новый Структура("
                      |	ДатаОстатков,
                      |	ВидЕжегодногоОтпуска,
                      |	ВидЕжегодногоОтпускаНаименование,
                      |	КоличествоДнейОтпуска,
                      |	ДатаВхожденияВРабочийГод,
                      |	ДатаНачалаОтпуска,
                      |	ДатаОкончанияОтпуска,
                      |	Компенсация,
                      |	ДатаРегистрации,
                      |	РабочийПериодСИзДокумента,
                      |	РабочийПериодПоИзДокумента,
                      |	ОснованиеИзДокумента,
                      |	ПериодыОтпуска");
				ЗаполнитьЗначенияСвойств(Событие, Выборка);
				Событие.ПериодыОтпуска = ПериодыОтпуска;
				ФактическиеОтпуска.Добавить(Событие);
				
			КонецЦикла;
			
			НовоеСобытие.ФактическиеОтпуска = ФактическиеОтпуска;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

Функция СобытияОтклоненийСотрудника(МенеджерВременныхТаблиц, Сотрудник)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отклонения.ДатаНачалаОтсутствия КАК ДатаСобытия,
		|	Отклонения.Состояние КАК Состояние,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Отклонения.Состояние) КАК Событие,
		|	Отклонения.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
		|	Отклонения.ДатаОкончанияОтсутствия КАК ДатаОкончанияОтсутствия,
		|	Отклонения.КоличествоДнейОтсутствия КАК КоличествоДнейОтсутствия,
		|	Отклонения.КоличествоДнейПродления КАК КоличествоДнейПродления,
		|	Отклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
		|	ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК ВидОтпуска,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетВидаОтпуска,
		|	ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК РабочийГодДатаНачала,
		|	ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК РабочийГодДатаОкончания
		|ИЗ
		|	ВТОтклонения КАК Отклонения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО Отклонения.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И Отклонения.ДатаНачалаОтсутствия >= ЗаработанныеПраваНаОтпуска.ДатаНачала
		|			И Отклонения.ДатаНачалаОтсутствия <= ЗаработанныеПраваНаОтпуска.ДатаОкончания
		|ГДЕ
		|	Отклонения.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия,
		|	ПриоритетВидаОтпуска,
		|	ВидОтпуска";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("Отклонения");
	ТаблицаСобытий.Колонки.Добавить("РабочиеГодаОтпусков");
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
		
		НовоеСобытие = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСобытие, Выборка);
		
		ОтклонениеСотрудника = Новый Структура("
			|ДатаНачалаОтсутствия,
			|ДатаОкончанияОтсутствия,
			|КоличествоДнейОтсутствия,
			|КоличествоДнейПродления,
			|ЯвляетсяОтпускомБезСохраненияЗарплаты");
			
		ЗаполнитьЗначенияСвойств(ОтклонениеСотрудника, Выборка);
		НовоеСобытие.Отклонения = ОтклонениеСотрудника;
		
		МассивРабочихЛет = Новый Массив;
		Пока Выборка.Следующий() Цикл
			РабочийГод = Новый Структура("ВидОтпуска, РабочийГодДатаНачала, РабочийГодДатаОкончания");
			ЗаполнитьЗначенияСвойств(РабочийГод, Выборка);
			МассивРабочихЛет.Добавить(РабочийГод);
		КонецЦикла;
		НовоеСобытие.РабочиеГодаОтпусков = МассивРабочихЛет;
		
	КонецЦикла;
	
	Возврат ТаблицаСобытий;

КонецФункции

Процедура ЗаменитьРеквизитыСобытийПоНачальнымОстаткамСотрудника(ТаблицаСобытий, МенеджерВременныхТаблиц, Сотрудник)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачальныеОстатки.ДатаОстатка КАК ДатаСобытия,
		|	НачальныеОстатки.ВидЕжегодногоОтпуска,
		|	НачальныеОстатки.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
		|	НачальныеОстатки.ПриоритетВидаЕжегодногоОтпуска КАК ПриоритетВидаЕжегодногоОтпуска,
		|	НачальныеОстатки.КоличествоДней,
		|	НачальныеОстатки.РабочийГодНачало,
		|	НачальныеОстатки.РабочийГодОкончание,
		|	НачальныеОстатки.Регистратор
		|ИЗ
		|	ВТНачальныеОстатки КАК НачальныеОстатки
		|ГДЕ
		|	НачальныеОстатки.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия,
		|	ПриоритетВидаЕжегодногоОтпуска,
		|	ВидЕжегодногоОтпускаНаименование";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
		Событие = ТаблицаСобытий.Найти(Выборка.ДатаСобытия, "ДатаСобытия");
		Если Событие <> Неопределено Тогда
			Событие.Событие = НСтр("ru = 'Введены начальные данные';
									|en = 'Initial data is entered'");
			Событие.ДокументСобытие = Выборка.Регистратор;
			ОстаткиНаДату = Новый Массив;
			Пока Выборка.Следующий() Цикл
				ОстаткиВРазрезе = Новый Структура("
						|ВидЕжегодногоОтпуска,
						|ВидЕжегодногоОтпуска,
						|ВидЕжегодногоОтпускаНаименование,
						|КоличествоДней,
						|РабочийГодНачало,
						|РабочийГодОкончание");
				ЗаполнитьЗначенияСвойств(ОстаткиВРазрезе, Выборка);
				ОстаткиНаДату.Добавить(ОстаткиВРазрезе);
			КонецЦикла;
			Событие.НачальныеОстаткиОтпусков = ОстаткиНаДату;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьЗаработанныеДниВТаблицеСобытий(ТаблицаСобытий, ЗаработанныеОтпускаСотрудника, ТаблицаЗаработанныхДнейОтпусковСотрудника, ЗаработанныеОтпускаПоРабочимГодам)
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаНакопленныхДней Из ЗаработанныеОтпускаСотрудника Цикл
		Если ПредыдущаяСтрока <> Неопределено 
			И (СтрокаНакопленныхДней.ВидЕжегодногоОтпуска <> ПредыдущаяСтрока.ВидЕжегодногоОтпуска 
			Или СтрокаНакопленныхДней.ДатаНачала <> ПредыдущаяСтрока.ДатаНачала 
			Или СтрокаНакопленныхДней.ДатаОкончания <> ПредыдущаяСтрока.ДатаОкончания) Тогда
			ЗаполнитьЗначенияСвойств(ЗаработанныеОтпускаПоРабочимГодам.Добавить(), ПредыдущаяСтрока);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТаблицаЗаработанныхДнейОтпусковСотрудника.Добавить(), СтрокаНакопленныхДней);
		ПредыдущаяСтрока = СтрокаНакопленныхДней;
	КонецЦикла; 
	
	Если ПредыдущаяСтрока <> Неопределено Тогда 
		ЗаполнитьЗначенияСвойств(ЗаработанныеОтпускаПоРабочимГодам.Добавить(), ПредыдущаяСтрока);
	КонецЕсли;
	
	ПредыдущийВидОтпуска = Неопределено;
	ПредыдущееКоличествоДней = 0;
	Для Каждого РабочийГод Из ЗаработанныеОтпускаПоРабочимГодам Цикл
		Если РабочийГод.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда 
			ПредыдущееКоличествоДней = 0;
		КонецЕсли;
		КоличествоДней = РабочийГод.КоличествоДней - ПредыдущееКоличествоДней;
		ПредыдущийВидОтпуска = РабочийГод.ВидЕжегодногоОтпуска;
		ПредыдущееКоличествоДней = РабочийГод.КоличествоДней;
		РабочийГод.КоличествоДней = КоличествоДней;
	КонецЦикла;
	
	Если ТаблицаСобытий.Количество() > 0 Тогда
		ДатаПредыдущегоСобытия = ТаблицаСобытий[0].ДатаСобытия;
	КонецЕсли;
	
	Для каждого Событие Из ТаблицаСобытий Цикл
		Событие.ДатаПредыдущегоСобытия = ДатаПредыдущегоСобытия;
		Событие.НакопленоСПредыдущегоСобытия = МассивНакопленныхОтпусков(Событие.ДатаСобытия, Событие.ДатаПредыдущегоСобытия, ТаблицаЗаработанныхДнейОтпусковСотрудника);
		ДатаПредыдущегоСобытия = Событие.ДатаСобытия;
	КонецЦикла; 

КонецПроцедуры

// Считает накопленные права на отпуск за период.
Функция МассивНакопленныхОтпусков(ДатаСобытия, ДатаПредыдущегоСобытия,ТаблицаНакопленныхПрав);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаНакопленныхПрав.ВидЕжегодногоОтпуска,
	                      |	ТаблицаНакопленныхПрав.ДатаНачала,
	                      |	ТаблицаНакопленныхПрав.ДатаОкончания,
	                      |	ТаблицаНакопленныхПрав.Период,
	                      |	ТаблицаНакопленныхПрав.КоличествоДней,
	                      |	ТаблицаНакопленныхПрав.КоличествоДнейЗаПериод
	                      |ПОМЕСТИТЬ ВТНакопленныеДни
	                      |ИЗ
	                      |	&ТаблицаНакопленныхПрав КАК ТаблицаНакопленныхПрав
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	МАКСИМУМ(ВТНакопленныеДни.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТУказатели
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |ГДЕ
	                      |	ВТНакопленныеДни.Период <= &ДатаСобытия
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	ВТНакопленныеДни.КоличествоДней КАК НакопленоЗаПериод
	                      |ПОМЕСТИТЬ ВТНакоплено
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказатели КАК ВТУказатели
	                      |		ПО ВТНакопленныеДни.ВидЕжегодногоОтпуска = ВТУказатели.ВидЕжегодногоОтпуска
	                      |			И ВТНакопленныеДни.Период = ВТУказатели.Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	МАКСИМУМ(ВТНакопленныеДни.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТПредыдущиеУказатели
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |ГДЕ
	                      |	ВТНакопленныеДни.Период <= &ДатаПредыдущегоСобытия
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	ВТНакопленныеДни.КоличествоДней КАК НакопленоЗаПредыдущийПериод
	                      |ПОМЕСТИТЬ ВТНакопленоПредыдущее
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредыдущиеУказатели КАК ВТПредыдущиеУказатели
	                      |		ПО ВТНакопленныеДни.ВидЕжегодногоОтпуска = ВТПредыдущиеУказатели.ВидЕжегодногоОтпуска
	                      |			И ВТНакопленныеДни.Период = ВТПредыдущиеУказатели.Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакоплено.ВидЕжегодногоОтпуска,
	                      |	ВТНакоплено.НакопленоЗаПериод - ЕСТЬNULL(ВТНакопленоПредыдущее.НакопленоЗаПредыдущийПериод, 0) КАК КоличествоДнейЗаПериод
	                      |ИЗ
	                      |	ВТНакоплено КАК ВТНакоплено
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленоПредыдущее КАК ВТНакопленоПредыдущее
	                      |		ПО ВТНакоплено.ВидЕжегодногоОтпуска = ВТНакопленоПредыдущее.ВидЕжегодногоОтпуска");
	
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ДатаПредыдущегоСобытия", ДатаПредыдущегоСобытия);
	Запрос.УстановитьПараметр("ТаблицаНакопленныхПрав", ТаблицаНакопленныхПрав);
	
	МассивНакопленныхОтпусков = Новый Массив;
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтруктураВидаОтпуска = Новый Структура;
		СтруктураВидаОтпуска.Вставить("ВидЕжегодногоОтпуска", ВыборкаЗапроса.ВидЕжегодногоОтпуска);
		СтруктураВидаОтпуска.Вставить("КоличествоДнейЗаПериод", ВыборкаЗапроса.КоличествоДнейЗаПериод);
		МассивНакопленныхОтпусков.Добавить(СтруктураВидаОтпуска);
	КонецЦикла;
	
	Возврат МассивНакопленныхОтпусков;

КонецФункции

// Заполняет строки табличной части прав отпусков сводной информацией об остатках отпусков из второй табличной части.
Процедура ЗаполнитьОстатокПоОстаткамОтпусков(Сотрудник, ТЧЕжегодныеОтпуска, ТЧОстаткиОтпусков) Экспорт

	СвернутыеОстатки = ТЧОстаткиОтпусков.Скопировать(,"ВидЕжегодногоОтпуска, Остаток, ДатаОстатка");
	СвернутыеОстатки.Свернуть("ВидЕжегодногоОтпуска, ДатаОстатка", "Остаток");
	
	Для каждого Остаток Из СвернутыеОстатки Цикл
		МассивСтрок = ТЧЕжегодныеОтпуска.НайтиСтроки(Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", Сотрудник, Остаток.ВидЕжегодногоОтпуска));
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОтпуска = МассивСтрок[0];
		Иначе
			СтрокаОтпуска = ТЧЕжегодныеОтпуска.Добавить();
			СтрокаОтпуска.Сотрудник = Сотрудник;
			СтрокаОтпуска.ВидЕжегодногоОтпуска = Остаток.ВидЕжегодногоОтпуска;
			СтрокаОтпуска.ДатаОстатка = Остаток.ДатаОстатка;
		КонецЕсли;
		СтрокаОтпуска.КоличествоДней = Остаток.Остаток;
	КонецЦикла; 

КонецПроцедуры

// Проверяем корректность заполнения документов ввода остатков отпусков в разрезе рабочих лет.
//
Функция ДокументВводаОстатковОтпусковЗаполненКорректно(Форма) Экспорт
	
	Ошибки = Неопределено;
	ПроверкаДляФормы = ТипЗнч(Форма)=Тип("ФормаКлиентскогоПриложения");
	Если ПроверкаДляФормы Тогда
		ПутьКДаннымФормы = "";
	Иначе
		ПутьКДаннымФормы = "Объект.";
	КонецЕсли;
	
	ПутьКДанным = ПутьКДаннымФормы + "ЕжегодныеОтпуска[%1]";
	ПутьКДаннымПоГодам = ПутьКДаннымФормы + "ОстаткиОтпусковПоРабочимГодам[%1]";
	
	Если НЕ ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			ПутьКДаннымФормы + "ДатаОстатков",
			НСтр("ru = 'Не заполнена дата остатков.';
				|en = 'Remaining leave date is not populated.'"),
			"");
	КонецЕсли;
	
	Для каждого СтрокаОтпуска Из Форма.ЕжегодныеОтпуска Цикл
		НомерСтроки = Форма.ЕжегодныеОтпуска.Индекс(СтрокаОтпуска);
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным + ".ВидЕжегодногоОтпуска",
				НСтр("ru = 'Не заполнен вид ежегодного отпуска';
					|en = 'Annual leave kind is not entered'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		ПараметрыОтбора = Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска);
		Если Форма.ЕжегодныеОтпуска.НайтиСтроки(ПараметрыОтбора).Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным + ".ВидЕжегодногоОтпуска",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вид отпуска ""%1"" использован в нескольких строках';
																			|en = 'Leave kind ""%1"" is used in several lines'"),СтрокаОтпуска.ВидЕжегодногоОтпуска),
				"",
				НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаОтпуска Из Форма.ОстаткиОтпусковПоРабочимГодам Цикл
		НомерСтроки = Форма.ОстаткиОтпусковПоРабочимГодам.Индекс(СтрокаОтпуска);
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".ВидЕжегодногоОтпуска",
				НСтр("ru = 'Не заполнен вид ежегодного отпуска';
					|en = 'Annual leave kind is not entered'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.РабочийГодНачало) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодНачало",
				НСтр("ru = 'Не заполнена дата начала периода.';
					|en = 'Period start date is not filled in.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.РабочийГодОкончание) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодОкончание",
				НСтр("ru = 'Не заполнена дата окончания периода.';
					|en = 'Period end date is not filled in.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если СтрокаОтпуска.РабочийГодОкончание < СтрокаОтпуска.РабочийГодНачало Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодНачало",
				НСтр("ru = 'Не верно заполнен период работы, за который предоставлялся последний отпуск.';
					|en = 'Work period for which the last leave was granted is filled in incorrectly.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	ПроверитьПрерыванияПериодовПоВидуОтпуска(Форма.ОстаткиОтпусковПоРабочимГодам, ПутьКДаннымПоГодам, Ошибки);
	ПроверитьКорректностьДатПоследнегоПериода(Форма.ОстаткиОтпусковПоРабочимГодам, Форма.ДатаОстатков, ПутьКДаннымПоГодам, Ошибки);
	
	ЕстьОшибки = НЕ Ошибки = Неопределено;
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияЕжегодныхОтпусковПозицийВДокументе(ТабличнаяЧастьПозиции, ТабличнаяЧастьЕжегодныеОтпуска, ПроверяемыеРеквизиты, Отказ) Экспорт
	
	ВидыОтпусковПозиций = Новый Соответствие;
	
	Ошибки = Неопределено;
	Для каждого СтрокаПозиции Из ТабличнаяЧастьПозиции Цикл
		
		ЕжегодныеОтпускаПозиции = ТабличнаяЧастьЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
		Если ЕжегодныеОтпускаПозиции.Количество() > 0 Тогда
			
			ВидыОтпусковПозиции = ВидыОтпусковПозиций.Получить(СтрокаПозиции.ИдентификаторСтрокиПозиции);
			Если ВидыОтпусковПозиции = Неопределено Тогда
				ВидыОтпусковПозиции = Новый Соответствие;
			КонецЕсли;
			
			Для каждого ЕжегодныйОтпуск Из ЕжегодныеОтпускаПозиции Цикл
				
				ХарактерЗависимостиДнейОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска");
				Если ХарактерЗависимостиДнейОтпуска = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит")
					И ЕжегодныйОтпуск.КоличествоДнейВГод = 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Для вида отпуска %1 не заполнено количество дней в год.';
													|en = 'Number of days per year is not filled in for the %1 leave kind.'"), ЕжегодныйОтпуск.ВидЕжегодногоОтпуска);
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"Объект.Позиции[%1].Должность",
						ТекстСообщения,
						"",
						ТабличнаяЧастьПозиции.Индекс(СтрокаПозиции));
					
				КонецЕсли;
				
				Если ВидыОтпусковПозиции.Получить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска) = Неопределено Тогда
					ВидыОтпусковПозиции.Вставить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, Истина);
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Повторяется вид отпуска %1.';
													|en = 'The %1 leave kind is repeated.'"), ЕжегодныйОтпуск.ВидЕжегодногоОтпуска);
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"Объект.Позиции[%1].Должность",
						ТекстСообщения,
						"",
						ТабличнаяЧастьПозиции.Индекс(СтрокаПозиции));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ЕжегодныеОтпуска.КоличествоДнейВГод");
	
	ЕстьОшибки = (НЕ Ошибки = Неопределено);
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяем корректность заполнения ТЧ ЕжегодныеОтпуска в документах и справочниках.
//
Процедура ОбработкаПроверкиЗаполненияТЧЕжегодныеОтпуска(ТабличнаяЧасть, ПроверяемыеРеквизиты, Отказ) Экспорт
	
	ВидыОтпусковПозиции = Новый Соответствие;
	Ошибки = Неопределено;
	
	Для каждого ЕжегодныйОтпуск Из ТабличнаяЧасть Цикл
		
		ХарактерЗависимостиДнейОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска");
		Если ХарактерЗависимостиДнейОтпуска = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит")
			И ЕжегодныйОтпуск.КоличествоДнейВГод = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ЕжегодныеОтпуска[%1].КоличествоДнейВГод",
				НСтр("ru = 'Не заполнено количество дней в год.';
					|en = 'Number of days per year is not filled in.'"),
				"",
				ТабличнаяЧасть.Индекс(ЕжегодныйОтпуск));
			
		КонецЕсли;
		
		Если ВидыОтпусковПозиции.Получить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска) = Неопределено Тогда
			ВидыОтпусковПозиции.Вставить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, Истина);
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Повторяется вид отпуска %1.';
											|en = 'The %1 leave kind is repeated.'"), ЕжегодныйОтпуск.ВидЕжегодногоОтпуска);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ЕжегодныеОтпуска[%1].ВидЕжегодногоОтпуска",
				ТекстСообщения,
				"",
				ТабличнаяЧасть.Индекс(ЕжегодныйОтпуск));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ЕжегодныеОтпуска.КоличествоДнейВГод");
	
	ЕстьОшибки = (НЕ Ошибки = Неопределено);
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПрерыванияПериодовПоВидуОтпуска(ДанныеФормы, ПутьКДанным, Ошибки) Экспорт

	ТаблицаЗначений = ДанныеФормы.Выгрузить();
	ТаблицаЗначений.Сортировать("ВидЕжегодногоОтпуска, РабочийГодНачало");
	
	Для каждого СтрокаОстатка Из ТаблицаЗначений Цикл
	
		Если ТаблицаЗначений.Индекс(СтрокаОстатка) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредыдущаяСтрока = ТаблицаЗначений[ТаблицаЗначений.Индекс(СтрокаОстатка)-1];
			
		Если ПредыдущаяСтрока.ВидЕжегодногоОтпуска <> СтрокаОстатка.ВидЕжегодногоОтпуска Тогда
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(КонецДня(ПредыдущаяСтрока.РабочийГодОкончание)+1) <> НачалоДня(СтрокаОстатка.РабочийГодНачало) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Периоды отпуска ""%1"" указаны неверно. Периоды не должны прерываться или накладываться друг на друга.';
																			|en = 'The ""%1"" leave periods are specified incorrectly. Periods should not be interrupted or overlap.'"), СтрокаОстатка.ВидЕжегодногоОтпуска),
				"",ТаблицаЗначений.Индекс(СтрокаОстатка));
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ПроверитьКорректностьДатПоследнегоПериода(ДанныеФормы, ДатаОстатков, ПутьКДанным, Ошибки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ВидЕжегодногоОтпуска,
		|	ТЗ.РабочийГодНачало,
		|	ТЗ.РабочийГодОкончание
		|ПОМЕСТИТЬ ВТОстатки
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстатки.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ВТОстатки.РабочийГодОкончание) КАК РабочийГодОкончание
		|ПОМЕСТИТЬ ВТПоследниеРабочиеГода
		|ИЗ
		|	ВТОстатки КАК ВТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОстатки.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстатки.ВидЕжегодногоОтпуска,
		|	ВТОстатки.РабочийГодНачало,
		|	ВТОстатки.РабочийГодОкончание,
		|	ВЫБОР
		|		КОГДА &ДатаОстатков МЕЖДУ ВТОстатки.РабочийГодНачало И ВТОстатки.РабочийГодОкончание
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВведенНеКорректно
		|ПОМЕСТИТЬ ИтоговыеПериоды
		|ИЗ
		|	ВТОстатки КАК ВТОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеРабочиеГода КАК ВТПоследниеРабочиеГода
		|		ПО ВТОстатки.ВидЕжегодногоОтпуска = ВТПоследниеРабочиеГода.ВидЕжегодногоОтпуска
		|			И ВТОстатки.РабочийГодОкончание = ВТПоследниеРабочиеГода.РабочийГодОкончание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеПериоды.ВидЕжегодногоОтпуска
		|ИЗ
		|	ИтоговыеПериоды КАК ИтоговыеПериоды
		|ГДЕ
		|	ИтоговыеПериоды.ВведенНеКорректно";
	Запрос.УстановитьПараметр("ТЗ", ДанныеФормы.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			ПутьКДанным,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Последний период остатков отпуска ""%1"" должен захватывать дату остатков.';
																		|en = 'Last remaining leave period ""%1"" should contain remaining period date.'"),ВыборкаДетальныеЗаписи.ВидЕжегодногоОтпуска),
			"");
	КонецЦикла;

КонецПроцедуры

Процедура УчестьВведенныеВДокументеОтпуска(ОстаткиОтпусковСотрудников, ОтпускаДокумента) Экспорт 
	
	СтрокиКДобавлению = Новый Массив;
	СтрокиКУдалению = Новый Массив;
	ОсновнойОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	
	Для Каждого ОтпускДокумента Из ОтпускаДокумента Цикл 
		ОсталосьСписать = ОтпускДокумента.КоличествоДней;
		Отбор = Новый Структура("Сотрудник, ВидОтпуска", ОтпускДокумента.Сотрудник, ОтпускДокумента.ВидОтпуска);
		НайденныеСтроки = ОстаткиОтпусковСотрудников.НайтиСтроки(Отбор);
		Для Каждого СтрокаОстатков Из НайденныеСтроки Цикл
			КоличествоДней = Мин(ОсталосьСписать, СтрокаОстатков.Дни);
			СтрокаОстатков.Дни = СтрокаОстатков.Дни - КоличествоДней;
			ОсталосьСписать = ОсталосьСписать - КоличествоДней;
			Если СтрокаОстатков.Дни = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОстатков);
			КонецЕсли;
		КонецЦикла;
		Если ОсталосьСписать > 0 Тогда
			ДанныеСтроки = Новый Структура("Сотрудник, ВидОтпуска, Дни, Приоритет");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ОтпускДокумента);
			ДанныеСтроки.Дни = -ОсталосьСписать;
			ДанныеСтроки.Приоритет = ?(ДанныеСтроки.ВидОтпуска = ОсновнойОтпуск, 1, 0);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ОстаткиОтпусковСотрудников.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из СтрокиКДобавлению Цикл
		ЗаполнитьЗначенияСвойств(ОстаткиОтпусковСотрудников.Добавить(), ДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

#Область СтажевыеОтпуска

Процедура СоздатьВТВидыОтпусковЗависящиеОтСтажа(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТВидыОтпусковЗависящиеОтСтажа
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)";
	
	Запрос.Выполнить();

КонецПроцедуры

Функция ЭтоСтажевыйОтпуск(ВидОтпуска) Экспорт
	ХарактерЗависимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ХарактерЗависимостиДнейОтпуска");
	Возврат (ХарактерЗависимости = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа"));
КонецФункции 

#Область ФормыСтажевыхОтпусков

// Возвращает структуру с параметрами для ДополнитьТабличнуюЧастьСтажевымиЭлементами.
//
Функция ПараметрыДляДополнитьТабличнуюЧастьСтажевымиЭлементами() Экспорт 

	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Форма");
	ПараметрыВызова.Вставить("ИмяТаблицы");
	ПараметрыВызова.Вставить("ТабличнаяЧастьВОбъекте", Ложь);
	ПараметрыВызова.Вставить("ЗаполнятьРеквизитыПоСотруднику", Ложь);
	ПараметрыВызова.Вставить("Сотрудник");
	ПараметрыВызова.Вставить("ДатаСреза");

	Возврат ПараметрыВызова;
	
КонецФункции

// Дополняет форму "виртуальными" колонками, необходимыми для стажевых отпусков
// 
Процедура ДополнитьТабличнуюЧастьСтажевымиЭлементами(ПараметрыВызова) Экспорт

	ПутьКТаблице = ?(ПараметрыВызова.ТабличнаяЧастьВОбъекте, "Объект.", "") + ПараметрыВызова.ИмяТаблицы;
	
	Форма = ПараметрыВызова.Форма;
	
	// Добавляем реквизит
	МассивРеквизитов = Новый Массив;
	Если Форма.Элементы.Найти("ОписаниеСтажевыхПоказателей") = Неопределено Тогда
		РеквизитОписаниеСтажевыхПоказателей = Новый РеквизитФормы("ОписаниеСтажевыхПоказателей", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		МассивРеквизитов.Добавить(РеквизитОписаниеСтажевыхПоказателей);
	КонецЕсли;
	Если Форма.Элементы.Найти("ОтпускЗависитОтСтажа") = Неопределено Тогда
		РеквизитОписаниеСтажевыхПоказателей = Новый РеквизитФормы("ОтпускЗависитОтСтажа", Новый ОписаниеТипов("Булево"), ПутьКТаблице);
		МассивРеквизитов.Добавить(РеквизитОписаниеСтажевыхПоказателей);
	КонецЕсли;
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКТаблице);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, МассивРеквизитов, МассивИменРеквизитовФормы);
	
	Если ПараметрыВызова.ТабличнаяЧастьВОбъекте Тогда
		ТЧЕжегодныеОтпуска = Форма.Объект[ПараметрыВызова.ИмяТаблицы];
	Иначе
		ТЧЕжегодныеОтпуска = Форма[ПараметрыВызова.ИмяТаблицы];
	КонецЕсли; 
	
	Если ПараметрыВызова.ЗаполнятьРеквизитыПоСотруднику Тогда
		ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ТЧЕжегодныеОтпуска, ПараметрыВызова.Сотрудник, ПараметрыВызова.ДатаСреза);
		
		// Добавляем элементы формы
		ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Найти(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		Если ПолеОписаниеСтажевыхПоказателей = Неопределено Тогда
			ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Добавить(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей", Тип("ПолеФормы"), Форма.Элементы["ЕжегодныеОтпускаГруппаВидОтпуска"]);
			ПолеОписаниеСтажевыхПоказателей.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеОписаниеСтажевыхПоказателей.ТолькоПросмотр = Истина;
			ПолеОписаниеСтажевыхПоказателей.ОтображатьВШапке = Ложь;
			ПолеОписаниеСтажевыхПоказателей.Ширина = 11;
			ПолеОписаниеСтажевыхПоказателей.РастягиватьПоГоризонтали = Истина;
			ПолеОписаниеСтажевыхПоказателей.ГиперссылкаЯчейки = Истина;
			ПолеОписаниеСтажевыхПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			ПолеОписаниеСтажевыхПоказателей.ПутьКДанным = ПутьКТаблице + ".ОписаниеСтажевыхПоказателей";
		КонецЕсли;
		
		// Добавляем условное оформление
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтпускЗависитОтСтажа" );
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		
	Иначе
		ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ТЧЕжегодныеОтпуска);
	КонецЕсли;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтпускЗависитОтСтажа" );
	ЭлементОтбора.ПравоеЗначение = Истина;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВызова.ИмяТаблицы + "КоличествоДнейВГод");
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСтажевыхРеквизитовВСтроке(СтрокаОтпуска, Сотрудник = Неопределено, ДатаСреза = Неопределено) Экспорт

	ДатаСреза = ?(ДатаСреза = Неопределено, Дата(1,1,1), ДатаСреза);
	
	СтрокаОтпуска.ОтпускЗависитОтСтажа = ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска);
	Если СтрокаОтпуска.ОтпускЗависитОтСтажа Тогда
		
		СтрокаОтпуска.КоличествоДнейВГод = 0;
		
		Если Сотрудник = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Получим стажи сотрудника.
		ВидСтажаОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтпуска.ВидЕжегодногоОтпуска, "ВидСтажа");
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		СтрокаСотрудник = ТаблицаСотрудников.Добавить();
		СтрокаСотрудник.Сотрудник = Сотрудник;
		СтрокаСотрудник.Период = ДатаСреза;
		
		СтажиСотрудников = КадровыйУчетРасширенный.СведенияОСтажахСотрудников(ТаблицаСотрудников);
		СтажиСотрудника = СтажиСотрудников.Получить(Сотрудник);
		НужныйОтпускуСтажСотрудника = СтажиСотрудника.Получить(ВидСтажаОтпуска);
		
		СтрокаОтпуска.ОписаниеСтажевыхПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставленияКомандыВводаСтажейСотрудника(
						СтажиСотрудника, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидСтажаОтпуска));
	Иначе
						
		СтрокаОтпуска.ОписаниеСтажевыхПоказателей = "";
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ДанныеТЧФормы, Сотрудник = Неопределено, ДатаСреза = Неопределено) Экспорт
	
	Для каждого ПравоНаОтпуск Из ДанныеТЧФормы Цикл
		ЗаполнитьЗначенияСтажевыхРеквизитовВСтроке(ПравоНаОтпуск, Сотрудник, ДатаСреза);
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти 

#Область ДвиженияСтажевыхОтпусков

// Процедура проверяет взаимосвязи вторичных стажевых движений по регистру сведений ПоложенныеВидыЕжегодныхОтпусков.
// В случае необходимости - корректирует записи прошлых документов.
//
Процедура ОчиститьПредыдущиеДвиженияСтажевыхОтпусков(Источник, Отказ, Замещение) Экспорт

	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	// Запись отдельного набора в котором не нужно проводить обработку
	// начислений зависящих от стажа.
	Если Источник.ДополнительныеСвойства.Свойство("НеДобавлятьВторичныеЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли; 
	
	// Выбираем движения отпусков, зависящих от стажа.
	МенеджерВременныхТаблицТекущий = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицТекущий;
	
	СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(Источник, МенеджерВременныхТаблицТекущий);

	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа") Тогда
		Возврат;
	КонецЕсли;
		
	// Выбираем движения, которые "наползают" на Источник.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.РегистраторПредыдущий КАК Регистратор
		|ПОМЕСТИТЬ ВТОбновляемыеРегистраторы
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.Добавляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.РегистраторПредыдущий ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеРегистраторы КАК ВТОбновляемыеРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТОбновляемыеРегистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СведенияОДвиженииПоложенныхОтпусков.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска
		|			И НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(СведенияОДвиженииПоложенныхОтпусков.Период, ДЕНЬ)
		|			И (ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись)
		|			И (СведенияОДвиженииПоложенныхОтпусков.Добавляется)
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусков.Период ЕСТЬ NULL 
		|ИТОГИ ПО
		|	Регистратор";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоРегистраторам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			
			Набор = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
			
			ВыборкаПоЗаписям = ВыборкаПоРегистраторам.Выбрать();
			Пока ВыборкаПоЗаписям.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), ВыборкаПоЗаписям);
			КонецЦикла; 
			
			Набор.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;

	Источник.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблицТекущий);
	
КонецПроцедуры

// Процедура дополняет стажевые движения вторичными стажевыми записями.
//
Процедура ДополнитьДвиженияСтажевыхОтпусков(Источник, Отказ, Замещение) Экспорт

	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	// Запись отдельного набора в котором не нужно проводить обработку
	// отпусков зависящих от стажа.
	Если Источник.ДополнительныеСвойства.Свойство("НеДобавлятьВторичныеЗаписи") Тогда
		Возврат;
	КонецЕсли; 
	
	// МенеджерВременныхТаблиц должен быть сформирован ПередЗаписью
	Если НЕ Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли;
	МенеджерВременныхТаблицТекущий = Источник.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Источник.ДополнительныеСвойства.Удалить("МенеджерВременныхТаблиц");
	
	// В случае, если есть зависящие от стажа отпуска, генерируем вторичные стажевые записи.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицТекущий;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	НЕ СведенияОДвиженииПоложенныхОтпусков.Удаляется";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Если ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(Источник, МенеджерВременныхТаблицТекущий) Тогда
			Источник.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
			Источник.ОбменДанными.Загрузка = Истина;
			Источник.Записать();
		КонецЕсли; 
	КонецЕсли;

	// В случае если движения удаляются - надо "продлить" вторичные движения предыдущего регистратора.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий КАК Регистратор
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусков.Удаляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий ЕСТЬ NULL";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Получим набор записей предыдущего регистратора.
			Набор = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Набор.Прочитать();
			// Генерируем для него вторичные стажевые записи.
			МенеджерВременныхТаблицПоНаборуЗаписей = Новый МенеджерВременныхТаблиц;
			СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(Набор, МенеджерВременныхТаблицПоНаборуЗаписей);
			Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблицПоНаборуЗаписей, "ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа") Тогда
				Продолжить;
			КонецЕсли; 
			Если ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(Набор, МенеджерВременныхТаблицПоНаборуЗаписей) Тогда
				Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				Набор.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
				Набор.Записать();
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(НаборЗаписей, МенеджерВременныхТаблиц) Экспорт
		
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	ЗаписываемыйНабор = НаборЗаписей.Выгрузить();
	
	// Устанавливаем время.
	ВремяРегистрацииДокумента = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	Если ВремяРегистрацииДокумента = Неопределено Тогда
		СотрудникиДаты = ЗаписываемыйНабор.Скопировать(, "Период, Сотрудник");
		СотрудникиДаты.Колонки.Период.Имя = "ДатаСобытия";
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, СотрудникиДаты);
	КонецЕсли;
	Для Каждого СтрокаДвижений Из ЗаписываемыйНабор Цикл
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(НачалоДня(СтрокаДвижений.Период));
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			СтрокаДвижений.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидОтпуска
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)";
	
	МассивВидовОтпусков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтпуска");
	
	ЕстьВНабореСтажевыйОтпуск = Ложь;
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		
		Если МассивВидовОтпусков.Найти(СтрокаНабора.ВидЕжегодногоОтпуска) <> Неопределено Тогда
			ЕстьВНабореСтажевыйОтпуск = Истина;
		КонецЕсли;		
		
	КонецЦикла;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле
	|ИЗ
	|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
	|ГДЕ
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор = &Регистратор
	|	И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска В(&ВидыОтпусковЗависящихОтСтажа)";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ВидыОтпусковЗависящихОтСтажа", МассивВидовОтпусков);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не ЕстьВНабореСтажевыйОтпуск 
		И РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка) КАК ВидЕжегодногоОтпуска,
		|	ЛОЖЬ КАК Используется,
		|	0 КАК КоличествоДнейВГод,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЛОЖЬ КАК ИспользуетсяПоОкончании,
		|	0 КАК КоличествоДнейВГодПоОкончании,
		|	ЛОЖЬ КАК ПересчетНеТребуется,
		|	ЛОЖЬ КАК ВторичнаяЗапись,
		|	ЛОЖЬ КАК Добавляется,
		|	ЛОЖЬ КАК Удаляется,
		|	ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатковОтпусков.ПустаяСсылка) КАК РегистраторПредыдущий,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодПоследующегоРегистратора,
		|	ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатковОтпусков.ПустаяСсылка) КАК РегистраторПоследующий
		|ПОМЕСТИТЬ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа";

		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;	
	
	СоздатьВТВидыОтпусковЗависящиеОтСтажа(Запрос.МенеджерВременныхТаблиц);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ЗаписываемыйНабор", ЗаписываемыйНабор);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписываемыйНабор.Период,
		|	&Регистратор КАК Регистратор,
		|	ЗаписываемыйНабор.Сотрудник,
		|	ЗаписываемыйНабор.ВидЕжегодногоОтпуска,
		|	ЗаписываемыйНабор.Используется,
		|	ЗаписываемыйНабор.КоличествоДнейВГод,
		|	ЗаписываемыйНабор.ДействуетДо,
		|	ЗаписываемыйНабор.ИспользуетсяПоОкончании,
		|	ЗаписываемыйНабор.КоличествоДнейВГодПоОкончании,
		|	ЗаписываемыйНабор.ПересчетНеТребуется,
		|	ЗаписываемыйНабор.ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТЗаписываемыйНабор
		|ИЗ
		|	&ЗаписываемыйНабор КАК ЗаписываемыйНабор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТТекущийНабор
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОтпусковЗависящиеОтСтажа КАК ВидыОтпусковЗависящиеОтСтажа
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВидыОтпусковЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТекущийНабор.Период, ЗаписываемыйНабор.Период) КАК Период,
		|	ЕСТЬNULL(ТекущийНабор.Регистратор, ЗаписываемыйНабор.Регистратор) КАК Регистратор,
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ТекущийНабор.ВидЕжегодногоОтпуска, ЗаписываемыйНабор.ВидЕжегодногоОтпуска) КАК ВидЕжегодногоОтпуска,
		|	ЕСТЬNULL(ТекущийНабор.Используется, ЗаписываемыйНабор.Используется) КАК Используется,
		|	ЕСТЬNULL(ТекущийНабор.КоличествоДнейВГод, ЗаписываемыйНабор.КоличествоДнейВГод) КАК КоличествоДнейВГод,
		|	ЕСТЬNULL(ТекущийНабор.ДействуетДо, ЗаписываемыйНабор.ДействуетДо) КАК ДействуетДо,
		|	ЕСТЬNULL(ТекущийНабор.ИспользуетсяПоОкончании, ЗаписываемыйНабор.ИспользуетсяПоОкончании) КАК ИспользуетсяПоОкончании,
		|	ЕСТЬNULL(ТекущийНабор.КоличествоДнейВГодПоОкончании, ЗаписываемыйНабор.КоличествоДнейВГодПоОкончании) КАК КоличествоДнейВГодПоОкончании,
		|	ЕСТЬNULL(ЗаписываемыйНабор.ПересчетНеТребуется, ЛОЖЬ) КАК ПересчетНеТребуется,
		|	ЕСТЬNULL(ТекущийНабор.ВторичнаяЗапись, ЗаписываемыйНабор.ВторичнаяЗапись) КАК ВторичнаяЗапись,
		|	ВЫБОР
		|		КОГДА ТекущийНабор.Период ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Добавляется,
		|	ВЫБОР
		|		КОГДА ЗаписываемыйНабор.Период ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удаляется
		|ПОМЕСТИТЬ ВТЗаписиСОтпускамиЗависящимиОтСтажа
		|ИЗ
		|	ВТТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТЗаписываемыйНабор КАК ЗаписываемыйНабор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОтпусковЗависящиеОтСтажа КАК ВидыОтпусковЗависящиеОтСтажа
		|			ПО ЗаписываемыйНабор.ВидЕжегодногоОтпуска = ВидыОтпусковЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|		ПО ТекущийНабор.Период = ЗаписываемыйНабор.Период
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|			И ТекущийНабор.ВидЕжегодногоОтпуска = ЗаписываемыйНабор.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период) КАК ПериодПредыдущегоРегистратора,
		|	МИНИМУМ(ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период) КАК ПериодПоследующегоРегистратора
		|ПОМЕСТИТЬ ВТПериодыРегистрации
		|ИЗ
		|	ВТЗаписиСОтпускамиЗависящимиОтСтажа КАК ЗаписиСОтпускамиЗависящимиОтСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПредыдущие
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.ВидЕжегодногоОтпуска
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Регистратор <> ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Регистратор
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Период > ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПоследующие
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВидЕжегодногоОтпуска
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Регистратор <> ПоложенныеВидыЕжегодныхОтпусковПоследующие.Регистратор
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Период < ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период
		|			И (НЕ ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВторичнаяЗапись)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Используется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.КоличествоДнейВГод,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ДействуетДо,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ИспользуетсяПоОкончании,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.КоличествоДнейВГодПоОкончании,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ПересчетНеТребуется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВторичнаяЗапись,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Добавляется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Удаляется,
		|	ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Регистратор КАК РегистраторПредыдущий,
		|	ПериодыРегистрации.ПериодПоследующегоРегистратора,
		|	ПоложенныеВидыЕжегодныхОтпусковПоследующие.Регистратор КАК РегистраторПоследующий
		|ПОМЕСТИТЬ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа
		|ИЗ
		|	ВТЗаписиСОтпускамиЗависящимиОтСтажа КАК ЗаписиСОтпускамиЗависящимиОтСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРегистрации КАК ПериодыРегистрации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПредыдущие
		|			ПО ПериодыРегистрации.ПериодПредыдущегоРегистратора = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период
		|				И ПериодыРегистрации.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Сотрудник
		|				И ПериодыРегистрации.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.ВидЕжегодногоОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПоследующие
		|			ПО ПериодыРегистрации.ПериодПоследующегоРегистратора = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период
		|				И ПериодыРегистрации.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Сотрудник
		|				И ПериодыРегистрации.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВидЕжегодногоОтпуска
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Период = ПериодыРегистрации.Период
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПериодыРегистрации.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПериодыРегистрации.ВидЕжегодногоОтпуска";

	Запрос.Выполнить();

КонецПроцедуры

// Дополняет набор движений по регистру ПоложенныеВидыЕжегодныхОтпусков вторичными стажевыми записями.
//
Функция ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(НаборЗаписей, МенеджерВременныхТаблиц) Экспорт
	
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ПерезаполнитьНабор = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СведенияОДвиженииПоложенныхОтпусков.Период, ДЕНЬ) КАК НачалоПериода,
		|	СведенияОДвиженииПоложенныхОтпусков.Сотрудник,
		|	СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска,
		|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(СведенияОДвиженииПоложенныхОтпусков.ПериодПоследующегоРегистратора, &ТекущаяДата), ДЕНЬ) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТДополняемыеОтпуска
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	НЕ СведенияОДвиженииПоложенныхОтпусков.Удаляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусков.ПересчетНеТребуется";
	Запрос.УстановитьПараметр("ТекущаяДата", ДобавитьМесяц(ТекущаяДатаСеанса(), 120));	
	Запрос.Выполнить();
	
	ТаблицаДополненныхСтажевыхЗаписей = ТаблицаДополненныхСтажевыхЗаписей(МенеджерВременныхТаблиц, "ВТДополняемыеОтпуска");
	Если ТаблицаДополненныхСтажевыхЗаписей.Количество() > 0 Тогда
		Если ДополнитьТаблицуНабораЗаписейТаблицейДополненныхСтажевыхЗаписей(ТаблицаНабора, ТаблицаДополненныхСтажевыхЗаписей) Тогда
			ПерезаполнитьНабор = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПерезаполнитьНабор Тогда
		НаборЗаписей.Загрузить(ТаблицаНабора);
	КонецЕсли; 
	
	Возврат ПерезаполнитьНабор;
	
КонецФункции

Функция ТаблицаДополненныхСтажевыхЗаписей(МенеджерВременныхТаблиц, ИмяВТДополняемыеОтпуска)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Приводим записи шкалы отпусков к нужному виду - с отметками следующих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТВидыОтпусков
		|ИЗ
		|	ВТДополняемыеОтпуска КАК ВТДополняемыеОтпуска";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополняемыеОтпуска", ИмяВТДополняемыеОтпуска);	
	Запрос.Выполнить();
		
	СоздатьВТШкалыСтажевыхОтпусковСоСледующимиПоказателями(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТДополняемыеОтпуска.Сотрудник,
		|	ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидСтажа,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВерхняяГраницаИнтервалаСтажа,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.КоличествоДнейВГод,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.КоличествоДнейВГодСледующее
		|ПОМЕСТИТЬ ВТСотрудникиИШкалаСтажа
		|ИЗ
		|	ВТДополняемыеОтпуска КАК ВТДополняемыеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями КАК ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|		ПО ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска = ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.НачалоПериода КАК Период,
		|	Сотрудники.ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДополняемыеОтпуска КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополняемыеОтпуска", ИмяВТДополняемыеОтпуска);	
	Запрос.Выполнить();
	
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(Запрос.МенеджерВременныхТаблиц);
	
	// Накладываем шкалу изменения стажей сотрудников на шкалу прав на отпуска.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТСотрудникиИШкалаСтажа.Сотрудник,
		|	ВТСотрудникиИШкалаСтажа.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ВТСотрудникиИШкалаСтажа.КоличествоДнейВГодСледующее КАК КоличествоДнейВГод,
		|	МИНИМУМ(ВТПериодыИзмененияСтажа.ДатаСтажа) КАК ДатаСтажа
		|ПОМЕСТИТЬ ВТПериодыСтажаСотрудниковСПоказателями
		|ИЗ
		|	ВТСотрудникиИШкалаСтажа КАК ВТСотрудникиИШкалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ВТПериодыИзмененияСтажа
		|		ПО ВТСотрудникиИШкалаСтажа.Сотрудник = ВТПериодыИзмененияСтажа.Сотрудник
		|			И ВТСотрудникиИШкалаСтажа.ВидСтажа = ВТПериодыИзмененияСтажа.ВидСтажа
		|			И ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа <= ВТПериодыИзмененияСтажа.ЗначениеСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСотрудникиИШкалаСтажа.Сотрудник,
		|	ВТСотрудникиИШкалаСтажа.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ВТСотрудникиИШкалаСтажа.КоличествоДнейВГодСледующее
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа,
		|	МАКСИМУМ(ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа) КАК ВерхняяГраницаИнтервалаСтажа
		|ПОМЕСТИТЬ ВТУказателиМаксимальныхПериодов
		|ИЗ
		|	ВТПериодыСтажаСотрудниковСПоказателями КАК ВТПериодыСтажаСотрудниковСПоказателями
		|ГДЕ
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа КАК Период,
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ВидЕжегодногоОтпуска,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа,
		|	ВТПериодыСтажаСотрудниковСПоказателями.КоличествоДнейВГод
		|ИЗ
		|	ВТУказателиМаксимальныхПериодов КАК ВТУказателиМаксимальныхПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыСтажаСотрудниковСПоказателями КАК ВТПериодыСтажаСотрудниковСПоказателями
		|		ПО ВТУказателиМаксимальныхПериодов.Сотрудник = ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник
		|			И ВТУказателиМаксимальныхПериодов.ВерхняяГраницаИнтервалаСтажа = ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа
		|			И ВТУказателиМаксимальныхПериодов.ДатаСтажа = ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ДополнитьТаблицуНабораЗаписейТаблицейДополненныхСтажевыхЗаписей(ТаблицаНабора, ТаблицаДополненныхСтажевыхЗаписей)
	
	// Нормализуем время, читаем сдвиг
	ТаблицаНабора.Колонки.Добавить("ДатаНачалаДня", Новый ОписаниеТипов("Дата"));
	Для каждого СтрокаТаблицы Из ТаблицаНабора Цикл
		СтрокаТаблицы.ДатаНачалаДня = НачалоДня(СтрокаТаблицы.Период);
	КонецЦикла; 
	
	ТаблицаДополненныхСтажевыхЗаписей.Сортировать("Сотрудник, Период, ВидЕжегодногоОтпуска", Новый СравнениеЗначений);
	ПерезаполнитьНабор = Ложь;
	
	Для каждого СтрокаТаблицы Из ТаблицаДополненныхСтажевыхЗаписей Цикл
		
		НайденныеСтрокиОтпусков = ТаблицаНабора.НайтиСтроки(Новый Структура("Сотрудник, ДатаНачалаДня, ВидЕжегодногоОтпуска", СтрокаТаблицы.Сотрудник, НачалоДня(СтрокаТаблицы.Период), СтрокаТаблицы.ВидЕжегодногоОтпуска));
		Если НайденныеСтрокиОтпусков.Количество() > 0 Тогда
			СтрокаОтпуска = НайденныеСтрокиОтпусков[0];
			Если СтрокаОтпуска.КоличествоДнейВГод <> СтрокаТаблицы.КоличествоДнейВГод Тогда
				СтрокаОтпуска.КоличествоДнейВГод = СтрокаТаблицы.КоличествоДнейВГод;
				ПерезаполнитьНабор = Истина;
			КонецЕсли;
		Иначе
			// Ищем первичную запись
			НайденнаяПервичнаяЗапись = ТаблицаНабора.НайтиСтроки(Новый Структура("Сотрудник, ВидЕжегодногоОтпуска, ВторичнаяЗапись", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.ВидЕжегодногоОтпуска, Ложь));
			Если НайденнаяПервичнаяЗапись.Количество() > 0 Тогда
				
				ПерезаполнитьНабор = Истина;
				НоваяСтрока = ТаблицаНабора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяПервичнаяЗапись[0]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ДатаНачалаДня = НачалоДня(НоваяСтрока.Период);
				НоваяСтрока.Период = НоваяСтрока.ДатаНачалаДня;
				НоваяСтрока.ВторичнаяЗапись = Истина;
				
				Если ЗначениеЗаполнено(НоваяСтрока.ДействуетДо)
					И НоваяСтрока.Период >= НоваяСтрока.ДействуетДо Тогда
					
					НоваяСтрока.ДействуетДо = '00010101';
					НоваяСтрока.КоличествоДнейВГодПоОкончании = 0;
					НоваяСтрока.ИспользуетсяПоОкончании = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ПерезаполнитьНабор;
		
КонецФункции

// Процедура формирует ВТ видов стажевых отпусков с развернутым представлением, необходимым для соединения с ВТПериодыИзмененияСтажа.
// 
Процедура СоздатьВТШкалыСтажевыхОтпусковСоСледующимиПоказателями(МенеджерВременныхТаблиц, ИмяВТВидовОтпусков = "ВТВидыОтпусков") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Приводим записи шкалы отпусков к нужному виду - с отметками следующих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажевыеОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТСтажевыеОтпуска
		|ИЗ
		|	ВТВидыОтпусков КАК СтажевыеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыОтпусковШкалаОценкиСтажа.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВЫБОР
		|		КОГДА ВидыОтпусковШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0
		|			ТОГДА 9999
		|		ИНАЧЕ ВидыОтпусковШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа
		|	КОНЕЦ КАК ВерхняяГраницаИнтервалаСтажа,
		|	ВидыОтпусковШкалаОценкиСтажа.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТИнтервалыСтажа
		|ИЗ
		|	Справочник.ВидыОтпусков.ШкалаОценкиСтажа КАК ВидыОтпусковШкалаОценкиСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажевыеОтпуска КАК СтажевыеОтпуска
		|		ПО ВидыОтпусковШкалаОценкиСтажа.Ссылка = СтажевыеОтпуска.ВидЕжегодногоОтпуска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтажевыеОтпуска.ВидЕжегодногоОтпуска,
		|	0,
		|	0
		|ИЗ
		|	ВТСтажевыеОтпуска КАК СтажевыеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИнтервалыСтажа.ВидЕжегодногоОтпуска,
		|	ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	МИНИМУМ(ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа) КАК ВерхняяГраницаИнтервалаСтажаСледующая
		|ПОМЕСТИТЬ ВТИнтервалыСтажаСУказателямиСледующих
		|ИЗ
		|	ВТИнтервалыСтажа КАК ВТИнтервалыСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажаСледующие
		|		ПО ВТИнтервалыСтажа.ВидЕжегодногоОтпуска = ВТИнтервалыСтажаСледующие.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа < ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТИнтервалыСтажа.ВидЕжегодногоОтпуска,
		|	ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.ВидСтажа,
		|	ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажа,
		|	ВТИнтервалыСтажа.КоличествоДнейВГод КАК КоличествоДнейВГод,
		|	ЕСТЬNULL(ВТИнтервалыСтажаСледующие.КоличествоДнейВГод, ВТИнтервалыСтажа.КоличествоДнейВГод) КАК КоличествоДнейВГодСледующее
		|ПОМЕСТИТЬ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|ИЗ
		|	ВТИнтервалыСтажаСУказателямиСледующих КАК ВТИнтервалыСтажаСУказателямиСледующих
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажа
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВТИнтервалыСтажа.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажа = ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажаСледующие
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВТИнтервалыСтажаСледующие.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажаСледующая = ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВидыОтпусков.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалыСтажаСУказателямиСледующих
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалыСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтажевыеОтпуска";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВидыОтпусков", ИмяВТВидовОтпусков);		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

Процедура ДополнитьТаблицуОтпусков(ТаблицаДополнение, ТаблицаОтпусков = Неопределено)

	Если ТаблицаОтпусков = Неопределено Тогда
		ТаблицаОтпусков = Новый ТаблицаЗначений;
		ТаблицаОтпусков.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		ТаблицаОтпусков.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	КонецЕсли;
	
	Для каждого СтрокаДополнения Из ТаблицаДополнение Цикл
		Если ТаблицаОтпусков.Найти(СтрокаДополнения.ВидЕжегодногоОтпуска, "ВидОтпуска") = Неопределено Тогда
			НовыйОтпуск = ТаблицаОтпусков.Добавить();
			НовыйОтпуск.ВидОтпуска = СтрокаДополнения.ВидЕжегодногоОтпуска;
			НовыйОтпуск.Приоритет = ?(СтрокаДополнения.ВидЕжегодногоОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"),1,2);
		КонецЕсли;
	КонецЦикла; 

	ТаблицаОтпусков.Сортировать("Приоритет,ВидОтпуска");
	
КонецПроцедуры

Функция НайтиВидОтпускаВМассивеСтруктур(МассивСтруктур, ВидОтпуска)

	ВозвращаемыйМассив = Новый Массив;
	
	Для каждого ЭлементСтруктуры Из МассивСтруктур Цикл
		Если ВидОтпуска = ЭлементСтруктуры.ВидЕжегодногоОтпуска Тогда
			ВозвращаемыйМассив.Добавить(ЭлементСтруктуры);
		КонецЕсли;
	КонецЦикла; 
	
	Если ВозвращаемыйМассив.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВозвращаемыйМассив;
	КонецЕсли;

КонецФункции

Процедура ОбновитьРазмерПоОкончанииДляЗависимыхОтСтажа(ТаблицаПравЗависящихОтСтажа, СтрокиПравЗависящихОтСтажа)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПравЗависящихОтСтажа.НачалоПериода,
		|	ТаблицаПравЗависящихОтСтажа.Сотрудник,
		|	ТаблицаПравЗависящихОтСтажа.ВидЕжегодногоОтпуска,
		|	ТаблицаПравЗависящихОтСтажа.ОкончаниеПериода
		|ПОМЕСТИТЬ ВТДополняемыеОтпуска
		|ИЗ
		|	&ТаблицаПравЗависящихОтСтажа КАК ТаблицаПравЗависящихОтСтажа";
	Запрос.УстановитьПараметр("ТаблицаПравЗависящихОтСтажа", ТаблицаПравЗависящихОтСтажа);	
	Запрос.Выполнить();
	
	ТаблицаДополненныхСтажевыхЗаписей = ТаблицаДополненныхСтажевыхЗаписей(Запрос.МенеджерВременныхТаблиц, "ВТДополняемыеОтпуска");
	
	Если ТаблицаДополненныхСтажевыхЗаписей <> Неопределено Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДополненныхСтажевыхЗаписей.Сотрудник,
			|	ТаблицаДополненныхСтажевыхЗаписей.ВидЕжегодногоОтпуска,
			|	ТаблицаДополненныхСтажевыхЗаписей.КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТДвижения
			|ИЗ
			|	&ТаблицаДополненныхСтажевыхЗаписей КАК ТаблицаДополненныхСтажевыхЗаписей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДвижения.Сотрудник,
			|	ВТДвижения.ВидЕжегодногоОтпуска,
			|	МАКСИМУМ(ВТДвижения.КоличествоДнейВГод) КАК КоличествоДнейВГод
			|ИЗ
			|	ВТДвижения КАК ВТДвижения
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДвижения.Сотрудник,
			|	ВТДвижения.ВидЕжегодногоОтпуска";
		Запрос.УстановитьПараметр("ТаблицаДополненныхСтажевыхЗаписей", ТаблицаДополненныхСтажевыхЗаписей);	
		ТаблицаЗначенийПоОкончании = Запрос.Выполнить().Выгрузить();
	
		Для каждого СтрокаНабора Из СтрокиПравЗависящихОтСтажа Цикл
			НайденныеСтроки = ТаблицаЗначенийПоОкончании.НайтиСтроки(Новый Структура("Сотрудник,ВидЕжегодногоОтпуска", СтрокаНабора.Сотрудник, СтрокаНабора.ВидЕжегодногоОтпуска));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНабора.КоличествоДнейВГодПоОкончании = НайденныеСтроки[0].КоличествоДнейВГод;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Удаляет записи о правах на ежегодный отпуск, у которых количество дней не меняется по сравнению с
// предыдущей записью.
Процедура УдалитьДублиПрав(МассивПрав)

	Если МассивПрав.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееПраво = МассивПрав[0];
	ПраваНаОтпускДляУдаления	= Новый Массив;
	
	Для Каждого ПравоНаОтпуск Из МассивПрав Цикл
		Если МассивПрав.Найти(ПравоНаОтпуск) = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПредыдущееПраво.ВидЕжегодногоОтпуска <> ПравоНаОтпуск.ВидЕжегодногоОтпуска Тогда
			Продолжить;
		КонецЕсли;
		Если ПравоНаОтпуск.КоличествоДнейОтпускаВГод = ПредыдущееПраво.КоличествоДнейОтпускаВГод Тогда
			ПраваНаОтпускДляУдаления.Добавить(ПредыдущееПраво);
		КонецЕсли;
		ПредыдущееПраво = ПравоНаОтпуск;
	КонецЦикла;
	
	Для Каждого ПравоНаОтпуск Из ПраваНаОтпускДляУдаления Цикл
		МассивПрав.Удалить(МассивПрав.Найти(ПравоНаОтпуск));
	КонецЦикла;

КонецПроцедуры

Функция КоличествоДнейОтпускаПоТерриториальнымУсловиямПФР(ТерриториальныеУсловия)
	
	Если ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ Тогда
		Возврат 24;
	ИначеЕсли ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСР
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСРКСР
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР Тогда
		Возврат 16
	ИначеЕсли ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.ОКУ
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.ПРОЧ Тогда
		Возврат 8;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СправкаПоОтпускам);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОстаткиОтпусков);
	
КонецПроцедуры

// Раскладывает таблицу остатков в разные коллекции для различных потребителей.
// Параметры:
//  ОстаткиОтпусков - таблица значений, см. возвращаемую таблицу ОстаткиОтпусков.ОстаткиОтпусков().
//  Сотрудник 		- Необязательный, отбор по сотрудника.
//  ВидОтпуска 		- Необязательный, отбор по виду отпуска.
//
Функция РазложитьТаблицуОстатковОтпусков(ОстаткиОтпусков, Сотрудник = Неопределено, ВидОтпуска = Неопределено)

	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОстатков.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаОстатков.Колонки.Добавить("ВидОтпускаНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаОстатков.Колонки.Добавить("Дни", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("РабочийГодДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("РабочийГодДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаОстатка Из ОстаткиОтпусков Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОстатков.Добавить(), СтрокаОстатка);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОстатков.Сотрудник,
		|	ТаблицаОстатков.ВидОтпуска КАК ВидЕжегодногоОтпуска,
		|	ТаблицаОстатков.ВидОтпускаНаименование,
		|	ТаблицаОстатков.Дни КАК КоличествоДней,
		|	ТаблицаОстатков.РабочийГодДатаНачала КАК РабочийГодС,
		|	ТаблицаОстатков.РабочийГодДатаОкончания КАК РабочийГодПо
		|ПОМЕСТИТЬ ВТОстаткиОтпусков
		|ИЗ
		|	&ТаблицаОстатков КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.Дни <> 0
		|	И &УсловиеПоСотруднику
		|	И &УсловиеПоВидуОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	СУММА(ВТОстаткиОтпусков.КоличествоДней) КАК КоличествоДней,
		|	МИНИМУМ(ВТОстаткиОтпусков.РабочийГодС) КАК РабочийГодС,
		|	МАКСИМУМ(ВТОстаткиОтпусков.РабочийГодПо) КАК РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОстаткиОтпусков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	СУММА(ВТОстаткиОтпусков.КоличествоДней) КАК КоличествоДней,
		|	МИНИМУМ(ВТОстаткиОтпусков.РабочийГодС) КАК РабочийГодС,
		|	МАКСИМУМ(ВТОстаткиОтпусков.РабочийГодПо) КАК РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.ВидОтпускаНаименование,
		|	ВТОстаткиОтпусков.КоличествоДней,
		|	ВТОстаткиОтпусков.РабочийГодС,
		|	ВТОстаткиОтпусков.РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.ВидОтпускаНаименование,
		|	ВТОстаткиОтпусков.КоличествоДней,
		|	ВТОстаткиОтпусков.РабочийГодС,
		|	ВТОстаткиОтпусков.РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|ГДЕ
		|	ВТОстаткиОтпусков.КоличествоДней > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.ВидОтпускаНаименование,
		|	ВТОстаткиОтпусков.КоличествоДней,
		|	ВТОстаткиОтпусков.РабочийГодС,
		|	ВТОстаткиОтпусков.РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|ГДЕ
		|	ВТОстаткиОтпусков.КоличествоДней < 0";
	
	Если Сотрудник = Неопределено Тогда
	    ТекстУсловияОтбораПоСотруднику = "ИСТИНА"
	Иначе
		Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
			СотрудникОтбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
		Иначе
			СотрудникОтбор = Сотрудник;
		КонецЕсли;
		ТекстУсловияОтбораПоСотруднику = "Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", СотрудникОтбор);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", ТекстУсловияОтбораПоСотруднику);
	
	Если ВидОтпуска = Неопределено Тогда
	    ТекстУсловияОтбораПоВидуОтпуска = "ИСТИНА"
	Иначе
		Если ТипЗнч(ВидОтпуска) <> Тип("Массив") Тогда
			ВидОтпускаОтбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидОтпуска);
		Иначе
			ВидОтпускаОтбор = ВидОтпуска;
		КонецЕсли;
		ТекстУсловияОтбораПоВидуОтпуска = "ВидОтпуска В(&ВидыОтпуска)";
		Запрос.УстановитьПараметр("ВидыОтпуска", ВидОтпускаОтбор);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуОтпуска", ТекстУсловияОтбораПоВидуОтпуска);
	
	Запрос.УстановитьПараметр("ТаблицаОстатков", ТаблицаОстатков);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	Запросов = РезультатПакета.Количество();
	
	СтруктураОстатковОтпусков = Новый Структура;
	СтруктураОстатковОтпусков.Вставить("ОстаткиОтпусков", РезультатПакета[Запросов - 5].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ОстаткиОтпусковПоВидуОтпуска", РезультатПакета[Запросов - 4].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ОстаткиВРазрезеРабочихЛетИВидовОтпусков", РезультатПакета[Запросов - 3].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ПоложительныеОстатки", РезультатПакета[Запросов - 2].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ОтрицательныеОстатки", РезультатПакета[Запросов - 1].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ЕстьОстатки", (НЕ РезультатПакета[Запросов - 1].Пустой()) ИЛИ (НЕ РезультатПакета[Запросов - 2].Пустой()));
	
	Возврат СтруктураОстатковОтпусков;

КонецФункции

Функция ПустаяТаблицаЗаработанныхДней()
	
	ТаблицаЗаработанныхДней = Новый ТаблицаЗначений;
	
	ТаблицаЗаработанныхДней.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("Период",					Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("КоличествоДней",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 2)));
	ТаблицаЗаработанныхДней.Колонки.Добавить("КоличествоДнейЗаПериод",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 5)));
	ТаблицаЗаработанныхДней.Колонки.Добавить("Расшифровка",				Новый ОписаниеТипов("Массив"));
	
	Возврат ТаблицаЗаработанныхДней;
	
КонецФункции

Функция ПустаяТаблицаСобытий()

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ПоследнееСобытие", Новый ОписаниеТипов("Булево"));
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ПраваНаОтпуска");
	ТаблицаСобытий.Колонки.Добавить("НачальныеОстаткиОтпусков");
	ТаблицаСобытий.Колонки.Добавить("ФактическиеОтпуска");
	ТаблицаСобытий.Колонки.Добавить("Отклонения");
	ТаблицаСобытий.Колонки.Добавить("ПродлениеРабочегоГода");
	ТаблицаСобытий.Колонки.Добавить("ДатаПредыдущегоСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("НакопленоСПредыдущегоСобытия");
	ТаблицаСобытий.Колонки.Добавить("РабочиеГодаОтпусков");
	ТаблицаСобытий.Колонки.Добавить("РасшифровкаПрав");
	
	Возврат ТаблицаСобытий;
	
КонецФункции

Функция ПустаяТаблицаОтпусков()
	
	ТаблицаОтпусков = Новый ТаблицаЗначений;
	
	ТаблицаОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска");
	ТаблицаОтпусков.Колонки.Добавить("КоличествоДнейВГод");
	
	Возврат ТаблицаОтпусков;
	
КонецФункции

// Определяет, относится ли дата к февралю високосного года
Функция ЭтоВисокосныйМесяц(ДатаГода)
	Возврат Месяц(ДатаГода) = 2 И ОбщегоНазначенияБЗККлиентСервер.ЭтоВисокосныйГод(ДатаГода)
КонецФункции

Процедура ОбрезатьДатуОкончанияРабочегоГода(ДатаОкончания, СотрудникБезПрава)

	Если СотрудникБезПрава.ЭтоРасчетПриУвольнении Тогда
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания	= Мин(ДатаОкончания, КонецДня(СотрудникБезПрава.ДатаОстатков));
		Иначе
			ДатаОкончания	= КонецДня(СотрудникБезПрава.ДатаОстатков);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СотрудникБезПрава.ДатаУвольнения) Тогда
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания	= Мин(ДатаОкончания, КонецДня(СотрудникБезПрава.ДатаУвольнения));
		Иначе
			ДатаОкончания	= КонецДня(СотрудникБезПрава.ДатаУвольнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ЗаполнениеТабличныхЧастейПравамиНаОтпуска

// Функция возвращает актуальную таблицу прав на ежегодные отпуска для сотрудника
//
Функция ДействующиеПраваСотрудника(Сотрудник, ДатаСреза, ИсключаемыйРегистратор)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Формируем движения с учетом текущего состояния регистра.
	// Формируем таблицу измерений.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.Период = ДатаСреза;
	НоваяСтрока.Сотрудник = Сотрудник;
	
	СоздатьВТПоложенныеВидыЕжегодныхОтпусков(Запрос.МенеджерВременныхТаблиц, ИзмеренияДаты, ИсключаемыйРегистратор);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.КоличествоДнейВГод
		|ИЗ
		|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПраваНаОтпуска";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция возвращает таблицу действующих ежегодных отпусков для всех сотрудников
//
Функция ОбщиеЕжегодныеОтпуска()

	// Заполнение ежегодными отпусками, которые предоставляются всем сотрудникам.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.КоличествоДнейВГод,
	|	ВидыОтпусков.Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
	|	ВидыОтпусков.Наименование КАК ВидЕжегодногоОтпускаНаименование
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.ПометкаУдаления
	|	И НЕ ВидыОтпусков.Недействителен
	|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
	|	И (НЕ ВидыОтпусков.КоличествоДнейВГод = 0
	|			ИЛИ НЕ ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит))";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция возвращает "персональные" ежегодные отпуска сотрудника.
//
Функция ЛичныеЕжегодныеОтпуска(Сотрудник)

	ТаблицаОтпусков = ПустаяТаблицаОтпусков();
	
	ОтпускЧАЭС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Если Не ЗначениеЗаполнено(ОтпускЧАЭС) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтпускЧАЭС, "ПометкаУдаления, Недействителен");
	Если РеквизитыОтпуска.ПометкаУдаления ИЛИ РеквизитыОтпуска.Недействителен Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Для каждого СпециальноеПраво Из КадровыйУчетРасширенный.ПраваНаСпециальныеОтпускаСотрудника(Сотрудник) Цикл
		НоваяСтрока = ТаблицаОтпусков.Добавить();
		НоваяСтрока.ВидЕжегодногоОтпуска = СпециальноеПраво.ВидОтпуска;
		НоваяСтрока.КоличествоДнейВГод = СпециальноеПраво.КоличествоДней;
	КонецЦикла;
	
	Возврат ТаблицаОтпусков;

КонецФункции

Функция ОтпускаПоПозиции(ДатаСобытия, ДанныеНовойПозиции)

	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		// Если используется ШР, просто возвращаем текущий "набор" прав ШР.
		Возврат ЕжегодныеОтпускаПозицииШтатногоРасписания(ДанныеНовойПозиции.ДолжностьПоШтатномуРасписанию, ДатаСобытия);
	Иначе
		// Если ШР не используется - возвращаем набор прав по позиции
		Возврат ЕжегодныеОтпускаДляПозицииШтатногоРасписания(ДанныеНовойПозиции.Подразделение, ДанныеНовойПозиции.Должность, ДатаСобытия);
	КонецЕсли;

КонецФункции

// Функция возвращает набор прав на отпуска, которые обуславливаются должностью.
//
Функция ОтпускаПоДолжности(Должность)
	
	ТаблицаОтпусков = ПустаяТаблицаОтпусков();
	
	ОтпускЗаВредность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	Если НЕ ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтпускЗаВредность, "ПометкаУдаления,Недействителен");
	Если РеквизитыОтпуска.ПометкаУдаления ИЛИ РеквизитыОтпуска.Недействителен Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Должность) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
			
	Если ТипЗнч(Должность) = Тип("СправочникСсылка.Должности") Тогда
		ДолжностьСВредностью = Должность;
	Иначе
		ДолжностьСВредностью = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, "Должность");
	КонецЕсли; 
	
	РеквизитыДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьСВредностью, "ВыплачиваетсяНадбавкаЗаВредность,КоличествоДнейДополнительногоОтпускаВГод");
	Если РеквизитыДолжности.ВыплачиваетсяНадбавкаЗаВредность Тогда
		СтрокаВредногоОтпуска = ТаблицаОтпусков.Добавить();
		СтрокаВредногоОтпуска.ВидЕжегодногоОтпуска = ОтпускЗаВредность;
		СтрокаВредногоОтпуска.КоличествоДнейВГод = РеквизитыДолжности.КоличествоДнейДополнительногоОтпускаВГод;
	КонецЕсли; 
	
	Возврат ТаблицаОтпусков;
	
КонецФункции

// Функция возвращает набор прав на отпуска, которые обуславливаются подразделением.
//
Функция ОтпускаПоПодразделению(Подразделение, ДатаСобытия)
	
	Возврат ОтпускПоТерриториальнымУсловиям(Подразделение, ДатаСобытия);
	
КонецФункции

// Функция возвращает набор прав на отпуска, которые обуславливаются подразделением.
//
Функция ОтпускаПоТерритории(Территория, ДатаСобытия)
	
	Возврат ОтпускПоТерриториальнымУсловиям(Территория, ДатаСобытия);
	
КонецФункции

// Функция возвращает право на "серверный" отпуск.
//
Функция ОтпускПоТерриториальнымУсловиям(СтруктурнаяЕдиница, Знач ДатаСобытия)
	
	ТаблицаОтпусков = ПустаяТаблицаОтпусков();
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	СеверныйОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный");
	Если НЕ ЗначениеЗаполнено(СеверныйОтпуск) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СеверныйОтпуск, "ПометкаУдаления,Недействителен");
	Если РеквизитыОтпуска.ПометкаУдаления ИЛИ РеквизитыОтпуска.Недействителен Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "Владелец");
	ПараметрыФО = Новый Структура("Организация", Организация);
	Если НЕ ПолучитьФункциональнуюОпцию("ПрименятьСевернуюНадбавку", ПараметрыФО) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
		
	ТаблицаНастроек = РегистрыСведений.ТерриториальныеУсловияПФР.СрезПоследних(ДатаСобытия, Новый Структура("СтруктурнаяЕдиница", СтруктурнаяЕдиница));
	Если ТаблицаНастроек.Количество() > 0 Тогда
		ТерриториальныеУсловия = ТаблицаНастроек[0].ТерриториальныеУсловияПФР;
		ПрименятьСевернуюНадбавку = ТаблицаНастроек[0].ПрименятьСевернуюНадбавку;;
	Иначе
		ТерриториальныеУсловия = Неопределено;
		ПрименятьСевернуюНадбавку = Ложь;
	КонецЕсли;
	
	Если ПрименятьСевернуюНадбавку Тогда
		СтрокаСеверногоОтпуска = ТаблицаОтпусков.Добавить();
		СтрокаСеверногоОтпуска.ВидЕжегодногоОтпуска = СеверныйОтпуск;
		СтрокаСеверногоОтпуска.КоличествоДнейВГод = КоличествоДнейОтпускаПоТерриториальнымУсловиямПФР(ТерриториальныеУсловия);
	КонецЕсли;
	
	Возврат ТаблицаОтпусков;
	
КонецФункции

Функция ЕжегодныеОтпускаДляПозицииШтатногоРасписания(Подразделение, Должность, ДатаСобытия)
	
	МассивОтпусков = Новый Массив;
	
	МассивОтпусков.Добавить(ОбщиеЕжегодныеОтпуска());
	МассивОтпусков.Добавить(ОтпускаПоДолжности(Должность));
	МассивОтпусков.Добавить(ОтпускаПоПодразделению(Подразделение, ДатаСобытия));
	
	Возврат ОбъединитьПулыПравНаОтпуска(МассивОтпусков);
	
КонецФункции

// Процедура объединяем таблицы прав на отпуска в одну.
// При совпадении видов отпусков приоритет имеют те таблицы прав, которые имеют больший индекс в массиве.
//
Функция ОбъединитьПулыПравНаОтпуска(МассивТаблицПрав)

	ИтоговаяТаблицаПрав = ПустаяТаблицаОтпусков();
	
	Для каждого ТаблицаПрав Из МассивТаблицПрав Цикл
		Для каждого ПравоНаОтпуск Из ТаблицаПрав Цикл
			СтрокаОтпуска = ИтоговаяТаблицаПрав.Найти(ПравоНаОтпуск.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска");
			Если СтрокаОтпуска = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ИтоговаяТаблицаПрав.Добавить(), ПравоНаОтпуск);
			Иначе
				СтрокаОтпуска.КоличествоДнейВГод = ПравоНаОтпуск.КоличествоДнейВГод;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаПрава Из ИтоговаяТаблицаПрав Цикл
		Если НЕ ЭтоСтажевыйОтпуск(СтрокаПрава.ВидЕжегодногоОтпуска)
			И СтрокаПрава.КоличествоДнейВГод = 0 Тогда
			
			УдаляемыеСтроки.Добавить(СтрокаПрава);
			
		КонецЕсли;
	КонецЦикла;
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ИтоговаяТаблицаПрав.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат ИтоговаяТаблицаПрав;
	
КонецФункции

Процедура УдалитьНеактуальныеОтпускаПозицииИзДействующихПрав(ДействующиеПрава, ПредыдущиеПрава, НовыеПрава)

	МассивДляУдаления = Новый Массив;
	Для каждого ДействующееПраво Из ДействующиеПрава Цикл
		Если ПредыдущиеПрава.Найти(ДействующееПраво.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") <> Неопределено 
			И НовыеПрава.Найти(ДействующееПраво.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") = Неопределено Тогда
		
			МассивДляУдаления.Добавить(ДействующееПраво);
		
		КонецЕсли;
	КонецЦикла;

	Для каждого УдаляемаяСтрока Из МассивДляУдаления Цикл
		ДействующиеПрава.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, НазначаемыеПрава, ПредыдущиеПрава = Неопределено)

	ТаблицаПрав = Новый ТаблицаЗначений;
	ТаблицаПрав.Колонки.Добавить("ВидЕжегодногоОтпуска");
	ТаблицаПрав.Колонки.Добавить("ПриоритетВидаОтпуска");
	ТаблицаПрав.Колонки.Добавить("КоличествоДнейВГод");
	ТаблицаПрав.Колонки.Добавить("ДействующийОтпуск");
	ТаблицаПрав.Колонки.Добавить("Действие");
	ТаблицаПрав.Колонки.Добавить("ТекущееКоличествоДнейВГод");
	ТаблицаПрав.Колонки.Добавить("Комментарий");
	
	Если ПредыдущиеПрава = Неопределено Тогда
		Для Каждого СтрокаПрав Из НазначаемыеПрава Цикл
			НоваяСтрока = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПрав);
			НоваяСтрока.ПриоритетВидаОтпуска = ?(НоваяСтрока.ВидЕжегодногоОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), 1, 2);
		КонецЦикла;
	Иначе
		
		Для Каждого СтрокаПрав Из НазначаемыеПрава Цикл
			НоваяСтрока = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПрав);
			НоваяСтрока.ПриоритетВидаОтпуска = ?(НоваяСтрока.ВидЕжегодногоОтпуска = ПредопределенноеЗначение("Справочник.ВидыОтпусков.Основной"), 1, 2);
			ПредыдущаяСтрока = ПредыдущиеПрава.Найти(СтрокаПрав.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска");
			Если ПредыдущаяСтрока = Неопределено Тогда
				НоваяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Утвердить");
				НоваяСтрока.ДействующийОтпуск = Ложь;
			Иначе
				НоваяСтрока.ТекущееКоличествоДнейВГод = ПредыдущаяСтрока.КоличествоДнейВГод;
				НоваяСтрока.ДействующийОтпуск = Истина;
			КонецЕсли;
			ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(НоваяСтрока);
		КонецЦикла;
		
		Для Каждого СтрокаПрав Из ПредыдущиеПрава Цикл
			Если ТаблицаПрав.Найти(СтрокаПрав.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаПрав.Добавить();
			НоваяСтрока.ВидЕжегодногоОтпуска = СтрокаПрав.ВидЕжегодногоОтпуска;
			НоваяСтрока.ПриоритетВидаОтпуска = ?(НоваяСтрока.ВидЕжегодногоОтпуска = ПредопределенноеЗначение("Справочник.ВидыОтпусков.Основной"), 1, 2);
			НоваяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Отменить");
			НоваяСтрока.КоличествоДнейВГод = СтрокаПрав.КоличествоДнейВГод;
			НоваяСтрока.ТекущееКоличествоДнейВГод = СтрокаПрав.КоличествоДнейВГод;
			НоваяСтрока.ДействующийОтпуск = Истина;
			ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПрав.Сортировать("ПриоритетВидаОтпуска, ВидЕжегодногоОтпуска");
	
	Для каждого СтрокаПрава Из ТаблицаПрав Цикл
		ЗаполнитьЗначенияСвойств(ТабличнаяЧастьОбъекта.Добавить(), СтрокаПрава);
	КонецЦикла; 
	
КонецПроцедуры

Процедура РассчитатьКоличествоДнейОтпуска(СотрудникБезПрава, СтрокаВидаОтпуска, РабочиеГода, МассивПравНаОтпуск, ТаблицаПереквалификацииДней)

	Если РабочиеГода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РабочийГод Из РабочиеГода Цикл
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			
			Если Не РабочийМесяц.Заполнен Тогда
				ДнейОтпускаВМесяц = МесячноеКадровоеПравоНаОтпускСотрудника(МассивПравНаОтпуск, РабочийМесяц.ДатаМесяца);
				// Проверим действие на сотрудника ст. 291 и 295 ТК РФ.
				УстановитьДирективно2РабочихДня = Ложь;
				Если СотрудникБезПрава.ТребуетПереквалификацииДней И СтрокаВидаОтпуска.ОсновнойОтпуск Тогда
					СведенияДоговораСотрудника = ТаблицаПереквалификацииДней.НайтиСтроки(Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник));
					Для каждого СтрокаСведений Из СведенияДоговораСотрудника Цикл
						Если Не ЗначениеЗаполнено(СтрокаСведений.ДатаОкончания) Тогда
							СрочныйДоговорДействует = Истина;
						Иначе
							СрочныйДоговорДействует = НачалоДня(СтрокаСведений.ДатаНачала) <= РабочийМесяц.ДатаМесяца
								И РабочийМесяц.ДатаМесяца <= КонецДня(СтрокаСведений.ДатаОкончания);
						КонецЕсли;
						УстановитьДирективно2РабочихДня = СрочныйДоговорДействует
													И (СтрокаСведений.КраткосрочныйДоговор ИЛИ СтрокаСведений.СезонныйДоговор);
						Если СтрокаСведений.ДатаНачала <= РабочийМесяц.ДатаМесяца Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если УстановитьДирективно2РабочихДня Тогда
					РабочийМесяц.КоличествоДней = 2;
					РабочийМесяц.ОтложеноДней = ДнейОтпускаВМесяц - 2;
				Иначе
					РабочийМесяц.КоличествоДней	= ДнейОтпускаВМесяц;
				КонецЕсли; 
				РабочийМесяц.Заполнен = Истина;
				
			КонецЕсли;
						
			ДатаНачалаОтсчета = КонецДня(РабочийМесяц.ДатаМесяца) + 1;
			
		КонецЦикла;
	КонецЦикла;
	
	// В случае, если действовали ст. 291 или 295 ТК РФ и есть "отложенные дни" - запишем их в первый месяц, следующий
	// после окончания ее действия.
	Для Каждого РабочийГод Из РабочиеГода Цикл
		СтекЗадержанныхДней = 0;
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			Если РабочийМесяц.ОтложеноДней = 0 Тогда
				Если СтекЗадержанныхДней <> 0 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + СтекЗадержанныхДней;
					СтекЗадержанныхДней = 0;
				КонецЕсли;
			Иначе
				СтекЗадержанныхДней = СтекЗадержанныхДней + РабочийМесяц.ОтложеноДней;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьКоличествоДнейНакопительногоОтпуска(СотрудникБезПрава, СтрокаВидаОтпуска, РабочиеГода, МассивПравНаОтпуск)
	
	Если РабочиеГода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = РабочиеГода[0].ДатаНачала;
	ДатаОкончания = РабочиеГода[РабочиеГода.Количество()-1].ДатаОкончания;
	Сотрудник = СотрудникБезПрава.Сотрудник;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ДатаОкончания));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Сотрудник КАК Сотрудник,
	               |	&ДатаНачала КАК ДатаНачала,
	               |	&ДатаОкончания КАК ДатаОкончания
	               |ПОМЕСТИТЬ ВТСотрудники";
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Ложь;
	ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(ДатаОкончания);
	ПараметрыЗаполнения.ДатаНачала = НачалоГода(ДатаНачала);
	ПараметрыЗаполнения.ДатаОкончания = КонецГода(ДатаОкончания);
	ПараметрыЗаполнения.МесяцДатаНачала = ПараметрыЗаполнения.ДатаНачала;
	ПараметрыЗаполнения.МесяцДатаОкончания = НачалоМесяца(ПараметрыЗаполнения.ДатаОкончания);
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	ПараметрыЗаполнения.ПолучатьУсловияТрудаИТерритории = Истина;
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	ИспользуемыеВТ = Новый Массив;
	ИспользуемыеВТ.Добавить("ВТСотрудникиМесяцы");
	ИспользуемыеВТ.Добавить("ВТДанныеУчетаВремени");
	
	ИменаТаблиц = Новый Массив;
	
	Для Каждого Таблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл 
		Если ИспользуемыеВТ.Найти(Таблица.ПолноеИмя) = Неопределено Тогда 
			ИменаТаблиц.Добавить(Таблица.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, ИмяТаблицы);
	КонецЦикла;
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудникиМесяцы";
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("ОплачиваемыеНерабочиеДни", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Сотрудник КАК Сотрудник,
	               |	&ДатаНачала КАК ДатаНачала,
	               |	&ДатаОкончания КАК ДатаОкончания
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	               |	ДанныеУчетаВремени.Дата КАК Дата
	               |ПОМЕСТИТЬ ВТОплачиваемыеНерабочиеДни
	               |ИЗ
	               |	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ПО ДанныеУчетаВремени.Сотрудник = СотрудникиПериоды.Сотрудник
	               |			И ДанныеУчетаВремени.Дата >= СотрудникиПериоды.ДатаНачала
	               |			И ДанныеУчетаВремени.Дата <= СотрудникиПериоды.ДатаОкончания
	               |			И (ДанныеУчетаВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПлановоеВремя.Сотрудник КАК Сотрудник,
	               |	ПлановоеВремя.Дата КАК Дата,
	               |	СУММА(ПлановоеВремя.ЧасыПлан) КАК ЧасыПлан
	               |ПОМЕСТИТЬ ВТДанныеПлановогоВремени
	               |ИЗ
	               |	ВТПлановоеВремя КАК ПлановоеВремя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	               |		ПО ПлановоеВремя.ВидУчетаВремени = ВидыИспользованияРабочегоВремени.Ссылка
	               |			И (ВидыИспользованияРабочегоВремени.РабочееВремя)
	               |			И (ПлановоеВремя.ВидУчетаВремени <> &РабочееВремя)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ПО ПлановоеВремя.Сотрудник = СотрудникиПериоды.Сотрудник
	               |			И ПлановоеВремя.Дата >= СотрудникиПериоды.ДатаНачала
	               |			И ПлановоеВремя.Дата <= СотрудникиПериоды.ДатаОкончания
	               |			И (ПлановоеВремя.ЧасыПлан > 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПлановоеВремя.Сотрудник,
	               |	ПлановоеВремя.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	               |	ГОД(ДанныеУчетаВремени.Дата) КАК Год,
	               |	ДанныеУчетаВремени.Дата КАК Дата,
	               |	ДанныеУчетаВремени.Часы КАК Часы,
	               |	ВЫБОР
	               |		КОГДА ДанныеУчетаВремени.УсловияТруда = ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК УсловияТрудаУказаны,
	               |	ЕСТЬNULL(ДанныеПлановогоВремени.ЧасыПлан, 0) КАК ЧасыПлан,
	               |	ЕСТЬNULL(СправочникУсловияТруда.КоличествоДнейДополнительногоОтпускаВГод, 0) КАК КоличествоДней
	               |ИЗ
	               |	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ПО ДанныеУчетаВремени.Сотрудник = СотрудникиПериоды.Сотрудник
	               |			И ДанныеУчетаВремени.Дата >= СотрудникиПериоды.ДатаНачала
	               |			И ДанныеУчетаВремени.Дата <= СотрудникиПериоды.ДатаОкончания
	               |			И (ДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя)
	               |			И (ДанныеУчетаВремени.Часы > 0)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияТруда КАК СправочникУсловияТруда
	               |		ПО ДанныеУчетаВремени.УсловияТруда = СправочникУсловияТруда.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПлановогоВремени КАК ДанныеПлановогоВремени
	               |		ПО ДанныеУчетаВремени.Сотрудник = ДанныеПлановогоВремени.Сотрудник
	               |			И ДанныеУчетаВремени.Дата = ДанныеПлановогоВремени.Дата
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОплачиваемыеНерабочиеДни КАК ОплачиваемыеНерабочиеДни
	               |		ПО ДанныеУчетаВремени.Сотрудник = ОплачиваемыеНерабочиеДни.Сотрудник
	               |			И ДанныеУчетаВремени.Дата = ОплачиваемыеНерабочиеДни.Дата
	               |ГДЕ
	               |	ОплачиваемыеНерабочиеДни.Сотрудник ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Год,
	               |	Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	               |	ГОД(ДанныеУчетаВремени.Дата) КАК Год,
	               |	МИНИМУМ(ДанныеУчетаВремени.Дата) КАК НачалоГода,
	               |	МАКСИМУМ(ДанныеУчетаВремени.Дата) КАК ОкончаниеГода
	               |ИЗ
	               |	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ПО ДанныеУчетаВремени.Сотрудник = СотрудникиПериоды.Сотрудник
	               |			И ДанныеУчетаВремени.Дата >= СотрудникиПериоды.ДатаНачала
	               |			И ДанныеУчетаВремени.Дата <= СотрудникиПериоды.ДатаОкончания
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеУчетаВремени.Сотрудник,
	               |	ГОД(ДанныеУчетаВремени.Дата)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеПлановогоВремени.Сотрудник КАК Сотрудник,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПлановогоВремени.Дата) КАК КоличествоРабочихДней,
	               |	ГОД(ДанныеПлановогоВремени.Дата) КАК Год
	               |ИЗ
	               |	ВТДанныеПлановогоВремени КАК ДанныеПлановогоВремени
	               |ГДЕ
	               |	ДанныеПлановогоВремени.ЧасыПлан > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеПлановогоВремени.Сотрудник,
	               |	ГОД(ДанныеПлановогоВремени.Дата)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	КоличествоРабочихДнейВГоду = Новый Соответствие;
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выбрать();
	Пока Выборка.Следующий() Цикл 
		КоличествоРабочихДнейВГоду.Вставить(Выборка.Год, Выборка.КоличествоРабочихДней);
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Год) Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.НачалоГода = Дата(Выборка.Год, 1, 1) И Выборка.ОкончаниеГода = Дата(Выборка.Год, 12, 31) Тогда 
			Продолжить;
		КонецЕсли;
		КоличествоРабочихДней = КоличествоРабочихДнейВГоду[Выборка.Год];
		Если КоличествоРабочихДней = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		КоличествоДнейВГоду = ДеньГода(Дата(Выборка.Год, 12, 31));
		КоличествоДнейВПериоде = ДеньГода(Выборка.ОкончаниеГода) - ДеньГода(Выборка.НачалоГода) + 1;
		КоличествоРабочихДней = ?(КоличествоДнейВПериоде = 0, 0, КоличествоРабочихДней * КоличествоДнейВГоду / КоличествоДнейВПериоде);
		КоличествоРабочихДнейВГоду.Вставить(Выборка.Год, КоличествоРабочихДней);
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-3].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
		КоличествоРабочихДней = КоличествоРабочихДнейВГоду[Выборка.Год];
		Если КоличествоРабочихДней = Неопределено Или КоличествоРабочихДней <= 0 Тогда 
			Продолжить;
		КонецЕсли;
		РабочийГод = Неопределено;
		ОтработаноДнейПоВидуОтпуска = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Если РабочийГод = Неопределено Тогда 
				Для Каждого ДанныеРабочегоГода Из РабочиеГода Цикл 
					Если Выборка.Дата >= ДанныеРабочегоГода.ДатаНачала И Выборка.Дата <= ДанныеРабочегоГода.ДатаОкончания Тогда
						РабочийГод = ДанныеРабочегоГода;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДнейОтпускаВМесяц = ?(Выборка.УсловияТрудаУказаны, Выборка.КоличествоДней / 12,
				МесячноеКадровоеПравоНаОтпускСотрудника(МассивПравНаОтпуск, Выборка.Дата));
			Если ДнейОтпускаВМесяц = 0 Тогда 
				Продолжить;
			КонецЕсли;
			ОтработаноЗаДень = ?(Выборка.ЧасыПлан = 0, 1, ?(Выборка.Дата >= Дата(2017, 4, 1), 
				Выборка.Часы / Выборка.ЧасыПлан, ?(Выборка.Часы / Выборка.ЧасыПлан >= 0.5, 1, 0)));
			Если ОтработаноЗаДень = 0 Тогда 
				Продолжить;
			КонецЕсли;
			ДанныеОтпуска = ОтработаноДнейПоВидуОтпуска[ДнейОтпускаВМесяц];
			Если ДанныеОтпуска = Неопределено Тогда 
				ДанныеОтпуска = Новый Структура("ОтработаноДней, ОтработаноМесяцев", 0, 0);
				ОтработаноДнейПоВидуОтпуска.Вставить(ДнейОтпускаВМесяц, ДанныеОтпуска);
			КонецЕсли;
			ДанныеОтпуска.ОтработаноДней = ДанныеОтпуска.ОтработаноДней + ОтработаноЗаДень;
			ДнейДоРегистрацииПрава = (ДанныеОтпуска.ОтработаноМесяцев + ?(ДанныеОтпуска.ОтработаноМесяцев = 11, 0, 0.5)) * КоличествоРабочихДней / 12;
			Если ДанныеОтпуска.ОтработаноДней >= ДнейДоРегистрацииПрава Тогда 
				РабочийМесяц = РабочийГод.РабочиеМесяцы.Добавить();
				РабочийМесяц.ДатаМесяца		= Выборка.Дата;
				РабочийМесяц.КоличествоДней	= ДнейОтпускаВМесяц;
				РабочийМесяц.Заполнен = Истина;
				ДанныеОтпуска.ОтработаноМесяцев = ДанныеОтпуска.ОтработаноМесяцев + 1;
				Если ДанныеОтпуска.ОтработаноМесяцев = 12 Тогда 
					Прервать;
				КонецЕсли;
				Если Выборка.Дата > СотрудникБезПрава.ДатаОстатков Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если РабочийГод <> Неопределено И РабочийГод.РабочиеМесяцы.Количество() > 1 Тогда
			РабочийГод.РабочиеМесяцы.Свернуть("ДатаМесяца,Заполнен,ОтложеноДней", "КоличествоДней");
		КонецЕсли;
		Если РабочийГод <> Неопределено Тогда 
			Для Каждого КлючИЗначение Из ОтработаноДнейПоВидуОтпуска Цикл
				ДанныеРасшифровки = Новый Структура;
				РабочиеМесяцы = РабочийГод.РабочиеМесяцы;
				Если ОтработаноДнейПоВидуОтпуска.Количество() > 1 Тогда
					Отбор = Новый Структура("КоличествоДней", КлючИЗначение.Ключ);
					РабочиеМесяцы = РабочийГод.РабочиеМесяцы.Скопировать(Отбор);
				КонецЕсли;
				ДанныеРасшифровки.Вставить("ЗаработаноДней", РабочиеМесяцы.Итог("КоличествоДней"));
				ДанныеРасшифровки.Вставить("ДнейОтпускаВГод", Окр(КлючИЗначение.Ключ * 12, 0));
				ДанныеРасшифровки.Вставить("СреднемесячноеКоличествоДней", КоличествоРабочихДней / 12);
				ДанныеРасшифровки.Вставить("ОтработаноДней", КлючИЗначение.Значение.ОтработаноДней);
				ДанныеРасшифровки.Вставить("ОтработаноМесяцев", КлючИЗначение.Значение.ОтработаноМесяцев);
				РабочийГод.Расшифровка.Добавить(ДанныеРасшифровки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьНаборПравамиИзТаблицы(НаборЗаписей, ТаблицаИзРегистра)

	Для Каждого СтрокаПрава Из ТаблицаИзРегистра Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаПрава);
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьНаборРассчитаннымиПравами(ОтборПоСотрудникуИВидуОтпуска, НаборЗаписей, РабочиеГода)

	ПравоСНачалаРаботы = 0;
	Для Каждого РабочийГод Из РабочиеГода Цикл
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			
			СтрокаПрава = НаборЗаписей.Добавить();
			СтрокаПрава.Сотрудник				= ОтборПоСотрудникуИВидуОтпуска.Сотрудник;
			СтрокаПрава.ВидЕжегодногоОтпуска	= ОтборПоСотрудникуИВидуОтпуска.ВидЕжегодногоОтпуска;
			СтрокаПрава.ДатаНачала				= РабочийГод.ДатаНачала;
			СтрокаПрава.ДатаОкончания			= РабочийГод.ДатаОкончания;
			СтрокаПрава.Период					= РабочийМесяц.ДатаМесяца;
			СтрокаПрава.КоличествоДнейЗаПериод	= РабочийМесяц.КоличествоДней;
			
			ПравоСНачалаРаботы					= ПравоСНачалаРаботы + РабочийМесяц.КоличествоДней;
			СтрокаПрава.КоличествоДней			= ПравоСНачалаРаботы;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция МесячноеКадровоеПравоНаОтпускСотрудника(МассивПрав, ДатаСреза)

	// Подразумеваем что массив прав отсортирован по убыванию даты.
	Для каждого ПравоНаЕжегодныйОтпуск Из МассивПрав Цикл
		Если ПравоНаЕжегодныйОтпуск.ДатаДействия <= ДатаСреза Тогда
			Возврат ПравоНаЕжегодныйОтпуск.КоличествоДнейОтпускаВГод / 12;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат 0;
	
КонецФункции

Функция ЗапросНазначениеДополнительныхОтпусков(Сотрудник, ВидыОтпусковСотрудника) Экспорт 
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.Период = ТекущаяДатаСеанса();
	НоваяСтрока.Сотрудник = Сотрудник;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОстаткиОтпусков.СоздатьВТПоложенныеВидыЕжегодныхОтпусков(МенеджерВременныхТаблиц, ИзмеренияДаты, , Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВидыОтпусков", ВидыОтпусковСотрудника);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОтпусков.Ссылка КАК ВидОтпуска
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоложенныеВидыЕжегодныхОтпусков КАК ПраваНаОтпуска
		|		ПО ВидыОтпусков.Ссылка = ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ВидыОтпусков.Ссылка В(&ВидыОтпусков)
		|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
		|	И ПраваНаОтпуска.ВидЕжегодногоОтпуска ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

Функция БудущиеОтпускаСотрудника(МенеджерВременныхТаблиц, Сотрудник)
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ФактическиеОтпуска");
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БудущиеОтпуска.Период КАК ДатаСобытия,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(БудущиеОтпуска.Регистратор) КАК Событие,
		|	БудущиеОтпуска.Регистратор КАК ДокументСобытие,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(БудущиеОтпуска.Регистратор) КАК ПредставлениеДокумента,
		|	БудущиеОтпуска.ВидОтпуска КАК ВидЕжегодногоОтпуска,
		|	БудущиеОтпуска.ВидОтпуска.Наименование КАК ВидЕжегодногоОтпускаНаименование,
		|	БудущиеОтпуска.ДатаНачала КАК ДатаНачалаОтпуска,
		|	БудущиеОтпуска.ДатаОкончания КАК ДатаОкончанияОтпуска,
		|	БудущиеОтпуска.Компенсация КАК Компенсация,
		|	СУММА(БудущиеОтпуска.КоличествоДней) КАК КоличествоДнейОтпуска
		|ИЗ
		|	ВТБудущиеОтпускаСотрудников КАК БудущиеОтпуска
		|ГДЕ
		|	БудущиеОтпуска.Сотрудник = &Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	БудущиеОтпуска.Период,
		|	БудущиеОтпуска.Регистратор,
		|	БудущиеОтпуска.ВидОтпуска,
		|	БудущиеОтпуска.ВидОтпуска.Наименование,
		|	БудущиеОтпуска.ДатаНачала,
		|	БудущиеОтпуска.ДатаОкончания,
		|	БудущиеОтпуска.Компенсация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия,
		|	ДокументСобытие";

	Выборка = Запрос.Выполнить().Выбрать();
	ЗаполнитьСобытияБудущихОтпусков(Выборка, ТаблицаСобытий);
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудникаРасширенная") Тогда 
		
		Запрос.УстановитьПараметр("Событие", НСтр("ru = 'Заявление на отпуск';
													|en = 'Application for leave'"));
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СогласованныеЗаявки.ДатаНачала КАК ДатаСобытия,
			|	&Событие КАК Событие,
			|	СогласованныеЗаявки.Документ КАК ДокументСобытие,
			|	&Событие КАК ПредставлениеДокумента,
			|	СогласованныеЗаявки.ВидОтпуска КАК ВидЕжегодногоОтпуска,
			|	СогласованныеЗаявки.ВидОтпуска.Наименование КАК ВидЕжегодногоОтпускаНаименование,
			|	СогласованныеЗаявки.ДатаНачала КАК ДатаНачалаОтпуска,
			|	СогласованныеЗаявки.ДатаОкончания КАК ДатаОкончанияОтпуска,
			|	ЛОЖЬ КАК Компенсация,
			|	СогласованныеЗаявки.КоличествоДней КАК КоличествоДнейОтпуска
			|ИЗ
			|	ВТСогласованныеЗаявкиНаОтпуск КАК СогласованныеЗаявки
			|ГДЕ
			|	СогласованныеЗаявки.Сотрудник = &Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаСобытия,
			|	ДокументСобытие";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ЗаполнитьСобытияБудущихОтпусков(Выборка, ТаблицаСобытий);
		ТаблицаСобытий.Сортировать("ДатаСобытия, ДокументСобытие");
		
	КонецЕсли;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

Процедура ЗаполнитьСобытияБудущихОтпусков(Выборка, ТаблицаСобытий)
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ДокументСобытие") Цикл
			
			НовоеСобытие = ТаблицаСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСобытие, Выборка);
			
			ФактическиеОтпуска = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ПериодОтпуска = Новый Структура("ДатаНачала, ДатаОкончания", Выборка.ДатаНачалаОтпуска, Выборка.ДатаОкончанияОтпуска);
				ПериодыОтпуска = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПериодОтпуска);
				
				Событие = Новый Структура("
					|ВидЕжегодногоОтпуска,
					|ВидЕжегодногоОтпускаНаименование,
					|КоличествоДнейОтпуска,
					|ДатаНачалаОтпуска,
					|ДатаОкончанияОтпуска,
					|Компенсация,
					|ПериодыОтпуска");
				ЗаполнитьЗначенияСвойств(Событие, Выборка);
				Событие.ПериодыОтпуска = ПериодыОтпуска;
				ФактическиеОтпуска.Добавить(Событие);
				
			КонецЦикла;
			
			НовоеСобытие.ФактическиеОтпуска = ФактическиеОтпуска;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТБудущиеОтпускаСотрудников(МенеджерВременныхТаблиц, Сотрудники, ДатаАктуальности) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеОтпуска.Регистратор КАК Регистратор,
		|	ФактическиеОтпуска.Период КАК Период,
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	ФактическиеОтпуска.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
		|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	ФактическиеОтпуска.Количество КАК КоличествоДней,
		|	ФактическиеОтпуска.Компенсация КАК Компенсация
		|ПОМЕСТИТЬ ВТБудущиеОтпускаСотрудников
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Сотрудник В(&Сотрудники)
		|	И ФактическиеОтпуска.Период > КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#Область ПолучениеДанныхДляСервиса1СКабинетСотрудников

// Функция расчета отпусков, положенных сотруднику, с данными на год вперед.
//
// Параметры
//	СтруктураПараметров - тип Структура - см. функцию ОписаниеПараметровДляОстаткиОтпусковСУчетомБудущихПериодов.
//		* ДатаОстатков				- дата, на которую вычисляются остатки, тип Дата
//		* Сотрудники 				- список сотрудников, тип Массив или СправочникСсылка.Сотрудники
//		* ВидыОтпусков 				- список видов отпусков, тип Массив или СправочникСсылка.ВидыОтпусков
//		* ИсключаемыеРегистраторы	- список регистраторов, исключаемых при расчете остатков, тип Массив или ДокументСсылка.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * ТекущиеОстатки - ТаблицаЗначений - содержит колонки:
//        ** Сотрудник - СправочникСсылка.Сотрудники
//        ** Период - Дата
//        ** Организация - СправочникСсылка.Организации
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** КоличествоДней - Число
//     * БудущиеПериоды - ТаблицаЗначений - содержит колонки:
//        ** Сотрудник - СправочникСсылка.Сотрудники
//        ** Период - Дата
//        ** Организация - СправочникСсылка.Организации
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** КоличествоДней - Число
//
Функция ОстаткиОтпусковСУчетомБудущихПериодов(ПараметрыОстатков)
	
	ОписаниеПараметров = ОписаниеПараметровДляОстаткиОтпусков();
	ЗаполнитьЗначенияСвойств(ОписаниеПараметров, ПараметрыОстатков);
	
	Остатки = ОстаткиОтпусков(ОписаниеПараметров);
	ДопустимаяПродолжительность = ДопустимаяПродолжительностьОтпуска(Остатки, ПараметрыОстатков);
	КомпенсацияОтпуска = ДоступноеКоличествоДнейКомпенсацииОтпускаДляСервиса(Остатки, ПараметрыОстатков.ДатаОстатков);
	
	Остатки.Свернуть("Сотрудник", "Дни");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыОстатков.Сотрудники, "Организация, ФизическоеЛицо, ВидЗанятости, ДатаУвольнения", ПараметрыОстатков.ДатаОстатков);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ПараметрыОстатков.ДатаОстатков);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыеДанные.Организация КАК Организация,
	               |	КадровыеДанные.Сотрудник КАК Сотрудник,
	               |	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА КадровыеДанные.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				И КадровыеДанные.ДатаУвольнения < &ДатаОстатков
	               |			ТОГДА 0
	               |		КОГДА КадровыеДанные.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	               |			ТОГДА 3
	               |		КОГДА КадровыеДанные.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Приоритет
	               |ПОМЕСТИТЬ ВТСотрудникиПриоритет
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиПриоритет.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(СотрудникиПриоритет.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТСотрудникиМаксимальныйПриоритет
	               |ИЗ
	               |	ВТСотрудникиПриоритет КАК СотрудникиПриоритет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиПриоритет.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиПриоритет.Организация КАК Организация,
	               |	СотрудникиПриоритет.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СотрудникиПриоритет.Сотрудник КАК Сотрудник
	               |ИЗ
	               |	ВТСотрудникиПриоритет КАК СотрудникиПриоритет
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиМаксимальныйПриоритет КАК МаксимальныйПриоритет
	               |		ПО СотрудникиПриоритет.ФизическоеЛицо = МаксимальныйПриоритет.ФизическоеЛицо
	               |			И СотрудникиПриоритет.Приоритет = МаксимальныйПриоритет.Приоритет";
	
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Сотрудники", КадровыеДанныеСотрудников.ВыгрузитьКолонку("Сотрудник"));
	
	СогласованныеЗаявления = СогласованныеБудущиеОтпуска(ПараметрыОстатков.Сотрудники);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	               |	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	               |	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска.СрезПоследних(&ДатаОстатков, Сотрудник В (&Сотрудники)) КАК ЗаработанныеПраваНаОтпуска";
	
	ЗаработанныеПраваНачальныеЗначения = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	               |	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	               |	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	               |ГДЕ
	               |	ЗаработанныеПраваНаОтпуска.Период > &ДатаОстатков
	               |	И ЗаработанныеПраваНаОтпуска.Период <= ДОБАВИТЬКДАТЕ(&ДатаОстатков, ГОД, 1)
	               |	И ЗаработанныеПраваНаОтпуска.Сотрудник В(&Сотрудники)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаработанныеПраваНаОтпуска.Период";
	
	ЗаработанныеПраваНаОтпуска = Запрос.Выполнить().Выгрузить();
	ЗаработанныеПраваНаОтпуска.Индексы.Добавить("Сотрудник");
	
	БудущиеПериоды = Новый ТаблицаЗначений;
	БудущиеПериоды.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	БудущиеПериоды.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	БудущиеПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеПериоды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	БудущиеПериоды.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	ТекущиеОстатки = БудущиеПериоды.СкопироватьКолонки();
	ТекущиеОстатки.Колонки.Добавить("ДнейКомпенсации", Новый ОписаниеТипов("Число"));
	ТекущиеОстатки.Колонки.Добавить("ДопустимаяПродолжительностьОтпуска", Новый ОписаниеТипов("Число"));
	
	Для Каждого КадровыеДанные Из КадровыеДанныеСотрудников Цикл
		
		ИспользованоДней = 0;
		ЗаявленияНаОтпуск = СогласованныеЗаявления.НайтиСтроки(Новый Структура("ФизическоеЛицо", КадровыеДанные.ФизическоеЛицо));
		Для Каждого Заявление Из ЗаявленияНаОтпуск Цикл
			ИспользованоДней = ИспользованоДней + Заявление.КоличествоДней;
		КонецЦикла;
		
		ОстатокОтпуска = 0;
		ОстатокОтпускаСотрудника = Остатки.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанные.Сотрудник));
		Если ОстатокОтпускаСотрудника.Количество() > 0 Тогда
			ОстатокОтпуска = ОстатокОтпускаСотрудника[0].Дни;
		КонецЕсли;
		
		ТекущиеОстаткиСотрудника = ТекущиеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеОстаткиСотрудника, КадровыеДанные);
		ТекущиеОстаткиСотрудника.Период = ПараметрыОстатков.ДатаОстатков;
		ТекущиеОстаткиСотрудника.КоличествоДней = ОстатокОтпуска - ИспользованоДней;
		ТекущиеОстаткиСотрудника.ДнейКомпенсации = КомпенсацияОтпуска[ТекущиеОстаткиСотрудника.Сотрудник];
		ТекущиеОстаткиСотрудника.ДопустимаяПродолжительностьОтпуска = ДопустимаяПродолжительность[ТекущиеОстаткиСотрудника.Сотрудник];
		
		ПредыдущиеЗначения = Новый Соответствие;
		ПредыдущиеЗначенияСотрудника = ЗаработанныеПраваНачальныеЗначения.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанные.Сотрудник));
		Для Каждого ПраваСотрудника Из ПредыдущиеЗначенияСотрудника Цикл
			ПредыдущиеЗначения.Вставить(ПраваСотрудника.ВидЕжегодногоОтпуска, ПраваСотрудника.КоличествоДней);
		КонецЦикла;
		
		НоваяСтрока = Неопределено;
		ЗаработаноДней = ТекущиеОстаткиСотрудника.КоличествоДней;
		ЗаработанныеПрава = ЗаработанныеПраваНаОтпуска.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанные.Сотрудник));
		Для Каждого ПраваСотрудника Из ЗаработанныеПрава Цикл 
			Если НоваяСтрока = Неопределено Или НоваяСтрока.Период <> ПраваСотрудника.Период Тогда
				НоваяСтрока = БудущиеПериоды.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КадровыеДанные);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПраваСотрудника);
			ПредыдущееЗначение = ПредыдущиеЗначения.Получить(ПраваСотрудника.ВидЕжегодногоОтпуска);
			ПредыдущееЗначение = ?(ПредыдущееЗначение = Неопределено, 0, ПредыдущееЗначение);
			ЗаработаноДней = ЗаработаноДней + ПраваСотрудника.КоличествоДней - ПредыдущееЗначение;
			НоваяСтрока.КоличествоДней = ?(ЗаработаноДней >= 0, Цел(ЗаработаноДней), Цел(ЗаработаноДней) - 1);
			ПредыдущиеЗначения.Вставить(ПраваСотрудника.ВидЕжегодногоОтпуска, ПраваСотрудника.КоличествоДней);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, БудущиеПериоды", ТекущиеОстатки, БудущиеПериоды);
	
КонецФункции

Функция ДоступноеКоличествоДнейКомпенсацииОтпускаДляСервиса(Остатки, ДатаАктуальности)
	
	ДниКомпенсации = ДоступноеКоличествоДнейКомпенсацииОтпуска(Остатки, ДатаАктуальности);
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДниКомпенсации, "Ключ");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТБудущиеОтпускаСотрудников(МенеджерВременныхТаблиц, Сотрудники, ДатаАктуальности);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	СУММА(ФактическиеОтпуска.КоличествоДней) КАК КоличествоДней
		|ИЗ
		|	ВТБудущиеОтпускаСотрудников КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическиеОтпуска.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	СУММА(ФактическиеОтпуска.КоличествоДней) > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КоличествоДней = Макс(ДниКомпенсации[Выборка.Сотрудник] - Выборка.КоличествоДней, 0);
		ДниКомпенсации.Вставить(Выборка.Сотрудник, КоличествоДней);
	КонецЦикла;
	
	Возврат ДниКомпенсации;
	
КонецФункции

Функция ДопустимаяПродолжительностьОтпуска(ИсходныеОстатки, ПараметрыОстатков)
	
	ДопустимаяПродолжительность = Новый Соответствие;
	
	Остатки = ИсходныеОстатки.Скопировать();
	Основной = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТБудущиеОтпускаСотрудников(МенеджерВременныхТаблиц, ПараметрыОстатков.Сотрудники, ПараметрыОстатков.ДатаОстатков);
	СоздатьВТСогласованныеЗаявкиНаОтпуск(МенеджерВременныхТаблиц, ПараметрыОстатков.Сотрудники, ПараметрыОстатков.ДатаОстатков);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ПараметрыОстатков.ДатаОстатков);
	Запрос.УстановитьПараметр("Основной", Основной);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СогласованныеЗаявки.Сотрудник КАК Сотрудник,
		|	СогласованныеЗаявки.ВидОтпуска КАК ВидОтпуска,
		|	СогласованныеЗаявки.КоличествоДней КАК КоличествоДней
		|ПОМЕСТИТЬ ВТБудущиеОтпуска
		|ИЗ
		|	ВТСогласованныеЗаявкиНаОтпуск КАК СогласованныеЗаявки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидОтпуска,
		|	ФактическиеОтпуска.КоличествоДней
		|ИЗ
		|	ВТБудущиеОтпускаСотрудников КАК ФактическиеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БудущиеОтпуска.Сотрудник КАК Сотрудник,
		|	БудущиеОтпуска.ВидОтпуска КАК ВидОтпуска,
		|	СУММА(БудущиеОтпуска.КоличествоДней) КАК КоличествоДней
		|ИЗ
		|	ВТБудущиеОтпуска КАК БудущиеОтпуска
		|
		|СГРУППИРОВАТЬ ПО
		|	БудущиеОтпуска.Сотрудник,
		|	БудущиеОтпуска.ВидОтпуска";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИндексТаблицы = "Сотрудник, ВидОтпуска";
	Остатки.Индексы.Добавить(ИндексТаблицы);
	Отбор = Новый Структура(ИндексТаблицы);
	СтрокиКУдалению = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		ОсталосьСписать = Выборка.КоличествоДней;
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		НайденныеСтроки = Остатки.НайтиСтроки(Отбор);
		Для Каждого СтрокаОстатков Из НайденныеСтроки Цикл
			КоличествоДней = Мин(СтрокаОстатков.Дни, ОсталосьСписать);
			СтрокаОстатков.Дни = СтрокаОстатков.Дни - КоличествоДней;
			Если СтрокаОстатков.Дни = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОстатков);
			КонецЕсли;
			ОсталосьСписать = ОсталосьСписать - КоличествоДней;
			Если ОсталосьСписать = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Остатки.Индексы.Удалить(Остатки.Индексы.Количество() - 1);
	Для Каждого СтрокаОстатков Из СтрокиКУдалению Цикл
		Остатки.Удалить(СтрокаОстатков);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДопустимаяПродолжительностьОтпуска(Запрос.МенеджерВременныхТаблиц, Остатки, ПараметрыОстатков.ДатаОстатков);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДопустимаяПродолжительность.Сотрудник КАК Сотрудник,
		|	ДопустимаяПродолжительность.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТОтбор
		|ИЗ
		|	ВТДопустимаяПродолжительностьОтпуска КАК ДопустимаяПродолжительность
		|ГДЕ
		|	ДопустимаяПродолжительность.ВидОтпуска = &Основной
		|	И ДопустимаяПродолжительность.Использовано >= 14
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отбор.Сотрудник КАК Сотрудник,
		|	ЗаявкаСотрудникаОтпуск.ДатаНачалаОтпуска КАК ДатаНачала,
		|	ЗаявкаСотрудникаОтпуск.ДатаОкончанияОтпуска КАК ДатаОкончания,
		|	ЗаявкаСотрудникаОтпуск.КоличествоДнейОтпуска КАК КоличествоДней
		|ИЗ
		|	БизнесПроцесс.ЗаявкаСотрудникаОтпуск КАК ЗаявкаСотрудникаОтпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Отбор
		|		ПО ЗаявкаСотрудникаОтпуск.ФизическоеЛицо = Отбор.ФизическоеЛицо
		|			И (ЗаявкаСотрудникаОтпуск.ДатаНачалаОтпуска > КОНЕЦПЕРИОДА(&ДатаОстатков, ДЕНЬ))
		|			И (ЗаявкаСотрудникаОтпуск.ОтпускСогласован)
		|ГДЕ
		|	ЗаявкаСотрудникаОтпуск.Выполнено = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отбор.Сотрудник,
		|	ЗаявкаОтпуск.ДатаНачала,
		|	ЗаявкаОтпуск.ДатаОкончания,
		|	ЗаявкаОтпуск.ДнейОтпуска
		|ИЗ
		|	Документ.ЗаявкаОтпускКабинетСотрудника КАК ЗаявкаОтпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Отбор
		|		ПО ЗаявкаОтпуск.ФизическоеЛицо = Отбор.ФизическоеЛицо
		|			И (ЗаявкаОтпуск.ДатаНачала > КОНЕЦПЕРИОДА(&ДатаОстатков, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаОтпускКабинетСотрудника КАК ОтменяющаяЗаявка
		|		ПО ЗаявкаОтпуск.Ссылка = ОтменяющаяЗаявка.ОтменяемаяЗаявка
		|ГДЕ
		|	НЕ ЗаявкаОтпуск.Выполнена
		|	И ЗаявкаОтпуск.ВариантИсправления <> ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена)
		|	И ОтменяющаяЗаявка.Номер ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Период КАК Период,
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	СУММА(ФактическиеОтпуска.Количество) КАК КоличествоДней,
		|	ФактическиеОтпуска.Компенсация КАК Компенсация
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Остатки
		|		ПО ФактическиеОтпуска.Сотрудник = Остатки.Сотрудник
		|			И (ФактическиеОтпуска.ВидЕжегодногоОтпуска = &Основной)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическиеОтпуска.Период,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.Компенсация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Период УБЫВ,
		|	Компенсация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДопустимаяПродолжительность.Сотрудник КАК Сотрудник,
		|	СУММА(ДопустимаяПродолжительность.Использовано) КАК Использовано,
		|	СУММА(ВЫБОР
		|			КОГДА ДопустимаяПродолжительность.ВидОтпуска = &Основной
		|				ТОГДА ДопустимаяПродолжительность.Использовано
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ИспользованоОсновногоОтпуска,
		|	СУММА(ДопустимаяПродолжительность.ОстатокКонецГода) КАК ОстатокКонецГода
		|ИЗ
		|	ВТДопустимаяПродолжительностьОтпуска КАК ДопустимаяПродолжительность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДопустимаяПродолжительность.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаявлений = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3].Выгрузить();
	ДанныеЗаявлений.Индексы.Добавить("Сотрудник");
	
	ДанныеОтпусков = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	ДанныеОтпусков.Индексы.Добавить("Сотрудник");
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Продолжительность = Выборка.ОстатокКонецГода - 14;
		Если Продолжительность >= 13 Тогда
			ДопустимаяПродолжительность.Вставить(Выборка.Сотрудник, 14);
			Продолжить;
		КонецЕсли;
		Если Выборка.ИспользованоОсновногоОтпуска < 14 Тогда
			ДопустимаяПродолжительность.Вставить(Выборка.Сотрудник, Продолжительность);
			Продолжить;
		КонецЕсли;
		Использовано = Выборка.ИспользованоОсновногоОтпуска;
		ЕстьДвухнедельныйОтпуск = Ложь;
		Для Каждого ДанныеЗаявления Из ДанныеЗаявлений Цикл 
			Если Использовано < 14 Тогда
				Прервать;
			КонецЕсли;
			Если ДанныеЗаявления.КоличествоДней >= 14 Тогда 
				ЕстьДвухнедельныйОтпуск = Истина;
				Прервать;
			КонецЕсли;
			Использовано = Использовано - ДанныеЗаявления.КоличествоДней;
		КонецЦикла;
		Если ЕстьДвухнедельныйОтпуск Тогда
			ДопустимаяПродолжительность.Вставить(Выборка.Сотрудник, 14);
			Продолжить;
		КонецЕсли;
		Для Каждого ДанныеОтпуска Из ДанныеОтпусков Цикл 
			Если Использовано < 14 Тогда
				Прервать;
			КонецЕсли;
			Если Не ДанныеОтпуска.Компенсация И ДанныеОтпуска.КоличествоДней >= 14 Тогда 
				ЕстьДвухнедельныйОтпуск = Истина;
				Прервать;
			КонецЕсли;
			Использовано = Использовано - ДанныеОтпуска.КоличествоДней;
		КонецЦикла;
		ДопустимаяПродолжительность.Вставить(Выборка.Сотрудник, ?(ЕстьДвухнедельныйОтпуск, 14, Продолжительность));
	КонецЦикла;
	
	Возврат ДопустимаяПродолжительность;
	
КонецФункции

Функция СогласованныеБудущиеОтпуска(Сотрудники)
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТБудущиеОтпускаСотрудников(МенеджерВременныхТаблиц, Сотрудники, ДатаАктуальности);
	СоздатьВТСогласованныеЗаявкиНаОтпуск(МенеджерВременныхТаблиц, Сотрудники, ДатаАктуальности);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СогласованныеЗаявки.Сотрудник КАК Сотрудник,
		|	СогласованныеЗаявки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СогласованныеЗаявки.ДатаНачала КАК ДатаНачала,
		|	СогласованныеЗаявки.ДатаОкончания КАК ДатаОкончания,
		|	СогласованныеЗаявки.КоличествоДней КАК КоличествоДней
		|ИЗ
		|	ВТСогласованныеЗаявкиНаОтпуск КАК СогласованныеЗаявки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	БудущиеОтпуска.Сотрудник,
		|	БудущиеОтпуска.Сотрудник.ФизическоеЛицо,
		|	БудущиеОтпуска.ДатаНачала,
		|	БудущиеОтпуска.ДатаОкончания,
		|	БудущиеОтпуска.КоличествоДней
		|ИЗ
		|	ВТБудущиеОтпускаСотрудников КАК БудущиеОтпуска
		|ГДЕ
		|	НЕ БудущиеОтпуска.Компенсация";
	
	БудущиеОтпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат БудущиеОтпуска;
	
КонецФункции

Функция ИнформацияОбОтпусках(Сотрудники, ТекущиеОстаткиОтпусков, ВРазрезеСотрудников = Ложь)
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ПлановыеОтпуска = ПлановыеОтпускаСотрудников(Сотрудники, ТекущаяДата);
	ФактическиеОтпуска = ФактическиеОтпускаСотрудников(Сотрудники, ТекущаяДата);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, Истина, Сотрудники, "ВидЗанятости", ТекущаяДата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТекущиеОстаткиОтпусков", ТекущиеОстаткиОтпусков);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПлановыеОтпуска", ПлановыеОтпуска);
	Запрос.УстановитьПараметр("ФактическиеОтпуска", ФактическиеОтпуска);
	Запрос.УстановитьПараметр("ВРазрезеСотрудников", ВРазрезеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеОтпуска.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеОтпуска.ДатаНачала КАК ДатаНачала,
		|	ПлановыеОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	ПлановыеОтпуска.КоличествоДней КАК КоличествоДней
		|ПОМЕСТИТЬ ВТПлановыеОтпускаПредварительно
		|ИЗ
		|	&ПлановыеОтпуска КАК ПлановыеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	ФактическиеОтпуска.КоличествоДней КАК КоличествоДней
		|ПОМЕСТИТЬ ВТФактическиеОтпускаПредварительно
		|ИЗ
		|	&ФактическиеОтпуска КАК ФактическиеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпускаПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФактическиеОтпускаПредварительно.ДатаНачала КАК ДатаНачала,
		|	ФактическиеОтпускаПредварительно.ДатаОкончания КАК ДатаОкончания,
		|	ФактическиеОтпускаПредварительно.КоличествоДней КАК КоличествоДней
		|ПОМЕСТИТЬ ВТОтпускаФактические
		|ИЗ
		|	ВТФактическиеОтпускаПредварительно КАК ФактическиеОтпускаПредварительно
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаСотрудникаОтпуск.ФизическоеЛицо,
		|	ЗаявкаСотрудникаОтпуск.ДатаНачалаОтпуска,
		|	ЗаявкаСотрудникаОтпуск.ДатаОкончанияОтпуска,
		|	ЗаявкаСотрудникаОтпуск.КоличествоДнейОтпуска
		|ИЗ
		|	БизнесПроцесс.ЗаявкаСотрудникаОтпуск КАК ЗаявкаСотрудникаОтпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО ЗаявкаСотрудникаОтпуск.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		|			И (ЗаявкаСотрудникаОтпуск.ОтпускСогласован)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаСотрудникаОтпуск.ФизическоеЛицо,
		|	ЗаявкаСотрудникаОтпуск.ДатаНачала,
		|	ЗаявкаСотрудникаОтпуск.ДатаОкончания,
		|	ЗаявкаСотрудникаОтпуск.ДнейОтпуска
		|ИЗ
		|	Документ.ЗаявкаОтпускКабинетСотрудника КАК ЗаявкаСотрудникаОтпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО ЗаявкаСотрудникаОтпуск.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаОтпускКабинетСотрудника КАК ОтменяющаяЗаявка
		|		ПО ЗаявкаСотрудникаОтпуск.Ссылка = ОтменяющаяЗаявка.ОтменяемаяЗаявка
		|ГДЕ
		|	ЗаявкаСотрудникаОтпуск.РезультатВыполнения <> ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована)
		|	И ЗаявкаСотрудникаОтпуск.ВариантИсправления <> ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена)
		|	И ОтменяющаяЗаявка.Номер ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаФактические.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ОтпускаФактические.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТДатыПредыдущихОтпусков
		|ИЗ
		|	ВТОтпускаФактические КАК ОтпускаФактические
		|ГДЕ
		|	ОтпускаФактические.ДатаНачала < &ТекущаяДата
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаФактические.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаФактические.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(ОтпускаФактические.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТДатыСледующихОтпусков
		|ИЗ
		|	ВТОтпускаФактические КАК ОтпускаФактические
		|ГДЕ
		|	ОтпускаФактические.ДатаНачала >= &ТекущаяДата
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаФактические.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеОтпускаПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеОтпускаПредварительно.ДатаНачала КАК ДатаНачала,
		|	ПлановыеОтпускаПредварительно.ДатаОкончания КАК ДатаОкончания,
		|	ПлановыеОтпускаПредварительно.КоличествоДней КАК КоличествоДней
		|ПОМЕСТИТЬ ВТПлановыеОтпуска
		|ИЗ
		|	ВТПлановыеОтпускаПредварительно КАК ПлановыеОтпускаПредварительно
		|ГДЕ
		|	ПлановыеОтпускаПредварительно.ДатаНачала >= &ТекущаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеОтпуска.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(ПлановыеОтпуска.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТДатыСледующихПлановыхОтпусков
		|ИЗ
		|	ВТПлановыеОтпуска КАК ПлановыеОтпуска
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеОтпуска.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ДатыПредыдущихОтпусков.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПредыдущегоОтпуска,
		|	ЕСТЬNULL(ДатыСледующихОтпусков.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаСледующегоОтпуска,
		|	ЕСТЬNULL(ДатыСледующихПлановыхОтпусков.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПлановогоОтпуска
		|ПОМЕСТИТЬ ВТСотрудникиСДатами
		|ИЗ
		|	ВТФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПредыдущихОтпусков КАК ДатыПредыдущихОтпусков
		|		ПО ФизическиеЛица.ФизическоеЛицо = ДатыПредыдущихОтпусков.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыСледующихОтпусков КАК ДатыСледующихОтпусков
		|		ПО ФизическиеЛица.ФизическоеЛицо = ДатыСледующихОтпусков.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыСледующихПлановыхОтпусков КАК ДатыСледующихПлановыхОтпусков
		|		ПО ФизическиеЛица.ФизическоеЛицо = ДатыСледующихПлановыхОтпусков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеОстаткиОтпусков.Сотрудник КАК Сотрудник,
		|	ТекущиеОстаткиОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеОстаткиОтпусков.КоличествоДней КАК КоличествоДней,
		|	ТекущиеОстаткиОтпусков.ДнейКомпенсации КАК ДнейКомпенсации,
		|	ТекущиеОстаткиОтпусков.ДопустимаяПродолжительностьОтпуска КАК ДопустимаяПродолжительностьОтпуска
		|ПОМЕСТИТЬ ВТТекущиеОстаткиОтпусковПредварительно
		|ИЗ
		|	&ТекущиеОстаткиОтпусков КАК ТекущиеОстаткиОтпусков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеОстаткиОтпусков.Сотрудник КАК Сотрудник,
		|	ТекущиеОстаткиОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеОстаткиОтпусков.КоличествоДней КАК КоличествоДней,
		|	ТекущиеОстаткиОтпусков.ДнейКомпенсации КАК ДнейКомпенсации,
		|	ТекущиеОстаткиОтпусков.ДопустимаяПродолжительностьОтпуска КАК ДопустимаяПродолжительностьОтпуска
		|ПОМЕСТИТЬ ВТТекущиеОстаткиОтпусков
		|ИЗ
		|	ВТТекущиеОстаткиОтпусковПредварительно КАК ТекущиеОстаткиОтпусков
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ФизическоеЛицо,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеОстаткиОтпусковПредварительно КАК ТекущиеОстаткиОтпусков
		|		ПО Сотрудники.Ссылка = ТекущиеОстаткиОтпусков.Сотрудник
		|			И (Сотрудники.Ссылка В (&Сотрудники))
		|			И (&ВРазрезеСотрудников)
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И ТекущиеОстаткиОтпусков.Сотрудник ЕСТЬ NULL
		|	И &ВРазрезеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСДатами.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ТекущиеОстаткиОтпусков.КоличествоДней, 0) КАК ОстатокОтпуска,
		|	ЕСТЬNULL(ТекущиеОстаткиОтпусков.ДнейКомпенсации, 0) КАК ДнейКомпенсации,
		|	ЕСТЬNULL(ТекущиеОстаткиОтпусков.ДопустимаяПродолжительностьОтпуска, 0) КАК ДопустимаяПродолжительностьОтпуска,
		|	ЕСТЬNULL(ОтпускаФактическиеПрошлогоПериода.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПредыдущегоОтпуска,
		|	МИНИМУМ(ЕСТЬNULL(ОтпускаФактическиеПрошлогоПериода.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияПредыдущегоОтпуска,
		|	МИНИМУМ(ЕСТЬNULL(ОтпускаФактическиеПрошлогоПериода.КоличествоДней, 0)) КАК КоличествоДнейПредыдущегоОтпуска,
		|	ЕСТЬNULL(ЕСТЬNULL(ОтпускаФактическиеБудущегоПериода.ДатаНачала, ПлановыеОтпуска.ДатаНачала), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаСледующегоОтпуска,
		|	МИНИМУМ(ЕСТЬNULL(ЕСТЬNULL(ОтпускаФактическиеБудущегоПериода.ДатаОкончания, ПлановыеОтпуска.ДатаОкончания), ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияСледующегоОтпуска,
		|	МИНИМУМ(ЕСТЬNULL(ЕСТЬNULL(ОтпускаФактическиеБудущегоПериода.КоличествоДней, ПлановыеОтпуска.КоличествоДней), 0)) КАК КоличествоДнейСледующегоОтпуска
		|ИЗ
		|	ВТСотрудникиСДатами КАК СотрудникиСДатами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеОстаткиОтпусков КАК ТекущиеОстаткиОтпусков
		|		ПО СотрудникиСДатами.ФизическоеЛицо = ТекущиеОстаткиОтпусков.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаФактические КАК ОтпускаФактическиеПрошлогоПериода
		|		ПО СотрудникиСДатами.ФизическоеЛицо = ОтпускаФактическиеПрошлогоПериода.ФизическоеЛицо
		|			И СотрудникиСДатами.ДатаНачалаПредыдущегоОтпуска = ОтпускаФактическиеПрошлогоПериода.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаФактические КАК ОтпускаФактическиеБудущегоПериода
		|		ПО СотрудникиСДатами.ФизическоеЛицо = ОтпускаФактическиеБудущегоПериода.ФизическоеЛицо
		|			И СотрудникиСДатами.ДатаНачалаСледующегоОтпуска = ОтпускаФактическиеБудущегоПериода.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеОтпуска КАК ПлановыеОтпуска
		|		ПО СотрудникиСДатами.ФизическоеЛицо = ПлановыеОтпуска.ФизическоеЛицо
		|			И СотрудникиСДатами.ДатаНачалаПлановогоОтпуска = ПлановыеОтпуска.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиСДатами.ФизическоеЛицо,
		|	ЕСТЬNULL(ТекущиеОстаткиОтпусков.КоличествоДней, 0),
		|	ЕСТЬNULL(ТекущиеОстаткиОтпусков.ДнейКомпенсации, 0),
		|	ЕСТЬNULL(ТекущиеОстаткиОтпусков.ДопустимаяПродолжительностьОтпуска, 0),
		|	ЕСТЬNULL(ОтпускаФактическиеПрошлогоПериода.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)),
		|	ЕСТЬNULL(ЕСТЬNULL(ОтпускаФактическиеБудущегоПериода.ДатаНачала, ПлановыеОтпуска.ДатаНачала), ДАТАВРЕМЯ(1, 1, 1))";
	
	Если ВРазрезеСотрудников Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиСДатами.ФизическоеЛицо КАК ФизическоеЛицо,",
			"СотрудникиСДатами.ФизическоеЛицо КАК ФизическоеЛицо, ТекущиеОстаткиОтпусков.Сотрудник Как Сотрудник,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеОстаткиОтпусков КАК ТекущиеОстаткиОтпусков", 
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущиеОстаткиОтпусков КАК ТекущиеОстаткиОтпусков");
		Запрос.Текст = Запрос.Текст + ", ТекущиеОстаткиОтпусков.Сотрудник";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПлановыеОтпускаСотрудников(Сотрудники, ТекущаяДата)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТОтборГрафиковОтпусков
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
	
	Запрос.Выполнить();
	
	СоздатьВТГрафикОтпусковДляЛичныхКабинетов(Запрос.МенеджерВременныхТаблиц);
	
	ПлановыеОтпуска = Новый ТаблицаЗначений;
	ПлановыеОтпуска.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПлановыеОтпуска.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ПлановыеОтпуска.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ПлановыеОтпуска.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ГрафикОтпусков.ДатаНачала КАК ДатаНачала,
		|	ГрафикОтпусков.ДатаОкончания КАК ДатаОкончания,
		|	ГрафикОтпусков.КоличествоДней КАК КоличествоДней
		|ИЗ
		|	ВТГрафикОтпусков КАК ГрафикОтпусков
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(ГрафикОтпусков.ДатаНачала, ГОД, 1) >= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ДатаНачала";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПлановыеОтпуска = НепрерывныеПериодыОтпусков(Выборка);
	
	Возврат ПлановыеОтпуска;
	
КонецФункции

Функция ФактическиеОтпускаСотрудников(Сотрудники, ТекущаяДата)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ФактическиеОтпуска.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТПоследниеФактическиеОтпуска
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	НЕ ФактическиеОтпуска.Компенсация
		|	И ФактическиеОтпуска.Сотрудник В(&Сотрудники)
		|	И ФактическиеОтпуска.ДатаНачала < &ТекущаяДата
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическиеОтпуска.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ПоследниеФактическиеОтпуска.ДатаНачала, ГОД, -1) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТФактическиеОтпускаОтбор
		|ИЗ
		|	ВТПоследниеФактическиеОтпуска КАК ПоследниеФактическиеОтпуска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1)
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеФактическиеОтпуска КАК ПоследниеФактическиеОтпуска
		|		ПО Сотрудники.Ссылка = ПоследниеФактическиеОтпуска.Сотрудник
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И ПоследниеФактическиеОтпуска.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФактическиеОтпускаЗаПериод
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическиеОтпускаОтбор КАК ФактическиеОтпускаОтбор
		|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаОтбор.Сотрудник
		|			И ФактическиеОтпуска.ДатаНачала >= ФактическиеОтпускаОтбор.ДатаНачала
		|			И (НЕ ФактическиеОтпуска.Компенсация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпускаЗаПериод.Сотрудник КАК Сотрудник,
		|	ФактическиеОтпускаЗаПериод.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МИНИМУМ(ФактическиеОтпускаЗаПериод.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ФактическиеОтпускаЗаПериод.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФактическиеОтпускаДаты
		|ИЗ
		|	ВТФактическиеОтпускаЗаПериод КАК ФактическиеОтпускаЗаПериод
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическиеОтпускаЗаПериод.Сотрудник,
		|	ФактическиеОтпускаЗаПериод.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	СУММА(ФактическиеОтпуска.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТФактическиеОтпуска
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическиеОтпускаДаты КАК ФактическиеОтпускаДаты
		|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаДаты.Сотрудник
		|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаДаты.ВидЕжегодногоОтпуска
		|			И ФактическиеОтпуска.ДатаНачала >= ФактическиеОтпускаДаты.ДатаНачала
		|			И ФактическиеОтпуска.ДатаОкончания <= ФактическиеОтпускаДаты.ДатаОкончания
		|			И (НЕ ФактическиеОтпуска.Компенсация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.ДатаОкончания,
		|	ФактическиеОтпуска.ДатаНачала
		|
		|ИМЕЮЩИЕ
		|	СУММА(ФактическиеОтпуска.Количество) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыОтпусков
		|ИЗ
		|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыОтпусков.Сотрудник КАК Сотрудник,
		|	ПериодыОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ПериодыОтпусков.ДатаНачала КАК ДатаНачала,
		|	ПериодыОтпусков.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТМаксимальныеПериоды
		|ИЗ
		|	ВТПериодыОтпусков КАК ПериодыОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОтпусков КАК Интервалы
		|		ПО ПериодыОтпусков.Сотрудник = Интервалы.Сотрудник
		|			И ПериодыОтпусков.ВидЕжегодногоОтпуска = Интервалы.ВидЕжегодногоОтпуска
		|			И ПериодыОтпусков.ДатаНачала >= Интервалы.ДатаНачала
		|			И ПериодыОтпусков.ДатаОкончания <= Интервалы.ДатаОкончания
		|			И (НЕ(ПериодыОтпусков.ДатаНачала = Интервалы.ДатаНачала
		|					И ПериодыОтпусков.ДатаОкончания = Интервалы.ДатаОкончания))
		|ГДЕ
		|	Интервалы.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеПериоды.Сотрудник КАК Сотрудник,
		|	МаксимальныеПериоды.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МаксимальныеПериоды.ДатаНачала КАК ДатаНачала,
		|	МаксимальныеПериоды.ДатаОкончания КАК ДатаОкончания,
		|	СУММА(ФактическиеОтпуска.Количество) КАК КоличествоДней
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТМаксимальныеПериоды КАК МаксимальныеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО МаксимальныеПериоды.Сотрудник = ФактическиеОтпуска.Сотрудник
		|			И МаксимальныеПериоды.ВидЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска
		|			И МаксимальныеПериоды.ДатаНачала <= ФактическиеОтпуска.ДатаНачала
		|			И МаксимальныеПериоды.ДатаОкончания >= ФактическиеОтпуска.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеПериоды.Сотрудник,
		|	МаксимальныеПериоды.ВидЕжегодногоОтпуска,
		|	МаксимальныеПериоды.ДатаНачала,
		|	МаксимальныеПериоды.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	Сотрудники.ДатаНачала КАК ДатаНачала,
		|	Сотрудники.ДатаОкончания КАК ДатаОкончания,
		|	Сотрудники.КоличествоДней КАК КоличествоДней
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ДатаНачала";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ФактическиеОтпуска = НепрерывныеПериодыОтпусков(Выборка);
	
	Возврат ФактическиеОтпуска;
	
КонецФункции

Функция НепрерывныеПериодыОтпусков(Выборка)
	
	Отпуска = Новый ТаблицаЗначений;
	Отпуска.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Отпуска.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Отпуска.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Отпуска.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		ДанныеОтпуска = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДатаНачала) И ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Если ДанныеОтпуска <> Неопределено 
					И Выборка.ДатаНачала = ДанныеОтпуска.ДатаОкончания + 86400 Тогда
					ДанныеОтпуска.ДатаОкончания = Выборка.ДатаОкончания;
					ДанныеОтпуска.КоличествоДней = ДанныеОтпуска.КоличествоДней + Выборка.КоличествоДней;
					Продолжить;
				КонецЕсли;
				ДанныеОтпуска = Отпуска.Добавить();
				ЗаполнитьЗначенияСвойств(ДанныеОтпуска, Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Отпуска;
	
КонецФункции

Функция ДанныеОстатковОтпусковБудущихПериодов(Список, ОстаткиБудущихПериодов, ВРазрезеСотрудников = Ложь)
	
	ИменаКолонок = ?(ВРазрезеСотрудников, "Сотрудник, ВидОтпуска, Период, КоличествоДней", "Период, КоличествоДней");
	
	Результат = ОстаткиБудущихПериодов.Скопировать(, "ФизическоеЛицо");
	Результат.Свернуть("ФизическоеЛицо");
	Результат.Колонки.Добавить("Остатки");
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		Отбор = Новый Структура("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		СтрокиФизЛица = ОстаткиБудущихПериодов.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(СтрокиФизЛица) Тогда
			СтрокаТаблицы.Остатки = ОстаткиБудущихПериодов.Скопировать(СтрокиФизЛица, ИменаКолонок);
		Иначе
			СтрокаТаблицы.Остатки = ОстаткиБудущихПериодов.СкопироватьКолонки(ИменаКолонок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьВТСогласованныеЗаявкиНаОтпуск(МенеджерВременныхТаблиц, Сотрудники, ДатаАктуальности) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Основной", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаСотрудникаОтпуск.Ссылка КАК Документ,
		|	ЗаявкаСотрудникаОтпуск.Сотрудник КАК Сотрудник,
		|	ЗаявкаСотрудникаОтпуск.ФизическоеЛицо КАК ФизическоеЛицо,
		|	&Основной КАК ВидОтпуска,
		|	ЗаявкаСотрудникаОтпуск.ДатаНачалаОтпуска КАК ДатаНачала,
		|	ЗаявкаСотрудникаОтпуск.ДатаОкончанияОтпуска КАК ДатаОкончания,
		|	ЗаявкаСотрудникаОтпуск.КоличествоДнейОтпуска КАК КоличествоДней
		|ПОМЕСТИТЬ ВТСогласованныеЗаявкиНаОтпуск
		|ИЗ
		|	БизнесПроцесс.ЗаявкаСотрудникаОтпуск КАК ЗаявкаСотрудникаОтпуск
		|ГДЕ
		|	ЗаявкаСотрудникаОтпуск.ДатаНачалаОтпуска > &ДатаАктуальности
		|	И ЗаявкаСотрудникаОтпуск.ОтпускСогласован
		|	И ЗаявкаСотрудникаОтпуск.Сотрудник В(&Сотрудники)
		|	И ЗаявкаСотрудникаОтпуск.Выполнено = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаОтпуск.Ссылка,
		|	ЗаявкаОтпуск.Сотрудник,
		|	ЗаявкаОтпуск.ФизическоеЛицо,
		|	&Основной,
		|	ЗаявкаОтпуск.ДатаНачала,
		|	ЗаявкаОтпуск.ДатаОкончания,
		|	ЗаявкаОтпуск.ДнейОтпуска
		|ИЗ
		|	Документ.ЗаявкаОтпускКабинетСотрудника КАК ЗаявкаОтпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаОтпускКабинетСотрудника КАК ОтменяющаяЗаявка
		|		ПО ЗаявкаОтпуск.Ссылка = ОтменяющаяЗаявка.ОтменяемаяЗаявка
		|ГДЕ
		|	ЗаявкаОтпуск.ДатаНачала > &ДатаАктуальности
		|	И ЗаявкаОтпуск.Сотрудник В(&Сотрудники)
		|	И НЕ ЗаявкаОтпуск.Выполнена
		|	И ЗаявкаОтпуск.ВариантИсправления <> ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена)
		|	И ОтменяющаяЗаявка.Номер ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует сведения об отпусках сотрудников в разрезе рабочих мест и видов отпусков 
// для публикации в сервисе 1С:Кабинет сотрудника.
//
// 	Параметры
// 		Сотрудники - Массив
// 		ДатаАктуальности - Дата - дата, на которую получаются данные.
//
// 	Возвращаемое значение:
// 		Результат - Структура - содержит свойства
// 			* ИнформацияОбИспользованииОтпуска - ТаблицаЗначений - содержит колонки
// 					* ФизическоеЛицо
// 					* ОстатокОтпуска
// 					* ДнейКомпенсации
// 					* ДопустимаяПродолжительностьОтпуска
// 					* ДатаНачалаПредыдущегоОтпуска
// 					* ДатаОкончанияПредыдущегоОтпуска
// 					* КоличествоДнейПредыдущегоОтпуска
// 					* ДатаНачалаСледующегоОтпуска
// 					* ДатаОкончанияСледующегоОтпуска
// 					* КоличествоДнейСледующегоОтпуска
// 			* ПрогнозируемыеНеиспользованныеДниОтпуска - ТаблицаЗначений - содержит колонки
// 					* ФизическоеЛицо
// 					* Остатки - ТаблицаЗначений - содержит колонки
// 							* Период
// 							* КоличествоДней
// 			* БудущиеПериоды - ТаблицаЗначений- содержит колонки
// 					* Период
// 					* Организация
// 					* Сотрудник
// 					* ФизическоеЛицо
// 					* КоличествоДней
//
Функция СведенияОбОтпускахСотрудниковДляПубликацииВСервисе(ФизическиеЛица, ДатаАктуальности) Экспорт

	Результат = Новый Структура("
	|ИнформацияОбИспользованииОтпуска,
	|ПрогнозируемыеНеиспользованныеДниОтпуска,
	|БудущиеПериоды,
	|ТекущиеОстаткиОтпусков");
	
	Сотрудники = СотрудникиДляПубликацииОстатковОтпусков(ФизическиеЛица, ДатаАктуальности);
	Если Сотрудники.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОстатков = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыОстатков.ДатаОстатков = ДатаАктуальности;
	ПараметрыОстатков.Сотрудники = Сотрудники;
	ПараметрыОстатков.ЭтоРасчетПриУвольнении = Ложь;
	ПараметрыОстатков.ЗаработанныеПраваНаГодВперед = Истина;
	
	РезультатОстатки = ОстаткиОтпусковСотрудниковСУчетомБудущихПериодов(ПараметрыОстатков);
	
	Результат.ИнформацияОбИспользованииОтпуска = ИнформацияОбОтпусках(Сотрудники, РезультатОстатки.ТекущиеОстатки, Истина);
	Результат.ПрогнозируемыеНеиспользованныеДниОтпуска = ДанныеОстатковОтпусковБудущихПериодов(Сотрудники, РезультатОстатки.БудущиеПериоды, Истина);
	Результат.БудущиеПериоды = РезультатОстатки.БудущиеПериоды;
	Результат.ТекущиеОстаткиОтпусков = РезультатОстатки.ОстаткиВидовОтпусков;
	
	Возврат Результат;

КонецФункции

Функция ОстаткиОтпусковСотрудниковСУчетомБудущихПериодов(ПараметрыОстатков)
	
	ОписаниеПараметров = ОписаниеПараметровДляОстаткиОтпусков();
	ЗаполнитьЗначенияСвойств(ОписаниеПараметров, ПараметрыОстатков);
	
	Остатки = ОстаткиОтпусков(ОписаниеПараметров);
	ДопустимаяПродолжительность = ДопустимаяПродолжительностьОтпуска(Остатки, ПараметрыОстатков);
	КомпенсацияОтпуска = ДоступноеКоличествоДнейКомпенсацииОтпускаДляСервиса(Остатки, ПараметрыОстатков.ДатаОстатков);
	
	Остатки.Свернуть("Сотрудник, ВидОтпуска", "Дни");
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ПараметрыОстатков.ДатаОстатков);
	Запрос.УстановитьПараметр("Сотрудники", ОбщегоНазначения.ВыгрузитьКолонку(Остатки, "Сотрудник", Истина));
	
	СогласованныеЗаявления = СогласованныеБудущиеОтпускаСотрудников(ПараметрыОстатков.Сотрудники);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	               |	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
	               |	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска.СрезПоследних(&ДатаОстатков, Сотрудник В (&Сотрудники)) КАК ЗаработанныеПраваНаОтпуска";
	
	ЗаработанныеПраваНачальныеЗначения = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	               |	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
	               |	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	               |ГДЕ
	               |	ЗаработанныеПраваНаОтпуска.Период > &ДатаОстатков
	               |	И ЗаработанныеПраваНаОтпуска.Период <= ДОБАВИТЬКДАТЕ(&ДатаОстатков, ГОД, 1)
	               |	И ЗаработанныеПраваНаОтпуска.Сотрудник В(&Сотрудники)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаработанныеПраваНаОтпуска.Период";
	
	ЗаработанныеПраваНаОтпуска = Запрос.Выполнить().Выгрузить();
	ЗаработанныеПраваНаОтпуска.Индексы.Добавить("Сотрудник, ВидОтпуска");
	
	БудущиеПериоды = Новый ТаблицаЗначений;
	БудущиеПериоды.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	БудущиеПериоды.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	БудущиеПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеПериоды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	БудущиеПериоды.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	БудущиеПериоды.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	ТекущиеОстаткиСотрудников = БудущиеПериоды.СкопироватьКолонки();
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ПараметрыОстатков.Сотрудники, "Организация, ФизическоеЛицо", ПараметрыОстатков.ДатаОстатков);
	
	Для Каждого ДанныеОстатков Из Остатки Цикл
		
		ИспользованоДней = 0;
		ЗаявленияНаОтпуск = СогласованныеЗаявления.НайтиСтроки(Новый Структура("Сотрудник, ВидОтпуска", ДанныеОстатков.Сотрудник, ДанныеОстатков.ВидОтпуска));
		Для Каждого Заявление Из ЗаявленияНаОтпуск Цикл
			ИспользованоДней = ИспользованоДней + Заявление.КоличествоДней;
		КонецЦикла;
		
		ТекущиеОстаткиСотрудника = ТекущиеОстаткиСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеОстаткиСотрудника, ДанныеОстатков);
		
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ДанныеОстатков.Сотрудник));
		Если КадровыеДанныеСотрудника.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		КадровыеДанные = КадровыеДанныеСотрудника[0];
		ЗаполнитьЗначенияСвойств(ТекущиеОстаткиСотрудника, КадровыеДанные);
		
		ТекущиеОстаткиСотрудника.Период = ПараметрыОстатков.ДатаОстатков;
		ТекущиеОстаткиСотрудника.КоличествоДней = ДанныеОстатков.Дни - ИспользованоДней;
		
		ПредыдущееЗначение = 0;
		ПредыдущиеЗначенияСотрудника = ЗаработанныеПраваНачальныеЗначения.НайтиСтроки(Новый Структура("Сотрудник, ВидОтпуска", ДанныеОстатков.Сотрудник, ДанныеОстатков.ВидОтпуска));
		Если ПредыдущиеЗначенияСотрудника.Количество() > 0 Тогда 
			ПредыдущееЗначение = ПредыдущиеЗначенияСотрудника[0].КоличествоДней;
		КонецЕсли;
		
		НоваяСтрока = Неопределено;
		ЗаработаноДней = ТекущиеОстаткиСотрудника.КоличествоДней;
		ЗаработанныеПрава = ЗаработанныеПраваНаОтпуска.НайтиСтроки(Новый Структура("Сотрудник, ВидОтпуска", ДанныеОстатков.Сотрудник, ДанныеОстатков.ВидОтпуска));
		Для Каждого ПраваСотрудника Из ЗаработанныеПрава Цикл 
			Если НоваяСтрока = Неопределено Или НоваяСтрока.Период <> ПраваСотрудника.Период Тогда
				НоваяСтрока = БудущиеПериоды.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КадровыеДанные);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОстатков);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПраваСотрудника);
			ЗаработаноДней = ЗаработаноДней + ПраваСотрудника.КоличествоДней - ПредыдущееЗначение;
			НоваяСтрока.КоличествоДней = ЗаработаноДней;
			ПредыдущееЗначение = ПраваСотрудника.КоличествоДней;
		КонецЦикла;
		
	КонецЦикла;
	
	ТекущиеОстатки = ТекущиеОстаткиСотрудников.Скопировать();
	ТекущиеОстатки.Свернуть("Период, Организация, Сотрудник, ФизическоеЛицо", "КоличествоДней");
	ТекущиеОстатки.Колонки.Добавить("ДнейКомпенсации", Новый ОписаниеТипов("Число"));
	ТекущиеОстатки.Колонки.Добавить("ДопустимаяПродолжительностьОтпуска", Новый ОписаниеТипов("Число"));
	
	Для Каждого ДанныеСотрудника Из ТекущиеОстатки Цикл 
		ДанныеСотрудника.ДнейКомпенсации = КомпенсацияОтпуска[ДанныеСотрудника.Сотрудник];
		ДанныеСотрудника.ДопустимаяПродолжительностьОтпуска = ДопустимаяПродолжительность[ДанныеСотрудника.Сотрудник];
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, БудущиеПериоды, ОстаткиВидовОтпусков", ТекущиеОстатки, БудущиеПериоды, ТекущиеОстаткиСотрудников);
	
КонецФункции

Функция СогласованныеБудущиеОтпускаСотрудников(Сотрудники)
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТБудущиеОтпускаСотрудников(МенеджерВременныхТаблиц, Сотрудники, ДатаАктуальности);
	СоздатьВТСогласованныеЗаявкиНаОтпуск(МенеджерВременныхТаблиц, Сотрудники, ДатаАктуальности);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СогласованныеЗаявки.Сотрудник КАК Сотрудник,
		|	СогласованныеЗаявки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СогласованныеЗаявки.ВидОтпуска КАК ВидОтпуска,
		|	СогласованныеЗаявки.ДатаНачала КАК ДатаНачала,
		|	СогласованныеЗаявки.ДатаОкончания КАК ДатаОкончания,
		|	СогласованныеЗаявки.КоличествоДней КАК КоличествоДней
		|ИЗ
		|	ВТСогласованныеЗаявкиНаОтпуск КАК СогласованныеЗаявки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	БудущиеОтпуска.Сотрудник,
		|	БудущиеОтпуска.Сотрудник.ФизическоеЛицо,
		|	БудущиеОтпуска.ВидОтпуска,
		|	БудущиеОтпуска.ДатаНачала,
		|	БудущиеОтпуска.ДатаОкончания,
		|	БудущиеОтпуска.КоличествоДней
		|ИЗ
		|	ВТБудущиеОтпускаСотрудников КАК БудущиеОтпуска
		|ГДЕ
		|	НЕ БудущиеОтпуска.Компенсация";
	
	БудущиеОтпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат БудущиеОтпуска;
	
КонецФункции

// Формирует сведения об отпусках сотрудников для публикации в сервисе 1С:Кабинет сотрудника.
//
// 	Параметры
// 		Сотрудники - Массив
// 		ДатаАктуальности - Дата - дата, на которую получаются данные.
//
// 	Возвращаемое значение:
// 		Результат - Структура - содержит свойства
// 			* ИнформацияОбИспользованииОтпуска - ТаблицаЗначений - содержит колонки
// 					* ФизическоеЛицо
// 					* ОстатокОтпуска
// 					* ДнейКомпенсации
// 					* ДопустимаяПродолжительностьОтпуска
// 					* ДатаНачалаПредыдущегоОтпуска
// 					* ДатаОкончанияПредыдущегоОтпуска
// 					* КоличествоДнейПредыдущегоОтпуска
// 					* ДатаНачалаСледующегоОтпуска
// 					* ДатаОкончанияСледующегоОтпуска
// 					* КоличествоДнейСледующегоОтпуска
// 			* ПрогнозируемыеНеиспользованныеДниОтпуска - ТаблицаЗначений - содержит колонки
// 					* ФизическоеЛицо
// 					* Остатки - ТаблицаЗначений - содержит колонки
// 							* Период
// 							* КоличествоДней
// 			* БудущиеПериоды - ТаблицаЗначений- содержит колонки
// 					* Период
// 					* Организация
// 					* Сотрудник
// 					* ФизическоеЛицо
// 					* КоличествоДней
//
Функция СведенияОбОтпускахДляПубликацииВСервисе(ФизическиеЛица, ДатаАктуальности) Экспорт

	Результат = Новый Структура("
	|ИнформацияОбИспользованииОтпуска,
	|ПрогнозируемыеНеиспользованныеДниОтпуска,
	|БудущиеПериоды");
	
	Сотрудники = СотрудникиДляПубликацииОстатковОтпусков(ФизическиеЛица, ДатаАктуальности);
	Если Сотрудники.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОстатков = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыОстатков.ДатаОстатков = ДатаАктуальности;
	ПараметрыОстатков.Сотрудники = Сотрудники;
	ПараметрыОстатков.ЭтоРасчетПриУвольнении = Ложь;
	ПараметрыОстатков.ЗаработанныеПраваНаГодВперед = Истина;
	
	РезультатОстатки = ОстаткиОтпусковСУчетомБудущихПериодов(ПараметрыОстатков);
	
	Результат.ИнформацияОбИспользованииОтпуска = ИнформацияОбОтпусках(Сотрудники, РезультатОстатки.ТекущиеОстатки);
	Результат.ПрогнозируемыеНеиспользованныеДниОтпуска = ДанныеОстатковОтпусковБудущихПериодов(Сотрудники, РезультатОстатки.БудущиеПериоды);
	Результат.БудущиеПериоды = РезультатОстатки.БудущиеПериоды;
	
	Возврат Результат;

КонецФункции

Функция СотрудникиДляПубликацииОстатковОтпусков(ФизическиеЛица, ДатаАктуальности)

	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
	ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
	ПараметрыПолучения.КадровыеДанные 		= "ГоловнаяОрганизация";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Ложь, ПараметрыПолучения);
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТСотрудникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ГоловнаяОрганизация <> &УправленческаяОрганизация";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");

КонецФункции

#КонецОбласти

#КонецОбласти