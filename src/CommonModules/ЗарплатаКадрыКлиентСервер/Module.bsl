#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Взаимодействия

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхПредметов
Процедура ПриОпределенииВозможныхПредметов(ТипыПредметов) Экспорт
	ЗарплатаКадрыКлиентСерверВнутренний.ПриОпределенииВозможныхПредметов(ТипыПредметов);
КонецПроцедуры

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхКонтактов
Процедура ПриОпределенииВозможныхКонтактов(ТипыКонтактов) Экспорт
	ЗарплатаКадрыКлиентСерверВнутренний.ПриОпределенииВозможныхКонтактов(ТипыКонтактов)
КонецПроцедуры

// Конец СтандартныеПодсистемы.Взаимодействия

// РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами

// См.  ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОтправляемыйДокументПоФорме
Функция ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Ссылка") Тогда
		Возврат Форма.Объект.Ссылка;
	Иначе
		Возврат ПерсонифицированныйУчетКлиентСервер.ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма);
	КонецЕсли;
	
КонецФункции

// См.  ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОрганизациюОтправляемогоДокументаПоФорме
Функция ПолучитьСсылкуНаОрганизациюОтправляемогоДокументаПоФорме(Форма) Экспорт
	
	Возврат УчетСтраховыхВзносовКлиентСервер.СсылкаНаОрганизациюОтправляемогоДокумента(ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма), Форма)
	
КонецФункции

// Конец РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает минимальную версию данных БЗК, с которой возможно обновление.
//
// Возвращаемое значение:
//  Строка - минимальная версия данных, с которой возможно обновление.
Функция МинимальнаяВерсия() Экспорт
	Возврат "3.1.5.380"
КонецФункции

Функция ДатаОтсчетаПериодическихСведений() Экспорт
	
	Возврат '18991231000000';
	
КонецФункции

Функция ДатаОтсчетаПериодическихСведенийСПериодомМесяц() Экспорт
	
	Возврат КонецМесяца(ДатаОтсчетаПериодическихСведений()) + 1;
	
КонецФункции

// Функция определяет количество дней в месяце.
//
// Параметры:
//	Дата - любая дата месяца
//
// Возвращаемое значение
//	- число, количество дней в месяце.
//
Функция КоличествоДнейМесяца(Дата) Экспорт
	Возврат День(КонецМесяца(Дата));
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для гражданства.
//
// Параметры:
//	ИнформацияОГражданстве - объект, имеющий свойства.
//		Страна
//		
Функция ГражданствоПоУмолчанию(ИнформацияОГражданстве) Экспорт
	
	Возврат ИнформацияОГражданстве.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию статуса застрахованного физического лица.
//
// Параметры:
//	СтатусЗастрахованногоЛица - объект, имеющий свойство 
//		ВидЗастрахованногоЛица.
//		
Функция СтатусыЗастрахованныхФизическихЛицПоУмолчанию(СтатусЗастрахованногоЛица) Экспорт
	
	Возврат СтатусЗастрахованногоЛица.ВидЗастрахованногоЛица = ПредопределенноеЗначение("Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ");
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для сведений об инвалидности
// т.е. сотрудник не является инвалидом.
//
// Параметры:
//	СведенияОбИнвалидности - объект, имеющий свойства.
//		Инвалидность
//		СрокДействияСправки
//		
Функция СведенияОбИнвалидностиПоУмолчанию(СведенияОбИнвалидности) Экспорт
	Возврат (НЕ СведенияОбИнвалидности.Инвалидность)
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.СрокДействияСправки))
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для удостоверения личности.
//
// Параметры:
//	ИнформацияОбУдостоверенииЛичности - объект, имеющий свойства 
//		ВидДокумента.
//		Серия
//		Номер
//		ДатаВыдачи
//		КемВыдан
//		КодПодразделения
//		
Функция УдостоверениеЛичностиПоУмолчанию(ИнформацияОбУдостоверенииЛичности) Экспорт
	
	Возврат (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ВидДокумента))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Серия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Номер))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.СрокДействия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КемВыдан))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КодПодразделения));
		
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для бухучета сотрудника.
//
// Параметры:
//	БухучетЗарплатыСотрудников - объект, имеющий свойства 
//		СпособОтраженияЗарплатыВБухучете
//		ОтношениеКЕНВД.
//		
Функция СведенияОБухучетеСотрудникаПоУмолчанию(БухучетЗарплатыСотрудников) Экспорт
	Возврат (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете))
		И (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.ОтношениеКЕНВД))
		И (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.СтатьяФинансирования));
КонецФункции

// Возвращает длительность суток в секундах
//
// Возвращаемое значение:
//		Число
//
Функция ДлительностьСутокВСекундах() Экспорт
	
	Возврат 24 * 60 * 60;
	
КонецФункции

// Возвращает длительность периода в днях, включая дни дат начала и окончания
//
// Параметры:
//		ДатаНачала		- Дата
//		ДатаОкончания	- Дата
//
// Возвращаемое значение:
//		Число
//
Функция ДнейВПериоде(Знач ДатаНачала, Знач ДатаОкончания, Знач ПроверятьКорректностьПериода = Ложь) Экспорт
	
	Если ПроверятьКорректностьПериода Тогда
		Возврат ?(НачалоДня(ДатаНачала) > НачалоДня(ДатаОкончания), 0, (КонецДня(ДатаОкончания) + 1 - НачалоДня(ДатаНачала)) / ДлительностьСутокВСекундах());
	КонецЕсли;
	
	Возврат (КонецДня(ДатаОкончания) + 1 - НачалоДня(ДатаНачала)) / ДлительностьСутокВСекундах();
	
КонецФункции

// Возвращает дату, увеличенную на заданное количество дней
//
// Параметры:
//		ДатаСобытия		- Дата
//		КоличествоДней	- Число
//
// Возвращаемое значение:
//		Дата
//
Функция ДобавитьДней(Знач ДатаСобытия, Знач КоличествоДней) Экспорт
	
	Возврат ДатаСобытия + (КоличествоДней - 1) * ДлительностьСутокВСекундах();
	
КонецФункции

// Формирует строку представления интервала времени между двумя датами.
//
Функция ПредставлениеВременногоИнтервала(Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	Представление = "";
	
	ДатаНачала = НачалоДня(ДатаНачала);
	ДатаОкончания = НачалоДня(ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Представление;
	КонецЕсли;
	
	Если ДатаНачала > ДатаОкончания Тогда
		ВремДата = ДатаНачала;
		ДатаНачала = ДатаОкончания;
		ДатаОкончания = ВремДата;
	КонецЕсли;
	
	Лет = Год(ДатаОкончания) - Год(ДатаНачала);
	Если Лет > 0 Тогда
		Если ДобавитьМесяц(ДатаНачала, Лет * 12) > ДатаОкончания Тогда
			Лет = Лет - 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Лет > 0 Тогда
		ДополнитьПредставление(Представление, ПредставлениеЛет(Лет));
	КонецЕсли;
	
	ДатаНачала = ДобавитьМесяц(ДатаНачала, Лет * 12);
	
	Месяцев = 0;
	Пока ДобавитьМесяц(ДатаНачала, Месяцев + 1) <= ДатаОкончания Цикл
		Месяцев = Месяцев + 1;
	КонецЦикла;
	ДатаНачала = ДобавитьМесяц(ДатаНачала, Месяцев);
	
	Если Месяцев > 0 Тогда
		ДополнитьПредставление(Представление, ПредставлениеМесяцев(Месяцев));
	КонецЕсли;
	
	Дней = ДнейВПериоде(ДатаНачала, ДатаОкончания) - 1;
	Если Дней > 0 Или (Лет = 0 И Месяцев = 0) Тогда
		ДополнитьПредставление(Представление, ПредставлениеДней(Дней));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Формирует строку представления времени по периодичности.
//
// Параметры:
//  Значение		 - Число - числовое значение.
//  Периодичность	 - ПеречислениеСсылка.Периодичность - периодичность.
// 
// Возвращаемое значение:
//  Строка - представление по периодичности.
//
Функция ПредставлениеПоПериодичности(Значение, Периодичность) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Возврат ПредставлениеДней(Значение);
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Возврат ПредставлениеНедель(Значение);
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Возврат ПредставлениеДекад(Значение);
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Возврат ПредставлениеМесяцев(Значение);
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Возврат ПредставлениеКварталов(Значение);
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Возврат ПредставлениеПолугодий(Значение);
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Возврат ПредставлениеЛет(Значение);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Заполняет реквизит представлением месяца, хранящегося в другом реквизите.
//
// Параметры:
//		РедактируемыйОбъект
//		ПутьРеквизита - Строка, путь к реквизиту, содержащего дату.
//		ПутьРеквизитаПредставления - Строка, путь к реквизиту в который помещается представление месяца.
//
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

// Заполняет реквизиты представления месяцев, хранящихся в других реквизитах.
//
// Параметры:
//		ДанныеТабличнойЧасти - коллекция строк табличной части.
//		ПутьРеквизита - Строка, путь к реквизиту, содержащего дату.
//		ПутьРеквизитаПредставления - Строка, путь к реквизиту в который помещается представление месяца.
//
Процедура ЗаполнитьМесяцПоДатеВТабличнойЧасти(ДанныеТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	Для Каждого СтрокаТабличнойЧасти Из ДанныеТабличнойЧасти Цикл
		ЗаполнитьМесяцПоДате(СтрокаТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления);
	КонецЦикла;
КонецПроцедуры

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

// Возвращает представление квартала по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеКвартала(ДатаНачалаМесяца) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачалаМесяца) Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат ПредставлениеПериода(ДатаНачалаМесяца, КонецКвартала(ДатаНачалаМесяца), "ФП = Истина");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Проверка заполнения свойств.

// Проверяет заполнение реквизитов переданного объекта по заданным правилам.
// Формирует и выводит сообщение у поля управляемой формы, связанного с реквизитом объекта.
// 
// Параметры:
//	ПроверяемыйОбъект    - Произвольный - любой объект с доступом к полям по имени.
//	ПроверяемыеСвойства  - Структура - свойства, заполнение которых нужно проверить.
//                        * Ключ - Строка - имя проверяемого свойства, 
//						  * Значение - Строка - сообщение об ошибке, если свойство не заполнено
//	Сообщатель           - ОбщийМодуль - Модуль, выводящий сообщение.
//                                       Если не указан, сообщения выводиться не будут.
//                                       Модуль должен содержать процедуру СообщитьПользователю. 
//                                       (См. ОбщегоНазначения.СообщитьПользователю).
//                                       
// Возвращаемое значение:
//	Булево - Истина, если все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваЗаполнены(ПроверяемыйОбъект, ПроверяемыеСвойства, Сообщатель = Неопределено) Экспорт
	
	НезаполненныеСвойства = Новый Массив;
	
	Для Каждого ПроверяемоеСвойство Из ПроверяемыеСвойства Цикл
		Если НЕ ЗначениеЗаполнено(ПроверяемыйОбъект[ПроверяемоеСвойство.Ключ]) Тогда
			НезаполненныеСвойства.Добавить(ПроверяемоеСвойство);
		КонецЕсли;
	КонецЦикла;
	
	Если Сообщатель <> Неопределено Тогда
		Для Каждого НезаполненноеСвойство Из НезаполненныеСвойства Цикл 
			Сообщатель.СообщитьПользователю(
				НезаполненноеСвойство.Значение, 
				ПроверяемыйОбъект, 
				НезаполненноеСвойство.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Возврат НезаполненныеСвойства.Количество() = 0;
	
КонецФункции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам.
// Формирует и выводит сообщение у поля управляемой формы, связанного с реквизитом объекта.
// 
// Параметры:
//	ПроверяемаяФорма     - ФормаКлиентскогоПриложения - форма, заполнение реквизитов которой проверяется.
//	ПроверяемыеСвойства	 - СписокЗначений   - свойства, заполнение которых нужно проверить:
//  	* Значение      - Строка - путь к данным формы, 
//		* Представление - Строка - сообщение об ошибке, если свойство не заполнено.
//	Сообщатель           - ОбщийМодуль - Модуль, выводящий сообщение.
//                                       Если не указан, сообщения выводиться не будут.
//                                       Модуль должен содержать процедуру СообщитьПользователю. 
//                                       (См. ОбщегоНазначения.СообщитьПользователю).
//
// Возвращаемое значение:
//	Булево - Истина, если все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваФормыЗаполнены(ПроверяемаяФорма, ПроверяемыеСвойства, Сообщатель = Неопределено) Экспорт
	
	НезаполненныеСвойства = Новый Массив;
	
	Для Каждого ПроверяемоеСвойство Из ПроверяемыеСвойства Цикл
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ПроверяемаяФорма, ПроверяемоеСвойство.Значение);
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			НезаполненныеСвойства.Добавить(ПроверяемоеСвойство);
		КонецЕсли;
	КонецЦикла;
	
	Если Сообщатель <> Неопределено Тогда
		Для Каждого НезаполненноеСвойство Из НезаполненныеСвойства Цикл 
			Сообщатель.СообщитьПользователю(
				НезаполненноеСвойство.Представление, , 
				НезаполненноеСвойство.Значение);
		КонецЦикла
	КонецЕсли;
	
	Возврат НезаполненныеСвойства.Количество() = 0;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Математические функции

// Округляет число до заданной точности по указанному правилу.
//
// Параметры:
//  Число    - Число - число, которое необходимо округлить.
//  Точность - Число - "базис", до которого нужно округлить заданное число.
//  Правило  - ПеречислениеСсылка.ПравилаОкругленияПриРасчетеЗарплаты.
//
// Возвращаемое значение:
//   Число - округленное до заданной точности значение.
//
Функция Округлить(Число, Точность = 0, Правило = Неопределено) Экспорт
	
	// Если надо округлить 0 или точность не задана, то возвращаем заданное число.
	Если Не ЗначениеЗаполнено(Число) 
		Или Точность <= 0 Тогда
		Возврат Число
	КонецЕсли;
	
	Множитель  		= Число / Точность;
	ЦелыйМножитель 	= Цел(Множитель);
	
	Если Множитель = ЦелыйМножитель Тогда
		Результат = Число;
	Иначе
		Результат = Точность * Окр(Множитель);
		
		Если Правило = ПредопределенноеЗначение("Перечисление.ПравилаОкругленияПриРасчетеЗарплаты.ВБольшуюСторону") Тогда
			Результат = Точность * (ЦелыйМножитель + 1);
		ИначеЕсли Правило = ПредопределенноеЗначение("Перечисление.ПравилаОкругленияПриРасчетеЗарплаты.ВМеньшуюСторону") Тогда
			Результат = Точность * ЦелыйМножитель;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  Коэффициенты - Массив - коэффициенты распределения;
//  Точность - Число - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Коэффициенты, Знач Точность = 2) Экспорт
	
	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом.
	Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
		Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + РаспределяемаяСумма - РаспределеннаяСумма;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расшифровка рег.отчетности

// По переданному имени показателя регламентированного отчета определяет
// раздел отчета, которому принадлежит показатель.
// 
// Параметры:
//	ИмяПоказателя - Строка
//								
//	Возвращаемое значение:
//		Строка описания (из 2 символов) раздела отчета или Неопределено,  
//		если переданное ИмяПоказателя не имеет ожидаемой структуры.	
//			
Функция РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 5, 2)
	
КонецФункции

// По переданному имени показателя регламентированного отчета определяет
// номер строки таблицы отчета, в которой расположен показатель.
// 
// Параметры:
//	ИмяПоказателя - Строка
//								
//	Возвращаемое значение:
//		Строка описания (номер из 3 символов) строки таблицы отчета или 
//		Неопределено, если переданное ИмяПоказателя не имеет ожидаемой структуры.	
//			
Функция СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 9, 3)
	
КонецФункции

// По переданному имени показателя регламентированного отчета определяет
// номер колонки таблицы отчета, в которой расположен показатель.
// 
// Параметры:
//	ИмяПоказателя - Строка
//								
//	Возвращаемое значение:
//		Строка описания (номер из 2 символов) колонки таблицы отчета или  
//		Неопределено, если переданное ИмяПоказателя не имеет ожидаемой структуры.	
//			
Функция КолонкаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 12, 2)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет итогов в документах

// Возвращает структуру, описывающую реквизит по которому рассчитывается итог табличной части.
//
// Параметры:
//		ИмяРеквизита
//		Пояснение - Строка, используется при формировании расшифровки составляющей итоговой суммы.
//
// Возвращаемое значение:
//		Структура
//			* ИмяРеквизита
//			* Пояснение
//
Функция ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита(ИмяРеквизита, Пояснение) Экспорт
	
	Возврат Новый Структура("ИмяРеквизита,Пояснение", ИмяРеквизита, Пояснение);
	
КонецФункции

// Возвращает структуру, описывающую табличную часть для расчета итогов.
//
// Параметры:
//		ПутьКДанным
//		ОписанияРеквизитов - Массив описаний реквизитов, см.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита.
//
// Возвращаемое значение:
//		Структура
//			* ПутьКДанным
//			* ОписанияРеквизитов
//
Функция ИтогиТабличныхЧастейОписаниеТабличнойЧасти(ПутьКДанным, ОписанияРеквизитов) Экспорт
	
	Возврат Новый Структура("ПутьКДанным,ОписанияРеквизитов", ПутьКДанным, ОписанияРеквизитов);
	
КонецФункции

// Заполняет значение реквизита, содержащего итоговую сумму по табличным частям формы. Устанавливает
// подсказку с расшифровкой полученного итога.
//
// Параметры:
//		Форма
//		ИмяРеквизитаИтог
//		КоллекцияИтогов - Массив описаний табличных частей по которым рассчитывается итог
//						см.ИтогиТабличныхЧастейОписаниеТабличнойЧасти.
//
Процедура ИтогиТабличныхЧастейРассчитатьИтог(Форма, ИмяРеквизитаИтог, КоллекцияИтогов) Экспорт
	
	Итог = 0;
	ТекстПодсказки = "";
	
	СписокПодсказок = Новый СписокЗначений;
	МаксимальнаяДлиннаПояснения = 0;
	МаксимальнаяДлиннаПредставлениеИтога = 0;
	
	Для каждого ОписаниеИтоговТабличнойЧасти Из КоллекцияИтогов Цикл
		
		ДанныеТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеИтоговТабличнойЧасти.ПутьКДанным);;
		Для каждого ОписаниеКолонки Из ОписаниеИтоговТабличнойЧасти.ОписанияРеквизитов Цикл
			
			ИтогПоКолонке = ДанныеТабличнойЧасти.Итог(ОписаниеКолонки.ИмяРеквизита);
			Если ИтогПоКолонке <> 0 Тогда
				
				Итог = Итог + ИтогПоКолонке;
				
				ПредставлениеИтогаПоКолонке = Формат(ИтогПоКолонке, "ЧЦ=15; ЧДЦ=2");
				
				ОписаниеПодсказки = Новый Структура;
				ОписаниеПодсказки.Вставить("ПредставлениеИтога", ПредставлениеИтогаПоКолонке);
				
				ДлинаПояснения = СтрДлина(ОписаниеКолонки.Пояснение);
				ДлинаПредставленияИтога = СтрДлина(ПредставлениеИтогаПоКолонке);
				
				ОписаниеПодсказки.Вставить("ОбщаяДлина",  ДлинаПояснения + ДлинаПредставленияИтога);
				
				МаксимальнаяДлиннаПояснения = Макс(МаксимальнаяДлиннаПояснения, ДлинаПояснения);
				МаксимальнаяДлиннаПредставлениеИтога = Макс(МаксимальнаяДлиннаПредставлениеИтога, ДлинаПредставленияИтога);
				
				СписокПодсказок.Добавить(ОписаниеПодсказки, ОписаниеКолонки.Пояснение);
					
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	СписокПодсказок.СортироватьПоПредставлению();
	
	МаксимальнаяОбщаяДлинаПредставления = МаксимальнаяДлиннаПояснения + МаксимальнаяДлиннаПредставлениеИтога;
	ШаблонПробелов = "                               ";
	Для каждого ОписаниеПодсказки Из СписокПодсказок Цикл
		
		ТекстПодсказки = ?(ПустаяСтрока(ТекстПодсказки), "", ТекстПодсказки + Символы.ПС)
			+ ОписаниеПодсказки.Представление + ": "
			+ Лев(ШаблонПробелов, (МаксимальнаяОбщаяДлинаПредставления - ОписаниеПодсказки.Значение.ОбщаяДлина))
			+ ОписаниеПодсказки.Значение.ПредставлениеИтога;
			
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ИмяРеквизитаИтог, Итог);
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяРеквизитаИтог, ТекстПодсказки);
		
КонецПроцедуры

Процедура УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяЭлемента, ТекстПодсказки) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм КлючевыеРеквизитыЗаполненияФормы
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
//

// Процедура определяет нужно ли отображать предупреждение при редактировании для ключевых реквизитов формы.
Процедура КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображатьПредупреждение = Неопределено, МассивОписанийРеквизитов = Неопределено, МассивИменТаблиц = Неопределено) Экспорт
	
	Если ОтображатьПредупреждение = Неопределено Тогда
		Если МассивИменТаблиц = Неопределено Тогда 
			МассивИменТаблиц = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
		КонецЕсли;	
		ОтображатьПредупреждение = КлючевыеРеквизитыЗаполненияФормыОтображатьПредупреждениеПриРедактировании(Форма, МассивИменТаблиц);
	КонецЕсли;
	
	Если МассивОписанийРеквизитов = Неопределено Тогда 
		МассивОписанийРеквизитов = Форма.КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов();
	КонецЕсли;	
	Для каждого Описание Из МассивОписанийРеквизитов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Описание.ЭлементФормы,
			"ОтображениеПредупрежденияПриРедактировании",
			ОтображатьПредупреждение);
	КонецЦикла;
КонецПроцедуры

// Функция определяет есть ли данные в таблицах документа, подключенных к механизму.
Функция КлючевыеРеквизитыЗаполненияФормыОтображатьПредупреждениеПриРедактировании(Форма, МассивИменТаблиц)
	ОтображатьПредупреждениеПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицы);
		Если Таблица.Количество() > 0 Тогда
			ОтображатьПредупреждениеПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ОтображатьПредупреждениеПриРедактировании;
КонецФункции

#КонецОбласти

// Переносит отборы, переданные в параметрах открытия формы динамического списка
// в пользовательские настройки.
//
// Параметры:
//		ДинамическийСписок	- ДинамическийСписок, реквизит формы.
//		Параметры			- Структура, параметры формы динамического списка.
//
Процедура НастроитьОтборыПараметровФормыСписка(ДинамическийСписок, Параметры) Экспорт
	
	Для каждого ОписаниеОтбора Из Параметры.Отбор Цикл
		
		// Проверка существования поля отбора.
		Если ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(
				Новый ПолеКомпоновкиДанных(ОписаниеОтбора.Ключ)) = Неопределено Тогда
				
			Продолжить;
			
		КонецЕсли; 
		
		Представление = Неопределено;
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		
		// Определение представления и режима отображения существующего элемента отбора.
		ЭлементыОтбораДинамическогоСписка = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор, ОписаниеОтбора.Ключ);
			
		Если ЭлементыОтбораДинамическогоСписка.Количество() > 0 Тогда
			Представление = ЭлементыОтбораДинамическогоСписка[0].Представление;
			РежимОтображения = ЭлементыОтбораДинамическогоСписка[0].РежимОтображения;
		КонецЕсли; 
		
		// Определение параметров отбора, содержащих коллекции значений.
		ЗначениеОтбора = ОписаниеОтбора.Значение;
		ТипЗначения = ТипЗнч(ЗначениеОтбора);
		Если ТипЗначения = Тип("Массив")
			ИЛИ ТипЗначения = Тип("ФиксированныйМассив")
			ИЛИ ТипЗначения = Тип("СписокЗначений") Тогда
			
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.ВСписке;
			
			Если ТипЗначения = Тип("Массив")
				ИЛИ ТипЗначения = Тип("ФиксированныйМассив") Тогда
				
				СписокЗначенийОтбора = Новый СписокЗначений;
				Если ТипЗначения = Тип("Массив") Тогда
					СписокЗначенийОтбора.ЗагрузитьЗначения(ЗначениеОтбора);
				Иначе
					СписокЗначенийОтбора.ЗагрузитьЗначения(Новый Массив(ЗначениеОтбора));
				КонецЕсли;
				
				ЗначениеОтбора = СписокЗначенийОтбора;
				
			КонецЕсли;
			
		Иначе
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		// Установка параметра отбора
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор,
			ОписаниеОтбора.Ключ,
			ЗначениеОтбора,
			ВидСравненияЗначения,
			Представление,
			Истина,
			РежимОтображения);
			
		// Удаление, настроенного параметра отбора.
		Параметры.Отбор.Удалить(ОписаниеОтбора.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

#Область УправлениеОтборамиВФормахСДинамическимСписком

// Обновляется надпись не доступных отборов пользователю
//
// Параметры:
//		Форма - Форма с динамическим списком
//		ИсключаемыеИменаОтборов - Строка - Имена отборов, исключаемых из надписи, разделенные запятой.
//
Процедура ОбновитьНадписьФиксированногоОтбора(Форма) Экспорт
	
	СписокНастройкиОтбораНадпись = "";
	
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	
	ПользовательскийОтборДоступен = Ложь;
	Для каждого НастройкаКомпоновщика Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ПользовательскийОтборДоступен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИменаИсключаемыхОтборов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Форма.ИсключаемыеИменаОтборов, " ",""), ",");
	КоллекцияОтборов = ФиксированныйОтборДинамическогоСписка(Форма, Список);
	Для каждого СоответствиеЭлементаОтбора Из КоллекцияОтборов Цикл
		ЭлементОтбора = СоответствиеЭлементаОтбора.Значение;
		Если Не Форма.ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			// Не выводим отбор по организации при однофирменном учете
			Продолжить;
		КонецЕсли;
		Если ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПользовательскийОтборДоступен Или ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			ДополнитьНадписьНастроекОтбораДинамическогоСписка(
				ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора),
				СписокНастройкиОтбораНадпись, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	Форма.СписокНастройкиОтбораНадпись = СписокНастройкиОтбораНадпись;
	
	// Если нет скрытых отборов, то и элементы не нужно выводить на форму
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СписокНастройкиОтбораНадпись", "Видимость", Не ПустаяСтрока(СписокНастройкиОтбораНадпись));
	
КонецПроцедуры

// Возвращает не доступные пользователю отборы
//
// Параметры:
//		Форма - Форма с динамическим списком
//		Список - Реквизит формы "Динамический список".
//
// Возвращаемое значение:
//		КоллекцияОтборов - Соответствие
//				Ключ - Поле компоновки данных
//				Значение - Элемент отбора компоновки данных или структура, соответствующая свойствам элементу отбора компоновки данных.
//
Функция ФиксированныйОтборДинамическогоСписка(Форма, Список) Экспорт
	
	КоллекцияОтборов = Новый Соответствие;
	
	ИменаИсключаемыхОтборов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Форма.ИсключаемыеИменаОтборов, " ",""), ",");
	
	// Все, что находится в Параметры.Отбор потом перенесется в ФиксированныеНастройки, поэтому все отборы недоступны пользователю.
	Если Форма.Параметры.Свойство("Отбор") Тогда
		Для Каждого ЭлементОтбора Из Форма.Параметры.Отбор Цикл
			СтруктураЗначенияОтбора = Новый Структура;
			СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ));
			СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			СтруктураЗначенияОтбора.Вставить("Использование", Истина);
			СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", ЭлементОтбора.Значение);
			СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			СтруктураЗначенияОтбора.Вставить("Представление", ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора.Ключ));
			КоллекцияОтборов.Вставить(Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ), СтруктураЗначенияОтбора);
		КонецЦикла;
	КонецЕсли;
	
	// Фиксированные настройки все недоступны пользователю
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование
			Или ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
				И ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.Представление);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", Истина);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				СтруктураЗначенияОтбора.Вставить("Представление", "");
				СтруктураЗначенияОтбора.Вставить("ЭтоГруппа", Истина);
				КоллекцияОтборов.Вставить(ЭлементОтбора.Представление, СтруктураЗначенияОтбора);
			Иначе
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.ЛевоеЗначение);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ЭлементОтбора.ВидСравнения);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", ЭлементОтбора.ПравоеЗначение);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				СтруктураЗначенияОтбора.Вставить("Представление", ЭлементОтбора.Представление);
				КоллекцияОтборов.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЗначенияОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Настройки отбора, указанные для списка, могут быть доступные пользователю
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование
			Или Не ПустаяСтрока(ЭлементОтбора.ИдентификаторПользовательскойНастройки)
			Или ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
				И ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.Представление);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", Истина);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", ЭлементОтбора.РежимОтображения);
				СтруктураЗначенияОтбора.Вставить("Представление", "");
				СтруктураЗначенияОтбора.Вставить("ЭтоГруппа", Истина);
				КоллекцияОтборов.Вставить(ЭлементОтбора.Представление, СтруктураЗначенияОтбора);
			Иначе
				КоллекцияОтборов.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоллекцияОтборов;
	
КонецФункции

// Возвращает пользовательское представление идентификатора
//
// Параметры:
//		ИмяБезПробелов - Идентификатор, по которому требуется получить представление.
//
// Возвращаемое значение:
//		ПредставлениеЭлементаОтбора - Строка - Пользовательское представление идентификатора.
//
Функция ПредставлениеИмениБезПробелов(ИмяБезПробелов) Экспорт
	
	ПредставлениеЭлементаОтбора = "";
	БылВРег = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИмяБезПробелов) Цикл
		Символ = Сред(ИмяБезПробелов, НомерСимвола, 1);
		СледующийСимволВРег = Ложь;
		Если НомерСимвола + 1 <= СтрДлина(ИмяБезПробелов) Тогда
			СледующийСимвол = Сред(ИмяБезПробелов, НомерСимвола + 1, 1);
			СледующийСимволВРег = СледующийСимвол = ВРег(СледующийСимвол);
		КонецЕсли;
		ЭтоВРег = Символ = ВРег(Символ);
		Если Не БылВРег И ЭтоВРег И Не НомерСимвола = 1 Тогда
			Если СледующийСимволВРег Тогда
				Символ = " " + ВРег(Символ);
			Иначе
				Символ = " " + НРег(Символ);
			КонецЕсли;
		КонецЕсли;
		БылВРег = ЭтоВРег;
		ПредставлениеЭлементаОтбора = ПредставлениеЭлементаОтбора + Символ;
	КонецЦикла;
	
	Возврат ПредставлениеЭлементаОтбора;
	
КонецФункции

Процедура ДополнитьНадписьНастроекОтбораДинамическогоСписка(НаименованиеЭлементаОтбора, СписокНастройкиОтбораНадпись, ЭлементОтбора)
	
	Если Не ЭлементОтбора.Использование Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЭлементаОтбора = НаименованиеЭлементаОтбора;
	
	ПравоеЗначениеОтбора = ЭлементОтбора.ПравоеЗначение;
	Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("Дата") Тогда
		ПравоеЗначениеОтбора = Формат(ПравоеЗначениеОтбора, "ДЛФ=DD");
	КонецЕсли;
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Структура") И ЭлементОтбора.Свойство("ЭтоГруппа") И ЭлементОтбора.ЭтоГруппа = Истина Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1';
											|en = '%1'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("ФиксированныйМассив") Или ТипЗнч(ПравоеЗначениеОтбора) = Тип("Массив") Тогда
			Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
				ТекстЭлементаОтбора = СтрШаблон(
					НСтр("ru = '%1 в списке:%2';
						|en = '%1 is in the list:%2'"),
					ТекстЭлементаОтбора,
					?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям';
																	|en = 'selected by several values'"), ПравоеЗначениеОтбора[0]));
			КонецЕсли;
		Иначе
			ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1: %2';
												|en = '%1: %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 > %2';
											|en = '%1 > %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 >= %2';
											|en = '%1 >= %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 в иерархии %2';
											|en = '%1 is in hierarchy %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 в списке:%2';
					|en = '%1 is in the list:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям';
																|en = 'selected by several values'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 в списке по иерархии:%2';
					|en = '%1 is in the list by hierarchy:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям';
																|en = 'selected by several values'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 заполнено';
											|en = '%1 is filled in'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 < %2';
											|en = '%1 < %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 <= %2';
											|en = '%1 <= %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 начинается с %2';
											|en = '%1 starts with %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не в иерархии %2';
											|en = '%1 is not in hierarchy %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 не в списке:%2';
					|en = '%1 is not in the list:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям';
																|en = 'selected by several values'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 не в списке по иерархии:%2';
					|en = '%1 is not in the list by hierarchy:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям';
																|en = 'selected by several values'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не заполнено';
											|en = '%1 is not filled in'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не начинается с %2';
											|en = '%1 does not start with %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не содержит %2';
											|en = '%1 does not have %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 <> %2';
											|en = '%1 <> %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не содержит %2';
											|en = '%1 does not have %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 содержит %2';
											|en = '%1 contains %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 содержит %2';
											|en = '%1 contains %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстРазделителя = ?(ПустаяСтрока(СписокНастройкиОтбораНадпись), "", "; ");
	СписокНастройкиОтбораНадпись = СтрШаблон(НСтр("ru = '%1%2%3';
													|en = '%1%2%3'"), СписокНастройкиОтбораНадпись, ТекстРазделителя, ТекстЭлементаОтбора);
	
КонецПроцедуры

Функция ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора)
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Строка") Тогда
		НаименованиеОтбора = ЭлементОтбора;
	Иначе
		ПредставлениеЭлементаОтбора = ЭлементОтбора.Представление;
		Если Не ПустаяСтрока(ПредставлениеЭлементаОтбора) Тогда
			Возврат ПредставлениеЭлементаОтбора;
		КонецЕсли;
		
		ЛевоеЗначениеОтбора = ЭлементОтбора.ЛевоеЗначение;
		
		НаименованиеОтбора = Строка(ЛевоеЗначениеОтбора);
	КонецЕсли;
		
	Если НаименованиеОтбора = "Тип" Тогда
		Возврат НСтр("ru = 'Тип документа';
					|en = 'Document type'");
	КонецЕсли;
	
	ПутьКДаннымЭлементаФормы = Форма.НаименованиеРеквизитаФормыДинамическийСписок + "." + НаименованиеОтбора;
	ЭлементСписка = Форма.СинонимыЭлементовОтбора.НайтиПоЗначению(ПутьКДаннымЭлементаФормы);
	Если ЭлементСписка <> Неопределено И Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	ЭлементСписка = Форма.СинонимыЭлементовОтбора.НайтиПоЗначению(НаименованиеОтбора);
	Если ЭлементСписка <> Неопределено И Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	Возврат ПредставлениеИмениБезПробелов(НаименованиеОтбора);
	
КонецФункции

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  КомпоновщикНастроек - Компоновщик настроек динамического списка.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
Функция НайтиЭлементыИГруппыОтбора(Знач КомпоновщикНастроек,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(КомпоновщикНастроек.Настройки.Отбор.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	НайтиРекурсивно(КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	Для каждого НастройкаКомпоновщика Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			НайтиРекурсивно(НастройкаКомпоновщика.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеИстории

Процедура УстановитьРежимТолькоПросмотрВФормеРедактированияИстории(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"НаборЗаписей",
		"ТолькоПросмотр",
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ФормаКомандаОК",
		"Доступность",
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ФормаКомандаОтмена",
		"КнопкаПоУмолчанию",
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеВремени

// Возвращает представление количества дней.
Функция ПредставлениеДней(Дней) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 день;;%1 дня;%1 дней;';
																			|en = ';%1 day;;%1 days;%1 days;'"), Дней); 
КонецФункции

// Возвращает представление количества недель.
Функция ПредставлениеНедель(Недель) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 неделя;;%1 недели;%1 недель;';
																			|en = ';%1 week;;%1 weeks;%1 weeks;'"), Недель); 
КонецФункции

// Возвращает представление количества декад.
Функция ПредставлениеДекад(Декад) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 декада;;%1 декады;%1 декад;';
																			|en = ';%1 ten-day period;;%1 ten-day periods;%1 ten-day periods;'"), Декад); 
КонецФункции

// Возвращает представление количества месяцев.
Функция ПредставлениеМесяцев(Месяцев) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 месяц;;%1 месяца;%1 месяцев;';
																			|en = ';%1 month;;%1 month;%1 months;'"), Месяцев); 
КонецФункции

// Возвращает представление количества кварталов.
Функция ПредставлениеКварталов(Кварталов) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 квартал;;%1 квартала;%1 кварталов;';
																			|en = ';%1 quarter;;%1 quarter;%1 quarters;'"), Кварталов); 
КонецФункции

// Возвращает представление количества полугодий.
Функция ПредставлениеПолугодий(Полугодий) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 полугодие;;%1 полугодия;%1 полугодий;';
																			|en = ';%1 half-year;;%1 half-year;%1 half-years;'"), Полугодий); 
КонецФункции

// Возвращает представление количества лет.
Функция ПредставлениеЛет(Лет) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 год;;%1 года;%1 лет;';
																			|en = ';%1 year;;%1 years;%1 years;'"), Лет); 
КонецФункции

// Возвращает представление возраста - "%1 год/года/лет %2 месяц/месяца/месяцев".
Функция ПредставлениеВозраста(ВозрастЛет, ВозрастМесяцев) Экспорт
	Если ВозрастЛет = 0 Тогда
		Представление = "";
	Иначе
		Представление = ПредставлениеЛет(ВозрастЛет);
	КонецЕсли;
	Если ВозрастМесяцев <> 0 Тогда
		Если Представление = "" Тогда
			Представление = ПредставлениеМесяцев(ВозрастМесяцев);
		Иначе
			Представление = Представление + " " + ПредставлениеМесяцев(ВозрастМесяцев);
		КонецЕсли;
	КонецЕсли;
	Возврат Представление;
КонецФункции

#КонецОбласти

Процедура УстановитьОтображениеНомеровДокумента(УправляемаяФорма, ИмяЭлемента = "НомерПервичногоДокумента") Экспорт
	
	Если ЗначениеЗаполнено(УправляемаяФорма.Объект.Номер) Тогда
		ПодсказкаВвода = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(УправляемаяФорма.Объект.Номер);
	Иначе
		ПодсказкаВвода = "";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		ИмяЭлемента,
		"ПодсказкаВвода",
		ПодсказкаВвода);
	
КонецПроцедуры

Функция ИспользуютсяРегистрацииВОрганеСтатистики() Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.ИспользуютсяРегистрацииВОрганеСтатистики();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента)
	
	СтруктураСоответствия = Новый Структура();
	Если ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_2") Или  ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_3") Тогда
		СтруктураСоответствия.Вставить("Фамилия", "ДанныеФизЛицаФамилия");
		СтруктураСоответствия.Вставить("Имя", "ДанныеФизЛицаИмя");
		СтруктураСоответствия.Вставить("Отчество", "ДанныеФизЛицаОтчество");
		СтруктураСоответствия.Вставить("СтраховойНомерПФР", "СтраховойНомерПФРВСвидетельстве");
		СтруктураСоответствия.Вставить("Пол", "ДанныеФизЛицаПол");
		СтруктураСоответствия.Вставить("ДатаРождения", "ДанныеФизЛицаДатаРождения");
		СтруктураСоответствия.Вставить("МестоРождения", "ДанныеФизЛицаМестоРождения");
		СтруктураСоответствия.Вставить("МестоРожденияПредставление", "ДанныеФизЛицаМестоРожденияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "ДанныеФизЛицаАдресРегистрацииПредставление");
		СтруктураСоответствия.Вставить("АдресФактическийПредставление", "ДанныеФизЛицаАдресФактическийПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрации", "ДанныеФизЛицаАдресРегистрации");
		СтруктураСоответствия.Вставить("АдресФактический", "ДанныеФизЛицаАдресФактический");
		СтруктураСоответствия.Вставить("Гражданство", "ДанныеФизЛицаГражданство");
		СтруктураСоответствия.Вставить("Телефоны", "ДанныеФизЛицаТелефоны");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_2") Или  ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_3") Тогда
		СтруктураСоответствия.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
		СтруктураСоответствия.Вставить("АдресДляИнформирования", "АдресДляИнформирования");
		СтруктураСоответствия.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформированияПредставление");
	Иначе
		СтруктураСоответствия.Вставить("Фамилия", "Фамилия");
		СтруктураСоответствия.Вставить("Имя", "Имя");
		СтруктураСоответствия.Вставить("Отчество", "Отчество");
		СтруктураСоответствия.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
		СтруктураСоответствия.Вставить("Пол", "Пол");	
		СтруктураСоответствия.Вставить("ДатаРождения", "ДатаРождения");
		СтруктураСоответствия.Вставить("МестоРождения", "МестоРождения");
		СтруктураСоответствия.Вставить("МестоРожденияПредставление", "МестоРожденияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставление");
		СтруктураСоответствия.Вставить("АдресФактическийПредставление", "АдресФактическийПредставление");
		СтруктураСоответствия.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформированияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрации", "АдресРегистрации");
		СтруктураСоответствия.Вставить("АдресФактический", "АдресФактический");
		СтруктураСоответствия.Вставить("АдресДляИнформирования", "АдресДляИнформирования");
		СтруктураСоответствия.Вставить("Гражданство", "Гражданство");
		СтруктураСоответствия.Вставить("Телефоны", "Телефоны");
		СтруктураСоответствия.Вставить("ИНН", "ИНН");
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_1")
		Или ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_2") 
		Или  ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовАДВ_3") Тогда
		СтруктураСоответствия.Вставить("КодПодразделения", "КодПодразделения");
	КонецЕсли;
	
	СтруктураСоответствия.Вставить("ВидДокумента", "ВидДокумента");
	СтруктураСоответствия.Вставить("Серия", "СерияДокумента");
	СтруктураСоответствия.Вставить("Номер", "НомерДокумента");
	СтруктураСоответствия.Вставить("ДатаВыдачи", "ДатаВыдачи");
	СтруктураСоответствия.Вставить("КемВыдан", "КемВыдан");
	СтруктураСоответствия.Вставить("СтатусНалогоплательщика", "СтатусНалогоплательщика");
	
	Возврат СтруктураСоответствия;
	
КонецФункции

Функция ПредставлениеВидаНачисленияПоНКРФ(ВидНачисления) Экспорт 
	
	Если ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы, начисленные по тарифным ставкам, должностным окладам, сдельным расценкам или в процентах от выручки в соответствии с принятыми формами и системами оплаты труда';
										|en = 'Amounts accrued according to tariff rates, base salary, piece rates or as a percent of revenue in accordance with the accepted forms and plans of labor compensation   '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Начисления стимулирующего характера, в том числе премии за производственные результаты, надбавки к тарифным ставкам и окладам за профессиональное мастерство, высокие достижения в труде и иные подобные показатели';
										|en = 'Accruals of an incentive nature, including bonuses for production results, standard bonuses to tariff rates and base salary for professional skill, superior job performance and other similar indicators    '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Начисления стимулирующего и/или компенсирующего характера, связанные с режимом работы и условиями труда, в том числе надбавки к тарифным ставкам и окладам за работу в ночное время, работу в многосменном режиме, за совмещение профессий, расширение зон обслуживания, за работу в тяжелых, вредных, особо вредных условиях труда, за сверхурочную работу и работу в выходные и праздничные дни, производимые в соответствии с законодательством РФ';
										|en = 'Accruals of incentive and/or compensative nature related to the work schedule and working conditions, including standard bonuses to tariff rates and base salary for night work, work in a multi-shift environment, for holding secondary jobs, expansion of service range, for work in arduous, harmful and especially harmful working conditions, for overtime work, and work at weekends and public holidays, made according to the legislation of the Russian Federation         '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп4ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Стоимость бесплатно предоставляемых работникам в соответствии с законодательством РФ коммунальных услуг, питания и продуктов, предоставляемого работникам в соответствии с установленным законодательством РФ порядком бесплатного жилья';
										|en = 'Cost of free utilities, meals and food provided to employees according to RF legislation on free accommodation'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп5ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на приобретение (изготовление) выдаваемых в соответствии с законодательством РФ работникам бесплатно либо продаваемых работникам по пониженным ценам форменной одежды и обмундирования (в части стоимости, не компенсируемой работниками), которые остаются в личном постоянном пользовании работников';
										|en = 'Expenses for acquisition (manufacture) of uniform and outfit provided to employees for free or sold to them at reduced cost  for permanent use (concerning the cost not compensated by employees)'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Сумма начисленного работникам среднего заработка, сохраняемого на время выполнения ими государственных и (или) общественных обязанностей и в других случаях, предусмотренных законодательством РФ о труде';
										|en = 'Amount of average earnings accrued to employees which are fully paid during their performance of state and (or) public duties and in other cases provided for in the labor legislation of the Russian Federation'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда, сохраняемую работникам на время отпуска, предусмотренного законодательством РФ, фактические расходы на оплату проезда работников и лиц, находящихся у этих работников на иждивении, к месту использования отпуска на территории РФ и обратно; доплата несовершеннолетним за сокращенное рабочее время, расходы на оплату перерывов в работе матерей для кормления ребенка, а также расходы на оплату времени, связанного с прохождением медицинских осмотров';
										|en = 'Expenses for labor compensation fully paid to employees during the leave in accordance with the legislation of the Russian Federation, actual expenses of paying for travel of employees and persons dependent on these employees to the leave location in the Russian Federation and back; extra pay to minors for reduced working hours, expenses of paying for female employee breaks for breastfeeding, and expenses of paying for the time related to medical examination        '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп8ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Денежные компенсации за неиспользованный отпуск в соответствии с трудовым законодательством РФ';
										|en = 'Financial compensation for unused leave in accordance with the labor legislation of the Russian Federation'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Начисления работникам, высвобождаемым в связи с реорганизацией или ликвидацией организации, сокращением численности или штата работников';
										|en = 'Accruals to employees made redundant due to the company reorganization or liquidation, reduction of company staff '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп10ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Единовременные вознаграждения за выслугу лет (надбавки за стаж работы по специальности) в соответствии с законодательством РФ';
										|en = 'One-time seniority allowances (standard bonus for qualification length of service) according to the legislation of the Russian Federation'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп11ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Надбавки, обусловленные районным регулированием оплаты труда, в том числе начисления по районным коэффициентам и коэффициентам за работу в тяжелых природно-климатических условиях';
										|en = 'Allowances intended to provide region-based adjustment of labor compensation, including accruals using regional factors and factors for work in harsh natural climatic conditions.'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп12ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Надбавки за непрерывный стаж работы в районах Крайнего Севера и приравненных к ним местностях, в районах европейского Севера и других районах с тяжелыми природно-климатическими условиями';
										|en = 'Allowances for continuous employment in the Far North Districts and equated localities, in the European North areas and other areas with harsh environmental conditions'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп12_1ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Стоимость проезда по фактическим расходам и стоимость провоза багажа из расчета не более 5 тонн на семью по фактическим расходам, но не выше тарифов, предусмотренных для перевозок железнодорожным транспортом сотруднику организации, расположенной в районах Крайнего Севера и приравненных к ним местностях, и членам его семьи в случае переезда к новому месту жительства в другую местность в связи с расторжением трудового договора с сотрудником по любым основаниям, в том числе в случае его смерти, за исключением увольнения за виновные действия';
										|en = 'Actual travel expenses and baggage fare not exceeding 5 tons per family but not above the fares set forth for railroad transportation for an employee of the company located in Far North Districts and equivalent localities and their family members in case of their movement to another location due to employment contract termination with the employee due to any reasons, including the employee death, except for termination of employment for faulty actions'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда, сохраняемую в соответствии с законодательством РФ на время учебных отпусков, предоставляемых работникам, а также расходы на оплату проезда к месту учебы и обратно';
										|en = 'Expenses for labor compensation fully paid in accordance with the legislation of the Russian Federation during study leaves and educational travel expenses  '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп14ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда за время вынужденного прогула или время выполнения нижеоплачиваемой работы в случаях, предусмотренных законодательством РФ';
										|en = 'Labor compensation expenses during forced absenteeism time or period of lower paid job performance as provided by applicable law of the Russian Federation'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп15ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = '(утратил силу с 01 января 2010 года) Расходы на доплату до фактического заработка в случае временной утраты трудоспособности, установленную законодательством РФ';
										|en = '(became invalid since 01/01/2010) Expenses for extra pay up to actual salary in case of temporary disability specified by the RF legislation '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп16ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы платежей (взносов) по договорам обязательного страхования, а также суммы платежей (взносов) по договорам добровольного страхования (договорам негосударственного пенсионного обеспечения), заключенным в пользу работников со страховыми организациями (негосударственными пенсионными фондами), имеющими лицензии, выданные в соответствии с законодательством РФ, на ведение соответствующих видов деятельности в РФ';
										|en = 'Amount of payments (contributions) under compulsory insurance agreements and amount of payments (contributions) under voluntary insurance agreements (non-state pension provision contracts) concluded on behalf of employees with insurance companies (non-state pension funds) having the required licenses issued according to RF legislation'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп17ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы, начисленные в размере тарифной ставки или оклада (при выполнении работ вахтовым методом), предусмотренные коллективными договорами, за дни нахождения в пути от места нахождения организации (пункта сбора) к месту работы и обратно, предусмотренные графиком работы на вахте, а также за дни задержки работников в пути по метеорологическим условиям';
										|en = 'Amounts accrued in the amount of tariff rate or base salary (when working on a rotational basis) under collective bargaining agreements for the days of travel from the company (gathering point) location to the work and back provided for in the rotation work schedule and for the days of employee delay during travel due to meteorological conditions     '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп18ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Суммы, начисленные за выполненную работу физическим лицам, привлеченным для работы согласно специальным договорам на предоставление рабочей силы с государственными организациями';
										|en = 'Amounts accrued to outsourced individuals for work performed according to the special contracts for provision of personnel with public companies  '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп19ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'В случаях, предусмотренных законодательством РФ, начисления по основному месту работы рабочим, руководителям или специалистам налогоплательщика во время их обучения с отрывом от работы в системе повышения квалификации или переподготовки кадров';
										|en = 'In cases provided for in the RF legislation, accruals for the primary place of employment to workers, managers or specialists of a taxpayer during their off-the-job training in the system of further training or retraining'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп20ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда работников-доноров за дни обследования, сдачи крови и отдыха, предоставляемые после каждого дня сдачи крови';
										|en = 'Expenses for labor compensation of blood donor employees for the days of examination, blood donation and rest provided after each blood donation day'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп21ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату труда работников, не состоящих в штате организации, за выполнение ими работ по заключенным договорам гражданско-правового характера (включая договоры подряда), за исключением оплаты труда по договорам гражданско-правового характера, заключенным с индивидуальными предпринимателями';
										|en = 'Expenses for labor compensation of external employees for work performance under civil law contracts (including contractor agreements), except for labor compensation payment under civil law contracts signed with individual entrepreneurs'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп22ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Предусмотренные законодательством РФ начисления военнослужащим, проходящим военную службу на государственных унитарных предприятиях и в строительных организациях федеральных органов исполнительной власти, в которых законодательством РФ предусмотрена военная служба, и лицам рядового и начальствующего состава органов внутренних дел, Государственной противопожарной службы, предусмотренные федеральными законами, законами о статусе военнослужащих и об учреждениях и органах, исполняющих уголовные наказания в виде лишения свободы';
										|en = 'In accordance with the legislation of the Russian Federation, accruals to military personnel doing the military service in state unitary enterprises and construction companies of federal authorities where military service is covered by the RF legislation, as well as to privates and senior officers of internal affairs agencies, State Fire Service covered by the federal laws, legislation on military personnel status and companies and institutions which carry out criminal sentence of deprivation of liberty '");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп23ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Доплаты инвалидам, предусмотренные законодательством РФ';
										|en = 'Supplements to disabled people provided for in the RF legislation'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп24ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы в виде отчислений в резерв на предстоящую оплату отпусков работникам и (или) в резерв на выплату ежегодного вознаграждения за выслугу лет, осуществляемые в соответствии со статьей 324.1 НК';
										|en = 'Expenses as allocations to reserve for the future employees'' leave pay expenses and (or) to reserve for payment of annual remuneration for long public service according to article 324.1 of TC'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп24_1ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на возмещение затрат работников по уплате процентов по займам (кредитам) на приобретение и (или) строительство жилого помещения. Указанные расходы для целей налогообложения признаются в размере, не превышающем 3 процентов суммы расходов на оплату труда';
										|en = 'Expenses for employees'' cost compensation for payment of loan (credit) interest for purchasing and (or) building living accommodation. Specified expenses for the taxation purposes are recognized in the amount not exceeding 3% of labor compensation expenses'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп24_2ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Расходы на оплату услуг по организации туризма, санаторно-курортного лечения и отдыха на территории РФ. Указанные расходы для целей налогообложения признаются в размере, не более 50 000 рублей в совокупности за налоговый период на каждого из граждан.';
										|en = 'The cost of services for the organization of tourism, health resort treatment and rest in the territory of the Russian Federation. These expenses are recognized for tax purposes in an amount not exceeding 50,000 rubles in the aggregate for the tax period for each subject.'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором';
										|en = 'Other expense kinds in favor of the employee specified in the employment contract and (or) collective bargaining agreement'");
	ИначеЕсли ВидНачисления = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп48ст266") Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Прочие расходы, связанные с производством и (или) реализацией';
										|en = 'Other expenses related to the manufacture and (or) sale'");
	ИначеЕсли ВидНачисления.Пустая() Тогда
		РасшифровкаВидНачисления = НСтр("ru = 'Не учитывается в расходах на оплату труда';
										|en = 'It is not recorded in labor expenses'");
	КонецЕсли;
	
	Возврат РасшифровкаВидНачисления	
	
КонецФункции

Функция ПредставлениеРегистрацииВНалоговомОргане(Знач СтруктурнаяЕдиница, Знач РегистрацияВНалоговомОргане) Экспорт
	
	Представление = "";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		ДанныеРегистрацииВНалоговомОргане = ЗарплатаКадрыВызовСервера.ДанныеРегистрацииВНалоговомОргане(СтруктурнаяЕдиница, РегистрацияВНалоговомОргане);
		Если ДанныеРегистрацииВНалоговомОргане.ВладелецФизическоеЛицо Тогда
			
			Представление = СтрШаблон(
				НСтр("ru = '%1 (%2), ОКАТО %3, ОКТМО %4.';
					|en = '%1 (%2), RNCPS %3, RNCMT %4.'"),
				ДанныеРегистрацииВНалоговомОргане.Наименование,
				ДанныеРегистрацииВНалоговомОргане.Код,
				ДанныеРегистрацииВНалоговомОргане.КодПоОКАТО,
				ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО);
				
		Иначе
			
			Представление = СтрШаблон(
				НСтр("ru = '%1 (%2), КПП %3, ОКАТО %4, ОКТМО %5.';
					|en = '%1 (%2), KPP %3, RNCPS %4, RNCMT %5.'"),
				ДанныеРегистрацииВНалоговомОргане.Наименование,
				ДанныеРегистрацииВНалоговомОргане.Код,
				ДанныеРегистрацииВНалоговомОргане.КПП,
				ДанныеРегистрацииВНалоговомОргане.КодПоОКАТО,
				ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеРегистрацииВНалоговомОргане.Период) Тогда
			Представление = Представление 
				+ СтрШаблон(
					НСтр("ru = ' Действует с %1';
						|en = ' Valid from %1'"),
					Формат(ДанныеРегистрацииВНалоговомОргане.Период, "ДЛФ=DD"));
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = НСтр("ru = '<не заполнена>';
							|en = '<not filled in>'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Процедура вызывается в форме, содержащей данные физического лица при изменении данных физического лица.
// Например, для отработки оповещения о записи нового состояния физлица.
// Параметры:
//		Объект - данные формы в которой выполняется редактирование.
//		ДанныеФизическогоЛица - новое состояние физического лица. Структура с полями, совпадающими по именам с полями
//		                        данных формы.
//
Процедура ОбработкаИзмененияДанныхФизическогоЛица(Объект, ДанныеФизическогоЛица, СтрокиПоСотруднику, Модифицированность = Ложь) Экспорт
	Перем ИмяПоляВДокументе, ЗначениеСвойстваСотрудника;
	ТипДокумента = ТипЗнч(Объект.Ссылка);
	
	СоответствиеДанных = СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента);
	Для Каждого СтрокаСотрудника Из СтрокиПоСотруднику Цикл
		Для Каждого КлючЗначение Из ДанныеФизическогоЛица Цикл
			Если СоответствиеДанных.Свойство(КлючЗначение.Ключ, ИмяПоляВДокументе) Тогда
				
				ДанныеСтрокиСотрудника = Новый Структура;
				ДанныеСтрокиСотрудника.Вставить(ИмяПоляВДокументе);
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиСотрудника, СтрокаСотрудника);
				Если ДанныеСтрокиСотрудника[ИмяПоляВДокументе] <> Неопределено Тогда
					Если ЗначениеСвойстваСотрудника <> КлючЗначение.Значение Тогда
						Модифицированность = Истина;
						СтрокаСотрудника[ИмяПоляВДокументе] = КлючЗначение.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьПредставление(Представление, Дополнение)
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = Дополнение;
		Возврат;
	КонецЕсли;
	
	Представление = Представление + Символы.НПП + Дополнение;

КонецПроцедуры

Функция ИдентификаторМакетаПечатнойФормы(Знач СтрокаЗаголовка) Экспорт
	
	Если СтрНайти(СтрокаЗаголовка, "[") > 0 Тогда
		Возврат ИмяРеквизитаПоИмениПоля(СтрокаЗаголовка)
	КонецЕсли;
	
	СловаСтрокиЗаголовка = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаЗаголовка);
	
	Для Индекс = 0 По СловаСтрокиЗаголовка.Количество() - 1 Цикл
		СловаСтрокиЗаголовка[Индекс] = ВРег(Лев(СловаСтрокиЗаголовка[Индекс], 1)) + Сред(СловаСтрокиЗаголовка[Индекс], 2);
	КонецЦикла;
	
	Возврат СтрСоединить(СловаСтрокиЗаголовка);
	
КонецФункции

Функция ИмяРеквизитаПоИмениПоля(Знач ИмяПоля)
	
	ПозицияСкобки = СтрНайти(ИмяПоля, "[");
	Если ПозицияСкобки > 0 Тогда
		
		ИмяРеквизита = Лев(ИмяПоля, ПозицияСкобки - 2);
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, ".", "");
		
		ИмяПоля = Сред(ИмяПоля, ПозицияСкобки);
		ИмяПоля = СтрЗаменить(ИмяПоля, "[", "");
		ИмяПоля = СтрЗаменить(ИмяПоля, "]", "");
		ИмяПоля = СтрЗаменить(ИмяПоля, " ", "");
		ИмяПоля = СтрЗаменить(ИмяПоля, ".", "");
		
		Для НомерСимвола = 1 По СтрДлина(ИмяПоля) Цикл
			
			Символ = Сред(ИмяПоля, НомерСимвола, 1);
			Если Символ = "_"
				Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)
				Или СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(Символ)
				Или СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Символ) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИмяПоля = Лев(ИмяПоля, НомерСимвола - 1) + "_" + Сред(ИмяПоля, НомерСимвола + 1);
			
		КонецЦикла;
		
		ИмяПоля = ИмяРеквизита + "_" + ИмяПоля + "_";
		
	Иначе
		ИмяПоля = СтрЗаменить(ИмяПоля, ".", "");
	КонецЕсли;
	
	Возврат ИмяПоля
	
КонецФункции

Функция НачисленияРКСН() Экспорт
	#Если Клиент Тогда
		Возврат ЗарплатаКадрыВызовСервера.НачисленияРКСН();
	#Иначе
		Возврат ЗарплатаКадрыПовтИсп.НачисленияРКСН();
	#КонецЕсли
КонецФункции

#КонецОбласти
