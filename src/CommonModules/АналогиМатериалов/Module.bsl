////////////////////////////////////////////////////////////////
// Модуль "АналогиМатериалов" содержит процедуры и функции для 
// работы с механизмом замены материалов на аналоги.
//
////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СтруктураДанных

// Возвращает структуру полей для выгрузки и заполнения таблицы.
//
// Возвращаемое значение:
// 	Структура - содержит поля:
//		* ОсновныеПоля		  - Строка 	  - основные поля таблицы, разделенные запятыми
//		* ДополнительныеПоля  - Структура - структура дополнительных полей - ключ:	имя поле 
//																			 значение:	описание типов
//		* ПодменяемыеПоля     - Структура - структура подменяемых полей - клюя:	имя	заполняемого поле
//																		  значение:	имя	поле источник данных для заполнения
//		* ЗначенияПоУмолчанию - Структура - структура значений по умолчанию - ключ:	имя поле
//																			  значение:	значение поле
// 
Функция СтруктураПолейТаблицыДляЗаменыНаАналоги() Экспорт
	
	СтруктураПолей = ПроизводствоСервер.СтруктураПолейТаблицы();
	
	СтруктураПолей.ОсновныеПоля = "НомерСтроки,
				   				  |Номенклатура,
				   				  |Характеристика, 
				   				  |Количество";	
	
	СтруктураПолей.ДополнительныеПоля.Вставить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СтруктураПолей.ДополнительныеПоля.Вставить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	СтруктураПолей.ДополнительныеПоля.Вставить("Обособленно", Новый ОписаниеТипов("Булево"));
	СтруктураПолей.ДополнительныеПоля.Вставить("КоличествоВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Возврат СтруктураПолей;
	
КонецФункции

// Возвращает параметры необходимые для выбора аналогов
//
// Параметры:
//  ТипИсточника - ОписаниеТипов - тип источника разреза формирования параметров
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ПараметрыОбщие    - Структура - содержит:
//                          ** ПоказатьОстатки - Булево -
//                          ** РежимРасшифровки - Булево - используется при открытии формы подбора
//   * ПараметрыТоваров  - Структура - содержит:
//                          ** Товары                       - Строка               - адрес временного хранилище
//                          ** ТоварыНезаменяемоеКоличество - Строка, Неопределено - адрес временного хранилище
//                          ** РаспределениеЗапасов         - Строка, Неопределено - адрес временного хранилище
//   * ПараметрыАналогов - Структура - содержит:
//                          ** ТаблицаПараметров - см. ТаблицаПараметровАналогов
//                          ** Резервы           - ТаблицаЗначений, Неопределено -
//                          ** Склад             - СправочникСсылка.Склады, Неопределено -
//
Функция ПараметрыВыбораАналогов(ТипИсточника) Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ПараметрыОбщие", Новый Структура);
	Параметры.Вставить("ПараметрыТоваров", Новый Структура);
	Параметры.Вставить("ПараметрыАналогов", Новый Структура);
	
	Параметры.ПараметрыОбщие.Вставить("ПоказатьОстатки");
	Параметры.ПараметрыОбщие.Вставить("РежимРасшифровки", Ложь);

	Параметры.ПараметрыТоваров.Вставить("Товары");
	Параметры.ПараметрыТоваров.Вставить("ТоварыНезаменяемоеКоличество");
	Параметры.ПараметрыТоваров.Вставить("РаспределениеЗапасов");
	
	Параметры.ПараметрыАналогов.Вставить("ТаблицаПараметров", ТаблицаПараметровАналогов(ТипИсточника));
	Параметры.ПараметрыАналогов.Вставить("Резервы");
	Параметры.ПараметрыАналогов.Вставить("Склад");
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ФормированияДанных

// Возвращает адрес временного хранилища таблицы распределения запасов созданного по данным объекта
//
// Параметры:
//  Форма 					  - Структура, ДанныеФормыСтруктура				  - см. ОбеспечениеВДокументахСервер.РаспределениеЗапасовДляРедактируемогоДокумента
//	АдресВХранилище           - Строка                                        - адрес таблицы товаров в хранилище
//	ОтборСостояний            - Массив, Неопределено                          - см. ОбеспечениеВДокументахСервер.РаспределениеЗапасовДляРедактируемогоДокумента
// 	АдресВоВременномХранилище - УникальныйИдентификатор, Строка, Неопределено - адрес временного хранилища
//
// Возвращаемое значение:
// 	Строка - адрес временного хранилища таблицы значение 
// 
Функция ПоместитьВоВременноеХранилищеРаспределениеЗапасов(
			Форма, АдресВХранилище, ОтборСостояний = Неопределено,	АдресВоВременномХранилище = Неопределено) Экспорт
			
	Отбор = ?(ОтборСостояний = Неопределено, Новый Массив, ОтборСостояний);
	
	Если Отбор.Количество() = 0 Тогда
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.НеОбеспечивать);
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу);
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.Обеспечить);
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.ВРезерве);
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе);
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении);
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате);
		Отбор.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
	КонецЕсли;	
			
	ТаблицаРаспределенияЗапасов	= ОбеспечениеВДокументахСервер.РаспределениеЗапасовДляРедактируемогоДокумента(
									Истина,
									Форма,
									Отбор);
			
	ДополнитьТаблицуРаспределенияЗапасов(АдресВХранилище, ТаблицаРаспределенияЗапасов);		
		
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРаспределенияЗапасов, АдресВоВременномХранилище);
	
КонецФункции	

// Возвращает дополнительные параметры используемые в методе "ПолучитьДанныеТоваров"
// 
// Возвращаемое значение:
//  Структура - содержит:
//   * ОтборСтрок - Структура, Неопределено - ключ: имя реквизита таблицы
//                                            значение: массив значений реквизита таблицы для отбора.
//   * ИсточникИтогов - ТаблицаЗначений, ДанныеФормыКоллекция, Неопределено - Таблица значений расчета итогов,
//                                                                            если Неопределено, тогда определяется через форму.
//   * ВызовИзФормы   - Булево - признак вызова из формы. По умолчанию ИСТИНА.
//
Функция ДополнительныеПараметры() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОтборСтрок");
	Параметры.Вставить("ИсточникИтогов");
	Параметры.Вставить("ВызовИзФормы", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Формирует данные товаров для отображения, подбора и замены аналогов
//
// Параметры:
// 	Форма                   - ФормаКлиентскогоПриложения - 
// 	ИмяОбъекта              - Строка - имя объекта
// 	ИмяТаблицы              - Строка - имя таблицы
//	Режим                   - Число - 0 - показать аналоги
//                                    1 - подобрать аналоги
//                                    2 - заменить аналогами.
//  РаспределитьЗапасы      - Булево - 
//  СтруктураПолей          - см. АналогиМатериалов.СтруктураПолейТаблицыДляЗаменыНаАналоги
//	ДополнительныеПараметры - см. АналогиМатериалов.ДополнительныеПараметры
// 
// Возвращаемое значение:
//  Структура - см. АналогиМатериалов.ПараметрыВыбораАналогов ключ ПараметрыТоваров
//
Функция ПолучитьДанныеТоваров(
			Форма,
			ИмяОбъекта,
			ИмяТаблицы,
			Режим,
			РаспределитьЗапасы,
			СтруктураПолей,
			ДополнительныеПараметры = Неопределено) Экспорт
	
	ВызовИзФормы   = Истина;
	ОтборСтрок     = Неопределено;
	ИсточникИтогов = Неопределено;

	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ВызовИзФормы",   ВызовИзФормы);
		ДополнительныеПараметры.Свойство("ОтборСтрок",     ОтборСтрок);
		ДополнительныеПараметры.Свойство("ИсточникИтогов", ИсточникИтогов);
	КонецЕсли;
	
	ТоварыАдресВХранилище = Неопределено;
	ТоварыНезаменяемоеКоличествоАдресВХранилище = Неопределено;
	РаспределениеЗапасовАдресВХранилище = Неопределено;
			
	Если Режим = 0 Тогда// показать аналоги
		
		// Товары
		ТоварыАдресВХранилище = ПроизводствоСервер.ПоместитьВоВременноеХранилищеДанныеСтрок(
									Форма, ИмяОбъекта, ИмяТаблицы, Ложь, СтруктураПолей, ОтборСтрок);
		
	ИначеЕсли Режим = 1 Тогда// подобрать аналоги 
		
		// Товары
		ИменаКолонокГруппировок = Новый Массив;
		ИменаКолонокГруппировок.Добавить("Номенклатура");
		ИменаКолонокГруппировок.Добавить("Характеристика");
		ИменаКолонокГруппировок.Добавить("Назначение");
		
		Если Не СтруктураПолей.ЗначенияПоУмолчанию.Свойство("Склад") Тогда
			ИменаКолонокГруппировок.Добавить("Склад");
		КонецЕсли;
		
		Если Не СтруктураПолей.ЗначенияПоУмолчанию.Свойство("Обособленно") Тогда
			ИменаКолонокГруппировок.Добавить("Обособленно");
		КонецЕсли;
		
		НастройкиКолонок = Новый Структура;
		НастройкиКолонок.Вставить("ИмяСуммируемойКолонки", "Количество");
		НастройкиКолонок.Вставить("ИтоговаяКолонка", Новый Структура("Имя, ТипЗначения", "КоличествоВсего"));
		НастройкиКолонок.Вставить("КолонкиГруппировок", СтрСоединить(ИменаКолонокГруппировок, ", "));
		
		ТаблицаДанных = ПроизводствоСервер.ТаблицаСИтоговымЗначениемКолонкиПоСтрокам(
							Форма, ИмяОбъекта, ИмяТаблицы, Истина, НастройкиКолонок, ОтборСтрок, ИсточникИтогов);
							
		ДанныеФормы = Новый Структура;
		ДанныеФормы.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
		ДанныеФормы.Вставить(ИмяОбъекта, Новый Структура);
		ДанныеФормы[ИмяОбъекта].Вставить(ИмяТаблицы, ТаблицаДанных);
		
		ТоварыАдресВХранилище = ПроизводствоСервер.ПоместитьВоВременноеХранилищеДанныеСтрок(
									ДанныеФормы, ИмяОбъекта, ИмяТаблицы, Ложь, СтруктураПолей);
			
		// Запасы
		Если РаспределитьЗапасы Тогда
			
			РаспределениеЗапасовАдресВХранилище = ПоместитьВоВременноеХранилищеРаспределениеЗапасов(Форма, ТоварыАдресВХранилище);
			
		КонецЕсли;	
							
	ИначеЕсли Режим = 2 Тогда// заменить аналогами
		
		ОтборСостояний = Новый Массив;
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.Обеспечить);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
			
		ТаблицаРаспределенияЗапасов = ОбеспечениеВДокументахСервер.РаспределениеЗапасовДляРедактируемогоДокумента(
										ВызовИзФормы,
										Форма,
										ОтборСостояний);
										
		ТаблицаРаспределенияЗапасов.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаЗапасов Из ТаблицаРаспределенияЗапасов Цикл
			
			СтрокаЗапасов.Обособленно = СтрокаЗапасов.Назначение = Неопределено Или ЗначениеЗаполнено(СтрокаЗапасов.Назначение);
			
			Если СтрокаЗапасов.Назначение = Неопределено Тогда
				СтрокаЗапасов.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;	
			
		КонецЦикла;	
				
		// Товары
		ТаблицаОбеспечения = ТаблицаРаспределенияЗапасов.Скопировать(
								Новый Структура("Состояние, Обособленно",
													Перечисления.РаспределениеЗапасовСостояния.Обеспечить,
													Ложь)); // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
			
		ТаблицаОбеспечения.Колонки.ЗаказНаОтгрузку.Имя = "Ссылка";
		
		ТаблицаОбъекта = Форма[ИмяОбъекта][ИмяТаблицы];
		ТаблицаИсходная = ?(ТипЗнч(ТаблицаОбъекта) = Тип("ТаблицаЗначений"), ТаблицаОбъекта.Скопировать(), ТаблицаОбъекта.Выгрузить()); // ТаблицаЗначений - 
		
		ИменаПолейОтбораПоНоменклатуре = Новый Массив;
		ИменаПолейОтбораПоНоменклатуре.Добавить("Номенклатура");
		ИменаПолейОтбораПоНоменклатуре.Добавить("Характеристика");
		ИменаПолейОтбораПоНоменклатуре.Добавить("Назначение");
		ИменаПолейОтбораПоНоменклатуре.Добавить("Обособленно");
		ИменаПолейОтбораПоНоменклатуре.Добавить("ВариантОбеспечения");
		
		Если Не СтруктураПолей.ЗначенияПоУмолчанию.Свойство("Склад") Тогда
			ИменаПолейОтбораПоНоменклатуре.Добавить("Склад");
		КонецЕсли;
		
		ИменаПолейОтбораПоНомеруСтроки = Новый Массив;
		ИменаПолейОтбораПоНомеруСтроки.Добавить("НомерСтроки");
		
		Если ТаблицаИсходная.Колонки.Найти("Ссылка") <> Неопределено Тогда
			ИменаПолейОтбораПоНоменклатуре.Добавить("Ссылка");
			ИменаПолейОтбораПоНомеруСтроки.Добавить("Ссылка");
		КонецЕсли;
		
		ПоляОтбораПоНоменклатуре = СтрСоединить(ИменаПолейОтбораПоНоменклатуре, ", ");
		ПоляОтбораПоНомеруСтроки = СтрСоединить(ИменаПолейОтбораПоНомеруСтроки, ", ");
		
		ТаблицаИсходная.Индексы.Добавить(ПоляОтбораПоНоменклатуре);
		ТаблицаИсходная.Индексы.Добавить(ПоляОтбораПоНомеруСтроки);
		
		ТаблицаДанных = ТаблицаИсходная.СкопироватьКолонки();
		
		ОтборПоНоменклатуре = Новый Структура(ПоляОтбораПоНоменклатуре);
		
		ОтборПоНомеруСтроки = Новый Структура(ПоляОтбораПоНомеруСтроки);
		
		Пока ТаблицаОбеспечения.Количество() > 0 Цикл
			
			СтрокаОбеспечения = ТаблицаОбеспечения[0];
			
			ЗаполнитьЗначенияСвойств(ОтборПоНоменклатуре, СтрокаОбеспечения);
			ОтборПоНоменклатуре.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления;
			МассивСтрокПредварительный = ТаблицаИсходная.НайтиСтроки(ОтборПоНоменклатуре);
			ОтборПоНоменклатуре.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
			МассивСтрок = ТаблицаИсходная.НайтиСтроки(ОтборПоНоменклатуре);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, МассивСтрокПредварительный);
			
			Пока МассивСтрок.Количество() > 0 Цикл
				
				СтрокаИсходная = МассивСтрок[0];
				
				Если ОтборСтрок <> Неопределено Тогда
					
					ОтменитьОбработкуСтроки = Ложь;
					
					Для каждого ЭлементОтбора Из ОтборСтрок Цикл
						Если ЭлементОтбора.Значение.Найти(СтрокаИсходная[ЭлементОтбора.Ключ]) = Неопределено Тогда
							ОтменитьОбработкуСтроки = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ОтменитьОбработкуСтроки Тогда
						ТаблицаИсходная.Удалить(СтрокаИсходная);
						МассивСтрок.Удалить(0);
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОтборПоНомеруСтроки, СтрокаИсходная);
				
				МассивОбработанныхСтрок = ТаблицаДанных.НайтиСтроки(ОтборПоНомеруСтроки);
				Если МассивОбработанныхСтрок.Количество() > 0 Тогда
					СтрокаДанных = МассивОбработанныхСтрок[0];	
				Иначе
					СтрокаДанных = ТаблицаДанных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИсходная,, "Количество");
				КонецЕсли;
				
				КоличествоРаспределения = Мин(СтрокаОбеспечения.Количество, СтрокаИсходная.Количество);
				
				СтрокаДанных.Количество = СтрокаДанных.Количество + КоличествоРаспределения;
				
				СтрокаИсходная.Количество = СтрокаИсходная.Количество - КоличествоРаспределения;	
				СтрокаОбеспечения.Количество = СтрокаОбеспечения.Количество - КоличествоРаспределения;	

				Если СтрокаИсходная.Количество = 0 Тогда
					ТаблицаИсходная.Удалить(СтрокаИсходная);
					МассивСтрок.Удалить(0);
				КонецЕсли;
				
				Если СтрокаОбеспечения.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаОбеспечения.Удалить(СтрокаОбеспечения);
			
		КонецЦикла;
		
		ДанныеФормы = Новый Структура;
		ДанныеФормы.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
		ДанныеФормы.Вставить(ИмяОбъекта, Новый Структура);
		ДанныеФормы[ИмяОбъекта].Вставить(ИмяТаблицы, ТаблицаДанных);
		
		ТоварыАдресВХранилище = ПроизводствоСервер.ПоместитьВоВременноеХранилищеДанныеСтрок(
									ДанныеФормы, ИмяОбъекта, ИмяТаблицы, Ложь, СтруктураПолей);
		
		Если ТаблицаИсходная.Количество() > 0 Тогда
			ТоварыНезаменяемоеКоличествоАдресВХранилище = ПоместитьВоВременноеХранилище(
															ТаблицаИсходная, Форма.УникальныйИдентификатор);
		КонецЕсли; 
		
		// Запасы						
		ТаблицаОстатков = ТаблицаРаспределенияЗапасов.Скопировать(Новый Структура("Состояние, Назначение, Обособленно",
																	Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе,
																	Справочники.Назначения.ПустаяСсылка(),
																	Ложь));
				
		ТаблицаОстатков.Свернуть("Состояние, Номенклатура, Характеристика, Назначение, Обособленно, Склад", "Количество");
		
		РаспределениеЗапасовАдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаОстатков, Форма.УникальныйИдентификатор);
			
	КонецЕсли;	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Товары", ТоварыАдресВХранилище);
	СтруктураДанных.Вставить("ТоварыНезаменяемоеКоличество", ТоварыНезаменяемоеКоличествоАдресВХранилище);
	СтруктураДанных.Вставить("РаспределениеЗапасов", РаспределениеЗапасовАдресВХранилище);	
	
	Возврат СтруктураДанных;
	
КонецФункции	

#КонецОбласти

#Область ЗаменаНаАналоги

// Выполняет замену материалов на подобранные аналоги
//
// Параметры:
//  ТабличнаяЧасть	   	  - ДанныеФормыКоллекция - табличная часть в которой требуется выполнить замену
//  АдресВХранилище	   	  - Строка				 - адрес хранилища в котором находятся подобранные аналоги
//  ДополнительныеПоля 	  - Строка, Неопределено - поля таблицы, которые нужно заполнить в строках с заменяемыми аналогами, 
//												   на основании строк замененных материалов.
//  КодДействияАналоги           - Строка        - если передано, аналоги резервируются на складе с учетом свободного остатка,
//  											   для действия "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" значение реквизита "ВариантОбеспечения устанавливается в "СоСклада" (значение по умолчанию),
//  											   для действия "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ"     значение реквизита "ВариантОбеспечения устанавливается в "Отгрузить".
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//  * ИндексыНовыхСтрок		 - Массив - содержит индексы новых строк (аналоги)
//  * ИндексыИзмененныхСтрок - Массив - содержит индексы измененных строк (материалы)
//
Функция ВыполнитьЗаменуНаАналоги(
			ТабличнаяЧасть, АдресВХранилище, ДополнительныеПоля = Неопределено, КодДействияАналоги = "") Экспорт
	
	ТаблицаЗамен = ПолучитьИзВременногоХранилища(АдресВХранилище);//ТаблицаЗначений - 
	ТаблицаЗамен.Индексы.Добавить("ЭтоАналог");
	
	РезервироватьНаСкладе = КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" Или КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ";
	Если РезервироватьНаСкладе Тогда
		
		ТаблицаЗамен.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
		ТаблицаЗамен.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		ТаблицаЗамен.Индексы.Добавить("ЭтоАналог, Обработано, НомерПодбора");
		ТаблицаЗамен.Индексы.Добавить("ЭтоАналог, Обработано, НомерПодбора, Номенклатура, Характеристика");
		
		СтруктураОтбора = Новый Структура("ЭтоАналог, Обработано, НомерПодбора", Истина, Ложь);
		СтруктураОтбораПоНоменклатуре = Новый Структура(
			"ЭтоАналог, Обработано, НомерПодбора, Номенклатура, Характеристика", Истина, Ложь);
		
		МассивНомеровПодбора = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаЗамен.ВыгрузитьКолонку("НомерПодбора"));
		Для каждого НомерПодбора Из МассивНомеровПодбора Цикл
			
			СтруктураОтбора.НомерПодбора = НомерПодбора;
			
			Пока Истина Цикл
				
				МассивНеОбработанныхСтрок = ТаблицаЗамен.НайтиСтроки(СтруктураОтбора);
				Если МассивНеОбработанныхСтрок.Количество() = 0 Тогда
					Прервать;
				Иначе
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораПоНоменклатуре, МассивНеОбработанныхСтрок[0]);
					МассивСтрок = ТаблицаЗамен.НайтиСтроки(СтруктураОтбораПоНоменклатуре);
					
					ОстатокНаСкладе = МассивСтрок[0].ОстатокНаСкладе;
					Для каждого СтрокаТаблицы Из МассивСтрок Цикл
						
						Если ОстатокНаСкладе = 0 Тогда
							
							СтрокаТаблицы.Обработано = Истина;
							
						ИначеЕсли СтрокаТаблицы.Количество > ОстатокНаСкладе Тогда
							
							НоваяСтрокаТаблицы = ТаблицаЗамен.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы,, "Количество");
							НоваяСтрокаТаблицы.Количество = СтрокаТаблицы.Количество - ОстатокНаСкладе;
							НоваяСтрокаТаблицы.Обработано = Истина;
							
							СтрокаТаблицы.Количество = ОстатокНаСкладе;
							СтрокаТаблицы.Обработано = Истина;
							Если КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" Тогда
								СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
							ИначеЕсли КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ" Тогда
								СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							КонецЕсли;
							
							ОстатокНаСкладе = 0;
							
						Иначе
							
							СтрокаТаблицы.Обработано = Истина;
							Если КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" Тогда
								СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
							ИначеЕсли КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ" Тогда
								СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							КонецЕсли;
							
							ОстатокНаСкладе = ОстатокНаСкладе - СтрокаТаблицы.Количество;	
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ДополнительныеПоля <> Неопределено Тогда
		
		МассивДополнительныхПолей = СтрРазделить(ДополнительныеПоля, ", ", Ложь);
		Для каждого ДополнительноеПоле Из МассивДополнительныхПолей Цикл
			Если ТаблицаЗамен.Колонки.Найти(ДополнительноеПоле) = Неопределено Тогда
				ТаблицаЗамен.Колонки.Добавить(ДополнительноеПоле);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаЗамен.Индексы.Добавить("ЭтоАналог, КлючСвязи");
		
		МассивПолей = СтрРазделить(ДополнительныеПоля, ",");
		МассивКлючей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаЗамен.ВыгрузитьКолонку("КлючСвязи"));
		
		Для каждого Ключ Из МассивКлючей Цикл
			
			СтруктураПолей = Новый Структура(ДополнительныеПоля);
			Для каждого Поле Из СтруктураПолей Цикл
				СтруктураПолей.Вставить(Поле.Ключ, Новый Массив);	
			КонецЦикла;	
			
			МассивНомеровСтрок = СтрРазделить(Ключ, ";", Ложь);
			Для каждого НомерСтроки Из МассивНомеровСтрок Цикл
				
				СтрокаТЧ = ТабличнаяЧасть[НомерСтроки - 1];
				Для каждого Поле Из СтруктураПолей Цикл
					ЗначениеКлюча = Поле.Значение;//Массив - 
					ЗначениеКлюча.Добавить(СтрокаТЧ[Поле.Ключ]);	
				КонецЦикла;	
				
			КонецЦикла;
			
			Для каждого Поле Из СтруктураПолей Цикл
				
				МассивЗначений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Поле.Значение);
				Если МассивЗначений.Количество() = 1 Тогда
					
					МассивСтрок = ТаблицаЗамен.НайтиСтроки(Новый Структура("ЭтоАналог, КлючСвязи", Истина, Ключ));
					Для каждого СтрокаТаблицы Из МассивСтрок Цикл
						СтрокаТаблицы[Поле.Ключ] = МассивЗначений[0];	
					КонецЦикла;	
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	ИндексыНовыхСтрок = Новый Массив;
	ИндексыИзмененныхСтрок = Новый Массив;
	КоличествоУдаленныхСтрок = 0;
	
	ТаблицаЗамен.Сортировать("НомерСтрокиИсходный");
	
	МассивСтрок = ТаблицаЗамен.НайтиСтроки(Новый Структура("ЭтоАналог", Ложь));
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		ИндексСтроки = СтрокаТаблицы.НомерСтрокиИсходный - 1 - КоличествоУдаленныхСтрок;
		
		СтрокаТЧ = ТабличнаяЧасть[ИндексСтроки];
		Если СтрокаТЧ.Количество = СтрокаТаблицы.Количество Тогда
			
			ТабличнаяЧасть.Удалить(СтрокаТЧ);
			
			ИндексМассива = ИндексыИзмененныхСтрок.Найти(ИндексСтроки);
			Если ИндексМассива <> Неопределено Тогда
				ИндексыИзмененныхСтрок.Удалить(ИндексМассива);	
			КонецЕсли;
			
			КоличествоУдаленныхСтрок = КоличествоУдаленныхСтрок + 1;
				
		Иначе
			
			СтрокаТЧ.Количество = СтрокаТЧ.Количество - СтрокаТаблицы.Количество;
			СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
			СтрокаТЧ.Упаковка = Неопределено;
			
			ИндексМассива = ИндексыИзмененныхСтрок.Найти(ИндексСтроки);
			Если ИндексМассива = Неопределено Тогда
				ИндексыИзмененныхСтрок.Добавить(ИндексСтроки);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	КолонкиГруппировок = "Номенклатура, Характеристика, Склад, ЭтоАналог%1";
	
	Если РезервироватьНаСкладе Тогда
		КолонкиГруппировок = СтрШаблон(КолонкиГруппировок, ", ВариантОбеспечения%1");
	КонецЕсли;
	
	Если ДополнительныеПоля <> Неопределено Тогда
		МассивПолейГруппировки = СтрРазделить(Лев(КолонкиГруппировок, СтрДлина(КолонкиГруппировок) - 2), ", ", Ложь);
		Для каждого ДополнительноеПоле Из МассивДополнительныхПолей Цикл
			Если МассивПолейГруппировки.Найти(ДополнительноеПоле) = Неопределено Тогда
				КолонкиГруппировок = СтрШаблон(КолонкиГруппировок, ", " + ДополнительноеПоле + "%1");	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	ТаблицаЗамен.Свернуть(СтрШаблон(КолонкиГруппировок, ""), "Количество");
	
	МассивСтрок = ТаблицаЗамен.НайтиСтроки(Новый Структура("ЭтоАналог", Истина));
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы);
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		
		ИндексыНовыхСтрок.Добавить(СтрокаТЧ.НомерСтроки - 1);
		
	КонецЦикла;
	
	Возврат Новый Структура("ИндексыНовыхСтрок, ИндексыИзмененныхСтрок", ИндексыНовыхСтрок, ИндексыИзмененныхСтрок);
	
КонецФункции	

// Заменяет материалы на аналоги с учетом приоритета и свободного остатка
//
// Параметры:
//  ТабличнаяЧасть          - ДанныеФормыКоллекция - табличная часть в которой требуется выполнить замену
//  ПараметрыВыбораАналогов - см. АналогиМатериалов.ПараметрыВыбораАналогов
//  ДополнительныеПоля      - Строка, Неопределено - поля таблицы, которые нужно заполнить в строках с заменяемыми аналогами, 
//                                                   на основании строк замененных материалов.
//  КодДействияАналоги            - Строка         - если передано, аналоги резервируются на складе с учетом свободного остатка,
//  											     для действия "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" значение реквизита "ВариантОбеспечения устанавливается в "СоСклада" (значение по умолчанию),
//  											     для действия "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ"     значение реквизита "ВариантОбеспечения устанавливается в "Отгрузить".
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//  * ИндексыНовыхСтрок      - Массив - содержит индексы новых строк (аналоги)
//  * ИндексыИзмененныхСтрок - Массив - содержит индексы измененных строк (материалы)
//
Функция ВыполнитьЗаменуНаАналогиАвтоматически(
			ТабличнаяЧасть, ПараметрыВыбораАналогов, ДополнительныеПоля = Неопределено, КодДействияАналоги = "") Экспорт
	
	СтруктураСтрок = Новый Структура("ИндексыНовыхСтрок, ИндексыИзмененныхСтрок", Новый Массив, Новый Массив);
	
	ТаблицаЗамен = ПолучитьТаблицуЗамены(ПараметрыВыбораАналогов,, КодДействияАналоги);
	Если ТаблицаЗамен = Неопределено Тогда
		Возврат СтруктураСтрок;
	КонецЕсли;
	
	РезервироватьНаСкладе = КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" Или КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ";
	
	КолонкиГруппировок = "Ссылка, НомерСтроки, Номенклатура, Характеристика, Склад, ЭтоАналог"
						 + ?(РезервироватьНаСкладе,", ВариантОбеспечения", "");
	
	ТаблицаЗамен.Свернуть(КолонкиГруппировок, "Количество");
	
	ЗначенияДополнительныхПолей = Новый Структура;
	
	Если ДополнительныеПоля <> Неопределено Тогда
		
		СтруктураПолей = Новый Структура(ДополнительныеПоля);
		Для каждого Поле Из СтруктураПолей Цикл
			СтруктураПолей.Вставить(Поле.Ключ, Новый Массив);	
		КонецЦикла;
		
		МассивНомеровСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаЗамен.ВыгрузитьКолонку("НомерСтроки"));
		МассивНомеровСтрок.Удалить(МассивНомеровСтрок.Найти(0));
		
		Для каждого НомерСтроки Из МассивНомеровСтрок Цикл
			
			СтрокаТЧ = ТабличнаяЧасть[НомерСтроки - 1];
			Для каждого Поле Из СтруктураПолей Цикл
				ЗначениеКлюча = Поле.Значение;//Массив - 
				ЗначениеКлюча.Добавить(СтрокаТЧ[Поле.Ключ]);
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Поле Из СтруктураПолей Цикл
			
			МассивЗначений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Поле.Значение);
			Если МассивЗначений.Количество() = 1 Тогда
				ЗначенияДополнительныхПолей.Вставить(Поле.Ключ, МассивЗначений[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТоварыНезаменяемоеКоличество                = Неопределено;
	ТоварыНезаменяемоеКоличествоАдресВХранилище = ПараметрыВыбораАналогов.ПараметрыТоваров.ТоварыНезаменяемоеКоличество;
	Если ЭтоАдресВременногоХранилища(ТоварыНезаменяемоеКоличествоАдресВХранилище) Тогда
		
		ТоварыНезаменяемоеКоличество =
			ПолучитьИзВременногоХранилища(ТоварыНезаменяемоеКоличествоАдресВХранилище);// ТаблицаЗначений
		
		Если ТоварыНезаменяемоеКоличество.Количество() > 0 Тогда
			ТоварыНезаменяемоеКоличество.Индексы.Добавить("НомерСтроки");
		Иначе
			ТоварыНезаменяемоеКоличество = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаЗамен.Сортировать("НомерСтроки Убыв");
	
	МассивСтрок = ТаблицаЗамен.НайтиСтроки(Новый Структура("ЭтоАналог", Ложь));
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		ИндексСтроки = СтрокаТаблицы.НомерСтроки - 1;
		СтрокаТЧ = ТабличнаяЧасть[ИндексСтроки];
		
		Если ТоварыНезаменяемоеКоличество <> Неопределено Тогда
			
			МассивСтрокНезаменяемоеКоличество =
				ТоварыНезаменяемоеКоличество.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТаблицы.НомерСтроки));
			
			Если МассивСтрокНезаменяемоеКоличество.Количество() > 0 Тогда
				СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + МассивСтрокНезаменяемоеКоличество[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.Количество = 0 Тогда
			
			ТабличнаяЧасть.Удалить(СтрокаТЧ);
			
			ИндексыИзмененныхСтрок = СтруктураСтрок.ИндексыИзмененныхСтрок;
			ИндексЭлемента         = ИндексыИзмененныхСтрок.ВГраница();
			Пока ИндексЭлемента > -1 Цикл
				ИндексыИзмененныхСтрок[ИндексЭлемента] = ИндексыИзмененныхСтрок[ИндексЭлемента] - 1;
				ИндексЭлемента = ИндексЭлемента - 1;
			КонецЦикла;
			
		Иначе
			
			СтрокаТЧ.Количество = СтрокаТаблицы.Количество;
			СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
			СтрокаТЧ.Упаковка = Неопределено;
			
			СтруктураСтрок.ИндексыИзмененныхСтрок.Добавить(ИндексСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтрок = ТаблицаЗамен.НайтиСтроки(Новый Структура("ЭтоАналог", Истина));
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы,, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЗначенияДополнительныхПолей);
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		
		СтруктураСтрок.ИндексыНовыхСтрок.Добавить(СтрокаТЧ.НомерСтроки - 1);
		
	КонецЦикла;
	
	Возврат СтруктураСтрок;
	
КонецФункции

// Получает таблицу замены для формирования этапов.
//
// Параметры:
//  Товары  - ТаблицаЗначений - таблица материалов с колонками:
//             * Идентификатор           - Число -
//             * Номенклатура            - СправочникСсылка.Номенклатура -
//             * Характеристика          - СправочникСсылка.ХарактеристикиНоменклатуры -
//             * Подразделение           - СправочникСсылка.СтруктураПредприятия -
//             * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности -
//             * ЗаказНаПроизводство     - ДокументСсылка.ЗаказНаПроизводство2_2 -
//             * Спецификация            - СправочникСсылка.РесурсныеСпецификации -
//             * КлючСвязиСпецификация   - УникальныйИдентификатор -
//             * Изделие                 - СправочникСсылка.Номенклатура -
//             * ХарактеристикаИзделия   - СправочникСсылка.ХарактеристикиНоменклатуры -
//             * Количество              - Число -
//  Резервы - ТаблицаЗначений, Неопределено - таблица резервов с колонками:
//             * Номенклатура - СправочникСсылка.Номенклатура -
//             * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//             * Склад - СправочникСсылка.Склады -
//             * Подразделение - СправочникСсылка.СтруктураПредприятия -
//             * Назначение - СправочникСсылка.Назначения -
//             * ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры -
//             * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения -
//             * ДатаОтгрузки - Дата -
//             * ДатаОтгрузкиРабот - Дата -
//             * Количество - Число -
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица замены.
//
Функция ПолучитьТаблицуЗаменыДляФормированияЭтапов(Товары, Резервы = Неопределено) Экспорт
	
	ТаблицаРезультатЗамен = Новый ТаблицаЗначений;
	ТаблицаРезультатЗамен.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	ТаблицаРезультатЗамен.Колонки.Добавить("НомерЗамены", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	ТаблицаРезультатЗамен.Колонки.Добавить("Разрешение", Новый ОписаниеТипов("ДокументСсылка.РазрешениеНаЗаменуМатериалов"));
	ТаблицаРезультатЗамен.Колонки.Добавить("КоличествоЗамены", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаРезультатЗамен.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультатЗамен.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРезультатЗамен.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаРезультатЗамен.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Если Товары.Количество() = 0 Тогда
		Возврат ТаблицаРезультатЗамен;
	КонецЕсли;
	
	ТипИдентификатора = ОбщегоНазначения.ОписаниеТипаЧисло(15, 0);
	
	ПараметрыВыбораАналогов = АналогиМатериалов.ПараметрыВыбораАналогов(ТипИдентификатора);
	
	СтруктураПолей = СтруктураПолейТаблицыДляЗаменыНаАналоги();
	СтруктураПолей.ОсновныеПоля = "Ссылка, " + Символы.ПС + СтруктураПолей.ОсновныеПоля;
	
	ТаблицаДанных = Товары.Скопировать();
	ТаблицаДанных.Колонки.Добавить("Ссылка", ТипИдентификатора);
	ТаблицаДанных.Колонки.Добавить("НомерСтроки", ТипИдентификатора);
	ТаблицаДанных.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаДанных.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.Ссылка = СтрокаТаблицы.Идентификатор;
		СтрокаТаблицы.НомерСтроки = СтрокаТаблицы.Идентификатор + 1;
	КонецЦикла;	
	
	ИмяОбъекта = "Объект";
	ИмяТаблицы = "Товары";

	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	ДанныеФормы.Вставить(ИмяОбъекта, Новый Структура);
	ДанныеФормы[ИмяОбъекта].Вставить(ИмяТаблицы, ТаблицаДанных);
	
	ТоварыАдресВХранилище = ПроизводствоСервер.ПоместитьВоВременноеХранилищеДанныеСтрок(
								ДанныеФормы, ИмяОбъекта, ИмяТаблицы, Ложь, СтруктураПолей);
	
	ДанныеТоваров = Новый Структура;
	ДанныеТоваров.Вставить("Товары", ТоварыАдресВХранилище);
	
	Если Резервы <> Неопределено И Резервы.Количество() > 0 Тогда
		
		ДанныеТоваров.Вставить(
			"Резервы", 
			ПоместитьВоВременноеХранилище(Резервы.Скопировать(Новый Структура("Назначение", Справочники.Назначения.ПустаяСсылка()))));
			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыВыбораАналогов.ПараметрыТоваров, ДанныеТоваров);
	ЗаполнитьЗначенияСвойств(ПараметрыВыбораАналогов.ПараметрыАналогов, ДанныеТоваров);
	
	ДатаДействияРазрешений = НачалоДня(ТекущаяДатаСеанса());
	ТаблицаПараметров = ПараметрыВыбораАналогов.ПараметрыАналогов.ТаблицаПараметров;
	Для каждого СтрокаТовары Из Товары Цикл
		СтрокаТаблицы = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовары);
		СтрокаТаблицы.ДатаДействияРазрешений = ДатаДействияРазрешений;
		СтрокаТаблицы.Ссылка = СтрокаТовары.Идентификатор;
	КонецЦикла;	
	
	ПараметрыВыбораАналогов.ПараметрыАналогов.ТаблицаПараметров = ПоместитьВоВременноеХранилище(ТаблицаПараметров);
	
	ТаблицаЗамен = ПолучитьТаблицуЗамены(ПараметрыВыбораАналогов, Ложь, "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ");
	Если ТаблицаЗамен = Неопределено Тогда
		Возврат ТаблицаРезультатЗамен;
	КонецЕсли;
	
	ТаблицаЗамен.Индексы.Добавить("ЭтоАналог");
	МассивСтрок = ТаблицаЗамен.НайтиСтроки(Новый Структура("ЭтоАналог", Истина));
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		НомерЗамены = 0;
		КоличествоЗамены = 0;
		
		Для каждого ЭлементСтрокаКоличество Из СтрокаТаблицы.ЗамененноеКоличествоПострочно Цикл
			НомерЗамены = ЭлементСтрокаКоличество.Ключ - 1;
			КоличествоЗамены = ЭлементСтрокаКоличество.Значение;
			Прервать;
		КонецЦикла;	
		
		СтрокаРезультат = ТаблицаРезультатЗамен.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТаблицы);
		СтрокаРезультат.Идентификатор = СтрокаТаблицы.Ссылка;
		СтрокаРезультат.НомерЗамены = НомерЗамены;
		СтрокаРезультат.КоличествоЗамены = КоличествоЗамены;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатЗамен;
		
КонецФункции

// Получает таблицу замены
//
// Параметры:
//	ПараметрыВыбораАналогов 	   - см. АналогиМатериалов.ПараметрыВыбораАналогов 
//  УчестьРазрешенияМногиеКоМногим - Булево    - Истина: разрешения многие ко многим учитываются
//												 Ложь: разрешения многие ко многим игнорируются.
//  КодДействияАналоги             - Строка    - если передано, аналоги резервируются на складе с учетом свободного остатка,
//  											 для действия "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" значение реквизита "ВариантОбеспечения устанавливается в "СоСклада" (значение по умолчанию),
//  											 для действия "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ"     значение реквизита "ВариантОбеспечения устанавливается в "Отгрузить".
// 
// Возвращаемое значение:
//  - Неопределено    - возможность замены отсутствует.
//  - ТаблицаЗначений - таблица замены с колонками:
//    * НомерСтроки                   - Число - номер строки.
//    * Ссылка                        - ДокументСсылка - документ источник.
//    * Номенклатура                  - СправочникСсылка.Номенклатура - номенклатура.
//    * Характеристика                - СправочникСсылка.ХарактеристикиНоменклатуры - характеристирк номенклатуры.
//    * Количество                    - Число - количество.
//    * Склад                         - СправочникСсылка.Склады - склад.
//    * Разрешение                    - ДокументСсылка.РазрешениеНаЗаменуМатериалов, ДокументСсылка.КорректировкаРегистров - разрешение.
//    * ЗамененноеКоличествоПострочно - Соответствие - Ключ: номер строки материала,
//                                                     Значение: замененное количество.
//    * ЭтоАналог                     - Булево - признак аналога.
//    * ВариантОбеспечения            - ПеречислениеСсылка.ВариантыОбеспечения - при резервирование на складе.
//
Функция ПолучитьТаблицуЗамены(
			ПараметрыВыбораАналогов, УчестьРазрешенияМногиеКоМногим = Истина, КодДействияАналоги = "") Экспорт
			
	ПараметрыТоваров = ПараметрыВыбораАналогов.ПараметрыТоваров;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ПараметрыТоваров.Товары);
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаЗапасов = ?(ЭтоАдресВременногоХранилища(ПараметрыТоваров.РаспределениеЗапасов), 
							ПолучитьИзВременногоХранилища(ПараметрыТоваров.РаспределениеЗапасов), 
							Неопределено);	
	
	ПараметрыАналогов = ПараметрыВыбораАналогов.ПараметрыАналогов;
	
	ТаблицаПараметров = ПолучитьИзВременногоХранилища(ПараметрыАналогов.ТаблицаПараметров);
	
	ТаблицаРезервов = ?(ЭтоАдресВременногоХранилища(ПараметрыАналогов.Резервы),
							ПолучитьИзВременногоХранилища(ПараметрыАналогов.Резервы), 
							Неопределено);
	
	ПолучитьСкладИзОбеспечение = ПараметрыАналогов.Склад = Неопределено;
	РезервироватьНаСкладе = КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" Или КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ";
	
	ПараметрыОтборовОстатки = Новый Структура;
	ПараметрыОтборовОстатки.Вставить("ПрименитьТаблицуЗапасов", ТаблицаЗапасов <> Неопределено);
	ПараметрыОтборовОстатки.Вставить("ПрименитьТаблицуРезервов", ТаблицаРезервов <> Неопределено);
	
	ПараметрыОтборовРазрешения = Новый Структура("УчестьМногиеКоМногим", УчестьРазрешенияМногиеКоМногим);
	ПараметрыОтборовРазрешенияПоПриоритетам = Новый Структура("УчестьМногиеКоМногим", УчестьРазрешенияМногиеКоМногим);
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(ТекстЗапросаТовары());
	МассивТекстов.Добавить(ТекстЗапросаТаблицаМатериалов(Истина));
	МассивТекстов.Добавить(ТекстЗапросаДоступныеРазрешенияМногиеКоМногим(ПараметрыОтборовРазрешения));
	МассивТекстов.Добавить(ТекстЗапросаТаблицаАналогов(ПолучитьСкладИзОбеспечение));
	МассивТекстов.Добавить(ТекстЗапросаТаблицаОстатков(ПараметрыОтборовОстатки));
	МассивТекстов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(СтрРазделить("ТаблицаМатериалов,ТаблицаАналогов",",")));
	МассивТекстов.Добавить(ТекстЗапросаРазрешенияПоПриоритетам(ПараметрыОтборовРазрешенияПоПриоритетам));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	Если ТаблицаЗапасов <> Неопределено Тогда
		
		Запрос.УстановитьПараметр(
			"Запасы", ТаблицаЗапасов.Скопировать(Новый Структура("Состояние, Назначение, Обособленно",
															Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе,
															Справочники.Назначения.ПустаяСсылка(),
															Ложь)));
					
	КонецЕсли;			
		
	Если ТаблицаРезервов <> Неопределено Тогда
		Запрос.УстановитьПараметр("Резервы", ТаблицаРезервов);
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("ТаблицаПараметров", ТаблицаПараметров);
	
	Запрос.УстановитьПараметр(
		?(ПолучитьСкладИзОбеспечение, "СкладПоУмолчанию", "Склад"), 
		?(ПолучитьСкладИзОбеспечение, Справочники.Склады.СкладПоУмолчанию(), ПараметрыАналогов.Склад));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	ТаблицаМатериаловРазрешений = МассивРезультатов[МассивРезультатов.ВГраница() - 2].Выгрузить();
	Если ТаблицаМатериаловРазрешений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаМатериаловРазрешений.Индексы.Добавить("Разрешение, Ссылка");
	ТаблицаМатериаловРазрешений.Индексы.Добавить("Разрешение, КонтролироватьКратность");
	
	ТаблицаАналоговРазрешений = МассивРезультатов[МассивРезультатов.ВГраница() - 1].Выгрузить();
	ТаблицаАналоговРазрешений.Индексы.Добавить("Разрешение, Ссылка");
	ТаблицаАналоговРазрешений.Индексы.Добавить("ОстатокНаСкладе");
	
	ТаблицаРазрешенийПоПриоритетам = МассивРезультатов[МассивРезультатов.ВГраница()].Выгрузить(); // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
	ТаблицаРазрешенийПоПриоритетам.Индексы.Добавить("Разрешение, Ссылка");
	ТаблицаРазрешенийПоПриоритетам.Индексы.Добавить("НомерСтроки");
	
	ТаблицаДанныеУпаковок = МассивРезультатов[МассивРезультатов.ВГраница() - 3].Выгрузить();
	УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ТаблицаМатериаловРазрешений, ТаблицаДанныеУпаковок);
	УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ТаблицаАналоговРазрешений, ТаблицаДанныеУпаковок);
	
	ТаблицаТоваровПоРазрешению = ТаблицаТоваров.СкопироватьКолонки("Номенклатура, Характеристика, Количество"); // ТаблицаЗначений - 
	ТаблицаТоваровПоРазрешению.Колонки.Добавить("НомераСтрок", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваровПоРазрешению.Индексы.Добавить("Номенклатура, Характеристика");
	
	ТаблицаЗамен = ТаблицаТоваров.СкопироватьКолонки("НомерСтроки, Ссылка, Номенклатура, Характеристика, Количество, Склад"); // ТаблицаЗначений - 
	ТаблицаЗамен.Колонки.Добавить("Разрешение", Новый ОписаниеТипов("ДокументСсылка.РазрешениеНаЗаменуМатериалов"));
	ТаблицаЗамен.Колонки.Добавить("ЗамененноеКоличествоПострочно", Новый ОписаниеТипов("Соответствие"));
	ТаблицаЗамен.Колонки.Добавить("ЭтоАналог", Новый ОписаниеТипов("Булево"));
	
	Если РезервироватьНаСкладе Тогда
		ТаблицаЗамен.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	КонецЕсли;
	
	ТаблицаЗамен.Индексы.Добавить("НомерСтроки");
	
	ОтборПоРазрешению = Новый Структура("Разрешение, Ссылка");
	ОтборПоКратности = Новый Структура("Разрешение, КонтролироватьКратность", Неопределено, Истина);
	ОтборПоНоменклатуре = Новый Структура("Номенклатура, Характеристика");
			
	Пока ТаблицаРазрешенийПоПриоритетам.Количество() > 0 Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПоКратности, ТаблицаРазрешенийПоПриоритетам[0], "Разрешение");
		КонтролироватьКратность = ТаблицаМатериаловРазрешений.НайтиСтроки(ОтборПоКратности).Количество() > 0;
		
		ЗаполнитьЗначенияСвойств(ОтборПоРазрешению, ТаблицаРазрешенийПоПриоритетам[0]);
		
		ТаблицаТоваровПоРазрешению.Очистить();
		
		МассивСтрокРазрешения = ТаблицаРазрешенийПоПриоритетам.НайтиСтроки(ОтборПоРазрешению);
		Для каждого СтрокаТаблицы Из МассивСтрокРазрешения Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборПоНоменклатуре, СтрокаТаблицы);
			
			МассивСтрокТовары = ТаблицаТоваровПоРазрешению.НайтиСтроки(ОтборПоНоменклатуре);
			Если МассивСтрокТовары.Количество() > 0 Тогда
				СтрокаТовары = МассивСтрокТовары[0];
			Иначе
				СтрокаТовары = ТаблицаТоваровПоРазрешению.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ОтборПоНоменклатуре);
				СтрокаТовары.Количество = 0;
			КонецЕсли;
			
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.Количество;

			МассивНомеровСтрок = СтрокаТовары.НомераСтрок; // Массив - 
			МассивНомеровСтрок.Добавить(СтрокаТаблицы.НомерСтроки);
			
		КонецЦикла;
			
		МассивКоэффициентов = Новый Массив;
		
		МассивСтрокМатериалы = ТаблицаМатериаловРазрешений.НайтиСтроки(ОтборПоРазрешению);
		Для каждого СтрокаТаблицы Из МассивСтрокМатериалы Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборПоНоменклатуре, СтрокаТаблицы);
			
			МассивСтрокТоваровПоРазрешению = ТаблицаТоваровПоРазрешению.НайтиСтроки(ОтборПоНоменклатуре);
			
			КоэффициентРасчета = ?(МассивСтрокТоваровПоРазрешению.Количество() = 0,
										0, ПроизводствоКлиентСервер.КоэффициентПоНормативу(
																		КонтролироватьКратность, 
																		МассивСтрокТоваровПоРазрешению[0].Количество,
																		СтрокаТаблицы.Норматив,
																		СтрокаТаблицы.ДанныеУпаковки));
			
			КоэффициентВыбран = МассивКоэффициентов.Количество() > 0;
			
			Если Не КоэффициентВыбран 
			 Или КоэффициентВыбран И МассивКоэффициентов[0] > КоэффициентРасчета Тогда
				МассивКоэффициентов.Вставить(0, КоэффициентРасчета);
			КонецЕсли;
			
		КонецЦикла;
		
		МассивСтрокАналоги = ТаблицаАналоговРазрешений.НайтиСтроки(ОтборПоРазрешению);
		Для каждого СтрокаТаблицы Из МассивСтрокАналоги Цикл
			
			КоэффициентРасчета	= ПроизводствоКлиентСервер.КоэффициентПоНормативу(
																КонтролироватьКратность, 
																СтрокаТаблицы.ОстатокНаСкладе, 
																СтрокаТаблицы.Норматив,
																СтрокаТаблицы.ДанныеУпаковки);
			
			Если МассивКоэффициентов[0] > КоэффициентРасчета Тогда
				МассивКоэффициентов.Вставить(0, КоэффициентРасчета);
			КонецЕсли;
			
		КонецЦикла;
		
		КоэффициентРасчета = МассивКоэффициентов[0];
		
		Если КоэффициентРасчета > 0 Тогда
			
			ЗамененноеКоличествоПострочно = Новый Соответствие;// Ключ: номер строки материала; Значение: замененное количество
		
			Для каждого СтрокаТаблицы Из МассивСтрокМатериалы Цикл
				
				КоличествоКРаспределению = КоэффициентРасчета * СтрокаТаблицы.Норматив
					* СтрокаТаблицы.ДанныеУпаковки.Числитель / СтрокаТаблицы.ДанныеУпаковки.Знаменатель;
				
				ЗаполнитьЗначенияСвойств(ОтборПоНоменклатуре, СтрокаТаблицы);
				МассивНомеровСтрок = ТаблицаТоваровПоРазрешению.НайтиСтроки(ОтборПоНоменклатуре)[0].НомераСтрок;
				Для каждого НомерСтроки Из МассивНомеровСтрок Цикл
					
					ОтборПоНомеру = Новый Структура("НомерСтроки", НомерСтроки);
					
					МассивСтрокПоНомеру = ТаблицаРазрешенийПоПриоритетам.НайтиСтроки(ОтборПоНомеру);
					
					КоличествоМатериала = Мин(МассивСтрокПоНомеру[0].Количество, КоличествоКРаспределению);
					
					Если КоличествоМатериала > 0 Тогда
						ЗамененноеКоличествоПострочно.Вставить(НомерСтроки, КоличествоМатериала);
					КонецЕсли;
					
					Для каждого СтрокаПоПриоритетам Из МассивСтрокПоНомеру Цикл
						СтрокаПоПриоритетам.Количество = СтрокаПоПриоритетам.Количество - КоличествоМатериала;
					КонецЦикла;
					
					МассивСтрокТаблицыЗамен = ТаблицаЗамен.НайтиСтроки(ОтборПоНомеру);
					СтрокаТаблицыЗамен = 
						?(МассивСтрокТаблицыЗамен.Количество() > 0, МассивСтрокТаблицыЗамен[0], ТаблицаЗамен.Добавить()); 
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗамен, СтрокаПоПриоритетам,, "Разрешение");
						
					Если СтрокаПоПриоритетам.Количество = 0 Тогда
						ИндексСтроки = МассивСтрокПоНомеру.ВГраница();
						Пока ИндексСтроки > -1 Цикл
							ТаблицаРазрешенийПоПриоритетам.Удалить(МассивСтрокПоНомеру[ИндексСтроки]);
							ИндексСтроки = ИндексСтроки - 1;
						КонецЦикла;
					КонецЕсли;
					
					КоличествоКРаспределению = КоличествоКРаспределению - КоличествоМатериала;
					Если КоличествоКРаспределению = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			УдалитьРазрешенияПоАналогам = Ложь;
			Для каждого СтрокаТаблицы Из МассивСтрокАналоги Цикл
				
				КоличествоАналога = КоэффициентРасчета * СтрокаТаблицы.Норматив
					* СтрокаТаблицы.ДанныеУпаковки.Числитель / СтрокаТаблицы.ДанныеУпаковки.Знаменатель;
				
				ОтборПоСкладу = Новый Структура("Склад, Номенклатура, Характеристика");
				ЗаполнитьЗначенияСвойств(ОтборПоСкладу, СтрокаТаблицы);
				
				МассивСтрок = ТаблицаАналоговРазрешений.НайтиСтроки(ОтборПоСкладу);
				Для каждого СтрокаТаблицыАналогов Из МассивСтрок Цикл
					СтрокаТаблицыАналогов.ОстатокНаСкладе = СтрокаТаблицыАналогов.ОстатокНаСкладе - КоличествоАналога;	
				КонецЦикла;
				
				СтрокаТаблицыЗамен = ТаблицаЗамен.Добавить(); 
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗамен, СтрокаТаблицы);
				СтрокаТаблицыЗамен.Количество = КоличествоАналога;
				СтрокаТаблицыЗамен.ЗамененноеКоличествоПострочно = ЗамененноеКоличествоПострочно;
				СтрокаТаблицыЗамен.ЭтоАналог = Истина;
				
				Если КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ" Тогда
					СтрокаТаблицыЗамен.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				ИначеЕсли КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_ОТГРУЗИТЬ" Тогда
					СтрокаТаблицыЗамен.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				КонецЕсли;
				
				Если СтрокаТаблицыАналогов.ОстатокНаСкладе = 0 Тогда
					УдалитьРазрешенияПоАналогам = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Пока УдалитьРазрешенияПоАналогам Цикл
				
				МассивСтрок = ТаблицаАналоговРазрешений.НайтиСтроки(Новый Структура("ОстатокНаСкладе", 0));
				Если МассивСтрок.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОтборПоРазрешению, МассивСтрок[0]);
				
				МассивУдаляемыхСтрок = ТаблицаАналоговРазрешений.НайтиСтроки(ОтборПоРазрешению);
				ИндексСтроки = МассивУдаляемыхСтрок.ВГраница();
				Пока ИндексСтроки > -1 Цикл
					ТаблицаАналоговРазрешений.Удалить(МассивУдаляемыхСтрок[ИндексСтроки]);
					ИндексСтроки = ИндексСтроки - 1;
				КонецЦикла;
				
				МассивУдаляемыхСтрок = ТаблицаРазрешенийПоПриоритетам.НайтиСтроки(ОтборПоРазрешению);
				ИндексСтроки = МассивУдаляемыхСтрок.ВГраница();
				Пока ИндексСтроки > -1 Цикл
					ТаблицаРазрешенийПоПриоритетам.Удалить(МассивУдаляемыхСтрок[ИндексСтроки]);
					ИндексСтроки = ИндексСтроки - 1;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		МассивУдаляемыхСтрок = ТаблицаРазрешенийПоПриоритетам.НайтиСтроки(ОтборПоРазрешению);
		ИндексСтроки = МассивУдаляемыхСтрок.ВГраница();
		Пока ИндексСтроки > -1 Цикл
			ТаблицаРазрешенийПоПриоритетам.Удалить(МассивУдаляемыхСтрок[ИндексСтроки]);
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ?(ТаблицаЗамен.Количество() = 0, Неопределено, ТаблицаЗамен);
	
КонецФункции	

#КонецОбласти

#Область НаличиеАналогов

// Заполняет признак наличия аналогов
//
// Параметры:
//  Таблица                 - ДанныеФормыКоллекция, ТаблицаЗначений - список в котором нужно заполнить признак "ЕстьАналогиМатериала", содержит:
//                             * НомерСтроки          - Число -
//                             * ЕстьАналогиМатериала - Булево -
//	ПараметрыВыбораАналогов - см. АналогиМатериалов.ПараметрыВыбораАналогов
//
Процедура ОтметитьНаличиеАналогов(Таблица, ПараметрыВыбораАналогов) Экспорт
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ПараметрыВыбораАналогов.ПараметрыТоваров.Товары);
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАналогов = ПараметрыВыбораАналогов.ПараметрыАналогов;
	
	ТаблицаПараметров = ПолучитьИзВременногоХранилища(ПараметрыАналогов.ТаблицаПараметров);
	
	ПараметрыОтборовРазрешения = Новый Структура("УчестьМногиеКоМногим", Истина);
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(ТекстЗапросаТовары());
	МассивТекстов.Добавить(ТекстЗапросаТаблицаМатериалов());
	МассивТекстов.Добавить(ТекстЗапросаДоступныеРазрешенияМногиеКоМногим(ПараметрыОтборовРазрешения));
	МассивТекстов.Добавить(ТекстЗапросаНаличиеАналогов());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаПараметров", ТаблицаПараметров);
	
	ТаблицаНаличиеАналогов = Запрос.Выполнить().Выгрузить();
	ТаблицаНаличиеАналогов.Индексы.Добавить("НомерСтроки");
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.ЕстьАналогиМатериала = 
			ТаблицаНаличиеАналогов.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТаблицы.НомерСтроки)).Количество() > 0;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

// Возвращает текст запроса временной таблицы "Товары"
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТовары() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоВсего КАК КоличествоВсего,
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Обособленно КАК Обособленно,
	|	Товары.Склад КАК Склад
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса со временными таблицами определяющими таблицу материалов из доступных разрешений 
//
// Параметры:
//  РассчитатьПриоритетПрименения - Булево - Истина: рассчитывается приоритет применения
//                                           Ложь: приоритет применения не рассчитывается.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТаблицаМатериалов(РассчитатьПриоритетПрименения = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПараметров.Ссылка КАК Ссылка,
	|	ТаблицаПараметров.ДатаДействияРазрешений КАК ДатаДействияРазрешений,
	|	ТаблицаПараметров.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПараметров.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаПараметров.Спецификация КАК Спецификация,
	|	ТаблицаПараметров.Этап КАК Этап,
	|	ТаблицаПараметров.Изделие КАК Изделие,
	|	ТаблицаПараметров.ХарактеристикаИзделия КАК ХарактеристикаИзделия,
	|	ТаблицаПараметров.Подразделение КАК Подразделение,
	|	ТаблицаПараметров.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	&ТаблицаПараметров КАК ТаблицаПараметров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаДействияРазрешений,
	|	ЗаказНаПроизводство,
	|	ЗаказКлиента,
	|	Спецификация,
	|	Этап,
	|	Изделие,
	|	ХарактеристикаИзделия,
	|	Подразделение,
	|	НаправлениеДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиМатериалов.Ссылка КАК Ссылка,
	|	АналогиМатериалов.Период КАК Период,
	|	АналогиМатериалов.Разрешение КАК Разрешение,
	|	АналогиМатериалов.Номенклатура КАК Номенклатура,
	|	АналогиМатериалов.Характеристика КАК Характеристика,
	|	СУММА(АналогиМатериалов.КоличествоУпаковокМатериала) КАК КоличествоУпаковок,
	|	АналогиМатериалов.УпаковкаМатериала КАК Упаковка,
	|	АналогиМатериалов.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ АналогиМатериалов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаПараметров.Ссылка КАК Ссылка,
	|		АналогиМатериалов.Период КАК Период,
	|		АналогиМатериалов.Регистратор КАК Разрешение,
	|		АналогиМатериалов.Материал КАК Номенклатура,
	|		АналогиМатериалов.ХарактеристикаМатериала КАК Характеристика,
	|		АналогиМатериалов.КоличествоУпаковокМатериала КАК КоличествоУпаковокМатериала,
	|		АналогиМатериалов.УпаковкаМатериала КАК УпаковкаМатериала,
	|		АналогиМатериалов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		&Приоритет КАК Приоритет
	|	ИЗ
	|		РегистрСведений.АналогиМатериалов КАК АналогиМатериалов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
	|			ПО АналогиМатериалов.Период <= ТаблицаПараметров.ДатаДействияРазрешений
	|				И (АналогиМатериалов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ АналогиМатериалов.ПериодЗавершения >= ТаблицаПараметров.ДатаДействияРазрешений)
	|				И ((ТаблицаПараметров.Ссылка, АналогиМатериалов.Материал, АналогиМатериалов.ХарактеристикаМатериала) В
	|					(ВЫБРАТЬ
	|						Товары.Ссылка КАК Ссылка,
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.Характеристика КАК Характеристика
	|					ИЗ
	|						Товары КАК Товары))
	|				И (АналогиМатериалов.ЗаказНаПроизводство В (ТаблицаПараметров.ЗаказНаПроизводство,
	|															ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка),
	//++ Устарело_Производство21
	|															ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
	//-- Устарело_Производство21
	|															НЕОПРЕДЕЛЕНО))
	|				И (АналогиМатериалов.ЗаказКлиента В (ТаблицаПараметров.ЗаказКлиента, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)))
	|				И (АналогиМатериалов.Спецификация В (ТаблицаПараметров.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)))
	|				И (АналогиМатериалов.Этап В (ТаблицаПараметров.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)))
	|				И (АналогиМатериалов.Изделие = ТаблицаПараметров.Изделие
	|						И АналогиМатериалов.ХарактеристикаИзделия В (
	|												ТаблицаПараметров.ХарактеристикаИзделия,
	|												ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|					ИЛИ АналогиМатериалов.Изделие = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						И АналогиМатериалов.ХарактеристикаИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|				И (АналогиМатериалов.Подразделение В (ТаблицаПараметров.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))
	|				И (АналогиМатериалов.НаправлениеДеятельности В (ТаблицаПараметров.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)))
	|	ГДЕ
	|		ТаблицаПараметров.Ссылка ЕСТЬ НЕ NULL ) КАК АналогиМатериалов
	|
	|СГРУППИРОВАТЬ ПО
	|	АналогиМатериалов.Характеристика,
	|	АналогиМатериалов.Номенклатура,
	|	АналогиМатериалов.УпаковкаМатериала,
	|	АналогиМатериалов.Период,
	|	АналогиМатериалов.Приоритет,
	|	АналогиМатериалов.Разрешение,
	|	АналогиМатериалов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Разрешение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.Ссылка КАК Разрешение
	|ПОМЕСТИТЬ ИсключаемыеРазрешения
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК Материалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналогиМатериалов КАК АналогиМатериалов
	|		ПО Материалы.Ссылка = АналогиМатериалов.Разрешение
	|			И Материалы.Номенклатура = АналогиМатериалов.Номенклатура
	|			И Материалы.Характеристика = АналогиМатериалов.Характеристика
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				АналогиМатериалов КАК АналогиМатериалов
	|			ГДЕ
	|				АналогиМатериалов.Разрешение = Материалы.Ссылка)
	|	И АналогиМатериалов.Разрешение ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Разрешение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиМатериалов.Ссылка КАК Ссылка,
	|	АналогиМатериалов.Период КАК Период,
	|	АналогиМатериалов.Разрешение КАК Разрешение,
	|	АналогиМатериалов.Номенклатура КАК Номенклатура,
	|	АналогиМатериалов.Характеристика КАК Характеристика,
	|	АналогиМатериалов.КоличествоУпаковок КАК КоличествоУпаковок,
	|	АналогиМатериалов.Упаковка КАК Упаковка,
	|	АналогиМатериалов.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаМатериалов
	|ИЗ
	|	АналогиМатериалов КАК АналогиМатериалов
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ИсключаемыеРазрешения КАК ИсключаемыеРазрешения
	|				ГДЕ
	|					ИсключаемыеРазрешения.Разрешение = АналогиМатериалов.Разрешение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Разрешение,
	|	Ссылка,
	|	Номенклатура,
	|	Характеристика";
	
	ТекстЗапросаПолеПриоритет = ?(РассчитатьПриоритетПрименения, 
	"ВЫБОР
	|		КОГДА АналогиМатериалов.ЗаказНаПроизводство В (ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка),
	//++ Устарело_Производство21
	|															ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
	//-- Устарело_Производство21
	|															НЕОПРЕДЕЛЕНО)
	|			ТОГДА 0
	|		ИНАЧЕ 10000000
	|	КОНЕЦ + ВЫБОР
	|		КОГДА АналогиМатериалов.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1000000
	|	КОНЕЦ + ВЫБОР
	|		КОГДА АналогиМатериалов.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 100000
	|	КОНЕЦ + ВЫБОР
	|		КОГДА АналогиМатериалов.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 10000
	|	КОНЕЦ + ВЫБОР
	|		КОГДА АналогиМатериалов.ХарактеристикаИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА АналогиМатериалов.Изделие = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						ТОГДА 0
	|					ИНАЧЕ 100
	|				  КОНЕЦ
	|		ИНАЧЕ 1000
	|	КОНЕЦ + ВЫБОР
	|		КОГДА АналогиМатериалов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 10
	|	КОНЕЦ + ВЫБОР
	|		КОГДА АналогиМатериалов.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ", "1");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Приоритет", ТекстЗапросаПолеПриоритет);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса со временными таблицами определяющими таблицу аналогов из доступных разрешений
//
// Параметры:
//  ПолучитьСкладИзОбеспечение - Булево - Истина: Склад определяется из схемы обеспечения
//                                        Ложь: Склад передается как параметр.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТаблицаАналогов(ПолучитьСкладИзОбеспечение = Истина) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМатериалов.Ссылка КАК Ссылка,
	|	ТаблицаМатериалов.Разрешение КАК Разрешение,
	|	ТаблицаАналогов.Номенклатура КАК Номенклатура,
	|	ТаблицаАналогов.Характеристика КАК Характеристика,
	|	ТаблицаАналогов.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаАналогов.Упаковка КАК Упаковка,
	|	ТаблицаПараметров.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ТаблицаАналоговСИсточниками
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазрешениеНаЗаменуМатериалов.Аналоги КАК ТаблицаАналогов
	|		ПО ТаблицаМатериалов.Разрешение = ТаблицаАналогов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
	|		ПО ТаблицаМатериалов.Ссылка = ТаблицаПараметров.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАналогов.Ссылка КАК Ссылка,
	|	ТаблицаАналогов.Разрешение КАК Разрешение,
	|	ТаблицаАналогов.Номенклатура КАК Номенклатура,
	|	ТаблицаАналогов.Характеристика КАК Характеристика,
	|	ТаблицаАналогов.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаАналогов.Упаковка КАК Упаковка,
	|	&Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаАналогов
	|ИЗ
	|	ТаблицаАналоговСИсточниками КАК ТаблицаАналогов";
	
	Если ПолучитьСкладИзОбеспечение Тогда
		
		СтруктураТекстовЗапроса = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
			"ТаблицаАналогов", 
			"Подразделение", 
			ОбеспечениеПроизводства.ВариантЗаполненияОбеспеченияПоВерсииПроизводства(Истина));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Склад", СтруктураТекстовЗапроса.ТекстПолеСклад);
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		ТекстыЗапросов.Добавить(СтруктураТекстовЗапроса.ТекстСоединения);
	
		ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС);
		
	КонецЕсли;
	
	ТекстИндексировать =
	"
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	ТекстыЗапросов.Добавить(ТекстИндексировать);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса со временными таблицами определяющими возможные и доступные разрешения многие ко многим
//
// Параметры:
//  ПараметрыОтборов - Структура, Неопределено - содержит:
//                      * УчестьМногиеКоМногим - Булево - определяет необходимость получения доступных разрешений многие ко многим
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДоступныеРазрешенияМногиеКоМногим(ПараметрыОтборов = Неопределено) Экспорт 
	
	УчестьМногиеКоМногим = ПараметрыОтборов <> Неопределено 
						   И ПараметрыОтборов.Свойство("УчестьМногиеКоМногим") 
						   И ПараметрыОтборов.УчестьМногиеКоМногим;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаМатериалов.Разрешение КАК Разрешение
	|ПОМЕСТИТЬ РазрешенияМногиеКоМногим
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМатериалов.Разрешение
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаМатериалов.Номенклатура) + КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаМатериалов.Характеристика) > 2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Разрешение";
	
	Если УчестьМногиеКоМногим Тогда
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РазрешенияМногиеКоМногим.Разрешение КАК Разрешение,
		|	ТаблицаМатериалов.Номенклатура      КАК Номенклатура,
		|	ТаблицаМатериалов.Характеристика    КАК Характеристика
		|ПОМЕСТИТЬ РазрешенияМногиеКоМногимМатериалы
		|ИЗ
		|	РазрешенияМногиеКоМногим КАК РазрешенияМногиеКоМногим
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМатериалов КАК ТаблицаМатериалов
		|		ПО РазрешенияМногиеКоМногим.Разрешение = ТаблицаМатериалов.Разрешение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазрешенияМногиеКоМногимМатериалы.Разрешение КАК Разрешение,
		|	СУММА(1) КАК КоличествоРазныхСтрок
		|ПОМЕСТИТЬ РазрешенияМногиеКоМногимКоличествоРазныхСтрок
		|ИЗ
		|	РазрешенияМногиеКоМногимМатериалы КАК РазрешенияМногиеКоМногимМатериалы
		|
		|СГРУППИРОВАТЬ ПО
		|	РазрешенияМногиеКоМногимМатериалы.Разрешение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Разрешение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеРазрешенияМногиеКоМногим.Ссылка КАК Ссылка,
		|	ДоступныеРазрешенияМногиеКоМногим.Разрешение КАК Разрешение
		|ПОМЕСТИТЬ ДоступныеРазрешенияМногиеКоМногим
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Товары.Ссылка КАК Ссылка,
		|		Товары.Номенклатура КАК Номенклатура,
		|		Товары.Характеристика КАК Характеристика,
		|		РазрешенияМногиеКоМногимМатериалы.Разрешение КАК Разрешение,
		|		РазрешенияМногиеКоМногимКоличествоРазныхСтрок.КоличествоРазныхСтрок КАК КоличествоРазныхСтрок
		|	ИЗ
		|		Товары КАК Товары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РазрешенияМногиеКоМногимМатериалы КАК РазрешенияМногиеКоМногимМатериалы
		|			ПО Товары.Номенклатура = РазрешенияМногиеКоМногимМатериалы.Номенклатура
		|				И Товары.Характеристика = РазрешенияМногиеКоМногимМатериалы.Характеристика
		|			ЛЕВОЕ СОЕДИНЕНИЕ РазрешенияМногиеКоМногимКоличествоРазныхСтрок КАК РазрешенияМногиеКоМногимКоличествоРазныхСтрок
		|			ПО (РазрешенияМногиеКоМногимМатериалы.Разрешение = РазрешенияМногиеКоМногимКоличествоРазныхСтрок.Разрешение)
		|	ГДЕ
		|		РазрешенияМногиеКоМногимМатериалы.Разрешение ЕСТЬ НЕ NULL ) КАК ДоступныеРазрешенияМногиеКоМногим
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеРазрешенияМногиеКоМногим.Ссылка,
		|	ДоступныеРазрешенияМногиеКоМногим.Разрешение
		|
		|ИМЕЮЩИЕ
		|	СУММА(1) = МАКСИМУМ(ДоступныеРазрешенияМногиеКоМногим.КоличествоРазныхСтрок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Разрешение,
		|	Ссылка";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса, определяющий наличие аналогов
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаНаличиеАналогов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				ТаблицаМатериалов КАК ТаблицаМатериалов
	|			ГДЕ
	|				ТаблицаМатериалов.Номенклатура = Товары.Номенклатура
	|				И ТаблицаМатериалов.Характеристика = Товары.Характеристика
	|				И ТаблицаМатериалов.Ссылка = Товары.Ссылка
	|				И НЕ ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							РазрешенияМногиеКоМногим КАК РазрешенияМногиеКоМногим
	|						ГДЕ
	|							РазрешенияМногиеКоМногим.Разрешение = ТаблицаМатериалов.Разрешение))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ДоступныеРазрешенияМногиеКоМногим КАК ДоступныеРазрешенияМногиеКоМногим
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК РазрешениеМатериалы
	|					ПО
	|						ДоступныеРазрешенияМногиеКоМногим.Разрешение = РазрешениеМатериалы.Ссылка
	|			ГДЕ
	|				ДоступныеРазрешенияМногиеКоМногим.Ссылка = Товары.Ссылка
	|				И РазрешениеМатериалы.Номенклатура = Товары.Номенклатура
	|				И РазрешениеМатериалы.Характеристика = Товары.Характеристика)";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

// Возвращает текст запроса отобранных разрешений, материалов, аналогов
//
// Параметры:
//  ПараметрыОтборов - Структура - содержит:
//                      * УчестьМногиеКоМногим - Булево - определяет необходимость получения доступных разрешений многие ко многим.
//                   - Неопределено - если нет отбора многие ко многим.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаРазрешенияПоПриоритетам(ПараметрыОтборов = Неопределено) Экспорт
	
	УчестьМногиеКоМногим = ПараметрыОтборов <> Неопределено 
						   И ПараметрыОтборов.Свойство("УчестьМногиеКоМногим") 
						   И ПараметрыОтборов.УчестьМногиеКоМногим;
		
	ТекстыЗапроса = Новый Массив;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаМатериалов.Ссылка КАК Ссылка,
	|	ТаблицаМатериалов.Разрешение КАК Разрешение,
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.КоличествоУпаковок КАК Норматив,
	|	ТаблицаМатериалов.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
	|	ТаблицаМатериалов.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК КонтролироватьКратность
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РазрешенияМногиеКоМногим КАК РазрешенияМногиеКоМногим
	|				ГДЕ
	|					РазрешенияМногиеКоМногим.Разрешение = ТаблицаМатериалов.Разрешение)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Если УчестьМногиеКоМногим Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаМатериалов.Ссылка,
		|	ТаблицаМатериалов.Разрешение,
		|	ТаблицаМатериалов.Номенклатура,
		|	ТаблицаМатериалов.Характеристика,
		|	ТаблицаМатериалов.КоличествоУпаковок,
		|	ТаблицаМатериалов.Упаковка,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаМатериалов.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|ИЗ
		|	ТаблицаМатериалов КАК ТаблицаМатериалов
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ДоступныеРазрешенияМногиеКоМногим КАК ДоступныеРазрешенияМногиеКоМногим
		|			ГДЕ
		|				ДоступныеРазрешенияМногиеКоМногим.Разрешение = ТаблицаМатериалов.Разрешение
		|				И ДоступныеРазрешенияМногиеКоМногим.Ссылка = ТаблицаМатериалов.Ссылка)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ТекстыЗапроса.Очистить();
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаАналогов.Ссылка КАК Ссылка,
	|	ТаблицаАналогов.Разрешение КАК Разрешение,
	|	ТаблицаАналогов.Номенклатура КАК Номенклатура,
	|	ТаблицаАналогов.Характеристика КАК Характеристика,
	|	ТаблицаАналогов.КоличествоУпаковок КАК Норматив,
	|	ТаблицаАналогов.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
	|	ТаблицаАналогов.Склад КАК Склад,
	|	ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) КАК ОстатокНаСкладе
	|ИЗ
	|	ТаблицаАналогов КАК ТаблицаАналогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО ТаблицаАналогов.Номенклатура = ТаблицаОстатков.Номенклатура
	|			И ТаблицаАналогов.Характеристика = ТаблицаОстатков.Характеристика
	|			И ТаблицаАналогов.Склад = ТаблицаОстатков.Склад
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РазрешенияМногиеКоМногим КАК РазрешенияМногиеКоМногим
	|				ГДЕ
	|					РазрешенияМногиеКоМногим.Разрешение = ТаблицаАналогов.Разрешение)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Если УчестьМногиеКоМногим Тогда
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		ТекстыЗапроса.Очистить();
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаАналогов.Ссылка,
		|	ТаблицаАналогов.Разрешение,
		|	ТаблицаАналогов.Номенклатура,
		|	ТаблицаАналогов.Характеристика,
		|	ТаблицаАналогов.КоличествоУпаковок,
		|	ТаблицаАналогов.Упаковка,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаАналогов.Склад,
		|	ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0)
		|ИЗ
		|	ТаблицаАналогов КАК ТаблицаАналогов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
		|		ПО ТаблицаАналогов.Номенклатура = ТаблицаОстатков.Номенклатура
		|			И ТаблицаАналогов.Характеристика = ТаблицаОстатков.Характеристика
		|			И ТаблицаАналогов.Склад = ТаблицаОстатков.Склад
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ДоступныеРазрешенияМногиеКоМногим КАК ДоступныеРазрешенияМногиеКоМногим
		|			ГДЕ
		|				ДоступныеРазрешенияМногиеКоМногим.Разрешение = ТаблицаАналогов.Разрешение
		|				И ДоступныеРазрешенияМногиеКоМногим.Ссылка = ТаблицаАналогов.Ссылка)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ТекстыЗапроса.Очистить();
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	ТаблицаМатериалов.Разрешение КАК Разрешение,
	|	ТаблицаМатериалов.Приоритет КАК Приоритет
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМатериалов КАК ТаблицаМатериалов
	|		ПО Товары.Номенклатура = ТаблицаМатериалов.Номенклатура
	|			И Товары.Характеристика = ТаблицаМатериалов.Характеристика
	|			И Товары.Ссылка = ТаблицаМатериалов.Ссылка
	|ГДЕ
	|	ТаблицаМатериалов.Разрешение ЕСТЬ НЕ NULL 
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РазрешенияМногиеКоМногим КАК РазрешенияМногиеКоМногим
	|				ГДЕ
	|					РазрешенияМногиеКоМногим.Разрешение = ТаблицаМатериалов.Разрешение)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Если УчестьМногиеКоМногим Тогда
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		ТекстыЗапроса.Очистить();
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстЗапроса =	
		"ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Количество,
		|	ТаблицаМатериалов.Разрешение,
		|	ТаблицаМатериалов.Приоритет
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМатериалов КАК ТаблицаМатериалов
		|		ПО Товары.Номенклатура = ТаблицаМатериалов.Номенклатура
		|			И Товары.Характеристика = ТаблицаМатериалов.Характеристика
		|			И Товары.Ссылка = ТаблицаМатериалов.Ссылка
		|ГДЕ
		|	ТаблицаМатериалов.Разрешение ЕСТЬ НЕ NULL 
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ДоступныеРазрешенияМногиеКоМногим КАК ДоступныеРазрешенияМногиеКоМногим
		|			ГДЕ
		|				ДоступныеРазрешенияМногиеКоМногим.Разрешение = ТаблицаМатериалов.Разрешение
		|				И ДоступныеРазрешенияМногиеКоМногим.Ссылка = ТаблицаМатериалов.Ссылка)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ТекстыЗапроса.Очистить();
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;	
	
	Если Не УчестьМногиеКоМногим Тогда
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		ТекстыЗапроса.Очистить();
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;	
	
	ТекстЗапроса = 
	"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет УБЫВ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса временной таблицы "ТаблицаОстатков"
//
// Параметры:
//  ПараметрыОтборов - Структура - содержит:
//                      * ПрименитьТаблицуЗапасов - Булево - истина: заменяет количество свободного остатка из регистра "РаспределениеЗапасов"
//                                                                   на "Количество" из таблицы запасов при наличии соответствующих строк
//                                                           ложь:   таблица запасов не используется.
//                      * ПрименитьТаблицуРезервов - Булево -истина: уменьшает количество свободного остатка из регистра "РаспределениеЗапасов"
//                                                                   на "Количество" из таблицы резервов при наличии соответствующих строк
//                                                           ложь:   таблица запасов не используется
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТаблицаОстатков(ПараметрыОтборов) Экспорт
				
	ПрименитьТаблицуЗапасов = ПараметрыОтборов.Свойство("ПрименитьТаблицуЗапасов")
							  И ПараметрыОтборов.ПрименитьТаблицуЗапасов;
		
	ПрименитьТаблицуРезервов = ПараметрыОтборов.Свойство("ПрименитьТаблицуРезервов") 
							   И ПараметрыОтборов.ПрименитьТаблицуРезервов;
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапросаПоУмолчанию =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	NULL КАК Номенклатура,
	|	NULL КАК Характеристика,
	|	NULL КАК Склад,
	|	NULL КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблица";
	
	Если ПрименитьТаблицуЗапасов Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаЗапасов.Номенклатура КАК Номенклатура,
		|	ТаблицаЗапасов.Характеристика КАК Характеристика,
		|	ТаблицаЗапасов.Склад КАК Склад,
		|	ТаблицаЗапасов.Количество КАК Количество
		|ПОМЕСТИТЬ ТаблицаЗапасов
		|ИЗ
		|	&Запасы КАК ТаблицаЗапасов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстыЗапроса.Добавить(СтрЗаменить(ТекстЗапросаПоУмолчанию, "ВременнаяТаблица", "ТаблицаЗапасов"));
		
	КонецЕсли;
		
	Если ПрименитьТаблицуРезервов Тогда	
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Резервы.Номенклатура КАК Номенклатура,
		|	Резервы.Характеристика КАК Характеристика,
		|	Резервы.Склад КАК Склад,
		|	Резервы.Количество КАК Количество
		|ПОМЕСТИТЬ Резервы
		|ИЗ
		|	&Резервы КАК Резервы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРезервов.Номенклатура КАК Номенклатура,
		|	ТаблицаРезервов.Характеристика КАК Характеристика,
		|	ТаблицаРезервов.Склад КАК Склад,
		|	СУММА(ТаблицаРезервов.Количество) КАК Количество
		|ПОМЕСТИТЬ ТаблицаРезервов
		|ИЗ
		|	Резервы КАК ТаблицаРезервов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРезервов.Номенклатура,
		|	ТаблицаРезервов.Характеристика,
		|	ТаблицаРезервов.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстыЗапроса.Добавить(СтрЗаменить(ТекстЗапросаПоУмолчанию, "ВременнаяТаблица", "ТаблицаРезервов"));
		
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток < 0
		|			ТОГДА Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток
		|		КОГДА Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|			ТОГДА Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Свободно
		|ПОМЕСТИТЬ ЗапасыВременная
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И (Номенклатура, Характеристика, Склад) В(
		|				ВЫБРАТЬ
		|					ТаблицаАналогов.Номенклатура КАК Номенклатура,
		|					ТаблицаАналогов.Характеристика КАК Характеристика,
		|					ТаблицаАналогов.Склад КАК Склад
		|				ИЗ
		|					ТаблицаАналогов КАК ТаблицаАналогов)) КАК Запасы
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|/////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	&Количество КАК КоличествоОстаток
		|ПОМЕСТИТЬ ТаблицаОстатков
		|ИЗ
		|	ЗапасыВременная КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗапасов КАК ТаблицаЗапасов
		|		ПО Таблица.Номенклатура = ТаблицаЗапасов.Номенклатура
		|		 И Таблица.Характеристика = ТаблицаЗапасов.Характеристика
		|		 И Таблица.Склад = ТаблицаЗапасов.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРезервов КАК ТаблицаРезервов
		|		ПО Таблица.Номенклатура = ТаблицаРезервов.Номенклатура
		|		 И Таблица.Характеристика = ТаблицаРезервов.Характеристика
		|		 И Таблица.Склад = ТаблицаРезервов.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&Количество", ?(ПрименитьТаблицуЗапасов, "ЕСТЬNULL(ТаблицаЗапасов.Количество, Таблица.Свободно)", "Таблица.Свободно") + "&Количество");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&Количество", ?(ПрименитьТаблицуРезервов, " - ЕСТЬNULL(ТаблицаРезервов.Количество, 0)", ""));
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу (структуру таблицы) параметров необходимые для выбора аналогов
//
// Параметры:
//  ТипИсточника - ОписаниеТипов - Описание
//  
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * ДатаДействияРазрешений - Дата - дата действия разрешений
//   * Ссылка - ДокументСсылка - ссылка на источник
//   * ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство2_2 -
//   * ЗаказКлиента - ДокументСсылка.ЗаказКлиента -
//   * Спецификация - СправочникСсылка.РесурсныеСпецификации -
//   * Этап - СправочникСсылка.ЭтапыПроизводства - 
//   * Изделие - СправочникСсылка.Номенклатура -
//   * ХарактеристикаИзделия - СправочникСсылка.ХарактеристикиНоменклатуры -
//   * Подразделение - СправочникСсылка.СтруктураПредприятия -
//   * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности -
//
Функция ТаблицаПараметровАналогов(ТипИсточника)

	Типы = Новый Массив;
	Типы.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство2_2"));
	//++ Устарело_Производство21
	Типы.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	//-- Устарело_Производство21
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ДатаДействияРазрешений", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПараметров.Колонки.Добавить("Ссылка", ТипИсточника);
	ТаблицаПараметров.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов(Типы));
	ТаблицаПараметров.Колонки.Добавить("ЗаказКлиента", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));	
	ТаблицаПараметров.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ТаблицаПараметров.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ТаблицаПараметров.Колонки.Добавить("Изделие", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	ТаблицаПараметров.Колонки.Добавить("ХарактеристикаИзделия", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));	
	ТаблицаПараметров.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));	
	ТаблицаПараметров.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	Возврат ТаблицаПараметров;
	
КонецФункции

// Дополняет таблицу распределения запасов (см. ОбеспечениеВДокументахСервер.РаспределениеЗапасовДляРедактируемогоДокумента)
//
Процедура ДополнитьТаблицуРаспределенияЗапасов(АдресВХранилище, ТаблицаЗапасов)
	
	Запрос = Новый Запрос;
	Тексты = Новый Массив();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.Обособленно КАК Обособленно
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Обособленно,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Назначение КАК Назначение
	|ПОМЕСТИТЬ ОтборДляОстатков
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Обособленно
	|		И ТаблицаТоваров.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Назначение, Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасов.Состояние КАК Состояние,
	|	ТаблицаЗапасов.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасов.Характеристика КАК Характеристика,
	|	ТаблицаЗапасов.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасов.Назначение = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаЗапасов.Назначение
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаЗапасов.Назначение = НЕОПРЕДЕЛЕНО
	|		ИЛИ ТаблицаЗапасов.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Обособленно,
	|	ТаблицаЗапасов.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаЗапасов
	|ИЗ
	|	&ТаблицаЗапасов КАК ТаблицаЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Обособленно,
	|	Склад";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = ОбеспечениеВДокументахСервер.ВременнаяТаблицаСвободныеОстатки("ОтборДляОстатков", "ТаблицаОстатков");
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЗапасов.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасов.Характеристика КАК Характеристика,
	|	ТаблицаЗапасов.Склад КАК Склад,
	|	ТаблицаЗапасов.Назначение КАК Назначение,
	|	ТаблицаЗапасов.Обособленно КАК Обособленно,
	|	ТаблицаЗапасов.Состояние КАК Состояние,
	|	СУММА(ТаблицаЗапасов.Количество) КАК Количество
	|ИЗ
	|	ТаблицаЗапасов КАК ТаблицаЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасов.Номенклатура,
	|	ТаблицаЗапасов.Характеристика,
	|	ТаблицаЗапасов.Склад,
	|	ТаблицаЗапасов.Назначение,
	|	ТаблицаЗапасов.Обособленно,
	|	ТаблицаЗапасов.Состояние
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.Обособленно,
	|	ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПустаяСсылка),
	|	СУММА(РаспределениеЗапасов.Количество)
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК РаспределениеЗапасов
	|		ПО ТаблицаТоваров.Номенклатура = РаспределениеЗапасов.Номенклатура
	|			И ТаблицаТоваров.Характеристика = РаспределениеЗапасов.Характеристика
	|			И ТаблицаТоваров.Назначение = РаспределениеЗапасов.Назначение
	|			И (ТаблицаТоваров.Обособленно
	|					И ТаблицаТоваров.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ИЛИ НЕ ТаблицаТоваров.Обособленно)
	|			И ТаблицаТоваров.Склад <> РаспределениеЗапасов.Склад
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ТаблицаЗапасов КАК ТаблицаЗапасов
	|			ГДЕ
	|				ТаблицаЗапасов.Номенклатура = ТаблицаТоваров.Номенклатура
	|				И ТаблицаЗапасов.Характеристика = ТаблицаТоваров.Характеристика
	|				И ТаблицаЗапасов.Назначение = ТаблицаТоваров.Назначение
	|				И ТаблицаЗапасов.Обособленно = ТаблицаТоваров.Обособленно
	|				И ТаблицаЗапасов.Склад = ТаблицаТоваров.Склад)
	|	И РаспределениеЗапасов.Количество ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.Обособленно
	|
	|ИМЕЮЩИЕ
	|	СУММА(РаспределениеЗапасов.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.Обособленно,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Склад = РаспределениеЗапасов.Склад
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПустаяСсылка)
	|	КОНЕЦ,
	|	СУММА(РаспределениеЗапасов.Количество)
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК РаспределениеЗапасов
	|		ПО ТаблицаТоваров.Номенклатура = РаспределениеЗапасов.Номенклатура
	|			И ТаблицаТоваров.Характеристика = РаспределениеЗапасов.Характеристика
	|			И ТаблицаТоваров.Назначение = РаспределениеЗапасов.Назначение
	|			И (ТаблицаТоваров.Обособленно
	|					И ТаблицаТоваров.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ИЛИ НЕ ТаблицаТоваров.Обособленно)
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ТаблицаЗапасов КАК ТаблицаЗапасов
	|				ГДЕ
	|					ТаблицаЗапасов.Номенклатура = ТаблицаТоваров.Номенклатура
	|					И ТаблицаЗапасов.Характеристика = ТаблицаТоваров.Характеристика
	|					И ТаблицаЗапасов.Назначение = ТаблицаТоваров.Назначение
	|					И ТаблицаЗапасов.Обособленно = ТаблицаТоваров.Обособленно
	|					И ТаблицаЗапасов.Склад = ТаблицаТоваров.Склад)
	|	И РаспределениеЗапасов.Количество ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Склад = РаспределениеЗапасов.Склад
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.Обособленно
	|
	|ИМЕЮЩИЕ
	|	СУММА(РаспределениеЗапасов.Количество) > 0";
	Тексты.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ТаблицаТоваров", ПолучитьИзВременногоХранилища(АдресВХранилище)); 
	Запрос.УстановитьПараметр("ТаблицаЗапасов", ТаблицаЗапасов);
	
	ТаблицаЗапасов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти