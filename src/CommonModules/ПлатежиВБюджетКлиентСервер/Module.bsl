
#Область ПрограммныйИнтерфейс

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Параметры:
//	ПрименениеПриказа107н - Булево - Применяется ли приказ Минфина России от 12.11.2013 №107н.
//	Период - Дата - дата формирования статусов плательщика
//
// Возвращаемое значение:
//	СписокЗначений - список статусов.
//
Функция СтатусыПлательщика(ПрименениеПриказа107н, Период = Неопределено) Экспорт
	
	Статусы = Новый Соответствие;
	
	// Старые правила
	Статусы.Вставить("01", НСтр("ru = '01 - налогоплательщик (плательщик сборов) - юридическое лицо';
								|en = '01 - taxpayer (fees payer) - business entity'"));
	Статусы.Вставить("02", НСтр("ru = '02 - налоговый агент';
								|en = '02 - tax agent'"));
	Статусы.Вставить("03", НСтр("ru = '03 - организация федеральной почтовой связи';
								|en = '03 - Federal Mail Service company'"));
	Статусы.Вставить("04", НСтр("ru = '04 - налоговый орган';
								|en = '04 - tax authority'"));
	Статусы.Вставить("05", НСтр("ru = '05 - территориальные органы Федеральной службы судебных приставов';
								|en = '05 - regional authorities of the Federal Bailiff Service'"));
	Статусы.Вставить("06", НСтр("ru = '06 - участник внешнеэкономической деятельности - юридическое лицо';
								|en = '06 - foreign economic activity participant - business entity'"));
	Статусы.Вставить("07", НСтр("ru = '07 - таможенный орган';
								|en = '07 - customs authority'"));
	Статусы.Вставить("08", НСтр("ru = '08 - плательщик иных обязательных платежей';
								|en = '08 - payer of other obligatory payments'"));
	Статусы.Вставить("09", НСтр("ru = '09 - налогоплательщик (плательщик сборов) - ИП';
								|en = '09 - taxpayer (fee payer) - IE'"));
	Статусы.Вставить("10", НСтр("ru = '10 - налогоплательщик (плательщик сборов) - нотариус, занимающегося частной практикой';
								|en = '10 - taxpayer (fee payer) - private notary'"));
	Статусы.Вставить("11", НСтр("ru = '11 - налогоплательщик (плательщик сборов) - адвокат';
								|en = '11 - taxpayer (fee payer) - lawyer'"));
	Статусы.Вставить("12", НСтр("ru = '12 - налогоплательщик (плательщик сборов) - глава КФХ';
								|en = '12 - taxpayer (fee payer) - head of private peasant farms'"));
	Статусы.Вставить("13", НСтр("ru = '13 - налогоплательщик (плательщик сборов) - иное физическое лицо';
								|en = '13 - taxpayer (fee payer) other individual'"));
	Если Не ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("14", "14 - налогоплательщик, производящий выплаты физическим лицам");
	КонецЕсли;
	Статусы.Вставить("15", НСтр("ru = '15 - кредитная организация - документ на общую сумму без открытия банковского счета физическому лицу';
								|en = '15 - depository institution - document for the total amount without opening a bank account for the individual'"));
	Статусы.Вставить("16", НСтр("ru = '16 - участник внешнеэкономической деятельности - физическое лицо';
								|en = '16 - foreign economic activity participant - individual'"));
	Статусы.Вставить("17", НСтр("ru = '17 - участник внешнеэкономической деятельности - ИП';
								|en = '17 - foreign trade participant - IE'"));
	Статусы.Вставить("18", НСтр("ru = '18 - плательщик таможенных платежей, не являющийся декларантом';
								|en = '18 - payer of customs payments, not a declarant '"));
	Статусы.Вставить("19", НСтр("ru = '19 - организации, оформившие перечисление средств, удержанных из заработка физического лица в счет погашения задолженности по таможенным платежам';
								|en = '19 - companies which have registered transfer of funds deducted from individual''s salary for paying off customs payment debt'"));
	Статусы.Вставить("20", НСтр("ru = '20 - кредитная организация - документ по каждому платежу физического лица без открытия банковского счета';
								|en = '20 - depository institution - a document for every payment of an individual without opening a bank account'"));
	
	Если ПрименениеПриказа107н Тогда
		
		Статусы.Вставить("03", НСтр("ru = '03 - организация федеральной почтовой связи, составившая распоряжение по каждому платежу физического лица';
									|en = '03 - company of the federal mail service that made a reference for each payment of the individual'"));
		Статусы.Вставить("08", НСтр("ru = '08 - юридическое лицо (индивидуальный предприниматель), уплачивающее страховые взносы и иные платежи';
									|en = '08 - business entity (individual entrepreneur) who pays insurance contributions and other payments'"));
		Статусы.Вставить("10", НСтр("ru = '10 - налогоплательщик (плательщик сборов) – нотариус, занимающийся частной практикой';
									|en = '10 - tax (fees) payer - privately practicing notary'"));
		Если Не ДействуетПриказ2017_58н(Период) Тогда
			Статусы.Вставить("14", "14 - налогоплательщик, производящий выплаты физическим лицам");
		КонецЕсли;
		Статусы.Вставить("15", НСтр("ru = '15 - кредитная организация (филиал кредитной организации), платежный агент, организация федеральной почтовой связи, составившие платежное поручение на общую сумму с реестром';
									|en = '15 - depository institution  (depository institution branch), paying agent, Federal Mail Service company that prepared a payment order for the total amount with the registry'"));
		Статусы.Вставить("19", НСтр("ru = '19 - организации, переводящие средства, удержанные из заработной платы на основании исполнительного документа';
									|en = '19 - companies that transfer funds deducted from salary on the basis of an garnishment document'"));
		Статусы.Вставить("20", НСтр("ru = '20 - кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение по каждому платежу физического лица';
									|en = '20 - depository institution (depository institution branch), paying agent that prepared a reference for each payment of the individual'"));
		Статусы.Вставить("21", НСтр("ru = '21 - ответственный участник консолидированной группы налогоплательщиков';
									|en = '21 - responsible member of consolidated group of taxpayers'"));
		Статусы.Вставить("22", НСтр("ru = '22 - участник консолидированной группы налогоплательщиков';
									|en = '22 - member of consolidated group of taxpayers'"));
		Статусы.Вставить("23", НСтр("ru = '23 - органы контроля за уплатой страховых взносов';
									|en = '23 - authorities that control insurance contributions'"));
		Статусы.Вставить("24", НСтр("ru = '24 - физическое лицо, уплачивающее страховые взносы и иные платежи';
									|en = '24 - individual who pays insurance contributions and other payments'"));
		Статусы.Вставить("25", НСтр("ru = '25 - банки - гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации за плательщика суммы налога на добавленную стоимость, излишне полученной им (зачтенной ему) в результате возмещения налога на добавленную стоимость в заявительном порядке, а также по уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, и акцизов в размере авансового платежа акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции';
									|en = '25 - guarantor banks that prepared a reference for cash transfer to the Russian Federation budget system for VAT payer amount excessively received by them as a result of VAT refund in a declarative manner, as well as for excise tax payment that is calculated for sale of excise goods outside the Russian Federation, as well as excise taxes in the amount of the excise advance payment for alcohol and (or) excisable alcohol-containing products'"));
		Статусы.Вставить("26", НСтр("ru = '26 - учредители (участники) должника, собственники имущества должника – унитарного предприятия или третьи лица, составившие распоряжение на погашение задолженности по обязательным платежам, включенным в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве';
									|en = '26 - founders (participants) of the debtor, owners of the debtor''s property - a unitary enterprise or third parties that prepared a reference for debt repayment for mandatory payments included in the list of creditors during procedures applied in the bankruptcy case'"));
		
		Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
			Статусы.Вставить("27", "27 - кредитные организации составившие распоряжение о переводе денежных средств, перечисленных из бюджетной системы РФ, не зачисленных получателю и подлежащих возврату в бюджетную систему РФ");
		КонецЕсли;
		
		Если ДействуетПриказ2017_58н(Период) Тогда
			Статусы.Вставить("28", "28 - участник внешнеэкономической деятельности - получатель международного почтового отправления");
		КонецЕсли;
		
		Если ДействуетПриказ199н_202101(Период) Тогда
			
			Статусы.Вставить("06", НСтр("ru = '06 - участник внешнеэкономической деятельности - юридическое лицо, за исключением 
								|получателя международного почтового отправления (за исключением платежей, администрируемых 
								|налоговыми органами)';
								|en = '06 - foreign economic activity participant is a legal entity with the exception of 
								|the recipient of international mail (except for payments managed by 
								|tax authorities)'"));
			Статусы.Вставить("07", НСтр("ru = '07 - таможенный орган (за исключением платежей, администрируемых налоговыми органами)';
										|en = '07 - customs authority (except for payments managed by tax authorities)'"));
			Статусы.Вставить("08", НСтр("ru = '08 - плательщик - юридическое лицо, индивидуальный предприниматель, нотариус, 
								|занимающийся частной практикой, адвокат, учредивший адвокатский кабинет, глава крестьянского 
								|(фермерского) хозяйства, осуществляющие перевод денежных средств в уплату платежей в 
								|бюджетную систему Российской Федерации (за исключением платежей, администрируемых 
								|налоговыми и таможенными органами)';
								|en = '08 - payer is a legal entity, an individual entrepreneur, a 
								|private notary, a lawyer who opened an office, the head of a peasant 
								|(farm) enterprise, who transfers cash to the 
								|budget system of the Russian Federation (except for payments managed by 
								|tax and customs authorities)'"));
			Статусы.Вставить("16", НСтр("ru = '16 - участник внешнеэкономической деятельности - физическое лицо (за исключением 
								|платежей, администрируемых налоговыми органами)';
								|en = '16 - foreign economic activity participant is an individual (except for 
								|payments managed by tax authorities)'"));
			Статусы.Вставить("17", НСтр("ru = '17 - участник внешнеэкономической деятельности - индивидуальный предприниматель 
								|(за исключением платежей, администрируемых налоговыми органами)';
								|en = '17 - foreign economic activity participant is an individual entrepreneur 
								|(except for payments managed by tax authorities)'"));
			Статусы.Вставить("19", НСтр("ru = '19 - организации и их филиалы (далее - организации), составившие распоряжение о 
								|переводе денежных средств, удержанных из заработной платы (дохода) должника - физического 
								|лица в счет погашения задолженности по платежам в бюджетную систему Российской Федерации 
								|на основании исполнительного документа, направленного в организацию в установленном порядке 
								|(за исключением платежей, администрируемых налоговыми и таможенными органами)';
								|en = '19 - companies and their branch offices (hereinafter referred to as companies) that prepared an order for 
								|transferring cash withheld from salary (income) of a debtor, an 
								|individual for paying off the debt to the budget system of the Russian Federation 
								|on the basis of the garnishment document sent to the company in accordance with the established procedure 
								|(except for payments managed by tax and customs authorities)'"));
			Статусы.Вставить("20", НСтр("ru = '20 - кредитная организация (филиал кредитной организации), платежный агент, 
								|составившие распоряжение о переводе денежных средств по каждому платежу физического лица 
								|(за исключением платежей, администрируемых налоговыми и таможенными органами))';
								|en = '20 - depository institution (depository institution branch), paying agent, 
								|that prepared an order for cash transfer for each individual''s payment 
								|(except for payments managed by tax and customs authorities))'"));
			Статусы.Вставить("23", НСтр("ru = '23 - Фонд социального страхования Российской Федерации (за исключением платежей, 
								|администрируемых налоговыми органами)';
								|en = '23 - Social Security Fund of the Russian Federation (except for payments 
								|managed by tax authorities)'"));
			Статусы.Вставить("24", НСтр("ru = '24 - физическое лицо, осуществляющее перевод денежных средств в уплату сборов, 
								|страховых взносов, администрируемых Фондом социального страхования Российской Федерации, и иных 
								|платежей в бюджетную систему Российской Федерации (за исключением платежей, администрируемых 
								|налоговыми и таможенными органами)';
								|en = '24 - an individual who transfers cash in payment of fees, 
								|insurance contributions managed by the Social Insurance Fund of the Russian Federation, and other 
								|payments to the budget system of the Russian Federation (except for payments managed 
								|by tax and customs authorities)'"));
			Статусы.Вставить("28", НСтр("ru = '28 - участник внешнеэкономической деятельности - получатель международного 
								|почтового отправления (за исключением платежей, администрируемых налоговыми органами)';
								|en = '28 - foreign economic activity participant is an international 
								|mailing recipient (except for payments managed by tax authorities)'"));
			
		КонецЕсли;
		
		Если ДействуетПриказ199н_202107(Период) Тогда
			Статусы.Вставить("29", НСтр("ru = '29 - политическая партия, избирательное объединение, инициативная группа по проведению 
										|референдума, кандидат, зарегистрированный кандидат или уполномоченный представитель 
										|инициативной группы по проведению референдума, инициативная агитационная группа при 
										|перечислении денежных средств в бюджетную систему Российской Федерации со специальных 
										|избирательных счетов и специальных счетов фондов референдума (за исключением платежей, 
										|администрируемых налоговыми органами)';
										|en = '29 - a political party, an electoral association, an initiative group for a 
										|referendum, a candidate, a registered candidate or an authorized representative of an 
										|initiative group for a referendum, an initiative campaign group for 
										|transferring cash to the budget system of the Russian Federation from special 
										|electoral accounts and special referendum funds accounts (except for payments 
										|managed by tax authorities)'"));
		КонецЕсли;
		
		Если ДействуетИзменениеПриказа107н_202206(Период) Тогда
			Статусы.Вставить("31", НСтр("ru = '31 - плательщик - физическое лицо, юридическое лицо, индивидуальный предприниматель,
										|осуществляющие перевод денежных средств в счет погашения задолженности по исполнительному 
										|производству, кредитные организации (филиалы кредитных организаций), составившие 
										|распоряжение о переводе денежных средств в счет погашения задолженности по исполнительному 
										|производству';
										|en = '31 - payer - an individual, a legal entity, or an individual entrepreneur
										|that pays off the enforcement
										|proceedings debt; depository institutions (depository institution branches) that prepared
										|a cash transfer order to pay off the enforcement
										|proceedings debt'"));
		КонецЕсли;
		
		Если ДействуетПриказ199н_202110(Период) Тогда
			
			Статусы.Удалить("09");
			Статусы.Удалить("10");
			Статусы.Удалить("11");
			Статусы.Удалить("12");
			Статусы.Удалить("18");
			Статусы.Удалить("21");
			Статусы.Удалить("22");
			Статусы.Удалить("25");
			Статусы.Удалить("26");
			
			Статусы.Вставить("13", НСтр("ru = '13 - налогоплательщик (плательщик сборов) - физическое лицо, ИП, нотариус, 
								|занимающийся частной практикой, адвокат, учредивший адвокатский кабинет, глава КФХ';
								|en = '13 - taxpayer (fee payer) is an individual, IE, a 
								|private notary, a lawyer who opened an office, a farm enterprise head'"));
			
			Статусы.Вставить("30", НСтр("ru = '30 - иностранное лицо, не состоящее на учете в налоговых органах Российской Федерации 
										|(при уплате платежей, администрируемых таможенными органами)';
										|en = '30 - foreign entity who is not registered with the tax authorities of the Russian Federation 
										|(upon payments managed by customs authorities)'"));
			
		КонецЕсли;
		
		Если ДействуетПриказ199н_202302(Период) Тогда
			
			Статусы.Вставить("01", 
				НСтр("ru = '01 - налогоплательщик (плательщик сборов, страховых взносов и платежей, администрируемых 
				|налоговыми органами) - юридическое лицо, физическое лицо, индивидуальный предприниматель, нотариус, 
				|занимающийся частной практикой, адвокат, учредивший адвокатский кабинет, глава крестьянского 
				|(фермерского) хозяйства, составившие распоряжения о переводе денежных средств';
				|en = '01 - taxpayer (payer of fees, insurance contributions, and of payments managed by 
				|tax authorities) - a legal entity, person, individual entrepreneur, private notary, 
				|a lawyer who opened an office, the head of a peasant 
				|(farm) enterprise who prepared references for cash transfer'"));
			
			Если Не ДействуетПриказ199н_202401(Период) Тогда
				Статусы.Вставить("02", 
					НСтр("ru = '02 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, 
					|администрируемых налоговыми органами) - юридическое лицо, индивидуальный предприниматель, 
					|нотариус, занимающийся частной практикой, адвокат, учредивший адвокатский кабинет, глава 
					|крестьянского (фермерского) хозяйства, представивший в налоговый орган уведомление об исчисленных 
					|суммах налогов, сборов, авансовых платежей по налогам, страховых взносов в виде распоряжения на 
					|перевод денежных средств в уплату платежей в бюджетную систему Российской Федерации';
					|en = '02 - taxpayer (payer of fees, insurance contributions, and of payments managed by 
					|tax authorities) - a legal entity, person, individual entrepreneur, 
					|a private notary, lawyer who opened an office, the head of 
					|a peasant (farm) enterprise who submitted to the tax authority a notification of the calculated amounts of 
					|taxes, fees, advance payments of taxes, insurance contributions in the form of an order 
					|to transfer cash to pay payments to the budget system of the Russian Federation'"));
			КонецЕсли;
			
			Статусы.Вставить("13", 
				НСтр("ru = '13 - иностранное лицо, не состоящее на учете в налоговых органах Российской Федерации, при 
				|осуществлении перевода денежных средств в уплату иных платежей, администрируемых налоговыми органами, 
				|в бюджетную систему Российской Федерации (за исключением единого налогового платежа), у которого 
				|отсутствует идентификационный номер налогоплательщика';
				|en = '13 - foreign entity who is not registered with the tax authorities of the Russian Federation 
				|when transferring cash to pay other payments managed by tax authorities 
				|to the budget system of the Russian Federation (except for a unified tax payment), 
				|and who does not have a taxpayer identification number'"));
			Статусы.Вставить("23", 
				НСтр("ru = '23 - Фонд пенсионного и социального страхования Российской Федерации (за исключением 
				|платежей, администрируемых налоговыми органами)';
				|en = '23 - Social Insurance Fund of the Russian Federation (except for 
				|payments managed by tax authorities)'"));
			Статусы.Вставить("24", 
				НСтр("ru = '24 - плательщик - физическое лицо, осуществляющее перевод денежных средств в уплату сборов, 
				|страховых взносов, администрируемых Фондом пенсионного и социального страхования Российской Федерации, 
				|и иных платежей в бюджетную систему Российской Федерации (за исключением платежей, администрируемых 
				|налоговыми и таможенными органами)';
				|en = '24 - payer - a person who transfers cash to pay fees, 
				|insurance contributions managed by the Social Insurance Fund of the Russian Federation
				|, and other payments to the budget system of the Russian Federation (except for payments 
				|managed by tax and customs authorities)'"));
			
		КонецЕсли;
		
		Если ДействуетПриказ199н_202310(Период) Тогда
			Статусы.Вставить("32", 
				НСтр("ru = '32 - таможенный орган (в рамках бесспорного взыскания)';
					|en = '32 - customs authority (within undisputed collection)'"));
		КонецЕсли;
		
		Если ДействуетПриказ199н_202401(Период) Тогда
			
			Статусы.Удалить("02");
			Статусы.Вставить("33", 
				НСтр("ru = '33 - плательщик - физическое лицо, юридическое лицо, индивидуальный предприниматель, 
				|осуществляющие перевод денежных средств в счет оплаты приобретаемого государственного (муниципального) 
				|имущества, имущества, обращенного в собственность государства, вещественных доказательств и изъятых 
				|вещей, а также задержанных таможенными органами товаров.';
				|en = '33 - payer - a person, legal entity, individual entrepreneur 
				|who transfers cash to pay for the acquired state (municipal) 
				|property, state-owned property, material evidence and seized items,
				| and goods detained by customs authorities.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из Статусы Цикл
		Список.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Возврат Список;
	
КонецФункции

// Возвращает список оснований платежа на перечисление в бюджет
//
// Параметры:
//	ВидПеречисления - ПеречислениеСсылка.ВидыПеречисленийВБюджет - вид перечисления в бюджет
//	ПрименениеПриказа107н - Булево - Применяется ли приказ Минфина России от 12.11.2013 №107н.
//	Период - Дата - дата формирования списка основания платежа
//
// Возвращаемое значение:
//	СписокЗначений - Список оснований.
//
Функция ОснованияПлатежа(ВидПеречисления, ПрименениеПриказа107н, Период = Неопределено) Экспорт
	
	ОснованияПлатежа = Новый СписокЗначений;
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ОснованияПлатежа = ОснованияНалоговогоПлатежа(ПрименениеПриказа107н, Период);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ОснованияПлатежа = ОснованияТаможенногоПлатежа(ПрименениеПриказа107н, Период);
	КонецЕсли;
	
	ОснованияПлатежа.Добавить("0", НСтр("ru = '0 - значение не заполняется';
										|en = '0 - value is not filled in'"));
	
	Возврат ОснованияПлатежа;
	
КонецФункции

// Возвращает список типов платежа на перечисление в бюджет
//
// Параметры:
//	ВидПеречисления - ПеречислениеСсылка.ВидыПеречисленийВБюджет - вид перечисления в бюджет
//	ПрименениеПриказа107н - Булево - Применяется ли приказ Минфина России от 12.11.2013 №107н.
//
// Возвращаемое значение:
//	СписокЗначений - Список типов
//
Функция ТипыПлатежа(ВидПеречисления, ПрименениеПриказа107н) Экспорт
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ТипыПлатежа = ТипыНалоговогоПлатежа(ПрименениеПриказа107н);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ТипыПлатежа = ТипыТаможенногоПлатежа(ПрименениеПриказа107н);
	Иначе
		ТипыПлатежа.Добавить("0", НСтр("ru = '0 - значение не заполняется';
										|en = '0 - value is not filled in'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

// Возвращает результат проверки ОКТМО
//
// Параметры:
//	КодТерритории - Строка - код ОКТМО.
//
// Возвращаемое значение:
//	Булево - Признак корректности
//
Функция КорректныйОКТМО(КодТерритории) Экспорт
	РезультатПроверки = Истина;
	
	Если СтрДлина(КодТерритории) = 11 И Сред(КодТерритории, 9, 3) = "000" Тогда
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Возврат РезультатПроверки;
КонецФункции

// Возвращает дату начала действия указания 3844У
//
// Возвращаемое значение:
//	Строка - строковое представление даты.
//
Функция НачалоДействияУказания3844У() Экспорт
	
	// Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
	// "О внесении изменений в Положение Банка России от 19 июня 2012 года № 383-П".
	
	// Совпадает с датой вступления в силу Приказа Минфина России от 23 сентября 2015 г. № 148н
	// "О внесении изменений в приказ Министерства финансов Российской Федерации от 12 ноября 2013 г. № 107н".
	
	Возврат '2016-03-28'; // Дата вступления явно прописана в тексте Указания.
	
КонецФункции

// Возвращает дату начала действия приказа 107н
//
// Возвращаемое значение:
//	Строка - строковое представление даты.
//
Функция НачалоДействияПриказа107н() Экспорт
	
	// Приказ Минфина №107н от 12.11.2013.
	// Опубликован 24.01.2014 и вступает в силу по истечении 10 дней с даты публикации.
	
	Возврат '2014-02-04';
	
КонецФункции

// Возвращает признак действия приказа 107н на указанную дату
//
// Параметры:
//	Период - Дата - проверяемая дата.
//
// Возвращаемое значение:
//	Булево - Признак действия
//
Функция ДействуетПриказ107н(Период) Экспорт
	
	Возврат Период = Неопределено
		Или Период >= НачалоДействияПриказа107н();
	
КонецФункции

// Возвращает дату начала действия приказа 90н
//
// Возвращаемое значение:
//	Дата - начало действия приказа.
//
Функция НачалоДействияПриказа2017_90н() Экспорт
	
	// Приказ Минфина №90н от 08.06.2015.
	
	Возврат '2017-01-01';
	
КонецФункции

Функция НачалоДействияПриказа2017_58н() Экспорт
	
	// Приказ Минфина №58н от 05.04.2017.
	
	Возврат '2017-04-25';
	
КонецФункции

Функция НачалоОтложенногоДействияПриказа2017_58н() Экспорт
	
	// Приказ Минфина №58н от 05.04.2017.
	// Настоящий приказ вступает в силу в установленном порядке, за исключением
	//  абзаца одиннадцатого подпункта "г" пункта 3,
	//  абзаца пятого подпункта "а", подпункта "в",
	//  абзацев второго, четвертого - пятого, десятого подпункта "г",
	//  абзацев второго - пятого, девятого подпункта "д" пункта 4,
	//  абзацев третьего - шестого подпункта "е",
	//  абзацев третьего - четвертого подпункта "ж" пункта 5,
	//  подпунктов "б" - "в",
	//  абзацев второго - третьего подпункта "л" пункта 6
	// Изменений, вступающих в силу со 2 октября 2017 года.
	
	Возврат '2017-10-02';
	
КонецФункции

Функция ДействуетПриказ2017_58н(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоДействияПриказа2017_58н();
	
КонецФункции

Функция ДействуетПриказ2017_58н_Отложенный(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоОтложенногоДействияПриказа2017_58н();
	
КонецФункции

// Определяет дату начала действия указания Банка России 5286-У
//
// Возвращаемое значение:
//    Дата - Дата начала действия указания
//
Функция НачалоДействияУказания2019_5286У() Экспорт
	
	// Указание ЦБ РФ N 5286-У от 14 октября 2019 г
	Возврат '2020-06-01';
	
КонецФункции

// Определяет, действует ли на переданную дату указание Банка России 5286-У
//
// Возвращаемое значение:
//    Булево - Признак действия указания
//
Функция ДействуетУказание2019_5286У(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоДействияУказания2019_5286У();
	
КонецФункции

Функция ДействуетПриказ126н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа126н();
	
КонецФункции

Функция ДействуетПриказ90н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа90н();
	
КонецФункции

// Возвращает признак, действует ли приказ 199н от 14.09.2020 с 01.10.2021
//
// Параметры:
//	Период - Дата - дата для проверки на действие приказа
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетПриказ199н_202110(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияПриказа199н_202110();
	
КонецФункции

// Возвращает признак, действует ли приказ 199н от 14.09.2020 с 01.07.2021
//
// Параметры:
//	Период - Дата - дата для проверки на действие приказа
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетПриказ199н_202107(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияПриказа199н_202107();
	
КонецФункции

// Возвращает признак, действует ли приказ 199н от 14.09.2020 с 01.01.2021
//
// Параметры:
//	Период - Дата - дата для проверки на действие приказа
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетПриказ199н_202101(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияПриказа199н_202101();
	
КонецФункции

// Возвращает признак, действует ли приказ 199н от 30.12.2022 с 11.02.2023
//
// Параметры:
//	Период - Дата - дата для проверки на действие приказа
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетПриказ199н_202302(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияПриказа199н_202302();
	
КонецФункции

// Возвращает признак, действует ли приказ 199н от 30.12.2022 с 01.10.2023
//
// Параметры:
//	Период - Дата - дата для проверки на действие приказа
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетПриказ199н_202310(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияПриказа199н_202310();
	
КонецФункции

// Возвращает признак, действует ли приказ 199н от 30.12.2022 с 01.01.2024
//
// Параметры:
//	Период - Дата - дата для проверки на действие приказа
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетПриказ199н_202401(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияПриказа199н_202401();
	
КонецФункции

// Возвращает признак, действует ли указание (изменения положения 762-П от 29.06.2021) с 01.05.2022
//
// Параметры:
//	Период - Дата - дата для проверки на действие указания
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетУказание762П_202205(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияУказания762П_202205();
	
КонецФункции

// Возвращает признак, действует ли изменение приказа 107н от 12.11.2013 с 20.06.2022
//
// Параметры:
//	Период - Дата - дата для проверки на действие изменений приказа
//
// Возвращаемое значение:
//	Дата
//
Функция ДействуетИзменениеПриказа107н_202206(Период) Экспорт
	
	Возврат Период <> Неопределено
			И Период >= НачалоДействияИзмененияПриказа107н_202206();
	
КонецФункции

// Определяет перечень кодов видов дохода согласно указанию Банка России 5286-У
//
// Параметры:
//     Период - Дата - дата, в зависимости от которой меняется список значений кодов.
//     ВыплатаЗарплаты - Булево - Признак выплаты зарплаты
//
// Возвращаемое значение:
//    СписокЗначений из Строка - Коды видов дохода
//
Функция КодыВидовДохода(Период, ВыплатаЗарплаты = Ложь) Экспорт
	
	Коды = Новый СписокЗначений;
	
	Если Не ВыплатаЗарплаты Тогда
		Коды.Добавить("", НСтр("ru = '(не заполняется) Не является доходом физического лица, взыскания не ограничиваются';
								|en = '(not filled in) Not an individual’s income, deductions are not limited'"));
	КонецЕсли;
	
	Коды.Добавить("1", НСтр("ru = '1 - Разрешено удержание по исполнительному листу с ограничением по сумме';
							|en = '1 - Deduction as per garnishment order is allowed with an amount limitation'"));
	
	Если ДействуетУказание762П_202205(Период) Тогда
		
		Коды.Добавить("2", НСтр("ru = '2 - Запрещено удержание по исполнительному листу (периодические выплаты)';
								|en = '2 - Deduction as per garnishment order is prohibited (recurring payments)'"));
		Коды.Добавить("3", НСтр("ru = '3 - Запрещено удержание по исполнительному листу с оговорками для алиментов (периодические выплаты)';
								|en = '3 - Deduction as per garnishment order is prohibited with reservations for child support (recurring payments)'"));
		Коды.Добавить("4", НСтр("ru = '4 - Запрещено удержание по исполнительному листу (единовременные выплаты)';
								|en = '4 - Deduction as per garnishment order is prohibited (one-off payments)'"));
		Коды.Добавить("5", НСтр("ru = '5 - Запрещено удержание по исполнительному листу с оговорками для алиментов (единовременные выплаты)';
								|en = '5 - Deduction as per garnishment order is prohibited with reservations for child support (one-off  payments)'"));
		
	Иначе
		
		Коды.Добавить("2", НСтр("ru = '2 - Запрещено удержание по исполнительному листу';
								|en = '2 - Deduction as per garnishment order is prohibited'"));
		Коды.Добавить("3", НСтр("ru = '3 - Запрещено удержание по исполнительному листу с оговорками для алиментов';
								|en = '3 - Deduction as per garnishment order is prohibited with reservations for child support'"));
		
	КонецЕсли;
	
	Возврат Коды;
	
КонецФункции

#Область УникальныйИдентификаторНачисления

// Проверяет корректность переданного идентификатора платежа
//
// Параметры:
//	ИдентификаторПлатежа    - Строка - проверяемый идентификатор платежа
//	ПлатежВФедеральныйОрган - Булево - признак платежа в федеральный орган государственной власти.
//
// Возвращаемое значение:
//	Строка - описание обнаруженных ошибок в идентификаторе.
//
Функция ПроверитьУИН(ИдентификаторПлатежа, ПлатежВФедеральныйОрган = Ложь) Экспорт
	
	УИН = СокрЛП(ИдентификаторПлатежа);
	
	Если НЕ РеквизитЗаполнен(УИН) Тогда
		Возврат "";
	КонецЕсли;
	
	ДлинаИдентификатора = СтрДлина(УИН);
	Если ДлинаИдентификатора <> МинимальнаяДлинаУИН() Тогда
		
		Если ПлатежВФедеральныйОрган
			И ДлинаИдентификатора <> ДлинаКодаНПА() Тогда
			ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 символов, а не из %2.';
								|en = 'Unique ID of charges must consist of %1 characters, but not of %2.'");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, МинимальнаяДлинаУИН(), СтрДлина(УИН));
		КонецЕсли;
		
		Если ДлинаИдентификатора <> МаксимальнаяДлинаУИН()
			И ДлинаИдентификатора <> ДлинаКодаНПА() Тогда
			ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 или %2 символов, а не из %3.';
								|en = 'Unique ID of charges must consist of %1 or %2 characters, but not of %3.'");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, МинимальнаяДлинаУИН(), МаксимальнаяДлинаУИН(), ДлинаИдентификатора);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(УИН, "0") > 0 И ПустаяСтрока(СтрЗаменить(УИН, "0", "")) Тогда
		Возврат НСтр("ru = 'Все знаки уникального идентификатора начисления не могут одновременно принимать значение ""0""';
					|en = 'All characters of the unique ID of charges cannot be equal to ""0"" simultaneously'");
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(УИН) Тогда
		
		Если ДлинаИдентификатора <> ДлинаКодаНПА() Тогда
			
			РезультатПроверки = ПроверитьУИНПоФормату1_16_1(УИН);
			
			Если ЗначениеЗаполнено(РезультатПроверки)
				И УИНСоответствуетКодуНормативноПравовогоАкта(УИН, ДлинаИдентификатора) Тогда
				РезультатПроверки = "";
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДлинаИдентификатора = МинимальнаяДлинаУИН() Тогда
		РезультатПроверки = ПроверитьУИНПоФормату1_15(УИН);
	Иначе
		РезультатПроверки = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из цифр';
								|en = 'Unique ID of charges must consist of digits'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет что получателем по указанному номеру счета является федеральным органом государственной власти.
//
// Параметры:
//	НомерСчета    - Строка - номер банковского счета.
//
// Возвращаемое значение:
//	Булево - Истина: является, Ложь:  не является.
//
Функция АдминистраторНачисленияФедеральныйОрганГосударственнойВласти(Знач НомерСчета) Экспорт
	
	Если СтрДлина(СокрП(НомерСчета)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Лев(НомерСчета, 3) = "401";
	
КонецФункции

#КонецОбласти

#Область КодыБюджетнойКлассификации

// Приказ Минфина от 01.07.13 г. N 65н

// ┌──────────────────────────────────────────────────────────────────────────────────────┐
// │                     Структура кода классификации доходов бюджетов                    │
// ├──────────────┬─────────────────────────────────────────┬───────────┬─────────────────┤
// │ Код главного │        Код вида доходов бюджетов        │Код подвида│Код классификации│
// │администратора├───────┬───────┬───────┬─────────┬───────┤  доходов  │ операций сектора│
// │   доходов    │группа │под-   │статья │подстатья│элемент│ бюджетов  │ государственного│
// │   бюджета    │доходов│группа │доходов│ доходов │доходов│           │   управления,   │
// │              │       │доходов│       │         │       │           │  относящихся к  │
// │              │       │       │       │         │       │           │ доходам бюджетов│
// ├────┬────┬────┼───────┼───┬───┼───┬───┼──┬──┬───┼───┬───┼──┬──┬──┬──┼─────┬─────┬─────┤
// │ 1  │ 2  │ 3  │   4   │ 5 │ 6 │ 7 │ 8 │9 │10│11 │12 │13 │14│15│16│17│ 18  │ 19  │  20 │
// └────┴────┴────┴───────┴───┴───┴───┴───┴──┴──┴───┴───┴───┴──┴──┴──┴──┴─────┴─────┴─────┘

Функция РасположениеЭлементаКБК(ИмяЭлементаКБК) Экспорт
	
	Результат = Новый Структура("Начало, Длина", 0, 0);
	Если ИмяЭлементаКБК = "КодГлавногоАдминистратора" Тогда
		Результат.Начало = 1;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодГруппыДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 1;
	ИначеЕсли ИмяЭлементаКБК = "КодПодгруппыДоходов" Тогда
		Результат.Начало = 5;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "ПодгруппаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодСтатьиДоходов" Тогда
		Результат.Начало = 7;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодВидаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 10;
	ИначеЕсли ИмяЭлементаКБК = "КодЭлементаДоходов" Тогда
		Результат.Начало = 12;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодПодвидаДоходов" Тогда
		Результат.Начало = 14;
		Результат.Длина  = 4;
	ИначеЕсли ИмяЭлементаКБК = "КодОперацииСектораУправления" Тогда
		Результат.Начало = 18;
		Результат.Длина  = 3;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КБКЗадан(КБК) Экспорт
	
	Если НЕ РеквизитЗаполнен(КБК) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СокрП(КБК)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭлементКБК(КБК, ИмяЭлементаКБК) Экспорт
	
	РасположениеЭлемента = РасположениеЭлементаКБК(ИмяЭлементаКБК);
	
	Возврат Сред(КБК, РасположениеЭлемента.Начало, РасположениеЭлемента.Длина);
	
КонецФункции

Функция КодГлавногоАдминистратора(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодГлавногоАдминистратора");
	
КонецФункции

Функция ПустойКодГлавногоАдминистратора() Экспорт
	
	Результат = "";
	РасположениеЭлемента = РасположениеЭлементаКБК("КодГлавногоАдминистратора");
	Для Счетчик = 1 По РасположениеЭлемента.Длина Цикл
		Результат = Результат + "0";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодВидаДоходов(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодВидаДоходов");
	
КонецФункции

Функция ПодгруппаДоходов(КБК)
	
	Возврат ЭлементКБК(КБК, "ПодгруппаДоходов");
	
КонецФункции

Функция КодЭлементаДоходов(КБК)
	
	Возврат ЭлементКБК(КБК, "КодЭлементаДоходов");
	
КонецФункции

Функция КодОперацииСектораУправления(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодОперацииСектораУправления"); // КОСГУ
	
КонецФункции

Функция КодПодвидаДоходов(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодПодвидаДоходов");
	
КонецФункции

Функция ПустойКодПодвидаДоходов() Экспорт
	
	Результат = "";
	РасположениеЭлемента = РасположениеЭлементаКБК("КодПодвидаДоходов");
	Для Счетчик = 1 По РасположениеЭлемента.Длина Цикл
		Результат = Результат + "0";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонКБК(КБК, ПустойКодПодвидаДоходов = Истина) Экспорт
	
	Если НЕ КБКЗадан(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустойКодПодвидаДоходов Тогда
		Возврат КодВидаДоходов(КБК) + ПустойКодПодвидаДоходов() + КодОперацииСектораУправления(КБК);
	Иначе
		Возврат КодВидаДоходов(КБК) + КодПодвидаДоходов(КБК)    + КодОперацииСектораУправления(КБК);
	КонецЕсли;
	
КонецФункции

// значения отдельных элементов КБК

Функция ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = КодАдминистрированияНалоговымиОрганами();
	
КонецФункции

Функция ПлатежАдминистрируетсяПенсионнымФондом(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = КодАдминистрированияПенсионнымФондом();
	
КонецФункции

Функция ПлатежАдминистрируетсяФСС(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = КодАдминистрированияФСС();
	
КонецФункции

Функция ПлатежАдминистрируетсяТаможеннымиОрганами(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = КодАдминистрированияФТС();
	
КонецФункции

Функция КодАдминистрированияНалоговымиОрганами() Экспорт
	
	Возврат "182";
	
КонецФункции

Функция КодАдминистрированияПенсионнымФондом() Экспорт
	
	Возврат "392";
	
КонецФункции

Функция КодАдминистрированияФСС() Экспорт
	
	Возврат "393";
	
КонецФункции

Функция КодАдминистрированияФТС() Экспорт
	
	Возврат "153";
	
КонецФункции

Функция ЭтоНалоговыеДоходы(КБК) Экспорт
	
	// Выделяем платежи в уплату налогов, взносов и т.п., учитываемого на счетах 68 и 69.
	// Для этого смотрим на код подгруппы доходов (4,5,6 символы КБК).
	
	НалоговыеДоходы = Новый Массив;
	НалоговыеДоходы.Добавить("101"); // налоги на прибыль, доходы;
	НалоговыеДоходы.Добавить("102"); // страховые взносы на обязательное социальное страхование;
	НалоговыеДоходы.Добавить("103"); // налоги на товары (работы, услуги), реализуемые на территории Российской Федерации;
	НалоговыеДоходы.Добавить("104"); // налоги на товары, ввозимые на территорию Российской Федерации;
	НалоговыеДоходы.Добавить("105"); // налоги на совокупный доход;
	НалоговыеДоходы.Добавить("106"); // налоги на имущество;
	НалоговыеДоходы.Добавить("107"); // налоги, сборы и регулярные платежи за пользование природными ресурсами;
	НалоговыеДоходы.Добавить("109"); // задолженность и перерасчеты по отмененным налогам, сборам и иным обязательным платежам;
	НалоговыеДоходы.Добавить("112"); // платежи при пользовании природными ресурсами;
	
	Возврат НалоговыеДоходы.Найти(ПодгруппаДоходов(КБК)) <> Неопределено;
	
КонецФункции

Функция ЭтоСтраховыеВзносы(КБК) Экспорт
	
	Возврат ПодгруппаДоходов(КБК) = "102"; // страховые взносы на обязательное социальное страхование;
	
КонецФункции

Функция ЭтоКБКНалогиВзносы(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "1";
	
КонецФункции

Функция ЭтоКБКПени(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 2) = "21";
	
КонецФункции

Функция ЭтоКБКПроценты(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 2) = "22";
	
КонецФункции

Функция ЭтоКБКПениПроценты(КБК) Экспорт
	
	// Из этого правила могут быть исключения, но они редкие и мы их не обслуживаем
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "2";
	
	// В некоторых случаях может определяться по типу платежа - см. ТипПлатежаПени()
	
КонецФункции

Функция ЭтоКБКШтраф(КБК) Экспорт
	
	// Из этого правила могут быть исключения, но они редкие и мы их не обслуживаем
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "3";
	
	// В некоторых случаях штраф может также определяться по типу платежа
	
КонецФункции

Функция ЭтоФедеральныйБюджет(КБК) Экспорт
	
	Возврат КодЭлементаДоходов(КБК) = КодЭлементаДоходаФедеральногоБюджета();
	
КонецФункции

Функция ЭтоРегиональныйБюджет(КБК) Экспорт
	
	Возврат КодЭлементаДоходов(КБК) = КодЭлементаДоходаРегиональногоБюджета();
	
КонецФункции

Функция ЭтоЕдиныйНалоговыйПлатеж(КБК) Экспорт
	
	// ЕНП классифицируется как финансирование дефицита бюджета
	
	КодВидаДоходов = КодВидаДоходов(КБК);
	
	Возврат ПлатежАдминистрируетсяНалоговымиОрганами(КБК)
		И Лев(КодВидаДоходов, 4) = "0106" // Иные источники внутреннего финансирования дефицитов бюджетов
		И Прав(КодВидаДоходов, 1) = "1";  // Операции по управлению остатками средств на единых счетах бюджетов
	
КонецФункции

Функция КодЭлементаДоходаФедеральногоБюджета() Экспорт
	
	// Код вида доходов бюджетов имеет один из следующих кодов элемента доходов:
	// 01 - федеральный бюджет;
	// ...
	
	Возврат "01";
	
КонецФункции

Функция КодЭлементаДоходаРегиональногоБюджета() Экспорт
	
	// Код вида доходов бюджетов имеет один из следующих кодов элемента доходов:
	// ...
	// 02 - бюджет субъекта Российской Федерации;
	// ...
	
	Возврат "02";
	
КонецФункции

Функция КодыЭлементаДоходаМестногоБюджета() Экспорт
	
	// Код вида доходов бюджетов имеет один из следующих кодов элемента доходов:
	// ...
	// 03 - бюджеты внутригородских муниципальных образований городов федерального значения Москвы и Санкт-Петербурга;
	// 04 - бюджет городского округа;
	// 05 - бюджет муниципального района;
	// 10 - бюджет поселения
	// ...
	
	Возврат "03,04,05,10";
	
КонецФункции

#КонецОбласти

#Область КлассификаторыТерриторий

// КЛАССИФИКАТОРЫ ТЕРРИТОРИИ (ОКАТО / ОКТМО)

// Проверяем, только если передан Период.
//
// Параметры:
//	Период - Дата - дата формирования ОКТМО
//
// Возвращаемое значение:
//	Булево - признак применения.
//
Функция ПрименяетсяОКТМО8Символов(Период = Неопределено) Экспорт
	
	Возврат ЗначениеЗаполнено(Период)
		И Период >= НачалоДействияПриказа2017_58н();
	
КонецФункции

// Приводит код территории для платежей в бюджет к длине, установленной приказом Минфина 58н.
//
// Параметры:
//	КодТерритории - Строка - код ОКТМО.
//	Период - Дата - дата формирования ОКТМО
//
Процедура ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ПрименяетсяОКТМО8Символов(Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(КодТерритории)) > 8 Тогда
		КодТерритории = СокрП(Лев(КодТерритории, 8));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НалоговыйПериод
// Налоговый период - реквизит 107
// Период, к которому относится платеж (за который уплачивается).

// Возвращает список вариантов налоговых периодов
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с вариантами налоговых периодов.
//
Функция ВидыНалоговыхПериодов() Экспорт
	
	// Первые два знака налогового периода предназначены для определения периодичности уплаты.
	
	Периоды = Новый СписокЗначений;
	Периоды.Добавить(ПериодичностьМесяц(),     "МС - месячный платеж");
	Периоды.Добавить(ПериодичностьКвартал(),   "КВ - квартальный платеж");
	Периоды.Добавить(ПериодичностьПолугодие(), "ПЛ - полугодовой платеж");
	Периоды.Добавить(ПериодичностьГод(),       "ГД - годовой платеж"); 
	Периоды.Добавить(ПлатежПоКонкретнойДате(), "Платеж по конкретной дате");
	Периоды.Добавить(НезаполненноеЗначение(),  "0 - значение не указывается");
	
	Возврат Периоды;
	
КонецФункции

Функция ПериодичностьГод() Экспорт
	
	Возврат "ГД";
	
КонецФункции

Функция ПериодичностьПолугодие() Экспорт
	
	Возврат "ПЛ";
	
КонецФункции

Функция ПериодичностьКвартал() Экспорт
	
	Возврат "КВ";
	
КонецФункции

Функция ПериодичностьМесяц() Экспорт
	
	Возврат "МС";
	
КонецФункции

Функция ПлатежПоКонкретнойДате() Экспорт
	
	Возврат "-"; // Важно, чтобы отличалось от незаполненного значения
	
КонецФункции

Функция НалоговыйПериод(Период, Знач Периодичность, Знач Год = Неопределено, Знач НомерПериода = Неопределено) Экспорт
	
	Если Периодичность = НезаполненноеЗначение()
		ИЛИ ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		
		Возврат НезаполненноеЗначение();
		
	ИначеЕсли Периодичность = ПлатежПоКонкретнойДате() Тогда
		
		Возврат ПреобразоватьДатуКСтроке(Период);
		
	КонецЕсли;
	
	// Для остальных нужен Год и НомерПериода
	Если (НомерПериода = Неопределено ИЛИ Год = Неопределено)
		И НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
	Если Год = Неопределено Тогда
		Год          = Год(Период);
	КонецЕсли;
	
	Если НомерПериода = Неопределено Тогда
		НомерПериода = 0;
		
		Если Периодичность = ПериодичностьКвартал() Тогда
			НомерПериода = (2 + Месяц(НачалоКвартала(Период))) / 3;
		ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
			НомерПериода = Месяц(Период);
		ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
			Если Месяц(Период) <= 6 Тогда
				НомерПериода = 1;
			Иначе
				НомерПериода = 2;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Периодичность
		+ "." + Формат(НомерПериода, "ЧЦ=2; ЧН=; ЧВН=")
		+ "." + Формат(Год, "ЧЦ=4; ЧГ=");
	
КонецФункции

Функция ПредставлениеНалоговогоПериода(НалоговыйПериод) Экспорт
	
	ОписаниеПериода = РазобратьНалоговыйПериод(НалоговыйПериод);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Год",          Формат(ОписаниеПериода.Год,  "ЧГ=0"));
	ПараметрыТекста.Вставить("НомерПериода", ОписаниеПериода.НомерПериода);
	
	Если ОписаниеПериода.Периодичность = ПлатежПоКонкретнойДате() Тогда
		Шаблон = НСтр("ru = 'по сроку уплаты [Дата]';
						|en = 'by the payment deadline [Дата]'");
		ПараметрыТекста.Вставить("Дата", Формат(ОписаниеПериода.Дата, "ДЛФ=D"));
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьГод() Тогда
		Шаблон = НСтр("ru = 'за [Год] год';
						|en = 'for [Год]'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьПолугодие() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] полугодие [Год] года';
						|en = 'for [НомерПериода] half-year of [Год]'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьКвартал() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] квартал [Год] года';
						|en = 'for [НомерПериода] quarter of [Год]'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьМесяц() Тогда
		Шаблон = НСтр("ru = 'за [ИмяМесяца] [Год] года';
						|en = 'for [ИмяМесяца] [Год]'");
		ПараметрыТекста.Вставить("ИмяМесяца", Нрег(Формат(ОписаниеПериода.Дата, "ДФ=MMMM")));
	Иначе
		Шаблон = "";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыТекста);
	
КонецФункции

Процедура ПривестиЭлементыНалоговогоПериода(Периодичность, Год, НомерПериода, Дата, ТекущаяДата) Экспорт
	
	Если НЕ РеквизитЗаполнен(Периодичность)
		ИЛИ ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		Периодичность = НезаполненноеЗначение();
		ГодПлатежа    = 0;
		НомерПериода  = 0;
		Дата          = '0001-01-01';
		Возврат;
	КонецЕсли;
	
	Если Периодичность = ПлатежПоКонкретнойДате() Тогда
		
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			Дата = ТекущаяДата;
		КонецЕсли;
		
		ГодПлатежа = Год(Дата);
		
		Возврат;
		
	КонецЕсли;
	
	Если Год = 0 Тогда
		Год = Год(ТекущаяДата);
	КонецЕсли;
	
	Если Периодичность = ПериодичностьГод() Тогда
		НомерПериода = 0;
		Дата = Дата(Год, 1, 1);
		Возврат;
	КонецЕсли;
	
	НомерПериода = Макс(1, НомерПериода);
	Если Периодичность = ПериодичностьМесяц() Тогда
		НомерПериода = Мин(НомерПериода, 12);
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		НомерПериода = Мин(НомерПериода, 4);
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		НомерПериода = Мин(НомерПериода, 2);
	Иначе
		Возврат;
	КонецЕсли;
	
	Дата = ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода);
	
КонецПроцедуры

Функция ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода)
	
	Если Год = 0 Тогда
		Возврат Дата(1, 1, 1);
	ИначеЕсли НомерПериода = 0 Тогда
		Возврат Дата(Год, 1, 1);
	ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
		Возврат Дата(Год, НомерПериода, 1);
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		Возврат Дата(Год, НомерПериода * 3 - 2, 1);
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		Возврат Дата(Год, НомерПериода * 6 - 5, 1);
	Иначе
		Возврат Дата(Год, 1, 1);
	КонецЕсли;
	
КонецФункции

Функция РазобратьНалоговыйПериод(Знач НалоговыйПериод) Экспорт
	
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("Периодичность", НезаполненноеЗначение());
	ОписаниеПериода.Вставить("Год",           0);
	ОписаниеПериода.Вставить("НомерПериода",  0);
	ОписаниеПериода.Вставить("Дата",          '0001-01-01');
	
	// Реквизит 107 заполняется налоговым периодом, который имеет 10 знаков, 
	// восемь из которых имеют смысловое значение, а два являются разделительными знаками и заполняются точками (".").
	
	Если СтрДлина(НалоговыйПериод) <> 10 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	ЧастиПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НалоговыйПериод, ".", Ложь);
	Если ЧастиПериода.Количество() <> 3 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	// Предусмотрены два варианта:
	// 1. Первые два знака налогового периода предназначены для определения периодичности уплаты
	// 2. Форматом "день.месяц.год" указывается конкретная дата (например: "05.09.2003").
	
	Если СтрДлина(ЧастиПериода[0]) <> 2 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[1])
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[2]) Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Периодичность = ЧастиПериода[0];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Периодичность) Тогда
		Периодичность = ПлатежПоКонкретнойДате();
	ИначеЕсли ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если Периодичность = ПлатежПоКонкретнойДате() Тогда
		Попытка
			Значение = Дата(ЧастиПериода[2], ЧастиПериода[1], ЧастиПериода[0]);
		Исключение
			Значение = Неопределено;
		КонецПопытки;
		Если Значение = Неопределено Тогда
			Возврат ОписаниеПериода;
		Иначе
			ОписаниеПериода.Дата = Значение;
			ОписаниеПериода.Год  = Год(Значение);
		КонецЕсли;
	Иначе
		Попытка
			НомерПериода = Число(ЧастиПериода[1]);
			Год          = Число(ЧастиПериода[2]);
		Исключение
			НомерПериода = 0;
			Год          = 0;
		КонецПопытки;
		Если Год = 0 Тогда
			Возврат ОписаниеПериода;
		Иначе
			ОписаниеПериода.НомерПериода = НомерПериода;
			ОписаниеПериода.Год          = Год;
			ОписаниеПериода.Дата         = ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПериода.Периодичность = Периодичность;
	Возврат ОписаниеПериода;
	
КонецФункции

Функция ПреобразоватьДатуКСтроке(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") И ЗначениеЗаполнено(Дата) Тогда
		Возврат Формат(Дата, "ДЛФ=D");
	Иначе
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возвращает Незаполненное значение ("0")
//
// Возвращаемое значение:
//	Строка - "0".
//
Функция НезаполненноеЗначение() Экспорт
	
	// При невозможности указать конкретное значение, указывается ноль "0".
	// Наличие незаполненных реквизитов не допускается.
	
	Возврат "0";
	
КонецФункции

Функция ПениПроцентыРаздельно(КБК, Период) Экспорт
	
	Если ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Тогда
		
		Возврат ДействуетПриказ126н(Период);
		
	ИначеЕсли ПлатежАдминистрируетсяПенсионнымФондом(КБК) Тогда
		
		Возврат ДействуетПриказ90н(Период);
		
	ИначеЕсли ПлатежАдминистрируетсяФСС(КБК) Тогда
		
		Возврат ДействуетПриказ90н(Период);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ЕдиныйНалоговыйПлатеж

// Проверяет действие эксперимента согласно 379ФЗ.
//
// Параметры:
//	Период - Дата - дата проверки
//	
// Возвращаемое значение:
//	Булево - признак действия эксперимента согласно 379ФЗ
//
Функция ДействуетЭкспериментПоПрименениюЕНПСогласно379ФЗ(Период) Экспорт
	
	// Федеральный закон от 29.11.2021 № 379-ФЗ "О внесении изменений в часть первую Налогового кодекса Российской Федерации"
	// устанавливает сроки проведения эксперимента по применению единого налогового платежа при уплате налогов
	// с 1 июля 2022 года по 31 декабря 2022.
	
	ДатаНачалаЭксперимента = '20220701';
	ДатаОкончанияЭксперимента = '20221231';
	
	Возврат Период >= ДатаНачалаЭксперимента И Период <= КонецДня(ДатаОкончанияЭксперимента);
	
КонецФункции


// Проверяет действие 263ФЗ.
//
// Параметры:
//	Период - Дата - дата проверки
//	
// Возвращаемое значение:
//	Булево - признак действия 263ФЗ
//
Функция ДействуетФедеральныйЗакон263ФЗ(Период) Экспорт
	
	// Федеральный закон от 14.07.2022 № 263-ФЗ "О внесении изменений в части первую и вторую Налогового кодекса
	// Российской Федерации" устанавливает что с 1 января 2023 года уплата любых налогов будет в обязательном порядке
	// осуществляться посредством единого налогового платежа на единый налоговый счет.
	
	ДатаВступленияВСилу = '20230101';
	
	Возврат Период >= ДатаВступленияВСилу;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьВидимостьНастройкиПримененияЕНП(Форма) Экспорт
	
	Запись = Форма.Запись;
	Элементы = Форма.Элементы;
	
	Элементы.ПлательщикЕНП.Видимость =
		ДействуетЭкспериментПоПрименениюЕНПСогласно379ФЗ(Запись.Период) И НЕ Запись.ПрименяетсяАУСН;
	Элементы.ПлательщикЕНП.Заголовок =
		НСтр("ru = 'Единый налоговый платеж применяется с 01.07.2022 согласно 379-ФЗ';
			|en = 'Unified tax payment is applied since 07/01/2022 according to 379-FZ'");
	Элементы.ПлательщикЕНП.РасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Установите флажок, если организация или индивидуальный предприниматель перешли на уплату единого налогового платежа с 01.07.2022 в соответствии со ст. 45.2 НК РФ';
			|en = 'Select the check box if a company or an individual entrepreneur switched to a unified tax payment from 07/01/2022 in accordance with Article 45.2 of the Tax Code of the Russian Federation'");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УникальныйИдентификаторНачисления

Функция ПроверитьУИНПоФормату1_15(ИдентификаторПлатежа)
	
	Если СтрДлина(ИдентификаторПлатежа) <> МинимальнаяДлинаУИН() Тогда
		
		ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления должен состоять из %1 символов, а не из %2';
							|en = 'Unique ID of charges must consist of %1 characters, but not of %2'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, МинимальнаяДлинаУИН(), СтрДлина(ИдентификаторПлатежа));
		
	КонецЕсли;
	
	Если Лев(ИдентификаторПлатежа, 1) = "Ъ" Тогда
		// Применяем правила для администратора начислений
		// 1 разряд       - значение «Ъ» - признак администратора начислений
		// 2 - 7 разряды  - уникальный регистрационный код Участника, присваиваемый оператором ГИС ГМП;
		// 8 - 19 разряды - уникальный код, формируемый администратором начислений
		// 20 разряд      - контрольный.
		КодУчастника  = Сред(ИдентификаторПлатежа, 2, 6);
		КодНачисления = Сред(ИдентификаторПлатежа, 8, 12);
		
		АлфавитноЦифроваяЧасть = КодУчастника + КодНачисления;
		
	Иначе
		// Применяем правила для главного администратора доходов
		// 1-3  разряды - код главы бюджетной классификации (идентификатор главного администратора) - число
		// 4-19 разряды - уникальный код в рамках главного администратора - буквы и цифры
		// 20 разряд    - контрольный.
		КодАдминистратора  = Лев(ИдентификаторПлатежа, 3);
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодАдминистратора) Тогда
			Возврат НСтр("ru = 'Уникальный идентификатор начисления должен начинаться с трех цифр или с символа ""Ъ""';
						|en = 'The unique ID of charges should start with three digits or with the ""Ъ"" character'");
		КонецЕсли;
		
		АлфавитноЦифроваяЧасть = Сред(ИдентификаторПлатежа, 4, 16);
		
	КонецЕсли;
	
	// Проверим допустимость символов в алфавитно-цифровой части
	НедопустимыеСимволы = НедопустимыеАлфавитноЦифровыеСимволыУИН(АлфавитноЦифроваяЧасть);
	
	Если НедопустимыеСимволы.Количество() > 0 Тогда
		
		Для Индекс = 0 По НедопустимыеСимволы.ВГраница() Цикл
			НедопустимыеСимволы[Индекс] = "" + НедопустимыеСимволы[Индекс] + "";
		КонецЦикла;
		
		НедопустимыеСимволы = СтрСоединить(НедопустимыеСимволы, ",");
		
		ШаблонТекста = НСтр("ru = 'Уникальный идентификатор начисления не должен содержать символы: %1';
							|en = 'Unique ID of charges should not contain characters: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, НедопустимыеСимволы);
		
	КонецЕсли;
	
	// Проверим контрольный разряд
	
	КонтрольныйРазряд = Сред(ИдентификаторПлатежа, 20, 1);
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КонтрольныйРазряд) Тогда
		Возврат НСтр("ru = 'В последнем (20-м) знаке уникального идентификатора должно быть число - контрольный разряд';
					|en = 'There should be a check digit in the last (20th) character of a unique ID '");
	КонецЕсли;
	
	Попытка 
		КонтрольныйРазряд = Число(КонтрольныйРазряд);
	Исключение
		Возврат НСтр("ru = 'В последнем (20-м) знаке уникального идентификатора должно быть число - контрольный разряд';
					|en = 'There should be a check digit in the last (20th) character of a unique ID '");
	КонецПопытки;
	
	РассчитанныйКонтрольныйРазряд = КонтрольныйРазрядУИН(ИдентификаторПлатежа);
	Если КонтрольныйРазряд <> РассчитанныйКонтрольныйРазряд Тогда
		Возврат НСтр("ru = 'Контрольный разряд уникального идентификатора начисления не совпадает с рассчитанным.';
					|en = 'The check digit of the accrual unique ID does not match the calculated one.'");
	КонецЕсли;
	
	Возврат ""; // Ошибок не выявлено
	
КонецФункции

Функция ПроверитьУИНПоФормату1_16_1(ИдентификаторПлатежа)
	
	// Проверим контрольный разряд
	
	КонтрольныйРазряд = Прав(ИдентификаторПлатежа, 1);
	
	РассчитанныйКонтрольныйРазряд = КонтрольныйРазрядУИН(ИдентификаторПлатежа);
	Если КонтрольныйРазряд <> Формат(РассчитанныйКонтрольныйРазряд, "ЧН=0") Тогда
		Возврат НСтр("ru = 'Контрольный разряд уникального идентификатора начисления не совпадает с рассчитанным.';
					|en = 'The check digit of the accrual unique ID does not match the calculated one.'");
	КонецЕсли;
	
	Возврат ""; // Ошибок не выявлено
	
КонецФункции

Функция НедопустимыеАлфавитноЦифровыеСимволыУИН(ПроверяемаяСтрока)
	
	НедопустимыеСимволы = Новый Массив;
	
	ДопустимыеСимволы = НомераСимволовДляРасчетаКонтрольногоРазрядаУИН();
	
	Для НомерСимвола = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
		Символ = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		Если ДопустимыеСимволы[Символ] = Неопределено 
			И НедопустимыеСимволы.Найти(Символ) = Неопределено Тогда
			НедопустимыеСимволы.Добавить(Символ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НедопустимыеСимволы;
	
КонецФункции

Функция НомераСимволовДляРасчетаКонтрольногоРазрядаУИН()
	
	НомераСимволов = Новый Соответствие;
	
	НомераСимволов.Вставить("А", 1);  // Кириллица
	НомераСимволов.Вставить("A", 1);  // Латиница
	НомераСимволов.Вставить("Б", 2);  // Кириллица
	НомераСимволов.Вставить("В", 3);  // Кириллица
	НомераСимволов.Вставить("B", 3);  // Латиница
	НомераСимволов.Вставить("Г", 4);  // Кириллица
	НомераСимволов.Вставить("Д", 5);  // Кириллица
	НомераСимволов.Вставить("Е", 6);  // Кириллица
	НомераСимволов.Вставить("E", 6);  // Латиница
	НомераСимволов.Вставить("Ж", 7);  // Кириллица
	НомераСимволов.Вставить("З", 8);  // Кириллица
	НомераСимволов.Вставить("И", 9);  // Кириллица
	НомераСимволов.Вставить("К", 10); // Кириллица
	НомераСимволов.Вставить("K", 10); // Латиница
	НомераСимволов.Вставить("Л", 11); // Кириллица
	НомераСимволов.Вставить("М", 12); // Кириллица
	НомераСимволов.Вставить("M", 12); // Латиница
	НомераСимволов.Вставить("Н", 13); // Кириллица
	НомераСимволов.Вставить("H", 13); // Латиница
	НомераСимволов.Вставить("О", 14); // Кириллица
	НомераСимволов.Вставить("O", 14); // Латиница
	НомераСимволов.Вставить("П", 15); // Кириллица
	НомераСимволов.Вставить("Р", 16); // Кириллица
	НомераСимволов.Вставить("P", 16); // Латиница
	НомераСимволов.Вставить("С", 17); // Кириллица
	НомераСимволов.Вставить("C", 17); // Латиница
	НомераСимволов.Вставить("Т", 18); // Кириллица
	НомераСимволов.Вставить("T", 18); // Латиница
	НомераСимволов.Вставить("У", 19); // Кириллица
	НомераСимволов.Вставить("Y", 19); // Латиница
	НомераСимволов.Вставить("Ф", 20); // Кириллица
	НомераСимволов.Вставить("Х", 21); // Кириллица
	НомераСимволов.Вставить("X", 21); // Латиница
	НомераСимволов.Вставить("Ц", 22); // Кириллица
	НомераСимволов.Вставить("Ч", 23); // Кириллица
	НомераСимволов.Вставить("Ш", 24); // Кириллица
	НомераСимволов.Вставить("Щ", 25); // Кириллица
	НомераСимволов.Вставить("Э", 26); // Кириллица
	НомераСимволов.Вставить("Ю", 27); // Кириллица
	НомераСимволов.Вставить("Я", 28); // Кириллица
	НомераСимволов.Вставить("D", 29); // Латиница
	НомераСимволов.Вставить("F", 30); // Латиница
	НомераСимволов.Вставить("G", 31); // Латиница
	НомераСимволов.Вставить("I", 32); // Латиница
	НомераСимволов.Вставить("Ъ", 33); // Кириллица
	НомераСимволов.Вставить("J", 33); // Латиница
	НомераСимволов.Вставить("L", 34); // Латиница
	НомераСимволов.Вставить("N", 35); // Латиница
	НомераСимволов.Вставить("Ы", 36); // Кириллица
	НомераСимволов.Вставить("Q", 36); // Латиница
	НомераСимволов.Вставить("R", 37); // Латиница
	НомераСимволов.Вставить("S", 38); // Латиница
	НомераСимволов.Вставить("U", 39); // Латиница
	НомераСимволов.Вставить("V", 40); // Латиница
	НомераСимволов.Вставить("W", 41); // Латиница
	НомераСимволов.Вставить("Ь", 42); // Кириллица
	НомераСимволов.Вставить("Z", 42); // Латиница
	
	Для Цифра = 0 По 9 Цикл
		НомераСимволов.Вставить(Формат(Цифра, "ЧН=0"), Цифра);
	КонецЦикла;
	
	Возврат НомераСимволов;
	
КонецФункции

Функция КонтрольныйРазрядУИН(ИдентификаторПлатежа, СдвигПоследовательностиВесов = 0)
	
	ПроверяемаяСтрока = Лев(ИдентификаторПлатежа, СтрДлина(ИдентификаторПлатежа) - 1);
	
	НомераСимволов = НомераСимволовДляРасчетаКонтрольногоРазрядаУИН();
	
	СуммаВзвешенныхЗначений = 0;
	
	Для НомерСимвола = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
		
		Символ = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		
		// Каждому разряду кода, начиная со старшего разряда, присваивается набор весов, соответствующий натуральному ряду
		// чисел от 1 до 10. Если разрядность кода больше 10, то набор весов повторяется;
		Вес = (НомерСимвола + СдвигПоследовательностиВесов) % 10;
		Если Вес = 0 Тогда Вес = 10 КонецЕсли;
		
		// Если вместо цифры в коде присутствует буква, то значение данного разряда принимается равным остатку от деления 
		// порядкового номера буквы в алфавите на 10 (например, для буквы ‘Л’ значение разряда равно 11 mod 10 = 1,
		// а для буквы ‘N’ – равно 35 mod 10 = 5);
		Значение = НомераСимволов[Символ];
		Если Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Значение = Значение % 10;
		
		// Каждая цифра кода умножается на вес разряда и вычисляется сумма полученных произведений;
		СуммаВзвешенныхЗначений = СуммаВзвешенныхЗначений + Значение * Вес;
		
	КонецЦикла;
	
	// Контрольное число для кода представляет собой остаток от деления полученной суммы на модуль «11». 
	КонтрольноеЧисло = СуммаВзвешенныхЗначений % 11;
	
	// Контрольное число должно иметь один разряд, значение которого находится в пределах от 0 до 9;
	// если получается остаток, равный 10, то для обеспечения одноразрядного контрольного числа необходимо провести
	// повторный расчет, применяя вторую последовательность весов, сдвинутую на два разряда влево (3, 4, 5,...).
	// Если в случае повторного расчета остаток от деления вновь сохраняется равным 10, 
	// то значение контрольного числа проставляется равным «0».
	Если КонтрольноеЧисло < 10 Тогда
		Возврат КонтрольноеЧисло;
	ИначеЕсли СдвигПоследовательностиВесов > 0 Тогда
		Возврат 0;
	Иначе
		Возврат КонтрольныйРазрядУИН(ИдентификаторПлатежа, 2);
	КонецЕсли;
	
КонецФункции

Функция УИНСоответствуетКодуНормативноПравовогоАкта(УИН, ДлинаИдентификатора)
	
	// Код нормативного правового акта
	// по правилам 1-16 знаки которого принимают значение ноль "0"
	// а с 17 по 20 знаки указывается код нормативного правового акта (например, "00000000000000001234").
	// При этом все знаки уникального идентификатора начисления (кода нормативного правового акта)
	// одновременно не могут принимать значение ноль ("0").
	
	// Проверка на то, что в УИН только цифры и при этом все знаки не принимают значение "0",
	// реализована до вызова этой функции.
	
	Если ДлинаИдентификатора <> МинимальнаяДлинаУИН() Тогда
		// Это не код нормативно правового акта.
		Возврат Ложь;
	КонецЕсли;
	
	НулевыеЦифрыВНачалеКода = Лев(УИН, КоличествоНулейВНачалеКодаНормативноПравовогоАкта());
	Если Не ПустаяСтрока(СтрЗаменить(НулевыеЦифрыВНачалеКода, "0", "")) Тогда
		// Это не код нормативно правового акта.
		Возврат Ложь;
	КонецЕсли;
	
	// Данные в УИН удовлетворяют требованиям шаблона для кода нормативно правового акта.
	Возврат Истина;
	
КонецФункции

Функция КоличествоНулейВНачалеКодаНормативноПравовогоАкта()
	
	Возврат 16;
	
КонецФункции

#КонецОбласти

Функция РеквизитЗаполнен(Значение) Экспорт
	
	Возврат ЗначениеЗаполнено(Значение) И СокрП(Значение) <> НезаполненноеЗначение();
	
КонецФункции

Функция ОснованияНалоговогоПлатежа(ПрименениеПриказа107н, Период = Неопределено)
	
	ОснованияПлатежа = Новый СписокЗначений;
	
	ОснованияПлатежа.Добавить("ТП", НСтр("ru = 'ТП - платежи текущего года';
										|en = 'CP - current year payments'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ЗД", НСтр("ru = 'ЗД - добровольное погашение задолженности по истекшим налоговым периодам, расчетным (отчетным) периодам при отсутствии требования налогового органа об уплате налогов (сборов)';
											|en = 'ED is voluntary repayment of debt for the previous fiscal periods, payroll (accounting) periods without a demand of a tax authority to pay taxes (fees)'"));
		ОснованияПлатежа.Добавить("БФ", НСтр("ru = 'БФ - текущий платеж физического лица – клиента банка (владельца счета), уплачиваемые со своего банковского счета';
											|en = 'BF - the current payment of an individual who is a bank customer (account owner) paid from their bank account'"));
	Иначе
		ОснованияПлатежа.Добавить("ЗД", НСтр("ru = 'ЗД - добровольное погашение задолженности по истекшим налоговым периодам';
											|en = 'ED - voluntary repayment of debt for the previous fiscal periods'"));
		ОснованияПлатежа.Добавить("БФ", НСтр("ru = 'БФ - текущие платежи физических лиц - клиентов банка (владельцев счета), уплачиваемые со своего банковского счета';
											|en = 'BF - the current payments of individuals who are bank customers (account owners) made from their bank accounts'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ТР", НСтр("ru = 'ТР - погашение задолженности по требованию налогового органа об уплате налогов (сборов)';
										|en = 'TP - debt repayment at the tax authority request for tax (fee) payment'"));
	ОснованияПлатежа.Добавить("РС", НСтр("ru = 'РС - погашение рассроченной задолженности';
										|en = 'PC - repayment of the installment debt'"));
	ОснованияПлатежа.Добавить("ОТ", НСтр("ru = 'ОТ - погашение отсроченной задолженности';
										|en = 'OT - repayment of delayed debt'"));
	ОснованияПлатежа.Добавить("РТ", НСтр("ru = 'РТ - погашение реструктурируемой задолженности';
										|en = 'PT - repayment of the restructured debt'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ПБ", НСтр("ru = 'ПБ - погашение должником задолженности в ходе процедур, применяемых в деле о банкротстве';
											|en = 'PB - a debtor repays debt as part of procedures applied in a bankruptcy case'"));
	Иначе
		ОснованияПлатежа.Добавить("ВУ", НСтр("ru = 'ВУ - погашение отсроченной задолженности в связи с введением внешнего управления';
											|en = 'VU - repayment of deferred debt due to the introduction of external management'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ПР", НСтр("ru = 'ПР - погашение задолженности, приостановленной к взысканию';
										|en = 'PR - repayment of debt paused to be charged'"));
	ОснованияПлатежа.Добавить("АП", НСтр("ru = 'АП - погашение задолженности по акту проверки';
										|en = 'AP - debt repayment acc. to inspection certificate'"));
	ОснованияПлатежа.Добавить("АР", НСтр("ru = 'АР - погашение задолженности по исполнительному документу';
										|en = 'AP - repayment of debt under the garnishment order'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ИН", НСтр("ru = 'ИН - погашение инвестиционного налогового кредита';
											|en = 'IN - repayment of the investment tax loan'"));
		ОснованияПлатежа.Добавить("ТЛ", НСтр("ru = 'ТЛ - погашение учредителем (участником) должника, собственником имущества должника - унитарного предприятия или третьим лицом задолженности в ходе процедур, применяемых в деле о банкротстве';
											|en = 'TP - repayment of debt of the debtor by founder (participant), owner of debtor property - a unitary enterprise or a third party during the procedures applied in the bankruptcy case'"));
		ОснованияПлатежа.Добавить("ЗТ", НСтр("ru = 'ЗТ - погашение текущей задолженности в ходе процедур, применяемых в деле о банкротстве';
											|en = 'ZT - repayment of the current debt during procedures applied in the bankruptcy case'"));
	КонецЕсли;
	
	Если ПрименениеПриказа107н
		И ДействуетПриказ199н_202110(Период) Тогда
		
		СписокИзменений = Новый СписокЗначений;
		СписокИзменений.Добавить("ЗД", НСтр("ru = 'ЗД - погашение задолженности, по истекшим налоговым, расчетным (отчетным) 
									|периодам, в том числе добровольное';
									|en = 'ZD - debt repayment for expired tax, pаyroll (accounting) 
									|periods, including voluntary'"));
		СписокИзменений.Добавить("ТЛ", НСтр("ru = 'ТЛ - погашение учредителем (участником) должника, собственником имущества 
									|должника - унитарного предприятия или третьим лицом требований к 
									|должнику об уплате обязательных платежей в ходе процедур, применяемых в деле о банкротстве';
									|en = 'TP - debtor''s debt repayment by founder (participant), owner of 
									|debtor property - a unitary enterprise or third party claims to the 
									|debtor for the payment of mandatory payments during procedures applied in the bankruptcy case'"));
		
		ДобавитьИзменитьПунктыОснованияПлатежа(ОснованияПлатежа, СписокИзменений);
		
		МассивДляУдаления = Новый Массив;
		МассивДляУдаления.Добавить("БФ");
		МассивДляУдаления.Добавить("ТР");
		МассивДляУдаления.Добавить("ПР");
		МассивДляУдаления.Добавить("АП");
		МассивДляУдаления.Добавить("АР");
		
		УдалитьПунктыОснованияПлатежа(ОснованияПлатежа, МассивДляУдаления);
		
	КонецЕсли;
	
	Возврат ОснованияПлатежа;
	
КонецФункции

Функция ОснованияТаможенногоПлатежа(ПрименениеПриказа107н, Период = Неопределено)
	
	ОснованияПлатежа = Новый СписокЗначений;
	
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("ДЕ", НСтр("ru = 'ДЕ - декларация на товары';
											|en = 'DE - goods declaration'"));
	Иначе
		ОснованияПлатежа.Добавить("ДЕ", НСтр("ru = 'ДЕ - таможенная декларация';
											|en = 'DE - customs declaration'"));
	КонецЕсли;
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		ОснованияПлатежа.Добавить("ПД", НСтр("ru = 'ПД - пассажирская таможенная декларация';
											|en = 'PD is passenger customs declaration'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ПО", НСтр("ru = 'ПО - таможенный приходный ордер';
										|en = 'PO - customs goods receipt note'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("КТ", НСтр("ru = 'КТ - корректировка таможенной стоимости и таможенных платежей или корректировка декларации на товары';
											|en = 'CC - adjusting entries of the customs value and custom payments or adjusting entries of goods declaration'"));
	Иначе
		ОснованияПлатежа.Добавить("КВ", НСтр("ru = 'КВ - постановление-квитанция (при уплате штрафа)';
											|en = 'KV - receipt decision (when paying the fine)'"));
		ОснованияПлатежа.Добавить("КТ", НСтр("ru = 'КТ - форма корректировки таможенной стоимости и таможенных платежей';
											|en = 'CC - form of adjustment of the customs value and customs duties'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ИД", НСтр("ru = 'ИД - исполнительный документ';
										|en = 'GD - garnishment document'"));
	ОснованияПлатежа.Добавить("ИП", НСтр("ru = 'ИП - инкассовое поручение';
										|en = 'CO - collection order'"));
	ОснованияПлатежа.Добавить("ТУ", НСтр("ru = 'ТУ - требование об уплате таможенных платежей';
										|en = 'TY - customs charge payment request'"));
	Если ПрименениеПриказа107н Тогда
		ОснованияПлатежа.Добавить("БД", НСтр("ru = 'БД - документы финансово-хозяйственной деятельности таможенных органов';
											|en = 'AD - documents of financial and economic activity of customs authorities'"));
	Иначе
		ОснованияПлатежа.Добавить("БД", НСтр("ru = 'БД - документы бухгалтерских служб таможенных органов';
											|en = 'AD - documents from accounting business units of customs authorities'"));
	КонецЕсли;
	ОснованияПлатежа.Добавить("ИН", НСтр("ru = 'ИН - документ инкассации';
										|en = 'EN - cash collection document'"));
	ОснованияПлатежа.Добавить("КП", НСтр("ru = 'КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке';
										|en = 'KP - agreement on interaction during payments by major payers'"));
	
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		ОснованияПлатежа.Добавить("КВ", НСтр("ru = 'КВ - квитанция получателя международного почтового отправления';
											|en = 'R - receipt of international mailing recipient '"));
	КонецЕсли;
	
	Если ПрименениеПриказа107н Тогда
		
		Если ДействуетПриказ199н_202101(Период) Тогда
			
			СписокИзменений = Новый СписокЗначений;
			СписокИзменений.Добавить("ПК", НСтр("ru = 'ПК - таможенный приходный ордер';
												|en = 'PK - customs goods received note'"));
			СписокИзменений.Добавить("УВ", НСтр("ru = 'УВ - уведомление (уточнение к уведомлению) о не уплаченных в 
										|установленный срок суммах таможенных платежей, специальных, антидемпинговых, 
										|компенсационных пошлин, процентов и пеней';
										|en = 'UV - notification (clarification to the notification) about unpaid at the 
										|stated time amounts of customs payments, special, anti-dumping, 
										|countervailing duties, interest and fines'"));
			СписокИзменений.Добавить("ИЛ", НСтр("ru = 'ИЛ - исполнительный лист';
												|en = 'GO - garnishment order'"));
			СписокИзменений.Добавить("ПБ", НСтр("ru = 'ПБ - поручение таможенного органа на бесспорное взыскание';
												|en = 'PB - customs authority order for undisputed collection'"));
			СписокИзменений.Добавить("ТГ", НСтр("ru = 'ТГ - требование об уплате денежных средств гарантирующим 
										|объединением (ассоциацией)';
										|en = 'TG - request for cash payment by the guaranteeing 
										|association'"));
			СписокИзменений.Добавить("ТБ", НСтр("ru = 'ТБ - требование об уплате суммы по банковской гарантии или 
										|договору поручительства, если уплата денежных средств производится по 
										|банковской гарантии';
										|en = 'TB - request for payment of a sum under a bank guarantee or a 
										|surety agreement if the cash payment is made under a 
										|bank guarantee'"));
			СписокИзменений.Добавить("ТД", НСтр("ru = 'ТД - требование об уплате суммы по банковской гарантии или 
										|договору поручительства, если уплата денежных средств производится по 
										|договору поручительства';
										|en = 'TD - request for payment of a sum under a bank guarantee or a 
										|surety agreement if the cash payment is made under a 
										|surety agreement'"));
			СписокИзменений.Добавить("ПВ", НСтр("ru = 'ПВ - постановление о взыскании таможенных платежей, 
										|специальных, антидемпинговых, компенсационных пошлин, процентов и пени 
										|за счет имущества';
										|en = 'PV - decree on the collection of customs payments, 
										|special, anti-dumping, countervailing duties, interest and fines 
										|from property'"));
			
			Если ДействуетПриказ199н_202110(Период) Тогда
				СписокИзменений.Добавить("КЭ", НСтр("ru = 'КЭ - квитанция физического лица - получателя товаров, 
											|перемещаемых в качестве экспресс-грузов';
											|en = 'KE - receipt of an individual who is a recipient of goods 
											|transported as express cargo'"));
			КонецЕсли;
			
			ДобавитьИзменитьПунктыОснованияПлатежа(ОснованияПлатежа, СписокИзменений);
			
			МассивДляУдаления = Новый Массив;
			МассивДляУдаления.Добавить("ДЕ");
			МассивДляУдаления.Добавить("ПД");
			МассивДляУдаления.Добавить("ПО");
			МассивДляУдаления.Добавить("КТ");
			МассивДляУдаления.Добавить("ИД");
			МассивДляУдаления.Добавить("ИП");
			МассивДляУдаления.Добавить("ТУ");
			МассивДляУдаления.Добавить("КП");
			МассивДляУдаления.Добавить("ДК");
			МассивДляУдаления.Добавить("КК");
			МассивДляУдаления.Добавить("ТК");
			
			Если ДействуетПриказ199н_202110(Период) Тогда
				
				МассивДляУдаления.Добавить("БД");
				МассивДляУдаления.Добавить("КВ");
				
			КонецЕсли;
			
			УдалитьПунктыОснованияПлатежа(ОснованияПлатежа, МассивДляУдаления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОснованияПлатежа.Добавить("00", НСтр("ru = '00 - иные случаи';
										|en = '00 - other cases'"));
	
	Возврат ОснованияПлатежа;
	
КонецФункции 

Функция ТипыНалоговогоПлатежа(ПрименениеПриказа107н)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ПрименениеПриказа107н Тогда
		ТипыПлатежа.Добавить("0", НСтр("ru = '0 - все, кроме пени и процентов';
										|en = '0 - all except for penalties and percents'"));
		ТипыПлатежа.Добавить("ПЕ", НСтр("ru = 'ПЕ - уплата пени';
										|en = 'PE - penalty fee payment'"));
		ТипыПлатежа.Добавить("ПЦ", НСтр("ru = 'ПЦ - уплата процентов';
										|en = 'PC - interest payment'"));
	Иначе
		ТипыПлатежа.Добавить("НС", НСтр("ru = 'НС - уплата налога или сбора';
										|en = 'TF - tax or fee payment'"));
		ТипыПлатежа.Добавить("ПЛ", НСтр("ru = 'ПЛ - уплата платежа';
										|en = 'PL - payment'"));
		ТипыПлатежа.Добавить("ГП", НСтр("ru = 'ГП - уплата пошлины';
										|en = 'GP - duty payment'"));
		ТипыПлатежа.Добавить("ВЗ", НСтр("ru = 'ВЗ - уплата взноса';
										|en = 'VZ - contribution payment'"));
		ТипыПлатежа.Добавить("АВ", НСтр("ru = 'АВ - уплата аванса или предоплата (в том числе декадные платежи)';
										|en = 'AB - payment of advance or prepayment (including the ten-day period payments)'"));
		ТипыПлатежа.Добавить("ПЕ", НСтр("ru = 'ПЕ - уплата пени';
										|en = 'PE - penalty fee payment'"));
		ТипыПлатежа.Добавить("ПЦ", НСтр("ru = 'ПЦ - уплата процентов';
										|en = 'PC - interest payment'"));
		ТипыПлатежа.Добавить("СА", НСтр("ru = 'СА - налоговые санкции, установленные Налоговым кодексом РФ';
										|en = 'CA - tax penalties set by the RF Tax Code'"));
		ТипыПлатежа.Добавить("АШ", НСтр("ru = 'АШ - административные штрафы';
										|en = 'AF - administrative fines'"));
		ТипыПлатежа.Добавить("ИШ", НСтр("ru = 'ИШ - иные штрафы, установленные соответствующими нормативными актами';
										|en = 'OF - other fines set by the corresponding regulations'"));
		ТипыПлатежа.Добавить("0", НСтр("ru = '0 - невозможно указать конкретное значение показателя';
										|en = '0 - cannot specify a particular value of the indicator'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыТаможенногоПлатежа(ПрименениеПриказа107н)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ПрименениеПриказа107н Тогда
		ТипыПлатежа.Добавить("0", НСтр("ru = '0 - текущий платеж';
										|en = '0 - current payment'"));
	Иначе
		ТипыПлатежа.Добавить("ТП", НСтр("ru = 'ТП - текущий платеж';
										|en = 'CP - current payment'"));
	КонецЕсли;
	ТипыПлатежа.Добавить("ШТ", НСтр("ru = 'ШТ - уплата штрафа';
									|en = 'PF - payment of fine'"));
	ТипыПлатежа.Добавить("ЗД", НСтр("ru = 'ЗД - уплата в счет погашения задолженности';
									|en = 'ZD - payment on account of the debt repayment'"));
	ТипыПлатежа.Добавить("ПЕ", НСтр("ru = 'ПЕ - уплата пени';
									|en = 'PE - penalty fee payment'"));
	Если Не ПрименениеПриказа107н Тогда
		ТипыПлатежа.Добавить("0", НСтр("ru = '0 - невозможно указать конкретное значение показателя';
										|en = '0 - cannot specify a particular value of the indicator'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

// Возвращает минимальную длину кода УИН
//
// Возвращаемое значение:
//	Число - количество символов УИН.
//
Функция МинимальнаяДлинаУИН()
	
	Возврат 20;
	
КонецФункции

// Возвращает максимальную длину кода УИН
//
// Возвращаемое значение:
//	Число - количество символов УИН.
//
Функция МаксимальнаяДлинаУИН()
	
	Возврат 25;
	
КонецФункции

// Вносит изменения в существующие элементы списка основания платежа
//
// Параметры:
//	ОснованияПлатежа - СписокЗначений - список элементов
//	СписокИзменений - СписокЗначений - список для изменения
//
Процедура ДобавитьИзменитьПунктыОснованияПлатежа(ОснованияПлатежа, СписокИзменений)
	
	Для Каждого СтрокаСписка Из СписокИзменений Цикл
		
		ИскомыйЭлементСписка = ОснованияПлатежа.НайтиПоЗначению(СтрокаСписка.Значение);
		
		Если ИскомыйЭлементСписка = Неопределено Тогда
			ИскомыйЭлементСписка = ОснованияПлатежа.Добавить(СтрокаСписка.Значение);
		КонецЕсли;
		
		ИскомыйЭлементСписка.Представление = СтрокаСписка.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет элементы списка основания платежа
//
// Параметры:
//	ОснованияПлатежа - СписокЗначений - список элементов
//	МассивДляУдаления - Массив - массив для удаления элементов списка
//
Процедура УдалитьПунктыОснованияПлатежа(ОснованияПлатежа, МассивДляУдаления)
	
	Для Каждого СтрокаМассива Из МассивДляУдаления Цикл
		
		УдаляемыйЭлемент = ОснованияПлатежа.НайтиПоЗначению(СтрокаМассива);
		
		Если УдаляемыйЭлемент <> Неопределено Тогда
			ОснованияПлатежа.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дату действия приказа 199н от 14.09.2020 с 01.10.2021
//
// Возвращаемое значение:
//	Дата - дата начала действия пункта приказа
//
Функция НачалоДействияПриказа199н_202110()
	
	Возврат Дата('20211001');
	
КонецФункции

// Возвращает дату действия приказа 199н от 14.09.2020 с 01.07.2021
//
// Возвращаемое значение:
//	Дата - дата начала действия пункта приказа
//
Функция НачалоДействияПриказа199н_202107()
	
	Возврат Дата('20210701');
	
КонецФункции

// Возвращает дату действия приказа 199н от 14.09.2020 с 01.01.2021
//
// Возвращаемое значение:
//	Дата - дата начала действия пункта приказа
//
Функция НачалоДействияПриказа199н_202101()
	
	Возврат Дата('20210101');
	
КонецФункции

// Возвращает дату действия приказа 199н от 30.12.2022 с 11.02.2023
//
// Возвращаемое значение:
//	Дата - дата начала действия пункта приказа
//
Функция НачалоДействияПриказа199н_202302()
	
	Возврат Дата('20230211');
	
КонецФункции

// Возвращает дату действия приказа 199н от 30.12.2022 с 01.10.2023
//
// Возвращаемое значение:
//	Дата - дата начала действия пункта приказа
//
Функция НачалоДействияПриказа199н_202310()
	
	Возврат Дата('20231001');
	
КонецФункции

// Возвращает дату действия приказа 199н от 30.12.2022 с 01.01.2024
//
// Возвращаемое значение:
//	Дата - дата начала действия пункта приказа
//
Функция НачалоДействияПриказа199н_202401()
	
	Возврат Дата('20240101');
	
КонецФункции

Функция НачалоДействияПриказа126н() Экспорт
	
	// Приказ Минфина №126н от 30.10.2014.
	
	Возврат '2015-01-01';
	
КонецФункции

Функция НачалоДействияПриказа90н() Экспорт
	
	// Приказ Минфина №90н от 08.06.2015.
	
	Возврат '2016-01-01';
	
КонецФункции

// Возвращает дату действия указания (изменения положения 762-П от 29.06.2021) с 01.05.2022
//
// Возвращаемое значение:
//	Дата - дата начала действия пункта указания
//
Функция НачалоДействияУказания762П_202205()
	
	Возврат Дата('20220501');
	
КонецФункции

// Возвращает дату действия изменения приказа 107н от 12.11.2013 с 20.06.2022
//
// Возвращаемое значение:
//	Дата - дата начала действия изменения
//
Функция НачалоДействияИзмененияПриказа107н_202206()
	
	Возврат Дата('20220620');
	
КонецФункции

Функция ДлинаКодаНПА()
	
	Возврат 4;
	
КонецФункции

#КонецОбласти
