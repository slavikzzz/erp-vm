#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.39";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("14ab3bc1-f294-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ОбновитьПубликуемыеПодразделенияПредприятия";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикуемых подразделений предприятия.';
										|en = 'Updating the published enterprise business units.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.16.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("b36c70c0-1920-11eb-80e8-4cedfb43b144");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ВыполнитьНачальныйПереносДанныхГрафикаОтпусков";
	Обработчик.Комментарий     = НСтр("ru = 'Начальный перенос данных графика отпусков в ESS.';
										|en = 'Initial transfer of leave schedule data to ESS.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("13ae995b-fa23-4aa4-8de9-729416ccc230");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьПубликациюГрафиковРаботы";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация публикации графиков работы.';
										|en = 'Registration of work schedules publication.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.34";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("edb665b7-cfd5-43ba-bda8-44e90ae9c7ec");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьПубликациюДанныхГрафиковРаботы";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация публикации данных графиков работы в сервисе 1С:Кабинет сотрудника.';
										|en = 'Register work schedule data publishing in 1C:Employee Account service.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f84d15a7-bef0-4f31-b525-9b353a8ff6ee");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ОтменитьРегистрациюГруппГрафиковРаботы";
	Обработчик.Комментарий     = НСтр("ru = 'Отмена регистрации групп графиков работы в сервисе 1С:Кабинет сотрудника.';
										|en = 'Cancel registration of work schedule groups in 1C:Employee Account service.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.64";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f9011296-3af9-11eb-80e9-4cedfb43b144");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.НастроитьРегламентноеЗаданиеПроверкаАктуальностиИнформацииОбОтпуске";
	Обработчик.Комментарий     = НСтр("ru = 'Настройка регламентного задания Проверка актуальности информации об отпуске.';
										|en = 'Configure Checking leave details relevance scheduled task.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.8";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("4dd9c9f2-010b-4379-b523-a4de3dcbffd9");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьПубликациюВидовСправок";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация публикации видов справок.';
										|en = 'Register statement kind publication.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.20";  
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a8900b29-384d-4854-9387-596136fd6189");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьОбновлениеФункциональностиСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления функциональности сервиса 1С:Кабинет сотрудника.';
										|en = 'Register the update of 1C:Employee Account functionality.'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписаниеAPI

Функция РесурсИнформацияОбОтпуске()
	
	Возврат "/vacations/summaries";
	
КонецФункции

Функция РесурсГрафикОтпусков() 
	
	Возврат "/vacations-schedule";
	
КонецФункции

Функция РесурсБудущиеИзмененияОстатковОтпусков()
	
	Возврат "/vacations/unused-days-predicted";
	
КонецФункции

Функция РесурсГрафикиРаботы()
	
	Возврат "/work-schedules";
	
КонецФункции

Функция РесурсПраздничныеДниГрафиковРаботы()
	
	Возврат "/holidays";
	
КонецФункции

Функция РесурсДанныеГрафикаРаботы()

	Возврат "/work-schedules-data";

КонецФункции

Функция РесурсПлановыеУдержания()

	Возврат "/contributions";

КонецФункции

Функция РесурсВидовПредоставляемыхСправок()

	Возврат "/employment-certificates/types";

КонецФункции

#КонецОбласти

#Область ОписанияОбъектов

// Описание объекта - vacationUseInfo.
Функция ОписаниеОбъектаИнформацииОбОтпусках()

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("personID", 			"ФизическоеЛицо", Тип("Строка"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("daysNotUsed", 			"ОстатокОтпуска", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("leaveEncashmentDays", 	"ДнейКомпенсации", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("minVacationLength", 	"ДопустимаяПродолжительностьОтпуска", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("previousVacation", 	"ИнформацияОПредыдущемОтпуске", Тип("Структура"), ОписаниеОбъектаИнформацииОбОтпуске()));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("nextVacation", 		"ИнформацияОСледующемОтпуске", Тип("Структура"), ОписаниеОбъектаИнформацииОбОтпуске()));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationInfo.
Функция ОписаниеОбъектаИнформацииОбОтпуске()

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("startDate", 	"ДатаНачала", Тип("Дата"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("endDate", 		"ДатаОкончания", Тип("Дата"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("days", 		"КоличествоДней", Тип("Число"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("description", 	"Комментарий", Тип("Строка")));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationUnusedDaysPredicted.
Функция ОписаниеОбъектаБудущиеИзмененияОстатковОтпуска()
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("personID", "ФизическоеЛицо", Тип("Строка"),,Истина));
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("components", "Остатки", Тип("ТаблицаЗначений"), ОписаниеОбъектаСтрокаБудущихИзмененийОстатковОтпуска()));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - vacationUnusedDaysPredictedComponent.
Функция ОписаниеОбъектаСтрокаБудущихИзмененийОстатковОтпуска()
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("date", "Период", Тип("Дата"),,Истина));
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("daysNotUsed", "КоличествоДней", Тип("Число"),,Истина));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - vacationsSchedule.
Функция ОписаниеОбъектаГрафикОтпусков(ВерсияDTO)

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("Строка")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("components", 	"Компоненты", Тип("Структура"), ОписаниеОбъектаЭлементГрафикаОтпусков(ВерсияDTO)));

	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - vacationsScheduleItem.
Функция ОписаниеОбъектаЭлементГрафикаОтпусков(ВерсияDTO)

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("startDate", 	"ДатаНачала", Тип("Дата")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("endDate", 		"ДатаОкончания", Тип("Дата")));

	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - holidays.
Функция ОписаниеОбъектаПраздничныеДниГрафика(ВерсияDTO)
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("workScheduleID", 	"ГрафикРаботы", Тип("СправочникСсылка.ГрафикиРаботыСотрудников")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("components", 	"Компоненты", Тип("Структура"), ОписаниеОбъектаГодДатаПраздничныйДень(ВерсияDTO)));

	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - holidaysItem.
Функция ОписаниеОбъектаГодДатаПраздничныйДень(ВерсияDTO)
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("year", 	"Год", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("date", 	"Дата", Тип("Дата")));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание полей объекта - workSchedule.
Функция ОписаниеПолейГрафиковРаботы(ВерсияDTO)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"ГрафикРаботы");
	СоответствиеПолей.Вставить("name",		"Наименование");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - workScheduleData.
Функция ОписаниеПолейДанныеГрафикаРаботы()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("workScheduleID", 	"ГрафикРаботы");
	СоответствиеПолей.Вставить("date", 				"Дата");
	СоответствиеПолей.Вставить("dayType", 			"ТипДня");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - certificateFromEmployerType.
Функция ОписаниеПолейВидовПредоставляемыхСправок(ВерсияDTO)

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("ID", 			"ВидСправки", Тип("Строка")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("presentation", "Представление", Тип("Строка")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("description", 	"Описание", Тип("Строка")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("inUse", 		"Используется", Тип("Булево")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("order", 		"РеквизитДопУпорядочивания", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("sample", 		"Образец", Неопределено, МодульКС.ОписаниеОбъектаФайл(ВерсияDTO)));
	Возврат ОписаниеОбъекта;

КонецФункции

#Область ОписаниеПеречислений

// Описание значений - dayType.
Функция ОписаниеТипДня()

	Описание = Новый Соответствие;
	Описание.Вставить("рабочий",  "work");
	Описание.Вставить("выходной", "rest");
	Описание.Вставить("праздник", "holiday");
	
	Возврат Описание;
	
КонецФункции

Функция ЗначениеРабочийДень()

	Описание = ОписаниеТипДня();
	Возврат Описание["рабочий"];

КонецФункции

Функция ЗначениеВыходнойДень()

	Описание = ОписаниеТипДня();
	Возврат Описание["выходной"];

КонецФункции

#КонецОбласти

// Описание объекта - divisionVacationsSchedule.
Функция ОписаниеОбъектаГрафикОтпусковПодразделения(ВерсияDTO)
	
	ОписаниеОбъекта = Новый Массив;
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияDTO, "1.1") Тогда
		// не используется
	ИначеЕсли КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияDTO, "1.2") Тогда
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("ID", 			"ИдентификаторДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("year", 		"Год", Тип("Число")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("divisionID", 	"Подразделение", Тип("Строка")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("status", 		"СостояниеСбораГрафиковОтпусков", Тип("ПеречислениеСсылка.СостоянияСбораГрафиковОтпусков")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("periods",		"Периоды", Тип("ТаблицаЗначений"), ОписаниеОбъектаПериодГрафикаОтпусков(ВерсияDTO)));
	Иначе
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("ID", 			"ИдентификаторДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("year", 		"Год", Тип("Число")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("divisionID", 	"Подразделение", Тип("Строка")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("status", 		"СостояниеСбораГрафиковОтпусков", Тип("ПеречислениеСсылка.СостоянияСбораГрафиковОтпусков")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("periods",		"Периоды", Тип("ТаблицаЗначений"), ОписаниеОбъектаПериодГрафикаОтпусков(ВерсияDTO)));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("responsibleID", "Ответственный", Тип("Строка")));
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationsSchedulePeriod.
Функция ОписаниеОбъектаПериодГрафикаОтпусков(ВерсияDTO)
	
	ОписаниеПолей = Новый Массив;
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияDTO, "1.1") Тогда
		// не используется
	Иначе
		ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("personID",	"ФизическоеЛицо", Тип("Строка")));
		ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("startDate",	"ДатаНачала", Тип("Дата")));
		ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("endDate",	"ДатаОкончания", Тип("Дата")));
	КонецЕсли;
	
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание полей объекта - enterpriseVacationsSchedule.
Функция ОписаниеПолейСборГрафиковОтпусков(ВерсияDTO)
	
	СоответствиеПолей = Новый Соответствие;
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияDTO, "1.1") Тогда
		// не используется
	ИначеЕсли КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияDTO, "1.2") Тогда
		СоответствиеПолей.Вставить("ID",		"ИдентификаторДокумента");
		СоответствиеПолей.Вставить("year", 		"Год");
		СоответствиеПолей.Вставить("status", 	"Состояние");
	Иначе
		СоответствиеПолей.Вставить("ID",		"ИдентификаторДокумента");
		СоответствиеПолей.Вставить("year", 		"Год");
		СоответствиеПолей.Вставить("status", 	"Состояние");
		СоответствиеПолей.Вставить("initiatorID", "ИнициаторСбора");
	КонецЕсли;
	
	Возврат СоответствиеПолей;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура ЗарегистрироватьОбновлениеДанныхГрафиковРаботы() Экспорт

	ТекущийГод = Год(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийГод", ТекущийГод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
	|	&ТекущийГод КАК Год
	|ИЗ
	|	ВТГрафики КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК ИзмененияДанныхГрафика
	|		ПО ГрафикиРаботы.Ссылка = ИзмененияДанныхГрафика.ГрафикРаботы
	|			И (ИзмененияДанныхГрафика.Год = &ТекущийГод)
	|ГДЕ
	|	ИзмененияДанныхГрафика.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрафикРаботы", "ГрафикРаботы");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Год", "Год");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ГрафикРаботы = Выборка.ГрафикРаботы;
			Запись.Год = Выборка.Год;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеГрафиковРаботы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|ГДЕ
	|	НЕ ГрафикиРаботыСотрудников.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ГрафикиРаботы.Ссылка = ПубликуемыеОбъекты.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.Ссылка = Выборка.Ссылка;
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.Ссылка = Изменения.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|	И Изменения.ВерсияДанных ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник)
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.Ссылка = Изменения.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.Сотрудники
	|	И Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.Ссылка 		= Выборка.Ссылка;
			Запись.ТипОбъекта 	= Выборка.ТипОбъекта;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область Публикация

Процедура ОпубликоватьЗарегистрированныеИзменения(ПараметрыОбмена, ТаблицаОбработано, ТаблицаИзменений, Результат) Экспорт
	
	Отбор = Новый Структура("ТипОбъекта");
	
	Если КабинетСотрудника.ИспользоватьФормат301() Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
		Отбор.ТипОбъекта = ТипОбъекта;
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиГрафиковРаботы(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ИнтеграцияУправлениеПерсоналомОбмен.ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
			Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если КабинетСотрудника.ИспользоватьФормат50375() Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки;
		Отбор.ТипОбъекта = ТипОбъекта;
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиВидовПредоставляемыхСправок(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ИнтеграцияУправлениеПерсоналомОбмен.ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
			Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если КабинетСотрудника.ИспользуетсяВерсияФормата("1.1") Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПредприятия;
		Отбор.ТипОбъекта = ТипОбъекта;
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиСборГрафиковОтпусков(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ИнтеграцияУправлениеПерсоналомОбмен.ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
			Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Функция РезультатВыгрузкиГрафиковРаботы(ПараметрыОбмена, МассивОтбора)
	
	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ВерсияDTO = ПараметрыОбмена.ВерсияDTO;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
	|	ГрафикиРаботы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Ссылка В(&МассивОтбора)";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДанных.Колонки.Добавить("ГрафикРаботыИдентификатор", Новый ОписаниеТипов("Строка"));
	ГрафикРаботыИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ТаблицаДанных, "ГрафикРаботы", ТипОбъекта);
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		СтрокаТЗ.ГрафикРаботыИдентификатор = ГрафикРаботыИдентификатор[СтрокаТЗ.ГрафикРаботы];
	КонецЦикла;
	ТаблицаДанных.Колонки.Удалить("ГрафикРаботы");
	ТаблицаДанных.Колонки.ГрафикРаботыИдентификатор.Имя = "ГрафикРаботы";
	
	РесурсСервиса = РесурсГрафикиРаботы();
	СоответствиеПолей = ОписаниеПолейГрафиковРаботы(ВерсияDTO);
	Данные = КабинетСотрудникаМенеджерОбмена.ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы);
	РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID", РазмерПакета);
	Результат.БылиОшибки = РезультатВыгрузки.БылиОшибки;
	
	// Не регистрируем графики как выгруженные.
	РезультатВыгрузкиГрафиков = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	КабинетСотрудникаМенеджерОбмена.ЗаполнитьРезультатРезультатамиВыгрузки(РезультатВыгрузкиГрафиков, РезультатВыгрузки, ТипОбъекта, РесурсСервиса, Ложь);
	
	// праздничные дни
	Если РезультатВыгрузкиГрафиков.Выгружено.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивОтбора", РезультатВыгрузкиГрафиков.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботы.Ссылка КАК Ссылка,
		|	ГрафикиРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.Ссылка В(&МассивОтбора)";
		ДанныеГрафиковРаботы = Запрос.Выполнить().Выгрузить();
		
		ПроизводственныеКалендари = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеГрафиковРаботы, "ПроизводственныйКалендарь", Истина);
		
		Запрос.УстановитьПараметр("ПроизводственныеКалендари", ПроизводственныеКалендари);
		Запрос.УстановитьПараметр("НачальныйГод", Год(ТекущаяДатаСеанса()) - 1);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ДанныеПроизводственногоКалендаря.Год КАК Год,
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь В(&ПроизводственныеКалендари)
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|	И ДанныеПроизводственногоКалендаря.Год >= &НачальныйГод
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизводственныйКалендарь,
		|	Год,
		|	Дата";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ОписаниеОбъектаПраздничныеДниГрафика = ОписаниеОбъектаПраздничныеДниГрафика(ВерсияDTO);
		ОписаниеОбъектаПраздничныйДень = ОписаниеОбъектаГодДатаПраздничныйДень(ВерсияDTO);
		
		ДанныеГрафиков = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля("ПроизводственныйКалендарь") Цикл
			Компоненты = Новый Массив;
			Пока Выборка.Следующий() Цикл
				ОписаниеПраздничныйДень = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПраздничныйДень);
				ОписаниеПраздничныйДень.Год 	= Выборка.Год;
				ОписаниеПраздничныйДень.Дата 	= Выборка.Дата;
				ОбъектПраздничныйДень = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеПраздничныйДень, ОписаниеОбъектаПраздничныйДень);
				Компоненты.Добавить(ОбъектПраздничныйДень);
			КонецЦикла;
			Отбор = Новый Структура("ПроизводственныйКалендарь", Выборка.ПроизводственныйКалендарь);
			НайденныеСтроки = ДанныеГрафиковРаботы.НайтиСтроки(Отбор);
			Для Каждого СтрокаГрафика Из НайденныеСтроки Цикл
				ОписаниеПраздничныеДниГрафика = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПраздничныеДниГрафика);
				ОписаниеПраздничныеДниГрафика.ГрафикРаботы = ГрафикРаботыИдентификатор[СтрокаГрафика.Ссылка];
				ОписаниеПраздничныеДниГрафика.Компоненты = Компоненты;
				ОбъектПраздничныеДниГрафика = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеПраздничныеДниГрафика, ОписаниеОбъектаПраздничныеДниГрафика);
				ДанныеГрафиков.Добавить(ОбъектПраздничныеДниГрафика);
			КонецЦикла;
		КонецЦикла;
		
		РесурсСервиса = РесурсПраздничныеДниГрафиковРаботы();
		РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПраздничныеДниГрафикаРаботы);
		РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, ДанныеГрафиков, "workScheduleID", РазмерПакета);
		Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		КабинетСотрудникаМенеджерОбмена.ЗаполнитьРезультатРезультатамиВыгрузки(Результат, РезультатВыгрузки, ТипОбъекта, РесурсСервиса, Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОпубликоватьПрочиеИзменения(ПараметрыОбмена, БылиОшибки) Экспорт
	
	ОпубликоватьПраваНаОтпуск(ПараметрыОбмена, БылиОшибки);
	ОпубликоватьИзмененияГрафикаОтпусков(ПараметрыОбмена, БылиОшибки);
	ОпубликоватьДанныеГрафиковРаботы(ПараметрыОбмена, БылиОшибки);
	ОпубликоватьИзмененияПлановыхУдержаний(ПараметрыОбмена, БылиОшибки);
	
КонецПроцедуры

Процедура ОпубликоватьПраваНаОтпуск(ПараметрыОбмена, БылиОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ПраваНаОтпуск.Ссылка КАК ФизическоеЛицо,
	|	ПраваНаОтпуск.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ПраваНаОтпуск.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ПраваНаОтпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПраваНаОтпуск.Ссылка = ПубликуемыеОбъекты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|		ПО ПраваНаОтпуск.Ссылка = ВыгруженныеОбъекты.Ссылка
	|			И (ВыгруженныеОбъекты.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|			И (ВыгруженныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО ПраваНаОтпуск.Ссылка = ОшибкиЗаполнения.Ссылка
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ПраваНаОтпуск.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск)
	|	И ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|	И НЕ ПраваНаОтпуск.ВыгружатьУдаление";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	
	Отбор = Новый Структура("Публикуется");
	Отбор.Публикуется = Истина;
	
	ТаблицаИзменений = РезультатЗапроса.Выгрузить();
	ТаблицаИзменений.Индексы.Добавить("Публикуется");
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор); 
	
	ФизическоеЛицоИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ТаблицаДляВыгрузки, "ФизическоеЛицо", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		
		ФизическиеЛица = ТаблицаДляВыгрузки.ВыгрузитьКолонку("ФизическоеЛицо");
		Данные = ОстаткиОтпусков.СведенияОбОтпускахДляПубликацииВСервисе(ФизическиеЛица, НачалоДня(ТекущаяДатаСеанса()));
		
		ОписаниеОбъектаИнформацииОбОтпусках = ОписаниеОбъектаИнформацииОбОтпусках();
		ОписаниеОбъектаИнформацииОбОтпуске = ОписаниеОбъектаИнформацииОбОтпуске();
		ИнформацияОбИспользованииОтпуска = Новый Массив;
		Для каждого СтрокаТЗ Из Данные.ИнформацияОбИспользованииОтпуска Цикл
		
			ИнформацияОбОтпуске = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаИнформацииОбОтпусках);
			ЗаполнитьЗначенияСвойств(ИнформацияОбОтпуске, СтрокаТЗ, "ОстатокОтпуска, ДнейКомпенсации, ДопустимаяПродолжительностьОтпуска");
			ИнформацияОбОтпуске.ФизическоеЛицо = ФизическоеЛицоИдентификатор[СтрокаТЗ.ФизическоеЛицо];
			
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаНачалаПредыдущегоОтпуска) И ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончанияПредыдущегоОтпуска) Тогда
				ИнформацияОПредыдущемОтпуске = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОПредыдущемОтпуске.ДатаНачала = СтрокаТЗ.ДатаНачалаПредыдущегоОтпуска;
				ИнформацияОПредыдущемОтпуске.ДатаОкончания = СтрокаТЗ.ДатаОкончанияПредыдущегоОтпуска;
				ИнформацияОПредыдущемОтпуске.КоличествоДней = СтрокаТЗ.КоличествоДнейПредыдущегоОтпуска;
				ОбъектИнформацияОПредыдущемОтпуске = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ИнформацияОПредыдущемОтпуске, ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОбОтпуске.ИнформацияОПредыдущемОтпуске = ОбъектИнформацияОПредыдущемОтпуске;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаНачалаСледующегоОтпуска) И ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончанияСледующегоОтпуска) Тогда
				ИнформацияОСледующемОтпуске  = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОСледующемОтпуске.ДатаНачала = СтрокаТЗ.ДатаНачалаСледующегоОтпуска;
				ИнформацияОСледующемОтпуске.ДатаОкончания = СтрокаТЗ.ДатаОкончанияСледующегоОтпуска;
				ИнформацияОСледующемОтпуске.КоличествоДней = СтрокаТЗ.КоличествоДнейСледующегоОтпуска;
				ОбъектИнформацияОСледующемОтпуске = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ИнформацияОСледующемОтпуске, ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОбОтпуске.ИнформацияОСледующемОтпуске = ОбъектИнформацияОСледующемОтпуске;
			КонецЕсли;
			
			ОбъектИнформацияОбОтпуске = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ИнформацияОбОтпуске, ОписаниеОбъектаИнформацииОбОтпусках);
			ИнформацияОбИспользованииОтпуска.Добавить(ОбъектИнформацияОбОтпуске);
		
		КонецЦикла;
		
		РесурсСервиса = РесурсИнформацияОбОтпуске();
		РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ИнформацияОбИспользованииОтпуска);
		РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, ИнформацияОбИспользованииОтпуска, "personID", РазмерПакета);
		Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
		КабинетСотрудникаМенеджерОбмена.ЗаполнитьРезультатРезультатамиВыгрузки(Результат, РезультатВыгрузки, ТипОбъекта, РесурсСервиса, Ложь);
		
		ОбновитьДанныеОбАктуальностиИнформацииОбОтпуске(ФизическиеЛица,
			Результат.Выгружено,
			Данные.ИнформацияОбИспользованииОтпуска,
			Данные.БудущиеПериоды);
		
		ПрогнозируемыеНеиспользованныеДниОтпуска = КабинетСотрудникаМенеджерОбмена.МассивИзТаблицы(Данные.ПрогнозируемыеНеиспользованныеДниОтпуска, ОписаниеОбъектаБудущиеИзмененияОстатковОтпуска());
		Для каждого Объект Из ПрогнозируемыеНеиспользованныеДниОтпуска Цикл
			Объект.personID = ФизическоеЛицоИдентификатор[Объект.personID];
		КонецЦикла;
		
		РезультатВыгрузки = РезультатВыгрузкиОстатковОтпусковБудущихПериодов(ПараметрыОбмена, ПрогнозируемыеНеиспользованныеДниОтпуска);
		Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		КабинетСотрудникаМенеджерОбмена.ЗаполнитьРезультатРезультатамиВыгрузки(Результат, РезультатВыгрузки, ТипОбъекта, РесурсСервиса, Ложь);
		
	КонецЕсли;
	
	ОтменитьРегистрациюФизическиеЛицаДляОбновленияПубликацииПравНаОтпуск(ТаблицаИзменений, Результат);
	БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
	
КонецПроцедуры

Функция РезультатВыгрузкиОстатковОтпусковБудущихПериодов(ПараметрыОбмена, Данные)
	
	РесурсСервиса = РесурсБудущиеИзмененияОстатковОтпусков();
	РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.БудущееИзменениеОстаткаОтпусков);
	Результат = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "personID", РазмерПакета);
	Возврат Результат;
	
КонецФункции

Процедура ОпубликоватьИзмененияГрафикаОтпусков(ПараметрыОбмена, БылиОшибки)
	
	Если Не КабинетСотрудника.ИспользоватьФормат202() Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияDTO = ПараметрыОбмена.ВерсияDTO;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ОбновленияГрафикаОтпусков.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОбновленияГрафикаОтпусков.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ОбновленияГрафикаОтпусков.ТипОбъекта КАК ТипОбъекта
	|ПОМЕСТИТЬ ВТОбновленияГрафикаОтпусков
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ОбновленияГрафикаОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ОбновленияГрафикаОтпусков.Ссылка = ПубликуемыеОбъекты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ОбновленияГрафикаОтпусков.Ссылка = Сотрудники.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|		ПО (Сотрудники.ФизическоеЛицо = ВыгруженныеОбъекты.Ссылка)
	|			И (ВыгруженныеОбъекты.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|			И (ВыгруженныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО (Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.Ссылка)
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОбновленияГрафикаОтпусков.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков)
	|	И ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|	И НЕ ОбновленияГрафикаОтпусков.ВыгружатьУдаление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбновленияГрафикаОтпусков.Сотрудник КАК Сотрудник,
	|	ОбновленияГрафикаОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОбновленияГрафикаОтпусков.ТипОбъекта КАК ТипОбъекта,
	|	ОбновленияГрафикаОтпусков.Публикуется КАК Публикуется
	|ИЗ
	|	ВТОбновленияГрафикаОтпусков КАК ОбновленияГрафикаОтпусков";
	ИзмененияГрафика = Запрос.Выполнить().Выгрузить();
	
	Если ИзмененияГрафика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновленияГрафикаОтпусков.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОтборГрафиковОтпусков
	|ИЗ
	|	ВТОбновленияГрафикаОтпусков КАК ОбновленияГрафикаОтпусков
	|ГДЕ
	|	ОбновленияГрафикаОтпусков.Публикуется";
	Запрос.Выполнить();
	
	ОстаткиОтпусков.СоздатьВТГрафикОтпусковДляЛичныхКабинетов(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ГрафикОтпусков.ДатаНачала КАК ДатаНачала,
	|	ГрафикОтпусков.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТГрафикОтпусков КАК ГрафикОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаНачала";
	РезультатЗапроса = Запрос.Выполнить();
	РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		ДанныеГрафиков = Новый Соответствие;
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			Компоненты = Новый Массив;
			ЭлементГрафика = Неопределено;
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.ДатаНачала) И ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
					Если ЭлементГрафика <> Неопределено 
						И Выборка.ДатаНачала = ЭлементГрафика.ДатаОкончания + 86400 Тогда
						ЭлементГрафика.ДатаОкончания = Выборка.ДатаОкончания;
						Продолжить;
					КонецЕсли;
					ЭлементГрафика = Новый Структура("ДатаНачала, ДатаОкончания", Выборка.ДатаНачала, Выборка.ДатаОкончания);
					Компоненты.Добавить(ЭлементГрафика);
				КонецЕсли;
			КонецЦикла;
			ДанныеГрафиков.Вставить(Выборка.ФизическоеЛицо, Компоненты);
		КонецЦикла;
		
		ФизическоеЛицоИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ИзмененияГрафика, "ФизическоеЛицо", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
		
		ОписаниеОбъектаГрафикОтпусков = ОписаниеОбъектаГрафикОтпусков(ВерсияDTO);
		ОписаниеОбъектаЭлементГрафикаОтпусков = ОписаниеОбъектаЭлементГрафикаОтпусков(ВерсияDTO);
		ДанныеГрафиковОтпусков = Новый Массив;
		Для каждого ЭлементКоллекции Из ДанныеГрафиков Цикл
			ОписаниеГрафикОтпусков = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаГрафикОтпусков);
			ОписаниеГрафикОтпусков.ФизическоеЛицо = ФизическоеЛицоИдентификатор[ЭлементКоллекции.Ключ];
			Компоненты = Новый Массив;
			Для каждого ЭлементГрафикаОтпусков Из ЭлементКоллекции.Значение Цикл
				ОписаниеЭлементГрафикаОтпусков = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаЭлементГрафикаОтпусков);
				ОписаниеЭлементГрафикаОтпусков.ДатаНачала 		= ЭлементГрафикаОтпусков.ДатаНачала;
				ОписаниеЭлементГрафикаОтпусков.ДатаОкончания 	= ЭлементГрафикаОтпусков.ДатаОкончания;
				ОбъектЭлементГрафикаОтпусков = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеЭлементГрафикаОтпусков, ОписаниеОбъектаЭлементГрафикаОтпусков);
				Компоненты.Добавить(ОбъектЭлементГрафикаОтпусков);
			КонецЦикла;
			ОписаниеГрафикОтпусков.Компоненты = Компоненты;
			ОбъектГрафикОтпусков = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеГрафикОтпусков, ОписаниеОбъектаГрафикОтпусков);
			ДанныеГрафиковОтпусков.Добавить(ОбъектГрафикОтпусков);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеГрафиковОтпусков) Тогда
			
			Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
			РесурсСервиса = РесурсГрафикОтпусков();
			РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков);
			РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				ДанныеГрафиковОтпусков,
				"personID",РазмерПакета);

			БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
			КабинетСотрудникаМенеджерОбмена.ЗаполнитьРезультатРезультатамиВыгрузки(Результат, РезультатВыгрузки, ТипОбъекта, РесурсСервиса, Ложь); 
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИзмененияГрафика;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Сотрудник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		Для Каждого ИзменениеГрафика Из ИзмененияГрафика Цикл 
			Если ИзменениеГрафика.Публикуется И РезультатВыгрузки.НеВыгружено[ФизическоеЛицоИдентификатор[ИзменениеГрафика.ФизическоеЛицо]] <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= ИзменениеГрафика.Сотрудник;
			МенеджерЗаписи.ТипОбъекта 	= ИзменениеГрафика.ТипОбъекта;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОпубликоватьДанныеГрафиковРаботы(ПараметрыОбмена, БылиОшибки)
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбмена.ОбновлениеПубликации Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	ИзмененияДанныхГрафика.ГрафикРаботы КАК ГрафикРаботы,
	|	ИзмененияДанныхГрафика.Год КАК Год,
	|	ИзмененияДанныхГрафика.ВерсияДанных КАК ВерсияДанных,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, ИзмененияДанныхГрафика.Год - 1), ГОД) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, ИзмененияДанныхГрафика.Год - 1), ГОД) КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК ИзмененияДанныхГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО ИзмененияДанныхГрафика.ГрафикРаботы = ВыгружаемыеОбъекты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Графики.ГрафикРаботы КАК ГрафикРаботы,
	|	Графики.Год КАК Год,
	|	Графики.ВерсияДанных КАК ВерсияДанных,
	|	Графики.ДатаНачала КАК ДатаНачала,
	|	Графики.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТГрафикиОтбор
	|ИЗ
	|	ВТГрафики КАК Графики
	|ГДЕ
	|	Графики.Публикуется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Графики.ГрафикРаботы КАК ГрафикРаботы,
	|	Графики.Год КАК Год,
	|	Графики.ВерсияДанных КАК ВерсияДанных,
	|	Графики.Публикуется КАК Публикуется
	|ИЗ
	|	ВТГрафики КАК Графики";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыгруженныеДанные = Новый ТаблицаЗначений;
	ВыгруженныеДанные.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ВыгруженныеДанные.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	ВыгруженныеДанные.Колонки.Добавить("БылаОшибкаПриПубликации", Новый ОписаниеТипов("Булево"));
	ВыгруженныеДанные.Колонки.Добавить("ВерсияДанных", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	
	ДанныеГрафиков = УчетРабочегоВремениРасширенный.ДанныеГрафиковДляСервисаКабинетСотрудника(Запрос.МенеджерВременныхТаблиц);
	
	ГрафикРаботыИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ДанныеГрафиков, "ГрафикРаботы", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы);
	
	ДанныеГрафиков.Колонки.Добавить("ТипДня");
	ЗначениеРабочийДень = ЗначениеРабочийДень();
	ЗначениеВыходнойДень = ЗначениеВыходнойДень();
	Для каждого СтрокаТЗ Из ДанныеГрафиков Цикл
		СтрокаТЗ.ТипДня = ?(СтрокаТЗ.Выходной, ЗначениеВыходнойДень, ЗначениеРабочийДень); 
	КонецЦикла;
	ДанныеГрафиков.Индексы.Добавить("ГрафикРаботы, Год");
	Отбор = Новый Структура("ГрафикРаботы, Год");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Публикуется Тогда
			НоваяСтрока = ВыгруженныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ДанныеГрафика = ДанныеГрафиков.НайтиСтроки(Отбор);
		
		СоответствиеПолей = ОписаниеПолейДанныеГрафикаРаботы();
		Данные = КабинетСотрудникаМенеджерОбмена.ТаблицаДанныхВМассив(ДанныеГрафика, СоответствиеПолей);
		Для каждого Объект Из Данные Цикл
			Объект.workScheduleID = ГрафикРаботыИдентификатор[Объект.workScheduleID];
		КонецЦикла;
		
		РесурсСервиса = РесурсДанныеГрафикаРаботы();
		РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДанныеГрафикаРаботы);
		РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "workScheduleID", РазмерПакета);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		НоваяСтрока = ВыгруженныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.БылаОшибкаПриПубликации = РезультатВыгрузки.БылиОшибки;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ВыгруженныеДанные;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрафикРаботы", "ГрафикРаботы");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Год", "Год");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВыгруженныеДанные", ВыгруженныеДанные);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ГрафикРаботы КАК ГрафикРаботы,
		|	ТаблицаИзменений.Год КАК Год,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
		|	ТаблицаИзменений.БылаОшибкаПриПубликации КАК БылаОшибкаПриПубликации
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ВыгруженныеДанные КАК ТаблицаИзменений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ГрафикРаботы КАК ГрафикРаботы,
		|	ОтменитьИзменения.Год КАК Год,
		|	ОтменитьИзменения.БылаОшибкаПриПубликации КАК БылаОшибкаПриПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК Изменения
		|		ПО ОтменитьИзменения.ГрафикРаботы = Изменения.ГрафикРаботы
		|			И ОтменитьИзменения.Год = Изменения.Год
		|			И ОтменитьИзменения.ВерсияДанных = Изменения.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ГрафикРаботы = Выборка.ГрафикРаботы;
			МенеджерЗаписи.Год = Выборка.Год;
			Если Выборка.БылаОшибкаПриПубликации Тогда
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.Записать();
			Иначе
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьДанныеОбАктуальностиИнформацииОбОтпуске(ФизическиеЛица, ВыгруженныеФизическиеЛица, ИнформацияОбОтпусках, БудущиеПериоды)
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ДатыОстатков = Новый Соответствие;
	
	Для Каждого ДанныеСотрудника Из БудущиеПериоды Цикл
		Если ДанныеСотрудника.Период <= ТекущаяДата Тогда 
			Продолжить;
		КонецЕсли;
		ДатаОстатка = ДатыОстатков[ДанныеСотрудника.ФизическоеЛицо];
		Если ДатаОстатка <> Неопределено И ДатаОстатка <= ДанныеСотрудника.Период Тогда 
			Продолжить;
		КонецЕсли;
		ДатыОстатков.Вставить(ДанныеСотрудника.ФизическоеЛицо, ДанныеСотрудника.Период);
	КонецЦикла;
	
	Для Каждого ИнформацияОбОтпуске Из ИнформацияОбОтпусках Цикл 
		Если ВыгруженныеФизическиеЛица.Найти(ИнформацияОбОтпуске.ФизическоеЛицо) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДатаАктуальности = ИнформацияОбОтпуске.ДатаНачалаСледующегоОтпуска;
		ДатаОстатка = ДатыОстатков[ИнформацияОбОтпуске.ФизическоеЛицо];
		Если ДатаОстатка <> Неопределено Тогда
			ДатаАктуальности = ?(ЗначениеЗаполнено(ДатаАктуальности), 
				Мин(ДатаАктуальности, КонецДня(ДатаОстатка) + 1), КонецДня(ДатаОстатка) + 1);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда 
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.АктуальностьИнформацииОбОтпусках.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ИнформацияОбОтпуске.ФизическоеЛицо);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = ИнформацияОбОтпуске.ФизическоеЛицо;
		НоваяЗапись.ДатаАктуальности = ДатаАктуальности;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьРегистрациюФизическиеЛицаДляОбновленияПубликацииПравНаОтпуск(ТаблицаИзменений, Результат)
	
	Если ТаблицаИзменений.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ФизическоеЛицо");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
			Запрос.УстановитьПараметр("Выгружено", Результат.Выгружено);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
			|	ТаблицаИзменений.Публикуется КАК Публикуется,
			|	ТаблицаИзменений.ТипОбъекта КАК ТипОбъекта
			|ПОМЕСТИТЬ ВТОтменитьИзменения
			|ИЗ
			|	&ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	(ТаблицаИзменений.ФизическоеЛицо В (&Выгружено)
			|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтменитьИзменения.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОтменитьИзменения.ТипОбъекта КАК ТипОбъекта
			|ИЗ
			|	ВТОтменитьИзменения КАК ОтменитьИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
			|		ПО ОтменитьИзменения.ФизическоеЛицо = Изменения.Ссылка
			|			И ОтменитьИзменения.ТипОбъекта = Изменения.ТипОбъекта";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка = Выборка.ФизическоеЛицо;
				МенеджерЗаписи.ТипОбъекта = Выборка.ТипОбъекта;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
			Результат.БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпубликоватьИзмененияПлановыхУдержаний(ПараметрыОбмена, БылиОшибки)

	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИспользуемаяФункциональность = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	Если Не НастройкиИспользуемаяФункциональность.ЗаявленияНаДСВ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Организация КАК Организация,
	|	Изменения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Изменения.КатегорияУдержания КАК КатегорияУдержания,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеФизическиеЛица.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПубликуемыеОбъекты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ИЗ
	|	РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО Изменения.ФизическоеЛицо = ПубликуемыеФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО Изменения.Организация = ПубликуемыеОбъекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО Изменения.ФизическоеЛицо = ОшибкиЗаполнения.Ссылка
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|			И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияDTO = ПараметрыОбмена.ВерсияDTO;
	
	ТаблицаВсехИзменений = РезультатЗапроса.Выгрузить();
	ТаблицаВсехИзменений.Индексы.Добавить("Публикуется");
	ТаблицаПубликуемыхИзменений = ТаблицаВсехИзменений.Скопировать(Новый Структура("Публикуется", Истина));
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПубликуемыхИзменений, "Организация", Истина);
	ТаблицаПубликуемыхИзменений.Индексы.Добавить("Организация");
	Отбор = Новый Структура("Организация");
	ДатаАктуальности = ТекущаяДатаСеанса();
	
	ОрганизацияИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ТаблицаВсехИзменений, "Организация", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация);
	ФизическоеЛицоИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ТаблицаВсехИзменений, "ФизическоеЛицо", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	ИдентификаторФизическоеЛицо = Новый Соответствие;
	Для каждого КлючИЗначение Из ФизическоеЛицоИдентификатор Цикл
		ИдентификаторФизическоеЛицо.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	СвойстваУдержаний = Новый Соответствие;
	
	ТаблицаРезультатВыгрузки = Новый ТаблицаЗначений;
	ТаблицаРезультатВыгрузки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультатВыгрузки.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаРезультатВыгрузки.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	ТаблицаРезультатВыгрузки.Колонки.Добавить("Выгружено", Новый ОписаниеТипов("Булево"));
	
	ОписаниеОбъектаПлановоеУдержание = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъектаПлановоеУдержание(ВерсияDTO);
	ОписаниеОбъектаПлановыеУдержания = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъектаПлановыеУдержания(ВерсияDTO);
	
	Для каждого Организация Из Организации Цикл
	
		Отбор.Организация = Организация;
		ИзмененияПоОрганизации = ТаблицаПубликуемыхИзменений.Скопировать(Отбор, "Организация,ФизическоеЛицо,КатегорияУдержания");
		ФизическиеЛица = ИзмененияПоОрганизации.ВыгрузитьКолонку("ФизическоеЛицо");
		
		ПлановыеУдержания = ПлановыеУдержанияФизическихЛиц(ИзмененияПоОрганизации, ДатаАктуальности);
		Если ПлановыеУдержания.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПлановыеУдержания.Индексы.Добавить("ФизическоеЛицо");
		ОтборФизическихЛиц = Новый Структура("ФизическоеЛицо");
		
		Удержания = ОбщегоНазначения.ВыгрузитьКолонку(ПлановыеУдержания, "Удержание", Истина);
		ЗаполнитьСведенияОбУдержаниях(Удержания, СвойстваУдержаний);
		
		ДанныеПлановыхУдержаний = Новый Массив;
		
		Для каждого СтрокаТЗ Из ПлановыеУдержания Цикл
			
			ПлановыеУдержанияФизическогоЛица = Новый Массив;
			
			ОтборФизическихЛиц.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			НайденныеСтроки = ПлановыеУдержания.НайтиСтроки(ОтборФизическихЛиц);
			Для каждого СтрокаПоФизическомуЛицу Из НайденныеСтроки Цикл
				
				СтрокаПлановоеУдержание = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПлановоеУдержание);
				Если ЗначениеЗаполнено(СтрокаПоФизическомуЛицу.ДатаОкончания) Тогда
					СтрокаПлановоеУдержание.ДатаОкончания 			= СтрокаПоФизическомуЛицу.ДатаОкончания;
				КонецЕсли;
				СтрокаПлановоеУдержание.ПредставлениеУдержания 	= СвойстваУдержаний[СтрокаПоФизическомуЛицу.Удержание].Представление;
				
				ОбъектСтрокаПлановоеУдержание = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(СтрокаПлановоеУдержание, ОписаниеОбъектаПлановоеУдержание);
				ПлановыеУдержанияФизическогоЛица.Добавить(ОбъектСтрокаПлановоеУдержание);
				
			КонецЦикла;
			
			СтрокаПлановыеУдержания = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПлановыеУдержания);
			СтрокаПлановыеУдержания.Организация 		= ОрганизацияИдентификатор[Организация];
			СтрокаПлановыеУдержания.ФизическоеЛицо 		= ФизическоеЛицоИдентификатор[СтрокаТЗ.ФизическоеЛицо];
			СтрокаПлановыеУдержания.ПлановыеУдержания 	= ПлановыеУдержанияФизическогоЛица;
			
			ОбъектСтрокаПлановыеУдержания = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(СтрокаПлановыеУдержания, ОписаниеОбъектаПлановыеУдержания);
			ДанныеПлановыхУдержаний.Добавить(ОбъектСтрокаПлановыеУдержания);
		
		КонецЦикла;
		
		РесурсСервиса = РесурсПлановыеУдержания();
		РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПлановоеУдержание);
		РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, ДанныеПлановыхУдержаний, "personID", РазмерПакета);
		
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для каждого Идентификатор Из РезультатВыгрузки.Выгружено Цикл
			НоваяСтрока = ТаблицаРезультатВыгрузки.Добавить();
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ФизическоеЛицо = ИдентификаторФизическоеЛицо[Идентификатор];
			НоваяСтрока.КатегорияУдержания = Перечисления.КатегорииУдержаний.ДСВ;
			НоваяСтрока.Выгружено = Истина;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			КабинетСотрудникаМенеджерОбмена.ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаРезультатВыгрузки.Индексы.Добавить("Организация,ФизическоеЛицо,КатегорияУдержания");
	Отбор = Новый Структура("Организация,ФизическоеЛицо,КатегорияУдержания");
	ТаблицаВсехИзменений.Колонки.Добавить("Выгружено", Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТЗ Из ТаблицаВсехИзменений Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		НайденныеСтроки = ТаблицаРезультатВыгрузки.НайтиСтроки(Отбор);
		СтрокаТЗ.Выгружено = (НайденныеСтроки.Количество() > 0);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаВсехИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КатегорияУдержания", "КатегорияУдержания");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаВсехИзменений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.Организация КАК Организация,
		|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаИзменений.КатегорияУдержания КАК КатегорияУдержания,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
		|	ТаблицаИзменений.Публикуется КАК Публикуется,
		|	ТаблицаИзменений.Выгружено КАК Выгружено
		|ПОМЕСТИТЬ ВТИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Изменения.Организация КАК Организация,
		|	Изменения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Изменения.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ВТИзменения КАК Изменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника КАК ИзмененияПлановыхУдержаний
		|		ПО Изменения.Организация = ИзмененияПлановыхУдержаний.Организация
		|			И Изменения.ФизическоеЛицо = ИзмененияПлановыхУдержаний.ФизическоеЛицо
		|			И Изменения.КатегорияУдержания = ИзмененияПлановыхУдержаний.КатегорияУдержания
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ Изменения.Публикуется
		|				ТОГДА ИСТИНА
		|			КОГДА Изменения.ВерсияДанных = ИзмененияПлановыхУдержаний.ВерсияДанных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация 			= Выборка.Организация;
			МенеджерЗаписи.ФизическоеЛицо 		= Выборка.ФизическоеЛицо;
			МенеджерЗаписи.КатегорияУдержания 	= Выборка.КатегорияУдержания;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Функция ПлановыеУдержанияФизическихЛиц(ИсходныеДанные, ДатаАктуальности)

	ПлановыеУдержания = Новый ТаблицаЗначений;
	ПлановыеУдержания.Колонки.Добавить("Организация");
	ПлановыеУдержания.Колонки.Добавить("ФизическоеЛицо");
	ПлановыеУдержания.Колонки.Добавить("Удержание");
	ПлановыеУдержания.Колонки.Добавить("ДатаОкончания");
	ПлановыеУдержания.Колонки.Добавить("Процент");
	ПлановыеУдержания.Колонки.Добавить("Сумма");
	
	ИсходныеДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.ЗаполнитьЗначения(ДатаАктуальности,"Период");
	
	ДействующиеПлановыеУдержания = РасчетЗарплатыРасширенный.ДействующиеПлановыеУдержания(ИсходныеДанные);
	
	Если ДействующиеПлановыеУдержания.Количество() > 0 Тогда
		
		ОбрабатываемыеУдержания = Новый Соответствие;
		
		КатегорииУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(ИсходныеДанные, "КатегорияУдержания", Истина);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КатегорииУдержаний", КатегорииУдержаний);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.Ссылка КАК Ссылка,
		|	Удержания.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ПланВидовРасчета.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.КатегорияУдержания В(&КатегорииУдержаний)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбрабатываемыеУдержания.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДействующиеПлановыеУдержания Цикл
			Если ОбрабатываемыеУдержания[СтрокаТЗ.Удержание] <> Неопределено Тогда
				НоваяСтрока = ПлановыеУдержания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПлановыеУдержания;

КонецФункции

Процедура ЗаполнитьСведенияОбУдержаниях(Удержания, СвойстваУдержаний)

	УдержанияДляОбработки = Новый Массив;
	
	Для каждого Удержание Из Удержания Цикл
		Если СвойстваУдержаний[Удержание] = Неопределено Тогда
			УдержанияДляОбработки.Добавить(Удержание);
		КонецЕсли;
	КонецЦикла;
	
	Если УдержанияДляОбработки.Количество()>0 Тогда
		РеквизитыУдержаний = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(УдержанияДляОбработки, "Наименование,КраткоеНаименование");
		Для каждого Удержание Из УдержанияДляОбработки Цикл
		
			СвойстваУдержания = Новый Структура("Представление");
			
			ПредставлениеУдержания = РеквизитыУдержаний[Удержание].КраткоеНаименование;
			Если ПустаяСтрока(ПредставлениеУдержания) Тогда
				ПредставлениеУдержания = РеквизитыУдержаний[Удержание].Наименование;
			КонецЕсли;
			СвойстваУдержания.Представление = ПредставлениеУдержания;
			
			СвойстваУдержаний.Вставить(Удержание, СвойстваУдержания);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция РезультатВыгрузкиВидовПредоставляемыхСправок(ПараметрыОбмена, МассивОтбора)
	
	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки;
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	ДанныеВидовСправок = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		ДанныеВидовСправок = МодульСамообслуживаниеСотрудников.ДанныеВидовСправокПредоставляемыхСотрудникам(МассивОтбора);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВидовСправок) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидСправкиИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ДанныеВидовСправок, "ВидСправки", ТипОбъекта);
	
	// Если настройка выключена, публикуем все виды справок как не используемые.
	ВидыСправокПубликуются = ИнтеграцияУправлениеПерсоналом.ДоступнаВыгрузкаВидовСправок();
	
	ДанныеВидовСправок.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ДанныеВидовСправок.Колонки.Добавить("Образец");
	Данные = Новый Массив;
	Для каждого СтрокаТЗ Из ДанныеВидовСправок Цикл
		Если ПустаяСтрока(СтрокаТЗ.Представление) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЗ.ВидСправки = СтрокаТЗ.ВидСправки;
		СтрокаТЗ.Представление = Лев(СтрокаТЗ.Представление, 30);
		СтрокаТЗ.Используется = ВидыСправокПубликуются И Не СтрокаТЗ.ВАрхиве И Не СтрокаТЗ.ПометкаУдаления;
		Если СтрокаТЗ.Используется И ЗначениеЗаполнено(СтрокаТЗ.Шаблон) Тогда
			СтрокаТЗ.Образец = КабинетСотрудникаМенеджерОбмена.ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.Шаблон, ПараметрыОбмена);
		КонецЕсли;
		Объект = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		Объект.Вставить("ВидСправки", ВидСправкиИдентификатор[Объект.ВидСправки]);
		ОбъектВидСправки = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(Объект, ОписаниеПолейВидовПредоставляемыхСправок(ПараметрыОбмена.ВерсияDTO));
		Данные.Добавить(ОбъектВидСправки);
	КонецЦикла; 
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РесурсСервиса = РесурсВидовПредоставляемыхСправок();
	РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки);
	РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID", РазмерПакета);
	Результат.БылиОшибки = РезультатВыгрузки.БылиОшибки;
	
	КабинетСотрудникаМенеджерОбмена.ЗаполнитьРезультатРезультатамиВыгрузки(Результат, РезультатВыгрузки, ТипОбъекта, РесурсСервиса, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСборГрафиковОтпусков(ПараметрыОбмена, МассивОтбора)

	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	
	ДанныеДокументов = СборГрафиковОтпусков.ДанныеСборовГрафиковОтпусковДляСервисаКабинетСотрудника(МассивОтбора);
	Данные = КабинетСотрудникаМенеджерОбмена.ТаблицаДанныхВМассив(ДанныеДокументов, ОписаниеПолейСборГрафиковОтпусков(ПараметрыОбмена.ВерсияDTO));
	
	ИнициаторСбораИдентификатор = КабинетСотрудникаМенеджерОбмена.СсылкаПубличныйИдентификатор(ДанныеДокументов, "ИнициаторСбора", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	Для каждого Объект Из Данные Цикл
		ИнициаторСбора = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Объект, "initiatorID");
		Если ЗначениеЗаполнено(ИнициаторСбора) Тогда
			Объект.initiatorID = ИнициаторСбораИдентификатор[ИнициаторСбора];
		КонецЕсли;
	КонецЦикла;
	
	РазмерПакета = КабинетСотрудникаМенеджерОбмена.РазмерПакета(ПараметрыОбмена, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПредприятия);
	
	РесурсСервиса = КабинетСотрудникаМенеджерОбмена.РесурсДанныеСбораГрафиковОтпусковПредприятия(ПараметрыОбмена.ВерсияAPI);
	РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID", РазмерПакета);
	Результат.БылиОшибки = РезультатВыгрузки.БылиОшибки;
	
	Для каждого Идентификатор Из РезультатВыгрузки.Выгружено Цикл
		НайденнаяСтрока = ДанныеДокументов.Найти(Идентификатор, "ИдентификаторДокумента");
		Если НайденнаяСтрока <> Неопределено Тогда
			 Результат.Выгружено.Добавить(НайденнаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Функция ТипыОбрабатываемыхЗаявок() Экспорт

	ТипыЗаявок = Новый Массив;
	Для каждого ТипЗаявки Из Перечисления.ТипыЗаявокКабинетСотрудника Цикл
		ТипыЗаявок.Добавить(ТипЗаявки);
	КонецЦикла;
	
	Возврат ТипыЗаявок;

КонецФункции

Функция ФотографииФизическихЛиц(СписокФизическихЛиц) Экспорт
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФотографииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФотографииФизическихЛиц.Фотография КАК Фотография
	|ИЗ
	|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
	|ГДЕ
	|	ФотографииФизическихЛиц.ФизическоеЛицо В (&СписокФизическихЛиц)");
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.ФизическоеЛицо, Выборка.Фотография);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция ДанныеШтатногоРасписания(ОтборПозиций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПозиций", ОтборПозиций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	ШтатноеРасписание.Наименование КАК Наименование,
	|	ШтатноеРасписание.Подразделение КАК ПодразделениеОрганизации
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&ОтборПозиций)";
	ДанныеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	
	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = МодульОрганизационнаяСтруктура.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц();
		КонецЕсли;
		
		Если Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц Тогда
			Шаблон = "%1 /%2/";
			Для каждого СтрокаТЗ Из ДанныеШтатногоРасписания Цикл
				СтрокаТЗ.Наименование = СтрШаблон(Шаблон, Строка(СтрокаТЗ.Должность), Строка(СтрокаТЗ.ПодразделениеОрганизации));
			КонецЦикла;
		КонецЕсли;
		
		ДанныеШтатногоРасписания.Колонки.ПодразделениеОрганизации.Имя = "МестоВСтруктуреПредприятия";
		
	Иначе
		
		ДанныеШтатногоРасписания.Колонки.Добавить("МестоВСтруктуреПредприятия");
		
		СтруктураПредприятия = МестаПозицийВСтруктуреПредприятия(ДанныеШтатногоРасписания.ВыгрузитьКолонку("ПозицияШтатногоРасписания"));
		ПодразделенияПозиций = Новый Соответствие;
		Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
			ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДанныеШтатногоРасписания Цикл
			СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[СтрокаТЗ.ПозицияШтатногоРасписания];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеШтатногоРасписания;
	
КонецФункции

Функция ДанныеСтруктурыПредприятия(Список) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список", Список);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК СтруктураПредприятия,
	|	СтруктураПредприятия.Код КАК Код,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	СтруктураПредприятия.Родитель КАК Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицоРуководителя,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Источник.РеквизитДопУпорядочиванияИерархического, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА СтруктураПредприятия.Источник.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&Список)";
	ТаблицаСтруктурыПредприятия = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаСтруктурыПредприятия) Тогда
		Возврат ТаблицаСтруктурыПредприятия;
	КонецЕсли;
	
	ПубликуемыеФизическиеЛица = КабинетСотрудника.ПубликуемыеФизическиеЛица();
	
	РуководителиОрганизаций = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтруктурыПредприятия, "Организация", Истина);
	СведенияОРуководителях = ИнтеграцияУправлениеПерсоналом.СведенияОРуководителяхОрганизаций(Организации);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеРуководителя = СведенияОРуководителях[Организация];
		Если ПубликуемыеФизическиеЛица[ДанныеРуководителя.Руководитель] <> Неопределено Тогда
			РуководителиОрганизаций.Вставить(Организация, ДанныеРуководителя.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	Подразделения = ТаблицаСтруктурыПредприятия.ВыгрузитьКолонку("СтруктураПредприятия");
	ДанныеРуководителей = ИнтеграцияУправлениеПерсоналомРасширенный.РуководителиПодразделений(Подразделения, ПубликуемыеФизическиеЛица);
	
	ПорядокОрганизаций = КабинетСотрудникаМенеджерОбмена.ПорядокОрганизаций();
	Для Каждого СтрокаТаблицы Из ТаблицаСтруктурыПредприятия Цикл
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТаблицы.Организация];
		ПорядокПодразделения = СтрокаТаблицы.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТаблицы.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		СтрокаТаблицы.ФизическоеЛицоРуководителя = ДанныеРуководителей[СтрокаТаблицы.СтруктураПредприятия];
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицоРуководителя) Тогда
			СтрокаТаблицы.ФизическоеЛицоРуководителя = РуководителиОрганизаций[СтрокаТаблицы.Организация];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСтруктурыПредприятия;
	
КонецФункции

Функция МестаПозицийВСтруктуреПредприятия(Позиции)
	
	СтруктураПредприятия = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
	КонецЕсли;
	Возврат СтруктураПредприятия;

КонецФункции

Функция ДанныеСотрудниковДляПубликации(ПараметрыОбмена, МассивОтбора) Экспорт
	
	ВедетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
	ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,Должность,ДатаПриема,
	|РабочееМестоПериодРегистрации,ВидЗанятости,ТарифнаяСтавка,ПоказательТарифнойСтавки,ВидСобытия,ГрафикРаботы";
	Если ВедетсяШтатноеРасписание Тогда
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			ВыбираемыеПоля = ВыбираемыеПоля + ",ДолжностьПоШтатномуРасписанию,Подразделение";
		Иначе
			ВыбираемыеПоля = ВыбираемыеПоля + ",ДолжностьПоШтатномуРасписанию,МестоВСтруктуреПредприятия";
		КонецЕсли;
	Иначе
		ВыбираемыеПоля = ВыбираемыеПоля + ",Подразделение";
	КонецЕсли;
	
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивОтбора, ВыбираемыеПоля, ТекущаяДатаСеанса());
	ТаблицаДанных.Колонки.ПоказательТарифнойСтавки.Имя = "Показатель";
	ТаблицаДанных.Колонки.Добавить("ПоказательТарифнойСтавки");
	
	Если ВедетсяШтатноеРасписание И ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТаблицаДанных.Колонки.Подразделение.Имя = "МестоВСтруктуреПредприятия";
	КонецЕсли;
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "Показатель", Истина);
	ПоказателиКВыгрузке = Новый Массив;
	Для каждого Показатель Из Показатели Цикл
		Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
			ПоказателиКВыгрузке.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	ПоказательПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПоказателиКВыгрузке,"КраткоеНаименование");
	
	ПозицииСотрудников = Новый Соответствие;
	ПодразделенияПозиций = Новый Соответствие;
	Если Не ВедетсяШтатноеРасписание Тогда
		
		ТаблицаДанных.Колонки.Добавить("ДолжностьПоШтатномуРасписанию");
		ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
		|	КадровыеДанные.Подразделение КАК Подразделение
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
			ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
			ПодразделенияПозиций.Вставить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию, СтрокаТЗ.Подразделение);
		КонецЦикла;
		
		Если Не ПубликоватьСтруктуруЮридическихЛиц Тогда
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
			СтруктураПредприятия = МестаПозицийВСтруктуреПредприятия(Позиции);
			Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
				ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		ПоказательТарифнойСтавки = ПоказательПредставление[СтрокаТЗ.Показатель];
		СтрокаТЗ.ПоказательТарифнойСтавки = ?(ПоказательТарифнойСтавки = Неопределено,"",ПоказательТарифнойСтавки);
		Если Не ВедетсяШтатноеРасписание Тогда
			СтрокаТЗ.ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
			СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[СтрокаТЗ.ДолжностьПоШтатномуРасписанию];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Процедура ЗаполнитьНастройкиФункциональностиСервиса(НастройкиФункциональности, ВерсияDTO) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиФункциональности.Командировка 		= Настройки.ИспользоватьОплатуКомандировок;
	НастройкиФункциональности.Отгул 			= Настройки.ИспользоватьОтгулы;
	НастройкиФункциональности.УчебныйОтпуск 	= Настройки.ИспользоватьОтпускаУчебные;
	НастройкиФункциональности.ОтпускБезОплаты 	= Настройки.ИспользоватьОтпускаБезОплаты;
	НастройкиФункциональности.ЕдиновременнаяВыплатаКОтпуску = Настройки.ИспользоватьЕдиновременнуюВыплатуКОтпуску;
	НастройкиФункциональности.МатериальнаяПомощьКОтпуску 	= Настройки.ИспользоватьМатериальнуюПомощьПриОтпуске;
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	НастройкиФункциональности.ЗаявленияНаДСВ 			= Настройки.ЗаявленияНаДСВ;
	НастройкиФункциональности.СпособРасчетаДСВПроцентом = Настройки.СпособРасчетаДСВПроцентом;
	НастройкиФункциональности.СпособРасчетаДСВСуммой 	= Настройки.СпособРасчетаДСВСуммой;
	НастройкиФункциональности.СпособРасчетаДСВПроцентомНеБолееСуммы = Настройки.СпособРасчетаДСВПроцентомНеБолееСуммы;
	НастройкиФункциональности.ЗаявленияНаКомпенсациюОтпуска 		= Не Настройки.КомпенсацияОтпускаНедоступна;
	НастройкиФункциональности.ИнформацияОбОтпуске 		= Не Настройки.ИнформацияОбОстаткахОтпусковНедоступна;
	
КонецПроцедуры

Функция ДоступнаяФункциональностьСервисаПоВерсииПриложения() Экспорт

	ИспользуемыеФункции = КабинетСотрудникаМенеджерОбмена.НовоеОписаниеИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ИспользуемыеФункции Цикл
		ИспользуемыеФункции[ЭлементКоллекции.Ключ] = Истина;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИспользуемыеФункции.Командировка 		= НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок;
	ИспользуемыеФункции.Отгул 				= НастройкиРасчетаЗарплаты.ИспользоватьОтгулы;
	ИспользуемыеФункции.УчебныйОтпуск 		= НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные;
	ИспользуемыеФункции.ОтпускБезОплаты 	= НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты;
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		ИспользуемыеФункции.ЗаявленияНаДСВ = Ложь;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентом = Ложь;
		ИспользуемыеФункции.СпособРасчетаДСВСуммой = Ложь;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентомНеБолееСуммы = Ложь;
		ИспользуемыеФункции.ЗаявленияНаКомпенсациюОтпуска = Ложь;
	Иначе
		НастройкиИспользуемаяФункциональность = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		ИспользуемыеФункции.ЗаявленияНаДСВ = НастройкиИспользуемаяФункциональность.ЗаявленияНаДСВ;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентом = НастройкиИспользуемаяФункциональность.СпособРасчетаДСВПроцентом;
		ИспользуемыеФункции.СпособРасчетаДСВСуммой = НастройкиИспользуемаяФункциональность.СпособРасчетаДСВСуммой;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентомНеБолееСуммы = НастройкиИспользуемаяФункциональность.СпособРасчетаДСВПроцентомНеБолееСуммы;
		Если КабинетСотрудника.ИспользоватьФормат503() Тогда
			ИспользуемыеФункции.ЗаявленияНаКомпенсациюОтпуска = Не НастройкиИспользуемаяФункциональность.КомпенсацияОтпускаНедоступна;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользуемыеФункции;

КонецФункции

#КонецОбласти

#Область Прочие

Процедура ЗаполнитьНастройкиПрограммы(НастройкиПриложения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьЗначенияСвойств(НастройкиПриложения, НастройкиРасчетаЗарплаты);

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОбновитьПубликуемыеПодразделенияПредприятия(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.СтруктураПредприятия";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПодразделенияПредприятия = ИнтеграцияУправлениеПерсоналом.РодителиПодразделений(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектПубликации"));
	ПодразделенияДляПубликации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПредприятия, РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектПубликации"));
	Если ПодразделенияДляПубликации.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	Для каждого ПодразделениеПредприятия Из ПодразделенияДляПубликации Цикл
	
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "Ссылка", ПодразделениеПредприятия) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(ПодразделениеПредприятия);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка = ПодразделениеПредприятия;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеПроверкаАктуальностиИнформацииОбОтпуске(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "ПроверкаАктуальностиИнформацииОбОтпуске");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Не ЗначениеЗаполнено(Задания) Или Задания[0].Использование Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске);
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура ВыполнитьНачальныйПереносДанныхГрафикаОтпусков(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПубликуемыеОбъекты.Ссылка КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ПубликуемыеОбъекты.Ссылка = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьСотрудникиДляОбновленияПубликацииГрафикаОтпусков КАК СотрудникиДляОбновления
		|		ПО ПубликуемыеОбъекты.Ссылка = СотрудникиДляОбновления.Сотрудник
		|ГДЕ
		|	СотрудникиДляОбновления.Сотрудник ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.УдалитьСотрудникиДляОбновленияПубликацииГрафикаОтпусков", "Сотрудник", Выборка.Сотрудник) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УдалитьСотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Сотрудник = Выборка.Сотрудник;
		НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);
	
КонецПроцедуры

Процедура ЗарегистрироватьПубликациюГрафиковРаботы(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|ГДЕ
	|	НЕ ГрафикиРаботыСотрудников.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ГрафикиРаботы.Ссылка = ПубликуемыеОбъекты.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноВыгружается ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбработкаВыполнена = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка = Выборка.Ссылка;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.Ссылка = Изменения.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|	И Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка 		= Выборка.Ссылка;
		ЗаписьНабора.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
		ЗаписьНабора.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.Ссылка = Изменения.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.Сотрудники
	|	И Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка = Выборка.Ссылка;
		ЗаписьНабора.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);
	
КонецПроцедуры

Процедура ЗарегистрироватьПубликациюДанныхГрафиковРаботы(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ТекущийГод = Год(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийГод", ТекущийГод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
	|	&ТекущийГод КАК Год
	|ИЗ
	|	ВТГрафики КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК ИзмененияДанныхГрафика
	|		ПО ГрафикиРаботы.Ссылка = ИзмененияДанныхГрафика.ГрафикРаботы
	|			И (ИзмененияДанныхГрафика.Год = &ТекущийГод)
	|ГДЕ
	|	ИзмененияДанныхГрафика.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника", "ГрафикРаботы", Выборка.ГрафикРаботы) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(Выборка.ГрафикРаботы);
		НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ГрафикРаботы 	= Выборка.ГрафикРаботы;
		ЗаписьНабора.Год 			= Выборка.Год;
		ЗаписьНабора.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ОтменитьРегистрациюГруппГрафиковРаботы(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|	И ПубликуемыеОбъекты.Ссылка.ЭтоГруппа";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	

КонецПроцедуры

Процедура ЗарегистрироватьПубликациюВидовСправок(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ИнтеграцияУправлениеПерсоналом.ДоступнаВыгрузкаВидовСправок()
		Или Не КабинетСотрудника.ИспользоватьФормат50375() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = КабинетСотрудника.ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеФункциональностиСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

#КонецОбласти

Функция ЗагрузитьГрафикиОтпусков(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки, ВерсияИзменений) Экспорт

	Если Не КабинетСотрудника.ИспользуетсяВерсияФормата("1.1") Тогда
		Возврат ВерсияИзменений;
	КонецЕсли;
	
	ИспользуетсяВерсия_1_2 = КабинетСотрудника.ИспользуетсяВерсияФормата("1.2");
	
	ТаблицаГрафиковОтпусков = Новый ТаблицаЗначений;
	ТаблицаГрафиковОтпусков.Колонки.Добавить("Объект");
	ТаблицаГрафиковОтпусков.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаГрафиковОтпусков.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаГрафиковОтпусков.Колонки.Добавить("ИдентификаторГрафикаПредприятия", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаГрафиковОтпусков.Колонки.Добавить("ОшибкаКонвертации");
		
	МассивОбъектов = ПолученныеИзменения["divisionVacationsScheduleRequests"];
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ТаблицаОбъектов = КабинетСотрудникаМенеджерОбмена.ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаГрафикОтпусковПодразделения(ПараметрыОбмена.ВерсияDTO));
		ЗаполнитьТаблицуГрафиковОтпусков(ТаблицаГрафиковОтпусков, ТаблицаОбъектов);
	КонецЕсли;
	
	Если ТаблицаГрафиковОтпусков.Количество() = 0 Тогда
		Возврат ВерсияИзменений;
	КонецЕсли;
	
	Идентификаторы = ТаблицаГрафиковОтпусков.ВыгрузитьКолонку("ИдентификаторДокумента");
	ИдентификаторыДокументы = СборГрафиковОтпусков.ДокументыПоИдентификаторам(Идентификаторы);
	
	ИдентификаторГрафикаПредприятия = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаГрафиковОтпусков, "ИдентификаторГрафикаПредприятия", Истина);
	ИдентификаторыГрафиковПредприятия = СборГрафиковОтпусков.ДокументыПоИдентификаторам(ИдентификаторГрафикаПредприятия);
	

	Для каждого СтрокаТЗ Из ТаблицаГрафиковОтпусков Цикл
		
		Объект = СтрокаТЗ.Объект;
		
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОшибкаКонвертации) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ТипИзменений = НСтр("ru = 'Сбор графиков отпусков (по подразделениям)';
								|en = 'Collect the leave schedules (by business units)'");
			КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, СтрокаТЗ.ОшибкаКонвертации);
			КабинетСотрудникаМенеджерОбмена.ЗарегистрироватьНезагруженныйИдентификатор(ИдентификаторДокумента, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПодразделения);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ОписаниеДокумента = СборГрафиковОтпусков.ОписаниеДокументаГрафикПодразделения();
			ОписаниеДокумента.Год 							= Объект.Год;
			ОписаниеДокумента.Подразделение 				= Объект.Подразделение;
			ОписаниеДокумента.ИдентификаторДокумента 		= Объект.ИдентификаторДокумента;
			ОписаниеДокумента.СостояниеСбораГрафиковОтпусков = Объект.СостояниеСбораГрафиковОтпусков;
			ОписаниеДокумента.ОтветственныйЗаСбор = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Объект, "Ответственный");
			Если ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторГрафикаПредприятия) Тогда
				ОписаниеДокумента.КорневойСборГрафиков = ИдентификаторыГрафиковПредприятия[СтрокаТЗ.ИдентификаторГрафикаПредприятия];
			КонецЕсли;
			
			Для каждого ЗаписьПериода Из Объект.Периоды Цикл
				НоваяСтрока = ОписаниеДокумента.Периоды.Добавить();
				НоваяСтрока.ФизическоеЛицо 	= ЗаписьПериода.ФизическоеЛицо;
				НоваяСтрока.ДатаНачала 		= ЗаписьПериода.ДатаНачала;
				НоваяСтрока.ДатаОкончания 	= ЗаписьПериода.ДатаОкончания;
			КонецЦикла;
			
			СборГрафиковОтпусков.ОбработатьНовыйГрафикПодразделения(ОписаниеДокумента, ИдентификаторыДокументы);
			
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ТипИзменений = НСтр("ru = 'Изменения сбора графиков отпусков (по подразделениям)';
								|en = 'Changes in the leave schedule collection (by business units)'");
			КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки());
			КабинетСотрудникаМенеджерОбмена.ЗарегистрироватьНезагруженныйИдентификатор(ИдентификаторДокумента, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПодразделения);
		КонецПопытки;
	
	КонецЦикла;
		
	РезультатОбработки.КоличествоОбъектов = РезультатОбработки.КоличествоОбъектов + ТаблицаГрафиковОтпусков.Количество();
	
	Возврат ВерсияИзменений;

КонецФункции

Процедура ЗаполнитьТаблицуГрафиковОтпусков(ТаблицаДанных, ТаблицаОбъектов)
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо");
	
	ЕстьОтветственный = (ТаблицаОбъектов.Колонки.Найти("Ответственный") <> Неопределено);
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		Если ЕстьОтветственный Тогда
			НоваяСтрока.ФизическоеЛицо = СтрокаТЗ.Ответственный;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЗ.Периоды) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаТЗ.Периоды, ТаблицаФизическихЛиц);
		КонецЕсли;
	КонецЦикла;
	
	ТипОбъектаФизическоеЛицо = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ИдентификаторФизическоеЛицо = КабинетСотрудникаМенеджерОбмена.ПубличныйИдентификаторСсылка(ТаблицаФизическихЛиц, "ФизическоеЛицо", ТипОбъектаФизическоеЛицо);
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
	ИдентификаторПодразделение = КабинетСотрудникаМенеджерОбмена.ПубличныйИдентификаторСсылка(ТаблицаОбъектов, "Подразделение", ТипОбъекта); 
	
	ЕстьИдентификаторГрафикаПредприятия = (ТаблицаОбъектов.Колонки.Найти("ИдентификаторГрафикаПредприятия") <> Неопределено);
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл 
		
		Объект = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		Подразделение = ИдентификаторПодразделение[СтрокаТЗ.Подразделение];
		Объект.Вставить("Подразделение", Подразделение);
		Если ЗначениеЗаполнено(СтрокаТЗ.Подразделение) И Не ЗначениеЗаполнено(Подразделение) Тогда
			ОшибкиКонвертацииСсылки = Новый Структура();
			ОшибкиКонвертацииСсылки.Вставить("Подразделение", 	СтрокаТЗ.Подразделение);
			НоваяСтрока.ОшибкаКонвертации = ОшибкиКонвертацииСсылки;
		КонецЕсли;
		
		Если ЕстьОтветственный Тогда
			Ответственный = ИдентификаторФизическоеЛицо[СтрокаТЗ.Ответственный];
			Объект.Вставить("Ответственный", Ответственный);
			Если ЗначениеЗаполнено(СтрокаТЗ.Ответственный) И Не ЗначениеЗаполнено(Ответственный) Тогда
				Если Не ЗначениеЗаполнено(НоваяСтрока.ОшибкаКонвертации) Тогда
					НоваяСтрока.ОшибкаКонвертации = Новый Структура();
				КонецЕсли;
				НоваяСтрока.ОшибкаКонвертации.Вставить("Ответственный", СтрокаТЗ.Ответственный);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьИдентификаторГрафикаПредприятия Тогда
			СтрокаТЗ.ИдентификаторГрафикаПредприятия = Объект.ИдентификаторГрафикаПредприятия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Периоды) Тогда
			Объект.Периоды.Колонки.ФизическоеЛицо.Имя = "ФизическоеЛицоИдентификатор";
			Объект.Периоды.Колонки.Добавить("ФизическоеЛицо");
		КонецЕсли;
		
		Для каждого ЗаписьПериода Из Объект.Периоды Цикл
			ФизическоеЛицо = ИдентификаторФизическоеЛицо[ЗаписьПериода.ФизическоеЛицоИдентификатор];
			ЗаписьПериода.ФизическоеЛицо = ФизическоеЛицо;
			Если ЗначениеЗаполнено(ЗаписьПериода.ФизическоеЛицоИдентификатор) И Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Если Не ЗначениеЗаполнено(НоваяСтрока.ОшибкаКонвертации) Тогда
					НоваяСтрока.ОшибкаКонвертации = Новый Структура();
				КонецЕсли;
				НоваяСтрока.ОшибкаКонвертации.Вставить("ЗаписьПериодаФизическоеЛицо", ЗаписьПериода.ФизическоеЛицоИдентификатор);
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока.Объект 			= Объект;
		НоваяСтрока.ВерсияИзменений = СтрокаТЗ.Версия;
		НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		
	КонецЦикла;

КонецПроцедуры

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;

	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.СостоянияСбораГрафиковОтпусков") Тогда
		Результат = СостоянияСбораГрафиковОтпусков(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостоянияСбораГрафиковОтпусков(Состояние)

	Результат = Неопределено;
	
	Если Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Черновик Тогда
		Результат = "draft";  
	ИначеЕсли Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.ВРаботе Тогда
		Результат = "inProgress";
	ИначеЕсли Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Отказано Тогда
		Результат = "denied";
	ИначеЕсли Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Утверждено Тогда
		Результат = "approved";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ИмяПоля) Экспорт

	Значение = ЗначениеПоляСервиса;
	Если ИмяПоля = "СостояниеСбораГрафиковОтпусков" Тогда
		Значение = СостояниеСбораГрафиковОтпусковСервиса(Значение);
	КонецЕсли;
	
	Возврат Значение;

КонецФункции

Функция СостояниеСбораГрафиковОтпусковСервиса(Состояние)

	Результат = Неопределено;
	Если Состояние = "draft" Тогда
		Результат = Перечисления.СостоянияСбораГрафиковОтпусков.Черновик;
	ИначеЕсли Состояние = "inProgress" Тогда
		Результат = Перечисления.СостоянияСбораГрафиковОтпусков.ВРаботе;
	ИначеЕсли Состояние = "denied" Тогда
		Результат = Перечисления.СостоянияСбораГрафиковОтпусков.Отказано;
	ИначеЕсли Состояние = "approved" Тогда
		Результат = Перечисления.СостоянияСбораГрафиковОтпусков.Утверждено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти