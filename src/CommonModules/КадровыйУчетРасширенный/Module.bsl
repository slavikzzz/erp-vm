////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетРасширенный: Процедуры и функции подсистемы Кадровый учет.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf68-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.КадровыйПеревод);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfdd-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.КадровыйПереводСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfd9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПереводКДругомуРаботодателю);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "08a120a4-dd4d-4f0b-b135-99f102de3d13", Метаданные.Документы.ПереводНаРаботуСКоронавирусом);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf2e-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПеремещениеВДругоеПодразделение);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf45-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПеремещениеМеждуТерриториями);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПриемНаРаботу);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf0b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПриемНаРаботуСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfba-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Увольнение);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УвольнениеСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf01-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыСправок);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf87-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыСтажа);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbffc-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Награды);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ОтраслиНауки);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbef2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.СправкиФизическихЛиц);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf98-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.УченыеЗвания);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf2b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.УченыеСтепени);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.КонтрактыДоговорыСотрудников
	КонтрактыДоговорыСотрудников.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.КонтрактыДоговорыСотрудников
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	Обработчики.Добавить(СотрудникиРасширенный);
КонецПроцедуры

#КонецОбласти

// Получает сотрудников, работающих в указанной организации по списку физических лиц.
// Соответствие между сотрудниками и физическими лицами не устанавливается.
//
// Параметры:
//	- ФизическиеЛица - массив,
//	- Организация
//	- ОтбиратьПоГоловнойОрганизации (необязательный) по умолчанию Истина, 
//		см. комментарий к методу КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
//
// Возвращаемое значение - массив сотрудников.
//
Функция СотрудникиФизическихЛиц(ФизическиеЛица, Организация, ОтбиратьПоГоловнойОрганизации = Истина, РаботникиПоДоговорамГПХ = Неопределено, ВключатьПодработки = Ложь) Экспорт
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыЗапроса.Организация = Организация;
	ПараметрыЗапроса.ОтбиратьПоГоловнойОрганизации = ОтбиратьПоГоловнойОрганизации;
	ПараметрыЗапроса.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	ПараметрыЗапроса.ПодработкиРаботниковПоТрудовымДоговорам = ВключатьПодработки;
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиОрганизации, "Сотрудник", Истина);
	
КонецФункции

// Возвращает основного сотрудника физического лица в организации.
//
// Параметры:
//		ФизическоеЛицо		- СправочникСсылка.ФизическиеЛица
//		Организация			- СправочникСсылка.Организации
//		ДатаСведений		- Дата
//		ВыводитьСообщения	- Булево
//
// Возвращаемое значение:
//		СправочникСсылка.Сотрудники, Неопределено если сотрудника нет.
//
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо, Организация, ДатаСведений, ВыводитьСообщения = Истина) Экспорт
	
	ПодобранныйСотрудник = Неопределено;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо), Истина, Организация, ДатаСведений);
			
		Если Не ОсновныеСотрудники.Количество() > 0 Тогда
				
			Если ВыводитьСообщения Тогда
				ТекстСообщения = НСтр("ru = '%1 не работает в организации на %2.';
										|en = '%1 does not work for the company on %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ФизическоеЛицо, Формат(ДатаСведений,"ДЛФ=D"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.Сотрудник");
			КонецЕсли;
			
		Иначе
			ПодобранныйСотрудник = ОсновныеСотрудники[0].Сотрудник;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодобранныйСотрудник;
	
КонецФункции

// Получает всех сотрудников физического лица, исключая указанного.
//
Функция ДругиеСотрудникиФизическогоЛица(ФизическоеЛицо, Организация, Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	
	ДругиеСотрудники = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
		|	И Сотрудники.Ссылка <> &Сотрудник
		|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ПараметрыСоздания = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыСоздания.Организация = Организация;
		ПараметрыСоздания.ОтбиратьПоГоловнойОрганизации = Истина;
		ПараметрыСоздания.НачалоПериода = ДатаНачала;
		ПараметрыСоздания.ОкончаниеПериода = ДатаОкончания;
		ПараметрыСоздания.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
		
		СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыСоздания);
		
		Для Каждого СтрокаТаблицы Из СотрудникиОрганизации Цикл
			Если СтрокаТаблицы.Сотрудник <> Сотрудник Тогда
				ДругиеСотрудники.Добавить(СтрокаТаблицы.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДругиеСотрудники;
	
КонецФункции

// Создает элемент справочника Сотрудники, подчиненный головному.
//
// Параметры:
//		ГоловнойСотрудник		- СправочникСсылка.Сотрудники
//		УточнениеНаименования	- Строка
//
// Возвращаемое значение:
//		СправочникСсылка.Сотрудники
//
Функция СоздатьПодработкуСотрудника(ГоловнойСотрудник, УточнениеНаименования) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, ГоловнойСотрудник, "ГоловнойСотрудник,ТабельныйНомер,ГоловнаяОрганизация,Фамилия,Имя,Отчество");
		
	Если КадровыеДанные.Количество() = 0
			Или ГоловнойСотрудник <> КадровыеДанные[0].ГоловнойСотрудник Тогда
			
		ВызватьИсключение НСтр("ru = 'Не верно указан основной сотрудник';
								|en = 'Main employee is specified incorrectly'");
		
	КонецЕсли; 
	
	КадровыеДанныеСотрудника = КадровыеДанные[0];
	
	СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(СотрудникОбъект, КадровыеДанныеСотрудника, "ФизическоеЛицо,ГоловнаяОрганизация");
	СотрудникОбъект.Код = КадровыеДанныеСотрудника.ТабельныйНомер;
	
	СотрудникОбъект.ГоловнойСотрудник = ГоловнойСотрудник;
	СотрудникОбъект.УточнениеНаименования = УточнениеНаименования;
	
	СотрудникОбъект.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		КадровыеДанныеСотрудника.Фамилия,
		КадровыеДанныеСотрудника.Имя,
		КадровыеДанныеСотрудника.Отчество,
		"",
		СотрудникОбъект.УточнениеНаименования);
	
	СотрудникОбъект.Записать();
	
	Возврат СотрудникОбъект.Ссылка;
	
КонецФункции

// Возвращает массив подработок сотрудников.
//
// Параметры:
//		ТолькоРазрешенные				- Булево
//		ПараметрыПолученияРабочихМест 	- Структура, см. КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников
//		ВключатьГоловныхСотрудников		- Булево, если значение параметра Ложь, из возвращаемого списка будут
//											исключены головные сотрудники.
//
// Возвращаемое значение:
//		Массив - СправочникСсылка.Сотрудники
//
Функция ПодработкиСотрудников(ТолькоРазрешенные, ПараметрыПолученияРабочихМест, ВключатьГоловныхСотрудников = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияПодработок, ПараметрыПолученияРабочихМест);
	
	ПараметрыПолученияПодработок.РаботникиПоТрудовымДоговорам = ВключатьГоловныхСотрудников;
	ПараметрыПолученияПодработок.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыПолученияПодработок.РаботникиПоДоговорамГПХ = Неопределено;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияПодработок);

	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

// См. КадровыйУчет.ПравоНаРазделУчета.
Функция ПравоНаРазделУчета(Право, ВидУчета) Экспорт
	
	Если ВидУчета = "ПлановыеНачисления" Тогда
		ОбъектМетаданных = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников;
	Иначе
		Возврат КадровыйУчетБазовый.ПравоНаРазделУчета(Право, ВидУчета);
	КонецЕсли;
	
	Возврат ПравоДоступа(Право, ОбъектМетаданных);
	
КонецФункции

Функция ПравоИзмененияКадровогоСостояния() Экспорт
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ПолныеПрава", , Ложь);
	
КонецФункции

// Сбрасывает в структуре параметров получения сотрудников организации
// (см. КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц
// или КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице)
// значение ключа Подразделение в Неопределено, если отключена функциональная опция
// ВыполнятьРасчетЗарплатыПоПодразделениям.
//
// Параметры:
//	ПараметрыПолученияСотрудников - Структура, см.КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц,
//										КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице.
//
Процедура ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыПолученияСотрудников.Подразделение) Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ПараметрыПолученияСотрудников.Подразделение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет историю изменения графиков работы.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения по графикам работы.
//	ДвиженияГрафиков - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		Сотрудник
//		ГрафикРаботы
//		ДействуетДо (не обязательно).
// 		
Процедура СформироватьИсториюИзмененияГрафиков(Движения, ДвиженияГрафиков) Экспорт
	
	Регистратор = Движения.ГрафикРаботыСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДвиженияГрафиков.Колонки.Найти("ДействуетДо") <> НеОпределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ГрафикРаботыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор, ВремяРегистрацииДокумента);
	
	Для Каждого СтрокаДанных Из ДвиженияГрафиков Цикл
		Движения.ГрафикРаботыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ГрафикРаботыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ТекущийГрафик;
		Иначе
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ГрафикРаботы;
		КонецЕсли;
		
		// Если есть дата "обратного" события - вводим его данные.
		Если ДействуетДоЕсть
			И ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
			
			НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.ГрафикРаботыСотрудников.Записывать Тогда
		Движения.ГрафикРаботыСотрудников.Записать();
		Движения.ГрафикРаботыСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНакопленныеСтажиФизическихЛиц() Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.УстановитьПараметр("ПериодПоУмолчанию", ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.Период КАК Период
		|ПОМЕСТИТЬ ВТСтажиКОбновлению
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|		ПО СтажиФизическихЛиц.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	СтажиФизическихЛиц.ДатаОтсчета >= &ПериодПоУмолчанию
		|	И НакопленныеСтажиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтажиКОбновлению.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТСтажиКОбновлению КАК СтажиКОбновлению";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СтажиФизическихЛиц.Период > СтажиФизическихЛиц.ДатаОтсчета
			|			ТОГДА СтажиФизическихЛиц.Период
			|		ИНАЧЕ СтажиФизическихЛиц.ДатаОтсчета
			|	КОНЕЦ КАК ДатаРасчетаСтажа,
			|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
			|	СтажиФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
			|	СтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
			|	СтажиФизическихЛиц.РазмерДней КАК РазмерДней,
			|	СтажиФизическихЛиц.ИсчисляетсяСДатыПриема КАК ИсчисляетсяСДатыПриема,
			|	СтажиФизическихЛиц.Прерван КАК Прерван
			|ПОМЕСТИТЬ ВТИсходныеДанные
			|ИЗ
			|	ВТСтажиКОбновлению КАК СтажиКОбновлению
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
			|		ПО СтажиКОбновлению.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
			|			И СтажиКОбновлению.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
			|			И СтажиКОбновлению.Период = СтажиФизическихЛиц.Период";
		
		Запрос.Выполнить();
		
		ОписательВТ = ОписательВТИсходныеДанныеДляРасчетаСтажа();
		СоздатьВТРасчетСтажа(Запрос.МенеджерВременныхТаблиц, ОписательВТ, "ВТНакопленныеСтажиФизическихЛицПредварительно");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
			|	ВЫБОР
			|		КОГДА НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа < НакопленныеСтажиФизическихЛиц.ДатаОтсчета
			|			ТОГДА НакопленныеСтажиФизическихЛиц.ДатаОтсчета
			|		ИНАЧЕ НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа
			|	КОНЕЦ КАК ДатаНачала,
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МИНИМУМ(СтажиФизическихЛицСледующие.Период), ДЕНЬ, -1), &МаксимальнаяДата) КАК ДатаОкончания,
			|	НакопленныеСтажиФизическихЛиц.ВсегоМесяцев КАК РазмерМесяцев,
			|	НакопленныеСтажиФизическихЛиц.Дней КАК РазмерДней,
			|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван
			|ИЗ
			|	ВТНакопленныеСтажиФизическихЛицПредварительно КАК НакопленныеСтажиФизическихЛиц
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛицСледующие
			|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = СтажиФизическихЛицСледующие.ФизическоеЛицо
			|			И НакопленныеСтажиФизическихЛиц.ВидСтажа = СтажиФизическихЛицСледующие.ВидСтажа
			|			И НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа < СтажиФизическихЛицСледующие.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
			|	НакопленныеСтажиФизическихЛиц.ВидСтажа,
			|	НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа,
			|	НакопленныеСтажиФизическихЛиц.ДатаОтсчета,
			|	НакопленныеСтажиФизическихЛиц.ВсегоМесяцев,
			|	НакопленныеСтажиФизическихЛиц.Дней,
			|	НакопленныеСтажиФизическихЛиц.Прерван
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо,
			|	ВидСтажа,
			|	ДатаНачала";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			НаборЗаписей = РегистрыСведений.НакопленныеСтажиФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПодбораСотрудников(СотрудникиКОбновлению = Неопределено, ОтключитьБизнесЛогику = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	// Сотрудники по трудовым договорам
	
	Если СотрудникиКОбновлению = Неопределено Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		Иначе
			Сотрудники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
	Иначе
		Сотрудники = ОбщегоНазначения.СкопироватьРекурсивно(СотрудникиКОбновлению);
	КонецЕсли;
	
	Если Сотрудники.Количество() > 0 Тогда
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(Сотрудники, ОтключитьБизнесЛогику);
	КонецЕсли;
	
	// Сотрудники - договорники ГПХ
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера";
	
	Если СотрудникиКОбновлению <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
		Запрос.Текст =
			Запрос.Текст + "
			|ГДЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник В (&СотрудникиКОбновлению)";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СотрудникиДоговорникиГПХ = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораДоговорниковГПХ(СотрудникиДоговорникиГПХ, ОтключитьБизнесЛогику);
		
	КонецЕсли;
	
	// Сотрудники без трудовых отношений
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Код КАК Код,
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
		|	Сотрудники.ВАрхиве КАК ВАрхиве
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|		ПО Сотрудники.Ссылка = ДанныеДляПодбораСотрудников.Сотрудник
		|			И (НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ)
		|ГДЕ
		|	ЕСТЬNULL(ДанныеДляПодбораСотрудников.Начало, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(ДанныеДляПодбораСотрудников.Окончание, ДАТАВРЕМЯ(3999, 12, 31)) = ДАТАВРЕМЯ(3999, 12, 31)";
	
	Если СотрудникиКОбновлению <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("СотрудникиКОбновлению", СотрудникиКОбновлению);
		Запрос.Текст =
			Запрос.Текст + "
			|	И Сотрудники.Ссылка В (&СотрудникиКОбновлению)";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДанных = Новый Структура("Ссылка,Код,Наименование,ФизическоеЛицо,ГоловнаяОрганизация,ГоловнойСотрудник,ПометкаУдаления,ВАрхиве");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			
			РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(СтруктураДанных, ОтключитьБизнесЛогику);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиПроцентыСевернойНадбавки() Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДатаОтсчета", ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений());
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&МинимальнаяДатаОтсчета КАК Период,
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.УдалитьПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
		|	&МаксимальнаяДата КАК ДействуетДо
		|ИЗ
		|	РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц КАК ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц КАК ПроцентыСевернойНадбавкиФизическихЛиц
		|		ПО ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	НЕ ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется
		|	И ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.УдалитьПроцентСевернойНадбавки > 0
		|	И ЕСТЬNULL(ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки, НЕОПРЕДЕЛЕНО) <> ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.УдалитьПроцентСевернойНадбавки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОснованиеУвольненияВСвязиСоСмертьюСотрудника(ОснованиеУвольнения) Экспорт
	
	Возврат КадровыйУчет.ОснованияУвольненияВСвязиСоСмертьюСотрудника().Найти(ОснованиеУвольнения) <> Неопределено;
	
КонецФункции

Функция ОснованияУвольненияВСвязиСоСмертьюСотрудника() Экспорт
	
	Основания = КадровыйУчетБазовый.ОснованияУвольненияВСвязиСоСмертьюСотрудника();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДополнитьОснованияУвольненияВСвязиСоСмертьюСотрудника(Основания);
		
	КонецЕсли;
	
	Возврат Основания;
	
КонецФункции

Процедура СоздатьВТРеестрОтпусков(МенеджерВременныхТаблиц, ТаблицаСотрудников, КлючВарианта, ИмяВТРеестрОтпусков = "ВТРеестрОтпусков") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Период КАК Период,
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТТаблицаСотрудников");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "ДатаНачалаУчета");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("СостоянияОтпусков", СостоянияСотрудников.СостоянияОтпусков());
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрОтпусков.ПериодЗаписи КАК Период,
		|	РеестрОтпусков.Сотрудник КАК Сотрудник,
		|	РеестрОтпусков.ДокументОснование КАК ДокументОснование,
		|	РеестрОтпусков.ВидОтпуска КАК ВидОтпускаСсылка,
		|	РеестрОтпусков.ВидОтпускаПредставление КАК ВидОтпуска,
		|	РеестрОтпусков.РабочийПериодС КАК РабочийГодС,
		|	РеестрОтпусков.РабочийПериодПо КАК РабочийГодПо,
		|	РеестрОтпусков.КоличествоДней КАК ДнейОтпуска,
		|	РеестрОтпусков.ДатаНачала КАК ДатаС,
		|	РеестрОтпусков.ДатаОкончания КАК ДатаПо,
		|	РеестрОтпусков.ВидДоговора КАК ВидДоговора,
		|	РеестрОтпусков.Основание КАК Основание,
		|	РеестрОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	РеестрОтпусков.ИсходныйДокументДата КАК ИсходныйДокументДата,
		|	РеестрОтпусков.ИсходныйДокументНомер КАК ИсходныйДокументНомер,
		|	ВЫБОР
		|		КОГДА РеестрОтпусков.Компенсация
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЭтоКомпенсацияОтпуска,
		|	КадровыеДанныеСотрудников.ДатаНачалаУчета КАК ДатаНачалаУчета,
		|	РеестрОтпусков.Состояние КАК Состояние,
		|	РеестрОтпусков.ДатаНачала КАК СостояниеС,
		|	РеестрОтпусков.ДатаОкончания КАК СостояниеПо
		|ПОМЕСТИТЬ ВТРеестрОтпусковПредварительно
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОтпусковКарточкиСотрудника КАК РеестрОтпусков
		|		ПО ТаблицаСотрудников.Сотрудник = РеестрОтпусков.Сотрудник
		|			И ТаблицаСотрудников.Период >= РеестрОтпусков.ПериодЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ТаблицаСотрудников.Период = КадровыеДанныеСотрудников.Период
		|ГДЕ
		|	&УсловиеДоговора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеестрОтпусков.Период,
		|	РеестрОтпусков.Сотрудник,
		|	РеестрОтпусков.ДокументОснование,
		|	РеестрОтпусков.ВидОтпуска,
		|	ВЫБОР
		|		КОГДА РеестрОтпусков.ВидОтпуска ССЫЛКА Справочник.ВидыОтпусков
		|			ТОГДА ВЫБОР
		|					КОГДА РеестрОтпусков.ВидОтпуска.НаименованиеПолное = """"
		|						ТОГДА РеестрОтпусков.ВидОтпуска.Наименование
		|					ИНАЧЕ ВЫРАЗИТЬ(РеестрОтпусков.ВидОтпуска.НаименованиеПолное КАК СТРОКА(1024))
		|				КОНЕЦ
		|		ИНАЧЕ РеестрОтпусков.ВидОтпуска
		|	КОНЕЦ,
		|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	РеестрОтпусков.КоличествоДнейОтпуска,
		|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия,
		|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия,
		|	РеестрОтпусков.ВидДоговора,
		|	ВЫРАЗИТЬ(РеестрОтпусков.Основание КАК СТРОКА(1024)),
		|	РеестрОтпусков.ДокументОснование,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	"""",
		|	ВЫБОР
		|		КОГДА РеестрОтпусков.ДатаНачалаПериодаОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	КадровыеДанныеСотрудников.ДатаНачалаУчета,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка),
		|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия,
		|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
		|		ПО ТаблицаСотрудников.Сотрудник = РеестрОтпусков.Сотрудник
		|			И ТаблицаСотрудников.Период >= РеестрОтпусков.ДатаНачалаПериодаОтсутствия
		|			И (РеестрОтпусков.Регистратор ССЫЛКА Документ.ПереносДанных)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ТаблицаСотрудников.Период = КадровыеДанныеСотрудников.Период
		|ГДЕ
		|	&УсловиеДоговора";
	
	Если КлючВарианта = "Т2ГСМС" Тогда
		УсловиеДоговора = "РеестрОтпусков.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего))";
	ИначеЕсли КлючВарианта = "Т2" Тогда
		УсловиеДоговора = "НЕ РеестрОтпусков.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего))";
	Иначе
		УсловиеДоговора = "(Истина)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДоговора", УсловиеДоговора);
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрОтпусков.Период КАК Период,
		|	РеестрОтпусков.Сотрудник КАК Сотрудник,
		|	РеестрОтпусков.ДокументОснование КАК ДокументОснование,
		|	РеестрОтпусков.ВидОтпускаСсылка КАК ВидОтпускаСсылка,
		|	РеестрОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	РеестрОтпусков.РабочийГодС КАК РабочийГодС,
		|	РеестрОтпусков.РабочийГодПо КАК РабочийГодПо,
		|	РеестрОтпусков.ДнейОтпуска КАК ДнейОтпуска,
		|	РеестрОтпусков.ДатаС КАК ДатаС,
		|	РеестрОтпусков.ДатаПо КАК ДатаПо,
		|	РеестрОтпусков.Основание КАК Основание,
		|	РеестрОтпусков.ИсходныйДокумент КАК ИсходныйДокумент,
		|	РеестрОтпусков.ДатаНачалаУчета КАК ДатаНачалаУчета,
		|	РеестрОтпусков.ЭтоКомпенсацияОтпуска КАК ЭтоКомпенсацияОтпуска,
		|	РеестрОтпусков.Состояние КАК Состояние,
		|	РеестрОтпусков.СостояниеС КАК СостояниеС,
		|	РеестрОтпусков.СостояниеПо КАК СостояниеПо
		|ПОМЕСТИТЬ ВТРеестрОтпусков
		|ИЗ
		|	ВТРеестрОтпусковПредварительно КАК РеестрОтпусков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРеестрОтпусковПредварительно";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТРеестрОтпусков", ИмяВТРеестрОтпусков);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция МассивСотрудников(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено, ПодработкиРаботниковПоТрудовымДоговорам = Ложь, ОтбиратьПоГоловнойОрганизации = Ложь) Экспорт
	
	МассивФизическихЛиц = Новый Массив();
	МассивФизическихЛиц.Добавить(ФизическоеЛицо);
	
	ТаблицаСотрудников = ТаблицаСотрудниковОрганизации(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ, ПодработкиРаботниковПоТрудовымДоговорам, ОтбиратьПоГоловнойОрганизации);
	
	Возврат ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ВидыЗанятостиСотрудниковИнтервальный;
	
	// Метаданные.РегистрыСведений.ГрафикРаботыСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ГрафикРаботыСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ГрафикРаботыСотрудниковИнтервальный;
	
	// Метаданные.РегистрыСведений.КадроваяИсторияСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.КадроваяИсторияСотрудниковИнтервальный;
	
	// Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц;
	
	// Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц;
	
	// Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Справочники.Сотрудники;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц;
	
	// Метаданные.РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники;
	
	// Метаданные.РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники;
	
	// Метаданные.РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Справочники.Сотрудники;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники;
	
	// Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников;
	
	// Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников;
	
	// Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников;
	
	// Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Справочники.Сотрудники;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников;
	
	// Метаданные.РегистрыСведений.СтажиФизическихЛиц
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.СтажиФизическихЛиц;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.НакопленныеСтажиФизическихЛиц;
	
КонецПроцедуры

Процедура ПриЗаполненииТаблицыОбъектовРегистрирующихЗависимыеОбъекты(ДанныеРегистрации) Экспорт
	
	// Метаданные.Документы.НачальнаяШтатнаяРасстановка
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.НачальнаяШтатнаяРасстановка;
	
	// Метаданные.Документы.ПереводКДругомуРаботодателю
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.ПереводКДругомуРаботодателю;
	
	// Метаданные.Документы.ПеремещениеВДругоеПодразделение
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.ПеремещениеВДругоеПодразделение;
	
	// Метаданные.Документы.ПриемНаРаботу
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.ПриемНаРаботу;
	
	// Метаданные.Документы.ПриемНаРаботуСписком
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.ПриемНаРаботуСписком;
	
	
	// Метаданные.Документы.КадровыйПеревод
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.КадровыйПеревод;
	
	// Метаданные.Документы.КадровыйПереводСписком
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.КадровыйПереводСписком;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВторичныхДанныхПриОбменах

Процедура ЗаполнитьОсновныхСотрудниковФизическихЛиц(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников.Имя,
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды", "Сотрудник"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(Сотрудники.Ссылка) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	&МаксимальнаяДата КАК ДатаОкончания
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО Сотрудники.ГоловнаяОрганизация = ВидыЗанятостиСотрудников.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО Сотрудники.ГоловнаяОрганизация = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО Сотрудники.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо ЕСТЬ NULL
		|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо ЕСТЬ NULL
		|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОсновныеСотрудникиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
				
				ОбновлениеВыполнено = Ложь;
				Продолжить;
				
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ВидыЗанятостиСотрудников.Сотрудник) КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ВидыЗанятостиСотрудниковПредыдущие.Период) ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ ВидыЗанятостиСотрудников.Период
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период) ЕСТЬ NULL
		|			ТОГДА &МаксимальнаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период), ДЕНЬ, -1)
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковПредыдущие
		|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковПредыдущие.ГоловнаяОрганизация
		|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковПредыдущие.ФизическоеЛицо
		|			И (ВидыЗанятостиСотрудниковПредыдущие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
		|			И ВидыЗанятостиСотрудников.Период > ВидыЗанятостиСотрудниковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковСледующие
		|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковСледующие.ГоловнаяОрганизация
		|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковСледующие.ФизическоеЛицо
		|			И (ВидыЗанятостиСотрудниковСледующие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
		|			И ВидыЗанятостиСотрудников.Период < ВидыЗанятостиСотрудниковСледующие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
		|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ВидыЗанятостиСотрудников.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
		|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗанятостиСотрудников.Период,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ГоловнаяОрганизация,
		|	ДатаНачала";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОсновныеСотрудникиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
				
				ОбновлениеВыполнено = Ложь;
				Продолжить;
				
			КонецЕсли;
			
			Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				КонецЦикла;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыДействияДоговоровГПХ.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник КАК Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаНачала КАК ДатаНачала,
		|	ПериодыДействияДоговоровГПХ.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыДействияДоговоровГПХ
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГПХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО ПериодыДействияДоговоровГПХ.Организация.ГоловнаяОрганизация = ВидыЗанятостиСотрудников.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО ПериодыДействияДоговоровГПХ.Организация.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо ЕСТЬ NULL
		|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник КАК Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаНачала КАК ДатаНачала,
		|	ЕСТЬNULL(МАКСИМУМ(ПериодыДействияДоговоровГПХСледующиеСотрудники.ДатаОкончания), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыДействияДоговоровГПХСОкончанием
		|ИЗ
		|	ВТПериодыДействияДоговоровГПХ КАК ПериодыДействияДоговоровГПХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияДоговоровГПХ КАК ПериодыДействияДоговоровГПХСледующиеСотрудники
		|		ПО ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация = ПериодыДействияДоговоровГПХСледующиеСотрудники.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ПериодыДействияДоговоровГПХСледующиеСотрудники.ФизическоеЛицо
		|			И ПериодыДействияДоговоровГПХ.Сотрудник = ПериодыДействияДоговоровГПХСледующиеСотрудники.Сотрудник
		|			И ПериодыДействияДоговоровГПХ.ДатаНачала <= ПериодыДействияДоговоровГПХСледующиеСотрудники.ДатаНачала
		|			И ПериодыДействияДоговоровГПХ.ДатаОкончания >= ПериодыДействияДоговоровГПХСледующиеСотрудники.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(МИНИМУМ(ПериодыДействияДоговоровГПХ.ДатаНачала), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
		|	ПериодыДействияДоговоровГПХ.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТПериодыДействияДоговоровГПХСОкончанием КАК ПериодыДействияДоговоровГПХ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ГоловнаяОрганизация,
		|	ДатаНачала";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеВыполнено = Ложь;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОсновныеСотрудникиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				ПредыдущаяЗапись = Неопределено;
				Пока Выборка.Следующий() Цикл
					
					Если ПредыдущаяЗапись = Неопределено Тогда
						
						Запись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, Выборка);
						
						Запись.ДатаНачала = '00010101';
						
					Иначе
						
						Если Выборка.ДатаОкончания <= ПредыдущаяЗапись.ДатаОкончания
							Или ПредыдущаяЗапись.Сотрудник = Выборка.Сотрудник Тогда
							
							Продолжить;
							
						Иначе
							
							Запись = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(Запись, Выборка);
							
							Если ПредыдущаяЗапись.ДатаОкончания < Запись.ДатаНачала Тогда
								ПредыдущаяЗапись.ДатаОкончания = НачалоДня(Запись.ДатаНачала - 1);
							Иначе
								Запись.ДатаНачала = КонецДня(ПредыдущаяЗапись.ДатаОкончания) + 1;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ПредыдущаяЗапись = Запись;
					
				КонецЦикла;
				
				ПредыдущаяЗапись.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацииСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииВКоторыхРаботалиСотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники КАК ОрганизацииВКоторыхРаботалиСотрудники";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.Ссылка,
			|	Сотрудники.ГоловнаяОрганизация
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
		
		Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники", "", "") Тогда
			
			Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
			Набор.Загрузить(Запрос.Выполнить().Выгрузить());
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзла(ПараметрыОбновления) Экспорт
	
	// РегистрСведений.ОсновныеСотрудникиФизическихЛиц
	ЗаполнитьОсновныхСотрудниковФизическихЛиц(ПараметрыОбновления);
	
	// РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники
	ЗаполнитьОрганизацииСотрудников(ПараметрыОбновления);
	
	// РегистрСведений.ДанныеДляПодбораСотрудников
	ПерезаполнитьДанныеДляПодбораСотрудников();
	
	// РегистрСведений.НакопленныеСтажиФизическихЛиц
	ЗаполнитьНакопленныеСтажиФизическихЛиц();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц") Тогда
		МодульСводныеДанныеФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СводныеДанныеФизическихЛиц");
		МодульСводныеДанныеФизическихЛиц.ПервоначальноеЗаполнениеСтроковыхСведенийФизическихЛиц(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает адрес временного хранилища с фотографией физического лица.
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Строка - Адрес фотографии физического лица.
Функция АдресФотографииФизическогоЛица(ФизическоеЛицо) Экспорт
	Фотографии = АдресаФотографийФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо));
	Возврат ?(Фотографии[ФизическоеЛицо] = Неопределено, "", Фотографии[ФизическоеЛицо]);
КонецФункции

// Возвращает адреса временных хранилищ с фотографиями физических лиц.
// 
// Параметры:
//  ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.ФизическиеЛица
//   * Значение - Строка - адрес временного хранилища с фотографией.
Функция АдресаФотографийФизическихЛиц(ФизическиеЛица) Экспорт
	
	Фотографии = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФотографииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФотографииФизическихЛиц.Фотография КАК Фотография
		|ИЗ
		|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
		|ГДЕ
		|	ФотографииФизическихЛиц.ФизическоеЛицо В(&ФизическиеЛица)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Фотографии;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Фотографии.Вставить(Выборка.ФизическоеЛицо, 
			ПоместитьВоВременноеХранилище(Выборка.Фотография.Получить(), Выборка.ФизическоеЛицо.УникальныйИдентификатор()));
	КонецЦикла;
	
	Возврат Фотографии;
	
КонецФункции

Процедура СформироватьДвиженияВозвратаВременноОсвобожденныхПозиции(Движения, Сотрудники, ДатаВозврата, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	СотрудникиПериоды = ТаблицаЗначенийСотрудникиПериоды(Сотрудники, ДатаВозврата);
	СформироватьДвиженияВозвратаВременноОсвобожденныхПозицииПоТаблицеЗначений(Движения, СотрудникиПериоды, ИсключаемыеРегистраторы);
	
КонецПроцедуры

Процедура СформироватьДвиженияВозвратаВременноОсвобожденныхПозицииПоТаблицеЗначений(Движения, СотрудникиПериоды, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ПараметрыПостроенияСрезовЗанятостиПозицийШтатногоРасписания(Движения, ИсключаемыеРегистраторы);
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиПериоды, "Сотрудник");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период","ДатаНачала");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗанятостьПозицийШтатногоРасписания",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьПозиций.Период КАК Период,
		|	ЗанятостьПозиций.Сотрудник КАК Сотрудник,
		|	ЗанятостьПозиций.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗанятостьПозиций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗанятостьПозиций.ДокументОснование КАК ДокументОснование,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	ЗанятостьПозиций.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятостьПозиций.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник
		|ИЗ
		|	ВТЗанятостьПозицийШтатногоРасписанияСрезПоследних КАК ЗанятостьПозиций
		|ГДЕ
		|	ЗанятостьПозиций.ЗамещаемыйСотрудник = ЗанятостьПозиций.Сотрудник
		|	И ЗанятостьПозиций.КоличествоСтавок > 0
		|	И ЗанятостьПозиций.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)";
	
	СформироватьДвиженияЗанятостьПозицийШтатногоРасписания(Движения, Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры

Функция СтавкаВременноОсвобождена(ДатаСведений, Сотрудник, ИсключаемыеРегистраторы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	Если ЗначениеЗаполнено(ИсключаемыеРегистраторы) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
	КонецЕсли;
	
	СотрудникиПериоды = ТаблицаЗначенийСотрудникиПериоды(Сотрудник, ДатаСведений);
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиПериоды, "Сотрудник");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период","ДатаНачала");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗанятостьПозицийШтатногоРасписания",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьПозиций.Период КАК Период,
		|	ЗанятостьПозиций.Сотрудник КАК Сотрудник,
		|	ЗанятостьПозиций.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗанятостьПозиций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗанятостьПозиций.ДокументОснование КАК ДокументОснование,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	ЗанятостьПозиций.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятостьПозиций.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник
		|ИЗ
		|	ВТЗанятостьПозицийШтатногоРасписанияСрезПоследних КАК ЗанятостьПозиций
		|ГДЕ
		|	ЗанятостьПозиций.ЗамещаемыйСотрудник = ЗанятостьПозиций.Сотрудник
		|	И ЗанятостьПозиций.КоличествоСтавок > 0
		|	И ЗанятостьПозиций.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура СформироватьДвиженияЗанятостиВременноОсвобожденныхПозицииШтатногоРасписания(Движения, Сотрудники, ДатаНачала, ДатаОкончания, ДатаОкончанияПланируемая, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	СотрудникиПериоды = ТаблицаЗначенийСотрудникиПериоды(Сотрудники, ДатаНачала, ДатаОкончания);
	СформироватьДвиженияЗанятостиВременноОсвобожденныхПозицииПоТаблицеЗначений(Движения, СотрудникиПериоды, ДатаОкончанияПланируемая, ИсключаемыеРегистраторы);
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.Должности.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры

// Выбирает из переданной ВТ периоды в которых сотрудник либо вообще не работал, либо работал не весь период.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - приемник создаваемой временной таблицы
//  ИмяВТСотрудникиПериоды	 - имя временной таблицы в менеджере временных таблиц, содержащей сотрудников и проверяемые периоды
//  						Сотрудник	 
//  						ДатаНачала - начало проверяемого периода
//  						ДатаОкончания - окончание проверяемого периода.
//
Процедура СоздатьВТПериодыВКоторыхСотрудникНеРаботал(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписательТаблиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ИмяВТСотрудникиПериоды);
	
	ЗапросКадровыхДанных = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(
	Истина,
	ОписательТаблиц,
	"ДатаПриема,ДатаЗавершенияРаботы,ОформленПоТрудовомуДоговору",
	,
	"ВТКадровыеДанныеСотрудников");
	
	ЗапросКадровыхДанных.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросКадровыхДанных.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.ДатаНачала КАК ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыВКоторыхСотрудникНеРаботал
	|ИЗ
	|	ИмяВТСотрудникиПериоды КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (КадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору)
	|			И (ДанныеДокумента.ДатаНачала < КадровыеДанныеСотрудников.ДатаПриема
	|				ИЛИ ДанныеДокумента.ДатаОкончания < КадровыеДанныеСотрудников.ДатаПриема
	|				ИЛИ КадровыеДанныеСотрудников.ДатаЗавершенияРаботы <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (ДанныеДокумента.ДатаНачала > КадровыеДанныеСотрудников.ДатаЗавершенияРаботы
	|						ИЛИ ДанныеДокумента.ДатаОкончания > КадровыеДанныеСотрудников.ДатаЗавершенияРаботы))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает запрос, создающий временную таблицу с полями Период, ПозицияШтатногоРасписания, Сотрудник, ДатаПриема.
//
// Параметры:
//  ТолькоРазрешенные                    - Булево
//  ИмяВТПериодПозицияШтатногоРасписания - Строка
//  ИмяПоляПериод                        - Строка
//  ИмяПоляПозицияШтатногоРасписания     - Строка
//
// Возвращаемое значение:
//  Запрос
//
Функция ЗапросВТДанныеСотрудниковПозицийШтатногоРасписания(ТолькоРазрешенные,
	ИмяВТПериодПозицияШтатногоРасписания = "ВТПериодПозицияШтатногоРасписания", ИмяПоляПериод = "Период",
	ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодПозицияШтатногоРасписания.Период КАК Период,
		|	ПериодПозицияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ДанныеДляПодбораСотрудников.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема
		|ПОМЕСТИТЬ ВТДанныеСотрудниковПозицийШтатногоРасписания
		|ИЗ
		|	ВТПериодПозицияШтатногоРасписания КАК ПериодПозицияШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|			ПО ДанныеДляПодбораСотрудников.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|		ПО (ПериодПозицияШтатногоРасписания.ПозицияШтатногоРасписания <> ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка))
		|			И ПериодПозицияШтатногоРасписания.ПозицияШтатногоРасписания = ДанныеДляПодбораСотрудников.ДолжностьПоШтатномуРасписанию
		|			И (ВЫБОР
		|				КОГДА ПериодПозицияШтатногоРасписания.Период = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|				ИНАЧЕ ПериодПозицияШтатногоРасписания.Период
		|			КОНЕЦ МЕЖДУ ДанныеДляПодбораСотрудников.Начало И ДанныеДляПодбораСотрудников.Окончание)
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодПозицияШтатногоРасписания", ИмяВТПериодПозицияШтатногоРасписания);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодПозицияШтатногоРасписания.Период",
		"ПериодПозицияШтатногоРасписания." + ИмяПоляПериод);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодПозицияШтатногоРасписания.ПозицияШтатногоРасписания",
		"ПериодПозицияШтатногоРасписания." + ИмяПоляПозицияШтатногоРасписания);
	
	Возврат Запрос;
	
КонецФункции

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

// См. УчетОригиналовПервичныхДокументовПереопределяемый.ПриОпределенииОбъектовСКомандамиУчетаОригиналов.
Процедура ПриОпределенииОбъектовСКомандамиУчетаОригиналов(СписокОбъектов) Экспорт
	
	// Формы списков журналов документов
	СписокОбъектов.Добавить("ЖурналДокументов.КадровыеДокументы.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.ПриемыПереводыУвольнения.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.ИзменениеОплатыСотрудников.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.Отсутствия.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.Отпуска.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.Командировки.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.ОтпускаПоУходуЗаРебенком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.ГрафикиПереносыОтпусков.Форма.ФормаСписка");
	СписокОбъектов.Добавить("ЖурналДокументов.Отгулы.Форма.ФормаСписка");
	
	// Формы списков документов
	СписокОбъектов.Добавить("Документ.КадровыйПеревод.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПриемНаРаботу.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПеремещениеВДругоеПодразделение.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПереводКДругомуРаботодателю.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.Увольнение.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОтпускПоУходуЗаРебенком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.Отпуск.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.Командировка.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОплатаПоСреднемуЗаработку.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОтпускБезСохраненияОплаты.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.РаботаСверхурочно.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПростойСотрудников.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОтменаСовмещения.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.Совмещение.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.РаботаВВыходныеИПраздничныеДни.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.БольничныйЛист.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОтпускаСотрудников.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.КомандировкиСотрудников.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ГрафикОтпусков.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПереносОтпуска.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ИзменениеКвалификационногоРазряда.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПродлениеКонтрактаДоговора.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПриемНаРаботуСписком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.КадровыйПереводСписком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.УвольнениеСписком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ИзменениеГрафикаРаботыСписком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.Отгул.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.РегистрацияПереработок.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ВосстановлениеВДолжности.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОтпускБезСохраненияОплатыСписком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОтгулСписком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ПрисвоениеКлассногоЧинаРангаСписком.Форма.ФормаСписка");
	СписокОбъектов.Добавить("Документ.ОплатаПоСреднемуЗаработкуСписком.Форма.ФормаСписка");
	
	// ДМС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ПриОпределенииОбъектовСКомандамиУчетаОригиналов(СписокОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// См. УчетОригиналовПервичныхДокументовПереопределяемый.ПриОпределенииМногосотрудниковыхДокументов.
Процедура ПриОпределенииМногосотрудниковыхДокументов(СписокОбъектов) Экспорт
	
	СписокОбъектов.Вставить(Метаданные.Документы.ОтпускаСотрудников.ПолноеИмя(), "Сотрудники");
	СписокОбъектов.Вставить(Метаданные.Документы.ПриемНаРаботуСписком.ПолноеИмя(), "Сотрудники");
	СписокОбъектов.Вставить(Метаданные.Документы.КадровыйПереводСписком.ПолноеИмя(), "Сотрудники");
	СписокОбъектов.Вставить(Метаданные.Документы.УвольнениеСписком.ПолноеИмя(), "Сотрудники");
	СписокОбъектов.Вставить(Метаданные.Документы.ОтпускБезСохраненияОплатыСписком.ПолноеИмя(), "Сотрудники");
	СписокОбъектов.Вставить(Метаданные.Документы.ОтгулСписком.ПолноеИмя(), "Сотрудники");
	СписокОбъектов.Вставить(Метаданные.Документы.ОплатаПоСреднемуЗаработкуСписком.ПолноеИмя(), "Сотрудники");
	
	// ДМС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ПриОпределенииМногосотрудниковыхДокументов(СписокОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// См. УчетОригиналовПервичныхДокументовПереопределяемый.ЗаполнитьТаблицуУчетаОригиналов.
Процедура ЗаполнитьТаблицуУчетаОригиналов(ТаблицаУчетаОригиналов) Экспорт
	
	// Кадровый перевод
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.КадровыйПеревод;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т5";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.КадровыйПеревод;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ДопСоглашениеКТрудовомуДоговоруПриПереводеНаДистанционнуюРаботу";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.КадровыйПеревод;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ЗаявлениеОПереводеНаДистанционнуюРаботу";
	
	// Прием на работу
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботу;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т1";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботу;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговор";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботу;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятий";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботу;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятийБезДоступаКЗарплате";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботу;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботу;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ЗаявлениеОПереводеНаДистанционнуюРаботу";
	
	// Перевод к другому работодателю
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПереводКДругомуРаботодателю;
	НоваяСтрока.Идентификатор = "СогласиеРаботника";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПереводКДругомуРаботодателю;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т8";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПереводКДругомуРаботодателю;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т61";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПереводКДругомуРаботодателю;
	НоваяСтрока.Идентификатор = "ПФ_MXL_СправкаРасширенная";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПереводКДругомуРаботодателю;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т1";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПереводКДругомуРаботодателю;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т2";
	
	// Увольнение
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.Увольнение;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т8";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.Увольнение;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т61";
	
	// Отпуск по уходу за ребенком
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ОтпускПоУходуЗаРебенком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т6";
	
	// Отпуск
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.Отпуск;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т6";
	
	// Командировка
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.Командировка;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т9";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.Командировка;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т10";
	
	// Отсутствие с сохранением оплаты
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ОплатаПоСреднемуЗаработку;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработку";

	// Работа сверхурочно
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.РаботаСверхурочно;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ПриказОСверхурочнойРаботе";
	
	// Простой, отстранение от работы
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПростойСотрудников;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ПриказОВременнойПриостановкеРабот";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПростойСотрудников;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ПриказОбОтстраненииОтРаботы";
	
	// Работа в выходные и праздничные дни
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.РаботаВВыходныеИПраздничныеДни;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ПриказОРаботеВВыходнойИПраздничныйДень";
	
	// Больничный лист
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.БольничныйЛист;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ДоплатаЗаДниНетрудоспособности";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.БольничныйЛист;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т6";
	
	// Оплата дней ухода за детьми-инвалидами
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ПриказОПредоставленииДнейУхода";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ЗаявлениеОПредоставленииДополнительныхВыходныхДней";
	
	// Прием на работу списком
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботуСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т1а";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботуСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговор";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботуСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятий";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботуСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятийБезДоступаКЗарплате";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботуСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.ПриемНаРаботуСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ЗаявлениеОПереводеНаДистанционнуюРаботу";
	
	// Кадровый перевод списком
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.КадровыйПереводСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т5а";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.КадровыйПереводСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_ЗаявлениеОПереводеНаДистанционнуюРаботу";
	
	// Увольнение списком
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.УвольнениеСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т8а";
	
	НоваяСтрока = ТаблицаУчетаОригиналов.Добавить();
	НоваяСтрока.ОбъектМетаданных = Метаданные.Документы.УвольнениеСписком;
	НоваяСтрока.Идентификатор = "ПФ_MXL_Т61";
	
	// ДМС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ЗаполнитьТаблицуУчетаОригиналов(ТаблицаУчетаОригиналов);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйУчетБазовый.ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.ОбщиеМакеты.ПФ_MXL_Т8,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина,
		,
		,
		Перечисления.ВариантыПодписанияДокументовКЭДО.НеобходимаСобственноручнаяПодпись);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ТрудовойДоговор,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки,
		,
		,
		"01.006");
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки,
		,
		,
		"01.006");
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.ОбщиеМакеты.ПФ_MXL_Т6,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаТ9.Макеты.ПФ_MXL_Т9,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаТ9.Макеты.ПФ_MXL_Т10,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаТ9.Макеты.ПФ_MXL_Т10а,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ВосстановлениеВДолжности.Макеты.ПФ_MXL_ПриказОВосстановленииНаРаботе,
		Перечисления.СодержимоеДокументов.СодержитЗарплату);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.ОбщиеМакеты.ПФ_MXL_ФормаСЗВ_СТАЖ,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.Отгул.Макеты.ПФ_MXL_Отгул,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ПереносОтпуска.Макеты.ПФ_MXL_ЗаявлениеНаПереносОтпуска,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаТ6а.Макеты.ПФ_MXL_Т6а,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаТ9а.Макеты.ПФ_MXL_Т9а,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаТ8а.Макеты.ПФ_MXL_Т8а,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина,
		Истина,
		,
		Перечисления.ВариантыПодписанияДокументовКЭДО.НеобходимаСобственноручнаяПодпись);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		"Раздел3РСВ", // Выводится по документам Увольнение и УвольнениеСписком
		НСтр("ru = 'Раздел 3 РСВ';
			|en = 'Section 3 RSV'"),
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		ПерсонифицированныйУчет.ИдентификаторПечатнойФормыФормаСЗВМ(), // Выводится по документам Увольнение и УвольнениеСписком
		НСтр("ru = 'СЗВ-М';
			|en = 'SZV-M'"),
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		ПерсонифицированныйУчет.ИдентификаторПечатнойФормыФормаСЗВСТАЖ(), // Выводится по документам Увольнение и УвольнениеСписком
		НСтр("ru = 'СЗВ-СТАЖ';
			|en = 'SZV-STAZH'"),
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ИзмененияГрафикаРаботыСписком,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		ПерсонифицированныйУчет.ИдентификаторПечатнойФормыПодраздела_1_2_ФормыЕФС_1(), // Выводится по документам Увольнение и УвольнениеСписком
		НСтр("ru = 'Подраздел 1.2 формы ЕФС-1';
			|en = 'Subsection 1.2 of Unified Information Form-1'"),
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		ПерсонифицированныйУчет.ИдентификаторПечатнойФормы_ФормаЕФС_1(), // Выводится по документам Увольнение и УвольнениеСписком
		НСтр("ru = 'Подразделы 1.2 и 3 формы ЕФС-1';
			|en = 'Subsection 1.2 and 3 of the Unified Information Form-1'"),
		Перечисления.СодержимоеДокументов.СодержитЗарплату,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ИдентификаторКомандыПечати_ФормаСЗВ_ДСО(), // Выводится по документам Увольнение и УвольнениеСписком
		НСтр("ru = 'СЗВ-ДСО';
			|en = 'SZV-DSO'"),
		Перечисления.СодержимоеДокументов.СодержитЗарплату,
		Истина);
	
	КонтрактыДоговорыСотрудников.ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаписатьФотографию(ФизическоеЛицо, АдресФотографии) Экспорт 

	МенеджерЗаписи = РегистрыСведений.ФотографииФизическихЛиц.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	
	Если Не ЗначениеЗаполнено(АдресФотографии) Тогда
		МенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.Фотография = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФотографии));
	МенеджерЗаписи.Записать(); 
	
КонецПроцедуры

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ФотографииФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	НовыеСведения.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МетаданныеОбъекта.Ресурсы.Фотография.ПолноеИмя());
	НовыеСведения.КатегорияДанных = "Фотография";
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ИзменениеСведенийФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ПрежнееЗначение.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.УстановленноеЗначение.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "ЛичныеДанные";
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НаградыФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.НомерПриказа.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаПриказа.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.НаименованиеПриказа.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "Награды";
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.УченыеЗванияФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаПрисвоенияУченогоЗвания.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.АттестатСерия.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.АттестатНомер.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.АттестатВыданОрганизация.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "Образование";
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.УченыеСтепениФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаПрисужденияУченойСтепени.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДиссертационныйСовет.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДипломСерияНомер.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДипломВыданОрганизация.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "Образование";
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.Организация.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаНачала.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаОкончания.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.Должность.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.Обязанности.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.СфераДеятельностиКомпании.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.АдресОрганизации.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "ОпытРаботы";
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	НовыеСведения.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		МетаданныеОбъекта.Измерения.Наименование.ПолноеИмя());
	НовыеСведения.КатегорияДанных = "ФИО";
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов.
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, ОтказОтСкрытия) Экспорт
	
	СубъектыИсключения = ТаблицаИсключений.ВыгрузитьКолонку("Субъект");
	СубъектыДляСкрытия = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Субъекты, СубъектыИсключения);
	
	Если Не ЗначениеЗаполнено(СубъектыДляСкрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтменыСкрытия = НСтр("ru = 'субъект принят на работу';
								|en = 'employee is hired'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СубъектыДляСкрытия;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовоеИсключение = ТаблицаИсключений.Добавить();
		НовоеИсключение.Субъект = Выборка.ФизическоеЛицо;
		НовоеИсключение.ПричинаОтменыСкрытия = ПричинаОтменыСкрытия;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КадровыеДанныеФизическихЛиц

Функция ЗапросВТТрудоваяДеятельностьФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТТрудоваяДеятельностьФизическихЛиц = "ВТТрудоваяДеятельностьФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТрудоваяДеятельностьФизическихЛиц.Организация,
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаНачала,
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаОкончания,
		|	ТрудоваяДеятельностьФизическихЛиц.Должность,
		|	ТрудоваяДеятельностьФизическихЛиц.Обязанности,
		|	ТрудоваяДеятельностьФизическихЛиц.СфераДеятельностиКомпании,
		|	ТрудоваяДеятельностьФизическихЛиц.АдресОрганизации
		|ПОМЕСТИТЬ ВТТрудоваяДеятельностьФизическихЛиц
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТрудоваяДеятельностьФизическихЛиц КАК ТрудоваяДеятельностьФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ТрудоваяДеятельностьФизическихЛиц.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТТрудоваяДеятельностьФизическихЛиц", ИмяВТТрудоваяДеятельностьФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

// Связанные объекты данных физического лица.
// 
// Параметры:
//  ДанныеФизическогоЛица - Структура: см. КадровыйУчет.НовыеДанныеФизическогоЛица
// 
// Возвращаемое значение:
//  Структура:
//    * Гражданство - Массив из Структура: см. РегистрыСведений.ГражданствоФизическихЛиц.НовоеГражданство
//    * Образование - ТаблицаЗначений:  см. Справочники.ОбразованиеФизическихЛиц.НовыеДанныеОбОбразовании
//    * СостояниеВБраке - Массив из Структура: см. РегистрыСведений.СостоянияВБракеФизическихЛиц.НовоеСостояниеВБраке
//    * ТрудоваяДеятельность - Массив из Структура: см. РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц.НоваяТрудоваяДеятельность
//    * ЗнаниеЯзыков - Массив из Структура: см. РегистрыСведений.ЗнаниеЯзыковФизическихЛиц.НовоеЗнаниеЯзыка
//    * УченыеСтепени - Массив из Структура
//    * АдресФотографии - Строка, УникальныйИдентификатор -
Функция СвязанныеОбъектыДанныхФизическогоЛица(ДанныеФизическогоЛица) Экспорт
	
	СвязанныеОбъекты = КадровыйУчетБазовый.СвязанныеОбъектыДанныхФизическогоЛица(ДанныеФизическогоЛица);
	
	Если ДанныеФизическогоЛица.Свойство("Образование") Тогда
		СвязанныеОбъекты.Вставить("Образование", ДанныеФизическогоЛица.Образование);
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("СостояниеВБраке") Тогда
		СвязанныеОбъекты.Вставить("СостояниеВБраке", ДанныеФизическогоЛица.СостояниеВБраке);
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("ТрудоваяДеятельность") Тогда
		СвязанныеОбъекты.Вставить("ТрудоваяДеятельность", ДанныеФизическогоЛица.ТрудоваяДеятельность);
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("ЗнаниеЯзыков") Тогда
		СвязанныеОбъекты.Вставить("ЗнаниеЯзыков", ДанныеФизическогоЛица.ЗнаниеЯзыков);
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("УченыеСтепени") Тогда
		СвязанныеОбъекты.Вставить("УченыеСтепени", ДанныеФизическогоЛица.УченыеСтепени);
	КонецЕсли;
	
	Если ДанныеФизическогоЛица.Свойство("АдресФотографии") Тогда
		СвязанныеОбъекты.Вставить("АдресФотографии", ДанныеФизическогоЛица.АдресФотографии);
	КонецЕсли;
	
	Возврат СвязанныеОбъекты;
		
КонецФункции

Функция ЗаполнитьДанныеДокументовПоИностраннымГражданам(ДанныеДляЗаполнения, СсылкаНаДокумент) Экспорт
	
	Результат = КадровыйУчетБазовый.ЗаполнитьДанныеДокументовПоИностраннымГражданам(ДанныеДляЗаполнения, СсылкаНаДокумент);
	
	Если Не Результат Тогда
		Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") Тогда
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент,
				"Организация,Сотрудник,ДатаНачала");
			ДанныеДляЗаполнения.Организация = ДанныеДокумента.Организация;
			ДанныеДляЗаполнения.ДатаСведений = ДанныеДокумента.ДатаНачала;
			ДанныеДляЗаполнения.Сотрудник = ДанныеДокумента.Сотрудник;
			ДанныеДляЗаполнения.ДоговорГПХ = Истина;
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступноОбъединениеДублейПерсональныхДанных() Экспорт
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.ОбъединениеДублейПерсональныхДанных);

КонецФункции

// Устанавливает или удаляет роль сотрудника Договорник.
//
// Параметры:
//		СотрудникСсылка
//		Установить - Булево, истина установить роль, ложь - удалить.
//
Процедура УстановитьРольДоговорникСотруднику(СотрудникСсылка, Установить = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО Сотрудники.Ссылка = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
	|ГДЕ
	|	Сотрудники.Ссылка = &СотрудникСсылка
	|	И ВЫБОР
	|			КОГДА &Установить
	|				ТОГДА РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|			ИНАЧЕ НЕ РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	Запрос.УстановитьПараметр("Установить", Установить);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Набор = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Сотрудник.Установить(СотрудникСсылка);
		Набор.Отбор.РольСотрудника.Установить(Перечисления.РолиСотрудников.Договорник);
		
		Если Установить Тогда
			Запись = Набор.Добавить();
			Запись.Сотрудник = СотрудникСсылка;
			Запись.РольСотрудника = Перечисления.РолиСотрудников.Договорник;
		КонецЕсли; 
		
		Набор.Записать();
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеРабочихМестСотрудниковОрганизации

Функция ПоляВТРабочиеМестаСотрудников() Экспорт
	
	ПоляВТРабочиеМеста = КадровыйУчетБазовый.ПоляВТРабочиеМестаСотрудников();
	ПоляВТРабочиеМеста.Вставить("КоличествоСтавок");
	ПоляВТРабочиеМеста.Вставить("ДолжностьПоШтатномуРасписанию");
	ПоляВТРабочиеМеста.Вставить("ВидДоговора");
	
	Возврат ПоляВТРабочиеМеста;
	
КонецФункции

#КонецОбласти


#Область КадровыеДанныеФизическихЛиц

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		Если ФормироватьТаблицуРазличных Тогда
			
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "ВТОтборовРазличныхФизическихЛиц";
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
			Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник") Тогда
				ОписательВТОтборов.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначения.СкопироватьРекурсивно(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц
			|ИЗ
			|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
		ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборов.Период КАК Период,
				|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
				|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхФизическихЛиц
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов";
			
			Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
			Иначе
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
		Иначе
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеФизическихЛиц(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ПоляОтбораПериодическихДанных, ИсточникиДанных, "ВТКадровыеДанныеФизическихЛиц", ТаблицаОтборовСодержитПолеСотрудник, Ложь);
			
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
		ПозицияПоместить = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ " + ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		Если ПозицияПоместить > 0 Тогда
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";", , ПозицияПоместить);
		Иначе
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеФизическихЛиц", ИмяВТКадровыеДанныеФизическихЛиц);
	
	ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, ИменаКадровыхДанных, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц);
	ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, ТаблицаОтборовСодержитПолеПериод, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеПостоянныеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		Если ФормироватьТаблицуРазличных Тогда
			
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "ВТОтборовРазличныхФизическихЛиц";
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
			Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник") Тогда
				ОписательВТОтборов.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
			Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляПериод") Тогда
				ОписательВТОтборов.Вставить("ИмяПоляПериод", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			КонецЕсли;
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначения.СкопироватьРекурсивно(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеФизическихЛиц
			|ИЗ
			|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеПериод Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период КАК Период,", "");
		ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
		КонецЕсли;
		
		Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
		ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборов.Период КАК Период,
				|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
				|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхФизическихЛиц
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов";
			
			Если Не ТаблицаОтборовСодержитПолеПериод Тогда
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период КАК Период,", "");
			Иначе
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
			КонецЕсли;
			
			Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
			Иначе
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхПостоянныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
		Иначе
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "";
		
		Запрос = КадровыйУчетБазовый.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ИсточникиДанных, "ВТПостоянныеКадровыеДанныеФизическихЛиц", ТаблицаОтборовСодержитПолеСотрудник, ТаблицаОтборовСодержитПолеПериод, Ложь);
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
		ПозицияПоместить = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ " + ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		Если ПозицияПоместить > 0 Тогда
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";", , ПозицияПоместить);
		Иначе
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеФизическихЛиц", ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	
	ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ИменаКадровыхДанных, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСпециальностиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальностиФизическихЛиц = "ВТСпециальностиФизическихЛиц") Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		Возврат ОбразованияФизическихЛиц.ЗапросВТСпециальностиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальностиФизическихЛиц);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	NULL КАК Период,
		|	NULL КАК ПериодЗаписи,
		|	NULL КАК ФизическоеЛицо,
		|	NULL КАК Специальность,
		|	NULL КАК РазрядКатегория,
		|	NULL КАК ДействуетПо
		|ПОМЕСТИТЬ ВТСпециальностиФизическихЛиц
		|ГДЕ
		|	ЛОЖЬ";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
		Запрос.Текст, "ВТСпециальностиФизическихЛиц", ИмяВТСпециальностиФизическихЛиц);
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСтажиФизическихЛиц = "ВТСтажиФизическихЛиц", ИмяПоляВидСтажа = "") Экспорт
	ИзмеренияФильтра = Новый Массив;
	ИзмеренияФильтра.Добавить("ФизическоеЛицо");
	Если Не ПустаяСтрока(ИмяПоляВидСтажа) Тогда
		ИзмеренияФильтра.Добавить("ВидСтажа");
	КонецЕсли;	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(
							ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц,
							ИзмеренияФильтра);
							
							
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);						
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);						
	Если Не ПустаяСтрока(ИмяПоляВидСтажа) Тогда
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ВидСтажа", ИмяПоляВидСтажа);
	КонецЕсли;	
		
	Запрос = ЗапросВТПериодыСтажейФизическихЛиц(ОписаниеФильтра, ТолькоРазрешенные);
	
	ОписательВТ = ОписательВТИсходныеДанныеДляРасчетаСтажа();
	ОписательВТ.ИмяВТИсходныеДанные = "ВТПериодыСтажейФизическихЛиц";
	ОписательВТ.ИмяПоляДатаРасчетаСтажа = "Период";
	ОписательВТ.ИмяПоляДатаОтсчета = "ДатаНачала";
	ОписательВТ.ИмяПоляДатаОкончания = "ДатаОкончания";
	
	ЗапросВТ = ЗапросВТРасчетСтажа(ОписательВТ, ИмяВТСтажиФизическихЛиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТ);
	
	Если Не ПустаяСтрока(ИмяВТСтажиФизическихЛиц) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПериодыСтажейФизическихЛиц";
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции
	
Функция СтажиФизическихЛицПоМесяцам(ОписаниеФильтра, ТолькоРазрешенные, МенеджерВременныхТаблиц = Неопределено) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда		
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ПроверитьСтажиФизическихЛиц(МенеджерВременныхТаблиц, ОписаниеФильтра);
	КонецЕсли;
		
	Запрос = ЗапросВТПериодыСтажейФизическихЛиц(ОписаниеФильтра, ТолькоРазрешенные, Истина, Ложь);
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;	
	
	ПериодыСтажейФизическихЛиц = Запрос.Выполнить().Выгрузить();	
	
	Возврат РассчитатьСтажФизическихЛиц(ПериодыСтажейФизическихЛиц);
КонецФункции

Функция РассчитатьСтажФизическихЛиц(ПериодыСтажейФизическихЛиц)
	ОписательВТ = ОписательВТИсходныеДанныеДляРасчетаСтажа();
	ОписательВТ.ИмяВТИсходныеДанные = "ПериодыСтажейФизическихЛиц";
	ОписательВТ.ИмяПоляДатаРасчетаСтажа = "Период";
	ОписательВТ.ИмяПоляДатаОтсчета = "ДатаНачала";
	ОписательВТ.ИмяПоляДатаОкончания = "ДатаОкончания";
	
	ЗапросВТРасчетСтажа = ЗапросВТРасчетСтажа(ОписательВТ);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ЗапросВТРасчетСтажа.Текст);
	
	Результат = Неопределено;
	РезультатыРасчетаПредыдущихИтераций = Новый Соответствие;
	РезультатыРасчетаПредыдущихИтераций.Вставить("ПериодыСтажейФизическихЛиц", ПериодыСтажейФизическихЛиц);
	Для Каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Результат = ВыполнитьРасчетСтажаРекурсивно(ЗапросПакета, РезультатыРасчетаПредыдущихИтераций);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция ВыполнитьРасчетСтажаРекурсивно(ЗапросПакета, РезультатыРасчетаПредыдущихИтераций)
	ТекстИсключения = НСтр("ru = 'Некорректный запрос расчета стажа физических лиц';
							|en = 'Incorrect request of individual length of service calculation'");
	Если ЗапросПакета.Операторы.Количество() <> 1 Тогда  
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	Оператор = ЗапросПакета.Операторы[0]; 
	
	Если Оператор.Источники.Количество() <> 1
		Или Оператор.Группировка.Количество() > 0
		Или Оператор.ВыбиратьРазличные Тогда
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	ИсточникДанных = ЗапросПакета.Операторы[0].Источники[0];
	Если ТипЗнч(ИсточникДанных.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
		ТаблицаИсточникДанныхТекущегоЗапроса = ВыполнитьРасчетСтажаРекурсивно(ИсточникДанных.Источник.Запрос, РезультатыРасчетаПредыдущихИтераций);
	ИначеЕсли РезультатыРасчетаПредыдущихИтераций[ИсточникДанных.Источник.ИмяТаблицы] <> Неопределено Тогда
		ТаблицаИсточникДанныхТекущегоЗапроса = РезультатыРасчетаПредыдущихИтераций[ИсточникДанных.Источник.ИмяТаблицы];
	Иначе
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПсевдонимТаблицыИсточника = ИсточникДанных.Источник.Псевдоним;
	
	МакетКомпоновки = КоллекцииБЗК.МакетКомпоновкиДанных();
	
	Индекс = 0;
	ИндексПоследний = 100000;
	ДобавленПараметрПустаяДата = Ложь;
	Для Каждого Поле Из ЗапросПакета.Колонки Цикл
		Если Индекс = ИндексПоследний Тогда Прервать; КонецЕсли;
		Псевдоним = Поле.Псевдоним;
		Выражение = Строка(Поле.Поля[0]);
		НачалоПоиска = 1;
		ПродолжатьПоиск = Истина;
		Пока ПродолжатьПоиск Цикл
			СимволНачала = СтрНайти(Выражение, "КАК ЧИСЛО(",,НачалоПоиска);
			Если СимволНачала <> 0 Тогда
				СимволОкончания = СтрНайти(Выражение, ")",, СимволНачала);
				Выражение = Сред(Выражение, 1, СимволНачала - 1) + ",""" + Сред(Выражение, СимволНачала + 4, СимволОкончания - СимволНачала - 3) + """" + Сред(Выражение, СимволОкончания + 1);
				НачалоПоиска = СимволНачала;
			Иначе
				ПродолжатьПоиск = Ложь;
			КонецЕсли;	
		КонецЦикла;	
		
		//Если СтрНайти(Выражение, "ДАТАВРЕМЯ(1, 1, 1)") <> 0 Тогда
		//	Выражение = СтрЗаменить(Выражение, "ДАТАВРЕМЯ(1, 1, 1)", "&ПустаяДата");
		//	Если Не ДобавленПараметрПустаяДата Тогда
		//		ЗначениеПараметра = МакетКомпоновки.ЗначенияПараметров.Добавить();
		//		ЗначениеПараметра.Значение = '00010101';
		//		ЗначениеПараметра.Имя = "ПустаяДата";
		//		ДобавленПараметрПустаяДата = Истина
		//	КонецЕсли;	
		//КонецЕсли;	
			
		Выражение = СтрЗаменить(Выражение, "КАК ЧИСЛО(", ", ЧИСЛО(");
		Выражение = СтрЗаменить(Выражение, ", ДЕНЬ", ",""ДЕНЬ""");
		Выражение = СтрЗаменить(Выражение, ", МЕСЯЦ", ",""МЕСЯЦ""");

		КоллекцииБЗК.ДобавитьВыбираемоеПолеВМакетКомпоновки(МакетКомпоновки, Выражение, Псевдоним);
		Индекс  = Индекс + 1;
	КонецЦикла;
	
	КоллекцииБЗК.ДобавитьНаборДанныхСКДПоТаблицеЗначений(МакетКомпоновки.НаборыДанных, ТаблицаИсточникДанныхТекущегоЗапроса, ПсевдонимТаблицыИсточника, ПсевдонимТаблицыИсточника);
	Таблицы = Новый Структура(ПсевдонимТаблицыИсточника, ТаблицаИсточникДанныхТекущегоЗапроса);
	
	Результат = КоллекцииБЗК.ПолучитьДанныеПоМакетуКомпоновки(МакетКомпоновки, Таблицы);
	Если ЗначениеЗаполнено(ЗапросПакета.ТаблицаДляПомещения) Тогда
		РезультатыРасчетаПредыдущихИтераций.Вставить(ЗапросПакета.ТаблицаДляПомещения, Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

Функция ЗапросВТПериодыСтажейФизическихЛиц(ОписаниеФильтра, ТолькоРазрешенные, УчитыватьИзмененияВТеченииМесяца = Ложь, ФормироватьВТ = Истина)
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("НакопленныеСтажиФизическихЛиц"); 
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ШаблонФильтрПериод КАК Период,
	|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
	|	ВЫБОР
	|		КОГДА НакопленныеСтажиФизическихЛиц.ДатаНачала < ДАТАВРЕМЯ(1900, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1900, 1, 1)
	|		ИНАЧЕ НакопленныеСтажиФизическихЛиц.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	НакопленныеСтажиФизическихЛиц.ДатаОкончания КАК ДатаОкончания,
	|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
	|	НакопленныеСтажиФизическихЛиц.РазмерДней КАК РазмерДней,
	|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван
	|ПОМЕСТИТЬ ВТПериодыСтажейФизическихЛиц
	|ИЗ
	|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
	|		ПО (&ШаблонУсловияСвязиПоИзмерения)
	|			И (&ШаблонУсловияСвязиПоПериоду)";
	
	Если УчитыватьИзмененияВТеченииМесяца Тогда
		ШаблонУсловиеПоПериоду = 
		"&ФильтрПериод_ МЕЖДУ НакопленныеСтажиФизическихЛиц.ДатаНачала И КОНЕЦПЕРИОДА(НакопленныеСтажиФизическихЛиц.ДатаОкончания, ДЕНЬ)
		|	ИЛИ НакопленныеСтажиФизическихЛиц.ДатаНачала МЕЖДУ &ФильтрПериод_ И КОНЕЦПЕРИОДА(&ФильтрПериодПриведенный_, ДЕНЬ)"; 
		
		ШаблонПоляПериод = 
		"ВЫБОР
		|	КОГДА &ФильтрПериод_ МЕЖДУ НакопленныеСтажиФизическихЛиц.ДатаНачала И КОНЕЦПЕРИОДА(НакопленныеСтажиФизическихЛиц.ДатаОкончания, ДЕНЬ) ТОГДА
		|		&ФильтрПериод_
		|	ИНАЧЕ НакопленныеСтажиФизическихЛиц.ДатаНачала
		|КОНЕЦ"
	Иначе
		ШаблонУсловиеПоПериоду = 
		"&ФильтрПериод_ МЕЖДУ НакопленныеСтажиФизическихЛиц.ДатаНачала И КОНЕЦПЕРИОДА(НакопленныеСтажиФизическихЛиц.ДатаОкончания, ДЕНЬ)";
		
		ШаблонПоляПериод = "&ФильтрПериод_";
	КонецЕсли;	
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	Если Не ФормироватьВТ Тогда
		ОписаниеЗапроса.ТаблицаДляПомещения = Неопределено;
	КонецЕсли;	
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ТаблицаОтборовФизическихЛиц", "НакопленныеСтажиФизическихЛиц");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"Период",
		ОператорЗапроса,
		"НакопленныеСтажиФизическихЛиц");
		
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = ШаблонУсловиеПоПериоду;	
		
	ФильтрПериод = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "Период");
	ФильтрПериодПриведенный = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодПриведенный");
	ФильтрПериодПриведенный.Кратность = "МЕСЯЦ";
	ФильтрПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";

	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериод_", ФильтрПериод);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	
	ВыраженияПоляФильтраПериод = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрПериод);
	ВыраженияПоляПериод = СтрЗаменить(ШаблонПоляПериод, "&ФильтрПериод_", ВыраженияПоляФильтраПериод);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыраженияПоляПериод, "Период", Ложь);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Возврат ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
КонецФункции	

Функция ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных = Неопределено, ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа = "ВТСведенияОПараметрахИсчисленияСеверногоСтажа")
	
	Запрос = Новый Запрос;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц) Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ФизическиеЛицаПериоды.Период КАК Период,
			|	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки
			|ПОМЕСТИТЬ ВТПроцентыСевернойНадбавкиФизическихЛиц
			|ИЗ
			|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц КАК ПроцентыСевернойНадбавкиФизическихЛиц
			|		ПО ФизическиеЛицаПериоды.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
			|			И (ФизическиеЛицаПериоды.Период МЕЖДУ ПроцентыСевернойНадбавкиФизическихЛиц.Период И ПроцентыСевернойНадбавкиФизическихЛиц.ДействуетДо)";
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК Период,
			|	ВЫРАЗИТЬ(NULL КАК Справочник.ФизическиеЛица) КАК ФизическоеЛицо,
			|	0 КАК ПроцентСевернойНадбавки
			|ПОМЕСТИТЬ ВТПроцентыСевернойНадбавкиФизическихЛиц
			|ГДЕ
			|	ЛОЖЬ";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		ТекстЗапроса
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		  |	ФизическиеЛицаПериоды.Период КАК Период,
		  |	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		  |	ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,
		  |	ЕСТЬNULL(ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки, 0) КАК ПроцентСевернойНадбавки,
		  |	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПорядокИсчисленияПроцентаСевернойНадбавки КАК ПорядокИсчисленияПроцентаСевернойНадбавки,
		  |	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется КАК ПроцентСевернойНадбавкиИзменяется
		  |ПОМЕСТИТЬ ВТСведенияОПараметрахИсчисленияСеверногоСтажа
		  |ИЗ
		  |	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц КАК ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц
		  |		ПО ФизическиеЛицаПериоды.ФизическоеЛицо = ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентыСевернойНадбавкиФизическихЛиц КАК ПроцентыСевернойНадбавкиФизическихЛиц
		  |		ПО ФизическиеЛицаПериоды.Период = ПроцентыСевернойНадбавкиФизическихЛиц.Период
		  |			И ФизическиеЛицаПериоды.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		  |
		  |ИНДЕКСИРОВАТЬ ПО
		  |	ФизическоеЛицо,
		  |	Период
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |УНИЧТОЖИТЬ ВТПроцентыСевернойНадбавкиФизическихЛиц";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапроса, "ФизическиеЛицаПериоды.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическиеЛицаПериоды.Период", "ФизическиеЛицаПериоды." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник")
		И ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник <> Неопределено 
		И НЕ ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическиеЛицаПериоды.Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,", "");
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТСведенияОПараметрахИсчисленияСеверногоСтажа", ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа);
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	НеобходимыПостоянныеКадровыеДанные = КадровыйУчетБазовый.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(ИмяПоля)
		Или НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(ИмяПоля);
		
	Если Не НеобходимыПостоянныеКадровыеДанные
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		
		НеобходимыПостоянныеКадровыеДанные =
			МодульГосударственнаяСлужба.НеобходимыСведенияОГосударственныхСлужащих(ИмяПоля)
			Или МодульГосударственнаяСлужба.НеобходимыСведенияРеестраГосслужащих(ИмяПоля);
			
	КонецЕсли;
	
	Возврат НеобходимыПостоянныеКадровыеДанные;
	
КонецФункции

Функция ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц(ИмяВременнойТаблицыОтборовФизическихЛиц, ИмяПоляФизическоеЛицо = "ФизическоеЛицо", ИмяПоляПериод = "Период") Экспорт
	
	ОписательВТ = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяВременнойТаблицыОтборовФизическихЛиц, ИмяПоляФизическоеЛицо, ИмяПоляПериод);
	ОписательВТ.Вставить("ИмяПоляВидСтажа", "");
	
	Возврат ОписательВТ;
	
КонецФункции

#КонецОбласти


#Область КадровыеДанныеСотрудников

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников, ТаблицаОтборовСодержитПолеФизическоеЛицо, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ЕстьПодсистемаОбразовательныеУчреждения = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения");
	Если ЕстьПодсистемаОбразовательныеУчреждения Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
	КонецЕсли;
	
	ЕстьПодсистемаОрганизационнаяСтруктура = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	Если ЕстьПодсистемаОрганизационнаяСтруктура Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
	КонецЕсли;
	
	ЕстьПодсистемаГрейды = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	Если ЕстьПодсистемаГрейды Тогда
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
	КонецЕсли;
	
	ЕстьПодсистемаИспытательныйСрок = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	Если ЕстьПодсистемаИспытательныйСрок Тогда
		МодульИспытательныйСрок = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
	КонецЕсли;
	
	ЕстьПодсистемаДистанционнаяРабота = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота");
	Если ЕстьПодсистемаДистанционнаяРабота Тогда
		МодульДистанционнаяРабота = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРабота");
	КонецЕсли;
	
	ЕстьПодсистемаРабочиеМестаОхраныТруда = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда");
	Если ЕстьПодсистемаРабочиеМестаОхраныТруда Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
	КонецЕсли;
	ЕстьПодсистемаТрудоустройствоПоКвотам = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам");
	Если ЕстьПодсистемаТрудоустройствоПоКвотам Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
	КонецЕсли;
	
	ЕстьПодсистемаАнализТекучестиПерсонала =
		ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	Если ЕстьПодсистемаАнализТекучестиПерсонала Тогда
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
	КонецЕсли;
	
	ЕстьПодсистемаРуководителиПодразделений = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений");
	Если ЕстьПодсистемаРуководителиПодразделений Тогда
		МодульРуководителиПодразделений = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
	КонецЕсли;
	
	ЕстьПодсистемаМедицина = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина");
	Если ЕстьПодсистемаМедицина Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	ИсточникиДанных.Вставить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников", Истина);
	
	ТекстыОписанияПолей = Новый Массив;
	Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			Продолжить;
		ИначеЕсли ДобавитьПолеСведенийОТерриторияхСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОГрафикахРаботы(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОРазрядахКатегориях(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПКУ(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСостоянииСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийКонтрактаДоговораСотрудника(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСовокупныхТарифныхСтавках(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаДистанционнаяРабота
				И МодульДистанционнаяРабота.ДобавитьПолеСведенийОДистанционнойРаботеСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаРабочиеМестаОхраныТруда
				И МодульРабочиеМестаОхраныТруда.ДобавитьПолеСведенийОРабочихМестахСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаАнализТекучестиПерсонала
				И МодульАнализТекучестиПерсонала.ДобавитьПолеСведенийОПричинахУвольненияСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаТрудоустройствоПоКвотам
				И МодульТрудоустройствоПоКвотам.ДобавитьПолеСведенийОКвотахСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГрейды
				И МодульГрейды.ДобавитьПолеСведенийОГрейдах(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСвойствДолжностейГосударственнойСлужбы(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОПринадлежностиСотрудниковКВоеннослужащим(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаОрганизационнаяСтруктура
				И МодульОрганизационнаяСтруктура.ДобавитьПолеСведенийОМестеВСтруктуреПредприятия(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаИспытательныйСрок
				И МодульИспытательныйСрок.ДобавитьПолеСведенийОбИспытательномСроке(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных, ОписательВременнойТаблицыОтборов)
			Или ЕстьПодсистемаИспытательныйСрок
				И МодульИспытательныйСрок.ДобавитьПолеДлительностьИспытательногоСрока(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаОбразовательныеУчреждения
				И МодульОбразовательныеУчреждения.ДобавитьПолеСвойствДолжностейПедагогическихРаботников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ОстаткиОтпусков.ДобавитьПолеСведенийОЕжегодныхОтпусках(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСтажеРаботыНаПредприятии(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаРуководителиПодразделений
				И МодульРуководителиПодразделений.ДобавитьПолеСведенийОРуководителяхСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаМедицина
				И МодульМедицина.ДобавитьПолеСвойствДолжностейМедицинскихРаботников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПриостановленииТрудовыхДоговоров(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУчетеЗатрат(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			ИсточникиДанных.Вставить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников", Ложь);
			Продолжить;
			
		Иначе
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", ИмяКадровыхДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеСотрудников");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		Если ФормироватьТаблицуРазличных Тогда
			
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = "ВТОтборовРазличныхСотрудников";
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначения.СкопироватьРекурсивно(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
			|ИЗ
			|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборов";
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборов.Период КАК Период,
				|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
				|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ВЫРАЗИТЬ(ТаблицаОтборов.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных
				|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
				|ИЗ
				|	ВТОтборовСотрудников КАК ТаблицаОтборов";
			
			Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо Тогда
				
				ТекстЗапросаПолученияРазличныхЗаписей = ТекстЗапросаПолученияРазличныхЗаписей + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
					|		ПО ТаблицаОтборов.Сотрудник = Сотрудники.Ссылка";
				
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
					"ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо", "Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо");
				
			КонецЕсли;
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
		Иначе
			
			Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо Тогда
				
				Запрос.Текст = Запрос.Текст + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
					|		ПО ТаблицаОтборов.Сотрудник = Сотрудники.Ссылка";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ТаблицаОтборов.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
				
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеСотрудников(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, "ВТКадровыеДанныеСотрудников", ТаблицаОтборовСодержитПолеФизическоеЛицо, Ложь);
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		
		ПозицияПоместить = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ " + ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		Если ПозицияПоместить > 0 Тогда
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";", , ПозицияПоместить);
		Иначе
			ПозицияТочкиЗапятой = 0;
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяВТКадровыеДанныеСотрудников);
	
	ДобавитьТекстЗапросаВТСведенийОТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОГрафикахРаботы(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОРазрядахКатегориях(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОПКУ(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОСостоянииСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияКонтрактаДоговораСотрудника(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТОсновныеДанныеКонтрактовДоговоровСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОСовокупныхТарифныхСтавках(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ОстаткиОтпусков.ДобавитьТекстЗапросаВТСведенияОЕжегодныхОтпусках(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОСтажеРаботыНаПредприятии(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПриостановленииТрудовыхДоговоров(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбУчетеЗатрат(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	
	Если ЕстьПодсистемаДистанционнаяРабота Тогда
		МодульДистанционнаяРабота.ДобавитьТекстЗапросаВТСведенияОДистанционнойРаботеСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаРабочиеМестаОхраныТруда Тогда
		МодульРабочиеМестаОхраныТруда.ДобавитьТекстЗапросаВТСведенийОРабочихМестахСотрудников(Запрос, ТолькоРазрешенные,
			ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	КонецЕсли;
	Если ЕстьПодсистемаТрудоустройствоПоКвотам Тогда
		МодульТрудоустройствоПоКвотам.ДобавитьТекстЗапросаВТСведенийОКвотахСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	КонецЕсли; 
	
	Если ЕстьПодсистемаАнализТекучестиПерсонала Тогда
		МодульАнализТекучестиПерсонала.ДобавитьТекстЗапросаВТСведенийОПричинахУвольненияСотрудников(
			Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаГрейды Тогда
		МодульГрейды.ДобавитьТекстЗапросаВТСведенияОГрейдах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаИспытательныйСрок Тогда
		МодульИспытательныйСрок.ДобавитьТекстЗапросаВТСведенияОбИспытательномСроке(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		МодульИспытательныйСрок.ДобавитьТекстЗапросаВТДанныеИспытательногоСрокаСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстыЗапросовВТСвойстваДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОПринадлежностиСотрудниковКВоеннослужащим(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);		
	КонецЕсли;
	
	Если ЕстьПодсистемаОбразовательныеУчреждения Тогда
		МодульОбразовательныеУчреждения.ДобавитьТекстыЗапросовВТСвойстваДолжностейОбразовательныеУчреждения(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаОрганизационнаяСтруктура Тогда
		МодульОрганизационнаяСтруктура.ДобавитьТекстЗапросаСведенияОМестеВСтруктуреПредприятия(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаРуководителиПодразделений Тогда
		МодульРуководителиПодразделений.ДобавитьТекстЗапросаВТСведенияОРуководителяхСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаМедицина Тогда
		МодульМедицина.ДобавитьТекстыЗапросовВТСвойстваДолжностейМедицинскихРаботников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияОТерриторияхСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОТерриторияхСотрудников = "ВТСведенияОТерриторияхСотрудников")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ТерриторииСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ТерриторииСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОТерриторияхСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОГрафикахРаботы(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОГрафикахРаботы = "ВТСведенияОГрафикахРаботы")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ГрафикРаботыСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ГрафикРаботыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОГрафикахРаботы);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОРазрядахКатегориях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОРазрядахКатегориях = "ВТСведенияОРазрядахКатегориях")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("РазрядыКатегорииСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"РазрядыКатегорииСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОРазрядахКатегориях);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОПКУ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОРазрядахКатегориях = "ВТСведенияОПКУ")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПКУСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПКУСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОРазрядахКатегориях);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОСостоянииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянииСотрудников = "ВТСведенияОСостоянииСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СостоянияСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = СостоянияСотрудников.ОписаниеФильтраСоздатьВТСостоянияСотрудниковНаДаты(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	Запрос = СостоянияСотрудников.ЗапросВТСостоянияСотрудниковНаДаты(ТолькоРазрешенные, ОписаниеФильтра, ИмяВТСведенияОСостоянииСотрудников);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияКонтрактаДоговораСотрудника(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияКонтрактаДоговораСотрудника = "ВТСведенияКонтрактаДоговораСотрудника")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СведенияКонтрактаДоговораСотрудника", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СведенияКонтрактаДоговораСотрудника", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияКонтрактаДоговораСотрудника);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТОсновныеДанныеКонтрактовДоговоровСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников = "ВТОсновныеДанныеКонтрактовДоговоровСотрудников")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ОсновныеДанныеКонтрактаДоговораСотрудника", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ОсновныеДанныеКонтрактаДоговораСотрудника", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОСовокупныхТарифныхСтавках(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОСовокупныхТарифныхСтавках = "ВТСведенияОСовокупныхТарифныхСтавках")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ЗначенияСовокупныхТарифныхСтавокСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПлановыйФОТИтоги", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСовокупныхТарифныхСтавках);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени = "ВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля) Экспорт
	
	Возврат НеобходимыСведенияОТекущихТерриториях(ИмяПоля)
		Или КадровыйУчетБазовый.НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля);
	
КонецФункции

Функция ТекущиеКадровыеДанныеСотрудников() Экспорт
	
	Возврат КадровыйУчетБазовый.ТекущиеКадровыеДанныеСотрудников()
		+ ",
		|ТекущаяДолжностьПоШтатномуРасписанию,
		|ТекущийВидДоговора";
	
КонецФункции

// Формирует временную таблицу ВТСтажиСотрудников и помещает ее в менеджер временных таблиц.
// Список сотрудников, видов стажей и дат, по которым необходимо получить данные, берутся из
// временной таблицы ВТИсходныеДанные в менеджере временных таблиц, переданном в качестве параметра.
// Временная таблица обязательно должна содержать колонки Сотрудник,ВидСтажа и Дата.
//
// Параметры:
//		МенеджерВременныхТаблиц
//
// Формируемая временная таблица имеет колонки Сотрудник, ВидСтажа, Дата, ДатаОтсчета(на которую введен стаж),
// РазмерМесяцев, РазмерМесяцевНаДатуОтсчета.
//
Процедура СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные = Истина, ИмяВТИсходныеДанные = "ВТИсходныеДанные", ИмяВТСтажиСотрудников = "ВТСтажиСотрудников") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсходныеДанные.Дата КАК Период,
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанные.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТСотрудникиСФизическимиЛицамиДляВТСтажи
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИсходныеДанные.Сотрудник = Сотрудники.Ссылка";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИсходныеДанные", ИмяВТИсходныеДанные);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
	ОписательВТ = ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц("ВТСотрудникиСФизическимиЛицамиДляВТСтажи");
	ОписательВТ.ИмяПоляВидСтажа = "ВидСтажа";
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписательВТ, "ВТСтажиФизическихЛиц");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Сотрудник КАК Сотрудник,
		|	СотрудникиСФизическимиЛицами.Период КАК Дата,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.ВсегоМесяцев + ВЫБОР
		|		КОГДА СтажиФизическихЛиц.Дней = 0
		|			ТОГДА -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерМесяцев,
		|	СтажиФизическихЛиц.Прерван КАК Прерван,
		|	СтажиФизическихЛиц.НачалоБудущегоМесяца КАК НачалоБудущегоМесяца
		|ПОМЕСТИТЬ ВТСтажиСотрудников
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицамиДляВТСтажи КАК СотрудникиСФизическимиЛицами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиСФизическимиЛицами.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СотрудникиСФизическимиЛицами.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиСФизическимиЛицами.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтажиФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиСФизическимиЛицамиДляВТСтажи";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтажиСотрудников", ИмяВТСтажиСотрудников);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура создает временную таблицу с датами изменения стажей сотрудников в месяцах
// за указанные интервалы.
// В итоговую таблицу попадают только сотрудники, для которых определены данные стажа.
// 
// Параметры:
//		МенеджерВременныхТаблиц		- менеджер ВТ, в котором должна быть таблица с полями.
//			* Сотрудник, 
//			* Период,
//			* ДатаОкончания
//		ИмяВТСотрудникиПериоды		- Строка
//		ИмяВТПериодыИзмененияСтажа	- Строка
//
// В менеджере временных таблиц создается таблица ВТПериодыИзмененияСтажа.
// 		* Сотрудник,
// 		* ВидСтажа,
// 		* ДатаСтажа - дата изменения значения стажа в заданном интервале,
// 		* ЗначениеСтажа - значение стажа в месяцах на дату.
//
Процедура СоздатьВТПериодыИзмененияСтажа(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяВТПериодыИзмененияСтажа = "ВТПериодыИзмененияСтажа", ИмяПоляСотрудник = "Сотрудник",  ИмяПоляВидСтажа = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(СотрудникиПериоды.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиПериоды.ВидСтажа КАК ВидСтажа,
		|	СотрудникиПериоды.Период КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА СотрудникиПериоды.Период > ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СотрудникиПериоды.Период, МЕСЯЦ), МЕСЯЦ, Единицы.Цифра + ЕСТЬNULL(Десятки.Цифра, 0) * 10 + ЕСТЬNULL(Сотни.Цифра, 0) * 100)
		|			ТОГДА СотрудникиПериоды.Период
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СотрудникиПериоды.Период, МЕСЯЦ), МЕСЯЦ, Единицы.Цифра + ЕСТЬNULL(Десятки.Цифра, 0) * 10 + ЕСТЬNULL(Сотни.Цифра, 0) * 100)
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТМесяцыСтажейСотрудников
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Единицы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Десятки
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Сотни
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СотрудникиПериоды.Период, МЕСЯЦ), МЕСЯЦ, Единицы.Цифра + ЕСТЬNULL(Десятки.Цифра, 0) * 10 + ЕСТЬNULL(Сотни.Цифра, 0) * 100) <= СотрудникиПериоды.ДатаОкончания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Если ВРег(ИмяПоляСотрудник) <> ВРег("Сотрудник") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Сотрудник", "." + ИмяПоляСотрудник);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПоляВидСтажа) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ВидСтажа КАК ВидСтажа,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ВидСтажа", "СотрудникиПериоды." + ИмяПоляВидСтажа);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ОписательОтборов = ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц("ВТМесяцыСтажейСотрудников");
	ОписательОтборов.ИмяПоляВидСтажа = ИмяПоляВидСтажа;
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ОписательОтборов, "ВТСтажиФизическихЛиц");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Период КАК ДатаСтажа,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.ВсегоМесяцев + ВЫБОР
		|		КОГДА СтажиФизическихЛиц.Дней = 0
		|			ТОГДА -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЗначениеСтажа
		|ПОМЕСТИТЬ ВТПериодыИзмененияСтажаПредварительно
		|ИЗ
		|	ВТМесяцыСтажейСотрудников КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиПериоды.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|			И СотрудникиПериоды.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	СтажиФизическихЛиц.Период МЕЖДУ СотрудникиПериоды.ДатаНачала И СотрудникиПериоды.ДатаОкончания
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажиФизическихЛиц.НачалоБудущегоМесяца,
		|	СотрудникиПериоды.Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ВсегоМесяцев + ВЫБОР
		|		КОГДА СтажиФизическихЛиц.Дней = 0
		|			ТОГДА 0
		|		КОГДА СтажиФизическихЛиц.НачалоБудущегоМесяца = СтажиФизическихЛиц.Период
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|ИЗ
		|	ВТМесяцыСтажейСотрудников КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиПериоды.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|			И СотрудникиПериоды.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	СтажиФизическихЛиц.НачалоБудущегоМесяца МЕЖДУ СотрудникиПериоды.ДатаНачала И СотрудникиПериоды.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ПериодыИзмененияСтажа.ДатаСтажа) КАК ДатаСтажа,
		|	ПериодыИзмененияСтажа.Сотрудник КАК Сотрудник,
		|	ПериодыИзмененияСтажа.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияСтажа.ЗначениеСтажа КАК ЗначениеСтажа
		|ПОМЕСТИТЬ ВТПериодыИзмененияСтажа
		|ИЗ
		|	ВТПериодыИзмененияСтажаПредварительно КАК ПериодыИзмененияСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзмененияСтажа.Сотрудник,
		|	ПериодыИзмененияСтажа.ВидСтажа,
		|	ПериодыИзмененияСтажа.ЗначениеСтажа";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПериодыИзмененияСтажа", ИмяВТПериодыИзмененияСтажа);
	
	Если Не ЗначениеЗаполнено(ИмяПоляВидСтажа) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТЦифры");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТМесяцыСтажейСотрудников");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТСтажиФизическихЛиц");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТПериодыИзмененияСтажаПредварительно");
	
КонецПроцедуры

// Процедура создает временную таблицу процентов северной надбавки физических лиц
// на указанные даты.
// 
// Параметры:
//	МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть таблица ВТФизическиеЛицаПериоды с полями 
//		- ФизическоеЛицо, 
//		- Период
//	ИмяТаблицыФизическиеЛицаПериоды - можно передать имя временной таблицы в которой хранятся физические лица и периоды.
//
// В менеджере временных таблиц создается таблица ВТПроцентСевернойНадбавкиФизическихЛиц
// 	- ФизическоеЛицо,
// 	- ПроцентСевернойНадбавки - процент северной надбавки определенный для физического лица.
//
Процедура СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(МенеджерВременныхТаблиц, ИмяТаблицыФизическиеЛицаПериоды = "ВТФизическиеЛицаПериоды") Экспорт
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяТаблицыФизическиеЛицаПериоды);
	Запрос = ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(Истина, ОписательВременнойТаблицыОтборов, , "ВТПроцентСевернойНадбавкиФизическихЛиц");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОписательВременныхТаблицДляСоздатьВТПроцентСевернойНадбавкиСотрудников(МенеджерВременныхТаблиц, ИмяВТОтбораСотрудников = "ВТСотрудникиПериоды", ИмяВТПроцентСевернойНадбавкиСотрудников = "ВТПроцентСевернойНадбавкиСотрудников") Экспорт
	
	ОписательТаблиц = Новый Структура;
	ОписательТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательТаблиц.Вставить("ИмяВТОтбораСотрудников", ИмяВТОтбораСотрудников);
	ОписательТаблиц.Вставить("ИмяВТПроцентСевернойНадбавкиСотрудников", ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	Возврат ОписательТаблиц;
	
КонецФункции

// Процедура создает временную таблицу с процентом северной надбавки сотрудников 
// на указанную дату.
// 
// Параметры:
//	МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть таблица ВТСотрудникиПериоды с полями.
//		- Сотрудник, 
//		- Период,
//	ИмяТаблицыСотрудникиПериоды - можно передать имя временной таблицы в которой хранятся сотрудники и периоды.
//
// В менеджере временных таблиц создается таблица ВТПериодыИзмененияСтажа.
// 	- Сотрудник,
// 	- Период - период получения процента северной надбавки,
// 	- ПроцентСевернойНадбавки - значение стажа в месяцах на дату.
//
Процедура СоздатьВТПроцентСевернойНадбавкиСотрудников(ОписательВременныхТаблиц) Экспорт
	
	ИмяТаблицыФизическиеЛицаПериоды = "ВТФизическиеЛицаПериоды" +  ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита(); 
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Период КАК Период,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТОтбораСотрудников КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = СотрудникиПериоды.Сотрудник)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ФизическоеЛицо";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТФизическиеЛицаПериоды", ИмяТаблицыФизическиеЛицаПериоды);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтбораСотрудников"	, ОписательВременныхТаблиц.ИмяВТОтбораСотрудников);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

	СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(ОписательВременныхТаблиц.МенеджерВременныхТаблиц, ИмяТаблицыФизическиеЛицаПериоды);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,
		|	ФизическиеЛицаПериоды.Период КАК Период,
		|	ПроцентСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудников
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиФизическихЛиц КАК ПроцентСевернойНадбавкиФизическихЛиц
		|		ПО ФизическиеЛицаПериоды.Период = ПроцентСевернойНадбавкиФизическихЛиц.Период
		|			И ФизическиеЛицаПериоды.ФизическоеЛицо = ПроцентСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТФизическиеЛицаПериоды";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПроцентСевернойНадбавкиСотрудников", ОписательВременныхТаблиц.ИмяВТПроцентСевернойНадбавкиСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТФизическиеЛицаПериоды", ИмяТаблицыФизическиеЛицаПериоды);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТТекущаяКадроваяРасстановка(ТолькоРазрешенные, Организация, Дата, ИмяВТТекущаяКадроваяРасстановка = "ВТТекущаяКадроваяРасстановка") Экспорт
	
	Запрос = Новый Запрос;
	ИмяПараметраОрганизация = "";
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&Дата КАК Период,
		|	Организации.Ссылка.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОтборПоГоловнойОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстУсловия =
			"ГДЕ
			|	Организации.Ссылка = &Организация";
		
		Если ТипЗнч(Организация) = Тип("Строка") Тогда
			ТекстУсловия = СтрЗаменить(ТекстУсловия, "&Организация", Организация);
		Иначе
			ИмяПараметраОрганизация = "ПараметрОрганизацияВТТекущаяКадроваяРасстановка";
			Запрос.УстановитьПараметр("&Организация", "&" + ИмяПараметраОрганизация);
			Запрос.УстановитьПараметр(ИмяПараметраОрганизация, Организация);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстУсловия;
		
	КонецЕсли;
	
	Если ТипЗнч(Дата) = Тип("Строка") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата", Дата);
	Иначе
		Запрос.УстановитьПараметр("Дата", Дата);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборПоГоловнойОрганизации", "ГоловнаяОрганизация");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Организация", " В ", Организация);
	КонецЕсли; 
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КадроваяИсторияСотрудников",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина);
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ШтатноеРасписание.РазрядКатегория КАК РазрядКатегория,
		|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ШтатноеРасписание.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ШтатноеРасписание.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СУММА(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТТекущаяКадроваяРасстановка
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И &ОтборПоОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию,
		|	ШтатноеРасписание.РазрядКатегория,
		|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете,
		|	ШтатноеРасписание.ОтношениеКЕНВД,
		|	ШтатноеРасписание.СтатьяФинансирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтборПоГоловнойОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадроваяИсторияСотрудниковСрезПоследних";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТТекущаяКадроваяРасстановка, ТолькоРазрешенные);
	
	ТекстУсловияОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстУсловияОтбора = "	И (КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация)";
		Если ТипЗнч(Организация) = Тип("Строка") Тогда
			ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "&Организация", Организация);
		Иначе
			ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "&Организация", "&" + ИмяПараметраОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "И &ОтборПоОрганизация", ТекстУсловияОтбора);
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "ВТТекущаяКадроваяРасстановка", ИмяВТТекущаяКадроваяРасстановка);
	
	Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
		ТекстЗапроса,
		ЗапросВТИмяРегистраСрез.Текст,
		ТекстЗапросаВТТекущаяКадроваяРасстановка);
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТТекущаяКадроваяРасстановка(МенеджерВременныхТаблиц, Организация = Неопределено, Дата = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Если ЗначениеЗаполнено(Организация) Тогда
		ТаблицаФильтр.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаФильтр.Добавить();
	СтрокаТаблицы.Период = Дата;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтр));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.Период,
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
	
	Запрос.УстановитьПараметр("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании",
		ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА &ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании
		|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
		|			ТОГДА ШтатноеРасписание.РазрядКатегория
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|	КОНЕЦ КАК РазрядКатегория,
		|	СУММА(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок,
		|	МАКСИМУМ(ГрафикиРаботыСотрудников.ГрафикРаботы) КАК ГрафикРаботыСотрудников
		|ПОМЕСТИТЬ ВТТекущаяКадроваяРасстановка
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикиРаботыСотрудников
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
		|	ВЫБОР
		|		КОГДА &ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании
		|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
		|			ТОГДА ШтатноеРасписание.РазрядКатегория
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|	КОНЕЦ";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация", "");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должность,
		|	Подразделение";	
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
			|	СотрудникиПериоды.Период КАК Период,
			|	ВЫРАЗИТЬ(NULL КАК Справочник.ПоказателиРасчетаЗарплаты) КАК ПоказательТарифнойСтавки,
			|	0 КАК ТарифнаяСтавка,
			|	0 КАК РазмерТарифнойСтавки,
			|	0 КАК Оклад,
			|	0 КАК Надбавка,
			|	0 КАК ФОТ,
			|	ВЫРАЗИТЬ(NULL КАК БУЛЕВО) КАК ОсновноеНачисление,
			|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК ПериодЗаписиНачислений,
			|	NULL КАК Регистратор
			|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиПериоды", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
		
	Иначе
		
		ВТКУничтожению = Новый Массив;
		ВТКУничтожению.Добавить("ВТПлановыйФОТИтогиСрезПоследних ");
				
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ПлановыйФОТИтоги", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.Отборы = ПоляОтбора;
		ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
				
		ЗапросВТПлановыйФОТИтогиСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыйФОТИтоги", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыйФОТИтогиСрезПоследних);
		
		ТекстЗапросаВТТарифнаяСтавкаСотрудников =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Период КАК Период,
		|	ПлановыйФОТИтоги.ПериодЗаписи КАК ПериодЗаписиНачислений,
		|	ПлановыйФОТИтоги.РегистраторСобытия КАК Регистратор,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ПоказательТарифнойСтавки, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательТарифнойСтавки,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ТарифнаяСтавка, 0) КАК РазмерТарифнойСтавки,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ФОТ, 0) КАК Оклад,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.Надбавка, 0) КАК Надбавка,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ФОТ, 0) КАК ФОТ,
		|	ПлановыйФОТИтоги.ОсновноеНачисление КАК ОсновноеНачисление
		|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
		|{ВЫБРАТЬ
		|	Сотрудник,
		|	Период,
		|	ПоказательТарифнойСтавки.*,
		|	ТарифнаяСтавка,
		|	РазмерТарифнойСтавки,
		|	Оклад,
		|	Надбавка,
		|	ФОТ,
		|	ОсновноеНачисление}
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТИтогиСрезПоследних КАК ПлановыйФОТИтоги 
		|		ПО СотрудникиПериоды.Сотрудник = ПлановыйФОТИтоги.Сотрудник
		|			И СотрудникиПериоды.Период = ПлановыйФОТИтоги.Период}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник";
		
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТСотрудникиПериоды", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
		
		ТекстЗапроса = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
			ЗапросВТПлановыйФОТИтогиСрезПоследних.Текст,
			ТекстЗапросаВТТарифнаяСтавкаСотрудников);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(ТекстЗапроса, ВТКУничтожению);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПлановыеУдержанияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеУдержанияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, Знач ПоляОтбораСотрудников = "Сотрудник,ДатаНачала,ДатаОкончания", ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ПоляОтбораСотрудников) = Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляОтбораСотрудников, ",", , Истина);
		ПоляОтбораСотрудников = Новый Структура("Сотрудник,ДатаНачала,ДатаОкончания", МассивПолей[0], МассивПолей[1], МассивПолей[2]);
	КонецЕсли; 
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеУдержания", ПоляОтбора);
	Иначе
		ПоляОтбора = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ВТКУничтожению = Новый Массив;
	ВТКУничтожению.Добавить("ВТВсеПлановыеУдержания");
	ВТКУничтожению.Добавить("ВТПлановыеУдержанияСОсновнымПоказателем");
	ВТКУничтожению.Добавить("ВТЗначенияПериодическихПоказателейУдержаний");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "ФизическоеЛицо");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.ДатаНачала);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗапросВсеПлановыеУдержания = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"ПлановыеУдержания",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТВсеПлановыеУдержания");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВсеПлановыеУдержания);
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВсеПлановыеУдержания.Текст, "ИзмеренияДаты", ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо");
	
	ТекстЗапросаОтбораУдержаний =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеПлановыеУдержания.Период КАК Период,
		|	ВсеПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПлановыеУдержания.Организация КАК Организация,
		|	ВсеПлановыеУдержания.Регистратор КАК Регистратор,
		|	ВсеПлановыеУдержания.Удержание КАК Удержание,
		|	ВсеПлановыеУдержания.ДокументОснование КАК ДокументОснование,
		|	ВсеПлановыеУдержания.Размер КАК Размер,
		|	УдержанияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТПлановыеУдержанияСОсновнымПоказателем
		|ИЗ
		|	ВТВсеПлановыеУдержания КАК ВсеПлановыеУдержания
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
		|		ПО ВсеПлановыеУдержания.Удержание = УдержанияПоказатели.Ссылка
		|			И (УдержанияПоказатели.ОсновнойПоказатель)}
		|ГДЕ
		|	ВсеПлановыеУдержания.Используется";
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ПоляОтбора);
	Иначе
		ПоляОтбора = Новый Массив;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПлановыеУдержанияСОсновнымПоказателем", "Показатель,ФизическоеЛицо,Организация,ДокументОснование");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		"ВТЗначенияПериодическихПоказателейУдержаний");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборСотрудников.ДатаОкончания КАК Период,
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ОтборСотрудников.Сотрудник) КАК Сотрудник,
		|	ПлановыеУдержанияСОсновнымПоказателем.Регистратор КАК Регистратор,
		|	ПлановыеУдержанияСОсновнымПоказателем.Организация КАК Организация,
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо КАК ФизическоеЛицо1,
		|	ПлановыеУдержанияСОсновнымПоказателем.Удержание КАК Удержание,
		|	ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование КАК ДокументОснование,
		|	ПлановыеУдержанияСОсновнымПоказателем.Показатель КАК ОсновнойПоказатель,
		|	ПолучателиУдержаний.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент ЕСТЬ NULL
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение ЕСТЬ NULL 
		|						ТОГДА ПлановыеУдержанияСОсновнымПоказателем.Размер
		|					ИНАЧЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержанияПоИсполнительномуДокументу.Процент = 0
		|					ТОГДА УсловияУдержанияПоИсполнительномуДокументу.Сумма
		|				ИНАЧЕ УсловияУдержанияПоИсполнительномуДокументу.Процент
		|			КОНЕЦ
		|	КОНЕЦ КАК Значение,
		|	ЕСТЬNULL(УсловияУдержанияПоИсполнительномуДокументу.Предел, 0) КАК Предел
		|ПОМЕСТИТЬ ВТПлановыеУдержанияСотрудников
		|ИЗ
		|	ВТОтборСотрудников КАК ОтборСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияСОсновнымПоказателем КАК ПлановыеУдержанияСОсновнымПоказателем
		|				{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУдержаний КАК ПолучателиУдержаний
		|				ПО ПлановыеУдержанияСОсновнымПоказателем.Удержание = ПолучателиУдержаний.Удержание
		|					И ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо = ПолучателиУдержаний.ФизическоеЛицо
		|					И ПлановыеУдержанияСОсновнымПоказателем.Организация = ПолучателиУдержаний.Организация
		|					И ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование = ПолучателиУдержаний.ДокументОснование}
		|				{ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейУдержаний КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|				ПО ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ФизическоеЛицо
		|					И ПлановыеУдержанияСОсновнымПоказателем.Организация = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Организация
		|					И ПлановыеУдержанияСОсновнымПоказателем.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|					И ПлановыеУдержанияСОсновнымПоказателем.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|					И ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование}
		|				{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
		|				ПО ПлановыеУдержанияСОсновнымПоказателем.Регистратор = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент}
		|			ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо
		|				И (ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = ВЫРАЗИТЬ(ПлановыеУдержанияСОсновнымПоказателем.Организация КАК Справочник.Организации).ГоловнаяОрганизация)
		|				И (ПлановыеУдержанияСОсновнымПоказателем.Период МЕЖДУ ТекущиеКадровыеДанныеСотрудников.ДатаПриема И ВЫБОР
		|					КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|					ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|				КОНЕЦ)
		|		ПО ОтборСотрудников.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборСотрудников.ДатаОкончания,
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо,
		|	ПлановыеУдержанияСОсновнымПоказателем.Регистратор,
		|	ПлановыеУдержанияСОсновнымПоказателем.Организация,
		|	ПлановыеУдержанияСОсновнымПоказателем.Удержание,
		|	ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование,
		|	ПлановыеУдержанияСОсновнымПоказателем.Показатель,
		|	ПолучателиУдержаний.Контрагент,
		|	ВЫБОР
		|		КОГДА УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент ЕСТЬ NULL
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение ЕСТЬ NULL 
		|						ТОГДА ПлановыеУдержанияСОсновнымПоказателем.Размер
		|					ИНАЧЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержанияПоИсполнительномуДокументу.Процент = 0
		|					ТОГДА УсловияУдержанияПоИсполнительномуДокументу.Сумма
		|				ИНАЧЕ УсловияУдержанияПоИсполнительномуДокументу.Процент
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ЕСТЬNULL(УсловияУдержанияПоИсполнительномуДокументу.Предел, 0),
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеУдержанияСотрудников", ИмяВТПлановыеУдержанияСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборСотрудников.Сотрудник", "ОтборСотрудников." + ПоляОтбораСотрудников.Сотрудник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборСотрудников.ДатаОкончания", "ОтборСотрудников." + ПоляОтбораСотрудников.ДатаОкончания);
	
	Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
		ЗапросВсеПлановыеУдержания.Текст,
		ТекстЗапросаОтбораУдержаний,
		ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Текст,
		ТекстЗапроса);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ВТКУничтожению);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПлановыеНачисленияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеНачисленияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, Знач ПоляОтбораСотрудников = "Сотрудник,Период", ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Если ТипЗнч(ПоляОтбораСотрудников) = Тип("Строка") Тогда
		ПоляОтбораСотрудников = КадровыйУчет.ПоляОтбораСотрудников(ПоляОтбораСотрудников);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК Период,
			|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК ПериодЗаписи,
			|	NULL КАК Регистратор,
			|	ВЫРАЗИТЬ(NULL КАК Справочник.Сотрудники) КАК Сотрудник,
			|	ВЫРАЗИТЬ(NULL КАК ПланВидовРасчета.Начисления) КАК Начисление,
			|	0 КАК Размер,
			|	ВЫРАЗИТЬ(NULL КАК БУЛЕВО) КАК ОсновнойПоказатель,
			|	0 КАК ЗначениеОсновногоПоказателя,
			|	ВЫРАЗИТЬ(NULL КАК БУЛЕВО) КАК НачислениеТарифнойСтавки
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковОкончательно
			|ГДЕ
			|	ЛОЖЬ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСотрудниковОкончательно", ИмяВТПлановыеНачисленияСотрудников);
		
	Иначе
		
		ВТКУничтожению = Новый Массив;
		ВТКУничтожению.Добавить("ВТПлановыеНачисленияСотрудниковСрезПоследних");
		ВТКУничтожению.Добавить("ВТЗначенияПоказателейСотрудниковСрезПоследних");
		ВТКУничтожению.Добавить("ВТПлановыйФОТСотрудниковСрезПоследних");
		ВТКУничтожению.Добавить("ВТПлановыеНачисленияСотрудниковПредварительно");
		ВТКУничтожению.Добавить("ВТПорядокОсновныхНачислений");
		ВТКУничтожению.Добавить("ВТОсновныеНачисленияСотрудников");
		ВТКУничтожению.Добавить("ВТЗначенияПоказателейСотрудниковСрезПоследнихПоследниеПериоды");
		
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ПлановыеНачисления", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.Период);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.Отборы = ПоляОтбора;
		ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			МодульУправленческаяЗарплата.УточнитьПараметрыПостроенияСрезаНачислений(ПараметрыПостроения);
		КонецЕсли;
		
		ЗапросВТПлановыеНачисленияСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыеНачисления", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			"ВТПлановыеНачисленияСотрудниковСрезПоследних");
		
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ПараметрыПостроения.Отборы = ПоляОтбора;
		
		ЗапросВТЗначенияПоказателей = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			"ВТЗначенияПоказателейСотрудниковСрезПоследних");
		
		Если ПоляОтбора <> Неопределено Тогда
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ПараметрыПостроения.Отборы = ОбщегоНазначения.СкопироватьРекурсивно(ПоляОтбора);
			ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
			
		КонецЕсли;
		
		ЗапросВТПлановыйФОТСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыйФОТ", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			"ВТПлановыйФОТСотрудниковСрезПоследних");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыеНачисленияСрезПоследних);
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТЗначенияПоказателей);
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыйФОТСрезПоследних);
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЗначенияПоказателейСотрудниковСрезПоследних.Период КАК Период,
			|	МАКСИМУМ(ЗначенияПоказателейСотрудниковСрезПоследних.ПериодЗаписи) КАК ПериодЗаписи,
			|	ЗначенияПоказателейСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
			|	ЗначенияПоказателейСотрудниковСрезПоследних.Показатель КАК Показатель,
			|	ЗначенияПоказателейСотрудниковСрезПоследних.ДокументОснование КАК ДокументОснование
			|ПОМЕСТИТЬ ВТЗначенияПоказателейСотрудниковСрезПоследнихПоследниеПериоды
			|ИЗ
			|	ВТЗначенияПоказателейСотрудниковСрезПоследних КАК ЗначенияПоказателейСотрудниковСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗначенияПоказателейСотрудниковСрезПоследних.Период,
			|	ЗначенияПоказателейСотрудниковСрезПоследних.Сотрудник,
			|	ЗначенияПоказателейСотрудниковСрезПоследних.ФизическоеЛицо,
			|	ЗначенияПоказателейСотрудниковСрезПоследних.Показатель,
			|	ЗначенияПоказателейСотрудниковСрезПоследних.ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
			|	ПлановыеНачисленияСрезПоследних.ПериодЗаписи КАК ПериодЗаписи,
			|	ПлановыеНачисленияСрезПоследних.Регистратор КАК Регистратор,
			|	ПлановыеНачисленияСрезПоследних.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
			|	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление,
			|	ПлановыеНачисленияСрезПоследних.ДокументОснование КАК ДокументОснование,
			|	ВЫБОР
			|		КОГДА ПлановыйФОТСрезПоследних.ВкладВФОТ ЕСТЬ NULL
			|			ТОГДА ПлановыеНачисленияСрезПоследних.Размер
			|		ИНАЧЕ ПлановыйФОТСрезПоследних.ВкладВФОТ
			|	КОНЕЦ КАК Размер,
			|	Начисления.РеквизитДопУпорядочивания КАК Порядок,
			|	ЕСТЬNULL(НачисленияПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ОсновнойПоказатель,
			|	Начисления.ВидВремени КАК ВидВремени
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковПредварительно
			|{ВЫБРАТЬ
			|	Период,
			|	Сотрудник,
			|	Начисление,
			|	ДокументОснование,
			|	Размер}
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковСрезПоследних КАК ПлановыеНачисленияСрезПоследних
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСотрудниковСрезПоследних КАК ПлановыйФОТСрезПоследних
			|		ПО ПлановыеНачисленияСрезПоследних.Период = ПлановыйФОТСрезПоследних.Период
			|			И ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
			|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
			|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|			{ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|			ПО Начисления.Ссылка = НачисленияПоказатели.Ссылка
			|				И (НачисленияПоказатели.ОсновнойПоказатель)}
			|		ПО ПлановыеНачисленияСрезПоследних.Начисление = Начисления.Ссылка}
			|ГДЕ
			|	ПлановыеНачисленияСрезПоследних.Используется
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСотрудников.Период КАК Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(ПлановыеНачисленияСотрудников.Порядок) КАК Порядок
			|ПОМЕСТИТЬ ВТПорядокОсновныхНачислений
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|ГДЕ
			|	ПлановыеНачисленияСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСотрудников.Период КАК Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(ПлановыеНачисленияСотрудников.Начисление) КАК Начисление,
			|	ПорядокОсновногоНачисления.Порядок КАК Порядок
			|ПОМЕСТИТЬ ВТОсновныеНачисленияСотрудников
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокОсновныхНачислений КАК ПорядокОсновногоНачисления
			|		ПО ПлановыеНачисленияСотрудников.Период = ПорядокОсновногоНачисления.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ПорядокОсновногоНачисления.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Порядок = ПорядокОсновногоНачисления.Порядок
			|ГДЕ
			|	ПлановыеНачисленияСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник,
			|	ПорядокОсновногоНачисления.Порядок
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПлановыеНачисленияСотрудников.Период КАК Период,
			|	ПлановыеНачисленияСотрудников.ПериодЗаписи КАК ПериодЗаписи,
			|	ПлановыеНачисленияСотрудников.Регистратор КАК Регистратор,
			|	ПлановыеНачисленияСотрудников.Сотрудник КАК Сотрудник,
			|	ПлановыеНачисленияСотрудников.Начисление КАК Начисление,
			|	ПлановыеНачисленияСотрудников.ДокументОснование КАК ДокументОснование,
			|	ПлановыеНачисленияСотрудников.Размер КАК Размер,
			|	ПлановыеНачисленияСотрудников.ОсновнойПоказатель КАК ОсновнойПоказатель,
			|	ЗначенияПоказателей.Значение КАК ЗначениеОсновногоПоказателя,
			|	ВЫБОР
			|		КОГДА ОсновныеНачисленияСотрудников.Начисление ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК НачислениеТарифнойСтавки
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковОкончательно
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
			|		ПО ПлановыеНачисленияСотрудников.Период = ОсновныеНачисленияСотрудников.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ОсновныеНачисленияСотрудников.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Начисление = ОсновныеНачисленияСотрудников.Начисление
			|			И ПлановыеНачисленияСотрудников.Порядок = ОсновныеНачисленияСотрудников.Порядок}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСотрудниковСрезПоследних КАК ЗначенияПоказателей
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСотрудниковСрезПоследнихПоследниеПериоды КАК ЗначенияПоказателейПоследниеПериоды
			|			ПО ЗначенияПоказателей.Период = ЗначенияПоказателейПоследниеПериоды.Период
			|				И ЗначенияПоказателей.ПериодЗаписи = ЗначенияПоказателейПоследниеПериоды.ПериодЗаписи
			|				И ЗначенияПоказателей.Сотрудник = ЗначенияПоказателейПоследниеПериоды.Сотрудник
			|				И ЗначенияПоказателей.Показатель = ЗначенияПоказателейПоследниеПериоды.Показатель
			|				И ЗначенияПоказателей.ДокументОснование = ЗначенияПоказателейПоследниеПериоды.ДокументОснование
			|		ПО ПлановыеНачисленияСотрудников.Период = ЗначенияПоказателей.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ЗначенияПоказателей.Сотрудник
			|			И ПлановыеНачисленияСотрудников.ДокументОснование = ЗначенияПоказателей.ДокументОснование
			|			И ПлановыеНачисленияСотрудников.ОсновнойПоказатель = ЗначенияПоказателей.Показатель
			|			И ПлановыеНачисленияСотрудников.ГоловнаяОрганизация = ЗначенияПоказателей.Организация.ГоловнаяОрганизация}";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСотрудниковОкончательно", ИмяВТПлановыеНачисленияСотрудников);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
		
		ТекстЗапроса = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
			ЗапросВТПлановыеНачисленияСрезПоследних.Текст,
			ЗапросВТЗначенияПоказателей.Текст,
			ЗапросВТПлановыйФОТСрезПоследних.Текст,
			ТекстЗапроса);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(ТекстЗапроса, ВТКУничтожению);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	КадровыеДвижения - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		ДействуетДо (не обязательно).
//		Сотрудник
//		Позиция (не обязательно)
//		Подразделение (не обязательно).
//		Должность (не обязательно)
// 		КоличествоСтавок (не обязательно).
// 		
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ТолькоБронированиеПозиции, Записывать) Экспорт
	
	Если Не ТолькоБронированиеПозиции Тогда
		КадровыйУчетБазовый.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ТолькоБронированиеПозиции, Записывать, Ложь);
	КонецЕсли;
	
	Регистратор = Движения.КадроваяИсторияСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (КадровыеДвижения.Колонки.Найти("ДействуетДо") <> НеОпределено);
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> НеОпределено) И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> НеОпределено);
	КоличествоСтавокЕсть = (КадровыеДвижения.Колонки.Найти("КоличествоСтавок") <> НеОпределено);
	ВидДоговораЕсть = (КадровыеДвижения.Колонки.Найти("ВидДоговора") <> НеОпределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, Регистратор, ВремяРегистрацииДокумента);
	
	// Получим подразделения по позиции, если требуется.
	Если ПозицияЕсть Тогда
		
		ПозицииМассив = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Позиция", Истина);
		ПодразделенияДолжностиПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПозицииМассив, "Подразделение,Должность");
		
	КонецЕсли;
	
	ГоловныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Сотрудник", Истина), "ГоловнойСотрудник");
	
	Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
		
		Если КоличествоСтавокЕсть И СтрокаДанных.КоличествоСтавок = 0 И СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
			СтрокаДанных.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
		КонецЕсли;
		
		Если Не ТолькоБронированиеПозиции Тогда
			
			// Движение по КадроваяИсторияСотрудников.
			НоваяСтрока = Движения.КадроваяИсторияСотрудников.Добавить();
			НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
			НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
			НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
			НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
			НоваяСтрока.Организация = СтрокаДанных.Организация;
			
			НоваяСтрока.ГоловнойСотрудник = ГоловныеСотрудники.Получить(НоваяСтрока.Сотрудник);
			НоваяСтрока.ЭтоГоловнойСотрудник = (НоваяСтрока.Сотрудник = НоваяСтрока.ГоловнойСотрудник);
			
			Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущееПодразделение) Тогда
					НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
				ИначеЕсли ПодразделениеЕсть Тогда
					НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущаяПозиция) Тогда
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.ТекущаяПозиция;
				ИначеЕсли ПозицияЕсть Тогда
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущаяДолжность) Тогда
					НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
				ИначеЕсли ДолжностьЕсть Тогда
					НоваяСтрока.Должность = СтрокаДанных.Должность;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущееКоличествоСтавок) Тогда
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
				ИначеЕсли КоличествоСтавокЕсть Тогда
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.КоличествоСтавок;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущийВидДоговора) Тогда
					НоваяСтрока.ВидДоговора = СтрокаДанных.ТекущийВидДоговора;
				ИначеЕсли ВидДоговораЕсть Тогда
					НоваяСтрока.ВидДоговора = СтрокаДанных.ВидДоговора;
				КонецЕсли;
				
			Иначе
				
				Если ПодразделениеЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
					НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
				Иначе
					НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
				КонецЕсли;
				
				Если ДолжностьЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
					НоваяСтрока.Должность = СтрокаДанных.Должность;
				Иначе
					НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
				КонецЕсли;
				
				Если ПозицияЕсть Тогда
					
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
					
					// Если есть позиция, то подразделение и должность берем из нее.
					Если ЗначениеЗаполнено(СтрокаДанных.Позиция) Тогда
						НоваяСтрока.Подразделение = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Подразделение;
						НоваяСтрока.Должность = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Должность;
					КонецЕсли;
					
				Иначе
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.ТекущаяПозиция;
				КонецЕсли;
				
				Если КоличествоСтавокЕсть Тогда
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.КоличествоСтавок;
				Иначе
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
				КонецЕсли;
				
				Если ВидДоговораЕсть Тогда
					НоваяСтрока.ВидДоговора = СтрокаДанных.ВидДоговора;
				Иначе
					НоваяСтрока.ВидДоговора = СтрокаДанных.ТекущийВидДоговора;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.ВидСобытия = СтрокаДанных.ВидСобытия;
			
			Если ДействуетДоЕсть Тогда
				НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// При бронировании позиции предоставляем платформе самой решать в каком порядке записывать движения кадровой истории.
	Если Записывать
		И Движения.КадроваяИсторияСотрудников.Записывать 
		И Не ТолькоБронированиеПозиции Тогда
		
		Движения.КадроваяИсторияСотрудников.Записать();
		Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает процент северной надбавки физического лица или сотрудника.
//
// Параметры:
//		Объект - СправочникСсылка.Сотрудники, СправочникСсылка.ФизическиеЛица
//		ДатаПолученияДанных
//
// ВозвращаемоеЗначение: Число
//
Функция ПроцентСевернойНадбавки(Объект, ДатаПолученияДанных) Экспорт
	
	Если ТипЗнч(Объект) = ТипЗнч(Справочники.Сотрудники.ПустаяСсылка()) Тогда
		ФизическоеЛицо  = Объект.ФизическоеЛицо;
	ИначеЕсли ТипЗнч(Объект) = ТипЗнч(Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
		ФизическоеЛицо  = Объект;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	ПроцентСевернойНадбавки = 0;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	&Сотрудник КАК ФизическоеЛицо,
	|	&ДатаПолученияДанных КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды";
	Запрос.УстановитьПараметр("Сотрудник",ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", НачалоДня(ДатаПолученияДанных));
	Запрос.Выполнить();
	СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТПроцентСевернойНадбавкиФизическихЛиц.ФизическоеЛицо,
	|	ВТПроцентСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки
	|ИЗ
	|	ВТПроцентСевернойНадбавкиФизическихЛиц КАК ВТПроцентСевернойНадбавкиФизическихЛиц";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПроцентСевернойНадбавки = Выборка.ПроцентСевернойНадбавки;	
	КонецЕсли;
	
	Возврат ПроцентСевернойНадбавки;
	
КонецФункции

Функция ТаблицаСотрудниковОрганизации(МассивФизическихЛиц, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено, ПодработкиРаботниковПоТрудовымДоговорам = Ложь, ОтбиратьПоГоловнойОрганизации = Ложь, КадровыеДанные = "") Экспорт
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц			= МассивФизическихЛиц;
	ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации	= ОтбиратьПоГоловнойОрганизации;
	Если Не ВключаяРанееУволенных Тогда
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		= Период;
	КонецЕсли; 
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 		= Период;
	
	ПараметрыПолученияСотрудниковОрганизаций.ПодработкиРаботниковПоТрудовымДоговорам = ПодработкиРаботниковПоТрудовымДоговорам;
	
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные = КадровыеДанные;
	
	Если РаботникиПоДоговорамГПХ <> Неопределено
		И (ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера)) Тогда
		ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	КонецЕсли;
	
	Возврат КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
КонецФункции

// Возвращает таблицу значений, содержащую описание рабочих мест физического лица в организации.
//
// Параметры:
//		ФизическоеЛицо
//		Организация
//		Период
//		ВключаяРанееУволенных					- Булево, если истина, то в таблицу войдут рабочие места по уволенным сотрудникам.
//		РаботникиПоДоговорамГПХ					- Булево
//		ПодработкиРаботниковПоТрудовымДоговорам - Булево
//		ОтбиратьПоГоловнойОрганизации			- Булево, если Истина, то отбор по головной организации.
//
// Возвращаемое значение:
//		Таблица значений, сформированная методом ОписаниеРабочихМестСотрудников.
//
Функция РабочиеМестаФизическогоЛица(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено, ПодработкиРаботниковПоТрудовымДоговорам = Ложь, ОтбиратьПоГоловнойОрганизации = Ложь) Экспорт
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	КадровыеДанные = "Подразделение,Должность,ВидЗанятости";
	
	Если ВключаяРанееУволенных Тогда
		КадровыеДанные = КадровыеДанные + ",ДатаПриема,ДатаЗавершенияРаботы";
	КонецЕсли;
	
	Если ИспользоватьШтатноеРасписание Тогда
		КадровыеДанные = КадровыеДанные +",ДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	ТаблицаСотрудников = ТаблицаСотрудниковОрганизации(
		ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ, ПодработкиРаботниковПоТрудовымДоговорам, ОтбиратьПоГоловнойОрганизации, КадровыеДанные);
	
	Возврат ОписаниеРабочихМестПоКадровымДаннымСотрудников(ТаблицаСотрудников, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ);
	
КонецФункции

// Возвращает таблицу значений, содержащую описание рабочих мест сотрудников.
//
// Параметры:
//			Сотрудники - Массив ссылок на элементы справочника Сотрудники.
//			Период
//			ВключаяРанееУволенных - Булево, если истина, то в таблицу войдут рабочие места по уволенным сотрудникам.
//
// Возвращаемое значение:
//		Таблица значений, содержащая колонки.
//			Сотрудник
//			ФизическоеЛицо
//			Подразделение
//			Должность						- если не используется штатное расписание.
//			ДолжностьПоШтатномуРасписанию	- если используется штатное расписание.
//			ДатаПриема						- если значение параметра ВключаяРанееУволенных равно Истина.
//			ДатаУвольнения					- если значение параметра ВключаяРанееУволенных равно Истина.
//			ПредставлениеРабочегоМеста		- Строка, сформированная методом ПредставлениеРабочегоМеста.
//
Функция ОписаниеРабочихМестСотрудников(Сотрудники, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	КадровыеДанные = "Подразделение,Должность,ВидЗанятости";
	
	Если ВключаяРанееУволенных Тогда
		КадровыеДанные = КадровыеДанные + ",ДатаПриема,ДатаЗавершенияРаботы";
	КонецЕсли;
	
	Если ИспользоватьШтатноеРасписание Тогда
		КадровыеДанные = КадровыеДанные +",ДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, КадровыеДанные, Период);
	
	Возврат ОписаниеРабочихМестПоКадровымДаннымСотрудников(КадровыеДанныеСотрудников, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ);
	
КонецФункции

Функция ОписаниеРабочихМестПоКадровымДаннымСотрудников(ТаблицаОписанийРабочихМест, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Если ВключаяРанееУволенных Тогда
		ТаблицаОписанийРабочихМест.Сортировать("ДатаЗавершенияРаботы,ДатаПриема УБЫВ");
	КонецЕсли;
	
	ТаблицаОписанийРабочихМест.Колонки.Добавить("ПредставлениеРабочегоМеста", Новый ОписаниеТипов("Строка"));
	Если ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОписанийРабочихМест, "Сотрудник", Истина).Количество() > 1 Тогда
		ДобавлятьПредставлениеСотрудника = Истина;
	Иначе
		ДобавлятьПредставлениеСотрудника = Ложь;
	КонецЕсли;
	
	СписокДоговорниковГПХ = Новый Массив;
	СтрокиДоговорниковГПХ = Новый Соответствие;
	Для каждого СтрокаТаблицыОписанийРабочихМест Из ТаблицаОписанийРабочихМест Цикл
		
		Если РаботникиПоДоговорамГПХ = Истина
			И Не ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.Должность) Тогда
			СписокДоговорниковГПХ.Добавить(СтрокаТаблицыОписанийРабочихМест.Сотрудник);
			СтрокиДоговорниковГПХ.Вставить(СтрокаТаблицыОписанийРабочихМест.Сотрудник, СтрокаТаблицыОписанийРабочихМест);
		Иначе
			СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста =
				ПредставлениеРабочегоМеста(СтрокаТаблицыОписанийРабочихМест, ИспользоватьШтатноеРасписание, ВключаяРанееУволенных);
		КонецЕсли;
		
		Если ДобавлятьПредставлениеСотрудника Тогда
			
			СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста = Строка(СтрокаТаблицыОписанийРабочихМест.Сотрудник)
				+ " ("
				+ СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста
				+ ")";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РаботникиПоДоговорамГПХ = Истина И СписокДоговорниковГПХ.Количество() > 0 
		И (ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Сотрудники", СписокДоговорниковГПХ);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
			|ПОМЕСТИТЬ ВТДоговорыГПХСотрудников
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|ГДЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= &Период
			|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник В(&Сотрудники)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДатаОкончания) КАК ДатаОкончания,
			|	ДоговорыГПХСотрудников.Сотрудник
			|ПОМЕСТИТЬ ВТПоследниеДатыОкончанияДоговоров
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДатаНачала) КАК ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания
			|ПОМЕСТИТЬ ВТПоследниеДатыНачалаДоговоров
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеДатыОкончанияДоговоров КАК ПоследниеДатыОкончанияДоговоров
			|		ПО ДоговорыГПХСотрудников.Сотрудник = ПоследниеДатыОкончанияДоговоров.Сотрудник
			|			И ДоговорыГПХСотрудников.ДатаОкончания = ПоследниеДатыОкончанияДоговоров.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаОкончания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания,
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДокументОснование) КАК Договор,
			|	ДоговорыГПХСотрудников.ДокументОснование.Номер КАК Номер,
			|	ДоговорыГПХСотрудников.ДокументОснование.Дата КАК Дата
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеДатыНачалаДоговоров КАК ПоследниеДатыНачалаДоговоров
			|		ПО ДоговорыГПХСотрудников.Сотрудник = ПоследниеДатыНачалаДоговоров.Сотрудник
			|			И ДоговорыГПХСотрудников.ДатаНачала = ПоследниеДатыНачалаДоговоров.ДатаНачала
			|			И ДоговорыГПХСотрудников.ДатаОкончания = ПоследниеДатыНачалаДоговоров.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания,
			|	ДоговорыГПХСотрудников.ДокументОснование.Номер,
			|	ДоговорыГПХСотрудников.ДокументОснование.Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыОписанийРабочихМест = СтрокиДоговорниковГПХ.Получить(Выборка.Сотрудник);
			Если СтрокаТаблицыОписанийРабочихМест <> Неопределено Тогда
				
				Если ТипЗнч(Выборка.Договор) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") Тогда
					ПредставлениеДоговора = НСтр("ru = 'Дог. авт. заказа';
												|en = 'Copyright agreem.'");
				Иначе
					ПредставлениеДоговора = НСтр("ru = 'Дог. (раб., услуги)';
												|en = 'Contr. (works, services)'");
				КонецЕсли;
				
				СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста = ПредставлениеДоговора + " № "
					+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина)
					+ " " + НСтр("ru = 'от';
								|en = 'dated'") + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yy")
					+ " ("  + Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yy") + ")";
				
				Если ДобавлятьПредставлениеСотрудника Тогда
					
					СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста = Строка(Выборка.Сотрудник)
						+ " ("
						+ СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста
						+ ")";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ТаблицаОписанийРабочихМест;
	
КонецФункции

// Возвращает представление рабочего места сотрудника.
// 
// Параметры:
//				СтрокаТаблицыОписанийРабочихМест - Строка таблицы значений
//				ИспользоватьШтатноеРасписание
//				УказатьПериодРаботы.
//
// Возвращаемое значение:
//			Строка - Представление позиции штатного расписания, если используется штатное расписание,
//					представление рабочего места вида "Должность /Подразделение/", если штатное расписание не ведется
//					дополняется периодом работы "по дата увольнения", для уволенных сотрудников и "с дата приема" для работающих.
//
Функция ПредставлениеРабочегоМеста(СтрокаТаблицыОписанийРабочихМест, ИспользоватьШтатноеРасписание, УказатьПериодРаботы)
	
	Если СтрокаТаблицыОписанийРабочихМест = Неопределено Тогда
		ПредставлениеРабочегоМеста = "";
	Иначе
		
		Если ИспользоватьШтатноеРасписание Тогда
			ПредставлениеРабочегоМеста = Строка(СтрокаТаблицыОписанийРабочихМест.ДолжностьПоШтатномуРасписанию);
		Иначе
			ПредставлениеРабочегоМеста =
				Строка(СтрокаТаблицыОписанийРабочихМест.Должность) +" /"+Строка(СтрокаТаблицыОписанийРабочихМест.Подразделение)+"/";
		КонецЕсли;
		
		Если УказатьПериодРаботы Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.ДатаЗавершенияРаботы) Тогда
				
				ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста + " ("
					+ НСтр("ru = 'по';
							|en = 'to'") + " " + Формат(СтрокаТаблицыОписанийРабочихМест.ДатаЗавершенияРаботы, "ДЛФ=DD") + ")";
					
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.ДатаПриема) Тогда
					
				ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста + " ("
					+ НСтр("ru = 'с';
							|en = 'from'") + " " + Формат(СтрокаТаблицыОписанийРабочихМест.ДатаПриема, "ДЛФ=DD") + ")";
					
			КонецЕсли;
				
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ПредставлениеРабочегоМеста;
	
КонецФункции

// Возвращает описание параметров для метода СоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
// Параметры:
//		ИмяВТФизическиеЛицаДоговорники 	- Строка
//		Организация 					- СправочникСсылка.Организации
//		НачалоПериода 					- Дата
//		ОкончаниеПериода				- Дата
//
// Возвращаемое значение:
//		Структура:
//			* ИмяВТФизическиеЛицаДоговорники 	- Строка.
//			* Организация						- СправочникСсылка.Организации, если не указывать таблица
//													сформируется по всем доступным организациям.
//			* НачалоПериода						- Дата, по умолчанию пустая дата.
//			* ОкончаниеПериода					- Дата, по умолчанию пустая дата.
//			* ИмяВТДоговорыГПХФизическихЛиц		- Строка, содержит имя создаваемой таблицы
//													по умолчанию - "ВТДоговорыГПХФизическихЛиц".
//
Функция ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(ИмяВТФизическиеЛицаДоговорники, Организация = Неопределено, НачалоПериода = '00010101', ОкончаниеПериода = '00010101') Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяВТФизическиеЛицаДоговорники", ИмяВТФизическиеЛицаДоговорники);
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	Параметры.Вставить("ИмяВТДоговорыГПХФизическихЛиц", "ВТДоговорыГПХФизическихЛиц");
	
	Возврат Параметры;
	
КонецФункции

// Создает в переданном менеджере временных таблиц, таблицу с договорами ГПХ физических лиц
// см. функцию ЗапросВТДоговорыГПХФизическихЛиц.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные		- Булево
//		Параметры				- Структура - см. функцию ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
Процедура СоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает запрос, формирующий временную таблицу с договорами ГПХ физических лиц
// по переданным параметрам. Временная таблица содержит поля:
//		* Организация		- СправочникСсылка.Организации
//		* Договор			- ДокументСсылка.ДоговорАвторскогоЗаказа
//							- ДокументСсылка.ДоговорРаботыУслуги
//		* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//		* ДатаНачала		- Дата
//		* ДатаОкончания		- Дата
//
// Параметры:
//		ТолькоРазрешенные	- Булево
//		Параметры			-Структура - см. функцию ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация КАК Организация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор КАК Договор,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала КАК ДатаНачала,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТДоговорыГПХФизическихЛиц
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаДоговорники КАК ФизическиеЛицаДоговорники
		|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ФизическиеЛицаДоговорники.ФизическоеЛицо
		|ГДЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= &ДатаНачала
		|	И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= &ДатаОкончания
		|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
		ТекстДатаНачала = Параметры.НачалоПериода;
	Иначе
		ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
		ТекстДатаОкончания = Параметры.ОкончаниеПериода;
	Иначе
		ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д'; ДП=") + ")";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаДоговорники", Параметры.ИмяВТФизическиеЛицаДоговорники);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДоговорыГПХФизическихЛиц", Параметры.ИмяВТДоговорыГПХФизическихЛиц);
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация", "");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает таблицу значений, содержащую права сотрудников на специальные отпуска.
//
// Параметры:
//		Сотрудники - Массив ссылок на элементы справочника Сотрудники.
//
// Возвращаемое значение:
//		ТаблицаЗначений
//			* Сотрудник			- СправочникСсылка.Сотрудники
//			* ВидОтпуска		- СправочникСсылка.ВидыОтпусков
//			* КоличествоДней	- Число
//
Функция ПраваНаСпециальныеОтпускаСотрудника(Сотрудники) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "КоличествоДнейОтпускаЧАЭС");
	КадровыеДанные.Колонки.КоличествоДнейОтпускаЧАЭС.Имя = "КоличествоДней";
	КадровыеДанные.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	КадровыеДанные.Колонки.Удалить("Период");
	КадровыеДанные.Колонки.Удалить("ФизическоеЛицо");
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для каждого СтрокаДанных Из КадровыеДанные Цикл
		Если СтрокаДанных.КоличествоДней = NULL Или Не ЗначениеЗаполнено(СтрокаДанных.КоличествоДней) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаДанных);
		Иначе
			СтрокаДанных.ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		КадровыеДанные.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат КадровыеДанные;
	
КонецФункции

Процедура СформироватьДвиженияПоТерриториям(Движения, ДанныеДляПроведения) Экспорт
	
	Для каждого СтрокаДанныхДляПроведения Из ДанныеДляПроведения Цикл
		СтрокаДвижений = Движения.ТерриторииСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаДанныхДляПроведения);
	КонецЦикла;
	
	Если Движения.ТерриторииСотрудников.Количество() > 0 Тогда
		Движения.ТерриторииСотрудников.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СтажиФизическихЛиц

Функция СтажиСУправляемымРостом() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		Возврат МодульАвтоматическийРасчетСтажейФизическихЛиц.СтажиСУправляемымРостом();
		
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

Процедура ОбновитьНакопленныеСтажиФизическихЛиц(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ОбновляемыеВидыСтажей") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеВидыСтажей", Источник.ДополнительныеСвойства.ОбновляемыеВидыСтажей);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеВидыСтажей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбновляемыеВидыСтажей.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТОбновляемыеВидыСтажей
		|ИЗ
		|	&ОбновляемыеВидыСтажей КАК ОбновляемыеВидыСтажей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеВидыСтажей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбновляемыеВидыСтажей.ВидСтажа КАК ВидСтажа
		|ИЗ
		|	ВТОбновляемыеВидыСтажей КАК ОбновляемыеВидыСтажей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО ОбновляемыеВидыСтажей.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И ОбновляемыеВидыСтажей.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|		ПО ОбновляемыеВидыСтажей.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И ОбновляемыеВидыСтажей.ВидСтажа = НакопленныеСтажиФизическихЛиц.ВидСтажа
		|ГДЕ
		|	СтажиФизическихЛиц.ВидСтажа ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НакопленныеСтажиФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписей.Отбор.ВидСтажа.Установить(Выборка.ВидСтажа);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		
		СтандартнаяОбработка = Истина;
		
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ЗарегистрироватьСписокФизическихЛицКПересчетуСтажей(Источник.ДополнительныеСвойства.ОбновляемыеВидыСтажей, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбновляемыеВидыСтажей", Источник.ДополнительныеСвойства.ОбновляемыеВидыСтажей);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеВидыСтажей.Период КАК НачалоПериода,
		|	ОбновляемыеВидыСтажей.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСтажиФизическихЛицКПересчету
		|ИЗ
		|	&ОбновляемыеВидыСтажей КАК ОбновляемыеВидыСтажей";
	
	Запрос.Выполнить();
	
	ОбновитьНакопленныеСтажиФизическихЛицПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ОбновитьНакопленныеСтажиФизическихЛицПоВременнойТаблице(МенеджерВременныхТаблиц) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СтажиФизическихЛиц.Период < СтажиФизическихЛиц.ДатаОтсчета
		|			ТОГДА СтажиФизическихЛиц.ДатаОтсчета
		|		ИНАЧЕ СтажиФизическихЛиц.Период
		|	КОНЕЦ КАК Период,
		|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	СтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	СтажиФизическихЛиц.Прерван КАК Прерван
		|ПОМЕСТИТЬ ВТСтажиФизическихЛицКОбновлению
		|ИЗ
		|	ВТСтажиФизическихЛицКПересчету КАК ОбновляемыеФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛицСледующие
		|			ПО СтажиФизическихЛиц.ФизическоеЛицо = СтажиФизическихЛицСледующие.ФизическоеЛицо
		|				И СтажиФизическихЛиц.ВидСтажа = СтажиФизическихЛицСледующие.ВидСтажа
		|				И СтажиФизическихЛиц.Период < СтажиФизическихЛицСледующие.Период
		|		ПО ОбновляемыеФизическиеЛица.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	СтажиФизическихЛиц.ДатаОтсчета < ЕСТЬNULL(СтажиФизическихЛицСледующие.Период, ДАТАВРЕМЯ(3999, 12, 31))";
	
	Запрос.Выполнить();
	
	// Формирование записей регистра накопления НакопленныеСтажиФизическихЛиц
	
	ОписательВТ = ОписательВТИсходныеДанныеДляРасчетаСтажа();
	ОписательВТ.ИмяВТИсходныеДанные = "ВТСтажиФизическихЛицКОбновлению";
	ОписательВТ.ИмяПоляДатаРасчетаСтажа = "Период";
	
	СоздатьВТРасчетСтажа(Запрос.МенеджерВременныхТаблиц, ОписательВТ, "ВТНакопленныеСтажиФизическихЛицПредварительно");
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	ВЫБОР
		|		КОГДА НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа < НакопленныеСтажиФизическихЛиц.ДатаОтсчета
		|			ТОГДА НакопленныеСтажиФизическихЛиц.ДатаОтсчета
		|		ИНАЧЕ НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа
		|	КОНЕЦ КАК ДатаНачала,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МИНИМУМ(СтажиФизическихЛицСледующие.Период), ДЕНЬ, -1), &МаксимальнаяДата) КАК ДатаОкончания,
		|	НакопленныеСтажиФизическихЛиц.ВсегоМесяцев КАК РазмерМесяцев,
		|	НакопленныеСтажиФизическихЛиц.Дней КАК РазмерДней,
		|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван
		|ПОМЕСТИТЬ ВТНакопленныеСтажиФизическихЛиц
		|ИЗ
		|	ВТНакопленныеСтажиФизическихЛицПредварительно КАК НакопленныеСтажиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛицСледующие
		|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = СтажиФизическихЛицСледующие.ФизическоеЛицо
		|			И НакопленныеСтажиФизическихЛиц.ВидСтажа = СтажиФизическихЛицСледующие.ВидСтажа
		|			И НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа < СтажиФизическихЛицСледующие.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаРасчетаСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаОтсчета,
		|	НакопленныеСтажиФизическихЛиц.ВсегоМесяцев,
		|	НакопленныеСтажиФизическихЛиц.Дней,
		|	НакопленныеСтажиФизическихЛиц.Прерван";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала КАК ДатаНачала,
		|	НакопленныеСтажиФизическихЛиц.ДатаОкончания КАК ДатаОкончания,
		|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	НакопленныеСтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван
		|ПОМЕСТИТЬ ВТТекущиеНакопленныеСтажиФизическихЛиц
		|ИЗ
		|	РегистрСведений.НакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛицКПересчету КАК ОбновляемыеФизическиеЛица
		|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = ОбновляемыеФизическиеЛица.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТекущиеНакопленныеСтажиФизическихЛиц.ФизическоеЛицо, НакопленныеСтажиФизическихЛиц.ФизическоеЛицо) КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТОбновляемыеФизическиеЛица
		|ИЗ
		|	ВТТекущиеНакопленныеСтажиФизическихЛиц КАК ТекущиеНакопленныеСтажиФизическихЛиц
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|		ПО ТекущиеНакопленныеСтажиФизическихЛиц.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И ТекущиеНакопленныеСтажиФизическихЛиц.ВидСтажа = НакопленныеСтажиФизическихЛиц.ВидСтажа
		|			И ТекущиеНакопленныеСтажиФизическихЛиц.ДатаНачала = НакопленныеСтажиФизическихЛиц.ДатаНачала
		|			И ТекущиеНакопленныеСтажиФизическихЛиц.ДатаОкончания = НакопленныеСтажиФизическихЛиц.ДатаОкончания
		|ГДЕ
		|	(ЕСТЬNULL(НакопленныеСтажиФизическихЛиц.РазмерМесяцев, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ТекущиеНакопленныеСтажиФизическихЛиц.РазмерМесяцев, НЕОПРЕДЕЛЕНО)
		|			ИЛИ ЕСТЬNULL(НакопленныеСтажиФизическихЛиц.РазмерДней, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ТекущиеНакопленныеСтажиФизическихЛиц.РазмерДней, НЕОПРЕДЕЛЕНО)
		|			ИЛИ ЕСТЬNULL(НакопленныеСтажиФизическихЛиц.Прерван, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ТекущиеНакопленныеСтажиФизическихЛиц.Прерван, НЕОПРЕДЕЛЕНО))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбновляемыеФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТОбновляемыеФизическиеЛица КАК ОбновляемыеФизическиеЛица";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОбновляемыеФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
			|	НакопленныеСтажиФизическихЛиц.ДатаНачала КАК ДатаНачала,
			|	НакопленныеСтажиФизическихЛиц.ДатаОкончания КАК ДатаОкончания,
			|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
			|	НакопленныеСтажиФизическихЛиц.РазмерДней КАК РазмерДней,
			|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван
			|ИЗ
			|	ВТСтажиФизическихЛицКПересчету КАК ОбновляемыеФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
			|		ПО ОбновляемыеФизическиеЛица.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			НаборЗаписей = РегистрыСведений.НакопленныеСтажиФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.ВидСтажа) Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОписательВТИсходныеДанныеДляРасчетаСтажа() Экспорт
	
	Описатель = Новый Структура;
	
	Описатель.Вставить("ИмяВТИсходныеДанные", "ВТИсходныеДанные");
	Описатель.Вставить("ИмяПоляДатаРасчетаСтажа", "ДатаРасчетаСтажа");
	Описатель.Вставить("ИмяПоляФизическоеЛицо", "ФизическоеЛицо");
	Описатель.Вставить("ИмяПоляВидСтажа", "ВидСтажа");
	Описатель.Вставить("ИмяПоляДатаОтсчета", "ДатаОтсчета");
	Описатель.Вставить("ИмяПоляДатаОкончания", "");
	Описатель.Вставить("ИмяПоляРазмерДней", "РазмерДней");
	Описатель.Вставить("ИмяПоляРазмерМесяцев", "РазмерМесяцев");
	Описатель.Вставить("ИмяПоляПрерван", "Прерван");
	
	Возврат Описатель;
	
КонецФункции

Функция ЗапросВТРасчетСтажа(ОписательВТ, ИмяВТРасчетСтажа = "ВТРасчетСтажа") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходныеДанные.ДатаРасчетаСтажа КАК ДатаРасчетаСтажа,
		|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанные.ВидСтажа КАК ВидСтажа,
		|	ИсходныеДанные.ДатаОтсчета КАК ДатаОтсчета,
		|	ИсходныеДанные.ДатаОкончания КАК ДатаОкончания,
		|	ИсходныеДанные.РазмерДней КАК РазмерДней,
		|	ИсходныеДанные.РазмерМесяцев КАК РазмерМесяцев,
		|	ИсходныеДанные.Прерван КАК Прерван,
		|	ВЫБОР
		|		КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаОтсчета, МЕСЯЦ)) < ВЫБОР
		|				КОГДА ИсходныеДанные.РазмерДней = 0
		|					ТОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(ИсходныеДанные.ДатаОтсчета, ДЕНЬ, 1))
		|				КОГДА ДЕНЬ(ИсходныеДанные.ДатаОтсчета) >= ИсходныеДанные.РазмерДней
		|					ТОГДА ДЕНЬ(ИсходныеДанные.ДатаОтсчета) - ИсходныеДанные.РазмерДней + 1
		|				ИНАЧЕ ДЕНЬ(ИсходныеДанные.ДатаОтсчета) - ИсходныеДанные.РазмерДней + 31
		|			КОНЕЦ
		|			ТОГДА ВЫБОР
		|					КОГДА ИсходныеДанные.РазмерДней = 0
		|						ТОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(ИсходныеДанные.ДатаОтсчета, ДЕНЬ, 1))
		|					КОГДА ДЕНЬ(ИсходныеДанные.ДатаОтсчета) >= ИсходныеДанные.РазмерДней
		|						ТОГДА ДЕНЬ(ИсходныеДанные.ДатаОтсчета) - ИсходныеДанные.РазмерДней + 1
		|					ИНАЧЕ ДЕНЬ(ИсходныеДанные.ДатаОтсчета) - ИсходныеДанные.РазмерДней + 31
		|				КОНЕЦ - ДЕНЬ(КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаОтсчета, МЕСЯЦ))
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ИсходныеДанные.РазмерДней = 0
		|					ТОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(ИсходныеДанные.ДатаОтсчета, ДЕНЬ, 1))
		|				КОГДА ДЕНЬ(ИсходныеДанные.ДатаОтсчета) >= ИсходныеДанные.РазмерДней
		|					ТОГДА ДЕНЬ(ИсходныеДанные.ДатаОтсчета) - ИсходныеДанные.РазмерДней + 1
		|				ИНАЧЕ ДЕНЬ(ИсходныеДанные.ДатаОтсчета) - ИсходныеДанные.РазмерДней + 31
		|			КОНЕЦ
		|	КОНЕЦ КАК ДеньНачалаМесяца,
		|	ДЕНЬ(ИсходныеДанные.ДатаРасчетаСтажа) КАК ДеньДатыРасчетаСтажа,
		|	ДЕНЬ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИсходныеДанные.ДатаРасчетаСтажа, МЕСЯЦ), ДЕНЬ, -1)) КАК КоличествоДнейПредыдущегоМесяца,
		|	ДЕНЬ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИсходныеДанные.ДатаРасчетаСтажа, МЕСЯЦ), ДЕНЬ, -1), МЕСЯЦ), ДЕНЬ, -1)) КАК КоличествоДнейПредПредыдущегоМесяца,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаОтсчета, МЕСЯЦ)) КАК КоличествоДнейМесяцаДатыОтсчета,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаОтсчета, МЕСЯЦ), ДЕНЬ, 1), МЕСЯЦ)) КАК КоличествоДнейМесяцаПослеДатыОтсчета,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаРасчетаСтажа, МЕСЯЦ)) КАК КоличествоДнейМесяцаДатыРасчетаСтажа,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаРасчетаСтажа, МЕСЯЦ), ДЕНЬ, 1), МЕСЯЦ)) КАК КоличествоДнейМесяцаПослеДатыРасчетаСтажа,
		|	ДЕНЬ(ИсходныеДанные.ДатаОтсчета) КАК ДеньДатыОтсчета,
		|	РАЗНОСТЬДАТ(ИсходныеДанные.ДатаОтсчета, ИсходныеДанные.ДатаРасчетаСтажа, МЕСЯЦ) КАК РазностьМесяцев
		|ПОМЕСТИТЬ ВТПредварительныеДанные1
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредварительныеДанные1.ДатаРасчетаСтажа КАК ДатаРасчетаСтажа,
		|	ПредварительныеДанные1.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеДанные1.ВидСтажа КАК ВидСтажа,
		|	ПредварительныеДанные1.ДатаОтсчета КАК ДатаОтсчета,
		|	ПредварительныеДанные1.ДатаОкончания КАК ДатаОкончания,
		|	ПредварительныеДанные1.РазмерМесяцев КАК РазмерМесяцев,
		|	ПредварительныеДанные1.РазмерДней КАК РазмерДней,
		|	ПредварительныеДанные1.Прерван КАК Прерван,
		|	ПредварительныеДанные1.ДеньДатыРасчетаСтажа КАК ДеньДатыРасчетаСтажа,
		|	ПредварительныеДанные1.КоличествоДнейМесяцаДатыОтсчета КАК КоличествоДнейМесяцаДатыОтсчета,
		|	ПредварительныеДанные1.КоличествоДнейМесяцаДатыРасчетаСтажа КАК КоличествоДнейМесяцаДатыРасчетаСтажа,
		|	ПредварительныеДанные1.КоличествоДнейПредыдущегоМесяца КАК КоличествоДнейПредыдущегоМесяца,
		|	ПредварительныеДанные1.КоличествоДнейПредПредыдущегоМесяца КАК КоличествоДнейПредПредыдущегоМесяца,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА ПредварительныеДанные1.РазмерДней = 0
		|				ТОГДА ДОБАВИТЬКДАТЕ(ПредварительныеДанные1.ДатаОтсчета, ДЕНЬ, 1)
		|			КОГДА ПредварительныеДанные1.ДеньДатыОтсчета < ПредварительныеДанные1.ДеньНачалаМесяца
		|				ТОГДА ВЫБОР
		|						КОГДА ПредварительныеДанные1.КоличествоДнейМесяцаДатыОтсчета <= ПредварительныеДанные1.ДеньНачалаМесяца
		|							ТОГДА КОНЕЦПЕРИОДА(ПредварительныеДанные1.ДатаОтсчета, МЕСЯЦ)
		|						ИНАЧЕ ВЫБОР
		|								КОГДА ПредварительныеДанные1.ДеньНачалаМесяца - ПредварительныеДанные1.ДеньДатыОтсчета < 30 - ПредварительныеДанные1.РазмерДней
		|									ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПредварительныеДанные1.ДатаОтсчета, МЕСЯЦ), ДЕНЬ, ПредварительныеДанные1.ДеньНачалаМесяца - 1), МЕСЯЦ, 1)
		|								ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПредварительныеДанные1.ДатаОтсчета, МЕСЯЦ), ДЕНЬ, ПредварительныеДанные1.ДеньНачалаМесяца - 1)
		|							КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПредварительныеДанные1.КоличествоДнейМесяцаПослеДатыОтсчета <= ПредварительныеДанные1.ДеньНачалаМесяца
		|						ТОГДА ДОБАВИТЬКДАТЕ(ПредварительныеДанные1.ДатаОтсчета, МЕСЯЦ, 1)
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПредварительныеДанные1.ДатаОтсчета, МЕСЯЦ), ДЕНЬ, ПредварительныеДанные1.ДеньНачалаМесяца)
		|				КОНЕЦ
		|		КОНЕЦ, ДЕНЬ) КАК НачалоПервогоМесяца,
		|	ПредварительныеДанные1.ДеньНачалаМесяца КАК ДеньНачалаМесяца,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА ПредварительныеДанные1.ДеньДатыРасчетаСтажа = ПредварительныеДанные1.ДеньНачалаМесяца
		|				ТОГДА ПредварительныеДанные1.ДатаРасчетаСтажа
		|			КОГДА ПредварительныеДанные1.ДеньДатыРасчетаСтажа < ПредварительныеДанные1.ДеньНачалаМесяца
		|				ТОГДА ВЫБОР
		|						КОГДА ПредварительныеДанные1.КоличествоДнейМесяцаДатыРасчетаСтажа <= ПредварительныеДанные1.ДеньНачалаМесяца
		|							ТОГДА КОНЕЦПЕРИОДА(ПредварительныеДанные1.ДатаРасчетаСтажа, МЕСЯЦ)
		|						ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПредварительныеДанные1.ДатаРасчетаСтажа, МЕСЯЦ), ДЕНЬ, ПредварительныеДанные1.ДеньНачалаМесяца - 1)
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПредварительныеДанные1.КоличествоДнейМесяцаПослеДатыРасчетаСтажа <= ПредварительныеДанные1.ДеньНачалаМесяца
		|						ТОГДА ДОБАВИТЬКДАТЕ(ПредварительныеДанные1.ДатаРасчетаСтажа, МЕСЯЦ, 1)
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПредварительныеДанные1.ДатаРасчетаСтажа, МЕСЯЦ), ДЕНЬ, ПредварительныеДанные1.ДеньНачалаМесяца)
		|				КОНЕЦ
		|		КОНЕЦ, ДЕНЬ) КАК НачалоБудущегоМесяца
		|ПОМЕСТИТЬ ВТПредварительныеДанные2
		|ИЗ
		|	ВТПредварительныеДанные1 КАК ПредварительныеДанные1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредварительныеДанные3.ДатаРасчетаСтажа КАК ДатаРасчетаСтажа,
		|	ПредварительныеДанные3.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеДанные3.ВидСтажа КАК ВидСтажа,
		|	ПредварительныеДанные3.ДатаОтсчета КАК ДатаОтсчета,
		|	ПредварительныеДанные3.ДатаОкончания КАК ДатаОкончания,
		|	ПредварительныеДанные3.РазмерМесяцев КАК РазмерМесяцев,
		|	ПредварительныеДанные3.РазмерДней КАК РазмерДней,
		|	ПредварительныеДанные3.Прерван КАК Прерван,
		|	ВЫБОР
		|		КОГДА ПредварительныеДанные3.Прерван
		|			ТОГДА ПредварительныеДанные3.РазмерМесяцев
		|		КОГДА ПредварительныеДанные3.ДатаРасчетаСтажа = ПредварительныеДанные3.ДатаОтсчета
		|			ТОГДА ПредварительныеДанные3.РазмерМесяцев
		|		ИНАЧЕ РАЗНОСТЬДАТ(ПредварительныеДанные3.НачалоПервогоМесяца, ПредварительныеДанные3.НачалоБудущегоМесяца, МЕСЯЦ) + ПредварительныеДанные3.РазмерМесяцев + ВЫБОР
		|				КОГДА ПредварительныеДанные3.ДатаРасчетаСтажа = ДОБАВИТЬКДАТЕ(ПредварительныеДанные3.НачалоБудущегоМесяца, ДЕНЬ, -1)
		|							И ПредварительныеДанные3.ДеньНачалаМесяца = ДЕНЬ(ПредварительныеДанные3.НачалоБудущегоМесяца)
		|						ИЛИ НАЧАЛОПЕРИОДА(ПредварительныеДанные3.ДатаРасчетаСтажа,ДЕНЬ) = ПредварительныеДанные3.НачалоБудущегоМесяца
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ - ВЫБОР
		|				КОГДА ПредварительныеДанные3.РазмерДней = 0
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК СтажМесяцев,
		|	ВЫБОР
		|		КОГДА ПредварительныеДанные3.Прерван
		|			ТОГДА ПредварительныеДанные3.РазмерДней
		|		КОГДА ПредварительныеДанные3.ДатаРасчетаСтажа = ПредварительныеДанные3.ДатаОтсчета
		|			ТОГДА ПредварительныеДанные3.РазмерДней
		|		КОГДА ПредварительныеДанные3.ДатаРасчетаСтажа = ДОБАВИТЬКДАТЕ(ПредварительныеДанные3.НачалоБудущегоМесяца, ДЕНЬ, -1)
		|				И ПредварительныеДанные3.ДеньНачалаМесяца = ДЕНЬ(ПредварительныеДанные3.НачалоБудущегоМесяца)
		|			ТОГДА 0
		|		ИНАЧЕ ПредварительныеДанные3.ПрошлоДней
		|	КОНЕЦ КАК СтажДней,
		|	ПредварительныеДанные3.НачалоБудущегоМесяца КАК НачалоБудущегоМесяца
		|ПОМЕСТИТЬ ВТПредварительныеДанныеСтажа
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПредварительныеДанные2.ДатаРасчетаСтажа КАК ДатаРасчетаСтажа,
		|		ПредварительныеДанные2.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ПредварительныеДанные2.ВидСтажа КАК ВидСтажа,
		|		ПредварительныеДанные2.ДатаОтсчета КАК ДатаОтсчета,
		|		ПредварительныеДанные2.ДатаОкончания КАК ДатаОкончания,
		|		ПредварительныеДанные2.РазмерМесяцев КАК РазмерМесяцев,
		|		ПредварительныеДанные2.РазмерДней КАК РазмерДней,
		|		ПредварительныеДанные2.Прерван КАК Прерван,
		|		ПредварительныеДанные2.ДеньНачалаМесяца КАК ДеньНачалаМесяца,
		|		ПредварительныеДанные2.НачалоПервогоМесяца КАК НачалоПервогоМесяца,
		|		ВЫБОР
		|			КОГДА ПредварительныеДанные2.НачалоПервогоМесяца > ПредварительныеДанные2.НачалоБудущегоМесяца
		|				ТОГДА ПредварительныеДанные2.НачалоПервогоМесяца
		|			ИНАЧЕ ПредварительныеДанные2.НачалоБудущегоМесяца
		|		КОНЕЦ КАК НачалоБудущегоМесяца,
		|		ПредварительныеДанные2.КоличествоДнейМесяцаДатыОтсчета КАК КоличествоДнейМесяцаДатыОтсчета,
		|		ВЫБОР
		|			КОГДА ПредварительныеДанные2.НачалоПервогоМесяца >= ПредварительныеДанные2.НачалоБудущегоМесяца
		|					И ПредварительныеДанные2.ДатаРасчетаСтажа <> ПредварительныеДанные2.НачалоПервогоМесяца
		|				ТОГДА РАЗНОСТЬДАТ(ПредварительныеДанные2.ДатаОтсчета, ПредварительныеДанные2.ДатаРасчетаСтажа, ДЕНЬ) + ПредварительныеДанные2.РазмерДней
		|			КОГДА ПредварительныеДанные2.ДеньДатыРасчетаСтажа >= ПредварительныеДанные2.ДеньНачалаМесяца
		|				ТОГДА ПредварительныеДанные2.ДеньДатыРасчетаСтажа - ПредварительныеДанные2.ДеньНачалаМесяца + 1
		|			КОГДА ПредварительныеДанные2.КоличествоДнейМесяцаДатыРасчетаСтажа < ПредварительныеДанные2.ДеньНачалаМесяца
		|					И ПредварительныеДанные2.ДеньДатыРасчетаСтажа = ПредварительныеДанные2.КоличествоДнейМесяцаДатыРасчетаСтажа
		|				ТОГДА ПредварительныеДанные2.КоличествоДнейПредыдущегоМесяца - ПредварительныеДанные2.ДеньНачалаМесяца + 1
		|			КОГДА ПредварительныеДанные2.КоличествоДнейПредыдущегоМесяца >= ПредварительныеДанные2.ДеньНачалаМесяца
		|				ТОГДА ПредварительныеДанные2.ДеньДатыРасчетаСтажа + ПредварительныеДанные2.КоличествоДнейПредыдущегоМесяца - ПредварительныеДанные2.ДеньНачалаМесяца + 1
		|			КОГДА ПредварительныеДанные2.КоличествоДнейПредыдущегоМесяца < ПредварительныеДанные2.ДеньНачалаМесяца
		|				ТОГДА ПредварительныеДанные2.ДеньДатыРасчетаСтажа + ПредварительныеДанные2.КоличествоДнейПредПредыдущегоМесяца - ПредварительныеДанные2.ДеньНачалаМесяца + 1
		|			ИНАЧЕ ПредварительныеДанные2.ДеньДатыРасчетаСтажа
		|		КОНЕЦ КАК ПрошлоДней
		|	ИЗ
		|		ВТПредварительныеДанные2 КАК ПредварительныеДанные2) КАК ПредварительныеДанные3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредварительныеДанные4.ДатаРасчетаСтажа КАК ПериодРегистрации,
		|	ПредварительныеДанные4.ДатаРасчетаСтажа КАК Период,
		|	ПредварительныеДанные4.ДатаРасчетаСтажа КАК ДатаРасчетаСтажа,
		|	ПредварительныеДанные4.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеДанные4.ВидСтажа КАК ВидСтажа,
		|	ПредварительныеДанные4.ДатаОтсчета КАК ДатаОтсчета,
		|	ПредварительныеДанные4.ДатаОкончания КАК ДатаОкончания,
		|	ПредварительныеДанные4.РазмерМесяцев КАК РазмерМесяцев,
		|	ПредварительныеДанные4.РазмерДней КАК РазмерДней,
		|	ПредварительныеДанные4.Прерван КАК Прерван,
		|	ПредварительныеДанные4.СтажМесяцев КАК ВсегоМесяцев,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ПредварительныеДанные4.СтажМесяцев / 12 КАК ЧИСЛО(3, 0))) * 12 > ПредварительныеДанные4.СтажМесяцев
		|			ТОГДА (ВЫРАЗИТЬ(ПредварительныеДанные4.СтажМесяцев / 12 КАК ЧИСЛО(3, 0))) - 1
		|		ИНАЧЕ ВЫРАЗИТЬ(ПредварительныеДанные4.СтажМесяцев / 12 КАК ЧИСЛО(3, 0))
		|	КОНЕЦ КАК Лет,
		|	ПредварительныеДанные4.СтажМесяцев - ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ПредварительныеДанные4.СтажМесяцев / 12 КАК ЧИСЛО(3, 0))) * 12 > ПредварительныеДанные4.СтажМесяцев
		|			ТОГДА (ВЫРАЗИТЬ(ПредварительныеДанные4.СтажМесяцев / 12 КАК ЧИСЛО(3, 0))) - 1
		|		ИНАЧЕ ВЫРАЗИТЬ(ПредварительныеДанные4.СтажМесяцев / 12 КАК ЧИСЛО(3, 0))
		|	КОНЕЦ * 12 КАК Месяцев,
		|	ПредварительныеДанные4.СтажДней КАК Дней,
		|	ВЫБОР
		|		КОГДА ПредварительныеДанные4.Прерван
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		КОГДА ПредварительныеДанные4.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ПредварительныеДанные4.НачалоБудущегоМесяца
		|		КОГДА ПредварительныеДанные4.НачалоБудущегоМесяца >= ПредварительныеДанные4.ДатаОтсчета
		|				И ПредварительныеДанные4.НачалоБудущегоМесяца <= ПредварительныеДанные4.ДатаОкончания
		|			ТОГДА ПредварительныеДанные4.НачалоБудущегоМесяца
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК НачалоБудущегоМесяца
		|ПОМЕСТИТЬ ВТРасчетСтажа
		|ИЗ
		|	ВТПредварительныеДанныеСтажа КАК ПредварительныеДанные4";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.ДатаРасчетаСтажа", "ИсходныеДанные." + ОписательВТ.ИмяПоляДатаРасчетаСтажа);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.ФизическоеЛицо", "ИсходныеДанные." + ОписательВТ.ИмяПоляФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.ВидСтажа", "ИсходныеДанные." + ОписательВТ.ИмяПоляВидСтажа);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.ДатаОтсчета", "ИсходныеДанные." + ОписательВТ.ИмяПоляДатаОтсчета);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.РазмерДней", "ИсходныеДанные." + ОписательВТ.ИмяПоляРазмерДней);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.РазмерМесяцев", "ИсходныеДанные." + ОписательВТ.ИмяПоляРазмерМесяцев);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.Прерван", "ИсходныеДанные." + ОписательВТ.ИмяПоляПрерван);
	
	Если ПустаяСтрока(ОписательВТ.ИмяПоляДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.ДатаОкончания", "ДАТАВРЕМЯ(1, 1, 1)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанные.ДатаОкончания", "ИсходныеДанные." + ОписательВТ.ИмяПоляДатаОкончания);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходныеДанные", ОписательВТ.ИмяВТИсходныеДанные);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
		Запрос.Текст, "ВТРасчетСтажа", ИмяВТРасчетСтажа);
	
	
	Если Не ПустаяСтрока(ИмяВТРасчетСтажа) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПредварительныеДанные1;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПредварительныеДанные2;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПредварительныеДанныеСтажа";
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТРасчетСтажа(МенеджерВременныхТаблиц, ОписательВТ, ИмяВТРасчетСтажа = "ВТРасчетСтажа") Экспорт
	
	Запрос = ЗапросВТРасчетСтажа(ОписательВТ, ИмяВТРасчетСтажа);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

Процедура СформироватьДвиженияЗанятостиВременноОсвобожденныхПозицииПоТаблицеЗначений(Движения, СотрудникиПериоды, ДатаОкончанияПланируемая, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ПараметрыПостроенияСрезовЗанятостиПозицийШтатногоРасписания(Движения, ИсключаемыеРегистраторы);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиПериоды, "Сотрудник");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период","ДатаНачала");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗанятостьПозицийШтатногоРасписания",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьПозиций.Период КАК Период,
		|	ЗанятостьПозиций.Сотрудник КАК Сотрудник,
		|	ЗанятостьПозиций.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗанятостьПозиций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗанятостьПозиций.ДокументОснование КАК ДокументОснование,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна) КАК ВидЗанятостиПозиции,
		|	ЗанятостьПозиций.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятостьПозиций.ПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ВЫБОР
		|		КОГДА ЗанятостьПозиций.ЗамещаемыйСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА ЗанятостьПозиций.Сотрудник
		|		ИНАЧЕ ЗанятостьПозиций.ЗамещаемыйСотрудник
		|	КОНЕЦ КАК ЗамещаемыйСотрудник,
		|	ЗанятостьПозиций.ВидЗанятостиПозиции КАК ИсходныйВидЗанятостиПозиции,
		|	ВЫБОР
		|		КОГДА ЗанятостьПозиций.ПланируемаяДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗанятостьПозиций.ПериодВозвратногоСобытия
		|		ИНАЧЕ ЗанятостьПозиций.ПланируемаяДатаЗавершения
		|	КОНЕЦ КАК ИсходныйПериодВозвратногоСобытия
		|ИЗ
		|	ВТЗанятостьПозицийШтатногоРасписанияСрезПоследних КАК ЗанятостьПозиций
		|ГДЕ
		|	ЗанятостьПозиций.КоличествоСтавок > 0
		|	И ЗанятостьПозиций.ВидЗанятостиПозиции В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Совмещена), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Подработка), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна))";
	
	ЗанятостьПозицийШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	
	Если СотрудникиПериоды.Количество() <> СотрудникиПериоды.НайтиСтроки(Новый Структура("ДатаОкончания", '00010101')).Количество() Тогда
		
		УдаляемыеЗаписи = Новый Массив;
		Для Каждого ЗаписьЗанятостиПозиций Из ЗанятостьПозицийШтатногоРасписания Цикл
			
			Если ЗаписьЗанятостиПозиций.ИсходныйВидЗанятостиПозиции = Перечисления.ВидыЗанятостиПозицийШтатногоРасписания.Свободна
				И Не ЗначениеЗаполнено(ЗаписьЗанятостиПозиций.ИсходныйПериодВозвратногоСобытия) Тогда
				
				УдаляемыеЗаписи.Добавить(ЗаписьЗанятостиПозиций);
				Продолжить;
			КонецЕсли;
			
			СтрокиСотрудника = СотрудникиПериоды.НайтиСтроки(Новый Структура("ДатаНачала,Сотрудник", ЗаписьЗанятостиПозиций.Период, ЗаписьЗанятостиПозиций.Сотрудник));
			Если СтрокиСотрудника.Количество() > 0 Тогда
				
				СтрокаСотрудника = СтрокиСотрудника[0];
				Если ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания) Тогда
					
					Если ДатаОкончанияПланируемая Тогда
						ЗаписьЗанятостиПозиций.ПланируемаяДатаЗавершения = СтрокаСотрудника.ДатаОкончания;
					Иначе
						
						Если ЗначениеЗаполнено(ЗаписьЗанятостиПозиций.ДокументОснование)
							И ЗначениеЗаполнено(ЗаписьЗанятостиПозиций.ПериодВозвратногоСобытия) Тогда
							
							Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
								
								Если ЗаписьЗанятостиПозиций.ПериодВозвратногоСобытия <= КонецДня(СтрокаСотрудника.ДатаОкончания) + 1 Тогда
									ЗаписьЗанятостиПозиций.ДействуетДо = ЗаписьЗанятостиПозиций.ПериодВозвратногоСобытия;
								Иначе
									ЗаписьЗанятостиПозиций.ДействуетДо = КонецДня(СтрокаСотрудника.ДатаОкончания) + 1;
								КонецЕсли;
								
							Иначе
								УдаляемыеЗаписи.Добавить(ЗаписьЗанятостиПозиций);
							КонецЕсли;
							
						Иначе
							ЗаписьЗанятостиПозиций.ДействуетДо = КонецДня(СтрокаСотрудника.ДатаОкончания) + 1;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого УдаляемаяЗапись Из УдаляемыеЗаписи Цикл
			ЗанятостьПозицийШтатногоРасписания.Удалить(УдаляемаяЗапись);
		КонецЦикла;
		
	КонецЕсли;
	
	СформироватьДвиженияЗанятостьПозицийШтатногоРасписания(Движения, ЗанятостьПозицийШтатногоРасписания);
	
КонецПроцедуры

Процедура СформироватьДвиженияОсвобожденияПозицииПриУвольнении(Движения, КадровыеСобытия, ИсключаемыеРегистраторы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеСобытия", КадровыеСобытия);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеСобытия.ДатаСобытия КАК ДатаСобытия,
		|	КадровыеСобытия.Сотрудник КАК Сотрудник,
		|	КадровыеСобытия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеСобытия.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТКадровыеСобытия
		|ИЗ
		|	&КадровыеСобытия КАК КадровыеСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеСобытия.ДатаСобытия КАК Период,
		|	КадровыеСобытия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеСобытия.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТКадровыеСобытия КАК КадровыеСобытия";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФизическиеЛицаПериоды", "ГоловнаяОрганизация,ФизическоеЛицо");
	ПараметрыПостроения = ПараметрыПостроенияСрезовЗанятостиПозицийШтатногоРасписания(Движения, ИсключаемыеРегистраторы);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗанятостьПозицийШтатногоРасписания",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ВидыЗанятостиПозиции = Новый Массив;
	ВидыЗанятостиПозиции.Добавить(Перечисления.ВидыЗанятостиПозицийШтатногоРасписания.Занята);
	ВидыЗанятостиПозиции.Добавить(Перечисления.ВидыЗанятостиПозицийШтатногоРасписания.Совмещена);
	ВидыЗанятостиПозиции.Добавить(Перечисления.ВидыЗанятостиПозицийШтатногоРасписания.Подработка);
	
	Запрос.УстановитьПараметр("ВидыЗанятостиПозиции", ВидыЗанятостиПозиции);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьПозиций.Период КАК Период,
		|	ЗанятостьПозиций.Сотрудник КАК Сотрудник,
		|	ЗанятостьПозиций.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗанятостьПозиций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗанятостьПозиций.ДокументОснование КАК ДокументОснование,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна) КАК ВидЗанятостиПозиции,
		|	ЗанятостьПозиций.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятостьПозиций.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник
		|ИЗ
		|	ВТЗанятостьПозицийШтатногоРасписанияСрезПоследних КАК ЗанятостьПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеСобытия КАК КадровыеСобытия
		|		ПО ЗанятостьПозиций.Сотрудник.ГоловнойСотрудник = КадровыеСобытия.Сотрудник
		|ГДЕ
		|	ЗанятостьПозиций.ВидЗанятостиПозиции В(&ВидыЗанятостиПозиции)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗанятостьПозиций.Период,
		|	ЗанятостьПозиций.Сотрудник,
		|	ЗанятостьПозиций.ГоловнаяОрганизация,
		|	ЗанятостьПозиций.ФизическоеЛицо,
		|	ЗанятостьПозиций.ДокументОснование,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна),
		|	ЗанятостьПозиций.КоличествоСтавок,
		|	ЗанятостьПозиций.ЗамещаемыйСотрудник
		|ИЗ
		|	ВТЗанятостьПозицийШтатногоРасписанияСрезПоследних КАК ЗанятостьПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеСобытия КАК КадровыеСобытия
		|		ПО ЗанятостьПозиций.Сотрудник.ГоловнойСотрудник = КадровыеСобытия.Сотрудник
		|ГДЕ
		|	ЗанятостьПозиций.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|	И КОНЕЦПЕРИОДА(ЗанятостьПозиций.ПланируемаяДатаЗавершения, ДЕНЬ) >= ЗанятостьПозиций.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗанятостьПозиций.Период,
		|	ЗанятостьПозиций.Сотрудник,
		|	ЗанятостьПозиций.ГоловнаяОрганизация,
		|	ЗанятостьПозиций.ФизическоеЛицо,
		|	ЗанятостьПозиций.ДокументОснование,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна),
		|	ЗанятостьПозиций.КоличествоСтавок,
		|	ЗанятостьПозиций.ЗамещаемыйСотрудник
		|ИЗ
		|	ВТЗанятостьПозицийШтатногоРасписанияСрезПоследних КАК ЗанятостьПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеСобытия КАК КадровыеСобытия
		|		ПО ЗанятостьПозиций.Сотрудник.ГоловнойСотрудник = КадровыеСобытия.Сотрудник
		|ГДЕ
		|	ЗанятостьПозиций.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|	И КОНЕЦПЕРИОДА(ЗанятостьПозиций.ПериодВозвратногоСобытия, ДЕНЬ) >= ЗанятостьПозиций.Период";
	
	СформироватьДвиженияЗанятостьПозицийШтатногоРасписания(Движения, Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры

Процедура СформироватьДвиженияЗанятостьПозицийШтатногоРасписания(Движения, ЗанятостьПозицийШтатногоРасписания, РегистраторОбъект = Неопределено) Экспорт
	
	ВремяРегистрацииДокумента = Неопределено;
	ТребуетсяПервичнаяЗаписьДвижений = ЗанятостьПозицийШтатногоРасписания.Колонки.Найти("ТребуетсяПервичнаяЗапись") <> Неопределено;
	Если ТребуетсяПервичнаяЗаписьДвижений Тогда
		
		Движения.ЗанятостьПозицийШтатногоРасписания.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
		
		Если ВремяРегистрацииДокумента = Неопределено Тогда 
			ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(РегистраторОбъект.Ссылка, ЗанятостьПозицийШтатногоРасписания);
		КонецЕсли;
		
		Движения.ЗанятостьПозицийШтатногоРасписания.ДополнительныеСвойства.Вставить("НеСдвигатьПериодЗаписей", Истина);
		
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ЗанятостьПозицийШтатногоРасписания Цикл
		
		Запись = Движения.ЗанятостьПозицийШтатногоРасписания.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаДвижений);
		
		Если ТребуетсяПервичнаяЗаписьДвижений Тогда
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.Период);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				Запись.Период = ВремяРегистрацииСотрудников.Получить(Запись.Сотрудник) + 1;
			КонецЕсли;
			
			Если СтрокаДвижений.ТребуетсяПервичнаяЗапись И ЗначениеЗаполнено(Запись.ДействуетДо) Тогда
				
				ПервичнаяЗапись = Движения.ЗанятостьПозицийШтатногоРасписания.Добавить();
				ЗаполнитьЗначенияСвойств(ПервичнаяЗапись, СтрокаДвижений);
				ПервичнаяЗапись.Период = Запись.Период - 1;
				ПервичнаяЗапись.ВидЗанятостиПозиции = Перечисления.ВидыЗанятостиПозицийШтатногоРасписания.Занята;
				ПервичнаяЗапись.ЗамещаемыйСотрудник = Справочники.Сотрудники.ПустаяСсылка();
				ПервичнаяЗапись.ДействуетДо = '00010101';
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.ЗанятостьПозицийШтатногоРасписания.Количество() > 0 Тогда
		Движения.ЗанятостьПозицийШтатногоРасписания.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаЗначенийСотрудникиПериоды() Экспорт
	
	СотрудникиПериоды = Новый ТаблицаЗначений;
	СотрудникиПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиПериоды.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	СотрудникиПериоды.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат СотрудникиПериоды;
	
КонецФункции

Функция ТаблицаЗначенийСотрудникиПериоды(Сотрудники, ДатаНачала, ДатаОкончания = '00010101') Экспорт
	
	СотрудникиПериоды = ПустаяТаблицаЗначенийСотрудникиПериоды();
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		СтрокаСотрудника = СотрудникиПериоды.Добавить();
		СтрокаСотрудника.Сотрудник = Сотрудники;
		СтрокаСотрудника.ДатаНачала = ДатаНачала;
		СтрокаСотрудника.ДатаОкончания = ДатаОкончания;
		
	Иначе
		
		Для Каждого Сотрудник Из Сотрудники Цикл
			
			СтрокаСотрудника = СотрудникиПериоды.Добавить();
			СтрокаСотрудника.Сотрудник = Сотрудник;
			СтрокаСотрудника.ДатаНачала = ДатаНачала;
			СтрокаСотрудника.ДатаОкончания = ДатаОкончания;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СотрудникиПериоды;
	
КонецФункции

Функция ПараметрыПостроенияСрезовЗанятостиПозицийШтатногоРасписания(Движения, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	Регистратор = Движения.ЗанятостьПозицийШтатногоРасписания.Отбор.Регистратор.Значение;
	
	Если ИсключаемыеРегистраторы = Неопределено Тогда
		ИсключаемыеСсылки = Регистратор;
	Иначе
		
		Если ТипЗнч(ИсключаемыеРегистраторы) = Тип("Массив") Тогда
			ИсключаемыеСсылки = ИсключаемыеРегистраторы;
		Иначе
			ИсключаемыеСсылки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыеРегистраторы);
		КонецЕсли;
		
		Если ИсключаемыеСсылки.Найти(Регистратор) = Неопределено Тогда
			ИсключаемыеСсылки.Добавить(Регистратор);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеСсылки);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция ТаблицаСотрудникиДатыСобытия(Сотрудники, ДатаСобытия) Экспорт
	
	СотрудникиДатыСобытия = Новый ТаблицаЗначений;
	СотрудникиДатыСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДатыСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		СтрокаСотрудников = СотрудникиДатыСобытия.Добавить();
		СтрокаСотрудников.Сотрудник = Сотрудники;
		СтрокаСотрудников.ДатаСобытия = ДатаСобытия;
		
	Иначе
		
		Для Каждого Сотрудник Из Сотрудники Цикл
			
			СтрокаСотрудников = СотрудникиДатыСобытия.Добавить();
			СтрокаСотрудников.Сотрудник = Сотрудник;
			СтрокаСотрудников.ДатаСобытия = ДатаСобытия;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СотрудникиДатыСобытия;
	
КонецФункции

// Создает ВТ со списком документов-отсутствий по сотрудникам в указанном периоде.
// Получаются все отсутствия период которых пересекается с указанным периодом.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - приемник создаваемой временной таблицы
//  Сотрудники				 - массив - сотрудники, отсутствия которых надо получить
//  НачалоПериода			 - дата - начало периода получения отсутствий
//  ОкончаниеПериода		 - дата - окончания периода получения отсутствий 
//  ТолькоРазрешенные		 - булево - по умолчанию ИСТИНА.
//
Процедура СоздатьВТОтсутствияСотрудниковВПериоде(МенеджерВременныхТаблиц, Сотрудники, НачалоПериода, ОкончаниеПериода, ТолькоРазрешенные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Командировка.Ссылка,
		|	Командировка.Организация,
		|	Командировка.Сотрудник,
		|	Командировка.ДатаНачала,
		|	Командировка.ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствияСотрудниковВПериодеПредварительно
		|ИЗ
		|	Документ.Командировка КАК Командировка
		|ГДЕ
		|	Командировка.Сотрудник В(&Сотрудники)
		|	И (Командировка.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ Командировка.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ Командировка.ДатаНачала И Командировка.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ Командировка.ДатаНачала И Командировка.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	Отпуск.Организация,
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаПериодаОтсутствия,
		|	Отпуск.ДатаОкончанияПериодаОтсутствия
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Сотрудник В(&Сотрудники)
		|	И (Отпуск.ДатаНачалаПериодаОтсутствия МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ Отпуск.ДатаОкончанияПериодаОтсутствия МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ Отпуск.ДатаНачалаПериодаОтсутствия И Отпуск.ДатаОкончанияПериодаОтсутствия
		|			ИЛИ &ОкончаниеПериода МЕЖДУ Отпуск.ДатаНачалаПериодаОтсутствия И Отпуск.ДатаОкончанияПериодаОтсутствия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.Сотрудник,
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала,
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплатыСписком.Сотрудники КАК ОтпускБезСохраненияОплатыСпискомСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплатыСписком КАК ОтпускБезСохраненияОплаты
		|		ПО ОтпускБезСохраненияОплатыСпискомСотрудники.Ссылка = ОтпускБезСохраненияОплаты.Ссылка
		|ГДЕ
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.Сотрудник В(&Сотрудники)
		|	И (ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала И ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала И ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Сотрудник В(&Сотрудники)
		|	И (ОтпускБезСохраненияОплаты.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ ОтпускБезСохраненияОплаты.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ ОтпускБезСохраненияОплаты.ДатаНачала И ОтпускБезСохраненияОплаты.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ ОтпускБезСохраненияОплаты.ДатаНачала И ОтпускБезСохраненияОплаты.ДатаОкончания)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТОтсутствияСотрудниковВПериодеПредварительно", "Сотрудник,ДатаНачала");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, ТолькоРазрешенные, "Должность,ДолжностьПоШтатномуРасписанию");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтсутствияСотрудниковВПериодеПредварительно.Ссылка,
		|	ОтсутствияСотрудниковВПериодеПредварительно.Организация,
		|	ОтсутствияСотрудниковВПериодеПредварительно.Сотрудник,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	ОтсутствияСотрудниковВПериодеПредварительно.ДатаНачала,
		|	ОтсутствияСотрудниковВПериодеПредварительно.ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствияСотрудниковВПериоде
		|ИЗ
		|	ВТОтсутствияСотрудниковВПериодеПредварительно КАК ОтсутствияСотрудниковВПериодеПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ОтсутствияСотрудниковВПериодеПредварительно.ДатаНачала = КадровыеДанныеСотрудников.Период
		|			И ОтсутствияСотрудниковВПериодеПредварительно.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыеДанныеСотрудников.Должность", "КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает массив физических лиц с которыми заключено более одного
// договора (трудового или ГПХ).
//
// Параметры:
//	Организация						- СправочникСсылка.Организации
//	НачалоПериода					- Дата
//	ОкончаниеПериода				- Дата
//	СписокФизическихЛиц				- Массив элементов СправочникСсылка.ФизическиеЛица
//	РаботникиПоДоговорамГПХ			- Булево, в результате будут учтены действующие договоры ГПХ
//	ОтбиратьПоГоловнойОрганизации	- Булево, поиск договоров будет осуществляться в рамках головной организации.
//
// Возвращаемое значение:
//	Массив элементов СправочникСсылка.ФизическиеЛица.
//
Функция ФизическиеЛицаСНесколькимиДоговорами(Организация, НачалоПериода, ОкончаниеПериода = '00010101', СписокФизическихЛиц = Неопределено, РаботникиПоДоговорамГПХ = Истина, ОтбиратьПоГоловнойОрганизации = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = ОтбиратьПоГоловнойОрганизации;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ?(ОкончаниеПериода = '00010101', НачалоПериода, ОкончаниеПериода);
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	СотрудникиОрганизации.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиОрганизации.ФизическоеЛицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СотрудникиОрганизации.Сотрудник) > 1";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции

Функция НомерСледующегоТрудовогоДоговора(Организация, НомераДоговоровПоГодам, ГодНомера) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ГодНомера", ГодНомера);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ГОД(ОсновныеДанныеКонтрактаДоговораСотрудника.ДатаДоговораКонтракта)) КАК ГодНомера,
		|	МАКСИМУМ(ОсновныеДанныеКонтрактаДоговораСотрудника.НомерДоговораКонтракта) КАК НомерДоговораКонтракта
		|ИЗ
		|	РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ОсновныеДанныеКонтрактаДоговораСотрудника.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
		|		ГДЕ
		|			ОсновныеДанныеКонтрактаДоговораСотрудника.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|			И ОсновныеДанныеКонтрактаДоговораСотрудника.НомерДоговораКонтракта <> """"
		|			И ГОД(ОсновныеДанныеКонтрактаДоговораСотрудника.ДатаДоговораКонтракта) <= &ГодНомера) КАК ПоследниеПериоды
		|		ПО ОсновныеДанныеКонтрактаДоговораСотрудника.Период = ПоследниеПериоды.Период
		|ГДЕ
		|	ОсновныеДанныеКонтрактаДоговораСотрудника.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ГОД(ОсновныеДанныеКонтрактаДоговораСотрудника.ДатаДоговораКонтракта) <= &ГодНомера";
	
	НомерЭтогоГода = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		НомерДоговораКонтракта = "";
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НомерДоговораКонтракта = Выборка.НомерДоговораКонтракта;
		Если Не ЗначениеЗаполнено(НомерДоговораКонтракта) Тогда
			НомерДоговораКонтракта = "";
		КонецЕсли;
		
		НомерЭтогоГода = (ГодНомера = Выборка.ГодНомера);
		
	КонецЕсли;
	
	Если НомераДоговоровПоГодам <> Неопределено Тогда
		
		НомераДоговоровТекущегоДокумента = НомераДоговоровПоГодам.Получить(ГодНомера);
		Если НомераДоговоровТекущегоДокумента <> Неопределено Тогда
			
			Для каждого НомерДоговораДокумента Из НомераДоговоровТекущегоДокумента Цикл
				
				Если НомерДоговораКонтракта < НомерДоговораДокумента Тогда
					НомерДоговораКонтракта = НомерДоговораДокумента;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Префикс = "";
	Суффикс = "";
	Если ПустаяСтрока(НомерДоговораКонтракта) Тогда
		Номер = "00000";
	Иначе
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерДоговораКонтракта) Тогда
			
			Номер = "";
			
			ДлинаНомера = СтрДлина(НомерДоговораКонтракта);
			
			ЧастиНомера = Новый Массив;
			
			СимволНомера = Сред(НомерДоговораКонтракта, 1, 1);
			ЧисловаяЧасть = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволНомера);
			
			ОписаниеЧастиНомера = Новый Структура("ЧастьНомера,ЧисловаяЧасть", СимволНомера, ЧисловаяЧасть);
			ЧастиНомера.Добавить(ОписаниеЧастиНомера);
			
			Для НомерСимвола = 2 По ДлинаНомера Цикл
				
				СимволНомера = Сред(НомерДоговораКонтракта, НомерСимвола, 1);
				ЧисловаяЧасть = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволНомера);
				Если ОписаниеЧастиНомера.ЧисловаяЧасть <> ЧисловаяЧасть Тогда
					ОписаниеЧастиНомера = Новый Структура("ЧастьНомера,ЧисловаяЧасть", СимволНомера, ЧисловаяЧасть);
					ЧастиНомера.Добавить(ОписаниеЧастиНомера);
				Иначе
					ОписаниеЧастиНомера.ЧастьНомера = ОписаниеЧастиНомера.ЧастьНомера + СимволНомера;
				КонецЕсли;
				
			КонецЦикла;
			
			ИндексСамойДлиннойЧисловойЧасти = Неопределено;
			ДлинаСамойДлиннойЧасти = 0;
			Для ИндексЧастиНомера = 0 По ЧастиНомера.Количество() - 1 Цикл
				
				ОписаниеЧастиНомера = ЧастиНомера[ИндексЧастиНомера];
				Если ОписаниеЧастиНомера.ЧисловаяЧасть Тогда
					
					ДлинаЧастиНомера = СтрДлина(ОписаниеЧастиНомера.ЧастьНомера);
					Если ИндексСамойДлиннойЧисловойЧасти = Неопределено
						Или ДлинаСамойДлиннойЧасти <= ДлинаЧастиНомера Тогда
						
						ИндексСамойДлиннойЧисловойЧасти = ИндексЧастиНомера;
						ДлинаСамойДлиннойЧасти = ДлинаЧастиНомера;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИндексСамойДлиннойЧисловойЧасти = Неопределено Тогда
				Префикс = НомерДоговораКонтракта;
				Номер = "";
			Иначе
				
				Для ИндексЧастиНомера = 0 По ИндексСамойДлиннойЧисловойЧасти - 1 Цикл
					Префикс = Префикс + ЧастиНомера[ИндексЧастиНомера].ЧастьНомера;
				КонецЦикла;
				
				Номер = ЧастиНомера[ИндексСамойДлиннойЧисловойЧасти].ЧастьНомера;
				
				Для ИндексЧастиНомера = ИндексСамойДлиннойЧисловойЧасти + 1 По ЧастиНомера.Количество() - 1 Цикл
					Суффикс = Суффикс + ЧастиНомера[ИндексЧастиНомера].ЧастьНомера;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Номер = НомерДоговораКонтракта;
		КонецЕсли;
		
		Если Не НомерЭтогоГода Тогда
			Если ПустаяСтрока(Номер) Тогда
				Номер = "00000";
			Иначе
				Номер = Формат(0, "ЧЦ=" + СтрДлина(Номер) + "; ЧРГ=; ЧН=; ЧВН=; ЧГ=");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрДлина(Номер) > 0 И Лев(Номер, 1) = "0" Тогда
		ФорматнаяСтрока = "ЧЦ=" + СтрДлина(Номер) + "; ЧВН=; ЧГ=";
	Иначе
		ФорматнаяСтрока = "ЧГ=";
	КонецЕсли; 
	
	Возврат Префикс + Формат(Число(Номер) + 1, ФорматнаяСтрока) + Суффикс;
	
КонецФункции

Процедура ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.КонтролироватьУникальностьТабельныхНомеров
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПроверитьУникальность = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи().КонтролироватьУникальностьТабельныхНомеров;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПроверитьУникальность = Выборка.КонтролироватьУникальностьТабельныхНомеров;
		
	КонецЕсли;
	
	Если ПроверитьУникальность Тогда
		КадровыйУчетБазовый.ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник);
	КонецЕсли; 
	
КонецПроцедуры

Функция ПустаяТаблицаКадровыхСобытийПриУвольнении() Экспорт
	
	КадровыеСобытия = Новый ТаблицаЗначений;
	КадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	КадровыеСобытия.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	КадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КадровыеСобытия.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеСобытия.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КадровыеСобытия.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	КадровыеСобытия.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
	КадровыеСобытия.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		КадровыеСобытия.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
		КадровыеСобытия.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция ОсновныеСотрудникиВнутреннихСовместителей(Организация, ПроверяемыеДаты, ИсключаемыеРегистраторы) Экспорт
	
	ОсновныеСотрудникиСовместителей = ПустаяТаблицаКадровыхСобытийПриУвольнении();
	
	СотрудникиДокумента = Новый Массив;
	Для каждого ОписаниеДаты Из ПроверяемыеДаты Цикл
		
		Если ТипЗнч(ОписаниеДаты.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
			СотрудникиДокумента.Добавить(ОписаниеДаты.Значение);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОписаниеДаты.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СотрудникиДокумента.Количество() > 0 Тогда
		
		Для каждого ОписаниеПроверяемойДаты Из ПроверяемыеДаты Цикл
			
			ДатаУвольнения = ОписаниеПроверяемойДаты.Ключ;
			Если ТипЗнч(ОписаниеДаты.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
				Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеДаты.Значение);
			Иначе
				Сотрудники = ОписаниеПроверяемойДаты.Значение;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Отборы = Новый Массив;
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				Отборы, "ФизическоеЛицо", "В", КадровыйУчет.ФизическиеЛицаСотрудников(Сотрудники));
			
			КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
				Запрос.МенеджерВременныхТаблиц, Ложь, Отборы, "ДатаУвольнения");
			
			Запрос.УстановитьПараметр("ДатаУвольнения", ДатаУвольнения);
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
				|ИЗ
				|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
				|			И (Сотрудники.Ссылка В (&Сотрудники))
				|			И ТекущиеКадровыеДанныеСотрудников.Сотрудник <> Сотрудники.Ссылка
				|ГДЕ
				|	(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
				|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > &ДатаУвольнения)";
			
			ФизическиеЛицаСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
			Если ФизическиеЛицаСотрудников.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
				ПараметрыПолученияСотрудников.Организация = Организация;
				ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
				ПараметрыПолученияСотрудников.НачалоПериода = КонецДня(ДатаУвольнения) + 1;
				ПараметрыПолученияСотрудников.ОкончаниеПериода = ПараметрыПолученияСотрудников.НачалоПериода;
				ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛицаСотрудников;
				ПараметрыПолученияСотрудников.КадровыеДанные = "ГоловнаяОрганизация,ДолжностьПоШтатномуРасписанию,ВидЗанятости,ВидДоговора,КоличествоСтавок,ДатаПриема";
				ПараметрыПолученияСотрудников.ИсключаемыйРегистратор = ИсключаемыеРегистраторы;
				
				КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
				
				Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
					|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
					|ПОМЕСТИТЬ ВТУвольняемыеОсновныеСотрудники
					|ИЗ
					|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|ГДЕ
					|	СотрудникиОрганизации.Сотрудник В(&СотрудникиДокумента)
					|	И СотрудникиОрганизации.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
					|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
					|ПОМЕСТИТЬ ВТДругиеОсновныеСотрудники
					|ИЗ
					|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|ГДЕ
					|	НЕ СотрудникиОрганизации.Сотрудник В (&СотрудникиДокумента)
					|	И СотрудникиОрганизации.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
					|	СотрудникиОрганизации.КоличествоСтавок КАК КоличествоСтавок,
					|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
					|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема
					|ПОМЕСТИТЬ ВТВнутренниеСовместителиОсновныхСотрудников
					|ИЗ
					|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУвольняемыеОсновныеСотрудники КАК УвольняемыеОсновныеСотрудники
					|		ПО СотрудникиОрганизации.ФизическоеЛицо = УвольняемыеОсновныеСотрудники.ФизическоеЛицо
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДругиеОсновныеСотрудники КАК ДругиеОсновныеСотрудники
					|		ПО СотрудникиОрганизации.ФизическоеЛицо = ДругиеОсновныеСотрудники.ФизическоеЛицо
					|ГДЕ
					|	НЕ СотрудникиОрганизации.Сотрудник В (&СотрудникиДокумента)
					|	И ДругиеОсновныеСотрудники.Сотрудник ЕСТЬ NULL
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВнутренниеСовместители.ФизическоеЛицо КАК ФизическоеЛицо,
					|	МАКСИМУМ(ВнутренниеСовместители.КоличествоСтавок) КАК КоличествоСтавок
					|ПОМЕСТИТЬ ВТВнутренниеСовместителиСМаксимальнымКоличествомСтавок
					|ИЗ
					|	ВТВнутренниеСовместителиОсновныхСотрудников КАК ВнутренниеСовместители
					|
					|СГРУППИРОВАТЬ ПО
					|	ВнутренниеСовместители.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВнутренниеСовместители.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ВнутренниеСовместители.КоличествоСтавок КАК КоличествоСтавок,
					|	МИНИМУМ(ВнутренниеСовместители.ДатаПриема) КАК ДатаПриема
					|ПОМЕСТИТЬ ВТВнутренниеСовместителиСДатойПриема
					|ИЗ
					|	ВТВнутренниеСовместителиОсновныхСотрудников КАК ВнутренниеСовместители
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВнутренниеСовместителиСМаксимальнымКоличествомСтавок КАК ВнутренниеСовместителиСМаксимальнымКоличествомСтавок
					|		ПО ВнутренниеСовместители.ФизическоеЛицо = ВнутренниеСовместителиСМаксимальнымКоличествомСтавок.ФизическоеЛицо
					|			И ВнутренниеСовместители.КоличествоСтавок = ВнутренниеСовместителиСМаксимальнымКоличествомСтавок.КоличествоСтавок
					|
					|СГРУППИРОВАТЬ ПО
					|	ВнутренниеСовместители.ФизическоеЛицо,
					|	ВнутренниеСовместители.КоличествоСтавок
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МАКСИМУМ(ВнутренниеСовместители.Сотрудник) КАК Сотрудник,
					|	ВнутренниеСовместители.ФизическоеЛицо КАК ФизическоеЛицо
					|ПОМЕСТИТЬ ВТОсновныеСотрудникиВнутреннихСовместителей
					|ИЗ
					|	ВТВнутренниеСовместителиОсновныхСотрудников КАК ВнутренниеСовместители
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВнутренниеСовместителиСДатойПриема КАК ВнутренниеСовместителиСДатойПриема
					|		ПО ВнутренниеСовместители.ФизическоеЛицо = ВнутренниеСовместителиСДатойПриема.ФизическоеЛицо
					|			И ВнутренниеСовместители.КоличествоСтавок = ВнутренниеСовместителиСДатойПриема.КоличествоСтавок
					|			И ВнутренниеСовместители.ДатаПриема = ВнутренниеСовместителиСДатойПриема.ДатаПриема
					|
					|СГРУППИРОВАТЬ ПО
					|	ВнутренниеСовместители.ФизическоеЛицо
					|
					|ИМЕЮЩИЕ
					|	НЕ МАКСИМУМ(ВнутренниеСовместители.Сотрудник) ЕСТЬ NULL
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ОсновныеСотрудникиВнутреннихСовместителей.Сотрудник КАК Сотрудник,
					|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
					|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
					|	СотрудникиОрганизации.ВидДоговора КАК ВидДоговора,
					|	СотрудникиОрганизации.КоличествоСтавок КАК КоличествоСтавок,
					|	СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию КАК Позиция
					|ИЗ
					|	ВТОсновныеСотрудникиВнутреннихСовместителей КАК ОсновныеСотрудникиВнутреннихСовместителей
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|		ПО ОсновныеСотрудникиВнутреннихСовместителей.Сотрудник = СотрудникиОрганизации.Сотрудник";
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					ДатаСобытия = КонецДня(ДатаУвольнения) + 1;
					
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						НоваСтрокаОсновныеСотрудникиСовместителей = ОсновныеСотрудникиСовместителей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваСтрокаОсновныеСотрудникиСовместителей, Выборка);
						
						НоваСтрокаОсновныеСотрудникиСовместителей.ДатаСобытия = ДатаСобытия;
						НоваСтрокаОсновныеСотрудникиСовместителей.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение;
						НоваСтрокаОсновныеСотрудникиСовместителей.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство;
						
						НоваСтрокаОсновныеСотрудникиСовместителей.Период = НоваСтрокаОсновныеСотрудникиСовместителей.ДатаСобытия;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОсновныеСотрудникиСовместителей;
	
КонецФункции

Функция ВнутренниеСовместителиОсновныхСотрудников(КоллекцияСотрудников, Организация, ИсключаемыеРегистраторы) Экспорт
	
	ТаблицаДвижений = ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей(КоллекцияСотрудников, Организация, ИсключаемыеРегистраторы);
	Возврат ТаблицаДвижений.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей(КоллекцияСотрудников, Организация, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДвижений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДвижений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДвижений.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	
	ВсеСотрудникиКоллекции = Новый Массив;
	
	ОсновныеСотрудники = Новый ТаблицаЗначений;
	ОсновныеСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОсновныеСотрудники.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого ЭлементКоллекции Из КоллекцияСотрудников Цикл
		
		ВсеСотрудникиКоллекции.Добавить(ЭлементКоллекции.Сотрудник);
		Если ЭлементКоллекции.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
			
			СтрокаСотрудника = ОсновныеСотрудники.Добавить();
			СтрокаСотрудника.Сотрудник = ЭлементКоллекции.Сотрудник;
			СтрокаСотрудника.Период = ЭлементКоллекции.ДатаСобытия;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОсновныеСотрудники", ОсновныеСотрудники);
	Запрос.УстановитьПараметр("ВсеСотрудникиКоллекции", ВсеСотрудникиКоллекции);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеСотрудники.Период КАК Период,
		|	ОсновныеСотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТОсновныеСотрудники
		|ИЗ
		|	&ОсновныеСотрудники КАК ОсновныеСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеСотрудники.Период КАК Период,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТОсновныеСотрудники КАК ОсновныеСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (ВЫРАЗИТЬ(ОсновныеСотрудники.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|ГДЕ
		|	НЕ Сотрудники.Ссылка В (&ВсеСотрудникиКоллекции)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Сотрудник", "НЕ В", ВсеСотрудникиКоллекции);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
		
		Если ЗначениеЗаполнено(ИсключаемыеРегистраторы) Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ВидыЗанятостиСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФизическиеЛицаПериоды", "ФизическоеЛицо"),
			ПараметрыПостроения);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФизическиеЛицаПериоды", "ФизическоеЛицо"),
			ПараметрыПостроения);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВидыЗанятостиСотрудников.Период КАК Период,
			|	ВидыЗанятостиСотрудников.Сотрудник КАК Сотрудник,
			|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство) КАК ВидЗанятости
			|ИЗ
			|	ВТВидыЗанятостиСотрудниковСрезПоследних КАК ВидыЗанятостиСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудников
			|		ПО ВидыЗанятостиСотрудников.Период = КадроваяИсторияСотрудников.Период
			|			И ВидыЗанятостиСотрудников.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|	И ВидыЗанятостиСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
			|	И КадроваяИсторияСотрудников.ПериодЗаписи < ВидыЗанятостиСотрудников.Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ДополнитьДанныеДляРегистрацииВУчетеСтажейПФРСведениямиВнутреннихСовместителей(ДанныеДляРегистрацииВУчете, ВидыЗанятостиВнутреннихСовместителей) Экспорт
	
	Если ВидыЗанятостиВнутреннихСовместителей <> Неопределено
		И ВидыЗанятостиВнутреннихСовместителей.Количество() > 0 Тогда
		
		ВсеВидыЗанятостиВнутреннихСовместителей = Неопределено;
		Для Каждого ВидыЗанятостиВнутреннихСовместителейСсылки Из ВидыЗанятостиВнутреннихСовместителей Цикл
			
			Если ВсеВидыЗанятостиВнутреннихСовместителей = Неопределено Тогда
				
				ВсеВидыЗанятостиВнутреннихСовместителей = ВидыЗанятостиВнутреннихСовместителейСсылки.Значение;
				ВсеВидыЗанятостиВнутреннихСовместителей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ВосстановлениеВДолжности,ДокументСсылка.ПриемНаРаботу,ДокументСсылка.ПриемНаРаботуСписком"));
				ВсеВидыЗанятостиВнутреннихСовместителей.ЗаполнитьЗначения(ВидыЗанятостиВнутреннихСовместителейСсылки.Ключ, "Ссылка");
				
			Иначе
				
				Для Каждого СтрокаВнутреннихСовместителей Из ВидыЗанятостиВнутреннихСовместителейСсылки.Значение Цикл
					
					НоваяСтрока = ВсеВидыЗанятостиВнутреннихСовместителей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВнутреннихСовместителей);
					НоваяСтрока.Ссылка = ВидыЗанятостиВнутреннихСовместителейСсылки.Ключ;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаСовместителей Из ВсеВидыЗанятостиВнутреннихСовместителей Цикл
			
			ДанныеДляРегистрацииВУчетеПоДокументу = ДанныеДляРегистрацииВУчете.Получить(СтрокаСовместителей.Ссылка);
			Если ДанныеДляРегистрацииВУчетеПоДокументу = Неопределено Тогда
				
				ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
				ДанныеДляРегистрацииВУчете.Вставить(СтрокаСовместителей.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
				
			КонецЕсли;
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = СтрокаСовместителей.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = СтрокаСовместителей.Период;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Перемещение;
			ОписаниеПериода.ВидЗанятости = СтрокаСовместителей.ВидЗанятости;
			
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеОСтажахПФР(ДанныеДляРегистрацииВУчете, Ссылка, ДанныеСотрудника) Экспорт
	
	ДанныеДляРегистрацииВУчетеПоДокументу = ДанныеДляРегистрацииВУчете.Получить(Ссылка);
	Если ДанныеДляРегистрацииВУчетеПоДокументу = Неопределено Тогда
		
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
	КонецЕсли;
	
	ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
	ОписаниеПериода.Сотрудник = ДанныеСотрудника.Сотрудник;
	ОписаниеПериода.ДатаНачалаПериода = ДанныеСотрудника.ДатаСобытия;
	ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Работа;
	ОписаниеПериода.ВидЗанятости = ДанныеСотрудника.ВидЗанятости;
	
	РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
	
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Организация", ДанныеСотрудника.Организация);
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Подразделение", ДанныеСотрудника.Подразделение);
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Территория", ДанныеСотрудника.Территория);
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Должность", ДанныеСотрудника.Должность);
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ДолжностьПоШтатномуРасписанию", ДанныеСотрудника.ДолжностьПоШтатномуРасписанию);
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ГрафикРаботы", ДанныеСотрудника.ГрафикРаботы);
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "КоличествоСтавок", ДанныеСотрудника.КоличествоСтавок);
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда 
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.УстановитьЗначениеРегистрируемогоРабочегоМеста(РегистрируемыйПериод, ДанныеСотрудника);
	КонецЕсли;
	
КонецПроцедуры

Функция ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Экспорт
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ПолныеПрава", , Ложь);
	
КонецФункции

Процедура ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Экспорт
	
	Если Не ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для создания';
								|en = 'Insufficient rights to create'");
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаПравилоФормированияПредставленияЭлементовСправочникаСотрудники() Экспорт
	
	ПараметрыСеанса.ПравилоФормированияПредставленияЭлементовСправочникаСотрудники = КадровыйУчет.НастройкиКадровогоУчета().ПравилоФормированияПредставленияЭлементовСправочникаСотрудники;
	
КонецПроцедуры

Процедура ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеРеестраОтпусков, Отказ) Экспорт
	
	Если ДанныеРеестраОтпусков.Количество() > 0 Тогда
		
		Движения.РеестрОтпусков.Записывать = Истина;
		
		Для Каждого СтрокаТаблицы Из ДанныеРеестраОтпусков Цикл
			
			НоваяСтрока = Движения.РеестрОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаРеестраОтпусков() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Период");
	Таблица.Колонки.Добавить("Сотрудник");
	Таблица.Колонки.Добавить("ФизическоеЛицо");
	Таблица.Колонки.Добавить("ДокументОснование");
	Таблица.Колонки.Добавить("Номер");
	Таблица.Колонки.Добавить("ВидОтпуска");
	Таблица.Колонки.Добавить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	Таблица.Колонки.Добавить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Таблица.Колонки.Добавить("КоличествоДнейОтпуска");
	Таблица.Колонки.Добавить("ДатаНачалаПериодаОтсутствия");
	Таблица.Колонки.Добавить("ДатаОкончанияПериодаОтсутствия");
	Таблица.Колонки.Добавить("ВидДоговора");
	Таблица.Колонки.Добавить("Основание");
	
	Возврат Таблица;
	
КонецФункции

Функция ДатаПриемаФизическогоЛица(ФизическоеЛицо, ДатаСведений) Экспорт
	
	ДатаПриема = Неопределено;
	
	// Определение минимальной даты приема
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаСведений;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаСведений;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаПриема";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл
		
		Если ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) Тогда
			
			Если Не ЗначениеЗаполнено(ДатаПриема) Тогда
				ДатаПриема = ДанныеСотрудника.ДатаПриема;
			Иначе
				ДатаПриема = Мин(ДатаПриема, ДанныеСотрудника.ДатаПриема);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаПриема;
	
КонецФункции

Функция УчитыватьЗаработокПредыдущихСтрахователей(ФизическоеЛицо, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъединениеДокументов.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей
	|ИЗ
	|	(ВЫБРАТЬ
	|		БольничныйЛист.Дата КАК Дата,
	|		БольничныйЛист.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей
	|	ИЗ
	|		Документ.БольничныйЛист КАК БольничныйЛист
	|	ГДЕ
	|		БольничныйЛист.Организация = &Организация
	|		И БольничныйЛист.ФизическоеЛицо = &ФизическоеЛицо
	|		И БольничныйЛист.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтпускПоУходуЗаРебенком.Дата,
	|		ОтпускПоУходуЗаРебенком.УчитыватьЗаработокПредыдущихСтрахователей
	|	ИЗ
	|		Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|	ГДЕ
	|		ОтпускПоУходуЗаРебенком.Организация = &Организация
	|		И ОтпускПоУходуЗаРебенком.Сотрудник = &ФизическоеЛицо
	|		И ОтпускПоУходуЗаРебенком.Проведен) КАК ОбъединениеДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъединениеДокументов.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчитыватьЗаработокПредыдущихСтрахователей;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных, ИсключаемыеПоля) Экспорт
	
	КадровыйУчетБазовый.ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных, ИсключаемыеПоля);
	
	// Северный стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СеверныйСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Северный.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СеверныйСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Северный.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СеверныйСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Северный.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Страховой стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтраховойСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Страховой.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтраховойСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Страховой.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтраховойСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Страховой.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Расширенный страховой стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РасширенныйСтраховойСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.РасширенныйСтраховой.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РасширенныйСтраховойСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.РасширенныйСтраховой.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РасширенныйСтраховойСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.РасширенныйСтраховой.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Прочий стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПрочийСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Прочий.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПрочийСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Прочий.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПрочийСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Прочий.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Педагогический стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПедагогическийСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Педагогический.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПедагогическийСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Педагогический.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПедагогическийСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Педагогический.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Общий стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбщийСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Общий.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбщийСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Общий.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбщийСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Общий.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Непрерывный стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "НепрерывныйСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Непрерывный.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "НепрерывныйСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Непрерывный.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "НепрерывныйСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.Непрерывный.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Научно - педагогический стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбщийНаучноПедагогическийСтажЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.НаучноПедагогический.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбщийНаучноПедагогическийСтажМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.НаучноПедагогический.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбщийНаучноПедагогическийСтажДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.НаучноПедагогический.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// За выслугу лет стаж
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтажНаНадбавкуЗаВыслугуЛетЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.ЗаВыслугуЛет.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтажНаНадбавкуЗаВыслугуЛетМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.ЗаВыслугуЛет.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтажНаНадбавкуЗаВыслугуЛетДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОСтажах.ЗаВыслугуЛет.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Ученые степени
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченаяСтепеньДатаПрисуждения";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченойСтепени.ДатаПрисуждения";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченаяСтепеньДиссертационныйСовет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченойСтепени.ДиссертационныйСовет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченаяСтепеньОрганизация";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченойСтепени.Организация";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченаяСтепеньОтрасльНауки";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ОтраслиНауки.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченойСтепени.ОтрасльНауки";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченаяСтепеньДипломСерияНомер";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченойСтепени.СерияНомер";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченаяСтепень";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.УченыеСтепени.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченойСтепени.УченаяСтепень";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Ученые звания
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченоеЗваниеДатаПрисвоения";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченомЗвании.ДатаПрисвоения";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченоеЗваниеАттестатНомер";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченомЗвании.Номер";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченоеЗваниеАттестатСерия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченомЗвании.Серия";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченоеЗваниеОрганизация";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченомЗвании.Организация";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченоеЗвание";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.УченыеЗвания.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченомЗвании.УченоеЗвание";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УченоеЗваниеСпециальность";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбУченомЗвании.Специальность";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Строковые сведения
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПолученныеОбразования";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.ПолученныеОбразования";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПовышениеКвалификации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.ПовышениеКвалификации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Переподготовка";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.Переподготовка";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Награды";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.Награды";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Документы";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.Документы";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ЗнанияЯзыков";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.ЗнанияЯзыков";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Профессии";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.Профессии";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Специальности";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.Специальности";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудоваяДеятельность";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.ТрудоваяДеятельность";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СоставСемьи";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.СоставСемьи";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных, ИсключаемыеПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		МодульМедицина.ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных, ИсключаемыеПоля);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ПутьКПолямЛичныхДанных, ИсключаемыеПоля) Экспорт
	
	КадровыйУчетБазовый.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ПутьКПолямЛичныхДанных, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ДолжностьПоШтатномуРасписанию";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ДолжностьПоШтатномуРасписанию";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидДоговора";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВидДоговора";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ГрафикРаботы";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ГрафикРаботы";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ГрафикРаботыПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ГрафикРаботыДатаРегистрации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СреднемесячноеЧислоЧасов";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ГрафикРаботы.СреднемесячноеЧислоЧасов";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СреднемесячноеЧислоДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ГрафикРаботы.СреднемесячноеЧислоДней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПКУ";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПКУ";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПКУПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ЗаголовокПоляСКД = НСтр("ru = 'ПКУ дата регистрации';
										|en = 'PQL registration date'");
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПКУДатаРегистрации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТарифнаяСетка";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТарифнаяСетка";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РазрядКатегория";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".РазрядКатегория";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РазрядКатегорияПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".РазрядКатегорияДатаРегистрации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Территория";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Территория";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТерриторияПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТерриторияДатаРегистрации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Состояние";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Состояние";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СостояниеПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СостояниеДатаИзменения";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПорядокРасчетаСтоимостиЕдиницыВремени";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПорядокРасчетаСтоимостиЕдиницыВремени";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПорядокРасчетаСтоимостиЕдиницыВремениПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПорядокРасчетаСтоимостиЕдиницыВремениДатаРегистрации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Выплата зарплаты
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "МестоВыплаты";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "НЕОПРЕДЕЛЕНО";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВыплатаЗарплаты.МестоВыплаты";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "НомерЛицевогоСчета";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВыплатаЗарплаты.НомерЛицевогоСчета";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидМестаВыплаты";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВыплатаЗарплаты.СпособВыплаты";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Сведения об оплате труда
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОсновноеНачисление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВыплатаЗарплаты.ОсновноеНачисление";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидСовокупнойТарифнойСтавки";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВыплатаЗарплаты.ВидСовокупнойТарифнойСтавки";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СовокупнаяТарифнаяСтавкаПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВыплатаЗарплаты.ДатаИзмененияСовокупнойТарифнойСтавки";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СовокупнаяТарифнаяСтавка";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВыплатаЗарплаты.РазмерСовокупнойТарифнойСтавки";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Трудовой договор
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидАктаГосоргана";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ВидАктаГосоргана";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ДатаНачала";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ДатаНачала";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорДатаОкончания";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ДатаОкончания";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ДатаДоговораКонтракта";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ДатаОформления";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ДолжностьПредставителяНанимателя";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ДолжностьПредставителяНанимателя";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ИныеУсловияДоговора";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ИныеУсловияДоговора";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "НомерДоговораКонтракта";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.Номер";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОборудованиеРабочегоМеста";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ОборудованиеРабочегоМеста";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОснованиеПредставителя";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ОснованиеПредставителя";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОснованиеСрочногоДоговора";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "НЕОПРЕДЕЛЕНО";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ОснованиеСрочногоДоговора";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПоступлениеНаСлужбуВпервые";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ИСТИНА";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ПоступлениеНаСлужбуВпервые";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПредставительНанимателя";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ПредставительНанимателя";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СезонныйДоговор";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЛОЖЬ";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.СезонныйДоговор";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СрокЗаключенияДоговора";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.СрокЗаключенияДоговора";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СрочныйДоговор";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЛОЖЬ";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.СрочныйДоговор";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорПриостановлен";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЛОЖЬ";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.Приостановлен";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорПриостановленПериод";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ПериодСведенийПриостановления";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорПриостановленПланируемаяДатаЗавершения";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ПланируемаяДатаЗавершенияПриостановления";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорПриостановленРегистратор";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "НЕОПРЕДЕЛЕНО";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.РегистраторПриостановления";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорПриостановленОснование";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ОснованияПриостановленияТрудовыхДоговоровКонтрактов.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ОснованияПриостановления";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорПриостановленНомерПриказа";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.НомерПриказаПриостановления";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ТрудовойДоговорПриостановленДатаПриказа";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ТрудовойДоговор.ДатаПриказаПриостановления";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Стаж работы на предприятии
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтажРаботыНаПредприятииЛет";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СтажРаботыНаПредприятии.Лет";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтажРаботыНаПредприятииМесяцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СтажРаботыНаПредприятии.Месяцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтажРаботыНаПредприятииДней";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СтажРаботыНаПредприятии.Дней";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОстаткиОтпусков.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		
		МодульИспытательныйСрокСотрудников = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		МодульИспытательныйСрокСотрудников.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
		
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		МодульАнализТекучестиПерсонала.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		МодульДистанционнаяРабота = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРабота");
		МодульДистанционнаяРабота.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		МодульРуководителиПодразделений = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		МодульРуководителиПодразделений.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля);
	КонецЕсли;
	
КонецПроцедуры

#Область КадровыеДанныеФизическихЛиц

// Сведения об ученых степенях.

Функция ДобавитьПолеСведенийОбУченыхСтепеняхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУченыхСтепеняхФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбУченыхСтепеняхФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУченыхСтепеняхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУченыхСтепеняхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени) КАК ДатаПрисужденияУченойСтепени
	|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисужденияУченыхСтепеней
	|ИЗ
	|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
	|		ПО ТаблицаОтборов.ФизическоеЛицо = ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
	|{ГДЕ
	|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо.* КАК ФизическоеЛицо}
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо,
	|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.НомерПоПорядку) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНомераСтрокУченыхСтепеней
	|ИЗ
	|	ВТМаксимальныеДатыПрисужденияУченыхСтепеней КАК МаксимальныеДатыПрисужденияУченыхСтепеней
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
	|		ПО МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо = ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
	|			И МаксимальныеДатыПрисужденияУченыхСтепеней.ДатаПрисужденияУченойСтепени = ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомераСтрокУченыхСтепеней.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛицаУченыеСтепени.УченаяСтепень КАК УченаяСтепень,
	|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени КАК УченаяСтепеньДатаПрисуждения,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаУченыеСтепени.УченаяСтепень.ОтрасльНауки <> ЗНАЧЕНИЕ(Справочник.ОтраслиНауки.ПустаяСсылка)
	|			ТОГДА ФизическиеЛицаУченыеСтепени.УченаяСтепень.ОтрасльНауки
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОтраслиНауки.ПустаяСсылка)
	|	КОНЕЦ КАК УченаяСтепеньОтрасльНауки,
	|	ФизическиеЛицаУченыеСтепени.ДиссертационныйСовет КАК УченаяСтепеньДиссертационныйСовет,
	|	ФизическиеЛицаУченыеСтепени.ДипломСерияНомер КАК УченаяСтепеньДипломСерияНомер,
	|	ФизическиеЛицаУченыеСтепени.ДипломВыданОрганизация КАК УченаяСтепеньОрганизация
	|ПОМЕСТИТЬ ВТПредварительноУченыеСтепени
	|ИЗ
	|	ВТНомераСтрокУченыхСтепеней КАК НомераСтрокУченыхСтепеней
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
	|		ПО (ФизическиеЛицаУченыеСтепени.ФизическоеЛицо = НомераСтрокУченыхСтепеней.ФизическоеЛицо)
	|			И (ФизическиеЛицаУченыеСтепени.НомерПоПорядку = НомераСтрокУченыхСтепеней.НомерСтроки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УченыеСтепени.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УченыеСтепени.УченаяСтепень КАК УченаяСтепень,
	|	УченыеСтепени.УченаяСтепеньДатаПрисуждения КАК УченаяСтепеньДатаПрисуждения,
	|	УченыеСтепени.УченаяСтепеньОтрасльНауки КАК УченаяСтепеньОтрасльНауки,
	|	УченыеСтепени.УченаяСтепеньДиссертационныйСовет КАК УченаяСтепеньДиссертационныйСовет,
	|	УченыеСтепени.УченаяСтепеньДипломСерияНомер КАК УченаяСтепеньДипломСерияНомер,
	|	УченыеСтепени.УченаяСтепеньОрганизация КАК УченаяСтепеньОрганизация
	|ПОМЕСТИТЬ ВТУченыеСтепениФизическихЛиц
	|ИЗ
	|	ВТПредварительноУченыеСтепени КАК УченыеСтепени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТМаксимальныеДатыПрисужденияУченыхСтепеней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНомераСтрокУченыхСтепеней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредварительноУченыеСтепени";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТУченыеСтепениФизическихЛиц КАК УченыеСтепени
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = УченыеСтепени.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТУченыеСтепениФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УченаяСтепень")
		Или ИмяПоля = ВРег("УченаяСтепеньОтрасльНауки")
		Или ИмяПоля = ВРег("УченаяСтепеньДатаПрисуждения")
		Или ИмяПоля = ВРег("УченаяСтепеньДиссертационныйСовет")
		Или ИмяПоля = ВРег("УченаяСтепеньДипломСерияНомер")
		Или ИмяПоля = ВРег("УченаяСтепеньОрганизация");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУченыхСтепеняхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УченаяСтепеньОтрасльНауки") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ОтрасльНауки";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДатаПрисуждения") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаПрисужденияУченойСтепени";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДиссертационныйСовет") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДиссертационныйСовет";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДипломСерияНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДипломСерияНомер";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньОрганизация") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДипломВыданОрганизация";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.УченыеСтепениФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбУченыхСтепеняхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("УченаяСтепеньДиссертационныйСовет")
		Или ИмяПоляВВерхнемРегистре = ВРег("УченаяСтепеньОрганизация") Тогда
		
		ПутьКДанным = "	ВЫРАЗИТЬ(УченыеСтепени." + ИмяПоля + " КАК СТРОКА(1024))";
		
	Иначе
		ПутьКДанным = "	УченыеСтепени." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным
	
КонецФункции

// Сведения об ученых званиях

Функция ДобавитьПолеСведенийОбУченыхЗванияхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУченыхЗванияхФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбУченыхЗванияхФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУченыхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУченыхЗванияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания) КАК ДатаПрисвоенияУченогоЗвания
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисвоенияУченогоЗвания
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = ТаблицаОтборов.ФизическоеЛицо)
		|{ГДЕ
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.НомерПоПорядку) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНомераСтрокУченыхЗваний
		|ИЗ
		|	ВТМаксимальныеДатыПрисвоенияУченогоЗвания КАК МаксимальныеДатыПрисвоенияУченогоЗвания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо = ФизическиеЛицаУченыеЗвания.ФизическоеЛицо
		|			И МаксимальныеДатыПрисвоенияУченогоЗвания.ДатаПрисвоенияУченогоЗвания = ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НомераСтрокУченыхЗваний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаУченыеЗвания.УченоеЗвание КАК УченоеЗвание,
		|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания КАК УченоеЗваниеДатаПрисвоения,
		|	ФизическиеЛицаУченыеЗвания.АттестатСерия КАК УченоеЗваниеАттестатСерия,
		|	ФизическиеЛицаУченыеЗвания.АттестатНомер КАК УченоеЗваниеАттестатНомер,
		|	ФизическиеЛицаУченыеЗвания.АттестатВыданОрганизация КАК УченоеЗваниеОрганизация,
		|	ФизическиеЛицаУченыеЗвания.НаучнаяСпециальность КАК УченоеЗваниеСпециальность
		|ПОМЕСТИТЬ ВТПредварительноУченыеЗвания
		|ИЗ
		|	ВТНомераСтрокУченыхЗваний КАК НомераСтрокУченыхЗваний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = НомераСтрокУченыхЗваний.ФизическоеЛицо)
		|			И (ФизическиеЛицаУченыеЗвания.НомерПоПорядку = НомераСтрокУченыхЗваний.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УченыеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УченыеЗвания.УченоеЗвание КАК УченоеЗвание,
		|	УченыеЗвания.УченоеЗваниеДатаПрисвоения КАК УченоеЗваниеДатаПрисвоения,
		|	УченыеЗвания.УченоеЗваниеАттестатСерия КАК УченоеЗваниеАттестатСерия,
		|	УченыеЗвания.УченоеЗваниеАттестатНомер КАК УченоеЗваниеАттестатНомер,
		|	УченыеЗвания.УченоеЗваниеОрганизация КАК УченоеЗваниеОрганизация,
		|	УченыеЗвания.УченоеЗваниеСпециальность КАК УченоеЗваниеСпециальность
		|ПОМЕСТИТЬ ВТУченыеЗванияФизическихЛиц
		|ИЗ
		|	ВТПредварительноУченыеЗвания КАК УченыеЗвания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеДатыПрисвоенияУченогоЗвания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНомераСтрокУченыхЗваний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПредварительноУченыеЗвания";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТУченыеЗванияФизическихЛиц КАК УченыеЗвания
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = УченыеЗвания.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТУченыеЗванияФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УченоеЗвание")
		Или ИмяПоля = ВРег("УченоеЗваниеАттестатСерия")
		Или ИмяПоля = ВРег("УченоеЗваниеАттестатНомер")
		Или ИмяПоля = ВРег("УченоеЗваниеДатаПрисвоения")
		Или ИмяПоля = ВРег("УченоеЗваниеОрганизация")
		Или ИмяПоля = ВРег("УченоеЗваниеСпециальность");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУченыхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УченоеЗваниеАттестатСерия") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатСерия";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеАттестатНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатНомер";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеДатаПрисвоения") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаПрисвоенияУченогоЗвания";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеОрганизация") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатВыданОрганизация";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеСпециальность") Тогда
			УсловиеПоиска.ЛевоеЗначение = "НаучнаяСпециальность";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.УченыеЗванияФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбУченыхЗванияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("УченоеЗваниеОрганизация") Тогда
		
		ПутьКДанным = "	ВЫРАЗИТЬ(УченыеЗвания." + ИмяПоля + " КАК СТРОКА(1024))";
		
	Иначе
		ПутьКДанным = "	УченыеЗвания." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным
	
КонецФункции

// Сведения о почетных званиях.

Функция ДобавитьПолеСведенийОПочетныхЗванияхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПочетныхЗванияхФизическихЛиц", Истина);
		
		ПутьКДанным = "	ПочетныеЗванияФизическихЛиц." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПочетныхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПочетныхЗванияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НаградыФизическихЛиц.ДатаПриказа) КАК ДатаПриказа
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисвоенияПочетногоЗвания
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|{ГДЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо.*,
		|	НаградыФизическихЛиц.Награда.*,
		|	НаградыФизическихЛиц.ДатаПриказа}
		|
		|СГРУППИРОВАТЬ ПО
		|	НаградыФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НаградыФизическихЛиц.Награда) КАК Награда
		|ПОМЕСТИТЬ ВТСсылкиПочетныхЗваний
		|ИЗ
		|	ВТМаксимальныеДатыПрисвоенияПочетногоЗвания КАК МаксимальныеДатыПрисвоенияПочетногоЗвания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|			И МаксимальныеДатыПрисвоенияПочетногоЗвания.ДатаПриказа = НаградыФизическихЛиц.ДатаПриказа
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СсылкиПочетныхЗваний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НаградыФизическихЛиц.Награда) КАК ПочетноеЗвание
		|ПОМЕСТИТЬ ВТПочетныеЗванияФизическихЛиц
		|ИЗ
		|	ВТСсылкиПочетныхЗваний КАК СсылкиПочетныхЗваний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО СсылкиПочетныхЗваний.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|			И СсылкиПочетныхЗваний.Награда = НаградыФизическихЛиц.Награда
		|
		|СГРУППИРОВАТЬ ПО
		|	СсылкиПочетныхЗваний.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеДатыПрисвоенияПочетногоЗвания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСсылкиПочетныхЗваний";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПочетныеЗванияФизическихЛиц КАК ПочетныеЗванияФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПочетныеЗванияФизическихЛиц.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПочетныеЗванияФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПочетноеЗвание");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПочетныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ПочетноеЗвание") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Награда";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.НаградыФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения о стажах

Функция ДобавитьПоляСведенийОСтажахФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	НеобходимыСведенияОСтажах = Ложь;
	КатегорияСтажа = Неопределено;
	
	Если НеобходимыСведенияОбОбщемСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Общий;
		
	ИначеЕсли НеобходимыСведенияОСеверномСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Северный;
		
	ИначеЕсли НеобходимыСведенияОНепрерывномСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Непрерывный;
		
	ИначеЕсли НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛет;
		
	ИначеЕсли НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический;
		
	ИначеЕсли НеобходимыСведенияОПедагогическомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Педагогический;
		
	ИначеЕсли НеобходимыСведенияОСтраховомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой;
		
	ИначеЕсли НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой;
		
	ИначеЕсли НеобходимыСведенияОПрочемСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Медицинский;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
		И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Если МодульГосударственнаяСлужба.НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
			КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе;
		ИначеЕсли МодульГосударственнаяСлужба.НеобходимыСведенияОСтажеЗаВыслугуЛетНаВоеннойСлужбе(ИмяПоля) Тогда
			КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаВоеннойСлужбе;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимыСведенияОСтажах Тогда
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "СведенияОСтажах", КатегорияСтажа);
		
		ПутьКДанным = "	" + ПутьКДаннымСведенийОСтаже(ИмяПоля, ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа));
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат НеобходимыСведенияОСтажах;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСтажахФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	КатегорииСтажей = ИсточникиДанных.Получить("СведенияОСтажах");
	Если КатегорииСтажей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписательВТОтборовСтажей = ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц,
		ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо,
		ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗапросВТ = ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВТОтборовСтажей, "ВТСтажиФизическихЛицРезультирующая");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	Для каждого КатегорияСтажа Из КатегорииСтажей Цикл
		
		ИмяТаблицы = ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа);
		ИмяПараметра = ИмяТаблицы + "ПараметрЗапроса";
		
		УсловиеПоСтажу = "ВЫРАЗИТЬ(" + ИмяТаблицы + ".ВидСтажа КАК Справочник.ВидыСтажа).КатегорияСтажа = &" + ИмяПараметра;
		
		Если КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее Тогда
			
			ЗапросВидаПрочегоСтажа = Новый Запрос;
			ЗапросВидаПрочегоСтажа.Текст =
				"ВЫБРАТЬ
				|	ВидыСтажа.Ссылка КАК Ссылка,
				|	ВидыСтажа.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.ВидыСтажа КАК ВидыСтажа
				|ГДЕ
				|	ВидыСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Прочее)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка,
				|	ПометкаУдаления УБЫВ";
			
			УстановитьПривилегированныйРежим(Истина);
			ВыборкаВидаПрочегоСтажа = ЗапросВидаПрочегоСтажа.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ВыборкаВидаПрочегоСтажа.Следующий() Тогда
				УсловиеПоСтажу = УсловиеПоСтажу + " И " + ИмяТаблицы + ".ВидСтажа = &ВидПрочегоСтажа";
				Запрос.УстановитьПараметр("ВидПрочегоСтажа", ВыборкаВидаПрочегоСтажа.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛицРезультирующая КАК " + ИмяТаблицы + "
			|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = " + ИмяТаблицы + ".ФизическоеЛицо
			|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = " + ИмяТаблицы + ".Период
			|		И " + УсловиеПоСтажу + "}");
		
		Запрос.УстановитьПараметр(ИмяПараметра, КатегорияСтажа);
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтажиФизическихЛицРезультирующая");
	
КонецПроцедуры

Функция НеобходимыСведенияОСтажахФизическихЛиц(Знач ИмяПоля)
	
	Возврат НеобходимыСведенияОбОбщемСтаже(ИмяПоля)
		Или НеобходимыСведенияОСеверномСтаже(ИмяПоля)
		Или НеобходимыСведенияОНепрерывномСтаже(ИмяПоля)
		Или НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля)
		Или НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля)
		Или НеобходимыСведенияОПедагогическомСтаже(ИмяПоля)
		Или НеобходимыСведенияОСтраховомСтаже(ИмяПоля)
		Или НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля)
		Или НеобходимыСведенияОПрочемСтаже(ИмяПоля)
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля)
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля);
		
КонецФункции

Функция НеобходимыСведенияОбОбщемСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбщийСтажВид")
		Или ИмяПоля = ВРег("ОбщийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийСтажДней")
		Или	ИмяПоля = ВРег("ОбщийСтажМесяцев")
		Или	ИмяПоля = ВРег("ОбщийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСеверномСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СеверныйСтажВид")
		Или ИмяПоля = ВРег("СеверныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерДней")
		Или ИмяПоля = ВРег("СеверныйСтажДней")
		Или	ИмяПоля = ВРег("СеверныйСтажМесяцев")
		Или	ИмяПоля = ВРег("СеверныйСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОНепрерывномСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("НепрерывныйСтажВид")
		Или ИмяПоля = ВРег("НепрерывныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажДней")
		Или	ИмяПоля = ВРег("НепрерывныйСтажМесяцев")
		Или	ИмяПоля = ВРег("НепрерывныйСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСтажеНаНадбавку(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетВид")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетПериодРегистрации")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		Или	ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		Или	ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет");
		
КонецФункции

Функция НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажДней")
		Или	ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажМесяцев")
		Или	ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОПедагогическомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажДней")
		Или	ИмяПоля = ВРег("ПедагогическийСтажМесяцев")
		Или	ИмяПоля = ВРег("ПедагогическийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСтраховомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СтраховойСтажВид")
		Или ИмяПоля = ВРег("СтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("СтраховойСтажДней")
		Или	ИмяПоля = ВРег("СтраховойСтажМесяцев")
		Или	ИмяПоля = ВРег("СтраховойСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОРасширенномСтраховомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РасширенныйСтраховойСтажВид")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажДней")
		Или	ИмяПоля = ВРег("РасширенныйСтраховойСтажМесяцев")
		Или	ИмяПоля = ВРег("РасширенныйСтраховойСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОПрочемСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПрочийСтажВид")
		Или ИмяПоля = ВРег("ПрочийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерДней")
		Или ИмяПоля = ВРег("ПрочийСтажДней")
		Или	ИмяПоля = ВРег("ПрочийСтажМесяцев")
		Или	ИмяПоля = ВРег("ПрочийСтажЛет");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска, ЗаданноеУсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(ЗаданноеУсловиеПоиска.ЛевоеЗначение);
	Если НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ТрудовойДоговорДатаОкончания") Тогда
		
		УсловиеПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ЗаданноеУсловиеПоиска);
		
		ИмяКритерия = "РегистрСведений.СтажиФизическихЛиц";
		КритерийДобавлен = Истина;
		
		Если ИмяПоля = ВРег("Период")
			Или ИмяПоля = ВРег("ТрудовойДоговорДатаОкончания") Тогда
			
			КритерийДобавлен = Ложь;
			
			КатегорияСтажа = Неопределено;
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли НеобходимыСведенияОбОбщемСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.Общий;
			ИмяКритерия = ИмяКритерия + ".Общий";
			
		ИначеЕсли НеобходимыСведенияОСеверномСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.Северный;
			ИмяКритерия = ИмяКритерия + ".Северный";
			
		ИначеЕсли НеобходимыСведенияОНепрерывномСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.Непрерывный;
			ИмяКритерия = ИмяКритерия + ".Непрерывный";
			
		ИначеЕсли НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛет;
			ИмяКритерия = ИмяКритерия + ".ВыслугаЛет";
			
		ИначеЕсли НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический;
			ИмяКритерия = ИмяКритерия + ".ОбщийНаучноПедагогический";
			
		ИначеЕсли НеобходимыСведенияОПедагогическомСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.Педагогический;
			ИмяКритерия = ИмяКритерия + ".Педагогический";
			
		ИначеЕсли НеобходимыСведенияОСтраховомСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой;
			ИмяКритерия = ИмяКритерия + ".Страховой";
			
		ИначеЕсли НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой;
			ИмяКритерия = ИмяКритерия + ".РасширенныйСтраховой";
			
		ИначеЕсли НеобходимыСведенияОПрочемСтаже(ИмяПоля) Тогда
			
			КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее;
			ИмяКритерия = ИмяКритерия + ".Прочее";
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
			
			ОписаниеСтажа = ОбщегоНазначения.ОбщийМодуль("Медицина").ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников();
			
			КатегорияСтажа = ОписаниеСтажа.КатегорияСтажа;
			ИмяКритерия = ИмяКритерия + "." + ОписаниеСтажа.Идентификатор;
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля) Тогда
			
			МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			ОписаниеСтажа = МодульГосударственнаяСлужба.ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников(ИмяПоля);
			
			КатегорияСтажа = ОписаниеСтажа.КатегорияСтажа;
			ИмяКритерия = ИмяКритерия + "." + ОписаниеСтажа.Идентификатор;
			
		КонецЕсли;
		
		ОтносительныйПуть = УсловиеПоиска.ОтносительныйПуть;
		Если Прав(ИмяПоля, 17) = ВРег("ПериодРегистрации") Тогда
			
			УсловиеПоиска.ЛевоеЗначение = "ДатаОтсчета";
			
		ИначеЕсли Прав(ИмяПоля, 7) = ВРег("Месяцев") Тогда
			
			ОтносительныйПуть = Ложь;
			
			ДатаОтсчетаСтажа = "ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РегистрСведений.ДатаОтсчета, МЕСЯЦ, -РегистрСведений.РазмерМесяцев), ДЕНЬ, -РегистрСведений.РазмерДней)";
			УсловиеПоиска.ЛевоеЗначение = "
				|	РАЗНОСТЬДАТ(&ДатаОтсчетаРегистраСведений, МаксимальныеПериоды.ЗаданныйПериод, МЕСЯЦ) - ВЫБОР
				|		КОГДА ДЕНЬ(&ДатаОтсчетаРегистраСведений) > ДЕНЬ(МаксимальныеПериоды.ЗаданныйПериод)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ";
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "&ДатаОтсчетаРегистраСведений", ДатаОтсчетаСтажа);
			
		КонецЕсли;
		
		УсловиеПоиска.ОтносительныйПуть = ОтносительныйПуть;
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, УсловиеПоиска);
		
		ОтборПоКатегорииВидаСтажаУстановлен = Ложь;
		УсловияПоиска = КритерииПоиска.Получить(ИмяКритерия);
		Для каждого УсловиеПоиска Из УсловияПоиска Цикл
			
			Если УсловиеПоиска.ЛевоеЗначение = "ВидСтажа.КатегорияСтажа" Тогда
				ОтборПоКатегорииВидаСтажаУстановлен = Истина;
				УсловиеПоиска.ЛевоеЗначение = "РегистрСведений.ВидСтажа.КатегорияСтажа";
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОтборПоКатегорииВидаСтажаУстановлен И ЗначениеЗаполнено(КатегорияСтажа) Тогда
			
			ДополнительноеУсловие = Новый Структура;
			ДополнительноеУсловие.Вставить("ЛевоеЗначение", "РегистрСведений.ВидСтажа.КатегорияСтажа");
			ДополнительноеУсловие.Вставить("ВидСравнения", "=");
			ДополнительноеУсловие.Вставить("ПравоеЗначение", КатегорияСтажа);
			ДополнительноеУсловие.Вставить("ОтносительныйПуть", Ложь);
			КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, ДополнительноеУсловие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Процедура УточнитьУсловияКритериевПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска)
	
	Для каждого КритерийПоиска Из КритерииПоиска Цикл
		
		Если СтрНайти(ВРег(КритерийПоиска.Ключ), ВРег("РегистрСведений.СтажиФизическихЛиц")) = 1 Тогда
			
			ПравоеЗначениеУсловияПоПериоду = ТекущаяДатаСеанса();
			Для каждого УсловиеПоиска Из КритерийПоиска.Значение Цикл
				
				Если УсловиеПоиска.ЛевоеЗначение = "ДатаОтсчета" Тогда
					ПравоеЗначениеУсловияПоПериоду = УсловиеПоиска.ПравоеЗначение;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипЗнч(ПравоеЗначениеУсловияПоПериоду) = Тип("Дата") Тогда
				ТекстУсловия = "ДАТАВРЕМЯ(" + Формат(ПравоеЗначениеУсловияПоПериоду, "ДФ='гггг, ММ, дд'; ДП=") + ")";
			Иначе
				ТекстУсловия = ПравоеЗначениеУсловияПоПериоду;
			КонецЕсли;
			
			Для каждого УсловиеПоиска Из КритерийПоиска.Значение Цикл
				
				Если Не УсловиеПоиска.ОтносительныйПуть Тогда
					УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "Т.Период", ТекстУсловия);
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа) Экспорт
	
	ИмяТаблицы = "";
	
	Если КатегорияСтажа = Перечисления.КатегорииСтажа.Общий Тогда
		ИмяТаблицы = "ОбщиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Северный Тогда
		ИмяТаблицы = "СеверныеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Непрерывный Тогда
		ИмяТаблицы = "НепрерывныеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛет Тогда
		ИмяТаблицы = "СтажиНаВыслугаЛет";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический Тогда
		ИмяТаблицы = "ОбщиеНаучноПедагогическиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Педагогический Тогда
		ИмяТаблицы = "ПедагогическиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой Тогда
		ИмяТаблицы = "СтраховыеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой Тогда
		ИмяТаблицы = "РасширенныеСтраховыеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее Тогда
		ИмяТаблицы = "ПрочиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Медицинский Тогда
		ИмяТаблицы = "МедицинскиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе Тогда
		ИмяТаблицы = "ВыслугаЛетНаГосударственнойСлужбе";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаВоеннойСлужбе Тогда
		ИмяТаблицы = "ВыслугаЛетНаВоеннойСлужбе";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ПутьКДаннымСведенийОСтаже(Знач ИмяПоля, ИмяТаблицы)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ОбщийСтажВид")
		Или ИмяПоля = ВРег("СеверныйСтажВид")
		Или ИмяПоля = ВРег("НепрерывныйСтажВид")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетВид")
		Или ИмяПоля = ВРег("ПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажВид")
		Или ИмяПоля = ВРег("СтраховойСтажВид")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажВид")
		Или ИмяПоля = ВРег("ПрочийСтажВид") Тогда
		
		Возврат ИмяТаблицы + ".ВидСтажа";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СеверныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("НепрерывныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетПериодРегистрации")
		Или ИмяПоля = ВРег("ПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПрочийСтажПериодРегистрации") Тогда
		
		Возврат ИмяТаблицы + ".ПериодРегистрации";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".РазмерМесяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажРазмерДней")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерДней") Тогда
		
		Возврат ИмяТаблицы + ".РазмерДней";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажДней")
		Или ИмяПоля = ВРег("СеверныйСтажДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажДней")
		Или ИмяПоля = ВРег("СтраховойСтажДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажДней")
		Или ИмяПоля = ВРег("ПрочийСтажДней") Тогда
		
		Возврат ИмяТаблицы + ".Дней";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажМесяцев") 
		Или ИмяПоля = ВРег("СеверныйСтажМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажМесяцев") 
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".Месяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажЛет") 
		Или ИмяПоля = ВРег("СеверныйСтажЛет")
		Или ИмяПоля = ВРег("НепрерывныйСтажЛет")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет")
		Или ИмяПоля = ВРег("ПедагогическийСтажЛет") 
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажЛет")
		Или ИмяПоля = ВРег("СтраховойСтажЛет")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажЛет")
		Или ИмяПоля = ВРег("ПрочийСтажЛет") Тогда
		
		Возврат ИмяТаблицы + ".Лет";
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
		И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
		
		Возврат ОбщегоНазначения.ОбщийМодуль("Медицина").ПутьКДаннымСведенийОСтаже(ИмяПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
		И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля) Тогда
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ПутьКДаннымСведенийОСтаже(ИмяПоля);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Сведения об исчислении северного стажа

Функция ДобавитьПолеСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПараметрахИсчисленияСеверногоСтажа", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("ПорядокИсчисленияПроцентаСевернойНадбавки")
		Или ВРег(ИмяПоля) = ВРег("ПроцентСевернойНадбавкиИзменяется")
		Или ВРег(ИмяПоля) = ВРег("ПроцентСевернойНадбавки");
	
КонецФункции

Функция ПутьКДаннымСведенийОПараметрахИсчисленияСеверногоСтажа(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ПорядокИсчисленияПроцентаСевернойНадбавки") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПорядокИсчисленияПроцентаСевернойНадбавки";
	ИначеЕсли ИмяПоля = ВРег("ПроцентСевернойНадбавкиИзменяется") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПроцентСевернойНадбавкиИзменяется";
	ИначеЕсли ИмяПоля = ВРег("ПроцентСевернойНадбавки") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПроцентСевернойНадбавки";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПараметрахИсчисленияСеверногоСтажа(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПараметрахИсчисленияСеверногоСтажа") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПараметрахИсчисленияСеверногоСтажа КАК ПараметрыИсчисленияПроцентаСевернойНадбавки
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.ФизическоеЛицо");
	
	Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник")
		И ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник <> Неопределено 
		И НЕ ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник) Тогда
		
		ЧастиЗапроса.Добавить(
			"		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.Сотрудник");
		
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(
		"	И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПараметрахИсчисленияСеверногоСтажа");
	
КонецПроцедуры

// Сведения о льготах граждан подвергшихся воздействию радиации.

Функция ДобавитьПолеСведенийОЛьготахГражданПодвергшихсяРадиации(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС", Истина);
		
		ПутьКДанным = "	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска";
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаСведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС КАК СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
КонецПроцедуры

Функция НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("КоличествоДнейОтпускаЧАЭС")
	
КонецФункции

Функция ЗапросВТСведенияОДатахСмертиСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(Увольнение.ДатаУвольнения) КАК ДатаСмерти,
		|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСведенияОДатахСмертиСотрудников
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ПО Увольнение.ФизическоеЛицо = ТаблицаОтборов.ФизическоеЛицо
		|ГДЕ
		|	Увольнение.Проведен
		|	И Увольнение.СтатьяТКРФ В(&ОснованияУвольненияВСвязиСоСмертьюСотрудника)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(УвольнениеСпискомСотрудники.ДатаУвольнения),
		|	УвольнениеСпискомСотрудники.ФизическоеЛицо
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ПО УвольнениеСпискомСотрудники.ФизическоеЛицо = ТаблицаОтборов.ФизическоеЛицо
		|ГДЕ
		|	УвольнениеСпискомСотрудники.Ссылка.Проведен
		|	И УвольнениеСпискомСотрудники.СтатьяТКРФ В(&ОснованияУвольненияВСвязиСоСмертьюСотрудника)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеСпискомСотрудники.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц",
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(
		Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Запрос.УстановитьПараметр("ОснованияУвольненияВСвязиСоСмертьюСотрудника",
		КадровыйУчет.ОснованияУвольненияВСвязиСоСмертьюСотрудника());
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти


#Область КадровыеДанныеСотрудников

Процедура ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивСотрудниковДляОбновления,"ДатаЗавершенияРаботы");
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	// Подготовка таблицы отбора сотрудников.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаЗавершенияРаботы КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтбораСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтбораСотрудников", "Сотрудник"));
	
	// Подготовка сведений о плановых начислениях сотрудника.
	ЗапросВТПлановыеНачисления = ЗапросВТПлановыеНачисленияСотрудников(Истина, "ВТПлановыеНачисленияСотрудников", "ВТОтбораСотрудников", "Сотрудник,Период");
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	РасчетЗарплатыРасширенный.СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА ПлановыеНачисления.Начисление.ВключатьВФОТ
		|				ТОГДА ПлановыеНачисления.Размер
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ТекущийФОТ,
		|	СУММА(ВЫБОР
		|			КОГДА ПлановыеНачисления.НачислениеТарифнойСтавки
		|				ТОГДА 0
		|			ИНАЧЕ ПлановыеНачисления.Размер
		|		КОНЕЦ) КАК ТекущаяНадбавка
		|ПОМЕСТИТЬ ВТТекущиеДанныеНачислений
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель КАК Показатель,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
		|ПОМЕСТИТЬ ВТИзмеренияДатыДляЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиТарифныхСтавок КАК НачисленияПоказатели
		|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Начисление";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.УточнитьПараметрыПостроенияСрезаЗначенийПоказателей(ПараметрыПостроения);
	КонецЕсли;
	
	// Подготовка сведений о текущей тарифной ставке.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыДляЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников",
			"Сотрудник,Показатель"),
		ПараметрыПостроения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи) КАК ПериодЗаписи
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыЗначенияПериодическихПоказателей
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Организация) КАК Организация,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение) КАК Значение
	|ПОМЕСТИТЬ ВТПоследниеЗначениеПоказателей
	|ИЗ
	|	ВТМаксимальныеПериодыЗначенияПериодическихПоказателей КАК МаксимальныеПериодыЗначенияПериодическихПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|		ПО МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
	|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи = МаксимальныеПериодыЗначенияПериодическихПоказателей.ПериодЗаписи)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник,
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.ПериодЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(ПоследниеЗначениеПоказателей.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(ПоследниеЗначениеПоказателей.Значение, 0) КАК ТекущаяТарифнаяСтавка,
	|	ЕСТЬNULL(ТекущиеДанныеНачислений.ТекущийФОТ, 0) КАК ТекущийФОТ,
	|	ЕСТЬNULL(ТекущиеДанныеНачислений.ТекущаяНадбавка, 0) КАК ТекущаяНадбавка
	|ПОМЕСТИТЬ ВТЗначениеПоказателя
	|ИЗ
	|	ВТОтбораСотрудников КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеЗначениеПоказателей КАК ПоследниеЗначениеПоказателей
	|		ПО Сотрудники.Сотрудник = ПоследниеЗначениеПоказателей.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанныеНачислений КАК ТекущиеДанныеНачислений
	|		ПО Сотрудники.Сотрудник = ТекущиеДанныеНачислений.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначениеПоказателя.Сотрудник,
	|	ЗначениеПоказателя.ФизическоеЛицо,
	|	ЗначениеПоказателя.ГоловнаяОрганизация,
	|	ЗначениеПоказателя.ТекущаяОрганизация,
	|	ЗначениеПоказателя.ТекущаяТарифнаяСтавка,
	|	ЗначениеПоказателя.ТекущийФОТ,
	|	ЗначениеПоказателя.ТекущаяНадбавка,
	|	ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) КАК ТекущийСпособРасчетаАванса,
	|	ЕСТЬNULL(ПлановыеАвансы.Аванс, 0) КАК ТекущийАванс
	|ИЗ
	|	ВТЗначениеПоказателя КАК ЗначениеПоказателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
	|		ПО ЗначениеПоказателя.Сотрудник = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
	|			И ЗначениеПоказателя.ФизическоеЛицо = ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы
	|		ПО ЗначениеПоказателя.Сотрудник = ПлановыеАвансы.Сотрудник
	|ГДЕ
	|	(ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0) <> ЗначениеПоказателя.ТекущаяТарифнаяСтавка
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0) <> ЗначениеПоказателя.ТекущийФОТ
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяНадбавка, 0) <> ЗначениеПоказателя.ТекущаяНадбавка
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) <> ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка))
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс, 0) <> ЕСТЬNULL(ПлановыеАвансы.Аванс, 0))";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
		
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияСевернойНадбавки(МенеджерВременныхТаблиц, ИмяВТДатыИзмененияСевернойНадбавки = "ВТДатыИзмененияСевернойНадбавки") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПроцентыСевернойНадбавкиФизическихЛиц.Период КАК Дата
		|ПОМЕСТИТЬ ВТДатыИзмененияСевернойНадбавки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
		|			И (Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц КАК ПроцентыСевернойНадбавкиФизическихЛиц
		|		ПО (Сотрудники.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо)
		|			И (ПроцентыСевернойНадбавкиФизическихЛиц.Период МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыИзмененияСевернойНадбавки", ИмяВТДатыИзмененияСевернойНадбавки);
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Функция ЗначенияПроцентаСевернойНадбавкиПоФизическимЛицам(ОписаниеФильтра, МенеджерВременныхТаблиц = Неопределено, Порядок = Неопределено) Экспорт
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ПроцентыСевернойНадбавкиФизическихЛиц");
	
	ШаблонТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПроцентыСевернойНадбавкиФизическихЛиц.Период КАК Период,
	|	ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
	|	ПроцентыСевернойНадбавкиФизическихЛиц.ДействуетДо КАК ДействуетДо
	|ИЗ
	|	РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц КАК ПроцентыСевернойНадбавкиФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборФизическихЛиц КАК ОтборФизическихЛиц
	|		ПО (&ШаблонУсловиеСвязиПоИзмерениям)
	|			И (&ФильтрДатаНачала_ МЕЖДУ ПроцентыСевернойНадбавкиФизическихЛиц.Период И ПроцентыСевернойНадбавкиФизическихЛиц.ДействуетДо
	|				ИЛИ ПроцентыСевернойНадбавкиФизическихЛиц.Период МЕЖДУ &ФильтрДатаНачалаСдвинутая_ И &ФильтрДатаОкончания_)";

	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ОтборФизическихЛиц", "ПроцентыСевернойНадбавкиФизическихЛиц");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");
	ФильтрДатаНачалаСдвинутая = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачалаСдвинутая");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	
	ФильтрДатаНачалаСдвинутая.КратностьСдвига = "ДЕНЬ";
	ФильтрДатаНачалаСдвинутая.Сдвиг = 1;
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаСдвинутая_", ФильтрДатаНачалаСдвинутая);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);

	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Если Порядок <> Неопределено Тогда
		Для Каждого ЭлементПорядка Из Порядок Цикл
			ОписаниеЗапроса.Порядок.Добавить(ЭлементПорядка);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ТекущиеНачисленияСотрудника(Сотрудник, ДатаСведений, ИсключаемыйРегистратор = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Возврат ТекущиеНачисленияСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), ДатаСведений, ИсключаемыйРегистратор, ФормироватьСПериодичностьДень).Получить(Сотрудник);
	
КонецФункции

Функция ТекущиеНачисленияСотрудников(Сотрудники, ДатаСведений, ИсключаемыйРегистратор = Неопределено, ФормироватьСПериодичностьДень = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ДатаСведений КАК Период,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтбораСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
	
	Запрос.Выполнить();
	
	Отборы = Новый Массив;
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		
		Отборы.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			"Регистратор", "<>", ИсключаемыйРегистратор));
		
	КонецЕсли;
	
	ОтборыНачислений = Новый Структура("ПлановыеНачисления", ОбщегоНазначения.СкопироватьРекурсивно(Отборы));
	
	ЗапросВТПлановыеНачисления = ЗапросВТПлановыеНачисленияСотрудников(
		Истина, "ВТПлановыеНачисленияСотрудников", "ВТОтбораСотрудников", "Сотрудник,Период", ОтборыНачислений, ФормироватьСПериодичностьДень);
	
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлановыеНачисленияСотрудников.Период,
		|	ПлановыеНачисленияСотрудников.Сотрудник,
		|	ПлановыеНачисленияСотрудников.Начисление,
		|	ПлановыеНачисленияСотрудников.ДокументОснование,
		|	ПлановыеНачисленияСотрудников.Размер,
		|	ПлановыеНачисленияСотрудников.ОсновнойПоказатель,
		|	ПлановыеНачисленияСотрудников.НачислениеТарифнойСтавки,
		|	ЕСТЬNULL(НачисленияПоказатели.Показатель, ПлановыеНачисленияСотрудников.ОсновнойПоказатель) КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСотрудниковСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисленияСотрудников.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияСотрудниковСПоказателями.Период,
		|	НачисленияСотрудниковСПоказателями.Сотрудник,
		|	НачисленияСотрудниковСПоказателями.Показатель,
		|	НачисленияСотрудниковСПоказателями.ДокументОснование
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудниковСПоказателями";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = Отборы;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"Сотрудник,Показатель,ДокументОснование"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияСотрудниковСПоказателями.Период,
		|	НачисленияСотрудниковСПоказателями.Сотрудник КАК Сотрудник,
		|	НачисленияСотрудниковСПоказателями.Начисление КАК Начисление,
		|	НачисленияСотрудниковСПоказателями.ДокументОснование КАК ДокументОснование,
		|	НачисленияСотрудниковСПоказателями.Размер КАК Размер,
		|	НачисленияСотрудниковСПоказателями.ОсновнойПоказатель КАК ОсновнойПоказатель,
		|	НачисленияСотрудниковСПоказателями.НачислениеТарифнойСтавки КАК НачислениеТарифнойСтавки,
		|	НачисленияСотрудниковСПоказателями.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудниковСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО НачисленияСотрудниковСПоказателями.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|			И НачисленияСотрудниковСПоказателями.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И НачисленияСотрудниковСПоказателями.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|			И НачисленияСотрудниковСПоказателями.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение <> 0)
		|ИТОГИ
		|	МАКСИМУМ(Размер),
		|	МАКСИМУМ(ОсновнойПоказатель),
		|	МАКСИМУМ(НачислениеТарифнойСтавки)
		|ПО
		|	Сотрудник,
		|	Начисление,
		|	ДокументОснование";
		
	ПлановыеНачисленияСоответствие = Новый Соответствие;
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		НачисленияСотрудников = Новый Соответствие;
		ВыборкаПоНачислениям = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			
			ОписанияНачислений = Новый ТаблицаЗначений;
			ОписанияНачислений.Колонки.Добавить("Начисление");
			ОписанияНачислений.Колонки.Добавить("ДокументОснование");
			ОписанияНачислений.Колонки.Добавить("Размер");
			ОписанияНачислений.Колонки.Добавить("ОсновнойПоказатель");
			ОписанияНачислений.Колонки.Добавить("НачислениеТарифнойСтавки");
			ОписанияНачислений.Колонки.Добавить("Показатели");
			ОписанияНачислений.Индексы.Добавить("ДокументОснование");
			
			ВыборкаПоОснованиям = ВыборкаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОснованиям.Следующий() Цикл
				
				ОписаниеНачисления = ОписанияНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеНачисления, ВыборкаПоОснованиям);
				
				ОписаниеПоказателей = Новый Соответствие;
				ВыборкаПоПоказателям = ВыборкаПоОснованиям.Выбрать();
				Пока ВыборкаПоПоказателям.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
						ОписаниеПоказателей.Вставить(ВыборкаПоПоказателям.Показатель, ВыборкаПоПоказателям.Значение);
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеНачисления.Показатели = ОписаниеПоказателей;
				
			КонецЦикла;
			
			НачисленияСотрудников.Вставить(ВыборкаПоНачислениям.Начисление, ОписанияНачислений);
			
		КонецЦикла; 
		
		ПлановыеНачисленияСоответствие.Вставить(ВыборкаПоСотрудникам.Сотрудник, НачисленияСотрудников);
		
	КонецЦикла;
	
	Возврат ПлановыеНачисленияСоответствие; 
	
КонецФункции

Процедура ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПечатнаяФормаТ6) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаТ6";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т6";
		КомандаПечати.Представление = НСтр("ru = 'Приказ о предоставлении отпуска (Т-6)';
											|en = 'Order granting leave (T-6)'");
		КомандаПечати.Порядок = 10;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "РаботаСотрудник");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуПечатиПриказаОПредоставленииОтпускаРаботникам(КомандыПечати, ПроверкаПроведения = Истина) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПечатнаяФормаТ6а) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаТ6а";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т6а";
		КомандаПечати.Представление = НСтр("ru = 'Приказ о предоставлении отпуска работникам (Т-6а)';
											|en = 'Order granting leaves to employees (T-6a)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = ПроверкаПроведения;
		КомандаПечати.ДополнительныеПараметры.Вставить("ПутьКПодписантам", "Сотрудники.ФизическоеЛицо");
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля) Экспорт
	
	НеобходимыКадровыеДанные =  КадровыйУчетБазовый.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля)
		Или НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(ИмяПоля);
	
	Если Не НеобходимыКадровыеДанные
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		
		НеобходимыКадровыеДанные =
			МодульГосударственнаяСлужба.НеобходимыСведенияОКлассныхЧинахРангах(ИмяПоля)
			Или МодульГосударственнаяСлужба.НеобходимыСведенияОВоинскихСпециальныхЗваниях(ИмяПоля)
			Или МодульГосударственнаяСлужба.НеобходимыСведенияОКонтрактеВоеннослужащего(ИмяПоля);
			
	КонецЕсли; 
	
	Возврат НеобходимыКадровыеДанные;
	
КонецФункции

Функция ИсточникИнформацииОКлассахУсловийТруда() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат "ДолжностьПоШтатномуРасписанию";
	Иначе
		Возврат КадровыйУчетБазовый.ИсточникИнформацииОКлассахУсловийТруда();
	КонецЕсли;
	
КонецФункции

Функция ПутьКДаннымСведенийОКлассахУсловийТруда(ИмяПоля) Экспорт
	
	ПутьКДанным = "";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		ПутьКДанным = МодульОхранаТруда.ПутьКДаннымСведенийОКлассахУсловийТруда(ИмяПоля);
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийОКлассахУсловийТруда(ИмяПоля);
	КонецЕсли; 
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ПриПолученииЗапросаВТСведенияОКлассахУсловийТруда(Запрос, ТолькоРазрешенные, ИмяСоздаваемойТаблицы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ПриПолученииЗапросаВТСведенияОКлассахУсловийТруда(
			Запрос, ТолькоРазрешенные, ИмяСоздаваемойТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаДатИзмененийКлассовУсловийТрудаПоДолжностям(Организация, ТаблицаФильтра, ДатаНачала, ДатаОкончания) Экспорт
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаИзменений.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ТаблицаИзменений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ДополнитьКолонкиТаблицыРабочимМестом(Организация, ТаблицаИзменений, ТаблицаФильтра);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ПрименятьРезультатыСпециальнойОценкиУсловийТруда") Тогда
		Возврат ТаблицаИзменений;
	КонецЕсли;
	
	ОписаниеПериода = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПериодаДляСоздатьВТИмяРегистра();
	ОписаниеПериода.ДатаНачала = ДатаНачала;
	ОписаниеПериода.ДатаОкончания = ДатаОкончания;
	
	ИмяПоляДолжность = ИсточникИнформацииОКлассахУсловийТруда();
	Должности = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаФильтра, ИмяПоляДолжность, Истина);
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоСпискуЗначений(ОписаниеПериода, "Должность", Должности);
		
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗначенияКлассовУсловийТрудаПоДолжностям = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
											"КлассыУсловийТрудаПоДолжностям",
											Новый МенеджерВременныхТаблиц,
											Истина,
											ОписаниеФильтра,
											ПараметрыПостроения);
											
	Если ЗначенияКлассовУсловийТрудаПоДолжностям.Количество() = 0 Тогда
		Возврат ТаблицаИзменений;
	КонецЕсли;
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаФильтра, ИмяПоляДолжность);
	
	СтруктураПоиска = Новый Структура(ИмяПоляДолжность);
	Для Каждого СтрокаИзменений Из ЗначенияКлассовУсловийТрудаПоДолжностям Цикл
		СтруктураПоиска[ИмяПоляДолжность] = СтрокаИзменений.Должность;
		СтрокиФильтра = ТаблицаФильтра.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаФильтра Из СтрокиФильтра Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФильтра);
			НоваяСтрока.Период = СтрокаИзменений.Период;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаИзменений;

КонецФункции

Процедура ДополнитьИменаКадровыхДанных(КадровыеДанные) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ДополнитьИменаКадровыхДанных(КадровыеДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоляЗапросаВТКадровыхДанных(Организация, Запрос) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ДополнитьПоляЗапросаВТКадровыхДанных(Организация, Запрос);
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОСтажахСотрудников(СотрудникиДаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	СотрудникиДаты.Период КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(СотрудникиДаты.Период, ДЕНЬ) КАК Период,
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВидыСтажа.Ссылка КАК ВидСтажа
		|ПОМЕСТИТЬ ВТСотрудникиСФизическимиЛицами
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиДаты.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Период КАК Период,
		|	СотрудникиСФизическимиЛицами.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛиц
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами";
		
	Запрос.Выполнить();
	
	ОписательВТ = ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц("ВТТаблицаОтборовФизическихЛиц");
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОписательВТ);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Сотрудник КАК Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Лет, 0) КАК Лет,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Месяцев, 0) КАК Месяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Дней, 0) КАК Дней
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиСФизическимиЛицами.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СотрудникиСФизическимиЛицами.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиСФизическимиЛицами.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|ИТОГИ ПО
		|	Сотрудник";
		
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтажиСотрудников = Новый Соответствие;
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		СоответствиеСтажей = Новый Соответствие;
		ВыборкаПоСтажам = ВыборкаПоСотрудникам.Выбрать();
		Пока ВыборкаПоСтажам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСтажам.ВидСтажа) Тогда
				СведенияОСтаже = Новый Структура("Лет,Месяцев,Дней", 0, 0, 0);
				ЗаполнитьЗначенияСвойств(СведенияОСтаже, ВыборкаПоСтажам);
				
				СоответствиеСтажей.Вставить(ВыборкаПоСтажам.ВидСтажа, СведенияОСтаже);
			КонецЕсли; 
			
		КонецЦикла;
		
		СтажиСотрудников.Вставить(ВыборкаПоСотрудникам.Сотрудник, СоответствиеСтажей);
		
	КонецЦикла;
	
	Возврат СтажиСотрудников;
	
КонецФункции

Функция СведенияОСтажахФизическихЛиц(ФизическиеЛицаДаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическиеЛицаДаты", ФизическиеЛицаДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛицаДаты.Период,
		|	ФизическиеЛицаДаты.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаДаты
		|ИЗ
		|	&ФизическиеЛицаДаты КАК ФизическиеЛицаДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТФизическиеЛицаДаты.Период,
		|	ВТФизическиеЛицаДаты.ФизическоеЛицо,
		|	ВидыСтажа.Ссылка КАК ВидСтажа
		|ПОМЕСТИТЬ ВТФизическиеЛицаСВидамиСтажей
		|ИЗ
		|	ВТФизическиеЛицаДаты КАК ВТФизическиеЛицаДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаСВидамиСтажей.Период,
		|	ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛиц
		|ИЗ
		|	ВТФизическиеЛицаСВидамиСтажей КАК ФизическиеЛицаСВидамиСтажей";
	
	Запрос.Выполнить();
	
	ОписательВТ = ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц("ВТТаблицаОтборовФизическихЛиц");
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОписательВТ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтажиФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТТаблицаОтборовФизическихЛиц", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.ПериодРегистрации КАК ПериодРегистрации,
		|	СтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	СтажиФизическихЛиц.Лет КАК Лет,
		|	СтажиФизическихЛиц.Месяцев КАК Месяцев,
		|	СтажиФизическихЛиц.Дней КАК Дней,
		|	СтажиФизическихЛиц.Прерван КАК Прерван,
		|	ЕСТЬNULL(СтажиФизическихЛицСрезПоследних.ИсчисляетсяСДатыПриема, ЛОЖЬ) КАК ИсчисляетсяСДатыПриема
		|ИЗ
		|	ВТФизическиеЛицаСВидамиСтажей КАК ФизическиеЛицаСВидамиСтажей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛицСрезПоследних КАК СтажиФизическихЛицСрезПоследних
		|			ПО СтажиФизическихЛиц.ФизическоеЛицо = СтажиФизическихЛицСрезПоследних.ФизическоеЛицо
		|				И СтажиФизическихЛиц.ВидСтажа = СтажиФизическихЛицСрезПоследних.ВидСтажа
		|		ПО ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И ФизическиеЛицаСВидамиСтажей.Период = СтажиФизическихЛиц.Период
		|			И ФизическиеЛицаСВидамиСтажей.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|ИТОГИ ПО
		|	ФизическоеЛицо";
	
	ВыборкаПоФизическимЛицам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтажиФизическихЛиц = Новый Соответствие;
	Пока ВыборкаПоФизическимЛицам.Следующий() Цикл
		
		СоответствиеСтажей = Новый Соответствие;
		ВыборкаПоСтажам = ВыборкаПоФизическимЛицам.Выбрать();
		Пока ВыборкаПоСтажам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСтажам.ВидСтажа) Тогда
				
				СведенияОСтаже = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
				ЗаполнитьЗначенияСвойств(СведенияОСтаже, ВыборкаПоСтажам);
				
				СоответствиеСтажей.Вставить(ВыборкаПоСтажам.ВидСтажа, СведенияОСтаже);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтажиФизическихЛиц.Вставить(ВыборкаПоФизическимЛицам.ФизическоеЛицо, СоответствиеСтажей);
		
	КонецЦикла;
	
	Возврат СтажиФизическихЛиц;
	
КонецФункции

#КонецОбласти


#Область ПолучениеСотрудниковОрганизации

Функция КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы) Экспорт
	
	КритерииПоиска = Новый Соответствие;
	ОтборыБазовыхКадровыхДанных = Новый Массив;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли; 
	
	ЕстьПодсистемаДистанционнаяРабота = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота");
	Если ЕстьПодсистемаДистанционнаяРабота Тогда
		МодульДистанционнаяРабота = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРабота");
	КонецЕсли;
	
	ЕстьПодсистемаРабочиеМестаОхраныТруда = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда");
	Если ЕстьПодсистемаРабочиеМестаОхраныТруда Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
	КонецЕсли;
	
	Для каждого УсловиеПоиска Из Отборы Цикл
		
		Если ТипЗнч(УсловиеПоиска) = Тип("Соответствие") Тогда
			
			Для каждого ЭлементСоответствия Из УсловиеПоиска Цикл
				КритерииПоиска.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			КонецЦикла;
			
			Продолжить;
			
		ИначеЕсли ДобавитьКритерийПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУченыхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУченыхСтепеняхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПочетныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОРазрядахКатегориях(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПКУ(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОСостоянииСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОТерриторияхСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОГрафикахРаботыСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаДистанционнаяРабота
				И МодульДистанционнаяРабота.ДобавитьКритерийПоискаПоСведениямОДистанционнойРаботеСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаРабочиеМестаОхраныТруда
				И МодульРабочиеМестаОхраныТруда.ДобавитьКритерийПоискаПоСведениямОРабочихМестахСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямОКлассныхЧинахРангахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямОВоинскихСпециальныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямОКонтрактахВоеннослужащих(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямРеестраГосслужащих(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПриостановленииТрудовыхДоговоров(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУчетеЗатрат(КритерииПоиска, УсловиеПоиска) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОтборыБазовыхКадровыхДанных.Добавить(УсловиеПоиска);
		
	КонецЦикла;
	
	КритерииПоискаПоСтажам = КритерииПоиска.Получить("РегистрСведений.СтажиФизическихЛиц");
	Если КритерииПоискаПоСтажам <> Неопределено Тогда
		
		Для Каждого КритерийПоиска Из КритерииПоиска Цикл
			
			Если СтрНайти(КритерийПоиска.Ключ, "РегистрСведений.СтажиФизическихЛиц.") = 1 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КритерийПоиска.Значение, КритерииПоискаПоСтажам);
			КонецЕсли;
			
		КонецЦикла;
		
		КритерииПоиска.Удалить("РегистрСведений.СтажиФизическихЛиц")
		
	КонецЕсли;
	
	КадровыйУчет.УдалитьПустыеКритерииПоиска(КритерииПоиска);
	
	УточнитьУсловияКритериевПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска);
	
	Если ОтборыБазовыхКадровыхДанных.Количество() > 0 Тогда
		
		КритерииПоискаБазовыхКадровыхДанных = КадровыйУчетБазовый.КритерииПоискаСотрудниковПоКоллекцииОтборов(ОтборыБазовыхКадровыхДанных);
		Для каждого КритерийПоиска Из КритерииПоискаБазовыхКадровыхДанных Цикл
			
			ОписаниеКритерия = КритерииПоиска.Получить(КритерийПоиска.Ключ);
			Если ОписаниеКритерия = Неопределено Тогда
				КритерииПоиска.Вставить(КритерийПоиска.Ключ, КритерийПоиска.Значение);
			Иначе
				КритерииПоиска.Вставить(КритерийПоиска.Ключ + ".БазовыеКадровыеДанные", КритерийПоиска.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КритерииПоиска;
	
КонецФункции

Процедура СоздатьВТСтажиФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСтажиФизическихЛиц = "ВТСтажиФизическихЛиц") Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда		
		ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(
								ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц,
								"ФизическоеЛицо");
								
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ПроверитьСтажиФизическихЛиц(МенеджерВременныхТаблиц, ОписаниеФильтра);
	КонецЕсли;
	
	Запрос = ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСтажиФизическихЛиц);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииПолученияДанныхДляОтчетов

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания, ИспользоватьКраткиеПредставления, ВыводитьДенежныеПоказателиСВалютой, ФормироватьСПериодичностьДень) Экспорт
	
	ОписанияНачисленийПоПериодам = Новый Соответствие;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		Возврат ОписанияНачисленийПоПериодам;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТСотрудникиПериоды, "Сотрудник");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Начисление.СпособВыполненияНачисления", "<>", Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета);
	
	ПараметрыПостроенияПоказателей = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияПоказателей.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.УточнитьПараметрыПостроенияСрезаНачислений(ПараметрыПостроения);
		МодульУправленческаяЗарплата.УточнитьПараметрыПостроенияСрезаЗначенийПоказателей(ПараметрыПостроенияПоказателей);
	КонецЕсли;
	
	ВременныеТаблицыКУничтожению = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисленияСрезПоследних");
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыйФОТСрезПоследних");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисления.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ КАК Размер,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.ПериодВозвратногоСобытия,
		|	ПлановыеНачисления.ДокументОснование
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Период = ПлановыйФОТ.Период
		|			И ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	МИНИМУМ(ПлановыеНачисления.Начисление.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ВТОсновныеНачисленияСотрудников
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Начисление.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	МИНИМУМ(НачисленияПоказатели.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНачислениеСПоказателемТарифнойСтавки
		|ИЗ
		|	ВТПлановыеНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Начисление
		|
		|ИМЕЮЩИЕ
		|	НЕ МИНИМУМ(НачисленияПоказатели.НомерСтроки) ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачислениеСПоказателем
		|ИЗ
		|	ВТНачислениеСПоказателемТарифнойСтавки КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И Начисления.НомерСтроки = НачисленияПоказатели.НомерСтроки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	НачисленияПоказатели.Показатель
		|ИЗ
		|	ВТПлановыеНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ОсновнойПоказатель)";
	
	Запрос.Выполнить();
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисления");
	ВременныеТаблицыКУничтожению.Добавить("ВТОсновныеНачисленияСотрудников");
	ВременныеТаблицыКУничтожению.Добавить("ВТНачислениеСПоказателемТарифнойСтавки");
	ВременныеТаблицыКУничтожению.Добавить("ВТНачислениеСПоказателем");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер,
		|	ПлановыеНачисления.Начисление.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	НачислениеСПоказателем.Показатель,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.ПериодВозвратногоСобытия,
		|	ПлановыеНачисления.ДокументОснование
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСПоказателем
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеСПоказателем КАК НачислениеСПоказателем
		|		ПО ПлановыеНачисления.Начисление = НачислениеСПоказателем.Начисление";
	
	Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПериоды + " КАК СотрудникиПериоды
			|	ПО ПлановыеНачисления.Период = СотрудникиПериоды." + ИмяПоляПериод + "
			|		И ПлановыеНачисления.Сотрудник = СотрудникиПериоды." + ИмяПоляСотрудник;
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,",
			"СотрудникиПериоды." + ИмяПоляДатаОкончания + " КАК ДатаОкончания,");
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСПоказателем.Период,
		|	НачисленияСПоказателем.Показатель,
		|	НачисленияСПоказателем.Сотрудник,
		|	НачисленияСПоказателем.ДокументОснование
		|ПОМЕСТИТЬ ВТОтборПоказателей
		|ИЗ
		|	ВТПлановыеНачисленияСПоказателем КАК НачисленияСПоказателем";
	
	Запрос.Выполнить();
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисленияСПоказателем");
	ВременныеТаблицыКУничтожению.Добавить("ВТОтборПоказателей");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборПоказателей", "Сотрудник,Показатель,ДокументОснование");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроенияПоказателей);
	
	ВременныеТаблицыКУничтожению.Добавить("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период КАК Период,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи) КАК ПериодЗаписи,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник КАК Сотрудник,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель КАК Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.ПериодВозвратногоСобытия КАК Период,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисления.Начисление КАК Начисление
		|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.Выполнить();
	
	ВременныеТаблицыКУничтожению.Добавить("ВТОтборВозвратныхСобытийПлановыеНачисления");
	ВременныеТаблицыКУничтожению.Добавить("ВТОтборВозвратныхСобытийЗначенияПоказателей");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление"),
		ПараметрыПостроения,
		"ВТПлановыеНачисленияВозвратные");
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисленияВозвратные");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСПоказателем.Период КАК Период,
		|	ПлановыеНачисленияСПоказателем.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияСПоказателем.Начисление КАК Начисление,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).Наименование КАК НачислениеНаименование,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование = """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование
		|	КОНЕЦ КАК НачислениеКраткоеНаименование,
		|	ПлановыеНачисленияСПоказателем.РеквизитДопУпорядочивания * ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК РеквизитДопУпорядочивания,
		|	СУММА(ПлановыеНачисленияСПоказателем.Размер) КАК Размер,
		|	ПлановыеНачисленияСПоказателем.Используется КАК Используется,
		|	ПлановыеНачисленияСПоказателем.Показатель КАК Показатель,
		|	ПлановыеНачисленияСПоказателем.Показатель.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Денежный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДенежныйПоказатель,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Наименование КАК ПоказательНаименование,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).КраткоеНаименование <> """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).КраткоеНаименование
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование <> """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Наименование
		|	КОНЕЦ КАК ПоказательКраткоеНаименование,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Точность КАК Точность,
		|	СУММА(ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение, 0)) КАК Значение,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОкладТариф,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияНачисления,
		|	ПлановыеНачисленияВозвратные.Используется КАК ИспользуетсяПоОкончании
		|ИЗ
		|	ВТПлановыеНачисленияСПоказателем КАК ПлановыеНачисленияСПоказателем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		|			ПО ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование
		|		ПО (ПлановыеНачисленияСПоказателем.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период)
		|			И (ПлановыеНачисленияСПоказателем.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник)
		|			И (ПлановыеНачисленияСПоказателем.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель)
		|			И (ПлановыеНачисленияСПоказателем.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
		|		ПО ПлановыеНачисленияСПоказателем.Период = ОсновныеНачисленияСотрудников.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ОсновныеНачисленияСотрудников.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ОсновныеНачисленияСотрудников.ДокументОснование
		|			И ПлановыеНачисленияСПоказателем.РеквизитДопУпорядочивания = ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
		|		ПО ПлановыеНачисленияСПоказателем.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.Начисление = ПлановыеНачисленияВозвратные.Начисление
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
		|			И (ПлановыеНачисленияВозвратные.ЭтоВозвратноеСобытие)
		|ГДЕ
		|	(ПлановыеНачисленияСПоказателем.Используется
		|			ИЛИ ПлановыеНачисленияВозвратные.Используется)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисленияСПоказателем.Период,
		|	ПлановыеНачисленияСПоказателем.Сотрудник,
		|	ПлановыеНачисленияСПоказателем.Начисление,
		|	ПлановыеНачисленияСПоказателем.Используется,
		|	ПлановыеНачисленияСПоказателем.Показатель,
		|	ПлановыеНачисленияСПоказателем.Показатель.ВидТарифнойСтавки,
		|	ПлановыеНачисленияВозвратные.Используется,
		|	ПлановыеНачисленияСПоказателем.РеквизитДопУпорядочивания * ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Сотрудник,
		|	РеквизитДопУпорядочивания,
		|	Показатель
		|ИТОГИ ПО
		|	Сотрудник,
		|	Период";
	
	Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисленияСПоказателем.Период КАК Период,",
			"ПлановыеНачисленияСПоказателем.Период КАК Период,
			|	ПлановыеНачисленияСПоказателем.ДатаОкончания КАК ДатаОкончания,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисленияСПоказателем.Период,",
			"ПлановыеНачисленияСПоказателем.Период,
			|	ПлановыеНачисленияСПоказателем.ДатаОкончания,");
		
	КонецЕсли;
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		ОписанияНачислений = Новый Соответствие;
		ВыборкаПоПериодам = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			ВыведенныеПоказатели = Новый Соответствие;
			ОписаниеОкладаЗаполнялось = Ложь;
			
			ОписаниеСоставаНачислений = КадровыйУчетБазовый.ОписаниеСоставаНачислений();
			Выборка = ВыборкаПоПериодам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Значение) И ВыведенныеПоказатели.Получить(Выборка.Показатель) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ОписаниеОкладаЗаполнялось И Выборка.ОкладТариф И Выборка.Используется Тогда
					
					ОписаниеСоставаНачислений.Вставить("ПоказательОкладТариф", Выборка.Показатель);
					ОписаниеСоставаНачислений.Вставить("ОкладТариф", Выборка.Значение);
					
					Если ЗначениеЗаполнено(Выборка.Значение) Тогда
						ВыведенныеПоказатели.Вставить(Выборка.Показатель, Истина);
					КонецЕсли;
					
					Если ИспользоватьКраткиеПредставления Тогда
						ПредставлениеТарифнойСтавки = ?(ПустаяСтрока(Выборка.ПоказательКраткоеНаименование), Строка(Выборка.НачислениеКраткоеНаименование), Строка(Выборка.ПоказательКраткоеНаименование))
					Иначе
						
						Если Выборка.Значение = 0 Тогда
							ПредставлениеТарифнойСтавки = Выборка.НачислениеНаименование;
						Иначе
							ПредставлениеТарифнойСтавки = ?(ПустаяСтрока(Выборка.ПоказательНаименование), Выборка.НачислениеНаименование, Выборка.ПоказательНаименование)
						КонецЕсли;
						
					КонецЕсли;
					
					Если Выборка.Значение > 0 Тогда
						
						ПредставлениеТарифнойСтавки =
							ПредставлениеТарифнойСтавки + ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ=");
						
						Если ВыводитьДенежныеПоказателиСВалютой И Выборка.ДенежныйПоказатель Тогда
							
							ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru = 'руб.';
																									|en = 'rub.'");
							
							Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
								ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru = 'за час';
																										|en = 'per hour'");
							ИначеЕсли Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
								ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru = 'за день';
																										|en = 'per day'");
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ОписаниеСоставаНачислений.Вставить("ОписаниеОклада", ПредставлениеТарифнойСтавки);
					
					ОписаниеОкладаЗаполнялось = Истина;
					
				Иначе
					
					Если Выборка.ОкладТариф
						И Не Выборка.Используется Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если Выборка.Используется Тогда
						
						ОписаниеНадбавок = ОписаниеСоставаНачислений.ОписаниеНадбавок;
						
						Если ИспользоватьКраткиеПредставления Тогда
							ПредставлениеПоказателя = ?(ПустаяСтрока(Выборка.ПоказательКраткоеНаименование), Выборка.НачислениеКраткоеНаименование, Выборка.ПоказательКраткоеНаименование);
						Иначе
							
							Если Выборка.Значение = 0 Тогда
								ПредставлениеПоказателя = Выборка.НачислениеНаименование;
							Иначе
								ПредставлениеПоказателя = ?(ПустаяСтрока(Выборка.ПоказательНаименование), Выборка.НачислениеНаименование, Выборка.ПоказательНаименование);
							КонецЕсли;
							
						КонецЕсли;
						
						ОписаниеНадбавок = ?(ПустаяСтрока(ОписаниеНадбавок), "", ОписаниеНадбавок + "; ") + ПредставлениеПоказателя;
						
						ИнформациюОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Выборка.Начисление);
						Если ИнформациюОВидеРасчета.Рассчитывается Тогда
							Значение = Выборка.Значение;
							ДенежныйПоказатель = Выборка.ДенежныйПоказатель;
							Точность = Выборка.Точность;
						Иначе
							Значение = Выборка.Размер;
							ДенежныйПоказатель = Истина;
							Точность = 2;
						КонецЕсли;
						
						Если Значение > 0 Тогда
							
							ОписаниеНадбавок = ОписаниеНадбавок + ": " + Формат(Значение, "ЧДЦ=" + Точность + "; ЧГ=");
						
							Если ВыводитьДенежныеПоказателиСВалютой И ДенежныйПоказатель Тогда
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru = 'руб.';
																				|en = 'rub.'");
							КонецЕсли;
						
						КонецЕсли;
						
						Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
							
							Если ЗначениеЗаполнено(Выборка.ДатаОкончанияНачисления)
								И Выборка.ДатаОкончанияНачисления < Выборка.ДатаОкончания
								И Не Выборка.ИспользуетсяПоОкончании Тогда
								
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru = 'по';
																				|en = 'to'") + " " + Формат(Выборка.ДатаОкончанияНачисления, "ДЛФ=D");
								
							ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаОкончания)
								И ЗначениеЗаполнено(Выборка.Значение) Тогда
								
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru = 'по';
																				|en = 'to'") + " " + Формат(Выборка.ДатаОкончания, "ДЛФ=D");
								
							КонецЕсли;
						
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Выборка.Значение) Тогда
							ВыведенныеПоказатели.Вставить(Выборка.Показатель, Истина);
						КонецЕсли;
					
					ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаОкончанияНачисления) Тогда
						
						ОписаниеНадбавок = ОписаниеСоставаНачислений.ОписаниеНадбавок;
						ОписаниеНадбавок = 
							?(ПустаяСтрока(ОписаниеНадбавок), "", ОписаниеНадбавок + "; ")
							+ ?(ПустаяСтрока(Выборка.Показатель), Выборка.Начисление, Выборка.Показатель)
							+ ?(Выборка.Значение = 0, "", ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ="))
							+ " " + НСтр("ru = 'с';
										|en = 'from'") + " " + Формат(КонецДня(Выборка.ДатаОкончанияНачисления) + 1, "ДЛФ=D");
							
					КонецЕсли;
					
					ОписаниеСоставаНачислений.Вставить("ОписаниеНадбавок", ОписаниеНадбавок);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОписанияНачислений.Вставить(ВыборкаПоПериодам.Период, ОписаниеСоставаНачислений);
			
		КонецЦикла;
		
		ОписанияНачисленийПоПериодам.Вставить(ВыборкаПоСотрудникам.Сотрудник, ОписанияНачислений);
		
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, ВременныеТаблицыКУничтожению, Истина);
	
	Возврат ОписанияНачисленийПоПериодам;
	
КонецФункции

Функция СформироватьЗапросДляТ6(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтпускПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК Период,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.Организация КАК Организация,
		|	ОтпускПоУходуЗаРебенком.Ссылка КАК Ссылка,
		|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтпускаПоУходу
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТОтпускаПоУходу");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДатаНачалаУчета,Организация,ФизическоеЛицо");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускаПоУходу.Сотрудник КАК Сотрудник,
		|	ОтпускаПоУходу.Сотрудник КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ДанныеСотрудников.ДатаНачалаУчета > ОтпускаПоУходу.ДатаНачала
		|			ТОГДА ДанныеСотрудников.ДатаНачалаУчета
		|		ИНАЧЕ ОтпускаПоУходу.ДатаНачала
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТОсновныеСотрудникиПериоды
		|ИЗ
		|	ВТОтпускаПоУходу КАК ОтпускаПоУходу
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ДанныеСотрудников
		|		ПО ОтпускаПоУходу.Сотрудник = ДанныеСотрудников.Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Сотрудник КАК Сотрудник,
		|	Отпуск.ДатаНачалаСобытия КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаСобытия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускаПоУходу.Сотрудник,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТОтпускаПоУходу КАК ОтпускаПоУходу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ОтпускаПоУходу.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ОтпускаПоУходу.Организация = КадровыеДанныеСотрудников.Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаПоУходу.Сотрудник,
		|	КадровыеДанныеСотрудников.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	БольничныйЛист.ДатаНачала
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО БольничныйЛист.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И БольничныйЛист.Организация.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|			И (Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник)
		|ГДЕ
		|	БольничныйЛист.Ссылка В(&МассивОбъектов)
		|	И БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Ссылка,
		|	БольничныйЛист.ДатаНачала";
	
	Запрос.Выполнить();
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность,РазрядКатегория,ДатаНачалаУчета,ДатаУвольнения");
	
	// Получение продолжительности дней отпусков
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ВидРасчетаОсновногоОтпуска КАК ВидРасчета,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВидыРасчетаОтпусков
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.ВидРасчета,
		|	ОтпускДополнительныеОтпуска.ДатаНачала,
		|	ОтпускДополнительныеОтпуска.ДатаОкончания
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	Отпуск.ВидРасчетаКомпенсацииОсновногоОтпуска,
		|	Отпуск.ДатаНачалаОсновногоОтпуска,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.ВидРасчетаКомпенсации,
		|	ОтпускДополнительныеОтпуска.ДатаНачала,
		|	ОтпускДополнительныеОтпуска.ДатаОкончания
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРасчетаОтпусков.Ссылка,
		|	ВидыРасчетаОтпусков.ВидРасчета,
		|	ВидыРасчетаОтпусков.ДатаНачала,
		|	ВидыРасчетаОтпусков.ДатаОкончания,
		|	ОтпускНачисления.ОплаченоДней
		|ПОМЕСТИТЬ ВТПродолжительностьОтпусков
		|ИЗ
		|	ВТВидыРасчетаОтпусков КАК ВидыРасчетаОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Начисления КАК ОтпускНачисления
		|		ПО ВидыРасчетаОтпусков.Ссылка = ОтпускНачисления.Ссылка
		|			И ВидыРасчетаОтпусков.ВидРасчета = ОтпускНачисления.Начисление
		|			И ВидыРасчетаОтпусков.ДатаНачала = ОтпускНачисления.ДатаНачала
		|			И ВидыРасчетаОтпусков.ДатаОкончания = ОтпускНачисления.ДатаОкончания";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ОтпускаПоУходу.ДатаНачала ЕСТЬ NULL
		|				И ОтпускаПоУходу.ДатаНачала < КадровыеДанныеСотрудников.ДатаНачалаУчета
		|			ТОГДА ОтпускаПоУходу.ДатаНачала
		|		ИНАЧЕ КадровыеДанныеСотрудников.Период
		|	КОНЕЦ КАК Период,
		|	КадровыеДанныеСотрудников.ДатаНачалаУчета КАК ДатаНачалаУчета,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности) КАК Должность,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей) КАК РазрядКатегория
		|ПОМЕСТИТЬ ВТДанныеДляПечати
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаПоУходу КАК ОтпускаПоУходу
		|		ПО КадровыеДанныеСотрудников.Сотрудник = ОтпускаПоУходу.Сотрудник
		|			И КадровыеДанныеСотрудников.Организация = ОтпускаПоУходу.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник КАК Сотрудник,
		|	ДанныеДляПечати.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Отпуск.Организация КАК Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ДанныеДляПечати.Работник КАК Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL
		|			ТОГДА Отпуск.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ КАК НомерДок,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА Отпуск.ДатаПервичногоДокумента = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА Отпуск.Дата
		|					ИНАЧЕ Отпуск.ДатаПервичногоДокумента
		|				КОНЕЦ
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ КАК ДатаДок,
		|	ДанныеДляПечати.ТабельныйНомер КАК ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """") КАК Должность,
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """") КАК РазрядКатегория,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ВЫБОР
		|		КОГДА Отпуск.ПредоставитьОсновнойОтпуск
		|			ТОГДА Отпуск.ДатаНачалаОсновногоОтпуска
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА Отпуск.ПредоставитьОсновнойОтпуск
		|			ТОГДА Отпуск.ДатаОкончанияОсновногоОтпуска
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА Отпуск.ПредоставитьОсновнойОтпуск
		|			ТОГДА ЕСТЬNULL(ПродолжительностьОтпусков.ОплаченоДней, Отпуск.КоличествоДнейОсновногоОтпуска)
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска
		|			ТОГДА ЕСТЬNULL(ПродолжительностьОтпусковКомпенсация.ОплаченоДней, Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Продолжительность,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
		|	ИСТИНА КАК ЭтоОсновнойОтпуск,
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ КАК ПолноеНаименованиеОтпуска,
		|	Отпуск.Основание КАК Основание,
		|	Отпуск.Дата КАК Дата,
		|	Отпуск.Руководитель КАК Руководитель,
		|	Отпуск.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Отпуск.Бухгалтер КАК Бухгалтер,
		|	Отпуск.РаботникКадровойСлужбы КАК РаботникКадровойСлужбы,
		|	Отпуск.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьРаботникаКадровойСлужбы,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Ссылка ЕСТЬ NULL
		|			ТОГДА Отпуск.НомерПервичногоДокумента
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК НомерПервичногоДокумента
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО (ВидыОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусков
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусков.Ссылка
		|				И Отпуск.ВидРасчетаОсновногоОтпуска = ПродолжительностьОтпусков.ВидРасчета
		|				И Отпуск.ДатаНачалаОсновногоОтпуска = ПродолжительностьОтпусков.ДатаНачала
		|				И Отпуск.ДатаОкончанияОсновногоОтпуска = ПродолжительностьОтпусков.ДатаОкончания
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусковКомпенсация
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусковКомпенсация.Ссылка
		|				И Отпуск.ВидРасчетаКомпенсацииОсновногоОтпуска = ПродолжительностьОтпусковКомпенсация.ВидРасчета
		|				И (Отпуск.ДатаНачалаОсновногоОтпуска = ПродолжительностьОтпусков.ДатаНачала)
		|				И (Отпуск.ДатаОкончанияОсновногоОтпуска = ПродолжительностьОтпусков.ДатаОкончания)
		|		ПО ДанныеДляПечати.Сотрудник = Отпуск.Сотрудник
		|			И ДанныеДляПечати.Период = Отпуск.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (Отпуск.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|	И (Отпуск.ПредоставитьОсновнойОтпуск
		|			ИЛИ Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ДанныеДляПечати.ФизическоеЛицо,
		|	ОтпускДокумент.Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL
		|			ТОГДА Отпуск.Ссылка.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL
		|			ТОГДА Отпуск.Ссылка.Дата
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ВЫБОР
		|		КОГДА Отпуск.КоличествоДней > 0
		|			ТОГДА Отпуск.ДатаНачала
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Отпуск.КоличествоДней > 0
		|			ТОГДА Отпуск.ДатаОкончания
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Отпуск.ВидОтпуска.ОтпускБезОплаты
		|			ТОГДА Отпуск.КоличествоДней
		|		ИНАЧЕ ЕСТЬNULL(ПродолжительностьОтпусков.ОплаченоДней, Отпуск.КоличествоДней)
		|	КОНЕЦ + ЕСТЬNULL(ПродолжительностьОтпусковКомпенсация.ОплаченоДней, Отпуск.КоличествоДнейКомпенсации),
		|	Отпуск.ВидОтпуска,
		|	ЛОЖЬ,
		|	Отпуск.Ссылка,
		|	Отпуск.Ссылка.ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ,
		|	Отпуск.Основание,
		|	Отпуск.Ссылка.Дата,
		|	Отпуск.Ссылка.Руководитель,
		|	Отпуск.Ссылка.ДолжностьРуководителя,
		|	Отпуск.Ссылка.Бухгалтер,
		|	Отпуск.Ссылка.РаботникКадровойСлужбы,
		|	Отпуск.Ссылка.ДолжностьРаботникаКадровойСлужбы,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Ссылка ЕСТЬ NULL
		|			ТОГДА Отпуск.Ссылка.НомерПервичногоДокумента
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК Отпуск
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО Отпуск.ВидОтпуска = ВидыОтпусков.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК ОтпускДокумент
		|			ПО Отпуск.Ссылка = ОтпускДокумент.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусков
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусков.Ссылка
		|				И Отпуск.ВидРасчета = ПродолжительностьОтпусков.ВидРасчета
		|				И Отпуск.ДатаНачала = ПродолжительностьОтпусков.ДатаНачала
		|				И Отпуск.ДатаОкончания = ПродолжительностьОтпусков.ДатаОкончания
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусковКомпенсация
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусковКомпенсация.Ссылка
		|				И Отпуск.ВидРасчетаКомпенсации = ПродолжительностьОтпусковКомпенсация.ВидРасчета
		|				И (Отпуск.ДатаНачала = ПродолжительностьОтпусков.ДатаНачала)
		|				И (Отпуск.ДатаОкончания = ПродолжительностьОтпусков.ДатаОкончания)
		|		ПО ДанныеДляПечати.Сотрудник = Отпуск.Ссылка.Сотрудник
		|			И ДанныеДляПечати.Период = Отпуск.Ссылка.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (Отпуск.Ссылка.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|	И ОтпускДокумент.ПредоставитьДополнительныйОтпуск
		|	И Отпуск.КоличествоДней + Отпуск.КоличествоДнейКомпенсации > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ДанныеДляПечати.ФизическоеЛицо,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL
		|			ТОГДА ОтпускБезСохраненияОплаты.Ссылка.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL
		|			ТОГДА ОтпускБезСохраненияОплаты.Ссылка.Дата
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплаты.ДатаНачала, ОтпускБезСохраненияОплаты.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	ЛОЖЬ,
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ,
		|	ОтпускБезСохраненияОплаты.Основание,
		|	ОтпускБезСохраненияОплаты.Дата,
		|	ОтпускБезСохраненияОплаты.Руководитель,
		|	ОтпускБезСохраненияОплаты.ДолжностьРуководителя,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Ссылка ЕСТЬ NULL
		|			ТОГДА ОтпускБезСохраненияОплаты.Ссылка.НомерПервичногоДокумента
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО (ВидыОтпусков.Ссылка = ОтпускБезСохраненияОплаты.ВидОтпуска)
		|		ПО ДанныеДляПечати.Сотрудник = ОтпускБезСохраненияОплаты.Сотрудник
		|			И ДанныеДляПечати.Период = ОтпускБезСохраненияОплаты.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (ОтпускБезСохраненияОплаты.Ссылка.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ДанныеДляПечати.ФизическоеЛицо,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	ОтпускПоУходуЗаРебенком.Номер,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
		|	РАЗНОСТЬДАТ(ОтпускПоУходуЗаРебенком.ДатаНачала, ОтпускПоУходуЗаРебенком.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	ЛОЖЬ,
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	&НаименованиеОтпускаПоУходуЗаРебенком,
		|	NULL,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ОтпускПоУходуЗаРебенком.Руководитель,
		|	ОтпускПоУходуЗаРебенком.ДолжностьРуководителя,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ОтпускПоУходуЗаРебенком.НомерПриказа
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|		ПО ДанныеДляПечати.ФизическоеЛицо = ОтпускПоУходуЗаРебенком.Сотрудник
		|			И ДанныеДляПечати.Организация = ОтпускПоУходуЗаРебенком.Организация
		|			И ДанныеДляПечати.Период = ОтпускПоУходуЗаРебенком.ДатаНачала
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)
		|	И НАЧАЛОПЕРИОДА(ДанныеДляПечати.ДатаНачалаУчета, ДЕНЬ) <= ОтпускПоУходуЗаРебенком.ДатаНачала
		|	И (ДанныеДляПечати.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДляПечати.ДатаУвольнения > ДанныеДляПечати.Период)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ДанныеДляПечати.ФизическоеЛицо,
		|	БольничныйЛист.Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	БольничныйЛист.Номер,
		|	БольничныйЛист.Дата,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	БольничныйЛист.ДатаНачала,
		|	БольничныйЛист.ДатаОкончания,
		|	РАЗНОСТЬДАТ(БольничныйЛист.ДатаНачала, БольничныйЛист.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	ЛОЖЬ,
		|	БольничныйЛист.Ссылка,
		|	БольничныйЛист.ДатаНачалаСобытия,
		|	&НаименованиеОтпускаПоБеременностиИРодам,
		|	NULL,
		|	БольничныйЛист.Дата,
		|	БольничныйЛист.Руководитель,
		|	БольничныйЛист.ДолжностьРуководителя,
		|	NULL,
		|	NULL,
		|	NULL,
		|	БольничныйЛист.НомерПервичногоДокумента
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
		|		ПО ДанныеДляПечати.ФизическоеЛицо = БольничныйЛист.ФизическоеЛицо
		|			И (ВЫРАЗИТЬ(ДанныеДляПечати.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация = БольничныйЛист.Организация.ГоловнаяОрганизация)
		|			И ДанныеДляПечати.Период = БольничныйЛист.ДатаНачала
		|			И (БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам))
		|ГДЕ
		|	БольничныйЛист.Ссылка В(&МассивОбъектов)
		|	И НАЧАЛОПЕРИОДА(ДанныеДляПечати.ДатаНачалаУчета, ДЕНЬ) <= БольничныйЛист.ДатаНачала
		|	И (ДанныеДляПечати.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДляПечати.ДатаУвольнения > ДанныеДляПечати.Период)";
	
	Запрос.УстановитьПараметр("НаименованиеОтпускаПоБеременностиИРодам", НСтр("ru = 'Отпуск по беременности и родам';
																				|en = 'Maternity leave'"));
	
	Запрос.УстановитьПараметр("НаименованиеОтпускаПоУходуЗаРебенком", НСтр("ru = 'Отпуск по уходу за ребенком';
																			|en = 'Child care leave'"));
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("Бухгалтер");
	ИменаПолей.Добавить("РаботникКадровойСлужбы");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокументов.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокументов.Организация КАК Справочник.Организации).НаименованиеПолное КАК НазваниеОрганизации,
		|	ДанныеДокументов.КодПоОКПО,
		|	ДанныеДокументов.Работник,
		|	ДанныеДокументов.НомерДок,
		|	ДанныеДокументов.ДатаДок,
		|	ДанныеДокументов.ТабельныйНомер,
		|	ДанныеДокументов.Подразделение,
		|	ДанныеДокументов.Должность,
		|	ДанныеДокументов.РазрядКатегория,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыОтпусков.ОтпускЯвляетсяЕжегодным, ИСТИНА)
		|			ТОГДА ДанныеДокументов.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыОтпусков.ОтпускЯвляетсяЕжегодным, ИСТИНА)
		|			ТОГДА ДанныеДокументов.КонецПериодаЗаКоторыйПредоставляетсяОтпуск
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.ДатаНачала,
		|	ДанныеДокументов.ДатаОкончания,
		|	ДанныеДокументов.Продолжительность,
		|	ДанныеДокументов.ВидОтпуска,
		|	ДанныеДокументов.ЭтоОсновнойОтпуск,
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.ДатаНачалаСобытия,
		|	ДанныеДокументов.ПолноеНаименованиеОтпуска,
		|	ДанныеДокументов.Основание,
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.Руководитель,
		|	ДанныеДокументов.ДолжностьРуководителя,
		|	ДанныеДокументов.ДолжностьРаботникаКадровойСлужбы,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
		|	ФИОКадровика.РасшифровкаПодписи КАК РаботникКадровойСлужбыРасшифровкаПодписи,
		|	ДанныеДокументов.НомерПервичногоДокумента
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
		|		ПО ДанныеДокументов.Дата = ФИОБухгалтера.Дата
		|			И ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
		|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКадровика
		|		ПО ДанныеДокументов.Дата = ФИОКадровика.Дата
		|			И ДанныеДокументов.Ссылка = ФИОКадровика.Ссылка
		|			И ДанныеДокументов.РаботникКадровойСлужбы = ФИОКадровика.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ДанныеДокументов.ВидОтпуска = ВидыОтпусков.Ссылка
		|ИТОГИ ПО
		|	Ссылка,
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СформироватьЗапросДляТ60(МассивОбъектов) Экспорт
	
	Результаты = Новый Структура("КадровыеОтпуска, Начисления, Удержания, НДФЛ");
	Результаты.Вставить("КадровыеОтпуска", СформироватьЗапросДляТ6(МассивОбъектов));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, "Отпуск", "ВТИсправленныеДокументыОтпусков");	
	
	Запрос.УстановитьПараметр("ВидыНДФЛ", Обработки.МенеджерРасчетаЗарплаты.ВидыНДФЛДополненияРасчетнойБазыУдержаний());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсправленныеДокументыОтпусков.Ссылка,
		|	ИсправленныеДокументыОтпусков.ИсправленныйДокумент КАК ДокументЦепочки
		|ПОМЕСТИТЬ ВТЦепочкаОтпусков
		|ИЗ
		|	ВТИсправленныеДокументыОтпусков КАК ИсправленныеДокументыОтпусков
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ПериодРегистрации КАК ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|			ТОГДА ИСТИНА
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСреднемЗаработке)
		|			ТОГДА ИСТИНА
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСреднемЗаработке)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплатаОтпуска,
		|	НачисленияОтпуска.ДатаНачала КАК ДатаНачала,
		|	СУММА(ВЫБОР
		|			КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСреднемЗаработке)
		|				ТОГДА 0
		|			КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСреднемЗаработке)
		|				ТОГДА 0
		|			ИНАЧЕ НачисленияОтпуска.ОплаченоДней
		|		КОНЕЦ) КАК ОплаченоДней,
		|	СУММА(НачисленияОтпуска.Результат) КАК Результат
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Начисления КАК НачисленияОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетов
		|			ПО НачисленияОтпуска.Начисление = ВидыРасчетов.Ссылка
		|		ПО Отпуск.Ссылка = НачисленияОтпуска.Ссылка
		|ГДЕ
		|	НачисленияОтпуска.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|			ТОГДА ИСТИНА
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСреднемЗаработке)
		|			ТОГДА ИСТИНА
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСреднемЗаработке)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	НачисленияОтпуска.ДатаНачала,
		|	Отпуск.ПериодРегистрации
		|ИТОГИ
		|	МИНИМУМ(ПериодРегистрации),
		|	СУММА(Результат)
		|ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отпуск.Ссылка КАК Ссылка,
		|	УдержанияОтпуска.Удержание КАК Удержание,
		|	СУММА(УдержанияОтпуска.Результат) КАК Результат
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Удержания КАК УдержанияОтпуска
		|		ПО Отпуск.Ссылка = УдержанияОтпуска.Ссылка
		|ГДЕ
		|	УдержанияОтпуска.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Ссылка,
		|	УдержанияОтпуска.Удержание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускПогашениеЗаймов.Ссылка,
		|	""Погашение займов"",
		|	ОтпускПогашениеЗаймов.ПогашениеЗайма + ОтпускПогашениеЗаймов.ПогашениеПроцентов + ОтпускПогашениеЗаймов.НалогНаМатериальнуюВыгоду
		|ИЗ
		|	Документ.Отпуск.ПогашениеЗаймов КАК ОтпускПогашениеЗаймов
		|ГДЕ
		|	ОтпускПогашениеЗаймов.Ссылка В(&МассивОбъектов)
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отпуск.Ссылка КАК Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА НДФЛОтпуска.ЗачетАвансаНДФЛ
		|				ТОГДА 0
		|			ИНАЧЕ НДФЛОтпуска.Сумма
		|		КОНЕЦ) КАК Налог,
		|	СУММА(ВЫБОР
		|			КОГДА НДФЛОтпуска.ЗачетАвансаНДФЛ
		|				ТОГДА НДФЛОтпуска.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗачтеноАвансовыхПлатежей
		|ИЗ
		|	ВТЦепочкаОтпусков КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НДФЛОтпуска
		|		ПО Отпуск.ДокументЦепочки = НДФЛОтпуска.Регистратор
		|			И (НДФЛОтпуска.НачислениеУдержание В (&ВидыНДФЛ))
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Ссылка
		|ИТОГИ ПО
		|	Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();

	Результаты.Вставить("Начисления", 	МассивРезультатов[0]);
	Результаты.Вставить("Удержания", 	МассивРезультатов[1]);
	Результаты.Вставить("НДФЛ", 		МассивРезультатов[2]);
	
	Возврат Результаты;
	
КонецФункции

Функция СформироватьЗапросДляТ61(МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(НАЧАЛОПЕРИОДА(ДанныеДокументов.МесяцНачалаРасчетов, МЕСЯЦ)), ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоПериода,
		|	ЕСТЬNULL(МАКСИМУМ(КОНЕЦПЕРИОДА(ДанныеДокументов.МесяцНачисления, МЕСЯЦ)), ДАТАВРЕМЯ(1, 1, 1)) КАК КонецПериода
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Запрос.УстановитьПараметр("НачалоПериода", Выборка.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", Выборка.КонецПериода);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", '00010101');
		Запрос.УстановитьПараметр("КонецПериода", '00010101');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсчисленныеНалоги", Перечисления.ВидыОсобыхНачисленийИУдержаний.СтрокиИсчисленныхНалогов());

	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		"ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность,ТарифнаяСтавка,ДатаПриема,ДатаУвольнения,ФизическоеЛицо,РазрядКатегория,Пол,ТрудовойДоговорДата,ТрудовойДоговорНомер");
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("РаботникКадровойСлужбы");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка
	|ИЗ
	|	ВТДанныеДокументов КАК Документы
	|ГДЕ
	|	Документы.Ссылка ССЫЛКА Документ.Увольнение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка
	|ИЗ
	|	ВТДанныеДокументов КАК Документы
	|ГДЕ
	|	Документы.Ссылка ССЫЛКА Документ.УвольнениеСписком";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка"), "Увольнение", "ВТИсправленныеДокументыУвольнений");	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка"), "УвольнениеСписком", "ВТИсправленныеДокументыУвольненийСписком");	
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсправленныеДокументыУвольнений.Ссылка КАК Ссылка,
		|	ИсправленныеДокументыУвольнений.ИсправленныйДокумент КАК ДокументЦепочки,
		|	ИсправленныеДокументыУвольнений.Ссылка.ПериодРегистрации = ИсправленныеДокументыУвольнений.ИсправленныйДокумент.ПериодРегистрации КАК ВТекущемПериоде
		|ПОМЕСТИТЬ ВТЦепочкаУвольнений
		|ИЗ
		|	ВТИсправленныеДокументыУвольнений КАК ИсправленныеДокументыУвольнений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка,
		|	Ложь
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсправленныеДокументыУвольнений.Ссылка КАК Ссылка,
		|	ИсправленныеДокументыУвольнений.ИсправленныйДокумент КАК ДокументЦепочки
		|ПОМЕСТИТЬ ВТЦепочкаУвольненийСписком
		|ИЗ
		|	ВТИсправленныеДокументыУвольненийСписком КАК ИсправленныеДокументыУвольнений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка
		|ИЗ
		|	Документ.УвольнениеСписком КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДнейКомпенсацииУдержанияОтпуска.Ссылка,
		|	ДнейКомпенсацииУдержанияОтпуска.Сотрудник,
		|	СУММА(ДнейКомпенсацииУдержанияОтпуска.ДнейКомпенсации) КАК ДнейКомпенсации,
		|	СУММА(ДнейКомпенсацииУдержанияОтпуска.ДнейУдержания) КАК ДнейУдержания
		|ПОМЕСТИТЬ ВТДнейКомпенсацииУдержанияОтпуска
		|ИЗ
		|	(ВЫБРАТЬ
		|		УвольнениеДополнительныеОтпуска.Ссылка КАК Ссылка,
		|		УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник КАК Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДнейКомпенсации,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДнейУдержания
		|	ИЗ
		|		Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|	ГДЕ
		|		УвольнениеДополнительныеОтпуска.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.Увольнение КАК Увольнение
		|	ГДЕ
		|		Увольнение.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеСотрудники.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|			ПО УвольнениеДополнительныеОтпуска.Ссылка = УвольнениеСотрудники.Ссылка
		|				И УвольнениеДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|	ГДЕ
		|		УвольнениеДополнительныеОтпуска.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеСотрудники.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.УвольнениеСписком.Сотрудники КАК Увольнение
		|	ГДЕ
		|		Увольнение.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник) КАК ДнейКомпенсацииУдержанияОтпуска
		|
		|СГРУППИРОВАТЬ ПО
		|	ДнейКомпенсацииУдержанияОтпуска.Ссылка,
		|	ДнейКомпенсацииУдержанияОтпуска.Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УвольнениеНачисления.Ссылка КАК Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник КАК Сотрудник,
		|	СУММА(УвольнениеНачисления.Результат) КАК ВсегоВыплат,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВсегоКВыплате,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоКомпенсации,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисления.Результат
		|		КОНЕЦ) КАК ВсеДругиеНачисления
		|ПОМЕСТИТЬ ВТНачисленияПредварительно
		|ИЗ
		|	Документ.Увольнение.Начисления КАК УвольнениеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисления.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисления.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеНачисления.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисления.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.УвольнениеСписком.Начисления КАК УвольнениеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисления.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисления.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеНачисленияПерерасчет.Ссылка,
		|	УвольнениеНачисленияПерерасчет.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеНачисленияПерерасчет.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеНачисленияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисленияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисленияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисленияПерерасчет.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.Увольнение.НачисленияПерерасчет КАК УвольнениеНачисленияПерерасчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисленияПерерасчет.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисленияПерерасчет.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисленияПерерасчет.Ссылка,
		|	УвольнениеНачисленияПерерасчет.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеНачисленияПерерасчет.Ссылка,
		|	УвольнениеНачисленияПерерасчет.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеНачисленияПерерасчет.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеНачисленияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисленияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисленияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисленияПерерасчет.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.УвольнениеСписком.НачисленияПерерасчет КАК УвольнениеНачисленияПерерасчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисленияПерерасчет.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисленияПерерасчет.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисленияПерерасчет.Ссылка,
		|	УвольнениеНачисленияПерерасчет.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеПособия.Ссылка,
		|	УвольнениеПособия.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеПособия.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеПособия.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеПособия.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеПособия.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеПособия.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.Увольнение.Пособия КАК УвольнениеПособия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеПособия.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеПособия.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеПособия.Ссылка,
		|	УвольнениеПособия.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеПособия.Ссылка,
		|	УвольнениеПособия.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеПособия.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеПособия.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеПособия.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеПособия.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеПособия.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.УвольнениеСписком.Пособия КАК УвольнениеПособия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеПособия.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеПособия.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеПособия.Ссылка,
		|	УвольнениеПособия.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеПособияПерерасчет.Ссылка,
		|	УвольнениеПособияПерерасчет.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеПособияПерерасчет.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеПособияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеПособияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеПособияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеПособияПерерасчет.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.Увольнение.ПособияПерерасчет КАК УвольнениеПособияПерерасчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеПособияПерерасчет.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеПособияПерерасчет.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеПособияПерерасчет.Ссылка,
		|	УвольнениеПособияПерерасчет.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеПособияПерерасчет.Ссылка,
		|	УвольнениеПособияПерерасчет.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеПособияПерерасчет.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА УвольнениеПособияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеПособияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеПособияПерерасчет.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеПособияПерерасчет.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.УвольнениеСписком.ПособияПерерасчет КАК УвольнениеПособияПерерасчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеПособияПерерасчет.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеПособияПерерасчет.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеПособияПерерасчет.Ссылка,
		|	УвольнениеПособияПерерасчет.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ НачисленияУдержанияПоСотрудникам.Сумма
		|		КОНЕЦ)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО НачисленияУдержанияПоСотрудникам.НачислениеУдержание = Начисления.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
		|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник = ДанныеДокументов.Сотрудник
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НачисленияУдержанияПоСотрудникам.Регистратор В
		|			(ВЫБРАТЬ
		|				Документы.ДокументЦепочки
		|			ИЗ
		|				ВТЦепочкаУвольнений КАК Документы)
		|	И (НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|					(ВЫБРАТЬ
		|						Документы.Ссылка
		|					ИЗ
		|						ВТДанныеДокументов КАК Документы)
		|			ИЛИ НачисленияУдержанияПоСотрудникам.Сторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ НачисленияУдержанияПоСотрудникам.Сумма
		|		КОНЕЦ)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО НачисленияУдержанияПоСотрудникам.НачислениеУдержание = Начисления.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
		|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник = ДанныеДокументов.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.Период = ДанныеДокументов.МесяцНачисления
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|				(ВЫБРАТЬ
		|					Документы.ДокументЦепочки
		|				ИЗ
		|					ВТЦепочкаУвольнений КАК Документы)
		|	И (НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|					(ВЫБРАТЬ
		|						Документы.Ссылка
		|					ИЗ
		|						ВТДанныеДокументов КАК Документы)
		|			ИЛИ НачисленияУдержанияПоСотрудникам.Сторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник";
	
	Запрос.Выполнить();
	
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("УвольнениеНДФЛ.Налог");
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Начисления.Ссылка) КАК Ссылка,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	СУММА(Начисления.ВсегоВыплат) КАК ВсегоВыплат,
		|	СУММА(Начисления.ВсегоКВыплате) КАК ВсегоКВыплате,
		|	СУММА(Начисления.НачисленоКомпенсации) КАК НачисленоКомпенсации,
		|	СУММА(Начисления.НачисленоВыходноеПособиеСохраняемыйЗаработок) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	СУММА(Начисления.ВсеДругиеНачисления) КАК ВсеДругиеНачисления
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияПредварительно КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Увольнение.Ссылка КАК Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник КАК Сотрудник,
		|	СУММА(0) КАК СуммаНДФЛ
		|ПОМЕСТИТЬ ВТНДФЛПредварительно
		|ИЗ
		|	ВТЦепочкаУвольнений КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.НДФЛ КАК УвольнениеНДФЛ
		|		ПО Увольнение.ДокументЦепочки = УвольнениеНДФЛ.Ссылка
		|ГДЕ
		|	НЕ Увольнение.ВТекущемПериоде
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеНДФЛ.Налог)
		|ИЗ
		|	ВТЦепочкаУвольненийСписком КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.НДФЛ КАК УвольнениеНДФЛ
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|			ПО УвольнениеНДФЛ.Ссылка = УвольнениеСотрудники.Ссылка
		|				И УвольнениеНДФЛ.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|		ПО Увольнение.ДокументЦепочки = УвольнениеНДФЛ.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеПогашениеЗаймов.НалогНаМатериальнуюВыгоду)
		|ИЗ
		|	ВТЦепочкаУвольнений КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.ПогашениеЗаймов КАК УвольнениеПогашениеЗаймов
		|		ПО Увольнение.ДокументЦепочки = УвольнениеПогашениеЗаймов.Ссылка
		|ГДЕ
		|	УвольнениеПогашениеЗаймов.НалогНаМатериальнуюВыгоду <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСпискомСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеСпискомПогашениеЗаймов.НалогНаМатериальнуюВыгоду)
		|ИЗ
		|	ВТЦепочкаУвольненийСписком КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.ПогашениеЗаймов КАК УвольнениеСпискомПогашениеЗаймов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|			ПО УвольнениеСпискомПогашениеЗаймов.Ссылка = УвольнениеСпискомСотрудники.Ссылка
		|				И УвольнениеСпискомПогашениеЗаймов.ИдентификаторСтрокиСотрудника = УвольнениеСпискомСотрудники.ИдентификаторСтрокиСотрудника
		|		ПО Увольнение.ДокументЦепочки = УвольнениеСпискомПогашениеЗаймов.Ссылка
		|ГДЕ
		|	УвольнениеСпискомПогашениеЗаймов.НалогНаМатериальнуюВыгоду <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСпискомСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
		|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник = ДанныеДокументов.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.Период = ДанныеДокументов.МесяцНачисления
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание В(&ИсчисленныеНалоги)
		|	И (НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|					(ВЫБРАТЬ
		|						Документы.Ссылка
		|					ИЗ
		|						ВТДанныеДокументов КАК Документы)
		|			ИЛИ НачисленияУдержанияПоСотрудникам.Сторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник,
		|	0
		|ИЗ
		|	ВТЦепочкаУвольнений КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК ОбходСитуацииСПустойТЧНДФЛПриНаличииМежрасчета
		|		ПО Увольнение.ДокументЦепочки = ОбходСитуацииСПустойТЧНДФЛПриНаличииМежрасчета.Ссылка
		|ГДЕ
		|	НЕ Увольнение.ВТекущемПериоде
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСотрудники.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	0
		|ИЗ
		|	ВТЦепочкаУвольненийСписком КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО Увольнение.ДокументЦепочки = УвольнениеСотрудники.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеСотрудники.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(НДФЛПредварительно.Ссылка) КАК Ссылка,
		|	НДФЛПредварительно.Сотрудник КАК Сотрудник,
		|	СУММА(НДФЛПредварительно.СуммаНДФЛ) КАК СуммаНДФЛ
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|	ВТНДФЛПредварительно КАК НДФЛПредварительно
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛПредварительно.Сотрудник";
	
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + ?(ЗначениеЗаполнено(ТекстНалогов), "+ ", "") + ИмяРесурса + " ";
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СУММА(0) КАК СуммаНДФЛ", "СУММА(" + ТекстНалогов + ") КАК СуммаНДФЛ");
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УвольнениеУдержания.Ссылка КАК Ссылка,
		|	УвольнениеУдержания.Ссылка.Сотрудник.ГоловнойСотрудник КАК Сотрудник,
		|	СУММА(УвольнениеУдержания.Результат) КАК ПрочиеУдержания
		|ПОМЕСТИТЬ ВТУдержанияПредварительно
		|ИЗ
		|	Документ.Увольнение.Удержания КАК УвольнениеУдержания
		|ГДЕ
		|	УвольнениеУдержания.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеУдержания.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеУдержания.Результат)
		|ИЗ
		|	Документ.УвольнениеСписком.Удержания КАК УвольнениеУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО УвольнениеУдержания.Ссылка = УвольнениеСотрудники.Ссылка
		|			И УвольнениеУдержания.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	УвольнениеУдержания.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеЗайма)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеЗайма)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО Увольнение.Ссылка = УвольнениеСотрудники.Ссылка
		|			И Увольнение.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеПроцентов)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеПроцентов)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО Увольнение.Ссылка = УвольнениеСотрудники.Ссылка
		|			И Увольнение.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
		|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник = ДанныеДокументов.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.Период = ДанныеДокументов.МесяцНачисления
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|	И НЕ НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (&ИсчисленныеНалоги)
		|	И НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Удержания.Ссылка) КАК Ссылка,
		|	Удержания.Сотрудник КАК Сотрудник,
		|	СУММА(Удержания.ПрочиеУдержания) КАК ПрочиеУдержания
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТУдержанияПредварительно КАК Удержания
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыССотрудникамиОбороты.Сотрудник КАК Сотрудник,
		|	СУММА(ВзаиморасчетыССотрудникамиОбороты.СуммаВзаиморасчетовПриход - ВзаиморасчетыССотрудникамиОбороты.СуммаВзаиморасчетовРасход) КАК СуммаВзаиморасчетовРегистратора
		|ПОМЕСТИТЬ ВТДвиженияВзаиморасчетовРегистратора
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					Т.Сотрудник
		|				ИЗ
		|					ВТДанныеДокументов КАК Т)) КАК ВзаиморасчетыССотрудникамиОбороты
		|ГДЕ
		|	ВзаиморасчетыССотрудникамиОбороты.Регистратор В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыССотрудникамиОбороты.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
		|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетовНачальныйОстаток КАК ОстатокВзаиморасчетов,
		|	ВзаиморасчетыССотрудниками.Период КАК Период
		|ПОМЕСТИТЬ ВТОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Месяц,
		|			,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					Т.Сотрудник
		|				ИЗ
		|					ВТДанныеДокументов КАК Т)) КАК ВзаиморасчетыССотрудниками
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияВзаиморасчетовРегистратора КАК ДвиженияВзаиморасчетовРегистратора
		|		ПО ВзаиморасчетыССотрудниками.Сотрудник = ДвиженияВзаиморасчетовРегистратора.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(МИНИМУМ(ВзаиморасчетыССотрудниками.Период), МЕСЯЦ) КАК Период,
		|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыССотрудниками.ВидВзаиморасчетов В (ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод))
		|					И ЗарплатаКВыплате.Сотрудник ЕСТЬ NULL
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ * ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовАвансы,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ВзаиморасчетыССотрудниками.ВидВзаиморасчетов В (ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод))
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ * ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВТДвиженияВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ПО ВзаиморасчетыССотрудниками.Регистратор = ЗарплатаКВыплате.Регистратор
		|			И ВзаиморасчетыССотрудниками.Сотрудник = ЗарплатаКВыплате.Сотрудник
		|			И (ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
		|			И (ЗарплатаКВыплате.ДокументОснование В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы))
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ВзаиморасчетыССотрудниками.Сотрудник В
		|			(ВЫБРАТЬ
		|				Т.Сотрудник
		|			ИЗ
		|				ВТДанныеДокументов КАК Т)
		|	И НЕ ВзаиморасчетыССотрудниками.Регистратор В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыССотрудниками.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА 0
		|			ИНАЧЕ -1
		|		КОНЕЦ * ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
		|	КадровыеДанныеСотрудников.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудников.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	КадровыеДанныеСотрудников.РазрядКатегория КАК РазрядКатегория,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	КадровыеДанныеСотрудников.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
		|	КадровыеДанныеСотрудников.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
		|	ФИОРуководителя.РасшифровкаПодписи КАК ФИОРуководителя,
		|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
		|	ФИОРаботникаКадровойСлужбы.РасшифровкаПодписи КАК РаботникКадровойСлужбыРасшифровкаПодписи,
		|	&ДанныеДокументов КАК ДанныеДокументов,
		|	ЕСТЬNULL(Начисления.ВсегоВыплат, 0) КАК ВсегоВыплат,
		|	ЕСТЬNULL(Начисления.НачисленоКомпенсации, 0) КАК НачисленоКомпенсации,
		|	ЕСТЬNULL(Начисления.НачисленоВыходноеПособиеСохраняемыйЗаработок, 0) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	ЕСТЬNULL(Начисления.ВсеДругиеНачисления, 0) КАК ВсеДругиеНачисления,
		|	ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) КАК СуммаНДФЛ,
		|	ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) КАК ПрочиеУдержания,
		|	ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) КАК ВсегоУдержано,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) > 0
		|			ТОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолгЗаОрганизацией,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) < 0
		|			ТОГДА -ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолгЗаРаботником,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Начисления.ВсегоВыплат, 0) - (ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0)) + ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(Начисления.ВсегоВыплат, 0) - (ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0)) + ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0)
		|	КОНЕЦ КАК КВыплате,
		|	ЕСТЬNULL(ДнейКомпенсацииУдержанияОтпуска.ДнейКомпенсации, 0) КАК ДнейКомпенсации,
		|	ЕСТЬNULL(ДнейКомпенсацииУдержанияОтпуска.ДнейУдержания, 0) КАК ДнейУдержания,
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
		|		ПО ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаботникаКадровойСлужбы
		|		ПО ДанныеДокументов.РаботникКадровойСлужбы = ФИОРаботникаКадровойСлужбы.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОРаботникаКадровойСлужбы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.Ссылка = Начисления.Ссылка
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛ КАК НДФЛ
		|		ПО ДанныеДокументов.Ссылка = НДФЛ.Ссылка
		|			И ДанныеДокументов.Сотрудник = НДФЛ.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержания КАК Удержания
		|		ПО ДанныеДокументов.Ссылка = Удержания.Ссылка
		|			И ДанныеДокументов.Сотрудник = Удержания.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДнейКомпенсацииУдержанияОтпуска КАК ДнейКомпенсацииУдержанияОтпуска
		|		ПО ДанныеДокументов.Ссылка = ДнейКомпенсацииУдержанияОтпуска.Ссылка
		|			И ДанныеДокументов.Сотрудник = ДнейКомпенсацииУдержанияОтпуска.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|		ПО (НАЧАЛОПЕРИОДА(ДанныеДокументов.МесяцНачалаРасчетов, МЕСЯЦ) = ОстаткиВзаиморасчетов.Период)
		|			И ДанныеДокументов.Сотрудник = ОстаткиВзаиморасчетов.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияВзаиморасчетов КАК ДвиженияВзаиморасчетов
		|		ПО (НАЧАЛОПЕРИОДА(ДанныеДокументов.МесяцНачалаРасчетов, МЕСЯЦ) = ДвиженияВзаиморасчетов.Период)
		|			И ДанныеДокументов.Сотрудник = ДвиженияВзаиморасчетов.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов КАК ДанныеДокументов", "ДанныеДокументов.*");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка КАК Ссылка,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	Увольнение.Сотрудник КАК Сотрудник,
		|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Номер КАК НомерДок,
		|	Увольнение.Дата КАК ДатаДок,
		|	Увольнение.СтатьяТКРФ КАК СтатьяТКРФ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ Увольнение.СтатьяТКРФ.ТекстОснования
		|	КОНЕЦ КАК ТекстОснования,
		|	Увольнение.Руководитель КАК Руководитель,
		|	Увольнение.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Увольнение.РабочийГодС КАК РабочийГодС,
		|	Увольнение.РабочийГодПо КАК РабочийГодПо,
		|	Увольнение.Бухгалтер КАК Бухгалтер,
		|	Увольнение.РаботникКадровойСлужбы КАК РаботникКадровойСлужбы,
		|	Увольнение.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьРаботникаКадровойСлужбы,
		|	Увольнение.ПериодРегистрации КАК МесяцНачисления,
		|	Увольнение.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	ВЫБОР
		|		КОГДА Увольнение.НачислитьЗарплату
		|			ТОГДА Увольнение.МесяцНачалаРасчетов
		|		ИНАЧЕ Увольнение.ПериодРегистрации
		|	КОНЕЦ КАК МесяцНачалаРасчетов,
		|	Увольнение.НомерПриказа КАК НомерПриказа
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО Увольнение.СтатьяТКРФ = Представления.Объект
		|ГДЕ
		|	Увольнение.Проведен
		|	И Увольнение.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСпискомСотрудники.Ссылка,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата,
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомСотрудники.ФизическоеЛицо,
		|	УвольнениеСпискомСотрудники.ДатаУвольнения,
		|	УвольнениеСпискомСотрудники.Ссылка.Номер,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата,
		|	УвольнениеСпискомСотрудники.СтатьяТКРФ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ УвольнениеСпискомСотрудники.СтатьяТКРФ.ТекстОснования
		|	КОНЕЦ,
		|	УвольнениеСпискомСотрудники.Ссылка.Руководитель,
		|	УвольнениеСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	УвольнениеСпискомСотрудники.ОснованиеУвольнения,
		|	УвольнениеСпискомСотрудники.РабочийГодС,
		|	УвольнениеСпискомСотрудники.РабочийГодПо,
		|	УвольнениеСпискомСотрудники.Ссылка.Бухгалтер,
		|	УвольнениеСпискомСотрудники.Ссылка.РаботникКадровойСлужбы,
		|	УвольнениеСпискомСотрудники.Ссылка.ДолжностьРаботникаКадровойСлужбы,
		|	УвольнениеСпискомСотрудники.Ссылка.ПериодРегистрации,
		|	УвольнениеСпискомСотрудники.Ссылка.ГлавныйБухгалтер,
		|	ВЫБОР
		|		КОГДА УвольнениеСпискомСотрудники.НачислитьЗарплату
		|			ТОГДА УвольнениеСпискомСотрудники.МесяцНачалаРасчетов
		|		ИНАЧЕ УвольнениеСпискомСотрудники.Ссылка.ПериодРегистрации
		|	КОНЕЦ,
		|	УвольнениеСпискомСотрудники.Ссылка.НомерПриказа
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО УвольнениеСпискомСотрудники.СтатьяТКРФ = Представления.Объект
		|ГДЕ
		|	УвольнениеСпискомСотрудники.Ссылка.Проведен
		|	И УвольнениеСпискомСотрудники.Ссылка В(&МассивОбъектов)";
	
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Увольнение.Ссылка В(&МассивОбъектов)", "Увольнение.Сотрудник В(&МассивОбъектов)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УвольнениеСпискомСотрудники.Ссылка В(&МассивОбъектов)", "УвольнениеСпискомСотрудники.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Проверка списка начислений кадровых документов вызывается при обработке проверки заполнения.
// Проверяется состав начислений на предмет наличия взаимоисключающих начислений и заполненность
// показателей начислений.
//
// Параметры:
//		ДокументОбъект					- ДокументОбъект
//		ДатаСобытия						- Дата
//		ИменаТабличныхЧастейНачисления	- Строка, имена табличных частей начислений, перечисленные через запятую
//		ИмяТабличнойЧастиПоказатели		- Строка
//		Отказ							- Булево
//		СодержитПолеДействие			- Булево
//		ИмяРеквизитаРабочееМесто		- Строка, имя реквизита Сотрудник ТЧ Начисления (ТЧ Сотрудники)
//		ИменаРеквизитовНачисление		- Строка, имена реквизитов ТЧ Начисления через запятую,
//											если задается то количество имен реквизитов должно быть таким же
//											как количество имен табличных частей начислений
//		ИмяТабличнойЧастиСотрудники		- Строка, имя табличной части Сотрудники списочного документа
//		ПредлагатьОбъединятьСтрокиОдинаковыхНачислений	- Булево
//
Процедура ПроверкаСпискаНачисленийКадровогоДокумента(ДокументОбъект, ДатаСобытия, ИменаТабличныхЧастейНачисления, ИмяТабличнойЧастиПоказатели, Отказ, СодержитПолеДействие = Ложь, ИмяРеквизитаРабочееМесто = "", ИменаРеквизитовНачисление = "Начисление", ИмяТабличнойЧастиСотрудники = "", ПредлагатьОбъединятьСтрокиОдинаковыхНачислений = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		Или Не МногофункциональныеДокументыБЗК.ЕстьПравоНаРаздел(
			МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных().Редактирование,
			МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных().ПлановыеНачисления) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВсеНачисления = Неопределено;
	
	СодержитПолеДокументОснование = Неопределено;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ТабличныеЧастиНачисления = СтрРазделить(ИменаТабличныхЧастейНачисления, ",");
	РеквизитыНачисление = СтрРазделить(ИменаРеквизитовНачисление, ",");
	Для Каждого ИмяТабличнойЧастиНачисления Из ТабличныеЧастиНачисления Цикл
		
		Если СодержитПолеДокументОснование = Неопределено Тогда
			
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧастиНачисления].Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
				СодержитПолеДокументОснование = Ложь;
			Иначе
				СодержитПолеДокументОснование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		// Не проводится проверка если начислений нет
		Начисления = ДокументОбъект[ИмяТабличнойЧастиНачисления].Выгрузить();
		Если Начисления.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Не проводится проверка если все начисления отменены
		Если СодержитПолеДействие Тогда
			
			Если Начисления.Количество() = Начисления.НайтиСтроки(Новый Структура("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить)).Количество() Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РеквизитыНачисление.Количество() = 1 Тогда
			ИмяРеквизитаНачисление = РеквизитыНачисление[0];
		Иначе
			ИмяРеквизитаНачисление = РеквизитыНачисление[ТабличныеЧастиНачисления.Найти(ИмяТабличнойЧастиНачисления)];
		КонецЕсли;
		
		Начисления.Колонки[ИмяРеквизитаНачисление].Имя = "Начисление";
		
		Начисления.Колонки.Добавить("ИмяТабличнойЧасти", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
		Начисления.ЗаполнитьЗначения(ИмяТабличнойЧастиНачисления, "ИмяТабличнойЧасти");
		
		Если ВсеНачисления = Неопределено Тогда
			ВсеНачисления = Начисления;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Начисления, ВсеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеНачисления = Неопределено Или ВсеНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		ТаблицаРабочихМест = Неопределено;
	Иначе
		
		Если ПустаяСтрока(ИмяТабличнойЧастиСотрудники) Тогда
			Сотрудники = ВсеНачисления.ВыгрузитьКолонку(ИмяРеквизитаРабочееМесто);
		Иначе
			Сотрудники = ДокументОбъект[ИмяТабличнойЧастиСотрудники].ВыгрузитьКолонку("Сотрудник");
			
			Если Не ПустаяСтрока(ИмяРеквизитаРабочееМесто) И ИмяРеквизитаРабочееМесто <> "Сотрудник" Тогда
				СотрудникиРабочиеМеста = ДокументОбъект[ИмяТабличнойЧастиСотрудники].Выгрузить(, "Сотрудник," + ИмяРеквизитаРабочееМесто)
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаРабочихМест = ОписаниеРабочихМестСотрудников(Сотрудники, ДатаСобытия);
		
		Если Не ПустаяСтрока(ИмяТабличнойЧастиСотрудники) 
			И Не ПустаяСтрока(ИмяРеквизитаРабочееМесто)
			И ИмяРеквизитаРабочееМесто <> "Сотрудник" Тогда
			
			ТаблицаРабочихМест.Колонки.Добавить(ИмяРеквизитаРабочееМесто);
			Для Каждого СтрокаСотрудника Из СотрудникиРабочиеМеста Цикл
				
				СтрокиТаблицаРабочихМест = ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
				Для Каждого СтрокаТаблицаРабочихМест Из СтрокиТаблицаРабочихМест Цикл
					СтрокаТаблицаРабочихМест[ИмяРеквизитаРабочееМесто] = СтрокаСотрудника[ИмяРеквизитаРабочееМесто];
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Начисления", ВсеНачисления);
	Запрос.УстановитьПараметр("Показатели", ДокументОбъект[ИмяТабличнойЧастиПоказатели].Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.Действие КАК Действие,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.Значение КАК Значение,
		|	Показатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&Показатели КАК Показатели";
	
	Если Не СодержитПолеДокументОснование Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДокументОснование КАК ДокументОснование,", "");
	КонецЕсли;
	
	ПредварительнаяВыборка = Ложь;
	Если Не СодержитПолеДействие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Действие КАК Действие,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТНачисления", "ПОМЕСТИТЬ ВТНачисленияПредварительно");
		ПредварительнаяВыборка = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто", "Начисления." + ИмяРеквизитаРабочееМесто);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СодержитПолеДействие Тогда
		
		// Проверка отмены начисления и назначения его заново в одном документе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.НомерСтроки КАК НомерСтроки,
			|	Начисления.РабочееМесто КАК РабочееМесто,
			|	ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
			|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
			|	НачисленияВторые.НомерСтроки КАК НомерСтрокиВторой
			|ИЗ
			|	ВТНачисленияПредварительно КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПредварительно КАК НачисленияВторые
			|		ПО Начисления.ИмяТабличнойЧасти = НачисленияВторые.ИмяТабличнойЧасти
			|			И Начисления.РабочееМесто = НачисленияВторые.РабочееМесто
			|			И Начисления.Начисление = НачисленияВторые.Начисление
			|			И Начисления.ДокументОснование = НачисленияВторые.ДокументОснование
			|			И Начисления.НомерСтроки < НачисленияВторые.НомерСтроки
			|ГДЕ
			|	НЕ НачисленияВторые.Начисление ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИмяТабличнойЧасти,
			|	НомерСтроки";
		
		Если Не СодержитПолеДокументОснование Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.ДокументОснование = НачисленияВторые.ДокументОснование", "");
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.РабочееМесто = НачисленияВторые.РабочееМесто", "");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Заданы одинаковые начисления ""%1"" в строках %2 и %3';
							|en = 'Similar accruals ""%1"" are set up in strings%2 and %3'"), Выборка.Начисление, Выборка.НомерСтроки, Выборка.НомерСтрокиВторой);
					
				Иначе
					
					Если Не ПустаяСтрока(ИмяТабличнойЧастиСотрудники) 
						И Не ПустаяСтрока(ИмяРеквизитаРабочееМесто)
						И ИмяРеквизитаРабочееМесто <> "Сотрудник" Тогда
						
						ИмяКлючаРабочееМесто = ИмяРеквизитаРабочееМесто;
						
					Иначе
						ИмяКлючаРабочееМесто = "Сотрудник";
					КонецЕсли;
					
					РабочиеМестаПредставление = ТаблицаРабочихМест.НайтиСтроки(Новый Структура(ИмяКлючаРабочееМесто, Выборка.РабочееМесто));
					Если РабочиеМестаПредставление.Количество() > 0 Тогда
						РабочееМестоПредставление = РабочиеМестаПредставление[0].ПредставлениеРабочегоМеста;
					Иначе
						РабочееМестоПредставление = Выборка.РабочееМестоПредставление;
					КонецЕсли;
					
					Если Не ПустаяСтрока(ИмяТабличнойЧастиСотрудники) 
						И Не ПустаяСтрока(ИмяРеквизитаРабочееМесто)
						И ИмяРеквизитаРабочееМесто <> "Сотрудник" Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '[%1] заданы одинаковые начисления ""%2""';
								|en = '[%1] similar accruals are set up ""%2""'"),
							РабочееМестоПредставление, Выборка.Начисление);
						
					Иначе
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '[%1] заданы одинаковые начисления ""%2"" в строках %3 и %4';
								|en = '[%1] similar accruals ""%2"" are set up in strings %3 and %4'"),
							РабочееМестоПредставление, Выборка.Начисление, Выборка.НомерСтроки, Выборка.НомерСтрокиВторой);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПредлагатьОбъединятьСтрокиОдинаковыхНачислений Тогда
					
					ТекстСообщения = ТекстСообщения + Символы.ПС
						+ НСтр("ru = 'Воспользуйтесь командой ""Объединить строки одинаковых начислений"" табличной части списка начислений.';
								|en = 'Use the command ""Merge similar accrual lines"" in the tabular section of the accruals list.'");
					
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения, ДокументОбъект, Выборка.ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "]." + ИмяРеквизитаНачисление, ,Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредварительнаяВыборка Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.НомерСтроки КАК НомерСтроки,
			|	Начисления.РабочееМесто КАК РабочееМесто,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
			|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТНачисленияПредварительно КАК Начисления
			|ГДЕ
			|	Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)";
		
		Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// Проверка наличия взаимоисключаемых начислений.
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).Наименование КАК Наименование,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК НачисленияДругие
		|		ПО Начисления.Начисление <> НачисленияДругие.Начисление
		|			И Начисления.РабочееМесто = НачисленияДругие.РабочееМесто
		|			И (ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени = ВЫРАЗИТЬ(НачисленияДругие.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени)
		|			И (ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени = ВЫРАЗИТЬ(НачисленияДругие.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени)
		|ГДЕ
		|	НЕ НачисленияДругие.НомерСтроки ЕСТЬ NULL
		|	И ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).Наименование,
		|	Начисления.РабочееМесто,
		|	Начисления.НомерСтроки,
		|	Начисления.ИмяТабличнойЧасти
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.РабочееМесто,
		|	ИмяТабличнойЧасти,
		|	НомерСтроки";
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.РабочееМесто = НачисленияДругие.РабочееМесто", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто,", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Введено несколько взаимоисключающих начислений (%1)';
						|en = 'Several mutually exclusive accruals are entered (%1)'"), Выборка.Наименование);
				
			Иначе
				
				РабочиеМестаПредставление = ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Сотрудник", Выборка.РабочееМесто));
				Если РабочиеМестаПредставление.Количество() > 0 Тогда
					РабочееМестоПредставление = РабочиеМестаПредставление[0].ПредставлениеРабочегоМеста;
				Иначе
					РабочееМестоПредставление = Выборка.РабочееМестоПредставление;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, введено несколько взаимоисключающих начислений (%2)';
						|en = '%1, several incompatible accruals are entered (%2)'"),
					РабочееМестоПредставление,
					Выборка.Наименование);
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, ДокументОбъект, Выборка.ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "]." + ИмяРеквизитаНачисление, ,Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка заполнения значений показателей.
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПоказатели.Показатель КАК Показатель,
		|	НачисленияПоказатели.НомерСтроки КАК НомерСтрокиПоказателя
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
		|			ПО НачисленияПоказатели.Показатель = Показатели.Ссылка
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|			И (Показатели.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное))
		|			И (НЕ Показатели.ДопускаетсяНулевоеЗначение)
		|			И (НЕ Показатели.ЗначениеРассчитываетсяАвтоматически)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСПоказателями.НомерСтроки КАК НомерСтроки,
		|	НачисленияСПоказателями.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	НачисленияСПоказателями.РабочееМесто КАК РабочееМесто,
		|	ПРЕДСТАВЛЕНИЕ(НачисленияСПоказателями.РабочееМесто) КАК РабочееМестоПредставление,
		|	ВЫБОР
		|		КОГДА НачисленияСПоказателями.Показатель.КраткоеНаименование = """"
		|			ТОГДА НачисленияСПоказателями.Показатель.Наименование
		|		ИНАЧЕ НачисленияСПоказателями.Показатель.КраткоеНаименование
		|	КОНЕЦ КАК Показатель
		|ИЗ
		|	ВТНачисленияСПоказателями КАК НачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО НачисленияСПоказателями.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|			И НачисленияСПоказателями.Показатель = Показатели.Показатель
		|ГДЕ
		|	ЕСТЬNULL(Показатели.Значение, 0) = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияСПоказателями.РабочееМесто,
		|	НачисленияСПоказателями.ИмяТабличнойЧасти,
		|	НомерСтроки";
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияСПоказателями.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПРЕДСТАВЛЕНИЕ(НачисленияСПоказателями.РабочееМесто) КАК РабочееМестоПредставление,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияСПоказателями.РабочееМесто,", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не задано значение ""%1""';
						|en = 'The ""%1"" value is not specified'"), Выборка.Показатель);
				
			Иначе
				
				РабочиеМестаПредставление = ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Сотрудник", Выборка.РабочееМесто));
				Если РабочиеМестаПредставление.Количество() > 0 Тогда
					РабочееМестоПредставление = РабочиеМестаПредставление[0].ПредставлениеРабочегоМеста;
				Иначе
					РабочееМестоПредставление = Выборка.РабочееМестоПредставление;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, не задано значение ""%2""';
						|en = '%1, the ""%2"" value is not specified'"),
					РабочееМестоПредставление,
					Выборка.Показатель);
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, ДокументОбъект, Выборка.ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "].Показатель1", ,Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НомерКадровогоПриказа(Знач НомерПриказа) Экспорт
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		Возврат ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерПриказа, Истина, Истина);
	КонецЕсли;
	
	Возврат НомерПриказа;
	
КонецФункции

Процедура ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(Организация, ТабличнаяЧастьСотрудники, Отказ) Экспорт
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	СписокСотрудников = ТабличнаяЧастьСотрудники.ВыгрузитьКолонку("Сотрудник");
	
	ГоловныеОрганизацииСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ГоловнаяОрганизация");
	Для каждого СтрокаСотрудника Из ТабличнаяЧастьСотрудники Цикл
		
		ГоловнаяОрганизацияСотрудника = ГоловныеОрганизацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ГоловнаяОрганизацияСотрудника <> ГоловнаяОрганизация Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сотрудник %1 не соответствует организации %2.';
					|en = 'Employee %1 does not correspond to company %2.'"),
				СтрокаСотрудника.Сотрудник,
				Организация);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Сотрудники[" + (СтрокаСотрудника.НомерСтроки - 1) + "].Сотрудник",
				,
				Отказ);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры


#Область ПроцедурыИФункцииФормированияОтчетов

#Область УнифицированнаяФормаТ2

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ПериодКонецДня", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
		НоваяСтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
		НоваяСтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.Сотрудник;
		НоваяСтрокаТаблицыСотрудников.ФизическоеЛицо = СтрокаСотрудника.ЛичныеДанныеФизическоеЛицо;
		НоваяСтрокаТаблицыСотрудников.Период = Макс(СтрокаСотрудника.ПараметрыДанныхПериод, СтрокаСотрудника.РаботаДатаПриема);
		НоваяСтрокаТаблицыСотрудников.ПериодКонецДня = КонецДня(НоваяСтрокаТаблицыСотрудников.Период);
	КонецЦикла;
	
	ДополнительныеСведения = ДополнительныеСведенияУнифицированнойФормыТ2ПоРеестрам(СтрокиДанных, ТаблицаСотрудников, КлючВарианта);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаСотрудников.Период КАК Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоПериода,
		|	ТаблицаСотрудников.Период КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ОписательОтборов = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляФизическоеЛицо", "ВТСотрудникиПериоды", "ФизическоеЛицо");
	КадровыйУчет.СоздатьВТОбразованияФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОписательОтборов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.УчебноеЗаведение,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Основание
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("ВидПовышенияКвалификации", НСтр("ru = 'Обучение на курсах';
																		|en = 'Courses'"));
			СтруктураСтроки.Вставить("УчебноеЗаведениеАдрес", Выборка.УчебноеЗаведение);
			СтруктураСтроки.Вставить("ВидДокумента", Выборка.ВидДокумента);
			СтруктураСтроки.Вставить("СерияНомер", ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер);
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("Основание", Выборка.Основание);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеПовышенияКвалификаций", ДанныеЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.Специальность,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Основание
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Специальность", Выборка.Специальность);
			СтруктураСтроки.Вставить("ВидДокумента", Выборка.ВидДокумента);
			СтруктураСтроки.Вставить("СерияНомер", ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер);
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("Основание", Выборка.Основание);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеПрофессиональныхПереподготовок", ДанныеЗаполнения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц") Тогда
		МодульСемейныеПоложенияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СемейныеПоложенияФизическихЛиц");
		МодульСемейныеПоложенияФизическихЛиц.ДополнитьСведенияУнифицированнойФормыТ2(
			ДополнительныеСведения, СтрокиДанных, ДатаОтчета, КлючВарианта);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НаградыФизическихЛиц.Награда КАК Награда,
		|	НаградыФизическихЛиц.НомерПриказа КАК НомерПриказа,
		|	НаградыФизическихЛиц.ДатаПриказа КАК ДатаПриказа,
		|	НаградыФизическихЛиц.НаименованиеПриказа КАК Приказ,
		|	НаградыФизическихЛиц.НомерПоПорядку КАК НомерПоПорядку
		|ИЗ
		|	РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|ГДЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	НаградыФизическихЛиц.НомерПоПорядку";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", СтрокиДанных.ВыгрузитьКолонку("ЛичныеДанныеФизическоеЛицо"));
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("Сотрудник"));
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаПоНаградам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоНаградам.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока ВыборкаПоНаградам.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Награда", ВыборкаПоНаградам.Награда);
			СтруктураСтроки.Вставить("Приказ", ВыборкаПоНаградам.Приказ);
			СтруктураСтроки.Вставить("НомерПриказа", ВыборкаПоНаградам.НомерПриказа);
			СтруктураСтроки.Вставить("ДатаПриказа", ВыборкаПоНаградам.ДатаПриказа);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(ВыборкаПоНаградам.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияНаграды", ДанныеЗаполнения);
	
	ОписательВременнойТаблицыОтборов = ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц(
		"ВТСотрудникиПериоды",
		"Сотрудник.ФизическоеЛицо",
		"Период");
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОписательВременнойТаблицыОтборов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТСтажиФизическихЛиц
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ВидСтажа.Код";
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаСтажи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСтажи.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоФизическомуЛицу = Новый Массив;
		Пока ВыборкаСтажи.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("СтажВид", ВыборкаСтажи.ВидСтажа);
			СтруктураСтроки.Вставить("СтажДней", ВыборкаСтажи.Дней);
			СтруктураСтроки.Вставить("СтажМесяцев", ВыборкаСтажи.Месяцев);
			СтруктураСтроки.Вставить("СтажЛет", ВыборкаСтажи.Лет);
			
			ДанныеЗаполненияПоФизическомуЛицу.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		ДанныеЗаполнения.Вставить(ВыборкаСтажи.ФизическоеЛицо, ДанныеЗаполненияПоФизическомуЛицу);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияСтажи", ДанныеЗаполнения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета);
	КонецЕсли;
	
	// В самом конце дополним сведения по государственным служащим
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета, КлючВарианта);
	КонецЕсли;
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Процедура ИнициализироватьОтчетТ2(ОтчетОбъект) Экспорт
	
	Для Каждого НаборДанных Из ОтчетОбъект.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление",
				"ЗНАЧЕНИЕ(Справочник.УченыеСтепени.ПустаяСсылка) КАК УченаяСтепень,
				|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК УченаяСтепень,",
				"КадровыеДанныеСотрудников.УченаяСтепень КАК УченаяСтепень,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК УченаяСтепеньКод,",
				"КадровыеДанныеСотрудников.УченаяСтепень.Код КАК УченаяСтепеньКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК УченаяСтепеньРодитель,",
				"КадровыеДанныеСотрудников.УченаяСтепень.Родитель КАК УченаяСтепеньРодитель,");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьВариантыОтчетаУнифицированнойФормыТ2(Настройки, НастройкиОтчета) Экспорт

	КадровыйУчетБазовый.НастроитьВариантыОтчетаУнифицированнойФормыТ2(Настройки, НастройкиОтчета);
		
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Т2ГСМС");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Личная карточка государственного (муниципального) служащего (Унифицированная форма N Т-2ГС(МС)).';
			|en = 'State (municipal) service employee personal card (Unified form N Т-2GS(MS)).'");
		
КонецПроцедуры

#КонецОбласти

Процедура НастроитьВариантыОтчетаПоСотрудникам(Настройки, НастройкиОтчета) Экспорт
	
	КадровыйУчетБазовый.НастроитьВариантыОтчетаПоСотрудникам(Настройки, НастройкиОтчета);
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Т4");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Учетная карточка научного, научно-педагогического работника (Унифицированная форма Т-4).';
			|en = 'Research specialist, teacher registration card (Unified form Т-4).'");
		
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СевернаяНадбавка");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Информация по северному стажу и проценту северной надбавки сотрудников.';
			|en = 'Information on the employee Northern length of service and Northern allowance percentage.'");
			
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма1ГСМСРаздел1");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма1ГСМСРаздел2");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма1ГСМССправкаРаздел3");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Расшифровка");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма1ТГСРаздел1");
	НастройкиВарианта.Включен = Ложь;
	
КонецПроцедуры

Функция ДополнительныеСведенияУнифицированнойФормыТ2ПоРеестрам(СтрокиДанных, ТаблицаСотрудников, КлючВарианта)
	
	ДополнительныеСведения = Новый Соответствие;
	ДанныеЗаполненияКадровойИстории = Новый Соответствие;
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	ВидыСобытий = Новый Массив;
	ВидыСобытий.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.ВосстановлениеВДолжности"));
	ВидыСобытий.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.Перемещение"));
	ВидыСобытий.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.Прием"));
	НастройкиКадровогоУчета = КадровыйУчет.НастройкиКадровогоУчета();
	Если НастройкиКадровогоУчета.ОтображатьИзмененияОплатыТрудаВЛичнойКарточке = Истина Тогда
		ВидыСобытий.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКадровыхСобытий.ИзменениеОплатыТруда"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыКадровыхСобытий", ВидыСобытий);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ТаблицаСотрудников.ПериодКонецДня КАК ДатаОкончания,
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ПараметрыПостроенияВТРеестрКадровыхПриказовПоВременнойТаблице();
	ПараметрыПостроения.ИмяВТОтборовСотрудников = "ВТТаблицаСотрудников";
	
	ПараметрыПостроения.ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего);
	ПараметрыПостроения.ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего);
	
	Если КлючВарианта = "Т2ГСМС" Тогда
		ПараметрыПостроения.УсловиеОтбораВидовДоговоров = "В";
	ИначеЕсли КлючВарианта = "КарточкаГражданинаПодлежащегоВоинскомуУчету" Тогда
		ПараметрыПостроения.ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор);
		ПараметрыПостроения.УсловиеОтбораВидовДоговоров = "В";
	КонецЕсли;
	
	СоздатьВТРеестрКадровыхПриказов(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеестрПриказов.Период КАК Период,
		|	РеестрПриказов.Сотрудник КАК Сотрудник,
		|	РеестрПриказов.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРеестрКадровыхПриказов КАК РеестрПриказов
		|ГДЕ
		|	РеестрПриказов.НомерПриказа = НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(РеестрПриказов.Регистратор, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО";
	
	РегистраторыПриказов = Запрос.Выполнить().Выгрузить();
	ПринятыеНаРаботуПоДоговорам = РегистраторыПриказов.СкопироватьКолонки();
	Если РегистраторыПриказов.Количество() = 0 Тогда
		РеквизитыПриказов = Новый Соответствие;
	Иначе
		РеквизитыПриказов = РеквизитыКадровыхПриказов(ОбщегоНазначения.ВыгрузитьКолонку(РегистраторыПриказов, "Регистратор", Истина));
		Для Каждого РеквизитыПриказа Из РеквизитыПриказов Цикл
			Если РеквизитыПриказа.Значение.ПриемТрудовымДоговором = Истина Тогда
				ДанныеССотрудником = РегистраторыПриказов.Найти(РеквизитыПриказа.Ключ);
				Если ДанныеССотрудником <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ПринятыеНаРаботуПоДоговорам.Добавить(), ДанныеССотрудником);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПринятыеНаРаботуПоДоговорам.Количество() > 0 Тогда
		КадровыеДанныеСотрудниковПринятыхНаРаботуПоДоговорам = КадровыйУчет.КадровыеДанныеСотрудниковПоТаблицеЗначений(
			Истина, ПринятыеНаРаботуПоДоговорам, "ПриказОПриемеВидДоговора,ПриказОПриемеТрудовойДоговорНомер,ПриказОПриемеТрудовойДоговорДата");
	Иначе
		КадровыеДанныеСотрудниковПринятыхНаРаботуПоДоговорам = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеестрПриказов.Период КАК Период,
		|	РеестрПриказов.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДляРеетраКадровыхПриказов
		|ИЗ
		|	ВТРеестрКадровыхПриказов КАК РеестрПриказов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрПриказов.Период КАК Период,
		|	РеестрПриказов.Сотрудник КАК Сотрудник,
		|	РеестрПриказов.Подразделение КАК Подразделение,
		|	РеестрПриказов.Должность КАК Должность,
		|	РеестрПриказов.Разряд КАК Разряд,
		|	ВЫРАЗИТЬ(РеестрПриказов.Разряд КАК Справочник.РазрядыКатегорииДолжностей).НаименованиеПолное КАК РазрядНаименованиеПолное,
		|	РеестрПриказов.ТарифнаяСтавкаНадбавка КАК ТарифнаяСтавкаНадбавка,
		|	РеестрПриказов.Регистратор КАК Регистратор,
		|	РеестрПриказов.ДатаПриказа КАК ДатаПриказа,
		|	РеестрПриказов.НомерПриказа КАК НомерПриказа,
		|	РеестрПриказов.Основание КАК Основание,
		|	РеестрПриказов.ВидСобытия КАК ВидСобытия,
		|	РеестрПриказов.ДанныеДоНачалаУчета КАК ДанныеДоНачалаУчета
		|ИЗ
		|	ВТРеестрКадровыхПриказов КАК РеестрПриказов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Период";
	
	ВыборкаКадроваяИстория = Запрос.Выполнить().Выбрать();
	
	ТаблицаНачисленийСотрудников = КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериодыДляРеетраКадровыхПриказов", , , , , , Ложь);
	
	Пока ВыборкаКадроваяИстория.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ДанныеЗаполненияКадровойИсторииПоСотруднику = Новый Массив;
		
		Пока ВыборкаКадроваяИстория.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура();
			
			СтруктураСтроки.Вставить("ДатаПеревода", ВыборкаКадроваяИстория.Период);
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ВыборкаКадроваяИстория.Подразделение) И ТипЗнч(ВыборкаКадроваяИстория.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение.ПолноеНаименование());
			Иначе
				СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаКадроваяИстория.Разряд) Тогда
				Если ЗначениеЗаполнено(ВыборкаКадроваяИстория.РазрядНаименованиеПолное) Тогда
					СтруктураСтроки.Вставить("ДолжностьПеревода", Строка(ВыборкаКадроваяИстория.Должность) + ", " + ВыборкаКадроваяИстория.РазрядНаименованиеПолное);
				Иначе
					СтруктураСтроки.Вставить("ДолжностьПеревода", Строка(ВыборкаКадроваяИстория.Должность) + ", " + Строка(ВыборкаКадроваяИстория.Разряд));
				КонецЕсли;
			Иначе
				СтруктураСтроки.Вставить("ДолжностьПеревода", Строка(ВыборкаКадроваяИстория.Должность));
			КонецЕсли;
			
			Если ВыборкаКадроваяИстория.ДанныеДоНачалаУчета Тогда
				СтруктураСтроки.Вставить("ТарифнаяСтавка", ВыборкаКадроваяИстория.ТарифнаяСтавкаНадбавка);
			Иначе
				
				СтрокиТаблицаНачисленийСотрудников = ТаблицаНачисленийСотрудников.НайтиСтроки(
					Новый Структура("Сотрудник,Период", ВыборкаКадроваяИстория.Сотрудник, ВыборкаКадроваяИстория.Период));
				
				Если СтрокиТаблицаНачисленийСотрудников.Количество() > 0 Тогда
					
					СтрокаТаблицаНачисленийСотрудников = СтрокиТаблицаНачисленийСотрудников[0];
					
					Если ЗначениеЗаполнено(СтрокаТаблицаНачисленийСотрудников.ОписаниеОклада) Тогда
						
						СтруктураСтроки.Вставить("ТарифнаяСтавка", СтрокаТаблицаНачисленийСотрудников.ОписаниеОклада);
						
						Если ЗначениеЗаполнено(СтрокаТаблицаНачисленийСотрудников.Надбавка) Тогда
							СтруктураСтроки.ТарифнаяСтавка = СтруктураСтроки.ТарифнаяСтавка + "; ";
						КонецЕсли;
						
					Иначе
						СтруктураСтроки.Вставить("ТарифнаяСтавка", "");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицаНачисленийСотрудников.Надбавка) Тогда
						СтруктураСтроки.ТарифнаяСтавка = СтруктураСтроки.ТарифнаяСтавка + СтрокаТаблицаНачисленийСотрудников.Надбавка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Основание = "";
			Если ЗначениеЗаполнено(ПринятыеНаРаботуПоДоговорам)
				И ПринятыеНаРаботуПоДоговорам.Найти(ВыборкаКадроваяИстория.Регистратор, "Регистратор") <> Неопределено Тогда
				
				ДанныеСотрудника = КадровыеДанныеСотрудниковПринятыхНаРаботуПоДоговорам.Найти(ВыборкаКадроваяИстория.Сотрудник, "Сотрудник");
				Если ДанныеСотрудника <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ДанныеСотрудника.ПриказОПриемеВидДоговора)
						Или ДанныеСотрудника.ПриказОПриемеВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор Тогда
						
						Основание = СтрШаблон(НСтр("ru = 'Тр. дог. №%1 от %2';
													|en = 'Employment contract No. %1 dated %2'"),
							ДанныеСотрудника.ПриказОПриемеТрудовойДоговорНомер, 
							Формат(ДанныеСотрудника.ПриказОПриемеТрудовойДоговорДата, "ДЛФ=D"));
					Иначе
						
						Основание = СтрШаблон(НСтр("ru = 'Контр. №%1 от %2';
													|en = 'Contract No. %1 dated %2'"),
							ДанныеСотрудника.ПриказОПриемеТрудовойДоговорНомер, 
							Формат(ДанныеСотрудника.ПриказОПриемеТрудовойДоговорДата, "ДЛФ=D"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(Основание) Тогда
				
				Если ВыборкаКадроваяИстория.НомерПриказа = Неопределено Тогда
					
					Если ЗначениеЗаполнено(ВыборкаКадроваяИстория.Регистратор) Тогда
						
						РеквизитыПриказа = РеквизитыПриказов.Получить(ВыборкаКадроваяИстория.Регистратор);
						Если РеквизитыПриказа <> Неопределено Тогда
							Основание = КадровыйУчет.ОснованиеДляРеестраПоДатеИНомеруПриказа(РеквизитыПриказа.Дата, РеквизитыПриказа.НомерПриказа);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					Основание = КадровыйУчет.ОснованиеДляРеестра(ВыборкаКадроваяИстория.ДатаПриказа, ВыборкаКадроваяИстория.НомерПриказа);
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураСтроки.Вставить("ОснованиеПеревода", Основание);
			СтруктураСтроки.Вставить("ВидСобытия", ВыборкаКадроваяИстория.ВидСобытия);
			СтруктураСтроки.Вставить("Регистратор", ВыборкаКадроваяИстория.Регистратор);
			
			ДанныеЗаполненияКадровойИсторииПоСотруднику.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		ДанныеЗаполненияКадровойИстории.Вставить(ВыборкаКадроваяИстория.Сотрудник, ДанныеЗаполненияКадровойИсторииПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияКадровойИстории", ДанныеЗаполненияКадровойИстории);
	
	// Отпуска
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРеестрОтпусков(Запрос.МенеджерВременныхТаблиц, ТаблицаСотрудников, КлючВарианта);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрОтпусков.Период КАК Период,
		|	РеестрОтпусков.Сотрудник КАК Сотрудник,
		|	РеестрОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	РеестрОтпусков.РабочийГодС КАК РабочийГодС,
		|	РеестрОтпусков.РабочийГодПо КАК РабочийГодПо,
		|	РеестрОтпусков.ДнейОтпуска КАК ДнейОтпуска,
		|	РеестрОтпусков.ДатаС КАК ДатаС,
		|	РеестрОтпусков.ДатаПо КАК ДатаПо,
		|	РеестрОтпусков.Основание КАК Основание,
		|	РеестрОтпусков.ЭтоКомпенсацияОтпуска КАК ЭтоКомпенсацияОтпуска,
		|	ВЫБОР
		|		КОГДА РеестрОтпусков.ВидОтпуска ССЫЛКА Справочник.ВидыОтпусков
		|			ТОГДА ВЫБОР
		|					КОГДА РеестрОтпусков.ВидОтпуска.НаименованиеПолное = """"
		|						ТОГДА РеестрОтпусков.ВидОтпуска.Наименование
		|					ИНАЧЕ РеестрОтпусков.ВидОтпуска.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ РеестрОтпусков.ВидОтпуска
		|	КОНЕЦ КАК ПредставлениеВидаОтпуска,
		|	РеестрОтпусков.СостояниеС КАК СостояниеС,
		|	РеестрОтпусков.СостояниеПо КАК СостояниеПо,
		|	РеестрОтпусков.ДатаНачалаУчета КАК ДатаНачалаУчета
		|ИЗ
		|	ВТРеестрОтпусков КАК РеестрОтпусков
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеестрОтпусков.Сотрудник,
		|	РеестрОтпусков.Период,
		|	РеестрОтпусков.ЭтоКомпенсацияОтпуска,
		|	ВидОтпуска,
		|	РеестрОтпусков.ДатаС";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаполнения = Новый Соответствие;
		ВыборкаОтпуска = РезультатЗапроса.Выбрать();
		Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияПоСотруднику = Новый ТаблицаЗначений;
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("ВидОтпуска");
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("ДатаНачалаСобытия");
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("ДатаС");
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("ДатаПо");
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("ДнейОтпуска");
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("РабочийГодС");
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("РабочийГодПо");
			ДанныеЗаполненияПоСотруднику.Колонки.Добавить("ОснованиеОтпуска");
			
			Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("Период") Цикл
				
				Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("ЭтоКомпенсацияОтпуска") Цикл
					
					Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("ВидОтпуска") Цикл
						
						Если ВыборкаОтпуска.ДатаС > ВыборкаОтпуска.ДатаНачалаУчета Тогда
							
							СтрокаОтпуска = ДанныеЗаполненияПоСотруднику.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаОтпуска, ВыборкаОтпуска);
							СтрокаОтпуска.ДатаНачалаСобытия = ВыборкаОтпуска.Период;
							СтрокаОтпуска.ВидОтпуска = ВыборкаОтпуска.ПредставлениеВидаОтпуска;
							СтрокаОтпуска.ОснованиеОтпуска = ВыборкаОтпуска.Основание;
							
							ДатаС = Новый Массив;
							ДатаПо = Новый Массив;
							ДнейОтпуска = 0;
							
							Пока ВыборкаОтпуска.Следующий() Цикл
								
								Если ЗначениеЗаполнено(ВыборкаОтпуска.ДатаС)
									И ЗначениеЗаполнено(ВыборкаОтпуска.ДатаПо) Тогда
									
									ДатаС.Добавить(Формат(ВыборкаОтпуска.ДатаС, "ДЛФ=D"));
									ДатаПо.Добавить(Формат(ВыборкаОтпуска.ДатаПо, "ДЛФ=D"));
									ДнейОтпуска = ДнейОтпуска + ВыборкаОтпуска.ДнейОтпуска;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если ДатаС.Количество() > 1 Тогда
								СтрокаОтпуска.ДатаС = СтрСоединить(ДатаС, Символы.ПС);
								СтрокаОтпуска.ДатаПо = СтрСоединить(ДатаПо, Символы.ПС);
								СтрокаОтпуска.ДнейОтпуска = ДнейОтпуска;
							КонецЕсли;
							
						Иначе
							
							Пока ВыборкаОтпуска.Следующий() Цикл
								СтрокаОтпуска = ДанныеЗаполненияПоСотруднику.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаОтпуска, ВыборкаОтпуска);
								СтрокаОтпуска.ДатаНачалаСобытия = ВыборкаОтпуска.Период;
								СтрокаОтпуска.ВидОтпуска = ВыборкаОтпуска.ПредставлениеВидаОтпуска;
								СтрокаОтпуска.ОснованиеОтпуска = ВыборкаОтпуска.Основание;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;					
				КонецЦикла;
				
			КонецЦикла;
			
			ДанныеЗаполненияПоСотруднику.Сортировать("ДатаНачалаСобытия");
			ДанныеЗаполнения.Вставить(ВыборкаОтпуска.Сотрудник, ДанныеЗаполненияПоСотруднику);
			
		КонецЦикла;
		
		ДополнительныеСведения.Вставить("ДанныеЗаполненияОтпуска", ДанныеЗаполнения);
		
	КонецЕсли;
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Функция ОтчетВидаКарточкаСотрудника(КлючВарианта) Экспорт
	
	Если КлючВарианта = "Т4" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВывестиМакетыОтчетовПоСотрудникам(Отчет, КлючВарианта, ДокументРезультат, Данные, Группировки, ЗначениеПараметра, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи) Экспорт
	
	Если КлючВарианта = "Т4" Тогда
		
		ДокументРезультат.АвтоМасштаб = Истина;
		ВывестиМакетыСГруппировкамиТ4(Отчет, ДокументРезультат, Данные, Группировки, ЗначениеПараметра, СоответствиеПользовательскихПолей, , РаботникКадровойСлужбыРасшифровкаПодписи);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ДополнительныеПоляОтчетаКадроваяИсторияСотрудников() Экспорт
	
	СоответствиеДополнительныхПолейПредставлениям = Новый Структура;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ДополнитьДополнительныеПоляОтчетаКадроваяИсторияСотрудников(СоответствиеДополнительныхПолейПредставлениям);
	КонецЕсли;
	
	Если СоответствиеДополнительныхПолейПредставлениям.Количество() > 0 Тогда
		Возврат СоответствиеДополнительныхПолейПредставлениям;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти


#Область ФормированиеКарточкиНаучногоРаботникаТ4

Процедура ВывестиМакетыСГруппировкамиТ4(Отчет, ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, Уровень = 0, РаботникКадровойСлужбыРасшифровкаПодписи = "")
	
	Если Группировки.Количество() > Уровень Тогда 
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[Уровень].Значение;
			ВывестиГруппировкуТ4(Отчет, ДокументРезультат, СтрокаДанных, ПолеДанных, Уровень, Группировки);
			ВывестиМакетыСГруппировкамиТ4(ДокументРезультат, СтрокаДанных, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, Уровень + 1, РаботникКадровойСлужбыРасшифровкаПодписи);
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетТ4(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппировкуТ4(Отчет, ДокументРезультат, СтрокаДанных, Поле, Уровень, Группировки)
	
	МакетТ4 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_Т4");
	ОбластьГруппировки = МакетТ4.ПолучитьОбласть("Группировка");
	
	ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле));
	
	ОбластьГруппировки.Параметры.НазваниеПараметра = ДоступноеПоле.Заголовок;
	ОбластьГруппировки.Параметры.Значение = СтрокаДанных[СтрЗаменить(Поле, ".", "")];
	
	ДокументРезультат.Вывести(ОбластьГруппировки, Уровень);
	
КонецПроцедуры 

Процедура ВывестиМакетТ4(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи) 
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	МакетТ4 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_Т4");
	Макет = МакетТ4.ПолучитьОбласть("Т4");
	
	Макет.Параметры.Заполнить(СтрокаДанных);
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУченаяСтепеньУченаяСтепеньРодитель) Тогда
		Макет.Параметры.ЛичныеДанныеУченаяСтепеньУченаяСтепень = СтрокаДанных.ЛичныеДанныеУченаяСтепеньУченаяСтепеньРодитель;
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макет, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияВысшееОбразованиеУчебноеЗаведение) Тогда
		Макет.Параметры.ВысшееОбразование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, %2';
				|en = '%1, %2'"),
			СтрокаДанных.ЛичныеДанныеОбразованияВысшееОбразованиеУчебноеЗаведение,
			Формат(СтрокаДанных.ЛичныеДанныеОбразованияВысшееОбразованиеОкончание, "ДФ=гггг"));
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажДней)
		И СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажДней
			+ СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажМесяцев
			+ СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажЛет > 0 Тогда
		
		Макет.Параметры.НаучноПедагогическийСтаж = ПредставлениеСтажа(
			СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажДней, 
			СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажМесяцев, 
			СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажЛет);
		
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажДней)
		И СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажДней
			+ СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажМесяцев
			+ СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажЛет > 0 Тогда
		
		Макет.Параметры.ПедагогическийСтаж = ПредставлениеСтажа(
			СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажДней, 
			СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажМесяцев, 
			СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажЛет);
		
	КонецЕсли; 	
		
	Если СтрокаДанных.ЛичныеДанныеИмеетИзобретения Тогда
		Макет.Область("ИзобретенияНеИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	Иначе
		Макет.Область("ИзобретенияИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	КонецЕсли; 
	
	Если СтрокаДанных.ЛичныеДанныеИмеетНаучныеТруды Тогда
		Макет.Область("НаучныеТрудыНеИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	Иначе
		Макет.Область("НаучныеТрудыИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	КонецЕсли; 
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПодразделение) Тогда
		Макет.Параметры.РабочееМестоПодразделение = СтрокаДанных.РабочееМестоПодразделение.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макет, Уровень+1);
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеМетодыДляПолученияКадровыхДанных

Функция ПредставлениеСтажа(Дней, Месяцев, Лет) Экспорт
	
	Возврат ?(Дней = 0, "", КадровыйУчетРасширенныйКлиентСервер.ПредставлениеДней(Дней))
		+ ?(Месяцев = 0, "", ?(Дней = 0, "", " ") + КадровыйУчетРасширенныйКлиентСервер.ПредставлениеМесяцев(Месяцев))
		+ ?(Лет = 0, "", ?(Дней = 0 И Месяцев = 0, "", " ") + КадровыйУчетРасширенныйКлиентСервер.ПредставлениеЛет(Лет));
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииФормКадровыхДокументов

Процедура УстановитьПараметрыВыбораНачисленийПоКатегории(Форма, ОписаниеТаблицыНачислений, МассивКатегорийНачислений) Экспорт
	
	ИмяЭлемента = ОписаниеТаблицыНачислений.ИмяТаблицы + ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета;
	УстановитьПараметрыВыбораНачисленийПоКатегорииЭлементуФормы(Форма, ИмяЭлемента, МассивКатегорийНачислений);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоКатегорииЭлементуФормы(Форма, ИмяЭлемента, МассивКатегорийНачислений) Экспорт
	
	ЭлементФормыНачисление = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормыНачисление <> Неопределено Тогда
		
		ЕстьСвояНастройкаПараметра = Ложь;
		
		ПараметрыВыбораНачислений = Новый Массив;
		
		Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
			
			Если ПараметрВыбора.Имя = "Отбор.КатегорияНачисленияИлиНеоплаченногоВремени" Тогда
				ЕстьСвояНастройкаПараметра = Истина;
				Прервать;
			КонецЕсли;
			
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
			
		КонецЦикла;
		
		Если Не ЕстьСвояНастройкаПараметра Тогда
			
			ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Новый ФиксированныйМассив(МассивКатегорийНачислений));
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
			ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыбораКатегорииНачислений(ПолныйСписокКатегорий = Ложь) Экспорт
	
	МассивКатегорийНачислений = Новый Массив;
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия);
	
	Если ПолныйСписокКатегорий Тогда
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	КонецЕсли;
	
	Возврат МассивКатегорийНачислений;
	
КонецФункции

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора);
	КонецЕсли;

КонецПроцедуры

Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат МодульГосударственнаяСлужба.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

// Выполняет проверку соответствия штатному расписанию переданных кадровых движений.
// Параметры: 
//	ДанныеОЗанятыхПозициях это коллекция элементов с полями.
//		Период, 
//		ПозицияШтатногоРасписания, 
//		Сотрудник,
//		КоличествоСтавок
//	ПроверяемыйРегистратор - ссылка на проверяемый регистратор (движения 
//		которого необходимо исключить из рассмотрения).
//	СохранитьНаСервере - булево. Если Истина, то результаты проверки необходимо 
//		сохранить во временном хранилище.
//	РезультатПроверки - в этот параметр возвращается результат проверки - 
//		адрес временного хранилища со структурой.
//		Структура может содержать два поля.
//			* ПроблемыТекущегоДокумента.
//			* ПроблемыДругихДокументов.
//		Каждое из полей - таблица значений с колонками.
//			- Документ - ссылка на документ, который не будет соответствовать штатному расписанию.
//			- ДокументПредставление - ...его представление.
//			- ДатаДокумента - ...его дата.
//			- Период - дата движения, которое не будет соответствовать штатному расписанию.
//			- Сотрудник
//			- КоличествоСтавок
//			- ПозицияШтатногоРасписания
//			- ПозицияШтатногоРасписанияПредставление
//	ИсправленныйДокумент - ссылка на документ, который будет исправлен документом ПроверяемыйРегистратор.
//		Не обязательный
//			
//	Возвращаемое значение:
//	Истина, если данные соответствуют штатному расписанию и Ложь в противном случае.
Функция ПроверкаСоответствияШтатномуРасписанию(Знач ДанныеОЗанятыхПозициях, ПроверяемыйРегистратор, СохранитьНаСервере, РезультатПроверки, ИсправленныйДокумент = НеОпределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеОЗанятыхПозициях) = Тип("Строка") Тогда
		ДанныеОЗанятыхПозициях = ПолучитьИзВременногоХранилища(ДанныеОЗанятыхПозициях);
	КонецЕсли;
	
	ДанныеПроверки = Новый Структура();
	
	ПроблемыТекущегоДокумента = Новый ТаблицаЗначений;
	ПроблемыТекущегоДокумента.Колонки.Добавить("Документ");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДокументПредставление");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДатаДокумента");
	ПроблемыТекущегоДокумента.Колонки.Добавить("Период");
	ПроблемыТекущегоДокумента.Колонки.Добавить("Сотрудник");
	ПроблемыТекущегоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("КоличествоСтавокНеСоответствуетПозиции", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("СвободноеКоличествоСтавок", Новый ОписаниеТипов("Число"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСНачислениями", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("РасшифровкаНачислений");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПозицияШтатногоРасписанияПредставление");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСГрейдом", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСГрейдомПредставление", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000)));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		МодульОбразовательныеУчреждения.ИсключитьНачисленияПедагогическихДолжностейИзПроверкиШтатногоРасписания(ДанныеОЗанятыхПозициях);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Возврат МодульГрейды.ПроверкаНаСоответствиеГрейдамПередЗаписьюДокумента(РезультатПроверки, ДанныеОЗанятыхПозициях, ПроблемыТекущегоДокумента, ПроверяемыйРегистратор);
		КонецЕсли;
	КонецЕсли;
	
	ПроблемыДругихДокументов = ПроблемыТекущегоДокумента.СкопироватьКолонки("Документ,ДокументПредставление,ДатаДокумента,Период,Сотрудник,КоличествоСтавок,ПозицияШтатногоРасписания,ПозицияШтатногоРасписанияПредставление");

	МассивПозицийШтатногоРасписания = Новый Массив;
	ДвиженияПроверяемогоДокумента = Новый ТаблицаЗначений();
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	
	ДвиженияНачисленийПроверяемогоДокумента = Новый ТаблицаЗначений;
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементДанных Из ДанныеОЗанятыхПозициях Цикл
		Если Не ЗначениеЗаполнено(ЭлементДанных.ПозицияШтатногоРасписания) Тогда
			НоваяСтрокаПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.Добавить();
			НоваяСтрокаПроблемыТекущегоДокумента.Период = ЭлементДанных.Период;
			НоваяСтрокаПроблемыТекущегоДокумента.Сотрудник = ЭлементДанных.Сотрудник;
			Продолжить;
		ИначеЕсли МассивПозицийШтатногоРасписания.Найти(ЭлементДанных.ПозицияШтатногоРасписания) = Неопределено Тогда
			МассивПозицийШтатногоРасписания.Добавить(ЭлементДанных.ПозицияШтатногоРасписания);
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ДвиженияПроверяемогоДокумента.Добавить(),ЭлементДанных);
		Если ЭлементДанных.ДанныеОНачислениях = Неопределено Или ЭлементДанных.ДанныеОНачислениях.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ДвиженияНачисленийПроверяемогоДокумента.Добавить(),ЭлементДанных);
		Иначе
			Для каждого ДанноеНачисления Из ЭлементДанных.ДанныеОНачислениях Цикл
				СтрокаДвиженияНачисленийПроверяемогоДокумента = ДвиженияНачисленийПроверяемогоДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияНачисленийПроверяемогоДокумента, ЭлементДанных);
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияНачисленийПроверяемогоДокумента, ДанноеНачисления);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПроверяемыйРегистратор", ПроверяемыйРегистратор);
	Запрос.УстановитьПараметр("ДвиженияПроверяемогоДокумента", ДвиженияПроверяемогоДокумента);
	
	ИсключаемыеПриПроверке = Новый Массив;
	
	Если ЗначениеЗаполнено(ПроверяемыйРегистратор) Тогда
		
		РеквизитыПроверяемогоРегистратора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроверяемыйРегистратор, "Дата,Проведен");
		
		Запрос.УстановитьПараметр("ДатаПроверяемогоРегистратора", РеквизитыПроверяемогоРегистратора.Дата);
		
		Если РеквизитыПроверяемогоРегистратора.Проведен = Истина Тогда
			ИсключаемыеПриПроверке.Добавить(ПроверяемыйРегистратор);
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("ДатаПроверяемогоРегистратора", '00010101');
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		ИсключаемыеПриПроверке.Добавить(ИсправленныйДокумент);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсключаемыеПриПроверке", ИсключаемыеПриПроверке);
	
	ЧастиТекстаЗапроса = Новый Массив;
	ЧастиТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДвиженияПроверяемогоДокумента.Период КАК Период,
		|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
		|	ДвиженияПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
		|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
		|ПОМЕСТИТЬ ВТДвиженияПроверяемогоДокументаПредварительно
		|ИЗ
		|	&ДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник,
		|	ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияПроверяемогоДокументаПредварительно.Период КАК Период,
		|	ЗанятостьПозиций.Сотрудник КАК Сотрудник,
		|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЗанятостьПозиций.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятостьПозиций.ВидЗанятостиПозиции КАК ВидЗанятостиПозиции,
		|	ЗанятостьПозиций.ПланируемаяДатаЗавершения КАК ПланируемаяДатаЗавершения
		|ПОМЕСТИТЬ ВТРанееЗанятыеСтавкиПредварительно
		|ИЗ
		|	ВТДвиженияПроверяемогоДокументаПредварительно КАК ДвиженияПроверяемогоДокументаПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозиций
		|		ПО ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания = ЗанятостьПозиций.ПозицияШтатногоРасписания
		|			И (ЗанятостьПозиций.ДатаНачала <= ДвиженияПроверяемогоДокументаПредварительно.Период)
		|			И (НАЧАЛОПЕРИОДА(ЗанятостьПозиций.ДатаОкончания, ДЕНЬ) > ДвиженияПроверяемогоДокументаПредварительно.Период)
		|ГДЕ
		|	НЕ ЗанятостьПозиций.РегистраторСобытия В (&ИсключаемыеПриПроверке)
		|	И ДвиженияПроверяемогоДокументаПредварительно.КоличествоСтавок > 0");
	
	Если ИсключаемыеПриПроверке.Количество() > 0 Тогда
		
		ЧастиТекстаЗапроса.Добавить("
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		
		ЧастиТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДвиженияПроверяемогоДокументаПредварительно.Период,
			|	ЗанятостьПозицийПрежняя.Сотрудник,
			|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания,
			|	ЗанятостьПозицийПрежняя.КоличествоСтавок,
			|	ЗанятостьПозицийПрежняя.ВидЗанятостиПозиции,
			|	ЗанятостьПозицийПрежняя.ПланируемаяДатаЗавершения
			|ИЗ
			|	ВТДвиженияПроверяемогоДокументаПредварительно КАК ДвиженияПроверяемогоДокументаПредварительно
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозиций
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозицийПрежняя
			|			ПО ЗанятостьПозиций.Сотрудник = ЗанятостьПозицийПрежняя.Сотрудник
			|				И ЗанятостьПозиций.ДокументОснование = ЗанятостьПозицийПрежняя.ДокументОснование
			|				И ЗанятостьПозиций.ПозицияШтатногоРасписания = ЗанятостьПозицийПрежняя.ПозицияШтатногоРасписания
			|				И (ЗанятостьПозиций.ДатаНачала = ДОБАВИТЬКДАТЕ(ЗанятостьПозицийПрежняя.ДатаОкончания, СЕКУНДА, 1))
			|		ПО ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания = ЗанятостьПозиций.ПозицияШтатногоРасписания
			|			И (ДвиженияПроверяемогоДокументаПредварительно.Период МЕЖДУ ЗанятостьПозиций.ДатаНачала И ЗанятостьПозиций.ДатаОкончания)
			|ГДЕ
			|	ЗанятостьПозиций.РегистраторСобытия В(&ИсключаемыеПриПроверке)");
		
	КонецЕсли;
	
	ЧастиТекстаЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ЧастиТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	РанееЗанятыеСтавки.Период КАК Период,
		|	РанееЗанятыеСтавки.Сотрудник КАК Сотрудник,
		|	РанееЗанятыеСтавки.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	СУММА(РанееЗанятыеСтавки.КоличествоСтавок) КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТРанееЗанятыеСтавки
		|ИЗ
		|	ВТРанееЗанятыеСтавкиПредварительно КАК РанееЗанятыеСтавки
		|ГДЕ
		|	(РанееЗанятыеСтавки.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|			ИЛИ РанееЗанятыеСтавки.Период = РанееЗанятыеСтавки.ПланируемаяДатаЗавершения)
		|
		|СГРУППИРОВАТЬ ПО
		|	РанееЗанятыеСтавки.Период,
		|	РанееЗанятыеСтавки.Сотрудник,
		|	РанееЗанятыеСтавки.ПозицияШтатногоРасписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник,
		|	ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПроверяемогоДокументаПредварительно.Период КАК Период,
		|	ДвиженияПроверяемогоДокументаПредварительно.Сотрудник КАК Сотрудник,
		|	ДвиженияПроверяемогоДокументаПредварительно.КоличествоСтавок КАК КоличествоСтавокДокумента,
		|	ДвиженияПроверяемогоДокументаПредварительно.КоличествоСтавок - ЕСТЬNULL(РанееЗанятыеСтавки.КоличествоСтавок, 0) КАК КоличествоСтавок,
		|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
		|ПОМЕСТИТЬ ВТДвиженияПроверяемогоДокумента
		|ИЗ
		|	ВТДвиженияПроверяемогоДокументаПредварительно КАК ДвиженияПроверяемогоДокументаПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееЗанятыеСтавки КАК РанееЗанятыеСтавки
		|		ПО ДвиженияПроверяемогоДокументаПредварительно.Сотрудник = РанееЗанятыеСтавки.Сотрудник
		|			И ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания = РанееЗанятыеСтавки.ПозицияШтатногоРасписания
		|			И ДвиженияПроверяемогоДокументаПредварительно.Период = РанееЗанятыеСтавки.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник,
		|	ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияПроверяемогоДокумента.Период КАК Период,
		|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
		|	ДвиженияПроверяемогоДокумента.КоличествоСтавокДокумента КАК КоличествоСтавокДокумента,
		|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
		|ПОМЕСТИТЬ ВТПериодыПроверяемогоДокумента
		|ИЗ
		|	ВТДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник,
		|	ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МИНИМУМ(ПериодыПроверяемогоДокумента.Период) КАК Период,
		|	ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
		|ПОМЕСТИТЬ ВТРанниеПериодыПроверяемогоДокумента
		|ИЗ
		|	ВТПериодыПроверяемогоДокумента КАК ПериодыПроверяемогоДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ПроверяемыйРегистратор КАК Документ,
		|	&ДатаПроверяемогоРегистратора КАК ДатаДокумента,
		|	ДвиженияПроверяемогоДокумента.Период КАК Период,
		|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
		|	ДвиженияПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
		|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор) КАК ДокументПредставление,
		|	ИСТИНА КАК ЭтоПроверяемыйДокумент
		|ПОМЕСТИТЬ ВТЗанятыеПозицииШтатногоРасписания
		|ИЗ
		|	ВТДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗанятостьПозиций.РегистраторСобытия,
		|	ЗанятостьПозиций.РегистраторСобытия.Дата,
		|	КОНЕЦПЕРИОДА(ЗанятостьПозиций.ДатаНачала, ДЕНЬ),
		|	ЗанятостьПозиций.Сотрудник,
		|	ВЫБОР
		|		КОГДА ЗанятостьПозиций.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|			ТОГДА ЗанятостьПозиций.КоличествоСтавок
		|		ИНАЧЕ -ЗанятостьПозиций.КоличествоСтавок
		|	КОНЕЦ,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятостьПозиций.РегистраторСобытия),
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеПериодыПроверяемогоДокумента КАК РанниеПериодыПроверяемогоДокумента
		|		ПО ЗанятостьПозиций.ПозицияШтатногоРасписания = РанниеПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
		|			И (ЗанятостьПозиций.ДатаНачала >= КОНЕЦПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ))
		|ГДЕ
		|	НЕ ЗанятостьПозиций.РегистраторСобытия В (&ИсключаемыеПриПроверке)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗанятостьПозиций.РегистраторСобытия,
		|	ЗанятостьПозиций.РегистраторСобытия.Дата,
		|	ЗанятостьПозиций.ПланируемаяДатаЗавершения,
		|	ЗанятостьПозиций.Сотрудник,
		|	ВЫБОР
		|		КОГДА ЗанятостьПозиций.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|			ТОГДА ЗанятостьПозиций.КоличествоСтавок
		|		ИНАЧЕ -ЗанятостьПозиций.КоличествоСтавок
		|	КОНЕЦ,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятостьПозиций.РегистраторСобытия),
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеПериодыПроверяемогоДокумента КАК РанниеПериодыПроверяемогоДокумента
		|		ПО ЗанятостьПозиций.ПозицияШтатногоРасписания = РанниеПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
		|			И (ЗанятостьПозиций.ПланируемаяДатаЗавершения > КОНЕЦПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыПроверяемогоДокумента КАК ПериодыПроверяемогоДокумента
		|		ПО ЗанятостьПозиций.ПозицияШтатногоРасписания = ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
		|			И ЗанятостьПозиций.Сотрудник = ПериодыПроверяемогоДокумента.Сотрудник
		|ГДЕ
		|	НЕ ЗанятостьПозиций.РегистраторСобытия В (&ИсключаемыеПриПроверке)
		|	И ПериодыПроверяемогоДокумента.Сотрудник ЕСТЬ NULL
		|	И ЗанятостьПозиций.ПланируемаяДатаЗавершения > ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ПроверяемыйРегистратор,
		|	&ДатаПроверяемогоРегистратора,
		|	НАЧАЛОПЕРИОДА(ЗанятыеПозиции.Период, ДЕНЬ),
		|	NULL,
		|	СУММА(ЗанятыеПозиции.КоличествоСтавок),
		|	ЗанятыеПозиции.ПозицияШтатногоРасписания,
		|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор),
		|	ИСТИНА
		|ИЗ
		|	ВТРанееЗанятыеСтавкиПредварительно КАК ЗанятыеПозиции
		|ГДЕ
		|	ЗанятыеПозиции.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗанятыеПозиции.Период,
		|	ЗанятыеПозиции.ПозицияШтатногоРасписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник,
		|	ПозицияШтатногоРасписания");
	
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
	Запрос.Выполнить();
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТЗанятыеПозицииШтатногоРасписания");
	
	ДанныеПозиций = "КоличествоСтавок";
	УправлениеШтатнымРасписанием.ДополнитьСоставЗапрашиваемыхДанныхИменамиДанныхНачислений(ДанныеПозиций);
	
	УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(
		Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, ДанныеПозиций, "ВТКоличествоСтавокПозиций");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗанятыеПозиции.ДатаДокумента КАК ДатаДокумента,
		|	ЗанятыеПозиции.Документ КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозиции.Документ) КАК ДокументПредставление,
		|	НАЧАЛОПЕРИОДА(ЗанятыеПозиции.Период, ДЕНЬ) КАК Период,
		|	ЗанятыеПозиции.Сотрудник КАК Сотрудник,
		|	ЗанятыеПозиции.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятыеПозиции.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозиции.ПозицияШтатногоРасписания) КАК ПозицияШтатногоРасписанияПредставление,
		|	ЗанятыеПозиции.ЭтоПроверяемыйДокумент КАК ЭтоПроверяемыйДокумент,
		|	ЕСТЬNULL(КоличествоСтавокПозиций.КоличествоСтавок, 0) КАК СвободноеКоличествоСтавок
		|ИЗ
		|	ВТЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтавокПозиций КАК КоличествоСтавокПозиций
		|		ПО ЗанятыеПозиции.ПозицияШтатногоРасписания = КоличествоСтавокПозиций.ПозицияШтатногоРасписания
		|			И (НАЧАЛОПЕРИОДА(ЗанятыеПозиции.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(КоличествоСтавокПозиций.Период, ДЕНЬ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Период,
		|	ВЫБОР
		|		КОГДА ЗанятыеПозиции.Сотрудник ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	КоличествоСтавок,
		|	Сотрудник";
	
	РезультатЗапросаПоПозициям = Запрос.Выполнить();
	
	Если Не РезультатЗапросаПоПозициям.Пустой() Тогда
		
		Выборка = РезультатЗапросаПоПозициям.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("ПозицияШтатногоРасписания") Цикл
			
			КоличествоСтавок = 0;
			
			Пока Выборка.Следующий() Цикл
				
				РанееЗанятоеКоличествоСтавок = КоличествоСтавок;
				СвободноеКоличествоСтавок = Выборка.СвободноеКоличествоСтавок - РанееЗанятоеКоличествоСтавок;
				Если Выборка.КоличествоСтавок > СвободноеКоличествоСтавок Тогда
					
					СтруктураПоиска = Новый Структура("Документ,Сотрудник,ПозицияШтатногоРасписания");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
					
					СтрокиПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПроблемыТекущегоДокумента.Количество() > 0 Тогда
						НоваяСтрока = СтрокиПроблемыТекущегоДокумента[0];
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.СвободноеКоличествоСтавок = СвободноеКоличествоСтавок;
					ИначеЕсли Выборка.ЭтоПроверяемыйДокумент = Истина И ЗначениеЗаполнено(Выборка.Сотрудник) Тогда 
						НоваяСтрока = ПроблемыТекущегоДокумента.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.СвободноеКоличествоСтавок = СвободноеКоличествоСтавок;
						НоваяСтрока.КоличествоСтавокНеСоответствуетПозиции = Истина;
						НоваяСтрока.ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции = Истина;
						НоваяСтрока.РасшифровкаНачислений = Новый Массив;
					ИначеЕсли Выборка.ЭтоПроверяемыйДокумент = ЛОЖЬ Тогда
						НоваяСтрока = ПроблемыДругихДокументов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					КонецЕсли;
					
				КонецЕсли;
				
				КоличествоСтавок = КоличествоСтавок + Выборка.КоличествоСтавок;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТКоличествоСтавокПозиций");
		ПараметрыПостроения.ДополнитьОписаниемНачислений = Истина;
		ПараметрыПостроения.ПолноеОписаниеНачислений = Истина;
		
		УправлениеШтатнымРасписанием.СоздатьВТНачисленияШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, "ВТНачисленияШтатногоРасписанияПредварительно");
		
		Запрос.УстановитьПараметр("ДвиженияНачисленийПроверяемогоДокумента", ДвиженияНачисленийПроверяемогоДокумента);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДвиженияНачисленийПроверяемогоДокумента.Период КАК Период,
			|	ДвиженияНачисленийПроверяемогоДокумента.Сотрудник КАК Сотрудник,
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
			|	ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ДвиженияНачисленийПроверяемогоДокумента.Начисление КАК Начисление,
			|	ДвиженияНачисленийПроверяемогоДокумента.Показатель КАК Показатель,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Значение = НЕОПРЕДЕЛЕНО
			|			ТОГДА 0
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.Значение
			|	КОНЕЦ КАК Значение
			|ПОМЕСТИТЬ ВТДвиженияНачисленийПроверяемогоДокумента
			|ИЗ
			|	&ДвиженияНачисленийПроверяемогоДокумента КАК ДвиженияНачисленийПроверяемогоДокумента
			|ГДЕ
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок >= 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	ПозицияШтатногоРасписания,
			|	Начисление,
			|	Показатель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(НачисленияШтатногоРасписания.Период, ДЕНЬ) КАК Период,
			|	ПериодыПроверяемогоДокумента.Сотрудник КАК Сотрудник,
			|	НачисленияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияШтатногоРасписания.Начисление КАК Начисление,
			|	НачисленияШтатногоРасписания.Показатель КАК Показатель,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.Значение
			|		ИНАЧЕ НачисленияШтатногоРасписания.Размер
			|	КОНЕЦ КАК Значение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.ЗначениеМин
			|		ИНАЧЕ НачисленияШтатногоРасписания.РазмерМин
			|	КОНЕЦ КАК ЗначениеМин,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.ЗначениеМакс
			|		ИНАЧЕ НачисленияШтатногоРасписания.РазмерМакс
			|	КОНЕЦ КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТНачисленияШтатногоРасписания
			|ИЗ
			|	ВТПериодыПроверяемогоДокумента КАК ПериодыПроверяемогоДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияШтатногоРасписанияПредварительно КАК НачисленияШтатногоРасписания
			|		ПО (НАЧАЛОПЕРИОДА(ПериодыПроверяемогоДокумента.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(НачисленияШтатногоРасписания.Период, ДЕНЬ))
			|			И ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания = НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|ГДЕ
			|	ПериодыПроверяемогоДокумента.КоличествоСтавокДокумента >= 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	ПозицияШтатногоРасписания,
			|	Начисление,
			|	НачисленияШтатногоРасписания.Показатель";
			
		Запрос.Выполнить();
			
		Запрос.УстановитьПараметр("ИспользоватьВилкуСтавокВШтатномРасписании", ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании"));
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Период ЕСТЬ NULL
			|			ТОГДА НачисленияШтатногоРасписания.Период
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДвиженияНачисленийПроверяемогоДокумента.Период, ДЕНЬ)
			|	КОНЕЦ КАК Период,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Сотрудник ЕСТЬ NULL
			|			ТОГДА НачисленияШтатногоРасписания.Сотрудник
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.Сотрудник
			|	КОНЕЦ КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания ЕСТЬ NULL
			|			ТОГДА НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания
			|	КОНЕЦ КАК ПозицияШтатногоРасписания,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК НачислениеСотрудника,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательСотрудника,
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|			ТОГДА ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КоэффициентПересчета,
			|	ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК НачислениеПозиции,
			|	ЕСТЬNULL(НачисленияШтатногоРасписания.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательПозиции,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА &ИспользоватьВилкуСтавокВШтатномРасписании
			|				ТОГДА НачисленияШтатногоРасписания.ЗначениеМин
			|			ИНАЧЕ НачисленияШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА &ИспользоватьВилкуСтавокВШтатномРасписании
			|				ТОГДА НачисленияШтатногоРасписания.ЗначениеМакс
			|			ИНАЧЕ НачисленияШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТСводНачислений
			|ИЗ
			|	ВТДвиженияНачисленийПроверяемогоДокумента КАК ДвиженияНачисленийПроверяемогоДокумента
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНачисленияШтатногоРасписания КАК НачисленияШтатногоРасписания
			|		ПО (НАЧАЛОПЕРИОДА(ДвиженияНачисленийПроверяемогоДокумента.Период, ДЕНЬ) = НачисленияШтатногоРасписания.Период)
			|			И ДвиженияНачисленийПроверяемогоДокумента.Сотрудник = НачисленияШтатногоРасписания.Сотрудник
			|			И ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания = НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|			И ДвиженияНачисленийПроверяемогоДокумента.Начисление = НачисленияШтатногоРасписания.Начисление
			|			И ДвиженияНачисленийПроверяемогоДокумента.Показатель = НачисленияШтатногоРасписания.Показатель";
		Запрос.Выполнить();
			
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СводНачислений.Период,
			|	СводНачислений.Сотрудник,
			|	&ДатаПроверяемогоРегистратора КАК ДатаДокумента,
			|	&ПроверяемыйРегистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор) КАК ДокументПредставление,
			|	СводНачислений.ПозицияШтатногоРасписания,
			|	ПРЕДСТАВЛЕНИЕ(СводНачислений.ПозицияШтатногоРасписания) КАК ПозицияШтатногоРасписанияПредставление,
			|	СводНачислений.НачислениеСотрудника КАК Начисление,
			|	СводНачислений.ПоказательСотрудника КАК Показатель,
			|	СводНачислений.НачислениеПозиции,
			|	СводНачислений.ПоказательПозиции,
			|	СводНачислений.Значение,
			|	СводНачислений.ЗначениеМин,
			|	СводНачислений.ЗначениеМакс,
			|	ВЫБОР
			|		КОГДА СводНачислений.НачислениеСотрудника = СводНачислений.НачислениеПозиции
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК НачислениеНеСоответствуетПозиции,
			|	ВЫБОР
			|		КОГДА СводНачислений.ПоказательСотрудника = СводНачислений.ПоказательПозиции
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПоказательНеСоответствуетПозиции,
			|	ВЫБОР
			|		КОГДА СводНачислений.Значение >= СводНачислений.ЗначениеМин
			|				И СводНачислений.Значение <= СводНачислений.ЗначениеМакс
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЗначениеНеСоответствуетПозиции
			|ИЗ
			|	ВТСводНачислений КАК СводНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НачисленияПоказатели.Ссылка КАК Ссылка,
			|			МАКСИМУМ(НачисленияПоказатели.Показатель) КАК Показатель
			|		ИЗ
			|			ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ГДЕ
			|			НачисленияПоказатели.Показатель = &ДоляНеполногоРабочегоВремени
			|			И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НачисленияПоказатели.Ссылка) КАК НачисленияПоказатели
			|		ПО СводНачислений.НачислениеСотрудника = НачисленияПоказатели.Ссылка
			|ГДЕ
			|	(СводНачислений.НачислениеСотрудника <> СводНачислений.НачислениеПозиции
			|			ИЛИ СводНачислений.ПоказательСотрудника <> СводНачислений.ПоказательПозиции
			|			ИЛИ СводНачислений.Значение < (ВЫРАЗИТЬ(СводНачислений.ЗначениеМин * ВЫБОР
			|					КОГДА ВЫРАЗИТЬ(СводНачислений.ПоказательСотрудника КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|							И ВЫРАЗИТЬ(СводНачислений.НачислениеСотрудника КАК ПланВидовРасчета.Начисления).УчетВремениВЧасах = ЛОЖЬ
			|							И НачисленияПоказатели.Показатель ЕСТЬ NULL 
			|						ТОГДА СводНачислений.КоэффициентПересчета
			|					ИНАЧЕ 1
			|				КОНЕЦ КАК ЧИСЛО(15, 4)))
			|			ИЛИ СводНачислений.Значение > (ВЫРАЗИТЬ(СводНачислений.ЗначениеМакс * ВЫБОР
			|					КОГДА ВЫРАЗИТЬ(СводНачислений.ПоказательСотрудника КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|							И ВЫРАЗИТЬ(СводНачислений.НачислениеСотрудника КАК ПланВидовРасчета.Начисления).УчетВремениВЧасах = ЛОЖЬ
			|							И НачисленияПоказатели.Показатель ЕСТЬ NULL 
			|						ТОГДА СводНачислений.КоэффициентПересчета
			|					ИНАЧЕ 1
			|				КОНЕЦ КАК ЧИСЛО(15, 4))))";
		
		Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
		РезультатЗапросаПоНачислениям = Запрос.Выполнить();
		
		Если Не РезультатЗапросаПоНачислениям.Пустой() Тогда
			ТаблицаПроблемныхНачислений = РезультатЗапросаПоНачислениям.Выгрузить();
			ТаблицаПроблемныхНачисленийПоСотрудникам = ТаблицаПроблемныхНачислений.Скопировать(, "Период,Сотрудник,ПозицияШтатногоРасписания");
			ТаблицаПроблемныхНачисленийПоСотрудникам.Свернуть("Период,Сотрудник,ПозицияШтатногоРасписания");
			Для каждого СтрокаТаблицы Из ТаблицаПроблемныхНачисленийПоСотрудникам Цикл
				СтруктураПоиска = Новый Структура("Период,Сотрудник,ПозицияШтатногоРасписания");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
				СтрокиПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.НайтиСтроки(СтруктураПоиска);
				НеобходимоЗаполнитьСтрокуОписанияПроблемы = Ложь;
				Если СтрокиПроблемыТекущегоДокумента.Количество() = 0 Тогда
					СтрокаПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.Добавить();
					НеобходимоЗаполнитьСтрокуОписанияПроблемы = Истина;
				Иначе
					СтрокаПроблемыТекущегоДокумента = СтрокиПроблемыТекущегоДокумента[0];
				КонецЕсли;
				РасшифровкаНачислений = ТаблицаПроблемныхНачислений.СкопироватьКолонки("Начисление,Показатель,НачислениеПозиции,ПоказательПозиции,Значение,ЗначениеМин,ЗначениеМакс,НачислениеНеСоответствуетПозиции,ПоказательНеСоответствуетПозиции,ЗначениеНеСоответствуетПозиции");
				СтрокиНачислений = ТаблицаПроблемныхНачислений.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
					Если НеобходимоЗаполнитьСтрокуОписанияПроблемы Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПроблемыТекущегоДокумента, СтрокаНачислений);
						НеобходимоЗаполнитьСтрокуОписанияПроблемы = Ложь;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(РасшифровкаНачислений.Добавить(), СтрокаНачислений);
				КонецЦикла;
				СтрокаПроблемыТекущегоДокумента.ПроблемыСНачислениями = Истина;
				СтрокаПроблемыТекущегоДокумента.ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции = Истина;
				СтрокаПроблемыТекущегоДокумента.РасшифровкаНачислений = ОбщегоНазначения.ТаблицаЗначенийВМассив(РасшифровкаНачислений);
			КонецЦикла;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
			МодульГрейды.ПроверитьНачисленияНаСоответствиеГрейдам(ДанныеОЗанятыхПозициях, ПроблемыТекущегоДокумента, ПроверяемыйРегистратор);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ПроблемыТекущегоДокумента.Количество() + ПроблемыДругихДокументов.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		
		Если ПроблемыТекущегоДокумента.Количество() > 0 Тогда
			ДанныеПроверки.Вставить("ПроблемыТекущегоДокумента", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПроблемыТекущегоДокумента));
		КонецЕсли;	
		
		Если ПроблемыДругихДокументов.Количество() > 0 Тогда
			ДанныеПроверки.Вставить("ПроблемыДругихДокументов", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПроблемыДругихДокументов));
		КонецЕсли;	
		
		РезультатПроверки = ПоместитьВоВременноеХранилище(ДанныеПроверки, Новый УникальныйИдентификатор);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

// Дополняет переданную коллекцию колонками.
//		Организация
//		ГоловнаяОрганизация
//		ТекущаяОрганизация
//		ТекущаяПозиция
//		ТекущееПодразделение
//		ТекущаяДолжность
//  	ТекущееКоличествоСтавок
// Колонки Текущая... заполняются только для записей перемещения и увольнения.
// Колонки Организация, ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	ДействуетДоЕсть = (КадровыеДвижения.Колонки.Найти("ДействуетДо") <> НеОпределено);
	ГоловнаяОрганизацияЕсть = (КадровыеДвижения.Колонки.Найти("ГоловнаяОрганизация") <> НеОпределено);
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> НеОпределено) И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> НеОпределено);
	КоличествоСтавокЕсть = (КадровыеДвижения.Колонки.Найти("КоличествоСтавок") <> НеОпределено);
	ВидДоговораЕсть = (КадровыеДвижения.Колонки.Найти("ВидДоговора") <> НеОпределено);
	
	ПолучатьКадровыеДанные = Не (ПодразделениеЕсть
		И ПозицияЕсть
		И ДолжностьЕсть
		И КоличествоСтавокЕсть
		И ВидДоговораЕсть);
	
	Если Не ПолучатьКадровыеДанные И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Для Каждого СтрокаДвижений Из КадровыеДвижения Цикл
			
			Если СтрокаДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				
				ПолучатьКадровыеДанные = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КадровыеДвижения.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если Не ГоловнаяОрганизацияЕсть Тогда
		КадровыеДвижения.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	КадровыеДвижения.Колонки.Добавить("ТекущаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяПозиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	КадровыеДвижения.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяДолжность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КадровыеДвижения.Колонки.Добавить("ТекущееКоличествоСтавок", Новый ОписаниеТипов("Число"));
	КадровыеДвижения.Колонки.Добавить("ТекущийВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
	
	ОрганизацииПозиций = Неопределено;
	ОрганизацииПодразделений = Неопределено;
	
	// Если есть Позиция или Подразделение, то можно определить Организацию.
	Если ПозицияЕсть Или ПодразделениеЕсть Тогда
		
		Если ПозицияЕсть Тогда
			
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Позиция", Истина);
			ОрганизацииПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Позиции, "Владелец");
			
		КонецЕсли;
		
		Если ПодразделениеЕсть Тогда
			
			Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Подразделение", Истина);
			ОрганизацииПодразделений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Владелец");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получение времени регистрации движений
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, КадровыеДвижения);
	КонецЕсли;
	
	// Таблица с измерениями для получения кадровых данных
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ЭтоУвольнение = ТипЗнч(Регистратор) = Тип("ДокументСсылка.Увольнение")
		Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.УвольнениеСписком");
	
	Для Каждого СтрокаДвижений Из КадровыеДвижения Цикл 
		
		// Заполнение организаций
		Если ПозицияЕсть И ЗначениеЗаполнено(СтрокаДвижений.Позиция) Тогда
			
			СтрокаДвижений.Организация = ОрганизацииПозиций[СтрокаДвижений.Позиция];
			
		ИначеЕсли ПодразделениеЕсть И ЗначениеЗаполнено(СтрокаДвижений.Подразделение) Тогда
			
			СтрокаДвижений.Организация = ОрганизацииПодразделений[СтрокаДвижений.Подразделение];
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДвижений.Организация) Тогда
			СтрокаДвижений.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(СтрокаДвижений.Организация);
		КонецЕсли;
		
		// Формирование таблицы измерений для получения кадровых данных
		Если ПолучатьКадровыеДанные Тогда
			
			НоваяСтрока = ИзмеренияДаты.Добавить();
			НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				
				НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
				Если ЭтоУвольнение Тогда
					НоваяСтрока.Период = НачалоДня(НоваяСтрока.Период) - 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмеренияДаты.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ИзмеренияДаты.Сотрудник,
			|	ИзмеренияДаты.Период
			|ПОМЕСТИТЬ ВТСотрудникиПериод
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты";
		
		Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
		Запрос.Выполнить();
		
		Отбор = Новый Массив;
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", Регистратор));
		
		Отборы = Новый Структура;
		Отборы.Вставить("КадроваяИсторияСотрудников", Отбор);
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТСотрудникиПериод");
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ГоловнаяОрганизация,Организация,Подразделение,Должность,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,ВидДоговора", Отборы);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанныеСотрудников.Сотрудник,
			|	НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
			|	КадровыеДанныеСотрудников.Организация КАК ТекущаяОрганизация,
			|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ТекущаяГоловнаяОрганизация,
			|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ТекущаяПозиция,
			|	КадровыеДанныеСотрудников.Подразделение КАК ТекущееПодразделение,
			|	КадровыеДанныеСотрудников.Должность КАК ТекущаяДолжность,
			|	КадровыеДанныеСотрудников.КоличествоСтавок КАК ТекущееКоличествоСтавок,
			|	КадровыеДанныеСотрудников.ВидДоговора КАК ТекущийВидДоговора
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			Если ЭтоУвольнение Тогда
				СтруктураПоиска.ДатаСобытия = КонецДня(СтруктураПоиска.ДатаСобытия) + 1;
			КонецЕсли;
			
			НайденныеСтроки = КадровыеДвижения.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, 
					"ТекущаяОрганизация,
					|ТекущаяПозиция,
					|ТекущееПодразделение,
					|ТекущаяДолжность,
					|ТекущееКоличествоСтавок,
					|ТекущийВидДоговора");
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.Организация) Тогда
					НайденнаяСтрока.Организация = Выборка.ТекущаяОрганизация;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.ГоловнаяОрганизация) Тогда
					НайденнаяСтрока.ГоловнаяОрганизация = Выборка.ТекущаяГоловнаяОрганизация;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет переданную коллекцию колонками
//		ГоловнаяОрганизация
//		ТекущийГрафик.
// Колонки ТекущийГрафик заполняются только для записей перемещения и увольнения.
// Колонка ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	ГоловнаяОрганизацияЕсть = (ДвиженияГрафиков.Колонки.Найти("ГоловнаяОрганизация") <> НеОпределено);
	Если Не ГоловнаяОрганизацияЕсть Тогда
		ДвиженияГрафиков.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ДвиженияГрафиков);
	КонецЕсли;
	
	// Сотрудники для которых необходимо получить головную организацию
	МассивСотрудников = Новый Массив;
	
	// Сотрудники для которых необходимо получить головную организацию и текущий график работы.
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из ДвиженияГрафиков Цикл
		
		Если Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			
			НоваяСтрока = СотрудникиДаты.Добавить();
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(Строка.ДатаСобытия);
			
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(Строка.Сотрудник);
			КонецЕсли;
			
		Иначе
			МассивСотрудников.Добавить(Строка.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение текущих графиков работы и головных организаций
	Если СотрудникиДаты.Количество() > 0 Тогда
		
		ДвиженияГрафиков.Колонки.Добавить("ТекущийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ГрафикРаботыСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
			ПараметрыПостроения);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГрафикРаботыСотрудников.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
			|	НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
			|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ТекущийГрафик
			|ИЗ
			|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудников";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			СтрокиГрафика = ДвиженияГрафиков.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
				ЗаполнитьЗначенияСвойств(СтрокаГрафика, Выборка, "ГоловнаяОрганизация,ТекущийГрафик");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение головных организаций
	Если МассивСотрудников.Количество() > 0 Тогда
		
		ГоловныеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ГоловнаяОрганизация");
		Для каждого СтрокаДвижений Из ДвиженияГрафиков Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДвижений.ГоловнаяОрганизация) Тогда
				
				ГоловнаяОрганизация = ГоловныеОрганизации.Получить(СтрокаДвижений.Сотрудник);
				Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
					СтрокаДвижений.ГоловнаяОрганизация = ГоловнаяОрганизация;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаНачисленийСотрудников(ИзмеренияДаты, ИсключаемыеРегистраторы)
	
	ТаблицаНачислений = ПустаяТаблицаНачисленийСотрудников();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "НЕ В", КатегорииНачисленийПособий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Начисление.ЯвляетсяЛьготой", "=", Ложь);
		
	Если ИсключаемыеРегистраторы <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ИсключаемыеРегистраторы <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление,
		|	ПлановыеНачисленияСрезПоследних.ДокументОснование КАК ДокументОснование,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСрезПоследних.Начисление КАК ПланВидовРасчета.Начисления).Рассчитывается КАК Рассчитывается,
		|	ПлановыеНачисленияСрезПоследних.Размер КАК Размер,
		|	ЕСТЬNULL(РасчетыПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК РасчетыПоказатели
		|		ПО ПлановыеНачисленияСрезПоследних.Начисление = РасчетыПоказатели.Ссылка
		|			И (РасчетыПоказатели.ЗапрашиватьПриВводе)
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСПоказателями.Период КАК Период,
		|	НачисленияСПоказателями.Сотрудник КАК Сотрудник,
		|	НачисленияСПоказателями.Начисление КАК Начисление,
		|	НачисленияСПоказателями.ДокументОснование КАК ДокументОснование,
		|	НачисленияСПоказателями.Рассчитывается КАК Рассчитывается,
		|	НачисленияСПоказателями.Размер КАК Размер,
		|	НачисленияСПоказателями.Показатель КАК Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение КАК Значение
		|ИЗ
		|	ВТНачисленияСПоказателями КАК НачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО НачисленияСПоказателями.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И НачисленияСПоказателями.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение <> 0)";
	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ТаблицаНачислений);
	
	Возврат ТаблицаНачислений;
	
КонецФункции

Функция ТаблицаФОТСотрудников(ИзмеренияДаты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
	|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ПлановыйФОТСрезПоследних.ВкладВФОТ ЕСТЬ NULL 
	|				ТОГДА ПлановыеНачисленияСрезПоследних.Размер
	|			ИНАЧЕ ПлановыйФОТСрезПоследних.ВкладВФОТ
	|		КОНЕЦ) КАК ФОТ
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
	|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
	|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
	|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
	|ГДЕ
	|	ПлановыеНачисленияСрезПоследних.Используется
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияСрезПоследних.Период,
	|	ПлановыеНачисленияСрезПоследних.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеОТекущихНачисленияхСотрудника(Сотрудник, Период, ИсключаемыеРегистраторы) Экспорт
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(Новый Структура("Сотрудник,Период", Сотрудник, Период));
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктур);
	
	ДанныеОЗанятыхПозициях = ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты, , ИсключаемыеРегистраторы);
	Если ДанныеОЗанятыхПозициях.Количество() > 0 Тогда
		Возврат ДанныеОЗанятыхПозициях[0].ДанныеОНачислениях;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты, ТаблицаНачисленийСотрудников = Неопределено, ИсключаемыеРегистраторы = Неопределено)
	
	ДанныеОЗанятыхПозициях = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Период КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ &ТаблицаСотрудников КАК ТаблицаСотрудников
	|";
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ИзмеренияДаты);
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДолжностьПоШтатномуРасписанию,Должность,КоличествоСтавок");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Период КАК Период,
	|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
	|ИЗ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|";
	
	ТаблицаКадровыхДанных = Запрос.Выполнить().Выгрузить();
	
	ДоступноЧтениеДанныхДляНачисленияЗарплаты = Пользователи.РолиДоступны(
		"ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
		
	Если ДоступноЧтениеДанныхДляНачисленияЗарплаты Тогда
			
		Если ТаблицаНачисленийСотрудников = Неопределено Тогда
			ТаблицаНачисленийСотрудников = ТаблицаНачисленийСотрудников(ИзмеренияДаты, ИсключаемыеРегистраторы);
			ТаблицаФОТСотрудников = ТаблицаФОТСотрудников(ИзмеренияДаты);
		Иначе
			ТаблицаФОТСотрудников = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Для каждого СтрокаТаблицаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
		
		СтруктураВозврата = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(ТекущаяДатаСеанса());
		СтруктураВозврата.Период = СтрокаТаблицаКадровыхДанных.Период;
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтрокаТаблицаКадровыхДанных);
		
		Если Не ИспользуетсяШтатноеРасписание Тогда
			СтруктураВозврата.ПозицияШтатногоРасписания = СтрокаТаблицаКадровыхДанных.Должность;
		КонецЕсли;
		
		Если ДоступноЧтениеДанныхДляНачисленияЗарплаты Тогда
			
			ДанныеОНачислениях = Новый Массив;
			СтрокиНачислений = ТаблицаНачисленийСотрудников.НайтиСтроки(Новый Структура("Период,Сотрудник", СтрокаТаблицаКадровыхДанных.Период, СтрокаТаблицаКадровыхДанных.Сотрудник));
			Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
				ЗначениеПоказателя = ?(СтрокаНачислений.Рассчитывается, СтрокаНачислений.Значение, СтрокаНачислений.Размер);
				ДанныеОНачислениях.Добавить(Новый Структура("Начисление,Показатель,Значение", СтрокаНачислений.Начисление, СтрокаНачислений.Показатель, ЗначениеПоказателя));
			КонецЦикла;
			
			Если ТаблицаФОТСотрудников <> Неопределено Тогда
				СтрокиФОТ = ТаблицаФОТСотрудников.НайтиСтроки(Новый Структура("Период, Сотрудник", СтрокаТаблицаКадровыхДанных.Период, СтрокаТаблицаКадровыхДанных.Сотрудник));
				СтруктураВозврата.ФОТ = ?(СтрокиФОТ.Количество() > 0, СтрокиФОТ[0].ФОТ, 0);
			КонецЕсли; 
			
		Иначе
			ДанныеОНачислениях = Неопределено;
		КонецЕсли;
		
		СтруктураВозврата.ДанныеОНачислениях = ДанныеОНачислениях;
		
		ДанныеОЗанятыхПозициях.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат ДанныеОЗанятыхПозициях;
	
КонецФункции

Функция ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников)
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для Каждого СтруктураСотрудника Из МассивСтруктурСотрудников Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = СтруктураСотрудника.Сотрудник;
		НоваяСтрокаИзмеренияДаты.Период = СтруктураСотрудника.Период;
	КонецЦикла;
	Возврат ИзмеренияДаты;
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудников(МассивСтруктурСотрудников) Экспорт
	
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты), Новый УникальныйИдентификатор);
	
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриВозвратеНаРаботу(МассивСтруктурСотрудников, ТаблицаНачислений = Неопределено) Экспорт
	
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников);
	ДанныеОЗанятыхПозициях = ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты, ТаблицаНачислений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмеренияДаты.Период КАК Период,
		|	ИзмеренияДаты.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	&ИзмеренияДаты КАК ИзмеренияДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(УсловияОплатыОтпускаПоУходуЗаРебенком.Период) КАК Период,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник КАК Сотрудник,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор КАК Регистратор,
		|	ИзмеренияДаты.Период КАК ПериодДанных
		|ПОМЕСТИТЬ ВТМаксимальныеДаты
		|ИЗ
		|	ВТИзмеренияДаты КАК ИзмеренияДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком КАК УсловияОплатыОтпускаПоУходуЗаРебенком
		|		ПО ИзмеренияДаты.Период > УсловияОплатыОтпускаПоУходуЗаРебенком.Период
		|			И ИзмеренияДаты.Сотрудник = УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник
		|ГДЕ
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор ССЫЛКА Документ.ОтпускПоУходуЗаРебенком
		|
		|СГРУППИРОВАТЬ ПО
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор,
		|	ИзмеренияДаты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеДаты.Период КАК Период,
		|	МаксимальныеДаты.Сотрудник КАК Сотрудник,
		|	ЗанятостьПозиций.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЗанятостьПозиций.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТМаксимальныеДаты КАК МаксимальныеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозиций
		|		ПО МаксимальныеДаты.Сотрудник = ЗанятостьПозиций.Сотрудник
		|			И МаксимальныеДаты.Регистратор = ЗанятостьПозиций.РегистраторЗаписи
		|			И (МаксимальныеДаты.ПериодДанных МЕЖДУ ЗанятостьПозиций.ДатаНачала И ЗанятостьПозиций.ДатаОкончания)
		|			И (ЗанятостьПозиций.ПланируемаяДатаЗавершения > МаксимальныеДаты.ПериодДанных)
		|			И (ЗанятостьПозиций.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(Выборка.Период);
		СтруктураВозврата.Сотрудник = Выборка.Сотрудник;
		СтруктураВозврата.ПозицияШтатногоРасписания = Выборка.ПозицияШтатногоРасписания;
		СтруктураВозврата.КоличествоСтавок = Выборка.КоличествоСтавок;
		
		ДанныеОЗанятыхПозициях.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозициях, Новый УникальныйИдентификатор);
	
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриПеремещенииВДругоеПодразделение(СоответствиеСотрудников) Экспорт
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для каждого СоответствиеСотрудника Из СоответствиеСотрудников Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = СоответствиеСотрудника.Ключ;
		НоваяСтрокаИзмеренияДаты.Период = СоответствиеСотрудника.Значение.Период;
	КонецЦикла;
	
	ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников = ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты);
	
	Для каждого СтруктураДанных Из ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников Цикл
		СтруктураДанных.ПозицияШтатногоРасписания = СоответствиеСотрудников.Получить(СтруктураДанных.Сотрудник).ДолжностьПоШтатномуРасписанию;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников, Новый УникальныйИдентификатор);
	
КонецФункции

Функция ПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДатаСобытия", '00010101');
	ПараметрыЗаполнения.Вставить("Сотрудник");
	ПараметрыЗаполнения.Вставить("РазрядКатегорияНадбавки");
	ПараметрыЗаполнения.Вставить("ОписаниеТаблицыНачислений");
	ПараметрыЗаполнения.Вставить("СохранятьТекущиеЗначения", Ложь);
	ПараметрыЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию");
	ПараметрыЗаполнения.Вставить("ТекущаяДолжностьПоШтатномуРасписанию");
	ПараметрыЗаполнения.Вставить("ПКУ");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьНачисленияПоПозиции(Форма, ПараметрыЗаполнения) Экспорт
	
	ДатаСобытия = ПараметрыЗаполнения.ДатаСобытия;
	
	// Определении даты на которую получаются сведения позиций штатного расписания
	ДатаУтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию, "ДатаУтверждения");
	Если ДатаСобытия < ДатаУтверждения Тогда
		ДатаСведений = ДатаУтверждения;
	Иначе
		ДатаСведений = ДатаСобытия;
	КонецЕсли;
	
	ДанныеПозиций = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ДанныеДолжности");
	Если ДанныеПозиций = Неопределено Тогда
		
		СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию);
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию) Тогда
			СписокПозиций.Добавить(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию);
		КонецЕсли;
		
		ДанныеПозиций = УправлениеШтатнымРасписанием.ДанныеПозицийШтатногоРасписания(
			Истина, СписокПозиций, ДатаСведений);
		
	КонецЕсли;
	
	ДанныеПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию);
	
	ДанныеТекущейПозиции = ДанныеПозиций.Получить("ДанныеПредыдущихЗначений");
	Если ДанныеТекущейПозиции = Неопределено Тогда
		ДанныеТекущейПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию);
	КонецЕсли;
	
	ФОРаботаВБюджетномУчреждении = Форма.ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении");
	Если ФОРаботаВБюджетномУчреждении Тогда
		
		Если ДанныеПозиции.Свойство("СпособОтраженияЗарплатыВБухучете")
			И Форма.Объект.Свойство("СпособОтраженияЗарплатыВБухучете") Тогда
			
			Форма.Объект.СпособОтраженияЗарплатыВБухучете = ДанныеПозиции.СпособОтраженияЗарплатыВБухучете;
			
		КонецЕсли;
		
		Если ДанныеПозиции.Свойство("ОтношениеКЕНВД")
			И Форма.Объект.Свойство("ОтношениеКЕНВД") Тогда
			
			Форма.Объект.ОтношениеКЕНВД = ДанныеПозиции.ОтношениеКЕНВД;
			
		КонецЕсли;
		
		Если ДанныеПозиции.Свойство("СтатьяФинансирования")
			И Форма.Объект.Свойство("СтатьяФинансирования") Тогда
			
			Форма.Объект.СтатьяФинансирования = ДанныеПозиции.СтатьяФинансирования;
			
		КонецЕсли;
	
	КонецЕсли; 
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Сотрудник = ПараметрыЗаполнения.Сотрудник;
	РазрядКатегорияНадбавки = ПараметрыЗаполнения.РазрядКатегорияНадбавки;
	СохранятьТекущиеЗначения = ПараметрыЗаполнения.СохранятьТекущиеЗначения;
	ОписаниеТаблицыНачислений = ПараметрыЗаполнения.ОписаниеТаблицыНачислений;
	
	СодержитПолеДействие = ОписаниеТаблицыНачислений.Свойство("СодержитПолеДействие")
		И ОписаниеТаблицыНачислений.СодержитПолеДействие = Истина;
	
	НачисленияПозиции = ДанныеПозиции.Начисления;
	НачисленияТекущейПозиции = Новый Соответствие;
	Если НачисленияПозиции <> Неопределено Тогда
		
		Если ДанныеТекущейПозиции <> Неопределено Тогда
			
			Для каждого ОписаниеНачисления Из ДанныеТекущейПозиции.Начисления Цикл
				НачисленияТекущейПозиции.Вставить(ОписаниеНачисления.Начисление, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
		
		// Запомним текущее состояние табличной части Начисления.
		ТЧНачисленияПредыдущие = ДанныеНачислений.Выгрузить();
		
		// При заполнении из перемещения необходимо сохранить текущий состав начислений.
		НачисленияИзменяемыхСтрок = Новый Соответствие;
		
		// Получение данных тарифной сетки
		ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
		Если ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
			
			ДанныеТарифныхСеток = ЗарплатаКадрыРасширенныйПовтИсп.ДанныеТарифныхСеток(
				ДанныеПозиции.ТарифнаяСетка, ДанныеПозиции.РазрядКатегория, ДанныеПозиции.ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, Ложь, ПараметрыЗаполнения.ПКУ);
			
		Иначе
			ДанныеТарифныхСеток = Неопределено;
		КонецЕсли; 
		
		Для Каждого ОписаниеНачисления Из НачисленияПозиции Цикл
			
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ОписаниеНачисления.Начисление);
			Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыНачислений) Тогда
				
				Если (ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность) Тогда
					
					Если ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли;
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РайонныйКоэффициентСтруктурнойЕдиницы", ОписаниеНачисления.Показатели[0].Значение);
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли;
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка", ОписаниеНачисления.Размер);
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Определение строки начисления или создание новой, если строки с начислением еще нет.
			НайденныеСтроки = ДанныеНачислений.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНачислений = НайденныеСтроки[0];
			Иначе
				
				СтрокаНачислений = ДанныеНачислений.Добавить();
				СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета] = ОписаниеНачисления.Начисление;
				Если СодержитПолеДействие Тогда
					СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаНачислений.Свойство("ХарактерНачисления") Тогда
				СтрокаНачислений.ХарактерНачисления = ПредопределенноеЗначение("Перечисление.ХарактерПлановогоНачисления.Штатное");
			КонецЕсли;
			
			ПоказателиСтрокиНачислений = Новый ТаблицаЗначений;
			ПоказателиСтрокиНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			
			// Подготовка значений показателей из предыдущего состава строк.
			НайденныеСтроки = ТЧНачисленияПредыдущие.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаПредыдущихНачислений = НайденныеСтроки[0];
				Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
					
					Если ЗначениеЗаполнено(СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей]) Тогда
						
						НоваяСтрокаПоказателей = ПоказателиСтрокиНачислений.Добавить();
						НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						НоваяСтрокаПоказателей.Показатель = СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей];
						НоваяСтрокаПоказателей.Значение = СтрокаПредыдущихНачислений["Значение" + СчетчикПоказателей];
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Подготовка значений показателей по данным начисления штатного расписания.
			// Значение показателя остается неизменным, если его значение попадает в диапазон
			// между минимальным и максимальным значениями показателя штатного расписания.
			// Если значение не попадает в этот диапазон, выбирается ближайшее из значений
			// показателя начисления позиции штатного расписания.
			Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
				
				Если СчетчикПоказателей <= ОписаниеНачисления.Показатели.Количество() Тогда
					
					ОписаниеПоказателя = ОписаниеНачисления.Показатели[СчетчикПоказателей - 1];
					
					НайденныеПоказатели = ПоказателиСтрокиНачислений.НайтиСтроки(Новый Структура("Показатель", ОписаниеПоказателя.Показатель));
					Если НайденныеПоказатели.Количество() = 0 Тогда
						СтрокаПоказателя = ПоказателиСтрокиНачислений.Добавить();
						СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						СтрокаПоказателя.Показатель = ОписаниеПоказателя.Показатель;
					Иначе
						СтрокаПоказателя = НайденныеПоказатели[0];
					КонецЕсли;
					
					ЗначенияНазначеныПоДаннымТарифныхСеток = Ложь;
					Если ДанныеТарифныхСеток <> Неопределено Тогда
						Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад <> Неопределено
							И ДанныеТарифныхСеток.СписокПоказателейОклад.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМин;
									ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							Иначе
								Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение;
									ЗначениеМакс = ЗначениеМин;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка <> Неопределено
							И ДанныеТарифныхСеток.СписокПоказателейКвалификационнаяНадбавка.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								Если ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМин;
									ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							Иначе
								Если ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение;
									ЗначениеМакс = ЗначениеМин;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначенияНазначеныПоДаннымТарифныхСеток Тогда
						Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
							ЗначениеМин = ОписаниеПоказателя.ЗначениеМин;
							ЗначениеМакс = ОписаниеПоказателя.ЗначениеМакс;
						Иначе
							ЗначениеМин = ОписаниеПоказателя.Значение;
							ЗначениеМакс = ЗначениеМин;
						КонецЕсли;
					КонецЕсли;
					
					Если СохранятьТекущиеЗначения Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение <= ЗначениеМин Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение >= ЗначениеМакс Тогда
							ЗначениеПоказателя = ЗначениеМакс;
						Иначе
							ЗначениеПоказателя = СтрокаПоказателя.Значение;
						КонецЕсли;
						
					Иначе
						ЗначениеПоказателя = ЗначениеМин;
					КонецЕсли;
					
					СтрокаПоказателя.Значение = ЗначениеПоказателя;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Размещение показателей в строке начисления.
			ЗарплатаКадрыРасширенный.ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(
				ИнфоОВидеРасчета, СтрокаНачислений, ПоказателиСтрокиНачислений, 1, , , , Сотрудник, ДатаСобытия);
			
			Если Не ИнфоОВидеРасчета.Рассчитывается Тогда 
				
				СтрокаНачислений.ФиксированнаяСумма = Истина;
				
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					ЗначениеМин = ОписаниеНачисления.РазмерМин;
					ЗначениеМакс = ОписаниеНачисления.РазмерМакс;
				Иначе
					ЗначениеМин = ОписаниеНачисления.Размер;
					ЗначениеМакс = ЗначениеМин;
				КонецЕсли;
				
				Если СохранятьТекущиеЗначения Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаНачислений.Значение1) Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 <= ЗначениеМин Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 >= ЗначениеМакс Тогда
						ЗначениеПоказателя = ЗначениеМакс;
					Иначе
						ЗначениеПоказателя = СтрокаНачислений.Значение1;
					КонецЕсли;
					
				Иначе
					ЗначениеПоказателя = ЗначениеМин;
				КонецЕсли;
				
				СтрокаНачислений.Значение1 = ЗначениеПоказателя;
				
			ИначеЕсли Не ИнфоОВидеРасчета.ФОТНеРедактируется Тогда
				
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					СтрокаНачислений.Размер = ОписаниеНачисления.РазмерМин;
				Иначе
					СтрокаНачислений.Размер = ОписаниеНачисления.Размер;
				КонецЕсли;
				
			КонецЕсли;
			
			НачисленияИзменяемыхСтрок.Вставить(СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета], Истина);
			
		КонецЦикла;
		
		// Дополнительная обработка строк начислений.
		// Необходимо упорядочить строки начислений по значению РеквизитДопУпорядочивания начисления.
		ТЧНачисления = ДанныеНачислений.Выгрузить();
		ТЧНачисления.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
		
		// Подготовка значений РеквизитДопУпорядочивания начислений.
		Начисления = ТЧНачисления.Скопировать();
		Начисления.Свернуть(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
		РеквизитыДопупорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления.ВыгрузитьКолонку(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета), "РеквизитДопУпорядочивания");

		// При заполнении из перемещения, необходимо обнулить показатели начислений прекращающих действие
		// и сформировать комментарии к строкам.
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаНачислений Из ТЧНачисления Цикл
			
			Начисление = СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета];
			СтрокаНачислений.РеквизитДопУпорядочивания = РеквизитыДопупорядочивания.Получить(Начисление);
			
			Если НачисленияТекущейПозиции.Получить(Начисление) = Истина Тогда
				
				Если СодержитПолеДействие Тогда
					
					Если НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
						
						СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить");
						Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
							
							Если ЗначениеЗаполнено(СтрокаНачислений["Показатель" + СчетчикПоказателей]) Тогда
								
								Если СтрокаНачислений["ОтменяемыйПоказатель" + СчетчикПоказателей]
									И СтрокаНачислений["ОтменяемыйПоказатель" + СчетчикПоказателей] = Истина Тогда
									
									СтрокаНачислений["Значение" + СчетчикПоказателей] = 0;
									
								КонецЕсли;
								
							Иначе
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					СтруктураСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаНачислений);
					Если СтруктураСтроки.Свойство("Комментарий") Тогда
						
						ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтруктураСтроки,
							ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений), 1, ОписаниеТаблицыНачислений, ДатаСобытия);
							
						СтрокаНачислений.Комментарий = СтруктураСтроки.Комментарий;
						
					КонецЕсли;
					
				ИначеЕсли НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
					СтрокиКУдалению.Добавить(СтрокаНачислений);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ТЧНачисления.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		ТЧНачисления.Сортировать("РеквизитДопУпорядочивания");
		ДанныеНачислений.Загрузить(ТЧНачисления);
	КонецЕсли;
	
	// Дополнительные показатели
	ДополнительныеПоказателиПозиции = ДанныеПозиции.НезависимыеПоказатели;
	
	ДополнительныеПоказателиПредыдущие = Форма.Объект.Показатели.Выгрузить(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	
	УдаляемыеСтроки = Форма.Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Показатели.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	// При заполнении из перемещения необходимо сохранить текущий состав дополнительных показателей.
	Если СодержитПолеДействие Тогда
		ДополнительныеПоказатели = ДополнительныеПоказателиПредыдущие.Скопировать();
	Иначе
		ДополнительныеПоказатели = ДополнительныеПоказателиПредыдущие.СкопироватьКолонки();
	КонецЕсли;
	
	МассивИзменяемыхСтрок = Новый Массив;
	Если ДополнительныеПоказателиПозиции <> Неопределено Тогда
		
		Для Каждого ДополнительныйПоказатель Из ДополнительныеПоказателиПозиции Цикл
			
			НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Показатель", ДополнительныйПоказатель.Показатель));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаПоказателя = НайденныеСтроки[0];
			Иначе 
				
				СтрокаПоказателя = ДополнительныеПоказатели.Добавить();
				СтрокаПоказателя.Показатель = ДополнительныйПоказатель.Показатель;
				Если СодержитПолеДействие Тогда
					СтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				
				ЗначениеМин = ДополнительныйПоказатель.ЗначениеМин;
				ЗначениеМакс = ДополнительныйПоказатель.ЗначениеМакс;
				
			Иначе
				
				ЗначениеМин = ДополнительныйПоказатель.Значение;
				ЗначениеМакс = ЗначениеМин;
				
			КонецЕсли;
			
			Если СохранятьТекущиеЗначения Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
					СтрокаПоказателя.Значение = ЗначениеМин;
				ИначеЕсли СтрокаПоказателя.Значение <= ЗначениеМин Тогда
					СтрокаПоказателя.Значение = ЗначениеМин;
				ИначеЕсли СтрокаПоказателя.Значение >= ЗначениеМакс Тогда
					СтрокаПоказателя.Значение = ЗначениеМакс;
				КонецЕсли;
				
			Иначе
				СтрокаПоказателя.Значение = ЗначениеМин;
			КонецЕсли;
			
			МассивИзменяемыхСтрок.Добавить(СтрокаПоказателя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка действия Отменить дополнительным показателям
	Если СодержитПолеДействие Тогда
		
		Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл 
			
			Если МассивИзменяемыхСтрок.Найти(СтрокаПоказателя) = Неопределено Тогда
				СтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
			КонецЕсли;
			
			ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(
				ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПоказателя));
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Перенос строк с дополнительными показателями в документ
	Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(Форма.Объект.Показатели.Добавить(), СтрокаПоказателя);
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплатаФормы = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		МодульУправленческаяЗарплатаФормы.ЗаполнитьНачисленияПоПозиции(Форма, ПараметрыЗаполнения, ДанныеПозиций);
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьВидЗанятостиНовогоСотрудникаВСтрокеПриемаНаРаботуСписком(СтрокаДокумента, СписокСотрудниковДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудниковДокумента", СписокСотрудниковДокумента);
	Запрос.УстановитьПараметр("Сотрудник", СтрокаДокумента.Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникТекущий
		|		ПО Сотрудники.ФизическоеЛицо = СотрудникТекущий.ФизическоеЛицо
		|			И (СотрудникТекущий.Ссылка = &Сотрудник)
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудниковДокумента)";
		
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		СтрокаДокумента.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПустаяТаблицаНачисленийСотрудников()
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	
	ТаблицаНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Рассчитывается", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаНачислений;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиПодписокНаСобытия

Процедура ПодразделенияОрганизацийОбработкаПроверкиЗаполненияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не Источник.Сформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаСоздания");
	КонецЕсли; 
	
	Если Не Источник.Расформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаРасформирования");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Источник.ДатаРасформирования) И ЗначениеЗаполнено(Источник.ДатаСоздания) И Источник.ДатаСоздания > Источник.ДатаРасформирования Тогда
		ТекстСообщения = НСтр("ru = 'Дата создания подразделения не может быть больше даты расформирования"".';
								|en = 'Date business unit created cannot be later than the disbandment date"".'",);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если (Не Источник.Расформировано) И Источник.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru = 'У помеченного на удаление подразделения нельзя снять флаг ""Расформировано"".';
								|en = 'Cannot clear the ""Disbanded"" check box of the business unit marked for deletion.'",);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если Источник.Расформировано Тогда
		ПроверкаИспользованияВШтатномРасписании(Отказ, Источник.Ссылка, Источник.ДатаРасформирования);
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверкаИспользованияВШтатномРасписании(Отказ, Ссылка, ДатаРасформирования)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Ссылка);
	Запрос.УстановитьПараметр("ДатаРасформирования", ДатаРасформирования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Наименование КАК НаименованиеПодразделения,
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель = &Подразделение
	|	И НЕ ПодразделенияОрганизаций.Расформировано";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подразделение ""%1"" не может быть расформировано, т.к. на %2 есть действующие подчиненные подразделения:';
								|en = 'The ""%1"" business unit cannot be disbanded as there are subordinate business units for %2: '"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru = 'подразделение';
										|en = 'business unit'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.НаименованиеПодразделения); 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Наименование КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Подразделение = &Подразделение
	|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения
	|	И НЕ(ШтатноеРасписание.Закрыта
	|				И ШтатноеРасписание.ДатаЗакрытия <= &ДатаРасформирования)";
	
	Результат = Запрос.Выполнить();
		
	Если Не Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подразделение ""%1"" не может быть расформировано, т.к. на %2 оно используется в актуальных позициях штатного расписания:';
								|en = 'The ""%1"" business unit cannot be disbanded as it is used in relevant headcount positions for %2: '"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru = 'позиция';
										|en = 'position'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.ПозицияШтатногоРасписания); 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;	
		
	КонецЕсли;
		
КонецПроцедуры	

Процедура ПодразделенияОрганизацийПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Если Источник.ПометкаУдаления И Источник.Сформировано И (Не Источник.Расформировано) Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Нельзя пометить на удаление действующее подразделение ""%1"", организации ""%2""';
					|en = 'Cannot mark for deletion valid ""%1"" business unit of the ""%2"" company .'"),
				Источник,
				Источник.Владелец);
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаписиДанныхФизическихЛицПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеПроверятьЗаписиДанныхФизическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	НомерПоПорядку = 1;
	Для каждого Запись Из Источник Цикл
		
		Запись.НомерПоПорядку = НомерПоПорядку;
		НомерПоПорядку = НомерПоПорядку + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапомнитьДанныеДляПодбораСотрудников(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизацияПредыдущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГоловнаяОрганизация");
	Если Источник.ЭтоНовый()
		Или ГоловнаяОрганизацияПредыдущая <> Источник.ГоловнаяОрганизация Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ОбновитьДанныеДляПодбораНового", Истина);
		
	Иначе
		
		Источник.ДополнительныеСвойства.Вставить("ПредыдущиеЗначенияРеквизитов",
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "ГоловнаяОрганизация,Код,Наименование,ПометкаУдаления,ВАрхиве"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеДляПодбораСотрудников(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов")
		И (Источник.ГоловнаяОрганизация <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ГоловнаяОрганизация
			Или Источник.Код <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Код
			Или Источник.Наименование <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Наименование
			Или Источник.ПометкаУдаления <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ПометкаУдаления
			Или Источник.ВАрхиве <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВАрхиве) Тогда
		
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеСотрудника(Источник);
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбновитьДанныеДляПодбораНового") Тогда
		РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СобытияРегистровСведений

Процедура КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетБазовый.КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ);	
	
КонецПроцедуры

Процедура КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетБазовый.КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	
КонецПроцедуры

Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	
	
КонецПроцедуры

Процедура ИнициализироватьОтложеннуюРегистрациюТекущихКадровыхДанных(Движения) Экспорт
	
	ЗарплатаКадрыРасширенный.УстановитьДополнительноеСвойствоДвижений(Движения, "ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных");
	
КонецПроцедуры

Функция ИспользуетсяОтложеннаяРегистрацияВторичныхКадровыхДанных(НаборЗаписей) Экспорт
	
	Используется = Ложь;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных") Тогда
		Используется = (НаборЗаписей.ДополнительныеСвойства.ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных = Истина);
	КонецЕсли;
	
	Возврат Используется;
	
КонецФункции

Процедура ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписейКадровойИстории) Экспорт
	
	ИзменившиесяДанные = НаборЗаписейКадровойИстории.ТаблицаИзменившихсяДанныхНабора();
	
	Если ИзменившиесяДанные.Количество() > 0 Тогда
		ОбновитьРегистрТекущиеКадровыеДанныеПоИзменениямКадровойИстории(НаборЗаписейКадровойИстории, ИзменившиесяДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область НастройкиКадровогоУчета

Процедура ЗапомнитьНастройкиКадровогоУчета(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда
		
		ТекущаяЗапись = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
		ТекущаяЗапись.Прочитать();
		Источник.ДополнительныеСвойства.Вставить("ТекущиеНастройки",
			ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(ТекущаяЗапись, Источник.Метаданные()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиНастроекКадровогоУчета(НаборЗаписей, Отказ) Экспорт
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Если ПараметрыСеанса.ПравилоФормированияПредставленияЭлементовСправочникаСотрудники
			<> НаборЗаписей[0].ПравилоФормированияПредставленияЭлементовСправочникаСотрудники Тогда
			
			УстановитьПараметрСеансаПравилоФормированияПредставленияЭлементовСправочникаСотрудники();
			
		КонецЕсли;
		
		ТекущиеНастройки = Неопределено;
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ТекущиеНастройки", ТекущиеНастройки) Тогда
			Если ТекущиеНастройки.ИспользуетсяРаботаСКоронавирусом
				<> НаборЗаписей[0].ИспользуетсяРаботаСКоронавирусом  Тогда
				
				РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.ОбновитьПодключаемыеХарактеристики();
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииОбновленияВторичныхДанныхВозвратногоРегистраСведений

// Находит значения возвратных ресурсов регистра сведений и обновляет их в соответствии с значениями записываемого
// набора записей.
// Может вызываться из процедур ПередЗаписью и ПриЗаписи модуля набора записей регистра сведений.
// Работает только для регистров сведений подчиненных регистратору.
// Параметры:
//		НовыйНабор - набор записей, влияние записей которого на будущие записи проверяется.
//
//		ПередЗаписью - булево значение. 
//			Показывает из какой процедуры вызвана текущая процедура ПередЗаписью или ПриЗаписи.
//
//		СтрокаЗаполняемыхВозвратныхРесурсов - Строка. 
//			Строка содержащая наименования заполняемых возвратных ресурсов через запятую. Наименования указываются без
//			постфикса "ПоОкончании".
//	
//
// Получает срез первых для каждого набора измерений(включая период) НабораЗаписей. Если такие записи есть, то к ним
// присоединяются данные среза последних на дату из записи из среза первых - 1 секунда. Если значения ресурсов среза
// последних отличаются от значений возвратных ресурсов среза первых, то значения в записях среза первых заполняются
// значениями из среза последних.
//
Процедура ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления) Экспорт
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	РегистрСведенийМетаданные = Метаданные.РегистрыСведений[ИмяРегистра];
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	// Создадим массив содержащий измерения нашего регистра + период.
	// Создадим строку описывающую измерения нашего регистра + период.
	
	Измерения = Новый Массив;
	СтрокаИзмерений = "Период";
	Измерения.Добавить(СтрокаИзмерений);
	Для Каждого Измерение Из РегистрСведенийМетаданные.Измерения Цикл
		Измерения.Добавить(Измерение.Имя);
		СтрокаИзмерений = СтрокаИзмерений + "," + Измерение.Имя;
	КонецЦикла;
	
	НаборЗаписейИзменен = Истина;
	
	Если Не ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("НаборЗаписейИзменен", НаборЗаписейИзменен);
	Иначе
		НаборЗаписейИзменен = НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор);
		НаборЗаписей.ДополнительныеСвойства.Вставить("НаборЗаписейИзменен", НаборЗаписейИзменен);
	КонецЕсли;
	
	Если Не НаборЗаписейИзменен Тогда
		Возврат;
	КонецЕсли;
	
	// При записи в дополнительных свойствах набора содержится менеджер временных таблиц,
	// а в нем таблица содержащая наборы измерений которые не имеют записей в будущем.
	// Если Менеджера в свойствах нет, создадим новый.
	МенеджерВременныхТаблиц	= Неопределено;
	
	Если Не ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;  
	
	Если ПараметрыОбновления.ПередЗаписью Тогда
		ЭтоВторичныйНабор = Ложь;
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор", ЭтоВторичныйНабор) Тогда
			Если ЭтоВторичныйНабор Тогда
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
				ТекстЗапроса = "ВЫБРАТЬ ";
				Для Каждого Измерение Из Измерения Цикл
					ТекстЗапроса = ТекстЗапроса + "
					|	NULL КАК " + Измерение + ",";
				КонецЦикла;
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
				ТекстЗапроса = ТекстЗапроса + "
				| ПОМЕСТИТЬ ВТИзмеренияДатыПередЗаписью";
				Запрос.Текст = ТекстЗапроса;
				Запрос.Выполнить();
				НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	// Создадим массив содержащий отборы из записываемого набора.
	Отбор = Новый Массив;
	Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", ЭлементОтбора.Имя, " = ", ЭлементОтбора.Значение));
	КонецЦикла;
	
	// Создадим в менеджере таблицу ВТИзмеренияДатыДляФормированияСрезаПервых и заполним ее данными из базы
	// с отбором таким же как в записываемом наборе записей.
	// Таблица будет содержать все наборы измерений по которым необходимо проверить записи в будущем.
	ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПараметрыОбновления.ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Получим в наш МенеджерВременныхТаблиц таблицу ВТ[ИмяРегистра]СрезПервых.
	Отбор.Очистить();
	ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Перед записью нам не нужны данные по текущему регистратору.
	Если ПараметрыОбновления.ПередЗаписью Тогда 
		Отбор.Очистить();
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Регистратор", " <> ", Регистратор));
	Иначе
		Отбор = Неопределено;
	КонецЕсли;	
	
	ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, Отбор);
	
КонецПроцедуры	

// Метод конструирует структуру с параметрами механизма обновления вторичных данных возвратных регистров.
Функция ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра() Экспорт
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = Новый Структура;
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", "");
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Истина);
	Возврат	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра;
КонецФункции

Процедура ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + ",";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	ТекстЗапроса = ТекстЗапроса + "
	| ПОМЕСТИТЬ ВТИзмеренияДатыДляФормированияСрезаПервых
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ";
	
	// Добавим отбор, по измерениям не имеющим записей в будущем, из таблицы которую создали ПередЗаписью.
	Если Не ПередЗаписью Тогда
		ТекстЗапроса =	ТекстЗапроса + " ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмеренияДатыПередЗаписью КАК ПередЗаписью
		|ПО "; 	
		Для Каждого Измерение Из Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	РегистрСведений." + Измерение + " = ПередЗаписью." + Измерение + " И ";
		КонецЦикла;
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	КонецЕсли;
	
	Если Отбор.Количество() <> 0 Тогда
		СчПараметров = 1;
		ТекстОтбор = "
		|	ГДЕ (";
		Для Каждого СтруктураОтбора Из Отбор Цикл
			ТекстОтбор = ТекстОтбор + "
			|	РегистрСведений." + СтруктураОтбора.ЛевоеЗначение + СтруктураОтбора.ВидСравнения + "(&Параметр" + СчПараметров + ") И";
			СчПараметров = СчПараметров + 1;
		КонецЦикла;	
		ТекстОтбор = Лев(ТекстОтбор, СтрДлина(ТекстОтбор) - 1);
		ТекстОтбор = ТекстОтбор + ")";
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
	КонецЕсли;
	
	Если Не ПередЗаписью Тогда
		Если Отбор.Количество() <> 0 Тогда
			ТекстЗапроса =	ТекстЗапроса + "
			|  И (ПередЗаписью.Период ЕСТЬ NULL)";		
		Иначе
			ТекстЗапроса =	ТекстЗапроса + "
			|	ГДЕ (ПередЗаписью.Период ЕСТЬ NULL)"; 	
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		СчПараметров = 1;
		Для Каждого СтруктураОтбора Из Отбор Цикл
			Запрос.УстановитьПараметр("Параметр" + СчПараметров, СтруктураОтбора.ПравоеЗначение);			
			СчПараметров = СчПараметров + 1;
		КонецЦикла;
	КонецЕсли;	
	
	Если Не ПередЗаписью  Тогда
		ТекстЗапроса = ТекстЗапроса + ";
		|///////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыПередЗаписью";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)

	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТИзмеренияДатыДляФормированияСрезаПервых",
		СтрокаИзмерений);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВключаяГраницу = Ложь;
	ПараметрыПостроения.Отборы = Отбор;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТИПЗНАЧЕНИЯ(РегистрСведений.Регистратор) = ТИП(Документ.Увольнение) ИЛИ ДействуетДо", " <> ", '00010101', Ложь);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПервых(
		ИмяРегистра,
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеСтрокиНабора(ВыборкаСтрок, НаборДляЗаписи, МассивНеобходимыхВозвратныхРесурсов, ПараметрыОбновления)
	// Для документа увольнение вторичные данные хранятся в "обычных" ресурсах.
	ОкончаниеРесурса = ?(ТипЗнч(ВыборкаСтрок.Регистратор) = ТипЗнч(Документы.Увольнение.ПустаяСсылка()) И ПараметрыОбновления.ПервичныеРесурсыДляУвольнения, "", "ПоОкончании");
	
	Для каждого Запись Из НаборДляЗаписи Цикл
		Если Запись.НомерСтроки = ВыборкаСтрок.НомерСтроки Тогда
			Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
				Запись[СокрЛП(Ресурс) + ОкончаниеРесурса] = ВыборкаСтрок[СокрЛП(Ресурс) + "ПоОкончании"]
			КонецЦикла;
			Прервать;	             
		КонецЕсли;	
	КонецЦикла	
КонецПроцедуры

Процедура ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, ОтборНеЭтотРегистратор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Необходимо заполнить ВТИзмеренияДатыПередЗаписью записями которые были в таблице ВТИзмеренияДаты, но 
	// которых нет в таблице ВТ[ИмяРегистра]СрезПервых
	// ВТИзмеренияДатыПередЗаписью будем использовать ПриЗаписи в процедуре
	// ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора  для отбора наборов измерений по которым нет записей в будущем.
	// Временные таблицы, которые больше не нужны - уничтожим.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + ",";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	ТекстЗапроса = ТекстЗапроса + "
	| ПОМЕСТИТЬ ВТИзмеренияДатыПередЗаписью
	|ИЗ
	|	ВТИзмеренияДатыДляФормированияСрезаПервых КАК РегистрСведений 
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ВТ" + ИмяРегистра + "СрезПервых КАК СрезПервых
	|ПО"; 
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + " = СрезПервых." + Измерение + " И ";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	 СрезПервых.Период ЕСТЬ NULL;
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	 * 
	|	 ПОМЕСТИТЬ ВТИзмеренияДатыДляПроверкиКоличества
	|ИЗ 
	|	 ВТИзмеренияДатыДляФормированияСрезаПервых;
	|///////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДатыДляПроверкиКоличества;
	|///////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДатыДляФормированияСрезаПервых";
	
	Если Не ПараметрыОбновления.ПередЗаписью  Тогда
		ТекстЗапроса = ТекстЗапроса+";
		|///////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыПередЗаписью";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// В МассивРезультатов находятся результаты помещения данных во временные таблицы.
	ИзмеренияДаты 							= МассивРезультатов[1].Выбрать();
	ИзмеренияДатыНеИмеющиеЗаписейВБудущем 	= МассивРезультатов[0].Выбрать();
	
	ИзмеренияДаты.Следующий();
	ИзмеренияДатыНеИмеющиеЗаписейВБудущем.Следующий();
	
	// Если не по одному набору измерений, которой записывается нет записей в будущем - ничего делать не будем.
	// Таблица со срезом первых нам больше не нужна.
	Если Не (ИзмеренияДатыНеИмеющиеЗаписейВБудущем.Количество < ИзмеренияДаты.Количество) Тогда
		ТекстЗапроса = "УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПервых";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		// ПередЗаписью поместим МенеджерВременныхТаблиц в дополнительные свойства набора, будем использовать его ПриЗаписи.
		Если ПараметрыОбновления.ПередЗаписью Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// По каждой записи из ВТ[ИмяРегистраСрезПервых необходимо:
	// 1. Получить  срез последних.
	// 2. Проверить надо ли изменять реквизиты ПоОкончании у следующей записи.
	// 3. Если надо, то создаем набор по регистратору следующей записи,
	//	 по номеру строки находим нашу и пишем в нее новые значения возвратных реквизитов.
	
	КоллекцииПолей = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, Измерения);
	
	// Строка для ограничения заполняемых ресурсов только возвратными,
	// если в параметре переданы конкретные ресурсы - заполняем и проверяем только их, 
	// иначе - заполняем и проверяем все.
	Если ПараметрыОбновления.СтрокаЗаполняемыхВозвратныхРесурсов = "" Тогда
		Для Каждого Ресурс Из КоллекцииПолей.ВозвратныеРесурсы Цикл
			СтрокаЗаполняемыхВозвратныхРесурсов = СтрокаЗаполняемыхВозвратныхРесурсов + Ресурс + ",";
		КонецЦикла;
		СтрокаЗаполняемыхВозвратныхРесурсов = Лев(СтрокаЗаполняемыхВозвратныхРесурсов, СтрДлина(СтрокаЗаполняемыхВозвратныхРесурсов) - 1);
	Иначе
		СтрокаЗаполняемыхВозвратныхРесурсов = ПараметрыОбновления.СтрокаЗаполняемыхВозвратныхРесурсов;
	КонецЕсли;
	
	МассивНеобходимыхВозвратныхРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗаполняемыхВозвратныхРесурсов, ",", Истина);
	
	// Подготовим ВТ для передачи в процедуру СоздатьПоВременнойТаблицеВТИмяРегистраСрезПоследних, в которую выберем
	// измерения из полученного ранее среза первых,  т.к. для остальных наборов измерений никаких действий выполнять не
	// требуется.
	// Необходимо заметить, что в качестве периода на который требуется получить срез последних указывается период записи
	// среза первых минус секунда.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РегистрСведений.ПериодЗаписи, ДЕНЬ) КАК Период";
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + Измерение;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ВТИзмеренияДатыИзСрезаПервых
	|ИЗ
	|	 ВТ" + ИмяРегистра + "СрезПервых КАК РегистрСведений";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// ПередЗаписью данные текущего набора, записанные в БД, в срезе нам не нужны,
	// передадим в процедуру формирования Отбор с регистратором текущего набора.
	// Если же ПриЗаписи, то данные текущего набора нужны, отбора по регистратору нет. 
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ПараметрыПостроения.Отборы = ОтборНеЭтотРегистратор;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		ИмяРегистра,
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыИзСрезаПервых",
			СтрокаИзмерений),
		ПараметрыПостроения);
			
	Запрос.Текст ="УНИЧТОЖИТЬ ВТИзмеренияДатыИзСрезаПервых";
	Запрос.Выполнить();
	
	// Сейчас МенеджерВременныхТаблиц содержит таблицы СрезаПервых и СрезаПоследних.
	// Необходимо соединить эти таблицы и найти строки по которым требуется обновление вторичных реквизитов.
	// В итоге должна получится таблица вида.
	// Измерение1
	// |....|ИзмерениеN|НовоеЗначениеОбновляемогоРесурса1|...|НовоеЗначениеОбновляемогоРесурса1|Регистратор|НомерСтроки|
	// Необходимо заметить, что в качестве периода для связи из таблицы среза первых берется поле ПериодИзСреза плюс
	// секунда, т.к. уменьшали период когда получали срез последних.
	ТекстЗапроса = 
	"ВЫБРАТЬ	";
	Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " КАК " + СокрЛП(Ресурс) + "ПоОкончании,";
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	Для Каждого СтандартныйРеквизит Из КоллекцииПолей.СтандартныеРеквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведенийСрезПервых." + СтандартныйРеквизит;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	 ВТ" + ИмяРегистра + "СрезПервых КАК РегистрСведенийСрезПервых";
	ТекстЗапроса = ТекстЗапроса + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	 ВТ" + ИмяРегистра + "СрезПоследних КАК РегистрСведенийСрезПоследних
	|ПО НАЧАЛОПЕРИОДА(РегистрСведенийСрезПервых.ПериодЗаписи, ДЕНЬ) = РегистрСведенийСрезПоследних.Период"; 
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + " И 
		|	РегистрСведенийСрезПервых." + Измерение + " = " + "РегистрСведенийСрезПоследних." + Измерение;
	КонецЦикла;
	
	// Будем выбирать только те записи, которые требуют обновления,
	// для этого проверим, что хотя бы один ресурс среза последних отличается от ресурса по окончании среза первых.
	// Проверяются только те ресурсы, которые необходимо заполнять.
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ
	|	ВЫБОР КОГДА "; 
	Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РегистрСведенийСрезПервых.Регистратор) = ТИП(Документ.Увольнение) И &ПервичныеРесурсыДляУвольнения 
		|		ТОГДА РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " = " + "РегистрСведенийСрезПервых." + СокрЛП(Ресурс) + "  
		|	ИНАЧЕ РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " = " + "РегистрСведенийСрезПервых." + СокрЛП(Ресурс) + "ПоОкончании КОНЕЦ" +  " И ";
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ = ИСТИНА"; 
	
	// Т.к. добавили стандартные реквизиты - поле регистратор точно будет.
	ТекстЗапроса = ТекстЗапроса + "
	|	ИТОГИ ПО
	|	РегистрСведенийСрезПервых.Регистратор";
	
	Запрос.УстановитьПараметр("ПервичныеРесурсыДляУвольнения", ПараметрыОбновления.ПервичныеРесурсыДляУвольнения);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	ТекстЗапроса = "УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПоследних; 
	|	УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПервых";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// ПередЗаписью поместим МенеджерВременныхТаблиц в дополнительные свойства набора, будем использовать его ПриЗаписи.
	Если ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
	КонецЕсли;

	// Может быть так, что ничего обновлять не придется.
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	// По каждому регистратору из результата запроса перезаполним записи требующие обновления.
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Регистратор) = ТипЗнч(Документы.Увольнение.ПустаяСсылка()) 
			И Не ПараметрыОбновления.ОбновлятьУвольнение Тогда
		   Продолжить;
		КонецЕсли;
		
		НаборДляЗаписи	= РасчетЗарплатыРасширенный.СоздатьНаборЗаписейРегистратора(Метаданные.РегистрыСведений[ИмяРегистра], Выборка.Регистратор);
		НаборДляЗаписи.Прочитать();
		ВыборкаСтрок = Выборка.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			ЗаполнитьДанныеСтрокиНабора(ВыборкаСтрок, НаборДляЗаписи, МассивНеобходимыхВозвратныхРесурсов, ПараметрыОбновления);
		КонецЦикла;
		НаборДляЗаписи.ДополнительныеСвойства.Вставить("ЭтоВторичныйНабор", Истина);
		НаборДляЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Функция НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор)

	ТЗИзНабораЗаписей = НаборЗаписей.Выгрузить();
	
	// Подготовим массив полей по которым будем сравнивать данные.
	МассивПолей = Новый Массив;
	Для каждого Колонка Из ТЗИзНабораЗаписей.Колонки Цикл
		// Колонка "Номер строки" с точки зрения нашего механизма не существенна.
		// Регистратор сравнивать тоже не будем - и в запросе, и в наборе по нему отбор.
		Если Колонка.Имя = "НомерСтроки"
			Или Колонка.Имя = "Регистратор" Тогда
			Продолжить;
		КонецЕсли;
		МассивПолей.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗИзНабораЗаписей",ТЗИзНабораЗаписей);
	Запрос.УстановитьПараметр("Регистратор",Регистратор);
	
	// Выберем все данные из базы и из записываемого набора, которые необходимо сравнить.
	// Соединим по всем полям данные из базы и из записываемого набора.
	ТекстЗапроса = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзНабораЗаписей ИЗ &ТЗИзНабораЗаписей КАК ТЗИзНабораЗаписей
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзРегистра ИЗ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ГДЕ РегистрСведений.Регистратор = &Регистратор
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	
	|	РегистрСведений.НомерСтроки КАК НомерСтроки,
	|	ВТИзНабораЗаписей.НомерСтроки КАК НомерСтрокиИзНабора 
	|ИЗ
	|	ВТИзРегистра КАК РегистрСведений
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	 ВТИзНабораЗаписей КАК ВТИзНабораЗаписей	
	|ПО  "; 
	Для Каждого Поле Из МассивПолей Цикл
		ТекстЗапроса = ТекстЗапроса + " 
		|	РегистрСведений." + Поле + " = " + "ВТИзНабораЗаписей." + Поле + " И ";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ РегистрСведений.НомерСтроки ЕСТЬ NULL ИЛИ ВТИзНабораЗаписей.НомерСтроки ЕСТЬ NULL"; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	// Если данные в базе и в записываемом наборе совпадают, результат будет пустой.
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

#КонецОбласти


#Область КадровыеДанныеСотрудников

Функция ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(Знач ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
					
					ПутьКДанным =
						"	ВЫБОР 
						|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
						|			ТОГДА
						|				ВЫБОР
						|					КОГДА НЕ ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией ЕСТЬ NULL
						|						ТОГДА ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
						|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)
						|				КОНЕЦ 
						|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
						|	КОНЕЦ";
					
				Иначе
					
					ПутьКДанным =
						"	ВЫБОР 
						|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
						|			ТОГДА ЕСТЬNULL(ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
						|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
						|	КОНЕЦ";
				
				КонецЕсли;
				
			Иначе
			
				ПутьКДанным =
					"	ВЫБОР 
					|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
					|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
					|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
					|	КОНЕЦ";
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
			МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
			МодульОхранаТруда.ПереопределитьПутьКДаннымСведенийЗависящихОтФункциональныхОпций(ПутьКДанным);
		КонецЕсли;
	
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РаботаетВСтуденческомОтряде") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудСтудентовСтуденческихОтрядов 
			|			ТОГДА КадроваяИсторияСотрудников.Сотрудник.СтудентРаботающийВСтудотряде
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	НеобходимыСведения = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		НеобходимыСведения = МодульРабочиеМестаОхраныТруда.НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоля);
	КонецЕсли;
	
	Если Не НеобходимыСведения Тогда
		НеобходимыСведения = КадровыйУчетБазовый.НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоля);
	КонецЕсли;
	
	Возврат НеобходимыСведения;
	
КонецФункции

Функция ИмяФункциональнойОпцииПоИмениДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	ИмяФункциональнойОпции = "";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		ИмяФункциональнойОпции = МодульГосударственнаяСлужба.ИмяФункциональнойОпцииПоИмениДанныхСотрудника(ИмяПоля);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФункциональнойОпции) И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		ИмяФункциональнойОпции = МодульОбразовательныеУчреждения.ИмяФункциональнойОпцииПоИмениДанныхСотрудника(ИмяПоля);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФункциональнойОпции) И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		ИмяФункциональнойОпции = МодульМедицина.ИмяФункциональнойОпцииПоИмениДанныхСотрудника(ИмяПоля);
	КонецЕсли;
	
	Возврат ИмяФункциональнойОпции;
	
КонецФункции

Функция ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(Знач ИмяПоля, ИсточникиДанных) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		И ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ИмяФункциональнойОпции = "ИспользуютсяРаботыСДосрочнойПенсией";
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ИсторияИспользованияШтатногоРасписания", "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией");
		
	ИначеЕсли ИмяПоля = ВРег("РаботаетВСтуденческомОтряде") Тогда
		ИмяФункциональнойОпции = "ИспользуетсяТрудСтудентовСтуденческихОтрядов";
	Иначе
		ИмяФункциональнойОпции = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФункциональнойОпции) И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		ИмяФункциональнойОпции = МодульРабочиеМестаОхраныТруда.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФункциональнойОпции) Тогда
		ИмяФункциональнойОпции = КадровыйУчетБазовый.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
	КонецЕсли; 
	
	Возврат ИмяФункциональнойОпции;
	
КонецФункции

Процедура ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные,
	ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные,
			ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	КонецЕсли;
		
КонецПроцедуры

// Расширение базовых кадровых данных.

Функция ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(КадровыеДанные, ИсточникиДанных) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляПостоянныеКадровыеДанныеСотрудников";
	БазовыеКадровыеДанные = Новый Массив;
	
	Для каждого ИмяЗапрашиваемыхДанных Из КадровыеДанные Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеСведенийОТекущихТерриториях(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			БазовыеКадровыеДанные.Добавить(ИмяЗапрашиваемыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если БазовыеКадровыеДанные.Количество() > 0 Тогда
		
		ТекстыОписанияПолейБазовыхКадровыхДанных = КадровыйУчетБазовый.ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(БазовыеКадровыеДанные, ИсточникиДанных);
		Если ТекстыОписанияПолейБазовыхКадровыхДанных.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекстыОписанияПолей, ТекстыОписанияПолейБазовыхКадровыхДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстыОписанияПолей;
	
КонецФункции

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных) Экспорт
	
	ДобавитьТекстЗапросаТекущихТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
	КадровыйУчетБазовый.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных);
	
КонецПроцедуры

Функция ДобавитьПолеСведенийОТекущихТерриториях(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОТекущихТерриториях(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ТекущиеТерриторииСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОТекущейТерритории(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОТекущихТерриториях(ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ТекущаяТерритория");
	
КонецФункции

Функция ПутьКДаннымСведенийОТекущейТерритории(ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущаяТерритория") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеТерриторииСотрудников.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка))";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаТекущихТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ЧастиЗапроса = Новый Массив;
	
	Если ИсточникиДанных.Получить("ТекущиеТерриторииСотрудников") <> Неопределено Тогда
		
		СоединениеСТекущимиКадровымиДанными = 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТерриторииСотрудников.СрезПоследних(
			|			,
			|			Сотрудник В
			|				(ВЫБРАТЬ
			|					ТаблицаФильтра.Сотрудник
			|				ИЗ
			|					ВТТаблицаФильтр КАК ТаблицаФильтра)) КАК ТекущиеТерриторииСотрудников
			|	ПО ТаблицаОтборов.Сотрудник = ТекущиеТерриторииСотрудников.Сотрудник}";
		
		СоединениеСТекущимиКадровымиДанными = СтрЗаменить(СоединениеСТекущимиКадровымиДанными,
			"ВТТаблицаФильтр", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		СоединениеСТекущимиКадровымиДанными = СтрЗаменить(СоединениеСТекущимиКадровымиДанными,
			"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		ЧастиЗапроса.Добавить(СоединениеСТекущимиКадровымиДанными);
		
		ЧастиЗапроса.Вставить(0, Запрос.Текст);
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

// Расширение базовых кадровых данных.

Функция НеобходимыСведенияТекущихДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущаяДолжностьПоШтатномуРасписанию") 
		Или ИмяПоля = ВРег("ТекущийВидДоговора")
		Или КадровыйУчетБазовый.НеобходимыСведенияТекущихДанныхСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущаяДолжностьПоШтатномуРасписанию") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеДанныеСотрудников.ДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийВидДоговора") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеДанныеСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидДоговора") Тогда
		ПутьКДанным = "	ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)";
	Иначе
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля);
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

Функция НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущийФОТ")
		Или ИмяПоля = ВРег("ТекущаяНадбавка")
		Или КадровыйУчетБазовый.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущийФОТ") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0)";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяНадбавка") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяНадбавка, 0)";
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля);
		
	КонецЕсли;
		
	Возврат ПутьКДанным;
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОПриемеВидДоговора")
		Или ИмяПоля = ВРег("ПриказОПриемеТрудовойДоговорНомер")
		Или ИмяПоля = ВРег("ПриказОПриемеТрудовойДоговорДата")
		Или ИмяПоля = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора")
		Или КадровыйУчетБазовый.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриеме") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ПриказыОПриеме.ПриемТрудовымДоговором = ИСТИНА
			|		ТОГДА NULL
			|		ИНАЧЕ ПриказыОПриеме.Ссылка
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеДата") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ПриказыОПриеме.ПриемТрудовымДоговором = ИСТИНА
			|		ТОГДА NULL
			|		ИНАЧЕ ПриказыОПриеме.Дата
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеНомер") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ПриказыОПриеме.ПриемТрудовымДоговором = ИСТИНА
			|		ТОГДА NULL
			|		ИНАЧЕ ПриказыОПриеме.Номер
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеНомерПриказа") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ПриказыОПриеме.ПриемТрудовымДоговором = ИСТИНА
			|		ТОГДА NULL
			|		ИНАЧЕ ПриказыОПриеме.НомерПриказа
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеВидДоговора") Тогда
		ПутьКДанным = "ПриказыОПриеме.ВидДоговора";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеТрудовойДоговорНомер") Тогда
		ПутьКДанным = "ПриказыОПриеме.ТрудовойДоговорНомер";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеТрудовойДоговорДата") Тогда
		ПутьКДанным = "ПриказыОПриеме.ТрудовойДоговорДата";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ПриказыОПриеме.СрочныйДоговор = ЛОЖЬ
			|		ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ ПриказыОПриеме.ДатаЗавершенияТрудовогоДоговора
			|	КОНЕЦ";
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля);
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка КАК Ссылка,
		|	ПриемНаРаботу.Номер КАК Номер,
		|	ПриемНаРаботу.НомерПриказа КАК НомерПриказа,
		|	ПриемНаРаботу.Дата КАК Дата,
		|	ПриемНаРаботу.Организация КАК Организация,
		|	ПриемНаРаботу.Подразделение КАК Подразделение,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриемНаРаботу.Должность КАК Должность,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботу.ДатаПриема КАК ДатаПриема,
		|	ПриемНаРаботу.КоличествоСтавок КАК КоличествоСтавок,
		|	ПриемНаРаботу.ВидЗанятости КАК ВидЗанятости,
		|	ПриемНаРаботу.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока,
		|	ПриемНаРаботу.ГрафикРаботы КАК ГрафикРаботы,
		|	ПриемНаРаботу.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс КАК Аванс,
		|	ПриемНаРаботу.УсловияПриема КАК УсловияПриема,
		|	ПриемНаРаботу.Руководитель КАК Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ПриемНаРаботу.НачисленияУтверждены КАК НачисленияУтверждены,
		|	ПриемНаРаботу.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ПриемНаРаботу.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ПриемНаРаботу.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ПриемНаРаботу.ИсправленныйДокумент КАК ИсправленныйДокумент,
		|	ПриемНаРаботу.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботу.СовокупнаяТарифнаяСтавка КАК СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботу.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
		|	ПриемНаРаботу.РазрядКатегория КАК РазрядКатегория,
		|	ПриемНаРаботу.ВидДоговора КАК ВидДоговора,
		|	ПриемНаРаботу.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
		|	ПриемНаРаботу.СрочныйДоговор КАК СрочныйДоговор,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора КАК ОснованиеСрочногоДоговора,
		|	ПриемНаРаботу.СрокЗаключенияДоговора КАК СрокЗаключенияДоговора,
		|	ПриемНаРаботу.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.СпособПоступленияНаСлужбу КАК СпособПоступленияНаСлужбу,
		|	ПриемНаРаботу.ПоступлениеНаСлужбуВпервые КАК ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботу.ВидАктаГосоргана КАК ВидАктаГосоргана,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста КАК ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора КАК ИныеУсловияДоговора,
		|	ПриемНаРаботу.Грейд КАК Грейд,
		|	ПриемНаРаботу.Территория КАК Территория,
		|	ПриемНаРаботу.БронированиеПозиции КАК БронированиеПозиции,
		|	ПриемНаРаботу.Ответственный КАК Ответственный,
		|	ПриемНаРаботу.Комментарий КАК Комментарий,
		|	ПриемНаРаботу.Проведен КАК Проведен,
		|	ПриемНаРаботу.РазрешениеНаРаботу КАК РазрешениеНаРаботу,
		|	ПриемНаРаботу.РазрешениеНаПроживание КАК РазрешениеНаПроживание,
		|	ПриемНаРаботу.УсловияОказанияМедпомощи КАК УсловияОказанияМедпомощи,
		|	ПриемНаРаботу.РабочееМесто КАК РабочееМесто,
		|	ПриемНаРаботу.ПриемТрудовымДоговором КАК ПриемТрудовымДоговором
		|ПОМЕСТИТЬ ВТСведенийПриказовОПриеме
		|{ВЫБРАТЬ
		|	Подразделение.* КАК ПодразделениеПриПриеме,
		|	Организация.* КАК ОрганизацияПриПриеме,
		|	Должность.* КАК ДолжностьПриПриеме,
		|	ДолжностьПоШтатномуРасписанию.* КАК ДолжностьПоШтатномуРасписаниюПриПриеме,
		|	ГрафикРаботы.* КАК ГрафикРаботыПриПриеме}
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботу.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботу.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботуСписком.Ссылка,
		|	ПриемНаРаботуСписком.Ссылка.Номер,
		|	ПриемНаРаботуСписком.Ссылка.НомерПриказа,
		|	ПриемНаРаботуСписком.Ссылка.Дата,
		|	ПриемНаРаботуСписком.Ссылка.Организация,
		|	ПриемНаРаботуСписком.Подразделение,
		|	ПриемНаРаботуСписком.Сотрудник,
		|	ПриемНаРаботуСписком.ФизическоеЛицо,
		|	ПриемНаРаботуСписком.Должность,
		|	ПриемНаРаботуСписком.ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботуСписком.ДатаПриема,
		|	ПриемНаРаботуСписком.КоличествоСтавок,
		|	ПриемНаРаботуСписком.ВидЗанятости,
		|	ПриемНаРаботуСписком.ДлительностьИспытательногоСрока,
		|	ПриемНаРаботуСписком.ГрафикРаботы,
		|	ПриемНаРаботуСписком.СпособРасчетаАванса,
		|	ПриемНаРаботуСписком.Аванс,
		|	ПриемНаРаботуСписком.УсловияПриема,
		|	ПриемНаРаботуСписком.Ссылка.Руководитель,
		|	ПриемНаРаботуСписком.Ссылка.ДолжностьРуководителя,
		|	ПриемНаРаботуСписком.Ссылка.НачисленияУтверждены,
		|	ПриемНаРаботуСписком.СпособОтраженияЗарплатыВБухучете,
		|	ПриемНаРаботуСписком.ОтношениеКЕНВД,
		|	ПриемНаРаботуСписком.СтатьяФинансирования,
		|	ПриемНаРаботуСписком.Ссылка.ИсправленныйДокумент,
		|	ПриемНаРаботуСписком.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботуСписком.СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботуСписком.ВидТарифнойСтавки,
		|	ПриемНаРаботуСписком.РазрядКатегория,
		|	ПриемНаРаботуСписком.Ссылка.ВидДоговора,
		|	ПриемНаРаботуСписком.ТрудовойДоговорНомер,
		|	ПриемНаРаботуСписком.ТрудовойДоговорДата,
		|	ПриемНаРаботуСписком.СрочныйДоговор,
		|	ПриемНаРаботуСписком.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботуСписком.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботуСписком.СрокЗаключенияДоговора,
		|	ПриемНаРаботуСписком.Ссылка.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботуСписком.СпособПоступленияНаСлужбу,
		|	ПриемНаРаботуСписком.ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботуСписком.ВидАктаГосоргана,
		|	ПриемНаРаботуСписком.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботуСписком.ИныеУсловияДоговора,
		|	ПриемНаРаботуСписком.Грейд,
		|	ПриемНаРаботуСписком.Территория,
		|	ПриемНаРаботуСписком.Ссылка.БронированиеПозиции,
		|	ПриемНаРаботуСписком.Ссылка.Ответственный,
		|	ПриемНаРаботуСписком.Ссылка.Комментарий,
		|	ПриемНаРаботуСписком.Ссылка.Проведен,
		|	ПриемНаРаботуСписком.РазрешениеНаРаботу,
		|	ПриемНаРаботуСписком.РазрешениеНаПроживание,
		|	ПриемНаРаботуСписком.УсловияОказанияМедпомощи,
		|	ПриемНаРаботуСписком.РабочееМесто,
		|	ПриемНаРаботуСписком.Ссылка.ПриемТрудовымДоговором
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСписком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботуСписком.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботуСписком.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьВТСведенийПриказовОПриемеОбъединенияСЗачислениямиВСпискиЧасти(Запрос);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОПриеме", ИмяВТСведенийПриказовОПриеме);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Увольнение.Ссылка КАК Ссылка,
		|	Увольнение.Номер КАК Номер,
		|	Увольнение.НомерПриказа КАК НомерПриказа,
		|	ВЫБОР
		|		КОГДА Увольнение.ДатаПервичногоДокумента = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Увольнение.Дата
		|		ИНАЧЕ Увольнение.ДатаПервичногоДокумента
		|	КОНЕЦ КАК Дата,
		|	Увольнение.ПериодРегистрации КАК ПериодРегистрации,
		|	Увольнение.Организация КАК Организация,
		|	Увольнение.ДатаУвольнения КАК ДатаУвольнения,
		|	Увольнение.Сотрудник КАК Сотрудник,
		|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Увольнение.СтатьяТКРФ КАК СтатьяТКРФ,
		|	Увольнение.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Увольнение.ВыходноеПособие КАК ВыходноеПособие,
		|	Увольнение.ДнейЧасовВыходногоПособия КАК ДнейЧасовВыходногоПособия,
		|	Увольнение.СуммированныйУчет КАК СуммированныйУчет,
		|	Увольнение.ДнейКомпенсацииУдержанияОтпуска КАК ДнейКомпенсацииУдержанияОтпуска,
		|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержанияОтпуска,
		|	Увольнение.ВидРасчетаКомпенсацииУдержанияОтпуска КАК ВидРасчетаКомпенсацииУдержанияОтпуска,
		|	Увольнение.РабочийГодС КАК РабочийГодС,
		|	Увольнение.РабочийГодПо КАК РабочийГодПо,
		|	Увольнение.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
		|	Увольнение.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Увольнение.ФиксПериодРасчетаСреднегоЗаработка КАК ФиксПериодРасчетаСреднегоЗаработка,
		|	Увольнение.СреднийЗаработок КАК СреднийЗаработок,
		|	Увольнение.СреднийЗаработокПоРабочимДням КАК СреднийЗаработокПоРабочимДням,
		|	Увольнение.СреднийЗаработокВыходногоПособия КАК СреднийЗаработокВыходногоПособия,
		|	Увольнение.ПорядокВыплаты КАК ПорядокВыплаты,
		|	Увольнение.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
		|	Увольнение.ИсправленныйДокумент КАК ИсправленныйДокумент,
		|	Увольнение.ДокументРассчитан КАК ДокументРассчитан,
		|	Увольнение.Рассчитал КАК Рассчитал,
		|	Увольнение.ПредставлениеПериода КАК ПредставлениеПериода,
		|	Увольнение.Руководитель КАК Руководитель,
		|	Увольнение.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Увольнение.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	Увольнение.Бухгалтер КАК Бухгалтер,
		|	Увольнение.РаботникКадровойСлужбы КАК РаботникКадровойСлужбы,
		|	Увольнение.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьРаботникаКадровойСлужбы,
		|	Увольнение.Исполнитель КАК Исполнитель,
		|	Увольнение.ДолжностьИсполнителя КАК ДолжностьИсполнителя,
		|	Увольнение.РасчетДенежногоСодержания КАК РасчетДенежногоСодержания,
		|	Увольнение.СохраняемоеДенежноеСодержание КАК СохраняемоеДенежноеСодержание,
		|	Увольнение.МесячноеДенежноеСодержание КАК МесячноеДенежноеСодержание,
		|	Увольнение.КоличествоМесяцевВыплатыДенежногоСодержания КАК КоличествоМесяцевВыплатыДенежногоСодержания,
		|	Увольнение.ВидРасчетаМесячноеДенежноеСодержание КАК ВидРасчетаМесячноеДенежноеСодержание,
		|	Увольнение.ДолжностьЗамещаласьМенее12Месяцев КАК ДолжностьЗамещаласьМенее12Месяцев,
		|	Увольнение.Проведен КАК Проведен
		|ПОМЕСТИТЬ ВТСведенийПриказовОбУвольнении
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО Увольнение.Сотрудник = КадроваяИстория.Сотрудник
		|			И Увольнение.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|			И (НЕ КадроваяИстория.ЭтоВозвратноеСобытие)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСписком.Ссылка,
		|	УвольнениеСписком.Ссылка.Номер,
		|	УвольнениеСписком.Ссылка.НомерПриказа,
		|	ВЫБОР
		|		КОГДА УвольнениеСписком.Ссылка.ДатаПервичногоДокумента = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА УвольнениеСписком.Ссылка.Дата
		|		ИНАЧЕ УвольнениеСписком.Ссылка.ДатаПервичногоДокумента
		|	КОНЕЦ,
		|	УвольнениеСписком.Ссылка.ПериодРегистрации,
		|	УвольнениеСписком.Ссылка.Организация,
		|	УвольнениеСписком.ДатаУвольнения,
		|	УвольнениеСписком.Сотрудник,
		|	УвольнениеСписком.ФизическоеЛицо,
		|	УвольнениеСписком.СтатьяТКРФ,
		|	УвольнениеСписком.ОснованиеУвольнения,
		|	УвольнениеСписком.ВыходноеПособие,
		|	УвольнениеСписком.ДнейЧасовВыходногоПособия,
		|	УвольнениеСписком.СуммированныйУчет,
		|	УвольнениеСписком.ДнейКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.ПризнакКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.ВидРасчетаКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.РабочийГодС,
		|	УвольнениеСписком.РабочийГодПо,
		|	УвольнениеСписком.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УвольнениеСписком.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УвольнениеСписком.ФиксПериодРасчетаСреднегоЗаработка,
		|	УвольнениеСписком.СреднийЗаработок,
		|	УвольнениеСписком.СреднийЗаработокПоРабочимДням,
		|	УвольнениеСписком.СреднийЗаработокВыходногоПособия,
		|	УвольнениеСписком.Ссылка.ПорядокВыплаты,
		|	УвольнениеСписком.Ссылка.ПланируемаяДатаВыплаты,
		|	УвольнениеСписком.Ссылка.ИсправленныйДокумент,
		|	УвольнениеСписком.Ссылка.ДокументРассчитан,
		|	УвольнениеСписком.Ссылка.Рассчитал,
		|	УвольнениеСписком.Ссылка.ПредставлениеПериода,
		|	УвольнениеСписком.Ссылка.Руководитель,
		|	УвольнениеСписком.Ссылка.ДолжностьРуководителя,
		|	УвольнениеСписком.Ссылка.ГлавныйБухгалтер,
		|	УвольнениеСписком.Ссылка.Бухгалтер,
		|	УвольнениеСписком.Ссылка.РаботникКадровойСлужбы,
		|	УвольнениеСписком.Ссылка.ДолжностьРаботникаКадровойСлужбы,
		|	УвольнениеСписком.Ссылка.Исполнитель,
		|	УвольнениеСписком.Ссылка.ДолжностьИсполнителя,
		|	УвольнениеСписком.РасчетДенежногоСодержания,
		|	УвольнениеСписком.СохраняемоеДенежноеСодержание,
		|	УвольнениеСписком.МесячноеДенежноеСодержание,
		|	УвольнениеСписком.КоличествоМесяцевВыплатыДенежногоСодержания,
		|	УвольнениеСписком.ВидРасчетаМесячноеДенежноеСодержание,
		|	УвольнениеСписком.ДолжностьЗамещаласьМенее12Месяцев,
		|	УвольнениеСписком.Ссылка.Проведен
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСписком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО УвольнениеСписком.Сотрудник = КадроваяИстория.Сотрудник
		|			И УвольнениеСписком.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|			И (НЕ КадроваяИстория.ЭтоВозвратноеСобытие)";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьВТСведенийПриказовОбУвольненииОбъединенияСИсключениямиИзСписковЧасти(Запрос);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОбУвольнении", ИмяВТСведенийПриказовОбУвольнении);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат
		ИмяПоля = ВРег("ДолжностьПоШтатномуРасписанию")
		Или ИмяПоля = ВРег("ВидДоговора")
		Или КадровыйУчетБазовый.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля)
	
КонецФункции

Функция НеобходимыСведенияЗависящиеОтКадровойИсторииСотрудников(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	НеобходимыСведения =
		ИмяПоля = ВРег("ТарифнаяСетка")
		Или ИмяПоля = ВРег("ТарифнаяСеткаНадбавки")
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля);
		
	Если Не НеобходимыСведения
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		И ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании") Тогда
		
		НеобходимыСведения = ПолеСведенийОРазрядахКатегориях(ИмяПоля);
		
	КонецЕсли;
	
	Если Не НеобходимыСведения Тогда
		НеобходимыСведения = КадровыйУчетБазовый.НеобходимыСведенияЗависящиеОтКадровойИсторииСотрудников(ИмяПоля);
	КонецЕсли;
	
	Возврат НеобходимыСведения;
	
КонецФункции

Функция ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("КоличествоСтавок")
		Или ИмяПоляВВерхнемРегистре = ВРег("ДолжностьПоШтатномуРасписанию")
		Или ИмяПоляВВерхнемРегистре = ВРег("ВидДоговора") Тогда
		
		ПутьКДанным = "	КадроваяИсторияСотрудников." + ИмяПоля;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТарифнаяСетка") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ТарифнаяСетка КАК Справочник.ТарифныеСетки)";
		Иначе
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности).ТарифнаяСетка КАК Справочник.ТарифныеСетки)";
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТарифнаяСеткаНадбавки") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ТарифнаяСеткаНадбавки КАК Справочник.ТарифныеСетки)";
		Иначе
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности).ТарифнаяСеткаНадбавки КАК Справочник.ТарифныеСетки)";
		КонецЕсли;
		
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		И ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании")
		И ПолеСведенийОРазрядахКатегориях(ИмяПоляВВерхнемРегистре) Тогда
			
		Если ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияПериодРегистрации") Тогда
			ПутьКДанным = "	КадроваяИсторияСотрудников.ПериодЗаписи";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияРегистратор") Тогда
			ПутьКДанным = "	КадроваяИсторияСотрудников.Регистратор";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегория") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).РазрядКатегория";
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля) Тогда
			
		ПутьКДанным = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ПутьКДаннымСведенийОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда")
			И ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда").НеобходимыСведенияОРабочихМестахСотрудников(ИмяПоля) Тогда
			
		ПутьКДанным = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда").ПутьКДаннымСведенийОРабочихМестахСотрудников(ИмяПоля);
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля);
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных) Экспорт
	
	ПоляДанных = ИсточникиДанных.Получить("КадроваяИсторияСотрудников");
	Если ПоляДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияКадровойИсторииСотрудников = "ВТСведенияКадровойИсторииСотрудников";
	КадровыйУчетБазовый.ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТСведенияКадровойИсторииСотрудников);
	
	Если ИсточникиДанных.Получить("ИсторияИспользованияШтатногоРасписания") <> Неопределено Тогда
		
		ИмяВТПозицииШтатногоРасписания = "ВТПозицииШтатногоРасписанияСотрудников";
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра(ИмяВТСведенияКадровойИсторииСотрудников);
		ПараметрыПостроения.ИмяПоляПозицияШтатногоРасписания = "ДолжностьПоШтатномуРасписанию";
		ПараметрыПостроения.ВключаяЗакрытые = Истина;
		
		ЗапросВТ = УправлениеШтатнымРасписанием.ЗапросВТШтатноеРасписание(ТолькоРазрешенные, ПараметрыПостроения, , ИмяВТПозицииШтатногоРасписания);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		
		ТекстыЗапросов = СтрРазделить(Запрос.Текст, ";");
		ТекстПоследнегоЗапроса = ТекстыЗапросов[ТекстыЗапросов.Количество() - 1];
		
		ТекстПоследнихЗапросов = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(ЗапросВТ.Текст, ТекстПоследнегоЗапроса);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса, ТекстПоследнихЗапросов);
		
		ЧастиЗапроса = Новый Массив;
		ЧастиЗапроса.Добавить(Запрос.Текст);
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПозицииШтатногоРасписания + " КАК ИсторияИспользованияШтатногоРасписания
			|	ПО КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|		И КадроваяИсторияСотрудников.Период = ИсторияИспользованияШтатногоРасписания.Период}");
		
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТПозицииШтатногоРасписания);
		
	КонецЕсли;
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимыСведенияОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОсновноеНачисление")
		Или ИмяПоля = ВРег("ПоказательТарифнойСтавки")
		Или КадровыйУчетБазовый.НеобходимыСведенияОбОплатеТруда(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОсновноеНачисление") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ОсновноеНачисление";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПоказательТарифнойСтавки") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ПоказательТарифнойСтавки";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Надбавка") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.Надбавка";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФОТ") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ФОТ";
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля);
	КонецЕсли; 
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о территории

Функция ДобавитьПолеСведенийОТерриторияхСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОТерриторияхСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОТерриторияхСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОТерриторияхСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОТерриторияхСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТерриторияПериодРегистрации")
		Или ИмяПоля = ВРег("ТерриторияРегистратор")
		Или ИмяПоля = ВРег("Территория")
		Или ИмяПоля = ВРег("ТерриторияВыполненияРаботВОрганизации");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОТерриторияхСотрудников(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОТерриторияхСотрудников(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ТерриторияПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("ТерриторияРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ТерриторииСотрудников", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОТерриторияхСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТерриторияПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТерриторияРегистратор") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Территория")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТерриторияВыполненияРаботВОрганизации") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.Территория";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОТерриторияхСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОТерриторияхСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОТерриторияхСотрудников КАК СведенияОТерриторияхСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОТерриторияхСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОТерриторияхСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОТерриторияхСотрудников");
	
КонецПроцедуры

// Сведения о графиках работы

Функция ДобавитьПолеСведенийОГрафикахРаботы(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОГрафикахРаботы(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГрафикахРаботы", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОГрафикахРаботы(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОГрафикахРаботы(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ГрафикРаботыПериодРегистрации")
		Или ИмяПоля = ВРег("ГрафикРаботыРегистратор")
		Или ИмяПоля = ВРег("ГрафикРаботы")
		Или ИмяПоля = ВРег("СуммированныйУчетРабочегоВремени")
		Или ИмяПоля = ВРег("СреднемесячноеЧислоЧасов")
		Или ИмяПоля = ВРег("СреднемесячноеЧислоДней");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОГрафикахРаботыСотрудников(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОГрафикахРаботы(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ГрафикРаботыПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("ГрафикРаботыРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			ИначеЕсли ИмяПоля = ВРег("СуммированныйУчетРабочегоВремени") Тогда
				УсловиеПоиска.ЛевоеЗначение = "ГрафикРаботы.СуммированныйУчетРабочегоВремени";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ГрафикРаботыСотрудников", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОГрафикахРаботы(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботыПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботыРегистратор") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботы") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.ГрафикРаботы";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СуммированныйУчетРабочегоВремени") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).СуммированныйУчетРабочегоВремени";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СреднемесячноеЧислоЧасов") Тогда
		ПутьКДанным = "	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СреднемесячноеЧислоДней") Тогда
		ПутьКДанным = "	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОГрафикахРаботы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОГрафикахРаботы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	
	ИмяВТСведенияОГрафикахРаботы = "ВТСведенияОГрафикахРаботыДляКадровыхДанныхСотрудников";
	ЗапросВТ = ЗапросВТСведенияОГрафикахРаботы(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОГрафикахРаботы);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОГрафикахРаботы + " КАК СведенияОГрафикахРаботы
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
		|		ПО СведенияОГрафикахРаботы.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|			И ГОД(СведенияОГрафикахРаботы.Период) = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год}
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОГрафикахРаботы.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОГрафикахРаботы.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТСведенияОГрафикахРаботы);
	
КонецПроцедуры

// Сведения о доле неполного рабочего времени

Функция ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ДоляНеполногоРабочегоВремени") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели ЕСТЬ NULL
			|			ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
			|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
			|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
			|			ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
			|		ИНАЧЕ
			|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
			|				ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
			|	КОНЕЦ";
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о разрядах, категориях сотрудников.

Функция ДобавитьПолеСведенийОРазрядахКатегориях(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОРазрядахКатегориях(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОРазрядахКатегориях", Истина);
		
		ПутьКДанным = ПутьКСведениямОРазрядахКатегориях(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОРазрядахКатегориях(Знач ИмяПоля)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании") Тогда
		
		Возврат ПолеСведенийОРазрядахКатегориях(ИмяПоля);
		
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

Функция ПолеСведенийОРазрядахКатегориях(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации")
		Или ИмяПоля = ВРег("РазрядКатегорияРегистратор")
		Или ИмяПоля = ВРег("РазрядКатегория");
			
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОРазрядахКатегориях(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если ПолеСведенийОРазрядахКатегориях(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("РазрядКатегорияРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.РазрядыКатегорииСотрудников", УсловиеПоиска);
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОРазрядахКатегориях(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияРегистратор") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегория") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.РазрядКатегория";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОРазрядахКатегориях(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОРазрядахКатегориях") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОРазрядахКатегориях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, "ВТСведенияОРазрядахКатегорияхСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОРазрядахКатегорияхСотрудников КАК СведенияОРазрядахКатегориях
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОРазрядахКатегориях.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОРазрядахКатегориях.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОРазрядахКатегорияхСотрудников");
	
КонецПроцедуры

Функция ДобавитьПолеСведенийОПКУ(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПКУ(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПКУ", Истина);
		
		ПутьКДанным = ПутьКСведениямОПКУ(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПКУ(Знач ИмяПоля)
	
	Возврат ПолеСведенийОПКУ(ИмяПоля);
		
КонецФункции

Функция ПолеСведенийОПКУ(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПКУПериодРегистрации")
		Или ИмяПоля = ВРег("ПКУРегистратор")
		Или ИмяПоля = ВРег("ПКУ");
			
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПКУ(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если ПолеСведенийОПКУ(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ПКУПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("ПКУРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПКУСотрудников", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОПКУ(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПКУПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОПКУ.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПКУРегистратор") Тогда
		ПутьКДанным = "	СведенияОПКУ.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПКУ") Тогда
		ПутьКДанным = "	СведенияОПКУ.ПКУ";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОПКУ(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПКУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОПКУ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, "ВТСведенияОПКУСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПКУСотрудников КАК СведенияОПКУ
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОПКУ.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОПКУ.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПКУСотрудников");
	
КонецПроцедуры

// Сведения о состоянии

Функция ДобавитьПолеСведенийОСостоянииСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСостоянииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСостоянииСотрудников", Истина);
		
		ПутьКДанным = ПутьКСведениямОСостоянииСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОСостоянииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СостояниеПериодРегистрации")
		Или ИмяПоля = ВРег("Состояние");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОСостоянииСотрудников(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОСостоянииСотрудников(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.СостоянияСотрудников", УсловиеПоиска);
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОСостоянииСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("СостояниеПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОСостоянииСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Состояние") Тогда
		ПутьКДанным = "	СведенияОСостоянииСотрудников.Состояние";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОСостоянииСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОСостоянииСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОСостоянииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСостоянииСотрудников КАК СведенияОСостоянииСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОСостоянииСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОСостоянииСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСостоянииСотрудников");
	
КонецПроцедуры

// Сведения о совокупных тарифных ставках

Функция ДобавитьПолеСведенийОСовокупныхТарифныхСтавках(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСовокупныхТарифныхСтавках(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСовокупныхТарифныхСтавках", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСовокупныхТарифныхСтавках(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОСовокупныхТарифныхСтавках(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СовокупнаяТарифнаяСтавкаПериодРегистрации")
		Или ИмяПоля = ВРег("СовокупнаяТарифнаяСтавкаРегистратор")
		Или ИмяПоля = ВРег("СовокупнаяТарифнаяСтавка")
		Или ИмяПоля = ВРег("ВидСовокупнойТарифнойСтавки");
		
КонецФункции

Функция ПутьКДаннымСведенийОСовокупныхТарифныхСтавках(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавкаПериодРегистрации") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.Период";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавкаРегистратор") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.РегистраторСобытия";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавка") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.СовокупнаяТарифнаяСтавка";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидСовокупнойТарифнойСтавки") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСовокупныхТарифныхСтавках(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОСовокупныхТарифныхСтавках");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОСовокупныхТарифныхСтавках(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСовокупныхТарифныхСтавках КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСовокупныхТарифныхСтавках");
	
КонецПроцедуры

// Сведения о стаже работы на предприятии

Функция ДобавитьПолеСведенийОСтажеРаботыНаПредприятии(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И НеобходимыСведенияОСтажеРаботыНаПредприятии(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", "ДатаПриема");
		ИсточникиДанных.Вставить("СведенияОСтажеРаботыНаПредприятии", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСтажеРаботыНаПредприятии(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОСтажеРаботыНаПредприятии(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СтажРаботыНаПредприятииЛет")
		Или ИмяПоля = ВРег("СтажРаботыНаПредприятииМесяцев")
		Или ИмяПоля = ВРег("СтажРаботыНаПредприятииДней");
	
КонецФункции

Функция ПутьКДаннымСведенийОСтажеРаботыНаПредприятии(ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("СтажРаботыНаПредприятииЛет") Тогда
		ПутьКДанным = "СведенияОСтажеРаботыНаПредприятии.Лет";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СтажРаботыНаПредприятииМесяцев") Тогда
		ПутьКДанным = "СведенияОСтажеРаботыНаПредприятии.Месяцев";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СтажРаботыНаПредприятииДней") Тогда
		ПутьКДанным = "СведенияОСтажеРаботыНаПредприятии.Дней";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСтажеРаботыНаПредприятии(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОСтажеРаботыНаПредприятии");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Период КАК ПериодЗапроса,
		|	ВЫБОР
		|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения < ТаблицаОтборов.Период
		|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|		ИНАЧЕ ТаблицаОтборов.Период
		|	КОНЕЦ КАК ДатаРасчетаСтажа,
		|	ТаблицаОтборов.Сотрудник КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ВидСтажа,
		|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаОтсчета,
		|	0 КАК РазмерМесяцев,
		|	1 КАК РазмерДней,
		|	ЛОЖЬ КАК Прерван
		|ПОМЕСТИТЬ ВТИсходныеДанныеРасчетСтажаРаботыНаПредприятии
		|ИЗ
		|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ТаблицаОтборов.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборовРазличныхСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	ОписательВТ = ОписательВТИсходныеДанныеДляРасчетаСтажа();
	ОписательВТ.ИмяВТИсходныеДанные = "ВТИсходныеДанныеРасчетСтажаРаботыНаПредприятии";
	
	ЗапросВТ =ЗапросВТРасчетСтажа(ОписательВТ, "ВТРасчетСтажаРаботыНаПредприятии");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходныеДанныеРасчетСтажаРаботыНаПредприятии КАК ИсходныеДанныеРасчетСтажаРаботыНаПредприятии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетСтажаРаботыНаПредприятии КАК СведенияОСтажеРаботыНаПредприятии
		|		ПО ИсходныеДанныеРасчетСтажаРаботыНаПредприятии.ФизическоеЛицо = СведенияОСтажеРаботыНаПредприятии.ФизическоеЛицо
		|			И ИсходныеДанныеРасчетСтажаРаботыНаПредприятии.ДатаРасчетаСтажа = СведенияОСтажеРаботыНаПредприятии.Период
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ИсходныеДанныеРасчетСтажаРаботыНаПредприятии.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ИсходныеДанныеРасчетСтажаРаботыНаПредприятии.ПериодЗапроса}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТИсходныеДанныеРасчетСтажаРаботыНаПредприятии");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТРасчетСтажаРаботыНаПредприятии");
	
КонецПроцедуры

// Сведения о порядке расчета стоимости единицы времени

Функция ДобавитьПолеСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПорядкеРасчетаСтоимостиЕдиницыВремени", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениПериодРегистрации")
		Или ИмяПоля = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениРегистратор")
		Или ИмяПоля = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремени");
	
КонецФункции

Функция ПутьКДаннымСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениПериодРегистрации") Тогда
		ПутьКДанным = "	ПорядкиРасчетаСтоимостиЕдиницыВремени.Период";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениРегистратор") Тогда
		ПутьКДанным = "	ПорядкиРасчетаСтоимостиЕдиницыВремени.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремени") Тогда
		ПутьКДанным = "	ПорядкиРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОПорядкеРасчетаСтоимостиЕдиницыВремени");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени КАК ПорядкиРасчетаСтоимостиЕдиницыВремени
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПорядкиРасчетаСтоимостиЕдиницыВремени.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ПорядкиРасчетаСтоимостиЕдиницыВремени.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени");
	
КонецПроцедуры

// Сведения о месте выплаты зарплаты.

Функция ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМестеВыплатыЗарплаты(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОМестеВыплатыЗарплаты", Истина);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Организация");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Подразделение");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ТекущаяОрганизация");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ТекущееПодразделение");
		
		ПутьКДанным = ПутьКДаннымСведенийОМестеВыплатыЗарплаты(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВладелецМестаВыплаты")
		Или ИмяПоля = ВРег("ВидМестаВыплаты")
		Или ИмяПоля = ВРег("МестоВыплаты");
		
КонецФункции

Функция ПутьКДаннымСведенийОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВладелецМестаВыплаты") Тогда
		ПутьКДанным = 
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Организация
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.Подразделение
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.Сотрудник
			|	КОНЕЦ";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидМестаВыплаты") Тогда
		ПутьКДанным =
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Вид
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.Вид
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.Вид
			|	КОНЕЦ";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("МестоВыплаты") Тогда
		ПутьКДанным =
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.МестоВыплаты
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.МестоВыплаты
			|	КОНЕЦ";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОМестеВыплатыЗарплаты");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросМестВыплаты =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
		|	МестаВыплатыЗарплатыСотрудников.Вид КАК Вид,
		|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты КАК МестоВыплаты
		|ПОМЕСТИТЬ ВТМестаВыплатыЗарплатыСотрудников
		|{ВЫБРАТЬ
		|	Вид.* КАК ВидИсходный,
		|	МестоВыплаты.* КАК МестоВыплатыИсходное}
		|ИЗ
		|	ВТСотрудникиПериоды КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
		|		ПО ТаблицаОтборов.Сотрудник = МестаВыплатыЗарплатыСотрудников.Сотрудник
		|			И (МестаВыплатыЗарплатыСотрудников.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка))
		|{ГДЕ
		|	МестаВыплатыЗарплатыСотрудников.Вид.* КАК ВидИсходный,
		|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты.* КАК МестоВыплатыИсходное}";
	
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ВТСотрудникиПериоды", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ЗапросМестВыплаты, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросМестВыплаты);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
			|	ПО (ВЫБОР
			|			КОГДА КадроваяИсторияСотрудников.Организация ЕСТЬ NULL
			|					ТОГДА ВЫРАЗИТЬ(ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ГоловнаяОрганизация
			|			ИНАЧЕ КадроваяИсторияСотрудников.Организация
			|		КОНЕЦ = МестаВыплатыЗарплатыОрганизаций.Организация)
			|		И МестаВыплатыЗарплатыОрганизаций.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
			|	ПО (КадроваяИсторияСотрудников.Подразделение = МестаВыплатыЗарплатыПодразделений.Подразделение)
			|		И МестаВыплатыЗарплатыПодразделений.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТМестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
			|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = МестаВыплатыЗарплатыСотрудников.Сотрудник}");
		
	Иначе
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
			|	ПО (ВЫБОР
			|			КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL
			|					ТОГДА ВЫРАЗИТЬ(ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ГоловнаяОрганизация
			|			ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
			|		КОНЕЦ = МестаВыплатыЗарплатыОрганизаций.Организация)
			|		И МестаВыплатыЗарплатыОрганизаций.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
			|	ПО (ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = МестаВыплатыЗарплатыПодразделений.Подразделение)
			|		И МестаВыплатыЗарплатыПодразделений.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТМестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
			|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = МестаВыплатыЗарплатыСотрудников.Сотрудник}");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТМестаВыплатыЗарплатыСотрудников");
	
КонецПроцедуры

// Сведения контракта, договора сотрудника.

Функция ДобавитьПолеСведенийКонтрактаДоговораСотрудника(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияКонтрактаДоговораСотрудника(ИмяПоля) Тогда
		
		Если ВРег(ИмяПоля) = ВРег("КраткосрочныйТрудовойДоговор") Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ДатаПриема");
		КонецЕсли;
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияКонтрактаДоговораСотрудника", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийКонтрактаДоговораСотрудника(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияКонтрактаДоговораСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПредставительНанимателя")
		Или ИмяПоля = ВРег("ДолжностьПредставителяНанимателя")
		Или ИмяПоля = ВРег("ОснованиеПредставителя")
		Или ИмяПоля = ВРег("ВидАктаГосоргана")
		Или ИмяПоля = ВРег("ТрудовойДоговорДатаОкончания")
		Или ИмяПоля = ВРег("ДатаОкончания")
		Или ИмяПоля = ВРег("СрочныйДоговор")
		Или ИмяПоля = ВРег("СезонныйДоговор")
		Или ИмяПоля = ВРег("СрокЗаключенияДоговора")
		Или ИмяПоля = ВРег("ОборудованиеРабочегоМеста")
		Или ИмяПоля = ВРег("ИныеУсловияДоговора")
		Или ИмяПоля = ВРег("ОснованиеСрочногоДоговора")
		Или ИмяПоля = ВРег("КраткосрочныйТрудовойДоговор");
	
КонецФункции

Функция ПутьКДаннымСведенийКонтрактаДоговораСотрудника(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОснованиеПредставителя") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(СведенияКонтрактаДоговораСотрудника.ОснованиеПредставителяНанимателя" + " КАК СТРОКА(1024))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КраткосрочныйТрудовойДоговор") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА СведенияКонтрактаДоговораСотрудника.СрочныйДоговор = ЛОЖЬ
			|			ТОГДА ЛОЖЬ
			|		КОГДА СведенияКонтрактаДоговораСотрудника.ДатаОкончания ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		КОГДА СведенияКонтрактаДоговораСотрудника.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ЛОЖЬ
			|		КОГДА РАЗНОСТЬДАТ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, СведенияКонтрактаДоговораСотрудника.ДатаОкончания, МЕСЯЦ) -
			|				ВЫБОР КОГДА ДЕНЬ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) > ДЕНЬ(СведенияКонтрактаДоговораСотрудника.ДатаОкончания)
			|					ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ < 2
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИныеУсловияДоговора")
		Или ИмяПоляВВерхнемРегистре = ВРег("ОборудованиеРабочегоМеста") Тогда
		
		ПутьКДанным = "	ВЫРАЗИТЬ(СведенияКонтрактаДоговораСотрудника." + ИмяПоля + " КАК СТРОКА(1024))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорДатаОкончания")
		Или ИмяПоляВВерхнемРегистре = ВРег("ДатаОкончания") Тогда
		
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ДатаОкончания";
		
	Иначе
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКонтрактаДоговораСотрудника(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияКонтрактаДоговораСотрудника");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияКонтрактаДоговораСотрудника(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияКонтрактаДоговораСотрудника.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияКонтрактаДоговораСотрудника.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияКонтрактаДоговораСотрудника");
	
КонецПроцедуры

// Основные данные контрактов, договоров сотрудников.

Функция ДобавитьПолеОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ОсновныеДанныеКонтрактаДоговораСотрудника", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбОсновныхДанныхКонтрактовДоговоровСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДатаДоговораКонтракта")
		Или ИмяПоля = ВРег("НомерДоговораКонтракта")
		Или ИмяПоля = ВРег("ТрудовойДоговорДата")
		Или ИмяПоля = ВРег("ТрудовойДоговорНомер")
		Или ИмяПоля = ВРег("ТрудовойДоговорДатаНачала")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ПоступлениеНаСлужбуВпервые");
	
КонецФункции

Функция ПутьКДаннымСведенийОбОсновныхДанныхКонтрактовДоговоровСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ДатаДоговораКонтракта")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорДата") Тогда
		
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.ДатаДоговораКонтракта";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("НомерДоговораКонтракта")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорНомер") Тогда
		
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.НомерДоговораКонтракта";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорДатаНачала")
		Или ИмяПоляВВерхнемРегистре = ВРег("ДатаНачала") Тогда
		
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.ДатаНачала";
		
	Иначе
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТОсновныеДанныеКонтрактовДоговоровСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("ОсновныеДанныеКонтрактаДоговораСотрудника");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТОсновныеДанныеКонтрактовДоговоровСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеДанныеКонтрактовДоговоровСотрудников КАК ОсновныеДанныеКонтрактовДоговоровСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ОсновныеДанныеКонтрактовДоговоровСотрудников.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ОсновныеДанныеКонтрактовДоговоровСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОсновныеДанныеКонтрактовДоговоровСотрудников");
	
КонецПроцедуры

Процедура ДобавитьВКоллекциюКадровыеДанныеДляСведенийОКлассахУсловийТруда(ИсточникиДанных, Знач ИмяПоля) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ДобавитьВКоллекциюКадровыеДанныеДляСведенийОКлассахУсловийТруда(ИсточникиДанных);
	КонецЕсли;
	
	КадровыйУчетБазовый.ДобавитьВКоллекциюКадровыеДанныеДляСведенийОКлассахУсловийТруда(ИсточникиДанных, ИмяПоля);
	
КонецПроцедуры

Процедура ДобавитьСоединениеСКадровымиДанными(ОписательВременнойТаблицыОтборов, ЧастиЗапроса, ИмяПоляДолжность) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ДобавитьСоединениеСКадровымиДанными(ОписательВременнойТаблицыОтборов, ЧастиЗапроса);
	КонецЕсли;
	
	КадровыйУчетБазовый.ДобавитьСоединениеСКадровымиДанными(ОписательВременнойТаблицыОтборов, ЧастиЗапроса, ИмяПоляДолжность);
	
КонецПроцедуры

// Приостановление трудовых договоров

Функция ДобавитьКритерийПоискаПоСведениямОПриостановленииТрудовыхДоговоров(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОПриостановленииТрудовыхДоговоров(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ТрудовойДоговорПриостановлен") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Приостановлен";
			ИначеЕсли ИмяПоля = ВРег("ТрудовойДоговорПриостановленПериод") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("ТрудовойДоговорПриостановленОснование") Тогда
				УсловиеПоиска.ЛевоеЗначение = "ОснованиеПриостановления";
			ИначеЕсли ИмяПоля = ВРег("ТрудовойДоговорПриостановленПланируемаяДатаЗавершения") Тогда
				УсловиеПоиска.ЛевоеЗначение = "ПланируемаяДатаЗавершения";
			ИначеЕсли ИмяПоля = ВРег("ТрудовойДоговорПриостановленНомерПриказа") Тогда
				УсловиеПоиска.ЛевоеЗначение = "НомерПриказа";
			ИначеЕсли ИмяПоля = ВРег("ТрудовойДоговорПриостановленДатаПриказа") Тогда
				УсловиеПоиска.ЛевоеЗначение = "ДатаПриказа";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПриостановленияТрудовыхДоговоровКонтрактов", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ДобавитьПолеСведенийОПриостановленииТрудовыхДоговоров(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПриостановленииТрудовыхДоговоров(ИмяКадровыхДанных) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ПриостановленияТрудовыхДоговоровКонтрактов", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПриостановленииТрудовыхДоговоров(ИмяКадровыхДанных);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяКадровыхДанных);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПриостановленииТрудовыхДоговоров(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТрудовойДоговорПриостановлен")
		Или ИмяПоля = ВРег("ТрудовойДоговорПриостановленРегистратор")
		Или ИмяПоля = ВРег("ТрудовойДоговорПриостановленПериод")
		Или ИмяПоля = ВРег("ТрудовойДоговорПриостановленОснование")
		Или ИмяПоля = ВРег("ТрудовойДоговорПриостановленПланируемаяДатаЗавершения")
		Или ИмяПоля = ВРег("ТрудовойДоговорПриостановленНомерПриказа")
		Или ИмяПоля = ВРег("ТрудовойДоговорПриостановленДатаПриказа");
	
КонецФункции

Функция ПутьКДаннымСведенийОПриостановленииТрудовыхДоговоров(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорПриостановлен") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ПриостановленияТрудовыхДоговоровКонтрактов.Приостановлен, ЛОЖЬ)";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорПриостановленРегистратор")Тогда
		ПутьКДанным = "	ПриостановленияТрудовыхДоговоровКонтрактов.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорПриостановленПериод")Тогда
		ПутьКДанным = "	ПриостановленияТрудовыхДоговоровКонтрактов.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорПриостановленОснование")Тогда
		ПутьКДанным = "	ПриостановленияТрудовыхДоговоровКонтрактов.ОснованиеПриостановления";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорПриостановленПланируемаяДатаЗавершения")Тогда
		ПутьКДанным = "	ПриостановленияТрудовыхДоговоровКонтрактов.ПланируемаяДатаЗавершения";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорПриостановленНомерПриказа")Тогда
		ПутьКДанным = "	ПриостановленияТрудовыхДоговоровКонтрактов.НомерПриказа";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорПриостановленДатаПриказа")Тогда
		ПутьКДанным = "	ПриостановленияТрудовыхДоговоровКонтрактов.ДатаПриказа";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТПриостановленияТрудовыхДоговоровКонтрактов(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТПриостановленияТрудовыхДоговоровКонтрактов = "ВТПриостановленияТрудовыхДоговоровКонтрактов")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПриостановленияТрудовыхДоговоровКонтрактов", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПриостановленияТрудовыхДоговоровКонтрактов", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТПриостановленияТрудовыхДоговоровКонтрактов);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПриостановленииТрудовыхДоговоров(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("ПриостановленияТрудовыхДоговоровКонтрактов");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТПриостановленияТрудовыхДоговоровКонтрактов(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов,
		ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПриостановленияТрудовыхДоговоровКонтрактов КАК ПриостановленияТрудовыхДоговоровКонтрактов
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПриостановленияТрудовыхДоговоровКонтрактов.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ПриостановленияТрудовыхДоговоровКонтрактов.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПриостановленияТрудовыхДоговоровКонтрактов");
	
КонецПроцедуры

// Сведения об условиях договоров опеки

Функция ПутьКДаннымСведенийОбУсловияхДоговоровОпеки(ИмяПоля) Экспорт 
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяОпекуномПенсионером") Тогда
		ПутьКДанным = "СведенияОбУсловияхДоговоровОпеки.ПолучаетСтраховуюПенсию";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУсловияхДоговоровОпеки(Запрос, ТолькоРазрешенные, 
			ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных) Экспорт 
	
	Если ИсточникиДанных.Получить("СведенияОбУсловияхДоговоровОпеки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(УсловияДоговораОпеки.Период) КАК МаксимальныйПериод
		|ПОМЕСТИТЬ ВТУсловияДоговораОпекиМаксимальныеПериоды
		|ИЗ
		|	ВТОтборовСотрудников КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораОпеки КАК УсловияДоговораОпеки
		|		ПО ТаблицаОтборов.Сотрудник = УсловияДоговораОпеки.Сотрудник
		|			И ТаблицаОтборов.Период >= УсловияДоговораОпеки.ДатаНачала
		|			И ТаблицаОтборов.Период <= УсловияДоговораОпеки.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияДоговораОпекиМаксимальныеПериоды.Период КАК Период,
		|	УсловияДоговораОпекиМаксимальныеПериоды.Сотрудник КАК Сотрудник,
		|	УсловияДоговораОпеки.ПолучаетСтраховуюПенсию КАК ПолучаетСтраховуюПенсию
		|ПОМЕСТИТЬ ВТУсловияДоговораОпеки
		|ИЗ
		|	ВТУсловияДоговораОпекиМаксимальныеПериоды КАК УсловияДоговораОпекиМаксимальныеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораОпеки КАК УсловияДоговораОпеки
		|		ПО УсловияДоговораОпекиМаксимальныеПериоды.Сотрудник = УсловияДоговораОпеки.Сотрудник
		|			И УсловияДоговораОпекиМаксимальныеПериоды.МаксимальныйПериод = УсловияДоговораОпеки.Период
		|			И (УсловияДоговораОпекиМаксимальныеПериоды.Период МЕЖДУ УсловияДоговораОпеки.ДатаНачала И УсловияДоговораОпеки.ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ЕСТЬNULL(УсловияДоговораОпеки.ПолучаетСтраховуюПенсию, ЛОЖЬ)) КАК ПолучаетСтраховуюПенсию
		|ПОМЕСТИТЬ ВТСведенияОбУсловияхДоговоровОпеки
		|ИЗ
		|	ВТОтборовСотрудников КАК ТаблицаОтборов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияДоговораОпеки КАК УсловияДоговораОпеки
		|		ПО ТаблицаОтборов.Сотрудник = УсловияДоговораОпеки.Сотрудник
		|			И ТаблицаОтборов.Период = УсловияДоговораОпеки.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУсловияДоговораОпеки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУсловияДоговораОпекиМаксимальныеПериоды";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбУсловияхДоговоровОпеки КАК СведенияОбУсловияхДоговоровОпеки
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОбУсловияхДоговоровОпеки.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОбУсловияхДоговоровОпеки.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОбУсловияхДоговоровОпеки");
	
КонецПроцедуры

// Сведения мест работы

Функция ДобавитьПолеСведенийМестРаботыСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = КадровыйУчетБазовый.ДобавитьПолеСведенийМестРаботыСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных);
	Если ДобавленоПолеСведений Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории") Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "СведенияОТерриторияхСотрудников", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция ПутьКДаннымСведенийМестРаботыСотрудников(Знач ИмяПоля) Экспорт
	
	ПутьКДаннымКадровойИстории = КадровыйУчетБазовый.ПутьКДаннымСведенийМестРаботыСотрудников(ИмяПоля);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории") Тогда
		Возврат ПутьКДаннымКадровойИстории;
	КонецЕсли;
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	Если ИмяПоляВВерхнемРегистре = ВРег("РайонныйКоэффициент") Тогда
		ПутьКДанным = СтрЗаменить(
			"	ВЫБОР КОГДА
			|		НЕ СведенияОТерриторияхСотрудников.Территория ЕСТЬ NULL
			|		И СведенияОТерриторияхСотрудников.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) ТОГДА
			|			СведенияОТерриторияхСотрудников.Территория.РайонныйКоэффициент
			|		ИНАЧЕ
			|		&ПутьКДаннымКадровойИстории	
			|	КОНЕЦ",
			"&ПутьКДаннымКадровойИстории", ПутьКДаннымКадровойИстории);
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РайонныйКоэффициентРФ") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории") Тогда
			ПутьКДанным = СтрЗаменить(
				"	ВЫБОР КОГДА
				|		НЕ СведенияОТерриторияхСотрудников.Территория ЕСТЬ NULL
				|		И СведенияОТерриторияхСотрудников.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) ТОГДА
				|			СведенияОТерриторияхСотрудников.Территория.РайонныйКоэффициентРФ
				|		ИНАЧЕ
				|		&ПутьКДаннымКадровойИстории	
				|	КОНЕЦ",
				"&ПутьКДаннымКадровойИстории", ПутьКДаннымКадровойИстории);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения об учете затрат

Функция ДобавитьПолеСведенийОбУчетеЗатрат(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУчетеЗатрат", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбУчетеЗатрат(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УчетЗатратПериодРегистрации")
		Или ИмяПоля = ВРег("СпособОтраженияЗарплатыВБухучете")
		Или ИмяПоля = ВРег("ОтношениеКЕНВД")
		Или ИмяПоля = ВРег("СтатьяФинансирования")
		Или ИмяПоля = ВРег("УчетЗатратДокументОснование");
		
КонецФункции

Функция ПутьКДаннымСведенийОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратПериодРегистрации") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратДокументОснование") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.Регистратор";
	Иначе
		ПутьКДанным = "	БухучетЗарплатыСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУчетеЗатрат(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
		
			Если ИмяПоля = ВРег("УчетЗатратПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
				
			ИначеЕсли ИмяПоля = ВРег("УчетЗатратДокументОснование") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
				
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.БухучетЗарплатыСотрудников", УсловиеПоиска);
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУчетеЗатрат(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУчетеЗатрат") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбУчетеЗатрат КАК БухучетЗарплатыСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = БухучетЗарплатыСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = БухучетЗарплатыСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОбУчетеЗатрат");
	
КонецПроцедуры

Функция ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОбУчетеЗатрат = "ВТСведенияОбУчетеЗатрат")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("БухучетЗарплатыСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"БухучетЗарплатыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОбУчетеЗатрат);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	ЭтоНачальноеЗаполнениеИлиОбновление = ЗарплатаКадрыРасширенныйПовтИсп.ЭтоНачальноеЗаполнениеИлиОбновление();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыСтажа.СоздатьВидыСтажаПоНастройкам";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеЗвания)
		И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеСтепени) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьКлассификаторы";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЭтоНачальноеЗаполнениеИлиОбновление Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "КадровыйУчетРасширенный.УстановитьФОИспользоватьКадровыйУчет";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.РазрядыКатегорииДолжностей.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЭтоНачальноеЗаполнениеИлиОбновление Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "КадровыйУчетРасширенный.УстановитьНастройкиКадровогоУчетаПоУмолчанию";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.32";
	Обработчик.Процедура = "Документы.Увольнение.ЗаполнитьПериодыРегистрацииНачислений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("db71dcad-bf23-43ab-957e-f6e8df6236b9");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение периодов регистрации строк начислений в документах ""Увольнение"".';
									|en = 'Fill in registration periods of earnings lines in the Termination of employment documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.32";
	Обработчик.Процедура = "Документы.УвольнениеСписком.ЗаполнитьПериодыРегистрацииНачислений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("049e6ec2-026e-4911-a04b-a397b04cce3a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение периодов регистрации строк начислений в документах ""Увольнение списком"".';
									|en = 'Fill in registration periods of accrual lines in the Multiple terminations of employment documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.33";
	Обработчик.Процедура = "Документы.Увольнение.УстановитьФлагНачислитьЗарплату";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("84f654ea-9f85-4e29-96c9-09d86d10bc87");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака начисления зарплаты в документах ""Увольнение"".';
									|en = 'Populate the salary accrual flag in the Termination of employment documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.33";
	Обработчик.Процедура = "Документы.УвольнениеСписком.УстановитьФлагНачислитьЗарплату";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c68fca4b-da31-4385-8b0d-be8e08e556f0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака начисления зарплаты в документах ""Увольнение списком"".';
									|en = 'Fill in salary accrual flag in the ""Multiple terminations of employment"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.5";
	Обработчик.Процедура = "Документы.НачальнаяШтатнаяРасстановка.ЗаполнитьНеподтвержденныеДанные";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9bb1325b-82c9-4270-945d-d5ae3a4979e2");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение данных кадровой истории в документах ""Начальная штатная расстановка"".';
									|en = 'Fill in data of employee record in the ""Initial staff allocation"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4628bf46-3f3e-46b5-8b6a-23e9c618b89b");
	Обработчик.Процедура = "Документы.ПереводКДругомуРаботодателю.ЗаполнитьНовыхСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.11";
	Обработчик.Процедура = "Документы.НачальнаяШтатнаяРасстановка.ЗаполнитьНеподтвержденныеДанныеСостоянийСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a23b4274-bebd-46c9-8038-f6a46309dbcf");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение данных состояний сотрудников в документах ""Начальная штатная расстановка"".';
									|en = 'Fill in data of employee states in the ""Initial staff allocation"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.11";
	Обработчик.Процедура = "Документы.НачальнаяШтатнаяРасстановка.ЗаполнитьНеподтвержденныеДанныеГрафиковРаботы";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6ded4c5a-6eba-4b8a-8779-2f7be5ec014c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение данных графиков работы сотрудников в документах ""Начальная штатная расстановка"".';
									|en = 'Fill in data of employee work schedule in the ""Initial staff allocation"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f4d3f96b-d113-468b-bb6b-c9e038a78d2c");
	Обработчик.Процедура = "Документы.ВосстановлениеВДолжности.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Восстановление в должности"".';
									|en = 'Fills in closing dates of editing the ""Reinstatement"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4aa11f46-4058-42c2-be33-0b5db95de358");
	Обработчик.Процедура = "Документы.ИзменениеГрафикаРаботыСписком.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Изменение графика работы списком"".';
									|en = 'Fills in closing dates of editing the ""Work schedule change as a list"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f3f59c54-a9ca-4f7c-a945-3e31bed5e229");
	Обработчик.Процедура = "Документы.КадровыйПереводСписком.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Кадровый перевод списком"".';
									|en = 'Fills in closing dates of editing the ""Employee transfer as a list"" document.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6bd6ece9-bd88-45ca-8298-042635cad58c");
	Обработчик.Процедура = "Документы.НазначениеПодработки.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Назначение подработки"".';
									|en = 'Fills in closing dates of editing the ""Side job assignment"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dd8710e4-c334-43a2-9925-ad6c78036bf0");
	Обработчик.Процедура = "Документы.ОтменаСовмещения.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Отмена совмещения"".';
									|en = 'Fills in closing dates of editing the ""Secondary employment cancellation"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("191b8d44-b12d-4bc9-b33e-91b309f7012a");
	Обработчик.Процедура = "Документы.ПеремещениеВДругоеПодразделение.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Перемещение в другое подразделение"".';
									|en = 'Fills in closing dates of editing the ""Transfer to another business unit"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e9681d8d-637c-473d-9362-b8c53f1ee873");
	Обработчик.Процедура = "Документы.ПрекращениеПодработки.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""ПрекращениеПодработки"".';
									|en = 'Fills in closing dates of editing the ""Side job termination"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("162c98a1-09d1-4094-b4a1-61285bdaefaf");
	Обработчик.Процедура = "Документы.ПриемНаРаботуСписком.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Прием на работу списком"".';
									|en = 'Fills in closing dates of editing the ""Hiring as a list"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5287a15a-596f-422f-bd66-10dacf9e25bd");
	Обработчик.Процедура = "Документы.Совмещение.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Совмещение должностей"".';
									|en = 'Fills in closing dates of editing the ""Holding multiple positions"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ccb05ba5-8c03-4c83-93eb-eb86a8344d04");
	Обработчик.Процедура = "Документы.УвольнениеСписком.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Увольнение списком"".';
									|en = 'Fills in closing dates of editing the ""Termination of employment as a list"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c45dd27d-7e77-4688-b1d6-ab251b8e31d5");
	Обработчик.Процедура = "РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц.ЗаполнитьИдентификаторыЗаписей";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет идентификаторы записей регистра сведений ""Трудовая деятельность"".';
									|en = 'Fills in identifiers of data register records ""Labour activity"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f3d99636-d7d0-4885-bc70-785c19904bf6");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("45a6e013-5701-4705-940c-dc467ba1f3ef");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписанияИспр";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания (испр.)"".';
									|en = 'Populates ""Occupied positions of headcount (corr.)"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("80dabf0a-2a30-476d-b380-74038e916aa5");
	Обработчик.Процедура = "Документы.ОтменаСовмещения.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("17b8ae11-8682-420d-8fdd-ab7281afc955");
	Обработчик.Процедура = "Документы.Совмещение.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a359fd4f-3606-463f-9eb9-264887b714de");
	Обработчик.Процедура = "Документы.БольничныйЛист.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("44b58857-4d74-4f03-8659-7967854d4f55");
	Обработчик.Процедура = "Документы.Командировка.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("05fe7e8f-bf50-4a82-8cab-b369f8ac91b5");
	Обработчик.Процедура = "Документы.Отгул.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f8725537-7edf-47b1-816e-a89adde837db");
	Обработчик.Процедура = "Документы.Отпуск.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c1f4c5bc-9759-4d03-90ef-77bcda8fd784");
	Обработчик.Процедура = "Документы.ОтпускБезСохраненияОплаты.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a08dc784-b5c4-45c1-be8e-5955e0c14540");
	Обработчик.Процедура = "Документы.ОтпускПоУходуЗаРебенком.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("480f7fbc-9c1d-4d38-91ee-dd01e573a077");
	Обработчик.Процедура = "Документы.ПрогулНеявка.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("70afabc2-d476-46ae-89f9-9146e0965665");
	Обработчик.Процедура = "Документы.ПрогулНеявкаСписком.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2511b904-3d9b-4ce1-b657-3151b540e4c6");
	Обработчик.Процедура = "Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("790b1347-8af1-4b9e-aa96-5431a7fd70be");
	Обработчик.Процедура = "Документы.ВозвратИзОтпускаПоУходуЗаРебенком.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.25";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c036124e-3792-4003-a15b-48256e88f219");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписанияУволенныхСовместителей";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.101";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0e2ffda3-a6b1-491e-89b6-b8053e15088d");
	Обработчик.Процедура = "Документы.Увольнение.ЗаполнитьУвольнениеСОсновногоМестаРаботы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет признак увольнения с основного места работы в документах ""Увольнение"".';
									|en = 'Populates flag of dismissal from mail place of work in ""Employment termination"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.101";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1d264285-9746-4f4a-848d-bef5b27cf1b6");
	Обработчик.Процедура = "Документы.УвольнениеСписком.ЗаполнитьУвольнениеСОсновногоМестаРаботы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет признак увольнения с основного места работы в документах ""Увольнение списком"".';
									|en = 'Populates flag of dismissal from mail place of work in ""Employment termination by list"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e69d7bcc-dbba-48fd-810d-2e38636b2ba1");
	Обработчик.Процедура = "Документы.НачальнаяШтатнаяРасстановка.ПерезаполнитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.27";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПерезаполнитьДанныеДляПодбораСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dbc70431-9dbd-4813-bf1e-4e196e8e9a20");
	Обработчик.Процедура = "Документы.БольничныйЛист.ИсправитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет движения по регистру сведений ""Занятость позиций штатного расписания"", документов ""Больничный лист"".';
									|en = 'Re-populates ""Occupied positions of headcount (corr.)"" information register records, ""Sick leave"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("59ce8d7d-549c-4749-9cd3-8c238311cd8f");
	Обработчик.Процедура = "Документы.Командировка.ИсправитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет движения по регистру сведений ""Занятость позиций штатного расписания"", документов ""Командировка"".';
									|en = 'Re-populates ""Occupied positions of headcount (corr.)"" information register records, ""Business trip"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ad24b7aa-f45d-4ab2-8651-00b6b36039c4");
	Обработчик.Процедура = "Документы.Отпуск.ИсправитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет движения по регистру сведений ""Занятость позиций штатного расписания"", документов ""Отпуск"".';
									|en = 'Re-populates ""Occupied positions of headcount (corr.)"" information register records, ""Leave"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b1e61701-f721-4fc6-96bd-e453b4f60c1d");
	Обработчик.Процедура = "Документы.ОтпускБезСохраненияОплаты.ИсправитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет движения по регистру сведений ""Занятость позиций штатного расписания"", документов ""Отпуск без сохранения оплаты"".';
									|en = 'Re-populates ""Occupied positions of headcount (corr.)"" information register records, ""Unpaid leave"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("309b8223-0dd0-4de9-ba7b-635cc8704036");
	Обработчик.Процедура = "Документы.ПрогулНеявка.ИсправитьДвиженияЗанятостьПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет движения по регистру сведений ""Занятость позиций штатного расписания"", документов ""Отсутствие (болезнь, прогул, неявка)"".';
									|en = 'Re-populates ""Occupied positions of headcount (corr.)"" information register records, ""Absence (sick leave, unauthorized absence)"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.12.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("583de8c0-1800-47e3-b075-2c2609a02748");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ДозаполнитьДвиженияЗанятостьПозицийШтатногоРасписанияУвольненийССовместителями";
	Обработчик.Комментарий = НСтр("ru = 'Дозаполняет движения по регистру сведений ""Занятость позиций штатного расписания"" документов ""Увольнение"".';
									|en = 'Fills in the the ""Employment of staff positions"" information register records of the ""Dismissal"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.12.55";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e03e3b9-98fd-4018-b3c5-f5b3f9fa306b");
	Обработчик.Процедура = "Документы.НачальнаяШтатнаяРасстановка.ЗаполнитьВременныеОсвобожденияСтавок";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет временное освобождение ставок в движениях по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Fills in the temporary release of rates in the ""Employment of staff positions"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.12.56";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b944a7f6-d248-4f29-ace5-ad91bf0cb5ae");
	Обработчик.Процедура = "Документы.НачальнаяШтатнаяРасстановка.ПеренестиВременныеОсвобожденияСтавок";
	Обработчик.Комментарий = НСтр("ru = 'Переносит данные временно освобожденных ставок.';
									|en = 'Transfers data of temporarily released rates.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.211";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("af5a8a13-c934-4f54-9752-27f94e5c4606");
	Обработчик.Процедура = "Документы.Увольнение.ЗаполнитьПредоставлятьМероприятияТДВЭлектроннойФорме";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет признак предоставления мероприятий в электронном виде в документах ""Увольнение"".';
									|en = 'Populates the flag of the electronic events provision in the ""Termination of employment"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.211";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("17a3752b-ce8e-4d1f-914c-a37b247ecd65");
	Обработчик.Процедура = "Документы.УвольнениеСписком.ЗаполнитьПредоставлятьМероприятияТДВЭлектроннойФорме";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет признак предоставления мероприятий в электронном виде в документах ""Увольнение списком"".';
									|en = 'Populates the flag of the electronic events provision in the ""Multiple terminations of employment"" documents.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОтраслиНауки) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.51";
		Обработчик.Процедура = "Справочники.ОтраслиНауки.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеСтепени) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.52";
		Обработчик.Процедура = "Справочники.УченыеСтепени.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.15.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("35cfe2ee-e86f-11ea-80d3-4cedfb43b140");
	Обработчик.Процедура = "ГруппыСотрудников.ВосстановлениеПараметровДинамическихГрупп";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет отборы динамических групп сотрудников.';
									|en = 'Corrects filters of employees dynamic groups.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.34";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f50c82b4-f460-11eb-834d-f82ff4b921a8");
	Обработчик.Процедура       = "Справочники.РодственникиФизическихЛиц.ЗаполнитьФИО";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение ФИО родственников физических лиц.';
										|en = 'Fill in full names of the relatives of individuals.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.34";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ef274df6-0be8-11ec-80fb-4cedfb43b11a");
	Обработчик.Процедура       = "Справочники.РодственникиФизическихЛиц.ЗаполнитьСНИЛСКодСвязи";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение СНИЛС и кода родственной связи родственников физических лиц.';
										|en = 'Fill in SNILS and the relationship code of the relatives of individuals.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеЗвания) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.25.7";
		Обработчик.Процедура = "Справочники.УченыеЗвания.ЗаполнитьКодыЕФС1";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКлассификаторы() Экспорт
	
	Справочники.УченыеЗвания.НачальноеЗаполнение();
	Справочники.ОтраслиНауки.НачальноеЗаполнение();
	Справочники.УченыеСтепени.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура УстановитьФОИспользоватьКадровыйУчет() Экспорт
	
	Если Константы.ИспользоватьКадровыйУчет.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	Набор.Записать();
	
	// ERP начало: проект 4142
	//Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	// ERP конец
	
КонецПроцедуры

Процедура ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц) Экспорт
	
	КадровыйУчетБазовый.ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Плановые удержания
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПлановыеУдержания.*
		|ИЗ
		|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПлановыеУдержания.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПлановыеУдержания.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
	// Применение плановых начислений.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПрименениеПлановыхНачислений.*
		|ИЗ
		|	РегистрСведений.ПрименениеПлановыхНачислений КАК ПрименениеПлановыхНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПрименениеПлановыхНачислений.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПрименениеПлановыхНачислений.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьНастройкиКадровогоУчетаПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.*
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запись = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
		Запись.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОтбораПоКатегорииСтажа(КатегорияСтажа) Экспорт 
	
	Если КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Общий") Тогда 
		Возврат "ОбщийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Северный") Тогда 
		Возврат "СеверныйСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ВыслугаЛет") Тогда 
		Возврат "СтажНаНадбавкуЗаВыслугуЛетМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Непрерывный") Тогда 
		Возврат "НепрерывныйСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ОбщийНаучноПедагогический") Тогда 
		Возврат "ОбщийНаучноПедагогическийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Педагогический") Тогда 
		Возврат "ПедагогическийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Прочее") Тогда 
		Возврат "ПрочийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Страховой") Тогда 
		Возврат "СтраховойСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.РасширенныйСтраховой") Тогда 
		Возврат "РасширенныйСтраховойСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе") Тогда 
		Возврат "ВыслугаЛетНаГосударственнойСлужбеМесяцев";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	Для каждого ИмяКадровыхДанных Из КадровыеДанные Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			 Продолжить;
		ИначеЕсли ДобавитьПоляСведенийОСтажахФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОКлассномЧинеРанге(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОВоинскомСпециальномЗвании(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОКонтрактахВоеннослужащих(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
				
			Продолжить;
			
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеФизическихЛиц", ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц);
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных <> Неопределено Тогда
		КадровыйУчетБазовый.ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, ИменаБазовыхКадровыхДанных, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	КадровыйУчетБазовый.ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТСведенияОСтажахФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПараметрахИсчисленияСеверногоСтажа(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОВоинскихСпециальныхЗваниях(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОКонтрактахВоеннослужащих(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	Для каждого ИмяКадровыхДанных Из КадровыеДанные Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			 Продолжить;
		ИначеЕсли ДобавитьПолеСведенийОбУченыхСтепеняхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУченыхЗванияхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОЛьготахГражданПодвергшихсяРадиации(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПочетныхЗванияхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОГосударственныхСлужащих(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеВключаетсяВРеестрГосслужащих(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			Продолжить;
			
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеПостоянныеКадровыеДанныеФизическихЛиц", ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеПостоянныеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных <> Неопределено Тогда
		КадровыйУчетБазовый.ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ИменаБазовыхКадровыхДанных, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных) Экспорт
	
	КадровыйУчетБазовый.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТСведенияОбУченыхСтепеняхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбУченыхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаСведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПочетныхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОГосударственныхСлужащих(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенийРеестраГосслужащих(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОКЗ(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.ОКПДТРКод КАК ОКПДТРКод,
	|	Должности.ОКПДТРКЧ КАК ОКПДТРКЧ
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.ОКПДТРКод <> """"
	|	И Должности.ОКПДТРКЧ <> """"
	|	И Должности.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	
	Если Запрос.Выполнить().Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	МакетОКПДТРДолжности = ПолучитьОбщийМакет("КлассификаторОКПДТРДолжности");
	ТаблицаОКПДТРДолжности = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетОКПДТРДолжности.ПолучитьТекст()).Данные;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		МакетОКПДТРПрофессии = ПолучитьОбщийМакет("КлассификаторОКПДТРПрофессии");
		ТаблицаОКПДТРПрофессии = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетОКПДТРПрофессии.ПолучитьТекст()).Данные;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Должность = Выборка.Должность.ПолучитьОбъект();
		СтрокаОКПДТРДолжности = ТаблицаОКПДТРДолжности.Найти(Выборка.ОКПДТРКод + Выборка.ОКПДТРКЧ, "Code");
		Если СтрокаОКПДТРДолжности <> Неопределено Тогда
			Должность.ОКЗКод = СтрокаОКПДТРДолжности.OKZ;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Должность);
		Иначе
			СтрокаОКПДТРПрофессии = ТаблицаОКПДТРПрофессии.Найти(Выборка.ОКПДТРКод + Выборка.ОКПДТРКЧ, "Code");
			Если СтрокаОКПДТРПрофессии <> Неопределено Тогда
				Должность.ОКЗКод = СтрокаОКПДТРПрофессии.OKZ;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Должность);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти


// Возвращает есть ли среди сотрудников организации такие, с которыми заключено более одного
// договора (трудового или ГПХ).
//
// Параметры:
//	Организация						- СправочникСсылка.Организации
//	НачалоПериода					- Дата
//	ОкончаниеПериода				- Дата
//	СписокФизическихЛиц				- Массив элементов СправочникСсылка.ФизическиеЛица
//	РаботникиПоДоговорамГПХ			- Булево, в результате будут учтены действующие договоры ГПХ
//	ОтбиратьПоГоловнойОрганизации	- Булево, поиск договоров будет осуществляться в рамках головной организации.
//
// Возвращаемое значение:
//	Булево, Истина - есть сотрудники с несколькими трудовыми договорами.
//
Функция ЕстьСотрудникиСНесколькимиДоговорами(Организация, НачалоПериода, ОкончаниеПериода = '00010101', СписокФизическихЛиц = Неопределено, РаботникиПоДоговорамГПХ = Истина, ОтбиратьПоГоловнойОрганизации = Истина) Экспорт
	
	МассивСотрудников = ФизическиеЛицаСНесколькимиДоговорами(Организация, НачалоПериода, ОкончаниеПериода, СписокФизическихЛиц, РаботникиПоДоговорамГПХ, ОтбиратьПоГоловнойОрганизации);
	Возврат МассивСотрудников.Количество() > 0;
	
КонецФункции

Процедура ПриДобавленииРазделенныхПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт 
	
	ВосстановитьПрисоединенныеФайлы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИсправлениеПроблемыСПрисоединеннымиФайлами", "ВосстановитьПрисоединенныеФайлы", Ложь, , ИмяПользователя());
	Параметры.Вставить("ВосстановитьПрисоединенныеФайлы", ВосстановитьПрисоединенныеФайлы);
	
	Если ВосстановитьПрисоединенныеФайлы Тогда 
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("ИсправлениеПроблемыСПрисоединеннымиФайлами", "ВосстановитьПрисоединенныеФайлы", ИмяПользователя());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРегистрТекущиеКадровыеДанныеПоИзменениямКадровойИстории(НаборЗаписей, ИзменившиесяДанныеКадровойИстории)
	
	КадровыйУчетБазовый.ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей);
	
	ФизическиеЛицаОрганизации = Новый ТаблицаЗначений;
	ФизическиеЛицаОрганизации.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизическиеЛицаОрганизации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФизическиеЛицаОрганизации.Колонки.Добавить("Добавить", Новый ОписаниеТипов("Булево"));
	ФизическиеЛицаОрганизации.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	СотрудникиКОбновлениюРолей = Новый ТаблицаЗначений;
	СотрудникиКОбновлениюРолей.Колонки.Добавить("Сотрудник");
	СотрудникиКОбновлениюРолей.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
	
	Для Каждого ИзменившиесяДанныеСтрокаИзменений Из ИзменившиесяДанныеКадровойИстории Цикл
		
		Если ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
			Или ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
			Или ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
			Или ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные Тогда
			
			Если ЗначениеЗаполнено(ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеВидСобытия) <>
				ЗначениеЗаполнено(ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия) Тогда
				
				НоваяСтрокаСотрудника = СотрудникиКОбновлениюРолей.Добавить();
				НоваяСтрокаСотрудника.Сотрудник = ИзменившиесяДанныеСтрокаИзменений.Сотрудник;
				
				Если ЗначениеЗаполнено(ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия) Тогда
					НоваяСтрокаСотрудника.Счетчик = 1;
				Иначе
					НоваяСтрокаСотрудника.Счетчик = -1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеОрганизация <> ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеОрганизация Тогда
			
			Если ЗначениеЗаполнено(ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеОрганизация) Тогда
				
				СтруктураПоиска = Новый Структура("ФизическоеЛицо,Организация",
					ИзменившиесяДанныеСтрокаИзменений.ФизическоеЛицо, ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеОрганизация);
				
				НайденныеСтроки = ФизическиеЛицаОрганизации.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					СтрокаФизическиеЛицаОрганизации = ФизическиеЛицаОрганизации.Добавить();
					СтрокаФизическиеЛицаОрганизации.ФизическоеЛицо = СтруктураПоиска.ФизическоеЛицо;
					СтрокаФизическиеЛицаОрганизации.Организация = СтруктураПоиска.Организация;
				Иначе
					СтрокаФизическиеЛицаОрганизации = НайденныеСтроки[0];
				КонецЕсли;
				
				Если СтрокаФизическиеЛицаОрганизации.Удалить Тогда
					СтрокаФизическиеЛицаОрганизации.Удалить = Ложь;
				Иначе
					СтрокаФизическиеЛицаОрганизации.Добавить = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеОрганизация) Тогда
				
				СтруктураПоиска = Новый Структура("ФизическоеЛицо,Организация",
					ИзменившиесяДанныеСтрокаИзменений.ФизическоеЛицо, ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеОрганизация);
				
				НайденныеСтроки = ФизическиеЛицаОрганизации.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					СтрокаФизическиеЛицаОрганизации = ФизическиеЛицаОрганизации.Добавить();
					СтрокаФизическиеЛицаОрганизации.ФизическоеЛицо = СтруктураПоиска.ФизическоеЛицо;
					СтрокаФизическиеЛицаОрганизации.Организация = СтруктураПоиска.Организация;
				Иначе
					СтрокаФизическиеЛицаОрганизации = НайденныеСтроки[0];
				КонецЕсли;
				
				Если СтрокаФизическиеЛицаОрганизации.Добавить Тогда
					СтрокаФизическиеЛицаОрганизации.Добавить = Ложь;
				Иначе
					СтрокаФизическиеЛицаОрганизации.Удалить = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Установка ролей сотрудников
	Если СотрудникиКОбновлениюРолей.Количество() > 0 Тогда
		
		СотрудникиКОбновлениюРолей.Свернуть("Сотрудник", "Счетчик");
		Для Каждого СтрокаСотрудника Из СотрудникиКОбновлениюРолей Цикл
			
			Если СтрокаСотрудника.Счетчик <> 0 Тогда
				
				НаборЗаписейРолиСотрудников = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
				НаборЗаписейРолиСотрудников.Отбор.Сотрудник.Установить(СтрокаСотрудника.Сотрудник);
				НаборЗаписейРолиСотрудников.Прочитать();
				
				ЗаписатьНаборЗаписей = Ложь;
				ЗаписьРаботник = Неопределено;
				Для Каждого Запись Из НаборЗаписейРолиСотрудников Цикл
					
					Если Запись.РольСотрудника = Перечисления.РолиСотрудников.Работник Тогда
						
						ЗаписатьНаборЗаписей = Истина;
						
						ЗаписьРаботник = Запись;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаСотрудника.Счетчик <= 0 Тогда
					
					Если ЗаписьРаботник <> Неопределено Тогда
						НаборЗаписейРолиСотрудников.Удалить(ЗаписьРаботник);
					КонецЕсли;
					
				Иначе
					
					Если ЗаписьРаботник = Неопределено Тогда
						
						ЗаписатьНаборЗаписей = Истина;
						
						Запись = НаборЗаписейРолиСотрудников.Добавить();
						Запись.Сотрудник = СтрокаСотрудника.Сотрудник;
						Запись.РольСотрудника = Перечисления.РолиСотрудников.Работник;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗаписатьНаборЗаписей Тогда
					НаборЗаписейРолиСотрудников.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка ролей физических лиц
	Если ФизическиеЛицаОрганизации.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ФизическиеЛицаОрганизации", ФизическиеЛицаОрганизации);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ФизическиеЛицаОрганизации.Организация КАК Организация,
			|	ФизическиеЛицаОрганизации.Добавить КАК Добавить,
			|	ФизическиеЛицаОрганизации.Удалить КАК Удалить
			|ПОМЕСТИТЬ ВТФизическиеЛицаОрганизации
			|ИЗ
			|	&ФизическиеЛицаОрганизации КАК ФизическиеЛицаОрганизации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ФизическиеЛицаОрганизации.Добавить) КАК Добавить,
			|	МАКСИМУМ(ФизическиеЛицаОрганизации.Удалить) КАК Удалить
			|ИЗ
			|	ВТФизическиеЛицаОрганизации КАК ФизическиеЛицаОрганизации";
		
		ВыборкаДобавитьУдалить = Запрос.Выполнить().Выбрать();
		ВыборкаДобавитьУдалить.Следующий();
		
		Если ВыборкаДобавитьУдалить.Добавить Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ФизическиеЛицаОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛицаОрганизации.Организация КАК Организация
				|ИЗ
				|	ВТФизическиеЛицаОрганизации КАК ФизическиеЛицаОрганизации
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
				|		ПО ФизическиеЛицаОрганизации.ФизическоеЛицо = РолиФизическихЛиц.ФизическоеЛицо
				|			И ФизическиеЛицаОрганизации.Организация = РолиФизическихЛиц.Организация
				|			И (РолиФизическихЛиц.Роль = ЗНАЧЕНИЕ(Перечисление.РолиФизическихЛиц.Сотрудник))
				|ГДЕ
				|	ФизическиеЛицаОрганизации.Добавить
				|	И РолиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					УстановитьРольФизическогоЛицаВОрганизации(Выборка.ФизическоеЛицо, Выборка.Организация, Истина);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Очистка роли у физических лиц с единственным сотрудником
		Если ВыборкаДобавитьУдалить.Удалить Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ФизическиеЛицаОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛицаОрганизации.Организация КАК Организация,
				|	ВЫБОР
				|		КОГДА РолиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЕстьРоль,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сотрудники.Ссылка) КАК КоличествоСотрудников
				|ПОМЕСТИТЬ ВТУдаляемыеРоли
				|ИЗ
				|	ВТФизическиеЛицаОрганизации КАК ФизическиеЛицаОрганизации
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
				|		ПО ФизическиеЛицаОрганизации.ФизическоеЛицо = РолиФизическихЛиц.ФизическоеЛицо
				|			И ФизическиеЛицаОрганизации.Организация = РолиФизическихЛиц.Организация
				|			И (РолиФизическихЛиц.Роль = ЗНАЧЕНИЕ(Перечисление.РолиФизическихЛиц.Сотрудник))
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ФизическиеЛицаОрганизации.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
				|			И (ВЫРАЗИТЬ(ФизическиеЛицаОрганизации.Организация КАК Справочник.Организации).ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
				|ГДЕ
				|	ФизическиеЛицаОрганизации.Удалить
				|
				|СГРУППИРОВАТЬ ПО
				|	ФизическиеЛицаОрганизации.ФизическоеЛицо,
				|	ФизическиеЛицаОрганизации.Организация,
				|	РолиФизическихЛиц.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	УдаляемыеРоли.ФизическоеЛицо КАК ФизическоеЛицо,
				|	УдаляемыеРоли.Организация КАК Организация
				|ИЗ
				|	ВТУдаляемыеРоли КАК УдаляемыеРоли
				|ГДЕ
				|	УдаляемыеРоли.ЕстьРоль
				|	И УдаляемыеРоли.КоличествоСотрудников = 1";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					УстановитьРольФизическогоЛицаВОрганизации(Выборка.ФизическоеЛицо, Выборка.Организация, Ложь);
				КонецЦикла;
				
			КонецЕсли;
			
			// Очистка роли у физических лиц с несколькими сотрудниками
			Запрос.Текст =
				"ВЫБРАТЬ
				|	УдаляемыеРоли.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ВЫРАЗИТЬ(УдаляемыеРоли.Организация КАК Справочник.Организации).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
				|ПОМЕСТИТЬ ВТПроверяемыеФизическиеЛица
				|ИЗ
				|	ВТУдаляемыеРоли КАК УдаляемыеРоли
				|ГДЕ
				|	УдаляемыеРоли.ЕстьРоль
				|	И УдаляемыеРоли.КоличествоСотрудников > 1
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПроверяемыеФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
				|ИЗ
				|	ВТПроверяемыеФизическиеЛица КАК ПроверяемыеФизическиеЛица";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
					"КадроваяИсторияСотрудников",
					Запрос.МенеджерВременныхТаблиц,
					Ложь,
					ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
						"ВТПроверяемыеФизическиеЛица","ФизическоеЛицо,ГоловнаяОрганизация"));
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	УдаляемыеРоли.ФизическоеЛицо КАК ФизическоеЛицо,
					|	УдаляемыеРоли.Организация КАК Организация
					|ИЗ
					|	ВТУдаляемыеРоли КАК УдаляемыеРоли
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
					|		ПО УдаляемыеРоли.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
					|			И УдаляемыеРоли.Организация = КадроваяИсторияСотрудников.Организация
					|ГДЕ
					|	УдаляемыеРоли.ЕстьРоль
					|	И УдаляемыеРоли.КоличествоСотрудников > 1
					|	И КадроваяИсторияСотрудников.ФизическоеЛицо ЕСТЬ NULL";
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
				
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						УстановитьРольФизическогоЛицаВОрганизации(Выборка.ФизическоеЛицо, Выборка.Организация, Ложь);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРольФизическогоЛицаВОрганизации(ФизическоеЛицо, Организация, ФизическоеЛицоРаботаетВОрганизации)
	
	Набор = РегистрыСведений.РолиФизическихЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.Роль.Установить(Перечисления.РолиФизическихЛиц.Сотрудник);
	
	Если ФизическоеЛицоРаботаетВОрганизации Тогда
		
		Запись = Набор.Добавить();
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Запись.Организация = Организация;
		Запись.Роль = Перечисления.РолиФизическихЛиц.Сотрудник;
		
	КонецЕсли;
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ОбновитьДанныеДляПодбораСотрудниковПриИзмененииКадровойИстории(НаборЗаписейКадровойИстории, Отказ, Замещение) Экспорт
	
	ИзменившиесяДанныеКадровойИстории = НаборЗаписейКадровойИстории.ТаблицаИзменившихсяДанныхНабора();
	
	Если ИзменившиесяДанныеКадровойИстории = Неопределено
		Или ИзменившиесяДанныеКадровойИстории.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;	
	
	Сотрудники = ИзменившиесяДанныеКадровойИстории.ВыгрузитьКолонку("Сотрудник");
	Если Сотрудники.Количество() > 0 Тогда
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(Сотрудники);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти


#Область НапоминанияПоСотрудникам

// Возвращает признак того, установлено ли физическому лицу напоминание о дне рождения.
//
// Параметры:
//	ФизическоеЛицоСсылка - физическое лицо, по которому установлено напоминание, тип СправочникСсылка.ФизическиеЛица.
//
// Возвращаемое значение:
// 	Булево - признак установленности напоминания.
//
Функция НапоминаниеОДнеРожденияУстановлено(ФизическоеЛицоСсылка) Экспорт
	Возврат НапоминанияОДняхРождения(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицоСсылка)).Количество() > 0;
КонецФункции

// Возвращает установленные пользователю о днях рождения физических лиц.
// Напоминанием о дне рождения принимается напоминание, установленное физическому лицу относительно предмета ДатаРождения,
//	имеющее периодическое расписание.
//
// Параметры:
//	МассивПредметовНапоминаний - Массив,  значения элементов массива - СправочникСсылка.ФизическиеЛица
// Возвращаемое значение:
//	Массив, содержащий структуры со следующими ключами:
//		* Пользователь	 - пользователь, для которого установлено напоминание.
//		* ВремяСобытия	 - время срабатывания напоминания.
//		* Источник		 - физическое лицо, предмет напоминания.
//		* Расписание	 - хранилище значения, содержащее расписание срабатывания напоминания.
//
Функция НапоминанияОДняхРождения(МассивПредметовНапоминаний, ВыполнятьВПривилегированномРежиме = Истина) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НапоминанияПользователя.Пользователь КАК Пользователь,
		|	НапоминанияПользователя.ВремяСобытия КАК ВремяСобытия,
		|	НапоминанияПользователя.Источник КАК Источник,
		|	НапоминанияПользователя.Расписание КАК Расписание
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.ИмяРеквизитаИсточника = &ИмяДеньРождения
		|	И НапоминанияПользователя.СпособУстановкиВремениНапоминания = &СпособУстановкиОтносительноПредмета
		|	И НапоминанияПользователя.Пользователь = &ТекущийПользователь
		|	И НапоминанияПользователя.Источник В(&МассивПредметовНапоминаний)";
	
	Запрос.УстановитьПараметр("ИмяДеньРождения", "ДатаРождения");
	Запрос.УстановитьПараметр("СпособУстановкиОтносительноПредмета", ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета"));
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("МассивПредметовНапоминаний", МассивПредметовНапоминаний);
	
	Если ВыполнятьВПривилегированномРежиме Тогда
	    УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	МассивКлючейРегистра = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Расписание = Выборка.Расписание.Получить();
		Если Расписание = Неопределено Тогда
			Продолжить; // нам нужны только периодические напоминания по предмету "ДеньРождения"
		КонецЕсли;
		
		КлючРегистраНапоминаний = Новый Структура("Пользователь,ВремяСобытия,Источник");
		ЗаполнитьЗначенияСвойств(КлючРегистраНапоминаний, Выборка);
		МассивКлючейРегистра.Добавить(КлючРегистраНапоминаний);
	КонецЦикла;
	
	Возврат МассивКлючейРегистра;

КонецФункции

#КонецОбласти

Функция СведенияОСреднемЗаработкеДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОСреднемЗаработке = Новый Соответствие;
	
	КадровыеДанныеСотрудниковДо2023 = КадровыеДанныеСотрудников.СкопироватьКолонки();
	КадровыеДанныеСотрудниковС2023 = КадровыеДанныеСотрудников.СкопироватьКолонки();
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		Если КадровыеДанныеСотрудника.ДатаУвольнения < '20230801' Тогда
			ЗаполнитьЗначенияСвойств(КадровыеДанныеСотрудниковДо2023.Добавить(), КадровыеДанныеСотрудника);
		Иначе
			ЗаполнитьЗначенияСвойств(КадровыеДанныеСотрудниковС2023.Добавить(), КадровыеДанныеСотрудника);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КадровыеДанныеСотрудниковДо2023) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			СведенияОСреднемЗаработке,
			СведенияОСреднемЗаработкеДляСправкиПоБезработицеДо2023(КадровыеДанныеСотрудниковДо2023));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КадровыеДанныеСотрудниковС2023) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			СведенияОСреднемЗаработке,
			СведенияОСреднемЗаработкеДляСправкиПоБезработицеС2023(КадровыеДанныеСотрудниковС2023));
	КонецЕсли;
	
	Возврат СведенияОСреднемЗаработке;
	
КонецФункции

Функция СведенияОСреднемЗаработкеДляСправкиПоБезработицеС2023(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОСреднемЗаработке = Новый Соответствие;
	
	СписокДокументов = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДанныеСотрудников, "ПриказОбУвольнении");
	ИменаДокументов = Новый Соответствие;
	Если СписокДокументов.Количество() = 0 Тогда
		ИменаДокументов.Вставить("Увольнение", СписокДокументов);
	Иначе
		Для Каждого ДокументСписка Из СписокДокументов Цикл
			ИмяДокумента = ДокументСписка.Метаданные().Имя;
			СписокВида = ИменаДокументов.Получить(ИмяДокумента);
			Если СписокВида = Неопределено Тогда
				СписокВида = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСписка);
			Иначе
				СписокВида.Добавить(ДокументСписка);
			КонецЕсли;
			ИменаДокументов.Вставить(ИмяДокумента, СписокВида);
		КонецЦикла;
	КонецЕсли;
	
	Если ИменаДокументов.Количество() = 1 Тогда
		Для Каждого ДокументыВида Из ИменаДокументов Цикл
			ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке(ДокументыВида.Ключ, ДокументыВида.Значение);
		КонецЦикла;
	Иначе
		ТаблицыДанныхОСреднем = Неопределено;
		Для Каждого ДокументыВида Из ИменаДокументов Цикл
			ТаблицыДанныхОСреднемВида = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке(ДокументыВида.Ключ, ДокументыВида.Значение);
			Если ТаблицыДанныхОСреднем = Неопределено Тогда
				ТаблицыДанныхОСреднем = Новый Структура;
				ТаблицыДанныхОСреднем.Вставить("ДанныеОНачислениях", ТаблицыДанныхОСреднемВида.ДанныеОНачислениях.СкопироватьКолонки());
				ТаблицыДанныхОСреднем.Вставить("ДанныеОВремени", ТаблицыДанныхОСреднемВида.ДанныеОВремени.СкопироватьКолонки());
				ТаблицыДанныхОСреднем.Вставить("ДанныеОбИндексации", ТаблицыДанныхОСреднемВида.ДанныеОбИндексации.СкопироватьКолонки());
				ТаблицыДанныхОСреднем.ДанныеОНачислениях.Колонки.Удалить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОВремени.Колонки.Удалить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОбИндексации.Колонки.Удалить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОНачислениях.Колонки.Добавить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОВремени.Колонки.Добавить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОбИндексации.Колонки.Добавить("Ссылка");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДанныхОСреднемВида.ДанныеОНачислениях, ТаблицыДанныхОСреднем.ДанныеОНачислениях);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДанныхОСреднемВида.ДанныеОВремени, ТаблицыДанныхОСреднем.ДанныеОВремени);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДанныхОСреднемВида.ДанныеОбИндексации, ТаблицыДанныхОСреднем.ДанныеОбИндексации);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеОЗаработкеСотрудников = Новый Соответствие;
	Для Каждого ДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		ДанныеОНачисленияхДокумента = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОНачислениях"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		ДанныеОНачисленияхСотрудника = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОНачисленияхДокумента, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОВремениДокумента = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОВремени"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		ДанныеОВремениСотрудника = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОВремениДокумента, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОбИндексацииДокумента = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОбИндексации"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		ДанныеОбИндексацииСотрудника = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОбИндексацииДокумента, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДатаОкончанияПериода = ?(
			КонецДня(ДанныеСотрудника.ДатаУвольнения) = КонецМесяца(ДанныеСотрудника.ДатаУвольнения),
			НачалоМесяца(ДанныеСотрудника.ДатаУвольнения),
			НачалоМесяца(НачалоМесяца(ДанныеСотрудника.ДатаУвольнения) - 1));
		ДатаНачалаПериода = Макс(ДанныеСотрудника.ДатаПриема, ДобавитьМесяц(ДатаОкончанияПериода, - 12));
		
		ДанныеОЗаработкеСотрудника = Новый Массив;
		НачалоПериода = ДатаНачалаПериода;
		Пока НачалоПериода <= ДатаОкончанияПериода Цикл
			
			ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
			ДополнительныеПараметры.Индексации = ДанныеОбИндексацииСотрудника.СкопироватьКолонки();
			ДополнительныеПараметры.ДатаНачалаСобытия = ДанныеСотрудника.ДатаУвольнения;
			ДополнительныеПараметры.НачалоПериода = НачалоПериода;
			ДополнительныеПараметры.ОкончаниеПериода = КонецМесяца(ДополнительныеПараметры.НачалоПериода);
			ДополнительныеПараметры.ПоЧасам = ДанныеСотрудника.СуммированныйУчетРабочегоВремени;
			
			ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(
				ДанныеОНачисленияхСотрудника, ДанныеОВремениСотрудника, ДополнительныеПараметры);
			
			Учтено = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.Заработок, "Учтено");
			Если Учтено > 0 Тогда
				УчтеноВремени = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.ОтработанноеВремя, "Учтено");
				ДанныеОЗаработкеСотрудника.Добавить(Новый Структура("Сумма,Время,НачалоПериода,ОкончаниеПериода",
					Учтено, УчтеноВремени, ДополнительныеПараметры.НачалоПериода, ДополнительныеПараметры.ОкончаниеПериода));
			ИначеЕсли ДанныеОЗаработкеСотрудника.Количество() > 0 Тогда
				ДанныеОЗаработкеСотрудника.Добавить(Новый Структура("Сумма,Время,НачалоПериода,ОкончаниеПериода",
					0, 0, ДополнительныеПараметры.НачалоПериода, ДополнительныеПараметры.ОкончаниеПериода));
			КонецЕсли;
			
			НачалоПериода = НачалоМесяца(ДобавитьМесяц(НачалоПериода, 1));
			
		КонецЦикла;
		
		// Если заработка не было, получим данные графика в месяце увольнения
		Если ДанныеОЗаработкеСотрудника.Количество() = 0 Тогда
			ДанныеОЗаработкеСотрудника.Добавить(Новый Структура("Сумма,Время,НачалоПериода,ОкончаниеПериода",
				0, 0, НачалоПериода, КонецМесяца(НачалоПериода)));
		КонецЕсли;
		
		ДанныеОЗаработкеСотрудников.Вставить(ДанныеСотрудника.Сотрудник, ДанныеОЗаработкеСотрудника);
		
	КонецЦикла;
	
	ДанныеСреднегоЗаработка = СреднийЗаработокСотрудников(ДанныеОЗаработкеСотрудников);
	
	ТаблицаПериодовРаботы = Новый ТаблицаЗначений;
	ТаблицаПериодовРаботы.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПериодовРаботы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодовРаботы.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодовРаботы.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодовРаботы.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	Для Каждого ДанныеЗаработка Из ДанныеСреднегоЗаработка Цикл
		ДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ДанныеЗаработка.Ключ, "Сотрудник");
		Если ДанныеСотрудника <> Неопределено Тогда
			ДатаАктуальности = НачалоМесяца(ДанныеСотрудника.ДатаУвольнения);
		Иначе
			ДатаАктуальности = НачалоМесяца(ДанныеЗаработка.Значение.ОкончаниеПериода);
		КонецЕсли;
		НоваяСтрока = ТаблицаПериодовРаботы.Добавить();
		НоваяСтрока.Сотрудник = ДанныеЗаработка.Ключ;
		НоваяСтрока.ДатаАктуальности = ДатаАктуальности;
		НоваяСтрока.ДатаНачала = ДанныеЗаработка.Значение.НачалоПериода;
		НоваяСтрока.Месяц = НачалоМесяца(НоваяСтрока.ДатаНачала);
		ДатаНачала = КонецМесяца(НоваяСтрока.ДатаНачала) + 1;
		НоваяСтрока.ДатаОкончания = Мин(КонецМесяца(ДатаНачала - 1), ДанныеЗаработка.Значение.ОкончаниеПериода);
		Пока ДатаНачала < ДанныеЗаработка.Значение.ОкончаниеПериода Цикл
			ДополнительнаяСтрока = ТаблицаПериодовРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, НоваяСтрока);
			ДополнительнаяСтрока.ДатаНачала = ДатаНачала;
			ДополнительнаяСтрока.Месяц = НачалоМесяца(ДополнительнаяСтрока.ДатаНачала);
			ДатаНачала = КонецМесяца(ДатаНачала) + 1;
			ДополнительнаяСтрока.ДатаОкончания = Мин(КонецМесяца(ДатаНачала - 1), ДанныеЗаработка.Значение.ОкончаниеПериода);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников" ,КадровыеДанныеСотрудников);
	Запрос.УстановитьПараметр("ТаблицаПериодовРаботы", ТаблицаПериодовРаботы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодовРаботы.Сотрудник КАК Сотрудник,
		|	ТаблицаПериодовРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени
		|ПОМЕСТИТЬ ВТПериодыРаботыСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК ТаблицаПериодовРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодовРаботы.Сотрудник КАК Сотрудник,
		|	ТаблицаПериодовРаботы.Месяц КАК Месяц,
		|	ТаблицаПериодовРаботы.ДатаНачала КАК ДатаНачала,
		|	ТаблицаПериодовРаботы.ДатаОкончания КАК ДатаОкончания,
		|	ТаблицаПериодовРаботы.ДатаАктуальности КАК ДатаАктуальности
		|ПОМЕСТИТЬ ВТСотрудникиДляСоздатьВТПлановоеВремя
		|ИЗ
		|	&ТаблицаПериодовРаботы КАК ТаблицаПериодовРаботы";
	
	Запрос.Выполнить();
	
	ПараметрыСоздатьВТПлановоеВремя = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыСоздатьВТПлановоеВремя.ИмяВТСотрудники = "ВТСотрудникиДляСоздатьВТПлановоеВремя";
	ПараметрыСоздатьВТПлановоеВремя.ПолучатьПлановоеВремяЗаПолныйМесяц = Истина;
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыСоздатьВТПлановоеВремя);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановоеВремя.Сотрудник КАК Сотрудник,
		|	ПлановоеВремя.Дата КАК Дата,
		|	ПлановоеВремя.ДниПлан КАК ДниПлан,
		|	СУММА(ПлановоеВремя.ЧасыПлан) КАК ЧасыПлан
		|ПОМЕСТИТЬ ВТПлановоеВремяСвернутое
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановоеВремя.Сотрудник,
		|	ПлановоеВремя.Дата,
		|	ПлановоеВремя.ДниПлан
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановоеВремя.Сотрудник КАК Сотрудник,
		|	ПериодыРаботыСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	МИНИМУМ(ПлановоеВремя.Дата) КАК ДатаНачалаПериода,
		|	МАКСИМУМ(ПлановоеВремя.Дата) КАК ДатаОкончанияПериода,
		|	СУММА(ВЫБОР
		|			КОГДА ПлановоеВремя.ЧасыПлан > 0
		|				ТОГДА ПлановоеВремя.ДниПлан
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НормаДней,
		|	СУММА(ПлановоеВремя.ЧасыПлан) КАК НормаЧасов,
		|	РАЗНОСТЬДАТ(МИНИМУМ(ПлановоеВремя.Дата), МАКСИМУМ(ПлановоеВремя.Дата), МЕСЯЦ) + 1 КАК Месяцев
		|ИЗ
		|	ВТПлановоеВремяСвернутое КАК ПлановоеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
		|		ПО ПлановоеВремя.Сотрудник = ПериодыРаботыСотрудников.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановоеВремя.Сотрудник,
		|	ПериодыРаботыСотрудников.СуммированныйУчетРабочегоВремени";
	
	ДанныеОПлановомВремени = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДанныеСотрудника Из ДанныеСреднегоЗаработка Цикл
		
		СреднийЗаработок = 0;
		ДанныеОПлановомВремениСотрудника = ДанныеОПлановомВремени.Найти(ДанныеСотрудника.Ключ, "Сотрудник");
		Если ДанныеОПлановомВремениСотрудника <> Неопределено Тогда
			
			Если ДанныеСотрудника.Значение.Время = 0 Тогда
				СреднийЗаработок = ДанныеСотрудника.Значение.Сумма;
			Иначе
				
				Если ДанныеОПлановомВремениСотрудника.СуммированныйУчетРабочегоВремени Тогда
					СреднийЗаработок = ДанныеСотрудника.Значение.Сумма / ДанныеСотрудника.Значение.Время * ДанныеОПлановомВремениСотрудника.НормаЧасов / ДанныеОПлановомВремениСотрудника.Месяцев;
				Иначе
					СреднийЗаработок = ДанныеСотрудника.Значение.Сумма / ДанныеСотрудника.Значение.Время * ДанныеОПлановомВремениСотрудника.НормаДней / ДанныеОПлановомВремениСотрудника.Месяцев;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СреднийЗаработок = 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Сотрудник", ДанныеСотрудника.Ключ);
				Запрос.УстановитьПараметр("Период", ДанныеСотрудника.Значение.НачалоПериода);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СУММА(ВЫБОР
					|			КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|				ТОГДА 1
					|			КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
					|				ТОГДА 1
					|			ИНАЧЕ 0
					|		КОНЕЦ * НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма,
					|	СУММА(ОтработанноеВремяПоСотрудникам.ОтработаноДней) КАК ОтработаноДней,
					|	СУММА(ОтработанноеВремяПоСотрудникам.ОтработаноЧасов) КАК ОтработаноЧасов
					|ИЗ
					|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
					|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник = ОтработанноеВремяПоСотрудникам.Сотрудник
					|			И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ОтработанноеВремяПоСотрудникам.Начисление
					|			И НачисленияУдержанияПоСотрудникам.Период = ОтработанноеВремяПоСотрудникам.Период
					|ГДЕ
					|	НачисленияУдержанияПоСотрудникам.Период = &Период
					|	И НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник
					|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияДохода В (ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТруда), ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТрудаАУСН))";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					Если ДанныеОПлановомВремениСотрудника.СуммированныйУчетРабочегоВремени Тогда
						Если ЗначениеЗаполнено(Выборка.ОтработаноЧасов) Тогда
							СреднийЗаработок = Выборка.Сумма / Выборка.ОтработаноЧасов * ДанныеОПлановомВремениСотрудника.НормаЧасов;
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(Выборка.ОтработаноДней) Тогда
							СреднийЗаработок = Выборка.Сумма / Выборка.ОтработаноДней * ДанныеОПлановомВремениСотрудника.НормаДней;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОСреднемЗаработке.Вставить(ДанныеСотрудника.Ключ, СреднийЗаработок);
		
	КонецЦикла;
	
	Возврат СведенияОСреднемЗаработке;
	
КонецФункции

Функция СреднийЗаработокСотрудников(ДанныеОЗаработкеСотрудников)
	
	ДанныеСреднегоЗаработка = Новый Соответствие;
	Для Каждого ДанныеСотрудника Из ДанныеОЗаработкеСотрудников Цикл
		
		ДанныеПериодаСотрудника = Новый Структура("Сумма,Время,НачалоПериода,ОкончаниеПериода",
			0, 0, '00010101', '00010101');
		Для Индекс = 0 по ДанныеСотрудника.Значение.Количество() - 1 Цикл
			СуммаЗаработка = ДанныеСотрудника.Значение[Индекс].Сумма;
			Время = ДанныеСотрудника.Значение[Индекс].Время;
			ОкончаниеПериода = ДанныеСотрудника.Значение[Индекс].ОкончаниеПериода;
			Если Индекс + 1 < ДанныеСотрудника.Значение.Количество() Тогда
				СуммаЗаработка = СуммаЗаработка + ДанныеСотрудника.Значение[Индекс + 1].Сумма;
				Время = Время + ДанныеСотрудника.Значение[Индекс + 1].Время;
				ОкончаниеПериода = ДанныеСотрудника.Значение[Индекс + 1].ОкончаниеПериода;
				Если Индекс + 2 < ДанныеСотрудника.Значение.Количество() Тогда
					СуммаЗаработка = СуммаЗаработка + ДанныеСотрудника.Значение[Индекс + 2].Сумма;
					Время = Время + ДанныеСотрудника.Значение[Индекс + 2].Время;
					ОкончаниеПериода = ДанныеСотрудника.Значение[Индекс + 2].ОкончаниеПериода;
				КонецЕсли;
			КонецЕсли;
			Если СуммаЗаработка >= ДанныеПериодаСотрудника.Сумма Тогда
				ДанныеПериодаСотрудника.Сумма = СуммаЗаработка;
				ДанныеПериодаСотрудника.Время = Время;
				ДанныеПериодаСотрудника.НачалоПериода = ДанныеСотрудника.Значение[Индекс].НачалоПериода;
				ДанныеПериодаСотрудника.ОкончаниеПериода = ОкончаниеПериода;
			КонецЕсли;
		КонецЦикла;
		ДанныеСреднегоЗаработка.Вставить(ДанныеСотрудника.Ключ, ДанныеПериодаСотрудника);
	КонецЦикла;
	
	Возврат ДанныеСреднегоЗаработка;
	
КонецФункции

Функция СведенияОСреднемЗаработкеДляСправкиПоБезработицеДо2023(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОСреднемЗаработке = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ПриказОбУвольнении КАК ПриказОбУвольнении,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) = КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ)
		|			ТОГДА КадровыеДанныеСотрудников.ДатаУвольнения
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ, -1), МЕСЯЦ)
		|	КОНЕЦ КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТПериодыРаботыСотрудниковПредварительно
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыРаботы.Сотрудник КАК Сотрудник,
		|	ПериодыРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	ПериодыРаботы.ПриказОбУвольнении КАК ПриказОбУвольнении,
		|	ПериодыРаботы.ДатаПриема КАК ДатаПриема,
		|	ПериодыРаботы.ДатаУвольнения КАК ДатаУвольнения,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ) КАК НачалоТрехмесячногоПериода,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ) > ПериодыРаботы.ДатаПриема
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботы.ДатаПриема
		|	КОНЕЦ КАК НачалоПериода,
		|	ПериодыРаботы.ОкончаниеПериода КАК ОкончаниеПериода,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ) > ПериодыРаботы.ДатаПриема
		|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ)
		|			ИНАЧЕ ПериодыРаботы.ДатаПриема
		|		КОНЕЦ, ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ) + 1 КАК Месяцев
		|ПОМЕСТИТЬ ВТПериодыРаботыСотрудников
		|ИЗ
		|	ВТПериодыРаботыСотрудниковПредварительно КАК ПериодыРаботы";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыРаботыСотрудников.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ЕСТЬNULL(Увольнение.ПериодРегистрации, УвольнениеСписком.Ссылка.ПериодРегистрации), ПериодыРаботыСотрудников.ДатаУвольнения) КАК ПериодРегистрации,
		|	ПериодыРаботыСотрудников.НачалоТрехмесячногоПериода КАК ДатаНачалаПериода,
		|	ПериодыРаботыСотрудников.ОкончаниеПериода КАК ДатаОкончанияПериода
		|ИЗ
		|	ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСписком
		|		ПО ПериодыРаботыСотрудников.Сотрудник = УвольнениеСписком.Сотрудник
		|			И ПериодыРаботыСотрудников.ПриказОбУвольнении = УвольнениеСписком.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
		|		ПО ПериодыРаботыСотрудников.Сотрудник = Увольнение.Сотрудник
		|			И ПериодыРаботыСотрудников.ПриказОбУвольнении = Увольнение.Ссылка";
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	ТаблицаПериодовРаботы = ТаблицаСотрудников.СкопироватьКолонки();
	
	СписокДокументов = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДанныеСотрудников, "ПриказОбУвольнении");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(СписокДокументов, Неопределено);
	ИменаДокументов = Новый Соответствие;
	
	Если СписокДокументов.Количество() = 0 Тогда
		ИменаДокументов.Вставить("Увольнение", СписокДокументов);
	Иначе
		
		Для Каждого ДокументСписка Из СписокДокументов Цикл
			
			ИмяДокумента = ДокументСписка.Метаданные().Имя;
			
			СписокВида = ИменаДокументов.Получить(ИмяДокумента);
			Если СписокВида = Неопределено Тогда
				СписокВида = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСписка);
			Иначе
				СписокВида.Добавить(ДокументСписка);
			КонецЕсли;
			
			ИменаДокументов.Вставить(ИмяДокумента, СписокВида);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИменаДокументов.Количество() = 1 Тогда
		
		Для Каждого ДокументыВида Из ИменаДокументов Цикл
			ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке(ДокументыВида.Ключ, ДокументыВида.Значение);
		КонецЦикла;
		
	Иначе
		
		ТаблицыДанныхОСреднем = Неопределено;
		Для Каждого ДокументыВида Из ИменаДокументов Цикл
			
			ТаблицыДанныхОСреднемВида = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке(ДокументыВида.Ключ, ДокументыВида.Значение);
			Если ТаблицыДанныхОСреднем = Неопределено Тогда
				
				ТаблицыДанныхОСреднем = Новый Структура;
				ТаблицыДанныхОСреднем.Вставить("ДанныеОНачислениях", ТаблицыДанныхОСреднемВида.ДанныеОНачислениях.СкопироватьКолонки());
				ТаблицыДанныхОСреднем.Вставить("ДанныеОВремени", ТаблицыДанныхОСреднемВида.ДанныеОВремени.СкопироватьКолонки());
				ТаблицыДанныхОСреднем.Вставить("ДанныеОбИндексации", ТаблицыДанныхОСреднемВида.ДанныеОбИндексации.СкопироватьКолонки());
				
				ТаблицыДанныхОСреднем.ДанныеОНачислениях.Колонки.Удалить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОВремени.Колонки.Удалить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОбИндексации.Колонки.Удалить("Ссылка");
				
				ТаблицыДанныхОСреднем.ДанныеОНачислениях.Колонки.Добавить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОВремени.Колонки.Добавить("Ссылка");
				ТаблицыДанныхОСреднем.ДанныеОбИндексации.Колонки.Добавить("Ссылка");
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДанныхОСреднемВида.ДанныеОНачислениях, ТаблицыДанныхОСреднем.ДанныеОНачислениях);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДанныхОСреднемВида.ДанныеОВремени, ТаблицыДанныхОСреднем.ДанныеОВремени);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДанныхОСреднемВида.ДанныеОбИндексации, ТаблицыДанныхОСреднем.ДанныеОбИндексации);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		ДанныеОНачислениях = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОНачислениях"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		
		ДанныеОНачислениях = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОНачислениях, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОВремени = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОВремени"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		
		ДанныеОВремени = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОВремени, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОбИндексации = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОбИндексации"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		
		ДанныеОбИндексации = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОбИндексации, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОПлановомВремениСотрудника = ТаблицаСотрудников.Найти(ДанныеСотрудника.Сотрудник, "Сотрудник");
		
		Если ДанныеОПлановомВремениСотрудника <> Неопределено Тогда
			
			ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
			ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
			ДополнительныеПараметры.ДатаНачалаСобытия = ДанныеСотрудника.ДатаУвольнения;
			ДополнительныеПараметры.НачалоПериода = ДанныеОПлановомВремениСотрудника.ДатаНачалаПериода;
			ДополнительныеПараметры.ОкончаниеПериода = ДанныеОПлановомВремениСотрудника.ДатаОкончанияПериода;
			
			// Определение последнего оплаченного месяца
			ПоследнийМесяцОпределен = Ложь;
			
			ВерхняяГраницаРасчетаСреднего = ДополнительныеПараметры.ОкончаниеПериода;
			НачалоПериодаРасчетаСреднего = НачалоМесяца(ДобавитьМесяц(ВерхняяГраницаРасчетаСреднего, -11));
			Пока ВерхняяГраницаРасчетаСреднего > НачалоПериодаРасчетаСреднего Цикл
				
				ДополнительныеПараметры.НачалоПериода = НачалоМесяца(ВерхняяГраницаРасчетаСреднего);
				ДополнительныеПараметры.ОкончаниеПериода = ВерхняяГраницаРасчетаСреднего;
				ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
				
				Если УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.Заработок, "Учтено") > 0
					Или НачалоМесяца(ДанныеСотрудника.ДатаПриема) >= НачалоМесяца(ДобавитьМесяц(ДополнительныеПараметры.ОкончаниеПериода, -2))  Тогда
					
					ПоследнийМесяцОпределен = Истина;
					
					Если НачалоМесяца(ДанныеСотрудника.ДатаПриема) = НачалоМесяца(ДополнительныеПараметры.ОкончаниеПериода) Тогда
						
						ДобавитьПериодРаботы(ТаблицаПериодовРаботы, ДанныеСотрудника.Сотрудник, ДанныеОПлановомВремениСотрудника.ПериодРегистрации,
							НачалоМесяца(ДанныеСотрудника.ДатаПриема),
							КонецМесяца(ДополнительныеПараметры.НачалоПериода));
						
					Иначе
						
						ДобавитьПериодРаботы(ТаблицаПериодовРаботы, ДанныеСотрудника.Сотрудник, ДанныеОПлановомВремениСотрудника.ПериодРегистрации,
							НачалоМесяца(ДобавитьМесяц(ДополнительныеПараметры.ОкончаниеПериода, - 2)),
							КонецМесяца(ДополнительныеПараметры.НачалоПериода));
						
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
				ВерхняяГраницаРасчетаСреднего = ДобавитьМесяц(ВерхняяГраницаРасчетаСреднего, - 1);
				
			КонецЦикла;
			
			Если Не ПоследнийМесяцОпределен Тогда
				
				ДобавитьПериодРаботы(ТаблицаПериодовРаботы, ДанныеСотрудника.Сотрудник, ДанныеОПлановомВремениСотрудника.ПериодРегистрации,
					НачалоМесяца(ДанныеСотрудника.ДатаУвольнения), КонецМесяца(ДанныеСотрудника.ДатаУвольнения));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаПериодовРаботы", ТаблицаПериодовРаботы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодовРаботы.Сотрудник КАК Сотрудник,
		|	ТаблицаПериодовРаботы.ПериодРегистрации КАК ДатаАктуальности,
		|	ТаблицаПериодовРаботы.ДатаНачалаПериода КАК ДатаНачала,
		|	ТаблицаПериодовРаботы.ДатаОкончанияПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТТаблицаПериодовРаботы
		|ИЗ
		|	&ТаблицаПериодовРаботы КАК ТаблицаПериодовРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодовРаботы.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаПериодовРаботы.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	ТаблицаПериодовРаботы.ДатаНачала КАК ДатаНачала,
		|	ТаблицаПериодовРаботы.ДатаОкончания КАК ДатаОкончания,
		|	ТаблицаПериодовРаботы.ДатаАктуальности КАК ДатаАктуальности
		|ПОМЕСТИТЬ ВТСотрудникиДляСоздатьВТПлановоеВремя
		|ИЗ
		|	ВТТаблицаПериодовРаботы КАК ТаблицаПериодовРаботы";
	
	Запрос.Выполнить();
	
	ПараметрыСоздатьВТПлановоеВремя = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыСоздатьВТПлановоеВремя.ИмяВТСотрудники = "ВТСотрудникиДляСоздатьВТПлановоеВремя";
	ПараметрыСоздатьВТПлановоеВремя.ПолучатьПлановоеВремяЗаПолныйМесяц = Истина;
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыСоздатьВТПлановоеВремя);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановоеВремя.Сотрудник КАК Сотрудник,
		|	ПлановоеВремя.Дата КАК Дата,
		|	ПлановоеВремя.ДниПлан КАК ДниПлан,
		|	СУММА(ПлановоеВремя.ЧасыПлан) КАК ЧасыПлан
		|ПОМЕСТИТЬ ВТПлановоеВремяСвернутое
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановоеВремя.Сотрудник,
		|	ПлановоеВремя.Дата,
		|	ПлановоеВремя.ДниПлан
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановоеВремя.Сотрудник КАК Сотрудник,
		|	ПериодыРаботыСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	МИНИМУМ(ПлановоеВремя.Дата) КАК ДатаНачалаПериода,
		|	МАКСИМУМ(ПлановоеВремя.Дата) КАК ДатаОкончанияПериода,
		|	СУММА(ВЫБОР
		|			КОГДА ПлановоеВремя.ЧасыПлан > 0
		|				ТОГДА ПлановоеВремя.ДниПлан
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НормаДней,
		|	СУММА(ПлановоеВремя.ЧасыПлан) КАК НормаЧасов,
		|	РАЗНОСТЬДАТ(МИНИМУМ(ПлановоеВремя.Дата), МАКСИМУМ(ПлановоеВремя.Дата), МЕСЯЦ) + 1 КАК Месяцев
		|ИЗ
		|	ВТПлановоеВремяСвернутое КАК ПлановоеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
		|		ПО ПлановоеВремя.Сотрудник = ПериодыРаботыСотрудников.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановоеВремя.Сотрудник,
		|	ПериодыРаботыСотрудников.СуммированныйУчетРабочегоВремени";
	
	ДанныеОПлановомВремени = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		ДанныеОНачислениях = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОНачислениях"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		
		ДанныеОНачислениях = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОНачислениях, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОВремени = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОВремени"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		
		ДанныеОВремени = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОВремени, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОбИндексации = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(
			ТаблицыДанныхОСреднем["ДанныеОбИндексации"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		
		ДанныеОбИндексации = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОбИндексации, "Сотрудник", ДанныеСотрудника.Сотрудник);
		
		ДанныеОПлановомВремениСотрудника = ДанныеОПлановомВремени.Найти(ДанныеСотрудника.Сотрудник, "Сотрудник");
		
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = ДанныеСотрудника.ДатаУвольнения;
		Если ДанныеОПлановомВремениСотрудника <> Неопределено Тогда
			
			ДополнительныеПараметры.НачалоПериода = НачалоМесяца(ДанныеОПлановомВремениСотрудника.ДатаНачалаПериода);
			ДополнительныеПараметры.ОкончаниеПериода = ДанныеОПлановомВремениСотрудника.ДатаОкончанияПериода;
			ДополнительныеПараметры.ПоЧасам = ДанныеОПлановомВремениСотрудника.СуммированныйУчетРабочегоВремени;
			
			ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
			УчтеноЗаработок = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.Заработок, "Учтено");
			УчтеноВремени = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.ОтработанноеВремя, "Учтено");
			
			Если УчтеноВремени = 0 Тогда
				СреднийЗаработок = УчтеноЗаработок;
			Иначе
				
				Если ДанныеОПлановомВремениСотрудника.СуммированныйУчетРабочегоВремени Тогда
					СреднийЗаработок = УчтеноЗаработок / УчтеноВремени * ДанныеОПлановомВремениСотрудника.НормаЧасов / ДанныеОПлановомВремениСотрудника.Месяцев;
				Иначе
					СреднийЗаработок = УчтеноЗаработок / УчтеноВремени * ДанныеОПлановомВремениСотрудника.НормаДней / ДанныеОПлановомВремениСотрудника.Месяцев;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОСреднемЗаработке.Вставить(ДанныеСотрудника.Сотрудник, СреднийЗаработок);
		
	КонецЦикла;
	
	Возврат СведенияОСреднемЗаработке;
	
КонецФункции

Процедура ДобавитьПериодРаботы(ТаблицаПериодовРаботы, Сотрудник, ПериодРегистрации, ДатаНачалаПериода, ДатаОкончанияПериода)
	
	ДатаНачала = ДатаНачалаПериода;
	Пока ДатаНачала <= ДатаОкончанияПериода Цикл
		
		СтрокаТаблицаПериодовРаботы = ТаблицаПериодовРаботы.Добавить();
		СтрокаТаблицаПериодовРаботы.Сотрудник = Сотрудник;
		СтрокаТаблицаПериодовРаботы.ПериодРегистрации = ПериодРегистрации;
		СтрокаТаблицаПериодовРаботы.ДатаНачалаПериода = ДатаНачала;
		СтрокаТаблицаПериодовРаботы.ДатаОкончанияПериода = Мин(НачалоДня(КонецМесяца(ДатаНачала)), ДатаОкончанияПериода);
		
		ДатаНачала = КонецМесяца(ДатаНачала) + 1;
		
		Если ДатаНачала > ДатаОкончанияПериода Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОГрафикахРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОГрафикахРаботы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.ДатаПриема > ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|			ТОГДА КадровыеДанныеСотрудников.ДатаПриема
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|	КОНЕЦ КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТСотрудникиДаты", "Сотрудник");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикРаботыСотрудников.Период КАК Период,
		|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	МИНИМУМ(ГрафикРаботыСотрудниковПоследующие.Период) КАК ПериодПоследующий
		|ПОМЕСТИТЬ ВТГрафикиРаботыСПоследующимиПериодами
		|ИЗ
		|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудниковПоследующие
		|		ПО ГрафикРаботыСотрудников.Сотрудник = ГрафикРаботыСотрудниковПоследующие.Сотрудник
		|			И ГрафикРаботыСотрудников.Период < ГрафикРаботыСотрудниковПоследующие.Период
		|			И ГрафикРаботыСотрудников.ГрафикРаботы <> ГрафикРаботыСотрудниковПоследующие.ГрафикРаботы
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудников.Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРаботыСПоследующимиПериодами.Сотрудник КАК Сотрудник,
		|	ГрафикиРаботыСПоследующимиПериодами.ГрафикРаботы КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА НЕ ГрафикиРаботыСотрудников.НеполноеРабочееВремя
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПериодРаботыСПолнымРабочимДнем,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.РабочихДнейВНеделе <> 0
		|			ТОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНедели / ГрафикиРаботыСотрудников.РабочихДнейВНеделе
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Часов,
		|	ГрафикиРаботыСотрудников.РабочихДнейВНеделе КАК Дней,
		|	МИНИМУМ(ГрафикиРаботыСПоследующимиПериодами.Период) КАК НачалоПериода,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ГрафикиРаботыСПоследующимиПериодами.ПериодПоследующий, ДЕНЬ, -1), КадровыеДанныеСотрудников.ДатаУвольнения) КАК ОкончаниеПериода
		|ИЗ
		|	ВТГрафикиРаботыСПоследующимиПериодами КАК ГрафикиРаботыСПоследующимиПериодами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ГрафикиРаботыСПоследующимиПериодами.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ГрафикиРаботыСПоследующимиПериодами.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиРаботыСПоследующимиПериодами.Сотрудник,
		|	ГрафикиРаботыСПоследующимиПериодами.ГрафикРаботы,
		|	ГрафикиРаботыСотрудников.ДлительностьРабочейНедели,
		|	ГрафикиРаботыСотрудников.РабочихДнейВНеделе,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ГрафикиРаботыСПоследующимиПериодами.ПериодПоследующий, ДЕНЬ, -1), КадровыеДанныеСотрудников.ДатаУвольнения),
		|	ВЫБОР
		|		КОГДА НЕ ГрафикиРаботыСотрудников.НеполноеРабочееВремя
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	НачалоПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ГрафикиСотрудника = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			СведенияОГрафике = Новый Структура("Часов,Дней,НачалоПериода,ОкончаниеПериода,ПериодРаботыСПолнымРабочимДнем");
			ЗаполнитьЗначенияСвойств(СведенияОГрафике, Выборка);
			ГрафикиСотрудника.Добавить(СведенияОГрафике);
			
		КонецЦикла;
		
		СведенияОГрафикахРаботы.Вставить(Выборка.Сотрудник, ГрафикиСотрудника);
		
	КонецЦикла;
	
	Возврат СведенияОГрафикахРаботы;
	
КонецФункции

Процедура ОписаниеГрафикаРаботыДляСправкиПоБезработице(ВходящиеДанные, ШаблонОписанияГрафика, СуммированныйУчетРабочегоВремени, ИсходящиеДанные) Экспорт
	
	Если  ЗначениеЗаполнено(ВходящиеДанные.РаботаГрафикРаботыНедельный)
		И (Не ВходящиеДанные.РаботаГрафикРаботыНедельный) Тогда
		
		Если СуммированныйУчетРабочегоВремени И ВходящиеДанные.РаботаГрафикРаботыСуммированныйУчетРабочегоВремени Тогда
			ПредставлениеГрафика = НСтр("ru = '%1 часов в неделю, суммированный учет времени';
										|en = '%1 hours per week, cumulative time record'");
		Иначе
			ПредставлениеГрафика = НСтр("ru = '%1 часов в неделю, скользящий график';
										|en = '%1 hours per week, flextime'");
		КонецЕсли;
		
		ПредставлениеГрафика = СтрШаблон(ПредставлениеГрафика, ВходящиеДанные.РаботаГрафикРаботыЧасовВНеделю);
		
		Если ВходящиеДанные.РаботаГрафикРаботыСокращенный Тогда
			ИсходящиеДанные.ДанныеГрафикаСокращенногоРабочегоДня = ПредставлениеГрафика;
		Иначе
			ИсходящиеДанные.ДанныеГрафикаПолногоРабочегоДня = ПредставлениеГрафика;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОПериодахНеРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОПериодахНеРаботы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.ДатаПриема > ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|			ТОГДА КадровыеДанныеСотрудников.ДатаПриема
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|	КОНЕЦ КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Запрос.Выполнить();
	
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыСостоянийСотрудников.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА СотрудникиПериоды.ДатаНачала > ПериодыСостоянийСотрудников.Начало
		|			ТОГДА СотрудникиПериоды.ДатаНачала
		|		ИНАЧЕ ПериодыСостоянийСотрудников.Начало
		|	КОНЕЦ КАК НачалоПериода,
		|	ПериодыСостоянийСотрудников.Окончание КАК ОкончаниеПериода,
		|	ПериодыСостоянийСотрудников.Состояние КАК ПричинаОтсутствия
		|ИЗ
		|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО ПериодыСостоянийСотрудников.Сотрудник = СотрудникиПериоды.Сотрудник
		|ГДЕ
		|	НЕ ПериодыСостоянийСотрудников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа), ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	НачалоПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ПериодыНеработы = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			ПериодНеРаботы = Новый Структура("НачалоПериода,ОкончаниеПериода,ПричинаОтсутствия");
			ЗаполнитьЗначенияСвойств(ПериодНеРаботы, Выборка);
			ПериодНеРаботы.ПричинаОтсутствия = ПредставлениеПричиныОтсутствияСправкиПоБезработице(Выборка.ПричинаОтсутствия);
			
			ПериодыНеработы.Добавить(ПериодНеРаботы);
			
		КонецЦикла;
		
		СведенияОПериодахНеРаботы.Вставить(Выборка.Сотрудник, ПериодыНеработы);
		
	КонецЦикла;
	
	Возврат СведенияОПериодахНеРаботы;
	
КонецФункции

Функция ПредставлениеПричиныОтсутствияСправкиПоБезработице(ПричинаОтсутствия)
	
	Если ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком Тогда
		
		Возврат НСтр("ru = 'Отпуск по уходу за ребенком до достижения им 1,5 или 3-х лет';
					|en = 'Child care leave for children under 1.5 or 3 years old'");
		
	ИначеЕсли ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый
		Или ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству
		Или ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя
		Или ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый Тогда
		
		Возврат НСтр("ru = 'Отпуск без сохранения заработной платы';
					|en = 'Unpaid leave'");
		
	ИначеЕсли ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника
		Или ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника
		Или ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя Тогда
		
		Возврат НСтр("ru = 'Время простоя';
					|en = 'Idle time'");
		
	ИначеЕсли ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ВынужденныйПрогул Тогда
		
		Возврат НСтр("ru = 'Вынужденный прогул по вине работодателя';
					|en = 'Forced absenteeism due to the fault of the employer'");
		
	ИначеЕсли ПричинаОтсутствия = Перечисления.СостоянияСотрудника.Болезнь
		Или ПричинаОтсутствия = Перечисления.СостоянияСотрудника.БолезньБезОплаты
		Или ПричинаОтсутствия = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам Тогда
		
		Возврат НСтр("ru = 'Временная нетрудоспособность, в том числе отпуск по беременности и родам';
					|en = 'Temporary incapacity for work including maternity leave'");
		
	КонецЕсли;
	
	Возврат НСтр("ru = 'Период, когда заработная плата не выплачивалась';
				|en = 'Period when salary was not paid'");
	
КонецФункции

Функция ДанныеОтсутствийСотрудникаДляПособияПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	ДанныеОтчета = Новый Соответствие;
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	Запрос.УстановитьПараметр("Состояния", Состояния);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ) = КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ)
		|				ТОГДА ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ, -11)
		|			ИНАЧЕ ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ, -12)
		|		КОНЕЦ, МЕСЯЦ) КАК ДатаНачала,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Запрос.Выполнить();
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыСостоянийСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыСостоянийСотрудников.Состояние КАК Состояние,
		|	ПериодыСостоянийСотрудников.Начало КАК Начало,
		|	ПериодыСостоянийСотрудников.Окончание КАК Окончание
		|ИЗ
		|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Начало";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ДанныеСотрудника = Новый Соответствие;
		ДанныеОтчета.Вставить(Выборка.Сотрудник, ДанныеСотрудника);
		ДанныеНеОплачиваемыхОтпусков = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам Тогда
				Если ДанныеСотрудника.Получить("ОтпускПоБеременностиИРодам") = Неопределено Тогда
					ДанныеСотрудника.Вставить("ОтпускПоБеременностиИРодам",
						Новый Структура("Начало,Окончание", Выборка.Начало, Выборка.Окончание));
				КонецЕсли;
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком Тогда
				Если ДанныеСотрудника.Получить("ОтпускПоУходуЗаРебенком") = Неопределено Тогда
					ДанныеСотрудника.Вставить("ОтпускПоУходуЗаРебенком",
						Новый Структура("Начало,Окончание", Выборка.Начало, Выборка.Окончание));
				КонецЕсли;
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя
				Или Выборка.Состояние = Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству Тогда
				
				Если ДанныеНеОплачиваемыхОтпусков.Количество() > 0
					И КонецДня(Выборка.Окончание) + 1 = ДанныеНеОплачиваемыхОтпусков[ДанныеНеОплачиваемыхОтпусков.Количество() - 1].Начало Тогда
					
					ДанныеНеОплачиваемыхОтпусков[ДанныеНеОплачиваемыхОтпусков.Количество() - 1].Начало = Выборка.Начало;
				Иначе
					ТекущиеДанные = Новый Структура("Начало,Окончание", Выборка.Начало, Выборка.Окончание);
					ДанныеНеОплачиваемыхОтпусков.Добавить(ТекущиеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДанныеНеОплачиваемыхОтпусков.Количество() > 0 Тогда
			НужныйПериод = Неопределено;
			Для Каждого ПериодОтпуска Из ДанныеНеОплачиваемыхОтпусков Цикл
				Если Год(ПериодОтпуска.Окончание) - Год(ПериодОтпуска.Начало) > 1 Тогда
					НужныйПериод = ПериодОтпуска;
				ИначеЕсли Год(ПериодОтпуска.Окончание) - Год(ПериодОтпуска.Начало) = 1 Тогда
					Если Месяц(ПериодОтпуска.Окончание) > Месяц(ПериодОтпуска.Начало) Тогда
						НужныйПериод = ПериодОтпуска;
					ИначеЕсли Месяц(ПериодОтпуска.Окончание) + 12 - Месяц(ПериодОтпуска.Начало) >= 9 Тогда
						НужныйПериод = ПериодОтпуска;
					КонецЕсли;
				ИначеЕсли Месяц(ПериодОтпуска.Окончание) - Месяц(ПериодОтпуска.Начало) >= 9 Тогда
					НужныйПериод = ПериодОтпуска;
				КонецЕсли;
			КонецЦикла;
			Если НужныйПериод <> Неопределено Тогда
				ДанныеСотрудника.Вставить("ОтпускНеоплачиваемый", НужныйПериод);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеОтчета;
	
КонецФункции

Процедура ОбработатьИзменениеОрганизацийВНабореПоТаблицеИзменений(ТаблицаАнализаИзменений) Экспорт
	
	// сначала просто удалим дубли
	ТаблицаАнализаИзменений.Свернуть("Организация, Сотрудник, ФлагИзменений");
	
	// Теперь определим организации которые были добавлены в наборы и которые были удалены.
	ТаблицаАнализаИзменений.Свернуть("Организация, Сотрудник", "ФлагИзменений");
	
	СтруктураПоиска = Новый Структура("ФлагИзменений");
	
	СтруктураПоиска.ФлагИзменений = 1;
	ДобавляемыеОрганизацииСотрудников = ТаблицаАнализаИзменений.Скопировать(ТаблицаАнализаИзменений.НайтиСтроки(СтруктураПоиска), "Организация, Сотрудник");
	
	Для Каждого ОрганизацияСотрудника Из ДобавляемыеОрганизацииСотрудников Цикл
		
		Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(ОрганизацияСотрудника.Организация);
		Набор.Отбор.Сотрудник.Установить(ОрганизацияСотрудника.Сотрудник);
		
		СтрокаНабора = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ОрганизацияСотрудника);
		Набор.Записать();
		
	КонецЦикла;
	
	СтруктураПоиска.ФлагИзменений = -1;
	УдаляемыеОрганизацииСотрудников = ТаблицаАнализаИзменений.Скопировать(ТаблицаАнализаИзменений.НайтиСтроки(СтруктураПоиска), "Организация, Сотрудник");
	
	Если УдаляемыеОрганизацииСотрудников.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УдаляемыеОрганизацииСотрудников", УдаляемыеОрганизацииСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УдаляемыеОрганизацииСотрудников.Сотрудник КАК Сотрудник,
			|	УдаляемыеОрганизацииСотрудников.Организация КАК Организация
			|ПОМЕСТИТЬ ВТУдаляемыеОрганизацииСотрудников
			|ИЗ
			|	&УдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
			|	ВложенныйЗапрос.Организация КАК Организация
			|ИЗ
			|	(ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник КАК Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация КАК Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|					ГДЕ
			|						КадроваяИсторияСотрудников.Сотрудник = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И КадроваяИсторияСотрудников.Организация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК Удалять
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|					ГДЕ
			|						ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						Справочник.Сотрудники КАК Сотрудники
			|					ГДЕ
			|						Сотрудники.Ссылка = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И Сотрудники.ГоловнаяОрганизация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Сотрудник,
			|	ВложенныйЗапрос.Организация
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(ВложенныйЗапрос.Удалять) = ИСТИНА";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РеестрКадровыхПриказов

Функция ПараметрыПостроенияВТРеестрКадровыхПриказов()
	
	ПараметрыПостроения = Новый Структура;
	
	НастройкиКадровогоУчета = КадровыйУчет.НастройкиКадровогоУчета();
	ПараметрыПостроения.Вставить("ВключатьСобытияИзменениеОплатыТруда", НастройкиКадровогоУчета.ОтображатьИзмененияОплатыТрудаВЛичнойКарточке);
	ПараметрыПостроения.Вставить("ВидыДоговоров", Новый Массив);
	ПараметрыПостроения.Вставить("УсловиеОтбораВидовДоговоров", "НЕ В");
	ПараметрыПостроения.Вставить("ВключатьСобытияУвольнений", Ложь);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция ПараметрыПостроенияВТРеестрКадровыхПриказовПоСпискуСотрудников() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТРеестрКадровыхПриказов();
	
	ПараметрыПостроения.Вставить("ДатаНачала", '00010101');
	ПараметрыПостроения.Вставить("ДатаОкончания", '00010101');
	
	ПараметрыПостроения.Вставить("Сотрудники");
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция ПараметрыПостроенияВТРеестрКадровыхПриказовПоВременнойТаблице() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТРеестрКадровыхПриказов();
	
	ПараметрыПостроения.Вставить("ИмяВТОтборовСотрудников", "ВТОтборовСотрудников");
	
	ПараметрыПостроения.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ПараметрыПостроения.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ПараметрыПостроения.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	
	Возврат ПараметрыПостроения;
	
КонецФункции


Функция ЗапросВТРеестрКадровыхПриказов(ТолькоРазрешенные, ПараметрыПостроения, ИмяВТРеестрКадровыхПриказов = "ВТРеестрКадровыхПриказов") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком());
	
	Если ПараметрыПостроения.Свойство("Сотрудники") Тогда
		ПостроениеПоСпискуСотрудников = Истина;
	Иначе
		ПостроениеПоСпискуСотрудников = Ложь;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	
	Если ПостроениеПоСпискуСотрудников Тогда
		
		Запрос.УстановитьПараметр("ПараметрДатаНачалаДляРеестраКадровыхПриказов", ПараметрыПостроения.ДатаНачала);
		Запрос.УстановитьПараметр("ПараметрДатаОкончанияДляРеестраКадровыхПриказов", ПараметрыПостроения.ДатаОкончания);
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&ПараметрДатаНачалаДляРеестраКадровыхПриказов КАК ДатаНачала,
			|	&ПараметрДатаОкончанияДляРеестраКадровыхПриказов КАК ДатаОкончания,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТОтборовСотрудниковДляРеестраКадровыхПриказов
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники");
		
		Если ЗначениеЗаполнено(ПараметрыПостроения.Сотрудники) Тогда
			
			Запрос.УстановитьПараметр("ПараметрСотрудникиДляРеестраКадровыхПриказов", ПараметрыПостроения.Сотрудники);
			
			ТекстыЗапросов.Добавить(
				"ГДЕ
				|	Сотрудники.Ссылка В(&ПараметрСотрудникиДляРеестраКадровыхПриказов)");
			
		КонецЕсли;
		
		ПараметрыПостроенияПоВТ = ПараметрыПостроенияВТРеестрКадровыхПриказовПоВременнойТаблице();
		ПараметрыПостроенияПоВТ.ИмяВТОтборовСотрудников = "ВТОтборовСотрудниковДляРеестраКадровыхПриказов";
		ПараметрыПостроенияПоВТ.ВключатьСобытияИзменениеОплатыТруда = ПараметрыПостроения.ВключатьСобытияИзменениеОплатыТруда;
		ПараметрыПостроенияПоВТ.ВидыДоговоров = ПараметрыПостроения.ВидыДоговоров;
		ПараметрыПостроенияПоВТ.УсловиеОтбораВидовДоговоров = ПараметрыПостроения.УсловиеОтбораВидовДоговоров;
		ПараметрыПостроенияПоВТ.ВключатьСобытияУвольнений = ПараметрыПостроения.ВключатьСобытияУвольнений;
		
		ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	Иначе
		ПараметрыПостроенияПоВТ = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПостроения);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ПараметрыПостроенияПоВТ.ИмяВТОтборовСотрудников, ПараметрыПостроенияПоВТ.ИмяПоляСотрудник);
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", ПараметрыПостроенияПоВТ.ИмяПоляДатаНачала);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаОкончания", ПараметрыПостроенияПоВТ.ИмяПоляДатаОкончания);
	
	ИсключаемыеКадровыеСобытия = Новый Массив;
	ИсключаемыеКадровыеСобытия.Добавить(Перечисления.ВидыКадровыхСобытий.НеподтвержденныеДанные);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "НЕ В", ИсключаемыеКадровыеСобытия);
		
	
	Если ЗначениеЗаполнено(ПараметрыПостроенияПоВТ.ВидыДоговоров) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "ВидДоговора", ПараметрыПостроенияПоВТ.УсловиеОтбораВидовДоговоров, ПараметрыПостроенияПоВТ.ВидыДоговоров);
		
	КонецЕсли;
	
	ЗапросВТ = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТКадроваяИсторияСотрудниковДляРеестраПриказов");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	ТекстыЗапросов.Добавить(ЗапросВТ.Текст);
	ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ВТПериодыУвольнений
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
	
	ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	Если ПараметрыПостроенияПоВТ.ВключатьСобытияИзменениеОплатыТруда Тогда
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			ПараметрыПостроенияПоВТ.ИмяВТОтборовСотрудников, ПараметрыПостроенияПоВТ.ИмяПоляСотрудник);
		
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", ПараметрыПостроенияПоВТ.ИмяПоляДатаНачала);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаОкончания", ПараметрыПостроенияПоВТ.ИмяПоляДатаОкончания);
		
		ЗапросВТ = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
			"ПлановыеНачисления",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			"ВТПлановыеНачисленияДляРеестраПриказов");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		ТекстыЗапросов.Добавить(ЗапросВТ.Текст);
		ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
		ЗапросВТ = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			"ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковДляРеестраПриказов");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		ТекстыЗапросов.Добавить(ЗапросВТ.Текст);
		ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
		ЗапросВТ = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
			"ГрафикРаботыСотрудников",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			"ВТГрафикРаботыСотрудниковДляРеестраПриказов");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		ТекстыЗапросов.Добавить(ЗапросВТ.Текст);
		ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
		ТекстЗапросаИзмененийОплатыТруда = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник КАК Сотрудник,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор КАК Регистратор,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи КАК Период,
			|	МАКСИМУМ(КадроваяИсторияСотрудниковПериодКадровыхДанных.Период) КАК ПериодКадровыхДанных
			|ПОМЕСТИТЬ ВТСобытияИзмененияОплатыТрудаПредварительно
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковДляРеестраПриказов КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудников
			|		ПО ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор = КадроваяИсторияСотрудников.Регистратор
			|			И (НАЧАЛОПЕРИОДА(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи, ДЕНЬ) = НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.ПериодЗаписи, ДЕНЬ))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудниковПериодКадровыхДанных
			|		ПО ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник = КадроваяИсторияСотрудниковПериодКадровыхДанных.Сотрудник
			|			И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Организация = КадроваяИсторияСотрудниковПериодКадровыхДанных.Организация
			|			И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи >= КадроваяИсторияСотрудниковПериодКадровыхДанных.ПериодЗаписи
			|ГДЕ
			|	КадроваяИсторияСотрудников.Сотрудник ЕСТЬ NULL
			|	И ТИПЗНАЧЕНИЯ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор) <> ТИП(Документ.Командировка)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Регистратор,
			|	ПлановыеНачисления.ПериодЗаписи,
			|	МАКСИМУМ(КадроваяИсторияСотрудниковПериодКадровыхДанных.Период)
			|ИЗ
			|	ВТПлановыеНачисленияДляРеестраПриказов КАК ПлановыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудников
			|		ПО ПлановыеНачисления.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И ПлановыеНачисления.Регистратор = КадроваяИсторияСотрудников.Регистратор
			|			И (НАЧАЛОПЕРИОДА(ПлановыеНачисления.ПериодЗаписи, ДЕНЬ) = НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.ПериодЗаписи, ДЕНЬ))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковДляРеестраПриказов КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
			|		ПО ПлановыеНачисления.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
			|			И ПлановыеНачисления.Регистратор = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
			|			И (НАЧАЛОПЕРИОДА(ПлановыеНачисления.ПериодЗаписи, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи, ДЕНЬ))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудниковПериодКадровыхДанных
			|		ПО ПлановыеНачисления.Сотрудник = КадроваяИсторияСотрудниковПериодКадровыхДанных.Сотрудник
			|			И ПлановыеНачисления.ПериодЗаписи >= КадроваяИсторияСотрудниковПериодКадровыхДанных.ПериодЗаписи
			|ГДЕ
			|	КадроваяИсторияСотрудников.Сотрудник ЕСТЬ NULL
			|	И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|	И НЕ ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий)
			|	И ТИПЗНАЧЕНИЯ(ПлановыеНачисления.Регистратор) <> ТИП(Документ.Командировка)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Регистратор,
			|	ПлановыеНачисления.ПериодЗаписи
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГрафикРаботыСотрудников.Сотрудник,
			|	ГрафикРаботыСотрудников.Регистратор,
			|	ГрафикРаботыСотрудников.ПериодЗаписи,
			|	МАКСИМУМ(КадроваяИсторияСотрудниковПериодКадровыхДанных.Период)
			|ИЗ
			|	ВТГрафикРаботыСотрудниковДляРеестраПриказов КАК ГрафикРаботыСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудников
			|		ПО ГрафикРаботыСотрудников.Регистратор = КадроваяИсторияСотрудников.Регистратор
			|			И ГрафикРаботыСотрудников.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.ПериодЗаписи, ДЕНЬ) = НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.ПериодЗаписи, ДЕНЬ))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковДляРеестраПриказов КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
			|		ПО ГрафикРаботыСотрудников.Регистратор = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
			|			И ГрафикРаботыСотрудников.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.ПериодЗаписи, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи, ДЕНЬ))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияДляРеестраПриказов КАК ПлановыеНачисления
			|		ПО ГрафикРаботыСотрудников.Регистратор = ПлановыеНачисления.Регистратор
			|			И ГрафикРаботыСотрудников.Сотрудник = ПлановыеНачисления.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.ПериодЗаписи, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПлановыеНачисления.ПериодЗаписи, ДЕНЬ))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудниковПериодКадровыхДанных
			|		ПО ГрафикРаботыСотрудников.Сотрудник = КадроваяИсторияСотрудниковПериодКадровыхДанных.Сотрудник
			|			И ГрафикРаботыСотрудников.ПериодЗаписи >= КадроваяИсторияСотрудниковПериодКадровыхДанных.ПериодЗаписи
			|ГДЕ
			|	КадроваяИсторияСотрудников.Сотрудник ЕСТЬ NULL
			|	И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|	И ПлановыеНачисления.Сотрудник ЕСТЬ NULL
			|	И ТИПЗНАЧЕНИЯ(ГрафикРаботыСотрудников.Регистратор) <> ТИП(Документ.Командировка)
			|
			|СГРУППИРОВАТЬ ПО
			|	ГрафикРаботыСотрудников.Сотрудник,
			|	ГрафикРаботыСотрудников.Регистратор,
			|	ГрафикРаботыСотрудников.ПериодЗаписи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СобытияИзмененияОплатыТруда.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(СобытияИзмененияОплатыТруда.Период) КАК Период
			|ПОМЕСТИТЬ ВТПериодыОплатыТрудаНаНачалоПериода
			|ИЗ
			|	ВТСобытияИзмененияОплатыТрудаПредварительно КАК СобытияИзмененияОплатыТруда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовСотрудниковДляРеестраКадровыхПриказов КАК ТаблицаОтборов
			|		ПО СобытияИзмененияОплатыТруда.Сотрудник = ТаблицаОтборов.Сотрудник
			|			И СобытияИзмененияОплатыТруда.Период <= ТаблицаОтборов.ДатаНачала
			|
			|СГРУППИРОВАТЬ ПО
			|	СобытияИзмененияОплатыТруда.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СобытияИзмененияОплатыТруда.Сотрудник КАК Сотрудник,
			|	СобытияИзмененияОплатыТруда.Регистратор КАК Регистратор,
			|	СобытияИзмененияОплатыТруда.Период КАК Период,
			|	СобытияИзмененияОплатыТруда.ПериодКадровыхДанных КАК ПериодКадровыхДанных
			|ПОМЕСТИТЬ ВТСобытияИзмененияОплатыТруда
			|ИЗ
			|	ВТСобытияИзмененияОплатыТрудаПредварительно КАК СобытияИзмененияОплатыТруда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыОплатыТрудаНаНачалоПериода КАК ПериодыОплатыТрудаНаНачалоПериода
			|		ПО СобытияИзмененияОплатыТруда.Сотрудник = ПериодыОплатыТрудаНаНачалоПериода.Сотрудник
			|			И СобытияИзмененияОплатыТруда.Период = ПериодыОплатыТрудаНаНачалоПериода.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СобытияИзмененияОплатыТруда.Сотрудник,
			|	СобытияИзмененияОплатыТруда.Регистратор,
			|	СобытияИзмененияОплатыТруда.Период,
			|	СобытияИзмененияОплатыТруда.ПериодКадровыхДанных
			|ИЗ
			|	ВТСобытияИзмененияОплатыТрудаПредварительно КАК СобытияИзмененияОплатыТруда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовСотрудниковДляРеестраКадровыхПриказов КАК ТаблицаОтборов
			|		ПО СобытияИзмененияОплатыТруда.Сотрудник = ТаблицаОтборов.Сотрудник
			|			И СобытияИзмененияОплатыТруда.Период > ТаблицаОтборов.ДатаНачала";
		
		ТекстЗапросаИзмененийОплатыТруда = СтрЗаменить(ТекстЗапросаИзмененийОплатыТруда,
			"ВТОтборовСотрудниковДляРеестраКадровыхПриказов", ПараметрыПостроенияПоВТ.ИмяВТОтборовСотрудников);
		
		ТекстЗапросаИзмененийОплатыТруда = СтрЗаменить(ТекстЗапросаИзмененийОплатыТруда,
			"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляСотрудник);
		
		ТекстЗапросаИзмененийОплатыТруда = СтрЗаменить(ТекстЗапросаИзмененийОплатыТруда,
			"ТаблицаОтборов.ДатаНачала", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляДатаНачала);
		
		ТекстыЗапросов.Добавить(ТекстЗапросаИзмененийОплатыТруда);
		ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.ПериодЗаписи КАК Период,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.Должность КАК Должность,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
		|	КадроваяИсторияСотрудников.ВидДоговора КАК ВидДоговора
		|ПОМЕСТИТЬ ВТРеестрБезРазрядовКатегорий
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудников");
	
	Если ПараметрыПостроенияПоВТ.ВключатьСобытияИзменениеОплатыТруда Тогда
		
		ТекстСоединения =
			"		ЛЕВОЕ СОЕДИНЕНИЕ ВТСобытияИзмененияОплатыТруда КАК СобытияИзмененияОплатыТруда
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовСотрудниковДляРеестраКадровыхПриказов КАК ТаблицаОтборов
			|			ПО СобытияИзмененияОплатыТруда.Сотрудник = ТаблицаОтборов.Сотрудник
			|				И СобытияИзмененияОплатыТруда.Период < ТаблицаОтборов.ДатаНачала
			|		ПО КадроваяИсторияСотрудников.Сотрудник = СобытияИзмененияОплатыТруда.Сотрудник
			|			И КадроваяИсторияСотрудников.ПериодЗаписи < СобытияИзмененияОплатыТруда.Период
			|ГДЕ
			|	СобытияИзмененияОплатыТруда.Сотрудник ЕСТЬ NULL
			|	И КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)";
		
		ТекстСоединения = СтрЗаменить(ТекстСоединения,
			"ВТОтборовСотрудниковДляРеестраКадровыхПриказов", ПараметрыПостроенияПоВТ.ИмяВТОтборовСотрудников);
		
		ТекстСоединения = СтрЗаменить(ТекстСоединения,
			"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляСотрудник);
		
		ТекстСоединения = СтрЗаменить(ТекстСоединения,
			"ТаблицаОтборов.ДатаНачала", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляДатаНачала);
		
		ТекстыЗапросов.Добавить(ТекстСоединения);
		
		ТекстыЗапросов.Добавить("ОБЪЕДИНИТЬ");
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	СобытияИзмененияОплатыТруда.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудников.Организация КАК Организация,
			|	СобытияИзмененияОплатыТруда.Регистратор КАК Регистратор,
			|	СобытияИзмененияОплатыТруда.Период КАК Период,
			|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
			|	КадроваяИсторияСотрудников.Должность КАК Должность,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ИзменениеОплатыТруда) КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.ВидДоговора КАК ВидДоговора
			|ИЗ
			|	ВТСобытияИзмененияОплатыТруда КАК СобытияИзмененияОплатыТруда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляРеестраПриказов КАК КадроваяИсторияСотрудников
			|		ПО СобытияИзмененияОплатыТруда.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И СобытияИзмененияОплатыТруда.ПериодКадровыхДанных = КадроваяИсторияСотрудников.Период");
		
	Иначе
		
		ТекстыЗапросов.Добавить("
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)");
		
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ТекстЗапросаСотрудниковСДаннымиНаНачало =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеестрБезРазрядовКатегорий.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСДаннымиНаНачало
		|ИЗ
		|	ВТРеестрБезРазрядовКатегорий КАК РеестрБезРазрядовКатегорий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовСотрудниковДляРеестраКадровыхПриказов КАК ТаблицаОтборов
		|		ПО РеестрБезРазрядовКатегорий.Сотрудник = ТаблицаОтборов.Сотрудник
		|			И (НАЧАЛОПЕРИОДА(РеестрБезРазрядовКатегорий.Период, ДЕНЬ) <= ТаблицаОтборов.ДатаНачала)";
	
	ТекстЗапросаСотрудниковСДаннымиНаНачало = СтрЗаменить(ТекстЗапросаСотрудниковСДаннымиНаНачало,
		"ВТОтборовСотрудниковДляРеестраКадровыхПриказов", ПараметрыПостроенияПоВТ.ИмяВТОтборовСотрудников);
	
	ТекстЗапросаСотрудниковСДаннымиНаНачало = СтрЗаменить(ТекстЗапросаСотрудниковСДаннымиНаНачало,
		"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляСотрудник);
	
	ТекстЗапросаСотрудниковСДаннымиНаНачало = СтрЗаменить(ТекстЗапросаСотрудниковСДаннымиНаНачало,
		"ТаблицаОтборов.ДатаНачала", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляДатаНачала);
	
	ТекстыЗапросов.Добавить(ТекстЗапросаСотрудниковСДаннымиНаНачало);
	
	ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
	ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании");
	
	Если ИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРеестрБезРазрядовКатегорий", "Сотрудник");
		
		ЗапросВТ = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"РазрядыКатегорииСотрудников",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			,
			Истина);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		ТекстыЗапросов.Добавить(ЗапросВТ.Текст);
		ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	ИначеЕсли ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании Тогда
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра(
			"ВТРеестрБезРазрядовКатегорий", "Период", "ДолжностьПоШтатномуРасписанию");
		
		ЗапросВТ = УправлениеШтатнымРасписанием.ЗапросВТШтатноеРасписание(
			ТолькоРазрешенные, ПараметрыПостроения, "РазрядКатегория");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		ТекстыЗапросов.Добавить(ЗапросВТ.Текст);
		ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	ТекстЗапросаКРееструКадровыхПриказов =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрПриказов.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(РеестрПриказов.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТПоследниеДатыРеестра
		|ИЗ
		|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрПриказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовСотрудниковДляРеестраКадровыхПриказов КАК ТаблицаОтборов
		|		ПО РеестрПриказов.Сотрудник = ТаблицаОтборов.Сотрудник
		|			И РеестрПриказов.Дата <= ТаблицаОтборов.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСДаннымиНаНачало КАК СотрудникиСДаннымиНаНачало
		|		ПО РеестрПриказов.Сотрудник = СотрудникиСДаннымиНаНачало.Сотрудник
		|ГДЕ
		|	СотрудникиСДаннымиНаНачало.Сотрудник ЕСТЬ NULL
		|	И ТИПЗНАЧЕНИЯ(РеестрПриказов.Регистратор) = ТИП(Документ.ПереносДанных)
		|	И &УсловиеОтбораВидовДоговоров
		|
		|СГРУППИРОВАТЬ ПО
		|	РеестрПриказов.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрПриказов.Сотрудник КАК Сотрудник,
		|	РеестрПриказов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РеестрПриказов.Организация КАК Организация,
		|	РеестрПриказов.Регистратор КАК Регистратор,
		|	РеестрПриказов.ДокументОснование КАК ДокументОснование,
		|	РеестрПриказов.Дата КАК Период,
		|	РеестрПриказов.Подразделение КАК Подразделение,
		|	РеестрПриказов.Должность КАК Должность,
		|	NULL КАК ДолжностьПоШтатномуРасписанию,
		|	РеестрПриказов.Разряд КАК Разряд,
		|	РеестрПриказов.ВидСобытия КАК ВидСобытия,
		|	РеестрПриказов.ВидДоговора КАК ВидДоговора,
		|	ВЫРАЗИТЬ(РеестрПриказов.ТарифнаяСтавкаНадбавка КАК СТРОКА(1024)) КАК ТарифнаяСтавкаНадбавка,
		|	ВЫРАЗИТЬ(РеестрПриказов.НомерПриказа КАК СТРОКА(1024)) КАК НомерПриказа,
		|	РеестрПриказов.ДатаПриказа КАК ДатаПриказа,
		|	РеестрПриказов.Основание КАК Основание,
		|	ИСТИНА КАК ДанныеДоНачалаУчета
		|ПОМЕСТИТЬ ВТРеестрКадровыхПриказов
		|ИЗ
		|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрПриказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеДатыРеестра КАК ТаблицаОтборов
		|		ПО РеестрПриказов.Сотрудник = ТаблицаОтборов.Сотрудник
		|			И РеестрПриказов.Дата = ТаблицаОтборов.Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеестрПриказов.Сотрудник,
		|	РеестрПриказов.ФизическоеЛицо,
		|	РеестрПриказов.Организация,
		|	РеестрПриказов.Регистратор,
		|	РеестрПриказов.ДокументОснование,
		|	РеестрПриказов.Дата,
		|	РеестрПриказов.Подразделение,
		|	РеестрПриказов.Должность,
		|	NULL,
		|	РеестрПриказов.Разряд,
		|	РеестрПриказов.ВидСобытия,
		|	РеестрПриказов.ВидДоговора,
		|	ВЫРАЗИТЬ(РеестрПриказов.ТарифнаяСтавкаНадбавка КАК СТРОКА(1024)),
		|	ВЫРАЗИТЬ(РеестрПриказов.НомерПриказа КАК СТРОКА(1024)),
		|	РеестрПриказов.ДатаПриказа,
		|	РеестрПриказов.Основание,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрПриказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовСотрудниковДляРеестраКадровыхПриказов КАК ТаблицаОтборов
		|		ПО РеестрПриказов.Сотрудник = ТаблицаОтборов.Сотрудник
		|			И РеестрПриказов.Дата >= ТаблицаОтборов.ДатаНачала
		|			И РеестрПриказов.Дата <= ТаблицаОтборов.ДатаОкончания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеДатыРеестра КАК ТаблицаПоследнихДатРеестра
		|		ПО РеестрПриказов.Сотрудник = ТаблицаПоследнихДатРеестра.Сотрудник
		|			И РеестрПриказов.Дата = ТаблицаПоследнихДатРеестра.Дата
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РеестрПриказов.Регистратор) = ТИП(Документ.ПереносДанных)
		|	И ТаблицаПоследнихДатРеестра.Сотрудник ЕСТЬ NULL
		|	И &УсловиеОтбораВидовДоговоров";
	
	Если ЗначениеЗаполнено(ПараметрыПостроенияПоВТ.ВидыДоговоров) Тогда
		
		ТекстУсловия = СтрЗаменить("И РеестрПриказов.ВидДоговора &УсловиеОтбораВидовДоговоров (&ВидыДоговоровРеестра)",
			"&УсловиеОтбораВидовДоговоров", ПараметрыПостроенияПоВТ.УсловиеОтбораВидовДоговоров);
		
		ТекстЗапросаКРееструКадровыхПриказов = СтрЗаменить(ТекстЗапросаКРееструКадровыхПриказов, "И &УсловиеОтбораВидовДоговоров", ТекстУсловия);
		
		Запрос.УстановитьПараметр("ВидыДоговоровРеестра", ПараметрыПостроенияПоВТ.ВидыДоговоров);
		
	Иначе
		ТекстЗапросаКРееструКадровыхПриказов = СтрЗаменить(ТекстЗапросаКРееструКадровыхПриказов, "И &УсловиеОтбораВидовДоговоров", "");
	КонецЕсли;
	
	ТекстЗапросаКРееструКадровыхПриказов = СтрЗаменить(ТекстЗапросаКРееструКадровыхПриказов,
		"ВТОтборовСотрудниковДляРеестраКадровыхПриказов", ПараметрыПостроенияПоВТ.ИмяВТОтборовСотрудников);
	
	ТекстЗапросаКРееструКадровыхПриказов = СтрЗаменить(ТекстЗапросаКРееструКадровыхПриказов,
		"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляСотрудник);
	
	ТекстЗапросаКРееструКадровыхПриказов = СтрЗаменить(ТекстЗапросаКРееструКадровыхПриказов,
		"ТаблицаОтборов.ДатаНачала", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляДатаНачала);
	
	ТекстЗапросаКРееструКадровыхПриказов = СтрЗаменить(ТекстЗапросаКРееструКадровыхПриказов,
		"ТаблицаОтборов.ДатаОкончания", "ТаблицаОтборов." + ПараметрыПостроенияПоВТ.ИмяПоляДатаОкончания);
	
	ТекстыЗапросов.Добавить(ТекстЗапросаКРееструКадровыхПриказов);
	
	ТекстыЗапросов.Добавить("ОБЪЕДИНИТЬ ВСЕ");
	
	Если ИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
		
		ТекстДополнительногоЗапроса =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудников.Организация КАК Организация,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
			|	КадроваяИсторияСотрудников.Регистратор КАК ДокументОснование,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
			|	КадроваяИсторияСотрудников.Должность КАК Должность,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	РазрядыКатегорииСотрудников.РазрядКатегория КАК РазрядКатегория,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.ВидДоговора КАК ВидДоговора,
			|	NULL КАК ТарифнаяСтавкаНадбавка,
			|	НЕОПРЕДЕЛЕНО КАК НомерПриказа,
			|	НЕОПРЕДЕЛЕНО КАК ДатаПриказа,
			|	NULL КАК Основание,
			|	ЛОЖЬ КАК ДанныеДоНачалаУчета
			|ИЗ
			|	ВТРеестрБезРазрядовКатегорий КАК КадроваяИсторияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазрядыКатегорииСотрудниковСрезПоследних КАК РазрядыКатегорииСотрудников
			|		ПО КадроваяИсторияСотрудников.Сотрудник = РазрядыКатегорииСотрудников.Сотрудник
			|			И КадроваяИсторияСотрудников.Период = РазрядыКатегорииСотрудников.Период";
		
		Если Не ПараметрыПостроенияПоВТ.ВключатьСобытияУвольнений Тогда
			
			ТекстДополнительногоЗапроса = ТекстДополнительногоЗапроса + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыУвольнений КАК ПериодыУвольнений
				|		ПО КадроваяИсторияСотрудников.Сотрудник = ПериодыУвольнений.Сотрудник
				|			И КадроваяИсторияСотрудников.Период >= ПериодыУвольнений.Период
				|ГДЕ
				|	ПериодыУвольнений.Сотрудник ЕСТЬ NULL";
			
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстДополнительногоЗапроса);
		
	ИначеЕсли ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании Тогда
		
		ТекстДополнительногоЗапроса =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудников.Организация КАК Организация,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
			|	КадроваяИсторияСотрудников.Регистратор КАК ДокументОснование,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
			|	КадроваяИсторияСотрудников.Должность КАК Должность,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	ШтатноеРасписание.РазрядКатегория КАК РазрядКатегория,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.ВидДоговора КАК ВидДоговора,
			|	NULL КАК ТарифнаяСтавкаНадбавка,
			|	НЕОПРЕДЕЛЕНО КАК НомерПриказа,
			|	НЕОПРЕДЕЛЕНО КАК ДатаПриказа,
			|	NULL КАК Основание,
			|	ЛОЖЬ КАК ДанныеДоНачалаУчета
			|ИЗ
			|	ВТРеестрБезРазрядовКатегорий КАК КадроваяИсторияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.ПозицияШтатногоРасписания
			|			И (НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ) = ШтатноеРасписание.Период)";
		
		Если Не ПараметрыПостроенияПоВТ.ВключатьСобытияУвольнений Тогда
			
			ТекстДополнительногоЗапроса = ТекстДополнительногоЗапроса + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыУвольнений КАК ПериодыУвольнений
				|		ПО КадроваяИсторияСотрудников.Сотрудник = ПериодыУвольнений.Сотрудник
				|			И КадроваяИсторияСотрудников.Период >= ПериодыУвольнений.Период
				|ГДЕ
				|	ПериодыУвольнений.Сотрудник ЕСТЬ NULL";
			
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстДополнительногоЗапроса);
		
	Иначе
		
		ТекстДополнительногоЗапроса =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудников.Организация КАК Организация,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
			|	КадроваяИсторияСотрудников.Регистратор КАК ДокументОснование,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
			|	КадроваяИсторияСотрудников.Должность КАК Должность,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	NULL КАК РазрядКатегория,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.ВидДоговора КАК ВидДоговора,
			|	NULL КАК ТарифнаяСтавкаНадбавка,
			|	НЕОПРЕДЕЛЕНО КАК НомерПриказа,
			|	НЕОПРЕДЕЛЕНО КАК ДатаПриказа,
			|	NULL КАК Основание,
			|	ЛОЖЬ КАК ДанныеДоНачалаУчета
			|ИЗ
			|	ВТРеестрБезРазрядовКатегорий КАК КадроваяИсторияСотрудников";
		
		Если Не ПараметрыПостроенияПоВТ.ВключатьСобытияУвольнений Тогда
			
			ТекстДополнительногоЗапроса = ТекстДополнительногоЗапроса + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыУвольнений КАК ПериодыУвольнений
				|		ПО КадроваяИсторияСотрудников.Сотрудник = ПериодыУвольнений.Сотрудник
				|			И КадроваяИсторияСотрудников.Период >= ПериодыУвольнений.Период
				|ГДЕ
				|	ПериодыУвольнений.Сотрудник ЕСТЬ NULL";
			
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстДополнительногоЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТРеестрКадровыхПриказов", ИмяВТРеестрКадровыхПриказов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТРеестрКадровыхПриказов(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, ИмяВТРеестрКадровыхПриказов = "ВТРеестрКадровыхПриказов") Экспорт
	
	Запрос = ЗапросВТРеестрКадровыхПриказов(ТолькоРазрешенные, ПараметрыПостроения, ИмяВТРеестрКадровыхПриказов);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РеквизитыКадровыхПриказов(КадровыеПриказы) Экспорт
	
	РеквизитыПриказов = Новый Соответствие;
	
	СсылкиПоТипам = Новый Соответствие;
	ПолныеИменаМетаданныхТипов = Новый Соответствие;
	ТипыСНомеромПриказа = Новый Соответствие;
	ТипыСНомеромПервичногоДокумента = Новый Соответствие;
	Для Каждого КадровыйПриказ Из КадровыеПриказы Цикл
		
		Если Не ЗначениеЗаполнено(КадровыйПриказ) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПриказа = ТипЗнч(КадровыйПриказ);
		ЕстьРеквизитНомерПриказа = ТипыСНомеромПриказа.Получить(ТипПриказа);
		ЕстьРеквизитНомерПервичногоДокумента = ТипыСНомеромПервичногоДокумента.Получить(ТипПриказа);
		Если ЕстьРеквизитНомерПриказа = Неопределено И ЕстьРеквизитНомерПервичногоДокумента = Неопределено Тогда
			
			МетаданныеДокумента = КадровыйПриказ.Метаданные();
			Если МетаданныеДокумента.Реквизиты.Найти("НомерПриказа") <> Неопределено Тогда
				ТипыСНомеромПриказа.Вставить(ТипПриказа, Истина);
			ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("НомерПервичногоДокумента") <> Неопределено Тогда
				ТипыСНомеромПервичногоДокумента.Вставить(ТипПриказа, Истина);
			Иначе
				ТипыСНомеромПриказа.Вставить(ТипПриказа, Ложь);
			КонецЕсли;
			
			ПолныеИменаМетаданныхТипов.Вставить(ТипПриказа, МетаданныеДокумента.ПолноеИмя());
			
		КонецЕсли;
		
		СсылкиТипа = СсылкиПоТипам.Получить(ТипПриказа);
		Если СсылкиТипа = Неопределено Тогда
			СсылкиТипа = Новый Массив;
			СсылкиПоТипам.Вставить(ТипПриказа, СсылкиТипа)
		КонецЕсли;
		
		СсылкиТипа.Добавить(КадровыйПриказ);
		
	КонецЦикла;
	
	Если СсылкиПоТипам.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		ТекстыЗапросов = Новый Массив;
		Для Каждого СсылкиПоТипу Из СсылкиПоТипам Цикл
			
			Если ТипыСНомеромПриказа.Получить(СсылкиПоТипу.Ключ) = Истина Тогда
				
				Если СсылкиПоТипу.Ключ = Тип("ДокументСсылка.ПриемНаРаботу")
					Или СсылкиПоТипу.Ключ = Тип("ДокументСсылка.ПриемНаРаботуСписком") Тогда
					
					ТекстЗапроса =
						"ВЫБРАТЬ
						|	ТаблицаДокумента.Ссылка КАК Ссылка,
						|	ТаблицаДокумента.Номер КАК Номер,
						|	ТаблицаДокумента.Дата КАК Дата,
						|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
						|	ТаблицаДокумента.ПриемТрудовымДоговором КАК ПриемТрудовымДоговором
						|ИЗ
						|	&ТаблицаДокумента КАК ТаблицаДокумента
						|ГДЕ
						|	ТаблицаДокумента.Ссылка В(&КадровыеПриказы)";
					
				Иначе
					
					ТекстЗапроса =
						"ВЫБРАТЬ
						|	ТаблицаДокумента.Ссылка КАК Ссылка,
						|	ТаблицаДокумента.Номер КАК Номер,
						|	ТаблицаДокумента.Дата КАК Дата,
						|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
						|	НЕОПРЕДЕЛЕНО КАК ПриемТрудовымДоговором
						|ИЗ
						|	&ТаблицаДокумента КАК ТаблицаДокумента
						|ГДЕ
						|	ТаблицаДокумента.Ссылка В(&КадровыеПриказы)";
					
				КонецЕсли;
				
			ИначеЕсли ТипыСНомеромПервичногоДокумента.Получить(СсылкиПоТипу.Ключ) = Истина Тогда
				
				ТекстЗапроса =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.НомерПервичногоДокумента КАК НомерПриказа,
					|	НЕОПРЕДЕЛЕНО КАК ПриемТрудовымДоговором
					|ИЗ
					|	&ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&КадровыеПриказы)";
				
			Иначе
				
				ТекстЗапроса =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	НЕОПРЕДЕЛЕНО КАК НомерПриказа,
					|	НЕОПРЕДЕЛЕНО Как ПриемТрудовымДоговором
					|ИЗ
					|	&ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&КадровыеПриказы)";
				
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ИсправленныйДокумент", Метаданные.НайтиПоТипу(СсылкиПоТипу.Ключ)) Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокумента.Дата КАК Дата,",
					"ЕСТЬNULL(ЕСТЬNULL(ТаблицаДокумента.ИсправленныйДокумент.ИсправленныйДокумент.Дата, ТаблицаДокумента.ИсправленныйДокумент.Дата), ТаблицаДокумента.Дата) КАК Дата,");
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДокумента", ПолныеИменаМетаданныхТипов.Получить(СсылкиПоТипу.Ключ));
			
			ИмяПараметра = "КадровыеПриказы" + Формат(Запрос.Параметры.Количество(), "ЧН=; ЧГ=");
			Запрос.УстановитьПараметр(ИмяПараметра, СсылкиПоТипу.Значение);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КадровыеПриказы", "&" + ИмяПараметра);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
			
		КонецЦикла;
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, " ОБЪЕДИНИТЬ ВСЕ ");
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеПриказа = Новый Структура("Номер,Дата,НомерПриказа,ПриемТрудовымДоговором");
			ЗаполнитьЗначенияСвойств(ДанныеПриказа, Выборка);
			ДанныеПриказа.НомерПриказа = ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеПриказа.Номер, ДанныеПриказа.НомерПриказа);
			
			РеквизитыПриказов.Вставить(Выборка.Ссылка, ДанныеПриказа);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РеквизитыПриказов;
	
КонецФункции

#КонецОбласти

Процедура ПерезаполнитьДанныеДляПодбораСотрудников() Экспорт
	
	ЗаполнитьДанныеДляПодбораСотрудников(, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|		ПО КадроваяИсторияСотрудников.Регистратор = ЗанятостьПозицийШтатногоРасписания.Регистратор
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.Регистратор ЕСТЬ NULL
		|	И НЕ КадроваяИсторияСотрудников.Регистратор В (&МассивОбновленных)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	МассивРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	Если МассивРегистраторов.Количество() = 0 Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	Запрос.УстановитьПараметр("ИспользоватьБронированиеПозиций", ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.Должность КАК Должность,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
		|	КадроваяИсторияСотрудников.ВидДоговора КАК ВидДоговора,
		|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
		|	КадроваяИсторияСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник КАК ЭтоГоловнойСотрудник
		|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудников
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор В(&МассивРегистраторов)";
	
	Запрос.Выполнить();
	
	ТекстыЗапросов = Новый Массив;
	
	// НачальнаяШтатнаяРасстановка
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ЕСТЬNULL(СведенияКонтрактаДоговораСотрудника.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО КадроваяИсторияСотрудников.Регистратор = СведенияКонтрактаДоговораСотрудника.Регистратор
		|			И КадроваяИсторияСотрудников.Сотрудник = СведенияКонтрактаДоговораСотрудника.Сотрудник
		|			И (СведенияКонтрактаДоговораСотрудника.СрочныйДоговор
		|				ИЛИ СведенияКонтрактаДоговораСотрудника.СезонныйДоговор)
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)
		|	И ТИПЗНАЧЕНИЯ(КадроваяИсторияСотрудников.Регистратор) = ТИП(Документ.ПереносДанных)");
	
	// Прием по трудовым договорам
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ВЫБОР
		|		КОГДА &ИспользоватьБронированиеПозиций
		|				И ПриемНаРаботу.БронированиеПозиции
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Забронирована)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята)
		|	КОНЕЦ КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ЕСТЬNULL(СведенияКонтрактаДоговораСотрудника.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО КадроваяИсторияСотрудников.Регистратор = СведенияКонтрактаДоговораСотрудника.Регистратор
		|			И КадроваяИсторияСотрудников.Сотрудник = СведенияКонтрактаДоговораСотрудника.Сотрудник
		|			И (СведенияКонтрактаДоговораСотрудника.СрочныйДоговор
		|				ИЛИ СведенияКонтрактаДоговораСотрудника.СезонныйДоговор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО КадроваяИсторияСотрудников.Регистратор = ПриемНаРаботу.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|	И ТИПЗНАЧЕНИЯ(КадроваяИсторияСотрудников.Регистратор) <> ТИП(Документ.НачальнаяШтатнаяРасстановка)");
	
	// Восстановление в должности
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ЕСТЬNULL(СведенияКонтрактаДоговораСотрудника.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО КадроваяИсторияСотрудников.Регистратор = СведенияКонтрактаДоговораСотрудника.Регистратор
		|			И КадроваяИсторияСотрудников.Сотрудник = СведенияКонтрактаДоговораСотрудника.Сотрудник
		|			И КадроваяИсторияСотрудников.Период < СведенияКонтрактаДоговораСотрудника.ДатаОкончания
		|			И (СведенияКонтрактаДоговораСотрудника.СрочныйДоговор
		|				ИЛИ СведенияКонтрактаДоговораСотрудника.СезонныйДоговор)
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ВосстановлениеВДолжности)");
	
	// Подработки
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Подработка) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
		|	НазначениеПодработки.ОтсутствующийСотрудник КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НазначениеПодработки КАК НазначениеПодработки
		|		ПО КадроваяИсторияСотрудников.Регистратор = НазначениеПодработки.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор В(&МассивРегистраторов)
		|	И НЕ КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)");
		
	// Увольнения, прекращения подработок
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
	
	// Данные на начало эксплуатации
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.Период КАК Период,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковНеподтвержденныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковНачальныеДанные
		|		ПО КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор = КадроваяИсторияСотрудниковНачальныеДанные.Регистратор
		|			И КадроваяИсторияСотрудниковНеподтвержденныеДанные.Сотрудник = КадроваяИсторияСотрудниковНачальныеДанные.Сотрудник
		|			И КадроваяИсторияСотрудниковНеподтвержденныеДанные.Период < КадроваяИсторияСотрудниковНачальныеДанные.Период
		|			И (КадроваяИсторияСотрудниковНачальныеДанные.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
		|ГДЕ
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудниковНеподтвержденныеДанные.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НеподтвержденныеДанные)
		|	И ТИПЗНАЧЕНИЯ(КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор) = ТИП(Документ.НачальнаяШтатнаяРасстановка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковНачальныеДанные.Период,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.Сотрудник,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО,
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.ДолжностьПоШтатномуРасписанию,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята),
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковНеподтвержденныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковНачальныеДанные
		|		ПО КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор = КадроваяИсторияСотрудниковНачальныеДанные.Регистратор
		|			И КадроваяИсторияСотрудниковНеподтвержденныеДанные.Сотрудник = КадроваяИсторияСотрудниковНачальныеДанные.Сотрудник
		|			И КадроваяИсторияСотрудниковНеподтвержденныеДанные.Период < КадроваяИсторияСотрудниковНачальныеДанные.Период
		|			И (КадроваяИсторияСотрудниковНачальныеДанные.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
		|ГДЕ
		|	КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудниковНеподтвержденныеДанные.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НеподтвержденныеДанные)
		|	И ТИПЗНАЧЕНИЯ(КадроваяИсторияСотрудниковНеподтвержденныеДанные.Регистратор) = ТИП(Документ.НачальнаяШтатнаяРасстановка)");
	
	// Кадровые переводы
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбновленных, МассивРегистраторов);
	Иначе
		
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			МассивОбновленных.Добавить(Выборка.Регистратор);
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗанятостьПозицийШтатногоРасписания.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
		РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СформироватьДвиженияИнтервальногоРегистраПоМассивуРегистраторов(
			МассивРегистраторов, ПараметрыОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписанияИспр(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КадроваяИсторияСотрудниковИспр.РегистраторИзмерение КАК РегистраторИзмерение
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИспр КАК КадроваяИсторияСотрудниковИспр
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИспр КАК ЗанятостьПозицийШтатногоРасписанияИспр
		|		ПО КадроваяИсторияСотрудниковИспр.РегистраторИзмерение = ЗанятостьПозицийШтатногоРасписанияИспр.РегистраторИзмерение
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписанияИспр.РегистраторИзмерение ЕСТЬ NULL
		|	И НЕ КадроваяИсторияСотрудниковИспр.РегистраторИзмерение В (&МассивОбновленных)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	МассивРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегистраторИзмерение");
	Если МассивРегистраторов.Количество() = 0 Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	Запрос.УстановитьПараметр("ИспользоватьБронированиеПозиций", ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций"));
	
	ТекстыЗапросов = Новый Массив;
	
	// Прием по трудовым договорам
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ПериодИзмерение КАК ПериодИзмерение,
		|	КадроваяИсторияСотрудников.РегистраторИзмерение КАК РегистраторИзмерение,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ВЫБОР
		|		КОГДА &ИспользоватьБронированиеПозиций
		|				И ПриемНаРаботу.БронированиеПозиции
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Забронирована)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята)
		|	КОНЕЦ КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ЕСТЬNULL(СведенияКонтрактаДоговораСотрудника.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИспр КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО КадроваяИсторияСотрудников.РегистраторИзмерение = СведенияКонтрактаДоговораСотрудника.Регистратор
		|			И КадроваяИсторияСотрудников.Сотрудник = СведенияКонтрактаДоговораСотрудника.Сотрудник
		|			И (СведенияКонтрактаДоговораСотрудника.СрочныйДоговор
		|				ИЛИ СведенияКонтрактаДоговораСотрудника.СезонныйДоговор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО КадроваяИсторияСотрудников.РегистраторИзмерение = ПриемНаРаботу.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
		|		ПО КадроваяИсторияСотрудников.РегистраторИзмерение = ПриемНаРаботуСпискомСотрудники.Ссылка
		|			И КадроваяИсторияСотрудников.Сотрудник = ПриемНаРаботуСпискомСотрудники.Сотрудник
		|ГДЕ
		|	КадроваяИсторияСотрудников.РегистраторИзмерение В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|	И ТИПЗНАЧЕНИЯ(КадроваяИсторияСотрудников.РегистраторИзмерение) <> ТИП(Документ.НачальнаяШтатнаяРасстановка)");
	
	// Восстановление в должности
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ПериодИзмерение КАК ПериодИзмерение,
		|	КадроваяИсторияСотрудников.РегистраторИзмерение КАК РегистраторИзмерение,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ЕСТЬNULL(СведенияКонтрактаДоговораСотрудника.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИспр КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО КадроваяИсторияСотрудников.РегистраторИзмерение = СведенияКонтрактаДоговораСотрудника.Регистратор
		|			И КадроваяИсторияСотрудников.Сотрудник = СведенияКонтрактаДоговораСотрудника.Сотрудник
		|			И КадроваяИсторияСотрудников.ПериодИзмерение < СведенияКонтрактаДоговораСотрудника.ДатаОкончания
		|			И (СведенияКонтрактаДоговораСотрудника.СрочныйДоговор
		|				ИЛИ СведенияКонтрактаДоговораСотрудника.СезонныйДоговор)
		|ГДЕ
		|	КадроваяИсторияСотрудников.РегистраторИзмерение В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ВосстановлениеВДолжности)");
	
	// Подработки
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ПериодИзмерение КАК ПериодИзмерение,
		|	КадроваяИсторияСотрудников.РегистраторИзмерение КАК РегистраторИзмерение,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Подработка) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
		|	НазначениеПодработки.ОтсутствующийСотрудник КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИспр КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НазначениеПодработки КАК НазначениеПодработки
		|		ПО КадроваяИсторияСотрудников.РегистраторИзмерение = НазначениеПодработки.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудников.РегистраторИзмерение В(&МассивРегистраторов)
		|	И НЕ КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)");
		
	// Увольнения, прекращения подработок
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ПериодИзмерение КАК ПериодИзмерение,
		|	КадроваяИсторияСотрудников.РегистраторИзмерение КАК РегистраторИзмерение,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИспр КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.РегистраторИзмерение В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
	
	// Кадровые переводы
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ПериодИзмерение КАК ПериодИзмерение,
		|	КадроваяИсторияСотрудников.РегистраторИзмерение КАК РегистраторИзмерение,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИспр КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ПО КадроваяИсторияСотрудников.РегистраторИзмерение = КадровыйПеревод.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
		|		ПО КадроваяИсторияСотрудников.РегистраторИзмерение = КадровыйПереводСпискомСотрудники.Ссылка
		|			И КадроваяИсторияСотрудников.Сотрудник = КадровыйПереводСпискомСотрудники.Сотрудник
		|ГДЕ
		|	КадроваяИсторияСотрудников.РегистраторИзмерение В(&МассивРегистраторов)
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистраторИзмерение");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбновленных, МассивРегистраторов);
	Иначе
		
		Пока Выборка.СледующийПоЗначениюПоля("РегистраторИзмерение") Цикл
			
			МассивОбновленных.Добавить(Выборка.РегистраторИзмерение);
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИспр", "РегистраторИзмерение", Выборка.РегистраторИзмерение) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ЗанятостьПозицийШтатногоРасписанияИспр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РегистраторИзмерение.Установить(Выборка.РегистраторИзмерение);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписанияУволенныхСовместителей(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыКОбновлению
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозицийШтатногоРасписания
		|		ПО КадроваяИсторияСотрудников.ГоловнаяОрганизация = ЗанятостьПозицийШтатногоРасписания.ГоловнаяОрганизация
		|			И КадроваяИсторияСотрудников.Сотрудник = ЗанятостьПозицийШтатногоРасписания.Сотрудник
		|			И (КадроваяИсторияСотрудников.Период МЕЖДУ ЗанятостьПозицийШтатногоРасписания.ДатаНачала И ЗанятостьПозицийШтатногоРасписания.ДатаОкончания)
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.ДокументОснование <> НЕОПРЕДЕЛЕНО
		|	И ЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистраторыКОбновлению.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторыКОбновлению КАК РегистраторыКОбновлению";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗанятостьПозицийШтатногоРасписания.ДокументОснование КАК ДокументОснование,
		|	ЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна) КАК ВидЗанятостиПозиции,
		|	ЗанятостьПозицийШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятостьПозицийШтатногоРасписания.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник
		|ИЗ
		|	ВТРегистраторыКОбновлению КАК РегистраторыКОбновлению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозицийШтатногоРасписания
		|			ПО КадроваяИсторияСотрудников.ГоловнаяОрганизация = ЗанятостьПозицийШтатногоРасписания.ГоловнаяОрганизация
		|				И КадроваяИсторияСотрудников.Сотрудник = ЗанятостьПозицийШтатногоРасписания.Сотрудник
		|				И (КадроваяИсторияСотрудников.Период МЕЖДУ ЗанятостьПозицийШтатногоРасписания.ДатаНачала И ЗанятостьПозицийШтатногоРасписания.ДатаОкончания)
		|		ПО РегистраторыКОбновлению.Регистратор = КадроваяИсторияСотрудников.Регистратор
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.ДокументОснование <> НЕОПРЕДЕЛЕНО
		|	И ЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	МассивРегистраторов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗанятостьПозицийШтатногоРасписания.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРегистраторов.Добавить(Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		НаборЗаписей.Прочитать();
		
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СформироватьДвиженияИнтервальногоРегистраПоМассивуРегистраторов(
		МассивРегистраторов, ПараметрыОбновления);
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	КадровыйУчетБазовый.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	
	ГруппаПроверокКонтрольЗаполненияЛичныхДанных = КадровыйУчет.ГруппаПроверокКонтрольЗаполненияЛичныхДанных(ГруппыПроверок);
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверокКонтрольЗаполненияЛичныхДанных.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Проверка задвоенности физических лиц';
													|en = 'Individual duplicate check'");
	Проверка.Причины						= НСтр("ru = 'Введены физические лица с одинаковыми данными';
													|en = 'Individuals with the same data have been entered'");
	Проверка.Рекомендация					= НСтр("ru = 'Объединить карточки физических лиц';
													|en = 'Merge cards of individuals'");
	Проверка.Идентификатор					= ГруппаПроверокКонтрольЗаполненияЛичныхДанных.Идентификатор + ".ПроверкаЗадвоенностиФизическихЛиц";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчетаРасширенная.ПроверкаЗадвоенностиФизическихЛиц";
	Проверка.ОбработчикПереходаКИсправлению	= "Обработка.ОбъединениеДублейПерсональныхДанных.Форма.Форма";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверокКонтрольЗаполненияЛичныхДанных.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверокКонтрольЗаполненияЛичныхДанных.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Проверка того, что на сотрудника, находящегося в отпуске по уходу за ребенком, не оформлен кадровый перевод';
													|en = 'Verification that a employee transfer has not been registered for an employee on a child care leave'");
	Проверка.Причины						= НСтр("ru = 'Сотрудник из кадрового перевода находится в отпуске по уходу за ребенком';
													|en = 'An employee from an employee transfer is on child care leave'");
	Проверка.Рекомендация					= НСтр("ru = 'Пересмотреть соответствующий документ';
													|en = 'Revise the relevant document'");
	Проверка.Идентификатор					= ГруппаПроверокКонтрольЗаполненияЛичныхДанных.Идентификатор + ".ПроверкаКадровогоПереводаСотрудниковВДекрете";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчетаРасширенная.ПроверкаКадровогоПереводаСотрудниковВДекрете";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверокКонтрольЗаполненияЛичныхДанных.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

Процедура СоздатьВТЗадублированныеФизическиеЛица(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	// Подготовка таблицы отборов
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	&Период КАК Период
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа
		|	И НЕ ФизическиеЛица.ПометкаУдаления";
		
	Запрос.Выполнить();
	
	// Получение ИНН и СНИЛС
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеЛица");
		
	КадровыеДанные = "ИНН,СтраховойНомерПФР";
		
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Ложь, КадровыеДанные);
	
	// Получение данных о задублированных документах.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыФизическихЛиц.Физлицо) КАК Количество,
		|	ДокументыФизическихЛиц.ВидДокумента,
		|	ДокументыФизическихЛиц.Серия,
		|	ДокументыФизическихЛиц.Номер
		|ПОМЕСТИТЬ ВТДокументыФизическихЛицПредварительно
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|ГДЕ
		|	ДокументыФизическихЛиц.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)
		|	И ДокументыФизическихЛиц.Физлицо ССЫЛКА Справочник.ФизическиеЛица
		|	И ДокументыФизическихЛиц.Номер <> """"
		|	И НЕ ДокументыФизическихЛиц.Физлицо.ПометкаУдаления
		|СГРУППИРОВАТЬ ПО
		|	ДокументыФизическихЛиц.ВидДокумента,
		|	ДокументыФизическихЛиц.Серия,
		|	ДокументыФизическихЛиц.Номер
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыФизическихЛиц.Физлицо) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыФизическихЛицПредварительно.ВидДокумента КАК ДокументВид,
		|	ДокументыФизическихЛицПредварительно.Серия КАК ДокументСерия,
		|	ДокументыФизическихЛицПредварительно.Номер КАК ДокументНомер,
		|	ДокументыФизическихЛиц.Физлицо КАК ФизическоеЛицо,
		|	ДокументыФизическихЛиц.Представление КАК ДокументПредставление
		|ПОМЕСТИТЬ ВТДокументыФизическихЛиц
		|ИЗ
		|	ВТДокументыФизическихЛицПредварительно КАК ДокументыФизическихЛицПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО ДокументыФизическихЛицПредварительно.ВидДокумента = ДокументыФизическихЛиц.ВидДокумента
		|		И ДокументыФизическихЛицПредварительно.Номер = ДокументыФизическихЛиц.Номер
		|		И ДокументыФизическихЛицПредварительно.Серия = ДокументыФизическихЛиц.Серия
		|		И (НЕ ДокументыФизическихЛиц.Физлицо.ПометкаУдаления)";
		
	Запрос.Выполнить();
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТКадровыеДанныеФизическихЛиц.Инн КАК ИНН,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо) КАК Количество
		|ПОМЕСТИТЬ ВТЗадублированныеИНН
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК ВТКадровыеДанныеФизическихЛиц
		|ГДЕ
		|	ВТКадровыеДанныеФизическихЛиц.Инн <> """"
		|СГРУППИРОВАТЬ ПО
		|	ВТКадровыеДанныеФизическихЛиц.Инн
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо) КАК Количество,
		|	ВТКадровыеДанныеФизическихЛиц.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ПОМЕСТИТЬ ВТЗадублированныеСНИЛС
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК ВТКадровыеДанныеФизическихЛиц
		|ГДЕ
		|	ВТКадровыеДанныеФизическихЛиц.СтраховойНомерПФР <> """"
		|СГРУППИРОВАТЬ ПО
		|	ВТКадровыеДанныеФизическихЛиц.СтраховойНомерПФР
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ИНН КАК ОбластьПоиска,
		|	ЗадублированныеИНН.ИНН КАК Значение,
		|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадублированныеИНН.ИНН КАК ИНН,
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА) КАК СтраховойНомерПФР,
		|	ВЫРАЗИТЬ(NULL КАК Справочник.ВидыДокументовФизическихЛиц) КАК ДокументВид,
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА) КАК ДокументНомер,
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА) КАК ДокументСерия
		|ПОМЕСТИТЬ ВТЗадублированныеФизическиеЛица
		|ИЗ
		|	ВТЗадублированныеИНН КАК ЗадублированныеИНН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|		ПО ЗадублированныеИНН.ИНН = КадровыеДанныеФизическихЛиц.ИНН
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&СНИЛС,
		|	ЗадублированныеСНИЛС.СтраховойНомерПФР,
		|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА),
		|	ЗадублированныеСНИЛС.СтраховойНомерПФР,
		|	ВЫРАЗИТЬ(NULL КАК Справочник.ВидыДокументовФизическихЛиц),
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА),
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА)
		|ИЗ
		|	ВТЗадублированныеСНИЛС КАК ЗадублированныеСНИЛС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|		ПО ЗадублированныеСНИЛС.СтраховойНомерПФР = КадровыеДанныеФизическихЛиц.СтраховойНомерПФР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ДокументУдостоверяющийЛичность,
		|	ДокументыФизическихЛиц.ДокументПредставление,
		|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА),
		|	ВЫРАЗИТЬ(NULL КАК СТРОКА),
		|	ДокументыФизическихЛиц.ДокументВид,
		|	ДокументыФизическихЛиц.ДокументНомер,
		|	ДокументыФизическихЛиц.ДокументСерия
		|ИЗ
		|	ВТДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|		ПО ДокументыФизическихЛиц.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТФизическиеЛица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДокументыФизическихЛицПредварительно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДокументыФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадровыеДанныеФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗадублированныеИНН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗадублированныеСНИЛС";
		
	Запрос.УстановитьПараметр("ИНН", НСтр("ru = 'ИНН';
											|en = 'TIN'"));
	Запрос.УстановитьПараметр("СНИЛС", НСтр("ru = 'СНИЛС';
											|en = 'SNILS'"));
	Запрос.УстановитьПараметр("ДокументУдостоверяющийЛичность", НСтр("ru = 'Документ, удостоверяющий личность';
																	|en = 'Identity document'"));
	
	Запрос.Выполнить();
КонецПроцедуры

Процедура УстановитьЗапросНабораДанныхПечатнойФормыСправкиОСреднемЗаработке(ОбъектОтчета) Экспорт
	
	Для Каждого НаборДанных Из ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			НаборДанных.Запрос =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
				|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК Период,
				|	1 КАК НомерСтроки,
				|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК СсылкаНаОбъект,
				|	ВЫРАЗИТЬ(NULL КАК Справочник.ФизическиеЛица) КАК Руководитель,
				|	ВЫРАЗИТЬ(NULL КАК Справочник.ФизическиеЛица) КАК ГлавныйБухгалтер,
				|	ВЫРАЗИТЬ(NULL КАК Справочник.Должности) КАК ДолжностьРуководителя
				|ПОМЕСТИТЬ ВТСсылкиНаОбъекты
				|ИЗ
				|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|ГДЕ
				|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&СсылкиНаОбъекты)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Увольнение.Сотрудник,
				|	Увольнение.ДатаУвольнения,
				|	1,
				|	Увольнение.Ссылка,
				|	Увольнение.Руководитель,
				|	Увольнение.ГлавныйБухгалтер,
				|	Увольнение.ДолжностьРуководителя
				|ИЗ
				|	Документ.Увольнение КАК Увольнение
				|ГДЕ
				|	Увольнение.Ссылка В(&СсылкиНаОбъекты)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	УвольнениеСпискомСотрудники.Сотрудник,
				|	УвольнениеСпискомСотрудники.ДатаУвольнения,
				|	УвольнениеСпискомСотрудники.НомерСтроки,
				|	УвольнениеСпискомСотрудники.Ссылка,
				|	УвольнениеСпискомСотрудники.Ссылка.Руководитель,
				|	УвольнениеСпискомСотрудники.Ссылка.ГлавныйБухгалтер,
				|	УвольнениеСпискомСотрудники.Ссылка.ДолжностьРуководителя
				|ИЗ
				|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
				|ГДЕ
				|	УвольнениеСпискомСотрудники.Ссылка В(&СсылкиНаОбъекты)
				|";
			
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
					МодульРасчетДенежногоДовольствия = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
					НаборДанных.Запрос = НаборДанных.Запрос + МодульРасчетДенежногоДовольствия.ТекстЗапросаНабораДанныхПечатнойФормыСправкиОСреднемЗаработке();
				КонецЕсли;
				
				НаборДанных.Запрос = НаборДанных.Запрос +"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
				|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
				|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ГрафикРаботы,
				|	"""" КАК ФИОПолные,
				|	"""" КАК Пол,
				|	НЕОПРЕДЕЛЕНО КАК ПриказОбУвольнении,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриема,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаУвольнения,
				|	"""" КАК СтраховойНомерПФР,
				|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК АдресМестаПроживания,
				|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК АдресПоПрописке,
				|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка) КАК ДокументВид,
				|	"""" КАК ДокументСерия,
				|	"""" КАК ДокументНомер,
				|	"""" КАК ДокументКемВыдан,
				|	"""" КАК ДокументКодПодразделения,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДокументДатаВыдачи
				|ПОМЕСТИТЬ Представления_КадровыеДанныеСотрудников
				|ИЗ
				|	ВТСсылкиНаОбъекты КАК ВТСотрудникиПериоды
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СсылкиНаОбъекты.Период КАК Период,
				|	СсылкиНаОбъекты.Руководитель КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтветственныеЛица
				|ИЗ
				|	ВТСсылкиНаОбъекты КАК СсылкиНаОбъекты
				|ГДЕ
				|	ЕСТЬNULL(СсылкиНаОбъекты.Руководитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СсылкиНаОбъекты.Период,
				|	СсылкиНаОбъекты.ГлавныйБухгалтер
				|ИЗ
				|	ВТСсылкиНаОбъекты КАК СсылкиНаОбъекты
				|ГДЕ
				|	ЕСТЬNULL(СсылкиНаОбъекты.ГлавныйБухгалтер, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
				|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
				|	"""" КАК ИОФамилия
				|ПОМЕСТИТЬ Представления_КадровыеДанныеФизическихЛиц
				|ИЗ
				|	ВТОтветственныеЛица КАК ОтветственныеЛица
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СсылкиНаОбъекты.СсылкаНаОбъект КАК СсылкаНаОбъект,
				|	СсылкиНаОбъекты.НомерСтроки КАК НомерСтроки,
				|	КадровыеДанныеСотрудников.Период КАК Период,
				|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
				|	КадровыеДанныеСотрудников.Организация КАК Организация,
				|	КадровыеДанныеСотрудников.ГрафикРаботы КАК ГрафикРаботы,
				|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
				|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
				|	КадровыеДанныеСотрудников.ПриказОбУвольнении КАК ПриказОбУвольнении,
				|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
				|	ВЫБОР
				|		КОГДА ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ, -3) > КадровыеДанныеСотрудников.ДатаПриема
				|			ТОГДА ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ, -3)
				|		ИНАЧЕ КадровыеДанныеСотрудников.ДатаПриема
				|	КОНЕЦ КАК НачалоПериода,
				|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ОкончаниеПериода,
				|	СсылкиНаОбъекты.Руководитель КАК Руководитель,
				|	СсылкиНаОбъекты.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
				|	КадровыеДанныеГлавногоБухгалтера.ИОФамилия КАК ГлавныйБухгалтерИОФамилия,
				|	КадровыеДанныеРуководителя.ИОФамилия КАК РуководительИОФамилия,
				|	КадровыеДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
				|	КадровыеДанныеСотрудников.АдресМестаПроживания КАК АдресМестаПроживания,
				|	КадровыеДанныеСотрудников.АдресПоПрописке КАК АдресПоПрописке,
				|	КадровыеДанныеСотрудников.ДокументВид КАК ДокументВид,
				|	КадровыеДанныеСотрудников.ДокументСерия КАК ДокументСерия,
				|	КадровыеДанныеСотрудников.ДокументНомер КАК ДокументНомер,
				|	КадровыеДанныеСотрудников.ДокументКемВыдан КАК ДокументКемВыдан,
				|	КадровыеДанныеСотрудников.ДокументКодПодразделения КАК ДокументКодПодразделения,
				|	КадровыеДанныеСотрудников.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
				|	СсылкиНаОбъекты.ДолжностьРуководителя КАК ДолжностьРуководителя
				|ИЗ
				|	ВТСсылкиНаОбъекты КАК СсылкиНаОбъекты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Представления_КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
				|		ПО СсылкиНаОбъекты.Период = КадровыеДанныеСотрудников.Период
				|			И СсылкиНаОбъекты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
				|		ЛЕВОЕ СОЕДИНЕНИЕ Представления_КадровыеДанныеФизическихЛиц КАК КадровыеДанныеРуководителя
				|		ПО СсылкиНаОбъекты.Период = КадровыеДанныеРуководителя.Период
				|			И СсылкиНаОбъекты.Руководитель = КадровыеДанныеРуководителя.ФизическоеЛицо
				|		ЛЕВОЕ СОЕДИНЕНИЕ Представления_КадровыеДанныеФизическихЛиц КАК КадровыеДанныеГлавногоБухгалтера
				|		ПО СсылкиНаОбъекты.Период = КадровыеДанныеГлавногоБухгалтера.Период
				|			И СсылкиНаОбъекты.ГлавныйБухгалтер = КадровыеДанныеГлавногоБухгалтера.ФизическоеЛицо";
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеГрафиковРаботыДляСправкиОСреднемЗаработке() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Часов) КАК Часов
		|ПОМЕСТИТЬ ВТДанныеОРабочихЧасах
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников.ДанныеОРабочихЧасах КАК ГрафикиРаботыСотрудниковДанныеОРабочихЧасах
		|ГДЕ
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.ВидВремени.РабочееВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРаботыСотрудников.Ссылка КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.Ссылка.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафиковРаботыСотрудников.ПоНеделям)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Недельный,
		|	ГрафикиРаботыСотрудников.Ссылка.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				ИЛИ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сокращенный,
		|	ВЫБОР
		|		КОГДА НЕ ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				И НЕ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА ГрафикиРаботыСотрудников.Ссылка.ДлительностьРабочейНедели
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЧасовВНеделю,
		|	ВЫБОР
		|		КОГДА НЕ ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				И НЕ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА СУММА(ВЫБОР
		|						КОГДА ГрафикиРаботыСотрудников.ДеньВключенВГрафик
		|							ТОГДА 1
		|						ИНАЧЕ 0
		|					КОНЕЦ)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДнейВНеделю,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				ИЛИ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА ГрафикиРаботыСотрудников.Ссылка.ДлительностьРабочейНедели
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЧасовВНеделюСокращенный,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				ИЛИ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА СУММА(ВЫБОР
		|						КОГДА ГрафикиРаботыСотрудников.ДеньВключенВГрафик
		|							ТОГДА 1
		|						ИНАЧЕ 0
		|					КОНЕЦ)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДнейВНеделюСокращенный
		|ПОМЕСТИТЬ ВТДанныеОВремени
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников.ШаблонЗаполнения КАК ГрафикиРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРабочихЧасах КАК ДанныеОРабочихЧасах
		|		ПО ГрафикиРаботыСотрудников.Ссылка = ДанныеОРабочихЧасах.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиРаботыСотрудников.Ссылка,
		|	ВЫБОР
		|		КОГДА НЕ ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				И НЕ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА ГрафикиРаботыСотрудников.Ссылка.ДлительностьРабочейНедели
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				ИЛИ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА ГрафикиРаботыСотрудников.Ссылка.ДлительностьРабочейНедели
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ГрафикиРаботыСотрудников.Ссылка.СуммированныйУчетРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.Ссылка.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафиковРаботыСотрудников.ПоНеделям)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя
		|				ИЛИ ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя,
		|	ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОВремени.ГрафикРаботы КАК ГрафикРаботы,
		|	ДанныеОВремени.Недельный КАК Недельный,
		|	ДанныеОВремени.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	ДанныеОВремени.Сокращенный КАК Сокращенный,
		|	ДанныеОВремени.ЧасовВНеделю + ДанныеОВремени.ЧасовВНеделюСокращенный КАК ЧасовВНеделю,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ДанныеОВремени.ДнейВНеделю = 0
		|				ТОГДА 0
		|			ИНАЧЕ ДанныеОВремени.ЧасовВНеделю / ДанныеОВремени.ДнейВНеделю
		|		КОНЕЦ КАК ЧИСЛО(5, 2)) КАК ЧасовВДень,
		|	ДанныеОВремени.ДнейВНеделю КАК ДнейВНеделю,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ДанныеОВремени.ДнейВНеделюСокращенный = 0
		|				ТОГДА 0
		|			ИНАЧЕ ДанныеОВремени.ЧасовВНеделюСокращенный / ДанныеОВремени.ДнейВНеделюСокращенный
		|		КОНЕЦ КАК ЧИСЛО(5, 2)) КАК ЧасовВДеньСокращенный,
		|	ДанныеОВремени.ДнейВНеделюСокращенный КАК ДнейВНеделюСокращенный
		|ИЗ
		|	ВТДанныеОВремени КАК ДанныеОВремени";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДозаполнитьДвиженияЗанятостьПозицийШтатногоРасписанияУвольненийССовместителями(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыКОбновлению
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|		ПО КадроваяИсторияСотрудников.Регистратор = ЗанятостьПозицийШтатногоРасписания.Регистратор
		|			И (ЗанятостьПозицийШтатногоРасписания.ДокументОснование = НЕОПРЕДЕЛЕНО)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписанияСовмещения
		|		ПО КадроваяИсторияСотрудников.Регистратор = ЗанятостьПозицийШтатногоРасписанияСовмещения.Регистратор
		|			И (ЗанятостьПозицийШтатногоРасписанияСовмещения.ДокументОснование <> НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.Регистратор ЕСТЬ NULL
		|	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистраторыКОбновлению.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторыКОбновлению КАК РегистраторыКОбновлению";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна) КАК ВидЗанятостиПозиции,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК ЗамещаемыйСотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	ВТРегистраторыКОбновлению КАК РегистраторыКОбновлению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО РегистраторыКОбновлению.Регистратор = КадроваяИсторияСотрудников.Регистратор
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	МассивРегистраторов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗанятостьПозицийШтатногоРасписания.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРегистраторов.Добавить(Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		НаборЗаписей.Прочитать();
		
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СформироватьДвиженияИнтервальногоРегистраПоМассивуРегистраторов(
		МассивРегистраторов, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ОбновитьДанныеДляПодбораДоговорниковГПХ(ОбновляемыеСотрудники) Экспорт

	РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораДоговорниковГПХ(ОбновляемыеСотрудники);

КонецПроцедуры

Процедура ЗаполнитьГоловныхСотрудниковВКадровойИстории(ПараметрыОбновления) Экспорт
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Функция ПриостановленияТрудовыхДоговоров(ТолькоРазрешенные, ТаблицаОтбора, Отбор) Экспорт
	
	ТаблицаПриостановлений = КадровыйУчетБазовый.ПриостановленияТрудовыхДоговоров(ТолькоРазрешенные, ТаблицаОтбора, Отбор);
	КонтрактыДоговорыСотрудников.ЗаполнитьПриостановленияТрудовыхДоговоров(ТаблицаПриостановлений, ТолькоРазрешенные, ТаблицаОтбора, Отбор);
	
	Возврат ТаблицаПриостановлений;
	
КонецФункции

Функция СведенияОСреднемЗаработкеДляСправкиДетямСиротам(КадровыеДанныеСотрудников, ДатаСправки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСправки", ДатаСправки);
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	&ДатаСправки КАК ДатаСправки
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010) КАК ПорядокРасчета,
		|	ИсходныеДанные.ДатаСправки КАК ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаСправки, МЕСЯЦ) = КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаСправки, ДЕНЬ)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ИсходныеДанные.ДатаСправки, МЕСЯЦ, -5), МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ИсходныеДанные.ДатаСправки, МЕСЯЦ, -6), МЕСЯЦ)
		|	КОНЕЦ КАК НачалоПериодаРасчетаСреднего,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаСправки, МЕСЯЦ) = КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаСправки, ДЕНЬ)
		|			ТОГДА КОНЕЦПЕРИОДА(ИсходныеДанные.ДатаСправки, ДЕНЬ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ИсходныеДанные.ДатаСправки, МЕСЯЦ, -1), МЕСЯЦ)
		|	КОНЕЦ КАК ОкончаниеПериодаРасчетаСреднего
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные";
	
	ДанныеДляРасчетаОбщегоСреднегоЗаработка = УчетСреднегоЗаработка.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудников(Запрос.Выполнить().Выгрузить());
	
	Запрос.УстановитьПараметр("ДанныеОВремени", ДанныеДляРасчетаОбщегоСреднегоЗаработка.ДанныеОВремени);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеОВремени.Сотрудник КАК Сотрудник,
		|	ДанныеОВремени.Период КАК Месяц,
		|	ДанныеОВремени.Период КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ДанныеОВремени.Период, МЕСЯЦ) КАК ДатаОкончания,
		|	&ДатаСправки КАК ДатаАктуальности
		|ПОМЕСТИТЬ ВТСотрудникиДляСоздатьВТПлановоеВремя
		|ИЗ
		|	&ДанныеОВремени КАК ДанныеОВремени";
	
	Запрос.Выполнить();
	
	ПараметрыСоздатьВТПлановоеВремя = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыСоздатьВТПлановоеВремя.ИмяВТСотрудники = "ВТСотрудникиДляСоздатьВТПлановоеВремя";
	ПараметрыСоздатьВТПлановоеВремя.ПолучатьПлановоеВремяЗаПолныйМесяц = Истина;
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыСоздатьВТПлановоеВремя);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановоеВремя.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ПлановоеВремя.Дата, МЕСЯЦ) КАК Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПлановоеВремя.Дата) КАК НормаДней,
		|	СУММА(ПлановоеВремя.ЧасыПлан) КАК НормаЧасов
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|ГДЕ
		|	ПлановоеВремя.ЧасыПлан > 0
		|	И ПлановоеВремя.ВидУчетаВремени.ОсновноеВремя В (ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка), ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.СокращенноеРабочееВремя))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановоеВремя.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ПлановоеВремя.Дата, МЕСЯЦ)";
	
	ДанныеОПлановомВремени = Запрос.Выполнить().Выгрузить();
	
	ДанныеДляРасчетаОбщегоСреднегоЗаработка.ДанныеОВремени.Колонки.Добавить("НормаДней", Новый ОписаниеТипов("Число"));
	ДанныеДляРасчетаОбщегоСреднегоЗаработка.ДанныеОВремени.Колонки.Добавить("НормаЧасов", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаВремени Из ДанныеДляРасчетаОбщегоСреднегоЗаработка.ДанныеОВремени Цикл
		СтрокиПлана = ДанныеОПлановомВремени.НайтиСтроки(
			Новый Структура("Сотрудник,Период", СтрокаВремени.Сотрудник, СтрокаВремени.Период));
		Если ЗначениеЗаполнено(СтрокиПлана) Тогда
			СтрокаВремени.НормаДней = СтрокиПлана[0].НормаДней;
			СтрокаВремени.НормаЧасов = СтрокиПлана[0].НормаЧасов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеДляРасчетаОбщегоСреднегоЗаработка;
	
КонецФункции

Процедура СоздатьВТОбложениеДоговоровГПХНСПЗ(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыГПХ.ДоговорГПХ КАК ДоговорГПХ,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ДоговорыГПХ.ДоговорГПХ) = ТИП(Документ.ДоговорРаботыУслуги)
		|				ТОГДА ДоговорыГПХ.ДоговорГПХ.ОблагаетсяФСС_НС
		|			КОГДА ТИПЗНАЧЕНИЯ(ДоговорыГПХ.ДоговорГПХ) = ТИП(Документ.ДоговорАвторскогоЗаказа)
		|				ТОГДА ДоговорыГПХ.ДоговорГПХ.ВидАвторскогоДоговора.КодДоходаСтраховыеВзносы.ВходитВБазуФСС_НС
		|		КОНЕЦ, ЛОЖЬ) КАК ОблагаетсяНСПЗ
		|ПОМЕСТИТЬ ВТОбложениеДоговоровГПХНСПЗ
		|ИЗ
		|	ВТДоговорыГПХ КАК ДоговорыГПХ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти
