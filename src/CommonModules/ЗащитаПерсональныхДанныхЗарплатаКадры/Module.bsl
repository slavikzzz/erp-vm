//// @strict-types


#Область ПрограммныйИнтерфейс

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных.
Процедура ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных) Экспорт
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ДополнитьДанныеСубъектовПерсональныхДанных.
Процедура ДополнитьДанныеСубъектовПерсональныхДанных(СубъектыПерсональныхДанных, ДатаАктуальности) Экспорт 
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ДополнитьДанныеСубъектовПерсональныхДанных(
		СубъектыПерсональныхДанных, ДатаАктуальности);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ДополнитьДанныеОрганизацииОператораПерсональныхДанных.
Процедура ДополнитьДанныеОрганизацииОператораПерсональныхДанных(Организация, ДанныеОрганизации, ДатаАктуальности) Экспорт

	//@skip-check property-return-type
	ДанныеОрганизации.АдресОрганизации = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		,
		ДатаАктуальности);
	
	ДанныеОрганизации.Вставить("НаименованиеОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,
		"НаименованиеПолное"));
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьФИОФизическогоЛица.
Процедура ЗаполнитьФИОФизическогоЛица(ФизическоеЛицо, ФИО) Экспорт
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "ФИО");
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФИО = КадровыеДанные[0]["ФИО"];
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(
		ТаблицаСведений);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов.
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, ОтказОтСкрытия) Экспорт

	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты,
		ТаблицаИсключений, ОтказОтСкрытия);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередУничтожениемПерсональныхДанных.
Процедура ПередУничтожениемПерсональныхДанных(Объект, Субъекты, ВыполнитьЗаписьОбъекта) Экспорт

	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПередУничтожениемПерсональныхДанных(Объект, Субъекты,
		ВыполнитьЗаписьОбъекта);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных
Процедура ПриРасчетеСроковХраненияПерсональныхДанных(ДанныеСубъектов, СрокиХранения) Экспорт
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(СрокиХранения, "Субъект");
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПриРасчетеСроковХраненияПерсональныхДанных(ДанныеСубъектов,
		СрокиХранения);
	
КонецПроцедуры

// Удаляет данные об уничтожении персональных данных субъекта.
// 
// Параметры:
//  Субъект - ОпределяемыйТип.СубъектПерсональныхДанных
Процедура УдалитьДанныеСубъекта(Субъект) Экспорт
	
	Если Не ЗащитаПерсональныхДанных.ИспользоватьУничтожениеПерсональныхДанныхСубъектов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗащитаПерсональныхДанных.ЭтоОбъектСУничтоженнымиПерсональнымиДанными(Субъект) Тогда
		Возврат;
	КонецЕсли;
	
	// АПК:БЗК.277-выкл
	НаборЗаписей = РегистрыСведений.УничтоженныеПерсональныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Субъект.Установить(Субъект);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Субъект.Установить(Субъект);
	НаборЗаписей.Записать();
	// АПК:БЗК.277-вкл
	
КонецПроцедуры

// Выводит на форму субъекта ПДн надписи с информацией о согласии на обработку ПДн.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, связанная с субъектом.
//	Субъект - ОпределяемыйТип.СубъектПерсональныхДанных - субъект ПДн.
//	ГруппаСведения - ГруппаФормы - группа элементов формы, в которой будут отображаться надписи.
//	ПоказыватьТолькоЕслиЕстьСогласие - Булево 
//
Процедура ФормаСубъектаУстановитьОтображениеНадписей(Форма, Субъект, ГруппаСведения, ПоказыватьТолькоЕслиЕстьСогласие = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСкрытиеПерсональныхДанныхСубъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Субъект.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ЗащитаПерсональныхДанныхЗарплатаКадры.ФормаСубъектаУстановитьОтображениеНадписей", "ГруппаСведения",
		ГруппаСведения, Тип("ГруппаФормы"));
	
	СтатусСогласия = СтатусСогласияНаОбработкуПДнСубъекта(Субъект);
	Если ПоказыватьТолькоЕслиЕстьСогласие И СтатусСогласия.Требуется Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Найти("ДекорацияПредупреждениеОбОтсутствииСогласия") = Неопределено Тогда
		Элемент = Элементы.Добавить("ДекорацияПредупреждениеОбОтсутствииСогласия", Тип("ДекорацияФормы"), ГруппаСведения);
		Элемент.Заголовок = НСтр("ru = 'Предупреждение об отсутствии согласия';
								|en = 'Warning about a lack of consent'");
		Элемент.Вид = ВидДекорацииФормы.Картинка;
		Элемент.Картинка = БиблиотекаКартинок.Предупреждение;
		Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли;
	
	Если Элементы.Найти("СообщениеОСогласииНаОбработкуПДн") = Неопределено Тогда
		Элемент = Элементы.Вставить("СообщениеОСогласииНаОбработкуПДн", Тип("ДекорацияФормы"), ГруппаСведения);
		Элемент.Заголовок = Новый ФорматированнаяСтрока("");
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки",
			"Подключаемый_СообщениеОСогласииОбработкаНавигационнойСсылки");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСведения",
		"Видимость", ОбщегоНазначения.СсылкаСуществует(Субъект));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждениеОбОтсутствииСогласия",
		"Видимость", СтатусСогласия.Требуется);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СообщениеОСогласииНаОбработкуПДн",
		"Заголовок", СтатусСогласия.Описание);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ДобавитьРеквизитыЗащитыПерсональныхДанныхНаФормеНастройкиПользователейИПрав(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	НоваяГруппа = Элементы.Добавить("ЛетДоУничтоженияПерсональныхДанныхСотрудниковГруппа", Тип("ГруппаФормы"),
		Элементы.ГруппаУничтожениеПерсональныхДанныхИспользование);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Видимость = Форма.НаборКонстант.ИспользоватьСкрытиеПерсональныхДанныхСубъектов;
	
	ЛетДоУничтожения = Константы.ЛетДоУничтоженияПерсональныхДанныхСотрудников.Получить();
	
	ИмяРеквизита = "ЛетДоУничтоженияПерсональныхДанныхСотрудников";
	НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Число"), , , Ложь);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Форма[ИмяРеквизита] = ЛетДоУничтожения;
	
	НоваяДекорация = Элементы.Добавить("ЛетДоУничтоженияПерсональныхДанныхСотрудников", Тип("ДекорацияФормы"),
		НоваяГруппа);
	НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
	НоваяДекорация.Заголовок = НСтр("ru = 'Уничтожать данные уволенных сотрудников через';
									|en = 'Destroy personal data of dismissed employees in'");
		
	НовоеПоле = Элементы.Добавить("ПолеЛетДоУничтоженияПерсональныхДанныхСотрудников", Тип("ПолеФормы"), НоваяГруппа);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	ПредставлениеЛет = СтрРазделить(ЗарплатаКадрыКлиентСервер.ПредставлениеЛет(ЛетДоУничтожения), " ");
	НовоеПоле.Заголовок = СтрШаблон(НСтр("ru = '%1';
										|en = '%1'"), ?(ПредставлениеЛет.Количество() > 1, ПредставлениеЛет[1], "лет"));
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	НовоеПоле.ПутьКДанным = ИмяРеквизита;
	НовоеПоле.МаксимальнаяШирина = 3;
	НовоеПоле.АвтоМаксимальнаяШирина = Ложь;
	НовоеПоле.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	НовоеПоле.РасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Через сколько лет после увольнения могут быть уничтожены персональные данные сотрудника.';
			|en = 'The number of years after the dismissal after which the employee''s personal data can be destroyed.'");
	НовоеПоле.УстановитьДействие("ПриИзменении",
		"Подключаемый_ЛетДоУничтоженияПерсональныхДанныхСотрудниковПриИзменении");
			
КонецПроцедуры

// Возвращает срок хранения, прибавляя к дате события количество лет до уничтожения персональных данных.
// 
// Параметры:
//  ДатаСобытия - Дата
// 
// Возвращаемое значение:
//  Дата
Функция СрокХраненияПоДатеСобытия(ДатаСобытия) Экспорт
	
	Результат = КонецГода(
		ДобавитьМесяц(ДатаСобытия, 12 * Константы.ЛетДоУничтоженияПерсональныхДанныхСотрудников.Получить()));

	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   * Организация - СправочникСсылка.Организации
//   * Дата - Дата
Функция НоваяТаблицаДатПолученияДоходов() Экспорт
	
	ДанныеОДоходах = Новый ТаблицаЗначений;
	ДанныеОДоходах.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеОДоходах.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеОДоходах.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат ДанныеОДоходах;
	
КонецФункции

// Параметры:
//  ДанныеСубъектов - см. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных.ДанныеСубъектов
//  СрокиХранения - см. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных.СрокиХранения
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ФизическиеЛица
Функция ФизическиеЛицаИзДанныхСубъектов(ДанныеСубъектов, СрокиХранения) Экспорт
	
	ФизическиеЛица = ДанныеСубъектов.ВыгрузитьКолонку("Субъект");
	ОбщегоНазначенияБЗККлиентСервер.УдалитьВсеВхожденияКромеТипаИзМассива(ФизическиеЛица,
		Тип("СправочникСсылка.ФизическиеЛица"));

	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИсключаемыеФизическиеЛица = Новый Массив;
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		НайденныеСтроки = СрокиХранения.НайтиСтроки(Новый Структура("Субъект,СрокХранения", ФизическоеЛицо,
			ДатаНеУничтожать()));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсключаемыеФизическиеЛица.Добавить(ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛица, ИсключаемыеФизическиеЛица);
	
	Возврат ФизическиеЛица;

КонецФункции

// Возвращаемое значение:
//  Дата
Функция ДатаНеУничтожать() Экспорт
	
	Возврат Дата(3999, 12, 31);
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ЗащитаПерсональныхДанныхЗарплатаКадры.УстановитьЛетДоУничтоженияПерсональныхДанныхСотрудников";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ЗащитаПерсональныхДанныхЗарплатаКадры.УстановитьЛетДоУничтоженияПерсональныхДанныхСотрудников";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6707d587-0648-4ba9-ae9d-96c8848b052b");
	Обработчик.Комментарий = НСтр("ru = 'Установка константы ""Лет до уничтожения персональных данных сотрудников"".';
									|en = 'Set the ""Years before destruction of employees'' personal data"" constant.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ЗащитаПерсональныхДанныхЗарплатаКадры.ЗаполнитьРегистрыДляУничтоженияПерсональныхДанных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("161da63b-7ab9-4479-8c37-11b6308f2935");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистров для уничтожения персональных данных.';
									|en = 'Fill registers to destroy personal data.'");
	
КонецПроцедуры

// Устанавливает значение по умолчанию для константы ЛетДоУничтоженияПерсональныхДанныхСотрудников при обновлении базы.
// 
// Параметры:
//  ПараметрыОбновления - Структура, Неопределено - 
Процедура УстановитьЛетДоУничтоженияПерсональныхДанныхСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления,
		"ОбработкаЗавершена", Ложь);
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Константы.ЛетДоУничтоженияПерсональныхДанныхСотрудников.Установить(5);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления,
		"ОбработкаЗавершена", Истина);
	
КонецПроцедуры

// Заполняет регистры при обновлении информационной базы.
// 
// Параметры:
//  ПараметрыОбновления - Структура
Процедура ЗаполнитьРегистрыДляУничтоженияПерсональныхДанных(ПараметрыОбновления) Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ЗащитаПерсональныхДанных.ЗаполнитьРегистрыДляУничтоженияПерсональныхДанных(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Списки.Вставить(Метаданные.Документы["ОтзывСогласияНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.Документы["СогласиеНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.Документы["АктОбУничтоженииПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СогласияНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СубъектыДляСкрытияПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СрокиХраненияПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СубъектыДляРасчетаСроковХранения"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["УничтоженныеПерсональныеДанные"], Ложь);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Если Список = Метаданные.Документы["ОтзывСогласияНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.Документы["СогласиеНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.Документы["АктОбУничтоженииПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СогласияНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СубъектыДляСкрытияПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СрокиХраненияПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СубъектыДляРасчетаСроковХранения"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["УничтоженныеПерсональныеДанные"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Описание = Описание + "
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Чтение.Организации
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Изменение.ГруппыФизическихЛиц
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Изменение.Организации
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Чтение.Организации
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Изменение.ГруппыФизическихЛиц
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Изменение.Организации
		|Документ.АктОбУничтоженииПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|Документ.АктОбУничтоженииПерсональныхДанных.Чтение.Организации
		|Документ.АктОбУничтоженииПерсональныхДанных.Изменение.ГруппыФизическихЛиц
		|Документ.АктОбУничтоженииПерсональныхДанных.Изменение.Организации
		|РегистрСведений.СогласияНаОбработкуПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СогласияНаОбработкуПерсональныхДанных.Чтение.Организации
		|РегистрСведений.СубъектыДляСкрытияПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СрокиХраненияПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СубъектыДляРасчетаСроковХранения.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.УничтоженныеПерсональныеДанные.Чтение.ГруппыФизическихЛиц";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Субъект - ОпределяемыйТип.СубъектПерсональныхДанных
// 
// Возвращаемое значение:
//  Структура:
// * Требуется - Булево
// * Описание - см. ТекстСообщенияОтсутствующегоСогласия
Функция СтатусСогласияНаОбработкуПДнСубъекта(Субъект)
	
	СтатусСогласия = Новый Структура();
	СтатусСогласия.Вставить("Требуется", Истина);
	СтатусСогласия.Вставить("Описание", ТекстСообщенияОтсутствующегоСогласия());
	
	Если ЗащитаПерсональныхДанных.ЭтоОбъектСУничтоженнымиПерсональнымиДанными(Субъект) Тогда
		СтатусСогласия.Описание = ТекстСообщенияСкрытогоСубъекта(
			ЗащитаПерсональныхДанных.ДатаУничтоженияДанныхСубъекта(Субъект));
		СтатусСогласия.Требуется = Ложь;
		Возврат СтатусСогласия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСогласияНаОбработкуПерсональныхДанных();
	Запрос.УстановитьПараметр("Субъект", Субъект);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Регистратор) = Тип("ДокументСсылка.СогласиеНаОбработкуПерсональныхДанных") Тогда
			Если ВыборкаДетальныеЗаписи.СрокХранения = ДатаНеУничтожать() Тогда
				СтатусСогласия.Описание = ТекстСообщенияБессрочногоСогласия(ВыборкаДетальныеЗаписи.Регистратор);
			Иначе
				СтатусСогласия.Описание = ТекстСообщенияДействующегоСогласия(ВыборкаДетальныеЗаписи.Регистратор);
			КонецЕсли;
			СтатусСогласия.Требуется = Ложь;
		Иначе
			СтатусСогласия.Описание = ТекстСообщенияОтзываемогоСогласия(ВыборкаДетальныеЗаписи.Регистратор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусСогласия;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСогласияНаОбработкуПерсональныхДанных()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СогласияНаОбработку.Субъект КАК Субъект,
		|	ВЫБОР
		|		КОГДА СогласияНаОбработку.Действует
		|			ТОГДА ВЫБОР
		|				КОГДА СогласияНаОбработку.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|				ИНАЧЕ СогласияНаОбработку.СрокДействия
		|			КОНЕЦ
		|		ИНАЧЕ СогласияНаОбработку.Период
		|	КОНЕЦ КАК СрокХранения,
		|	СогласияНаОбработку.Действует КАК Действует,
		|	СогласияНаОбработку.Регистратор
		|ПОМЕСТИТЬ ВТСогласияНаОбработку
		|ИЗ
		|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных.СрезПоследних(, Субъект = &Субъект) КАК СогласияНаОбработку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСогласияНаОбработку.Субъект КАК Субъект,
		|	МАКСИМУМ(ВТСогласияНаОбработку.СрокХранения) КАК СрокХранения
		|ПОМЕСТИТЬ ВТМаксимальныйСрокХранения
		|ИЗ
		|	ВТСогласияНаОбработку КАК ВТСогласияНаОбработку
		|СГРУППИРОВАТЬ ПО
		|	ВТСогласияНаОбработку.Субъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСогласияНаОбработку.Субъект КАК Субъект,
		|	ВТСогласияНаОбработку.СрокХранения КАК СрокХранения,
		|	МАКСИМУМ(ВТСогласияНаОбработку.Действует) КАК Действует,
		|	МАКСИМУМ(ВТСогласияНаОбработку.Регистратор) КАК Регистратор
		|ИЗ
		|	ВТСогласияНаОбработку КАК ВТСогласияНаОбработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныйСрокХранения КАК ВТМаксимальныйСрокХранения
		|		ПО ВТСогласияНаОбработку.Субъект = ВТМаксимальныйСрокХранения.Субъект
		|		И ВТСогласияНаОбработку.СрокХранения = ВТМаксимальныйСрокХранения.СрокХранения
		|СГРУППИРОВАТЬ ПО
		|	ВТСогласияНаОбработку.Субъект,
		|	ВТСогласияНаОбработку.СрокХранения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ГиперСсылкаСогласие(Согласие)
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'согласие на обработку ПДн';
											|en = 'consent to personal data processing'"), , , ,
		ПолучитьНавигационнуюСсылку(Согласие));
	
КонецФункции

Функция ГиперСсылкаОтзывСогласия(ОтзывСогласия)
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'отзывается';
											|en = 'is withdrawn'"), , , , ПолучитьНавигационнуюСсылку(ОтзывСогласия));
	
КонецФункции

Функция ГиперСсылкаНовоеСогласие()
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'ввести новое согласие';
											|en = 'add a new consent'"), , , , "НовоеСогласие");
	
КонецФункции

Процедура ДобавитьЧастиВводаСогласия(ЧастиСообщения)
	
	ЧастиСообщения.Добавить(ГиперСсылкаНовоеСогласие());
	ЧастиСообщения.Добавить(НСтр("ru = '.';
								|en = '.'"));
	
КонецПроцедуры

// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстСообщенияДействующегоСогласия(Согласие)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Согласие, "ДатаПолучения,СрокДействия");
	
	ДатаПолучения = ЗначенияРеквизитов.ДатаПолучения;
	СрокДействия = ЗначенияРеквизитов.СрокДействия;
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru = 'У субъекта %1 было получено';
											|en = 'The %1 subject did not give'"), Формат(ДатаПолучения, "ДЛФ=D")) + " ");
	ЧастиСообщения.Добавить(ГиперСсылкаСогласие(Согласие));
	
	Если СрокДействия > ТекущаяДатаСеанса() Тогда
		ЧастиСообщения.Добавить(" " + СтрШаблон(НСтр("ru = ', которое действует до %1.';
													|en = ', which is valid until %1.'"), Формат(СрокДействия, "ДЛФ=D")));
	Иначе
		
		ЧастиСообщения.Добавить(" " + СтрШаблон(НСтр("ru = ', которое действовало до %1. Можно';
													|en = ', which was valid until %1. You can'") + " ",
			Формат(СрокДействия, "ДЛФ=D")));
		ДобавитьЧастиВводаСогласия(ЧастиСообщения);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

// Параметры:
//  Согласие - ДокументСсылка.СогласиеНаОбработкуПерсональныхДанных
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстСообщенияБессрочногоСогласия(Согласие)
	
	ДатаПолучения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Согласие, "ДатаПолучения");
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru = 'У субъекта %1 было получено';
											|en = 'The %1 subject did not give'"), Формат(ДатаПолучения, "ДЛФ=D")) + " ");
	ЧастиСообщения.Добавить(ГиперСсылкаСогласие(Согласие));
	ЧастиСообщения.Добавить(" " + НСтр("ru = ', которое действует бессрочно.';
										|en = ', which is valid indefinitely.'"));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстСообщенияОтсутствующегоСогласия()
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(НСтр("ru = 'У субъекта не было получено согласие на обработку ПДн. Можно';
								|en = 'The subject did not give consent to personal data processing. You can'") + " ");
	
	ДобавитьЧастиВводаСогласия(ЧастиСообщения);
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

// Параметры:
//  ОтзывСогласия - ДокументСсылка.ОтзывСогласияНаОбработкуПерсональныхДанных
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстСообщенияОтзываемогоСогласия(ОтзывСогласия)
	
	ДатаОтзыва = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтзывСогласия, "ДатаОтзыва");
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(НСтр("ru = 'Согласие на обработку ПДн';
								|en = 'Consent to personal data processing'") + " ");
	ЧастиСообщения.Добавить(ГиперСсылкаОтзывСогласия(ОтзывСогласия));
	ЧастиСообщения.Добавить(" " + СтрШаблон(НСтр("ru = '%1. Можно';
												|en = '%1. You can'"), Формат(ДатаОтзыва, "ДЛФ=D")) + " ");
	
	ДобавитьЧастиВводаСогласия(ЧастиСообщения);
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

// Параметры:
//  ДатаСкрытия - Дата
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстСообщенияСкрытогоСубъекта(ДатаСкрытия)
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Персональные данные субъекта уничтожены %1.';
											|en = 'The subject''s personal data is deleted on %1.'"),
		Формат(ДатаСкрытия, "ДЛФ=D")) + " ");
	ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Истек срок согласия на обработку ПДн или согласие не было получено.';
											|en = 'Consent to personal data processing expired or was not obtained.'")));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

#КонецОбласти