////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции интерфейсов взаимодействия БРО
// с другими библиотеками/конфигурациями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Групповая отправка отчетов
//
// Параметры:
//  ВыполняемоеОповещение	 - ОписаниеОповещения - описание оповещения, вызываемого после завершения отправки.
//  Ссылки					 - Массив - Массив ссылок на рег. отчеты.
//
Процедура ОтправитьОтчеты(ВыполняемоеОповещение, Ссылки) Экспорт
	
	ДокументооборотСКОКлиент.ОтправитьОтчеты(ВыполняемоеОповещение, Ссылки);

КонецПроцедуры

#Область ЗапросВФНСНаПроверкуСведенийРаботников

// Процедура создает и записывает на диск файл(-ы) для представления в налоговую инспекцию
// запроса работодателя на проверку ИНН, ФИО, СНИЛС работающих лиц в электронной форме.
//
// Параметры:
//  СтруктураПараметров - Структура - варианты свойств:
//     Вариант 1:
//        * Организация - СправочникСсылка.Организации - организация, по работникам
//                        которой будут формироваться сведения для файла;
//        * ДатаПодписи - Дата - дата, на которую будут формироваться сведения для файла;
//        * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                        (необязательный параметр, по умолчанию допустимое количество равно 200;
//                        в случае превышения, будет записано необходимое количество файлов).
//     Вариант 2:
//        * РасчетПоСтраховымВзносам - ДокументСсылка.РегламентированныйОтчет - документ,
//                        по данным которого будут формироваться сведения для файла;
//        * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                        (необязательный параметр, по умолчанию допустимое количество равно 200;
//                        в случае превышения, будет записано необходимое количество файлов).
//
Процедура СформироватьИСохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	
	ПараметрыСохранения
	= ИнтерфейсыВзаимодействияБРОВызовСервера.СформироватьФайлЗапросаВФНСНаПроверкуСведенийРаботников(
	СтруктураПараметров);
	
	Если ТипЗнч(ПараметрыСохранения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(ПараметрыСохранения);
	
КонецПроцедуры

#КонецОбласти

#Область РучнойВводСтатусовОтправки

// Процедура предназначена для установки вручную статуса отправки из экранных форм объектов,
// отображаемых на закладке "Отчеты" формы "1С-Отчетность", путем выбора значения из выпадающего списка.
//
// Параметры:
//  ПараметрыИзменения - Структура со свойствами:
//    "Форма" - ФормаКлиентскогоПриложения - форма регл. отчета или уведомления о спецрежимах налогообложения;
//    "Организация" - СправочникСсылка.Организации - организация;
//    "КонтролирующийОрган" - Перечисление.ТипыКонтролирующихОрганов - контролирующий орган;
//    "ТекстВопроса" (необязательный) - Строка - текст предупреждения при попытке установить статус "Сдано".
//
Процедура ИзменитьСтатусОтправки(ПараметрыИзменения) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#Область ТаможенноеДекларирование

// Возвращает процедуры таможенного декларирования на сайте ФТС edata.customs.ru,
// при необходимости, запрашивает логин и пароль портала ФТС и может запомнить их в 1С-Отчетности.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура дополнительных параметров получения при РежимыРаботы.ТолькоПолучитьНастройки = Истина,
//       включает элементы "ПараметрыОтправки" и "ПараметрыСоединения" для вызова функции
//       "ИнтерфейсыВзаимодействияБРОВызовСервера.ПолучитьПроцедурыДекларированияФТСССервера", иначе Массив:
//       * РегистрационныйНомер  - Строка - пример: "10013160/160620/0302033", "null" - не задан
//                                          (для выпущенных и зарегистрированных ДТ всегда задан)
//       * ДатаСоздания          - Строка - пример: "2020-06-16T17:26:16";
//       * ТипПроцедуры          - Строка - пример: "ЭК 10", "ИМ 40", число кода процедуры согласно классификатору
//                                          в решении Комиссии Таможенного союза от 20.09.2010 N 378
//                                          (ред. от 21.04.2020) "О классификаторах, используемых для заполнения
//                                          таможенных документов", приложении 1
//                                          http://www.consultant.ru/document/cons_doc_LAW_105110/ec01d1f8f765126d090770e15d2f714e88c4bc67/
//       * Статус                - Строка - пример: "10", у старых ДТ пустая строка; классификатор статусов
//                                          есть в решении Комиссии Таможенного союза от 20.09.2010 N 378
//                                          (ред. от 21.04.2020) "О классификаторах, используемых для заполнения
//                                          таможенных документов", приложении 14
//                                          http://www.consultant.ru/document/cons_doc_LAW_105110/6b14436828c8d727b30feb8feaf7b8f9585b03cd/
//           Только для РежимПолучения = "":
//       * Примечание            - Строка.
//           Только для РежимПолучения = "ВыпущенныеДТ":
//       * ВсегоТоваровМест      - Строка - пример: "3/2"
//       * ОбщаяСтоимость        - Строка - пример: "8 620 403,79 RUB"
//       * ДатаРешения           - Строка - пример: "16.06.2020"
//       * Отправитель           - Строка - пример: ""MICROSOFT IRELAND OPERATIONS LTD" СО СКЛАДА "TEST" ИНН  КПП "
//       * Получатель            - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001"
//       * СтранаОтправления     - Строка - пример: "НИДЕРЛАНДЫ"
//       * СтранаНазначения      - Строка - пример: "РОССИЯ"
//       * СтранаПроисхождения   - Строка - пример: "РАЗНЫЕ", "КИТАЙ"
//       * ОтветственныйЗаФинУрегулирование - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001" (при импорте)
//       * Идентификатор         - Строка - пример: "f9c0e49e-f5b8-3e27-b9b4-84fdf001985c"
//       * ПроцедураВЛК          - Строка - пример: "null"
//       * ДатаРегистрации       - Строка - пример: "2020-06-16T00:00:00"
//       * КодРегистрации        - Строка - пример: "10015160"
//       * ПорядковыйНомер       - Строка - пример: "0305033"
//       * Декларант             - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001"
//       * ИмяОтправителя        - Строка - пример: ""MICROSOFT IRELAND OPERATIONS LTD" СО СКЛАДА "TEST""
//       * ИмяПолучателя         - Строка - пример: "ООО "Тест""
//       * Модель                - Строка - пример: "AUDRequest"
//       * ИмяСтатуса            - Строка - пример: "Saved"
//       * Версия                - Строка - пример: "4.2.0/1.0.0"
//   Организация           - СправочникСсылка.Организации - ссылка на организацию,
//                                                          настройки обмена с ФТС которой используются.
//   РежимПолучения        - Строка - "ВыпущенныеДТ" для выпущенных и зарегистриорванных деклараций на товары,
//                                    примеры результатов приведены для этого варианта;
//                                  - "" для заводимых вручную в личном кабинете ФТС процедур декларирования.
//   Отборы - Структура с необязательными свойствами, по которым выполняется отбор, если свойства присутствуют, заданы:
//     * ТипПроцедуры         - Строка - "ЭК" - экспорт, "ИМ" - импорт;
//     * ДатаРешенияС         - Дата;
//     * ДатаРешенияПо        - Дата;
//     * РегистрационныйНомер - Строка.
//   РежимыРаботы - Неопределено или Структура, в которой могут быть элементы:
//     * ТолькоПолучитьНастройки                   - Булево - по умолчанию Ложь, только получение или ввод параметров
//                                                   настройки;
//     * ПовторятьЗапросПароляПриОшибке            - Булево - по умолчанию Истина, в том числе учитывается в процедуре
//                                                   "ОбработатьРезультатыПолученияПроцедурДекларированияФТС";
//     * ПоказыватьДиалогПриОшибкеДоступаВИнтернет - Булево - по умолчанию Истина,  в том числе учитывается в процедуре
//                                                   "ОбработатьРезультатыПолученияПроцедурДекларированияФТС".
//
Процедура ПолучитьПроцедурыДекларированияФТС(
		ОповещениеОЗавершении,
		Организация,
		РежимПолучения = "ВыпущенныеДТ",
		Отборы = Неопределено,
		РежимыРаботы = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Организация", 			Организация);
	ДополнительныеПараметры.Вставить("РежимПолучения", 			РежимПолучения);
	ДополнительныеПараметры.Вставить("Отборы", 					Отборы);
	ДополнительныеПараметры.Вставить("РежимыРаботы", 			РежимыРаботы);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПроцедурыДекларированияФТСПослеПолученияКонтекста",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

// Обрабатывает результаты получения процедур таможенного декларирования товаров с сайта ФТС.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - при незаданном оповещении "ОповещениеОПолученииНастроек" принимает результат вместо него,
//                 а также принимает Массив с полученными таможенными декларациями, формат описан в оповещении
//                 процедуры "ПолучитьПроцедурыДекларированияФТС".
//   ПроцедурыДекларирования - Неопределено или Массив процедур декларирования, результат функции 
//                             "ИнтерфейсыВзаимодействияБРОВызовСервера.ПолучитьПроцедурыДекларированияФТСССервера".
//   ДополнительныеПараметрыПолучения - Структура - результат вызова процедуры "ПолучитьПроцедурыДекларированияФТС"
//                                                  при РежимыРаботы.ТолькоПолучитьНастройки = Истина,
//                                                  возвращает результаты в оповещение, заданное этой процедурой.
//   ОповещениеОПолученииНастроек - ОписаниеОповещения - описание процедуры, принимающей результат получения настроек,
//                                                       при незаданном значении вызывается "ОповещениеОЗавершении".
//     Результат - структура дополнительных параметров получения при РежимыРаботы.ТолькоПолучитьНастройки = Истина
//                 вызова процедуры "ПолучитьПроцедурыДекларированияФТС" в случае повтора попытки соединения
//                 или ввоза пароля.
//
Процедура ОбработатьРезультатыПолученияПроцедурДекларированияФТС(
		ОповещениеОЗавершении,
		ПроцедурыДекларирования,
		ДополнительныеПараметрыПолучения,
		ОповещениеОПолученииНастроек = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 				ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ПроцедурыДекларирования", 			ПроцедурыДекларирования);
	ДополнительныеПараметры.Вставить("ДополнительныеПараметрыПолучения", 	ДополнительныеПараметрыПолучения);
	ДополнительныеПараметры.Вставить("ОповещениеОПолученииНастроек", 		ОповещениеОПолученииНастроек);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыПолученияПроцедурДекларированияФТСПослеПолученияКонтекста",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗапроситьВыпискуОперацийПоРасчетуСБюджетом(ОповещениеОЗавершении, Организация, РегистрацияВНалоговомОргане, Год) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ДополнительныеПараметры.Вставить("Год", Год);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапроситьВыпискуОперацийПоРасчетуСБюджетом_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#Область ПодписьXMLDSig

// Подписать файл XML в формате XMLDSig сертификатом учетной записи документообороат или заданным явно,
// по умолчанию в формате, используемом для СЗВ-ТД.
//
// Параметры:
//   ОповещениеОЗавершении      - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат                  - Строка - адрес временного хранилища с двоичными данными подписанного файла,
//                                - ДвоичныеДанные - если в качестве АдресДанных переданы ДвоичныеДанные,
//                                  Неопределено - при ошибке.
//   ОрганизацияИлиСертификат   - СправочникСсылка.Организации или
//                                СправочникСсылка.УчетныеЗаписиДокументооборота или,
//                                Строка - отпечаток сертификата или,
//                                Структура - структура свойств сертификата в формате
//                                  "КриптографияЭДКОКлиент.НайтиСертификат".
//   АдресДанных                - Строка - адрес временного хранилища с двоичными данными файла, который нужно
//                                  подписать.
//                              - ДвоичныеДанные.
//   НастройкиПодписи           - Неопределено - при незаданном значении используются настройки для подписи СЗВ-ТД,
//                                Структура - может передавать специфические настройки подписи, в формате, используемом
//                                  в обработке "ДокументооборотСКонтролирующимиОрганами"
//                                  форме "КонтейнерКлиентскихМетодов" у процедуры "ПодписатьФайлXMLDSig".
//
Процедура ПодписатьФайлXMLDSig(
	ОповещениеОЗавершении,
	ОрганизацияИлиСертификат,
	АдресДанных,
	НастройкиПодписи = Неопределено) Экспорт
	
	ВозвращатьДвоичныеДанные = Ложь;
	Если ТипЗнч(АдресДанных) = Тип("ДвоичныеДанные") Тогда
		АдресДанных = ПоместитьВоВременноеХранилище(АдресДанных, Новый УникальныйИдентификатор);
		ВозвращатьДвоичныеДанные = Истина;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 		ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ОрганизацияИлиСертификат", 	ОрганизацияИлиСертификат);
	ДополнительныеПараметры.Вставить("АдресДанных", 				АдресДанных);
	ДополнительныеПараметры.Вставить("НастройкиПодписи", 			НастройкиПодписи);
	ДополнительныеПараметры.Вставить("ВозвращатьДвоичныеДанные", 	ВозвращатьДвоичныеДанные);
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеПолученияКонтекста", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СформироватьПакетПоЕГРЮЛ

// Объединяет сканы в многостраничные tif-документы, затем подписывает их и формирует пакет для ФНС.
//
// Параметры:
//  Параметры	 - Структура - описание см в методе ПараметрыМетодаСформироватьПакетПоЕГРЮЛ
//
Процедура СформироватьПакетПоЕГРЮЛ(Параметры) Экспорт
	
	ДокументооборотСКОКлиент.СформироватьПакетПоЕГРЮЛ(Параметры);
	
КонецПроцедуры

// Описание параметров для метода СформироватьПакетПоЕГРЮЛ
//
// Параметры:
//  ОповещениеОЗавершении	 - ОповещениеОповещения - в данную процедуру будет передан результат:
//								Структура:
//									* Выполнено - Булево
//									* Адрес - Строка - Адрес во временном хранилище, в котором содержатся двоичные данные пакета.
//											Неопределено, если Выполнено Ложь.
//									* ИмяПакета - Строка - Имя файла архива. Неопределено, если Выполнено Ложь.
//									* ТекстИнформации - Строка
//									* ОтправкаСсылка - СправочникСсылка.ОтправкиРегистрацияЮЛ
//									* ТипОшибки - Число
//								или
//								Неопределено - в случае если пользователь нажал Отменить в форме выбора сертификата
//												или в форме ввода пароля для облачного сертификата
//  Заявление	 			 - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//  КодНО		 			 - Строка(4) - код налогового органа, в который будет подаваться заявление
//  ОписаниеФайлов			 - Массив структур - содержит структуры с описанием приложенных сканов:
//								* ВидДокумента - Перечисление.ВидыДокументовДляЭлГосРегистрации - вид документа
// 								* АдресаФайлов - Массив - Массив адресов сканов во временном хранилище, содержащих двоичные
// 										данные файлов. Последовательность адресов в массиве	будет определять последовательность 
//										листов в итоговом tif. Разрешены следующие форматы сканов - BMP, GIF, JPEG, PNG, TIFF.
//								* ТипыСодержимогоЗаявления - Перечисления.ТипыСодержимогоФайлов.XML, если заявление в формате XML,
//										отсутствует или пустое в остальных случаях
//  СпособПредоставленияОтвета - Перечисление.СпособыОтветаНаЭлГосРегистрацию - Способ получения ответа от ФНС
//	ЭлПочтаЗаявителя 		 - Строка - электронная почта заявителя
//	ИННЗаявителя 		     - Строка(12) - ИНН физ.лица заявителя. Пустая строка или строка из 12 нулей, если ИНН отсутствует
//	ПодписатьПакет			 - Булево - показать кнопку "Подписать" на форме
//	ОтправитьПакет			 - Булево - показать кнопку "Подписать и отправить" на форме
//	ВыводитьСообщения		 - Булево - выводить сообщения пользователю об статусе отправки или формирования пакета
// 
Функция ПараметрыМетодаСформироватьПакетПоЕГРЮЛ() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", Неопределено);
	ДополнительныеПараметры.Вставить("Заявление", Неопределено);
	ДополнительныеПараметры.Вставить("КодНО", "");
	ДополнительныеПараметры.Вставить("ОписаниеФайлов", Новый Массив);
	ДополнительныеПараметры.Вставить("СпособПредоставленияОтвета", "0");
	ДополнительныеПараметры.Вставить("ЭлПочтаЗаявителя", "");
	ДополнительныеПараметры.Вставить("ИННЗаявителя", "");
	ДополнительныеПараметры.Вставить("ПодписатьПакет", Истина);
	ДополнительныеПараметры.Вставить("ОтправитьПакет", Ложь);
	ДополнительныеПараметры.Вставить("ВыводитьСообщения", Истина);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

// Открыть форму отправки письма в контролирующие органы
//
// Параметры:
//  Форма                     - ФормаКлиентскогоПриложения - владелец,
//  Организация               - Справочники.ОрганизацияСсылка,
//  КонтролирующийОрган       - Строка - "ФНС", "ПФР" или "ФСГС",
//  КодКонтролирующегоОргана  - Строка - при незаполненном значении подставляется из свойств организации,
//  Тема                      - Строка - при незаполненном значении берется из имени первого вложения,
//  Вложения - СписокЗначений - значение задает адрес во временном хранилище двоичных данных вложения, представление задает имя файла вложения,
//  ДополнительныеРеквизиты   - Структура:
//    * Содержание  - Строка - необязательный ключ, при незаполненном значении берется тема,
//    * Комментарий - Строка - необязательный ключ,
//    * Категория   - Строка - необязательный ключ, определяется автоматически по имени вложения.
// 
Процедура СоздатьПисьмо(
		Форма = Неопределено,
		Организация = Неопределено,
		КонтролирующийОрган = "ФНС",
		КодКонтролирующегоОргана = Неопределено,
		Тема = Неопределено,
		Вложения = Неопределено,
		ДополнительныеРеквизиты = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Отправитель", Организация));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	Если ПараметрыФормы.ДополнительныеРеквизиты = Неопределено Тогда
		ПараметрыФормы.ДополнительныеРеквизиты = Новый Структура;
	КонецЕсли;
	ПараметрыФормы.ДополнительныеРеквизиты.Вставить("КонтролирующийОрган", 		КонтролирующийОрган);
	ПараметрыФормы.ДополнительныеРеквизиты.Вставить("КодКонтролирующегоОргана", КодКонтролирующегоОргана);
	ПараметрыФормы.ДополнительныеРеквизиты.Вставить("Наименование", 			Тема);
	
	ПараметрыФормы.Вставить("ДополнительныеВложения", Вложения);
	
	ОткрытьФорму("Справочник.ПерепискаСКонтролирующимиОрганами.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Осуществляет обмен с получением входящих документов, получением и отправкой ответных квитанций.
// Для проверки, что обмен с контролирующим органом доступен у организации, можно использовать вызов вида:
// ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, КонтролирующийОрган, Ложь)
//
// Параметры:
//   Форма                      - ФормаКлиентскогоПриложения - вызывающая форма, при значении Неопределено используется
//                                встроенная скрытая форма, форма может использоваться как владелец окон, при получении
//                                уникальных идентификаторов.
//   Организации                - СправочникСсылка.Организация или их Массив - при значении Неопределено обмен
//                                осуществляется по учетным записям документооборота всех организаций, кроме
//                                помеченных на удаление.
//   ВыполняемоеОповещение      - ОписаниеОповещения - описание необязательного оповещения, вызываемого после
//                                завершения обмена, при этом на экране может быть отображен диалог с результатами обмена.
//   КонтролирующийОрган        - Строка - если гос. орган задан, обмен, по возможности, выполняется только с ним,
//                                примеры: "ФНС", "ПФР", "ФСГС", "ФСС", "ФСРАР", "РПН", "ФТС", "БанкРоссии".
//   СсылкаНаОтправляемыйОбъект - ДокументСсылка, СправочникСсылка - ссылка на отчет, если нужно обновить состояние
//                                только этого отчета.
//
Процедура ОсуществитьОбменПоОрганизациям(
		Форма = Неопределено,
		Организации = Неопределено,
		ВыполняемоеОповещение = Неопределено,
		КонтролирующийОрган = Неопределено,
		СсылкаНаОтправляемыйОбъект = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", 						Форма);
	ДополнительныеПараметры.Вставить("Организации", 				Организации);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 		ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("КонтролирующийОрган", 		КонтролирующийОрган);
	ДополнительныеПараметры.Вставить("СсылкаНаОтправляемыйОбъект", 	СсылкаНаОтправляемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ОсуществитьОбменПоОрганизациямПослеПолученияКонтекстаЭДО",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

// Получение настроек обмена, свойств сертификата. Описание вызова см. в одноименной процедуре
// обработки "ДокументооборотСКонтролирующимиОрганами", формы "КонтейнерКлиентскихМетодов".
//
// Пример вызова:
//   ИнтерфейсыВзаимодействияБРОКлиент.НастройкиОбменаОрганизаций(Оповещение, Организация);
// 
// Пример обработки результата оповещения:
//   Если Результат <> Неопределено И Результат.НастройкиОбмена[0].СвойстваСертификатаРуководителя <> Неопределено Тогда
//     СвойстваСубъекта = КриптографияЭДКОКлиентСервер.РазобратьСтрокуСубъекта(
//       Результат.НастройкиОбмена[0].СвойстваСертификатаРуководителя.Владелец);
//     ФИО = СокрЛП(СвойстваСубъекта["SN"] + " " + СвойстваСубъекта["GN"]);
//   Иначе
//     ФИО = "";
//   КонецЕсли;
Процедура НастройкиОбменаОрганизаций(
		ОповещениеОЗавершении,
		Ссылки = Неопределено,
		Настройки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Ссылки", 					Ссылки);
	ДополнительныеПараметры.Вставить("Настройки", 				Настройки);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиОбменаОрганизацийПослеПолученияКонтекста",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

// При начале выбора кода налогового органа,
// описание см. МашиночитаемыеДоверенностиФНСКлиентПереопределяемый.ПриНачалеВыбораКодаНалоговогоОргана
//
Процедура ПриНачалеВыбораКодаНалоговогоОргана(Организации, Оповещение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Организация = Неопределено;
	Если ТипЗнч(Организации) = Тип("Массив") ИЛИ ТипЗнч(Организации) = Тип("ФиксированныйМассив") Тогда
		Для каждого ОрганизацияДоверенности Из Организации Цикл
			Если ТипЗнч(ОрганизацияДоверенности) = Тип("СправочникСсылка.Организации") Тогда
				Организация = ОрганизацияДоверенности;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указана организация доверителя';
				|en = 'Не указана организация доверителя'"));
		ВыполнитьОбработкуОповещения(Оповещение, "");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", Новый Массив);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана",
		ПараметрыФормы);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", Оповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНачалеВыбораКодаНалоговогоОрганаПослеВыбора",
			ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
				|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
		ВыполнитьОбработкуОповещения(Оповещение, "");
	КонецЕсли;
	
КонецПроцедуры

// При подписи доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСКлиентПереопределяемый.ПриНачалеПодписания
//
// Дополнительные параметры:
//   Настройки - структура
//      * ОтпечатокСертификатаДоверителя - Строка.
//
Процедура ПриНачалеПодписания(
		Организации,
		Файл,
		Полномочия,
		Оповещение,
		СтандартнаяОбработка,
		Настройки = Неопределено) Экспорт
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПолномочияГосОрганов = (Полномочия = "ПодписаниеВсегда")
		ИЛИ ТипЗнч(Полномочия) = Тип("ДанныеФормыКоллекция") И Полномочия.Количество() = 0;
	
	Если НЕ ЕстьПолномочияГосОрганов И ЗначениеЗаполнено(Полномочия) И ТипЗнч(Полномочия) <> Тип("Строка") Тогда
		Для каждого СвойстваПолномочия Из Полномочия Цикл
			КодПолномочия = ВРег(СвойстваПолномочия.Код);
			Если СтрНайти(КодПолномочия, "_FNS") <> 0 ИЛИ КодПолномочия = "ROSSTAT_STAT_001" ИЛИ КодПолномочия = "RAR_00000001"
				ИЛИ КодПолномочия = "RPNDZ_REPORT" ИЛИ КодПолномочия = "RPNDZ_APPLICATION" ИЛИ КодПолномочия = "EPGU_SUBMIT_EPGU"
				ИЛИ КодПолномочия = "FTS_10001" ИЛИ КодПолномочия = "FTS_10002" Тогда
				
				ЕстьПолномочияГосОрганов = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПолномочияГосОрганов Тогда
		СтандартнаяОбработка = Ложь;
		
		ДоверенностьСсылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(
			Файл, "ВладелецФайла");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Доверенность", 			ДоверенностьСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	Оповещение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНачалеПодписанияПослеПодписания",
			ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ЗарегистрироватьМЧДРР(ОписаниеОповещения, ДоверенностьСсылка,, Настройки);
	КонецЕсли;
	
КонецПроцедуры

// При обработке навигационной ссылки доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСКлиентПереопределяемый.ПриОбработкеНавигационнойСсылки
//
Процедура ПриОбработкеНавигационнойСсылки(
		Доверенность,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка) Экспорт
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#Протокол" Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Доверенность", Доверенность);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОбработкеНавигационнойСсылкиПротоколПослеПолученияКонтекстаЭДО",
			ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#Обновить" Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Доверенность", Доверенность);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОбработкеНавигационнойСсылкиОбновлениеПослеПолученияКонтекстаЭДО",
			ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// При изменении статуса доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСКлиентПереопределяемый.ПриИзмененииСтатусаДоверенности
//
Процедура ПриИзмененииСтатусаДоверенности(СтатусыДоверенностей) Экспорт
	
	Организации = ИнтерфейсыВзаимодействияБРОВызовСервера.ПриИзмененииСтатусаДоверенности(СтатусыДоверенностей, Истина);
	
	МассивСтатусовДоверенностей = Новый Массив;
	Для каждого СтатусыДоверенности Из СтатусыДоверенностей Цикл
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", 		СтатусыДоверенности.Ключ);
		ПараметрыОповещения.Вставить("Организация", Организации[СтатусыДоверенности.Ключ]);
		
		Оповестить("Запись_ОтправкиРР", ПараметрыОповещения);
		
		Если СтатусыДоверенности.Значение.НовыйСтатус <> СтатусыДоверенности.Значение.СтатусДоИзменения Тогда
			ДоверенностьИСтатусы = Новый Структура;
			ДоверенностьИСтатусы.Вставить("Доверенность", 		СтатусыДоверенности.Ключ);
			ДоверенностьИСтатусы.Вставить("НовыйСтатус", 		СтатусыДоверенности.Значение.НовыйСтатус);
			ДоверенностьИСтатусы.Вставить("СтатусДоИзменения", 	СтатусыДоверенности.Значение.СтатусДоИзменения);
			МассивСтатусовДоверенностей.Добавить(ДоверенностьИСтатусы);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("МассивСтатусовДоверенностей", МассивСтатусовДоверенностей);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСтатусаДоверенностиПослеПолученияКонтекстаЭДО",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// При изменении статуса доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСКлиентПереопределяемый.ПриРегистрацииДоверенности
//
Процедура ПриРегистрацииДоверенности(
		Доверенность,
		СтандартнаяОбработка,
		ОбработчикЗавершения,
		ВызыватьОбработчикЗавершенияПриОшибке = Ложь) Экспорт
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Доверенность", 			Доверенность);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", 	ОбработчикЗавершения);
	ДополнительныеПараметры.Вставить("ВызыватьОбработчикЗавершенияПриОшибке", ВызыватьОбработчикЗавершенияПриОшибке);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриРегистрацииДоверенностиПослеПолученияКонтекстаЭДО",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// При изменении доверенности, например, из формы в справочнике "РегистрацииВНалоговомОргане".
//
// Параметры:
//  Элемент 	- ПолеФормы - изменяемый элемент доверенности.
//  Форма 	 	- ФормаКлиентскогоПриложения.
//  Настройки 	- структура:
//      * ОповещениеОЗавершении 			- ОписаниеОповещения или Неопределено - по умолчанию Неопределено,
//      * ИмяРеквизитаДоверенность 			- Строка или Неопределено - по умолчанию "Доверенность",
//      * ИмяРеквизитаКод 					- Строка или Неопределено - по умолчанию "Код",
//      * ИмяРеквизитаДокументПредставителя - Строка или Неопределено - по умолчанию "ДокументПредставителя".
//
Процедура ДоверенностьПриИзменении(Элемент, Форма, Настройки = Неопределено) Экспорт
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ОповещениеОЗавершении", 				Неопределено);
	НастройкиВызова.Вставить("ИмяРеквизитаДоверенность", 			"Доверенность");
	НастройкиВызова.Вставить("ИмяРеквизитаКод", 					"Код");
	НастройкиВызова.Вставить("ИмяРеквизитаДокументПредставителя", 	"ДокументПредставителя");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкиВызова.ИмяРеквизитаДоверенность)
		ИЛИ НЕ ЗначениеЗаполнено(Форма[НастройкиВызова.ИмяРеквизитаДоверенность]) Тогда
		
		Если ЗначениеЗаполнено(НастройкиВызова.ОповещениеОЗавершении) Тогда
			ВыполнитьОбработкуОповещения(НастройкиВызова.ОповещениеОЗавершении, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтоМЧДЕдиногоФормата = Ложь;
	ЭтоМЧД = ТипЗнч(Форма[НастройкиВызова.ИмяРеквизитаДоверенность]) =
			Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС")
		ИЛИ ТипЗнч(Форма[НастройкиВызова.ИмяРеквизитаДоверенность]) =
			Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр");
	Если НЕ ЭтоМЧД Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенности =
			ДокументооборотСКОВызовСервера.ИмяТипаСправочникаМашиночитаемыеДоверенности();
		ЭтоМЧДЕдиногоФормата = (ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
			И ТипЗнч(Форма[НастройкиВызова.ИмяРеквизитаДоверенность]) =
				Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности));
		ЭтоМЧД = ЭтоМЧДЕдиногоФормата;
	КонецЕсли;
	
	Если НЕ ЭтоМЧД Тогда
		Если ЗначениеЗаполнено(НастройкиВызова.ОповещениеОЗавершении) Тогда
			ВыполнитьОбработкуОповещения(НастройкиВызова.ОповещениеОЗавершении, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЕстьНалоговыеПолномочия = Неопределено;
	Если ЭтоМЧДЕдиногоФормата Тогда
		МассивПолномочий = ДокументооборотСКОВызовСервера.ПолномочияМЧДЕдиногоФормата(
			Форма[НастройкиВызова.ИмяРеквизитаДоверенность]);
		
		Если МассивПолномочий.Количество() <> 0  Тогда
			ЕстьНалоговыеПолномочия = Ложь;
			Для каждого КодПолномочия Из МассивПолномочий Цикл
				КодПолномочияВРег = ВРег(КодПолномочия);
				Если СтрНайти(КодПолномочияВРег, "_FNS") <> 0 Тогда
					ЕстьНалоговыеПолномочия = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", 			Форма);
	ДополнительныеПараметры.Вставить("Доверенность", 	Форма[НастройкиВызова.ИмяРеквизитаДоверенность]);
	ДополнительныеПараметры.Вставить("НастройкиВызова", НастройкиВызова);
	Оповещение = Новый ОписаниеОповещения("ДоверенностьПриИзмененииПослеПодтвержденияПолномочий",
		ЭтотОбъект, ДополнительныеПараметры);
	Если ЕстьНалоговыеПолномочия = Ложь Тогда
		ТекстВопроса =
			НСтр("ru = 'Машиночитаемая доверенность не предназначена для сдачи отчетности в ФНС: указаны ограниченные полномочия, но отсутствуют полномочия с кодами, начинающимися на ""2_FNS"".
					   |
					   |Все равно выбрать доверенность?';
					   |en = 'Машиночитаемая доверенность не предназначена для сдачи отчетности в ФНС: указаны ограниченные полномочия, но отсутствуют полномочия с кодами, начинающимися на ""2_FNS"".
					   |
					   |Все равно выбрать доверенность?'");
		Форма[НастройкиВызова.ИмяРеквизитаДоверенность] = Неопределено;
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапроситьВыпискуОперацийПоРасчетуСБюджетом_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	КонтекстЭДОКлиент.ЗапроситьВыпискуОперацийПоРасчетуСБюджетом(ВходящийКонтекст);
	
КонецПроцедуры

#Область ЗапросВФНСНаПроверкуСведенийРаботников

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(ПараметрыСохранения)
	
	Оп = Новый ОписаниеОповещения(
	"СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковПродолжение", ЭтотОбъект, ПараметрыСохранения);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Оп);
	
КонецПроцедуры

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковПродолжение(Подключено, ПараметрыСохранения) Экспорт
#Если ВебКлиент Тогда
	Для Каждого ОпПередаваемогоФайла Из ПараметрыСохранения.ПолучаемыеФайлы Цикл
		ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите путь для сохранения файла';
											|en = 'Выберите путь для сохранения файла'");
		НачатьПолучениеФайлаССервера(ОпПередаваемогоФайла.Хранение, ОпПередаваемогоФайла.Имя, ПараметрыДиалога);
	КонецЦикла;
#Иначе
	ПутьВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки();
	Если ПутьВыгрузки <> Ложь Тогда
		НачатьПолучениеФайловССервера(
			Новый ОписаниеОповещения("СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковЗавершение", ЭтотОбъект, ПараметрыСохранения),
			ПараметрыСохранения.ПолучаемыеФайлы, ПутьВыгрузки);
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковЗавершение(ПолученныеФайлы, ПараметрыСохранения) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеФайлы.Количество() = 1 Тогда
		
		РазделительПутиОС = ПолучитьРазделительПути();
		ПолноеИмяПолученногоФайла = СтрЗаменить(ПолученныеФайлы[0].ПолноеИмя, "/", РазделительПутиОС);
		ДанныеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяПолученногоФайла);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Файл запроса в ФНС на проверку ИНН, ФИО, СНИЛС работающих лиц %1 сохранен в каталог %2.';
			|en = 'Файл запроса в ФНС на проверку ИНН, ФИО, СНИЛС работающих лиц %1 сохранен в каталог %2.'"),
			ДанныеФайла.Имя, ДанныеФайла.Путь));
	ИначеЕсли ПолученныеФайлы.Количество() > 1 Тогда
		ТекстСообщения = "Файлы запроса в ФНС на проверку ИНН, ФИО, СНИЛС работающих лиц:";
		Для Каждого ПолучФайл Из ПолученныеФайлы Цикл
			ДанныеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолучФайл.ПолноеИмя);
			ТекстСообщения = ТекстСообщения + Символы.ПС + "- """ + ДанныеФайла.Имя + """;";
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + Символы.ПС + "сохранены в каталог """ + ДанныеФайла.Путь + """.";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПолучитьПроцедурыДекларированияФТСПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПолучитьПроцедурыДекларированияФТС(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ДополнительныеПараметры.Организация,
		ДополнительныеПараметры.РежимПолучения,
		ДополнительныеПараметры.Отборы,
		ДополнительныеПараметры.РежимыРаботы);
	
КонецПроцедуры

Процедура ОбработатьРезультатыПолученияПроцедурДекларированияФТСПослеПолученияКонтекста(Результат,
		ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	КонтекстЭДОКлиент.ОбработатьРезультатыПолученияПроцедурДекларированияФТС(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ДополнительныеПараметры.ПроцедурыДекларирования,
		ДополнительныеПараметры.ДополнительныеПараметрыПолучения,
		ДополнительныеПараметры.ОповещениеОПолученииНастроек);
	
КонецПроцедуры

#Область ПодписьXMLDSig

Процедура ПодписатьФайлXMLDSigПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("КонтекстЭДОКлиент", Результат.КонтекстЭДО);
	Если ВходящийКонтекст.КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияЭДКОКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Если ВходящийКонтекст.ВозвращатьДвоичныеДанные Тогда
			УдалитьИзВременногоХранилища(ВходящийКонтекст.АдресДанных);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, ВходящийКонтекст);
	
	ВходящийКонтекст.Вставить("ЗначенияРеквизитовОбмена", Неопределено);
	Если ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
		
		НастройкиПолучения = Новый Структура("ПолучатьРеквизитыУчетнойЗаписи", Ложь);
		ВходящийКонтекст.ЗначенияРеквизитовОбмена =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначенияРеквизитовОбмена(
				ВходящийКонтекст.ОрганизацияИлиСертификат, НастройкиПолучения);
		
		Если НЕ ЗначениеЗаполнено(ВходящийКонтекст.ЗначенияРеквизитовОбмена.УчетнаяЗапись) Тогда
			ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами не подключен. Подключение доступно в 1С-Отчетности, разделе ""Настройки"".';
								|en = 'Электронный документооборот с контролирующими органами не подключен. Подключение доступно в 1С-Отчетности, разделе ""Настройки"".'");
			ОбщегоНазначенияЭДКОКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Если ВходящийКонтекст.ВозвращатьДвоичныеДанные Тогда
				УдалитьИзВременногоХранилища(ВходящийКонтекст.АдресДанных);
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("Структура")
		ИЛИ ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("ФиксированнаяСтруктура") Тогда
		
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ВходящийКонтекст.ОрганизацияИлиСертификат);
		КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, ВходящийКонтекст);
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеПоискаСертификата", ЭтотОбъект, ВходящийКонтекст);
		РезультатПоиска = Новый Структура;
		РезультатПоиска.Вставить("Выполнено", 			Истина);
		РезультатПоиска.Вставить("СертификатНайден", 	Истина);
		РезультатПоиска.Вставить("СвойстваСертификата", ВходящийКонтекст.ОрганизацияИлиСертификат);
		ВыполнитьОбработкуОповещения(Оповещение, РезультатПоиска);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеАвтонастройки", ЭтотОбъект, ВходящийКонтекст);
	Если ВходящийКонтекст.ЗначенияРеквизитовОбмена <> Неопределено
		И ВходящийКонтекст.ЗначенияРеквизитовОбмена.ПользователюРазрешеноВыполнятьОбмен Тогда
		
		ВходящийКонтекст.КонтекстЭДОКлиент.АвтоматическаяНастройкаУчетнойЗаписи(
			ВходящийКонтекст.ЗначенияРеквизитовОбмена.УчетнаяЗапись,,
			Оповещение,,,
			Истина);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьФайлXMLDSigПослеАвтонастройки(Результат, ВходящийКонтекст) Экспорт
	
	СертификатДляПоиска = Новый Структура;
	СертификатДляПоиска.Вставить("Отпечаток", ВходящийКонтекст.ОрганизацияИлиСертификат);
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ВходящийКонтекст);
	
	Если ВходящийКонтекст.ЗначенияРеквизитовОбмена <> Неопределено Тогда
		НастройкиПолучения = Новый Структура("ПолучатьПраваОбмена", Ложь);
		ЗначенияРеквизитов = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначенияРеквизитовОбмена(
			ВходящийКонтекст.ЗначенияРеквизитовОбмена.УчетнаяЗапись, НастройкиПолучения);
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ВходящийКонтекст.ЗначенияРеквизитовОбмена.УчетнаяЗапись);
		СертификатДляПоиска.Отпечаток = ЗначенияРеквизитов.СертификатРуководителя;
	КонецЕсли;
	
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, СертификатДляПоиска);
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, ВходящийКонтекст);
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеПоискаСертификата", ЭтотОбъект, ВходящийКонтекст);
	КриптографияЭДКОКлиент.НайтиСертификат(Оповещение, СертификатДляПоиска, Истина);
	
КонецПроцедуры

Процедура ПодписатьФайлXMLDSigПослеПоискаСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Если ВходящийКонтекст.ВозвращатьДвоичныеДанные Тогда
			УдалитьИзВременногоХранилища(ВходящийКонтекст.АдресДанных);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.СертификатНайден Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось найти сертификат руководителя в системном хранилище сертификатов.';
							|en = 'Не удалось найти сертификат руководителя в системном хранилище сертификатов.'");
		ОбщегоНазначенияЭДКОКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Если ВходящийКонтекст.ВозвращатьДвоичныеДанные Тогда
			УдалитьИзВременногоХранилища(ВходящийКонтекст.АдресДанных);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Результат.СвойстваСертификата.Свойство("Валиден") И НЕ Результат.СвойстваСертификата.Валиден Тогда
		Если ВходящийКонтекст.ВозвращатьДвоичныеДанные Тогда
			УдалитьИзВременногоХранилища(ВходящийКонтекст.АдресДанных);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	СвойстваСертификата = Результат.СвойстваСертификата;
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ВходящийКонтекст);
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, СвойстваСертификата);
	НастройкиПодписи = ВходящийКонтекст.НастройкиПодписи;
	
	Если НастройкиПодписи = Неопределено Тогда
		НастройкиПодписи = Новый Структура;
		НастройкиПодписи.Вставить("ДополнитьПространстваИменУзлаПодписи", Истина);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеПодписания", ЭтотОбъект, ВходящийКонтекст);
	ВходящийКонтекст.КонтекстЭДОКлиент.ПодписатьФайлXMLDSig(
		СвойстваСертификата,
		ВходящийКонтекст.АдресДанных,
		Оповещение,,,
		НастройкиПодписи);
	
КонецПроцедуры

Процедура ПодписатьФайлXMLDSigПослеПодписания(Результат, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.ВозвращатьДвоичныеДанные Тогда
		УдалитьИзВременногоХранилища(ВходящийКонтекст.АдресДанных);
		
		Если Результат <> Неопределено Тогда
			Результат = ДокументооборотСКОВызовСервера.ПолучитьИзВременногоХранилищаИУдалить(Результат);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

Процедура ОсуществитьОбменПоОрганизациямПослеПолученияКонтекстаЭДО(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Если ВходящийКонтекст.ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ВходящийКонтекст.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	
	Если ВходящийКонтекст.Форма = Неопределено Тогда
		ВходящийКонтекст.Форма = КонтекстЭДОКлиент;
	КонецЕсли;
	
	Если ВходящийКонтекст.Организации = Неопределено Тогда
		ВходящийКонтекст.Организации = ИнтерфейсыВзаимодействияБРОВызовСервера.ВсеОрганизации();
		
	ИначеЕсли ТипЗнч(ВходящийКонтекст.Организации) <> Тип("Массив")
		И ТипЗнч(ВходящийКонтекст.Организации) <> Тип("ФиксированныйМассив") Тогда
		
		ВходящийКонтекст.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВходящийКонтекст.Организации);
	КонецЕсли;
	
	Если ВходящийКонтекст.Организации.Количество() = 0 Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Организация не выбрана';
															|en = 'Организация не выбрана'"),, "Организация");
		Если ВходящийКонтекст.ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НомерОбъекта = 0;
	ВходящийКонтекст.Вставить("НомерОбъекта", НомерОбъекта);
	
	ЭтоОбменТолькоСФНСПФРиРосстатом = (ВходящийКонтекст.КонтролирующийОрган = "ФНС"
		ИЛИ ВходящийКонтекст.КонтролирующийОрган = "ПФР" ИЛИ ВходящийКонтекст.КонтролирующийОрган = "ФСГС");
	Если НЕ КонтекстЭДОКлиент.ЕстьВозможностьОбмена(ВходящийКонтекст.Организации, ЭтоОбменТолькоСФНСПФРиРосстатом) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДлительногоОбмена 								= ДлительнаяОтправкаКлиент.ПараметрыДлительногоОбмена();
	ПараметрыДлительногоОбмена.Организации 					= ВходящийКонтекст.Организации;
	ПараметрыДлительногоОбмена.ЭтоОбменИзФормы1СОтчетность 	= Истина;
	
	// обмен из 1С-Отчетность
	Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительногоОбмена(ПараметрыДлительногоОбмена) Тогда
		Если ВходящийКонтекст.ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(ВходящийКонтекст,
		"ИнтерфейсыВзаимодействияБРО.ВходящийКонтекстОбмена");
	
	// глобальный обработчик из модуля ДлительнаяОтправкаКлиентГлобальный
	ПодключитьОбработчикОжидания("Подключаемый_ОсуществитьОбменПоОрганизациям", 0.1, Истина);
	
КонецПроцедуры

Процедура ОсуществитьОбменПоОрганизациямОбъекта() Экспорт
	
	ВходящийКонтекст = ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации(
		"ИнтерфейсыВзаимодействияБРО.ВходящийКонтекстОбмена");
	
	Если ВходящийКонтекст.НомерОбъекта + 1 > ВходящийКонтекст.Организации.Количество() Тогда
		ДлительнаяОтправкаКлиент.ОповеститьОЗавершенииОбмена(); // из формы 1С-Отчетность
		Если ВходящийКонтекст.ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Неопределено);
		КонецЕсли;
		
	Иначе
		// получим очередную организацию для обмена
		ОрганизацияДляОбмена = ВходящийКонтекст.Организации[ВходящийКонтекст.НомерОбъекта];
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОсуществитьОбменПоОрганизациямПослеОбмена",
			ЭтотОбъект, ВходящийКонтекст);
		
		ВходящийКонтекст.КонтекстЭДОКлиент.ОсуществитьОбменПоОрганизации(
			ВходящийКонтекст.Форма,
			ОрганизацияДляОбмена,
			ОписаниеОповещения,
			ВходящийКонтекст.КонтролирующийОрган,
			ВходящийКонтекст.СсылкаНаОтправляемыйОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсуществитьОбменПоОрганизациямПослеОбмена(Результат, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.НомерОбъекта = ВходящийКонтекст.НомерОбъекта + 1;
	
	ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(ВходящийКонтекст,
		"ИнтерфейсыВзаимодействияБРО.ВходящийКонтекстОбмена");
	
	// глобальный обработчик из модуля ДлительнаяОтправкаКлиентГлобальный
	ПодключитьОбработчикОжидания("Подключаемый_ОсуществитьОбменПоОрганизациям", 0.1, Истина);
	
КонецПроцедуры

Процедура НастройкиОбменаОрганизацийПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.НастройкиОбменаОрганизаций(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ДополнительныеПараметры.Ссылки,
		ДополнительныеПараметры.Настройки);
	
КонецПроцедуры

Процедура ПриНачалеВыбораКодаНалоговогоОрганаПослеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении,
		?(РезультатВыбора = Неопределено, "", РезультатВыбора.КодНО));
	
КонецПроцедуры

Процедура ПриНачалеПодписанияПослеПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	СодержимоеПодписи = ?(Результат.Свойство("СодержимоеПодписи") И ЗначениеЗаполнено(Результат.СодержимоеПодписи),
		Результат.СодержимоеПодписи, Неопределено);
	
	СвойстваПодписи = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваПодписи(
		СодержимоеПодписи, Истина);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успех", 			СодержимоеПодписи <> Неопределено);
	РезультатВыполнения.Вставить("СвойстваПодписи", СвойстваПодписи);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
	
КонецПроцедуры

Процедура ПриОбработкеНавигационнойСсылкиПротоколПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДоверенностьСсылка = ?(ТипЗнч(ДополнительныеПараметры.Доверенность) = Тип("ФормаКлиентскогоПриложения"),
		ДополнительныеПараметры.Доверенность.Объект.Ссылка, ДополнительныеПараметры.Доверенность);
	
	ОтправкаСсылка = КонтекстЭДОКлиент.ПолучитьПоследнююОтправкуОтчетаВФТС(ДоверенностьСсылка);
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляФТС(ОтправкаСсылка);
	
КонецПроцедуры

Процедура ПриОбработкеНавигационнойСсылкиОбновлениеПослеПолученияКонтекстаЭДО(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДоверенностьСсылка = ?(ТипЗнч(ДополнительныеПараметры.Доверенность) = Тип("ФормаКлиентскогоПриложения"),
		ДополнительныеПараметры.Доверенность.Объект.Ссылка, ДополнительныеПараметры.Доверенность);
	
	ОрганизацияСсылка = ДокументооборотСКОВызовСервера.ОрганизацияМЧДЕдиногоФормата(ДоверенностьСсылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОбработкеНавигационнойСсылкиОбновлениеПослеОбновления",
		ЭтотОбъект, ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ОбновитьМашиночитаемуюДоверенностьФТС(
		ОписаниеОповещения,
		ОрганизацияСсылка,,
		ДоверенностьСсылка);
		
КонецПроцедуры

Процедура ПриОбработкеНавигационнойСсылкиОбновлениеПослеОбновления(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ОтправкаСсылка")
		И Результат.ОтправкаСсылка <> Неопределено Тогда
		
		ДоверенностьСсылка = ?(ТипЗнч(ДополнительныеПараметры.Доверенность) = Тип("ФормаКлиентскогоПриложения"),
			ДополнительныеПараметры.Доверенность.Объект.Ссылка, ДополнительныеПараметры.Доверенность);
		Оповестить("Запись_СтатусМЧДВДругомРеестре",, ДоверенностьСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСтатусаДоверенностиПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", 	КонтекстЭДОКлиент);
	ДополнительныеПараметры.Вставить("ИндексДоверенности", 	-1);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСтатусаДоверенностиПослеПодтверждения",
		ЭтотОбъект, ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПриИзмененииСтатусаДоверенностиПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Пока Истина Цикл
		ДополнительныеПараметры.ИндексДоверенности = ДополнительныеПараметры.ИндексДоверенности + 1;
		Если ДополнительныеПараметры.ИндексДоверенности >=
			ДополнительныеПараметры.МассивСтатусовДоверенностей.Количество() Тогда
			
			Возврат;
		КонецЕсли;
		
		СтатусыДоверенности =
			ДополнительныеПараметры.МассивСтатусовДоверенностей[ДополнительныеПараметры.ИндексДоверенности];
		
		СтатусЗарегистрирована = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Зарегистрирована");
		Если ЗначениеЗаполнено(СтатусыДоверенности.НовыйСтатус) И СтатусыДоверенности.НовыйСтатус = СтатусЗарегистрирована
			И (НЕ ЗначениеЗаполнено(СтатусыДоверенности.СтатусДоИзменения)
				ИЛИ СтатусыДоверенности.СтатусДоИзменения <> СтатусЗарегистрирована) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСтатусаДоверенностиПослеПодключенияДляФНС",
				ЭтотОбъект, ДополнительныеПараметры);
			ДокументооборотСКОКлиент.ПодключитьЗарегистрированныеМЧДФНС(
				ОписаниеОповещения,,
				СтатусыДоверенности.Доверенность);
			Возврат;
			
		Иначе
			СтатусОтменена = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Отменена");
			СтатусПросрочена = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Просрочена");
			Если ЗначениеЗаполнено(СтатусыДоверенности.НовыйСтатус) И (СтатусыДоверенности.НовыйСтатус = СтатусОтменена
					И (НЕ ЗначениеЗаполнено(СтатусыДоверенности.СтатусДоИзменения)
						ИЛИ СтатусыДоверенности.СтатусДоИзменения <> СтатусОтменена))
				ИЛИ (СтатусыДоверенности.НовыйСтатус = СтатусПросрочена
					И (НЕ ЗначениеЗаполнено(СтатусыДоверенности.СтатусДоИзменения)
						ИЛИ СтатусыДоверенности.СтатусДоИзменения <> СтатусПросрочена)) Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСтатусаДоверенностиПослеОтключенияДляФНС",
					ЭтотОбъект, ДополнительныеПараметры);
				ДокументооборотСКОКлиент.ОтключитьНедействительныеМЧДФНС(
					ОписаниеОповещения,,
					СтатусыДоверенности.Доверенность,,,
					?(СтатусыДоверенности.НовыйСтатус = СтатусПросрочена, "Просрочена", Неопределено));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииСтатусаДоверенностиПослеПодключенияДляФНС(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	СтатусыДоверенности = ДополнительныеПараметры.МассивСтатусовДоверенностей[ДополнительныеПараметры.ИндексДоверенности];
	
	Если ДокументооборотСКОВызовСервера.МЧДТребуетПодключения(СтатусыДоверенности.Доверенность, "ФСГС") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСтатусаДоверенностиПослеПодтверждения",
			ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДоверенностьСсылка", СтатусыДоверенности.Доверенность);
		ОткрытьФорму(
			КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодключенияМЧД",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСтатусаДоверенностиПослеОтключенияДляФНС(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	СтатусыДоверенности = ДополнительныеПараметры.МассивСтатусовДоверенностей[ДополнительныеПараметры.ИндексДоверенности];
	
	Если ДокументооборотСКОВызовСервера.МЧДТребуетОтключения(СтатусыДоверенности.Доверенность, "ФСГС") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСтатусаДоверенностиПослеПодтверждения",
			ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДоверенностьСсылка", СтатусыДоверенности.Доверенность);
		ОткрытьФорму(
			КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаОтключенияМЧД",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриРегистрацииДоверенностиПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Результат.ТекстОшибки);
		Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено
			И ДополнительныеПараметры.ВызыватьОбработчикЗавершенияПриОшибке Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("СформироватьФайлДоверенностиПриОтсутствии", Ложь);
	ПараметрыВозврата.Вставить("ИгнорироватьОтсутствиеФайлаДоверенности", 	Истина);
	ПараметрыВозврата.Вставить("Организация", 								Неопределено);
	РезультатыВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДЕдиногоФормата(ДополнительныеПараметры.Доверенность,
		ПараметрыВозврата);
	
	Если НЕ ЗначениеЗаполнено(РезультатыВыгрузки) Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
			НСтр("ru = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)';
				|en = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)'"));
		Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено
			И ДополнительныеПараметры.ВызыватьОбработчикЗавершенияПриОшибке Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, Ложь);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли РезультатыВыгрузки.Количество() < 2 Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
			НСтр("ru = 'Машиночитаемая доверенность (единый формат) не подписана';
				|en = 'Машиночитаемая доверенность (единый формат) не подписана'"));
		Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено
			И ДополнительныеПараметры.ВызыватьОбработчикЗавершенияПриОшибке Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриРегистрацииДоверенностиПослеОтправки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ОтправитьМашиночитаемуюДоверенностьФТС(
		ОписаниеОповещения,
		ПараметрыВозврата.Организация,
		РезультатыВыгрузки[0].Имя,
		РезультатыВыгрузки[0].Адрес,
		РезультатыВыгрузки[1].Адрес,
		ДополнительныеПараметры.Доверенность);
	
КонецПроцедуры

Процедура ПриРегистрацииДоверенностиПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ Результат.Свойство("ОтправкаСсылка")
		ИЛИ НЕ ЗначениеЗаполнено(Результат.ОтправкаСсылка) Тогда
		
		Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено
			И ДополнительныеПараметры.ВызыватьОбработчикЗавершенияПриОшибке Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось зарегистрировать машиночитаемую доверенность (единый формат) в ФТС';
					|en = 'Не удалось зарегистрировать машиночитаемую доверенность (единый формат) в ФТС'"));
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения);
	
КонецПроцедуры

Процедура ДоверенностьПриИзмененииПослеПодтвержденияПолномочий(Результат, ДополнительныеПараметры) Экспорт
	
	Форма 			= ДополнительныеПараметры.Форма;
	НастройкиВызова = ДополнительныеПараметры.НастройкиВызова;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Если ЗначениеЗаполнено(НастройкиВызова.ОповещениеОЗавершении) Тогда
			ВыполнитьОбработкуОповещения(НастройкиВызова.ОповещениеОЗавершении, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МассивКодовНалоговыхОрганов = ДокументооборотСКОВызовСервера.КодыНалоговыхОргановМЧДФНС(
		Форма[НастройкиВызова.ИмяРеквизитаДоверенность]);
	Оповещение = Новый ОписаниеОповещения("ДоверенностьПриИзмененииПослеПодтвержденияКодовНО",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(НастройкиВызова.ИмяРеквизитаКод) И ЗначениеЗаполнено(Форма[НастройкиВызова.ИмяРеквизитаКод])
		И МассивКодовНалоговыхОрганов.Количество() <> 0
		И МассивКодовНалоговыхОрганов.Найти(Форма[НастройкиВызова.ИмяРеквизитаКод]) = Неопределено Тогда
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Машиночитаемая доверенность не действует для налогового органа %1.
					   |
					   |Все равно выбрать доверенность?';
					   |en = 'Машиночитаемая доверенность не действует для налогового органа %1.
					   |
					   |Все равно выбрать доверенность?'"),
			Форма[НастройкиВызова.ИмяРеквизитаКод]);
		Форма[НастройкиВызова.ИмяРеквизитаДоверенность] = Неопределено;
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоверенностьПриИзмененииПослеПодтвержденияКодовНО(Результат, ДополнительныеПараметры) Экспорт
	
	ДокументПредставителяИзменен = Ложь;
	
	Форма 			= ДополнительныеПараметры.Форма;
	НастройкиВызова = ДополнительныеПараметры.НастройкиВызова;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Доверенность) Тогда
			РеквизитыДоверенности = ДокументооборотСКОВызовСервера.ЗначенияРеквизитовМЧД(
				ДополнительныеПараметры.Доверенность,
				"ВерсияФормата, НомерДоверенности, РегистрационныйНомерДоверенности");
			Если РеквизитыДоверенности = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Форма[НастройкиВызова.ИмяРеквизитаДоверенность] = ДополнительныеПараметры.Доверенность;
			
			ЭтоВерсия5_02 = ЗначениеЗаполнено(РеквизитыДоверенности.ВерсияФормата)
				И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РеквизитыДоверенности.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
			
			Если ЭтоВерсия5_02 И ЗначениеЗаполнено(НастройкиВызова.ИмяРеквизитаДокументПредставителя) Тогда
				Если ТипЗнч(Форма[НастройкиВызова.ИмяРеквизитаДоверенность]) =
						Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда
					
					Форма[НастройкиВызова.ИмяРеквизитаДокументПредставителя] =
						РеквизитыДоверенности.РегистрационныйНомерДоверенности;
					ДокументПредставителяИзменен = Истина;
					
				ИначеЕсли ТипЗнч(Форма[НастройкиВызова.ИмяРеквизитаДоверенность]) =
					Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
					
					Форма[НастройкиВызова.ИмяРеквизитаДокументПредставителя] = РеквизитыДоверенности.НомерДоверенности;
					ДокументПредставителяИзменен = Истина;
					
				Иначе
					ИмяТипаСправочникаМашиночитаемыеДоверенности =
						ДокументооборотСКОВызовСервера.ИмяТипаСправочникаМашиночитаемыеДоверенности();
					Если ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
						И ТипЗнч(Форма[НастройкиВызова.ИмяРеквизитаДоверенность]) =
						Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
						
						Форма[НастройкиВызова.ИмяРеквизитаДокументПредставителя] =
							РеквизитыДоверенности.РегистрационныйНомерДоверенности;
						ДокументПредставителяИзменен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиВызова.ОповещениеОЗавершении) Тогда
		ВыполнитьОбработкуОповещения(НастройкиВызова.ОповещениеОЗавершении, ДокументПредставителяИзменен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти