////////////////////////////////////////////////////////////////////////////////
// Подсистема «Учет среднего заработка».
// 
// Процедуры и функции, предназначенные для использования как на сервере, 
// так и на клиенте.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Предоставляет значение среднего заработка.
//
// Параметры
//	Начисления - тип коллекция строк, для которой доступен обход Для Каждого ... Из...
//		структура строк соответствует конструктору ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка
//	Время - тип коллекция строк, для которой доступен обход Для Каждого ... Из...
//	ДополнительныеПараметры - тип Структура, см. УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка.
//
// Возвращаемое значение - Число, значение среднедневного или среднечасового заработка.
//
Функция СреднийЗаработокОбщий(Начисления, Время, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработка(Начисления, Время, ДополнительныеПараметры);
	
	Отбор = Неопределено;
	Если ДополнительныеПараметры.ТолькоИндексируемый Тогда 
		Отбор = Новый Структура("Индексируется", Истина);
	КонецЕсли;
	
	ВсегоЗаработок = ИтогиПоПолю(ДанныеДляРасчета.Заработок, "Учтено", Отбор);	
	ВсегоВремя = ИтогиПоПолю(ДанныеДляРасчета.ОтработанноеВремя, "Учтено");	
	
	Возврат СреднийЗаработок(ВсегоЗаработок, ВсегоВремя); 
	
КонецФункции

Функция ЗначенияПоказателейСреднегоЗаработкаОбщего(Начисления, Время, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ПараметрыРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ДополнительныеПараметры);
	ПараметрыРасчета.ПоНачислениям = Истина;
	
	ОтработанноеВремя = Новый Массив;
	РассчитатьУчитываемоеВремя(Время, ОтработанноеВремя, ПараметрыРасчета);
	
	ДоляВремени = ДоляОтработанногоВремени(ОтработанноеВремя);
	
	Заработок = Новый Массив;
	РассчитатьУчитываемыйЗаработок(Начисления, Заработок, ДоляВремени, ПараметрыРасчета);
	
	ВсегоВремя = ИтогиПоПолю(ОтработанноеВремя, "Учтено");	
	
	НачисленияРКСН = ЗарплатаКадрыКлиентСервер.НачисленияРКСН();
	НачисленияРК = НачисленияРКСН.НачисленияРК;
	НачисленияСН = НачисленияРКСН.НачисленияСН;
	
	ЗаработокВсего = 0;
	ЗаработокИндексируемый = 0;
	ЗаработокНеиндексируемый = 0;
	ЗаработокВсегоРК = 0;
	ЗаработокИндексируемыйРК = 0;
	ЗаработокНеиндексируемыйРК = 0;
	ЗаработокВсегоСН = 0;
	ЗаработокИндексируемыйСН = 0;
	ЗаработокНеиндексируемыйСН = 0;
	
	Для Каждого СтрокаЗаработка Из Заработок Цикл
		Учтено = СтрокаЗаработка.Учтено;
		ЗаработокВсего = ЗаработокВсего + Учтено;
		Если СтрокаЗаработка.Индексируется Тогда 
			ЗаработокИндексируемый = ЗаработокИндексируемый + Учтено;
		Иначе 
			ЗаработокНеиндексируемый = ЗаработокНеиндексируемый + Учтено;
		КонецЕсли;
		Если НачисленияРК.Найти(СтрокаЗаработка.Начисление) <> Неопределено Тогда 
			ЗаработокВсегоРК = ЗаработокВсегоРК + Учтено;
			Если СтрокаЗаработка.Индексируется Тогда 
				ЗаработокИндексируемыйРК = ЗаработокИндексируемыйРК + Учтено;
			Иначе 
				ЗаработокНеиндексируемыйРК = ЗаработокНеиндексируемыйРК + Учтено;
			КонецЕсли;
		ИначеЕсли НачисленияСН.Найти(СтрокаЗаработка.Начисление) <> Неопределено Тогда
			ЗаработокВсегоСН = ЗаработокВсегоСН + Учтено;
			Если СтрокаЗаработка.Индексируется Тогда 
				ЗаработокИндексируемыйСН = ЗаработокИндексируемыйСН + Учтено;
			Иначе 
				ЗаработокНеиндексируемыйСН = ЗаработокНеиндексируемыйСН + Учтено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗначенияПоказателей = Новый Структура(
		"СреднийЗаработокОбщий, 
		|СреднийЗаработокИндексируемый, 
		|СреднийЗаработокНеиндексируемый, 
		|СреднийЗаработокРК, 
		|СреднийЗаработокИндексируемыйРК, 
		|СреднийЗаработокНеиндексируемыйРК, 
		|СреднийЗаработокСН, 
		|СреднийЗаработокИндексируемыйСН, 
		|СреднийЗаработокНеиндексируемыйСН");
	
	ЗначенияПоказателей.СреднийЗаработокОбщий = СреднийЗаработок(ЗаработокВсего, ВсегоВремя);
	ЗначенияПоказателей.СреднийЗаработокИндексируемый = СреднийЗаработок(ЗаработокИндексируемый, ВсегоВремя);
	ЗначенияПоказателей.СреднийЗаработокНеиндексируемый = ЗначенияПоказателей.СреднийЗаработокОбщий - ЗначенияПоказателей.СреднийЗаработокИндексируемый;
	ЗначенияПоказателей.СреднийЗаработокРК = СреднийЗаработок(ЗаработокВсегоРК, ВсегоВремя);
	ЗначенияПоказателей.СреднийЗаработокИндексируемыйРК = СреднийЗаработок(ЗаработокИндексируемыйРК, ВсегоВремя);
	ЗначенияПоказателей.СреднийЗаработокНеиндексируемыйРК = ЗначенияПоказателей.СреднийЗаработокРК - ЗначенияПоказателей.СреднийЗаработокИндексируемыйРК;
	ЗначенияПоказателей.СреднийЗаработокСН = СреднийЗаработок(ЗаработокВсегоСН, ВсегоВремя);
	ЗначенияПоказателей.СреднийЗаработокИндексируемыйСН = СреднийЗаработок(ЗаработокИндексируемыйСН, ВсегоВремя);
	ЗначенияПоказателей.СреднийЗаработокНеиндексируемыйСН = ЗначенияПоказателей.СреднийЗаработокСН - ЗначенияПоказателей.СреднийЗаработокИндексируемыйСН;
	
	Возврат ЗначенияПоказателей; 
	
КонецФункции

// Преобразованные данные для расчета среднего заработка, рассчитывается доля времени и сумм заработка, 
// принимаемых к расчету в соответствии с заданными параметрами.
//
Функция ДанныеДляРасчетаСреднегоЗаработка(Начисления, Время, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДанныеДляРасчета = Новый Структура(
		"Заработок, 
		|ОтработанноеВремя");
	
	ДанныеДляРасчета.ОтработанноеВремя = Новый Массив;
	РассчитатьУчитываемоеВремя(Время, ДанныеДляРасчета.ОтработанноеВремя, ДополнительныеПараметры);
	
	ДоляВремени = ДоляОтработанногоВремени(ДанныеДляРасчета.ОтработанноеВремя);
	
	ДанныеДляРасчета.Заработок = Новый Массив;
	РассчитатьУчитываемыйЗаработок(Начисления, ДанныеДляРасчета.Заработок, ДоляВремени, ДополнительныеПараметры);
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Возвращает коэффициент отработанного времени используемый для нормирования премий при расчете среднего заработка.
//
Функция ДоляОтработанногоВремени(ОтработанноеВремя) Экспорт
	
	ДоляОтработанногоВремени = 1;
	
	Норма = 0;
	Отработано = 0;
	
	Норма = ИтогиПоПолю(ОтработанноеВремя, "НормаПятидневка");
	Отработано = ИтогиПоПолю(ОтработанноеВремя, "ОтработаноПятидневка");
	
	Если Норма > 0 Тогда	
		ДоляОтработанногоВремени = Отработано / Норма;
	КонецЕсли;
	
	Возврат Окр(ДоляОтработанногоВремени, 8);
	
КонецФункции

// Возвращает рассчитанный показатель среднего заработка.
//
Функция СреднийЗаработок(Заработок, Время) Экспорт
	 Возврат ?(Время = 0, 0, Окр(Заработок / Время, 2));
КонецФункции

// Возвращает сумму значений в поле [ИмяПоля] всех элементов коллекции.
//
Функция ИтогиПоПолю(Коллекция, ИмяПоля, Отбор = Неопределено) Экспорт
	
	ИтогиПоПолю = 0;
	
	Для Каждого Элемент Из Коллекция Цикл
		Если Отбор <> Неопределено Тогда 
			СоответствуетОтбору = Истина;
			Для Каждого КлючИЗначение Из Отбор Цикл 
				Если Элемент[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда 
					СоответствуетОтбору = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не СоответствуетОтбору Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ИтогиПоПолю = ИтогиПоПолю + Элемент[ИмяПоля]; 
	КонецЦикла;
	
	Возврат ИтогиПоПолю;
	
КонецФункции 

// Функция запрашивает период расчета среднего заработка для указанного начисления (или удержания).
//
Функция ПериодРасчетаОбщегоСреднегоЗаработка(ДатаНачалаСобытия, ВидРасчета = Неопределено) Экспорт
	
	ПериодРасчета = Новый СтандартныйПериод;
	
	ДлительностьПериода = 12;
	
	Если ЗначениеЗаполнено(ВидРасчета) Тогда	
		#Если Клиент Тогда
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		#Иначе
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		#КонецЕсли
		Если ИнфоОВидеРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ПредопределенноеЗначение("Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору") 
			И ИнфоОВидеРасчета.КоличествоМесяцевРасчетаСреднегоЗаработка > 0 Тогда
			ДлительностьПериода = ИнфоОВидеРасчета.КоличествоМесяцевРасчетаСреднегоЗаработка;
		КонецЕсли;
	КонецЕсли;	
	
	ПериодРасчета.ДатаНачала	= НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -ДлительностьПериода));
	ПериодРасчета.ДатаОкончания	= КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1));
	
	Возврат ПериодРасчета;
	
КонецФункции

// Функция определяет порядок расчета общего среднего заработка, 
// актуальный на указанную дату.
//
Функция ПорядокРасчетаОбщегоСреднегоЗаработка(Период) Экспорт
	
	ПрименениеПорядкаРасчета = Новый Массив;
	ПрименениеПорядкаРасчета.Добавить(
		СтруктураПримененияПорядкаРасчета(
			ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010"), 
			Дата(2010, 1, 1)));
	
	// значение по умолчанию		
	ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010");
	
	ПодобратьПорядокРасчетаПоДатеПрименения(ПорядокРасчета, Период, ПрименениеПорядкаРасчета);
	
	Возврат ПорядокРасчета;
	
КонецФункции

// Функция составляет коллекцию показателей среднего заработка.
//
// Возвращаемое значение - структура, 
//		где ключ - служебный идентификатор показателя, значение ссылка на показатель.
//
Функция ПоказателиРасчетаСреднегоЗаработка() Экспорт
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("СреднийЗаработокОбщий", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий"));
	Показатели.Вставить("СреднедневнойЗаработок", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднедневнойЗаработок"));
	СреднечасовойЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднечасовойЗаработок");
	Если СреднечасовойЗаработок <> Неопределено Тогда
		Показатели.Вставить("СреднечасовойЗаработок", СреднечасовойЗаработок);
	КонецЕсли;
	
	Показатели.Вставить("СреднийЗаработокФСС", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС"));
	
	Показатели.Вставить("СреднийЗаработокИндексируемый", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокИндексируемый"));
	Показатели.Вставить("СреднийЗаработокНеиндексируемый", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокНеиндексируемый"));
	
	Показатели.Вставить("СреднийЗаработокРК", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокРК"));
	Показатели.Вставить("СреднийЗаработокСН", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокСН"));
	Показатели.Вставить("СреднийЗаработокИндексируемыйРК", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокИндексируемыйРК"));
	Показатели.Вставить("СреднийЗаработокИндексируемыйСН", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокИндексируемыйСН"));
	Показатели.Вставить("СреднийЗаработокНеиндексируемыйРК", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокНеиндексируемыйРК"));
	Показатели.Вставить("СреднийЗаработокНеиндексируемыйСН", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокНеиндексируемыйСН"));
	
	Возврат Показатели;
	
КонецФункции

// Функция составляет коллекцию показателей общего среднего заработка.
//
// Возвращаемое значение - массив.
//
Функция ПоказателиОбщегоСреднегоЗаработка() Экспорт
	
	ИменаПоказателей = Новый Массив;
	ИменаПоказателей.Добавить("СреднийЗаработокОбщий");
	ИменаПоказателей.Добавить("СреднедневнойЗаработок");
	ИменаПоказателей.Добавить("СреднечасовойЗаработок");
	ИменаПоказателей.Добавить("СреднийЗаработокИндексируемый");
	ИменаПоказателей.Добавить("СреднийЗаработокНеиндексируемый");
	ИменаПоказателей.Добавить("СреднийЗаработокРК");
	ИменаПоказателей.Добавить("СреднийЗаработокСН");
	ИменаПоказателей.Добавить("СреднийЗаработокИндексируемыйРК");
	ИменаПоказателей.Добавить("СреднийЗаработокИндексируемыйСН");
	ИменаПоказателей.Добавить("СреднийЗаработокНеиндексируемыйРК");
	ИменаПоказателей.Добавить("СреднийЗаработокНеиндексируемыйСН");
	
	МассивПоказателей = Новый Массив;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		ПоказательСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИмяПоказателя);
		Если ПоказательСсылка <> Неопределено Тогда
			МассивПоказателей.Добавить(ПоказательСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПоказателей;
	
КонецФункции

// Определяет представление команды, предназначенной для расшифровки показателя.
//
Функция ПредставлениеКомандыРасшифровки() Экспорт
	Возврат НСтр("ru = 'Подробнее';
				|en = 'Details'");
КонецФункции

// Год, за который следует принимать к учету годовые премии.
//
// Параметры
//	ДатаНачалаСобытия - тип Дата
//
// Возвращаемое значение - тип Число 4, 0
//
Функция ГодГодовыхПремий(ДатаНачалаСобытия) Экспорт
	Возврат Год(ДобавитьМесяц(ДатаНачалаСобытия, -12));
КонецФункции

// Функция выполняет упаковку данных общего среднего заработка формы документа для передачи в форму редактирования.
//
Функция ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу() Экспорт
	
	ПараметрыРедактирования = Новый Структура(
	"ДокументСсылка,
	|Сотрудник,
	|Организация,
	|ДатаНачалаСобытия,
	|Начисление,
	|НачалоПериодаРасчета,
	|ОкончаниеПериодаРасчета,
	|ФиксПериодРасчета,
	|ПорядокРасчета,
	|СпособыРасчета,
	|ЭтоСреднеЧасовойЗаработок,
	|ДокументВладелецДанныеАдрес,
	|ТолькоПросмотр,
	|ДанныеОНачислениях,
	|ДанныеОВремени,
	|ДанныеОбИндексации");
	
	ПараметрыРедактирования.ФиксПериодРасчета = Ложь;
	ПараметрыРедактирования.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010");
	ПараметрыРедактирования.ЭтоСреднеЧасовойЗаработок = Ложь;
	ПараметрыРедактирования.ТолькоПросмотр = Ложь;
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

// Конструирует структуру дополнительных параметров методов расчета среднего заработка.
//
Функция ДополнительныеПараметрыРасчетаСреднегоЗаработка() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"НачалоПериода, 
		|ОкончаниеПериода, 
		|ДатаНачалаСобытия, 
		|Индексации, 
		|ПоЧасам, 
		|Начисление, 
		|СпособРасчетаОтпуска,
		|ПоСтатьямФинансирования,
		|ПорядокРасчета,
		|ТолькоИндексируемый,
		|ПоНачислениям");
		
	ДополнительныеПараметры.ПоЧасам = Ложь;
	ДополнительныеПараметры.ПоСтатьямФинансирования = Ложь;
	ДополнительныеПараметры.ТолькоИндексируемый = Ложь;
	ДополнительныеПараметры.ПоНачислениям = Ложь;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция КоэффициентИндексацииЗаработка(НоваяСтавка, ТекущаяСтавка) Экспорт 
	
	Возврат ?(ТекущаяСтавка = 0, 1, НоваяСтавка / ТекущаяСтавка);
	
КонецФункции

Функция ЕстьПоказателиОбщегоСреднегоЗаработка(Показатели) Экспорт 
	
	ЕстьПоказателиСреднегоЗаработка = Ложь;
	
	ПоказателиСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ПоказателиРасчетаСреднегоЗаработка();
	СреднийЗаработокОбщий = ПоказателиСреднегоЗаработка["СреднийЗаработокОбщий"];
	СреднийЗаработокИндексируемый = ПоказателиСреднегоЗаработка["СреднийЗаработокИндексируемый"];
	СреднийЗаработокНеиндексируемый = ПоказателиСреднегоЗаработка["СреднийЗаработокНеиндексируемый"];
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.Показатель = СреднийЗаработокОбщий
			Или СтрокаПоказателя.Показатель = СреднийЗаработокИндексируемый
			Или СтрокаПоказателя.Показатель = СреднийЗаработокНеиндексируемый Тогда
			ЕстьПоказателиСреднегоЗаработка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьПоказателиСреднегоЗаработка;
	
КонецФункции

#Область МетодыОбслуживанияФормДокументовДляРасчетаСреднегоЗаработка

Функция ТекстПредупрежденияДокументНеРассчитан() Экспорт
	ТекстПредупреждения = НСтр("ru = 'Документ не рассчитан';
								|en = 'Document is not calculated'");
	Возврат Новый ФорматированнаяСтрока(ТекстПредупреждения);
КонецФункции

#КонецОбласти

// Функция возвращает количество месяцев между двумя датами.
//
Функция КоличествоМесяцевПериодаРасчетаСреднего(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	Возврат (Год(ДатаОкончанияПериода) - Год(ДатаНачалаПериода)) * 12 + Месяц(ДатаОкончанияПериода) - Месяц(ДатаНачалаПериода) + 1;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДатыИзмененийЗаконодательства

Функция ДатаИзмененияКоличестваДнейДляОтпускных()

	Возврат '20140402'

КонецФункции

#КонецОбласти

#Область ФормированиеДанныхРасчетаСреднегоЗаработка

Процедура РассчитатьУчитываемоеВремя(Время, УчитываемоеВремя, ДополнительныеПараметры )
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДатаНачалаСобытия = ДополнительныеПараметры.ДатаНачалаСобытия;
	СпособРасчетаОтпуска = ДополнительныеПараметры.СпособРасчетаОтпуска;
	НачалоПериода = ДополнительныеПараметры.НачалоПериода;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
			
	Для Каждого ПервичнаяСтрокаВремени Из Время Цикл
		
		// Используем данные только за рассчитываемый период.
		Если ПервичнаяСтрокаВремени.Период < НачалоПериода 
			Или ПервичнаяСтрокаВремени.Период > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = ОтборЭлементаВремени(ПервичнаяСтрокаВремени.Период);
		
		СтрокаОтработанноеВремя 							= ЭлементВремениПоОтбору(УчитываемоеВремя, Отбор);
		
		СтрокаОтработанноеВремя.КалендарныхДней 			= ПервичнаяСтрокаВремени.ОтработаноДнейКалендарных;
		СтрокаОтработанноеВремя.НормаКалендарныхДней 		= ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(ПервичнаяСтрокаВремени.Период);
		
		СтрокаОтработанноеВремя.ОтработаноДней				= ПервичнаяСтрокаВремени.ОтработаноДней;
		СтрокаОтработанноеВремя.ОтработаноЧасов 			= ПервичнаяСтрокаВремени.ОтработаноЧасов;
		
		Если ДополнительныеПараметры.ПоЧасам Тогда
			СтрокаОтработанноеВремя.ОтработаноПятидневка 	= ПервичнаяСтрокаВремени.ОтработаноЧасовПятидневка;
			СтрокаОтработанноеВремя.НормаПятидневка 		= ПервичнаяСтрокаВремени.НормаЧасовПроизводственныйКалендарь;		
		Иначе 	
			СтрокаОтработанноеВремя.ОтработаноПятидневка 	= ПервичнаяСтрокаВремени.ОтработаноДнейПятидневка;
			СтрокаОтработанноеВремя.НормаПятидневка 		= ПервичнаяСтрокаВремени.НормаДнейПроизводственныйКалендарь;
		КонецЕсли;
		
		СтрокаОтработанноеВремя.ОтработаноДнейШестидневка 	= ПервичнаяСтрокаВремени.ОтработаноДнейШестидневка;
		 
		Если СпособРасчетаОтпуска = Неопределено Тогда
			СтрокаОтработанноеВремя.Учтено 	= СтрокаОтработанноеВремя.ОтработаноДней;
			Если ДополнительныеПараметры.ПоЧасам Тогда
				СтрокаОтработанноеВремя.Учтено 	= СтрокаОтработанноеВремя.ОтработаноЧасов;
			КонецЕсли;
		ИначеЕсли СпособРасчетаОтпуска = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням") Тогда
			СреднемесячноеКоличествоДней 		= КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаНачалаСобытия);
			КоличествоКалендарныхДнейВМесяце 	= СтрокаОтработанноеВремя.НормаКалендарныхДней;
			ДоляОтработанногоВремениЗаМесяц 	= СтрокаОтработанноеВремя.КалендарныхДней / КоличествоКалендарныхДнейВМесяце;
			СтрокаОтработанноеВремя.Учтено 		= Окр(СреднемесячноеКоличествоДней * ДоляОтработанногоВремениЗаМесяц, 2);
		ИначеЕсли СпособРасчетаОтпуска = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке") Тогда
			СтрокаОтработанноеВремя.Учтено = СтрокаОтработанноеВремя.ОтработаноДнейШестидневка;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РассчитатьУчитываемыйЗаработок(Начисления, УчитываемыйЗаработок, ДоляВремени, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДатаНачалаСобытия = ДополнительныеПараметры.ДатаНачалаСобытия;
	СпособРасчетаОтпуска = ДополнительныеПараметры.СпособРасчетаОтпуска;
	Индексации = ДополнительныеПараметры.Индексации;
	НачалоПериода = ДополнительныеПараметры.НачалоПериода;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
			
	КоэффициентыИндексацииПоПериодам = КоэффициентыИндексацииПоПериодам(Индексации);
		
	КоличествоМесяцевПериодаРасчета = КоличествоМесяцевПериодаРасчетаСреднего(НачалоПериода, ОкончаниеПериода);
	
	Для Каждого СтрокаНачислений Из Начисления Цикл
		
		// Используем данные только за рассчитываемый период.
		Если ЭтоПремияГодовая(СтрокаНачислений.СоставнаяЧасть) Тогда
			// Проверяем предыдущий год от даты начала события.
			Если СтрокаНачислений.Год <> ГодГодовыхПремий(ДатаНачалаСобытия) Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если СтрокаНачислений.Период < НачалоПериода 
				Или СтрокаНачислений.Период > ОкончаниеПериода Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтатьяФинансирования = Неопределено;
		СпособОтраженияЗарплатыВБухучете = Неопределено;
		СтатьяРасходов = Неопределено;
		ОблагаетсяЕНВД = Неопределено;
		Если ДополнительныеПараметры.ПоСтатьямФинансирования Тогда
			СтатьяФинансирования = СтрокаНачислений.СтатьяФинансирования;
			СпособОтраженияЗарплатыВБухучете = СтрокаНачислений.СпособОтраженияЗарплатыВБухучете;
			СтатьяРасходов = СтрокаНачислений.СтатьяРасходов;
			ОблагаетсяЕНВД = СтрокаНачислений.ОблагаетсяЕНВД;
		КонецЕсли;
		
		Начисление = Неопределено;
		Если ДополнительныеПараметры.ПоНачислениям Тогда
			Начисление = СтрокаНачислений.Начисление;
		КонецЕсли;
		
		Если Не ЭтоПремияПроцентом(СтрокаНачислений.СоставнаяЧасть) 
			И Не ЭтоПремияФиксированнойСуммой(СтрокаНачислений.СоставнаяЧасть) Тогда
			// Не является премией
			КоэффициентИндексации = 1;
			Если СтрокаНачислений.Индексируется 
				И КоэффициентыИндексацииПоПериодам[СтрокаНачислений.Период] <> Неопределено Тогда
				КоэффициентИндексации = КоэффициентыИндексацииПоПериодам[СтрокаНачислений.Период];
			КонецЕсли;
			
			Отбор = ОтборЭлементаЗаработка();
			Отбор.Месяц = СтрокаНачислений.Период;
			Отбор.СоставнаяЧасть = СтрокаНачислений.СоставнаяЧасть;
			Отбор.КоэффициентИндексации = КоэффициентИндексации;
			Отбор.СтатьяФинансирования = СтатьяФинансирования;
			Отбор.СпособОтраженияЗарплатыВБухучете = СпособОтраженияЗарплатыВБухучете;
			Отбор.СтатьяРасходов = СтатьяРасходов;
			Отбор.ОблагаетсяЕНВД = ОблагаетсяЕНВД;
			Отбор.Индексируется = СтрокаНачислений.Индексируется;
			Отбор.Начисление = Начисление;
			
			СтрокаЗаработка 		= ЭлементЗаработкаПоОтбору(УчитываемыйЗаработок, Отбор);
			СтрокаЗаработка.Сумма 	= СтрокаЗаработка.Сумма + СтрокаНачислений.Сумма;
			СтрокаЗаработка.Учтено 	= Окр(СтрокаЗаработка.Сумма * СтрокаЗаработка.КоэффициентИндексации, 2);
			Продолжить;
		КонецЕсли;
		
		// Является премией
		КоэффициентИндексации = 1;
		Если СтрокаНачислений.Индексируется Тогда
			КоэффициентИндексации = КоэффициентыИндексацииПоПериодам[НачалоМесяца(СтрокаНачислений.Период)];
			Если КоэффициентИндексации = Неопределено Тогда
				КоэффициентИндексации = 1;
			Иначе
				Если КоэффициентИндексации < 1 Тогда
					КоэффициентИндексации = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоМесяцев = СтрокаНачислений.КоличествоМесяцев;
		Если ЭтоПремияГодовая(СтрокаНачислений.СоставнаяЧасть) Тогда
			КоличествоМесяцев = 12;
		Иначе	
			Если Не ЗначениеЗаполнено(СтрокаНачислений.КоличествоМесяцев) Тогда
				КоличествоМесяцев = 1;
			КонецЕсли;
		КонецЕсли;	
		
		КоэффициентПремии = 1;
		Если КоличествоМесяцев > КоличествоМесяцевПериодаРасчета Тогда
			КоэффициентПремии = КоличествоМесяцевПериодаРасчета / КоличествоМесяцев;
		КонецЕсли;	
		
		ДоляВремениПремии = 1;
		// Если премия фиксированной суммой, рассчитываем коэффициент нормирования.
		Если ЭтоПремияФиксированнойСуммой(СтрокаНачислений.СоставнаяЧасть) Тогда
			ДоляВремениПремии = ДоляВремени;
		КонецЕсли;
		// Или если премия начислена за время, не входящее в расчетный период.
		Если ЭтоПремияПроцентом(СтрокаНачислений.СоставнаяЧасть) Тогда
			Если УменьшатьПремииПроцентомНачисленныеЗаВремяНеВходящееВРасчетныйПериод() 
				И ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод(СтрокаНачислений, НачалоПериода, ОкончаниеПериода) Тогда
				ДоляВремениПремии = ДоляВремени;
			КонецЕсли;
		КонецЕсли;
		
		Отбор = ОтборЭлементаЗаработка();
		Отбор.Месяц = СтрокаНачислений.Период;
		Отбор.Год = СтрокаНачислений.Год;
		Отбор.СоставнаяЧасть = СтрокаНачислений.СоставнаяЧасть;
		Отбор.КоэффициентИндексации = КоэффициентИндексации;
		Отбор.КоличествоМесяцев = КоличествоМесяцев;
		Отбор.КоэффициентНормирования = ДоляВремениПремии;
		Отбор.СтатьяФинансирования = СтатьяФинансирования;
		Отбор.СпособОтраженияЗарплатыВБухучете = СпособОтраженияЗарплатыВБухучете;
		Отбор.СтатьяРасходов = СтатьяРасходов;
		Отбор.ОблагаетсяЕНВД = ОблагаетсяЕНВД;
		Отбор.Индексируется = СтрокаНачислений.Индексируется;
		Отбор.Начисление = Начисление;
		
		УчитываемаяСумма = ?(СтрокаНачислений.ИсключеннаяЧасть, 0, СтрокаНачислений.Сумма);
		
		СтрокаПремии 				= ЭлементЗаработкаПоОтбору(УчитываемыйЗаработок, Отбор);
		СтрокаПремии.Сумма 			= СтрокаПремии.Сумма 			+ СтрокаНачислений.Сумма;
		СтрокаПремии.МесячнаяЧасть 	= СтрокаПремии.МесячнаяЧасть 	+ Окр(СтрокаНачислений.Сумма / КоличествоМесяцев, 2);
		СтрокаПремии.Учтено 		= СтрокаПремии.Учтено 			+ Окр(УчитываемаяСумма * КоэффициентПремии * ДоляВремениПремии * КоэффициентИндексации, 2);
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция СтруктураЗаработкаДляРасчетаСреднегоЗаработка()
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ПустаяДата = ТипДата.ПривестиЗначение();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();  
	
	ТипСоставнаяЧастьЗаработка = Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий");
	ПустаяСоставнаяЧастьЗаработка = ТипСоставнаяЧастьЗаработка.ПривестиЗначение();
	
	Заработок = Новый Структура;
	Заработок.Вставить("Месяц", 					ПустаяДата);
	Заработок.Вставить("Год", 						ПустоеЧисло);
	Заработок.Вставить("СоставнаяЧасть", 			ПустаяСоставнаяЧастьЗаработка);
	Заработок.Вставить("Сумма", 					ПустоеЧисло);
	Заработок.Вставить("КоэффициентИндексации", 	ПустоеЧисло);
	Заработок.Вставить("КоличествоМесяцев", 		ПустоеЧисло);
	Заработок.Вставить("МесячнаяЧасть", 			ПустоеЧисло);
	Заработок.Вставить("КоэффициентНормирования", 	ПустоеЧисло);
	Заработок.Вставить("Учтено", 					ПустоеЧисло);
	Заработок.Вставить("СтатьяФинансирования", 		ПустаяСтатьяФинансирования());
	Заработок.Вставить("СпособОтраженияЗарплатыВБухучете", ПустойСпособОтраженияЗарплатыВБухучете());
	Заработок.Вставить("СтатьяРасходов", 			ПустаяСтатьяРасходов());
	Заработок.Вставить("ОблагаетсяЕНВД", 			ПустоеЗначениеОблагаетсяЕНВД());
	Заработок.Вставить("Индексируется",				Ложь);
	Заработок.Вставить("Начисление",				ПустоеНачисление());
	
	Возврат Заработок;
	
КонецФункции

Функция СтруктураВремениДляРасчетаСреднегоЗаработка()
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ПустаяДата = ТипДата.ПривестиЗначение();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();  
	
	ТипСоставнаяЧастьЗаработка = Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий");
	ПустаяСоставнаяЧастьЗаработка = ТипСоставнаяЧастьЗаработка.ПривестиЗначение();
	
	ОтработанноеВремя = Новый Структура;
	ОтработанноеВремя.Вставить("Месяц", 					ПустаяДата);
	
	ОтработанноеВремя.Вставить("КалендарныхДней", 			ПустоеЧисло);
	ОтработанноеВремя.Вставить("НормаКалендарныхДней", 		ПустоеЧисло);
	
	ОтработанноеВремя.Вставить("ОтработаноДней",			ПустоеЧисло);
	ОтработанноеВремя.Вставить("ОтработаноЧасов", 			ПустоеЧисло);
	
	ОтработанноеВремя.Вставить("ОтработаноПятидневка", 		ПустоеЧисло);
	ОтработанноеВремя.Вставить("НормаПятидневка", 			ПустоеЧисло);
	
	ОтработанноеВремя.Вставить("ОтработаноДнейШестидневка",	ПустоеЧисло);
	
	ОтработанноеВремя.Вставить("Учтено", 					ПустоеЧисло);
	
	Возврат ОтработанноеВремя;
	
КонецФункции

Функция ОписаниеТипаСтатьяФинансирования()
	Возврат Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата");
КонецФункции

Функция ОписаниеТипаСпособОтраженияЗарплатыВБухучете()
	Возврат Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете");
КонецФункции

Функция ОписаниеТипаСтатьяРасходов()
	Возврат Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата");
КонецФункции

Функция ОписаниеТипаОблагаетсяЕНВД()
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

Функция ПустаяСтатьяФинансирования()
	ОписаниеТипаСтатьяФинансирования = ОписаниеТипаСтатьяФинансирования();
	Возврат ОписаниеТипаСтатьяФинансирования.ПривестиЗначение();
КонецФункции

Функция ПустойСпособОтраженияЗарплатыВБухучете()
	ОписаниеТипаСпособОтраженияЗарплатыВБухучете = ОписаниеТипаСпособОтраженияЗарплатыВБухучете();
	Возврат ОписаниеТипаСпособОтраженияЗарплатыВБухучете.ПривестиЗначение();
КонецФункции

Функция ПустаяСтатьяРасходов()
	ОписаниеТипаСтатьяРасходов = ОписаниеТипаСтатьяРасходов();
	Возврат ОписаниеТипаСтатьяРасходов.ПривестиЗначение();
КонецФункции

Функция ПустоеЗначениеОблагаетсяЕНВД()
	ОписаниеТипаОблагаетсяЕНВД = ОписаниеТипаОблагаетсяЕНВД();
	Возврат ОписаниеТипаОблагаетсяЕНВД.ПривестиЗначение();
КонецФункции

Функция ПустоеНачисление()
	
	ОписаниеТипа = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления");
	Возврат ОписаниеТипа.ПривестиЗначение();
	
КонецФункции

Функция КоэффициентыИндексацииПоПериодам(ДанныеОбИндексации)
	
	КоэффициентыИндексацииПоПериодам = Новый Соответствие;
	
	Для Каждого Индексация Из ДанныеОбИндексации Цикл
		КоэффициентыИндексацииПоПериодам.Вставить(Индексация.Период, Индексация.КоэффициентИндексации);
	КонецЦикла;
	
	Возврат КоэффициентыИндексацииПоПериодам;
	
КонецФункции

Функция ОтборЭлементаЗаработка()
	
	ОтборЭлементаЗаработка = Новый Структура(
		"Месяц, 
		|Год,
		|СоставнаяЧасть,
		|КоэффициентИндексации,
		|КоличествоМесяцев,
		|КоэффициентНормирования,
		|СтатьяФинансирования,
		|СпособОтраженияЗарплатыВБухучете,
		|СтатьяРасходов,
		|ОблагаетсяЕНВД,
		|Индексируется,
		|Начисление");
	
	Возврат ОтборЭлементаЗаработка;
	
КонецФункции 

Функция ОтборЭлементаВремени(Месяц)
	
	ОтборЭлементаВремени = Новый Структура;
	ОтборЭлементаВремени.Вставить("Месяц", Месяц);
	
	Возврат ОтборЭлементаВремени;
	
КонецФункции 

Функция ЭлементЗаработкаПоОтбору(Коллекция, Отбор)
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если ПодходящийЭлемент = Неопределено Тогда
		ПодходящийЭлемент = СтруктураЗаработкаДляРасчетаСреднегоЗаработка();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Функция ЭлементВремениПоОтбору(Коллекция, Отбор)
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если ПодходящийЭлемент = Неопределено Тогда
		ПодходящийЭлемент = СтруктураВремениДляРасчетаСреднегоЗаработка();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Процедура ЗаполнитьЭлементКоллекцииПоОтбору(Элемент, Отбор) Экспорт
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Значение <> Неопределено Тогда
			Элемент[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЭлементКоллекцииПоОтбору(Коллекция, Отбор) Экспорт
	
	ПодходящийЭлемент = Неопределено;
	
	Для каждого Элемент Из Коллекция Цикл
		ЭтоПодходящийЭлемент = Истина;
		
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ЭлементОтбора.Значение <> Неопределено
				И Элемент[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение  Тогда
				ЭтоПодходящийЭлемент = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПодходящийЭлемент Тогда
			ПодходящийЭлемент = Элемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Функция ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод(СтрокаНачислений, ДатаНачалаПериода, ДатаОкончанияПериода)
	
	ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаНачислений.ДатаНачалаБазовогоПериода) Тогда
		Если СтрокаНачислений.ДатаНачалаБазовогоПериода < ДатаНачалаПериода 
			Или СтрокаНачислений.ДатаНачалаБазовогоПериода > ДатаОкончанияПериода Тогда
			ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод
	
КонецФункции 

Функция УменьшатьПремииПроцентомНачисленныеЗаВремяНеВходящееВРасчетныйПериод()
	Возврат Истина;
КонецФункции 

Функция ЭтоПремияПроцентом(СоставнаяЧастьЗаработка)
	Возврат СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом") 
			Или СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом");
КонецФункции 

Функция ЭтоПремияФиксированнойСуммой(СоставнаяЧастьЗаработка)
	Возврат СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой") 
			Или СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой");
КонецФункции 

Функция ЭтоПремияГодовая(СоставнаяЧастьЗаработка)
	Возврат СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом") 
			Или СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой");
КонецФункции 

Процедура ПодобратьПорядокРасчетаПоДатеПрименения(ПорядокРасчета, Период, ПравилаПримененияПорядкаРасчета)
	
	// Подбирается порядок расчета, 
	// дата начала применения которого "ближе" всего к заданному периоду.
	
	Для Каждого ПрименениеПорядкаРасчета Из ПравилаПримененияПорядкаРасчета Цикл
		Если Период >= ПрименениеПорядкаРасчета.НачалоПрименения Тогда
			ПорядокРасчета = ПрименениеПорядкаРасчета.ПорядокРасчета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураПримененияПорядкаРасчета(ПорядокРасчета, НачалоПрименения)
	
	СтруктураПрименения = Новый Структура;
	СтруктураПрименения.Вставить("ПорядокРасчета", ПорядокРасчета);
	СтруктураПрименения.Вставить("НачалоПрименения", НачалоПрименения);
	
	Возврат СтруктураПрименения;
	
КонецФункции

Функция КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаНачалаСобытия)
	
	Возврат ?(Не ЗначениеЗаполнено(ДатаНачалаСобытия), 29.4, ?(ДатаНачалаСобытия < ДатаИзмененияКоличестваДнейДляОтпускных(), 29.4, 29.3));	

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормыКалькулятораСреднегоЗаработка

// Функция заполняет соответствие месяца и его номера по порядку от 1 до 12.
//
Функция НомераМесяцевПериодаРасчетаСреднего(НачалоПериода, ОкончаниеПериода, КоличествоМесяцев = 12) Экспорт
	
	НомераМесяцев = Новый Соответствие;
	
	ТекущийМесяц	= НачалоМесяца(ОкончаниеПериода);
	НомерМесяца		= КоличествоМесяцев;
	Пока ТекущийМесяц >= НачалоМесяца(НачалоПериода)
		И НомерМесяца >= 1 Цикл
		НомераМесяцев.Вставить(ТекущийМесяц, НомерМесяца);	
		ТекущийМесяц	= ДобавитьМесяц(ТекущийМесяц, -1);
		НомерМесяца		= НомерМесяца - 1;
	КонецЦикла;
	
	Возврат НомераМесяцев;
	
КонецФункции	

Функция СтрокаСреднегоЗаработка(СреднийЗаработок, Идентификатор) Экспорт
	
	НайденныеСтроки = СреднийЗаработок.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	
	Возврат ?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0]);
	
КонецФункции

// Функция конструирует структуру, описывающую данные о начислениях 
// для расчета среднего заработка за один месяц расчетного периода.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПоляОписания.Вставить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	ПоляОписания.Вставить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ПоляОписания.Вставить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий"));
	ПоляОписания.Вставить("СпособУчета", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеФСС"));
	ПоляОписания.Вставить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ПоляОписания.Вставить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ПоляОписания.Вставить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ПоляОписания.Вставить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Индексируется", Новый ОписаниеТипов("Булево"));
	ПоляОписания.Вставить("Сумма", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	ПоляОписания.Вставить("Год", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ДатаНачалаБазовогоПериода", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("КоличествоМесяцев", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ИсключеннаяЧасть", Новый ОписаниеТипов("Булево"));
	ПоляОписания.Вставить("КлючНачисления", Новый ОписаниеТипов("Число"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

// Функция конструирует структуру, описывающую данные о времени 
// для расчета среднего заработка за один месяц расчетного периода.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиДанныхОВремениСреднегоЗаработкаФСС() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти
