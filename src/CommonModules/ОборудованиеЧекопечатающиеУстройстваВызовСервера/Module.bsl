
#Область ПрограммныйИнтерфейс

#Область ПараметрыРегистрации

// Функция возвращает поддерживает ли фискальное устройство.
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Идентификатор устройства
// 
// Возвращаемое значение:
//  Булево - Фискальное устройство поддерживает проверку кодов маркировки
Функция ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства);
	
КонецФункции

// Функция возвращает для фискального устройства версию ФФД.
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Идентификатор устройства.
// 
// Возвращаемое значение:
//  Неопределено - Фискальное устройство поддерживает версию ФФД
Функция ФискальноеУстройствоПоддерживаетВерсиюФФД(ИдентификаторУстройства) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ФискальноеУстройствоПоддерживаетВерсиюФФД(ИдентификаторУстройства);
	
КонецФункции

#КонецОбласти

#Область ФормированиеДанныхККТ

// Получить таблицу параметров смены из ККТ.
//
// Параметры:
//  ДанныеXML - Строка - строка XML
//  РевизияИнтерфейса - Число - ревизия интерфейса
//  НомерСменыККТ - Число - номер смены
//  НомерЧекаККТ - Число - номер чека
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьПараметрыСменыИзXMLПакета(ДанныеXML, РевизияИнтерфейса = 0, НомерСменыККТ = 0, НомерЧекаККТ = 0) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ПолучитьПараметрыСменыИзXMLПакета(ДанныеXML, РевизияИнтерфейса, НомерСменыККТ, НомерЧекаККТ);
	
КонецФункции

// Возвращает XML текст инфо-квитанции
// Параметры:
//  Данные - Структура
//  ШиринаСтроки - Число
//  Ревизия - Строка
//
// Возвращаемое значение:
//  Строка - Строка XML
//
Функция XMLПакетИнфоКвитанции(Данные,  ШиринаСтроки, Ревизия) Экспорт
	
	Шаблон = ШаблоныФискальныхДокументов.ШаблонИнфоКвитанция(ШиринаСтроки, Данные);
	НефискальныйДокумент = ШаблоныФискальныхДокументов.ВывестиКакТекст(Шаблон);
	Возврат ОборудованиеЧекопечатающиеУстройства.ПолучитьXMLПакетДляТекста(НефискальныйДокумент, Ревизия);
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#Область ФискальныеОперации

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройства.ЗаписатьФискальнуюОперацию.
// Записать операцию в журнал фискальных операций.
//
// Параметры:
//   ПараметрыФискализации - Структура - 
Процедура ЗаписатьФискальнуюОперацию(ПараметрыФискализации) Экспорт
	
	ОборудованиеЧекопечатающиеУстройства.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
	
КонецПроцедуры

// АПК: 142-выкл обратная совместимость

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройства.ДанныеФискальнойОперации.
// Получить данные журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - запись фискальной операции.
//  ТипыДокументов - ПеречислениеСсылка.ТипыФискальныхДокументовККТ - типы документов.
//  ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - тип расчета.
//  ФискальныйПризнак - Строка - Фискальный признак документа
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//   * ДанныеXML - ХранилищеЗначения - Данные чека, переданные в ККТ (XML).
//
Функция ДанныеФискальнойОперации(ДокументСсылка, ИдентификаторЗаписи = Неопределено, ТипыДокументов = Неопределено, ТипРасчета = Неопределено, ФискальныйПризнак = Неопределено) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ДанныеФискальнойОперации(ДокументСсылка, ИдентификаторЗаписи, ТипыДокументов, ТипРасчета, ФискальныйПризнак);
	
КонецФункции

// АПК: 142-вкл

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройства.ФискальнаяОперацииПоИдентификатору.
// Получить данные журнала фискальных операций.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
// РегистрСведенийЗапись.ФискальныеОперации.
Функция ФискальнаяОперацииПоИдентификатору(ИдентификаторЗаписи) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ФискальнаяОперацииПоИдентификатору(ИдентификаторЗаписи);
	
КонецФункции

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройства.СписокФискальныхОпераций.
// Получить список журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
//  ТипыДокументов - ПеречислениеСсылка.ТипыФискальныхДокументовККТ - типы фискальных документов.
//  ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - типы расчета.
// 
// Возвращаемое значение:
//  См. ОборудованиеЧекопечатающиеУстройства.СписокФискальныхОпераций
//
Функция СписокФискальныхОпераций(ДокументСсылка, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.СписокФискальныхОпераций(ДокументСсылка, ТипыДокументов, ТипРасчета);
	
КонецФункции

#КонецОбласти

#Область ОчередьЧековККТ 

// Устарела: следует использовать РаспределеннаяФискализация.ДобавитьЧекВОчередьЧековККТ.
// Добавить чек в очередь чеков ККТ.
//
// Параметры:
//  ПараметрыЧекаККТ - Структура - Параметры чека ККТ:
//  * ПозицииЧека - Массив из См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека - .
//  ПараметрыПакетнойОперации - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков
// Возвращаемое значение:
//  РегистрСведенийЗапись
Функция ДобавитьЧекВОчередьЧековККТ(ПараметрыЧекаККТ, ПараметрыПакетнойОперации = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		Возврат МодульРаспределеннаяФискализация.ДобавитьЧекВОчередьЧековККТ(ПараметрыЧекаККТ, ПараметрыПакетнойОперации);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать РаспределеннаяФискализация.ДанныеЧекаВОчереди.
// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
//  Структура.
Функция ДанныеЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		Возврат МодульРаспределеннаяФискализация.ДанныеЧекаВОчереди(ИдентификаторЗаписи);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать РаспределеннаяФискализация.ЧекиВОчередиНаФискализацию.
// Чеки в очереди на фискализацию.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаБПО - Касса по которой провести фискализацию, если не указано тогда по всем.
//
// Возвращаемое значение:
//  Массив.
Функция ЧекиВОчередиНаФискализацию(КассаККМ = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		Возврат МодульРаспределеннаяФискализация.ЧекиВОчередиНаФискализацию(КассаККМ);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать РаспределеннаяФискализация.УдалитьЧекИзОчереди.
// Удалить чек из очереди.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
Процедура УдалитьЧекИзОчереди(ДокументСсылка) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		МодульРаспределеннаяФискализация.УдалитьЧекИзОчереди(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализация.ОчиститьОчередьЧеков.
// Очистить очередь чеков.
//
Процедура ОчиститьОчередьЧеков() Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		МодульРаспределеннаяФискализация.ОчиститьОчередьЧеков();
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализация.ЗаписатьСтатусЧекаВОчереди.
// Записать статус чека в очереди.
//
// Параметры:
//  ПараметрыФискализации - Структура:
//   * ИдентификаторФискальнойЗаписи - Строка
//   * ДокументОснование - ДокументСсылка
//   * РезультатВыполненияПакетнойОперации - Структура
//  СтатусЧека - ПеречислениеСсылка.СтатусЧекаККТВОчереди
//  ОборудованиеККТ - СправочникСсылка.ПодключаемоеОборудование -
//  ТекстОшибки - Строка
Процедура ЗаписатьСтатусЧекаВОчереди(ПараметрыФискализации, СтатусЧека, ОборудованиеККТ = Неопределено, ТекстОшибки = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		МодульРаспределеннаяФискализация.ЗаписатьСтатусЧекаВОчереди(ПараметрыФискализации, СтатусЧека, ОборудованиеККТ, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализация.ПолучитьСтатусЧекаВОчереди.
// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
//  Структура.
Функция ПолучитьСтатусЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		Возврат МодульРаспределеннаяФискализация.ПолучитьСтатусЧекаВОчереди(ИдентификаторЗаписи);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать РаспределеннаяФискализация.ПолучитьФискальнуюОперацию.
// Данные чека из очереди по фискальный признаку и номеру чеку ККМ.
// 
// Параметры:
//  ФискальныйПризнак - Строка - Фискальный признак
//  НомерЧекаККМ - Строка - Номер чека ККМ
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить фискальную операцию:
//  * ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО.
//  * ИдентификаторЗаписи - УникальныйИдентификатор.
//  * ФискальныйПризнак - Строка - 
//  * НомерСменыККМ - Число.
//  * НомерЧекаККМ - Число. 
Функция ПолучитьФискальнуюОперацию(ФискальныйПризнак, НомерЧекаККМ = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		Возврат МодульРаспределеннаяФискализация.ПолучитьФискальнуюОперацию(ФискальныйПризнак, НомерЧекаККМ);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Устарела: следует использовать ФорматноЛогическийКонтроль.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов.
// Выполняет проверку обязательности заполняет тэгов.
//
// Параметры:
//  Параметры - Структура 
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//  ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
//  Булево.
Функция ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяФорматноЛогическийКонтроль() Тогда
		МодульФорматноЛогическийКонтроль = ОбщегоНазначенияБПО.ОбщийМодуль("ФорматноЛогическийКонтроль");
		Возврат МодульФорматноЛогическийКонтроль.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать ФорматноЛогическийКонтроль.ПривестиДанныеКТребуемомуФормату.
// Процедура приводит к формату согласованному с ФНС.
//
// Параметры:
//  ОсновныеПараметры - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//  Отказ - Булево
//  ОписаниеОшибки - Строка
//  ИсправленыОсновныеПараметры - Булево
Процедура ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяФорматноЛогическийКонтроль() Тогда
		МодульФорматноЛогическийКонтроль = ОбщегоНазначенияБПО.ОбщийМодуль("ФорматноЛогическийКонтроль");
		МодульФорматноЛогическийКонтроль.ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, ИсправленыОсновныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройства.ШаблонЧека.
// Функция формирует шаблон чека.
//
// Параметры:
//  ОбщиеПараметры - См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//  ТипОборудования - Строка - типы оборудования строкой.
//  ДополнительныйТекст - Строка - дополнительный текст шаблона чека.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//
// Возвращаемое значение:
//  Структура.
Функция ШаблонЧека(ОбщиеПараметры, ТипОборудования, ДополнительныйТекст = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ШаблонЧека(ОбщиеПараметры, ТипОборудования, ДополнительныйТекст, ИдентификаторУстройства);
	
КонецФункции

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройства.СформироватьФискальныйДокумент.
// Функция формирует табличный документ по данным фискального чека.
//
// Параметры:
//  ТипДокумента - Число
//   ОбщиеПараметры - Структура - параметры фискального документа загруженная из данных XML
//                    см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//   РеквизитыЧека - Структура - параметры фискального документа из регистра сведений фискальные документы
//                    см. ДанныеФискальнойОперации()
//   ФорматФФД - Строка - формат фискальных данных, влияет на вывод таблицы оплаты при "1.0" 
//                        используются только виды оплат "НАЛИЧНЫМИ", "ЭЛЕКТРОННО"
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ со сформированным фискальным документом, может быть сохранен в любой формат.
//
Функция СформироватьФискальныйДокумент(ТипДокумента, ОбщиеПараметры, РеквизитыЧека, ФорматФФД = "1.1") Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.СформироватьФискальныйДокумент(ТипДокумента, ОбщиеПараметры, РеквизитыЧека, ФорматФФД);
	
КонецФункции

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройства.СформироватьФискальныйДокумент.
// Функция формирует табличный документ по данным фискального чека.
//
// Параметры:
//  ТипДокумента - Число
//   ОбщиеПараметры - Структура - параметры фискального документа загруженная из данных XML
//                    см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//   РеквизитыЧека - Структура - параметры фискального документа из регистра сведений фискальные документы
//                    см. ДанныеФискальнойОперации().
//   ФорматФФД - Строка - формат фискальных данных, влияет на вывод таблицы оплаты при "1.0" 
//                        используются только виды оплат "НАЛИЧНЫМИ", "ЭЛЕКТРОННО".
//
// Возвращаемое значение:
//  Строка - Текст.
//
Функция СформироватьФискальныйДокументТекст(ТипДокумента, ОбщиеПараметры, РеквизитыЧека = Неопределено, ФорматФФД = "1.1", ШиринаЧека = 36) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.СформироватьФискальныйДокументТекст(ТипДокумента, ОбщиеПараметры, РеквизитыЧека, ФорматФФД, ШиринаЧека);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПередОткрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ПередОткрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации);
	
КонецФункции

Функция ПередЗакрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ПередЗакрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации);
	
КонецФункции

Функция ПослеОткрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ПослеОткрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения);
	
КонецФункции

Функция ПослеЗакрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения) Экспорт
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ПослеЗакрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Коды маркировки

// Устарела: следует использовать МенеджерОборудованияМаркировка.КодПланируемыйСтатусМаркируемогоТовара.
// Получить код планируемого статус маркируемого товара
// 
// Параметры:
//  ПланируемыйСтатусМаркируемогоТовара - ПеречислениеСсылка - Планируемый статус маркируемого товара.  
// 
// Возвращаемое значение:
//  Число - Код планируемого статус маркируемого товара по ОФД
//
Функция КодПланируемыйСтатусМаркируемогоТовара(ПланируемыйСтатусМаркируемогоТовара) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
		Возврат МодульМенеджерОборудованияМаркировка.КодПланируемыйСтатусМаркируемогоТовара(ПланируемыйСтатусМаркируемогоТовара);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать МенеджерОборудованияМаркировка.КодОтветаОИСМОСтатусеТовара.
// Получить код ответ ОИСМ о статусе товара
// 
// Параметры:
//  ОтветОИСМОСтатусеТовара - ПеречислениеСсылка - Ответ от ИСМО.  
// 
// Возвращаемое значение:
//  Число - Ответ ОИСМ о статусе товара по ОФД
//
Функция КодОтветаОИСМОСтатусеТовара(ОтветОИСМОСтатусеТовара) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
		Возврат МодульМенеджерОборудованияМаркировка.КодОтветаОИСМОСтатусеТовара(ОтветОИСМОСтатусеТовара);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать МенеджерОборудованияМаркировка.ОтветОИСМОСтатусеТовараПоКоду.
// Получить ответ ОИСМ о статусе товара по коду.
// 
// Параметры:
//  ОтветОИСМОСтатусеТовара - Число - Ответ от ИСМО.  
// 
// Возвращаемое значение:
//  ПеречислениеСсылка - Ответ ОИСМ.
//
Функция ОтветОИСМОСтатусеТовараПоКоду(ОтветОИСМОСтатусеТовара) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
		Возврат МодульМенеджерОборудованияМаркировка.ОтветОИСМОСтатусеТовараПоКоду(ОтветОИСМОСтатусеТовара);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать МенеджерОборудованияМаркировка.КодТипаМаркировкиККТ.
// Получить код типа маркировки ККТ по коду.
// 
// Параметры:
//  ТипМаркировкиККТ - ПеречислениеСсылка.ТипыМаркировкиККТ - Тип маркировки ККТ.
// 
// Возвращаемое значение:
//  Строка, Произвольный - Код типа маркировки ККТ
Функция КодТипаМаркировкиККТ(ТипМаркировкиККТ) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
		Возврат МодульМенеджерОборудованияМаркировка.КодТипаМаркировкиККТ(ТипМаркировкиККТ);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать МенеджерОборудованияМаркировка.ТипМаркировкиККТПоКоду.
// Получить код типа маркировки ККТ.
// 
// Параметры:
//  КодТипМаркировкиККТ - Число - Код тип маркировки ККТ
// 
// Возвращаемое значение:
//  Произвольный, ПеречислениеСсылка.ТипыМаркировкиККТ - Тип маркировки ККТПо коду
Функция ТипМаркировкиККТПоКоду(КодТипМаркировкиККТ) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
		Возврат МодульМенеджерОборудованияМаркировка.ТипМаркировкиККТПоКоду(КодТипМаркировкиККТ);
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать МенеджерОборудованияМаркировка.СтатусРезультатаЗапросаКМПоКоду.
// Получить статус результата запроса КМ по коду.
// 
// Параметры:
//  КодСтатуса - Число - Код статуса.
// 
// Возвращаемое значение:
//  Произвольный, ПеречислениеСсылка - Статус результата запроса КМПо коду
Функция СтатусРезультатаЗапросаКМПоКоду(КодСтатуса) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
		Возврат МодульМенеджерОборудованияМаркировка.СтатусРезультатаЗапросаКМПоКоду(КодСтатуса);
	КонецЕсли;
	
КонецФункции

#КонецОбласти