////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//++ НЕ УТКА
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.АналогиМатериалов);
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам НСИ производства.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "АналогиМатериалов");
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область Спецификации

// Возвращает спецификации изделия
//
// Параметры:
//  ДанныеОбИзделии             - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
// 
// Возвращаемое значение:
//  Массив - содержит данные спецификаций изделия.
//
Функция СпецификацииИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РесурсныеСпецификации.СпецификацииИзделия");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	0                                                                   КАК ИндексДанных,
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	&Номенклатура                                                       КАК Номенклатура,
	|	&Характеристика                                                     КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(&НачалоПроизводства, ДЕНЬ)                            КАК НачалоПроизводства,
	|	&ПодразделениеДиспетчер                                             КАК ПодразделениеДиспетчер,
	|	&НаправлениеДеятельности                                            КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|;
	|";
	
	Запрос.УстановитьПараметр("Номенклатура",            ДанныеОбИзделии.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          ДанныеОбИзделии.Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства",      ДанныеОбИзделии.НачалоПроизводства);
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер",  ДанныеОбИзделии.ПодразделениеДиспетчер);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ДанныеОбИзделии.НаправлениеДеятельности);
	
	ПараметрыТекстаЗапроса = ПараметрыТекстаЗапросаСпецификацийИзделий();
	
	Запрос.Текст = Запрос.Текст +  ТекстЗапросаСпецификацийИзделий(
		ПараметрыТекстаЗапроса,
		ПараметрыВыбораСпецификаций);
	
	УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокСпецификаций = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСпецификации = Новый Структура("Спецификация,ПодбираетсяАвтоматически,"+ПараметрыВыбораСпецификаций.РеквизитыСпецификации);
			ЗаполнитьЗначенияСвойств(ДанныеСпецификации, Выборка);
			СписокСпецификаций.Добавить(ДанныеСпецификации);
		КонецЦикла;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, СписокСпецификаций.Количество());
	
	Возврат СписокСпецификаций;
	
КонецФункции

// Возвращает спецификации изделий
//
// Параметры:
//  ДанныеОбИзделиях            - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
// 
// Возвращаемое значение:
//  Массив - содержит данные спецификаций изделия.
//
Функция СпецификацииИзделий(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбИзделиях) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.ИндексДанных                            КАК ИндексДанных,
	|	Т.Номенклатура                            КАК Номенклатура,
	|	Т.Характеристика                          КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(Т.НачалоПроизводства, ДЕНЬ) КАК НачалоПроизводства,
	|	Т.ПодразделениеДиспетчер                  КАК ПодразделениеДиспетчер,
	|	Т.НаправлениеДеятельности                 КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК Т
	|
	|;
	|
	|ВЫБРАТЬ
	|	Т.*,
	|	Т.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	СписокНоменклатуры КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика
	|;
	|
	|";
	
	СписокНоменклатуры = ТаблицаДанныхОбИзделииДляВыбораСпецификации();
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОбИзделиях[ИндексДанных]);
		НоваяСтрока.ИндексДанных = ИндексДанных;
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	ПараметрыТекстаЗапроса = ПараметрыТекстаЗапросаСпецификацийИзделий();
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаСпецификацийИзделий(
		ПараметрыТекстаЗапроса,
		ПараметрыВыбораСпецификаций);
	
	УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	СписокСпецификаций = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив(ДанныеОбИзделиях.Количество());
	
	ПрекратитьОбработку = Новый Соответствие;
	
	Для Индекс = 0 По СписокСпецификаций.Количество() - 1 Цикл
		
		СтрокаСпецификация = СписокСпецификаций[Индекс];
		ИндексДанных       = СтрокаСпецификация.ИндексДанных;
		
		Если ПрекратитьОбработку.Получить(ИндексДанных) = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбИзделии        = ДанныеОбИзделиях[ИндексДанных];
		ПодобратьАвтоматически = (Результат[ИндексДанных] = Неопределено И СтрокаСпецификация.ПодбираетсяАвтоматически = Истина);
		
		Если ДанныеОбИзделии.Свойство("ТекущаяСпецификация") И ЗначениеЗаполнено(ДанныеОбИзделии.ТекущаяСпецификация) Тогда
		
			ЭтоТекущаяСпецификация = (СтрокаСпецификация.Спецификация = ДанныеОбИзделии.ТекущаяСпецификация);
			
			Если ЭтоТекущаяСпецификация ИЛИ ПодобратьАвтоматически Тогда
				Результат[ИндексДанных] = Новый Структура("Спецификация,"+ПараметрыВыбораСпецификаций.РеквизитыСпецификации);
				ЗаполнитьЗначенияСвойств(Результат[ИндексДанных], СтрокаСпецификация);
			КонецЕсли;
			
			Если ЭтоТекущаяСпецификация Тогда
				ПрекратитьОбработку.Вставить(ИндексДанных, Истина);
			КонецЕсли;
		
		ИначеЕсли ПодобратьАвтоматически Тогда
			
			Результат[ИндексДанных] = Новый Структура("Спецификация,"+ПараметрыВыбораСпецификаций.РеквизитыСпецификации);
			ЗаполнитьЗначенияСвойств(Результат[ИндексДанных], СтрокаСпецификация);
			ПрекратитьОбработку.Вставить(ИндексДанных, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет спецификацию в строках
//
// Параметры:
//  МассивСтрок					 - ДанныеФормыСтруктура, СтрокаТабличнойЧасти - строки в которых нужно заполнить спецификацию
//  ДанныеОбИзделиях			 - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций	 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
//  ИмяПоляСпецификация			 - Строка									 - Имя поля спецификация
//  ТолькоНезаполненные			 - Булево									 - Истина, если нужно заполнить спецификацию только если она не указана.
//
Процедура ЗаполнитьСпецификациюВСтроках(МассивСтрок, ДанныеОбИзделиях, ПараметрыВыбораСпецификаций, ИмяПоляСпецификация = "Спецификация", ТолькоНезаполненные = Ложь) Экспорт
	
	СпецификацииИзделий = СпецификацииИзделий(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций);
	
	ИмяПоля = ИмяПоляСпецификация;
	ИндексДанных = 0;
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоля]) ИЛИ НЕ ТолькоНезаполненные Тогда
			
			ДанныеСпецификации = СпецификацииИзделий[ИндексДанных];
			
			Если ДанныеСпецификации <> Неопределено Тогда
				ТекущаяСтрока[ИмяПоля] = ДанныеСпецификации.Спецификация;
			Иначе
				ТекущаяСтрока[ИмяПоля] = Неопределено;
			КонецЕсли;
			
			ЗначенияЗаполнения = Новый Структура;
			Для каждого Реквизит Из СтрРазделить(ПараметрыВыбораСпецификаций.РеквизитыСпецификации,",",Ложь) Цикл
				ЗначенияЗаполнения.Вставить(Реквизит, ?(ДанныеСпецификации = Неопределено, Неопределено, ДанныеСпецификации[Реквизит]));
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияЗаполнения);
			
		КонецЕсли;
		
		ДанныеОбИзделиях[ИндексДанных].Вставить("Спецификация", ТекущаяСтрока[ИмяПоля]);
		ИндексДанных = ИндексДанных + 1;
		
	КонецЦикла; 

КонецПроцедуры

// Проверяет корректность заполнения полуфабрикатов производимых в процессе
//
// Параметры:
// 		КоллекцияДанных - ТабличнаяЧасть - Таблица, в которой необходимо заполнить реквизиты, содержит:
// 			* НомерСтроки - Число - номер строки таблицы
// 		ПараметрыПроверки - Структура - Параметры проверок, которые требуется выполнить, содержит:
// 			* ПараметрыПроверкиВнутреннихПолуфабрикатов - Структура - структура параметров проверки внутренних пф, содержит:
// 				** ТаблицаПолуфабрикатов - ТаблицаЗначений - таблица полуфабрикатов для проверки
// 		Отказ - Булево - признак наличия ошибок заполнения
// 		Объект - СправочникОбъект.РесурсныеСпецификации - объект, связанный с проверкой.
//
Процедура ПроверитьСпецификацииПолуфабрикатов(КоллекцияДанных, ПараметрыПроверки, Отказ, Объект = Неопределено) Экспорт
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	ПутьКДанным = "";
	ИмяРеквизита = "ИсточникПолученияПолуфабриката";
	
	СтруктураПроверок = ПараметрыПроверки.СтруктураПроверок;
	ВыводитьСообщения = Истина;
	
	Если ПараметрыПроверки.Свойство("ПутьКДанным") Тогда
		ПутьКДанным = ПараметрыПроверки.ПутьКДанным;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ИмяРеквизита") Тогда
		ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ВыводитьСообщения") Тогда
		ВыводитьСообщения = ПараметрыПроверки.ВыводитьСообщения;
	КонецЕсли;
	
	ШаблонСообщенияНетИзделия              = НСтр("ru = 'В выходных изделиях спецификации полуфабриката должен быть полуфабрикат, который потребляется в текущей спецификации (список ""Материалы и работы"", строка %1)';
													|en = 'In the finished products of semi-finished product BOM, there should be a semi-finished product which is used in the current bill of materials (the ""Materials and works"" list, line %1)'");
	ШаблонСообщенияПереработкаНаСтороне    = НСтр("ru = 'По спецификации полуфабриката производственный процесс выполняется силами переработчика. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)';
													|en = 'Production process against the semi-finished product BOM is performed by subcontractor. The semi-finished products should be manufactured in-house (the ""Materials and works"" list, line %1)'");
	ШаблонСообщенияСпецификацияНеДействует = НСтр("ru = 'Спецификация полуфабриката должна быть действующей (список ""Материалы и работы"", строка %1)';
													|en = 'Semi-finished product BOM should be valid (the ""Materials and works"" list, line %1)'");
	ШаблонСообщенияНекратноеКоличество     = НСтр("ru = 'В спецификации полуфабриката выход полуфабриката должен быть кратен количеству потребляемого полуфабриката текущей спецификации (список ""Материалы и работы"", строка %1)';
													|en = 'Semi-finished product yield should be a multiple of quantity of the consumed semi-finished product of the current BOM (the ""Materials and works"" list, line %1)'");
	
	СписокНоменклатуры = Новый Массив;
	СписокСпецификаций = Новый Массив;
	СписокСтрокПромежуточныхПолуфабрикатов = Новый Массив;
	
	Для каждого Строка Из КоллекцияДанных Цикл
		
		Если Строка.ПроизводитсяВПроцессе Тогда
		
			Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
				
				Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
					
					СписокНоменклатуры.Добавить(Строка.Номенклатура);
					СписокСпецификаций.Добавить(Строка.ИсточникПолученияПолуфабриката);
					
				ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов") Тогда
					
					СписокСтрокПромежуточныхПолуфабрикатов.Добавить(Строка);
					
				КонецЕсли;
			
			//++ Устарело_Производство21
			ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеСпецификации") Тогда // только 2.1
				
				Если Не ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
					
					Если ВыводитьСообщения Тогда
						Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
							Шаблон = НСтр("ru = 'Не заполнена колонка ""Спецификация полуфабриката"" в строке %1 списка ""Материалы и работы""';
											|en = 'The ""Semi-finished product BOM"" column is not filled in line %1 of the ""Materials and works"" list'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Иначе
							Шаблон = НСтр("ru = 'Не заполнена колонка ""Этап выпуска полуфабриката"" в строке %1 списка ""Материалы и работы""';
											|en = 'The ""Release stage of the semi-finished product"" column is not filled in line %1 of the ""Materials and works"" list'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						КонецЕсли;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, ИмяРеквизита);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					
					Если ВыводитьСообщения Тогда
						Шаблон = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Материалы и работы"". Колонка обязательна для заполнения для производимых полуфабрикатов.';
										|en = 'The ""Products"" column is not filled in line %1 of the ""Materials and works"" list. The column is required for manufactured semi-finished products.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "Номенклатура");
						ОбщегоНазначения.СообщитьПользователю(
							ТекстСообщения,
							Объект,
							Поле,
							ПутьКДанным,
							Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
				
				КонецЕсли;
				
			//-- Устарело_Производство21
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Владелец КАК Ссылка
		|ПОМЕСТИТЬ ВТСпецификацииПолуфабрикатов
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (&СпецификацииПолуфабрикатов)
		|	И ЭтапыПроизводства.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Ссылка,
		|	РесурсныеСпецификации.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА СпецификацииСЭтапамиНаСтороне.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПереработкаНаСтороне
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификацииПолуфабрикатов КАК СпецификацииСЭтапамиНаСтороне
		|		ПО РесурсныеСпецификации.Ссылка = СпецификацииСЭтапамиНаСтороне.Ссылка
		|ГДЕ
		|	РесурсныеСпецификации.Ссылка В(&СпецификацииПолуфабрикатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка          КАК Номенклатура,
		|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В (&СписокПолуфабрикатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыходныеИзделия.Ссылка             КАК Ссылка,
		|	ВыходныеИзделия.ВидНоменклатуры    КАК ВидНоменклатуры,
		|	ВыходныеИзделия.Номенклатура       КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика     КАК Характеристика,
		|	ВыходныеИзделия.Упаковка           КАК Упаковка,
		|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка В(&СпецификацииПолуфабрикатов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПолуфабрикатов",       СписокНоменклатуры);
	Запрос.УстановитьПараметр("СпецификацииПолуфабрикатов", СписокСпецификаций);
	
	Результат = Запрос.ВыполнитьПакет(); 
	
	РеквизитыСпецификаций = Результат[1].Выгрузить();
	ВидыНоменклатуры      = Результат[2].Выгрузить();
	ДанныеСпецификаций    = Результат[3].Выгрузить();
	
	ВидыНоменклатуры.Индексы.Добавить("Номенклатура");
	РеквизитыСпецификаций.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаМатериал Из КоллекцияДанных Цикл
	
		Если НЕ СтрокаМатериал.ПроизводитсяВПроцессе 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаМатериал.ИсточникПолученияПолуфабриката)
			ИЛИ ТипЗнч(СтрокаМатериал.ИсточникПолученияПолуфабриката) <> Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		СпецификацияПолуфабриката = ДанныеСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		СтрокаТаблицы = ВидыНоменклатуры.Найти(СтрокаМатериал.Номенклатура, "Номенклатура");
		Если СтрокаТаблицы = Неопределено Тогда
			ВидНоменклатурыПолуфабриката = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		Иначе
			ВидНоменклатурыПолуфабриката = СтрокаТаблицы.ВидНоменклатуры;
		КонецЕсли;
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, ИмяРеквизита);
		
		Реквизиты = РеквизитыСпецификаций.Найти(СтрокаМатериал.ИсточникПолученияПолуфабриката, "Ссылка");
		Если Реквизиты <> Неопределено И Реквизиты.Статус <> Перечисления.СтатусыСпецификаций.Действует И СтруктураПроверок.Свойство("СтатусСпецификации") Тогда
			
			// Спецификация не действует
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияСпецификацияНеДействует, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		//++ Устарело_Производство21
		Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("ПроизводствоНаСтороне")
			И Реквизиты <> Неопределено И Реквизиты.ЕстьПереработкаНаСтороне Тогда
			
			// Производство на стороне
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПереработкаНаСтороне, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		//-- Устарело_Производство21
		
		ЕстьВыходПолуфабриката = Ложь;
		Для каждого СтрокаИзделиеСпецификацииПолуфабриката Из СпецификацияПолуфабриката Цикл
			Если (СтрокаМатериал.Номенклатура = СтрокаИзделиеСпецификацииПолуфабриката.Номенклатура
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаИзделиеСпецификацииПолуфабриката.Номенклатура)
						И СтрокаИзделиеСпецификацииПолуфабриката.ВидНоменклатуры = ВидНоменклатурыПолуфабриката)
				И (НЕ ЗначениеЗаполнено(СтрокаИзделиеСпецификацииПолуфабриката.Характеристика)
					ИЛИ СтрокаМатериал.Характеристика = СтрокаИзделиеСпецификацииПолуфабриката.Характеристика) Тогда
				
				ЕстьВыходПолуфабриката = Истина;
				
				//++ Устарело_Производство21
				Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("КратностьПроизводимогоКоличества") Тогда
					
					Если СтрокаМатериал.Упаковка = СтрокаИзделиеСпецификацииПолуфабриката.Упаковка Тогда
						НормативМатериал = СтрокаМатериал.КоличествоУпаковок;
						НормативИзделие  = СтрокаИзделиеСпецификацииПолуфабриката.КоличествоУпаковок;
					Иначе
						МассивЗначений = Новый Массив;
						МассивЗначений.Добавить(Новый Структура("Номенклатура,Упаковка", СтрокаМатериал.Номенклатура, СтрокаМатериал.Упаковка));
						МассивЗначений.Добавить(Новый Структура("Номенклатура,Упаковка", СтрокаМатериал.Номенклатура, СтрокаИзделиеСпецификацииПолуфабриката.Упаковка));
						
						КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(МассивЗначений).Получить(СтрокаМатериал.Номенклатура);
						
						НормативМатериал = СтрокаМатериал.КоличествоУпаковок
							* ?(ЗначениеЗаполнено(КоэффициентыУпаковок.Получить(СтрокаМатериал.Упаковка)),
								КоэффициентыУпаковок.Получить(СтрокаМатериал.Упаковка),
								1);
						
						НормативИзделие = СтрокаИзделиеСпецификацииПолуфабриката.КоличествоУпаковок
							* ?(ЗначениеЗаполнено(КоэффициентыУпаковок.Получить(СтрокаИзделиеСпецификацииПолуфабриката.Упаковка)),
								КоэффициентыУпаковок.Получить(СтрокаИзделиеСпецификацииПолуфабриката.Упаковка),
								1);
					КонецЕсли;
					
					Если НормативМатериал <> 0 И НормативИзделие <> 0
						И Цел(НормативМатериал / НормативИзделие) <> (НормативМатериал / НормативИзделие) Тогда
						
						Если ВыводитьСообщения Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщенияНекратноеКоличество,
								СтрокаМатериал.НомерСтроки);
							
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
						Иначе
							Отказ = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				//-- Устарело_Производство21
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПроверок.Свойство("СоответствиеСпецификации") Тогда
			Если НЕ ЕстьВыходПолуфабриката Тогда
				// Нет выхода полуфабриката
				Если ВыводитьСообщения Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияНетИзделия,
						СтрокаМатериал.НомерСтроки);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов")
		И СписокСтрокПромежуточныхПолуфабрикатов.Количество() > 0 Тогда
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов = ПараметрыПроверки.ПараметрыПроверкиВнутреннихПолуфабрикатов;
		ТекстЗапроса = ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов);
		ТаблицаПотребностиВПолуфабрикатах = ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, СписокСтрокПромежуточныхПолуфабрикатов);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ИспользуетсяПроизводство22", НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22);
		
		Запрос.УстановитьПараметр("ТаблицаПотребностиВПолуфабрикатах", ТаблицаПотребностиВПолуфабрикатах);
		
		//++ Устарело_Производство21
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа" Тогда
			
			Запрос.УстановитьПараметр("ТаблицаЭтаповЗаказа", ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов);
		
		КонецЕсли;
		//-- Устарело_Производство21
		
		Результат = Запрос.ВыполнитьПакет();
		КоличествоПакетов = Результат.Количество();
		
		Если Не Результат[КоличествоПакетов - 4].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 4].Выбрать();
			
			Шаблон = НСтр("ru = 'Этап выпуска полуфабриката выполняется позже этапа, на котором этот полуфабрикат потребляется (список ""Материалы и работы"", строка %1)';
							|en = 'Release stage of the semi-finished product is performed later than the stage at which this semi-finished product is consumed (the ""Materials and works"" list, line %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
					
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 3].Выбрать();
			
			Шаблон = НСтр("ru = 'Не допускается указание работ в качестве полуфабрикатов, производимых на этапах (список ""Материалы и работы"", строка %1)';
							|en = 'Cannot specify works as semi-finished products manufactured at stages (list ""Materials and works"", line %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 2].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
			Шаблон = НСтр("ru = 'Этап выпуска полуфабриката выполняется переработчиком. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)';
							|en = 'Release stage of the semi-finished product is performed by a subcontractor. Semi-finished products should be manufactured in-house (the ""Materials and works"" list, line %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
			
			Шаблон  = НСтр("ru = 'В выходных изделиях не описан выпуск полуфабриката ""%НоменклатураХарактеристика%"" на этапе ""%ЭтапВыпуска%"" в%Достаточном% количестве%НеХватает% %Количество% %Упаковка%, см. список ""%ТаблицаПолуфабрикатов%"" (список ""Материалы и работы"", строка %НомерСтроки%)';
							|en = 'Release of semi-finished product ""%НоменклатураХарактеристика%"" at stage ""%ЭтапВыпуска%"" in %Достаточном% quantity %НеХватает% %Количество% %Упаковка% is not described in the finished products, see list ""%ТаблицаПолуфабрикатов%"" (the ""Materials and works"" list, line %НомерСтроки%)'");
			ТекстДостаточном = " " + НСтр("ru = 'достаточном';
											|en = 'sufficient'");
			ТекстНеХватает   = ", " + НСтр("ru = 'не хватает';
											|en = 'not enough'");
			
			СтруктураПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
				ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска);
			
			ТаблицаПолуфабрикатовОстаток = ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов;
			ТаблицаПолуфабрикатовОстаток.Колонки.Добавить("КоличествоДоступно");
			
			Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				НайденныеСтроки = ТаблицаПолуфабрикатовОстаток.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					СтрокаПолуфабрикат = НайденныеСтроки[0];
				Иначе
					СтрокаПолуфабрикат = Неопределено;
				КонецЕсли;
				
				Если СтрокаПолуфабрикат = Неопределено Тогда
					КоличествоДоступно = 0;
				ИначеЕсли СтрокаПолуфабрикат.КоличествоДоступно <> Неопределено Тогда
					КоличествоДоступно = СтрокаПолуфабрикат.КоличествоДоступно;
				Иначе
					КоличествоДоступно = СтрокаПолуфабрикат.Количество;
				КонецЕсли;
				
				Если КоличествоДоступно = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.Количество > КоличествоДоступно Тогда
					
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = СтрЗаменить(Шаблон, "%НоменклатураХарактеристика%", 
											НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапВыпуска%", Выборка.ЭтапВыпускаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", (Выборка.Количество - КоличествоДоступно)/Выборка.КоэффициентУпаковки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.УпаковкаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаПолуфабрикатов%", ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
						
						Если СтрокаПолуфабрикат <> Неопределено Тогда
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", ТекстДостаточном);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", ТекстНеХватает);
						Иначе
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", "");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", "");
						КонецЕсли;
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
							Выборка.НомерСтроки, 
							ИмяРеквизита);
							
						ОбщегоНазначения.СообщитьПользователю(
							ТекстСообщения, 
							Объект, 
							Поле, 
							ПутьКДанным, 
							Отказ);
							
					Иначе
						
						Отказ = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаПолуфабрикат <> Неопределено Тогда
					СтрокаПолуфабрикат.КоличествоДоступно = Макс(КоличествоДоступно - Выборка.Количество, 0);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры выбора спецификаций для номенклатуры.
//
// Параметры:
//  Объект			 - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура	 - объект, для которого нужно сформировать параметры.
//  МенеджерОбъекта	 - СправочникМенеджер, ДокументМенеджер						 - менеджер объекта, для которого нужно сформировать параметры.
// 
// Возвращаемое значение:
//  Структура - параметры выбора спецификаций.
//
Функция ПараметрыВыбораСпецификаций(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций();
	
	ЗначенияРеквизитов = Неопределено;
	Если ЗначениеЗаполнено(ИменаРеквизитов) Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект))
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
		Иначе
			ЗначенияРеквизитов = Новый Структура(ИменаРеквизитов);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(МенеджерОбъекта.ПараметрыВыбораСпецификаций(ЗначенияРеквизитов));
	
КонецФункции

// Возвращает описание источника доступных спецификаций
//
// Возвращаемое значение:
//  Структура - поля описания источника
//
Функция ИсточникДоступныхСпецификацийКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстЗапроса",                             "");
	Результат.Вставить("ТекстПоляНоменклатура",                    "");
	Результат.Вставить("ТекстПоляСпецификация",                    "");
	Результат.Вставить("ТекстПоляНоменклатураСпецификации",        "");
	Результат.Вставить("ТекстПоляУпаковкаСпецификации",            "");
	Результат.Вставить("ИмяВременнойТаблицыИсточникаСпецификаций", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры формирования текста запроса спецификаций изделий
//
// Возвращаемое значение:
//  Структура - параметры текста запроса
//
Функция ПараметрыТекстаЗапросаСпецификацийИзделий() Экспорт
	
	Результат = Новый Структура;
	
	// Используется, если имя входной таблицы отличается от ВтСписокНоменклатуры
	Результат.Вставить("ИмяВходнойТаблицы",           "");
	// Используется, если результат необходимо поместить во временную таблицу 
	Результат.Вставить("ИмяВыходнойТаблицы",          "");
	// Истина - если необходим отбор только приоритетных спецификаций
	Результат.Вставить("ТолькоПриоритетные",          Ложь);
	// Истина - если необходима сортировка результата по приоритету
	Результат.Вставить("УпорядочитьПоПриоритету",     Истина);
	// Истина - если необходимо поместить все поля структуры/таблицы данных об изделии в результат выборки
	Результат.Вставить("ВсеПоляВРезультате",          Ложь);
	// Истина - если необходимо уничтожить используемые временные таблицы
	Результат.Вставить("УничтожитьВременныеТаблицы",  Истина);
	// Истина - если необходим разделитель итогового пакета
	Результат.Вставить("РазделительИтоговогоПакета",  Истина);
	// Дополнительные условия отбора входной таблицы
	Результат.Вставить("УсловияОтбораВходящихДанных", Новый Массив);
	// Структура - см. ИсточникДоступныхСпецификацийКонструктор
	Результат.Вставить("ИсточникДоступныхСпецификаций", Неопределено);
	// Переопределение полей 
	Результат.Вставить("ПутиКДанным", Новый Структура());
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса спецификаций изделий
//
// Параметры:
//  ПараметрыЗапроса            - см. УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий
//  ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
// 
// Возвращаемое значение:
//  Строка - текст запроса для выбора спецификаций изделий
//
Функция ТекстЗапросаСпецификацийИзделий(ПараметрыЗапроса, ПараметрыВыбораСпецификаций) Экспорт
	
	ТаблицыУничтожить = Новый Массив;
	ТаблицыУничтожить.Добавить("ВтДоступныеСпецификации");
	ТаблицыУничтожить.Добавить("ВтСоответствуютПараметрамНазначения");
	ТаблицыУничтожить.Добавить("ВтНайденоВСписке");
	
	УправлениеДаннымиОбИзделияхПереопределяемый.ИсточникДоступныхСпецификаций(ПараметрыЗапроса, ПараметрыВыбораСпецификаций);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИсточникДоступныхСпецификаций) Тогда
		
		ИсточникДоступныхСпецификаций = ПараметрыЗапроса.ИсточникДоступныхСпецификаций;
		
		ТекстЗапроса                             = ИсточникДоступныхСпецификаций.ТекстЗапроса;
		ТекстПоляНоменклатура                    = ИсточникДоступныхСпецификаций.ТекстПоляНоменклатура;
		ТекстПоляСпецификация                    = ИсточникДоступныхСпецификаций.ТекстПоляСпецификация;
		ТекстПоляНоменклатураСпецификации        = ИсточникДоступныхСпецификаций.ТекстПоляНоменклатураСпецификации;
		ТекстПоляУпаковкаСпецификации            = ИсточникДоступныхСпецификаций.ТекстПоляУпаковкаСпецификации;
		ИмяВременнойТаблицыИсточникаСпецификаций = ИсточникДоступныхСпецификаций.ИмяВременнойТаблицыИсточникаСпецификаций;
		
	Иначе
		
		ТаблицыУничтожить.Добавить("ВтИсточникДоступныхСпецификаций");
		
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	СписокНоменклатуры.ИндексДанных            КАК ИндексДанных,
		|	СписокНоменклатуры.Номенклатура            КАК Номенклатура,
		|	СписокНоменклатуры.Характеристика          КАК Характеристика,
		|	СписокНоменклатуры.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|	СписокНоменклатуры.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	СписокНоменклатуры.НачалоПроизводства      КАК НачалоПроизводства,
		|
		|	СпецификацииИзделий.Спецификация           КАК Спецификация,
		|	СпецификацииИзделий.НачалоДействия         КАК НачалоДействия,
		|	СпецификацииИзделий.Спецификация.Код       КАК Код,
		|
		|	СпецификацииИзделий.Спецификация.ВариантПодбораВДокументы
		|		= ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически)
		|		И СпецификацииИзделий.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|		И НЕ СпецификацииИзделий.ПобочныйВыход                                                        КАК ПодбираетсяАвтоматически,
		|	СпецификацииИзделий.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК ЛюбаяНоменклатура,
		|	СпецификацииИзделий.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика
		|
		|ПОМЕСТИТЬ ВтИсточникДоступныхСпецификаций
		|ИЗ
		|	РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
		|		 ПО СпецификацииИзделий.ВидНоменклатуры = СписокНоменклатуры.ВидНоменклатуры
		|			И (СпецификацииИзделий.Номенклатура = СписокНоменклатуры.Номенклатура
		|				ИЛИ СпецификацииИзделий.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (СпецификацииИзделий.Характеристика = СписокНоменклатуры.Характеристика
		|				ИЛИ СпецификацииИзделий.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И &ТекстУсловиеОтбораВходящихДанных
		|
		|ГДЕ
		|
		|	(СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1) 
		|		ИЛИ СпецификацииИзделий.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
		|	И (СпецификацииИзделий.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ СпецификацииИзделий.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
		|
		|	И (СпецификацииИзделий.ТипПроизводственногоПроцесса В (&ДоступныеТипы)
		|		ИЛИ &ДоступныеТипыБезОтбора)
		|
		|	И (СпецификацииИзделий.Статус В (&ДоступныеСтатусы)
		|		ИЛИ &ДоступныеСтатусыБезОтбора)
		|
		|	И (СпецификацииИзделий.Спецификация <> &ИсключитьСпецификацию
		|		ИЛИ &ИсключитьСпецификациюБезОтбора)
		|
		|	И (СпецификацииИзделий.ПобочныйВыход = ЛОЖЬ
		|		ИЛИ (&ДоступныСпецификацииНаПобочныйВыход
		|				И СпецификацииИзделий.Спецификация.РазрешитьВыборДляИзделийПобочногоВыхода)
		|		ИЛИ (&ДоступныСпецификацииНаПобочныйВыход
		|				И &ИспользуетсяПроизводство21))
		|
		|	И &ТекстУсловиеОтбораПоУпаковке
		|
		|	И &ТекстУсловиеОтбораПоНаименованию
		|
		|	И &ТекстУсловиеДоступныСпецификацииСПроизводствомНаСтороне
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		ТекстПоляНоменклатура                    = "СписокНоменклатуры.Номенклатура";
		ТекстПоляСпецификация                    = "СпецификацииИзделий.Спецификация";
		ТекстПоляНоменклатураСпецификации        = "СпецификацииИзделий.Номенклатура";
		ТекстПоляУпаковкаСпецификации            = "СпецификацииИзделий.Упаковка";
		ИмяВременнойТаблицыИсточникаСпецификаций = "ВтИсточникДоступныхСпецификаций";
	
	КонецЕсли;
	
	ТекстУсловия = ТекстУсловияОтбораПоУпаковкеПриВыбореСпецификаций(
		ТекстПоляНоменклатура, ТекстПоляНоменклатураСпецификации, ТекстПоляУпаковкаСпецификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеОтбораПоУпаковке", ТекстУсловия);
	
	Если ПараметрыВыбораСпецификаций.Свойство("СтрокаПоиска") Тогда
		ТекстУсловия = "
		|	И (&ТекстПоляСпецификация.Наименование ПОДОБНО &СтрокаПоиска
		|		ИЛИ &СтрокаПоиска = """")";
	Иначе
		ТекстУсловия = "";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеОтбораПоНаименованию", ТекстУсловия);
	
	Если ПараметрыВыбораСпецификаций.Свойство("ДоступныСпецификацииСПроизводствомНаСтороне")
		И НЕ ПараметрыВыбораСпецификаций.ДоступныСпецификацииСПроизводствомНаСтороне Тогда
		ТекстУсловия = "
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ЭтапыПроизводства КАК Т
		|		ГДЕ
		|			Т.Владелец = &ТекстПоляСпецификация
		|			И Т.ПроизводствоНаСтороне
		|			И НЕ Т.ПометкаУдаления
		|		)";
	Иначе
		ТекстУсловия = "";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеДоступныСпецификацииСПроизводствомНаСтороне", ТекстУсловия);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ДоступныеСпецификации.ИндексДанных                               КАК ИндексДанных,
	|	ДоступныеСпецификации.Спецификация                               КАК Спецификация,
	|	ДоступныеСпецификации.ЛюбаяНоменклатура                          КАК ЛюбаяНоменклатура,
	|	ДоступныеСпецификации.ЛюбаяХарактеристика                        КАК ЛюбаяХарактеристика,
	|
	|	ДоступныеСпецификации.НачалоПроизводства                         КАК НачалоПроизводства,
	|	ДоступныеСпецификации.НачалоДействия                             КАК НачалоДействия,
	|	ДоступныеСпецификации.Код                                        КАК Код,
	|	ДоступныеСпецификации.ПодбираетсяАвтоматически                   КАК ПодбираетсяАвтоматически,
	|
	|	ПараметрыНазначенияСпецификаций.ВидПараметра                     КАК ВидПараметраНазначения,
	|	&КлючСвязиПустой                                                 КАК ВидУточненияПрименения,
	|
	|	ПараметрыНазначенияСпецификаций.Реквизит                         КАК Реквизит,
	|	ЕСТЬNULL(ВЫБОР
	|				КОГДА ЗначенияПараметровНазначенияСпецификаций.НомерВСписке В (0, 1)
	|					ТОГДА ПараметрыНазначенияСпецификаций.Приоритет
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)                                                КАК Приоритет,
	|
	|	ЕСТЬNULL(ЗначенияПараметровНазначенияСпецификаций.Условие, """") КАК Условие,
	|	ЗначенияПараметровНазначенияСпецификаций.Значение                КАК ЗначениеНастройки,
	|
	|	ВЫБОР ПараметрыНазначенияСпецификаций.ВидПараметра
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер)
	|			ТОГДА ДоступныеСпецификации.ПодразделениеДиспетчер
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности)
	|			ТОГДА ДоступныеСпецификации.НаправлениеДеятельности
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитПодразделения)
	|			ТОГДА ЕСТЬNULL(ДопРеквизитПодразделения.Значение,
	|								ВЫБОР
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(БУЛЕВО)
	|											И ДоступныеСпецификации.ПодразделениеДиспетчер <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|										ТОГДА ЛОЖЬ
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(ЧИСЛО)
	|											И ДоступныеСпецификации.ПодразделениеДиспетчер <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|										ТОГДА 0
	|									ИНАЧЕ НЕОПРЕДЕЛЕНО
	|								КОНЕЦ)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитНаправленияДеятельности)
	|			ТОГДА ЕСТЬNULL(ДопРеквизитНаправленияДеятельности.Значение,
	|								ВЫБОР
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(БУЛЕВО)
	|											И ДоступныеСпецификации.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|										ТОГДА ЛОЖЬ
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(ЧИСЛО)
	|											И ДоступныеСпецификации.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|										ТОГДА 0
	|									ИНАЧЕ НЕОПРЕДЕЛЕНО 
	|								КОНЕЦ)
	|	КОНЕЦ                                                            КАК ЗначениеПараметра,
	|	""ПараметрНазначения""                                           КАК ВидНастройки
	|
	|ПОМЕСТИТЬ ВтДоступныеСпецификации
	|ИЗ
	|	ВтИсточникДоступныхСпецификаций КАК ДоступныеСпецификации
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНазначенияСпецификаций КАК ПараметрыНазначенияСпецификаций
	|		ПО (&ИспользоватьПараметрыНазначенияСпецификаций)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПараметровНазначенияСпецификаций КАК ЗначенияПараметровНазначенияСпецификаций
	|		ПО ДоступныеСпецификации.Спецификация               = ЗначенияПараметровНазначенияСпецификаций.Спецификация
	|			И (ПараметрыНазначенияСпецификаций.ВидПараметра = ЗначенияПараметровНазначенияСпецификаций.ВидПараметра)
	|			И (ПараметрыНазначенияСпецификаций.Реквизит     = ЗначенияПараметровНазначенияСпецификаций.Реквизит)
	|			И НЕ ЗначенияПараметровНазначенияСпецификаций.ВидПараметра В (&ИгнорируемыеПараметрыНазначения)
	|			И ЗначенияПараметровНазначенияСпецификаций.НомерВСписке МЕЖДУ 0 И 2
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК ДопРеквизитПодразделения
	|		ПО ДоступныеСпецификации.ПодразделениеДиспетчер = ДопРеквизитПодразделения.Ссылка
	|			И (ПараметрыНазначенияСпецификаций.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитПодразделения)
	|			И (ПараметрыНазначенияСпецификаций.Реквизит = ДопРеквизитПодразделения.Свойство))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности.ДополнительныеРеквизиты КАК ДопРеквизитНаправленияДеятельности
	|		ПО ДоступныеСпецификации.НаправлениеДеятельности = ДопРеквизитНаправленияДеятельности.Ссылка
	|			И (ПараметрыНазначенияСпецификаций.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитНаправленияДеятельности)
	|			И (ПараметрыНазначенияСпецификаций.Реквизит = ДопРеквизитНаправленияДеятельности.Свойство))
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗначенияПараметровНазначенияСпецификаций.Условие, """") В (""ВСписке"",""НеВСписке"")
	|			ТОГДА ЗначенияПараметровНазначенияСпецификаций.НомерВСписке = 1
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступныеСпецификации.ИндексДанных,
	|	ДоступныеСпецификации.Спецификация,
	|	ДоступныеСпецификации.ЛюбаяНоменклатура,
	|	ДоступныеСпецификации.ЛюбаяХарактеристика,
	|
	|	ДоступныеСпецификации.НачалоПроизводства,
	|	ДоступныеСпецификации.НачалоДействия,
	|	ДоступныеСпецификации.Код,
	|	ДоступныеСпецификации.ПодбираетсяАвтоматически,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ПустаяСсылка),
	|	ОтборПоСвойствам.КлючСвязи КАК КлючСвязи,
	|
	|	ОтборПоСвойствам.Свойство  КАК Свойство,
	|	0,
	|
	|	ОтборПоСвойствам.Условие,
	|	ВЫБОР
	|		КОГДА ОтборПоСвойствам.Условие В (""ВСписке"",""НеВСписке"")
	|			ТОГДА 0
	|		ИНАЧЕ ОтборПоСвойствам.Значение
	|	КОНЕЦ,
	|
	|	ЕСТЬNULL(
	|		ВЫБОР ОтборПоСвойствам.КлючСвязи
	|			КОГДА &КлючСвязиНоменклатура
	|				ТОГДА ДопРеквизитНоменклатуры.Значение
	|			КОГДА &КлючСвязиХарактеристика
	|				ТОГДА ДопРеквизитХарактеристики.Значение
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ОтборПоСвойствам.Значение) = ТИП(БУЛЕВО)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ТИПЗНАЧЕНИЯ(ОтборПоСвойствам.Значение) = ТИП(ЧИСЛО)
	|				ТОГДА 0
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ),
	|	""УточнениеПрименения""
	|
	|ИЗ
	|	ВтИсточникДоступныхСпецификаций КАК ДоступныеСпецификации
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ОтборПоСвойствам КАК ОтборПоСвойствам
	|		ПО ДоступныеСпецификации.Спецификация = ОтборПоСвойствам.Ссылка
	|			И ОтборПоСвойствам.КлючСвязи В (&КлючСвязиНоменклатура, &КлючСвязиХарактеристика)
	|			И НЕ ОтборПоСвойствам.КлючСвязи В (&ИгнорируемыеУточненияПрименения)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДопРеквизитНоменклатуры
	|		ПО ДоступныеСпецификации.Номенклатура = ДопРеквизитНоменклатуры.Ссылка
	|			И ОтборПоСвойствам.КлючСвязи = &КлючСвязиНоменклатура
	|			И ОтборПоСвойствам.Свойство = ДопРеквизитНоменклатуры.Свойство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДопРеквизитХарактеристики
	|		ПО ДоступныеСпецификации.Характеристика = ДопРеквизитХарактеристики.Ссылка
	|			И ОтборПоСвойствам.КлючСвязи = &КлючСвязиХарактеристика
	|			И ОтборПоСвойствам.Свойство = ДопРеквизитХарактеристики.Свойство
	|
	//-- НЕ УТКА
	|
	|;
	|
	|ВЫБРАТЬ
	|	Т.ИндексДанных           КАК ИндексДанных,
	|	Т.Спецификация           КАК Спецификация,
	|	Т.ВидПараметраНазначения КАК ВидПараметраНазначения,
	|	Т.ВидУточненияПрименения КАК ВидУточненияПрименения,
	|	Т.Реквизит               КАК Реквизит
	|
	|ПОМЕСТИТЬ
	|	ВтНайденоВСписке
	|ИЗ
	|	ВтДоступныеСпецификации КАК Т
	|
	|ГДЕ
	|	Т.Условие В (""ВСписке"",""НеВСписке"")
	|	И ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗначенияПараметровНазначенияСпецификаций КАК Т1
	|		ГДЕ
	|			Т.ВидНастройки = ""ПараметрНазначения""
	|			И Т.ЗначениеПараметра = Т1.Значение
	|			И Т.Спецификация = Т1.Спецификация
	|			И Т.ВидПараметраНазначения = Т1.ВидПараметра
	|			И Т.Реквизит = Т1.Реквизит
	//++ НЕ УТКА
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.РесурсныеСпецификации.ОтборПоСвойствам КАК Т2
	|		ГДЕ
	|			Т.ВидНастройки = ""УточнениеПрименения""
	|			И Т.ЗначениеПараметра = Т2.Значение
	|			И Т.Спецификация = Т2.Ссылка
	|			И Т.ВидУточненияПрименения = Т2.КлючСвязи
	|			И Т.Реквизит = Т2.Свойство
	//-- НЕ УТКА
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексДанных,
	|	Спецификация,
	|	ВидПараметраНазначения,
	|	ВидУточненияПрименения,
	|	Реквизит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000000000
	|	АВТОНОМЕРЗАПИСИ() КАК Приоритет,
	|	ДоступныеСпецификации.ИндексДанных                КАК ИндексДанных,
	|	ДоступныеСпецификации.Спецификация                КАК Спецификация,
	|	ДоступныеСпецификации.НачалоДействия              КАК НачалоДействия,
	|	ДоступныеСпецификации.Код                         КАК Код,
	|	ДоступныеСпецификации.ПодбираетсяАвтоматически    КАК ПодбираетсяАвтоматически,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДоступныеСпецификации.Условие В (""НеРавно"", ""НеВСписке"")
	|				ТОГДА ДоступныеСпецификации.Приоритет
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                        КАК Приоритет1,
	|	НЕ ДоступныеСпецификации.ЛюбаяНоменклатура        КАК Приоритет2,
	|	НЕ ДоступныеСпецификации.ЛюбаяХарактеристика      КАК Приоритет3,
	|	СУММА(ВЫБОР
	|			КОГДА ДоступныеСпецификации.Условие В (""НеРавно"", ""НеВСписке"")
	|				ТОГДА ДоступныеСпецификации.Приоритет
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                        КАК Приоритет4
	|ПОМЕСТИТЬ ВтСоответствуютПараметрамНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.ИндексДанных             КАК ИндексДанных,
	|		Т.Спецификация             КАК Спецификация,
	|		Т.НачалоДействия           КАК НачалоДействия,
	|		Т.Код                      КАК Код,
	|		Т.ПодбираетсяАвтоматически КАК ПодбираетсяАвтоматически,
	|		Т.ЛюбаяНоменклатура        КАК ЛюбаяНоменклатура,
	|		Т.ЛюбаяХарактеристика      КАК ЛюбаяХарактеристика,
	|		Т.Приоритет                КАК Приоритет,
	|		Т.Условие                  КАК Условие,
	|		ВЫБОР Т.Условие
	|			КОГДА ""Равно""
	|				ТОГДА Т.ЗначениеПараметра = Т.ЗначениеНастройки
	|			КОГДА ""НеРавно""
	|				ТОГДА Т.ЗначениеПараметра <> Т.ЗначениеНастройки
	|			КОГДА ""Больше""
	|				ТОГДА Т.ЗначениеПараметра > Т.ЗначениеНастройки
	|			КОГДА ""БольшеИлиРавно""
	|				ТОГДА Т.ЗначениеПараметра >= Т.ЗначениеНастройки
	|			КОГДА ""Меньше""
	|				ТОГДА Т.ЗначениеПараметра < Т.ЗначениеНастройки
	|			КОГДА ""МеньшеИлиРавно""
	|				ТОГДА Т.ЗначениеПараметра <= Т.ЗначениеНастройки
	|			КОГДА ""ВСписке""
	|				ТОГДА НЕ НайденоВСписке.ИндексДанных ЕСТЬ NULL
	|			КОГДА ""НеВСписке""
	|				ТОГДА НайденоВСписке.ИндексДанных ЕСТЬ NULL
	|			КОГДА ""Заполнено""
	|				ТОГДА НЕ Т.ЗначениеПараметра В (
	|										НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0,
	|										ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|										ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|												)
	|			КОГДА ""НеЗаполнено""
	|				ТОГДА Т.ЗначениеПараметра В (
	|										НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0,
	|										ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|										ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|												)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК СоответствуетПараметрамНазначения
	|	ИЗ
	|		ВтДоступныеСпецификации КАК Т
	|	
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтНайденоВСписке КАК НайденоВСписке
	|			ПО Т.ИндексДанных = НайденоВСписке.ИндексДанных
	|				И Т.Спецификация = НайденоВСписке.Спецификация
	|				И Т.ВидПараметраНазначения = НайденоВСписке.ВидПараметраНазначения
	|				И Т.ВидУточненияПрименения = НайденоВСписке.ВидУточненияПрименения
	|				И Т.Реквизит = НайденоВСписке.Реквизит
	|	) КАК ДоступныеСпецификации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеСпецификации.ИндексДанных,
	|	ДоступныеСпецификации.Спецификация,
	|	ДоступныеСпецификации.НачалоДействия,
	|	ДоступныеСпецификации.Код,
	|	ДоступныеСпецификации.ПодбираетсяАвтоматически,
	|	НЕ ДоступныеСпецификации.ЛюбаяНоменклатура,
	|	НЕ ДоступныеСпецификации.ЛюбаяХарактеристика
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ДоступныеСпецификации.СоответствуетПараметрамНазначения) = ИСТИНА
	|";
	
	// Сортировка по приоритету
	Если ПараметрыЗапроса.УпорядочитьПоПриоритету ИЛИ ПараметрыЗапроса.ТолькоПриоритетные Тогда
		
		ТекстСортировкиПоПриоритету = "
		|УПОРЯДОЧИТЬ ПО
		|	ИндексДанных,
		|	Приоритет1 УБЫВ,
		|	Приоритет2 УБЫВ,
		|	Приоритет3 УБЫВ,
		|	Приоритет4 УБЫВ,
		|	НачалоДействия УБЫВ,
		|	Код УБЫВ
		|;
		|";
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1000000000",                "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АВТОНОМЕРЗАПИСИ() КАК Приоритет,", "");
		
		ТекстСортировкиПоПриоритету = "
		|;";
		
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ТекстСортировкиПоПриоритету;
	
	ТекстУсловияОтбора = "";
	ТекстСортировкиПоПриоритету = "";
	Если ПараметрыЗапроса.ТолькоПриоритетные Тогда
		
		ТекстУсловияОтбора = "
		|ГДЕ
		|	(Спецификации.ИндексДанных, Спецификации.Приоритет) В
		|			(ВЫБРАТЬ
		|				Т.ИндексДанных,
		|				МИНИМУМ(Т.Приоритет)
		|			ИЗ
		|				ВтСоответствуютПараметрамНазначения КАК Т
		|			ГДЕ
		|				Т.ПодбираетсяАвтоматически = ИСТИНА
		|			СГРУППИРОВАТЬ ПО
		|				Т.ИндексДанных)
		|";
		
	ИначеЕсли ПараметрыЗапроса.УпорядочитьПоПриоритету И ПустаяСтрока(ПараметрыЗапроса.ИмяВыходнойТаблицы) Тогда
		
		ТекстСортировкиПоПриоритету = "
		|УПОРЯДОЧИТЬ ПО
		|	Спецификации.ИндексДанных,
		|	Спецификации.Приоритет
		|";
		
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Спецификации.ИндексДанных               КАК ИндексДанных,
	|	Спецификации.Спецификация               КАК Спецификация,
	|	Спецификации.ПодбираетсяАвтоматически   КАК ПодбираетсяАвтоматически,
	|	&РеквизитыСпецификации,
	|	&ВСЕПОЛЯ_РЕКВИЗИТЫ,
	|	Спецификации.Спецификация.Представление КАК Представление
	|
	|ПОМЕСТИТЬ ИмяВыходнойТаблицы
	|
	|ИЗ
	|	ВтСоответствуютПараметрамНазначения КАК Спецификации
	|
	|	,ВСЕПОЛЯ_СОЕДИНЕНИЕ
	|
	|";
	
	// Реквизиты спецификации
	Если ЗначениеЗаполнено(ПараметрыВыбораСпецификаций.РеквизитыСпецификации) Тогда
		ПоляЗапроса = Новый Массив;
		Для каждого Реквизит Из СтрРазделить(ПараметрыВыбораСпецификаций.РеквизитыСпецификации, ",", Ложь) Цикл
			ПоляЗапроса.Добавить(СтрШаблон("Спецификации.Спецификация.%1 КАК %1,", СокрЛП(Реквизит)));
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыСпецификации,", СтрСоединить(ПоляЗапроса,Символы.ПС));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыСпецификации,", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстУсловияОтбора;
	ТекстЗапроса = ТекстЗапроса + ТекстСортировкиПоПриоритету;
	
	Если ПараметрыЗапроса.ВсеПоляВРезультате Тогда
		
		ТекстСоединениеВсеПоля = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтИсточникДоступныхСпецификаций КАК Т
		|	ПО Спецификации.ИндексДанных = Т.ИндексДанных
		|		И Спецификации.Спецификация = Т.Спецификация
		|";
		ТекстРеквизитыВсеПоля  = "
		|	Т.*,
		|";
		ТекстИндексировать     = "";
		
	Иначе
		
		ТекстСоединениеВсеПоля = "";
		ТекстРеквизитыВсеПоля  = "";
		ТекстИндексировать     = "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИндексДанных";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВСЕПОЛЯ_РЕКВИЗИТЫ,", ТекстРеквизитыВсеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ВСЕПОЛЯ_СОЕДИНЕНИЕ", ТекстСоединениеВсеПоля);
	
	Если НЕ ПустаяСтрока(ПараметрыЗапроса.ИмяВыходнойТаблицы) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВыходнойТаблицы", "ПОМЕСТИТЬ "+ПараметрыЗапроса.ИмяВыходнойТаблицы);
		ТекстЗапроса = ТекстЗапроса + ТекстИндексировать;
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВыходнойТаблицы", "");
		
	КонецЕсли;
	
	ТекстУсловиеОтбораВходящихДанных = "ИСТИНА";
	Если ЗначениеЗаполнено(ПараметрыЗапроса.УсловияОтбораВходящихДанных) Тогда
		ТекстУсловиеОтбораВходящихДанных = СтрСоединить(ПараметрыЗапроса.УсловияОтбораВходящихДанных, " И ");
	КонецЕсли;
	
	Если ПараметрыЗапроса.УничтожитьВременныеТаблицы Тогда
		
		Для Индекс = 0 По ТаблицыУничтожить.ВГраница() Цикл
			ТаблицыУничтожить[Индекс] = СтрШаблон("%1 УНИЧТОЖИТЬ %2", ОбщегоНазначения.РазделительПакетаЗапросов(), ТаблицыУничтожить[Индекс]);
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + СтрСоединить(ТаблицыУничтожить);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.РазделительИтоговогоПакета Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСпецификация",            ТекстПоляСпецификация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловиеОтбораВходящихДанных", ТекстУсловиеОтбораВходящихДанных);
	
	Если НЕ ПустаяСтрока(ПараметрыЗапроса.ИмяВходнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтСписокНоменклатуры", ПараметрыЗапроса.ИмяВходнойТаблицы);
	КонецЕсли;
	
	Если ИмяВременнойТаблицыИсточникаСпецификаций <> "ВтИсточникДоступныхСпецификаций" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтИсточникДоступныхСпецификаций", ИмяВременнойТаблицыИсточникаСпецификаций);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает параметры запроса, сформированного функцией ТекстЗапросаСпецификацийИзделий()
//
// Параметры:
//  Запрос          - Запрос    - Запрос выбора спецификаций
//  ПараметрыВыбора - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
//
Процедура УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбора) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ДоступныеТипы",         Новый Массив);
	СписокПараметров.Вставить("ДоступныеСтатусы",      Новый Массив);
	СписокПараметров.Вставить("ИсключитьСпецификацию", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	СписокПараметровБезОтбора = Новый Структура;
	СписокПараметровБезОтбора.Вставить("ДоступныеТипы",         "ДоступныеТипыБезОтбора");
	СписокПараметровБезОтбора.Вставить("ДоступныеСтатусы",      "ДоступныеСтатусыБезОтбора");
	СписокПараметровБезОтбора.Вставить("ИсключитьСпецификацию", "ИсключитьСпецификациюБезОтбора");
	
	Для каждого КлючИЗначение Из СписокПараметров Цикл
		ЗначениеПараметра = КлючИЗначение.Значение;
		Если ПараметрыВыбора.Свойство(КлючИЗначение.Ключ) Тогда
			ЗначениеПараметра = ПараметрыВыбора[КлючИЗначение.Ключ];
		КонецЕсли;
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, ЗначениеПараметра);
		Запрос.УстановитьПараметр(СписокПараметровБезОтбора[КлючИЗначение.Ключ], НЕ ЗначениеЗаполнено(ЗначениеПараметра));
	КонецЦикла;
	
	ДоступныСпецификацииНаПобочныйВыход = Ложь;
	Если ПараметрыВыбора.Свойство("ДоступныСпецификацииНаПобочныйВыход") Тогда
		ДоступныСпецификацииНаПобочныйВыход = ПараметрыВыбора.ДоступныСпецификацииНаПобочныйВыход;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоступныСпецификацииНаПобочныйВыход", ДоступныСпецификацииНаПобочныйВыход);
	
	ИгнорируемыеПараметрыНазначения = Новый Массив;
	Если ПараметрыВыбора.Свойство("ИгнорируемыеПараметрыНазначения")
		И ЗначениеЗаполнено(ПараметрыВыбора.ИгнорируемыеПараметрыНазначения) Тогда
		Для каждого ПараметрыНазначения Из ПараметрыВыбора.ИгнорируемыеПараметрыНазначения Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ИгнорируемыеПараметрыНазначения, ВидПараметраНазначенияВМассив(ПараметрыНазначения));
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("ИгнорируемыеПараметрыНазначения", ИгнорируемыеПараметрыНазначения);
	
	ИгнорируемыеУточненияПрименения = Новый Массив;
	Если ПараметрыВыбора.Свойство("ИгнорируемыеУточненияПрименения")
		И ЗначениеЗаполнено(ПараметрыВыбора.ИгнорируемыеУточненияПрименения) Тогда
		ИгнорируемыеУточненияПрименения = ПараметрыВыбора.ИгнорируемыеУточненияПрименения;
	КонецЕсли;
	Запрос.УстановитьПараметр("ИгнорируемыеУточненияПрименения", ИгнорируемыеУточненияПрименения);
	
	Запрос.УстановитьПараметр("ИспользоватьПараметрыНазначенияСпецификаций", ПолучитьФункциональнуюОпцию("ИспользоватьПараметрыНазначенияСпецификаций"));
	//++ НЕ УТКА
	Запрос.УстановитьПараметр("КлючСвязиНоменклатура",   УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Номенклатура"));
	Запрос.УстановитьПараметр("КлючСвязиХарактеристика", УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Характеристика"));
	//-- НЕ УТКА
	Запрос.УстановитьПараметр("КлючСвязиПустой",         Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ПараметрыВыбора.Свойство("СтрокаПоиска") Тогда
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СокрЛП(ПараметрыВыбора.СтрокаПоиска) + "%");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИспользуетсяПроизводство21", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством"));
	
КонецПроцедуры

Функция ТекстУсловияОтбораПоУпаковкеПриВыбореСпецификаций(ТекстПоляНоменклатура, ТекстПоляНоменклатураСпецификации, ТекстПоляУпаковкаСпецификации) Экспорт
	
	ТекстУсловиеОтбораПоУпаковке = СтрШаблон("
	|	И ВЫБОР КОГДА %2 = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НЕ (%1.ЕдиницаИзмерения = %3) ТОГДА
	|		ВЫБОР (%3.ТипИзмеряемойВеличины)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				ТОГДА (%3.Владелец В (%1, %1.НаборУпаковок))
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|				ТОГДА (%1.ВесИспользовать И %1.ВесМожноУказыватьВДокументах)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|				ТОГДА (%1.ОбъемИспользовать И %1.ОбъемМожноУказыватьВДокументах)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	|				ТОГДА (%1.ДлинаИспользовать И %1.ДлинаМожноУказыватьВДокументах)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	|				ТОГДА (%1.ПлощадьИспользовать И %1.ПлощадьМожноУказыватьВДокументах)
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|", ТекстПоляНоменклатура, ТекстПоляНоменклатураСпецификации, ТекстПоляУпаковкаСпецификации);
	
	Возврат ТекстУсловиеОтбораПоУпаковке;
	
КонецФункции
#КонецОбласти

#Область ЭтапыПроизводства

// Проверяет соответствуют ли значения реквизитов выбранному подразделению
//  Если не соответствуют то значения очищаются.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура	- Объект содержащий данные этапа.
//  СписокРеквизитов - Строка		 - Список реквизитов к проверке.
//
Процедура ПроверитьСоответствиеРеквизитовПодразделению(Объект, СписокРеквизитов = "") Экспорт

	Если Объект.Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
//++ НЕ УТКА
	ВсеРеквизиты = ПустаяСтрока(СписокРеквизитов);
	СписокРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СписокРеквизитов.Свойство("ВидыРабочихЦентров") ИЛИ ВсеРеквизиты Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВидыРабочихЦентров.Ссылка
			|ИЗ
			|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
			|ГДЕ
			|	(ВидыРабочихЦентров.Ссылка В (&ВидРабочегоЦентра)
			|		ИЛИ ВидыРабочихЦентров.Ссылка В (&АльтернативныеВидыРабочихЦентров))
			|	И ВидыРабочихЦентров.Подразделение <> &Подразделение");
		
		Запрос.УстановитьПараметр("Подразделение",     Объект.Подразделение);
		Запрос.УстановитьПараметр("ВидРабочегоЦентра", Объект.ВидыРабочихЦентров.Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра"));
		Запрос.УстановитьПараметр("АльтернативныеВидыРабочихЦентров", Объект.АльтернативныеВидыРабочихЦентров.Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра"));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска.ВидРабочегоЦентра = Выборка.Ссылка;
			СписокСтрок = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
				СтрокаВидРЦ.ВидРабочегоЦентра = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
				СтрокаВидРЦ.Использовать = Истина;
			КонецЦикла;
			
			СтруктураПоиска.ВидРабочегоЦентра = Выборка.Ссылка;
			СписокСтрок = Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
				Объект.АльтернативныеВидыРабочихЦентров.Удалить(СтрокаВидРЦ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокРеквизитов.Свойство("МаршрутнаяКарта") ИЛИ ВсеРеквизиты Тогда
		
		Если НЕ Объект.МаршрутнаяКарта.Пустая() Тогда
			Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МаршрутнаяКарта, "Подразделение");
			Если Объект.Подразделение <> Подразделение Тогда
				Объект.МаршрутнаяКарта = Справочники.МаршрутныеКарты.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
	
	КонецЕсли;
//-- НЕ УТКА
	
КонецПроцедуры

//++ НЕ УТКА

// Заполняет плановую длительность и единицу измерения длительности этапа ББВ.
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2, СправочникОбъект.ЭтапыПроизводства, Структура - объект, содержащий реквизиты этапа.
//  ВидыРабочихЦентров - ТаблицаЗначений, Массив - таблица с данными видов рабочих центров этапа, либо массив строк.
//	ФормулыРассчитаны - Булево - Истина если в ТЧ видов рабочих центров выполнен расчет времени работы по формулам.
//
Процедура ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(Объект, ВидыРабочихЦентров, ФормулыРассчитаны) Экспорт
	
	ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.День;
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
		ИЛИ ЗначениеЗаполнено(Объект.ПредварительныйБуфер) 
			И Объект.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Час
		ИЛИ ЗначениеЗаполнено(Объект.ЗавершающийБуфер) 
			И Объект.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
		
		ЕдиницаИзмеренияДлительностиЭтапа =  Перечисления.ЕдиницыИзмеренияВремени.Час;
		
	КонецЕсли;
	
	ДлительностьЭтапа = 0;
	
	Если ВидыРабочихЦентров.Количество() > 0 Тогда
		
		НормативнаяДлительность = ПланированиеПроизводстваКлиентСервер.ПолучитьНормативнуюДлительностьИнтервала(
			ИнтервалПланирования, 
			ЕдиницаИзмеренияДлительностиЭтапа);
		
		НормативнаяДлительностьВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьНормативнуюДлительностьИнтервала(
			ИнтервалПланирования) * 86400;
		
		Ссылки = Новый Массив;
		Для каждого Строка Из ВидыРабочихЦентров Цикл
			Ссылки.Добавить(Строка.ВидРабочегоЦентра);
		КонецЦикла;
		МаксимальнаяДоступность = Справочники.ВидыРабочихЦентров.МаксимальнаяДоступностьВСекундах(Ссылки);
		
		ЭтоПерваяСтрока = Истина;
		
		Для каждого Строка Из ВидыРабочихЦентров Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.ВидРабочегоЦентра) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ФормулыРассчитаны ИЛИ ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				ВремяРаботыВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
					Строка.ВремяРаботы,
					Строка.ЕдиницаИзмерения);
				МаксДоступностьВСекундах = МаксимальнаяДоступность.Получить(Строка.ВидРабочегоЦентра);
				КоличествоИнтервалов = Окр(ВремяРаботыВСекундах/МаксДоступностьВСекундах+0.5,0,РежимОкругления.Окр15как10);
			Иначе
				КоличествоИнтервалов = 1;
			КонецЕсли;
			
			Если Объект.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно Тогда
				
				Если Не ЭтоПерваяСтрока Тогда
					КоличествоИнтервалов = КоличествоИнтервалов - 1;
				КонецЕсли;
				
				ДлительностьЭтапа = ДлительностьЭтапа + (КоличествоИнтервалов * НормативнаяДлительность);
				
			Иначе
				
				ДлительностьЭтапа = Макс(ДлительностьЭтапа, (КоличествоИнтервалов * НормативнаяДлительность));
				
			КонецЕсли;
			
			ЭтоПерваяСтрока = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПредварительныйБуфер) Тогда
		
		Если Объект.ЕдиницаИзмеренияПредварительногоБуфера = ЕдиницаИзмеренияДлительностиЭтапа Тогда
			
			ДлительностьЭтапа = ДлительностьЭтапа + Объект.ПредварительныйБуфер;
			
		Иначе
			
			ДлительностьЭтапа = ДлительностьЭтапа + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
																		ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																					Объект.ПредварительныйБуфер, 
																					Объект.ЕдиницаИзмеренияПредварительногоБуфера), 
																		ЕдиницаИзмеренияДлительностиЭтапа);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗавершающийБуфер) Тогда
	
		Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ЕдиницаИзмеренияДлительностиЭтапа Тогда
			
			ДлительностьЭтапа = ДлительностьЭтапа + Объект.ЗавершающийБуфер;
			
		Иначе
			
			ДлительностьЭтапа = ДлительностьЭтапа + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
																		ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																					Объект.ЗавершающийБуфер, 
																					Объект.ЕдиницаИзмеренияЗавершающегоБуфера), 
																		ЕдиницаИзмеренияДлительностиЭтапа);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ЕдиницаИзмеренияДлительностиЭтапа = ЕдиницаИзмеренияДлительностиЭтапа;
	Объект.ДлительностьЭтапа                 = ДлительностьЭтапа;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Проверяет возможность описания партии выпуска по спецификации
// 
// Возвращаемое значение:
//  Булево - Истина, если описание партии выпуска по спецификации доступно
//
Функция ДоступноОписаниеПартииВыпуска() Экспорт
	
	Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	
КонецФункции

// Проверяет возможность описания типа производственного процесса (сборка, разборка, ремонт).
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеТипаПроизводственногоПроцесса() Экспорт
	
	Результат = Ложь;
//++ НЕ УТКА
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством") И НЕ ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство");
//-- НЕ УТКА
	Возврат Результат;
	
КонецФункции

// Проверяет возможность описания вероятности применения материалов.
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеВероятностиПримененияМатериалов() Экспорт
	
	Результат = Ложь;
//++ НЕ УТКА
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
//-- НЕ УТКА
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ДеревоСпецификаций

// Строит дерево спецификаций для изделия.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - управляемая форма, на которой расположено дерево спецификаций
//  Параметры	 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДереваСпецификаций
//
Процедура ПостроитьДеревоСпецификаций(Форма, Параметры) Экспорт
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСпецификаций");
	
	ЗаполнитьДеревоСпецификаций(Параметры, Дерево);
	
	АдресВХранилище = "";
	
	Если Параметры.ДинамическоеСчитывание Тогда
		
		Параметры.СохранятьДанные = Истина;
		
		АдресВХранилище = ЗакэшироватьСтруктуруДереваСпецификаций(
			Параметры, 
			Дерево, 
			Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Форма.АдресДереваСпецификацийВХранилище = АдресВХранилище;
	
	Если Параметры.ДинамическоеСчитывание Тогда
		
		ПараметрыОтбора = Новый Структура("ЕстьСпецификация", Истина);
		
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Строка.Строки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			Строка.Строки.Добавить();
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСпецификаций");
	
КонецПроцедуры

// Возвращает дерево спецификаций, при динамическом считывании предварительно загружает все узлы дерева.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - управляемая форма, на которой расположено дерево спецификаций.
// 
// Возвращаемое значение:
//  ДеревоЗначений - см. СтруктураДереваСпецификаций
Функция ПрочитатьДеревоСпецификаций(Форма) Экспорт
	
	Если Форма.ДинамическоеСчитывание Тогда
		
		СтруктураДерева = ПолучитьИзВременногоХранилища(Форма.АдресДереваСпецификацийВХранилище); // см. СтруктураДереваСпецификаций
		
		Если СтруктураДерева = Неопределено Тогда
			ВызватьИсключение Нстр("ru = 'Ошибка чтения кешированных значений!';
									|en = 'An error occurred when reading cache values.'");
		КонецЕсли;
		
		Параметры = СтруктураДерева.Параметры;
		Дерево    = СтруктураДерева.Дерево;
		
		Параметры.ДинамическоеСчитывание = Ложь;
		
		Если Параметры.СохранятьДанные Тогда
			
			ПараметрыОтбора = Новый Структура("ЕстьСпецификация,СпецификацияПрочитана", Истина, Ложь);
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			
			ЗаполнитьДанныеСпецификацииСтрокДерева(Параметры, НайденныеСтроки);
			Для каждого СтрокаДерева Из НайденныеСтроки Цикл
				
				ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева);
				
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьДеревоСпецификаций(Параметры, Дерево);
			
		КонецЕсли;
		
		Параметры.ДинамическоеСчитывание = Истина;
		
		Если Параметры.СохранятьДанные Тогда
			
			Форма.АдресДереваСпецификацийВХранилище = ЗакэшироватьСтруктуруДереваСпецификаций(
				Параметры, 
				Дерево, 
				Форма.УникальныйИдентификатор);
				
		КонецЕсли;
		
	Иначе
		
		Дерево = Форма.РеквизитФормыВЗначение("ДеревоСпецификаций");
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Получает подчиненные элементы строки дерева спецификаций
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные текущей строки
//  АдресВХранилище		 - Строка	 - адрес дерева спецификаций во временном хранилище
//  ОбновитьДанныеСтроки - Булево	 - признак, принудительно обновляет данные в кеше.
// 
// Возвращаемое значение:
//   - Массив - подчиненные элементы строки дерева спецификаций.
//
Функция ДеревоСпецификацийПрочитатьЭлементы(ТекущаяСтрока, АдресВХранилище, ОбновитьДанныеСтроки = Ложь) Экспорт

	КоллекцияЭлементов = Новый Массив;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СтруктураДерева = ПолучитьИзВременногоХранилища(АдресВХранилище); // см. СтруктураДереваСпецификаций
	
	КэшНеэффективен = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) > 200;
	
	Если СтруктураДерева <> Неопределено Тогда
		
		Параметры = СтруктураДерева.Параметры;
		Дерево    = СтруктураДерева.Дерево;
		
		ДеревоИзменено = Ложь;
		
		Если Параметры.СохранятьДанные Тогда
			
			СтрокаДерева = Дерево.Строки.Найти(ТекущаяСтрока.Идентификатор, "Идентификатор", Истина); 
			
			Если СтрокаДерева <> Неопределено
				И ОбновитьДанныеСтроки Тогда
				
				ЗаполнитьЗначенияСвойств(
					СтрокаДерева,
					ТекущаяСтрока,
					"Номенклатура,Характеристика,Количество,Упаковка,КоличествоУпаковок,ЕстьСпецификация,Спецификация");
				СтрокаДерева.СпецификацияПрочитана = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаДерева = Дерево.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				СтрокаДерева,
				ТекущаяСтрока,
				,
				"СпецификацияПрочитана");
			
		КонецЕсли;
		
		Если СтрокаДерева <> Неопределено Тогда
			
			Если Не СтрокаДерева.СпецификацияПрочитана Тогда
			
				ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева);
				
				ДеревоИзменено = Параметры.СохранятьДанные;
				
			КонецЕсли;
		
			СтрокаДереваСпецификацийВМассивСтруктур(СтрокаДерева, КоллекцияЭлементов);
			
		КонецЕсли;
		
		Если Параметры.СохранятьДанные 
			И КэшНеэффективен Тогда 
			
			Дерево.Строки.Очистить();
			ДеревоИзменено = Истина;
			
			Параметры.СохранятьДанные = Ложь;
			
		КонецЕсли;
		
		Если ДеревоИзменено Тогда
			
			ЗакэшироватьСтруктуруДереваСпецификаций(Параметры, Дерево, АдресВХранилище);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоллекцияЭлементов;
	
КонецФункции

// Изменяет спецификацию в строке дерева спецификаций
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения  - управляемая форма, на которой расположено дерево спецификаций
//  Параметры - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДереваСпецификаций
//  ТекущиеДанные - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
//
Процедура ИзменитьСпецификациюВСтрокеДерева(Форма, Параметры, ТекущиеДанные) Экспорт

	Если Параметры.ДинамическоеСчитывание Тогда
		
		ТекущиеДанныеСтруктурой = УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой(ТекущиеДанные);
		
		АдресВХранилище = Форма.АдресДереваСпецификацийВХранилище;
		ОбновитьДанныеСтроки = Истина;
		
		КоллекцияЭлементов = ДеревоСпецификацийПрочитатьЭлементы(ТекущиеДанныеСтруктурой, АдресВХранилище, ОбновитьДанныеСтроки);
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ДеревоСпецификацийВывестиЭлементы(ТекущиеДанные, КоллекцияЭлементов);
		
	Иначе
		
		Дерево = Форма.РеквизитФормыВЗначение("ДеревоСпецификаций");
		
		СтрокаДерева = Дерево.Строки.Найти(ТекущиеДанные.Идентификатор, "Идентификатор", Истина);
		
		ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева);
		
		Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСпецификаций");
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет реквизиты строки дерева
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения  - управляемая форма, на которой расположено дерево спецификаций
//  ТекущиеДанные - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
//
Процедура ОбновитьРеквизитыСтрокиДереваВХранилище(Форма, ТекущиеДанные) Экспорт
	
	АдресВХранилище = Форма.АдресДереваСпецификацийВХранилище;
	
	СтруктураДерева = ПолучитьИзВременногоХранилища(АдресВХранилище); // см. СтруктураДереваСпецификаций
	
	Если СтруктураДерева <> Неопределено Тогда
		
		Параметры = СтруктураДерева.Параметры;
		Дерево    = СтруктураДерева.Дерево;
		
		СтрокаДерева = Дерево.Строки.Найти(ТекущиеДанные.Идентификатор, "Идентификатор", Истина); 
		
		Если СтрокаДерева <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(
				СтрокаДерева,
				ТекущиеДанные,
				"Номенклатура,Характеристика,Количество,Упаковка,КоличествоУпаковок,ЕстьСпецификация,Спецификация");
			СтрокаДерева.СпецификацияПрочитана = Ложь;
			
			ЗакэшироватьСтруктуруДереваСпецификаций(Параметры, Дерево, АдресВХранилище);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рекурсивного добавления строк в дерево спецификации.
//
// Параметры:
//  Параметры					 - Структура - структура параметров
//  Дерево						 - ДеревоЗначений	 - заполняемое дерево значений
//  СтрокаДерева				 - СтрокаДереваЗначений	 - строка, в которую добавляются строки
//  ИспользованныеСпецификации	 - Массив				 - массив использованных спецификаций
//  КлючСвязи					 - УникальныйИдентификатор	 - ключ связи.
//
Процедура ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева, ИспользованныеСпецификации = Неопределено, КлючСвязи = Неопределено) Экспорт
	
	Если СтрокаДерева <> Неопределено Тогда
		
		СтрокаДерева.Строки.Очистить();
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.Спецификация) Тогда
			Возврат;
		КонецЕсли;
		
		НоменклатураРодителя = СтрокаДерева.Номенклатура;
		ХарактеристикаРодителя = СтрокаДерева.Характеристика;
		СпецификацияРодителя = СтрокаДерева.Спецификация;
		
		Если СтрокаДерева.Количество = 0 Тогда
			
			ДанныеОсновногоИзделия = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
				СпецификацияРодителя,
				НоменклатураРодителя,
				ХарактеристикаРодителя);
			
			Если ДанныеОсновногоИзделия.Номенклатура.Пустая() Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеОсновногоИзделия, "Количество,КоличествоУпаковок,Упаковка");
			
		КонецЕсли;
		
		КоличествоРодителя = СтрокаДерева.Количество;
		
		ЕстьСпецификация = СтрокаДерева.ЕстьСпецификация;
		
	Иначе
		
		ДанныеОсновногоИзделия = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(Параметры.Спецификация);
		
			НоменклатураРодителя   = ДанныеОсновногоИзделия.Номенклатура;
			ХарактеристикаРодителя = ДанныеОсновногоИзделия.Характеристика;
			КоличествоРодителя     = ДанныеОсновногоИзделия.Количество;
		
		СпецификацияРодителя = Параметры.Спецификация;
		ЕстьСпецификация = Истина;
		
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева;
	
	ПолучатьВыходныеИзделия = Параметры.ВыводитьВыходныеИзделия
		ИЛИ (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпецификацияРодителя, "ТипПроизводственногоПроцесса") = Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	ПереченьДанных = ПереченьДанныхСпецификацииДерева(
		Параметры.ВыводитьЭтапы,
		Параметры.ВыводитьТрудозатраты);
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(ПереченьДанных);
	ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска = Новый Структура("Использовать,ВыпускПроизвольнымиПорциями",Истина,Истина);
	ПараметрыВыборки.ПолучитьПредставления                 = Истина;
	ПараметрыВыборки.УчитыватьВероятностьБрака             = Ложь;
	ПараметрыВыборки.ОкруглятьКоличествоШтучныхТоваров     = Ложь;
	ПараметрыВыборки.ПолучитьДанныеНаборов                 = Ложь;
	ПараметрыВыборки.ВариантЗаполненияОбеспечения          = ?(Параметры.ВыводитьОстаткиТоваров,
																	Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения,
																	Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.НеЗаполнять);
	ПараметрыВыборки.СпособРасчетаМатериалов               = Перечисления.СпособыРасчетаМатериалов.МаксимальноеПотребление;
	
	// Список для проверки зацикливания.
	Если Не Параметры.ДинамическоеСчитывание И ИспользованныеСпецификации = Неопределено Тогда
		ИспользованныеСпецификации = Новый Массив();
	КонецЕсли;
	
	// Ресурсная спецификация или спецификация заказа на производство
	Если Не ЭтоАдресВременногоХранилища(Параметры.АдресВХранилище) Тогда
		
		Если СтрокаДерева = Неопределено ИЛИ СтрокаДерева.СтруктураДанных = Неопределено Тогда
		
			ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
			ДанныеПоНоменклатуре.Номенклатура            = НоменклатураРодителя;
			ДанныеПоНоменклатуре.Характеристика          = ХарактеристикаРодителя;
			ДанныеПоНоменклатуре.Спецификация            = СпецификацияРодителя;
			ДанныеПоНоменклатуре.Количество              = КоличествоРодителя;
			ДанныеПоНоменклатуре.НачалоПроизводства      = Параметры.Дата;
			ДанныеПоНоменклатуре.ПодразделениеДиспетчер  = Параметры.ПодразделениеДиспетчер;
			ДанныеПоНоменклатуре.НаправлениеДеятельности = Параметры.НаправлениеДеятельности;
			
			СтруктураДанных = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки);
			
		Иначе
			
			СтруктураДанных = СтрокаДерева.СтруктураДанных;
			
		КонецЕсли;
		Режим = УправлениеДаннымиОбИзделияхКлиентСервер.РежимДеревоСпецификаций();
		
	Иначе
		
		СтруктураДанных = ПолучитьДанныеСпецификацииЗаказа(Параметры.АдресВХранилище, КлючСвязи);
		Режим = УправлениеДаннымиОбИзделияхКлиентСервер.РежимДеревоСпецификацийЗаказа();
		
	КонецЕсли;
	
	ВыводитьЭтапы                = Параметры.ВыводитьЭтапы И СтруктураДанных.Этапы.Количество() > 0;
	ВыводитьОперации             = ВыводитьЭтапы И Параметры.ВыводитьОперации И ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях");
	ВыводитьЗаголовкиГруппировок = Параметры.ВыводитьЗаголовкиГруппировок;
	
	// Подготовка данных для вывода строк
	Если Не ВыводитьЭтапы Тогда
		
		// МатериалыИУслуги
		МатериалыИУслуги = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(
			СтруктураДанных.МатериалыИУслуги,
			"Номенклатура,
			|ТипНоменклатуры,
			|Характеристика,
			|ХарактеристикиИспользуются,
			|ЕдиницаИзмерения,
			|Упаковка,
			|ПроизводитсяВПроцессе,
			|СпособПолученияМатериала,ИсточникПолученияПолуфабриката, СпецификацияРемонта"
			+ ?(Параметры.ВыводитьОстаткиТоваров, ",Склад",""),
			"СпособАвтовыбораНоменклатуры,
			|СпособАвтовыбораХарактеристики,
			|ПрименениеМатериалаРедактирование,
			|КлючСвязи",
			"Количество,КоличествоУпаковок");
		МатериалыИУслуги.Колонки.Добавить("ВложеннаяСпецификация");
		
		Если ПолучатьВыходныеИзделия Тогда
		
			// ВыходныеИзделия
			ВыходныеИзделия = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(
				СтруктураДанных.ВыходныеИзделия,
				"Номенклатура,
				|Характеристика, ХарактеристикиИспользуются,
				|ЕдиницаИзмерения,
				|Упаковка,
				|ОбработатьПоСпецификации, Спецификация",,
				"Количество,КоличествоУпаковок");
			ВыходныеИзделия.Колонки.Добавить("ВложеннаяСпецификация");
			
			// ВозвратныеОтходы
			ВозвратныеОтходы = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(
				СтруктураДанных.ВозвратныеОтходы,
				"Номенклатура,
				|Характеристика, ХарактеристикиИспользуются,
				|ЕдиницаИзмерения,
				|Упаковка,
				|ОбработатьПоСпецификации, Спецификация",,
				"Количество,КоличествоУпаковок");
			ВозвратныеОтходы.Колонки.Добавить("ВложеннаяСпецификация");
		
		КонецЕсли;
		
		// Трудозатраты
		Если Параметры.ВыводитьТрудозатраты Тогда
			Трудозатраты = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(СтруктураДанных.Трудозатраты, "ВидРабот, ЕдиницаИзмерения",, "Количество");
		КонецЕсли;
		
	Иначе
		
		// МатериалыИУслуги
		МатериалыИУслуги = СтруктураДанных.МатериалыИУслуги;
		МатериалыИУслуги.Колонки.Добавить("ВложеннаяСпецификация");
		
		Если ПолучатьВыходныеИзделия Тогда
		
			// ВыходныеИзделия
			ВыходныеИзделия = СтруктураДанных.ВыходныеИзделия;
			ВыходныеИзделия.Колонки.Добавить("ВложеннаяСпецификация");
			
			// ВозвратныеОтходы
			ВозвратныеОтходы = СтруктураДанных.ВозвратныеОтходы;
			ВозвратныеОтходы.Колонки.Добавить("ВложеннаяСпецификация");
		
		КонецЕсли;
		
		// Трудозатраты
		Если Параметры.ВыводитьТрудозатраты Тогда
			Трудозатраты = СтруктураДанных.Трудозатраты;
		КонецЕсли;
		
	КонецЕсли;
	
	ПустаяСсылкаЭтап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
	НаборСтрок = Новый Структура;
	НаборСтрок.Вставить("ВыходныеИзделия", Новый Соответствие);
	НаборСтрок.Вставить("МатериалыИУслуги", Новый Соответствие);
	НаборСтрок.Вставить("Трудозатраты", Новый Соответствие);
	НаборСтрок.Вставить("Операции", Новый Соответствие);
	Если ВыводитьЭтапы Тогда
		Для каждого Строка Из СтруктураДанных.Этапы Цикл
			НаборСтрок["ВыходныеИзделия"].Вставить(Строка.Этап, Новый Массив);
			НаборСтрок["МатериалыИУслуги"].Вставить(Строка.Этап, Новый Массив);
			НаборСтрок["Трудозатраты"].Вставить(Строка.Этап, Новый Массив);
			НаборСтрок["Операции"].Вставить(Строка.Этап, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	НаборСтрок["ВыходныеИзделия"].Вставить(ПустаяСсылкаЭтап, Новый Массив);
	НаборСтрок["МатериалыИУслуги"].Вставить(ПустаяСсылкаЭтап, Новый Массив);
	НаборСтрок["Трудозатраты"].Вставить(ПустаяСсылкаЭтап, Новый Массив);
	НаборСтрок["Операции"].Вставить(ПустаяСсылкаЭтап, Новый Массив);
	
	Если ПолучатьВыходныеИзделия Тогда
		Для каждого Строка Из ВыходныеИзделия Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			Если Строка.ОбработатьПоСпецификации Тогда
				Строка.ВложеннаяСпецификация = Строка.Спецификация;
			КонецЕсли;
			ЕстьВложеннаяСпецификацияВСтроке = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
			Если Параметры.ВыводитьВыходныеИзделия ИЛИ ЕстьВложеннаяСпецификацияВСтроке Тогда
				Если (Строка.Номенклатура = НоменклатураРодителя И Строка.Характеристика = ХарактеристикаРодителя)
					ИЛИ СтруктураДанных.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.ВидНоменклатуры Тогда
					Продолжить;
				КонецЕсли;
				МассивСтрок = НаборСтрок["ВыходныеИзделия"][ТекущийЭтап]; // Массив
				МассивСтрок.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Для каждого Строка Из ВозвратныеОтходы Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			Если Строка.ОбработатьПоСпецификации Тогда
				Строка.ВложеннаяСпецификация = Строка.Спецификация;
			КонецЕсли;
			ЕстьВложеннаяСпецификацияВСтроке = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
			Если Параметры.ВыводитьВыходныеИзделия ИЛИ ЕстьВложеннаяСпецификацияВСтроке Тогда
				МассивСтрок = НаборСтрок["ВыходныеИзделия"][ТекущийЭтап]; // Массив
				МассивСтрок.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если МатериалыИУслуги.Количество() > 0 Тогда
		
		МассивСтрок = Новый Массив;
		МассивДанных = Новый Массив;
		Для каждого Строка Из МатериалыИУслуги Цикл
			
			Если Строка.ПроизводитсяВПроцессе Тогда
				Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
					Строка.ВложеннаяСпецификация = Строка.ИсточникПолученияПолуфабриката;
				ИначеЕсли Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе Тогда
					Строка.ВложеннаяСпецификация = Строка.СпецификацияРемонта;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
				Если УправлениеДаннымиОбИзделияхПовтИсп.ДоступноХранениеСоставаНабораВСпецификациях() Тогда
					Строка.ВложеннаяСпецификация = Строка.ИсточникПолученияПолуфабриката;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеОбИзделиях = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
			ДанныеОбИзделиях.Номенклатура            = Строка.Номенклатура;
			ДанныеОбИзделиях.Характеристика          = Строка.Характеристика;
			ДанныеОбИзделиях.НачалоПроизводства      = Параметры.Дата;
			ДанныеОбИзделиях.ПодразделениеДиспетчер  = Параметры.ПодразделениеДиспетчер;
			ДанныеОбИзделиях.НаправлениеДеятельности = Параметры.НаправлениеДеятельности;
			
			МассивСтрок.Добавить(Строка);
			МассивДанных.Добавить(ДанныеОбИзделиях);
			
		КонецЦикла;
		
		ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
		ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных, ПараметрыВыбораСпецификаций, "ВложеннаяСпецификация", Истина);
		
		Для каждого Строка Из МатериалыИУслуги Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			ЕстьВложеннаяСпецификацияВСтроке = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
			Если Параметры.ВыводитьМатериалы ИЛИ ЕстьВложеннаяСпецификацияВСтроке Тогда
				МассивСтрок = НаборСтрок["МатериалыИУслуги"][ТекущийЭтап]; // Массив
				МассивСтрок.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.ВыводитьТрудозатраты Тогда
		Для каждого Строка Из Трудозатраты Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			МассивСтрок = НаборСтрок["Трудозатраты"][ТекущийЭтап]; // Массив
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Если ВыводитьЭтапы Тогда
		Для каждого Строка Из СтруктураДанных.Операции Цикл
			ТекущийЭтап = Строка.Этап;
			МассивСтрок = НаборСтрок["Операции"][ТекущийЭтап]; // Массив
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	// Вывод строк
	УсловиеЦикла                = Истина;
	ИндексСтрокиПервогоЭтапа    = 0;
	ИндексСтрокиПоследнегоЭтапа = 0;
	Если ВыводитьЭтапы Тогда
		НаправлениеУбыв = СтруктураДанных.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка;
		Если НаправлениеУбыв Тогда
			ИндексСтрокиПервогоЭтапа    = -СтруктураДанных.Этапы.Количество()+1;
		Иначе
			ИндексСтрокиПоследнегоЭтапа = СтруктураДанных.Этапы.Количество()-1;
		КонецЕсли;
	КонецЕсли;
	ИндексСтрокиЭтапа = ИндексСтрокиПервогоЭтапа;
	
	ОтборПроизводитсяВПроцессе = Новый Структура("ПроизводитсяВПроцессе", Истина);
	
	Если Параметры.ВыводитьОстаткиТоваров Тогда
	
		ОстаткиТоваров = ТекущиеОстаткиПоСпискуНоменклатуры(МатериалыИУслуги);
		ОстаткиТоваров.Индексы.Добавить("Номенклатура, Характеристика, Склад");
		СтруктураПоискаОстаткиТоваров = Новый Структура("Номенклатура, Характеристика, Склад");
	
	КонецЕсли;
	
	// Цикл по этапам, выводим, если требуется, иначе за один проход выводим все.
	Пока УсловиеЦикла Цикл
		
		Если ВыводитьЭтапы Тогда
			
			// Вывод строки Этап.
			Если ИндексСтрокиЭтапа > ИндексСтрокиПоследнегоЭтапа Тогда
				УсловиеЦикла = Ложь;
				Продолжить;
			КонецЕсли;
			
			ДанныеЭтапа = СтруктураДанных.Этапы[Макс(ИндексСтрокиЭтапа,-ИндексСтрокиЭтапа)];
			ТекущийЭтап = ДанныеЭтапа.Этап;
			
			Если СтрокаДерева = Неопределено Тогда
				СтрокаРодитель = Дерево.Строки.Добавить(); // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
			Иначе
				СтрокаРодитель = СтрокаДерева.Строки.Добавить();
			КонецЕсли;
			
			СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаРодитель.Номенклатура = ДанныеЭтапа.Этап;
			СтрокаРодитель.Спецификация = ДанныеЭтапа.МаршрутнаяКарта;
			СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Этап;
			СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			
		Иначе
			
			// Подготовка коллекций комплектующих, изделий и трудозатрат по всем этапам.
			УсловиеЦикла = Ложь;
			ТекущийЭтап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
			
		КонецЕсли;
		
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаЭтап = Дерево;
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаЭтап = СтрокаРодитель;
		КонецЕсли;
		
		// Вывод строк выходных изделий.
		МассивСтрок = НаборСтрок["ВыходныеИзделия"][ТекущийЭтап];
		Если ВыводитьЭтапы И ИндексСтрокиЭтапа = ИндексСтрокиПоследнегоЭтапа Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, НаборСтрок["ВыходныеИзделия"][ПустаяСсылкаЭтап]);
		КонецЕсли;
		КоличествоВыходныхИзделий = МассивСтрок.Количество();
		Если (Параметры.ВыводитьВыходныеИзделия ИЛИ КоличествоВыходныхИзделий > 0)
			И ЕстьСпецификация Тогда
			
			// Вывод строки "Выходные изделия".
			Если КоличествоВыходныхИзделий > 0 И ВыводитьЗаголовкиГруппировок Тогда
				СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
				СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
				СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия +
					" (" + (КоличествоВыходныхИзделий) + ")";
				СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия;
				СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			КонецЕсли;
			
			// Вывод строк выходных изделий и разузлование по спецификации.
			Для каждого Строка Из МассивСтрок Цикл
				
				НоваяСтрока = СтрокаРодитель.Строки.Добавить(); // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
				
				НоваяСтрока.Спецификация = Строка.ВложеннаяСпецификация;
				НоваяСтрока.ПроизводитсяВПроцессе = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
				
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки, НоваяСтрока.ПроизводитсяВПроцессе);
				
			КонецЦикла;
			
			МассивСтрокРазузловать = СтрокаРодитель.Строки.НайтиСтроки(ОтборПроизводитсяВПроцессе);
			Если МассивСтрокРазузловать.ВГраница() <> -1
				И Режим = УправлениеДаннымиОбИзделияхКлиентСервер.РежимДеревоСпецификаций() Тогда
				
				Если НЕ Параметры.ДинамическоеСчитывание Тогда
					ЗаполнитьДанныеСпецификацииСтрокДерева(Параметры, МассивСтрокРазузловать, ПараметрыВыборки);
				КонецЕсли;
				
				Для Индекс = 0 По МассивСтрокРазузловать.ВГраница() Цикл
					ПродолжитьРазузлованиеПоСтрокеДерева(Параметры, Дерево, МассивСтрокРазузловать[Индекс], ИспользованныеСпецификации);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод строк материалов.
		МассивСтрок = НаборСтрок["МатериалыИУслуги"][ТекущийЭтап];
		Если ВыводитьЭтапы И ИндексСтрокиЭтапа = ИндексСтрокиПервогоЭтапа Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, НаборСтрок["МатериалыИУслуги"][ПустаяСсылкаЭтап]);
		КонецЕсли;
		КоличествоМатериалов = МассивСтрок.Количество();
		Если (Параметры.ВыводитьМатериалы ИЛИ КоличествоМатериалов > 0)
			И ЕстьСпецификация Тогда
			
			// Вывод строки "Материалы и услуги".
			Если КоличествоМатериалов > 0 И ВыводитьЗаголовкиГруппировок Тогда
				СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
				СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
				СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги +
					" (" + КоличествоМатериалов + ")";
				СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги;
				СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			КонецЕсли;
		
			// Вывод строк материалов и разузлование по спецификации.
			МассивСтрокРазузловать = Новый Массив;
			МассивКлючейСвязи      = Новый Массив;
			Для каждого Строка Из МассивСтрок Цикл
				
				НоваяСтрока = СтрокаРодитель.Строки.Добавить(); // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал;
				
				НоваяСтрока.Спецификация = Строка.ВложеннаяСпецификация;
				НоваяСтрока.ПроизводитсяВПроцессе = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
				
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки, НоваяСтрока.ПроизводитсяВПроцессе);
				
				Если НоваяСтрока.ПроизводитсяВПроцессе
					И Режим = УправлениеДаннымиОбИзделияхКлиентСервер.РежимДеревоСпецификаций() Тогда
					МассивСтрокРазузловать.Добавить(НоваяСтрока);
					МассивКлючейСвязи.Добавить(Строка.КлючСвязи);
				КонецЕсли;
				
				Если Параметры.ВыводитьОстаткиТоваров Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаОстаткиТоваров, НоваяСтрока);
					МассивСкладскихОстатков = ОстаткиТоваров.НайтиСтроки(СтруктураПоискаОстаткиТоваров);
					Если МассивСкладскихОстатков.Количество() > 0 Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивСкладскихОстатков[0]);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивСтрокРазузловать.ВГраница() <> -1 Тогда
			
				Если НЕ Параметры.ДинамическоеСчитывание Тогда
					ЗаполнитьДанныеСпецификацииСтрокДерева(Параметры, МассивСтрокРазузловать, ПараметрыВыборки);
				КонецЕсли;
				
				Для Индекс = 0 По МассивСтрокРазузловать.ВГраница() Цикл
					ПродолжитьРазузлованиеПоСтрокеДерева(
						Параметры, Дерево, МассивСтрокРазузловать[Индекс], ИспользованныеСпецификации, МассивКлючейСвязи[Индекс]);
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
	
		// Вывод строк трудозатрат.
		МассивСтрок = НаборСтрок["Трудозатраты"][ТекущийЭтап];
		Если ВыводитьЭтапы И ИндексСтрокиЭтапа = ИндексСтрокиПервогоЭтапа Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, НаборСтрок["Трудозатраты"][ПустаяСсылкаЭтап]);
		КонецЕсли;
		КоличествоТрудозатрат = МассивСтрок.Количество();
		Если Параметры.ВыводитьТрудозатраты И ЕстьСпецификация И КоличествоТрудозатрат > 0 Тогда
			
			Если КоличествоТрудозатрат > 0 И ВыводитьЗаголовкиГруппировок Тогда
				СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
				СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
				СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты;
				СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
				СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты + " (" + КоличествоТрудозатрат + ")";
			КонецЕсли;
			
			Для Каждого Строка Из МассивСтрок Цикл
				НоваяСтрока = СтрокаРодитель.Строки.Добавить(); // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.КоличествоУпаковок = Строка.Количество;
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.Номенклатура = Строка.ВидРабот;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата;
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывод строк операций.
		МассивСтрок = НаборСтрок["Операции"][ТекущийЭтап];
		КоличествоОпераций = МассивСтрок.Количество();
		Если ВыводитьОперации И КоличествоОпераций > 0 Тогда
			
			Если ВыводитьЗаголовкиГруппировок Тогда
				СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
				СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
				СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Операции;
				СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
				СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.Операции + " (" + КоличествоОпераций + ")";
			КонецЕсли;
			
			Для Каждого Строка Из МассивСтрок Цикл
				НоваяСтрока = СтрокаРодитель.Строки.Добавить(); // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Операция;
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки);
				НоваяСтрока.Номенклатура = Строка.Операция;
				НоваяСтрока.КоличествоУпаковок = Строка.КоличествоНаПартию;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(Неопределено, 0, Истина);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ИндексСтрокиЭтапа = ИндексСтрокиЭтапа + 1;
		
	КонецЦикла;
	
	Если СтрокаДерева <> Неопределено
		И СтрокаДерева.ЕстьСпецификация Тогда
		СтрокаДерева.СпецификацияПрочитана = Истина;
		СтрокаДерева.СтруктураДанных = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования условного оформления дерева спецификаций.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - структура параметров.
//
Процедура НастроитьУсловноеОформлениеДереваСпецификаций(УсловноеОформление) Экспорт
	
	// Упаковки.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийЕдиницаИзмерения");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Упаковка");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Выделение жирным строк с наименованием этапа.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыСтрокДереваСпецификаций.Этап;
	
	// Только просмотр.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийСпецификация");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ВидыСтрок = Новый СписокЗначений;
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Этап);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Операции);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Операция);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ВидыСтрок;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийКоличествоУпаковок");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийУпаковка");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
	
	// Использование характеристик.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<характеристики не используются>';
																					|en = '<variants are not used>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ХарактеристикиИспользуются");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ВидыСтрок = Новый СписокЗначений;
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Материал);
	ВидыСтрок.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ВидыСтрок;
	
	// Использование характеристик для номенклатуры.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<любая характеристика>';
																					|en = '<any variant>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ХарактеристикиИспользуются");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Номенклатура и характеристика уточняется при производстве.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<уточняется при производстве>';
																					|en = '<specified during production>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<уточняется при производстве>';
																					|en = '<specified during production>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	// Номенклатура и характеристика уточняется с учетом свойств.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<указывается в свойстве основного изделия>';
																					|en = '<specified in the property of the main product>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<подбирается по свойствам>';
																					|en = '<picked by properties>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<подбирается по алгоритму>';
																					|en = '<picked by algorithm>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму;
	
	// Для спецификаций на вид номенклатуры
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийСпецификация");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийУпаковка");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийКоличествоУпаковок");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидНоменклатуры"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры

Функция ТекущиеОстаткиПоСпискуНоменклатуры(ТаблицаМатериалов)

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.Склад КАК Склад
	|ПОМЕСТИТЬ ВТ_Материалы
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Материалы.Номенклатура КАК Номенклатура,
	|	ВТ_Материалы.Характеристика КАК Характеристика,
	|	ВТ_Материалы.Склад КАК Склад,
	|	СУММА(ЕСТЬNULL(РаспределениеЗапасов.ВНаличии, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(РаспределениеЗапасов.Свободно, 0)) КАК Доступно
	|ИЗ
	|	ВТ_Материалы КАК ВТ_Материалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ПО ВТ_Материалы.Номенклатура = РаспределениеЗапасов.Номенклатура
	|			И ВТ_Материалы.Характеристика = РаспределениеЗапасов.Характеристика
	|			И ВТ_Материалы.Склад = РаспределениеЗапасов.Склад
	|			И (РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе))
	|			И (РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Материалы.Номенклатура,
	|	ВТ_Материалы.Характеристика,
	|	ВТ_Материалы.Склад";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаМатериалов", ТаблицаМатериалов);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область МаршрутныеКарты

// Получает маршрутные карты действующие для указанного подразделения на дату начала производства
// Маршрутная карта является действующей, если
//  - у нее статус Действует
//  - период ее действия включает начало производства.
//
// Параметры:
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение за которым закреплено обеспечение изделием
//  НачалоПроизводства	- Дата - дата начала производства, на эту дату спецификация должна быть действующей
//  СтрокаПоиска		- Строка - строка, содержащаяся в наименовании.
//
// Возвращаемое значение:
//   СписокЗначений - свойства, которые можно использовать для автовыбора.
//
Функция ДействующиеМаршрутныеКартыПодразделения(Подразделение, НачалоПроизводства, СтрокаПоиска = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныеКарты.Ссылка КАК МаршрутнаяКарта,
	|	МаршрутныеКарты.Представление КАК МаршрутнаяКартаПредставление
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|ГДЕ
	|	МаршрутныеКарты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.Действует)
	|	И (МаршрутныеКарты.Подразделение = &Подразделение)
	|	И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныеКарты.НачалоДействия <= &НачалоПроизводства)
	|	И (МаршрутныеКарты.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныеКарты.КонецДействия >= НачалоПериода(&НачалоПроизводства, День))
	|	И &СтрокаПоиска
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутнаяКартаПредставление";
	
	СтрокаПоискаПодстановка = "";
	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("Текст", "%" + СокрЛП(СтрокаПоиска) + "%");
		СтрокаПоискаПодстановка = "И МаршрутныеКарты.Наименование ПОДОБНО &Текст";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &СтрокаПоиска", СтрокаПоискаПодстановка);
	
	Запрос.УстановитьПараметр("Подразделение",      Подразделение);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.МаршрутнаяКарта, Выборка.МаршрутнаяКартаПредставление);
	КонецЦикла;

	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

#Область Автовыбор

// Получает свойства, которые можно использовать для автовыбора
//
// Параметры:
//  ВидИзделий					- СправочникСсылка.ВидыНоменклатуры - набор свойств, которые можно использовать для изделий.
//  ТолькоСвойстваХарактеристик	- Булево - Истина, если нужно получить только свойства характеристик.
//
// Возвращаемое значение:
//   Массив - свойства, которые можно использовать для автовыбора.
//
Функция ПолучитьСвойстваДляАвтовыбора(ВидИзделий, ТолькоСвойстваХарактеристик = Ложь) Экспорт

	ТекстЗапроса = ТекстЗапросаДоступныеСвойстваНоменклатуры(Ложь, НЕ ТолькоСвойстваХарактеристик);
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидИзделий);
	Запрос.УстановитьПараметр("Набор_Справочник_Номенклатура_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	Запрос.УстановитьПараметр("Набор_Справочник_ХарактеристикиНоменклатуры_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Формирует массив описаний функций автовыбора.
// 
// Возвращаемое значение:
//  Массив - массив описаний функций автовыбора, см. СоздатьОписаниеФункцииАвтовыбора
//
// Пример:
//  см. ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры
//
Функция ОписаниеФункцийАвтовыбораХарактеристики() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

// Формирует массив описаний функций автовыбора.
// 
// Возвращаемое значение:
//  Массив - массив описаний функций автовыбора, см. СоздатьОписаниеФункцииАвтовыбора
//
// Пример:
//  Для того чтобы дополнить список функций автовыбора свойства необходимо создать расширение конфигурации,
//  в созданное расширение добавить модуль УправлениеДаннымиОбИзделиях и реализовать следующий код:
//  
//  &Вместо("ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры")
//  Функция ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатурыРасширенный() Экспорт
//
//    Результат = ПродолжитьВызов();
//  
//    Описание = СоздатьОписаниеФункцииАвтовыбора("МояФункцияАвтовыбора",,НСтр("ru = 'Моя функция автовыбора'"));
//
//    Результат.Добавить(Описание);
//
//    Возврат Результат;
//
//  КонецФункции
//
Функция ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РасчетПоФормулам

// Возвращает дерево операторов для конструктора формул
// 
// Возвращаемое значение:
//  ДеревоЗначений - см. РаботаСФормулами.ПолучитьПустоеДеревоОператоров
Функция ПостроитьДеревоОператоров() Экспорт
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ПредставлениеГруппы = НСтр("ru = 'Разделители';
								|en = 'Separators'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Разделители", ПредставлениеГруппы);
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "(", " + "" ("" + ", "(");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, ")", " + "") "" + ", ")");
	
	ПредставлениеГруппы = НСтр("ru = 'Операторы';
								|en = 'Operators'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Операторы", ПредставлениеГруппы);
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "+", " + ", "+");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "-", " - ", "-");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "*", " * ", "*");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "/", " / ", "/");
	
	ПредставлениеГруппы = НСтр("ru = 'Логические операторы и константы';
								|en = 'Logical operators and constants'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "ЛогическиеОператорыИКонстанты", ПредставлениеГруппы);
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<",  " < ",  "<");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, ">",  " > ",  ">");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<=", " <= ", "<=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, ">=", " >= ", ">=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "=",  " = ",  "=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<>", " <> ", "<>");
	
	Идентификатор = "И";
	КонструкцияДляВставки = " " + "И" + " ";
	Представление = НСтр("ru = 'И';
						|en = 'AND'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "ИЛИ";
	КонструкцияДляВставки = " " + "ИЛИ" + " ";
	Представление = НСтр("ru = 'ИЛИ';
						|en = 'OR'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "НЕ";
	КонструкцияДляВставки = " " + "НЕ" + " ";
	Представление = НСтр("ru = 'НЕ';
						|en = 'NOT'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "ИСТИНА";
	КонструкцияДляВставки = " " + "ИСТИНА" + " ";
	Представление = НСтр("ru = 'ИСТИНА';
						|en = 'TRUE'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "ЛОЖЬ";
	КонструкцияДляВставки = " " + "ЛОЖЬ" + " ";
	Представление = НСтр("ru = 'ЛОЖЬ';
						|en = 'FALSE'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	ПредставлениеГруппы = НСтр("ru = 'Числовые функции';
								|en = 'Numeric functions'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "ЧисловыеФункции", ПредставлениеГруппы);
	
	Идентификатор = "Макс";
	ПредставлениеПараметра1 = НСтр("ru = '<Значение 1>';
									|en = '<Value 1>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Значение 2>';
									|en = '<Value 2>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Макс(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Максимум';
						|en = 'Maximum'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 2);
	
	Идентификатор = "Мин";
	ПредставлениеПараметра1 = НСтр("ru = '<Значение 1>';
									|en = '<Value 1>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Значение 2>';
									|en = '<Value 2>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Мин(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Минимум';
						|en = 'Minimum'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 2);
	
	Идентификатор = "Окр";
	ПредставлениеПараметра1 = НСтр("ru = '<Округляемое значение>';
									|en = '<Round value>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Разрядность>';
									|en = '<Bitness>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Окр(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Округление';
						|en = 'Rounding'");
	Пояснение = НСтр("ru = 'Округление к ближайшему числу';
					|en = 'Rounding to the nearest number'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление, Пояснение, 2);
	
	Описание = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеФункцииКонструктораФормулОкрВверх();
	РаботаСФормулами.ДобавитьОператор(
		ГруппаОператоров, Описание.Идентификатор, Описание.КонструкцияДляВставки, Описание.Представление, Описание.Пояснение, 1);
	
	Описание = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеФункцииКонструктораФормулОкрВниз();
	РаботаСФормулами.ДобавитьОператор(
		ГруппаОператоров, Описание.Идентификатор, Описание.КонструкцияДляВставки, Описание.Представление, Описание.Пояснение, 1);
	
	Идентификатор = "Цел";
	КонструкцияДляВставки = "Цел()";
	Представление = НСтр("ru = 'Целая часть';
						|en = 'Integral part'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "Pow";
	ПредставлениеПараметра1 = НСтр("ru = '<Основание>';
									|en = '<Base document>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Показатель>';
									|en = '<Indicator>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Pow(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);;
	Представление = НСтр("ru = 'Степень';
						|en = 'Degree'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 2);
	
	Идентификатор = "Sqrt";
	КонструкцияДляВставки = "Sqrt()";
	Представление = НСтр("ru = 'Квадратный корень';
						|en = 'Square root'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	ПредставлениеГруппы = НСтр("ru = 'Тригонометрические функции';
								|en = 'Trigonometric functions'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "ТригонометрическиеФункции", ПредставлениеГруппы);
	
	Идентификатор = "Sin";
	КонструкцияДляВставки = "Sin()";
	Представление = НСтр("ru = 'Синус';
						|en = 'Sine'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "Cos";
	КонструкцияДляВставки = "Cos()";
	Представление = НСтр("ru = 'Косинус';
						|en = 'Cosine'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "Tan";
	КонструкцияДляВставки = "Tan()";
	Представление = НСтр("ru = 'Тангенс';
						|en = 'Tangent'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	ПредставлениеГруппы = НСтр("ru = 'Строковые функции';
								|en = 'String functions'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "СтроковыеФункции", ПредставлениеГруппы);

	Идентификатор = "Лев";
	ПредставлениеПараметра1 = НСтр("ru = '<Строка>';
									|en = '<String>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Число символов>';
									|en = '<Number of characters>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Лев(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Левая часть строки';
						|en = 'Left part of the string'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "Прав";
	ПредставлениеПараметра1 = НСтр("ru = '<Строка>';
									|en = '<String>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Число символов>';
									|en = '<Number of characters>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Прав(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Правая часть строки';
						|en = 'Right part of the string'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "Сред";
	ПредставлениеПараметра1 = НСтр("ru = '<Строка>';
									|en = '<String>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Начальный номер>';
									|en = '<Starting number>'");
	ПредставлениеПараметра3 = НСтр("ru = '<Число символов>';
									|en = '<Number of characters>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Сред(%1, %2, %3)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2,
		ПредставлениеПараметра3);
	Представление = НСтр("ru = 'Средняя часть строки';
						|en = 'Middle part of the string'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "СтрДлина";
	КонструкцияДляВставки = "СтрДлина()";
	Представление = НСтр("ru = 'Длина строки';
						|en = 'String length'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "СтрНайти";
	ПредставлениеПараметра1 = НСтр("ru = '<Строка>';
									|en = '<String>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Подстрока для поиска>';
									|en = '<Substring for search>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"СтрНайти(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Найти подстроку';
						|en = 'Find substring'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "СтрСравнить";
	ПредставлениеПараметра1 = НСтр("ru = '<Строка 1>';
									|en = '<String 1>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Строка 2>';
									|en = '<String 2>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"СтрСравнить(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Сравнить строки';
						|en = 'Compare strings'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "ВРег";
	КонструкцияДляВставки = "ВРег()";
	Представление = НСтр("ru = 'Верхний регистр';
						|en = 'Uppercase'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "НРег";
	КонструкцияДляВставки = "НРег()";
	Представление = НСтр("ru = 'Нижний регистр';
						|en = 'Lowercase'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	ПредставлениеГруппы = НСтр("ru = 'Функции по работе с датами';
								|en = 'Functions for operations with dates'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "ДатыФункции", ПредставлениеГруппы);
	
	Идентификатор = "Дата";
	ПредставлениеПараметра1 = НСтр("ru = '<Год>';
									|en = '<Year>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Месяц>';
									|en = '<Month>'");
	ПредставлениеПараметра3 = НСтр("ru = '<День>';
									|en = '<Day>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Дата(%1, %2, %3)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2,
		ПредставлениеПараметра3);
	Представление =  НСтр("ru = 'Дата';
							|en = 'Date'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "ТекущаяДата";
	КонструкцияДляВставки = "ТекущаяДата()";
	Представление = НСтр("ru = 'Текущая дата';
						|en = 'Current date'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "День";
	КонструкцияДляВставки = "День()";
	Представление = НСтр("ru = 'День';
						|en = 'Day'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "Месяц";
	КонструкцияДляВставки = "Месяц()";
	Представление = НСтр("ru = 'Месяц';
						|en = 'Month'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "Год";
	КонструкцияДляВставки = "Год()";
	Представление = НСтр("ru = 'Год';
						|en = 'Year'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "НачалоДня";
	КонструкцияДляВставки = "НачалоДня()";
	Представление = НСтр("ru = 'Начало дня';
						|en = 'Day start'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "НачалоМесяца";
	КонструкцияДляВставки = "НачалоМесяца()";
	Представление = НСтр("ru = 'Начало месяца';
						|en = 'Month beginning'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "НачалоГода";
	КонструкцияДляВставки = "НачалоГода()";
	Представление = НСтр("ru = 'Начало года';
						|en = 'Beginning of the year'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "КонецДня";
	КонструкцияДляВставки = "КонецДня()";
	Представление = НСтр("ru = 'Конец дня';
						|en = 'Day end'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "КонецМесяца";
	КонструкцияДляВставки = "КонецМесяца()";
	Представление = НСтр("ru = 'Конец месяца';
						|en = 'End of the month'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "КонецГода";
	КонструкцияДляВставки = "КонецГода()";
	Представление = НСтр("ru = 'Конец года';
						|en = 'End of the year'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	ИмяГруппы = "ПрочиеФункции";
	ПредставлениеГруппы = НСтр("ru = 'Прочие функции';
								|en = 'Other functions'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, ИмяГруппы, ПредставлениеГруппы);
	
	Идентификатор = "?";
	ПредставлениеПараметра1 = НСтр("ru = '<Логическое выражение>';
									|en = '<Logical expression>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Значение если результат условия истина>';
									|en = '<Value if the condition result is true>'");
	ПредставлениеПараметра3 = НСтр("ru = '<Значение если результат условия ложь>';
									|en = '<Value if the condition result is false>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"?(%1, %2, %3)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2,
		ПредставлениеПараметра3);
	Представление = НСтр("ru = 'Условие';
						|en = 'Condition'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 3);
	
	ОписаниеФункций = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеФункцийКонструктораФормул(ИмяГруппы);
	
	Для каждого Описание Из ОписаниеФункций Цикл
		
		РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
			Описание.Идентификатор,
			Описание.КонструкцияДляВставки,
			Описание.Представление,
			Описание.Пояснение);
		
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции

// Возвращает таблицу параметров для расчета по формулам
//
// Параметры:
//  Описание - см. ОписаниеИсточниковДанныхОперандов
//  НаборДанных	 - Массив	 - набор алгоритмов расчета по формулам.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - параметры для расчета по формулам, содержащие:
//  	* ИмяПараметра - Строка - имя параметра
//  	* Ключ - Строка - ключ параметра
//  	* НомерСтроки - Число - номер строки
//  	* ИмяСвойства - Строка - имя свойства
//  	* ДанныеСтроки - Структура - данные строки, из:
//  		** НомерСтроки - Число - номер строки
//  	* Найден - Булево - признак что значение найдено
//  	* Значение - Число - значение параметра
//
Функция ПараметрыДляРасчетаПоФормулам(Описание, НаборДанных) Экспорт
	
	Если Не ЗначениеЗаполнено(НаборДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = Новый ТаблицаЗначений;
	Параметры.Колонки.Добавить("ИмяПараметра");
	Параметры.Колонки.Добавить("Ключ");
	Параметры.Колонки.Добавить("НомерСтроки");
	Параметры.Колонки.Добавить("ИмяСвойства");
	Параметры.Колонки.Добавить("ДанныеСтроки");
	Параметры.Колонки.Добавить("Найден");
	Параметры.Колонки.Добавить("Значение");
	
	Для каждого МассивСтрок Из НаборДанных Цикл
		Для каждого ДанныеСтроки Из МассивСтрок Цикл
			Если ПустаяСтрока(ДанныеСтроки.АлгоритмРасчетаКоличества) Тогда
				ДанныеСтроки.Формула = "";
			Иначе
				ДанныеСтроки.Формула = ТрансляторФормул(ДанныеСтроки, Параметры, Описание);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.Индексы.Добавить("Ключ");
	Параметры.Индексы.Добавить("ИмяПараметра");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает значения параметров для расчета по формулам
//
// Параметры:
//  Менеджер			 - СправочникиМенеджер	 - менеджер справочника
//  ПараметрыДляРасчета	 - см. ПараметрыДляРасчетаПоФормулам
//  ОписаниеИсточников	 - см. Справочники.РесурсныеСпецификации.ОписаниеИсточниковДанныхОперандов
//  ИсточникиДанных		 - Структура  - используется при получении данных источника в менеджере.
// 
// Возвращаемое значение:
//  Структура - из:
//  	* Параметры - Структура - параметры
//  	* АвтоРасчет - Соответствие - строки для авторасчета
//
Функция ДанныеДляРасчетаПоФормулам(Менеджер, ПараметрыДляРасчета, ОписаниеИсточников, ИсточникиДанных) Экспорт

	ДанныеДляРасчета = Новый Структура("Параметры,АвтоРасчет", Новый Структура, Новый Соответствие);
	
	Для каждого ПутьКДанным Из ПараметрыДляРасчета Цикл
		
		Если ПутьКДанным.Найден = Истина Тогда
			ДобавитьПараметрВДанныеДляРасчета(ДанныеДляРасчета, ПутьКДанным.ИмяПараметра, ПутьКДанным.Значение);
			Продолжить;
		КонецЕсли;
		
		Описание = Неопределено;
		Если ПустаяСтрока(ПутьКДанным.Ключ)
			ИЛИ Не ОписаниеИсточников.Свойство(ПутьКДанным.Ключ, Описание) Тогда
			Продолжить;
		КонецЕсли;
		
		Источник = Менеджер.ИсточникДанныхДляРасчетаПоФормулам(ПутьКДанным, ИсточникиДанных);
		Если Не ЗначениеЗаполнено(Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПутьКДаннымСодержитРеквизитИсточника(ПутьКДанным, Описание) Тогда
			
			ДобавитьПараметрВДанныеДляРасчета(
				ДанныеДляРасчета,
				ПутьКДанным.ИмяПараметра,
				Источник[ПутьКДанным.ИмяСвойства],
				ПараметрыДляРасчета);
			ДобавитьСоответствиеДляАвтоРасчета(ДанныеДляРасчета, ПутьКДанным, Источник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из ПараметрыДляРасчета.НайтиСтроки(Новый Структура("Найден")) Цикл
		ДобавитьПараметрВДанныеДляРасчета(ДанныеДляРасчета,Строка.ИмяПараметра);
	КонецЦикла;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Рассчитывает количество в строке по формулам
//
// Параметры:
//  Строка			 - СтрокаТаблицыЗначений - текущая строка
//  ДанныеДляРасчета - см. ДанныеДляРасчетаПоФормулам
//  ИмяПоля			 - Строка				 - имя поля в строке.
// 
// Возвращаемое значение:
//  Булево - количество рассчитано.
//
Функция РассчитатьКоличествоПоФормуле(Строка, ДанныеДляРасчета, ИмяПоля = "Количество") Экспорт
	
	Параметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляРасчета, "Параметры");
	
	Попытка
		
		Строка[ИмяПоля] = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Строка.Формула, Параметры);
		
	Исключение
		
		Строка[ИмяПоля] = 0;
		
		СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеРасчетКоличестваПоФормуле();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось рассчитать формулу: ""%1""
			|по причине: %2';
			|en = 'Cannot calculate formula: ""%1""
			|.Reason: %2'"),
			Строка.АлгоритмРасчетаКоличества,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
			
		Строка.ФормулаОшибкаРасчета = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ДанныеДляРасчета <> Неопределено Тогда
		ОбновитьДанныеАвтоРасчета(Строка, ДанныеДляРасчета, ИмяПоля);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет алгоритм расчета количества, путем сравнения с набором доступных операндов.
//
// Параметры:
// Параметры:
//  Объект - СправочникОбъект.РесурсныеСпецификации, СправочникОбъект.МаршрутныеКарты - проверяемый объект
//  ОписаниеИсточников	 - см. Справочники.РесурсныеСпецификации.ОписаниеИсточниковДанныхОперандов
//  ПараметрыПроверки	 - Структура - структура проверки объекта:
//   * Состав             - Массив    - список проверяемых табличных частей (список структур, содержащих ключи <Имя>, <Представление>)
//   * ВыводитьСообщения  - Булево    - Истина, если нужно выводить сообщения об ошибках
//   * ОчищатьНеНайденные - Булево    - Истина, если нужно очищать формулы содержащие недоступные операнды
//  Отказ				 - Булево - выходной параметр, при ошибки устанавливается в значение Истина.
// 
// Возвращаемое значение:
//  Соответствие - список ошибок (номера строк табличных частей содержащих ошибки).
//
Функция ПроверитьОчиститьАлгоритмРасчетаКоличества(Объект, ОписаниеИсточников, ПараметрыПроверки, Отказ = Ложь) Экспорт
	
	Результат = Новый Соответствие;
	Шаблон = НСтр("ru = 'Алгоритм расчета количества содержит недоступные операнды (список ""%1"", строка %2).';
					|en = 'Quantity calculation algorithm contains unavailable operands (see line %2 of the ""%1"" list).'");
	
	Для каждого СтруктураПроверки Из ПараметрыПроверки.Состав Цикл
		
		Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(Объект[СтруктураПроверки.ИмяТЧ],, "НомерСтроки,АлгоритмРасчетаКоличества", Новый Структура("Формула", ""));
		НаборДанных = Новый Массив;
		НаборДанных.Добавить(Таблица);
		Результат.Вставить(СтруктураПроверки.ИмяТЧ, Новый Массив());
		
		ПараметрыДляРасчета = ПараметрыДляРасчетаПоФормулам(ОписаниеИсточников, НаборДанных);
		
		Для каждого Параметр Из ПараметрыДляРасчета Цикл
			
			Параметр.Найден = Ложь;
			НомерСтроки = Параметр.ДанныеСтроки.НомерСтроки;
			
			Если Результат[СтруктураПроверки.ИмяТЧ].Найти(НомерСтроки) <> Неопределено Тогда
				Продолжить; // в этой строке ошибка уже была найдена
			КонецЕсли;
			
			ОписаниеИсточника = Неопределено; // см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
			Если ЗначениеЗаполнено(Параметр.Ключ) И ОписаниеИсточников.Свойство(Параметр.Ключ, ОписаниеИсточника) Тогда
				
				ТаблицаОперандов = Неопределено;
				НомерСтрокиПараметра = Параметр.НомерСтроки;
				КлючПараметра = Параметр.Ключ;
				
				Если НЕ ПустаяСтрока(ОписаниеИсточника.ИмяТЧ) 
					И ОписаниеИсточников.Свойство(ОписаниеИсточника.ИмяТЧ, ОписаниеИсточника) 
					И ОписаниеИсточника.Свойство("Операнды") Тогда
						ТаблицаОперандов = ОписаниеИсточника.Операнды.Скопировать(Новый Структура("НомерСтроки", НомерСтроки));
						НомерСтрокиПараметра = НомерСтроки;
						КлючПараметра = ОписаниеИсточника.Идентификатор;
				Иначе
					ОписаниеИсточника.Свойство("Операнды", ТаблицаОперандов);
				КонецЕсли;
				
				Если НомерСтрокиПараметра = Неопределено Тогда
					Идентификатор = КлючПараметра+"."+Параметр.ИмяСвойства;
				Иначе
					Идентификатор = КлючПараметра+"["+НомерСтрокиПараметра+"]."+Параметр.ИмяСвойства;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТаблицаОперандов) Тогда
					Найден = ТаблицаОперандов.Найти(Идентификатор, "Идентификатор");
					Если Найден <> Неопределено Тогда
						Если СтруктураПроверки.ИмяТЧ = Параметр.Ключ Тогда
							Если НомерСтроки > Параметр.НомерСтроки Тогда
								Параметр.Найден = Истина;
							КонецЕсли;
						Иначе
							Параметр.Найден = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Параметр.Найден Тогда
				
				Если ПараметрыПроверки.ВыводитьСообщения Тогда
					
					ТекстСообщения = СтрШаблон(Шаблон, СтруктураПроверки.Представление, Формат(НомерСтроки, "ЧГ="));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(СтруктураПроверки.ИмяТЧ, НомерСтроки, СтруктураПроверки.Реквизит);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						,
						Отказ);
					
				КонецЕсли;
				
				Если ПараметрыПроверки.ОчищатьНеНайденные Тогда
					Объект[СтруктураПроверки.ИмяТЧ][НомерСтроки-1].АлгоритмРасчетаКоличества = "";
				КонецЕсли;
				
				Результат[СтруктураПроверки.ИмяТЧ].Добавить(НомерСтроки);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает свойства номенклатуры, которые можно использовать в конструкторе формул
//
// Параметры:
//  ВидыНоменклатуры	 - Массив - виды номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - набор свойств, которые можно использовать в конструкторе формул.
//
Функция ПолучитьСвойстваНоменклатурыДляРасчетаПоФормулам(ВидыНоменклатуры) Экспорт
	
	ТекстЗапроса = ТекстЗапросаДоступныеСвойстваНоменклатуры();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	Запрос.УстановитьПараметр("Набор_Справочник_Номенклатура_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	Запрос.УстановитьПараметр("Набор_Справочник_ХарактеристикиНоменклатуры_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие"));

	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Вид");
	
	Возврат Результат;
	
КонецФункции

// Получает свойства, которые можно использовать в конструкторе формул
//
// Параметры:
//  СписокНаборов - Массив - наборы доп. реквизитов и сведений. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - набор свойств, которые можно использовать в конструкторе формул.
//
Функция ПолучитьСвойстваИсточниковДляРасчетаПоФормулам(СписокНаборов) Экспорт
	
	ТекстЗапроса = ТекстЗапросаДоступныеСвойстваИсточников();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("СписокНаборов", СписокНаборов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Ссылка");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтборПоСвойствам

// Получает свойства для использования в отборах
//
// Параметры:
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры
//  ИсточникиСвойств - Строка - список источников, для которых получаются свойства
//  ТолькоДействующие - Булево - определяет необхдимость включения в выборку только действующих свойств
// 
// Возвращаемое значение:
//  ТаблицаЗначений - свойства для использования в отборах
//
Функция ПолучитьСвойстваДляОтбораПоСвойствам(ВидНоменклатуры, ИсточникиСвойств = "", ТолькоДействующие = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ИсточникиСвойств) Тогда
		СписокИсточников = СтрРазделить(ИсточникиСвойств, ",");
	Иначе
		СписокИсточников = ИсточникиСвойствДляОтбораПоСвойствам();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("Набор_Справочник_Номенклатура_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	Запрос.УстановитьПараметр("Набор_Справочник_ХарактеристикиНоменклатуры_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие"));
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(
		ТекстЗапросаДоступныеСвойстваНоменклатуры(
			ТолькоДействующие,
			СписокИсточников.Найти("Номенклатура") <> Неопределено,
			СписокИсточников.Найти("Характеристика") <> Неопределено));
	
	Если СписокИсточников.Найти("НаправлениеДеятельности") <> Неопределено
		И ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
			
		ТекстыЗапросов.Добавить(ТекстЗапросаДоступныеСвойстваИсточников(ТолькоДействующие));
		
		Запрос.УстановитьПараметр("СписокНаборов", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_НаправленияДеятельности"));
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = РезультатыЗапроса[0].Выгрузить();
	
	Для Индекс = 1 По РезультатыЗапроса.ВГраница() Цикл
		Выборка = РезультатыЗапроса[Индекс].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
		КонецЦикла;
	КонецЦикла;
	
	Результат.Свернуть("Свойство,ТипЗначения,Представление");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Устанавливает условное оформление формы спецификации и маршрутной карты,
//  связанные с автовыбором номенклатуры.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - форма спецификации или маршрутной карты.
//  ИмяОбъекта - Строка           - имя объекта формы
//  ИмяТаблицы - Строка           - имя элемента формы
//
Процедура УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(Форма, ИмяОбъекта, ИмяТаблицы) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	СоответствиеЭлементов = СоответствиеЭлементовТабличныхЧастейСПараметризацией(ИмяТаблицы);
	
	// Номенклатура - ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ИмяТЧ           = СтрЗаменить(Элементы[ИмяТаблицы].ПутьКДанным,ИмяОбъекта+".","");
	ИмяОбъектаИмяТЧ = ИмяОбъекта+"."+ИмяТЧ;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.Номенклатура].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// НоменклатураСтрокой - Отображать
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.НоменклатураСтрокой].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// НоменклатураСтрокой - ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.НоменклатураСтрокой].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Характеристика - Текст
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.Характеристика].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>';
																|en = '<variants are not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Характеристика - ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.Характеристика].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Характеристика - ОтметкаНеЗаполненного
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.Характеристика].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ХарактеристикаСтрокой - Отображать
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.ХарактеристикаСтрокой].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// ХарактеристикаСтрокой - ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СоответствиеЭлементов.ХарактеристикаСтрокой].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
КонецПроцедуры

// Устанавливает условное оформление формы спецификации и маршрутной карты,
//  связанные настройкой использования и расчетом количества.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - форма спецификации или маршрутной карты
//  ИмяОбъекта - Строка                     - имя объекта формы
//  ИмяТаблицы - Строка                     - имя таблицы формы
//  ИмяКолонки - Строка	                    - имя колонки <Количество>.
//
Процедура УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(Форма, ИмяОбъекта, ИмяТаблицы, ИмяКолонки) Экспорт

	ИмяТЧ = СтрЗаменить(Форма.Элементы[ИмяТаблицы].ПутьКДанным,ИмяОбъекта+".","");

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".РасчетПоФормуле");
	Иначе
		ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".РасчетПоФормуле");
	КонецЕсли;
	
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	СоответствиеЭлементов = СоответствиеЭлементовТабличныхЧастейСПараметризацией(ИмяТаблицы);
	
	ПолеФормы = Элементы[СоответствиеЭлементов[ИмяКолонки]]; // ПолеФормы
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<по формуле>';
																|en = '<using formula>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Заполняет реквизиты табличной части, связанные с настройками автовыбора и расчета количества.
//
// Параметры:
//  ТабличнаяЧасть		 - ТабличнаяЧасть	 - табличная часть, для которой нужно заполнить служебные реквизиты
//  ЕстьАвтовыбор		 - Булево			 - признак, используется автовыбор
//  ЕстьРасчетПоФормуле	 - Булево			 - признак, используется расчет количества по формуле.
//  ОтборПоСвойствам     - ТаблицаЗначений - таблица, содержащая настройки отбора по свойствам
//
Процедура ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(ТабличнаяЧасть, ЕстьАвтовыбор, ЕстьРасчетПоФормуле, ОтборПоСвойствам) Экспорт
	
	Оформление = УправлениеДаннымиОбИзделияхКлиентСервер.ТекстыОформленияСпособовАвтовыбора();
	
	Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
		
		Если ЕстьАвтовыбор Тогда
			
			Если ТекущаяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции Тогда
				ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.СвойствоСодержащееНоменклатуру, "Заголовок");
			Иначе
				ЗаголовокСвойства = "";
			КонецЕсли;
			
			ТекущаяСтрока.НоменклатураСтрокой   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														Оформление.Получить(ТекущаяСтрока.СпособАвтовыбораНоменклатуры),
														ЗаголовокСвойства);
			ТекущаяСтрока.ХарактеристикаСтрокой = Оформление.Получить(ТекущаяСтрока.СпособАвтовыбораХарактеристики);
			
		КонецЕсли;
		
		Если ЕстьРасчетПоФормуле Тогда
			
			Если ПустаяСтрока(ТекущаяСтрока.АлгоритмРасчетаКоличества) Тогда
				ТекущаяСтрока.РасчетПоФормуле = Ложь;
			Иначе
				ТекущаяСтрока.РасчетПоФормуле = Истина;
			КонецЕсли;
			ТекущаяСтрока.УстановленОтборПоСвойствам = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи)).Количество() > 0;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция СоответствиеЭлементовТабличныхЧастейСПараметризацией(ИмяТаблицы) Экспорт
	
	Результат = Новый Структура;
	
	Если ИмяТаблицы = "Продукция" Тогда
		
		Результат.Вставить("Номенклатура",          "ПродукцияНоменклатура");
		Результат.Вставить("Характеристика",        "ПродукцияХарактеристика");
		Результат.Вставить("НоменклатураСтрокой",   "ПродукцияНоменклатураСтрокой");
		Результат.Вставить("ХарактеристикаСтрокой", "ПродукцияХарактеристикаСтрокой");
		Результат.Вставить("КоличествоУпаковок",    "ПродукцияКоличествоУпаковок");
		
	ИначеЕсли ИмяТаблицы = "ВыходныеИзделия" Тогда
		
		Результат.Вставить("Номенклатура",          "ВыходныеИзделияНоменклатура");
		Результат.Вставить("Характеристика",        "ВыходныеИзделияХарактеристика");
		Результат.Вставить("НоменклатураСтрокой",   "ВыходныеИзделияНоменклатураСтрокой");
		Результат.Вставить("ХарактеристикаСтрокой", "ВыходныеИзделияХарактеристикаСтрокой");
		Результат.Вставить("КоличествоУпаковок",    "ВыходныеИзделияКоличествоУпаковок");
		
	ИначеЕсли ИмяТаблицы = "ВозвратныеОтходы" Тогда
		
		Результат.Вставить("Номенклатура",          "ВозвратныеОтходыНоменклатура");
		Результат.Вставить("Характеристика",        "ВозвратныеОтходыХарактеристика");
		Результат.Вставить("НоменклатураСтрокой",   "ВозвратныеОтходыНоменклатураСтрокой");
		Результат.Вставить("ХарактеристикаСтрокой", "ВозвратныеОтходыХарактеристикаСтрокой");
		Результат.Вставить("КоличествоУпаковок",    "ВозвратныеОтходыКоличествоУпаковок");
		
	ИначеЕсли ИмяТаблицы = "МатериалыИУслуги" Тогда
		
		Результат.Вставить("Номенклатура",          "МатериалыИУслугиНоменклатура");
		Результат.Вставить("Характеристика",        "МатериалыИУслугиХарактеристика");
		Результат.Вставить("НоменклатураСтрокой",   "МатериалыИУслугиНоменклатураСтрокой");
		Результат.Вставить("ХарактеристикаСтрокой", "МатериалыИУслугиХарактеристикаСтрокой");
		Результат.Вставить("КоличествоУпаковок",    "МатериалыИУслугиКоличествоУпаковок");
		
	ИначеЕсли ИмяТаблицы = "Трудозатраты" Тогда
		
		Результат.Вставить("Количество",            "ТрудозатратыКоличество");
		
	ИначеЕсли ИмяТаблицы = "ВидыРабочихЦентров" Тогда
		
		Результат.Вставить("ВремяРаботы",           "ВидыРабочихЦентровВремяРаботы");
		
	ИначеЕсли ИмяТаблицы = "ЭтапВидыРабочихЦентров" Тогда
		
		Результат.Вставить("ВремяРаботы",           "ЭтапВидыРабочихЦентровВремяРаботы");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Спецификации

#Область СпецификацииНоменклатуры

Функция СписокСпецификацийПоНоменклатуре(ДанныеОбИзделии, ПараметрыВыбораСпецификаций) Экспорт
	
	ДанныеСпецификаций = СпецификацииИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций);
	
	Результат = Новый Массив;
	
	Для каждого ДанныеСпецификации Из ДанныеСпецификаций Цикл
		Результат.Добавить(ДанныеСпецификации.Спецификация);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокСпецификацийПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыбораСпецификаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.ИндексДанных                            КАК ИндексДанных,
	|	Т.Номенклатура                            КАК Номенклатура,
	|	Т.Характеристика                          КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(Т.НачалоПроизводства, ДЕНЬ) КАК НачалоПроизводства,
	|	Т.ПодразделениеДиспетчер                  КАК ПодразделениеДиспетчер,
	|	Т.НаправлениеДеятельности                 КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК Т
	|;
	|
	|ВЫБРАТЬ
	|	Т.*,
	|	Т.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	СписокНоменклатуры КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика
	|;
	|
	|";
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	ПараметрыТекстаЗапроса = ПараметрыТекстаЗапросаСпецификацийИзделий();
	ПараметрыТекстаЗапроса.ИмяВыходнойТаблицы = "ВтСпецификации";
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаСпецификацийИзделий(ПараметрыТекстаЗапроса, ПараметрыВыбораСпецификаций) + "
	|
	|ВЫБРАТЬ
	|	Спецификации.Спецификация КАК Спецификация
	|ИЗ
	|	ВтСпецификации КАК Спецификации
	|
	|СГРУППИРОВАТЬ ПО
	|	Спецификации.Спецификация
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Спецификации.ИндексДанных) В
	|		(ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.ИндексДанных)
	|		ИЗ
	|			ВтСписокНоменклатуры КАК Т)";
	
	УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Спецификация");
	Возврат Результат;
	
КонецФункции

Функция ТаблицаДанныхОбИзделииДляВыбораСпецификации() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИндексДанных",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Результат.Колонки.Добавить("Номенклатура",            Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика",          Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("НачалоПроизводства",      Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Результат.Колонки.Добавить("ПодразделениеДиспетчер",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НаборыМатериаловИРабот

Функция НаборыМатериаловИРаботКонструктор() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ТипыДанных = Новый Массив;
	ТипыДанных.Добавить(Тип("СправочникСсылка.РесурсныеСпецификации"));
	ТипыДанных.Добавить(Тип("СправочникСсылка.ВариантыКомплектацииНоменклатуры"));
	
	Результат.Колонки.Добавить("КлючСвязи",             Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("Спецификация",          Новый ОписаниеТипов(ТипыДанных));
	Результат.Колонки.Добавить("КлючСвязиРодитель",     Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("СпецификацияРодитель",  Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("КоличествоСтрок",       Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КлючСвязиСпецификация", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Результат.Колонки.Добавить("Этап",                  Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

Процедура СкорректироватьТаблицуНаборыМатериаловИРабот(Таблица, СтрокаКлючСвязи, Дельта) Экспорт
	
	Если СтрокаКлючСвязи = Неопределено
		ИЛИ СтрокаКлючСвязи = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор()
		ИЛИ Дельта = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаКлючСвязи) = Тип("УникальныйИдентификатор") Тогда
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаКлючСвязи));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ТекущаяСтрока = НайденныеСтроки[0];
	Иначе
		ТекущаяСтрока = СтрокаКлючСвязи;
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоСтрок = ТекущаяСтрока.КоличествоСтрок + Дельта;
	СкорректироватьТаблицуНаборыМатериаловИРабот(
		Таблица, ТекущаяСтрока.КлючСвязиРодитель, Дельта);
	
	Если Дельта < 0 И ТекущаяСтрока.КоличествоСтрок = 0 Тогда
		Таблица.Удалить(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТаблицуНаборыМатериаловИРабот(Объект, ИсточникМатериалов = "ОбеспечениеМатериаламиИРаботами") Экспорт
	
	Таблица = Объект.НаборыМатериаловИРабот;
	
	Для каждого Строка Из Таблица Цикл
		Строка.КоличествоСтрок = 0;
	КонецЦикла;
	
	Материалы = Объект[ИсточникМатериалов];
	Если ТипЗнч(Материалы) = Тип("ТаблицаЗначений") Тогда
		ТаблицаКлючей = Материалы.Скопировать(,"КлючСвязиНабор,Количество");
	Иначе
		ТаблицаКлючей = Материалы.Выгрузить(,"КлючСвязиНабор,Количество");
	КонецЕсли;
	ТаблицаКлючей.ЗаполнитьЗначения(1, "Количество");
	ТаблицаКлючей.Свернуть("КлючСвязиНабор", "Количество");
	
	Для каждого Строка Из ТаблицаКлючей Цикл
		СкорректироватьТаблицуНаборыМатериаловИРабот(
			Таблица,
			Строка.КлючСвязиНабор,
			Строка.Количество);
	КонецЦикла;
	
	СтрокиУдалить = Таблица.НайтиСтроки(Новый Структура("КоличествоСтрок", 0));
	Для каждого Строка Из СтрокиУдалить Цикл
		Таблица.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция СоставНабораВПроизводствеКонструктор()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("НомерСтроки",    Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КлючСвязи",      Новый ОписаниеТипов("УникальныйИдентификатор"));
	Таблица.Колонки.Добавить("КлючСвязиНабор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Таблица.Колонки.Добавить("ТипНоменклатуры",            Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	Таблица.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	
	Таблица.Колонки.Добавить("Количество",          Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",    Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Таблица.Колонки.Добавить("КоличествоУпаковок",  Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Упаковка",            Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Таблица.Колонки.Добавить("КоэффициентУпаковки", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("Спецификация",          Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Таблица.Колонки.Добавить("СтатьяКалькуляции",     Новый ОписаниеТипов("СправочникСсылка.СтатьиКалькуляции"));
	
	Таблица.Колонки.Добавить("ИспользуетсяАвтовыбор", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СведенияАвтовыбора",    Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ПрименениеМатериала",   Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Производится",          Новый ОписаниеТипов("Булево"));
	
	Таблица.Колонки.Добавить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Колонки.Добавить("Склад",                 Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("ВариантОбеспечения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Таблица.Колонки.Добавить("Обособленно",           Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция ПараметрыПолученияСоставаНабораВПроизводстве() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Номенклатура",             Справочники.Номенклатура.ПустаяСсылка());
	Параметры.Вставить("Характеристика",           Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Параметры.Вставить("Спецификация",             Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Параметры.Вставить("Количество",               0);
	Параметры.Вставить("Распоряжение",             Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	Параметры.Вставить("ПодразделениеДиспетчер",   Справочники.СтруктураПредприятия.ПустаяСсылка());
	Параметры.Вставить("НаправлениеДеятельности",  Справочники.НаправленияДеятельности.ПустаяСсылка());
	Параметры.Вставить("НачалоПроизводства",       Дата(1,1,1));
	
	Параметры.Вставить("СпецификацияРодитель",     Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Параметры.Вставить("ПодразделениеИсполнитель", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Параметры.Вставить("СтатьяКалькуляции",        Справочники.СтатьиКалькуляции.ПустаяСсылка());
	
	Параметры.Вставить("КлючСвязи",                Новый УникальныйИдентификатор());
	Параметры.Вставить("КлючСвязиНабор",           Новый УникальныйИдентификатор());
	
	Возврат Параметры;
	
КонецФункции

Функция СоставНабораВПроизводстве(Параметры) Экспорт
	
	Состав                 = Неопределено;
	НаборыМатериаловИРабот = Неопределено;
	СпецификацияСостава    = Неопределено;
	
	Если УправлениеДаннымиОбИзделияхПовтИсп.ДоступноХранениеСоставаНабораВСпецификациях() Тогда
		
		СпецификацияСостава = Параметры.Спецификация;
		Если НЕ ЗначениеЗаполнено(СпецификацияСостава) Тогда
			
			ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
			ЗаполнитьЗначенияСвойств(ДанныеОбИзделии, Параметры);
			
			РезультатПодбораСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
				ДанныеОбИзделии,
				УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку());
				
			Если ЗначениеЗаполнено(РезультатПодбораСпецификации) Тогда
				СпецификацияСостава = РезультатПодбораСпецификации.Спецификация;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СпецификацияСостава) Тогда
			
			ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
			ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Параметры);
			ДанныеПоНоменклатуре.Спецификация = СпецификацияСостава;
			ДанныеПоНоменклатуре.Вставить("ПодразделениеИсполнитель", Параметры.ПодразделениеИсполнитель);
			
			ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных("МатериалыИУслуги");

			ДанныеСпецификацииНабора = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки);
			
			Состав = СоставНабораВПроизводствеКонструктор();
			Для каждого Строка Из ДанныеСпецификацииНабора.МатериалыИУслуги Цикл
				
				НоваяСтрока = Состав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
			КонецЦикла;
			
			ДанныеСпецификацииНабора.Свойство("НаборыМатериаловИРабот", НаборыМатериаловИРабот);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеДаннымиОбИзделияхПовтИсп.ДоступноХранениеСоставаНабораВВариантахКомплектации() И Состав = Неопределено Тогда
		
		ДанныеВариантаКомплектации = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(
			Параметры.Номенклатура, Параметры.Характеристика);
		Если ЗначениеЗаполнено(ДанныеВариантаКомплектации) Тогда
			
			СпецификацияСостава = ДанныеВариантаКомплектации.ВариантКомплектацииНоменклатуры;
			
			Состав = СоставНабораВПроизводствеКонструктор();
			Для каждого Строка Из ДанныеВариантаКомплектации.Комплектующие Цикл
				
				НоваяСтрока = Состав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество = НоваяСтрока.Количество * Параметры.Количество;
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок * Параметры.Количество;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Состав <> Неопределено Тогда
		
		Для каждого Строка Из Состав Цикл
			Если НЕ ЗначениеЗаполнено(Строка.КлючСвязиНабор) Тогда
				Строка.КлючСвязиНабор = Параметры.КлючСвязиНабор;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.СтатьяКалькуляции) Тогда
				Строка.СтатьяКалькуляции = Параметры.СтатьяКалькуляции;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Подразделение) Тогда
				Строка.Подразделение = Параметры.ПодразделениеИсполнитель;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(СпецификацияСостава) = Тип("СправочникСсылка.ВариантыКомплектацииНоменклатуры") Тогда
			
			ТипыДанных = Новый Массив;
			ТипыДанных.Добавить(Тип("СправочникСсылка.РесурсныеСпецификации"));
			ТипыДанных.Добавить(Тип("СправочникСсылка.ЭтапыПроизводства"));
			Состав.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов(ТипыДанных));
			
			ТаблицаДанныхОбеспечения = ОбеспечениеПроизводства.ПараметрыОбеспеченияМатериаловЭтапа(Состав, Параметры.Распоряжение);
			
			РеквизитыПоиска = "Номенклатура,Характеристика";
			СтруктураПоиска = Новый Структура(РеквизитыПоиска);
			ТаблицаДанныхОбеспечения.Индексы.Добавить(РеквизитыПоиска);
			
			Для каждого Строка Из Состав Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
				НайденныеСтроки = ТаблицаДанныхОбеспечения.НайтиСтроки(СтруктураПоиска);
				Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
					ЗаполнитьЗначенияСвойств(Строка, НайденныеСтроки[0], "Склад,ВариантОбеспечения,Обособленно");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НаборыМатериаловИРабот = Неопределено Тогда
			НаборыМатериаловИРабот = НаборыМатериаловИРаботКонструктор();
		КонецЕсли;
		
		НоваяСтрока = НаборыМатериаловИРабот.Вставить(0);
		НоваяСтрока.КлючСвязи             = Параметры.КлючСвязиНабор;
		НоваяСтрока.Спецификация          = СпецификацияСостава;
		НоваяСтрока.СпецификацияРодитель  = Параметры.СпецификацияРодитель;
		НоваяСтрока.КоличествоСтрок       = Состав.Количество();
		НоваяСтрока.КлючСвязиСпецификация = Параметры.КлючСвязи;
		Для Индекс = 1 По НаборыМатериаловИРабот.Количество() - 1 Цикл
			Строка = НаборыМатериаловИРабот[Индекс];
			Если НЕ ЗначениеЗаполнено(Строка.КлючСвязиРодитель) Тогда
				Строка.КлючСвязиРодитель = НоваяСтрока.КлючСвязи;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Новый Структура("МатериалыИУслуги, НаборыМатериаловИРабот", Состав, НаборыМатериаловИРабот);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ИсключитьМатериалыТехнологическихНаборов(ДанныеСпецификации) Экспорт
	
	Если НЕ ДанныеСпецификации.Свойство("МатериалыИУслуги")
			ИЛИ НЕ ДанныеСпецификации.Свойство("НаборыМатериаловИРабот")
			ИЛИ НЕ УправлениеДаннымиОбИзделияхПовтИсп.ДоступноХранениеСоставаНабораВСпецификациях() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиУдалить = Новый Массив;
	
	Для каждого ТекущаяСтрока Из ДанныеСпецификации.МатериалыИУслуги Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.КлючСвязиНабор) Тогда
			НайденнаяСтрока = ДанныеСпецификации.НаборыМатериаловИРабот.Найти(ТекущаяСтрока.КлючСвязиНабор, "КлючСвязи");
			Если НайденнаяСтрока <> Неопределено
				И (ТипЗнч(НайденнаяСтрока.Спецификация) = Тип("СправочникСсылка.РесурсныеСпецификации")
					ИЛИ ЗначениеЗаполнено(НайденнаяСтрока.КлючСвязиРодитель)) Тогда
				СтрокиУдалить.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиУдалить.Количество() > 0 Тогда
		Для каждого Строка Из СтрокиУдалить Цикл
			ДанныеСпецификации.МатериалыИУслуги.Удалить(Строка);
		КонецЦикла;
		ОбновитьТаблицуНаборыМатериаловИРабот(ДанныеСпецификации, "МатериалыИУслуги");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитВходитВНабор(Объект, ИсточникМатериалов = "ОбеспечениеМатериаламиИРаботами") Экспорт
	
	Для каждого Строка Из Объект[ИсточникМатериалов] Цикл
		
		Строка.ВходитВНабор = ЗначениеЗаполнено(Строка.КлючСвязиНабор);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьУдалениеСтрокВходящихВНаборы(Объект, ИдентификаторыСтрок, ИсточникМатериалов = "ОбеспечениеМатериаламиИРаботами") Экспорт
	
	Для каждого Идентификатор Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Объект[ИсточникМатериалов].НайтиПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(ДанныеСтроки.КлючСвязиНабор) Тогда
			
			СкорректироватьТаблицуНаборыМатериаловИРабот(
				Объект.НаборыМатериаловИРабот, ДанныеСтроки.КлючСвязиНабор, -1);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьКлючиСвязиНабораРекурсивно(Таблица, КлючиСвязиНабор, ПроверяемыеКлючи = Неопределено) Экспорт
	
	НовыеКлючи = Новый Массив;
	
	Для каждого КлючСвязи Из ?(ПроверяемыеКлючи = Неопределено, КлючиСвязиНабор, ПроверяемыеКлючи) Цикл
		Для Индекс = 1 По 2 Цикл
			ПолеПоиска   = ?(Индекс = 1, "КлючСвязи", "КлючСвязиРодитель");
			ПолеЗначения = ?(Индекс = 1, "КлючСвязиРодитель", "КлючСвязи");
			НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура(ПолеПоиска, КлючСвязи));
			Для каждого Строка Из НайденныеСтроки Цикл
				Если КлючиСвязиНабор.Найти(Строка[ПолеЗначения]) = Неопределено И ЗначениеЗаполнено(Строка[ПолеЗначения]) Тогда
					НовыеКлючи.Добавить(Строка[ПолеЗначения]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КлючиСвязиНабор, НовыеКлючи);
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(КлючиСвязиНабор);
	
	Если НовыеКлючи.Количество() > 0 Тогда
		ПолучитьКлючиСвязиНабораРекурсивно(Таблица, КлючиСвязиНабор, НовыеКлючи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСоставНаборовВРезультатПодбораВФоне(Параметры, АдресХранилища) Экспорт
	
	ТаблицаТоваров = Параметры.ТаблицаТоваров; // ТаблицаЗначений
	ТаблицаТоваров.Колонки.Добавить("ДанныеСостава");
	
	РеквизитыСтроки = "Номенклатура,Характеристика,Количество";
	Для каждого ИмяРеквизита Из СтрРазделить("Спецификация,СтатьяКалькуляции,ПодразделениеИсполнитель,КлючСвязи", ",") Цикл
		Если ТаблицаТоваров.Колонки.Найти(ИмяРеквизита) <> Неопределено Тогда
			РеквизитыСтроки = РеквизитыСтроки + ","+ИмяРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		Если НЕ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПолученияСостава = ПараметрыПолученияСоставаНабораВПроизводстве();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияСостава, Параметры.ПараметрыПолученияСостава,,"КлючСвязиНабор,КлючСвязи");
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияСостава, Строка, РеквизитыСтроки);
		
		Строка.ДанныеСостава = СоставНабораВПроизводстве(ПараметрыПолученияСостава);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантПодбора", Параметры.ВариантПодбора);
	Результат.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	Результат.Вставить("ИмяТЧ",          Параметры.ИмяТЧ);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ПараметрыНазначения

//++ НЕ УТКА

Процедура УстановитьПараметрыНазначенияПоПодразделениюДиспетчеру() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Константы.ИспользоватьПараметрыНазначенияСпецификаций.Установить(Истина);
		
		НаборЗаписей = РегистрыСведений.ПараметрыНазначенияСпецификаций.СоздатьНаборЗаписей();
		Запись = НаборЗаписей.Добавить();
		Запись.ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер;
		Запись.Приоритет    = 2;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось записать параметры назначения спецификаций по причине: %Причина%';
								|en = 'Cannot save BOM assignment parameters. Reason: %Причина%'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстСообщения);
			
	КонецПопытки;
	
КонецПроцедуры

Процедура КопироватьЗначенияПараметровНазначенияСпецификации(Источник, Приемник) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.ВидПараметра КАК ВидПараметра,
	|	Т.Реквизит     КАК Реквизит,
	|	Т.НомерВСписке КАК НомерВСписке,
	|	Т.Условие      КАК Условие,
	|	Т.Значение     КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПараметровНазначенияСпецификаций КАК Т
	|ГДЕ
	|	Т.Спецификация = &Спецификация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Спецификация", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Спецификация.Установить(Приемник);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Спецификация = Приемник;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Получает представление параметра назначения спецификаций
//
// Параметры:
//  ВидПараметра  - ПеречислениеСсылка.ВидыПараметровНазначенияСпецификаций - вид параметра
//  Реквизит      - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - дополнительный реквизит
//  ПолноеПредставление - Булево - необходимость получения полного представления (включая вид параметра)
//
// Возвращаемое значение:
//   Строка - представление параметра назначения
//
Функция ПредставлениеПараметраНазначения(ВидПараметра, Реквизит = Неопределено, ПолноеПредставление = Истина) Экспорт
	
	ПредставлениеПодразделениеДиспетчер  = НСтр("ru = 'Подразделение-диспетчер';
												|en = 'Dispatching unit'");
	ПредставлениеНаправлениеДеятельности = НСтр("ru = 'Направление деятельности';
												|en = 'Line of business'");
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер,             ПредставлениеПодразделениеДиспетчер);
	ВидыПараметров.Вставить(Перечисления.ВидыПараметровНазначенияСпецификаций.ДопРеквизитПодразделения,           ПредставлениеПодразделениеДиспетчер);
	ВидыПараметров.Вставить(Перечисления.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности,            ПредставлениеНаправлениеДеятельности);
	ВидыПараметров.Вставить(Перечисления.ВидыПараметровНазначенияСпецификаций.ДопРеквизитНаправленияДеятельности, ПредставлениеНаправлениеДеятельности);
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Реквизит) Тогда
		
		Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизит, "Заголовок");
		
		Если ПолноеПредставление Тогда
		
			Результат = СтрШаблон("%1 (%2)", Заголовок, ВидыПараметров[ВидПараметра]);
			
		Иначе
			
			Результат = Заголовок;
			
		КонецЕсли;
		
	Иначе
		
		Результат = ВидыПараметров[ВидПараметра];
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет корректность заполнения параметра назначения
// 
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификации
//  ВидПараметра  - ПеречислениеСсылка.ВидыПараметровНазначенияСпецификаций - вид параметра
//  Реквизит      - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - дополнительный реквизит
//  СтруктураЗначения - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций
//  ТипЗначения - ОписаниеТипов - тип параметра
//  Отказ - Булево - Отказ
Процедура ПроверитьЗаполнениеПараметраНазначения(Спецификация, ВидПараметра, Реквизит, СтруктураЗначения, ТипЗначения, Отказ) Экспорт
	
	ШаблонНеЗаполнено      = НСтр("ru = 'Не заполнено %1значение параметра ""%2"".';
									|en = 'The %1 value of the ""%2"" parameter is not filled in.'");
	ШаблонНеверныйИнтервал = НСтр("ru = 'Левое значение параметра ""%1"" не может быть больше правого.';
									|en = 'The left value of the parameter ""%1"" cannot be greater than the right value.'");
	
	ЗаполнениеОбязательно = УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнениеЗначенияПараметраНазначенияОбязательно(
		СтруктураЗначения.Условие, ТипЗначения);
	
	Если СтруктураЗначения.Условие.Интервал Тогда
		
		Для Индекс = 1 По 2 Цикл
			Если ЗаполнениеОбязательно И НЕ ЗначениеЗаполнено(СтруктураЗначения["Значение"+Индекс]) Тогда
				ТекстСообщения = СтрШаблон(
					ШаблонНеЗаполнено,
					?(Индекс=1,НСтр("ru = 'левое';
									|en = 'left'"),НСтр("ru = 'правое';
														|en = 'right'"))+" ",
					ПредставлениеПараметраНазначения(ВидПараметра,Реквизит,Ложь));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Спецификация,,,Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураЗначения.Значение1 <> Неопределено
			И СтруктураЗначения.Значение2 <> Неопределено
			И СтруктураЗначения.Значение1 > СтруктураЗначения.Значение2 Тогда
				ТекстСообщения = СтрШаблон(
					ШаблонНеверныйИнтервал,
					ПредставлениеПараметраНазначения(ВидПараметра,Реквизит,Ложь));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Спецификация,,,Отказ);
		КонецЕсли;
		
	Иначе
		
		Если ЗаполнениеОбязательно И НЕ ЗначениеЗаполнено(СтруктураЗначения.Значение) Тогда
			ТекстСообщения = СтрШаблон(
				ШаблонНеЗаполнено,
				"",
				ПредставлениеПараметраНазначения(ВидПараметра,Реквизит,Ложь));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Спецификация,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

Функция ВидПараметраНазначенияВМассив(ВидПараметра, ВключаяЗависимые = Истина) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ВидПараметра);
	
	Если ВключаяЗависимые Тогда
		Если ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер Тогда
			Результат.Добавить(Перечисления.ВидыПараметровНазначенияСпецификаций.ДопРеквизитПодразделения);
		ИначеЕсли ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности Тогда
			Результат.Добавить(Перечисления.ВидыПараметровНазначенияСпецификаций.ДопРеквизитНаправленияДеятельности);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

//++ Устарело_Производство21

// Производит перенумерацию таблицы этапов производства
// 
// Параметры:
// 	ТаблицаЭтапы - ТаблицаЗначений - таблица этапов
//
Процедура ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы)

	ТаблицаЭтапы.Колонки.Добавить("УровеньЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0, ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиЭтапы", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
	КоличествоУровней = 1;
	ЗаполнитьУровеньЭтапов(ТаблицаЭтапы, НайденныеСтроки, 1, КоличествоУровней);
	
	ПредыдущийНомер = 0;
	СмещениеНомера = 0;
	ТекущийУровень = КоличествоУровней;
	
	ТаблицаЭтапы.Сортировать("УровеньЭтапа Убыв");
	
	КлючиСвязейЭтапов = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если ТекущийУровень <> Строка.УровеньЭтапа Тогда
			СмещениеНомера = СмещениеНомера + ПредыдущийНомер;
			ТекущийУровень = Строка.УровеньЭтапа;
		КонецЕсли;
		
		Строка.НомерЭтапа = Строка.НомерЭтапа + СмещениеНомера;
		
		КлючиСвязейЭтапов.Вставить(Строка.КлючСвязи, Строка.НомерЭтапа);
		
		Если ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = Строка.НомерСледующегоЭтапа + СмещениеНомера;
		КонецЕсли;
		
		ПредыдущийНомер = Строка.НомерЭтапа;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = КлючиСвязейЭтапов.Получить(Строка.КлючСвязиЭтапы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа, КоличествоУровней)
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", Строка.КлючСвязи));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоУровней = Макс(УровеньЭтапа, КоличествоУровней);
			
			Если Строка.НомерЭтапа = 1 Тогда
				Строка.УровеньЭтапа = КоличествоУровней;
			Иначе
				Строка.УровеньЭтапа = УровеньЭтапа;
			КонецЕсли;
			
		Иначе
			Строка.УровеньЭтапа = УровеньЭтапа;
			ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа + 1, КоличествоУровней);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает спецификацию на основании спецификации заказа
//
// Параметры:
//  Объект					 - ДокументОбъект.ЗаказНаПроизводство - содержит данные спецификации заказа
//  ДанныеПродукции			 - ДанныеФормыЭлементКоллекции - содержит данные текущей продукции заказа
//  ПараметрыСпецификации	 - Структура - содержит параметры новой спецификации.
//
// Возвращаемое значение:
//	Структура - содержит данные новой спецификации:
//  	* Ссылка - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//		* Наименование - Строка - наименование спецификации.
//    
Функция СоздатьСпецификациюНаОснованииСпецификацииЗаказа(Объект, ДанныеПродукции, ПараметрыСпецификации) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
		
		Если ЗначениеЗаполнено(ДанныеПродукции.Спецификация) Тогда
			// Чтобы скопировать реквизиты спецификации, которых нет в заказе
			НоваяСпецификация = ДанныеПродукции.Спецификация.Скопировать();
			НоваяСпецификация.ВыходныеИзделия.Очистить();
			НоваяСпецификация.ВозвратныеОтходы.Очистить();
			НоваяСпецификация.МатериалыИУслуги.Очистить();
			НоваяСпецификация.Трудозатраты.Очистить();
			НоваяСпецификация.СоответствиеСвойств.Очистить();
			НоваяСпецификация.ДополнительныеРеквизиты.Очистить();
		Иначе
			НоваяСпецификация = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
			НоваяСпецификация.Заполнить(Неопределено);
		КонецЕсли; 
		
		НоваяСпецификация.Наименование = ПараметрыСпецификации.НаименованиеСпецификации;
		НоваяСпецификация.Описание = ПараметрыСпецификации.Описание;
		
		// Копирование Этапы
		СозданныеЭтапы = Новый Соответствие;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаЭтапы = Объект.Этапы.Выгрузить(СтруктураПоиска);
		
		ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы);
		
		Для каждого ЭтапЗаказа Из ТаблицаЭтапы Цикл
			
			Если ЗначениеЗаполнено(ЭтапЗаказа.Этап) Тогда
				// Чтобы скопировать реквизиты этапа, которых нет в заказе
				НовыйЭтап = ЭтапЗаказа.Этап.Скопировать();
				НовыйЭтап.ВидыРабочихЦентров.Очистить();
				НовыйЭтап.АльтернативныеВидыРабочихЦентров.Очистить();
				НовыйЭтап.ДополнительныеРеквизиты.Очистить();
			Иначе
				НовыйЭтап = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
				НовыйЭтап.Заполнить(Неопределено);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапЗаказа);
			НовыйЭтап.Владелец = СсылкаНового;
			
			СтруктураПоискаПоЭтапу = Новый Структура("КлючСвязиЭтапы", ЭтапЗаказа.КлючСвязи);
			ТаблицаВидыРЦ = Объект.ВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаВидыРЦ.Сортировать("НомерСтроки");
			Для каждого ВидРЦЗаказа Из ТаблицаВидыРЦ Цикл
				СтрокаВидРЦ = НовыйЭтап.ВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВидРЦ, ВидРЦЗаказа);
			КонецЦикла;
			
			ТаблицаАльтернативныеВидыРЦ = Объект.АльтернативныеВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаАльтернативныеВидыРЦ.Сортировать("НомерСтроки");
			Для каждого АльтернативныйВидРЦ Из ТаблицаАльтернативныеВидыРЦ Цикл
				СтрокаАльтернативныйВидРЦ = НовыйЭтап.АльтернативныеВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАльтернативныйВидРЦ, АльтернативныйВидРЦ);
			КонецЦикла;
			
			НовыйЭтап.ОбменДанными.Загрузка = Истина;
			НовыйЭтап.Записать();
			
			СозданныеЭтапы.Вставить(ЭтапЗаказа.КлючСвязи, НовыйЭтап.Ссылка);
			
		КонецЦикла;
		
		// Копирование ВыходныеИзделия
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Ложь);
		ТаблицаВыходныеИзделия = Объект.ВыходныеИзделия.Выгрузить(СтруктураПоиска);
		ТаблицаВыходныеИзделия.Сортировать("НомерСтроки");
		Для каждого ИзделиеЗаказа Из ТаблицаВыходныеИзделия Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ИзделиеЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИзделие = НоваяСпецификация.ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзделие, ИзделиеЗаказа);
			
			СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаИзделие);
			
			СтрокаИзделие.Этап = НовыйЭтап;
			СтрокаИзделие.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование ВозвратныеОтходы
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаВозвратныеОтходы = Объект.ВозвратныеОтходы.Выгрузить(СтруктураПоиска);
		ТаблицаВозвратныеОтходы.Сортировать("НомерСтроки");
		Для каждого ОтходЗаказа Из ТаблицаВозвратныеОтходы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ОтходЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтход = НоваяСпецификация.ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтход, ОтходЗаказа);
			
			СтрокаОтход.КоличествоУпаковок = СтрокаОтход.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаОтход);
			
			СтрокаОтход.Этап = НовыйЭтап;
			СтрокаОтход.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование МатериалыИУслуги
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаМатериалы = Объект.МатериалыИУслуги.Выгрузить(СтруктураПоиска);
		ТаблицаМатериалы.Сортировать("НомерСтроки");
		Для каждого МатериалЗаказа Из ТаблицаМатериалы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(МатериалЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМатериал = НоваяСпецификация.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериал, МатериалЗаказа);
			
			СтрокаМатериал.КоличествоУпаковок = СтрокаМатериал.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			Если СтрокаМатериал.ПроизводитсяВПроцессе Тогда
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
			Иначе
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			КонецЕсли;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаМатериал);
			
			СтрокаМатериал.Этап = НовыйЭтап;
			СтрокаМатериал.ЭтапРедактирование = НовыйЭтап;
			
		КонецЦикла;
		
		// Копирование Трудозатраты
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаТрудозатраты = Объект.Трудозатраты.Выгрузить(СтруктураПоиска);
		ТаблицаТрудозатраты.Сортировать("НомерСтроки");
		Для каждого ТрудозатратыЗаказа Из ТаблицаТрудозатраты Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ТрудозатратыЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТрудозатраты = НоваяСпецификация.Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТрудозатраты, ТрудозатратыЗаказа);
			
			СтрокаТрудозатраты.Количество = СтрокаТрудозатраты.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			СтрокаТрудозатраты.Этап = НовыйЭтап;
			СтрокаТрудозатраты.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		НоваяСпецификация.МногоэтапныйПроизводственныйПроцесс = (СозданныеЭтапы.Количество() <> 1);
		
		НоваяСпецификация.УстановитьСсылкуНового(СсылкаНового);
		НоваяСпецификация.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ПроизводствоСервер.СобытиеСозданиеСпецификации(), 
			УровеньЖурналаРегистрации.Ошибка,,Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Новый Структура("Ссылка,Наименование", НоваяСпецификация.Ссылка, НоваяСпецификация.Наименование);

КонецФункции

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ТаблицаЗначений  - Таблица, в которой необходимо заполнить реквизиты, содержит:
// 			* НомерСтроки - Число - номер строки в коллекции
// 		Поля - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		МассивСтрок - Массив - массив строк, которые нужно обработать.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(КоллекцияДанных, Поля, МассивСтрок = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Спецификация КАК Спецификация,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Ссылка КАК Спецификация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПолуфабрикаты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПустыеСтатьиКалькуляции,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяНоменклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяХарактеристика
	|ПОМЕСТИТЬ СпецификацииСПолуфабрикатами
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
	|ГДЕ
	|	МатериалыИУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВыходныеИзделия.Ссылка КАК Ссылка,
	|	ВыходныеИзделия.Ссылка.Статус КАК Статус,
	|	ВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	РесурсныеСпецификацииВозвратныеОтходы.Номенклатура,
	|	РесурсныеСпецификацииВозвратныеОтходы.Характеристика,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка.Статус,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная),
	|	РесурсныеСпецификацииВозвратныеОтходы.КоличествоУпаковок
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.НомерСтроки ЕСТЬ NULL 
	|				ИЛИ ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПобочныйВыход,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|				И ТаблицаДокумента.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВыходныеИзделия.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ТОГДА 2
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьПустыеСтатьиКалькуляции
	|			ТОГДА 4
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяНоменклатура
	|			ТОГДА 5
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяХарактеристика И &ХарактеристикиИспользуются
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодОшибки,
	|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
	|	0 КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.ДоляСтоимости ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ ВыходныеИзделия.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВыходныеИзделия.КоличествоУпаковок,0) > 0 И (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок - 0.5 КАК ЧИСЛО(15, 0))) < (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок КАК ЧИСЛО(15, 3)))
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодПредупреждения,
	|	ЕСТЬNULL(ВыходныеИзделия.ТипСтоимости, ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)) КАК ТипСтоимости
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыходныеИзделия КАК ВыходныеИзделия
	|		ПО ТаблицаДокумента.Спецификация = ВыходныеИзделия.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВыходныеИзделия.Номенклатура
	|			И (ТаблицаДокумента.Характеристика = ВыходныеИзделия.Характеристика
	|				ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСПолуфабрикатами КАК СпецификацииСПолуфабрикатами
	|		ПО ТаблицаДокумента.Спецификация = СпецификацииСПолуфабрикатами.Спецификация";
	
	Если МассивСтрок = Неопределено Тогда
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	Иначе
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(МассивСтрок, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ОтборНомерСтроки = Новый Структура("НомерСтроки");
	
	Для Каждого Строка Из КоллекцияДанных Цикл
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		Если Выборка.НайтиСледующий(ОтборНомерСтроки) Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка, Поля);
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//-- Устарело_Производство21

// Устанавливает отбор по номенклатуре в списке спецификаций
// 
// Параметры:
// 	Список - ДинамическийСписок - список
// 	Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// 	Назначение - ПеречислениеСсылка.ИспользованиеНоменклатурыВНСИПроизводства - вариант использования
//
Процедура УстановитьОтборПоНоменклатуреВСпискеСпецификаций(Список, Номенклатура, Назначение = Неопределено) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	// Изделие
	Если ЗначениеЗаполнено(Номенклатура)
		И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Изделие")) Тогда
		
		ТекстыЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Т
		|ГДЕ
		|	Т.Номенклатура = &Номенклатура
		|
		//++ НЕ УТКА
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Т
		|ГДЕ
		|	Т.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Т.ВидНоменклатуры = &ВидНоменклатуры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК Т
		|ГДЕ
		|	Т.ОсновноеИзделиеНоменклатура = &Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК Т
		|ГДЕ
		|	Т.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Т.ОсновноеИзделиеВидНоменклатуры = &ВидНоменклатуры
		|
		//-- НЕ УТКА
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК Т
		|ГДЕ
		|	Т.Номенклатура = &Номенклатура
		|");
		
	КонецЕсли;
		
	// Материал
	Если ЗначениеЗаполнено(Номенклатура)
		И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Материал")) Тогда
		
		ТекстыЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Т
		|ГДЕ
		|	Т.Номенклатура = &Номенклатура");
		
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений;
	Использовать = (ТекстыЗапроса.Количество() > 0);
	
	Если Использовать Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, " ОБЪЕДИНИТЬ ");
		Запрос.УстановитьПараметр("Номенклатура",    Номенклатура);
		//++ НЕ УТКА
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		//-- НЕ УТКА
		
		СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
		
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по номенклатуре';
			|en = 'Filter by items'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ОтборПоНоменклатуре,
			"Ссылка",
			ВидСравненияКомпоновкиДанных.ВСписке,
			СписокОтбора,
			,
			Использовать);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасчетНормативнойДлительности

Процедура СредняяНормаЧасовПоГрафикуРаботыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если ГрафикРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасов = 0;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
		СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("СредняяНормаЧасовДоИзменения", СредняяНормаЧасов);
	
КонецПроцедуры

Процедура СредняяНормаЧасовПоГрафикуРаботыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасовДоИзменения = 0;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("СредняяНормаЧасовДоИзменения", СредняяНормаЧасовДоИзменения)
		ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
	СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];

	Если СредняяНормаЧасовДоИзменения <> СредняяНормаЧасов Тогда
		
		РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьЗадание(ГрафикРаботы, Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает ссылку на график работы из источника события
// 
// Параметры:
// 	Источник - СправочникОбъект.Календари, КонстантаМенеджерЗначения.ОсновнойКалендарьПредприятия - календарь
// Возвращаемое значение:
// 	СправочникСсылка.Календари - график работы
//
Функция ГрафикРаботыИзИсточникаСобытия(Источник)
	
	Перем ГрафикРаботы;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("КонстантаМенеджерЗначения.ОсновнойКалендарьПредприятия") Тогда
		
		ГрафикРаботы = Константы.ОсновнойКалендарьПредприятия.Получить(); 
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Календари") Тогда
		
		ГрафикРаботы = Источник.Ссылка;
		
	КонецЕсли;
	
	Возврат ГрафикРаботы;
	
КонецФункции

Функция СредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Календари.Ссылка                                          КАК Ссылка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ШаблонЗаполнения.Ссылка                                                          КАК Ссылка,
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.Ссылка,
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари
	|
	|СГРУППИРОВАТЬ ПО
	|	Календари.Ссылка");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	СредняяНормаЧасов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СредняяНормаЧасов.Вставить(Выборка.Ссылка, Выборка.НормаЧасов);
	КонецЦикла;
	Для каждого Ссылка Из МассивСсылок Цикл
		Если Не ЗначениеЗаполнено(СредняяНормаЧасов[Ссылка]) Тогда
			СредняяНормаЧасов[Ссылка] = 24.000;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СредняяНормаЧасов;
	
КонецФункции

Функция СвернутаяСредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НормаЧасов) Тогда
		Результат = Выборка.НормаЧасов;
	Иначе
		Результат = 24.000;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

#Область Автовыбор

// Конструктор параметров автовыбора номенклатуры
// 
// Возвращаемое значение:
// 	Структура - из:
// * ПолучитьСведенияАвтовыбора - Булево - признак получения сведений автовыбора
// * ПолучитьПредставления - Булево - признак получения представлений
// * СоответствиеСвойств - ТаблицаЗначений - таблица соответствия свойств
// * ЗначенияСвойствИзделий - ТаблицаЗначений - таблица значений свойств изделий
// * ТаблицаДанныхПоНоменклатуре - ТаблицаЗначений - таблица данных по номенклатуре
// * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//
Функция ПолучитьПараметрыАвтовыбора() Экспорт
	
	ПараметрыАвтовыбора = Новый Структура;
	
	ПараметрыАвтовыбора.Вставить("МенеджерВременныхТаблиц"    , Неопределено);
	ПараметрыАвтовыбора.Вставить("ТаблицаДанныхПоНоменклатуре", Неопределено);
	
	ПараметрыАвтовыбора.Вставить("ЗначенияСвойствИзделий", Неопределено);
	ПараметрыАвтовыбора.Вставить("СоответствиеСвойств"   , Неопределено);
	
	ПараметрыАвтовыбора.Вставить("ПолучитьПредставления"     , Ложь);
	ПараметрыАвтовыбора.Вставить("ПолучитьСведенияАвтовыбора", Истина);
	
	ПараметрыАвтовыбора.Вставить("ИмяТЧ", "");
	
	Возврат ПараметрыАвтовыбора;
	
КонецФункции

Процедура ОбработатьНастройкиАвтовыбораНоменклатуры(НаборДанных, ПараметрыАвтовыбора) Экспорт
	
	Если НаборДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборНоменклатурыИзСвойства(НаборДанных, ПараметрыАвтовыбора);
	
	ОбработатьВыборХарактеристикиПоСвойствам(НаборДанных, ПараметрыАвтовыбора);
	
	ОбработатьВыборХарактеристикиПоАлгоритму(НаборДанных, ПараметрыАвтовыбора);
	
	ОбработатьУточнениеНоменклатурыХарактеристикиПриПроизводстве(НаборДанных, ПараметрыАвтовыбора);
	
КонецПроцедуры

// Автовыбор номенклатуры из свойства
// 
// Параметры:
// 	НаборДанных - ТаблицаЗначений - таблица данных, содержащая:
// 		* Идентификатор - Число - идентификатор строки
// 	ПараметрыАвтовыбора - см. ПолучитьПараметрыАвтовыбора
//
Процедура ОбработатьВыборНоменклатурыИзСвойства(НаборДанных, ПараметрыАвтовыбора)
	
	СтрокиНабораДанных = НаборДанных.НайтиСтроки(Новый Структура("СпособАвтовыбораНоменклатуры",
															Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИндексСтроки" ,                  Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Идентификатор",                  Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Свойство",                       Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Таблица.Колонки.Добавить("СпособАвтовыбораХарактеристики", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыАвтовыбораХарактеристики"));
	Таблица.Колонки.Добавить("СтрокаНабораДанных");
	
	ИндексСтроки = 0;
	Для каждого СтрокаНабораДанных Из СтрокиНабораДанных Цикл
		
		Если СтрокаНабораДанных.СвойствоСодержащееНоменклатуру.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИндексСтроки                   = ИндексСтроки;
		НоваяСтрока.Идентификатор                  = СтрокаНабораДанных.Идентификатор;
		НоваяСтрока.Свойство                       = СтрокаНабораДанных.СвойствоСодержащееНоменклатуру;
		НоваяСтрока.СпособАвтовыбораХарактеристики = СтрокаНабораДанных.СпособАвтовыбораХарактеристики;
		НоваяСтрока.СтрокаНабораДанных = СтрокаНабораДанных;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.ИндексСтроки,
	|	Т.Идентификатор,
	|	ВЫРАЗИТЬ(Т.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК Свойство,
	|	Т.СпособАвтовыбораХарактеристики
	|
	|ПОМЕСТИТЬ ВтСвойства
	|ИЗ
	|	&Свойства КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор                           КАК Идентификатор,
	|	0                                                              КАК Приоритет,
	|	&НоменклатураПредставление                                     КАК НоменклатураПредставление,
	|	ЗначенияСвойств.Свойство                                       КАК Свойство,
	|	ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура) КАК Номенклатура,
	|
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ИспользованиеХарактеристик, НЕОПРЕДЕЛЕНО) В (
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|
	|ПОМЕСТИТЬ ВтЗначенияСвойств
	|ИЗ
	|	ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойств
	|		ПО ВтДанныеПоНоменклатуре.Номенклатура = ЗначенияСвойств.Ссылка
	|ГДЕ
	|	ЗначенияСвойств.Свойство В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Свойство ИЗ ВтСвойства КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор                             КАК Идентификатор,
	|	1                                                                КАК Приоритет,
	|	&НоменклатураПредставление                                       КАК НоменклатураПредставление,
	|	ЗначенияСвойств.Свойство                                         КАК Свойство,
	|	ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура)   КАК Номенклатура,
	|
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ИспользованиеХарактеристик, НЕОПРЕДЕЛЕНО) В (
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойств
	|		ПО ВтДанныеПоНоменклатуре.Характеристика = ЗначенияСвойств.Ссылка
	|ГДЕ
	|	ЗначенияСвойств.Свойство В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Свойство ИЗ ВтСвойства КАК Т)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	Свойство,
	|	ТипНоменклатуры
	|;
	|
	|ВЫБРАТЬ
	|	Свойства.ИндексСтроки                      КАК ИндексСтроки,
	|	Свойства.Свойство                          КАК Свойство,
	|	&ВыражениеИдентификатораСвойства           КАК СвойствоИдентификатор,
	|	ПРЕДСТАВЛЕНИЕ(Свойства.Свойство)           КАК СвойствоПредставление,
	|
	|	ЗначенияСвойств.Номенклатура               КАК Номенклатура,
	|	ЗначенияСвойств.НоменклатураПредставление  КАК НоменклатураПредставление,
	|	ЗначенияСвойств.ТипНоменклатуры            КАК ТипНоменклатуры,
	|	ЗначенияСвойств.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ЗначенияСвойств.ЕдиницаИзмеренияШтучная    КАК ЕдиницаИзмеренияШтучная,
	|
	|	ЗначенияСвойств.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ВЫБОР ЗначенияСвойств.ХарактеристикиИспользуются
	|		КОГДА ИСТИНА
	|			ТОГДА Свойства.СпособАвтовыбораХарактеристики
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
	|	КОНЕЦ                                      КАК СпособАвтовыбораХарактеристики
	|
	|ИЗ ВтСвойства КАК Свойства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтЗначенияСвойств КАК ЗначенияСвойств
	|		ПО Свойства.Идентификатор = ЗначенияСвойств.Идентификатор
	|			И Свойства.Свойство = ЗначенияСвойств.Свойство
	|			И ЗначенияСвойств.ТипНоменклатуры В (&ДопустимыеТипыНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойства.ИндексСтроки,
	|	ЗначенияСвойств.Приоритет
	|";
	
	ПолеИдентификатора = РаботаСФормулами.ПолеИдентификатораДополнительныхРеквизитовИСведений();
	ВыражениеИдентификатораСвойства = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Свойства.Свойство.%1",
		ПолеИдентификатора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатораСвойства", ВыражениеИдентификатораСвойства);
	
	Если ПараметрыАвтовыбора.ПолучитьПредставления Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураПредставление", "ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).Представление, """")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураПредставление", """""");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыАвтовыбора.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Свойства", Таблица);
	
	ДопустимыеТипыНоменклатуры = Новый Массив;
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	Если ПараметрыАвтовыбора.ИмяТЧ = "МатериалыИУслуги" Тогда
		ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Набор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДопустимыеТипыНоменклатуры", ДопустимыеТипыНоменклатуры);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекИндексСтроки = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если ТекИндексСтроки = Выборка.ИндексСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНабораДанных = Таблица[Выборка.ИндексСтроки].СтрокаНабораДанных;
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаНабораДанных, Выборка);
			
		Иначе
			
			Если ПараметрыАвтовыбора.ПолучитьСведенияАвтовыбора Тогда
				СтрокаНабораДанных.СведенияАвтовыбора =
					СтрШаблон(НСтр("ru = 'Номенклатуру не удалось получить из свойства <%1>.';
									|en = 'Cannot receive products from property <%1>.'"),
						Выборка.СвойствоПредставление);
			КонецЕсли; 
			
		КонецЕсли;
		
		ТекИндексСтроки = Выборка.ИндексСтроки;
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, "ВтСвойства,ВтЗначенияСвойств");
	
КонецПроцедуры

// Автовыбор характеристики по свойствам
// 
// Параметры:
// 	НаборДанных - ТаблицаЗначений - таблица данных, содержащая:
// 		* Идентификатор - Число - идентификатор строки
// 	ПараметрыАвтовыбора - см. ПолучитьПараметрыАвтовыбора
//
Процедура ОбработатьВыборХарактеристикиПоСвойствам(НаборДанных, ПараметрыАвтовыбора)
	
	СтрокиНабораДанных = НаборДанных.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики,ХарактеристикиИспользуются",
															Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции,
															Истина));
	
	Если СтрокиНабораДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияФункцийАвтовыбора = Новый Соответствие;
	Для каждого Описание Из УправлениеДаннымиОбИзделияхПовтИсп.ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры() Цикл
		Если НЕ ТипЗнч(Описание) = Тип("Структура") ИЛИ НЕ Описание.Свойство("ИмяФункции") Тогда
			Продолжить;
		КонецЕсли;
		ОписанияФункцийАвтовыбора.Вставить(Описание.ИмяФункции, Описание);
	КонецЦикла;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИндексСтроки");
	Таблица.Колонки.Добавить("СтрокаНабораДанных");
	Таблица.Колонки.Добавить("СоответствиеСвойств");
	Таблица.Колонки.Добавить("НоменклатураИзделия");
	Таблица.Колонки.Добавить("ХарактеристикаИзделия");
	Таблица.Колонки.Добавить("Обработана");
	
	ДанныеПоНоменклатуре              = Неопределено;
	ЗначенияСвойствИзделия            = Неопределено;
	НоменклатураХарактеристикаИзделия = Новый Структура("Номенклатура, Характеристика");
	МассивНоменклатуры                = Новый Массив;
	
	СписокРеквизитовРезультата        = "СведенияАвтовыбора, Характеристика";
	Если ПараметрыАвтовыбора.ПолучитьПредставления Тогда
		СписокРеквизитовРезультата = СписокРеквизитовРезультата + ", ХарактеристикаПредставление";
	КонецЕсли;
	
	ИндексСтроки  = 0;
	ТекИдентификатор = Неопределено;
	Для каждого СтрокаНабораДанных Из СтрокиНабораДанных Цикл
		
		Если ТекИдентификатор <> СтрокаНабораДанных.Идентификатор Тогда
			
			ДанныеПоНоменклатуре = ПараметрыАвтовыбора.ТаблицаДанныхПоНоменклатуре.Найти(СтрокаНабораДанных.Идентификатор, "Идентификатор");
			Если ДанныеПоНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоменклатураХарактеристикаИзделия, ДанныеПоНоменклатуре, "Номенклатура, Характеристика");
			ЗначенияСвойствИзделия = ПараметрыАвтовыбора.ЗначенияСвойствИзделий.Скопировать(НоменклатураХарактеристикаИзделия);
			
			ТекИдентификатор = СтрокаНабораДанных.Идентификатор;
			
			МассивНоменклатуры.Добавить(ДанныеПоНоменклатуре.Номенклатура);
			
		КонецЕсли;
		
		МассивНоменклатуры.Добавить(СтрокаНабораДанных.Номенклатура);
		
		СоответствиеСвойств = ПараметрыАвтовыбора.СоответствиеСвойств.Скопировать(
			Новый Структура("Спецификация, КлючСвязи", ДанныеПоНоменклатуре.Спецификация, СтрокаНабораДанных.КлючСвязи));
		
		Для каждого НастройкаСоответствия Из СоответствиеСвойств Цикл
		
			Если НастройкаСоответствия.СпособПодбораЗначения = Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоСвойству
				И ЗначениеЗаполнено(НастройкаСоответствия.СвойствоПродукции) Тогда
				
				НайденноеЗначение = ЗначенияСвойствИзделия.Найти(НастройкаСоответствия.СвойствоПродукции, "Свойство");
				Если НайденноеЗначение <> Неопределено Тогда
					НастройкаСоответствия.Значение = НайденноеЗначение.Значение;
				КонецЕсли;
				
			ИначеЕсли НастройкаСоответствия.СпособПодбораЗначения = Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоФормуле 
				И НЕ ПустаяСтрока(НастройкаСоответствия.АлгоритмРасчетаЗначения) Тогда
				
				ДанныеДляВычисления = ПодготовитьФормулуДляВычисления(НастройкаСоответствия.АлгоритмРасчетаЗначения, ЗначенияСвойствИзделия);
				
				НастройкаСоответствия.Значение = ВычислитьЗначениеСвойстваПриАвтовыборе(
					ДанныеДляВычисления.Формула, 
					ДанныеДляВычисления.Параметры, 
					ДанныеПоНоменклатуре.Спецификация);
					
			ИначеЕсли НастройкаСоответствия.СпособПодбораЗначения = Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоАлгоритму 
				И НЕ ПустаяСтрока(НастройкаСоответствия.АлгоритмРасчетаЗначения) Тогда
				
				ПараметрыАлгоритмаАвтовыбора = ПараметрыВыполненияАлгоритмаАвтовыбора(ДанныеПоНоменклатуре, ЗначенияСвойствИзделия, СтрокаНабораДанных);
				
				Описание = ОписанияФункцийАвтовыбора[НастройкаСоответствия.АлгоритмРасчетаЗначения];
				
				Если Описание <> Неопределено Тогда
					
					Алгоритм = Описание.ИмяМодуля+"."+Описание.ИмяФункции+"(Параметры)";
					
					НастройкаСоответствия.Значение = ВычислитьЗначениеСвойстваПриАвтовыборе(
						Алгоритм, 
						ПараметрыАлгоритмаАвтовыбора, 
						ДанныеПоНоменклатуре.Спецификация);
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИндексСтроки          = ИндексСтроки;
		НоваяСтрока.СтрокаНабораДанных    = СтрокаНабораДанных;
		НоваяСтрока.СоответствиеСвойств   = СоответствиеСвойств;
		НоваяСтрока.НоменклатураИзделия   = НоменклатураХарактеристикаИзделия.Номенклатура;
		НоваяСтрока.ХарактеристикаИзделия = НоменклатураХарактеристикаИзделия.Характеристика;
		НоваяСтрока.Обработана            = Ложь;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	ВладельцыХарактеристик = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР Номенклатура.ИспользованиеХарактеристик
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА Номенклатура.ВидНоменклатуры
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА Номенклатура.ВладелецХарактеристик
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Номенклатура.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВладелецХарактеристики
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВладельцыХарактеристик.Вставить(Выборка.Номенклатура, Выборка.ВладелецХарактеристики);
	КонецЦикла;
	
	ШаблонПакета = "
	|ВЫБРАТЬ
	|	&Характеристика_Представление,
	|	Характеристики.Ссылка КАК Характеристика
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|	ПО Свойства.Ссылка В (&ИмяПараметраСписокСвойствПакета)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойств
	|	ПО Характеристики.Ссылка = ЗначенияСвойств.Ссылка
	|		И Свойства.Ссылка = ЗначенияСвойств.Свойство
	|	
	|ГДЕ
	|	Характеристики.Владелец = &ИмяПараметраВладелецХарактеристики
	|	И НЕ Характеристики.ПометкаУдаления
	|	
	|СГРУППИРОВАТЬ ПО
	|	Характеристики.Ссылка
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА
	|				&ТекстОтборовПоСвойствам
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) = &ИмяПараметраКоличествоСвойствПакета
	|";
	
	ШаблонОтбораПоСвойству = "Свойства.Ссылка = &%1 И ЕСТЬNULL(ЗначенияСвойств.Значение, НЕОПРЕДЕЛЕНО) = &%2";
	
	ШаблонСопоставления = "
	|ВЫБРАТЬ
	|	&Характеристика_Представление,
	|	Характеристики.Ссылка КАК Характеристика
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	Характеристики.Ссылка = &ИмяПараметраХарактеристикаМатериала
	|";
	
	ПараметрыПакета   = Новый Структура;
	КэшПакетовЗапроса = Новый Соответствие;
	
	ИндексСтроки      = 0;
	Пока ИндексСтроки < Таблица.Количество() Цикл
		
		Запрос = Новый Запрос;
		
		ТекстыЗапроса     = Новый Массив;
		ТекстыЗапросаХеши = Новый Массив;
		
		Пока ИндексСтроки < Таблица.Количество() И ТекстыЗапроса.Количество() < 100 Цикл
			
			СтрокаТаблицы      = Таблица[ИндексСтроки];
			СтрокаНабораДанных = СтрокаТаблицы.СтрокаНабораДанных;
			
			ИмяПараметраВладелецХарактеристики  = "ВладелецХарактеристики_"+Формат(ИндексСтроки, "ЧН=0; ЧГ=");
			ИмяПараметраКоличествоСвойствПакета = "КоличествоСвойств_"+Формат(ИндексСтроки, "ЧН=0; ЧГ=");
			ИмяПараметраСписокСвойствПакета     = "СписокСвойств_"+Формат(ИндексСтроки, "ЧН=0; ЧГ=");
			
			ПараметрыПакета.Очистить();
			
			КоличествоСвойств = СтрокаТаблицы.СоответствиеСвойств.Количество();
			Если КоличествоСвойств = 0 Тогда
				
				ИмяПараметраХарактеристикаМатериала = "ХарактеристикаМатериала_"+Формат(ИндексСтроки, "ЧН=0; ЧГ=");
				
				Если ВладельцыХарактеристик[СтрокаНабораДанных.Номенклатура] = ВладельцыХарактеристик[СтрокаТаблицы.НоменклатураИзделия] Тогда
					ПараметрыПакета.Вставить(ИмяПараметраХарактеристикаМатериала, СтрокаТаблицы.ХарактеристикаИзделия);
				Иначе
					ПараметрыПакета.Вставить(ИмяПараметраХарактеристикаМатериала, Неопределено);
				КонецЕсли;
				
				ТекстЗапросаПакета = СтрЗаменить(ШаблонСопоставления, "ИмяПараметраХарактеристикаМатериала", ИмяПараметраХарактеристикаМатериала);
				
			Иначе
				
				ПараметрыПакета.Вставить(ИмяПараметраСписокСвойствПакета, Новый Массив);
				
				ТекстыОтборовПоСвойствам = Новый Массив;
				Для Х = 0 По КоличествоСвойств - 1 Цикл
					
					НастройкаСоответствия = СтрокаТаблицы.СоответствиеСвойств[Х];
					
					ИмяПараметраСвойствоМатериала = СтрШаблон("СвойствоМатериала_%1_%2", Формат(ИндексСтроки, "ЧН=0; ЧГ="), Формат(Х, "ЧН=0; ЧГ="));
					ИмяПараметраЗначениеСвойства  = СтрШаблон("ЗначениеСвойства_%1_%2" , Формат(ИндексСтроки, "ЧН=0; ЧГ="), Формат(Х, "ЧН=0; ЧГ="));
					
					ТекстыОтборовПоСвойствам.Добавить(СтрШаблон(
						ШаблонОтбораПоСвойству,
						ИмяПараметраСвойствоМатериала,
						ИмяПараметраЗначениеСвойства));
						
					ПараметрыПакета.Вставить(ИмяПараметраСвойствоМатериала, НастройкаСоответствия.СвойствоМатериала);
					Если ЗначениеЗаполнено(НастройкаСоответствия.Значение) И НастройкаСоответствия.Значение <> Ложь Тогда
						ПараметрыПакета.Вставить(ИмяПараметраЗначениеСвойства, НастройкаСоответствия.Значение);
					Иначе
						ПараметрыПакета.Вставить(ИмяПараметраЗначениеСвойства, Неопределено);
					КонецЕсли;
					
					МассивПараметров = ПараметрыПакета[ИмяПараметраСписокСвойствПакета]; // Массив
					МассивПараметров.Добавить(НастройкаСоответствия.СвойствоМатериала);
					
				КонецЦикла;
				
				ПараметрыПакета.Вставить(ИмяПараметраВладелецХарактеристики,  ВладельцыХарактеристик[СтрокаНабораДанных.Номенклатура]);
				ПараметрыПакета.Вставить(ИмяПараметраКоличествоСвойствПакета, КоличествоСвойств);
				
				ТекстЗапросаПакета = СтрЗаменить(ШаблонПакета,       "ИмяПараметраСписокСвойствПакета",     ИмяПараметраСписокСвойствПакета);
				ТекстЗапросаПакета = СтрЗаменить(ТекстЗапросаПакета, "ИмяПараметраВладелецХарактеристики",  ИмяПараметраВладелецХарактеристики);
				ТекстЗапросаПакета = СтрЗаменить(ТекстЗапросаПакета, "ИмяПараметраКоличествоСвойствПакета", ИмяПараметраКоличествоСвойствПакета);
				ТекстЗапросаПакета = СтрЗаменить(ТекстЗапросаПакета, "&ТекстОтборовПоСвойствам",            СтрСоединить(ТекстыОтборовПоСвойствам, Символы.ПС + "ИЛИ "));
				
			КонецЕсли;
			
			ХешПакета = ХешПакетаВыбораХарактеристикиПоСвойствам(ПараметрыПакета);
			
			КэшПакетаЗапроса = КэшПакетовЗапроса.Получить(ХешПакета.ХешСумма);
			Если КэшПакетаЗапроса = Неопределено Тогда
				
				КэшПакетовЗапроса.Вставить(ХешПакета.ХешСумма,
					Новый Структура("СтрокаТаблицы, ЗависимыеСтрокиТаблицы", СтрокаТаблицы, Новый Массив));
				
				ТекстыЗапроса.Добавить(ТекстЗапросаПакета);
				ТекстыЗапросаХеши.Добавить(ХешПакета.ХешСумма);
				
				Для каждого КлючИЗначение Из ПараметрыПакета Цикл
					Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				
			Иначе
				
				Если КэшПакетаЗапроса.СтрокаТаблицы.Обработана = Истина Тогда
					ЗаполнитьЗначенияСвойств(
						СтрокаНабораДанных,
						КэшПакетаЗапроса.СтрокаТаблицы.СтрокаНабораДанных,
						СписокРеквизитовРезультата);
					СтрокаТаблицы.Обработана = Истина;
				Иначе
					КэшПакетаЗапроса.ЗависимыеСтрокиТаблицы.Добавить(СтрокаТаблицы);
				КонецЕсли;
				
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Если ПараметрыАвтовыбора.ПолучитьПредставления Тогда
			ТекстПоляПредставление = "ПРЕДСТАВЛЕНИЕ(Характеристики.Ссылка) КАК ХарактеристикаПредставление,";
		Иначе
			ТекстПоляПредставление = "";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Характеристика_Представление,", ТекстПоляПредставление);
		
		Запрос.Текст = ТекстЗапроса;
		РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
		Для Х = 0 По РезультатыЗапроса.Количество() - 1 Цикл
			
			РезультатЗапроса = РезультатыЗапроса[Х];
			
			Выборка = РезультатЗапроса.Выбрать();
			
			КэшПакетаЗапроса   = КэшПакетовЗапроса.Получить(ТекстыЗапросаХеши[Х]);
			
			СтрокаТаблицы      = КэшПакетаЗапроса.СтрокаТаблицы;
			СтрокаНабораДанных = СтрокаТаблицы.СтрокаНабораДанных;
			
			Если Выборка.Количество() = 0 Тогда
				Если ПараметрыАвтовыбора.ПолучитьСведенияАвтовыбора Тогда
					СтрокаНабораДанных.СведенияАвтовыбора =
						СтрШаблон(НСтр("ru = 'Характеристику не удалось подобрать по свойствам: %1';
										|en = 'Failed to pick a variant by properties: %1'"),
							ЗаполнитьСведенияАвтовыбора(СтрокаТаблицы.СоответствиеСвойств));
				КонецЕсли;
			ИначеЕсли Выборка.Количество() > 1 Тогда
				Если ПараметрыАвтовыбора.ПолучитьСведенияАвтовыбора Тогда
					СтрокаНабораДанных.СведенияАвтовыбора =
						СтрШаблон(НСтр("ru = 'По свойствам: %1, найдено более одной характеристики';
										|en = 'By properties: %1, more than one variant is found'"),
							ЗаполнитьСведенияАвтовыбора(СтрокаТаблицы.СоответствиеСвойств));
				КонецЕсли;
			Иначе
				Выборка.Следующий();
				СтрокаНабораДанных.Характеристика = Выборка.Характеристика;
				Если ПараметрыАвтовыбора.ПолучитьПредставления Тогда
					СтрокаНабораДанных.ХарактеристикаПредставление = Выборка.ХарактеристикаПредставление;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицы.Обработана = Истина;
			
			Если КэшПакетаЗапроса.ЗависимыеСтрокиТаблицы.Количество() > 0 Тогда
				Для каждого ЗависимаяСтрокаТаблицы Из КэшПакетаЗапроса.ЗависимыеСтрокиТаблицы Цикл
					ЗаполнитьЗначенияСвойств(ЗависимаяСтрокаТаблицы.СтрокаНабораДанных,
						СтрокаНабораДанных,
						СписокРеквизитовРезультата);
					ЗависимаяСтрокаТаблицы.Обработана = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Автовыбор характеристики по алгоритму
// 
// Параметры:
// 	НаборДанных - ТаблицаЗначений - таблица данных, содержащая:
// 		* Идентификатор - Число - идентификатор строки
// 	ПараметрыАвтовыбора - см. ПолучитьПараметрыАвтовыбора
//
Процедура ОбработатьВыборХарактеристикиПоАлгоритму(НаборДанных, ПараметрыАвтовыбора)
	
	СтрокиНабораДанных = НаборДанных.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики,ХарактеристикиИспользуются",
															Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму,
															Истина));
	
	Если СтрокиНабораДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияФункцийАвтовыбора = Новый Соответствие;
	Для каждого Описание Из УправлениеДаннымиОбИзделияхПовтИсп.ОписаниеФункцийАвтовыбораХарактеристики() Цикл
		Если НЕ ТипЗнч(Описание) = Тип("Структура") ИЛИ НЕ Описание.Свойство("ИмяФункции") Тогда
			Продолжить;
		КонецЕсли;
		ОписанияФункцийАвтовыбора.Вставить(Описание.ИмяФункции, Описание);
	КонецЦикла;
	
	ДанныеПоНоменклатуре            = Неопределено;
	ЗначенияСвойствИзделия          = Неопределено;
	ОтборНоменклатураХарактеристика = Новый Структура("Номенклатура, Характеристика");
	
	ШаблонОшибкиОписания   = НСтр("ru = 'Не найден алгоритм автовыбора характеристики: %1';
									|en = 'The algorithm for auto selection of the item variant is not found: %1'");
	ШаблонОшибкиВыполнения = НСтр("ru = 'Не удалось подобрать характеристику по алгоритму: %1';
									|en = 'Failed to pick the variant by the algorithm: %1'");
	
	ТекИдентификатор = Неопределено;
	Для каждого СтрокаНабораДанных Из СтрокиНабораДанных Цикл
		
		Если ПустаяСтрока(СтрокаНабораДанных.АлгоритмАвтовыбораХарактеристики) Тогда
			Продолжить;
		КонецЕсли;
		
		Описание = ОписанияФункцийАвтовыбора[СтрокаНабораДанных.АлгоритмАвтовыбораХарактеристики];
		
		Если Описание = Неопределено Тогда
			СтрокаНабораДанных.СведенияАвтовыбора = СтрШаблон(ШаблонОшибкиОписания, СтрокаНабораДанных.АлгоритмАвтовыбораХарактеристики);
			Продолжить;
		КонецЕсли;
		
		Если ТекИдентификатор <> СтрокаНабораДанных.Идентификатор Тогда
			
			ДанныеПоНоменклатуре = ПараметрыАвтовыбора.ТаблицаДанныхПоНоменклатуре.Найти(СтрокаНабораДанных.Идентификатор, "Идентификатор");
			Если ДанныеПоНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборНоменклатураХарактеристика, ДанныеПоНоменклатуре, "Номенклатура, Характеристика");
			ЗначенияСвойствИзделия = ПараметрыАвтовыбора.ЗначенияСвойствИзделий.Скопировать(ОтборНоменклатураХарактеристика);
			
			ТекИдентификатор = СтрокаНабораДанных.Идентификатор;
			
		КонецЕсли;
		
		ПараметрыАлгоритмаАвтовыбора = ПараметрыВыполненияАлгоритмаАвтовыбора(ДанныеПоНоменклатуре, ЗначенияСвойствИзделия, СтрокаНабораДанных);
		
		СведенияАвтовыбора = СтрШаблон(ШаблонОшибкиВыполнения, Описание.ИмяФункции);
		
		Попытка
			Алгоритм = Описание.ИмяМодуля+"."+Описание.ИмяФункции+"(Параметры)";
			СтрокаНабораДанных.Характеристика = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Алгоритм, ПараметрыАлгоритмаАвтовыбора);
		Исключение
			
			ЗаписьЖурналаРегистрации(
				ПроизводствоСервер.СобытиеАвтовыборХарактеристикиПоАлгоритму(),
				УровеньЖурналаРегистрации.Ошибка,,,
				СведенияАвтовыбора + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтрокаНабораДанных.Характеристика) Тогда
			СведенияАвтовыбора = "";
			Если ПараметрыАвтовыбора.ПолучитьПредставления Тогда
				СтрокаНабораДанных.ХарактеристикаПредставление = Строка(СтрокаНабораДанных.Характеристика);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыАвтовыбора.ПолучитьСведенияАвтовыбора Тогда
			СтрокаНабораДанных.СведенияАвтовыбора = СведенияАвтовыбора;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Уточнение номенклатуры при производстве
// 
// Параметры:
// 	НаборДанных - ТаблицаЗначений - таблица данных, содержащая:
// 		* Идентификатор - Число - идентификатор строки
// 	ПараметрыАвтовыбора - см. ПолучитьПараметрыАвтовыбора
//
Процедура ОбработатьУточнениеНоменклатурыХарактеристикиПриПроизводстве(НаборДанных, ПараметрыАвтовыбора)
	
	Если НЕ ПараметрыАвтовыбора.ПолучитьСведенияАвтовыбора Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОписаниеИзделия     = НаборДанных.Колонки.Найти("ОписаниеИзделия") <> Неопределено;
	ЕстьПрименениеМатериала = НаборДанных.Колонки.Найти("ПрименениеМатериала") <> Неопределено;
	ОтборНоменклатураХарактеристика = Новый Структура("Номенклатура, Характеристика");
	
	Для каждого СтрокаНабораДанных Из НаборДанных Цикл
		
		ЕстьУточнениеПриПроизводстве = (СтрокаНабораДанных.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве)
			ИЛИ (СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве
				И СтрокаНабораДанных.ХарактеристикиИспользуются = Истина);
			
		Если НЕ ЕстьУточнениеПриПроизводстве Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоНоменклатуре = ПараметрыАвтовыбора.ТаблицаДанныхПоНоменклатуре.Найти(СтрокаНабораДанных.Идентификатор, "Идентификатор");
		Если ДанныеПоНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборНоменклатураХарактеристика, ДанныеПоНоменклатуре, "Номенклатура, Характеристика");
		ЗначенияСвойствИзделия = ПараметрыАвтовыбора.ЗначенияСвойствИзделий.НайтиСтроки(ОтборНоменклатураХарактеристика);
		
		Если ЕстьОписаниеИзделия И НЕ ПустаяСтрока(СтрокаНабораДанных.ОписаниеИзделия) Тогда
			СтрокаНабораДанных.СведенияАвтовыбора = СтрШаблон(НСтр("ru = 'Описание изделия: %1';
																	|en = 'Product description: %1'"), СтрокаНабораДанных.ОписаниеИзделия) + "; ";
		ИначеЕсли ЕстьПрименениеМатериала И НЕ ПустаяСтрока(СтрокаНабораДанных.ПрименениеМатериала) Тогда
			СтрокаНабораДанных.СведенияАвтовыбора = СтрШаблон(НСтр("ru = 'Применение материала: %1';
																	|en = 'Material application: %1'"), СтрокаНабораДанных.ПрименениеМатериала) + "; ";
		КонецЕсли;
		СтрокаНабораДанных.СведенияАвтовыбора = СтрокаНабораДанных.СведенияАвтовыбора + УточнениеМатериалаПриПроизводстве(ЗначенияСвойствИзделия);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСведенияАвтовыбора(ЗначенияСвойствИзделия)
	
	СведенияАвтовыбора = "";
	
	Для каждого Строка Из ЗначенияСвойствИзделия Цикл
		СведенияАвтовыбора = СтрШаблон("%1%2<%3>%4%5",
												СведенияАвтовыбора,
												?(ПустаяСтрока(СведенияАвтовыбора), "", "; "),
												Строка.СвойствоПредставление,
												?(Строка.Значение = Неопределено, "", ": "),
												Строка.Значение);
	КонецЦикла;
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

Процедура ПроверитьСвойстваАвтовыбораИОтбораПоСвойствам(Объект, СоответствиеСвойств, ОтборПоСвойствам, ВидИзделий) Экспорт
	
	СписокСвойств = ПолучитьСвойстваДляАвтовыбора(ВидИзделий);
	
	// Проверим настройки отбора по свойствам
	СтрокиУдалить = Новый Массив;
	Для каждого СтрокаОтбор Из ОтборПоСвойствам Цикл
		Если СписокСвойств.Найти(СтрокаОтбор.Свойство) = Неопределено Тогда
			СтрокиУдалить.Добавить(СтрокаОтбор);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ОтборПоСвойствам.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	// Проверим настройку автовыбора
	Для каждого ДанныеНастройки Из СоответствиеСвойств Цикл
		Если СписокСвойств.Найти(ДанныеНастройки.СвойствоПродукции) = Неопределено Тогда
			ДанныеНастройки.СвойствоПродукции = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УточнениеМатериалаПриПроизводстве(ЗначенияСвойствИзделия)

	СведенияАвтовыбора = СтрШаблон(НСтр("ru = 'Требуется уточнить с учетом свойств: %1';
										|en = 'It is required to specify considering properties: %1'"),
		ЗаполнитьСведенияАвтовыбора(ЗначенияСвойствИзделия));
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

Процедура ОчиститьНастройкиАвтовыбораМатериалов(ДанныеСтроки, СоответствиеСвойств) Экспорт
	
	ДанныеСтроки.СпособАвтовыбораНоменклатуры   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	ДанныеСтроки.СвойствоСодержащееНоменклатуру = Неопределено;

	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	СписокСтрок = СоответствиеСвойств.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаСоответствие Из СписокСтрок Цикл
		СоответствиеСвойств.Удалить(СтрокаСоответствие);
	КонецЦикла;
	
КонецПроцедуры

Функция ХешПакетаВыбораХарактеристикиПоСвойствам(ПараметрыПакета)
	
	Результат = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Для каждого КлючИЗначение Из ПараметрыПакета Цикл
		Значение = КлючИЗначение.Значение;
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение) Тогда
				Результат.Добавить(Строка(Значение.УникальныйИдентификатор()));
			Иначе
				Результат.Добавить(Строка(Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Предназначена для описания функции автовыбора характеристики номенклатуры или значения свойства характеристики номенклатуры 
// в подключаемых алгоритмах. См. форму настройки автовыбора и настройку соответствия свойств.
//
// Параметры:
//  ИмяФункции            - Строка - имя функции, должна быть экспортной
//  ИмяМодуля             - Строка - имя модуля, если функция расположена не в модуле УправлениеДаннымиОбИзделиях
//  Представление         - Строка - представление, с которым функция будет отображаться в списке настройки автовыбора
//  ВозвращаемоеЗначение  - Строка,Массив,ОписаниеТипов - строка, содержащая имена типов возвращаемого значения, разделенных запятыми,
//                                                        массив значений типа Тип, состоящий возможных типов возвращаемого значения функции,
//                                                        описание возвращаемого значения,
//                                                        Информация о возвращаемом значении используется для фильтрации списка доступных функций при выборе.
//  Параметры             - Структура - структура дополнительных параметров описания, может содержать следующие ключи:
//                              * ИмяСвойства - Строка - Имя свойства, которое задается в настройках элемента свойства в группе "Для разработчиков",
//                                                       если параметр указан, то алгоритм будет применяться только к данному свойству.
//
// Возвращаемое значение:
//   СправочникСсылка.ХарактеристикиНоменклатуры,Произвольный - Для алгоритмов автовыбора характеристики,
//                                                              Для алгоритмов автовыбора значения свойства, содержит значение свойства
//
Функция СоздатьОписаниеФункцииАвтовыбора(ИмяФункции, ИмяМодуля = "", Представление = "", ВозвращаемоеЗначение = Неопределено, Параметры = Неопределено)
	
	Результат = Новый Структура("ИмяФункции, ИмяМодуля, Представление, ВозвращаемоеЗначение, Параметры");
	
	Результат.ИмяФункции = ИмяФункции;
	
	Если ПустаяСтрока(ИмяМодуля) Тогда
		Результат.ИмяМодуля = "УправлениеДаннымиОбИзделиях";
	Иначе
		Результат.ИмяМодуля = ИмяМодуля;
	КонецЕсли;
	
	Если ПустаяСтрока(Представление) Тогда
		Результат.Представление = ИмяФункции;
	Иначе
		Результат.Представление = Представление;
	КонецЕсли;
	
	ОписаниеВозвращаемогоЗначения = Неопределено;
	Если ВозвращаемоеЗначение <> Неопределено Тогда
		Если ТипЗнч(ВозвращаемоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ВозвращаемоеЗначение) = Тип("Строка") Тогда
			ОписаниеВозвращаемогоЗначения = Новый ОписаниеТипов(ВозвращаемоеЗначение);
		ИначеЕсли ТипЗнч(ВозвращаемоеЗначение) = Тип("ОписаниеТипов") Тогда
			ОписаниеВозвращаемогоЗначения = ВозвращаемоеЗначение;
		ИначеЕсли ТипЗнч(ВозвращаемоеЗначение) = Тип("Тип") Тогда
			ОписаниеВозвращаемогоЗначения = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВозвращаемоеЗначение));
		КонецЕсли;
	КонецЕсли;
	Результат.ВозвращаемоеЗначение = ОписаниеВозвращаемогоЗначения;
	
	Если Параметры = Неопределено Тогда
		Результат.Параметры = Новый Структура;
	Иначе
		Результат.Параметры = Параметры;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияСвойствИзделия(ДанныеПоНоменклатуре) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Номенклатура                               КАК Номенклатура,
	|	&Характеристика                             КАК Характеристика,
	|	ЗначенияСвойствПродукции.Свойство           КАК Свойство,
	|	&ВыражениеИдентификатораДопРеквизитовПродукции КАК СвойствоИдентификатор,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствПродукции.Свойство) КАК СвойствоПредставление,
	|	ЗначенияСвойствПродукции.Значение           КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойствПродукции
	|ГДЕ
	|	ЗначенияСвойствПродукции.Ссылка = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Номенклатура,
	|	&Характеристика,
	|	ЗначенияСвойствХарактеристики.Свойство,
	|	&ВыражениеИдентификатораДопРеквизитовХарактеристик,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствХарактеристики.Свойство),
	|	ЗначенияСвойствХарактеристики.Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойствПродукции
	|		ПО (ЗначенияСвойствПродукции.Ссылка = &Номенклатура)
	|			И ЗначенияСвойствХарактеристики.Свойство = ЗначенияСвойствПродукции.Свойство
	|ГДЕ
	|	ЗначенияСвойствХарактеристики.Ссылка = &Характеристика
	|	И ЗначенияСвойствПродукции.Свойство ЕСТЬ NULL";
	
	ПолеИдентификатора = РаботаСФормулами.ПолеИдентификатораДополнительныхРеквизитовИСведений();
	ВыражениеИдентификатораДопРеквизитовПродукции = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ЗначенияСвойствПродукции.Свойство.%1",
		ПолеИдентификатора);
	ВыражениеИдентификатораДопРеквизитовХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ЗначенияСвойствХарактеристики.Свойство.%1",
		ПолеИдентификатора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеИдентификатораДопРеквизитовПродукции", ВыражениеИдентификатораДопРеквизитовПродукции);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеИдентификатораДопРеквизитовХарактеристик", ВыражениеИдентификатораДопРеквизитовХарактеристик);
	
	Запрос.УстановитьПараметр("Номенклатура"  , ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Свойство");
	Результат.Индексы.Добавить("СвойствоИдентификатор");
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиСоответствияСвойств(Спецификация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Ссылка                                         КАК Спецификация,
	|	СоответствиеСвойств.КлючСвязи                   КАК КлючСвязи,
	|	СоответствиеСвойств.СпособПодбораЗначения       КАК СпособПодбораЗначения,
	|	СоответствиеСвойств.СвойствоМатериала           КАК СвойствоМатериала,
	|	&ВыражениеИдентификатораСвойстваМатериала       КАК СвойствоИдентификатор,
	|	ПРЕДСТАВЛЕНИЕ(СоответствиеСвойств.СвойствоМатериала) КАК СвойствоПредставление,
	|	СоответствиеСвойств.СвойствоПродукции           КАК СвойствоПродукции,
	|	СоответствиеСвойств.ЗначениеСвойства            КАК Значение,
	|	СоответствиеСвойств.АлгоритмРасчетаЗначения     КАК АлгоритмРасчетаЗначения
	|ИЗ
	|	Справочник.РесурсныеСпецификации.СоответствиеСвойств КАК СоответствиеСвойств
	|ГДЕ
	|	СоответствиеСвойств.Ссылка = &Ссылка
	|	И СоответствиеСвойств.СпособПодбораЗначения <> ЗНАЧЕНИЕ(Перечисление.СпособыПодбораЗначенияСвойстваНоменклатуры.ЛюбоеЗначение)";
	
	ПолеИдентификатора = РаботаСФормулами.ПолеИдентификатораДополнительныхРеквизитовИСведений();
	ВыражениеИдентификатораСвойстваМатериала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"СоответствиеСвойств.СвойствоМатериала.%1",
		ПолеИдентификатора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеИдентификатораСвойстваМатериала", ВыражениеИдентификатораСвойстваМатериала);
	
	Если ТипЗнч(Спецификация) = Тип("СправочникСсылка.МаршрутныеКарты") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РесурсныеСпецификации", "МаршрутныеКарты");
	КонецЕсли;
	
	Если ТипЗнч(Спецификация) = Тип("СправочникСсылка.ТехнологическиеПроцессы") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РесурсныеСпецификации", "ТехнологическиеПроцессы");
	КонецЕсли;

	Запрос.УстановитьПараметр("Ссылка", Спецификация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("КлючСвязи");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РасчетПоФормулам

#Область Транслятор

Функция ТрансляторФормул(Строка, Параметры, Описание) Экспорт
	
	Операнд = "";
	Индекс = Параметры.Количество();
	
	Формула = Строка.АлгоритмРасчетаКоличества;
	ФормулаДляРазбора = Строка.АлгоритмРасчетаКоличества;
	
	СоответствиеПараметров = Новый Соответствие;
	
	Пока СледующийОперанд(Операнд, ФормулаДляРазбора) Цикл
		
		Если СоответствиеПараметров[Операнд] <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = СтрШаблон("Параметр%1", Формат(Индекс, "ЧН=; ЧГ="));
		
		Формула = СтрЗаменить(Формула, "[" + Операнд + "]", СтрШаблон("Параметры.%1", ИмяПараметра));
		
		ПутьКДанным = Параметры.Добавить();
		ПутьКДанным.Значение = 0;
		ПутьКДанным.ИмяПараметра = ИмяПараметра;
		Если Не ЗаполнитьПутьКДаннымПоОперанду(
					Операнд,
					ПутьКДанным,
					Описание)
				И СтрНайти(Операнд, "Продукция") > 0
				Тогда
			// для совместимости c 2.2.3 [#...#]
			ПутьКДанным.Ключ        = "ОсновноеИзделие";
			ПутьКДанным.ИмяСвойства = "Количество";
		КонецЕсли;
		ПутьКДанным.ДанныеСтроки = Строка;
		
		СоответствиеПараметров.Вставить(Операнд, ИмяПараметра);
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ФункцииИзОбщегоМодуля() Цикл
		
		Формула = СтрЗаменить(Формула, КлючИЗначение.Ключ + "(", КлючИЗначение.Значение + "(");
		
	КонецЦикла;
	
	Возврат Формула;
	
КонецФункции

Функция ЗаполнитьПутьКДаннымПоОперанду(Операнд, ПутьКДанным, Описание)
	
	Для каждого КлючИЗначение Из Описание Цикл
		
		ОписаниеИсточника = КлючИЗначение.Значение; // см. СоздатьОписанияИсточникаДанныхОперандов
		ИД = ОписаниеИсточника.Идентификатор;
		
		Длина = СтрДлина(ИД);
		Если Лев(Операнд, Длина)= ИД
			И (Сред(Операнд, Длина + 1, 1) = "." ИЛИ Сред(Операнд, Длина + 1, 1) = "[") Тогда
			
			ПутьКДанным.Ключ = КлючИЗначение.Ключ;
			
			Разделитель = ".";
			Если КлючИЗначение.Значение.Коллекция Тогда
				
				ТекстДляРазбора = Операнд;
				
				СледующийОперанд(
					Разделитель,
					ТекстДляРазбора);
				
				ПутьКДанным.НомерСтроки = ОбщегоНазначения.ОписаниеТипаЧисло(10).ПривестиЗначение(Разделитель);
				Разделитель = "["+Разделитель+"].";
				
			КонецЕсли;
			ПутьКДанным.ИмяСвойства = СтрЗаменить(Операнд, ИД + Разделитель, "");
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СледующийОперанд(Операнд, Текст)
	
	Позиция = СтрНайти(Текст, "[");
	Если Позиция > 0 Тогда
		ПозицияОкончание = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, Позиция + 1);
		Пока ПозицияОкончание > 0 Цикл
			Операнд = Сред(Текст, Позиция + 1, ПозицияОкончание - Позиция - 1);
			Если СтрЧислоВхождений(Операнд, "[") = СтрЧислоВхождений(Операнд, "]") Тогда
				Текст = Сред(Текст, ПозицияОкончание + 1);
				Возврат Истина;
			КонецЕсли;
			ПозицияОкончание = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, ПозицияОкончание + 1);
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ИдентификаторДополнительногоРеквизитаВФормуле(Операнд)
	Идентификатор = Операнд;
	
	Если Лев(Идентификатор, 1) = "{"
		И Прав(Идентификатор, 1) = "}"
		И СтрЧислоВхождений(Идентификатор, "{") = 1 Тогда
		
		Идентификатор = РаботаСФормулами.СвойстваХарактеристики(Операнд).Идентификатор;
		
	КонецЕсли;
	
	Возврат Идентификатор;
КонецФункции

Функция ПодготовитьФормулуДляВычисления(АлгоритмРасчета, ЗначенияСвойств)
	
	Параметры = Новый Структура;
	
	Формула = АлгоритмРасчета;
	ФормулаДляРазбора = АлгоритмРасчета;
	
	Индекс = 0;
	Операнд = "";
	
	ОбработанныеПараметры = Новый Соответствие;
	Пока СледующийОперанд(Операнд, ФормулаДляРазбора) Цикл
		
		Если ОбработанныеПараметры[Операнд] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторСвойства = ИдентификаторДополнительногоРеквизитаВФормуле(Операнд);
		СтрокаСвойство = ЗначенияСвойств.Найти(ИдентификаторСвойства, "СвойствоИдентификатор");
		Если СтрокаСвойство <> Неопределено Тогда
			ИмяПараметра = СтрШаблон("Параметр%1", Формат(Индекс, "ЧН=; ЧГ="));
			
			Формула = СтрЗаменить(Формула, "[" + Операнд + "]", СтрШаблон("Параметры.%1", ИмяПараметра));
			
			Параметры.Вставить(ИмяПараметра, СтрокаСвойство.Значение);
			
			ОбработанныеПараметры.Вставить(Операнд, ИмяПараметра);
			
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ФункцииИзОбщегоМодуля() Цикл
		Формула = СтрЗаменить(Формула, КлючИЗначение.Ключ + "(", КлючИЗначение.Значение + "(");
	КонецЦикла;
	
	Возврат Новый Структура("Формула, Параметры", Формула, Параметры);
	
КонецФункции

Функция ВычислитьЗначениеСвойстваПриАвтовыборе(АлгоритмРасчета, Параметры, Спецификация)
	
	Результат = Неопределено;
	
	Попытка
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(АлгоритмРасчета, Параметры);
	Исключение
			
		ЗаписьЖурналаРегистрации(
			ПроизводствоСервер.СобытиеРасчетЗначенияСвойстваПриАвтовыборе(),
			УровеньЖурналаРегистрации.Ошибка,,
			Спецификация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДанныеДляРасчета

Процедура ДобавитьПараметрВДанныеДляРасчета(ДанныеДляРасчета, ИмяПараметра, Значение = 0, Параметры = Неопределено)
	
	ДанныеДляРасчета.Параметры.Вставить(ИмяПараметра, Значение);

	Если Параметры <> Неопределено Тогда
		Параметры.Найти(ИмяПараметра, "ИмяПараметра").Найден = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку в соответствие для авторасчета
// 
// Параметры:
// 	ДанныеДляРасчета - см. ДанныеДляРасчетаПоФормулам
// 	ПутьКДанным - СтрокаТаблицыЗначений из см. УправлениеДаннымиОбИзделиях.ПараметрыДляРасчетаПоФормулам
// 	Источник - см. Справочники.РесурсныеСпецификации.ИсточникДанныхДляРасчетаПоФормулам
//
Процедура ДобавитьСоответствиеДляАвтоРасчета(ДанныеДляРасчета, ПутьКДанным, Источник)
	
	Если (ПутьКДанным.Ключ = "ВыходныеИзделия" 
		ИЛИ ПутьКДанным.Ключ = "ВозвратныеОтходы"
		ИЛИ ПутьКДанным.Ключ = "МатериалыИУслуги")
		И ПутьКДанным.ИмяСвойства = НСтр("ru = 'Количество';
										|en = 'Quantity'") Тогда
		
		Если Не ПустаяСтрока(Источник.АлгоритмРасчетаКоличества) Тогда
			
			Если ДанныеДляРасчета.АвтоРасчет[Источник.КлючСвязи] = Неопределено Тогда
				ДанныеДляРасчета.АвтоРасчет.Вставить(Источник.КлючСвязи, Новый Массив);
			КонецЕсли;
			
			МассивСтрок = ДанныеДляРасчета.АвтоРасчет[Источник.КлючСвязи]; // Массив
			МассивСтрок.Добавить(ПутьКДанным.ИмяПараметра);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиДанных

// Конструктор описания источника данных операндов
// 
// Параметры:
// 	Идентификатор - Строка - идентификатор источника
// 	Представление - Строка - представление источника
// Возвращаемое значение:
// 	Структура - из:
// * Идентификатор - Строка - идентификатор источника
// * Представление - Строка - представление источника
// * Реквизиты - Массив из см. УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов - список реквизитов
// * СодержитСвойства - Булево - признак наличия свойств
// * НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств
// * СодержитСвойстваНоменклатуры - Булево - признак наличия свойств номенклатуры
// * Коллекция - Булево - признак коллекции
// * ИмяТЧ - Строка - имя табличной части
// * ИсточникСвойствНоменклатуры - СправочникСсылка.Номенклатура,СправочникСсылка.ВидыНоменклатуры - источник свойств
Функция СоздатьОписанияИсточникаДанныхОперандов(Идентификатор, Представление = "") Экспорт
	
	Результат = Новый Структура("
	|Идентификатор,
	|Представление,
	|
	|Реквизиты,
	|
	|СодержитСвойства, 
	|НаборСвойств,
	|
	|СодержитСвойстваНоменклатуры, 
	|Коллекция,
	|
	|ИмяТЧ,
	|ИсточникСвойствНоменклатуры,
	|");

	Результат.Идентификатор = Идентификатор;
	Если ПустаяСтрока(Представление) Тогда
		Результат.Представление = Идентификатор;
	Иначе
		Результат.Представление = Представление;
	КонецЕсли;
	
	Результат.Реквизиты = Новый Массив;
	
	Результат.СодержитСвойства = Ложь;
	Результат.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
	
	Результат.СодержитСвойстваНоменклатуры = Ложь;
	Результат.Коллекция = Ложь;
	
	Результат.ИмяТЧ = "";
	
	Возврат Результат;
	
КонецФункции

// Конструктор описания реквизита источника данных операнда
// 
// Параметры:
// 	Идентификатор - Строка - идентификатор реквизита
// 	Представление - Строка - представление реквизита
// Возвращаемое значение:
// 	Структура - из:
// 		* Идентификатор - Строка - идентификатор реквизита
// 		* Представление - Строка - представление реквизита
//

// Возвращает структуру описания реквизита или табличной части источника операндов
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор реквизита или табличной части.
// 	ТипЗначения - ОписаниеТипов - Описание типов реквизита.
// 	Представление - Строка - Представление реквизита или табличной части.
// Возвращаемое значение:
// 	Структура - Описание:
// * Идентификатор - Строка - Идентификатор реквизита или табличной части.
// * ТипЗначения - ОписаниеТипов - Описание типов реквизита.
// * Представление - Строка - Представление реквизита или табличной части.
Функция СоздатьОписанияРеквизитаИсточникаДанныхОперандов(Идентификатор, ТипЗначения, Представление = "") Экспорт
	
	Результат = Новый Структура("Идентификатор, ТипЗначения, Представление");

	Результат.Идентификатор = Идентификатор;
	Результат.ТипЗначения = ТипЗначения;
	Если ПустаяСтрока(Представление) Тогда
		Результат.Представление = Идентификатор;
	Иначе
		Результат.Представление = Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конструктор таблицы источников данных для расчета по формулам
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - из:
// * НомерСтроки - Число - номер строки таблицы источника
// * Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры
// * Количество - Число - количество
// * КлючСвязи - УникальныйИдентификатор - идентификатор строки таблицы
// * АлгоритмРасчетаКоличества - Строка - текст алгоритма
//
Функция СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("КлючСвязи");
	Таблица.Колонки.Добавить("АлгоритмРасчетаКоличества");
	
	Возврат Таблица;
	
КонецФункции

// Конструктор структуры источника данных для расчета по формулам
// 
// Возвращаемое значение:
// 	Структура - из:
// * Номенклатура - Неопределено - неинициализированное значение номенклатуры
// * Характеристика - Неопределено - неинициализированное значение характеристики
// * Количество - Неопределено - неинициализированное значение количества
// * КлючСвязи - Неопределено - неинициализированное значение ключа связи
// * АлгоритмРасчетаКоличества - Неопределено - неинициализированное значение алгоритма расчета количества
//
Функция СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам() Экспорт
	
	Возврат Новый Структура("Номенклатура,Характеристика,Количество,КлючСвязи,АлгоритмРасчетаКоличества");
	
КонецФункции

// Конструктор таблицы операндов источника данных
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Таблица операндов:
// * НомерСтроки - Число
// * Идентификатор - Строка 
// * НомерСтроки - Число
// * Идентификатор - Строка
// * Представление - Строка
// * ТипЗначения - ОписаниеТипов
// * ТипОперанда - Строка
Функция ТаблицаОперандовИсточникаДанныхКонструктор() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("НомерСтроки",   Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЗначения");
	Результат.Колонки.Добавить("ТипОперанда", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

// Конструктор описания операнда
// 
// Возвращаемое значение:
//  Структура -  Структура из:
// * НомерСтроки - Число
// * Идентификатор - Строка 
// * Представление - Строка 
// * ТипЗначения - ОписаниеТипов
// * ТипОперанда - Строка
Функция СтруктураОперандаИсточникаДанныхКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("НомерСтроки",   0);
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Представление", "");
	Результат.Вставить("ТипЗначения",   Новый ОписаниеТипов());
	Результат.Вставить("ТипОперанда",   "");
	
	Возврат Результат;
	
КонецФункции

// Определяет, содержит ли переданный путь к данным реквизит источника
// 
// Параметры:
// 	ПутьКДанным - см. ПараметрыДляРасчетаПоФормулам
// 	Описание - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// Возвращаемое значение:
// 	Булево - Истина, если путь к данным содержит реквизит источника
//
Функция ПутьКДаннымСодержитРеквизитИсточника(ПутьКДанным, Описание) Экспорт
	
	Для каждого Реквизит Из Описание.Реквизиты Цикл
		
		Если Реквизит.Идентификатор = ПутьКДанным.ИмяСвойства Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Добавляет операнды в описание источников
// 
// Параметры:
// 	ОписаниеИсточников - см. Справочники.РесурсныеСпецификации.ОписаниеИсточниковДанныхОперандов
// 	Объект - ДанныеФормыСтруктура - данные объекта
// 	ИмяТЧ - Строка - имя табличной части
// 	ДанныеСтроки - ДанныеФормыЭлементКоллекции - строка таблицы:
// 		* НомерСтроки - Число - номер строки
//
Процедура ДополнитьОписаниеИсточниковСоставомОперандов(ОписаниеИсточников, Объект, ИмяТЧ, ДанныеСтроки = Неопределено) Экспорт
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	СписокНаборов =           Новый Массив;
	СписокНоменклатуры =      Новый Массив;
	СписокВидовНоменклатуры = Новый Массив;
	
	Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
	
		Для каждого КлючИЗначение Из ОписаниеИсточников Цикл
			
			Ключ = КлючИЗначение.Ключ;
			ОписаниеИсточника = КлючИЗначение.Значение;
			
			Если ОписаниеИсточника.СодержитСвойства Тогда
				СписокНаборов.Добавить(ОписаниеИсточника.НаборСвойств);
			КонецЕсли;
			
			Если ОписаниеИсточника.СодержитСвойстваНоменклатуры Тогда
				Если ОписаниеИсточника.Коллекция Тогда
					Для каждого Строка Из Объект[Ключ] Цикл
						Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
							СписокНоменклатуры.Добавить(Строка.Номенклатура);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(ОписаниеИсточника.ИсточникСвойствНоменклатуры) Тогда
					Если ТипЗнч(ОписаниеИсточника.ИсточникСвойствНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
						СписокНоменклатуры.Добавить(ОписаниеИсточника.ИсточникСвойствНоменклатуры);
					Иначе
						СписокВидовНоменклатуры.Добавить(ОписаниеИсточника.ИсточникСвойствНоменклатуры);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "ВидНоменклатуры");
		Для каждого Элемент Из СписокНоменклатуры Цикл
			СписокВидовНоменклатуры.Добавить(РеквизитыНоменклатуры[Элемент].ВидНоменклатуры);
		КонецЦикла;

		СписокСвойств = ПолучитьСвойстваИсточниковДляРасчетаПоФормулам(СписокНаборов);
		СписокСвойствНоменклатуры = ПолучитьСвойстваНоменклатурыДляРасчетаПоФормулам(СписокВидовНоменклатуры);
	
	КонецЕсли;
	
	ТипыОперандов = РаботаСФормулами.ТипыЭлементовДереваОперандов();
	
	Для каждого КлючИЗначение Из ОписаниеИсточников Цикл
		
		Ключ = КлючИЗначение.Ключ;
		ОписаниеИсточника = КлючИЗначение.Значение; // см. СоздатьОписанияИсточникаДанныхОперандов
		
		ОперандыИсточника = Новый Массив;
		
		Если ОписаниеИсточника.Коллекция Тогда
			
			Таблица = Объект[Ключ]; // СправочникТабличнаяЧасть.РесурсныеСпецификации.МатериалыИУслуги
			
			Для каждого Строка Из Таблица Цикл
				
				Если ИмяТЧ = Ключ И ДанныеСтроки <> Неопределено И ДанныеСтроки.НомерСтроки <= Строка.НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторСтроки = СтрШаблон("%1[%2].", ОписаниеИсточника.Идентификатор, Формат(Строка.НомерСтроки, "ЧН=; ЧГ="));
				ПредставлениеСтроки = СтрШаблон(НСтр("ru = 'Строка[%1].';
													|en = 'Line[%1].'"), Формат(Строка.НомерСтроки, "ЧН=; ЧГ="));
				
				Для каждого Реквизит Из ОписаниеИсточника.Реквизиты Цикл
					СвойстваОперанда = СтруктураОперандаИсточникаДанныхКонструктор();
					СвойстваОперанда.НомерСтроки   = Строка.НомерСтроки;
					СвойстваОперанда.Идентификатор = ИдентификаторСтроки + Реквизит.Идентификатор;
					СвойстваОперанда.Представление = ПредставлениеСтроки + Реквизит.Представление;
					СвойстваОперанда.ТипЗначения   = Реквизит.ТипЗначения;
					СвойстваОперанда.ТипОперанда   = ТипыОперандов.Реквизит;
					ОперандыИсточника.Добавить(СвойстваОперанда);
				КонецЦикла;
				
				Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
				
					Если ОписаниеИсточника.СодержитСвойства Тогда
						
						НайденныеСвойства = СписокСвойств.НайтиСтроки(Новый Структура("Ссылка",
							ОписаниеИсточника.НаборСвойств));
							
						Для каждого Свойство Из НайденныеСвойства Цикл
							Если СвойствоИмеетДопустимыйДляОперандаТип(Свойство) Тогда
								СвойстваОперанда = СтруктураОперандаИсточникаДанныхКонструктор();
								СвойстваОперанда.НомерСтроки   = Строка.НомерСтроки;
								СвойстваОперанда.Идентификатор = ИдентификаторСтроки + Свойство.Идентификатор;
								СвойстваОперанда.Представление = ПредставлениеСтроки + Свойство.Представление;
								СвойстваОперанда.ТипЗначения   = Свойство.ТипЗначения;
								СвойстваОперанда.ТипОперанда   = ТипыОперандов.ДополнительныйРеквизит;
								ОперандыИсточника.Добавить(СвойстваОперанда);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Если ОписаниеИсточника.СодержитСвойстваНоменклатуры И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
						
						НайденныеСвойства = СписокСвойствНоменклатуры.НайтиСтроки(Новый Структура("Вид",
							РеквизитыНоменклатуры[Строка.Номенклатура].ВидНоменклатуры));
							
						Для каждого Свойство Из НайденныеСвойства Цикл
							Если СвойствоИмеетДопустимыйДляОперандаТип(Свойство) Тогда
								СвойстваОперанда = СтруктураОперандаИсточникаДанныхКонструктор();
								СвойстваОперанда.НомерСтроки   = Строка.НомерСтроки;
								СвойстваОперанда.Идентификатор = ИдентификаторСтроки + Свойство.Идентификатор;
								СвойстваОперанда.Представление = ПредставлениеСтроки + Свойство.Представление;
								СвойстваОперанда.ТипЗначения   = Свойство.ТипЗначения;
								СвойстваОперанда.ТипОперанда   = ТипыОперандов.ДополнительныйРеквизит;
								ОперандыИсточника.Добавить(СвойстваОперанда);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НЕ ПустаяСтрока(ОписаниеИсточника.ИмяТЧ) И ОписаниеИсточника.ИмяТЧ <> ИмяТЧ Тогда 
				Продолжить;
			КонецЕсли;
			
			Для каждого Реквизит Из ОписаниеИсточника.Реквизиты Цикл
				СвойстваОперанда = СтруктураОперандаИсточникаДанныхКонструктор();
				СвойстваОперанда.Идентификатор = ОписаниеИсточника.Идентификатор+"."+Реквизит.Идентификатор;
				СвойстваОперанда.Представление = Реквизит.Представление;
				СвойстваОперанда.ТипЗначения   = Реквизит.ТипЗначения;
				СвойстваОперанда.ТипОперанда   = ТипыОперандов.Реквизит;
				ОперандыИсточника.Добавить(СвойстваОперанда);
			КонецЦикла;
				
			Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
				
				Если ОписаниеИсточника.СодержитСвойства Тогда
					НайденныеСвойства = СписокСвойств.НайтиСтроки(Новый Структура("Ссылка", ОписаниеИсточника.НаборСвойств));
					Для каждого Свойство Из НайденныеСвойства Цикл
						Если СвойствоИмеетДопустимыйДляОперандаТип(Свойство) Тогда
							СвойстваОперанда = СтруктураОперандаИсточникаДанныхКонструктор();
							СвойстваОперанда.Идентификатор = ОписаниеИсточника.Идентификатор+"."+Свойство.Идентификатор;
							СвойстваОперанда.Представление = Свойство.Представление;
							СвойстваОперанда.ТипЗначения   = Свойство.ТипЗначения;
							СвойстваОперанда.ТипОперанда   = ТипыОперандов.ДополнительныйРеквизит;
							ОперандыИсточника.Добавить(СвойстваОперанда);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ОписаниеИсточника.СодержитСвойстваНоменклатуры Тогда
					
					ВидНоменклатуры = Неопределено;
					Если ОписаниеИсточника.ИмяТЧ <> "" И ДанныеСтроки <> Неопределено Тогда
						СтрокаТЧ = Объект[ОписаниеИсточника.ИмяТЧ][ДанныеСтроки.НомерСтроки-1];
						Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
							ВидНоменклатуры = РеквизитыНоменклатуры[СтрокаТЧ.Номенклатура].ВидНоменклатуры;
						КонецЕсли;
					ИначеЕсли ОписаниеИсточника.ИсточникСвойствНоменклатуры <> Неопределено Тогда
						Если ТипЗнч(ОписаниеИсточника.ИсточникСвойствНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
							ВидНоменклатуры = РеквизитыНоменклатуры[ОписаниеИсточника.ИсточникСвойствНоменклатуры].ВидНоменклатуры;
						Иначе
							ВидНоменклатуры = ОписаниеИсточника.ИсточникСвойствНоменклатуры;
						КонецЕсли;
					КонецЕсли;
					
					НайденныеСвойства = СписокСвойствНоменклатуры.НайтиСтроки(Новый Структура("Вид", ВидНоменклатуры));
					Для каждого Свойство Из НайденныеСвойства Цикл
						Если СвойствоИмеетДопустимыйДляОперандаТип(Свойство) Тогда
							СвойстваОперанда = СтруктураОперандаИсточникаДанныхКонструктор();
							СвойстваОперанда.Идентификатор = ОписаниеИсточника.Идентификатор+"."+Свойство.Идентификатор;
							СвойстваОперанда.Представление = Свойство.Представление;
							СвойстваОперанда.ТипЗначения   = Свойство.ТипЗначения;
							СвойстваОперанда.ТипОперанда   = ТипыОперандов.ДополнительныйРеквизит;
							ОперандыИсточника.Добавить(СвойстваОперанда);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОперандыИсточника.Количество() Тогда
			
			ТаблицаОперандов = ТаблицаОперандовИсточникаДанныхКонструктор();
			
			Для каждого Операнд Из ОперандыИсточника Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаОперандов.Добавить(), Операнд);
			КонецЦикла;
			
			ТаблицаОперандов.Индексы.Добавить("НомерСтроки");
			ТаблицаОперандов.Индексы.Добавить("Идентификатор");
			
			ОписаниеИсточника.Вставить("Операнды", ТаблицаОперандов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СвойствоИмеетДопустимыйДляОперандаТип(Свойство)
	
	Возврат Свойство.ТипЗначения.СодержитТип(Тип("Число"))
		ИЛИ Свойство.ТипЗначения.СодержитТип(Тип("Строка"))
		ИЛИ Свойство.ТипЗначения.СодержитТип(Тип("Дата"));
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОбновитьДанныеАвтоРасчета(Строка, ДанныеДляРасчета, ИмяПоля)

	Если (ДанныеДляРасчета.АвтоРасчет.Количество() = 0
			ИЛИ Строка.Владелец().Колонки.Найти("КлючСвязи") = Неопределено
		) Тогда
		
		Возврат;
	КонецЕсли;
	
	Параметры = ДанныеДляРасчета.АвтоРасчет[Строка.КлючСвязи];
	Если Параметры <> Неопределено Тогда
		Для каждого ИмяПараметра Из Параметры Цикл
			ДанныеДляРасчета.Параметры[ИмяПараметра] = Строка[ИмяПоля];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыполненияАлгоритмаАвтовыбора(ДанныеПоНоменклатуре, ЗначенияСвойствИзделия, СтрокаНабораДанных)
	
	Параметры = Новый Структура("Номенклатура, Спецификация, Распоряжение");
	
	Параметры.Номенклатура = СтрокаНабораДанных.Номенклатура;
	
	ЗаполнитьЗначенияСвойств(Параметры, ДанныеПоНоменклатуре,, "Номенклатура");
	
	ОсновноеИзделие = Новый Структура("Номенклатура, Характеристика, ЗначенияСвойств");
	
	ЗаполнитьЗначенияСвойств(ОсновноеИзделие, ДанныеПоНоменклатуре, "Номенклатура, Характеристика");
	
	ОсновноеИзделие.ЗначенияСвойств = Новый Соответствие;
	Для каждого Строка Из ЗначенияСвойствИзделия Цикл
		ОсновноеИзделие.ЗначенияСвойств.Вставить(Строка.СвойствоИдентификатор, Строка.Значение);
	КонецЦикла;
	
	Параметры.Вставить("ОсновноеИзделие", ОсновноеИзделие);
	
	Возврат Параметры;
	
КонецФункции

// Конструктор таблицы источников значений параметров для расчета по формулам
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - из:
// * Обработано - Булево - признак обработки объекта
// * Объект - СправочникСсылка.Номенклатура,СправочникСсылка.ХарактеристикиНоменклатуры,СправочникСсылка.НаправленияДеятельности,СправочникСсылка.СтруктураПредприятия,ДокументСсылка.ЗаказНаПроизводство2_2 - 
// * СвойствоЗаголовок - Строка - заголовок свойства
// * ПутьКДанным - Структура - 
Функция СоздатьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам() Экспорт

	ТипыОбъекта = "
	|СправочникСсылка.Номенклатура,
	|СправочникСсылка.ХарактеристикиНоменклатуры,
	|СправочникСсылка.НаправленияДеятельности,
	|СправочникСсылка.СтруктураПредприятия,
	|СправочникСсылка.РесурсныеСпецификации,
	|ДокументСсылка.ЗаказНаПроизводство2_2";
	
	ИсточникиЗначенийПараметров = Новый ТаблицаЗначений;
	ИсточникиЗначенийПараметров.Колонки.Добавить("Обработано",        Новый ОписаниеТипов("Булево"));
	ИсточникиЗначенийПараметров.Колонки.Добавить("Объект",            Новый ОписаниеТипов(ТипыОбъекта));
	ИсточникиЗначенийПараметров.Колонки.Добавить("СвойствоИдентификатор", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ИсточникиЗначенийПараметров.Колонки.Добавить("ПутьКДанным");
	
	Возврат ИсточникиЗначенийПараметров;
	
КонецФункции

Процедура ДополнитьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам(
	Менеджер,
	ИсточникиЗначенийПараметров,
	ИсточникиДанных,
	ОписаниеИсточников,
	ПараметрыДляРасчета) Экспорт
	
	Для каждого ПутьКДанным Из ПараметрыДляРасчета Цикл
		
		Описание = Неопределено;
		Если ПустаяСтрока(ПутьКДанным.Ключ)
			ИЛИ Не ОписаниеИсточников.Свойство(ПутьКДанным.Ключ, Описание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПутьКДаннымСодержитРеквизитИсточника(ПутьКДанным, Описание) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийИсточник = Менеджер.ИсточникДанныхДляРасчетаПоФормулам(ПутьКДанным, ИсточникиДанных);
		Если НЕ ЗначениеЗаполнено(ТекущийИсточник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Описание.СодержитСвойстваНоменклатуры Тогда
			
			ДобавитьЗаписьВТаблицуИсточниковЗначенийПараметров(
				ИсточникиЗначенийПараметров,
				ТекущийИсточник.Номенклатура,
				ПутьКДанным);
			
			Если ЗначениеЗаполнено(ТекущийИсточник.Характеристика) Тогда
				
				ДобавитьЗаписьВТаблицуИсточниковЗначенийПараметров(
					ИсточникиЗначенийПараметров,
					ТекущийИсточник.Характеристика,
					ПутьКДанным);
				
			КонецЕсли;
				
		ИначеЕсли Описание.СодержитСвойства Тогда
			
			ДобавитьЗаписьВТаблицуИсточниковЗначенийПараметров(
				ИсточникиЗначенийПараметров,
				ТекущийИсточник,
				ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запись в таблицу источников значений параметров
// 
// Параметры:
// 	ИсточникиЗначенийПараметров - см. СоздатьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам
// 	Объект - СправочникСсылка.Номенклатура,СправочникСсылка.ХарактеристикиНоменклатуры,СправочникСсылка.НаправленияДеятельности,СправочникСсылка.СтруктураПредприятия,ДокументСсылка.ЗаказНаПроизводство2_2 -
// 	ПутьКДанным - Структура - 
Процедура ДобавитьЗаписьВТаблицуИсточниковЗначенийПараметров(ИсточникиЗначенийПараметров, Объект, ПутьКДанным) Экспорт
	
	ПутьКДанным.Найден = Истина;
	
	НоваяСтрока = ИсточникиЗначенийПараметров.Добавить();
	НоваяСтрока.Объект            = Объект;
	НоваяСтрока.СвойствоИдентификатор = ПутьКДанным.ИмяСвойства;
	НоваяСтрока.ПутьКДанным       = ПутьКДанным;
	
КонецПроцедуры

// Производит заполнение значений параметров для расчета по формулам
// 
// Параметры:
// 	ИсточникиЗначенийПараметров - см. СоздатьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам
Процедура ЗаполнитьЗначенияПараметровДляРасчетаПоФормулам(ИсточникиЗначенийПараметров) Экспорт
	
	Если ИсточникиЗначенийПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеПоля = "Объект,СвойствоИдентификатор";
	
	ИсточникиЗначенийПараметров.Индексы.Добавить(КлючевыеПоля);
	
	ИсточникиЗначенийПараметровСвертка = ИсточникиЗначенийПараметров.Скопировать(,КлючевыеПоля);
	ИсточникиЗначенийПараметровСвертка.Свернуть(КлючевыеПоля);
	ОписаниеТиповИдентификатор = ИсточникиЗначенийПараметровСвертка.Колонки["СвойствоИдентификатор"].ТипЗначения;
	ИсточникиЗначенийПараметровСвертка.Колонки.Добавить("ИдентификаторВТаблице", ОписаниеТиповИдентификатор);
	Для каждого СтрокаТаблицы Из ИсточникиЗначенийПараметровСвертка Цикл
		СтрокаТаблицы.ИдентификаторВТаблице = РаботаСФормулами.СвойстваХарактеристики(
			СтрокаТаблицы.СвойствоИдентификатор).Идентификатор;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Объект            КАК Объект,
	|	Т.СвойствоИдентификатор КАК СвойствоИдентификатор,
	|	Т.ИдентификаторВТаблице КАК ИдентификаторВТаблице
	|ПОМЕСТИТЬ ИсточникиЗначенийПараметров
	|ИЗ
	|	&ИсточникиЗначенийПараметров КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторВТаблице
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиЗначенийПараметров.Объект            КАК Объект,
	|	ДополнительныеРеквизитыИСведения.Ссылка       КАК Свойство,
	|	ИсточникиЗначенийПараметров.СвойствоИдентификатор КАК СвойствоИдентификатор
	|ПОМЕСТИТЬ ИсточникиЗначений
	|ИЗ
	|	ИсточникиЗначенийПараметров КАК ИсточникиЗначенийПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ИсточникиЗначенийПараметров.ИдентификаторВТаблице = &ВыражениеИдентификатораДопРеквизитовВФормулах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	1                                   КАК Приоритет,
	|	ИсточникиЗначений.Объект            КАК Объект,
	|	ИсточникиЗначений.СвойствоИдентификатор КАК СвойствоИдентификатор,
	|	ДополнительныеРеквизиты.Значение    КАК Значение
	|ИЗ
	|	Справочник.НаправленияДеятельности.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникиЗначений КАК ИсточникиЗначений
	|		ПО ДополнительныеРеквизиты.Ссылка = ИсточникиЗначений.Объект
	|			И ДополнительныеРеквизиты.Свойство = ИсточникиЗначений.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	2,
	|	ИсточникиЗначений.Объект,
	|	ИсточникиЗначений.СвойствоИдентификатор,
	|	ДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникиЗначений КАК ИсточникиЗначений
	|		ПО ДополнительныеРеквизиты.Ссылка = ИсточникиЗначений.Объект
	|			И ДополнительныеРеквизиты.Свойство = ИсточникиЗначений.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ИсточникиЗначений.Объект,
	|	ИсточникиЗначений.СвойствоИдентификатор,
	|	ДополнительныеРеквизиты.Значение
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникиЗначений КАК ИсточникиЗначений
	|		ПО ДополнительныеРеквизиты.Ссылка = ИсточникиЗначений.Объект
	|			И ДополнительныеРеквизиты.Свойство = ИсточникиЗначений.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ИсточникиЗначений.Объект,
	|	ИсточникиЗначений.СвойствоИдентификатор,
	|	ДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникиЗначений КАК ИсточникиЗначений
	|		ПО ДополнительныеРеквизиты.Ссылка = ИсточникиЗначений.Объект
	|			И ДополнительныеРеквизиты.Свойство = ИсточникиЗначений.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ИсточникиЗначений.Объект,
	|	ИсточникиЗначений.СвойствоИдентификатор,
	|	ДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникиЗначений КАК ИсточникиЗначений
	|		ПО ДополнительныеРеквизиты.Ссылка = ИсточникиЗначений.Объект
	|			И ДополнительныеРеквизиты.Свойство = ИсточникиЗначений.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	6,
	|	ИсточникиЗначений.Объект,
	|	ИсточникиЗначений.СвойствоИдентификатор,
	|	ДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникиЗначений КАК ИсточникиЗначений
	|		ПО ДополнительныеРеквизиты.Ссылка = ИсточникиЗначений.Объект
	|			И ДополнительныеРеквизиты.Свойство = ИсточникиЗначений.Свойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ВыражениеИдентификатора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ДополнительныеРеквизитыИСведения.%1",
		РаботаСФормулами.ПолеИдентификатораДополнительныхРеквизитовИСведений());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатораДопРеквизитовВФормулах", ВыражениеИдентификатора);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсточникиЗначенийПараметров", ИсточникиЗначенийПараметровСвертка);
	
	СтруктураОтбора = Новый Структура(КлючевыеПоля);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		
		НайденныеСтроки = ИсточникиЗначенийПараметров.НайтиСтроки(СтруктураОтбора);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НайденнаяСтрока.Обработано Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока.ПутьКДанным.Значение = Выборка.Значение;
			НайденнаяСтрока.Обработано           = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтборПоСвойствам

Функция ИсточникиСвойствДляОтбораПоСвойствам()
	
	Результат = Новый Массив;
	
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("НаправлениеДеятельности");
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЗначенияОтбораПоСвойствам() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Свойство");
	Результат.Колонки.Добавить("Условие");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Значение1");
	Результат.Колонки.Добавить("Значение2");
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияУточненийПримененияСпецификаций(Спецификации) Экспорт
	
	Результат = Новый Соответствие;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Свойство    КАК Свойство,
	|	Т.Условие     КАК Условие,
	|	Т.Значение    КАК Значение,
	|	Т.Ссылка      КАК Спецификация,
	|	Т.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ОтборПоСвойствам КАК Т
	|ГДЕ
	|	Т.Ссылка В (&Спецификации)
	|	И Т.КлючСвязи В (&КлючСвязиНоменклатура, &КлючСвязиХарактеристика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спецификация,
	|	НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	Запрос.УстановитьПараметр("КлючСвязиНоменклатура",   УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Номенклатура"));
	Запрос.УстановитьПараметр("КлючСвязиХарактеристика", УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Характеристика"));
	
	ЗначенияНастроек = Запрос.Выполнить().Выгрузить();
	ЗначенияНастроек.Индексы.Добавить("Спецификация");
	Для каждого Спецификация Из Спецификации Цикл
		
		ЗначенияНастроекСпецификации = ЗначенияНастроек.Скопировать(Новый Структура("Спецификация", Спецификация));
		ЗначенияНастроекСпецификации.Сортировать("НомерСтроки");
		
		ЗначенияУточненийПримененияСпецификации = ТаблицаЗначенияОтбораПоСвойствам();
		ЗаполнитьСписокОтборовПоСвойствам(ЗначенияУточненийПримененияСпецификации, ЗначенияНастроекСпецификации, Истина);
		
		Результат.Вставить(Спецификация, ЗначенияУточненийПримененияСпецификации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает условное оформление таблицы отбора по свойствам
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы
Процедура УстановитьУсловноеОформлениеТаблицыОтбораПоСвойствам(УсловноеОформление) Экспорт
	
	ИмяТаблицы = "ОтборПоСвойствам";
	
	// условия использования
	
	УсловияЗаполненность = Новый СписокЗначений;
	УсловияИнтервал      = Новый СписокЗначений;
	
	СтруктураУсловий = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловийОтбораПоСвойствамНоменклатуры();
	Для каждого КлючИЗначение Из СтруктураУсловий Цикл
		
		Условие = КлючИЗначение.Значение; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловияОтбораПоСвойствамНоменклатуры
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Условие");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.Условие", ИмяТаблицы));
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Условие.Идентификатор;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Условие.Представление);
		
		Если Условие.Заполненность Тогда
			УсловияЗаполненность.Добавить(Условие.Идентификатор);
		КонецЕсли;
		
		Если Условие.Интервал Тогда
			УсловияИнтервал.Добавить(Условие.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Условие");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Значение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.Свойство", ИмяТаблицы));
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// отбор по свойствам в интервале
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ГруппаДиапазон");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Значение1");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Значение2");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.Условие", ИмяТаблицы));
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = УсловияИнтервал;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Значение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.Условие", ИмяТаблицы));
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = УсловияИнтервал;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// отбор по свойствам на заполнено, не заполнено
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Значение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.Условие", ИмяТаблицы));
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = УсловияЗаполненность;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
КонецПроцедуры

Процедура ЗаполнитьСписокОтборовПоСвойствам(ТаблицаДанных, ТаблицаНастроек, УсловиеСтруктурой = Ложь) Экспорт
	
	НастройкиГруппировки = Новый Структура;
	
	НастройкиГруппировки.Вставить("ВСписке",
							Новый Структура("Дополнение, Результат", "ВСписке", "ВСписке"));
	НастройкиГруппировки.Вставить("НеВСписке",
							Новый Структура("Дополнение, Результат", "НеВСписке", "НеВСписке"));
	НастройкиГруппировки.Вставить("Меньше",
							Новый Структура("Дополнение, Результат", "Больше", "ВИнтервале"));
	НастройкиГруппировки.Вставить("МеньшеИлиРавно",
							Новый Структура("Дополнение, Результат", "БольшеИлиРавно", "ВИнтервалеВключая"));
	
	ТекущаяСтрока = Неопределено;
	
	Для каждого Элемент Из ТаблицаНастроек Цикл
		
		Настройка = Новый Структура; // см. ПроизводствоСервер.СлужебнаяСтруктураСтруктуры - 
		Если НастройкиГруппировки.Свойство(Элемент.Условие, Настройка)
			И ТекущаяСтрока <> Неопределено
			И ТекущаяСтрока.Свойство = Элемент.Свойство 
			И ТекущаяСтрока.Условие = Настройка.Дополнение Тогда
			
			Если Настройка.Дополнение = Настройка.Результат Тогда
				ТекущаяСтрока.Значение.Добавить(Элемент.Значение);
			Иначе
				ТекущаяСтрока.Значение1 = ТекущаяСтрока.Значение;
				ТекущаяСтрока.Значение2 = Элемент.Значение;
				ТекущаяСтрока.Условие   = Настройка.Результат;
				ТекущаяСтрока = Неопределено;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока = ТаблицаДанных.Добавить();
			ТекущаяСтрока.Свойство = Элемент.Свойство;
			ТекущаяСтрока.Условие  = Элемент.Условие;
			Если Настройка <> Неопределено И Настройка.Дополнение = Настройка.Результат Тогда
				ТекущаяСтрока.Значение = Новый СписокЗначений;
				ТекущаяСтрока.Значение.ТипЗначения = Элемент.Свойство.ТипЗначения;
				ТекущаяСтрока.Значение.Добавить(Элемент.Значение);
			Иначе
				ТекущаяСтрока.Значение = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УсловиеСтруктурой Тогда
		СтруктураУсловий = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловийОтбораПоСвойствамНоменклатуры();
		Для каждого ТекущаяСтрока Из ТаблицаДанных Цикл
			ТекущаяСтрока.Условие = СтруктураУсловий[ТекущаяСтрока.Условие];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаДоступныеСвойстваНоменклатуры(ТолькоДействующие = Истина, ДоступныСвойстваНоменклатуры = Истина, ДоступныСвойстваХарактеристики = Истина)
	
	ТекстыЗапроса = Новый Массив();
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)                             КАК Вид,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка) КАК Свойство
	|ГДЕ
	|	ЛОЖЬ
	|");
	
	Если ДоступныСвойстваНоменклатуры Тогда
		
		// Доп реквизиты общие для номенклатуры
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Вид,
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ПО ИСТИНА
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка В (&ВидыНоменклатуры)
		|	И ТаблицаСвойств.Ссылка = &Набор_Справочник_Номенклатура_Общие
		|	И &ТолькоДействующие");
		
		// Доп реквизиты вида номенклатуры
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Вид,
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ПО ВидыНоменклатуры.НаборСвойств = ТаблицаСвойств.Ссылка
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка В (&ВидыНоменклатуры)
		|	И &ТолькоДействующие");
		
	КонецЕсли;
	
	Если ДоступныСвойстваХарактеристики Тогда
	
		// Доп реквизиты общие для всех характеристик
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Вид,
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ПО ИСТИНА
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка В (&ВидыНоменклатуры) 
		|	И ВидыНоменклатуры.ИспользоватьХарактеристики
		|	И ТаблицаСвойств.Ссылка = &Набор_Справочник_ХарактеристикиНоменклатуры_Общие
		|	И &ТолькоДействующие");
		
		// Доп реквизиты характеристик вида номенклатуры
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Вид,
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ПО (ВЫБОР
		|				КОГДА ВидыНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА ВидыНоменклатуры.ВладелецХарактеристик.НаборСвойствХарактеристик
		|				ИНАЧЕ ВидыНоменклатуры.НаборСвойствХарактеристик
		|			КОНЕЦ = ТаблицаСвойств.Ссылка)
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)
		|	И &ТолькоДействующие");
	
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Символы.ПС + " ОБЪЕДИНИТЬ " + Символы.ПС);
	
	Если ТолькоДействующие Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТолькоДействующие", "И НЕ ТаблицаСвойств.ПометкаУдаления");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТолькоДействующие", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить("
	|ВЫБРАТЬ
	|	Т.Вид                                     КАК Вид,
	|	Т.Свойство                                КАК Свойство,
	|	ПРЕДСТАВЛЕНИЕ(Т.Свойство)                 КАК Представление,
	|	Т.Свойство.ТипЗначения                    КАК ТипЗначения,
	|	Т.Свойство.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
	|	Т.Свойство.ПометкаУдаления                КАК ПометкаУдаления,
	|	&ВыражениеИдентификатора                  КАК Идентификатор
	|ИЗ
	|	&ТекстЗапроса КАК Т", "&ТекстЗапроса", "(" + ТекстЗапроса + ")");
	
	МДДопРеквизитов = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ВыражениеИдентификатора = РаботаСФормулами.ВыражениеПолногоИдентификатораХарактеристики(МДДопРеквизитов, Ложь);
	ВыражениеИдентификатора = СтрЗаменить(ВыражениеИдентификатора, "%ИмяТаблицы%", "Т.Свойство");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатора", ВыражениеИдентификатора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДоступныеСвойстваИсточников(ТолькоДействующие = Истина)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Ссылка               КАК Ссылка,
	|	Т.Свойство             КАК Свойство,
	|	ПРЕДСТАВЛЕНИЕ(Т.Свойство)   КАК Представление,
	|	&ВыражениеИдентификатора    КАК Идентификатор,
	|	Т.Свойство.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Т
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ТаблицаДопРеквизитов
	|ПО
	|	Т.Свойство = ТаблицаДопРеквизитов.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&СписокНаборов)
	|	И &ТолькоДействующие
	|";
	
	МДДопРеквизитов = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ВыражениеИдентификатора = РаботаСФормулами.ВыражениеПолногоИдентификатораХарактеристики(МДДопРеквизитов, Ложь);
	ВыражениеИдентификатора = СтрЗаменить(ВыражениеИдентификатора, "%ИмяТаблицы%", "ТаблицаДопРеквизитов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатора", ВыражениеИдентификатора);
	
	Если ТолькоДействующие Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТолькоДействующие", "И НЕ ТаблицаДопРеквизитов.ПометкаУдаления");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТолькоДействующие", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДеревоСпецификаций

Процедура ЗаполнитьДеревоСпецификаций(Параметры, Дерево)
	
	Дерево.Строки.Очистить();
	
	КлючСвязи = Неопределено;
	НоваяСтрокаДерева = Неопределено;
	
	ИспользованныеСпецификации = Неопределено;
	
	Номенклатура               = Параметры.Номенклатура;
	ХарактеристикаНоменклатуры = Параметры.ХарактеристикаНоменклатуры;
	
	ПараметрыВыбораИзготовлениеСборка = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		НоваяСтрокаДерева = Дерево.Строки.Добавить(); // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
		НоваяСтрокаДерева.Идентификатор  = Новый УникальныйИдентификатор;
		НоваяСтрокаДерева.ВидСтроки      = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		НоваяСтрокаДерева.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрокаДерева.ВидСтроки);
		
		НоваяСтрокаДерева.Номенклатура   = Номенклатура;
		НоваяСтрокаДерева.Характеристика = ХарактеристикаНоменклатуры;
		
		// Проверяем используются характеристики или нет.
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			НоваяСтрокаДерева.Номенклатура,
			НоваяСтрокаДерева.Характеристика,
			Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		НоваяСтрокаДерева.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		
		НоваяСтрокаДерева.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
		
		Если Не ЗначениеЗаполнено(Параметры.Спецификация) Тогда
			
			ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
			ДанныеОбИзделии.Номенклатура            = Номенклатура;
			ДанныеОбИзделии.Характеристика          = ХарактеристикаНоменклатуры;
			ДанныеОбИзделии.НачалоПроизводства      = Параметры.Дата;
			ДанныеОбИзделии.ПодразделениеДиспетчер  = Параметры.ПодразделениеДиспетчер;
			ДанныеОбИзделии.НаправлениеДеятельности = Параметры.НаправлениеДеятельности;
			
			ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
				ДанныеОбИзделии, ПараметрыВыбораИзготовлениеСборка);
			
			Если НЕ ЗначениеЗаполнено(ДанныеСпецификации) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не найдена спецификация для изделия.';
						|en = 'BOM for the item is not found.'"),
					,
					"ДеревоСпецификаций");
				Возврат;
			КонецЕсли;
			
			НоваяСтрокаДерева.Спецификация = ДанныеСпецификации.Спецификация;
		Иначе
			НоваяСтрокаДерева.Спецификация = Параметры.Спецификация;
		КонецЕсли;
		
		// Режим по спецификации заказа
		Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
			
			НоваяСтрокаДерева.Количество         = Параметры.КоличествоВыходногоИзделия;
			НоваяСтрокаДерева.КоличествоУпаковок = Параметры.КоличествоУпаковокВыходногоИзделия;
			НоваяСтрокаДерева.Упаковка           = Параметры.УпаковкаВыходногоИзделия;
			
			КлючСвязи                            = Параметры.КлючСвязи;
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.КоличествоУпаковокВыходногоИзделия) Тогда
			
			НоваяСтрокаДерева.Количество         = Параметры.КоличествоВыходногоИзделия;
			НоваяСтрокаДерева.КоличествоУпаковок = Параметры.КоличествоУпаковокВыходногоИзделия;
			НоваяСтрокаДерева.Упаковка           = Параметры.УпаковкаВыходногоИзделия;
			
		Иначе
			
			ДанныеОсновногоИзделия = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
				НоваяСтрокаДерева.Спецификация,
				Номенклатура,
				ХарактеристикаНоменклатуры);
			
			Если ДанныеОсновногоИзделия.Номенклатура.Пустая() Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ДанныеОсновногоИзделия, "Количество,КоличествоУпаковок,Упаковка");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаДерева.Упаковка) Тогда
			НоваяСтрокаДерева.Упаковка = НоваяСтрокаДерева.ЕдиницаИзмерения;
		КонецЕсли;
		
		НоваяСтрокаДерева.ЕстьСпецификация = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Спецификация) Тогда
		
		НоваяСтрокаДерева = Дерево.Строки.Добавить(); // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой
		НоваяСтрокаДерева.Идентификатор  = Новый УникальныйИдентификатор;
		НоваяСтрокаДерева.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрокаДерева.ВидСтроки);
		НоваяСтрокаДерева.ВидСтроки      = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		
		ОсновноеИзделие = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(Параметры.Спецификация);
		
		Если ЗначениеЗаполнено(ОсновноеИзделие.Номенклатура) Тогда
			НоваяСтрокаДерева.Номенклатура    = ОсновноеИзделие.Номенклатура;
			НоваяСтрокаДерева.Характеристика  = ОсновноеИзделие.Характеристика;
		Иначе
			НоваяСтрокаДерева.ВидНоменклатуры = ОсновноеИзделие.ВидНоменклатуры;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаДерева, ОсновноеИзделие, "Количество,КоличествоУпаковок,Упаковка,ЕдиницаИзмерения,ХарактеристикиИспользуются");
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаДерева.Упаковка) Тогда
			НоваяСтрокаДерева.Упаковка = НоваяСтрокаДерева.ЕдиницаИзмерения;
		КонецЕсли;
		
		НоваяСтрокаДерева.ЕстьСпецификация = Истина;
		НоваяСтрокаДерева.Спецификация = Параметры.Спецификация;
		
	КонецЕсли;
	
	ЕстьСпецификация = (НоваяСтрокаДерева <> Неопределено И НоваяСтрокаДерева.ЕстьСпецификация ИЛИ НоваяСтрокаДерева = Неопределено);
	
	Если Не Параметры.ДинамическоеСчитывание И ЕстьСпецификация Тогда
		
		ИспользованныеСпецификации = Новый Массив;
		
		Если НоваяСтрокаДерева <> Неопределено Тогда
			ИспользованныеСпецификации.Добавить(НоваяСтрокаДерева.Спецификация);
		Иначе
			ИспользованныеСпецификации.Добавить(Параметры.Спецификация);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСтрокиДерева(Параметры, Дерево, НоваяСтрокаДерева, ИспользованныеСпецификации, КлючСвязи);
	
КонецПроцедуры

Процедура ПродолжитьРазузлованиеПоСтрокеДерева(Параметры, Дерево, СтрокаДерева, ИспользованныеСпецификации = Неопределено, КлючСвязи = Неопределено)
	
	СтрокаДерева.ЕстьСпецификация = Истина;
	
	Если Параметры.ДинамическоеСчитывание Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользованныеСпецификации.Найти(СтрокаДерева.Спецификация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованныеСпецификации.Добавить(СтрокаДерева.Спецификация);
	ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева, ИспользованныеСпецификации, КлючСвязи);
	ИспользованныеСпецификации.Удалить(ИспользованныеСпецификации.Найти(СтрокаДерева.Спецификация));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСпецификацииСтрокДерева(Параметры, МассивСтрок, ПараметрыВыборки = Неопределено)
	
	Если МассивСтрок.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыборки = Неопределено Тогда
		
		ПереченьДанных = ПереченьДанныхСпецификацииДерева();
		
		ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(ПереченьДанных);
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска = Новый Структура("Использовать,ВыпускПроизвольнымиПорциями",Истина,Истина);
		ПараметрыВыборки.ПолучитьПредставления                 = Истина;
		ПараметрыВыборки.УчитыватьВероятностьБрака             = Ложь;
		ПараметрыВыборки.ВариантЗаполненияОбеспечения          = ?(Параметры.ВыводитьОстаткиТоваров,
																		Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения,
																		Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.НеЗаполнять);
		ПараметрыВыборки.СпособРасчетаМатериалов               = Перечисления.СпособыРасчетаМатериалов.МаксимальноеПотребление;
		
	КонецЕсли;
	
	СписокНоменклатуры = Справочники.РесурсныеСпецификации.СписокНоменклатуры();
	
	Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивСтрок[Индекс]);
		НоваяСтрока.НачалоПроизводства      = Параметры.Дата;
		НоваяСтрока.ПодразделениеДиспетчер  = Параметры.ПодразделениеДиспетчер;
		НоваяСтрока.НаправлениеДеятельности = Параметры.НаправлениеДеятельности;
	КонецЦикла;
	
	ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыборки);
	
	Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
		МассивСтрок[Индекс].СтруктураДанных = ДанныеСпецификаций[Индекс];
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИндексКартинки(ВидСтроки, ЕстьСпецификация = Ложь)
	
	// Этап
	Если ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Этап Тогда
		Возврат БиблиотекаКартинок.РедакторПроизводственногоПроцессаЭтап;
	// Операция
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Операция Тогда
		Возврат БиблиотекаКартинок.РедакторПроизводственногоПроцессаОперация;
	// Материал
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал И Не ЕстьСпецификация Тогда
		Возврат 2;
	// Трудозатрата
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата Тогда
		Возврат 3;
	// Выходное изделие
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие И Не ЕстьСпецификация Тогда
		Возврат 4;
	// Полуфабрикат( материал )
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал И ЕстьСпецификация Тогда
		Возврат 7;
	// Полуфабрикат( выходное изделие )
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие И ЕстьСпецификация Тогда
		Возврат 8;
	Иначе
		Возврат 10;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеСпецификацииЗаказа(АдресВХранилище, КлючСвязи)
	
	ДанныеЗаказа = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	СтруктураОтбора = Новый Структура("КлючСвязиПолуфабрикат", КлючСвязи);
	Этапы = ДанныеЗаказа.Этапы.Скопировать(СтруктураОтбора);
	
	ВыходныеИзделия = ДанныеЗаказа.ВыходныеИзделия.СкопироватьКолонки(); // ТаблицаЗначений
	ВыходныеИзделия.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ВыходныеИзделия.Колонки.Добавить("ОбработатьПоСпецификации", Новый ОписаниеТипов("Булево"));
	ВыходныеИзделия.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));

	ВозвратныеОтходы = ДанныеЗаказа.ВыходныеИзделия.СкопироватьКолонки(); // ТаблицаЗначений
	ВозвратныеОтходы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ВозвратныеОтходы.Колонки.Добавить("ОбработатьПоСпецификации", Новый ОписаниеТипов("Булево"));
	ВозвратныеОтходы.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	
	МатериалыИУслуги = ДанныеЗаказа.МатериалыИУслуги.СкопироватьКолонки(); // ТаблицаЗначений
	МатериалыИУслуги.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	МатериалыИУслуги.Колонки.Добавить("СпособПолученияМатериала", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПолученияМатериаловВСпецификации"));
	МатериалыИУслуги.Колонки.Добавить("СпецификацияРемонта", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	
	Трудозатраты = ДанныеЗаказа.Трудозатраты.СкопироватьКолонки(); // ТаблицаЗначений
	Трудозатраты.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого СтрокаЭтапы Из Этапы Цикл
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", СтрокаЭтапы.КлючСвязи); 
		
		НайденныеСтроки = ДанныеЗаказа.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = МатериалыИУслуги.Добавить();
			Если Строка.ПроизводитсяВПроцессе
				И ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
				НоваяСтрока.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
			Иначе
				НоваяСтрока.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.Трудозатраты.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.ВидРабот, "ЕдиницаИзмерения");
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	
	СтруктураДанных.Вставить("ТипПроизводственногоПроцесса", Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	СтруктураДанных.Вставить("ВариантНазначения", Перечисления.ВариантыНазначенияСпецификации.Номенклатура);
	
	СтруктураДанных.Вставить("ВыходныеИзделия",  ВыходныеИзделия);
	СтруктураДанных.Вставить("ВозвратныеОтходы", ВозвратныеОтходы);
	СтруктураДанных.Вставить("МатериалыИУслуги", МатериалыИУслуги);
	СтруктураДанных.Вставить("Трудозатраты",     Трудозатраты);
	
	СтруктураДанных.Вставить("Этапы", Этапы);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Конструктор структуры дерева спецификаций
// 
// Параметры:
// 	Параметры - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДереваСпецификаций
// 	Дерево - ДеревоЗначений - данные дерева спецификаций
// Возвращаемое значение:
// 	Структура - из:
// * Параметры - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДереваСпецификаций
// * Дерево - Произвольный - данные дерева спецификаций
//
Функция СтруктураДереваСпецификаций(Параметры, Дерево)
	
	Возврат Новый Структура("Параметры, Дерево", Параметры, Дерево);
	
КонецФункции

Функция ЗакэшироватьСтруктуруДереваСпецификаций(Параметры, Дерево, Адрес)
	
	СтруктураДерева = СтруктураДереваСпецификаций(Параметры, Дерево);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДерева, Адрес);

КонецФункции

Процедура СтрокаДереваСпецификацийВМассивСтруктур(Строка, МассивСтруктур)
	
	Для каждого Строка Из Строка.Строки Цикл

		СтрокаСтруктура = УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой(Строка);
		
		Если Не Строка.ЕстьСпецификация Тогда
			СтрокаДереваСпецификацийВМассивСтруктур(Строка, СтрокаСтруктура.Строки);
		КонецЕсли;
		
		МассивСтруктур.Добавить(СтрокаСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПереченьДанныхСпецификацииДерева(ВыводитьЭтапы = Истина, ВыводитьТрудозатраты = Истина)
	
	ПереченьДанных = Новый Массив;
	
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ПереченьДанных.Добавить("ВыходныеИзделия");
	ПереченьДанных.Добавить("ВозвратныеОтходы");
		
	Если ВыводитьТрудозатраты Тогда
		ПереченьДанных.Добавить("Трудозатраты");
	КонецЕсли;
	
	Если ВыводитьЭтапы Тогда
		ПереченьДанных.Добавить("Этапы");
		ПереченьДанных.Добавить("Операции");
	КонецЕсли;
	
	Возврат ПереченьДанных;
	
КонецФункции

Функция НастройкиОтбораДереваСпецификацииКонструктор()
	
	НастройкиОтбора = Новый Структура;
	
	НастройкиОтбора.Вставить("ДеревоВыводитьЭтапы",                Истина);
	НастройкиОтбора.Вставить("ДеревоВыводитьОперации",             Истина);
	НастройкиОтбора.Вставить("ДеревоВыводитьВыходныеИзделия",      Истина);
	НастройкиОтбора.Вставить("ДеревоВыводитьМатериалы",            Истина);
	НастройкиОтбора.Вставить("ДеревоВыводитьТрудозатраты",         Истина);
	НастройкиОтбора.Вставить("ДеревоВыводитьЗаголовкиГруппировок", Истина);
	
	Возврат НастройкиОтбора;
	
КонецФункции

Процедура ЗагрузитьНастройкиОтбораДереваСпецификации(Форма) Экспорт
	
	НастройкиОтбора = НастройкиОтбораДереваСпецификацииКонструктор();
	
	НастройкиОтбораСохраненные = ХранилищеНастроекДанныхФорм.Загрузить("ДеревоРесурсныхСпецификаций", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(НастройкиОтбораСохраненные) Тогда
		ЗаполнитьЗначенияСвойств(НастройкиОтбора, НастройкиОтбораСохраненные);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, НастройкиОтбора);
	
КонецПроцедуры

Процедура СохранитьНастройкиОтбораДереваСпецификации(Форма) Экспорт
	
	НастройкиОтбора = НастройкиОтбораДереваСпецификацииКонструктор();
	
	ЗаполнитьЗначенияСвойств(НастройкиОтбора, Форма);
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДеревоРесурсныхСпецификаций", "ПараметрыОтбора", НастройкиОтбора);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиОтбораДереваСпецификации(ПараметрыДерева, Форма) Экспорт
	
	ПараметрыДерева.ВыводитьЭтапы                = Форма.ДеревоВыводитьЭтапы;
	ПараметрыДерева.ВыводитьОперации             = Форма.ДеревоВыводитьОперации;
	ПараметрыДерева.ВыводитьВыходныеИзделия      = Форма.ДеревоВыводитьВыходныеИзделия;
	ПараметрыДерева.ВыводитьМатериалы            = Форма.ДеревоВыводитьМатериалы;
	ПараметрыДерева.ВыводитьТрудозатраты         = Форма.ДеревоВыводитьТрудозатраты;
	ПараметрыДерева.ВыводитьЗаголовкиГруппировок = Форма.ДеревоВыводитьЗаголовкиГруппировок;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ДанныеУпаковки

Процедура ЗаполнитьДанныеУпаковокВНабореДанных(НаборДанных, ТаблицаДанныхУпаковок) Экспорт
	
	Если НаборДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска              = Новый Структура("Номенклатура,Упаковка");
	СтруктураУпаковкиПоУмолчанию = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
	
	Для каждого Строка Из НаборДанных Цикл
		Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
			ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(Строка, ТаблицаДанныхУпаковок, СтруктураПоиска);
		Иначе
			Строка.ДанныеУпаковки = СтруктураУпаковкиПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(Строка, ТаблицаДанныхУпаковок, СтруктураПоиска = Неопределено) Экспорт
	
	РеквизитыПоиска = "Номенклатура,Упаковка";
	
	Если ТаблицаДанныхУпаковок.Индексы.Количество() = 0 Тогда
		ТаблицаДанныхУпаковок.Индексы.Добавить(РеквизитыПоиска);
	КонецЕсли;
	
	Если СтруктураПоиска = Неопределено Тогда
		СтруктураПоиска = Новый Структура(РеквизитыПоиска, Строка.Номенклатура, Строка.Упаковка);
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
	КонецЕсли;
	
	СтрокаТаблицы = Неопределено;
	
	НайденныеСтроки = ТаблицаДанныхУпаковок.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТаблицы = НайденныеСтроки[0];
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДанныеУпаковки) Тогда
		
			Строка.ДанныеУпаковки = СтрокаТаблицы.ДанныеУпаковки;
			Возврат;
			
		КонецЕсли;
		
		СтрокаТаблицы.ДанныеУпаковки = СтруктураДанныхУпаковки(НайденныеСтроки[0]);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы) И ЗначениеЗаполнено(СтрокаТаблицы.ДанныеУпаковки) Тогда
		Строка.ДанныеУпаковки = СтрокаТаблицы.ДанныеУпаковки;
	Иначе
		Строка.ДанныеУпаковки = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеТаблицыТекстаЗапросаДанныеУпаковок() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяТаблицы",           "");
	Результат.Вставить("ТекстСоединения",      "");
	Результат.Вставить("ИсточникНоменклатуры", "");
	Результат.Вставить("ИсточникУпаковки",     "");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДанныеУпаковок(ОписанияТаблиц) Экспорт
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Упаковка     КАК Упаковка,
	|
	|	&ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения,
	|
	|	НЕОПРЕДЕЛЕНО   КАК ДанныеУпаковки
	|
	|ИЗ
	|	&ИмяТаблицы КАК Т
	|
	|		,ТекстСоединения
	|
	|ГДЕ
	|	Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|
	|";
	
	ТекстЗапроса = "";
	Для Индекс = 0 По ОписанияТаблиц.ВГраница() Цикл
		
		ОписаниеТаблицы = ОписанияТаблиц[Индекс];
		Если ТипЗнч(ОписаниеТаблицы) = Тип("Строка") Тогда
			ОписаниеТаблицы = ОписаниеТаблицыТекстаЗапросаДанныеУпаковок();
			ОписаниеТаблицы.ИмяТаблицы = ОписанияТаблиц[Индекс];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + СтрШаблон("
				| %1
				|", "ОБЪЕДИНИТЬ"+?(Индекс = ОписанияТаблиц.ВГраница(),"", " ВСЕ"));
			
		КонецЕсли;
		
		ТекстЗапросаПоШаблону = СтрЗаменить(ШаблонЗапроса,         "&ИмяТаблицы",      ОписаниеТаблицы.ИмяТаблицы);
		ТекстЗапросаПоШаблону = СтрЗаменить(ТекстЗапросаПоШаблону, ",ТекстСоединения", ОписаниеТаблицы.ТекстСоединения);
		ТекстЗапросаПоШаблону = СтрЗаменить(ТекстЗапросаПоШаблону,
			"&ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения",
			ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения("Т.Упаковка", "Т.Номенклатура"));
		
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИсточникНоменклатуры) Тогда
			ТекстЗапросаПоШаблону = СтрЗаменить(ТекстЗапросаПоШаблону, "Т.Номенклатура", ОписаниеТаблицы.ИсточникНоменклатуры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИсточникУпаковки) Тогда
			ТекстЗапросаПоШаблону = СтрЗаменить(ТекстЗапросаПоШаблону, "Т.Упаковка", ОписаниеТаблицы.ИсточникУпаковки);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоШаблону;
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения(ИсточникУпаковки, ИсточникНоменклатуры) Экспорт
	
	ТекстЗапроса = "
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины          КАК ЕдиницаИзмеренияТипИзмеряемойВеличины,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Числитель, 0)         КАК ЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Знаменатель, 0)       КАК ЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины                               КАК УпаковкаТипИзмеряемойВеличины,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Числитель,0)                               КАК УпаковкаЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,0)                             КАК УпаковкаЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ВесИспользовать                                 КАК ВесИспользовать,
	|	ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения                             КАК ВесЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель,0)                        КАК ВесЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель,0)                      КАК ВесЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель,0)       КАК ВесЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель,0)     КАК ВесЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ОбъемИспользовать                               КАК ОбъемИспользовать,
	|	ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения                           КАК ОбъемЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель,0)                      КАК ОбъемЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель,0)                    КАК ОбъемЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель,0)     КАК ОбъемЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель,0)   КАК ОбъемЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ПлощадьИспользовать                             КАК ПлощадьИспользовать,
	|	ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения                         КАК ПлощадьЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель,0)                    КАК ПлощадьЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель,0)                  КАК ПлощадьЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель,0)   КАК ПлощадьЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель,0) КАК ПлощадьЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ДлинаИспользовать                               КАК ДлинаИспользовать,
	|	ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения                           КАК ДлинаЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель,0)                      КАК ДлинаЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель,0)                    КАК ДлинаЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель,0)     КАК ДлинаЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель,0)   КАК ДлинаЕдиницаИзмеренияЗнаменатель
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка",     ИсточникУпаковки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтруктураДанныхУпаковки(РеквизитыУпаковки)
	
	Числитель = 0;
	Знаменатель = 0;
	
	Если РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ВесЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ВесЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ВесЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ВесЧислитель;
		
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ОбъемЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ОбъемЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ОбъемЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ОбъемЧислитель;
		
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Площадь Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ПлощадьЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ПлощадьЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ПлощадьЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ПлощадьЧислитель;
		
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ДлинаЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ДлинаЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ДлинаЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ДлинаЧислитель;
		
	ИначеЕсли (РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Мощность
		ИЛИ РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Энергия
		ИЛИ РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд
		ИЛИ РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Время)
		И РеквизитыУпаковки.ЕдиницаИзмеренияТипИзмеряемойВеличины = РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины Тогда
			
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель * РеквизитыУпаковки.ЕдиницаИзмеренияЗнаменатель;
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель * РеквизитыУпаковки.ЕдиницаИзмеренияЧислитель;
			
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
	
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель;
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель;
		
	КонецЕсли;
	
	Возврат УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки(Числитель, Знаменатель);
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ЗагрузкаПроизводственнойНСИ

// Описание элемента загружаемых данных конструктор.
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка - Имя справочника
//  ИмяТЧ - Строка - Имя ТЧ
// 
// Возвращаемое значение:
//  Структура - Описание элемента загружаемых данных конструктор:
// * Ключ - Строка
// * ИмяОбъектаМетаданных - Строка
// * ИмяТЧ - Строка
// * ПолноеИмя - Строка
// * РеквизитыОбязательные - Массив из Строка
// * РеквизитыИдентификаторы - Структура
// * РеквизитыСтандартные - Структура
// * РеквизитыПрикладные - Структура
// * РеквизитыДополнительные - Структура
// * РеквизитыСлужебные - Структура
// * РеквизитыИсключаемые - Структура
// * ДоступенПоиск - Булево
// * ДоступныАлгоритмыОбъекта - Булево
// * КлючРаздела - Строка
// * УровеньВФайле - Число
// * Идентификатор - Строка
// * ИдентификаторТехнологии - Строка
// * ИдентификаторИзделия - Строка
// * ИдентификаторМатериала - Строка
// * ОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных
// * ОбъектМетаданныхПустаяСсылка - ЛюбаяСсылка
// * ЭтоСправочник - Булево
// * ЭтоДокумент - Булево
Функция ОписаниеЭлементаЗагружаемыхДанныхКонструктор(ИмяОбъектаМетаданных, ИмяТЧ = "") Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ключ", УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ));
	Результат.Вставить("ИмяОбъектаМетаданных", ИмяОбъектаМетаданных);
	Результат.Вставить("ИмяТЧ",                ИмяТЧ);
	Результат.Вставить("ПолноеИмя");
	Результат.Вставить("Представление");
	Результат.Вставить("ОбъектМетаданных");
	Результат.Вставить("СтруктураОтбора");
	
	Результат.Вставить("ЕстьКод",          Ложь);
	Результат.Вставить("ЕстьНаименование", Ложь);
	
	Результат.Вставить("РеквизитыОбязательные",   Новый Массив);
	
	Результат.Вставить("РеквизитыИдентификаторы", Новый Структура);
	Результат.Вставить("РеквизитыСтандартные",    Новый Структура);
	Результат.Вставить("РеквизитыПрикладные",     Новый Структура);
	Результат.Вставить("РеквизитыДополнительные", Новый Структура);
	Результат.Вставить("РеквизитыСлужебные",      Новый Структура);
	Результат.Вставить("РеквизитыИсключаемые",    Новый Структура);
	
	Результат.Вставить("ДоступенПоиск", Ложь);
	Результат.Вставить("ДоступныАлгоритмыОбъекта", ПустаяСтрока(ИмяТЧ));
	
	Результат.Вставить("КлючРаздела");
	Результат.Вставить("УровеньВФайле", 0);
	
	Результат.Вставить("ЭтоСправочник", Ложь);
	Результат.Вставить("ЭтоДокумент"  , Ложь);
	
	Если Метаданные.Справочники.Найти(ИмяОбъектаМетаданных) <> Неопределено Тогда
		Результат.Вставить("ОбъектМетаданныхПустаяСсылка", Справочники[ИмяОбъектаМетаданных].ПустаяСсылка());
		Результат.ЭтоСправочник = ПустаяСтрока(ИмяТЧ);
	ИначеЕсли Метаданные.Документы.Найти(ИмяОбъектаМетаданных) <> Неопределено Тогда
		Результат.Вставить("ОбъектМетаданныхПустаяСсылка", Документы[ИмяОбъектаМетаданных].ПустаяСсылка());
		Результат.ЭтоДокумент   = ПустаяСтрока(ИмяТЧ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конструктор описания реквизита загружаемых данных
// 
// Возвращаемое значение:
//  Структура:
// * Имя - Строка
// * Представление - Строка 
// * Тип - ОписаниеТипов
// * СоставнойТип - Булево
// * СсылочныйТип - Булево
// * ЕстьКод - Булево
// * ЕстьНаименование - Булево
// * ВыборГруппИЭлементов - ГруппыИЭлементы
// * ПараметрыВыбора - ФиксированныйМассив из ПараметрВыбора
// * Обязательный - Булево
// * ПорядокВГруппе - Число
// * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
// * ТипИдентификатора - ОписаниеТипов
// * ОписаниеСсылочныхТипов - Массив из Структура
Функция ОписаниеРеквизитаЗагружаемыхДанныхКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Имя",           "");
	Результат.Вставить("Представление", "");
	
	Результат.Вставить("Тип");
	Результат.Вставить("СоставнойТип",  Ложь);
	Результат.Вставить("СсылочныйТип",  Ложь);
	Результат.Вставить("ТипИдентификатора");
	
	Результат.Вставить("ЕстьКод",          Ложь);
	Результат.Вставить("ЕстьНаименование", Ложь);
	Результат.Вставить("ЕстьНомер",        Ложь);
	
	Результат.Вставить("ВыборГруппИЭлементов");
	Результат.Вставить("ПараметрыВыбора");
	
	Результат.Вставить("Обязательный", Ложь);
	Результат.Вставить("ПорядокВГруппе", 0);
	Результат.Вставить("ОбязательныйПоиск", Ложь);
	
	Результат.Вставить("ОписаниеСвойства");
	
	Результат.Вставить("ЭтоИдентификатор", Ложь);
	Результат.Вставить("ЭтоОсновнойИдентификатор", Ложь);
	
	Результат.Вставить("ОписаниеСсылочныхТипов", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеСсылочногоТипаКонструктор()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОбъектМетаданных");
	
	Результат.Вставить("Тип",                  "");
	Результат.Вставить("Имя",                  "");
	Результат.Вставить("Синоним",              "");
	Результат.Вставить("ПолноеИмя",            "");
	Результат.Вставить("ПредставлениеСписка",  "");
	Результат.Вставить("ПредставлениеОбъекта", "");
	
	Результат.Вставить("ЕстьКод",              Ложь);
	Результат.Вставить("ЕстьНаименование",     Ложь);
	Результат.Вставить("ЕстьНомер",            Ложь);
	
	Возврат Результат;
	
КонецФункции

// Описание реквизита загружаемого объекта.
// 
// Параметры:
//  МетаданныеРеквизита - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Структура - см ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
//
Функция ОписаниеРеквизитаЗагружаемыхДанных(МетаданныеРеквизита)
	
	ОписаниеРеквизита = ОписаниеРеквизитаЗагружаемыхДанныхКонструктор();
	
	ИмяРеквизита = МетаданныеРеквизита.Имя;
	
	ОписаниеРеквизита.Имя = ИмяРеквизита;
	ОписаниеРеквизита.Представление = ?(ПустаяСтрока(МетаданныеРеквизита.Синоним), ИмяРеквизита, МетаданныеРеквизита.Синоним);
	
	ДопустимыеТипы = МетаданныеРеквизита.Тип.Типы();
	Для Каждого Тип Из ДопустимыеТипы Цикл
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			ОписаниеРеквизита.СсылочныйТип = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеРеквизита.Тип = МетаданныеРеквизита.Тип;
	ОписаниеРеквизита.СоставнойТип = ДопустимыеТипы.Количество() > 1;
	
	Если ОписаниеРеквизита.СсылочныйТип Тогда
		Если ИмяРеквизита = "Родитель" Тогда
			ОписаниеРеквизита.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МетаданныеРеквизита, "ВыборГруппИЭлементов") Тогда
			ОписаниеРеквизита.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли МетаданныеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			ОписаниеРеквизита.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ИначеЕсли МетаданныеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
			ОписаниеРеквизита.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ОписаниеРеквизита.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		ОписаниеРеквизита.ПараметрыВыбора = МетаданныеРеквизита.ПараметрыВыбора;
		ДобавитьОписаниеСсылочныхТипов(ОписаниеРеквизита);
	КонецЕсли;
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

// Описание объекта загрузки.
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка - имя справочника
//  ИмяТЧ - Строка - Имя ТЧ
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
//
Функция ОписаниеЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ = "")
	
	Результат = ОписаниеЭлементаЗагружаемыхДанныхКонструктор(ИмяОбъектаМетаданных, ИмяТЧ);
	
	ОписаниеОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Результат.ОбъектМетаданныхПустаяСсылка));
	
	РеквизитыИсключаемые  = ИсключаемыеРеквизитыЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ);
	РеквизитыОбязательные = ОбязательныеРеквизитыЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ);
	
	Результат.ПолноеИмя         = ОписаниеОбъектаМетаданных.ПолноеИмя();
	Результат.ОбъектМетаданных  = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных);
	
	Если ПустаяСтрока(ИмяТЧ) Тогда
		Для каждого ОписаниеРеквизитаМетаданных Из ОписаниеОбъектаМетаданных.СтандартныеРеквизиты Цикл // ОбъектМетаданных
			Если ОписаниеРеквизитаМетаданных.Имя = "Код" Тогда
				Результат.ЕстьКод = Истина;
			ИначеЕсли ОписаниеРеквизитаМетаданных.Имя = "Наименование" Тогда
				Результат.ЕстьНаименование = Истина;
			КонецЕсли;
			ОписаниеРеквизита = ОписаниеРеквизитаЗагружаемыхДанных(ОписаниеРеквизитаМетаданных);
			ОписаниеРеквизита.Обязательный = (РеквизитыОбязательные.Найти(ОписаниеРеквизита.Имя) <> Неопределено);
			Если РеквизитыИсключаемые.Найти(ОписаниеРеквизитаМетаданных.Имя) <> Неопределено Тогда
				СтруктураХранения = Результат.РеквизитыИсключаемые;
			Иначе
				СтруктураХранения = Результат.РеквизитыСтандартные;
			КонецЕсли;
			СтруктураХранения.Вставить(ОписаниеРеквизита.Имя, ОписаниеРеквизита);
		КонецЦикла;
	Иначе
		ОписаниеОбъектаМетаданных = ОписаниеОбъектаМетаданных.ТабличныеЧасти.Найти(ИмяТЧ);
	КонецЕсли;
	
	Для каждого ОписаниеРеквизитаМетаданных Из ОписаниеОбъектаМетаданных.Реквизиты Цикл // ОбъектМетаданных
		Если ОписаниеРеквизитаМетаданных.Тип.СодержитТип(Тип("ХранилищеЗначения"))
				ИЛИ ОписаниеРеквизитаМетаданных.Тип.СодержитТип(Тип("УникальныйИдентификатор"))
				ИЛИ СтрНайти(ВРег(ОписаниеРеквизитаМетаданных.Имя), "УДАЛИТЬ") = 1 Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеРеквизита = ОписаниеРеквизитаЗагружаемыхДанных(ОписаниеРеквизитаМетаданных);
		ОписаниеРеквизита.Обязательный = (РеквизитыОбязательные.Найти(ОписаниеРеквизита.Имя) <> Неопределено);
		Если РеквизитыИсключаемые.Найти(ОписаниеРеквизитаМетаданных.Имя) <> Неопределено Тогда
			СтруктураХранения = Результат.РеквизитыИсключаемые;
		Иначе
			СтруктураХранения = Результат.РеквизитыПрикладные;
		КонецЕсли;
		СтруктураХранения.Вставить(ОписаниеРеквизита.Имя, ОписаниеРеквизита);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") И ПустаяСтрока(ИмяТЧ) Тогда
			
		ДобавитьДополнительныеРеквизитыИСведения(Результат);
		
	КонецЕсли;
	
	Результат.РеквизитыОбязательные = РеквизитыОбязательные;
	Результат.СтруктураОтбора = Новый Структура("ОбъектМетаданных,ИмяТЧ", Результат.ОбъектМетаданных, ИмяТЧ);
	Результат.Представление = ОписаниеОбъектаМетаданных.Синоним;
	
	Возврат Результат;
	
КонецФункции

// Описание объектов загрузки.
// 
// Параметры:
// НастройкиИсточника - см. Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанныхКонструктор
// 
// Возвращаемое значение:
//  Структура - Описание объектов загрузки:
// * Номенклатура - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
// * ВидыРабочихЦентров - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
// * РабочиеЦентры - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
// * РесурсныеСпецификации - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
// * ЭтапыПроизводства - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
// * ТехнологическиеОперации - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
// * ВидыРаботСотрудников - см. ОписаниеЭлементаЗагружаемыхДанныхКонструктор
Функция ОписаниеЗагружаемыхДанных(НастройкиИсточника) Экспорт
	
	Результат = Новый Структура;
	
	Описание = ОписаниеЭлементаЗагружаемыхДанных("Номенклатура");
	Описание.ДоступенПоиск = Истина;
	Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаИзделияИМатериалы();
	ДобавитьРеквизитИдентификатор(Описание, "Идентификатор", НСтр("ru = 'Идентификатор';
																	|en = 'ID'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ДобавитьРеквизитСлужебный(Описание, "НаименованиеХарактеристики", НСтр("ru = 'Наименование характеристики';
																				|en = 'Item variant name'"));
	КонецЕсли;
	Результат.Вставить(Описание.Ключ, Описание);
	
	Если НастройкиИсточника.РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаПроизводственноеОборудование()) Тогда
		Для каждого ВариантЗагрузкиОборудования Из Перечисления.ЗагрузкаНСИОборудование Цикл
			Если НастройкиИсточника.ВариантЗагрузкиОборудования = ВариантЗагрузкиОборудования Тогда
				Описание = ОписаниеЭлементаЗагружаемыхДанных(XMLСтрока(ВариантЗагрузкиОборудования));
				Описание.ДоступенПоиск = Истина;
				Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаПроизводственноеОборудование();
				ДобавитьРеквизитИдентификатор(Описание, "Идентификатор", НСтр("ru = 'Идентификатор';
																				|en = 'ID'"));
				Результат.Вставить(Описание.Ключ, Описание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Описание = ОписаниеЭлементаЗагружаемыхДанных("РесурсныеСпецификации");
	Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий();
	ДобавитьРеквизитИдентификатор(Описание, "ИдентификаторИзделия", НСтр("ru = 'Идентификатор изделия';
																		|en = 'Finished product ID'"),, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДобавитьРеквизитИдентификатор(Описание, "ИдентификаторТехнологии", НСтр("ru = 'Идентификатор технологии';
																			|en = 'Technology ID'"));
	Результат.Вставить(Описание.Ключ, Описание);
	
	Описание = ОписаниеЭлементаЗагружаемыхДанных("РесурсныеСпецификации", "МатериалыИУслуги");
	Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий();
	Описание.УровеньВФайле = 1;
	ДобавитьРеквизитИдентификатор(Описание, "ИдентификаторМатериала", НСтр("ru = 'Идентификатор материала';
																			|en = 'Material ID'"),, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДобавитьРеквизитИдентификатор(Описание, "ИдентификаторВложеннойТехнологии", НСтр("ru = 'Идентификатор вложенной технологии';
																					|en = 'Nested technology ID'"), Ложь);
	ДобавитьРеквизитСлужебный(Описание, "КлючСвязиМатериалОперация", НСтр("ru = 'Ключ связи с операцией';
																			|en = 'Operation link key'"));
	Результат.Вставить(Описание.Ключ, Описание);
	
	Описание = ОписаниеЭлементаЗагружаемыхДанных("РесурсныеСпецификации", "Трудозатраты");
	Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства();
	Описание.УровеньВФайле = 1;
	Результат.Вставить(Описание.Ключ, Описание);
	
	Описание = ОписаниеЭлементаЗагружаемыхДанных("ЭтапыПроизводства");
	Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства();
	Описание.УровеньВФайле = 1;
	Результат.Вставить(Описание.Ключ, Описание);
	
	Описание = ОписаниеЭлементаЗагружаемыхДанных("ТехнологическиеОперации");
	Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства();
	Описание.УровеньВФайле = 1;
	ДобавитьРеквизитСлужебный(Описание, "КлючСвязиМатериалОперация", НСтр("ru = 'Ключ связи с материалом';
																			|en = 'Material link key'"));
	Результат.Вставить(Описание.Ключ, Описание);
	
	Описание = ОписаниеЭлементаЗагружаемыхДанных("ВидыРаботСотрудников");
	Описание.ДоступенПоиск = Истина;
	Описание.УровеньВФайле = 1;
	Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства();
	ДобавитьРеквизитИдентификатор(Описание, "Идентификатор", НСтр("ru = 'Идентификатор';
																	|en = 'ID'"));
	Результат.Вставить(Описание.Ключ, Описание);
	
	Если НастройкиИсточника.РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов()) Тогда
		
		Описание = ОписаниеЭлементаЗагружаемыхДанных("РазрешениеНаЗаменуМатериалов");
		Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов();
		ДобавитьРеквизитИдентификатор(Описание, "Идентификатор", НСтр("ru = 'Идентификатор';
																		|en = 'ID'"));
		ДобавитьРеквизитИдентификатор(Описание, "ИдентификаторИзделия", НСтр("ru = 'Идентификатор изделия';
																			|en = 'Finished product ID'"), Ложь, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьРеквизитИдентификатор(Описание, "ИдентификаторТехнологии", НСтр("ru = 'Идентификатор технологии';
																				|en = 'Technology ID'"), Ложь, Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
		Результат.Вставить(Описание.Ключ, Описание);
		
		Описание = ОписаниеЭлементаЗагружаемыхДанных("РазрешениеНаЗаменуМатериалов", "Материалы");
		Описание.Представление = НСтр("ru = 'Материалы и аналоги';
										|en = 'Materials and substitutes'");
		Описание.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов();
		Описание.УровеньВФайле = 1;
		ДобавитьРеквизитИдентификатор(Описание, "ИдентификаторМатериала", НСтр("ru = 'Идентификатор материала';
																				|en = 'Material ID'"),, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьРеквизитСлужебный(Описание, "ГруппаЗамены", НСтр("ru = 'Материал / аналог';
																|en = 'Material / substitute'"), Истина);
		Результат.Вставить(Описание.Ключ, Описание);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьРеквизитИдентификатор(Описание, Имя, Представление, Обязательный = Истина, Тип = Неопределено)
	
	ОписаниеРеквизита = ОписаниеРеквизитаЗагружаемыхДанныхКонструктор();
	ОписаниеРеквизита.Имя               = Имя;
	ОписаниеРеквизита.Представление     = Представление;
	ОписаниеРеквизита.Тип               = Новый ОписаниеТипов("Строка");
	ОписаниеРеквизита.ПорядокВГруппе    = Описание.РеквизитыИдентификаторы.Количество();
	
	ОписаниеРеквизита.ЭтоИдентификатор  = Истина;
	Если Тип = Неопределено Тогда
		МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Описание.ОбъектМетаданныхПустаяСсылка));
		ОписаниеРеквизита.ТипИдентификатора = Новый ОписаниеТипов(МассивТипов);
		ОписаниеРеквизита.ЭтоОсновнойИдентификатор = Истина;
	Иначе
		ОписаниеРеквизита.ТипИдентификатора = Тип;
	КонецЕсли;
	
	Если Обязательный Тогда
		ОписаниеРеквизита.Обязательный = Истина;
		Описание.РеквизитыОбязательные.Добавить(Имя);
	КонецЕсли;
	
	ДобавитьОписаниеСсылочныхТипов(ОписаниеРеквизита);
	
	Описание.РеквизитыИдентификаторы.Вставить(Имя, ОписаниеРеквизита);
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

Функция ДобавитьРеквизитСлужебный(Описание, Имя, Представление, Обязательный = Ложь, Тип = Неопределено)
	
	ОписаниеРеквизита = ОписаниеРеквизитаЗагружаемыхДанныхКонструктор();
	ОписаниеРеквизита.Имя               = Имя;
	ОписаниеРеквизита.Представление     = Представление;
	ОписаниеРеквизита.Тип               = ?(Тип = Неопределено, Новый ОписаниеТипов("Строка"), Тип);
	
	Если Обязательный Тогда
		ОписаниеРеквизита.Обязательный = Истина;
		Описание.РеквизитыОбязательные.Добавить(Имя);
	КонецЕсли;
	
	ДобавитьОписаниеСсылочныхТипов(ОписаниеРеквизита);
	
	Описание.РеквизитыСлужебные.Вставить(Имя, ОписаниеРеквизита);
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

Процедура ДобавитьДополнительныеРеквизитыИСведения(ОписаниеЭлементаЗагружаемыхДанных)
	
	Запрос = Новый Запрос;
	НаборыСвойств = Новый Массив;
	
	Если ОписаниеЭлементаЗагружаемыхДанных.ИмяОбъектаМетаданных = "Номенклатура" Тогда
		ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НаборыСвойств.Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыСвойств
		|		ПО ВидыНоменклатуры.НаборСвойств = НаборыСвойств.Ссылка
		|		ИЛИ (ВидыНоменклатуры.НаборСвойствХарактеристик = НаборыСвойств.Ссылка
		|				И &ИспользоватьХарактеристики)
		|ГДЕ
		|	НаборыСвойств.Используется
		|	И (НаборыСвойств.КоличествоРеквизитов <> """"
		|		ИЛИ НаборыСвойств.КоличествоСведений <> """")
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ИспользоватьХарактеристики);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборыСвойств.Добавить(Выборка.Ссылка);
		КонецЦикла;
		НаборыСвойств.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
		Если ИспользоватьХарактеристики Тогда
			НаборыСвойств.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие"));
		КонецЕсли;
	Иначе
		НаборыСвойств.Добавить(УправлениеСвойствами.НаборСвойствПоИмени(СтрЗаменить(ОписаниеЭлементаЗагружаемыхДанных.ПолноеИмя,".","_")));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Ссылка   КАК НаборСвойств,
	|	Т.Свойство КАК Свойство
	|ПОМЕСТИТЬ
	|	ТаблицаСвойств
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО Т.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&НаборыСвойств)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка   КАК НаборСвойств,
	|	Т.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО Т.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&НаборыСвойств)
	|;
	|
	|ВЫБРАТЬ
	|	Т.НаборСвойств                            КАК НаборСвойств,
	|	Т.Свойство                                КАК Свойство,
	|	Т.Свойство.Имя                            КАК СвойствоИмя,
	|	Т.Свойство.Наименование                   КАК СвойствоНаименование,
	|	Т.Свойство.Представление                  КАК СвойствоПредставление,
	|	Т.Свойство.Заголовок                      КАК СвойствоЗаголовок,
	|	Т.Свойство.ЭтоДополнительноеСведение      КАК СвойствоЭтоДополнительноеСведение,
	|	Т.Свойство.ВладелецДополнительныхЗначений КАК СвойствоВладелецДополнительныхЗначений,
	|	Т.Свойство.ТипЗначения                    КАК СвойствоТипЗначения,
	|	Т.Свойство.ПометкаУдаления                КАК СвойствоПометкаУдаления
	|ИЗ
	|	ТаблицаСвойств КАК Т
	|ИТОГИ
	|	МАКСИМУМ(СвойствоИмя)
	|ПО
	|	Свойство
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НаборыСвойств", НаборыСвойств);
	
	ВыборкаСвойство = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Свойство");
	Пока ВыборкаСвойство.Следующий() Цикл
		
		Если ЭтоВыражение(ВыборкаСвойство.СвойствоИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения = Неопределено;
		ОписаниеСвойства = Неопределено;
		
		Выборка = ВыборкаСвойство.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ОписаниеСвойства = Неопределено Тогда
				ОписаниеСвойства = ОписаниеСвойстваКонструктор();
				ЗаполнитьЗначенияСвойств(ОписаниеСвойства, Выборка);
			КонецЕсли;
			ОписаниеСвойства.НаборыСвойств.Добавить(Выборка.НаборСвойств);
			Если ДанныеЗаполнения = Неопределено Тогда
				Ключи = "Имя,Тип,Синоним,ВыборГруппИЭлементов,ПараметрыВыбора";
				ДанныеЗаполнения = Новый Структура(Ключи);
				ДанныеЗаполнения.Имя      = ОписаниеСвойства.СвойствоИмя;
				ДанныеЗаполнения.Тип      = ОписаниеСвойства.СвойствоТипЗначения;
				ДанныеЗаполнения.Синоним  = ОписаниеСвойства.СвойствоНаименование;
				ПараметрыВыбора = Новый Массив;
				Если ОписаниеСвойства.СвойствоТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
					Если НЕ ЗначениеЗаполнено(ОписаниеСвойства.СвойствоВладелецДополнительныхЗначений) Тогда
						ОписаниеСвойства.СвойствоВладелецДополнительныхЗначений = ОписаниеСвойства.Свойство;
					КонецЕсли;
					ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ОписаниеСвойства.СвойствоВладелецДополнительныхЗначений));
				КонецЕсли;
				ДанныеЗаполнения.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеРеквизита = ОписаниеРеквизитаЗагружаемыхДанных(ДанныеЗаполнения);
		ОписаниеРеквизита.ОписаниеСвойства = ОписаниеСвойства;
		ОписаниеЭлементаЗагружаемыхДанных.РеквизитыДополнительные.Вставить(ДанныеЗаполнения.Имя, ОписаниеРеквизита);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеСвойстваКонструктор()
	
	ОписаниеСвойства = Новый Структура();
	
	ОписаниеСвойства.Вставить("Свойство");
	ОписаниеСвойства.Вставить("СвойствоИмя");
	ОписаниеСвойства.Вставить("СвойствоНаименование");
	ОписаниеСвойства.Вставить("СвойствоПредставление");
	ОписаниеСвойства.Вставить("СвойствоЗаголовок");
	ОписаниеСвойства.Вставить("СвойствоЭтоДополнительноеСведение");
	ОписаниеСвойства.Вставить("СвойствоВладелецДополнительныхЗначений");
	ОписаниеСвойства.Вставить("СвойствоТипЗначения");
	ОписаниеСвойства.Вставить("СвойствоПометкаУдаления");
	
	ОписаниеСвойства.Вставить("НаборыСвойств", Новый Массив);
	
	Возврат ОписаниеСвойства;
	
КонецФункции

Функция ОбязательныеРеквизитыЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ = "")
	
	Результат = Новый Массив;
	
	Если ИмяОбъектаМетаданных = "Номенклатура" Тогда
		
		Результат.Добавить("Наименование");
		Результат.Добавить("ВидНоменклатуры");
		Результат.Добавить("ЕдиницаИзмерения");
	
	ИначеЕсли ИмяОбъектаМетаданных = "ВидыРабочихЦентров" Тогда
		
		Результат.Добавить("Наименование");
		Результат.Добавить("Подразделение");
		
	ИначеЕсли ИмяОбъектаМетаданных = "РабочиеЦентры" Тогда
	
		Результат.Добавить("Наименование");
		Результат.Добавить("ВидРабочегоЦентра");
	
	ИначеЕсли ИмяОбъектаМетаданных = "РесурсныеСпецификации" Тогда
	
		Если ПустаяСтрока(ИмяТЧ) Тогда
		
			Результат.Добавить("Наименование");
		
		ИначеЕсли ИмяТЧ = "МатериалыИУслуги" Тогда
		
			Результат.Добавить("КоличествоУпаковок");
			Результат.Добавить("СтатьяКалькуляции");
		
		ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
			Результат.Добавить("ВидРабот");
			Результат.Добавить("Количество");
			Результат.Добавить("СтатьяКалькуляции");
		
		КонецЕсли;
		
	ИначеЕсли ИмяОбъектаМетаданных = "ЭтапыПроизводства" Тогда
		
		Результат.Добавить("Подразделение");
		
	ИначеЕсли ИмяОбъектаМетаданных = "ТехнологическиеОперации" Тогда
		
		Результат.Добавить("Наименование");
		Результат.Добавить("Количество");
		
	ИначеЕсли ИмяОбъектаМетаданных = "ВидыРаботСотрудников" Тогда
		
		Результат.Добавить("Наименование");
		
	ИначеЕсли ИмяОбъектаМетаданных = "РазрешениеНаЗаменуМатериалов" Тогда
		
		Если НЕ ПустаяСтрока(ИмяТЧ) Тогда
		
			Результат.Добавить("КоличествоУпаковок");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсключаемыеРеквизитыЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ = "")
	
	Результат = СтрРазделить("Ссылка,Код,Номер,Дата,Проведен,Владелец,ЭтоГруппа,ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных",",");
	
	Если ИмяОбъектаМетаданных = "Номенклатура" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Справочники.Номенклатура.РеквизитыПризнаковОсобенностейУчета(Метаданные.Справочники.Номенклатура));
		Результат.Добавить("ТипНоменклатуры");
		Результат.Добавить("ВариантОформленияПродажи");
		Результат.Добавить("ГруппаДоступа");
		Результат.Добавить("ИспользованиеХарактеристик");
		Результат.Добавить("ВладелецСерий");
		Результат.Добавить("ВладелецХарактеристик");
		Результат.Добавить("ВладелецТоварныхКатегорий");
		Результат.Добавить("ОсобенностьУчета");
		Результат.Добавить("ЕдиницаИзмеренияСрокаГодности");
	
	ИначеЕсли ИмяОбъектаМетаданных = "РесурсныеСпецификации" Тогда
		
		Результат.Добавить("ВариантНазначения");
		Результат.Добавить("МногоэтапныйПроизводственныйПроцесс");
		Результат.Добавить("ТипПроизводственногоПроцесса");
		
		Результат.Добавить("ЕстьУточняемоеОсновноеИзделие");
		Результат.Добавить("ЕстьПараметризацияРесурсов");
		Результат.Добавить("ЕстьВложенныеСпецификации");
		Результат.Добавить("ЕстьРасчетВероятности");
		Результат.Добавить("ЕстьНекратныеНормативыВРЦ");
		
		Результат.Добавить("ОсновноеИзделиеВидНоменклатуры");
		Результат.Добавить("ОсновноеИзделиеНоменклатура");
		Результат.Добавить("ОсновноеИзделиеХарактеристика");
		Результат.Добавить("ОсновноеИзделиеУпаковка");
		Результат.Добавить("ОсновноеИзделиеКоличествоУпаковок");
		Результат.Добавить("ОсновноеИзделиеЭтап");
		
		Результат.Добавить("Номенклатура");
		Результат.Добавить("Характеристика");
		Результат.Добавить("Этап");
		Результат.Добавить("ЭтапРедактирование");
		Результат.Добавить("Операция");
		Результат.Добавить("ОперацияРедактирование");
		Результат.Добавить("АлгоритмРасчетаКоличестваИсторияПереходаНаНовыеФормулы");
		Результат.Добавить("СпособАвтовыбораНоменклатуры");
		Результат.Добавить("СпособАвтовыбораХарактеристики");
		Результат.Добавить("СвойствоСодержащееНоменклатуру");
		Результат.Добавить("СпособПолученияМатериала");
		Результат.Добавить("ИсточникПолученияПолуфабриката");
		Результат.Добавить("СпецификацияРемонта");
		Результат.Добавить("ТребуетсяУказыватьСерии");
		Результат.Добавить("ПечатьМаршрутнойКарты");
		
		Результат.Добавить("ИдентификаторВерсииДанных");
		
	ИначеЕсли ИмяОбъектаМетаданных = "ЭтапыПроизводства" Тогда
		
		Результат.Добавить("МаршрутнаяКарта");
		Результат.Добавить("КоэффициентМаршрутнойКарты");
		
		Результат.Добавить("ЕстьПараметризацияРесурсов");
		
	ИначеЕсли ИмяОбъектаМетаданных = "ТехнологическиеОперации" Тогда
		
		Результат.Добавить("Идентификатор");
		Результат.Добавить("СодержитВложенныйМаршрут");
		Результат.Добавить("ВложенныйМаршрут");
		Результат.Добавить("СодержитТехнологическийПроцесс");
		Результат.Добавить("ТехнологическийПроцесс");
		Результат.Добавить("КоэффициентТехнологическогоПроцесса");
		Результат.Добавить("Спецификация");
		Результат.Добавить("Основание");
		
	ИначеЕсли ИмяОбъектаМетаданных = "РазрешениеНаЗаменуМатериалов" Тогда
		
		Результат.Добавить("Спецификация");
		Результат.Добавить("Изделие");
		Результат.Добавить("ХарактеристикаИзделия");
		Результат.Добавить("Номенклатура");
		Результат.Добавить("Характеристика");
		Результат.Добавить("Этап");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОписаниеСсылочныхТипов(ОписаниеРеквизита)
	
	Если ОписаниеРеквизита.ТипИдентификатора <> Неопределено Тогда
		Тип = ОписаниеРеквизита.ТипИдентификатора;
	Иначе
		Тип = ОписаниеРеквизита.Тип;
	КонецЕсли;
	
	Для каждого Тип Из Тип.Типы() Цикл
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			
			Ссылка = Новый(Тип); // СправочникСсылка
			СсылкаМетаданные = Ссылка.Метаданные();
			
			Описание = ОписаниеСсылочногоТипаКонструктор();
			Описание.Тип              = Тип;
			Описание.ОбъектМетаданных = Ссылка;
			Описание.ПолноеИмя        = СсылкаМетаданные.ПолноеИмя();
			
			ЗаполнитьЗначенияСвойств(Описание, СсылкаМетаданные);
			
			Для каждого СтандартныйРеквизит Из СсылкаМетаданные.СтандартныеРеквизиты Цикл // ОбъектМетаданных
				ИмяСвойства = "";
				Если СтандартныйРеквизит.Имя = "Код" Тогда
					ИмяСвойства = "ЕстьКод";
				ИначеЕсли СтандартныйРеквизит.Имя = "Наименование" Тогда
					ИмяСвойства = "ЕстьНаименование";
				ИначеЕсли СтандартныйРеквизит.Имя = "Номер" Тогда
					ИмяСвойства = "ЕстьНомер";
				КонецЕсли;
				Если НЕ ПустаяСтрока(ИмяСвойства) Тогда
					Описание[ИмяСвойства] = Истина;
					Если НЕ ОписаниеРеквизита.ЭтоИдентификатор Тогда
						ОписаниеРеквизита[ИмяСвойства] = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОписаниеРеквизита.ОписаниеСсылочныхТипов.Добавить(Описание);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание реквизита элемента загружаемых данных
// 
// Параметры:
//  ИмяРеквизита - Строка
//  ОписаниеЭлементаЗагружаемыхДанных - см. ОписаниеЗагружаемыхДанных
// 
// Возвращаемое значение:
//  Неопределено - Описание реквизита загружаемых данных
Функция ОписаниеРеквизитаЗагружаемыхДанныхПоИмени(ИмяРеквизита, ОписаниеЭлементаЗагружаемыхДанных) Экспорт
	
	Для каждого ГруппаРеквизитов Из УправлениеДаннымиОбИзделияхКлиентСервер.ГруппыРеквизитов() Цикл
		Если ОписаниеЭлементаЗагружаемыхДанных[ГруппаРеквизитов].Свойство(ИмяРеквизита) Тогда
			Возврат ОписаниеЭлементаЗагружаемыхДанных[ГруппаРеквизитов][ИмяРеквизита];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет, является ли переданная настройка - выражением
// 
// Параметры:
//  ТекстНастройки - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоВыражение(ТекстНастройки) Экспорт
	
	ЭтоВыражение = Ложь;
	СпецСимволы  = " [].,+-/*?=<>():;""!@#$%&№{}?\|/`~'^";
	
	Для НомСимвола = 1 По СтрДлина(ТекстНастройки) Цикл
		Символ = Сред(ТекстНастройки, НомСимвола, 1);
		Если СтрНайти(СпецСимволы, Символ) > 0 Тогда
			ЭтоВыражение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭтоВыражение;
	
КонецФункции

#Область РегламентноеЗадание_ЗагрузкаПроизводственнойНСИ

Процедура ЗагрузкаПроизводственнойНСИ(ИсточникДанных) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаПроизводственнойНСИ);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИсточникДанных", ИсточникДанных);
	
	Обработка = Обработки.ЗагрузкаПроизводственнойНСИ.Создать();
	Обработка.ВыполнитьДействие(Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗагрузитьДанные(), Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

//++ НЕ УТКА

// Возвращает описание функций используемых в конструкторе формул
// 
// Возвращаемое значение:
//  Структура - описание функций:
//   *Ключ - Строка - Идентификатор функции в формуле.
//   *Значение - Строка - Полный путь к функции, включая имя общего модуля.
//
Функция ФункцииИзОбщегоМодуля()
	
	ОписаниеФункций = УправлениеДаннымиОбИзделияхПовтИсп.ОписаниеФункцийКонструктораФормул();
	
	Структура = Новый Структура;
	
	Для каждого Описание Из ОписаниеФункций Цикл
		
		Структура.Вставить(Описание.Идентификатор, Описание.ПолныйПуть);
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

//-- НЕ УТКА

Функция ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе(Объект = Неопределено) Экспорт
	
	Результат = Ложь;
	
	//++ НЕ УТКА
	ЕстьСпособПолученияНаЭтапе = Ложь;
	Если Объект <> Неопределено Тогда
		ЕстьСпособПолученияНаЭтапе = Объект.МатериалыИУслуги.НайтиСтроки(
			Новый Структура("СпособПолученияМатериала", ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе"))).Количество() > 0;
	КонецЕсли;
	Если ЕстьСпособПолученияНаЭтапе
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		Результат = Истина;
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьКлючиСвязиОбъекта(Объект, ТолькоЗаполненные = Ложь) Экспорт
	
	ОсновныеТабличныеЧасти  = Новый Массив;
	ОсновныеТабличныеЧасти.Добавить("ВыходныеИзделия");
	ОсновныеТабличныеЧасти.Добавить("ВозвратныеОтходы");
	ОсновныеТабличныеЧасти.Добавить("МатериалыИУслуги");
	ОсновныеТабличныеЧасти.Добавить("Трудозатраты");
	//++ НЕ УТКА
	ОсновныеТабличныеЧасти.Добавить("ВидыРабочихЦентров");
	ОсновныеТабличныеЧасти.Добавить("АльтернативныеВидыРабочихЦентров");
	ОсновныеТабличныеЧасти.Добавить("ПромежуточныйВыпуск");
	//-- НЕ УТКА
	
	ЗависимыеТабличныеЧасти = Новый Массив;
	//++ НЕ УТКА
	ЗависимыеТабличныеЧасти.Добавить("СоответствиеСвойств");
	ЗависимыеТабличныеЧасти.Добавить("ОтборПоСвойствам");
	//-- НЕ УТКА
	
	СоответствиеКлючей = Новый Соответствие();
	
	Для каждого ИмяТЧ из ОсновныеТабличныеЧасти Цикл
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Строка Из Объект[ИмяТЧ] Цикл
			Если ТолькоЗаполненные И НЕ ЗначениеЗаполнено(Строка.КлючСвязи) Тогда
				Продолжить;
			КонецЕсли;
			НовыйКлючСвязи = Новый УникальныйИдентификатор();
			СоответствиеКлючей.Вставить(Строка.КлючСвязи, НовыйКлючСвязи);
			Строка.КлючСвязи = НовыйКлючСвязи;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ИмяТЧ из ЗависимыеТабличныеЧасти Цикл
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Строка Из Объект[ИмяТЧ] Цикл
			НовыйКлючСвязи = СоответствиеКлючей.Получить(Строка.КлючСвязи);
			Если НовыйКлючСвязи <> Неопределено Тогда
				Строка.КлючСвязи = НовыйКлючСвязи;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ШтучноеИзделие(Номенклатура) Экспорт
	
	Возврат ( ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины") = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук );
	
КонецФункции

Процедура ЗаполнитьКоэффициентПересчетаВОсновноеИзделие(ЗаказываемоеИзделие, ОсновноеИзделие) Экспорт
	
	Если НЕ ЗаказываемоеИзделие.ЭтоОсновноеИзделие
		И НЕ ЗаказываемоеИзделие.ДанныеУпаковки.Знаменатель = 0
		И НЕ ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска = 0
		И НЕ ОсновноеИзделие.ДанныеУпаковки.Числитель = 0 Тогда
		
		ЗаказываемоеИзделие.КоэффициентПересчетаВОсновноеИзделие = 
			(ЗаказываемоеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* ЗаказываемоеИзделие.ДанныеУпаковки.Числитель * ОсновноеИзделие.ДанныеУпаковки.Знаменатель)
				/
			(ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* ЗаказываемоеИзделие.ДанныеУпаковки.Знаменатель * ОсновноеИзделие.ДанныеУпаковки.Числитель);
			
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие полуфабриката и спецификации, которая назначена для его производства.
//
// Параметры:
//  Объект                  - СправочникОбъект.РесурсныеСпецификации,
//                              ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//                              ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой
//  КоллекцияПолуфабрикатов - Массив - коллекция строк, содержащая данные о полуфабрикатах
//  КоллекцияЭтапов         - Массив - коллекция строк, содержащая данные о последовательности этапов
// Возвращаемое значение:
//   - Структура - Структура параметров проверки заполнения внутренних полуфабрикатов
//                  в ресурсной спецификации и спецификации заказа на производство.
//
Функция ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(Объект, Знач КоллекцияПолуфабрикатов = Неопределено, Знач КоллекцияЭтапов = Неопределено) Экспорт
	
	ПараметрыПроверкиВнутреннихПолуфабрикатов = Новый Структура("
		|СтруктураПоиска,
		|ТаблицаПолуфабрикатов,
		//++ Устарело_Производство21
		|Режим,
		|ТаблицаЭтапов,
		//-- Устарело_Производство21
		|ПредставлениеТаблицыПолуфабрикатов");
	
	//++ Устарело_Производство21
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.РесурсныеСпецификации") Тогда
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация";
		
	//-- Устарело_Производство21
		
		// структура поиска в таблице полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска = Новый Структура("
			|ИсточникПолученияПолуфабриката,
			|Номенклатура,
			|Характеристика");
			
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Т.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства)      КАК ИсточникПолученияПолуфабриката,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура)                 КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)         КАК Упаковка,
		|	Т.КоличествоУпаковок                                                 КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(Т.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"        КАК РасчетПоФормуле
		|ПОМЕСТИТЬ
		|	ВтТаблицаПолуфабрикатов
		|ИЗ
		|	&ТаблицаПолуфабрикатов КАК Т
		|ГДЕ
		|	Т.ОбработатьПоСпецификации = ЛОЖЬ
		|;
		|
		|ВЫБРАТЬ
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.Номенклатура                   КАК Номенклатура,
		|	Т.Характеристика                 КАК Характеристика,
		|	СУММА(ВЫБОР КОГДА Т.РасчетПоФормуле
		|			ТОГДА -1
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(Т.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3))
		|	КОНЕЦ)                           КАК Количество
		|ИЗ
		|	ВтТаблицаПолуфабрикатов КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.ИсточникПолученияПолуфабриката,
		|	Т.Номенклатура,
		|	Т.Характеристика,
		|	Т.РасчетПоФормуле
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Т.Упаковка", "Т.Номенклатура"));
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТаблицаПолуфабрикатов", КоллекцияПолуфабрикатов);
		
		ТаблицаПолуфабрикатов = Запрос.Выполнить().Выгрузить();
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика");
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск';
																							|en = 'Side and intermediate release'");
		
	//++ Устарело_Производство21
	Иначе
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа";
		
		// структура поиска в таблице полуфабрикатов
		
		СтруктураПоиска = Новый Структура("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура,
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Вставить("СтруктураПоиска", СтруктураПоиска);
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиМатериалыИУслугиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
			
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.КлючСвязиМатериалыИУслугиСтрока = Строка(ЭлементКоллекции.КлючСвязиМатериалыИУслуги);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// таблица полуфабрикатов
	
		ТаблицаЭтапов = Новый ТаблицаЗначений;
		ТаблицаЭтапов.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("НаименованиеЭтапа", Новый ОписаниеТипов("Строка"));
		ТаблицаЭтапов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
		
		Если КоллекцияЭтапов = Неопределено Тогда
			КоллекцияЭтапов = Объект.Этапы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияЭтапов Цикл
			
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			
			НоваяСтрока.КлючСвязиСтрока       = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.НомерЭтапа            = ЭлементКоллекции.НомерЭтапа;
			НоваяСтрока.НаименованиеЭтапа     = ЭлементКоллекции.НаименованиеЭтапа;
			НоваяСтрока.ПроизводствоНаСтороне = ЭлементКоллекции.ПроизводствоНаСтороне;
			
		КонецЦикла;
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов = ТаблицаЭтапов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск';
																							|en = 'Side and intermediate release'");
		
	КонецЕсли;
	//-- Устарело_Производство21
	
	Возврат ПараметрыПроверкиВнутреннихПолуфабрикатов;
	
КонецФункции

Функция ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, МассивСтрок)
	
	ТаблицаПотребностиВПолуфабрикатах = Новый ТаблицаЗначений;
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	//++ Устарело_Производство21
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
	//-- Устарело_Производство21
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		
	//++ Устарело_Производство21
	Иначе
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапВыпускаСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		
	КонецЕсли;
	//-- Устарело_Производство21
	
	Для Каждого ЭлементКоллекции Из МассивСтрок Цикл
		
		НоваяСтрока = ТаблицаПотребностиВПолуфабрикатах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		//++ Устарело_Производство21
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		//-- Устарело_Производство21
			
			НоваяСтрока.Этап = ЭлементКоллекции.ЭтапРедактирование;
			
		//++ Устарело_Производство21
		Иначе
			
			НоваяСтрока.КлючСвязиСтрока = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			НоваяСтрока.КлючСвязиЭтапВыпускаСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапВыпуска);
			
		КонецЕсли;
		//-- Устарело_Производство21
		
	КонецЦикла;
	
	Возврат ТаблицаПотребностиВПолуфабрикатах;
	
КонецФункции

Функция ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов)
	
	//++ Устарело_Производство21
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
	//-- Устарело_Производство21
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Этап КАК Справочник.ЭтапыПроизводства) КАК Этап,
		|	ВЫРАЗИТЬ(Т.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства) КАК ИсточникПолученияПолуфабриката,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.КоличествоУпаковок                                         КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.НомерЭтапа >= ВЫБОР
		|			КОГДА Т.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|				ТОГДА 1
		|			ИНАЧЕ Т.Этап.НомерЭтапа
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.ПроизводствоНаСтороне
		|	И НЕ &ИспользуетсяПроизводство22
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
		|	ВЫРАЗИТЬ(Т.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)) КАК Количество,
		|	Т.Номенклатура.Представление КАК НоменклатураПредставление,
		|	Т.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	Т.ИсточникПолученияПолуфабриката.Представление КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА Т.Упаковка.Представление
		|		ИНАЧЕ Т.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	НЕ Т.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Т.Упаковка",
			"Т.Номенклатура"));
		
	//++ Устарело_Производство21
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	Т.КлючСвязиЭтапыСтрока КАК КлючСвязиЭтапыСтрока,
		|	Т.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапВыпускаСтрока,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповЗаказа.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	ТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаЭтаповЗаказа.НомерЭтапа КАК НомерЭтапа
		|ПОМЕСТИТЬ ВТТаблицаЭтаповЗаказа
		|ИЗ
		|	&ТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностиВПолуфабрикатах.НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ПотребностиВПолуфабрикатах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповПотребления
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапыСтрока = ТаблицаЭтаповПотребления.КлючСвязиСтрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповВыпуска
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповВыпуска.КлючСвязиСтрока
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаЭтаповВыпуска.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповПотребления.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповВыпуска.НомерЭтапа >= ТаблицаЭтаповПотребления.НомерЭтапа
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки,
		|	ТПотребностиВПолуфабрикатах.Номенклатура КАК Номенклатура,
		|	ТПотребностиВПолуфабрикатах.Характеристика КАК Характеристика,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапыСтрока,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиСтрока КАК КлючСвязиМатериалыИУслугиСтрока,
		|	ТПотребностиВПолуфабрикатах.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ТПотребностиВПолуфабрикатах.Количество КАК Количество,
		|	ТПотребностиВПолуфабрикатах.Номенклатура.Представление КАК НоменклатураПредставление,
		|	ТПотребностиВПолуфабрикатах.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	ТТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТПотребностиВПолуфабрикатах.Упаковка.Представление
		|		ИНАЧЕ ТПотребностиВПолуфабрикатах.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	НЕ ТПотребностиВПолуфабрикатах.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТПотребностиВПолуфабрикатах.Упаковка",
			"ТПотребностиВПолуфабрикатах.Номенклатура"));
		
	КонецЕсли;
	//-- Устарело_Производство21
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОтборНоменклатурыПоСвойствам(ИмяТаблицыНастроек) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Идентификатор         КАК Идентификатор,
	|	ВложенныйЗапрос.КлючСвязи             КАК КлючСвязи,
	|	МИНИМУМ(ВложенныйЗапрос.Используется) КАК Используется
	|ПОМЕСТИТЬ ВТОтборПоСвойствам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТОтборПоСвойствамНастройки.Идентификатор  КАК Идентификатор,
	|		ВТОтборПоСвойствамНастройки.КлючСвязи      КАК КлючСвязи,
	|		ВЫБОР ВТОтборПоСвойствамНастройки.Условие
	|			КОГДА ""Равно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства = ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""НеРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Больше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства > ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""БольшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства >= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Меньше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства < ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""МеньшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""ВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В
	|						(&ТекстОтбораВСписке)
	|			КОГДА ""НеВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Заполнено""
	|				ТОГДА НЕ ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			КОГДА ""НеЗаполнено""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Используется
	|	ИЗ
	|		&ВТОтборПоСвойствамНастройки КАК ВТОтборПоСвойствамНастройки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Идентификатор,
	|	ВложенныйЗапрос.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	КлючСвязи";
	
	ТекстОтбораВСписке = "
	|						ВЫБРАТЬ
	|							Т.ЗначениеОтбор КАК ЗначениеОтбор
	|						ИЗ
	|							&ВТОтборПоСвойствамНастройки КАК Т
	|						ГДЕ
	|							Т.Условие           = ""ВСписке""
	|							И Т.Свойство        = ВТОтборПоСвойствамНастройки.Свойство
	|							И Т.Идентификатор   = ВТОтборПоСвойствамНастройки.Идентификатор
	|							И Т.КлючСвязи       = ВТОтборПоСвойствамНастройки.КлючСвязи";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораВСписке",          ТекстОтбораВСписке);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТОтборПоСвойствамНастройки", ИмяТаблицыНастроек);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти