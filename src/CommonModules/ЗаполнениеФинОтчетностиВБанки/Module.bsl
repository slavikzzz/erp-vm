#Область СлужебныйПрограммныйИнтерфейс

#Область ВидыОтчетов

// Возвращает описание видов отчетов, поддерживаемых в перечислении ПакетXDTO.ФинОтчетностьВБанки.ВидыОтчетов.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. Результат.
//
Функция ОписаниеВидовОтчетов() Экспорт
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(5); 
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидОтчета",                  ТипСтрока);
	Результат.Колонки.Добавить("ПредставлениеОтчета",        ТипСтрока); // Название отчета в единственном числе.
	Результат.Колонки.Добавить("ПредставлениеОтчетаМнЧисло", ТипСтрока); // Названия отчетов во множественном числе,
																		 // когда отчетов несколько (за разные периоды, по разным аналитикам и т.п.)
	
	Результат.Колонки.Добавить("ПредставлениеГруппы",  ТипСтрока); // Верхняя группа, куда входить отчет. 
													  			   // Если не заполнено, то отчеты группируются по виду
																   // (один вид - одна группа).
	
	Результат.Колонки.Добавить("НомерГруппы",          ТипЧисло);  // Номер верхней группы отчетов общем списке отчета
	Результат.Колонки.Добавить("НомерОтчета",          ТипЧисло);  // Номер отчета группе отчетов
	Результат.Колонки.Добавить("ИсточникОтчетаБРО",    ТипСтрока); // Имя отчета БРО, если возможно однозначное сопоставление.
	Результат.Колонки.Добавить("ИсточникиОтчетаБРО",   Новый ОписаниеТипов("Массив")); // Имена отчетов БРО, если их несколько.
	Результат.Колонки.Добавить("Параметры",            Новый ОписаниеТипов("Структура")); // Содержит ключи с именами параметров, 
														 								 // по которым формируется отчет.
	Результат.Колонки.Добавить("ОтчетНаДату",          Новый ОписаниеТипов("Булево")); // Истина, если отчет формируется на дату,
	                                                                                   // Ложь - если за период.
	Результат.Колонки.Добавить("НеГруппироватьПоВиду", Новый ОписаниеТипов("Булево")); // Истина, если не надо группировать 
																					   // отчеты по виду отчета
	                                                                                   // Ложь - иначе и по-умолчанию.
	
	// Содержит шаблон имени присоединенного файла, в который сохраняется отчет.
	// Используемые параметры:
	//		%1 - УточнениеНаименования
	//		%2 - ДатаНачала (ГГГГММДД)
	//		%3 - ДатаОкончания (ГГГГММДД)
	// Для обеспечения уникальности в конце имени файла добавляется произвольный GUID 
	// или порядковый номер файла (в зависимости от формата).
	//
	// Для отчетов БРО не применяется, используются имена файлов, которые возвращает БРО.
	// 
	Результат.Колонки.Добавить("ШаблонИмениФайла",    ТипСтрока);
	
	// Содержит шаблоны имени присоединенного файла, в который сохраняется отчет.
	// Используется для отчетов у которых несколько источников отчета БРО (см. поле "ИсточникиОтчетаБРО").
	// 		Ключ - Строка, значение элемента массива из поля "ИсточникиОтчетаБРО" 
	//		Значение - Строка, шаблон имени файла, см. описание колонки "ШаблонИмениФайла"
	//
	// Для отчетов БРО не применяется, используются имена файлов, которые возвращает БРО.
	Результат.Колонки.Добавить("ШаблоныИмениФайла",   Новый ОписаниеТипов("Соответствие"));
	
	// 1. Бухгалтерская отчетность
	ПредставлениеГруппы = НСтр("ru = 'Бухгалтерская отчетность';
								|en = 'Accounting reporting'");
	НомерГруппы         = 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "БухгалтерскаяОтчетность";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Бухгалтерская отчетность';
											|en = 'Accounting reporting'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникиОтчетаБРО.Добавить("РегламентированныйОтчетБухОтчетность");
	НоваяСтрока.ИсточникиОтчетаБРО.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	НоваяСтрока.ШаблоныИмениФайла.Вставить(НоваяСтрока.ИсточникиОтчетаБРО[0], "BANK_BUHOTCH_%2_%3");
	НоваяСтрока.ШаблоныИмениФайла.Вставить(НоваяСтрока.ИсточникиОтчетаБРО[1], "BANK_BOUPR_%2_%3");
	
	// 2. Налоговая отчетность
	ПредставлениеГруппы = НСтр("ru = 'Налоговая отчетность';
								|en = 'Tax reporting'");
	НомерГруппы         = НомерГруппы + 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ДекларацияПрибыль";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Декларация по налогу на прибыль';
											|en = 'Profit tax declaration'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчетПрибыль";
	НоваяСтрока.ШаблонИмениФайла    = "BANK_PRIB_%2_%3";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ДекларацияНДС";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Декларация по НДС';
											|en = 'VAT declaration'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчетНДС";
	НоваяСтрока.ШаблонИмениФайла    = "BANK_NDS_%2_%3";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ДекларацияУСН";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Декларация по УСН';
											|en = 'STS declaration'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчетУСН";
	НоваяСтрока.ШаблонИмениФайла    = "BANK_USN_%2_%3";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "Декларация3НДФЛ";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Декларация 3-НДФЛ';
											|en = '3-NDFL declaration'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчет3НДФЛ";
	НоваяСтрока.ШаблонИмениФайла    = "BANK_NDFL3_%2_%3";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ДекларацияЕНВД";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Декларация по ЕНВД';
											|en = 'UTII declaration'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход";
	НоваяСтрока.Параметры.Вставить("РегистрацияВНалоговомОргане"); // Заполняется по регистрациям в налоговом органе.
	НоваяСтрока.ШаблонИмениФайла    = "BANK_ENVD_%2_%3";

	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ДекларацияИмущество";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Декларация по налогу на имущество';
											|en = 'Property tax declaration'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчетИмущество";
	НоваяСтрока.Параметры.Вставить("РегистрацияВНалоговомОргане"); // Заполняется по регистрациям в налоговом органе.
	НоваяСтрока.ШаблонИмениФайла    = "BANK_IMUD_%2_%3";

	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ДекларацияЕСХН";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Декларация по ЕСХН';
											|en = 'SAT declaration'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчетЕСХН";
	НоваяСтрока.ШаблонИмениФайла    = "BANK_ESHN_%2_%3";

	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "РасчетПоСтраховымВзносам";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Расчет по страховым взносам';
											|en = 'Calculation by insurance contributions'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ИсточникОтчетаБРО   = "РегламентированныйОтчетРасчетПоСтраховымВзносам";
	НоваяСтрока.Параметры.Вставить("Организация"); // Заполняется по обособленным подразделениям, выделенным на отдельный баланс.
	НоваяСтрока.ШаблонИмениФайла    = "BANK_RASCHSV_%2_%3";
	
	// 3. Стандартные отчеты - каждый образует собственную группу.
	ПредставлениеГруппы = "";
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ОборотноСальдоваяВедомость";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Оборотно-сальдовая ведомость';
											|en = 'Trial balance'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "OSV_%2_%3"; // OSV_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ОборотноСальдоваяВедомостьПоСчету";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Оборотно-сальдовая ведомость по счету';
											|en = 'Trial balance for account'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "OSV_%1_%2_%3"; // OSV_62_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "АнализСчета";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Анализ счета';
											|en = 'Account analysis'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "ANS_%1_%2_%3"; // ANS_62_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "КарточкаСчета";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Карточка счета';
											|en = 'Account card (financial accounting)'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "TRN_%1_%2_%3"; // TRN_62_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ОборотыСчета";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Обороты счета';
											|en = 'Account turnovers'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "OBS_%1_%2_%3"; // OBS_62_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ВедомостьАмортизацииОС";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Ведомость амортизации ОС';
											|en = 'FA depreciation statement'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "AMR_%2_%3"; // AMR_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ВаловаяПрибыль";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Валовая прибыль';
											|en = 'Gross profit'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "PRB_%2_%3"; // PRB_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "ОстаткиТоваровПоСрокамХранения";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Остатки товаров по срокам хранения';
											|en = 'Goods balance by retention periods'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "OTS_%2_%3"; // OTS_20200101_20200331_ИННКПП_<GUID>.xls
	НоваяСтрока.ОтчетНаДату         = Истина;
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "РасшифровкаЗадолженности";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Расшифровка задолженности';
											|en = 'Debt drill-down'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "DLG_%2_%3"; // DLG_20200101_20200331_ИННКПП_<GUID>.xls
	НоваяСтрока.ОтчетНаДату         = Истина;
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "КассоваяКнига";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Кассовая книга';
											|en = 'Cash book'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.Параметры.Вставить("Организация"); // В разрезе всех обособленных подразделений и видам деятельности.
	НоваяСтрока.Параметры.Вставить("ПодразделениеОрганизации");
	НоваяСтрока.Параметры.Вставить("ПлатежныйАгент"); 
	НоваяСтрока.ШаблонИмениФайла    = "KAS_%2_%3"; // KAS_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "КнигаУчетаДоходовИРасходов";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Книга доходов и расходов УСН';
											|en = 'Ledger of income and expenditure STS'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "KUSN_%2_%3"; // KUSN_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "КнигаУчетаДоходовИРасходовПредпринимателя";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Книга доходов и расходов ИП';
											|en = 'Ledger of income and expenditure of IE'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла    = "KIP_%2_%3"; // KIP_20200101_20200331_ИННКПП_<GUID>.xls
	
	НомерГруппы = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "КнигаУчетаДоходовПатент";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Книга доходов по патенту';
											|en = 'Patent income ledger'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	НоваяСтрока.Параметры.Вставить("Патент"); // В разрезе всех патентов.
	НоваяСтрока.ШаблонИмениФайла    = "KPTN_%2_%3"; // KPTN_20200101_20200331_ИННКПП_<GUID>.xls

	// 4. Аналитические отчеты по форме банка - каждый образует собственную группу
	ПредставлениеГруппы = "";
	
	НомерГруппы         = НомерГруппы + 1;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета                  = "ОтчетПоФормеБанка";
	НоваяСтрока.ПредставлениеОтчета        = НСтр("ru = 'Отчет по форме банка';
													|en = 'Report by bank form'");
	НоваяСтрока.ПредставлениеОтчетаМнЧисло = НСтр("ru = 'Отчеты по форме банка';
													|en = 'Reports by bank form'");
	НоваяСтрока.ПредставлениеГруппы        = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы                = НомерГруппы;
	НоваяСтрока.ШаблонИмениФайла           = "FINОТ_%1_%2_%3";
	НоваяСтрока.НеГруппироватьПоВиду       = Истина;
	
	// 5. Патенты - выводим сразу после с книгой доходов по патенту.
	// Загружаем как файлы с теми именами, которые им присвоил пользователь.
	ПредставлениеГруппы = НСтр("ru = 'Патенты';
								|en = 'Patents'");
	НомерГруппы         = НомерГруппы + 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета                  = "Патент";
	НоваяСтрока.ПредставлениеОтчета        = НСтр("ru = 'Патент';
													|en = 'Patent'");
	НоваяСтрока.ПредставлениеОтчетаМнЧисло = НСтр("ru = 'Патенты';
													|en = 'Patents'");
	НоваяСтрока.ПредставлениеГруппы        = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы                = НомерГруппы;

	// 6. Аудиторское заключение о бухгалтерской отчетности.
	ПредставлениеГруппы = НСтр("ru = 'Аудиторское заключение о бухгалтерской отчетности';
								|en = 'Audit report'");
	НомерГруппы         = НомерГруппы + 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "БухгалтерскаяОтчетностьАудиторскоеЗаключение";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Аудиторское заключение о бухгалтерской отчетности';
											|en = 'Audit report'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;

	// 7. Пояснения к бухгалтерской отчетности.
	ПредставлениеГруппы = НСтр("ru = 'Пояснения к бухгалтерской отчетности';
								|en = 'Accounting reporting notes'");
	НомерГруппы         = НомерГруппы + 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "БухгалтерскаяОтчетностьПояснения";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Пояснения к бухгалтерской отчетности';
											|en = 'Accounting reporting notes'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	
	// 8. Справки ФНС
	// Загружаем как файлы с теми именами, которые им присвоил пользователь.
	ПредставлениеГруппы = НСтр("ru = 'Справки из ФНС';
								|en = 'FTS information sheets'");
	НомерГруппы         = НомерГруппы + 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "СправкаФНСОбИсполненииОбязанностейПоУплатеНалогов";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Об исполнении обязанностей по уплате налогов';
											|en = 'On performing duties of paying taxes'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета           = "СправкаФНСОбОткрытыхРасчетныхСчетах";
	НоваяСтрока.ПредставлениеОтчета = НСтр("ru = 'Об открытых расчетных счетах';
											|en = 'On open current accounts'");
	НоваяСтрока.ПредставлениеГруппы = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы         = НомерГруппы;
	
	// 9. Справки из других банков
	// Загружаем как файлы с теми именами, которые им присвоил пользователь.
	ПредставлениеГруппы = НСтр("ru = 'Справки из банков';
								|en = 'Bank references'");
	НомерГруппы         = НомерГруппы + 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета                  = "СправкаБанка";
	НоваяСтрока.ПредставлениеОтчета        = НСтр("ru = 'Справка из банка';
													|en = 'Bank information sheet'");
	НоваяСтрока.ПредставлениеОтчетаМнЧисло = НСтр("ru = 'Справки из банков';
													|en = 'Bank references'");
	НоваяСтрока.ПредставлениеГруппы        = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы                = НомерГруппы;

	// 10. Прочее - все в одной группе
	// Загружаем как файлы с теми именами, которые им присвоил пользователь.
	ПредставлениеГруппы = "Прочее";
	НомерГруппы         = НомерГруппы + 1;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.ВидОтчета                  = "ПроизвольныйФайл";
	НоваяСтрока.ПредставлениеОтчета        = НСтр("ru = 'Дополнительный файл';
													|en = 'Additional file'");
	НоваяСтрока.ПредставлениеОтчетаМнЧисло = НСтр("ru = 'Прочее';
													|en = 'Other'");
	НоваяСтрока.ПредставлениеГруппы        = ПредставлениеГруппы;
	НоваяСтрока.НомерГруппы                = НомерГруппы;
	
	// Пронумеруем отчеты в пределах каждой группы и заполним представления отчетов во множественном числе
	// так же как и для единственного числа, если явно не задано.
	НомерПредыдущейГруппы = Неопределено;
	НомерОтчета = 1;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		Если СтрокаТаблицы.НомерГруппы <> НомерПредыдущейГруппы Тогда
			// Группа изменилась, начинаем нумерацию заново.
			НомерПредыдущейГруппы = СтрокаТаблицы.НомерГруппы;
			НомерОтчета           = 1; 
		КонецЕсли;
		СтрокаТаблицы.НомерОтчета = НомерОтчета;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеОтчетаМнЧисло) Тогда
			СтрокаТаблицы.ПредставлениеОтчетаМнЧисло = СтрокаТаблицы.ПредставлениеОтчета;
		КонецЕсли;
		
		НомерОтчета = НомерОтчета + 1;
	КонецЦикла;
	
	// Проиндексируем для быстрого поиска по виду отчета.
	Результат.Индексы.Добавить("ВидОтчета");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкиКомплектовОтчетности

// Возвращает таблицу значений с полным перечнем возможных комплектов отчетности для банка.
//
// Параметры:
//	Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк, для которого запрашивается информация.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. описание переменной Результат.
//
Функция КомплектыОтчетности(Банк) Экспорт

	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0);
	ТипБулево = Новый ОписаниеТипов("Булево");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Архивный",                                          ТипБулево);
	Результат.Колонки.Добавить("ПодставлятьПоУмолчаниюПредпоследнийЗакрытыйПериод", ТипБулево);
	Результат.Колонки.Добавить("КраткоеПредставление",                              ТипСтрока);
	Результат.Колонки.Добавить("ПодробноеПредставление",                            ТипСтрока);
	Результат.Колонки.Добавить("Идентификатор",                                     ТипСтрока);
	Результат.Колонки.Добавить("ДатаНачала",                                        ТипДата);
	Результат.Колонки.Добавить("ДатаОкончания",                                     ТипДата);
	Результат.Колонки.Добавить("Периодичность",                                     ТипСтрока);
	Результат.Колонки.Добавить("СНачалаГода",                                       ТипБулево);
	Результат.Колонки.Добавить("СрокПредставленияВРабочихДнях",                     ТипБулево);
	Результат.Колонки.Добавить("СрокПредставленияМесяцев",                          ТипЧисло);
	Результат.Колонки.Добавить("СрокПредставленияДней",                             ТипЧисло);

	ТребованияБанкаXDTO = ТребованияБанкаXDTO(Банк);
	Если ТребованияБанкаXDTO = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ТекущаяВерсияСервиса = УниверсальныйОбменСБанками.ВерсияСервиса(Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);
	ТекущееСемействоКонфигураций = УниверсальныйОбменСБанками.СемействоКонфигураций();

	Для каждого КомплектОтчетности Из ТребованияБанкаXDTO.КомплектОтчетности Цикл

		// Проверим конфигурации, для которых применяются условия.
		Если ЗначениеЗаполнено(КомплектОтчетности.СемействоКонфигураций)
		   И Не УниверсальныйОбменСБанкамиКлиентСервер.ПринадлежитСемействуКонфигураций(ТекущееСемействоКонфигураций, КомплектОтчетности.СемействоКонфигураций)  Тогда
			// Комплект отчетности предназначен для другой конфигурации, для текущей конфигурации его пропускаем.
			Продолжить;
		КонецЕсли;
		
		// Проверим версии сервиса, для которых применяются условия.
		Если ЗначениеЗаполнено(КомплектОтчетности.МинВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, КомплектОтчетности.МинВерсияСервиса) < 0 Тогда
			// Комплект отчетность может быть корректно отображен только в следующих версиях программы, 
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КомплектОтчетности.МаксВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, КомплектОтчетности.МаксВерсияСервиса) > 0 Тогда
			// Комплект отчетность предназначен для отображения на предыдущих версиях программы,
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
	
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Архивный                                          = КомплектОтчетности.Архивный;
		НоваяСтрока.КраткоеПредставление                              = КомплектОтчетности.КраткоеПредставление;
		НоваяСтрока.ПодробноеПредставление                            = КомплектОтчетности.ПодробноеПредставление;
		НоваяСтрока.Идентификатор                                     = КомплектОтчетности.Идентификатор;
		НоваяСтрока.ДатаНачала                                        = КомплектОтчетности.ДатаНачала;
		Если ЗначениеЗаполнено(КомплектОтчетности.ДатаОкончания) Тогда
			НоваяСтрока.ДатаОкончания                                 = КонецДня(КомплектОтчетности.ДатаОкончания);
		Иначе
			НоваяСтрока.ДатаОкончания                                 = КонецДня('2999-12-31');
		КонецЕсли;
		НоваяСтрока.Периодичность                                     = КомплектОтчетности.Периодичность;
		НоваяСтрока.СНачалаГода                                       = КомплектОтчетности.СНачалаГода;
		НоваяСтрока.СрокПредставленияВРабочихДнях                     = КомплектОтчетности.СрокПредставленияВРабочихДнях;
		НоваяСтрока.СрокПредставленияМесяцев                          = КомплектОтчетности.СрокПредставленияМесяцев;
		НоваяСтрока.СрокПредставленияДней                             = КомплектОтчетности.СрокПредставленияДней;
		НоваяСтрока.ПодставлятьПоУмолчаниюПредпоследнийЗакрытыйПериод = КомплектОтчетности.ПодставлятьПоУмолчаниюПредпоследнийЗакрытыйПериод;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает описание настроек комплекта отчета в виде структуры с ключами,
// имена которых соответствуют именам свойств из пакета XDTO ФинОтчетностьВБанки.
//
// Параметры:
//	Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк, для которого запрашивается информация.
//	ИдентификаторКомплекта - Строка - Идентификатор комплекта банка.
//
// Возвращаемое значение:
//	Структура - описание настроек комплекта отчета,
//  Неопределено, если не комплект не найден.
//
Функция НастройкиКомплектаОтчетности(Банк, ИдентификаторКомплекта) Экспорт

	Если НЕ ЗначениеЗаполнено(Банк) ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторКомплекта) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТребованияБанкаXDTO = ТребованияБанкаXDTO(Банк);
	Если ТребованияБанкаXDTO = Неопределено Тогда
		// Настройки для банка не заданы.
		Возврат Неопределено;
	КонецЕсли;
	
	// Отбираем из общего списка требований банка требования к текущему комплекту отчетности.
	НайденныйКомплектXDTO = Неопределено;
	Для Каждого КомплектОтчетности Из ТребованияБанкаXDTO.КомплектОтчетности Цикл
		Если ВРег(КомплектОтчетности.Идентификатор) = ВРег(ИдентификаторКомплекта) Тогда
			НайденныйКомплектXDTO = КомплектОтчетности;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйКомплектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("Банк",                             Банк);
	Результат.Вставить("ИдентификаторКомплекта",           ИдентификаторКомплекта);
	Результат.Вставить("ДатаНачала",                       '0001-01-01');
	Результат.Вставить("ДатаОкончания",                    '0001-01-01');
	Результат.Вставить("Архивный",                          Ложь);
	Результат.Вставить("КраткоеПредставление",              "");
	Результат.Вставить("ПодробноеПредставление",            "");
	Результат.Вставить("Периодичность",                     "");
	Результат.Вставить("СНачалаГода",                       Ложь);
	Результат.Вставить("СрокПредставленияВРабочихДнях",     Ложь);
	Результат.Вставить("СрокПредставленияМесяцев",          0);
	Результат.Вставить("СрокПредставленияДней",             0);
	Результат.Вставить("ОсобыйСрокПредставленияЗаГод",      Ложь);
	Результат.Вставить("СрокПредставленияЗаГодМесяцев",     0);
	Результат.Вставить("СрокПредставленияЗаГодДней",        0);
	Результат.Вставить("ПереносСрокаПредставления",         0);
	Результат.Вставить("Регулярный",                        Ложь);
	Результат.Вставить("ИсключатьОтчетыПоСчетамБезОстатковИОборотов", Ложь);
	Результат.Вставить("РазворачиватьДерево",               Ложь);
	Результат.Вставить("ОсновныеПараметрыВыбораФайла"); // Неопределено или Структура, см. НовыеПараметрыВыбораФайла()
	Результат.Вставить("ОсновнойПорядокПодписания",         "");
	Результат.Вставить("ОсновнойПорядокПроверкиЗаполнения", "");
	Результат.Вставить("ОсновнойПорядокПроверкиЗаполнения1_21", "");
	Результат.Вставить("ОсновнойФорматСохранения",          "");
	Результат.Вставить("ОсновнойФорматСохранения1_27",      "");
	Результат.Вставить("ФорматИменованияФайлов",			"");
	Результат.Вставить("ПрефиксФайла",						"");
	Результат.Вставить("ДобавитьМеткуДоверенногоВремени",	Ложь);
	Результат.Вставить("ОтключитьПроверкуСертификата",  	Ложь);
	Результат.Вставить("РазрешеныМЧДB2G",  	                Ложь);
	Результат.Вставить("РазрешеныМЧДB2B",  	                Ложь);
	Результат.Вставить("Отчеты",                            НовыеОтчеты());
	
	// Заполняем по данным найденного комплекта отчетности.
	ЗаполнитьПростымиЗначениямиXDTO(Результат, НайденныйКомплектXDTO);
	Если ЗначениеЗаполнено(Результат.ДатаОкончания) Тогда
		Результат.ДатаОкончания = КонецДня(Результат.ДатаОкончания);
	Иначе
		Результат.ДатаОкончания = КонецДня('2999-12-31');
	КонецЕсли;
	
	// Реквизит с номером версии - служебный, переместим его значение
	// в основной и удалим из структуры результата.
	Результат.ОсновнойПорядокПроверкиЗаполнения = Результат.ОсновнойПорядокПроверкиЗаполнения1_21;
	Результат.Удалить("ОсновнойПорядокПроверкиЗаполнения1_21");  
	
	Если ЗначениеЗаполнено(Результат.ОсновнойФорматСохранения1_27) Тогда
		Результат.ОсновнойФорматСохранения = Результат.ОсновнойФорматСохранения1_27;  
	КонецЕсли;
		
	Результат.Удалить("ОсновнойФорматСохранения1_27"); 
	
	// Параметры выбора отчетов из файлов по умолчанию.
	Если НайденныйКомплектXDTO.ОсновныеПараметрыВыбораФайла <> Неопределено Тогда
		Результат.ОсновныеПараметрыВыбораФайла = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
		ЗаполнитьПростымиЗначениямиXDTO(Результат.ОсновныеПараметрыВыбораФайла, НайденныйКомплектXDTO.ОсновныеПараметрыВыбораФайла);
		Если НайденныйКомплектXDTO.ОсновныеПараметрыВыбораФайла.Установлено("МаксРазмер") Тогда
			Результат.ОсновныеПараметрыВыбораФайла.МаксимальныйРазмер = НайденныйКомплектXDTO.ОсновныеПараметрыВыбораФайла.МаксРазмер;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеВидовОтчетов = ОписаниеВидовОтчетов();
	ИспользоватьВалютныйУчет = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();

	ТекущаяВерсияСервиса         = УниверсальныйОбменСБанками.ВерсияСервиса(Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);
	ТекущееСемействоКонфигураций = УниверсальныйОбменСБанками.СемействоКонфигураций();
	ИмяКонфигурации              = УниверсальныйОбменСБанками.ИмяКонфигурации();
	ВерсияКонфигурации           = УниверсальныйОбменСБанками.ВерсияКонфигурации();
	СоставВерсииКонфигурации     = УниверсальныйОбменСБанками.СоставВерсииКонфигурации(ВерсияКонфигурации);
	
	// Настройки всех отчетов.
	Для каждого ОтчетXDTO Из НайденныйКомплектXDTO.Отчет Цикл
		
		Если Не ОтчетПредназначенДляКонфигурации(ОтчетXDTO, ТекущееСемействоКонфигураций) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Не ОтчетПредназначенДляВерсииКонфигурации(ОтчетXDTO.ВерсияКонфигурации, 
				ТекущееСемействоКонфигураций, ИмяКонфигурации, СоставВерсииКонфигурации) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Не ОтчетПредназначенДляВерсииСервиса(ОтчетXDTO, ТекущаяВерсияСервиса) Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаНовогоОтчета = Результат.Отчеты.Добавить();
		ЗаполнитьПростымиЗначениямиXDTO(СтрокаНовогоОтчета, ОтчетXDTO);
		
		// Реквизит с номером версии - служебный, переместим его значение
		// в основной и позже удалим из колонок таблицы результата.
		СтрокаНовогоОтчета.ПроверкаЗаполнения = СтрокаНовогоОтчета.ПроверкаЗаполнения1_21;
		
		Если ЗначениеЗаполнено(СтрокаНовогоОтчета.ФорматСохранения1_27) Тогда
			СтрокаНовогоОтчета.ФорматСохранения = СтрокаНовогоОтчета.ФорматСохранения1_27;
		КонецЕсли;

		// Проверяем, если вид отчета, который указан в настройках банка, отсутствует в таблице ОписаниеВидовОтчетов,
		// то это означает, что текущая версия программы устарела, и в сервисе уже выложены настройки для более новой версии программы.
		// В этом случае в текущей версии считаем такой отчет произвольным файлом.
		Если ОписаниеВидовОтчетов.Найти(СтрокаНовогоОтчета.ВидОтчета, "ВидОтчета") = Неопределено Тогда
			// В качестве представления отчета используем исходный вид отчета.
			Если НЕ ЗначениеЗаполнено(СтрокаНовогоОтчета.КраткоеПредставление) Тогда
				СтрокаНовогоОтчета.КраткоеПредставление = ОбщегоНазначенияБПКлиентСервер.СинонимИзИмени(СтрокаНовогоОтчета.ВидОтчета);
			КонецЕсли;
			СтрокаНовогоОтчета.ВидОтчета = "ПроизвольныйФайл";
		КонецЕсли;
		
		// Заполним краткое представление отчетов для множественного числа тем же значением,
		// что и для единственного, если явно не задано.
		Если НЕ ЗначениеЗаполнено(СтрокаНовогоОтчета.КраткоеПредставлениеМнЧисло) Тогда
			СтрокаНовогоОтчета.КраткоеПредставлениеМнЧисло = СтрокаНовогоОтчета.КраткоеПредставление;
		КонецЕсли;
		
		// Параметры выбора отчета из файла.
		Если ОтчетXDTO.ПараметрыВыбораФайла <> Неопределено Тогда
			СтрокаНовогоОтчета.ПараметрыВыбораФайла = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
			ЗаполнитьПростымиЗначениямиXDTO(СтрокаНовогоОтчета.ПараметрыВыбораФайла, ОтчетXDTO.ПараметрыВыбораФайла);
			Если ОтчетXDTO.ПараметрыВыбораФайла.Установлено("МаксРазмер") Тогда
				СтрокаНовогоОтчета.ПараметрыВыбораФайла.МаксимальныйРазмер = ОтчетXDTO.ПараметрыВыбораФайла.МаксРазмер;
			КонецЕсли;
		КонецЕсли;

		// Описание настроек формирования отчета.
		СтрокаНовогоОтчета.НастройкиОтчета = НовыеНастройкиОтчета(); 
		
		НастройкиОтчетаXDTO = ОтчетXDTO.НастройкиОтчета;
		
		Если НастройкиОтчетаXDTO <> Неопределено Тогда
			ЗаполнитьПростымиЗначениямиXDTO(СтрокаНовогоОтчета.НастройкиОтчета,  НастройкиОтчетаXDTO);
			СтрокаНовогоОтчета.Счет = СтрокаНовогоОтчета.НастройкиОтчета.Счет;
			
			// Если в базе не используется валютный учет, то принудительно уберем показатель "Валютная сумма" из настроек отчетов.
			Если НЕ ИспользоватьВалютныйУчет Тогда
				СтрокаНовогоОтчета.НастройкиОтчета.ПоказательВалютнаяСумма = Ложь;
			КонецЕсли;
			
			// Группировки
			Для каждого ГруппировкаXDTO Из НастройкиОтчетаXDTO.Группировка Цикл
				НоваяГруппировка = СтрокаНовогоОтчета.НастройкиОтчета.Группировки.Добавить();
				ЗаполнитьПростымиЗначениямиXDTO(НоваяГруппировка, ГруппировкаXDTO);
			КонецЦикла;
			СтрокаНовогоОтчета.НастройкиОтчета.Группировки.Сортировать("НомерСтроки");

			// Отборы
			Для каждого ОтборXDTO Из НастройкиОтчетаXDTO.Отбор Цикл
				НовыйОтбор = СтрокаНовогоОтчета.НастройкиОтчета.Отборы.Добавить();
				ЗаполнитьПростымиЗначениямиXDTO(НовыйОтбор, ОтборXDTO);
			КонецЦикла;
			
			// Дополнительные поля
			Для каждого ДопПолеXDTO Из НастройкиОтчетаXDTO.ДополнительноеПоле Цикл
				НовоеДопПоле = СтрокаНовогоОтчета.НастройкиОтчета.ДополнительныеПоля.Добавить();
				ЗаполнитьПростымиЗначениямиXDTO(НовоеДопПоле, ДопПолеXDTO);
			КонецЦикла;
			СтрокаНовогоОтчета.НастройкиОтчета.ДополнительныеПоля.Сортировать("НомерСтроки");
			
			// Группировка по счетам
			Для каждого ГруппировкаПоСчетамXDTO Из НастройкиОтчетаXDTO.ГруппировкаПоСчетам Цикл
				НоваяГруппировкаПоСчетам = СтрокаНовогоОтчета.НастройкиОтчета.ГруппировкаПоСчетам.Добавить();
				ЗаполнитьПростымиЗначениямиXDTO(НоваяГруппировкаПоСчетам, ГруппировкаПоСчетамXDTO);
			КонецЦикла;
			СтрокаНовогоОтчета.НастройкиОтчета.ГруппировкаПоСчетам.Сортировать("НомерСтроки");
			
			// Развернутое сальдо по счетам
			Для каждого РазвернутоеСальдоПоСчетамXDTO Из НастройкиОтчетаXDTO.РазвернутоеСальдоПоСчетам Цикл
				НовоеРазвернутоеСальдоПоСчетам = СтрокаНовогоОтчета.НастройкиОтчета.РазвернутоеСальдоПоСчетам.Добавить();
				ЗаполнитьПростымиЗначениямиXDTO(НовоеРазвернутоеСальдоПоСчетам, РазвернутоеСальдоПоСчетамXDTO);
			КонецЦикла;
			СтрокаНовогоОтчета.НастройкиОтчета.РазвернутоеСальдоПоСчетам.Сортировать("НомерСтроки");

			// Интервалы
			Для каждого ИнтервалXDTO Из НастройкиОтчетаXDTO.Интервалы Цикл
				НовыйИнтервал = СтрокаНовогоОтчета.НастройкиОтчета.Интервалы.Добавить();
				ЗаполнитьПростымиЗначениямиXDTO(НовыйИнтервал, ИнтервалXDTO);
			КонецЦикла;
			СтрокаНовогоОтчета.НастройкиОтчета.Интервалы.Сортировать("Значение");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим колонку служебного реквизита.
	Результат.Отчеты.Колонки.Удалить("ПроверкаЗаполнения1_21");
	Результат.Отчеты.Колонки.Удалить("ФорматСохранения1_27");
	
	// Для быстрого поиска настроек.
	Результат.Отчеты.Индексы.Добавить("ИдентификаторСтрокиКомплекта");
	Результат.Отчеты.Индексы.Добавить("ВидОтчета");
	
	Возврат Результат;

КонецФункции

// Список реквизитов субъектов (организаций или контрагентов), которые используются подсистемой фин.отчетности.
//
// Возвращаемое значение:
//  Структура    - Ключ = имя реквизита;
//                 Значение = значение по-умолчанию для реквизита.
//
Функция СписокРеквизитовСубъекта() Экспорт
	
	РеквизитыСубъектов = Новый Структура;
	РеквизитыСубъектов.Вставить("Наименование", "");
	РеквизитыСубъектов.Вставить("ИНН", "");
	РеквизитыСубъектов.Вставить("КПП", "");
	РеквизитыСубъектов.Вставить("ОГРН", "");
	РеквизитыСубъектов.Вставить("ЮридическоеФизическоеЛицо", Истина);
	РеквизитыСубъектов.Вставить("Ссылка");
	
	Возврат РеквизитыСубъектов;
	
КонецФункции

// Заменяет расширение у файла.
//
// Параметры:
//  ИмяФайла     - Строка - со старым расширением.
//  ЦелевойФормат - ТипФайлаТабличногоДокумента, Строка - к какому расширению привести.
//  ПоследнийИспользовавшийся - Структура - предыдущий результат сопоставления типа и расширения (для кеширования).
//
// Возвращаемое значение:
//   Строка      - имя файла с новым расширением.
//
Функция ИмяФайлаПоТипуФайла(Знач ИмяФайла, Знач ЦелевойФормат, ПоследнийИспользовавшийся = Неопределено) Экспорт
	
	// Убираем старое расширение от файла.
	ДлинаРасширения = СтрДлина(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));
	Если ДлинаРасширения > 0 Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла) - ДлинаРасширения - 1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЦелевойФормат) Тогда
		Возврат ИмяФайла + ".bin";
	ИначеЕсли ТипЗнч(ЦелевойФормат) = Тип("Строка") Тогда
		Возврат ИмяФайла + "." + ЦелевойФормат;
	КонецЕсли;

	Если ПоследнийИспользовавшийся = Неопределено Тогда

		ПоследнийИспользовавшийся = Новый Структура;
		ПоследнийИспользовавшийся.Вставить("ТипФайлаТабличногоДокумента", ТипФайлаТабличногоДокумента.MXL);
		ПоследнийИспользовавшийся.Вставить("Расширение", "mxl");
		
	КонецЕсли;
	Если ЦелевойФормат = ПоследнийИспользовавшийся.ТипФайлаТабличногоДокумента Тогда
		// Если это очередной файл, для которого уже было определено расширение.
		Возврат ИмяФайла + "." + ПоследнийИспользовавшийся.Расширение;
	КонецЕсли;
	
	// Нужно подобрать расширение.
	ТипыФорматов = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
	ТипФормата = ТипыФорматов.Найти(ЦелевойФормат, "ТипФайлаТабличногоДокумента");
	Если ТипФормата = Неопределено Тогда
		
		ПоследнийИспользовавшийся.ТипФайлаТабличногоДокумента = ЦелевойФормат;
		ПоследнийИспользовавшийся.Расширение = НРег(ЦелевойФормат);
		
	Иначе
		
		ПоследнийИспользовавшийся = ТипФормата;
		
	КонецЕсли;
		
	Возврат ИмяФайла + "." + ПоследнийИспользовавшийся.Расширение;
	
КонецФункции

Функция ПустыеПараметрыОтчетаВедомостьАмортизацииОС() Экспорт
	
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Общая структура настроек.
	ПараметрыОтчета.ПараметрыРежимаВыгрузки.ВидОтчета = "ВедомостьАмортизацииОС";
	ПараметрыОтчета.Вставить("Группировка", БухгалтерскиеОтчеты.НовыйГруппировки());
	ПараметрыОтчета.Вставить("ДополнительныеПоля", БухгалтерскиеОтчеты.НовыйДополнительныеПоля());
	
	// 0 = В одной колонке, 1 = В отдельных колонках
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей",
		БухгалтерскиеОтчетыКлиентСервер.РазмещениеДополнительныхПолей().ВместеСВладельцем);

	БухгалтерскиеОтчетыПереопределяемый.ПустыеПараметрыОтчетаВедомостьАмортизацииОС(ПараметрыОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПустыеПараметрыОтчетаВаловаяПрибыль() Экспорт
	
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Общая структура настроек.
	ПараметрыОтчета.ПараметрыРежимаВыгрузки.ВидОтчета = "ВаловаяПрибыль";
	ПараметрыОтчета.Вставить("Группировка", БухгалтерскиеОтчеты.НовыйГруппировки());
	ПараметрыОтчета.Вставить("ДополнительныеПоля", БухгалтерскиеОтчеты.НовыйДополнительныеПоля());

	// 0 = В одной колонке, 1 = В отдельных колонках
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей",
		БухгалтерскиеОтчетыКлиентСервер.РазмещениеДополнительныхПолей().ВместеСВладельцем);
	
	БухгалтерскиеОтчетыПереопределяемый.ПустыеПараметрыОтчетаВаловаяПрибыль(ПараметрыОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПустыеПараметрыОтчетаКассоваяКнига() Экспорт
	
	// Общая структура настроек.
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	ПараметрыОтчета.Вставить("ИдентификаторОтчета", "КассоваяКнига"); // имя объекта метаданных
	
	// Отборы из шапки отчета.
	ПараметрыОтчета.Вставить("Организация",                Справочники.Организации.ПустаяСсылка()); // по организации
	ПараметрыОтчета.Вставить("НачалоПериода",              '00010101');
	ПараметрыОтчета.Вставить("КонецПериода",               '00010101');
	ПараметрыОтчета.Вставить("ПодразделениеОрганизации",   Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ПараметрыОтчета.Вставить("ФормироватьПоПодразделению", Ложь);
	
	ПараметрыОтчета.Вставить("ПроверитьНомера",            Ложь);
	ПараметрыОтчета.Вставить("ПересчитатьНомераЛистов",    Ложь);
	ПараметрыОтчета.Вставить("ПоследнийЛист",              0);
	ПараметрыОтчета.Вставить("НомерЛистаНачало",           0);
	ПараметрыОтчета.Вставить("СписокСформированныхЛистов", Новый СписокЗначений);
	
	ПараметрыОтчета.Вставить("ВыводитьОснования",   Ложь);
	ПараметрыОтчета.Вставить("СформироватьОбложку", Ложь);
	
	ПараметрыОтчета.Вставить("ПлатежныйАгент",   Ложь);
	ПараметрыОтчета.Вставить("ГлавныйБухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтчета.Вставить("Кассир",           Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ПараметрыОтчета.Вставить("Результат");
	
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	ПараметрыОтчета.ПараметрыРежимаВыгрузки.ВидОтчета = "КассоваяКнига";
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Без открытия формы формирует табличный документ отчета, построенный на основе подсистемы "Варианты отчетов" из БСП.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПараметрыОтчетаВедомостьАмортизацииОС()
//  ПараметрыЗаполнения - Структура - см. модуль менеджера документа ФинОтчетВБанк, процедура ЗаполнитьОтчетыВФоне()
//
// Возвращаемое значение:
//  Структура - см. БухгалтерскиеОтчетыВызовСервера.РезультатФормированияОтчета()
//
Функция ПодготовитьОтчетБСП(ПараметрыОтчета, ПараметрыЗаполнения) Экспорт
	
	РезультатФормирования = БухгалтерскиеОтчетыВызовСервера.РезультатФормированияОтчета();
	
	ИмяВарианта = ЗаполнениеФинОтчетностиВБанкиВызовСервера.ДоступныйВариантОтчета(
					ПараметрыОтчета.ИдентификаторОтчета, ПараметрыОтчета.ИмяВарианта, Ложь);
	
	// Инициализируем стандартными настройками из типового варианта.
	ОтчетОбъект = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].Создать();
	ОтчетОбъект.СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ОтчетыСервер.ИнициализироватьКомпоновщикНастроек(
		ОтчетОбъект.КомпоновщикНастроек, ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВарианта].Настройки);
		
	// Устанавливаем настройки по требованиям банка.
	НовыеПользовательскиеНастройкиКД = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Для Каждого ПараметрОтчета Из ПараметрыОтчета Цикл
		
		ЗначениеПараметра = ?(ТипЗнч(ПараметрОтчета.Значение) = Тип("ТаблицаЗначений"),
			ОбщегоНазначения.ТаблицаЗначенийВМассив(ПараметрОтчета.Значение), ПараметрОтчета.Значение);
		НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить(ПараметрОтчета.Ключ, ЗначениеПараметра);
		
	КонецЦикла;
	БухгалтерскиеОтчеты.ПриЗагрузкеПользовательскихНастроек(ОтчетОбъект, НовыеПользовательскиеНастройкиКД, ОтчетОбъект.КомпоновщикНастроек);

	Попытка
		
		ОтчетОбъект.СкомпоноватьРезультат(РезультатФормирования.Результат);
	
	Исключение
		
		ИнформацияОшибки = ИнформацияОбОшибке();
		РезультатФормирования.Выполнено = Ложь;
		РезультатФормирования.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОшибки);
		РезультатФормирования.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОшибки);
		
		// Записываем в журнал регистрации
		Событие = НСтр("ru = 'Ошибка формирования отчета';
						|en = 'Reporting error'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,
			ОтчетОбъект.Метаданные(), , // Данных нет
			РезультатФормирования.ПодробноеПредставлениеОшибки);
		
		// Информируем пользователя файловой версии
		Пока ИнформацияОшибки.Причина <> Неопределено Цикл
			ИнформацияОшибки = ИнформацияОшибки.Причина;
		КонецЦикла;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1';
										|en = 'The report is not generated. %1'"), ИнформацияОшибки.Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	КонецПопытки;
	
	Возврат РезультатФормирования;

КонецФункции

// Без открытия формы формирует табличный документ стандартного бухгалтерского отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПараметрыОтчетаВедомостьАмортизацииОС()
//  ПараметрыЗаполнения - Структура - см. модуль менеджера документа ФинОтчетВБанк, процедура ЗаполнитьОтчетыВФоне()
//
// Возвращаемое значение:
//  Структура - см. БухгалтерскиеОтчетыВызовСервера.РезультатФормированияОтчета()
//
Функция ПодготовитьОтчетБП(ПараметрыОтчета, ПараметрыЗаполнения) Экспорт
	
	БухгалтерскиеОтчеты.ПодготовитьСхемуКомпоновкиДанных(ПараметрыОтчета);
	
	// Для выгрузки в банк расшифровку формировать не требуется.
	// Единственное исключение - отчет "Оборотно-сальдовая ведомость", где расшифровка используется при расчете общих итогов.
	ПараметрыОтчета.Вставить("ИспользоватьДанныеРасшифровки",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ИдентификаторОтчета", "") = "ОборотноСальдоваяВедомость");
	
	РезультатФормированияОтчета = БухгалтерскиеОтчетыВызовСервера.ПодготовитьОтчет(ПараметрыОтчета);
	Если ЭтоАдресВременногоХранилища(РезультатФормированияОтчета.ДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(РезультатФормированияОтчета.ДанныеРасшифровки);
		РезультатФормированияОтчета.ДанныеРасшифровки = "";
	КонецЕсли;
		
	Возврат РезультатФормированияОтчета;

КонецФункции

Функция НайтиСчетПоКоду(Знач КодСчета) Экспорт

	КодСчета = СокрЛП(КодСчета);
	
	Если НЕ ЗначениеЗаполнено(КодСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчета);

КонецФункции

// Конструктор основных параметров формы отчета.
//
// Параметры:
//
// Возвращаемое значение:
//	Структура - Параметры для открытия формы на клиенте.
//
Функция НовыйПараметрыФормы() Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимРасшифровки",        Истина); // Открываем в режиме расшифровки, 
	                                                            // чтобы не сохранялись настройки банка для открытий отчета из интерфейса.
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("РежимВыгрузки",           Истина); // Отобразить на форме кнопку Выгрузить отчет.
	
	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета) Экспорт

	// Заполняем параметры, которые одинаковы для всех формируемых отчетов.
	Если ПараметрыОтчета.Свойство("РежимРасшифровки") Тогда
		ПараметрыОтчета.РежимРасшифровки  = Истина;
	КонецЕсли;
	Если ПараметрыОтчета.Свойство("ВыводитьЗаголовок") Тогда
		ПараметрыОтчета.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	Если ПараметрыОтчета.Свойство("ВыводитьПодвал") Тогда
		ПараметрыОтчета.ВыводитьПодвал    = Истина;
	КонецЕсли;

	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения") Тогда
		ПараметрыОтчета.ВыводитьЕдиницуИзмерения = Истина;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ПоказательБУ") Тогда
		ПараметрыОтчета.ПоказательБУ = Истина; // Для банков нужны данные бухгалтерского учета.
	КонецЕсли;

	ПараметрыРежимаВыгрузки = Новый Структура;
	ПараметрыРежимаВыгрузки.Вставить("ВидОтчета", "");                   // уникальный идентификатор отчета (не зависит от семейства конфигураций)
	ПараметрыРежимаВыгрузки.Вставить("ИдентификаторФормыВладельца", ""); // уникальный идентификатор открытой формы
	ПараметрыРежимаВыгрузки.Вставить("КлючСтрокиОтчета", 0);             // уникальный идентификатор строки в пакете
	ПараметрыРежимаВыгрузки.Вставить("ПереопределятьМакетОформления", Ложь);
	ПараметрыОтчета.Вставить("ПараметрыРежимаВыгрузки", ПараметрыРежимаВыгрузки);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствКромеТаблиц(Приемник, Источник) Экспорт
	
	СвойстваИсключения = Новый Массив;
	Для каждого КлючИЗначение Из Источник Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			Если Приемник.Свойство(КлючИЗначение.Ключ) Тогда
				СвойстваИсключения.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		ИначеЕсли Приемник.Свойство(КлючИЗначение.Ключ) И ТипЗнч(Приемник[КлючИЗначение.Ключ]) = Тип("ТаблицаЗначений") Тогда
			СвойстваИсключения.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник, , СтрСоединить(СвойстваИсключения, ", "));
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто) Экспорт
	
	Для каждого СтрокаГруппировки Из НастройкиОтчета.Группировки Цикл
		
		ОписаниеПоляОтчета = ОписаниеПоляОтчета(СтрокаГруппировки.Поле, СвойстваСчета, КешСубконто);
		
		Если НЕ ЗначениеЗаполнено(ОписаниеПоляОтчета.ИмяПоля) Тогда
			// Неизвестное поле, его пропускаем.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока                = ПараметрыОтчета.Группировка.Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = ОписаниеПоляОтчета.ИмяПоля;
		НоваяСтрока.Представление  = ОписаниеПоляОтчета.Представление;
		НоваяСтрока.ТипГруппировки = ТипГруппировкиСтандартныхОтчетов(СтрокаГруппировки.ТипГруппировки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто) Экспорт

	Если НастройкиОтчета.Отборы.Количество() = 0 Тогда
		// Отборы не заданы.
		Возврат;
	КонецЕсли;

	ПользовательскиеНастройки = ПользовательскиеНастройкиОтчета(ПараметрыОтчета);
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";

	Для каждого СтрокаОтбора Из НастройкиОтчета.Отборы Цикл
		
		ОписаниеПоляОтчета = ОписаниеПоляОтчета(СтрокаОтбора.Поле, СвойстваСчета, КешСубконто);
		
		Если НЕ ЗначениеЗаполнено(ОписаниеПоляОтчета.ИмяПоля) Тогда
			// Отборы по неопознанным полям не пропускаем, т.к. это могут быть ресурсы СКД 
			// с нестандартными именами (например, ОборотыЗаПериод.БУОборотКт).
			// Если это невалидное поле, СКД его сама проигнорирует.
			ОписаниеПоляОтчета.ИмяПоля = СтрокаОтбора.Поле;
		КонецЕсли;
		
		ЭтоСчет           = ЭтоСчет(ОписаниеПоляОтчета.ИмяПоля);
		ЗначениеОтбораСКД = Неопределено;
		ВидСравненияСКД   = ВидСравненияСтандартныхОтчетов(СтрокаОтбора.ВидСравнения);

		Если ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСписке
			ИЛИ ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			ИЛИ ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСписке
			ИЛИ ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			
			// Получим список значений.
			ЗначениеОтбораСКД  = Новый СписокЗначений;
			ЗначенияОтбораXDTO = СтрРазделить(СтрокаОтбора.Значение, "|"); // Специальный разделитель элементов списка.

			Для каждого ЗначениеОтбораXDTO Из ЗначенияОтбораXDTO Цикл
				ЗначениеИзСтроки = СтрокаВЗначение(ЗначениеОтбораXDTO);
				Если ЗначениеИзСтроки = Неопределено Тогда
					// Отбор по неопознанным значениям не накладываем.
					Продолжить;
				КонецЕсли;
			
				Если ЭтоСчет Тогда
					// Преобразуем в ссылку на счет.
					Счет = НайтиСчетПоКоду(ЗначениеИзСтроки);
					Если ЗначениеЗаполнено(Счет) Тогда
						ЗначениеОтбораСКД.Добавить(Счет);
					КонецЕсли;
				Иначе
					ЗначениеОтбораСКД.Добавить(ЗначениеИзСтроки);
				КонецЕсли;
			КонецЦикла;

		Иначе
			// Атомарное значение.
			ЗначениеИзСтроки = СтрокаВЗначение(СтрокаОтбора.Значение);
			Если ЗначениеИзСтроки = Неопределено Тогда
				// Отбор по неопознанным значениям не накладываем.
				Продолжить;
			КонецЕсли;
			
			Если ЭтоСчет Тогда
				ЗначениеОтбораСКД = НайтиСчетПоКоду(ЗначениеИзСтроки);
			Иначе
				ЗначениеОтбораСКД = ЗначениеИзСтроки;
			КонецЕсли;
		КонецЕсли;

		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ОписаниеПоляОтчета.ИмяПоля, ЗначениеОтбораСКД, ВидСравненияСКД);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто) Экспорт

	Если ПараметрыОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		ПараметрыОтчета.РазмещениеДополнительныхПолей = РазмещениеДополнительныхПолейСтандартныхОтчетов(
			НастройкиОтчета.РазмещениеДополнительныхПолей);
	КонецЕсли;
	
	Для каждого СтрокаДопПоля Из НастройкиОтчета.ДополнительныеПоля Цикл
		
		ОписаниеПоляОтчета = ОписаниеПоляОтчета(СтрокаДопПоля.Поле, СвойстваСчета, КешСубконто);
		
		Если НЕ ЗначениеЗаполнено(ОписаниеПоляОтчета.ИмяПоля) Тогда
			// Неизвестное поле, его пропускаем.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока               = ПараметрыОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ОписаниеПоляОтчета.ИмяПоля;
		НоваяСтрока.Представление = ОписаниеПоляОтчета.Представление;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнтервалыОтчета(ПараметрыОтчета, НастройкиОтчета) Экспорт

	ПредыдущееЗначение = 0;

	Подстроки = Новый Массив;

	Для каждого СтрокаИнтервала Из НастройкиОтчета.Интервалы Цикл
		
		НоваяСтрока             = ПараметрыОтчета.Интервалы.Добавить();
		
		// НомерСтроки в таблице Интервалы - это не платформенный номер, а обычная колонка.
		// Заполняем ее самостоятельно, т.к. он используется при формировании колонок в СКД отчета.
		НоваяСтрока.НомерСтроки = ПараметрыОтчета.Интервалы.Количество(); 
		НоваяСтрока.Значение    = СтрокаИнтервала.Значение;
		
		// Формируем представление интервала.
		СтрокаДней = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня';
				|en = ';%1 day;;%1 day;%1 days;%1 day'"),
			НоваяСтрока.Значение,
			,
			"ЧГ=");
			
		Если ЗначениеЗаполнено(ПредыдущееЗначение) Тогда
			НоваяСтрока.Представление = СтрШаблон(НСтр("ru = 'От %1 до %2';
														|en = '%1 to %2'"), Формат(ПредыдущееЗначение + 1, "ЧГ="), СтрокаДней);
		Иначе
			НоваяСтрока.Представление = СтрШаблон(НСтр("ru = 'До %1';
														|en = 'Until %1'"), СтрокаДней);
		КонецЕсли;
		
		ПредыдущееЗначение = СтрокаИнтервала.Значение;

	КонецЦикла;
	
КонецПроцедуры

// Возвращает форматы сохранения регл. отчетов в виде массива
//
// Параметры:
//	ТипФайлаРегОтчета - Строка
//
// Возвращаемое значение:
//   Массив   - Массив строк.
//
Функция ФорматыСохраненияРеглОтчетности(ТипФайлаРегОтчета) Экспорт  
	
	Результат = Новый Массив;

	МассивТиповФайлов = СтрРазделить(ТипФайлаРегОтчета, "_", Ложь); 
	
	Для Каждого ТипФайлаРегОтчета Из МассивТиповФайлов Цикл    
		
		Если Врег(ТипФайлаРегОтчета) = "XLSX" Тогда
			
			Результат.Добавить(ТипФайлаТабличногоДокумента.XLSX);
			
		ИначеЕсли Врег(ТипФайлаРегОтчета) = "XLS" Тогда
			
			Результат.Добавить(ТипФайлаТабличногоДокумента.XLS);  
			
		ИначеЕсли Врег(ТипФайлаРегОтчета) = "PDF" Тогда
			
			Результат.Добавить(ТипФайлаТабличногоДокумента.PDF);

		КонецЕсли;   
		
	КонецЦикла;         
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат;  
	Иначе    
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчетов

// Возвращает параметры открытия формы отчета по параметрам его заполнения.
//
// Параметры:
//	ПараметрыОтчета - Структура - параметры формирования отчета.
//
// Возвращаемое значение:
//	Структура - Параметры для открытия формы на клиенте.
//
Функция ПараметрыФормыОтчета(ПараметрыОтчета) Экспорт
	
	// Подготавливаем структуру для отбора необходимых параметров.
	СлужебныеПараметры = БухгалтерскиеОтчеты.СлужебныеПустыеПараметрыКомпоновкиОтчета();

	// Через ПользовательскиеНастройки могут быть переданы отборы и другие настройки, подготовленные в формате СКД.
	Если ПараметрыОтчета.Свойство("ПользовательскиеНастройки") Тогда
		ПользовательскиеНастройки = ПараметрыОтчета.ПользовательскиеНастройки;

		// Добавим пользовательские настройки в качестве служебных параметров, в форму они передаются явным параметром.
		СлужебныеПараметры.Вставить("ПользовательскиеНастройки"); 
	Иначе
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;

	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ЗаполняемыеНастройки = Новый Структура();
	// Показатели заполнены исходя из настроек банка, их не требуется заполнять по умолчанию.
	ЗаполняемыеНастройки.Вставить("Показатели", Ложь);
	
	// Преобразуем параметры отчета при необходимости.
	Для каждого КлючИЗначение Из ПараметрыОтчета Цикл
		
		ИмяПараметра      = КлючИЗначение.Ключ;
		ЗначениеПараметра = КлючИЗначение.Значение;
		
		Если СлужебныеПараметры.Свойство(ИмяПараметра) Тогда
			// Служебные параметры не передаем в форму, они будут заполнены при инициализации формы.
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
			// Таблицы значений на клиенте не доступны, их требуется преобразовывать в массивы структур.
			ЗначениеПараметра = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗначениеПараметра);
			
			ЗаполняемыеНастройки.Вставить(ИмяПараметра, Ложь); // Не требуется менять настройки, которые явно установлены в требованиях банка.
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	ПараметрыФормы = НовыйПараметрыФормы();
	ПараметрыФормы.Вставить("ВидРасшифровки",            2); // Из пользовательских настроек
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",      ЗаполняемыеНастройки);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Возвращает структуру с параметрами для формирования отчета по форме банка.
//
// Возвращаемое значение:
//	Структура
//
Функция ПустыеПараметрыОтчетаПоФормеБанка() Экспорт
	
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	ПараметрыОтчета.Вставить("ЗаголовокОтчета",         "");
	ПараметрыОтчета.Вставить("ИмяМакетаОтчета",         "");
	ПараметрыОтчета.Вставить("ТекущийФинОтчетВБанк",   	Документы.ФинОтчетВБанк.ПустаяСсылка());
	ПараметрыОтчета.Вставить("ТекущийКлючСтрокиОтчета", 0);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает заголовок отчета для строки отчетности.
//
// Параметры:
//	СтрокаОтчетности - строка ТЧ Отчетность документа ФинОтчетВБанк.
//	СтрокаНастройки - строка настроек отчета, см. НовыеОтчеты().
//
// Возвращаемое значение:
//	Структура
//
Функция ЗаголовокОтчета(СтрокаОтчетности, СтрокаНастройки) Экспорт
	
	Если СтрокаНастройки = Неопределено Тогда
		Возврат "";
	КонецЕсли;
		
	Подстроки = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаНастройки.КраткоеПредставление) Тогда
		Подстроки.Добавить(СтрокаНастройки.КраткоеПредставление);
	КонецЕсли;
	
	ОтчетнаяДатаСтрока = Формат(СтрокаОтчетности.ДатаОкончания, "ДФ=dd.MM.yyyy");
	ПериодСтрока = ПредставлениеПериода(СтрокаОтчетности.ДатаНачала, КонецДня(СтрокаОтчетности.ДатаОкончания),
		"ФП=Истина");		
	ПредставлениеПериодаОтчетнаяДата = СтрШаблон(НСтр("ru = 'на %1';
														|en = 'as of %1'"), ОтчетнаяДатаСтрока);
	ПредставлениеПериодаПериод = СтрШаблон(НСтр("ru = 'за %1';
												|en = 'for %1'"), ПериодСтрока);
		
	Если НЕ ЗначениеЗаполнено(СтрокаНастройки.ВыводПериодаВЗаголовке) 
		ИЛИ СтрокаНастройки.ВыводПериодаВЗаголовке = "Период" Тогда
		Подстроки.Добавить(ПредставлениеПериодаПериод);
	ИначеЕсли СтрокаНастройки.ВыводПериодаВЗаголовке = "ОтчетнаяДата" Тогда
		Подстроки.Добавить(ПредставлениеПериодаОтчетнаяДата);
	КонецЕсли;
	Если Подстроки.Количество() > 0 Тогда
		ЗаголовокОтчета = СтрСоединить(Подстроки, " ");
	Иначе
		ЗаголовокОтчета = "";
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Анализ счета" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаАнализСчета(НастройкиОтчета) Экспорт
	
	СвойстваСчета = СвойстваСчета(НастройкиОтчета.Счет);
	Если СвойстваСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = Отчеты.АнализСчета.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	ПараметрыОтчета.Периодичность = ПериодичностьСтандартныхОтчетов(НастройкиОтчета.Периодичность);
	ПараметрыОтчета.Счет          = СвойстваСчета.Ссылка;
	
	КешСубконто = Новый Структура();
	
	ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьКорГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, КешСубконто);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "ОСВ" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаОСВ(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = Отчеты.ОборотноСальдоваяВедомость.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	СвойстваСчета = Неопределено;
	КешСубконто = Новый Структура();
	
	ЗаполнитьГруппировкиОСВ(ПараметрыОтчета, НастройкиОтчета, КешСубконто);
	ЗаполнитьРазвернутоеСальдоОтчета(ПараметрыОтчета, НастройкиОтчета, КешСубконто);
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "ОСВ по счету" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаОСВПоСчету(НастройкиОтчета) Экспорт
	
	СвойстваСчета = СвойстваСчета(НастройкиОтчета.Счет);
	Если СвойстваСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = Отчеты.ОборотноСальдоваяВедомостьПоСчету.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	ПараметрыОтчета.Периодичность = ПериодичностьСтандартныхОтчетов(НастройкиОтчета.Периодичность);
	ПараметрыОтчета.Счет          = СвойстваСчета.Ссылка;
	
	КешСубконто = Новый Структура();
	
	ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Обороты счета" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаОборотыСчета(НастройкиОтчета) Экспорт
	
	СвойстваСчета = СвойстваСчета(НастройкиОтчета.Счет);
	Если СвойстваСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = Отчеты.ОборотыСчета.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	ПараметрыОтчета.Периодичность = ПериодичностьСтандартныхОтчетов(НастройкиОтчета.Периодичность);
	ПараметрыОтчета.Счет          = СвойстваСчета.Ссылка;
	
	КешСубконто = Новый Структура();
	
	ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Карточка счета" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаКарточкаСчета(НастройкиОтчета) Экспорт
	
	СвойстваСчета = СвойстваСчета(НастройкиОтчета.Счет);
	Если СвойстваСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = Отчеты.КарточкаСчета.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);

	КешСубконто = Новый Структура();
	
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);	
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	
	ПараметрыОтчета.Периодичность = ПериодичностьСтандартныхОтчетов(НастройкиОтчета.Периодичность);
	ПараметрыОтчета.Счет          = СвойстваСчета.Ссылка;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Валовая прибыль" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыОтчетаВаловаяПрибыль()
//
Функция ПараметрыОтчетаВаловаяПрибыль(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = ПустыеПараметрыОтчетаВаловаяПрибыль();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	ПараметрыОтчета.Периодичность = ПериодичностьСтандартныхОтчетов(НастройкиОтчета.Периодичность);
	
	СвойстваСчета = Неопределено;
	КешСубконто = Новый Структура();
	
	// Перед установкой группировок и доп.полей из настроек банка,
	// требуется очистить установленные группировки и доп.поля из сохраненных настроек.
	ПараметрыОтчета.Вставить("ОчищатьТаблицуГруппировок", Истина);
	ПараметрыОтчета.Вставить("ОчищатьДополнительныеПоля", Истина);
	
	ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Ведомость амортизации ОС" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыОтчетаВедомостьАмортизацииОС()
//
Функция ПараметрыОтчетаВедомостьАмортизацииОС(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = ПустыеПараметрыОтчетаВедомостьАмортизацииОС();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	СвойстваСчета = Неопределено;
	КешСубконто = Новый Структура();
	
	// Перед установкой группировок и доп.полей из настроек банка,
	// требуется очистить установленные группировки и доп.поля из сохраненных настроек.
	ПараметрыОтчета.Вставить("ОчищатьТаблицуГруппировок", Истина);
	ПараметрыОтчета.Вставить("ОчищатьДополнительныеПоля", Истина);
	
	ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Расшифровка задолженности" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаРасшифровкаЗадолженности(НастройкиОтчета) Экспорт

	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.ПараметрыОтчетаРасшифровкаЗадолженности(НастройкиОтчета, ПараметрыОтчета);
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Кассовая книга" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаКассоваяКнига(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = ПустыеПараметрыОтчетаКассоваяКнига();
	ПараметрыФормы = НовыйПараметрыФормы();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, ПараметрыФормы, Ложь);
	
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Книга доходов по патенту" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаКнигаУчетаДоходовПатент(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовПатент.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	ПараметрыФормы = НовыйПараметрыФормы();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, ПараметрыФормы, Ложь);
	
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	// Получим расширение "по умолчанию".
	Расширение = Документы.ФинОтчетВБанк.РасширениеФайлаБезТочки(Неопределено, Неопределено);
	ТипФайла = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ТипФайлаПакетаОтображаемыхДокументовПоРасширению(
			ПараметрыОтчета.Расширение);
	
	ПараметрыОтчета.Вставить("Расширение", Расширение);
	ПараметрыОтчета.Вставить("ТипФайла",   ТипФайла);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Книга доходов и расходов УСН" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаКнигаУчетаДоходовИРасходов(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовИРасходов.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	ПараметрыФормы = НовыйПараметрыФормы();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, ПараметрыФормы, Ложь);
	
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	// Получим расширение "по умолчанию".
	Расширение = Документы.ФинОтчетВБанк.РасширениеФайлаБезТочки(Неопределено, Неопределено);
	ТипФайла = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ТипФайлаПакетаОтображаемыхДокументовПоРасширению(
			ПараметрыОтчета.Расширение);
	
	ПараметрыОтчета.Вставить("Расширение", Расширение);
	ПараметрыОтчета.Вставить("ТипФайла",   ТипФайла);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает параметры формирования отчета "Книга доходов и расходов предпринимателя" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.ПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(НастройкиОтчета, ПараметрыОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПодготовитьДвоичныеДанныеПакетаОтображаемыхДокументов(ПараметрыОтчета) Экспорт
	
	ВозвращаемыеПараметры = НовыйВозвращаемыеПараметры();
	ВозвращаемыеПараметры.Выполнено = Истина;
	
	Если ПараметрыОтчета.Свойство("ДанныеФайла") Тогда
		
		ВозвращаемыеПараметры.Результат = ПараметрыОтчета.ДанныеФайла;
		
	Иначе
		
		ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
		ПакетОтображаемыхДокументов.Заголовок = ПараметрыОтчета.Заголовок;
		
		Для Каждого ОписаниеПечатнойФормы Из ПараметрыОтчета.СписокСформированныхЛистов Цикл
			
			СтрокаПакета = ПакетОтображаемыхДокументов.Состав.Добавить();
			СтрокаПакета.Наименование = ОписаниеПечатнойФормы.Представление;
			Если ЭтоАдресВременногоХранилища(ОписаниеПечатнойФормы.Значение) Тогда
				СтрокаПакета.Данные = ОписаниеПечатнойФормы.Значение;
			ИначеЕсли ПустаяСтрока(ОписаниеПечатнойФормы.Значение) Тогда
				СтрокаПакета.Данные = ПоместитьВоВременноеХранилище(Новый ТабличныйДокумент);				
			Иначе
				СтрокаПакета.Данные = ПоместитьВоВременноеХранилище(ОписаниеПечатнойФормы.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыОтчета.Расширение);
		ПакетОтображаемыхДокументов.Записать(ИмяФайла, ПараметрыОтчета.ТипФайла);
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		УдалитьФайлы(ИмяФайла);
		
		ВозвращаемыеПараметры.Результат = ДанныеФайла;

	КонецЕсли;
	
	Возврат ВозвращаемыеПараметры;
	
КонецФункции
	
// Возвращает параметры формирования отчета "Остатки товаров по срокам хранения" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//
// Возвращаемое значение:
//   Структура   - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ПараметрыОтчетаОстаткиТоваровПоСрокамХранения(НастройкиОтчета) Экспорт
	
	ПараметрыОтчета = Отчеты.ОстаткиТоваровПоСрокамХранения.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	// Включаем показатели отчета.
	ПараметрыОтчета.ПоказательСумма = Истина;
	Если НастройкиОтчета.ПоказательКоличество Тогда
		// Считаем, что если хотят выводить количество, то и стоимость единицы тоже можно показать.
		ПараметрыОтчета.ПоказательКоличество = Истина;
		ПараметрыОтчета.ПоказательСтоимость  = Истина;
	КонецЕсли;
	
	СвойстваСчета = Неопределено;
	КешСубконто = Новый Структура();
	
	// Перед установкой группировок и доп.полей из настроек банка,
	// требуется очистить установленные группировки и доп.поля из сохраненных настроек.
	ПараметрыОтчета.Вставить("ОчищатьТаблицуГруппировок", Истина);
	ПараметрыОтчета.Вставить("ОчищатьДополнительныеПоля", Истина);
	ПараметрыОтчета.Вставить("ОчищатьИнтервалы",          Истина);
	
	ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнитьИнтервалыОтчета(ПараметрыОтчета, НастройкиОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Параметры формирования файла с набором листов.
// 
// Возвращаемое значение:
//  Структура - Новый возвращаемые параметры:
// * Выполнено - Булево  
// * КраткоеПредставлениеОшибки - Строка 
// * ПодробноеПредставлениеОшибки - Строка 
// * СписокСформированныхЛистов - СписокЗначений  
// * Результат - ТабличныйДокумент 
Функция НовыйВозвращаемыеПараметры() Экспорт
	
	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("Выполнено", Ложь);
	ВозвращаемыеПараметры.Вставить("КраткоеПредставлениеОшибки",   "");
	ВозвращаемыеПараметры.Вставить("ПодробноеПредставлениеОшибки", "");
	
	ВозвращаемыеПараметры.Вставить("СписокСформированныхЛистов", Новый СписокЗначений);
	
	// Итоговый табличный документ
	ВозвращаемыеПараметры.Вставить("Результат", Новый ТабличныйДокумент);
	
	Возврат ВозвращаемыеПараметры;
	
КонецФункции

// Формирует отчет по форме банка. 
//
// Параметры:
//  ПараметрыОтчета              - Структура - см. ПараметрыОтчетаПоФормеБанка.
//
// Возвращаемое значение:
//   РезультатФормированияОтчета - Структура - см. БухгалтерскиеОтчетыВызовСервера.РезультатФормированияОтчета.
//
Функция СформироватьОтчетПоФормеБанка(ПараметрыОтчета) Экспорт

	РезультатФормированияОтчета = БухгалтерскиеОтчетыВызовСервера.РезультатФормированияОтчета();
	
	БанкДляОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.ТекущийФинОтчетВБанк, "Банк");
	ПараметрыШаблона = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания();
	ПараметрыШаблона.Сервис          = Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность;
	ПараметрыШаблона.ИмяФайлаШаблона = ПараметрыОтчета.ИмяМакетаОтчета;
	ПараметрыШаблона.Характеристика  = Перечисления.ХарактеристикиСервисаФинансовойОтчетности.ОтчетыПоФормеБанка;
	ПараметрыШаблона.Банки.Добавить(БанкДляОтчета);
	ДанныеФайла = УниверсальныйОбменСБанкамиФормыВызовСервера.ДанныеШаблона(ПараметрыШаблона);
	
	Если ДанныеФайла = Неопределено Тогда
		
		РезультатФормированияОтчета.Выполнено = Ложь;
		РезультатФормированияОтчета.КраткоеПредставлениеОшибки = 
			СтрШаблон(НСтр("ru = 'Макет отчета %1 для %2 не найден';
							|en = 'The %1 report template for %2 is not found'"),
				ПараметрыОтчета.ИмяМакетаОтчета, БанкДляОтчета);
		РезультатФормированияОтчета.ПодробноеПредставлениеОшибки = РезультатФормированияОтчета.КраткоеПредставлениеОшибки;
		
		Возврат РезультатФормированияОтчета;
	
	КонецЕсли;

	Попытка
		
		ПотокXML = ДанныеФайла.ОткрытьПотокДляЧтения();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьПоток(ПотокXML);
		СхемаСКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
		ОтчетПоСхемеКомпоновкиДанных(СхемаСКД, ПараметрыОтчета, РезультатФормированияОтчета);
		
		Возврат РезультатФормированияОтчета;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		РезультатФормированияОтчета.Выполнено = Ложь;
		РезультатФормированияОтчета.КраткоеПредставлениеОшибки = СтрШаблон(
			НСтр("ru = 'Неправильный формат файла макета отчета %1 для %2';
				|en = 'Incorrect file format of the %1 report template for %2'"), ПараметрыОтчета.ИмяМакетаОтчета, БанкДляОтчета);
		РезультатФормированияОтчета.ПодробноеПредставлениеОшибки = РезультатФормированияОтчета.КраткоеПредставлениеОшибки + "
			|" + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
			Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
			НСтр("ru = 'Сформировать отчет по СКД';
				|en = 'Generate report according to DCS'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , РезультатФормированияОтчета.ПодробноеПредставлениеОшибки);
		
		Возврат РезультатФормированияОтчета;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область РегламентированнаяОтчетность

// Возвращает Истина, если отчет должен быть представлен в контролирующие органы.
//
// Параметры:
//	ИсточникОтчета - Строка - Имя регламентированного отчета или "БухгалтерскаяОтчетность".
//	ДатаОкончания - Дата - Конец периода, за который составляется отчет.
//
// Возвращаемое значение:
//	Булево
//
Функция ОтчетПредставляетсяВКонтролирующиеОрганы(ИсточникОтчета, ДатаОкончания) Экспорт

	Если ИсточникОтчета = "БухгалтерскаяОтчетность"
		ИЛИ  ИсточникОтчета = "РегламентированныйОтчетБухОтчетность"
		ИЛИ  ИсточникОтчета = "РегламентированныйОтчетБухОтчетностьМП" Тогда

		Если КонецДня(ДатаОкончания) = КонецГода(ДатаОкончания) Тогда
			Возврат Истина;
		Иначе
			// Промежуточная бухгалтерская отчетность не сдается в ФНС.
			Возврат Ложь;
		КонецЕсли;

	Иначе
		// Все остальные отчеты считаем, что должны представляться в контролирующие органы.
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Возвращает таблицу значений для описания искомых отчетов с помощью функций ПодобратьБухОтчетность()
// и ПодобратьНалоговыеДекларации().
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция НовыеПараметрыПоискаРеглОтчетов() Экспорт

	МетаданныеРегОтчет = Метаданные.Документы.РегламентированныйОтчет.Реквизиты;

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация",                 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Результат.Колонки.Добавить("ИсточникОтчета",              МетаданныеРегОтчет.ИсточникОтчета.Тип);
	Результат.Колонки.Добавить("ДатаОкончания",               МетаданныеРегОтчет.ДатаОкончания.Тип);
	Результат.Колонки.Добавить("ТребуетсяОтметкаОПриемеОтчетности", Новый ОписаниеТипов("Булево")); // Используется только для годовой бухгалтерской отчетности.
	
	Возврат Результат;

КонецФункции

Функция НовыеПодобранныеРеглОтчеты()

	МетаданныеРегОтчет = Метаданные.Документы.РегламентированныйОтчет.Реквизиты;
	
	МетаданныеЖурналОтчетовСтатусы = Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы.Реквизиты;

	Результат = НовыеПараметрыПоискаРеглОтчетов();
	Результат.Колонки.Добавить("Ссылка",             Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	Результат.Колонки.Добавить("НаименованиеОтчета", МетаданныеРегОтчет.НаименованиеОтчета.Тип);
	Результат.Колонки.Добавить("ФинансовыйПериод",   МетаданныеЖурналОтчетовСтатусы.ФинансовыйПериод.Тип);
	Результат.Колонки.Добавить("ВариантОтчета",      МетаданныеЖурналОтчетовСтатусы.ВариантОтчета.Тип);
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу со ссылками на регламентированные отчеты для запрошенных отчетов.
//
// Параметры:
//	ПараметрыПоискаРеглОтчетов - см. ЗаполнениеФинОтчетностиВБанки.НовыеПараметрыПоискаРеглОтчетов() - Описание искомых отчетов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Подобрать бух отчетность:
// * Организация - СправочникСсылка.Организации - 
// * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - 
// * ИсточникОтчета - Строка
// * ДатаОкончания - Дата
// * ТребуетсяОтметкаОПриемеОтчетности - Булево 
// * Ссылка - ДокументСсылка.РегламентированныйОтчет
// * НаименованиеОтчета - Строка - Наименование отчета
// * ФинансовыйПериод -Дата 
// * ВариантОтчета - Строка
Функция ПодобратьБухОтчетность(ПараметрыПоискаРеглОтчетов) Экспорт

	Результат = НовыеПодобранныеРеглОтчеты();

	// Бухгалтерская отчетность может предоставлять в виде разных форм,
	// учитываем все, но с приоритетом общей формы.
	ИсточникиБухОтчетности = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ИсточникиБухгалтерскойОтчетности();
	
	ИскомыеОтчеты = ПараметрыПоискаРеглОтчетов.СкопироватьКолонки();
	Для Каждого РеглОтчет Из ПараметрыПоискаРеглОтчетов Цикл
		// Отбираем из все искомых отчетов только те, для которых требуется бухгалтерская отчетность.
		// Поскольку бухгалтерская отчетность может быть либо обычная либо упрощенная,
		// то не требуем от вызывающей функции указывать конкретный источник,
		// а находим наиболее подходящий экземпляр отчетности в зависимости от статуса сдачи.
		Для Каждого ИсточникБухОтчетности Из ИсточникиБухОтчетности Цикл
			ИскомыйОтчет = ИскомыеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(ИскомыйОтчет, РеглОтчет);
			ИскомыйОтчет.ИсточникОтчета = ИсточникБухОтчетности;
		КонецЦикла;
	КонецЦикла;

	Если ИскомыеОтчеты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	БухОтчетность = ПодобратьРегламентированныеОтчеты(ИскомыеОтчеты);
		
	Если НЕ ЗначениеЗаполнено(БухОтчетность) Тогда
		Возврат Результат;
	КонецЕсли;
		
	Отбор = Новый Структура();
	Для каждого Колонка Из ПараметрыПоискаРеглОтчетов.Колонки Цикл
		Если БухОтчетность.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
			Отбор.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого РеглОтчет Из ПараметрыПоискаРеглОтчетов Цикл
		
		Если РеглОтчет.ИсточникОтчета <> "БухгалтерскаяОтчетность" Тогда
			Продолжить;
		КонецЕсли;
	
		Для Каждого ИсточникБухОтчетности Из ИсточникиБухОтчетности Цикл
		
			ЗаполнитьЗначенияСвойств(Отбор, РеглОтчет);
			Отбор.ИсточникОтчета = ИсточникБухОтчетности;
			
			НайденныеСтроки = БухОтчетность.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
			
				НайденнаяСтрока = НайденныеСтроки[0];
			
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				
				// Нашли сохраненную бух.отчетность за период, останавливаем на этом поиск.
				Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Для переданного набора аналитик подбирает соответствующие им регламентированные отчеты, выбирая последний по
// статусу (сдан/подготовлен/в работе) и версии (номеру корректировки).
//
// Параметры:
//  ПараметрыПоискаРеглОтчетов - ТаблицаЗначений - см. НовыеПараметрыПоискаРеглОтчетов()
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. описание колонки "Документы" в ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты()
//
Функция ПодобратьРегламентированныеОтчеты(ПараметрыПоискаРеглОтчетов) Экспорт
	
	Если ПараметрыПоискаРеглОтчетов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Добавляем колонки для вызова функции БРО.
	ПодготовитьПараметрыПоискаРеглОтчетов(ПараметрыПоискаРеглОтчетов);
	
	ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты(ПараметрыПоискаРеглОтчетов, Истина);
	
	// Структура таблиц во всех строках одна и та же.
	ПодготавливаемаяТаблица = ПараметрыПоискаРеглОтчетов[0].Документы.СкопироватьКолонки();
	Если ПодготавливаемаяТаблица.Колонки.Найти("ИсточникОтчета") = Неопределено Тогда
		ПодготавливаемаяТаблица.Колонки.Добавить("ИсточникОтчета", ПараметрыПоискаРеглОтчетов.Колонки.ИсточникОтчета.ТипЗначения);
	КонецЕсли;
	Если ПодготавливаемаяТаблица.Колонки.Найти("Организация") = Неопределено Тогда
		ПодготавливаемаяТаблица.Колонки.Добавить("Организация", ПараметрыПоискаРеглОтчетов.Колонки.Организация.ТипЗначения);
	КонецЕсли;
		
	СданоСтрокой        = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
	ПодготовленоСтрокой = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой();

	Для Каждого ПараметрыРеглОтчета Из ПараметрыПоискаРеглОтчетов Цикл
		
		РегистрацииВНалоговыхОрганах = Новый Соответствие;
		Для Каждого СтрокаРеглОтчета Из ПараметрыРеглОтчета.Документы Цикл

			СданоЧерез1СОтчетность = СтрокаРеглОтчета.СостояниеСдачиОтчетности =
				Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		
			Если ОтчетПредставляетсяВКонтролирующиеОрганы(ПараметрыРеглОтчета.ИсточникОтчета, СтрокаРеглОтчета.ДатаОкончания)
				И ПараметрыРеглОтчета.ТребуетсяОтметкаОПриемеОтчетности
				И НЕ СданоЧерез1СОтчетность Тогда
				Продолжить;
			КонецЕсли;
				
			// Если есть корректировочный отчет, то подставляем его.
			ТекущийПриоритет = ?(СтрокаРеглОтчета.ВариантОтчета = "П", "1", "2") + СтрокаРеглОтчета.ВариантОтчета;

			Если СтрокаРеглОтчета.Статус = СданоСтрокой Тогда
				ТекущийПриоритет = "3" + ТекущийПриоритет;
			ИначеЕсли СтрокаРеглОтчета.Статус = ПодготовленоСтрокой Тогда
				ТекущийПриоритет = "2" + ТекущийПриоритет;
			Иначе
				ТекущийПриоритет = "1" + ТекущийПриоритет;
			КонецЕсли;
			
			НаиболееПриоритетный = РегистрацииВНалоговыхОрганах[СтрокаРеглОтчета.ПредставлениеКонтролирующегоОргана];
			Если НаиболееПриоритетный <> Неопределено И ТекущийПриоритет <= НаиболееПриоритетный.Приоритет Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаиболееПриоритетный = Неопределено Тогда
				
				НаиболееПриоритетный = Новый Структура("СтрокаРеглОтчета,Приоритет");
				РегистрацииВНалоговыхОрганах.Вставить(СтрокаРеглОтчета.ПредставлениеКонтролирующегоОргана, НаиболееПриоритетный);
				
			КонецЕсли;		
			НаиболееПриоритетный.Приоритет        = ТекущийПриоритет;
			НаиболееПриоритетный.СтрокаРеглОтчета = СтрокаРеглОтчета;
			
		КонецЦикла; 
		
		Для Каждого НаиболееПриоритетный Из РегистрацииВНалоговыхОрганах Цикл
		
			НоваяСтрока = ПодготавливаемаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НаиболееПриоритетный.Значение.СтрокаРеглОтчета);
			НоваяСтрока.ИсточникОтчета = ПараметрыРеглОтчета.ИсточникОтчета;
			НоваяСтрока.Организация    = ПараметрыРеглОтчета.Организация;
		
		КонецЦикла;
	
	КонецЦикла;

	Возврат ПодготавливаемаяТаблица;
	
КонецФункции

// Дополняет набор параметров для поиска среди регламентированных отчетов.
//
// Параметры:
//  ПараметрыПоискаРеглОтчетов - ТаблицаЗначений - см. НовыеПараметрыПоискаРеглОтчетов()
//
Процедура ПодготовитьПараметрыПоискаРеглОтчетов(ПараметрыПоискаРеглОтчетов) Экспорт

	Если ПараметрыПоискаРеглОтчетов.Колонки.Найти("Правило") = Неопределено Тогда
		ПараметрыПоискаРеглОтчетов.Колонки.Добавить("Правило", Справочники.ТипВсеСсылки());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПодпись

// Возвращает для каждого переданного объекта признак наличия хотя бы одной 
// валидной электронной подписи.
//
// Параметры:
//	СсылкиНаОбъекты - Массив из ОпределяемыйТип.ПодписанныйОбъект - Проверяемые объекты.
//
// Возвращаемое значение:
//	Соответствие:
//		* Ключ - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на объект.
//		* Значение - Булево - Истина, если есть хотя бы одна валидная подпись.
//
Функция ПроверитьНаличиеПодписей(СсылкиНаОбъекты) Экспорт

	Результат = Новый Соответствие();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкиНаОбъекты", СсылкиНаОбъекты);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.ПодписанныйОбъект В (&СсылкиНаОбъекты)
	|	И ЭлектронныеПодписи.ПодписьВерна";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ПодписанныйОбъект, Истина);
	КонецЦикла;

	// Для всех прочих объектов добавляем признак отсутствия подписей.
	Для каждого СсылкаНаОбъект Из СсылкиНаОбъекты Цикл
		Если Результат[СсылкаНаОбъект] = Неопределено Тогда
			Результат.Вставить(СсылкаНаОбъект, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Проверяет, что внутри переданного присоединенного файла-архива есть файл-электронная подпись.
//
// Параметры:
//  Архив        - ДвоичныеДанные - zip-архив, внутри которого нужно искать;
//               - ОпределяемыйТип.ПрисоединенныйФайл - место хранения проверяемых данных;
//               - Строка - адрес во временном хранилище или путь на диске (на сервере).
//
// Возвращаемое значение:
//   Булево      - Истина, если это архив, внутри которого есть хотя бы одна ЭЦП; иначе Ложь.
//
Функция ЕстьПодписьВнутриАрхива(Знач Архив) Экспорт
	
	// Извлекаем двоичные данные архива, если передан источник данных, а не сами данные.
	Если ТипЗнч(Архив) = Тип("Строка") Тогда
		
		Если ЭтоАдресВременногоХранилища(Архив) Тогда // двоичные данные из временного хранилища
			Архив = ПолучитьИзВременногоХранилища(Архив);
		Иначе // двоичные данные из файла
			
			Если ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Архив).Расширение <> "zip" Тогда
				Возврат Ложь;
			КонецЕсли;

			Архив = Новый ДвоичныеДанные(Архив);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Архив) <> Тип("ДвоичныеДанные") Тогда
		
		Если Не ЗначениеЗаполнено(Архив) Тогда
			Возврат Ложь;
		КонецЕсли;
		// Двоичные данные из присоединенного файла.
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ИнформацияОФайле = РаботаСФайлами.ДанныеФайла(Архив, ДополнительныеПараметры);
		Если ИнформацияОФайле.Расширение <> "zip" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Архив = ПолучитьИзВременногоХранилища(ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла);
		
	КонецЕсли;
	
	РасширенияЭЦП = РасширенияПодписей();
	
	ЕстьПодпись = Ложь;
	Попытка
		СодержимоеАрхива = Новый ЧтениеZipФайла(Архив.ОткрытьПотокДляЧтения());
	Исключение
		Возврат Ложь;	
	КонецПопытки;
	Для каждого Файл Из СодержимоеАрхива.Элементы Цикл
		
		Если РасширенияЭЦП.Найти(НРег(Файл.Расширение)) <> Неопределено Тогда
			
			ЕстьПодпись = Истина;
			Прервать;
			
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат ЕстьПодпись;	
	
КонецФункции

// Проверяет, является ли файл с таким расширением архивом.
// Параметры:
//  ИмяФайла - Строка - Имя файла
// 
// Возвращаемое значение:
//  Булево - Это имя файла архива
Функция ЭтоИмяФайлаАрхива(ИмяФайла) Экспорт
	
	Возврат НРег(Прав(ИмяФайла, 3)) = "zip";
	
КонецФункции

// Возвращает массив расширений, которые используются для файлов подписей.
//
// Возвращаемое значение:
//	Массив из Строка
//
Функция РасширенияПодписей() Экспорт
	
	РасширенияПодписей = Новый Массив;
	РасширенияПодписей.Добавить("p7s");
	РасширенияПодписей.Добавить("sig");
	РасширенияПодписей.Добавить("sgn");
	
	Возврат РасширенияПодписей;
	
КонецФункции

// Содержит информацию, которая требуется алгоритмам, получающим и подписывающим файлы отчетности.
// Возвращаемое значение:
//  Структура - Параметры помещения для подписания:
// * Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - 
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовОбменаСБанками - 
// * Организация - СправочникСсылка.Организации - 
// * Банки - Массив  
// * Предмет - Строка
// * Идентификатор - Строка 
// * ИдентификаторАрхива - Строка - для объединения файлов в архив перед подписанием; 
// * ПодписыватьФайлыВнутриАрхивов - Булево - признак добавления подписей для каждого файла внутри архива;
// * Зашифровать - Булево - зашифровать перед подписанием;
// * ПользовательскийФорматДляВыгрузки - ТипФайлаТабличногоДокумента - подготовить файл типа ТипФайлаТабличногоДокумента на основе регламентированного отчета; 
// * ЭтоЭлектроннаяПодписьВМоделиСервиса - Булево - подписание локальной ЭЦП; Истина - подписание облачной ЭЦП;
Функция ПараметрыПомещенияДляПодписания() Экспорт
	
	ПараметрыПомещения = Новый Структура;
	ПараметрыПомещения.Вставить("Сервис",       Перечисления.СервисыОбменаСБанками.ПустаяСсылка());
	ПараметрыПомещения.Вставить("ТипДокумента", Перечисления.ТипыДокументовОбменаСБанками.ПустаяСсылка());
	ПараметрыПомещения.Вставить("Организация",  Справочники.Организации.ПустаяСсылка());
	ПараметрыПомещения.Вставить("Банки",        Новый Массив);
	ПараметрыПомещения.Вставить("Предмет");
	ПараметрыПомещения.Вставить("Идентификатор", "");
	
	ПараметрыПомещения.Вставить("ИдентификаторАрхива",           "");     // для объединения файлов в архив перед подписанием
	ПараметрыПомещения.Вставить("ПодписыватьФайлыВнутриАрхивов", Истина); // признак добавления подписей для каждого файла внутри архива
	ПараметрыПомещения.Вставить("Зашифровать",                   Истина); // зашифровать перед подписанием
	ПараметрыПомещения.Вставить("ПользовательскийФорматДляВыгрузки");     // подготовить файл типа ТипФайлаТабличногоДокумента на основе регламентированного отчета

	ПараметрыПомещения.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Ложь); // Ложь - подписание локальной ЭЦП; Истина - подписание облачной ЭЦП
	
	Возврат ПараметрыПомещения;
	
КонецФункции

// Содержит описание результата подготовки к подписанию файлов, полученных из регламентированного отчета.
//

// Результат подготовки к подписанию.
// 
// Возвращаемое значение:
//  Структура - Результат подготовки к подписанию:
// * Выгружен - Булево - файл извлечен из регл.отчета;
// * Подготовлен - Булево - файл помещен в регистр для подписания;
// * Ошибки - Массив - тексты ошибок;
// * ТаблицаСообщений - см. ИнтерфейсыВзаимодействияБРО.НовыйТаблицаСообщенийОбОшибкахВыгрузки(); 
// * ИмяФайлаАрхива - Строка. 
// * ПодготовленныеФайлы - Массив - имена выгруженных файлов; 
Функция РезультатПодготовкиКПодписанию() Экспорт
	
	РезультатПодготовки = Новый Структура;
	РезультатПодготовки.Вставить("Выгружен",          Ложь);         // файл извлечен из регл.отчета
	РезультатПодготовки.Вставить("Подготовлен",       Ложь);         // файл помещен в регистр для подписания
	РезультатПодготовки.Вставить("Ошибки",            Новый Массив); // тексты ошибок
	РезультатПодготовки.Вставить("ТаблицаСообщений");                // см. ИнтерфейсыВзаимодействияБРО.НовыйТаблицаСообщенийОбОшибкахВыгрузки()
	
	РезультатПодготовки.Вставить("ИмяФайлаАрхива",      "");
	РезультатПодготовки.Вставить("ПодготовленныеФайлы", Новый Массив); // имена выгруженных файлов
	
	Возврат РезультатПодготовки;
	
КонецФункции

// Получает файлы-представления регламентированного отчета в машиночитаемом или пользовательском формате.
//
// Параметры:
//  РегламентированныйОтчет - ДокументСсылка.РегламентированныйОтчет - отчет, который выгружается.
//  ПользовательскийФорматДляВыгрузки - ТипФайлаТабличногоДокумента, Неопределено - если нужны файлы в пользовательском формате.
//  ДополнительныеПараметрыВыгрузки - Структура 
//  	* см. описание параметра функции ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет(),
//  	* ключ ВидВыгрузки со строковыми значениями: Файл, Разделы 
//
// Возвращаемое значение:
//   Структура   - два вида файлов-выгрузок регл.отчета:
//               * ОписаниеОшибки, КраткоеОписаниеОшибки - Строка - после успешной выгрузки будут пустыми.
//               * ИмяФайлаВыгрузки, АдресФайлаВыгрузки - Строка - результаты выгрузки в машиночитаемом формате.
//               * ТаблицаСообщений - см. ИнтерфейсыВзаимодействияБРО.НовыйТаблицаСообщенийОбОшибкахВыгрузки()
//               * ФайлыВПользовательскомФормате - Массив - см. ИнтерфейсыВзаимодействияБРО.ФайлыРегламентированногоОтчета()
//               * СостояниеДокумента - см. ИнтерфейсыВзаимодействияБРОКлиентСервер.НовыйСостояниеДокумента()
//
Функция ВыгрузитьРегламентированныйОтчет(РегламентированныйОтчет, ПользовательскийФорматДляВыгрузки = Неопределено,
										ДополнительныеПараметрыВыгрузки = Неопределено) Экспорт
			
	Перем РезультатВыгрузкиОтчета;
	Перем ВидВыгрузкиРеглОтчета;  
	
	ВидВыгрузкиРеглОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыВыгрузки, "ВидВыгрузки", "");  
	НастройкиВыгрузкиФайла = НастройкиВыгрузкиРеглОтчета(ВидВыгрузкиРеглОтчета);
	
	РезультатПодготовки = Новый Структура;
	РезультатПодготовки.Вставить("ОписаниеОшибки",                "");
	РезультатПодготовки.Вставить("КраткоеОписаниеОшибки",         "");
	РезультатПодготовки.Вставить("ИмяФайлаВыгрузки",              Ложь);
	РезультатПодготовки.Вставить("АдресФайлаВыгрузки",            "");
	РезультатПодготовки.Вставить("ТаблицаСообщений");
	РезультатПодготовки.Вставить("ФайлыВПользовательскомФормате", Новый Массив);
	РезультатПодготовки.Вставить("СостояниеДокумента");
	
	ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегламентированныйОтчет, "ИсточникОтчета");
	ЭтоБухОтчетность = ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности"
		Или ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ИсточникиБухгалтерскойОтчетности().Найти(ИсточникОтчета) <> Неопределено;
	
	РезультатПодготовки.СостояниеДокумента = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(РегламентированныйОтчет);
	Если РезультатПодготовки.СостояниеДокумента.Отправлено Тогда
		
		Если Не РезультатПодготовки.СостояниеДокумента.Сдано Тогда
			
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'Отчет отправлен в ФНС, но еще не получен ответ о приеме. Нельзя отправить отчет получателю без отметки о сдаче в ФНС.';
														|en = 'The report is sent to FTS but its receiving is not confirmed yet. Cannot send the report to the recipient without the FTS submission stamp.'");
			
		Иначе
			// Обычная регламентированная отчетность за стандартные периоды.
			РезультатВыгрузкиОтчета = ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет);
			Если Не ЭтоИмяФайлаАрхива(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки) Тогда
				РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'Неверный формат выгружаемого файла регламентированного отчета';
															|en = 'Invalid format of the exported local accounting report file'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Банки просят предоставлять бухгалтерскую отчетность за "нестандартные" периоды (например, поквартально).
		РезультатВыгрузкиОтчета = ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет(
			РегламентированныйОтчет, ДополнительныеПараметрыВыгрузки);
		
	КонецЕсли;
	Если ПустаяСтрока(РезультатПодготовки.ОписаниеОшибки) И РезультатВыгрузкиОтчета.РеглОтчетВыгружен Тогда
											
		РезультатПодготовки.ИмяФайлаВыгрузки = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;
		РезультатПодготовки.АдресФайлаВыгрузки = РезультатВыгрузкиОтчета.АдресФайлаВыгрузки;
		
	Иначе
		
		Если РезультатВыгрузкиОтчета <> Неопределено Тогда
			
			Если РезультатВыгрузкиОтчета.Ошибки.Количество() > 0 Тогда
				РезультатПодготовки.ОписаниеОшибки = СтрСоединить(РезультатВыгрузкиОтчета.Ошибки, Символы.ПС);
			КонецЕсли;
			Если ЗначениеЗаполнено(РезультатВыгрузкиОтчета.ТаблицаСообщений) Тогда
				
				РезультатПодготовки.ТаблицаСообщений = РезультатВыгрузкиОтчета.ТаблицаСообщений;
				
				ПредставлениеФайлаВыгрузки = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(РегламентированныйОтчет);
				Для Каждого Ошибка Из РезультатПодготовки.ТаблицаСообщений Цикл
					Если Не ЗначениеЗаполнено(Ошибка.ОтчетДок) Тогда
						Ошибка.ОтчетДок = РегламентированныйОтчет;
						Ошибка.Отчет = ПредставлениеФайлаВыгрузки;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатПодготовки.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно выгрузить отчет ""%1""
						|%2';
						|en = 'Cannot export the %1 report
						|%2'"),
			РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(РегламентированныйОтчет),
			РезультатПодготовки.ОписаниеОшибки);
		РезультатПодготовки.КраткоеОписаниеОшибки = ?(ПустаяСтрока(РезультатПодготовки.ОписаниеОшибки),
			НСтр("ru = 'Невозможно выгрузить отчет"), РезультатПодготовки.ОписаниеОшибки);
		
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПользовательскийФорматДляВыгрузки) Тогда
		Возврат РезультатПодготовки;
	КонецЕсли;
	
	МассивТиповПользовательскихФорматов = Новый Массив;
	
	Если ТипЗнч(ПользовательскийФорматДляВыгрузки) <> Тип("Массив") Тогда
		МассивТиповПользовательскихФорматов.Добавить(ПользовательскийФорматДляВыгрузки);
	Иначе 
		МассивТиповПользовательскихФорматов = ПользовательскийФорматДляВыгрузки;
	КонецЕсли;

	НаименованиеОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегламентированныйОтчет, "НаименованиеОтчета");
	Если ЭтоБухОтчетность Тогда
		
		РезультатВыгрузкиОтчета = ИнтерфейсыВзаимодействияБРО.ФайлыРегламентированногоОтчета(РегламентированныйОтчет);

		ПоследнийИспользовавшийсяФормат = Неопределено;
		Если ПустаяСтрока(РезультатВыгрузкиОтчета.ОписаниеОшибки)
		   И РезультатВыгрузкиОтчета.ФайлыОтчета.Количество() <> 0 Тогда
		   			
			Для Каждого ПользовательскийФормат Из МассивТиповПользовательскихФорматов Цикл

				Если НастройкиВыгрузкиФайла.ОбъединитьЛисты Тогда  	
			 		ФайлыВПользовательскомФормате = ОбъединенныеФайлыБухОтчетности(РезультатВыгрузкиОтчета.ФайлыОтчета, 
													ПользовательскийФормат, НастройкиВыгрузкиФайла.ОбъединитьФайлыОтчета, НаименованиеОтчета);
				Иначе
					ФайлыВПользовательскомФормате = РезультатВыгрузкиОтчета.ФайлыОтчета;
				КонецЕсли;
				
				Для Каждого ФайлОтчета Из ФайлыВПользовательскомФормате Цикл      
										
					ФайлОтчетаРезультат = Новый Структура;
					ФайлОтчетаРезультат.Вставить("ВидФайла",        ФайлОтчета.ВидФайла);
					ФайлОтчетаРезультат.Вставить("СодержимоеФайла", ФайлОтчета.СодержимоеФайла);
					ФайлОтчетаРезультат.Вставить("ИмяФайла",
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ФайлОтчета.ИмяФайла));
					Если ТипЗнч(ФайлОтчета.СодержимоеФайла) = Тип("ТабличныйДокумент") Тогда  
							
						ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
							ИмяФайлаПоТипуФайла(ФайлОтчета.ИмяФайла, ПользовательскийФормат, ПоследнийИспользовавшийсяФормат));
						ФайлОтчетаРезультат.Вставить("ИмяФайла", ИмяФайла);
						ФайлОтчетаРезультат.Вставить("СодержимоеФайла", БухгалтерскиеОтчеты.ДвоичныеДанныеИзТабличногоДокумента(
													 ФайлОтчета.СодержимоеФайла, ПользовательскийФормат));   
					КонецЕсли;  
												 
					РезультатПодготовки.ФайлыВПользовательскомФормате.Добавить(ФайлОтчетаРезультат);
											
				КонецЦикла;   
				
			КонецЦикла; 
			
		Иначе
			
			РезультатПодготовки.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Невозможно выгрузить в формате Excel отчет ""%1""
							|%2';
							|en = 'Cannot export the ""%1"" report in Microsoft Excel format
							|%2'"),
				РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(РегламентированныйОтчет),
				РезультатВыгрузкиОтчета.ОписаниеОшибки);
			РезультатПодготовки.КраткоеОписаниеОшибки = ?(ПустаяСтрока(РезультатВыгрузкиОтчета.ОписаниеОшибки),
				НСтр("ru = 'Невозможно выгрузить отчет в формате Excel"), РезультатВыгрузкиОтчета.ОписаниеОшибки);
			
		КонецЕсли;
		
	Иначе
		
		ДополнительныеПараметрыПечати = Новый Структура;
		Если ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
			// Для декларации по НДС передаем признак формирования разделов 8-12 в виде листов книг покупок и продаж,
			// а не отдельных листов на каждую строку, как заложено в форме ФНС, для сокращения размера файла.
			ДополнительныеПараметрыПечати.Вставить("ПечататьЭкраннуюФормуРазделов8_12", Истина);
		КонецЕсли;
		
		ВерсияБРО = ОбновлениеИнформационнойБазы.ВерсияИБ("РегламентированнаяОтчетность");
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБРО, "1.2.1.81") >= 0 Тогда
			// Передача дополнительных параметров доступна, начиная с версии БРО 1.2.1.81.
			МодульИнтерфейсыВзаимодействияБРО = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсыВзаимодействияБРО");
			РезультатВыгрузкиОтчета = МодульИнтерфейсыВзаимодействияБРО.ПечатныйБланкРегламентированногоОтчета(
				РегламентированныйОтчет, ДополнительныеПараметрыПечати);
		Иначе
			РезультатВыгрузкиОтчета = ИнтерфейсыВзаимодействияБРО.ПечатныйБланкРегламентированногоОтчета(
				РегламентированныйОтчет);
		КонецЕсли;
		
		Если РезультатВыгрузкиОтчета <> "" Тогда
			
			ФайлОтчета = Новый Структура;
			ФайлОтчета.Вставить("ВидФайла",        ИсточникОтчета);
			ФайлОтчета.Вставить("ИмяФайла",        ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(РезультатВыгрузкиОтчета.ИмяФайлаПечатногоБланка));
			ФайлОтчета.Вставить("СодержимоеФайла", ПолучитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресПечатногоБланка));
			УдалитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресПечатногоБланка);
			РезультатВыгрузкиОтчета.АдресПечатногоБланка = "";
		
			РезультатПодготовки.ФайлыВПользовательскомФормате.Добавить(ФайлОтчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПодготовки;
	
КонецФункции

// Помещает в регистр для выгрузки отчет определенного вида из отправляемых в заявке.
//
// Параметры:
//  РезультатВыгрузкиОтчета - см. ВыгрузитьРегламентированныйОтчет()
//  ПараметрыПомещения - Структура - см. ПараметрыПомещенияДляПодписания()
//
// Возвращаемое значение:
//   Структура   - см. РезультатПодготовкиКПодписанию()
//
Функция ПоместитьВЖурналОперацийСФайламиДанныеРеглОтчета(РезультатВыгрузкиОтчета, ПараметрыПомещения) Экспорт
	
	// Регламентированный отчет может быть в двух форматах: машиночитаемом (xml) и пользовательском (например, Excel).
	// Машиночитаемый может быть просто файлом, а может быть архивом, содержащим не только xml, но и файлы-подписи от ФНС.
	// Если результатом функции является несколько файлов (как машиночитаемых, так и пользовательских), то они объединяются
	// в один архив. Однако для возможности подписания пользовательских файлов сначала все файлы помещются порознь, а в
	// архив объединяются уже непосредственно перед отправкой после подписания, группируясь по ИдентификаторАрхива.
	
	РезультатПодготовки = РезультатПодготовкиКПодписанию();
	
	РезультатВыгрузкиВXMLЯвляетсяАрхивом = ЭтоИмяФайлаАрхива(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки);
	ПользовательскиеФайлыОтсутствуют = ПараметрыПомещения.ПользовательскийФорматДляВыгрузки = Неопределено
		Или РезультатВыгрузкиОтчета.ФайлыВПользовательскомФормате.Количество() = 0;
	ПомещаемЕдинственныйФайл = РезультатВыгрузкиВXMLЯвляетсяАрхивом И Не ПараметрыПомещения.ПодписыватьФайлыВнутриАрхивов         // один файл-архив
		Или Не РезультатВыгрузкиВXMLЯвляетсяАрхивом И ПользовательскиеФайлыОтсутствуют;                                           // один xml
	
	Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	Вложение.Предмет         = ПараметрыПомещения.Предмет;
	Вложение.Идентификатор   = ПараметрыПомещения.Идентификатор;
	Вложение.Организация     = ПараметрыПомещения.Организация;
	Вложение.ТипДокумента    = ПараметрыПомещения.ТипДокумента;
	Вложение.Сервис          = ПараметрыПомещения.Сервис;
	Вложение.БанкиПолучатели = ПараметрыПомещения.Банки;
	Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса = ПараметрыПомещения.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	
	РезультатПодготовки.ИмяФайлаАрхива = ?(РезультатВыгрузкиВXMLЯвляетсяАрхивом,
		РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки, ИмяФайлаПоТипуФайла(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки, "zip"));
	
	Если ПомещаемЕдинственныйФайл Тогда
		
		РезультатПодготовки.Выгружен = Истина;

		Вложение.ИсходныеДанные   = ПолучитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки);
		Вложение.ИсходноеИмяФайла = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;
		Вложение.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(Вложение.ИсходноеИмяФайла);
		РезультатПодготовки.ПодготовленныеФайлы.Добавить(Вложение.ИсходноеИмяФайла);
		
		Если РезультатВыгрузкиВXMLЯвляетсяАрхивом Тогда
			// Файл выгружается без действий над ним (в частности, без подписания).
			Вложение.Зашифровать = ПараметрыПомещения.Зашифровать;
			Вложение.Подписать   = Ложь;
			Вложение.Сжать       = Ложь;
			
		Иначе
			// Единственный файл выгружается в xml и подписывается.
			Вложение.Зашифровать = ПараметрыПомещения.Зашифровать;
			Вложение.Подписать   = ПараметрыПомещения.ПодписыватьФайлыВнутриАрхивов;
			Вложение.Сжать       = Истина;
			
		КонецЕсли;
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если РезультатОперации.Выполнено Тогда
			РезультатПодготовки.Подготовлен = Истина;
		Иначе
			РезультатПодготовки.Ошибки.Добавить(РезультатОперации.ОписаниеОшибки);
		КонецЕсли;
 
		Возврат РезультатПодготовки;
		
	Иначе
		// Из регл.отчета выгрузили файлы в машинном формате. Сейчас помещаем их с указанием имени архива.
		// Далее с этим же именем архива будут ещё выгружаться и помещаться в регистр файлы в пользовательском представлении.
		РезультатПодготовки.Выгружен = ПользовательскиеФайлыОтсутствуют;			
		
		Вложение.ИмяФайлаАрхива      = РезультатПодготовки.ИмяФайлаАрхива;
		Вложение.ИдентификаторАрхива = ПараметрыПомещения.ИдентификаторАрхива;
		Вложение.Зашифровать         = ПараметрыПомещения.Зашифровать;
		Вложение.Подписать           = ПараметрыПомещения.ПодписыватьФайлыВнутриАрхивов;
		Вложение.Сжать               = Ложь; // будет сжат при создании архива
		
		Если РезультатВыгрузкиВXMLЯвляетсяАрхивом Тогда // разархивируем и помещаем
			
			Вложение.ИсходныеДанные = ПолучитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки);
			Вложение.Подписать      = Вложение.Подписать И Не ЕстьПодписьВнутриАрхива(Вложение.ИсходныеДанные);
			
			ПутьКВыгруженным = ОбщегоНазначения.СоздатьВременныйКаталог("zip");
			ЧитаемыйАрхив = Новый ЧтениеZipФайла(Вложение.ИсходныеДанные.ОткрытьПотокДляЧтения());
			ЧитаемыйАрхив.ИзвлечьВсе(ПутьКВыгруженным, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			Для Каждого ФайлИзАрхива Из ЧитаемыйАрхив.Элементы Цикл
				
				Вложение.ИсходныеДанные   = Новый ДвоичныеДанные(ПутьКВыгруженным + ФайлИзАрхива.Имя);
				Вложение.ИсходноеИмяФайла = ФайлИзАрхива.Имя;
				Вложение.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(Вложение.ИсходноеИмяФайла);
				РезультатПодготовки.ПодготовленныеФайлы.Добавить(Вложение.ИсходноеИмяФайла);

				РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
				Если Не РезультатОперации.Выполнено Тогда

					РезультатПодготовки.Ошибки.Добавить(РезультатОперации.ОписаниеОшибки);
					Возврат РезультатПодготовки;

				КонецЕсли;
				
			КонецЦикла;
			ЧитаемыйАрхив.Закрыть();
			ОбщегоНазначения.УдалитьВременныйКаталог(ПутьКВыгруженным);
		
		Иначе
			// Помещаем единственный файл машиночитаемого представления, далее поместим файлы пользовательского представления.
			Вложение.ИсходныеДанные   = ПолучитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки);
			Вложение.ИсходноеИмяФайла = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;
			Вложение.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(Вложение.ИсходноеИмяФайла);
			РезультатПодготовки.ПодготовленныеФайлы.Добавить(Вложение.ИсходноеИмяФайла);

			РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
			Если Не РезультатОперации.Выполнено Тогда

				РезультатПодготовки.Ошибки.Добавить(РезультатОперации.ОписаниеОшибки);
				Возврат РезультатПодготовки;

			КонецЕсли;
			
		КонецЕсли;
		
		// Если ранее файл считался выгруженным (не нужно дополнительно выгружать в пользовательском формате),
		// то сейчас можем считать его подготовленным.
		РезультатПодготовки.Подготовлен = РезультатПодготовки.Выгружен;
				
	КонецЕсли;
	
	Если ПользовательскиеФайлыОтсутствуют Тогда
		Возврат РезультатПодготовки;
	КонецЕсли;
	
	Вложение.ИмяФайлаАрхива      = РезультатПодготовки.ИмяФайлаАрхива;
	Вложение.ИдентификаторАрхива = ПараметрыПомещения.ИдентификаторАрхива;
	Вложение.Зашифровать         = ПараметрыПомещения.Зашифровать;
	Вложение.Подписать           = Истина;
	Вложение.Сжать               = Ложь; // будет сжат при создании архива

	Для каждого ФайлОтчета Из РезультатВыгрузкиОтчета.ФайлыВПользовательскомФормате Цикл

		Вложение.ИсходныеДанные = ФайлОтчета.СодержимоеФайла;
		Вложение.ИсходноеИмяФайла = ФайлОтчета.ИмяФайла;
		Вложение.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(Вложение.ИсходноеИмяФайла);
		РезультатПодготовки.ПодготовленныеФайлы.Добавить(Вложение.ИсходноеИмяФайла);

		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если Не РезультатОперации.Выполнено Тогда

			РезультатПодготовки.Ошибки.Добавить(РезультатОперации.ОписаниеОшибки);
			Возврат РезультатПодготовки;

		КонецЕсли;

	КонецЦикла;
	РезультатПодготовки.Подготовлен = Истина;
	
	Возврат РезультатПодготовки;
	
КонецФункции

#КонецОбласти

#Область СохраняемыеНастройкиПользователей

Процедура СохранитьПараметрПоказыватьБаннерПодсказку(ЗначениеПараметра) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ВладелецНастроекФинОтчетВБанк(),
		НастройкаПоказыватьБаннерПодсказка(),
		ЗначениеПараметра);

КонецПроцедуры

Функция ПолучитьПараметрПоказыватьБаннерПодсказку() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ВладелецНастроекФинОтчетВБанк(),
		НастройкаПоказыватьБаннерПодсказка(),
		Истина);

КонецФункции

Процедура СохранитьПараметрПоказыватьБаннерАвтозаполнение(ЗначениеПараметра) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ВладелецНастроекФинОтчетВБанк(),
		НастройкаПоказыватьБаннерАвтозаполнение(),
		ЗначениеПараметра);

КонецПроцедуры

Функция ПолучитьПараметрПоказыватьБаннерАвтозаполнение() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ВладелецНастроекФинОтчетВБанк(),
		НастройкаПоказыватьБаннерАвтозаполнение(),
		Истина);

КонецФункции

Процедура СохранитьПараметрАвтозаполнение(ЗначениеПараметра) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ВладелецНастроекФинОтчетВБанк(),
		НастройкаАвтозаполнение(),
		ЗначениеПараметра);
	
КонецПроцедуры

Функция ПолучитьПараметрАвтозаполнение() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ВладелецНастроекФинОтчетВБанк(),
		НастройкаАвтозаполнение(),
		Истина);

КонецФункции

#КонецОбласти

#Область Баннеры

Функция КартинкаБаннерПояснениеНовогоИнтерфейса() Экспорт
	
	КартинкаБаннера = Неопределено;
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.КартинкаБаннерПояснениеНовогоИнтерфейса(КартинкаБаннера);
	Возврат КартинкаБаннера;

КонецФункции

Функция КартинкаБаннерАвтозаполнение() Экспорт
	
	КартинкаБаннера = Неопределено;
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.КартинкаБаннерАвтозаполнение(КартинкаБаннера);
	Возврат КартинкаБаннера;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область XDTO

// Возвращает URI пространства имен XDTO пакета с характеристиками сервиса 1С:ФинОтчетность.
//
// Возвращаемое значение:
//	Строка - URI пространства имен.
//
Функция URIПространстваИменФинОтчетностьВБанки()
	Возврат Метаданные.ПакетыXDTO.ФинОтчетностьВБанки.ПространствоИмен;
КонецФункции

// Возвращает XDTO-тип по его имени.
//
// Возвращаемое значение:
//	ТипЗначенияXDTO, ТипОбъектаXDTO - ссылка на запрошенный XDTO-тип.
//
Функция ТипXDTO(ИмяТипа, URIПространстваИмен = "")

	Если НЕ ЗначениеЗаполнено(URIПространстваИмен) Тогда
		URIПространстваИмен = URIПространстваИменФинОтчетностьВБанки();
	КонецЕсли;

	Возврат ФабрикаXDTO.Тип(URIПространстваИмен, ИмяТипа);

КонецФункции

// Возвращает объект XDTO ТребованияБанка из корневого элемента XML по схеме пакетаXDTO ФинОтчетностьВБанки.
//
// Параметры:
//	Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк, для которого необходимо получить требования.
//
// Возвращаемое значение:
//	ОбъектXDTO, Неопределено - Объект XDTO, прочитанный из XML, или Неопределено в случае ошибок или отсутствия данных.
//
Функция ТребованияБанкаXDTO(Банк)

	Характеристики = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
		Перечисления.ХарактеристикиСервисаФинансовойОтчетности.КомплектыОтчетностиПоВерсиямСервиса,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банк));
		
	Если Характеристики.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеXML = Характеристики[0].Значение;

	Если ТипЗнч(ДанныеXML) = Тип("ХранилищеЗначения") Тогда
		ТекстXML = ДанныеXML.Получить();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO("ТребованияБанка"));
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
			Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
			НСтр("ru = 'Прочитать объект XDTO';
				|en = 'Read XDTO object'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция НовыеОтчеты()
	
	// В требованиях банка для каждого отчета задается за какие периоды его формировать, какие требования к обязательности его заполнения,
	// в каких форматах его выгружать, кто его должен подписывать.
	// Одна строка в текущей таблице соответствует одному файлу отчета, который будет отправлен в банк.
	//
	// При этом параметры формирования отчета (показатели, группировки, дополнительные поля и т.п)
	// хранятся в отдельной структуре - см. колонку НастройкиОтчета.
	// Банку может требоваться несколько отчетов по одной настройке за разные периоды.
	
	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Архивный",                     ТипБулево); // ПакетXDTO.ФинОтчетностьВБанки.Архивный
	Результат.Колонки.Добавить("ИдентификаторСтрокиКомплекта", ТипСтрока); // Идентификатор строки в общем списке отчетов комплекта.
	Результат.Колонки.Добавить("ИдентификаторНастройкиОтчета", ТипСтрока); // Идентификатор настройки отчета.
	Результат.Колонки.Добавить("НомерСтроки",                  ТипЧисло);
	Результат.Колонки.Добавить("ВидОтчета",                    ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ВидыОтчетов
	Результат.Колонки.Добавить("КраткоеПредставление",         ТипСтрока);
	Результат.Колонки.Добавить("КраткоеПредставлениеМнЧисло",  ТипСтрока); // Представление отчета во множественном числе для групповых строк
	Результат.Колонки.Добавить("ПодробноеПредставление",       ТипСтрока);
	Результат.Колонки.Добавить("ВыводПериодаВЗаголовке",       ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ВыводПериодаВЗаголовке
	Результат.Колонки.Добавить("ИмяФайлаШаблона",              ТипСтрока); // Имя файла из списка шаблонов для банка
	Результат.Колонки.Добавить("ИмяМакетаОтчета",              ТипСтрока); // Имя файла с внешней СКД для отчета по форме банка
	Результат.Колонки.Добавить("ПериодОтчета",                 ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ПериодыОтчетности
	Результат.Колонки.Добавить("КоличествоПериодов",           ТипЧисло);
	Результат.Колонки.Добавить("Периодичность",                ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.Периодичность
	Результат.Колонки.Добавить("ПраваяГраницаПериода",         ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ГраницыПериодов
	Результат.Колонки.Добавить("СмещениеПравойГраницы",        ТипЧисло);
	Результат.Колонки.Добавить("ПараметрыВыбораФайла");        // Неопределено или Структура, см. НовыеПараметрыВыбораФайла().
	Результат.Колонки.Добавить("ПорядокПодписания",            ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ЭкономическиеСубъекты
	Результат.Колонки.Добавить("ПроверкаЗаполнения",           ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ПроверкиЗаполнения
	Результат.Колонки.Добавить("ПроверкаЗаполнения1_21",       ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ПроверкаЗаполнения
	Результат.Колонки.Добавить("ОбязанностьПредставления",     ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ЭкономическиеСубъекты
	Результат.Колонки.Добавить("ТипЭкономическогоСубъекта",    ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ТипЭкономическогоСубъекта
	Результат.Колонки.Добавить("ВидОрганизации",               ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ВидОрганизации
	Результат.Колонки.Добавить("ФорматСохранения",             ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ФорматыСохраненияОтчетов
	Результат.Колонки.Добавить("ФорматСохранения1_27",         ТипСтрока); 
	Результат.Колонки.Добавить("ТребуетсяОтметкаОПриемеОтчетности", ТипБулево);
	Результат.Колонки.Добавить("КоличествоФайлов",                  ТипЧисло); // Количество отчетов вида "Произвольный файл", 
																		       // сколько требуется банку.
	Результат.Колонки.Добавить("НастройкиОтчета"); // Структура, см. НовыеНастройкиОтчета()
	Результат.Колонки.Добавить("Счет",                         ТипСтрока); // Дублируется из НастройкиОтчета для быстрых отборов.
	Результат.Колонки.Добавить("ШаблонИмениФайла",             ТипСтрока); // Шаблон имени файла для сохранения
	Результат.Колонки.Добавить("ВидВыгрузкиРеглОтчета",        ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ВидыВыгрузкиРеглОтчетов

	Возврат Результат;
	
КонецФункции

Функция НовыеНастройкиОтчета()
	
	// В требованиях банка к отчетности каждый отчет описывается с помощью настройки параметров формирования этого отчета.
	// Данная структура соответствует одной такой настройке.
	// Настройка задает как формировать отчет: с какими показателями, группировками, дополнительными полям и т.п.
	// При этом в период, за который формируется отчет, в настройку не входит, т.е. по одной настройке банк может
	// потребовать представить несколько отчетов за разные периоды.
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИмяВарианта",                  ""); // для отчета на базе подсистемы ВариантыОтчетов из БСП
	Результат.Вставить("Счет",                         ""); // Код счета
	Результат.Вставить("Периодичность",                ""); // ПакетXDTO.ФинОтчетностьВБанки.Периодичность
	Результат.Вставить("РазмещениеДополнительныхПолей",""); // ПакетXDTO.ФинОтчетностьВБанки.РазмещениеДополнительныхПолей
	Результат.Вставить("ДетализацияПоСрокам",          ""); // ПакетXDTO.ФинОтчетностьВБанки.ДетализацияПоСрокам
	Результат.Вставить("ВариантОтчетаРасшифровкаЗадолженности", ""); // ПакетXDTO.ФинОтчетностьВБанки.ВариантыОтчетаРасшифровкаЗадолженности
	Результат.Вставить("Периодичность",                "");
	Результат.Вставить("ПоСубсчетам",                  Ложь);
	Результат.Вставить("ПоСубсчетамКорСчетов",         Ложь);
	Результат.Вставить("РазвернутоеСальдо",            Ложь);
	Результат.Вставить("ВыводитьЗабалансовыеСчета",    Ложь);
	Результат.Вставить("ПоказательКоличество",         Ложь);
	Результат.Вставить("ПоказательВалютнаяСумма",      Ложь);
	Результат.Вставить("Группировки",                  НовыеГруппировки());
	Результат.Вставить("Отборы",                       НовыеОтборы());
	Результат.Вставить("ДополнительныеПоля",           НовыеДополнительныеПоля());
	Результат.Вставить("ГруппировкаПоСчетам",          НовыеНастройкиПоСчетам());
	Результат.Вставить("РазвернутоеСальдоПоСчетам",    НовыеНастройкиПоСчетам());
	Результат.Вставить("Интервалы",                    НовыеИнтервалы());
	
	Возврат Результат;
	
КонецФункции

Функция НовыеГруппировки()
	
	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки",    ТипЧисло);
	Результат.Колонки.Добавить("Поле",           ТипСтрока);
	Результат.Колонки.Добавить("ТипГруппировки", ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ТипыГруппировок
	
	Возврат Результат;
	
КонецФункции

Функция НовыеОтборы()

	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Поле",           ТипСтрока);
	Результат.Колонки.Добавить("ВидСравнения",   ТипСтрока); // ПакетXDTO.ФинОтчетностьВБанки.ВидыСравненийКомпоновкиДанных
	Результат.Колонки.Добавить("Значение",       ТипСтрока); // Правое значение отбора в строковом виде.
	
	Возврат Результат;

КонецФункции

Функция НовыеНастройкиПоСчетам()
	
	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("НомерСтроки", ТипЧисло);
	Результат.Колонки.Добавить("Счет",        ТипСтрока);
	Результат.Колонки.Добавить("ПоСубсчетам", ТипБулево);
	Результат.Колонки.Добавить("ПоСубконто",  ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу для настройки дополнительных полей
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция НовыеДополнительныеПоля() Экспорт

	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки",  ТипЧисло);
	Результат.Колонки.Добавить("Поле",         ТипСтрока);
	
	Возврат Результат;

КонецФункции

Функция НовыеИнтервалы()

	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Значение",       ТипЧисло); 
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьПростымиЗначениямиXDTO(Приемник, ОбъектXDTO)

	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		// Объект XDTO может быть не определен, заполнять неоткуда.
		Возврат;
	КонецЕсли;

	Для каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл

		ИмяСвойства      = СвойствоXDTO.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ЗначениеСвойства = Неопределено Тогда
			// В исходном xml-файле настроек значение не было задано, 
			// оставляем его в Приемнике по умолчанию.
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") 
			ИЛИ ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			// Сложные коллекции данных XDTO требуют особой обработки,
			// здесь их не обрабатываем.
			Продолжить;
		КонецЕсли;
		
		// Заполняем одноименное поле в приемнике, если оно существует.
		Если ТипЗнч(Приемник) = Тип("Структура") И Приемник.Свойство(ИмяСвойства) Тогда
			Приемник[ИмяСвойства] = ЗначениеСвойства;

		ИначеЕсли ТипЗнч(Приемник) = Тип("СтрокаТаблицыЗначений")
			И Приемник.Владелец().Колонки.Найти(ИмяСвойства) <> Неопределено Тогда
			
			Приемник[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ОтчетПредназначенДляКонфигурации(ОтчетXDTO, ТекущееСемейство)
	
	// Не заданы ограничения по семействам
	Если Не ЗначениеЗаполнено(ОтчетXDTO.СемействоКонфигураций) Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат УниверсальныйОбменСБанкамиКлиентСервер.ПринадлежитСемействуКонфигураций(
		ТекущееСемейство, ОтчетXDTO.СемействоКонфигураций);

КонецФункции 

Функция ОтчетПредназначенДляВерсииКонфигурации(ОграниченияКонфигурации, ТекущееСемейство, ИмяКонфигурации, СоставВерсииКонфигурации)
		
	// Если не заданы ограничения по версиям, то подходит для любой.
	Если ОграниченияКонфигурации.Количество() = 0 Тогда
		Возврат Истина;	
	КонецЕсли;
			
	ОтчетПодходитДляВерсии = Ложь;
	
	Для каждого ВерсияXDTO Из ОграниченияКонфигурации Цикл
		
		Если Не ЗначениеЗаполнено(ВерсияXDTO.СемействоКонфигураций) Тогда
			ОтчетПодходитДляВерсии = Истина;
			Прервать;
		КонецЕсли;
		
		ОтчетПодходитДляВерсии = 
			УниверсальныйОбменСБанкамиКлиентСервер.ПринадлежитСемействуКонфигураций(
				ТекущееСемейство, ВерсияXDTO.СемействоКонфигураций)
			ИЛИ УниверсальныйОбменСБанкамиКлиентСервер.ПринадлежитСемействуКонфигураций(
				ИмяКонфигурации, ВерсияXDTO.СемействоКонфигураций);			
		
		Если Не ОтчетПодходитДляВерсии Тогда
			Продолжить;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ВерсияXDTO.ВерсияОт) Тогда
			
			СоставВерсииОт = УниверсальныйОбменСБанками.СоставВерсииКонфигурации(ВерсияXDTO.ВерсияОт);
			
			Попытка
				ОтчетПодходитДляВерсии = 
					УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсииСЧисломРазрядовДо4(СоставВерсииКонфигурации.ВерсияКонфигурации,
					СоставВерсииОт.ВерсияКонфигурации) >= 0;
			Исключение
				ОтчетПодходитДляВерсии = Ложь;		
			КонецПопытки;
				
			Если ОтчетПодходитДляВерсии И ЗначениеЗаполнено(СоставВерсииОт.ВерсияОтраслевогоРешения) Тогда
				Попытка
					ОтчетПодходитДляВерсии = 
						УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсииСЧисломРазрядовДо4(СоставВерсииКонфигурации.ВерсияОтраслевогоРешения,
						СоставВерсииОт.ВерсияОтраслевогоРешения) >= 0;
				Исключение
					ОтчетПодходитДляВерсии = Ложь;		
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтчетПодходитДляВерсии И ЗначениеЗаполнено(ВерсияXDTO.ВерсияДо) Тогда
			
			СоставВерсииДо = УниверсальныйОбменСБанками.СоставВерсииКонфигурации(ВерсияXDTO.ВерсияДо);
			
			Попытка
				ОтчетПодходитДляВерсии = 
					УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсииСЧисломРазрядовДо4(СоставВерсииКонфигурации.ВерсияКонфигурации,
					СоставВерсииДо.ВерсияКонфигурации) <= 0;
			Исключение
				ОтчетПодходитДляВерсии = Ложь;		
			КонецПопытки;
				
			Если ОтчетПодходитДляВерсии И ЗначениеЗаполнено(СоставВерсииДо.ВерсияОтраслевогоРешения) Тогда
				Попытка
					ОтчетПодходитДляВерсии = 
						УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсииСЧисломРазрядовДо4(СоставВерсииКонфигурации.ВерсияОтраслевогоРешения,
						СоставВерсииДо.ВерсияОтраслевогоРешения) <= 0;
				Исключение
					ОтчетПодходитДляВерсии = Ложь;		
				КонецПопытки;
			КонецЕсли;
				
		КонецЕсли;
		
		Если ОтчетПодходитДляВерсии Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтчетПодходитДляВерсии;

КонецФункции 

Функция ОтчетПредназначенДляВерсииСервиса(ОтчетXDTO, ТекущаяВерсияСервиса)
	
	Если ЗначениеЗаполнено(ОтчетXDTO.МинВерсияСервиса)
		И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ОтчетXDTO.МинВерсияСервиса) < 0 Тогда
		// Отчет может быть корректно отображен только в следующих версиях программы, 
		// для текущей версии его пропускаем.
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетXDTO.МаксВерсияСервиса)
		И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ОтчетXDTO.МаксВерсияСервиса) > 0 Тогда
		// Отчет предназначен для отображения на предыдущих версиях программы,
		// для текущей версии его пропускаем.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

#КонецОбласти

#Область ФормированиеОтчетов

Функция СвойстваСчета(Знач КодСчета)
	
	Счет = НайтиСчетПоКоду(КодСчета);
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСчет(ИмяПоля)
	
	Возврат СтрНачинаетсяС(ИмяПоля, "Счет") ИЛИ СтрНачинаетсяС(ИмяПоля, "КорСчет");
	
КонецФункции

Функция ЭтоИзмерениеРегистраБухгалтерии(ИмяПоля)

	МетаданныеИзмерений = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Измерения;
	
	Для каждого Измерение Из МетаданныеИзмерений Цикл
		Если СтрНачинаетсяС(ИмяПоля, Измерение.Имя) ИЛИ СтрНачинаетсяС(ИмяПоля, "Кор" + Измерение.Имя) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция ЭтоРесурсРегистраБухгалтерии(ИмяПоля)

	МетаданныеИзмерений = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы;
	
	Для каждого Ресурс Из МетаданныеИзмерений Цикл
		Если СтрНачинаетсяС(ИмяПоля, Ресурс.Имя) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция ЭтоСубконто(ИмяПоля)

	Возврат СтрНачинаетсяС(ИмяПоля, "Субконто")
		ИЛИ СтрНачинаетсяС(ИмяПоля, "КорСубконто");

КонецФункции

Функция НомерИзИмениСубконто(Знач ИмяСубконто)

	ПозицияТочки = СтрНайти(ИмяСубконто, ".");
	Если ПозицияТочки <> 0 Тогда
		ИмяСубконто = Лев(ИмяСубконто, ПозицияТочки - 1);
	КонецЕсли;
	
	ПоследнийСимвол = Прав(ИмяСубконто, 1);
	
	ОписаниеЧисло = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеЧисло.ПривестиЗначение(ПоследнийСимвол);

КонецФункции

Функция ОписаниеПоляОтчета(ИмяПоля, СвойстваСчета, КешСубконто)
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяПоля",       "");
	Результат.Вставить("Представление", "");
	
	Если СвойстваСчета = Неопределено
	 Или ЭтоСчет(ИмяПоля)
	 Или ЭтоИзмерениеРегистраБухгалтерии(ИмяПоля)
	 Или ЭтоРесурсРегистраБухгалтерии(ИмяПоля) Тогда
		// Оставляем как есть.
		Результат.ИмяПоля = ИмяПоля;
		Результат.Представление = ОбщегоНазначенияБПКлиентСервер.СинонимИзИмени(ИмяПоля);
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЭтоСубконто(ИмяПоля) Тогда
		ПолноеИмяПоля = ИмяПоля;
	Иначе
		ПолноеИмяПоля = БухгалтерскиеОтчеты.ПодобратьНомерПоИмениВидаСубконто(
			СвойстваСчета.Ссылка, ИмяПоля, КешСубконто);
	КонецЕсли;

	// Проверим, что у счета есть столько субконто.
	Если СвойстваСчета.КоличествоСубконто = 0
	 Или НомерИзИмениСубконто(ПолноеИмяПоля) > СвойстваСчета.КоличествоСубконто Тогда

		Возврат Результат;
	КонецЕсли;

	Результат.ИмяПоля = ПолноеИмяПоля;
	
	ТипыРеквизита = Неопределено;
	Пока Не ПустаяСтрока(ПолноеИмяПоля) Цикл // получаем представления
		
		ПозицияТочки = СтрНайти(ПолноеИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			ИмяПоляТекущегоУровня = ПолноеИмяПоля;
			ПолноеИмяПоля = "";
		Иначе
			ИмяПоляТекущегоУровня = Лев(ПолноеИмяПоля, ПозицияТочки - 1);
			ПолноеИмяПоля = Сред(ПолноеИмяПоля, ПозицияТочки + 1);
		КонецЕсли;
		
		ИмяСубконто = ИмяПоляТекущегоУровня;
		
		Если ТипыРеквизита = Неопределено Тогда // инициализация для верхнего уровня "СубконтоN"
			Если СтрНачинаетсяС(ИмяСубконто, "КорСубконто") Тогда
				// Для корсубконто типы не известны, поэтому оставляем путь к реквизиту без изменения.
				Результат.Представление = СтрЗаменить(ИмяСубконто, "КорСубконто", НСтр("ru = 'Кор. Субконто';
																						|en = 'Corr. Extra dimension'")) 
					+ ?(ЗначениеЗаполнено(ПолноеИмяПоля), "." + ПолноеИмяПоля, "");
				Возврат Результат;
			ИначеЕсли Не СвойстваСчета.Свойство("Вид" + ИмяСубконто) Тогда // нетиповую настройку субконто не обслуживаем
				Результат.ИмяПоля = "";
				Возврат Результат;
			КонецЕсли;
			
			ТипыРеквизита = СвойстваСчета["Вид" + ИмяСубконто + "ТипЗначения"].Типы();
			НаименованиеВидаСубконто = СвойстваСчета["Вид" + ИмяСубконто + "Наименование"];
			Продолжить;
			
		КонецЕсли;
		
		ПодходящийРеквизит = Неопределено;
		ПодходящиеТипыРеквизита = Новый Массив;
		Для каждого ТипРеквизита Из ТипыРеквизита Цикл
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
			Если МетаданныеТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПодходящийРеквизит = МетаданныеТипа.Реквизиты.Найти(ИмяСубконто);
			Если ПодходящийРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодходящиеТипыРеквизита, ПодходящийРеквизит.Тип.Типы(), Истина);
			
		КонецЦикла;
		Если ПодходящиеТипыРеквизита.Количество() = 0 Тогда
			НаименованиеВидаСубконто = НаименованиеВидаСубконто + "." + ИмяПоляТекущегоУровня
				+ ?(ПустаяСтрока(ПолноеИмяПоля), "", "." + ПолноеИмяПоля);
			Прервать;
		КонецЕсли;
		ТипыРеквизита = ПодходящиеТипыРеквизита;
		
		НаименованиеВидаСубконто = НаименованиеВидаСубконто + "." + ПодходящийРеквизит.Синоним;
		
	КонецЦикла;
	Результат.Представление = НаименованиеВидаСубконто;
	
	Возврат Результат;
	
КонецФункции

Функция ПериодичностьСтандартныхОтчетов(ПериодичностьXDTO)

	ПериодичностьОтчетов = БухгалтерскиеОтчетыКлиентСервер.Периодичность();

	Если ПериодичностьXDTO = "Месяц" Тогда
		Возврат ПериодичностьОтчетов.Месяц;
	ИначеЕсли ПериодичностьXDTO = "Квартал" Тогда
		Возврат ПериодичностьОтчетов.Квартал;
	ИначеЕсли ПериодичностьXDTO = "Год" Тогда
		Возврат ПериодичностьОтчетов.Год;
	ИначеЕсли ПериодичностьXDTO = "КварталПолугодие9МесяцевГод" Тогда
		// Штатно такое значение в настройках требований банков выбрать нельзя, 
		// но если вдруг так получилось, то считаем его равным периодичности "квартал".
		Возврат ПериодичностьОтчетов.Квартал;
	КонецЕсли;
	
	Возврат ПериодичностьОтчетов.Период; 

КонецФункции

Функция ТипГруппировкиСтандартныхОтчетов(ТипГруппировкиXDTO)
	
	ТипГруппировкиОтчетов = БухгалтерскиеОтчетыКлиентСервер.ТипГруппировки();

	Если ТипГруппировкиXDTO = "БезГрупп" Тогда
		Возврат ТипГруппировкиОтчетов.Элементы;
	ИначеЕсли ТипГруппировкиXDTO = "СГруппами" Тогда
		Возврат ТипГруппировкиОтчетов.Иерархия;
	ИначеЕсли ТипГруппировкиXDTO = "ТолькоГруппы" Тогда
		Возврат ТипГруппировкиОтчетов.ТолькоИерархия;
	КонецЕсли;
	
	// По умолчанию "Без групп".
	Возврат ТипГруппировкиОтчетов.Элементы;

КонецФункции

Функция ВидСравненияСтандартныхОтчетов(ВидСравненияXDTO)
	
	Если ВидСравненияXDTO = "Больше" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли ВидСравненияXDTO = "БольшеИлиРавно" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли ВидСравненияXDTO = "ВИерархии" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли ВидСравненияXDTO = "ВСписке" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ВидСравненияXDTO = "ВСпискеПоИерархии" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли ВидСравненияXDTO = "Заполнено" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.Заполнено;
	ИначеЕсли ВидСравненияXDTO = "Меньше" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли ВидСравненияXDTO = "МеньшеИлиРавно" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли ВидСравненияXDTO = "НачинаетсяС" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ИначеЕсли ВидСравненияXDTO = "НеВИерархии" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеВИерархии;
	ИначеЕсли ВидСравненияXDTO = "НеВСписке" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеВСписке;
	ИначеЕсли ВидСравненияXDTO = "НеВСпискеПоИерархии" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	ИначеЕсли ВидСравненияXDTO = "НеЗаполнено" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли ВидСравненияXDTO = "НеНачинаетсяС" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ИначеЕсли ВидСравненияXDTO = "НеПодобно" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеПодобно;
	ИначеЕсли ВидСравненияXDTO = "НеРавно" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ВидСравненияXDTO = "НеСодержит" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.НеСодержит;
	ИначеЕсли ВидСравненияXDTO = "Подобно" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.Подобно;
	ИначеЕсли ВидСравненияXDTO = "Равно" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВидСравненияXDTO = "Содержит" Тогда 
		 Возврат ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	
	// По умолчанию "Равно".
	Возврат ВидСравненияКомпоновкиДанных.Равно;

КонецФункции

Функция РазмещениеДополнительныхПолейСтандартныхОтчетов(РазмещениеДополнительныхПолейXDTO)
	
	РазмещениеДополнительныхПолейОтчетов = БухгалтерскиеОтчетыКлиентСервер.РазмещениеДополнительныхПолей();

	Если РазмещениеДополнительныхПолейXDTO = "ВместеСВладельцем" Тогда
		Возврат РазмещениеДополнительныхПолейОтчетов.ВместеСВладельцем;
	ИначеЕсли РазмещениеДополнительныхПолейXDTO = "Отдельно" Тогда
		Возврат РазмещениеДополнительныхПолейОтчетов.Отдельно;
	КонецЕсли;
	
	// По умолчанию "В одной колонке".
	Возврат РазмещениеДополнительныхПолейОтчетов.ВместеСВладельцем;

КонецФункции

Процедура ЗаполнитьГруппировкиОСВ(ПараметрыОтчета, НастройкиОтчета, КешСубконто)
	
	Для Каждого СтрокаГруппировки Из НастройкиОтчета.ГруппировкаПоСчетам Цикл
		ЗаполнитьСвойстваГруппировки(СтрокаГруппировки, ПараметрыОтчета.Группировка, КешСубконто);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРазвернутоеСальдоОтчета(ПараметрыОтчета, НастройкиОтчета, КешСубконто)
	
	Для Каждого СтрокаРазвернутоеСальдо Из НастройкиОтчета.РазвернутоеСальдоПоСчетам Цикл
		ЗаполнитьСвойстваГруппировки(СтрокаРазвернутоеСальдо, ПараметрыОтчета.РазвернутоеСальдо, КешСубконто);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, КешСубконто)
	
	Для Каждого СтрокаГруппировкаКор Из НастройкиОтчета.ГруппировкаПоСчетам Цикл
		ЗаполнитьСвойстваГруппировки(СтрокаГруппировкаКор, ПараметрыОтчета.ГруппировкаКор, КешСубконто, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваГруппировки(Источник, СтрокиГруппировки, КешСубконто, ЭтоГруппировкаКор = Ложь)
	
	СвойстваСчета = СвойстваСчета(Источник.Счет);
	Если СвойстваСчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоСубконто = СтрРазделить(Источник.ПоСубконто, ",", Ложь);
	Для инд = 0 По ПоСубконто.ВГраница() Цикл
		ПоСубконто[инд] = СокрЛП(ПоСубконто[инд]);
	КонецЦикла;
	
	НоваяСтрока = СтрокиГруппировки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник, "НомерСтроки, ПоСубсчетам");
	НоваяСтрока.Счет = СвойстваСчета.Ссылка;
	НоваяСтрока.Использование = Истина;
	
	ПоСубконто(ПоСубконто, НоваяСтрока, СвойстваСчета, КешСубконто, ЭтоГруппировкаКор);
	
КонецПроцедуры

Процедура ПоСубконто(ПоСубконто, ТекущиеДанные, СвойстваСчета, КешСубконто, ЭтоГруппировкаКор)
	
	СтрокаПоСубконто    = "";
	СтрокаПредставление = "";
	
	Если ЭтоГруппировкаКор
		И СвойстваСчета.УчетПоПодразделениям
		И БухгалтерскиеОтчетыВызовСервера.ИспользоватьПодразделения() Тогда
		Если ПоСубконто.Найти("Подразделения") = Неопределено Тогда
			СтрокаПоСубконто = СтрокаПоСубконто + "-" + "0";
		Иначе
			СтрокаПоСубконто = СтрокаПоСубконто + "+" + "0";
			СтрокаПредставление = СтрокаПредставление + "Подразделения, ";
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваСчета.КоличествоСубконто = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Список.Добавить(НомерСубконто, СвойстваСчета["ВидСубконто" + НомерСубконто + "Наименование"], Ложь);
	КонецЦикла;
	
	Для Каждого ВидСубконто Из ПоСубконто Цикл
		СубконтоНомерСубконто = БухгалтерскиеОтчеты.ПодобратьНомерПоИмениВидаСубконто(
			СвойстваСчета.Ссылка, ВидСубконто, КешСубконто);
		НомерСубконто = НомерИзИмениСубконто(СубконтоНомерСубконто);
		
		Элемент = Список.НайтиПоЗначению(НомерСубконто);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент.Пометка = Истина;
		ИндексЭлемента = Список.Индекс(Элемент);
		Сдвиг = НомерСубконто - ИндексЭлемента - 1;
		Если Сдвиг <> 0 Тогда
			Список.Сдвинуть(Элемент, Сдвиг);
		КонецЕсли;
	КонецЦикла;
	
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВестиУчетПоДоговорам                 = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВестиУчетПоДоговорам();
	
	Представления = Новый Массив;
	Для Каждого Элемент Из Список Цикл
		// Если одна номенклатурная группа, то не добавляем Номенклатурные группы в список субконто.
		Если Не Элемент.Пометка Тогда
			СтрокаПоСубконто = СтрокаПоСубконто + "-" + Элемент.Значение;
		ИначеЕсли ИспользоватьОднуНоменклатурнуюГруппу
			И СвойстваСчета["ВидСубконто" + Элемент.Значение]
				= ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы") Тогда
			СтрокаПоСубконто = СтрокаПоСубконто + "-" + Элемент.Значение;
		ИначеЕсли Не ВестиУчетПоДоговорам
			И СвойстваСчета["ВидСубконто" + Элемент.Значение]
				= ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры") Тогда
			СтрокаПоСубконто = СтрокаПоСубконто + "-" + Элемент.Значение;
		Иначе
			СтрокаПоСубконто = СтрокаПоСубконто + "+" + Элемент.Значение;
			Представления.Добавить(Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПредставление = СтрокаПредставление + СтрСоединить(Представления, ", ");
	
	ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
	ТекущиеДанные.Представление = СтрокаПредставление;
	
КонецПроцедуры

Функция ПользовательскиеНастройкиОтчета(ПараметрыОтчета)

	Если ПараметрыОтчета.Свойство("ПользовательскиеНастройки") Тогда
		Результат = ПараметрыОтчета.ПользовательскиеНастройки;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Результат = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		ПараметрыОтчета.Вставить("ПользовательскиеНастройки", Результат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Преобразует строковое значение выражения, указанное в настройках требований, в значения соответствующего типа.
// 
// Параметры:
//	ИсходнаяСтрока - Строка - Содержит первым символом буквенный префикс и двоеточие
//		* N - число
//		* D - дата
//		* L - булево
//		* S - Строка - само строковое значение либо имя предопределенного значения 
//                     в единственном числе как для функции ПредопределенноеЗначение().
//	Например, "N:17.47".
//
Функция СтрокаВЗначение(ИсходнаяСтрока)

	Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПозицияДвоеточия = СтрНайти(ИсходнаяСтрока, ":");
	Если ПозицияДвоеточия > 1 Тогда
		ПрефиксТипа = ВРег(Лев(ИсходнаяСтрока, ПозицияДвоеточия - 1));
		ЗначениеБезПрефикса = Сред(ИсходнаяСтрока, ПозицияДвоеточия + 1);
	Иначе
		// Если префикс явно не задан, считаем простой строкой.
		ПрефиксТипа         = "S";
		ЗначениеБезПрефикса = ИсходнаяСтрока;
	КонецЕсли;

	Если ПрефиксТипа = "N" Тогда
		Возврат XMLЗначение(Тип("Число"), ЗначениеБезПрефикса);

	ИначеЕсли ПрефиксТипа = "D" Тогда
		Возврат XMLЗначение(Тип("Дата"), ЗначениеБезПрефикса);

	ИначеЕсли ПрефиксТипа = "L" Тогда
		Возврат XMLЗначение(Тип("Булево"), ЗначениеБезПрефикса);

	ИначеЕсли ПрефиксТипа = "S" Тогда 
		// Строка может содержать имена предопределенных элементов.
		
		ЧастиИмени = СтрРазделить(ВРег(ЗначениеБезПрефикса), ".");
		Если ЧастиИмени.Количество() < 3 Тогда
			// Это просто строковое значение.
			Возврат ЗначениеБезПрефикса;
		КонецЕсли;
		
		ТипОбъекта = ЧастиИмени[0];
		ИмяОбъекта = ЧастиИмени[1];
		ИмяПредопределенныхДанных = ЧастиИмени[2];
		
		Если ТипОбъекта = "СПРАВОЧНИК" Тогда
			КоллекцияМетаданных = Метаданные.Справочники;
			Возврат НайтиПредопределенныйЭлемент(КоллекцияМетаданных, ИмяОбъекта, ИмяПредопределенныхДанных);
		
		ИначеЕсли ТипОбъекта = "ДОКУМЕНТ" Тогда
			КоллекцияМетаданных = Метаданные.Документы;
			Возврат НайтиПредопределенныйЭлемент(КоллекцияМетаданных, ИмяОбъекта, ИмяПредопределенныхДанных);

		ИначеЕсли ТипОбъекта = "ПЛАНСЧЕТОВ" Тогда
			КоллекцияМетаданных = Метаданные.ПланыСчетов;
			Возврат НайтиПредопределенныйЭлемент(КоллекцияМетаданных, ИмяОбъекта, ИмяПредопределенныхДанных);

		ИначеЕсли ТипОбъекта = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			КоллекцияМетаданных = Метаданные.ПланыВидовХарактеристик;
			Возврат НайтиПредопределенныйЭлемент(КоллекцияМетаданных, ИмяОбъекта, ИмяПредопределенныхДанных);
			
		ИначеЕсли ТипОбъекта = "ПЕРЕЧИСЛЕНИЕ" Тогда
			Возврат ОбщегоНазначенияБП.НайтиЗначениеПеречисления(ИмяОбъекта, ИмяПредопределенныхДанных);
			
		Иначе
			// Это не предопределенный элемент, просто строка с точками, возвращаем как есть.
			Возврат ЗначениеБезПрефикса;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция НайтиПредопределенныйЭлемент(КоллекцияМетаданных, ИмяОбъекта, ИмяПредопределенныхДанных)

	ОбъектМетаданных = КоллекцияМетаданных.Найти(ИмяОбъекта);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		МенеджерОбъектов = Справочники;

	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		МенеджерОбъектов = Документы;

	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		МенеджерОбъектов = ПланыВидовХарактеристик;

	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		МенеджерОбъектов = ПланыСчетов;

	Иначе
		ВызватьИсключение НСтр("ru = 'НайтиПредопределенныйЭлемент(): неподдерживаемый тип параметра КоллекцияМетаданных';
								|en = 'НайтиПредопределенныйЭлемент(): unsupported КоллекцияМетаданных parameter type'");
	КонецЕсли;

	МенеджерОбъекта = МенеджерОбъектов[ИмяОбъекта];
	
	Если ВРег(ИмяПредопределенныхДанных) = "ПУСТАЯССЫЛКА" Тогда
		Возврат МенеджерОбъекта.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаОбъекта КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаОбъекта", ОбъектМетаданных.ПолноеИмя());

	// Если в базе нет предопределенного элемента, то платформа не позволяет обратиться к его имени.
	// Поэтому выполняем в попытке.
	Попытка
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	
	Исключение
	
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не найден предопределенный элемент %1.%2 по причине: %3';
				|en = 'Predefined %1 item is not found.%2 due to: %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбъектМетаданных.ПолноеИмя(),
			ИмяПредопределенныхДанных,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
			Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
			"НайтиПредопределенныйЭлемент");
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, УровеньЖурналаРегистрации.Информация, ОбъектМетаданных, , ТекстСообщения);
	
	КонецПопытки;
	
	Возврат Неопределено;

КонецФункции

// Объединяет и преобразует переданные табличные документы
// в зависимости от параметров:
// 	ОбъединитьФайлыОтчета = Ложь: Объединяет табличные документы, разбитые по листам в табличные документы разделов
// 	ОбъединитьФайлыОтчета = Истина: Объединяет табличные документы, разбитые по листам в один табличный документ
// 	ПользовательскийФормат - формат сохранения табличного документа
//
// Возвращаемое значение:
//	 массив строк таблицы значений
//
Функция ОбъединенныеФайлыБухОтчетности(ФайлыОтчета, ПользовательскийФормат, ОбъединитьФайлыОтчета, НаименованиеОтчета)
	
	ТаблицаФайлов = Новый ТаблицаЗначений;   
	ТаблицаФайлов.Колонки.Добавить("ВидОтчета");   
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла");   
	ТаблицаФайлов.Колонки.Добавить("ВидФайла");
    ТаблицаФайлов.Колонки.Добавить("СодержимоеФайла");
			
	ТипЧисло = Новый ОписаниеТипов("Число");
		
	Для Каждого ФайлПредставления Из ФайлыОтчета Цикл  
		
		Если ОбъединитьФайлыОтчета Тогда  
			Если ТипЗнч(ФайлПредставления.СодержимоеФайла) = Тип("ТабличныйДокумент") Тогда
				ВидОтчета = НаименованиеОтчета;
			КонецЕсли;
		Иначе

			ВидОтчета = ФайлПредставления.ВидФайла;      
			Если ТипЗнч(ФайлПредставления.СодержимоеФайла) = Тип("ТабличныйДокумент") Тогда

				НомерВхождения = СтрНайти(ВидОтчета, ". Лист ");
				Если НомерВхождения <> 0 Тогда
					ВидОтчета = Лев(ВидОтчета, НомерВхождения - 1);
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		СтрокаТаблицы = ТаблицаФайлов.Добавить(); 
		СтрокаТаблицы.ВидОтчета = ВидОтчета;  
		
	КонецЦикла;
	
	ТаблицаФайлов.Свернуть("ВидОтчета, ИмяФайла, ВидФайла, СодержимоеФайла"); 
	
	НомерПоПорядку = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаФайлов Цикл
				
		ПечатныеМакетыОтчета = Новый ТаблицаЗначений;
		ПечатныеМакетыОтчета.Колонки.Добавить("Макет");
		ПечатныеМакетыОтчета.Колонки.Добавить("ПорядковыйНомер", ТипЧисло);
		
		Для Каждого ФайлПредставления Из ФайлыОтчета Цикл  
			
			Если ОбъединитьФайлыОтчета Тогда        
				
				МакетОтчета = ПечатныеМакетыОтчета.Добавить();
				МакетОтчета.Макет = ФайлПредставления.СодержимоеФайла;
				МакетОтчета.ПорядковыйНомер = НомерПоПорядку;
                НомерПоПорядку = НомерПоПорядку + 1;
				
			Иначе  
				
				ПрефиксФайлаОтчета = СтрокаТаблицы.ВидОтчета;
				Если СтрНайти(ФайлПредставления.ВидФайла, ПрефиксФайлаОтчета) = 1 Тогда   
					
					СтрокаПорядковогоНомера = СтрЗаменить(ФайлПредставления.ВидФайла, ПрефиксФайлаОтчета, "");
					// Нелокализуемая строка
					СтрокаПорядковогоНомера = СтрЗаменить(СтрокаПорядковогоНомера, ". Лист ", ""); 					
					ПорядковыйНомер = 1;
					Если ЗначениеЗаполнено(СтрокаПорядковогоНомера) Тогда
						ПорядковыйНомер = ТипЧисло.ПривестиЗначение(СтрокаПорядковогоНомера);
					КонецЕсли;
					
					МакетОтчета = ПечатныеМакетыОтчета.Добавить();
					МакетОтчета.Макет = ФайлПредставления.СодержимоеФайла;
					МакетОтчета.ПорядковыйНомер = ПорядковыйНомер;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПечатныеМакетыОтчета.Количество() <> 0 Тогда 
			
			ПечатныеМакетыОтчета.Сортировать("ПорядковыйНомер");
			
			Если ПользовательскийФормат = ТипФайлаТабличногоДокумента.PDF Тогда    
				
				РасширениеФайла = "pdf"; 
				ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
				
				Для Каждого МакетОтчета Из ПечатныеМакетыОтчета Цикл
					
					СтрокаПакета = ПакетОтображаемыхДокументов.Состав.Добавить();
					СтрокаПакета.Данные = ПоместитьВоВременноеХранилище(МакетОтчета.Макет);
					
				КонецЦикла;
				
				ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
				ПакетОтображаемыхДокументов.Записать(ИмяФайла, ТипФайлаПакетаОтображаемыхДокументов.PDF);
				ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
				
				СохраняемыйОтчет = ДанныеФайла;
                РасширениеФайла = ".pdf";     
				
			Иначе   
				
				РасширениеФайла = ".xlsx"; 
				СохраняемыйОтчет = Новый ТабличныйДокумент;
				Для Каждого МакетОтчета Из ПечатныеМакетыОтчета Цикл
					СохраняемыйОтчет.Вывести(МакетОтчета.Макет);
				КонецЦикла; 
								
			КонецЕсли;  
			
			// Нелокализуемая строка 
			ИмяФайлаБезРасширения = СтрЗаменить(СтрокаТаблицы.ВидОтчета, "БланкОтчета.", "");
			// Нелокализуемая строка    
			ИмяФайлаБезРасширения = СтрЗаменить(ИмяФайлаБезРасширения, "(с 2011 года)", ""); 
			ИмяФайла = ИмяФайлаБезРасширения + РасширениеФайла;
			СтрокаТаблицы.СодержимоеФайла = СохраняемыйОтчет;					
			СтрокаТаблицы.ИмяФайла = ИмяФайла;	
			СтрокаТаблицы.ВидФайла = СтрокаТаблицы.ВидОтчета; 

		КонецЕсли;     
	
	КонецЦикла;   
		
	ТаблицаФайлов.Колонки.Удалить("ВидОтчета");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаФайлов);
	
КонецФункции

Функция НастройкиВыгрузкиРеглОтчета(ВидВыгрузкиРеглОтчета)  
	
	СтруктураНастроек = Новый Структура("ОбъединитьФайлыОтчета, ОбъединитьЛисты", Ложь, Ложь); 
			
	Если ВидВыгрузкиРеглОтчета = "Файл" Тогда    
		
		СтруктураНастроек.ОбъединитьФайлыОтчета = Истина;  
		СтруктураНастроек.ОбъединитьЛисты = Истина;    
		
	ИначеЕсли ВидВыгрузкиРеглОтчета = "Разделы" Тогда   
		
        СтруктураНастроек.ОбъединитьЛисты = Истина; 
		
	КонецЕсли;
		   
	Возврат СтруктураНастроек;
	
КонецФункции

#Область ЭлектроннаяПодпись

Функция ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет)

	// Используем стандартную структуру с результатом выгрузки для единообразной обработки далее.                                                                           
	РезультатВыгрузки = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	
	// Отчеты могли ранее сдаваться в ФНС другим пользователем.
	// Поэтому чтобы не возникало сообщений про нехватку прав доступа на выгрузки пакетов отчетов,
	// выполняем выгрузку в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПакета = ИнтерфейсыВзаимодействияБРО.ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет, Истина);
	УстановитьПривилегированныйРежим(Ложь);

	Если ЗначениеЗаполнено(СвойстваПакета.ОписаниеОшибки) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выгрузке пакета файлов с отметкой ФНС для отчета ""%1"": %2';
										|en = 'An error occurred upon exporting a file package with FTS mark for the ""%1"" report: %2'"), 
			РегламентированныйОтчет,
			СвойстваПакета.ОписаниеОшибки);
		РезультатВыгрузки.Ошибки.Добавить(ТекстСообщения);
	ИначеЕсли НЕ ЭтоАдресВременногоХранилища(СвойстваПакета.Адрес) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выгрузке пакета файлов с отметкой ФНС для отчета ""%1""';
										|en = 'An error occurred upon exporting a file package with FTS mark for the ""%1"" report'"), 
			РегламентированныйОтчет);
		РезультатВыгрузки.Ошибки.Добавить(ТекстСообщения);
	Иначе
		РезультатВыгрузки.РеглОтчетВыгружен = Истина;
		РезультатВыгрузки.АдресФайлаВыгрузки = СвойстваПакета.Адрес;
		РезультатВыгрузки.ИмяФайлаВыгрузки   = СвойстваПакета.ИмяФайла;
	КонецЕсли;
	
	Возврат РезультатВыгрузки;

КонецФункции

#КонецОбласти

Процедура ОпределитьНаборыДанныхПоСемействуКонфигураций(НаборыДанных, ТекущееСемействоКонфигураций)
	
	УдаляемыеНаборы = Новый Массив;

	Для каждого НаборДанных Из НаборыДанных Цикл
		
		ДопустимыеСемейства = ВРЕГ(СтрЗаменить(НаборДанных.Имя, "__", ";"));
		
		Если СтрНайти(ДопустимыеСемейства, ";") > 0
			И Не УниверсальныйОбменСБанкамиКлиентСервер.ПринадлежитСемействуКонфигураций(ВРЕГ(ТекущееСемействоКонфигураций), 
				ДопустимыеСемейства) Тогда
			
			УдаляемыеНаборы.Добавить(НаборДанных);
			
		Иначе
			Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
				ОпределитьНаборыДанныхПоСемействуКонфигураций(НаборДанных.Элементы, ТекущееСемействоКонфигураций);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого УдаляемыйНабор Из УдаляемыеНаборы Цикл
	
		НаборыДанных.Удалить(УдаляемыйНабор);	
	
	КонецЦикла;

КонецПроцедуры

Процедура ОтчетПоСхемеКомпоновкиДанных(СхемаСКД, ПараметрыОтчета, РезультатФормированияОтчета)
	
	ТекущееСемействоКонфигураций = УниверсальныйОбменСБанками.СемействоКонфигураций();
	ОпределитьНаборыДанныхПоСемействуКонфигураций(СхемаСКД.НаборыДанных, ТекущееСемействоКонфигураций);
	
	КомпоновщикНастроекДанныхОтчета = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДанныхОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	КомпоновщикНастроекДанныхОтчета.ЗагрузитьНастройки(СхемаСКД.НастройкиПоУмолчанию);
	КомпоновщикНастроекДанныхОтчета.Восстановить(); 
	
	НастройкиСхемыОСКД = КомпоновщикНастроекДанныхОтчета.ПолучитьНастройки();
	ПараметрыДанныхОСКД = НастройкиСхемыОСКД.ПараметрыДанных.Элементы;
	
	ВыполнятьВПривилегированномРежиме = Ложь;
	
	ЭлементПараметр = ПараметрыДанныхОСКД.Найти("Организация");
	Если ЭлементПараметр <> Неопределено Тогда
		ЭлементПараметр.Использование = Истина;
		ЭлементПараметр.Значение = ПараметрыОтчета.Организация;
		ВыполнятьВПривилегированномРежиме = Истина;
	КонецЕсли;
	
	ЭлементПараметр = ПараметрыДанныхОСКД.Найти("ВключатьОбособленныеПодразделения");
	Если ЭлементПараметр <> Неопределено Тогда
		ЭлементПараметр.Использование = Истина;
		ЭлементПараметр.Значение = ПараметрыОтчета.ВключатьОбособленныеПодразделения;
	КонецЕсли;
	
	ЭлементПараметр = ПараметрыДанныхОСКД.Найти("НачалоПериода");
	Если ЭлементПараметр <> Неопределено Тогда
		ЭлементПараметр.Использование = Истина;
		ЭлементПараметр.Значение = ПараметрыОтчета.НачалоПериода;
	КонецЕсли;
	
	ЭлементПараметр = ПараметрыДанныхОСКД.Найти("КонецПериода");
	Если ЭлементПараметр <> Неопределено Тогда
		ЭлементПараметр.Использование = Истина;
		ЭлементПараметр.Значение = КонецДня(ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	ЭлементПараметр = ПараметрыДанныхОСКД.Найти("ТекущийФинОтчетВБанк");
	Если ЭлементПараметр <> Неопределено Тогда
		ЭлементПараметр.Использование = Истина;
		ЭлементПараметр.Значение = ПараметрыОтчета.ТекущийФинОтчетВБанк;
	КонецЕсли;
	
	ЭлементПараметр = ПараметрыДанныхОСКД.Найти("ТекущийКлючСтрокиОтчета");
	Если ЭлементПараметр <> Неопределено Тогда
		ЭлементПараметр.Использование = Истина;
		ЭлементПараметр.Значение = ПараметрыОтчета.ТекущийКлючСтрокиОтчета;
	КонецЕсли;
	
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МакетОформленияОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(НастройкиСхемыОСКД, "МакетОформления");
	
	Если Не МакетОформленияОтчета.Использование Тогда
		БухгалтерскиеОтчетыВызовСервера.УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиСхемыОСКД);	
	КонецЕсли;

	Макет = КомпоновщикМакетаОСКД.Выполнить(СхемаСКД, НастройкиСхемыОСКД);	
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет, , , Истина);
	
	МакетТаблицы = Документы.ФинОтчетВБанк.ПолучитьМакет("ЗаголовокОтчета");
	
	ОбластьЗаголовок = МакетТаблицы.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПараметрыОтчета.ЗаголовокОтчета; 
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = 
		БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, 
		ПараметрыОтчета.ВключатьОбособленныеПодразделения, ПараметрыОтчета.КонецПериода);

	РезультатФормированияОтчета.Результат.Вывести(ОбластьЗаголовок);
	
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ПроцессорВыводаОСКД.УстановитьДокумент(РезультатФормированияОтчета.Результат);
	
	ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
	
	Если ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	РезультатФормированияОтчета.Выполнено = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ИдентификаторыСохраняемыхНастроекПользователей

Функция ВладелецНастроекФинОтчетВБанк()
	
	Возврат "ФинОтчетВБанк";

КонецФункции

Функция НастройкаПоказыватьБаннерПодсказка()
	
	Возврат "ПоказыватьБаннерПодсказка";

КонецФункции

Функция НастройкаПоказыватьБаннерАвтозаполнение()
	
	Возврат "ПоказыватьБаннерАвтозаполнение";

КонецФункции

Функция НастройкаАвтозаполнение()
	
	Возврат "АвтозаполнениеОтчетов";

КонецФункции

#КонецОбласти

#КонецОбласти
