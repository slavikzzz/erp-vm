////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронный документооборот с контролирующими органами".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДатаПодтвержденияТребования(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТранспортноеСообщение.Ссылка КАК Ссылка,
		|	ТранспортноеСообщение.ДатаТранспорта КАК ДатаТранспорта
		|ИЗ
		|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		|ГДЕ
		|	ТранспортноеСообщение.ЦиклОбмена.Предмет В
		|			(ВЫБРАТЬ
		|				ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.ОписиВходящихДокументовИзНалоговыхОрганов.ВходящиеДокументы КАК ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы
		|			ГДЕ
		|				ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.СсылкаНаОбъект = &Предмет)
		|	И НЕ ТранспортноеСообщение.ПометкаУдаления
		|	И НЕ ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления
		|	И ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.РезультатПриемаДокументНП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаТранспорта";
	
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаПодтверждения = Выборка.ДатаТранспорта;
	Иначе
		ДатаПодтверждения = Дата(1,1,1);
	КонецЕсли;
	
	Возврат ДатаПодтверждения;
	
КонецФункции

Функция ДатаОтправкиТребования(Требование) Экспорт
	
	Опись = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(Требование);
	Если Опись = Неопределено Тогда
		// Опись еще не создана
		ДатаОтправки = Дата(1,1,1);
	Иначе
		ДатаОтправки = Опись.ДатаОтправки;
	КонецЕсли;
	
	Возврат ДатаОтправки;
	
КонецФункции

Процедура ЗаписатьВРегистрИзвлеченныеДанныеТребований(Ссылка) Экспорт
	
	Корректно = 
		ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов")
		И ЗначениеЗаполнено(Ссылка);
	
	Если НЕ Корректно Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияИзРегистра = ДанныеРегистраИзвлеченныеДанныеТребований(Ссылка);
	ПодтверждениеОтправилОператор = ТребованияФНСВызовСервера.ПодтверждениеОтправилОператор(Ссылка);
	
	Если ИнформацияИзРегистра.ЕстьДанные Тогда
		
		ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребований(Ссылка, ИнформацияИзРегистра.ДнейДоОтвета);
		
		Если НЕ ЗначениеЗаполнено(ИнформацияИзРегистра.ДатаОтправкиТребования) Тогда
			ДобавитьНовуюДатуПодтверждения(Ссылка, ЗначенияЗаполнения);
		КонецЕсли;
		
		ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Ссылка, ЗначенияЗаполнения);
		
	ИначеЕсли Ссылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов
		ИЛИ Ссылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОбУплатеНалогаСбораПениШтрафа Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("Ссылка", Ссылка);
		ИзвлечьДанныеТребованияИзPDF(ПараметрыОперации);
			
	ИначеЕсли Ссылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС Тогда
		
		ДнейДоОтвета       = ТребованияФНСВызовСервера.СкорректированныеДнейДоОтвета(Ссылка, 5);
		ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребований(Ссылка, ДнейДоОтвета, Истина);
		ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Ссылка, ЗначенияЗаполнения);
		
	Иначе
		
		ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребований(Ссылка,, Истина);
		ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Ссылка, ЗначенияЗаполнения);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРегистраИзвлеченныеДанныеТребований(Ссылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДанные", Ложь);
	Результат.Вставить("Ссылка", Ссылка);
	Регистр = Метаданные.РегистрыСведений.СвойстваОтветовНаТребования;
	Для каждого Реквизиты Из Регистр.Реквизиты Цикл
		Результат.Вставить(Реквизиты.Имя, Реквизиты.Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.СвойстваОтветовНаТребования КАК СвойстваОтветовНаТребования
	|ГДЕ
	|	СвойстваОтветовНаТребования.Ссылка = &Ссылка";
	
	Выборка = ЗапросДанных.Выполнить().Выгрузить();
	Если Выборка.Количество() = 1 Тогда
		
		СтрокаВыборки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка[0]);
		
		ЗаполнитьЗначенияСвойств(Результат, СтрокаВыборки);
		Результат.Вставить("ЕстьДанные", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваЗаписиРегистраИзвлеченныеДанныеТребований(Ссылка, ДнейДоОтвета = 0, ПервоначальноеЗаполнение = Ложь)
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ПервоначальноеЗаполнение Тогда
		
		ДатаОтправки = ДатаОтправкиТребования(Ссылка);
		ЗначенияЗаполнения.Вставить("ДатаОтправкиТребования", ДатаОтправки);
		
	КонецЕсли;
	
	Если ДнейДоОтвета <> 0 Тогда
		ЗначенияЗаполнения.Вставить("ДнейДоОтвета",  ДнейДоОтвета);
		ЗначенияЗаполнения.Вставить("ТребуетОтвета", Истина);
	КонецЕсли;
	
	ДатаПодтверждения = ДатаПодтвержденияТребования(Ссылка);
	ЗначенияЗаполнения.Вставить("ДатаПодтверждения", ДатаПодтверждения);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ОтветыНаТребования = КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребования(Ссылка,,Ложь);
	КоличествоОтветов  = ОтветыНаТребования.Получить(Ссылка);
	ЗначенияЗаполнения.Вставить("КоличествоОтветов", КоличествоОтветов);
	
	Если КоличествоОтветов > 0 Тогда
		
		ДатаОтвета = ДатаОтветаНаТребование(Ссылка);
		ЗначенияЗаполнения.Вставить("ДатаОтвета", ДатаОтвета);
		
		Состояния = СостоянияОтветов(Ссылка);
		
		Если Состояния.ЕстьКритическиеОшибки Тогда
			ЗначенияЗаполнения.Вставить("ЕстьКритическаяОшибкаОтвета", Истина);
		КонецЕсли;
		
		Если Состояния.ОтветНеПринят Тогда
			ЗначенияЗаполнения.Вставить("ОтветНеПринят", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;

КонецФункции

// Проверяет наличие pdf-файлов и анализирует их на предмет информации сроке подачи ответа.
// Может использоваться как фоновое задание.
//
// Параметры:
//	ПараметрыОперации 		- Структура - содержит поля:
//		* Ссылка 			- СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов
//		* ДатаПодтверждения - Дата
//
Процедура ИзвлечьДанныеТребованияИзPDF(ПараметрыОперации, АдресХранилища = Неопределено) Экспорт
	
	Ссылка = ПараметрыОперации.Ссылка;
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	МассивВложений = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Ссылка);
	
	УдалосьРазобратьPDF = Ложь;
	ДанныеФайла = Неопределено;
	ВсеВидыДокументов = "1165013";
	
	ДатаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДатаДокумента").ДатаДокумента;
	
	Если Год(ДатаДокумента) >= 2023 Тогда
		ВсеВидыДокументов = ВсеВидыДокументов + ",1160001,1165020,1165022,1160098,1160100,1120492,РешениеСФР,ТребованиеСФР";
	КонецЕсли;
	
	ДопустимыеКНД = СтрРазделить(ВсеВидыДокументов, ",");
	
	Для Каждого ПриложениеТребования Из МассивВложений Цикл
		
		СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПриложениеТребования.ИмяФайла);
		
		Если ВРЕГ(СвойстваФайла.Расширение) <> ВРЕГ(".pdf") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийКНД = Лев(СвойстваФайла.Имя, 7);
		Если ДопустимыеКНД.Найти(ТекущийКНД) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// файлы размером более 10 Мб не пытаемся обработать
		Если ПриложениеТребования.Размер >= (1024 * 1024 * 10) Тогда
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанные = ПриложениеТребования.Данные.Получить();
		ДанныеФайла    = ОбработкаФайловPDF.ПолучитьДанныеТребованияИзФайлаPDF(ДвоичныеДанные, ТекущийКНД);
		ДнейДоОтвета   = ТребованияФНСВызовСервера.СкорректированныеДнейДоОтвета(Ссылка, ДанныеФайла.ДнейДоОтвета);
		
		Если ЗначениеЗаполнено(ДнейДоОтвета) И ТекущийКНД = "1165013" Тогда
			
			ИнформацияИзРегистра = ДанныеРегистраИзвлеченныеДанныеТребований(Ссылка);
			
			ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребований(
				Ссылка, 
				ДнейДоОтвета, 
				НЕ ИнформацияИзРегистра.ЕстьДанные);
				
			УдалосьРазобратьPDF = Истина;
			ЗначенияЗаполнения.Вставить("УдалосьРазобратьPDF", УдалосьРазобратьPDF);
			
			ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Ссылка, ЗначенияЗаполнения);
			
			Прервать;
			
		ИначеЕсли ТекущийКНД <> "1165013" Тогда
			УдалосьРазобратьPDF = Истина;
			
			Если (ЗначениеЗаполнено(ДанныеФайла.СрокОплаты) ИЛИ ЗначениеЗаполнено(ДанныеФайла.Сумма))
				И ПустаяСтрока(АдресХранилища) Тогда
				ИнформацияИзРегистра = ДанныеРегистраИзвлеченныеДанныеТребований(Ссылка);
				
				ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребований(
					Ссылка, 
					ДнейДоОтвета, 
					НЕ ИнформацияИзРегистра.ЕстьДанные);
					
				ЗначенияЗаполнения.Вставить("УдалосьРазобратьPDF", УдалосьРазобратьPDF);
				ЗначенияЗаполнения.Вставить("СрокОплаты", ДанныеФайла.СрокОплаты);
				ЗначенияЗаполнения.Вставить("Сумма", ДанныеФайла.Сумма);
				
				ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Ссылка, ЗначенияЗаполнения);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ УдалосьРазобратьPDF Тогда
		
		ИнформацияИзРегистра = ДанныеРегистраИзвлеченныеДанныеТребований(Ссылка);
		Если НЕ ИнформацияИзРегистра.ЕстьДанные Тогда
			
			ДнейДоОтвета       = ТребованияФНСВызовСервера.СкорректированныеДнейДоОтвета(Ссылка, 5);
			ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребований(Ссылка, ДнейДоОтвета, Истина);
			ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Ссылка, ЗначенияЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ДанныеФайла, АдресХранилища);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьИзмененнуюДатуОтвета(Ссылка) Экспорт
	
	ДатаОтветаИзмененная = Неопределено;
	
	ДанныеУведомления = Ссылка.ДанныеУведомления.Получить();
	
	ИмяФайлаТреб = ДанныеУведомления.СтруктураРеквизитов._ИмяФайлТреб;
	Для Каждого СтрНевозмПред Из ДанныеУведомления.СтруктураРеквизитов._СвНевозмПред Цикл
		ЗначениеСписка = СтрНевозмПред.Данные.НайтиПоЗначению("_СрокПредст");
		Если ЗначениеСписка <> Неопределено Тогда
			ДатаОтветаИзмененная = Дата(ЗначениеСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаОтветаИзмененная <> Неопределено Тогда
		
		ЗапросТребования = Новый Запрос;
		ЗапросТребования.УстановитьПараметр("ИмяФайла", ИмяФайлаТреб + ".pdf");
		ЗапросТребования.Текст = "ВЫБРАТЬ
		                         |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ КАК Документ
		                         |ИЗ
		                         |	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
		                         |ГДЕ
		                         |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла = &ИмяФайла";
		Выборка = ЗапросТребования.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Требование = Выборка.Документ;
			ПоляРегистра = Новый Структура("ДатаОтветаИзмененная", ДатаОтветаИзмененная);
			ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Требование, ПоляРегистра);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит техническую запись данных в регистр сведений "СвойстваОтветовНаТребования"
// 
// Параметры:
//	СсылкаОтправки 	- СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов
//	ДанныеЗаписи 	- Структура - должен содержать имена и значение полей рекизитов или ресурсов
//
// Возвращаемое значение:
//	Булево
//
Функция ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(СсылкаОтправки, ДанныеЗаписи) Экспорт
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		СтруктураКлюча = Новый Структура("Ссылка", СсылкаОтправки);
		Ключ = РегистрыСведений.СвойстваОтветовНаТребования.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СвойстваОтветовНаТребования");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаОтправки);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СвойстваОтветовНаТребования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(СсылкаОтправки);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Ссылка = СсылкаОтправки;
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
			Запись.ПодтверждениеОтправилОператор = ТребованияФНСВызовСервера.ПодтверждениеОтправилОператор(СсылкаОтправки);
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция РазностьДатПоКалендарю(ДатаНачала, ДатаОкончания) Экспорт
	
	Результат = ТребованияФНСПовтИсп.РазностьДатПоКалендарю(
		НачалоДня(ДатаНачала), 
		НачалоДня(ДатаОкончания));
		
	Возврат Результат;
	
КонецФункции

Функция ДатаПлюсДниПоКалендарю(ДатаОт, КоличествоДней) Экспорт

	Результат = ТребованияФНСПовтИсп.ДатаПлюсДниПоКалендарю(
		НачалоДня(ДатаОт), 
		КоличествоДней);
		
	Возврат Результат;
	
КонецФункции

Функция РазностьДатПоВыходным(ДатаНачала, ДатаОкончания) Экспорт
	
	Результат = ТребованияФНСПовтИсп.РазностьДатПоВыходным(
		НачалоДня(ДатаНачала), 
		НачалоДня(ДатаОкончания));
		
	Возврат Результат;
	
КонецФункции

Функция ДатаПлюсДни(ДатаОт, КоличествоДней) Экспорт

	Результат = ТребованияФНСПовтИсп.ДатаПлюсДни(
		НачалоДня(ДатаОт), 
		КоличествоДней);
		
	Возврат Результат;
	
КонецФункции

Функция ДатаОтветаНаТребование(Требование) Экспорт
	
	Ответы = ОтветыНаТребование(Требование);
		
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ответы", Ответы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналОтчетовСтатусы.ДатаОтправки КАК ДатаОтправки
	|ИЗ
	|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|ГДЕ
	|	ЖурналОтчетовСтатусы.Ссылка В(&Ответы)
	|	И НЕ ЖурналОтчетовСтатусы.Скрыт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналОтправокВКонтролирующиеОрганы.ДатаОтправки
	|ИЗ
	|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
	|ГДЕ
	|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка В(&Ответы)
	|	И НЕ ЖурналОтправокВКонтролирующиеОрганы.Скрыт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтправки УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаОтвета = Выборка.ДатаОтправки;
	Иначе
		ДатаОтвета = Неопределено;
	КонецЕсли;

	Возврат ДатаОтвета;
	
КонецФункции

Функция ПредставлениеПросроченныхДней(Количество) Экспорт

	ШаблонДней = НСтр("ru = ';Просрочено на %1 день;;Просрочено на %1 дня;Просрочено на %1 дней;Просрочено на %1 дней';
						|en = ';Просрочено на %1 день;;Просрочено на %1 дня;Просрочено на %1 дней;Просрочено на %1 дней'");
	ПредставлениеДней = ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, Количество); 
	
	Возврат ПредставлениеДней;

КонецФункции

Функция ПредставлениеОставшихсяДней(Количество) Экспорт

	ШаблонДней = НСтр("ru = ';Остался %1 день;;Осталось %1 дня;Осталось %1 дней;Осталось %1 дней';
						|en = ';Остался %1 день;;Осталось %1 дня;Осталось %1 дней;Осталось %1 дней'");
	ПредставлениеДней = ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, Количество); 
	
	Возврат ПредставлениеДней;

КонецФункции

Функция СостояниеОтвета(Ответ)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ДополнительныеПараметры = Новый Структура("ПолучатьДаты, ПолучатьОшибкиОтправки", Ложь, Истина);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(
		Ответ,
		,
		ДополнительныеПараметры);
		
	Если ТекущееСостояние = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийЭтапОтправки = ТекущееСостояние.ТекущийЭтапОтправки;
	
	Если ТекущийЭтапОтправки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийЭтапОтправки.Вставить("ЕстьКритическиеОшибки", ТекущееСостояние.ЕстьКритическиеОшибки);
	
	Возврат ТекущийЭтапОтправки;

КонецФункции

Функция СостоянияОтветов(Требование)
	
	Ответы = ОтветыНаТребование(Требование);

	ЕстьКритическиеОшибки = Ложь;
	ОтветНеПринят = Ложь;
	Для каждого Ответ Из Ответы Цикл
		
		Состояние = СостояниеОтвета(Ответ);
		Если Состояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Состояние.ЕстьКритическиеОшибки Тогда
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
		
		Если Состояние.СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
			ОтветНеПринят = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОтветНеПринят", ОтветНеПринят);
	ДополнительныеПараметры.Вставить("ЕстьКритическиеОшибки", ЕстьКритическиеОшибки);
	
	Возврат ДополнительныеПараметры;

КонецФункции

Функция ОсталосьЧасов(Сейчас) Экспорт
	
	Час = 60*60;
	Осталось = Цел((КонецДня(Сейчас) - Сейчас) / Час) + 1;
	
	Возврат Осталось;

КонецФункции

Функция ОсталосьЧасовПредставление(Сейчас) Экспорт
	
	Осталось = ОсталосьЧасов(Сейчас);
	Представление = "Осталось %1 ч.";
	Представление = СтрШаблон(Представление, Строка(Осталось));

	Возврат Представление;
	
КонецФункции

Функция ТребующиеСкорогоПодтверждения(Организация = Неопределено, Все = Ложь) Экспорт

	Сегодня = ТекущаяДатаСеанса();
	
	Таблица = ТребующиеПодтверждения(Организация);
	
	Требования = Новый Массив;
	Для каждого Строка Из Таблица Цикл
		РазностьДней = РазностьДнейИсправленная(Строка, Сегодня);
		ЭтоНужныйДокумент = 
			РазностьДней <= 2 
			И РазностьДней >-60 
			И НЕ ТребованияФНСВызовСервера.ПодтверждениеОтправилОператор(Строка.Ссылка)
			И НЕ Все
			ИЛИ Все;
		
		Если ЭтоНужныйДокумент Тогда
			Требования.Добавить(Строка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Требования;
	
КонецФункции

Функция ТребующиеПодтверждения(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка КАК Ссылка,
	|	СвойстваОтветовНаТребования.ПодтвердитьДо КАК ПодтвердитьДо,
	|	ЖурналОтправокВКонтролирующиеОрганы.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваОтветовНаТребования КАК СвойстваОтветовНаТребования
	|		ПО ЖурналОтправокВКонтролирующиеОрганы.Ссылка = СвойстваОтветовНаТребования.Ссылка
	|ГДЕ
	|	НЕ ЖурналОтправокВКонтролирующиеОрганы.Скрыт
	|	И ЖурналОтправокВКонтролирующиеОрганы.Ссылка ССЫЛКА Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов
	|	И ЖурналОтправокВКонтролирующиеОрганы.СтраницаЖурнала = ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Входящие)
	|	И ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ТребуетсяПодтверждениеПриема)";
	
	ДобавитьОтборПоОрганизации(Запрос, Организация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция ТребующиеСкорогоОтвета(Организация = Неопределено, КоличествоДней = 2) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка КАК Ссылка,
	|	СвойстваОтветовНаТребования.ОтветитьДо КАК ОтветитьДо,
	|	СвойстваОтветовНаТребования.ДатаОтветаИзмененная КАК ДатаОтветаИзмененная
	|ИЗ
	|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваОтветовНаТребования КАК СвойстваОтветовНаТребования
	|		ПО ЖурналОтправокВКонтролирующиеОрганы.Ссылка = СвойстваОтветовНаТребования.Ссылка
	|ГДЕ
	|	НЕ ЖурналОтправокВКонтролирующиеОрганы.Скрыт
	|	И ЖурналОтправокВКонтролирующиеОрганы.Ссылка ССЫЛКА Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов
	|	И ЖурналОтправокВКонтролирующиеОрганы.СтраницаЖурнала = ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Входящие)
	|	И ЖурналОтправокВКонтролирующиеОрганы.ЕстьОтвет = ЛОЖЬ
	|	И ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПриемПодтвержден)
	|	И СвойстваОтветовНаТребования.ТребуетОтвета
	|	И НЕ СвойстваОтветовНаТребования.ОтветУжеДан";
	
	ДобавитьОтборПоОрганизации(Запрос, Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Требования = Новый Массив;
	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.ДатаОтветаИзмененная) Тогда
			ДатаОтвета = Выборка.ДатаОтветаИзмененная;
		Иначе
			ДатаОтвета = Выборка.ОтветитьДо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаОтвета) Тогда
			Продолжить;
		КонецЕсли;
	
		РазностьДней = РазностьДатПоКалендарю(Сегодня, ДатаОтвета).Дельта;
		Если РазностьДней <= КоличествоДней И РазностьДней >-60 Тогда
			Требования.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Требования;
	
КонецФункции

Функция КоличествоТребованийИУведомлений(
		МассивСообщений,
		Организация,
		ТаблицаСообщений = Неопределено,
		ПараметрыПоказа = Неопределено) Экспорт
	
	Требований  = 0;
	Уведомлений = 0;
	СписокТребований = Новый Массив;
	КНДОписи = "1184002";
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если ТаблицаСообщений <> Неопределено И ПараметрыПоказа <> Неопределено
		И ПараметрыПоказа.ПоказДляДругихПользователей Тогда
		
		ПараметрыПоказа.Вставить("СообщенийСТребованиямиУведомлениями", 0);
		Для каждого СтрокаСвойствПользователя Из ПараметрыПоказа.СвойстваПользователей Цикл
			СтрокаСвойствПользователя.Вставить("Требований", 							0);
			СтрокаСвойствПользователя.Вставить("Уведомлений", 							0);
			СтрокаСвойствПользователя.Вставить("СообщенийСТребованиямиУведомлениями", 	0);
		КонецЦикла;
	КонецЕсли;
	
	Сообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСообщений, "Тип,УчетнаяЗапись");
	
	Для каждого Сообщение Из Сообщения Цикл
		
		Если Сообщение.Значение["Тип"] <> Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сообщение.Значение["УчетнаяЗапись"] <> Организация.УчетнаяЗаписьОбмена Тогда
			Продолжить;
		КонецЕсли;
		
		Контейнеры = КонтекстЭДОСервер.ПолучитьТранспортныйКонтейнер(
			Сообщение.Ключ,
			Истина);
		
		Если НЕ ЗначениеЗаполнено(Контейнеры) ИЛИ Контейнеры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
		
		ДанныеКонтейнера = Контейнеры[0].Данные.Получить();
		Если ДанныеКонтейнера = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеКонтейнера.Записать(ИмяФайлаКонтейнера);
		
		Попытка
			// распаковываем файл описания сведений архива
			ИмяФайлаОписанияСведений = "packageDescription.xml";
			ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяФайлаКонтейнера);
			ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияСведений);
			Если ЭлементОписаниеСведений = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КаталогРаспаковки = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
			ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(КаталогРаспаковки + ИмяФайлаОписанияСведений);
			ЧтениеXML.ПерейтиКСодержимому();
			
			Фабрика = ФабрикаXDTO;
			Содержимое  = Фабрика.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
		Исключение
			ДокументооборотСКО.ОбработатьИсключение(ИнформацияОбОшибке(), "Получение количества требований и уведомлений в нерасшифрованных сообщениях для " + Контейнеры[0].ИмяФайла);
			Продолжить;
		КонецПопытки;
		
		ТребованийНаНачало = Требований;
		УведомленийНаНачало = Уведомлений;
		УзелДокументы = Содержимое.документ;
		Для каждого Документ Из УзелДокументы Цикл
			Имя = Документ.исходноеИмяФайла;
			
			ЭтоТребованиеПояснения = Лев(Имя, 7) = "1165050";
			ЭтоТребованиеДокументов = Лев(Имя, 7) = "1165013";
			
			Если ЭтоТребованиеПояснения ИЛИ ЭтоТребованиеДокументов Тогда
				Требований = Требований + 1;
				Если СписокТребований <> Неопределено Тогда
					СписокТребований.Добавить(Сообщение.Ключ);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Части = СтрРазделить(Имя, "_");
			ЭтоУведомление = Части.Количество() > 0 И СтрДлина(Части[0]) = 7 И Части[0] <> КНДОписи;
			Если ЭтоУведомление Тогда
				Уведомлений = Уведомлений + 1;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСообщений <> Неопределено И ПараметрыПоказа <> Неопределено
			И ПараметрыПоказа.ПоказДляДругихПользователей И
			(Требований > ТребованийНаНачало ИЛИ Уведомлений > УведомленийНаНачало) Тогда
			
			СтрокаТаблицы = ТаблицаСообщений.Найти(Сообщение.Ключ, "ТранспортноеСообщение");
			Если СтрокаТаблицы <> Неопределено И ТипЗнч(СтрокаТаблицы.МассивВладельцев) = Тип("Массив") Тогда
				Для каждого Владелец Из СтрокаТаблицы.МассивВладельцев Цикл
					ИндексПользователя = ПараметрыПоказа.Пользователи.Найти(Владелец);
					Если ИндексПользователя = Неопределено Тогда
						ПараметрыПоказа.Пользователи.Добавить(Владелец);
						СтрокаСвойствПользователя = Новый Структура;
						СтрокаСвойствПользователя.Вставить("Пользователь", 							Владелец);
						СтрокаСвойствПользователя.Вставить("СообщенийПоКатегориям", 				Новый Соответствие);
						СтрокаСвойствПользователя.Вставить("Требований", 							0);
						СтрокаСвойствПользователя.Вставить("Уведомлений", 							0);
						СтрокаСвойствПользователя.Вставить("СообщенийСТребованиямиУведомлениями", 	0);
						ПараметрыПоказа.СвойстваПользователей.Добавить(СтрокаСвойствПользователя);
						ИндексПользователя = ПараметрыПоказа.Пользователи.Количество() - 1;
					КонецЕсли;
					ПараметрыПоказа.СвойстваПользователей[ИндексПользователя].Требований =
						ПараметрыПоказа.СвойстваПользователей[ИндексПользователя].Требований + (Требований - ТребованийНаНачало);
					ПараметрыПоказа.СвойстваПользователей[ИндексПользователя].Уведомлений =
						ПараметрыПоказа.СвойстваПользователей[ИндексПользователя].Уведомлений + (Уведомлений - УведомленийНаНачало);
					ПараметрыПоказа.СвойстваПользователей[ИндексПользователя].СообщенийСТребованиямиУведомлениями =
						ПараметрыПоказа.СвойстваПользователей[ИндексПользователя].СообщенийСТребованиямиУведомлениями + 1;
				КонецЦикла;
			КонецЕсли;
			ПараметрыПоказа.СообщенийСТребованиямиУведомлениями = ПараметрыПоказа.СообщенийСТребованиямиУведомлениями + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("Требований", Требований);
	Результат.Вставить("Уведомлений", Уведомлений);
	Результат.Вставить("СписокТребований", СписокТребований);
	
	Возврат Результат;
	
КонецФункции

// Метод перерасчитывает срок отправки подтверждения и ответа на требования от ФНС за изменившийся год
// Вызывается из метода КалендарныеГрафикиПереопределяемый.ПриОбновленииДанныхЗависимыхОтПроизводственныхКалендарей
// 
// Параметры:
//  УсловияОбновления - ТаблицаЗначений:
//    * КодПроизводственногоКалендаря - Строка - код производственного календаря, данные которого изменились;
//    * Год                           - Число  - календарный год, за который изменились данные.
//
Процедура ПриОбновленииКалендаря(УсловияОбновления) Экспорт
	
	Для каждого Условие Из УсловияОбновления Цикл
		
		Календарь = ТребованияФНСВызовСервера.ПроизводственныйКалендарь();
		Если Календарь.Код <> Условие.КодПроизводственногоКалендаря Тогда
			Продолжить;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СвойстваОтветовНаТребования.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.СвойстваОтветовНаТребования КАК СвойстваОтветовНаТребования
			|ГДЕ
			|	(ГОД(СвойстваОтветовНаТребования.ПодтвердитьДо) = &Год
			|			ИЛИ ГОД(СвойстваОтветовНаТребования.ОтветитьДо) = &Год
			|			ИЛИ ГОД(СвойстваОтветовНаТребования.ДатаОтправкиТребования) = &Год)
			|	И СвойстваОтветовНаТребования.КалендарьБылНезаполнен
			|	И (СвойстваОтветовНаТребования.ДатаПодтверждения = ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
			|			ИЛИ СвойстваОтветовНаТребования.ТребуетОтвета
			|				И СвойстваОтветовНаТребования.КоличествоОтветов = 0)";
		
		Запрос.УстановитьПараметр("Год", Условие.Год);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаписатьВРегистрИзвлеченныеДанныеТребований(Выборка.Ссылка);
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеПодтверждения(Состояние, Сейчас) Экспорт
	
	ВыделитьКрасным = Ложь;
	ДобавитьОгонек  = Ложь;
	Представление = "";
	ПредставлениеДляТаблицы = "";
	Осталось = 0;
	
	ПодтверждениеОтправилОператор = ТребованияФНСВызовСервера.ПодтверждениеОтправилОператор(Состояние.Ссылка);
	
	// подтверждение
	Если ПодтверждениеОтправилОператор Тогда
		
		Представление = НСтр("ru = 'Срок отправки не регламентирован';
							|en = 'Срок отправки не регламентирован'");
		ПредставлениеДляТаблицы = НСтр("ru = 'Срок подтверждения не регламентирован (N 259-ФЗ от 08.08.2024 г.)';
										|en = 'Срок подтверждения не регламентирован (N 259-ФЗ от 08.08.2024 г.)'");
		
	ИначеЕсли Состояние.ОсталосьДоПодтверждения = 0 И НЕ Состояние.Подтвержден Тогда
		
		ВыделитьКрасным = Истина;
		Представление = ОсталосьЧасовПредставление(Сейчас);
			
		ПредставлениеДляТаблицы = Представление + НСтр("ru = ' до подтверждения';
														|en = ' до подтверждения'");
		
		Осталось = Состояние.ОсталосьДоПодтверждения;
		
	ИначеЕсли Состояние.ОсталосьДоПодтверждения < 0 И НЕ Состояние.Подтвержден Тогда
		
		ШаблонДней = ";%1 день;;%1 дня;%1 дней;%1 дня";
		ПредставлениеДней = ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, -Состояние.ОсталосьДоПодтверждения);
		
		ДобавитьОгонек  = Истина;
		ВыделитьКрасным = Истина;
		Представление = НСтр("ru = 'Не отправлено, просрочено на %1 (до %2)';
							|en = 'Не отправлено, просрочено на %1 (до %2)'");
		Представление = СтрШаблон(
			Представление,
			ПредставлениеДней,
			Формат(Состояние.ПодтвердитьДо, "ДФ=dd.MM.yyyy"));
			
		ПредставлениеДляТаблицы = НСтр("ru = 'Подтверждение просрочено на %1';
										|en = 'Подтверждение просрочено на %1'");
		ПредставлениеДляТаблицы = СтрШаблон(ПредставлениеДляТаблицы, ПредставлениеДней);
		
		Осталось = Состояние.ОсталосьДоПодтверждения;
								
	ИначеЕсли НЕ Состояние.Подтвержден Тогда
		
		ШаблонДней = ";%1 день;;%1 дня;%1 дней;%1 дня";
		
		ВыделитьКрасным = Истина;
		Представление = НСтр("ru = 'Отправить до %1 (еще %2)';
							|en = 'Отправить до %1 (еще %2)'");
		Представление = СтрШаблон(
			Представление, 
			Формат(Состояние.ПодтвердитьДо, "ДФ=dd.MM.yyyy"),
			ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, Состояние.ОсталосьДоПодтверждения));
			
		ШаблонДней = ";%1 дня;;%1 дней;%1 дней;%1 дней";	
		ПредставлениеДляТаблицы = НСтр("ru = 'Подтвердите в течение %1';
										|en = 'Подтвердите в течение %1'");
		ПредставлениеДляТаблицы = СтрШаблон(
			ПредставлениеДляТаблицы,
			ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, Состояние.ОсталосьДоПодтверждения));
			
		Осталось = Состояние.ОсталосьДоПодтверждения;
			
	ИначеЕсли Состояние.Подтвержден И Состояние.ПодтверждениеПросроченоНа > 0 Тогда
		
		ШаблонДней = ";%1 день;;%1 дня;%1 дней;%1 дня";
		
		Представление = НСтр("ru = 'Отправлено %2, просрочено на %1';
							|en = 'Отправлено %2, просрочено на %1'");
		Представление = СтрШаблон(
			Представление,
			ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, -Состояние.ОсталосьДоПодтверждения),
			Формат(Состояние.ДатаПодтверждения, "ДФ=dd.MM.yyyy"));
			
	Иначе
			
		Представление = НСтр("ru = 'Отправлено в срок %1';
							|en = 'Отправлено в срок %1'");
		Представление = СтрШаблон(
			Представление, 
			Формат(Состояние.ДатаПодтверждения, "ДФ=dd.MM.yyyy"));
			
	КонецЕсли;
	
	Если ВыделитьКрасным Тогда
		Представление = ВыделитьКрасным(Представление);
	КонецЕсли;
	
	Результат  = Новый Структура();
	Результат.Вставить("ДобавитьОгонек", ДобавитьОгонек);
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("ПредставлениеДляТаблицы", ПредставлениеДляТаблицы);
	Результат.Вставить("Осталось", Осталось);
	Результат.Вставить("ПодтверждениеОтправилОператор", ПодтверждениеОтправилОператор);
	
	Возврат Результат;
	
КонецФункции

Функция ВыделитьКрасным(Знач Текст) Экспорт
	
	Красный = "ЦветОшибкиОтправкиБРО";
	Текст = СтрШаблон("<span style=""color: %1"">", Красный) + Текст + "</span>";
	Возврат Текст;
	
КонецФункции

Функция ПредставлениеСсылкиОтветов(Состояние) Экспорт
	
	Количество = Состояние.КоличествоОтветов;
	
	Если Количество = 0 Тогда
		Возврат НСтр("ru = 'Ответы';
					|en = 'Ответы'");
	Иначе
		Представление = СтрШаблон(НСтр("ru = 'Ответы (%1)';
										|en = 'Ответы (%1)'"), Количество);
		Возврат Представление;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОтвета(Состояние, Сейчас) Экспорт
	
	ВыделитьКрасным = Ложь;
	ПоказатьОтветы  = Ложь;
	ДобавитьОгонек  = Ложь;
	Представление = "";
	ПредставлениеДляТаблицы = "";
	Осталось = 0;
	ПредставлениеСсылки = НСтр("ru = 'Ответы';
								|en = 'Ответы'");
	
	ЕстьОтправленныйОтвет = 
		Состояние.Подтвержден 
		И Состояние.ЕстьОтвет 
		И Состояние.ЕстьОтправленныеОтветы;
		
	Если Состояние.ОтветУжеДан Тогда // В другой программе или другим способом
		
		Представление = НСтр("ru = 'Ответ уже дан';
							|en = 'Ответ уже дан'");
		
	ИначеЕсли НЕ Состояние.ТребуетОтвета Тогда
		
		Представление = НСтр("ru = 'Не требует ответа';
							|en = 'Не требует ответа'");
		
	ИначеЕсли НЕ Состояние.Подтвержден Тогда
		
		ВыделитьКрасным = Истина;
		
		ШаблонДней = ";%1 дня;;%1 дней;%1 дней;%1 дней";
		Представление = НСтр("ru = 'Отправить в течение %1 после подтверждения';
							|en = 'Отправить в течение %1 после подтверждения'");
		Представление = СтрШаблон(
			Представление,
			ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, Состояние.ДнейДоОтвета));
		
	ИначеЕсли Состояние.ОсталосьДоОтвета = 0 И Состояние.Подтвержден И НЕ ЕстьОтправленныйОтвет Тогда
		
		ВыделитьКрасным = Истина;
		
		Представление = ОсталосьЧасовПредставление(Сейчас);
		ПредставлениеДляТаблицы = Представление + " " + НСтр("ru = 'до ответа';
															|en = 'до ответа'");
		
	ИначеЕсли Состояние.ОсталосьДоОтвета < 0 И Состояние.Подтвержден И НЕ ЕстьОтправленныйОтвет Тогда
		
		ШаблонДней = ";%1 день;;%1 дня;%1 дней;%1 дня";
		ПредставлениеДней = ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, -Состояние.ОсталосьДоОтвета);
		
		ВыделитьКрасным = Истина;
		ДобавитьОгонек  = Истина;
		Представление = НСтр("ru = 'Не отправлен, просрочен на %1 (до %2)';
							|en = 'Не отправлен, просрочен на %1 (до %2)'");
		Представление = СтрШаблон(
			Представление, 
			ПредставлениеДней,
			Формат(Состояние.ОтветитьДо, "ДФ=dd.MM.yyyy"));
			
		ПредставлениеДляТаблицы = НСтр("ru = 'Ответ просрочен на %1';
										|en = 'Ответ просрочен на %1'");
		ПредставлениеДляТаблицы = СтрШаблон(ПредставлениеДляТаблицы, ПредставлениеДней);
		
		Осталось = Состояние.ОсталосьДоОтвета;
			
	ИначеЕсли Состояние.ОсталосьДоОтвета < 0 И ЕстьОтправленныйОтвет Тогда
		
		ШаблонДней = ";%1 день;;%1 дня;%1 дней;%1 дня";
		
		ПоказатьОтветы  = Истина;
		ПредставлениеСсылки = ПредставлениеСсылкиОтветов(Состояние);
		Представление = НСтр("ru = 'Отправлен, просрочен на %1.';
							|en = 'Отправлен, просрочен на %1.'");
		Представление = СтрШаблон(
			Представление, 
			ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, -Состояние.ОсталосьДоОтвета));
			
	ИначеЕсли Состояние.Подтвержден И НЕ ЕстьОтправленныйОтвет Тогда
		
		ВыделитьКрасным = Истина;
		
		ШаблонДней = ";%1 день;;%1 дня;%1 дней;%1 дня";
		
		Представление = НСтр("ru = 'Отправить до %1 (еще %2)';
							|en = 'Отправить до %1 (еще %2)'");
		Представление = СтрШаблон(
			Представление, 
			Формат(Состояние.ОтветитьДо, "ДФ=dd.MM.yyyy"),
			ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, Состояние.ОсталосьДоОтвета));
			
		ШаблонДней = ";%1 дня;;%1 дней;%1 дней;%1 дней";	
		ПредставлениеДляТаблицы = НСтр("ru = 'Ответьте в течение %1';
										|en = 'Ответьте в течение %1'");
		ПредставлениеДляТаблицы = СтрШаблон(
			ПредставлениеДляТаблицы,
			ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонДней, Состояние.ОсталосьДоОтвета));
			
		Осталось = Состояние.ОсталосьДоОтвета;
		
	ИначеЕсли ЗначениеЗаполнено(Состояние.ДатаОтвета) И ЕстьОтправленныйОтвет Тогда 
			
		ПоказатьОтветы  = Истина;
		ПредставлениеСсылки = ПредставлениеСсылкиОтветов(Состояние);
		Представление = НСтр("ru = 'Отправлен в срок %1.';
							|en = 'Отправлен в срок %1.'");
		Представление = СтрШаблон(
			Представление, 
			Формат(Состояние.ДатаОтвета, "ДФ=dd.MM.yyyy"));
			
		Если Состояние.ОтветНеПринят Тогда
			ВыделитьКрасным = Истина;
			Представление = Представление + НСтр("ru = ', не принят';
												|en = ', не принят'");
		КонецЕсли;
		
	ИначеЕсли Состояние.ЕстьОтправленныеОтветы Тогда
		
		ПоказатьОтветы  = Истина;
		ПредставлениеСсылки = НСтр("ru = 'Ответы';
									|en = 'Ответы'");
		Представление = НСтр("ru = 'Отправлен.';
							|en = 'Отправлен.'");
		
	Иначе
		
		ПоказатьОтветы  = Истина;
		ПредставлениеСсылки = НСтр("ru = 'Ответы';
									|en = 'Ответы'");
		Представление = НСтр("ru = 'Подготовлен.';
							|en = 'Подготовлен.'");
			
	КонецЕсли;
	
	Если Состояние.Подтвержден И Состояние.ЕстьОтвет Тогда
		ПредставлениеСсылки = ПредставлениеСсылкиОтветов(Состояние);
		ПоказатьОтветы  = Истина;
	КонецЕсли;
	
	Если ВыделитьКрасным Тогда
		Представление = ВыделитьКрасным(Представление);
	КонецЕсли;
	
	Результат  = Новый Структура();
	Результат.Вставить("ПоказатьОтветы", ПоказатьОтветы);
	Результат.Вставить("ДобавитьОгонек", ДобавитьОгонек);
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("ПредставлениеДляТаблицы", ПредставлениеДляТаблицы);
	Результат.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
	Результат.Вставить("Осталось", Осталось);
	
	Возврат Результат;

КонецФункции

Функция ЕстьОтправленныеОтветы(Требование, ВключаяНевозможностьПредоставленияДокументов = Истина) Экспорт
	
	Возврат ТребованияФНСПовтИсп.ПолучитьКоличествоОтветовНаТребования(Требование, Истина, ВключаяНевозможностьПредоставленияДокументов)[Требование] > 0
	
КонецФункции

Функция РасширенноеСостояниеПодтвержденияИОтвета(Требование, Сейчас) Экспорт
	
	Ответы = ОтветыНаТребование(Требование);
	
	Результат = ДанныеРегистраИзвлеченныеДанныеТребований(Требование);
	
	Если ЗначениеЗаполнено(Результат.ПодтвердитьДо) Тогда
		РазностьДней = РазностьДнейИсправленная(Результат, Сейчас);
		Результат.Вставить("ОсталосьДоПодтверждения", РазностьДней);
	КонецЕсли;

	ПодтверждениеОтправилОператор = ТребованияФНСВызовСервера.ПодтверждениеОтправилОператор(Требование);
	Результат.Вставить("Подтвержден", ЗначениеЗаполнено(Результат.ДатаПодтверждения) ИЛИ ПодтверждениеОтправилОператор);
	
	Если Результат.Подтвержден Тогда
		
		Если ЗначениеЗаполнено(Результат.ДатаОтветаИзмененная) Тогда
			ОтветитьДо = Результат.ДатаОтветаИзмененная;
		Иначе
			ОтветитьДо = Результат.ОтветитьДо;
		КонецЕсли;
		Результат.Вставить("ОтветитьДо", ОтветитьДо);
		
		Результат.Вставить("ЕстьОтвет", Результат.КоличествоОтветов > 0);
		
		Если Результат.ЕстьОтвет И ЗначениеЗаполнено(Результат.ДатаОтвета) Тогда
			РазностьДней = РазностьДатПоКалендарю(Результат.ДатаОтвета, Результат.ОтветитьДо).Дельта;
		Иначе
			РазностьДней = РазностьДатПоКалендарю(Сейчас, Результат.ОтветитьДо).Дельта;
		КонецЕсли;
		Результат.Вставить("ОсталосьДоОтвета", РазностьДней);
		
		Если ПодтверждениеОтправилОператор Тогда
			РазностьДней = 0;
		Иначе
			РазностьДней = РазностьДатПоКалендарю(Результат.ПодтвердитьДо, Результат.ДатаПодтверждения).Дельта;
		КонецЕсли;
		
		Результат.Вставить("ПодтверждениеПросроченоНа", РазностьДней);
		
	КонецЕсли;
	
	Результат.Вставить("ЕстьОтправленныеОтветы", ЕстьОтправленныеОтветы(Требование, Ложь));
	Результат.Вставить("ПодтверждениеОтправилОператор", ПодтверждениеОтправилОператор);
	
	Результат.ТребуетОтвета = 
		Результат.ТребуетОтвета 
		И НЕ Результат.ОтветУжеДан; // В другой программе или другим способом
	
	Возврат Результат;
	
КонецФункции

Функция РазностьДнейИсправленная(Данные, Сегодня) Экспорт
	
	РазностьДней = РазностьДатПоКалендарю(Сегодня, Данные.ПодтвердитьДо).Дельта;
	Если РазностьДней < -5000 Тогда
		
		ЗначенияЗаполнения = Новый Структура();
		ДобавитьНовуюДатуПодтверждения(Данные.Ссылка, ЗначенияЗаполнения);
		
		Если ЗначенияЗаполнения.Количество() <> 0 Тогда
			ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Данные.Ссылка, ЗначенияЗаполнения);
		КонецЕсли;
		
		НовыеДанные  = ДанныеРегистраИзвлеченныеДанныеТребований(Данные.Ссылка);
		РазностьДней = РазностьДатПоКалендарю(Сегодня, НовыеДанные.ПодтвердитьДо).Дельта;
		
	КонецЕсли;
	
	Возврат РазностьДней;
	
КонецФункции

Функция ДобавитьНовуюДатуПодтверждения(Ссылка, ЗначенияЗаполнения) Экспорт
	
	ДатаОтправкиТребования = ДатаОтправкиТребования(Ссылка);
	
	Если ЗначениеЗаполнено(ДатаОтправкиТребования) Тогда 
		ПодтвердитьДо = ДатаПодтверждения(ДатаОтправкиТребования);
		
		ЗначенияЗаполнения.Вставить("ДатаОтправкиТребования", ДатаОтправкиТребования);
		ЗначенияЗаполнения.Вставить("ПодтвердитьДо", ПодтвердитьДо);
	КонецЕсли;
	
КонецФункции

// Обработчик обновления БРО 1.2.1
Функция ЗаполнитьВидДокументаВЖурналеОтправокВКонтролирующиеОрганы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|ГДЕ
		|	ЖурналОтправокВКонтролирующиеОрганы.СтраницаЖурнала = ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Входящие)
		|	И ЖурналОтправокВКонтролирующиеОрганы.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовВЖурнале.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидДокумента = ВидДокументаВЖурналеОтправокВКонтролирующиеОрганы(Выборка.Ссылка);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИзменитьЗначениеВФорме1СОтчетность(
			Выборка.Ссылка, "ВидДокумента", ВидДокумента);
		
	КонецЦикла;
	
КонецФункции

Функция ВидДокументаВЖурналеОтправокВКонтролирующиеОрганы(Ссылка, ИскатьВКэше = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами")
		И Ссылка.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСРПН Тогда
		Возврат Перечисления.ВидыДокументовВЖурнале.ВходящееПисьмо;
	КонецЕсли;
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Ссылка);
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИскатьВКэше Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЖурналОтправокВКонтролирующиеОрганы.ВидДокумента КАК ВидДокумента
			|ИЗ
			|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
			|ГДЕ
			|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ВидДокумента) Тогда
			// ВидДокумента не перезаписываем
			Возврат Выборка.ВидДокумента;
		КонецЕсли;
		
	КонецЕсли;

	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка
		ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаПФР
		ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаФСГС
		ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаШаблоновФСГС Тогда
		
		ВидДокумента = Перечисления.ВидыДокументовВЖурнале.Рассылка;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		
		ВидДокумента = Перечисления.ВидыДокументовВЖурнале.ТребованиеИлиУведомление;
		
	Иначе
		
		ВидДокумента = Перечисления.ВидыДокументовВЖурнале.ВходящееПисьмо;
		
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

Процедура ДобавитьОтборВЗапросЖурнала(Запрос, Имя, ЗначенеОтбора) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ЗапросВыбора.Операторы[0];
	Запрос.УстановитьПараметр(Имя, ЗначенеОтбора);
	Оператор.Отбор.Добавить("ЖурналОтправокВКонтролирующиеОрганы." + Имя + " = &" + Имя);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура ДобавитьОтборПоОрганизации(Запрос, Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		
		ДобавитьОтборВЗапросЖурнала(Запрос, "Организация", Организация);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтветыНаТребование(
		ТребованиеСсылка, 
		ТолькоОтправленные = Ложь, 
		ВключаяНевозможностьПредоставленияДокументов = Истина) Экспорт
	
	МассивИзОдного = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТребованиеСсылка);
	Ответы = ОтветыНаТребования(
		МассивИзОдного, 
		ТолькоОтправленные, 
		ВключаяНевозможностьПредоставленияДокументов);
	
	Возврат Ответы.ВыгрузитьКолонку("Ответ");
	
КонецФункции

Функция ТребованияБезНеподходящих(Требования)
	
	Результат = ОбщегоНазначения.СкопироватьРекурсивно(Требования);
	
	ТекущийИндекс = Результат.ВГраница();
	
	Пока ТекущийИндекс >= 0 Цикл
		
		Если ТипЗнч(Результат[ТекущийИндекс]) = Тип("СправочникСсылка.УдалитьПерепискаСКонтролирующимиОрганами") Тогда
			Результат.Удалить(ТекущийИндекс);
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс - 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтветыНаТребования(
		Требования, 
		ТолькоОтправленные = Ложь, 
		ВключаяНевозможностьПредоставленияДокументов = Истина) Экспорт
	
	МассивОтветов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОписиИсходящихДокументовВНалоговыеОрганы.Основание КАК Требование,
		|	ОписиИсходящихДокументовВНалоговыеОрганы.Ссылка КАК Ответ
		|ПОМЕСТИТЬ ТребованияИОтветы
		|ИЗ
		|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы КАК ОписиИсходящихДокументовВНалоговыеОрганы
		|ГДЕ
		|	ОписиИсходящихДокументовВНалоговыеОрганы.Основание В(&Требования)
		|	И НЕ ОписиИсходящихДокументовВНалоговыеОрганы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоясненияКДекларацииПоНДС.Требование,
		|	ПоясненияКДекларацииПоНДС.Ссылка
		|ИЗ
		|	Документ.ПоясненияКДекларацииПоНДС КАК ПоясненияКДекларацииПоНДС
		|ГДЕ
		|	ПоясненияКДекларацииПоНДС.Требование В(&Требования)
		|	И НЕ ПоясненияКДекларацииПоНДС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПерепискаСКонтролирующимиОрганами.Требование,
		|	ПерепискаСКонтролирующимиОрганами.Ссылка
		|ИЗ
		|	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
		|ГДЕ
		|	ПерепискаСКонтролирующимиОрганами.Требование В(&Требования)
		|	И НЕ ПерепискаСКонтролирующимиОрганами.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(УведомлениеОСпецрежимахНалогообложения.Основание КАК Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов),
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	ВЫРАЗИТЬ(УведомлениеОСпецрежимахНалогообложения.Основание КАК Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов) В (&Требования)
		|	И НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления
		|	И (УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.РеестрЛьготИмущество)
		|			ИЛИ УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы)
		|			ИЛИ &ВключаяНевозможностьПредоставленияДокументов
		|				И УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Требования.Ссылка,
		|	ПерепискаСКонтролирующимиОрганами.Ссылка
		|ИЗ
		|	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПерепискаСКонтролирующимиОрганами КАК Требования
		|		ПО ПерепискаСКонтролирующимиОрганами.ИдентификаторОснования = Требования.Идентификатор
		|ГДЕ
		|	Требования.Ссылка В(&Требования)
		|	И НЕ ПерепискаСКонтролирующимиОрганами.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТребованияИОтветы.Ответ КАК Ответ,
		|	ТребованияИОтветы.Требование КАК Требование
		|ИЗ
		|	ТребованияИОтветы КАК ТребованияИОтветы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		|		ПО (СтатусыОтправки.Объект = ТребованияИОтветы.Ответ)
		|ГДЕ
		|	(&ТолькоОтправленные
		|				И ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ВКонверте)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ВКонверте)
		|			ИЛИ НЕ &ТолькоОтправленные)";
	
	ПроверяемыеТребования = ТребованияБезНеподходящих(Требования);
	
	Запрос.УстановитьПараметр("Требования", ПроверяемыеТребования);
	Запрос.УстановитьПараметр("ТолькоОтправленные", ТолькоОтправленные);
	Запрос.УстановитьПараметр("ВключаяНевозможностьПредоставленияДокументов", ВключаяНевозможностьПредоставленияДокументов);
	
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции

Функция ДатаПодтверждения(ДатаОтправкиТребования) Экспорт
	
	// Квитанцию о приеме требования следует отправить в течение шести рабочих дней со дня его отправки налоговым органом (п. 5.1 ст. 23 НК РФ).
	Возврат ДатаПлюсДниПоКалендарю(ДатаОтправкиТребования, 6).Дата;
	
КонецФункции

Функция СрокНерасшифрованногоТребования(ДатаОтправкиТребования) Экспорт
	
	Если ДатаОтправкиТребования >= ТребованияФНСВызовСервера.ДатаОтменыПодтверждений() Тогда
		// Минимальный срок ответа на требование:
		// 6 рабочих дней + 5 рабочих дней (минимальное количество дней, которое может быть указано в требовании).
		Возврат ДатаПлюсДниПоКалендарю(ДатаОтправкиТребования, 11).Дата;
	Иначе
		Возврат ДатаПодтверждения(ДатаОтправкиТребования);
	КонецЕсли;
	
КонецФункции

Функция НерасшифрованныеТребованияФНС(Организация, НачалоОбзора, КонецОбзора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваТранспортныхСообщений.ТранспортноеСообщение КАК ТранспортноеСообщение,
	|	СвойстваТранспортныхСообщений.ТранспортноеСообщение.Дата КАК ТранспортноеСообщениеДата
	|ИЗ
	|	РегистрСведений.СвойстваТранспортныхСообщений КАК СвойстваТранспортныхСообщений
	|ГДЕ
	|	СвойстваТранспортныхСообщений.УчетнаяЗапись В(&УчетныеЗаписи)
	|	И СвойстваТранспортныхСообщений.ТребуетРасшифровки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТранспортноеСообщениеДата";
	
	УчетныеЗаписи = Новый Массив;
	УчетныеЗаписи.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "УчетнаяЗаписьОбмена"));
	Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписи);
	Запрос.УстановитьПараметр("НачалоОбзора", НачалоОбзора);
	Запрос.УстановитьПараметр("КонецОбзора", КонецОбзора);

	Выборка = Запрос.Выполнить().Выбрать();
	ТребующиеРасшифровки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ТребующиеРасшифровки.Добавить(Выборка.ТранспортноеСообщение);
	КонецЦикла;
	
	СписокТребований = Новый Массив;
	Если ТребующиеРасшифровки.Количество()>0 Тогда
		СписокТребований = КоличествоТребованийИУведомлений(ТребующиеРасшифровки, Организация).СписокТребований;
		СписокТребований = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокТребований);
	КонецЕсли;
	
	Возврат СписокТребований;
	
КонецФункции

Функция ВыбратьТребованияФНС(Организация, НачалоОбзора, КонецОбзора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЖурналОтправокВКонтролирующиеОрганы.Организация КАК Организация,
		|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка КАК Ссылка,
		|	ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
		|	ЖурналОтправокВКонтролирующиеОрганы.СтатусОтправки КАК СтатусОтправки,
		|	ЖурналОтправокВКонтролирующиеОрганы.ДатаСоздания КАК Дата,
		|	ЖурналОтправокВКонтролирующиеОрганы.Наименование КАК Наименование,
		|	ЕСТЬNULL(СвойстваОтветовНаТребования.ПодтвердитьДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ПодтвердитьДо,
		|	ЕСТЬNULL(СвойстваОтветовНаТребования.ДатаПодтверждения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПодтверждения,
		|	ЕСТЬNULL(СвойстваОтветовНаТребования.ОтветитьДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтветитьДо,
		|	ЕСТЬNULL(СвойстваОтветовНаТребования.ДатаОтветаИзмененная, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтветаИзмененная,
		|	ЕСТЬNULL(СвойстваОтветовНаТребования.ДатаОтвета, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтвета,
		|	ЕСТЬNULL(СвойстваОтветовНаТребования.ТребуетОтвета, ЛОЖЬ) КАК ТребуетОтвета,
		|	ЕСТЬNULL(СвойстваОтветовНаТребования.ПодтверждениеОтправилОператор, ЛОЖЬ) КАК ПодтверждениеОтправилОператор
		|ПОМЕСТИТЬ Входящие
		|ИЗ
		|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваОтветовНаТребования КАК СвойстваОтветовНаТребования
		|		ПО ЖурналОтправокВКонтролирующиеОрганы.Ссылка = СвойстваОтветовНаТребования.Ссылка
		|			И (ЖурналОтправокВКонтролирующиеОрганы.ВидКонтролирующегоОргана = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФНС))
		|ГДЕ
		|	ЖурналОтправокВКонтролирующиеОрганы.Организация = &Организация
		|	И ЖурналОтправокВКонтролирующиеОрганы.СтраницаЖурнала = ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Входящие)
		|	И ЖурналОтправокВКонтролирующиеОрганы.ВидКонтролирующегоОргана = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФНС)
		|	И ВЫРАЗИТЬ(ЖурналОтправокВКонтролирующиеОрганы.Ссылка КАК Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов).ВидДокумента В (&ВидыТребований)
		|	И НЕ ЖурналОтправокВКонтролирующиеОрганы.Скрыт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Входящие.Организация КАК Организация,
		|	Входящие.Ссылка КАК Правило,
		|	ЕСТЬNULL(Входящие.Ссылка.ДокументОснование.ИсточникОтчета, ЕСТЬNULL(Входящие.Ссылка.ДокументОснование.ИмяОтчета, """")) КАК ИсточникОтчета,
		|	Входящие.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
		|	Входящие.СтатусОтправки КАК СтатусОтправки,
		|	Входящие.Дата КАК Дата,
		|	Входящие.Наименование КАК Наименование,
		|	Входящие.ПодтвердитьДо КАК ПодтвердитьДо,
		|	Входящие.ДатаПодтверждения КАК ДатаПодтверждения,
		|	Входящие.ОтветитьДо КАК ОтветитьДо,
		|	Входящие.ДатаОтветаИзмененная КАК ДатаОтветаИзмененная,
		|	Входящие.ДатаОтвета КАК ДатаОтвета,
		|	Входящие.ТребуетОтвета КАК ТребуетОтвета,
		|	Входящие.ПодтверждениеОтправилОператор КАК ПодтверждениеОтправилОператор,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.ТребованиеФНС) КАК Действие
		|ИЗ
		|	Входящие КАК Входящие
		|ГДЕ
		|	(Входящие.ПодтвердитьДо МЕЖДУ &НачалоОбзора И &КонецОбзора
		|			ИЛИ Входящие.ОтветитьДо МЕЖДУ &НачалоОбзора И &КонецОбзора)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	ВидыТребований = Новый Массив;
	// Пока отбираем только два вида требований, именно на них обычно требуется ответ.
	ВидыТребований.Добавить(Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов);
	ВидыТребований.Добавить(Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ВидыТребований", ВидыТребований);
	Запрос.УстановитьПараметр("НачалоОбзора",   НачалоОбзора);
	Запрос.УстановитьПараметр("КонецОбзора",    КонецОбзора);
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти