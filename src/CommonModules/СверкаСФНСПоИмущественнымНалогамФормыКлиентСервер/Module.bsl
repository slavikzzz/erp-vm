 
////////////////////////////////////////////////////////////////////////////////
// СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер: клиентские и серверные процедуры и 
// функции, вызываемые из форм и модулей документа "Сверка с ФНС по имущественным налогам".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет дату, которая указана в регистре расчета налога за соответствующий налоговый период (год).
// 
// Параметры:
//  НалоговыйПериод - Дата - любая дата в налоговом периоде
// 
// Возвращаемое значение:
//  Дата - дата, на которую ожидаются записи в регистре расчете налога за указанный налоговый период
Функция ПериодРасчетаНалога(НалоговыйПериод) Экспорт
	
	// ПериодРасчета по результатам года всегда строго 31 декабря.
	Возврат Дата(Год(НалоговыйПериод), 12,31);
	
КонецФункции

// Возвращает период, в течение которого изменения в состоянии объектов могут быть не учтены в ФНС. 
// Это может привести к расхождениям в расчете налога. Поэтому объекты, по которым были какие-то события
// в этот период, могут потребовать особого внимания.
// 
// Параметры:
//  НалоговыйПериод - Дата - любая дата в налоговом периоде, за который выполняется сверка налога
// 
// Возвращаемое значение:
//  Дата - дата, после которой изменения в состоянии объектов требуют особого контроля
Функция ПериодИзмененийДляОсобогоКонтроля(НалоговыйПериод) Экспорт
	
	// По практике, изменения в регистрации или параметрах объектов, произошедшие в конце года, 
	// с бОльшей вероятностью могут "не дойти" до ФНС. Поэтому объекты, по которым изменения 
	// произошли в 4-м квартале отчетного года, требуют особого внимания.
	Возврат Дата(Год(НалоговыйПериод), 10, 1);
	
КонецФункции

// Возвращает период события в списке задач для задачи по сверке налога за указанный налоговый период.
// 
// Параметры:
//  НалоговыйПериод - Дата - любая дата в налоговом периоде, за который выполняется сверка налога
// 
// Возвращаемое значение:
//  Дата - период события в списке задач
Функция ПериодСобытияПоНалоговомуПериоду(НалоговыйПериод) Экспорт
	
	// ПериодСобытия для сверки в списке задач устанавливается на 31 декабря	
	Возврат Дата(Год(НалоговыйПериод), 12, 31);
	
КонецФункции

// Формирует или получает из кэша формы специальные параметры для переданной навигационной ссылки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой есть навигационная ссылка 
//  									на форме должен быть реквизит СпециальныеПараметрыНавигационнойСсылки.
//  НавигационнаяСсылка - Строка - навигационная ссылка, для которой нужно получить ее специальные параметры 
// 
// Возвращаемое значение:
//  Структура - см. СверкаСФНСПоИмущественнымНалогамФормы.НовыеСпециальныеПараметрыНавигационнойСсылки()
Функция ПрочитатьСпециальныеПараметрыНавигационнойСсылки(Форма, НавигационнаяСсылка) Экспорт

	СпециальныеПараметрыНавигационнойСсылки = Неопределено;
	Если Форма.ПараметрыНавигационныхСсылок.СпециальныеПараметры.Свойство(НавигационнаяСсылка) Тогда 
		СпециальныеПараметрыНавигационнойСсылки = Форма.ПараметрыНавигационныхСсылок.СпециальныеПараметры[НавигационнаяСсылка];
	КонецЕсли;

	Если СпециальныеПараметрыНавигационнойСсылки = Неопределено Тогда
		СпециальныеПараметрыНавигационнойСсылки = 
			СверкаСФНСПоИмущественнымНалогамФормыВызовСервера.СпециальныеПараметрыНавигационнойСсылки(
				НавигационнаяСсылка, Форма.ПараметрыНавигационныхСсылок.ОбщиеПараметры);
		Форма.ПараметрыНавигационныхСсылок.СпециальныеПараметры.Вставить(
			НавигационнаяСсылка,
			СпециальныеПараметрыНавигационнойСсылки);
	КонецЕсли;
	
	Возврат СпециальныеПараметрыНавигационнойСсылки;
	
КонецФункции

// Позволяет "точечно" установить отдельное свойство в специальных параметрах навигационной ссылки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой есть навигационная ссылка 
//  	(на форме должен быть реквизит СпециальныеПараметрыНавигационнойСсылки)
//  НавигационнаяСсылка - Строка - навигационная ссылка, для которой нужно установить параметр 
//  Параметр - Строка - имя свойства структуры СпециальныеПараметры (при отсутствии будет добавлено)
//  ЗначениеПараметра - Произвольный - устанавливаемое значение параметра
//  ОбновитьВсеПараметры - Булево - если Истина, то принудительно обновляются все специальные параметры
//  	навигационной ссылки, в ином случае - только если не были инициализированы ранее
// 
// Возвращаемое значение:
//  Булево - если Истина, то параметр установлен/обновлен, иначе - изменения не потребовались
Функция УстановитьСпециальныйПараметрНавигационнойСсылки(Форма, НавигационнаяСсылка, Параметр, ЗначениеПараметра, Знач ОбновитьВсеПараметры = Ложь) Экспорт

	ПараметрИзменен = Ложь; 
	
	СпециальныеПараметрыНавигационнойСсылки = Неопределено;
	Если Форма.ПараметрыНавигационныхСсылок.СпециальныеПараметры.Свойство(НавигационнаяСсылка) Тогда 
		СпециальныеПараметрыНавигационнойСсылки = Форма.ПараметрыНавигационныхСсылок.СпециальныеПараметры[НавигационнаяСсылка];
	КонецЕсли;

	Если СпециальныеПараметрыНавигационнойСсылки = Неопределено Тогда
		// Если специальные параметры еще не были инициализированы, то для полноты заполнения вызываем
		// обычное заполнение параметров.
		СпециальныеПараметрыНавигационнойСсылки = 
			СверкаСФНСПоИмущественнымНалогамФормыВызовСервера.СпециальныеПараметрыНавигационнойСсылки(
				НавигационнаяСсылка, Форма.ПараметрыНавигационныхСсылок.ОбщиеПараметры);
				
		ПараметрИзменен = Истина;
		ОбновитьВсеПараметры = Ложь; // уже обновили

	ИначеЕсли Не СпециальныеПараметрыНавигационнойСсылки.Свойство(Параметр)
		 Или СпециальныеПараметрыНавигационнойСсылки[Параметр] <> ЗначениеПараметра Тогда
		// Сообщим об изменении параметра 
		ПараметрИзменен = Истина;

	КонецЕсли;

	Если ОбновитьВсеПараметры Тогда
		СпециальныеПараметрыНавигационнойСсылки = 
			СверкаСФНСПоИмущественнымНалогамФормыВызовСервера.СпециальныеПараметрыНавигационнойСсылки(
				НавигационнаяСсылка, Форма.ПараметрыНавигационныхСсылок.ОбщиеПараметры);
	КонецЕсли;

	СпециальныеПараметрыНавигационнойСсылки.Вставить(Параметр, ЗначениеПараметра);

	Форма.ПараметрыНавигационныхСсылок.СпециальныеПараметры.Вставить(
		НавигационнаяСсылка,
		СпециальныеПараметрыНавигационнойСсылки);
		
	Возврат ПараметрИзменен;

КонецФункции

// Устанавливает необходимое действие по строке сверки на основании различий в расчетах.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой есть навигационная ссылка 
//  	(на форме должен быть реквизит СпециальныеПараметрыНавигационнойСсылки)
//  СтрокаРасчета - ДанныеФормыЭлементКоллекции - элемент коллекции строк таблицы сверки расчета
Процедура УстановитьДействиеНаОснованииСверки(Форма, СтрокаРасчета) Экспорт

	Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ПустаяСсылка");

	Если СтрокаРасчета.ПравильныйРасчет < 2 Тогда
		// Расчет совпадает или не установлено, какой расчет верный
		СтрокаРасчета.Действие = Действие;
		Возврат;
	КонецЕсли;

	// Если ОС отсутствует в программе, то нужно либо сообщить в ФНС о лишнем объекте, 
	// либо добавить/настроить объект в программе. 
	Если Не СтрокаРасчета.ОбъектЕстьВРасчете Тогда
		
		Если СтрокаРасчета.ПравильныйРасчет = 2 И ЗначениеЗаполнено(СтрокаРасчета.ДатаСнятияСУчета)
			 И СтрокаРасчета.ПричинаСнятияСУчета = ПредопределенноеЗначение("Перечисление.ПричиныСнятияОбъектовСУчета.ГибельУничтожениеТС")Тогда
			Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьЗаявлениеОГибелиТС");
		ИначеЕсли СтрокаРасчета.ПравильныйРасчет = 2 Тогда
			Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьПоясненияВСвязиССообщениемОРасчетеНалога");
		ИначеЕсли ЗначениеЗаполнено(СтрокаРасчета.ОсновноеСредство) Тогда
			Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ПерейтиКНастройкамОбъектов");
		Иначе
			Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ПерейтиКУчетуОС");
		КонецЕсли;

	// Если в ФНС нет данных об объекте, то нужно сообщить
	ИначеЕсли Не СтрокаРасчета.ОбъектЕстьВРасчетеФНС И СтрокаРасчета.ПравильныйРасчет = 2 Тогда
		Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьСообщениеОНаличииОбъектов");

	// Пользователь мог явно указать, что ТС было уничтожено 
	ИначеЕсли СтрокаРасчета.ПравильныйРасчет = 2 И ЗначениеЗаполнено(СтрокаРасчета.ДатаСнятияСУчета) 
		 И СтрокаРасчета.ПричинаСнятияСУчета = ПредопределенноеЗначение("Перечисление.ПричиныСнятияОбъектовСУчета.ГибельУничтожениеТС") Тогда
		Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьЗаявлениеОГибелиТС");

	// Если в ФНС нет данных о льготе, то нужно сообщить
	ИначеЕсли СтрокаРасчета.ПравильныйРасчет = 2 И СтрокаРасчета.СуммаЛьгот > 0 И СтрокаРасчета.СуммаЛьгот <> СтрокаРасчета.СуммаЛьготФНС Тогда
		Если Форма.Объект.Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество") Тогда
			Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьЗаявлениеОЛьготеПоИмуществу");
		Иначе
			Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьЗаявлениеОЛьготе");
		КонецЕсли;
		
	// Если в ФНС другие ошибки, то нужно сообщить в свободной форме
	ИначеЕсли СтрокаРасчета.ПравильныйРасчет = 2 Тогда
		Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьПоясненияВСвязиССообщениемОРасчетеНалога");
		
	// Если ошибка в нашем расчете, то нужно исправить настройки
	Иначе
		Действие = ПредопределенноеЗначение("Перечисление.ДействияСверкиИмущественныхНалогов.ПерейтиКНастройкамОбъектов");

	КонецЕсли;

	СтрокаРасчета.Действие = Действие;

КонецПроцедуры 

// Возвращает наименования показателя расчета для вывода их пользователю, а также для пояснений в налоговую
//
// Параметры:
//  ИмяПоказателя - Строка - см. СверкаСФНСПоИмущественнымНалогамФормы.ПоляСтрокРасчета()
//  ЕдиницаИзмерения - Строка - код единицы измерения
// 
// Возвращаемое значение:
//   - Структура:
//     * НаименованиеВРасчете - наименование показателя, как оно указывается в печатном формате расчета ФНС
//       (для пояснений в ФНС)
//     * СодержательноеНаименование - более естественное для пользователя наименование
//       (для вывода пользователю в форме сверки)
//
Функция НаименованияПоказателяРасчета(ИмяПоказателя, ЕдиницаИзмерения = Неопределено) Экспорт

	НаименованияПоказателя = Новый Структура("НаименованиеВРасчете, СодержательноеНаименование", "", "");
	Если ИмяПоказателя = "НалоговаяБаза" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'налоговая база';
															|en = 'tax base'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'налоговая база';
																|en = 'tax base'");
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			НаименованияПоказателя.СодержательноеНаименование = 
				НаименованиеНалоговойБазыТранспортногоНалога(ЕдиницаИзмерения);
		КонецЕсли;
	ИначеЕсли ИмяПоказателя = "ДоляВПравеЧислитель" 
		 Или ИмяПоказателя = "ДоляВПравеЗнаменатель"
		 Или ИмяПоказателя = "ДоляВПраве" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'доля в праве';
															|en = 'ownership interest'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'доля в праве';
																|en = 'ownership interest'");
	ИначеЕсли ИмяПоказателя = "НалоговыйВычет" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'налоговый вычет';
															|en = 'tax deduction'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'сумма вычета';
																|en = 'deduction amount'");
	ИначеЕсли ИмяПоказателя = "НалоговаяСтавка" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'налоговая ставка';
															|en = 'tax rate'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'ставка налога';
																|en = 'tax rate'");
	ИначеЕсли ИмяПоказателя = "КоличествоМесяцевВладения" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'количество месяцев владения в году/12';
															|en = 'number of ownership months in a year / 12'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'период владения';
																|en = 'ownership period'");
	ИначеЕсли ИмяПоказателя = "ПовышающийКоэффициент" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'повышающий коэффициент';
															|en = 'increasing factor'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'повышающий коэффициент';
																|en = 'increasing factor'");
	ИначеЕсли ИмяПоказателя = "СуммаЛьгот" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'размер налоговых льгот';
															|en = 'tax relief amount'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'льгота';
																|en = 'relief'");
	ИначеЕсли ИмяПоказателя = "СуммаНалога" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'сумма исчисленного налога';
															|en = 'calculated tax amount'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'сумма налога';
																|en = 'tax amount'");
	ИначеЕсли ИмяПоказателя = "СуммаНалогаНачислено" Тогда
		НаименованияПоказателя.НаименованиеВРасчете = Нстр("ru = 'сумма исчисленного налога';
															|en = 'calculated tax amount'");
		НаименованияПоказателя.СодержательноеНаименование = Нстр("ru = 'сумма налога';
																|en = 'tax amount'");

	КонецЕсли;

	Возврат НаименованияПоказателя;

КонецФункции

// Возвращает представление налоговой базы транспортного налога по переданному коду единицы измерения.
// 
// Параметры:
//  ЕдиницаИзмерения - Строка - код единицы измерения
// 
// Возвращаемое значение:
//  Строка - представление налоговой базы транспортного налога
Функция НаименованиеНалоговойБазыТранспортногоНалога(ЕдиницаИзмерения) Экспорт
	
	СоответствиеНалоговыхБазИЕдиниц = Новый Соответствие;
	
	СоответствиеНалоговыхБазИЕдиниц.Вставить("251", НСтр("ru = 'мощность';
														|en = 'capacity'")); // л. с.
	СоответствиеНалоговыхБазИЕдиниц.Вставить("999", НСтр("ru = 'тяга';
														|en = 'thrust'")); // Кгс
	СоответствиеНалоговыхБазИЕдиниц.Вставить("181", НСтр("ru = 'грузоподъемность';
														|en = 'carrying capacity'")); // БРТ
	СоответствиеНалоговыхБазИЕдиниц.Вставить("796", НСтр("ru = 'количество';
														|en = 'quantity'")); // шт
	
	НаименованиеНалоговойБазы = СоответствиеНалоговыхБазИЕдиниц[ЕдиницаИзмерения];
	Возврат ?(НаименованиеНалоговойБазы = Неопределено, "", НаименованиеНалоговойБазы);
	
КонецФункции

#Область ЧтениеСообщенияОбИсчисленнойСуммеНалога

// По имени файла определяет, находится ли внутри расчет транспортного налога
// Для расчета имущественных налогов имя файла всегда начинает с КНД соответствующей формы.
//
// Параметры:
//  ИмяФайла - Строка - имя файла, приложенного к сообщению из налогового органа
// 
// Возвращаемое значение:
//   - Булево 
//
Функция ЭтоФайлРасчетаТранспортногоНалога(ИмяФайла) Экспорт

	Возврат СтрНачинаетсяС(ИмяФайла, КНДРасчетаТранспортногоНалога() + "_");         

КонецФункции

// По имени файла определяет, находится ли внутри расчет земельного налога
// Для расчета имущественных налогов имя файла всегда начинает с КНД соответствующей формы.
//
// Параметры:
//  ИмяФайла - Строка - имя файла, приложенного к сообщению из налогового органа
// 
// Возвращаемое значение:
//   - Булево 
//
Функция ЭтоФайлРасчетаЗемельногоНалога(ИмяФайла) Экспорт

	Возврат СтрНачинаетсяС(ИмяФайла, КНДРасчетаЗемельногоНалога() + "_");

КонецФункции

// По имени файла определяет, находится ли внутри расчет имущественных налогов
// Для расчета имущественных налогов имя файла всегда начинает с КНД соответствующей формы.
//
// Параметры:
//  ИмяФайла - Строка - имя файла, приложенного к сообщению из налогового органа
// 
// Возвращаемое значение:
//   - Булево 
//
Функция ЭтоФайлРасчетаИмущественныхНалогов(ИмяФайла) Экспорт

	Возврат СтрНачинаетсяС(ИмяФайла, КНДРасчетаИмущественныхНалогов() + "_");

КонецФункции

// КНД Расчета транспортного налога.
// 
// Возвращаемое значение:
//  Строка - КНДРасчета транспортного налога
Функция КНДРасчетаТранспортногоНалога() Экспорт

	Возврат "1152006";

КонецФункции

// КНД Расчета земельного налога.
// 
// Возвращаемое значение:
//  Строка - КНДРасчета земельного налога
Функция КНДРасчетаЗемельногоНалога() Экспорт

	Возврат "1153007";

КонецФункции

// КНД Расчета имущественных налогов.
// 
// Возвращаемое значение:
//  Строка - КНДРасчета имущественных налогов
Функция КНДРасчетаИмущественныхНалогов() Экспорт

	Возврат "1152029";

КонецФункции

// По налогу и периоду определяет
//
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов - налог, которым облагаются основные средства.
//          Если не указан, то возвращаются все возможные варианты для всех имущественных налогов.
// Возвращаемое значение:
//  Массив из Строка - массив строк возможного начала имени файла с расчетом налога из ФНС.
//
Функция ВозможныеНачалаИмениФайлаРасчета(Налог = Неопределено) Экспорт 

	ВозможныеНачалаИмениФайла = Новый Массив;
	
	ВозможныеНачалаИмениФайла.Добавить(КНДРасчетаИмущественныхНалогов());

	Если Не ЗначениеЗаполнено(Налог) Тогда
		// Возможен любой вариант файла
		ВозможныеНачалаИмениФайла.Добавить(КНДРасчетаТранспортногоНалога());
		ВозможныеНачалаИмениФайла.Добавить(КНДРасчетаЗемельногоНалога());
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог") Тогда
		ВозможныеНачалаИмениФайла.Добавить(КНДРасчетаТранспортногоНалога());
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ЗемельныйНалог") Тогда
		ВозможныеНачалаИмениФайла.Добавить(КНДРасчетаЗемельногоНалога());
	КонецЕсли;

	Возврат ВозможныеНачалаИмениФайла;
	
КонецФункции
 
// Возвращает крайний срок, до которого ФНС должна прислать расчет налога за конкретный налоговый период.
//
// Параметры:
//  НалоговыйПериод - Дата - любой день налогового периода (года).
// 
// Возвращаемое значение:
//  Дата - крайний срок получения расчета.
//
Функция КрайнийСрокПолученияРасчетаФНС(НалоговыйПериод) Экспорт 

	Возврат КонецДня(Дата(Год(НалоговыйПериод) + 1, 9, 1)); // 1 сентября года, следующего за отчетным

КонецФункции

#КонецОбласти

#КонецОбласти
