////////////////////////////////////////////////////////////////////////////////
// Подсистема "Документооборот с РЭЦ".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
	
Функция ОтправитьОтчет(КонтекстОтправки, СоединениеHTTP = Неопределено) Экспорт
	
	Организация = КонтекстОтправки.Организация;
	СсылкаНаОтчет = КонтекстОтправки.СсылкаНаОтчет;
	ДанныеДляВыгрузки = КонтекстОтправки.ДанныеДляВыгрузки;
	СписокОтправки = КонтекстОтправки.СписокОтправки;
	ИнформацияПоДекларацииНДС = КонтекстОтправки.ИнформацияПоДекларацииНДС;
	
	Настройки = ПолучитьНастройки(Организация);;
	
	Если СоединениеHTTP = Неопределено Тогда
		СоединениеHTTP = СоединениеССервисомРЭЦ();
	КонецЕсли;
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АннулироватьПредыдущиеОтправки(СсылкаНаОтчет);
	
	КлючСессии = "sso_1.0_" + КонтекстОтправки.access_token;
	
	ОтправкаОбъект = Неопределено;
	  
	МассивЗагруженныхДокументов = Новый Соответствие;
	// Поиск незавершенной отправки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтправкиРЭЦ.Ссылка КАК Ссылка,
	               |	ОтправкиРЭЦОтчетыСсылки.ИДДокумента КАК ИДДокумента,
	               |	ОтправкиРЭЦОтчетыСсылки.КодТипаДокументаРЭЦ КАК КодТипаДокументаРЭЦ,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ОтправкиРЭЦОтчетыСсылки.КодТипаДокументаРЭЦ = ""c00379""
	               |				ТОГДА ОтправкиРЭЦОтчетыСсылки.ИмяФайлаПакета
	               |			ИНАЧЕ """"
	               |		КОНЕЦ) КАК ИдФайлаДекларации
	               |ИЗ
	               |	Справочник.ОтправкиРЭЦ.ОтчетыСсылки КАК ОтправкиРЭЦОтчетыСсылки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиРЭЦ КАК ОтправкиРЭЦ
	               |		ПО ОтправкиРЭЦОтчетыСсылки.Ссылка = ОтправкиРЭЦ.Ссылка
	               |ГДЕ
	               |	ОтправкиРЭЦ.ДатаНачалаПериода = &ДатаНачалаПериода
	               |	И ОтправкиРЭЦ.ДатаОкончанияПериода = &ДатаОкончанияПериода
	               |	И ОтправкиРЭЦ.Организация = &Организация
	               |	И ВЫБОР
	               |			КОГДА &ОтборСсылка = ИСТИНА
	               |				ТОГДА ОтправкиРЭЦ.Ссылка = &ОтправкаСсылка
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ОтборСсылка = ИСТИНА
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ОтправкиРЭЦ.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Отправлен)
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтправкиРЭЦОтчетыСсылки.ИДДокумента,
	               |	ОтправкиРЭЦ.Ссылка,
	               |	ОтправкиРЭЦОтчетыСсылки.КодТипаДокументаРЭЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОтправкиРЭЦ.ДатаОтправки УБЫВ
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Если КонтекстОтправки.Свойство("Отправка") И КонтекстОтправки.Отправка <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборСсылка", Истина);
		Запрос.УстановитьПараметр("ОтправкаСсылка", КонтекстОтправки.Отправка); 	
	Иначе                                       
		Запрос.УстановитьПараметр("ОтборСсылка", Истина); 
		Запрос.УстановитьПараметр("ОтправкаСсылка", Справочники.ОтправкиРЭЦ.ПустаяСсылка());	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачалаПериода", ИнформацияПоДекларацииНДС.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", ИнформацияПоДекларацииНДС.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВыборкаОтправка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	ИдФайлаДекларации = Неопределено;
	Если ВыборкаОтправка.Следующий() Тогда
		ОтправкаОбъект = ВыборкаОтправка.Ссылка.ПолучитьОбъект();	
		ВыборкаДокументы = ВыборкаОтправка.Выбрать();
		Пока ВыборкаДокументы.Следующий() Цикл 
			МассивЗагруженныхДокументов.Вставить(ВыборкаДокументы.КодТипаДокументаРЭЦ, ВыборкаДокументы.ИДДокумента);
			Если ВыборкаДокументы.ИдФайлаДекларации <> "" Тогда
				ИдФайлаДекларации = ВыборкаДокументы.ИдФайлаДекларации;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОтправкаОбъект = Справочники.ОтправкиРЭЦ.СоздатьЭлемент(); 
		//НоваяСсылкаОтправки = Справочники.ОтправкиРЭЦ.ПолучитьСсылку(Новый УникальныйИдентификатор);
		//ОтправкаОбъект.УстановитьСсылкуНового(НоваяСсылкаОтправки);
		
		ОтправкаОбъект.Организация                = Организация;
		ОтправкаОбъект.ДатаНачалаПериода          = ИнформацияПоДекларацииНДС.ДатаНачала; 
		ОтправкаОбъект.ДатаОкончанияПериода       = ИнформацияПоДекларацииНДС.ДатаОкончания;
		//ОтправкаОбъект.Версия                     = СсылкаНаОтчет.Вид;
		ОтправкаОбъект.ПредставлениеПериода       = ПредставлениеПериода(ОтправкаОбъект.ДатаНачалаПериода, КонецДня(ОтправкаОбъект.ДатаОкончанияПериода), "ФП=Истина");
		ОтправкаОбъект.ПредставлениеВидаДокумента = "Проверка ставки 0%"; //СсылкаНаОтчет.ПредставлениеВида;
		
		ОтправкаОбъект.СтатусОтправки             = Перечисления.СтатусыОтправки.ВКонверте;   
		
		ОтправкаОбъект.Записать();
	КонецЕсли; 
	
	// Определим набор документов   
	НаборЗагружаемыхДокументов = Новый Соответствие;
	Для Каждого Пакет Из ДанныеДляВыгрузки Цикл          
		Если ТипЗнч(СсылкаНаОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			КодДокументаРЭЦ = ДокументооборотСРЭЦКлиентСервер.ПолучитьКодДокументаРЭЦПоНаименованию(Пакет.ИмяФайлаВыгрузки);
		Иначе
			КодДокументаРЭЦ = "c00199";	
		КонецЕсли;
		Если НаборЗагружаемыхДокументов.Получить(Пакет.ИмяФайлаВыгрузки) = Неопределено Тогда   
			ИДДокумента = МассивЗагруженныхДокументов.Получить(КодДокументаРЭЦ);
			Если ИДДокумента = Неопределено Тогда
				// 1. Создадим документ на сервере РЭЦ
				РезультатСозданияЗаписи = СоздатьЗаписьДокумента(СсылкаНаОтчет, КодДокументаРЭЦ, КлючСессии, СоединениеHTTP);
				
				Если РезультатСозданияЗаписи.Свойство("uuid") = Ложь Тогда
					ОтменитьТранзакцию();
					Возврат Неопределено;
				Иначе      
					ИДДокумента = РезультатСозданияЗаписи.uuid;
					МассивЗагруженныхДокументов.Вставить(КодДокументаРЭЦ, ИДДокумента);
				КонецЕсли;
			КонецЕсли;
			ЗагруженныйДокумент = Новый Структура;   
			ЗагруженныйДокумент.Вставить("Код", КодДокументаРЭЦ);
			ЗагруженныйДокумент.Вставить("UUID", ИДДокумента);
			НаборЗагружаемыхДокументов.Вставить(Пакет.ИмяФайлаВыгрузки, ЗагруженныйДокумент);	
		КонецЕсли;       	
	КонецЦикла;
	
	
	Для Каждого Пакет Из ДанныеДляВыгрузки Цикл		  
		
		ЗагруженныйДокумент = НаборЗагружаемыхДокументов.Получить(Пакет.ИмяФайлаВыгрузки); 
				
		// 2. Загрузить файл пакета на сервер РЭЦ
		ФайлЗагружен = ЗагрузитьФайлПакета(ЗагруженныйДокумент.UUID, ЗагруженныйДокумент.Код, Пакет, КлючСессии, СоединениеHTTP);
		
		Если ФайлЗагружен = Ложь Тогда
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		
		ДатаОтправки = ТекущаяДатаСеанса();
					
		Попытка     
			ПрисоединенныйФайл = ДобавитьФайлОтправки(ОтправкаОбъект.Ссылка, Пакет.АдресФайлаВыгрузки, Пакет.ИмяФайлаВыгрузки, Истина);
			
			Если ТипЗнч(СсылкаНаОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				НайденныеСтроки = ОтправкаОбъект.ОтчетыСсылки.НайтиСтроки(Новый Структура("ИсточникОтчета, ТипФайла", 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОтчет, "ИсточникОтчета"), 
					Пакет.ТипФайлаВыгрузки));
			Иначе
				НайденныеСтроки = ОтправкаОбъект.ОтчетыСсылки.НайтиСтроки(Новый Структура("ПроизвольноеВложениеСсылка", СсылкаНаОтчет));	
			КонецЕсли;
				
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаТЧ = НайденныеСтроки[0];
			Иначе
				СтрокаТЧ = ОтправкаОбъект.ОтчетыСсылки.Добавить();
			КонецЕсли;
			
			Если ТипЗнч(СсылкаНаОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				СтрокаТЧ.ОтчетСсылка = СсылкаНаОтчет;
				СтрокаТЧ.ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОтчет, "ИсточникОтчета");
			Иначе
				СтрокаТЧ.ПроизвольноеВложениеСсылка = СсылкаНаОтчет;	
			КонецЕсли;
			СтрокаТЧ.Пакет = ПрисоединенныйФайл;
			СтрокаТЧ.ИмяФайлаПакета = Пакет.ИмяФайлаВыгрузки;
			СтрокаТЧ.ТипФайла = Пакет.ТипФайлаВыгрузки;
			СтрокаТЧ.ДатаОтправки = ДатаОтправки; 
			СтрокаТЧ.ИДДокумента = ЗагруженныйДокумент.UUID; 
			СтрокаТЧ.КодТипаДокументаРЭЦ = ЗагруженныйДокумент.Код;
		Исключение
			ОтменитьТранзакцию();
			УдалитьИзВременногоХранилища(Пакет.АдресФайлаВыгрузки);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось сохранить в информационной базе присоединенный файл %1!%3';
																							|en = 'Не удалось сохранить в информационной базе присоединенный файл %1!%3'"),
																						Символ(34) + Пакет.ИмяФайлаВыгрузки + Символ(34),
																						Символы.ПС + ОписаниеОшибки());
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;	
	КонецЦикла;
	
	// Проверить, что все файлы отправлены
	ВсеФайлыОтправлены = Истина;
	Для Каждого ЭлементСписка Из СписокОтправки Цикл
		Если ТипЗнч(ЭлементСписка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			НайденныеСтроки = ОтправкаОбъект.ОтчетыСсылки.НайтиСтроки(Новый Структура("ОтчетСсылка", ЭлементСписка));
		Иначе
			НайденныеСтроки = ОтправкаОбъект.ОтчетыСсылки.НайтиСтроки(Новый Структура("ПроизвольноеВложениеСсылка", ЭлементСписка));	
		КонецЕсли; 	
		Если НайденныеСтроки.Количество() = 0 Тогда
			ВсеФайлыОтправлены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Ошибка = "";
	Если ВсеФайлыОтправлены = Истина Тогда
		// 3. Запустить процесс проверки на сервере РЭЦ
		СтруктураОтвета = ЗапуститьПроцесс(КонтекстОтправки.claims__mdm_id, МассивЗагруженныхДокументов, КлючСессии, СоединениеHTTP);

		Если СтруктураОтвета.Свойство("processInstanceId") Тогда
			ОтправкаОбъект.Идентификатор		      = СтруктураОтвета.processInstanceId;
			ОтправкаОбъект.СтатусОтправки             = Перечисления.СтатусыОтправки.Отправлен;
			ОтправкаОбъект.ДатаОтправки               = ДатаОтправки;
		Иначе
			ОтправкаОбъект.СтатусОтправки             = Перечисления.СтатусыОтправки.НеПринят;
			ОтправкаОбъект.ДатаОтправки               = ДатаОтправки;
			Если СтруктураОтвета.Свойство("message") Тогда
				Ошибка = СтруктураОтвета.message;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтправкаОбъект.Записать();
	
	Если ОтправкаОбъект <> Неопределено Тогда
		ЗафиксироватьТранзакцию();
		РезультатОтправки = Новый Структура;
		РезультатОтправки.Вставить("Отправка", ОтправкаОбъект.Ссылка);
		Если ЗначениеЗаполнено(Ошибка) Тогда
			РезультатОтправки.Вставить("Ошибка", Ошибка);
		КонецЕсли;
		Возврат РезультатОтправки;	
	Иначе
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции     


Процедура АннулироватьПредыдущиеОтправки(СсылкаНаОтчет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("СсылкаНаОтчет", СсылкаНаОтчет);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОтправкиРЭЦОтчетыСсылки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиРЭЦ.ОтчетыСсылки КАК ОтправкиРЭЦОтчетыСсылки
	               |ГДЕ 
				   |	ОтправкиРЭЦОтчетыСсылки.ОтчетСсылка = &СсылкаНаОтчет
				   |	И ОтправкиРЭЦОтчетыСсылки.Ссылка.СтатусОтправки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ВКонверте)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтправкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОтправкаОбъект.СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте; 
		ОтправкаОбъект.Записать();
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


Функция ДобавитьФайлОтправки(ВладелецФайла, АдресВХранилище, ИмяФайла, ОбновлятьСуществующий = Истина)
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", 						Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", 				ВладелецФайла);
	ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
	
	ИнформацияОбОбновляемомФайле = Новый Структура;
	ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
	ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
	ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
	
	ФайлОбновлен = Ложь;
	МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
		ВладелецФайла,
		"ОтправкиРЭЦПрисоединенныеФайлы",
		ИмяФайла);
	
	Если МассивФайлов.Количество() > 0 Тогда
		Если ОбновлятьСуществующий = Истина Тогда	
			ПрисоединенныйФайл = МассивФайлов[0];
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);				
			ФайлОбновлен = Истина;
		Иначе
			Возврат ПрисоединенныйФайл;
		КонецЕсли;
	Иначе
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ИмяФайла;	    
	ПрисоединенныйФайлОбъект.Записать();
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

Функция АвторизацияВСервисеРЭЦ(КэшСоединениеHTTP = Неопределено, ПараметрыДляШага = Неопределено, ЭтоРегистрация = Ложь) Экспорт
	
	Если КэшСоединениеHTTP = Неопределено Тогда
		СоединениеHTTP = СоединениеССервисомРЭЦ();
	Иначе
		СоединениеHTTP = КэшСоединениеHTTP;
	КонецЕсли;
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;       
	
	КлиентИнтеграцииСРЭЦ = ДокументооборотСРЭЦКлиентСервер.КлиентИнтеграцииСРЭЦ();
	
	АвторизацияПоСертификату = Истина;
	
	Если АвторизацияПоСертификату = Ложь Тогда
		ТелоЗапроса = "client_id=rec_elk_m2m&client_secret=password&realm=%2Fcustomer&grant_type=urn%3Aroox%3Aparams%3Aoauth%3Agrant-type%3Am2m&service=dispatcher";
			   
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept", "application/json");
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Заголовки.Вставить("referrer", ДокументооборотСРЭЦКлиентСервер.АдресСервера(СоединениеHTTP) + "/ru/login");
		Заголовки.Вставить("Cookie", "sal=true");
		
		ЗапросHTTP = Новый HTTPЗапрос("/sso/oauth2/access_token", Заголовки);
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Попытка
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
		ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
		
		ТелоЗапроса = "client_id=rec_elk_m2m&client_secret=password&realm=%2Fcustomer&grant_type=urn%3Aroox%3Aparams%3Aoauth%3Agrant-type%3Am2m&service=dispatcher&_eventId=next&username="
			   + "demo_exporter_admin" + "&password="
			   + "password" + "&execution=" 
			   + ОбъектОтвет.execution;
		
		ЗапросHTTP = Новый HTTPЗапрос("/sso/oauth2/access_token", Заголовки);
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
		ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
	Иначе
		Если ПараметрыДляШага.Шаг = 1 Тогда
			// Шаг 1
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			Заголовки.Вставить("X-XSRF-TOKEN", "9cc86e5c-bbb4-486e-9f58-6c2d42d8e3c4");
			
			АдресРесурса = РесурсАвторизации(СоединениеHTTP);
			
			ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("client_id", КлиентИнтеграцииСРЭЦ.client_id);
			СтруктураПараметров.Вставить("client_secret", КлиентИнтеграцииСРЭЦ.client_secret);
			Если ЭтоРегистрация = Истина Тогда
				СтруктураПараметров.Вставить("service", "org-registration");	
			Иначе
				СтруктураПараметров.Вставить("service", "dispatcher");
			КонецЕсли;
			СтруктураПараметров.Вставить("realm", "/customer");
			СтруктураПараметров.Вставить("grant_type", "urn:roox:params:oauth:grant-type:m2m");
			СтруктураПараметров.Вставить("response_type", "token cookie");
			
			ТелоЗапроса = СтруктуруВForm(СтруктураПараметров);
			ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
			
			Если ОтветHTTP = Неопределено 
				Или (ОтветHTTP.КодСостояния <> 200 И ОтветHTTP.КодСостояния <> 201 И ОтветHTTP.КодСостояния <> 202) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
			ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
					
			// Шаг 2	
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0");
			Заголовки.Вставить("Accept", "application/json");
			Заголовки.Вставить("Accept-Language", "en,en-US;q=0.7,de-DE;q=0.3");
			Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			Заголовки.Вставить("Connection", "keep-alive");
			Заголовки.Вставить("Referer", "https://expc.demo.rooxteam.com/en/login?redirect=%2F");
			Заголовки.Вставить("Cookie", СтрЗаменить("RX_SID=CA5AE86BF46608558817AC9663961255;
											| gotoOnFail=https://expc.demo.rooxteam.com/sso/oauth2/authorize?
											|redirect_uri=https://expc.demo.rooxteam.com/oauth2-consumer/authorize&realm=/customer
											|&response_type=code&client_id=" + КлиентИнтеграцииСРЭЦ.client_id + "&state=goto%3D
											|https://expc.demo.rooxteam.com/widgets/success.html%26gotoOnFail%3D
											|https://expc.demo.rooxteam.com/widgets/failure.html%26client_id%3D" + КлиентИнтеграцииСРЭЦ.client_id + ";
											| sh=e1a51bf32a20ed99d1addc0696b561979e8630f64698d741eec6902f619b67d1;
											| sal=true;
											| lb=expc", Символы.ПС, ""));
			
			АдресРесурса = РесурсАвторизации(СоединениеHTTP);
			
			ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("client_id", КлиентИнтеграцииСРЭЦ.client_id);
			СтруктураПараметров.Вставить("client_secret", КлиентИнтеграцииСРЭЦ.client_secret);
			СтруктураПараметров.Вставить("realm", "/customer");
			СтруктураПараметров.Вставить("grant_type", "urn:roox:params:oauth:grant-type:m2m");
			Если ЭтоРегистрация = Истина Тогда
				СтруктураПараметров.Вставить("service", "org-registration");	
				СтруктураПараметров.Вставить("_eventId", "certificate");
			Иначе
				СтруктураПараметров.Вставить("_eventId", "login-by-certificate");
			КонецЕсли;
			СтруктураПараметров.Вставить("execution", ОбъектОтвет.execution);
			СтруктураПараметров.Вставить("response_type", "token cookie");
			
			ТелоЗапроса = СтруктуруВForm(СтруктураПараметров);
			ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
			
			Если ОтветHTTP = Неопределено 
				Или (ОтветHTTP.КодСостояния <> 200 И ОтветHTTP.КодСостояния <> 201 И ОтветHTTP.КодСостояния <> 202) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
			ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);			
		ИначеЕсли ПараметрыДляШага.Шаг = 3 Тогда		
			// Шаг 3
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0");
			Заголовки.Вставить("Accept", "application/json");
			Заголовки.Вставить("Accept-Language", "en,en-US;q=0.7,de-DE;q=0.3");
			Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			Заголовки.Вставить("Connection", "keep-alive");
			Заголовки.Вставить("Referer", "https://expc.demo.rooxteam.com/en/login?redirect=%2F");
			Заголовки.Вставить("Cookie", СтрЗаменить("RX_SID=CA5AE86BF46608558817AC9663961255;
											| gotoOnFail=https://expc.demo.rooxteam.com/sso/oauth2/authorize?
											|redirect_uri=https://expc.demo.rooxteam.com/oauth2-consumer/authorize&realm=/customer
											|&response_type=code&client_id=" + КлиентИнтеграцииСРЭЦ.client_id + "&state=goto%3D
											|https://expc.demo.rooxteam.com/widgets/success.html%26gotoOnFail%3D
											|https://expc.demo.rooxteam.com/widgets/failure.html%26client_id%3D" + КлиентИнтеграцииСРЭЦ.client_id + ";
											| sh=e1a51bf32a20ed99d1addc0696b561979e8630f64698d741eec6902f619b67d1;
											| sal=true;
											| lb=expc", Символы.ПС, ""));
			
			АдресРесурса = РесурсАвторизации(СоединениеHTTP);
			
			ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			
			СтруктураПараметров = Новый Соответствие;
			СтруктураПараметров.Вставить("client_id", КлиентИнтеграцииСРЭЦ.client_id);
			СтруктураПараметров.Вставить("client_secret", КлиентИнтеграцииСРЭЦ.client_secret);
			СтруктураПараметров.Вставить("realm", "/customer");
			СтруктураПараметров.Вставить("grant_type", "urn:roox:params:oauth:grant-type:m2m");
			Если ЭтоРегистрация = Истина Тогда
				СтруктураПараметров.Вставить("service", "orgRegistration");	
			Иначе
				СтруктураПараметров.Вставить("service", "dispatcher");
			КонецЕсли;		
			СтруктураПараметров.Вставить("_eventId", "next");
			СтруктураПараметров.Вставить("execution", ПараметрыДляШага.execution);
			СтруктураПараметров.Вставить("response_type", "token cookie");
			
			СтруктураПараметров.Вставить("nonce.clientNonce", ПараметрыДляШага.clientNonce);
			СтруктураПараметров.Вставить("nonce.serverNonce", ПараметрыДляШага.serverNonce);
			СтруктураПараметров.Вставить("nonce.issuerUrl", ПараметрыДляШага.СерверSSO);
			СтруктураПараметров.Вставить("sign", ПараметрыДляШага.ПодписьBase64);
			СтруктураПараметров.Вставить("provider", "jinn");
			
			ТелоЗапроса = СтруктуруВForm(СтруктураПараметров);
			ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
			
			Если ОтветHTTP = Неопределено 
				Или (ОтветHTTP.КодСостояния <> 200 И ОтветHTTP.КодСостояния <> 201 И ОтветHTTP.КодСостояния <> 202) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
			ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
			
			Если ЭтоРегистрация = Истина Тогда
				
				Если ОбъектОтвет.view.Свойство("certValidationResult") И ОбъектОтвет.view.certValidationResult.status = "INVALID" Тогда 
					Возврат ОбъектОтвет;
				КонецЕсли;
				
				// Шаг 4    
				Если ПараметрыДляШага.Шаг < 5 Тогда           
					
					// Поиск ИД организации
					Заголовки = Новый Соответствие;
					Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0");
					Заголовки.Вставить("Accept", "application/json");
					Заголовки.Вставить("Accept-Encoding", "deflate");
					Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
					Заголовки.Вставить("Connection", "keep-alive");
					Заголовки.Вставить("Referer", "https://expc.demo.rooxteam.com/en/login?redirect=%2F");
					Заголовки.Вставить("Cookie", СтрЗаменить("RX_SID=CA5AE86BF46608558817AC9663961255;
													| gotoOnFail=https://expc.demo.rooxteam.com/sso/oauth2/authorize?
													|redirect_uri=https://expc.demo.rooxteam.com/oauth2-consumer/authorize&realm=/customer
													|&response_type=code&client_id=" + КлиентИнтеграцииСРЭЦ.client_id + "&state=goto%3D
													|https://expc.demo.rooxteam.com/widgets/success.html%26gotoOnFail%3D
													|https://expc.demo.rooxteam.com/widgets/failure.html%26client_id%3D" + КлиентИнтеграцииСРЭЦ.client_id + ";
													| sh=e1a51bf32a20ed99d1addc0696b561979e8630f64698d741eec6902f619b67d1;
													| sal=true;
													| lb=expc", Символы.ПС, ""));
					
					АдресРесурса = РесурсПоискаОрганизации(СоединениеHTTP);
					
					ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса + "?caption_inn_ogrn_like="
										+ "00" + ПараметрыДляШага.Организация.ИНН + "+" + ПараметрыДляШага.Организация.ОГРН
										+ "&size=1", Заголовки);   
					
					ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP); 
					
					Если ОтветHTTP = Неопределено 
						Или (ОтветHTTP.КодСостояния <> 200 И ОтветHTTP.КодСостояния <> 201 И ОтветHTTP.КодСостояния <> 202) Тогда
						Возврат Неопределено;
					КонецЕсли;
					
					ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
					ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет); 
					
					Если ОбъектОтвет.Свойство("content") И ОбъектОтвет.content.Количество() = 1 Тогда
						ИДОрганизации = ОбъектОтвет.content[0].uuid;	
					Иначе
						Возврат Неопределено;
					КонецЕсли;
					
					///////////////////////
					
					Заголовки = Новый Соответствие;
					Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0");
					Заголовки.Вставить("Accept", "application/json");
					Заголовки.Вставить("Accept-Encoding", "deflate");
					Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
					Заголовки.Вставить("Connection", "keep-alive");
					Заголовки.Вставить("X-Forwarded-For", "194.44.214.32");
					
					АдресРесурса = РесурсАвторизации(СоединениеHTTP);
					
					ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
				
					СтруктураПараметров = Новый Соответствие;
					СтруктураПараметров.Вставить("client_id", КлиентИнтеграцииСРЭЦ.client_id);
					СтруктураПараметров.Вставить("client_secret", КлиентИнтеграцииСРЭЦ.client_secret);
					СтруктураПараметров.Вставить("realm", "/customer");
					СтруктураПараметров.Вставить("grant_type", "urn:roox:params:oauth:grant-type:m2m");
					СтруктураПараметров.Вставить("service", "org-registration");	
					
					АдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПараметрыДляШага.Организация, 
											Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, , Истина);
					
					СтруктураПараметров.Вставить("userForm.login", ПараметрыДляШага.Логин);
					СтруктураПараметров.Вставить("userForm.name.displayName", ОбъектОтвет.view.subject.givenName); 
					СтруктураПараметров.Вставить("userForm.emails[0].value", ПараметрыДляШага.Логин);
					СтруктураПараметров.Вставить("userForm.password", ПараметрыДляШага.Пароль);
					СтруктураПараметров.Вставить("userForm.extendedAttributes[position]", "CEO"); 
					СтруктураПараметров.Вставить("userForm.extendedAttributes[mdmOrgId]", ИДОрганизации);
					СтруктураПараметров.Вставить("orgForm.externalId", ИДОрганизации);
					СтруктураПараметров.Вставить("orgForm.displayName", Строка(ПараметрыДляШага.Организация));
					СтруктураПараметров.Вставить("orgForm.extendedAttributes[inn]", ПараметрыДляШага.Организация.ИНН);
					СтруктураПараметров.Вставить("orgForm.extendedAttributes[address]", АдресОрганизации);
					СтруктураПараметров.Вставить("orgMemberForm.position", ОбъектОтвет.view.subject.title);  
			
					СтруктураПараметров.Вставить("_eventId", "next");
					СтруктураПараметров.Вставить("execution", ОбъектОтвет.execution);
					СтруктураПараметров.Вставить("response_type", "token cookie");
					
					ТелоЗапроса = СтруктуруВForm(СтруктураПараметров);
					ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
					
					ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
					
					Если ОтветHTTP = Неопределено 
						Или (ОтветHTTP.КодСостояния <> 200 И ОтветHTTP.КодСостояния <> 201 И ОтветHTTP.КодСостояния <> 202) Тогда
						Возврат Неопределено;
					КонецЕсли;
					
					ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
					ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
				КонецЕсли;
			КонецЕсли;     
		// Шаг 5
		ИначеЕсли ПараметрыДляШага.Шаг = 5 Тогда
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0");
			Заголовки.Вставить("Accept", "application/json");
			Заголовки.Вставить("Accept-Encoding", "deflate");
			Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			Заголовки.Вставить("Connection", "keep-alive");
			
			АдресРесурса = РесурсАвторизации(СоединениеHTTP);
			
			ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
			СтруктураПараметров = Новый Соответствие;
			СтруктураПараметров.Вставить("client_id", КлиентИнтеграцииСРЭЦ.client_id);
			СтруктураПараметров.Вставить("client_secret", КлиентИнтеграцииСРЭЦ.client_secret);
			СтруктураПараметров.Вставить("realm", "/customer");
			СтруктураПараметров.Вставить("grant_type", "urn:roox:params:oauth:grant-type:m2m");
			СтруктураПараметров.Вставить("service", "org-registration");
			
			СтруктураПараметров.Вставить("_eventId", "validate");
			СтруктураПараметров.Вставить("otpCode", ПараметрыДляШага.otpCode);   
			СтруктураПараметров.Вставить("execution", ПараметрыДляШага.execution);
			СтруктураПараметров.Вставить("response_type", "token cookie");
			
			ТелоЗапроса = СтруктуруВForm(СтруктураПараметров);
			ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
			
			Если ОтветHTTP = Неопределено 
				Или (ОтветHTTP.КодСостояния <> 200 И ОтветHTTP.КодСостояния <> 201 И ОтветHTTP.КодСостояния <> 202) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
			ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектОтвет;
	
КонецФункции

Функция СтруктуруВForm(СтруктураПараметров)
	
	Результат = "";
	Для Каждого КиЗ Из СтруктураПараметров Цикл
		Результат = Результат + ?(Результат = "", "", "&") + Киз.Ключ + "=" + КодироватьСтроку(КиЗ.Значение, СпособКодированияСтроки.КодировкаURL);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьЗаписьДокумента(Документ, КодДокументаРЭЦ, КлючСессии, СоединениеHTTP = Неопределено) Экспорт
	
	Если СоединениеHTTP = Неопределено Тогда
		СоединениеHTTP = СоединениеССервисомРЭЦ();
	КонецЕсли;
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	  
	ДатаДокумента = УниверсальноеВремя(ТекущаяДатаСеанса());     
	ДатаРегистрации = ТекущаяДатаСеанса();    
	
	НаименованиеОтчетаДляРЭЦ = ДокументооборотСРЭЦКлиентСервер.ПолучитьНаименованиеОтчетаДляРЭЦПоКоду(КодДокументаРЭЦ);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("description", НаименованиеОтчетаДляРЭЦ);
  	СтруктураПолей.Вставить("caption", НаименованиеОтчетаДляРЭЦ);
	СтруктураПолей.Вставить("docKind", "0");
	СтруктураПолей.Вставить("dateDoc", XMLСтрока(ДатаДокумента) + ".000+0000");  
	СтруктураПолей.Вставить("regDate", Формат(ДатаРегистрации, "ДФ=yyyy-MM-dd"));
	СтруктураПолей.Вставить("regNumber", XMLСтрока(Документ));
	СтруктураПолей.Вставить("index", "0");
	СтруктураПолей.Вставить("source", "1C / 0% НДС");
	
	СтруктураТела = Новый Структура("fields", СтруктураПолей);
	
	ТелоЗапроса = ПолучитьJSONИзОбъекта(СтруктураТела);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Proxy-Connection", "Keep-Alive");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	
	АдресРесурса = РесурсЗаписиДокумента(СоединениеHTTP) + КодДокументаРЭЦ + "/items";
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
	ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
	
	Возврат ОбъектОтвет;
	
КонецФункции

Функция ЗагрузитьФайлПакета(UUIDЗаписи, КодДокументаРЭЦ, Пакет, КлючСессии, СоединениеHTTP = Неопределено) Экспорт
	
	Если СоединениеHTTP = Неопределено Тогда
		СоединениеHTTP = СоединениеССервисомРЭЦ();
	КонецЕсли;
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделительМультисообщения = "----MessageBoundary1CRETS";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + РазделительМультисообщения);
	Заголовки.Вставить("Proxy-Connection", "Keep-Alive");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	
	ТелоПоток = Новый ПотокВПамяти();
	
	ПакетДвоичныеДанные = ПолучитьИзВременногоХранилища(Пакет.АдресФайлаВыгрузки);
	
	ЗаписьДанных = Новый ЗаписьДанных(ТелоПоток,,,,"");               
	ЗаписьДанных.ЗаписатьСтроку("--" + РазделительМультисообщения);
	ЗаписьДанных.Записать(СоздатьСообщение_XML("file", Пакет.ИмяФайлаВыгрузки, ПакетДвоичныеДанные)); 
		ЗаписьДанных.ЗаписатьСимволы(Символы.ВК); 
		ЗаписьДанных.ЗаписатьСимволы(Символы.ПС);
	ЗаписьДанных.ЗаписатьСтроку("--" + РазделительМультисообщения + "--");
	ЗаписьДанных.Закрыть();
	ТелоДвоичныеДанные = ТелоПоток.ЗакрытьИПолучитьДвоичныеДанные();
		
	АдресРесурса = РесурсЗаписиДокумента(СоединениеHTTP) + КодДокументаРЭЦ + "/items/" + UUIDЗаписи + "/file";
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ТелоДвоичныеДанные);
	
	ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	
	Возврат ОтветHTTP.КодСостояния = 200;
	
КонецФункции

Функция ЗапуститьПроцесс(Клиент, МассивЗагруженныхДокументов, КлючСессии, СоединениеHTTP = Неопределено) Экспорт
	
	Если СоединениеHTTP = Неопределено Тогда
		СоединениеHTTP = СоединениеССервисомРЭЦ();
	КонецЕсли;
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Proxy-Connection", "Keep-Alive");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	
	АдресРесурса = РесурсСтартаПроцессаНаСервере(СоединениеHTTP);
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки); 
	
	СтруктураТела = Новый Структура; 
	Для Каждого ЗагруженныйДокумент Из МассивЗагруженныхДокументов Цикл   
		ОписаниеДокумента = Новый Структура;
		ОписаниеДокумента.Вставить("description", ДокументооборотСРЭЦКлиентСервер.ПолучитьНаименованиеОтчетаДляРЭЦПоКоду(ЗагруженныйДокумент.Ключ));
		ОписаниеДокумента.Вставить("uuid", ЗагруженныйДокумент.Значение);
		СтруктураТела.Вставить(ЗагруженныйДокумент.Ключ, ОписаниеДокумента);  
	КонецЦикла;
	
	ТелоЗапроса = ПолучитьJSONИзОбъекта(СтруктураТела);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
	ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
	
	Возврат ОбъектОтвет;
	
КонецФункции

	
Функция СоздатьСообщение_XML(ИмяСообщения, ИмяФайла, СообщениеДвоичныеДанные)   
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяСообщения + """; filename=""" + ИмяФайла + """");
	Если СтрЗаканчиваетсяНа(ИмяФайла, ".xml") Тогда
		ТипMIME = "text/xml";
	ИначеЕсли СтрЗаканчиваетсяНа(ИмяФайла, ".pdf") Тогда
		ТипMIME = "application/pdf";
	Иначе
		ЧастиИмени = СтрРазделить(ИмяФайла, ".");
		Если ЧастиИмени.Количество() > 1 Тогда
			ТипMIME = "image/" + ЧастиИмени[ЧастиИмени.ВГраница()];	
		КонецЕсли;
	КонецЕсли;                                
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: " + ТипMIME);
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.Записать(СообщениеДвоичныеДанные);
	ЗаписьДанных.Закрыть();

	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
КонецФункции	

Функция ПолучитьОбъектИзJSON(Текст)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Текст);
	Объект = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Объект;
	
КонецФункции

Функция ПолучитьJSONИзОбъекта(Объект)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);

	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции


Функция ПолучитьСтатусОтчета(Ссылка, ПараметрыАутентификации) Экспорт
		
	СоединениеHTTP = СоединениеССервисомРЭЦ(); 
	
	Результат = Новый Структура("Статус, Сертификаты", Неопределено, Новый Массив);
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	КлючСессии = "sso_1.0_" + ПараметрыАутентификации.access_token;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Proxy-Connection", "Keep-Alive");
	Заголовки.Вставить("camundaId", "camunda-mdm");  
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	
	АдресРесурса = РесурсПолученияВложенийПроцесса(СоединениеHTTP) + Ссылка.Идентификатор + "/attachments";
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
		ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
		ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);	
		АттачментИД = Неопределено;
		ИмяФайлаАттачмента = Неопределено;
		Если ОбъектОтвет.Свойство("content") <> Неопределено Тогда
			Для Каждого Аттачмент Из ОбъектОтвет.content Цикл
				Если Аттачмент.description = ОписаниеАттачментаОтвета() Тогда
					АттачментИД = Аттачмент.id;
					ИмяФайлаАттачмента = Аттачмент.name;
					Прервать;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если АттачментИД <> Неопределено Тогда
			АдресРесурса = РесурсПолученияВложенийПроцесса(СоединениеHTTP) + Ссылка.Идентификатор + "/attachments/" + АттачментИД + "/download";	
			ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
			Если ОтветHTTP.КодСостояния = 200 Тогда
				ТекстОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
				ОбъектОтвет = ПолучитьОбъектИзJSON(ТекстОтвет);
				
				ОтправкаОбъект = Ссылка.ПолучитьОбъект();
				ОтправкаОбъект.ДатаПолученияРезультата = ТекущаяДатаСеанса();
				Если ОбъектОтвет.status = "success" Тогда
					ОтправкаОбъект.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан; 
					// Получаем подписи для каждого файла
					Для Каждого ДокументКиЗ Из ОбъектОтвет.ECMSignedDocuments Цикл  
						Для Каждого ИдФайла Из ДокументКиЗ.Значение.files Цикл
							АдресРесурса = РесурсЗаписиДокумента(СоединениеHTTP) + ДокументКиЗ.Ключ + "/items/" + ДокументКиЗ.Значение.uuid + "/file/" + ИдФайла;
							ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
							ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
							Если ОтветHTTP.КодСостояния = 200 Тогда
								ТекстОтветФайл = ОтветHTTP.ПолучитьТелоКакСтроку();
								ОбъектОтветФайл = ПолучитьОбъектИзJSON(ТекстОтветФайл);
								Для Каждого СтруктураПодписи Из ОбъектОтветФайл.signs Цикл
									Если СтруктураПодписи.active = Истина И СтруктураПодписи.signDescription = "Подпись от имени РЭЦ" Тогда 
										ПодписьBase64 = СтруктураПодписи.signData; 
										ПодписьДД = Base64Значение(ПодписьBase64);
										АдресВХранилищеПодпись = ПоместитьВоВременноеХранилище(ПодписьДД);
										ПрисоединенныйФайлПодпись = ДобавитьФайлОтправки(Ссылка, АдресВХранилищеПодпись, ОбъектОтветФайл.name + ".sig", Истина);
										СтрокиДокументаНайдено = ОтправкаОбъект.ОтчетыСсылки.НайтиСтроки(Новый Структура("ИмяФайлаПакета", ОбъектОтветФайл.name));
										Если СтрокиДокументаНайдено.Количество() > 0 Тогда
											СтрокиДокументаНайдено[0].ПакетСПодписьюРЭЦ = ПрисоединенныйФайлПодпись;
											СтрокиДокументаНайдено[0].ОтпечатокСертификатаРЭЦ = ПолучитьОтпечатокСертификатаИзПодписи(ПодписьДД, Результат.Сертификаты);
										КонецЕсли;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				Иначе
					ОтправкаОбъект.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;		
				
				Результат.Статус = ОтправкаОбъект.СтатусОтправки; 
				
				АдресВХранилище = ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеИзСтроки(ТекстОтвет));
				ПрисоединенныйФайл = ДобавитьФайлОтправки(Ссылка, АдресВХранилище, ИмяФайлаАттачмента, Истина);
				ОтправкаОбъект.Протокол = ПрисоединенныйФайл;
				ОтправкаОбъект.Записать();     
				
				// Завершаем процесс на сервере РЭЦ
				АдресРесурса = РесурсПолученияВложенийПроцесса(СоединениеHTTP) + Ссылка.Идентификатор + "/message";
				ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);  
				
				СтруктураТела = Новый Структура;   
				СтруктураТела.Вставить("messageName", "ConfirmGetResult1C");
				СтруктураТела.Вставить("processInstanceId", Ссылка.Идентификатор);
				
				ТелоСтрока = ПолучитьJSONИзОбъекта(СтруктураТела); 
				ЗапросHTTP.УстановитьТелоИзСтроки(ТелоСтрока); 
				СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Результат;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции    

Функция ПолучитьОтпечатокСертификатаИзПодписи(ДвПодпись, СертификатыДляИмпорта) 
	
	Отпечаток = "1715225bd7e9cb3292ce8d03c745682a35a89337";
	
	Попытка
		СвойстваПодписи = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(ДвПодпись);
	Исключение
		СвойстваПодписи = Неопределено;
	КонецПопытки;
	
	Если СвойстваПодписи <> Неопределено Тогда		
		Для Каждого Подписант Из СвойстваПодписи.Подписанты Цикл					
			Если НЕ Подписант.Сертификат.Свойство("Сертификат") Тогда
				Продолжить;
			КонецЕсли;
			
			ДвДанныеСертификат = Подписант.Сертификат.Сертификат; 
			Сертификат = Новый СертификатКриптографии(ДвДанныеСертификат);   

			Отпечаток = НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Сертификат.Отпечаток));	
			
			УстанавливаемыйСертификат = Новый Структура;  
			УстанавливаемыйСертификат.Вставить("Отпечаток", Отпечаток);
			УстанавливаемыйСертификат.Вставить("Хранилище", "AddressBook");
			УстанавливаемыйСертификат.Вставить("Данные", Base64Строка(ДвДанныеСертификат));
			СертификатыДляИмпорта.Добавить(УстанавливаемыйСертификат);	
		КонецЦикла;		
	КонецЕсли; 
	
	Возврат Отпечаток;
		
КонецФункции

Функция ОписаниеАттачментаОтвета()
	
	Возврат "zero_rate_1c.json"; 
	
КонецФункции


Функция ПолучитьНастройки(Организация) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("Сертификат", "");
	Настройки.Вставить("ИспользоватьОбмен", Ложь);
	Настройки.Вставить("ОбменНастроен", Ложь);
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаРЭЦ.ИспользоватьОбмен КАК ИспользоватьОбмен,
	|	НастройкиОбменаРЭЦ.СертификатАбонентаОтпечаток КАК Сертификат
	|ИЗ
	|	РегистрСведений.НастройкиОбменаРЭЦ КАК НастройкиОбменаРЭЦ
	|ГДЕ
	|	НастройкиОбменаРЭЦ.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Настройки, Выборка);
		Настройки.ОбменНастроен = Выборка.Сертификат <> "";
	Иначе
		ИспользоватьОбмен = Истина;
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьПризнакВеденияУчетТаможенныхДекларацийЭкспорт(ИспользоватьОбмен);
		Настройки.ИспользоватьОбмен = ИспользоватьОбмен;	
	КонецЕсли;
		
	Возврат Настройки;
	
КонецФункции

Функция СохранитьНастройки(Организация, Сертификат) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкиОбменаРЭЦ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.ИспользоватьОбмен = Истина;
	МенеджерЗаписи.СертификатАбонентаОтпечаток = Сертификат;
	МенеджерЗаписи.Записать();
	
	Возврат ПолучитьНастройки(Организация);
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчета(ОтчетСсылка) Экспорт
	
	Если ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка.ОтправкиРЭЦ") Тогда
		Возврат ОтчетСсылка;
	КонецЕсли;
	
	Отправка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтправкиРЭЦОтчетыСсылки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОтправкиРЭЦ.ОтчетыСсылки КАК ОтправкиРЭЦОтчетыСсылки
	|ГДЕ
	|	ОтправкиРЭЦОтчетыСсылки.ОтчетСсылка = &ЭтотОтчет
	|	И ОтправкиРЭЦОтчетыСсылки.Ссылка.СтатусОтправки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ВКонверте)
	|	И НЕ ОтправкиРЭЦОтчетыСсылки.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправкиРЭЦОтчетыСсылки.Ссылка.ДатаОтправки УБЫВ";
	
	Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Отправка = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Отправка;
	
КонецФункции

Функция ПолучитьНеЗавершенныеОтправки(Организация) Экспорт
	
	Настройки = ПолучитьНастройки(Организация);
	Если ЗначениеЗаполнено(Настройки) И Настройки.ИспользоватьОбмен Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтправкиРЭЦ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОтправкиРЭЦ КАК ОтправкиРЭЦ
		|ГДЕ
		|	ОтправкиРЭЦ.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Отправлен)";
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;                                                            	
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормыНастроек() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Организации.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПометкаУдаления,
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиОбменаРЭЦ.ИспользоватьОбмен, ЛОЖЬ)
	|			ТОГДА ""Используется""
	|		ИНАЧЕ ""Не используется""
	|	КОНЕЦ КАК ВидОбменаСКонтролирующимиОрганами
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаРЭЦ КАК НастройкиОбменаРЭЦ
	|		ПО (НастройкиОбменаРЭЦ.Организация = Организации.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстыДляЗапросаСпискаНастроекОбмена() Экспорт
	
	ПеречислениеКолонок =
		"	ЕСТЬNULL(НастройкиОбменаРЭЦ.ИспользоватьОбмен, ЛОЖЬ) КАК НастройкиОбменаРЭЦ_ИспользоватьОбмен,
		|	ЕСТЬNULL(НастройкиОбменаРЭЦ.СертификатАбонентаОтпечаток, """") КАК НастройкиОбменаРЭЦ_СертификатАбонентаОтпечаток";
	
	СоединениеСОрганизацией =
		"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаРЭЦ КАК НастройкиОбменаРЭЦ
		|		ПО НастройкиОбменаРЭЦ.Организация = Организации.Ссылка";
	
	Возврат Новый Структура("ПеречислениеКолонок, СоединениеСОрганизацией", ПеречислениеКолонок, СоединениеСОрганизацией);
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВсеОтправки() Экспорт
	
	ТекстЗапроса = 
	"
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтправкиРЭЦ.ПометкаУдаления КАК ПометкаУдаления,
	|	ОтправкиРЭЦ.Ссылка КАК Ссылка,
	|	""РЭЦ"" КАК Поле1,
	|	"""" КАК Поле2,
	|	ОтправкиРЭЦ.Организация КАК Организация,
	|	ОтправкиРЭЦ.ПредставлениеПериода КАК ПредставлениеПериода,
	|	ОтправкиРЭЦ.ПредставлениеВидаДокумента КАК ПредставлениеВидаДокумента,
	|	ОтправкиРЭЦ.ДатаОтправки КАК ДатаОтправки,
	|	ВЫБОР
	|		КОГДА ГОД(ОтправкиРЭЦ.ДатаЗакрытия) = 3999
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ОтправкиРЭЦ.ДатаЗакрытия
	|	КОНЕЦ КАК Поле3,
	|	ОтправкиРЭЦ.Идентификатор КАК Идентификатор,
	|	НЕОПРЕДЕЛЕНО КАК Поле4
	|ИЗ
	|	Справочник.ОтправкиРЭЦ КАК ОтправкиРЭЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиРЭЦ.ОтчетыСсылки КАК ОтправкиРЭЦОтчетыСсылки
	|		ПО ОтправкиРЭЦ.Ссылка = ОтправкиРЭЦОтчетыСсылки.Ссылка
	|ГДЕ
	|	ОтправкиРЭЦОтчетыСсылки.ОтчетСсылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтключитьОбмен(Организация, ОтключенОбмен) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиОбменаРЭЦ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.ИспользоватьОбмен Тогда
				Запись.ИспользоватьОбмен = Ложь;
				ОтключенОбмен = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции  

Функция ВыгрузитьФайлыВложений(ФайлСсылка, МассивВыгрузки, ИменаФайлов) Экспорт
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка, Ложь);    
	
	Если ДвоичныеДанныеФайла <> Неопределено Тогда
		СтруктураФайла = Новый Структура;
		СтруктураФайла.Вставить("ИмяФайлаВыгрузки", ФайлСсылка.Наименование + "." + ФайлСсылка.Расширение); 
		СтруктураФайла.Вставить("АдресФайлаВыгрузки", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор));
		СтруктураФайла.Вставить("ТипФайлаВыгрузки", "Вложение");    
		
		МассивВыгрузки.Добавить(СтруктураФайла);
		
		ИменаФайлов.Добавить(СтруктураФайла.ИмяФайлаВыгрузки);
		
		Результат = Истина;
	Иначе
		Результат = Ложь;	
	КонецЕсли;   
	
	Возврат Результат;
	
КонецФункции

Функция СоединениеССервисомРЭЦ()
	
	Попытка
		Соединение = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(ДокументооборотСРЭЦКлиентСервер.АдресСервера(),, 120);		
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция РесурсАвторизации(Соединение = Неопределено)
	
	РесурсНаСервере = "/sso/oauth2/access_token";
	
	Возврат ДокументооборотСКО.ПолучитьЗаменяемоеЗначениеТестовогоСервера1С(РесурсНаСервере, "{RETS}" + РесурсНаСервере, Соединение);
	
КонецФункции

Функция РесурсПоискаОрганизации(Соединение = Неопределено)
	
	РесурсНаСервере = "/mdm-adapter/api/v2/public/org";
	
	Возврат ДокументооборотСКО.ПолучитьЗаменяемоеЗначениеТестовогоСервера1С(РесурсНаСервере, "{RETS}" + РесурсНаСервере, Соединение);
	
КонецФункции

Функция РесурсСтартаПроцессаНаСервере(Соединение = Неопределено)

	РесурсНаСервере = "/zvat-1c-adapter/api/v1/start";
	
	Возврат ДокументооборотСКО.ПолучитьЗаменяемоеЗначениеТестовогоСервера1С(РесурсНаСервере, "{RETS}" + РесурсНаСервере, Соединение);

КонецФункции

Функция РесурсПолученияВложенийПроцесса(Соединение = Неопределено)
	
	РесурсНаСервере = "/bpmn/api/v1/bpmn/process-instance/";
	
	Возврат ДокументооборотСКО.ПолучитьЗаменяемоеЗначениеТестовогоСервера1С(РесурсНаСервере, "{RETS}" + РесурсНаСервере, Соединение);
	
КонецФункции

Функция РесурсЗаписиДокумента(Соединение = Неопределено)
	
	 РесурсНаСервере = "/ecm-adapter/api/v1/document/";
	 
	 Возврат ДокументооборотСКО.ПолучитьЗаменяемоеЗначениеТестовогоСервера1С(РесурсНаСервере, "{RETS}" + РесурсНаСервере, Соединение);
	
КонецФункции


Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Документооборот с РЭЦ';
			|en = 'Документооборот с РЭЦ'", ОбщегоНазначения.КодОсновногоЯзыка()),
	    УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
КонецПроцедуры

Функция ПроверитьВозможностьРедактированияОтчета(ОтчетСсылка) Экспорт   
	
	Если НЕ ЗначениеЗаполнено(ОтчетСсылка) Тогда
		Возврат Истина;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;    
	Запрос.УстановитьПараметр("ОтчетСсылка", ОтчетСсылка);  
	СтатусыНедоступности = Новый Массив;
	СтатусыНедоступности.Добавить(Перечисления.СтатусыОтправки.Отправлен);
	СтатусыНедоступности.Добавить(Перечисления.СтатусыОтправки.Сдан);
	Запрос.УстановитьПараметр("СтатусыНедоступности", СтатусыНедоступности);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОтправкиРЭЦ.Ссылка КАК Ссылка,
	               |	ОтправкиРЭЦ.СтатусОтправки КАК СтатусОтправки,
	               |	ОтправкиРЭЦ.ДатаОтправки КАК ДатаОтправки
	               |ИЗ
	               |	Справочник.ОтправкиРЭЦ.ОтчетыСсылки КАК ОтправкиРЭЦОтчетыСсылки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиРЭЦ КАК ОтправкиРЭЦ
	               |		ПО ОтправкиРЭЦОтчетыСсылки.Ссылка = ОтправкиРЭЦ.Ссылка
	               |ГДЕ
	               |	ОтправкиРЭЦ.СтатусОтправки В(&СтатусыНедоступности)
	               |	И ОтправкиРЭЦОтчетыСсылки.ОтчетСсылка = &ОтчетСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОтправкиРЭЦ.ДатаОтправки";
	
	ВозможностьРедактировать = Запрос.Выполнить().Пустой();
	
	Результат = Новый Структура;
	Результат.Вставить("ВозможностьРедактировать", ВозможностьРедактировать);
	Если ВозможностьРедактировать Тогда
		Результат.Вставить("Проверен", Ложь);
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Вставить("Проверен", ?(Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан, Истина, Ложь));	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;	
	
КонецФункции    


Функция ПерфиксыФайловПодписываемыхРЭЦ()
	
	МассивПрефиксов = Новый Массив;
	МассивПрефиксов.Добавить("KO_RRTRDNDS.2_");
	МассивПрефиксов.Добавить("KO_RRTRDNDS_");
	МассивПрефиксов.Добавить("KO_RRTDNDS.2_");
	МассивПрефиксов.Добавить("KO_RRTDNDS_");

	МассивПрефиксов.Добавить("NO_NDS_");
	МассивПрефиксов.Добавить("NO_NDS.8_");
	МассивПрефиксов.Добавить("NO_NDS.9_");
	
	Возврат МассивПрефиксов;
	
КонецФункции

Процедура ОбработатьМассивДанныхВыгрузки(ДокументСсылка, МассивДанныхВыгрузки) Экспорт  
	
	МассивПрефиксов = ПерфиксыФайловПодписываемыхРЭЦ();
	
	ОбработанныйМассивДанныхВыгрузки = Новый Массив;
	Для Каждого ДанныеВыгрузки Из МассивДанныхВыгрузки Цикл
		ФайлОтправляетсяВРЭЦ = Ложь;
		Для Каждого Префикс Из МассивПрефиксов Цикл
			Если Лев(ДанныеВыгрузки.ИмяФайлаВыгрузки, СтрДлина(Префикс)) = Префикс Тогда
				ФайлОтправляетсяВРЭЦ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ФайлОтправляетсяВРЭЦ = Ложь Тогда
			ОбработанныйМассивДанныхВыгрузки.Добавить(ДанныеВыгрузки);	
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	ОтправкиРЭЦ.Ссылка КАК Ссылка,  
						   |	ОтправкиРЭЦ.СтатусОтправки КАК СтатусОтправки,
			               |	ОтправкиРЭЦОтчетыСсылки.ПакетСПодписьюРЭЦ КАК ПакетСПодписьюРЭЦ,
			               |	ОтправкиРЭЦ.ДатаОтправки КАК ДатаОтправки,
			               |	ОтправкиРЭЦОтчетыСсылки.Пакет КАК Пакет,
			               |	ОтправкиРЭЦОтчетыСсылки.ОтпечатокСертификатаРЭЦ КАК ОтпечатокСертификатаРЭЦ
			               |ИЗ  
						   |	Справочник.ОтправкиРЭЦ КАК ОтправкиРЭЦ	
			               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиРЭЦ.ОтчетыСсылки КАК ОтправкиРЭЦОтчетыСсылки 
						   |		ПО ОтправкиРЭЦ.Ссылка = ОтправкиРЭЦОтчетыСсылки.Ссылка
			               |ГДЕ
			               |	ОтправкиРЭЦОтчетыСсылки.ОтчетСсылка = &ОтчетСсылка 
			               |	И ПОДСТРОКА(ОтправкиРЭЦОтчетыСсылки.ИмяФайлаПакета, 1, &ДлинаПрефикса) = &Префикс 
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДатаОтправки УБЫВ";
			
			Запрос.УстановитьПараметр("ОтчетСсылка", ДокументСсылка);
			Запрос.УстановитьПараметр("ДлинаПрефикса", СтрДлина(Префикс));
			Запрос.УстановитьПараметр("Префикс", Префикс);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
				Если Выборка.СтатусОтправки <> Перечисления.СтатусыОтправки.Сдан Тогда
					ОбработанныйМассивДанныхВыгрузки.Добавить(ДанныеВыгрузки);
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка.ПакетСПодписьюРЭЦ) = Ложь Тогда
					ОбработанныйМассивДанныхВыгрузки.Добавить(ДанныеВыгрузки);
					Продолжить;
				КонецЕсли;
				ДвоичныеДанныеПодписиРЭЦ = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ПакетСПодписьюРЭЦ, Ложь);
				Если ДвоичныеДанныеПодписиРЭЦ = Неопределено Тогда    
					ОбработанныйМассивДанныхВыгрузки.Добавить(ДанныеВыгрузки);
					Продолжить;
				КонецЕсли;
				ДвоичныеДанныеПодписанногоФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Пакет, Ложь); 
				ПоместитьВоВременноеХранилище(ДвоичныеДанныеПодписанногоФайла, ДанныеВыгрузки.АдресФайлаВыгрузки); 
				ДанныеВыгрузки.ИмяФайлаВыгрузки	= Выборка.Пакет.ИсходноеИмяФайла;
				ОбработанныйМассивДанныхВыгрузки.Добавить(ДанныеВыгрузки);
			Иначе
				ОбработанныйМассивДанныхВыгрузки.Добавить(ДанныеВыгрузки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	МассивДанныхВыгрузки = ОбработанныйМассивДанныхВыгрузки;
	
КонецПроцедуры     


Процедура ДополнитьДеревоПодписямиРЭЦ(ВложенияДИВ, ОтчетСсылка) Экспорт 
	
	ОбработкаЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();       
	
	Если ОбработкаЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПрефиксов = ПерфиксыФайловПодписываемыхРЭЦ();                              
	
	ПоследнийИндекс = ВложенияДИВ.Количество() - 1;
	Для К = 0 По ПоследнийИндекс Цикл
		ВложениеДИВ = ВложенияДИВ[ПоследнийИндекс - К];	
		ФайлОтправляетсяВРЭЦ = Ложь;
		Для Каждого Префикс Из МассивПрефиксов Цикл
			Если Лев(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, СтрДлина(Префикс)) = Префикс Тогда
				ФайлОтправляетсяВРЭЦ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФайлОтправляетсяВРЭЦ = Истина Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	ОтправкиРЭЦ.Ссылка КАК Ссылка, 
						   |	ОтправкиРЭЦ.СтатусОтправки КАК СтатусОтправки,
			               |	ОтправкиРЭЦОтчетыСсылки.ПакетСПодписьюРЭЦ КАК ПакетСПодписьюРЭЦ,
			               |	ОтправкиРЭЦ.ДатаОтправки КАК ДатаОтправки,
			               |	ОтправкиРЭЦОтчетыСсылки.Пакет КАК Пакет,
			               |	ОтправкиРЭЦОтчетыСсылки.ОтпечатокСертификатаРЭЦ КАК ОтпечатокСертификатаРЭЦ
			               |ИЗ
			               |	Справочник.ОтправкиРЭЦ КАК ОтправкиРЭЦ	
			               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиРЭЦ.ОтчетыСсылки КАК ОтправкиРЭЦОтчетыСсылки 
						   |		ПО ОтправкиРЭЦ.Ссылка = ОтправкиРЭЦОтчетыСсылки.Ссылка
			               |ГДЕ
			               |	ОтправкиРЭЦОтчетыСсылки.ОтчетСсылка = &ОтчетСсылка    
			               |	И ПОДСТРОКА(ОтправкиРЭЦОтчетыСсылки.ИмяФайлаПакета, 1, &ДлинаПрефикса) = &Префикс 
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДатаОтправки УБЫВ";
			
			Запрос.УстановитьПараметр("ОтчетСсылка", ОтчетСсылка);
			Запрос.УстановитьПараметр("ДлинаПрефикса", СтрДлина(Префикс));
			Запрос.УстановитьПараметр("Префикс", Префикс);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда                   
				Если Выборка.СтатусОтправки <> Перечисления.СтатусыОтправки.Сдан Тогда
					Продолжить;	
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка.ПакетСПодписьюРЭЦ) = Ложь Тогда
					Продолжить;
				КонецЕсли;
				ДвоичныеДанныеПодписиРЭЦ = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ПакетСПодписьюРЭЦ, Ложь);
				Если ДвоичныеДанныеПодписиРЭЦ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Cохраняем в регистр.                           
				ИсходноеИмяФайла = Выборка.Пакет.ИсходноеИмяФайла;
				ИмяФайлаПодписиРЭЦ = ОбработкаЭДО.СгенерироватьИмяФайлаДокументаВСоставеПакета();
				РезультатДобавленияПодписиВРегистр = ОбработкаЭДО.ДобавитьСодержимоеТранспортногоКонтейнера(ВложениеДИВ.ТранспортноеСообщение,
					Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись,
					Новый Структура("Строка64", Base64Строка(ДвоичныеДанныеПодписиРЭЦ)),
					ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписиРЭЦ).Имя,
					Выборка.ПакетСПодписьюРЭЦ.Размер,
					ИсходноеИмяФайла,
					?(ЗначениеЗаполнено(Выборка.ОтпечатокСертификатаРЭЦ), Выборка.ОтпечатокСертификатаРЭЦ, Неопределено),
					Перечисления.СтатусыПроверкиЭЦП.Валидна,
					Ложь);
					
				Если РезультатДобавленияПодписиВРегистр = Истина Тогда
					НовСтр = ВложенияДИВ.Добавить();
					НовСтр.ИмяФайла = ИмяФайлаПодписиРЭЦ;
					НовСтр.Данные = Новый ХранилищеЗначения(ДвоичныеДанныеПодписиРЭЦ, Новый СжатиеДанных(0));
					НовСтр.ЭЦПИмяПодписанногоФайла = ИсходноеИмяФайла;
					НовСтр.ЭЦПЭтоПодписьАбонента = Ложь;
					НовСтр.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.xml;
					НовСтр.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					НовСтр.ТранспортноеСообщение = ВложениеДИВ.ТранспортноеСообщение;
					НовСтр.Идентификатор = "";
					НовСтр.ВАрхиве = Ложь;
					НовСтр.ЭЦПСтатусПроверки = Перечисления.СтатусыПроверкиЭЦП.Валидна;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры         

#КонецОбласти