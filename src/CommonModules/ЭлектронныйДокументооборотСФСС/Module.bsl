#Область ПрограммныйИнтерфейс

// Выполняет фоновую загрузку сообщений, при получении которых ранее возникала ошибка соединения.
Процедура ФоноваяОтправкаЗапросовСЭДО() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО);
	
	УдалитьУстаревшиеЗапросыИзОчередиФоновойЗагрузки();
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	Если Организации.Количество() = 0 Тогда
		ОтключитьФоновыйОбменСЭДО();
		Возврат;
	КонецЕсли;
	
	// Отключаем выполнения задания в пиковые часы.
	Если ВремяЗапускаЗаданияПопадаетВПиковыеЧасы() Тогда
		ТекстСобытия = НСтр("ru = 'Фоновая загрузка сообщений СЭДО не будет выполняться в пиковое время.';
							|en = 'Фоновая загрузка сообщений СЭДО не будет выполняться в пиковое время.'");
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		Возврат;
	КонецЕсли;
	
	УспешноВыполненныеЗапросы = Новый Массив;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗапросыДляПовторнойОтправкиСЭДО.Идентификатор КАК Идентификатор,
		|	ЗапросыДляПовторнойОтправкиСЭДО.Организация КАК Организация,
		|	ЗапросыДляПовторнойОтправкиСЭДО.КодСостояния КАК КодСостояния
		|ИЗ
		|	РегистрСведений.ЗапросыДляПовторнойОтправкиСЭДО КАК ЗапросыДляПовторнойОтправкиСЭДО
		|ГДЕ
		|	НЕ ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера
		|	И ЗапросыДляПовторнойОтправкиСЭДО.ИдентификаторОсновногоЗапроса = """"";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = Запрос.Выполнить().Выгрузить();
	
	Если Набор.Количество() = 0 Тогда
		ОтключитьФоновыйОбменСЭДО();
		Возврат;
	КонецЕсли;
	
	ТекстСобытия = НСтр("ru = 'Запущена фоновая загрузка сообщений СЭДО, по которым возникла ошибка соединения в клиентском сеансе.';
						|en = 'Запущена фоновая загрузка сообщений СЭДО, по которым возникла ошибка соединения в клиентском сеансе.'");
	ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
	
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("ТекстОшибки");
	НомерСообщения = 1;
	ТребуетсяДлительноеОжидание = Ложь;
	СвойстваОбменаПоОрганизициям = Новый Соответствие;
	Для Каждого Запрос Из Набор Цикл
		
		Идентификатор = Запрос.Идентификатор;
		Организация = Запрос.Организация;
		
		Если СвойстваОбменаПоОрганизициям[Организация] = Неопределено Тогда
			НастройкиВызова = Новый Структура;
			НастройкиВызова.Вставить("БезУчетаПользователя", Истина);
			СвойстваОбменаПоСЭДО =
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(Организация,,
					НастройкиВызова);
			СвойстваОбменаПоОрганизициям.Вставить(Организация, СвойстваОбменаПоСЭДО);
		Иначе
			СвойстваОбменаПоСЭДО = СвойстваОбменаПоОрганизициям[Организация];
		КонецЕсли;
		
		Если НЕ СвойстваОбменаПоСЭДО.ОбменПоСЭДОНапрямую Тогда
			Продолжить;
		КонецЕсли;
		
		Шаблон = НСтр("ru = 'Фоновое получение данных сообщения СЭДО %1 по организации %2.';
						|en = 'Фоновое получение данных сообщения СЭДО %1 по организации %2.'");
		ТекстСобытия = СтрШаблон(Шаблон, Идентификатор, Организация);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		
		Запись = РегистрыСведений.ЗапросыДляПовторнойОтправкиСЭДО.СоздатьМенеджерЗаписи();
		Запись.Организация = Организация;
		Запись.Идентификатор = Идентификатор;
		Запись.Прочитать();
		
		ТекстЗапроса = Запись.ДанныеЗапроса.Получить();
		АдресЗапроса = ПоместитьВоВременноеХранилище(ТекстЗапроса);
		Попытка
			РезультатОтправкиЗапроса = КонтекстЭДОСервер.ОтправитьЗапросСервисуСЭДОФСС(
				Организация,
				Запись.Операция,
				АдресЗапроса,
				СвойстваОбменаПоСЭДО.ОбменПоСЭДОНапрямую);
		Исключение
			Ошибка = Ошибки.Добавить();
			Ошибка.ТекстОшибки = НСтр("ru = 'При отправке запроса на сервер СЭДО возникла ошибка.';
										|en = 'При отправке запроса на сервер СЭДО возникла ошибка.'");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Шаблон = НСтр("ru = 'При отправке запроса на сервер СЭДО по сообщению %1 возникла ошибка:';
							|en = 'При отправке запроса на сервер СЭДО по сообщению %1 возникла ошибка:'")
				+ Символы.ПС + "%2";
			ТекстОшибки = СтрШаблон(Шаблон, Идентификатор, ТекстОшибки);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		КонецПопытки;
		
		БылаОшибкаСоединения = Ложь;
		Если НЕ ПриВыполненииЗапросаВозниклаОшибкаСоединения(РезультатОтправкиЗапроса) Тогда
			
			// Был получен ответ сервера.
			Запись.БылПолученОтветСервера = Истина;
			// Очищаем данные запроса.
			Запись.ДанныеЗапроса = Неопределено;
			// Помещаем в регистр данные ответа.
			ТекстОтвета= ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP);
			Запись.ДанныеОтвета = Новый ХранилищеЗначения(ТекстОтвета, Новый СжатиеДанных(9));
			
			Шаблон = НСтр("ru = 'Сообщение СЭДО %1 по организации %2 было успешно загружено в регламентном задании.';
							|en = 'Сообщение СЭДО %1 по организации %2 было успешно загружено в регламентном задании.'");
			ТекстСобытия = СтрШаблон(Шаблон, Идентификатор, Организация);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
			
		Иначе
			
			// Сохраняем данные запроса в случае ошибки.
			ПараметрыЗапроса = ЭлектронныйДокументооборотСФССКлиентСервер.ПараметрыСохраненияЗапросаСЭДОФСС(
				Организация, Запись.Операция);
			ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
			ПараметрыЗапроса.ОписаниеОшибки 		= ОписаниеОшибки;
			ПараметрыЗапроса.АдресЗапросаSOAP 		= АдресЗапроса;
			ПараметрыЗапроса.АдресОтветаSOAP 		= РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP;
			ПараметрыЗапроса.АдресРесурса 			= РезультатОтправкиЗапроса.АдресРесурса;
			ПараметрыЗапроса.АдресСервера 			= РезультатОтправкиЗапроса.АдресСервера;
			ПараметрыЗапроса.КодСостояния 			= РезультатОтправкиЗапроса.КодСостояния;
			ПараметрыЗапроса.ТипВзаимодействияСЭДО 	= Запись.ТипВзаимодействия;
			ПараметрыЗапроса.УдалятьИзХранилища 	= Истина;
			ПараметрыЗапроса.ОбменЧерезОператора 	= НЕ СвойстваОбменаПоСЭДО.ОбменПоСЭДОНапрямую;
			СохранитьДанныеЗапросаСЭДО(ПараметрыЗапроса);
			
			Запись.ОписаниеОшибки = ОписаниеОшибки;
			Запись.ОшибкаСоединения = РезультатОтправкиЗапроса.ОшибкаСоединения;
			
			БылаОшибкаСоединения = Истина;
			
		КонецЕсли;
		
		Запись.КодСостояния = РезультатОтправкиЗапроса.КодСостояния;
		Запись.ДатаПопыткиПодключения = ТекущаяДатаНаСервере();
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		
		Попытка
			Запись.Записать();
		Исключение
			Ошибка = Ошибки.Добавить();
			Ошибка.ТекстОшибки = НСтр("ru = 'При записи данных регистра ЗапросыДляПовторнойОтправкиСЭДО возникла ошибка.';
										|en = 'При записи данных регистра ЗапросыДляПовторнойОтправкиСЭДО возникла ошибка.'");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Шаблон = НСтр("ru = 'При записи данных регистра ЗапросыДляПовторнойОтправкиСЭДО возникла ошибка:';
							|en = 'При записи данных регистра ЗапросыДляПовторнойОтправкиСЭДО возникла ошибка:'")
				+ Символы.ПС + "%1";
			ТекстОшибки = СтрШаблон(Шаблон, ТекстОшибки);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		КонецПопытки;
		
		Если ЭтоАдресВременногоХранилища(АдресЗапроса) Тогда
			УдалитьИзВременногоХранилища(АдресЗапроса);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP) Тогда
			УдалитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAPДвоичныеДанные) Тогда
			УдалитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAPДвоичныеДанные);
		КонецЕсли;
		
		// Делаем случайную задержку между запросами для снижения нагрузки на сервер СЭДО
		// и для более равноменого распределения запросов.
		ТекущаяДата = ТекущаяДатаСеанса();
		Генератор = Новый ГенераторСлучайныхЧисел;
		Если БылаОшибкаСоединения И НомерСообщения < Набор.Количество() Тогда
			ВремяЗадержки = 1200 + Генератор.СлучайноеЧисло(0, 600);
			ТребуетсяДлительноеОжидание = Истина;
			Прервать;
		Иначе
			ВремяЗадержки = 30 + Генератор.СлучайноеЧисло(0, 30);
		КонецЕсли;
		
		Шаблон = НСтр("ru = 'Между запросами к серверу СЭДО будет сделана задержка %1 секунд.';
						|en = 'Между запросами к серверу СЭДО будет сделана задержка %1 секунд.'");
		ТекстСобытия = СтрШаблон(Шаблон, ВремяЗадержки);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		РезультатЗадержки = Задержка(ТекущаяДата, ВремяЗадержки);
		
		ЗадержкаПоФакту = ТекущаяДатаСеанса() - ТекущаяДата;
		Если НЕ РезультатЗадержки Тогда
			Шаблон = НСтр("ru = 'Между запросами к серверу СЭДО не удалось сделать задержку %1 секунд. Время задержки составило %2 секунд.';
							|en = 'Между запросами к серверу СЭДО не удалось сделать задержку %1 секунд. Время задержки составило %2 секунд.'");
			ТекстСобытия = СтрШаблон(Шаблон, ВремяЗадержки, ЗадержкаПоФакту);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		Иначе
			Шаблон = НСтр("ru = 'Между запросами к серверу СЭДО была сделана задержка %1 секунд. Фактическое время задержки составило %2 секунд.';
							|en = 'Между запросами к серверу СЭДО была сделана задержка %1 секунд. Фактическое время задержки составило %2 секунд.'");
			ТекстСобытия = СтрШаблон(Шаблон, ВремяЗадержки, ЗадержкаПоФакту);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		КонецЕсли;
		
		НомерСообщения = НомерСообщения + 1;
		
	КонецЦикла;
	
	Если НЕ ТребуетсяДлительноеОжидание Тогда
		ВключитьФоновыйОбменСЭДО();
	Иначе
		ВключитьФоновыйОбменСЭДО(ВремяЗадержки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Ошибки.Свернуть("ТекстОшибки");
	Если Ошибки.Количество() > 0 Тогда
		СписокОшибок = Ошибки.ВыгрузитьКолонку("ТекстОшибки");
		ТекстыОшибок = СтрСоединить(СписокОшибок);
		ТекстОшибкиЗадания = НСтр("ru = 'При фоновом получении данных из СЭДО возникли ошибки:';
									|en = 'При фоновом получении данных из СЭДО возникли ошибки:'")
			+ Символы.ПС + ТекстыОшибок + Символы.ПС
			+ Символы.ПС + НСтр("ru = 'Подробную информацию об ошибках см. в технологическом журнале.';
								|en = 'Подробную информацию об ошибках см. в технологическом журнале.'");
		ВызватьИсключение(ТекстОшибкиЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обмен с сервером СЭДО ФСС из фонового задания.
Процедура ВыполнитьОбменСФСС() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменСФСС);

	УстановитьПривилегированныйРежим(Истина);

	// Удаляем устаревшие записи из регистра фоновой загрузки сообщений.
	УдалитьУстаревшиеЗапросыИзОчередиФоновойЗагрузки();
	
	Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();

	Если Организации.Количество() = 0 Тогда
		ОтключитьОбменСФСС();
		Возврат;
	КонецЕсли;

	ДатаПредыдущегоЗапуска = Дата(1, 1, 1);
	ПричинаПропуска = "";
	МинимальныйИнтервалМеждуЗапросами = 0;
	РезультатПроверки = ПроверитьВременныеОграниченияПолученияСпискаВходящихСообщенийСЭДО(
		МинимальныйИнтервалМеждуЗапросами, ДатаПредыдущегоЗапуска, ПричинаПропуска);
	Если НЕ РезультатПроверки Тогда
		// Пропускаем запуск задания по ряду условий, устанавливаем новое расписание.
		ПараметрыЗадания = ПараметрыЗаданияОбменФСС();
		ПараметрыЗадания.БылиБлокировкиИзЗаЧастыхЗапросов = Истина;
		ВключитьОбменСФСС(Ложь, ПараметрыЗадания);
		Шаблон = НСтр("ru = 'Получения списка входящих сообщений СЭДО будет пропущено по причине: %1.';
						|en = 'Получения списка входящих сообщений СЭДО будет пропущено по причине: %1.'")
			+ " " + НСтр("ru = 'Минимальный интервал между запусками %2 секунд. Предыдущий запуск выполнялся %3 UTC.';
						|en = 'Минимальный интервал между запусками %2 секунд. Предыдущий запуск выполнялся %3 UTC.'");
		ОписаниеОшибки = СтрШаблон(Шаблон, ПричинаПропуска, МинимальныйИнтервалМеждуЗапросами, ДатаПредыдущегоЗапуска);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	КлючКоличествоОшибокСоединения = "КоличествоОшибокСоединения";
	КоличествоОшибокСоединения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения, 0);
		
	КлючДатыЗагрузкиАктуальныхСообщенийПоОрганизациям = "ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям";
	ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаОбщихНастроек(),
		КлючДатыЗагрузкиАктуальныхСообщенийПоОрганизациям,
		Новый Соответствие);
	Если НЕ ТипЗнч(ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям) = Тип("Соответствие") Тогда
		ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям = Новый Соответствие;
	КонецЕсли;

	БылиОшибки = Ложь;
	БылиБлокировкиИзЗаЧастыхЗапросов = Ложь;
	ОсталосьВремениБлокировки = 0;
	БылиОшибкиСоединения = Ложь;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		ОписаниеОшибки = ОшибкаНедоступностиОбработкиДОКО();
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки");
	Минута = 60;
	Сутки = 3600 * 24;
	ВсеОрганизацииОбмениваютсяЧерезОператора = Истина;
	
	Для каждого Организация Из Организации Цикл
		
		РегистрационныйНомерФСС = РегистрационныйНомерФССОрганизации(Организация);
		Если ПустаяСтрока(РегистрационныйНомерФСС) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия = ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям[Организация];
		Если НЕ ТипЗнч(ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия) = Тип("Дата")
			И НЕ ТипЗнч(ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия) = Тип("Соответствие") Тогда
			ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия = Новый Соответствие;
		Иначе
			// Переходим от даты к соответствию.
			Если ТипЗнч(ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия) = Тип("Дата") Тогда
				ДатаПолучения = ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия;
				ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия = Новый Соответствие;
				ТипСтрахователь = ДокументооборотСФССКлиентСервер.ТипВзаимодействияСтраховательСЭДО();
				ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия.Вставить(ТипСтрахователь, ДатаПолучения);
			КонецЕсли;
		КонецЕсли;
		
		// Актуальные сообщения получаем для страхователя и при необходимости по организации (МЧД).
		ТипыВзаимодействия = ТипыВзаимодействияДляПолученияСписковСообщений(Организация);
		ДанныеПоДатеПолученияАктуальных = ДанныеПоДатеПолученияАктуальныхСообщений(ТипыВзаимодействия,
			ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия);
		ДатаПолученияАктуальныхСообщений = ДанныеПоДатеПолученияАктуальных.ДатаПолученияАктуальныхСообщений;
		ТипВзаимодействия = ДанныеПоДатеПолученияАктуальных.ТипВзаимодействия;
		ТипВзаимодействияОрганизация = ДокументооборотСФССКлиентСервер.ТипВзаимодействияОрганизацияСЭДО();
		ТребуетсяПолучениеАктуальных = ДанныеПоДатеПолученияАктуальных.ТребуетсяПолучениеАктуальных;
		
		НастройкиВызова = Новый Структура;
		НастройкиВызова.Вставить("БезУчетаПользователя", Истина);
		СвойстваОбменаПоСЭДОЧерезОператора =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(Организация,,
				НастройкиВызова);
		
		ТекущаяДата = Неопределено;
		СведенияОДатахПолученияСообщений = КонтекстЭДО.ПолучитьДатыПолученияСообщений(
			Организация,
			ТекущаяДата,
			СвойстваОбменаПоСЭДОЧерезОператора.ОбменПоСЭДОНапрямую);
		ДатыПолученияСообщений = СведенияОДатахПолученияСообщений.МассивДат;
		
		СообщенияДоСЭДОЧерезОператораПолучены = (СведенияОДатахПолученияСообщений.ОбменЧерезОператора = Истина);
		Если НЕ СвойстваОбменаПоСЭДОЧерезОператора.ОбменПоСЭДОНапрямую
			И НЕ СообщенияДоСЭДОЧерезОператораПолучены Тогда
			// Оператор ещё не сформировал кэш сообщений.
			Продолжить;
		КонецЕсли;
		
		ОбменЧерезОператора = НЕ СвойстваОбменаПоСЭДОЧерезОператора.ОбменПоСЭДОНапрямую;
		
		Если НЕ ОбменЧерезОператора Тогда
			ВсеОрганизацииОбмениваютсяЧерезОператора = Ложь;
		КонецЕсли;
		
		ДатаУспешнойЗагрузкиИдентификаторов = Неопределено;
		Для каждого ДатаПолученияСообщений из ДатыПолученияСообщений Цикл
			
			ЭтоЗапросАктуальныхСоощений = НЕ ЗначениеЗаполнено(ДатаПолученияСообщений.Дата);
			Если ЭтоЗапросАктуальныхСоощений
				И НЕ ТребуетсяПолучениеАктуальных Тогда
				// Актуальные сообщения уже были сегодня получены.
				Продолжить;
			КонецЕсли;
			
			Если ЭтоЗапросАктуальныхСоощений Тогда
				Шаблон = НСтр("ru = 'Получение списка актуальных входящих сообщений из СЭДО ФСС по организации %1 по типу взаимодействия %2.';
								|en = 'Получение списка актуальных входящих сообщений из СЭДО ФСС по организации %1 по типу взаимодействия %2.'");
				Шаблон = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Шаблон, Истина);
				ОписаниеСобытия = СтрШаблон(Шаблон, Организация, ТипВзаимодействия);
			Иначе
				Шаблон = НСтр("ru = 'Получение списка архивных входящих сообщений из СЭДО ФСС по организации %1 за дату %2.';
								|en = 'Получение списка архивных входящих сообщений из СЭДО ФСС по организации %1 за дату %2.'");
				Шаблон = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Шаблон, Истина);
				ОписаниеСобытия = СтрШаблон(Шаблон, Организация, ДатаПолученияСообщений.Дата);
			КонецЕсли;
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ОписаниеСобытия);
			
			ИнтервалМеждуЗапросамиКОператору = 10;
			Если НЕ ЭтоЗапросАктуальныхСоощений Тогда
				// Получения списка входящих по дате.
				Результат = МетаданныеВходящихСообщенийСЭДОФСС(
					Организация,
					ДатаПолученияСообщений, ,
					СвойстваОбменаПоСЭДОЧерезОператора);
				Если Результат.Выполнено
					И ОбменЧерезОператора
					И НЕ ТипыВзаимодействия.Найти(ТипВзаимодействияОрганизация) = Неопределено Тогда
					// Запрос актуальных по типу взаимодействия 3 (Организация).
					ВремяСтарта = ТекущаяДатаНаСервере();
					Задержка(ВремяСтарта, ИнтервалМеждуЗапросамиКОператору);
					Результат = МетаданныеВходящихСообщенийСЭДОФСС(
						Организация,
						ДатаПолученияСообщений, ТипВзаимодействияОрганизация,
						СвойстваОбменаПоСЭДОЧерезОператора);
				КонецЕсли;
			Иначе
				Результат = МетаданныеВходящихСообщенийСЭДОФСС(
					Организация, , ТипВзаимодействия,
					СвойстваОбменаПоСЭДОЧерезОператора);
				Если Результат.Выполнено
					И ОбменЧерезОператора Тогда
					ВремяСтарта = ТекущаяДатаНаСервере();
					Задержка(ВремяСтарта, ИнтервалМеждуЗапросамиКОператору);
					ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия[ТипВзаимодействия] = ТекущаяДатаНаСервере();
					ДанныеПоДатеПолученияАктуальных = ДанныеПоДатеПолученияАктуальныхСообщений(ТипыВзаимодействия,
						ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия);
					Если ДанныеПоДатеПолученияАктуальных.ТребуетсяПолучениеАктуальных Тогда
						// Получаем актуальные по следующему типу взаимодействия.
						ТипВзаимодействия = ДанныеПоДатеПолученияАктуальных.ТипВзаимодействия;
						Результат = МетаданныеВходящихСообщенийСЭДОФСС(
							Организация, , ТипВзаимодействия,
							СвойстваОбменаПоСЭДОЧерезОператора);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Результат.Выполнено Тогда
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				СтрокаОшибки.ТекстОшибки = Строка(Организация) + ", " + Результат.ОписаниеОшибки;
				Шаблон = НСтр("ru = 'При получении списка входящих сообщений из СЭДО ФСС по организации %1 %2 произошла ошибка: %3.';
								|en = 'При получении списка входящих сообщений из СЭДО ФСС по организации %1 %2 произошла ошибка: %3.'");
				Шаблон = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Шаблон, Истина);
				ОписаниеОшибки = СтрШаблон(Шаблон, Организация, РегистрационныйНомерФСС, Результат.ОписаниеОшибки);
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ОписаниеОшибки);
				БылиОшибкиСоединения = Результат.ОшибкаСоединения;
				БылиОшибки = Истина;
				Если Результат.ВозниклаБлокировкаИзЗаЧастыхЗапросов Тогда
					БылиБлокировкиИзЗаЧастыхЗапросов = Истина;
					ОсталосьВремениБлокировки = Результат.ОсталосьВремениБлокировки;
					БылиОшибкиСоединения = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
			ДатаУспешнойЗагрузкиИдентификаторов = ЭлектронныйДокументооборотСФССКлиентСервер.ПолучитьДатуПолученияСообщений(
				ДатаПолученияСообщений);
			
			Если НЕ ЗначениеЗаполнено(ДатаУспешнойЗагрузкиИдентификаторов) Тогда
				// Запоминаем дату получения актуальных сообщений.
				ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия[ТипВзаимодействия] = ТекущаяДатаНаСервере();
				ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям[Организация] = ДатаПолученияАктуальныхСообщенийПоТипуВзаимодействия;
			Иначе
				ДатаУспешнойЗагрузкиИдентификаторов = ДатаУспешнойЗагрузкиИдентификаторов + 1;
			КонецЕсли;
			
			Если НЕ ОбменЧерезОператора Тогда
				Если МосковскоеВремя() - ДатаПолученияСообщений.Дата > Сутки Тогда
					// В следующем запросе будет возвращен код состояния 403 с кодом ошибки 1012.
					БылиБлокировкиИзЗаЧастыхЗапросов = Истина;
					БылиОшибки = Истина;
					СтрокаОшибки = ТаблицаОшибок.Добавить();
					СтрокаОшибки.ТекстОшибки = Строка(Организация) + ", " + НСтр("ru = 'Не был получен список сообщений за текущую дату.';
																				|en = 'Не был получен список сообщений за текущую дату.'");;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			// Случайная задержка для снижения нагрузки на сервер СЭДО.
			Генератор = Новый ГенераторСлучайныхЧисел;
			ДлинаЗадержки = Генератор.СлучайноеЧисло(10, 20);
			ВремяСтарта = ТекущаяДатаНаСервере();
			Задержка(ВремяСтарта, ДлинаЗадержки);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДатаУспешнойЗагрузкиИдентификаторов) Тогда
			// Сохраняем дату успешного получения списка входящих сообщений.
			КонтекстЭДО.СохранитьДатуСеансаОбменаСЭДОФСС(
				Организация,
				ДатаУспешнойЗагрузкиИдентификаторов,
				СвойстваОбменаПоСЭДОЧерезОператора.ОбменПоСЭДОНапрямую);
		КонецЕсли;

	КонецЦикла;
	
	Если ВсеОрганизацииОбмениваютсяЧерезОператора Тогда
		ИнтервалПоУмолчанию =
			ЭлектронныйДокументооборотСФССКлиентСервер.ИнтервалМеждуЗапросамиСпискаВходящихСообщенийСЭДОПоУмолчанию();
		Если НЕ МинимальныйИнтервалМеждуЗапросами = ИнтервалПоУмолчанию Тогда
			// Меняем мин.интервал между запросами на интервал по умолчанию.
			КлючОбъектаНастроек = ЭлектронныйДокументооборотСФССКлиентСервер.КлючОбъектаНастроекЗапросовКСерверуСЭДО();
			КлючНастроек = ЭлектронныйДокументооборотСФССКлиентСервер.КлючНастроекИнтервалаМеждуЗапросамиКСерверуСЭДО();
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастроек, КлючНастроек, ИнтервалПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
	ОдинРазВСутки = Ложь;
	МаксимальноеКоличествоОшибокСоединенияПодряд = 24;
	Если БылиОшибкиСоединения Тогда
		КоличествоОшибокСоединения = КоличествоОшибокСоединения + 1;
		Если КоличествоОшибокСоединения >= МаксимальноеКоличествоОшибокСоединенияПодряд Тогда
			// Если были ошибки подключения и они повторялись 24 и более раз подряд,
			// то меняем расписание рег.задания.
			ОдинРазВСутки = Истина;
		КонецЕсли;
	Иначе
		КоличествоОшибокСоединения = 0;
	КонецЕсли;
	
	ПараметрыЗадания = ПараметрыЗаданияОбменФСС();
	ПараметрыЗадания.БылиБлокировкиИзЗаЧастыхЗапросов = БылиБлокировкиИзЗаЧастыхЗапросов;
	ПараметрыЗадания.ОсталосьВремениБлокировки = ОсталосьВремениБлокировки;
	ПараметрыЗадания.ВсеОрганизацииОбмениваютсяЧерезОператора = ВсеОрганизацииОбмениваютсяЧерезОператора;
	
	Если ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Тогда
		ВключитьОбменСФСС(ОдинРазВСутки, ПараметрыЗадания);
	Иначе
		ОтключитьОбменСФСС();
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения,
		КоличествоОшибокСоединения);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаОбщихНастроек(),
		КлючДатыЗагрузкиАктуальныхСообщенийПоОрганизациям,
		ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям);
		
	Если БылиОшибки Тогда
		ТаблицаОшибок.Свернуть("ТекстОшибки");
		Ошибки = ТаблицаОшибок.ВыгрузитьКолонку("ТекстОшибки");
		ТекстыОшибок = СтрСоединить(Ошибки);
		ОписаниеОшибки = НСтр("ru = 'В регламентном задании загрузки списка входящих сообщений СЭДО ФСС происходили ошибки:';
								|en = 'В регламентном задании загрузки списка входящих сообщений СЭДО ФСС происходили ошибки:'")
			+ Символы.ПС + ТекстыОшибок + Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Подробную информацию об ошибках см. в технологическом журнале.';
					|en = 'Подробную информацию об ошибках см. в технологическом журнале.'");;
		ОписаниеОшибки = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ОписаниеОшибки, Истина);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Возвращает признак необходимости запуска регламентного задания обмена
// по заданной организации.
// см.также ЭлектронныйДокументооборотСФССПереопределяемый.ПроверитьНеобходимостьЗапускаРегламентногоЗадания
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой нужно проверить необходимость запуска.
// Возвращаемое значение:
//   Булево - Истина, если для организации требуется запуск рег.задания.
Функция ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		ОписаниеОшибки = ОшибкаНедоступностиОбработкиДОКО();
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	Возврат КонтекстЭДО.ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации);
	
КонецФункции

// Получает метаданные входящих сообщений на сервере СЭДО ФСС и возвращает список входящих.
// Параметры:
//   Организация - организация, для которой нужно получить входящие.
//   ДатаСообщений - дата, на которую нужно получить список входящих.
//   ТипВзаимодействия - при незаполненном берется ДокументооборотСФССКлиентСервер.ТипВзаимодействияСтраховательСЭДО().
//   СвойстваОбменаПоСЭДОЧерезОператора - при незаполненном берется
//     ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(Организация)
// Возвращаемое значение:
//   Результат             - Структура:
//     * Выполнено         - Булево - признак успешного выполнения операции.
//     * ОписаниеОшибки    - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//     * ДанныеСообщений   - Структура - структура с полями:
//         * Идентификатор          - Строка - идентификатор сообщения.
//         * Тип                    - Число  - тип сообщения согласно спецификации.
//         * Получатель             - Строка - идентификатор получателя.
//         * ТребуетсяПодтверждение - Булево - требуется подтверждение о прочтении сообщения.
//         * Новое                  - Булево - признак того, что это новое сообщение, данные которого ещё не были загружены.
//
Функция МетаданныеВходящихСообщенийСЭДОФСС(
		Организация,
		ДатаСообщений = Неопределено,
		ТипВзаимодействия = Неопределено,
		СвойстваОбменаПоСЭДОЧерезОператора = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.МетаданныеВходящихСообщенийСЭДОФСС(
		Организация,
		ДатаСообщений,
		ТипВзаимодействия,
		СвойстваОбменаПоСЭДОЧерезОператора);
	
	Возврат Результат;
	
КонецФункции

// Включает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ВключитьОбменСФСС(ОдинРазВСутки = Ложь, ПараметрыЗадания = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыЗадания = Неопределено Тогда
		БылиБлокировкиИзЗаЧастыхЗапросов = Ложь;
		ОсталосьВремениБлокировки = 0;
		ВсеОрганизацииОбмениваютсяЧерезОператора = Ложь;
	Иначе
		БылиБлокировкиИзЗаЧастыхЗапросов = ПараметрыЗадания.БылиБлокировкиИзЗаЧастыхЗапросов;
		ОсталосьВремениБлокировки = ПараметрыЗадания.ОсталосьВремениБлокировки;
		ВсеОрганизацииОбмениваютсяЧерезОператора = ПараметрыЗадания.ВсеОрганизацииОбмениваютсяЧерезОператора;
	КонецЕсли;
	
	// Добавляем случайную составляющую к интервалу запуска для более равномерной загрузки сервера СЭДО.
	Генератор = Новый ГенераторСлучайныхЧисел;
	КоличествоСекундВЧасе = 3600;
	Если ОдинРазВСутки Тогда
		ПериодПовтораВТечениеДня = 0;
	Иначе
		Если БылиБлокировкиИзЗаЧастыхЗапросов Тогда
			МинимальныйИнтервалМеждуЗапросами = МинимальныйИнтервалМеждуЗапросамиСпискаВходящихСообщенийСЭДО();
			Минута = 60;
			СлучайнаяСоставляющая = Генератор.СлучайноеЧисло(0, МинимальныйИнтервалМеждуЗапросами);
			Если МинимальныйИнтервалМеждуЗапросами <= 15 * Минута Тогда
				ПериодПовтораВТечениеДня = МинимальныйИнтервалМеждуЗапросами * 4 + 6 * СлучайнаяСоставляющая;
			ИначеЕсли МинимальныйИнтервалМеждуЗапросами > 15 * Минута И МинимальныйИнтервалМеждуЗапросами < 30 * Минута Тогда
				ПериодПовтораВТечениеДня = МинимальныйИнтервалМеждуЗапросами * 3 + 2 * СлучайнаяСоставляющая;
			Иначе
				ПериодПовтораВТечениеДня = Окр(МинимальныйИнтервалМеждуЗапросами * 1.5) + 2 * СлучайнаяСоставляющая;
			КонецЕсли;
		Иначе
			ДесятьМинут = 600;
			Если ВсеОрганизацииОбмениваютсяЧерезОператора Тогда
				ПериодПовтораВТечениеДня = Генератор.СлучайноеЧисло(ДесятьМинут, 2 * ДесятьМинут);
			Иначе
				ПоловинаЧаса = КоличествоСекундВЧасе / 2;
				ПериодПовтораВТечениеДня = ПоловинаЧаса + Генератор.СлучайноеЧисло(0, ДесятьМинут);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		ПараметрыЗадания = Задания[0];
		Если ПараметрыЗадания.Использование Тогда
			// Задание используется, меняем расписание.
			ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
			ТекущаяДата = ТекущаяДатаНаСервере();
			СледующийЗапуск = ТекущаяДата + ПериодПовтораВТечениеДня;
			Час = Час(СледующийЗапуск);
			Минута = Минута(СледующийЗапуск);
			Секунда = Секунда(СледующийЗапуск);
			ЧасПредыдущий = Час(ТекущаяДата - 3600);
			ПараметрыЗадания.Расписание.ВремяНачала = Дата(1, 1, 1, Час, Минута, Секунда);
			ПараметрыЗадания.Расписание.ВремяКонца = Дата(1, 1, 1, ЧасПредыдущий, 0, 0);
			НовыеПараметры = Новый Структура;
			НовыеПараметры.Вставить("Расписание", ПараметрыЗадания.Расписание);
			НовыеПараметры.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
			НовыеПараметры.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
			РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыЗадания.УникальныйИдентификатор, НовыеПараметры);
			Возврат;
		Иначе
			КлючДатаПоследнегоВключенияЗаданияОбменСФР = "ДатаПоследнегоВключенияЗаданияОбменСФР";
			ДатаПоследнегоВключенияЗаданияОбменСФР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				КлючОбъектаОбщихНастроек(),
				КлючДатаПоследнегоВключенияЗаданияОбменСФР,
				Дата(1, 1, 1));
			Сутки = 3600 * 24;
			Если ТекущаяДатаНаСервере() - ДатаПоследнегоВключенияЗаданияОбменСФР > Сутки Тогда
				// Создаем новое рег.задание не чаще чем раз в сутки.
				ОтключитьОбменСФСС();
				ДатаПоследнегоВключенияЗаданияОбменСФР = ТекущаяДатаНаСервере();
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					КлючОбъектаОбщихНастроек(),
					КлючДатаПоследнегоВключенияЗаданияОбменСФР,
					ДатаПоследнегоВключенияЗаданияОбменСФР);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Создание нового задания "Обмен с СФР" после удаления.
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
	Расписание.ПериодПовтораДней 		= 1;
	Расписание.ВремяНачала = Дата(1, 1, 1, 10, 0, 0);
	Расписание.ВремяКонца = Дата(1, 1, 1, 8, 0, 0);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбменСФСС);
	ПараметрыЗадания.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("Наименование",
		ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(НСтр("ru = 'Обмен с ФСС';
																|en = 'Обмен с ФСС'"), Истина));
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Отключает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ОтключитьОбменСФСС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Ключ", ИдентификаторРегламентногоЗадания());
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменСФСС;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие - 
//    * Ключ - псевдоним метода, например ОчиститьОбластьДанных.
//    * Значение - имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//        В качестве значения можно указать Неопределено, в этом случае считается что имя 
//        совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменСФСС.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО.ИмяМетода);
	
КонецПроцедуры

// Возвращает массив новых сообщений СЭДО ФСС.
// Параметры:
//   Отбор - Структура - параметры отбора сообщений.
//     * Организация - СправочникСсылка.Организации, Массив - организация(и) для отбора по организациям.
//     * Тип - Число, Массив - тип(ы) сообщения(ий) для отбора по типу. Необязательный.
//     * ТребуетсяПодтверждение - Булево - признак отбора сообщений требующих подтверждение. Необязательный.
// Возвращаемое значение:
//   Таблица значений с колонками:
//     * Идентификатор - Строка - идентификатор сообщения.
//     * Организация - СправочникСсылка.Организации - организация сообщения.
//     * Тип - Число - тип сообщения.
Функция НовыеСообщенияСЭДОФСС(Знач Отбор = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
		Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
		Отбор.Вставить("Организация", Организации);
	КонецЕсли;
	
	Организация = Отбор.Организация;
	Результат = КонтекстЭДОСервер.НовыеСообщенияСЭДОФСС(Организация, Отбор);
	
	Возврат Результат;
	
КонецФункции

Функция ПриПолученииСпискаНовыхСообщенийСЭДО(Организация, ДанныеСообщений) Экспорт
	
	Обработанные = Новый Массив;
	ЭлектронныйДокументооборотСФССПереопределяемый.
		ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Организация, ДанныеСообщений, Обработанные);
	Возврат Обработанные;
	
КонецФункции

Функция ПриПолученииСодержимогоСообщенияСЭДО(Организация, ДанныеСообщения) Экспорт
	
	РезультатОбработки = ЭлектронныйДокументооборотСФССКлиентСервер.НовыйРезультатПриПолученииСодержимогоСообщенияСЭДО();
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		ОписаниеОшибки = ОшибкаНедоступностиОбработкиДОКО();
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	ТипыСообщенийСЭДО = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО(Истина);
	
	ТипСообщенияОшибкиЛогическогоКонтроля = ТипыСообщенийСЭДО.ТипСообщенияНайденыОшибкиПриОбработкеСообщения; // Тип 14.
	ТипСообщенийОтветаНаПодтверждениеОПолучении = ТипыСообщенийСЭДО.ТипСообщенийОтветаНаПодтверждениеОПолучении; // Тип 11.
	ТипСообщенийПодтвержденияОПолучении = ТипыСообщенийСЭДО.ТипСообщенийПодтвержденияОПолучении; // Тип 6.
	ТипСообщенийРезультПодпискиСтрахователя = ТипыСообщенийСЭДО.ТипСообщенийРезультПодпискиСтрахователя; // Тип 12.
	ТипСообщенийОтветСтрахователяНаЗапросКП = ТипыСообщенийСЭДО.ОтветСтрахователяНаЗапросДокументовПоКамеральнойПроверке; // Тип 313.
	ТипСообщенийОтветСтрахователяНаЗапросВП = ТипыСообщенийСЭДО.ОтветСтрахователяНаЗапросДокументовПоВыезднойПроверке; // Тип 314.
	ТипыСообщенийСДОФССДоходнаяЧасть = ПолучитьТипыСообщенийСДОФССДоходнаяЧасть();
	ТипыСообщенийОбращенияКСтрахователю = ЭлектронныйДокументооборотСФССКлиентСервер.ТипыСообщенийОбращенийСФРКСтрахователю();
	Если ДанныеСообщения.Тип = ТипСообщенияОшибкиЛогическогоКонтроля
		ИЛИ ДанныеСообщения.Тип = ТипыСообщенийСЭДО.ТипСообщенияНайденыОшибкиПриОбработкеСообщенияОператором Тогда
		
		// Сообщение об ошибке логического контроля.
		ДанныеОшибки = КонтекстЭДО.
			ДанныеОшибокЛогическогоКонтроляСЭДОФСС(Организация, ДанныеСообщения);
		Если НЕ ДанныеОшибки.ИсходноеСообщениеНайдено Тогда
			// Не нашли исходное сообщение.
			РезультатОбработки.ОшибкаОбработки = Истина;
			Шаблон = НСтр("ru = 'Для сообщения %1 с типом %2 не найдены данные исходящего сообщения:';
							|en = 'Для сообщения %1 с типом %2 не найдены данные исходящего сообщения:'");
			ОписаниеОшибки = СтрШаблон(Шаблон, ДанныеСообщения.Идентификатор, ДанныеСообщения.Тип);
			РезультатОбработки.ОписаниеОшибки = ОписаниеОшибки + Символы.ПС
				+ ДанныеОшибки.ОшибкаПоиска;
			
			// Вызов обработчика БРО.
			КонтекстЭДО.ОбработкаСодержимогоСообщенияСЭДООперацииСОтчетомФСС(Организация, ДанныеСообщения, РезультатОбработки);
			Возврат РезультатОбработки;
		КонецЕсли;
		
		Если ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийПодтвержденияОПолучении Тогда
			// Это ошибка лог.контроля сообщения подтверждения о получении.
			КонтекстЭДО.ОбработатьОшибкуЛогическогоКонтроляПодтвержденияОПолучении(ДанныеОшибки);
			РезультатОбработки.Обработано = Истина;
		ИначеЕсли ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийОтветСтрахователяНаЗапросКП
			ИЛИ ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийОтветСтрахователяНаЗапросВП Тогда
			// Это ошибка лог.контроля сообщения ответа на запрос документов.
			КонтекстЭДО.ОбработатьОшибкуЛогическогоКонтроляОтветаНаЗапросДокументов(ДанныеОшибки);
			РезультатОбработки.Обработано = Истина;
		Иначе
			// Вызываем переопределяемый метод.
			Если ДанныеСообщения.Тип = ТипыСообщенийСЭДО.ТипСообщенияНайденыОшибкиПриОбработкеСообщенияОператором Тогда
				ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибкиДоставкиОператоромСообщенияСЭДО(
					Организация,
					ДанныеОшибки.ДанныеИсходногоСообщения,
					ДанныеОшибки.ОшибкиКонтроля,
					РезультатОбработки);
			Иначе
				ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО(
					Организация,
					ДанныеОшибки.ДанныеИсходногоСообщения,
					ДанныеОшибки.ОшибкиКонтроля,
					РезультатОбработки);
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ДанныеСообщения.Тип = ТипСообщенийОтветаНаПодтверждениеОПолучении Тогда
		
		// Ответ на подтверждение о получении.
		РезультатРазбора = КонтекстЭДО.РазобратьОтветНаПодтверждениеОПОлучении(Организация, ДанныеСообщения);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеПолученияОтветаНаПодтверждениеОПрочтении(Организация, РезультатРазбора.РезультатыПодтверждений, РезультатОбработки);
		
	ИначеЕсли ДанныеСообщения.Тип = ТипСообщенийРезультПодпискиСтрахователя Тогда
		
		// Результат подписки страхователя на оповещения по ЭЛН.
		КонтекстЭДО.РазобратьРезультатПодпискиСтрахователя(Организация, ДанныеСообщения);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
			
	ИначеЕсли НЕ ТипыСообщенийСДОФССДоходнаяЧасть.Найти(ДанныеСообщения.Тип) = Неопределено Тогда
		
		// Сообщения по доходной части СЭДО типов 300-336 (требования, сверки, уведомления).
		КонтекстЭДО.ПослеРасшифровкиВходящиеСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		
	ИначеЕсли ДанныеСообщения.Тип = ТипыСообщенийСЭДО.ТипСообщенияУведомлениеОтветНаВходящийЗапросНеПоступилВовремя Тогда
		
		// Уведомление о том, что ответ на входящих запрос СФР не поступил вовремя.
		КонтекстЭДО.РазобратьУведомлениеОтветНаВходящийЗапросНеПоступилВовремя(Организация, ДанныеСообщения, РезультатОбработки);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
			
	ИначеЕсли НЕ ТипыСообщенийОбращенияКСтрахователю.Найти(ДанныеСообщения.Тип) = Неопределено Тогда
		
		// Обработка сообщений обращений к страхователям (типы 1000, 1001, 1002).
		КонтекстЭДО.ОбработатьСодержимоеСообщенийОбращенийКСтрахователю(Организация, ДанныеСообщения, РезультатОбработки);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		
	ИначеЕсли ДанныеСообщения.Тип <> ТипыСообщенийСЭДО.ТипСообщенияПодтверждениеДоставкиОператоромВСФРАльтернативный
		И ДанныеСообщения.Тип <> ТипыСообщенийСЭДО.ТипСообщенияПодтверждениеДоставкиОператоромВСФР Тогда
		
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		
	КонецЕсли;
	
	// Вызов обработчика БРО.
	КонтекстЭДО.ОбработкаСодержимогоСообщенияСЭДООперацииСОтчетомФСС(Организация, ДанныеСообщения, РезультатОбработки);
	Возврат РезультатОбработки;
	
КонецФункции

Функция РегистрационныйНомерФССОрганизации(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОписаниеОшибки = НСтр("ru = 'Попытка получить регистрационный номер СФР(бывш. ФСС) организации по пустому значению.';
								|en = 'Попытка получить регистрационный номер СФР(бывш. ФСС) организации по пустому значению.'");
		Событие = НСтр("ru = 'Обмен с СФР(бывш. ФСС)';
						|en = 'Обмен с СФР(бывш. ФСС)'");
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		Возврат "";
	КонецЕсли;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СвойстваОрганизации = КонтекстЭДО.СвойстваОрганизацииДляОбмена(Организация);

	Возврат СвойстваОрганизации.РегистрационныйНомерФСС;
	
КонецФункции

// Возвращает массив организация, у которых активирован обмен с ФСС в настройках.
// Возвращаемое значение:
//   Массив - массив ссылок типа СправочникСсылка.Организации.
//
Функция ОрганизацииИспользующиеОбменФСС() Экспорт
	
	Возврат СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
КонецФункции

// Возвращает данные входящего сообщения по идентификатору.
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой нужно получить входящие.
//   Идентификатор - Строка - идентификатор сообщения.
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с данными сообщения, колонки:
//     *Идентификатор - Строка - идентификатор сообщения.
//     *Организация - СправочникСсылка.Организации - организация получатель.
//     *Тип - Строка - тип сообщения.
//     *Получетель - Строка - регистрационный номер ФСС получателя.
//     *ТребуетсяПодтверждение - Булево - Истина, если требуется подтверждение о получении.
//     *Содержимое - ХранилищеЗначения - хранилище значений с данными сообщения.
//     *Новое - Булево - Истина, если содержимое сообщения не получено.
//     *Дата - Дата - дата сообщения.
//     *ДатаЗагрузки - Дата - дата получения содержимого сообщения.
//     *ДатаОтправкиПодтверждения - Дата - дата отправки подтверждения о получении.
//     *ДатаПолученияИзвещенияОПолученииПодтверждения - Дата - дата получения извещения о получении подтверждения.
//     *ДатаПолученияОшибкиПодтверждения - Дата - дата получении ошибки подтверждения.
//     *ДатаСоздания - Дата - дата создания записи в регистре.
//     *ОшибкаОбработкиСообщения - Дата - дата обработки сообщения.
//     *ОшибкаПодтверждения - Строка - текст ошибки подтверждения о получении.
//     *ПодтверждениеОтправлено - Булево - Истина, если подтверждения о получении отправлено.
//     *СрокДействия - Дата - срок действия сообщения.
//
Функция ДанныеВходящегоСообщенияСЭДОФСС(Организация, Идентификатор) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("Идентификатор", Идентификатор);
	
	Возврат КонтекстЭДО.СообщенияСЭДОФСС(Отбор);
	
КонецФункции

// Возвращает данные входящего сообщения по идентификатору.
// Параметры:
//   ТипСообщения                 - Строка     - тип сообщения СЭДО из спецификации типов документов,
//   СодержимоеИлиАдресСообщения  - Строка    - текст выгрузки сообщения СЭДО по спецификации типов документов или
//                                - Строка    - адрес во временном хранилище, по которому содержится строка или двоичные
//                                              данные в кодировке utf-8 текста выгрузки сообщения СЭДО по спецификации
//                                              типов документов
//   Организация                  - СправочникСсылка.Организации - организация отправитель,
//   ОписаниеОшибки               - Строка    - шаблон текста сообщения, возвращаемого в ключе "ОписаниеОшибки"
//                                              результата оповещения обратного вызова при неудаче отправки,
//                                              с подстановкой текста ошибки вместо %1, например:
//                                              НСтр("ru = 'Не удалось подписать организацию на оповещения об изменении состояний ЭЛН сотрудников.'") + Символы.ПС + "%1",
//   РегистрационныйНомерФСС      - Строка    - регистрационный номер ФСС (дополнительный код ФСС в случае филиала),
//                                              при пустом значении подставляется здесь из организации.
//   ТипВзаимодействия            - Число     - для МЧД задать 3.
//   СвойстваДляОбмена            - Структура - при значении Неопределено заполняется автоматически, при типе
//                                              взаимодействия 3 (МЧД) можно передать структуру с реквизитами
//                                              "ОГРН", "ИНН", "КПП", "СНИЛС"
// Возвращаемое значение:
//   Структура - переданные параметры отправки сообщения (незаполненные могут вычисляться) для передачи в процедуру
//               "ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО", параметр "ПараметрыСообщения".
//
Функция ПараметрыОтправитьСообщениеСЭДО(
		ТипСообщения = "",
		СодержимоеИлиАдресСообщения = "",
		Организация = Неопределено,
		ОписаниеОшибки = "",
		РегистрационныйНомерФСС = "",
		ТипВзаимодействия = Неопределено,
		СвойстваДляОбмена = Неопределено) Экспорт
	
	Результат = ЭлектронныйДокументооборотСФССКлиентСервер.ПараметрыОтправитьСообщениеСЭДО(ТипСообщения,
		СодержимоеИлиАдресСообщения,
		Организация,
		ОписаниеОшибки,
		РегистрационныйНомерФСС,
		ТипВзаимодействия,
		СвойстваДляОбмена);
	
	Возврат Результат;
	
КонецФункции

// Возвращает флаг использования тестового сервера при обмене данными ЭЛН и по СЭДО.
// Параметры:
//   Организация - СправочникСсылка.Организации
// Возвращаемое значение:
//   Булево - флаг использования тестового сервера при обмене данными ЭЛН и по СЭДО
//
Функция ТестовыйРежим(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаФСС.ТестовыйСерверФССЭЛН КАК ТестовыйСерверФССЭЛН
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &ОрганизацияСсылка
		|	И (НастройкиОбменаФСС.Пользователь ЕСТЬ NULL
		|	ИЛИ НастройкиОбменаФСС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))");
	
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Выборка.ТестовыйСерверФССЭЛН;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров, необходимых для создания информационной панели в объектах ЗУП
// 
// Возвращаемое значение:
//  Структура - Параметры, необходимые для создания информационной панели в объектах ЗУП
//
Функция ПараметрыИнформационнойПанелиБРО() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	// Если форма вызывается из формы списка без отбора по организации,
	// или в форме нет организации, то оставьте равным Неопределено
	ДополнительныеПараметры.Вставить("Организация", Неопределено);
	// Группа, в которой надо разместить элементы информационной панели
	ДополнительныеПараметры.Вставить("Группа", Неопределено);
	ДополнительныеПараметры.Вставить("Форма", Неопределено);
	// Указывает на то, относится ли объект к СЭДО или нет
	// В зависимости от этого текст на панели будет меняться
	ДополнительныеПараметры.Вставить("ЭтоСЭДО", Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Перерисовывает и при необходимости создает элементы информационной панели БРО в объектах ЗУП
//
// Параметры:
//  ПараметрыОтображения - Структура - Параметры, необходимые для создания информационной панели в объектах ЗУП
//                         Шаблон для описания параметров возвращает метод ПараметрыИнформационнойПанелиБРО()
// 
Процедура ОбновитьИнформационнуюПанельБРО(ПараметрыОтображения) Экспорт
	
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения,
		Перечисления.ТарифыОператораЭДО.КадровыеРешения);

КонецПроцедуры

Функция ВидыДокументовСЭДОФССДоходнаяЧасть() Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВидыДокументов = КонтекстЭДО.ПолучитьВидыДокументовСЭДОФССДоходнаяЧасть();
	
	Возврат ВидыДокументов;
	
КонецФункции

// Добавляет запись в справочник "Отправки в СФР (бывш. ФСС)", которая может использоваться при показе подтверждения
// доставки оператором в СФР из стандартного диалога "Этапы отправки".
// Параметры:
//   ОтчетСсылка - ссылка на отчет, должна присутствовать в определяемом типе ПредметОтправкиОтчетаФСС,
//   ИдентификаторЗапроса - Строка,
//   Организация - СправочникСсылка.Организации,
//   ДатаОтправки - Дата - при незаданном значении используется текущая дата,
//   ОбменЧерезОператора - Булево - результат вызова
//     НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(
//     Организация).ОбменПоСЭДОНапрямую.
// Возвращаемое значение:
//   СправочникСсылка.ОтправкиФСС.
//
Функция ДобавитьОтправкуФССПоСЭДО(
		ОтчетСсылка,
		ИдентификаторЗапроса,
		Организация,
		ДатаОтправки = Неопределено,
		ОбменЧерезОператора = Истина,
		ДанныеСообщения = Неопределено) Экспорт
	
	НоваяЗапись = Справочники.ОтправкиФСС.СоздатьЭлемент();
	
	НоваяЗапись.ОтчетСсылка 					= ОтчетСсылка;
	НоваяЗапись.ИдентификаторОтправкиНаСервере 	= ИдентификаторЗапроса;
	НоваяЗапись.СтатусОтправки 					= Перечисления.СтатусыОтправки.Отправлен;
	НоваяЗапись.ДатаОтправки 					= ?(ЗначениеЗаполнено(ДатаОтправки), ДатаОтправки, ТекущаяДатаСеанса());
	НоваяЗапись.Организация 					= Организация;
	НоваяЗапись.ВидОтчета 						= Справочники.ВидыОтправляемыхДокументов.ДокументСЭДО;
	НоваяЗапись.ОбменЧерезОператора 			= ОбменЧерезОператора;
	Если НЕ ДанныеСообщения = Неопределено Тогда
		Сжатие = Новый СжатиеДанных(9);
		НоваяЗапись.ПодписанныйПакет			= Новый ХранилищеЗначения(ДанныеСообщения, Сжатие);
	КонецЕсли;
	
	НоваяЗапись.Записать();
	
	Возврат НоваяЗапись.Ссылка;
	
КонецФункции

// Возвращает таблицу с данными рег.номеров СФР.
// Параметры:
//   Страхователи - Массив из СправочникСсылка.Организации - список организаций страхователей.
// Возвращаемое значение: 
//   ТаблицаЗначений - таблица с колонками:
//     Страхователь - СправочникСсылка.Организации
//     РегистрационныйНомерФСС - Строка
//     РегистрационныйНомерСФР - Строка
//     ДатаСообщения - Дата
//     ИдентификаторСообщения - Строка
//     ТипСообщения - Число
//     ОписаниеТипа - Строка
Функция РегистрационныеНомераСФРПоТранспортнымДаннымСЭДО(Страхователи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВходящиеСообщенияСЭДОФСС.Организация КАК Организация,
	               |	МАКСИМУМ(ВходящиеСообщенияСЭДОФСС.Дата) КАК МаксимальнаяДата
	               |ПОМЕСТИТЬ СообщенияСМаксимальнойДатой
	               |ИЗ
	               |	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	               |ГДЕ
	               |	ВходящиеСообщенияСЭДОФСС.РегистрационныйНомерСФР > """"
	               |	И ВходящиеСообщенияСЭДОФСС.Организация В(&Страхователи)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВходящиеСообщенияСЭДОФСС.Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК ИдентификаторСообщения,
	               |	ВходящиеСообщенияСЭДОФСС.Организация КАК Страхователь,
	               |	ВходящиеСообщенияСЭДОФСС.Дата КАК ДатаСообщения,
	               |	ВходящиеСообщенияСЭДОФСС.Получатель КАК РегистрационныйНомерФСС,
	               |	ВходящиеСообщенияСЭДОФСС.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
	               |	ВходящиеСообщенияСЭДОФСС.Тип КАК ТипСообщения
	               |ИЗ
	               |	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СообщенияСМаксимальнойДатой КАК МаксДатаСообщения
	               |		ПО ВходящиеСообщенияСЭДОФСС.Организация = МаксДатаСообщения.Организация
	               |			И ВходящиеСообщенияСЭДОФСС.Дата = МаксДатаСообщения.МаксимальнаяДата
	               |ГДЕ
	               |	ВходящиеСообщенияСЭДОФСС.РегистрационныйНомерСФР > """"
	               |	И ВходящиеСообщенияСЭДОФСС.Организация В(&Страхователи)";

	Запрос.УстановитьПараметр("Страхователи", Страхователи);
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("ОписаниеТипа");
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		ОписаниеОшибки = ОшибкаНедоступностиОбработкиДОКО();
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ОписаниеОшибки);
		Возврат Таблица;
	КонецЕсли;
	
	ОписанияТипов = РегламентированнаяОтчетностьПовтИсп.ОписанияТиповСообщенийСЭДО();
	
	Для каждого Строка Из Таблица Цикл
		Тип = ЭлектронныйДокументооборотСФССКлиентСервер.ТипСообщенияСЭДОВСтроку(Строка.ТипСообщения);
		Строка.ОписаниеТипа = ОписанияТипов[Тип];
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции

// Возвращает код органа СФР организации на основании кодов ПФР и ФСС.
Функция ПолучитьКодОрганаСФР(Организация) Экспорт
	
	КодОрганаСФР = "";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ,
		"КодОрганаПФР, РегистрационныйНомерФСС, КодПодчиненностиФСС,
		|РегистрационныйНомерФССДобрСтрах, КодПодчФССДобрСтрах,
		|РегНомПФР, ИПРегНомПФР, ИННФЛ, ТипНП");
		
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
	КодОрганаСФР = СведенияОбОрганизации.КодОрганаПФР;
	
	Если ЭтоЮридическоеЛицо Тогда
		
		Если ПустаяСтрока(КодОрганаСФР) Тогда
			КодОрганаСФР = ПолучитьКодОрганаПФР(СведенияОбОрганизации.РегНомПФР);
		КонецЕсли;
		
		Если ПустаяСтрока(КодОрганаСФР) Тогда
			Если ЗначениеЗаполнено(СведенияОбОрганизации.КодПодчиненностиФСС) Тогда
				КодОрганаСФР = СведенияОбОрганизации.КодПодчиненностиФСС;
			ИначеЕсли СведенияОбОрганизации.ТипНП = 2 Тогда
				КодОрганаСФР =
					ПолучитьКодПодчиненностиФСС(СведенияОбОрганизации, СведенияОбОрганизации.ДополнительныйКодФСС);
			Иначе
				КодОрганаСФР =
					ПолучитьКодПодчиненностиФСС(СведенияОбОрганизации, СведенияОбОрганизации.РегистрационныйНомерФСС);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(КодОрганаСФР) Тогда
			Если ЗначениеЗаполнено(СведенияОбОрганизации.РегНомПФР) Тогда
				КодОрганаСФР = ПолучитьКодОрганаПФР(СведенияОбОрганизации.РегНомПФР);
				РегНомПФР = СведенияОбОрганизации.РегНомПФР;
			Иначе
				КодОрганаСФР = ПолучитьКодОрганаПФР(СведенияОбОрганизации.ИПРегНомПФР);
				РегНомПФР = СведенияОбОрганизации.ИПРегНомПФР;
			КонецЕсли;
		КонецЕсли;
	
		Если ПустаяСтрока(КодОрганаСФР) Тогда
			Если ЗначениеЗаполнено(СведенияОбОрганизации.КодПодчиненностиФСС) Тогда
				КодОрганаСФР = СведенияОбОрганизации.КодПодчиненностиФСС;
			ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.КодПодчФССДобрСтрах) Тогда
				КодОрганаСФР = СведенияОбОрганизации.КодПодчФССДобрСтрах;
			Иначе
				КодОрганаСФР =
					ПолучитьКодПодчиненностиФСС(СведенияОбОрганизации, РегНомПФР);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодОрганаСФР;
	
КонецФункции

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура СобратьПоказателиБизнесСтатистикиПоСЭДО(РежимТестирования = Ложь) Экспорт
	
	Попытка
		ВыполнитьЗапросИСохранитьДанныеСтатистикиСЭДО(РежимТестирования);
	Исключение
		ИмяОперации = ПрефиксСтатистикиСЭДО() + "ОшибкаФормирования";
		Информация = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Информация);
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, 1, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СохранитьДанныеЗапросаСЭДО(ПараметрыСохранения) Экспорт
	
	ОписаниеОшибки = ПараметрыСохранения.ОписаниеОшибки;
	АдресЗапросаSOAP = ПараметрыСохранения.АдресЗапросаSOAP;
	АдресОтветаSOAP = ПараметрыСохранения.АдресОтветаSOAP;
	Дата = ПараметрыСохранения.Дата;
	УдалятьИзХранилища = ПараметрыСохранения.УдалятьИзХранилища;
	
	Если ЭтоАдресВременногоХранилища(АдресЗапросаSOAP) Тогда
		ДанныеЗапроса = СтрокаИзДанныхПоАдресу(АдресЗапросаSOAP);
		Если УдалятьИзХранилища Тогда
			УдалитьИзВременногоХранилища(АдресЗапросаSOAP);
		КонецЕсли;
	Иначе
		ДанныеЗапроса = "";
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресОтветаSOAP) Тогда
		ДанныеОтвета = СтрокаИзДанныхПоАдресу(АдресОтветаSOAP);
		Если УдалятьИзХранилища Тогда
			УдалитьИзВременногоХранилища(АдресОтветаSOAP);
		КонецЕсли;
	Иначе
		ДанныеОтвета = "";
	КонецЕсли;
	
	Запись = РегистрыСведений.ЖурналЗапросовКСерверамФСС.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыСохранения);
	
	Запись.Идентификатор = ПараметрыСохранения.Идентификатор;
	Запись.ДанныеЗапроса = Новый ХранилищеЗначения(ДанныеЗапроса, Новый СжатиеДанных(9));
	Если Дата = Неопределено Тогда
		Запись.Дата = ТекущаяДатаНаСервере();
	Иначе
		Запись.Дата = Дата;
	КонецЕсли;
	Запись.ОтветСервера = Новый ХранилищеЗначения(ДанныеОтвета, Новый СжатиеДанных(9));
	Запись.Записать();
	
КонецПроцедуры

Функция ПриВыполненииЗапросаВозниклаОшибкаСоединения(ДанныеЗапроса) Экспорт
	
	АдресСервераЗаполнен = ЗначениеЗаполнено(ДанныеЗапроса.АдресСервера);
	Если НЕ АдресСервераЗаполнен Тогда
		Возврат Ложь;
	КонецЕсли;

	КодыВозвратаПовторнойОтправки = КодыВозвратаПовторнойОтправки();

	Если НЕ ЗначениеЗаполнено(ДанныеЗапроса.КодСостояния) Тогда
		КодСостояния = 0;
	Иначе
		КодСостояния = Число(ДанныеЗапроса.КодСостояния);
	КонецЕсли;
	
	ВнутренняяОшибкаСервера = Ложь;
	АдресОтвета = "";
	Если ДанныеЗапроса.Свойство("АдресРасшифрованногоОтветаSOAP") Тогда
		АдресОтвета = ДанныеЗапроса.АдресРасшифрованногоОтветаSOAP;
	ИначеЕсли ДанныеЗапроса.Свойство("АдресЗашифрованногоОтветаSOAP") Тогда
		АдресОтвета = ДанныеЗапроса.АдресЗашифрованногоОтветаSOAP;
	КонецЕсли;
	Если КодСостояния = 500 И НЕ ПустаяСтрока(АдресОтвета) Тогда
		Если ЭтоАдресВременногоХранилища(АдресОтвета) Тогда
			Ответ = ПолучитьИзВременногоХранилища(АдресОтвета);
			Ответ = ВРег(Ответ);
			СтрокаПоиска = ВРег("500 Internal Server Error");
			ВнутренняяОшибкаСервера = СтрНайти(Ответ, СтрокаПоиска) > 0;
		КонецЕсли;
	КонецЕсли;
	
	КодВСпискеКодовОшибкиСоединения = НЕ КодыВозвратаПовторнойОтправки.Найти(КодСостояния) = Неопределено;
	Возврат АдресСервераЗаполнен
		И (КодВСпискеКодовОшибкиСоединения ИЛИ ВнутренняяОшибкаСервера);
	
КонецФункции

Функция КоличествоЗапросовВОчередиАвтоматическойЗагрузки(Организация = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоЗапросов", 0);
	Результат.Вставить("КоличествоОрганизаций", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапросыДляПовторнойОтправкиСЭДО.Идентификатор) КАК КоличествоЗапросов,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапросыДляПовторнойОтправкиСЭДО.Организация) КАК КоличествоОрганизаций
	               |ИЗ
	               |	РегистрСведений.ЗапросыДляПовторнойОтправкиСЭДО КАК ЗапросыДляПовторнойОтправкиСЭДО
	               |ГДЕ
	               |	НЕ ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + " И ЗапросыДляПовторнойОтправкиСЭДО.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатВыполнения = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выгрузить();
	Результат.КоличествоЗапросов = Выборка[0].КоличествоЗапросов;
	Результат.КоличествоОрганизаций = Выборка[0].КоличествоОрганизаций;
	
	Возврат Результат;
	
КонецФункции

// Включает регламентное задание фонового обмена с сервером СЭДО ФСС.
Функция ВключитьФоновыйОбменСЭДО(ПериодПовтораВТечениеДня = 0) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено");
	Результат.Вставить("ОписаниеОшибки");

	УстановитьПривилегированныйРежим(Истина);
	
	Если ПериодПовтораВТечениеДня = 0 Тогда
		Генератор = Новый ГенераторСлучайныхЧисел();
		// Задаем случайную задержку между запусками чтобы распределить по времени нагрузку на сервер СЭДО.
		ТекущаяДата = ТекущаяДатаСеанса();
		Час = Час(ТекущаяДата);
		Если Час > 8 И Час < 20 Тогда
			ПериодПовтораВТечениеДня = 6000 + Генератор.СлучайноеЧисло(0, 2400);
		Иначе
			ПериодПовтораВТечениеДня = 2400 + Генератор.СлучайноеЧисло(0, 1200);
		КонецЕсли;
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'Будет установлен интервал запуска задания фоновой загрузки сообщений СЭДО %1 секунд.';
					|en = 'Будет установлен интервал запуска задания фоновой загрузки сообщений СЭДО %1 секунд.'");
	ТекстСобытия = СтрШаблон(Шаблон, ПериодПовтораВТечениеДня);
	ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);

	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		ПараметрыЗадания = Задания[0];
		Если ПараметрыЗадания.Использование Тогда
			Если ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня <> ПериодПовтораВТечениеДня Тогда
				ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
				Если НЕ ЗначениеЗаполнено(ПараметрыЗадания.Расписание.ВремяНачала) Тогда
					ПараметрыЗадания.Расписание.ВремяНачала = Дата(1, 1, 1, 9, 0, 0);
					ПараметрыЗадания.Расписание.ВремяКонца = Дата(1, 1, 1, 8, 0, 0);
				КонецЕсли;
				НовыеПараметры = Новый Структура;
				НовыеПараметры.Вставить("Расписание", ПараметрыЗадания.Расписание);
				НовыеПараметры.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				НовыеПараметры.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
				РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыЗадания.УникальныйИдентификатор, НовыеПараметры);
			КонецЕсли;
			Результат.Выполнено = Истина;
			Возврат Результат;
		Иначе
			ОтключитьФоновыйОбменСЭДО();
		КонецЕсли;
	КонецЕсли;

	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
	Расписание.ПериодПовтораДней 		= 1;
	Расписание.ВремяНачала = Дата(1, 1, 1, 9, 0, 0);
	Расписание.ВремяКонца = Дата(1, 1, 1, 8, 0, 0);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО);
	ПараметрыЗадания.Вставить("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	Наименование = НСтр("ru = 'Фоновая отправка запросов в СЭДО СФР';
						|en = 'Фоновая отправка запросов в СЭДО СФР'");
	ПараметрыЗадания.Вставить("Наименование", Наименование);

	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);

	УстановитьПривилегированныйРежим(Ложь);

	Результат.Выполнено = Истина;
	Возврат Результат;

КонецФункции

Функция ВключеноЗаданиеФоновогоОбменаСЭДО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Задания.Количество() > 0 И Задания[0].Использование;
	
КонецФункции

Функция ПолучитьЗначениеДобавитьОтдельнуюКнопкуОбменаДляСЭДО() Экспорт

	ДобавитьОтдельнуюКнопкуОбменаДляСЭДО = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОбменаСЭДОСФР",
		"ДобавитьОтдельнуюКнопкуОбменаДляСЭДО",
		Ложь);
	Возврат ДобавитьОтдельнуюКнопкуОбменаДляСЭДО;
	
КонецФункции

Процедура СохранитьЗначениеДобавитьОтдельнуюКнопкуОбменаДляСЭДО(ДобавитьОтдельнуюКнопкуОбменаДляСЭДО) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"НастройкиОбменаСЭДОСФР",
		"ДобавитьОтдельнуюКнопкуОбменаДляСЭДО",
		ДобавитьОтдельнуюКнопкуОбменаДляСЭДО);
	
	КонецПроцедуры

Функция МинимальныйИнтервалМеждуЗапросамиСпискаВходящихСообщенийСЭДО() Экспорт
	
	ИнтервалПоУмолчанию = ЭлектронныйДокументооборотСФССКлиентСервер.ИнтервалМеждуЗапросамиСпискаВходящихСообщенийСЭДОПоУмолчанию();
	КлючНастроек = ЭлектронныйДокументооборотСФССКлиентСервер.КлючНастроекИнтервалаМеждуЗапросамиКСерверуСЭДО();
	МинимальныйИнтервалМеждуЗапросами = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭлектронныйДокументооборотСФССКлиентСервер.КлючОбъектаНастроекЗапросовКСерверуСЭДО(),
		КлючНастроек,
		ИнтервалПоУмолчанию);
	Возврат МинимальныйИнтервалМеждуЗапросами;
	
КонецФункции

Функция МосковскоеВремя() Экспорт
	
	ТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();
	ЧасовойПоясМСК = "Europe/Moscow";
	ТекущаяДата = МестноеВремя(ТекущаяУниверсальнаяДата, ЧасовойПоясМСК);
	
	Возврат ТекущаяДата;
	
КонецФункции

Функция Задержка(ВремяСтарта, ВремяВСекундах, НомерВызова = 1) Экспорт
	
	МинимальнаяДлительность = 1;
	Если ВремяВСекундах <= МинимальнаяДлительность Тогда
		Возврат Истина;
	КонецЕсли;

	// Адрес из диапазона RFC5737 (TEST-NET-1).
	НемаршрутизируемыйАдрес = "192.0.2.1";
	СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(
		НемаршрутизируемыйАдрес,
		"",
		ВремяВСекундах);
	ВремяОтправкиЗапроса = ТекущаяДатаНаСервере();
	HTTPЗапрос = Новый HTTPЗапрос("timeout");
	Попытка
		Ответ = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
	КонецПопытки;
	
	ТекущаяДата = ТекущаяДатаНаСервере();
	Если ВремяВСекундах > МинимальнаяДлительность
		И ТекущаяДата - ВремяОтправкиЗапроса < МинимальнаяДлительность Тогда
		// Не удалось выдержать даже минимальный таймаут.
		Возврат Ложь;
	КонецЕсли;
	
	МаксимальнаяРекурсия = 200;
	Если НомерВызова > МаксимальнаяРекурсия Тогда
		// Ограничиваем рекурсию.
		Возврат Ложь;
	КонецЕсли;
	
	Если (ВремяСтарта + ВремяВСекундах) > ТекущаяДата Тогда
		НомерВызова = НомерВызова + 1;
		ОсталосьВремени = ВремяСтарта + ВремяВСекундах - ТекущаяДата + 1;
		Задержка(ТекущаяДата, ОсталосьВремени, НомерВызова);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребованийСФР(СсылкаОтправки, ДанныеЗаписи) Экспорт
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		СтруктураКлюча = Новый Структура("Ссылка", СсылкаОтправки);
		Ключ = РегистрыСведений.СвойстваОтветовНаТребованияФСС.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СвойстваОтветовНаТребованияФСС");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаОтправки);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СвойстваОтветовНаТребованияФСС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(СсылкаОтправки);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Ссылка = СсылкаОтправки;
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоОтветовНаТребованияСФР(Ссылки, ТолькоОтправленные = Ложь) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребованияСФР(Ссылки, ТолькоОтправленные);
	
КонецФункции

Функция ТребующиеСкорогоПодтвержденияСФР(Организация = Неопределено, Все = Ложь) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	
	Таблица = ТребующиеПодтвержденияСФР(Организация);
	
	Требования = Новый Массив;
	Для каждого Строка Из Таблица Цикл
		РазностьДней = ТребованияФНС.РазностьДнейИсправленная(Строка, Сегодня);
		ЭтоНужныйДокумент = РазностьДней <= 2 И РазностьДней >-60 И НЕ Все ИЛИ Все;
		
		Если ЭтоНужныйДокумент Тогда
			Требования.Добавить(Строка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Требования;
	
КонецФункции

Функция ТребующиеПодтвержденияСФР(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВходящийДокументСЭДОФСС.Ссылка КАК Ссылка,
	               |	ВходящийДокументСЭДОФСС.МаксимальнаяДатаПодтверждения КАК ПодтвердитьДо,
	               |	ВходящийДокументСЭДОФСС.Организация КАК Организация
	               |ИЗ
	               |	Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваОтветовНаТребованияФСС КАК СвойстваОтветовНаТребованияФСС
	               |		ПО ВходящийДокументСЭДОФСС.Ссылка = СвойстваОтветовНаТребованияФСС.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |				ТОГДА НЕ ВходящийДокументСЭДОФСС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ИНАЧЕ ВходящийДокументСЭДОФСС.Организация = &Организация
	               |		КОНЕЦ
	               |	И ВходящийДокументСЭДОФСС.ДатаОтправкиПодтверждения = ДАТАВРЕМЯ(1, 1, 1)
	               |	И (СвойстваОтветовНаТребованияФСС.ДатаПодтверждения ЕСТЬ NULL
	               |			ИЛИ НЕ СвойстваОтветовНаТребованияФСС.ДатаПодтверждения ЕСТЬ NULL
	               |				И СвойстваОтветовНаТребованияФСС.ДатаПодтверждения = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("Организация", 
		?(Организация = Неопределено, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Организация));
		
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция ТребующиеСкорогоОтветаСФР(Организация = Неопределено) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВходящийДокументСЭДОФСС.Ссылка КАК Ссылка,
	               |	ВходящийДокументСЭДОФСС.МаксимальнаяДатаОтправкиОтвета КАК ОтветитьДо,
	               |	ЕСТЬNULL(СвойстваОтветовНаТребованияФСС.ДатаОтветаИзмененная, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтветаИзмененная,
	               |	ЕСТЬNULL(СвойстваОтветовНаТребованияФСС.ТребуетОтвета, ЛОЖЬ) КАК ТребуетОтвета,
	               |	ЕСТЬNULL(СвойстваОтветовНаТребованияФСС.ОтветУжеДан, ЛОЖЬ) КАК ОтветУжеДан
	               |ИЗ
	               |	Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваОтветовНаТребованияФСС КАК СвойстваОтветовНаТребованияФСС
	               |		ПО ВходящийДокументСЭДОФСС.Ссылка = СвойстваОтветовНаТребованияФСС.Ссылка
	               |ГДЕ
	               |	ВходящийДокументСЭДОФСС.ДатаОтправкиОтветаНаЗапрос = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ВЫБОР
	               |			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |				ТОГДА НЕ ВходящийДокументСЭДОФСС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ИНАЧЕ ВходящийДокументСЭДОФСС.Организация = &Организация
	               |		КОНЕЦ
	               |	И ВходящийДокументСЭДОФСС.ТипСообщения В(&ТипыТребований)";
	
	Запрос.УстановитьПараметр("Организация", 
		?(Организация = Неопределено, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Организация));
	Типы = ТипыСообщенийСЭДОСТребованиямиОПредоставленииДокументов();
	Запрос.УстановитьПараметр("ТипыТребований", Типы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Требования = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ДатаОтветаИзмененная) Тогда
			ДатаОтвета = Выборка.ДатаОтветаИзмененная;
		Иначе
			ДатаОтвета = Выборка.ОтветитьДо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаОтвета)
			ИЛИ Выборка.ОтветУжеДан Тогда
			Продолжить;
		КонецЕсли;
		
		РазностьДней = ТребованияФНС.РазностьДатПоКалендарю(Сегодня, ДатаОтвета).Дельта;
		Если РазностьДней <= 2 И РазностьДней >-60 Тогда
			Требования.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Требования;
	
КонецФункции

Процедура ЗаписатьВРегистрИзвлеченныеДанныеТребованийСФР(Ссылка) Экспорт
	
	Корректно = 
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВходящийДокументСЭДОФСС")
		И ЗначениеЗаполнено(Ссылка);
	
	Если НЕ Корректно Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияИзРегистра = ДанныеРегистраИзвлеченныеДанныеТребованийСФР(Ссылка);
	
	Если ИнформацияИзРегистра.ЕстьДанные Тогда
		
		ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребованийСФР(Ссылка, ИнформацияИзРегистра.ДнейДоОтвета);
		
		ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребованийСФР(Ссылка, ЗначенияЗаполнения);
		
	Иначе
		
		ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребованийСФР(Ссылка,, Истина);
		ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребованийСФР(Ссылка, ЗначенияЗаполнения);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРегистраИзвлеченныеДанныеТребованийСФР(Ссылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДанные", Ложь);
	Результат.Вставить("Ссылка", Ссылка);
	
	Регистр = Метаданные.РегистрыСведений.СвойстваОтветовНаТребованияФСС;
	Для каждого Реквизиты Из Регистр.Реквизиты Цикл
		Результат.Вставить(Реквизиты.Имя, Реквизиты.Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Если НЕ ЭтоТребованиеСФР(Ссылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.СвойстваОтветовНаТребованияФСС КАК СвойстваОтветовНаТребованияФСС
	|ГДЕ
	|	СвойстваОтветовНаТребованияФСС.Ссылка = &Ссылка";
	
	Выборка = ЗапросДанных.Выполнить().Выгрузить();
	Если Выборка.Количество() = 1 Тогда
		
		СтрокаВыборки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка[0]);
		
		ЗаполнитьЗначенияСвойств(Результат, СтрокаВыборки);
		Результат.ЕстьДанные = Истина;
		
	КонецЕсли;
	
	// Проверки на случай рассинхронизации между регистром и данными требований.
	Если НЕ ЗначениеЗаполнено(Результат.ДатаОтвета)
		И ЗначениеЗаполнено(Ссылка.ДатаОтправкиОтветаНаЗапрос) Тогда
		Результат.ДатаОтвета = Ссылка.ДатаОтправкиОтветаНаЗапрос;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Результат.ДатаПодтверждения)
		И ЗначениеЗаполнено(Ссылка.ДатаОтправкиПодтверждения) Тогда
		Результат.ДатаПодтверждения = Ссылка.ДатаОтправкиПодтверждения;
	КонецЕсли;
	
	Если НЕ Результат.ТребуетОтвета
		И ЭтоТребованиеСФРОПредоставленииДокументов(Ссылка) Тогда
		Результат.ТребуетОтвета = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ОтветитьДо)
		И ЗначениеЗаполнено(Ссылка.МаксимальнаяДатаОтправкиОтвета) Тогда
		Результат.ОтветитьДо = Ссылка.МаксимальнаяДатаОтправкиОтвета;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТребуетсяОбменПоТипуВзаимодействияОрганизацияСЭДО(Организация) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Отправки = КонтекстЭДО.НезавершенныеПоследниеОтправкиФССПоОрганизации(Организация);
	Если Отправки <> Неопределено Тогда
		Для каждого ОтправкаСсылка Из Отправки Цикл
			ИнформацияПоОтправке = КонтекстЭДО.ИнформацияПоОтправкеФСС(ОтправкаСсылка);
			Если ИнформацияПоОтправке.ОтправкаЧерезСЭДО
				И ИнформацияПоОтправке.ТипВзаимодействия =
					ДокументооборотСФССКлиентСервер.ТипВзаимодействияОрганизацияСЭДО() Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает входящее сообщение СЭДО по аналогии с тем, как обрабатывается сообщение после получения из СЭДО.
//   Запускает ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
//
// Параметры:
//   ВходящееСообщение - Структура - См. функцию ВходящееСообщение.
//   ТекстСообщения - Строка - XML-текст входящего сообщения.
//
// Возвращаемое значение:
//   Структура - См. значение 3-го параметра (Результат)
//       процедуры ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
//       * Обработано      - Булево
//       * ОшибкаОбработки - Булево
//       * ОписаниеОшибки  - Строка
//
Функция ПовторноОбработатьВходящееСообщениеСЭДО(ВходящееСообщение, ТекстСообщения = Неопределено) Экспорт
	
	Результат = ЭлектронныйДокументооборотСФССКлиентСервер.НовыйРезультатПриПолученииСодержимогоСообщенияСЭДО();
	
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = ВходящееСообщение.Содержимое.Получить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		Результат.ОшибкаОбработки = Истина;
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнен текст сообщения.';
										|en = 'Не заполнен текст сообщения.'");
		Возврат Результат;
	КонецЕсли;
	
	Сообщение = Новый Структура(
		"ТекстСообщения,
		|Идентификатор,
		|Организация,
		|Содержимое,
		|Дата,
		|ДатаЗагрузки,
		|ДатаОтправкиПодтверждения,
		|ДатаПолученияИзвещенияОПолученииПодтверждения,
		|ДатаПолученияОшибкиПодтверждения,
		|ДатаСоздания,
		|Новое,
		|ОшибкаОбработкиСообщения,
		|ОшибкаПодтверждения,
		|ПодтверждениеОтправлено,
		|Получатель,
		|Тип,
		|ТребуетсяПодтверждение,
		|СрокДействия");
	ЗаполнитьЗначенияСвойств(Сообщение, ВходящееСообщение);
	Если ТипЗнч(Сообщение.Тип) = Тип("Число") Тогда
		Сообщение.Тип = Формат(Сообщение.Тип, "ЧН=; ЧГ=");
	КонецЕсли;
	Сообщение.ТекстСообщения = ТекстСообщения;
	Результат = ЭлектронныйДокументооборотСФСС.ПриПолученииСодержимогоСообщенияСЭДО(Сообщение.Организация, Сообщение);
	
	Возврат Результат;
	
КонецФункции

Функция РасширенноеСостояниеПодтвержденияИОтветаНаТребованиеСФР(Требование, Сейчас) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Ответы = КонтекстЭДОСервер.ОтветыНаТребованиеФСС(Требование);
	
	Результат = ДанныеРегистраИзвлеченныеДанныеТребованийСФР(Требование);
	
	Если ЗначениеЗаполнено(Результат.ПодтвердитьДо) Тогда
		РазностьДней = ТребованияФНС.РазностьДнейИсправленная(Результат, Сейчас);
		Результат.Вставить("ОсталосьДоПодтверждения", РазностьДней);
	Иначе
		Результат.Вставить("ОсталосьДоПодтверждения", -1);
	КонецЕсли;
	
	Результат.Вставить("Подтвержден", ЗначениеЗаполнено(Результат.ДатаПодтверждения));
	
	Если Результат.Подтвержден Тогда
		
		Если ЗначениеЗаполнено(Результат.ДатаОтветаИзмененная) Тогда
			ОтветитьДо = Результат.ДатаОтветаИзмененная;
		Иначе
			ОтветитьДо = Результат.ОтветитьДо;
		КонецЕсли;
		ОтветитьДо = Результат.ОтветитьДо;
		Результат.Вставить("ОтветитьДо", ОтветитьДо);
		
		Результат.Вставить("ЕстьОтвет", Результат.КоличествоОтветов > 0);
		
		Если Результат.ЕстьОтвет И ЗначениеЗаполнено(Результат.ДатаОтвета) Тогда
			РазностьДней = ТребованияФНС.РазностьДатПоКалендарю(Результат.ДатаОтвета, Результат.ОтветитьДо).Дельта;
		Иначе
			РазностьДней = ТребованияФНС.РазностьДатПоКалендарю(Сейчас, Результат.ОтветитьДо).Дельта;
		КонецЕсли;
		Результат.Вставить("ОсталосьДоОтвета", РазностьДней);
		
		РазностьДней = ТребованияФНС.РазностьДатПоКалендарю(Результат.ПодтвердитьДо, Результат.ДатаПодтверждения).Дельта;
		Результат.Вставить("ПодтверждениеПросроченоНа", РазностьДней);
		
	КонецЕсли;
	
	Результат.Вставить("ЕстьОтправленныеОтветы", ЕстьОтправленныеОтветыНаТребованиеСФР(Требование, Ложь));
	
	Результат.ТребуетОтвета = 
		Результат.ТребуетОтвета 
		И НЕ Результат.ОтветУжеДан; // В другой программе или другим способом
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьОтправленныеОтветыНаТребованиеСФР(Требование, ВключаяНевозможностьПредоставленияДокументов = Истина) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КоличествоОтветовНаТребования =
		КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребования(
			Требование,
			Истина,
			ВключаяНевозможностьПредоставленияДокументов);
	
	Возврат КоличествоОтветовНаТребования[Требование] > 0
	
КонецФункции

Функция ЕстьТребующиеСкорогоПодтвержденияТребованияСФР(Организация = Неопределено) Экспорт
	
	Требования = ТребующиеСкорогоПодтвержденияСФР(Организация);
	Возврат Требования.Количество() > 0;
	
КонецФункции

Функция ЭтоТребованиеСФР(СсылкаНаОбъект) Экспорт
	
	Возврат ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВходящийДокументСЭДОФСС");
	
КонецФункции

Функция ЭтоТребованиеСФРОПредоставленииДокументов(Требование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоТребованиеСФР(Требование) Тогда
		ТипСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Требование, "ТипСообщения");
	Иначе
		ТипСообщения = Требование.ТипСообщения;
	КонецЕсли;
	
	Типы = ТипыСообщенийСЭДОСТребованиямиОПредоставленииДокументов();
	Возврат НЕ Типы.Найти(ТипСообщения) = Неопределено;
	
КонецФункции

Функция НовыеДанныеОтветовНаТребованияСФР() Экспорт
	
	ДанныеОтветов = Новый Структура;
	ДанныеОтветов.Вставить("Ответы", Новый Массив);
	ДанныеОтветов.Вставить("Отправлен", Ложь);
	ДанныеОтветов.Вставить("КоличествоОтправлено", 0);
	
	Возврат ДанныеОтветов;
	
КонецФункции

Функция СфомироватьОтветНаОбращениеСФРКСтрахователю(СсылкаНаОбращение) Экспорт
	
	Результат = Документы.ОтветСтрахователяНаОбращениеСФР.ПустаяСсылка();
	
	Попытка
		Ответ = Документы.ОтветСтрахователяНаОбращениеСФР.СоздатьДокумент();
		
		Ответ.Дата 		= ТекущаяДатаСеанса();
		Ответ.УстановитьВремя();
		Ответ.УстановитьНовыйНомер();
		Ответ.Заполнить(СсылкаНаОбращение);
		Ответ.Записать();
		
		Результат = Ответ.Ссылка;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Шаблон = НСтр("ru = 'Невозможно сформировать ответ по причине: %1';
						|en = 'Невозможно сформировать ответ по причине: %1'");
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(Шаблон, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ПодробноеПредставление = НСтр("ru = 'Ошибка формирования ответа на обращение СФР:';
										|en = 'Ошибка формирования ответа на обращение СФР:'")
			+ Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Событие = НСтр("ru = 'Обращение СФР к страхователю';
						|en = 'Обращение СФР к страхователю'");
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставление);

	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ОтветыНаОбращениеСФРКСтрахователю(СсылкаНаОбращение) Экспорт
	
	Ответы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ОтветСтрахователяНаОбращениеСФР.Ссылка КАК Ответ
	               |ИЗ
	               |	Документ.ОтветСтрахователяНаОбращениеСФР КАК ОтветСтрахователяНаОбращениеСФР
	               |ГДЕ
	               |	ОтветСтрахователяНаОбращениеСФР.Основание = &Основание
	               |	И ОтветСтрахователяНаОбращениеСФР.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Основание", СсылкаНаОбращение);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ответы;
	Иначе
		Выгрузка = РезультатЗапроса.Выгрузить();
		Ответы = Выгрузка.ВыгрузитьКолонку("Ответ");
	КонецЕсли;
	
	Возврат Ответы;
	
КонецФункции

Процедура ЗаполнитьОписаниеТипаВДанныхСообщенияСЭДО(ДанныеСообщения) Экспорт
	
	ДанныеСообщения.ОписаниеТипа = ОписаниеТипаСообщенияСЭДО(ДанныеСообщения.Тип);
	
КонецПроцедуры

Функция ОшибкаНедоступностиОбработкиДОКО() Экспорт
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось получить доступ к обработке документооборота с контролирующими органами.';
							|en = 'Не удалось получить доступ к обработке документооборота с контролирующими органами.'")
		+ Символы.ПС + НСтр("ru = 'Проверьте роли текущего пользователя.';
							|en = 'Проверьте роли текущего пользователя.'");;
	Возврат ОписаниеОшибки;
	
КонецФункции

#Область РаботаСТипамиСообщенийСЭДО

Функция ТипСообщенияСЭДОВЧисло(Знач ТипСообщенияСЭДО, Суффикс = "") Экспорт
	
	Возврат ЭлектронныйДокументооборотСФССКлиентСервер.ТипСообщенияСЭДОВЧисло(
		ТипСообщенияСЭДО, Суффикс);
	
КонецФункции

Функция ТипСообщенияЧислоВРегистреВходящихСообщенийСЭДО() Экспорт
	
	Возврат РегламентированнаяОтчетностьПовтИсп.ТипСообщенияЧислоВРегистреВходящихСообщенийСЭДО();
	
КонецФункции

Функция ПривестиТипСообщенияДляРегистраВходящихСообщенийСЭДО(ТипСообщения) Экспорт
	
	Результат = Неопределено;
	Если ТипСообщенияЧислоВРегистреВходящихСообщенийСЭДО() Тогда
		Результат = ТипСообщенияСЭДОВЧисло(ТипСообщения);
	Иначе
		Результат = ЭлектронныйДокументооборотСФССКлиентСервер.ТипСообщенияСЭДОВСтроку(ТипСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПустоеЗначениеТипаСообщенияВРегистреВходящихСообщенийСЭДО() Экспорт
	
	Результат = Неопределено;
	Если ТипСообщенияЧислоВРегистреВходящихСообщенийСЭДО() Тогда
		Результат = 0;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ОписаниеТипаСообщенияСЭДО(Знач ТипСообщения) Экспорт
	
	Описание = ЭлектронныйДокументооборотСФССКлиентСервер.НовоеОписаниеТипаСообщенияСЭДО();
	ТипСообщения = ЭлектронныйДокументооборотСФССКлиентСервер.ТипСообщенияСЭДОВСтроку(ТипСообщения);
		
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		ОписаниеОшибки = ОшибкаНедоступностиОбработкиДОКО();
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	Описание.Наименование = КонтекстЭДО.ПредставлениеДокументаПоТипуСообщенияСЭДО(ТипСообщения);
	
	Описание.ТипСтрокой = ТипСообщения;
	Суффикс = "";
	Описание.ТипЧислом = ТипСообщенияСЭДОВЧисло(
		ТипСообщения, Суффикс);
	Описание.Суффикс = Суффикс;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СборСтатистикиПоСЭДО

Функция ТекстЗапросаДляСтатистикиСЭДО()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Организации.УчетнаяЗаписьОбмена.Ссылка ЕСТЬ NULL
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК УчетнаяЗаписьОбмена,
	               |	Организации.ВидОбменаСКонтролирующимиОрганами КАК ВидОбменаСКонтролирующимиОрганами,
	               |	Организации.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА Организации.УчетнаяЗаписьОбмена.Ссылка ЕСТЬ NULL
	               |			ТОГДА ""БезОператора""
	               |		ИНАЧЕ Организации.УчетнаяЗаписьОбмена.СпецоператорСвязи
	               |	КОНЕЦ КАК СпецоператорСвязи
	               |ПОМЕСТИТЬ втОрганизации
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.Ссылка В(&Организации)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкиОбменаФСС.Организация КАК Организация,
	               |	НастройкиОбменаФСС.ИспользоватьОбмен КАК ИспользоватьОбмен,
	               |	НастройкиОбменаФСС.ОбменПоСЭДОНапрямую КАК ОбменПоСЭДОНапрямую
	               |ПОМЕСТИТЬ втНастройкиФСС
	               |ИЗ
	               |	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
	               |ГДЕ
	               |	НастройкиОбменаФСС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |	И НастройкиОбменаФСС.Организация В(&Организации)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВходящиеСообщенияСЭДОФСС.Идентификатор) КАК КоличествоСообщений,
	               |	втОрганизации.Ссылка КАК Организация
	               |ПОМЕСТИТЬ втКоличествоСообщений
	               |ИЗ
	               |	втОрганизации КАК втОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	               |		ПО втОрганизации.Ссылка = ВходящиеСообщенияСЭДОФСС.Организация
	               |			И (ВходящиеСообщенияСЭДОФСС.Дата > &НачальнаяДата)
	               |			И (ВходящиеСообщенияСЭДОФСС.Организация В (&Организации))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втОрганизации.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВходящиеСообщенияСЭДОФСС.Идентификатор) КАК КоличествоСообщенийЧерезОператора,
	               |	втОрганизации.Ссылка КАК Организация
	               |ПОМЕСТИТЬ втКоличествоСообщенийЧерезОператора
	               |ИЗ
	               |	втОрганизации КАК втОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	               |		ПО втОрганизации.Ссылка = ВходящиеСообщенияСЭДОФСС.Организация
	               |			И (ВходящиеСообщенияСЭДОФСС.Дата > &НачальнаяДата)
	               |			И (ВходящиеСообщенияСЭДОФСС.Организация В (&Организации))
	               |			И (ВходящиеСообщенияСЭДОФСС.ОбменЧерезОператора = ИСТИНА)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втОрганизации.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВходящиеСообщенияСЭДОФСС.Идентификатор) КАК КоличествоНовыхСообщений,
	               |	втОрганизации.Ссылка КАК Организация
	               |ПОМЕСТИТЬ втКоличествоНовыхСообщений
	               |ИЗ
	               |	втОрганизации КАК втОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	               |		ПО втОрганизации.Ссылка = ВходящиеСообщенияСЭДОФСС.Организация
	               |			И (ВходящиеСообщенияСЭДОФСС.Дата > &НачальнаяДата)
	               |			И (ВходящиеСообщенияСЭДОФСС.Организация В (&Организации))
	               |			И (ВходящиеСообщенияСЭДОФСС.Новое = ИСТИНА)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втОрганизации.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втОрганизации.УчетнаяЗаписьОбмена КАК УчетнаяЗапись,
	               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(втОрганизации.ВидОбменаСКонтролирующимиОрганами, ""НеЗаполнен"")) КАК ВидОбмена,
	               |	ЕСТЬNULL(втОрганизации.СпецоператорСвязи, ""БезОператора"") КАК Оператор,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ЕстьСообщения,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКоличествоСообщенийЧерезОператора.КоличествоСообщенийЧерезОператора, 0) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ЕстьСообщенияОператор,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0) > 0
	               |				И ЕСТЬNULL(втКоличествоСообщенийЧерезОператора.КоличествоСообщенийЧерезОператора, 0) = ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ВсеСообщенияОператор,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0) > 0
	               |				И ЕСТЬNULL(втКоличествоСообщенийЧерезОператора.КоличествоСообщенийЧерезОператора, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ВсеСообщенияНапрямую,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0) > 0
	               |				И НЕ ЕСТЬNULL(втКоличествоНовыхСообщений.КоличествоНовыхСообщений, 0) = ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЕстьЗагруженные,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0) > 0
	               |				И ЕСТЬNULL(втКоличествоНовыхСообщений.КоличествоНовыхСообщений, 0) = ЕСТЬNULL(втКоличествоСообщений.КоличествоСообщений, 0)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СообщенияНеЗагружены,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКоличествоНовыхСообщений.КоличествоНовыхСообщений, 0) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ЕстьНовые,
	               |	1 КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втНастройкиФСС.ИспользоватьОбмен, ЛОЖЬ)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ВключенОбмен,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втНастройкиФСС.ОбменПоСЭДОНапрямую, ЛОЖЬ)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ФлагОбменНапрямую,
	               |	втОрганизации.Ссылка КАК Организация
	               |ИЗ
	               |	втОрганизации КАК втОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоСообщений КАК втКоличествоСообщений
	               |		ПО втОрганизации.Ссылка = втКоличествоСообщений.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоСообщенийЧерезОператора КАК втКоличествоСообщенийЧерезОператора
	               |		ПО втОрганизации.Ссылка = втКоличествоСообщенийЧерезОператора.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоНовыхСообщений КАК втКоличествоНовыхСообщений
	               |		ПО втОрганизации.Ссылка = втКоличествоНовыхСообщений.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиФСС КАК втНастройкиФСС
	               |		ПО втОрганизации.Ссылка = втНастройкиФСС.Организация";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОрганизацииБазы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ";
	Организации = Запрос.Выполнить().Выгрузить();
	
	Возврат Организации.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ВыполнитьЗапросИСохранитьДанныеСтатистикиСЭДО(РежимТестирования = Ложь)
	
	Информация = ЗагрузитьИнформациюПоСтатистике();
	НоваяИнформация = НоваяИнформацияОСтатистике();
	
	ОрганизацииДляСбора = Новый Массив;
	ОрганизацииБазы = ОрганизацииБазы();
	Если Информация.Организации.Количество() = 0
		ИЛИ ВерсияБольше(НоваяИнформация.Версия, Информация.ВерсияОтправленнойСтатистики)
		ИЛИ НЕ Информация.СтатистикаОтправлена
		ИЛИ РежимТестирования Тогда
		ОрганизацииДляСбора = ОрганизацииБазы;
	Иначе
		Для каждого Организация Из ОрганизацииБазы Цикл
			Если Информация.Организации.Найти(Организация) = Неопределено Тогда
				ОрганизацииДляСбора.Добавить(Организация);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РежимТестирования Тогда
		Информация.Организации = Новый Массив;
	ИначеЕсли ОрганизацииДляСбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляСтатистикиСЭДО();
	Запрос.УстановитьПараметр("Организации", ОрганизацииДляСбора);
	НачальнаяДата = НачалоДня(ДобавитьМесяц(ТекущаяДатаНаСервере(), -3));
	Запрос.УстановитьПараметр("НачальнаяДата", НачальнаяДата);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПоляРесурсов = Новый Массив;
	ПоляРесурсов.Добавить("Количество");
	ПоляРесурсов.Добавить("ЕстьСообщения");
	ПоляРесурсов.Добавить("ЕстьНовые");
	ПоляРесурсов.Добавить("ЕстьЗагруженные");
	ПоляРесурсов.Добавить("ЕстьСообщенияОператор");
	ПоляРесурсов.Добавить("ВсеСообщенияОператор");
	ПоляРесурсов.Добавить("ВсеСообщенияНапрямую");
	ПоляРесурсов.Добавить("СообщенияНеЗагружены");
	
	КолонкаОрганизация = "Организация";
	
	Результат.Колонки.Добавить("ОбменОператорКод", Новый ОписаниеТипов("Число"));
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("БезУчетаПользователя", Истина);
	
	СтатистикаСтрокой = "";
	// Собираем статистику по каждой строке результата
	Для каждого Строка Из Результат Цикл
		МассивЗначений = Новый Массив;
		Если ПустаяСтрока(Строка.ВидОбмена) Тогда
			Строка.ВидОбмена = "НеУказан";
		КонецЕсли;
		Если ПустаяСтрока(Строка.Оператор) Тогда
			Строка.Оператор = "БезОператора";
		КонецЕсли;
		СвойстваОбменаПоСЭДОЧерезОператора =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(
		Строка.Организация,,
		НастройкиВызова);
		Строка.ОбменОператорКод = ?(СвойстваОбменаПоСЭДОЧерезОператора.ОбменПоСЭДОНапрямую, 0, 1);
		
		// Проходим по всем колонкам таблицы результата
		Для каждого Колонка Из Результат.Колонки Цикл
			// Пропускаем колонки из ПоляРесурсов и колонку "Организации"
			Если ПоляРесурсов.Найти(Колонка.Имя) = Неопределено
				И Колонка.Имя <> КолонкаОрганизация Тогда
				ЗначениеКолонки = Строка[Колонка.Имя];
				
				// Проверяем, является ли тип колонки числовым
				ТипКолонки = Колонка.ТипЗначения;
				
				СтрокаЗначения = Строка(ЗначениеКолонки);
				
				// Очищаем строку от пробелов, точек, запятых и кавычек
				ОчищеннаяСтрока = СтрЗаменить(СтрокаЗначения, ".", "");
				ОчищеннаяСтрока = СтрЗаменить(ОчищеннаяСтрока, ",", "");
				ОчищеннаяСтрока = СтрЗаменить(ОчищеннаяСтрока, """", "");
				ОчищеннаяСтрока = СтрЗаменить(ОчищеннаяСтрока, "'", "");
				
				// Если строка не пустая, обрабатываем слова
				Если Не ПустаяСтрока(ОчищеннаяСтрока) Тогда
					МассивСлов = СтрРазделить(ОчищеннаяСтрока, " ", Ложь);
					Для Индекс = 0 По МассивСлов.ВГраница() Цикл
						// Делаем первую букву каждого слова заглавной
						Слово = МассивСлов[Индекс];
						МассивСлов[Индекс] = ВРег(Лев(Слово, 1)) + Сред(Слово, 2);
					КонецЦикла;
					// Собираем слова обратно в строку без пробелов
					ОчищеннаяСтрока = СтрСоединить(МассивСлов, "");
				КонецЕсли;
				
				ОчищеннаяСтрока = Колонка.Имя + ОчищеннаяСтрока;
				
				МассивЗначений.Добавить(ОчищеннаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		// Формируем строку, разделяя значения точками
		ИзмеренияСтатистики = ПрефиксСтатистикиСЭДО() + СтрСоединить(МассивЗначений, ".");
		
		// Сохраняем статистику для организации в соответствие
		Информация.ДанныеПоОрганизациям.Вставить(Строка.Организация, ИзмеренияСтатистики);
		
		Для каждого Ресурс Из ПоляРесурсов Цикл
			ЗначениеРесурса = Строка[Ресурс];
			Если ЗначениеРесурса > 0 Тогда
				ИмяОперации = ИзмеренияСтатистики + "." + Ресурс;
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, ЗначениеРесурса);
				СтатистикаСтрокой = СтатистикаСтрокой + ИмяОперации + " = " + ЗначениеРесурса + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтрокаРезультата = ТаблицаЗначенийВCSV(Результат, КолонкаОрганизация, Информация.Версия, Ложь);
	ИмяОперации = ПрефиксСтатистикиСЭДО() + "ДанныеБазы";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, 1, СтрокаРезультата);
	
	Информация.Организации = ОрганизацииБазы;
	Информация.СтатистикаОтправлена = Истина;
	Информация.ВерсияОтправленнойСтатистики = НоваяИнформация.Версия;
	СохранитьИнформациюПоСтатистике(Информация);
	
КонецПроцедуры

// Сравнивает две версии программного обеспечения в формате "X.X" 
// и определяет, является ли первая версия более новой по сравнению со второй.
// Если вторая версия - пустая строка, возвращает Истина.
//
// Параметры:
//   Версия1 - Строка - первая версия в формате "X.X" (например, "2.0")
//   Версия2 - Строка - вторая версия в формате "X.X" (например, "1.0") или пустая строка
//
// Возвращаемое значение:
//   Булево - Истина, если Версия1 больше Версия2 или Версия2 пустая, Ложь в противном случае или при ошибке формата

Функция ВерсияБольше(Версия1, Версия2) Экспорт
	// Если Версия2 пустая, возвращаем Истина
	Если ПустаяСтрока(Версия2) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Разделяем версии на части по точке
	ЧастиВерсии1 = СтрРазделить(Версия1, ".");
	ЧастиВерсии2 = СтрРазделить(Версия2, ".");
	
	// Проверяем, что обе версии имеют правильный формат
	Если ЧастиВерсии1.Количество() <> 2 Или ЧастиВерсии2.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Преобразуем части в числа
	Попытка
		Старшая1 = Число(ЧастиВерсии1[0]);
		Младшая1 = Число(ЧастиВерсии1[1]);
		Старшая2 = Число(ЧастиВерсии2[0]);
		Младшая2 = Число(ЧастиВерсии2[1]);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	// Сравниваем версии
	Если Старшая1 > Старшая2 Тогда
		Возврат Истина;
	ИначеЕсли Старшая1 < Старшая2 Тогда
		Возврат Ложь;
	Иначе
		Возврат Младшая1 > Младшая2;
	КонецЕсли;
КонецФункции

Функция ТаблицаЗначенийВCSV(ТаблицаЗначений,
				ИсключаемыеКолонкиСтрокой = "", Версия = "1.0", ВыводитьЗаголовки = Истина) Экспорт
	
	// Разбираем строку исключаемых колонок в массив
	ИсключаемыеКолонки = Новый Массив;
	Если Не ПустаяСтрока(ИсключаемыеКолонкиСтрокой) Тогда
		МассивКолонок = СтрРазделить(ИсключаемыеКолонкиСтрокой, ",", Ложь);
		Для каждого Колонка Из МассивКолонок Цикл
			ИсключаемыеКолонки.Добавить(СокрЛП(Колонка)); // Удаляем лишние пробелы
		КонецЦикла;
	КонецЕсли;
	
	// Инициализируем результирующую строку
	Результат = Версия + Символы.ПС;
	
	// Формируем заголовок
	Если ВыводитьЗаголовки Тогда
		МассивЗаголовков = Новый Массив;
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Если ИсключаемыеКолонки.Найти(Колонка.Имя) = Неопределено Тогда
				МассивЗаголовков.Добавить("""" + Колонка.Имя + """");
			КонецЕсли;
		КонецЦикла;
		Результат = СтрСоединить(МассивЗаголовков, ",") + Символы.ПС;
	КонецЕсли;
	
	// Формируем строки данных
	Для каждого Строка Из ТаблицаЗначений Цикл
		МассивЗначений = Новый Массив;
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Если ИсключаемыеКолонки.Найти(Колонка.Имя) = Неопределено Тогда
				Значение = Строка[Колонка.Имя];
				СтрокаЗначения = Строка(Значение);
				
				// Удаляем кавычки и запятые из значения
				ОчищеннаяСтрока = СтрЗаменить(СтрокаЗначения, """", "");
				ОчищеннаяСтрока = СтрЗаменить(ОчищеннаяСтрока, "'", "");
				ОчищеннаяСтрока = СтрЗаменить(ОчищеннаяСтрока, ",", "");
				
				// Проверяем тип колонки
				ТипКолонки = Колонка.ТипЗначения;
				ЭтоЧисловойТип = ТипКолонки.СодержитТип(Тип("Число"));
				
				// Для строковых значений обрамляем кавычками
				Если ЭтоЧисловойТип Тогда
					МассивЗначений.Добавить(ОчищеннаяСтрока);
				Иначе
					МассивЗначений.Добавить("""" + ОчищеннаяСтрока + """");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Результат = Результат + СтрСоединить(МассивЗначений, ",") + Символы.ПС;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяИнформацияОСтатистике()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеПоОрганизациям", Новый Соответствие);
	Результат.Вставить("ВозниклоИсключение", Ложь);
	Результат.Вставить("ИсключенияПоОрганизациям", Новый Соответствие);
	Результат.Вставить("СтатистикаОтправлена", Ложь);
	Результат.Вставить("ВерсияОтправленнойСтатистики", "");
	Результат.Вставить("Организации", Новый Массив);
	Результат.Вставить("Версия", "1.0");
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьИнформациюПоСтатистике(Информация)
	
	КлючОбъекта = КлючОбъектаОбщихНастроек();
	КлючНастроек = КлючНастроекСтатистики();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Информация);
	
	Возврат Истина;
	
КонецФункции

Функция ПрефиксСтатистикиСЭДО()
	
	Информация = НоваяИнформацияОСтатистике();
	Версия = СтрЗаменить(Информация.Версия, ".", "");
	Возврат "СтатистикаСЭДО." + Версия + ".";
	
КонецФункции

Функция ЗагрузитьИнформациюПоСтатистике()
	
	НоваяИнформация = НоваяИнформацияОСтатистике();
	
	КлючОбъекта = КлючОбъектаОбщихНастроек();
	КлючНастроек = КлючНастроекСтатистики();
	Информация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, Неопределено);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = НоваяИнформация;
	Иначе
		Для каждого КлючЗначение Из НоваяИнформация Цикл
			Если НЕ Информация.Свойство(КлючЗначение.Ключ) Тогда
				// Добавляем новые ключи.
				Информация.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

Функция КлючНастроекСтатистики()
	
	Возврат "ИнформацияПоСтатистике";
	
КонецФункции

#КонецОбласти

Функция ТипыСообщенийСЭДОСТребованиямиОПредоставленииДокументов()
	
	Типы = Новый Массив;
	Типы.Добавить("303");
	Типы.Добавить("308");
	Возврат Типы;
	
КонецФункции

Функция ПараметрыЗаданияОбменФСС()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("БылиБлокировкиИзЗаЧастыхЗапросов", Ложь);
	ПараметрыЗадания.Вставить("ОсталосьВремениБлокировки", 0);
	ПараметрыЗадания.Вставить("ВсеОрганизацииОбмениваютсяЧерезОператора", Ложь);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

Функция ИдентификаторРегламентногоЗадания()
	
	Возврат "ОбменСФСС";
	
КонецФункции

Функция СписокДопустимыхОрганизацийВОбъектахОбменаФСС()
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(НСтр("ru = 'Автоматический обмен с СЭДО СФР';
																	|en = 'Автоматический обмен с СЭДО СФР'"), Истина);
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурнал(Уровень, ТекстСобытия, Данные = Неопределено)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), Уровень, , Данные, ТекстСобытия);
	
КонецПроцедуры

Функция КлючОбъектаОбщихНастроек()
	
	Возврат "ЭлектронныйДокументооборотСФСС";
	
КонецФункции

// Входящие сообщения по ФК "Доходная часть" с типами СЭДО 300 - 336.
Функция ПолучитьТипыСообщенийСДОФССДоходнаяЧасть()
	
	Результат = Новый Массив;
	
	ТипыСообщений = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО(Истина);
	
	Результат.Добавить(ТипыСообщений.АктКамеральнойПроверки);
	Результат.Добавить(ТипыСообщений.РешениеОПривлеченииКОтветственностиПоРезультатамКамеральнойПроверки);
	Результат.Добавить(ТипыСообщений.РешениеОбОтказеВПривлеченииКОтветственностиПоРезультатамКамеральнойПроверки);
	Результат.Добавить(ТипыСообщений.ТребованиеОПредставленииДокументовПоКамеральнойПроверке);
	Результат.Добавить(ТипыСообщений.РешениеОВозмещенииИзлишнеПонесенныхРасходовПоРезультатамКамеральнойПроверки);
	Результат.Добавить(ТипыСообщений.АктВыезднойПроверки);
	Результат.Добавить(ТипыСообщений.РешениеОПривлеченииКОтветственностиПоРезультатамВыезднойПроверки);
	Результат.Добавить(ТипыСообщений.РешениеОбОтказеВПривлеченииКОтветственностиПоРезультатамВыезднойПроверки);
	Результат.Добавить(ТипыСообщений.ТребованиеОПредставленииДокументовПоВыезднойПроверке);
	Результат.Добавить(ТипыСообщений.РешениеОВозмещенииИзлишнеПонесенныхРасходовПоРезультатамВыезднойПроверки);
	Результат.Добавить(ТипыСообщений.ТребованиеОбУплатеНедоимкиПоСтраховымВзносамПенейИШтрафов);
	Результат.Добавить(ТипыСообщений.РешениеОВзыскании);
	Результат.Добавить(ТипыСообщений.ТребованиеОВозмещенииИзлишнеПонесенныхРасходов);
	Результат.Добавить(ТипыСообщений.УведомлениеОПриемеДокументовПоКамеральнойПроверке);
	Результат.Добавить(ТипыСообщений.УведомлениеОПриемеДокументовПоВыезднойПроверке);
	Результат.Добавить(ТипыСообщений.РезультатРегистрацииЗаявленияНаФормированиеСправкиОрасчетах);
	Результат.Добавить(ТипыСообщений.СправкаОРасчетах);
	Результат.Добавить(ТипыСообщений.УведомлениеОФактеИзлишнейУплаты);
	Результат.Добавить(ТипыСообщений.РешениеОЗачетеСуммыИзлишнеУплаченныхВзносовШтрафов);
	Результат.Добавить(ТипыСообщений.РешениеОВозвратеСуммыИзлишнеУплаченныхВзносовШтрафов);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваЗаписиРегистраИзвлеченныеДанныеТребованийСФР(Ссылка, ДнейДоОтвета = 0, ПервоначальноеЗаполнение = Ложь)
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ПервоначальноеЗаполнение Тогда
		
		ДатаОтправки = Ссылка.ВходящаяДата;
		ЗначенияЗаполнения.Вставить("ДатаОтправкиТребования", ДатаОтправки);
		
	КонецЕсли;
	
	Если ДнейДоОтвета <> 0 Тогда
		ЗначенияЗаполнения.Вставить("ДнейДоОтвета",  ДнейДоОтвета);
		ЗначенияЗаполнения.Вставить("ТребуетОтвета", Истина);
	КонецЕсли;
	
	ДатаПодтверждения = Ссылка.ДатаОтправкиПодтверждения;
	ЗначенияЗаполнения.Вставить("ДатаПодтверждения", ДатаПодтверждения);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ОтветыНаТребования = КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребования(Ссылка,,Ложь);
	КоличествоОтветов  = ОтветыНаТребования.Получить(Ссылка);
	ЗначенияЗаполнения.Вставить("КоличествоОтветов", КоличествоОтветов);
	
	Если КоличествоОтветов > 0 Тогда
		
		ДатаОтвета = Ссылка.ДатаОтправкиОтветаНаЗапрос;
		ЗначенияЗаполнения.Вставить("ДатаОтвета", ДатаОтвета);
		
		Состояния = СостоянияОтветов(Ссылка);
		
		Если Состояния.ЕстьКритическиеОшибки Тогда
			ЗначенияЗаполнения.Вставить("ЕстьКритическаяОшибкаОтвета", Истина);
		КонецЕсли;
		
		Если Состояния.ОтветНеПринят Тогда
			ЗначенияЗаполнения.Вставить("ОтветНеПринят", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;

КонецФункции

Функция СостояниеОтвета(Ответ)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ДополнительныеПараметры = Новый Структура("ПолучатьДаты, ПолучатьОшибкиОтправки", Ложь, Истина);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(
		Ответ,
		,
		ДополнительныеПараметры);
		
	Если ТекущееСостояние = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийЭтапОтправки = ТекущееСостояние.ТекущийЭтапОтправки;
	
	Если ТекущийЭтапОтправки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийЭтапОтправки.Вставить("ЕстьКритическиеОшибки", ТекущееСостояние.ЕстьКритическиеОшибки);
	
	Возврат ТекущийЭтапОтправки;

КонецФункции

Функция СостоянияОтветов(Требование)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Ответы = КонтекстЭДОСервер.ОтветыНаТребованиеФСС(Требование);

	ЕстьКритическиеОшибки = Ложь;
	ОтветНеПринят = Ложь;
	Для каждого Ответ Из Ответы Цикл
		
		Состояние = СостояниеОтвета(Ответ);
		Если Состояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Состояние.ЕстьКритическиеОшибки Тогда
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
		
		Если Состояние.СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
			ОтветНеПринят = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОтветНеПринят", ОтветНеПринят);
	ДополнительныеПараметры.Вставить("ЕстьКритическиеОшибки", ЕстьКритическиеОшибки);
	
	Возврат ДополнительныеПараметры;

КонецФункции

Функция ВремяЗапускаЗаданияПопадаетВПиковыеЧасы()
	
	Результат = Ложь;
	
	ПиковыеИнтервалы = Новый Массив;
	ИнтервалОбразец = Новый Структура("С, По", 0, 0);
	Интервал = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИнтервалОбразец);
	Интервал.С = 8;
	Интервал.По = 10;
	ПиковыеИнтервалы.Добавить(Интервал);
	Интервал = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИнтервалОбразец);
	Интервал.С = 12;
	Интервал.По = 13;
	ПиковыеИнтервалы.Добавить(Интервал);
	Интервал = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИнтервалОбразец);
	Интервал.С = 15;
	Интервал.По = 16;
	ПиковыеИнтервалы.Добавить(Интервал);
	
	МосковскоеВремя = МосковскоеВремя();
	ТекущийЧас = Час(МосковскоеВремя);
	Для каждого ПиковыйИнтервал Из ПиковыеИнтервалы Цикл
		Если ТекущийЧас >= ПиковыйИнтервал.С И ТекущийЧас < ПиковыйИнтервал.По Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьФоновыйОбменСЭДО()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляем устаревшие записи из регистра фоновой загрузки сообщений.
Функция УдалитьУстаревшиеЗапросыИзОчередиФоновойЗагрузки()
	
	// Удаляются запросы, ответ на которые не был получены за определенный период.
	ВремяЖизниЗапроса = 3600 * 24 * 3;
	ДатаОтсечкиБезОтвета = ТекущаяДатаНаСервере() - ВремяЖизниЗапроса;
	ВремяЖизниЗапроса = 3600 * 24 * 14;
	ДатаОтсечкиСОтветом = ТекущаяДатаНаСервере() - ВремяЖизниЗапроса;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапросыДляПовторнойОтправкиСЭДО.Идентификатор КАК Идентификатор,
	               |	ЗапросыДляПовторнойОтправкиСЭДО.Организация КАК Организация,
	               |	ЗапросыДляПовторнойОтправкиСЭДО.КодСостояния КАК КодСостояния
	               |ИЗ
	               |	РегистрСведений.ЗапросыДляПовторнойОтправкиСЭДО КАК ЗапросыДляПовторнойОтправкиСЭДО
	               |ГДЕ
	               |	(ЗапросыДляПовторнойОтправкиСЭДО.Дата < &ДатаОтсечкиБезОтвета
	               |				И НЕ ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера
	               |			ИЛИ ЗапросыДляПовторнойОтправкиСЭДО.Дата < &ДатаОтсечкиСОтветом
	               |				И ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера)";
	Запрос.УстановитьПараметр("ДатаОтсечкиБезОтвета", ДатаОтсечкиБезОтвета);
	Запрос.УстановитьПараметр("ДатаОтсечкиСОтветом", ДатаОтсечкиСОтветом);
	РезультатВыполнить = Запрос.Выполнить();
	Если РезультатВыполнить.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;

	Набор = РезультатВыполнить.Выгрузить();

	Для Каждого Запрос Из Набор Цикл
		Запись = РегистрыСведений.ЗапросыДляПовторнойОтправкиСЭДО.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = Запрос.Идентификатор;
		Запись.Организация = Запрос.Организация;
		Запись.Прочитать();
		Запись.Удалить();
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

Функция СтрокаИзДанныхПоАдресу(Адрес)
	
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат "";
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Чтение = Новый ЧтениеДанных(Данные);
		Результат = Чтение.ПрочитатьСимволы();
		Чтение.Закрыть();
	Иначе
		Результат = Данные;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КодыВозвратаПовторнойОтправки()
	
	Коды = Новый Массив;
	Коды.Добавить(504);
	Коды.Добавить(502);
	Коды.Добавить(404);
	Коды.Добавить(403);
	Коды.Добавить(0);
	
	Возврат Коды;
	
КонецФункции

Функция ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО()
	
	Возврат "ФоноваяОтправкаЗапросовСЭДО";
	
КонецФункции

Функция ПроверитьВременныеОграниченияПолученияСпискаВходящихСообщенийСЭДО(МинимальныйИнтервалМеждуЗапросами = 0,
	ДатаПредыдущегоЗапускаРегламентногоЗадания = Неопределено, ПричинаПропуска = "")
	
	Результат = Истина;
	МосковскоеВремя = МосковскоеВремя();
	Час = Час(МосковскоеВремя);
	Минута = Минута(МосковскоеВремя);
	Если (Час = 23 И Минута > 50)
		ИЛИ (Час < 1 И Минута < 10) Тогда
		// Для снижения пиковой нагрузки на сервер СЭДО.
		Результат = Ложь;
		ПричинаПропуска = НСтр("ru = 'Пропуск запуска в период пиковой нагрузки';
								|en = 'Пропуск запуска в период пиковой нагрузки'");
	КонецЕсли;
	
	ЧастыйЗапуск = Ложь;
	МинимальныйИнтервалМеждуЗапросами = МинимальныйИнтервалМеждуЗапросамиСпискаВходящихСообщенийСЭДО();
	КлючДатыПредыдущегоЗапускаРегламентногоЗадания = "ДатаПредыдущегоЗапускаРегламентногоЗадания";
	ДатаПредыдущегоЗапускаРегламентногоЗадания = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаОбщихНастроек(),
		КлючДатыПредыдущегоЗапускаРегламентногоЗадания,
		Дата(1, 1, 1));
	ТекущаяДатаНаСервере = ТекущаяУниверсальнаяДата();
	Если ТекущаяДатаНаСервере - ДатаПредыдущегоЗапускаРегламентногоЗадания < МинимальныйИнтервалМеждуЗапросами Тогда
		// Из-за ошибок платформы фоновое задание может запускаться не по расписанию.
		Результат = Ложь;
		ПричинаПропуска = НСтр("ru = 'Частый запуск задания';
								|en = 'Частый запуск задания'");
		ЧастыйЗапуск = Истина;
	КонецЕсли;
	Если НЕ ЧастыйЗапуск Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			КлючОбъектаОбщихНастроек(),
			КлючДатыПредыдущегоЗапускаРегламентногоЗадания,
			ТекущаяДатаНаСервере);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыВзаимодействияДляПолученияСписковСообщений(Организация)
	
	ТипыВзаимодействия = Новый Массив;
	ТипСтрахователь = ДокументооборотСФССКлиентСервер.ТипВзаимодействияСтраховательСЭДО();
	ТипОрганизация = ДокументооборотСФССКлиентСервер.ТипВзаимодействияОрганизацияСЭДО();
	ТипыВзаимодействия.Добавить(ТипСтрахователь);
	Если ТребуетсяОбменПоТипуВзаимодействияОрганизацияСЭДО(Организация) Тогда
		ТипыВзаимодействия.Добавить(ТипОрганизация);
	КонецЕсли;
	
	Возврат ТипыВзаимодействия;
	
КонецФункции 

Функция ДанныеПоДатеПолученияАктуальныхСообщений(ТипыВзаимодействия, ДатаПолученияПоТипуВзаимодействия)
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаПолученияАктуальныхСообщений", Дата(1, 1, 1));
	Результат.Вставить("ТипВзаимодействия", 0);
	Результат.Вставить("ТребуетсяПолучениеАктуальных", Ложь);
	
	Сутки = 3600 * 24;
	ТребуетсяПолучениеАктуальных = Ложь;
	Для каждого ТипВзаимодействия Из ТипыВзаимодействия Цикл
		ДатаПолученияАктуальныхСообщений = ДатаПолученияПоТипуВзаимодействия[ТипВзаимодействия];
		Если ДатаПолученияАктуальныхСообщений = Неопределено Тогда
			ДатаПолученияАктуальныхСообщений = Дата(1, 1, 1);
			ТребуетсяПолучениеАктуальных = Истина;
			Прервать;
		КонецЕсли;
		Если (ТекущаяДатаНаСервере() - ДатаПолученияАктуальныхСообщений) > Сутки Тогда
			// Ещё не получили актуальные входящие по текущему типу взаимодействия.
			ТребуетсяПолучениеАктуальных = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ДатаПолученияАктуальныхСообщений = ДатаПолученияАктуальныхСообщений;
	Результат.ТипВзаимодействия = ТипВзаимодействия;
	Результат.ТребуетсяПолучениеАктуальных = ТребуетсяПолучениеАктуальных;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодОрганаПФР(РегНомерПФР)
	
	Результат = Лев(СокрЛ(РегНомерПФР), 3);
	
	Если СтрДлина(СокрЛП(Результат)) < 3 Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодПодчиненностиФСС(СвойстваОрганизации, РегистрационныйНомерФСС)
	
	КодПричиныРегистрации = "1"; // Юридическое лицо
	
	Если СвойстваОрганизации.ТипНП = "2" Тогда
		КодПричиныРегистрации = "2";
	ИначеЕсли ЗначениеЗаполнено(СвойстваОрганизации.ИННФЛ) Тогда
		КодПричиныРегистрации = "3";
	КонецЕсли;
	
	Результат = Лев(СокрЛ(РегистрационныйНомерФСС), 4)
		+ КодПричиныРегистрации;
		
	Если СтрДлина(СокрЛП(Результат)) < 4 Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти