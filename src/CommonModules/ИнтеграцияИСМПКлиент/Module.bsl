#Область ПрограммныйИнтерфейс

#Область ОбменДанными

// Выполняет подготовку к передаче в сервис ИС МП сообщения по документу и начинает процедуру обмена
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПараметрыЗагрузки - Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.Организация - Организация
//   * Интервал - Структура - Структура со свойствами:
//     ** НачалоПериода - Дата - Дата начала периода.
//     ** КонецПериода - Дата - Дата окончания периода.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции
Процедура ЗагрузитьВходящиеДокументы(Форма, ПараметрыЗагрузки, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	РезультатОбмена = ИнтеграцияИСМПВызовСервера.ЗагрузитьВходящиеДокументы(
		ПараметрыЗагрузки,
		Форма.УникальныйИдентификатор);
	
	ОбменДаннымиИСМПКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВСпискахДокументов

// Выполняет архивирование распоряжений к оформлению.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьРаспоряжения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияИСМПВызовСервера.АрхивироватьРаспоряженияКОформлению(
		ДополнительныеПараметры.Распоряжения,
		ДополнительныеПараметры.ПустаяСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ОбменДаннымиИСМПКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду создания документа, с предварительным выбором вида продукции или способа ввода в оборот.
//   Для заказа на эмиссию может открыть форму резервирования кодов.
// 
// Параметры:
//  ПолноеИмяДокумента - Строка - Полное имя документа
//  ДокументОснование - Произвольный - Документ основание
//  Владелец - Произвольный - Владелец
//  ОписаниеОповещения - Неопределено, ОписаниеОповещения - Описание оповещения
Процедура ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование = Неопределено, Владелец = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ПолноеИмяДокумента = "Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"
		И ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) <> Тип("Структура")
		И ИнтеграцияИСМПВызовСервера.ТребуетсяПерейтиВПул(ДокументОснование) Тогда
		
		ПараметрыФормы = Новый Структура("Документ", ДокументОснование);
		Открытьформу("РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаРезервирования", ПараметрыФормы, ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбъектаВыбора = ПараметрыИнтерактивногоВыбораОтбораЗаполнения(ПолноеИмяДокумента, ДокументОснование);
	
	Если ПолноеИмяДокумента = "Документ.ПеремещениеМеждуМОДИСМП" Тогда
		
		ПараметрыОбъектаВыбора.ИмяФильтра       = "";
		ПараметрыОбъектаВыбора.ОбъектыДляВыбора = Новый Массив;
	
	ИначеЕсли ПолноеИмяДокумента = "Документ.РазрешениеНаОтгрузкуИСМП" Тогда
		
		ПараметрыОбъектаВыбора.ИмяФильтра       = "";
		ПараметрыОбъектаВыбора.ОбъектыДляВыбора = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ДокументОснование) <> Тип("Структура")
			И ИнтеграцияИСМПВызовСервера.ЭлектронныйДокументПоОбъектуУчета(ДокументОснование)[ДокументОснование] = Неопределено Тогда
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПолноеИмяДокумента", ПолноеИмяДокумента);
			ДополнительныеПараметры.Вставить("ДокументОснование",  ДокументОснование);
			ДополнительныеПараметры.Вставить("Владелец",           Владелец);
			ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
			ФормированияЭДРазрешениеНаОтгрузкуИСМПЗавершение = Новый ОписаниеОповещения(
				"ФормированияЭДРазрешениеНаОтгрузкуИСМПЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
			СформироватьЭлектронныйДокумент(Владелец, ДокументОснование, ФормированияЭДРазрешениеНаОтгрузкуИСМПЗавершение);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОбъектаВыбора.ОбъектыДляВыбора.Количество() > 1 Тогда
		
		ПараметрыВыбораИзСписка = Новый Структура;
		ПараметрыВыбораИзСписка.Вставить("ОбъектыДляВыбора",   ПараметрыОбъектаВыбора.ОбъектыДляВыбора);
		ПараметрыВыбораИзСписка.Вставить("ПолноеИмяДокумента", ПолноеИмяДокумента);
		ПараметрыВыбораИзСписка.Вставить("ДокументОснование",  ДокументОснование);
		ПараметрыВыбораИзСписка.Вставить("Владелец",           Владелец);
		ПараметрыВыбораИзСписка.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыВыбораИзСписка.Вставить("ИмяФильтра",         ПараметрыОбъектаВыбора.ИмяФильтра);
		
		ИнтеграцияИСКлиент.ВыбратьИзСпискаИОткрытьФормуСозданияДокумента(ПараметрыВыбораИзСписка);
		
	Иначе
		
		ИнтеграцияИСКлиент.ОткрытьФормуСозданияДокумента(
			ПолноеИмяДокумента, ДокументОснование, Владелец, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВФормахДокументов

#Область Сертификация

Функция НастройкиРаботыССертификацией(ИмяРеквизитаКеш = "КэшСертификации", ИмяРеквизитаСертификация = "ТоварыСертификация") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Кэш",           ИмяРеквизитаКеш);
	Результат.Вставить("ТаблицаФормы", "Товары");
	Результат.Вставить("Номенклатура", "Номенклатура");
	Результат.Вставить("Сертификация",  ИмяРеквизитаСертификация);
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСписокВыбораСертификации(Форма, НастройкиРаботыССертификацией = Неопределено) Экспорт
	
	Если НастройкиРаботыССертификацией = Неопределено Тогда
		НастройкиРаботыССертификацией = НастройкиРаботыССертификацией();
	КонецЕсли;
	
	ИспользоватьПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ИспользоватьПаспортСоответствия(Форма);
	ЭтоПаспортСоответствия = НастройкиРаботыССертификацией.Сертификация = "ТоварыПаспортСоответствия";
	
	ТекущиеДанные = Форма.Элементы[НастройкиРаботыССертификацией.ТаблицаФормы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КэшСертификации = Форма[НастройкиРаботыССертификацией.Кэш];
	Номенклатура = ТекущиеДанные[НастройкиРаботыССертификацией.Номенклатура];
	ЭлементСертификация = Форма.Элементы[НастройкиРаботыССертификацией.Сертификация];
	
	ЭлементСертификация.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из КэшСертификации Цикл
		Если (Не ЗначениеЗаполнено(СтрокаКэша.Номенклатура) Или Номенклатура = СтрокаКэша.Номенклатура)
			И (Не ИспользоватьПаспортСоответствия
				Или (ЭтоПаспортСоответствия И ЗначениеЗаполнено(СтрокаКэша.КемВыдан)
					Или Не ЭтоПаспортСоответствия И Не ЗначениеЗаполнено(СтрокаКэша.КемВыдан))) Тогда
			ЭлементСертификация.СписокВыбора.Добавить(СтрокаКэша.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПервичныйДокумент

Функция НастройкиРаботыСПервичнымДокументом() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Кэш", "КэшПервичныхДокументов");
	Результат.Вставить("ТаблицаФормы", "Товары");
	Результат.Вставить("ПричинаПеремаркировки", "ПричинаПеремаркировки");
	Результат.Вставить("ПервичныйДокумент", "ТоварыПредставлениеПервичногоДокумента");
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСписокВыбораПервичногоДокумента(Форма, НастройкиРаботыСПервичнымДокументом = Неопределено) Экспорт
	
	Если НастройкиРаботыСПервичнымДокументом = Неопределено Тогда
		НастройкиРаботыСПервичнымДокументом = НастройкиРаботыСПервичнымДокументом();
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы[НастройкиРаботыСПервичнымДокументом.ТаблицаФормы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПричинуПеремаркировки = НастройкиРаботыСПервичнымДокументом.Свойство("ПричинаПеремаркировки");
	Если ИспользоватьПричинуПеремаркировки Тогда
		ПричинаПеремаркировки = ТекущиеДанные[НастройкиРаботыСПервичнымДокументом.ПричинаПеремаркировки];
	КонецЕсли;
	
	Кэш = Форма[НастройкиРаботыСПервичнымДокументом.Кэш];
	ЭлементПервичныйДокумент = Форма.Элементы[НастройкиРаботыСПервичнымДокументом.ПервичныйДокумент];
	
	ЭлементПервичныйДокумент.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из Кэш Цикл
		
		Если Не ИспользоватьПричинуПеремаркировки
			Или ИнтеграцияИСМПКлиентСервер.СоответствиеПричинПеремаркировкиПервичногоДокумента(
			СтрокаКэша.ПричинаПеремаркировки,
			ПричинаПеремаркировки) Тогда
				
			ЭлементПервичныйДокумент.СписокВыбора.Добавить(
				Формат(Кэш.Индекс(СтрокаКэша), "ЧРД=; ЧН=0; ЧГ=0;"), СтрокаКэша.ПредставлениеПервичногоДокумента);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтветственныеЗаАктуализациюТокеновАвторизации

// Подключает обработчик ожидания для инициализации напоминаний ответственному за актуализацию токенов авторизации.
//
Процедура ПодключитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВыполнитьИнициализациюНастроекОтветственногоЗаАктуализациюТокеновАвторизации", 10, Истина);
	
КонецПроцедуры

// Проверяет наличие напоминаний для ответственного за актуализацию токенов авторизации ИС МП.
// При необходимости, открывает форму актуализации токенов авторизации ИС МП.
//
Процедура ПроверитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации(ПараметрыПроверкиНапоминаний) Экспорт
	
	НастройкиОтветственного = ПараметрыПроверкиНапоминаний.НастройкиОтветственного;
	ИмяПараметраНастроек    = ПараметрыПроверкиНапоминаний.ИмяПараметраНастроек;
	Напоминания             = ПараметрыПроверкиНапоминаний.Напоминания;
	ДатаСеанса              = ПараметрыПроверкиНапоминаний.ДатаСеанса;
	
	ТребуетсяАктуализация = Ложь;
	Если НастройкиОтветственного.ТребуетсяПроверкаНапоминаний Тогда
		
		ОповеститьЧерез       = 0;
		Для Каждого Напоминание из Напоминания Цикл
			Если Не Напоминание.ОповещениеИспользуется Тогда
				Продолжить;
			КонецЕсли;
			Если Напоминание.ТребуетсяАктуализация
				И Напоминание.ОповеститьЧерез = 0 Тогда
				ТребуетсяАктуализация = Истина;
				ОповеститьЧерез = 0;
				Прервать;
			КонецЕсли;
			Если Напоминание.ОповеститьЧерез > 0
				И (ОповеститьЧерез = 0
				Или Напоминание.ОповеститьЧерез < ОповеститьЧерез) Тогда
				ОповеститьЧерез = Напоминание.ОповеститьЧерез;
			КонецЕсли;
		КонецЦикла;
		
		Если ОповеститьЧерез > 0 Тогда
			ПараметрыПриложения[ИмяПараметраНастроек].ВремяСледующейПроверки = ДатаСеанса + ОповеститьЧерез;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТребуетсяАктуализация
		Или НастройкиОтветственного.ОткрытаФормаАктуализации Тогда
		ИнтерфейсАвторизацииИСМПКлиент.ОткрытьФормуАктуализацииТокеновАвторизации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаНоменклатуры

// Открывает форму настройки видов упаковок по GTIN для номенклатуры.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - Форма-владелец открываемой формы настройки.
//  Номенклатура  - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру для которой выполняется настройка.
//  ВидПродукции  - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, если не указана - определяется по номенклатуре.
//                  Вид продукции следует указывать обязательно, если форма может открываться для модифицированной карточки номенклатуры,
//                  когда вид продукции записанного элемента отличается от модифицированного в форме. Вид продукции, в том числе,
//                  определяет доступные виды упаковок.
Процедура ОткрытьФормуНастройкиВидовУпаковокПоНоменклатуре(ФормаВладелец, Номенклатура, ВидПродукции = Неопределено) Экспорт
	
	ДанныеПоискаGTIN = Новый Массив;
	СтрокаДанных     = Новый Структура;
	СтрокаДанных.Вставить("Номенклатура", Номенклатура);
	ДанныеПоискаGTIN.Добавить(СтрокаДанных);
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
	ПараметрыОткрытия.УточнениеВидаУпаковки            = Истина;
	ПараметрыОткрытия.ДанныеПоискаGTIN                 = ДанныеПоискаGTIN;
	ПараметрыОткрытия.ИспользоватьХарактеристики       = Ложь;
	ПараметрыОткрытия.ВидПродукции                     = ВидПродукции;
	ПараметрыОткрытия.ЭтоНастройкаКарточкиНоменклатуры = Истина;
	
	ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

// Сформировать электронный документ.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - Форма владелец
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ОповещениеОЗавершении - ОписаниеОповещения - Оповещение о завершении успешного формирования электронного документа
//  ОповещениеПриОтказе - ОписаниеОповещения - Оповещение при отказе от формировани электронного документа
Процедура СформироватьЭлектронныйДокумент(ФормаВладелец, ОбъектУчета, ОповещениеОЗавершении, ОповещениеПриОтказе = Неопределено) Экспорт
	
	Ответы = Новый СписокЗначений();
	Ответы.Добавить("Сформировать", НСтр("ru = 'Сформировать';
										|en = 'Сформировать'"));
	Ответы.Добавить("Отмена",       НСтр("ru = 'Отмена';
										|en = 'Отмена'"));
	
	ПараметрыДействия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(
		ПараметрыДействия.НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Сформировать"));
	ПараметрыДействия.ОбъектыДействий.ОбъектыУчета.Добавить(ОбъектУчета);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("УспешноеЗавершение",               ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ОбъектУчета",                      ОбъектУчета);
	ДополнительныеПараметры.Вставить("ОповещениеПриОтказе",              ОповещениеПриОтказе);
	ДополнительныеПараметры.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыДействия);
	ДополнительныеПараметры.Вставить(
		"ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения(
			"ОбработкаОшибокФормированияДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры)); // После обработки ошибок БЭД
	
	ВопросСформироватьЭлектронныйДокументЗавершение = Новый ОписаниеОповещения(
		"ВопросСформироватьЭлектронныйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(
		ВопросСформироватьЭлектронныйДокументЗавершение,
		НСтр("ru = 'Для получения разрешения на отгрузку требуется сформировать электронный документ';
			|en = 'Для получения разрешения на отгрузку требуется сформировать электронный документ'"),
		Ответы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаПараметров

// Параметры открытия формы уточнения упаковок по GTIN.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия формы уточнения упаковок по GTIN:
// * ВидПродукции                        - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// * УточнениеВидаУпаковки               - Булево - Режим уточнения вида упаковки.
// * ДоступноРедактированиеВидаУпаковки  - Булево - Доступность редактирования вида упаковки.
// * АдресУточнениеКоэффициентовУпаковок - Неопределено, Строка - Адрес во временном хранилище данных уточнения.
// * ДанныеПоискаGTIN - Неопределено, Массив из Структура: {Номенклатура, Характеристика} - Данные для заполнения GTIN.
// * ИспользоватьХарактеристики          - Булево - Признак использования характеристик при заполннении GTIN
// * ЭтоНастройкаКарточкиНоменклатуры    - Булево - Признак открытия карточки для настройки номенклатуры.
Функция ПараметрыОткрытияФормыУточненияУпаковокПоGTIN() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидПродукции",                        Неопределено);
	ПараметрыОткрытия.Вставить("УточнениеВидаУпаковки",               Ложь);
	ПараметрыОткрытия.Вставить("ДоступноРедактированиеВидаУпаковки",  Ложь);
	ПараметрыОткрытия.Вставить("АдресУточнениеКоэффициентовУпаковок", Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеПоискаGTIN",                    Неопределено);
	ПараметрыОткрытия.Вставить("ИспользоватьХарактеристики",          Истина);
	ПараметрыОткрытия.Вставить("ЭтоНастройкаКарточкиНоменклатуры",    Ложь);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Открыть форму настройки видов упаковок по GTIN.
// 
// Параметры:
//  ПараметрыОткрытия  - см. ПараметрыОткрытияФормыУточненияУпаковокПоGTIN
//  ФормаВладелец      - ФормаКлиентскогоПриложения       - Владелец открываемой формы.
//  ОписаниеОповещения - ОписаниеОповещения, Неопределено - Описание оповещения о закрытии формы уточнения.
Процедура ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ФормаВладелец, ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.УточнениеКоэффициентовУпаковокИСМП",
		ПараметрыОткрытия, ФормаВладелец,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЭДПоОснованию

Процедура ВопросСформироватьЭлектронныйДокументЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> "Сформировать" Тогда
		Если ДополнительныеПараметры.ОповещениеПриОтказе <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриОтказе, Ответ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПроверкаГотовностиИсточниковЗавершение = Новый ОписаниеОповещения(
		"ПроверкаГотовностиИсточниковЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДополнительныеПараметры.ОбъектУчета);
	
	ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(МассивСсылок, ПроверкаГотовностиИсточниковЗавершение);
	
КонецПроцедуры

Процедура ПроверкаГотовностиИсточниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВыполненияДействийПоЭДО = Новый ОписаниеОповещения(
		"ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
		ПослеВыполненияДействийПоЭДО,
		ДополнительныеПараметры.ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

Процедура ОбработкаОшибокФормированияДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Результат.ОбработанныеДокументы Цикл
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.УспешноеЗавершение, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированияЭДРазрешениеНаОтгрузкуИСМПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИСКлиент.ОткрытьФормуСозданияДокумента(
		ДополнительныеПараметры.ПолноеИмяДокумента,
		ДополнительныеПараметры.ДокументОснование,
		ДополнительныеПараметры.Владелец,
		ДополнительныеПараметры.ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснования(Форма, Объект,
			Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, СобытиеОбработано = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",  Форма);
	Контекст.Вставить("Объект", Объект);
	Контекст.Вставить("ДокументОснование", Объект.Ссылка);
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	Контекст.Вставить("СобытиеОбработано", СобытиеОбработано);
	
	Если Форма.Модифицированность Или НЕ ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ОбработкаНавигационнойСсылкиВФормеДокументаОснованияЗавершение",
			ЭтотОбъект,
			Контекст);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" %2. Записать?';
				|en = 'Документ ""%1"" %2. Записать?'"),
			Контекст.ДокументОснование,
			?(НЕ ЗначениеЗаполнено(Контекст.ДокументОснование), НСтр("ru = 'не записан';
																	|en = 'не записан'"), НСтр("ru = 'был изменен';
																								|en = 'был изменен'")));
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснования(
			Контекст.ДокументОснование,
			НавигационнаяСсылкаФорматированнойСтроки,
			Форма,
			СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснованияЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Объект.Проведен Тогда
		Если Контекст.Форма.ПроверитьЗаполнение() Тогда
			Контекст.Форма.Записать();
		КонецЕсли;
	Иначе
		Контекст.Форма.Записать();
	КонецЕсли;
	
	Если НЕ Контекст.Форма.Модифицированность И ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснования(
			Контекст.ДокументОснование,
			Контекст.НавигационнаяСсылкаФорматированнойСтроки,
			Контекст.Форма,
			Контекст.СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуГиперссылкиВФормеДокументаОснования(ДокументОснование, НавигационнаяСсылкаФорматированнойСтроки, Форма, СобытиеОбработано)
	
	ОписаниеКоманды = ИнтеграцияИСКлиентСервер.ПреобразоватьИмяКомандыНавигационнойСсылкиВоВнутреннийФормат(
		НавигационнаяСсылкаФорматированнойСтроки);
	
	// Открытие протокола обмена
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьПротоколОбмена(ОписаниеКоманды) Тогда
		
		ОбменДаннымиИСМПКлиент.ОткрытьПротоколОбмена(ДокументОснование, Форма, Истина);
		
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Создание документа
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиСоздатьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокумента = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		
		ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование, Форма);
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Открытие документа
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокумента   = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		ЧастиИмениОбъекта    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяДокумента, ".");
		ДокументыПоОснованию = ИнтеграцияИСМПВызовСервера.ДокументыИСМППоДокументуОснованию(ДокументОснование);
		МассивДокументов     = ДокументыПоОснованию[ЧастиИмениОбъекта[1]];
		
		Если МассивДокументов.Количество() = 1 Тогда
			ПоказатьЗначение(, МассивДокументов[0].Ссылка);
			СобытиеОбработано = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.РазрешениеНаОтгрузкуИСМП" Тогда
			Для Каждого СтрокаДанных Из МассивДокументов Цикл
				Если СтрокаДанных.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиРазрешенийНаОтгрузкуИСМП.РазрешениеОтменено") Тогда
					ПоказатьЗначение(, СтрокаДанных.Ссылка);
					СобытиеОбработано = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Открытие формы резервирования кодов маркировки
	Если ИнтеграцияИСМПКлиентСервер.ЭтоКомандаНавигационнойСсылкиПулКодовМаркировки(ОписаниеКоманды) Тогда
		
		ПараметрыФормы = Новый Структура("Документ", ДокументОснование);
		
		Открытьформу(
			"РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаРезервирования",
			ПараметрыФормы, Форма);
		
		СобытиеОбработано = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	//открытие формы сверки кодов маркировки
	Если ИнтеграцияИСМПКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьФормуСверкиКодовМаркировки(ОписаниеКоманды) Тогда
		
		СверкаКодовМаркировкиИСМПКлиент.ОткрытьФормуРезультатовСверкиКодовМаркировки(Форма);
		
		СобытиеОбработано = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	// Открытие произвольной навигационной ссылки
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
	СобытиеОбработано = Истина;
	
КонецПроцедуры

Функция ПараметрыИнтерактивногоВыбораОтбораЗаполнения(ПолноеИмяДокумента, ДокументОснование)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ИмяФильтра");
	ВозвращаемоеЗначение.Вставить("ОбъектыДляВыбора");
	
	ВозвращаемоеЗначение.ИмяФильтра       = "ЗаполнениеСВидомПродукции";
	ВозвращаемоеЗначение.ОбъектыДляВыбора = ИнтеграцияИСМПВызовСервера.ВидыПродукцииДанныхЗаполнения(
		ПолноеИмяДокумента, ДокументОснование);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает пользовательское представление заголовка формы загрузки кодов маркировки
//
// Параметры:
//   Владелец         - ФормаКлиентскогоПриложения - источник вызова.
//   ДоступнаИерархия - Булево           - режим иерархической загрузки (из форм проверки и подбора).
//
// Возвращаемое значение:
//   Строка - заголовок
//
Функция ЗаголовокФормыЗагрузкиКодовМаркировки(Владелец, ДоступнаИерархия = Ложь) Экспорт
	
	ВозвращаемоеЗначение = НСтр("ru = 'Загрузка кодов маркировки';
								|en = 'Загрузка кодов маркировки'");
	Если Не ДоступнаИерархия
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Владелец.Объект, "Ссылка")
		И ЗначениеЗаполнено(Владелец.Объект.Ссылка) Тогда
		ВозвращаемоеЗначение = СтрШаблон(НСтр("ru = 'Загрузка кодов маркировки в %1';
												|en = 'Загрузка кодов маркировки в %1'"), Владелец.Объект.Ссылка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПодключениеКегаКОборудованиюРозливаПриСканированииЗавершение(Результат, ПараметрыПродолжения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = ПараметрыПродолжения.ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода;
	РезультатОбработкиШтрихкода.ТребуетсяВскрытиеПотребительскойУпаковки = Ложь;
	
	ШтрихкодированиеИСКлиент.УточнитьДанныеУПользователя(
		ПараметрыПродолжения.ФормаВладелец,
		ПараметрыПродолжения.ПараметрыОткрытияФормы,
		ПараметрыПродолжения.ОповещениеПоЗавершениюУточненияДанных);
	
КонецПроцедуры

#КонецОбласти