////////////////////////////////////////////////////////////////////////////////
// Подсистема «Состояния сотрудников».
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область МетодыДляРаботыСДаннымиСостоянийСотрудников

// Составляет таблицу состояний сотрудников. 
// Если указаны даты начала/окончания, будут отобраны записи о состояниях, 
// которые хотя бы одним днем попадают в указанный период.
//
// Параметры:
//	Сотрудники - (необязательный) массив сотрудников, для которых нужно выбрать состояния, 
//		если не указан, выбираются состояния всех разрешенных сотрудников.
//	Состояния - (необязательный) отбор по состояниям.
//	ДатаНачала - (необязательный) начало анализируемого периода.
//	
// Возвращаемое значение - таблица значений с колонками.
//	Сотрудник, Состояние, Начало, Окончание.
//
Функция СостоянияСотрудников(Сотрудники = Неопределено, Состояния = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСостоянияСотрудников(МенеджерВременныхТаблиц, Сотрудники, Состояния, ДатаНачала, ДатаОкончания);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Добавляет в менеджер временную таблицу состояний сотрудников.
// Подробное описание параметров см. в описании функции СостоянияСотрудников.
//
Процедура СоздатьВТСостоянияСотрудников(МенеджерВременныхТаблиц, Сотрудники = Неопределено,	Состояния = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Запрос = Новый Запрос();

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СостоянияСотрудников.Период КАК Начало,
		|	СостоянияСотрудников.ДействуетДо КАК Окончание,
		|	СостоянияСотрудников.ОкончаниеПредположительно КАК ОкончаниеПредположительно,
		|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
		|	СостоянияСотрудников.Состояние КАК Состояние,
		|	СостоянияСотрудников.ВидВремени КАК ВидВремени,
		|	СостоянияСотрудников.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТСостоянияСотрудников
		|ИЗ
		|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|ГДЕ
		|	&БлокУсловий";
		
	БлокУсловий = Новый Массив;
		
	Если ДатаОкончания <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		БлокУсловий.Добавить(
			"СостоянияСотрудников.Период <= &ДатаОкончания");
	КонецЕсли;
	
	Если ДатаНачала <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		БлокУсловий.Добавить(
			"(СостоянияСотрудников.ДействуетДо >= &ДатаНачала ИЛИ СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))");
	КонецЕсли;
	
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		БлокУсловий.Добавить(
			"СостоянияСотрудников.Сотрудник В (&Сотрудники)");
	КонецЕсли;
	
	Если Состояния <> Неопределено Тогда
		Запрос.УстановитьПараметр("Состояния", Состояния);
		БлокУсловий.Добавить(
			"СостоянияСотрудников.Состояние В (&Состояния)");
	КонецЕсли;
	
	Если БлокУсловий.Количество() > 0 Тогда
		СтрокаУсловий = СтрСоединить(БлокУсловий, Символы.ПС + "И ");
	Иначе
		СтрокаУсловий = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&БлокУсловий", СтрокаУсловий);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет в менеджер временную таблицу состояний сотрудников.
// Параметры
//	МенеджерВременныхТаблиц
//	ИмяВТПараметров - имя временной таблицы в менеджере, содержащей следующие поля:
//		- Сотрудник
//		- ДатаНачала
//		- ДатаОкончания
// Создает в менеджере временную таблицу "ВТПериодыСостоянийСотрудников" с полями
//		- Сотрудник
//		- ДатаНачала
//		- ДатаОкончания
//		- Состояние
//		- Начало - начало нахождения в данном состоянии
//		- Окончание
//		- ОкончаниеПредположительно
//		- ВидВремени
//		- ДокументОснование.
Процедура СоздатьВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц, ИмяВТПараметров = "ВТСотрудникиПериоды") Экспорт
	
	Запрос = ЗапросВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц, ИмяВТПараметров);
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует запрос для получения периодов состояний сотрудников.
// Подробности см. СоздатьВТПериодыСостоянийСотрудников.
Функция ЗапросВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц, ИмяВТПараметров = "ВТСотрудникиПериоды") Экспорт
	
	// Формируем уникальных сотрудников
	ЗапросПериодовСостояний = Новый Запрос;
	ЗапросПериодовСостояний.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПериодовСостояний.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА Сотрудники.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА Сотрудники.Ссылка
		|		ИНАЧЕ Сотрудники.ГоловнойСотрудник
		|	КОНЕЦ КАК Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТНормализованныеСотрудники
		|ИЗ
		|	%ВТСотрудникиПериоды% КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиПериоды.Сотрудник = Сотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНормализованныеСотрудники.Сотрудник,
		|	ВТНормализованныеСотрудники.ДатаНачала,
		|	ВТНормализованныеСотрудники.ДатаОкончания,
		|	СостоянияСотрудников.Состояние,
		|	СостоянияСотрудников.Период КАК Начало,
		|	СостоянияСотрудников.ДействуетДо КАК Окончание,
		|	СостоянияСотрудников.ОкончаниеПредположительно,
		|	СостоянияСотрудников.ВидВремени,
		|	СостоянияСотрудников.ДокументОснование
		|ПОМЕСТИТЬ ВТПериодыСостоянийСотрудников
		|ИЗ
		|	ВТНормализованныеСотрудники КАК ВТНормализованныеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|		ПО (ВТНормализованныеСотрудники.Сотрудник = СостоянияСотрудников.Сотрудник)
		|			И (ВТНормализованныеСотрудники.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.ДействуетДо >= ВТНормализованныеСотрудники.ДатаНачала)
		|			И (ВТНормализованныеСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.Период = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.Период <= ВТНормализованныеСотрудники.ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНормализованныеСотрудники";
	
	ЗапросПериодовСостояний.Текст = СтрЗаменить(ЗапросПериодовСостояний.Текст, "%ВТСотрудникиПериоды%", ИмяВТПараметров);	
	
	Возврат ЗапросПериодовСостояний;
	
КонецФункции

Функция ОписаниеФильтраСоздатьВТСостоянияСотрудниковНаДаты(ТаблицаФильтра) Экспорт
	
	ОписаниеФильтра = Новый Структура(
		"ТаблицаФильтра, 
		|СоответствиеИзмеренийРегистраИзмерениямФильтра");
	
	ОписаниеФильтра.ТаблицаФильтра = ТаблицаФильтра;
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра = Новый Соответствие;
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", "Сотрудник");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", "Период");
	
	Возврат ОписаниеФильтра;
	
КонецФункции

// Создает ВТ состояний сотрудников на даты.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура.
//			* ТаблицаФильтра 	- Строка
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.		
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу
//									ВТСведенияОСостоянииСотрудников
//
Процедура СоздатьВТСостоянияСотрудниковНаДаты(МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ИмяСоздаваемойТаблицы = "ВТСведенияОСостоянииСотрудников") Экспорт
	
	Запрос = ЗапросВТСостоянияСотрудниковНаДаты(ТолькоРазрешенные, ОписаниеФильтра, ИмяСоздаваемойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует запрос для получения сведений состояний сотрудников на даты.
//
// Параметры:
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура.
//			* ТаблицаФильтра 	- Строка
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.		
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу
//									ВТСведенияОСостоянииСотрудников
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТСостоянияСотрудниковНаДаты(ТолькоРазрешенные, ОписаниеФильтра, ИмяСоздаваемойТаблицы = "ВТСведенияОСостоянииСотрудников") Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзмеренияДаты.Сотрудник_ КАК Сотрудник,
		|	ИзмеренияДаты.Период_ КАК Период,
		|	СостоянияСотрудников.Период КАК ПериодЗаписи,
		|	СостоянияСотрудников.Состояние КАК Состояние,
		|	СостоянияСотрудников.ВидВремени КАК ВидВремени,
		|	СостоянияСотрудников.ДействуетДо КАК ДействуетДо,
		|	СостоянияСотрудников.ОкончаниеПредположительно КАК ОкончаниеПредположительно
		|ПОМЕСТИТЬ ВТСведенияОСостоянииСотрудников
		|ИЗ
		|	ВТОписаниеФильтра КАК ИзмеренияДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|		ПО ИзмеренияДаты.Сотрудник_ = СостоянияСотрудников.Сотрудник
		|			И (СостоянияСотрудников.Период <= ИзмеренияДаты.Период_)
		|			И (КОНЕЦПЕРИОДА(СостоянияСотрудников.ДействуетДо, ДЕНЬ) >= ИзмеренияДаты.Период_
		|				ИЛИ СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сотрудник_", ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("Сотрудник"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Период_", ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("Период"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОписаниеФильтра", ОписаниеФильтра.ТаблицаФильтра);

	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТСведенияОСостоянииСотрудников", ИмяСоздаваемойТаблицы);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Процедура ЗарегистрироватьСостояниеСотрудника(Движения, ДокументСсылка, Сотрудник, Состояние, Начало, Окончание = Неопределено, ВидВремени = Неопределено) Экспорт
	
	ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, Сотрудник, Состояние, Начало, Окончание, , ВидВремени);
	
КонецПроцедуры

Процедура ЗарегистрироватьСостоянияСотрудников(Движения, ДокументСсылка, ДанныеСостояний) Экспорт
	
	ЕстьОкончаниеПредположительно = Ложь;
	Если ТипЗнч(ДанныеСостояний) = Тип("ТаблицаЗначений") Тогда
		ЕстьОкончаниеПредположительно = ДанныеСостояний.Колонки.Найти("ОкончаниеПредположительно") <> Неопределено;
	ИначеЕсли ТипЗнч(ДанныеСостояний) = Тип("Массив")
		И ЗначениеЗаполнено(ДанныеСостояний)
		И ТипЗнч(ДанныеСостояний[0]) = Тип("Структура") Тогда
		ЕстьОкончаниеПредположительно = ДанныеСостояний[0].Свойство("ОкончаниеПредположительно");
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеСостояний Цикл
		Если ЕстьОкончаниеПредположительно Тогда
			ДобавитьЗаписьСостоянияСотрудника(
				Движения,
				ДокументСсылка,
				СтрокаДанных.Сотрудник,
				СтрокаДанных.Состояние,
				СтрокаДанных.Начало,
				СтрокаДанных.Окончание,
				,
				СтрокаДанных.ВидВремени,
				СтрокаДанных.ОкончаниеПредположительно);
		Иначе
			ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, СтрокаДанных.Сотрудник, СтрокаДанных.Состояние, СтрокаДанных.Начало, СтрокаДанных.Окончание,,СтрокаДанных.ВидВремени);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСостоянияФизическогоЛица() Экспорт
	
	Параметры = Новый Структура(
		"ДокументСсылка, 
		|Организация, 
		|Состояние, 
		|Начало, 
		|Окончание, 
		|ОкончаниеПредположительно, 
		|ИсправленныйДокумент");
		
	Возврат Параметры;
	
КонецФункции

Процедура ЗарегистрироватьСостояниеФизическогоЛица(Движения, ФизическоеЛицо, ПараметрыСостояния) Экспорт
	
	Начало = ПараметрыСостояния.Начало;
	Окончание = ПараметрыСостояния.Окончание;
	ОкончаниеПредположительно = ПараметрыСостояния.ОкончаниеПредположительно;
	ДокументСсылка = ПараметрыСостояния.ДокументСсылка;
	Организация = ПараметрыСостояния.Организация;
	
	// Получаем всех сотрудников физического лица в организации и устанавливаем для них указанное состояние.
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = Начало;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПредположительно;
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСотрудников Цикл
		ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, СтрокаТаблицы.Сотрудник, ПараметрыСостояния.Состояние, Начало, Окончание, , , ОкончаниеПредположительно);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОтпускСотрудника(Движения, ДокументСсылка, Сотрудник, ВидОтпуска, Начало, Окончание = Неопределено, ВидВремени = Неопределено) Экспорт
	
	ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, Сотрудник, СостояниеПоВидуОтпуска(ВидОтпуска), Начало, Окончание,, ВидВремени);
	
КонецПроцедуры

// Выполняет регистрацию записей, отменяющих действие указанного документа.
//
Процедура ЗарегистрироватьСторноСостоянийСотрудников(Движения, ДокументСсылка, СторнируемыйДокумент) Экспорт
	ЗарплатаКадры.ЗарегистрироватьСторноИсходныхДанныхСостояний(Движения, "ДанныеСостоянийСотрудников", ДокументСсылка, СторнируемыйДокумент);
КонецПроцедуры

Функция ПустаяТаблицаДанныхСостоянийСотрудника() Экспорт
	
	ДанныеСостояний = Новый ТаблицаЗначений;
	ДанныеСостояний.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеСостояний.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСотрудника"));
	ДанныеСостояний.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ДанныеСостояний.Колонки.Добавить("ОкончаниеПредположительно", Новый ОписаниеТипов("Дата"));
	
	Возврат ДанныеСостояний;
	
КонецФункции

Процедура ОбновитьСостоянияСотрудников(МенеджерВременныхТаблиц, ИзмеренияОтбора = Неопределено, РежимЗагрузки = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзменившиесяДанные.Поля_,
	|	ВЫБОР
	|		КОГДА ПредыдущийИнтервал.Год ЕСТЬ NULL
	|			ТОГДА ВторичныеДанные.Год
	|		ИНАЧЕ ПредыдущийИнтервал.Год
	|	КОНЕЦ КАК Год
	|ИЗ
	|	ВТКлючиИзменившихсяДанных КАК ИзменившиесяДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК ВторичныеДанные
	|		ПО ИзменившиесяДанные.ПоляСоединения_ = ВторичныеДанные.ПоляСоединения_
	|			И (ВЫБОР
	|				КОГДА ВторичныеДанные.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(ИзменившиесяДанные.Начало, ГОД) <= ДОБАВИТЬКДАТЕ(ВторичныеДанные.ДействуетДо, ДЕНЬ, 1)
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ИзменившиесяДанные.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ  ДОБАВИТЬКДАТЕ(ИзменившиесяДанные.Окончание, ДЕНЬ, 1) >= ВторичныеДанные.Период
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК ПредыдущийИнтервал
	|		ПО ИзменившиесяДанные.ПоляСоединения_ = ПредыдущийИнтервал.ПоляСоединения_
	|			И ДОБАВИТЬКДАТЕ(ПредыдущийИнтервал.ДействуетДо, ДЕНЬ, 1) = ВторичныеДанные.Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзменившиесяДанные.Поля_,
	|	НАЧАЛОПЕРИОДА(ВторичныеДанные.Период, ГОД) КАК Год
	|ИЗ
	|	ВТКлючиИзменившихсяДанных КАК ИзменившиесяДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК ВторичныеДанные
	|		ПО ИзменившиесяДанные.ПоляСоединения_ = ВторичныеДанные.ПоляСоединения_
	|			И ИзменившиесяДанные.Начало <= ВторичныеДанные.Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзменившиесяДанные.Поля_,
	|	НАЧАЛОПЕРИОДА(ИзменившиесяДанные.Начало, ГОД) КАК Год
	|ИЗ
	|	ВТКлючиИзменившихсяДанных КАК ИзменившиесяДанные";
	
	ПоляТекст = Новый Массив;
	ПоляСоединенияТекстВторичныеДанные = Новый Массив;
	ПоляСоединенияТекстПредыдущиеИнтервалы = Новый Массив;
	
	Если ИзмеренияОтбора = Неопределено Тогда
		ПоляТекст.Добавить("	ИзменившиесяДанные.Сотрудник");
		ПоляСоединенияТекстВторичныеДанные.Добавить("ИзменившиесяДанные.Сотрудник = ВторичныеДанные.Сотрудник");
		ПоляСоединенияТекстПредыдущиеИнтервалы.Добавить("ИзменившиесяДанные.Сотрудник = ПредыдущийИнтервал.Сотрудник");
	Иначе
		Для Каждого Поле Из ИзмеренияОтбора Цикл
			ПоляТекст.Добавить("ИзменившиесяДанные." + Поле);
			ПоляСоединенияТекстВторичныеДанные.Добавить("ИзменившиесяДанные." + Поле + " = ВторичныеДанные." + Поле);
			ПоляСоединенияТекстПредыдущиеИнтервалы.Добавить("ИзменившиесяДанные." + Поле + " = ПредыдущийИнтервал." + Поле);
		КонецЦикла;
	КонецЕсли;	
	
	РазделительУсловий = "
		|	И ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзменившиесяДанные.Поля_", СтрСоединить(ПоляТекст, "," + Символы.ПС));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзменившиесяДанные.ПоляСоединения_ = ВторичныеДанные.ПоляСоединения_",
		СтрСоединить(ПоляСоединенияТекстВторичныеДанные, РазделительУсловий));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзменившиесяДанные.ПоляСоединения_ = ПредыдущийИнтервал.ПоляСоединения_",
		СтрСоединить(ПоляСоединенияТекстПредыдущиеИнтервалы, РазделительУсловий));
		
	ЗначенияИзмерений = Запрос.Выполнить().Выгрузить();
	
	Если ЗначенияИзмерений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеРегистраПервичныхДанных = ЗарплатаКадры.ОписаниеРегистраИсходныхПериодовСостояний();
	ОписаниеРегистраПервичныхДанных.ИмяРегистра = "ДанныеСостоянийСотрудников";
	ОписаниеРегистраПервичныхДанных.ИмяПоляДатаНачалаСобытия = "Начало";
	ОписаниеРегистраПервичныхДанных.ИмяПоляДатаНачалаПериода = "Начало";
	ОписаниеРегистраПервичныхДанных.ИмяПоляДатаОкончанияПериода = "Окончание"; 
	ОписаниеРегистраПервичныхДанных.ИмяПоляПриоритет = "Состояние";
	ОписаниеРегистраПервичныхДанных.Измерения.Добавить("Сотрудник");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("Состояние");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("ДокументОснование");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("ВидВремени");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("ОкончаниеПредположительно");
	
	ОписаниеРегистраВторичныхДанных = ЗарплатаКадры.ОписаниеРегистраРассчитанныхПериодовСостояний();
	ОписаниеРегистраВторичныхДанных.ИмяРегистра = "СостоянияСотрудников";
	ОписаниеРегистраВторичныхДанных.ИмяПоляДатаНачалаПериода = "Период";
	ОписаниеРегистраВторичныхДанных.ИмяПоляДатаОкончанияПериода = "ДействуетДо"; 
	ОписаниеРегистраВторичныхДанных.Измерения.Добавить("Сотрудник");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("Состояние");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("ДокументОснование");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("ВидВремени");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("ОкончаниеПредположительно");
	ОписаниеРегистраВторичныхДанных.ОтборПоГоду = Не РежимЗагрузки;
			
	ЗарплатаКадры.ОбновитьРегистрРассчитанныхПериодовСостояний(
		ОписаниеРегистраПервичныхДанных,
		ОписаниеРегистраВторичныхДанных,
		ЗначенияИзмерений,
		РежимЗагрузки)
	
КонецПроцедуры

Функция СостояниеПоВидуОтпуска(ВидОтпуска) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОтпуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Предопределенные = СостоянияПоВидамОтпусков();
	
	Для Каждого КлючИЗначение Из Предопределенные Цикл
		ПредопределенныйВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков." + КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(ПредопределенныйВидОтпуска) И ПредопределенныйВидОтпуска = ВидОтпуска Тогда
			Возврат КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Не удалось сопоставить ни с одним из предопределенных.
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ОтпускБезОплаты") Тогда
		Возврат Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый;
	Иначе
		Возврат Перечисления.СостоянияСотрудника.ДополнительныйОтпуск;
	КонецЕсли;
	
КонецФункции

Функция ВидОтпускаПоСостоянию(Состояние) Экспорт
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Предопределенные = СостоянияПоВидамОтпусков();
	
	Для Каждого КлючИЗначение Из Предопределенные Цикл
		Если КлючИЗначение.Значение = Состояние Тогда
			Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков." + КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет в структуру данных для проведения поля, необходимые для заполнения состояний.
//
// Параметры:
//	ДанныеДляПроведения - см. РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//
Процедура ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения) Экспорт
	
	ДанныеДляПроведения.Вставить("ДанныеСостоянийСотрудников");
	
КонецПроцедуры

#КонецОбласти

// Возвращает массив значений отклонений состояния сотрудников.
// 
// Возвращаемое значение:
//  Массив - Значения перечисления СостоянияСотрудника.
//
Функция СостоянияОтклоненийСотрудников() Экспорт
	
	Состояния = Новый Массив;
	
	Состояния.Добавить(Перечисления.СостоянияСотрудника.Прогул);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ВынужденныйПрогул);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускОсновной);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтсутствиеССохранениемОплаты);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ВыполнениеГосударственныхОбязанностей);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.Болезнь);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.БолезньБезОплаты);
	
	Возврат Состояния;
	
КонецФункции

Функция СостоянияОтпусков() Экспорт
	
	Состояния = Новый Массив;
	
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускОсновной);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	Состояния.Добавить(Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	
	Возврат Состояния;
	
КонецФункции

// Возвращает строковое представление состояния сотрудника для отображения на форме.
//
// Возвращаемое значение:
//		ТекстПредставления - Строка
//
Функция ПредставлениеСостоянияСотрудника(Состояние, ВидВремени = Неопределено) Экспорт
	
	ТекстПредставления = ПредставлениеСостоянияПоВидуВремени(ВидВремени);
	
	Если Не ПустаяСтрока(ТекстПредставления) Тогда
		Возврат ТекстПредставления;
	КонецЕсли;
	
	Если Состояние = Перечисления.СостоянияСотрудника.Прогул
		Или Состояние = Перечисления.СостоянияСотрудника.ВынужденныйПрогул Тогда
		ТекстПредставления = НСтр("ru = 'В прогуле';
									|en = 'In absenteeism'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника
		Или Состояние = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя
		Или Состояние = Перечисления.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника Тогда
		ТекстПредставления = НСтр("ru = 'В простое';
									|en = 'In downtime'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.ОтпускОсновной
		Или Состояние = Перечисления.СостоянияСотрудника.ДополнительныйОтпуск
		Или Состояние = Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый
		Или Состояние = Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый
		Или Состояние = Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый
		Или Состояние = Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя
		Или Состояние = Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству
		Или Состояние = Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение Тогда
		ТекстПредставления = НСтр("ru = 'В отпуске';
									|en = 'On leave'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком Тогда
		ТекстПредставления = НСтр("ru = 'В отпуске по уходу за ребенком';
									|en = 'On child care leave'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам Тогда
		ТекстПредставления = НСтр("ru = 'В отпуске по беременности и родам';
									|en = 'On maternity leave'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.ОтсутствиеССохранениемОплаты Тогда
		ТекстПредставления = НСтр("ru = 'Отсутствует с сохранением оплаты';
									|en = 'Paid absences'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам Тогда
		ТекстПредставления = НСтр("ru = 'Отсутствует по невыясненной причине';
									|en = 'Absence due to unknown reason'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.ВыполнениеГосударственныхОбязанностей Тогда
		ТекстПредставления = НСтр("ru = 'Выполняет государственные обязанности';
									|en = 'Performs public duties'");
	ИначеЕсли Состояние = Перечисления.СостоянияСотрудника.Болезнь
		Или Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты Тогда
		ТекстПредставления = НСтр("ru = 'На больничном';
									|en = 'On sick leave'");
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

// Возвращает строковое представление состояния сотрудника для отображения на форме.
//
// Возвращаемое значение:
//		ПараметрыСостояния - Структура
//
Функция ПараметрыТекущегоСостоянияСотрудника(Сотрудник) Экспорт
	
	ПараметрыСостояния = Новый Структура;
	ПараметрыСостояния.Вставить("Сотрудник", Сотрудник);
	ПараметрыСостояния.Вставить("ЗаголовокНадписи", НСтр("ru = 'У сотрудника установлено состояние ""%1"" %2 %3';
														|en = 'Employee has the ""%1"" state %2 %3'"));
	ПараметрыСостояния.Вставить("СостояниеСотрудника", "");
	ПараметрыСостояния.Вставить("ДатаОкончанияСостояния", "");
	ПараметрыСостояния.Вставить("ЗаменитьЗаголовокНадписи", Ложь);
	
	СостоянияСотрудника = СостоянияСотрудников(Сотрудник, СостоянияОтклоненийСотрудников(), НачалоДня(ТекущаяДатаСеанса()));
	СостоянияСотрудника.Сортировать("Начало");
	
	Если СостоянияСотрудника.Количество() = 0
		Или СостоянияСотрудника[0].Начало > НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		Возврат ПараметрыСостояния;
	КонецЕсли;
	
	ТекущееПредставлениеСостояния = ПредставлениеСостоянияСотрудника(СостоянияСотрудника[0].Состояние, СостоянияСотрудника[0].ВидВремени);
	ПараметрыСостояния.ЗаголовокНадписи = ТекущееПредставлениеСостояния + " %2 %3";
	ПараметрыСостояния.СостояниеСотрудника = СостоянияСотрудника[0].Состояние;
	ПараметрыСостояния.ДатаОкончанияСостояния = ?(ЗначениеЗаполнено(СостоянияСотрудника[0].ОкончаниеПредположительно),
		СостоянияСотрудника[0].ОкончаниеПредположительно,
		СостоянияСотрудника[0].Окончание);
		
	Для Сч = 1 По СостоянияСотрудника.Количество()-1 Цикл
		ПредставлениеСостояния = ПредставлениеСостоянияСотрудника(СостоянияСотрудника[Сч].Состояние, СостоянияСотрудника[Сч].ВидВремени);
		Если ПредставлениеСостояния <> ТекущееПредставлениеСостояния Тогда
			Прервать;
		КонецЕсли;
		
		Если КонецДня(ПараметрыСостояния.ДатаОкончанияСостояния) + 1 <> СостоянияСотрудника[Сч].Начало Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыСостояния.ДатаОкончанияСостояния = СостоянияСотрудника[Сч].Окончание;
	КонецЦикла;
	
	Возврат ПараметрыСостояния;
	
КонецФункции

Процедура ЗаполнитьСостоянияСотрудников() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТСотрудникиОрганизации
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.БольничныйЛист КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ТаблицаДокумента.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ТаблицаДокумента.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ТаблицаДокумента.Организация
	|				ИНАЧЕ ТаблицаДокумента.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = СотрудникиОрганизации.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.Командировка КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОплатаДнейУходаЗаДетьмиИнвалидами КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.Отпуск КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ТаблицаДокумента.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ТаблицаДокумента.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ТаблицаДокумента.Организация
	|				ИНАЧЕ ТаблицаДокумента.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = СотрудникиОрганизации.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ПрогулНеявка КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ПростойСотрудников КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПростойСотрудников.Начисления КАК ТаблицаСотрудников
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаСотрудников.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.СторнированиеНачислений КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.Увольнение КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.БолезньБезОплаты) КАК Состояние,
	|	ЛОЖЬ КАК Сторно,
	|	БольничныйЛист.ДатаНачала КАК Начало,
	|	БольничныйЛист.ДатаОкончания КАК Окончание,
	|	NULL КАК ВидОтпуска
	|ПОМЕСТИТЬ ВТДанныеСостояний
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И НЕ БольничныйЛист.НазначитьПособие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.БолезньБезОплаты),
	|	ЛОЖЬ,
	|	БольничныйЛист.ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(БольничныйЛист.ДатаНачалаОплаты, ДЕНЬ, -1),
	|	NULL
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И БольничныйЛист.НазначитьПособие
	|	И БольничныйЛист.ДатаНачала < БольничныйЛист.ДатаНачалаОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь),
	|	ЛОЖЬ,
	|	БольничныйЛист.ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты,
	|	NULL
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И БольничныйЛист.НазначитьПособие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь),
	|	ЛОЖЬ,
	|	ДОБАВИТЬКДАТЕ(БольничныйЛист.ДатаОкончанияОплаты, ДЕНЬ, 1),
	|	БольничныйЛист.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И БольничныйЛист.НазначитьПособие
	|	И БольничныйЛист.ДатаОкончанияОплаты < БольничныйЛист.ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа),
	|	ЛОЖЬ,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	NULL
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ВозвратИзОтпускаПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ВозвратИзОтпускаПоУходуЗаРебенком.Организация
	|				ИНАЧЕ ВозвратИзОтпускаПоУходуЗаРебенком.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Командировка.Сотрудник,
	|	Командировка.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Командировка),
	|	ЛОЖЬ,
	|	Командировка.ДатаНачала,
	|	Командировка.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.Командировка КАК Командировка
	|ГДЕ
	|	Командировка.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Сотрудник,
	|	ТаблицаДокумента.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныеВыходныеДниОплачиваемые),
	|	ЛОЖЬ,
	|	ТаблицаДней.Дата,
	|	ТаблицаДней.Дата,
	|	NULL
	|ИЗ
	|	Документ.ОплатаДнейУходаЗаДетьмиИнвалидами КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.ДниУхода КАК ТаблицаДней
	|		ПО (ТаблицаДней.Ссылка = ТаблицаДокумента.Ссылка)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Сотрудник,
	|	ОплатаПоСреднемуЗаработку.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ВыполнениеГосударственныхОбязанностей),
	|	ЛОЖЬ,
	|	ОплатаПоСреднемуЗаработку.ДатаНачала,
	|	ОплатаПоСреднемуЗаработку.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отпуск.Сотрудник,
	|	Отпуск.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускОсновной),
	|	ЛОЖЬ,
	|	Отпуск.ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска,
	|	NULL
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.ПредоставитьОсновнойОтпуск
	|	И Отпуск.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отпуск.Сотрудник,
	|	Отпуск.Ссылка,
	|	NULL,
	|	ЛОЖЬ,
	|	ДопОтпуска.ДатаНачала,
	|	ДопОтпуска.ДатаОкончания,
	|	ДопОтпуска.ВидОтпуска
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК ДопОтпуска
	|		ПО (ДопОтпуска.Ссылка = Отпуск.Ссылка)
	|			И (Отпуск.ПредоставитьДополнительныйОтпуск)
	|			И (Отпуск.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТРегистраторы.Ссылка
	|				ИЗ
	|					ВТРегистраторы))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Сотрудник,
	|	ОтпускБезСохраненияОплаты.Ссылка,
	|	NULL,
	|	ЛОЖЬ,
	|	ОтпускБезСохраненияОплаты.ДатаНачала,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания,
	|	ОтпускБезСохраненияОплаты.ВидОтпуска
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком),
	|	ЛОЖЬ,
	|	ОтпускПоУходуЗаРебенком.ДатаНачала,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ОтпускПоУходуЗаРебенком.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ОтпускПоУходуЗаРебенком.Организация
	|				ИНАЧЕ ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа),
	|	ЛОЖЬ,
	|	ПриемНаРаботу.ДатаПриема,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	NULL
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрогулНеявка.Сотрудник,
	|	ПрогулНеявка.Ссылка,
	|	ВЫБОР
	|		КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Прогул)
	|		КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам)
	|		КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ПрогулНеявка.ДатаНачала,
	|	ПрогулНеявка.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ПрогулНеявка КАК ПрогулНеявка
	|ГДЕ
	|	ПрогулНеявка.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияПростой.Сотрудник,
	|	ПростойСотрудников.Ссылка,
	|	ВЫБОР
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботника)
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботодателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ПростойСотрудников.ДатаНачала,
	|	ПростойСотрудников.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ПростойСотрудников КАК ПростойСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПростойСотрудников.Начисления КАК НачисленияПростой
	|		ПО (НачисленияПростой.Ссылка = ПростойСотрудников.Ссылка)
	|			И (ПростойСотрудников.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТРегистраторы.Ссылка
	|				ИЗ
	|					ВТРегистраторы))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Увольнение.Сотрудник,
	|	Увольнение.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение),
	|	ЛОЖЬ,
	|	Увольнение.ДатаУвольнения,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	NULL
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Сотрудник КАК Сотрудник,
	|	ДанныеСостояний.ДокументОснование КАК ДокументОснование,
	|	ДанныеСостояний.Состояние КАК Состояние,
	|	ДанныеСостояний.Сторно КАК Сторно,
	|	ДанныеСостояний.Начало КАК Начало,
	|	ДанныеСостояний.Окончание КАК Окончание,
	|	ДанныеСостояний.ВидОтпуска КАК ВидОтпуска
	|ПОМЕСТИТЬ ВТКлючиИзменившихсяДанных
	|ИЗ
	|	ВТДанныеСостояний КАК ДанныеСостояний
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеИсправленияСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеИсправленияСостояний.Состояние,
	|	ИСТИНА,
	|	ДанныеИсправленияСостояний.Начало,
	|	ДанныеИсправленияСостояний.Окончание,
	|	ДанныеИсправленияСостояний.ВидОтпуска
	|ИЗ
	|	ВТДанныеСостояний КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСостояний КАК ДанныеИсправленияСостояний
	|		ПО (ДанныеИсправленияСостояний.ДокументОснование = ДанныеСостояний.ДокументОснование.ИсправленныйДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеИсправленияСостояний.Сотрудник,
	|	СторнированиеНачислений.Ссылка,
	|	ДанныеИсправленияСостояний.Состояние,
	|	ИСТИНА,
	|	ДанныеИсправленияСостояний.Начало,
	|	ДанныеИсправленияСостояний.Окончание,
	|	ДанныеИсправленияСостояний.ВидОтпуска
	|ИЗ
	|	Документ.СторнированиеНачислений КАК СторнированиеНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСостояний КАК ДанныеИсправленияСостояний
	|		ПО (ДанныеИсправленияСостояний.ДокументОснование = СторнированиеНачислений.СторнируемыйДокумент)
	|ГДЕ
	|	СторнированиеНачислений.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКлючиИзменившихсяДанных.Сотрудник КАК Сотрудник,
	|	ВТКлючиИзменившихсяДанных.ДокументОснование КАК ДокументОснование,
	|	ВТКлючиИзменившихсяДанных.Состояние КАК Состояние,
	|	ВТКлючиИзменившихсяДанных.Сторно КАК Сторно,
	|	ВТКлючиИзменившихсяДанных.Начало КАК Начало,
	|	ВТКлючиИзменившихсяДанных.Окончание КАК Окончание,
	|	ВТКлючиИзменившихсяДанных.ВидОтпуска КАК ВидОтпуска
	|ИЗ
	|	ВТКлючиИзменившихсяДанных КАК ВТКлючиИзменившихсяДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
			Если Не ЗначениеЗаполнено(Выборка.Состояние) И ЗначениеЗаполнено(Выборка.ВидОтпуска) Тогда
				СтрокаНабора.Состояние = СостояниеПоВидуОтпуска(Выборка.ВидОтпуска);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	ОбновитьСостоянияСотрудников(Запрос.МенеджерВременныхТаблиц, , Истина);
	
КонецПроцедуры

Функция ПроверитьПересечениеПериодовОтсутствия(ИсходныеДанные, Регистратор, ИсправленныйДокумент = Неопределено) Экспорт 
	
	ДанныеСотрудников = Новый Соответствие;
	РезультатПроверки = Новый Структура("ДанныеСотрудников, Отказ", ДанныеСотрудников, Ложь);
	
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(Регистратор);
	
	Если ИсправленныйДокумент <> Неопределено Тогда
		ИсключаемыеРегистраторы.Добавить(ИсправленныйДокумент);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы,
			ИсправлениеДокументовЗарплатаКадры.ПолучитьДокументыЦепочкиИсправлений(ИсправленныйДокумент));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.Состояние КАК Состояние,
		|	ИсходныеДанные.Начало КАК ДатаНачала,
		|	ИсходныеДанные.Окончание КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСостоянияСотрудниковДокумента
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСостоянийСотрудников.Регистратор КАК Регистратор,
		|	ДанныеСостоянийСотрудников.Сотрудник КАК Сотрудник,
		|	ДанныеСостоянийСотрудников.Сторно КАК Сторно,
		|	ДанныеСостоянийСотрудников.Состояние КАК ТекущееСостояние,
		|	ДанныеСостоянийСотрудников.Начало КАК Начало,
		|	ДанныеСостоянийСотрудников.Окончание КАК Окончание,
		|	СостоянияСотрудниковДокумента.Состояние КАК Состояние,
		|	СостоянияСотрудниковДокумента.ДатаНачала КАК ДатаНачала,
		|	СостоянияСотрудниковДокумента.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТТекущиеСостоянияБезПриоритета
		|ИЗ
		|	ВТСостоянияСотрудниковДокумента КАК СостоянияСотрудниковДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
		|		ПО СостоянияСотрудниковДокумента.Сотрудник = ДанныеСостоянийСотрудников.Сотрудник
		|			И (НЕ ДанныеСостоянийСотрудников.Регистратор В (&ИсключаемыеРегистраторы))
		|			И (ДанныеСостоянийСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа))
		|			И (ДанныеСостоянийСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком))
		|			И (СостоянияСотрудниковДокумента.ДатаОкончания >= ДанныеСостоянийСотрудников.Начало
		|				ИЛИ СостоянияСотрудниковДокумента.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение))
		|			И (СостоянияСотрудниковДокумента.ДатаНачала <= ДанныеСостоянийСотрудников.Окончание
		|				ИЛИ ДанныеСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	ВТТекущиеСостоянияБезПриоритета КАК ТекущиеСостоянияБезПриоритета";
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат РезультатПроверки;
	КонецЕсли;
				   
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеСостоянияБезПриоритета.Регистратор КАК Регистратор,
		|	ТекущиеСостоянияБезПриоритета.Сотрудник КАК Сотрудник,
		|	ТекущиеСостоянияБезПриоритета.Сторно КАК Сторно,
		|	ТекущиеСостоянияБезПриоритета.ТекущееСостояние КАК ТекущееСостояние,
		|	ТекущиеСостоянияБезПриоритета.Начало КАК Начало,
		|	ТекущиеСостоянияБезПриоритета.Окончание КАК Окончание,
		|	ПриоритетыСостоянийСотрудников.Порядок КАК Приоритет,
		|	ТекущиеСостоянияБезПриоритета.Состояние КАК Состояние,
		|	ТекущиеСостоянияБезПриоритета.ДатаНачала КАК ДатаНачала,
		|	ТекущиеСостоянияБезПриоритета.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТТекущиеСостояния
		|ИЗ
		|	ВТТекущиеСостоянияБезПриоритета КАК ТекущиеСостоянияБезПриоритета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.СостоянияСотрудника КАК ПриоритетыСостоянийСотрудников
		|		ПО ТекущиеСостоянияБезПриоритета.ТекущееСостояние = ПриоритетыСостоянийСотрудников.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеСостояния.Сотрудник КАК Сотрудник,
		|	ТекущиеСостояния.ТекущееСостояние КАК ТекущееСостояние,
		|	ТекущиеСостояния.Начало КАК Начало,
		|	ТекущиеСостояния.Окончание КАК Окончание,
		|	КОЛИЧЕСТВО(ТекущиеСостояния.Сотрудник) КАК КоличествоСторноЗаписей
		|ПОМЕСТИТЬ ВТТекущиеСостоянияСторно
		|ИЗ
		|	ВТТекущиеСостояния КАК ТекущиеСостояния
		|ГДЕ
		|	ТекущиеСостояния.Сторно
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеСостояния.Сотрудник,
		|	ТекущиеСостояния.ТекущееСостояние,
		|	ТекущиеСостояния.Начало,
		|	ТекущиеСостояния.Окончание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеСостояния.Сотрудник КАК Сотрудник,
		|	ТекущиеСостояния.ТекущееСостояние КАК ТекущееСостояние,
		|	ТекущиеСостояния.Начало КАК Начало,
		|	ТекущиеСостояния.Окончание КАК Окончание,
		|	КОЛИЧЕСТВО(ТекущиеСостояния.Сотрудник) КАК КоличествоСторнированныхЗаписей
		|ПОМЕСТИТЬ ВТСторнированныеЗаписи
		|ИЗ
		|	ВТТекущиеСостояния КАК ТекущиеСостояния
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущиеСостоянияСторно КАК ТекущиеСостоянияСторно
		|		ПО ТекущиеСостояния.Сотрудник = ТекущиеСостоянияСторно.Сотрудник
		|			И ТекущиеСостояния.ТекущееСостояние = ТекущиеСостоянияСторно.ТекущееСостояние
		|			И ТекущиеСостояния.Начало = ТекущиеСостоянияСторно.Начало
		|			И ТекущиеСостояния.Окончание = ТекущиеСостоянияСторно.Окончание
		|			И (НЕ ТекущиеСостояния.Сторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеСостояния.Сотрудник,
		|	ТекущиеСостояния.ТекущееСостояние,
		|	ТекущиеСостояния.Начало,
		|	ТекущиеСостояния.Окончание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторнированныеЗаписи.Сотрудник КАК Сотрудник,
		|	СторнированныеЗаписи.ТекущееСостояние КАК ТекущееСостояние,
		|	СторнированныеЗаписи.Начало КАК Начало,
		|	СторнированныеЗаписи.Окончание КАК Окончание
		|ПОМЕСТИТЬ ВТИсключаемыеЗаписи
		|ИЗ
		|	ВТТекущиеСостоянияСторно КАК ТекущиеСостоянияСторно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнированныеЗаписи КАК СторнированныеЗаписи
		|		ПО ТекущиеСостоянияСторно.Сотрудник = СторнированныеЗаписи.Сотрудник
		|			И ТекущиеСостоянияСторно.ТекущееСостояние = СторнированныеЗаписи.ТекущееСостояние
		|			И ТекущиеСостоянияСторно.Начало = СторнированныеЗаписи.Начало
		|			И ТекущиеСостоянияСторно.Окончание = СторнированныеЗаписи.Окончание
		|			И ТекущиеСостоянияСторно.КоличествоСторноЗаписей >= СторнированныеЗаписи.КоличествоСторнированныхЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущиеСостояния.Регистратор КАК Регистратор,
		|	ТекущиеСостояния.Сотрудник КАК Сотрудник,
		|	ТекущиеСостояния.ТекущееСостояние КАК ТекущееСостояние,
		|	ТекущиеСостояния.Начало КАК Начало,
		|	ТекущиеСостояния.Окончание КАК Окончание,
		|	ТекущиеСостояния.Приоритет КАК Приоритет,
		|	ТекущиеСостояния.Состояние КАК Состояние,
		|	ТекущиеСостояния.ДатаНачала КАК ДатаНачала,
		|	ТекущиеСостояния.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТНайденныеОшибкиПредварительно
		|ИЗ
		|	ВТТекущиеСостояния КАК ТекущиеСостояния
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеЗаписи КАК ИсключаемыеЗаписи
		|		ПО ТекущиеСостояния.Сотрудник = ИсключаемыеЗаписи.Сотрудник
		|			И ТекущиеСостояния.ТекущееСостояние = ИсключаемыеЗаписи.ТекущееСостояние
		|			И ТекущиеСостояния.Начало = ИсключаемыеЗаписи.Начало
		|			И ТекущиеСостояния.Окончание = ИсключаемыеЗаписи.Окончание
		|ГДЕ
		|	ИсключаемыеЗаписи.Сотрудник ЕСТЬ NULL
		|	И НЕ ТекущиеСостояния.Сторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеОшибкиПредварительно.Сотрудник КАК Сотрудник,
		|	НайденныеОшибкиПредварительно.ТекущееСостояние КАК ТекущееСостояние,
		|	НайденныеОшибкиПредварительно.Начало КАК Начало,
		|	МИНИМУМ(ДанныеСостоянийСотрудников.Начало) КАК НачалоСледующегоСостояния
		|ПОМЕСТИТЬ ВТОткрытыеСостоянияДаты
		|ИЗ
		|	ВТНайденныеОшибкиПредварительно КАК НайденныеОшибкиПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
		|		ПО НайденныеОшибкиПредварительно.Сотрудник = ДанныеСостоянийСотрудников.Сотрудник
		|			И (НайденныеОшибкиПредварительно.Окончание = ДАТАВРЕМЯ(1, 1, 1))
		|			И НайденныеОшибкиПредварительно.Начало < ДанныеСостоянийСотрудников.Начало
		|			И (ДанныеСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1))
		|			И (НЕ ДанныеСостоянийСотрудников.Регистратор В (&ИсключаемыеРегистраторы))
		|
		|СГРУППИРОВАТЬ ПО
		|	НайденныеОшибкиПредварительно.Сотрудник,
		|	НайденныеОшибкиПредварительно.ТекущееСостояние,
		|	НайденныеОшибкиПредварительно.Начало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеОшибкиПредварительно.Регистратор КАК Регистратор,
		|	НайденныеОшибкиПредварительно.Сотрудник КАК Сотрудник,
		|	НайденныеОшибкиПредварительно.ТекущееСостояние КАК ТекущееСостояние,
		|	НайденныеОшибкиПредварительно.Начало КАК Начало,
		|	ДОБАВИТЬКДАТЕ(ОткрытыеСостоянияДаты.НачалоСледующегоСостояния, ДЕНЬ, -1) КАК Окончание,
		|	НайденныеОшибкиПредварительно.Приоритет КАК Приоритет,
		|	НайденныеОшибкиПредварительно.Состояние КАК Состояние,
		|	НайденныеОшибкиПредварительно.ДатаНачала КАК ДатаНачала,
		|	НайденныеОшибкиПредварительно.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТНайденныеОшибки
		|ИЗ
		|	ВТНайденныеОшибкиПредварительно КАК НайденныеОшибкиПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОткрытыеСостоянияДаты КАК ОткрытыеСостоянияДаты
		|		ПО НайденныеОшибкиПредварительно.Сотрудник = ОткрытыеСостоянияДаты.Сотрудник
		|			И НайденныеОшибкиПредварительно.ТекущееСостояние = ОткрытыеСостоянияДаты.ТекущееСостояние
		|			И НайденныеОшибкиПредварительно.Начало = ОткрытыеСостоянияДаты.Начало
		|			И (НайденныеОшибкиПредварительно.ДатаНачала <= ДОБАВИТЬКДАТЕ(ОткрытыеСостоянияДаты.НачалоСледующегоСостояния, ДЕНЬ, -1))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НайденныеОшибкиПредварительно.Регистратор,
		|	НайденныеОшибкиПредварительно.Сотрудник,
		|	НайденныеОшибкиПредварительно.ТекущееСостояние,
		|	НайденныеОшибкиПредварительно.Начало,
		|	НайденныеОшибкиПредварительно.Окончание,
		|	НайденныеОшибкиПредварительно.Приоритет,
		|	НайденныеОшибкиПредварительно.Состояние,
		|	НайденныеОшибкиПредварительно.ДатаНачала,
		|	НайденныеОшибкиПредварительно.ДатаОкончания
		|ИЗ
		|	ВТНайденныеОшибкиПредварительно КАК НайденныеОшибкиПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОткрытыеСостоянияДаты КАК ОткрытыеСостоянияДаты
		|		ПО НайденныеОшибкиПредварительно.Сотрудник = ОткрытыеСостоянияДаты.Сотрудник
		|			И НайденныеОшибкиПредварительно.ТекущееСостояние = ОткрытыеСостоянияДаты.ТекущееСостояние
		|			И НайденныеОшибкиПредварительно.Начало = ОткрытыеСостоянияДаты.Начало
		|ГДЕ
		|	ОткрытыеСостоянияДаты.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеОшибки.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(НайденныеОшибки.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТПриоритетСостояний
		|ИЗ
		|	ВТНайденныеОшибки КАК НайденныеОшибки
		|
		|СГРУППИРОВАТЬ ПО
		|	НайденныеОшибки.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеОшибки.Регистратор КАК Регистратор,
		|	НайденныеОшибки.Сотрудник КАК Сотрудник,
		|	НайденныеОшибки.ТекущееСостояние КАК ТекущееСостояние,
		|	НайденныеОшибки.Начало КАК Начало,
		|	НайденныеОшибки.Окончание КАК Окончание,
		|	НайденныеОшибки.Приоритет КАК Приоритет,
		|	НайденныеОшибки.Состояние КАК Состояние,
		|	НайденныеОшибки.ДатаНачала КАК ДатаНачала,
		|	НайденныеОшибки.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТНайденныеОшибки КАК НайденныеОшибки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетСостояний КАК ПриоритетСостояний
		|		ПО НайденныеОшибки.Сотрудник = ПриоритетСостояний.Сотрудник
		|			И НайденныеОшибки.Приоритет = ПриоритетСостояний.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеОшибки.Регистратор КАК Регистратор,
		|	НайденныеОшибки.Сотрудник КАК Сотрудник,
		|	НайденныеОшибки.ТекущееСостояние КАК ТекущееСостояние,
		|	НайденныеОшибки.Начало КАК Начало,
		|	НайденныеОшибки.Окончание КАК Окончание,
		|	НайденныеОшибки.Приоритет КАК Приоритет,
		|	НайденныеОшибки.Состояние КАК Состояние,
		|	НайденныеОшибки.ДатаНачала КАК ДатаНачала,
		|	НайденныеОшибки.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТНайденныеОшибки КАК НайденныеОшибки
		|ГДЕ
		|	НайденныеОшибки.ТекущееСостояние = НайденныеОшибки.Состояние
		|	И НайденныеОшибки.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком)";
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();			   
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки.Отказ = Не РезультатыЗапроса[9].Пустой();
	ОписаниеСотрудника = "Регистратор,Состояние,ПредставлениеПериода";
	
	Выборка = РезультатыЗапроса[9].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСотрудника = Новый Структура(ОписаниеСотрудника);
		ДанныеСотрудника.Регистратор = Выборка.Регистратор;
		ДанныеСотрудника.Состояние = Выборка.ТекущееСостояние;
		ДатаНачала = ?(Выборка.ТекущееСостояние = Перечисления.СостоянияСотрудника.Увольнение, Выборка.Начало - 86400, Выборка.Начало);
		ДатаОкончания = ?(Выборка.Окончание = Дата(1, 1, 1), Неопределено, Выборка.Окончание);
		ДанныеСотрудника.ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
		РезультатПроверки.ДанныеСотрудников.Вставить(Выборка.Сотрудник, ДанныеСотрудника);
	КонецЦикла;
	
	Если РезультатПроверки.ДанныеСотрудников.Количество() > 0 Тогда 
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Выборка = РезультатыЗапроса[8].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДанныеСотрудника = Новый Структура(ОписаниеСотрудника);
		ДанныеСотрудника.Регистратор = Выборка.Регистратор;
		ДанныеСотрудника.Состояние = Выборка.ТекущееСостояние;
		ДатаНачала = ?(Выборка.ТекущееСостояние = Перечисления.СостоянияСотрудника.Увольнение, Выборка.Начало - 86400, Выборка.Начало);
		ДатаОкончания = ?(Выборка.Окончание = Дата(1, 1, 1), Неопределено, Выборка.Окончание);
		ДанныеСотрудника.ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
		РезультатПроверки.ДанныеСотрудников.Вставить(Выборка.Сотрудник, ДанныеСотрудника);
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.111";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("55459e66-6f60-11eb-80dc-4cedfb95098c");
	Обработчик.Процедура       = "СостоянияСотрудников.СкорректироватьПересекающиесяИнтервалыВторичногоРегистра";
	Обработчик.Комментарий     = НСтр("ru = 'Исправление пересекающихся интервалов.';
										|en = 'Correcting overlapping intervals.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.24.106";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("de8b1ace-7300-4b83-8953-61020a73bbb4");
	Обработчик.Процедура       = "СостоянияСотрудников.ЗаполнитьДокументыОснованияСостоянийСотрудников";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение документа основания во вторичном регистре.';
										|en = 'Fill in the base document in the secondary register.'");
	
КонецПроцедуры

Процедура СкорректироватьПересекающиесяИнтервалыВторичногоРегистра(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
		|ПОМЕСТИТЬ ВТКлючиИзменившихсяДанных
		|ИЗ
		|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудниковПересекающие
		|		ПО СостоянияСотрудников.Сотрудник = СостоянияСотрудниковПересекающие.Сотрудник
		|			И СостоянияСотрудников.Период >= СостоянияСотрудниковПересекающие.Период
		|			И (СостоянияСотрудников.Период <= СостоянияСотрудниковПересекающие.ДействуетДо
		|				ИЛИ СостоянияСотрудниковПересекающие.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	(СостоянияСотрудников.Период <> СостоянияСотрудниковПересекающие.Период
		|			ИЛИ СостоянияСотрудников.ДействуетДо <> СостоянияСотрудниковПересекающие.ДействуетДо)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СостоянияСотрудников.Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|ГДЕ
		|	СостоянияСотрудников.Год = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТКлючиИзменившихсяДанных.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТКлючиИзменившихсяДанных КАК ВТКлючиИзменившихсяДанных";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина); 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СостоянияСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
	ОбновитьСостоянияСотрудников(Запрос.МенеджерВременныхТаблиц,, Истина);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснованияСостоянийСотрудников(ПараметрыОбновления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
		|ПОМЕСТИТЬ ВТКлючиИзменившихсяДанных
		|ИЗ
		|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|ГДЕ
		|	СостоянияСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТКлючиИзменившихсяДанных.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТКлючиИзменившихсяДанных КАК ВТКлючиИзменившихсяДанных";
	
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина); 
		Возврат;
	КонецЕсли;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ОбновитьСостоянияСотрудников(Запрос.МенеджерВременныхТаблиц,, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументОснование, Сотрудник, Состояние, Начало, Окончание = Неопределено, Сторно = Ложь, ВидВремени = Неопределено, ОкончаниеПредположительно = Неопределено)
	
	НоваяСтрока = Движения.ДанныеСостоянийСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДокументОснование = ДокументОснование;
	НоваяСтрока.Сторно = Сторно;
	НоваяСтрока.Состояние = Состояние;
	НоваяСтрока.Начало = Начало;
	НоваяСтрока.Окончание = Окончание;
	НоваяСтрока.ОкончаниеПредположительно = ОкончаниеПредположительно;
	НоваяСтрока.ВидВремени = ВидВремени;
	
	Движения.ДанныеСостоянийСотрудников.Записывать = Истина;
	
КонецПроцедуры

Процедура ДобавитьЗаписиСостоянияСотрудников(Движения, ДокументСсылка, ДанныеСостояний, Сторно = Ложь) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеСостояний Цикл
		ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, СтрокаДанных.Сотрудник, СтрокаДанных.Состояние, СтрокаДанных.Начало, СтрокаДанных.Окончание, Сторно);
	КонецЦикла;
	
КонецПроцедуры

Функция СостоянияПоВидамОтпусков()
	
	Результат = Новый Соответствие;
	
	ДополнительныйОтпуск = Перечисления.СостоянияСотрудника.ДополнительныйОтпуск;
	Результат.Вставить("Северный", ДополнительныйОтпуск);
	Результат.Вставить("ОтпускПострадавшимВАварииЧАЭС", ДополнительныйОтпуск);
	Результат.Вставить("ОтпускПострадавшимВАварииЧАЭСОплачиваемый", ДополнительныйОтпуск);
	
	Результат.Вставить("ОтпускУчебный", Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	Результат.Вставить("ОтпускБезОплатыУчебный", Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	Результат.Вставить("Основной", Перечисления.СостоянияСотрудника.ОтпускОсновной);
	Результат.Вставить("ОтпускБезОплатыПоТКРФ", Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	Результат.Вставить("ОтпускЗаСвойСчет", Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	Результат.Вставить("ОтпускНаСанаторноКурортноеЛечение", Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строковое представление состояния сотрудника по уточняющему виду времени для отображения на форме.
//
// Возвращаемое значение:
//		ТекстПредставления - Строка
//
Функция ПредставлениеСостоянияПоВидуВремени(ВидВремени)
	
	ТекстПредставления = "";
	Префикс = "Справочник.ВидыИспользованияРабочегоВремени.";
	
	Если ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ОтстранениеОтРаботыБезОплаты")
		Или ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ОтстранениеОтРаботыСОплатой") Тогда
		ТекстПредставления = НСтр("ru = 'Отстранен от работы';
									|en = 'Suspended from work'");
	ИначеЕсли ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "Болезнь") Тогда
		ТекстПредставления = НСтр("ru = 'Болеет';
									|en = 'Sick'");
	ИначеЕсли ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ЗадержкаВыплатыЗаработнойПлаты") Тогда
		ТекстПредставления = НСтр("ru = 'Приостановил работу';
									|en = 'Paused working'");
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

#КонецОбласти
