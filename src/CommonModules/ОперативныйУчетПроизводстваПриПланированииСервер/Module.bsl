
#Область ПрограммныйИнтерфейс

// Процедура добавляет в описание профиля локального диспетчера
// роли для работы пооперационного планирования.
//
// Параметры:
//	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
//
Процедура ДобавитьРолиЛокальногоДиспетчера(ОписаниеПрофиля) Экспорт
	
	// Регистры, чтение.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПооперационногоРасписания2_2");
	
	// Регистры, добавление изменение.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПооперационногоРасписания2_2");
	
	// Обработки, отчеты.
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеВыполненияОперацийПриПланировании");
	
КонецПроцедуры

// Инициализация фонового задания расчета пооперационного расписания в соответствии с параметрами моделей планирования.
//
// Параметры:
//  ПараметрыПланирования - Структура - 
//	РезультатыРасчета - Массив - содержит уникальные идентификаторы - адреса временных хранилищ,
//		в которые будет помещен результат работы метода.
//
Процедура РассчитатьРасписаниеМоделейВФоновомРежиме(ПараметрыПланирования, РезультатыРасчета) Экспорт
	
	Обработки.ПооперационноеПланирование2_2.РассчитатьРасписаниеМоделейВФоновомРежиме(ПараметрыПланирования, РезультатыРасчета);
	
КонецПроцедуры

// Инициализация фонового задания расчета пооперационного расписания в соответствии с параметрами конкретной модели планирования.
//
// Параметры:
//  ПараметрыПланирования - Структура -
//  АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, в которое будет помещен результат работы метода.
//
Процедура РассчитатьРасписаниеМоделиВФоновомРежиме(ПараметрыПланирования, АдресХранилища) Экспорт
	
	Обработки.ПооперационноеПланирование2_2.РассчитатьРасписаниеМоделиВФоновомРежиме(ПараметрыПланирования, АдресХранилища);
	
КонецПроцедуры

// Заполнение структуры таблицы по метаданным регистра.
//
// Параметры:
//	ТипРегистра - Строка
//	ИмяРегистра - Строка
//	Таблица - ТаблицаЗначений - таблица, структуру которой нужно заполнить по метаданным регистра.
//
Процедура ЗаполнитьСтруктуруТаблицыПоМетаданнымРегистра(Знач ТипРегистра, Знач ИмяРегистра, Таблица) Экспорт
	
	Основание = Метаданные[ТипРегистра][ИмяРегистра];
	
	Для каждого Измерение Из Основание.Измерения Цикл
		Если Таблица.Колонки.Найти(Измерение.Имя) = Неопределено Тогда
			Таблица.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
		КонецЕсли;
	КонецЦикла;
	Для каждого Ресурс Из Основание.Ресурсы Цикл
		Если Таблица.Колонки.Найти(Ресурс.Имя) = Неопределено Тогда
			Таблица.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
		КонецЕсли;
	КонецЦикла;
	Для каждого Реквизит Из Основание.Реквизиты Цикл
		Если Таблица.Колонки.Найти(Реквизит.Имя) = Неопределено Тогда
			Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти