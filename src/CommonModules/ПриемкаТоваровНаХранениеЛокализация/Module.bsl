
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	УчетПрослеживаемыхТоваровЛокализация.ПроверитьЗаполнениеКоличестваПоРНПТ(Объект, Отказ, Неопределено);
	УчетПрослеживаемыхТоваровЛокализация.ПроверитьДанныеПрослеживаемостиНомеровГТД(Объект, Объект.Товары, Объект.Дата);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ИнтеграцияВЕТИСУТ.ЗаполнитьПриемкуТоваровНаХранениеНаОснованииВходящейТранспортнойОперацииВЕТИС(Объект, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПогашениеСДИЗЗЕРНО") Тогда
		ИнтеграцияЗЕРНОУТ.ЗаполнитьПриемкуТоваровНаХранениеНаОснованииПогашенияСДИЗЗЕРНО(Объект, ДанныеЗаполнения);
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	
	// МХ-1 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "МХ1";
	КомандаПечати.Представление = НСтр("ru = 'Акт о приеме-передаче ТМЦ на хранение (МХ-1)';
										|en = 'Certificate of inventory handover for storage (MH-1)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	//++ НЕ УТКА

	// Приходный ордер (М-4)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати                 = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор                  = "М4";
	КомандаПечати.Представление                  = НСтр("ru = 'Приходный ордер (М-4)';
														|en = 'Goods receipt note (M-4)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
		КомандаПечати,
		"ХозяйственнаяОперация",
		Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5,
		ВидСравнения.Равно);
	//-- НЕ УТКА
	
	//-- Локализация

КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

//++ Локализация

// Возвращает данные для формирования печатной формы МХ - 1.
//
// Параметры:
//	ПараметрыПечати	- Структура -дополнительные настройки печати.
//	МассивОбъектов	- Массив из ДокументСсылка.ПриемкаТоваровНаХранение - коллекция значений ссылок на документы,
//																			по которым необходимо получить данные.
//
// Возвращаемое значение:
//	Структура - коллекция данных, используемых для печати, содержащая следующие следующие свойства:
//		* РезультатПоШапке			- РезультатЗапроса - данные шапки документа.
//		* РезультатПоСкладам		- РезультатЗапроса - данные о складе ответственного хранения.
//		* РезультатПоТабличнойЧасти	- РезультатЗапроса - данные табличной части документа.
//		* РезультатПоОшибкам		- Неорпеделено - данные об ошибках, возникающих при печати документа.
//
Функция ПолучитьДанныеДляПечатнойФормыМХ1(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументПриемка.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДокументПриемка.ИсправляемыйДокумент.Номер, ДокументПриемка.Номер) КАК Номер,
	|	ЕСТЬNULL(ДокументПриемка.ИсправляемыйДокумент.Дата, ДокументПриемка.Дата) КАК Дата,
	|	ЕСТЬNULL(ДокументПриемка.ИсправляемыйДокумент.Дата, ДокументПриемка.Дата) КАК ДатаДокумента,
	|	ДокументПриемка.Дата КАК ДатаПолученияСебестоимости,
	|	ДокументПриемка.Организация КАК Организация,
	|	ДокументПриемка.Контрагент КАК Контрагент,
	|	ДокументПриемка.Сдал КАК Сдал,
	|	ДокументПриемка.СдалДолжность КАК СдалДолжность,
	|	ДокументПриемка.Принял КАК Принял,
	|	ДокументПриемка.ПринялДолжность КАК ПринялДолжность,
	|	ДокументПриемка.Договор.Дата КАК ДоговорДата,
	|	ДокументПриемка.Договор.Номер КАК ДоговорНомер,
	|	ВЫБОР
	|		КОГДА Организации.ВалютаРегламентированногоУчета = ДокументПриемка.Валюта
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ДокументВВалютеРеглУчета
	|ПОМЕСТИТЬ ВтШапка
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение КАК ДокументПриемка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Организации.Ссылка = ДокументПриемка.Организация
	|ГДЕ
	|	ДокументПриемка.Ссылка В(&МассивДокументов)
	|	И ДокументПриемка.Проведен
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	ВтШапка.Ссылка КАК Ссылка,
	|	ВтШапка.Номер КАК Номер,
	|	ВтШапка.Дата КАК Дата,
	|	ВтШапка.Дата КАК ДатаДокумента,
	|	ВтШапка.Организация КАК Организация,
	|	ВтШапка.Контрагент КАК Поклажедатель,
	|	ВтШапка.Сдал КАК Сдал,
	|	ВтШапка.СдалДолжность КАК СдалДолжность,
	|	ВтШапка.Принял КАК МОЛ,
	|	ВтШапка.ПринялДолжность КАК ДолжностьМОЛ,
	|	ВтШапка.ДоговорДата,
	|	ВтШапка.ДоговорНомер
	|ИЗ
	|	ВтШапка КАК ВтШапка
	|;
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемкаТовары.Ссылка КАК Ссылка,
	|	ПриемкаТовары.Склад КАК Склад,
	|	ЛОЖЬ КАК ПредварительныйРасчет,
	|	НЕОПРЕДЕЛЕНО КАК ИсточникИнформацииОЦенахДляПечати,
	|	ПРЕДСТАВЛЕНИЕ(ПриемкаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(Склады.Подразделение) КАК ПредставлениеПодразделения,
	|	ВтШапка.Организация КАК Поклажедержатель,
	|	"""" КАК ОсобыеОтметки,
	|	"""" КАК УсловияХранения,
	|	ВтШапка.Сдал КАК Сдал,
	|	ВтШапка.СдалДолжность КАК СдалДолжность,
	|	ВтШапка.Принял КАК МОЛ,
	|	ВтШапка.ПринялДолжность КАК ДолжностьМОЛ
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение.Товары КАК ПриемкаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК ВтШапка
	|		ПО ВтШапка.Ссылка = ПриемкаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ПриемкаТовары.Склад = Склады.Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ
	|	ПриемкаТовары.Ссылка КАК Ссылка,
	|	ПриемкаТовары.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ПриемкаТовары.Номенклатура.Артикул
	|		ИНАЧЕ ПриемкаТовары.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатураКод,
	|	ПриемкаТовары.Номенклатура КАК Номенклатура,
	|	ПриемкаТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПриемкаТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКод,
	|	ПриемкаТовары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ВидУпаковки,
	|
	|	ВЫБОР
	|		КОГДА ВтШапка.ДокументВВалютеРеглУчета
	|			ТОГДА ПриемкаТовары.Сумма
	|		ИНАЧЕ ЕСТЬNULL(СуммыДокументовВВалютахУчета.СуммаБезНДСРегл, 0)
	|	КОНЕЦ Сумма,
	|	
	|	ВЫБОР
	|		КОГДА ВтШапка.ДокументВВалютеРеглУчета
	|			ТОГДА ПриемкаТовары.Цена
	|		КОГДА ЕСТЬNULL(СуммыДокументовВВалютахУчета.СуммаБезНДСРегл, 0) > 0
	|			ТОГДА СуммыДокументовВВалютахУчета.СуммаБезНДСРегл/ПриемкаТовары.КоличествоУпаковок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение.Товары КАК ПриемкаТовары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК ВтШапка
	|		ПО ПриемкаТовары.Ссылка = ВтШапка.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|		ПО ПриемкаТовары.Ссылка              = СуммыДокументовВВалютахУчета.Регистратор
	|		 И ПриемкаТовары.ИдентификаторСтроки = СуммыДокументовВВалютахУчета.ИдентификаторСтроки
	|		 И СуммыДокументовВВалютахУчета.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "ПриемкаТовары.Упаковка", "ПриемкаТовары.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "ПриемкаТовары.Упаковка", "ПриемкаТовары.Номенклатура"));
			

	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",          МассивРезультатов[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоСкладам",        МассивРезультатов[2]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", МассивРезультатов[3]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоОшибкам",        Неопределено);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

//++ НЕ УТКА

// Функция получает данные для формирования печатной формы  М-4
	// 
// Параметры:
//	ПараметрыПечати - Структура
//	МассивОбъектов - Массив из ДокументСсылка.ПриемкаТоваровНаХранение - Массив ссылок на документы, 
//																		по которым необходимо получить данные.
//
// Возвращаемое значение:
// 	Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоСкладам - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//
Функция ПолучитьДанныеДляПечатнойФормыМ4(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Дата   КАК Дата,
	|	ДанныеДокументов.Валюта КАК Валюта
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	ПриемкаТоваровНаХранение.Ссылка                     КАК Ссылка,
	|	ПриемкаТоваровНаХранение.Номер                      КАК Номер,
	|	ПриемкаТоваровНаХранение.Дата                       КАК Дата,
	|	ПриемкаТоваровНаХранение.Дата                       КАК ДатаСоставления,
	|	ПриемкаТоваровНаХранение.НомерВходящегоДокумента    КАК НомерСопроводительногоДокумента,
	|	ПриемкаТоваровНаХранение.Контрагент                 КАК Поставщик,
	|	ПриемкаТоваровНаХранение.Организация                КАК Организация,
	|	ПриемкаТоваровНаХранение.Организация.Префикс        КАК Префикс,
	|	ПриемкаТоваровНаХранение.БанковскийСчетОрганизации  КАК БанковскийСчетОрганизации,
	|	ВЫБОР
	|		КОГДА ПриемкаТоваровНаХранение.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПриемкаТоваровНаХранение.Организация
	|		ИНАЧЕ ПриемкаТоваровНаХранение.Грузоотправитель
	|	КОНЕЦ                                               КАК Грузоотправитель,
	|	ПриемкаТоваровНаХранение.Подразделение              КАК Подразделение,
	|	ПриемкаТоваровНаХранение.Подразделение.Наименование КАК ПредставлениеПодразделения,
	|	ПриемкаТоваровНаХранение.Валюта                     КАК Валюта,
	|	ПриемкаТоваровНаХранение.Принял                     КАК МОЛ,
	|	ПриемкаТоваровНаХранение.ПринялДолжность            КАК ДолжностьМОЛ,
	|	ПриемкаТоваровНаХранение.Сдал                       КАК МОЛСдал,
	|	ПриемкаТоваровНаХранение.СдалДолжность              КАК ДолжностьМОЛСдал
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение КАК ПриемкаТоваровНаХранение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ПриемкаТоваровНаХранение.Ссылка = ДанныеДокументов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                                          КАК Ссылка,
	|	ТаблицаТоваров.Склад                                           КАК Склад,
	|	ТаблицаТоваров.Склад.Наименование                              КАК СкладНаименование,
	|	ТаблицаТоваров.Номенклатура                                    КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.НаименованиеПолное                 КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ТаблицаТоваров.Номенклатура.Артикул
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура.Код
	|	КОНЕЦ                                                          КАК ТоварКод,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Представление                  КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Код                            КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТоваров.Характеристика.НаименованиеПолное               КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Упаковка
	|	КОНЕЦ                                                          КАК Упаковка,
	|	ТаблицаТоваров.КоличествоУпаковок                              КАК Количество,
	|	ТаблицаТоваров.КоличествоУпаковок                              КАК КоличествоПринято,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Количество <> 0
	|			ТОГДА ТаблицаТоваров.Сумма / ТаблицаТоваров.КоличествоУпаковок
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                          КАК Цена,
	|	ТаблицаТоваров.Сумма                                           КАК СуммаБезНДС,
	|	0                                                              КАК СуммаНДС,
	|	ТаблицаТоваров.Сумма                                           КАК СуммаСНДС,
	|	ЛОЖЬ                                                           КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТоваров.НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка, Склад
	|";
	
	Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"&ТекстЗапросаКоэффициентУпаковки",
						Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
							"ТаблицаТоваров.Упаковка", "ТаблицаТоваров.Номенклатура"));
			
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти", МассивРезультатов[0], МассивРезультатов[1]);
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Валюта.
//
//	ПересчитыватьВВалютуРегл - Булево - Признак необходимости пересчета сумм табличной части в валюте регламентированного учета.
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПересчитыватьВВалютуРегл = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка             КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура       КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика     КАК Характеристика,
	|	ТаблицаДокумента.Количество         КАК Количество,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Сумма              КАК Сумма,
	|	ТаблицаДокумента.Упаковка           КАК Упаковка,
	|	&ТекстЗапросаЕдиницаИзмерения       КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.Склад              КАК Склад
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение.Товары КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|ГДЕ
	|	ДанныеДокументов.Валюта = ТаблицаДокумента.Ссылка.Организация.ВалютаРегламентированногоУчета
	|	ИЛИ (НЕ &ПересчитыватьВВалютуРегл)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                   КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                              КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                             КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                           КАК Характеристика,
	|	ТаблицаДокумента.Количество                               КАК Количество,
	|	ТаблицаДокумента.КоличествоУпаковок                       КАК КоличествоУпаковок,
	|	ЕСТЬNULL(СуммыДокументовВВалютахУчета.СуммаБезНДСРегл, 0) КАК Сумма,
	|	ТаблицаДокумента.Упаковка                                 КАК Упаковка,
	|	&ТекстЗапросаЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.Склад                                    КАК Склад
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение.Товары КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|		ПО ТаблицаДокумента.Ссылка              = СуммыДокументовВВалютахУчета.Регистратор
	|		 И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютахУчета.ИдентификаторСтроки
	|		 И СуммыДокументовВВалютахУчета.Активность
	|ГДЕ
	|	ДанныеДокументов.Валюта <> ТаблицаДокумента.Ссылка.Организация.ВалютаРегламентированногоУчета
	|	И &ПересчитыватьВВалютуРегл
	|";
	
	Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"&ТекстЗапросаЕдиницаИзмерения",
						Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
							"Ссылка", "ТаблицаДокумента.Упаковка", "ТаблицаДокумента.Номенклатура"));
	
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл", ПересчитыватьВВалютуРегл);
	
	Запрос.Выполнить();
	
КонецПроцедуры

//-- НЕ УТКА

//-- Локализация
#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстыОтражения = Новый Массив;
	
	//++ Локализация
	
	ТекстыОтражения.Добавить(ТекстПриемНаОтветХранение());
	
	//-- Локализация
	
	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

// Заполняет массив допустимых наименований входящих документов.
//
// Параметры:
//  МассивНаименований	 - Массив - массив наименования входящих документов.
//
Процедура ДополнитьНаименованияВходящихДокументов(МассивНаименований) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	РеглУчетПроведениеСервер.ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

//++ НЕ УТ

#Область ФрагментыПроводокРеглУчета

Функция ТекстПриемНаОтветХранение()
	
	ТекстПриемНаОтветХранение = "
	|ВЫБРАТЬ //// ПриемНаОтветХранение                    // (Дт 002, 003 :: Кт )
	|	Строки.Ссылка КАК Ссылка,
	|	Строки.Период КАК Период,
	|	Строки.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаЗабалансовая КАК Сумма,
	|	Строки.СуммаЗабалансоваяУУ КАК СуммаУУ,
	|
	|	ВЫБОР
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку) И НЕ Строки.ПроизводственныеЗатраты
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.МатериалыПринятыеВПереработку)
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|			И Строки.ПроизводственныеЗатраты И Строки.Склад Ссылка Справочник.Склады
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.МатериалыПринятыеВПереработкуВПроизводстве)
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|			И Строки.ПроизводственныеЗатраты
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.МатериалыПотребленныеВПроизводстве)
	|		КОГДА Строки.ПроизводственныеЗатраты И Строки.Склад Ссылка Справочник.Склады
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВПроизводстве)
	|		КОГДА Строки.ПроизводственныеЗатраты
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦПотребленныеВПроизводстве)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦНаСкладах)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	Строки.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	Строки.Склад КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	Строки.ПодразделениеАналитики КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ВЫБОР
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		ТОГДА Строки.Контрагент
	|		ИНАЧЕ Строки.Номенклатура
	|	КОНЕЦ КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		ТОГДА Строки.Номенклатура
	|		ИНАЧЕ Строки.Контрагент
	|	КОНЕЦ КАК СубконтоДт2,
	|	Строки.Склад КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	ВЫБОР
	|		КОГДА Строки.ВидСчета В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.МатериалыПотребленныеВПроизводстве),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦПотребленныеВПроизводстве))
	|		ТОГДА 0
	|		ИНАЧЕ Строки.Количество
	|	КОНЕЦ КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Прием товаров на ответственное хранение"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|
	|ГДЕ
	|	Строки.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение),
	|							ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи),
	|							ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку))
	|";
	Возврат ТекстПриемНаОтветХранение;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

//-- Локализация

#КонецОбласти
