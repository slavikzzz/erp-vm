#Область ПрограммныйИнтерфейс

// Возвращает признак доступности плана обмена, для базовой или проф версии.
// Параметры:
//  ПланОбмена - ПланОбменаОбъект - Объект плана обмена. 
// Возвращаемое значение:
//  Булево - признак доступности.
//
Функция ЭтоСозданиеУзлаОбмена(ПланОбмена) Экспорт
	
	РезультатПроверки = Истина;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		РезультатПроверки = ДоступностьПланаОбменаВБазовойВерсии(ПланОбмена.Метаданные().Имя);
		
	КонецЕсли;
	
	Если НЕ РезультатПроверки Тогда
		
		ИмяСобытия = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными();
		СообщениеОбОшибке = НСтр("ru = 'Нельзя записать настройки синхронизации данных из-за того, 
			|что включено использование исправительных документов (сторнирование).';
			|en = 'Cannot save data synchronization settings due to
			|the use of correction documents (reversal).'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , СообщениеОбОшибке);
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает признак доступности плана обмена, для базовой или проф версии
//
// Параметры:
//   ПланОбмена - ОбъектМетаданных - Метаданные плана обмена, возможность создания которого необходимо проверить.
//
// Возвращаемое значение:
//   Булево - Истина, если узел плана обмена возможно создать в данной версии конфигурации.
//
Функция ПроверкаВозможностиСозданияУзлаОбмена(ПланОбмена) Экспорт
	
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат ДоступностьПланаОбменаВБазовойВерсии(ПланОбмена.Имя);
	КонецЕсли;

	СведенияОбОбменах = ОбщиеСведенияОНастроенныхОбменах();
	
	Если СведенияОбОбменах.ОбменED Или СведенияОбОбменах.ОбменXML 
		И ПолучитьФункциональнуюОпцию("ИспользоватьИсправлениеДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Возврат Истина;
	
КонецФункции

// Блокирует изменение настроек узла плана обмена
// в подчиненном узле распределенной информационной базы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форму, элементы который необходимо заблокировать.
//
Процедура УстановитьДоступностьНастроекУзлаИнформационнойБазы(Форма) Экспорт
	
	Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
	
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаПояснениеБлокировки",
			"Видимость",
			Истина);

		Для Каждого ЭлементФормы Из Форма.Элементы Цикл
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					ЭлементФормы.Имя,
					"Доступность",
					Ложь);
					
			КонецЕсли;
				
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сведения о том, какие типы обменов настроены.
//
// Возвращаемое значение:
//   Структура:
//       * ОбменРИБ     - Булево - используются обмены РИБ
//       * ОбменED      - Булево - используются обмены в формате EnterpriseData
//       * ОбменXML     - Булево - используются обмены по правилам xml.
//
Функция ОбщиеСведенияОНастроенныхОбменах() Экспорт

	Сведения = Новый Структура();
	Сведения.Вставить("ОбменРИБ", Ложь);
	Сведения.Вставить("ОбменED",  Ложь);
	Сведения.Вставить("ОбменXML", Ложь);
	
	//++ Локализация
	ПланыОбменаБСП = ОбменДаннымиСервер.УзлыОбменаБСП();
	
	Для Каждого ПланОбменаБСП Из ПланыОбменаБСП Цикл
		
		Если ПланОбменаБСП.УзелИнформационнойБазы.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
			Сведения.ОбменРИБ = Истина;
		ИначеЕсли ОбменДаннымиСервер.ЭтоПланОбменаXDTO(ПланОбменаБСП.УзелИнформационнойБазы) Тогда
			Сведения.ОбменED = Истина;
		Иначе
			//++ НЕ УТ
			Если ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбменУправлениеПредприятиемДокументооборот20
			//++ НЕ УТКА
				Или ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбменУправлениеПредприятиемДокументооборот
				Или ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбновлениеЧерезКопию
			//-- НЕ УТКА
			Тогда
				Продолжить;
			КонецЕсли;
			//-- НЕ УТ
			Сведения.ОбменXML = Истина;
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
	
	Возврат Сведения;

КонецФункции

// Создает список доступных для создания планов обмена
Процедура СписокПлановОбмена(ПланыОбменаПодсистемы) Экспорт
	
	//++ Локализация
	ОбменДаннымиЛокализация.ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	//-- Локализация
	
КонецПроцедуры

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	Возврат "УправлениеПредприятием";
КонецФункции

// Обработчик регистрации изменений для начальной выгрузки данных.
// Используется для переопределения стандартной обработки регистрации изменений.
// При стандартной обработке будут зарегистрированы изменения всех данных из состава плана обмена.
// Если для плана обмена предусмотрены фильтры ограничения миграции данных,
// то использование этого обработчика позволит повысить производительность начальной выгрузки данных.
// В обработчике следует реализовать регистрацию изменений с учетом фильтров ограничения миграции данных.
// Если для плана обмена используются ограничения миграции по дате или по дате и организациям,
// то можно воспользоваться универсальной процедурой
// ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям.
// Обработчик используется только для универсального обмена данными с использованием правил обмена
// и для универсального обмена данными без правил обмена и не используется для обменов в РИБ.
// Использование обработчика позволяет повысить производительность
// начальной выгрузки данных в среднем в 2-4 раза.
//
// Параметры:
//   Получатель           - ПланОбменаСсылка - Узел плана обмена, в который требуется выгрузить данные.
//   СтандартнаяОбработка - Булево           - В данный параметр передается признак выполнения стандартной (системной) обработки
//                                             события. Если в теле процедуры-обработчика установить данному параметру значение Ложь, 
//                                             стандартная обработка события производиться не будет. Отказ от стандартной обработки
//                                             не отменяет действие. Значение по умолчанию - Истина.
//   Отбор                - Структура        - Структура содержащая данные отбора.
//
Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
			|ДатаНачалаВыгрузкиДокументов, 
			|Организации, 
			|ВыгружатьУправленческуюОрганизацию,
			|ПравилаОтправкиСправочников,
			|ПравилаОтправкиДокументов,
			|ВариантНастройки");
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям,
			ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
			
		Если Организации = Неопределено
			И Не ЗначенияРеквизитов.ВыгружатьУправленческуюОрганизацию Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Организации.Ссылка КАК Организация
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ПометкаУдаления = ЛОЖЬ
				|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
				|
				|СГРУППИРОВАТЬ ПО
				|	Организации.Ссылка");
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ПравилаОтправкиСправочников <> "НеСинхронизировать"
			Или ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
			
			Если Отбор = Неопределено Тогда
				
				Отбор = Новый Массив();
				ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
				СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
				
				Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
				
					Если ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) Тогда
						
						МетаданныеЭлементаСоставаПланаОбмена = ЭлементСоставаПланаОбмена.Метаданные; // ОбъектМетаданных
						
						Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
							Или (ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости"
							И МетаданныеЭлементаСоставаПланаОбмена.Имя = "Организации") Тогда
							Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						КонецЕсли;
						
					ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
						
						Если ЗначенияРеквизитов.ВариантНастройки = "ОбменУПРМК"
							И ЭлементСоставаПланаОбмена.Метаданные <> Метаданные.Документы.УстановкаЦенНоменклатуры Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
							Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						КонецЕсли;
						
					ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ЭлементСоставаПланаОбмена.Метаданные) Тогда
						
						Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
							Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Отбор.Количество() = 0 Тогда
					Отбор = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбменДаннымиСобытияУТУП.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель, 
				ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
				Организации,
				Отбор);
			
		КонецЕсли;
	//++ Локализация

	//++ НЕ УТКА
	ИначеЕсли ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.ОбменУправлениеПредприятиемЗарплатаИУправлениеПерсоналом25") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
																					|ДатаНачалаВыгрузкиДокументов, 
																					|Организации");
																					
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
		
		ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям( Получатель, 
																					ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, 
																					Организации, 
																					Отбор);
	//-- НЕ УТКА

	//-- Локализация
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия действующих обменов, использующих формирование договоров по заказам.
// 
// Возвращаемое значение:
//  Булево - признак наличия узлов.
//
Функция ЕстьОбменыСФормированиемДоговоровПоЗаказам() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Информирует пользователя о запрете создания или изменения объекта в этой 
// информационной базе.
//
// Параметры:
//   Объект - ДокументОбъект - Документ который проверяется на возможность создания в подчиненном узле 
//                             распределенной информационной базы.
//   Отказ  - Булево - Флаг отказа от создания документа. По умолчанию Ложь.
//
Процедура КонтрольСозданияДокументовВРаспределеннойИБ(Объект, Отказ) Экспорт
	Возврат;
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность редактирования реквизитов
// с помощью экспортной функции ПолучитьБлокируемыеРеквизитыОбъекта.
//
// Параметры:
//   Объекты - Соответствие из КлючИЗначение:
//     * Ключ - Строка - полное имя объекта метаданных, подключенного к подсистеме;
//     * Значение - Строка - пустая строка.
//
// Пример: 
//   Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "");
//
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	//Заглушка
КонецПроцедуры

// Возвращает значение ссылки управленческой организации 
// для настройки отбора, при настройке через внешнее соединение.
//
// Возвращаемое значение:
//  Строка - идентификатор ссылки управленческой организации.
//
Функция СсылкаУправленческойОрганизации() Экспорт
	Возврат ЗначениеВСтрокуВнутр(Справочники.Организации.УправленческаяОрганизация);
КонецФункции

// Объединяет массивы, возвращая результат объединения.
// 
// Возвращаемое значение:
//   Массив - объединенный массив значений.
//
Функция ОбъединитьМассивы(Массив1, Массив2) Экспорт
	
	ОбъединенныйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив1 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив2 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат ОбъединенныйМассив;
	
КонецФункции

#Область ОбщиеПроцедурыИФункцииДляПлановОбменаРИБ

Функция РегистрыДляСозданияЗаданийКРасчетуСебестоимости() Экспорт
	
	ТипыРегистров = Новый Массив();
	//++ Локализация
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииПроизводственныхЗатрат"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииРасходовНаСебестоимостьТоваров"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииТоваровОрганизаций"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииТоваровПереданныеНаКомиссию"));
	//-- Локализация
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииПрочихРасходов"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.МатериалыИРаботыВПроизводстве"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПрочиеРасходы"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.СебестоимостьТоваров"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыКОформлениюОтчетовКомитенту"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыОрганизаций"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыОрганизацийКПередаче"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыПереданныеНаКомиссию"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСКлиентами() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоДокументам"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСПоставщиками() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоДокументам"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляПроверкиБлокировкиЗакрытияМесяца() Экспорт
	
	Возврат Метаданные.ПодпискиНаСобытия.ЗаданияКЗакрытиюМесяцаПередЗаписью.Источник.Типы();
	
КонецФункции

//++ НЕ УТ

// Объекты для формирования заданий по ОС и НМА.
// 
// Возвращаемое значение:
//  Массив из ОбъектМетаданных
//
Функция ВходящиеДанныеДляФормированияЗаданийОСВНМА() Экспорт
	
	ВходящиеДанные = Новый Массив;
	
	ВходящиеДанные.Добавить(Метаданные.Документы.ИзменениеУсловийДоговораАренды);
	ВходящиеДанные.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС);
	ВходящиеДанные.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииНМА);
	ВходящиеДанные.Добавить(Метаданные.Документы.МодернизацияОС2_4);
	ВходящиеДанные.Добавить(Метаданные.Документы.ПеремещениеОС2_4);
	ВходящиеДанные.Добавить(Метаданные.Документы.ПеремещениеНМА2_4);
	ВходящиеДанные.Добавить(Метаданные.Документы.ПереоценкаОС2_4);
	ВходящиеДанные.Добавить(Метаданные.Документы.ПереоценкаНМА2_4);
	ВходящиеДанные.Добавить(Метаданные.Документы.СписаниеОС2_4);
	ВходящиеДанные.Добавить(Метаданные.Документы.СписаниеНМА2_4);
	
	Возврат ВходящиеДанные;
	
КонецФункции
//-- НЕ УТ

// Метод создает задания, для последующего расчета оффлайновых регистров (себестоимость, взаиморасчеты и т.д.).
//
// Параметры:
//  ПолученныеДанные - РегистрНакопленияНаборЗаписей - Полученный набор записей регистра накопления, 
//                                                     на основании которого необходимо создать задания.
//  ИмяРегистраДляСозданияЗаписи - Строка - Имя оффлайн регистра.
// 
Процедура СоздатьЗаданияКРасчетуОффлайновыхРегистров(ПолученныеДанные, ИмяРегистраДляСозданияЗаписи) Экспорт
	
	ДокументЗадания = ПолученныеДанные.Отбор.Регистратор.Значение;
	
	// Задания для расчета полученных данных
	ТаблицаНабора = Новый ТаблицаЗначений();
	ТаблицаНабора.Колонки.Добавить("Период");
	
	Если ПолученныеДанные.Количество() > 0 Тогда
		
		ТаблицаНабора = ПолученныеДанные.Выгрузить();
		ТаблицаНабора.Свернуть("Период");
		
		Для Каждого СтрокаТаблицы Из ТаблицаНабора Цикл
			СтрокаТаблицы.Период = НачалоМесяца(СтрокаТаблицы.Период);
			РегистрыСведений[ИмяРегистраДляСозданияЗаписи].СоздатьЗаписьРегистра(СтрокаТаблицы.Период, ДокументЗадания);
		КонецЦикла;
		
	КонецЕсли;
	
	// Задания для перерасчета имеющихся в базе данных
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВыбираемыйРегистр.Период, МЕСЯЦ) КАК ПериодЗадания
		|ИЗ
		|	&ИмяРегистра КАК ВыбираемыйРегистр
		|ГДЕ
		|	ВыбираемыйРегистр.Регистратор = &Регистратор");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистра", "РегистрНакопления." + ПолученныеДанные.Метаданные().Имя);
	Запрос.УстановитьПараметр("Регистратор", ДокументЗадания);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТаблицаНабора.Найти(Выборка.ПериодЗадания, "Период") = Неопределено Тогда
			РегистрыСведений[ИмяРегистраДляСозданияЗаписи].СоздатьЗаписьРегистра(Выборка.ПериодЗадания, ДокументЗадания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает признак доступности плана обмена в базовой версии
// 
// Возвращаемое значение:
//   Булево - проверка ограничений базовой версии.
//
Функция ДоступностьПланаОбменаВБазовойВерсии(ИмяПланаОбмена,СообщатьПользователю = Истина)
	
	КоличествоУзловПланаОбмена = 1;
	СписокДоступныхПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	
	Если СписокДоступныхПлановОбмена.Найти(ИмяПланаОбмена) <> Неопределено
		И ОбменДаннымиСобытия.ВсеУзлыПланаОбмена(ИмяПланаОбмена).Количество() < КоличествоУзловПланаОбмена Тогда
		Возврат Истина;
	Иначе
		Если СообщатьПользователю Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Используются ограничения базовой версии. Выбранный план обмена создать невозможно.';
									|en = 'Restrictions of the base version are used. Cannot create the selected exchange plan.'");
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает запрос, в котором производится попытка получить узлы обменов с "Бухгалтерией Предприятия".
//
// Возвращаемое значение:
//   Запрос - по узлам плана обмена "СинхронизацияДанныхЧерезУниверсальныйФормат".
//
Функция ЗапросУзлыОбменаСБухгалтерией() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел
		|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки В (&МассивВариантов)");

	МассивВариантов = Новый Массив();
	МассивВариантов.Добавить(ОбменДаннымиЛокализация.ИдентификаторНастройкиОбменаБП30());
	МассивВариантов.Добавить(ОбменДаннымиЛокализация.ИдентификаторНастройкиОбменаБПКОРП30());
	МассивВариантов.Добавить("ОбменУниверсальный");
	Запрос.УстановитьПараметр("МассивВариантов", МассивВариантов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает выборку запроса с узлами, где дата начала выгрузки раннее, чем дата сверки.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса - выборка узлов плана обмена "СинхронизацияДанныхЧерезУниверсальныйФормат".
//
Функция УзлыПлановОбменаСДатойНачалаВыгрузкиРаньшеЧемДатаСвертки(ДатаСвертки) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	УФ.Ссылка,
	|	УФ.ДатаНачалаВыгрузкиДокументов,
	|	УФ.ПометкаУдаления
	|ПОМЕСТИТЬ УзлыОбмена
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК УФ
	|ГДЕ
	|	УФ.Ссылка <> &ЭтотУзелУФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УзлыОбмена.Ссылка
	|ИЗ
	|	УзлыОбмена КАК УзлыОбмена
	|ГДЕ
	|	УзлыОбмена.ДатаНачалаВыгрузкиДокументов <= &ДатаСвертки");
			
	Запрос.УстановитьПараметр("ДатаСвертки", ДатаСвертки);
	Запрос.УстановитьПараметр("ЭтотУзелУФ",  ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел());
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаУзлов;
	
КонецФункции

#КонецОбласти
