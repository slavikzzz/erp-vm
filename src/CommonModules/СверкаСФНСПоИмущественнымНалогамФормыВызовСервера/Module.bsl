
#Область ПрограммныйИнтерфейс

// Формирует и заполняет специальные параметры переданной навигационной ссылки.
// 
// Параметры:
//  НавигационнаяСсылка - Строка -
//  ОбщиеПараметры - Структура - ПараметрыНавигационныхСсылок.ОбщиеПараметры
// См. СверкаСФНСПоИмущественнымНалогамФормы.НовыеПараметрыНавигационныхСсылок.
// 
// Возвращаемое значение:
//  Структура -- в структуре всегда есть свойство:
// 		* Выполнено - Булево - признак "выполнения" ссылки,
// 								т.е. наличие записанного объекта по ссылке.
Функция СпециальныеПараметрыНавигационнойСсылки(НавигационнаяСсылка, ОбщиеПараметры) Экспорт

	СпециальныеПараметры = СверкаСФНСПоИмущественнымНалогамФормы.НовыеСпециальныеПараметрыНавигационнойСсылки();

	// Признаком выполнения некоторых действий по ссылкам считаем наличие уведомления с видом,
	// указанным в шаблоне.
	УсловиеВидУведомления = ОбщиеПараметры.УсловияПоВидуУведомления[НавигационнаяСсылка];
	// Выполнение действия по ссылке может оцениваться по прочему условию.
	ПрочееУсловие = ОбщиеПараметры.ПрочиеУсловия[НавигационнаяСсылка];

	Если УсловиеВидУведомления <> Неопределено Тогда 

		// Поищем уведомления нужного вида в году, следующим за отчетным
		КонецСледующегоГодаПослеОтчетного = Дата(Год(ОбщиеПараметры.НалоговыйПериод) + 1, 12, 31);
		АктуальныеУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.АктуальныеУведомления(
			ОбщиеПараметры.Организация,
			УсловиеВидУведомления,
			КонецСледующегоГодаПослеОтчетного,
			Перечисления.Периодичность.Год,
			ОбщиеПараметры.ИФНС);

		СпециальныеПараметры.Выполнено = (АктуальныеУведомления <> Неопределено); 

	ИначеЕсли ПрочееУсловие = "ЕстьДокументДоначисления" Тогда
		
		// Текст запроса ниже модифицируется в части условий виртуальной таблицы
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОбороты.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет = &Счет,
		|		&СубконтоВидПлатежаИФНС, Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам))
		|	И &УсловиеИФНС,,) КАК ХозрасчетныйОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОбороты.Период,
		|	ХозрасчетныйОбороты.Регистратор";
		
		// Доначисление налога ожидаем в следующем году после отчетного 
		НачалоПериода = КонецГода(ОбщиеПараметры.НалоговыйПериод) + 1;
		КонецПериода = КонецГода(НачалоПериода);
		
		Если ОбщиеПараметры.ЭтоТранспортныйНалог Тогда
			Счет = ПланыСчетов.Хозрасчетный.ТранспортныйНалог;
		ИначеЕсли ОбщиеПараметры.ЭтоНалогНаИмущество Тогда
			Счет= ПланыСчетов.Хозрасчетный.НалогНаИмущество;
		ИначеЕсли ОбщиеПараметры.ЭтоЗемельныйНалог Тогда
			Счет = ПланыСчетов.Хозрасчетный.ЗемельныйНалог;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		СубконтоВидПлатежаИФНС = Новый Массив;
		СубконтоВидПлатежаИФНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			СубконтоРегистрацияВНалоговомОргане = Ложь; 
			
			СубконтоРегистрацияВНалоговомОргане = СвойстваСчета["ВидСубконто" + Ном] 
													= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане;
			
			Если СубконтоРегистрацияВНалоговомОргане Тогда
				СубконтоВидПлатежаИФНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане);
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИФНС", "Субконто2 = &ИФНС");
				Запрос.УстановитьПараметр("ИФНС", ОбщиеПараметры.ИФНС);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Если на счете нет субконто РегистрацияВНалоговомОргане, то убираем условие по ИФНС.
		// В ином случае это условие уже скорректировано выше.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеИФНС", "");
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("Счет", Счет);
		Запрос.УстановитьПараметр("СубконтоВидПлатежаИФНС", СубконтоВидПлатежаИФНС);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		СпециальныеПараметры.Выполнено = (Не РезультатЗапроса.Пустой());
		
		Если Не РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДокументДоначисления = Выборка.Ссылка;
			
			СпециальныеПараметры.Вставить("ИмяФормы", "Документ." + ДокументДоначисления.Метаданные().Имя + ".ФормаСписка");

			ПараметрыФормы = Новый Структура;
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОбщиеПараметры.Организация);
			
			ПараметрыФормы.Вставить("Отбор", Отбор);
			ПараметрыФормы.Вставить("ТекущаяСтрока", ДокументДоначисления);
			СпециальныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;

	// Действия, у которых не указаны условия выполнения, всегда помечаем как невыполненные
	Возврат СпециальныеПараметры;

КонецФункции

// Представление налога родительный падеж.
// Определяет краткое представление налога в родительном падеже.
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов - Налог
// 
// Возвращаемое значение:
//  Строка - Представление налога родительный падеж
Функция ПредставлениеНалогаРодительныйПадеж(Налог) Экспорт
	
	Если Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество") Тогда
		Возврат НСтр("ru = 'налога на имущество';
					|en = 'property tax'");
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог") Тогда
		Возврат НСтр("ru = 'транспортного налога';
					|en = 'vehicle tax'");
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ЗемельныйНалог") Тогда
		Возврат НСтр("ru = 'земельного налога';
					|en = 'land value tax'");
	Иначе
		Возврат НСтр("ru = 'налога';
					|en = 'tax'");
	КонецЕсли;
	
КонецФункции

// Возвращает текстовое содержимое файлов с расчетом имущественных налогов, приложенных к сообщению.
// Используется для передачи в метод визуализации расчетов в читаемом виде.
//
// Параметры:
//  Сообщение - СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов - входящее сообщение ФНС, к которому
//              приложен(-ы) файл(-ы) с расчетом налога(-ов).
// 
// Возвращаемое значение:
//  Массив из Строка - массив текстовых представлений содержимого xml-файлов
//
Функция СодержаниеВложенийСообщения(Сообщение) Экспорт 

	СодержаниеВложений = Новый Массив;

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Вложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Сообщение);

	Для Каждого Вложение Из Вложения Цикл

		Если Не СтрЗаканчиваетсяНа(Вложение.ИмяФайла, ".xml") Тогда
			Продолжить;
		КонецЕсли;

		Если Не СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ЭтоФайлРасчетаТранспортногоНалога(Вложение.ИмяФайла)
			 И Не СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ЭтоФайлРасчетаЗемельногоНалога(Вложение.ИмяФайла)
			 И Не СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ЭтоФайлРасчетаИмущественныхНалогов(Вложение.ИмяФайла) Тогда
			Продолжить;
		КонецЕсли;

		СодержаниеВложений.Добавить(Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.ТекстСообщения(Вложение.Данные));

	КонецЦикла;

	Возврат СодержаниеВложений;

КонецФункции
 
// Список расчетов из сообщения.
// 
// Параметры:
//  Сообщение - СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов - входящее сообщение ФНС, к которому
// 																				 приложены файлы с расчетом налогов.
// 
// Возвращаемое значение:
//  СписокЗначений из Структура - Список расчетов из сообщения.
Функция СписокРасчетовИзСообщения(Сообщение) Экспорт 

	СписокРасчетов = Новый СписокЗначений;

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Вложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Сообщение);
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "Организация");
	ТекстОшибки = "";
	СведенияОРассчитанныхНалогах = СверкаСФНСПоИмущественнымНалогам.СведенияОРассчитанныхНалогахИзФайлов(Вложения,, ТекстОшибки);

	Если СведенияОРассчитанныхНалогах.РассчитанныеНалоги.Количество() = 0 Тогда
		// Если произошла ошибка при чтении файлов, то сообщим об этом
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		// Файл может быть корректный, но в нем нет нужных данных - также прерываем выполнение с показом сообщения
		ВызватьИсключение Нстр("ru = 'В приложенных файлах сообщения не обнаружено расчетов имущественных налогов.';
								|en = 'Property tax calculations are not found in the message attachments.'");
	КонецЕсли;

	ШаблонПредставления = Нстр("ru = '%1 за %2 год (ФНС %3)';
								|en = '%1 for %2 (FTS %3)'");
	Для Каждого Расчет Из СведенияОРассчитанныхНалогах.РассчитанныеНалоги Цикл

		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("КодыНалоговыхОрганов", Расчет.КодыНалоговыхОрганов);
		
		СуществующаяСверка = Документы.СверкаСФНСПоИмущественнымНалогам.НайтиСуществующий(
			Организация,
			Расчет.Налог,
			Расчет.НалоговыйПериод,
			Расчет.КодОтправителя,
			,
			Сообщение);

		Если ЗначениеЗаполнено(СуществующаяСверка) Тогда
			ПараметрыРасчета.Вставить("Ключ", СуществующаяСверка);
		Иначе
			ПараметрыРасчета.Вставить("Организация", Организация);
			ПараметрыРасчета.Вставить("Налог", Расчет.Налог);
			ПараметрыРасчета.Вставить("НалоговыйПериод", Расчет.НалоговыйПериод);
			ПараметрыРасчета.Вставить("КодОтправителя", Расчет.КодОтправителя);
			ПараметрыРасчета.Вставить("СообщениеФНС", Сообщение);
		КонецЕсли; 

		СписокРасчетов.Добавить(ПараметрыРасчета, 
			СтрШаблон(ШаблонПредставления, Расчет.Налог, Формат(Расчет.НалоговыйПериод, "ДФ=yyyy"), Расчет.КодОтправителя));

	КонецЦикла;

	Возврат СписокРасчетов;

КонецФункции

// Из файла с исчисленными суммами имущественных налогов выбирает содержащиеся в нем расчеты налога.
// Под отдельным расчетом налога понимается набор сведений по объектам одной организации, облагаемым
// конкретным налогом за конкретный налоговый период, составленный одним налоговым органом - отправителем этого расчета.
// Иными словами, это порция сведений, которые требуют отдельной сверки.
// 
// Параметры:
//  Файл - Структура - описание файла с расчетом(-ми) налога - содержит:
// 			* Адрес - Строка - адрес файла во временном хранилище или
// 			* Данные - ДвоичныеДанные, ХранилищеЗначения - даные файла
// 			* ИмяФайла - Строка - имя загружаемого файла
//  Отбор - Структура - Отбор - содержит:
//  	* Организация 		- СправочникСсылка.Организации
//  	* Налог				- ПеречислениеСсылка.ВидыИмущественныхНалогов
//  	* НалоговыйПериод	- Дата
// 
// Возвращаемое значение:
//  СписокЗначений из Структура - список выбора расчета - содержит:
// 			* Значение - Структура - параметры формы сверки конкретного расчета налога
// 			* Представление - Строка - представление расчета для показа выбора пользователю.
Функция СписокРасчетовИзФайла(Файл, Отбор = Неопределено) Экспорт 

	СписокРасчетов = Новый СписокЗначений;
	Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Файл);
	ТекстОшибки = "";
	СведенияОРассчитанныхНалогах = СверкаСФНСПоИмущественнымНалогам.СведенияОРассчитанныхНалогахИзФайлов(Файлы, Отбор, ТекстОшибки);

	Если СведенияОРассчитанныхНалогах.РассчитанныеНалоги.Количество() = 0 Тогда
		// Если произошла ошибка при чтении файла, то сообщим об этом
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		// Файл может быть корректный, но в нем нет нужных данных - также прерываем выполнение с показом сообщения
		Если Отбор = Неопределено Тогда
			ТекстОшибки = Нстр("ru = 'В файле не обнаружено расчетов имущественных налогов.';
								|en = 'Property tax calculations are not found in the file.'");
		ИначеЕсли Отбор.Свойство("Налог") Тогда
			Шаблон = Нстр("ru = 'В файле не обнаружено расчета %1%2.';
							|en = 'The %1%2 calculation is not found in the file.'");
			НалогВРодительномПадеже = ПредставлениеНалогаРодительныйПадеж(Отбор.Налог);
			Дополнения = Новый Массив;
			Если Отбор.Свойство("Организация") И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru = ' по организации %1';
													|en = ' for the %1 company'"), Отбор.Организация));
			КонецЕсли;
			Если Отбор.Свойство("НалоговыйПериод") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru = ' за %1 год';
													|en = ' for %1'"), Формат(Отбор.НалоговыйПериод, "ДФ=yyyy")));
			КонецЕсли;
			ТекстОшибки = СтрШаблон(Шаблон, НалогВРодительномПадеже, СтрСоединить(Дополнения));
		Иначе
			Шаблон = Нстр("ru = 'В файле не обнаружено расчетов имущественных налогов%1.';
							|en = 'Property tax calculations %1 are not found in the file.'");
			Дополнения = Новый Массив;
			Если Отбор.Свойство("Организация") И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru = ' по организации %1';
													|en = ' for the %1 company'"), Отбор.Организация));
			КонецЕсли;
			Если Отбор.Свойство("НалоговыйПериод") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru = ' за %1 год';
													|en = ' for %1'"), Формат(Отбор.НалоговыйПериод, "ДФ=yyyy")));
			КонецЕсли;
			ТекстОшибки = СтрШаблон(Шаблон, СтрСоединить(Дополнения));
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ШаблонПредставления = Нстр("ru = '%1 за %2 год (ФНС %3)';
								|en = '%1 for %2 (FTS %3)'");
	Для Каждого Расчет Из СведенияОРассчитанныхНалогах.РассчитанныеНалоги Цикл

		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("КодыНалоговыхОрганов", Расчет.КодыНалоговыхОрганов);

		СуществующаяСверка = Документы.СверкаСФНСПоИмущественнымНалогам.НайтиСуществующий(
			Расчет.Организация,
			Расчет.Налог,
			Расчет.НалоговыйПериод,
			Расчет.КодОтправителя,
			,
			,
			СведенияОРассчитанныхНалогах.ИмяПервогоФайла);

		Если ЗначениеЗаполнено(СуществующаяСверка) Тогда
			ПараметрыРасчета.Вставить("Ключ", СуществующаяСверка);
		Иначе
			ПараметрыРасчета.Вставить("Организация", Расчет.Организация);
			ПараметрыРасчета.Вставить("Налог", Расчет.Налог);
			ПараметрыРасчета.Вставить("НалоговыйПериод", Расчет.НалоговыйПериод);
			ПараметрыРасчета.Вставить("КодОтправителя", Расчет.КодОтправителя);
			ПараметрыРасчета.Вставить("Файл", Файл);
			ПараметрыРасчета.Вставить("ИмяФайла", СведенияОРассчитанныхНалогах.ИмяПервогоФайла);
		КонецЕсли; 
			
		СписокРасчетов.Добавить(ПараметрыРасчета, 
			СтрШаблон(ШаблонПредставления, Расчет.Налог, Формат(Расчет.НалоговыйПериод, "ДФ=yyyy"), Расчет.КодОтправителя));

	КонецЦикла;

	Возврат СписокРасчетов;

КонецФункции

// Функция-посредник для получения на клиенте соответствия категорий ТС классификатору видов ТС,
// используемому в регистрации ТС.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
// * Ключ - Строка - Код вида ТС.
// * Значение - Строка - Номер категории ТС.
Функция КатегорииТСПоКодуВида() Экспорт

	ТаблицаКодовИКатегорий = РасчетИмущественныхНалоговУП.КодыВидовИКатегорииТранспортныхСредств(); // ТаблицаЗначений.
	
	СоответствиеКодовВидаИКатегорий = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаКодовИКатегорий Цикл
		СоответствиеКодовВидаИКатегорий.Вставить(СтрокаТаблицы.КодВида , СтрокаТаблицы.НомерКатегории);
	КонецЦикла; 
	
	Возврат СоответствиеКодовВидаИКатегорий;

КонецФункции

// Формирует наименование объекта налогообложения для конкретного налога. Например, "транспортное средство".
//
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов - налог, которым облагаются основные средства
//  Падеж - Строка - например, "Родительный"
//  ВЕдинственномЧисле - Булево - если Ложь, то возвращается наименование во множественном числе, например "транспортные средства"
//  СБольшойБуквы - Булево - если Истина, то возвращается наименование с большой буквы, например "Транспортные средства"
// 
// Возвращаемое значение:
//  Строка - например, "транспортных средств" или "Земельному участку"
//
Функция НаименованиеОбъектаНалогообложения(Налог, Падеж = "Именительный", ВЕдинственномЧисле = Истина, СБольшойБуквы = Ложь) Экспорт

	ОбъектНалогообложенияСтрокой = "";
	Если Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог") Тогда
		ОбъектНалогообложенияСтрокой = ?(ВЕдинственномЧисле, Нстр("ru = 'транспортное средство';
																	|en = 'vehicle'"), Нстр("ru = 'транспортные средства';
																										|en = 'vehicles'"));
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ЗемельныйНалог") Тогда
		ОбъектНалогообложенияСтрокой = ?(ВЕдинственномЧисле, Нстр("ru = 'земельный участок';
																	|en = 'land plot'"), Нстр("ru = 'земельные участки';
																									|en = 'land plots'"));
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество") Тогда
		ОбъектНалогообложенияСтрокой = ?(ВЕдинственномЧисле, Нстр("ru = 'объект недвижимости';
																	|en = 'real estate'"), Нстр("ru = 'объекты недвижимости';
																									|en = 'real estate objects'"));
	КонецЕсли;

	Если Падеж <> "Именительный" Тогда
		СклоненнаяСтрокаМассив = ПолучитьСклоненияСтроки(
			ОбъектНалогообложенияСтрокой,
			"Л= ru_RU",
			"ПД="+Падеж);
		ОбъектНалогообложенияСтрокой = СклоненнаяСтрокаМассив[0];
	КонецЕсли;

	Если СБольшойБуквы Тогда
		ОбъектНалогообложенияСтрокой = ВРег(Лев(ОбъектНалогообложенияСтрокой, 1)) + Сред(ОбъектНалогообложенияСтрокой, 2);
	КонецЕсли; 
	
	Возврат ОбъектНалогообложенияСтрокой;

КонецФункции

// Определяет дату окончания отчетного периода (последнего предшествующего), за который подается уведомление.
// 
// Параметры:
//  ДатаСообщения - Дата - предполагаемая дата подачи сообщения, обычно дата подписи.
// 
// Возвращаемое значение:
//  Дата - окончания последнего отчетного периода, который предшествует дате уведомления, и за который это уведомление подается.
//
Функция ПоследнийОтчетныйПериодПоДатеУведомления(Знач ДатаСообщения) Экспорт
	
	ДатаСообщения = ?(ЗначениеЗаполнено(ДатаСообщения), ДатаСообщения, ОбщегоНазначения.ТекущаяДатаПользователя());
	Возврат	НачалоДня(НачалоГода(ДатаСообщения)-1); // конец прошлого года
	
КонецФункции 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
Функция НовыеПараметрыУплатыНалогов() Экспорт
	
	ПараметрыУплатыНалогов = Новый Структура;
	ПараметрыУплатыНалогов.Вставить("ВидыНалогов",               Новый Массив); // Массив видов налогов.
	ПараметрыУплатыНалогов.Вставить("ВидыНалоговыхОбязательств", Новый Массив); // Массив видов налогов.
	ПараметрыУплатыНалогов.Вставить("ОтборОплатаЗадолженности",  Неопределено); // По умолчанию отбора нет; если Ложь - только текущие платежи, если Истина - только погашение долга
	
	Возврат ПараметрыУплатыНалогов;
	
КонецФункции 

#КонецОбласти
