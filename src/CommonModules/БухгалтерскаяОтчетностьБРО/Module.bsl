// Модуль содержит программный интерфейс подсистемы работы с бухгалтерской отчетностью БРО -
// для использования в коде заполнения данными прикладного решения.
// Применяется для отчетности, составляемой в соответствии с ФСБУ 4 (начиная с отчетности за 2025 год).

#Область ПрограммныйИнтерфейс

// Содержит имена разделов отчета (в терминологии ФСБУ 4 - "отчетов"), реализованные в программе.
// 
// Возвращаемое значение:
//  Массив из Строка
//
Функция РазделыОтчета() Экспорт
	
	РазделыОтчета = Новый Массив;
	РазделыОтчета.Добавить("Баланс");
	РазделыОтчета.Добавить("ОФР");
	РазделыОтчета.Добавить("ОЦИС");
	РазделыОтчета.Добавить("ОДДС");
	Возврат РазделыОтчета;
	
КонецФункции

// Конструктор коллекции, описывающей период графы отчета (отчетный или сравнительный).
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйПериодОтчета() Экспорт
	
	Период = Новый Структура;
	// Начало периода, за который выбираются данные заполнения.
	// Обычно это дата начала года или дата создания организации.
	Период.Вставить("Начало",    '0001-01-01');
	// Конец периода, за который выбираются данные - отчетного или сравнительного.
	// Для сравнительного периода может передаваться МоментВремениСУточнениемПериода,
	// если в ПриОпределенииСравнительногоПериода указывается значение уточнения периода
	Период.Вставить("Конец",     '0001-01-01');
	Период.Вставить("КонецДата", '0001-01-01');
	Период.Вставить("Заполнен",  Ложь);
	Возврат Период;
	
КонецФункции

// Заполняет (инициализирует) коллекцию НовыйПериодОтчета
//
// Параметры:
//  Период         - НовыйПериодОтчета - заполняемая коллекция
//  НачалоПериода  - Дата
//  КонецПериода   - Дата, МоментВремениСУточнениемПериода
//
Процедура ЗаполнитьПериодОтчета(Период, НачалоПериода, КонецПериода) Экспорт

	Если Не ЗначениеЗаполнено(НачалоПериода) Или Не ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	Период.Заполнен = Истина;
	
	Период.Начало = НачалоПериода;
	Период.Конец  = КонецПериода;
	Если ТипЗнч(Период.Конец) = Тип("МоментВремениСУточнениемПериода") Тогда
		Период.КонецДата = Период.Конец.Дата;
	Иначе
		Период.КонецДата = Период.Конец;
	КонецЕсли;
	
КонецПроцедуры

// Конструктор коллекции, описывающей контекст бухгалтерской отчетности в целом
// 
// Возвращаемое значение:
//  Структура - Новый контекст отчета:
// * Период - Дата - конец периода, за который готовится отчетность (отчетная дата)
// * Организация - СправочникСсылка.Организации
// * ОтчетныйПериод - см. НовыйПериодОтчета
// * СравнительныйПериод - см. НовыйПериодОтчета
//
Функция НовыйКонтекстОтчета() Экспорт
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("Период",              '0001-01-01');
	Контекст.Вставить("Организация",         Справочники.Организации.ПустаяСсылка());
	Контекст.Вставить("ОтчетныйПериод",      НовыйПериодОтчета());
	Контекст.Вставить("СравнительныйПериод", НовыйПериодОтчета());
	
	Возврат Контекст;
	
КонецФункции

// Конструктор коллекции, описывающей контекст заполнения графы отчета - то есть, получения данных за отчетный или за сравнительный период.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйКонтекстЗаполненияОтчета() Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Период",      НовыйПериодОтчета());
	Контекст.Вставить("Организации", Новый Массив); // Из СправочникСсылка.Организации
	Возврат Контекст;
	
КонецФункции

// Описывает тип суммовых значений, применяемых в отчете.
// Длина суммовых значений предопределена форматом ГИРБО - там N(12) для сумм в тысячах рублей.
// 
// Возвращаемое значение:
//  ОписаниеТипов - описание типа сумм.
//
Функция ТипСумма() Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(17, 2, ДопустимыйЗнак.Любой);
КонецФункции

// Описывает графы отчета, соответствующие ячейкам с числовыми значениями показателей.
// 
// Возвращаемое значение:
//  Структура
//    * Ключ: раздел отчета из РазделыОтчета
//    * Значение: Соответствие
//           ** Ключ - индекс периода начиная с отчетного
//           ** Значение - строка, номер графы
//
Функция ГрафыОтчета() Экспорт
	
	ГрафыОтчета = Новый Соответствие;
	
	ДобавитьГрафыОтчетаОбороты(ГрафыОтчета, "ОФР",  "04", "05");
	ДобавитьГрафыОтчетаОбороты(ГрафыОтчета, "ОЦИС", "04", "05");
	ДобавитьГрафыОтчетаОбороты(ГрафыОтчета, "ОДДС", "04", "05");
	
	Возврат ГрафыОтчета;
	
КонецФункции

// Находит все строки коллекции, соответствующие отбору, в том порядке, в котором они содержатся в дереве.
// Метод следует использовать, когда предполагается несколько строк, соответствующих отбору, и их порядок важен для дальнейшей обработки.
//
// Параметры:
//  Коллекция - ТаблицаЗначений, КоллекцияСтрокДереваЗначений
//  Отбор - Структура - отбор строк; Ключ - имя колонки поиска, Значение - искомое значение
//
// Возвращаемое значение:
//  Массив из СтрокаТаблицыЗначений, СтрокаДереваЗначений - найденные строки коллекции Коллекция
//
Функция НайтиСтрокиПоПорядку(Коллекция, Отбор) Экспорт
	
	НеупорядоченныйРезультат = Коллекция.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НеупорядоченныйРезультат) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Сортировщик = Новый ТаблицаЗначений;
	Сортировщик.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Сортировщик.Колонки.Добавить("Значение");
	
	Для Каждого Строка Из НеупорядоченныйРезультат Цикл
		СтрокаПоиска = Сортировщик.Добавить();
		СтрокаПоиска.Индекс = Коллекция.Индекс(Строка);
		СтрокаПоиска.Значение = Строка;
	КонецЦикла;
	
	Сортировщик.Сортировать("Индекс");
	Возврат Сортировщик.ВыгрузитьКолонку("Значение");
	
КонецФункции

#Область ДеревоДанныхРазделов

// См. НовоеДеревоДанныхРазделов() в форме отчета

// На основе подходов в формате ГИРБО все показатели отчета делятся на "фиксированные" и "вписываемые".
//
// "Фиксированные" предполагается использовать, когда отчетность организации совпадает с образцом, приведенным в ФСБУ 4.
// Они предполагают фиксированный (предопределенный) состав показателей отчетности, их наименования и коды.
// Для того, чтобы готовить отчетность, отражающую особенности деятельности предприятия, следует использовать "вписываемые строки".
// Последние позволяют включать в отчет несколько показателей (групп показателей) с одинаковым кодом,
// назначать показателям осмысленные наименования.
//
// Сценарий использования методов раздела:
// 1. С помощью НайтиРаздел находим раздел отчета.
// 2. В этом разделе
//     - обеспечиваем нужное количество вписываемых строк с определенным кодом строки (кодом показателя) - см. СоздатьВписываемыеСтроки
//     либо
//     - находим многострочную часть для хранения вписываемых строк - см. НайтиМногострочнуюЧасть
//     либо
//     - используем фиксированные строки.
//     Для работы с фиксированными строками нужно сначала убедиться, что она подходит - позволяет разместить данные.
//     См. ФиксированнаяСтрокаОтчета.
//     Дальнейшая работа с фиксированной строкой аналогична работе со вписываемыми строками - в частности,
//     в большинство методов можно передавать единообразно вписываемую строку или фиксированную.
// 4. При необходимости обеспечиваем (находим) внутри них строки "в т.ч." - с помощью тех же СоздатьВписываемыеСтроки и НайтиМногострочнуюЧасть.
// 5. Добавить нужное количество строк можно и "вручную" - с помощью ДобавитьСтрокуМногострочнойЧасти
// 6. Для безопасного обращения к строкам отчета по порядку (индексу) можно использовать НайтиСтрокиДереваДанных
// 7. Для установки наименования строки можно использовать УстановитьНаименованиеСтроки
// 8. Для установки значений ячеек в составе строк можно использовать УстановитьЗначениеЯчейки
// 9. Для заполнения расшифровки можно использовать ЗаполнитьРасшифровкуЯчейки

// Находит строку, соответствующую разделу отчета.
//
// Параметры:
//  ДеревоДанныхРазделов - ДеревоЗначений - см. НовоеДеревоДанныхРазделов
//  Раздел - Строка - искомый раздел, см. РазделыОтчета
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов, содержащая данные раздела отчета
//  Неопределено - подходящая строка отсутствует
//
Функция НайтиРаздел(ДеревоДанныхРазделов, Раздел) Экспорт
	
	Отбор = Новый Структура("Тип, Идентификатор", "Раздел", Раздел);
	Поиск = ДеревоДанныхРазделов.Строки.НайтиСтроки(Отбор);
	
	Если Не ЗначениеЗаполнено(Поиск) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Поиск[0];
	
КонецФункции

// Конструктор коллекции, представляющей фиксированную строку отчета.
// См. также ЭтоОписаниеФиксированнойСтроки
// 
// Для хранения фиксированных строк для удобства разработчика не используется более-менее логичная иерархическая структура:
// они хранятся просто набором показателей, подчиненных непосредственно разделу, то есть, не сгруппированы по строкам отчета.
// 
// То есть, в отличие от вписываемых строк, дерево данных не содержит такой строки, которую можно использовать как ссылку на строку в целом.
// Поэтому вводится абстракция, описывающая фиксированную строку.
//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйФиксированнаяСтрокаОтчета() Экспорт
	
	ОписаниеФиксированнойСтроки = Новый Структура;
	ОписаниеФиксированнойСтроки.Вставить("Раздел"); // строка дерева данных
	ОписаниеФиксированнойСтроки.Вставить("Идентификатор",         "");
	ОписаниеФиксированнойСтроки.Вставить("ИдентификаторДляЯчеек", ""); // для удобства разработчика еще и он отличается
	ОписаниеФиксированнойСтроки.Вставить("КодСтроки",             "");
	ОписаниеФиксированнойСтроки.Вставить("МногострочнаяЧасть"); // строка дерева данных, может отсутствовать - тогда Неопределено
	Возврат ОписаниеФиксированнойСтроки;
	
КонецФункции

// Проверяет, что переданное значение соответствует ссылке на фиксированную строку (соответствующей абстракции).
//
// Параметры:
//  Строка - AnyType - любая из абстракций, соответствующая строке отчета в дереве данных разделов
// 
// Возвращаемое значение:
//  Булево - Истина - это фиксированная строка
//         - Ложь - это вписываемая строка
//
Функция ЭтоОписаниеФиксированнойСтроки(Строка) Экспорт
	
	Возврат ТипЗнч(Строка) = Тип("Структура");
	
КонецФункции

// Создает описание фиксированной строки отчета с заданными свойствами.
// При этом не гарантируется, что такая фиксированная строка может быть использована - см. МожноИспользоватьФиксированнуюСтроку.
// 
// Описание можно передавать в методы работы с вписываемыми строками - СоздатьВписываемыеСтроки, НайтиМногострочнуюЧасть, ЯчейкаОтчета и т.п.
//
// Параметры:
//  ОписаниеРаздела -  СтрокаДереваЗначений - см. НайтиРаздел
//  КодСтроки - Строка - код строки (показателя) бухгалтерской отчетности в соответствии с Приложением 10 к ФСБУ 4
// 
// Возвращаемое значение:
//  см. НовыйФиксированнаяСтрокаОтчета - абстрактная ссылка на фиксированную строку
//
Функция ФиксированнаяСтрокаОтчета(ОписаниеРаздела, КодСтроки) Экспорт
	
	ОписаниеСтроки = НовыйФиксированнаяСтрокаОтчета();
	
	ОписаниеСтроки.Раздел                = ОписаниеРаздела;
	ОписаниеСтроки.Идентификатор         = ИдентификаторСтроки(КодСтроки, УровеньФиксированнойСтроки());
	ОписаниеСтроки.ИдентификаторДляЯчеек = ИдентификаторФиксированнойСтрокиДляЯчеек(КодСтроки);
	ОписаниеСтроки.КодСтроки             = КодСтроки;
	ОписаниеСтроки.МногострочнаяЧасть    = НайтиМногострочнуюЧастьФиксированнойСтроки(ОписаниеРаздела, КодСтроки);
	
	Возврат ОписаниеСтроки;
	
КонецФункции

// Проверяет возможность использования фиксированной строки.
// При невозможности использования следует использовать вписываемые строки.
//
// Параметры:
//  Строка - см. НовыйФиксированнаяСтрокаОтчета - проверяемая строка
//  Наименование - Строка - наименование показателя, для которого проверяется возможность использовать фиксированные строки.
//            Для строк с другими наименованиями следует использовать вписываемые строки.
//  ОбязательныПодчиненныеСтроки - Булево - Ложь, если не предполагается использовать подчиненные строки "в т.ч.".
//            Если строки нужны, а дерево данных не предоставляет возможности их хранить, следует использовать вписываемые строки.
// 
// Возвращаемое значение:
//  Истина - можно использовать фиксированную строку
//  Ложь   - нет возможности использовать фиксированную строку, следует использовать вписываемую -
//                 см. СоздатьВписываемыеСтроки, УстановитьНаименованиеСтроки
//
Функция МожноИспользоватьФиксированнуюСтроку(Строка, Наименование, ОбязательныПодчиненныеСтроки = Истина) Экспорт
	
	Если НРег(Наименование) <> НРег(НаименованиеКодаСтроки(Строка.КодСтроки)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбязательныПодчиненныеСтроки И Строка.МногострочнаяЧасть = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обеспечивает набор вписываемых строк (строк "в том числе") заданного размера -
// тиражирование строк многострочной части для дальнейшего заполнения.
// Недостающие строки будут добавлены, лишние удалены (однако, в любом случае останется одна строка для образца).
// Можно применять для
// 1. многострочной части, подчиненной разделу - обеспечит набор вписываемых строк с конкретным кодом строки
// 2. многострочной части, подчиненной фиксированной или вписываемой строке отчета верхнего уровня (группе показателей) -
//    обеспечит набор строк "в т.ч." (показателей в составе группы)
// Количество обеспеченных строк ограничено форматом ГИРБО - см. ЛимитДетализирующихПоказателей, ЛимитВписываемыхПоказателей
//
// Параметры:
//  Родитель - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов: раздел или строка вписываемого показателя.
//                      Раздел можно получить с помощью НайтиРаздел, вписываемые показатели - с помощью НайтиМногострочнуюЧасть.
//           - см. НовыйФиксированнаяСтрокаОтчета - абстрактная ссылка на фиксированный показатель.
//                      Ее можно получить с помощью ФиксированнаяСтрокаОтчета
//  Количество - Число - потребное количество строк
//  КодСтрокиРаздела - Строка - код строки бухгалтерской отчетности (передается, если в качестве Родитель передана вписываемая строка раздела)
// 
// Возвращаемое значение:
//  - Массив из СтрокаДереваЗначений - строки коллекции НовоеДеревоДанныхРазделов (с типом Строка),
//               соответствующие строкам многострочной части, в порядке их следования в дереве.
//               Предполагается, что к строкам можно обращаться по индексу, коррелированному с Количество.
//  - Неопределено - запрошенная многострочная часть отсутствует
//
Функция СоздатьВписываемыеСтроки(Родитель, Знач Количество, КодСтрокиРаздела = Неопределено) Экспорт
	
	МногострочнаяЧасть = НайтиМногострочнуюЧасть(Родитель, КодСтрокиРаздела);
	Если МногострочнаяЧасть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Лимит = 0;
	Если ЭтоОписаниеФиксированнойСтроки(Родитель) Тогда
		Лимит = ЛимитДетализирующихПоказателей(Родитель.Раздел.Идентификатор);
	ИначеЕсли Родитель.Тип = "Раздел" Тогда
		Лимит = ЛимитВписываемыхПоказателей();
	ИначеЕсли Родитель.Тип = "Строка" Тогда
		ОписаниеРаздела = РазделДереваДанных(Родитель);
		Если ОписаниеРаздела <> Неопределено Тогда
			Лимит = ЛимитДетализирующихПоказателей(ОписаниеРаздела.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Количество = Мин(Лимит, Количество);
	
	Строки = НайтиСтрокиДереваДанных(МногострочнаяЧасть, Новый Структура("Тип", "Строка"));
	
	РазностьСтрок = Количество - Строки.Количество();
	
	Для УсловныйНомерДобавляемойСтроки = 1 По РазностьСтрок Цикл
		Строки.Добавить(ДобавитьСтрокуМногострочнойЧасти(МногострочнаяЧасть));
	КонецЦикла;
	
	// Лишнее удалим, но одна строка должна остаться в любом случае, в частности, используется как шаблон
	Если Количество > 1 Тогда
		Для УсловныйНомерУдаляемойСтроки = 1 По -РазностьСтрок Цикл
			
			УдаляемыйИндекс = Строки.ВГраница();
			УдаляемаяСтрока = Строки[УдаляемыйИндекс];
			
			МногострочнаяЧасть.Строки.Удалить(УдаляемаяСтрока);
			Строки.Удалить(УдаляемыйИндекс);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Строки;
	
КонецФункции

// Находит строку, соответствующую многострочной части следующего уровня дерева данных отчета:
// 1. многострочную часть, подчиненную разделу - она соответствует набору вписываемых строк с конкретным кодом строки
// 2. многострочную часть, подчиненную фиксированной или вписываемой строке отчета верхнего уровня (группе показателей) -
//    она соответствует набору строк "в т.ч." (показателей в составе группы)
// 
// Параметры:
//  Родитель - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов: раздел или строка вписываемого показателя.
//                      Раздел можно получить с помощью НайтиРаздел, вписываемые показатели - с помощью НайтиМногострочнуюЧасть для раздела.
//           - см. НовыйФиксированнаяСтрокаОтчета - абстрактная ссылка на фиксированный показатель.
//                      Ее можно получить с помощью ФиксированнаяСтрокаОтчета
//  КодСтрокиРаздела - Строка - код строки бухгалтерской отчетности (передается, если в качестве Родитель передана строка раздела)
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов, содержащая многострочную часть
//  Неопределено - подходящая строка отсутствует
//
Функция НайтиМногострочнуюЧасть(Родитель, КодСтрокиРаздела = Неопределено) Экспорт
	
	Если ЭтоОписаниеФиксированнойСтроки(Родитель) Тогда
		Возврат Родитель.МногострочнаяЧасть;
	КонецЕсли;
		
	Уровень   = "А";
	КодСтроки = КодСтрокиРаздела;
	
	Если Родитель.Тип = "Строка" Тогда
		СтрокаА = Родитель.Родитель;
		Уровень   = "Б";
		КодСтроки = Сред(СтрокаА.Идентификатор, 8);
	КонецЕсли;
	
	ИдентификаторСтроки = ИдентификаторСтроки(КодСтроки, Уровень);
	Результат = НайтиМногострочнуюЧастьПоИдентификатору(Родитель, ИдентификаторСтроки);
	
	Возврат Результат;
	
КонецФункции

// Добавляет строку многострочной части.
//
// Параметры:
//  МногострочнаяЧасть - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов с типом МногострочнаяЧасть
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов с типом Строка, готовая к использованию методов работы с ячейками.
//
Функция ДобавитьСтрокуМногострочнойЧасти(МногострочнаяЧасть) Экспорт
	
	Строка = МногострочнаяЧасть.Строки.Добавить();
	Строка.Тип = "Строка";
	
	СформироватьПоказателиСтрокиМногострочнойЧасти(Строка);
	
	Возврат Строка;
	
КонецФункции

// Находит все подстроки дерева данных, соответствующие отбору, в том порядке, в котором они содержатся в дереве.
// Метод следует использовать, когда предполагается несколько строк, соответствующих отбору, и их порядок важен для дальнейшей обработки.
//
// Параметры:
//  Родитель - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов: раздел или строка вписываемого показателя.
//                      Раздел можно получить с помощью НайтиРаздел, вписываемые показатели - с помощью НайтиМногострочнуюЧасть для раздела.
//  Отбор - Структура - отбор строк; Ключи - колонки дерева
//
// Возвращаемое значение:
//  Массив из СтрокаДереваЗначений - найденные строки коллекции НовоеДеревоДанныхРазделов
//
Функция НайтиСтрокиДереваДанных(Родитель, Отбор) Экспорт
	
	Возврат НайтиСтрокиПоПорядку(Родитель.Строки, Отбор);
	
КонецФункции

// Устанавливает наименование вписываемой строки отчета или строки "в т.ч.".
// Для фиксированной строки можно вызвать, но она ничего не делает.
//
// Параметры:
//  Строка - СтрокаДереваЗначений - из НовоеДеревоДанныхРазделов, с типом Строка.
//           Получить можно с помощью ДобавитьСтрокуМногострочнойЧасти, СоздатьВписываемыеСтроки
//           - см. НовыйФиксированнаяСтрокаОтчета - абстрактная ссылка на фиксированный показатель.
//           Получить можно с помощью ФиксированнаяСтрокаОтчета
//  Наименование - Строка - устанавливаемое наименование
//
Процедура УстановитьНаименованиеСтроки(Строка, Наименование) Экспорт
	
	Если ЭтоОписаниеФиксированнойСтроки(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	НомерГрафыНаименование = "02"; // 01 - это номер пояснения
	ЯчейкаНаименования = ЯчейкаОтчета(Строка, НомерГрафыНаименование);
	УстановитьЗначениеЯчейки(ЯчейкаНаименования, Наименование);
	
КонецПроцедуры

// Устанавливает значение ячейки в дерево данных отчета, с защитой от изменения типа значения ячейки.
//
// Параметры:
//  ЯчейкаЗначения - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов, предположительно соответствующая заполняемой ячейке отчета.
//                                          Допускается передавать результат ЯчейкаОтчета.
//  Значение - Произвольный - значение для помещения в ячейку, например, результат автозаполнения
//
Процедура УстановитьЗначениеЯчейки(ЯчейкаЗначения, Значение) Экспорт
	
	Если Не ЭтоЯчейкаПоказателя(ЯчейкаЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеСКонтролемТипа(ЯчейкаЗначения.Данные, Значение);
	
КонецПроцедуры

// Очищает (приводит к значению по умолчанию установленного типа) значение ячейки.
//
// Параметры:
//  ЯчейкаЗначения - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов, соответствующая заполняемой ячейке отчета. См. ЯчейкаОтчета
//
Процедура ОчиститьЗначениеЯчейки(ЯчейкаЗначения) Экспорт
	
	УстановитьЗначениеСКонтролемТипа(ЯчейкаЗначения.Данные, Неопределено);
	
КонецПроцедуры

// Находит ячейку отчета - строку дерева данных типа Показатель, предназначенную для хранения выводимого в отчет значения.
//
// Параметры:
//  Строка - СтрокаДереваЗначений - из НовоеДеревоДанныхРазделов, с типом Строка.
//           Получить можно с помощью ДобавитьСтрокуМногострочнойЧасти, СоздатьВписываемыеСтроки 
//           - см. НовыйФиксированнаяСтрокаОтчета - абстрактная ссылка на фиксированный показатель.
//           Получить можно с помощью ФиксированнаяСтрокаОтчета
//  НомерГрафы - Строка - номер графы отчета
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - найденная ячейка;
//                         для работы с ней можно использовать УстановитьЗначениеЯчейки, ОчиститьЗначениеЯчейки, УстановитьНаименованиеСтроки
//  Неопределено - ячейка не найдена
//
Функция ЯчейкаОтчета(Строка, НомерГрафы) Экспорт
	
	ИдентификаторСтроки = "";
	Родитель            = Строка;
	Если ЭтоОписаниеФиксированнойСтроки(Строка) Тогда
		ИдентификаторСтроки = Строка.ИдентификаторДляЯчеек;
		Родитель            = Строка.Раздел;
	Иначе
		ИдентификаторСтроки = Строка.Родитель.Идентификатор;
	КонецЕсли;
	
	ИдентификаторЯчейки = ИдентификаторЯчейки(ИдентификаторСтроки, НомерГрафы);
	
	Отбор = Новый Структура("Тип,Идентификатор", "Показатель", ИдентификаторЯчейки);
	
	Найденные = Родитель.Строки.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(Найденные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Найденные[0];

КонецФункции

// Заполняет расшифровку ячейки
//
// Параметры:
//  ЯчейкаЗначения - см. ЯчейкаОтчета - ячейка, расшифровку которой нужно заполнить
//  ИдентификаторыРасшифровки - Массив - из идентификаторов примитивного или ссылочного типа, позволяет идентифицировать запись в ДанныеРасшифровки
//  ДанныеРасшифровки - Произвольный - хранилище данных расшифровки, определяется прикладным решением; см. Расшифровка в БухгалтерскаяОтчетностьБРО.НовыйРезультатЗаполненияРазделаОтчета
//  КешЗаполненияРасшифровки - Неопределено - при вызовах в цикле следует передать переменную, объявленную вне цикла и инициализированную значением Неопределено
//
Процедура ЗаполнитьРасшифровкуЯчейки(ЯчейкаЗначения, ИдентификаторыРасшифровки, ДанныеРасшифровки, КешЗаполненияРасшифровки = Неопределено) Экспорт
	
	Если КешЗаполненияРасшифровки = Неопределено Тогда
		КешЗаполненияРасшифровки = НовыйШаблонРасшифровкиМеханизм2011();
	КонецЕсли;
	
	ОчиститьРасшифровкуЯчейки(ЯчейкаЗначения);
	
	ДополнитьРасшифровкуКонтейнера(ЯчейкаЗначения, ИдентификаторыРасшифровки, ДанныеРасшифровки, КешЗаполненияРасшифровки);
	
КонецПроцедуры

// Формирует показатели строки многострочной части (ячейки, хранящие данные отчета).
//
// Параметры:
//  Строка - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов с типом Строка,
//                                    принадлежащая строке с типом МногострочнаяЧасть
//
Процедура СформироватьПоказателиСтрокиМногострочнойЧасти(Строка) Экспорт
	
	Сиблинги = НайтиСтрокиДереваДанных(Строка.Родитель, Новый Структура("Тип", "Строка"));
	
	Образец = Сиблинги[0];
	
	Если Строка = Образец Тогда
		// Первая строка - шаблон, защищена от изменений
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбразецПоказателя Из НайтиСтрокиДереваДанных(Образец, Новый Структура("Тип", "Показатель")) Цикл
		
		НовыйПоказатель = Строка.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПоказатель, ОбразецПоказателя, "Тип, Идентификатор, Данные");
		ОчиститьЗначениеЯчейки(НовыйПоказатель);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет наименование строки (показателя), приведенное в Приложении 10 к ФСБУ 4.
//
// Параметры:
//  КодСтроки - Строка - код строки (показателя)
//  Кеш - Неопределено - при использовании в цикле следует передавать неинициализированную переменную, объявленную вне цикла.
// 
// Возвращаемое значение:
//  Строка - наименование.
//  Для строк, которым приложением не установлено определенное наименование, возвращается пустая строка.
//
Функция НаименованиеКодаСтроки(КодСтроки, Кеш = Неопределено) Экспорт
	
	Если Кеш = Неопределено Тогда
		Кеш = НаименованияКодовСтрок();
	КонецЕсли;
	
	Наименование = Кеш[КодСтроки];
	
	Если Наименование = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Содержит наименования строк (показателей), приведенные в образцах форм в ФСБУ 4.
//
// Основа списка - Приложение 10 к ФСБУ 4.
// Однако, в Приложении приведен сплошной список без разбивки по разделам отчета,
// поэтому наименования показателей в Приложении отличаются от образцов.
// В таких случаях приводится наименование из образца.
// При этом различия в регистре не считаются значимыми.
//
// Возвращаемое значение:
//  Соответствие - Ключ - Код строки; Значение - наименование показателя.
//  Содержит коды и наименования строк, которым Приложением установлено определенное наименование.
//
Функция НаименованияКодовСтрок() Экспорт
	
	Наименования = Новый Соответствие;
	
	// АПК:1297-выкл - это комментарий разметки кода, отключающий требования локализации строк для средства автоматической проверки кода - см. v8.1c.ru/acc
	// Этот текст описывает содержимое формы, определенное нормативным документом, применяемым в конкретной стране
	// и не подлежащим переводу на язык пользователя или язык его юрисдикции.
	
	Наименования.Вставить("1000", "БУХГАЛТЕРСКИЙ БАЛАНС");
	Наименования.Вставить("1100", "Итого внеоборотных активов");
	Наименования.Вставить("1105", "Гудвил");
	Наименования.Вставить("1110", "Нематериальные активы");
	Наименования.Вставить("1130", "Нематериальные поисковые активы");
	Наименования.Вставить("1140", "Материальные поисковые активы");
	Наименования.Вставить("1150", "Основные средства");
	Наименования.Вставить("1160", "Инвестиционная недвижимость");
	Наименования.Вставить("1170", "Финансовые вложения");
	Наименования.Вставить("1180", "Отложенные налоговые активы");
	Наименования.Вставить("1190", "Прочие внеоборотные активы");
	Наименования.Вставить("1200", "Итого оборотных активов");
	Наименования.Вставить("1210", "Запасы");
	Наименования.Вставить("1215", "Долгосрочные активы к продаже");
	Наименования.Вставить("1220", "Налог на добавленную стоимость по приобретенным ценностям");
	Наименования.Вставить("1230", "Дебиторская задолженность");
	Наименования.Вставить("1240", "Финансовые вложения (за исключением денежных эквивалентов)");
	Наименования.Вставить("1250", "Денежные средства и денежные эквиваленты");
	Наименования.Вставить("1260", "Прочие оборотные активы");
	Наименования.Вставить("1300", "Итого капитал");
	Наименования.Вставить("1330", "Целевые средства");
	Наименования.Вставить("1340", "Накопленная дооценка внеоборотных активов");
	Наименования.Вставить("1350", "Добавочный капитал (без накопленной дооценки)");
	Наименования.Вставить("1400", "Итого долгосрочных обязательств");
	Наименования.Вставить("1410", "Долгосрочные заемные средства");
	Наименования.Вставить("1420", "Отложенные налоговые обязательства");
	Наименования.Вставить("1430", "Долгосрочные оценочные обязательства");
	Наименования.Вставить("1450", "Прочие долгосрочные обязательства");
	Наименования.Вставить("1500", "Итого краткосрочных обязательств");
	Наименования.Вставить("1510", "Краткосрочные заемные средства");
	Наименования.Вставить("1520", "Кредиторская задолженность"); // Краткосрочная кредиторская задолженность
	Наименования.Вставить("1530", "Доходы будущих периодов");
	Наименования.Вставить("1540", "Краткосрочные оценочные обязательства");
	Наименования.Вставить("1550", "Прочие краткосрочные обязательства");
	Наименования.Вставить("1600", "БАЛАНС (актив)");
	Наименования.Вставить("1700", "БАЛАНС (пассив)");
	Наименования.Вставить("2000", "ОТЧЕТ О ФИНАНСОВЫХ РЕЗУЛЬТАТАХ");
	Наименования.Вставить("2100", "Валовая прибыль (убыток)");
	Наименования.Вставить("2110", "Выручка");
	Наименования.Вставить("2120", "Себестоимость продаж");
	Наименования.Вставить("2200", "Прибыль (убыток) от продаж");
	Наименования.Вставить("2210", "Коммерческие расходы");
	Наименования.Вставить("2220", "Управленческие расходы");
	Наименования.Вставить("2300", "Прибыль (убыток) от продолжающейся деятельности до налогообложения");
	Наименования.Вставить("2310", "Доходы от участия в других организациях");
	Наименования.Вставить("2320", "Проценты к получению");
	Наименования.Вставить("2330", "Проценты к уплате");
	Наименования.Вставить("2340", "Прочие доходы");
	Наименования.Вставить("2350", "Прочие расходы");
	Наименования.Вставить("2400", "Чистая прибыль (убыток)");
	Наименования.Вставить("2410", "Налог на прибыль организаций");
	Наименования.Вставить("2411", "Текущий налог на прибыль организаций");
	Наименования.Вставить("2412", "Отложенный налог на прибыль организаций");
	Наименования.Вставить("2420", "Прибыль (убыток) от прекращаемой деятельности (за вычетом относящегося к ней налога на прибыль организаций)");
	Наименования.Вставить("2460", "Прочее");
	Наименования.Вставить("2500", "Совокупный финансовый результат");
	Наименования.Вставить("2510", "Результат переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток)"); // Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток)
	Наименования.Вставить("2520", "Результат прочих операций, не включаемый в чистую прибыль (убыток)"); // Результат от прочих операций, не включаемый в чистую прибыль (убыток)
	Наименования.Вставить("2530", "Налог на прибыль организаций, относящийся к результатам переоценки внеоборотных активов и прочих операций, не включаемых в чистую прибыль (убыток)"); // Налог на прибыль от операций, результат которых не включается в чистую прибыль (убыток)
	Наименования.Вставить("2900", "Базовая прибыль (убыток) на акцию, руб. коп."); // Базовая прибыль (убыток) на акцию
	Наименования.Вставить("2910", "Разводненная прибыль (убыток) на акцию, руб. коп."); // Разводненная прибыль (убыток) на акцию
	Наименования.Вставить("3000", "ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА");
	Наименования.Вставить("3100", "Величина капитала на 31 декабря года, предшествующего предыдущему");
	Наименования.Вставить("3110", "Корректировка в связи с изменением учетной политики");
	Наименования.Вставить("3120", "Корректировка в связи с исправлением ошибок");
	Наименования.Вставить("3130", "Величина капитала на 31 декабря года, предшествующего предыдущему, после корректировки");
	Наименования.Вставить("3200", "Величина капитала на 31 декабря предыдущего года");
	Наименования.Вставить("3210", "Корректировка в связи с изменением учетной политики");
	Наименования.Вставить("3211", "Чистая прибыль (убыток)");
	Наименования.Вставить("3212", "Переоценка внеоборотных активов");
	Наименования.Вставить("3216", "Реорганизация юридического лица");
	Наименования.Вставить("3220", "Корректировка в связи с исправлением ошибок");
	Наименования.Вставить("3227", "Дивиденды");
	Наименования.Вставить("3230", "Иные изменения за счет операций с собственниками (за исключением дивидендов) - всего");
	Наименования.Вставить("3240", "Иные изменения - всего");
	Наименования.Вставить("3250", "Величина капитала на дату окончания периода предыдущего года, аналогичного отчетному периоду");
	Наименования.Вставить("3300", "Величина капитала на отчетную дату");
	Наименования.Вставить("3311", "Чистая прибыль (убыток)");
	Наименования.Вставить("3312", "Переоценка внеоборотных активов");
	Наименования.Вставить("3316", "Реорганизация юридического лица");
	Наименования.Вставить("3327", "Дивиденды");
	Наименования.Вставить("3330", "Иные изменения за счет операций с собственниками (за исключением дивидендов) - всего");
	Наименования.Вставить("3340", "Иные изменения - всего");
	Наименования.Вставить("4000", "ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ");
	Наименования.Вставить("4100", "Сальдо денежных потоков от текущих операций");
	Наименования.Вставить("4110", "Поступления - всего");
	Наименования.Вставить("4111", "От продажи продукции, товаров, работ и услуг");
	Наименования.Вставить("4112", "Арендных платежей, лицензионных платежей, роялти, комиссионных и иных аналогичных платежей");
	Наименования.Вставить("4113", "От перепродажи финансовых вложений");
	Наименования.Вставить("4114", "Процентов по дебиторской задолженности покупателей");
	Наименования.Вставить("4119", "Прочие поступления");
	Наименования.Вставить("4120", "Платежи - всего");
	Наименования.Вставить("4121", "Поставщикам (подрядчикам) за сырье, материалы, работы, услуги");
	Наименования.Вставить("4122", "В связи с оплатой труда работников");
	Наименования.Вставить("4123", "Процентов по долговым обязательствам");
	Наименования.Вставить("4124", "Налога на прибыль организаций");
	Наименования.Вставить("4129", "Прочие платежи");
	Наименования.Вставить("4200", "Сальдо денежных потоков от инвестиционных операций");
	Наименования.Вставить("4210", "Поступления - всего");
	Наименования.Вставить("4211", "От продажи внеоборотных активов (кроме финансовых вложений)");
	Наименования.Вставить("4212", "От продажи акций других организаций (долей участия)");
	Наименования.Вставить("4213", "От возврата предоставленных займов, от продажи долговых ценных бумаг (прав требования денежных средств к другим лицам)");
	Наименования.Вставить("4214", "Дивидендов, процентов по долговым финансовым вложениям и аналогичных поступлений от долевого участия в других организациях");
	Наименования.Вставить("4219", "Прочие поступления");
	Наименования.Вставить("4220", "Платежи - всего");
	Наименования.Вставить("4221", "В связи с приобретением, созданием, модернизацией, реконструкцией и подготовкой к использованию внеоборотных активов");
	Наименования.Вставить("4222", "В связи с приобретением акций других организаций (долей участия)");
	Наименования.Вставить("4223", "В связи с приобретением долговых ценных бумаг (прав требования денежных средств к другим лицам), предоставление займов другим лицам");
	Наименования.Вставить("4224", "Процентов по долговым обязательствам, включаемым в стоимость инвестиционного актива");
	Наименования.Вставить("4229", "Прочие платежи");
	Наименования.Вставить("4300", "Сальдо денежных потоков от финансовых операций");
	Наименования.Вставить("4310", "Поступления - всего");
	Наименования.Вставить("4311", "Получение кредитов и займов");
	Наименования.Вставить("4312", "Денежных вкладов собственников (участников)");
	Наименования.Вставить("4313", "От выпуска акций, увеличения долей участия");
	Наименования.Вставить("4314", "От выпуска облигаций, векселей и других долговых ценных бумаг");
	Наименования.Вставить("4319", "Прочие поступления");
	Наименования.Вставить("4320", "Платежи - всего");
	Наименования.Вставить("4321", "Собственникам (участникам) в связи с выкупом у них акций (долей участия) организации или их выходом из состава участников");
	Наименования.Вставить("4322", "На уплату дивидендов и иных платежей по распределению прибыли в пользу собственников (участников)");
	Наименования.Вставить("4323", "В связи с погашением (выкупом) векселей и других долговых ценных бумаг, возврат кредитов и займов");
	Наименования.Вставить("4329", "Прочие платежи");
	Наименования.Вставить("4400", "Сальдо денежных потоков за период");
	Наименования.Вставить("4450", "Остаток денежных средств и денежных эквивалентов на начало периода");
	Наименования.Вставить("4490", "Величина влияния изменений курса иностранной валюты по отношению к рублю");
	Наименования.Вставить("4500", "Остаток денежных средств и денежных эквивалентов на конец периода");
	Наименования.Вставить("6000", "ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ СРЕДСТВ");
	Наименования.Вставить("6100", "Остаток средств на начало периода");
	Наименования.Вставить("6200", "Поступило средств - всего");
	Наименования.Вставить("6210", "Вступительные взносы");
	Наименования.Вставить("6215", "Членские взносы");
	Наименования.Вставить("6220", "Целевые взносы");
	Наименования.Вставить("6230", "Добровольные имущественные взносы и пожертвования");
	Наименования.Вставить("6240", "Прибыль от приносящей доход деятельности");
	Наименования.Вставить("6250", "Прочие");
	Наименования.Вставить("6300", "Использовано (израсходовано) средств - всего");
	Наименования.Вставить("6310", "Расходы на целевые мероприятия");
	Наименования.Вставить("6311", "социальная и благотворительная помощь");
	Наименования.Вставить("6312", "проведение конференций, совещаний, семинаров");
	Наименования.Вставить("6313", "прочие");
	Наименования.Вставить("6320", "Расходы на содержание аппарата управления");
	Наименования.Вставить("6321", "расходы, связанные с оплатой труда (включая начисления)");
	Наименования.Вставить("6322", "выплаты, не связанные с оплатой труда");
	Наименования.Вставить("6323", "расходы на служебные командировки и деловые поездки");
	Наименования.Вставить("6324", "содержание помещений, зданий, автомобильного транспорта и иного имущества (кроме ремонта)");
	Наименования.Вставить("6325", "ремонт основных средств и иного имущества");
	Наименования.Вставить("6326", "прочие");
	Наименования.Вставить("6330", "Приобретение основных средств, инвентаря и иного имущества");
	Наименования.Вставить("6350", "Прочие");
	Наименования.Вставить("6400", "Остаток средств на конец периода");
	
	// АПК:1297-вкл - это комментарий разметки кода. См. комментарий с таким же номером в начале процедуры.
	
	Возврат Наименования;
	
КонецФункции

#КонецОбласти

#Область Заполнение

// Реализует подход к заполнению отчета на основе параметрического описания его структуры (см. НовыйЗаполняемыеПоказатели).
// Такой подход целесообразно использовать для тех разделов отчета, структура которых может модифицироваться пользователем (настраиваться).

// См. также БухгалтерскаяОтчетностьБРОПереопределяемый

// Конструктор коллекции, описывающей возможности прикладного решения по заполнению бухгалтерской отчетности.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйЗаполняемыеПоказатели() Экспорт
	
	ЗаполняемыеПоказатели = Новый Структура;
	ЗаполняемыеПоказатели.Вставить("Версия", 1); // Позволяет сохранять сериализованное значение коллекции
	ЗаполняемыеПоказатели.Вставить("Разделы", Новый Соответствие); // Ключ - имя раздела из РазделыОтчета; Значение - НовыйЗаполняемыеПоказателиРаздела
	Возврат ЗаполняемыеПоказатели;
	
КонецФункции

// Конструктор коллекции, описывающей возможности прикладного решения по заполнению раздела бухгалтерской отчетности.
// Методы работы с коллекцией см. в области ЗаполняемыеПоказателиРаздела программного интерфейса
// 
// Как правило, работа ведется с этой коллекцией, а не НовыйЗаполняемыеПоказатели, поэтому часто ее имя сокращается до ЗаполняемыеПоказатели.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйЗаполняемыеПоказателиРаздела() Экспорт
	
	// Отчет включает в себя показатели, объединенные в группы.
	// Здесь термины Показатели, ГруппыПоказателей используются в значении, установленном в ФСБУ 4.
	//
	// Группа может содержать принципиально один показатель или неограниченный набор показателей.
	// Во втором случае один и тот же показатель может включаться в несколько групп,
	// при этом значения показателя тем или иным образом зачитываются на уровне групп -
	// включаются в ту или иную группу в зависимости от знака показателя или его составляющих.
	
	Описание = Новый Структура;
	
	Описание.Вставить("Показатели", Новый ТаблицаЗначений);
	Описание.Показатели.Колонки.Добавить("Наименование", ТипНаименованиеПоказателя());
	Описание.Показатели.Колонки.Добавить("Заполнение",   Новый ОписаниеТипов("Структура")); // См. НовыйАлгоритмЗаполнения
	Описание.Показатели.Колонки.Добавить("Вывод",        Новый ОписаниеТипов("Булево"));
	
	// Синхронизируется с уровнями типа "Строка" дерева данных отчета по порядковым номерам групп с одинаковым кодом и выводимых показателей.
	// См. ПланРазделаДереваДанныхОтчета
	Описание.Вставить("ГруппыПоказателей", Новый ТаблицаЗначений);
	Описание.ГруппыПоказателей.Колонки.Добавить("КодСтроки", ТипКодСтрокиГИРБО());
	// Группа может быть представлена единственным показателем или несколькими:
	// - используется для единственного показателя.
	//   Имеется в виду, что этот показатель принципиально единственный, то есть, это группа имени этого показателя.
	Описание.ГруппыПоказателей.Колонки.Добавить("Показатель"); // Индекс строки в Показатели или Неопределено для группы показателей. См. Показатель()
	// - используются для нескольких показателей
	Описание.ГруппыПоказателей.Колонки.Добавить("Наименование",  ТипНаименованиеПоказателя());
	Описание.ГруппыПоказателей.Колонки.Добавить("Состав",        Новый ОписаниеТипов("Массив")); // индексов из Показатели. См. Показатель()
	
	Возврат Описание;
	
КонецФункции

// Конструктор описания алгоритма заполнения.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйАлгоритмЗаполнения() Экспорт
	
	АлгоритмЗаполнения = Новый Структура;
	
	АлгоритмЗаполнения.Вставить("Идентификатор"); // Обычно - ссылка на счет.
	
	// Семантика отбора определяется алгоритмом заполнения.
	// Пустая структура имеет специальный смысл - соответствует основному показателю,
	// содержащему все значения, которых нет в отборе других показателей с этим алгоритмом.
	АлгоритмЗаполнения.Вставить("Отбор", Новый Структура);
	
	АлгоритмЗаполнения.Вставить("НастройкиАлгоритма", Новый Структура); // Произвольные
	
	// Отбор и НастройкиАлгоритма должны быть сериализуемы в XDTO
	
	Возврат АлгоритмЗаполнения;
	
КонецФункции

// Конструктор коллекции, в которое прикладное решение поместит результат заполнения раздела отчета
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйРезультатЗаполненияРазделаОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Значения", НовыйЗначенияЗаполненияОтчета());
	Результат.Вставить("Расшифровка"); // тип определяется прикладным решением. Это должно быть значение, сериализуемое в XDTO
	Возврат Результат;
	
КонецФункции

// Конструктор коллекции, в которое прикладное решение поместит данные заполнения раздела отчета (числовые значения ячеек отчета).
// Эта коллекция при заполнении должна быть синхронизирована по индексам строк с НовыйЗаполняемыеПоказателиРаздела.
//
// Возвращаемое значение:
//  ДеревоЗначений - см. тело функции.
//
Функция НовыйЗначенияЗаполненияОтчета() Экспорт
	
	ЗначенияЗаполнения = Новый ДеревоЗначений;
	// В дереве применяется до двух уровней:
	// - группа показателей (Показатель - индекс группы показателей)
	// - показатель в составе группы (при наличии; Показатель - индекс показателя)
	ЗначенияЗаполнения.Колонки.Добавить("Показатель",  Новый ОписаниеТипов("Число"));
	ЗначенияЗаполнения.Колонки.Добавить("Значение",    ТипСумма());
	ЗначенияЗаполнения.Колонки.Добавить("Расшифровка"); // определяется прикладным решением; должно быть значение, сериализуемое в XDTO
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

// Получает из временного хранилища коллекцию, содержащую заполняемые показатели раздела.
// Для использования в форме настроек прикладного решения.
// Временное хранилище может содержать и другие сведения, не подлежащие использованию в форме настроек.
//
// Параметры:
//  АдресВФорме - Строка - Адрес во временном хранилище
//  Раздел - Строка - Имя раздела по РазделыОтчета
// 
// Возвращаемое значение:
//  - см. НовыйЗаполняемыеПоказателиРаздела - содержащаяся в хранилище коллекция
//  - Неопределено - хранилище не содержит коллекцию
//
Функция ПолучитьЗаполняемыеПоказателиРаздела(АдресВФорме, Раздел) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЭтоАдресВременногоХранилища(АдресВФорме),
		НСтр("ru = 'Передан некорректный адрес хранилища заполняемых показателей';
			|en = 'Передан некорректный адрес хранилища заполняемых показателей'"));
	
	ЗаполняемыеПоказатели = ПолучитьИзВременногоХранилища(АдресВФорме);
	Если ЗаполняемыеПоказатели = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполняемыеПоказателиРаздела = ЗаполняемыеПоказатели.Разделы[Раздел];
	Если ЗаполняемыеПоказателиРаздела = Неопределено Тогда
		Возврат НовыйЗаполняемыеПоказателиРаздела();
	КонецЕсли;
	
	Возврат ЗаполняемыеПоказателиРаздела;
	
КонецФункции

// Помещает сведения о заполняемых показателях раздела во временное хранилище для передачи из формы настроек прикладного решения
// в форму отчета БРО.
//
// Параметры:
//  АдресВФорме - Строка - Адрес во временном хранилище
//  Раздел - Строка - Имя раздела по РазделыОтчета
//  ЗаполняемыеПоказателиРаздела - см. НовыйЗаполняемыеПоказателиРаздела - помещаемое значение
//
Процедура ПоместитьЗаполняемыеПоказателиРаздела(АдресВФорме, Раздел, ЗаполняемыеПоказателиРаздела) Экспорт
	
	ЗаполняемыеПоказатели = ПолучитьИзВременногоХранилища(АдресВФорме);
	Если ЗаполняемыеПоказатели = Неопределено Тогда
		ЗаполняемыеПоказатели = НовыйЗаполняемыеПоказатели();
	КонецЕсли;
	ЗаполняемыеПоказатели.Разделы.Вставить(Раздел, ЗаполняемыеПоказателиРаздела);
	
	ПоместитьВоВременноеХранилище(ЗаполняемыеПоказатели, АдресВФорме);
	
КонецПроцедуры

// Главный метод, обеспечивающий заполнение отчета на основе описания в НовыйЗаполняемыеПоказатели.
// Заполняет отчет в целом: оба периода (отчетный и сравнительный), все переданные разделы.
//
// Параметры:
//  Контейнер                  - ДеревоЗначений - заполняемые данные разделов в терминах формы отчета; в Контейнер помещается результат заполнения
//  ЗаполняемыеПоказатели      - НовыйЗаполняемыеПоказатели - описание структуры отчета и правил его заполнения.
//                               Может содержать как все разделы, так и часть, требующую заполнения.
//  Периоды                    - Массив из Дата - периоды отчета: отчетный (с индексом 0, обязателен) и сравнительный (с индексом 1, при наличии)
//  Организации                - Массив из СправочникСсылка.Организации - организации (филиалы), данными которых следует заполнить отчет.
//                               Первым элементом следует передать значение, характеризующее организация в целом ("головную организацию").
//
Процедура ЗаполнитьОтчет(Контейнер, ЗаполняемыеПоказатели, Периоды, Организации) Экспорт
	
	ГрафыОтчета = ГрафыОтчета();
	
	Для Каждого ОписаниеРаздела Из ЗаполняемыеПоказатели.Разделы Цикл
		
		Раздел = ОписаниеРаздела.Ключ;
		ЗаполняемыеПоказателиРаздела = ОписаниеРаздела.Значение;
		
		ДанныеРаздела = НайтиРаздел(Контейнер, Раздел);
		Если ДанныеРаздела = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнициализироватьРазделОтчетаЗаполняемымиПоказателями(ДанныеРаздела, ЗаполняемыеПоказателиРаздела);
		
		ГрафыРаздела = ГрафыОтчета[Раздел];
		Если ГрафыРаздела = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексПериода = 0 По Периоды.ВГраница() Цикл
			
			НомерГрафыЗначений = ГрафыРаздела[ИндексПериода];
			
			Если НомерГрафыЗначений = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Период = Периоды[ИндексПериода];
			
			КонтекстЗаполнения = НовыйКонтекстЗаполненияОтчета();
			ЗаполнитьЗначенияСвойств(КонтекстЗаполнения.Период, Период);
			КонтекстЗаполнения.Организации = Организации;
			
			РезультатЗаполнения = НовыйРезультатЗаполненияРазделаОтчета();
			
			БухгалтерскаяОтчетностьБРОПереопределяемый.ПриЗаполненииОтчета(РезультатЗаполнения, ЗаполняемыеПоказателиРаздела, КонтекстЗаполнения);
			
			ЗаполнитьКонтейнер(
				ДанныеРаздела,
				РезультатЗаполнения,
				ЗаполняемыеПоказателиРаздела,
				НомерГрафыЗначений);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаполняемыеПоказателиРаздела // Универсальные методы для работы с НовыйЗаполняемыеПоказателиРаздела

// Эти методы следует воспринимать как методы объекта ЗаполняемыеПоказателиРаздела,
// поэтому в большинство из них он передается (имя параметра ЗаполняемыеПоказатели).

// Возвращает ссылку на описание показателя по идентификатору.
// Для исключения циклических ссылок и упрощения сериализации следует по возможности хранить в коллекции НовыйЗаполняемыеПоказателиРаздела
// идентификаторы, а не ссылки.
//
// Обратное преобразование - см. ИдентификаторПоказателя
//
// Параметры:
//  ИдентификаторПоказателя - Число
//  ЗаполняемыеПоказатели - см. НовыйЗаполняемыеПоказателиРаздела
// 
// Возвращаемое значение:
//  СтрокаТабличнойЧасти из НовыйЗаполняемыеПоказателиРаздела.Показатели
//
Функция Показатель(ИдентификаторПоказателя, ЗаполняемыеПоказатели) Экспорт
	
	Если ТипЗнч(ИдентификаторПоказателя) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗаполняемыеПоказатели.Показатели[ИдентификаторПоказателя];
	
КонецФункции

// Возвращает идентификатор показателя по ссылке на описание показателя.
// Для исключения циклических ссылок и упрощения сериализации следует по возможности хранить в коллекции НовыйЗаполняемыеПоказателиРаздела
// идентификаторы, а не ссылки.
//
// Обратное преобразование - см. Показатель
//
// Параметры:
//  Показатель - СтрокаТабличнойЧасти из НовыйЗаполняемыеПоказателиРаздела.Показатели
// 
// Возвращаемое значение:
//  Число - идентификатор
//  Неопределено - показатель не найден
//
Функция ИдентификаторПоказателя(Показатель) Экспорт
	
	Если ТипЗнч(Показатель) <> Тип("СтрокаТаблицыЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторПоказателя = Показатель.Владелец().Индекс(Показатель);
	Если ИдентификаторПоказателя < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторПоказателя;
	
КонецФункции

// Возвращает наименование группы показателей
//
// Параметры:
//  ГруппаПоказателей - СтрокаТабличнойЧасти из НовыйЗаполняемыеПоказателиРаздела.ГруппыПоказателей
//  ЗаполняемыеПоказатели - НовыйЗаполняемыеПоказателиРаздела
// 
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеГруппыПоказателей(ГруппаПоказателей, ЗаполняемыеПоказатели) Экспорт
	
	Показатель = Показатель(ГруппаПоказателей.Показатель, ЗаполняемыеПоказатели);
	
	Если Показатель = Неопределено Тогда
		Возврат ГруппаПоказателей.Наименование;
	Иначе
		Возврат Показатель.Наименование;
	КонецЕсли;
	
КонецФункции

// Возвращает состав показателей, входящих в группу
//
// Параметры:
//  ГруппаПоказателей - СтрокаТабличнойЧасти из НовыйЗаполняемыеПоказателиРаздела.ГруппыПоказателей
//  ЗаполняемыеПоказатели - НовыйЗаполняемыеПоказателиРаздела
// 
// Возвращаемое значение:
//  Массив из НовыйЗаполняемыеПоказателиРаздела.Показатели
//
Функция СоставГруппыПоказателей(ГруппаПоказателей, ЗаполняемыеПоказатели) Экспорт
	
	Показатели = Новый Массив;
	
	ПоказательГруппы = Показатель(ГруппаПоказателей.Показатель, ЗаполняемыеПоказатели);
	
	Если ПоказательГруппы <> Неопределено Тогда
		Показатели.Добавить(ПоказательГруппы);
	Иначе
		Для Каждого ИдентификаторПоказателя Из ГруппаПоказателей.Состав Цикл
			Показатели.Добавить(Показатель(ИдентификаторПоказателя, ЗаполняемыеПоказатели));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает перечень показателей группы, предназначенных к выводу в отчет ("on the face of the financial statements").
// Поскольку предназначена для вывода иерархии группы, то не предполагает применения для группы имени одного показателя.
//
// Параметры:
//  ГруппаПоказателей - СтрокаТабличнойЧасти из НовыйЗаполняемыеПоказателиРаздела.ГруппыПоказателей
//  ЗаполняемыеПоказатели - НовыйЗаполняемыеПоказателиРаздела
// 
// Возвращаемое значение:
//  Массив из НовыйЗаполняемыеПоказателиРаздела.Показатели
//
Функция ВыводимыеПоказатели(ГруппаПоказателей, ЗаполняемыеПоказатели) Экспорт
	
	ВыводимыеПоказатели = Новый Массив;
	Если ГруппаПоказателей.Показатель = Неопределено Тогда
		Для Каждого ИдентификаторПоказателя Из ГруппаПоказателей.Состав Цикл
			
			Показатель = Показатель(ИдентификаторПоказателя, ЗаполняемыеПоказатели);
			
			Если Не Показатель.Вывод Тогда
				Продолжить;
			КонецЕсли;
			
			ВыводимыеПоказатели.Добавить(Показатель);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВыводимыеПоказатели;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДеревоДанныхРазделов

Функция ИдентификаторСтроки(КодСтроки, Уровень) Экспорт
	
	// Используется для вписываемых строк и для многострочной части фиксированных строк.
	// Но для ячеек самой фиксированной строки используется другое пространство имен
	// - см. ИдентификаторФиксированнойСтрокиДляЯчеек
	
	Возврат СтрШаблон("П10001%1%2", Уровень, КодСтроки);
	
КонецФункции

Функция ИдентификаторФиксированнойСтрокиДляЯчеек(КодСтроки) Экспорт
	
	Возврат СтрШаблон("П000010%1", КодСтроки);
	
КонецФункции

Функция ИдентификаторЯчейки(ИдентификаторСтроки, НомерГрафы) Экспорт
	
	Возврат СтрШаблон("%1%2", ИдентификаторСтроки, НомерГрафы);
	
КонецФункции

Функция УровеньфиксированнойСтроки() Экспорт
	Возврат "0";
КонецФункции

Функция НайтиМногострочнуюЧастьФиксированнойСтроки(ОписаниеРаздела, КодСтроки) Экспорт
	
	ИдентификаторСтроки = ИдентификаторСтроки(КодСтроки, УровеньфиксированнойСтроки());
	Возврат НайтиМногострочнуюЧастьПоИдентификатору(ОписаниеРаздела, ИдентификаторСтроки);
	
КонецФункции

Функция НайтиМногострочнуюЧастьПоИдентификатору(Родитель, ИдентификаторСтроки) Экспорт
	
	Поиск = Родитель.Строки.НайтиСтроки(Новый Структура("Тип, Идентификатор", "МногострочнаяЧасть", ИдентификаторСтроки));
	Если Не ЗначениеЗаполнено(Поиск) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Поиск[0];

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипНаименованиеПоказателя()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(255);// ВписПоказОтчТип.НаимВпсПкз в формате ГИРБО
КонецФункции

Функция ТипКодСтрокиГИРБО()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(4);// См. Приложение 10 к ФСБУ 4
КонецФункции

Функция РазделДереваДанных(Знач Строка)
	
	Если ЭтоОписаниеФиксированнойСтроки(Строка) Тогда
		Возврат Строка.Раздел;
	КонецЕсли;
	
	Пока Истина Цикл
		
		Если Строка.Тип = "Раздел" Тогда
			Возврат Строка;
		КонецЕсли;
		
		Строка = Строка.Родитель;
		Если Строка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура УстановитьЗначениеСКонтролемТипа(Приемник, Источник)
	
	ДопустимыйТип = ТипЗнч(Приемник);
	КонтролерТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДопустимыйТип));
	Приемник = КонтролерТипа.ПривестиЗначение(Источник);
	
КонецПроцедуры

Функция ЗаписьЗначенияЗаполнения(ЗначенияЗаполнения, ЗаполняемыеДанные)
	
	ИндексЗаполняемыхДанных = ЗаполняемыеДанные.Владелец().Индекс(ЗаполняемыеДанные);
	Возврат ЗначенияЗаполнения.Строки.Найти(ИндексЗаполняемыхДанных, "Показатель");
	
КонецФункции

Процедура ДобавитьГрафыОтчетаОбороты(ГрафыОтчета, ИмяРазделаОтчета, КодГрафыОтчетныйПериод, КодГрафыСравнительныйПериод)
	
	ГрафыРаздела = Новый Соответствие;
	ГрафыРаздела.Вставить(0, КодГрафыОтчетныйПериод);
	ГрафыРаздела.Вставить(1, КодГрафыСравнительныйПериод);
	ГрафыОтчета.Вставить(ИмяРазделаОтчета, ГрафыРаздела);

КонецПроцедуры

#Область ДеревоДанныхРазделов

Функция НовыйПланРазделаДереваДанныхОтчета() Экспорт
	
	ПланРаздела = Новый ДеревоЗначений;
	ПланРаздела.Колонки.Добавить("ЗаполняемыеДанные");
	ПланРаздела.Колонки.Добавить("ЗаписьОтчета");
	Возврат ПланРаздела;
	
КонецФункции

Функция ПланРазделаДереваДанныхОтчета(ОписаниеРаздела, ЗаполняемыеПоказатели) Экспорт
	
	План = НовыйПланРазделаДереваДанныхОтчета();
	
	// Хранилище записей отчета в дереве данных (элементов ОписаниеРаздела) сложное, запутанное -
	// определяется форматом представления отчета в ГИРБО.
	//
	// Такие записи сгруппированы в дереве по кодам строк.
	// Среди записей с одинаковым кодом строк:
	//  - предусматривается одна фиксированная строка
	//  - может быть предусмотрено определенное количество вписываемых строк (см. ЛимитВписываемыхПоказателей)
	//
	// В составе фиксированной и каждой из вписываемых строк может быть предусмотрена возможность (а может - нет)
	// вводить вписываемые строки второго уровня, предназначенные для вывода показателей в составе группы показателей.
	// Их количество также ограничено (см. ЛимитДетализирующихПоказателей)
	//
	// Фиксированные строки имеют ряд неприятных особенностей - см. НовыйФиксированнаяСтрокаОтчета.
	// При этом, хотя формат и допускает техническую возможность не выгружать данные о фиксированных строках,
	// в некоторых случаях фактически обойтись без фиксированных строк нельзя -
	// а именно, в случае, когда стандартом предусмотрены коды строк второго уровня (например, для 2411 в составе 2410).
	//
	// Кроме того, сейчас в форме отчета нельзя отказаться от выгрузки данных о фиксированных строках ни в каких случаях.
	//
	// Поэтому, по возможности размещаем первую группу показателей в записях фиксированной строки отчета.
	// Если такой возможности нет, то - во вписываемых строках.
	//
	// Также, для фиксированных строк дерево не хранит сведения о наименованиях строк, поэтому эти наименования приходится дублировать -
	// см. НаименованияФиксированныхСтрокРаздела.
	//
	// В следующих версиях, после устранения указанных недостатков дерева данных,
	// возможен частичный или полный отказ от использования фиксированных строк.
	
	ГруппыПоказателейПоКодамСтрок = СгруппироватьГруппыПоказателейПоКодамСтрок(ЗаполняемыеПоказатели);
	
	Для Каждого ГруппыОдногоКода Из ГруппыПоказателейПоКодамСтрок Цикл
		
		// предполагаем, что группа с индексом 0 будет в фиксированной строке,
		// поэтому во вписываемых строках (записях отчета) будем размещать следующие - начиная с 1
		ИндексПервойВписываемойГруппы = 1;
		
		ФиксированнаяГруппа = ГруппыОдногоКода.Значение[0]; // т.е. группа, которая может быть помещена в фиксированную строку
		ФиксированнаяЗаписьОтчета = ФиксированнаяСтрокаОтчета(ОписаниеРаздела, ФиксированнаяГруппа.КодСтроки);
		
		МногострочнаяЧасть = НайтиМногострочнуюЧасть(ОписаниеРаздела, ФиксированнаяГруппа.КодСтроки);
		ИспользоватьФиксированнуюСтроку = Истина;
		Если МногострочнаяЧасть <> Неопределено Тогда
			
			НаименованиеГруппы = НаименованиеГруппыПоказателей(ФиксированнаяГруппа, ЗаполняемыеПоказатели);
			
			ИспользоватьФиксированнуюСтроку = МожноИспользоватьФиксированнуюСтроку(
				ФиксированнаяЗаписьОтчета,
				НаименованиеГруппы,
				ФиксированнаяГруппа.Показатель = Неопределено И ЗначениеЗаполнено(ФиксированнаяГруппа.Состав));
		КонецЕсли;
		
		Если ИспользоватьФиксированнуюСтроку Тогда
			ДополнитьПланДереваДанныхОтчетаГруппой(План, ФиксированнаяГруппа, ФиксированнаяЗаписьОтчета, ЗаполняемыеПоказатели);
		Иначе
			// Все размещаем во вписываемых
			ИндексПервойВписываемойГруппы = 0;
		КонецЕсли;
		
		КоличествоЗаписейОтчетаВписываемаяСтрока = ГруппыОдногоКода.Значение.Количество() - ИндексПервойВписываемойГруппы;
		
		ЗаписиОтчетаВписываемаяСтрокаГруппОдногоКода = СоздатьВписываемыеСтроки(
			ОписаниеРаздела,
			КоличествоЗаписейОтчетаВписываемаяСтрока,
			ГруппыОдногоКода.Ключ);
			
		Если ЗаписиОтчетаВписываемаяСтрокаГруппОдногоКода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВписываемыхСтрок = ЗаписиОтчетаВписываемаяСтрокаГруппОдногоКода.Количество();
		Для ИндексГруппы = ИндексПервойВписываемойГруппы По ГруппыОдногоКода.Значение.ВГраница() Цикл
			
			Группа = ГруппыОдногоКода.Значение[ИндексГруппы];
			
			ИндексЗаписиОтчетаВписываемаяСтрока = ИндексГруппы - ИндексПервойВписываемойГруппы;
			
			Если ИндексЗаписиОтчетаВписываемаяСтрока >= КоличествоВписываемыхСтрок Тогда
				Прервать;
			КонецЕсли;
			
			ЗаписьОтчета = ЗаписиОтчетаВписываемаяСтрокаГруппОдногоКода[ИндексЗаписиОтчетаВписываемаяСтрока];
			
			ДополнитьПланДереваДанныхОтчетаГруппой(План, Группа, ЗаписьОтчета, ЗаполняемыеПоказатели);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат План;
	
КонецФункции

Функция СгруппироватьГруппыПоказателейПоКодамСтрок(ЗаполняемыеПоказатели)
	
	ГруппыПоказателейПоКодамСтрок = Новый Соответствие;// бакет: код строки, ссылка на группу показателей
	
	Для Каждого ГруппаПоказателей Из ЗаполняемыеПоказатели.ГруппыПоказателей Цикл
		
		Если ГруппаПоказателей.Показатель <> Неопределено Тогда
			Показатель = Показатель(ГруппаПоказателей.Показатель, ЗаполняемыеПоказатели);
			Если Не Показатель.Вывод Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ГруппыКода = ГруппыПоказателейПоКодамСтрок[ГруппаПоказателей.КодСтроки];
		Если ГруппыКода = Неопределено Тогда
			ГруппыКода = Новый Массив;
			ГруппыПоказателейПоКодамСтрок.Вставить(ГруппаПоказателей.КодСтроки, ГруппыКода);
		КонецЕсли;
		
		ГруппыКода.Добавить(ГруппаПоказателей);
		
	КонецЦикла;
	
	Возврат ГруппыПоказателейПоКодамСтрок;

КонецФункции

Процедура ДополнитьПланДереваДанныхОтчетаГруппой(План, Группа, ЗаписьОтчета, ЗаполняемыеПоказатели)
	
	ПланГруппы = План.Строки.Добавить();
	ПланГруппы.ЗаполняемыеДанные = Группа;
	ПланГруппы.ЗаписьОтчета      = ЗаписьОтчета;
	
	ВыводимыеПоказатели = ВыводимыеПоказатели(ПланГруппы.ЗаполняемыеДанные, ЗаполняемыеПоказатели);
	СтрокиПоказателейГруппы = СоздатьВписываемыеСтроки(ПланГруппы.ЗаписьОтчета, ВыводимыеПоказатели.Количество());
	Если СтрокиПоказателейГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВГраница = Мин(СтрокиПоказателейГруппы.ВГраница(), ВыводимыеПоказатели.ВГраница()); // может быть ограничено лимитом ГИРБО
	
	Для ИндексПоказателя = 0 По ВГраница Цикл
		Показатель = ВыводимыеПоказатели[ИндексПоказателя];
		ПланПоказателя = ПланГруппы.Строки.Добавить();
		ПланПоказателя.ЗаполняемыеДанные = Показатель;
		ПланПоказателя.ЗаписьОтчета      = СтрокиПоказателейГруппы[ИндексПоказателя];
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьРазделОтчетаЗаполняемымиПоказателями(ОписаниеРаздела, ЗаполняемыеПоказатели) Экспорт
	
	ПланРазмещения = ПланРазделаДереваДанныхОтчета(ОписаниеРаздела, ЗаполняемыеПоказатели);
	Для Каждого ПланГруппы Из ПланРазмещения.Строки Цикл
		
		НаименованиеГруппы = НаименованиеГруппыПоказателей(ПланГруппы.ЗаполняемыеДанные, ЗаполняемыеПоказатели);
		
		УстановитьНаименованиеСтроки(ПланГруппы.ЗаписьОтчета, НаименованиеГруппы);
			
		Для Каждого ПланПоказателя Из ПланГруппы.Строки Цикл
			
			УстановитьНаименованиеСтроки(ПланПоказателя.ЗаписьОтчета, ПланПоказателя.ЗаполняемыеДанные.Наименование);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтейнер(ОписаниеРаздела, РезультатЗаполнения, ЗаполняемыеПоказатели, НомерГрафыЗначений) Экспорт
	
	ПланРаздела = ПланРазделаДереваДанныхОтчета(ОписаниеРаздела, ЗаполняемыеПоказатели);
	ШаблонРасшифровкиМеханизм2011 = НовыйШаблонРасшифровкиМеханизм2011();
	
	Для Каждого ПланГруппы Из ПланРаздела.Строки Цикл
		
		ЗаписьЗначенияЗаполненияГруппы = ЗаписьЗначенияЗаполнения(
			РезультатЗаполнения.Значения,
			ПланГруппы.ЗаполняемыеДанные);
			
		Если ЗаписьЗначенияЗаполненияГруппы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЯчейкаГруппы = УстановитьЗначениеКонтейнера(
			ПланГруппы.ЗаписьОтчета,
			ЗаписьЗначенияЗаполненияГруппы,
			НомерГрафыЗначений,
			РезультатЗаполнения.Расшифровка,
			ШаблонРасшифровкиМеханизм2011);
			
		// В составе расшифровки группы (непосредственно в ячейку группы)
		// включаем и все расшифровки показателей - как выводимых в отчет, так и не выводимых
		Для Каждого ЗаписьЗначенияЗаполненияПоказателя Из ЗаписьЗначенияЗаполненияГруппы.Строки Цикл
			
			ДополнитьРасшифровкуКонтейнераЗначениемЗаполнения(
				ЯчейкаГруппы,
				ЗаписьЗначенияЗаполненияПоказателя,
				РезультатЗаполнения.Расшифровка,
				ШаблонРасшифровкиМеханизм2011);
				
		КонецЦикла;
		
		// Выводимые показатели (в ячеки выводимых показателей) будут содержать повтор расшифровки
		Для Каждого ПланПоказателя Из ПланГруппы.Строки Цикл
			
			ЗаписьЗначенияЗаполненияПоказателя = ЗаписьЗначенияЗаполнения(
				ЗаписьЗначенияЗаполненияГруппы,
				ПланПоказателя.ЗаполняемыеДанные);
				
			УстановитьЗначениеКонтейнера(
				ПланПоказателя.ЗаписьОтчета,
				ЗаписьЗначенияЗаполненияПоказателя,
				НомерГрафыЗначений,
				РезультатЗаполнения.Расшифровка,
				ШаблонРасшифровкиМеханизм2011);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьЗначениеКонтейнера(ЗаписьОтчета, ЗаписьЗначенияЗаполнения, НомерГрафыЗначений, ДанныеРасшифровки, ШаблонРасшифровкиМеханизм2011)
	
	Если ЗаписьЗначенияЗаполнения = Неопределено Тогда
		Значение = Неопределено;
	Иначе
		Значение = ЗаписьЗначенияЗаполнения.Значение;
	КонецЕсли;
	
	ЯчейкаЗначения = ЯчейкаОтчета(ЗаписьОтчета, НомерГрафыЗначений);
	
	УстановитьЗначениеЯчейки(ЯчейкаЗначения, Значение);
	ОчиститьРасшифровкуЯчейки(ЯчейкаЗначения);
	
	Если ЗаписьЗначенияЗаполнения <> Неопределено Тогда
		ДополнитьРасшифровкуКонтейнераЗначениемЗаполнения(ЯчейкаЗначения, ЗаписьЗначенияЗаполнения, ДанныеРасшифровки, ШаблонРасшифровкиМеханизм2011);
	КонецЕсли;
	
	Возврат ЯчейкаЗначения;
	
КонецФункции

Процедура ДополнитьРасшифровкуКонтейнераЗначениемЗаполнения(ЯчейкаЗначения, ЗаписьЗначенияЗаполнения, ДанныеРасшифровки, ШаблонРасшифровкиМеханизм2011)
	
	ЗаписиРасшифровки = ЗаписьЗначенияЗаполнения.Расшифровка;
	
	ДополнитьРасшифровкуКонтейнера(ЯчейкаЗначения, ЗаписиРасшифровки, ДанныеРасшифровки, ШаблонРасшифровкиМеханизм2011);
	
КонецПроцедуры

Процедура ДополнитьРасшифровкуКонтейнера(ЯчейкаЗначения, ЗаписиРасшифровки, ДанныеРасшифровки, ШаблонРасшифровкиМеханизм2011)
	
	Для Каждого ЗаписьРасшифровки Из ЗаписиРасшифровки Цикл
		ОберткаРасшифровки = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРасшифровкиМеханизм2011);
		БухгалтерскаяОтчетностьБРОПереопределяемый.ПриУстановкеРасшифровкиЗаполненияМеханизм2011(ОберткаРасшифровки, ЗаписьРасшифровки, ДанныеРасшифровки);
		УстановитьРасшифровкуЯчейки(ЯчейкаЗначения, ОберткаРасшифровки);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьРасшифровкуЯчейки(ЯчейкаЗначения, ЗаписьРасшифровки)
	
	Если Не ЭтоЯчейкаПоказателя(ЯчейкаЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьКонтейнера = ЯчейкаЗначения.Строки.Добавить();
	ЗаписьКонтейнера.Тип    = "Расшифровка";
	ЗаписьКонтейнера.Данные = ЗаписьРасшифровки;
	
КонецПроцедуры

Процедура ОчиститьРасшифровкуЯчейки(ЯчейкаЗначения)

	Если Не ЭтоЯчейкаПоказателя(ЯчейкаЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиРасшифровки = ЯчейкаЗначения.Строки.НайтиСтроки(Новый Структура("Тип", "Расшифровка"));
	Для Каждого ЗаписьРасшифровки Из ЗаписиРасшифровки Цикл
		ЯчейкаЗначения.Строки.Удалить(ЗаписьРасшифровки);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйШаблонРасшифровкиМеханизм2011()
	
	ОберткаРасшифровки = Новый Структура;
	
	ОберткаРасшифровки.Вставить("НаименованиеПоказателя",  "");
	ОберткаРасшифровки.Вставить("ЗнакОперации",            "+");
	ОберткаРасшифровки.Вставить("НаименованиеСлагаемого",  "");
	ОберткаРасшифровки.Вставить("Сумма",                   0);
	ОберткаРасшифровки.Вставить("Организация",             Справочники.Организации.ПустаяСсылка());
	ОберткаРасшифровки.Вставить("ДополнительныеПараметры", Новый Структура);
	
	Возврат ОберткаРасшифровки;
	
КонецФункции

Функция ЭтоЯчейкаПоказателя(ЯчейкаЗначения)
	
	Возврат ЯчейкаЗначения <> Неопределено И ЯчейкаЗначения.Тип = "Показатель";
	
КонецФункции

Функция ЛимитВписываемыхПоказателей()
	Возврат 20; // См. формат ГИРБО: "Признак множественности элемента М может принимать значение от 0 до 20", где 0 по традиции обозначает, что значение может отсутствовать
КонецФункции

Функция ЛимитДетализирующихПоказателей(Раздел)
	
	// Определяется форматом ГИРБО
	Если Раздел = "Баланс" Тогда
		Возврат 30;// ОПП_ВПТип и ВписПоказТип: "Признак множественности элемента М может принимать значение от 0 до 30"
	ИначеЕсли Раздел = "ОФР" Тогда
		Возврат 36; // ОтчПредНДопТип и ВписПоказОтчТип формата ГИРБО: "Признак множественности элемента М может принимать значение от 0 до 36"
	ИначеЕсли Раздел = "ОИК" Тогда
		Возврат 30; // ДвижКапВПГод: "Признак множественности элемента М может принимать значение от 0 до 30"
	Иначе
		Возврат 0; // В формате "признак 0" по традиции обозначает, что значение может отсутствовать
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
