#Область ПрограммныйИнтерфейс

#Область Настройки

// Создает новую структуру настроек подключения к сервису 
// 
// Возвращаемое значение:
//   Структура:
//     * Логин  - Строка,
//     * Пароль - Строка.
//
Функция НовыеНастройкиСистемыБронирования() Экспорт
	
	Возврат Новый Структура("Логин,Пароль");
	
КонецФункции

// См. БронированиеКомандировокПереопределяемый.ЗаполнитьНастройкиСистемыБронирования.
Процедура ЗаполнитьНастройкиСистемыБронирования(Настройки, СистемаБронирования) Экспорт
	
	СтандартнаяОбработка = Истина;
	БронированиеКомандировокПереопределяемый.ЗаполнитьНастройкиСистемыБронирования(Настройки, СистемаБронирования, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	АвторизацияВСистемеБронирования.ЗаполнитьНастройкиСистемыБронирования(Настройки, СистемаБронирования);
	
КонецПроцедуры

// См. БронированиеКомандировокПереопределяемый.СохранитьНастройкиСистемыБронирования.
Процедура СохранитьНастройкиСистемыБронирования(Настройки, СистемаБронирования) Экспорт
	
	СтандартнаяОбработка = Истина;
	БронированиеКомандировокПереопределяемый.СохранитьНастройкиСистемыБронирования(Настройки, СистемаБронирования, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	АвторизацияВСистемеБронирования.СохранитьНастройкиСистемыБронирования(Настройки, СистемаБронирования);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИспользуемаяСистемаБронирования() Экспорт
	Возврат Перечисления.СистемыБронированияКомандировок.Smartway;
КонецФункции

Функция ТаблицаФизическихЛиц(ВключатьВложенные = Истина) Экспорт
	
	ДанныеФизическихЛиц = Новый ТаблицаЗначений;
	ДанныеФизическихЛиц.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ДанныеФизическихЛиц.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеФизическихЛиц.Колонки.Добавить("СотрудникСсылка", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	ДанныеФизическихЛиц.Колонки.Добавить("Фамилия", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("Отчество", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("ФамилияЛатиницей", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("ИмяЛатиницей", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("ОтчествоЛатиницей", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	ДанныеФизическихЛиц.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
	ДанныеФизическихЛиц.Колонки.Добавить("Гражданство", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
	
	ДанныеФизическихЛиц.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка"));
	ДанныеФизическихЛиц.Колонки.Добавить("EMail", Новый ОписаниеТипов("Строка"));
	
	Если ВключатьВложенные Тогда
		ДанныеФизическихЛиц.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	КонецЕсли;
	
	Возврат ДанныеФизическихЛиц;
	
КонецФункции

Функция ТаблицаДокументовФизическихЛиц() Экспорт
	
	ДокументыФизическихЛиц = Новый ТаблицаЗначений;
	
	ДокументыФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДокументыФизическихЛиц.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
	ДокументыФизическихЛиц.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(28));
	ДокументыФизическихЛиц.Колонки.Добавить("СрокДействияДокумента", Новый ОписаниеТипов("Дата"));
	
	Возврат ДокументыФизическихЛиц;
	
КонецФункции

#КонецОбласти