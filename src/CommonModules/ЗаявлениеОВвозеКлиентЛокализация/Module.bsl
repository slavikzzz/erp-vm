
#Область ПрограммныйИнтерфейс

// ++ НЕ УТ

// Процедура, вызываемая из одноименного обработчика события формы. 
//
// Параметры:
// 	ФормаДокумента			- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
// 	ИмяСобытия				- Строка - идентификатор сообщения принимающей формой (см. метод Оповестить).
// 	Параметр				- ДокументСсылка - параметр одноименного обработчика события формы.
// 	Источник				- ДокументСсылка - источник одноименного обработчика события формы.
Процедура ОбработкаОповещения(ФормаДокумента, ИмяСобытия, Параметр, Источник) Экспорт
	
	// ++ Локализация
	
	Если "СозданОтчетВФТС" = ИмяСобытия И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ЗаявлениеОВвозе = Неопределено;
		Параметр.Свойство("ЗаявлениеОВвозе", ЗаявлениеОВвозе);
		Если ЗаявлениеОВвозе = ФормаДокумента.Объект.Ссылка Тогда
			ФормаДокумента.ОтчетностьВФТС = Параметр.ОтчетВФТС;
			ФормаДокумента.Элементы.СоздатьСтатформуВФТС.Заголовок = НСтр("ru = 'Статформа в ФТС';
																			|en = 'Statistical form in FCS'");
		КонецЕсли;
		
	КонецЕсли;
	
	// -- Локализация
	
КонецПроцедуры

// Выгружает документ и сохраняет файл выгрузки.
//
// Параметры:
//	ФормаЗаявления	- ФормаКлиентскогоПриложения - Форма выгружаемого документа.
//
Процедура ВыгрузитьЗаявлениеОВвозе(ФормаЗаявления) Экспорт
	
	// ++ Локализация
	
	Если ФормаЗаявления.Модифицированность Тогда
		ФормаЗаявления.Записать();
	КонецЕсли;
		
	ВыгружаемыеДанные = ЗаявлениеОВвозеВызовСервера.ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(ФормаЗаявления.УникальныйИдентификатор, ФормаЗаявления.Объект.Ссылка);
	
	Если НЕ ВыгружаемыеДанные = Неопределено Тогда
		
		СохранитьВыгружаемыеДанные(ВыгружаемыеДанные);
		
	КонецЕсли;
	
	// -- Локализация
	
КонецПроцедуры

// Проверяет возможность выгрузки.
//
// Параметры:
//	ФормаЗаявления	- ФормаКлиентскогоПриложения - Форма выгружаемого документа.
//
Процедура ПроверитьВыгрузку(ФормаЗаявления) Экспорт
	
	// ++ Локализация
	
	Если ФормаЗаявления.Модифицированность Тогда
		ФормаЗаявления.Записать();
	КонецЕсли;
	ОчиститьСообщения();
	ВыгружаемыеДанные = ЗаявлениеОВвозеВызовСервера.ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(ФормаЗаявления.УникальныйИдентификатор, ФормаЗаявления.Объект.Ссылка, Истина);
	
	Если НЕ ВыгружаемыеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибок не обнаружено.';
									|en = 'No errors detected.'"));
		
	КонецЕсли;
	
	// -- Локализация
	
КонецПроцедуры

// Открывает форму ранее созданного (или нового) регламентированного отчета "Статистическая форма учета перемещения товаров" или открывает форму .
//
// Параметры:
//	ФормаЗаявления - ФормаКлиентскогоПриложения - Форма документа заявления о ввозе товаров, для которого необходимо сформировать статформу перемещения товаров.
//
Процедура СоздатьСтатформуВФТС(ФормаЗаявления) Экспорт
	
	// ++ Локализация
	
	Если ФормаЗаявления.Модифицированность Тогда
		ФормаЗаявления.Записать();
	КонецЕсли;
	
	ЗаявлениеОВвозе = ФормаЗаявления.Объект;
	
	Если НЕ ЗначениеЗаполнено(ФормаЗаявления.ОтчетностьВФТС) Тогда
		Попытка
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоМесяца(ЗаявлениеОВвозе.Дата));
			ПараметрыФормы.Вставить("мСохраненныйДок",          Неопределено);
			ПараметрыФормы.Вставить("мСкопированаФорма",        Неопределено);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецМесяца(ЗаявлениеОВвозе.Дата));
			ПараметрыФормы.Вставить("мПериодичность",           ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
			ПараметрыФормы.Вставить("Организация",              ЗаявлениеОВвозе.Организация);
			ПараметрыФормы.Вставить("мВыбраннаяФорма",          "ФормаОтчетаПоЗаявлениюОВвозеТоваров");
			ПараметрыФормы.Вставить("ЗаявлениеОВвозеТоваров",   ЗаявлениеОВвозе.Ссылка);
			ПараметрыФормы.Вставить("НужноОповещатьОСоздании");
			
			ОткрытьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаОтчетаПоЗаявлениюОВвозеТоваров", ПараметрыФормы);
			
		Исключение
								
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Открытие статформы перемещения товаров';
					|en = 'Open statistical form for goods transfer'"),
				"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось открыть форму отчета ""Статистическая форма учета перемещения товаров"".';
															|en = 'Cannot open the ""Statistical form of goods transfer accounting"" report form.'"));
			
		КонецПопытки;
	Иначе
		ПоказатьЗначение(, ФормаЗаявления.ОтчетностьВФТС);
	КонецЕсли;
	
	// -- Локализация
	
КонецПроцедуры

// Отправляет извещение в контролирующий орган.
//
// Параметры:
//	ФормаЗаявления	- ФормаКлиентскогоПриложения - Форма документа заявления о ввозе товаров, которое необходимо отправить.
//
Процедура ОбновитьОтправку(ФормаЗаявления) Экспорт
	
	// ++ Локализация
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ФормаЗаявления, "ФНС");
	// -- Локализация
	
КонецПроцедуры

// Открывает протокол отправки извещения в контролирующий орган.
//
// Параметры:
//	ФормаЗаявления - ФормаКлиентскогоПриложения - Форма документа заявления о ввозе товаров, которое необходимо отправить.
//
Процедура ГиперссылкаПротоколНажатие(ФормаЗаявление) Экспорт
	
	// ++ Локализация
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ФормаЗаявление, "ФНС");	
	// -- Локализация
	
КонецПроцедуры

// Отправляет извещение в контролирующий орган.
//
// Параметры:
//	ФормаЗаявления	- ФормаКлиентскогоПриложения - Форма документа заявления о ввозе товаров, которое необходимо отправить.
//
Процедура ОтправитьНеотправленноеИзвещение(ФормаЗаявления) Экспорт
	
	// ++ Локализация
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ФормаЗаявления, "ФНС");
	// -- Локализация
	
КонецПроцедуры

// Отображает статус отправки извещения в контролирующий орган.
//
// Параметры:
//	ФормаЗаявления - ФормаКлиентскогоПриложения - Форма документа заявления о ввозе товаров, которое необходимо отправить.
//
Процедура ЭтапыОтправкиНажатие(ФормаЗаявления) Экспорт
	
	// ++ Локализация
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ФормаЗаявления, "ФНС");
	// -- Локализация
	
КонецПроцедуры

// Открывает ошибки, возникшие при отправки извещения в контролирующий орган.
//
// Параметры:
//	ФормаЗаявления - ФормаКлиентскогоПриложения - Форма документа заявления о ввозе товаров, которое необходимо отправить.
//
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(ФормаЗаявления, СтандартнаяОбработка) Экспорт
	
	// ++ Локализация
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ФормаЗаявления, "ФНС");
	// -- Локализация
	
КонецПроцедуры

// -- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ++ Локализация
// ++ НЕ УТ

Процедура СохранитьВыгружаемыеДанные(ВыгружаемыеДанные)
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		Попытка
			
			ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
			ФайловаяСистемаКлиент.СохранитьФайл(
				Неопределено, ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки, ПараметрыСохранения);
			
		Исключение
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Сохранение файла выгрузки заявления о ввозе';
					|en = 'Save the import application export file'"),
				"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось записать файл %1.
									| Возможно, недостаточно места на диске или диск защищен от записи.';
									|en = 'Cannot save file %1.
									|There may not be enough space on the disk or the disk is write protected.'"),
								ФайлВыгрузки.ИмяФайлаВыгрузки));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// -- НЕ УТ
// -- Локализация

#КонецОбласти
