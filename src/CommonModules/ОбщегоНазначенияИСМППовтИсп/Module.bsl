
#Область СлужебныйПрограммныйИнтерфейс

#Область РазрешительныйРежимРозничнойПродажи

// Возвращает параметры включения аварийного режима
// 
// Возвращаемое значение:
//  см. ПараметрыАварийногоРежима
Функция ДанныеНастройкиАварийногоРежима() Экспорт
	
	ДанныеАварийногоРежима = ПараметрыАварийногоРежима();
	
	ДанныеАварийногоРежима.ДатаОкончания = 
		ОбщегоНазначенияИСМПВызовСервера.НастройкиСканированияКодовМаркировки().АварийноеОтключенияРазрешительногоРежимаДоУниверсальнаяДата;
	
	Если ТекущаяУниверсальнаяДата() < ДанныеАварийногоРежима.ДатаОкончания Тогда
		ДанныеАварийногоРежима.Включено = Истина;
	Иначе
		ДанныеАварийногоРежима.ДатаОкончания = Дата(1, 1, 1);
	КонецЕсли;
	
	Возврат ДанныеАварийногоРежима;
	
КонецФункции

// Возвращает признак, поддерживает ли БПО логирование проверок КМ и проверку КМ единым методом
// 
// Возвращаемое значение:
//  Булево - Истина, если версия БПО выше 3.2.2.24
Функция ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом() Экспорт
	
	ВерсияБПО        = МенеджерОборудованияВызовСервера.ВерсияБиблиотеки();
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБПО, "3.2.2.24") >= 0;
	
КонецФункции

// Возвращает признак, нужно ли писать данные успешных операций сканирования в РС ОперацииПроверкиКМ при настройке
// Проверка кодов маркировки средствами ККТ = Перед пробитием чека.
// 
// Возвращаемое значение:
//  Булево - Истина, если установлена нужная версия БПО, есть где хранить логи, Проверка кодов маркировки средствами ККТ = Перед пробитием чека и
//  включена настройка Хранить успешные операции при разрешительном режиме
Функция ХранитьУспешныеОперацииПриПроверкеКМ() Экспорт
	
	ВерсияБПО        = МенеджерОборудованияВызовСервера.ВерсияБиблиотеки();
	
	Если Не ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБПО, "3.2.2.24") >= 0 Тогда
		Возврат Ложь;
	Иначе
		
		//@skip-check wrong-string-literal-content
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияМаркировка");
		//@skip-check unknown-method-property
		Возврат МодульМенеджерОборудованияМаркировка.ХранитьУспешныеОперацииРазрешения();
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КонтрольПоВидамПродукции

// Функция возвращает признак необходимости получения КМ в зависимости от вида операции
// Возможность оборота регулируется настройками дат в рабочем месте Интеграция ИС МП (обувь, одежда, табак...)
//  и текущим законодательством.
// 
// Параметры:
//  ВидОперации     - ПеречислениеСсылка.ВидыОперацийИСМП - вид операции
//  ВидПродукции    - ПеречислениеСсылка.ВидыПродукцииИС  - вид маркируемой продукции
//  НаДату          - Неопределено, Дата                  - дата контроля
// 
// Возвращаемое значение:
//  Булево - Истина, если для данной операции требуется контролировать наличие марок
Функция ДействуетКонтрольПоВидуОперацииИПродукции(ВидОперации, ВидПродукции, НаДату = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДействуетКонтроль    = Ложь;
	
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ДействуетКонтроль = Истина;
	ИначеЕсли Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда
		ДействуетКонтроль = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
			Или ВидОперации = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации Тогда
		ДействуетКонтроль = ДействуетУведомительныйРежимПоВидуПродукции(ВидПродукции, НаДату);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
			Или ВидОперации = Перечисления.ВидыОперацийИСМП.ВозвратВОборот Тогда
		ДействуетКонтроль = ДействуетКонтрольПриПродажеОптомПоштучно(ВидПродукции, НаДату) Или ДействуетКонтрольПриПродажеОптомПоОСУ(ВидПродукции, НаДату);
	Иначе
		ДействуетКонтроль = Истина;
	КонецЕсли;
	
	Возврат ДействуетКонтроль;
	
КонецФункции

// Функция возвращает признак возможности продажи и оборота немаркируемых остатков маркируемой продукции
// Возможность оборота регулируется настройкой даты в рабочем месте Интеграция ИС МП (обувь, одежда, табак...)
//  и текущим законодательством.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//  НаДату       - Неопределено, Дата                 - дата контроля
// 
// Возвращаемое значение:
//  Булево - Истина, если разрешен оборот немаркируемых остатков продукции
Функция РазрешенОборотНемаркируемыхОстатковПродукции(ВидПродукции, НаДату = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураДатКонтроля                 = РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ДатыРаздельногоКонтроляМаркируемойПродукции(ВидПродукции);
	РазрешенОборотНемаркируемойПродукции = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураДатКонтроля.ДатаЗапретПродажиНемаркированныхОстатков)
		И СтруктураДатКонтроля.ДатаЗапретПродажиНемаркированныхОстатков > НаДату Тогда
		РазрешенОборотНемаркируемойПродукции = Истина;
	КонецЕсли;
	
	Возврат РазрешенОборотНемаркируемойПродукции;
	
КонецФункции

// Функция возвращает признак действия уведомительного режима на указаннную дату
// Возможность оборота регулируется настройкой даты в рабочем месте Интеграция ИС МП (обувь, одежда, табак...)
//  и текущим законодательством.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//  НаДату       - Неопределено, Дата                 - дата контроля
// 
// Возвращаемое значение:
//  Булево - Истина, если уведомительный режим уже вступил в силу
Функция ДействуетУведомительныйРежимПоВидуПродукции(ВидПродукции, НаДату = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураДатКонтроля         = РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ДатыРаздельногоКонтроляМаркируемойПродукции(ВидПродукции);
	ДействуетУведомительныйРежим = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураДатКонтроля.ДатаРозницаУведомительныйРежим)
		И СтруктураДатКонтроля.ДатаРозницаУведомительныйРежим <= НаДату Тогда
		ДействуетУведомительныйРежим = Истина;
	КонецЕсли;
	
	Возврат ДействуетУведомительныйРежим;
	
КонецФункции

// Функция возвращает признак действия контроля поштучно при продаже оптом на указаннную дату
// Возможность оборота регулируется настройкой даты в рабочем месте Интеграция ИС МП (обувь, одежда, табак...)
//  и текущим законодательством.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//  НаДату       - Неопределено, Дата                 - дата контроля
// 
// Возвращаемое значение:
//  Булево - Истина, если контроль уже вступил в силу
Функция ДействуетКонтрольПриПродажеОптомПоштучно(ВидПродукции, НаДату = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураДатКонтроля           = РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ДатыРаздельногоКонтроляМаркируемойПродукции(ВидПродукции);
	ДействуетКонтрольОптомПоштучно = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураДатКонтроля.ДатаОптКонтрольПоштучно)
		И СтруктураДатКонтроля.ДатаОптКонтрольПоштучно <= НаДату Тогда
		ДействуетКонтрольОптомПоштучно = Истина;
	КонецЕсли;
	
	Возврат ДействуетКонтрольОптомПоштучно;
	
КонецФункции

// Функция возвращает признак действия контроля по ОСУ при продаже оптом на указаннную дату
// Возможность оборота регулируется настройкой даты в рабочем месте Интеграция ИС МП (обувь, одежда, табак...)
//  и текущим законодательством.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//  НаДату       - Неопределено, Дата                 - дата контроля
// 
// Возвращаемое значение:
//  Булево - Истина, если контроль уже вступил в силу
Функция ДействуетКонтрольПриПродажеОптомПоОСУ(ВидПродукции, НаДату = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураДатКонтроля        = РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ДатыРаздельногоКонтроляМаркируемойПродукции(ВидПродукции);
	ДействуетКонтрольОптомПоОСУ = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураДатКонтроля.ДатаОптКонтрольОСУ)
		И СтруктураДатКонтроля.ДатаОптКонтрольОСУ <= НаДату Тогда
		ДействуетКонтрольОптомПоОСУ = Истина;
	КонецЕсли;
	
	Возврат ДействуетКонтрольОптомПоОСУ;
	
КонецФункции

// Функция возвращает признак действия контроля перемещений между МОД на указаннную дату
// Возможность оборота регулируется настройкой даты в рабочем месте Интеграция ИС МП (обувь, одежда, табак...)
//  и текущим законодательством.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//  НаДату       - Неопределено, Дата                 - дата контроля
// 
// Возвращаемое значение:
//  Булево - Истина, если контроль уже вступил в силу
Функция ДействуетКонтрольПеремещенийМеждуМОД(ВидПродукции, НаДату = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураДатКонтроля        = РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ДатыРаздельногоКонтроляМаркируемойПродукции(ВидПродукции);
	ДействуетКонтрольПоМОД = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураДатКонтроля.ДатаПрослеживаемостьПеремещенияМеждуМОД)
		И СтруктураДатКонтроля.ДатаПрослеживаемостьПеремещенияМеждуМОД <= НаДату Тогда
		ДействуетКонтрольПоМОД = Истина;
	КонецЕсли;
	
	Возврат ДействуетКонтрольПоМОД;
	
КонецФункции

// Возвращает дату начала контроля поэкземплярного учета маркируемой продукции
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// 
// Возвращаемое значение:
//  Дата - Дата начала контроля
Функция ДатаНачалаКонтроляПриПродажеОптомПоштучно(ВидПродукции) Экспорт
	
	СтруктураДатКонтроля = РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ДатыРаздельногоКонтроляМаркируемойПродукции(ВидПродукции);
	
	Возврат СтруктураДатКонтроля.ДатаОптКонтрольПоштучно;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазрешительныйРежимРозничнойПродажи

// Настройки аварийного режима разрешительной системы розничных продаж
// 
// Возвращаемое значение:
//  Структура - Параметры аварийного режима:
// * ДатаОкончания - Дата - универсальная дата окончания аварийного режима
// * Включено - Булево - признак активности аварийного режима
Функция ПараметрыАварийногоРежима() Экспорт
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("ДатаОкончания", Дата(1, 1, 1));
	СтруктураВозврата.Вставить("Включено",      Ложь);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

