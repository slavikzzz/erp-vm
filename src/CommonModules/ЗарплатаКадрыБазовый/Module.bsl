
#Область СлужебныйПрограммныйИнтерфейс

Функция ОтветственныеЛицаОрганизации(Организация, Сведения, ДатаСведений) Экспорт
	
	ОтветственныеЛица = Новый Структура();
	ОтветственныеЛица.Вставить("Руководитель", Справочники.ФизическиеЛица.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьРуководителя", Справочники.Должности.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьРуководителяСтрокой", "");
	ОтветственныеЛица.Вставить("ГлавныйБухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьГлавногоБухгалтера", Справочники.Должности.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьГлавногоБухгалтераСтрокой", "");
	ОтветственныеЛица.Вставить("Кассир", Справочники.ФизическиеЛица.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьКассира", Справочники.Должности.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьКассираСтрокой", "");
	
	ОтветственныеЛица.Вставить("Организация", Организация);
	ЗарплатаКадрыПереопределяемый.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаСведений);
	ОтветственныеЛица.Удалить("Организация");
	
	Если ОтветственныеЛица.ДолжностьРуководителяСтрокой = ""
		И ОтветственныеЛица.ДолжностьРуководителя <> Справочники.Должности.ПустаяСсылка() Тогда
		ОтветственныеЛица.ДолжностьРуководителяСтрокой = Строка(ОтветственныеЛица.ДолжностьРуководителя);
	КонецЕсли;
	Если ОтветственныеЛица.ДолжностьГлавногоБухгалтераСтрокой = ""
		И ОтветственныеЛица.ДолжностьГлавногоБухгалтера <> Справочники.Должности.ПустаяСсылка() Тогда
		ОтветственныеЛица.ДолжностьГлавногоБухгалтераСтрокой = Строка(ОтветственныеЛица.ДолжностьГлавногоБухгалтера);
	КонецЕсли;
	Если ОтветственныеЛица.ДолжностьКассираСтрокой = ""
		И ОтветственныеЛица.ДолжностьКассира <> Справочники.Должности.ПустаяСсылка() Тогда
		ОтветственныеЛица.ДолжностьКассираСтрокой = Строка(ОтветственныеЛица.ДолжностьКассира);
	КонецЕсли;
	
	Возврат ОтветственныеЛица;
	
КонецФункции

Функция УсловияЗапросаПроверкиНеобходимостиЗаполненияПодчиненныхПодразделений(Запрос, ИсточникДанных) Экспорт
	
	ВыполняетсяЗаписьОрганизации = (ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.Организации"));
	
	СписокУсловий = Новый Массив;
	
	СписокУсловий.Добавить("ПодразделенияОрганизаций.РайонныйКоэффициент <> &РайонныйКоэффициент");
	Запрос.УстановитьПараметр("РайонныйКоэффициент", ИсточникДанных.РайонныйКоэффициент);
	
	СписокУсловий.Добавить("ПодразделенияОрганизаций.РайонныйКоэффициентРФ <> &РайонныйКоэффициентРФ");
	Запрос.УстановитьПараметр("РайонныйКоэффициентРФ", ИсточникДанных.РайонныйКоэффициентРФ);
	
	СписокУсловий.Добавить("ПодразделенияОрганизаций.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане");
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ИсточникДанных.РегистрацияВНалоговомОргане);

	Если НЕ ВыполняетсяЗаписьОрганизации Тогда
		СписокУсловий.Добавить("ПодразделенияОрганизаций.ПрименяемыйЛьготныйТерриториальныйТариф <> &ПрименяемыйЛьготныйТерриториальныйТариф");
		Запрос.УстановитьПараметр("ПрименяемыйЛьготныйТерриториальныйТариф", ИсточникДанных.ПрименяемыйЛьготныйТерриториальныйТариф);
		СписокУсловий.Добавить("ПодразделенияОрганизаций.СамостоятельнаяКлассификационнаяЕдиница <> &СамостоятельнаяКлассификационнаяЕдиница");
		Запрос.УстановитьПараметр("СамостоятельнаяКлассификационнаяЕдиница", ИсточникДанных.СамостоятельнаяКлассификационнаяЕдиница);
	КонецЕсли;
	
	Возврат СписокУсловий;

КонецФункции

Процедура ЗаполнитьПодчиненноеПодразделение(ПодразделениеОбъект, ИсточникДанных) Экспорт
	
	ВыполняетсяЗаписьОрганизации = (ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.Организации"));
	
	ПодразделениеОбъект.РайонныйКоэффициент = ИсточникДанных.РайонныйКоэффициент;
	ПодразделениеОбъект.РайонныйКоэффициентРФ = ИсточникДанных.РайонныйКоэффициентРФ;
	ПодразделениеОбъект.РегистрацияВНалоговомОргане = ИсточникДанных.РегистрацияВНалоговомОргане;
	
	Если НЕ ВыполняетсяЗаписьОрганизации Тогда
		ПодразделениеОбъект.ПрименяемыйЛьготныйТерриториальныйТариф = ИсточникДанных.ПрименяемыйЛьготныйТерриториальныйТариф;
		ПодразделениеОбъект.СамостоятельнаяКлассификационнаяЕдиница = ИсточникДанных.СамостоятельнаяКлассификационнаяЕдиница;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОбъектЗарплатноКадровойБиблиотеки(ПолноеИмяОбъектаМетаданных) Экспорт
	
	Возврат ЗарплатаКадры.ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, "ЗарплатаКадрыПриложения,ЗарплатаКадрыПодсистемы");
	
КонецФункции

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	Возврат СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
КонецФункции

// См. ЗарплатаКадры.ИспользуютсяДокументыОплатыВедомостей.
Функция ИспользуютсяДокументыОплатыВедомостей() Экспорт
	Возврат Истина;
КонецФункции

// Получает информацию о начислениях.
Процедура ПриОпределенииИнформацииОНачислениях(Кэш, Результат, СсылкиНачислений) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
	|	Начисления.ОсновнойВидРасчета КАК ОсновнойВидРасчета,
	|	Начисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	Начисления.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	Начисления.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&СсылкиНачислений)";
	Запрос.УстановитьПараметр("СсылкиНачислений", СсылкиНачислений);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если СсылкиНачислений.Найти(ПланыВидовРасчета.Начисления.ПустаяСсылка()) <> Неопределено Тогда
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Ссылка = ПланыВидовРасчета.Начисления.ПустаяСсылка()
	КонецЕсли;
	
	Массив = ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
	Для Каждого ЗначенияРеквизитов Из Массив Цикл
		ЗначенияРеквизитов.Вставить("ЭтоНачисление", Истина);
		Кэш.Вставить(ЗначенияРеквизитов.Ссылка, ЗначенияРеквизитов);
		Результат.Вставить(ЗначенияРеквизитов.Ссылка, ЗначенияРеквизитов);
		ЗначенияРеквизитов.Удалить("Ссылка");
	КонецЦикла;
КонецПроцедуры

// Получает информацию об удержаниях.
Процедура ПриОпределенииИнформацииОбУдержаниях(Кэш, Результат, СсылкиУдержаний) Экспорт
	Для Каждого Ссылка Из СсылкиУдержаний Цикл
		Кэш.Вставить(Ссылка, Неопределено);
		Результат.Вставить(Ссылка, Неопределено);
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораСправочникаОрганизации(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетОтчитывающихсяПоВзносамОрганизаций") Тогда
		ТолькоСамостоятельныеОрганизации = Ложь;
		Параметры.Свойство("ТолькоСамостоятельныеОрганизации", ТолькоСамостоятельныеОрганизации);
		ГоловнаяОрганизация = Неопределено;
		Параметры.Отбор.Свойство("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
		Если ТолькоСамостоятельныеОрганизации = Истина И ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = УчетСтраховыхВзносов.СамостоятельныеПодразделенияОрганизации(ГоловнаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область БлокФункцийПолученияЗначенийПоУмолчанию

Процедура ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений) Экспорт
	
	Если ЗаполняемыеЗначения.Свойство("Год") Тогда
		ЗаполняемыеЗначения.Год = Год(ДатаЗначений);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("Месяц") Тогда
		ЗаполняемыеЗначения.Месяц = НачалоМесяца(ДатаЗначений);
	КонецЕсли;
		Если ЗаполняемыеЗначения.Свойство("Квартал") Тогда
		ЗаполняемыеЗначения.Квартал = НачалоКвартала(ДатаЗначений);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийГод") Тогда
		ЗаполняемыеЗначения.ПредыдущийГод = Год(ДатаЗначений) - 1;
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийМесяц") Тогда
		ЗаполняемыеЗначения.ПредыдущийМесяц = НачалоМесяца(НачалоМесяца(ДатаЗначений) - 1);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийКвартал") Тогда
		ЗаполняемыеЗначения.ПредыдущийКвартал = НачалоКвартала(НачалоКвартала(ДатаЗначений) - 1);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ДатаСобытия") Тогда
		ЗаполняемыеЗначения.ДатаСобытия = ДатаЗначений;
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("Ответственный") Тогда
		ЗаполняемыеЗначения.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("МесяцРасчета") Тогда
		ЗаполняемыеЗначения.МесяцРасчета = НачалоМесяца(ДатаЗначений);
		// Для упрощения берем усредненный день планируемой выплаты зарплаты
		ДеньВыплатыЗарплаты = 13;
		Если День(ДатаЗначений) <= ДеньВыплатыЗарплаты Тогда
			ЗаполняемыеЗначения.МесяцРасчета = ДобавитьМесяц(ЗаполняемыеЗначения.МесяцРасчета, -1);
		КонецЕсли;
	КонецЕсли;
	
	// Значение организации известно - получим зависящие от нее значения.
	ОрганизацияСсылка = НеОпределено;
	Если (ЗаполняемыеЗначения.Свойство("Организация", ОрганизацияСсылка) И ЗначениеЗаполнено(ОрганизацияСсылка)) Тогда
		
		Если ЗаполняемыеЗначения.Свойство("НаименованиеПФР") Тогда
			НаименованиеПФР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "НаименованиеТерриториальногоОрганаПФР");
			ЗаполняемыеЗначения.НаименованиеПФР = ?(НаименованиеПФР = Неопределено, "", НаименованиеПФР);
		КонецЕсли;
		
		Если ЗаполняемыеЗначения.Свойство("НаименованиеТерриториальногоОрганаФСС") Тогда
			НаименованиеТерриториальногоОрганаФСС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "НаименованиеТерриториальногоОрганаФСС");
			ЗаполняемыеЗначения.НаименованиеТерриториальногоОрганаФСС = ?(НаименованиеТерриториальногоОрганаФСС = Неопределено, "", НаименованиеТерриториальногоОрганаФСС);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Организация") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Организация"]) Тогда
		ЗаполняемыеЗначения.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Подразделение") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Подразделение"]) Тогда
		ЗаполняемыеЗначения.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ГруппаДоступа") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ГруппаДоступа"]) Тогда
		ЗаполняемыеЗначения.ГруппаДоступа = Справочники.ГруппыДоступаФизическихЛиц.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Руководитель") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Руководитель"]) Тогда
		ЗаполняемыеЗначения.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ДолжностьРуководителя") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ДолжностьРуководителя"]) Тогда
		ЗаполняемыеЗначения.ДолжностьРуководителя = Справочники.Должности.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ГлавныйБухгалтер") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ГлавныйБухгалтер"]) Тогда
		ЗаполняемыеЗначения.ГлавныйБухгалтер = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Кассир") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Кассир"]) Тогда
		ЗаполняемыеЗначения.Кассир = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ДолжностьКассира") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ДолжностьКассира"]) Тогда
		ЗаполняемыеЗначения.ДолжностьКассира = Справочники.Должности.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("КоличествоСтавок") Тогда
		ЗаполняемыеЗначения.КоличествоСтавок = 1;
	КонецЕсли;
	
КонецПроцедуры

// Массив поддерживаемых идентификаторов значений по умолчанию.
Функция СписокДоступныхЗначенийПоУмолчанию() Экспорт
	ПоддерживаемыеИдентификаторы = Новый Массив();
	ПоддерживаемыеИдентификаторы.Добавить("Год");
	ПоддерживаемыеИдентификаторы.Добавить("Квартал");
	ПоддерживаемыеИдентификаторы.Добавить("Месяц");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийГод");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийМесяц");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийКвартал");
	ПоддерживаемыеИдентификаторы.Добавить("МесяцРасчета");
	ПоддерживаемыеИдентификаторы.Добавить("ДатаСобытия");
	ПоддерживаемыеИдентификаторы.Добавить("Ответственный");
	ПоддерживаемыеИдентификаторы.Добавить("НаименованиеПФР");
	ПоддерживаемыеИдентификаторы.Добавить("НаименованиеТерриториальногоОрганаФСС");
	ПоддерживаемыеИдентификаторы.Добавить("Организация");
	ПоддерживаемыеИдентификаторы.Добавить("Руководитель");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителя");
	ПоддерживаемыеИдентификаторы.Добавить("ГлавныйБухгалтер");
	ПоддерживаемыеИдентификаторы.Добавить("Кассир");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьКассира");
	ПоддерживаемыеИдентификаторы.Добавить("Подразделение");
	ПоддерживаемыеИдентификаторы.Добавить("ГруппаДоступа");
	ПоддерживаемыеИдентификаторы.Добавить("КоличествоСтавок");
	Возврат ПоддерживаемыеИдентификаторы;
	
КонецФункции

// Текущий расчетный месяц по умолчанию
Функция РасчетныйМесяц(Дата) Экспорт
	
	РасчетныйМесяц = НачалоМесяца(Дата);
	// Дефолтное значение
	ДеньВыплатыЗарплаты = 13;
	Если День(Дата) <= ДеньВыплатыЗарплаты Тогда
		РасчетныйМесяц = ДобавитьМесяц(РасчетныйМесяц, -1);
	КонецЕсли;
	
	Возврат РасчетныйМесяц;
	
КонецФункции

#КонецОбласти

#Область БазоваяФункциональность

Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ИсключаемыеИсточникиДанныхДатЗапретаИзмененияБЗК", "ЗарплатаКадры.УстановитьПараметрыСеанса");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииНеразделенныхПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Возврат; // Установка неразделенных параметров работы клиента не требуется.
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииРазделенныхПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ИнтеграцияКабинетСотрудникаОбсуждения.ПриДобавленииРазделенныхПараметровРаботыКлиентаПриЗапуске(Параметры);
	СЭДОФСС.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область БизнесПроцессыИЗадачи

// См. БизнесПроцессыИЗадачиПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаБизнесПроцессовИЗадач(Объект, Таблица) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Взаимодействия

// См. ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаВзаимодействий(Объект, Таблица) Экспорт
КонецПроцедуры

#КонецОбласти

#Область Пользователи

Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаНалогиИВзносыОбщиеДанные.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаНачисленияЗарплатыОбщиеДанные.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаПерсУчетаОбщиеДанные.Имя);
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзмененияДанных

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	Раздел = Разделы.Добавить();
	Раздел.Имя           = "БухгалтерскийУчетЗарплаты";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("b2f888d2-9f43-44ea-a9f0-ea5a31df8205");
	Раздел.Представление = НСтр("ru = 'Бухгалтерский учет зарплаты';
								|en = 'Salary bookkeeping'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
	Раздел = Разделы.Добавить();
	Раздел.Имя           = "Зарплата";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("d651f599-f0a4-4640-9de6-5bb1ee2d8e58");
	Раздел.Представление = НСтр("ru = 'Зарплата';
								|en = 'Salary'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
	Раздел = Разделы.Добавить();
	Раздел.Имя           = "ВыплатаЗарплаты";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("ade6947c-1148-45ac-ac11-082c1cfd7f8e");
	Раздел.Представление = НСтр("ru = 'Выплата зарплаты';
								|en = 'Payroll payment'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
	Раздел = Разделы.Добавить();
	Раздел.Имя           = "КадровыйУчет";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("d9eb8add-a951-4377-b3b7-afdb4df84006");
	Раздел.Представление = НСтр("ru = 'Кадровый учет';
								|en = 'Personnel records'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
	Раздел = Разделы.Добавить();
	Раздел.Имя           = "НДФЛ";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("3af3749a-c745-4487-adf2-8af2d67d9404");
	Раздел.Представление = НСтр("ru = 'НДФЛ';
								|en = 'PIT'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
	Раздел = Разделы.Добавить();
	Раздел.Имя           = "СтраховыеВзносы";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("c7546388-0906-4c52-b4fb-e65985234d0e");
	Раздел.Представление = НСтр("ru = 'Страховые взносы';
								|en = 'Insurance contributions'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	// Раздел Зарплата
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.БольничныйЛист",                                        "ПериодРегистрации", "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозмещениеБольничныхВЧастиФБ",                          "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов", "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение",          "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеСотрудникаНаВыплатуПособия",                   "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком",       "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИсполнительныйЛист",                                    "ДатаДействия",      "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий",           "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеЗарплаты",                                    "МесяцНачисления",   "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий",             "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Отпуск",                                                "ДатаЗапрета",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускБезСохраненияОплаты",                             "ПериодРегистрации", "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем",               "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий", "Дата",              "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.МинимальнаяОплатаТрудаРФ",                       "Период",            "Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеНачисления",                             "Период",            "Зарплата", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеУдержания",                              "Период",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеАвансы",                                 "Период",			"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.НачисленияУдержанияПоСотрудникам",             "Период",            "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ОтработанноеВремяПоСотрудникам",               "Период",            "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеНачисленияПоДоговорам",				   "МесяцНачисления",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОплаченныеДоговоры",							   "МесяцНачисления",	"Зарплата", "Организация");
	
	// Раздел ВыплатаЗарплаты
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыВБанк",                       "ПериодРегистрации", "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыВКассу",                      "ПериодРегистрации", "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников",              "Дата",              "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников",              "Дата",              "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодтверждениеЗачисленияЗарплаты",                       "Дата",              "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников",         "Дата",              "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками",      "Период",            "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыССотрудниками",                   "Период",            "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗарплатаКВыплате",                             "Период",            "ВыплатаЗарплаты",  "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗарплатаКВыплатеАвансом",                      "Период",            "ВыплатаЗарплаты",  "Организация");
	
	// Раздел БухгалтерскийУчетЗарплаты
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыОрганизаций", "Период",  "БухгалтерскийУчетЗарплаты", "Организация");
	
	// Раздел КадровыйУчет
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриемНаРаботу",                  	"ДатаЗапрета",	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КадровыйПеревод",                	"ДатаЗапрета",	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Увольнение",                     	"ДатаЗапрета",	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ВидыЗанятостиСотрудников",	"Период",		"КадровыйУчет", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КадроваяИсторияСотрудников",	"Период",		"КадровыйУчет", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ГражданствоФизическихЛиц",	"Период",		"КадровыйУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СогласиеНаПрисоединениеККЭДО",		"Дата",			"КадровыйУчет", "Организация");
	
	// Раздел НДФЛ
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратНДФЛ",                                              "Месяц",               "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ",        "ДатаЗапрета",         "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ",         "Дата",                "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОперацияНалоговогоУчетаПоНДФЛ",                            "ДатаОперации",        "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвансовыйПлатежИностранцаПоНДФЛ",                          "ДатаЗапрета",         "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПерерасчетНДФЛ",                                           "МесяцПерерасчета",    "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрекращениеСтандартныхВычетовНДФЛ",                        "ДатаЗапрета",         "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СведенияОДоходахСотрудникаДляСоцВыплат",                   "Дата",				 "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган",                    "Дата",				 "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ",             "ДатаЗапрета",         "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЕжегодныеСтандартныеВычеты",                               "ДатаЗапрета",         "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ИсторияРегистрацийВНалоговомОргане",                "Период",              "НДФЛ", "СтруктурнаяЕдиница");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ИсторияРегистрацийВНалоговомОргане",                "Период",              "НДФЛ", "СтруктурнаяЕдиница.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ",      "Период",              "НДФЛ", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ", "Период",              "НДФЛ", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ",          "Период",              "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению",      "Период",              "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ",        "Период",              "НДФЛ", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СведенияОДоходахНДФЛ",                            "Период",              "НДФЛ", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.НДФЛКПеречислению",                               "Период",              "НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.НДФЛПеречисленный",                               "Период",              "НДФЛ", "Организация");
	
	// Раздел СтраховыеВзносы
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОперацияУчетаПоСтраховымВзносам",                           "МесяцРасчетногоПериода",   "СтраховыеВзносы", "Организация");	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АктПроверкиСтраховыхВзносов",                               "ПериодРегистрации",        "СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПерерасчетСтраховыхВзносов",                                "ПериодРегистрации",        "СтраховыеВзносы", "Организация");	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам", "ДатаРегистрацииИзменений", "СтраховыеВзносы", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КлассыУсловийТрудаПоДолжностям",                     "ДатаРегистрацииИзменений", "СтраховыеВзносы", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ИсторияСамостоятельныхКлассификационныхЕдиниц",      "Период",                   "СтраховыеВзносы", "СтруктурнаяЕдиница.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтатусыЗастрахованныхФизическихЛиц",                 "ДатаРегистрацииИзменений", "СтраховыеВзносы", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов",                  "ДатаРегистрацииИзменений", "СтраховыеВзносы", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СведенияОбИнвалидностиФизическихЛиц",                "ДатаРегистрацииИзменений", "СтраховыеВзносы", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев",       "Период",                   "СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ИсчисленныеСтраховыеВзносы",                       "Период",                   "СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СтраховыеВзносыПоФизическимЛицам",                 "Период",                   "СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ПособияПоСоциальномуСтрахованию",                  "Период",                   "СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ПособияПоУходуЗаРебенком",                         "Период",                   "СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам",                "Период",                   "СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СведенияОДоходахСтраховыеВзносы",                  "Период",                   "СтраховыеВзносы", "Организация");
	
	// ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	ПерсонифицированныйУчет.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	// Конец ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахования.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
	// Выплата зарплаты для небольших организаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.Выплаты") Тогда
		МодульВыплатаЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ВыплатаЗарплатыДляНебольшихОрганизаций");
		МодульВыплатаЗарплатыДляНебольшихОрганизаций.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// Депоненты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		МодульУчетДепонированнойЗарплаты = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		МодульУчетДепонированнойЗарплаты.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ВзаиморасчетыССотрудникамиВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		МодульВзаиморасчеты = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХО");
		МодульВзаиморасчеты.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ОтражениеЗарплатыВБухгалтерскомУчете
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ОтражениеЗарплатыВБухгалтерскомУчете") Тогда
		МодульОтражениеЗарплатыВБухучете = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВБухучетеБазовый");
		МодульОтражениеЗарплатыВБухучете.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ДоговорыГПХ
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ДоговорыГПХ") Тогда
		МодульДоговорыГПХ = ОбщегоНазначения.ОбщийМодуль("ДоговорыГПХДляНебольшихОрганизаций");
		МодульДоговорыГПХ.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		МодульРезервОтпусков.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
		МодульРезервыПоОплатеТруда = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		МодульРезервыПоОплатеТруда.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.РегламентированнаяОтчетность
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетность") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РегламентированнаяОтчетностьПриложения");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц") Тогда
		МодульСемейныеПоложенияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СемейныеПоложенияФизическихЛиц");
		МодульСемейныеПоложенияФизическихЛиц.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ВоинскийУчет") Тогда
		МодульВоинскийУчет = ОбщегоНазначения.ОбщийМодуль("ВоинскийУчет");
		МодульВоинскийУчет.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КалендарныеГрафики

Процедура ПриОбновленииПроизводственныхКалендарей(УсловияОбновления) Экспорт
	
КонецПроцедуры

Процедура ПриОбновленииДанныхЗависимыхОтПроизводственныхКалендарей(УсловияОбновления) Экспорт
	
КонецПроцедуры

Процедура ПриЗаполненииИзменяемыхОбъектовЗависимыхОтПроизводственныхКалендарей(ИзменяемыеОбъекты) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияСправочниковПоОрганизации

Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Справочники.Сотрудники;
	СтрокаТаблицы.Реквизит = "ГоловнаяОрганизация";
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	#Область ЗарплатаКадрыПодсистемы
	
	// ЗарплатаКадрыПодсистемы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf48-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.СтатьиРасходовЗарплата);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbff5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.СтатьиФинансированияЗарплата);
	// Конец ЗарплатаКадрыПодсистемы
	
	// ЗарплатаКадрыПодсистемы.Выплаты.ВзаиморасчетыССотрудниками
	ВзаиморасчетыССотрудниками.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.Выплаты.ВзаиморасчетыССотрудниками
	
	// ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	ОбменСБанкамиПоЗарплатнымПроектам.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет
	КадровыйУчет.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	ПерсонифицированныйУчет.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахования.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	РасчетЗарплаты.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	
	// ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf24-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.АктПроверкиСтраховыхВзносов);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПерерасчетСтраховыхВзносов);
	// Конец ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛ
	УчетНДФЛ.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛ
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	УчетНДФЛДокументы.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	УчетСтраховыхВзносов.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	
	// ЗарплатаКадрыПодсистемы.ФизическиеЛица
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf6a-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыДокументовФизическихЛиц);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4e3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ФизическиеЛица);
	// Конец ЗарплатаКадрыПодсистемы.ФизическиеЛица
	
	// ЗарплатаКадрыПодсистемы.КадровыйЭДО
	КадровыйЭДО.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйЭДО
	
	// ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	ЗаявкиСотрудников.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	
	#КонецОбласти
	
	
	#Область ЗарплатаКадрыПриложения
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные") Тогда
		МодульБазовыеСправочныеДанные = ОбщегоНазначения.ОбщийМодуль("БазовыеСправочныеДанные");
		МодульБазовыеСправочныеДанные.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		МодульВзаиморасчетыССотрудникамиВХО = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХО");
		МодульВзаиморасчетыССотрудникамиВХО.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
		МодульЗарплатаКадрыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыДляНебольшихОрганизаций");
		МодульЗарплатаКадрыДляНебольшихОрганизаций.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		МодульРезервОтпусков.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		МодульРезервыПоОплатеТруда = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		МодульРезервыПоОплатеТруда.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодразделенияОрганизаций") Тогда
		МодульПодразделенияОрганизацийБЗК = ОбщегоНазначения.ОбщийМодуль("ПодразделенияОрганизацийБЗК");
		МодульПодразделенияОрганизацийБЗК.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		МодульУчетДепонированнойЗарплаты = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		МодульУчетДепонированнойЗарплаты.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетностьЗаполнение") Тогда
		МодульАвтоматическоеЗаполнениеОтчетности = ОбщегоНазначения.ОбщийМодуль("АвтоматическоеЗаполнениеОтчетности");
		МодульАвтоматическоеЗаполнениеОтчетности.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
		МодульОбразованияФизическихЛиц.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц") Тогда
		МодульСемейныеПоложенияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СемейныеПоложенияФизическихЛиц");
		МодульСемейныеПоложенияФизическихЛиц.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ВоинскийУчет") Тогда
		МодульВоинскийУчет = ОбщегоНазначения.ОбщийМодуль("ВоинскийУчет");
		МодульВоинскийУчет.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;

	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти


#Область ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	БанковскиеКарты.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты);
КонецПроцедуры

#КонецОбласти

#Область НастройкиПрограммы

// См. НастройкиПрограммыПереопределяемый.НастройкиПользователейИПравПриСозданииНаСервере.
Процедура НастройкиПользователейИПравПриСозданииНаСервере(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ЗащитаПерсональныхДанных") Тогда
		МодульЗащитаПерсональныхДанныхЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль(
			"ЗащитаПерсональныхДанныхЗарплатаКадры");
		МодульЗащитаПерсональныхДанныхЗарплатаКадры.ДобавитьРеквизитыЗащитыПерсональныхДанныхНаФормеНастройкиПользователейИПрав(
			Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТехнологияСервиса

// См. РаботаВМоделиСервисаПереопределяемый.ПриВключенииРазделенияПоОбластямДанных
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.УстановитьПраваПоУмолчанию
Процедура УстановитьПраваПоУмолчанию(Пользователь) Экспорт
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузкаДанных

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	
	Типы.Добавить(Метаданные.Справочники.ВидыДоходовНДФЛ);
	Типы.Добавить(Метаданные.Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК);
	Типы.Добавить(Метаданные.Справочники.ЗамещениеГосударственныхМуниципальныхДолжностейПФР);
	Типы.Добавить(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсии);
	Типы.Добавить(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК);
	Типы.Добавить(Метаданные.Справочники.ОснованияИсчисляемогоСтраховогоСтажа);
	Типы.Добавить(Метаданные.Справочники.ОснованияУвольнения);
	Типы.Добавить(Метаданные.Справочники.ТерриториальныеУсловияПФР);
	Типы.Добавить(Метаданные.Справочники.КлассификаторЗанятий);
	Типы.Добавить(Метаданные.Справочники.ПричиныУвольненияПФР);
	Типы.Добавить(Метаданные.Справочники.КодыДокументовКадровыхМероприятий);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
		МодульОбразованияФизическихЛиц.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц") Тогда
		МодульСемейныеПоложенияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СемейныеПоложенияФизическихЛиц");
		МодульСемейныеПоложенияФизическихЛиц.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых не требуется сопоставление ссылок
// при загрузке данных в другую информационную базу, т.к. корректное сопоставление ссылок
// гарантируется с помощью других механизмов.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, состоящие полностью из предопределенных
	// элементов.
	
	Типы.Добавить(Метаданные.Справочники.ВидыВычетовНДФЛ);
	Типы.Добавить(Метаданные.Справочники.ВидыДоходовПоСтраховымВзносам);
	Типы.Добавить(Метаданные.Справочники.ВидыТарифовСтраховыхВзносов);
	Типы.Добавить(Метаданные.Справочники.ОсобыеУсловияТрудаПФР);
	Типы.Добавить(Метаданные.Справочники.ОсобыеУсловияТрудаДляСЗВКПФР);
	Типы.Добавить(Метаданные.Справочники.ПараметрыИсчисляемогоСтраховогоСтажа);
	Типы.Добавить(Метаданные.Справочники.СтатусыНалогоплательщиковПоНДФЛ);
	
КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеДанные

Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ВыгрузитьДокумент.
Функция ВыгрузитьДокумент(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлДляОтправки = Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, ТипФайлаВыгрузки, КодировкаФайлаВыгрузки");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		ИнформацияОФайле = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайла;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла;
		ФайлДляОтправки.ТипФайлаВыгрузки = "СправкиНДФЛДляПередачиВНалоговыйОрган";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ") Тогда
		ИнформацияОФайле = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайла;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла;
		ФайлДляОтправки.ТипФайлаВыгрузки = "ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки; 	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СведенияОДоходахСотрудникаДляСоцВыплат") Тогда
		ИнформацияОФайле = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайла;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла;
		ФайлДляОтправки.ТипФайлаВыгрузки = "СведенияОДоходахСотрудникаДляСоцВыплат";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий") Тогда
		
		ФайлДляОтправки = Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПолучитьФайлДляОтправки(Ссылка);
		Если ФайлДляОтправки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ФайлДляОтправки;
		
	Иначе
		Возврат ПерсонифицированныйУчет.ВыгрузитьДокументы(Ссылка, УникальныйИдентификатор);		
	КонецЕсли;
	
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;
	
	ПустаяДата = '00010101000000';
	
	// Структура, в которой будут возвращаться найденные значения.
	ОргСведения = Новый Структура;
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Организация) Тогда
		Организация = Организация.ПолучитьОбъект();
	КонецЕсли;
	Если Организация = Неопределено Тогда
		Возврат ОргСведения;
	КонецЕсли;

	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("ТипНП");
		СписокПоказателей.Добавить("КатНП");
		СписокПоказателей.Добавить("КодНО");
		СписокПоказателей.Добавить("ОснВидДеят");
		СписокПоказателей.Добавить("ОКВЭД");
		СписокПоказателей.Добавить("ОснВидДеят2");
		СписокПоказателей.Добавить("ОКВЭД2");
		СписокПоказателей.Добавить("ОГРН");
		СписокПоказателей.Добавить("ОКАТО");
		СписокПоказателей.Добавить("ОКТМО");
		СписокПоказателей.Добавить("РегНомПФР");
		СписокПоказателей.Добавить("РегНомерСФР");
		СписокПоказателей.Добавить("РегНомерСФРГоловнойОрганизации");
		СписокПоказателей.Добавить("РегНомерСФРЗаСебя");
		СписокПоказателей.Добавить("ОКПО");
		СписокПоказателей.Добавить("ОКФС");
		СписокПоказателей.Добавить("ДатаРегистрации");
		СписокПоказателей.Добавить("АдрПочт");
		СписокПоказателей.Добавить("АдрПочт_XML");
		СписокПоказателей.Добавить("АдрПочт_JSON");
		СписокПоказателей.Добавить("СвидСН");
		СписокПоказателей.Добавить("СвидНО");
		СписокПоказателей.Добавить("СвидНОКод");
		СписокПоказателей.Добавить("НаимНО");
		СписокПоказателей.Добавить("НаимЮЛПол");
		СписокПоказателей.Добавить("НаимЮЛСокр");
		СписокПоказателей.Добавить("ИННЮЛ");
		СписокПоказателей.Добавить("КППЮЛ");
		СписокПоказателей.Добавить("АдрЮР");
		СписокПоказателей.Добавить("АдрЮР_XML");
		СписокПоказателей.Добавить("АдрЮР_JSON");
		СписокПоказателей.Добавить("ПолныйАдрЮР");
		СписокПоказателей.Добавить("АдрФакт");
		СписокПоказателей.Добавить("АдрФакт_XML");
		СписокПоказателей.Добавить("АдрФакт_JSON");
		СписокПоказателей.Добавить("ОргИндекс");
		СписокПоказателей.Добавить("ОргСубъект");
		СписокПоказателей.Добавить("ОргКодСубъект");
		СписокПоказателей.Добавить("ОргРайон");
		СписокПоказателей.Добавить("ОргГород");
		СписокПоказателей.Добавить("ОргНПункт");
		СписокПоказателей.Добавить("ОргУлица");
		СписокПоказателей.Добавить("ОргДом");
		СписокПоказателей.Добавить("ОргКорпус");
		СписокПоказателей.Добавить("ОргКвартира");
		СписокПоказателей.Добавить("НаимОППол");
		СписокПоказателей.Добавить("КППОП");
		СписокПоказателей.Добавить("АдрОП");
		СписокПоказателей.Добавить("АдрОП_XML");
		СписокПоказателей.Добавить("АдрОП_JSON");
		СписокПоказателей.Добавить("ИндексОП");
		СписокПоказателей.Добавить("СубъектОП");
		СписокПоказателей.Добавить("КодСубъектОП");
		СписокПоказателей.Добавить("РайонОП");
		СписокПоказателей.Добавить("ГородОП");
		СписокПоказателей.Добавить("НПунктОП");
		СписокПоказателей.Добавить("УлицаОП");
		СписокПоказателей.Добавить("ДомОП");
		СписокПоказателей.Добавить("КорпусОП");
		СписокПоказателей.Добавить("КвартираОП");
		СписокПоказателей.Добавить("ФИО");
		СписокПоказателей.Добавить("ФамилияИП");
		СписокПоказателей.Добавить("ИмяИП");
		СписокПоказателей.Добавить("ОтчествоИП");
		СписокПоказателей.Добавить("ФИООтпрФЛ");
		СписокПоказателей.Добавить("ИННФЛ");
		СписокПоказателей.Добавить("СНИЛС");
		СписокПоказателей.Добавить("ДатаРожд");
		СписокПоказателей.Добавить("МестоРожд");
		СписокПоказателей.Добавить("Пол");
		СписокПоказателей.Добавить("Гражд");
		СписокПоказателей.Добавить("ГраждСтрана");
		СписокПоказателей.Добавить("КодУдЛичн");
		СписокПоказателей.Добавить("ВидУдЛичн");
		СписокПоказателей.Добавить("ОрганВыданУдЛичн");
		СписокПоказателей.Добавить("КодПодрУдЛичн");
		СписокПоказателей.Добавить("СерияУдЛичн");
		СписокПоказателей.Добавить("НомерУдЛичн");
		СписокПоказателей.Добавить("ДатаУдЛичн");
		СписокПоказателей.Добавить("АдрПрописки");
		СписокПоказателей.Добавить("АдрПрописки_XML");
		СписокПоказателей.Добавить("АдрПрописки_JSON");
		СписокПоказателей.Добавить("АдрМЖ");
		СписокПоказателей.Добавить("АдрМЖ_XML");
		СписокПоказателей.Добавить("АдрМЖ_JSON");
		СписокПоказателей.Добавить("ИндексМЖ");
		СписокПоказателей.Добавить("СубъектМЖ");
		СписокПоказателей.Добавить("КодСубъектМЖ");
		СписокПоказателей.Добавить("РайонМЖ");
		СписокПоказателей.Добавить("ГородМЖ");
		СписокПоказателей.Добавить("НПунктМЖ");
		СписокПоказателей.Добавить("УлицаМЖ");
		СписокПоказателей.Добавить("ДомМЖ");
		СписокПоказателей.Добавить("КорпусМЖ");
		СписокПоказателей.Добавить("КвартираМЖ");
		СписокПоказателей.Добавить("ТелСлуж");
		СписокПоказателей.Добавить("ТелДом");
		СписокПоказателей.Добавить("РукСсылка");
		СписокПоказателей.Добавить("ДолжнРукСсылка");
		СписокПоказателей.Добавить("ФИОРук");
		СписокПоказателей.Добавить("ФамилияРук");
		СписокПоказателей.Добавить("ИмяРук");
		СписокПоказателей.Добавить("ОтчествоРук");
		СписокПоказателей.Добавить("ИННРук");
		СписокПоказателей.Добавить("ДатаРождРук");
		СписокПоказателей.Добавить("МестоРождРук");
		СписокПоказателей.Добавить("ПолРук");
		СписокПоказателей.Добавить("ГраждРук");
		СписокПоказателей.Добавить("ГраждСтранаРук");
		СписокПоказателей.Добавить("ТелРук");
		СписокПоказателей.Добавить("ДолжнРук");
		СписокПоказателей.Добавить("КодУдЛичнРук");
		СписокПоказателей.Добавить("ВидУдЛичнРук");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнРук");
		СписокПоказателей.Добавить("КодПодрУдЛичнРук");
		СписокПоказателей.Добавить("СерияУдЛичнРук");
		СписокПоказателей.Добавить("НомерУдЛичнРук");
		СписокПоказателей.Добавить("ДатаУдЛичнРук");
		СписокПоказателей.Добавить("АдрМЖРукРФ");
		СписокПоказателей.Добавить("АдрМЖРукРФ_XML");
		СписокПоказателей.Добавить("АдрМЖРукРФ_JSON");
		СписокПоказателей.Добавить("ИндексМЖРук");
		СписокПоказателей.Добавить("СубъектМЖРук");
		СписокПоказателей.Добавить("КодСубъектМЖРук");
		СписокПоказателей.Добавить("РайонМЖРук");
		СписокПоказателей.Добавить("ГородМЖРук");
		СписокПоказателей.Добавить("НПунктМЖРук");
		СписокПоказателей.Добавить("УлицаМЖРук");
		СписокПоказателей.Добавить("ДомМЖРук");
		СписокПоказателей.Добавить("КорпусМЖРук");
		СписокПоказателей.Добавить("КвартираМЖРук");
		СписокПоказателей.Добавить("ФИООтпр");
		СписокПоказателей.Добавить("ФИОБух");
		СписокПоказателей.Добавить("ФамилияБух");
		СписокПоказателей.Добавить("ИмяБух");
		СписокПоказателей.Добавить("ОтчествоБух");
		СписокПоказателей.Добавить("ИННБух");
		СписокПоказателей.Добавить("ДатаРождБух");
		СписокПоказателей.Добавить("МестоРождБух");
		СписокПоказателей.Добавить("ПолБух");
		СписокПоказателей.Добавить("ПолУпПред");
		СписокПоказателей.Добавить("ГраждБух");
		СписокПоказателей.Добавить("ГраждУпПред");
		СписокПоказателей.Добавить("ГраждСтранаБух");
		СписокПоказателей.Добавить("ГраждСтранаУпПред");
		СписокПоказателей.Добавить("ТелБух");
		СписокПоказателей.Добавить("ТелОтпр");
		СписокПоказателей.Добавить("КодУдЛичнБух");
		СписокПоказателей.Добавить("ВидУдЛичнБух");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("КодПодрУдЛичнБух");
		СписокПоказателей.Добавить("СерияУдЛичнБух");
		СписокПоказателей.Добавить("НомерУдЛичнБух");
		СписокПоказателей.Добавить("ДатаУдЛичнБух");
		СписокПоказателей.Добавить("АдрМЖБухРФ");
		СписокПоказателей.Добавить("АдрМЖБухРФ_XML");
		СписокПоказателей.Добавить("АдрМЖБухРФ_JSON");
		СписокПоказателей.Добавить("ИндексМЖБух");
		СписокПоказателей.Добавить("СубъектМЖБух");
		СписокПоказателей.Добавить("КодСубъектМЖБух");
		СписокПоказателей.Добавить("РайонМЖБух");
		СписокПоказателей.Добавить("ГородМЖБух");
		СписокПоказателей.Добавить("НПунктМЖБух");
		СписокПоказателей.Добавить("УлицаМЖБух");
		СписокПоказателей.Добавить("ДомМЖБух");
		СписокПоказателей.Добавить("КорпусМЖБух");
		СписокПоказателей.Добавить("КвартираМЖБух");
		СписокПоказателей.Добавить("ФИОУпПред");
		СписокПоказателей.Добавить("ИННУпПред");
		СписокПоказателей.Добавить("ТелУпПред");
		СписокПоказателей.Добавить("КодУдЛичнУпПред");
		СписокПоказателей.Добавить("ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаРождУпПред");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ_XML");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ_JSON");
		СписокПоказателей.Добавить("МестоРождУпПред");
		СписокПоказателей.Добавить("ИндексМЖУпПред");
		СписокПоказателей.Добавить("СубъектМЖУпПред");
		СписокПоказателей.Добавить("КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("РайонМЖУпПред");
		СписокПоказателей.Добавить("ГородМЖУпПред");
		СписокПоказателей.Добавить("НПунктМЖУпПред");
		СписокПоказателей.Добавить("УлицаМЖУпПред");
		СписокПоказателей.Добавить("ДомМЖУпПред");
		СписокПоказателей.Добавить("КорпусМЖУпПред");
		СписокПоказателей.Добавить("КвартираМЖУпПред");
		СписокПоказателей.Добавить("ФаксИсп");
		СписокПоказателей.Добавить("ДолжнОтпр");
		СписокПоказателей.Добавить("ДатаПереходаНаУСН");
		СписокПоказателей.Добавить("БанкСчетНомер");
		СписокПоказателей.Добавить("БанкСчетНаимБанка");
		СписокПоказателей.Добавить("БанкСчетКоррСчетБанка");
		СписокПоказателей.Добавить("БанкСчетБИКБанка");
		СписокПоказателей.Добавить("РегистрационныйНомерФСС");
		СписокПоказателей.Добавить("ДополнительныйКодФСС");
		СписокПоказателей.Добавить("НомерСтрахователяФСС");
		СписокПоказателей.Добавить("КодПодчиненностиФСС");
		СписокПоказателей.Добавить("КодПодчФССДобрСтрах");
		СписокПоказателей.Добавить("НаименованиеТерриториальногоОрганаФСС");
		СписокПоказателей.Добавить("СтраховойТариф");
		СписокПоказателей.Добавить("ТелОрганизации");
		СписокПоказателей.Добавить("ФаксОрганизации");
		СписокПоказателей.Добавить("ОбъектНалогообложенияУСН");
		СписокПоказателей.Добавить("НаимГоловнОрг");
		СписокПоказателей.Добавить("КППГоловнОрг");
		СписокПоказателей.Добавить("ФИОИсп");
		СписокПоказателей.Добавить("ДолжнИсп");
		СписокПоказателей.Добавить("ТелИсп");
		СписокПоказателей.Добавить("АдресЭлПочтыИсп");
		СписокПоказателей.Добавить("КодОрганаПФР");
		СписокПоказателей.Добавить("АдресЭлектроннойПочтыОрганизации");
		СписокПоказателей.Добавить("ШифрСтрахователяФСС");
		СписокПоказателей.Добавить("СистемыНалогообложения");
		СписокПоказателей.Добавить("ВидПлательщикаСтраховыхВзносов");
		СписокПоказателей.Добавить("КодТарифаПлательщикаПоУмолчаниюДляРСВ");
		СписокПоказателей.Добавить("КодОрганаФСГС");
		СписокПоказателей.Добавить("ЭтоЮридическоеЛицо");
		СписокПоказателей.Добавить("ТелОрганизации_JSON");
		СписокПоказателей.Добавить("ИндивидуальныйПредприниматель");
		СписокПоказателей.Добавить("ПризнакНПЛКрупнейший");
		СписокПоказателей.Добавить("КодНОКрупнейший");
		СписокПоказателей.Добавить("НаимНОКрупнейший");
		СписокПоказателей.Добавить("КППЮЛКрупнейший");
		СписокПоказателей.Добавить("ОКТМОКрупнейший");
		СписокПоказателей.Добавить("ОКАТОКрупнейший");
		
	КонецЕсли;
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	Кэш.Вставить("КонтактнаяИнформация", Новый Соответствие);
	
	ЭтоЮридическоеЛицо = ЗарплатаКадры.ЭтоЮридическоеЛицо(Организация.Ссылка);;
	ПБОЮЛ = Не ЭтоЮридическоеЛицо;
	Кэш.Вставить("ПБОЮЛ", ПБОЮЛ);
	Кэш.Вставить("ЭтоЮридическоеЛицо", ЭтоЮридическоеЛицо);
	
	ЭтоГоловнаяОрганизация = Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка()
		Или Организация.ГоловнаяОрганизация = Организация.Ссылка;
	Кэш.Вставить("ЭтоГоловнаяОрганизация", ЭтоГоловнаяОрганизация);
	
	РоссийскийАдрес = Новый Соответствие;
	РоссийскийАдрес.Вставить("Индекс",          "");
	РоссийскийАдрес.Вставить("Регион",          "");
	РоссийскийАдрес.Вставить("КодРегиона",      "");
	РоссийскийАдрес.Вставить("Район",           "");
	РоссийскийАдрес.Вставить("Город",           "");
	РоссийскийАдрес.Вставить("НаселенныйПункт", "");
	РоссийскийАдрес.Вставить("Улица",           "");
	РоссийскийАдрес.Вставить("Дом",             "");
	РоссийскийАдрес.Вставить("Корпус",          "");
	РоссийскийАдрес.Вставить("Квартира",        "");
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл
		
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "ТипНП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка()
			 ИЛИ Организация.ГоловнаяОрганизация = Организация.Ссылка Тогда
				Если ПБОЮЛ Тогда
					Значение = 3;
				Иначе
					Значение = 1;
				КонецЕсли;
			Иначе
				Значение = 2;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КатНП" Тогда
			
			Значение = "01";
			
		ИначеЕсли ИмяПоказателя = "ЭтоЮридическоеЛицо" Тогда
			
			Значение = ЭтоЮридическоеЛицо;
			
		ИначеЕсли ИмяПоказателя = "КодНО" Тогда
			
			РегистрацияВНалоговомОргане = ПолучитьСУчетомКэша(Кэш, "РегистрацияВНалоговомОргане");
			Значение = РегистрацияВНалоговомОргане.Код;
			
		ИначеЕсли ИмяПоказателя = "ОснВидДеят" Тогда
			
			Значение = Организация.НаименованиеОКВЭД;
			
		ИначеЕсли ИмяПоказателя = "ОКВЭД" Тогда
			
			Значение = Организация.КодОКВЭД;
			
		ИначеЕсли ИмяПоказателя = "ОснВидДеят2" Тогда
			
			Значение = Организация.НаименованиеОКВЭД2;
			
		ИначеЕсли ИмяПоказателя = "ОКВЭД2" Тогда
			
			Значение = Организация.КодОКВЭД2;
			
		ИначеЕсли ИмяПоказателя	= "ОГРН" Тогда
			
			Значение = Организация.ОГРН;
			
		ИначеЕсли ИмяПоказателя = "ОКАТО" Тогда
			
			РегистрацияВНалоговомОргане = ПолучитьСУчетомКэша(Кэш, "РегистрацияВНалоговомОргане");
			Значение = СокрЛП(РегистрацияВНалоговомОргане.КодПоОКАТО);
			
		ИначеЕсли ИмяПоказателя = "ОКТМО" Тогда
			
			РегистрацияВНалоговомОргане = ПолучитьСУчетомКэша(Кэш, "РегистрацияВНалоговомОргане");
			Значение = СокрЛП(РегистрацияВНалоговомОргане.КодПоОКТМО);
			
		ИначеЕсли ИмяПоказателя = "РегНомерСФР" Тогда
			
			РегистрацияСФР = ПолучитьСУчетомКэша(Кэш, "РегистрацияСФР");
			Если Не ЗначениеЗаполнено(РегистрацияСФР.РегистрационныйНомерПФР)
				Или ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР() Тогда
				Значение = РегистрацияСФР.РегистрационныйНомерСФР;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегНомерСФРЗаСебя" Тогда
			
			РегистрацияСФР = ПолучитьСУчетомКэша(Кэш, "РегистрацияСФР");
			Если Не ЗначениеЗаполнено(РегистрацияСФР.РегистрационныйНомерПФР)
				Или ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР() Тогда
				Значение = РегистрацияСФР.РегистрационныйНомерСФР;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегНомерСФРГоловнойОрганизации" Тогда
			
			КлючКэша = ?(ЭтоГоловнаяОрганизация, "РегистрацияСФР", "РегистрацияСФРГоловнойОрганизации");
			РегистрацияСФР = ПолучитьСУчетомКэша(Кэш, КлючКэша);
			Если Не ЗначениеЗаполнено(РегистрацияСФР.РегистрационныйНомерПФР)
				Или ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР() Тогда
				Значение = РегистрацияСФР.РегистрационныйНомерСФР;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегНомПФР" Тогда
			
			РегистрацияСФР = ПолучитьСУчетомКэша(Кэш, "РегистрацияСФР");
			Значение = РегистрацияСФР.РегистрационныйНомерПФР;
			
		ИначеЕсли ИмяПоказателя = "РегНомПФРЗаСебя" Тогда
			
			РегистрацияСФР = ПолучитьСУчетомКэша(Кэш, "РегистрацияСФР");
			Значение = РегистрацияСФР.РегистрационныйНомерПФР;
			
		ИначеЕсли ИмяПоказателя = "КодОрганаПФР" Тогда
			
			Значение = Организация.КодОрганаПФР;
			
		ИначеЕсли ИмяПоказателя = "ОКПО" Тогда
			
			Значение = Организация.КодПоОКПО;
			
		ИначеЕсли ИмяПоказателя = "ОКФС" Тогда
			
			Значение = Организация.КодОКФС;
			
		ИначеЕсли ИмяПоказателя = "НаименованиеОКФС" Тогда
			
			Значение = Организация.НаименованиеОКФС;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФСС" Тогда
			
			Значение = Организация.РегистрационныйНомерФСС;
			
		ИначеЕсли ИмяПоказателя = "ДополнительныйКодФСС" Тогда
			
			Значение = Организация.ДополнительныйКодФСС;
			
		ИначеЕсли ИмяПоказателя = "НомерСтрахователяФСС" Тогда
			
			Если ЭтоГоловнаяОрганизация Или ДатаЗначения < '20150121' Тогда
				Значение = Организация.РегистрационныйНомерФСС;
			Иначе // Для обособленных подразделений с 2015 года используется дополнительный код ФСС.
				Значение = Организация.ДополнительныйКодФСС;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФССДобрСтрах" Тогда	
			
			Если ПБОЮЛ Тогда
				Значение = Организация.РегистрационныйНомерФСС;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодПодчиненностиФСС" Тогда
			
			Значение = СокрЛП(Организация.КодПодчиненностиФСС);
			
		ИначеЕсли ИмяПоказателя = "КодПодчФССДобрСтрах" Тогда	
			
			Если ПБОЮЛ Тогда
				Значение = СокрЛП(Организация.КодПодчиненностиФСС);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаименованиеТерриториальногоОрганаФСС" Тогда
			
			Значение = Организация.НаименованиеТерриториальногоОрганаФСС;
			
		ИначеЕсли ИмяПоказателя = "КодОрганаФСГС" Тогда
			
			Если ЗарплатаКадрыКлиентСервер.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
				Сведения = РегистрацииВОрганеСтатистикиВызовСервера.СведенияОРегистрацииВОрганеСтатистики(Организация.Ссылка, ДатаЗначения, "КодОрганаФСГС");
				Значение = Сведения.ДанныеРегистрации.КодОрганаФСГС;
			Иначе
				Значение = Организация.КодОрганаФСГС;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ШифрСтрахователяФСС" Тогда
			
			Тарифы = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(ДатаЗначения, Новый Структура("ГоловнаяОрганизация", Организация.Ссылка));
			
			Если Тарифы.Количество() > 0 Тогда
				Значение = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тарифы[0].ВидТарифа, "КодФСС2012"));
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидПлательщикаСтраховыхВзносов" Тогда
			
			Значение = "00";
			
		ИначеЕсли ИмяПоказателя = "КодТарифаПлательщикаПоУмолчаниюДляРСВ" Тогда
			
			Значение = "01";
			
		ИначеЕсли ИмяПоказателя = "СистемыНалогообложения" Тогда
			
			СистемыНалогообложения = Новый Массив;
			
			Тарифы = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(ДатаЗначения, Новый Структура("ГоловнаяОрганизация", Организация.Ссылка));
			
			Если Тарифы.Количество() > 0 Тогда
				ВидТарифа = Тарифы[0].ВидТарифа;
				Если ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.БлаготворительныеОрганизации") Тогда
					СистемыНалогообложения.Добавить("УСН");
				ИначеЕсли ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент") Тогда
					СистемыНалогообложения.Добавить("ПСН");
				ИначеЕсли ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.НекоммерческиеОрганизации") Тогда
					СистемыНалогообложения.Добавить("УСН");
				ИначеЕсли ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.СельХозПроизводители") Тогда
					СистемыНалогообложения.Добавить("ОСНО");
				ИначеЕсли ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ЕСХН") Тогда
					СистемыНалогообложения.Добавить("ЕСХН");
				ИначеЕсли ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим") Тогда
					СистемыНалогообложения.Добавить("ОСНО");
				ИначеЕсли ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство") Тогда
					СистемыНалогообложения.Добавить("УСН");
				ИначеЕсли ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим") Тогда
					СистемыНалогообложения.Добавить("УСН");
				Иначе	
					СистемыНалогообложения.Добавить("ОСНО");
				КонецЕсли;	
			Иначе
				СистемыНалогообложения.Добавить("ОСНО");
			КонецЕсли;
			
			УчетнаяПолитикаОрганизации = РегистрыСведений.НастройкиСистемыНалогообложения.СрезПоследних(ДатаЗначения, Новый Структура("Организация", Организация.Ссылка));
			Если УчетнаяПолитикаОрганизации.Количество() > 0 И УчетнаяПолитикаОрганизации[0].ПрименяетсяЕНВД Тогда
				СистемыНалогообложения.Добавить("ЕНВД");
			КонецЕсли;
			
			Значение = СтрСоединить(СистемыНалогообложения, ", ");
			
		ИначеЕсли ИмяПоказателя = "ДатаРегистрации" Тогда
			
			Значение = ПустаяДата;
			
		ИначеЕсли ИмяПоказателя = "СтраховойТариф" Тогда
			
			Результат = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(ДатаЗначения, Новый Структура("Организация", Организация.Ссылка));
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Ставка;
			Иначе
				Значение = 0;
			КонецЕсли;
						
		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ПочтовыйАдресОрганизации");
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрПочт_XML" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ПочтовыйАдресОрганизации");
			Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрПочт_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ПочтовыйАдресОрганизации");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "ПолныйАдрПочт" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ПочтовыйАдресОрганизации");
			Значение = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
		ИначеЕсли ИмяПоказателя = "АдресЭлектроннойПочтыОрганизации" Тогда
			
			ВидКИ     = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
			ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, Организация);
			СтрокаКИ  = ТаблицаКИ.Найти(ВидКИ, "Вид");
			Значение  = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
		ИначеЕсли ИмяПоказателя = "СвидСН" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "СвидНО" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "СвидНОКод" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "НаимНО" Тогда
			
			РегистрацияВНалоговомОргане = ПолучитьСУчетомКэша(Кэш, "РегистрацияВНалоговомОргане");
			Значение = РегистрацияВНалоговомОргане.НаименованиеИФНС;
			
		ИначеЕсли ИмяПоказателя = "НаимЮЛПол" Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "НаимЮЛСокр" Тогда
			
			Значение = Организация.НаименованиеСокращенное;
			
		ИначеЕсли ИмяПоказателя = "ИННЮЛ" Тогда
			
			Значение = СокрЛП(Организация.ИНН);
			
		ИначеЕсли ИмяПоказателя = "КППЮЛ" Тогда
			
			РегистрацияВНалоговомОргане = ПолучитьСУчетомКэша(Кэш, "РегистрацияВНалоговомОргане");
			Значение = РегистрацияВНалоговомОргане.КПП;
			
		ИначеЕсли ИмяПоказателя = "АдрЮР" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрЮР_XML" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрЮР_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "ПолныйАдрЮР" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Значение = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрФакт_XML" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрФакт_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "ТелОрганизации"
			Или ИмяПоказателя = "ТелСлуж" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");
			Значение = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
		ИначеЕсли ИмяПоказателя = "ТелОрганизации_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "ФаксОрганизации" Тогда
			
			ВидКИ     = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
			ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, Кэш.Организация);
			Значение  = КонтактнаяИнформацияБЗК.ПредставлениеКонтактнойИнформации(ТаблицаКИ, , ВидКИ);
			
		ИначеЕсли ИмяПоказателя = "ОргИндекс" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Индекс"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргСубъект" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Регион"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКодСубъект" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["КодРегиона"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргРайон" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Район"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргГород" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Город"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргНПункт" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["НаселенныйПункт"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргУлица" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Улица"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргДом" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Дом"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКорпус" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Корпус"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКвартира" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Квартира"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		
		// Реквизиты крупнейших налогоплательщиков.
		
		ИначеЕсли ИмяПоказателя = "ПризнакНПЛКрупнейший" Тогда
			
			Значение = Организация.КрупнейшийНалогоплательщик;
			
		ИначеЕсли ИмяПоказателя = "КодНОКрупнейший" Тогда
			
			Значение = Организация.КодНалоговогоОрганаПолучателя;
			
		
		// Реквизиты обособленных подразделений.
		
		ИначеЕсли ИмяПоказателя = "НаимОППол" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				РегистрацияВНалоговомОргане = ПолучитьСУчетомКэша(Кэш, "РегистрацияВНалоговомОргане");
				Значение = РегистрацияВНалоговомОргане.КПП;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОП" Тогда
			
			Если Организация.ОбособленноеПодразделение Тогда
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			Иначе
				СтрокаКИ = Неопределено;
			КонецЕсли;
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрОП_XML" Тогда
			
			Если Организация.ОбособленноеПодразделение Тогда
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОП_JSON" Тогда
			
			Если Организация.ОбособленноеПодразделение Тогда
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Индекс"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Регион"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["КодРегиона"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Район"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Город"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["НаселенныйПункт"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Улица"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Дом"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Корпус"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
				Если СтрокаКИ <> Неопределено Тогда
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Квартира"];
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		
		// ***************************************************Сведения об индивидуальном предпринимателе.
		ИначеЕсли ИмяПоказателя = "ФИО" ИЛИ ИмяПоказателя = "ФИООтпрФЛ" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ИП_ФИО");
			Значение = СокрЛП(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			
		ИначеЕсли ИмяПоказателя = "ИндивидуальныйПредприниматель" Тогда
			
			Значение = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП")
			
		ИначеЕсли ИмяПоказателя = "ФамилияИП" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ИП_ФИО");
			Значение = ФИО.Фамилия;
			
		ИначеЕсли ИмяПоказателя = "ИмяИП" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ИП_ФИО");
			Значение = ФИО.Имя;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоИП" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ИП_ФИО");
			Значение = ФИО.Отчество;
			
		ИначеЕсли ИмяПоказателя = "ИННФЛ" Тогда
			
			ФизическоеЛицо = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
			Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Значение = ФизическоеЛицо.ИНН;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СНИЛС" Тогда
			
			ФизическоеЛицо = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
			Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Значение = ФизическоеЛицо.СтраховойНомерПФР;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРожд" Тогда
			
			ФизическоеЛицо = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
			Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Значение = ФизическоеЛицо.ДатаРождения;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРожд" Тогда
			
			ФизическоеЛицо = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
			Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Значение = ФизическоеЛицо.МестоРождения;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Пол" Тогда
			
			ФизическоеЛицо = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
			Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Если ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
					Значение = 2;
				ИначеЕсли ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Гражд" Тогда
			
			Гражданство = ПолучитьСУчетомКэша(Кэш, "ИП_Страна");
			Если Гражданство = Неопределено Тогда
				Значение = "";
			Иначе
				Значение = Гражданство.Код;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтрана" Тогда
			
			Гражданство = ПолучитьСУчетомКэша(Кэш, "ИП_Страна");
			Если Гражданство = Неопределено Тогда
				Значение = "";
			Иначе
				Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичн" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ИП_ПаспортныеДанные");
			Значение = Паспорт.КодМВД;
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичн" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ИП_ПаспортныеДанные");
			Значение = Строка(Паспорт.Вид);
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичн" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ИП_ПаспортныеДанные");
			Значение = Паспорт.КемВыдан;
			
		ИначеЕсли ИмяПоказателя = "КодПодрУдЛичн" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ИП_ПаспортныеДанные");
			Значение = Паспорт.КодПодразделения;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичн" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ИП_ПаспортныеДанные");
			Значение = Паспорт.Серия;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичн" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ИП_ПаспортныеДанные");
			Значение = Паспорт.Номер;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичн" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ИП_ПаспортныеДанные");
			Значение = Паспорт.ДатаВыдачи;
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_АдресПрописки");
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки_XML" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_АдресПрописки");
			Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_АдресПрописки");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖ_XML" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖ_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Индекс"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Регион"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["КодРегиона"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Район"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Город"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["НаселенныйПункт"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Улица"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Дом"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Корпус"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ИП_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Квартира"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелДом" Тогда
			
			ФизЛицо   = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
			ВидКИ     = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, ФизЛицо);
			СтрокаКИ  = ТаблицаКИ.Найти(ВидКИ, "Вид");
			Значение  = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
			
		// ******************************************************************Сведения о руководителе организации.
		ИначеЕсли ИмяПоказателя = "РукСсылка" Тогда
			
			ОтветственныеЛица = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации");
			Значение = ОтветственныеЛица.Руководитель;
			
		ИначеЕсли ИмяПоказателя = "ДолжнРукСсылка" Тогда
			
			ОтветственныеЛица = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации");
			Значение = ОтветственныеЛица.РуководительДолжность;
			
		ИначеЕсли ИмяПоказателя = "ФИОРук" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "Руководитель_ФИО");
			Значение = СокрЛП(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			
		ИначеЕсли ИмяПоказателя = "ФамилияРук" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "Руководитель_ФИО");
			Значение = ФИО.Фамилия;
			
		ИначеЕсли ИмяПоказателя = "ИмяРук" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "Руководитель_ФИО");
			Значение = ФИО.Имя;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоРук" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "Руководитель_ФИО");
			Значение = ФИО.Отчество;
			
		ИначеЕсли ИмяПоказателя = "ИННРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").Руководитель;
			Значение = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.ИНН, "");
			
		ИначеЕсли ИмяПоказателя = "ДатаРождРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").Руководитель;
			Значение = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.ДатаРождения, "");
			
		ИначеЕсли ИмяПоказателя = "МестоРождРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").Руководитель;
			Значение = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.МестоРождения, "");
			
		ИначеЕсли ИмяПоказателя = "ПолРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").Руководитель;
			Пол = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.Пол, Неопределено);
			Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				Значение = 2;
			ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				Значение = 1;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждРук" Тогда
			
			Страна = ПолучитьСУчетомКэша(Кэш, "Руководитель_Страна");
			Если Страна = Неопределено Тогда
				Значение = "";
			Иначе
				Значение = Страна.Код;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаРук" Тогда
			
			Страна = ПолучитьСУчетомКэша(Кэш, "Руководитель_Страна");
			Если Страна = Неопределено Тогда
				Значение = "";
			Иначе
				Значение = ?(ПустаяСтрока(Страна.НаименованиеПолное), Страна.Наименование, Страна.НаименованиеПолное);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелРук" Тогда
			
			ФизЛицо   = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").Руководитель;
			ВидКИ     = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, ФизЛицо);
			СтрокаКИ  = ТаблицаКИ.Найти(ВидКИ, "Вид");
			Значение  = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичнРук" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "Руководитель_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.КодМВД);
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнРук" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "Руководитель_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Строка(Паспорт.Вид));
			
		ИначеЕсли ИмяПоказателя = "ДолжнРук" Тогда
			
			ОтветственныеЛица = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации");
			Значение = ОтветственныеЛица.РуководительДолжностьПредставление;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнРук" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "Руководитель_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.КемВыдан);
			
		ИначеЕсли ИмяПоказателя = "КодПодрУдЛичнРук" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "Руководитель_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.КодПодразделения);
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнРук" Тогда
			
			Паспорт = ПолучитьСУчетомКэша(Кэш, "Руководитель_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.Серия);
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнРук" Тогда
			
			Паспорт = ПолучитьСУчетомКэша(Кэш, "Руководитель_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.Номер);
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнРук" Тогда
			
			Паспорт = ПолучитьСУчетомКэша(Кэш, "Руководитель_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.ДатаВыдачи);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ_XML" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Индекс"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Регион"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["КодРегиона"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Район"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Город"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["НаселенныйПункт"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Улица"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Дом"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Корпус"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖРук" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "Руководитель_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Квартира"];
			Иначе
				Значение = "";
			КонецЕсли;
			
			
		// Сведения о главном бухгалтере / уполномоченном представителе.
		ИначеЕсли ИмяПоказателя = "БухСсылка" Тогда
			
			Значение = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
			
		ИначеЕсли ИмяПоказателя = "ФИОБух"
			Или ИмяПоказателя = "ФИООтпр"
			Или ИмяПоказателя = "ФИОУпПред"
			Или ИмяПоказателя = "ФИОИсп" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ФИО");
			Значение = СокрЛП(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			
		ИначеЕсли ИмяПоказателя = "ФамилияБух" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ФИО");
			Значение = ФИО.Фамилия;
			
		ИначеЕсли ИмяПоказателя = "ИмяБух" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ФИО");
			Значение = ФИО.Имя;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоБух" Тогда
			
			ФИО = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ФИО");
			Значение = ФИО.Отчество;
			
		ИначеЕсли ИмяПоказателя = "ИННБух"
			Или ИмяПоказателя = "ИННУпПред" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
			Значение = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.ИНН, "");
			
		ИначеЕсли ИмяПоказателя = "ДатаРождБух"
			Или ИмяПоказателя = "ДатаРождУпПред" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
			Значение = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.ДатаРождения, "");
			
		ИначеЕсли ИмяПоказателя = "МестоРождБух"
			Или ИмяПоказателя = "МестоРождУпПред" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
			Значение = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.МестоРождения, "");
			
		ИначеЕсли ИмяПоказателя = "ПолБух"
			Или ИмяПоказателя = "ПолУпПред" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
			Пол = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.Пол, Неопределено);
			Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				Значение = 2;
			ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				Значение = 1;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждБух"
			Или ИмяПоказателя = "ГраждУпПред" Тогда
			
			Страна = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Страна");
			Если Страна = Неопределено Тогда
				Значение = "";
			Иначе
				Значение = Страна.Код;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаБух"
			Или ИмяПоказателя = "ГраждСтранаУпПред" Тогда
			
			Страна = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Страна");
			Если Страна = Неопределено Тогда
				Значение = "";
			Иначе
				Значение = ?(ПустаяСтрока(Страна.НаименованиеПолное), Страна.Наименование, Страна.НаименованиеПолное);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелБух"
			Или ИмяПоказателя = "ТелОтпр"
			Или ИмяПоказателя = "ТелУпПред"
			Или ИмяПоказателя = "ТелИсп" Тогда
			
			ФизЛицо   = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
			ВидКИ     = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, ФизЛицо);
			СтрокаКИ  = ТаблицаКИ.Найти(ВидКИ, "Вид");
			Значение  = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичнБух"
			Или ИмяПоказателя = "КодУдЛичнУпПред" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.КодМВД);
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнБух"
			Или ИмяПоказателя = "ВидУдЛичнУпПред" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Строка(Паспорт.Вид));
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнБух"
			Или ИмяПоказателя = "ОрганВыданУдЛичнУпПред" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.КемВыдан);
			
		ИначеЕсли ИмяПоказателя = "КодПодрУдЛичнБух" Тогда
			
			Паспорт  = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.КодПодразделения);
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнБух"
			Или ИмяПоказателя = "СерияУдЛичнУпПред" Тогда
			
			Паспорт = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.Серия);
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнБух"
			Или ИмяПоказателя = "НомерУдЛичнУпПред" Тогда
			
			Паспорт = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.Номер);
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнБух"
			Или ИмяПоказателя = "ДатаУдЛичнУпПред" Тогда
			
			Паспорт = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_ПаспортныеДанные");
			Значение = ?(Паспорт = Неопределено, "", Паспорт.ДатаВыдачи);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ"
			Или ИмяПоказателя = "АдрМЖУпПредРФ" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Значение = АдресВФормате9Запятых(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ_XML"
			Или ИмяПоказателя = "АдрМЖУпПредРФ_XML" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Значение = КонтактнаяИнформацияВXML(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ_JSON"
			Или ИмяПоказателя = "АдрМЖУпПредРФ_JSON" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Значение = КонтактнаяИнформацияВJSON(СтрокаКИ);
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖБух"
			Или ИмяПоказателя = "ИндексМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Индекс"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖБух"
			Или ИмяПоказателя = "СубъектМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Регион"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖБух"
			Или ИмяПоказателя = "КодСубъектМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["КодРегиона"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонМЖБух"
			Или ИмяПоказателя = "РайонМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Район"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородМЖБух"
			Или ИмяПоказателя = "ГородМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Город"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктМЖБух"
			Или ИмяПоказателя = "НПунктМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["НаселенныйПункт"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаМЖБух"
			Или ИмяПоказателя = "УлицаМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Улица"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомМЖБух"
			Или ИмяПоказателя = "ДомМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Дом"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусМЖБух"
			Или ИмяПоказателя = "КорпусМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Корпус"];
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖБух"
			Или ИмяПоказателя = "КвартираМЖУпПред" Тогда
			
			СтрокаКИ = ПолучитьСУчетомКэша(Кэш, "ГлавныйБухгалтер_Адрес");
			Если СтрокаКИ <> Неопределено Тогда
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(СтрокаКИ.Значение, РоссийскийАдрес);
				Значение = РоссийскийАдрес["Квартира"];
			Иначе
				Значение = "";
			КонецЕсли;
			
			
		// Прочие сведения.
		ИначеЕсли ИмяПоказателя = "ФаксИсп" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ДолжнОтпр" Тогда
			
			Значение = "ГЛАВНЫЙ БУХГАЛТЕР"
			
		ИначеЕсли ИмяПоказателя = "ГоловнаяОрганизация" Тогда
			
			Если ЭтоГоловнаяОрганизация Тогда
				Значение = Организация.Ссылка;
			Иначе
				Значение = Организация.ГоловнаяОрганизация;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимГоловнОрг" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация.ГоловнаяОрганизация, "НаименованиеПолное");
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППГоловнОрг" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = ПолучитьСУчетомКэша(Кэш, "РегистрацияВНалоговомОрганеГоловнойОрганизации").КПП;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДолжнИсп" Тогда
			
			Значение = НСтр("ru = 'Главный бухгалтер';
							|en = 'Chief Accountant'")
			
		ИначеЕсли ИмяПоказателя = "АдресЭлПочтыИсп" Тогда
			
			ФизЛицо   = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
			ВидКИ     = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, ФизЛицо);
			СтрокаКИ  = ТаблицаКИ.Найти(ВидКИ, "Вид");
			Значение  = ?(СтрокаКИ = Неопределено, "", СтрокаКИ.Представление);
			
		Иначе
			
			Значение = "";// Если вернуть строку - больше шансов угадать, так как большинство сведений - строковые.
			
		КонецЕсли;
		
		ОргСведения.Вставить(ИмяПоказателя, Значение);
		
	КонецЦикла;
	
	Возврат ОргСведения;
	
КонецФункции

// Процедура заполняет список используемых регламентированных отчетов.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(СписокРегламентированныхОтчетов) Экспорт
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПерсонифицированныеСведенияОФизическихЛицах");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетПоСтраховымВзносам");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4ФСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕФС1ОСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРСВ1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРВ3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет6НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет6_НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаПрочиеФормы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП4НЗ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПодтверждениеВидаДеятельности");
	
КонецПроцедуры

// Процедура заполняет структуру показателей.
// Ключ структуры - идентификатор показателя.
// Значение структуры - массив из двух элементов:
// 	- признак автозаполнения показателя,
//	- признак расшифровки показателя.
//
// Параметры:
// 	ПоказателиОтчета - структура показателей отчета,
// 	ИДОтчета         - идентификатор отчета,
//	ИДРедакцииОтчета - идентификатор редакции формы отчета.
//  ПараметрыОтчета  - Структура - структура параметров отчета.
//
Процедура ЗаполнитьПоказателиРегламентированногоОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	// ЗарплатаКадрыПодсистемы.СтатистикаПерсонала
	СтатистикаПерсонала.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	// Конец ЗарплатаКадрыПодсистемы.СтатистикаПерсонала
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛ
	УчетНДФЛ.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛ
	
	// ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	УчетСтраховыхВзносов.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	// Конец ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	
	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			КадровыйУчет.ОписаниеПоказателей_РСВ1_2011Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			КадровыйУчет.ОписаниеПоказателей_РСВ1_2012Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Тогда
			КадровыйУчет.ОписаниеПоказателей_РСВ1_2013Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			КадровыйУчет.ОписаниеПоказателей_РСВ1_2014Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			КадровыйУчет.ОписаниеПоказателей_РСВ1_2015Кв1(ПоказателиОтчета);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРасчетПоСтраховымВзносам" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв1" Тогда	
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_РСВ_2020Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв4" Тогда	
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_РСВ_2020Кв1(ПоказателиОтчета);
			КадровыйУчет.ОписаниеПоказателей_РСВ_2020(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2022Кв1" Тогда	
			КадровыйУчет.ОписаниеПоказателей_РСВ_2020(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2023Кв1" Тогда	
			КадровыйУчет.ОписаниеПоказателей_РСВ_2020(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2023Кв3" Тогда	
			КадровыйУчет.ОписаниеПоказателей_РСВ_2020(ПоказателиОтчета);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет4ФСС" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2011Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв2" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2013Кв2(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2013Кв2(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2015Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2016Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2016Кв3" Тогда	
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2016Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв3" Тогда
			УчетПособийСоциальногоСтрахования.ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			КадровыйУчет.ОписаниеПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПоказателиОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
Процедура ЗаполнитьРегламентированныйОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	// ЗарплатаКадрыПодсистемы.СтатистикаПерсонала
	СтатистикаПерсонала.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	// Конец ЗарплатаКадрыПодсистемы.СтатистикаПерсонала
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛ
	УчетНДФЛ.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛ
	
	// ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	УчетСтраховыхВзносов.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	// Конец ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	
	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			КадровыйУчет.ЗначенияПоказателей_РСВ1_2011Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			КадровыйУчет.ЗначенияПоказателей_РСВ1_2012Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Тогда
			КадровыйУчет.ЗначенияПоказателей_РСВ1_2013Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			КадровыйУчет.ЗначенияПоказателей_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			КадровыйУчет.ЗначенияПоказателей_РСВ1_2015Кв1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРасчетПоСтраховымВзносам" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_РСВ_2017Кв1(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв1" Тогда	
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_РСВ_2020Кв1(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв4" Тогда	
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_РСВ_2020Кв1(ПараметрыОтчета, Контейнер);
			КадровыйУчет.ЗначенияПоказателей_РСВ_2020(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2022Кв1" Тогда	
			КадровыйУчет.ЗначенияПоказателей_РСВ_2020(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2023Кв1" Тогда	
			КадровыйУчет.ЗначенияПоказателей_РСВ_2020(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2023Кв3" Тогда	
			КадровыйУчет.ЗначенияПоказателей_РСВ_2020(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2025Кв1" Тогда	
			КадровыйУчет.ЗначенияПоказателей_РСВ_2020(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет4ФСС" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_4ФСС_2011Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" 
			Или ИДРедакцииОтчета = "ФормаОтчета2012Кв3"
			Или ИДРедакцииОтчета = "ФормаОтчета2013Кв2" 
			Или ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_4ФСС_2012Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_4ФСС_2015Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2016Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2016Кв3" Тогда	
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_4ФСС_2016Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_4ФСС_2017Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв3" Тогда
			УчетПособийСоциальногоСтрахования.ЗначенияПоказателей_4ФСС_2017Кв1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			КадровыйУчет.ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для ЗарплатаКадры.ПолучитьНастройкиВидимостиЭлементовФормы возвращает характеристику показываемой формы регламентированного отчета.
//  
// Возвращаемое значение:
//  Булево, истина - если рассматриваемую форму заполнять автоматически мы еще не умеем.
//
Функция НоваяФормаРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета) Экспорт

	Если УчетНДФЛ.НоваяФормаРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета) Тогда
		Возврат Истина
	КонецЕсли;	
	Если УчетСтраховыхВзносов.НоваяФормаРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета) Тогда
		Возврат Истина
	КонецЕсли;
	
	Возврат	Ложь

КонецФункции

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность.
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	ПерсонифицированныйУчет.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	УчетНДФЛ.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	ПрямыеВыплатыПособийСоциальногоСтрахования.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//		
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	ПерсонифицированныйУчет.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	УчетНДФЛ.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	ПрямыеВыплатыПособийСоциальногоСтрахования.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	ЭлектронныеТрудовыеКнижки.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	КадровыйЭДО.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	
	// ЗарплатаКадрыПодсистемы.Выплаты.ВзаиморасчетыССотрудниками
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВБанк);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВКассу);
	// Конец ЗарплатаКадрыПодсистемы.Выплаты.ВзаиморасчетыССотрудниками
	
	// ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	СписокОбъектов.Добавить(Документы.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников);
	СписокОбъектов.Добавить(Документы.ПодтверждениеЗачисленияЗарплаты);
	СписокОбъектов.Добавить(Документы.ПодтверждениеОткрытияЛицевыхСчетовСотрудников);
	// Конец ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	
	// ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	СписокОбъектов.Добавить(Документы.ВедомостьУплатыАДВ_11);
	СписокОбъектов.Добавить(Документы.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР);
	СписокОбъектов.Добавить(Документы.ОписьОДВ_1);
	СписокОбъектов.Добавить(Документы.ОписьПачекСЗВ_6);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовАДВ_1);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовАДВ_2);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовАДВ_3);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовДСВ_1);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовСЗВ_6_1);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовСЗВ_6_3);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовСЗВ_6_4);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовСЗВ_К);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовСПВ_1);
	СписокОбъектов.Добавить(Документы.ПачкаДокументовСПВ_2);
	СписокОбъектов.Добавить(Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО);
	СписокОбъектов.Добавить(Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ);
	СписокОбъектов.Добавить(Документы.СведенияОЗастрахованныхЛицахСЗВ_М);
	СписокОбъектов.Добавить(Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ);
	СписокОбъектов.Добавить(Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД);
	СписокОбъектов.Добавить(Документы.ПачкаРазделов6РасчетаРСВ_1);
	СписокОбъектов.Добавить(Документы.РеестрДСВ_3);
	СписокОбъектов.Добавить(Документы.РеестрСЗВ_6_2);
	// Конец ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет
	СписокОбъектов.Добавить(Справочники.Должности);
	// ЗарплатаКадрыПодсистемы.КадровыйУчет
	
	// ЗарплатаКадрыПодсистемы.Сотрудники
	СписокОбъектов.Добавить(Справочники.Сотрудники);
	// Конец ЗарплатаКадрыПодсистемы.Сотрудники
	
	// ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	СписокОбъектов.Добавить(Документы.АктПроверкиСтраховыхВзносов);
	СписокОбъектов.Добавить(Документы.ПерерасчетСтраховыхВзносов);
	// Конец ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛ
	СписокОбъектов.Добавить(Документы.АвансовыйПлатежИностранцаПоНДФЛ);
	СписокОбъектов.Добавить(Документы.ОперацияНалоговогоУчетаПоНДФЛ);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛ
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	СписокОбъектов.Добавить(Документы.ВозвратНДФЛ);
	СписокОбъектов.Добавить(Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ);
	СписокОбъектов.Добавить(Документы.ПерерасчетНДФЛ);
	СписокОбъектов.Добавить(Документы.ПрекращениеСтандартныхВычетовНДФЛ);
	СписокОбъектов.Добавить(Документы.СведенияОДоходахСотрудникаДляСоцВыплат);
	СписокОбъектов.Добавить(Документы.СправкаНДФЛ);
	СписокОбъектов.Добавить(Документы.СправкиНДФЛДляПередачиВНалоговыйОрган);
	СписокОбъектов.Добавить(Документы.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ);
	СписокОбъектов.Добавить(Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ);
	СписокОбъектов.Добавить(Документы.ЕжегодныеСтандартныеВычеты);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	СписокОбъектов.Добавить(Документы.ОперацияУчетаПоСтраховымВзносам);
	// Конец ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	
	// ЗарплатаКадрыПодсистемы.ФизическиеЛица
	СписокОбъектов.Добавить(Справочники.ФизическиеЛица);
	// Конец ЗарплатаКадрыПодсистемы.ФизическиеЛица
	
	// ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации
	СписокОбъектов.Добавить(Справочники.Организации);
	// Конец ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации
	
	// ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет
	СписокОбъектов.Добавить(Документы.ПриемНаРаботу);
	СписокОбъектов.Добавить(Документы.КадровыйПеревод);
	СписокОбъектов.Добавить(Документы.Увольнение);
	// Конец ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет
	
	// ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты
	СписокОбъектов.Добавить(Документы.БольничныйЛист);
	СписокОбъектов.Добавить(Документы.НачислениеЗарплаты);
	СписокОбъектов.Добавить(Документы.Отпуск);
	// Конец ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты
	
	// ЗарплатаКадрыПриложения.ПодразделенияОрганизаций
	СписокОбъектов.Добавить(Справочники.ПодразделенияОрганизаций);
	// Конец ЗарплатаКадрыПриложения.ПодразделенияОрганизаций
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахования.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// ЗарплатаКадрыПодсистемы.КадровыйЭДО
	КадровыйЭДО.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйЭДО
	
	// ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	ЗаявкиСотрудников.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	
	// Выплата зарплаты для небольших организаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.Выплаты") Тогда
		МодульВыплатаЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ВыплатаЗарплатыДляНебольшихОрганизаций");
		МодульВыплатаЗарплатыДляНебольшихОрганизаций.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ОтражениеЗарплатыВБухгалтерскомУчете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВБухучетеБазовый");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ДоговорыГПХ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДоговорыГПХДляНебольшихОрганизаций");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетность") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РегламентированнаяОтчетностьПриложения");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ВоинскийУчет") Тогда
		МодульВоинскийУчет = ОбщегоНазначения.ОбщийМодуль("ВоинскийУчет");
		МодульВоинскийУчет.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// Дополнительные настройки списка команд печати.
//
// Параметры:
//  НастройкиСписка - Структура - модификаторы списка команд печати.
//   * МенеджерКомандПечати     - МенеджерОбъекта - менеджер объекта, в котором формируется список команд печати;
//   * АвтоматическоеЗаполнение - Булево - заполнять команды печати из объектов, входящих в состав журнала.
//                                         Значение по умолчанию: Истина.
//
Процедура ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка) Экспорт
	
	Если НастройкиСписка.МенеджерКомандПечати = ЖурналыДокументов.НачислениеЗарплаты Тогда
		НастройкиСписка.АвтоматическоеЗаполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриДобавленииКомандПечати
Процедура ПриДобавленииКомандПечати(ИмяФормы, КомандыПечати) Экспорт
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПолученииКомандПечати.
Процедура ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта) Экспорт
	
	КадровыйЭДО.ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта);
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовПечатнойФормы.
Процедура ПриОпределенииОбъектовПечатнойФормы(ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ИмяМенеджераПечати, ПараметрыПечати) Экспорт
	
	КадровыйЭДО.ПриОпределенииОбъектовПечатнойФормы(ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ИмяМенеджераПечати, ПараметрыПечати);
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПечати.
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	КадровыйЭДО.ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников.
Процедура ЭлектронноеВзаимодействиеПриОпределенииСоответствияСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Организации", Метаданные.Справочники.Организации.Имя);
	СоответствиеСправочников.Вставить("Контрагенты", Метаданные.Справочники.Контрагенты.Имя);
	СоответствиеСправочников.Вставить("Банки",       Метаданные.Справочники.КлассификаторБанков.Имя);
	СоответствиеСправочников.Вставить("Валюты",      Метаданные.Справочники.Валюты.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// ЗарплатаКадрыПодсистемы
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОрганеВторичный, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиЗарплатаКадры, Истина);
	// Конец ЗарплатаКадрыПодсистемы
	
	// ЗарплатаКадрыПодсистемы.БанковскиеКарты
	БанковскиеКарты.ПриЗаполненииСписковСОграничениемДоступа(Списки); 
	// Конец ЗарплатаКадрыПодсистемы.БанковскиеКарты
	
	// ЗарплатаКадрыПодсистемы.Выплаты
	ВзаиморасчетыССотрудниками.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	ОбменСБанкамиПоЗарплатнымПроектам.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.Выплаты
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет
	КадровыйУчет.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// ЗарплатаКадрыПодсистемы.ДоговорыГПХ
	Списки.Вставить(Метаданные.РегистрыСведений.ОплаченныеДоговоры, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.УсловияДоговораГПХ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.НачисленияПоДоговорамГПХ, Истина);
	// Конец ЗарплатаКадрыПодсистемы.ДоговорыГПХ

	
	// ЗарплатаКадрыПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчете
	ОтражениеЗарплатыВБухучете.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчете
	
	// ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	ПерсонифицированныйУчет.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	РасчетЗарплаты.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	
	// ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	Списки.Вставить(Метаданные.Документы.АктПроверкиСтраховыхВзносов, Истина);
	Списки.Вставить(Метаданные.Справочники.АктПроверкиСтраховыхВзносовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПерерасчетСтраховыхВзносов, Истина);
	Списки.Вставить(Метаданные.Справочники.ПерерасчетСтраховыхВзносовПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетНачисленнойЗарплаты
	УчетНачисленнойЗарплаты.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	Списки.Вставить(Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникамАвансом, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ОтработанноеВремяПоСотрудникамАвансом, Истина);
	// Конец ЗарплатаКадрыПодсистемы.УчетНачисленнойЗарплаты
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛ
	УчетНДФЛ.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	Списки.Вставить(Метаданные.РегистрыСведений.ВычетыПредыдущегоМестаРаботыНДФЛ, Истина);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛ
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	УчетНДФЛДокументы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	УчетСтраховыхВзносов.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	
	// ЗарплатаКадрыПодсистемы.КадровыйЭДО
	КадровыйЭДО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйЭДО
	
	// ЗарплатаКадрыПодсистемы.ФизическиеЛица
	Списки.Вставить(Метаданные.Справочники.ФизическиеЛица, Истина);
	Списки.Вставить(Метаданные.Справочники.ФизическиеЛицаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц, Истина);
	// Конец ЗарплатаКадрыПодсистемы.ФизическиеЛица
	
	// ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ИнтеграцияКабинетСотрудника
	ИнтеграцияКабинетСотрудника.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ИнтеграцияКабинетСотрудника
	
	// ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	ЗаявкиСотрудников.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	
	// ЗарплатаКадрыПодсистемы.БизнесПроцессыЗаявокСотрудников
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтпуск, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ОбращениеСотрудника, Истина);
	// Конец ЗарплатаКадрыПодсистемы.БизнесПроцессыЗаявокСотрудников
	
	// ЗарплатаКадрыПодсистемы.РегистрацииВОрганеСтатистики
	Списки.Вставить(Метаданные.Справочники.РегистрацииВОрганеСтатистики, Истина);
	// Конец ЗарплатаКадрыПодсистемы.РегистрацииВОрганеСтатистики
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации") Тогда
		МодульОрганизацииСлужебный = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСлужебный");
		МодульОрганизацииСлужебный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
		МодульЗарплатаКадрыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыДляНебольшихОрганизаций");
		МодульЗарплатаКадрыДляНебольшихОрганизаций.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		МодульРезервОтпусков.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		МодульРезервОтпусков.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодразделенияОрганизаций") Тогда
		МодульПодразделенияОрганизацийБЗК = ОбщегоНазначения.ОбщийМодуль("ПодразделенияОрганизацийБЗК");
		МодульПодразделенияОрганизацийБЗК.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетностьЗаполнение") Тогда
		МодульАвтоматическоеЗаполнениеОтчетности = ОбщегоНазначения.ОбщийМодуль("АвтоматическоеЗаполнениеОтчетности");
		МодульАвтоматическоеЗаполнениеОтчетности.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		МодульУчетДепонированнойЗарплаты = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		МодульУчетДепонированнойЗарплаты.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ЗащитаПерсональныхДанных") Тогда
		МодульЗащитаПерсональныхДанныхЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ЗащитаПерсональныхДанныхЗарплатаКадры");
		МодульЗащитаПерсональныхДанныхЗарплатаКадры.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
		МодульОбразованияФизическихЛиц.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц") Тогда
		МодульСемейныеПоложенияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СемейныеПоложенияФизическихЛиц");
		МодульСемейныеПоложенияФизическихЛиц.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ВоинскийУчет") Тогда
		МодульВоинскийУчет = ОбщегоНазначения.ОбщийМодуль("ВоинскийУчет");
		МодульВоинскийУчет.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц") Тогда
		МодульСводныеДанныеФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СводныеДанныеФизическихЛиц");
		МодульСводныеДанныеФизическихЛиц.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ЗащитаПерсональныхДанныхЗарплатаКадры
	ЗащитаПерсональныхДанныхЗарплатаКадры.ПриЗаполненииОграниченияДоступа(Список, Ограничение);
	// Конец ЗарплатаКадрыПодсистемы.ЗащитаПерсональныхДанныхЗарплатаКадры
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// ЗарплатаКадрыПодсистемы
	Описание = Описание + "
	|РегистрСведений.ИсторияРегистрацийВНалоговомОргане.Чтение.Организации
	|РегистрСведений.ИсторияРегистрацийВНалоговомОргане.Изменение.Организации
	|РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный.Чтение.Организации
	|РегистрСведений.НастройкиЗарплатаКадры.Чтение.Организации
	|РегистрСведений.НастройкиЗарплатаКадры.Изменение.Организации";
	// Конец ЗарплатаКадрыПодсистемы
	
	// ЗарплатаКадрыПодсистемы.РегистрацииВОрганеСтатистики
	Описание = Описание + "
	|Справочник.РегистрацииВОрганеСтатистики.Чтение.Организации
	|Справочник.РегистрацииВОрганеСтатистики.Изменение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.РегистрацииВОрганеСтатистики
	
	БанковскиеКарты.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	ВзаиморасчетыССотрудниками.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	ОбменСБанкамиПоЗарплатнымПроектам.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет
	Описание = Описание + "
	|Справочник.Сотрудники.Чтение.ГруппыФизическихЛиц
	|Справочник.Сотрудники.Чтение.Организации
	|Справочник.Сотрудники.Изменение.ГруппыФизическихЛиц
	|Справочник.Сотрудники.Изменение.Организации
	|ЖурналДокументов.КадровыеДокументы.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.КадровыеДокументы.Чтение.Организации
	|РегистрСведений.ВидыЗанятостиСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ВидыЗанятостиСотрудников.Чтение.Организации
	|РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный.Чтение.Организации
	|РегистрСведений.ГражданствоФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ГражданствоФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.КадроваяИсторияСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.КадроваяИсторияСотрудников.Чтение.Организации
	|РегистрСведений.КадроваяИсторияСотрудниковИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.КадроваяИсторияСотрудниковИнтервальный.Чтение.Организации
	|РегистрСведений.ОсновныеСотрудникиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ОсновныеСотрудникиФизическихЛиц.Чтение.Организации
	|РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников.Чтение.Организации
	|РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников.Изменение.Организации
	|РегистрСведений.ТекущиеКадровыеДанныеСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ТекущиеКадровыеДанныеСотрудников.Чтение.Организации
	|РегистрСведений.ТекущиеКадровыеДанныеСотрудников.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ТекущиеКадровыеДанныеСотрудников.Изменение.Организации
	|РегистрСведений.ФИОФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ФИОФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Чтение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// ЗарплатаКадрыПодсистемы.КадровыйЭДО
	КадровыйЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйЭДО
	
	// ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.Выплаты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.Выплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВыплатаЗарплатыДляНебольшихОрганизаций");
		Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание)
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.Выплаты
	
	// ЗарплатаКадрыПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчете
	Описание = Описание + "
	|РегистрСведений.БухучетЗарплатыОрганизаций.Чтение.Организации
	|РегистрСведений.БухучетЗарплатыОрганизаций.Изменение.Организации
	|РегистрСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Чтение.Организации
	|РегистрСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Изменение.Организации
	|РегистрСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату.Чтение.Организации
	|РегистрСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату.Изменение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчете
	
	// ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	ПерсонифицированныйУчет.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	Описание = Описание + "
	|РегистрСведений.ОснованияПолномочийОтветственныхЛиц.Чтение.Организации
	|РегистрСведений.ОснованияПолномочийОтветственныхЛиц.Изменение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	Описание = Описание + "
	|Документ.НачислениеЗарплаты.Чтение.ГруппыФизическихЛиц
	|Документ.НачислениеЗарплаты.Чтение.Организации
	|Документ.НачислениеЗарплаты.Изменение.ГруппыФизическихЛиц
	|Документ.НачислениеЗарплаты.Изменение.Организации
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Чтение.Организации
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Изменение.Организации
	|РегистрСведений.ПлановыеАвансы.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеАвансы.Чтение.Организации
	|РегистрСведений.ПлановыеАвансыИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеАвансыИнтервальный.Чтение.Организации
	|РегистрСведений.ПлановыеНачисления.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеНачисления.Чтение.Организации
	|РегистрСведений.ПлановыеНачисленияИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеНачисленияИнтервальный.Чтение.Организации
	|РегистрСведений.ПлановыеУдержания.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеУдержания.Чтение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	
	// ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	Описание = Описание + "
	|Документ.АктПроверкиСтраховыхВзносов.Чтение.ГруппыФизическихЛиц
	|Документ.АктПроверкиСтраховыхВзносов.Чтение.Организации
	|Документ.АктПроверкиСтраховыхВзносов.Изменение.ГруппыФизическихЛиц
	|Документ.АктПроверкиСтраховыхВзносов.Изменение.Организации
	|Справочник.АктПроверкиСтраховыхВзносовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.АктПроверкиСтраховыхВзносовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.АктПроверкиСтраховыхВзносовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.АктПроверкиСтраховыхВзносовПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПерерасчетСтраховыхВзносов.Чтение.ГруппыФизическихЛиц
	|Документ.ПерерасчетСтраховыхВзносов.Чтение.Организации
	|Документ.ПерерасчетСтраховыхВзносов.Изменение.ГруппыФизическихЛиц
	|Документ.ПерерасчетСтраховыхВзносов.Изменение.Организации
	|Справочник.ПерерасчетСтраховыхВзносовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПерерасчетСтраховыхВзносовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПерерасчетСтраховыхВзносовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПерерасчетСтраховыхВзносовПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетНачисленнойЗарплаты
	Описание = Описание + "
	|РегистрНакопления.НачисленияУдержанияПоСотрудникам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.НачисленияУдержанияПоСотрудникам.Чтение.Организации
	|РегистрНакопления.НачисленияУдержанияПоСотрудникам.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.НачисленияУдержанияПоСотрудникам.Изменение.Организации
	|РегистрНакопления.ОтработанноеВремяПоСотрудникам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ОтработанноеВремяПоСотрудникам.Чтение.Организации
	|РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом.Чтение.Организации
	|РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом.Изменение.Организации
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамАвансом.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамАвансом.Чтение.Организации
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамАвансом.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамАвансом.Изменение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.УчетНачисленнойЗарплаты
	
	// ЗарплатаКадрыПодсистемы.ДоговорыГПХ
	Описание = Описание + "
	|РегистрСведений.ОплаченныеДоговоры.Чтение.Организации
	|РегистрСведений.ПлановыеНачисленияПоДоговорам.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеНачисленияПоДоговорам.Чтение.Организации
	|РегистрСведений.УсловияДоговораГПХ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.УсловияДоговораГПХ.Чтение.Организации
	|РегистрНакопления.НачисленияПоДоговорамГПХ.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.НачисленияПоДоговорамГПХ.Чтение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.ДоговорыГПХ
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛ
	Описание = Описание + "
	|Документ.АвансовыйПлатежИностранцаПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.АвансовыйПлатежИностранцаПоНДФЛ.Чтение.Организации
	|Документ.АвансовыйПлатежИностранцаПоНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.АвансовыйПлатежИностранцаПоНДФЛ.Изменение.Организации
	|Справочник.АвансовыйПлатежИностранцаПоНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.АвансовыйПлатежИностранцаПоНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.АвансовыйПлатежИностранцаПоНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.АвансовыйПлатежИностранцаПоНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Документ.ВозвратНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.ВозвратНДФЛ.Чтение.Организации
	|Документ.ВозвратНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.ВозвратНДФЛ.Изменение.Организации
	|Справочник.ВозвратНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВозвратНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВозвратНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВозвратНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОперацияНалоговогоУчетаПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.ОперацияНалоговогоУчетаПоНДФЛ.Чтение.Организации
	|Документ.ОперацияНалоговогоУчетаПоНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.ОперацияНалоговогоУчетаПоНДФЛ.Изменение.Организации
	|Справочник.ОперацияНалоговогоУчетаПоНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОперацияНалоговогоУчетаПоНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОперацияНалоговогоУчетаПоНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОперацияНалоговогоУчетаПоНДФЛПрисоединенныеФайлы.Изменение.Организации
	|ЖурналДокументов.ДокументыПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ДокументыПоНДФЛ.Чтение.Организации
	|ЖурналДокументов.ЗаявленияНаВычеты.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ЗаявленияНаВычеты.Чтение.Организации
	|РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ВычетыПредыдущегоМестаРаботыНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ВычетыПредыдущегоМестаРаботыНДФЛ.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтандартныеВычетыНаДетейНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтандартныеВычетыПоНДФЛВторичный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ.Чтение.Организации
	|РегистрНакопления.ИмущественныеВычетыНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ИмущественныеВычетыНДФЛ.Чтение.Организации
	|РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Чтение.Организации
	|РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Чтение.Организации
	|РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Чтение.Организации
	|РегистрНакопления.СведенияОДоходахНДФЛ.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.СведенияОДоходахНДФЛ.Чтение.Организации
	|РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению.Чтение.Организации
	|РегистрНакопления.НДФЛКПеречислению.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.НДФЛКПеречислению.Чтение.Организации
	|РегистрНакопления.НДФЛПеречисленный.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.НДФЛПеречисленный.Чтение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛ
	
	// ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	Описание = Описание + "
	|Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.Чтение.Организации
	|Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.Изменение.Организации
	|Справочник.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Чтение.Организации
	|Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Изменение.Организации
	|Справочник.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПерерасчетНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.ПерерасчетНДФЛ.Чтение.Организации
	|Документ.ПерерасчетНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.ПерерасчетНДФЛ.Изменение.Организации
	|Справочник.ПерерасчетНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПерерасчетНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПерерасчетНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПерерасчетНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПрекращениеСтандартныхВычетовНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.ПрекращениеСтандартныхВычетовНДФЛ.Чтение.Организации
	|Документ.ПрекращениеСтандартныхВычетовНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.ПрекращениеСтандартныхВычетовНДФЛ.Изменение.Организации
	|Справочник.ПрекращениеСтандартныхВычетовНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПрекращениеСтандартныхВычетовНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПрекращениеСтандартныхВычетовНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПрекращениеСтандартныхВычетовНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Документ.СведенияОДоходахСотрудникаДляСоцВыплат.Чтение.ГруппыФизическихЛиц
	|Документ.СведенияОДоходахСотрудникаДляСоцВыплат.Чтение.Организации
	|Документ.СведенияОДоходахСотрудникаДляСоцВыплат.Изменение.ГруппыФизическихЛиц
	|Документ.СведенияОДоходахСотрудникаДляСоцВыплат.Изменение.Организации
	|Справочник.СведенияОДоходахСотрудникаДляСоцВыплатПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СведенияОДоходахСотрудникаДляСоцВыплатПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СведенияОДоходахСотрудникаДляСоцВыплатПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СведенияОДоходахСотрудникаДляСоцВыплатПрисоединенныеФайлы.Изменение.Организации
	|Документ.СправкаНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.СправкаНДФЛ.Чтение.Организации
	|Документ.СправкаНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.СправкаНДФЛ.Изменение.Организации
	|Справочник.СправкаНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СправкаНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СправкаНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СправкаНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Чтение.ГруппыФизическихЛиц
	|Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Чтение.Организации
	|Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Изменение.ГруппыФизическихЛиц
	|Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Изменение.Организации
	|Справочник.СправкиНДФЛДляПередачиВНалоговыйОрганПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СправкиНДФЛДляПередачиВНалоговыйОрганПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СправкиНДФЛДляПередачиВНалоговыйОрганПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СправкиНДФЛДляПередачиВНалоговыйОрганПрисоединенныеФайлы.Изменение.Организации
	|Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Чтение.ГруппыФизическихЛиц
	|Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Чтение.Организации
	|Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Изменение.ГруппыФизическихЛиц
	|Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Изменение.Организации
	|Документ.ЕжегодныеСтандартныеВычеты.Чтение.ГруппыФизическихЛиц
	|Документ.ЕжегодныеСтандартныеВычеты.Чтение.Организации
	|Документ.ЕжегодныеСтандартныеВычеты.Изменение.ГруппыФизическихЛиц
	|Документ.ЕжегодныеСтандартныеВычеты.Изменение.Организации
	|Справочник.УведомлениеОПравеНаИмущественныйВычетДляНДФЛПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УведомлениеОПравеНаИмущественныйВычетДляНДФЛПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УведомлениеОПравеНаИмущественныйВычетДляНДФЛПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УведомлениеОПравеНаИмущественныйВычетДляНДФЛПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ЕжегодныеСтандартныеВычетыПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЕжегодныеСтандартныеВычетыПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЕжегодныеСтандартныеВычетыПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЕжегодныеСтандартныеВычетыПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	
	// ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	Описание = Описание + "
	|Документ.ОперацияУчетаПоСтраховымВзносам.Чтение.ГруппыФизическихЛиц
	|Документ.ОперацияУчетаПоСтраховымВзносам.Чтение.Организации
	|Документ.ОперацияУчетаПоСтраховымВзносам.Изменение.ГруппыФизическихЛиц
	|Документ.ОперацияУчетаПоСтраховымВзносам.Изменение.Организации
	|Справочник.ОперацияУчетаПоСтраховымВзносамПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОперацияУчетаПоСтраховымВзносамПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОперацияУчетаПоСтраховымВзносамПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОперацияУчетаПоСтраховымВзносамПрисоединенныеФайлы.Изменение.Организации
	|Справочник.СамостоятельныеКлассификационныеЕдиницы.Чтение.Организации
	|Справочник.СамостоятельныеКлассификационныеЕдиницы.Изменение.Организации
	|РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.НастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда.Чтение.Организации
	|РегистрСведений.НастройкиУчетаСтраховыхВзносов.Чтение.Организации
	|РегистрСведений.НастройкиУчетаСтраховыхВзносов.Изменение.Организации
	|РегистрСведений.СведенияОбИнвалидностиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОбИнвалидностиФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Чтение.Организации
	|РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Изменение.Организации
	|РегистрСведений.СтатусыЗастрахованныхФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтатусыЗастрахованныхФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ИсторияСамостоятельныхКлассификационныхЕдиниц.Чтение.Организации
	|РегистрСведений.ИсторияСамостоятельныхКлассификационныхЕдиниц.Изменение.Организации
	|РегистрСведений.ИсторияСамостоятельныхКлассификационныхЕдиницВторичный.Чтение.Организации
	|РегистрНакопления.ИсчисленныеСтраховыеВзносы.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ИсчисленныеСтраховыеВзносы.Чтение.Организации
	|РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Чтение.Организации
	|РегистрНакопления.СведенияОДоходахСтраховыеВзносы.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.СведенияОДоходахСтраховыеВзносы.Чтение.Организации
	|РегистрНакопления.СтраховыеВзносыПоФизическимЛицам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.СтраховыеВзносыПоФизическимЛицам.Чтение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	
	// ЗарплатаКадрыПодсистемы.ФизическиеЛица
	Описание = Описание + "
	|Справочник.ФизическиеЛица.Чтение.ГруппыФизическихЛиц
	|Справочник.ФизическиеЛица.Изменение.ГруппыФизическихЛиц
	|Справочник.ФизическиеЛицаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ФизическиеЛицаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ДокументыФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ДокументыФизическихЛиц.Изменение.ГруппыФизическихЛиц";
	// Конец ЗарплатаКадрыПодсистемы.ФизическиеЛица
	
	// ЗарплатаКадрыПодсистемы.КабинетСотрудника
	КабинетСотрудника.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.КабинетСотрудника
	
	// ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ИнтеграцияКабинетСотрудника
	ИнтеграцияКабинетСотрудника.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ИнтеграцияКабинетСотрудника
	
	// ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	ЗаявкиСотрудников.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.ИнтеграцияУправлениеПерсоналом.ЗаявкиСотрудников
	
	// ЗарплатаКадрыПодсистемы.БизнесПроцессыЗаявокСотрудников
	Описание = Описание + "
	|БизнесПроцесс.ЗаявкаСотрудникаИзменитьЛичныеДанные.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаИзменитьЛичныеДанные.Изменение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаНалоговыйВычет.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаНалоговыйВычет.Изменение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаОтпуск.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаОтпуск.Изменение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаОтсутствиеПоБолезни.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаОтсутствиеПоБолезни.Изменение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ.Изменение.Пользователи
	|БизнесПроцесс.ОбращениеСотрудника.Чтение.Пользователи
	|БизнесПроцесс.ОбращениеСотрудника.Изменение.Пользователи
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаИзменитьЛичныеДанные
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаНалоговыйВычет
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаОтпуск
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаОтсутствиеПоБолезни
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ОбращениеСотрудника
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаИзменитьЛичныеДанные
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаНалоговыйВычет
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаОтпуск
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаОтсутствиеПоБолезни
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ОбращениеСотрудника";
	// Конец ЗарплатаКадрыПодсистемы.БизнесПроцессыЗаявокСотрудников
	
	// ЗарплатаКадрыПриложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации") Тогда
		Описание = Описание + "
		|Справочник.Организации.Чтение.Организации
		|Справочник.Организации.Изменение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ОтражениеЗарплатыВБухгалтерскомУчете") Тогда
		Описание = Описание + "
		|Документ.ОтражениеЗарплатыВБухучете.Чтение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВБухучете.Чтение.Организации
		|Документ.ОтражениеЗарплатыВБухучете.Изменение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВБухучете.Изменение.Организации
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ДоговорыГПХ") Тогда
		Описание = Описание + "
		|Документ.ДоговорРаботыУслуги.Чтение.ГруппыФизическихЛиц
		|Документ.ДоговорРаботыУслуги.Чтение.Организации
		|Документ.ДоговорРаботыУслуги.Изменение.ГруппыФизическихЛиц
		|Документ.ДоговорРаботыУслуги.Изменение.Организации
		|Справочник.ДоговорРаботыУслугиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ДоговорРаботыУслугиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ДоговорРаботыУслугиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ДоговорРаботыУслугиПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет") Тогда
		Описание = Описание + "
		|Документ.КадровыйПеревод.Чтение.ГруппыФизическихЛиц
		|Документ.КадровыйПеревод.Чтение.Организации
		|Документ.КадровыйПеревод.Изменение.ГруппыФизическихЛиц
		|Документ.КадровыйПеревод.Изменение.Организации
		|Справочник.КадровыйПереводПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.КадровыйПереводПрисоединенныеФайлы.Чтение.Организации
		|Справочник.КадровыйПереводПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.КадровыйПереводПрисоединенныеФайлы.Изменение.Организации
		|Документ.ПриемНаРаботу.Чтение.ГруппыФизическихЛиц
		|Документ.ПриемНаРаботу.Чтение.Организации
		|Документ.ПриемНаРаботу.Изменение.ГруппыФизическихЛиц
		|Документ.ПриемНаРаботу.Изменение.Организации
		|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Изменение.Организации
		|Документ.Увольнение.Чтение.ГруппыФизическихЛиц
		|Документ.Увольнение.Чтение.Организации
		|Документ.Увольнение.Изменение.ГруппыФизическихЛиц
		|Документ.Увольнение.Изменение.Организации
		|Справочник.УвольнениеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.УвольнениеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.УвольнениеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.УвольнениеПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		Описание = Описание + "
		|Документ.НачислениеОценочныхОбязательствПоОтпускам.Чтение.ГруппыФизическихЛиц
		|Документ.НачислениеОценочныхОбязательствПоОтпускам.Чтение.Организации
		|Документ.НачислениеОценочныхОбязательствПоОтпускам.Изменение.ГруппыФизическихЛиц
		|Документ.НачислениеОценочныхОбязательствПоОтпускам.Изменение.Организации
		|Справочник.НачислениеОценочныхОбязательствПоОтпускамПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.НачислениеОценочныхОбязательствПоОтпускамПрисоединенныеФайлы.Чтение.Организации
		|Справочник.НачислениеОценочныхОбязательствПоОтпускамПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.НачислениеОценочныхОбязательствПоОтпускамПрисоединенныеФайлы.Изменение.Организации
		|Документ.РезервыПоОплатеТруда.Чтение.ГруппыФизическихЛиц
		|Документ.РезервыПоОплатеТруда.Чтение.Организации
		|Документ.РезервыПоОплатеТруда.Изменение.ГруппыФизическихЛиц
		|Документ.РезервыПоОплатеТруда.Изменение.Организации
		|Справочник.РезервыПоОплатеТрудаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РезервыПоОплатеТрудаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РезервыПоОплатеТрудаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РезервыПоОплатеТрудаПрисоединенныеФайлы.Изменение.Организации
		|Справочник.НастройкиРасчетаРезервовПоОплатеТруда.Чтение.Организации
		|Справочник.НастройкиРасчетаРезервовПоОплатеТруда.Изменение.Организации
		|Справочник.ВидыРасчетовРезервовПоОплатеТруда.Чтение.Организации
		|Справочник.ВидыРасчетовРезервовПоОплатеТруда.Изменение.Организации
		|РегистрСведений.ЗарплатаКадрыДолиСписанияКосвенныхРасходов.Чтение.Организации
		|РегистрСведений.ЗарплатаКадрыДолиСписанияКосвенныхРасходов.Изменение.Организации
		|РегистрСведений.НастройкиРасчетаРезервовОтпусков.Чтение.Организации
		|РегистрСведений.РасчетРезерваОтпусков.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ОценочныеОбязательства.Чтение.Организации
		|РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Чтение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодразделенияОрганизаций") Тогда
		Описание = Описание + "
		|Справочник.ПодразделенияОрганизаций.Чтение.Организации
		|Справочник.ПодразделенияОрганизаций.Изменение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		Описание = Описание + "
		|Документ.БольничныйЛист.Чтение.ГруппыФизическихЛиц
		|Документ.БольничныйЛист.Чтение.Организации
		|Документ.БольничныйЛист.Изменение.ГруппыФизическихЛиц
		|Документ.БольничныйЛист.Изменение.Организации
		|Справочник.БольничныйЛистПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.БольничныйЛистПрисоединенныеФайлы.Чтение.Организации
		|Справочник.БольничныйЛистПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.БольничныйЛистПрисоединенныеФайлы.Изменение.Организации
		|Документ.ИсполнительныйЛист.Чтение.ГруппыФизическихЛиц
		|Документ.ИсполнительныйЛист.Чтение.Организации
		|Документ.ИсполнительныйЛист.Изменение.ГруппыФизическихЛиц
		|Документ.ИсполнительныйЛист.Изменение.Организации
		|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Изменение.Организации
		|Документ.Отпуск.Чтение.ГруппыФизическихЛиц
		|Документ.Отпуск.Чтение.Организации
		|Документ.Отпуск.Изменение.ГруппыФизическихЛиц
		|Документ.Отпуск.Изменение.Организации
		|Справочник.ОтпускПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтпускПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтпускПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтпускПрисоединенныеФайлы.Изменение.Организации
		|Документ.ОтпускБезСохраненияОплаты.Чтение.ГруппыФизическихЛиц
		|Документ.ОтпускБезСохраненияОплаты.Чтение.Организации
		|Документ.ОтпускБезСохраненияОплаты.Изменение.ГруппыФизическихЛиц
		|Документ.ОтпускБезСохраненияОплаты.Изменение.Организации
		|Справочник.ОтпускБезСохраненияОплатыПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтпускБезСохраненияОплатыПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтпускБезСохраненияОплатыПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтпускБезСохраненияОплатыПрисоединенныеФайлы.Изменение.Организации
		|ЖурналДокументов.НачислениеЗарплаты.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.НачислениеЗарплаты.Чтение.Организации
		|РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу.Чтение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетностьЗаполнение") Тогда
		Описание = Описание + "
		|Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Чтение.ГруппыФизическихЛиц
		|Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Чтение.Организации
		|Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Изменение.ГруппыФизическихЛиц
		|Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Изменение.Организации
		|Справочник.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыльПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыльПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыльПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыльПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения
	
	// РегламентированнаяОтчетность
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами") Тогда
		Описание = Описание + "
		|РегистрСведений.ЖурналНовыхСобытий.Изменение.Организации";
	КонецЕсли;
	// Конец РегламентированнаяОтчетность

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ЗащитаПерсональныхДанных") Тогда
		МодульЗащитаПерсональныхДанныхЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ЗащитаПерсональныхДанныхЗарплатаКадры");
		МодульЗащитаПерсональныхДанныхЗарплатаКадры.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
		МодульОбразованияФизическихЛиц.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц") Тогда
		МодульСемейныеПоложенияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СемейныеПоложенияФизическихЛиц");
		МодульСемейныеПоложенияФизическихЛиц.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ВоинскийУчет") Тогда
		МодульВоинскийУчет = ОбщегоНазначения.ОбщийМодуль("ВоинскийУчет");
		МодульВоинскийУчет.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц") Тогда
		МодульСводныеДанныеФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СводныеДанныеФизическихЛиц");
		МодульСводныеДанныеФизическихЛиц.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	// Потенциально могут быть добавлены и другой библиотекой, поэтому добавляем с проверкой.
	
	// Организации.
	Если ВидыДоступа.Найти("Организации", "Имя") = Неопределено Тогда
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя = "Организации";
		ВидДоступа.Представление = НСтр("ru = 'Организации';
										|en = 'Companies'");
		ВидДоступа.ТипЗначений   = Тип("СправочникСсылка.Организации");
	КонецЕсли;
	
	// Физические лица.
	Если ВидыДоступа.Найти("ГруппыФизическихЛиц", "Имя") = Неопределено Тогда
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя = "ГруппыФизическихЛиц";
		ВидДоступа.Представление = НСтр("ru = 'Группы физических лиц';
										|en = 'Persons'' group'");
		ВидДоступа.ТипЗначений = Тип("СправочникСсылка.ФизическиеЛица");
		ВидДоступа.ТипГруппЗначений = Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц");
	КонецЕсли;
	
	// Подразделения организаций.
	Если ВидыДоступа.Найти("ПодразделенияОрганизаций", "Имя") = Неопределено Тогда
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя = "ПодразделенияОрганизаций";
		ВидДоступа.Представление = НСтр("ru = 'Подразделения организаций';
										|en = 'Company business units'");
		ВидДоступа.ТипЗначений = Тип("СправочникСсылка.ПодразделенияОрганизаций");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование) Экспорт
	
	Если ИмяВидаДоступа = "ГруппыФизическихЛиц" Тогда
		Использование = Константы.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица.Получить();
	ИначеЕсли ИмяВидаДоступа = "ПодразделенияОрганизаций" Тогда
		Использование = Константы.ОграничиватьДоступНаУровнеЗаписейПодразделенияОрганизаций.Получить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	// ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	ОбменСБанкамиПоЗарплатнымПроектам.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	// Конец ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// ЗарплатаКадрыПодсистемы.КадровыйЭДО
	КадровыйЭДО.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйЭДО
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	// ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	ОбменСБанкамиПоЗарплатнымПроектам.ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	// Конец ЗарплатаКадрыПодсистемы.Выплаты.ОбменСБанкамиПоЗарплатнымПроектам
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// ЗарплатаКадрыПодсистемы.КадровыйЭДО
	КадровыйЭДО.ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйЭДО
	
КонецПроцедуры

#КонецОбласти

#Область ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	КадровыйЭДО.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьЗначенияМинимальнойОплатыТрудаРФ(ТекстXML, ПолучатьДанныеИзСервиса) Экспорт
	ЗарплатаКадры.ОбновитьКлассификатор(ТекстXML, ПолучатьДанныеИзСервиса);
КонецПроцедуры

// См. ЗарплатаКадры.ДобавитьКомандуПереходаКОбработкеРедактированиюЗаконодательныхЗначений.
Процедура ДобавитьКомандуПереходаКОбработкеРедактированиюЗаконодательныхЗначений(Форма, КоманднаяПанельФормы) Экспорт
	
КонецПроцедуры

// Возникает при регистрации классификаторов, обновляемых автоматически.
//
// Параметры:
//   ТаблицаКлассификаторов - ТаблицаЗначений - См. возвращаемое значение функции ЗарплатаКадры.АвтообновляемыеКлассификаторы.
//
Процедура ПриРегистрацииАвтоообновляемыхКлассификаторов(ТаблицаКлассификаторов) Экспорт
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "EffectiveDatesOfRegulatoryActs";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.ДатыВступленияВСилуНА";
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "MaxMonthlyInsurancePayout";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты";
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "MinMonthlyWage";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.МинимальнаяОплатаТрудаРФ";
	СтрокаТаблицы.ОбработкаРазделенныхДанных = Истина;
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "MaxInsurancePaymentBasis";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов";
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "PITDeductions";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.РазмерВычетовНДФЛ";
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "InsurancePaymentPercentagesR2";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.ТарифыСтраховыхВзносов";
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "RussianClassificationOfOccupations";
	СтрокаТаблицы.ПолноеИмя = "Справочник.КлассификаторЗанятий";
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПодписанта(Объект, ПолеПодписанта, ПолеДолжностиПодписанта) Экспорт
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "РукСсылка");
	Сведения.Добавить("", "ДолжнРукСсылка");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, Сведения);
	ОргСведения.Свойство("РукСсылка", Объект[ПолеПодписанта]);
	ОргСведения.Свойство("ДолжнРукСсылка", Объект[ПолеДолжностиПодписанта]);
		
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.18.7",
		"Роль.ДобавлениеИзменениеКадровогоСостояния",
		"Роль.ДобавлениеИзменениеДокументовЗарплатаКадры",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.18.7",
		"Роль.ЧтениеКадровогоСостояния",
		"Роль.ЧтениеДокументовЗарплатаКадры",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.4.83",
		"Подсистема.ЗарплатаКадрыПодсистемы.Подсистема.УчетПособийСоциальногоСтрахования",
		"Подсистема.ЗарплатаКадрыПодсистемы.Подсистема.ПособияСоциальногоСтрахования",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.4.83",
		"Подсистема.ЗарплатаКадрыПодсистемы.Подсистема.ПособияСоциальногоСтрахования.Подсистема.ПрямыеВыплатыПособийСоциальногоСтрахования",
		"Подсистема.ЗарплатаКадрыПодсистемы.Подсистема.ПособияСоциальногоСтрахования.Подсистема.ПрямыеВыплаты",
		"ЗарплатаКадрыБазовая");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
		МодульЗарплатаКадрыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыДляНебольшихОрганизаций");
		МодульЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаДокументовПечатныхФорм() Экспорт
	
	КадровыйЭДО.ВыполнитьОтправкуПечатныхФормПоЭлектроннойПочте();
	ИнтеграцияСРаботаВРоссии.ВыполнитьПередачуПечатныхФорм();
	ИнтеграцияУправлениеПерсоналомСобытия.ВыполнитьРегистрациюКПередачеФайловДокументовКЭДО();
	ОбсужденияБЗК.ОбновитьУведомленияОНеобходимостиПодписанияФайловДокументовКЭДО();
	БизнесПроцессыЗаявокСотрудниковСобытия.ЗавершитьЗаявкиСотрудниковПослеПодписанияСправок();
	ЗаявкиСотрудников.ЗавершитьЗаявкиСотрудниковПослеПодписанияСправок();
	
КонецПроцедуры

#Область РегистрацииВОрганеСтатистики

Функция СоздатьРегистрацииОрганизаций(ПараметрыОбновления, ДатаНачалаСведений) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.КодОрганаФСГС КАК КодОрганаФСГС,
		|	Организации.КодПоОКПО КАК КодПоОКПО,
		|	ЕСТЬNULL(РегистрацииВОрганеСтатистики.Ссылка, НЕОПРЕДЕЛЕНО) КАК СуществующаяРегистрация,
		|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|		ПО (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница = Организации.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВОрганеСтатистики КАК РегистрацииВОрганеСтатистики
		|		ПО (РегистрацииВОрганеСтатистики.СтруктурнаяЕдиница = Организации.Ссылка)
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация ЕСТЬ NULL");

	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОрганизацииОбработаны = Истина;
	Иначе
		ОрганизацииОбработаны = Ложь;
		
		// Для каждой организации создается одна регистрация в органе статистики.
		
		Выборка = ОбновляемыеДанные.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Справочники.Организации);
			ОписаниеБлокировки.ПоляБлокировки.Ссылка = Выборка.Организация;
			Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.СуществующаяРегистрация = Неопределено Тогда
				НоваяРегистрация = Справочники.РегистрацииВОрганеСтатистики.СоздатьЭлемент();
				НоваяРегистрация.Владелец = Выборка.Организация;
				НоваяРегистрация.СтруктурнаяЕдиница = Выборка.Организация;
				НоваяРегистрация.Наименование = Справочники.РегистрацииВОрганеСтатистики.СтандартноеНаименование(Выборка.Организация);
				НоваяРегистрация.КодОрганаФСГС = Выборка.КодОрганаФСГС;
				Если Выборка.ОбособленноеПодразделение Тогда
					НоваяРегистрация.ИдентификационныйНомер = Выборка.КодПоОКПО;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяРегистрация);
				Регистрация = НоваяРегистрация.Ссылка;
			Иначе
				Регистрация = Выборка.СуществующаяРегистрация;
			КонецЕсли;
			
			НоваяЗапись = РегистрыСведений.ИспользованиеРегистрацийВОрганеСтатистики.СоздатьМенеджерЗаписи();
			НоваяЗапись.Период = ДатаНачалаСведений;
			НоваяЗапись.СтруктурнаяЕдиница = Выборка.Организация;
			НоваяЗапись.Регистрация = Регистрация;
			НоваяЗапись.Записать();
			
			ОрганизацияОъект = Выборка.Организация.ПолучитьОбъект();
			ОрганизацияОъект.КодОрганаФСГС = "";
			Если Выборка.ОбособленноеПодразделение Тогда
				ОрганизацияОъект.КодПоОКПО = "";
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОъект);
			
			ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОрганизацииОбработаны;
	
КонецФункции

Функция СоздатьРегистрацииПодразделений(ПараметрыОбновления, ДатаНачалаСведений)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
		|	РегистрацииОрганизаций.СтруктурнаяЕдиница КАК Организация,
		|	РегистрацииОрганизаций.КодОрганаФСГС КАК КодОрганаФСГС,
		|	РегистрацииОрганизаций.ИдентификационныйНомер КАК ИдентификационныйНомер,
		|	ЕСТЬNULL(РегистрацииВОрганеСтатистики.Ссылка, НЕОПРЕДЕЛЕНО) КАК СуществующаяРегистрация,
		|	АВТОНОМЕРЗАПИСИ() КАК Идентификатор
		|ПОМЕСТИТЬ ВТРегистрации
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВОрганеСтатистики КАК РегистрацииОрганизаций
		|		ПО (РегистрацииОрганизаций.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Владелец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВОрганеСтатистики КАК РегистрацииВОрганеСтатистики
		|		ПО (РегистрацииВОрганеСтатистики.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка)
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|	И ПодразделенияОрганизаций.ОбособленноеПодразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодразделенияОрганизаций.Ссылка,
		|	РегистрацииОрганизаций.СтруктурнаяЕдиница,
		|	РегистрацииОрганизаций.КодОрганаФСГС,
		|	РегистрацииОрганизаций.ИдентификационныйНомер,
		|	ЕСТЬNULL(РегистрацииВОрганеСтатистики.Ссылка, НЕОПРЕДЕЛЕНО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Регистрации.Подразделение КАК Подразделение,
		|	Регистрации.Организация КАК Организация,
		|	Регистрации.КодОрганаФСГС КАК КодОрганаФСГС,
		|	Регистрации.ИдентификационныйНомер КАК ИдентификационныйНомер,
		|	Регистрации.СуществующаяРегистрация КАК СуществующаяРегистрация,
		|	Регистрации.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ВТНовыеРегистрации
		|ИЗ
		|	ВТРегистрации КАК Регистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|		ПО (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций)
		|			И (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация = Регистрации.СуществующаяРегистрация)
		|ГДЕ
		|	(Регистрации.СуществующаяРегистрация ЕСТЬ NULL
		|			ИЛИ ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеРегистрации.Подразделение КАК Подразделение,
		|	НовыеРегистрации.Организация КАК Организация,
		|	НовыеРегистрации.КодОрганаФСГС КАК КодОрганаФСГС,
		|	НовыеРегистрации.ИдентификационныйНомер КАК ИдентификационныйНомер,
		|	НовыеРегистрации.СуществующаяРегистрация КАК СуществующаяРегистрация,
		|	НовыеРегистрации.Идентификатор КАК Идентификатор
		|ИЗ
		|	ВТНовыеРегистрации КАК НовыеРегистрации");
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления, "ВТНовыеРегистрации", 500);
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[2].Пустой() Тогда
		ПодразделенияОбработаны = Истина;
	Иначе
		ПодразделенияОбработаны = Ложь;
		
		// Для каждого подразделения с установленным флагом "Это - обособленное подразделение"
		// создается отдельная регистрация с кодами Росстата как у Организации.
		
		Регистрации = Результат[2].Выгрузить();
		Для Каждого ДанныеРегистрации Из Регистрации Цикл
			
			РегистрацияСсылка = ДанныеРегистрации.СуществующаяРегистрация;
			Если Не ЗначениеЗаполнено(РегистрацияСсылка) Тогда
				НоваяРегистрация = Справочники.РегистрацииВОрганеСтатистики.СоздатьЭлемент();
				НоваяРегистрация.Владелец = ДанныеРегистрации.Организация;
				НоваяРегистрация.СтруктурнаяЕдиница = ДанныеРегистрации.Подразделение;
				НоваяРегистрация.Наименование = Справочники.РегистрацииВОрганеСтатистики.СтандартноеНаименование(ДанныеРегистрации.Подразделение);
				НоваяРегистрация.КодОрганаФСГС = ДанныеРегистрации.КодОрганаФСГС;
				НоваяРегистрация.ИдентификационныйНомер = ДанныеРегистрации.ИдентификационныйНомер;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяРегистрация);
				РегистрацияСсылка = НоваяРегистрация.Ссылка;
			КонецЕсли;
			
			НоваяЗапись = РегистрыСведений.ИспользованиеРегистрацийВОрганеСтатистики.СоздатьМенеджерЗаписи();
			НоваяЗапись.Период = ДатаНачалаСведений;
			НоваяЗапись.СтруктурнаяЕдиница = ДанныеРегистрации.Подразделение;
			НоваяЗапись.Регистрация = РегистрацияСсылка;
			НоваяЗапись.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПодразделенияОбработаны;
	
КонецФункции

Процедура ЗаполнитьРегистрацииВОрганеСтатистики(ПараметрыОбновления = Неопределено) Экспорт 
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	ДатаНачалаСведений = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц();
	
	ОрганизацииОбработаны = СоздатьРегистрацииОрганизаций(ПараметрыОбновления, ДатаНачалаСведений);
	ПодразделенияОбработаны = СоздатьРегистрацииПодразделений(ПараметрыОбновления, ДатаНачалаСведений);
	
	ОбновлениеИБ.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОрганизацииОбработаны И ПодразделенияОбработаны);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриСозданииФормыСпискаФайлов.
Процедура ПриСозданииФормыСпискаФайлов(Форма) Экспорт
	
	КадровыйЭДО.ПриСозданииФормыСпискаФайлов(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияС1СДокументооборот

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ДополнитьСоответствиеТипов.
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	Справочники.ФизическиеЛица.ДополнитьСоответствиеТипов(Таблица);
	Справочники.Сотрудники.ДополнитьСоответствиеТипов(Таблица);
	Справочники.Должности.ДополнитьСоответствиеТипов(Таблица);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации") Тогда
		МодульОрганизацииСлужебный = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСлужебный");
		МодульОрганизацииСлужебный.ДополнитьСоответствиеТипов(Таблица);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодразделенияОрганизаций") Тогда
		МодульПодразделенияОрганизаций = ОбщегоНазначения.ОбщийМодуль("Справочники.ПодразделенияОрганизаций");
		МодульПодразделенияОрганизаций.ДополнитьСоответствиеТипов(Таблица);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные") Тогда
		МодульБазовыеСправочныеДанные = ОбщегоНазначения.ОбщийМодуль("БазовыеСправочныеДанные");
		МодульБазовыеСправочныеДанные.ДополнитьСоответствиеТипов(Таблица);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя.
Процедура ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	Справочники.ФизическиеЛица.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	Справочники.Сотрудники.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные") Тогда
		МодульБазовыеСправочныеДанные = ОбщегоНазначения.ОбщийМодуль("БазовыеСправочныеДанные");
		МодульБазовыеСправочныеДанные.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации") Тогда
		МодульОрганизацииСлужебный = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСлужебный");
		МодульОрганизацииСлужебный.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодразделенияОрганизаций") Тогда
		МодульПодразделенияОрганизаций = ОбщегоНазначения.ОбщийМодуль("Справочники.ПодразделенияОрганизаций");
		МодульПодразделенияОрганизаций.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO.
Процедура ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(Результат, ЗначениеЗаполнения, ТипРеквизита, ИмяРеквизита,
		ТипОбъекта, Объект, ЭтоДополнительноеСвойство, Свойство, ПараметрыВыбора) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные") Тогда
		МодульБазовыеСправочныеДанные = ОбщегоНазначения.ОбщийМодуль("БазовыеСправочныеДанные");
		МодульБазовыеСправочныеДанные.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
			Результат,
			ЗначениеЗаполнения,
			ТипРеквизита,
			ИмяРеквизита,
			ТипОбъекта,
			Объект,
			ЭтоДополнительноеСвойство,
			Свойство,
			ПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриСозданииПоСсылке.
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС) Экспорт
	
	Справочники.ФизическиеЛица.ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации") Тогда
		МодульОрганизацииСлужебный = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСлужебный");
		МодульОрганизацииСлужебный.ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодразделенияОрганизаций") Тогда
		МодульПодразделенияОрганизаций = ОбщегоНазначения.ОбщийМодуль("Справочники.ПодразделенияОрганизаций");
		МодульПодразделенияОрганизаций.ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.ПриемНаРаботу);
	Объекты.Добавить(Метаданные.Документы.ДоговорРаботыУслуги);
	Объекты.Добавить(Метаданные.Документы.Увольнение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры") Тогда
		МодульКонфигурацииЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадры");
		МодульКонфигурацииЗарплатаКадры.ПриОпределенииПроверок(ГруппыПроверок, Проверки);
	Иначе
		// Необходимо описать группу проверок БЗК
		ГруппаПроверокБЗК = ГруппыПроверок.Добавить();
		ГруппаПроверокБЗК.Наименование					= НСтр("ru = 'Зарплата и кадры';
																|en = 'Payroll and human resources'");
		ГруппаПроверокБЗК.Идентификатор					= ЗарплатаКадры.ИдентификаторГруппыПроверокВеденияУчетаБЗК();
		ГруппаПроверокБЗК.КонтекстПроверокВеденияУчета	= ГруппаПроверокБЗК.Идентификатор;
	КонецЕсли;
	
	КадровыйУчет.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	УчетНДФЛ.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	КадровыйЭДО.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьНачальныеЗначения(ИменаОбъектовМетаданных) Экспорт
	
	Если ПустаяСтрока(ИменаОбъектовМетаданных) Тогда
		ОбрабатываемыеИменаОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("");
	Иначе
		ОбрабатываемыеИменаОбъектов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаОбъектовМетаданных,",", Истина, Истина);
	КонецЕсли;
	
	Для каждого ОбрабатываемоеИмя Из ОбрабатываемыеИменаОбъектов Цикл
		
		// Справочники
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ОснованияУвольнения")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ОснованияУвольнения");
			Справочники.ОснованияУвольнения.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ОснованияУвольнения");
			
		КонецЕсли; 
		
		// УчетНДФЛ
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ВидыВычетовНДФЛ")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыВычетовНДФЛ");
			Справочники.ВидыВычетовНДФЛ.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыВычетовНДФЛ");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ВидыДоходовНДФЛ")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыДоходовНДФЛ");
			Справочники.ВидыДоходовНДФЛ.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыДоходовНДФЛ");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.СтатусыНалогоплательщиковПоНДФЛ")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.СтатусыНалогоплательщиковПоНДФЛ");
			Справочники.СтатусыНалогоплательщиковПоНДФЛ.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.СтатусыНалогоплательщиковПоНДФЛ");
			
		КонецЕсли; 
		
		// УчетСтраховыхВзносов
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ВидыДоходовПоСтраховымВзносам")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыДоходовПоСтраховымВзносам");
			Справочники.ВидыДоходовПоСтраховымВзносам.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыДоходовПоСтраховымВзносам");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ВидыТарифовСтраховыхВзносов")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыТарифовСтраховыхВзносов");
			Справочники.ВидыТарифовСтраховыхВзносов.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыТарифовСтраховыхВзносов");
			
		КонецЕсли; 
		
		// ПерсонифицированныйУчет
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ТерриториальныеУсловияПФР")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ТерриториальныеУсловияПФР");
			Справочники.ТерриториальныеУсловияПФР.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ТерриториальныеУсловияПФР");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ОснованияДосрочногоНазначенияПенсии")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ОснованияДосрочногоНазначенияПенсии");
			Справочники.ОснованияДосрочногоНазначенияПенсии.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ОснованияДосрочногоНазначенияПенсии");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК");
			Справочники.ОснованияДосрочногоНазначенияПенсии.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ВидыОбщественноПолезнойДеятельностиСЗВК")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыОбщественноПолезнойДеятельностиСЗВК");
			Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыОбщественноПолезнойДеятельностиСЗВК");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ПараметрыИсчисляемогоСтраховогоСтажа")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ПараметрыИсчисляемогоСтраховогоСтажа");
			Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ПараметрыИсчисляемогоСтраховогоСтажа");
			
		КонецЕсли; 
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.КлассификаторЗанятий")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.КлассификаторЗанятий");
			Справочники.КлассификаторЗанятий.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.КлассификаторЗанятий");
			
		КонецЕсли; 
		
		// Регистры сведений
		
		// УчетНДФЛ
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("РегистрСведений.ВычетыПоДоходамНДФЛ") Тогда
			РегистрыСведений.ВычетыПоДоходамНДФЛ.НачальноеЗаполнение();
		КонецЕсли;
		
		// УчетСтраховыхВзносов
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("РегистрСведений.СтраховыеВзносыСкидкиКДоходам") Тогда
			РегистрыСведений.СтраховыеВзносыСкидкиКДоходам.НачальноеЗаполнение();
		КонецЕсли;
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("РегистрСведений.ТарифыВзносовЗаЗанятыхНаРаботахСДосрочнойПенсией") Тогда
			РегистрыСведений.ТарифыВзносовЗаЗанятыхНаРаботахСДосрочнойПенсией.НачальноеЗаполнение();
		КонецЕсли;
		
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("РегистрСведений.ТарифыВзносовПоРезультатамСпециальнойОценкиУсловийТруда") Тогда
			РегистрыСведений.ТарифыВзносовПоРезультатамСпециальнойОценкиУсловийТруда.НачальноеЗаполнение();
		КонецЕсли;
		
		// ПерсонифицированныйУчет
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("РегистрСведений.ДопустимыеСочетанияКодовГруппСтажа") Тогда
			РегистрыСведений.ДопустимыеСочетанияКодовГруппСтажа.НачальноеЗаполнение();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСправочникНаЗадвоенныеЗначения(ПолноеИмяОбъектаМетаданных)
	
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	УникальностьКодов = Ложь;
	УникальностьНаименований = Ложь;
	Если МетаданныеСправочника.ДлинаКода > 0 И МетаданныеСправочника.КонтрольУникальности Тогда
		УникальностьКодов = Истина;
	ИначеЕсли МетаданныеСправочника.ДлинаНаименования > 0 Тогда
		УникальностьНаименований = Истина;
	КонецЕсли; 
	
	Если УникальностьКодов ИЛИ УникальностьНаименований Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник.Ссылка) КАК Ссылка,
			|	Справочник.Код КАК КлючУникальности
			|ПОМЕСТИТЬ ВТКоличествоСсылок
			|ИЗ
			|	ПолноеИмяСправочника КАК Справочник
			|
			|СГРУППИРОВАТЬ ПО
			|	Справочник.Код
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КоличествоСсылок.КлючУникальности
			|ПОМЕСТИТЬ ВТЗадвоенныеКлючи
			|ИЗ
			|	ВТКоличествоСсылок КАК КоличествоСсылок
			|ГДЕ
			|	КоличествоСсылок.Ссылка > 1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадвоенныеКлючи.КлючУникальности КАК КлючУникальности,
			|	Справочник.Ссылка КАК Ссылка,
			|	Справочник.Предопределенный КАК Предопределенный
			|ИЗ
			|	ВТЗадвоенныеКлючи КАК ЗадвоенныеКлючи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПолноеИмяСправочника КАК Справочник
			|		ПО ЗадвоенныеКлючи.КлючУникальности = Справочник.Код
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючУникальности,
			|	Предопределенный УБЫВ,
			|	Ссылка";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолноеИмяСправочника", "Справочник." + МетаданныеСправочника.Имя);
		
		Если УникальностьНаименований Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Код", "Справочник.Наименование");
		КонецЕсли; 
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			НайденныеСсылки = НайтиПоСсылкам(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
			ТаблицаСсылок = НайденныеСсылки.Скопировать(, "Ссылка");
			ТаблицаСсылок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			ТаблицаСсылок.ЗаполнитьЗначения(1, "Количество");
			ТаблицаСсылок.Свернуть("Ссылка", "Количество");
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("КлючУникальности") Цикл
				
				ОставляемаяСсылка = Неопределено;
				КоличествоСсылок = 0;
				ОставляемаяСсылкаПредопределенная = Ложь;
				
				СписокСсылок = Новый Массив;
				Пока Выборка.Следующий() Цикл
					
					СписокСсылок.Добавить(Выборка.Ссылка);
					ТаблицаСсылок.Найти(Выборка.Ссылка, "Ссылка");
					Если КоличествоСсылок < ТаблицаСсылок.Количество() Тогда
						
						Если Выборка.Предопределенный ИЛИ НЕ ОставляемаяСсылкаПредопределенная Тогда
							ОставляемаяСсылкаПредопределенная = Выборка.Предопределенный;
							ОставляемаяСсылка = Выборка.Ссылка;
							КоличествоСсылок = ТаблицаСсылок.Количество();
						КонецЕсли; 
						
					ИначеЕсли ОставляемаяСсылка = Неопределено Тогда 
						ОставляемаяСсылкаПредопределенная = Выборка.Предопределенный;
						ОставляемаяСсылка = Выборка.Ссылка;
					КонецЕсли; 
					
				КонецЦикла; 
				
				ПарыЗамен = Новый Соответствие;
				Для каждого СсылкаИзСписка Из СписокСсылок Цикл
					
					ОбъектСсылки = СсылкаИзСписка.ПолучитьОбъект();
					
					Если СсылкаИзСписка = ОставляемаяСсылка Тогда
						
						Если ОбъектСсылки.ПометкаУдаления Тогда
							ОбъектСсылки.УстановитьПометкуУдаления(Ложь);
						КонецЕсли; 
						
						Продолжить;
						
					КонецЕсли; 
					
					ОбъектСсылки.ИмяПредопределенныхДанных = "";
					ОбъектСсылки.ПометкаУдаления = Истина;
					ОбъектСсылки.ОбменДанными.Загрузка = Истина;
					ОбъектСсылки.Записать();
					
					ПарыЗамен.Вставить(СсылкаИзСписка, ОставляемаяСсылка);
					
				КонецЦикла;
				
				Если ПарыЗамен.Количество() > 0 Тогда
					
					ПараметрыЗамены = Новый Структура;
					ПараметрыЗамены.Вставить("СпособУдаления", "Пометка");
					ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Ложь);
					ПараметрыЗамены.Вставить("ЗаменаПарыВТранзакции", Ложь);
					ПараметрыЗамены.Вставить("ПривилегированнаяЗапись", Истина);
					
					ТаблицаРезультата = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, ПараметрыЗамены);
					Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
						
						СообщитьОбОшибке = Истина;
						Если СтрокаРезультата.ТипОшибки = "ОшибкаЗаписи" Тогда
							ОбъектОшибки = СтрокаРезультата.ОбъектОшибки;
							ОбъектОшибки.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
							Попытка
								ОбъектОшибки.Записать();
								СообщитьОбОшибке = Ложь;
							Исключение
								
							КонецПопытки;
						КонецЕсли; 
						
						Если СообщитьОбОшибке Тогда
							ОбщегоНазначения.СообщитьПользователю(СтрокаРезультата.ТекстОшибки);
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьВозможностьСменыГоловнойОрганизации(Организация, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачисленияУдержанияПоСотрудникам.Организация
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Организация = &Организация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'По %1 производилось начисление/удержание зарплаты.
			         |Чтобы изменить головную организацию, необходимо отменить проведение этих документов.';
			         |en = 'Salary accounting and deduction was made by %1.
			         |To change the parent company, cancel posting of these documents.'"),
			Организация);
			
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			Организация,
			"ГоловнаяОрганизация",
			"Объект",
			Отказ);
		
	КонецЕсли; 
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Организация = &Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация = &Организация";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'В %1 произведен прием на работу сотрудников.
					     |Чтобы изменить головную организацию, необходимо отменить проведение этих документов.';
					     |en = 'Employees are hired in %1.
					     |To change the parent company, cancel posting of these documents.'"),
				Организация);
				
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				Организация,
				"ГоловнаяОрганизация",
				"Объект",
				Отказ);
			
		КонецЕсли; 
			
	КонецЕсли; 	
	
КонецПроцедуры

Функция ОписанияРегистровСодержащихРегистрацииВНалоговомОргане() Экспорт
	
	МассивОписаний = Новый Массив;
	
	ЗарплатаКадры.ДобавитьОписаниеРегистровСодержащихРегистрацииВНалоговомОргане(МассивОписаний,
		"РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ", "ИсследуемыйРегистр.МесяцНалоговогоПериода");
	
	ЗарплатаКадры.ДобавитьОписаниеРегистровСодержащихРегистрацииВНалоговомОргане(МассивОписаний,
		"РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ", "
			|ВЫБОР
			|	КОГДА ИсследуемыйРегистр.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		ТОГДА ИсследуемыйРегистр.МесяцНалоговогоПериода
			|	ИНАЧЕ ВЫБОР
			|		КОГДА ИсследуемыйРегистр.Период > ИсследуемыйРегистр.МесяцНалоговогоПериода
			|			ТОГДА ИсследуемыйРегистр.Период
			|		ИНАЧЕ ИсследуемыйРегистр.МесяцНалоговогоПериода
			|	КОНЕЦ
			|КОНЕЦ");
	
	ЗарплатаКадры.ДобавитьОписаниеРегистровСодержащихРегистрацииВНалоговомОргане(МассивОписаний,
		"РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ", "ИсследуемыйРегистр.МесяцНалоговогоПериода");
	
	ЗарплатаКадры.ДобавитьОписаниеРегистровСодержащихРегистрацииВНалоговомОргане(МассивОписаний,
		"РегистрНакопления.СведенияОДоходахНДФЛ", "ИсследуемыйРегистр.ДатаПолученияДохода");
	
	ЗарплатаКадры.ДобавитьОписаниеРегистровСодержащихРегистрацииВНалоговомОргане(МассивОписаний,
		"РегистрНакопления.ИмущественныеВычетыНДФЛ", "ИсследуемыйРегистр.Период");
	
	Возврат МассивОписаний;
	
КонецФункции

Функция КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, Объект)
	Ссылка = ?(ТипЗнч(Объект) = Тип("СправочникОбъект.Организации"), Объект.Ссылка, Объект);
	Результат = Кэш.КонтактнаяИнформация[Ссылка];
	
	Если Результат = Неопределено Тогда
		Результат = КонтактнаяИнформацияБЗК.КонтактнаяИнформацияОбъектов(Объект, , , Кэш.ДатаЗначения);
		Кэш.КонтактнаяИнформация.Вставить(Ссылка, Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает значение из кэша источников сведений об организации.
//
// Параметры:
//   Кэш - Структура
//       * Организация - СправочникОбъект.Организации
//       * ДатаЗначения - Дата
//       * ЭтоЮридическоеЛицо - Булево
//   Параметр - Строка
//
// Возвращаемое значение:
//   Произвольный
//
Функция ПолучитьСУчетомКэша(Кэш, Параметр)
	Перем Результат, ФизЛицо;
	
	Если Кэш.Свойство(Параметр, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Параметр, "ИП_") И Не Кэш.ЭтоЮридическоеЛицо Тогда
		ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
	ИначеЕсли СтрНачинаетсяС(Параметр, "Руководитель_") Тогда
		ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").Руководитель;
	ИначеЕсли СтрНачинаетсяС(Параметр, "ГлавныйБухгалтер_") Тогда
		ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ОтветственныеЛицаОрганизации").ГлавныйБухгалтер;
	КонецЕсли;
	
	Если Параметр = "ЮрАдресОрганизации" Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, Кэш.Организация);
		Результат = ТаблицаКИ.Найти(ВидКИ, "Вид");
		
	ИначеЕсли Параметр = "ФактАдресОрганизации" Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, Кэш.Организация);
		Результат = ТаблицаКИ.Найти(ВидКИ, "Вид");
		
	ИначеЕсли Параметр = "ПочтовыйАдресОрганизации" Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, Кэш.Организация);
		Результат = ТаблицаКИ.Найти(ВидКИ, "Вид");
		
	ИначеЕсли Параметр = "ФизическоеЛицоИП" Тогда
		
		Если Кэш.ЭтоЮридическоеЛицо Тогда
			Результат = Неопределено;
		Иначе
			Результат = Кэш.Организация.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
	ИначеЕсли Параметр = "ОтветственныеЛицаОрганизации" Тогда
		
		ИменаРолей = "Руководитель, ДолжностьРуководителя, ДолжностьРуководителяСтрокой, ГлавныйБухгалтер, ДолжностьГлавногоБухгалтера";
		ОтветственныеЛица = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Кэш.Организация.Ссылка, ИменаРолей, Кэш.ДатаЗначения);
		
		Результат = Новый Структура("Руководитель,РуководительДолжность,РуководительДолжностьПредставление,ГлавныйБухгалтер,ГлавныйБухгалтерДолжность");
		Результат.Руководитель              = ОтветственныеЛица.Руководитель;
		Результат.ГлавныйБухгалтер          = ОтветственныеЛица.ГлавныйБухгалтер;
		Результат.РуководительДолжность     = ОтветственныеЛица.ДолжностьРуководителя;
		Результат.ГлавныйБухгалтерДолжность = ОтветственныеЛица.ДолжностьГлавногоБухгалтера;
		Результат.РуководительДолжностьПредставление = ОтветственныеЛица.ДолжностьРуководителяСтрокой;
		
		Если Не ЗначениеЗаполнено(Результат.Руководитель) Тогда
			Результат.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Результат.РуководительДолжность) Тогда
			Результат.РуководительДолжность = Справочники.Должности.ПустаяСсылка();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Результат.ГлавныйБухгалтер) Тогда
			Результат.ГлавныйБухгалтер = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Результат.ГлавныйБухгалтерДолжность) Тогда
			Результат.ГлавныйБухгалтерДолжность = Справочники.Должности.ПустаяСсылка();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Результат.РуководительДолжностьПредставление) Тогда
			Результат.РуководительДолжностьПредставление = "";
		КонецЕсли;
		
	ИначеЕсли Параметр = "ТелефонОрганизации" Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, Кэш.Организация);
		Результат = ТаблицаКИ.Найти(ВидКИ, "Вид");
		
		Если Результат = Неопределено И Не Кэш.ЭтоЮридическоеЛицо Тогда
			
			ВидыКИ = Новый Массив;
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонРабочийФизическиеЛица") Тогда
				ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
			КонецЕсли;
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонДомашнийФизическиеЛица") Тогда
				ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
			КонецЕсли;
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "ФизическоеЛицоИП");
			ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, ФизЛицо);
			Для Каждого ВидКИ Из ВидыКИ Цикл
				Результат = ТаблицаКИ.Найти(ВидКИ, "Вид");
				Если Результат <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла
			
		КонецЕсли;
		
	ИначеЕсли Параметр = "РегистрацияВНалоговомОргане" Или Параметр = "РегистрацияВНалоговомОрганеГоловнойОрганизации" Тогда
		
		СсылкаОрганизации = ?(Параметр = "РегистрацияВНалоговомОргане", Кэш.Организация.Ссылка, Кэш.Организация.ГоловнаяОрганизация);
		СсылкаРегистрации = ЗарплатаКадры.РегистрацияВНалоговомОргане(СсылкаОрганизации, Кэш.ДатаЗначения);
		ИменаРеквизитов = "Код, КодПоОКАТО, КодПоОКТМО, НаименованиеИФНС, КПП";
		Если ЗначениеЗаполнено(СсылкаРегистрации) Тогда
			Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаРегистрации, ИменаРеквизитов);
		Иначе
			Результат = Новый Структура(ИменаРеквизитов);
			Для Каждого КлючИЗначение Из Результат Цикл
				Результат.Вставить(КлючИЗначение.Ключ, "");
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Параметр = "УчетнаяПолитикаНалоговыйУчет" Тогда
		
		Фильтр = Новый Структура("Организация", Кэш.Организация.Ссылка);
		Результат = РегистрыСведений.НастройкиСистемыНалогообложения.СрезПоследних(Кэш.ДатаЗначения, Фильтр);
		
	ИначеЕсли Параметр = "РегистрацияСФР" Тогда
		
		Результат = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.ДанныеОрганизации(
			Кэш.Организация.Ссылка,
			Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "РегистрацияСФРГоловнойОрганизации" Тогда
		
		Результат = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.ДанныеОрганизации(
			Кэш.Организация.ГоловнаяОрганизация,
			Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "ИП_ПаспортныеДанные"
		ИЛИ Параметр = "Руководитель_ПаспортныеДанные"
		ИЛИ Параметр = "ГлавныйБухгалтер_ПаспортныеДанные" Тогда
		
		Результат = ПаспортныеДанные(ФизЛицо, Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "ИП_Адрес"
		ИЛИ Параметр = "Руководитель_Адрес"
		ИЛИ Параметр = "ГлавныйБухгалтер_Адрес" Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
		ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, ФизЛицо);
		Результат = ТаблицаКИ.Найти(ВидКИ, "Вид");
		
	ИначеЕсли Параметр = "ИП_АдресПрописки" Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
		ТаблицаКИ = КонтактнаяИнформацияОбъектаСУчетомКэша(Кэш, ФизЛицо);
		Результат = ТаблицаКИ.Найти(ВидКИ, "Вид");
		
	ИначеЕсли Параметр = "ИП_Страна"
		Или Параметр = "Руководитель_Страна"
		Или Параметр = "ГлавныйБухгалтер_Страна" Тогда
		
		Результат = СтранаФизическогоЛица(ФизЛицо, Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "ИП_ФИО"
		Или Параметр = "Руководитель_ФИО"
		Или Параметр = "ГлавныйБухгалтер_ФИО" Тогда
		
		Результат = ФИОФизическогоЛица(ФизЛицо, Кэш.ДатаЗначения);
		
		Если Параметр = "ИП_ФИО"
			И Не ЗначениеЗаполнено(Результат.Фамилия)
			И Не Кэш.ЭтоЮридическоеЛицо Тогда
			ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(Кэш.Организация.НаименованиеПолное);
			ЗаполнитьЗначенияСвойств(Результат, ЧастиИмени);
		КонецЕсли;
		
	КонецЕсли;
				
	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;
	
КонецФункции

Функция АдресВФормате9Запятых(СтрокаКИ)
	Если СтрокаКИ = Неопределено Тогда
		Возврат ",,,,,,,,,";
	Иначе
		Возврат РегламентированнаяОтчетность.АдресВФормате9Запятых(СтрокаКИ);
	КонецЕсли;
КонецФункции

Функция КонтактнаяИнформацияВXML(СтрокаКИ)
	Если СтрокаКИ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
			СтрокаКИ.ЗначенияПолей,
			СтрокаКИ.Представление,
			СтрокаКИ.Вид);
	КонецЕсли;
КонецФункции

Функция КонтактнаяИнформацияВJSON(СтрокаКИ)
	Если СтрокаКИ = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеЗаполнено(СтрокаКИ.Значение) Тогда
		Возврат СтрокаКИ.Значение;
	Иначе
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
			СтрокаКИ.ЗначенияПолей,
			СтрокаКИ.Вид);
	КонецЕсли;
КонецФункции

Функция ФИОФизическогоЛица(ФизическоеЛицо, ДатаЗначения)
	Результат = Новый Структура("Фамилия,Имя,Отчество");
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическогоЛица(Истина, ФизическоеЛицо, "Фамилия, Имя, Отчество", ДатаЗначения);
	Если КадровыеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, КадровыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Результат Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Результат[КлючИЗначение.Ключ] = СокрЛП(КлючИЗначение.Значение);
		Иначе
			Результат[КлючИЗначение.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПаспортныеДанные(ФизическоеЛицо, ДатаЗначения)
	ПоляПаспортныхДанных = Новый Массив;
	ПоляПаспортныхДанных.Добавить("ДокументВид");
	ПоляПаспортныхДанных.Добавить("ДокументКодМВД");
	ПоляПаспортныхДанных.Добавить("ДокументСерия");
	ПоляПаспортныхДанных.Добавить("ДокументНомер");
	ПоляПаспортныхДанных.Добавить("ДокументДатаВыдачи");
	ПоляПаспортныхДанных.Добавить("ДокументКемВыдан");
	ПоляПаспортныхДанных.Добавить("ДокументКодПодразделения");
	ПоляПаспортныхДанных.Добавить("ДокументПредставление");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ПаспортныеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Ложь,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
			ПоляПаспортныхДанных,
			ДатаЗначения)[0];
	Иначе
		ПаспортныеДанные = Новый Структура(СтрСоединить(ПоляПаспортныхДанных, ","));
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Для Каждого Поле Из ПоляПаспортныхДанных Цикл
		Результат.Вставить(
			СтрЗаменить(Поле, "Документ", ""),
			?(ЗначениеЗаполнено(ПаспортныеДанные[Поле]), ПаспортныеДанные[Поле], ""));
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Результат.Вид) Тогда
		Результат.Вид = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.ДатаВыдачи) Тогда
		Результат.ДатаВыдачи = '00010101';
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СтранаФизическогоЛица(ФизическоеЛицо, ДатаЗначения)
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
		"Страна",
		ДатаЗначения);
	
	Если КадровыеДанныеФизическихЛиц.Количество() > 0 Тогда
		Возврат КадровыеДанныеФизическихЛиц[0].Страна;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Функция возвращает имя справочника обособленных подразделений,
// используемого для автоматического заполнения статистической отчетности.
//
// Пример:
//  Возврат "ПодразделенияОрганизаций";
//
Функция ИмяСправочникаОбособленныхПодразделений() Экспорт
	Возврат "ПодразделенияОрганизаций";
КонецФункции

// Функция возвращает имя реквизита справочника подразделений, который
// определяет, является ли подразделение обособленным (в трактовке Росстата).
// Используется для автоматического заполнения статистической отчетности.
//
// Тип реквизита - Булево.
// Если значение реквизита равно Истина - подразделение является обособленным.
// Если значение реквизита равно Ложь - подразделение не является обособленным.
//
// Пример:
//  Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
//
Функция ИмяРеквизитаПризнакаОбособленногоПодразделения() Экспорт
	Возврат "ОбособленноеПодразделение";
КонецФункции

// См. ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей.
Процедура ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица = Неопределено, ДатаОперации = Неопределено, Отказ = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если Ведомости.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если ФизическиеЛица <> Неопределено И ФизическиеЛица.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОперации) Тогда
		ДатаОперации = ПлатежныйДокумент.Дата
	КонецЕсли;	
	
	ПолученныеВедомости = Новый Массив;  // ведомости из внешнего учета зарплаты
	ВнутренниеВедомости = Новый Массив;  // ведомости на выплату начисленной зарплаты 
	
	МетаданныеВедомостьНаВыплатуЗарплаты = Метаданные.Документы.Найти("ВедомостьНаВыплатуЗарплаты");
	Если МетаданныеВедомостьНаВыплатуЗарплаты = Неопределено Тогда
		// транспортных ведомостей нет, все ведомости выплачивают начисленную зарплату
		ВнутренниеВедомости = Ведомости
	Иначе	
		ТипВедомостьНаВыплатуЗарплаты = Тип("ДокументСсылка." + МетаданныеВедомостьНаВыплатуЗарплаты.Имя);
		Для Каждого Ведомость Из Ведомости Цикл
			Если ТипЗнч(Ведомость) = ТипВедомостьНаВыплатуЗарплаты Тогда
				ПолученныеВедомости.Добавить(Ведомость)
			Иначе
				ВнутренниеВедомости.Добавить(Ведомость)
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	// установка признака выдачи денег получателю (для всех ведомостей одинаково)
	ВзаиморасчетыССотрудниками.ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, Неопределено, Отказ);
	
	// регистрация выдачи начисленной зарплаты
	ВедомостьНаВыплатуЗарплаты.ЗарегистрироватьОплату(ПлатежныйДокумент, Организация, ВнутренниеВедомости, ФизическиеЛица, ДатаОперации, Отказ);

КонецПроцедуры

// Получает код ОКПО обособленного подразделения
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//   КодОКПО       - Строка(14) - код ОКПО обособленного подразделения.
Процедура ПолучитьКодОКПОПодразделения(Знач Подразделение, КодОКПО) Экспорт 
	
	Если ЗарплатаКадрыКлиентСервер.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
		Сведения = РегистрацииВОрганеСтатистикиВызовСервера.СведенияОРегистрацииВОрганеСтатистики(Подразделение,,"ИдентификационныйНомер");
		КодОКПО = Сведения.ДанныеРегистрации.ИдентификационныйНомер;
	КонецЕсли;
	
КонецПроцедуры

// Получает код органа ФСГС обособленного подразделения
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//   КодФСГС       - Строка(5) - код органа ФСГС для подразделения (например, "23-45").
//
Процедура ПолучитьКодОрганаФСГСПодразделения(Подразделение, КодФСГС) Экспорт 
	
	Если ЗарплатаКадрыКлиентСервер.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
		Сведения = РегистрацииВОрганеСтатистикиВызовСервера.СведенияОРегистрацииВОрганеСтатистики(Подразделение,,"КодОрганаФСГС");
		КодФСГС = Сведения.ДанныеРегистрации.КодОрганаФСГС;
	Иначе
		КодФСГС = Подразделение.КодОрганаФСГС;
	КонецЕсли;
	
КонецПроцедуры

Функция РегистраторыПереносаДанных() Экспорт
	Возврат Новый Массив;
КонецФункции

// ЗарплатаКадрыПодсистемы.ПодписиДокументов

// См. ПодписиДокументовПереопределяемый.ПриОпределенииРолейПодписантов.
Процедура ПриОпределенииРолейПодписантов(РолиПодписантов) Экспорт
	РольРуководитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Руководитель", "ДолжностьРуководителя", "ОснованиеПодписиРуководителя");
	РолиПодписантов.Добавить(РольРуководитель);
	
	РольГлавныйБухгалтер = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ГлавныйБухгалтер", "ДолжностьГлавногоБухгалтера", "ОснованиеПодписиГлавногоБухгалтера");
	РолиПодписантов.Добавить(РольГлавныйБухгалтер);
	
	РольБухгалтер = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Бухгалтер", "ДолжностьБухгалтера", "ОснованиеПодписиБухгалтера");
	РолиПодписантов.Добавить(РольБухгалтер);
	
	РольКассир = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Кассир", "ДолжностьКассира", "ОснованиеПодписиКассира");
	РолиПодписантов.Добавить(РольКассир);
	
	РольПредставительСФР = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ПредставительСФР", "ДолжностьПредставителяСФР", "ОснованиеПодписиПредставителяСФР");
	РолиПодписантов.Добавить(РольПредставительСФР);
	
	РольИсполнитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Исполнитель", "ДолжностьИсполнителя", "ОснованиеПодписиИсполнителя");
	РолиПодписантов.Добавить(РольИсполнитель);
	
	РольСоставил = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Составил", "ДолжностьСоставившего", "ОснованиеПодписиСоставившего");
	РолиПодписантов.Добавить(РольСоставил);
	
	РольПроверил = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Проверил", "ДолжностьПроверившего", "ОснованиеПодписиПроверившего");
	РолиПодписантов.Добавить(РольПроверил);
	
	РольРуководительКадровойСлужбы = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("РуководительКадровойСлужбы", "ДолжностьРуководителяКадровойСлужбы", "ОснованиеПодписиРуководителяКадровойСлужбы");
	РолиПодписантов.Добавить(РольРуководительКадровойСлужбы);
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов


// СтандартныеПодсистемы.ПоискИУдалениеДублей

Процедура ПриОпределенииОбъектовСПоискомДублей(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.Сотрудники.ПолноеИмя(),
		"ПараметрыПоискаДублей
		|ПриПоискеДублей
		|ВозможностьЗаменыЭлементов");
	
КонецПроцедуры

#Область ЦентрМониторинга

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.ПоискИУдалениеДублей

#КонецОбласти

