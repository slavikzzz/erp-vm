
#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

функция ОписаниеДокумента() Экспорт
	Описание = Новый Структура();
	Описание.Вставить("МесяцНачисленияИмя", "МесяцНачисления");
	Описание.Вставить("НачисленияПерерасчетИмя", "");
	Описание.Вставить("ДатаНачалаСобытияИмя", "");
	Описание.Вставить("ВидНачисленияВШапке", Ложь);
	Описание.Вставить("ВидНачисленияИмя", Неопределено);
	Описание.Вставить("СпособыРасчетаСреднегоЗаработка", Неопределено);
	
	Возврат Описание;
КонецФункции

Функция ОписаниеТаблицыРасчета() Экспорт
	Описание = Новый Структура();	
	Описание.Вставить("ИмяТаблицы", "");
	Описание.Вставить("НомерТаблицы", 0);
	Описание.Вставить("СодержитПолеВидРасчета", Истина);
	Описание.Вставить("ИмяРеквизитаВидРасчета", "Начисление");
	Описание.Вставить("ИмяРеквизитаПериод", "МесяцНачисления");
	Описание.Вставить("ИмяРеквизитаДокументОснование", "");
	Описание.Вставить("ИмяРеквизитаИдентификаторСтроки", "ИдентификаторСтрокиВидаРасчета");
	
	Возврат Описание;
КонецФункции

Функция ТаблицыНачисленийДокумента() Экспорт

	ТаблицыНачислений = Новый Структура(
		"Начисления,
		|НачисленияПерерасчет,
		|НачисленияПерерасчетНулевыеСторно,
		|Пособия,
		|ПособияПерерасчет,
		|Льготы,
		|ЛьготыПерерасчет,
		|УправленческиеНачисления,
		|ЗависимыеНачисления,
		|Показатели,
		|РаспределениеПоСтатьям,
		|РаспределениеПоТерриториямУсловиямТруда");
		
	Возврат ТаблицыНачислений;
	
КонецФункции

Функция ТаблицыУдержанийДокумента() Экспорт

	ТаблицыУдержаний = Новый Структура(
		"Удержания,
		|УдержанияПерерасчет,
		|РаспределениеПоСтатьям,
		|Показатели");
		
	Возврат ТаблицыУдержаний;
	
КонецФункции

Функция ТаблицыНДФЛДокумента() Экспорт

	ТаблицыУдержаний = Новый Структура(
		"НДФЛ,
		|Вычеты,
		|УчтенныеДокументы,
		|РаспределениеПоСтатьям");
		
	Возврат ТаблицыУдержаний;
	
КонецФункции

Функция ОписаниеТаблицУдержанийДокумента() Экспорт

	ТаблицыУдержаний = Новый Структура(
		"Удержания,
		|УдержанияПерерасчет");
		
	Возврат ТаблицыУдержаний;
	
КонецФункции

Функция ОписаниеТаблицНачисленийДокумента() Экспорт

	ТаблицыНачислений = Новый Структура(
		"Начисления,
		|НачисленияПерерасчет,
		|НачисленияПерерасчетНулевыеСторно,
		|Пособия,
		|ПособияПерерасчет,
		|Льготы,
		|ЛьготыПерерасчет,
		|УправленческиеНачисления,
		|ЗависимыеНачисления");
		
	Возврат ТаблицыНачислений;
	
КонецФункции

Процедура РасчетЗарплатыНачисленияВДанныеОбъекта(ТаблицыНачислений, ТаблицаИсточник, Организация, ОписанияТаблиц, МесяцНачисления = Неопределено, РежимДоначисления = Ложь) Экспорт
	
	ВидыРасчета = Новый Массив;
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		ВидыРасчета.Добавить(СтрокаИсточника.Начисление);
	КонецЦикла;
	
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	Для Каждого СтрокаНачисления Из ТаблицаИсточник Цикл
		
		ЭтоПерерасчет = РежимДоначисления Или РасчетЗарплатыРасширенныйФормы.ЭтоСтрокаПерерасчета(СтрокаНачисления, МесяцНачисления);
		ЭтоПособие = РасчетЗарплатыРасширенныйФормы.ЭтоСтрокаПособия(СтрокаНачисления);
		ЭтоНулевоеСторно = СтрокаНачисления.ФиксСторно
			И СтрокаНачисления.Сторно
			И СтрокаНачисления.Результат = 0
			И СтрокаНачисления.ОплаченоДней = 0
			И СтрокаНачисления.ОплаченоЧасов = 0;
			
		ЭтоЛьготы = Ложь;
		ЭтоУправленческиеНачисления = Ложь;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников")
			И ТаблицыНачислений.Льготы <> Неопределено Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			ЭтоЛьготы = Модуль.ЭтоСтрокаЛьготы(СтрокаНачисления, ВидыРасчетаИнфо);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата")
			И ТаблицыНачислений.УправленческиеНачисления <> Неопределено Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			ЭтоУправленческиеНачисления = Модуль.ЭтоСтрокаУправленческиеНачисления(СтрокаНачисления);
		КонецЕсли;
		

		Если ТаблицыНачислений["ПособияПерерасчет"] <> Неопределено
			И (СтрокаНачисления.Владелец = "ПособияПерерасчет"
				Или ЭтоПособие И ЭтоПерерасчет И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец)) Тогда
			
			СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(
				ТаблицыНачислений.ПособияПерерасчет, 
				ОписанияТаблиц.ПособияПерерасчет);
			СтрокаПособияВДанныеОбъекта(
				Организация, СтрокаТаблицы, 
				СтрокаНачисления, 
				ТаблицыНачислений, 
				ВидыРасчетаИнфо, 
				ОписанияТаблиц.ПособияПерерасчет);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["Пособия"] <> Неопределено
			И (СтрокаНачисления.Владелец = "Пособия"
				Или ЭтоПособие И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец)) Тогда
			
			СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(
				ТаблицыНачислений.Пособия, 
				ОписанияТаблиц.Пособия);
			СтрокаПособияВДанныеОбъекта(
				Организация, СтрокаТаблицы, 
				СтрокаНачисления, 
				ТаблицыНачислений, 
				ВидыРасчетаИнфо, 
				ОписанияТаблиц.Пособия);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["НачисленияПерерасчетНулевыеСторно"] <> Неопределено
			И (СтрокаНачисления.Владелец = "НачисленияПерерасчетНулевыеСторно"
				Или ЭтоНулевоеСторно) Тогда
		
			СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНачислений.НачисленияПерерасчетНулевыеСторно, ОписанияТаблиц.НачисленияПерерасчетНулевыеСторно);
			СтрокаНачисленияВДанныеОбъекта(Организация, СтрокаТаблицы, СтрокаНачисления, ТаблицыНачислений, ВидыРасчетаИнфо, ОписанияТаблиц.НачисленияПерерасчетНулевыеСторно);
			Продолжить;
		КонецЕсли;
		
//		TODO
//		
//		Если ТаблицыНачислений["ЛьготыПерерасчет"] <> Неопределено
//			И ЭтоЛьготы	И ЭтоПерерасчет  И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец) Тогда
//			
//		    СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНачислений.ЛьготыПерерасчет, ОписанияТаблиц.ЛьготыПерерасчет);
//			СтрокаЛьготыВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
//			Продолжить;
//		КонецЕсли;
//		
//		Если ТаблицыНачислений["Льготы"] <> Неопределено
//			И ЭтоЛьготы Тогда
//			
//			СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНачислений.Льготы, ОписанияТаблиц.Льготы);
//			СтрокаЛьготыВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
//			Продолжить;
//		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") 
			И ТаблицыНачислений["УправленческиеНачисления"] <> Неопределено
			И ЭтоУправленческиеНачисления Тогда
			
			СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНачислений.УправленческиеНачисления, ОписанияТаблиц.УправленческиеНачисления);
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.СтрокаНачисленияВДанныеОбъекта(СтрокаТаблицы, СтрокаНачисления, ТаблицыНачислений, ВидыРасчетаИнфо, ОписанияТаблиц.УправленческиеНачисления);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["НачисленияПерерасчет"] <> Неопределено
			И (СтрокаНачисления.Владелец = "НачисленияПерерасчет"
				Или ЭтоПерерасчет И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец)) Тогда
				
			СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНачислений.НачисленияПерерасчет, ОписанияТаблиц.НачисленияПерерасчет);
			СтрокаНачисленияВДанныеОбъекта(Организация, СтрокаТаблицы, СтрокаНачисления, ТаблицыНачислений, ВидыРасчетаИнфо, ОписанияТаблиц.НачисленияПерерасчет);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНачисления.РассчитыватьПоРазовымНачислениямДокумента 
			И ТаблицыНачислений.Свойство("ЗависимыеНачисления") 
			И ТаблицыНачислений.ЗависимыеНачисления <> Неопределено Тогда
			
			СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНачислений.ЗависимыеНачисления, ОписанияТаблиц.ЗависимыеНачисления);
			СтрокаНачисленияВДанныеОбъекта(Организация, СтрокаТаблицы, СтрокаНачисления, ТаблицыНачислений, ВидыРасчетаИнфо, ОписанияТаблиц.ЗависимыеНачисления);
			
			Продолжить;
		КонецЕсли;	
		
		СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНачислений.Начисления, ОписанияТаблиц.Начисления);
		СтрокаНачисленияВДанныеОбъекта(Организация, СтрокаТаблицы, СтрокаНачисления, ТаблицыНачислений, ВидыРасчетаИнфо, ОписанияТаблиц.Начисления);
		
	КонецЦикла;
КонецПроцедуры

Процедура РасчетЗарплатыУдержанияВДанныеОбъекта(ТаблицыУдержаний, ТаблицаИсточник, ОписанияТаблиц, МесяцНачисления = Неопределено, РежимДоначисления = Ложь) Экспорт
	
	ВидыРасчета = Новый Массив;
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		ВидыРасчета.Добавить(СтрокаИсточника.Удержание);
	КонецЦикла;
	
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
			
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ЭтоПерерасчет = РежимДоначисления 
			Или РасчетЗарплатыРасширенныйФормы.ЭтоСтрокаПерерасчетаУдержаний(СтрокаИсточник, МесяцНачисления);
		Если ТаблицыУдержаний.УдержанияПерерасчет <> Неопределено 
			И ЭтоПерерасчет
			Или СтрокаИсточник.Владелец = "УдержанияПерерасчет" Тогда
			
			ИмяТаблицы = "УдержанияПерерасчет";
		Иначе
			ИмяТаблицы = "Удержания";
		КонецЕсли;
		
		СтрокаТаблицы = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыУдержаний[ИмяТаблицы], ОписанияТаблиц[ИмяТаблицы]);
		СтрокаУдержанияВДанныеОбъекта(СтрокаТаблицы, СтрокаИсточник, ТаблицыУдержаний, ВидыРасчетаИнфо, ОписанияТаблиц[ИмяТаблицы])
	КонецЦикла; 
	
КонецПроцедуры

Процедура РасчетЗарплатыНДФЛВДанныеОбъекта(ТаблицыНДФЛ, ТаблицаИсточник, ОписаниеТаблицыНДФЛ, ДокументСсылка = Неопределено) Экспорт
	ФизическиеЛица = Новый Соответствие;
	
	ОписаниеКолонок = УчетНДФЛ.ОписаниеКолонокТаблицыНДФЛ(ТаблицаИсточник);
	СтруктураПоискаВычетов = Новый Структура(ОписаниеКолонок.КолонкиПоиска);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаИсточник, ОписаниеКолонок.КолонкиПоиска);
	
	ИсточникСИндексами = ТаблицаИсточник.Скопировать();
	ИсточникСИндексами.Индексы.Добавить(ОписаниеКолонок.КолонкиСвязиТаблиц);
	ИсточникСИндексами.Индексы.Добавить(ОписаниеКолонок.КолонкиПоиска);
	НДФЛ = УчетНДФЛ.ТаблицаНДФЛбезМесяцаПериодаПредоставленияВычета(ИсточникСИндексами, ОписаниеКолонок);	
	
			
	Для Каждого СтрокаИсточник Из НДФЛ Цикл
		СтрокаНДФЛ = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицыНДФЛ.НДФЛ, ОписаниеТаблицыНДФЛ);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВычетов,СтрокаИсточник);
		СтрокиВычетов = ИсточникСИндексами.НайтиСтроки(СтруктураПоискаВычетов);
		СтрокаНДФЛВДанныеОбъекта(СтрокаНДФЛ, СтрокаИсточник, СтрокиВычетов, ТаблицыНДФЛ, ОписаниеТаблицыНДФЛ);
		
		Если ТаблицыНДФЛ.УчтенныеДокументы <> Неопределено Тогда
			ДокументыФизическихЛиц = ФизическиеЛица[СтрокаИсточник.ФизическоеЛицо];
			Если ДокументыФизическихЛиц = Неопределено Тогда 
				ДокументыФизическихЛиц = Новый Соответствие;
		        ФизическиеЛица.Вставить(СтрокаИсточник.ФизическоеЛицо, ДокументыФизическихЛиц);
			КонецЕсли;
			Для Каждого ДокументОснование Из СтрокаИсточник.УчтенныеОснования Цикл 
				Если ЗначениеЗаполнено(ДокументОснование) И ДокументОснование <> ДокументСсылка Тогда 
					ДокументыФизическихЛиц.Вставить(ДокументОснование, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	
	Если ТаблицыНДФЛ.УчтенныеДокументы <> Неопределено Тогда
		Для Каждого ДанныеФизическогоЛица Из ФизическиеЛица Цикл
			ФизическоеЛицо = ДанныеФизическогоЛица.Ключ;
			ДокументыФизическихЛиц = ДанныеФизическогоЛица.Значение;
			Для Каждого ДанныеДокумента Из ДокументыФизическихЛиц Цикл 
				СтрокаДокумента = ТаблицыНДФЛ.УчтенныеДокументы.Добавить();
				СтрокаДокумента.ФизическоеЛицо = ФизическоеЛицо;
				СтрокаДокумента.ДокументОснование = ДанныеДокумента.Ключ;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетЗарплатыПогашениеЗаймовВДанныеОбъекта(ТаблицаПриемник, ТаблицаИсточник, ТаблицаРаспределенияПоСтатьям, ОписаниеТаблицы) Экспорт
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		СтрокаДокумента = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицаПриемник, ОписаниеТаблицы);
		СтрокаПогашениеЗаймовВДанныеОбъекта(СтрокаДокумента, СтрокаИсточник, ОписаниеТаблицы, ТаблицаРаспределенияПоСтатьям);
	КонецЦикла; 
КонецПроцедуры

Процедура РасчетЗарплатыКорректировкиВыплатыВДанныеОбъекта(ТаблицаПриемник, ТаблицаИсточник, ТаблицаРаспределенияПоСтатьям, ОписаниеТаблицы) Экспорт
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		СтрокаДокумента = ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицаПриемник, ОписаниеТаблицы);
		СтрокаКорректировкиВыплатыВДанныеОбъекта(СтрокаДокумента, СтрокаИсточник, ОписаниеТаблицы, ТаблицаРаспределенияПоСтатьям);
	КонецЦикла; 
КонецПроцедуры

Процедура УстановитьВторогоОтветственногоВМногофункциональныхДокументах(Документ) Экспорт 
	ОписаниеДокумента = МногофункциональныеДокументыБЗК.ОписаниеМногофункциональногоДокументаПредыдущийФормат(Документ.Ссылка);

	Если Документ[ОписаниеДокумента.РеквизитСостояние] Тогда 
		Если Не ЗначениеЗаполнено(Документ[ОписаниеДокумента.ВторойОтветственный]) Тогда 
			Документ[ОписаниеДокумента.ВторойОтветственный] = Пользователи.ТекущийПользователь();
		КонецЕсли;	
	Иначе 
		Если ЗначениеЗаполнено(Документ[ОписаниеДокумента.ВторойОтветственный]) Тогда 
			Документ[ОписаниеДокумента.ВторойОтветственный] = Неопределено;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

Процедура НачисленияВМенеджерРасчета(ТаблицаНачислений, МенеджерРасчета, ТаблицыДокумента, Организация, ИмяТаблицы = "Начисления") Экспорт
	
	СотрудникиОтбор = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНачислений, "Сотрудник");
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СотрудникиОтбор, "ФизическоеЛицо");
	
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНачислений.Сотрудник];
		СтрокаНачисленияВМенеджерРасчета(
			МенеджерРасчета, 
			СтрокаНачислений, 
			Организация, 
			ФизическоеЛицо, 
			ТаблицыДокумента,
			ИмяТаблицы);	
	КонецЦикла;
КонецПроцедуры

Процедура НачисленияПерерасчетСНулевымиСторноМенеджерРасчета(ТаблицаИсточник, ТаблицаДополнение, МенеджерРасчета, ТаблицыДокумента, Организация) Экспорт
	НачисленияВМенеджерРасчета(ТаблицаДополнение, МенеджерРасчета, ТаблицыДокумента, Организация, "НачисленияПерерасчетНулевыеСторно");
	НачисленияВМенеджерРасчета(ТаблицаИсточник, МенеджерРасчета, ТаблицыДокумента, Организация, "НачисленияПерерасчет");
КонецПроцедуры

Процедура УдержанияВМенеджерРасчета(ТаблицаИсточник, МенеджерРасчета, ТаблицыДокумента, ИмяТаблицы = "Удержания") Экспорт
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Удержание");
	КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
	Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		СтрокаУдержанияВДанныеМенеджераРасчета(
			МенеджерРасчета, 
			СтрокаТаблицы, 
			КатегорииУдержаний, 
			ТаблицыДокумента, 
			ИмяТаблицы);
	КонецЦикла;
КонецПроцедуры

Процедура КорректировкиВыплатыВМенеджерРасчета(ТаблицаИсточник, МенеджерРасчета, РаспределениеПоСтатьям = Неопределено) Экспорт
	Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаТаблицы, РаспределениеПоСтатьям);
	КонецЦикла;
КонецПроцедуры

Процедура ПогашениеЗаймовВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, РаспределениеПоСтатьям = Неопределено) Экспорт
	Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаТаблицы, РаспределениеПоСтатьям);
	КонецЦикла;
КонецПроцедуры

Процедура НДФЛВДанныеМенеджераРасчета(ТаблицыНДФЛДокумента, МенеджерРасчета) Экспорт
	Для Каждого СтрокаТаблицы Из ТаблицыНДФЛДокумента.НДФЛ Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиНДФЛ", СтрокаТаблицы.ИдентификаторСтрокиНДФЛ);
		СтрокиПримененныеВычеты = ТаблицыНДФЛДокумента.Вычеты.НайтиСтроки(СтруктураПоиска);
		СтрокаНДФЛВДанныеМенеджераРасчета(
			МенеджерРасчета, 
			СтрокаТаблицы, 
			СтрокиПримененныеВычеты, 
			ТаблицыНДФЛДокумента.РаспределениеПоСтатьям);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипыСтрокНачисленийМенеджераРасчета() Экспорт
	ТипыСтрок = Новый Структура();
	ТипыСтрок.Вставить("Начисления", "Начисления");
	ТипыСтрок.Вставить("НачисленияПерерасчет", "НачисленияПерерасчет");
	ТипыСтрок.Вставить("НачисленияПерерасчетНулевыеСторно", "НачисленияПерерасчетНулевыеСторно");
	ТипыСтрок.Вставить("Пособия", "Пособия");
	ТипыСтрок.Вставить("ПособияПерерасчет", "ПособияПерерасчет");
	ТипыСтрок.Вставить("Льготы", "Льготы");
	ТипыСтрок.Вставить("ЛьготыПерерасчет", "ЛьготыПерерасчет");
	ТипыСтрок.Вставить("УправленческиеНачисления", "УправленческиеНачисления");
	ТипыСтрок.Вставить("ЗависимыеНачисления", "ЗависимыеНачисления");
	
	Возврат ТипыСтрок;
КонецФункции

Функция ДобавитьСтрокуТаблицыСИдентефикатором(ТаблицаОбъекта, ОписаниеТаблицы) Экспорт
	Если ТаблицаОбъекта.Количество() = 0 Тогда
		ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
	Иначе
		ИдентификаторСтроки	= ТаблицаОбъекта[ТаблицаОбъекта.Количество() - 1][ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] + 1;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаОбъекта.Добавить();
	СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
	Возврат СтрокаТаблицы;
КонецФункции

Процедура СтрокаНачисленияВДанныеОбъекта(Организация, СтрокаПриемник, СтрокаИсточник, ТаблицыДокумента, ВидыРасчетаИнфо, ОписаниеТаблицы)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ИсходныеДанные = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаИсточник.Дополнительно);
		ИсходныеДанные.Вставить("КатегорияНачисления", ЗначенияРеквизитов.КатегорияНачисленияИлиНеоплаченногоВремени);
		УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиРезультатыРасчетаПособия(СтрокаПриемник, ИсходныеДанные);
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ПоказателиВОбъект(СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], СтрокаИсточник, ТаблицыДокумента, ЗначенияРеквизитов.Показатели);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТрудаВОбъект(
		СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
		СтрокаИсточник, 
		Организация, 
		ТаблицыДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РаспределениеПоСтатьямВОбъект(
			СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
			СтрокаИсточник, 
			ТаблицыДокумента.РаспределениеПоСтатьям);
	КонецЕсли;	
	
КонецПроцедуры

Процедура СтрокаУдержанияВДанныеОбъекта(СтрокаПриемник, СтрокаИсточник, ТаблицыДокумента, ВидыРасчетаИнфо, ОписаниеТаблицы)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Удержание);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ПоказателиВОбъект(СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], СтрокаИсточник, ТаблицыДокумента, ЗначенияРеквизитов.Показатели);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РаспределениеПоСтатьямВОбъект(
			СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
			СтрокаИсточник, 
			ТаблицыДокумента.РаспределениеПоСтатьям);
						
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаНДФЛВДанныеОбъекта(СтрокаНДФЛ, СтрокаИсточник, СтрокиВычетов, ТаблицыНДФЛ, ОписаниеТаблицы)
	
	ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаИсточник,, "ИдентификаторСтрокиНДФЛ");
	
	ВидыВычетов = УчетНДФЛ.ВидыВычетовПоПолямТаблицы();
	Для каждого СтрокаВычета Из СтрокиВычетов Цикл
		Для Каждого КлючИЗначение Из ВидыВычетов Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			КодВычета = КлючИЗначение.Значение;
			Если ЗначениеЗаполнено(СтрокаВычета[ИмяПоля]) Тогда
				СтрокаВычетов = ТаблицыНДФЛ.Вычеты.Добавить();
				СтрокаВычетов.ИдентификаторСтрокиНДФЛ = СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
				СтрокаВычетов.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
				СтрокаВычетов.КодВычета = КодВычета;
				СтрокаВычетов.РазмерВычета = СтрокаВычета[ИмяПоля];
				СтрокаВычетов.НалоговаяБаза = СтрокаВычета.НалоговаяБаза;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РаспределениеПоСтатьямВОбъект(
			СтрокаНДФЛ[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
			СтрокаИсточник, 
			ТаблицыНДФЛ.РаспределениеПоСтатьям);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПоказателиВОбъект(ИдентификаторСтрокиДокумента, СтрокаИсточник, ТаблицыДокумента, Показатели) Экспорт
	Если СтрокаИсточник.Показатели.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СтруктураПоиска = Новый Структура("Показатель");
	Для Каждого Показатель Из Показатели Цикл
		Если Не Показатель.ОтображатьВДокументахНачисления Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска.Показатель = Показатель.Показатель;
		НайденныеСтроки = СтрокаИсточник.Показатели.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказательСтрокаПриемника = ТаблицыДокумента.Показатели.Добавить();
		ПоказательСтрокаПриемника.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиДокумента;
		ПоказательСтрокаПриемника.Показатель = Показатель.Показатель;
		ПоказательСтрокаПриемника.Значение = НайденныеСтроки[0].Значение;
	КонецЦикла;
КонецПроцедуры

Процедура РаспределениеПоТерриториямУсловиямТрудаВОбъект(ИдентификаторСтрокиДокумента, СтрокаИсточник, Организация, ТаблицыДокумента) Экспорт
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;	
	КонецЕсли;
	
	НомерПоследнейСтроки = ТаблицыДокумента.РаспределениеПоТерриториямУсловиямТруда.Количество();
	Если НомерПоследнейСтроки = 0 Тогда
		ИдентификаторСтрокиПоказателей 
			= РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаНомерТаблицы() * 1000000;
	Иначе
		ИдентификаторСтрокиПоказателей 
			= ТаблицыДокумента.РаспределениеПоТерриториямУсловиямТруда[НомерПоследнейСтроки - 1].ИдентификаторСтрокиПоказателей + 1;
	КонецЕсли;	
		
	Для Каждого СтрокаРаспределения Из СтрокаИсточник.ТерриторииУсловияТруда Цикл
		СтрокаРаспределенияДокумента = ТаблицыДокумента.РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределенияДокумента, СтрокаРаспределения);
		СтрокаРаспределенияДокумента.ИдентификаторСтроки = ИдентификаторСтрокиДокумента;
		СтрокаРаспределенияДокумента.ИдентификаторСтрокиПоказателей = ИдентификаторСтрокиПоказателей;
		Для Каждого СтрокаПоказателя Из СтрокаРаспределения.Показатели Цикл
			ПоказательСтрокаПриемника = ТаблицыДокумента.Показатели.Добавить();
			ПоказательСтрокаПриемника.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиПоказателей;
			ПоказательСтрокаПриемника.Показатель = СтрокаПоказателя.Показатель;
			ПоказательСтрокаПриемника.Значение = СтрокаПоказателя.Значение;
		КонецЦикла;
		ИдентификаторСтрокиПоказателей = ИдентификаторСтрокиПоказателей + 1;
		
	КонецЦикла; 	
КонецПроцедуры

Процедура РаспределениеПоСтатьямВОбъект(ИдентификаторСтрокиДокумента, СтрокаИсточник, ТаблицаРаспределениеПоСтатьям) Экспорт
	Для Каждого СтрокаРаспределения Из СтрокаИсточник.РаспределениеПоСтатьям Цикл
		СтрокаРаспределенияДокумента = ТаблицаРаспределениеПоСтатьям.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределенияДокумента, СтрокаРаспределения);
		СтрокаРаспределенияДокумента.ИдентификаторСтроки = ИдентификаторСтрокиДокумента;
	КонецЦикла;			
КонецПроцедуры

Процедура СтрокаПогашениеЗаймовВДанныеОбъекта(СтрокаПриемник, СтрокаИсточник, ОписаниеТаблицы, ТаблицаРаспределениеПоСтатьям)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	РаспределениеПоСтатьямВОбъект(
			СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
			СтрокаИсточник, 
			ТаблицаРаспределениеПоСтатьям);
КонецПроцедуры

Процедура СтрокаКорректировкиВыплатыВДанныеОбъекта(СтрокаПриемник, СтрокаИсточник, ОписаниеТаблицы, ТаблицаРаспределениеПоСтатьям)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	РаспределениеПоСтатьямВОбъект(
			СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
			СтрокаИсточник, 
			ТаблицаРаспределениеПоСтатьям);
КонецПроцедуры

Процедура СтрокаПособияВДанныеОбъекта(Организация, СтрокаПриемник, СтрокаИсточник, ТаблицыДокумента, ВидыРасчетаИнфо, ОписаниеТаблицы) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		РасчетЗарплатыРасширенныйФормы.ДополнительныеСвойстваПособийВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
		ПоказателиВОбъект(СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], СтрокаИсточник, ТаблицыДокумента, ЗначенияРеквизитов.Показатели);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТрудаВОбъект(
		СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
		СтрокаИсточник, 
		Организация, 
		ТаблицыДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РаспределениеПоСтатьямВОбъект(
			СтрокаПриемник[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
			СтрокаИсточник, 
			ТаблицыДокумента.РаспределениеПоСтатьям);
	КонецЕсли;	
	
КонецПроцедуры

Процедура СтрокаНачисленияВМенеджерРасчета(МенеджерРасчета, СтрокаИсточник, Организация, ФизическоеЛицо, 
		ТаблицыДокумента, Владелец = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.СтрокаТаблицыНачислений();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.Организация = Организация;
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаИсточник.Начисление);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(
		СтрокаПриемник, 
		СтрокаИсточник, 
		ВидРасчетаИнфо);
	СтрокаПриемник.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаПриемник.Владелец = Владелец;
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьДополнительныеСвойстваНачисленийМенеджераРасчета(
		СтрокаПриемник, 
		СтрокаИсточник);
	
	Если ТаблицыДокумента.Показатели <> Неопределено Тогда
		ПоказателиВМенеджерРасчета(
			СтрокаПриемник, 
			СтрокаИсточник.ИдентификаторСтрокиВидаРасчета, 
			ТаблицыДокумента.Показатели); 
	КонецЕсли;
		
	Если ТаблицыДокумента.РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда
		РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
			СтрокаПриемник,
			СтрокаИсточник.ИдентификаторСтрокиВидаРасчета,
			ТаблицыДокумента.РаспределениеПоТерриториямУсловиямТруда,
			ТаблицыДокумента.Показатели,
			МенеджерРасчета);
	КонецЕсли;
	
	Если ТаблицыДокумента.РаспределениеПоСтатьям <> Неопределено Тогда
		РезультатРаспределенияВМенеджерРасчета(
			СтрокаПриемник, 
			СтрокаИсточник.ИдентификаторСтрокиВидаРасчета, 
			ТаблицыДокумента.РаспределениеПоСтатьям);
	КонецЕсли;
КонецПроцедуры

Процедура СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, КатегорииУдержаний, ТаблицыДокумента, ИмяТаблицы) Экспорт
	СтрокаПриемник = МенеджерРасчета.СтрокаТаблицыУдержаний();
	СтрокаПриемник.Владелец = ИмяТаблицы;
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.Категория = КатегорииУдержаний[СтрокаИсточник.Удержание];
	Если ТаблицыДокумента.Показатели <> Неопределено Тогда
		ПоказателиВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник.ИдентификаторСтрокиВидаРасчета, ТаблицыДокумента.Показатели); 
	КонецЕсли;	
	Если ТаблицыДокумента.РаспределениеПоСтатьям <> Неопределено Тогда
		РезультатРаспределенияВМенеджерРасчета(
			СтрокаПриемник, 
			СтрокаИсточник.ИдентификаторСтрокиВидаРасчета, 
			ТаблицыДокумента.РаспределениеПоСтатьям);
	КонецЕсли;
КонецПроцедуры

Процедура СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, РаспределениеПоСтатьям = Неопределено) Экспорт
	СтрокаПриемник = МенеджерРасчета.Зарплата.КорректировкиВыплаты.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	Если РаспределениеПоСтатьям <> Неопределено Тогда
		РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник.ИдентификаторСтроки, РаспределениеПоСтатьям);
	КонецЕсли;
КонецПроцедуры

Процедура СтрокаПогашениеЗаймовВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, РаспределениеПоСтатьям = Неопределено) Экспорт
	СтрокаПриемник = МенеджерРасчета.Зарплата.ПогашениеЗаймов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	Если РаспределениеПоСтатьям <> Неопределено Тогда
		РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник.ИдентификаторСтроки, РаспределениеПоСтатьям);
	КонецЕсли;
КонецПроцедуры

Процедура СтрокаНДФЛВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, СтрокиПримененныеВычеты, РаспределениеПоСтатьям = Неопределено) Экспорт
	СтрокаПриемник = МенеджерРасчета.Зарплата.НДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ПоляТаблицы = УчетНДФЛ.ПоляТаблицыПоВидамВычетов();
	
	МесяцыПериодаПредоставленияВычета = Новый Соответствие;
	Для Каждого СтрокаВычета Из СтрокиПримененныеВычеты Цикл
		МесяцыПериодаПредоставленияВычета.Вставить(СтрокаВычета.МесяцПериодаПредоставленияВычета,СтрокаВычета.МесяцПериодаПредоставленияВычета)
	КонецЦикла;
	
	Если МесяцыПериодаПредоставленияВычета.Количество() = 0 Тогда
		
	ИначеЕсли МесяцыПериодаПредоставленияВычета.Количество() = 1 Тогда
		Для Каждого СтрокаВычета Из СтрокиПримененныеВычеты Цикл
			ИмяПоля = ПоляТаблицы[СтрокаВычета.КодВычета];
			Если СтрокаПриемник[ИмяПоля] = 0 Тогда
				СтрокаДляЗаполнения = СтрокаПриемник;
			Иначе
				СтрокаДляЗаполнения = МенеджерРасчета.Зарплата.НДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, СтрокаИсточник,,"Налог,ЗачтеноАвансовыхПлатежей,ПримененныйВычетЛичный");
				СтрокаДляЗаполнения.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
			КонецЕсли;
			СтрокаДляЗаполнения[ИмяПоля] = СтрокаВычета.РазмерВычета;
			СтрокаДляЗаполнения.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
		КонецЦикла; 
	Иначе
		ПервыйМесяцОбработан = Ложь;
		Для Каждого Элемент Из МесяцыПериодаПредоставленияВычета Цикл
			Если Не ПервыйМесяцОбработан Тогда
				СтрокаДляЗаполнения = СтрокаПриемник;
				ПервыйМесяцОбработан = Истина;
			Иначе
				СтрокаДляЗаполнения = МенеджерРасчета.Зарплата.НДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, СтрокаИсточник,,"Налог,ЗачтеноАвансовыхПлатежей,ПримененныйВычетЛичный");
				СтрокаДляЗаполнения.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
			КонецЕсли;
			Для Каждого СтрокаВычета Из СтрокиПримененныеВычеты Цикл
				Если СтрокаВычета.МесяцПериодаПредоставленияВычета <> Элемент.Ключ Тогда
					Продолжить;
				КонецЕсли;
				ИмяПоля = ПоляТаблицы[СтрокаВычета.КодВычета];
				СтрокаДляЗаполнения[ИмяПоля] = СтрокаВычета.РазмерВычета;
				СтрокаДляЗаполнения.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПриемник.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник.ИдентификаторСтрокиНДФЛ, РаспределениеПоСтатьям);
КонецПроцедуры

Процедура ПоказателиВМенеджерРасчета(СтрокаПриемник, ИдентификаторСтрокиДокумента, Показатели)
	СтрокиПоказателей = Показатели.НайтиСтроки(
		Новый Структура("ИдентификаторСтрокиВидаРасчета", ИдентификаторСтрокиДокумента));
		
	Для Каждого СтрокаПоказателяИсточник Из СтрокиПоказателей Цикл
		СтрокаПоказателя = СтрокаПриемник.Показатели.Добавить();
		СтрокаПоказателя.Показатель = СтрокаПоказателяИсточник.Показатель;
		СтрокаПоказателя.Значение = СтрокаПоказателяИсточник.Значение;	
	КонецЦикла;
КонецПроцедуры

Процедура РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(СтрокаПриемник, ИдентификаторСтрокиДокумента, 
	Распределение, Показатели, МенеджерРасчета) Экспорт
	
	СтрокиРаспределения = Распределение.НайтиСтроки(
		Новый Структура("ИдентификаторСтроки", ИдентификаторСтрокиДокумента));		

	Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		СтрокаТерриторииУсловияТруда = МенеджерРасчета.СтрокаТаблицыТерриторииУсловияТруда(СтрокаПриемник);
		ЗаполнитьЗначенияСвойств(СтрокаТерриторииУсловияТруда, СтрокаРаспределения);
		ПоказателиВМенеджерРасчета(
			СтрокаТерриторииУсловияТруда, 
			СтрокаРаспределения.ИдентификаторСтрокиПоказателей, 
			Показатели);
	КонецЦикла;
КонецПроцедуры

Процедура РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, ИдентификаторСтрокиДокумента, Распределение) Экспорт
	СтрокиРаспределения = Распределение.НайтиСтроки(
		Новый Структура("ИдентификаторСтроки", ИдентификаторСтрокиДокумента));	
	
	Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		СтрокаРезультатаРаспределения = СтрокаПриемник.РаспределениеПоСтатьям.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультатаРаспределения, СтрокаРаспределения);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
