#Область ПрограммныйИнтерфейс

// Возвращает параметры для отправки сообщения в СЭДО.
// Реквизиты РегистрационныйНомерФСС и СвойстваДляОбмена заполняются автоматически при вызове с сервера,
// при вызове с клиента эти реквизиты нужно заполнять самостоятельно.
//
// Параметры:
//   ТипСообщения                 - Число     - тип сообщения СЭДО из спецификации типов документов,
//   СодержимоеИлиАдресСообщения  - Строка    - текст выгрузки сообщения СЭДО по спецификации типов документов или
//                                - Строка    - адрес во временном хранилище, по которому содержится строка или двоичные
//                                              данные в кодировке utf-8 текста выгрузки сообщения СЭДО по спецификации
//                                              типов документов
//   Организация                  - СправочникСсылка.Организации - организация отправитель,
//   ОписаниеОшибки               - Строка    - шаблон текста сообщения, возвращаемого в ключе "ОписаниеОшибки"
//                                              результата оповещения обратного вызова при неудаче отправки,
//                                              с подстановкой текста ошибки вместо %1, например:
//                                              НСтр("ru = 'Не удалось подписать организацию на оповещения об изменении состояний ЭЛН сотрудников.'") + Символы.ПС + "%1",
//   РегистрационныйНомерФСС      - Строка    - регистрационный номер ФСС (дополнительный код ФСС в случае филиала),
//                                              при пустом значении подставляется из организации если метод вызывается с сервера.
//   ТипВзаимодействия            - Число     - Для отпрвки от имени страхователя передается значение 2, для отправки МЧД 3.
//                                              Если значение не заполнено, то тип определяется по типу сообщения.
//   СвойстваДляОбмена            - Структура - при значении Неопределено заполняется автоматически при вызове с сервера, при типе
//                                              взаимодействия 3 (МЧД) можно передать структуру с реквизитами
//                                              "ОГРН", "ИНН", "КПП", "СНИЛС"
// Возвращаемое значение:
//   Структура - переданные параметры отправки сообщения (незаполненные могут вычисляться) для передачи в процедуру
//               "ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО", параметр "ПараметрыСообщения".
//
Функция ПараметрыОтправитьСообщениеСЭДО(
		ТипСообщения = "",
		СодержимоеИлиАдресСообщения = "",
		Организация = Неопределено,
		ОписаниеОшибки = "",
		РегистрационныйНомерФСС = "",
		ТипВзаимодействия = Неопределено,
		СвойстваДляОбмена = Неопределено) Экспорт
	
	Результат = Новый Структура;
	ТипСообщенияСтрокой = ЭлектронныйДокументооборотСФССКлиентСервер.ТипСообщенияСЭДОВСтроку(ТипСообщения);
	Результат.Вставить("ТипСообщения", 					ТипСообщенияСтрокой);
	Результат.Вставить("СодержимоеИлиАдресСообщения", 	СодержимоеИлиАдресСообщения);
	Результат.Вставить("Организация", 					Организация);
	Результат.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);
	Результат.Вставить("РегистрационныйНомерФСС", 		РегистрационныйНомерФСС);
	Результат.Вставить("ТипВзаимодействия", 			ТипВзаимодействия);
	Результат.Вставить("СвойстваДляОбмена", 			СвойстваДляОбмена);
	
	Если НЕ ЗначениеЗаполнено(Результат.РегистрационныйНомерФСС) И Результат.СвойстваДляОбмена <> Неопределено
		И Результат.СвойстваДляОбмена.Свойство("РегистрационныйНомерФСС") Тогда
		
		Результат.РегистрационныйНомерФСС = Результат.СвойстваДляОбмена.РегистрационныйНомерФСС;
	КонецЕсли;
	
	Если Результат.ТипВзаимодействия = Неопределено Тогда
		Результат.ТипВзаимодействия = ДокументооборотСФССКлиентСервер.ТипВзаимодействияСЭДО(ТипСообщения);
	КонецЕсли;
	
	ЭтоТипВзаимодействияОрганизацияСЭДО = (Результат.ТипВзаимодействия =
		ДокументооборотСФССКлиентСервер.ТипВзаимодействияОрганизацияСЭДО());
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ЗначениеЗаполнено(Результат.Организация) И (НЕ ЗначениеЗаполнено(Результат.РегистрационныйНомерФСС)
		ИЛИ ЭтоТипВзаимодействияОрганизацияСЭДО И Результат.СвойстваДляОбмена = Неопределено) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ПолучитьОГРН 			= ЭтоТипВзаимодействияОрганизацияСЭДО;
		ПолучитьИННКППиСНИЛС 	= ЭтоТипВзаимодействияОрганизацияСЭДО;
		Результат.СвойстваДляОбмена = КонтекстЭДО.СвойстваОрганизацииДляОбмена(
			Результат.Организация, ,
			ПолучитьОГРН, ,
			ПолучитьИННКППиСНИЛС);
		УстановитьПривилегированныйРежим(Ложь);
		Результат.РегистрационныйНомерФСС = ?(ЗначениеЗаполнено(Результат.СвойстваДляОбмена.РегистрационныйНомерФСС),
			СокрЛП(Результат.СвойстваДляОбмена.РегистрационныйНомерФСС), Неопределено);
	КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция ТипСообщенияСЭДОВЧисло(Знач ТипСообщенияСЭДО, Суффикс = "") Экспорт
	
	Результат = 0;
	Если ТипЗнч(ТипСообщенияСЭДО) = Тип("Число") Тогда
		Результат = ТипСообщенияСЭДО;
	Иначе
		ТипСообщенияСЭДОСтр = Строка(ТипСообщенияСЭДО);
		ТипСообщенияСЭДОСтр = СтрЗаменить(ТипСообщенияСЭДОСтр, " ", "");
		// Для типов c точкой, например, 10.e.
		ПозицияТочки = СтрНайти(ТипСообщенияСЭДОСтр, ".");
		Если НЕ ПозицияТочки = 0 Тогда
			Суффикс = Сред(ТипСообщенияСЭДОСтр, ПозицияТочки + 1);
			ТипСообщенияСЭДОСтр = Лев(ТипСообщенияСЭДОСтр, ПозицияТочки - 1);
		КонецЕсли;
		#Если ВебКлиент Тогда
			Попытка
				Результат = Число(ТипСообщенияСЭДОСтр);
			Исключение
				Результат = 0;
			КонецПопытки;
		#Иначе
			ТипЧисло = Тип("Число");
			Результат = XMLЗначение(ТипЧисло, ТипСообщенияСЭДОСтр);
		#КонецЕсли
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыСохраненияЗапросаСЭДОФСС(Организация, Операция) Экспорт
	
	Результат = Новый Структура;
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	Результат.Вставить("Идентификатор", 					Идентификатор);
	Результат.Вставить("Организация", 						Организация);
	Результат.Вставить("ОписаниеОшибки", 					"");
	Результат.Вставить("АдресЗапросаSOAP", 					Неопределено);
	Результат.Вставить("АдресОтветаSOAP", 					Неопределено);
	Результат.Вставить("Операция", 							Операция);
	Результат.Вставить("АдресРесурса", 						"");
	Результат.Вставить("АдресСервера", 						"");
	Результат.Вставить("КодСостояния", 						200);
	Результат.Вставить("Дата", 								Неопределено);
	Результат.Вставить("УдалятьИзХранилища", 				Ложь);
	Результат.Вставить("ТипСообщенияСЭДО", 					0);
	Результат.Вставить("ТипВзаимодействияСЭДО", 			0);
	Результат.Вставить("ИдентификаторФСС", 					"");
	Результат.Вставить("ИдентификаторПакетаФСС", 			"");
	Результат.Вставить("ОбменЧерезОператора", 				Ложь);
	Результат.Вставить("ЭтоПользовательскийЗапрос", 		Ложь);
	Результат.Вставить("ПакетныйЗапросСообщений", 			Ложь);
	Результат.Вставить("ДанныеПолученныхПакетноСообщений", 	Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстОшибкиПриПроверкеРегистрационногоНомера(РегистрационныйНомерФСС, Отправка, СвойстваОрганизации, ЕстьНеЦифры)
	
	Шаблон = НСтр("ru = 'При %1 сообщения СЭДО ФСС произошла ошибка:';
					|en = 'При %1 сообщения СЭДО ФСС произошла ошибка:'") + Символы.ПС + "%2";
	ТекстОперацииОбмена = ?(Отправка, НСтр("ru = 'отправке';
											|en = 'отправке'"), НСтр("ru = 'получении';
																	|en = 'получении'"));
	
	Если НЕ СвойстваОрганизации = Неопределено 
		И (СвойстваОрганизации.Свойство("ЭтоДополнительныйКодФСС")
			И СвойстваОрганизации.ЭтоДополнительныйКодФСС) Тогда
			
		ТекстОшибкиОбменаПриПроверкеРегистрационногоНомера = НСтр("ru = 'Указан недопустимый дополнительный код обособленного подразделения';
																	|en = 'Указан недопустимый дополнительный код обособленного подразделения'");
		ТекстОшибкиОбменаРеквизитПроверки = НСтр("ru = 'Дополнительный код';
												|en = 'Дополнительный код'");
		ТекстОшибкиОбменаДлинаРеквизита = НСтр("ru = 'длина кода %1';
												|en = 'длина кода %1'");
	Иначе
		ТекстОшибкиОбменаПриПроверкеРегистрационногоНомера = НСтр("ru = 'Указан недопустимый регистрационный номер';
																	|en = 'Указан недопустимый регистрационный номер'");
		ТекстОшибкиОбменаРеквизитПроверки = НСтр("ru = 'Регистрационный номер';
												|en = 'Регистрационный номер'");
		ТекстОшибкиОбменаДлинаРеквизита = НСтр("ru = 'длина номера %1';
												|en = 'длина номера %1'");
	КонецЕсли;
	ТекстОшибкиОбменаДлинаРеквизита = СтрШаблон(ТекстОшибкиОбменаДлинаРеквизита, СтрДлина(РегистрационныйНомерФСС));
	
	Если ЕстьНеЦифры Тогда
		ШаблонОписаниеОшибки = СтрШаблон(Шаблон,
			ТекстОперацииОбмена,
			НСтр("ru = '%1 страхователя %2, %3. %4 должен состоять минимум из 10 цифр.';
				|en = '%1 страхователя %2, %3. %4 должен состоять минимум из 10 цифр.'"));
	Иначе
		ТекстОшибкиОбменаРеквизитПроверки = "";
		ШаблонОписаниеОшибки = СтрШаблон(Шаблон,
			ТекстОперацииОбмена,
			НСтр("ru = '%1 страхователя %2. Текущая %3,%4 минимальная длина 10 цифр.';
				|en = '%1 страхователя %2. Текущая %3,%4 минимальная длина 10 цифр.'"));
	КонецЕсли;
	
	ОписаниеОшибки = СтрШаблон(
		ШаблонОписаниеОшибки,
		ТекстОшибкиОбменаПриПроверкеРегистрационногоНомера,
		РегистрационныйНомерФСС,
		ТекстОшибкиОбменаДлинаРеквизита,
		ТекстОшибкиОбменаРеквизитПроверки);
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Процедура ЗаписатьСообщениеОбОшибкеПроверкиРегистрационногоНомераФССВЖурналРегистрации(
	Результат,
	РегистрационныйНомерФСС,
	СвойстваОрганизации,
	Отправка,
	ЕстьНеЦифры = Ложь)
	
	ОписаниеОшибки = ПолучитьТекстОшибкиПриПроверкеРегистрационногоНомера(РегистрационныйНомерФСС, Отправка, СвойстваОрганизации, ЕстьНеЦифры);
	
	ШаблонДляЖурналаРегистрации = НСтр("ru = 'Электронный документооборот с контролирующими органами. %1';
										|en = 'Электронный документооборот с контролирующими органами. %1'");
	Если Отправка Тогда
		ТекстОшибки = НСтр("ru = 'Отправка данных в СЭДО ФСС';
							|en = 'Отправка данных в СЭДО ФСС'");
		ОписаниеОшибкиДляЖурналаРегистрации =
			СтрШаблон(ШаблонДляЖурналаРегистрации, ТекстОшибки);
	Иначе
		ТекстОшибки = НСтр("ru = 'Получение сообщения СЭДО ФСС';
							|en = 'Получение сообщения СЭДО ФСС'");
		ОписаниеОшибкиДляЖурналаРегистрации =
			СтрШаблон(ШаблонДляЖурналаРегистрации, ТекстОшибки);
	КонецЕсли;
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
			ОписаниеОшибкиДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОписаниеОшибки);
	#Иначе
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			ОписаниеОшибкиДляЖурналаРегистрации,
			"Ошибка",
			ОписаниеОшибки, ,
			Истина);
	#КонецЕсли
	
	Результат.Выполнено			= Ложь;
	Результат.ОписаниеОшибки	= ОписаниеОшибки;
	
КонецПроцедуры

Функция ПроверитьДлинуРегистрационныйНомерФСС(
	СвойстваОрганизации,
	РегистрационныйНомерФСС,
	Отправка = Истина,
	Результат) Экспорт
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(РегистрационныйНомерФСС) Тогда
		// Ошибка формата регистрационного номера СФР.
		ЗаписатьСообщениеОбОшибкеПроверкиРегистрационногоНомераФССВЖурналРегистрации(Результат, РегистрационныйНомерФСС, СвойстваОрганизации, Отправка, Истина);
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(РегистрационныйНомерФСС) < 10 Тогда
		// Ошибка длины дополнительного кода СФР.
		ЗаписатьСообщениеОбОшибкеПроверкиРегистрационногоНомераФССВЖурналРегистрации(Результат, РегистрационныйНомерФСС, СвойстваОрганизации, Отправка);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция ПолучитьСтрокуДатВСтруктуре(
	Дата = Неопределено,
	ВремяНачала = Неопределено,
	ВремяКонца = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата		= Дата(1,1,1);
		ВремяНачала	= Дата(1,1,1);
		ВремяКонца	= Дата(1,1,1);
	КонецЕсли;
	
	СтрокаДат = Новый Структура;
	СтрокаДат.Вставить("Дата",			Дата);
	СтрокаДат.Вставить("ВремяНачала",	ВремяНачала);
	СтрокаДат.Вставить("ВремяКонца",	ВремяКонца);
	
	Возврат СтрокаДат;
	
КонецФункции

Функция ПолучитьДатуПолученияСообщений(ДатыСообщений) Экспорт
	
	ДатаСообщений = Неопределено;
	
	Если НЕ ДатыСообщений = Неопределено
		И ЗначениеЗаполнено(ДатыСообщений.Дата) Тогда
		
		ДатаСообщений = Дата(Формат(ДатыСообщений.Дата, "ДФ=yyyyMMdd") +
			Формат(ДатыСообщений.ВремяКонца, "ДФ=HHmmss"));
	КонецЕсли;
	
	Возврат ДатаСообщений;
	
КонецФункции

Функция КлючОбъектаНастроекЗапросовКСерверуСЭДО() Экспорт
	
	Возврат "ТаймаутМеждуHTTPЗапросамиСЭДО";
	
КонецФункции

Функция КлючНастроекИнтервалаМеждуЗапросамиКСерверуСЭДО() Экспорт
	
	Возврат "Таймаут";
	
КонецФункции

Функция ИнтервалМеждуЗапросамиСпискаВходящихСообщенийСЭДОПоУмолчанию() Экспорт
	
	Возврат 300;
	
КонецФункции

Функция НовоеОписаниеТипаСообщенияСЭДО() Экспорт
	
	ОписаниеТипа = Новый Структура;
	// Наименование по спецификации СЭДО.
	ОписаниеТипа.Вставить("Наименование", 			"");
	// Строковое значение типа.
	ОписаниеТипа.Вставить("ТипСтрокой",				"");
	// Результат преобразования типа в число.
	ОписаниеТипа.Вставить("ТипЧислом", 				0);
	// Если тип содержит точку, то сюда помещается строка после точки.
	ОписаниеТипа.Вставить("Суффикс", 				"");
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ТипСообщенияСЭДОВСтроку(Знач ТипСообщенияСЭДО) Экспорт
	
	Результат = "";
	Если ТипЗнч(ТипСообщенияСЭДО) = Тип("Число") Тогда
		Результат = Формат(ТипСообщенияСЭДО, "ЧДЦ=0; ЧН=; ЧГ=");
	Иначе
		Результат = Строка(ТипСообщенияСЭДО);
		Результат = СтрЗаменить(Результат, " ", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеСообщенияСЭДО(ЭтоДанныеСписка = Ложь) Экспорт
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Идентификатор", 			"");
	ДанныеСообщения.Вставить("Тип", 					"");
	ДанныеСообщения.Вставить("Получатель", 				"");
	ДанныеСообщения.Вставить("ИНН", 					"");
	ДанныеСообщения.Вставить("КПП", 					"");
	ДанныеСообщения.Вставить("СНИЛС", 					"");
	ДанныеСообщения.Вставить("ТребуетсяПодтверждение", 	Ложь);
	ДанныеСообщения.Вставить("Дата", 					Неопределено);
	ДанныеСообщения.Вставить("СрокДействия", 			Неопределено);
	ДанныеСообщения.Вставить("РегистрационныйНомерСФР", 	"");
	Если ЭтоДанныеСписка Тогда
		ДанныеСообщения.Вставить("Новое", 				Ложь);
	Иначе
		ДанныеСообщения.Вставить("ТекстСообщения", 		"");
	КонецЕсли;
	// Идентификатор запроса из регистра ЖурналЗапросовКСерверамФСС, которым было получено сообщение.
	ДанныеСообщения.Вставить("ИдентификаторЗапроса", 	"");
	// Комментарий перезаписывается у сообщения только в том случае, если он заполнен.
	ДанныеСообщения.Вставить("Комментарий",				"");
	// Описание типа сообщения СЭДО.
	ДанныеТипа = НовоеОписаниеТипаСообщенияСЭДО();
	ДанныеСообщения.Вставить("ОписаниеТипа",				ДанныеТипа);
	
	Возврат ДанныеСообщения;
	
КонецФункции

Функция НовыеДанныеРассылкиСЭДО() Экспорт
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Идентификатор", 			"");
	ДанныеСообщения.Вставить("Дата", 					Неопределено);
	ДанныеСообщения.Вставить("ТекстСообщения", 			"");
	
	Возврат ДанныеСообщения;
	
КонецФункции

Функция НовыйРезультатПриПолученииСодержимогоСообщенияСЭДО() Экспорт
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Обработано", Ложь);
	РезультатОбработки.Вставить("ОшибкаОбработки", Ложь);
	РезультатОбработки.Вставить("ОписаниеОшибки", "");
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция НовыеПараметрыВывестиОшибку(ВыводитьВКонсоль = Ложь) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КлючДанных",		Неопределено);
	Параметры.Вставить("ПутьКДанным",		"");
	Параметры.Вставить("Поле",				"");
	Параметры.Вставить("Отказ",				Ложь);
	Параметры.Вставить("ОбъектОснование",	Неопределено);
	Параметры.Вставить("ВыводитьВКонсоль",	ВыводитьВКонсоль);
	
	Возврат Параметры;
	
КонецФункции

Процедура ВывестиОшибку(
	Знач ТекстСообщения,
	ПараметрыВывода = Неопределено) Экспорт
	
	Если ПараметрыВывода = Неопределено Тогда
		ПараметрыВывода = НовыеПараметрыВывестиОшибку();
	КонецЕсли;
	
	КлючДанных			= ПараметрыВывода.КлючДанных;
	Поле				= ПараметрыВывода.Поле;
	ПутьКДанным			= ПараметрыВывода.ПутьКДанным;
	Отказ				= ПараметрыВывода.Отказ;
	ОбъектОснование		= ПараметрыВывода.ОбъектОснование;
	ВыводитьВКонсоль	= ПараметрыВывода.ВыводитьВКонсоль;
	
	Если ДлительнаяОтправкаКлиентСервер.ФормаДлительнойОтправкиОткрыта() Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
			ТекстСообщения,
			КлючДанных,
			Поле,
			ПутьКДанным,
			Отказ,
			ОбъектОснование);
	Иначе
		Если ВыводитьВКонсоль Тогда
			ДокументооборотСКОКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОперацияЗаписиДатыПолученияСпискаСообщенияСЭДО() Экспорт
	
	Возврат "GetCntMessageDate";
	
КонецФункции

Функция ОперацияОтправкиСообщенияСЭДО() Экспорт
	
	Возврат "PutMessage";
	
КонецФункции

Функция ОперацияПолученияСообщенияСЭДО() Экспорт
	
	Возврат "GetMessage";
	
КонецФункции

Функция ОперацияПолученияСпискаВходящихСЭДО() Экспорт
	
	Возврат "GetCountMessages";
	
КонецФункции

Функция ТипыСообщенийОбращенийСФРКСтрахователю() Экспорт
	
	ТипыСообщений = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО(Истина);
	
	ТипыПоОбращениям = Новый Массив;
	ТипыПоОбращениям.Добавить(ТипыСообщений.ТипСообщенияОбращениеСФРКСтрахователю);
	ТипыПоОбращениям.Добавить(ТипыСообщений.ТипСообщенияОтветНаОбращениеСФРКСтрахователю);
	ТипыПоОбращениям.Добавить(ТипыСообщений.ТипСообщенияРезультатПриемаОтветаНаОбращениеСФРКСтрахователю);
	
	Возврат ТипыПоОбращениям;
	
КонецФункции

Функция ПрефиксИмениФайлаПечатнойФормыДокументаДоходнойЧастиСЭДО() Экспорт
	
	Возврат НСтр("ru = 'Печатная форма';
				|en = 'Печатная форма'");
	
КонецФункции

#КонецОбласти