#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийДополнительногоПоказателя

Процедура ОбработкаНавигационнойСсылкиДополнительногоПоказателя(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если НЕ СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ПолучателиОтчета:") Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	СтрокаПолучателей = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ПолучателиОтчета:", "");
	
	ИмяФормы = "Документ.ЗаявкаНаКредит.Форма.ПолучателиОтчета";
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПолучателиОтчета", СтрРазделить(СтрокаПолучателей,
		УниверсальныйОбменСБанкамиФормыКлиентСервер.РазделительЭлементовСтроки(), Ложь));

	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДополнительногоФайла

// Открывает форму с описанием присоединенного файла, который должен быть прикреплен к заявке на кредит или пакету фин.отчетности.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - объект, к которому прикрепляются файлы.
//  ПараметрыФормыОписания - Структура - см. УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания()
//
Процедура ОткрытьОписаниеПрисоединенногоФайла(Форма, ПараметрыФормыОписания) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыФормыОписания.ПодробноеОписание) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ОписаниеФинОтчетаВБанк", ПараметрыФормыОписания, Форма);
	                                                                                        
КонецПроцедуры

// Открывает диалог сохранения файла шаблона на диск.
//
// Параметры:
//  ОписаниеШаблона - Структура - см. УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания()
//
Процедура СохранитьФайлШаблона(ОписаниеШаблона) Экспорт
	
	АдресФайлаШаблона = УниверсальныйОбменСБанкамиФормыВызовСервера.АдресФайлаШаблона(ОписаниеШаблона);
	
	Если ПустаяСтрока(АдресФайлаШаблона) Тогда
		
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Для %1 отсутствует шаблон с именем ""%2""';
											|en = 'Template with ""%2"" name for %1 is missing'"),
			Строка(ОписаниеШаблона.Банки), ОписаниеШаблона.ИмяФайлаШаблона);
		ПоказатьПредупреждение( , ТекстПредупреждения, , НСтр("ru = 'Шаблон отсутствует';
																|en = 'Template is missing'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Сохранить шаблон файла отчетности';
												|en = 'Save reporting file template'");
	ПараметрыСохранения.Диалог.Расширение = НРег(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ОписаниеШаблона.ИмяФайлаШаблона));
	Если ПараметрыСохранения.Диалог.Расширение = "jpg"
	 Или ПараметрыСохранения.Диалог.Расширение = "jpeg"
	 Или ПараметрыСохранения.Диалог.Расширение = "png" Тогда
		Фильтр = НСтр("ru = 'Изображение|*.%1';
						|en = 'Image|*.%1'");
	ИначеЕсли ПараметрыСохранения.Диалог.Расширение = "doc" Или ПараметрыСохранения.Диалог.Расширение = "docx"
	 Или ПараметрыСохранения.Диалог.Расширение = "xls" Или ПараметрыСохранения.Диалог.Расширение = "xlsx"
	 Или ПараметрыСохранения.Диалог.Расширение = "ods" Или ПараметрыСохранения.Диалог.Расширение = "pdf" Тогда
		Фильтр = НСтр("ru = 'Офисный документ|*.%1';
						|en = 'Microsoft Office document|*.%1'");
	Иначе
		Фильтр = НСтр("ru = 'Файл|*.%1';
						|en = 'File|*.%1'");
	КонецЕсли;
	ПараметрыСохранения.Диалог.Фильтр = СтрШаблон(Фильтр, ПараметрыСохранения.Диалог.Расширение);
	
	ОповещениеОСохранении = Новый ОписаниеОповещения("СохранитьФайлШаблонаЗавершение", ЭтотОбъект, АдресФайлаШаблона);
	ФайловаяСистемаКлиент.СохранитьФайл(ОповещениеОСохранении, АдресФайлаШаблона, ОписаниеШаблона.ИмяФайлаШаблона, ПараметрыСохранения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляПеречисления

Процедура НачалоВыбораПеречисления(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыФормы.Вставить("АдресХранилищаЗначений", Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(Элемент.Имя)]);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", Форма[Элемент.Имя]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВыборЗначенияПеречисления",
		ПараметрыФормы,
		Форма,,,,
		Новый ОписаниеОповещения("Подключаемый_ВыборПеречисления", Форма, ДополнительныеПараметры)
	);
	
КонецПроцедуры

Процедура ВыборПеречисления(Форма, ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Форма[Элемент.Имя] = ВыбранноеЗначение.Идентификатор;
	Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(Элемент.Имя)] = ВыбранноеЗначение.КраткоеПредставление;
	
	ОбновитьПереключательДополнительногоПоказателя(Элемент, Форма);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура АвтоПодборПеречисления(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеВыбораДополнительногоПоказателя(Форма, Элемент, Текст);
	
КонецПроцедуры

Процедура ОкончаниеВводаТекстаПеречисления(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Форма[Элемент.Имя] = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеВыбораДополнительногоПоказателя(Форма, Элемент, Текст);
	
КонецПроцедуры

Процедура ОбработкаВыбораПеречисления(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма[Элемент.Имя] = ВыбранноеЗначение.Идентификатор;
	Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(Элемент.Имя)] = ВыбранноеЗначение.КраткоеПредставление;
	
	ОбновитьПереключательДополнительногоПоказателя(Элемент, Форма);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОчисткаПеречисления(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Форма[Элемент.Имя] = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПереключателяДополнительногоПоказателя

Процедура ПриИзмененииПереключателяДополнительногоПоказателя(Элемент, Форма) Экспорт
	
	ИмяСвязанногоЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяСвязанногоЭлементаПереключателя(Элемент.Имя);
	
	СвязанныйЭлемент = Форма.Элементы[ИмяСвязанногоЭлемента];
	СвязанныйЭлемент.Видимость = Форма[Элемент.Имя];
	
КонецПроцедуры

Процедура ОбновитьПереключательДополнительногоПоказателя(Элемент, Форма) Экспорт
	
	ИмяПереключателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(Элемент.Имя);
	
	Переключатель = Форма.Элементы.Найти(ИмяПереключателя);
	
	Если Переключатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма[Элемент.Имя]) Тогда
		Форма[Переключатель.Имя] = 1;
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеВыбораДополнительногоПоказателя(Форма, Элемент, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	АдресХранилищаЗначений = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(Элемент.Имя)];
	
	Для каждого Значение Из ПолучитьИзВременногоХранилища(АдресХранилищаЗначений) Цикл
		Если СтрНачинаетсяС(Нрег(Значение.КраткоеПредставление), Нрег(Текст)) Тогда
			ДанныеВыбора.Добавить(
				Значение,
				Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Значение.КраткоеПредставление, СтрДлина(Текст)),
						Новый Шрифт(,, Истина),
						Новый Цвет(0, 150, 70) // Цвет акцентирования.
					),
					Сред(Значение.КраткоеПредставление, СтрДлина(Текст) + 1)
				)
			);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Процедура СохранитьФайлШаблонаЗавершение(ПолученныеФайлы, АдресФайлаШаблона) Экспорт
	
	Если ПолученныеФайлы = Неопределено
	 Или ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПутьКФайлу = ПолученныеФайлы[0].ПолноеИмя;
	ОткрытиеКаталога = Новый ОписаниеОповещения("СохранитьФайлШаблонаОткрытьКаталог", ЭтотОбъект, ПутьКФайлу);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Шаблон успешно сохранен';
										|en = 'Template is saved'"), ОткрытиеКаталога, ПутьКФайлу);
	
КонецПроцедуры

Процедура СохранитьФайлШаблонаОткрытьКаталог(ПутьКФайлу) Экспорт
	
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу).Путь;
	ФайловаяСистемаКлиент.ОткрытьПроводник(ПутьКФайлу);
	
КонецПроцедуры

#КонецОбласти