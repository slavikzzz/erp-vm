#Область ПрограммныйИнтерфейс

// Возвращает признак того, что используется новая подсистема учета резервов
//
// Возвращаемое значение:
//  Булево - признак использования подсистемы
//
Функция ИспользоватьРезервыПоОплатеТруда() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРезервыПоОплатеТруда");
	
КонецФункции

// Возвращает структуру настроек резервов
//
// Возвращаемое значение:
//  Структура - описанная в методе
//
Функция СтруктураНастроекРезервов() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("Организация",              Справочники.Организации.ПустаяСсылка());
	Настройки.Вставить("ГоловнаяОрганизация",      Справочники.Организации.ПустаяСсылка());
	Настройки.Вставить("Резерв",                   Справочники.Резервы.ПустаяСсылка());
	Настройки.Вставить("ВидРезерва",               Перечисления.ВидыРезервовПоОплатеТруда.ПустаяСсылка());
	Настройки.Вставить("Период",                   Дата(1,1,1));
	Настройки.Вставить("ПериодВыплаты",            Дата(1,1,1));
	Настройки.Вставить("ВыплатаВРасчетномПериоде", Ложь);
	
	Настройки.Вставить("ИспользоватьНастройкиГоловнойОрганизации", Ложь);
	
	Настройки.Вставить("ФормироватьРезервБУ",                          Ложь);
	Настройки.Вставить("ФормироватьРезервНУ",                          Ложь);
	Настройки.Вставить("ПредельнаяВеличинаОтчисленийВРезерв",          0);
	Настройки.Вставить("ПредельнаяВеличинаОтчисленийВРезервБУ",        0);
	Настройки.Вставить("ПредельнаяВеличинаОтчисленийВРезервНУ",        0);
	Настройки.Вставить("НормативОтчисленийВРезерв",                    0);
	Настройки.Вставить("НормативОтчисленийВРезервБУ",                  0);
	Настройки.Вставить("НормативОтчисленийВРезервНУ",                  0);
	Настройки.Вставить("ОпределятьИзлишкиЕжемесячно",                  Ложь);
	Настройки.Вставить("ОпределятьИзлишкиЕжемесячноБУ",                Ложь);
	Настройки.Вставить("ОпределятьИзлишкиЕжемесячноНУ",                Ложь);
	Настройки.Вставить("ОграничиватьНачислениеПредельнойСуммой",       Ложь);
	Настройки.Вставить("ОграничиватьНачислениеПредельнойСуммойБУ",     Ложь);
	Настройки.Вставить("ОграничиватьНачислениеПредельнойСуммойНУ",     Ложь);
	Настройки.Вставить("НалоговыйУчетПоНастройкамБухгалтерскогоУчета", Ложь);
	Настройки.Вставить("НормативныйМетодБУ",                           Ложь);
	Настройки.Вставить("НормативныйМетодНУ",                           Ложь);
	Настройки.Вставить("РассчитыватьВзносыПоСредневзвешеннойСтавке",   Ложь);
	
	Настройки.Вставить("МетодНачисленияРезерваБУ",
		Перечисления.МетодыНачисленияРезервовПоОплатеТруда.ПустаяСсылка());
	Настройки.Вставить("МетодНачисленияРезерваНУ",
		Перечисления.МетодыНачисленияРезервовПоОплатеТруда.ПустаяСсылка());
	
	Возврат Настройки;
	
КонецФункции

// Возвращает информацию о том, начисляются ли резервы в организации в заданном периоде
//
// Параметры:
//   Организация - Спр.Организации.СправочникСсылка - Организация.
//   Период      - Дата - Период дат.
//
// Возвращаемое значение:
//  Булево - Истина- начисляются хоть какие-то резервы, Ложь - никаких резервов не начисляется
//
Функция ФормируютсяРезервыВОрганизации(Организация, Период) Экспорт
	
	НастройкиДействующихРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкиДействующихРезервов(Организация, Период);
	
	Возврат НастройкиДействующихРезервов.СоответствиеНастроек.Количество() > 0;
	
КонецФункции

// Возвращает информацию о том, начисляется ли конкретный резерв в организации в заданном периоде
//
// Параметры:
//   Организация - Спр.Организации.СправочникСсылка - Организация.
//   Резерв      - Спр.Резервы.СправочникСсылка - Резерв.
//   Период      - Дата - Период дат.
//
// Возвращаемое значение:
//  Булево - Истина- начисляются хоть какие-то резервы, Ложь - никаких резервов не начисляется
//
Функция ФормируетсяРезервВОрганизации(Организация, Резерв, Период) Экспорт
	
	НастройкаРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкаРезервов(Организация, Резерв, Период);
	
	Возврат ЗначениеЗаполнено(НастройкаРезервов.Резерв)
		И НастройкаРезервов.Резерв = Резерв;
	
КонецФункции

// Возвращает структуру параметров для расчета резервов
//
// Возвращаемое значение:
//  Структура - описанная в методе
//
Функция СтруктураПараметровРасчетаРезервов() Экспорт
	
	СтруктураПараметровРасчета = СтруктураНастроекРезервов();
	СтруктураПараметровРасчета.Вставить("Регистратор",                                  Неопределено);
	СтруктураПараметровРасчета.Вставить("ПериодРегистрации",                            Дата(1,1,1));
	СтруктураПараметровРасчета.Вставить("ВидОперации",                                  Перечисления.ВидыОперацийРезервовПоОплатеТруда.ПустаяСсылка());
	СтруктураПараметровРасчета.Вставить("Начисление",                                   Ложь);
	СтруктураПараметровРасчета.Вставить("Инвентаризация",                               Ложь);
	СтруктураПараметровРасчета.Вставить("Списание",                                     Ложь);
	СтруктураПараметровРасчета.Вставить("Корректировка",                                Ложь);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийТекущегоМесяца",   0);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийОрганизации",      0);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийТекущегоМесяцаБУ", 0);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийТекущегоМесяцаНУ", 0);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийОрганизацииБУ",    0);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийОрганизацииНУ",    0);
	СтруктураПараметровРасчета.Вставить("АрхивныйРасчет",                               Ложь);
	
	Возврат СтруктураПараметровРасчета;
	
КонецФункции

// Возвращает признак того, что в настройках расчета резервов по оплате труда
// есть настройки резерва по отпускам
//
// Параметры:
//   Организация - Спр.Организации.СправочникСсылка - Организация.
//   Период      - Дата - Период дат.
//
// Возвращаемое значение:
//  Булево - Истина - есть настройки резервов отпусков, Ложь - настройка отсутствует
//
Функция ЕстьНастройкиРезерваОтпусков(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация В(&Организации)
	|	И ГОД(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода) <= ГОД(&Период)
	|	И НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = ЗНАЧЕНИЕ(Перечисление.ВидыРезервовПоОплатеТруда.Отпуск)
	|	И НЕ НастройкиРасчетаРезервовПоОплатеТруда.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Проверяет реквизиты документа отражения в учете.
// Формирует массив непроверяемых реквизитов.
// Параметры:
//   ЭтотОбъект                         - ДокументОбъект - документ отражения в учете
//   Отказ                              - Булево, призанк отказа от записи
//   ПроверяемыеРеквизиты               - массив имен проверяемых реквизитов
//   МассивНепроверяемыхРеквизитов      - массив имен непроверяемых реквизитов
//
Процедура ОбработкаПроверкиЗаполненияОтраженияВУчете(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если Не РезервОтпусков.ЕстьНастройкиРезерваОтпусков(ЭтотОбъект.Организация, ЭтотОбъект.ПериодРегистрации)
		И ЕстьНастройкиРезерваОтпусков(ЭтотОбъект.Организация, ЭтотОбъект.ПериодРегистрации) Тогда
		// Архивных данных нет, все строки подлежат проверке.
		Возврат;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаСчетРезерва.Резерв");
	КонецЕсли;
	
	ЕжегодныеОтпускаОценочныеОбязательстваИРезервы = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныеОтпускаОценочныеОбязательстваИРезервы();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВыплатаЗаСчетРезерва Цикл
		
		Если ЕжегодныеОтпускаОценочныеОбязательстваИРезервы.Найти(СтрокаТаблицы.ВидОперации) <> Неопределено Тогда
			// Архивные данные не проверяем.
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Резерв) Тогда
			Префикс = "ВыплатаЗаСчетРезерва[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Резерв"" в строке %1 списка "" Выплата за счет резерва""';
					|en = 'The ""Payroll fund"" column is not filled in line %1of the ""Payment from payroll fund"" list'"),
				СтрокаТаблицы.НомерСтроки);
			Поле = Префикс + "Резерв";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет реквизиты документа начисления резервов в учете.
// Формирует массив непроверяемых реквизитов.
// Параметры:
//   ЭтотОбъект                         - ДокументОбъект - документ начисления резервов
//   Отказ                              - Булево, призанк отказа от записи
//   ПроверяемыеРеквизиты               - массив имен проверяемых реквизитов
//   МассивНепроверяемыхРеквизитов      - массив имен непроверяемых реквизитов
//
Процедура ОбработкаПроверкиЗаполненияРезервовПоОплатеТруда(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ОбработкаПроверкиЗаполненияРезервовПоОплатеТруда(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.РезервыПоОплатеТруда);
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РезервыПоОплатеТруда",						"МесяцНачисления",	"БухгалтерскийУчетЗарплаты", "Организация");
	
КонецПроцедуры

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	
КонецПроцедуры

// Процедура обеспечивает сбор сведений о хранении данных относящихся к персональным
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	// Документ.РезервыПоОплатеТруда.
	// Табличная часть Начисления.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.РезервыПоОплатеТруда";
	НовыеСведения.ПоляРегистрации	= "Начисления.Сотрудник";
	НовыеСведения.ПоляДоступа		= "Начисления.ФондОплатыТруда,Показатели.Значение,
	|Начисления.Результат";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	// Табличная часть Взносы.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.РезервыПоОплатеТруда";
	НовыеСведения.ПоляРегистрации	= "Взносы.ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Взносы.СтраховыеВзносы,Взносы.ФССНесчастныеСлучаи,
	|Взносы.ТекущаяСтавкаСтраховыхВзносов,Взносы.ТекущаяСтавкаФССНесчастныеСлучаи,
	|Взносы.СуммаСтраховыхВзносов,Взносы.СуммаСтраховыхВзносовНУ,
	|Взносы.СуммаФССНесчастныеСлучаи,Взносы.СуммаФССНесчастныеСлучаиНУ,
	|Взносы.НормативОтчисленийВРезервСтраховыеВзносы,Взносы.НормативОтчисленийВРезервФССНесчастныеСлучаи,
	|Взносы.НормативОтчисленийВРезервСтраховыеВзносыНУ,Взносы.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	// Табличная часть РасчетРезервов.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.РезервыПоОплатеТруда";
	НовыеСведения.ПоляРегистрации	= "РасчетРезервов.Сотрудник";
	НовыеСведения.ПоляДоступа		= "
	|РасчетРезервов.СуммаРезерва,РасчетРезервов.СуммаРезерваСтраховыхВзносов,РасчетРезервов.СуммаРезерваФССНесчастныеСлучаи,
	|РасчетРезервов.СуммаРезерваНУ,РасчетРезервов.СуммаРезерваСтраховыхВзносовНУ,РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНУ,
	|РасчетРезервов.СуммаРезерваНакоплено,РасчетРезервов.СуммаРезерваСтраховыхВзносовНакоплено,РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНакоплено,
	|РасчетРезервов.СуммаРезерваНакопленоНУ,РасчетРезервов.СуммаРезерваСтраховыхВзносовНакопленоНУ,РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ,
	|РасчетРезервов.СуммаРезерваИсчислено,РасчетРезервов.СуммаРезерваСтраховыхВзносовИсчислено,РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиИсчислено,
	|РасчетРезервов.СуммаРезерваИсчисленоНУ,РасчетРезервов.СуммаРезерваСтраховыхВзносовИсчисленоНУ,РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	// Табличная часть ОценочныеОбязательстваПоСотрудникам.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.РезервыПоОплатеТруда";
	НовыеСведения.ПоляРегистрации	= "ОценочныеОбязательстваПоСотрудникам.Сотрудник";
	НовыеСведения.ПоляДоступа		= "ОценочныеОбязательстваПоСотрудникам.Подразделение,ОценочныеОбязательстваПоСотрудникам.СпособОтраженияЗарплатыВБухучете,
	|ОценочныеОбязательстваПоСотрудникам.СтатьяФинансирования,
	|ОценочныеОбязательстваПоСотрудникам.СуммаРезерва,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваСтраховыхВзносов,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваФССНесчастныеСлучаи,
	|ОценочныеОбязательстваПоСотрудникам.СуммаРезерваНУ,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваСтраховыхВзносовНУ,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваФССНесчастныеСлучаиНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	// РегистрНакопления.ОценочныеОбязательстваПоСотрудникам
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ОценочныеОбязательстваПоСотрудникам";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "СтатьяФинансирования,СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
	|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";

КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.НастроитьВариантыОтчетов(Настройки);
	
КонецПроцедуры

#КонецОбласти

// Возвращает информацию о том, выплачиваются ли резервы в организации в заданном периоде
//
// Параметры:
//   Организация - Спр.Организации.СправочникСсылка - Организация.
//   Период      - Дата - Период дат.
//
// Возвращаемое значение:
//  Булево - Истина- начисляются хоть какие-то резервы, Ложь - никаких резервов не выплачивается
//
Функция ВыплачиваютсяРезервыВОрганизации(Организация, Период) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		// В этом случае проверяем настройки с учетом периода выплаты
		НастройкиДействующихРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкиДействующихРезервов(Организация, Период, Истина);
	Иначе
		// В этом случае проверяем настройки текущего и предыдущего года, т.к. период выплаты неизвестен
		НастройкиДействующихРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкиДействующихРезервов(Организация, Период);
		Если НастройкиДействующихРезервов.СоответствиеНастроек.Количество() = 0 Тогда
			НастройкиДействующихРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкиДействующихРезервов(Организация, ДобавитьМесяц(Период, -12));
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиДействующихРезервов.СоответствиеНастроек.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НастройкиРезерва(Организация, Резерв, Период) Экспорт
	
	НастройкаРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкаРезервов(Организация, Резерв, Период);
	
	НормативныйМетодБУ                         = НастройкаРезервов.МетодНачисленияРезерваБУ = Перечисления.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод;
	НормативныйМетодНУ                         = НастройкаРезервов.МетодНачисленияРезерваНУ = Перечисления.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод;
	РассчитыватьВзносыПоСредневзвешеннойСтавке = Истина;
	
	СтруктураНастроек = СтруктураНастроекРезервов();
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, НастройкаРезервов);
	
	СтруктураНастроек.Вставить("Организация",                                Организация);
	СтруктураНастроек.Вставить("Резерв",                                     Резерв);
	СтруктураНастроек.Вставить("Период",                                     Период);
	СтруктураНастроек.Вставить("НормативныйМетодБУ",                         НормативныйМетодБУ);
	СтруктураНастроек.Вставить("НормативныйМетодНУ",                         НормативныйМетодНУ);
	СтруктураНастроек.Вставить("РассчитыватьВзносыПоСредневзвешеннойСтавке", РассчитыватьВзносыПоСредневзвешеннойСтавке);
	СтруктураНастроек.Вставить("ГоловнаяОрганизация",                        ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	
	РезервыПоОплатеТрудаПереопределяемый.ЗаполнитьНастройкиРезервов(СтруктураНастроек, Организация, Резерв, Период);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет структуру настроек расчета резервов
//
// Параметры:
//			Организация - СправочникСсылка.Организации - Организация.
//			Резерв - СправочникСсылка.Резервы - Резерв.
//			ПериодРегистрации - Дата - ПериодРегистрации.
//			Регистратор - ДокументСсылка - Регистратор.
//
// Возвращаемое значение:
//  Структура - описанная в методе РезервыПоОплатеТруда.СтруктураПараметровРасчетаРезервов
//
Функция НастройкиРасчетаРезервов(Организация, Резерв, ПериодРегистрации, Регистратор, ВидОперацииДокумента) Экспорт
	
	СтруктураПараметровРасчета = СтруктураПараметровРасчетаРезервов();
	
	НастройкаРезерва = НастройкиРезерва(Организация, Резерв, ПериодРегистрации);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровРасчета, НастройкаРезерва);
	
	Начисление     = ВидОперацииДокумента = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление;
	Инвентаризация = ВидОперацииДокумента = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация;
	Списание       = ВидОперацииДокумента = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание;
	Корректировка  = ВидОперацииДокумента = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка;
	
	УстановитьПривилегированныйРежим(Истина);
	Организации                = ВсяОрганизация(Организация);
	ДоляРезерва                = ДоляРезерва(ПериодРегистрации, Организация, Резерв, Регистратор);
	ТаблицаНакопленныхРезервов = НакопленоРезерваПоВсейОрганизации(ПериодРегистрации, Организации, Резерв, Регистратор, Истина);
	
	ПредельнаяВеличинаОтчисленийВРезерв = СтруктураПараметровРасчета.ПредельнаяВеличинаОтчисленийВРезервНУ;
	ВсегоНакопленоРезервовНУ = ТаблицаНакопленныхРезервов.Итог("НакопленныйРезервНУ");
	Если ПредельнаяВеличинаОтчисленийВРезерв > ВсегоНакопленоРезервовНУ Тогда
		ПредельнаяВеличинаОтчисленийТекущегоМесяцаНУ = ПредельнаяВеличинаОтчисленийВРезерв - ВсегоНакопленоРезервовНУ;
	Иначе
		ПредельнаяВеличинаОтчисленийТекущегоМесяцаНУ = 0;
	КонецЕсли;
	ПредельнаяВеличинаОтчисленийОрганизацииНУ = Окр(ДоляРезерва.ДоляРезерваНУ * ПредельнаяВеличинаОтчисленийТекущегоМесяцаНУ, 2);
	
	ПредельнаяВеличинаОтчисленийВРезерв = СтруктураПараметровРасчета.ПредельнаяВеличинаОтчисленийВРезервБУ;
	ВсегоНакопленоРезервовБУ = ТаблицаНакопленныхРезервов.Итог("НакопленныйРезерв");
	Если ПредельнаяВеличинаОтчисленийВРезерв > ВсегоНакопленоРезервовБУ Тогда
		ПредельнаяВеличинаОтчисленийТекущегоМесяцаБУ = ПредельнаяВеличинаОтчисленийВРезерв - ВсегоНакопленоРезервовБУ;
	Иначе
		ПредельнаяВеличинаОтчисленийТекущегоМесяцаБУ = 0;
	КонецЕсли;
	ПредельнаяВеличинаОтчисленийОрганизацииБУ = Окр(ДоляРезерва.ДоляРезерваБУ * ПредельнаяВеличинаОтчисленийТекущегоМесяцаБУ, 2);
	
	СтруктураПараметровРасчета.Вставить("Регистратор",                                  Регистратор);
	СтруктураПараметровРасчета.Вставить("ВидОперации",                                  ВидОперацииДокумента);
	СтруктураПараметровРасчета.Вставить("ПериодРегистрации",                            ПериодРегистрации);
	СтруктураПараметровРасчета.Вставить("Начисление",                                   Начисление);
	СтруктураПараметровРасчета.Вставить("Инвентаризация",                               Инвентаризация);
	СтруктураПараметровРасчета.Вставить("Списание",                                     Списание);
	СтруктураПараметровРасчета.Вставить("Корректировка",                                Корректировка);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийТекущегоМесяца",   ПредельнаяВеличинаОтчисленийТекущегоМесяцаБУ);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийТекущегоМесяцаБУ", ПредельнаяВеличинаОтчисленийТекущегоМесяцаБУ);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийТекущегоМесяцаНУ", ПредельнаяВеличинаОтчисленийТекущегоМесяцаНУ);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийОрганизации",      ПредельнаяВеличинаОтчисленийОрганизацииБУ);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийОрганизацииБУ",    ПредельнаяВеличинаОтчисленийОрганизацииБУ);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийОрганизацииНУ",    ПредельнаяВеличинаОтчисленийОрганизацииНУ);
	
	Возврат СтруктураПараметровРасчета;
	
КонецФункции

// Списывает расходы по оплате начисления за счет оценочных обязательств
//
// Параметры:
//		ПараметрыДляСписанияРасходов - Структура - описание см ПараметрыДляСписанияРасходов().
//
Процедура СписатьРасходыЗаСчетОценочныхОбязательств(ПараметрыДляСписанияРасходов) Экспорт

	Организация 					= ПараметрыДляСписанияРасходов.Организация;
	ПериодРегистрации 				= ПараметрыДляСписанияРасходов.ПериодРегистрации;
	НачисленнаяЗарплатаИВзносы 		= ПараметрыДляСписанияРасходов.НачисленнаяЗарплатаИВзносы;
	ВыплатаЗаСчетРезерва			= ПараметрыДляСписанияРасходов.ВыплатаЗаСчетРезерва;
	ДокументСсылка 					= ПараметрыДляСписанияРасходов.ДокументСсылка;
	УчитыватьОперацииТекущегоМесяца = ПараметрыДляСписанияРасходов.УчитыватьОперацииТекущегоМесяца;
	
	НастройкиДействующихРезервов = НастройкиДействующихРезервовДляОтраженияВУчете(Организация, ПериодРегистрации);
	
	Если Не ФормируютсяРезервыВОрганизации(Организация, ПериодРегистрации)
		И Не ФормируютсяРезервыВОрганизации(Организация, ДобавитьМесяц(ПериодРегистрации, -12)) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьТаблицуСведениямиОбОсобенностяхОтпусков(НачисленнаяЗарплатаИВзносы);
	
	СтрокиКУдалению = Новый Массив;
	
	КолонкиСуммирования = Новый Массив;
	КолонкиГруппировок = Новый Массив;
	Для каждого КолонкаТЗ Из НачисленнаяЗарплатаИВзносы.Колонки Цикл
		Если КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			КолонкиСуммирования.Добавить(КолонкаТЗ.Имя);
		Иначе
			КолонкиГруппировок.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
	КонецЦикла;
	КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ", ");
	КолонкиКопированияСтрока = СтрСоединить(КолонкиГруппировок, ", ");
	
	НоваяТаблицаНачислений = НачисленнаяЗарплатаИВзносы.СкопироватьКолонки();
	НоваяТаблицаНачислений.Колонки.Добавить("СтрокаОбязательств", Новый ОписаниеТипов("Булево"));
	НоваяТаблицаНачислений.Колонки.Добавить("СтрокаКорректировки", Новый ОписаниеТипов("Булево"));
	КолонкиГруппировок.Добавить("СтрокаОбязательств");
	КолонкиГруппировок.Добавить("СтрокаКорректировки");
	КолонкиГруппировокСтрока = СтрСоединить(КолонкиГруппировок, ", ");
	
	СоответствиеНастроек = НастройкиДействующихРезервов.СоответствиеНастроек;
	
	Для Каждого КлючИЗначениеНастройкиРезерва Из СоответствиеНастроек Цикл
		
		ТаблицаНачислений = НачисленнаяЗарплатаИВзносы.СкопироватьКолонки();
		
		Резерв           = КлючИЗначениеНастройкиРезерва.Ключ;
		НастройкаРезерва = КлючИЗначениеНастройкиРезерва.Значение;
		
		ПараметрыДляСписанияРасходов.Вставить("Резерв",     Резерв);
		ПараметрыДляСписанияРасходов.Вставить("ВидРезерва", НастройкаРезерва.ВидРезерва);
		
		МассивЗначенийОтбора = Новый Массив;
		
		ИмяКолонкиОтбора = "Начисление";
		ИмяНастройки     = "СоответствиеНачислений";
		ПараметрыДляСписанияРасходов.УчитыватьОперацииТекущегоМесяца = Истина;
		Если НастройкаРезерва.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск Тогда
			ПараметрыДляСписанияРасходов.УчитыватьОперацииТекущегоМесяца = Ложь;
			Если НастройкиДействующихРезервов.Свойство("СоответствиеВидовОтпусков") Тогда
				ИмяКолонкиОтбора = "ВидОтпуска";
				ИмяНастройки     = "СоответствиеВидовОтпусков";
				МассивЗначенийОтбора = НастройкиДействующихРезервов[ИмяНастройки][Резерв];
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МассивЗначенийОтбора) Тогда
			МассивЗначенийНастройки = НастройкиДействующихРезервов[ИмяНастройки][Резерв];
			Если МассивЗначенийНастройки.Количество() > 0 Тогда
				ЗначенияНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗначенийНастройки, "ВидРасчета");
				МассивЗначенийОтбора = Новый Массив;
				Для Каждого ЗначениеНастройки Из ЗначенияНастройки Цикл
					МассивЗначенийОтбора.Добавить(ЗначениеНастройки.Значение);
				КонецЦикла;
				МассивЗначенийОтбора = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗначенийОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура();
		Для Каждого ЗначениеМассива Из МассивЗначенийОтбора Цикл
			
			Отбор.Вставить(ИмяКолонкиОтбора, ЗначениеМассива);
			НайденныеСтроки = НачисленнаяЗарплатаИВзносы.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если СтрокаТЗ.ОтпускАвансом Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), СтрокаТЗ);
				СтрокиКУдалению.Добавить(СтрокаТЗ);
			КонецЦикла;
			
		КонецЦикла;
		
		Если ТаблицаНачислений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНачислений.Свернуть("Сотрудник, СтатьяФинансирования, ОтпускАвансом," + ИмяКолонкиОтбора, КолонкиСуммирования);
		Сотрудники = ТаблицаНачислений.ВыгрузитьКолонку("Сотрудник");
		
		НакопленныеОценочныеОбязательства = НакопленныеОценочныеОбязательства(Сотрудники, ПараметрыДляСписанияРасходов);
		КолонкиКопированияОстатков = Новый Массив;
		Для каждого КолонкаТЗ Из НакопленныеОценочныеОбязательства.Колонки Цикл
			Если Не КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				КолонкиКопированияОстатков.Добавить(КолонкаТЗ.Имя);
			КонецЕсли;
		КонецЦикла;
		КолонкиКопированияОстатков = СтрСоединить(КолонкиКопированияОстатков, ", ");
		
		ГруппыОбязательств = Новый Структура("Начисления, СтраховыеВзносы, ВзносыФСС_НС");
		
		ГруппыОбязательств.Начисления = Новый Массив;
		ГруппыОбязательств.Начисления.Добавить("Сумма");
		
		ГруппыОбязательств.ВзносыФСС_НС = Новый Массив;
		ГруппыОбязательств.ВзносыФСС_НС.Добавить("ФССНесчастныеСлучаи");
		
		КолонкиВзносов = Новый Массив;
		Для каждого ИмяПоля Из ОтражениеЗарплатыВУчете.КолонкиВзносов() Цикл
			Если ИмяПоля = "ФССНесчастныеСлучаи" Тогда
				Продолжить;
			КонецЕсли;
			КолонкиВзносов.Добавить(ИмяПоля);
		КонецЦикла;
		ГруппыОбязательств.СтраховыеВзносы = КолонкиВзносов;
		
		Отбор = Новый Структура("Сотрудник, СтатьяФинансирования");
		НакопленныеОценочныеОбязательства.Индексы.Добавить("Сотрудник,СтатьяФинансирования");
		
		НачисленнаяЗарплатаИВзносы.Индексы.Добавить("Сотрудник,СтатьяФинансирования," + ИмяКолонкиОтбора);
		
		ФормироватьРезервНУ = НастройкаРезерва.ФормироватьРезервНУ;
		
		Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
			
			СуммаВзносовПоСтрокеРасчетная = 0;
			СуммаВзносовПоСтроке = 0;
			Для каждого КолонкаТЗ Из ТаблицаНачислений.Колонки Цикл
				Если КолонкиВзносов.Найти(КолонкаТЗ.Имя) <> Неопределено Тогда
					СуммаВзносовПоСтроке = СуммаВзносовПоСтроке + СтрокаТЗ[КолонкаТЗ.Имя];
				КонецЕсли;
			КонецЦикла;
			
			Отбор.Сотрудник            = СтрокаТЗ.Сотрудник;
			Отбор.СтатьяФинансирования = СтрокаТЗ.СтатьяФинансирования;
			ОценочныеОбязательстваСотрудника = НакопленныеОценочныеОбязательства.Скопировать(Отбор);
			
			ТаблицаСтатейФинансирования = ОценочныеОбязательстваСотрудника.Скопировать();
			ТаблицаСтатейФинансирования.Свернуть("СтатьяФинансирования", "Сумма, СтраховыеВзносы, ФССНесчастныеСлучаи");
			
			ОтборОсновнойТаблицы = Новый Структура("Сотрудник,СтатьяФинансирования," + ИмяКолонкиОтбора);
			ОтборОсновнойТаблицы.Вставить("Сотрудник",            СтрокаТЗ.Сотрудник);
			ОтборОсновнойТаблицы.Вставить("СтатьяФинансирования", СтрокаТЗ.СтатьяФинансирования);
			ОтборОсновнойТаблицы.Вставить(ИмяКолонкиОтбора,       СтрокаТЗ[ИмяКолонкиОтбора]);
			СтрокиНачислений = НачисленнаяЗарплатаИВзносы.НайтиСтроки(ОтборОсновнойТаблицы);
			
			Если ОценочныеОбязательстваСотрудника.Количество() = 0 Тогда
				Сумма = 0;
				СтраховыеВзносы = 0;
				СуммаФСС_НС = 0;
			Иначе
				Сумма = Макс(ОценочныеОбязательстваСотрудника.Итог("Сумма"), 0);
				СтраховыеВзносы = Макс(ОценочныеОбязательстваСотрудника.Итог("СтраховыеВзносы"), 0);
				СуммаФСС_НС = Макс(ОценочныеОбязательстваСотрудника.Итог("ФССНесчастныеСлучаи"), 0);
			КонецЕсли;
			
 			Если Сумма = 0 И СтраховыеВзносы = 0 И СуммаФСС_НС = 0 Тогда
				
				// нет накопленных сумм ОО
				Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
					Если СтрокаНачисления.ОтпускАвансом Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = НоваяТаблицаНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
					НоваяСтрока.Резерв   = Резерв;
					НоваяСтрока.РезервНУ = ФормироватьРезервНУ И Не СтрокаНачисления.КомпенсацияОтпуска;
				КонецЦикла;
				
			ИначеЕсли Сумма >= СтрокаТЗ.Сумма И СтраховыеВзносы >= СуммаВзносовПоСтроке И СуммаФСС_НС >= СтрокаТЗ.ФССНесчастныеСлучаи Тогда
				
				// суммы всех ОО достаточно для списания
				
				ТаблицаНачисленийВременная = НоваяТаблицаНачислений.СкопироватьКолонки();
				
				Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
					Если СтрокаНачисления.ОтпускАвансом Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТаблицаНачисленийВременная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
					НоваяСтрока.Резерв   = Резерв;
					НоваяСтрока.РезервБУ = Истина;
					НоваяСтрока.РезервНУ = ФормироватьРезервНУ И Не СтрокаНачисления.КомпенсацияОтпуска;
					
					НоваяСтрока = НакопленныеОценочныеОбязательства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, КолонкиКопированияОстатков);
					НоваяСтрока.Резерв          = Резерв;
					НоваяСтрока.Сумма           = - СтрокаНачисления.Сумма;
					НоваяСтрока.СтраховыеВзносы = 0;
					Для Каждого КолонкаТЗ Из ТаблицаНачислений.Колонки Цикл
						Если КолонкиВзносов.Найти(КолонкаТЗ.Имя) <> Неопределено Тогда
							НоваяСтрока.СтраховыеВзносы = НоваяСтрока.СтраховыеВзносы - СтрокаНачисления[КолонкаТЗ.Имя];
						КонецЕсли;
					КонецЦикла;
					НоваяСтрока.ФССНесчастныеСлучаи = - СтрокаНачисления.ФССНесчастныеСлучаи;
				КонецЦикла;
				
				ТаблицаНачисленийВременная.Свернуть(КолонкиГруппировокСтрока,КолонкиСуммирования);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачисленийВременная,НоваяТаблицаНачислений);
				
			Иначе
				
				КоэффициентСуммы   = ?(СтрокаТЗ.Сумма = 0, 0, Мин(Сумма/СтрокаТЗ.Сумма,1));
				КоэффициентВзносов = ?(СуммаВзносовПоСтроке = 0, 0, Мин(СтраховыеВзносы/СуммаВзносовПоСтроке,1));
				КоэффициентФСС_НС  = ?(СтрокаТЗ.ФССНесчастныеСлучаи = 0, 0, Мин(СуммаФСС_НС/СтрокаТЗ.ФССНесчастныеСлучаи,1));
				
				ТаблицаНачисленийВременная = НоваяТаблицаНачислений.СкопироватьКолонки();
				
				Для каждого ГруппаОбязательств Из ГруппыОбязательств Цикл
					
					ТаблицаГруппыОбязательств = НоваяТаблицаНачислений.СкопироватьКолонки();
					СуммаСписанныхОО = 0;
					
					Если ГруппаОбязательств.Ключ = "Начисления" Тогда
						КоэффициентБУ      = КоэффициентСуммы;
						СуммаНакопленныхОО = Сумма;
					ИначеЕсли ГруппаОбязательств.Ключ = "ВзносыФСС_НС" Тогда
						КоэффициентБУ      = КоэффициентФСС_НС;
						СуммаНакопленныхОО = СуммаФСС_НС;
					Иначе
						КоэффициентБУ      = КоэффициентВзносов;
						СуммаНакопленныхОО = СтраховыеВзносы;
					КонецЕсли;
					
					Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
						
						Если СтрокаНачисления.ОтпускАвансом Тогда
							Продолжить;
						КонецЕсли;
						
						КолонкиСуммГруппыОбязательств = ГруппаОбязательств.Значение;
						Для каждого ИмяКолонки Из КолонкиСуммГруппыОбязательств Цикл
							
							Сумма_ОО = ОКР(СтрокаНачисления[ИмяКолонки] * КоэффициентБУ, 2);
							
							Если Сумма_ОО > 0 Тогда
								
								НоваяСтрока = ТаблицаГруппыОбязательств.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, КолонкиКопированияСтрока);
								НоваяСтрока[ИмяКолонки]        = Сумма_ОО;
								НоваяСтрока.Резерв             = Резерв;
								НоваяСтрока.РезервБУ           = Истина;
								НоваяСтрока.РезервНУ           = ФормироватьРезервНУ И Не СтрокаНачисления.КомпенсацияОтпуска;
								НоваяСтрока.СтрокаОбязательств = Истина;
								
								СуммаСписанныхОО = СуммаСписанныхОО + НоваяСтрока[ИмяКолонки];
								
								НоваяСтрока = НакопленныеОценочныеОбязательства.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, КолонкиКопированияОстатков);
								НоваяСтрока.Резерв = Резерв;
								НоваяСтрока[?(ГруппаОбязательств.Ключ = "СтраховыеВзносы", "СтраховыеВзносы", ИмяКолонки)] = - Сумма_ОО;
								
								НоваяСтрока = ТаблицаГруппыОбязательств.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, КолонкиКопированияСтрока);
								НоваяСтрока[ИмяКолонки]         = СтрокаНачисления[ИмяКолонки] - Сумма_ОО;
								НоваяСтрока.Резерв              = Резерв;
								НоваяСтрока.РезервНУ            = ФормироватьРезервНУ И Не СтрокаНачисления.КомпенсацияОтпуска;
								НоваяСтрока.СтрокаКорректировки = Истина;
								
							Иначе
								
								НоваяСтрока = ТаблицаГруппыОбязательств.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, КолонкиКопированияСтрока);
								НоваяСтрока[ИмяКолонки] = СтрокаНачисления[ИмяКолонки];
								НоваяСтрока.Резерв      = Резерв;
								НоваяСтрока.РезервНУ    = ФормироватьРезервНУ И Не СтрокаНачисления.КомпенсацияОтпуска;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ТаблицаГруппыОбязательств.Свернуть(КолонкиГруппировокСтрока,КолонкиСуммирования);
					РазницаСумма = СуммаСписанныхОО - СуммаНакопленныхОО;
					
					Если РазницаСумма > 0 Тогда
						// списали за счет ОО больше, чем накоплено
						
						СтрокаОбязательств  = ТаблицаГруппыОбязательств.НайтиСтроки(Новый Структура("СтрокаОбязательств", Истина))[0];
						СтрокаКорректировки = ТаблицаГруппыОбязательств.НайтиСтроки(Новый Структура("СтрокаКорректировки", Истина))[0];
						
						Для каждого ИмяКолонки Из КолонкиСуммГруппыОбязательств Цикл
							
							Если РазницаСумма = 0 Тогда
								Прервать;
							КонецЕсли;
							
							Корректировка = МИН(СтрокаОбязательств[ИмяКолонки], РазницаСумма);
							СтрокаОбязательств[ИмяКолонки] = СтрокаОбязательств[ИмяКолонки] - Корректировка;
							РазницаСумма = РазницаСумма - Корректировка;
							
							СтрокаКорректировки[ИмяКолонки] = СтрокаКорректировки[ИмяКолонки] + Корректировка;
							
						КонецЦикла;
						
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаГруппыОбязательств, ТаблицаНачисленийВременная);
					
				КонецЦикла;
				
				ТаблицаНачисленийВременная.Свернуть(КолонкиГруппировокСтрока,КолонкиСуммирования);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачисленийВременная,НоваяТаблицаНачислений);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			НачисленнаяЗарплатаИВзносы.Удалить(СтрокаКУдалению);
		КонецЦикла;
		СтрокиКУдалению.Очистить();
		
	КонецЦикла;
	
	Если НоваяТаблицаНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из НоваяТаблицаНачислений Цикл
		Если Не СтрокаТЗ.РезервБУ И Не СтрокаТЗ.РезервНУ Тогда
			СтрокаТЗ.Резерв = "";
		Иначе
			НоваяСтрока = ВыплатаЗаСчетРезерва.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			СтраховыеВзносы = 0;
			Для каждого ИмяКолонки Из ГруппыОбязательств.СтраховыеВзносы Цикл
				СтраховыеВзносы = СтраховыеВзносы + СтрокаТЗ[ИмяКолонки];
			КонецЦикла;
			НоваяСтрока.СтраховыеВзносы = СтраховыеВзносы;
		КонецЕсли;
	КонецЦикла;
	
	КолонкиСуммирования = Новый Массив;
	КолонкиГруппировок  = Новый Массив;
	Для каждого КолонкаТЗ Из ВыплатаЗаСчетРезерва.Колонки Цикл
		Если КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			КолонкиСуммирования.Добавить(КолонкаТЗ.Имя);
		Иначе
			КолонкиГруппировок.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
	КонецЦикла;
	КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ", ");
	КолонкиГруппировок = СтрСоединить(КолонкиГруппировок, ", ");
	ВыплатаЗаСчетРезерва.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	// удалим строки с нулевыми суммами
	Отбор = Новый Структура(КолонкиСуммирования);
	Для каждого ЭлементКоллекции Из Отбор Цикл
		Отбор[ЭлементКоллекции.Ключ] = 0;
	КонецЦикла;
	НайденныеСтроки = ВыплатаЗаСчетРезерва.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		ВыплатаЗаСчетРезерва.Удалить(СтрокаТЗ);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НоваяТаблицаНачислений, НачисленнаяЗарплатаИВзносы);
	
КонецПроцедуры

// Формирует движения выплаты начислений за счет резерва
//
// Параметры:
//			Движения - КоллекцияДвижений - Движения.
//			Отказ - Булево - Отказ.
//			Организация - СправочникСсылка.Организации - Организация.
//			ПериодРегистрации - Дата - ПериодРегистрации.
//			ВыплатаЗаСчетРезерва - ТаблицаЗначений - из ОтражениеЗарплатыВБухучете.НоваяТаблицаНачисленоЗаСчетРезерва.
//
Процедура СформироватьДвиженияВыплатаЗаСчетРезерва(Движения, Отказ, Организация, ПериодРегистрации, ВыплатаЗаСчетРезерва) Экспорт
	
	Если ВыплатаЗаСчетРезерва.Колонки.Найти("СтатьяФинансирования") = Неопределено Тогда
		ВыплатаЗаСчетРезерва.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	КонецЕсли;
	
	ИсключаемыеВидыОпераций = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныеОтпускаОценочныеОбязательстваИРезервы();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Период",                  ПериодРегистрации);
	Запрос.УстановитьПараметр("ВыплатаЗаСчетРезерва",    ВыплатаЗаСчетРезерва);
	Запрос.УстановитьПараметр("ИсключаемыеВидыОпераций", ИсключаемыеВидыОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыплатаЗаСчетРезерва.Сотрудник КАК Сотрудник,
	|	ВыплатаЗаСчетРезерва.ВидОперации КАК ВидОперации,
	|	ВыплатаЗаСчетРезерва.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВыплатаЗаСчетРезерва.Резерв КАК Резерв,
	|	ВыплатаЗаСчетРезерва.РезервБУ КАК РезервБУ,
	|	ВыплатаЗаСчетРезерва.РезервНУ КАК РезервНУ,
	|	ВыплатаЗаСчетРезерва.Сумма КАК Сумма,
	|	ВыплатаЗаСчетРезерва.СтраховыеВзносы КАК СтраховыеВзносы,
	|	ВыплатаЗаСчетРезерва.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТВыплаты
	|ИЗ
	|	&ВыплатаЗаСчетРезерва КАК ВыплатаЗаСчетРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	Выплаты.Резерв КАК Резерв,
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Выплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА Выплаты.РезервБУ
	|			ТОГДА Выплаты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерва,
	|	ВЫБОР
	|		КОГДА Выплаты.РезервНУ
	|			ТОГДА Выплаты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваНУ,
	|	ВЫБОР
	|		КОГДА Выплаты.РезервБУ
	|			ТОГДА Выплаты.СтраховыеВзносы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваСтраховыхВзносов,
	|	ВЫБОР
	|		КОГДА Выплаты.РезервНУ
	|			ТОГДА Выплаты.СтраховыеВзносы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ВЫБОР
	|		КОГДА Выплаты.РезервБУ
	|			ТОГДА Выплаты.ФССНесчастныеСлучаи
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА Выплаты.РезервНУ
	|			ТОГДА Выплаты.ФССНесчастныеСлучаи
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваФССНесчастныеСлучаиНУ
	|ИЗ
	|	ВТВыплаты КАК Выплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Выплаты.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	Выплаты.Резерв <> ЗНАЧЕНИЕ(Справочник.Резервы.ПустаяСсылка)
	|	И НЕ Выплаты.ВидОперации В (&ИсключаемыеВидыОпераций)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		
		Для Каждого СтрокаТЗ Из Результат Цикл
			
			НоваяСтрока = Движения.ОценочныеОбязательстваПоСотрудникам.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
			
		КонецЦикла;
		
		Движения.ОценочныеОбязательстваПоСотрудникам.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// Формирует движения списания резерва отпусков в Рнк.ОценочныеОбязательства
//
// Параметры:
//			Движения - КоллекцияДвижений - Движения.
//			Отказ - Булево - Отказ.
//			Организация - СправочникСсылка.Организации - Организация.
//			ПериодРегистрации - Дата - ПериодРегистрации.
//			ТаблицаОбязательств - ТаблицаЗначений - Соответствует ресурсам Рнк.ОценочныеОбязательстваПоСотрудникам.
//
Процедура СформироватьДвиженияСписаниеРезерва(Движения, Отказ, Организация, ПериодРегистрации, ТаблицаОбязательств) Экспорт
	
	Если ТаблицаОбязательств.Колонки.Найти("СтатьяФинансирования") = Неопределено Тогда
		ТаблицаОбязательств.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбязательств", ТаблицаОбязательств);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОбязательств.СуммаРезерва КАК СуммаРезерва,
	|	ТаблицаОбязательств.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ТаблицаОбязательств.СуммаРезерваНУ КАК СуммаРезерваНУ,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ТаблицаОбязательств.Резерв КАК Резерв,
	|	&Организация КАК Организация,
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТ_ТаблицаОбязательств
	|ИЗ
	|	&ТаблицаОбязательств КАК ТаблицаОбязательств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Организация КАК Организация,
	|	ВТ_ТаблицаОбязательств.Период КАК Период,
	|	ВТ_ТаблицаОбязательств.Резерв КАК Резерв,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерва) КАК Сумма,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваНУ) КАК СуммаНУ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям) КАК ТипОценочногоОбязательства,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерва <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ВТ_ТаблицаОбязательств.Резерв
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Резерв,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам),
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ВТ_ТаблицаОбязательств.Резерв
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Резерв,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ),
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ВТ_ТаблицаОбязательств.Резерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	СтатьяФинансирования,
	|	ТипОценочногоОбязательства";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		Движения.ОценочныеОбязательства.Загрузить(Результат);
		Движения.ОценочныеОбязательства.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Распределяет суммы начисленных резервов по способам отражения в учете
// при ручном редактировании сумм резервов.
//
// Параметры:
//			Объект - Объект - Движения.
//			ПересчитатьПолностью - булево, признак необходимости полного пересчета
//
Процедура ПеречитатьОценочныеОбязательства(Объект, ПересчитатьПолностью) Экспорт
	
	Сотрудники = Объект.ИзмененныеДанные.ВыгрузитьКолонку("Сотрудник");
	
	Если Сотрудники.Количество() = 0 Тогда
		РасчетРезерваОтпусков = Объект.РасчетРезерваОтпусков.Скопировать();
	Иначе
		РасчетРезерваОтпусков = Объект.РасчетРезерваОтпусков.СкопироватьКолонки();
		Для Каждого Сотрудник ИЗ Сотрудники Цикл
			МассивСтрок = Объект.РасчетРезерваОтпусков.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
			РасчетРезерваОтпусковВременный = Объект.РасчетРезерваОтпусков.Скопировать(МассивСтрок);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РасчетРезерваОтпусковВременный, РасчетРезерваОтпусков);
		КонецЦикла;
	КонецЕсли;
		
	ТаблицыРасчетаОбязательств = ОтражениеЗарплатыВБухучете.ДанныеДляРасчетаОценочныхОбязательствОтпусков(Объект.Организация, Объект.ПериодРегистрации, Сотрудники);
	
	ТаблицаСостоянияСотрудников = СостоянияСотрудниковДляРасчетаОценочныхОбязательств(Объект.Организация, Сотрудники, Объект.ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОстаткиОтпусков",                 ТаблицыРасчетаОбязательств.ОстаткиОтпусков);
	Запрос.УстановитьПараметр("ФондОплатыТрудаИСтраховыеВзносы", ТаблицыРасчетаОбязательств.ФондОплатыТрудаИСтраховыеВзносы);
	Запрос.УстановитьПараметр("ТаблицаСостоянияСотрудников",     ТаблицаСостоянияСотрудников);
	Запрос.УстановитьПараметр("Регистратор",                     Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.Организация КАК Организация,
	|	ОстаткиОтпусков.Сотрудник КАК Сотрудник,
	|	ОстаткиОтпусков.ОстатокОтпусков КАК ОстатокОтпусков,
	|	ОстаткиОтпусков.ОтпускАвансом КАК ОтпускАвансом,
	|	ОстаткиОтпусков.Подразделение КАК Подразделение,
	|	ОстаткиОтпусков.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия,
	|	ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ОстаткиОтпусков.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОстаткиОтпусков.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТ_ОстаткиОтпусков
	|ИЗ
	|	&ОстаткиОтпусков КАК ОстаткиОтпусков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФондОплатыТрудаИСтраховыеВзносы.Организация КАК Организация,
	|	ФондОплатыТрудаИСтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	ФондОплатыТрудаИСтраховыеВзносы.Подразделение КАК Подразделение,
	|	ФондОплатыТрудаИСтраховыеВзносы.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия,
	|	ФондОплатыТрудаИСтраховыеВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ФондОплатыТрудаИСтраховыеВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ФондОплатыТрудаИСтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ФондОплатыТрудаИСтраховыеВзносы.ФондОплатыТруда КАК ФондОплатыТруда,
	|	ФондОплатыТрудаИСтраховыеВзносы.СтраховыеВзносы КАК СтраховыеВзносы,
	|	ФондОплатыТрудаИСтраховыеВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТ_ФондОплатыТрудаИСтраховыеВзносы
	|ИЗ
	|	&ФондОплатыТрудаИСтраховыеВзносы КАК ФондОплатыТрудаИСтраховыеВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостоянияСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСостоянияСотрудников.Уволен КАК Уволен,
	|	ТаблицаСостоянияСотрудников.Перемещен КАК Перемещен,
	|	ТаблицаСостоянияСотрудников.Зачислен КАК Зачислен,
	|	ТаблицаСостоянияСотрудников.Зарезервирован КАК Зарезервирован
	|ПОМЕСТИТЬ ВТ_СостоянияСотрудников
	|ИЗ
	|	&ТаблицаСостоянияСотрудников КАК ТаблицаСостоянияСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.ФондОплатыТруда
	|	КОНЕЦ КАК ФОТ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.СтраховыеВзносы
	|	КОНЕЦ КАК СтраховыеВзносы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.ОблагаетсяЕНВД
	|	КОНЕЦ КАК ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.МестоВСтруктуреПредприятия
	|	КОНЕЦ КАК МестоВСтруктуреПредприятия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.ФССНесчастныеСлучаи
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ОстаткиОтпусков.ОстатокОтпусков, 0)
	|	КОНЕЦ КАК ОстатокОтпуска,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ОстаткиОтпусков.ОтпускАвансом, 0)
	|	КОНЕЦ КАК ОтпускАвансом,
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ) КАК Уволен,
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ) КАК Перемещен,
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Зачислен, ЛОЖЬ) КАК Зачислен,
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Зарезервирован, ЛОЖЬ) КАК Зарезервирован
	|ИЗ
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы КАК ВТ_ФондОплатыТрудаИСтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиОтпусков КАК ВТ_ОстаткиОтпусков
	|		ПО (ВТ_ОстаткиОтпусков.Организация = ВТ_ФондОплатыТрудаИСтраховыеВзносы.Организация)
	|			И (ВТ_ОстаткиОтпусков.Сотрудник = ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияСотрудников КАК ВТ_СостоянияСотрудников
	|		ПО ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник = ВТ_СостоянияСотрудников.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОстаткиОтпусков.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.СтатьяФинансирования
	|	КОНЕЦ,
	|	СУММА(0),
	|	СУММА(0),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОблагаетсяЕНВД
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.МестоВСтруктуреПредприятия
	|	КОНЕЦ,
	|	СУММА(0),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОстатокОтпусков
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОтпускАвансом
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Зачислен, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Зарезервирован, ЛОЖЬ)
	|ИЗ
	|	ВТ_ОстаткиОтпусков КАК ВТ_ОстаткиОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияСотрудников КАК ВТ_СостоянияСотрудников
	|		ПО ВТ_ОстаткиОтпусков.Сотрудник = ВТ_СостоянияСотрудников.Сотрудник
	|ГДЕ
	|	НЕ ВТ_ОстаткиОтпусков.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник КАК Сотрудник
	|				ИЗ
	|					ВТ_ФондОплатыТрудаИСтраховыеВзносы КАК ВТ_ФондОплатыТрудаИСтраховыеВзносы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.СтатьяФинансирования
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОблагаетсяЕНВД
	|	КОНЕЦ,
	|	ВТ_ОстаткиОтпусков.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.МестоВСтруктуреПредприятия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОстатокОтпусков
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОтпускАвансом
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Уволен, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Перемещен, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Зачислен, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_СостоянияСотрудников.Зарезервирован, ЛОЖЬ)";
	
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерва",                      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваНУ",                    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносов",      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНУ",    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаи",   ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ", ОписаниеТиповЧисло);
	
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваИсчислено",                      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваИсчисленоНУ",                    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчислено",      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ",    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено",   ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ", ОписаниеТиповЧисло);
	
	ИмяКолонкиРаспределения = "ФОТ";
	
	Для Каждого СтрокаТаблицы Из РасчетРезерваОтпусков Цикл
		
		ПараметрыОтбора = Новый Структура("Сотрудник",СтрокаТаблицы.Сотрудник);
		МассивСтрок = ТаблицаРаспределения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() <> 0 Тогда
			
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерва",                      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносов",      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаи",   ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваНУ",                    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносовНУ",    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаиНУ", ИмяКолонкиРаспределения);
			
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваИсчислено",                      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносовИсчислено",      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаиИсчислено",   ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваИсчисленоНУ",                    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносовИсчисленоНУ",    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ", ИмяКолонкиРаспределения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРаспределения.Свернуть("Сотрудник, МестоВСтруктуреПредприятия, Подразделение,СпособОтраженияЗарплатыВБухучете,СтатьяФинансирования,ОблагаетсяЕНВД, Уволен, Перемещен, Зачислен, Зарезервирован", 
		"СуммаРезерва,СуммаРезерваНУ,
		|СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,
		|СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ,
		|СуммаРезерваИсчислено,СуммаРезерваИсчисленоНУ,
		|СуммаРезерваСтраховыхВзносовИсчислено,СуммаРезерваСтраховыхВзносовИсчисленоНУ,
		|СуммаРезерваФССНесчастныеСлучаиИсчислено,СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
	
	СтруктураПараметровРасчета = СтруктураПараметровРасчетаРезервов();
	СтруктураПараметровРасчета.Вставить("Организация",       Объект.Организация);
	СтруктураПараметровРасчета.Вставить("Резерв",            Объект.Резерв);
	СтруктураПараметровРасчета.Вставить("Регистратор",       Объект.Ссылка);
	СтруктураПараметровРасчета.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	
	Если Сотрудники = Неопределено Тогда
		ДополнитьПараметрыРасчетаНакопленнымиРезервами(СтруктураПараметровРасчета);
		НакопленныеРезервыПереведенныхСотрудников(ТаблицаРаспределения, СтруктураПараметровРасчета);
		ОпределитьСуммуКорректировкиОстатков(ТаблицаРаспределения, СтруктураПараметровРасчета);
		ОценочныеОбязательстваПоСотрудникам = ТаблицаРаспределения;
	Иначе
		ОценочныеОбязательстваПоСотрудникам = Объект.ОценочныеОбязательстваПоСотрудникам.Скопировать();
		Для Каждого Сотрудник ИЗ Сотрудники Цикл
			МассивСтрокКУдалению = ОценочныеОбязательстваПоСотрудникам.НайтиСтроки(Новый Структура("Сотрудник, КорректировкаОбязательств", Сотрудник, Ложь));
			Для Каждого СтрокаМассива ИЗ МассивСтрокКУдалению Цикл
				ОценочныеОбязательстваПоСотрудникам.Удалить(СтрокаМассива);
			КонецЦикла;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, ОценочныеОбязательстваПоСотрудникам);
		НакопленныеРезервыПереведенныхСотрудников(ТаблицаРаспределения, СтруктураПараметровРасчета);
	КонецЕсли;
	
	ДобавитьКлючСортировкиТаблицыРезервов(ОценочныеОбязательстваПоСотрудникам, Новый Структура("Период", Объект.ПериодРегистрации));
	
	ДополнитьПеренесеннымиОстатками(ОценочныеОбязательстваПоСотрудникам, СтруктураПараметровРасчета);
	
	Объект.ОценочныеОбязательстваПоСотрудникам.Очистить();
	СформироватьТаблицуОценочныеОбязательстваПоСотрудникам(ОценочныеОбязательстваПоСотрудникам, Объект.ОценочныеОбязательстваПоСотрудникам);
	
	Если ПересчитатьПолностью Тогда
		Объект.ОценочныеОбязательства.Очистить();
		СформироватьТаблицуОценочныеОбязательства(ОценочныеОбязательстваПоСотрудникам, Объект.ОценочныеОбязательства);
	КонецЕсли;
	
КонецПроцедуры

// Сворачивает суммы начисленных резервов по способам отражения в учете
// при ручном редактировании сумм резервов.
//
// Параметры:
//			Объект - Объект - Движения.
//
Процедура ОбновитьОтражениеВУчете(Объект) Экспорт
	
	ТаблицаРаспределения = Объект.ОценочныеОбязательстваПоСотрудникам.Скопировать();
	
	Объект.ОценочныеОбязательства.Очистить();
	СформироватьТаблицуОценочныеОбязательства(ТаблицаРаспределения, Объект.ОценочныеОбязательства);
	
КонецПроцедуры

// Переносит суммы из колонки Накоплено в колонку Зачтено инвертируя знак, оставляя только положительные значения
// Параметры:
//			ТаблицаРасчетРезервов - таблица значений,см. РезервыПоОплатеТруда.ТаблицаРасчетРезервов - Движения.
//
Процедура НакопленныеСуммыКСписанию(ТаблицаРасчетРезервов) Экспорт
	
	ПеренестиНакопленныеСуммы(ТаблицаРасчетРезервов, "Списание");
	
КонецПроцедуры

// Переносит суммы из колонки Накоплено в колонку Зачтено инвертируя знак, оставляя только отрицательные значения
// Параметры:
//			ТаблицаРасчетРезервов - таблица значений,см. РезервыПоОплатеТруда.ТаблицаРасчетРезервов - Движения.
//
Процедура НакопленныеСуммыКДоначислению(ТаблицаРасчетРезервов) Экспорт
	
	ПеренестиНакопленныеСуммы(ТаблицаРасчетРезервов, "Корректировка");
	
КонецПроцедуры

// Переносит суммы из колонки Накоплено в колонку Зачтено инвертируя знак, оставляя только значения по отбору
// Параметры:
//			ТаблицаРасчетРезервов - таблица значений,см. РезервыПоОплатеТруда.ТаблицаРасчетРезервов - Движения.
//
Процедура ПеренестиНакопленныеСуммы(ТаблицаРасчетРезервов, Направление = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Направление) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СуммаРезерва");
	МассивПоказателей.Добавить("СуммаРезерваСтраховыхВзносов");
	МассивПоказателей.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	
	МассивВидовУчета = Новый Массив;
	МассивВидовУчета.Добавить("");   // БУ
	МассивВидовУчета.Добавить("НУ"); // НУ
	
	Для Каждого ВидУчета Из МассивВидовУчета Цикл
		Для Каждого ЗначениеПоказателя Из МассивПоказателей Цикл
			Для Каждого СтрокаТаблицы Из ТаблицаРасчетРезервов Цикл
				Коэфффициент = 0;
				Если (Направление = "Списание" И СтрокаТаблицы[ЗначениеПоказателя + "Накоплено" + ВидУчета] > 0) Тогда
					Коэфффициент = 1;
				КонецЕсли;
				Если (Направление = "Корректировка" И СтрокаТаблицы[ЗначениеПоказателя + "Накоплено" + ВидУчета] < 0) Тогда
					Коэфффициент = -1;
				КонецЕсли;
				СтрокаТаблицы[ЗначениеПоказателя + ВидУчета] = СтрокаТаблицы[ЗначениеПоказателя + "Накоплено" + ВидУчета] * Коэфффициент;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	Для Каждого ВидУчета Из МассивВидовУчета Цикл
		Для Каждого ЗначениеПоказателя Из МассивПоказателей Цикл
			СтруктураОтбора.Вставить(ЗначениеПоказателя + ВидУчета, 0);
		КонецЦикла;
	КонецЦикла;
	
	МассивСтрокКУдалению = ТаблицаРасчетРезервов.НайтиСтроки(СтруктураОтбора);
	Для Каждого ЗаписьМассива Из МассивСтрокКУдалению Цикл
		ТаблицаРасчетРезервов.Удалить(ЗаписьМассива);
	КонецЦикла;
	
КонецПроцедуры

// Готовит структуру данных, необходимых для отражения в учете резервов
//
// Возвращаемое значение:
//  Структура - описание данных для отражения в учете
//
Функция СтруктураДанныхДляОтраженияВУчете() Экспорт
	
	ОписаниеСтруктуры = "ОценочныеОбязательства,
	|ОценочныеОбязательстваПоСотрудникам,
	|ВидОперации";
	
	ДанныеДляОтражения = Новый Структура(ОписаниеСтруктуры);
	
	Возврат ДанныеДляОтражения;
	
КонецФункции

Функция ПараметрыДляСписанияРасходов() Экспорт

	ОписаниеПараметров = Новый Структура("
	|Организация,
	|ПериодРегистрации,
	|НачисленнаяЗарплатаИВзносы,
	|ВыплатаЗаСчетРезерва,
	|Резерв,
	|ВидРезерва,
	|ДокументСсылка,
	|УчитыватьОперацииТекущегоМесяца");
	
	// Признак того, что накопленные оценочные обязательства должны включать
	// операции текущего месяца.
	ОписаниеПараметров.УчитыватьОперацииТекущегоМесяца = Истина;
	
	Возврат ОписаниеПараметров;

КонецФункции

Функция НовыйСодержимоеДокументаРасчетаРезервов() Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.НовыйСодержимоеДокументаРасчетаРезервов();
	
КонецФункции

Функция ДополнительныеПараметрыЗаполненияТаблицДокумента() Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.ДополнительныеПараметрыЗаполненияТаблицДокумента();
	
КонецФункции

#Область КонструкторыКоллекцийРезервов

// Создает пустую таблицу начислений для расчета резервов.
Функция ТаблицаНачисления() Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.ТаблицаНачисления();
	
КонецФункции

// Создает пустую таблицу взносы для расчета резервов.
Функция ТаблицаВзносы() Экспорт
	
	ВзносыРезервов = Новый ТаблицаЗначений;
	ВзносыРезервов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ВзносыРезервов.Колонки.Добавить("СтраховыеВзносы", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ВзносыРезервов.Колонки.Добавить("ФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ВзносыРезервов.Колонки.Добавить("ТекущаяСтавкаСтраховыхВзносов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(7, 4)));
	ВзносыРезервов.Колонки.Добавить("ТекущаяСтавкаФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(7, 4)));
	ВзносыРезервов.Колонки.Добавить("СуммаСтраховыхВзносов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ВзносыРезервов.Колонки.Добавить("СуммаСтраховыхВзносовНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ВзносыРезервов.Колонки.Добавить("СуммаФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ВзносыРезервов.Колонки.Добавить("СуммаФССНесчастныеСлучаиНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ВзносыРезервов.Колонки.Добавить("НормативОтчисленийВРезервСтраховыеВзносы", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 2)));
	ВзносыРезервов.Колонки.Добавить("НормативОтчисленийВРезервСтраховыеВзносыНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 2)));
	ВзносыРезервов.Колонки.Добавить("НормативОтчисленийВРезервФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 2)));
	ВзносыРезервов.Колонки.Добавить("НормативОтчисленийВРезервФССНесчастныеСлучаиНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 2)));
	
	ВзносыРезервов.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	ВзносыРезервов.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ВзносыРезервов.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	
	Возврат ВзносыРезервов;
	
КонецФункции

// Создает пустую таблицу расчета резервов
Функция ТаблицаРасчетРезервов() Экспорт
	
	РасчетРезервов = Новый ТаблицаЗначений;
	РасчетРезервов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РасчетРезервов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РасчетРезервов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	РасчетРезервов.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	РасчетРезервов.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	РасчетРезервов.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	РасчетРезервов.Колонки.Добавить("Зачислен", Новый ОписаниеТипов("Булево"));
	РасчетРезервов.Колонки.Добавить("Перемещен", Новый ОписаниеТипов("Булево"));
	РасчетРезервов.Колонки.Добавить("Уволен", Новый ОписаниеТипов("Булево"));
	РасчетРезервов.Колонки.Добавить("Зарезервирован", Новый ОписаниеТипов("Булево"));
	РасчетРезервов.Колонки.Добавить("СуммаРезерва", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваНакоплено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваНакопленоНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваИсчислено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваИсчисленоНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваСтраховыхВзносов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНакоплено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНакопленоНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчислено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНакоплено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	РасчетРезервов.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	
	РасчетРезервов.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	РасчетРезервов.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	РасчетРезервов.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	
	Возврат РасчетРезервов;
	
КонецФункции

// Создает пустую таблицу оценочных обязательств по сотрудникам
Функция ТаблицаОценочныеОбязательстваПоСотрудникам() Экспорт
	
	ОценочныеОбязательстваПоСотрудникам = Новый ТаблицаЗначений;
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СуммаРезерва", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СуммаРезерваНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СуммаРезерваСтраховыхВзносов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("КорректировкаОбязательств", Новый ОписаниеТипов("Булево"));
	
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ОценочныеОбязательстваПоСотрудникам.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	
	Возврат ОценочныеОбязательстваПоСотрудникам;
	
КонецФункции

// Создает пустую таблицу оценочных обязательств
Функция ТаблицаОценочныеОбязательства() Экспорт
	
	ОценочныеОбязательства = Новый ТаблицаЗначений;
	ОценочныеОбязательства.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ОценочныеОбязательства.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	ОценочныеОбязательства.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	ОценочныеОбязательства.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ОценочныеОбязательства.Колонки.Добавить("СуммаРезерва", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательства.Колонки.Добавить("СуммаРезерваНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательства.Колонки.Добавить("СуммаРезерваСтраховыхВзносов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательства.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательства.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	ОценочныеОбязательства.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	
	ОценочныеОбязательства.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	ОценочныеОбязательства.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ОценочныеОбязательства.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));

	
	Возврат ОценочныеОбязательства;
	
КонецФункции

// Сортирует данные таблиц перед заполнением документа
Процедура СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Организация, МесяцНачисления, ИспользоватьСортировкуПоУмолчанию = Истина) Экспорт
	РезервыПоОплатеТрудаВнутренний.СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Организация, МесяцНачисления, ИспользоватьСортировкуПоУмолчанию);
КонецПроцедуры

#КонецОбласти

#Область РасчетЗначенийРезервов

Функция ФормулаРасчетаРезерваОтпусков(ДляВыполнения = Ложь) Экспорт
	
	Формула = "ИсходныеДанные.СохраняемыйЗаработок * ИсходныеДанные.ОстатокОтпуска";
	Если Не ДляВыполнения Тогда
		Формула = СтрЗаменить(Формула, "ИсходныеДанные.", "");
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции

Процедура РассчитатьРезервыНормативнымМетодом(Начисления, НастройкаРезервов, Показатель = "") Экспорт
	
	ИмяКолонкиРезультат = "Результат" + Показатель;
	
	КолонкиСвертки      = "Сотрудник, НормативОтчисленийВРезерв, НормативОтчисленийВРезервНУ";
	КолонкиСуммирования = "ФондОплатыТруда, " + ИмяКолонкиРезультат;
	СводныеНачисления = Начисления.Скопировать(, КолонкиСвертки + "," + КолонкиСуммирования);
	СводныеНачисления.Свернуть(КолонкиСвертки, КолонкиСуммирования);
	
	Для Каждого СтрокаТаблицы Из СводныеНачисления Цикл
		СтрокаТаблицы[ИмяКолонкиРезультат] = Макс(0, Окр(СтрокаТаблицы.ФондОплатыТруда * СтрокаТаблицы["НормативОтчисленийВРезерв" + Показатель] / 100, 2));
	КонецЦикла;
	
	Отбор = Новый Структура("Сотрудник");
	Для Каждого СтрокаТаблицы Из СводныеНачисления Цикл
		Отбор.Сотрудник = СтрокаТаблицы.Сотрудник;
		МассивИсточник = Начисления.НайтиСтроки(Отбор);
		Если МассивИсточник.Количество() <> 0 Тогда
			МассивИсточникДляРаспределения = Новый Массив;
			НераспределяемаяСумма = 0;
			Для Каждого Строка Из МассивИсточник Цикл
				Если Строка.ФиксРасчет Тогда
					НераспределяемаяСумма = НераспределяемаяСумма + Строка[ИмяКолонкиРезультат];
				Иначе
					МассивИсточникДляРаспределения.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			МассивБазыРаспределения = Новый Массив;
			Для Каждого Строка Из МассивИсточникДляРаспределения Цикл
				МассивБазыРаспределения.Добавить(Строка.ФондОплатыТруда);
			КонецЦикла;
			РаспределяемаяСумма = Макс(СтрокаТаблицы[ИмяКолонкиРезультат] - НераспределяемаяСумма, 0);
			
			МассивНовыхСумм = РезервыПоОплатеТруда.РаспределитьПропорционально(РаспределяемаяСумма, МассивБазыРаспределения);
			Если МассивНовыхСумм <> Неопределено Тогда
				Для НомерЗаписи = 1 По МассивНовыхСумм.Количество() Цикл
					МассивИсточникДляРаспределения[НомерЗаписи-1][ИмяКолонкиРезультат] = МассивНовыхСумм[НомерЗаписи-1];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиРасчетаДляНормативногоМетода(Начисления, НастройкаРезервов) Экспорт
	
	ЗаполнитьПоказателиФондаОплатыТруда(Начисления, НастройкаРезервов);
	ЗаполнитьПоказателиНормативОтчислений(Начисления, НастройкаРезервов);
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФондаОплатыТруда(Начисления, НастройкаРезервов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ПолучитьВТИсключаемыеНачисления(МенеджерВременныхТаблиц,
		НастройкаРезервов.Организация,
		НастройкаРезервов.Резерв,
		НастройкаРезервов.Период);
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	
	Если Не НастройкаРезервов.Инвентаризация Тогда
		НачалоПериода = НачалоМесяца(НастройкаРезервов.Период);
		КонецПериода  = КонецМесяца(НастройкаРезервов.Период);
	Иначе
		НачалоПериода = НачалоГода(НастройкаРезервов.Период);;
		КонецПериода  = КонецМесяца(НастройкаРезервов.Период);
	КонецЕсли;
	
	ГруппаНачисления = Новый Массив;
	ГруппаНачисления.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	ГруппаНачисления.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы);
	ГруппаНачисления.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организации",      ВсяОрганизация(НастройкаРезервов.ГоловнаяОрганизация));
	Запрос.УстановитьПараметр("Сотрудники",       МассивСотрудников);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",     КонецПериода);
	Запрос.УстановитьПараметр("ГруппаНачисления", ГруппаНачисления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияПоСотрудникам.Сотрудник КАК Сотрудник,
	|	СУММА(НачисленияПоСотрудникам.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияПоСотрудникам
	|ГДЕ
	|	НачисленияПоСотрудникам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияПоСотрудникам.Организация В(&Организации)
	|	И НачисленияПоСотрудникам.Сотрудник В(&Сотрудники)
	|	И НЕ НачисленияПоСотрудникам.НачислениеУдержание В
	|				(ВЫБРАТЬ
	|					ВТИсключаемыеНачисления.ВидРасчета
	|				ИЗ
	|					ВТИсключаемыеНачисления)
	|	И НачисленияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В(&ГруппаНачисления)
	|	И НачисленияПоСотрудникам.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоСотрудникам.Сотрудник";
	
	ФондОплатыТрудаСотрудников = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПроверятьИсправления = Начисления.Колонки.Найти("ФиксЗаполнение") <> Неопределено;
	
	Для Каждого ЗаписьМассива Из МассивСотрудников Цикл
		МассивСтрок = ФондОплатыТрудаСотрудников.НайтиСтроки(Новый Структура("Сотрудник",ЗаписьМассива));
		ФондОплатыТруда = 0;
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ФондОплатыТруда = ФондОплатыТруда + СтрокаМассива.Сумма;
		КонецЦикла;
		
		МассивСтрокНачислений = Начисления.НайтиСтроки(Новый Структура("Сотрудник", ЗаписьМассива));
		КоличествоСтрок = МассивСтрокНачислений.Количество();
		Для Каждого ЗначениеМассива Из МассивСтрокНачислений Цикл
			ФиксЗаполнение = Ложь;
			ФиксРасчет     = Ложь;
			Если ПроверятьИсправления Тогда
				ФиксЗаполнение = ЗначениеМассива.ФиксЗаполнение;
				ФиксРасчет     = ЗначениеМассива.ФиксРасчет;
			КонецЕсли;
			Если ФиксЗаполнение Или ФиксРасчет Тогда
				КоличествоСтрок = КоличествоСтрок - 1;
				ФондОплатыТруда = ФондОплатыТруда - ЗначениеМассива.ФондОплатыТруда;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСтрок > 0 Тогда
			
			ЗначениеСтроки = Окр(ФондОплатыТруда / КоличествоСтрок, 2);
			
			ФиксЗаполнение = Ложь;
			ФиксРасчет     = Ложь;
			Для Каждого ЗначениеМассива Из МассивСтрокНачислений Цикл
				Если ПроверятьИсправления Тогда
					ФиксЗаполнение = ЗначениеМассива.ФиксЗаполнение;
					ФиксРасчет     = ЗначениеМассива.ФиксРасчет;
				КонецЕсли;
				Если Не ФиксЗаполнение И Не ФиксРасчет Тогда
					ЗначениеМассива.ФондОплатыТруда = ЗначениеСтроки;
					ФондОплатыТруда = ФондОплатыТруда - ЗначениеСтроки;
				КонецЕсли;
			КонецЦикла;
			Если ФондОплатыТруда <> 0 И Не ФиксЗаполнение И Не ФиксРасчет Тогда
				МассивСтрокНачислений[КоличествоСтрок - 1].ФондОплатыТруда = МассивСтрокНачислений[КоличествоСтрок - 1].ФондОплатыТруда + ФондОплатыТруда;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиНормативОтчислений(Начисления, НастройкаРезервов) Экспорт
	
	НормативОтчисленийВРезерв   = НастройкаРезервов.НормативОтчисленийВРезерв;
	НормативОтчисленийВРезервНУ = НастройкаРезервов.НормативОтчисленийВРезервНУ;
	Для Каждого СтрокаТаблицы Из Начисления Цикл
		Если Не СтрокаТаблицы.ФиксЗаполнение Тогда
			СтрокаТаблицы.НормативОтчисленийВРезерв   = НормативОтчисленийВРезерв;
			СтрокаТаблицы.НормативОтчисленийВРезервНУ = НормативОтчисленийВРезервНУ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьРезервыВНалоговомУчете(Начисления, НастройкаРезервов) Экспорт
	
	Если НастройкаРезервов.ФормироватьРезервНУ Тогда
		Если НастройкаРезервов.НалоговыйУчетПоНастройкамБухгалтерскогоУчета
			Или НастройкаРезервов.Инвентаризация Тогда // При инвентаризации считаем по правилам БУ
			ЗаполнитьРезервыНУПоДаннымНУ(Начисления, НастройкаРезервов);
		Иначе
			РассчитатьРезервыНормативнымМетодом(Начисления, НастройкаРезервов, "НУ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезервыНУПоДаннымНУ(Начисления, НастройкаРезервов) Экспорт
	
	Если НастройкаРезервов.ФормироватьРезервНУ Тогда
		Для Каждого СтрокаТаблицы Из Начисления Цикл
			Если Не СтрокаТаблицы.ФиксРасчет Тогда
				СтрокаТаблицы.РезультатНУ = Макс(0, СтрокаТаблицы.Результат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьРасчетСУчетомКадровыхСостояний(Начисления) Экспорт
	
	Для Каждого СтрокаТаблицы Из Начисления Цикл
		Если СтрокаТаблицы.Уволен Или СтрокаТаблицы.Перемещен Тогда
			СтрокаТаблицы.Результат   = 0;
			СтрокаТаблицы.РезультатНУ = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьСтраховыеВзносы(Начисления, Взносы, НастройкаРезервов) Экспорт
	
	ПолучитьБазуИСтавкиРасчетаВзносов(Начисления, Взносы, НастройкаРезервов);
	
	Если НастройкаРезервов.ФормироватьРезервБУ Тогда
		Если НастройкаРезервов.НормативныйМетодБУ
			И Не НастройкаРезервов.Инвентаризация Тогда // При инвентаризации считаем по ставке
			
			НормативОтчисленийВРезерв = НастройкаРезервов.НормативОтчисленийВРезервБУ;
			
			Отбор = Новый Структура("ФизическоеЛицо");
			Для Каждого СтрокаТаблицы Из Взносы Цикл
				
				Если Не СтрокаТаблицы.ФиксЗаполнение Тогда
					СтрокаТаблицы.НормативОтчисленийВРезервСтраховыеВзносы     = НормативОтчисленийВРезерв;
					СтрокаТаблицы.НормативОтчисленийВРезервФССНесчастныеСлучаи = НормативОтчисленийВРезерв;
				КонецЕсли;
				Если Не СтрокаТаблицы.ФиксРасчет Тогда
					
					Отбор.ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
					МассивСтрокСотрудника = Начисления.НайтиСтроки(Отбор);
					ФондОплатыТрудаУчитываемый = 0;
					ФондОплатыТрудаОбщий       = 0;
					Для Каждого СтрокаМассива Из МассивСтрокСотрудника Цикл
						ФондОплатыТрудаОбщий = ФондОплатыТрудаОбщий + СтрокаМассива.ФондОплатыТруда;
						Если Не (СтрокаМассива.Уволен Или СтрокаМассива.Перемещен) Тогда
							ФондОплатыТрудаУчитываемый = ФондОплатыТрудаУчитываемый + СтрокаМассива.ФондОплатыТруда;
						КонецЕсли;
					КонецЦикла;
					Если ФондОплатыТрудаОбщий = 0 Тогда
						СтрокаТаблицы.СтраховыеВзносы     = 0;
						СтрокаТаблицы.ФССНесчастныеСлучаи = 0;
					ИначеЕсли ФондОплатыТрудаУчитываемый <> ФондОплатыТрудаОбщий Тогда
						Коэффициент = Окр(ФондОплатыТрудаУчитываемый / ФондОплатыТрудаОбщий, 2);
						СтрокаТаблицы.СтраховыеВзносы     = Окр(СтрокаТаблицы.СтраховыеВзносы * Коэффициент, 2);
						СтрокаТаблицы.ФССНесчастныеСлучаи = Окр(СтрокаТаблицы.ФССНесчастныеСлучаи * Коэффициент, 2);
					КонецЕсли;
					
					СтрокаТаблицы.СуммаСтраховыхВзносов    = Окр(СтрокаТаблицы.СтраховыеВзносы * СтрокаТаблицы.НормативОтчисленийВРезервСтраховыеВзносы / 100, 2);
					СтрокаТаблицы.СуммаФССНесчастныеСлучаи = Окр(СтрокаТаблицы.ФССНесчастныеСлучаи * СтрокаТаблицы.НормативОтчисленийВРезервФССНесчастныеСлучаи / 100, 2);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Отбор = Новый Структура("ФизическоеЛицо");
			Для Каждого СтрокаТаблицы Из Взносы Цикл
				
				Если Не СтрокаТаблицы.ФиксРасчет Тогда
					Отбор.ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
					МассивСтрокСотрудника = Начисления.НайтиСтроки(Отбор);
					СуммаРезерва = 0;
					Для Каждого СтрокаМассива Из МассивСтрокСотрудника Цикл
						Если Не (СтрокаМассива.Уволен Или СтрокаМассива.Перемещен) Тогда
							СуммаРезерва = СуммаРезерва + СтрокаМассива.Результат;
						КонецЕсли;
					КонецЦикла;
					
					СтрокаТаблицы.СуммаСтраховыхВзносов    = Окр(СуммаРезерва * СтрокаТаблицы.ТекущаяСтавкаСтраховыхВзносов / 100, 2);
					СтрокаТаблицы.СуммаФССНесчастныеСлучаи = Окр(СуммаРезерва * СтрокаТаблицы.ТекущаяСтавкаФССНесчастныеСлучаи / 100, 2);
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаРезервов.ФормироватьРезервНУ Тогда
		Если НастройкаРезервов.НалоговыйУчетПоНастройкамБухгалтерскогоУчета
			Или НастройкаРезервов.Инвентаризация Тогда
			Для Каждого СтрокаТаблицы Из Взносы Цикл
				Если Не СтрокаТаблицы.ФиксРасчет Тогда
					СтрокаТаблицы.СуммаСтраховыхВзносовНУ    = СтрокаТаблицы.СуммаСтраховыхВзносов;
					СтрокаТаблицы.СуммаФССНесчастныеСлучаиНУ = СтрокаТаблицы.СуммаФССНесчастныеСлучаи;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НормативОтчисленийВРезерв   = НастройкаРезервов.НормативОтчисленийВРезервНУ;
			
			Для Каждого СтрокаТаблицы Из Взносы Цикл
				
				Если Не СтрокаТаблицы.ФиксЗаполнение Тогда
					СтрокаТаблицы.НормативОтчисленийВРезервСтраховыеВзносыНУ     = НормативОтчисленийВРезерв;
					СтрокаТаблицы.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ = НормативОтчисленийВРезерв;
				КонецЕсли;
				
				Если Не СтрокаТаблицы.ФиксРасчет Тогда
					
					Если Не НастройкаРезервов.НормативныйМетодБУ Тогда
						Отбор.ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
						МассивСтрокСотрудника = Начисления.НайтиСтроки(Отбор);
						ФондОплатыТрудаУчитываемый = 0;
						ФондОплатыТрудаОбщий       = 0;
						Для Каждого СтрокаМассива Из МассивСтрокСотрудника Цикл
							ФондОплатыТрудаОбщий = ФондОплатыТрудаОбщий + СтрокаМассива.ФондОплатыТруда;
							Если Не (СтрокаМассива.Уволен Или СтрокаМассива.Перемещен) Тогда
								ФондОплатыТрудаУчитываемый = ФондОплатыТрудаУчитываемый + СтрокаМассива.ФондОплатыТруда;
							КонецЕсли;
						КонецЦикла;
						Если ФондОплатыТрудаОбщий = 0 Тогда
							СтрокаТаблицы.СтраховыеВзносы     = 0;
							СтрокаТаблицы.ФССНесчастныеСлучаи = 0;
						ИначеЕсли ФондОплатыТрудаУчитываемый <> ФондОплатыТрудаОбщий Тогда
							Коэффициент = Окр(ФондОплатыТрудаУчитываемый / ФондОплатыТрудаОбщий, 2);
							СтрокаТаблицы.СтраховыеВзносы     = Окр(СтрокаТаблицы.СтраховыеВзносы * Коэффициент, 2);
							СтрокаТаблицы.ФССНесчастныеСлучаи = Окр(СтрокаТаблицы.ФССНесчастныеСлучаи * Коэффициент, 2);
						КонецЕсли;
					КонецЕсли;
					
					СтрокаТаблицы.СуммаСтраховыхВзносовНУ    = Окр(СтрокаТаблицы.СтраховыеВзносы * СтрокаТаблицы.НормативОтчисленийВРезервСтраховыеВзносыНУ / 100, 2);
					СтрокаТаблицы.СуммаФССНесчастныеСлучаиНУ = Окр(СтрокаТаблицы.ФССНесчастныеСлучаи * СтрокаТаблицы.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ / 100, 2);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьБазуИСтавкиРасчетаВзносов(Начисления, Взносы, НастройкаРезервов) Экспорт
	
	Инвентаризация = НастройкаРезервов.Инвентаризация;
	Начисление     = НастройкаРезервов.Начисление;
	
	Если Не Начисление и Не Инвентаризация Тогда
		Взносы.Очистить();
		Возврат;
	КонецЕсли;
	
	НормативныйМетод = НастройкаРезервов.НормативныйМетодБУ
		Или (НастройкаРезервов.НормативныйМетодНУ И НастройкаРезервов.ФормироватьРезервНУ);
	МетодОбязательств = НастройкаРезервов.МетодНачисленияРезерваБУ = Перечисления.МетодыНачисленияРезервовПоОплатеТруда.МетодОбязательств;
	ЭтоРезервОтпусков = НастройкаРезервов.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	
	МассивСотрудников =  ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	СоответствиеСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	СтавкиВзносов = ОтражениеЗарплатыВБухучете.ЭффективныеСтавкиВзносовДляОценочныхОбязательств(НастройкаРезервов.Организация, НастройкаРезервов.Период, МассивСотрудников);
	Если Начисление Тогда
		
		БазовыеНачисления = Неопределено;
		Если Не ЭтоРезервОтпусков Или НормативныйМетод Тогда
			Если НастройкаРезервов.НормативныйМетодНУ И НастройкаРезервов.ФормироватьРезервНУ Тогда
				БазовыеНачисления = РезервыПоОплатеТрудаБазовый.БазовыеНачисленияРезерваПоОплатеТруда(НастройкаРезервов.Организация, НастройкаРезервов.Резерв, НастройкаРезервов.Период);
			Иначе
				БазовыеНачисления = БазовыеНачисленияРезерваПоОплатеТруда(НастройкаРезервов.Организация, НастройкаРезервов.Резерв, НастройкаРезервов.Период);
			КонецЕсли;
		КонецЕсли;
		
		СтраховыеВзносы = ОтражениеЗарплатыВБухучете.ИсчисленныеВзносыДляРасчетаОценочныхОбязательств(НастройкаРезервов.Организация,
			НастройкаРезервов.Период,
			МассивСотрудников,
			ЭтоРезервОтпусков И Не ЗначениеЗаполнено(БазовыеНачисления),
			БазовыеНачисления);
	КонецЕсли;
	
	МассивФизическихЛиц = Новый Массив;
	МассивНезаполненных = Новый Массив;
	Для Каждого ЗаписьМассива Из МассивСотрудников Цикл
		
		СтрокаВзносов = Взносы.Найти(СоответствиеСотрудников[ЗаписьМассива]);
		Если СтрокаВзносов = Неопределено Тогда
			СтрокаВзносов = Взносы.Добавить();
		КонецЕсли;
		
		Если СтрокаВзносов.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВзносов.ФизическоеЛицо = СоответствиеСотрудников[ЗаписьМассива];
		
		Если Начисление И НормативныйМетод Тогда
			ТекущаяСтрока = СтраховыеВзносы.Найти(ЗаписьМассива, "Сотрудник");
			Если ТекущаяСтрока <> Неопределено Тогда
				Если МассивФизическихЛиц.Найти(СтрокаВзносов.ФизическоеЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаВзносов, ТекущаяСтрока);
				Иначе
					СтрокаВзносов.СтраховыеВзносы     = СтрокаВзносов.СтраховыеВзносы + ТекущаяСтрока.СтраховыеВзносы;
					СтрокаВзносов.ФССНесчастныеСлучаи = СтрокаВзносов.ФССНесчастныеСлучаи + ТекущаяСтрока.ФССНесчастныеСлучаи;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Инвентаризация
			Или (Начисление И МетодОбязательств) Тогда
			
			ТекущаяСтрока = СтавкиВзносов.Найти(ЗаписьМассива, "Сотрудник");
			Если ТекущаяСтрока <> Неопределено Тогда
				СтрокаВзносов.ТекущаяСтавкаФССНесчастныеСлучаи = ТекущаяСтрока.СтавкаФСС_НС;
				СтрокаВзносов.ТекущаяСтавкаСтраховыхВзносов    = ТекущаяСтрока.СтавкаСтраховыхВзносов;
				Если СтрокаВзносов.ТекущаяСтавкаФССНесчастныеСлучаи = 0 И СтрокаВзносов.ТекущаяСтавкаСтраховыхВзносов = 0 Тогда
					МассивНезаполненных.Добавить(СтрокаВзносов.ФизическоеЛицо);
				КонецЕсли;
			Иначе
				МассивНезаполненных.Добавить(СтрокаВзносов.ФизическоеЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
		МассивФизическихЛиц.Добавить(СтрокаВзносов.ФизическоеЛицо);
	
	КонецЦикла;
	
	СтавкиВзносовПоНастройкамТарифов = СтавкиВзносовПоНастройкамТарифов(НастройкаРезервов.Организация, НастройкаРезервов.Период);
	
	Если МассивНезаполненных.Количество() > 0 Тогда
		Если Инвентаризация Или (Начисление И МетодОбязательств) Тогда
			СтавкиВзносов = ЭффективныеСтавкиВзносовПоДаннымОценочныхОбязательств(НастройкаРезервов.Организация, НастройкаРезервов.Период, МассивНезаполненных, НастройкаРезервов);
			Для Каждого ЗаписьМассива Из МассивНезаполненных Цикл
				ТекущаяСтрока = СтавкиВзносов.Найти(ЗаписьМассива, "ФизическоеЛицо");
				СтрокаВзносов = Взносы.Найти(ЗаписьМассива);
				Если ТекущаяСтрока <> Неопределено Тогда
					СтрокаВзносов.ТекущаяСтавкаФССНесчастныеСлучаи = ТекущаяСтрока.СтавкаФСС_НС;
					СтрокаВзносов.ТекущаяСтавкаСтраховыхВзносов    = ТекущаяСтрока.СтавкаСтраховыхВзносов;
				КонецЕсли;
				// Если ставки не смогли рассчитать - используем ставки из настройки
				Если СтрокаВзносов.ТекущаяСтавкаФССНесчастныеСлучаи = 0 Тогда
					СтрокаВзносов.ТекущаяСтавкаФССНесчастныеСлучаи = СтавкиВзносовПоНастройкамТарифов.СтавкаФСС_НС;
				КонецЕсли;
				Если СтрокаВзносов.ТекущаяСтавкаСтраховыхВзносов = 0 Тогда
					СтрокаВзносов.ТекущаяСтавкаСтраховыхВзносов = СтавкиВзносовПоНастройкамТарифов.СтавкаСтраховыхВзносов;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Взносы.Свернуть("ФизическоеЛицо, ТекущаяСтавкаСтраховыхВзносов, ТекущаяСтавкаФССНесчастныеСлучаи,
		|НормативОтчисленийВРезервСтраховыеВзносы, НормативОтчисленийВРезервФССНесчастныеСлучаи,
		|НормативОтчисленийВРезервСтраховыеВзносыНУ, НормативОтчисленийВРезервФССНесчастныеСлучаиНУ,
		|ФиксСтрока, ФиксРасчет, ФиксЗаполнение",
		"СтраховыеВзносы, ФССНесчастныеСлучаи,
		|СуммаСтраховыхВзносов, СуммаСтраховыхВзносовНУ, СуммаФССНесчастныеСлучаи, СуммаФССНесчастныеСлучаиНУ");
	
КонецПроцедуры

Процедура РассчитатьТекущийМесяц(СтруктураТаблиц, Организация, Резерв, МесяцНачисления, Регистратор, ВидОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураТаблиц.Начисления)
		И Не ЗначениеЗаполнено(СтруктураТаблиц.Взносы) Тогда
		СтруктураТаблиц.Вставить("РасчетРезервов", УстановитьТаблицуРасчетРезервов());
		Возврат;
	КонецЕсли;
	
	ТаблицаРасчетРезервов = УстановитьТаблицуРасчетРезервов(СтруктураТаблиц.РасчетРезервов);
	
	ВзносыРезервов = СтруктураТаблиц.Взносы.Скопировать( , "ФизическоеЛицо,СуммаСтраховыхВзносов,СуммаСтраховыхВзносовНУ,СуммаФССНесчастныеСлучаи,СуммаФССНесчастныеСлучаиНУ");
	ВзносыРезервов.Свернуть("ФизическоеЛицо", "СуммаСтраховыхВзносов,СуммаСтраховыхВзносовНУ,СуммаФССНесчастныеСлучаи,СуммаФССНесчастныеСлучаиНУ");
	Начисления = СтруктураТаблиц.Начисления.Скопировать( , "Сотрудник,Результат,РезультатНУ");
	Начисления.Свернуть("Сотрудник", "Результат,РезультатНУ");
	Состояния = СтруктураТаблиц.Начисления.Скопировать( , "Сотрудник,Уволен,Перемещен,Зачислен,Зарезервирован");
	Состояния.Свернуть("Сотрудник,Уволен,Перемещен,Зачислен,Зарезервирован", );
	
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник"));
	СоответствиеСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщегоНазначения.ВыгрузитьКолонку(ВзносыРезервов, "ФизическоеЛицо"));
	
	Для Каждого СтрокаМассива Из МассивСотрудников Цикл
		
		СтрокаРачетаРезерва = ТаблицаРасчетРезервов.Найти(СтрокаМассива);
		Если СтрокаРачетаРезерва = Неопределено Тогда
			СтрокаРачетаРезерва = ТаблицаРасчетРезервов.Добавить();
			СтрокаРачетаРезерва.Сотрудник = СтрокаМассива;
		КонецЕсли;
		
		СтрокаТаблицыРезерва = Начисления.Найти(СтрокаМассива, "Сотрудник");
		Если СтрокаТаблицыРезерва <> Неопределено Тогда
			Если Не СтрокаРачетаРезерва.ФиксЗаполнение Тогда
				СтрокаРачетаРезерва.СуммаРезерваИсчислено   = СтрокаТаблицыРезерва.Результат;
				СтрокаРачетаРезерва.СуммаРезерваИсчисленоНУ = СтрокаТаблицыРезерва.РезультатНУ;
			КонецЕсли;
		КонецЕсли;
		
		ФизическоеЛицо = СоответствиеСотрудников[СтрокаМассива];
		СтрокаРачетаРезерва.ФизическоеЛицо = ФизическоеЛицо;
		
		СтрокаТаблицыВзносы = ВзносыРезервов.Найти(ФизическоеЛицо, "ФизическоеЛицо");
		Если СтрокаТаблицыВзносы <> Неопределено Тогда
			Если Не СтрокаРачетаРезерва.ФиксЗаполнение Тогда
				СтрокаРачетаРезерва.СуммаРезерваСтраховыхВзносовИсчислено      = СтрокаТаблицыВзносы.СуммаСтраховыхВзносов;
				СтрокаРачетаРезерва.СуммаРезерваСтраховыхВзносовИсчисленоНУ    = СтрокаТаблицыВзносы.СуммаСтраховыхВзносовНУ;
				СтрокаРачетаРезерва.СуммаРезерваФССНесчастныеСлучаиИсчислено   = СтрокаТаблицыВзносы.СуммаФССНесчастныеСлучаи;
				СтрокаРачетаРезерва.СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ = СтрокаТаблицыВзносы.СуммаФССНесчастныеСлучаиНУ;
			КонецЕсли;
			ИндексЗаписи = МассивФизическихЛиц.Найти(ФизическоеЛицо);
			Если ИндексЗаписи <> Неопределено Тогда
				МассивФизическихЛиц.Удалить(ИндексЗаписи);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыСостояние = Состояния.Найти(СтрокаМассива, "Сотрудник");
		Если СтрокаТаблицыСостояние <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРачетаРезерва, СтрокаТаблицыСостояние, "Уволен,Перемещен,Зачислен,Зарезервирован");
		КонецЕсли;
		
	КонецЦикла;
	
	ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(МассивФизическихЛиц, Истина, Организация, МесяцНачисления);
	
	Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
		
		СтрокаТаблицыСотрудников = ОсновныеСотрудникиФизическихЛиц.Найти(ФизическоеЛицо);
		Если СтрокаТаблицыСотрудников = Неопределено Тогда
			Продолжить;
		Иначе
			Сотрудник = СтрокаТаблицыСотрудников.Сотрудник;
		КонецЕсли;
		
		СтрокаРачетаРезерва = ТаблицаРасчетРезервов.Найти(ФизическоеЛицо);
		Если СтрокаРачетаРезерва = Неопределено Тогда
			СтрокаРачетаРезерва = ТаблицаРасчетРезервов.Добавить();
			СтрокаРачетаРезерва.Сотрудник = Сотрудник;
		КонецЕсли;
		
		СтрокаРачетаРезерва.ФизическоеЛицо = ФизическоеЛицо;
		
		СтрокаТаблицыВзносы = ВзносыРезервов.Найти(ФизическоеЛицо, "ФизическоеЛицо");
		Если СтрокаТаблицыВзносы <> Неопределено Тогда
			Если Не СтрокаРачетаРезерва.ФиксЗаполнение Тогда
				СтрокаРачетаРезерва.СуммаРезерваСтраховыхВзносовИсчислено      = СтрокаТаблицыВзносы.СуммаСтраховыхВзносов;
				СтрокаРачетаРезерва.СуммаРезерваСтраховыхВзносовИсчисленоНУ    = СтрокаТаблицыВзносы.СуммаСтраховыхВзносовНУ;
				СтрокаРачетаРезерва.СуммаРезерваФССНесчастныеСлучаиИсчислено   = СтрокаТаблицыВзносы.СуммаФССНесчастныеСлучаи;
				СтрокаРачетаРезерва.СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ = СтрокаТаблицыВзносы.СуммаФССНесчастныеСлучаиНУ;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыСостояние = Состояния.Найти(Сотрудник, "Сотрудник");
		Если СтрокаТаблицыСостояние <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРачетаРезерва, СтрокаТаблицыСостояние, "Уволен,Перемещен,Зачислен,Зарезервирован");
		КонецЕсли;
		
	КонецЦикла;
	
	МассивВидовУчета = Новый Массив;
	МассивВидовУчета.Добавить("");   // БУ
	МассивВидовУчета.Добавить("НУ"); // НУ
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СуммаРезерваСтраховыхВзносовИсчислено");
	МассивПоказателей.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено");
	
	МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаРасчетРезервов.ВыгрузитьКолонку("ФизическоеЛицо"));
	ОтборФизическихЛиц = Новый Структура("ФизическоеЛицо, ФиксЗаполнение");
	ОтборФизическихЛиц.ФиксЗаполнение = Ложь;
	Для Каждого СтрокаМассива Из МассивФизическихЛиц Цикл
		ОтборФизическихЛиц.ФизическоеЛицо = СтрокаМассива;
		МассивИсточник = ТаблицаРасчетРезервов.НайтиСтроки(ОтборФизическихЛиц);
		Если МассивИсточник.Количество() > 1 Тогда
			
			Для Каждого ВидУчета Из МассивВидовУчета Цикл
				Для Каждого ЗначениеПоказателя Из МассивПоказателей Цикл
					РаспределяемаяСумма = 0;
					МассивСтарыхСумм = Новый Массив;
					Для Каждого Строка Из МассивИсточник Цикл
						РаспределяемаяСумма = РаспределяемаяСумма + Строка[ЗначениеПоказателя + ВидУчета];
						МассивСтарыхСумм.Добавить(Строка["СуммаРезерваИсчислено" + ВидУчета]);
					КонецЦикла;
					РаспределяемаяСумма = РаспределяемаяСумма / МассивИсточник.Количество();
					
					МассивНовыхСумм = РезервыПоОплатеТруда.РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
					Если МассивНовыхСумм <> Неопределено Тогда
						Для НомерЗаписи = 1 По МассивНовыхСумм.Количество() Цикл
							МассивИсточник[НомерЗаписи-1][ЗначениеПоказателя + ВидУчета] = МассивНовыхСумм[НомерЗаписи-1];
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	МассивСотрудников = Новый Массив;
	РезервыПоОплатеТруда.ПолучитьМассивСотрудников(МассивСотрудников, ТаблицаРасчетРезервов);
	
	Реквизиты = Новый Структура("Организация, Резерв, Период, ВидОперации", Организация, Резерв, МесяцНачисления, ВидОперации);
	СтруктураПараметровРасчета = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Организация, Резерв, МесяцНачисления, Регистратор, ВидОперации);
	
	Если ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание
		И ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка Тогда
		ЗаполнитьСпособОтражения(ТаблицаРасчетРезервов, Реквизиты);
	КонецЕсли;
	
	ВычислитьСуммыРезервовТекущегоМесяца(ТаблицаРасчетРезервов, СтруктураПараметровРасчета, Реквизиты, Регистратор);
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание
		Или ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка Тогда
		ЗаполнитьСпособОтражения(ТаблицаРасчетРезервов, Реквизиты);
	КонецЕсли;
	
	СтруктураТаблиц.Вставить("РасчетРезервов", ТаблицаРасчетРезервов);
	
КонецПроцедуры

Процедура РассчитатьСуммыРезерваПоСотрудникам(СтруктураТаблиц, Организация, Резерв, МесяцНачисления, Регистратор, ВидОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураТаблиц.Начисления)
		И Не ЗначениеЗаполнено(СтруктураТаблиц.Взносы)
		И Не ЗначениеЗаполнено(СтруктураТаблиц.РасчетРезервов) Тогда
		СтруктураТаблиц.Вставить("ОценочныеОбязательстваПоСотрудникам", УстановитьТаблицуОценочныеОбязательстваПоСотрудникам());
		Возврат;
	КонецЕсли;
	
	РасчетРезервов = УстановитьТаблицуРасчетРезервов(СтруктураТаблиц.РасчетРезервов);
	ДополнитьНедостающимиКолонками(РасчетРезервов);
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание Тогда
		НакопленныеСуммыКСписанию(РасчетРезервов);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка Тогда
		НакопленныеСуммыКДоначислению(РасчетРезервов);
	КонецЕсли;
	
	ОценочныеОбязательстваПоСотрудникам = УстановитьТаблицуОценочныеОбязательстваПоСотрудникам(СтруктураТаблиц.ОценочныеОбязательстваПоСотрудникам);
	ДополнитьНедостающимиКолонками(ОценочныеОбязательстваПоСотрудникам);
	
	СформироватьТаблицуОценочныеОбязательстваПоСотрудникам(РасчетРезервов,
		ОценочныеОбязательстваПоСотрудникам,
		ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка);
		
	Если ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание
		И ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка Тогда
		ДополнитьОстаткамиЗачисленных(ОценочныеОбязательстваПоСотрудникам, РасчетРезервов);
	КонецЕсли;
	
	РезервыПоОплатеТрудаПереопределяемый.ДополнитьТаблицуОценочныхОбязательствПоСотрудникам(
		ОценочныеОбязательстваПоСотрудникам, Организация, МесяцНачисления);
	
	СтруктураТаблиц.Вставить("ОценочныеОбязательстваПоСотрудникам", ОценочныеОбязательстваПоСотрудникам);
	
КонецПроцедуры

Процедура РассчитатьСуммыРезерва(СтруктураТаблиц, Организация, Резерв, МесяцНачисления, Регистратор, ВидОперации) Экспорт
	
	ОценочныеОбязательстваПоСотрудникам = УстановитьТаблицуОценочныеОбязательстваПоСотрудникам(СтруктураТаблиц.ОценочныеОбязательстваПоСотрудникам);
	ОценочныеОбязательства = УстановитьТаблицуОценочныеОбязательства();
	ДополнитьНедостающимиКолонками(ОценочныеОбязательства);
	
	СформироватьТаблицуОценочныеОбязательства(ОценочныеОбязательстваПоСотрудникам, ОценочныеОбязательства);
	
	СтруктураТаблиц.Вставить("ОценочныеОбязательства", ОценочныеОбязательства);
	
КонецПроцедуры

Процедура СвернутьТаблицуРасчетаРезервов(ТаблицаРасчетаРезервов) Экспорт
	
	ОписаниеТаблицыПриемника = Метаданные.Документы.РезервыПоОплатеТруда.ТабличныеЧасти.РасчетРезервов.Реквизиты;
	
	КолонкиСуммирования = Новый Массив;
	КолонкиГруппировок = Новый Массив;
	Для каждого КолонкаТЗ Из ОписаниеТаблицыПриемника Цикл
		Если КолонкаТЗ.Тип.СодержитТип(Тип("Число")) Тогда
			КолонкиСуммирования.Добавить(КолонкаТЗ.Имя);
		Иначе
			КолонкиГруппировок.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
	КонецЦикла;
	КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ", ");
	КолонкиГруппировок = СтрСоединить(КолонкиГруппировок, ", ");
	
	ТаблицаРасчетаРезервов.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
КонецПроцедуры

#КонецОбласти

Функция НаименованиеНастройки(Источник) Экспорт
	
	ПредставлениеПериодаНастройки = ПредставлениеПериодаНастройки(Источник.НачалоПериода, Источник.КонецПериода);
	НаименованиеПериодаНастройки = "" + Источник.Резерв + " (" + ПредставлениеПериодаНастройки  + ")";
	
	Возврат НаименованиеПериодаНастройки;
	
КонецФункции

Функция ПолноеНаименованиеНастройки(Источник) Экспорт
	
	ПредставлениеПериодаНастройки = ПредставлениеПериодаНастройки(Источник.НачалоПериода, Источник.КонецПериода);
	ПолноеНаименованиеНастройки = "" + Источник.Организация + ": " + Источник.Резерв + " (" + ПредставлениеПериодаНастройки  + ")";
	
	Возврат ПолноеНаименованиеНастройки;
	
КонецФункции

Процедура ЗаполнитьПодробноеОписаниеВидовОперациий(СписокВидовОпераций) Экспорт
	
	НоваяОперация = СписокВидовОпераций.Добавить();
	НоваяОперация.Значение      = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление;
	НоваяОперация.Представление = НСтр("ru = 'Плановое начисление резерва за выбранный период.
	|В учете отражается начисление резерва в соответствии с заданными настройками расчета.';
	|en = 'Scheduled payroll fund accrual for the selected period.
	|The payroll fund accrual is recognized in accordance with the specified calculation settings.'");
	
	НоваяОперация = СписокВидовОпераций.Добавить();
	НоваяОперация.Значение      = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация;
	НоваяОперация.Представление = НСтр("ru = 'Сравнение накопленых и рассчитанных сумм.
	|В учете отражается доначисление или списание резерва, в зависимости от того, что выявлено: недостача или излишек.';
	|en = 'Comparison of accumulated and calculated amounts.
	|Additional accrual or payroll fund write-off is recognized, depending on what is detected: shortage or overage.'");
	
	НоваяОперация = СписокВидовОпераций.Добавить();
	НоваяОперация.Значение      = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание;
	НоваяОперация.Представление = НСтр("ru = 'Списание резервов по выбранным сотрудникам.
	|В учете отражается только списание сумм резерва, например неизрасходованных остатков.';
	|en = 'Payroll fund write-off for the selected employees.
	|Only write-offs of payroll fund amounts, for example, unused balances are recognized.'");
	
	НоваяОперация = СписокВидовОпераций.Добавить();
	НоваяОперация.Значение      = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка;
	НоваяОперация.Представление = НСтр("ru = 'Доначисление резервов по выбранным сотрудникам.
	|В учете отражается только начисление сумм резерв.';
	|en = 'Additional accrual of payroll funds for the selected employees.
	|Only accrual of payroll fund amounts are recognized.'");
	
	РезервыПоОплатеТрудаПереопределяемый.ЗаполнитьПодробноеОписаниеВидовОперациий(СписокВидовОпераций);
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПечатьСправкаРасчет(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ВидУчета = "") Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РезервыПоОплатеТруда_СправкаРасчетРезервовПоОплатеТруда";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ТолькоПросмотр = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиДокументов(МассивОбъектов);
	
	// Описание макета Нормативный
	МакетНормативный = УправлениеПечатью.МакетПечатнойФормы("Документ.РезервыПоОплатеТруда.ПФ_MXL_СправкаРасчетРезервовПоОплатеТрудаНормативный");
	
	// Шапка
	ОбластьМакетаНормативныйШапка          = МакетНормативный.ПолучитьОбласть("Шапка");
	ОбластьМакетаНормативныйШапкаПВР       = МакетНормативный.ПолучитьОбласть("ШапкаПВР");
	ОбластьМакетаНормативныйШапкаПВРНУ     = МакетНормативный.ПолучитьОбласть("ШапкаПВРНУ");
	ОбластьМакетаНормативныйШапкаНакоплено = МакетНормативный.ПолучитьОбласть("ШапкаНакоплено");
	
	// Заголовок таблицы
	ОбластьМакетаНормативныйЗаголовок            = МакетНормативный.ПолучитьОбласть("ЗаголовокТаблицы" + ВидУчета);
	
	// Строка
	ОбластьМакетаНормативныйОсновнаяСтрока                     = МакетНормативный.ПолучитьОбласть("СтрокаОсновная" + ВидУчета);
	ОбластьМакетаНормативныйДополнительнаяСтрокаФизическиеЛица = МакетНормативный.ПолучитьОбласть("СтрокаДополнительнаяФизическиеЛица" + ВидУчета);
	ОбластьМакетаНормативныйДополнительнаяСтрокаСотрудники     = МакетНормативный.ПолучитьОбласть("СтрокаДополнительнаяСотрудники" + ВидУчета);
	
	// Итоги
	ОбластьМакетаНормативныйИтоги                = МакетНормативный.ПолучитьОбласть("Итоги" + ВидУчета);
	
	// Подвал
	ОбластьМакетаНормативныйПодвал = МакетНормативный.ПолучитьОбласть("Подвал");
	
	
	// Описание макета МСФО
	МакетМСФО = УправлениеПечатью.МакетПечатнойФормы("Документ.РезервыПоОплатеТруда.ПФ_MXL_СправкаРасчетРезервовПоОплатеТрудаМСФО");
	
	// Шапка
	ОбластьМакетаМСФОШапка          = МакетМСФО.ПолучитьОбласть("Шапка");
	ОбластьМакетаМСФОШапкаПВР       = МакетМСФО.ПолучитьОбласть("ШапкаПВР");
	ОбластьМакетаМСФОШапкаПВРНУ     = МакетМСФО.ПолучитьОбласть("ШапкаПВРНУ");
	ОбластьМакетаМСФОШапкаНакоплено = МакетМСФО.ПолучитьОбласть("ШапкаНакоплено");
	
	// Заголовок таблицы
	ОбластьМакетаМСФОЗаголовокЛеваяЧасть  = МакетМСФО.ПолучитьОбласть("ЗаголовокТаблицы" + ВидУчета + "|ТаблицаЛеваяЧасть");
	ОбластьМакетаМСФОЗаголовокРасчет2     = МакетМСФО.ПолучитьОбласть("ЗаголовокТаблицы" + ВидУчета + "|ТаблицаПоказатель2");
	ОбластьМакетаМСФОЗаголовокРасчет3     = МакетМСФО.ПолучитьОбласть("ЗаголовокТаблицы" + ВидУчета + "|ТаблицаПоказатель3");
	ОбластьМакетаМСФОЗаголовокРасчет4     = МакетМСФО.ПолучитьОбласть("ЗаголовокТаблицы" + ВидУчета + "|ТаблицаПоказатель4");
	ОбластьМакетаМСФОЗаголовокРасчет5     = МакетМСФО.ПолучитьОбласть("ЗаголовокТаблицы" + ВидУчета + "|ТаблицаПоказатель5");
	ОбластьМакетаМСФОЗаголовокПраваяЧасть = МакетМСФО.ПолучитьОбласть("ЗаголовокТаблицы" + ВидУчета + "|ТабицаПраваяЧасть");
	
	МассивЗаголовковРасчет = Новый Массив;
	МассивЗаголовковРасчет.Добавить(ОбластьМакетаМСФОЗаголовокРасчет2);
	МассивЗаголовковРасчет.Добавить(ОбластьМакетаМСФОЗаголовокРасчет3);
	МассивЗаголовковРасчет.Добавить(ОбластьМакетаМСФОЗаголовокРасчет4);
	МассивЗаголовковРасчет.Добавить(ОбластьМакетаМСФОЗаголовокРасчет5);
	
	// Строка
	ОбластьМакетаМСФООсновнаяСтрокаЛеваяЧасть       = МакетМСФО.ПолучитьОбласть("СтрокаОсновная" + ВидУчета + "|ТаблицаЛеваяЧасть");
	ОбластьМакетаМСФООсновнаяСтрокаРасчет2          = МакетМСФО.ПолучитьОбласть("СтрокаОсновная" + ВидУчета + "|ТаблицаПоказатель2");
	ОбластьМакетаМСФООсновнаяСтрокаРасчет3          = МакетМСФО.ПолучитьОбласть("СтрокаОсновная" + ВидУчета + "|ТаблицаПоказатель3");
	ОбластьМакетаМСФООсновнаяСтрокаРасчет4          = МакетМСФО.ПолучитьОбласть("СтрокаОсновная" + ВидУчета + "|ТаблицаПоказатель4");
	ОбластьМакетаМСФООсновнаяСтрокаРасчет5          = МакетМСФО.ПолучитьОбласть("СтрокаОсновная" + ВидУчета + "|ТаблицаПоказатель5");
	ОбластьМакетаМСФООсновнаяСтрокаПраваяЧасть      = МакетМСФО.ПолучитьОбласть("СтрокаОсновная" + ВидУчета + "|ТабицаПраваяЧасть");
	
	МассивЗначенийОсновнойСтрокиРасчет = Новый Массив;
	МассивЗначенийОсновнойСтрокиРасчет.Добавить(ОбластьМакетаМСФООсновнаяСтрокаРасчет2);
	МассивЗначенийОсновнойСтрокиРасчет.Добавить(ОбластьМакетаМСФООсновнаяСтрокаРасчет3);
	МассивЗначенийОсновнойСтрокиРасчет.Добавить(ОбластьМакетаМСФООсновнаяСтрокаРасчет4);
	МассивЗначенийОсновнойСтрокиРасчет.Добавить(ОбластьМакетаМСФООсновнаяСтрокаРасчет5);
	
	ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаЛеваяЧасть  = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяФизическиеЛица" + ВидУчета + "|ТаблицаЛеваяЧасть");
	ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет2     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяФизическиеЛица" + ВидУчета + "|ТаблицаПоказатель2");
	ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет3     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяФизическиеЛица" + ВидУчета + "|ТаблицаПоказатель3");
	ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет4     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяФизическиеЛица" + ВидУчета + "|ТаблицаПоказатель4");
	ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет5     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяФизическиеЛица" + ВидУчета + "|ТаблицаПоказатель5");
	ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаПраваяЧасть = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяФизическиеЛица" + ВидУчета + "|ТабицаПраваяЧасть");
	
	МассивЗначенийДополнительнойСтрокиФизическиеЛицаРасчет = Новый Массив;
	МассивЗначенийДополнительнойСтрокиФизическиеЛицаРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет2);
	МассивЗначенийДополнительнойСтрокиФизическиеЛицаРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет3);
	МассивЗначенийДополнительнойСтрокиФизическиеЛицаРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет4);
	МассивЗначенийДополнительнойСтрокиФизическиеЛицаРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаРасчет5);
	
	ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиЛеваяЧасть  = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяСотрудники" + ВидУчета + "|ТаблицаЛеваяЧасть");
	ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет2     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяСотрудники" + ВидУчета + "|ТаблицаПоказатель2");
	ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет3     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяСотрудники" + ВидУчета + "|ТаблицаПоказатель3");
	ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет4     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяСотрудники" + ВидУчета + "|ТаблицаПоказатель4");
	ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет5     = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяСотрудники" + ВидУчета + "|ТаблицаПоказатель5");
	ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиПраваяЧасть = МакетМСФО.ПолучитьОбласть("СтрокаДополнительнаяСотрудники" + ВидУчета + "|ТабицаПраваяЧасть");
	
	МассивЗначенийДополнительнойСтрокиСотрудникиРасчет = Новый Массив;
	МассивЗначенийДополнительнойСтрокиСотрудникиРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет2);
	МассивЗначенийДополнительнойСтрокиСотрудникиРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет3);
	МассивЗначенийДополнительнойСтрокиСотрудникиРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет4);
	МассивЗначенийДополнительнойСтрокиСотрудникиРасчет.Добавить(ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиРасчет5);
	
	// Итоги
	ОбластьМакетаМСФОИтогиЛеваяЧасть    = МакетМСФО.ПолучитьОбласть("Итоги" + ВидУчета + "|ТаблицаЛеваяЧасть");
	ОбластьМакетаМСФОИтогиСтрокаРасчет2 = МакетМСФО.ПолучитьОбласть("Итоги" + ВидУчета + "|ТаблицаПоказатель2");
	ОбластьМакетаМСФОИтогиСтрокаРасчет3 = МакетМСФО.ПолучитьОбласть("Итоги" + ВидУчета + "|ТаблицаПоказатель3");
	ОбластьМакетаМСФОИтогиСтрокаРасчет4 = МакетМСФО.ПолучитьОбласть("Итоги" + ВидУчета + "|ТаблицаПоказатель4");
	ОбластьМакетаМСФОИтогиСтрокаРасчет5 = МакетМСФО.ПолучитьОбласть("Итоги" + ВидУчета + "|ТаблицаПоказатель5");
	ОбластьМакетаМСФОИтогиПраваяЧасть   = МакетМСФО.ПолучитьОбласть("Итоги" + ВидУчета + "|ТабицаПраваяЧасть");
	
	МассивЗначенийСтрокиИтоги = Новый Массив;
	МассивЗначенийСтрокиИтоги.Добавить(ОбластьМакетаМСФОИтогиСтрокаРасчет2);
	МассивЗначенийСтрокиИтоги.Добавить(ОбластьМакетаМСФОИтогиСтрокаРасчет3);
	МассивЗначенийСтрокиИтоги.Добавить(ОбластьМакетаМСФОИтогиСтрокаРасчет4);
	МассивЗначенийСтрокиИтоги.Добавить(ОбластьМакетаМСФОИтогиСтрокаРасчет5);
	
	// Подвал
	ОбластьМакетаМСФОПодвал = МакетМСФО.ПолучитьОбласть("Подвал");

	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		ДанныеДокумента = ДанныеПечати.Значение;
		
		Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание
			Или ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(ВидУчета) И Не ДанныеДокумента.ФормироватьРезервБУ)
			Или (ЗначениеЗаполнено(ВидУчета) И Не ДанныеДокумента.ФормироватьРезервНУ) Тогда
			Продолжить;
		КонецЕсли;
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если ДанныеДокумента.ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация
			И ((Не ЗначениеЗаполнено(ВидУчета) И ДанныеДокумента.НормативныйМетодБУ)
				Или (ЗначениеЗаполнено(ВидУчета) И ДанныеДокумента.НормативныйМетодНУ)) Тогда
			
			ОбластьМакетаНормативныйШапка.Параметры.Заполнить(ДанныеДокумента);
			ДокументРезультат.Вывести(ОбластьМакетаНормативныйШапка);
			
			Если ВидУчета  = "НУ" 
				И ДанныеДокумента.ОграничиватьНачислениеПредельнойСуммойНУ Тогда
				ОбластьМакетаНормативныйШапкаПВРНУ.Параметры.Заполнить(ДанныеДокумента);
				ДокументРезультат.Вывести(ОбластьМакетаНормативныйШапкаПВРНУ);
			КонецЕсли;
			
			Если ВидУчета  = "" 
				И ДанныеДокумента.ОграничиватьНачислениеПредельнойСуммойБУ Тогда
				ОбластьМакетаНормативныйШапкаПВР.Параметры.Заполнить(ДанныеДокумента);
				ДокументРезультат.Вывести(ОбластьМакетаНормативныйШапкаПВР);
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьМакетаНормативныйЗаголовок);
			
			Для каждого ДанныеСотрудника Из ДанныеДокумента.ТабличнаяЧастьДокумента Цикл
				
				МассивВыводимыхОбластей = Новый Массив;
				Если ДанныеСотрудника.ДополнительнаяСтрокаСотрудники Тогда
					ОбластьМакетаНормативныйСтрока = ОбластьМакетаНормативныйДополнительнаяСтрокаСотрудники;
				ИначеЕсли ДанныеСотрудника.ДополнительнаяСтрокаФизическиеЛица Тогда
					ОбластьМакетаНормативныйСтрока = ОбластьМакетаНормативныйДополнительнаяСтрокаФизическиеЛица;
				Иначе
					ОбластьМакетаНормативныйСтрока = ОбластьМакетаНормативныйОсновнаяСтрока;
				КонецЕсли;
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаНормативныйСтрока);
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаНормативныйИтоги);
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаНормативныйПодвал);
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					ДокументРезультат.Вывести(ОбластьМакетаНормативныйЗаголовок);
					
					ОбластьМакетаНормативныйСтрока = ОбластьМакетаНормативныйОсновнаяСтрока;
				КонецЕсли;
				
				ОбластьМакетаНормативныйСтрока.Параметры.Заполнить(ДанныеСотрудника);
				
				ДокументРезультат.Вывести(ОбластьМакетаНормативныйСтрока);
				
			КонецЦикла;
			
			ОбластьМакетаНормативныйИтоги.Параметры.Заполнить(ДанныеДокумента);
			ДокументРезультат.Вывести(ОбластьМакетаНормативныйИтоги);
			
			ОбластьМакетаНормативныйПодвал.Параметры.Заполнить(ДанныеДокумента);
			ДокументРезультат.Вывести(ОбластьМакетаНормативныйПодвал);
			
		Иначе
			
			ОбластьМакетаМСФОШапка.Параметры.Заполнить(ДанныеДокумента);
			ДокументРезультат.Вывести(ОбластьМакетаМСФОШапка);
			
			Если ВидУчета  = "НУ" 
				И ДанныеДокумента.ОграничиватьНачислениеПредельнойСуммойНУ Тогда
				ОбластьМакетаМСФОШапкаПВРНУ.Параметры.Заполнить(ДанныеДокумента);
				ДокументРезультат.Вывести(ОбластьМакетаМСФОШапкаПВРНУ);
			КонецЕсли;
			
			Если ВидУчета  = "" 
				И ДанныеДокумента.ОграничиватьНачислениеПредельнойСуммойБУ Тогда
				ОбластьМакетаМСФОШапкаПВР.Параметры.Заполнить(ДанныеДокумента);
				ДокументРезультат.Вывести(ОбластьМакетаМСФОШапкаПВР);
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьМакетаМСФОЗаголовокЛеваяЧасть);
			Для ИндексПоказателя = 0 По ДанныеДокумента.КоличествоПоказателей - 2 Цикл
				ДокументРезультат.Присоединить(МассивЗаголовковРасчет.Получить(ИндексПоказателя));
			КонецЦикла;
			ДокументРезультат.Присоединить(ОбластьМакетаМСФОЗаголовокПраваяЧасть);
			
			Для каждого ДанныеСотрудника Из ДанныеДокумента.ТабличнаяЧастьДокумента Цикл
				
				МассивВыводимыхОбластей = Новый Массив;
				Если ДанныеСотрудника.ДополнительнаяСтрокаСотрудники Тогда
					ОбластьМакетаМСФОСтрокаЛеваяЧасть   = ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиЛеваяЧасть;
					ОбластьМакетаМСФОСтрокаПраваяЧасть = ОбластьМакетаМСФОДополнительнаяСтрокаСотрудникиПраваяЧасть;
					МассивЗначенийСтрокиРасчет     = МассивЗначенийДополнительнойСтрокиСотрудникиРасчет;
				ИначеЕсли ДанныеСотрудника.ДополнительнаяСтрокаФизическиеЛица Тогда
					ОбластьМакетаМСФОСтрокаЛеваяЧасть   = ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаЛеваяЧасть;
					ОбластьМакетаМСФОСтрокаПраваяЧасть = ОбластьМакетаМСФОДополнительнаяСтрокаФизическиеЛицаПраваяЧасть;
					МассивЗначенийСтрокиРасчет     = МассивЗначенийДополнительнойСтрокиФизическиеЛицаРасчет;
				Иначе
					ОбластьМакетаМСФОСтрокаЛеваяЧасть  = ОбластьМакетаМСФООсновнаяСтрокаЛеваяЧасть;
					ОбластьМакетаМСФОСтрокаПраваяЧасть = ОбластьМакетаМСФООсновнаяСтрокаПраваяЧасть;
					МассивЗначенийСтрокиРасчет     = МассивЗначенийОсновнойСтрокиРасчет;
				КонецЕсли;
				
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаМСФОСтрокаЛеваяЧасть);
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаМСФОИтогиЛеваяЧасть);
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаМСФОПодвал);
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					ДокументРезультат.Вывести(ОбластьМакетаМСФОЗаголовокЛеваяЧасть);
					Для ИндексПоказателя = 0 По ДанныеДокумента.КоличествоПоказателей - 2 Цикл
						ДокументРезультат.Присоединить(МассивЗаголовковРасчет.Получить(ИндексПоказателя));
					КонецЦикла;
					ДокументРезультат.Присоединить(ОбластьМакетаМСФОЗаголовокПраваяЧасть);
					
					ОбластьМакетаМСФОСтрокаЛеваяЧасть = ОбластьМакетаМСФООсновнаяСтрокаЛеваяЧасть;
				КонецЕсли;
				
				ОбластьМакетаМСФОСтрокаЛеваяЧасть.Параметры.Заполнить(ДанныеСотрудника);
				
				ДокументРезультат.Вывести(ОбластьМакетаМСФОСтрокаЛеваяЧасть);
				
				Для ИндексПоказателя = 0 По ДанныеДокумента.КоличествоПоказателей - 2 Цикл
					ОбластьМакетаМСФОСтрокаРасчет = МассивЗначенийСтрокиРасчет.Получить(ИндексПоказателя);
					ОбластьМакетаМСФОСтрокаРасчет.Параметры.Заполнить(ДанныеСотрудника);
					ДокументРезультат.Присоединить(ОбластьМакетаМСФОСтрокаРасчет);
				КонецЦикла;
				ОбластьМакетаМСФОСтрокаПраваяЧасть.Параметры.Заполнить(ДанныеСотрудника);
				ДокументРезультат.Присоединить(ОбластьМакетаМСФОСтрокаПраваяЧасть);
				
			КонецЦикла;
			
			ОбластьМакетаМСФОИтогиЛеваяЧасть.Параметры.Заполнить(ДанныеДокумента);
			ДокументРезультат.Вывести(ОбластьМакетаМСФОИтогиЛеваяЧасть);
			Для ИндексПоказателя = 0 По ДанныеДокумента.КоличествоПоказателей - 2 Цикл
				ОбластьМакетаМСФОСтрокаИтоги = МассивЗначенийСтрокиИтоги.Получить(ИндексПоказателя);
				ОбластьМакетаМСФОСтрокаИтоги.Параметры.Заполнить(ДанныеДокумента);
				ДокументРезультат.Присоединить(ОбластьМакетаМСФОСтрокаИтоги);
			КонецЦикла;
			ОбластьМакетаМСФОИтогиПраваяЧасть.Параметры.Заполнить(ДанныеДокумента);
			ДокументРезультат.Присоединить(ОбластьМакетаМСФОИтогиПраваяЧасть);
			
			ОбластьМакетаМСФОПодвал.Параметры.Заполнить(ДанныеДокумента);
			ДокументРезультат.Вывести(ОбластьМакетаМСФОПодвал);
			
		КонецЕсли;
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Ссылка);
				
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция НоваяТаблицаПоказателейРасчетаРезервов() Экспорт
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("ВидРезерваПоОплатеТруда",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРезервовПоОплатеТруда"));
	ТаблицаПоказателей.Колонки.Добавить("КраткоеНаименование",    Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаПоказателей.Колонки.Добавить("Идентификатор",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаПоказателей.Колонки.Добавить("Формула",                Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

#Область ВидыРасчетовРезервовПоОплатеТруда

Функция ВидыРасчетовРезервовПоОплатеТрудаЭлементПоОписанию(ОписаниеЭлемента) Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.ВидыРасчетовРезервовПоОплатеТрудаЭлементПоОписанию(ОписаниеЭлемента);
	
КонецФункции

Функция ВидыРасчетовРезервовПоОплатеТрудаНовыйЭлементПоОписанию(ОписаниеЭлемента) Экспорт
	
	ВидРасчетаРезерваОбъект = Справочники.ВидыРасчетовРезервовПоОплатеТруда.СоздатьЭлемент();
	ВидРасчетаРезерваОбъект.Организация          = ОписаниеЭлемента.Организация;
	ВидРасчетаРезерваОбъект.Резерв               = ОписаниеЭлемента.Резерв;
	ВидРасчетаРезерваОбъект.ВидРасчета           = ОписаниеЭлемента.ВидРасчета;
	ВидРасчетаРезерваОбъект.Наименование         = ОписаниеЭлемента.ВидРасчета;
	ВидРасчетаРезерваОбъект.ЭтоРасчетОтпуска     = ОписаниеЭлемента.ЭтоРасчетОтпуска;

	Возврат ВидРасчетаРезерваОбъект;
	
КонецФункции

Процедура ВидыРасчетовРезервовПоОплатеТрудаОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ВидыРасчетовРезервовПоОплатеТрудаОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ВидыРасчетовРезервовПоОплатеТрудаПередЗаписью(Объект, Отказ) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ВидыРасчетовРезервовПоОплатеТрудаПередЗаписью(Объект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиРасчетаРезервовПоОплатеТруда

Процедура НастройкиРасчетаРезервовПоОплатеТрудаОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.НастройкиРасчетаРезервовПоОплатеТрудаОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты)
	
КонецПроцедуры

Функция ПлановыеНачисленияРезервов(Организация, Резерв, Период) Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.ПлановыеНачисленияРезервов(Организация, Резерв, Период);
	
КонецФункции

Функция НастройкаРезервов(Организация, Резерв, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Резерв",      Резерв);
	Запрос.УстановитьПараметр("Период",      Период);
	
	Запрос.Текст = РезервыПоОплатеТрудаВнутренний.ТекстЗапросаНастройкаРезервов();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураНастроекРезервов = РезервыПоОплатеТруда.СтруктураНастроекРезервов();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроекРезервов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураНастроекРезервов;
	
КонецФункции

Функция ОписаниеНастройкиДействующихРезервов() Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.ОписаниеНастройкиДействующихРезервов();
	
КонецФункции

Функция НастройкиДействующихРезервов(Организация, Период, УчитыватьПериодВыплаты = Ложь) Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.НастройкиДействующихРезервов(Организация, Период, УчитыватьПериодВыплаты);
	
КонецФункции

Функция ВыборкаДействующихНастроек(Организация, Период, УчитыватьПериодВыплаты = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("Период",                 Период);
	Запрос.УстановитьПараметр("УчитыватьПериодВыплаты", УчитыватьПериодВыплаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва КАК ВидРезерва,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода КАК НачалоПериода,
	|	НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода КАК КонецПериода,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПериодВыплаты КАК ПериодВыплаты
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА &УчитыватьПериодВыплаты
	|				ТОГДА &Период МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.ПериодВыплаты, ГОД) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.ПериодВыплаты, ГОД)
	|			ИНАЧЕ &Период МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода, МЕСЯЦ)
	|		КОНЕЦ
	|	И НЕ НастройкиРасчетаРезервовПоОплатеТруда.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ИсключенияИзРасчетнойБазы() Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.ИсключенияИзРасчетнойБазы();
	
КонецФункции

#КонецОбласти

Процедура ПроверитьИспользованиеОбмена(ОбменИспользуется, Организация) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ПроверитьИспользованиеОбмена(ОбменИспользуется, Организация);
	РезервыПоОплатеТрудаПереопределяемый.ПроверитьИспользованиеОбмена(ОбменИспользуется, Организация);
	
Конецпроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НачислениеРезерва

Процедура ДобавитьКлючСортировкиТаблицыРезервов(ПараметрыРасчетаОбязательств, Реквизиты)
	
	СортируемыеКоллекции = Новый Массив;
	
	Коллекция = СотрудникиФормы.СортируемаяКоллекцияСотрудников(ПараметрыРасчетаОбязательств);
	Коллекция.ОписаниеКоллекции.Псевдоним                    = "Коллекция";
	Коллекция.ОписаниеКоллекции.ИмяПоляСотрудник             = "Сотрудник";
	Коллекция.ОписаниеКоллекции.ИмяПоляПодразделение         = "Подразделение";
	Коллекция.ОписаниеКоллекции.ЗначениеПоляПериод           = Реквизиты.Период;
	Коллекция.ОписаниеКоллекции.ДополнительныеПоляСортировки = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда 
		СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "МестоВСтруктуреПредприятия",
			Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	КонецЕсли;
		
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "СпособОтраженияЗарплатыВБухУчете",
		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "СтатьяФинансирования",
		Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "ОблагаетсяЕНВД",
		Новый ОписаниеТипов("Булево"));
	
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "КорректировкаОбязательств",
			Новый ОписаниеТипов("Булево"));
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	НастройкиСортировки = СотрудникиФормы.НастройкиСортировкиПоУмолчанию();
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормы.ПорядокСтрокКоллекцийСотрудников(СортируемыеКоллекции, НастройкиСортировки);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыРасчетаОбязательств.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
		
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
		
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ПараметрыРасчетаОбязательств[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;	
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицуОценочныеОбязательства(ТаблицаОбязательств, ОценочныеОбязательства) Экспорт
	
	ДополнитьНедостающимиКолонками(ОценочныеОбязательства);
	ТаблицаРезервов = ТаблицаОбязательств.Скопировать(Новый Структура("КорректировкаОбязательств", Ложь));
	ДополнитьНедостающимиКолонками(ТаблицаРезервов);
	
	ТаблицаРезервов.Свернуть("МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД",	
	"СуммаРезерва,СуммаРезерваНУ,СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ТаблицаРезервов.Сортировать("МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД, СуммаРезерва, СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		
		Если СтрокаТаблицы.СуммаРезерва = 0
			И СтрокаТаблицы.СуммаРезерваНУ = 0
			И (СтрокаТаблицы.СуммаРезерва - СтрокаТаблицы.СуммаРезерваНУ) = 0
			И СтрокаТаблицы.СуммаРезерваСтраховыхВзносов = 0
			И СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ = 0
			И (СтрокаТаблицы.СуммаРезерваСтраховыхВзносов - СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ) = 0
			И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи = 0
			И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ = 0
			И (СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи - СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ) = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ОценочныеОбязательства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	ОценочныеОбязательства.Сортировать("МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухучете, СтатьяФинансирования, ОблагаетсяЕНВД");
	
КонецПроцедуры

Процедура СформироватьТаблицуОценочныеОбязательстваПоСотрудникам(ТаблицаОбязательств, ОценочныеОбязательстваПоСотрудникам, Очищать = Истина) Экспорт
	
	ДополнитьНедостающимиКолонками(ОценочныеОбязательстваПоСотрудникам);
	ТаблицаРезервов =  ТаблицаОбязательств.Скопировать();
	ДополнитьНедостающимиКолонками(ТаблицаРезервов);
	
	ТаблицаРезервов.Сортировать("Порядок");
	
	ТаблицаРезервов.Свернуть("Сотрудник, МестоВСтруктуреПредприятия, Подразделение,
	|СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД, КорректировкаОбязательств",
	"СуммаРезерва,СуммаРезерваНУ,СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,
	|СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ");
	
	Отбор = Новый Структура("Сотрудник, МестоВСтруктуреПредприятия, Подразделение,
		|СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД, КорректировкаОбязательств");
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ОценочныеОбязательстваПоСотрудникам Цикл
		Если Не (СтрокаТаблицы.ФиксРасчет Или СтрокаТаблицы.ФиксЗаполнение) Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗаписьМассива Из МассивСтрокКУдалению Цикл
		ОценочныеОбязательстваПоСотрудникам.Удалить(ЗаписьМассива);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		
		Если Очищать
			И (СтрокаТаблицы.СуммаРезерва = 0
				И СтрокаТаблицы.СуммаРезерваНУ = 0
				И (СтрокаТаблицы.СуммаРезерва - СтрокаТаблицы.СуммаРезерваНУ) = 0
				И СтрокаТаблицы.СуммаРезерваСтраховыхВзносов = 0
				И СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ = 0
				И (СтрокаТаблицы.СуммаРезерваСтраховыхВзносов - СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ) = 0
				И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи = 0
				И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ = 0
				И (СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи - СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ) = 0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		МассивСтрок = ОценочныеОбязательстваПоСотрудникам.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОценочныеОбязательстваПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСуммыРезерва

Процедура ВычислитьСуммыРезервовТекущегоМесяца(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты, Регистратор) Экспорт
	
	НачисленоРезервов                    = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваИсчислено");
	НачисленоВзносовРезервов             = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваСтраховыхВзносовИсчислено");
	НачисленоФССНесчастныеСлучаиРезервов = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваФССНесчастныеСлучаиИсчислено");
	ВсегоНачисленоРезервов               = НачисленоРезервов + НачисленоВзносовРезервов + НачисленоФССНесчастныеСлучаиРезервов;
	
	НачисленоРезервовНУ                    = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваИсчисленоНУ");
	НачисленоВзносовРезервовНУ             = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваСтраховыхВзносовИсчисленоНУ");
	НачисленоФССНесчастныеСлучаиРезервовНУ = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
	ВсегоНачисленоРезервовНУ               = НачисленоРезервовНУ + НачисленоВзносовРезервовНУ + НачисленоФССНесчастныеСлучаиРезервовНУ;
	
	СтруктураПараметровРасчета.Вставить("НачисленоРезервов",                      НачисленоРезервов);
	СтруктураПараметровРасчета.Вставить("НачисленоВзносовРезервов",               НачисленоВзносовРезервов);
	СтруктураПараметровРасчета.Вставить("НачисленоФССНесчастныеСлучаиРезервов",   НачисленоФССНесчастныеСлучаиРезервов);
	СтруктураПараметровРасчета.Вставить("ВсегоНачисленоРезервов",                 ВсегоНачисленоРезервов);
	СтруктураПараметровРасчета.Вставить("НачисленоРезервовНУ",                    НачисленоРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НачисленоВзносовРезервовНУ",             НачисленоВзносовРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НачисленоФССНесчастныеСлучаиРезервовНУ", НачисленоФССНесчастныеСлучаиРезервовНУ);
	СтруктураПараметровРасчета.Вставить("ВсегоНачисленоРезервовНУ",               ВсегоНачисленоРезервовНУ);
	
	ДополнитьПараметрыРасчетаНакопленнымиРезервами(СтруктураПараметровРасчета);
	
	НакопленныеРезервыПереведенныхСотрудников(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
	
	Если СтруктураПараметровРасчета.Начисление Тогда
		СуммыРезервовТекущегоМесяцаНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты);
		Если СтруктураПараметровРасчета.ФормироватьРезервНУ Тогда
			СуммыРезервовТекущегоМесяцаНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты, "НУ");
		КонецЕсли;
	КонецЕсли;
	ДополнитьТаблицуНакопленнымиРезервами(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Регистратор);
	
	Если НЕ СтруктураПараметровРасчета.Списание И НЕ СтруктураПараметровРасчета.Корректировка Тогда
		СуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
		Если СтруктураПараметровРасчета.Инвентаризация Или СтруктураПараметровРасчета.ФормироватьРезервНУ Тогда
			СуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, "НУ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НормативныйМетод

Процедура СуммыРезервовТекущегоМесяцаНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты, ВидУчета = "")
	
	РассчитыватьНормативнымМетодомБУ = СтруктураПараметровРасчета.ФормироватьРезервБУ
		И СтруктураПараметровРасчета.НормативныйМетодБУ
		И ВидУчета = "";
		
	РассчитыватьНормативнымМетодомНУ = СтруктураПараметровРасчета.ФормироватьРезервНУ
		И СтруктураПараметровРасчета.НормативныйМетодНУ
		И ВидУчета = "НУ";
	
	Если РассчитыватьНормативнымМетодомБУ Или РассчитыватьНормативнымМетодомНУ Тогда
		
		ФиксированнаяСумма = 0;
		Если ПараметрыРасчетаОбязательств.Колонки.Найти("ФиксРасчет") <> Неопределено Тогда
			НаборФиксированныхСтрок = ПараметрыРасчетаОбязательств.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
			ФиксированнаяСумма = ИтогПоКолонкеМассиваСтрок(НаборФиксированныхСтрок,"СуммаРезерва" + ВидУчета)
				+ ИтогПоКолонкеМассиваСтрок(НаборФиксированныхСтрок,"СуммаРезерваСтраховыхВзносов" + ВидУчета)
				+ ИтогПоКолонкеМассиваСтрок(НаборФиксированныхСтрок,"СуммаРезерваФССНесчастныеСлучаи" + ВидУчета);
			НаборСтрок = ПараметрыРасчетаОбязательств.НайтиСтроки(Новый Структура("ФиксРасчет", Ложь));
		Иначе
			НаборСтрок = ПараметрыРасчетаОбязательств;
		КонецЕсли;
		
		ПредельнаяВеличинаОтчислений = СтруктураПараметровРасчета["ПредельнаяВеличинаОтчисленийОрганизации" + ВидУчета];
		Если (РассчитыватьНормативнымМетодомБУ и СтруктураПараметровРасчета.ОграничиватьНачислениеПредельнойСуммойБУ)
			Или (РассчитыватьНормативнымМетодомНУ и СтруктураПараметровРасчета.ОграничиватьНачислениеПредельнойСуммойНУ) Тогда
			СуммаКорректировкиДоступногоОстатка = СуммаОстаткаУволенных(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств, ВидУчета);
			ПредельнаяВеличинаОтчислений = ПредельнаяВеличинаОтчислений + СуммаКорректировкиДоступногоОстатка;
		КонецЕсли;
		
		Если ((РассчитыватьНормативнымМетодомБУ и СтруктураПараметровРасчета.ОграничиватьНачислениеПредельнойСуммойБУ)
			Или (РассчитыватьНормативнымМетодомНУ и СтруктураПараметровРасчета.ОграничиватьНачислениеПредельнойСуммойНУ))
			И СтруктураПараметровРасчета["ВсегоНакопленоРезервов" + ВидУчета] + СтруктураПараметровРасчета["ВсегоНачисленоРезервов" + ВидУчета] > ПредельнаяВеличинаОтчислений Тогда
			
			Разница = Мин(СтруктураПараметровРасчета["ВсегоНачисленоРезервов" + ВидУчета], ПредельнаяВеличинаОтчислений)
				- ФиксированнаяСумма;
				
			Если Разница <> 0 Тогда
				
				ВсегоНачисленоРезервов = СтруктураПараметровРасчета["НачисленоРезервов" + ВидУчета]
					+ СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета]
					+ СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета];
				
				ДоляВзносов =  ?(ВсегоНачисленоРезервов = 0, 0, СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета]/ВсегоНачисленоРезервов);
				ВзносыКНачислению  = Окр(Разница*ДоляВзносов, 2);
				
				ДоляФССНесчастныеСлучаи = ?(ВсегоНачисленоРезервов = 0, 0, СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета]/ВсегоНачисленоРезервов);
				
				ФССНесчастныеСлучаиКНачислению  = Окр(Разница*ДоляФССНесчастныеСлучаи, 2);
				
				РезервКНачислению = Разница - ВзносыКНачислению - ФССНесчастныеСлучаиКНачислению;
				
				РаспределитьСуммуПоКолонкеТаблицы(РезервКНачислению,
					НаборСтрок,
					"СуммаРезерва" + ВидУчета,
					"СуммаРезерваИсчислено" + ВидУчета);
				РаспределитьСуммуПоКолонкеТаблицы(ВзносыКНачислению,
					НаборСтрок,
					"СуммаРезерваСтраховыхВзносов" + ВидУчета,
					"СуммаРезерваСтраховыхВзносовИсчислено" + ВидУчета);
				РаспределитьСуммуПоКолонкеТаблицы(ФССНесчастныеСлучаиКНачислению,
					НаборСтрок,
					"СуммаРезерваФССНесчастныеСлучаи" + ВидУчета,
					"СуммаРезерваФССНесчастныеСлучаиИсчислено" + ВидУчета);
				
			Иначе
				Для Каждого СтрокаНабора Из НаборСтрок Цикл
					СтрокаНабора["СуммаРезерва" + ВидУчета] = 0;
					СтрокаНабора["СуммаРезерваСтраховыхВзносов" + ВидУчета] = 0;
					СтрокаНабора["СуммаРезерваФССНесчастныеСлучаи" + ВидУчета] = 0;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураПараметровРасчета["НачисленоРезервов" + ВидУчета],
				НаборСтрок,
				"СуммаРезерва" + ВидУчета,
				"СуммаРезерваИсчислено" + ВидУчета);
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета],
				НаборСтрок,
				"СуммаРезерваСтраховыхВзносов" + ВидУчета,
				"СуммаРезерваСтраховыхВзносовИсчислено" + ВидУчета);
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета],
				НаборСтрок,
				"СуммаРезерваФССНесчастныеСлучаи" + ВидУчета,
				"СуммаРезерваФССНесчастныеСлучаиИсчислено" + ВидУчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуНакопленнымиРезервами(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Регистратор)
	
	АрхивныйРасчет = СтруктураПараметровРасчета.АрхивныйРасчет;
	
	РассчитыватьНормативнымМетодомБУ = СтруктураПараметровРасчета.ФормироватьРезервБУ
		И СтруктураПараметровРасчета.НормативныйМетодБУ;
		
	РассчитыватьНормативнымМетодомНУ = СтруктураПараметровРасчета.ФормироватьРезервНУ
		И СтруктураПараметровРасчета.НормативныйМетодНУ;
		
	РасчетРезерваОтпусков =
		СтруктураПараметровРасчета.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск
		Или АрхивныйРасчет;
		
	Если РассчитыватьНормативнымМетодомБУ
		ИЛИ РассчитыватьНормативнымМетодомНУ
		ИЛИ СтруктураПараметровРасчета.Инвентаризация
		ИЛИ СтруктураПараметровРасчета.Списание
		ИЛИ СтруктураПараметровРасчета.Корректировка Тогда
		
		ТолькоНУ = НЕ (СтруктураПараметровРасчета.Списание Или СтруктураПараметровРасчета.Корректировка)
			И (НЕ СтруктураПараметровРасчета.ФормироватьРезервБУ 
				И СтруктураПараметровРасчета.ФормироватьРезервНУ);
		
		ТаблицаОстатков = ПолучитьВходящиеОстатки(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств, Истина);
		
		ПараметрыРасчетаОбязательств.Колонки.Добавить("СтатьяФинансированияОстатков",Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
		ПараметрыРасчетаОбязательств.Колонки.Добавить("КоэффициентРавномерности",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)));
		ПараметрыРасчетаОбязательств.ЗаполнитьЗначения(1, "КоэффициентРавномерности");
		КолонкаРавномерногоРаспределения = "КоэффициентРавномерности";
		
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОстатков,"Сотрудник", Истина);
		
		Для Каждого Сотрудник Из Сотрудники Цикл
			
			СтруктураОтбора = Новый Структура("Сотрудник", Сотрудник);
			
			ТаблицаОстатковСотрудника = ТаблицаОстатков.Скопировать(СтруктураОтбора);
			ТаблицаОстатковСотрудника.Сортировать("СтатьяФинансирования");
			
			СтруктураОтбора = Новый Структура("Сотрудник, ФиксЗаполнение, ФиксРасчет", Сотрудник, Ложь, Ложь);
			МассивСтрок = ПараметрыРасчетаОбязательств.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока = МассивСтрок[0];
			
			Списывать = (ТекущаяСтрока.Уволен = Истина И РасчетРезерваОтпусков)
				ИЛИ ТекущаяСтрока.Перемещен = Истина;
				
			КоличествоСтрокОстатков = ТаблицаОстатковСотрудника.Количество();
			КоличествоСтрокРасчета  = МассивСтрок.Количество();
			
			СписокКолонок = "Зачислен,КоэффициентРавномерности,МестоВСтруктуреПредприятия,ОблагаетсяЕНВД,
								|Организация,Перемещен,Подразделение,Регистратор,СреднийЗаработок,Сотрудник,ФизическоеЛицо,
								|СпособОтраженияЗарплатыВБухучете,СтатьяФинансирования,Уволен,
								|ТекущаяСтавкаСтраховыхВзносов,ТекущаяСтавкаФССНесчастныеСлучаи";
			
			МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКолонок,,Истина, Истина);
			
			МассивОбнуляемыхКолонок = Новый Массив;
			КопируемыеКолонки = "";
			Для Каждого Колонка Из ПараметрыРасчетаОбязательств.Колонки Цикл
				Если МассивИменКолонок.Найти(Колонка.Имя) = Неопределено Тогда
					МассивОбнуляемыхКолонок.Добавить(Колонка.Имя);
				Иначе
					КопируемыеКолонки = КопируемыеКолонки + ?(ПустаяСтрока(КопируемыеКолонки), "", ",") + Колонка.Имя
				КонецЕсли;
			КонецЦикла;
			
			Если МассивСтрок.Количество() = 1 Тогда
				
				Для ИндексСтроки = 1 По КоличествоСтрокОстатков - 1 Цикл
					НоваяСтрока = ПараметрыРасчетаОбязательств.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, КопируемыеКолонки);
					Для Каждого ОбнуляемаяКолонка Из МассивОбнуляемыхКолонок Цикл
						НоваяСтрока[ОбнуляемаяКолонка] = 0;
					КонецЦикла;
					МассивСтрок.Добавить(НоваяСтрока);
				КонецЦикла;
				
				Для ИндексСтроки = 0 По КоличествоСтрокОстатков - 1 Цикл
					
					ТекущаяСтрока        = МассивСтрок[ИндексСтроки];
					ТекущаяСтрокаОстаток = ТаблицаОстатковСотрудника[ИндексСтроки];
					
					Если НЕ ТолькоНУ Тогда
						ТекущаяСтрока.СуммаРезерваНакоплено =                    ТекущаяСтрокаОстаток.СуммаРезерваОстаток;
						ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакоплено =    ТекущаяСтрокаОстаток.СуммаРезерваСтраховыхВзносовОстаток;
						ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакоплено = ТекущаяСтрокаОстаток.СуммаРезерваФССНесчастныеСлучаиОстаток;
					КонецЕсли;
					ТекущаяСтрока.СуммаРезерваНакопленоНУ =                      ТекущаяСтрокаОстаток.СуммаРезерваОстатокНУ;
					ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакопленоНУ =      ТекущаяСтрокаОстаток.СуммаРезерваСтраховыхВзносовОстатокНУ;
					ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ =   ТекущаяСтрокаОстаток.СуммаРезерваФССНесчастныеСлучаиОстатокНУ;
					
					ТекущаяСтрока.СтатьяФинансированияОстатков = ТекущаяСтрокаОстаток.СтатьяФинансирования;
					
				КонецЦикла;
				
			Иначе
				
				Для НомерСтрокиОстатка = 1 По КоличествоСтрокОстатков - 1 Цикл
					Для НомерСтрокиРасчета = 1 По КоличествоСтрокРасчета Цикл
						НоваяСтрока = ПараметрыРасчетаОбязательств.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивСтрок[НомерСтрокиРасчета-1], КопируемыеКолонки);
						Для Каждого ОбнуляемаяКолонка Из МассивОбнуляемыхКолонок Цикл
							НоваяСтрока[ОбнуляемаяКолонка] = 0;
						КонецЦикла;
						МассивСтрок.Добавить(НоваяСтрока);
					КонецЦикла;
				КонецЦикла;
				
				Для ИндексСтрокиРасчета = 0 По КоличествоСтрокРасчета - 1 Цикл
					
					МассивСтрокРасчета = Новый Массив;
					
					Для ИндексСтрокиОстатка = 0 По КоличествоСтрокОстатков - 1 Цикл
						ТекущийИндексСтрокиРасчета = ИндексСтрокиОстатка * КоличествоСтрокРасчета + ИндексСтрокиРасчета;
						Если МассивСтрокРасчета.Количество() = 0 Тогда
							ТекущаяСтрока = МассивСтрок[ТекущийИндексСтрокиРасчета];
						КонецЕсли;
						ОбрабатываемаяСтрока = МассивСтрок[ТекущийИндексСтрокиРасчета];
						ОбрабатываемаяСтрока.СтатьяФинансированияОстатков = ТаблицаОстатковСотрудника[ИндексСтрокиОстатка].СтатьяФинансирования;
						МассивСтрокРасчета.Добавить(ОбрабатываемаяСтрока);
					КонецЦикла;
					
					Если АрхивныйРасчет Тогда
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "ОстатокОтпуска", КолонкаРавномерногоРаспределения);
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "ОтпускАвансом",  КолонкаРавномерногоРаспределения);
					КонецЕсли;
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерва", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносов", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаи", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваИсчислено", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовИсчислено", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиИсчислено", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваНУ", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНУ", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНУ", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваИсчисленоНУ", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовИсчисленоНУ", КолонкаРавномерногоРаспределения);
					РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ", КолонкаРавномерногоРаспределения);
					
				КонецЦикла;
				
				Для ИндексСтрокиОстатка = 0 По КоличествоСтрокОстатков - 1 Цикл
					
					МассивСтрокРасчета = Новый Массив;
					Для НомерСтрокиРасчета = 1 По КоличествоСтрокРасчета Цикл
						ТекущийИндексСтрокиРасчета = ИндексСтрокиОстатка * КоличествоСтрокРасчета + НомерСтрокиРасчета-1;
						МассивСтрокРасчета.Добавить(МассивСтрок[ТекущийИндексСтрокиРасчета]);
					КонецЦикла;
					
					ТекущаяСтрока        = МассивСтрокРасчета[0];
					ТекущаяСтрокаОстаток = ТаблицаОстатковСотрудника[ИндексСтрокиОстатка];
					
					Если НЕ ТолькоНУ Тогда
						
						Если АрхивныйРасчет Тогда
							ИмяКолонкиРаспределения = "ОстатокОтпуска";
							Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, ИмяКолонкиРаспределения) = 0 Тогда
								ИмяКолонкиРаспределения = КолонкаРавномерногоРаспределения;
							КонецЕсли;
						Иначе
							ИмяКолонкиРаспределения = КолонкаРавномерногоРаспределения;
						КонецЕсли;
						
						ТекущаяСтрока.СуммаРезерваНакоплено = ТекущаяСтрокаОстаток.СуммаРезерваОстаток;
						Если ИтогПоКолонкеМассиваСтрок(МассивСтрокРасчета, "СуммаРезерва") = 0 Тогда
							РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваНакоплено", ИмяКолонкиРаспределения);
						Иначе
							РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваНакоплено", "СуммаРезерва");
						КонецЕсли;
						
						ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакоплено = ТекущаяСтрокаОстаток.СуммаРезерваСтраховыхВзносовОстаток;
						Если ИтогПоКолонкеМассиваСтрок(МассивСтрокРасчета, "СуммаРезерваСтраховыхВзносов") = 0 Тогда
							РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакоплено", ИмяКолонкиРаспределения);
						Иначе
							РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакоплено", "СуммаРезерваСтраховыхВзносов");
						КонецЕсли;
						
						ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакоплено = ТекущаяСтрокаОстаток.СуммаРезерваФССНесчастныеСлучаиОстаток;
						Если ИтогПоКолонкеМассиваСтрок(МассивСтрокРасчета, "СуммаРезерваФССНесчастныеСлучаи") = 0 Тогда
							РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакоплено", ИмяКолонкиРаспределения);
						Иначе
							РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакоплено", "СуммаРезерваФССНесчастныеСлучаи");
						КонецЕсли;
					КонецЕсли;
					
					ТекущаяСтрока.СуммаРезерваНакопленоНУ = ТекущаяСтрокаОстаток.СуммаРезерваОстатокНУ;
					Если ИтогПоКолонкеМассиваСтрок(МассивСтрокРасчета, "СуммаРезерваНУ") = 0 Тогда
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваНакопленоНУ", ИмяКолонкиРаспределения);
					Иначе
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваНакопленоНУ", "СуммаРезерваНУ");
					КонецЕсли;
					
					ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакопленоНУ = ТекущаяСтрокаОстаток.СуммаРезерваСтраховыхВзносовОстатокНУ;
					Если ИтогПоКолонкеМассиваСтрок(МассивСтрокРасчета, "СуммаРезерваСтраховыхВзносовНУ") = 0 Тогда
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакопленоНУ", ИмяКолонкиРаспределения);
					Иначе
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакопленоНУ", "СуммаРезерваСтраховыхВзносовНУ");
					КонецЕсли;
					
					ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ = ТекущаяСтрокаОстаток.СуммаРезерваФССНесчастныеСлучаиОстатокНУ;
					Если ИтогПоКолонкеМассиваСтрок(МассивСтрокРасчета, "СуммаРезерваФССНесчастныеСлучаиНУ") = 0 Тогда
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакопленоНУ", ИмяКолонкиРаспределения);
					Иначе
						РаспределитьСуммуОстатка(МассивСтрокРасчета, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакопленоНУ", "СуммаРезерваФССНесчастныеСлучаиНУ");
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Списывать Тогда
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					СтрокаМассива.СуммаРезерва =                      - СтрокаМассива.СуммаРезерваНакоплено;
					СтрокаМассива.СуммаРезерваСтраховыхВзносов =      - СтрокаМассива.СуммаРезерваСтраховыхВзносовНакоплено;
					СтрокаМассива.СуммаРезерваФССНесчастныеСлучаи =   - СтрокаМассива.СуммаРезерваФССНесчастныеСлучаиНакоплено;
					СтрокаМассива.СуммаРезерваНУ =                    - СтрокаМассива.СуммаРезерваНакопленоНУ;
					СтрокаМассива.СуммаРезерваСтраховыхВзносовНУ =    - СтрокаМассива.СуммаРезерваСтраховыхВзносовНакопленоНУ;
					СтрокаМассива.СуммаРезерваФССНесчастныеСлучаиНУ = - СтрокаМассива.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ;
					СтрокаМассива.СтатьяФинансирования              = СтрокаМассива.СтатьяФинансированияОстатков;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИтогПоКолонкеМассиваСтрок(МассивСтрок, ИмяКолонки) Экспорт
	
	Итог = 0;
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		Итог = Итог + СтрокаМассива[ИмяКолонки];
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

Функция СуммаОстаткаУволенных(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств, ВидУчета = "")
	
	СуммаКорректировки = 0;
	
	ТаблицаОстатков = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровРасчета, "ТаблицаОстатков", Неопределено);
	Если ТаблицаОстатков = Неопределено Тогда
		ТаблицаОстатков = ПолучитьВходящиеОстатки(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств);
		ТаблицаОстатков.Свернуть("Сотрудник",
			"СуммаРезерваОстаток, СуммаРезерваСтраховыхВзносовОстаток, СуммаРезерваФССНесчастныеСлучаиОстаток,
			|СуммаРезерваОстатокНУ, СуммаРезерваСтраховыхВзносовОстатокНУ, СуммаРезерваФССНесчастныеСлучаиОстатокНУ");
		СтруктураПараметровРасчета.Вставить("ТаблицаОстатков", ТаблицаОстатков);
	КонецЕсли;
	ТаблицаУволенных = ПараметрыРасчетаОбязательств.Скопировать(Новый Структура("Уволен", Истина));
	МассивУволенных  = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУволенных, "Сотрудник", Истина);
	Для Каждого ЗначениеМассива Из МассивУволенных Цикл
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(Новый Структура("Сотрудник", ЗначениеМассива));
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			СуммаКорректировки = СуммаКорректировки
				+ Макс(0, СтрокаМассива["СуммаРезерваОстаток" + ВидУчета])
				+ Макс(0, СтрокаМассива["СуммаРезерваСтраховыхВзносовОстаток" + ВидУчета])
				+ Макс(0, СтрокаМассива["СуммаРезерваФССНесчастныеСлучаиОстаток" + ВидУчета]);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СуммаКорректировки;
	
КонецФункции

#КонецОбласти

#Область МетодОбязательств

Процедура РасчетСуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета = "")
	
	Инвентаризация = СтруктураПараметровРасчета.Инвентаризация;
	Начисление     = СтруктураПараметровРасчета.Начисление;
	Если ВидУчета = "НУ" Тогда
		Списывать = Инвентаризация
			Или СтруктураПараметровРасчета.НормативныйМетодНУ
			Или СтруктураПараметровРасчета.ОпределятьИзлишкиЕжемесячноНУ;
		ИспользоватьДетализацию = Инвентаризация Или Начисление;
	Иначе
		Списывать = Инвентаризация
			Или СтруктураПараметровРасчета.НормативныйМетодБУ
			Или СтруктураПараметровРасчета.ОпределятьИзлишкиЕжемесячноБУ;
		ИспользоватьДетализацию = Истина;
	КонецЕсли;
	
	АрхивныйРасчет = СтруктураПараметровРасчета.АрхивныйРасчет;
	
	РасчетРезерваОтпусков =
		СтруктураПараметровРасчета.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск
		Или АрхивныйРасчет;
	
	ТаблицаОстатков = ПолучитьВходящиеОстатки(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств, ИспользоватьДетализацию);
	
	ПараметрыАналитики = ПараметрыРасчетаОбязательств.Скопировать();
	ПараметрыАналитики.Свернуть("Сотрудник");
	
	ИспользуетсяФиксРасчет = ПараметрыРасчетаОбязательств.Колонки.Найти("ФиксЗаполнение") <> Неопределено;
	
	СтруктураОтбора = Новый Структура("Сотрудник");
	Если ИспользуетсяФиксРасчет Тогда
		СтруктураОтбора.Вставить("ФиксРасчет", Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПараметрыАналитики Цикл
		
		СтруктураОтбора.Сотрудник = СтрокаТаблицы.Сотрудник;
		
		МассивРезервов = ПараметрыРасчетаОбязательств.НайтиСтроки(СтруктураОтбора);
		Если МассивРезервов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
		МассивОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		ТаблицаОстатковВременная = ТаблицаОстатков.Скопировать(МассивОстатков);
		
		ДополнитьТаблицуНедостающимиСтроками(МассивРезервов, МассивОстатков, ПараметрыРасчетаОбязательств);
		
		СуммаРезерваТекущегоМесяцаМетодОбязательств("СуммаРезерва",                    ВидУчета, МассивРезервов, ТаблицаОстатковВременная, Списывать, Инвентаризация, Не АрхивныйРасчет, РасчетРезерваОтпусков);
		СуммаРезерваТекущегоМесяцаМетодОбязательств("СуммаРезерваСтраховыхВзносов",    ВидУчета, МассивРезервов, ТаблицаОстатковВременная, Списывать, Инвентаризация, Не АрхивныйРасчет, РасчетРезерваОтпусков);
		СуммаРезерваТекущегоМесяцаМетодОбязательств("СуммаРезерваФССНесчастныеСлучаи", ВидУчета, МассивРезервов, ТаблицаОстатковВременная, Списывать, Инвентаризация, Не АрхивныйРасчет, РасчетРезерваОтпусков);
		
	КонецЦикла;
	
	Если Не Инвентаризация Тогда
		ОграничитьСуммыРезервовТекущегоМесяцаПредельнойВеличиной(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммаРезерваТекущегоМесяцаМетодОбязательств(ИмяПоказателя, ВидУчета, МассивРезервов, ТаблицаОстатков, Знач Списывать, Инвентаризация, РаспределятьПоИсчисленному = Ложь, РасчетРезерваОтпусков = Ложь)
	
	Уволен = Ложь;
	Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
		Если ТекущаяСтрока.Уволен = Истина Тогда
			Уволен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Перемещен = Ложь;
	Если НЕ Уволен Тогда 
		Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
			Если ТекущаяСтрока.Перемещен = Истина Тогда
				Перемещен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Зарезервирован = Ложь;
	Если НЕ Уволен И НЕ Перемещен Тогда 
		Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
			Если ТекущаяСтрока.Зарезервирован = Истина Тогда
				Зарезервирован = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИмяКолонкиНакоплено = ИмяПоказателя + "Накоплено" + ВидУчета;
	ИмяКолонкиИсчислено = ИмяПоказателя + "Исчислено" + ВидУчета;
	
	Если (НЕ Уволен И НЕ Перемещен) И Инвентаризация Тогда
		Списывать = Не Зарезервирован Или РасчетРезерваОтпусков;
	КонецЕсли;
	Если Не РасчетРезерваОтпусков И Уволен Тогда
		Списывать = Ложь;
	КонецЕсли;
	
	Если ТаблицаОстатков.Количество() = 0 Тогда
		Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
			ТекущаяСтрока[ИмяПоказателя + ВидУчета] = ТекущаяСтрока[ИмяПоказателя + "Исчислено" + ВидУчета];
		КонецЦикла;
	Иначе
		
		Если РаспределятьПоИсчисленному Тогда
			ИмяКолонкиРаспределения = ИмяКолонкиИсчислено;
		Иначе
			// Поддержка архивной механики
			ИмяКолонкиРаспределения = "ФОТ";
			Если РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяКолонкиРаспределения) = 0 Тогда
				ИмяКолонкиРаспределения = "ОстатокОтпуска";
			КонецЕсли;
		КонецЕсли;
		
		СуммаРезерваНакоплено = ТаблицаОстатков.Итог(ИмяПоказателя + "Остаток" + ВидУчета);
		Если (Уволен И РасчетРезерваОтпусков) ИЛИ Перемещен Тогда
			
			Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
				
				СуммаРезерваНакопленоВременная = СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета];
				
				МассивРезервовВременный = Новый Массив;
				Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
					Если ТекущаяСтрока.СтатьяФинансирования = СтрокаОстатков.СтатьяФинансирования Тогда
						МассивРезервовВременный.Добавить(ТекущаяСтрока);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивРезервовВременный.Количество() = 1 Тогда
					МассивРезервовВременный[0][ИмяКолонкиНакоплено] = СуммаРезерваНакопленоВременная;
				Иначе
					Если РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервовВременный, ИмяКолонкиНакоплено) = 0
						И СуммаРезерваНакопленоВременная <> 0 Тогда
						Для Каждого ТекущаяСтрока Из МассивРезервовВременный Цикл
							ТекущаяСтрока[ИмяКолонкиНакоплено] = 1;
						КонецЦикла;
					КонецЕсли;
						
					РаспределитьСуммуПоКолонкеТаблицы(СуммаРезерваНакопленоВременная, МассивРезервовВременный, ИмяКолонкиНакоплено, ИмяКолонкиНакоплено);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРезерваНакоплено, МассивРезервов, ИмяКолонкиНакоплено, ИмяКолонкиРаспределения);
			Если СуммаРезерваНакоплено <> 0 И РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяКолонкиНакоплено) = 0 Тогда
				МассивРезервов[0][ИмяКолонкиНакоплено] = СуммаРезерваНакоплено;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (Уволен ИЛИ Перемещен) Тогда
			СуммаРезерваИсчислено = РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяКолонкиИсчислено);
			Если РасчетРезерваОтпусков Или Инвентаризация Тогда
				СуммаРезерва = СуммаРезерваИсчислено - СуммаРезерваНакоплено;
			Иначе
				СуммаРезерва = СуммаРезерваИсчислено;
			КонецЕсли;
			Если Инвентаризация И РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяКолонкиРаспределения) = 0 Тогда
				МассивРезервов[0][ИмяПоказателя + ВидУчета] = СуммаРезерва;
			КонецЕсли;
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРезерва, МассивРезервов, ИмяПоказателя + ВидУчета, ИмяКолонкиРаспределения);
			Если Не Зарезервирован И СуммаРезерва <> 0 И РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяПоказателя + ВидУчета) = 0 Тогда
				МассивРезервов[0][ИмяПоказателя + ВидУчета] = СуммаРезерва;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ТребуетсяПерераспределение = Ложь;
	Если Зарезервирован Тогда
		// Если есть начисления сторно перераспределим начисление
		КоличествоСторноЗаписей = 0;
		КоличествоКорЗаписей    = 0;
		Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
			Если ТекущаяСтрока[ИмяПоказателя + ВидУчета] < 0 Тогда
				КоличествоСторноЗаписей = КоличествоСторноЗаписей + 1;
			ИначеЕсли ТекущаяСтрока[ИмяПоказателя + ВидУчета] > 0 Тогда
				КоличествоКорЗаписей = КоличествоКорЗаписей + 1;
			КонецЕсли;
		КонецЦикла;
		ТребуетсяПерераспределение = КоличествоКорЗаписей > 0 И КоличествоСторноЗаписей > 0;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
		Если ТекущаяСтрока[ИмяПоказателя + ВидУчета] < 0
			И НЕ Списывать И НЕ ТребуетсяПерераспределение Тогда
			ТекущаяСтрока[ИмяПоказателя + ВидУчета] = 0;
		КонецЕсли;
		Если Уволен ИЛИ Перемещен Тогда
			ТекущаяСтрока[ИмяПоказателя + ВидУчета] = -ТекущаяСтрока[ИмяПоказателя + "Накоплено" + ВидУчета];
		КонецЕсли;
	КонецЦикла;
	
	// Возможно в учете по части статей уже нет остатков и списывать по ним нельзя
	СуммаРезерва = РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяПоказателя + ВидУчета);
	Если СуммаРезерва < 0
		И ((ВидУчета = "" И Списывать) ИЛИ Инвентаризация) Тогда
		
		МассивРезервовВременный = Новый Массив;
		ТребуетсяПерераспределение = Ложь;
		
		Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
			
			МассивРезервовВременный.Добавить(ТекущаяСтрока[ИмяПоказателя + ВидУчета]);
			
			СтруктураОтбора = Новый Структура("СтатьяФинансирования", ТекущаяСтрока.СтатьяФинансирования);
			МассивОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
			
			Если МассивОстатков.Количество() = 0 Тогда
				ТекущаяСтрока[ИмяПоказателя + ВидУчета] = 0;
				ТребуетсяПерераспределение = Истина;
			Иначе
				Для Каждого СтрокаОстатков Из МассивОстатков Цикл
					Если СтрокаОстатков.СтатьяФинансирования = ТекущаяСтрока.СтатьяФинансирования Тогда
						ЗнакОперации = ?(СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета]<0, -1, 1);
						СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета] = СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета]
							- ЗнакОперации * ТекущаяСтрока[ИмяПоказателя + ВидУчета];
					КонецЕсли;
					Если СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета]<0 Тогда
						ТекущаяСтрока[ИмяПоказателя + ВидУчета] = 0;
						ТребуетсяПерераспределение = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяПерераспределение Тогда
			БазаРаспределения = РезервыПоОплатеТруда.ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяПоказателя + ВидУчета);
			Если БазаРаспределения <> 0 Тогда
				РаспределитьСуммуПоКолонкеТаблицы(СуммаРезерва, МассивРезервов, ИмяПоказателя + ВидУчета);
			Иначе
				Для НомерЗаписи = 1 По МассивРезервовВременный.Количество() Цикл
					МассивРезервов[НомерЗаписи-1][ИмяПоказателя + ВидУчета] = МассивРезервовВременный[НомерЗаписи-1];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета = "") Экспорт
	
	РассчитыватьБУ = СтруктураПараметровРасчета.ФормироватьРезервБУ
		И (Не СтруктураПараметровРасчета.НормативныйМетодБУ Или СтруктураПараметровРасчета.Инвентаризация)
		И ВидУчета = "";
		
	РассчитыватьНУ = СтруктураПараметровРасчета.ФормироватьРезервНУ
		И (Не СтруктураПараметровРасчета.НормативныйМетодНУ Или СтруктураПараметровРасчета.Инвентаризация)
		И ВидУчета = "НУ";
	
	
	Если РассчитыватьНУ Или РассчитыватьБУ Тогда
		
		РасчетСуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВходящиеОстатки(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств, ИспользоватьДетализацию = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("Резерв",                     СтруктураПараметровРасчета.Резерв);
	Запрос.УстановитьПараметр("Период",                     Новый Граница(КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода",              НачалоМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",               КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("Регистратор",                СтруктураПараметровРасчета.Регистратор);
	Запрос.УстановитьПараметр("Списание",                   СтруктураПараметровРасчета.Списание);
	Запрос.УстановитьПараметр("ТаблицаОстатковЗачисленных", СтруктураПараметровРасчета.ТаблицаОстатковЗачисленных);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатковЗачисленных.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатковЗачисленных.СуммаРезерваОстаток КАК СуммаРезерваОстаток,
	|	ТаблицаОстатковЗачисленных.СуммаРезерваСтраховыхВзносовОстаток КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	ТаблицаОстатковЗачисленных.СуммаРезерваФССНесчастныеСлучаиОстаток КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	ТаблицаОстатковЗачисленных.СуммаРезерваНУОстаток КАК СуммаРезерваОстатокНУ,
	|	ТаблицаОстатковЗачисленных.СуммаРезерваСтраховыхВзносовНУОстаток КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	ТаблицаОстатковЗачисленных.СуммаРезерваФССНесчастныеСлучаиНУОстаток КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	ТаблицаОстатковЗачисленных.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиЗачисленных
	|ИЗ
	|	&ТаблицаОстатковЗачисленных КАК ТаблицаОстатковЗачисленных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям) КАК ТипОценочногоОбязательства,
	|	ВТ_ОстаткиЗачисленных.СуммаРезерваОстаток КАК СуммаОстаток,
	|	ВТ_ОстаткиЗачисленных.СуммаРезерваОстатокНУ КАК СуммаОстатокНУ
	|ПОМЕСТИТЬ ВТ_ОстаткиЗачисленныхСводно
	|ИЗ
	|	ВТ_ОстаткиЗачисленных КАК ВТ_ОстаткиЗачисленных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам),
	|	ВТ_ОстаткиЗачисленных.СуммаРезерваСтраховыхВзносовОстаток,
	|	ВТ_ОстаткиЗачисленных.СуммаРезерваСтраховыхВзносовОстатокНУ
	|ИЗ
	|	ВТ_ОстаткиЗачисленных КАК ВТ_ОстаткиЗачисленных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ),
	|	ВТ_ОстаткиЗачисленных.СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	ВТ_ОстаткиЗачисленных.СуммаРезерваФССНесчастныеСлучаиОстатокНУ
	|ИЗ
	|	ВТ_ОстаткиЗачисленных КАК ВТ_ОстаткиЗачисленных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник КАК Сотрудник,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток) КАК СуммаРезерваОстаток,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовОстаток) КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваНУОстаток) КАК СуммаРезерваОстатокНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовНУОстаток) КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиНУОстаток) КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваПоСотрудникамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваНУПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовНУПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиНУПриход),
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор = &Регистратор
	|	И НЕ &Списание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ОстаткиЗачисленных.Сотрудник,
	|	СУММА(ВТ_ОстаткиЗачисленных.СуммаРезерваОстаток),
	|	СУММА(ВТ_ОстаткиЗачисленных.СуммаРезерваСтраховыхВзносовОстаток),
	|	СУММА(ВТ_ОстаткиЗачисленных.СуммаРезерваФССНесчастныеСлучаиОстаток),
	|	СУММА(ВТ_ОстаткиЗачисленных.СуммаРезерваОстатокНУ),
	|	СУММА(ВТ_ОстаткиЗачисленных.СуммаРезерваСтраховыхВзносовОстатокНУ),
	|	СУММА(ВТ_ОстаткиЗачисленных.СуммаРезерваФССНесчастныеСлучаиОстатокНУ),
	|	ВТ_ОстаткиЗачисленных.СтатьяФинансирования
	|ИЗ
	|	ВТ_ОстаткиЗачисленных КАК ВТ_ОстаткиЗачисленных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиЗачисленных.Сотрудник,
	|	ВТ_ОстаткиЗачисленных.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваРасход),
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовРасход),
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиРасход),
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваНУРасход),
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовНУРасход),
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиНУРасход),
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор = &Регистратор
	|	И &Списание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Сотрудник КАК Сотрудник,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстаток) КАК СуммаРезерваОстаток,
	|	СУММА(ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстаток) КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	СУММА(ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстатокНУ) КАК СуммаРезерваОстатокНУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстатокНУ) КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстатокНУ) КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстаток + ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстаток + ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезервовВсегоБУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстатокНУ + ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстатокНУ + ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстатокНУ) КАК СуммаРезервовВсегоНУ,
	|	ВТ_Остатки.СтатьяФинансирования КАК СтатьяФинансирования
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Сотрудник,
	|	ВТ_Остатки.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваОстатки.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
	|	СУММА(ОценочныеОбязательстваОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ОценочныеОбязательстваОстатки.СуммаНУОстаток) КАК СуммаОстатокНУ
	|ПОМЕСТИТЬ ВТ_СводныеОстатки
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОстатки.ТипОценочногоОбязательства
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства,
	|	СУММА(-ОценочныеОбязательстваОбороты.СуммаПриход),
	|	СУММА(-ОценочныеОбязательстваОбороты.СуммаНУПриход)
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОбороты
	|ГДЕ
	|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
	|	И НЕ &Списание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ОстаткиЗачисленныхСводно.ТипОценочногоОбязательства,
	|	ВТ_ОстаткиЗачисленныхСводно.СуммаОстаток,
	|	ВТ_ОстаткиЗачисленныхСводно.СуммаОстатокНУ
	|ИЗ
	|	ВТ_ОстаткиЗачисленныхСводно КАК ВТ_ОстаткиЗачисленныхСводно
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства,
	|	СУММА(ОценочныеОбязательстваОбороты.СуммаРасход),
	|	СУММА(ОценочныеОбязательстваОбороты.СуммаНУРасход)
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОбороты
	|ГДЕ
	|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
	|	И &Списание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстатокНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваОстатокНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстатокНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстатокНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	СУММА(ВТ_СводныеОстатки.СуммаОстаток) КАК СуммаРезервовВсегоБУ,
	|	СУММА(ВТ_СводныеОстатки.СуммаОстатокНУ) КАК СуммаРезервовВсегоНУ
	|ИЗ
	|	ВТ_СводныеОстатки КАК ВТ_СводныеОстатки";
	
	Результат = Запрос.ВыполнитьПакет();
	РезультатПоСотрудникам = Результат[3].Выгрузить();
	РезультатСводный       = Результат[5].Выгрузить();
	
	Если РезультатПоСотрудникам.Итог("СуммаРезервовВсегоБУ") <> РезультатСводный.Итог("СуммаРезервовВсегоБУ")
		ИЛИ РезультатПоСотрудникам.Итог("СуммаРезервовВсегоНУ") <> РезультатСводный.Итог("СуммаРезервовВсегоНУ") Тогда
		
		ТаблицаРаспределенияОстатков = ПараметрыРасчетаОбязательств.Скопировать();
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваОстаток",                      ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваСтраховыхВзносовОстаток",      ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиОстаток",   ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваОстатокНУ",                    ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваСтраховыхВзносовОстатокНУ",    ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиОстатокНУ", ОписаниеТиповЧисло);
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваОстаток") - РезультатПоСотрудникам.Итог("СуммаРезерваОстаток");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваОстаток", "СуммаРезерваИсчислено");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваСтраховыхВзносовОстаток") - РезультатПоСотрудникам.Итог("СуммаРезерваСтраховыхВзносовОстаток");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваСтраховыхВзносовОстаток", "СуммаРезерваСтраховыхВзносовИсчислено");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваФССНесчастныеСлучаиОстаток") - РезультатПоСотрудникам.Итог("СуммаРезерваФССНесчастныеСлучаиОстаток");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваФССНесчастныеСлучаиОстаток", "СуммаРезерваФССНесчастныеСлучаиИсчислено");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваОстатокНУ") - РезультатПоСотрудникам.Итог("СуммаРезерваОстатокНУ");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваОстатокНУ", "СуммаРезерваИсчисленоНУ");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваСтраховыхВзносовОстатокНУ") - РезультатПоСотрудникам.Итог("СуммаРезерваСтраховыхВзносовОстатокНУ");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваСтраховыхВзносовОстатокНУ", "СуммаРезерваСтраховыхВзносовИсчисленоНУ");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваФССНесчастныеСлучаиОстатокНУ") - РезультатПоСотрудникам.Итог("СуммаРезерваФССНесчастныеСлучаиОстатокНУ");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваФССНесчастныеСлучаиОстатокНУ", "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатПоСотрудникам, ТаблицаРаспределенияОстатков);
		
		КолонкиСвертки = "Сотрудник";
		Если ИспользоватьДетализацию Тогда
			КолонкиСвертки = КолонкиСвертки + ", СтатьяФинансирования";
		КонецЕсли;
		
		ТаблицаРаспределенияОстатков.Свернуть(КолонкиСвертки, "СуммаРезерваОстаток, СуммаРезерваСтраховыхВзносовОстаток, СуммаРезерваФССНесчастныеСлучаиОстаток, СуммаРезерваОстатокНУ, СуммаРезерваСтраховыхВзносовОстатокНУ, СуммаРезерваФССНесчастныеСлучаиОстатокНУ");
		
		Возврат ТаблицаРаспределенияОстатков;
		
	Иначе
		
		Возврат РезультатПоСотрудникам;
		
	КонецЕсли;
	
КонецФункции

Процедура РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, ИмяКолонкиСуммы, ИмяКолонкиБазы = "")
	
	РаспределяемаяСумма = СтрокаТаблицы[ИмяКолонкиСуммы];
	
	Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
		ИмяКолонкиБазы = ИмяКолонкиСуммы;
	КонецЕсли;
	
	// Распределение по колонке таблицы резервов
	МассивСтарыхСумм = Новый Массив;
	Для Каждого ЗначениеМассива Из МассивСтрок Цикл
		МассивСтарыхСумм.Добавить(ЗначениеМассива[ИмяКолонкиБазы]);
	КонецЦикла;
	МассивНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
	Если МассивНовыхСумм <> Неопределено Тогда
		ИндексСтроки = 0;
		КоличествоСтрок = МассивСтрок.Количество();
		Пока ИндексСтроки < КоличествоСтрок Цикл
			МассивСтрок[ИндексСтроки][ИмяКолонкиСуммы] = МассивНовыхСумм[ИндексСтроки];
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	Иначе
		// Нет базы распределения - весь остаток в одной строке
		МассивСтрок[0][ИмяКолонкиСуммы] = РаспределяемаяСумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуНедостающимиСтроками(МассивРезервов, МассивОстатков, ПараметрыРасчетаОбязательств)
	
	Дополнить = Ложь;
	Для Каждого ТекущаяСтрока Из МассивРезервов Цикл
		Если ТекущаяСтрока.Уволен = Истина
			Или ТекущаяСтрока.Перемещен = Истина Тогда
			Дополнить = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Дополнить Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтатейФинансирования = Новый Массив;
	Для Каждого ТекущаяСтрокаРезервов Из МассивРезервов Цикл
		МассивСтатейФинансирования.Добавить(ТекущаяСтрокаРезервов.СтатьяФинансирования);
	КонецЦикла;
	
	КолонкиИсключения = "";
	Если ПараметрыРасчетаОбязательств.Колонки.Найти("ОстатокОтпуска") <> Неопределено Тогда
		КолонкиИсключения = "ОстатокОтпуска";
	КонецЕсли;
	Если ПараметрыРасчетаОбязательств.Колонки.Найти("ОтпускАвансом") <> Неопределено Тогда
		КолонкиИсключения = ?(ПустаяСтрока(КолонкиИсключения),"",",") + "ОтпускАвансом";
	КонецЕсли;
	
	Для Каждого ТекущаяСтрокаОстатков Из МассивОстатков Цикл
		Если МассивСтатейФинансирования.Найти(ТекущаяСтрокаОстатков.СтатьяФинансирования) = Неопределено Тогда
			
			МассивСтатейФинансирования.Добавить(ТекущаяСтрокаОстатков.СтатьяФинансирования);
			
			НоваяСтрока = ПараметрыРасчетаОбязательств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивРезервов[0], , КолонкиИсключения);
			НоваяСтрока.СтатьяФинансирования = ТекущаяСтрокаОстатков.СтатьяФинансирования;
			МассивРезервов.Добавить(НоваяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОграничитьСуммыРезервовТекущегоМесяцаПредельнойВеличиной(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета = "")
	
	РассчитыватьБУ = СтруктураПараметровРасчета.ФормироватьРезервБУ
		И Не СтруктураПараметровРасчета.НормативныйМетодБУ
		И ВидУчета = "";
		
	РассчитыватьНУ = СтруктураПараметровРасчета.ФормироватьРезервНУ
		И Не СтруктураПараметровРасчета.НормативныйМетодНУ
		И ВидУчета = "НУ";
		
	Если РассчитыватьБУ Или РассчитыватьНУ Тогда
			
		НормативныйМетод = (РассчитыватьБУ И СтруктураПараметровРасчета.НормативныйМетодБУ)
			Или (РассчитыватьНУ И СтруктураПараметровРасчета.НормативныйМетодНУ);
			
		ПостфиксКолонкиБазы = ?(НормативныйМетод, "Исчислено", "");
		
		ФиксированнаяСумма = 0;
		Если ПараметрыРасчетаОбязательств.Колонки.Найти("ФиксРасчет") <> Неопределено Тогда
			НаборФиксированныхСтрок = ПараметрыРасчетаОбязательств.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
			ФиксированнаяСумма = ИтогПоКолонкеМассиваСтрок(НаборФиксированныхСтрок,"СуммаРезерва" + ВидУчета)
				+ ИтогПоКолонкеМассиваСтрок(НаборФиксированныхСтрок,"СуммаРезерваСтраховыхВзносов" + ВидУчета)
				+ ИтогПоКолонкеМассиваСтрок(НаборФиксированныхСтрок,"СуммаРезерваФССНесчастныеСлучаи" + ВидУчета);
			НаборСтрок = ПараметрыРасчетаОбязательств.НайтиСтроки(Новый Структура("ФиксРасчет", Ложь));
		Иначе
			НаборСтрок = ПараметрыРасчетаОбязательств;
		КонецЕсли;
		
		Если ((РассчитыватьБУ и СтруктураПараметровРасчета.ОграничиватьНачислениеПредельнойСуммойБУ)
			Или (РассчитыватьНУ и СтруктураПараметровРасчета.ОграничиватьНачислениеПредельнойСуммойНУ)) Тогда
			
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("СуммаРезерва");
			МассивПоказателей.Добавить("СуммаРезерваСтраховыхВзносов");
			МассивПоказателей.Добавить("СуммаРезерваФССНесчастныеСлучаи");
			
			СуммаКорректировки = 0;
			Для Каждого СтрокаТаблицы Из ПараметрыРасчетаОбязательств Цикл
				Для Каждого Показатель Из МассивПоказателей Цикл
					ЗначениеПоказателя = СтрокаТаблицы[Показатель + ВидУчета];
					Если ЗначениеПоказателя < 0 Тогда
						СуммаКорректировки = СуммаКорректировки + ЗначениеПоказателя;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ПредельнаяВеличина = СтруктураПараметровРасчета["ПредельнаяВеличинаОтчисленийОрганизации" + ВидУчета]
				- СуммаКорректировки;
			ВсегоНачисленоРезервов = Макс(0, СтруктураПараметровРасчета["ВсегоНачисленоРезервов" + ВидУчета]
				- СтруктураПараметровРасчета["ВсегоНакопленоРезервов" + ВидУчета]);
			
			Если ВсегоНачисленоРезервов > ПредельнаяВеличина Тогда
				
				Разница = Мин(ВсегоНачисленоРезервов, ПредельнаяВеличина)- ФиксированнаяСумма;
				
				Если Разница <> 0 Тогда
					
					ВсегоНачисленоРезервов = СтруктураПараметровРасчета["НачисленоРезервов" + ВидУчета]
						+ СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета]
						+ СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета];
					
					ДоляВзносов =  ?(ВсегоНачисленоРезервов = 0, 0, СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета]/ВсегоНачисленоРезервов);
					ВзносыКНачислению  = Окр(Разница*ДоляВзносов, 2);
					
					ДоляФССНесчастныеСлучаи = ?(ВсегоНачисленоРезервов = 0, 0, СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета]/ВсегоНачисленоРезервов);
					
					ФССНесчастныеСлучаиКНачислению  = Окр(Разница*ДоляФССНесчастныеСлучаи, 2);
					
					РезервКНачислению = Разница - ВзносыКНачислению - ФССНесчастныеСлучаиКНачислению;
					
					РезервыКНачислению = Новый Структура("СуммаРезерва, СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи",
						РезервКНачислению, ВзносыКНачислению, ФССНесчастныеСлучаиКНачислению);
					
					Для Каждого Показатель Из МассивПоказателей Цикл
						МассивСтрок = Новый Массив;
						Для Каждого СтрокаНабора Из НаборСтрок Цикл
							Если СтрокаНабора[Показатель + ВидУчета] > 0 Тогда
								МассивСтрок.Добавить(СтрокаНабора);
							КонецЕсли;
						КонецЦикла;
						Если МассивСтрок.Количество() > 0 Тогда
							РаспределитьСуммуПоКолонкеТаблицы(РезервыКНачислению[Показатель],
								МассивСтрок,
								Показатель + ВидУчета,
								Показатель + ПостфиксКолонкиБазы + ВидУчета,
								Истина);
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					Для Каждого СтрокаНабора Из НаборСтрок Цикл
						Для Каждого Показатель Из МассивПоказателей Цикл
							Если СтрокаНабора[Показатель + ВидУчета] > 0 Тогда
								СтрокаНабора[Показатель + ВидУчета] = 0;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НакопленныеРезервы

// Получаем суммы накопленных резервов по сотрудникам 
// для отражения в учете оплаты отпуска за счет резерва.
//
Функция НакопленныеОценочныеОбязательства(Сотрудники, ПараметрыРасчета) Экспорт
	
	Организация 	= ПараметрыРасчета.Организация;
	Резерв 			= ПараметрыРасчета.Резерв;
	Период 			= ПараметрыРасчета.ПериодРегистрации;
	ДокументСсылка 	= ПараметрыРасчета.ДокументСсылка;
	УчитыватьОперацииТекущегоМесяца = ПараметрыРасчета.УчитыватьОперацииТекущегоМесяца;
	
	ВидРезерва = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "ВидРезерва", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                     Организация);
	Запрос.УстановитьПараметр("Резерв",                          Резерв);
	Запрос.УстановитьПараметр("Период",                          Период);
	Запрос.УстановитьПараметр("НачалоПериода",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                    КонецМесяца(Период));
	Запрос.УстановитьПараметр("Регистратор",                     ДокументСсылка);
	Запрос.УстановитьПараметр("Сотрудники",                      Сотрудники);
	Запрос.УстановитьПараметр("ЭтоРезервОтпусков",               ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск);
	Запрос.УстановитьПараметр("УчитыватьОперацииТекущегоМесяца", УчитыватьОперацииТекущегоМесяца);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник КАК Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Резерв КАК Резерв,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток) КАК Сумма,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовОстаток) КАК СтраховыеВзносы,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК ФССНесчастныеСлучаи,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваНУОстаток) КАК СуммаНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовНУОстаток) КАК СтраховыеВзносыНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиНУОстаток) КАК ФССНесчастныеСлучаиНУ
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Резерв = &Резерв
	|				И Сотрудник В (&Сотрудники)) КАК ОценочныеОбязательстваПоСотрудникамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник КАК Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Резерв КАК Резерв,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваОборот) КАК Сумма,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовОборот) КАК СтраховыеВзносы,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиОборот) КАК ФССНесчастныеСлучаи,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваНУОборот) КАК СуммаНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовНУОборот) КАК СтраховыеВзносыНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиНУОборот) КАК ФССНесчастныеСлучаиНУ
	|ПОМЕСТИТЬ ВТ_Исключения
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Резерв = &Резерв
	|				И Сотрудник В (&Сотрудники)) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор ССЫЛКА Документ.НачислениеОценочныхОбязательствПоОтпускам
	|				ТОГДА ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор.КорректировкаОбязательств
	|			КОГДА ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор ССЫЛКА Документ.РезервыПоОплатеТруда И &ЭтоРезервОтпусков
	|				ТОГДА ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРезервовПоОплатеТруда.Списание)
	|						ИЛИ ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРезервовПоОплатеТруда.Корректировка)
	|			ИНАЧЕ &УчитыватьОперацииТекущегоМесяца
	|		КОНЕЦ
	|	И ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Сотрудник КАК Сотрудник,
	|	ВТ_Остатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВТ_Остатки.Резерв КАК Резерв,
	|	СУММА(ВТ_Остатки.Сумма + ЕСТЬNULL(ВТ_Исключения.Сумма, 0)) КАК Сумма,
	|	СУММА(ВТ_Остатки.СтраховыеВзносы + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносы, 0)) КАК СтраховыеВзносы,
	|	СУММА(ВТ_Остатки.ФССНесчастныеСлучаи + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаи, 0)) КАК ФССНесчастныеСлучаи,
	|	СУММА(ВТ_Остатки.СуммаНУ + ЕСТЬNULL(ВТ_Исключения.СуммаНУ, 0)) КАК СуммаНУ,
	|	СУММА(ВТ_Остатки.СтраховыеВзносыНУ + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносыНУ, 0)) КАК СтраховыеВзносыНУ,
	|	СУММА(ВТ_Остатки.ФССНесчастныеСлучаиНУ + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаиНУ, 0)) КАК ФССНесчастныеСлучаиНУ
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключения КАК ВТ_Исключения
	|		ПО ВТ_Остатки.Сотрудник = ВТ_Исключения.Сотрудник
	|			И ВТ_Остатки.СтатьяФинансирования = ВТ_Исключения.СтатьяФинансирования
	|			И ВТ_Остатки.Резерв = ВТ_Исключения.Резерв
	|ГДЕ
	|	(ВТ_Остатки.Сумма + ЕСТЬNULL(ВТ_Исключения.Сумма, 0) <> 0
	|			ИЛИ ВТ_Остатки.СтраховыеВзносы + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносы, 0) <> 0
	|			ИЛИ ВТ_Остатки.ФССНесчастныеСлучаи + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаи, 0) <> 0
	|			ИЛИ ВТ_Остатки.СуммаНУ + ЕСТЬNULL(ВТ_Исключения.СуммаНУ, 0) <> 0
	|			ИЛИ ВТ_Остатки.СтраховыеВзносыНУ + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносыНУ, 0) <> 0
	|			ИЛИ ВТ_Остатки.ФССНесчастныеСлучаиНУ + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаиНУ, 0) <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Сотрудник,
	|	ВТ_Остатки.СтатьяФинансирования,
	|	ВТ_Остатки.Резерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	СтатьяФинансирования";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОпределениеДолиРезерва

Функция ДоляРезерва(Период, Организация, Резерв, Регистратор = Неопределено)
	
	ДоляРезерва = Новый Структура("ДоляРезерваБУ, ДоляРезерваНУ", 0, 0);
	
	ДоляРезерваБУ = 0;
	ДоляРезерваНУ = 0;
	
	НастройкиРезерва = НастройкиРезерва(Организация, Резерв, Период);
	ЭтоРезервОтпусков = НастройкиРезерва.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	НормативныйМетод = НастройкиРезерва.НормативныйМетодБУ
		Или (НастройкиРезерва.НормативныйМетодНУ И НастройкиРезерва.ФормироватьРезервНУ);
	РассчитыватьДолиПоНУ = НастройкиРезерва.ФормироватьРезервНУ И НастройкиРезерва.ОграничиватьНачислениеПредельнойСуммойНУ;
	РассчитыватьДолиПоБУ = НастройкиРезерва.ОграничиватьНачислениеПредельнойСуммойБУ;
	
	Если Не РассчитыватьДолиПоНУ И Не РассчитыватьДолиПоБУ Тогда
		Возврат ДоляРезерва;
	КонецЕсли;
	
	Организации = ВсяОрганизация(Организация.ГоловнаяОрганизация);
	
	ТаблицаНакопленныхРезервов = НакопленоРезерваПоВсейОрганизации(Период, Организации, Резерв, Регистратор);
	
	БазовыеНачисления = Неопределено;
	Если Не ЭтоРезервОтпусков Или НормативныйМетод Тогда
		Если НастройкиРезерва.НормативныйМетодНУ И НастройкиРезерва.ФормироватьРезервНУ Тогда
			БазовыеНачисления = РезервыПоОплатеТрудаБазовый.БазовыеНачисленияРезерваПоОплатеТруда(Организация, Резерв, Период);
		Иначе
			БазовыеНачисления = БазовыеНачисленияРезерваПоОплатеТруда(Организация, Резерв, Период);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаФондаОплатыТруда = ОтражениеЗарплатыВБухучете.ФондОплатыТрудаПоОрганизациямДляРасчетаОценочныхОбязательств(Организации,
		Период,
		ЭтоРезервОтпусков И Не ЗначениеЗаполнено(БазовыеНачисления),
		БазовыеНачисления);
		
	ПредельнаяВеличинаОтчисленийВРезервБУ = НастройкиРезерва.ПредельнаяВеличинаОтчисленийВРезервБУ;
	ПредельнаяВеличинаОтчисленийВРезервНУ = НастройкиРезерва.ПредельнаяВеличинаОтчисленийВРезервНУ;
	
	ФондОплатыТрудаИВзносы = ТаблицаФондаОплатыТруда.Итог("ФондОплатыТруда") + ТаблицаФондаОплатыТруда.Итог("СтраховыеВзносы");
	
	Если ФондОплатыТрудаИВзносы <> 0 Тогда
		
		// Вычислим долю ФОТ, приходящуюся на текущую организацию
		ТаблицаФондаОплатыТрудаОрганизации = ТаблицаФондаОплатыТруда.Скопировать(Новый Структура("Организация", Организация));
		ФондОплатыТрудаИВзносыОрганизации  = ТаблицаФондаОплатыТрудаОрганизации.Итог("ФондОплатыТруда") + ТаблицаФондаОплатыТрудаОрганизации.Итог("СтраховыеВзносы");
		ДоляРезервовОрганизации            = ФондОплатыТрудаИВзносыОрганизации/ФондОплатыТрудаИВзносы;
		
		Если РассчитыватьДолиПоНУ И ТаблицаНакопленныхРезервов.Итог("НакопленныйРезервНУ") < ПредельнаяВеличинаОтчисленийВРезервНУ Тогда
			ДоляРезерваНУ = Окр(ДоляРезервовОрганизации, 8);
		КонецЕсли;
		Если РассчитыватьДолиПоБУ И ТаблицаНакопленныхРезервов.Итог("НакопленныйРезерв") < ПредельнаяВеличинаОтчисленийВРезервБУ Тогда
			ДоляРезерваБУ = Окр(ДоляРезервовОрганизации, 8);
		КонецЕсли;
		
	КонецЕсли;
	
	ДоляРезерва.Вставить("ДоляРезерваБУ", ДоляРезерваБУ);
	ДоляРезерва.Вставить("ДоляРезерваНУ", ДоляРезерваНУ);
	
	Возврат ДоляРезерва;
	
КонецФункции

Функция НакопленоРезерваПоВсейОрганизации(Знач Период, Организации, Резерв, Регистратор = Неопределено, ПредыдущийПериод = Ложь, УчитыватьПереходящийОстаток = Ложь) Экспорт
	
	ТолькоОстаток = Ложь;
	Если ПредыдущийПериод Тогда
		Если Месяц(Период) = 1 Тогда
			ТолькоОстаток = Истина;
		Иначе
			Период = НачалоМесяца(Период-1);
		КонецЕсли;
	КонецЕсли;
	НачалоПериода = НачалоГода(Период);
	КонецПериода  = КонецМесяца(Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации",                 Организации);
	Запрос.УстановитьПараметр("Резерв",                      Резерв);
	Запрос.УстановитьПараметр("НачалоПериода",               НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                КонецПериода);
	Запрос.УстановитьПараметр("Регистратор",                 Регистратор);
	Запрос.УстановитьПараметр("ТолькоОстаток",               ТолькоОстаток);
	Запрос.УстановитьПараметр("УчитыватьПереходящийОстаток", УчитыватьПереходящийОстаток);
	
	Если Регистратор = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ &УчитыватьПереходящийОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток
		|		КОНЕЦ + ВЫБОР
		|			КОГДА &ТолькоОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
		|		КОНЕЦ) КАК НакопленныйРезерв,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ &УчитыватьПереходящийОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток
		|		КОНЕЦ + ВЫБОР
		|			КОГДА &ТолькоОстаток
		|				ТОГДА 0
		|			КОГДА НЕ &УчитыватьПереходящийОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
		|		КОНЕЦ) КАК НакопленныйРезервНУ
		|ИЗ
		|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			,
		|			Организация В (&Организации)
		|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ &УчитыватьПереходящийОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток
		|		КОНЕЦ + ВЫБОР
		|			КОГДА &ТолькоОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
		|		КОНЕЦ) КАК НакопленныйРезерв,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ &УчитыватьПереходящийОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток
		|		КОНЕЦ + ВЫБОР
		|			КОГДА &ТолькоОстаток
		|				ТОГДА 0
		|			ИНАЧЕ ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
		|		КОНЕЦ) КАК НакопленныйРезервНУ
		|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
		|ИЗ
		|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			,
		|			Организация В (&Организации)
		|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
		|	СУММА(ОценочныеОбязательстваОбороты.СуммаПриход) КАК Оборот,
		|	СУММА(ОценочныеОбязательстваОбороты.СуммаНУПриход) КАК ОборотНУ
		|ПОМЕСТИТЬ ВТ_ТекущиеОбороты
		|ИЗ
		|	РегистрНакопления.ОценочныеОбязательства.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Организация В (&Организации)
		|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОбороты
		|ГДЕ
		|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
		|	И НЕ &ТолькоОстаток
		|
		|СГРУППИРОВАТЬ ПО
		|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
		|	СУММА(ВТ_ОстаткиИОбороты.НакопленныйРезерв - ЕСТЬNULL(ВТ_ТекущиеОбороты.Оборот, 0)) КАК НакопленныйРезерв,
		|	СУММА(ВТ_ОстаткиИОбороты.НакопленныйРезервНУ - ЕСТЬNULL(ВТ_ТекущиеОбороты.ОборотНУ, 0)) КАК НакопленныйРезервНУ
		|ИЗ
		|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОбороты КАК ВТ_ТекущиеОбороты
		|		ПО ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства = ВТ_ТекущиеОбороты.ТипОценочногоОбязательства
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОпределениеРазмераРезерваТекущегоПериода

// Получает накопленные с начала года суммы резервов с учетом движений текущего месяца.
//
Функция ТаблицаНакопленныхРезервовТекущегоМесяца(СтруктураПараметровРасчета, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("Резерв",        СтруктураПараметровРасчета.Резерв);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("Регистратор",   Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток) КАК НачальныйОстатокНУ,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход) КАК Оборот,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход) КАК ОборотНУ,
	|	ОценочныеОбязательстваОстаткиИОбороты.Резерв КАК Резерв
	|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства,
	|	ОценочныеОбязательстваОстаткиИОбороты.Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
	|	СУММА(ОценочныеОбязательстваОбороты.СуммаПриход) КАК Оборот,
	|	СУММА(ОценочныеОбязательстваОбороты.СуммаНУПриход) КАК ОборотНУ,
	|	ОценочныеОбязательстваОбороты.Резерв КАК Резерв
	|ПОМЕСТИТЬ ВТ_ТекущиеОбороты
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваОбороты
	|ГДЕ
	|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства,
	|	ОценочныеОбязательстваОбороты.Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
	|	СУММА(ВТ_ОстаткиИОбороты.НачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ВТ_ОстаткиИОбороты.НачальныйОстатокНУ) КАК НачальныйОстатокНУ,
	|	СУММА(ВТ_ОстаткиИОбороты.Оборот - ЕСТЬNULL(ВТ_ТекущиеОбороты.Оборот, 0)) КАК Оборот,
	|	СУММА(ВТ_ОстаткиИОбороты.ОборотНУ - ЕСТЬNULL(ВТ_ТекущиеОбороты.ОборотНУ, 0)) КАК ОборотНУ,
	|	ВТ_ОстаткиИОбороты.Резерв КАК Резерв
	|ИЗ
	|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОбороты КАК ВТ_ТекущиеОбороты
	|		ПО ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства = ВТ_ТекущиеОбороты.ТипОценочногоОбязательства
	|			И ВТ_ОстаткиИОбороты.Резерв = ВТ_ТекущиеОбороты.Резерв
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства,
	|	ВТ_ОстаткиИОбороты.Резерв";
	
	ТаблицаНакопленныхРезервов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНакопленныхРезервов;
	
КонецФункции

Процедура ДополнитьПараметрыРасчетаНакопленнымиРезервами(СтруктураПараметровРасчета) Экспорт
	
	ТаблицаНакопленныхРезервов = ТаблицаНакопленныхРезервовТекущегоМесяца(СтруктураПараметровРасчета, СтруктураПараметровРасчета.Регистратор);
	
	ЗначениеРезервОтпусков                     = Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям;
	ЗначениеВзносыРезерваОтпусков              = Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам;
	ЗначениеФССНесчастныеСлучаиРезерваОтпусков = Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ;
	
	НакопленоРезервов                      = 0;
	НакопленоРезервовНУ                    = 0;
	НакопленоВзносовРезервов               = 0;
	НакопленоВзносовРезервовНУ             = 0;
	НакопленоФССНесчастныеСлучаиРезервов   = 0;
	НакопленоФССНесчастныеСлучаиРезервовНУ = 0;
	
	Если ТаблицаНакопленныхРезервов <> Неопределено Тогда
		
		НайденнаяСтрока = ТаблицаНакопленныхРезервов.Найти(ЗначениеРезервОтпусков, "ТипОценочногоОбязательства"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			НакопленоРезервов   = НайденнаяСтрока.НачальныйОстаток + НайденнаяСтрока.Оборот;
			НакопленоРезервовНУ = НайденнаяСтрока.НачальныйОстатокНУ + НайденнаяСтрока.ОборотНУ;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаНакопленныхРезервов.Найти(ЗначениеВзносыРезерваОтпусков, "ТипОценочногоОбязательства"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			НакопленоВзносовРезервов   = НайденнаяСтрока.НачальныйОстаток + НайденнаяСтрока.Оборот;
			НакопленоВзносовРезервовНУ = НайденнаяСтрока.НачальныйОстатокНУ + НайденнаяСтрока.ОборотНУ;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаНакопленныхРезервов.Найти(ЗначениеФССНесчастныеСлучаиРезерваОтпусков, "ТипОценочногоОбязательства"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			НакопленоФССНесчастныеСлучаиРезервов   = НайденнаяСтрока.НачальныйОстаток + НайденнаяСтрока.Оборот;
			НакопленоФССНесчастныеСлучаиРезервовНУ = НайденнаяСтрока.НачальныйОстатокНУ + НайденнаяСтрока.ОборотНУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ВсегоНакопленоРезервов   = НакопленоРезервов + НакопленоВзносовРезервов + НакопленоФССНесчастныеСлучаиРезервов;
	ВсегоНакопленоРезервовНУ = НакопленоРезервовНУ + НакопленоВзносовРезервовНУ + НакопленоФССНесчастныеСлучаиРезервовНУ;
	
	СтруктураПараметровРасчета.Вставить("НакопленоРезервов",                      НакопленоРезервов);
	СтруктураПараметровРасчета.Вставить("НакопленоВзносовРезервов",               НакопленоВзносовРезервов);
	СтруктураПараметровРасчета.Вставить("НакопленоФССНесчастныеСлучаиРезервов",   НакопленоФССНесчастныеСлучаиРезервов);
	СтруктураПараметровРасчета.Вставить("ВсегоНакопленоРезервов",                 ВсегоНакопленоРезервов);
	СтруктураПараметровРасчета.Вставить("НакопленоРезервовНУ",                    НакопленоРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НакопленоВзносовРезервовНУ",             НакопленоВзносовРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НакопленоФССНесчастныеСлучаиРезервовНУ", НакопленоФССНесчастныеСлучаиРезервовНУ);
	СтруктураПараметровРасчета.Вставить("ВсегоНакопленоРезервовНУ",               ВсегоНакопленоРезервовНУ);
	
КонецПроцедуры

Процедура НакопленныеРезервыПереведенныхСотрудников(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета) Экспорт
	
	ТаблицаЗачисленныхСотрудников = ПараметрыРасчетаОбязательств.Скопировать(Новый Структура("Зачислен", Истина));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники",  ТаблицаЗачисленныхСотрудников.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("Период",      НачалоМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("Резерв",      СтруктураПараметровРасчета.Резерв);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник КАК Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток КАК СуммаРезерваОстаток,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовОстаток КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиОстаток КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваНУОстаток КАК СуммаРезерваНУОстаток,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовНУОстаток КАК СуммаРезерваСтраховыхВзносовНУОстаток,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиНУОстаток КАК СуммаРезерваФССНесчастныеСлучаиНУОстаток
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Остатки(
	|			&Период,
	|			Сотрудник В (&Сотрудники)
	|				И Организация <> &Организация
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваПоСотрудникамОстатки";
	
	ТаблицаОстатковЗачисленных = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураПараметровРасчета.Свойство("НакопленоРезервов") Тогда
		НакопленоРезервов = ТаблицаОстатковЗачисленных.Итог("СуммаРезерваОстаток")
			+ СтруктураПараметровРасчета.НакопленоРезервов;
		НакопленоВзносовРезервов = ТаблицаОстатковЗачисленных.Итог("СуммаРезерваСтраховыхВзносовОстаток")
			+ СтруктураПараметровРасчета.НакопленоВзносовРезервов;
		НакопленоФССНесчастныеСлучаиРезервов = ТаблицаОстатковЗачисленных.Итог("СуммаРезерваФССНесчастныеСлучаиОстаток")
			+ СтруктураПараметровРасчета.НакопленоФССНесчастныеСлучаиРезервов;
		
		НакопленоРезервовНУ = ТаблицаОстатковЗачисленных.Итог("СуммаРезерваНУОстаток")
			+ СтруктураПараметровРасчета.НакопленоРезервовНУ;
		НакопленоВзносовРезервовНУ = ТаблицаОстатковЗачисленных.Итог("СуммаРезерваСтраховыхВзносовНУОстаток")
			+ СтруктураПараметровРасчета.НакопленоВзносовРезервовНУ;
		НакопленоФССНесчастныеСлучаиРезервовНУ = ТаблицаОстатковЗачисленных.Итог("СуммаРезерваФССНесчастныеСлучаиНУОстаток")
			+ СтруктураПараметровРасчета.НакопленоФССНесчастныеСлучаиРезервовНУ;
		
		ВсегоНакопленоРезервов   = НакопленоРезервов + НакопленоВзносовРезервов + НакопленоФССНесчастныеСлучаиРезервов;
		ВсегоНакопленоРезервовНУ = НакопленоРезервовНУ + НакопленоВзносовРезервовНУ + НакопленоФССНесчастныеСлучаиРезервовНУ;
		
		СтруктураПараметровРасчета.Вставить("НакопленоРезервов",                      НакопленоРезервов);
		СтруктураПараметровРасчета.Вставить("НакопленоВзносовРезервов",               НакопленоВзносовРезервов);
		СтруктураПараметровРасчета.Вставить("НакопленоФССНесчастныеСлучаиРезервов",   НакопленоФССНесчастныеСлучаиРезервов);
		СтруктураПараметровРасчета.Вставить("ВсегоНакопленоРезервов",                 ВсегоНакопленоРезервов);
		СтруктураПараметровРасчета.Вставить("НакопленоРезервовНУ",                    НакопленоРезервовНУ);
		СтруктураПараметровРасчета.Вставить("НакопленоВзносовРезервовНУ",             НакопленоВзносовРезервовНУ);
		СтруктураПараметровРасчета.Вставить("НакопленоФССНесчастныеСлучаиРезервовНУ", НакопленоФССНесчастныеСлучаиРезервовНУ);
		СтруктураПараметровРасчета.Вставить("ВсегоНакопленоРезервовНУ",               ВсегоНакопленоРезервовНУ);
	КонецЕсли;
	
	СтруктураПараметровРасчета.Вставить("ТаблицаОстатковЗачисленных",              ТаблицаОстатковЗачисленных);
	
КонецПроцедуры

// Возможно ранее регистрировались документы сводной корректировки обязательств.
// Такими документами корректировалась сумма обязательств без разбиения по сотрудникам.
// Такая корректировка учитывается при расчете, однако ее необходимо отразить 
// в учете в разрезе сотрудников
//
Процедура ОпределитьСуммуКорректировкиОстатков(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета)
	
	Если ПараметрыРасчетаОбязательств.Колонки.Найти("КорректировкаОбязательств") = Неопределено Тогда
		ПараметрыРасчетаОбязательств.Колонки.Добавить("КорректировкаОбязательств", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТаблицаКорректировок = ТаблицаКорректировокТекущегоМесяца(СтруктураПараметровРасчета, СтруктураПараметровРасчета.Регистратор);
	Если ТаблицаКорректировок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковИсточник = ПараметрыРасчетаОбязательств.Скопировать();
	ТаблицаОстатковИсточник.ЗаполнитьЗначения(0,"СуммаРезерва , СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи,
										|СуммаРезерваНУ , СуммаРезерваСтраховыхВзносовНУ, СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ТаблицаОстатков = ТаблицаОстатковИсточник.Скопировать();
	
	ТаблицаОстатков.Свернуть("Сотрудник, СтатьяФинансирования, КорректировкаОбязательств",
		"СуммаРезерваИсчислено, СуммаРезерваСтраховыхВзносовИсчислено, СуммаРезерваФССНесчастныеСлучаиИсчислено,
		|СуммаРезерваИсчисленоНУ, СуммаРезерваСтраховыхВзносовИсчисленоНУ, СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,
		|СуммаРезерва , СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи,
		|СуммаРезерваНУ , СуммаРезерваСтраховыхВзносовНУ, СуммаРезерваФССНесчастныеСлучаиНУ");
	
	МассивОбщихОстатков = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаКорректировок Цикл
		
		МассивСтрок = ТаблицаОстатковИсточник.НайтиСтроки(Новый Структура("СтатьяФинансирования", СтрокаТаблицы.СтатьяФинансирования));
		Если МассивСтрок.Количество() = 0 Тогда
			МассивОбщихОстатков.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерва",                      "СуммаРезерваИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваСтраховыхВзносов",      "СуммаРезерваСтраховыхВзносовИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаи",   "СуммаРезерваФССНесчастныеСлучаиИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваНУ",                    "СуммаРезерваИсчисленоНУ");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваСтраховыхВзносовНУ",    "СуммаРезерваСтраховыхВзносовИсчисленоНУ");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаиНУ", "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОстатковИсточник, ТаблицаОстатков);
		
	КонецЦикла;
	
	Если МассивОбщихОстатков.Количество() <> 0 Тогда
		
		Для Каждого СтрокаМассива ИЗ МассивОбщихОстатков Цикл
			
			ТаблицаНераспределенныхОстатков = ТаблицаОстатков.Скопировать();
			ТаблицаНераспределенныхОстатков.ЗаполнитьЗначения(СтрокаМассива.СтатьяФинансирования, "СтатьяФинансирования");
			МассивСтрок = ТаблицаНераспределенныхОстатков.НайтиСтроки(Новый Структура("КорректировкаОбязательств", Ложь));
			
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерва",                      "СуммаРезерваИсчислено");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваСтраховыхВзносов",      "СуммаРезерваСтраховыхВзносовИсчислено");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаи",   "СуммаРезерваФССНесчастныеСлучаиИсчислено");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваНУ",                    "СуммаРезерваИсчисленоНУ");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваСтраховыхВзносовНУ",    "СуммаРезерваСтраховыхВзносовИсчисленоНУ");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаиНУ", "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНераспределенныхОстатков, ТаблицаОстатков);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОстатков", ТаблицаОстатков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.СуммаРезерва КАК СуммаРезерваОстаток,
	|	ТаблицаОстатков.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	ТаблицаОстатков.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	ТаблицаОстатков.СуммаРезерваНУ КАК СуммаРезерваОстатокНУ,
	|	ТаблицаОстатков.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	ТаблицаОстатков.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	ТаблицаОстатков.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиРезервов
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиРезервов.Сотрудник КАК Сотрудник,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваОстаток) КАК СуммаРезерва,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстаток) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваОстатокНУ) КАК СуммаРезерваНУ,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстатокНУ) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстатокНУ) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_ОстаткиРезервов.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ИСТИНА КАК КорректировкаОбязательств
	|ИЗ
	|	ВТ_ОстаткиРезервов КАК ВТ_ОстаткиРезервов
	|ГДЕ
	|	(ВТ_ОстаткиРезервов.СуммаРезерваОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваОстатокНУ <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстатокНУ <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстатокНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиРезервов.Сотрудник,
	|	ВТ_ОстаткиРезервов.СтатьяФинансирования";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ПараметрыРасчетаОбязательств);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьПоМассиву(СтрокаТаблицы, МассивИсточник, ИмяКолонки, ИмяКолонкиБазы) Экспорт
	
	РаспределяемаяСумма = СтрокаТаблицы[ИмяКолонки];
	
	Если РаспределяемаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИсточник.Количество() <> 0 Тогда
		МассивСтарыхСумм = Новый Массив;
		Для Каждого Строка ИЗ МассивИсточник Цикл
			МассивСтарыхСумм.Добавить(Строка[ИмяКолонкиБазы]);
		КонецЦикла;
		МассивНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
			Для НомерЗаписи = 1 По МассивНовыхСумм.Количество() Цикл
				МассивИсточник[НомерЗаписи-1][ИмяКолонки] = МассивНовыхСумм[НомерЗаписи-1];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаКорректировокТекущегоМесяца(СтруктураПараметровРасчета, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("Регистратор",   Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваПриход) КАК СуммаРезерва,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваНУНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваНУПриход) КАК СуммаРезерваНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовПриход) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовНУНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовНУПриход) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиПриход) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиНУНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиНУПриход) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиИОборотыСотрудников
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация = &Организация) КАК ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваПриход) КАК СуммаРезерваПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваНУПриход) КАК СуммаРезерваНУПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовПриход) КАК СуммаРезерваСтраховыхВзносовПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовНУПриход) КАК СуммаРезерваСтраховыхВзносовНУПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиПриход) КАК СуммаРезерваФССНесчастныеСлучаиПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиНУПриход) КАК СуммаРезерваФССНесчастныеСлучаиНУПриход,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ТекущиеОборотыСотрудников
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерва - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваПриход, 0)) КАК СуммаРезерва,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваНУПриход, 0)) КАК СуммаРезерваНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваСтраховыхВзносов - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваСтраховыхВзносовПриход, 0)) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваСтраховыхВзносовНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваСтраховыхВзносовНУПриход, 0)) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаи - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаиПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаиНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаиНУПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_ОстаткиИОборотыСотрудников.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиСотрудников
	|ИЗ
	|	ВТ_ОстаткиИОборотыСотрудников КАК ВТ_ОстаткиИОборотыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОборотыСотрудников КАК ВТ_ТекущиеОборотыСотрудников
	|		ПО ВТ_ОстаткиИОборотыСотрудников.СтатьяФинансирования = ВТ_ТекущиеОборотыСотрудников.СтатьяФинансирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОборотыСотрудников.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерва,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ОценочныеОбязательстваОстаткиИОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиИОборотыСводные
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация = &Организация) КАК ОценочныеОбязательстваОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОстаткиИОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваНУПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовНУПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиНУПриход,
	|	ОценочныеОбязательстваОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ТекущиеОборотыСводные
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ОценочныеОбязательстваОбороты
	|ГДЕ
	|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерва - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваПриход, 0)) КАК СуммаРезерва,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваНУПриход, 0)) КАК СуммаРезерваНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваСтраховыхВзносов - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваСтраховыхВзносовПриход, 0)) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваСтраховыхВзносовНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваСтраховыхВзносовНУПриход, 0)) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваФССНесчастныеСлучаи - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваФССНесчастныеСлучаиПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваФССНесчастныеСлучаиНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваФССНесчастныеСлучаиНУПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_ОстаткиИОборотыСводные.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиСводные
	|ИЗ
	|	ВТ_ОстаткиИОборотыСводные КАК ВТ_ОстаткиИОборотыСводные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОборотыСводные КАК ВТ_ТекущиеОборотыСводные
	|		ПО ВТ_ОстаткиИОборотыСводные.СтатьяФинансирования = ВТ_ТекущиеОборотыСводные.СтатьяФинансирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОборотыСводные.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерва, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерва, 0)) КАК СуммаРезерва,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваНУ, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваНУ, 0)) КАК СуммаРезерваНУ,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваСтраховыхВзносов, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваСтраховыхВзносов, 0)) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваСтраховыхВзносовНУ, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваСтраховыхВзносовНУ, 0)) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваФССНесчастныеСлучаи, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваФССНесчастныеСлучаи, 0)) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваФССНесчастныеСлучаиНУ, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваФССНесчастныеСлучаиНУ, 0)) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ЕСТЬNULL(ВТ_ОстаткиСводные.СтатьяФинансирования, ВТ_ОстаткиСотрудников.СтатьяФинансирования) КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_Итоги
	|ИЗ
	|	ВТ_ОстаткиСводные КАК ВТ_ОстаткиСводные
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОстаткиСотрудников КАК ВТ_ОстаткиСотрудников
	|		ПО ВТ_ОстаткиСводные.СтатьяФинансирования = ВТ_ОстаткиСотрудников.СтатьяФинансирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТ_ОстаткиСводные.СтатьяФинансирования, ВТ_ОстаткиСотрудников.СтатьяФинансирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоги.СуммаРезерва КАК СуммаРезерва,
	|	ВТ_Итоги.СуммаРезерваНУ КАК СуммаРезерваНУ,
	|	ВТ_Итоги.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
	|	ВТ_Итоги.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_Итоги.СтатьяФинансирования КАК СтатьяФинансирования
	|ИЗ
	|	ВТ_Итоги КАК ВТ_Итоги
	|ГДЕ
	|	(ВТ_Итоги.СуммаРезерва <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваНУ <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваСтраховыхВзносов <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваСтраховыхВзносовНУ <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаи <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаиНУ <> 0)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДополнитьПеренесеннымиОстатками(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета)
	
	Если НЕ СтруктураПараметровРасчета.Свойство("ТаблицаОстатковЗачисленных") Тогда
		Возврат;
	Иначе
		ТаблицаОстатковЗачисленных = СтруктураПараметровРасчета.ТаблицаОстатковЗачисленных;
	КонецЕсли;
	
	Если ТаблицаОстатковЗачисленных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаОстатковЗачисленных Цикл
		
		НоваяСтрока   = ПараметрыРасчетаОбязательств.Добавить();
		НоваяСтрока.Сотрудник                         = СтрокаТаблицы.Сотрудник;
		НоваяСтрока.СтатьяФинансирования              = СтрокаТаблицы.СтатьяФинансирования;
		НоваяСтрока.СуммаРезерва                      = СтрокаТаблицы.СуммаРезерваОстаток;
		НоваяСтрока.СуммаРезерваНУ                    = СтрокаТаблицы.СуммаРезерваНУОстаток;
		НоваяСтрока.СуммаРезерваСтраховыхВзносов      = СтрокаТаблицы.СуммаРезерваСтраховыхВзносовОстаток;
		НоваяСтрока.СуммаРезерваСтраховыхВзносовНУ    = СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУОстаток;
		НоваяСтрока.СуммаРезерваФССНесчастныеСлучаи   = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиОстаток;
		НоваяСтрока.СуммаРезерваФССНесчастныеСлучаиНУ = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУОстаток;
		
		СтрокаПорядка = ПараметрыРасчетаОбязательств.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
		Если СтрокаПорядка <> Неопределено Тогда
			НоваяСтрока.Порядок = СтрокаПорядка.Порядок;
		КонецЕсли;
		
	КонецЦикла;
	
Конецпроцедуры

Процедура ДополнитьОстаткамиЗачисленных(ОценочныеОбязательстваПоСотрудникам, РасчетРезервов)
	
	ТаблицаОстатковЗачисленных = РасчетРезервов.Скопировать(Новый Структура("Зачислен", Истина));
	
	Если ТаблицаОстатковЗачисленных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаОстатковЗачисленных Цикл
		
		НоваяСтрока   = ОценочныеОбязательстваПоСотрудникам.Добавить();
		НоваяСтрока.Сотрудник                         = СтрокаТаблицы.Сотрудник;
		НоваяСтрока.Подразделение                     = СтрокаТаблицы.Подразделение;
		НоваяСтрока.МестоВСтруктуреПредприятия        = СтрокаТаблицы.МестоВСтруктуреПредприятия;
		НоваяСтрока.СтатьяФинансирования              = СтрокаТаблицы.СтатьяФинансирования;
		НоваяСтрока.СуммаРезерва                      = СтрокаТаблицы.СуммаРезерваНакоплено;
		НоваяСтрока.СуммаРезерваНУ                    = СтрокаТаблицы.СуммаРезерваНакопленоНУ;
		НоваяСтрока.СуммаРезерваСтраховыхВзносов      = СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНакоплено;
		НоваяСтрока.СуммаРезерваСтраховыхВзносовНУ    = СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНакопленоНУ;
		НоваяСтрока.СуммаРезерваФССНесчастныеСлучаи   = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНакоплено;
		НоваяСтрока.СуммаРезерваФССНесчастныеСлучаиНУ = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ;
		
		СтрокаПорядка = ОценочныеОбязательстваПоСотрудникам.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
		Если СтрокаПорядка <> Неопределено Тогда
			НоваяСтрока.Порядок = СтрокаПорядка.Порядок;
		КонецЕсли;
		
	КонецЦикла;
	
Конецпроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

// Возвращает перечень (фиксированный массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//		ИсхСумма - распределяемая сумма.
//		МассивКоэф - массив коэффициентов распределения.
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт
 
	Возврат ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(
		ИсхСумма, МассивКоэф, Точность);
 
КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, НаборСтрок, ИмяКолонки, ИмяКолонкиБазы = "", ОграничиватьИсходнымЗначением = Ложь) Экспорт

	Если РаспределяемаяСумма <> 0 Тогда
		МассивСтарыхСумм = Новый Массив;
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			ИмяКолонкиБазы = ИмяКолонки;
		КонецЕсли;
		Для Каждого СтрокаМассива ИЗ НаборСтрок Цикл
			МассивСтарыхСумм.Добавить(СтрокаМассива[ИмяКолонкиБазы]);
		КонецЦикла;
		МассивНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
			Для ИндексЗначения = 0 ПО МассивНовыхСумм.Количество()-1 Цикл
				ЗаменитьЗначение = Истина;
				Если ОграничиватьИсходнымЗначением Тогда
					ЗаменитьЗначение = НаборСтрок[ИндексЗначения][ИмяКолонки] > МассивНовыхСумм[ИндексЗначения];
				КонецЕсли;
				Если ЗаменитьЗначение Тогда
					НаборСтрок[ИндексЗначения][ИмяКолонки] = МассивНовыхСумм[ИндексЗначения];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	Иначе
		Для Каждого СтрокаМассива ИЗ НаборСтрок Цикл
			СтрокаМассива[ИмяКолонки] = 0;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьМассивСотрудников(МассивСотрудников, Таблица) Экспорт
	
	ТаблицаИсточник = Таблица.Скопировать(,"Сотрудник");
	ТаблицаИсточник.Свернуть("Сотрудник");
	
	Если МассивСотрудников.Количество() = 0 Тогда
		МассивСотрудников = ТаблицаИсточник.ВыгрузитьКолонку("Сотрудник");
	Иначе
		Для Каждого СтрокаТаблицы ИЗ ТаблицаИсточник Цикл
			Если МассивСотрудников.Найти(СтрокаТаблицы.Сотрудник) = Неопределено Тогда
				МассивСотрудников.Добавить(СтрокаТаблицы.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВычеркнутьПериодыРанееВыполненныхНачисленийРезервов(ТаблицаСотрудников, Начисления, НастройкаРезервов) Экспорт
	
	РанееРассчитанныеПериоды = ИнформацияОРанееВыполненныхНачисленияхРезервов(ТаблицаСотрудников, НастройкаРезервов);
	Если РанееРассчитанныеПериоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив;
	
	Отбор = Новый Структура("Сотрудник");
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(РанееРассчитанныеПериоды , "Сотрудник", Истина);
	Для Каждого СтрокаМассиваСотрудников Из МассивСотрудников Цикл
		Отбор.Сотрудник = СтрокаМассиваСотрудников;
		МассивСтрок = Начисления.НайтиСтроки(Отбор);
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			МассивСтрокКУдалению.Добавить(СтрокаМассива);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
		Начисления.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры	

Функция ИнформацияОРанееВыполненныхНачисленияхРезервов(ТаблицаСотрудников, НастройкаРезервов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",            НастройкаРезервов.Организация);
	Запрос.УстановитьПараметр("Резерв",                 НастройкаРезервов.Резерв);
	Запрос.УстановитьПараметр("МесяцНачисления",        НастройкаРезервов.Период);
	Запрос.УстановитьПараметр("ВидОперации",            НастройкаРезервов.ВидОперации);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", НастройкаРезервов.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаСотрудников",     ТаблицаСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыПоОплатеТруда.Ссылка КАК Ссылка,
	|	РезервыПоОплатеТруда.МесяцНачисления КАК МесяцНачисления
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.РезервыПоОплатеТруда КАК РезервыПоОплатеТруда
	|ГДЕ
	|	РезервыПоОплатеТруда.Проведен
	|	И РезервыПоОплатеТруда.МесяцНачисления = &МесяцНачисления
	|	И РезервыПоОплатеТруда.Организация = &Организация
	|	И РезервыПоОплатеТруда.Ссылка <> &ИсключаемыйРегистратор
	|	И РезервыПоОплатеТруда.ВидОперации = &ВидОперации
	|	И РезервыПоОплатеТруда.Резерв = &Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Ссылка КАК Ссылка,
	|	ВТДокументы.МесяцНачисления КАК МесяцНачисления,
	|	РезервыПоОплатеТрудаНачисления.Сотрудник КАК Сотрудник,
	|	РезервыПоОплатеТрудаНачисления.Подразделение КАК Подразделение
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РезервыПоОплатеТруда.Начисления КАК РезервыПоОплатеТрудаНачисления
	|		ПО ВТДокументы.Ссылка = РезервыПоОплатеТрудаНачисления.Ссылка
	|ГДЕ
	|	РезервыПоОплатеТрудаНачисления.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТСотрудники.Сотрудник
	|			ИЗ
	|				ВТСотрудники)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ОписаниеДанныхДляЗаполненияТаблицДокумента() Экспорт
	
	ДанныеЗаполнения = Новый Структура(
		"Начисления,
		|Взносы,
		|РасчетРезервов,
		|ОценочныеОбязательстваПоСотрудникам,
		|ОценочныеОбязательства");
	
	// По умолчанию это перечислимые коллекции.
	ДанныеЗаполнения.Начисления                          = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Взносы                              = Новый ТаблицаЗначений;
	ДанныеЗаполнения.РасчетРезервов                      = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ОценочныеОбязательства              = Новый ТаблицаЗначений;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Процедура дополняет таблицу недостающими колонками
//
// Параметры:
//  Таблица - ТаблицаЗначений
//
Процедура ДополнитьНедостающимиКолонками(Таблица) Экспорт
	
	Если Таблица.Колонки.Найти("ОблагаетсяЕНВД") = Неопределено Тогда
		Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("КорректировкаОбязательств") = Неопределено Тогда
		Таблица.Колонки.Добавить("КорректировкаОбязательств", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("Порядок") = Неопределено Тогда
		Таблица.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("МестоВСтруктуреПредприятия") = Неопределено Тогда
		Таблица.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу с состоянием сотрудников на указанную дату
//
// Параметры:
//  Организация - СправочникСсылка.Организации, текущая организация.
//  Сотрудники  - Массив, сотрудники,
//				по которым требуется получить сведения
//  Период     - дата, месяц, на конец которого требуется получить сведения.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками "Сотрудник", "Уволен", "Перемещен", "Зачислен", "Зарезервирован"
//  содержится информация о сотруднике и его статусе в текущем месяце.
//
Функция СостоянияСотрудниковДляРасчетаОценочныхОбязательств(Организация, Сотрудники, Период) Экспорт
	
	Возврат РезервыПоОплатеТрудаВнутренний.СостоянияСотрудниковДляРасчетаОценочныхОбязательств(Организация, Сотрудники, Период);
	
КонецФункции

Процедура ДополнитьТаблицуРасчетаКадровымСостоянием(Начисления, Организация, Период) Экспорт
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	ТаблицаСостоянияСотрудников = РезервыПоОплатеТруда.СостоянияСотрудниковДляРасчетаОценочныхОбязательств(Организация, МассивСотрудников, Период);
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянияСотрудников Цикл
		МассивСтрок = Начисления.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник));
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(СтрокаМассива, СтрокаТаблицы, "Зачислен,Перемещен,Уволен,Зарезервирован");
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиДействующихРезервовДляОтраженияВУчете(Организация, ПериодРегистрации)
	
	НастройкиДействующихРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ОписаниеНастройкиДействующихРезервов();
	НастройкиДействующихРезервов.Организация = Организация;
	
	НастройкиДействующихРезервовПрошлогоГода = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкиДействующихРезервов(Организация, ДобавитьМесяц(ПериодРегистрации, -12));
	НастройкиДействующихРезервовТекущегоГода = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.НастройкиДействующихРезервов(Организация, ПериодРегистрации);
	
	СоответствиеНастроек   = НастройкиДействующихРезервовПрошлогоГода.СоответствиеНастроек;
	СоответствиеНачислений = НастройкиДействующихРезервовПрошлогоГода.СоответствиеНачислений;
	Для Каждого НастройкаРезерва Из СоответствиеНастроек Цикл
		Если НастройкаРезерва.Значение.ВидРезерва <> Перечисления.ВидыРезервовПоОплатеТруда.Отпуск Тогда
			Если НастройкаРезерва.Значение.ВыплатаВРасчетномПериоде Или Месяц(ПериодРегистрации) = 12 Тогда
				// Исключаем резервы, которые выплачиваются в периоде начисления: они должны быть погашены в декабре предыдущего года.
				// Для остальных резервов, контролируем расчетный период - разрешен любой, кроме декабря.
				Продолжить;
			КонецЕсли;
			НастройкиДействующихРезервов.СоответствиеНастроек.Вставить(НастройкаРезерва.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НастройкаРезерва.Значение));
			НастройкиДействующихРезервов.СоответствиеНачислений.Вставить(НастройкаРезерва.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СоответствиеНачислений[НастройкаРезерва.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеНастроек      = НастройкиДействующихРезервовТекущегоГода.СоответствиеНастроек;
	СоответствиеНачислений    = НастройкиДействующихРезервовТекущегоГода.СоответствиеНачислений;
	СоответствиеВидовОтпусков = Неопределено;
	НастройкиДействующихРезервовТекущегоГода.Свойство("СоответствиеВидовОтпусков", СоответствиеВидовОтпусков);
	
	Для Каждого НастройкаРезерва Из СоответствиеНастроек Цикл
		Если НастройкаРезерва.Значение.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск Тогда
			НастройкиДействующихРезервов.СоответствиеНастроек.Вставить(НастройкаРезерва.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НастройкаРезерва.Значение));
			НастройкиДействующихРезервов.СоответствиеНачислений.Вставить(НастройкаРезерва.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СоответствиеНачислений[НастройкаРезерва.Ключ]));
			Если СоответствиеВидовОтпусков <> Неопределено Тогда
				НастройкиДействующихРезервов.СоответствиеВидовОтпусков.Вставить(НастройкаРезерва.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СоответствиеВидовОтпусков[НастройкаРезерва.Ключ]));
			КонецЕсли;
		ИначеЕсли НастройкаРезерва.Значение.ВыплатаВРасчетномПериоде И Месяц(ПериодРегистрации) = 12 Тогда
			// Резервы, которые выплачиваются в периоде начисления, учитываем только в декабре расчетного периода.
			НастройкиДействующихРезервов.СоответствиеНастроек.Вставить(НастройкаРезерва.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НастройкаРезерва.Значение));
			НастройкиДействующихРезервов.СоответствиеНачислений.Вставить(НастройкаРезерва.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СоответствиеНачислений[НастройкаРезерва.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиДействующихРезервов;
	
КонецФункции

Функция УстановитьТаблицуРасчетРезервов(ТаблицаРасчетРезервов = Неопределено)
	
	Таблица = РезервыПоОплатеТруда.ТаблицаРасчетРезервов();
	Если ТаблицаРасчетРезервов <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаРасчетРезервов Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция УстановитьТаблицуОценочныеОбязательстваПоСотрудникам(ТаблицаОценочныеОбязательстваПоСотрудникам = Неопределено)
	
	Если ТаблицаОценочныеОбязательстваПоСотрудникам = Неопределено Тогда
		Возврат РезервыПоОплатеТруда.ТаблицаОценочныеОбязательстваПоСотрудникам();
	Иначе
		Возврат ТаблицаОценочныеОбязательстваПоСотрудникам;
	КонецЕсли;
	
КонецФункции

Функция УстановитьТаблицуОценочныеОбязательства(ТаблицаОценочныеОбязательства = Неопределено)
	
	Если ТаблицаОценочныеОбязательства = Неопределено Тогда
		Возврат РезервыПоОплатеТруда.ТаблицаОценочныеОбязательства();
	Иначе
		Возврат ТаблицаОценочныеОбязательства;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеПериодаНастройки(НачалоПериода, КонецПериода)
	
	Если НачалоДня(НачалоПериода) = НачалоГода(НачалоПериода)
		И КонецДня(КонецПериода) = КонецГода(КонецПериода) Тогда
		ПредставлениеПериодаНастройки = "на " + Формат(НачалоПериода, "ДФ=yyyy") + " г.";
	Иначе
		ПредставлениеПериодаНастройки = "на период " + Формат(НачалоПериода, "ДФ='MMMM yyyy'") + 
			" - " + Формат(КонецПериода, "ДФ='MMMM yyyy'");
	КонецЕсли;
		
	Возврат ПредставлениеПериодаНастройки;
	
КонецФункции

Процедура ДополнитьТаблицуСведениямиОбОсобенностяхОтпусков(НачисленнаяЗарплатаИВзносы) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ДополнитьТаблицуСведениямиОбОсобенностяхОтпусков(НачисленнаяЗарплатаИВзносы);
	
КонецПроцедуры

Функция БазовыеНачисленияРезерваПоОплатеТруда(Организация, Резерв, Период)
	
	Возврат РезервыПоОплатеТрудаВнутренний.БазовыеНачисленияРезерваПоОплатеТруда(Организация, Резерв, Период);
	
КонецФункции

Процедура ЗаполнитьСпособОтражения(ТаблицаРасчетРезервов, Реквизиты)
	
	НастройкиРезерва = НастройкиРезерва(Реквизиты.Организация, Реквизиты.Резерв, Реквизиты.Период);
	ЭтоРезервОтпусков = НастройкиРезерва.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	НормативныйМетод = НастройкиРезерва.НормативныйМетодБУ
		Или (НастройкиРезерва.НормативныйМетодНУ И НастройкиРезерва.ФормироватьРезервНУ);
	
	ЭтоСписание      = Реквизиты.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание;
	ЭтоКорректировка = Реквизиты.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
		НачалоПериода = НачалоГода(Реквизиты.Период);
	Иначе
		НачалоПериода = НачалоМесяца(Реквизиты.Период);
	КонецЕсли;
	КонецПериода =  КонецМесяца(Реквизиты.Период);
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчетРезервов, "Сотрудник", Истина);
	
	БазовыеНачисления = Неопределено;
	Если Не ЭтоРезервОтпусков Или НормативныйМетод Тогда
		Если НастройкиРезерва.НормативныйМетодНУ И НастройкиРезерва.ФормироватьРезервНУ Тогда
			БазовыеНачисления = РезервыПоОплатеТрудаБазовый.БазовыеНачисленияРезерваПоОплатеТруда(Реквизиты.Организация, Реквизиты.Резерв, Реквизиты.Период);
		Иначе
			БазовыеНачисления = БазовыеНачисленияРезерваПоОплатеТруда(Реквизиты.Организация, Реквизиты.Резерв, Реквизиты.Период);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаОтраженияВУчете = ОтражениеЗарплатыВБухучете.БухучетБазовыхНачисленийОценочныхОбязательств(Реквизиты.Организация,
		Сотрудники,
		НачалоПериода,
		КонецПериода,
		ЭтоРезервОтпусков И Не ЗначениеЗаполнено(БазовыеНачисления),
		БазовыеНачисления);
		
	// По отрицательным начислениям не распределяем
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаОтраженияВУчете Цикл
		Если СтрокаТаблицы.Сумма <= 0 Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТаблицаОтраженияВУчете.Удалить(СтрокаМассива);
	КонецЦикла;
		
	ИменаКолонокЗначений = "Сотрудник, ПодразделениеУчетаЗатрат, МестоВСтруктуреПредприятия, СтатьяФинансирования, СпособОтраженияЗарплатыВБухучете";
	ТаблицаОтраженияВУчете.Свернуть(ИменаКолонокЗначений, "Сумма");
	ТаблицаОтраженияВУчете.Колонки.ПодразделениеУчетаЗатрат.Имя = "Подразделение";
	
	// Обслуживание ситуации, когда сведений о способе отражения не поступило в первичной таблице
	СотрудникиУчтенные = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОтраженияВУчете, "Сотрудник", Истина);
	СотрудникиДляДополнения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Сотрудники, СотрудникиУчтенные);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Подразделение",                    Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ПараметрыОтбора.Вставить("СтатьяФинансирования",             Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	ПараметрыОтбора.Вставить("СпособОтраженияЗарплатыВБухучете", Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка());
	
	ТипЗначения = ТаблицаОтраженияВУчете.Колонки.Найти("МестоВСтруктуреПредприятия").ТипЗначения.Типы()[0];
	ТипОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Если ТипОбъектаМетаданных <> Неопределено Тогда
		Если ОбщегоНазначения.ЭтоСправочник(ТипОбъектаМетаданных) Тогда
			ПараметрыОтбора.Вставить("МестоВСтруктуреПредприятия", Справочники[ТипОбъектаМетаданных.Имя].ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаОтраженияВУчетеПустые = ТаблицаОтраженияВУчете.Скопировать(ПараметрыОтбора);
	СотрудникиПустые = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОтраженияВУчетеПустые, "Сотрудник", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДляДополнения, СотрудникиПустые, Истина);
	
	Если СотрудникиДляДополнения.Количество() > 0 И ЭтоРезервОтпусков Тогда
		БазовыеНачисленияДляДополнения = Неопределено;
		Если Не ЭтоРезервОтпусков Тогда
			БазовыеНачисленияДляДополнения = БазовыеНачисленияРезерваПоОплатеТруда(Реквизиты.Организация, Реквизиты.Резерв, Реквизиты.Период);
		КонецЕсли;
		ТаблицаОтраженияВУчетеДляДополнения = ОтражениеЗарплатыВБухучете.БухучетБазовыхНачисленийОценочныхОбязательств(Реквизиты.Организация,
			СотрудникиДляДополнения,
			НачалоПериода,
			КонецПериода,
			ЭтоРезервОтпусков,
			БазовыеНачисленияДляДополнения);
			Если ТаблицаОтраженияВУчетеДляДополнения.Количество() > 0 Тогда
				Для Каждого Сотрудник Из СотрудникиДляДополнения Цикл
					СтрокиТаблицы = ТаблицаОтраженияВУчетеДляДополнения.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
					Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					ПараметрыОтбора.Вставить("Сотрудник", СтрокиТаблицы);
						МассивСтрок = ТаблицаОтраженияВУчете.НайтиСтроки(ПараметрыОтбора);
						Для Каждого ЗаписьМассива Из МассивСтрок Цикл
							ТаблицаОтраженияВУчете.Удалить(ЗаписьМассива);
						КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОтраженияВУчетеДляДополнения, ТаблицаОтраженияВУчете);
	КонецЕсли;
	
	ТаблицаДобавленныхСтрок = ТаблицаРасчетРезервов.СкопироватьКолонки();
	ИменаКолонокЗначенийРезервов        = "СуммаРезерва,СуммаРезерваНУ,СуммаРезерваИсчислено,СуммаРезерваИсчисленоНУ,СуммаРезерваНакоплено,СуммаРезерваНакопленоНУ";
	ИменаКолонокЗначенийВзносовРезервов = "СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваСтраховыхВзносовИсчислено,СуммаРезерваСтраховыхВзносовИсчисленоНУ,СуммаРезерваСтраховыхВзносовНакоплено,СуммаРезерваСтраховыхВзносовНакопленоНУ";
	ИменаКолонокЗначенийФССНСРезервов   = "СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ,СуммаРезерваФССНесчастныеСлучаиИсчислено,СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,СуммаРезерваФССНесчастныеСлучаиНакоплено,СуммаРезерваФССНесчастныеСлучаиНакопленоНУ";
	ИменаКолонокЗначений = ИменаКолонокЗначенийРезервов + "," + ИменаКолонокЗначенийВзносовРезервов + "," + ИменаКолонокЗначенийФССНСРезервов;
	МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКолонокЗначений);
	
	МассивСтрокКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетРезервов Цикл
		Отбор = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
		МассивСтрокСотрудника = ТаблицаОтраженияВУчете.НайтиСтроки(Отбор);
		КоличествоСтрокСотрудника = МассивСтрокСотрудника.Количество();
		
		КопируемыеСвойства = "Подразделение,МестоВСтруктуреПредприятия";
		Если Не СтрокаТаблицы.Перемещен Тогда
			КопируемыеСвойства = КопируемыеСвойства + ",СпособОтраженияЗарплатыВБухучете";
		КонецЕсли;
		Если Не (СтрокаТаблицы.Уволен И (ЭтоСписание Или ЭтоКорректировка)) Тогда
			КопируемыеСвойства = КопируемыеСвойства + ",СтатьяФинансирования";
		КонецЕсли;
		
		Если КоличествоСтрокСотрудника = 1 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МассивСтрокСотрудника[0], КопируемыеСвойства);
		ИначеЕсли КоличествоСтрокСотрудника > 1 Тогда
			
			ЕстьБазаРаспределения = Ложь;
			Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
				Если ЕстьБазаРаспределения Тогда
					Прервать;
				КонецЕсли;
				ЕстьБазаРаспределения = СтрокаТаблицы[ИмяКолонки] <> 0;
			КонецЦикла;
			
			Если Не ЕстьБазаРаспределения Тогда
				НастройкиПоУмолчанию =
					ОтражениеЗарплатыВБухучете.НастройкиБухучетаДляРаспределенияПоУмолчанию(
						Реквизиты.Организация, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицы.Сотрудник), КонецПериода);
				Если ЗначениеЗаполнено(НастройкиПоУмолчанию) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НастройкиПоУмолчанию[0], КопируемыеСвойства);
				Иначе
					Для Каждого СтрокаМассива Из МассивСтрокСотрудника Цикл
						ТекущаяСтрока = ТаблицаДобавленныхСтрок.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТаблицы, , ИменаКолонокЗначений);
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаМассива, КопируемыеСвойства);
					КонецЦикла;
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			МассивРедактируемыхСтрок = Новый Массив;
			МассивРедактируемыхСтрок.Добавить(СтрокаТаблицы);
			
			МассивЗначений = Новый Массив;
			Для Каждого СтрокаМассива Из МассивСтрокСотрудника Цикл
				МассивЗначений.Добавить(СтрокаМассива.Сумма);
			КонецЦикла;
			Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
				МассивНовыхСумм = РаспределитьПропорционально(СтрокаТаблицы[ИмяКолонки], МассивЗначений);
				Если МассивНовыхСумм <> Неопределено Тогда
					ИндексСтроки = 0;
					КоличествоСтрок = МассивНовыхСумм.Количество();
					Пока ИндексСтроки < КоличествоСтрок Цикл
						Если МассивРедактируемыхСтрок.Количество() < ИндексСтроки + 1 Тогда
							ТекущаяСтрока = ТаблицаДобавленныхСтрок.Добавить();
							ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТаблицы, , ИменаКолонокЗначений);
							МассивРедактируемыхСтрок.Добавить(ТекущаяСтрока);
						Иначе
							ТекущаяСтрока = МассивРедактируемыхСтрок[ИндексСтроки];
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, МассивСтрокСотрудника[ИндексСтроки], КопируемыеСвойства);
						
						ТекущаяСтрока[ИмяКолонки] = МассивНовыхСумм[ИндексСтроки];
						ИндексСтроки = ИндексСтроки + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтрокаТаблицы.Уволен
			И (Реквизиты.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание
			Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка) Тогда
				
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СтрокаТаблицы.Сотрудник, "ДатаУвольнения");
			Если ЗначениеЗаполнено(КадровыеДанныеСотрудника) Тогда
				НастройкиПоУмолчанию =
					ОтражениеЗарплатыВБухучете.НастройкиБухучетаДляРаспределенияПоУмолчанию(
						Реквизиты.Организация, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицы.Сотрудник),
						КадровыеДанныеСотрудника[0].ДатаУвольнения);
				Если ЗначениеЗаполнено(НастройкиПоУмолчанию) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НастройкиПоУмолчанию[0], КопируемыеСвойства);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТаблицаРасчетРезервов.Удалить(СтрокаМассива);
	КонецЦикла;
	
	КолонкиСуммирования = Новый Массив;
	КолонкиГруппировок = Новый Массив;
	Для каждого КолонкаТЗ Из ТаблицаДобавленныхСтрок.Колонки Цикл
		Если КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			КолонкиСуммирования.Добавить(КолонкаТЗ.Имя);
		Иначе
			КолонкиГруппировок.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
	КонецЦикла;
	КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ", ");
	КолонкиКопированияСтрока = СтрСоединить(КолонкиГруппировок, ", ");
	
	ТаблицаДобавленныхСтрок.Свернуть(КолонкиКопированияСтрока, КолонкиСуммирования);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДобавленныхСтрок, ТаблицаРасчетРезервов);
	
КонецПроцедуры

Функция ЭффективныеСтавкиВзносовПоДаннымОценочныхОбязательств(Организация, Период, ФизическиеЛица, НастройкаРезервов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("Период",         Период);
	Запрос.УстановитьПараметр("Резерв",         НастройкаРезервов.Резерв);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовОстаток / ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток * 100 КАК ЧИСЛО(15, 4))
	|	КОНЕЦ КАК СтавкаСтраховыхВзносов,
	|	ВЫБОР
	|		КОГДА ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиОстаток / ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток * 100 КАК ЧИСЛО(15, 4))
	|	КОНЕЦ КАК СтавкаФСС_НС
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ФизическоеЛицо В (&ФизическиеЛица)
	|				И Резерв = &Резерв) КАК ОценочныеОбязательстваПоСотрудникамОстатки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция СтавкиВзносовПоНастройкамТарифов(Организация, Период)
	
	СтавкиВзносов = Новый Структура("СтавкаСтраховыхВзносов, СтавкаФСС_НС", 0, 0);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрименяемыеТарифы = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(Период, Новый Структура("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация)));
	Если ПрименяемыеТарифы.Количество() > 0 Тогда
		ВидТарифа = ПрименяемыеТарифы[0].ВидТарифа;
	Иначе
		ВидТарифа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим");
	КонецЕсли;
	
	ТарифыСтраховыхВзносов = РегистрыСведений.ТарифыСтраховыхВзносов.СрезПоследних(Период, Новый Структура("ВидТарифа", ВидТарифа));
	Если ТарифыСтраховыхВзносов.Количество() > 0 Тогда
		ТарифСтраховыхВзносов = ТарифыСтраховыхВзносов[0];
		Если ТарифСтраховыхВзносов.Период < УчетСтраховыхВзносов.ДатаОбъединенияВзносов() Тогда
			СтавкиВзносов.СтавкаСтраховыхВзносов = ТарифСтраховыхВзносов.ПФР + ТарифСтраховыхВзносов.ПФРНакопительная + ТарифСтраховыхВзносов.ФСС + ТарифСтраховыхВзносов.ФФОМС + ТарифСтраховыхВзносов.ТФОМС;
		Иначе
			СтавкиВзносов.СтавкаСтраховыхВзносов = ТарифСтраховыхВзносов.СтавкаЕдиногоТарифа;
		КонецЕсли;
	КонецЕсли;
	
	ТарифыВзносовТравматизм = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(Период, Новый Структура("Организация", Организация));
	Если ТарифыВзносовТравматизм.Количество() > 0 Тогда
		СтавкиВзносов.СтавкаФСС_НС = ТарифыВзносовТравматизм[0].Ставка;
	КонецЕсли;
	
	Возврат СтавкиВзносов;
	
КонецФункции

Функция ДанныеПечатиДокументов(МассивОбъектов)
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезервыПоОплатеТрудаВнутренний.ЗапросДанныеПечатиДокументов(Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_Начисления.Документ КАК Документ,
	|	ВТ_Начисления.Организация КАК Организация,
	|	ВТ_Начисления.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_Начисления.Резерв КАК Резерв,
	|	ВТ_Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	|	ВТ_НастройкаПоказателей.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 1
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 1
	|								ТОГДА ВТ_Показатели.Показатель
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК Показатель1,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 1
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 1
	|								ТОГДА ВТ_Показатели.Значение
	|						КОНЕЦ
	|			КОНЕЦ, 0)) КАК Значение1,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 2
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 2
	|								ТОГДА ВТ_Показатели.Показатель
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК Показатель2,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 2
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 2
	|								ТОГДА ВТ_Показатели.Значение
	|						КОНЕЦ
	|			КОНЕЦ, 0)) КАК Значение2,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 3
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 3
	|								ТОГДА ВТ_Показатели.Показатель
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК Показатель3,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 3
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 3
	|								ТОГДА ВТ_Показатели.Значение
	|						КОНЕЦ
	|			КОНЕЦ, 0)) КАК Значение3,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 4
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 4
	|								ТОГДА ВТ_Показатели.Показатель
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК Показатель4,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 4
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 4
	|								ТОГДА ВТ_Показатели.Значение
	|						КОНЕЦ
	|			КОНЕЦ, 0)) КАК Значение4,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей = 5
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 5
	|								ТОГДА ВТ_Показатели.Показатель
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК Показатель5,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей = 5
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 5
	|								ТОГДА ВТ_Показатели.Значение
	|						КОНЕЦ
	|			КОНЕЦ, 0)) КАК Значение5,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_Показатели.КоличествоПоказателей, 0)) КАК КоличествоПоказателей,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 1
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 1
	|								ТОГДА ВТ_НастройкаПоказателей.КраткоеНаименование
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК ПоказательКраткоеНаименование1,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 2
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 2
	|								ТОГДА ВТ_НастройкаПоказателей.КраткоеНаименование
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК ПоказательКраткоеНаименование2,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 3
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 3
	|								ТОГДА ВТ_НастройкаПоказателей.КраткоеНаименование
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК ПоказательКраткоеНаименование3,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей >= 4
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 4
	|								ТОГДА ВТ_НастройкаПоказателей.КраткоеНаименование
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК ПоказательКраткоеНаименование4,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ВТ_НастройкаПоказателей.КоличествоПоказателей = 5
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НастройкаПоказателей.НомерСтроки = 5
	|								ТОГДА ВТ_НастройкаПоказателей.КраткоеНаименование
	|						КОНЕЦ
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК ПоказательКраткоеНаименование5
	|ПОМЕСТИТЬ ВТ_ЗначенияПоказателейСтроки
	|ИЗ
	|	ВТ_Начисления КАК ВТ_Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ВТ_Показатели
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкаПоказателей КАК ВТ_НастройкаПоказателей
	|			ПО ВТ_Показатели.Показатель = ВТ_НастройкаПоказателей.Показатель
	|				И ВТ_Показатели.ВидРасчетаРезерва = ВТ_НастройкаПоказателей.ВидРасчетаРезерва
	|		ПО ВТ_Начисления.ИдентификаторСтрокиВидаРасчета = ВТ_Показатели.ИдентификаторСтрокиВидаРасчета
	|			И ВТ_Начисления.ВидРасчетаРезерва = ВТ_Показатели.ВидРасчетаРезерва
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Начисления.Документ,
	|	ВТ_Начисления.Организация,
	|	ВТ_Начисления.МесяцНачисления,
	|	ВТ_Начисления.Резерв,
	|	ВТ_Начисления.ИдентификаторСтрокиВидаРасчета,
	|	ВТ_НастройкаПоказателей.ВидРасчетаРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документ.Документ КАК Документ,
	|	ВТ_Документ.Организация КАК Организация,
	|	ВТ_Документ.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_Документ.Резерв КАК Резерв,
	|	РезервыПоОплатеТрудаРасчетРезервов.Сотрудник КАК Сотрудник,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерва) КАК СуммаРезерва,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваНУ) КАК СуммаРезерваНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваНакоплено) КАК СуммаРезерваНакоплено,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваНакопленоНУ) КАК СуммаРезерваНакопленоНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваИсчислено) КАК СуммаРезерваИсчислено,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваИсчисленоНУ) КАК СуммаРезерваИсчисленоНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваСтраховыхВзносов) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваСтраховыхВзносовНУ) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваСтраховыхВзносовНакоплено) КАК СуммаРезерваСтраховыхВзносовНакоплено,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваСтраховыхВзносовНакопленоНУ) КАК СуммаРезерваСтраховыхВзносовНакопленоНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваСтраховыхВзносовИсчислено) КАК СуммаРезерваСтраховыхВзносовИсчислено,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваСтраховыхВзносовИсчисленоНУ) КАК СуммаРезерваСтраховыхВзносовИсчисленоНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваФССНесчастныеСлучаи) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНУ) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНакоплено) КАК СуммаРезерваФССНесчастныеСлучаиНакоплено,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ) КАК СуммаРезерваФССНесчастныеСлучаиНакопленоНУ,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваФССНесчастныеСлучаиИсчислено) КАК СуммаРезерваФССНесчастныеСлучаиИсчислено,
	|	СУММА(РезервыПоОплатеТрудаРасчетРезервов.СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ) КАК СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_РасчетРезервов
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезервыПоОплатеТруда.РасчетРезервов КАК РезервыПоОплатеТрудаРасчетРезервов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ПО РезервыПоОплатеТрудаРасчетРезервов.Сотрудник = Сотрудники.Ссылка
	|		ПО ВТ_Документ.Документ = РезервыПоОплатеТрудаРасчетРезервов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документ.Документ,
	|	ВТ_Документ.Организация,
	|	ВТ_Документ.МесяцНачисления,
	|	ВТ_Документ.Резерв,
	|	РезервыПоОплатеТрудаРасчетРезервов.Сотрудник,
	|	Сотрудники.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документ.Документ КАК Документ,
	|	ВТ_Документ.Организация КАК Организация,
	|	ВТ_Документ.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_Документ.Резерв КАК Резерв,
	|	ВТ_Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_РасчетРезервов.Сотрудник КАК Сотрудник,
	|	ВТ_Документ.Подразделение КАК ПодразделениеДокумента,
	|	ВТ_Начисления.Подразделение КАК Подразделение,
	|	ВТ_Начисления.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВТ_Начисления.ФормулаРасчета КАК ФормулаРасчета,
	|	ВТ_ЗначенияПоказателейСтроки.Показатель1 КАК Показатель1,
	|	ВТ_ЗначенияПоказателейСтроки.Значение1 КАК Значение1,
	|	ВТ_ЗначенияПоказателейСтроки.Показатель2 КАК Показатель2,
	|	ВТ_ЗначенияПоказателейСтроки.Значение2 КАК Значение2,
	|	ВТ_ЗначенияПоказателейСтроки.Показатель3 КАК Показатель3,
	|	ВТ_ЗначенияПоказателейСтроки.Значение3 КАК Значение3,
	|	ВТ_ЗначенияПоказателейСтроки.Показатель4 КАК Показатель4,
	|	ВТ_ЗначенияПоказателейСтроки.Значение4 КАК Значение4,
	|	ВТ_ЗначенияПоказателейСтроки.Показатель5 КАК Показатель5,
	|	ВТ_ЗначенияПоказателейСтроки.Значение5 КАК Значение5,
	|	ВТ_Начисления.Результат КАК СуммаРезерваИсчислено,
	|	ВТ_Начисления.ФондОплатыТруда КАК ФондОплатыТруда,
	|	ВТ_Начисления.НормативОтчисленийВРезерв КАК НормативОтчисленийВРезерв,
	|	ВТ_Начисления.НормативОтчисленийВРезервНУ КАК НормативОтчисленийВРезервНУ,
	|	ВТ_Начисления.РезультатНУ КАК СуммаРезерваИсчисленоНУ,
	|	ВТ_Взносы.СтраховыеВзносы КАК СтраховыеВзносы,
	|	ВТ_Взносы.ТекущаяСтавкаСтраховыхВзносов КАК ТекущаяСтавкаСтраховыхВзносов,
	|	ВТ_Взносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|	ВТ_Взносы.ТекущаяСтавкаФССНесчастныеСлучаи КАК ТекущаяСтавкаФССНесчастныеСлучаи,
	|	ВТ_Взносы.НормативОтчисленийВРезервСтраховыеВзносы КАК НормативОтчисленийВРезервСтраховыеВзносы,
	|	ВТ_Взносы.НормативОтчисленийВРезервСтраховыеВзносыНУ КАК НормативОтчисленийВРезервСтраховыеВзносыНУ,
	|	ВТ_Взносы.НормативОтчисленийВРезервФССНесчастныеСлучаи КАК НормативОтчисленийВРезервФССНесчастныеСлучаи,
	|	ВТ_Взносы.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ КАК НормативОтчисленийВРезервФССНесчастныеСлучаиНУ,
	|	ВТ_Взносы.СуммаСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносовИсчислено,
	|	ВТ_Взносы.СуммаСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовИсчисленоНУ,
	|	ВТ_Взносы.СуммаФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаиИсчислено,
	|	ВТ_Взносы.СуммаФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,
	|	ВТ_РасчетРезервов.СуммаРезерваНакоплено КАК СуммаРезерваНакоплено,
	|	ВТ_РасчетРезервов.СуммаРезерваНакопленоНУ КАК СуммаРезерваНакопленоНУ,
	|	ВТ_РасчетРезервов.СуммаРезерва КАК СуммаРезерва,
	|	ВТ_РасчетРезервов.СуммаРезерваНУ КАК СуммаРезерваНУ,
	|	ВТ_РасчетРезервов.СуммаРезерваСтраховыхВзносовНакоплено КАК СуммаРезерваСтраховыхВзносовНакоплено,
	|	ВТ_РасчетРезервов.СуммаРезерваСтраховыхВзносовНакопленоНУ КАК СуммаРезерваСтраховыхВзносовНакопленоНУ,
	|	ВТ_РасчетРезервов.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
	|	ВТ_РасчетРезервов.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ВТ_РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНакоплено КАК СуммаРезерваФССНесчастныеСлучаиНакоплено,
	|	ВТ_РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ КАК СуммаРезерваФССНесчастныеСлучаиНакопленоНУ,
	|	ВТ_РасчетРезервов.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ВТ_РасчетРезервов.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_Документ.Дата КАК Дата,
	|	ВТ_Документ.Номер КАК Номер,
	|	ВТ_ЗначенияПоказателейСтроки.КоличествоПоказателей КАК КоличествоПоказателей,
	|	ВТ_ЗначенияПоказателейСтроки.ПоказательКраткоеНаименование1 КАК ПоказательКраткоеНаименование1,
	|	ВТ_ЗначенияПоказателейСтроки.ПоказательКраткоеНаименование2 КАК ПоказательКраткоеНаименование2,
	|	ВТ_ЗначенияПоказателейСтроки.ПоказательКраткоеНаименование3 КАК ПоказательКраткоеНаименование3,
	|	ВТ_ЗначенияПоказателейСтроки.ПоказательКраткоеНаименование4 КАК ПоказательКраткоеНаименование4,
	|	ВТ_ЗначенияПоказателейСтроки.ПоказательКраткоеНаименование5 КАК ПоказательКраткоеНаименование5,
	|	ВТ_Документ.Исполнитель КАК Исполнитель,
	|	ВТ_Документ.ДолжностьИсполнителя КАК ДолжностьИсполнителя,
	|	ВТ_Документ.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(ВТ_НастройкаРасчета.НормативныйМетодБУ, ЛОЖЬ) КАК НормативныйМетодБУ,
	|	ЕСТЬNULL(ВТ_НастройкаРасчета.ФормироватьРезервНУ, ЛОЖЬ) КАК ФормироватьРезервНУ,
	|	ЕСТЬNULL(ВТ_НастройкаРасчета.НормативныйМетодНУ, ЛОЖЬ) КАК НормативныйМетодНУ,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкаРасчета.ФормироватьРезервНУ ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФормироватьРезервБУ,
	|	ЕСТЬNULL(ВТ_НастройкаРасчета.ОграничиватьНачислениеПредельнойСуммойБУ, ЛОЖЬ) КАК ОграничиватьНачислениеПредельнойСуммойБУ,
	|	ЕСТЬNULL(ВТ_НастройкаРасчета.ОграничиватьНачислениеПредельнойСуммойНУ, ЛОЖЬ) КАК ОграничиватьНачислениеПредельнойСуммойНУ,
	|	ЕСТЬNULL(ВТ_НастройкаРасчета.ПредельнаяВеличинаОтчисленийВРезервБУ, 0) КАК ПредельнаяВеличинаОтчисленийВРезервБУ,
	|	ЕСТЬNULL(ВТ_НастройкаРасчета.ПредельнаяВеличинаОтчисленийВРезервНУ, 0) КАК ПредельнаяВеличинаОтчисленийВРезервНУ,
	|	ВТ_Начисления.ФизическоеЛицоНаименование КАК ФизическоеЛицоНаименование
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Начисления КАК ВТ_Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияПоказателейСтроки КАК ВТ_ЗначенияПоказателейСтроки
	|			ПО ВТ_Начисления.ИдентификаторСтрокиВидаРасчета = ВТ_ЗначенияПоказателейСтроки.ИдентификаторСтрокиВидаРасчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Взносы КАК ВТ_Взносы
	|			ПО ВТ_Начисления.Документ = ВТ_Взносы.Документ
	|				И ВТ_Начисления.ФизическоеЛицо = ВТ_Взносы.ФизическоеЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетРезервов КАК ВТ_РасчетРезервов
	|			ПО ВТ_Начисления.Документ = ВТ_РасчетРезервов.Документ
	|				И ВТ_Начисления.Сотрудник = ВТ_РасчетРезервов.Сотрудник
	|		ПО ВТ_Документ.Документ = ВТ_Начисления.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкаРасчета КАК ВТ_НастройкаРасчета
	|		ПО ВТ_Документ.Документ = ВТ_НастройкаРасчета.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	ФизическоеЛицоНаименование,
	|	Сотрудник
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(МесяцНачисления),
	|	МАКСИМУМ(Резерв),
	|	МАКСИМУМ(ПодразделениеДокумента),
	|	МАКСИМУМ(Подразделение),
	|	СУММА(СуммаРезерваИсчислено),
	|	СУММА(СуммаРезерваИсчисленоНУ),
	|	СУММА(СуммаРезерваСтраховыхВзносовИсчислено),
	|	СУММА(СуммаРезерваСтраховыхВзносовИсчисленоНУ),
	|	СУММА(СуммаРезерваФССНесчастныеСлучаиИсчислено),
	|	СУММА(СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ),
	|	СУММА(СуммаРезерваНакоплено),
	|	СУММА(СуммаРезерваНакопленоНУ),
	|	СУММА(СуммаРезерва),
	|	СУММА(СуммаРезерваНУ),
	|	СУММА(СуммаРезерваСтраховыхВзносовНакоплено),
	|	СУММА(СуммаРезерваСтраховыхВзносовНакопленоНУ),
	|	СУММА(СуммаРезерваСтраховыхВзносов),
	|	СУММА(СуммаРезерваСтраховыхВзносовНУ),
	|	СУММА(СуммаРезерваФССНесчастныеСлучаиНакоплено),
	|	СУММА(СуммаРезерваФССНесчастныеСлучаиНакопленоНУ),
	|	СУММА(СуммаРезерваФССНесчастныеСлучаи),
	|	СУММА(СуммаРезерваФССНесчастныеСлучаиНУ),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(КоличествоПоказателей),
	|	МАКСИМУМ(Исполнитель),
	|	МАКСИМУМ(ДолжностьИсполнителя),
	|	МАКСИМУМ(ВидОперации),
	|	МАКСИМУМ(НормативныйМетодБУ),
	|	МАКСИМУМ(ФормироватьРезервНУ),
	|	МАКСИМУМ(НормативныйМетодНУ),
	|	МАКСИМУМ(ФормироватьРезервБУ),
	|	МАКСИМУМ(ОграничиватьНачислениеПредельнойСуммойБУ),
	|	МАКСИМУМ(ОграничиватьНачислениеПредельнойСуммойНУ),
	|	МАКСИМУМ(ПредельнаяВеличинаОтчисленийВРезервБУ),
	|	МАКСИМУМ(ПредельнаяВеличинаОтчисленийВРезервНУ)
	|ПО
	|	Документ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ГруппировкаПоДокументу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("СуммаРезерва");
	МассивИменРеквизитов.Добавить("СуммаРезерваСтраховыхВзносов");
	МассивИменРеквизитов.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	
	МассивИменВидовРеквизитов = Новый Массив;
	МассивИменВидовРеквизитов.Добавить("");
	МассивИменВидовРеквизитов.Добавить("Исчислено");
	МассивИменВидовРеквизитов.Добавить("Накоплено");
	
	МассивВидовУчета = Новый Массив;
	МассивВидовУчета.Добавить("");
	МассивВидовУчета.Добавить("НУ");
	
	МассивИменРеквизитовДанных = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Для Каждого ИмяВидаРеквизита Из МассивИменВидовРеквизитов Цикл
			Для Каждого ВидУчета Из МассивВидовУчета Цикл
				МассивИменРеквизитовДанных.Добавить(ИмяРеквизита + ИмяВидаРеквизита + ВидУчета);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	МассивСтрокКорректировкиСотрудников = Новый Массив;
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерва");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваНУ");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваНакоплено");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваНакопленоНУ");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваСтраховыхВзносов");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваСтраховыхВзносовНУ");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваСтраховыхВзносовНакоплено");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваСтраховыхВзносовНакопленоНУ");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваФССНесчастныеСлучаиНакоплено");
	МассивСтрокКорректировкиСотрудников.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоНУ");
	
	МассивСтрокКорректировкиФизическихЛиц = Новый Массив;
	МассивСтрокКорректировкиФизическихЛиц.Добавить("СуммаРезерваСтраховыхВзносовИсчислено");
	МассивСтрокКорректировкиФизическихЛиц.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ");
	МассивСтрокКорректировкиФизическихЛиц.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено");
	МассивСтрокКорректировкиФизическихЛиц.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");

	Пока ГруппировкаПоДокументу.Следующий() Цикл
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("Ссылка",                  ГруппировкаПоДокументу.Документ);
		ДанныеПечати.Вставить("НазваниеОрганизации",     ГруппировкаПоДокументу.Организация);
		ДанныеПечати.Вставить("Подразделение",           ГруппировкаПоДокументу.ПодразделениеДокумента);
		ДанныеПечати.Вставить("Резерв",                  ГруппировкаПоДокументу.Резерв);
		ДанныеПечати.Вставить("ВидОперации",             ГруппировкаПоДокументу.ВидОперации);
		ДанныеПечати.Вставить("ДатаДокумента",           Формат(ГруппировкаПоДокументу.Дата, "ДЛФ=D"));
		ДанныеПечати.Вставить("НомерДокумента",          ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ГруппировкаПоДокументу.Номер, Истина, Истина));
		ДанныеПечати.Вставить("МесяцНачисления",         ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ГруппировкаПоДокументу.МесяцНачисления));
		ДанныеПечати.Вставить("ИсполнительРасшифровкаПодписи", ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ГруппировкаПоДокументу.Исполнитель));
		ДанныеПечати.Вставить("ДолжностьИсполнителя",    ГруппировкаПоДокументу.ДолжностьИсполнителя);
		ДанныеПечати.Вставить("КоличествоПоказателей",   ГруппировкаПоДокументу.КоличествоПоказателей);
		
		// Настройки
		ДанныеПечати.Вставить("НормативныйМетодБУ",                       ГруппировкаПоДокументу.НормативныйМетодБУ);
		ДанныеПечати.Вставить("ФормироватьРезервНУ",                      ГруппировкаПоДокументу.ФормироватьРезервНУ);
		ДанныеПечати.Вставить("ФормироватьРезервБУ",                      ГруппировкаПоДокументу.ФормироватьРезервБУ);
		ДанныеПечати.Вставить("НормативныйМетодНУ",                       ГруппировкаПоДокументу.НормативныйМетодНУ);
		ДанныеПечати.Вставить("ОграничиватьНачислениеПредельнойСуммойБУ", ГруппировкаПоДокументу.ОграничиватьНачислениеПредельнойСуммойБУ);
		ДанныеПечати.Вставить("ПредельнаяВеличинаОтчисленийВРезервБУ",    ГруппировкаПоДокументу.ПредельнаяВеличинаОтчисленийВРезервБУ);
		ДанныеПечати.Вставить("ОграничиватьНачислениеПредельнойСуммойНУ", ГруппировкаПоДокументу.ОграничиватьНачислениеПредельнойСуммойНУ);
		ДанныеПечати.Вставить("ПредельнаяВеличинаОтчисленийВРезервНУ",    ГруппировкаПоДокументу.ПредельнаяВеличинаОтчисленийВРезервНУ);
		
		// Итоги
		КорректировкиИтогов = Новый Структура;
		Для Каждого ИмяРеквизита Из МассивИменРеквизитовДанных Цикл
			КорректировкиИтогов.Вставить(ИмяРеквизита, 0);
		КонецЦикла;
		
		// Табличная часть
		ДанныеПечати.Вставить("ТабличнаяЧастьДокумента", Новый Массив);
		
		ОбработанныеФизическиеЛица = Новый Массив;
		ОбработанныеСотрудники     = Новый Массив;
		
		ГруппировкаПоСотрудникам = ГруппировкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ГруппировкаПоСотрудникам.Следующий() Цикл
			
			ДополнительнаяСтрокаФизическиеЛица = Ложь;
			ДополнительнаяСтрокаСотрудники     = Ложь;
			
			Если ОбработанныеСотрудники.Найти(ГруппировкаПоСотрудникам.Сотрудник) = Неопределено Тогда
				ОбработанныеСотрудники.Добавить(ГруппировкаПоСотрудникам.Сотрудник);
			Иначе
				// Совместитель
				ДополнительнаяСтрокаСотрудники = Истина;
			КонецЕсли;
			Если ОбработанныеФизическиеЛица.Найти(ГруппировкаПоСотрудникам.ФизическоеЛицо) = Неопределено Тогда
				ОбработанныеФизическиеЛица.Добавить(ГруппировкаПоСотрудникам.ФизическоеЛицо);
			Иначе
				Если Не ДополнительнаяСтрокаСотрудники Тогда
					// Совместитель
					ДополнительнаяСтрокаСотрудники     = Истина;
					ДополнительнаяСтрокаФизическиеЛица = Ложь;
				Иначе
					// Еще одна строка по физлицу. Совместитель или нет уже не важно.
					ДополнительнаяСтрокаСотрудники     = Истина;
					ДополнительнаяСтрокаФизическиеЛица = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительнаяСтрокаФизическиеЛица Или ДополнительнаяСтрокаСотрудники Тогда
				Для Каждого ИмяРеквизита Из МассивСтрокКорректировкиФизическихЛиц Цикл
					КорректировкиИтогов[ИмяРеквизита] =
						КорректировкиИтогов[ИмяРеквизита] + ГруппировкаПоСотрудникам[ИмяРеквизита];
				КонецЦикла;
			КонецЕсли;
			Если ДополнительнаяСтрокаФизическиеЛица И ДополнительнаяСтрокаСотрудники Тогда
				Для Каждого ИмяРеквизита Из МассивСтрокКорректировкиСотрудников Цикл
					КорректировкиИтогов[ИмяРеквизита] =
						КорректировкиИтогов[ИмяРеквизита] + ГруппировкаПоСотрудникам[ИмяРеквизита];
				КонецЦикла;
			КонецЕсли;

			СтрокаДанныхПечати = Новый Структура;
			СтрокаДанныхПечати.Вставить("ДополнительнаяСтрокаФизическиеЛица", ДополнительнаяСтрокаФизическиеЛица);
			СтрокаДанныхПечати.Вставить("ДополнительнаяСтрокаСотрудники",     ДополнительнаяСтрокаСотрудники И Не ДополнительнаяСтрокаФизическиеЛица);
			СтрокаДанныхПечати.Вставить("ФизическоеЛицо",                     ГруппировкаПоСотрудникам.ФизическоеЛицо);
			СтрокаДанныхПечати.Вставить("Сотрудник",                          ГруппировкаПоСотрудникам.Сотрудник);
			
			// Формула и показатели расчета резерва
			СтрокаДанныхПечати.Вставить("ФормулаРасчета",                 ГруппировкаПоСотрудникам.ФормулаРасчета);
			СтрокаДанныхПечати.Вставить("Показатель1",                    ГруппировкаПоСотрудникам.Показатель1);
			СтрокаДанныхПечати.Вставить("ПоказательКраткоеНаименование1", ГруппировкаПоСотрудникам.ПоказательКраткоеНаименование1);
			СтрокаДанныхПечати.Вставить("Значение1",                      ГруппировкаПоСотрудникам.Значение1);
			СтрокаДанныхПечати.Вставить("Показатель2",                    ГруппировкаПоСотрудникам.Показатель2);
			СтрокаДанныхПечати.Вставить("ПоказательКраткоеНаименование2", ГруппировкаПоСотрудникам.ПоказательКраткоеНаименование2);
			СтрокаДанныхПечати.Вставить("Значение2",                      ГруппировкаПоСотрудникам.Значение2);
			СтрокаДанныхПечати.Вставить("Показатель3",                    ГруппировкаПоСотрудникам.Показатель3);
			СтрокаДанныхПечати.Вставить("ПоказательКраткоеНаименование3", ГруппировкаПоСотрудникам.ПоказательКраткоеНаименование3);
			СтрокаДанныхПечати.Вставить("Значение3",                      ГруппировкаПоСотрудникам.Значение3);
			СтрокаДанныхПечати.Вставить("Показатель4",                    ГруппировкаПоСотрудникам.Показатель4);
			СтрокаДанныхПечати.Вставить("ПоказательКраткоеНаименование4", ГруппировкаПоСотрудникам.ПоказательКраткоеНаименование4);
			СтрокаДанныхПечати.Вставить("Значение4",                      ГруппировкаПоСотрудникам.Значение4);
			СтрокаДанныхПечати.Вставить("Показатель5",                    ГруппировкаПоСотрудникам.Показатель5);
			СтрокаДанныхПечати.Вставить("ПоказательКраткоеНаименование5", ГруппировкаПоСотрудникам.ПоказательКраткоеНаименование5);
			СтрокаДанныхПечати.Вставить("Значение5",                      ГруппировкаПоСотрудникам.Значение5);
			
			// Формула и показатели расчета взносов резерва
			СтрокаДанныхПечати.Вставить("ФондОплатыТруда",                                ГруппировкаПоСотрудникам.ФондОплатыТруда);
			СтрокаДанныхПечати.Вставить("НормативОтчисленийВРезерв",                      ГруппировкаПоСотрудникам.НормативОтчисленийВРезерв);
			СтрокаДанныхПечати.Вставить("НормативОтчисленийВРезервНУ",                    ГруппировкаПоСотрудникам.НормативОтчисленийВРезервНУ);
			СтрокаДанныхПечати.Вставить("СтраховыеВзносы",                                ГруппировкаПоСотрудникам.СтраховыеВзносы);
			СтрокаДанныхПечати.Вставить("ТекущаяСтавкаСтраховыхВзносов",                  ГруппировкаПоСотрудникам.ТекущаяСтавкаСтраховыхВзносов);
			СтрокаДанныхПечати.Вставить("НормативОтчисленийВРезервСтраховыеВзносы",       ГруппировкаПоСотрудникам.НормативОтчисленийВРезервСтраховыеВзносы);
			СтрокаДанныхПечати.Вставить("НормативОтчисленийВРезервСтраховыеВзносыНУ",     ГруппировкаПоСотрудникам.НормативОтчисленийВРезервСтраховыеВзносыНУ);
			СтрокаДанныхПечати.Вставить("ФССНесчастныеСлучаи",                            ГруппировкаПоСотрудникам.ФССНесчастныеСлучаи);
			СтрокаДанныхПечати.Вставить("ТекущаяСтавкаФССНесчастныеСлучаи",               ГруппировкаПоСотрудникам.ТекущаяСтавкаФССНесчастныеСлучаи);
			СтрокаДанныхПечати.Вставить("НормативОтчисленийВРезервФССНесчастныеСлучаи",   ГруппировкаПоСотрудникам.НормативОтчисленийВРезервФССНесчастныеСлучаи);
			СтрокаДанныхПечати.Вставить("НормативОтчисленийВРезервФССНесчастныеСлучаиНУ", ГруппировкаПоСотрудникам.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ);
			
			Для Каждого ИмяРеквизита Из МассивИменРеквизитовДанных Цикл
				СтрокаДанныхПечати.Вставить(ИмяРеквизита, ГруппировкаПоСотрудникам[ИмяРеквизита]);
			КонецЦикла;
			
			ДанныеПечати.ТабличнаяЧастьДокумента.Добавить(СтрокаДанныхПечати);
			
		КонецЦикла;
		
		Для Каждого ИмяРеквизита Из МассивИменРеквизитовДанных Цикл
			ДанныеПечати.Вставить("Итого" + ИмяРеквизита,
				ГруппировкаПоДокументу[ИмяРеквизита] - КорректировкиИтогов[ИмяРеквизита]);
		КонецЦикла;
		
		ДанныеПечатиОбъектов.Вставить(ГруппировкаПоДокументу.Документ, ДанныеПечати);
		
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

#КонецОбласти

#Область РегистрацияДвиженийДокумента

Процедура СформироватьДвиженияПоНачислениюОбязательств(Движения, Отказ, Организация, Период, ПериодРегистрации, ДанныеДляОтражения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("ВидОперации") Тогда
		ДвижениеПриход = ДанныеДляОтражения.ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание;
	Иначе
		ДвижениеПриход = Истина;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("ОценочныеОбязательства") Тогда
		СформироватьДвиженияРегистраОценочныеОбязательства(ДанныеДляОтражения.ОценочныеОбязательства, Организация, ПериодРегистрации, Движения, ДвижениеПриход, Отказ)
	КонецЕсли;
	Если ДанныеДляОтражения.Свойство("ОценочныеОбязательстваПоСотрудникам") Тогда
		СформироватьДвиженияРегистраОценочныеОбязательстваПоСотрудникам(ДанныеДляОтражения.ОценочныеОбязательстваПоСотрудникам, Организация, Период, ПериодРегистрации, Движения, ДвижениеПриход, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияРегистраОценочныеОбязательства(ТаблицаОбязательств, Организация, ПериодРегистрации, Движения, ДвижениеПриход, Отказ)
	
	ВидДвижения = ?(ДвижениеПриход, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбязательств", ТаблицаОбязательств);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Период",              ПериодРегистрации);
	Запрос.УстановитьПараметр("ВидДвижения",         ВидДвижения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОбязательств.СуммаРезерва КАК СуммаРезерва,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ТаблицаОбязательств.СуммаРезерваНУ КАК СуммаРезерваНУ,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ТаблицаОбязательств.Резерв КАК Резерв,
	|	ТаблицаОбязательств.СтатьяФинансирования КАК СтатьяФинансирования,
	|	&Организация КАК Организация,
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТ_ТаблицаОбязательств
	|ИЗ
	|	&ТаблицаОбязательств КАК ТаблицаОбязательств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Период КАК Период,
	|	ВТ_ТаблицаОбязательств.Организация КАК Организация,
	|	ВТ_ТаблицаОбязательств.Резерв КАК Резерв,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям) КАК ТипОценочногоОбязательства,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерва) КАК Сумма,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваНУ) КАК СуммаНУ,
	|	&ВидДвижения КАК ВидДвижения
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерва <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Резерв,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Резерв,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ),
	|	&ВидДвижения
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Резерв,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Резерв,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ),
	|	&ВидДвижения
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Резерв,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	Резерв,
	|	ТипОценочногоОбязательства";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		Движения.ОценочныеОбязательства.Загрузить(Результат);
		Движения.ОценочныеОбязательства.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияРегистраОценочныеОбязательстваПоСотрудникам(ТаблицаОбязательств, Организация, Период, ПериодРегистрации, Движения, ДвижениеПриход, Отказ)
	
	ТаблицаОбязательств.Свернуть("Сотрудник,СтатьяФинансирования,Резерв",
	"СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
	|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", ТаблицаОбязательств.ВыгрузитьКолонку("Сотрудник"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)";
	Выборка = Запрос.Выполнить().Выбрать();
	СотрудникиФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СотрудникиФизическиеЛица.Вставить(Выборка.Сотрудник, Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаОбязательств Цикл
		
		Если ДвижениеПриход Тогда
			НоваяСтрока = Движения.ОценочныеОбязательстваПоСотрудникам.ДобавитьПриход();
		Иначе
			НоваяСтрока = Движения.ОценочныеОбязательстваПоСотрудникам.ДобавитьРасход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
		НоваяСтрока.Организация    = Организация;
		НоваяСтрока.Период         = КонецМесяца(ПериодРегистрации);
		НоваяСтрока.ФизическоеЛицо = СотрудникиФизическиеЛица[НоваяСтрока.Сотрудник];
	
	КонецЦикла;
	
	Движения.ОценочныеОбязательстваПоСотрудникам.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	РезервыПоОплатеТрудаВнутренний.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуВРегистрахУчетаРезервов(ПараметрыОбновления = Неопределено) Экспорт
	
	РезервЕжегодныхОтпусков = Справочники.Резервы.РезервЕжегодныхОтпусков();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОценочныеОбязательства.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ЗаписиРегистров
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства КАК ОценочныеОбязательства
	|ГДЕ
	|	ОценочныеОбязательства.Резерв = ЗНАЧЕНИЕ(Справочник.Резервы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОценочныеОбязательстваПоСотрудникам.Регистратор
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам КАК ОценочныеОбязательстваПоСотрудникам
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникам.Резерв = ЗНАЧЕНИЕ(Справочник.Резервы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ВТ_ЗаписиРегистров.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ЗаписиРегистров КАК ВТ_ЗаписиРегистров";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыНакопления.ОценочныеОбязательства.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Резерв = РезервЕжегодныхОтпусков;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			НаборЗаписей = РегистрыНакопления.ОценочныеОбязательстваПоСотрудникам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Резерв = РезервЕжегодныхОтпусков;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНовуюНастройкуУчетаРезервовОтпусков() Экспорт
	
	РезервыПоОплатеТрудаВнутренний.СоздатьНовуюНастройкуУчетаРезервовОтпусков();
	
КонецПроцедуры

Процедура ВключитьРезервыПоОплатеТрудаПоОплатуТруда() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРасчетаРезервовОтпусков.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаРезервовОтпусков КАК НастройкиРасчетаРезервовОтпусков";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Константы.ИспользоватьРезервыПоОплатеТруда.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПериодВыплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПериодВыплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	Иначе
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если СправочникОбъект.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск Тогда
					СправочникОбъект.ПериодВыплаты = НачалоГода(СправочникОбъект.НачалоПериода);
				Иначе
					СправочникОбъект.ПериодВыплаты = НачалоГода(ДобавитьМесяц(СправочникОбъект.НачалоПериода, 12));
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ШаблонСообщения = НСтр("ru = 'Не удалось обработать настройку расчета резервов ""%1"" по причине:
				|%2';
				|en = 'Не удалось обработать настройку расчета резервов ""%1"" по причине:
				|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
