////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Возвращает параметры выбора спецификаций для номенклатуры.
// 
// Возвращаемое значение:
// 	Структура - из:
//  * ДоступныеТипы - Массив - доступные типы спецификаций
//  * ДоступныеСтатусы - Массив - доступные статусы спецификаций
//  * ДоступныСпецификацииСПроизводствомНаСтороне - Булево - признак доступности спецификаций с производством на стороне
//  * ДоступныСпецификацииНаПобочныйВыход - Булево - признак отображения спецификаций по фиксированной стоимости
//  * ПолучитьСпецификацииПоНоменклатуре - Булево - признак отбора по заданной номенклатуре
//  * СвязиПараметровВыбора - Соответствие - связи параметров выбора
//  * РеквизитыСпецификации - Строка - список реквизитов спецификации
//
Функция ПараметрыВыбораСпецификаций() Экспорт
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("ДоступныеТипы", Новый Массив);
	ПараметрыВыбора.Вставить("ДоступныеСтатусы", Новый Массив);
	
	ПараметрыВыбора.Вставить("ДоступныСпецификацииСПроизводствомНаСтороне", Истина);
	
	ПараметрыВыбора.Вставить("ДоступныСпецификацииНаПобочныйВыход", Ложь);
	
	ПараметрыВыбора.Вставить("ПолучитьСпецификацииПоНоменклатуре", Истина);
	
	ПараметрыВыбора.Вставить("СвязиПараметровВыбора", Новый Соответствие);
	
	// Для получения реквизитов подбираемой спецификации
	ПараметрыВыбора.Вставить("РеквизитыСпецификации", "");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

// Возвращает параметры необходимые для выполнения действия "ПроверитьЗаполнитьСпецификацию".
//
// Параметры:
//  Объект							- ДанныеФормыСтруктура 			- Текущий объект
//  ТекущиеДанные					- ДанныеФормыЭлементКоллекции 	- Строка коллекции в которой происходит выбор спецификации
//  ПараметрыВыбораСпецификаций		- Структура 					- Параметры выбора спецификации
//  Форма							- ФормаКлиентскогоПриложения				- форма
//  ДополнительныеПараметры			- Структура 					- Дополнительные параметры вызова
// 
// Возвращаемое значение:
//  Структура - список параметров.
//
Функция ПараметрыДействияПроверитьЗаполнитьСпецификацию(Объект,
	ТекущиеДанные,
	ПараметрыВыбораСпецификаций,
	Форма = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыДействия = Новый Структура("ДанныеОбИзделии,ПараметрыВыбораСпецификаций,ИмяПоляСпецификация");
	
	ПараметрыДействия.ПараметрыВыбораСпецификаций = ПараметрыВыбораСпецификаций;
	ПараметрыДействия.ИмяПоляСпецификация         = "Спецификация";
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИмяРеквизитаСпецификация") Тогда
		ПараметрыДействия.ИмяПоляСпецификация = ДополнительныеПараметры.ИмяРеквизитаСпецификация;
	КонецЕсли;
	
	ПараметрыДействия.ДанныеОбИзделии = СобратьДанныеОбИзделииДляВыбораСпецификации(
		Объект,
		ТекущиеДанные,
		ПараметрыВыбораСпецификаций,
		Форма,
		ДополнительныеПараметры);
	ПараметрыДействия.ДанныеОбИзделии.ТекущаяСпецификация = ТекущиеДанные[ПараметрыДействия.ИмяПоляСпецификация];
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Установить параметры выбора спецификаций в форме
//
// Параметры:
//  Элемент						 - ПолеФормы, Массив - поле ввода спецификации или список полей
//  ПараметрыВыбораСпецификаций	 - см. ПараметрыВыбораСпецификаций
//
Процедура УстановитьПараметрыВыбораСпецификаций(Элемент, ПараметрыВыбораСпецификаций) Экспорт
	
	ПараметрыВыбора = Новый Массив();
	
	Для каждого ЗначениеПараметра Из ПараметрыВыбораСпецификаций Цикл
		Если ЗначениеПараметра.Ключ = "СвязиПараметровВыбора" Тогда
			Продолжить;
		КонецЕсли;
		НовыйПараметр = Новый ПараметрВыбора(ЗначениеПараметра.Ключ, ЗначениеПараметра.Значение);
		ПараметрыВыбора.Добавить(НовыйПараметр);
	КонецЦикла;
	
	Если ПараметрыВыбораСпецификаций.Свойство("ДоступныеТипы") И ПараметрыВыбораСпецификаций.ДоступныеТипы.Количество() <> 0 Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипПроизводственногоПроцесса", Новый ФиксированныйМассив(ПараметрыВыбораСпецификаций.ДоступныеТипы));
		ПараметрыВыбора.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Если ПараметрыВыбораСпецификаций.Свойство("ДоступныеСтатусы") И ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Количество() <> 0 Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Новый ФиксированныйМассив(ПараметрыВыбораСпецификаций.ДоступныеСтатусы));
		ПараметрыВыбора.Добавить(НовыйПараметр);
	КонецЕсли;
	
	ФормаВыбора = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре";
	
	Если ТипЗнч(Элемент) = Тип("Массив") Тогда
		МассивЭлементов = Элемент;
	Иначе
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элемент);
	КонецЕсли;
	
	ПутиСвязейПараметровВыбораЭлементов = ПараметрыВыбораСпецификаций.СвязиПараметровВыбора;
	Для каждого ТекущийЭлемент Из МассивЭлементов Цикл
		
		ТекущийЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
		ПутиСвязейПараметровВыбораЭлемента = ПутиСвязейПараметровВыбораЭлементов.Получить(ТекущийЭлемент.ПутьКДанным);
		Если ПутиСвязейПараметровВыбораЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаФормы    = Неопределено;
		ТекущийРодитель = ТекущийЭлемент.Родитель;
		Пока ТипЗнч(ТекущийРодитель) <> Тип("ФормаКлиентскогоПриложения") Цикл
			Если ТипЗнч(ТекущийРодитель) = Тип("ТаблицаФормы") Тогда
				ТаблицаФормы = ТекущийРодитель;
				Прервать;
			КонецЕсли;
			ТекущийРодитель = ТекущийРодитель.Родитель;
		КонецЦикла;
		
		Если ТаблицаФормы = Неопределено И СтрНайти(ТекущийЭлемент.ПутьКДанным, ".ТекущиеДанные.") > 0 Тогда
			ЧастиПути = СтрРазделить(ТекущийЭлемент.ПутьКДанным,".");
			Если ЧастиПути.Количество() = 4 Тогда
				ТаблицаФормы = ТекущийРодитель["Элементы"].Найти(ЧастиПути[1]);
			КонецЕсли;
		КонецЕсли;
		
		СвязиПараметровВыбора = Новый Массив();
		Для каждого КлючИЗначение Из ПутиСвязейПараметровВыбораЭлемента Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				ПутьКДанным    = КлючИЗначение.Значение.ПутьКДанным;
				РежимИзменения = КлючИЗначение.Значение.РежимИзменения;
			Иначе
				ПутьКДанным    = КлючИЗначение.Значение;
				РежимИзменения = РежимИзмененияСвязанногоЗначения.НеИзменять;
			КонецЕсли;
			
			Если ТаблицаФормы <> Неопределено И СтрНайти(ПутьКДанным, ТаблицаФормы.ПутьКДанным+".") > 0 Тогда
				ПутьКДанным = СтрШаблон("Элементы.%1.ТекущиеДанные.%2",
					ТаблицаФормы.Имя,
					Сред(ПутьКДанным,СтрНайти(ПутьКДанным,".", НаправлениеПоиска.СКонца)+1));
			КонецЕсли;
				
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора(КлючИЗначение.Ключ, ПутьКДанным, РежимИзменения));
			Если КлючИЗначение.Ключ = "Номенклатура"
					ИЛИ КлючИЗначение.Ключ = "Характеристика" Тогда
				СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор."+КлючИЗначение.Ключ, ПутьКДанным, РежимИзменения));
			КонецЕсли;
			
		КонецЦикла;
		ТекущийЭлемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
		ТекущийЭлемент.ФормаВыбора = ФормаВыбора;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для номенклатуры.
//
// Параметры:
//  Элемент - Массив, ПолеФормы - поле для ввода номенклатуры
//  Форма - ФормаКлиентскогоПриложения - форма для которой производится установка параметров выбора:
//  	* Объект  - ДанныеФормыСтруктура - объект, для которого производится установка параметров выбора:
//  		* ТипПроизводственногоПроцесса - ПеречислениеСсылка.ТипыПроизводственныхПроцессов
//  		* Ссылка - СправочникСсылка.РесурсныеСпецификации,ДокументСсылка.ЗаказНаПроизводство2_2
//  	* ИсточникСоставаНаборовВПроизводстве - ПеречислениеСсылка.ИсточникиСоставаНаборовВПроизводстве
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Элемент, Форма) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Объект = Форма.Объект;
	ТипПроизводственногоПроцесса = Объект.ТипПроизводственногоПроцесса;
	
	Если ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
		ИЛИ ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		
		//++ НЕ УТКА
		Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			НаборыДоступны = Форма.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.Спецификации")
				ИЛИ Форма.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.СпецификацииИлиВариантыКомплектации");
			Если НаборыДоступны Тогда
				МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
			КонецЕсли;
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТипов)));
	
	Если ТипЗнч(Элемент) = Тип("Массив") Тогда
		Элементы = Элемент;
	Иначе
		Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элемент);
	КонецЕсли;
	
	Для Индекс = 0 По Элементы.ВГраница() Цикл
		Элементы[Индекс].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	КонецЦикла;
	
КонецПроцедуры

// Перечень полей, определяющих выбор спецификации номенклатуры
// 
// Возвращаемое значение:
//  Строка - перечень полей
//
Функция ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации() Экспорт
	
	Возврат "Номенклатура,Характеристика,НачалоПроизводства,ПодразделениеДиспетчер,НаправлениеДеятельности";
	
КонецФункции

// Конструктор структуры данных для выбора спецификации номенклатуры
// 
// Возвращаемое значение:
//  Структура - структура данных
//
Функция СтруктураДанныхОбИзделииДляВыбораСпецификации() Экспорт
	
	Результат = Новый Структура(ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	Результат.Номенклатура            = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Результат.Характеристика          = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	Результат.НачалоПроизводства      = Дата(1,1,1);
	Результат.ПодразделениеДиспетчер  = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Результат.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка");
	
	Результат.Вставить("ТекущаяСпецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Автовыбор

// Текст оформления способов автовыбора.
// 
// Возвращаемое значение:
//  Соответствие из ПеречислениеСсылка.СпособыАвтовыбораНоменклатуры,ПеречислениеСсылка.СпособыАвтовыбораХарактеристики
Функция ТекстыОформленияСпособовАвтовыбора() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ"),
		"");
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции"),
		НСтр("ru = '<указывается в свойстве ""%1"">';
			|en = '<specified in the ""%1"" property>'"));
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве"),
		НСтр("ru = '<уточняется при производстве>';
			|en = '<specified during production>'"));
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ"),
		"");
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции"),
		НСтр("ru = '<определяется по свойствам основного изделия>';
			|en = '<determined by main product properties>'"));
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму"),
		НСтр("ru = '<определяется по алгоритму>';
			|en = '<defined by algorithm>'"));
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве"),
		НСтр("ru = '<уточняется при производстве>';
			|en = '<specified during production>'"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РасчетПоФормулам

// Возвращает описание функций используемых в конструкторе формул
// 
// Параметры:
//  ИмяГруппы - Строка - имя группы в дереве формул конструктора
// 
// Возвращаемое значение:
//  Массив из см. РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля - описание функций внешних модулей.
//
Функция ОписаниеФункцийКонструктораФормул(ИмяГруппы = "") Экспорт
	
	Результат = РаботаСФормуламиКлиентСервер.ФункцииОбщегоМодуля();
	
	Если ИмяГруппы = "ЧисловыеФункции" ИЛИ ПустаяСтрока(ИмяГруппы) Тогда
		
		Описание = ОписаниеФункцииКонструктораФормулОкрВверх();
		Результат.Добавить(Описание);
		
		Описание = ОписаниеФункцииКонструктораФормулОкрВниз();
		Результат.Добавить(Описание);
		
	КонецЕсли;
	
	Если ИмяГруппы = "ПрочиеФункции" ИЛИ ПустаяСтрока(ИмяГруппы) Тогда
	
		Описание = РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля();
		Описание.Идентификатор = "ВыборПоПорогу";
		Описание.ПолныйПуть = "УправлениеДаннымиОбИзделияхКлиентСервер.ВыборПоПорогу";
		Описание.Представление = НСтр("ru = 'Выбор по порогу';
										|en = 'Select by threshold'");
		ПредставлениеПараметра1 = НСтр("ru = '<Параметр>';
										|en = '<Parameter>'");
		ПредставлениеПараметра2 = НСтр("ru = '<Значение1>';
										|en = '<Value1>'");
		ПредставлениеПараметра3 = НСтр("ru = '<Порог1>';
										|en = '<Threshold1>'");
		ПредставлениеПараметра4 = НСтр("ru = '<Значение2>';
										|en = '<Value2>'");
		ПредставлениеПараметра5 = НСтр("ru = '<Порог4 (необязательный)>';
										|en = '<Threshold4 (optional)>'");
		ПредставлениеПараметра6 = НСтр("ru = '<Значение5 (необязательный)>';
										|en = '<Value5 (optional)>'");
		Описание.КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВыборПоПорогу(%1, %2, %3, %4,..., %5, %6)",
			ПредставлениеПараметра1,
			ПредставлениеПараметра2,
			ПредставлениеПараметра3,
			ПредставлениеПараметра4,
			ПредставлениеПараметра5,
			ПредставлениеПараметра6);
		Описание.Пояснение = НСтр("ru = 'Выбирает значение согласно заданному порогу';
									|en = 'Selects a value according to a specified threshold.'");
		Результат.Добавить(Описание);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание функции ОкрВверх для конструктора формул
// 
// Возвращаемое значение:
//  см. РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля
//
Функция ОписаниеФункцииКонструктораФормулОкрВверх() Экспорт
	
	Описание = РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля();
	Описание.Идентификатор = "ОкрВверх";
	Описание.ПолныйПуть = "ОбщегоНазначенияУТКлиентСервер.ОкрВверх";
	Описание.Представление = НСтр("ru = 'Округление вверх';
									|en = 'Rounding up'");
	ПредставлениеПараметра1 = НСтр("ru = '<Округляемое значение>';
									|en = '<Round value>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Разрядность>';
									|en = '<Bitness>'");
	Описание.КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ОкрВверх(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Описание.Пояснение = НСтр("ru = 'Округление до ближайшего большего значения';
								|en = 'Rounding to the nearest greater value'");
	
	Возврат Описание;
	
КонецФункции

// Возвращает описание функции ОкрВниз для конструктора формул
// 
// Возвращаемое значение:
//  см. РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля
//
Функция ОписаниеФункцииКонструктораФормулОкрВниз() Экспорт
	
	Описание = РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля();
	Описание.Идентификатор = "ОкрВниз";
	Описание.ПолныйПуть = "ОбщегоНазначенияУТКлиентСервер.ОкрВниз";
	Описание.Представление = НСтр("ru = 'Округление вниз';
									|en = 'Rounding down'");
	ПредставлениеПараметра1 = НСтр("ru = '<Округляемое значение>';
									|en = '<Round value>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Разрядность>';
									|en = '<Bitness>'");
	Описание.КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ОкрВниз(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Описание.Пояснение = НСтр("ru = 'Округление до ближайшего меньшего значения';
								|en = 'Rounding to the nearest lower value'");
	
	Возврат Описание;
	
КонецФункции

// Выбирает значение согласно заданному порогу
//
// Параметры:
//  Параметр	 - Число	 - параметр
//  Значение	 - Число	 - значение
//  Порог		 - Число	 - порог
//  Значение2	 - Число	 - значение
//  Порог2		 - Число	 - порог
//  Значение3	 - Число	 - значение
//  Порог3		 - Число	 - порог
//  Значение4	 - Число	 - значение
//  Порог4		 - Число	 - порог
//  Значение5	 - Число	 - значение
//  Порог5		 - Число	 - порог
// 
// Возвращаемое значение:
//  Число - результат выбора
//
Функция ВыборПоПорогу(
	Параметр,
	Значение,
	Порог,
	Значение2 = 0,
	Порог2 = Неопределено,
	Значение3 = 0,
	Порог3 = Неопределено,
	Значение4 = 0,
	Порог4 = Неопределено,
	Значение5 = 0,
	Порог5 = Неопределено) Экспорт
	
	Результат = 0;
	
	Если Порог >= Параметр Тогда 
		
		Результат = Значение;
		
	ИначеЕсли Значение2 <> 0 И Порог2 = Неопределено Тогда
		
		Результат = Значение2;
		
	ИначеЕсли ЗначениеЗаполнено(Порог2) И Значение2 <> Неопределено И Порог2 >= Параметр Тогда
		
		Результат = Значение2;
		
	ИначеЕсли Значение3 <> 0 И Порог3 = Неопределено Тогда
		
		Результат = Значение3;
		
	ИначеЕсли ЗначениеЗаполнено(Порог3) И Значение3 <> Неопределено И Порог3 >= Параметр Тогда
		
		Результат = Значение3;
		
	ИначеЕсли Значение4 <> 0 И Порог4 = Неопределено Тогда
		
		Результат = Значение4;
	
	ИначеЕсли ЗначениеЗаполнено(Порог4) И Значение4 <> Неопределено И Порог4 >= Параметр Тогда
		
		Результат = Значение4;
		
	ИначеЕсли Значение5 <> 0 И Порог5 = Неопределено Тогда
		
		Результат = Значение5;
		
	ИначеЕсли ЗначениеЗаполнено(Порог5) И Значение5 <> Неопределено И Порог5 >= Параметр Тогда
		
		Результат = Значение5;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РедактированиеМатериалов

// Выполняет стандартные действия при вводе новой строки таб. части, в которой предусмотрен автовыбор номенклатуры
//  - устанавливает способ автовыбора номенклатуры
//  - устанавливает способ автовыбора характеристики
//  - копирует настройки автовыбора.
//
// Параметры:
//  ДанныеСтроки			 - ДанныеФормыСтруктура	 - содержит данные строки
//  КлючСвязиИсточника		 - Число, Неопределено	 - ключ связи источника (при копировании строки)
//  СоответствиеСвойств		 - ДанныеФормыКоллекция	 - табличная часть "СоответствиеСвойств".
//
Процедура ПриВводеНовойСтрокиСАвтовыбором(ДанныеСтроки, КлючСвязиИсточника = Неопределено, СоответствиеСвойств = Неопределено) Экспорт

	НоваяСтрока = (КлючСвязиИсточника = Неопределено);
	
	Если НоваяСтрока ИЛИ Не ЗначениеЗаполнено(ДанныеСтроки.СпособАвтовыбораНоменклатуры) Тогда
		ДанныеСтроки.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ Не ЗначениеЗаполнено(ДанныеСтроки.СпособАвтовыбораХарактеристики) Тогда
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	КонецЕсли;
	
	Если (КлючСвязиИсточника <> Неопределено) Тогда
		СписокСтрок = СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиИсточника));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			НоваяСтрока = СоответствиеСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.КлючСвязи = ДанныеСтроки.КлючСвязи;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет стандартные действия при вводе новой строки в таблице, в которой предусмотрена возможность отбора по свойствам
//   - копирует настройки отбора
//
// Параметры:
//  ДанныеСтроки          - ДанныеФормыСтруктура   - содержит данные строки
//  КлючСвязиИсточника    - Число, Неопределено    - ключ связи источника (при копировании строки)
//  ОтборПоСвойствам      - ДанныеФормыКоллекция   - табличная часть "ОтборПоСвойствам"
Процедура ПриВводеНовойСтрокиСОтборомПоСвойствам(ДанныеСтроки, КлючСвязиИсточника = Неопределено, ОтборПоСвойствам = Неопределено) Экспорт

	Если КлючСвязиИсточника <> Неопределено Тогда // Копирование
		
		СписокСтрок = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиИсточника));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			НоваяСтрока = ОтборПоСвойствам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.КлючСвязи = ДанныеСтроки.КлючСвязи;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет стандартные действия при изменении материала
//
Процедура ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
		ДанныеСтроки.НоменклатураСтрокой = "";
	КонецЕсли; 
		
КонецПроцедуры

// Выполняет стандартные действия при изменении характеристики
//
Процедура ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
		ДанныеСтроки.ХарактеристикаСтрокой = "";
	КонецЕсли;
	
	ЗаданныеСвойства = Объект.СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
	Для каждого ЭлементКоллекции Из ЗаданныеСвойства Цикл
		Объект.СоответствиеСвойств.Удалить(ЭлементКоллекции);
	КонецЦикла; 
	
КонецПроцедуры

// Функция определяет является ли материал полуфабрикатом производимым в процессе
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки.
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе.
//
Функция ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки) Экспорт
	
//++ НЕ УТКА
	Возврат (ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
					ИЛИ ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации"));
//-- НЕ УТКА
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

// Функция определяет является ли материал полуфабрикатом производимым в процессе на этапе.
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки.
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе на этапе.
//
Функция ПолуфабрикатПроизводитсяНаЭтапе(ДанныеСтроки) Экспорт
	
//++ НЕ УТКА
	Возврат ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе");
//-- НЕ УТКА
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

// Функция определяет является ли материал полуфабрикатом производимым в процессе по спецификации.
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки.
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе по спецификации.
//
Функция ПолуфабрикатПроизводитсяПоСпецификации(ДанныеСтроки) Экспорт
	
//++ НЕ УТКА
	Возврат ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации");
//-- НЕ УТКА
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

Процедура ЗаполнитьСпособПолученияМатериалаПоУмолчанию(ДанныеСтроки) Экспорт
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ПроизводитсяВПроцессе", Ложь);
	СтруктураЗначений.Вставить("ИсточникПолученияПолуфабриката", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	СтруктураЗначений.Вставить("ИсточникПолученияПолуфабрикатаПредставление", "");
	СтруктураЗначений.Вставить("ПланироватьНеРанее", ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка"));
	СтруктураЗначений.Вставить("ПланироватьНеРанееПредставление", "");
	СтруктураЗначений.Вставить("СпецификацияРемонта", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	СтруктураЗначений.Вставить("СпецификацияРемонтаПредставление", "");
	СтруктураЗначений.Вставить("СпособПолученияМатериала", ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать"));
	СтруктураЗначений.Вставить("СпособПолученияМатериалаРедактирование", НСтр("ru = 'Обеспечивать';
																				|en = 'Supply'"));
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураЗначений);
	
КонецПроцедуры

// Возвращает массив доступных типов номенклатуры для таб.частей НСИ производства
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяТЧ - Строка - Имя ТЧ
// 
// Возвращаемое значение:
//  Массив - Массив доступных типов номенклатуры
Функция МассивДоступныхТиповНоменклатуры(Форма, ИмяТЧ = "") Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	Если ИмяТЧ = "МатериалыИУслуги" Тогда
		
		НаборыДоступны = Форма.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.ВариантыКомплектации")
			//++ НЕ УТКА
			ИЛИ (Форма.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.Спецификации")
					И ТипЗнч(Форма.Объект.Ссылка) <> Тип("СправочникСсылка.МаршрутныеКарты"))
			//-- НЕ УТКА
			ИЛИ Форма.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.СпецификацииИлиВариантыКомплектации");
		
		Если НаборыДоступны Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает параметры выбора материалов в производственной НСИ
// 
// Параметры:
//  Элемент - ПолеФормы
//  Форма - ФормаКлиентскогоПриложения
Процедура УстановитьПараметрыВыбораМатериалов(Элемент, Форма) Экспорт
	
	МассивТиповНоменклатуры = МассивДоступныхТиповНоменклатуры(Форма, "МатериалыИУслуги");
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТиповНоменклатуры)));
	
	Если ТипЗнч(Элемент) = Тип("Массив") Тогда
		Элементы = Элемент;
	Иначе
		Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элемент);
	КонецЕсли;
	
	Для Индекс = 0 По Элементы.ВГраница() Цикл
		Элементы[Индекс].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Получает данные основного изделия спецификации
//
// Параметры:
//  Объект	 - СправочникОбъект.РесурсныеСпецификации, Структура - спецификация.
// 
// Возвращаемое значение:
//  Структура - данные основного изделия.
//
Функция ДанныеОсновногоИзделияСпецификации(Объект) Экспорт
	
	ЭтоСборка   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ЭтоРемонт   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
	ЭтоРазборка = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"));
	
	Если (ЭтоСборка ИЛИ ЭтоРемонт)
		И Объект.ВыходныеИзделия.Количество() <> 0 Тогда
		
		Результат = Новый Структура(
			"ВидНоменклатуры,
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|КоличествоУпаковок");
		ЗаполнитьЗначенияСвойств(Результат, Объект.ВыходныеИзделия[0]);
		
	ИначеЕсли ЭтоРазборка Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ВидНоменклатуры",    Объект.ОсновноеИзделиеВидНоменклатуры);
		Результат.Вставить("Номенклатура",       Объект.ОсновноеИзделиеНоменклатура);
		Результат.Вставить("Характеристика",     Объект.ОсновноеИзделиеХарактеристика);
		Результат.Вставить("Упаковка",           Объект.ОсновноеИзделиеУпаковка);
		Результат.Вставить("КоличествоУпаковок", Объект.ОсновноеИзделиеКоличествоУпаковок);
		
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("ВидНоменклатуры",    ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка"));
		Результат.Вставить("Номенклатура",       ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		Результат.Вставить("Характеристика",     ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		Результат.Вставить("Упаковка",           ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
		Результат.Вставить("КоличествоУпаковок", 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает значение основного реквизита по данным основного изделия спецификации
//
// Параметры:
//  Объект  - СправочникОбъект.РесурсныеСпецификации, Структура - спецификация.
//  ОсновноеИзделие - см. ДанныеОсновногоИзделияСпецификации
// 
// Возвращаемое значение:
//  Структура - данные основного реквизита
//
Функция ОсновнойРеквизитОсновногоИзделияСпецификации(Объект, ОсновноеИзделие = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если ОсновноеИзделие = Неопределено Тогда
		ОсновноеИзделие = ДанныеОсновногоИзделияСпецификации(Объект);
	КонецЕсли;
	
	Если Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры") Тогда
		Результат.Вставить("Имя", "ВидНоменклатуры");
	Иначе
		Результат.Вставить("Имя", "Номенклатура");
	КонецЕсли;
	
	Результат.Вставить("Значение", ОсновноеИзделие[Результат.Имя]);
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление единицы измерения партии выпуска
//
// Параметры:
//  ОписаниеПартииВыпуска	 - Структура, Строка, СправочникСсылка.УпаковкиЕдиницыИзмерения	 - описание или единица измерения партии выпуска
//  Количество				 - Число														 - количество единиц/партий.
// 
// Возвращаемое значение:
//  Строка - представление единицы измерения партии выпуска.
//
Функция ПредставлениеЕдиницыИзмеренияПартииВыпуска(ОписаниеПартииВыпуска = Неопределено, Количество = 0) Экспорт
	
	Если ОписаниеПартииВыпуска <> Неопределено Тогда
		
		Если ТипЗнч(ОписаниеПартииВыпуска) = Тип("ФиксированнаяСтруктура") Тогда
			ИспользуетсяОписаниеПартииВыпуска = Истина;
			ЕдиницаИзмеренияПартииВыпуска = ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска;
		Иначе
			ИспользуетсяОписаниеПартииВыпуска = Ложь;
			ЕдиницаИзмеренияПартииВыпуска = ОписаниеПартииВыпуска;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияПартииВыпуска) Тогда
			Если ИспользуетсяОписаниеПартииВыпуска И ОписаниеПартииВыпуска.ВыпускПроизвольнымиПорциями Тогда
				Результат = НСтр("ru = 'ед. хранения';
								|en = 'stock UOM'");
			Иначе
				Результат = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
								Количество,
								НСтр("ru = 'партия';
									|en = 'lot'"),
								НСтр("ru = 'партии';
									|en = 'lots'"),
								НСтр("ru = 'партий';
									|en = 'lots'"),
								НСтр("ru = 'ж';
									|en = 'f'"));
			КонецЕсли;
		Иначе
			Результат = Строка(ЕдиницаИзмеренияПартииВыпуска);
		КонецЕсли;
		
		// Дополним единицу измерения описанием партии выпуска
		Если ИспользуетсяОписаниеПартииВыпуска 
			И Не ОписаниеПартииВыпуска.МножественныйВыпуск
			И Не ОписаниеПартииВыпуска.ВыпускПроизвольнымиПорциями
			И ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия <> ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска
			И ОписаниеПартииВыпуска.КоличествоУпаковок > 0 Тогда
				Результат = СтрШаблон(
								НСтр("ru = '%1 (%2 %3)';
									|en = '%1 (%2 %3)'"),
								Результат,
								Формат(ОписаниеПартииВыпуска.КоличествоУпаковок,"ЧН=; ЧГ="), 
								ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия
				);
		КонецЕсли;
		
		Возврат Результат;
	Иначе
		
		Возврат НСтр("ru = 'единиц/партий изделий';
					|en = 'units/lots of products'");
	КонецЕсли;

КонецФункции

// Устанавливает оформление для поля ввода количества единиц/партий
//
// Параметры:
//  ВыпускПроизвольнымиПорциями	 - Булево	 - Истина, если доступен выпуск произвольными порциями
//  Элемент						 - ПолеФормы - элемент управления.
//
Процедура УстановитьПараметрыВводаКоличестваЕдиницПартий(ВыпускПроизвольнымиПорциями, Элемент) Экспорт
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, ?(ВыпускПроизвольнымиПорциями,3,0)));
	
	Элемент.КнопкаВыбора        = ВыпускПроизвольнымиПорциями;
	Элемент.КнопкаРегулирования = НЕ ВыпускПроизвольнымиПорциями;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует представление этапа, которое можно использовать для вывода пользователю.
//
// Параметры:
//  СпецификацияПредставление			- Строка - Представление спецификации
//  ЭтапПредставление					- Строка - Представление этапа
//  МногоэтапныйПроизводственныйПроцесс	- Булево - Признак того что производственный процесс состоит из нескольких этапов
//  ЭтапВосстановленияБрака				- Булево - Признак того что этап создан для восстановление брака.
//
// Возвращаемое значение:
//   Строка   - представление этапа.
//
Функция ПредставлениеЭтапа(СпецификацияПредставление, ЭтапПредставление, МногоэтапныйПроизводственныйПроцесс, ЭтапВосстановленияБрака = Ложь) Экспорт

	Если МногоэтапныйПроизводственныйПроцесс Тогда
		СпецификацияСтрока = ЭтапПредставление + ", " + СпецификацияПредставление;
	Иначе
		СпецификацияСтрока = СпецификацияПредставление;
	КонецЕсли;
	Если ЭтапВосстановленияБрака Тогда
		СпецификацияСтрока = СпецификацияСтрока + " (" + НСтр("ru = 'восстановление брака';
																|en = 'restoring nonconforming goods '") + ")";
	КонецЕсли; 

	Возврат СпецификацияСтрока;
		
КонецФункции

// Возвращает строковое представление статуса спецификации
//
// Параметры:
//  Статус			 - ПеречислениеСсылка.СтатусыСпецификаций	 - статус спецификации
//  НачалоДействия	 - Дата										 - начало периода действия
//  КонецДействия	 - Дата										 - конец периода действия
//  СтрокаСтатус	 - Строка									 - представление.
// 
// Возвращаемое значение:
//  Строка - представление спецификации.
//
Функция ПредставлениеСтатусаСпецификации(Статус, НачалоДействия = '00010101', КонецДействия = '00010101', СтрокаСтатус = "") Экспорт
	
	Если ПустаяСтрока(СтрокаСтатус) Тогда
		СтрокаСтатус = Строка(Статус);
	КонецЕсли;
	
	СтрокаПериодДействия = "";
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
		Если НачалоДействия <> '00010101' И КонецДействия <> '00010101' Тогда
			СтрокаПериодДействия = " " + СтрШаблон(НСтр("ru = 'с %1 по %2';
														|en = 'from %1 to %2'"), Формат(НачалоДействия, "ДЛФ=D"), Формат(КонецДействия, "ДЛФ=D"));
		ИначеЕсли НачалоДействия <> '00010101' Тогда
			СтрокаПериодДействия = " " + СтрШаблон(НСтр("ru = 'с %1';
														|en = 'from %1'"), Формат(НачалоДействия, "ДЛФ=D"));
		ИначеЕсли КонецДействия <> '00010101'  Тогда
			СтрокаПериодДействия = " " + СтрШаблон(НСтр("ru = 'по %1';
														|en = 'to %1'"), Формат(КонецДействия, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСтатус = СтрШаблон("%1%2", СтрокаСтатус, СтрокаПериодДействия);
	
	Возврат СтрокаСтатус;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ДеревоСпецификаций

// Параметры построения дерева спецификаций
// 
// Возвращаемое значение:
//   - Структура - параметры построения дерева спецификации, содержит:
//   	* Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//   	* ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры
//   	* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//   	* Дата - Дата - дата подбора вложенных спецификаций
//   	* ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия - параметр назначения
//   	* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - параметр назанчения
//   	* ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций
//   	* ВыводитьЭтапы - Булево - признак вывода этапов
//   	* ВыводитьОперации - Булево - признак вывода операций
//   	* ВыводитьВыходныеИзделия - Булево - признак вывода выходных изделий
//   	* ВыводитьМатериалы - Булево - признак вывода материалов
//   	* ВыводитьТрудозатраты - Булево - признак вывода трудозатрат
//   	* ВыводитьЗаголовкиГруппировок - Булево - признак вывода заголовков группировок при печати
//   	* ВыводитьОстаткиТоваров - Булево - признак вывода остатков по складу
//   	* РазузловыватьПолуфабрикаты - Булево - признак необходимости разузлования полуфабрикатов
//   	* ДинамическоеСчитывание - Булево - режим динамического чтения узлов дерева
//   	* СохранятьДанные - Булево - признак сохранения данных
//   	* КлючСвязи - УникальныйИдентификатор - 
//   	* УпаковкаВыходногоИзделия - СправочникСсылка.УпаковкиЕдиницыИзмерения - 
//   	* КоличествоУпаковокВыходногоИзделия - Число - 
//   	* КоличествоВыходногоИзделия - Число - 
//   	* АдресВХранилище - Строка - адрес структуры заказа
//
Функция ПараметрыДереваСпецификаций() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Номенклатура");
	Параметры.Вставить("ХарактеристикаНоменклатуры");
	
	Параметры.Вставить("Спецификация");
	Параметры.Вставить("Дата");
	
	Параметры.Вставить("ПодразделениеДиспетчер");
	Параметры.Вставить("НаправлениеДеятельности");
	
	Параметры.Вставить("ПараметрыВыбораСпецификаций");
	
	Параметры.Вставить("ВыводитьЭтапы", Ложь);
	Параметры.Вставить("ВыводитьОперации", Ложь);
	Параметры.Вставить("ВыводитьВыходныеИзделия", Ложь);
	Параметры.Вставить("ВыводитьМатериалы", Ложь);
	Параметры.Вставить("ВыводитьТрудозатраты", Ложь);
	Параметры.Вставить("ВыводитьЗаголовкиГруппировок", Ложь);
	Параметры.Вставить("ВыводитьОстаткиТоваров", Ложь);
	
	Параметры.Вставить("РазузловыватьПолуфабрикаты", Ложь);
	Параметры.Вставить("ДинамическоеСчитывание", Ложь);
	Параметры.Вставить("СохранятьДанные", Ложь);

	//Начало.РежимДеревоСпецификацийЗаказа
	
	Параметры.Вставить("КлючСвязи");
	
	Параметры.Вставить("УпаковкаВыходногоИзделия");
	Параметры.Вставить("КоличествоУпаковокВыходногоИзделия");
	Параметры.Вставить("КоличествоВыходногоИзделия");

	Параметры.Вставить("АдресВХранилище");
	
	//Конец.РежимДеревоСпецификацийЗаказа
	
	Возврат Параметры;
	
КонецФункции

// Вызывается перед раскрытием узла дерева спецификаций.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - управляемая форма, на которой расположено дерево спецификаций
//  Идентификатор	 - Число			 - строка, которая будет развернута
//  Отказ			 - Булево			 - признак отказа от раскрытия узла.
//
Процедура ДеревоСпецификацийПередРазворачиванием(Форма, Идентификатор, Отказ) Экспорт
	
	Если Не Форма.ДинамическоеСчитывание Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.ДеревоСпецификаций.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЕстьСпецификация Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСтруктурой = СтрокаДереваСпецификацийСтруктурой(ТекущиеДанные);
	
	КоллекцияЭлементов = УправлениеДаннымиОбИзделияхВызовСервера.ДеревоСпецификацийПрочитатьЭлементы(
		ТекущиеДанныеСтруктурой, Форма.АдресДереваСпецификацийВХранилище);
	
	ДеревоСпецификацийВывестиЭлементы(ТекущиеДанные, КоллекцияЭлементов);
	
КонецПроцедуры

// Вызывается перед сворачиванием узла дерева спецификаций.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - управляемая форма, на которой расположено дерево спецификаций
//  Идентификатор	 - Число			 - строка, которая будет свернута
//  Отказ			 - Булево			 - признак отказа от сворачивания узла.
//
Процедура ДеревоСпецификацийПередСворачиванием(Форма, Идентификатор, Отказ) Экспорт
	
	Если Не Форма.ДинамическоеСчитывание Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.ДеревоСпецификаций.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЕстьСпецификация Тогда
		Возврат;
	КонецЕсли;
	
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	ДочерниеЭлементы.Очистить();
	ДочерниеЭлементы.Добавить();
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

#Область СписокМаршрутныхКарт

// Устанавливает отбор в динамическом списке маршрутных карт
// 
// Параметры:
// 	Список - ДинамическийСписок - список, для которого необходимо установить отбор
// 	Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// 	Назначение - ПеречислениеСсылка.ИспользованиеНоменклатурыВНСИПроизводства - дополнительный критерий отбора
Процедура УстановитьОтборПоНоменклатуреВСпискеМаршрутныхКарт(Список, Номенклатура, Назначение = Неопределено) Экспорт
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по номенклатуре';
			|en = 'Filter by items'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ВыходныеИзделия.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Изделие")));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.МатериалыИУслуги.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Материал")));
	
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#Область Автовыбор_ОтборПоСвойствам

Функция РеквизитыНастройкаОтбораПоСвойствам() Экспорт
	
	Возврат "Свойство,Условие,Значение";
	
КонецФункции

Функция ОтборПоСвойствамКлючСвязиПредопределенный(ВидНастройки) Экспорт
	
	Если ВидНастройки = "Номенклатура" Тогда
		
		Возврат Новый УникальныйИдентификатор("2f97ad16-b5bd-47c5-af87-b6dcc608e039");
		
	ИначеЕсли ВидНастройки = "Характеристика" Тогда
		
		Возврат Новый УникальныйИдентификатор("e826d6c8-259e-4721-8664-eac66f1434b5");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Для получения ключа отбора по свойствам передан неверный вид настройки.';
								|en = 'An invalid setting kind was passed to receive a filter key by properties'");
		
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьНастройкиАвтовыбораПоСтроке(ДанныеСтроки, СоответствиеСвойств) Экспорт
	
	НоменклатураУказываетсяВНСИ   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	ХарактеристикаУказываетсяВНСИ = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	
	Если ДанныеСтроки.СпособАвтовыбораНоменклатуры = НоменклатураУказываетсяВНСИ
		И ДанныеСтроки.СпособАвтовыбораХарактеристики = ХарактеристикаУказываетсяВНСИ Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтрок = СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
	Для каждого НайденнаяСтрока Из СписокСтрок Цикл
		СоответствиеСвойств.Удалить(НайденнаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОчиститьНастройкиОтбораПоСвойствамПоСтроке(ДанныеСтроки, ОтборПоСвойствам) Экспорт
	
	СписокСтрок = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
	Для каждого НайденнаяСтрока Из СписокСтрок Цикл
		ОтборПоСвойствам.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНастройкиУточненияПримененияСпецификации(Объект, ВидыНастроек = "Номенклатура,Характеристика") Экспорт
	
	Для каждого ВидНастройки Из СтрРазделить(ВидыНастроек,",") Цикл
	
		КлючСвязи = ОтборПоСвойствамКлючСвязиПредопределенный(ВидНастройки);
		
		СписокСтрок = Объект.ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			Объект.ОтборПоСвойствам.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСпецификаций

Процедура ДеревоСпецификацийВывестиЭлементы(ТекущаяСтрока, КоллекцияЭлементов, ВыводДочернихСтрок = Ложь) Экспорт
	
	ДочерниеЭлементы = ТекущаяСтрока.ПолучитьЭлементы();
	ДочерниеЭлементы.Очистить();
	
	Если ВыводДочернихСтрок И ТекущаяСтрока.ЕстьСпецификация И КоллекцияЭлементов.ВГраница() = -1 Тогда
		
		ДочерниеЭлементы.Добавить();
		Возврат;
		
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		
		НоваяСтрока = ДочерниеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		ДеревоСпецификацийВывестиЭлементы(НоваяСтрока, ЭлементКоллекции.Строки, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РежимДеревоСпецификаций() Экспорт
	
	Возврат "ДеревоСпецификаций";
	
КонецФункции

Функция РежимДеревоСпецификацийЗаказа()Экспорт
	
	Возврат "ДеревоСпецификацийЗаказа"; 
	
КонецФункции

// Помещает данные строки дерева спецификаций в структуру
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - данные строки
// Возвращаемое значение:
// 	Структура - структура данных строки из:
// * ВидСтроки - ПеречислениеСсылка.ВидыСтрокДереваСпецификаций - вид строки
// * Идентификатор - УникальныйИдентификатор - идентификатор строки дерева
// * Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
// * Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
// * Количество - Число - количество в базовой единице измерения
// * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения, Строка - базовая единица измерения
// * КоличествоУпаковок - Число - количество упаковок
// * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка
// * Склад - СправочникСсылка.Склады - склад обеспечения материала по умолчанию
// * ВНаличии - Число - в наличии на складе по умолчанию
// * Доступно - Число - доступно на складе по умолчанию
// * ИндексКартинки - Число, Картинка - индекс картинки в коллекции картинок
// * ПроизводитсяВПроцессе - Булево - признак производства в процессе
// * ПрименениеМатериалаРедактирование - Строка - 
// * ХарактеристикиИспользуются - Булево - признак использования характеристик
// * СпособАвтовыбораНоменклатуры - ПеречислениеСсылка.СпособыАвтовыбораНоменклатуры - способ автовыбора номенклатуры
// * СпособАвтовыбораХарактеристики - ПеречислениеСсылка.СпособыАвтовыбораХарактеристики - способ автовыбора характеристики
// * ЕстьСпецификация - Булево - признак наличия спецификации
// * СпецификацияПрочитана - Булево
//
Функция СтрокаДереваСпецификацийСтруктурой(ТекущаяСтрока) Экспорт
	
	СтруктураПолей = Новый Структура("
		|ВидСтроки,
		|Идентификатор,
		|Номенклатура,
		|Характеристика,
		|Спецификация,
		|Количество,
		|ЕдиницаИзмерения,
		|КоличествоУпаковок,
		|Упаковка,
		|Склад,
		|ВНаличии,
		|Доступно,
		|ИндексКартинки,
		|ПроизводитсяВПроцессе,
		|ПрименениеМатериалаРедактирование,
		|ХарактеристикиИспользуются,
		|СпособАвтовыбораНоменклатуры,
		|СпособАвтовыбораХарактеристики,
		|ЕстьСпецификация,
		|СпецификацияПрочитана");
	
	ЗаполнитьЗначенияСвойств(СтруктураПолей, ТекущаяСтрока);
	
	СтруктураПолей.Вставить("Строки", Новый Массив);
	
	Возврат СтруктураПолей;
	
КонецФункции

Функция СтруктураОтбораСпискаДоступныхСпецификаций() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура",   ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область Спецификации

Функция СобратьДанныеОбИзделииДляВыбораСпецификации(Объект,
	ТекущиеДанные,
	ПараметрыВыбораСпецификаций,
	Форма = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	КлючПутейКДанным         = "";
	ИмяРеквизитаСпецификация = "Спецификация";
	ИмяРеквизитаОбъект       = "Объект";
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Если ДополнительныеПараметры.Свойство("КлючПутейКДанным") Тогда
			КлючПутейКДанным = ДополнительныеПараметры.КлючПутейКДанным;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ИмяРеквизитаСпецификация") Тогда
			ИмяРеквизитаСпецификация = ДополнительныеПараметры.ИмяРеквизитаСпецификация;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ИмяРеквизитаОбъект") Тогда
			ИмяРеквизитаОбъект = ДополнительныеПараметры.ИмяРеквизитаОбъект;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = СтруктураДанныхОбИзделииДляВыбораСпецификации();
	
	Если НЕ ПараметрыВыбораСпецификаций.Свойство("СвязиПараметровВыбора") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПутиКДанным = Неопределено;
	Если НЕ ПустаяСтрока(КлючПутейКДанным) Тогда
		ПутиКДанным = ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Получить(СтрШаблон("%1.%2", КлючПутейКДанным, ИмяРеквизитаСпецификация));
	Иначе
		Для каждого КлючИЗначение Из ПараметрыВыбораСпецификаций.СвязиПараметровВыбора Цикл
			ПутиКДанным = КлючИЗначение.Значение;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутиКДанным) Тогда
		
		Для каждого КлючИЗначение Из ПутиКДанным Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				ПутьКДанным = КлючИЗначение.Значение.ПутьКДанным;
			Иначе
				ПутьКДанным = КлючИЗначение.Значение;
			КонецЕсли;
			
			ЧастиПути = СтрРазделить(ПутьКДанным, ".");
			ИмяПоля = ЧастиПути[ЧастиПути.ВГраница()];
			
			Если ЧастиПути.Количество() = 1 И Форма <> Неопределено Тогда
				Результат[КлючИЗначение.Ключ] = Форма[ИмяПоля];
			ИначеЕсли ЧастиПути.Количество() = 2 И ЧастиПути[0] = ИмяРеквизитаОбъект Тогда
				Результат[КлючИЗначение.Ключ] = Объект[ИмяПоля];
			Иначе
				Результат[КлючИЗначение.Ключ] = ТекущиеДанные[ИмяПоля];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Определяет доступность многоэтапных спецификаций
// 
// Возвращаемое значение:
//  Булево
Функция МногоэтапныйПроизводственныйПроцессДоступен() Экспорт
	
	Результат = Ложь;
	//++ НЕ УТКА
	Результат = Истина;
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

// Текст ошибки недоступность многоэтапного производственного процесса
// 
// Возвращаемое значение:
//  Строка
Функция МногоэтапныйПроизводственныйПроцессТекстОшибки() Экспорт
	
	Результат = НСтр("ru = 'Многоэтапные спецификации не поддерживаются в КА. Поддержка таких спецификаций имеется в 1C:ERP.';
					|en = 'Multi-stage BOMs are not supported in PA. They are supported in 1C:ERP.'");
	//++ НЕ УТКА
	Результат = НСтр("ru = 'Поддерживаются только одноэтапные спецификации.';
					|en = 'Only one-step BOMs are supported.'");
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрименениеМатериалов

// Заполняет информацию по автовыбору материала в строке табличной части
//
Процедура ЗаполнитьИнформациюПоПрименениюМатериала(Строка) Экспорт
	
	СтрокаВероятность = "";
	
//++ НЕ УТКА
	Если Строка.Вероятность > 0 Тогда
		
		Если Строка.Альтернативный Тогда
			Шаблон = НСтр("ru = 'по требованию (вероятность %1)';
							|en = 'on demand (probability %1)'");
		Иначе
			Шаблон = НСтр("ru = 'по умолчанию (вероятность %1)';
							|en = 'by default (probability %1)'");
		КонецЕсли;
		СтрокаВероятность = СтрШаблон(Шаблон, "" + Строка.Вероятность + "%");
		
	ИначеЕсли Строка.Альтернативный Тогда
		
		СтрокаВероятность = НСтр("ru = 'по требованию';
								|en = 'on demand'");
		
	КонецЕсли;
//-- НЕ УТКА
	Строка.ПрименениеМатериалаРедактирование = Строка.ПрименениеМатериала + ?(НЕ ПустаяСтрока(СтрокаВероятность) И НЕ ПустаяСтрока(Строка.ПрименениеМатериала),", ","") + СтрокаВероятность;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область ПараметрыНазначения

// Конструктор описания значения параметра назначения спецификации
// 
// Возвращаемое значение:
// 	Структура - из:
// * Условие - см. СтруктураУсловияОтбораПоСвойствамНоменклатуры
// * Значение - СписокЗначений,Характеристика.ДополнительныеРеквизитыИСведения - значение параметра
// * Значение1 - Число - значение интервального условия От
// * Значение2 - Число - значение интервального условия До
Функция СтруктураЗначенияПараметраНазначенияСпецификаций() Экспорт
	
	Возврат Новый Структура("Условие,Значение,Значение1,Значение2");
	
КонецФункции

// Определяет обязательность заполнения параметра назначения
// 
// Параметры:
//  Условие - см. СтруктураУсловияОтбораПоСвойствамНоменклатуры
//  ТипЗначения - Тип
// 
// Возвращаемое значение:
//  Булево - Обязательность
Функция ЗаполнениеЗначенияПараметраНазначенияОбязательно(Условие, ТипЗначения) Экспорт
	
	Возврат НЕ Условие.Заполненность
		И НЕ (ТипЗначения.СодержитТип(Тип("Число")) И ТипЗначения.Типы().Количество() = 1);
	
КонецФункции

// Определяет тип значения параметра назначения по виду параметра и типу значения реквизита
// 
// Параметры:
//  ВидПараметра - ПеречислениеСсылка.ВидыПараметровНазначенияСпецификаций - вид параметра
//  ТипЗначенияРеквизита - Тип
// 
// Возвращаемое значение:
//  Тип - тип значения параметра
Функция ТипЗначенияПараметраНазначения(ВидПараметра, ТипЗначенияРеквизита) Экспорт
	
	ТипЗначения = ТипЗначенияРеквизита;
	
	Если ВидПараметра = ПредопределенноеЗначение("Перечисление.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер") Тогда
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ИначеЕсли ВидПараметра = ПредопределенноеЗначение("Перечисление.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности") Тогда
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	КонецЕсли;
	
	Возврат ТипЗначения;
	
КонецФункции

// Определяет доступность интервала для параметра назначения
// 
// Параметры:
//  ТипЗначения - Тип
// 
// Возвращаемое значение:
//  Булево - Доступность интервала
Функция ДоступенИнтервалПараметраНазначения(ТипЗначения) Экспорт
	
	Возврат ТипЗначения.СодержитТип(Тип("Число")) ИЛИ ТипЗначения.СодержитТип(Тип("Дата"));
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаПроизводственнойНСИ

// Ключ описания объекта загрузки по имени справочника и имени таб. части.
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка
//  ИмяТЧ - Строка
// 
// Возвращаемое значение:
//  Строка - Ключ описания объекта загрузки
Функция КлючОписанияЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ = "") Экспорт
	
	Возврат ?(ПустаяСтрока(ИмяТЧ), ИмяОбъектаМетаданных, СтрШаблон("%1_%2", ИмяОбъектаМетаданных, ИмяТЧ));
	
КонецФункции

// Ключ алгоритма обработки объекта при загрузке.
// 
// Параметры:
//  ИмяСобытия - Строка
//  ИмяОбъектаМетаданных - Строка
//  ИмяТЧ - Строка
// 
// Возвращаемое значение:
//  Строка
Функция КлючАлгоритмаОбработкиОбъектаПриЗагрузке(ИмяСобытия, ИмяОбъектаМетаданных, ИмяТЧ = "") Экспорт
	
	Возврат СтрШаблон("%1_%2", КлючОписанияЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ), ИмяСобытия);
	
КонецФункции

// Ключ раздела изделия и материалы.
// 
// Возвращаемое значение:
//  Строка
Функция КлючРазделаИзделияИМатериалы() Экспорт
	
	Возврат "products";
	
КонецФункции

// Ключ раздела производственное оборудование.
// 
// Возвращаемое значение:
//  Строка
Функция КлючРазделаПроизводственноеОборудование() Экспорт
	
	Возврат "equipment";
	
КонецФункции

// Ключ раздела составы изделий.
// 
// Возвращаемое значение:
//  Строка
Функция КлючРазделаСоставыИзделий() Экспорт
	
	Возврат "bom";
	
КонецФункции

// Ключ раздела технология производства.
// 
// Возвращаемое значение:
//  Строка
Функция КлючРазделаТехнологияПроизводства() Экспорт
	
	Возврат "technology";
	
КонецФункции

// Ключ раздела разрешения на замену материалов.
// 
// Возвращаемое значение:
//  Строка
Функция КлючРазделаЗаменыМатериалов() Экспорт
	
	Возврат "replacements";
	
КонецФункции

// Состав загружаемых данных по умолчанию
// 
// Возвращаемое значение:
//  Структура из Строка
Функция РазделыКОбработкеКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить(КлючРазделаИзделияИМатериалы());
	Результат.Вставить(КлючРазделаПроизводственноеОборудование());
	Результат.Вставить(КлючРазделаСоставыИзделий());
	Результат.Вставить(КлючРазделаТехнологияПроизводства());
	
	Возврат Результат;
	
КонецФункции

// Порядок обработки разделов при загрузке.
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ПорядокОбработкиРазделов() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(КлючРазделаИзделияИМатериалы());
	Результат.Добавить(КлючРазделаПроизводственноеОборудование());
	Результат.Добавить(КлючРазделаСоставыИзделий());
	Результат.Добавить(КлючРазделаТехнологияПроизводства());
	Результат.Добавить(КлючРазделаЗаменыМатериалов());
	
	Возврат Результат;
	
КонецФункции

// Порядок обработки разделов при загрузке.
// 
// Параметры:
//  НастройкиИсточникаДанных - см. Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанныхКонструктор
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ПорядокОбработкиРазделовИсточника(НастройкиИсточникаДанных = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого КлючРаздела Из ПорядокОбработкиРазделов() Цикл
		
		Если НастройкиИсточникаДанных = Неопределено
			ИЛИ НастройкиИсточникаДанных.РазделыКОбработке.Свойство(КлючРаздела) Тогда
			
			Результат.Добавить(КлючРаздела);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Представление файла данных по ключу раздела.
// 
// Параметры:
//  КлючРаздела - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеФайлаДанныхПоКлючуРаздела(КлючРаздела) Экспорт
	
	Результат = КлючРаздела;
	
	Если КлючРаздела = КлючРазделаИзделияИМатериалы() Тогда
		Результат = НСтр("ru = 'Изделия и материалы';
						|en = 'Finished products and materials'");
	ИначеЕсли КлючРаздела = КлючРазделаПроизводственноеОборудование() Тогда
		Результат = НСтр("ru = 'Оборудование';
						|en = 'Equipment'");
	ИначеЕсли КлючРаздела = КлючРазделаСоставыИзделий() Тогда
		Результат = НСтр("ru = 'Составы';
						|en = 'Compositions'");
	ИначеЕсли КлючРаздела = КлючРазделаТехнологияПроизводства() Тогда
		Результат = НСтр("ru = 'Технология';
						|en = 'Technology'");
	ИначеЕсли КлючРаздела = КлючРазделаЗаменыМатериалов() Тогда
		Результат = НСтр("ru = 'Замены';
						|en = 'Replacements'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Имя события перед загрузкой объекта.
// 
// Возвращаемое значение:
//  Строка - Имя события
Функция ИмяСобытияПередЗагрузкойОбъекта() Экспорт
	
	Возврат "ПередЗагрузкой";
	
КонецФункции

// Имя события перед записью объекта.
// 
// Возвращаемое значение:
//  Строка - Имя события
Функция ИмяСобытияПередЗаписьюОбъекта() Экспорт
	
	Возврат "ПередЗаписью";
	
КонецФункции

// Имя события завершения загрузки данных по источнику
// 
// Возвращаемое значение:
//  Строка - Имя события
Функция ИмяСобытияЗагрузкаЗавершение() Экспорт
	
	Возврат "ЗагрузкаПроизводственнойНСИ_Завершение";
	
КонецФункции

// Ключ связи вида алгоритма обработки объекта.
// 
// Параметры:
//  ИмяСобытия - Строка
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
Функция КлючСвязиВидаАлгоритмаОбработкиОбъекта(ИмяСобытия) Экспорт
	
	Результат = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	
	Если ИмяСобытия = ИмяСобытияПередЗагрузкойОбъекта() Тогда
		Результат = Новый УникальныйИдентификатор("bba2d7a1-b1a9-4761-a878-180d0a45c0fd");
	ИначеЕсли ИмяСобытия = ИмяСобытияПередЗаписьюОбъекта() Тогда
		Результат = Новый УникальныйИдентификатор("5a278bf8-8055-4a58-8a1b-2122c98fb495");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Представление вида алгоритма обработки объекта
//
// Параметры:
//  ИмяСобытия - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеВидаАлгоритмаОбработкиОбъекта(ИмяСобытия) Экспорт
	
	Результат = "";
	
	Если ИмяСобытия = УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗагрузкойОбъекта() Тогда
		Результат = НСтр("ru = 'Перед загрузкой';
						|en = 'Before importing'");
	ИначеЕсли ИмяСобытия = УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗаписьюОбъекта() Тогда
		Результат = НСтр("ru = 'Перед записью';
						|en = 'Before saving'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перечень групп реквизитов элемента загружаемых данных
// Параметры:
//  Исключаемые - Булево - включать реквизиты, недоступные для интерактивной настройки
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ГруппыРеквизитов(Исключаемые = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("РеквизитыИдентификаторы");
	Результат.Добавить("РеквизитыСтандартные");
	Результат.Добавить("РеквизитыПрикладные");
	Результат.Добавить("РеквизитыДополнительные");
	Результат.Добавить("РеквизитыСлужебные");
	
	Если Исключаемые Тогда
		Результат.Добавить("РеквизитыИсключаемые");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перечень групп реквизитов шапки объекта
// Параметры:
//  Исключаемые - Булево - включать реквизиты, недоступные для интерактивной настройки
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ГруппыРеквизитовШапкиОбъекта(Исключаемые = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("РеквизитыСтандартные");
	Результат.Добавить("РеквизитыПрикладные");
	
	Если Исключаемые Тогда
		Результат.Добавить("РеквизитыИсключаемые");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Регистр соответствия по типу данных.
// Параметры:
//  ТипДанных - Строка
// 
// Возвращаемое значение:
//  Структура - Регистр соответствия по типу данных:
// * ИмяРегистра - Строка
// * ИмяТаблицы - Строка
// * ПоляОбъектаДоступные - Массив
// * ПоляОбъектаПереопределение - Структура
Функция ПараметрыРегистраСоответствия(ТипДанных) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРегистра",                "");
	Результат.Вставить("ИмяТаблицы",                 "");
	Результат.Вставить("ПоляОбъектаДоступные",       Новый Массив);
	Результат.Вставить("ПоляОбъектаПереопределение", Новый Структура);
	
	Если ТипЗнч(ТипДанных) = Тип("СправочникСсылка.Номенклатура")
			ИЛИ ТипЗнч(ТипДанных) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
			ИЛИ (ТипЗнч(ТипДанных) = Тип("Строка") И ТипДанных = "Номенклатура") Тогда
				
		Результат.ИмяРегистра = "СоответствиеНоменклатурыДляЗагрузкиНСИ";
		
		Результат.ПоляОбъектаДоступные.Добавить("Номенклатура");
		Результат.ПоляОбъектаДоступные.Добавить("Характеристика");
		
		Результат.ПоляОбъектаПереопределение.Вставить("Номенклатура");
		Результат.ПоляОбъектаПереопределение.Вставить("Характеристика");
		Результат.ПоляОбъектаПереопределение.Вставить("ОбъектМетаданных", "ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
		Результат.ПоляОбъектаПереопределение.Вставить("СсылкаНаОбъект", "НЕОПРЕДЕЛЕНО");
	
	Иначе
		
		Результат.ИмяРегистра = "СоответствиеОбъектовДляЗагрузкиНСИ";
		
		Результат.ПоляОбъектаДоступные.Добавить("СсылкаНаОбъект");
		
		Результат.ПоляОбъектаПереопределение.Вставить("Номенклатура", "ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
		Результат.ПоляОбъектаПереопределение.Вставить("Характеристика", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		Результат.ПоляОбъектаПереопределение.Вставить("ОбъектМетаданных");
		Результат.ПоляОбъектаПереопределение.Вставить("СсылкаНаОбъект", "ВЫРАЗИТЬ(&ИмяТаблицы.СсылкаНаОбъект КАК &ИмяТипа)");
		
	КонецЕсли;
	
	Результат.ИмяТаблицы = СтрШаблон("РегистрСведений.%1", Результат.ИмяРегистра);
	
	Возврат Результат;
	
КонецФункции

// Описание настроек действия с файлами после выполнения загрузки.
// Параметры:
//  СостояниеНаименование - Строка
// 
// Возвращаемое значение:
//  Структура - Описание действия с файлами конструктор:
// * Состояние - ПеречислениеСсылка.ЗагрузкаНСИСостояния
// * Действие - ПеречислениеСсылка.ЗагрузкаНСИДействияСФайлами
// * Каталог - Строка
Функция ОписаниеДействияСФайламиКонструктор(СостояниеНаименование = "НеВыполнялась") Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СостояниеНаименование", СостояниеНаименование);
	Результат.Вставить("Состояние", ПредопределенноеЗначение(СтрШаблон("Перечисление.ЗагрузкаНСИСостояния.%1", СостояниеНаименование)));
	Результат.Вставить("Действие",  ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИДействияСФайлами.НеЗадано"));
	Результат.Вставить("Каталог",   "");
	
	Возврат Результат;
	
КонецФункции

// Правило разрешения конфликта при поиске - регистрировать ошибку.
// 
// Возвращаемое значение:
//  Число
Функция ПравилоРазрешенияКонфликтаПриПоискеРегистрироватьОшибку() Экспорт
	
	Возврат 0;
	
КонецФункции

// Правило разрешения конфликта при поиске - сортировать.
// 
// Возвращаемое значение:
//  Число
Функция ПравилоРазрешенияКонфликтаПриПоискеСортировать() Экспорт
	
	Возврат 1;
	
КонецФункции

// Конструктор структуры правила разрешения конфликтов при поиске
// 
// Возвращаемое значение:
//  Структура - Правило разрешения конфликта при поиске конструктор:
// * Правило - Число - номер правила
// * НастройкиСортировки - Массив - настройка сортировки
Функция ОписаниеНастройкиРазрешенияКонфликтаПриПоискеКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Правило", ПравилоРазрешенияКонфликтаПриПоискеРегистрироватьОшибку());
	Результат.Вставить("НастройкиСортировки", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры настройки обновления объектов
// 
// Возвращаемое значение:
//  Структура - Правило разрешения конфликта при поиске конструктор:
// * ВариантОбновления - ПеречислениеСсылка.ЗагрузкаНСИВариантыОбновленияОбъекта
Функция ОписаниеНастройкиОбновленияОбъектовКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВариантОбновления", ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИВариантыОбновленияОбъекта.ПриНаличииИзменений"));
	Результат.Вставить("Параметры");
	
	Возврат Результат;
	
КонецФункции

// Описание элемента сортирвки.
// 
// Возвращаемое значение:
//  Структура - Описание элемента сортирвки конструктор:
// * ИмяРеквизита - Строка
// * Направление - Строка
Функция ОписаниеЭлементаСортировкиКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяРеквизита", "");
	Результат.Вставить("Направление",  "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

Функция СтруктураОписаниеПартииВыпуска() Экспорт
	
	ОписаниеПартииВыпуска = Новый Структура("
		|МножественныйВыпуск,
		|ВыпускПроизвольнымиПорциями,
		|
		|ВидНоменклатуры,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|КоличествоУпаковок,
		|
		|ЕдиницаИзмеренияИзделия,
		|ЕдиницаИзмеренияПартииВыпуска");
	
	ОписаниеПартииВыпуска.МножественныйВыпуск = Ложь;
	ОписаниеПартииВыпуска.ВыпускПроизвольнымиПорциями = Ложь;
	
	ОписаниеПартииВыпуска.ВидНоменклатуры = ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка");
	ОписаниеПартииВыпуска.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	ОписаниеПартииВыпуска.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	
	ОписаниеПартииВыпуска.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	ОписаниеПартииВыпуска.КоличествоУпаковок = 0;
	
	ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	
	Возврат ОписаниеПартииВыпуска;
	
КонецФункции

Функция ОсновнаяЕдиницаВремени() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");

КонецФункции

Функция РеквизитыНастройкаСоответствияСвойств() Экспорт
	
	Возврат "СвойствоМатериала,СвойствоПродукции,ЗначениеСвойства,АлгоритмРасчетаЗначения,СпособПодбораЗначения";
	
КонецФункции

// Конструктор описания функции конструктора формул
// 
// Параметры:
// 	ИмяФункции - Строка - имя функции модуля
// 	ИмяМодуля - Строка - имя модуля
// 	Наименование - Строка - наименование функции
// 	Идентификатор - Строка - идентификатор функции
// 	Представление - Строка - представление функции
// Возвращаемое значение:
// 	Структура - из:
// 		* ИмяФункции - Строка - имя функции модуля
// 		* ИмяМодуля - Строка - имя модуля
// 		* Наименование - Строка - наименование функции
// 		* Идентификатор - Строка - идентификатор функции
// 		* Представление - Строка - представление функции
//
Функция ПараметрыВыбораСпецификацийНаИзготовлениеСборку() Экспорт
	
	ПараметрыВыбора = ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбора.ДоступныеТипы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ПараметрыВыбора.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует"));
	
	Возврат ПараметрыВыбора;
	
КонецФункции

// Формирует массив условий отбора по свойствам
// 
// Возвращаемое значение:
// 	Массив из Структура - из:
// 		* Идентификатор - Строка - идентификатор условия
// 		* Представление - Строка - представление условия
// 		* Сравнение - Булево - признак условия сравнения
// 		* Шаблон - Строка - шаблон условия
Функция СписокУсловийОтбораПоСвойствамНоменклатуры()
	
	Результат = Новый Массив;
	
	Реквизиты = "Идентификатор, Представление, Сравнение, Шаблон";
	
	Условие = Новый Структура(Реквизиты, "Равно",             НСтр("ru = 'Равно';
																	|en = 'Equal to'"),               Ложь,   "%1 = %2");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "НеРавно",           НСтр("ru = 'Не равно';
																	|en = 'Not equal'"),            Ложь,   "%1 <> %2");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "Больше",            НСтр("ru = 'Больше';
																	|en = 'Greater than'"),              Истина, "%1 > %2");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "БольшеИлиРавно",    НСтр("ru = 'Больше или равно';
																	|en = 'Greater than or equal'"),    Истина, "%1 >= %2");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "Меньше",            НСтр("ru = 'Меньше';
																	|en = 'Less'"),              Истина, "%1 < %2");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "МеньшеИлиРавно",    НСтр("ru = 'Меньше или равно';
																	|en = 'Less than or equal'"),    Истина, "%1 <= %2");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "ВСписке",           НСтр("ru = 'В списке';
																	|en = 'In the list'"),            Ложь,   "%1 В (%2)");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "НеВСписке",         НСтр("ru = 'Не в списке';
																	|en = 'Not in the list'"),         Ложь,   "НЕ %1 В (%2)");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "ВИнтервале",        НСтр("ru = 'В интервале (>,<)';
																	|en = 'Within interval (>,<)'"),   Истина, "%1 > %2 И %1 < %3");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "ВИнтервалеВключая", НСтр("ru = 'В интервале (>=,<=)';
																	|en = 'Within interval (>=,<=)'"), Истина, "%1 >= %2 И %1 <= %3");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "Заполнено",         НСтр("ru = 'Заполнено';
																	|en = 'Filled'"),           Ложь,   "НЕ %1 В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)");
	Результат.Добавить(Условие);
	Условие = Новый Структура(Реквизиты, "НеЗаполнено",       НСтр("ru = 'Не заполнено';
																	|en = 'Blank'"),        Ложь,   "%1 В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)");
	Результат.Добавить(Условие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураУсловийОтбораПоСвойствамНоменклатуры() Экспорт
	
	СтруктураУсловий = Новый Структура;
	
	Условия = СписокУсловийОтбораПоСвойствамНоменклатуры();
	Для каждого Условие Из Условия Цикл
		
		СвойстваУсловия = СтруктураУсловияОтбораПоСвойствамНоменклатуры(Условие);
		
		СтруктураУсловий.Вставить(Условие.Идентификатор, СвойстваУсловия);
		
	КонецЦикла;
	
	Возврат СтруктураУсловий;
	
КонецФункции

// Конструктор структуры условия отбора по свойствам
// 
// Параметры:
// 	Условие - Структура - из:
// 		* Идентификатор - Строка - идентификатор условия
// 		* Представление - Строка - представление условия
// 		* Сравнение - Булево - признак условия сравнения
// 		* Шаблон - Строка - шаблон условия
// Возвращаемое значение:
// 	Структура - из:
//		* Идентификатор - Строка - идентификатор условия
//		* Представление - Строка - представление условия
//		* Сравнение - Булево - признак условия сравнения
//		* Шаблон - Строка - шаблон условия
//		* Список - Булево - признак условия работы со списом
//		* Интервал - Булево - признак интервального условия
//		* Заполненность - Булево - признак условия приверки заполненности
//		* Включая - Булево - признак условия с включением границы
//		* Обратное - Булево - признак инверсии в условии
Функция СтруктураУсловияОтбораПоСвойствамНоменклатуры(Условие) Экспорт
	
	УсловияВключая  = СтрРазделить("Равно,ВСписке,БольшеИлиРавно,МеньшеИлиРавно,ВИнтервалеВключая", ",");
	УсловияОбратные = СтрРазделить("НеРавно,НеВСписке", ",");
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", Условие.Идентификатор);
	Результат.Вставить("Представление", Условие.Представление);
	Результат.Вставить("Сравнение",     Условие.Сравнение);
	Результат.Вставить("Шаблон",        Условие.Шаблон);
	Результат.Вставить("Список",        СтрНайти(Условие.Идентификатор, "ВСписке") > 0);
	Результат.Вставить("Интервал",      СтрНайти(Условие.Идентификатор, "ВИнтервале") > 0);
	Результат.Вставить("Заполненность", СтрНайти(Условие.Идентификатор, "Заполнено") > 0);
	Результат.Вставить("Включая",       УсловияВключая.Найти(Условие.Идентификатор) <> Неопределено);
	Результат.Вставить("Обратное",      УсловияОбратные.Найти(Условие.Идентификатор) <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти