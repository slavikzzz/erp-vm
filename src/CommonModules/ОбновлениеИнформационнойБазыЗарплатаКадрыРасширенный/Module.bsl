
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет стандартные свойства библиотеки или конфигурации, требуемые для ее использования.
// Поставляемая конфигурация должна рассматриваться как потенциальная библиотека, поэтому
// ее свойства описываются не только в метаданных, но и в коде, как и для любой библиотеки.
//
// Под библиотекой понимается одна или несколько подсистем, а под конфигурацией все, что
// не принадлежит ни одной библиотеке. Библиотека у которой имя совпадает с именем
// конфигурации в метаданных, считается конечной конфигурацией.
// БСП - всегда первая, конечная конфигурация всегда последняя (например, для порядка обновления ИБ).
// 
// Параметры:
//  Описание - Структура со свойствами:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив значений типа Строка, содержащий имена других библиотек.
//                         После получения описаний всех библиотек будет проверено, что
//                         все библиотеки требуемые другими библиотеками зарегистрированы и
//                         будет построена линейная последовательность библиотек по мере
//                         их требуемости. При наличии взаимозависимости или их отсутствии
//                         порядок определяется порядком добавления основных модулей библиотек
//                         в процедуре ПриДобавленииПодсистемы общего модуля
//                         ПодсистемыКонфигурацииПереопределяемый.
//                         Порядок используется при выполнении обработчиков обновления
//                         информационной базы.
//
// Для стандартных процедур в основных модулях библиотек рекомендуется использовать
// не копию комментария, а ссылку на комментарий в модуле этом модуле.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЗарплатаКадрыРасширенная";
	Описание.Версия = "3.1.30.197";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЭтоНачальноеЗаполнениеИлиОбновление = ЗарплатаКадрыРасширенныйПовтИсп.ЭтоНачальноеЗаполнениеИлиОбновление();
	
	Если ЭтоНачальноеЗаполнениеИлиОбновление Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьФункциональныеОпцииИспользованияЗарплатыИКадров";
		Обработчик.ОбщиеДанные = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеНесколькихОрганизаций";
		Обработчик.ОбщиеДанные = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьФункциональныеОпцииПоМетаданным";
		Обработчик.ОбщиеДанные = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьВидОрганизации";
		Обработчик.ОбщиеДанные = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьЗначениеКонстантыРаботаВНесколькихХозрасчетныхОрганизациях";
		Обработчик.ОбщиеДанные = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьЗначениеКонстантыИспользоватьНачислениеЗарплатыНесколькихОрганизаций";
		Обработчик.ОбщиеДанные = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;

		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьЦелевоеВремяКлючевыхОпераций";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.55";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыНакопления.УдалитьВыполненныеРаботыСотрудников.ЗаполнитьОрганизацию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0a3a7805-dd94-472a-9dfa-2f011b086089");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.55";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыНакопления.ВытесняемоеПлановоеВремяСотрудников.ЗаполнитьОрганизацию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c67bf8ab-8bae-4bc0-93d2-9d1de3ad5980");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.55";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыНакопления.ДанныеИндивидуальныхГрафиковСотрудников.ЗаполнитьОрганизацию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8c16d519-7b08-487e-8e29-5620c902ceb7");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.55";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников.ЗаполнитьОрганизацию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0c59ab3b-1d60-4417-85be-26dd28bb0ef4");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.55";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников.ЗаполнитьОрганизацию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c7bac51c-338c-425c-bbc8-cff65a8e3bdb");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.55";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.ЗаполнитьОрганизацию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("720ab949-6fc7-4fb1-898e-8512197e2c3d");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.13";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыСведений.ТерриторииСотрудников.ЗаполнитьИнтервальныйРегистр";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bd5dd08e-ffde-4e5e-bf5a-ecde990ea11e");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.53";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "УчетСтажаПФРРасширенный.ЗаполнитьДатуНачалаДвиженийПФР";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("19ecfd53-0e71-41b7-a6a5-1a5c8eebf15d");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.3";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыСведений.ПодчиненностьПодразделенийОрганизаций.ПереЗаполнитьПодчиненностьПодразделений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ad067856-dd98-4279-af97-0fe93b510042");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнения регистра сведений ""Подчиненность подразделений организаций"".';
									|en = 'Refill the ""Subordination of organizational units"" information register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.11";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "Обработки.РедактированиеЗаконодательныхЗначений.УточнитьИмяРолиПросмотраЗаконодательныхЗначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b20efc9a-43af-4401-8ad6-9dc2a484f0fd");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение имени роли доступа к обработке ""Редактирование законодательных значений"".';
									|en = 'Clarification of the access role name to the ""Editing statutory values"" data processor.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.4";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьПланируемуюДатуВыплаты";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7e3c08b7-fad5-45dc-81d7-f7f90908f83e");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Планируемая дата выплаты"" в документе ""Компенсация за задержку зарплаты""';
									|en = 'Fill the ""Planned payment date"" attribute in the ""Compensation for late payment of salary"" document.'");
	
	РасчетЗарплатыРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ДоговорыГПХРасширенный.ПриДобавленииОбработчиковОбновления(Обработчики);
	ВыплатыПоДоговорамОпеки.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	ВзаиморасчетыПоПрочимДоходам.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	СтимулирующиеВыплатыФСС.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетРабочегоВремениРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	КадровыйУчетРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УправлениеШтатнымРасписанием.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	СтатистикаПерсоналаРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетНДФЛРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСтраховыхВзносовРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	КонтрактыДоговорыСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ПерерасчетЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОстаткиОтпусков.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетПрочихДоходов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОграничениеВзысканий.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	КабинетСотрудникаРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	БизнесПроцессыЗаявокСотрудниковРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	МногофункциональныеДокументыБЗК.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	СостоянияСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	СборГрафиковОтпусков.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ИнтеграцияКабинетСотрудникаРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ИнтеграцияУправлениеПерсоналомРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСреднегоЗаработка.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ЗаявкиСотрудниковРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	// ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
		МодульНачальнаяНастройкаПрограммы = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
		МодульНачальнаяНастройкаПрограммы.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы
	
	// ЗарплатаКадрыПриложения.ПереносДанныхЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПереносДанныхЗарплатаКадры") Тогда
		МодульПереносДанныхЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ПереносДанныхЗарплатаКадры");
		МодульПереносДанныхЗарплатаКадры.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ПереносДанныхЗарплатаКадры
	
	// ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	
	// ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная") Тогда
		МодульВзаиморасчетыССотрудникамиВХОРасширенный = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХОРасширенный");
		МодульВзаиморасчетыССотрудникамиВХОРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	
	// ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		МодульУчетНДФЛВХО = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		МодульУчетНДФЛВХО.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	
	// ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		МодульУчетСтраховыхВзносовВХО = ОбщегоНазначения.ОбщийМодуль("УчетСтраховыхВзносовВХО");
		МодульУчетСтраховыхВзносовВХО.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	
	// ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		МодульУчетБюджетныхУчреждений.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений
	
	// ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций") Тогда
		МодульУчетХозрасчетныхОрганизаций = ОбщегоНазначения.ОбщийМодуль("УчетХозрасчетныхОрганизаций");
		МодульУчетХозрасчетныхОрганизаций.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций
	
	// ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		МодульУчетХозрасчетныхОрганизаций = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		МодульУчетХозрасчетныхОрганизаций.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций

	
	// ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия") Тогда
		МодульЗарплатаКадрыБазоваяВерсия = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыБазоваяВерсия");
		МодульЗарплатаКадрыБазоваяВерсия.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	
	// ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
		МодульОперацииРасчетаЗарплаты = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		МодульОперацииРасчетаЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		МодульКлючевыеПоказателиЭффективности.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью") Тогда
		МодульЭлектронноеИнтервью = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеИнтервью");
		МодульЭлектронноеИнтервью.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью
	
	// ЗарплатаКадрыПриложения.КадровыйРезерв
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КадровыйРезерв
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОбучениеРазвитие
	
	// ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
		
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
		
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты

	// ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
		МодульТрудоустройствоПоКвотам.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам
	
	// ЗарплатаКадрыПриложения.Дивиденды
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		МодульДивиденды = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		МодульДивиденды.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Дивиденды
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
		МодульЦепочкиДокументов = ОбщегоНазначения.ОбщийМодуль("ЦепочкиДокументов");
		МодульЦепочкиДокументов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов
	
	// Медицина.ТарификационнаяОтчетностьУчрежденийФМБА
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		МодульТарификационнаяОтчетностьУчрежденийФМБА = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
		МодульТарификационнаяОтчетностьУчрежденийФМБА.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец Медицина.ТарификационнаяОтчетностьУчрежденийФМБА
	
	// Медицина
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		МодульМедицина.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец Медицина

	// ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		МодульПлановыеПрочиеДоходы = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		МодульПлановыеПрочиеДоходы.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы
	
	// ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение

	// ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения") Тогда
		МодульКадровыеРешения = ОбщегоНазначения.ОбщийМодуль("КадровыеРешения");
		МодульКадровыеРешения.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение") Тогда
		МодульОбновлениеИнформационнойБазыБЭО = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыБЭО");
		МодульОбновлениеИнформационнойБазыБЭО.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		МодульГрантыНеоблагаемыеНДФЛ = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		МодульГрантыНеоблагаемыеНДФЛ.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		МодульОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		МодульОценкаПерсонала.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		МодульАнализТекучестиПерсонала.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		МодульИспытательныйСрокСотрудников = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		МодульИспытательныйСрокСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
		МодульРеестрГосслужащих = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащих");
		МодульРеестрГосслужащих.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульКадровыйУчетОтпуска = ОбщегоНазначения.ОбщийМодуль("ОтпускаУведомления");
		МодульКадровыйУчетОтпуска.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления") Тогда
		МодульАнкетированиеУведомления = ОбщегоНазначения.ОбщийМодуль("АнкетированиеУведомления");
		МодульАнкетированиеУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления") Тогда
		МодульКонтрольСамочувствияУведомления = ОбщегоНазначения.ОбщийМодуль("КонтрольСамочувствияУведомления");
		МодульКонтрольСамочувствияУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления
	
	// ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		МодульДистанционнаяРабота = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРабота");
		МодульДистанционнаяРабота.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления
	
	// ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей") Тогда
		МодульРасчетОкладовПреподавателей = ОбщегоНазначения.ОбщийМодуль("РасчетОкладовПреподавателей");
		МодульРасчетОкладовПреподавателей.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей
	
	// ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим") Тогда
		МодульВыплатыБывшимВоеннослужащим = ОбщегоНазначения.ОбщийМодуль("ВыплатыБывшимВоеннослужащим");
		МодульВыплатыБывшимВоеннослужащим.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим
	
	// ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете
	
	// ЗарплатаКадрыПриложения.СинхронизацияДанных
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		МодульСинхронизацияДанных.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.СинхронизацияДанных
	
	//ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников") Тогда
		МодульРегулярнаяОтправкаСотрудников = ОбщегоНазначения.ОбщийМодуль("РегулярнаяОтправкаСотрудников");
		МодульРегулярнаяОтправкаСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц
	
	// ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения") Тогда
		МодульНастройкиСистемыНалогообложения = ОбщегоНазначения.ОбщийМодуль("НастройкиСистемыНалогообложения");
		МодульНастройкиСистемыНалогообложения.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения
	
	// ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат") Тогда
		МодульОбменДаннымиУниверсальныйФормат = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиУниверсальныйФормат");
		МодульОбменДаннымиУниверсальныйФормат.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайты = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайты");
		МодульРекрутинговыеСайты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов
	
	//ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		МодульКадровоеПланирование.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование
	
	//ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
		МодульФинансовыйУчет.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет
	
	//ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеТестированиеКандидатов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеТестированиеКандидатов") Тогда
		МодульЭлектронноеТестированиеКандидатов = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеТестированиеКандидатов");
		МодульЭлектронноеТестированиеКандидатов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеТестированиеКандидатов
	
	//ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений") Тогда
		МодульБронированиеПомещенийБЗК = ОбщегоНазначения.ОбщийМодуль("БронированиеПомещенийБЗК");
		МодульБронированиеПомещенийБЗК.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений
	
	// ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3Расширенная
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3Расширенная") Тогда
		МодульОбменЗарплата3Бухгалтерия3 = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3Расширенный");
		МодульОбменЗарплата3Бухгалтерия3.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3Расширенная
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.Уведомления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.Уведомления") Тогда
		МодульПодборПерсоналаУведомления = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаУведомления");
		МодульПодборПерсоналаУведомления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.Уведомления
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АналитикаДанных
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АналитикаДанных") Тогда
		МодульАналитикаДанных = ОбщегоНазначения.ОбщийМодуль("АналитикаДанных");
		МодульАналитикаДанных.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АналитикаДанных
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.НастройкаАдминистрирование
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.НастройкаАдминистрирование") Тогда
		МодульНастройкаАдминистрирование = ОбщегоНазначения.ОбщийМодуль("НастройкиУправленияПерсоналом");
		МодульНастройкаАдминистрирование.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.НастройкаАдминистрирование
	
	//ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала") Тогда
		МодульХарактеристикиПерсонала = ОбщегоНазначения.ОбщийМодуль("ХарактеристикиПерсонала");
		МодульХарактеристикиПерсонала.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания") Тогда
		МодульВзыскания = ОбщегоНазначения.ОбщийМодуль("ДисциплинарныеВзыскания");
		МодульВзыскания.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	// Не используется в БСП.
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковПереходаСДругойПрограммы.
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	ИмяПроцедуры = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьВидОрганизации";
	ОбщиеДанные  = Ложь;
	ОбновлениеБЗК.ДобавитьОбработчикПерехода(Обработчики, ИмяПроцедуры, ОбщиеДанные);
	
	ИмяПроцедуры = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьФункциональныеОпцииПоМетаданным";
	ОбщиеДанные  = Ложь;
	ОбновлениеБЗК.ДобавитьОбработчикПерехода(Обработчики, ИмяПроцедуры, ОбщиеДанные);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура УстановитьФункциональныеОпцииПоМетаданным() Экспорт
	
	ИспользоватьВХО = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации");
	ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры = Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Получить();
	Если ИспользоватьВХО <> ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры Тогда
		Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Установить(ИспользоватьВХО);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииИспользованияЗарплатыИКадров() Экспорт
	
	// ERP начало: проект 4142
	ИспользоватьКадровыйУчет = Константы.ИспользоватьКадровыйУчет.Получить();
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	НеИспользоватьНачислениеЗарплаты = Константы.НеИспользоватьНачислениеЗарплаты.Получить();
	Если ИспользоватьНачислениеЗарплаты <> НеИспользоватьНачислениеЗарплаты Тогда
		Возврат;                 
	КонецЕсли;
	Константы.НеИспользоватьНачислениеЗарплаты.Установить(Не ИспользоватьНачислениеЗарплаты);
	
	Если ИспользоватьНачислениеЗарплаты И Не ИспользоватьКадровыйУчет Тогда
		Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	КонецЕсли;
	// Конец
	
КонецПроцедуры

Процедура УстановитьИспользованиеНесколькихОрганизаций() Экспорт 
	
	Справочники.Организации.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций();
	
КонецПроцедуры

Процедура УстановитьВидОрганизации() Экспорт
	РаботаВХозрасчетнойОрганизации = ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации();
	Если РаботаВХозрасчетнойОрганизации = Неопределено Тогда
		Если Не Константы.РаботаВБюджетномУчреждении.Получить()
			И Не Константы.РаботаВХозрасчетнойОрганизации.Получить() Тогда
			РаботаВХозрасчетнойОрганизации = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Константы.РаботаВХозрасчетнойОрганизации.Установить(РаботаВХозрасчетнойОрганизации);
	Константы.РаботаВБюджетномУчреждении.Установить(Не РаботаВХозрасчетнойОрганизации);
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыИспользоватьНачислениеЗарплатыНесколькихОрганизаций() Экспорт
				
	Константы.ИспользоватьНачислениеЗарплатыВНесколькихОрганизациях.Установить(ЗарплатаКадрыРасширенный.ИспользоватьНачислениеЗарплатыНесколькихОрганизаций());
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыРаботаВНесколькихХозрасчетныхОрганизациях() Экспорт
										
	Константы.РаботаВНесколькихХозрасчетныхОрганизациях.Установить(ЗарплатаКадрыРасширенный.РаботаВНесколькихХозрасчетныхОрганизациях());
	
КонецПроцедуры

Процедура ЗаменитьРазделенныеДанныеОбщими() Экспорт
	
	ИзмененныеОбъекты = Новый Соответствие;
	
	// 1. Справочник.ВидыВычетовНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыВычетовНДФЛ, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ВыплатаБывшимСотрудникам.Реквизиты.КодВычетаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.ДоговорАвторскогоЗаказа.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.Реквизиты.КодВычетаЛичный);
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.ТабличныеЧасти.ВычетыНаДетей.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НачисленияПоДоговорам.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.ПредоставленныеВычеты.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускБезСохраненияОплаты.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускБезСохраненияОплаты.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.ОплатаТруда.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.Сотрудники.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.Сотрудники.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПризПодарок.Реквизиты.КодВычетаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.ПрогулНеявка.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПрогулНеявка.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РегистрацияПрочихДоходов.Реквизиты.КодВычетаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.СведенияОДоходахСотрудникаДляСоцВыплат.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СведенияОДоходахСотрудникаДляСоцВыплат.ТабличныеЧасти.СведенияОВычетах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОВычетах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОВычетах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СторнированиеНачислений.ТабличныеЧасти.ДоначисленияИПерерасчеты.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СторнированиеНачислений.ТабличныеЧасти.Сторнировано.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ.Измерения.КодВычета);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВЗановоСозданномПодчиненномРегистреСведений(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам.Ресурсы.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ.Ресурсы.КодВычетаЛичный);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛИспр.Ресурсы.КодВычетаЛичный);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Поля, СоответствиеСсылок);
	
	// 2. Справочник.ВидыДоходовНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыДоходовНДФЛ, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.ВидыВыплатБывшимСотрудникам.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыДоговоровАвторскогоЗаказа.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыПрочихДоходовФизическихЛиц.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НачисленияПоДоговорам.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.НДФЛУдержанный.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.ПризПодарок.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.СведенияОДоходахСотрудникаДляСоцВыплат.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.ПланыВидовРасчета.Начисления.Реквизиты.КодДоходаНДФЛ);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам.Ресурсы.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Измерения.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ.Измерения.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Поля, СоответствиеСсылок);
	
	// 3. Справочник.ВидыДоходовПоСтраховымВзносам
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыДоходовПоСтраховымВзносам, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.ВидыВыплатБывшимСотрудникам.Реквизиты.КодДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыДоговоровАвторскогоЗаказа.Реквизиты.КодДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыПрочихДоходовФизическихЛиц.Реквизиты.КодДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.Документы.АктПроверкиСтраховыхВзносов.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияУчетаПоСтраховымВзносам.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетСтраховыхВзносов.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ПризПодарок.Реквизиты.ВидДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.ПланыВидовРасчета.Начисления.Реквизиты.КодДоходаСтраховыеВзносы);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам.Ресурсы.КодДоходаСтраховыеВзносы);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.Измерения.ВидДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы, Поля, СоответствиеСсылок);
	
	// 4. Справочник.ВидыОбщественноПолезнойДеятельностиСЗВК
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ВидДеятельности);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 5. Справочник.ВидыТарифовСтраховыхВзносов
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыТарифовСтраховыхВзносов, "ИмяПредопределенныхДанных");
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.Ресурсы.ВидТарифа);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов, Поля, СоответствиеСсылок);
	
	// 6. Справочник.ОснованияДосрочногоНазначенияПенсии
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсии, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.Должности.Реквизиты.ОснованиеДосрочногоНазначенияПенсии);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ВидДеятельности);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР.Ресурсы.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр.Ресурсы.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПериодыСтажаПФР.Ресурсы.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПериодыСтажаПФР, Поля, СоответствиеСсылок);
	
	// 7. Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 8. Справочник.ОснованияИсчисляемогоСтраховогоСтажа
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияИсчисляемогоСтраховогоСтажа, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 9. Справочник.ОснованияУвольнения
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияУвольнения, "Наименование");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПереводКДругомуРаботодателю.Реквизиты.СтатьяТКРФ);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.Реквизиты.СтатьяТКРФ);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 10. Справочник.ОсобыеУсловияТрудаДляСЗВКПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОсобыеУсловияТрудаДляСЗВКПФР, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 11. Справочник.ОсобыеУсловияТрудаПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОсобыеУсловияТрудаПФР, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.Должности.Реквизиты.ОсобыеУсловияТрудаПФР);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР.Ресурсы.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр.Ресурсы.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПериодыСтажаПФР.Ресурсы.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПериодыСтажаПФР, Поля, СоответствиеСсылок);
	
	// 12. Справочник.ПараметрыИсчисляемогоСтраховогоСтажа
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ПараметрыИсчисляемогоСтраховогоСтажа, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 13. Справочник.СтатусыНалогоплательщиковПоНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.СтатусыНалогоплательщиковПоНДФЛ, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия.Реквизиты.СтатусНалогоплательщикаПолучателя);
	Реквизиты.Добавить(Метаданные.Документы.СведенияОДоходахСотрудникаДляСоцВыплат.Реквизиты.СтатусНалогоплательщика);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.Реквизиты.СтатусНалогоплательщика);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.Сотрудники.Реквизиты.СтатусНалогоплательщика);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена в наборах записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Ресурсы.Статус);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ, Поля, СоответствиеСсылок);
	
	// 14. Справочник.ТерриториальныеУсловияПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ТерриториальныеУсловияПФР, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.Командировка.Реквизиты.ТерриториальныеУсловияНаПериодКомандировки);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.Сотрудники.Реквизиты.ТерриториальныеУсловияНа31_12_2001);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена в наборах записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР.Ресурсы.ТерриториальныеУсловия);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр.Ресурсы.ТерриториальныеУсловия);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПериодыСтажаПФР.Ресурсы.ТерриториальныеУсловия);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПериодыСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР.Ресурсы.ТерриториальныеУсловияПФР);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР, Поля, СоответствиеСсылок);
	
	// Записываем ссылочные объекты
	Для Каждого КлючИЗначение Из ИзмененныеОбъекты Цикл
		Объект = КлючИЗначение.Значение;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы() Экспорт 
	
	ЗарплатаКадрыОтчеты.ОчиститьМакетыКомпоновкиДанных();
	ЗарплатаКадры.УстановитьВерсиюДанныхДатЗапретаИзмененияБЗК();
	
	РаботаВХозрасчетнойОрганизации = ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации();
	
	Если РаботаВХозрасчетнойОрганизации = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКонстант = "ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы";
	УстанавливаемыеЗначения = Новый Структура(ИменаКонстант);
	УстанавливаемыеЗначения.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы = Истина;
	
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();
	
	УстанавливатьЗначения = Ложь;
	Для Каждого КлючИЗначение Из УстанавливаемыеЗначения Цикл
		Если НаборКонстант[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			УстанавливатьЗначения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не УстанавливатьЗначения Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НаборКонстант, УстанавливаемыеЗначения);
	НаборКонстант.Записать();
	
КонецПроцедуры

// Формирует состав ключевых показателей (в случае их отсутствия), а также устанавливает
// целевое время их заполнения для условной ИБ.
//
Процедура ЗаполнитьЦелевоеВремяКлючевыхОпераций() Экспорт

	КлючевыеОперации = Новый Массив;
	
	#Область УстановитьЦелевоеВремяКлючевыхОпераций
	
	#Область ДокументБольничныйЛист
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "РасчетДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументВедомостьНаВыплатуЗарплатыВБанк
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеПодробныхДанныхПоСотрудникуВФормеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументВедомостьНаВыплатуЗарплатыВКассу
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаВедомостьНаВыплатуЗарплатыВКассу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИзменениеГрафикаРаботыСписком
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИзменениеПлановыхНачислений
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеЗначенийПоказателейВФормеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти

	#Область ДокументИзменениеШтатногоРасписания
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОбработкаВыбораПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ВводНовойПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСДаннымиПоПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СортировкаПозицийШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СохранениеДанныхПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИндексацияЗаработка
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИндексацияЗаработка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИндивидуальныйГрафик
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументКадровыйПеревод
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеПозицииШРВФормеДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументКомандировка
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументМатериальнаяПомощь
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументНачислениеЗаПервуюПоловинуМесяца
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 10);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 300);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 150);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаНДФЛ");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаЗаймы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаВзносы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаБухучет");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПерерасчетСотрудникаВФормеДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 20);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументНачислениеЗарплаты
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 10);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 300);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 150);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыНДФЛ");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыЗаймы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыВзносы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыБухучет");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПерерасчетСотрудникаВФормеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ФормированиеРасчетногоЛисткаИзФормыДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 10);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументОплатаПоСреднемуЗаработку
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументОтпуск 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "РасчетДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументПремия
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументПриемНаРаботу
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеПозицииШРВФормеДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументПриемНаРаботуСписком
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеДанныхПоСотрудникуВФормеДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 0.5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументРаботаВВыходныеИПраздничныеДни
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаРаботаВВыходныеИПраздничныеДни");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаРаботаВВыходныеИПраздничныеДни");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаРаботаВВыходныеИПраздничныеДни");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументРаботаСверхурочно
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаРаботаСверхурочно");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаРаботаСверхурочно");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаРаботаСверхурочно");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументТабельУчетаРабочегоВремени
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументУвольнение 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "РасчетДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументУтверждениеШтатногоРасписания 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ВводНовойПозицииШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСДаннымиПоПозицииШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СортировкаПозицийШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СохранениеДанныхПозицииШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ЖурналДокументовКадровыеДокументы 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "УстановкаОтбораПоСотрудникуЖурналаДокументовКадровыеДокументы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти

	#Область ОбработкаКвартальнаяОтчетностьВПФР 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПриАктивизацииСтрокиВФормеКвартальнаяОтчетностьВПФР");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СозданиеНовогоРСВ1");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 90);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОбщаяФормаВводДанныхДляРасчетаСреднегоЗаработкаФСС 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПересчетДанныхВФормеВводДанныхДляРасчетаСреднегоЗаработкаФСС");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОбщаяФормаВводДанныхДляРасчетаСреднегоЗаработкаОбщий 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПересчетДанныхВФормеВводДанныхДляРасчетаСреднегоЗаработкаОбщий");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализВзносовВФонды
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализВзносовВФонды.АнализВзносовВФонды.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализНачисленийИУдержанийПолныйСводНачисленийУдержанийИВыплат
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализНачисленийИУдержаний.ПолныйСводНачисленийУдержанийИВыплат.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализНачисленийИУдержанийРасчетныйЛисток
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализНачисленийИУдержаний.РасчетныйЛисток.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализНачисленийИУдержанийТ51
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализНачисленийИУдержаний.Т51.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетУнифицированнаяФормаТ2
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.УнифицированнаяФормаТ2.Т2.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетТрудовойДоговор
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОтчетТрудовойДоговорФормирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетШтатноеРасписаниеНачисленияШтатноеРасписаниеКроссТаблица
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.ШтатноеРасписаниеНачисления.ШтатноеРасписаниеКроссТаблица.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетШтатноеРасписаниеНачисленияШтатноеРасписаниеКроссТаблицаИспользуетсяВилкаСтавок
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.ШтатноеРасписаниеНачисления.ШтатноеРасписаниеКроссТаблицаИспользуетсяВилкаСтавок.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ПланВидовРасчетаНачисления 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаПланаВидовРасчетаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаПланаВидовРасчетаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаПланаВидовРасчетаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ПланВидовРасчетаУдержания 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаПланаВидовРасчетаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаПланаВидовРасчетаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаПланаВидовРасчетаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникГрафикиРаботыСотрудников
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаГрафикиРаботыСотрудников");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаГрафикиРаботыСотрудников");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаГрафикиРаботыСотрудников");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникДолжности 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаДолжности");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаДолжности");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаДолжности");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникОрганизации 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаОрганизации");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаОрганизации");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаОрганизации");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникПодразделенияОрганизаций 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаПодразделенияОрганизаций");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаПодразделенияОрганизаций");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаПодразделенияОрганизаций");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти

	#Область СправочникСотрудники 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "АктивацияПодразделенияВФормеВыбораСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 0.5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыВыбораСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеВыбораСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 0.2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСпискаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникФизическиеЛица 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаФизическиеЛица");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаФизическиеЛица");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаФизическиеЛица");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникШтатноеРасписание
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСпискаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#КонецОбласти	

	ОценкаПроизводительности.СоздатьКлючевыеОперации(КлючевыеОперации);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты)
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты);
КонецПроцедуры

Процедура ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок)
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок);
КонецПроцедуры

Функция СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча)
	Возврат ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча);
КонецФункции

#КонецОбласти