#Область СлужебныйПрограммныйИнтерфейс

#Область Итоги

Функция ЗапуститьРасчетИтоговПоЗаказуНаПроизводство(ЗаказНаПроизводство, ПолныйРасчет = Ложь) Экспорт
	
	ТекущееВремя = Дата(1,1,1) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторЗадания", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Результат.Вставить("ДатаАктуальности", '00010101');
	
	СведенияОРасчете = РегистрыСведений.МониторингЗаказаПредыдущийРасчет.ПолучитьСведения(ЗаказНаПроизводство);
	
	Если Не ПолныйРасчет
		И ТекущееВремя < СведенияОРасчете.ПериодРасчета + 10*60 И СведенияОРасчете.ВремяВыполнения > 2 Тогда
	
		Результат.ДатаАктуальности = СведенияОРасчете.ПериодРасчета;
		
	Иначе
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводство);
		
		Если ЕстьФоновыеЗаданияВФайловойИБ() Тогда
			РассчитатьИтогиПоЗаказуНаПроизводство(ПараметрыПроцедуры);
		Иначе
			Ключ = "МониторингЗаказа_" + ЗаказНаПроизводство.УникальныйИдентификатор();
			Задание = ЗапуститьРасчетИтоговПоЗаказуНаПроизводствоВФоне(ПараметрыПроцедуры, Ключ);
			Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапуститьРасчетИтоговПоЗаказуНаПроизводствоВФоне(ПараметрыПроцедуры, Ключ, ПовтПопытка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно));
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		
		Задание = АктивныеЗадания.Получить(0);
		
	Иначе
		
		НаименованиеЗадания = НСтр("ru = 'Мониторинг заказа на производство. Расчет итогов графика производства';
									|en = 'Production order monitoring. Calculation of the production schedule totals'");
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(ПараметрыПроцедуры);
		
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		Попытка
			Задание = ФоновыеЗадания.Выполнить(
				"МониторингЗаказа.РассчитатьИтогиПоЗаказуНаПроизводство",
				ПараметрыЗадания,
				Ключ,
				НаименованиеЗадания);
		Исключение
			Если Не ПовтПопытка Тогда
				Задание = ЗапуститьРасчетИтоговПоЗаказуНаПроизводствоВФоне(ПараметрыПроцедуры, Ключ, Истина);
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось выполнить операцию по причине: %1';
											|en = 'Cannot perform the operation. Reason: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецПопытки;
		
		Задание = Задание.ОжидатьЗавершенияВыполнения(ВремяОжидания);
		
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

Процедура РассчитатьИтогиПоЗаказуНаПроизводство(Параметры) Экспорт
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	КлючеваяОперация = "МежцеховоеУправление2_2.РасчетИтоговПоЗаказуНаПроизводство";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоДанных = РассчитатьПолныйИнтервалГрафикаПроизводства(Параметры);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяВыполнения = (ТекущееВремя - НачалоЗамера)/1000;
	
	СведенияОРасчете = Новый Структура;
	СведенияОРасчете.Вставить("ЗаказНаПроизводство", Параметры.ЗаказНаПроизводство);
	СведенияОРасчете.Вставить("ПериодРасчета", Дата(1,1,1) + ТекущееВремя/1000);
	СведенияОРасчете.Вставить("ВремяВыполнения", ВремяВыполнения);
	
	РегистрыСведений.МониторингЗаказаПредыдущийРасчет.ЗаписатьСведения(СведенияОРасчете);
	
КонецПроцедуры

Процедура ОбновитьИтогиПоЗаказуНаПроизводство(Параметры, АдресХранилища) Экспорт
	
	ТекущееВремя = Дата(1,1,1) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	СведенияОРасчете = РегистрыСведений.МониторингЗаказаПредыдущийРасчет.ПолучитьСведения(
		Параметры.ЗаказНаПроизводство);
	
	Если ТекущееВремя > СведенияОРасчете.ПериодРасчета + 10*60 Тогда
		РассчитатьИтогиПоЗаказуНаПроизводство(Параметры);
	КонецЕсли;
	
КонецПроцедуры

#Область ПолныйИнтервал

Функция РассчитатьПолныйИнтервалГрафикаПроизводства(Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", Параметры.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ОсновнойКалендарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказа.КлючПартия КАК КлючПартия,
	|	СтруктураЗаказа.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА СтруктураЗаказа.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение <> СтруктураЗаказа.ЗаказНаПроизводство
	|				И ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение.ДинамическаяСтруктура
	|			ТОГДА ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение
	|		КОГДА СтруктураЗаказа.ЗаказНаПоступление ССЫЛКА Документ.ЗаказНаПроизводство2_2
	|				И ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЗаказНаПроизводство2_2).ДинамическаяСтруктура
	|			ТОГДА СтруктураЗаказа.ЗаказНаПоступление
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказНаПроизводство,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(График.Начало, ДЕНЬ), ДАТАВРЕМЯ(1,1,1)) КАК ДатаОтсчета,
	|	МАКСИМУМ(ЕСТЬNULL(КэшНСИ.СпособОбеспечения.ГарантированныйСрокОбеспечения, 1)) КАК ЧислоДней
	|ПОМЕСТИТЬ ГрафикПоступления
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
	|	ПО СтруктураЗаказа.ЗаказНаПроизводство = График.ЗаказНаПроизводство
	|		И СтруктураЗаказа.КлючПартия = График.КлючПартия
	|		И СтруктураЗаказа.Этап = График.Этап
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|	ПО СтруктураЗаказа.Номенклатура = КэшНСИ.Номенклатура
	|		И СтруктураЗаказа.Характеристика = КэшНСИ.Характеристика
	|		И СтруктураЗаказа.Склад = КэшНСИ.Склад
	|		И СтруктураЗаказа.Назначение = КэшНСИ.Назначение
	|		И СтруктураЗаказа.ЗаказНаПроизводство = КэшНСИ.ЗаказНаПроизводство
	|ГДЕ
	|	СтруктураЗаказа.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И СтруктураЗаказа.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано)
	|	И СтруктураЗаказа.ЗаказНаПоступление <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураЗаказа.КлючПартия,
	|	СтруктураЗаказа.Этап,
	|	ВЫБОР
	|		КОГДА СтруктураЗаказа.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение <> СтруктураЗаказа.ЗаказНаПроизводство
	|				И ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение.ДинамическаяСтруктура
	|			ТОГДА ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение
	|		КОГДА СтруктураЗаказа.ЗаказНаПоступление ССЫЛКА Документ.ЗаказНаПроизводство2_2
	|				И ВЫРАЗИТЬ(СтруктураЗаказа.ЗаказНаПоступление КАК Документ.ЗаказНаПроизводство2_2).ДинамическаяСтруктура
	|			ТОГДА СтруктураЗаказа.ЗаказНаПоступление
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(График.Начало, ДЕНЬ), ДАТАВРЕМЯ(1,1,1))
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтруктураЗаказа.РаспределеноИзЗапасов) <> 0
	|		ИЛИ СУММА(СтруктураЗаказа.РаспределеноИзЗапасовОбособленно) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючПартия КАК КлючПартия,
	|	ВложенныйЗапрос.Этап КАК Этап,
	|	ВложенныйЗапрос.ДатаОтсчета КАК ДатаОтсчета,
	|	МАКСИМУМ(ВложенныйЗапрос.ЧислоДней) КАК ЧислоДней
	|ПОМЕСТИТЬ МатериалыКОбеспечению
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			СтруктураЗаказа.КлючПартия КАК КлючПартия,
	|			СтруктураЗаказа.Этап КАК Этап,
	|			ЕСТЬNULL(НАЧАЛОПЕРИОДА(График.Начало, ДЕНЬ), ДАТАВРЕМЯ(1,1,1)) КАК ДатаОтсчета,
	|			МАКСИМУМ(ЕСТЬNULL(КэшНСИ.СпособОбеспечения.ГарантированныйСрокОбеспечения, 1)) КАК ЧислоДней
	|		ИЗ
	|			РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
	|		
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
	|			ПО СтруктураЗаказа.ЗаказНаПроизводство = График.ЗаказНаПроизводство
	|				И СтруктураЗаказа.КлючПартия = График.КлючПартия
	|				И СтруктураЗаказа.Этап = График.Этап
	|		
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|			ПО СтруктураЗаказа.Номенклатура = КэшНСИ.Номенклатура
	|				И СтруктураЗаказа.Характеристика = КэшНСИ.Характеристика
	|				И СтруктураЗаказа.Склад = КэшНСИ.Склад
	|				И СтруктураЗаказа.Назначение = КэшНСИ.Назначение
	|				И СтруктураЗаказа.ЗаказНаПроизводство = КэшНСИ.ЗаказНаПроизводство
	|		ГДЕ
	|			СтруктураЗаказа.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|			И СтруктураЗаказа.ВидСтроки В(
	|					ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление),
	|					ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано))
	|			И ИСТИНА НЕ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|				ГДЕ
	|					КэшНСИ.ЗаказНаПроизводство = СтруктураЗаказа.ЗаказНаПроизводство
	|					И КэшНСИ.Номенклатура = СтруктураЗаказа.Номенклатура
	|					И КэшНСИ.Характеристика = СтруктураЗаказа.Характеристика
	|					И КэшНСИ.Запланировать
	|					И КэшНСИ.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтруктураЗаказа.КлючПартия,
	|			СтруктураЗаказа.Этап,
	|			СтруктураЗаказа.Номенклатура,
	|			СтруктураЗаказа.Характеристика,
	|			СтруктураЗаказа.Склад,
	|			СтруктураЗаказа.Назначение,
	|			ЕСТЬNULL(НАЧАЛОПЕРИОДА(График.Начало, ДЕНЬ), ДАТАВРЕМЯ(1,1,1))
	|		
	|		ИМЕЮЩИЕ
	|			СУММА(СтруктураЗаказа.Требуется - СтруктураЗаказа.РаспределеноИзЗапасов - СтруктураЗаказа.РаспределеноИзЗапасовОбособленно) > 0
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КлючПартия,
	|	ВложенныйЗапрос.Этап,
	|	ВложенныйЗапрос.ДатаОтсчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтсчета, ЧислоДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ОсновнойКалендарь КАК Календарь,
	|	График.ДатаОтсчета КАК ДатаОтсчета,
	|	График.ЧислоДней   КАК ЧислоДней
	|ПОМЕСТИТЬ ВтПараметрыПоиска
	|ИЗ
	|	ГрафикПоступления КАК График
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ОсновнойКалендарь    КАК Календарь,
	|	Материалы.ДатаОтсчета КАК ДатаОтсчета,
	|	Материалы.ЧислоДней   КАК ЧислоДней
	|ИЗ
	|	МатериалыКОбеспечению КАК Материалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|"
	+ ПроизводствоСервер.ТекстЗапросаДатПоКалендарю(Ложь) + "
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючПартия КАК КлючПартия,
	|	ВложенныйЗапрос.Этап КАК Этап,
	|	МИНИМУМ(ВложенныйЗапрос.ЛеваяГраница) КАК ЛеваяГраница
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			ГрафикПоступления.КлючПартия КАК КлючПартия,
	|			ГрафикПоступления.Этап КАК Этап,
	|			ЕСТЬNULL(НормативныйГрафик.Начало, ЕСТЬNULL(ДатыГрафика.Дата, ДАТАВРЕМЯ(3999,12,31))) КАК ЛеваяГраница
	|		ИЗ
	|			ГрафикПоступления КАК ГрафикПоступления
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
	|			ПО ГрафикПоступления.ЗаказНаПроизводство = НормативныйГрафик.ЗаказНаПроизводство
	|				И НормативныйГрафик.КлючПартия = &ПустойКлючСвязи
	|				И НормативныйГрафик.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыГрафика КАК ДатыГрафика
	|			ПО ГрафикПоступления.ДатаОтсчета = ДатыГрафика.ДатаОтсчета
	|				И ГрафикПоступления.ЧислоДней = ДатыГрафика.ЧислоДней
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Материалы.КлючПартия КАК КлючПартия,
	|			Материалы.Этап КАК Этап,
	|			ДатыГрафика.Дата КАК ЛеваяГраница
	|		ИЗ
	|			МатериалыКОбеспечению КАК Материалы
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДатыГрафика КАК ДатыГрафика
	|			ПО Материалы.ДатаОтсчета = ДатыГрафика.ДатаОтсчета
	|				И Материалы.ЧислоДней = ДатыГрафика.ЧислоДней
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КлючПартия,
	|	ВложенныйЗапрос.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючПартия, Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	График.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	График.КлючПартия          КАК КлючПартия,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) КАК Этап,
	|	МИНИМУМ(График.Начало)     КАК Начало,
	|	МАКСИМУМ(График.Окончание) КАК Окончание,
	|	МИНИМУМ(
	|		ВЫБОР
	|			КОГДА График.Этап ССЫЛКА Справочник.ЭтапыПроизводства
	|					ИЛИ ЭтапПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|				ТОГДА ЕСТЬNULL(Обеспечение.ЛеваяГраница, График.Начало)
	|		КОНЕЦ) КАК ЛеваяГраница,
	|	ИСТИНА                     КАК ЭтоИтоговаяСтрока,
	|	ЛОЖЬ                       КАК ЭтоПеремещение
	|ИЗ
	|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|	ПО График.Этап = ЭтапПроизводства.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|	ПО График.КлючПартия = Обеспечение.КлючПартия
	|		И График.Этап = Обеспечение.Этап
	|		И Обеспечение.ЛеваяГраница < График.Начало
	|ГДЕ
	|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И График.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	График.ЗаказНаПроизводство,
	|	График.КлючПартия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	График.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	График.КлючПартия          КАК КлючПартия,
	|	График.Этап                КАК Этап,
	|	График.Начало              КАК Начало,
	|	График.Окончание           КАК Окончание,
	|	ЕСТЬNULL(Обеспечение.ЛеваяГраница, График.Начало) КАК ЛеваяГраница,
	|	ЛОЖЬ                       КАК ЭтоИтоговаяСтрока,
	|	ЛОЖЬ                       КАК ЭтоПеремещение
	|ИЗ
	|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|	ПО График.КлючПартия = Обеспечение.КлючПартия
	|		И График.Этап = Обеспечение.Этап
	|		И Обеспечение.ЛеваяГраница < График.Начало
	|ГДЕ
	|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И График.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказа.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СтруктураЗаказа.КлючПартия          КАК КлючПартия,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) КАК Этап,
	|	График.Начало                       КАК Начало,
	|	График.Окончание                    КАК Окончание,
	|	ЕСТЬNULL(Обеспечение.ЛеваяГраница, График.Начало) КАК ЛеваяГраница,
	|	ИСТИНА                              КАК ЭтоИтоговаяСтрока,
	|	ИСТИНА                              КАК ЭтоПеремещение
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
	|	ПО СтруктураЗаказа.ЗаказНаПроизводство = График.ЗаказНаПроизводство
	|		И СтруктураЗаказа.КлючПартия = График.КлючПартия
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|	ПО График.КлючПартия = Обеспечение.КлючПартия
	|		И Обеспечение.ЛеваяГраница < График.Начало
	|ГДЕ
	|	СтруктураЗаказа.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И СтруктураЗаказа.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛеваяГраница
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Выпуск.КлючПартия      КАК КлючПартия,
	|	Потребление.КлючПартия КАК КлючПартияПотребитель,
	|	Потребление.Этап       КАК ЭтапПотребитель
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Выпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Потребление
	|		ПО Выпуск.Номенклатура        = Потребление.Номенклатура
	|		 И Выпуск.Характеристика      = Потребление.Характеристика
	|		 И Выпуск.Склад               = Потребление.Склад
	|		 И Выпуск.Назначение          = Потребление.Назначение
	|		 И Выпуск.ЗаказНаПроизводство = Потребление.ЗаказНаПроизводство
	|		 И Выпуск.КлючНоменклатура    = Потребление.КлючНоменклатура
	|ГДЕ
	|	Выпуск.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И Выпуск.ВидСтроки В(
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение))
	|	И Потребление.ВидСтроки В(
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|	И Потребление.ДополнительнаяЗапись = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.Номенклатура,
	|	Выпуск.Характеристика,
	|	Выпуск.Склад,
	|	Выпуск.Назначение,
	|	Выпуск.КлючНоменклатура,
	|	Выпуск.КлючПартия,
	|	Потребление.КлючПартия,
	|	Потребление.Этап
	|	
	|ИМЕЮЩИЕ
	|	СУММА(Выпуск.Запланировано) <> 0 ИЛИ СУММА(Выпуск.РаспределеноИзПартий + Выпуск.РаспределеноИзПартийОбособленно) <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	График.Начало    КАК Начало,
	|	График.Окончание КАК Окончание
	|ИЗ
	|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
	|ГДЕ
	|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И График.КлючПартия = &ПустойКлючСвязи
	|	И График.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	График = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2].Выгрузить();
	Связи = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выгрузить();
	Итоги = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	
	График.Индексы.Добавить("КлючПартия, ЭтоИтоговаяСтрока");
	График.Индексы.Добавить("КлючПартия, Этап");
	Связи.Индексы.Добавить("КлючПартия");
	
	СтруктураПоискаКлючИтог = Новый Структура("КлючПартия, ЭтоИтоговаяСтрока", Неопределено, Истина);
	СтруктураПоискаКлючЭтап = Новый Структура("КлючПартия, Этап");
	СтруктураПоискаКлюч = Новый Структура("КлючПартия");
	
	ЛеваяГраница = ?(Итоги.Количество() = 1, Итоги[0].Начало, '00010101');
	
	Для Индекс = 0 По График.Количество()-1 Цикл
		
		Строка = График[Индекс];
		
		Если Не Строка.ЭтоИтоговаяСтрока
			Или Строка.ЛеваяГраница = null Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоискаКлюч.КлючПартия = Строка.КлючПартия;
		Для каждого СтрокаСвязь Из Связи.НайтиСтроки(СтруктураПоискаКлюч) Цикл
			
			СтруктураПоискаКлючИтог.КлючПартия = СтрокаСвязь.КлючПартияПотребитель;
			Для каждого СтрокаПотребитель Из График.НайтиСтроки(СтруктураПоискаКлючИтог) Цикл
				СтрокаПотребитель.ЛеваяГраница = Мин(СтрокаПотребитель.ЛеваяГраница, Строка.ЛеваяГраница);
			КонецЦикла;
			
			Если Не СтрокаСвязь.ЭтапПотребитель.Пустая() Тогда
				
				СтруктураПоискаКлючЭтап.КлючПартия = СтрокаСвязь.КлючПартияПотребитель;
				СтруктураПоискаКлючЭтап.Этап = СтрокаСвязь.ЭтапПотребитель;
				Для каждого СтрокаПотребитель Из График.НайтиСтроки(СтруктураПоискаКлючЭтап) Цикл
					СтрокаПотребитель.ЛеваяГраница = Мин(СтрокаПотребитель.ЛеваяГраница, Строка.ЛеваяГраница);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЛеваяГраница = Мин(ЛеваяГраница, Строка.ЛеваяГраница);
		
	КонецЦикла;
	
	// Итоговая запись
	Если Итоги.Количество() = 1 Тогда
		НоваяСтрока = График.Добавить();
		НоваяСтрока.ЗаказНаПроизводство = Параметры.ЗаказНаПроизводство;
		НоваяСтрока.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		НоваяСтрока.ЛеваяГраница = ЛеваяГраница;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Итоги[0], "Начало, Окончание");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.МониторингЗаказаПолныйИнтервалНормативногоГрафика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказНаПроизводство.Установить(Параметры.ЗаказНаПроизводство);
	НаборЗаписей.Загрузить(График);
	НаборЗаписей.Записать(Истина);
	
	Возврат График.Количество();
	
КонецФункции

Функция ПолныйИнтервалГрафикаПроизводства(ЗаказНаПроизводство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	График.ЛеваяГраница КАК ЛеваяГраница,
	|	График.Начало       КАК Начало,
	|	График.Окончание    КАК Окончание
	|ИЗ
	|	РегистрСведений.МониторингЗаказаПолныйИнтервалНормативногоГрафика КАК График
	|ГДЕ
	|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И График.КлючПартия = &ПустойКлючСвязи
	|	И График.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Границы = Новый Структура("ЛеваяГраница, Начало, Окончание", '00010101', '00010101', '00010101');
	
	Если Выборка.Следующий() Тогда
		Границы.ЛеваяГраница = ?(Не ЗначениеЗаполнено(Выборка.ЛеваяГраница), '00010101', Выборка.ЛеваяГраница);
		Границы.Начало = ?(Не ЗначениеЗаполнено(Выборка.Начало), '00010101', Выборка.Начало);
		Границы.Окончание = ?(Не ЗначениеЗаполнено(Выборка.Окончание), '00010101', Выборка.Окончание);
	КонецЕсли;
	
	Возврат Границы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Показатели

Функция ПоказателиИнформационнойСтроки(ЗаказНаПроизводство, ПараметрыВывода) Экспорт
	
	Результат = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("РабочаяДата", ПараметрыВывода.РабочаяДата);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|(
	|ВЫБРАТЬ ПЕРВЫЕ 101
	|	1
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Изделия
	|ГДЕ
	|	Изделия.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
	|		ГДЕ
	|			График.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|			И Изделия.КлючПартия = График.КлючПартия
	|			И Изделия.Этап = График.Этап
	|			И График.Начало <= &РабочаяДата)
	|	И Изделия.ВидСтроки НЕ В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Изделия.КлючСвязиПеремещение = &ПустойКлючСвязи ТОГДА
	|				Изделия.КлючНоменклатура
	|			ИНАЧЕ
	|				Изделия.КлючСвязиПеремещение
	|		КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(Изделия.Требуется) >
	|		СУММА(ВЫБОР
	|			КОГДА Изделия.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО И Изделия.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Изделия.РаспределеноИзЗапасов + Изделия.РаспределеноИзЗапасовОбособленно
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|) КАК Т
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	Результат.Вставить("КоличествоПросроченнойНоменклатуры", РезультатЗапроса[КоличествоПакетов-1].Выгрузить()[0].Количество);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнформационнаяСтрока

Процедура ЗаполнитьИнформационнуюСтроку(ЗаказНаПроизводство, ИнформационнаяСтрока, ПараметрыВывода = Неопределено) Экспорт
	
	Если ПараметрыВывода = Неопределено Тогда
		ПараметрыВывода = ПараметрыВыводаИнформационнойСтроки();
	КонецЕсли;
	
	Показатели = МониторингЗаказа.ПоказателиИнформационнойСтроки(ЗаказНаПроизводство, ПараметрыВывода);
	
	МассивСтрок = Новый Массив();
	
	Если Показатели.КоличествоПросроченнойНоменклатуры > 100 Тогда
		
		НоваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru = 'Позиций не обеспечено в срок: >100';
														|en = 'Items not supplied on time: >100'"),,
					WebЦвета.Красный,,
					"ОткрытьПросроченноеОбеспечение");
		МассивСтрок.Добавить(НоваяСтрока);
		
	Иначе
		
		НоваяСтрока = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'Позиций не обеспечено в срок: %1';
																|en = 'Items not supplied on time: %1'"), Формат(Показатели.КоличествоПросроченнойНоменклатуры, "ЧН = ''; ЧГ = ''")),,
					?(Показатели.КоличествоПросроченнойНоменклатуры > 0, WebЦвета.Красный, WebЦвета.СинийСоСтальнымОттенком),,
					"ОткрытьПросроченноеОбеспечение");
		МассивСтрок.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	ИнформационнаяСтрока = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

Функция ПараметрыВыводаИнформационнойСтроки() Экспорт
	
	ПараметрыВывода = Новый Структура();
	
	ПараметрыВывода.Вставить("РабочаяДата", ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Возврат ПараметрыВывода;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ЕстьФоновыеЗаданияВФайловойИБ()
	
	ЗапущеноЗаданийВФайловойИБ = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() И Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданийВФайловойИБ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
	Возврат ЗапущеноЗаданийВФайловойИБ > 0;

КонецФункции

#КонецОбласти

#КонецОбласти