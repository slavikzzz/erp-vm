
#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf11-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.СторнированиеНачислений);
	
КонецПроцедуры

#КонецОбласти

// Создает элементы формы для группы Исправления.
//		Исправить
//		Сторнировать
//		ИсправлениеКартинка (ИсправлениеИнфоНадпись выводится в расширенную подсказку)
//		ПерейтиКИсправлению
//		ПерейтиКСторно
//		ПерейтиКИсправленному
//
Процедура ГруппаИсправлениеДополнитьФорму(Форма, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		Если ДобавлятьРеквизитыФормы Тогда
			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьРасчетЗарплатыРасширенная", Новый ОписаниеТипов("Булево")));
			МассивИменРеквизитовФормы = Новый Массив;
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
			
			ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		ВозможностиИсправления = ВозможностиИсправления(Форма.Объект.Ссылка);
		
		ИспользоватьИсправлениеДокумента   = ВозможностиИсправления.Исправление;
		ИспользоватьСторнированиеДокумента = ВозможностиИсправления.Сторнирование;
		
		ДобавляемыеРеквизиты = Новый Массив;
		Если ИспользоватьИсправлениеДокумента Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументИсправлен", Новый ОписаниеТипов("Булево")));
			Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Форма.Параметры.Ключ));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументИсправление", Новый ОписаниеТипов(Типы)));
		КонецЕсли;
		Если ИспользоватьСторнированиеДокумента Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСторнирован", Новый ОписаниеТипов("Булево")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСторно", Новый ОписаниеТипов("ДокументСсылка.СторнированиеНачислений")));
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РекомендованоИсправление", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроведенаВыплатаЗарплаты", Новый ОписаниеТипов("Неопределено")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроизведеноОтражение", Новый ОписаниеТипов("Неопределено")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыИсправленногоДокумента", Новый ОписаниеТипов("Неопределено")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДоступноИсправлениеДокумента", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДоступноСторнированиеДокумента", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДоступноЧтениеСторнирование", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьРасчетЗарплатыРасширенная", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсправлениеЦветОсобогоТекста", Новый ОписаниеТипов("Цвет")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсправлениеПоясняющийТекст", Новый ОписаниеТипов("Цвет")));
		
		ДобавляемыеОперативно = Новый Массив;
		ДобавляемыеОперативно.Добавить(Новый РеквизитФормы("ВозможностиИсправления", Новый ОписаниеТипов("Неопределено")));
		
		Если Не ОтложенноеИзменение Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДобавляемыеРеквизиты, ДобавляемыеОперативно);
		КонецЕсли;
		
		ИменаСуществующихРеквизитов = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, ИменаСуществующихРеквизитов);
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, ИменаСуществующихРеквизитов,, ОтложенноеИзменение);
		
		Если ОтложенноеИзменение Тогда // Некоторые реквизиты добавляются оперативно.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаСуществующихРеквизитов, ДобавляемыеРеквизиты);
			ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеОперативно, ИменаСуществующихРеквизитов);
		КонецЕсли;
		
		Форма.ВозможностиИсправления = ВозможностиИсправления;
		
	Иначе
		ИспользоватьИсправлениеДокумента = Форма.ВозможностиИсправления.Исправление;
		ИспользоватьСторнированиеДокумента = Форма.ВозможностиИсправления.Сторнирование;
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы И (ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента) Тогда
		
		Элементы = Форма.Элементы;
		
		// Группа команд
		ГруппаИсправление = Элементы.ГруппаИсправление;
		ГруппаИсправление.РастягиватьПоГоризонтали = Истина;
		
		// Команда "Исправить".
		Если ИспользоватьИсправлениеДокумента Тогда
			ИмяКоманды = "Исправить";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru = 'Исправить';
												|en = 'Correct'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
			КонецЕсли;
		КонецЕсли;
			
		// Команда "Сторнировать".
		Если ИспользоватьСторнированиеДокумента Тогда
			ИмяКоманды = "Сторнировать";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru = 'Сторнировать';
												|en = 'Reverse'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
			КонецЕсли;
		КонецЕсли;
		
		// Картинка и надпись панели исправления.
		Если Элементы.Найти("ИсправлениеКартинка") = Неопределено Тогда
			Элемент = Элементы.Добавить("ИсправлениеКартинка", Тип("ДекорацияФормы"), ГруппаИсправление);
			Элемент.Заголовок = НСтр("ru = 'Предупреждение';
									|en = 'Warning'");
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			// Картинка устанавливается в процедуре УстановитьПоляИсправления.
			Элемент.Ширина = 2;
			Элемент.Высота = 0;
			Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
			
			// Надпись
			ИсправлениеИнфоНадпись = Элемент.РасширеннаяПодсказка;
			ИсправлениеИнфоНадпись.АвтоМаксимальнаяШирина = Ложь;
			ИсправлениеИнфоНадпись.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		// Команда "Открыть документ-исправление".
		Если ИспользоватьИсправлениеДокумента Тогда
			ИмяКоманды = "ПерейтиКИсправлению";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru = 'Открыть документ- исправление';
												|en = 'Open correction document'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 13;
				Элемент.Высота = 3;
			КонецЕсли;
		КонецЕсли;
		
		// Команда "Открыть документ-сторно".
		Если ИспользоватьСторнированиеДокумента Тогда
			ИмяКоманды = "ПерейтиКСторно";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru = 'Открыть документ-сторно';
												|en = 'Open storno document'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 11;
				Элемент.Высота = 3;
			КонецЕсли;
		КонецЕсли;
		
		// Команда "Открыть исправленный документ".
		ИмяКоманды = "ПерейтиКИсправленному";
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Заголовок = НСтр("ru = 'Открыть исправленный документ';
											|en = 'Open corrected document'");
			КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КонецЕсли;
		Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
			Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
			Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 16;
			Элемент.Высота = 3;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении данных тех документов, к которым подключен механизм исправления.
// Заполняет реквизиты формы механизма исправления, которые создаются в ГруппаИсправлениеДополнитьФорму.
// Параметры:
// 		Форма, 
//		РежимИсправления - допустимые значения 
//				"РасчетЗарплаты" - для расчетных документов
//				"ПериодическиеСведения" - для документов, которые вводят периодические сведения.
//		ПолеПериодРегистрации - по умолчанию "ПериодРегистрации".
//		ПроверятьНаличиеНачислений - по умолчанию Истина. Определяет влияет ли наличие начислений на 
//				доступность исправления. Значение Ложь передается для начисляющих зарплату документов, 
//				которые одновременно являются кадровыми документами. Пример: Увольнение
//
Процедура ПрочитатьРеквизитыИсправления(Форма, РежимИсправления = "РасчетЗарплаты", ПолеПериодРегистрации = "ПериодРегистрации", ПроверятьНаличиеНачислений = Истина) Экспорт
	
	Форма.ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	Если НЕ Форма.ИспользоватьРасчетЗарплатыРасширенная Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма["Объект"];
	Документ = Объект.Ссылка;
	
	Форма.ИсправлениеЦветОсобогоТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Форма.ИсправлениеПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	
	СозданиеНового = Форма.Параметры.Свойство("Ключ") И Форма.Параметры.Ключ.Пустая();
	
	ВозможностиИсправления = Форма.ВозможностиИсправления;
	
	Если СозданиеНового Тогда
		ИсправленныйДокумент = Объект.ИсправленныйДокумент;
	Иначе
		СведенияОбИсправлении = СведенияОбИсправленииДокумента(Документ, ВозможностиИсправления);
		ИсправленныйДокумент = СведенияОбИсправлении.ИсправленныйДокумент;
	КонецЕсли;
	
	ЭтоРасчетныйДокумент = РежимИсправления = "РасчетЗарплаты";
	
	Если ВозможностиИсправления.Исправление И ИсправленныйДокумент <> Неопределено Тогда
		Форма.ПараметрыИсправленногоДокумента =
			ИсправлениеДокументовЗарплатаКадрыВызовСервера.ПрочитатьПараметрыИсправленногоДокумента(ИсправленныйДокумент);
	Иначе
		Форма.ПараметрыИсправленногоДокумента = НовыйПараметрыИсправляемогоДокумента();
		Форма.ПараметрыИсправленногоДокумента.Ссылка = ИсправленныйДокумент;
	КонецЕсли;
	
	// Непроведенный документ не может быть исправлен или сторнирован. Два условия нужны для обхода проблемы платформы.
	Если Не Объект.Проведен Или СозданиеНового Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОбИсправлении.Исправлен Тогда
		Форма.ДокументИсправлен = СведенияОбИсправлении.Исправлен;
		Форма.ДокументИсправление = СведенияОбИсправлении.ДокументИсправление;
	ИначеЕсли СведенияОбИсправлении.Сторнирован Тогда
		Форма.ДокументСторнирован = СведенияОбИсправлении.Сторнирован;
		Форма.ДокументСторно = СведенияОбИсправлении.СторнирующийДокумент;
	КонецЕсли;
	
	Если ЭтоРасчетныйДокумент Тогда
		Рекомендация = РекомендацияПоИсправлениюРасчетногоДокумента(
			Документ, Объект.Организация, Объект[ПолеПериодРегистрации], ПроверятьНаличиеНачислений);
		
		Форма.РекомендованоИсправление = Рекомендация.РекомендованоИсправление;
		Форма.ПроведенаВыплатаЗарплаты = Рекомендация.ПроведенаВыплатаЗарплаты;
		Форма.ПроизведеноОтражение = Рекомендация.ПроизведеноОтражение;
	Иначе
		Форма.РекомендованоИсправление = Истина;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь, Ложь, Ложь);
	ДокументСторнированиеНачислений = Метаданные.Документы.СторнированиеНачислений;
	
	Если ПривилегированныйРежим() Тогда 
		ЕстьПравоИсправления = ПравоДоступа("Добавление", Документ.Метаданные(), ТекущийПользователь);
		ЕстьПравоСторнирования = ЭтоПолноправныйПользователь
			Или ПравоДоступа("Добавление", ДокументСторнированиеНачислений, ТекущийПользователь);
		ЕстьПравоЧтенияСторнирования = ПравоДоступа("Чтение", ДокументСторнированиеНачислений, ТекущийПользователь);
	Иначе
		ЕстьПравоИсправления = ПравоДоступа("Добавление", Документ.Метаданные());
		ЕстьПравоСторнирования = ЭтоПолноправныйПользователь
			Или ПравоДоступа("Добавление", ДокументСторнированиеНачислений);
		ЕстьПравоЧтенияСторнирования = ПравоДоступа("Чтение", ДокументСторнированиеНачислений);
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ИсправлениеДоступно = (ИспользоватьНачислениеЗарплаты И ЭтоРасчетныйДокумент) Или Не ЭтоРасчетныйДокумент;
	
	Форма.ДоступноИсправлениеДокумента = ИсправлениеДоступно И ЕстьПравоИсправления;
	Форма.ДоступноСторнированиеДокумента = ИсправлениеДоступно И (ЕстьПравоСторнирования Или ЕстьПравоЧтенияСторнирования);
	Форма.ДоступноЧтениеСторнирование = ЕстьПравоЧтенияСторнирования;
		
КонецПроцедуры

Функция РекомендацияПоИсправлениюРасчетногоДокумента(Документ, Организация, ПериодРегистрации, ПроверятьНаличиеНачислений) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("РекомендованоИсправление", Ложь);
	// Причины рекомендации:
	Результат.Вставить("ПроведенаВыплатаЗарплаты", Неопределено);
	Результат.Вставить("ПроизведеноОтражение", Неопределено);
	
	РекомендованоИсправлениеДажеЕслиНеВыполненыНачисления = Не ПроверятьНаличиеНачислений;
	ИсправлениеВТекущемПериодеВозможно = ВозможноИсправлениеТекущимПериодом(Документ);
	
	Если ИсправлениеВТекущемПериодеВозможно Тогда
		Результат.РекомендованоИсправление = Истина;
		
	Иначе
		// Проверяется наличие выплаты в периоде.
		БылаВыплатаВПериоде = ВзаиморасчетыССотрудникамиРасширенный.ВыплатаПроизводилась(Организация, Документ, ПериодРегистрации);
		
		// Проверяется наличие документа отражения зарплаты в бухгалтерском учете.
		БылоОтражениеЗарплатыВБухучете = ОтражениеВУчетеПроизводилось(Организация, ПериодРегистрации);
		
		Результат.РекомендованоИсправление = БылаВыплатаВПериоде Или БылоОтражениеЗарплатыВБухучете
			Или РекомендованоИсправлениеДажеЕслиНеВыполненыНачисления;
			
		Результат.ПроведенаВыплатаЗарплаты = БылаВыплатаВПериоде;
		Результат.ПроизведеноОтражение = БылоОтражениеЗарплатыВБухучете;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСторнирования() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИсправлениеВТекущемПериоде", Ложь);
	Результат.Вставить("ИсправлениеДоначислением", Ложь);
	Результат.Вставить("ОтменаДокумента", Ложь);
	Результат.Вставить("ПериодРегистрации", Неопределено);
	Результат.Вставить("РеквизитыДляПроведения", Неопределено);
		
	Возврат Результат;
	
КонецФункции

// Помечает набор записей перед добавлением в него сторно строк. Используется для предотвращения повторной обработки
// набора записей.
//
// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей - Изолируемый набор.
//  ИмяУчета	 - Строка						 - Имя изолирующего учета.
// 
// Возвращаемое значение:
//  Булево - Истина когда обработка набора еще не выполнялось учетами, Ложь когда обработка уже выполнена.
//
Функция ИзолироватьУчетом(НаборЗаписей, ИмяУчета) Экспорт
	
	Результат = Ложь;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ИзолированоУчетом") Тогда
		МаркерУчета = НаборЗаписей.ДополнительныеСвойства.ИзолированоУчетом;
		Если МаркерУчета <> ИмяУчета И МаркерУчета <> "<ВнеУчета>" И ОбщегоНазначения.РежимОтладки() Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Учет ""%1"" нарушает изоляцию %2 установленную учетом ""%3""';
					|en = 'The ""%1"" accounting violates the %2 isolation set by the ""%3"" accounting'"),
				ИмяУчета, НаборЗаписей.Метаданные().ПолноеИмя(), НаборЗаписей.ДополнительныеСвойства.ИзолированоУчетом);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	Иначе
		НаборЗаписей.ДополнительныеСвойства.Вставить("ИзолированоУчетом", ИмяУчета);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в набор записей такие строки, которые сторнируют движения исправленного документа.
//  Подходит для регистров накопления, имеющих реквизит Сторно (булево).
//
// Параметры:
//  НаборЗаписей		 - РегистрНакопленияНаборЗаписей - Целевой набор записей в который будут добавлены сторнирующие строки.
//  ИсправленныйДокумент - ДокументСсылка				 - Документ, движения которого необходимо сторнировать.
//  МетаданныеРегистра	 - ОбъектМетаданных				 - Метаданные регистра целевого набора записей.
//  Записывать			 - Булево						 - Если Истина, то набор будет записан сразу, если Ложь, то набору будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияВРегистреНакопления(НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра = Неопределено, Записывать = Ложь) Экспорт
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(НаборЗаписей));
	КонецЕсли;
	
	Запрос = Новый Запрос(
	    "ВЫБРАТЬ
	    |   *
	    |ИЗ
	    |   #СторнируемыйРегистр КАК СторнируемыйРегистр 
	    |ГДЕ
	    |   СторнируемыйРегистр.Регистратор = &ИсправленныйДокумент
	    |   И СторнируемыйРегистр.Сторно = ЛОЖЬ");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СторнируемыйРегистр", МетаданныеРегистра.ПолноеИмя());
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИдентификаторСтроки = МетаданныеРегистра.Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено;
	МетаданныеРесурсыРегистра = МетаданныеРегистра.Ресурсы;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Для Каждого Ресурс Из МетаданныеРесурсыРегистра Цикл
			НоваяСтрока[Ресурс.Имя] = - НоваяСтрока[Ресурс.Имя];
		КонецЦикла;
		НоваяСтрока.Сторно = Истина;
		
		Если ЕстьИдентификаторСтроки Тогда
			НоваяСтрока.ИдентификаторСтроки = - НоваяСтрока.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Если Записывать Тогда
		НаборЗаписей.Записать();
		НаборЗаписей.Записывать = Ложь;
	Иначе
		НаборЗаписей.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапланироватьКопированиеСторноДругогоНабора(Движения, ИмяНабора, ИмяИсточника) Экспорт
	
	Если Движения.Найти(ИмяНабора) <> Неопределено И Движения.Найти(ИмяИсточника) <> Неопределено Тогда
		Движения[ИмяНабора].ДополнительныеСвойства.Вставить("ИсточникСторно", ИмяИсточника);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьСторноДругогоНабора(НаборЗаписей, НаборыЗаписей, Записывать = Ложь) Экспорт
	
	Если НаборЗаписей.Количество() <> 0 Или Не НаборЗаписей.ДополнительныеСвойства.Свойство("ИсточникСторно") Тогда
		Возврат;
	КонецЕсли;
	
	НаборИсточник = Неопределено;
	НаборыЗаписей.Свойство(НаборЗаписей.ДополнительныеСвойства.ИсточникСторно, НаборИсточник);
	
	Если Не НаборИсточник.ДополнительныеСвойства.Свойство("ИзолированоУчетом") Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка копирования сторно в набор ""%1"", источник еще не сторнирован.';
				|en = 'An error occurred when copying the storno to the ""%1"" set. The source is not reversed yet.'"),
			НаборЗаписей.Метаданные().ПолноеИмя());
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Для Каждого Строка Из НаборИсточник Цикл
		Если Строка.Сторно Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если Записывать Тогда
		НаборЗаписей.Записать();
		НаборЗаписей.Записывать = Ложь;
	Иначе
		НаборЗаписей.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Сторнирует движения в регистрах накопления и расчета универсальными алгоритмами.
// Коллекция движений может не содержать движения уже сторнированные учетами.
//
// Параметры:
//  Движения               - КоллекцияДвижений, Структура - Коллекция движений, в которую будут добавлены сторно записи.
//  ИсправленныйДокумент   - ДокументСсылка               - Документ, записи которого необходимо сторнировать.
//  ПараметрыСторнирования - Структура                    - Свойства:
//    * ИсправлениеВТекущемПериоде - Булево - Истина когда сторнирование выполняется в периоде регистрации сторнируемого
//                                            документа.
//    * ОтменаДокумента            - Булево - Истина когда выполняется простое сторнирование документа без исправления.
//    * ПериодРегистрации          - Дата   - Период регистрации сторнирующего документа.
//
Процедура СторнироватьДвиженияБезСпецификиУчетов(Движения, ИсправленныйДокумент, ПараметрыСторнирования) Экспорт
	
	МетаданныеДвиженийИсправленногоДокумента = ИсправленныйДокумент.Метаданные().Движения;
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		
		НедостающиеДвижения = Новый Массив;
		НаборЗаписей = Неопределено;
		
		Для Каждого МетаданныеРегистра Из МетаданныеДвиженийИсправленногоДокумента Цикл
			
			Если Не(ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Или ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра))Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДвиженияВСтруктуре Тогда
				Движения.Свойство(МетаданныеРегистра.Имя, НаборЗаписей);
			Иначе
				НаборЗаписей = Движения.Найти(МетаданныеРегистра.Имя);
			КонецЕсли;
			
			Если НаборЗаписей = Неопределено Тогда
				НедостающиеДвижения.Добавить(МетаданныеРегистра.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
		
		Если НедостающиеДвижения.Количество() > 0 Тогда
			
			ДокументИсправление = "";
			Для Каждого ЭлементКоллекции Из Движения Цикл
				НаборЗаписей = ?(ДвиженияВСтруктуре, ЭлементКоллекции.Значение, ЭлементКоллекции);
				ДокументИсправление = НаборЗаписей.Отбор.Регистратор;
				Прервать;
			КонецЦикла;
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 не выполняет движений по: %2
						   |как исправленный им документ %3';
						   |en = 'The %1 document does not have records by: %2
						   |as the %3 document corrected by it'"),
				ДокументИсправление, Символы.ПС + СтрСоединить(НедостающиеДвижения, Символы.ПС), ИсправленныйДокумент);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из Движения Цикл
		
		НаборЗаписей = ?(ДвиженияВСтруктуре, ЭлементКоллекции.Значение, ЭлементКоллекции);
		МетаданныеРегистра = НаборЗаписей.Метаданные();
		
		Если Не МетаданныеДвиженийИсправленногоДокумента.Содержит(МетаданныеРегистра)
			Или НаборЗаписей.ДополнительныеСвойства.Свойство("ИзолированоУчетом") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			
			СторнироватьДвиженияВРегистреНакопления(НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра);
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра) Тогда
			
			Если ПараметрыСторнирования.ИсправлениеВТекущемПериоде Тогда
				Если МетаданныеРегистра.Имя = "Начисления" Тогда
					РегистрыРасчета.Начисления.СторнироватьДвиженияВТекущемПериоде(НаборЗаписей, ИсправленныйДокумент);
				ИначеЕсли МетаданныеРегистра.Имя = "Удержания" Тогда
					РегистрыРасчета.Удержания.СторнироватьДвижения(НаборЗаписей, ИсправленныйДокумент);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сторнирует движения в регистрах накопления и расчета по всем известным учетам.
//
// Параметры:
//  Движения               - КоллекцияДвижений, Структура - Коллекция движений, в которую будут добавлены сторно записи.
//  ИсправленныйДокумент   - ДокументСсылка               - Документ, записи которого необходимо сторнировать.
//  ПараметрыСторнирования - Структура                    - Свойства:
//    * ИсправлениеВТекущемПериоде - Булево - Истина когда сторнирование выполняется в периоде регистрации сторнируемого
//                                            документа.
//    * ОтменаДокумента            - Булево - Истина когда выполняется простое сторнирование документа без исправления.
//    * ПериодРегистрации          - Дата   - Период регистрации сторнирующего документа.
//  СтруктураВидовУчета    - Структура      - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//                                            Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//
Процедура СторнироватьДвиженияПоВсемУчетам(Движения, ИсправленныйДокумент, ПараметрыСторнирования, СтруктураВидовУчета) Экспорт
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		УчетСреднегоЗаработка.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета И Не ПараметрыСторнирования.ИсправлениеДоначислением Тогда
		
		УчетРабочегоВремени.ЗарегистрироватьСторноЗаписиПоДокументу(Движения, ПараметрыСторнирования.ПериодРегистрации, ИсправленныйДокумент);
		УчетРабочегоВремениРасширенный.СторнироватьДниЧасыОтгуловСотрудников(Движения, ИсправленныйДокумент);
		УчетСтраховыхВзносовРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыСторнирования);
		УчетНДФЛРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыСторнирования);
		РасчетЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыСторнирования);
		ОтражениеЗарплатыВБухучетеРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		УчетНачисленнойЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыСторнирования);
		УчетПособийСоциальногоСтрахованияРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		
		СторнироватьДвиженияБезСпецификиУчетов(Движения, ИсправленныйДокумент, ПараметрыСторнирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку правильности заполнений реквизитов механизма исправления.
// Вызывается из ОбработкаПроверкиЗаполнения документа.
// Параметры:
//		Объект - документ
//		ПроверяемыеРеквизиты - проверяемые реквизиты документа.
//		Отказ - булево
//		РежимИсправления - допустимые значения 
//				"РасчетЗарплаты" - для расчетных документов
//				"ПериодическиеСведения" - для документов, которые вводят периодические сведения.
//		ПолеПериодРегистрации - по умолчанию "ПериодРегистрации".
//		
Процедура ПроверитьЗаполнение(Объект, ПроверяемыеРеквизиты, Отказ, РежимИсправления = "РасчетЗарплаты", ПолеПериодРегистрации = "ПериодРегистрации") Экспорт
	
	Если Не РежимИсправления = "РасчетЗарплаты" Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеИсправленияСторнирования(Объект.ИсправленныйДокумент, Объект.Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПериодРегистрацииИсправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, ПолеПериодРегистрации);
	УстановитьПривилегированныйРежим(Ложь);

	Если ПериодРегистрацииИсправленного <> НеОпределено Тогда
		
		Если ВозможноИсправлениеТекущимПериодом(Объект.ИсправленныйДокумент) Тогда
			// Если допустимо исправление в текущем периоде
			Если ПериодРегистрацииИсправленного > Объект[ПолеПериодРегистрации] Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверно указан месяц. Месяц исправления должен быть больше или равен месяцу исправляемого документа (%1 г.)';
						|en = 'Incorrect month. The month of correction must be greater than or equal to the month of the corrected document (%1)'"),
					Формат(ПериодРегистрацииИсправленного, "ДФ='ММММ гггг'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПолеПериодРегистрации,, Отказ);
			КонецЕсли;
		Иначе
			Если ПериодРегистрацииИсправленного >= Объект[ПолеПериодРегистрации] Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверно указан месяц. Месяц исправления должен быть больше месяца исправляемого документа (%1 г.)';
						|en = 'Incorrect month. The month of correction must be greater than the month of the corrected document (%1)'"),
					Формат(ПериодРегистрацииИсправленного, "ДФ='ММММ гггг'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПолеПериодРегистрации,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Ищет существующий документ исправления или сторнирования для проверяемого документа.
//
// Параметры:
//  Документ            - ДокументСсылка - Проверяемый документ
//  ИсключаемыйДокумент - ДокументСсылка - Исключаемый из проверки документ.
//  Отказ               - Булево         - Возвращаемое значение.
//
Процедура ПроверитьНаличиеИсправленияСторнирования(Документ, ИсключаемыйДокумент = Неопределено, Отказ = Ложь) Экспорт
	
	Сведения = СведенияОбИсправленииДокумента(Документ);
	Если (Сведения.Исправлен И Сведения.ДокументИсправление <> ИсключаемыйДокумент)
		Или(Сведения.Сторнирован И Сведения.СторнирующийДокумент <> ИсключаемыйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Проведение еще одного исправления запрещено.';
								|en = 'Unable to modify.'")
			+ Символы.ПС + Сведения.ПредставлениеСостояния;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ИсправленныйДокумент",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет копирование документа.
//
// Параметры:
//  Приемник					 - Объект	 - Документ, в который копируются данные.
//  Источник					 - Ссылка	 - Документ, из которого копируются данные.
//  ИсключаемыеСвойства			 - Строка	 - Имена свойств, разделенные запятыми, которые необходимо исключить из заполнения.
//  ИсключаемыеТабличныеЧасти	 - Строка	 - Имена табличных частей, разделенные запятыми, которые необходимо исключить из заполнения.
//  ДанныеЗаполнения			 - Структура - Значение параметра процедуры ОбработкаЗаполнения, используется как основание для заполнения документа.
//
Процедура СкопироватьДокумент(Приемник, Источник, ИсключаемыеСвойства = "", ИсключаемыеТабличныеЧасти = "", ДанныеЗаполнения = Неопределено) Экспорт
	
	ДанныеДокумента = Источник.Скопировать();
	МетаданныеДокумента = Приемник.Метаданные();
	
	ЗаполнитьЗначенияСвойств(Приемник, ДанныеДокумента, , ИсключаемыеСвойства);
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	ЭлектронныеТрудовыеКнижкиРасширенный.ПриЗаполненииДокументаИсправления(Приемник, Источник);
	
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерПервичногоДокумента", МетаданныеДокумента) Тогда
		Если Не ЗначениеЗаполнено(Приемник["НомерПервичногоДокумента"]) Тогда
			Приемник["НомерПервичногоДокумента"] = ЗарплатаКадрыОтчеты.НомерНаПечать(Источник.Номер, Источник.НомерПервичногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаПервичногоДокумента", МетаданныеДокумента) Тогда
		Если Не ЗначениеЗаполнено(Приемник["ДатаПервичногоДокумента"]) Тогда
			Приемник["ДатаПервичногоДокумента"] = Источник.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если ИсключаемыеТабличныеЧасти = "" Тогда
		ИменаИсключаемыхТабличныхЧастей = Новый Массив;
	Иначе
		ИменаИсключаемыхТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеТабличныеЧасти, , , Истина);
	КонецЕсли;
	
	Для каждого ТабличнаяЧастьДокумента Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ИменаИсключаемыхТабличныхЧастей.Найти(ТабличнаяЧастьДокумента.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаДокумента Из Источник[ТабличнаяЧастьДокумента.Имя] Цикл
			НоваяСтрока = Приемник[ТабличнаяЧастьДокумента.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
		ИсправлениеВТекущемПериоде = Ложь;
	Иначе
		ИсправлениеВТекущемПериоде = ДанныеЗаполнения.Свойство("ДопустимоИсправлениеВТекущемПериоде")
			И ДанныеЗаполнения.ДопустимоИсправлениеВТекущемПериоде
			И ВозможноИсправлениеТекущимПериодом(Источник);
	КонецЕсли;

	Если Не ИсправлениеВТекущемПериоде Тогда
		// Период регистрации документа исправления необходимо увеличить.
		Если ДанныеЗаполнения.Свойство("ИмяПериодРегистрации") Тогда
			ИмяПериодРегистрации = ДанныеЗаполнения.ИмяПериодРегистрации;
			ПериодРегистрацииИсправленногоДокумента = ДанныеЗаполнения.ПериодРегистрацииИсправленногоДокумента;
		Иначе
			МетаданныеРеквизита = МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации");
			Если МетаданныеРеквизита = Неопределено Тогда
				МетаданныеРеквизита = МетаданныеДокумента.Реквизиты.Найти("МесяцНачисления");
			КонецЕсли;
			
			Если МетаданныеРеквизита <> Неопределено Тогда
				ИмяПериодРегистрации = МетаданныеРеквизита.Имя;
				ПериодРегистрацииИсправленногоДокумента = ДанныеДокумента[ИмяПериодРегистрации];
			Иначе
				ИмяПериодРегистрации = Неопределено;
				ПериодРегистрацииИсправленногоДокумента = Дата(1, 1, 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПериодРегистрации <> Неопределено Тогда
			Значения = Новый Структура("Месяц");
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(Значения);
			
			Приемник[ИмяПериодРегистрации] = Макс(ДобавитьМесяц(ПериодРегистрацииИсправленногоДокумента, 1), Значения.Месяц);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает таблицу со всеми документами входящими в цепочку исправления. 
// Т.е. допустим, что в параметре МассивСсылок передана ссылка на Документ_3, который является документом исправлением
// для Документ_2, а Документ_2 является исправлением для Документ_1. Результирующая таблица(две колонки: Ссылка и
// ИсправленныйДокумент) будет содержать следующие строки:
//	 Документ_3 - Документ_2
//	 Документ_3 - Документ_1
//
// Параметры:
//  МенеджерВременныхТаблиц	 - 	 МенеджерВременныхТаблиц в который будет помещена временная таблица ИмяВТ 
//  МассивСсылок			 - 	 массив ссылок на документы, по которым надо создать временную таблицу 
//  ИмяДокумента			 - 	 имя таблицы документа, например "Отпуск", "Увольнение" 
//  ИмяВТ					 - 	 имя результирующей таблицы. Если не задано, то используется строка: "ВТИсправленныеДокументы" + ИмяДокумента.
//
Процедура СоздатьВТИсправленныеДокументы(МенеджерВременныхТаблиц, МассивСсылок, ИмяДокумента, ИмяВТ = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);

	НомерШага = 0;
	
	РезультатВыполненияШага = ВыполнитьПервыйШагШагПоискаИсправленныхДокументов(Запрос, ИмяДокумента);
	
	ЕстьИсправленные = Не РезультатВыполненияШага.Пустой();

	Пока ЕстьИсправленные Цикл  
		
		НомерШага = НомерШага + 1;
		
		РезультатВыполненияШага = ВыполнитьШагПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента);
		
		ЕстьИсправленные = Не РезультатВыполненияШага.Пустой();
		
	КонецЦикла;

	ОбъединитьТаблицыШаговПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента, ИмяВТ);
	
	УничтожитьВременныеТаблицыШаговПоиска(НомерШага, Запрос);
	
КонецПроцедуры

// Возвращает массив документов входящих в цепочку исправления до проверяемого документа.
//
// Параметры:
//  Документ - ДокументСсылка - Проверяемый документ.
// 
// Возвращаемое значение:
//  Массив - Исправленные документы цепочки исправления до проверяемого документа.
//
Функция ПолучитьДокументыЦепочкиИсправлений(Документ) Экспорт
	
	Результат = Новый Массив;
	
	ВозможностиИсправления = ВозможностиИсправления(Документ);
	ЕстьИсправление = Неопределено;
	
	УказательДокумента = Документ;
	Пока ЕстьИсправление <> Ложь Цикл
		Сведения = СведенияОбИсправленииДокумента(УказательДокумента, ВозможностиИсправления);
		ЕстьИсправление = Сведения.ИсправленныйДокумент <> Неопределено;
		Если ЕстьИсправление Тогда
			Результат.Добавить(Сведения.ИсправленныйДокумент);
			УказательДокумента = Сведения.ИсправленныйДокумент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при проведении документа поддерживающего исправление.
// Выполняет необходимые проверки при проведении и сторнирование движений исправляемого документа по учетам.
//
// Параметры:
//  ДокументСсылка         - ДокументСсылка               - Документ исправление или документ, который сам может быть исправлен.
//  Движения               - КоллекцияДвижений, Структура - Коллекция движений документа в которую будут добавлены
//                                                          сторно стоки.
//  РежимПроведения        - РежимПроведенияДокумента     - Оперативный, неоперативный.
//  Отказ                  - Булево                       - Признак отказа от проведения документа.
//  РеквизитыДляПроведения - Структура                    - Значения реквизитов документа.
//    * ИсправленныйДокумент - ДокументСсылка - Исправленный документ.
//    * ПериодРегистрации    - Дата           - Период регистрации документа исправления.
//  СтруктураВидовУчета    - Структура                    - Виды учета, по которым будет выполнено сторнирование
//    исправленного документа. Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  Объект                 - ДокументОбъект               - Передается только при вызове из обработки проведения документа.
//  ИмяПериодРегистрации   - Строка                       - Имя реквизита содержащего период регистрации документа.
// Возвращаемое значение: 
//  Структура с полями:
//    * ИсправлениеВТекущемПериоде      - Булево - Истина если документ исправление проводится в том же периоде,
//                                                 что и исправленный документ.
//    * ИсправленныйДокументСторнирован - Булево - Истина если исправленный документ сторнирован собственной функцией СторнироватьПоУчетам.
//
Функция ПриПроведенииИсправления(ДокументСсылка, Движения, РежимПроведения, Отказ, РеквизитыДляПроведения = Неопределено, СтруктураВидовУчета = Неопределено, Объект = Неопределено, ИмяПериодРегистрации = "ПериодРегистрации") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИсправлениеВТекущемПериоде", Ложь);
	Результат.Вставить("ИсправлениеДоначислением", Ложь);
	Результат.Вставить("ИсправленныйДокументСторнирован", Ложь);
	Результат.Вставить("ИсправленныйДокумент", Неопределено);
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			Если ТипЗнч(ВидУчета.Значение) = Тип("Булево") Тогда
				СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВидовУчета.ПроведениеПоВсемУчетам Или СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		Сведения = СведенияОбИсправленииДокумента(ДокументСсылка);
		Если Сведения.Исправлен Или Сведения.Сторнирован Тогда
			// Перепроведение исправленных документов запрещено.
			ВызватьИсключение НСтр("ru = 'Проведение запрещено.';
									|en = 'Posting is prohibited.'") + Символы.ПС + Сведения.ПредставлениеСостояния;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СторнированиеНачислений") Тогда
		ИмяИсправленныйДокумент = "СторнируемыйДокумент";
		ОтменаДокумента = Истина;
	Иначе
		ИмяИсправленныйДокумент = "ИсправленныйДокумент";
		ОтменаДокумента = Ложь;
	КонецЕсли;
	
	Если РеквизитыДляПроведения = Неопределено Тогда
		Если Объект = Неопределено Тогда
			Возврат Результат;
		Иначе
			РеквизитыДляПроведения = Новый Структура();
			РеквизитыДляПроведения.Вставить(ИмяПериодРегистрации, Объект[ИмяПериодРегистрации]);
			РеквизитыДляПроведения.Вставить(ИмяИсправленныйДокумент, Объект[ИмяИсправленныйДокумент]);
		КонецЕсли;
	КонецЕсли;
	
	ИсправленныйДокумент = РеквизитыДляПроведения[ИмяИсправленныйДокумент];
	
	Если Не ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Сведения = СведенияОбИсправленииДокумента(ИсправленныйДокумент);
	Если Сведения.Исправлен Тогда
		
		Если Сведения.ДокументИсправление <> ДокументСсылка Тогда
			// Несколько одновременных исправлений одного и того же документа запрещено.
			ВызватьИсключение
				НСтр("ru = 'Проведение еще одного исправления запрещено.';
					|en = 'Unable to modify.'") + Символы.ПС + Сведения.ПредставлениеСостояния;
		КонецЕсли;
		
		Если Не Сведения.Проведен Тогда
			ВызватьИсключение
				НСтр("ru = 'Исходный (исправляемый) документ не проведен, проведение исправления запрещено.';
					|en = 'Source document being corrected is not posted. Correction posting is not allowed.'");
		КонецЕсли;
			
	КонецЕсли;
	
	МетаданныеИсправленногоДокумента = ИсправленныйДокумент.Метаданные();
	
	Если Объект <> Неопределено И (СтруктураВидовУчета.ПроведениеПоВсемУчетам Или СтруктураВидовУчета.ОстальныеВидыУчета) Тогда
		ДоступноИсправлениеПериодическихСведений =
			Метаданные.ПодпискиНаСобытия.ПолучитьПрежнийИсправленный.Источник.СодержитТип(
				Тип("ДокументОбъект." + МетаданныеИсправленногоДокумента.Имя));
			
		Если ДоступноИсправлениеПериодическихСведений Тогда
			ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения, ДокументСсылка, ИсправленныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	ИсправлениеВТекущемПериодеВозможно = ВозможноИсправлениеТекущимПериодом(ИсправленныйДокумент);
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеИсправленногоДокумента.ПолноеИмя());
	
	Если ИсправлениеВТекущемПериодеВозможно Тогда
		ПараметрыИсправляемогоДокумента = МенеджерДокумента.ПараметрыИсправляемогоДокумента(ИсправленныйДокумент);
		ИсправлениеВТекущемПериоде = ПараметрыИсправляемогоДокумента.ПериодРегистрации = РеквизитыДляПроведения[ИмяПериодРегистрации];
	Иначе
		ПараметрыИсправляемогоДокумента = НовыйПараметрыИсправляемогоДокумента();
		ИсправлениеВТекущемПериоде = Ложь;
	КонецЕсли;
	
	Если ИсправлениеВТекущемПериодеВозможно И (Не ИсправлениеВТекущемПериоде) Тогда
		// Сброс признака исправления текущим периодом, на случай если ранее документ был исправлен текущим периодом.
		РегистрыРасчета.Начисления.ПриОтменеИсправленияВТекущемПериоде(ИсправленныйДокумент);
	КонецЕсли;
	
	ПараметрыСторнирования = ПараметрыСторнирования();
	ПараметрыСторнирования.ИсправлениеВТекущемПериоде = ИсправлениеВТекущемПериоде;
	ПараметрыСторнирования.ОтменаДокумента = ОтменаДокумента;
	ПараметрыСторнирования.ПериодРегистрации = РеквизитыДляПроведения[ИмяПериодРегистрации];
	ПараметрыСторнирования.РеквизитыДляПроведения = РеквизитыДляПроведения;
	ПараметрыСторнирования.ИсправлениеДоначислением = ПараметрыИсправляемогоДокумента.ВыполнилДоначисление;
	
	Если Не ОтменаДокумента Тогда
		Результат.ИсправленныйДокументСторнирован = МенеджерДокумента.СторнироватьПоУчетам(
			Движения, ДокументСсылка, ИсправленныйДокумент, СтруктураВидовУчета, ПараметрыСторнирования);
	КонецЕсли;
	
	Результат.ИсправлениеВТекущемПериоде = ИсправлениеВТекущемПериоде;
	Результат.ИсправленныйДокумент = ИсправленныйДокумент;
	Результат.ИсправлениеДоначислением = ПараметрыИсправляемогоДокумента.ВыполнилДоначисление;
	
	Если СтруктураВидовУчета.Начисления И ИсправлениеВТекущемПериоде И Результат.ИсправлениеДоначислением Тогда
		// Преобразование сторно в сторно текущего периода сработает перед записью набора.
		// В данный момент набор может быть еще не заполнен, так как формирование движений в учетах еще не выполнялось.
		РегистрыРасчета.Начисления.ЗапланироватьПреобразованиеСторноТекущегоПериода(Движения.Начисления, ИсправленныйДокумент);
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	ЭлектронныеТрудовыеКнижкиРасширенный.ПриИсправленииТрудовойДеятельности(ИсправленныйДокумент);
	
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	Возврат Результат;	
	
КонецФункции

// Получает первый документ в цепочке исправлений по переданной ссылке на документ
// Параметры: 
//	ИсходныйДокумент - ссылка
// Возвращаемое значение: 
//	Ссылка на первый документ цепочки исправлений (того же типа, что и ИсходныйДокумент)
//	Если ИсходныйДокумент не является исправлением, возвращается ссылка на него.
// 
// см. также СоздатьВТИсправленныеДокументы
Функция ПервыйДокументЦепочкиИсправлений(ИсходныйДокумент) Экспорт
	
	ИсправленныйДокумент = ИсходныйДокумент;
	ЦепочкаИсправлений = Новый Массив;
	
	Пока Истина Цикл
		ТекущийИсправленныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, "ИсправленныйДокумент");
		Если ЗначениеЗаполнено(ТекущийИсправленныйДокумент) 
			И ЦепочкаИсправлений.Найти(ТекущийИсправленныйДокумент) = Неопределено Тогда
			ЦепочкаИсправлений.Добавить(ТекущийИсправленныйДокумент);
			ИсправленныйДокумент = ТекущийИсправленныйДокумент;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсправленныйДокумент;
	
КонецФункции

// Находит последний документ в цепочке исправлений.
//
// Параметры:
//   Документ - ЛюбаяСсылка - Текущий документ.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - Последний документ в цепочке исправлений.
//
Функция ПоследнийДокументЦепочкиИсправлений(Документ) Экспорт
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Документ;
	КонецЕсли;
	
	МетаданныеДокумента = Документ.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
		Возврат Документ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмя КАК Документ
	|ГДЕ
	|	Документ.ИсправленныйДокумент = &ИсправленныйДокумент
	|	И Документ.Проведен";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмя", МетаданныеДокумента.ПолноеИмя());
	
	ТекущийДокумент = Документ;
	Пока Истина Цикл
		Запрос.УстановитьПараметр("ИсправленныйДокумент", ТекущийДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущийДокумент = Выборка.Ссылка;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ТекущийДокумент;
КонецФункции

Функция СведенияОбИсправленииДокумента(ДокументСсылка, ВозможностиИсправления = Неопределено) Экспорт
	
	// Исправления могут образовывать цепочки типа: Исходный <- Испр.1 <- Испр.2 ... <- Испр.n
	// Сведения об исправлении условно делятся на два блока слева и справа от документа по цепочке исправлений.
	
	Результат = Новый Структура();
	// Сведения об исправлении выполненном этим документом (слева по цепочке исправлений).
	Результат.Вставить("ИсправленныйДокумент", Неопределено);
	// Сведения об исправлении этого документа (справа по цепочке исправлений).
	Результат.Вставить("Исправлен", Ложь);
	Результат.Вставить("Сторнирован", Ложь);
	Результат.Вставить("СторнирующийДокумент", Неопределено);
	Результат.Вставить("ДокументИсправление", Неопределено);
	// Сведения об этом документе.
	Результат.Вставить("ПредставлениеСостояния", "");
	Результат.Вставить("Проведен", Ложь);
	
	Если ВозможностиИсправления = Неопределено Тогда
		ВозможностиИсправления = ВозможностиИсправления(ДокументСсылка);
	КонецЕсли;
	
	ПоддерживаетИсправление = ВозможностиИсправления.Исправление;
	ПоддерживаетСторнирование = ВозможностиИсправления.Сторнирование;
	
	Если Не (ПоддерживаетИсправление Или ПоддерживаетСторнирование) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1";
	
	Текст = ?(ПоддерживаетИсправление, Текст + "
		|	ПРЕДСТАВЛЕНИЕ(ИсправляющиеДокументы.Ссылка) КАК ИсправляющийПредставление,
		|	ИсправляющиеДокументы.Ссылка КАК ДокументИсправление,
		|	Документы.ИсправленныйДокумент КАК ИсправленныйДокумент,",
		Текст + "
		|	NULL КАК ДокументИсправление,
		|	NULL КАК ИсправленныйДокумент,");
		
	Текст = ?(ПоддерживаетСторнирование, Текст + "
		|	ПРЕДСТАВЛЕНИЕ(СторнирующиеДокументы.Ссылка) КАК СторнирующийПредставление,
		|	СторнирующиеДокументы.Ссылка КАК СторнирующийДокумент,",
		Текст + "
		|	NULL КАК СторнирующийДокумент,");
		
	Текст = Текст + "
		|	ПРЕДСТАВЛЕНИЕ(Документы.Ссылка) КАК ИсправленныйПредставление,
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.Проведен КАК Проведен
		|ИЗ
		|	#Таблица КАК Документы";
	
	Текст = ?(ПоддерживаетИсправление, Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ #Таблица КАК ИсправляющиеДокументы
		|		ПО (ИсправляющиеДокументы.Проведен)
		|			И Документы.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент", Текст);
	
	Текст = ?(ПоддерживаетСторнирование, Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СторнированиеНачислений КАК СторнирующиеДокументы
		|		ПО (СторнирующиеДокументы.Проведен)
		|			И Документы.Ссылка = СторнирующиеДокументы.СторнируемыйДокумент", Текст);
	
	Текст = Текст + "
		|ГДЕ
		|	Документы.Ссылка = &ДокументСсылка";
	
	Текст = СтрЗаменить(Текст, "#Таблица", ДокументСсылка.Метаданные().ПолноеИмя());
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.Проведен = Выборка.Проведен;
		
		Если ЗначениеЗаполнено(Выборка.СторнирующийДокумент) Тогда
			Результат.Сторнирован = Истина;
			Результат.СторнирующийДокумент = Выборка.СторнирующийДокумент;
			Результат.ПредставлениеСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 сторнирован документом %2.';
					|en = 'Document %1 is reversed by document %2.'"),
				Выборка.ИсправленныйПредставление,	Выборка.СторнирующийПредставление);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИсправленныйДокумент) Тогда
			Результат.ИсправленныйДокумент = Выборка.ИсправленныйДокумент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДокументИсправление) Тогда
			Результат.Исправлен = Истина;
			Результат.ДокументИсправление = Выборка.ДокументИсправление;
			Результат.ПредставлениеСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 исправлен документом %2.';
					|en = 'Document%1 is corrected by document%2.'"),
				Выборка.ИсправленныйПредставление,	Выборка.ИсправляющийПредставление);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьБлокировкуИзмененияОбъектаФормы(КоллекцияБлокировок, СсылкаНаОбъект) Экспорт
	
	ВозможностиИсправления = ВозможностиИсправления(СсылкаНаОбъект);
	Если ВозможностиИсправления.Исправление Или ВозможностиИсправления.Сторнирование Тогда
		
		СведенияОбИсправлении = СведенияОбИсправленииДокумента(СсылкаНаОбъект, ВозможностиИсправления);
		Если СведенияОбИсправлении.Исправлен Тогда
			
			БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта(
				"ИсправлениеДокументовЗарплатаКадры",
				НСтр("ru = 'Документ исправлен, редактирование запрещено.';
					|en = 'The document is corrected, editing is prohibited.'"),
				Ложь, НСтр("ru = 'Документ исправлен, повторное исправление возможно в форме исправляющего документа';
							|en = 'The document is corrected, you can correct it again in the correcting document form'"));
			
			КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
			
		ИначеЕсли СведенияОбИсправлении.Сторнирован Тогда
			
			БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта(
				"ИсправлениеДокументовЗарплатаКадры",
				НСтр("ru = 'Документ сторнирован, редактирование запрещено.';
					|en = 'The document is reversed, editing is prohibited.'"),
				Ложь, НСтр("ru = 'Документ сторнирован, перейдите в форму сторнирующего документа';
							|en = 'Document is reversed, go to the reversing document form'"));
			
			КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция РеквизитыИсправляемогоДокумента() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ИсправленныйДокумент");
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыИсправляемогоРасчетногоДокумента() Экспорт
	
	Реквизиты = РеквизитыИсправляемогоДокумента();
	Реквизиты.Вставить("ПериодРегистрации");
	Реквизиты.Вставить("Организация");
	Возврат Реквизиты;
	
КонецФункции

Функция ПараметрыИсправляемогоДокумента(ИсправляемыйДокумент, СвойстваДокумента) Экспорт
	
	Параметры = НовыйПараметрыИсправляемогоДокумента();
	Параметры.Ссылка = ИсправляемыйДокумент;
	ЗаполнитьЗначенияСвойств(Параметры, СвойстваДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	Параметры.ВыполнилДоначисление = ЕстьПерерасчеты(ИсправляемыйДокумент)
		Или НайтиИсправленныйВПрошломПериоде(ИсправляемыйДокумент) <> Неопределено;
		
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыСторнируемогоДокумента(СторнируемыйДокумент, СвойстваДокумента) Экспорт
	
	Параметры = НовыйПараметрыИсправляемогоДокумента();
	Параметры.Ссылка = СторнируемыйДокумент;
	Параметры.Вставить("ДатаВыплаты", Неопределено);
	Параметры.Вставить("ПолноеИмя", СторнируемыйДокумент.Метаданные().ПолноеИмя());
	Параметры.Вставить("ТаблицыНачислений", Новый Массив);
	Параметры.Вставить("НачисленияСДатойНачала", Истина);
	Параметры.Вставить("НачислениеДокумента", Неопределено);
	Параметры.Вставить("РаспределениеНачисленийВТаблицах", Истина);
	Параметры.Вставить("ЗачетНормыВремени", Истина);
	Параметры.Вставить("ЭЛНКарантинПоКоронавирусу", Ложь);
	Параметры.Вставить("ЭтоПрочиеДоходы", Ложь);
	
	ЗаполнитьЗначенияСвойств(Параметры, СвойстваДокумента);

	Если Параметры.НачислениеДокумента <> Неопределено Тогда
		Параметры.ЗачетНормыВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НачислениеДокумента, "ЗачетНормыВремени");
	КонецЕсли;
	
	Если Параметры.ДатаВыплаты = Неопределено И ЗначениеЗаполнено(Параметры.ПериодРегистрации) Тогда
		Параметры.ДатаВыплаты = КонецМесяца(Параметры.ПериодРегистрации);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйОписаниеТаблицыНачислений() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы", "");
	Описание.Вставить("ИмяПоляВидРасчета");
	Описание.Вставить("ВидРасчетаЗначение");
	Описание.Вставить("ИмяПоляИдентификаторСтрокиВидаРасчета");
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьДанныеДляВременнойРегистрации(ДанныеДляПроведения, Форма) Экспорт
	
	ДанныеДляПроведения.Вставить("ИсправленныйДокумент", Неопределено);
	ПараметрыИсправленного = Неопределено;
	Если ИсправлениеДокументовЗарплатаКадрыКлиентСервер.ЭтоИсправление(Форма, ПараметрыИсправленного) Тогда
		ДанныеДляПроведения.ИсправленныйДокумент = ПараметрыИсправленного.Ссылка;
	КонецЕсли;
	
КонецПроцедуры	

// Переносит сторно записи из указанного набора записей в ДополнительныеСвойства.
// Запись отложенных строк осуществляется при вызове:
// ПроведениеРасширенныйСервер.ВыполнитьЗапланированныеКорректировкиДвижений()
Процедура ОтложитьЗаписьСторно(Движения, ИмяРегистра, ПараметрыИсправления) Экспорт
	
	Если Не ПараметрыИсправления.ИсправлениеВТекущемПериоде Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Движения[ИмяРегистра];
	
	Строки = Новый Массив;
	Для Каждого Строка Из НаборЗаписей Цикл
		Если Строка.Сторно Тогда
			Строки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
    НаборЗаписей.ДополнительныеСвойства.Вставить("ОтложенныеСторноЗаписи", НаборЗаписей.Выгрузить(Строки));
	
	Для Каждого Строка Из Строки Цикл
		НаборЗаписей.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из процедуры ОбработкаЗаполнения документа в случае отсутствия кэша формы (в сценариях автоматизации).
//   Добавляет в ДанныеЗаполнения параметры используемые в процедуре СкопироватьДокумент.
//
// Параметры:
//   ДанныеЗаполнения     - Структура
//   ИсправляемыйДокумент - ДокументСсылка
//
Процедура ДополнитьДанныеЗаполненияПоИсправляемомуДокументу(ДанныеЗаполнения, ИсправляемыйДокумент) Экспорт
	Если Не ВозможностиИсправления(ИсправляемыйДокумент).ИсправлениеТекущимПериодом Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсправляемого = ИсправлениеДокументовЗарплатаКадрыВызовСервера.ПрочитатьПараметрыИсправленногоДокумента(
		ИсправляемыйДокумент);
	
	ПроведенаВыплатаЗарплаты = Неопределено;
	ПроизведеноОтражение     = Неопределено;
	ИсправлениеДокументовЗарплатаКадрыВызовСервера.ЗаполнитьВыплатаПроизводиласьОтражениеВУчетеПроизводилось(
		ПараметрыИсправляемого.Организация,
		ИсправляемыйДокумент,
		ПараметрыИсправляемого.ПериодРегистрации,
		ПроведенаВыплатаЗарплаты,
		ПроизведеноОтражение);
	
	Если Не(ПроведенаВыплатаЗарплаты Или ПроизведеноОтражение) Тогда
		ДанныеЗаполнения.Вставить("ДопустимоИсправлениеВТекущемПериоде", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВозможностиИсправления(ДокументСсылка)
	
	Результат = Новый Структура();
	Результат.Вставить("Редактирование",             Ложь); // можно изменять, не обязательно рекомендовать исправление
	Результат.Вставить("Исправление",                Ложь); // поддерживается исправление
	Результат.Вставить("ИсправлениеТекущимПериодом", Ложь); // возможно исправление в текущем периоде
	Результат.Вставить("Сторнирование",              Ложь); // поддерживается сторнирование
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат.Редактирование = 
		Метаданные.ОпределяемыеТипы.ДокументОснованиеЗарплатыКВыплате.Тип.СодержитТип(ТипДокумента);
	Результат.Исправление =
		ДокументСсылка.Метаданные().Реквизиты.Найти("ИсправленныйДокумент") <> Неопределено;
	Результат.ИсправлениеТекущимПериодом = 
		Результат.Исправление 
		И ВозможноИсправлениеТекущимПериодом(ДокументСсылка);
	Результат.Сторнирование =
		Документы.СторнированиеНачислений.ТипыДокументовСторнируемыхИнтерактивно().СодержитТип(ТипДокумента);
		
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция ВозможноИсправлениеТекущимПериодом(Документ) Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ДокументИсправляемыйВТекущемПериоде.Тип.СодержитТип(ТипЗнч(Документ))
КонецФункции

Функция ВыполнитьПервыйШагШагПоискаИсправленныхДокументов(Запрос, ИмяДокумента)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.ИсправленныйДокумент
	|ПОМЕСТИТЬ ВТШага0
	|ИЗ
	|	Документ.#ИмяДокумента# КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТШага0.Ссылка
	|ИЗ
	|	ВТШага0 КАК ВТШага0
	|ГДЕ
	|	ВТШага0.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.#ИмяДокумента#.ПустаяСсылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяДокумента#", ИмяДокумента);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ВыполнитьШагПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента)
	
	ТекстЗапросаШага = 
	"ВЫБРАТЬ
	|	ТаблицаПредыдущегоШага.Ссылка,
	|	Документ.ИсправленныйДокумент
	|ПОМЕСТИТЬ #ТаблицаТекущегоШага#
	|ИЗ
	|	Документ.#ИмяДокумента# КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТШага# КАК ТаблицаПредыдущегоШага
	|		ПО Документ.Ссылка = ТаблицаПредыдущегоШага.ИсправленныйДокумент
	|ГДЕ
	|	Документ.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.#ИмяДокумента#.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаШага.Ссылка
	|ИЗ
	|	#ТаблицаТекущегоШага# КАК ТаблицаШага";
	
	ТекстЗапросаШага = СтрЗаменить(ТекстЗапросаШага, "#ИмяДокумента#", ИмяДокумента);
	
	Запрос.Текст = ТекстЗапросаШага;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТШага#", "ВТШага" + Строка(НомерШага - 1));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаТекущегоШага#", "ВТШага" + НомерШага);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ИмяВТИсправленныеДокументы(ИмяДокумента, ИмяВТ = Неопределено)
	
	ИмяВТИсправленныеДокументы = ИмяВТ;
	
	Если ИмяВТИсправленныеДокументы = Неопределено Тогда
		ИмяВТИсправленныеДокументы = "ВТИсправленныеДокументы" + ИмяДокумента;
	КонецЕсли;
	
	Возврат ИмяВТИсправленныеДокументы;

КонецФункции

Функция ОбъединитьТаблицыШаговПоискаИсправленныхДокументов(Знач НомерШага, Запрос, ИмяДокумента, ИмяВТ)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТШага.Ссылка,
	|	ВТШага.ИсправленныйДокумент
	|ПОМЕСТИТЬ #ИмяВТ#
	|ИЗ
	|	ВТШага0 КАК ВТШага";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТ#", ИмяВТИсправленныеДокументы(ИмяДокумента, ИмяВТ));
	
	ТекстЗапроса = " 
	|	ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ВТШага.Ссылка, ВТШага.ИсправленныйДокумент ИЗ #ВТШага# КАК ВТШага";
	
	Пока НомерШага > 0 Цикл
		
		Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗапроса, "#ВТШага#", "ВТШага" + Строка(НомерШага));
		
		НомерШага = НомерШага - 1;
		
	КонецЦикла;
	
	Запрос.Выполнить();

КонецФункции 

Функция УничтожитьВременныеТаблицыШаговПоиска(Знач НомерШага, Запрос)
	
	Запрос.Текст = "";
	
	ТекстЗапроса = "Уничтожить #ВТШага#;";
	
	Пока НомерШага >= 0 Цикл
			
		Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗапроса, "#ВТШага#", "ВТШага" + Строка(НомерШага));
		
		НомерШага = НомерШага - 1;
		
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст);
	
	Запрос.Выполнить();

КонецФункции 

// Обработчик подписки на событие "ОтменитьИсправлениеВТекущемПериоде".
//
Процедура ОтменитьИсправлениеВТекущемПериоде(Источник, Отказ) Экспорт
	
	Реквизиты = Источник.Метаданные().Реквизиты;
	
	ИмяРеквизита = "ИсправленныйДокумент";
	Если Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		ИмяРеквизита = "СторнируемыйДокумент";
		Если Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			ИмяРеквизита = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИсправленныйДокумент = ?(ИмяРеквизита = Неопределено, Неопределено, Источник[ИмяРеквизита]);
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент)
		И ВозможностиИсправления(ИсправленныйДокумент).ИсправлениеТекущимПериодом Тогда
		РегистрыРасчета.Начисления.ПриОтменеИсправленияВТекущемПериоде(ИсправленныйДокумент);
	Иначе
		ПерерасчитанныеДокументы = Новый Массив;
		ИмяТаблицы = "НачисленияПерерасчет";
		Если Источник.Метаданные().ТабличныеЧасти.Найти(ИмяТаблицы) <> Неопределено Тогда
			Для Каждого Строка Из Источник[ИмяТаблицы] Цикл
				Если Строка.Сторно И ПерерасчитанныеДокументы.Найти(Строка.СторнируемыйДокумент) = Неопределено Тогда
					ПерерасчитанныеДокументы.Добавить(Строка.СторнируемыйДокумент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для Каждого ПерерасчитанныйДокумент Из ПерерасчитанныеДокументы Цикл
			РегистрыРасчета.Начисления.ПриОтменеИсправленияВТекущемПериоде(ПерерасчитанныйДокумент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтражениеВУчетеПроизводилось(Организация, ПериодРегистрации) Экспорт
	
	БылоОтражениеЗарплатыВБухучете = Ложь;
	
	ИмяДокументаОтраженияВБухучете = Неопределено;
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
			Модуль.ЗаполнитьИмяДокументаОтраженияВБухучете(ИмяДокументаОтраженияВБухучете);
		КонецЕсли;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
			Модуль.ЗаполнитьИмяДокументаОтраженияВБухучете(ИмяДокументаОтраженияВБухучете);
		КонецЕсли;
	КонецЕсли;
	// Если имя документа удалось выяснить, выполняем запрос.
	Если ИмяДокументаОтраженияВБухучете <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	#ИмяДокументаОтраженияВБухучете КАК ОтражениеЗарплатыВБухучете
			|ГДЕ
			|	ОтражениеЗарплатыВБухучете.Организация = &Организация
			|	И ОтражениеЗарплатыВБухучете.Проведен
			|	И ОтражениеЗарплатыВБухучете.ПериодРегистрации = &ПериодРегистрации";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяДокументаОтраженияВБухучете", ИмяДокументаОтраженияВБухучете);
		
		УстановитьПривилегированныйРежим(Истина);
		БылоОтражениеЗарплатыВБухучете = Не Запрос.Выполнить().Пустой();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат БылоОтражениеЗарплатыВБухучете;
	
КонецФункции

Функция ЕстьПерерасчеты(Документ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("НачисленияПерерасчет") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачисленияПерерасчет.Ссылка
		|ИЗ #Документ_НачисленияПерерасчет КАК НачисленияПерерасчет
		|ГДЕ НачисленияПерерасчет.Ссылка = &Документ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Документ_", МетаданныеДокумента.ПолноеИмя() + ".");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция НайтиИсправленныйВПрошломПериоде(Документ)
	
	ПериодРегистрации = Неопределено;
	ПериодРегистрацииИсправляющего = Неопределено;
	ЭлементыЦепочки = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийДокумент = Документ;
	Пока ЗначениеЗаполнено(ТекущийДокумент) Цикл
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ТекущийДокумент);
		Свойства = МенеджерДокумента.СвойстваИсправляемогоДокумента(ТекущийДокумент);
		
		Если Свойства.Свойство("ПериодРегистрации", ПериодРегистрации) Тогда
			Если ПериодРегистрацииИсправляющего <> Неопределено
				И Свойства.ПериодРегистрации < ПериодРегистрацииИсправляющего Тогда
				Возврат ТекущийДокумент;
			КонецЕсли;
			ПериодРегистрацииИсправляющего = ПериодРегистрации;
		КонецЕсли;
		
		Если ЭлементыЦепочки.Найти(Свойства.ИсправленныйДокумент) = Неопределено Тогда
			ЭлементыЦепочки.Добавить(ТекущийДокумент);
			ТекущийДокумент = Свойства.ИсправленныйДокумент;
		Иначе
			Прервать; // Предотвращение зацикливания.
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйПараметрыИсправляемогоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("ПериодРегистрации", Неопределено);
	Результат.Вставить("ВыполнилДоначисление", Ложь);
	Результат.Вставить("ДокументРассчитан", Неопределено);
	Результат.Вставить("Организация", Неопределено);
	Возврат Результат;
	
КонецФункции

#КонецОбласти
