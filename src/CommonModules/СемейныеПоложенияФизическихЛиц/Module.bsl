#Область СлужебныйПрограммныйИнтерфейс

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СостоянияВБракеФизическихЛиц", "Период", "КадровыйУчет", "");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.РодственникиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияВБракеФизическихЛиц, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.РодственникиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|Справочник.РодственникиФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СостоянияВБракеФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СостоянияВБракеФизическихЛиц.Изменение.ГруппыФизическихЛиц";
	
КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf37-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.СостояниеВБраке);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfdb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.РодственникиФизическихЛиц);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных, ИсключаемыеПоля = Неопределено) Экспорт
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоДетей";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КоличествоДетей";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоИждивенцев";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КоличествоИждивенцев";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "КоличествоРодственников";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КоличествоРодственников";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СостояниеВБраке";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СостояниеВБраке.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СостояниеВБраке";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СостояниеВБракеПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СостояниеВБракеДатаВнесенияСведений";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
КонецПроцедуры

// Сведения о составах семей

Функция ДобавитьПолеСведенийОСоставеСемейФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСоставеСемейФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСоставеСемейФизическихЛиц", Истина);
		
		ПутьКДанным = "	СоставыСемей." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСоставеСемейФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОСоставеСемейФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаПериоды.Период КАК Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РодственникиФизическихЛиц.Ссылка) КАК КоличествоРодственников,
		|	0 КАК КоличествоИждивенцев,
		|	0 КАК КоличествоДетей,
		|	0 КАК КоличествоДетейДляТ2
		|ПОМЕСТИТЬ ВТСведенияОСоставеСемейФизическихЛицПредварительно
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|		ПО (РодственникиФизическихЛиц.Владелец = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|			И (РодственникиФизическихЛиц.ДатаРождения <= ФизическиеЛицаПериоды.Период)
		|{ГДЕ
		|	РодственникиФизическихЛиц.Владелец.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	0,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РодственникиФизическихЛиц.Ссылка),
		|	0,
		|	0
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|		ПО (РодственникиФизическихЛиц.Владелец = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|			И (РодственникиФизическихЛиц.НаИждивении)
		|			И (РодственникиФизическихЛиц.ДатаРождения <= ФизическиеЛицаПериоды.Период)
		|{ГДЕ
		|	РодственникиФизическихЛиц.Владелец.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	0,
		|	0,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РодственникиФизическихЛиц.Ссылка),
		|	0
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтепениРодстваФизическихЛиц КАК СтепениРодстваФизическихЛиц
		|			ПО РодственникиФизическихЛиц.СтепеньРодства = СтепениРодстваФизическихЛиц.Ссылка
		|		ПО (РодственникиФизическихЛиц.Владелец = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|			И (РАЗНОСТЬДАТ(РодственникиФизическихЛиц.ДатаРождения, ФизическиеЛицаПериоды.Период, ГОД) < 18)
		|			И (РодственникиФизическихЛиц.ДатаРождения <= ФизическиеЛицаПериоды.Период)
		|ГДЕ
		|	ЕСТЬNULL(СтепениРодстваФизическихЛиц.Код, """") В (""05"", ""06"", ""42"", ""43"")
		|{ГДЕ
		|	РодственникиФизическихЛиц.Владелец.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	0,
		|	0,
		|	0,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РодственникиФизическихЛиц.Ссылка)
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтепениРодстваФизическихЛиц КАК СтепениРодстваФизическихЛиц
		|			ПО РодственникиФизическихЛиц.СтепеньРодства = СтепениРодстваФизическихЛиц.Ссылка
		|		ПО (РодственникиФизическихЛиц.Владелец = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|			И (РАЗНОСТЬДАТ(РодственникиФизическихЛиц.ДатаРождения, ФизическиеЛицаПериоды.Период, ГОД) < 18)
		|			И (РодственникиФизическихЛиц.ДатаРождения <= ФизическиеЛицаПериоды.Период)
		|ГДЕ
		|	ЕСТЬNULL(СтепениРодстваФизическихЛиц.Код, """") В (""05"", ""06"", ""42"", ""43"")
		|	И НЕ РодственникиФизическихЛиц.СкрыватьВТ2
		|{ГДЕ
		|	РодственникиФизическихЛиц.Владелец.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОСоставеСемейФизическихЛицПредварительно.Период КАК Период,
		|	СведенияОСоставеСемейФизическихЛицПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(СведенияОСоставеСемейФизическихЛицПредварительно.КоличествоРодственников) КАК КоличествоРодственников,
		|	СУММА(СведенияОСоставеСемейФизическихЛицПредварительно.КоличествоИждивенцев) КАК КоличествоИждивенцев,
		|	СУММА(СведенияОСоставеСемейФизическихЛицПредварительно.КоличествоДетей) КАК КоличествоДетей,
		|	СУММА(СведенияОСоставеСемейФизическихЛицПредварительно.КоличествоДетейДляТ2) КАК КоличествоДетейДляТ2
		|ПОМЕСТИТЬ ВТСведенияОСоставеСемейФизическихЛиц
		|ИЗ
		|	ВТСведенияОСоставеСемейФизическихЛицПредварительно КАК СведенияОСоставеСемейФизическихЛицПредварительно
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОСоставеСемейФизическихЛицПредварительно.Период,
		|	СведенияОСоставеСемейФизическихЛицПредварительно.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСведенияОСоставеСемейФизическихЛицПредварительно";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ФизическиеЛицаПериоды.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ФизическиеЛицаПериоды.Период", "ФизическиеЛицаПериоды." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);

	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСоставеСемейФизическихЛиц КАК СоставыСемей
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СоставыСемей.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СоставыСемей.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСоставеСемейФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОСоставеСемейФизическихЛиц(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КоличествоДетей")
		Или ИмяПоля = ВРег("КоличествоДетейДляТ2")
		Или ИмяПоля = ВРег("КоличествоИждивенцев")
		Или ИмяПоля = ВРег("КоличествоРодственников");
		
КонецФункции

// Сведения о состояниях в браке.

Функция ДобавитьПолеСведенийОСостоянияхВБракеФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСостоянияхВБракеФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСостоянияхВБракеФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСостоянияхВБракеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОСостоянияхВБракеФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОСостоянияхВБракеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСостоянияхВБракеФизическихЛиц КАК СостоянияВБракеФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СостоянияВБракеФизическихЛиц.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СостоянияВБракеФизическихЛиц.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСостоянияхВБракеФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("СостояниеВБракеПериодРегистрации")
		Или ИмяПоля = ВРег("СемейноеПоложение")
		Или ИмяПоля = ВРег("СостояниеВБраке");
	
КонецФункции

Функция ПутьКДаннымСведенийОСостоянияхВБракеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("СостояниеВБракеПериодРегистрации") Тогда
		ПутьКДанным = "	СостоянияВБракеФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("СемейноеПоложение")
		Или ИмяПоля = ВРег("СостояниеВБраке") Тогда
		ПутьКДанным = "	СостоянияВБракеФизическихЛиц.СостояниеВБраке";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОСостоянияхВБракеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянияхВБракеФизическихЛиц = "ВТСведенияОСостоянияхВБракеФизическихЛиц") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СостоянияВБракеФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СостоянияВБракеФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСостоянияхВБракеФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СостояниеВБраке) 
		И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтепениРодстваФизическихЛиц) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "СемейныеПоложенияФизическихЛиц.ЗаполнитьКлассификаторы";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.81";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ffa7c454-eb0f-47ef-92f1-a34006fb8ac1");
	Обработчик.Процедура = "Справочники.РодственникиФизическихЛиц.ЗаполнитьФИОСлужебныеСБуквамиЕЁ";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебные данные справочника ""Родственники сотрудников"".';
									|en = 'Заполняет служебные данные справочника ""Родственники сотрудников"".'");
	
КонецПроцедуры

Процедура ЗаполнитьКлассификаторы() Экспорт
	
	Справочники.СостояниеВБраке.НачальноеЗаполнение();
	Справочники.СтепениРодстваФизическихЛиц.НачальноеЗаполнение();
	
КонецПроцедуры

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	МетаданныеОбъекта = Метаданные.Справочники.РодственникиФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.СтандартныеРеквизиты.Владелец.Имя;
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.СтандартныеРеквизиты.Наименование.Имя);
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.ДатаРождения.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "СоставСемьи";
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц") Тогда
		// Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц
		НоваяСтрока = ЗависимыеДанные.Добавить();
		НоваяСтрока.ВедущиеМетаданные = Метаданные.Справочники.РодственникиФизическихЛиц;
		НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СводныеДанныеФизическихЛиц

#Область СоставСемьи

Процедура ОбновитьСтроковыеСведенияФизическогоЛица(СтроковыеСведения, ПричинаОбновления) Экспорт
	
	ОбновлятьВсеСведения = ПричинаОбновления = Неопределено;
	Если ПричинаОбновления = "СоставСемьи"
		Или ОбновлятьВсеСведения Тогда
		ОбновитьСоставСемьи(СтроковыеСведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСоставСемьи(СтроковыеСведения)
	
	СтроковыеСведения.СоставСемьи = СтрокаСоставСемьи(СтроковыеСведения.ФизическоеЛицо);
	
КонецПроцедуры

Функция СтрокаСоставСемьи(ФизическоеЛицо)
	СтрокаСоставСемьи = "";
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РодственникиФизическихЛиц.СтепеньРодства КАК СтепеньРодства,
	|	РодственникиФизическихЛиц.Наименование КАК ФИО,
	|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
	|ГДЕ
	|	РодственникиФизическихЛиц.Владелец = &ФизическоеЛицо
	|	И НЕ РодственникиФизическихЛиц.СкрыватьВТ2
	|	И НЕ РодственникиФизическихЛиц.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РодственникиФизическихЛиц.ДатаРождения УБЫВ";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаСоставСемьи = СтрокаСоставСемьи + ПредставлениеЧленаСемьи(Выборка) + Символы.ПС;
		КонецЦикла;	
	КонецЕсли;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаСоставСемьи);
	
	Возврат СтрокаСоставСемьи;
КонецФункции

Функция ПредставлениеЧленаСемьи(ЧленСемьи)
	
	Если ЗначениеЗаполнено(ЧленСемьи.СтепеньРодства) Тогда
		
		ПредставлениеЧленаСемьи = "%1: %2";
		ПредставлениеЧленаСемьи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеЧленаСемьи, ЧленСемьи.СтепеньРодства, ЧленСемьи.ФИО);
		
	Иначе
		
		ПредставлениеЧленаСемьи = "%1";
		ПредставлениеЧленаСемьи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеЧленаСемьи, ЧленСемьи.ФИО);
		
	КонецЕсли;
	
	Возврат ПредставлениеЧленаСемьи;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСДополнительнымиФормами

Процедура СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ, ТекущийОбъект) Экспорт

	Если ИмяФормы = "ОбщаяФорма.ФизическиеЛицаСемья" Тогда
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "СостоянияВБракеФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузкаДанных

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	
	Типы.Добавить(Метаданные.Справочники.СостояниеВБраке);
	Типы.Добавить(Метаданные.Справочники.СтепениРодстваФизическихЛиц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбъединениеДублей

// Параметры:
//  ОписанияСправочников - Массив из Структура
Процедура ДополнитьОписанияСправочниковПриОбъединенииДублей(ОписанияСправочников) Экспорт
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	ОписанияСправочников.Добавить(МодульОбработки.НовоеОписаниеСправочника(
		Метаданные.Справочники.РодственникиФизическихЛиц.Имя));
		
КонецПроцедуры

// Параметры:
//  ОписанияРегистров - Массив из Структура
Процедура ДополнитьОписанияРегистровСведенийПриОбъединенииДублей(ОписанияРегистров) Экспорт
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.СостоянияВБракеФизическихЛиц.Имя));
		
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", СтрокиДанных.ВыгрузитьКолонку("ЛичныеДанныеФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РодственникиФизическихЛиц.Владелец КАК ФизическоеЛицо,
		|	РодственникиФизическихЛиц.СтепеньРодства КАК СтепеньРодства,
		|	РодственникиФизическихЛиц.Наименование КАК ФИОРодственника,
		|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРожденияРодственника
		|ИЗ
		|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|ГДЕ
		|	РодственникиФизическихЛиц.Владелец В(&ФизическиеЛица)
		|	И НЕ РодственникиФизическихЛиц.СкрыватьВТ2
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	РодственникиФизическихЛиц.ДатаРождения УБЫВ";
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаПоСоставуСемьи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоСоставуСемьи.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока ВыборкаПоСоставуСемьи.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("СтепеньРодства", ВыборкаПоСоставуСемьи.СтепеньРодства);
			СтруктураСтроки.Вставить("ФИОРодственника", ВыборкаПоСоставуСемьи.ФИОРодственника);
			СтруктураСтроки.Вставить("ГодРожденияРодственника", Формат(ВыборкаПоСоставуСемьи.ДатаРожденияРодственника, "ДФ=гггг"));
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(ВыборкаПоСоставуСемьи.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияСоставСемьи", ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ИнициализироватьОтчетТ2(ОтчетОбъект) Экспорт
	
	Для Каждого НаборДанных Из ОтчетОбъект.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление",
				"ЗНАЧЕНИЕ(Справочник.СостояниеВБраке.ПустаяСсылка) КАК СостояниеВБраке,
				|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК СостояниеВБраке,",
				"КадровыеДанныеСотрудников.СостояниеВБраке КАК СостояниеВБраке,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК СостояниеВБракеКод,",
				"КадровыеДанныеСотрудников.СостояниеВБраке.Код КАК СостояниеВБракеКод,");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
