////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РасчетДолейСтоимости

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//  ИмяТЧ	- Строка	- имя табличной части.
//  СпособРаспределенияЗатратНаВыходныеИзделия - ПеречислениеСсылка.СпособыРаспределенияЗатратНаВыходныеИзделия -
// 
// Возвращаемое значение:
//		Структура - структура со следующими ключами:
//			*ИмяТЧ - Строка - имя табличной части с выходными изделиями
//			*ЕстьПолеОтменено - Булево - Истина, если в табличной части предусмотрена отмена строк
//			*СпособРаспределенияЗатратНаВыходныеИзделия - ПеречислениеСсылка.СпособыРаспределенияЗатратНаВыходныеИзделия -
//				способ распределения затрат на выходные изделия
//			*ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия - Строка - Имя поля к способу распределения
//				в табличной части, если в документе предусмотрены разные способы распределения
//			*РассчитыватьПолеДоляСтоимостиПроцент - Булево - Истина, если в табличной части требуется рассчитывать процент
//			*РассчитыватьПризнакЕстьОшибкиЗаполнения - Булево - Истина, если в табличной части предусмотрен индикатор ошибки заполнения
//			*РассчитыватьПризнакДоляСтоимостиОбязательна - Булево - Истина, если требуется рассчитывать обязательность заполнения поля "Доля стоимости"
//			*ПолеГруппировкиЗатрат - Строка - Имя поля, идентифицирующее группировку затрат в рамках документа
//			*ПолеПредставленияГруппировкиЗатрат - Строка - Имя поля заголовка группировки затрат
//			*ДоляСтоимостиДругихДокументовВГруппировке - Число - Доля стоимости других документов,
//				если по одной группировке предусмотрено несколько документов
//			*ПоляСвязи - Строка - Поля идентифицирующие одинаковые позиции в рамках группировки затрат
//				(для одинаковых позиций доля может не указываться, в качестве доли используется количество)
//			*ТолькоПросмотр - Булево - признак того, что доли стоимости в документе можно только просматривать (значение по умолчанию ЛОЖЬ).
//			*ПараметрыЗаполненияЦены- Структура - структура, используемая для заполнения цен в табличной части документа:
//				* Дата - Дата - дата документа.
//				* Валюта - СправочникСсылка.Валюты - валюта документа.
//				
//
Функция ПараметрыРаспределенияЗатратНаВыходныеИзделия(ИмяТЧ, СпособРаспределенияЗатратНаВыходныеИзделия) Экспорт
	
	ПараметрыРаспределенияЗатрат = Новый Структура;
	
	ПараметрыРаспределенияЗатрат.Вставить("ИмяТЧ", ИмяТЧ);
	ПараметрыРаспределенияЗатрат.Вставить("ЕстьПолеОтменено", Ложь);
	ПараметрыРаспределенияЗатрат.Вставить("АвтоРасчетЛюбойХарактеристики", Ложь);
	ПараметрыРаспределенияЗатрат.Вставить("ЕстьПараметризацияРесурснойСпецификации", Ложь);
	
	ПараметрыРаспределенияЗатрат.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", СпособРаспределенияЗатратНаВыходныеИзделия);
	ПараметрыРаспределенияЗатрат.Вставить("ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия", "");
	
	ПараметрыРаспределенияЗатрат.Вставить("РассчитыватьПолеДоляСтоимостиПроцент", Ложь);
	ПараметрыРаспределенияЗатрат.Вставить("РассчитыватьПризнакЕстьОшибкиЗаполнения", Ложь);
	ПараметрыРаспределенияЗатрат.Вставить("РассчитыватьПризнакДоляСтоимостиОбязательна", Ложь);
	
	ПараметрыРаспределенияЗатрат.Вставить("ПолеГруппировкиЗатрат", "");
	ПараметрыРаспределенияЗатрат.Вставить("ПолеПредставленияГруппировкиЗатрат", "");
	ПараметрыРаспределенияЗатрат.Вставить("ДоляСтоимостиДругихДокументовВГруппировке");
	
	ПараметрыРаспределенияЗатрат.Вставить("ПоляСвязи", "Номенклатура,Характеристика");
	ПараметрыРаспределенияЗатрат.Вставить("ТолькоПросмотр", Ложь);

	ПараметрыРаспределенияЗатрат.Вставить("ПараметрыЗаполненияДолейСтоимости", 
											Новый Структура("Дата, Валюта", 
											Дата("00010101"), 
											ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка")));
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

#КонецОбласти

#Область РаспределениеПроизводственныхЗатрат

// Возвращает текст сводной информации о движении материала в цеховой кладовой за отчетный период.
//
// Параметры:
//  Параметры	 - Структура	 - Структура с полями ВходящийОстаток, НачальныйОстаток, Поступило, Передано и ЕдиницаИзмерения.
// 
// Возвращаемое значение:
//   - ФорматированнаяСтрока
//
Функция РасшифровкаВходящегоОстатка(Параметры) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если Параметры.ВходящийОстаток = 0
		И Параметры.НачальныйОстаток = 0
		И Параметры.Поступило = 0
		И Параметры.Передано = 0 Тогда
		Возврат НСтр("ru = 'Движения номенклатуры не обнаружено.';
					|en = 'Product movements are not found.'");
	Иначе
		ШаблонРасшифровки = НСтр("ru = 'Входящий остаток (<b>%1</b> %2) =';
								|en = 'Provided qty (<b>%1</b> %2) ='");
	КонецЕсли;
	
	
	Если Не Параметры.НачальныйОстаток = 0 Тогда
		ШаблонРасшифровки = ШаблонРасшифровки + " " + НСтр("ru = 'остаток на начало месяца (<b>%3</b> %2)';
															|en = 'balance as of the beginning of the month (<b>%3</b> %2)'");
	КонецЕсли;
	
	Если Не Параметры.Поступило = 0 Тогда
		ШаблонРасшифровки = ШаблонРасшифровки + ?(Параметры.НачальныйОстаток = 0, " ", " + ")
												+ НСтр("ru = 'поступило (<b>%4</b> %2)';
														|en = 'received (<b>%4</b> %2)'");
	КонецЕсли;
	
	Если Не Параметры.Передано = 0 Тогда
		ШаблонРасшифровки = ШаблонРасшифровки + ?(Параметры.НачальныйОстаток = 0 И Параметры.Поступило = 0, " ", " - ")
												+ НСтр("ru = 'передано (<b>%5</b> %2)';
														|en = 'transferred (<b>%5</b> %2)'");
	КонецЕсли;
	
	ШаблонРасшифровки = ШаблонРасшифровки + ".";
	ТекстРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонРасшифровки,
			Параметры.ВходящийОстаток,
			Параметры.ЕдиницаИзмерения,
			Параметры.НачальныйОстаток,
			Параметры.Поступило,
			Параметры.Передано);
	
	Возврат СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстРасшифровки);;
	
КонецФункции

#КонецОбласти

#Область Заполнение

// Заполняет значение реквизита в строке ТЧ с зависимости от значения другого реквизита.
//
// Параметры:
//  ДанныеТЧ            - ДанныеФормыКоллекция - Обрабатываемые строки, так же может быть одна строки или массив строк
//	ИмяРеквизита        - Строка               - имя заполняемого реквизитов
//  НастройкиЗаполнения - Соответствие из КлючИЗначение:
//  * Ключ     - Строка - Имя проверяемого реквизита ТЧ
//  * Значение - Соответствие из КлючИЗначение - Ключ: значение проверяемого реквизита
//                                               Значение: значение заполняемого реквизита.
//  ПроверитьЗаполнение - Булево               - Признак установки значение в случаи ее отсутствие
//	Заполнено           - Булево               - Принимает значение Истина при установки значения реквизита хотя бы у
//												 одной строки.
//
Процедура ЗаполнитьЗначениеРеквизита(ДанныеТЧ, ИмяРеквизита, НастройкиЗаполнения, ПроверитьЗаполнение = Ложь, Заполнено = Ложь) Экспорт
	
	Для каждого Настройка Из НастройкиЗаполнения Цикл
		Прервать;
	КонецЦикла;
	
	ИмяПроверяемогоРеквизита = Настройка.Ключ;
	ДанныеЗаполнения         = Настройка.Значение;
	
	Если ТипЗнч(ДанныеТЧ) = Тип("ДанныеФормыКоллекция")
	 Или ТипЗнч(ДанныеТЧ) = Тип("Массив") Тогда
		
	 	Для каждого СтрокаТЧ Из ДанныеТЧ Цикл
		 
			Если ПроверитьЗаполнение И ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизита]) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеРеквизита = ДанныеЗаполнения.Получить(СтрокаТЧ[ИмяПроверяемогоРеквизита]);
			
			Если ЗначениеРеквизита <> Неопределено Тогда
				СтрокаТЧ[ИмяРеквизита] = ЗначениеРеквизита;
				Заполнено              = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ПроверитьЗаполнение И ЗначениеЗаполнено(ДанныеТЧ[ИмяРеквизита]) Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеРеквизита = ДанныеЗаполнения.Получить(ДанныеТЧ[ИмяПроверяемогоРеквизита]);
		
		Если ЗначениеРеквизита <> Неопределено Тогда
			ДанныеТЧ[ИмяРеквизита] = ЗначениеРеквизита;
			Заполнено              = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводствоБезЗаказов

// Параметры формирования документов производства без заказов, распределения возвратных отходов.
// 
// Возвращаемое значение:
//  Структура - Параметры формирования документов производства без заказов:
//  * ИзделияПоСпецификации - Массив из Структура - перечень изделий, выпускаемых по спецификациям.
//  * ИзделияПоПравилу - Массив из Структура - перечень изделий, выпускаемых по правилам.
//  * ЗаполнятьАвтоматически - Булево - признак заполнения затратных частей.
//  * ПереченьДанных - Массив из Строка - перечень таблиц спецификаций.
//  * ОбъектыФормы - Структура - соответствие форм объектов.
//  * ПериодРегистрации - Дата - период регистрации.
//
Функция ПараметрыФормированияДокументовПроизводстваБезЗаказов() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИзделияПоСпецификации",		Новый Массив);
	Результат.Вставить("ИзделияПоПравилу",			Новый Массив);
	Результат.Вставить("ЗаполнятьАвтоматически",	Ложь);
	Результат.Вставить("ПереченьДанных",			Новый Массив);
	Результат.Вставить("ОбъектыФормы",				Новый Структура);
	Результат.Вставить("ПериодРегистрации",			Дата(1,1,1));
	
	Возврат Результат;
	
КонецФункции

// Структура строки изделия.
// 
// Возвращаемое значение:
//  Структура - Структура строки изделия:
// * Организация - СправочникСсылка.Организации
// * ГруппировкаЗатрат - ПеречислениеСсылка.ГруппировкиЗатратВПроизводствеБезЗаказа
// * Подразделение - СправочникСсылка.СтруктураПредприятия
// * Получатель - Неопределено
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// * Серия - СправочникСсылка.СерииНоменклатуры
// * Назначение - СправочникСсылка.Назначения
// * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности
// * МодельФормированияСтоимости - ПеречислениеСсылка.ТипыМоделейФормированияСтоимости
// * Спецификация - СправочникСсылка.РесурсныеСпецификации
// * ПравилоРаспределения - СправочникСсылка.ПравилаРаспределенияРасходов
// * НаправлениеВыпуска - ПеречислениеСсылка.ХозяйственныеОперации
// * Количество - Число
// * ОтражатьЗатратыДокументом - Булево
// * ОшибкаВНастройкахМодели - Булево
//
Функция СтруктураСтрокиИзделия() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация",                 ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Результат.Вставить("ГруппировкаЗатрат",           ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ПустаяСсылка"));
	Результат.Вставить("Подразделение",               ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Результат.Вставить("Получатель",                  Неопределено);
	Результат.Вставить("Номенклатура",                ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Характеристика",              ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	Результат.Вставить("Серия",                       ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	Результат.Вставить("Назначение",                  ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"));
	Результат.Вставить("НаправлениеДеятельности",     ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"));
	Результат.Вставить("МодельФормированияСтоимости", ПредопределенноеЗначение("Перечисление.ТипыМоделейФормированияСтоимости.ПустаяСсылка"));
	Результат.Вставить("Спецификация",                ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	Результат.Вставить("ПравилоРаспределения",        ПредопределенноеЗначение("Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка"));
	Результат.Вставить("НаправлениеВыпуска",          ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка"));
	Результат.Вставить("Количество",                  0);
	Результат.Вставить("ОтражатьЗатратыДокументом",   Ложь);
	Результат.Вставить("ОшибкаВНастройкахМодели",     Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Дроби

Функция Дробь(Знач Числитель, Знач Знаменатель) Экспорт
	
	Результат = Новый Структура("Числитель, Знаменатель, Значение");
	
	Результат.Числитель   = Числитель;
	Результат.Знаменатель = Знаменатель;
	Результат.Значение    = Числитель / Знаменатель;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РасчетДолейСтоимости

Функция СтруктураПолейДоляСтоимости() Экспорт
	
	Результат = Новый Структура("ДоляСтоимости,ДоляСтоимостиНаЕдиницу",0,0);
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДолюСтоимостиВСтроке(Строка, РезультатРасчета) Экспорт
	
	ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета, "ДоляСтоимости,ДоляСтоимостиНаЕдиницу");
	
КонецПроцедуры

Процедура РассчитатьДолюСтоимостиВСтроке(Строка, СпособРаспределенияЗатратНаВыходныеИзделия) Экспорт
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		Если СпособРаспределенияЗатратНаВыходныеИзделия = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости")
			Тогда
			Строка.ДоляСтоимости = Окр(Строка.ДоляСтоимостиНаЕдиницу * Строка.Количество, 2);
		Иначе
			Строка.ДоляСтоимости = Строка.ДоляСтоимостиНаЕдиницу * Строка.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьДолюСтоимостиВКоллекции(Коллекция, СпособРаспределенияЗатратНаВыходныеИзделия) Экспорт
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		Для каждого Строка Из Коллекция Цикл
			
			Если СпособРаспределенияЗатратНаВыходныеИзделия = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости")
				Тогда
				Строка.ДоляСтоимости = Окр(Строка.ДоляСтоимостиНаЕдиницу * Строка.Количество, 2);
			Иначе
				Строка.ДоляСтоимости = Строка.ДоляСтоимостиНаЕдиницу * Строка.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьДолюСтоимостиНаЕдиницуВСтроке(Строка, СпособРаспределенияЗатратНаВыходныеИзделия) Экспорт
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		Если СпособРаспределенияЗатратНаВыходныеИзделия = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости")
			Тогда
			Строка.ДоляСтоимостиНаЕдиницу = Окр(Строка.ДоляСтоимости / Строка.Количество, 2);
		Иначе
			Строка.ДоляСтоимостиНаЕдиницу = Строка.ДоляСтоимости / Строка.Количество;
		КонецЕсли;
		
	Иначе
		Строка.ДоляСтоимостиНаЕдиницу = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, ИсходнаяСтрока, СпособРаспределенияЗатратНаВыходныеИзделия) Экспорт
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.ДоляСтоимостиНаЕдиницу = ИсходнаяСтрока.ДоляСтоимостиНаЕдиницу;
	
	Если СпособРаспределенияЗатратНаВыходныеИзделия = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		Если НоваяСтрока.Количество + ИсходнаяСтрока.Количество = 0 Тогда
			НоваяСтрока.ДоляСтоимости = 0;
			ИсходнаяСтрока.ДоляСтоимости = 0;
		Иначе
			НоваяСтрока.ДоляСтоимости = НоваяСтрока.Количество * ИсходнаяСтрока.ДоляСтоимости / (НоваяСтрока.Количество + ИсходнаяСтрока.Количество);
			ИсходнаяСтрока.ДоляСтоимости = ИсходнаяСтрока.ДоляСтоимости - НоваяСтрока.ДоляСтоимости;
		КонецЕсли;
		
	Иначе
		
		Если СпособРаспределенияЗатратНаВыходныеИзделия = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости") Тогда
			НоваяСтрока.ДоляСтоимости = Окр(НоваяСтрока.ДоляСтоимостиНаЕдиницу * НоваяСтрока.Количество, 2);
			ИсходнаяСтрока.ДоляСтоимости = Окр(ИсходнаяСтрока.ДоляСтоимостиНаЕдиницу * ИсходнаяСтрока.Количество, 2);
		Иначе
			НоваяСтрока.ДоляСтоимости = НоваяСтрока.ДоляСтоимостиНаЕдиницу * НоваяСтрока.Количество;
			ИсходнаяСтрока.ДоляСтоимости = ИсходнаяСтрока.ДоляСтоимостиНаЕдиницу * ИсходнаяСтрока.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДоляСтоимостиРассчитывается(Строка, ПараметрыРаспределенияЗатрат) Экспорт
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		СпособРаспределенияЗатратНаВыходныеИзделия = ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия;
	Иначе
		СпособРаспределенияЗатратНаВыходныеИзделия = Строка[ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия)
		И СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СКД

Функция СвернутьКолонку(Знач Массив, Знач ПустоеЗначение = Неопределено) Экспорт
	
	Массив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Массив, NULL);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Массив, Неопределено);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Массив, ПустоеЗначение);
	
	Возврат Массив;
	
КонецФункции

Функция СвернутьКолонкуВСтроку(Знач Массив, Знач КоличествоВыводимыхЭлементов = 1) Экспорт
	
	СписокДляВывода = Новый Массив();
	Массив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
	
	Если Массив.Количество() > 0 Тогда
		
		Если КоличествоВыводимыхЭлементов <> Неопределено Тогда
			Граница = Мин(КоличествоВыводимыхЭлементов - 1, Массив.ВГраница());
		Иначе
			Граница = Массив.ВГраница();
		КонецЕсли;
		
		Для Индекс = 0 По Граница Цикл
			СписокДляВывода.Добавить(Массив[Индекс]);
		КонецЦикла;
		
		Дополнение = Массив.Количество() - СписокДляВывода.Количество();
		Возврат СтрСоединить(СписокДляВывода, ", ") + ?(Дополнение > 0, " " + СтрШаблон(НСтр("ru = 'и еще %1';
																							|en = 'and also %1'"), Дополнение), "");
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыПересчетаКоличестваЕдиниц() Экспорт
	
	ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
	Возврат ПараметрыПересчета;
	
КонецФункции

Функция ЗаголовокТабличнойЧастиПоТипуПроцесса(ТипПроизводственногоПроцесса, КодЯзыка = Неопределено) Экспорт
	
	Если ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка") Тогда
		Заголовок = НСтр("ru = 'Продукция';
						|en = 'Manufactured products'", КодЯзыка);
	ИначеЕсли ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт") Тогда
		Заголовок = НСтр("ru = 'Ремонтируемые изделия';
						|en = 'Remanufacturing products'", КодЯзыка);
	ИначеЕсли ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
		Заголовок = НСтр("ru = 'Разбираемые изделия';
						|en = 'Products for recycling'", КодЯзыка);
	ИначеЕсли ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		Заголовок = НСтр("ru = 'Продукция';
						|en = 'Manufactured products'", КодЯзыка);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

Процедура ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Подразделение, СтруктураДействий, ИмяПоляСклад = "Склад") Экспорт

	ПараметрыДействия = Новый Структура("Подразделение, ИмяПоляСклад", Подразделение, ИмяПоляСклад);
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСкладПроизводства" , ПараметрыДействия);
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая"     , Новый Структура("ИмяПоляСклад", ИмяПоляСклад));
	
КонецПроцедуры

// Возвращает результат деления двух чисел
// 
// Параметры:
//  ТолькоЦелаяЧасть - Булево -
//  Количество       - Число -
//  НормативУпаковок - Число -
//  ДанныеУпаковки   - Структура -
// 
// Возвращаемое значение:
//  Число - Коэффициент по нормативу
//
Функция КоэффициентПоНормативу(ТолькоЦелаяЧасть, Количество, НормативУпаковок, ДанныеУпаковки) Экспорт
	
	Результат = Количество * ДанныеУпаковки.Знаменатель / (НормативУпаковок * ДанныеУпаковки.Числитель);
	
	Возврат ?(ТолькоЦелаяЧасть, Цел(Результат), Результат);
	
КонецФункции

#КонецОбласти

#КонецОбласти