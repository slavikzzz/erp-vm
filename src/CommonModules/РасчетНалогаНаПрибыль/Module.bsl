#Область ПрограммныйИнтерфейс

// Описывает контекст, в котором выполняется расчет налога на прибыль - организацию, период и т.п.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - налогоплательщик
// 	КонецПериода - Дата - характеризует отчетный период; дата из последнего месяца отчетного периода
// 	РеквизитыРеглОперации - см. Документы.РегламентнаяОперация.ПодготовитьДанныеРасчетаНалогаНаПрибыль
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ПрименяютсяСпециальныеРежимы - Булево -
// * ПрименяетсяПБУ18 - Булево -
// * ВариантУчетаОтложенногоНалога - ПеречислениеСсылка.ВариантыУчетаОтложенногоНалога -
// * ПоказательОпределенияДолиПрибыли - ПеречислениеСсылка.ПоказателиДляОпределенияДолиПрибыли -
// * РегистрацияПоМестуНахожденияОрганизации - СправочникСсылка.РегистрацииВНалоговомОргане, Неопределено -
// * Организация - СправочникСсылка.Организации -
// * Организации - ФиксированныйМассив Из СправочникСсылка.Организации - вся иерархия организации
// * НачалоМесяца - Дата -
// * НалоговыйПериод - Дата - начало стандартного налогового периода
// * КонецПериода - Дата -
// * НачалоНалоговогоПериода - Дата - фактическое начало налогового периода (может совпадать со стандартным началом или
//               датой регистрации организации.
// * РеквизитыРеглОперации - Структура - кэшируется копия реквизитов регл. операции или создается пустая структура
//
Функция НовыйКонтекстРасчета(Организация, КонецПериода, РеквизитыРеглОперации = Неопределено) Экспорт
	
	ОписаниеНалоговогоПериода = НалоговыйУчет.БлижайшийНалоговыйПериод(КонецПериода, Организация);
	Если КонецПериода < ОписаниеНалоговогоПериода.Начало Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Глава 25 предусматривает определение некоторых показателей ежемесячно
	// Кроме того, налог рассчитываем ежемесячно для целей ПБУ 18 
	// Также расчет за месяц может потребоваться для целей ст. 288 НК РФ
	// (письмо Минфина от 10 марта 2006 г. N 03-03-04/1/199)
	НачалоМесяца = Макс(НачалоМесяца(КонецПериода), ОписаниеНалоговогоПериода.Начало);
	
	КонтекстРасчета = Новый Структура; 
	
	КонтекстРасчета.Вставить("НачалоНалоговогоПериода", ОписаниеНалоговогоПериода.Начало);
	КонтекстРасчета.Вставить("КонецПериода",            КонецМесяца(КонецПериода));
	КонтекстРасчета.Вставить("НалоговыйПериод",         ОписаниеНалоговогоПериода.Период);
	КонтекстРасчета.Вставить("НачалоМесяца",            НачалоМесяца);
	
	КонтекстРасчета.Вставить("Организация",             Организация);
	КонтекстРасчета.Вставить("Организации",             ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	КонтекстРасчета.Вставить(
		"РегистрацияПоМестуНахожденияОрганизации",
		НалоговыйУчет.РегистрацияОрганизацииВНалоговомОргане(Организация, КонецПериода));
		
	КонтекстРасчета.Вставить(
		"ВариантУчетаОтложенногоНалога",
		НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(КонецПериода, Организация));
		
	КонтекстРасчета.Вставить(
		"ПрименяетсяПБУ18",
		НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ПрименяетсяПБУ18(КонтекстРасчета.ВариантУчетаОтложенногоНалога));
		
	ПрименяютсяСпециальныеРежимы = Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(
		КонтекстРасчета.Организация, 
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.КонецПериода);
		
	КонтекстРасчета.Вставить("ПрименяютсяСпециальныеРежимы", ПрименяютсяСпециальныеРежимы);
	
	КонтекстРасчета.Вставить("ИспользуетсяРаздельныйУчет",
		РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(Организация, КонтекстРасчета.КонецПериода));
	
	КонтекстРасчета.Вставить("ПоказательОпределенияДолиПрибыли", 
		НалоговыйУчет.ПоказательОпределенияДолиПрибыли(КонецПериода, Организация));
	
	// Дополнительно кэшируется копия реквизитов регл. операции
	Если РеквизитыРеглОперации <> Неопределено Тогда
		КонтекстРасчета.Вставить("РеквизитыРеглОперации",
			ОбщегоНазначения.СкопироватьРекурсивно(РеквизитыРеглОперации));
	Иначе
		КонтекстРасчета.Вставить("РеквизитыРеглОперации", Новый Структура);
	КонецЕсли;
	
	Возврат КонтекстРасчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕДАЧА ПАРАМЕТРОВ

// Возвращает параметры для расчета
// 
// Параметры:
// 	РасчетНалога - ТаблицаЗначений -
// 	ЗаписьРаспределенияБазыНалогаНаПрибыль - ТаблицаЗначений -
// 	ТаблицаРеквизиты - ТаблицаЗначений -
//
// Возвращаемое значение:
// 	Структура:
// 		*ТаблицаРасчетНалога - ТаблицаЗначений -
// 		*ЗаписьРаспределенияБазыНалогаНаПрибыль - ТаблицаЗначений -
// 		*Реквизиты - ТаблицаЗначений -
//
Функция ПодготовитьПараметры(РасчетНалога, ЗаписьРаспределенияБазыНалогаНаПрибыль, ТаблицаРеквизиты) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетНалога
	
	СписокОбязательныхКолонок = ""
	+ "СуммаНалога,"       // <Число, 15, 2>
	+ "СуммаЕНВД,"         // <Число, 15, 2>
	+ "КоррСчет,"          // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто,"
	+ "Субконто68_4,"
	+ "Субконто68_4_2,"
	+ "ПоДебету,"          // <Строка, 1>
	+ "СодержаниеПроводки" // <Строка, 150>
	;
	
	Параметры.Вставить("ТаблицаРасчетНалога", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РасчетНалога, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ЗаписьРаспределенияБазыНалогаНаПрибыль
	
	СписокОбязательныхКолонок = ""
	+ "РегистрацияВНалоговомОргане,"        // <СправочникСсылка.РегистрацииВНалоговомОргане>
	+ "СтоимостьАмортизируемогоИмущества,"  // <Число, 15, 2>
	+ "СтоимостьОСПрошлыхМесяцев,"          // <Число, 15, 2>
	+ "СтоимостьОССледующегоМесяца,"        // <Число, 15, 2>
	+ "РасходыПоОплатеТруда,"               // <Число, 15, 2>
	+ "ДоляНалоговойБазы"                   // <Число, 15, 2>
	+ "НалоговаяБаза,"                      // <Число, 15, 2>
	+ "Закрыто,"                            // <Булево>
	+ "ПоследнийОтчетныйПериод"             // <Дата>
	;
	
	Параметры.Вставить("ЗаписьРаспределенияБазыНалогаНаПрибыль",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ЗаписьРаспределенияБазыНалогаНаПрибыль, СписокОбязательныхКолонок));
	

	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Дата,"                        // <Дата>
	+ "Период,"                      // <Дата>
	+ "НачалоГода,"                  // <Дата>
	+ "НачДата,"                     // <Дата>
	+ "КонДата,"                     // <Дата>
	+ "Организация,"                 // <СправочникСсылка.Организации>
	+ "РегистрацияВНалоговомОргане," // <СправочникСсылка.РегистрацииВНалоговомОргане>
	+ "Регистратор,"                 // <ДокументСсылка.*>
	+ "КоэффициентЕНВД,"             // <Число, 15, 2>
	+ "СтавкаНалогаНаПрибыль,"       // <Число, 15, 2>
	+ "Содержание"                   // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметры()

////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ НАЛОГА

// Рассчитывает налоговую базу по налогу на прибыль
//
// Параметры:
// 	НачалоПериода - Дата -
// 	КонецПериода - Дата - Описание
// 	Организация - СправочникСсылка.Организации - 
// Возвращаемое значение:
// 	Число -
Функция НалоговаяБаза(НачалоПериода, КонецПериода, Организация) Экспорт
	
	Суммы = СуммыНалоговойБазы(НачалоПериода, КонецПериода, Организация);
	Возврат Суммы.СуммаНУ;

КонецФункции

// Рассчитывает налоговую базу по налогу на прибыль
// (по неокругленным компонентам налоговой базы; в том числе, по данным бухгалтерского учета).
//
// Параметры:
//  НачалоПериода	  - Дата - начало периода расчета
//  КонецПериода	  - Дата - конец периода расчета
//  Организация		  - СправочникСсылка.Организации - налогоплательщик (головная организация)
//  ОписаниеСумм	  - Структура - см. КоллекцииСумм.НовыйОписаниеКоллекцииСумм, описание коллекции сумм,
//                      соответствующих видам учета, по данным которых должна быть рассчитана налоговая база.
//                      Заполняются суммы с именами Сумма, СуммаНУ, СуммаПР, СуммаВР.
//                      Если не передан, подразумевается СуммаНУ.
//  СчетНалоговойБазы - ПланСчетовСсылка.Хозрасчетный - субсчет счета прибылей и убытков, соответствующий части налоговой базы,
//                      облагаемой по отдельной ставке налога (в частном случае - не облагаемой).
//                      Если не передан, подразумевается счет 99.01.1
//                      ("Прибыли и убытки по деятельности с основной системой налогообложения").
// 
// Возвращаемое значение:
//  Структура - см. КоллекцииСумм.НовыйКоллекцияСумм - суммы налоговой базы по выбранным видам учета.
//              Заполняются Сумма, СуммаНУ, СуммаПР, СуммаВР.
//
Функция СуммыНалоговойБазы(НачалоПериода, КонецПериода, Организация, ОписаниеСумм = Неопределено, СчетНалоговойБазы = Неопределено) Экспорт
	
	Если ОписаниеСумм = Неопределено Тогда
		ОписаниеСумм = ОписаниеСуммНалоговыйУчет();
	КонецЕсли;
	
	Суммы = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	
	РезультатЗапроса = РезультатЗапроса_СуммыНалоговойБазы(
		НачалоПериода,
		КонецПериода,
		Организация,
		,
		СчетНалоговойБазы);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Суммы, Выборка);
	КонецЕсли;
	
	Возврат Суммы;

КонецФункции

// Рассчитывает налоговую базу по налогу на прибыль
// (по неокругленным компонентам налоговой базы; в том числе, по данным бухгалтерского учета).
//
// Параметры:
//  НачалоПериода     - Дата - начало периода расчета
//  КонецПериода      - Дата - конец периода расчета
//  Организация       - СправочникСсылка.Организации - налогоплательщик (головная организация)
//  ИспользуетсяРаздельныйУчет - Неопределено - признак не известен, будет получен из базы данных
//                             - Булево - признак известен, обращение к базе данных не требуется
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит:
//  	* ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли - Вариант н/о
//  	* Сумма   - Число -
//  	* СуммаНУ - Число -
//  	* СуммаПР - Число -
//  	* СуммаВР - Число -
//
Функция СуммыНалоговойБазыВРазрезеВариантовНалогообложения(
	НачалоПериода, КонецПериода, Организация, Знач ИспользуетсяРаздельныйУчет = Неопределено) Экспорт
	
	ОписаниеТипаЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	
	ТаблицаСумм = Новый ТаблицаЗначений();
	ТаблицаСумм.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	ТаблицаСумм.Колонки.Добавить("Сумма",   ОписаниеТипаЧисло);
	ТаблицаСумм.Колонки.Добавить("СуммаНУ", ОписаниеТипаЧисло);
	ТаблицаСумм.Колонки.Добавить("СуммаПР", ОписаниеТипаЧисло);
	ТаблицаСумм.Колонки.Добавить("СуммаВР", ОписаниеТипаЧисло);
	
	Если ИспользуетсяРаздельныйУчет = Неопределено Тогда
		ИспользуетсяРаздельныйУчет = РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(
				Организация,
				КонецПериода);
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса_СуммыНалоговойБазы(
						НачалоПериода,
						КонецПериода,
						Организация,
						,
						,
						ИспользуетсяРаздельныйУчет);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаСумм.Добавить(), Выборка);
		
	КонецЦикла;
	
	Возврат ТаблицаСумм;

КонецФункции

// Рассчитывает налоговую базу по налогу на прибыль, результат помещает во временную таблицу "СуммыНалоговойБазы"
// (по неокругленным компонентам налоговой базы; в том числе, по данным бухгалтерского учета).
//
// Колонки временной таблицы:
//  	* ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли - Вариант н/о
//  	* Сумма   - Число;
//  	* СуммаНУ - Число;
//  	* СуммаПР - Число;
//  	* СуммаВР - Число.
//
// Параметры:
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц -
//  НачалоПериода     - Дата - начало периода расчета
//  КонецПериода      - Дата - конец периода расчета
//  Организация       - СправочникСсылка.Организации - налогоплательщик (головная организация)
//  ИспользуетсяРаздельныйУчет - Неопределено - признак не известен, будет получен из базы данных
//                             - Булево - признак известен, обращение к базе данных не требуется
// 
Процедура ПодготовитьВТ_СуммыНалоговойБазыВРазрезеВариантовНалогообложения(МенеджерВременныхТаблиц,
	НачалоПериода, КонецПериода, Организация, Знач ИспользуетсяРаздельныйУчет = Неопределено) Экспорт
	
	Если ИспользуетсяРаздельныйУчет = Неопределено Тогда
		ИспользуетсяРаздельныйУчет = РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(
				Организация,
				КонецПериода);
	КонецЕсли;
	
	РезультатЗапроса_СуммыНалоговойБазы(
		НачалоПериода,
		КонецПериода,
		Организация,
		МенеджерВременныхТаблиц,
		,
		ИспользуетсяРаздельныйУчет);
	
КонецПроцедуры

// Начисляет налог на прибыль - формирует проводки.
// 
// Параметры:
// 	Движения - КоллекцияДвижений - коллекция движений документа "РегламентнаяОперация"
// 	КонтекстРасчета - см. НовыйКонтекстРасчета
//  РасчетРаспределенияНалоговойБазыОП - ТаблицаЗначений - см. НалоговыйУчетОбособленныхПодразделений.НовыйРасчетРаспределенияНалоговойБазы
//                                   - Неопределено - распределение по обособленным подразделениям не требуется
//	ТаблицаБазаНалогаЗаГод	- см. СуммыНалоговойБазыВРазрезеВариантовНалогообложения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы,
//                            содержит временную таблицу СоответствиеПрежнихИТекущихНалоговыхОрганов,
//                            которая используется в процедуре, если налог распределяется между налоговыми органами.
//
// Возвращаемое значение:
// 	Структура - содержит:
// 		* Проводки - Число - сумма налога за месяц
// 		* Всего    - Число - сумма налога нарастающим итогом
//
Функция НачислитьНалогНаПрибыль(Движения, КонтекстРасчета, РасчетРаспределенияНалоговойБазыОП, ТаблицаБазаНалогаЗаГод, МенеджерВременныхТаблиц) Экспорт
	
	СуммыНалога = Новый Структура;
	СуммыНалога.Вставить("Всего",    0);
	СуммыНалога.Вставить("Проводки", 0);
	
	БазаНалогаЗаГод = ОбщаяБазаНалогаЗаГод(ТаблицаБазаНалогаЗаГод, РасчетРаспределенияНалоговойБазыОП);
	
	// Ситуация, когда БазаНалогаЗаГод = 0 также рассматривается, т.к. в этом случае может потребоваться сделать сторнирующие проводки
	
	ДатаРасчетаСтавки = Макс(КонтекстРасчета.КонецПериода, КонтекстРасчета.НалоговыйПериод);
	
	СтавкаФедеральныйБюджет  = НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(ДатаРасчетаСтавки, КонтекстРасчета.Организация);
	СтавкаРегиональныйБюджет = НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(ДатаРасчетаСтавки, КонтекстРасчета.Организация);
	
	РаспределениеНалогаНаПрибыль = НовыйРаспределениеНалогаНаПрибыль();
	ЗаполнитьРаспределениеНалогаНаПрибыль(
		РаспределениеНалогаНаПрибыль,
		КонтекстРасчета,
		РасчетРаспределенияНалоговойБазыОП,
		ТаблицаБазаНалогаЗаГод,
		СтавкаФедеральныйБюджет,
		СтавкаРегиональныйБюджет);
	
	// Сначала соберем в таблице все данные, а затем по этой таблице сформируем проводки.
	НачислениеНалога = НачислениеНалогаНаПрибыль(
		КонтекстРасчета,
		РаспределениеНалогаНаПрибыль,
		МенеджерВременныхТаблиц);
		
	// Обеспечим заполнение РегистрацияВНалоговомОргане - для работы ДобавитьПроводкиУменьшениеНаСуммуТорговогоСбора() и
	// формирования проводок.
	Для Каждого Начисление Из НачислениеНалога Цикл
		Если Не ЗначениеЗаполнено(Начисление.РегистрацияВНалоговомОргане) Тогда
			Начисление.РегистрацияВНалоговомОргане = КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации;
		КонецЕсли;
	КонецЦикла;
	
	// При формировании проводок по уменьшению налога может потребоваться скорректировать сумму расходов,
	// а для этого - записать набор записей Хозрасчетный, с тем, чтобы скорректированную сумму можно было учесть ниже,
	// при расчете проводок для целей ПБУ 18.
	// В то же время, на момент расчета проводок для целей ПБУ 18, не должны быть записаны проводки по начислению налога на
	// счет 68.04.1. Поэтому сначала формируем проводки по уменьшению суммы налога - и, при необходимости, записываем их,
	// а затем - проводки по начислению налога, но не записываем их.
	ДобавитьПроводкиУменьшениеНаСуммуТорговогоСбора(
		Движения,
		НачислениеНалога,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация,
		КонтекстРасчета.ПрименяетсяПБУ18);
	
	// Субконто РегистрацияВНалоговомОргане может не использоваться в конфигурации
	СубконтоРегистрацияВНалоговомОргане = Неопределено;
	ВидыСубконто = Новый Массив;
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Если ЗначениеЗаполнено(ВидыСубконто) Тогда
		СубконтоРегистрацияВНалоговомОргане = ВидыСубконто[0];
	КонецЕсли;
	
	// Формируем проводки
	
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.Нет Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;  // 99.01.1
	ИначеЕсли КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.ТекущийНалогНаПрибыль; // 99.02.Т
	Иначе
		СчетДт = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль; // 68.04.2
	КонецЕсли;
	
	Для Каждого ДанныеПроводки Из НачислениеНалога Цикл
		
		Если ДанныеПроводки.СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = КонтекстРасчета.КонецПериода;
		Проводка.Организация = КонтекстРасчета.Организация;
		Проводка.Сумма       = ДанныеПроводки.СуммаПроводки;
		Проводка.Содержание  = НСтр("ru = 'Налог на прибыль';
									|en = 'Income tax'");
		Проводка.СчетДт      = СчетДт;
	
		Если Не КонтекстРасчета.ПрименяетсяПБУ18 Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ДанныеПроводки.ВариантНалогообложенияПрибыли);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ДанныеПроводки.ВариантНалогообложенияПрибыли);
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, 
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов,
			ДанныеПроводки.УровеньБюджета);
		Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт,
				Проводка.СубконтоКт,
				СубконтоРегистрацияВНалоговомОргане,
				ДанныеПроводки.РегистрацияВНалоговомОргане);
		КонецЕсли;
	
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
	ОтразитьОсвобождениеОтНалога(
		Движения.Хозрасчетный,
		НачислениеНалога,
		КонтекстРасчета,
		ЗначениеЗаполнено(РаспределениеНалогаНаПрибыль));
	
	Если БазаНалогаЗаГод >= 0 Тогда
		// Общая сумма проводок - во все бюджеты и все налог.органы
		СуммыНалога.Проводки = НачислениеНалога.Итог("СуммаПроводки");
	КонецЕсли;
	
	СуммыНалога.Всего = НачислениеНалога.Итог("СуммаНалога");
	
	Возврат СуммыНалога;
	
КонецФункции

#Область Соглашения

Функция ОписаниеСуммНалоговыйУчет() Экспорт
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет", "СуммаНУ");
	Возврат ОписаниеСумм;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ДобавитьПроводкуСписанияОтклоненийПриОкругленииНалогаНаПрибыль(
			ТаблицаРасчетПостоянныхРазниц, 
			ТаблицаРасчетВременныхРазниц,
			ТаблицаРасчетНалогаНаПрибыль,
			ТаблицаРеквизиты,
			СуммаНалогаНУ,
			Движения, 
			Отказ) Экспорт
	
	// Часть параметров не используется, они оставлены для совместимости - на случай, если потребуется изменить алгоритм:
	// - ТаблицаРасчетПостоянныхРазниц
	// - ТаблицаРасчетВременныхРазниц
	// - ТаблицаРасчетНалогаНаПрибыль
	// - СуммаНалогаНУ
	// - Отказ.
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.Дата < Дата(2014,01,01) Тогда 
		Возврат;
	КонецЕсли;
	
	// Исходим из предположения, что проводки по счету 68.04.2 выполняются 
	// только в ходе этой регламентной операции и записываются разом - т.е. не вызывается Движения.Записать().
	ОстатокОкругления = 0; // Его будем дебетовать. Если до "округления" сальдо на счете дебетовое, то остаток должен получиться отрицательным.
	СчетРасчетНалогаНаПрибыль = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Для Каждого Проводка Из Движения.Хозрасчетный Цикл
		Если Проводка.СчетКт = СчетРасчетНалогаНаПрибыль Тогда
			ОстатокОкругления = ОстатокОкругления + Проводка.Сумма;
		КонецЕсли;
		Если Проводка.СчетДт = СчетРасчетНалогаНаПрибыль Тогда
			ОстатокОкругления = ОстатокОкругления - Проводка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если ОстатокОкругления = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = НСтр("ru = 'Перенос сальдо счета 68.04.2';
								|en = 'Transfer balance of account 68.04.2'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	
	Если ОстатокОкругления > 0 Тогда
		Проводка.Сумма       = ОстатокОкругления;
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;  // 68.04.2
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;   // 99.09
	Иначе
		Проводка.Сумма       = -ОстатокОкругления;
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;   // 68.04.2
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;    // 99.09
	КонецЕсли;
	
КонецПроцедуры

#Область ДанныеДляНачисленияНалога

// Готовит данные для формирования проводок по начислению налога на прибыль на счет расчетов с бюджетом.
//
// Параметры:
//  КонтекстРасчета              - см. НовыйКонтекстРасчета
//  РаспределениеНалогаНаПрибыль - см. НовыйРаспределениеНалогаНаПрибыль
//  МенеджерВременныхТаблиц 	 - МенеджерВременныхТаблиц -см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьТаблицуРаспределенияБазыНалогаНаПрибыль(),
//                                 содержит временную таблицу СоответствиеПрежнихИТекущихНалоговыхОрганов,
//                                 которая используется в процедуре, если налог распределяется между налоговыми органами.
// 
// Возвращаемое значение:
//  см. НовыйНачислениеНалогаНаПрибыль
//
Функция НачислениеНалогаНаПрибыль(КонтекстРасчета,
								РаспределениеНалогаНаПрибыль,
								МенеджерВременныхТаблиц)
	
	Если КонтекстРасчета.НачалоНалоговогоПериода < '2014-01-01' Тогда
		ТочностьРасчета = 2;
	Иначе
		ТочностьРасчета = 0; // с 2014 года налог на прибыль исчисляется в целых рублях
	КонецЕсли;
	
	НачислениеНалога = НовыйНачислениеНалогаНаПрибыль(ТочностьРасчета);
	
	// Сначала посчитаем суммы налога к уплате за весь налоговый период.
	// Затем вычтем сумму ранее начисленных авансов.
	// Разность этих величин - суммы проводок.
	
	// 1. Суммы к уплате за налоговый период
	
	Для Каждого Строка Из РаспределениеНалогаНаПрибыль Цикл
		
		Если Строка.ДоляНалоговойБазы = 0
				Или (Строка.СтавкаФедеральныйБюджет = 0 И Строка.СтавкаРегиональныйБюджет = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		// 1.1. Федеральный бюджет

		Если Строка.СтавкаФедеральныйБюджет > 0 Тогда
		
			СуммаНалога = СуммаНалогаНаПрибыльВБюджет(Строка.НалоговаяБаза, Строка.СтавкаФедеральныйБюджет, ТочностьРасчета);
			
			ДобавитьНачислениеНалогаНаПрибыль(
				НачислениеНалога,
				Перечисления.УровниБюджетов.ФедеральныйБюджет,
				СуммаНалога,
				Строка.ВариантНалогообложенияПрибыли);
			
		КонецЕсли;
		
		// 1.2. Региональный бюджет
		
		Если Строка.СтавкаРегиональныйБюджет > 0 Тогда
			
			// Налоговая база по регистрациям (КПП) и по вариантам налогообложения уже рассчитана с учетом долей
			СуммаНалога = СуммаНалогаНаПрибыльВБюджет(Строка.НалоговаяБаза, Строка.СтавкаРегиональныйБюджет, ТочностьРасчета);
			
			ДобавитьНачислениеНалогаНаПрибыль(
				НачислениеНалога,
				Перечисления.УровниБюджетов.РегиональныйБюджет,
				СуммаНалога,
				Строка.ВариантНалогообложенияПрибыли,
				Строка.РегистрацияВНалоговомОргане);
			
		КонецЕсли;
			
	КонецЦикла;
	
	СвернутьНачислениеНалогаНаПрибыль(НачислениеНалога);
	
	// 2. Суммы ранее начисленных авансов.
	
	// Рассчитаем сумму начисленных ранее авансовых платежей.
	// Начислить нужно разницу между суммами налога и авансового платежа.
	СоответствиеПрежнихИТекущихНалоговыхОрганов = Неопределено;
	Если ЗначениеЗаполнено(РаспределениеНалогаНаПрибыль) Тогда
		СоответствиеПрежнихИТекущихНалоговыхОрганов = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ИсключитьРанееНачисленныеАвансы(НачислениеНалога, КонтекстРасчета, СоответствиеПрежнихИТекущихНалоговыхОрганов);
	
	Возврат НачислениеНалога;
	
КонецФункции

Процедура ИсключитьРанееНачисленныеАвансы(НачислениеНалога, КонтекстРасчета, СоответствиеПрежнихИТекущихНалоговыхОрганов = Неопределено)
	
	Если КонтекстРасчета.НачалоМесяца > КонтекстРасчета.НачалоНалоговогоПериода Тогда
		
		// В зависимости от применяемой учетной политики налог может начисляться
		// в корреспонденции со счетом 68.04.2 или 99.02.Т
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", КонтекстРасчета.НачалоНалоговогоПериода);
		Запрос.УстановитьПараметр("КонецОтчетногоПериода",   КонтекстРасчета.КонецПериода);
		Запрос.УстановитьПараметр("Организация",             КонтекстРасчета.Организация);
		Запрос.УстановитьПараметр("СчетаТекущегоНалога",     НалогНаПрибыльБухгалтерскийУчет.СчетаТекущегоНалога());
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);      // Субконто1
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);              // Субконто2
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто); // Может быть "переустановлен"
		
		Отбор = Новый Структура;
		Отбор.Вставить("УровеньБюджета");
		Отбор.Вставить("ВариантНалогообложенияПрибыли");
		
		Если ТипЗнч(СоответствиеПрежнихИТекущихНалоговыхОрганов) = Тип("МенеджерВременныхТаблиц")
			И СоответствиеПрежнихИТекущихНалоговыхОрганов.Таблицы.Найти("СоответствиеПрежнихИТекущихНалоговыхОрганов") <> Неопределено Тогда
			
			// Используется временная таблица СоответствиеПрежнихИТекущихНалоговыхОрганов, созданная на предыдущих шагах алгоритма.
			// (см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы()) 
			// Т.к. регистрации подразделений в налоговых органах могут меняться, то начисления авансов прошлых периодов
			// в некоторых случаях в текущем периоде могут относиться уже на другие регистрации.
			// Такими случаями являются:
			// - переезд головной организации со сменой налоговой инспекции: авансы по прежним КПП за текущий год должны быть учтены
			//	 по текущей регистрации головной организации
			// - изменение налогового органа - получателя декларации в регионе при уплате налога по группе подразделений:
			//	 авансы по прежнему получателю декларации в регионе за текущий год должны быть учтены по новому получателю
			
			Запрос.МенеджерВременныхТаблиц = СоответствиеПрежнихИТекущихНалоговыхОрганов;
			
			Отбор.Вставить("РегистрацияВНалоговомОргане");
			
			НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто); // Субконто3
			Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
			
			Запрос.Текст = // Текст запроса модифицируется ниже с использованием СхемаЗапроса
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Субконто2 КАК УровеньБюджета,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ВариантыНалогообложенияПрибыли), 
			|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНалогообложенияПрибыли,
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОбороты.Субконто2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
			|			ТОГДА ХозрасчетныйОбороты.Субконто3
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
			|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаАвансовыхПлатежей
			|ПОМЕСТИТЬ ПрежниеНачисления
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоНалоговогоПериода,
			|			&КонецОтчетногоПериода,
			|			,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
			|			КорСчет В (&СчетаТекущегоНалога),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли)
			|			) КАК ХозрасчетныйОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОбороты.Субконто2,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ВариантыНалогообложенияПрибыли), 
			|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)),
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОбороты.Субконто2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
			|			ТОГДА ХозрасчетныйОбороты.Субконто3
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
			|	КОНЕЦ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РегистрацияВНалоговомОргане
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПрежниеНачисления.УровеньБюджета КАК УровеньБюджета,
			|	ПрежниеНачисления.ВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
			|	ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, ПрежниеНачисления.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
			|	СУММА(ПрежниеНачисления.СуммаАвансовыхПлатежей) КАК СуммаАвансовыхПлатежей
			|ИЗ
			|	ПрежниеНачисления КАК ПрежниеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПрежнихИТекущихНалоговыхОрганов КАК СоответствиеПрежнихИТекущихНалоговыхОрганов
			|		ПО ПрежниеНачисления.РегистрацияВНалоговомОргане = СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганПрежний
			|
			|СГРУППИРОВАТЬ ПО
			|	ПрежниеНачисления.УровеньБюджета,
			|	ПрежниеНачисления.ВариантНалогообложенияПрибыли,
			|	ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, ПрежниеНачисления.РегистрацияВНалоговомОргане)";
			
		Иначе // нет распределения по РегистрацииВНалоговомОргане
			
			Запрос.Текст = // Текст запроса модифицируется ниже с использованием СхемаЗапроса
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Субконто2 КАК УровеньБюджета,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ВариантыНалогообложенияПрибыли), 
			|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНалогообложенияПрибыли,
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаАвансовыхПлатежей
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоНалоговогоПериода,
			|			&КонецОтчетногоПериода,
			|			,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
			|			КорСчет В (&СчетаТекущегоНалога),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли)
			|			) КАК ХозрасчетныйОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОбороты.Субконто2,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ВариантыНалогообложенияПрибыли), 
			|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))";
			
		КонецЕсли;
		
		Если Не КонтекстРасчета.ПрименяетсяПБУ18 Тогда
			
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
			// Счета текущего налога не используются, проводки по начислению налога - в корр. с 99, 
			// причем на счете 99 кор.субконто должно быть НалогНаПрибыль.
			// Поэтому в параметрах виртуальной таблицы также устанавливаем и вид субконто ПрибылиИУбытки
			ПараметрыВиртуальнойТаблицы = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Параметры;
			ПараметрыВиртуальнойТаблицы[6].Выражение = // УсловиеКорСчета
			Новый ВыражениеСхемыЗапроса("КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД)");
			ПараметрыВиртуальнойТаблицы[7].Выражение = // КорСубконто
			Новый ВыражениеСхемыЗапроса("&МассивКоррСубконто");
			ПараметрыВиртуальнойТаблицы[5].Выражение = // Условие
			Новый ВыражениеСхемыЗапроса("" + ПараметрыВиртуальнойТаблицы[5].Выражение + " И КорСубконто2 = ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.НалогНаПрибыль)");
			
			МассивКоррСубконто = Новый Массив;
			МассивКоррСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
			МассивКоррСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
			
			Запрос.УстановитьПараметр("МассивКоррСубконто", МассивКоррСубконто);
			Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
			
		КонецЕсли;
		
		ВыборкаАвансы = Запрос.Выполнить().Выбрать();
		Пока ВыборкаАвансы.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаАвансы);
			Начисления = НачислениеНалога.НайтиСтроки(Отбор);
			Если Начисления.Количество() > 0 Тогда
				Начисления[0].СуммаАвансовыхПлатежей = ВыборкаАвансы.СуммаАвансовыхПлатежей;
			Иначе
				// Если в текущих начислениях нет налогового органа, по которому ранее были начисления, то нужно сторнировать прежние начисления.
				// Такая ситуация возникнет, например, при закрытии обособленного подразделения в феврале или марте (если отчетный период - квартал).
				ЗаполнитьЗначенияСвойств(НачислениеНалога.Добавить(), ВыборкаАвансы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Суммы налога для формирования проводок (разница между авансом и ранее начисленным)
	Для Каждого Начисление Из НачислениеНалога Цикл
		Начисление.СуммаПроводки = Начисление.СуммаНалога - Начисление.СуммаАвансовыхПлатежей;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет распределение налога на прибыль исходя из переданных факторов
// 
// Параметры:
// 	РаспределениеНалогаНаПрибыль       - см. НовыйРаспределениеНалогаНаПрибыль
// 	КонтекстРасчета                    - см. НовыйКонтекстРасчета
// 	РасчетРаспределенияНалоговойБазыОП - ТаблицаЗначений - см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы
// 	                                   - Неопределено - распределение по обособленным подразделениям не требуется
// 	ТаблицаБазаНалогаЗаГод             - см. СуммыНалоговойБазыВРазрезеВариантовНалогообложения
// 	СтавкаФедеральныйБюджет            - Число - основная ставка в федеральный бюджет
// 	СтавкаРегиональныйБюджет           - Число - основная ставка в региональный бюджет
//
Процедура ЗаполнитьРаспределениеНалогаНаПрибыль(РаспределениеНалогаНаПрибыль,
												КонтекстРасчета,
												РасчетРаспределенияНалоговойБазыОП,
												ТаблицаБазаНалогаЗаГод,
												СтавкаФедеральныйБюджет,
												СтавкаРегиональныйБюджет)
	
	НалоговаяБазаРазделенаПоВариантамНалогообложения =
		НалоговаяБазаРазделенаПоВариантамНалогообложения(ТаблицаБазаНалогаЗаГод);
	
	РаспределениеНалогаНаПрибыль = НовыйРаспределениеНалогаНаПрибыль();
	
	Если РасчетРаспределенияНалоговойБазыОП <> Неопределено И РасчетРаспределенияНалоговойБазыОП.Количество() <> 0 Тогда
		
		// Налоговая база детализирована по вариантам н/о и регистрациям в ФНС
		
		РазвернутыйРасчетРаспределения =
			НалоговыйУчетОбособленныхПодразделений.РазвернутьРасчетРаспределенияНалоговойБазыПоВариантамНалогообложения(
				РасчетРаспределенияНалоговойБазыОП);
		
		Для Каждого ЗаписьРаспределенияОП Из РазвернутыйРасчетРаспределения Цикл
			НоваяСтрокаРаспределения = РаспределениеНалогаНаПрибыль.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения, ЗаписьРаспределенияОП);
		КонецЦикла;
		
	Иначе
		
		// Налоговая база детализирована только по вариантам н/о
		// При распределении налоговой базы заполним доли
		
		ОбщаяБазаНалогаЗаГод         = ОбщаяБазаНалогаЗаГод(ТаблицаБазаНалогаЗаГод, РасчетРаспределенияНалоговойБазыОП);
		
		МаксимальноеЗначение         = 0;
		СтрокаСМаксимальнымЗначением = Неопределено;
		
		Для каждого ЗаписьБазыНалога Из ТаблицаБазаНалогаЗаГод Цикл
		
			НоваяСтрокаРаспределения                               = РаспределениеНалогаНаПрибыль.Добавить();
			НоваяСтрокаРаспределения.ВариантНалогообложенияПрибыли = ЗаписьБазыНалога.ВариантНалогообложенияПрибыли;
			НоваяСтрокаРаспределения.РегистрацияВНалоговомОргане   = КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации;
			НоваяСтрокаРаспределения.НалоговаяБаза                 = ЗаписьБазыНалога.СуммаНУ;
			
			Если Не НалоговаяБазаРазделенаПоВариантамНалогообложения Тогда
				НоваяСтрокаРаспределения.ДоляНалоговойБазы = 1;
			ИначеЕсли ЗаписьБазыНалога.СуммаНУ > 0 Тогда
				НоваяСтрокаРаспределения.ДоляНалоговойБазы = ЗаписьБазыНалога.СуммаНУ / ОбщаяБазаНалогаЗаГод;
			Иначе
				НоваяСтрокаРаспределения.ДоляНалоговойБазы = 0;
			КонецЕсли;
			
			Если НалоговаяБазаРазделенаПоВариантамНалогообложения
				И НоваяСтрокаРаспределения.НалоговаяБаза >= МаксимальноеЗначение Тогда
				СтрокаСМаксимальнымЗначением = НоваяСтрокаРаспределения;
				МаксимальноеЗначение         = НоваяСтрокаРаспределения.НалоговаяБаза;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаСМаксимальнымЗначением <> Неопределено Тогда
			ПогрешностьОкругления                          =
				1 - РаспределениеНалогаНаПрибыль.Итог("ДоляНалоговойБазы");
			СтрокаСМаксимальнымЗначением.ДоляНалоговойБазы =
				СтрокаСМаксимальнымЗначением.ДоляНалоговойБазы + ПогрешностьОкругления;
		КонецЕсли;
		
	КонецЕсли;
		
	// Определим ставку налога
	НалоговыйУчетОбособленныхПодразделений.ЗаполнитьНалоговыеСтавкиВБюджетыРФ(
		РаспределениеНалогаНаПрибыль,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация,
		СтавкаФедеральныйБюджет,
		СтавкаРегиональныйБюджет);
	
КонецПроцедуры

// Возвращает общую налоговую базу
// 
// Параметры:
// 	ТаблицаБазаНалогаЗаГод - см. СуммыНалоговойБазыВРазрезеВариантовНалогообложения
//  РасчетРаспределенияНалоговойБазыОП - ТаблицаЗначений - см. НалоговыйУчетОбособленныхПодразделений.НовыйРасчетРаспределенияНалоговойБазы
//                                   - Неопределено - распределение по обособленным подразделениям не требуется
//
// Возвращаемое значение:
// 	Число -
//
Функция ОбщаяБазаНалогаЗаГод(ТаблицаБазаНалогаЗаГод, РасчетРаспределенияНалоговойБазыОП)
	
	Если РасчетРаспределенияНалоговойБазыОП <> Неопределено И РасчетРаспределенияНалоговойБазыОП.Количество() <> 0 
		ИЛИ НЕ НалоговаяБазаРазделенаПоВариантамНалогообложения(ТаблицаБазаНалогаЗаГод) Тогда
		Возврат ТаблицаБазаНалогаЗаГод.Итог("СуммаНУ");	
	КонецЕсли;
	
	ОбщаяБазаНалогаЗаГод = 0;
	
	Для каждого Строка Из ТаблицаБазаНалогаЗаГод Цикл
		Если Строка.СуммаНУ > 0 Тогда
			ОбщаяБазаНалогаЗаГод = ОбщаяБазаНалогаЗаГод + Строка.СуммаНУ;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ОбщаяБазаНалогаЗаГод;

КонецФункции

// Возвращает признак разделения налоговой базы по вариантам н/о
// 
// Параметры:
// 	ТаблицаБазаНалогаЗаГод - см. СуммыНалоговойБазыВРазрезеВариантовНалогообложения
//
// Возвращаемое значение:
// 	Булево -
//
Функция НалоговаяБазаРазделенаПоВариантамНалогообложения(ТаблицаБазаНалогаЗаГод)
	Возврат ТаблицаБазаНалогаЗаГод.Количество() > 1;
КонецФункции

Функция ТипСуммаНалога(ТочностьРасчета = 0)
	
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(15, ТочностьРасчета);
	
КонецФункции

// Конструктор таблицы значений "Начисление налога на прибыль"
// 
// Параметры:
// 	ТочностьРасчета - Число -
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * УровеньБюджета                - ПеречислениеСсылка.УровниБюджетов -
// * ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли -
// * РегистрацияВНалоговомОргане   - СправочникСсылка.РегистрацииВНалоговомОргане -
// * СуммаНалога                   - Число -
// * СуммаАвансовыхПлатежей        - Число -
// * СуммаПроводки                 - Число -
//
Функция НовыйНачислениеНалогаНаПрибыль(ТочностьРасчета = 0)
	
	ТипСуммаНалога = ТипСуммаНалога(ТочностьРасчета);
	НачислениеНалога = Новый ТаблицаЗначений;
	НачислениеНалога.Колонки.Добавить("УровеньБюджета",                Новый ОписаниеТипов("ПеречислениеСсылка.УровниБюджетов"));
	НачислениеНалога.Колонки.Добавить("ВариантНалогообложенияПрибыли", Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	НачислениеНалога.Колонки.Добавить("РегистрацияВНалоговомОргане",   Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	НачислениеНалога.Колонки.Добавить("СуммаНалога",                   ТипСуммаНалога);
	НачислениеНалога.Колонки.Добавить("СуммаАвансовыхПлатежей",        ТипСуммаНалога);
	НачислениеНалога.Колонки.Добавить("СуммаПроводки",                 ТипСуммаНалога);
	
	Возврат НачислениеНалога;
	
КонецФункции

Процедура СвернутьНачислениеНалогаНаПрибыль(НачислениеНалога, БезУчетаВариантаНалогообложения = Ложь)
	
	мКолонкиГруппировки = Новый Массив;
	мКолонкиГруппировки.Добавить("УровеньБюджета");
	Если НЕ БезУчетаВариантаНалогообложения = Истина Тогда
		мКолонкиГруппировки.Добавить("ВариантНалогообложенияПрибыли");
	КонецЕсли;
	мКолонкиГруппировки.Добавить("РегистрацияВНалоговомОргане");
	
	КолонкиГруппировки  = СтрСоединить(мКолонкиГруппировки, ", ");
	
	КолонкиСуммирования = "СуммаНалога, СуммаАвансовыхПлатежей, СуммаПроводки";
	
	НачислениеНалога.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	
КонецПроцедуры

Процедура ДобавитьНачислениеНалогаНаПрибыль(НачислениеНалога,
											УровеньБюджета,
											СуммаНалога,
											ВариантНалогообложенияПрибыли = Неопределено,
											РегистрацияВНалоговомОргане = Неопределено)
	
	Начисление = НачислениеНалога.Добавить();
	Начисление.УровеньБюджета                = УровеньБюджета;
	Начисление.РегистрацияВНалоговомОргане   = РегистрацияВНалоговомОргане;
	Начисление.ВариантНалогообложенияПрибыли = ВариантНалогообложенияПрибыли;
	Начисление.СуммаНалога                   = СуммаНалога;
	
КонецПроцедуры

Функция СуммаНалогаНаПрибыльВБюджет(НалоговаяБаза, СтавкаНалога, ТочностьРасчета = 0)
	
	Если НалоговаяБаза <= 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Окр(НалоговаяБаза * СтавкаНалога, ТочностьРасчета);
	
КонецФункции

// Функция-конструктор таблицы "РаспределениеНалогаНаПрибыль"
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли -
// * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане -
// * ДоляНалоговойБазы - Число -
// * СтавкаФедеральныйБюджет - Число -
// * СтавкаРегиональныйБюджет - Число -
// * НалоговаяБаза - Число -
Функция НовыйРаспределениеНалогаНаПрибыль()
	
	РаспределениеНалогаНаПрибыль = Новый ТаблицаЗначений;
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("РегистрацияВНалоговомОргане",
		Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("ДоляНалоговойБазы",           Новый ОписаниеТипов("Число"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("СтавкаФедеральныйБюджет",     Новый ОписаниеТипов("Число"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("СтавкаРегиональныйБюджет",    Новый ОписаниеТипов("Число"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("НалоговаяБаза",               Новый ОписаниеТипов("Число"));
	
	Возврат РаспределениеНалогаНаПрибыль;
	
КонецФункции

// Рассчитывает налоговую базу по налогу на прибыль
// (по неокругленным компонентам налоговой базы; в том числе, по данным бухгалтерского учета).
//
// Параметры:
//  НачалоПериода	  - Дата - начало периода расчета
//  КонецПериода	  - Дата - конец периода расчета
//  Организация		  - СправочникСсылка.Организации - налогоплательщик (головная организация)
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  СчетНалоговойБазы - ПланСчетовСсылка.Хозрасчетный - субсчет счета прибылей и убытков, соответствующий части налоговой базы,
//                      облагаемой по отдельной ставке налога (в частном случае - не облагаемой).
//                      Если не передан, подразумевается счет 99.01.1
//                      ("Прибыли и убытки по деятельности с основной системой налогообложения").
//  ВРазрезеВариантовНалогообложения - Булево - Если "Истина", данные будут получены в разрезе вариантов н/о
// 
// Возвращаемое значение:
//  РезультатЗапроса - суммы налоговой базы по выбранным видам учета. Содержит колонки
//   * ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли - (опционально) вариант н/о.
//   * Сумма   - Число;
//   * СуммаНУ - Число;
//   * СуммаПР - Число;
//   * СуммаВР - Число.
//
Функция РезультатЗапроса_СуммыНалоговойБазы(НачалоПериода,
											КонецПериода,
											Организация,
											МенеджерВременныхТаблиц = Неопределено,
											СчетНалоговойБазы = Неопределено,
											ВРазрезеВариантовНалогообложения = Ложь)
	
	Если СчетНалоговойБазы = Неопределено Тогда
		СчетНалоговойБазы = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	КонецЕсли;
	
	СоставБазы = Новый Массив;
	СоставБазы.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	СоставБазы.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	СоставБазы.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	
	// Счета финансового результата закрываются по пустой аналитике ПрибылиИУбытки,
	// поэтому исключать закрывающие обороты не требуется.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СоставБазы",    СоставБазы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр(
		"СчетаПрибылиУбытки",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетНалоговойБазы));
		
	// Счет прибыли - пассивный, поэтому оборот - отрицательный
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПолеВариантНалогообложенияПрибыли             КАК ВариантНалогообложенияПрибыли,
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаОборот), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаНУОборот), 0) КАК СуммаНУ,
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаПРОборот), 0) КАК СуммаПР,
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаВРОборот), 0) КАК СуммаВР
	|//ПОМЕСТИТЬ СуммыНалоговойБазы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаПрибылиУбытки),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&СоставБазы),
	|			,
	|			) КАК ПрибылиУбытки
	|
	|СГРУППИРОВАТЬ ПО
	|	&ПолеВариантНалогообложенияПрибыли
	|";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
		Запрос,
		ВРазрезеВариантовНалогообложения,
		"ПрибылиУбытки.Субконто2",
		ВидыСубконто);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПОМЕСТИТЬ СуммыНалоговойБазы", "ПОМЕСТИТЬ СуммыНалоговойБазы");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции

#КонецОбласти

#Область ТорговыйСбор

// В соответствии с п. 10 ст. 286 налогоплательщик вправе уменьшить сумму налога (авансового платежа),
// исчисленного по итогам налогового (отчетного) периода,
// зачисляемую в консолидированный бюджет субъекта Российской Федерации ...
// на сумму торгового сбора, фактически уплаченного с начала налогового периода до даты уплаты налога (авансового платежа).

// При этом если организация не вправе уменьшить налог на прибыль на суммы торгового сбора,
// то в соответствии с ПБУ 9 следует признать расход по обычным видам деятельности.

// В программе при расчете торгового сбора (т.е. до начисления налога на прибыль) признается расход.
// При начислении налога на прибыль этот расход может быть отсторнирован в той сумме, на которую можно уменьшить налог.

Функция ЕстьЗадолженностьПоТорговомуСбору(Организация, ДатаПодписи) Экспорт
	
	// В соответствии с п. 10 ст. 286 налог может быть уменьшен только на суммы сбора,
	// фактически уплаченные в бюджет до даты уплаты налога.
	// Предполагаем, что декларация заполняется ранее даты уплаты налога.
	// Поэтому, если до даты составления декларации сбор не уплачен (есть любая задолженность),
	// то сумму налога не уменьшаем.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаПодписи", НачалоДня(ДатаПодписи));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПодписи, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор), , Организация В (&Организации)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НалогФактическиУменьшенныйНаСуммыТорговогоСбора(Период, Организация) Экспорт
	
	// Уменьшение налога отражается проводками Дт 68.04.1 Кт 68.13
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Результат.Колонки.Добавить("Сумма",                       ТипСуммаНалога());
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = // Запрос может быть модифицирован ниже с помощью СхемаЗапроса
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.Субконто3 КАК РегистрацияВНалоговомОргане,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|				И Субконто2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
	|				И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто3,
	|	ХозрасчетныйОбороты.КорСчет
	|
	|ИМЕЮЩИЕ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) > 0";
	
	Если Не НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Колонки.Удалить(1); // Не используется "РегистрацияВНалоговомОргане"
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПроводкиУменьшениеНаСуммуТорговогоСбора(Движения, НачислениеНалога, Период, Организация, ПрименяетсяПБУ18)
	
	// Определим суммы уменьшения налога
	
	УменьшениеНалога = УменьшениеНалогаНаСуммуТорговогоСбора(Период, Организация, НачислениеНалога); // Далее в УменьшениеНалога могут быть добавлены колонки
	УменьшениеНалога.Колонки.Добавить("СуммаУменьшенРанее",  УменьшениеНалога.Колонки.СуммаУменьшения.ТипЗначения);
	УменьшениеНалога.Колонки.Добавить("СуммаПроводки",       УменьшениеНалога.Колонки.СуммаУменьшения.ТипЗначения);
	
	Если Не ЗначениеЗаполнено(УменьшениеНалога) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим суммы, на которые налог был уменьшен ранее.
	
	Если Месяц(Период) > 1 Тогда
		// Есть предыдущие отчетные периоды
		ПредыдущийОтчетныйПериод = НачалоМесяца(Период) - 1;
		НалогУменьшенРанее = НалогФактическиУменьшенныйНаСуммыТорговогоСбора(ПредыдущийОтчетныйПериод, Организация);
		
		Для Каждого ЗаписьНалогУменьшенРанее Из НалогУменьшенРанее Цикл
			
			Если НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
				СтрокаУменьшениеНалога = УменьшениеНалога.Найти(ЗаписьНалогУменьшенРанее.РегистрацияВНалоговомОргане,"РегистрацияВНалоговомОргане");
			ИначеЕсли ЗначениеЗаполнено(УменьшениеНалога) Тогда
				СтрокаУменьшениеНалога = УменьшениеНалога[0];
			Иначе
				СтрокаУменьшениеНалога = Неопределено;
			КонецЕсли;
			Если СтрокаУменьшениеНалога = Неопределено Тогда
				СтрокаУменьшениеНалога = УменьшениеНалога.Добавить();
				СтрокаУменьшениеНалога.РегистрацияВНалоговомОргане = ЗаписьНалогУменьшенРанее.РегистрацияВНалоговомОргане;
			КонецЕсли;
			
			СтрокаУменьшениеНалога.СуммаУменьшенРанее = СтрокаУменьшениеНалога.СуммаУменьшенРанее + ЗаписьНалогУменьшенРанее.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// На разницу сформируем проводки.
	// При этом
	// - либо отсторнируем суммы торгового сбора, ранее отнесенные к расходам
	// - либо восстановим ранее отсторнированные.
	
	// Сначала рассчитаем суммы проводок...
	
	Для Каждого ЗаписьУменьшениеНалога Из УменьшениеНалога Цикл
		ЗаписьУменьшениеНалога.СуммаПроводки = ЗаписьУменьшениеНалога.СуммаУменьшения - ЗаписьУменьшениеНалога.СуммаУменьшенРанее;// Ниже можем уточнить, если окажется, что налог начислялся не за счет расходов
	КонецЦикла;
	
	СуммаПроводок = УменьшениеНалога.Итог("СуммаПроводки");
	
	Если СуммаПроводок > 0 Тогда // ранее был признан расход. Надо его сторнировать
		Расходы = РасходыТорговыйСбор(Период, Организация);
		СуммаКорректировкиРасходов = Мин(Расходы.Итог("Сумма"), СуммаПроводок);
		СодержаниеПроводок = НСтр("ru = 'Сторнированы расходы в виде сумм уплаченного торгового сбора';
									|en = 'Expenses as paid sales charge are reversed'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	Иначе // восстанавливаем ранее отсторнированный расход
		Расходы = РанееОтсторнированныеРасходыТорговыйСбор(Период, Организация);
		СуммаКорректировкиРасходов = Макс(Расходы.Итог("Сумма"), СуммаПроводок); // суммы отрицательные, поэтому max
		СодержаниеПроводок = НСтр("ru = 'Восстановлены расходы в виде сумм уплаченного торгового сбора';
									|en = 'Expenses as paid sales charge amount are restored'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	КонецЕсли;
	
	СуммыКорректировкиРасходов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
		СуммаКорректировкиРасходов,
		Расходы.ВыгрузитьКолонку("Сумма"),
		0);
	Если СуммыКорректировкиРасходов = Неопределено Тогда
		Расходы.ЗаполнитьЗначения(0, "Сумма");
	Иначе
		Расходы.ЗагрузитьКолонку(СуммыКорректировкиРасходов, "Сумма");
	КонецЕсли;
	
	Если СуммаПроводок <> СуммаКорректировкиРасходов Тогда
		
		СуммыКорректировкиНалога = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам( // Здесь корректируем налог только за счет корректировки расходов
			СуммаКорректировкиРасходов,
			УменьшениеНалога.ВыгрузитьКолонку("СуммаПроводки"),
			0);
		Если СуммыКорректировкиНалога = Неопределено Тогда
			УменьшениеНалога.ЗаполнитьЗначения(0, "СуммаПроводки");
		Иначе
			УменьшениеНалога.ЗагрузитьКолонку(СуммыКорректировкиНалога, "СуммаПроводки");
		КонецЕсли;
		
	КонецЕсли;
	
	// ... затем сформируем проводки
	
	// 1. Корректировка расходов
	СкорректированыРасходы = Ложь;
	Для Каждого ЗаписьРасходы Из Расходы Цикл
		
		Если ЗаписьРасходы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Две похожие проводки:
		ПроводкиРасходы = Новый Структура;
		ПроводкиРасходы.Вставить("Дебет44Кредит68", Движения.Хозрасчетный.Добавить()); // скорректируем расходы на счете 44
		ПроводкиРасходы.Вставить("Дебет90Кредит44", Движения.Хозрасчетный.Добавить()); // регламентная операция "Закрытие счета 44" уже выполнена, поэтому закроем счет отдельно
		
		// Счет 68
		ПроводкиРасходы.Дебет44Кредит68.СчетКт = ПланыСчетов.Хозрасчетный.ТорговыйСбор;
		
		БухгалтерскийУчет.УстановитьСубконто(
			ПроводкиРасходы.Дебет44Кредит68.СчетКт,
			ПроводкиРасходы.Дебет44Кредит68.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		// Счет 44
		// См. также РасчетСебестоимости.СписатьРасходыНаПродажу().
		// Здесь проводки выполняем локальным кодом, потому что здесь вызывать общий алгоритм избыточно:
		// все расходы не принимаемые для целей налогового учета и не относятся к специальным режимам.
		// Однако, принимаем ограничение: результат корректировки расходов не получится записать в регистры сведений о ходе расчета.
		ИспользованиеСчета44 = Новый Структура;
		ИспользованиеСчета44.Вставить("Дебет44Кредит68", "Дт");
		ИспользованиеСчета44.Вставить("Дебет90Кредит44", "Кт");
		
		Для Каждого ИспользованиеСчета Из ИспользованиеСчета44 Цикл
			Проводка = ПроводкиРасходы[ИспользованиеСчета.Ключ];
			СторонаПроводки = ИспользованиеСчета.Значение;
			
			// Устанавливаем счет на основе ранее сделанных проводок (они формировались с учетом настроек статьи расходов "Торговый сбор"):
			Проводка["Счет" + СторонаПроводки] = ЗаписьРасходы.Счет;
		
			Для НомерСубконто = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка["Счет" + СторонаПроводки],
					Проводка["Субконто" + СторонаПроводки],
					НомерСубконто,
					ЗаписьРасходы["Субконто" + НомерСубконто]);
			КонецЦикла;
		КонецЦикла;
		
		// Счет 90.07
		СтатьяТорговогоСбора = ПланыВидовХарактеристик.СтатьиРасходов.ТорговыйСбор;
		СтруктураИзмеренийНастройки = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
		СтруктураИзмеренийНастройки.Организация = Организация;
		СтруктураИзмеренийНастройки.АналитикаУчета = СтатьяТорговогоСбора;
		СтруктураИзмеренийНастройки.МестоУчета = ЗаписьРасходы.Подразделение;
		НастройкиОтраженияТорговогоСбора = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.НастройкаОтраженияРаздела("Расходы", СтруктураИзмеренийНастройки, "СписаниеРасходовОСНО");
		// Деятельность, облагаемая торговым сбором, не облагается ЕНВД:
		СчетСписанияОСНО = НастройкиОтраженияТорговогоСбора.СписаниеРасходовОСНО;
		ПроводкиРасходы.Дебет90Кредит44.СчетДт = ?(ЗначениеЗаполнено(СчетСписанияОСНО), СчетСписанияОСНО, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
		
		// общие свойства проводок
		Для Каждого ОписаниеПроводки Из ПроводкиРасходы Цикл
			
			Проводка = ОписаниеПроводки.Значение;
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = СодержаниеПроводок;
			Проводка.Сумма       = - ЗаписьРасходы.Сумма;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ЗаписьРасходы.Подразделение, ЗаписьРасходы.Подразделение);
			
			Если Проводка.СчетДт.УчетПоНаправлениямДеятельности Тогда
				Проводка["НаправлениеДеятельностиДт"] = ЗаписьРасходы.НаправлениеДеятельности;
			КонецЕсли;
			Если Проводка.СчетКт.УчетПоНаправлениямДеятельности Тогда
				Проводка["НаправлениеДеятельностиКт"] = ЗаписьРасходы.НаправлениеДеятельности;
			КонецЕсли;
			
			// Такой расход не отражается в налоговом учете
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0, 0, Проводка.Сумма, Проводка.Сумма, 0, 0, Проводка, ПрименяетсяПБУ18);
			
		КонецЦикла;
		
		СкорректированыРасходы = Истина; // Это приведет к записи набора Хозрасчетный до окончания проведения
		
	КонецЦикла;
	
	ТорговыйСборПереопределяемый.ОтразитьУменьшениеНалогаНаПрибыльНаСуммуТорговогоСбораВОператпивныхРегистрах(Организация, Период, -Расходы.Итог("Сумма"), Движения);
	
	// 2. Может потребоваться повторно закрыть счет 90
	Если СкорректированыРасходы Тогда
		Движения.Хозрасчетный.Записать(Ложь);
		ПроводкиЗакрытиеСчета90 = ЗакрытиеМесяца.ПроводкиЗакрытиеСчета90(Период, Организация);
		ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(Движения, ПроводкиЗакрытиеСчета90, Период, Организация);
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать(Ложь);// Данные о расходах повлияют на расчет налога для целей ПБУ 18
		КонецЕсли;
		Движения.Хозрасчетный.Прочитать(); // В дальнейшем записи обновятся и перезапишутся, поэтому прочитаем записанные записи, чтобы они сохранились в дальнейшем.
	КонецЕсли;
	
	// 3. Корректировка налога
	Для Каждого ДанныеПроводки Из УменьшениеНалога Цикл
		
		Если ДанныеПроводки.СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Сумма       = ДанныеПроводки.СуммаПроводки;
		Если Проводка.Сумма > 0 Тогда
			Проводка.Содержание  = НСтр("ru = 'Налог на прибыль уменьшен на сумму торгового сбора';
										|en = 'Profit tax is reduced by sales charge amount'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		Иначе
			Проводка.Содержание  = НСтр("ru = 'Восстановлен налог на прибыль, ранее уменьшенный на сумму торгового сбора';
										|en = 'Profit tax previously reduced by the sales charge amount is reimposed'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		КонецЕсли;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов,
			Перечисления.УровниБюджетов.РегиональныйБюджет);
			
		ВидыСубконтоРегистрацияВНалоговомОргане = Новый Массив;
		НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконтоРегистрацияВНалоговомОргане);
		Если ЗначениеЗаполнено(ВидыСубконтоРегистрацияВНалоговомОргане) Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				ВидыСубконтоРегистрацияВНалоговомОргане[0],
				ДанныеПроводки.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговыйСбор;
	
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
		Движения.Хозрасчетный.Записывать = Истина;
			
	КонецЦикла;
	
КонецПроцедуры

// Определяет суммы уменьшения налога на прибыль на суммы торгового сбора, начисленного за налоговый период.
//
// Параметры:
//  Период		     - Дата - указание на отчетный период. Можно передавать дату окончания периода
//  Организация	     - СправочникСсылка.Организации - организация, по которой исчисляется налог и сбор
//  НачислениеНалога - см. НовыйНачислениеНалогаНаПрибыль
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки РегистрацияВНалоговомОргане, СуммаНалога, СуммаУменьшения.
//
Функция УменьшениеНалогаНаСуммуТорговогоСбора(Период, Организация, НачислениеНалога)
	
	ТипСуммаНалога = ТипСуммаНалога();
	
	УменьшениеНалога = Новый ТаблицаЗначений;
	УменьшениеНалога.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	УменьшениеНалога.Колонки.Добавить("СуммаНалога",                 ТипСуммаНалога);
	УменьшениеНалога.Колонки.Добавить("СуммаУменьшения",             ТипСуммаНалога);
	
	Если Не ТорговыйСборПереопределяемый.УплачиваетсяТорговыйСбор(Организация, Период) Тогда
		Возврат УменьшениеНалога;
	КонецЕсли;
	
	// 1. Возьмем сумму начисленного торгового сбора с начала года по конец закрываемого месяца.
	СуммаТорговогоСбора = СуммаНачисленногоТорговогоСбора(Период, Организация);
	Если СуммаТорговогоСбора = 0 Тогда
		Возврат УменьшениеНалога;
	КонецЕсли;
	
	// 2. Определим регистрации в налоговом органе, относящиеся к региону с торговым сбором.
	РегистрацииТерриторииТорговогоСбора = РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора(Организация);
	Если Не ЗначениеЗаполнено(РегистрацииТерриторииТорговогоСбора) Тогда
		Возврат УменьшениеНалога;
	КонецЕсли;
	
	// 3. Определим сумму налога, уплаченного в бюджет с торговым сбором
	Для Каждого Начисление Из НачислениеНалога Цикл
		
		Если Начисление.УровеньБюджета <> Перечисления.УровниБюджетов.РегиональныйБюджет Тогда
			Продолжить;
		КонецЕсли;
		
		Если РегистрацииТерриторииТорговогоСбора.Найти(Начисление.РегистрацияВНалоговомОргане) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УменьшениеНалога.Добавить(), Начисление, "РегистрацияВНалоговомОргане, СуммаНалога");
		
	КонецЦикла;
	
	УменьшениеНалога.Свернуть("РегистрацияВНалоговомОргане", "СуммаНалога, СуммаУменьшения");
	
	НалогВБюджетТерриторииТорговогоСбора = УменьшениеНалога.Итог("СуммаНалога");
	
	// 4. Определим сумму, на которую можно уменьшить налог
	СуммаУменьшения = Макс(0, Мин(СуммаТорговогоСбора, НалогВБюджетТерриторииТорговогоСбора));
	
	// 5. Распределим сумму из п. 4 между регистрациями из п. 2 пропорционально суммам
	//    начисленного налога.
	СуммыУменьшения = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
		СуммаУменьшения,
		УменьшениеНалога.ВыгрузитьКолонку("СуммаНалога"),
		0); // Налог исчисляется в целых рублях
		
	Если СуммыУменьшения <> Неопределено Тогда
		УменьшениеНалога.ЗагрузитьКолонку(СуммыУменьшения, "СуммаУменьшения");
	КонецЕсли;
	
	Возврат УменьшениеНалога;
	
КонецФункции

Функция РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора(Организация)
	
	РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК ОКТМО,
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец В(&Организации)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора;
	КонецЕсли;
	
	ТаблицаТерриторий = ТорговыйСборПереопределяемый.ПрочитатьТаблицуТерриторий();
	ОКТМОТорговыйСбор = ТаблицаТерриторий.ВыгрузитьКолонку("КодПоОКТМО");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ОКТМО) Тогда
			Продолжить;
		КонецЕсли;
		
		ДлинаКодаТерритории = СтрДлина(Выборка.ОКТМО);
		
		Для Каждого Шаблон Из ОКТМОТорговыйСбор Цикл
			
			ДлинаШаблона = СтрДлина(Шаблон);
			Если ДлинаШаблона > ДлинаКодаТерритории Тогда
				// Не можем достоверно определить
				Продолжить;
			КонецЕсли;
			
			Если Лев(Выборка.ОКТМО, ДлинаШаблона) <> Шаблон Тогда
				// Не на территории торгового сбора
				Продолжить;
			КонецЕсли;
			
			РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора.Добавить(Выборка.Ссылка);
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора;
	
КонецФункции

// Определяет сумму торгового сбора, начисленную в отчетном периоде (с начала года).
//
// См. также РасходыТорговыйСбор(), РанееОтсторнированныеРасходыТорговыйСбор()
// Возвращаемое значение:
//	Число - 
//
Функция СуммаНачисленногоТорговогоСбора(Период, Организация) Экспорт
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация); // Торговый сбор начисляется по головной организации
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаТорговогоСбора
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Окр(Выборка.СуммаТорговогоСбора, 0);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Определяет суммы расходов в виде торгового сбора за год в разрезе аналитики расходов.
// Эта сумма может быть меньше, чем общая сумма торгового сбора, так как часть сбора может уменьшить налог на прибыль
// и расходом не является.
// См. также СуммаНачисленногоТорговогоСбора(), РасходыТорговыйСбор().
//
Функция РасходыТорговыйСбор(Период, Организация)
	
	РасходыТорговыйСбор = НовыйРасходыТорговыйСбор();
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат РасходыТорговыйСбор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);// Торговый сбор начисляется по головной организации
	СчетаРасходов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Запрос.УстановитьПараметр("СчетаРасходов", СчетаРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаРасходов),
	|			,
	|			Организация = &Организация
	|				И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|
	|ИМЕЮЩИЕ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НаправлениеДеятельности,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасходыТорговыйСбор.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат РасходыТорговыйСбор;
	
КонецФункции

// Определяет суммы расходов в виде торгового сбора за год в разрезе аналитики расходов,
// которые были отсторнированы при начислении налога на прибыль и уменьшении сумм налога на суммы торгового сбора.
// См. также РасходыТорговыйСбор().
//
Функция РанееОтсторнированныеРасходыТорговыйСбор(Период, Организация) // Суммы показаны с отрицательным знаком
	
	РасходыТорговыйСбор = НовыйРасходыТорговыйСбор();
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат РасходыТорговыйСбор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);// Торговый сбор начисляется по головной организации
	Запрос.УстановитьПараметр(
		"СчетаРасходов",
	    БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ИздержкиОбращения));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.Подразделение КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Счет В (&СчетаРасходов),
	|			,
	|			Организация В (&Организация)
	|				И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт < 0
	|	И ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.РегламентнаяОперация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НаправлениеДеятельности,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасходыТорговыйСбор.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат РасходыТорговыйСбор;
	
КонецФункции

Функция НовыйРасходыТорговыйСбор()
	
	РасходыТорговыйСбор = Новый ТаблицаЗначений;
	РасходыТорговыйСбор.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РасходыТорговыйСбор.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	РасходыТорговыйСбор.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	РасходыТорговыйСбор.Колонки.Добавить("Субконто1");
	РасходыТорговыйСбор.Колонки.Добавить("Субконто2");
	РасходыТорговыйСбор.Колонки.Добавить("Субконто3");
	РасходыТорговыйСбор.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	
	Возврат РасходыТорговыйСбор;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ УСЛОВНОГО ДОХОДА (РАСХОДА) ПО НАЛОГУ НА ПРИБЫЛЬ

Функция ПодготовитьТаблицуРасчетНалогаНаПрибыль(ТаблицаРеквизиты, СписокОрганизаций, Отказ) Экспорт
	
	// Условный расход (условный доход) по налогу на прибыль
	// рассчитывается следующим образом: определяется сумма
	// бухгалтерской прибыли (убытка) и умножается на ставку
	// налога на прибыль.
	
	РасчетНалога = ПолучитьТаблицаРасчетНалога();
	Параметры    = ПодготовитьПараметры(РасчетНалога, Неопределено, ТаблицаРеквизиты);
	Реквизиты    = Параметры.Реквизиты[0];
	ТаблицаНалогаНаПрибыль = Параметры.ТаблицаРасчетНалога;
	
	// Виды прибылей и убытков, которые учитываются при расчете
	// условного расхода (условного дохода) по налогу на прибыль.
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",        Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",        Реквизиты.КонДата);
	Запрос.УстановитьПараметр("Организации",    СписокОрганизаций);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.УстановитьПараметр("СтавкаНалога",   Реквизиты.СтавкаНалогаНаПрибыль);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА((ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) * &СтавкаНалога) КАК СуммаУсловногоНалога
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация В (&Организации)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Перечисление.ПрибылиИУбытки) В (&ПрибылиИУбытки),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.СуммаУсловногоНалога > 0 Тогда
			Запись = ТаблицаНалогаНаПрибыль.Добавить();
			Запись.СуммаНалога        = Выборка.СуммаУсловногоНалога;
			Запись.СуммаЕНВД          = 0;
			Запись.КоррСчет           = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль; // 99.02.1
			Запись.ПоДебету           = "Д";
			Запись.СодержаниеПроводки = НСтр("ru = 'Условный расход по налогу на прибыль';
											|en = 'Provisional corporate profit tax expense'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		Иначе
			Запись = ТаблицаНалогаНаПрибыль.Добавить();
			Запись.СуммаНалога        = -Выборка.СуммаУсловногоНалога;
			Запись.СуммаЕНВД          = 0;
			Запись.КоррСчет           = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль; // 99.02.2
			Запись.ПоДебету           = "К";
			Запись.СодержаниеПроводки = НСтр("ru = 'Условный доход по налогу на прибыль';
											|en = 'Provisional corporate profit tax income'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаНалогаНаПрибыль;
	
КонецФункции // ПодготовитьТаблицуРасчетНалогаНаПрибыль

Функция СуммарнаяУстановленнаяСтавкаНалога(
	Период, Организация, ФормаПредставленияРезультата = "Доля", ВариантНалогообложенияПрибыли = Неопределено) Экспорт
	
	Возврат НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(
				Период, Организация, ФормаПредставленияРезультата, ВариантНалогообложенияПрибыли)
			+ НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(
				Период, Организация, ФормаПредставленияРезультата, ВариантНалогообложенияПрибыли);
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТ ПОСТОЯННЫХ И ОТЛОЖЕННЫХ НАЛОГОВЫХ АКТИВОВ И ОБЯЗАТЕЛЬСТВ

Процедура ОбработатьОтрицательныеАктивыИОбязательства(Строка, ОтридцательныеПНО, ОтридцательныеПНА)
	
	Активы = Строка.СуммаПНА;
	Обязательства = Строка.СуммаПНО;
	
	// отрицательные обязательства преобразуются в активы
	Если ОтридцательныеПНО Тогда
		Строка.СуммаПНО = Строка.СуммаПНО - Обязательства;
		Строка.СуммаПНА = Строка.СуммаПНА - Обязательства;
	КонецЕсли;
	
	// отрицательные активы преобразуются в обязательства
	Если ОтридцательныеПНА Тогда
		Строка.СуммаПНО = Строка.СуммаПНО - Активы;
		Строка.СуммаПНА = Строка.СуммаПНА - Активы;
	КонецЕсли;
	
	// Приводим к одному знаку суммы, повлиявшие на доходы,расходы, и активы-обязательства.
	
	Если (Строка.ПовлиялиНаРазницывОценкеРасходовННП + Строка.ПовлиялиНаРазницывОценкеРасходовНеННП) * (Строка.СуммаПНА + Строка.СуммаПНО) < 0 Тогда
		Строка.ПовлиялиНаРазницывОценкеРасходовННП = - Строка.ПовлиялиНаРазницывОценкеРасходовННП;
		Строка.ПовлиялиНаРазницывОценкеРасходовНеННП = - Строка.ПовлиялиНаРазницывОценкеРасходовНеННП;
		Строка.Признаны = Строка.ПовлиялиНаРазницывОценкеРасходовННП + Строка.ПовлиялиНаРазницывОценкеРасходовНеННП + Строка.ПеренесеныНаДругиеОбъекты - (Строка.НачОстатокДт - Строка.НачОстатокКт);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуРазницВОценкеАктивов(Реквизиты, ТаблицаВидовАктивовИОбязательствДляРаспределения, МассивТаблицРезультатов, ВидРазницы, КоличествоОбрабатываемыхДанных, ОтридцательныеПНО = Ложь, ОтридцательныеПНА = Ложь)
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);

	ТаблицаРазниц = Новый ТаблицаЗначений;
	ТаблицаРазниц.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаРазниц.Колонки.Добавить("ВидРазницыПБУ18", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРазницПБУ18"));
	ТаблицаРазниц.Колонки.Добавить("ВидАктивовИОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаРазниц.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазниц.Колонки.Добавить("Субконто1");
	ТаблицаРазниц.Колонки.Добавить("Субконто2");
	ТаблицаРазниц.Колонки.Добавить("Субконто3");
	ТаблицаРазниц.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаРазниц.Колонки.Добавить("НачальныйОстаток", ОписаниеТипаЧисла15_2);
	ТаблицаРазниц.Колонки.Добавить("КонечныйОстаток", ОписаниеТипаЧисла15_2);
	ТаблицаРазниц.Колонки.Добавить("Признаны", ОписаниеТипаЧисла15_2);
	ТаблицаРазниц.Колонки.Добавить("ПеренесеныНаДругиеОбъекты", ОписаниеТипаЧисла15_2);
	ТаблицаРазниц.Колонки.Добавить("ПовлиялиНаРазницывОценкеРасходовННП", ОписаниеТипаЧисла15_2);
	ТаблицаРазниц.Колонки.Добавить("ПовлиялиНаРазницывОценкеРасходовНеННП", ОписаниеТипаЧисла15_2);
	
	
	НачДата 	= Реквизиты.НачДата;
	Инд = 0;
	ПР =  Перечисления.ВидыРазницПБУ18.ПР;
	
	ТаблицаОборотов = Новый ТаблицаЗначений;
	ТаблицаОборотов.Колонки.Добавить("СуммаНалога", ОписаниеТипаЧисла15_2);
	ТаблицаОборотов.Колонки.Добавить("Субконто", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаОборотов.Колонки.Добавить("ПоДебету", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаОборотов.Колонки.Добавить("КоррСчет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОборотов.Колонки.Добавить("СуммаЕНВД", ОписаниеТипаЧисла15_2);
	ТаблицаОборотов.Колонки.Добавить("СодержаниеПроводки", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	ТаблицаОборотов.Колонки.Добавить("Субконто1");
	ТаблицаОборотов.Колонки.Добавить("Субконто2");
	ТаблицаОборотов.Колонки.Добавить("Субконто3");
	ТаблицаОборотов.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаОборотов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));

	СчетаРазниц = Новый Структура("Счет09, Счет77, Счет68042",
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы,
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства,
								  ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	
	Для каждого Таблица Из МассивТаблицРезультатов Цикл	
		ВидАктивовИОбязательств = ТаблицаВидовАктивовИОбязательствДляРаспределения[Инд].ВидАктивовОбязательств;
		Счет = ТаблицаВидовАктивовИОбязательствДляРаспределения[Инд].Счета[0];
		ВедетсяУчетПоПодразделениям = Счет.УчетПоПодразделениям;		
		
		ФлагОС_НМА = ВидАктивовИОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства
			ИЛИ ВидАктивовИОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы
			ИЛИ ВидАктивовИОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			КоличествоОбрабатываемыхДанных = КоличествоОбрабатываемыхДанных + 1;
			
			Запись 							= ТаблицаРазниц.Добавить();
			Если ВедетсяУчетПоПодразделениям И НЕ ФлагОС_НМА Тогда
				Запись.Подразделение        = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			Запись.Период            		= НачДата;
			Запись.ВидРазницыПБУ18 			= ВидРазницы;
			Запись.ВидАктивовИОбязательств 	= ВидАктивовИОбязательств;
			ЗаполнитьЗначенияСвойств(Запись,СтрокаТаблицы);
			
			Если ВидРазницы <> ПР Тогда
				Запись.НачальныйОстаток 	= (СтрокаТаблицы.НачОстатокДт - СтрокаТаблицы.НачОстатокКт);
				Запись.КонечныйОстаток 		= (СтрокаТаблицы.КонОстатокДт - СтрокаТаблицы.КонОстатокКт);
			КонецЕсли;
			
			Если ВидРазницы = ПР Тогда
				
				Если ОтридцательныеПНО ИЛИ ОтридцательныеПНА Тогда
					
					ОбработатьОтрицательныеАктивыИОбязательства(СтрокаТаблицы, ОтридцательныеПНО, ОтридцательныеПНА);
					
				КонецЕсли;
			
				Если СтрокаТаблицы.СуммаПНО <> 0 Тогда
					СтрокаПР = ТаблицаОборотов.Добавить();
					СтрокаПР.Субконто = ВидАктивовИОбязательств;
					СтрокаПР.СуммаНалога = СтрокаТаблицы.СуммаПНО;
					СтрокаПР.ПоДебету = "Д";
					ЗаполнитьЗначенияСвойств(СтрокаПР,СтрокаТаблицы);
				КонецЕсли;
				Если СтрокаТаблицы.СуммаПНА <> 0 Тогда
					СтрокаПР = ТаблицаОборотов.Добавить();
					СтрокаПР.Субконто = ВидАктивовИОбязательств;
					СтрокаПР.СуммаНалога = СтрокаТаблицы.СуммаПНА;
					СтрокаПР.ПоДебету = "К";
					ЗаполнитьЗначенияСвойств(СтрокаПР,СтрокаТаблицы);
				КонецЕсли;
				
			Иначе
				
				СтрокаТаблицы.СуммаДт09 = Окр(СтрокаТаблицы.СуммаДт09 * Реквизиты.СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаДт77 = Окр(СтрокаТаблицы.СуммаДт77 * Реквизиты.СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаКт09 = Окр(СтрокаТаблицы.СуммаКт09 * Реквизиты.СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаКт77 = Окр(СтрокаТаблицы.СуммаКт77 * Реквизиты.СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаЕНВД = Окр(СтрокаТаблицы.СуммаЕНВД * Реквизиты.СтавкаНалогаНаПрибыль, 2);
				
				ОтражениеОНАиОНО(ТаблицаОборотов, ВидАктивовИОбязательств, СтрокаТаблицы, СчетаРазниц);
				
			КонецЕсли;		
			
		КонецЦикла;
		
		Инд = Инд + 1;	
	КонецЦикла;
	
	ТаблицаОборотов.Свернуть("Субконто, ПоДебету, Счет, КоррСчет, Подразделение, Субконто1, Субконто2, Субконто3","СуммаНалога, СуммаЕНВД");
	ТаблицаРазниц.Свернуть("Подразделение, ВидРазницыПБУ18, ВидАктивовИОбязательств, Период, Субконто1, Субконто2, Субконто3, Счет", 
							"НачальныйОстаток, КонечныйОстаток, Признаны, ПеренесеныНаДругиеОбъекты, ПовлиялиНаРазницывОценкеРасходовННП, ПовлиялиНаРазницывОценкеРасходовНеННП");
	
	ТаблицаСтоимости = ПодготовитьТаблицуСтоимостиНалоговыхАктивовИОбязательств(Реквизиты,ТаблицаОборотов,ВидРазницы);
	Возврат Новый Структура("ТаблицаРазницВОценкеАктивовИОбязательств,ТаблицаСтоимостиНалоговыхАктивовИОбязательств",ТаблицаРазниц,ТаблицаСтоимости);
	
КонецФункции	

Функция ПодготовитьТаблицуСтоимостиНалоговыхАктивовИОбязательств(Реквизиты,ТаблицаОборотовРазниц,ВидРазницы)
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);

	ТаблицаСтоимости = Новый ТаблицаЗначений;
	ТаблицаСтоимости.Колонки.Добавить("ВидАктивовИОбязательствПБУ18",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательствПБУ18"));
	ТаблицаСтоимости.Колонки.Добавить("ВидАктивовИОбязательств",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаСтоимости.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаСтоимости.Колонки.Добавить("Признаны",ОписаниеТипаЧисла15_2);
	ТаблицаСтоимости.Колонки.Добавить("Списаны",ОписаниеТипаЧисла15_2);
	ТаблицаСтоимости.Колонки.Добавить("ПризнаныСписаныНеННП",ОписаниеТипаЧисла15_2);
	ТаблицаСтоимости.Колонки.Добавить("Субконто1");
	ТаблицаСтоимости.Колонки.Добавить("Субконто2");
	ТаблицаСтоимости.Колонки.Добавить("Субконто3");
	ТаблицаСтоимости.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаСтоимости.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	НачДата 	= Реквизиты.НачДата;
	Счет09    	= ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77    	= ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	ОНА 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ОНА;
	ОНО 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ОНО;
	ПНА 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ПНА;
	ПНО 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ПНО;
	
	Для Каждого Строка Из ТаблицаОборотовРазниц Цикл
		Если ВидРазницы = Перечисления.ВидыРазницПБУ18.ВР Тогда
			// Образование отложенного налогового актива
			Если (Строка.КоррСчет = Счет09) И (Строка.ПоДебету = "Д") Тогда
				Запись 										= ТаблицаСтоимости.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНА;				
				Запись.Период 								= НачДата;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
			
			// Погашение отложенного налогового актива
			Если (Строка.КоррСчет = Счет09) И (Строка.ПоДебету = "К") Тогда
				Запись 										= ТаблицаСтоимости.Добавить();
				Запись.Списаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= -Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств 	 			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНА;
				Запись.Период 								= НачДата;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
			
			// Образование отложенного налогового обязательства
			Если (Строка.КоррСчет = Счет77) И (Строка.ПоДебету = "К") Тогда
				Запись 										= ТаблицаСтоимости.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНО;
				Запись.Период 								= НачДата;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
			
			// Погашение отложенного налогового обязательства
			Если (Строка.КоррСчет = Счет77) И (Строка.ПоДебету = "Д") Тогда
				Запись 										= ТаблицаСтоимости.Добавить();
				Запись.Списаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= -Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНО;
				Запись.Период 								= НачДата;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
		Иначе
			
			// Постоянное налоговое обязательство
			Если Строка.ПоДебету = "Д" Тогда
				Запись 										= ТаблицаСтоимости.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ПНО;
				Запись.Период 								= НачДата;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			// Постоянный налоговый актив
			ИначеЕсли Строка.ПоДебету = "К" Тогда
				Запись 										= ТаблицаСтоимости.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ПНА;
				Запись.Период 								= НачДата;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСтоимости.Свернуть("ВидАктивовИОбязательствПБУ18,ВидАктивовИОбязательств,Период","Признаны,Списаны,ПризнаныСписаныНеННП");
	
	Возврат ТаблицаСтоимости;
	
КонецФункции	

Функция ПодготовитьТаблицыРазницИСтоимостиПНО_ПНА(Реквизиты,СписокОрганизаций, КоличествоОбрабатываемыхДанных, ОтридцательныеПНО, ОтридцательныеПНА)
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ПрочиеДоходы;
	НоваяСтрока.Счета = ОбщегоНазначения.СкопироватьРекурсивно(
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы),
		Ложь);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ПрочиеРасходы;
	НоваяСтрока.Счета = ОбщегоНазначения.СкопироватьРекурсивно(
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы),
		Ложь);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		
	ТаблицаВидовАктивовИОбязательствДляРаспределения = ТаблицаВидовАктивовИОбязательств.СкопироватьКолонки();
	
	инд                 = 0; // начинаем с нуля
	ПакетПНО_ПНА        = Новый Запрос;                   
	ТекстЗапросаПНО_ПНА = "";
	СоответствиеСтрокДляСвертки                     = Новый Соответствие;
	СоответствиеДляТаблицыВидовАктивовИОбязательств = Новый Соответствие;
	
	ПакетПНО_ПНА.УстановитьПараметр("НачДата",     Новый Граница(НачалоДня(Реквизиты.НачДата), ВидГраницы.Включая));
	ПакетПНО_ПНА.УстановитьПараметр("КонДата",     Новый Граница(КонецДня(Реквизиты.КонДата), ВидГраницы.Включая));
	ПакетПНО_ПНА.УстановитьПараметр("Организации", СписокОрганизаций);
	ПакетПНО_ПНА.УстановитьПараметр("СтавкаНалога", Реквизиты.СтавкаНалогаНаПрибыль);
	
	ПакетПНО_ПНА.УстановитьПараметр("Счета90", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи));
	ПакетПНО_ПНА.УстановитьПараметр("Счета9101",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы));
	ПакетПНО_ПНА.УстановитьПараметр("Счета9102", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	СчетаУчетаАктивовИОбязательств = Новый Массив;
	
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	СчетаЗатрат = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаЗатрат);
	
	ПакетПНО_ПНА.УстановитьПараметр("СчетаЕН", СчетаЗатрат);
	
	// Рассчитываем постоянные налоговые обязательства и активы и отражаем их.
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		Если Не СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода Тогда
			
			ТекстЗапросаПНО_ПНА = ОборотыПостоянныхРазницПоВидуАктивовОбязательствСформироватьПакет(
			СтрокаВидАктиваОбязательства, инд, СоответствиеСтрокДляСвертки);
			
			ТекИндекс           = инд - 1;
			ПакетПНО_ПНА.Текст  = ПакетПНО_ПНА.Текст + ?(ТекИндекс = 0, "", ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()) + ТекстЗапросаПНО_ПНА;
			
			ПакетПНО_ПНА.УстановитьПараметр("МассивСчетов" + ТекИндекс, СтрокаВидАктиваОбязательства.Счета);
			ПакетПНО_ПНА.УстановитьПараметр("ВидСубконто"  + ТекИндекс, СтрокаВидАктиваОбязательства.Субконто);
			Для Каждого СчетУчета Из СтрокаВидАктиваОбязательства.Счета Цикл
				СчетаУчетаАктивовИОбязательств.Добавить(СчетУчета);
			КонецЦикла;
			СоответствиеДляТаблицыВидовАктивовИОбязательств.Вставить(ТекИндекс, ТаблицаВидовАктивовИОбязательств.Индекс(СтрокаВидАктиваОбязательства));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПустаяСтруктура = Новый Структура("ТаблицаРазницВОценкеАктивовИОбязательств,ТаблицаСтоимостиНалоговыхАктивовИОбязательств",Новый ТаблицаЗначений,Новый ТаблицаЗначений);
	
	Если ПакетПНО_ПНА.Текст = "" Тогда
		Возврат ПустаяСтруктура;
	КонецЕсли;
	
	ПакетПНО_ПНА.УстановитьПараметр("СчетаУчетаАктивовИОбязательств",СчетаУчетаАктивовИОбязательств);
	
	МассивТаблицРезультатов = Новый Массив;
	Результат = ПакетПНО_ПНА.ВыполнитьПакет();
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.ВГраница() >= 0 Тогда
		Для инд = 0 По Результат.ВГраница() Цикл
			Если СоответствиеСтрокДляСвертки.Получить(инд) = Неопределено Тогда // если нет в Соответствии - значит, это временная таблица
				Продолжить;
			КонецЕсли;
			
			ТаблицаРезультатов = Новый ТаблицаЗначений;
			ТаблицаРезультатов = Результат[инд].Выгрузить();
			
			Если ТаблицаРезультатов.Количество() > 0 Тогда
				
				ТаблицаРезультатов.Свернуть(СоответствиеСтрокДляСвертки[инд],
					"НачОстатокКт, КонОстатокКт, НачОстатокДт, КонОстатокДт, ОборотДт, ОборотКт, ОборотЕН, Признаны, ПеренесеныНаДругиеОбъекты, ПовлиялиНаРазницывОценкеРасходовННП, ПовлиялиНаРазницывОценкеРасходовНеННП,СуммаПНА,СуммаПНО");
					
					Если (ТаблицаРезультатов.Итог("Признаны") + ТаблицаРезультатов.Итог("ПеренесеныНаДругиеОбъекты") + ТаблицаРезультатов.Итог("ПовлиялиНаРазницывОценкеРасходовННП")
						+ ТаблицаРезультатов.Итог("ПовлиялиНаРазницывОценкеРасходовНеННП") + ТаблицаРезультатов.Итог("СуммаПНА") + ТаблицаРезультатов.Итог("СуммаПНО")) = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					МассивТаблицРезультатов.Добавить(ТаблицаРезультатов);
				
				СтрокаТаблицы = ТаблицаВидовАктивовИОбязательствДляРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТаблицаВидовАктивовИОбязательств[СоответствиеДляТаблицыВидовАктивовИОбязательств.Получить(инд)]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат ПустаяСтруктура;
	КонецЕсли;
	
	Возврат ПодготовитьТаблицуРазницВОценкеАктивов(Реквизиты,ТаблицаВидовАктивовИОбязательствДляРаспределения,МассивТаблицРезультатов,Перечисления.ВидыРазницПБУ18.ПР, КоличествоОбрабатываемыхДанных, ОтридцательныеПНО, ОтридцательныеПНА);

КонецФункции

// Получает данные ВР по виду активов/обязательств
// 
// Параметры:
// 	Реквизиты - СтрокаТаблицыЗначений - 
// 	ТаблицаРезультатов - ТаблицаЗначений - 
// 	ТаблицаРаспределяемыхРасходов - ДеревоЗначений, ТаблицаЗначений - 
// 	КоличествоОбъектовАналитики - Число - 
// Возвращаемое значение:
// 	ТаблицаЗначений - 
Функция ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет(Реквизиты, ТаблицаРезультатов, ТаблицаРаспределяемыхРасходов, КоличествоОбъектовАналитики)
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	ИндексРасходов = -1;
	Если КоличествоОбъектовАналитики <> 0 Тогда
		
		// Обеспечиваем одинаковый порядок строк в таблицах. Далее в алгоритме для слияния данных таблиц мы не ищем в одной таблице
		// значения из другой, а параллельно идём и по одной, и по другой.
		СравнениеПоИдентификаторам = Новый СравнениеЗначений;
		ТаблицаРаспределяемыхРасходов.Сортировать("КорСубконто1", СравнениеПоИдентификаторам);
		ТаблицаРезультатов.Сортировать("Субконто1", СравнениеПоИдентификаторам);
		
		// Позиционируемся в начало таблицы.
		ИндексРасходов = 0;
		КоличествоРасходов = ТаблицаРаспределяемыхРасходов.Количество();
		СтрокаРаспределяемогоРасхода = ?(КоличествоРасходов > 0, ТаблицаРаспределяемыхРасходов[ИндексРасходов], Неопределено);
		
	КонецЕсли;
	
	ТаблицаРезультатов.Колонки.Добавить("СуммаДт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаДт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаЕНВД");
	
	Для Каждого Строка Из ТаблицаРезультатов Цикл
		
		СводноеСальдоКон = ?(Строка.КонОстатокДт = NULL, 0, Строка.КонОстатокДт) - ?(Строка.КонОстатокКт = NULL, 0, Строка.КонОстатокКт);
		СводноеСальдоНач = ?(Строка.НачОстатокДт = NULL, 0, Строка.НачОстатокДт) - ?(Строка.НачОстатокКт = NULL, 0, Строка.НачОстатокКт);
		Разница          = ?(Строка.ОборотДт = NULL, 0, Строка.ОборотДт) - ?(Строка.ОборотКт = NULL, 0, Строка.ОборотКт);
		
		// Определим сумму временных разниц, приходящуюся на деятельность, облагаемую ЕНВД,
		// для распределяемых затрат, связанных с амортизацией и списанием РБП.
		СуммаРаспределяемогоРасхода  = 0;
		СуммаЕНВДРасхода             = 0;
		Если КоличествоОбъектовАналитики = 0              // 1. не нужно распределять расходы
		 Или ИндексРасходов >= КоличествоРасходов Тогда   // 2. все расходы распределены
		 
			СтрокаРаспределяемогоРасхода = Неопределено;
			
		Иначе
			
			// Определяем расход, который будет распределяться.
			СмещениеИндексаРасходов = ?(СтрокаРаспределяемогоРасхода = Неопределено,
										-1,
										СравнениеПоИдентификаторам.Сравнить(Строка.Субконто1, СтрокаРаспределяемогоРасхода.КорСубконто1));
			Пока СмещениеИндексаРасходов > 0 Цикл   // пропускаем ненужные распределяемые расходы
			   
				ИндексРасходов = ИндексРасходов + 1;
				Если ИндексРасходов < КоличествоРасходов Тогда
					СтрокаРаспределяемогоРасхода = ТаблицаРаспределяемыхРасходов[ИндексРасходов];
					СмещениеИндексаРасходов = СравнениеПоИдентификаторам.Сравнить(Строка.Субконто1, СтрокаРаспределяемогоРасхода.КорСубконто1);
				Иначе
					СмещениеИндексаРасходов = -1;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			Если СмещениеИндексаРасходов < 0 Тогда   // нет подходящего распределяемого расхода
				СтрокаРаспределяемогоРасхода = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаРаспределяемогоРасхода = Неопределено Тогда
			Строка.СуммаЕНВД = Строка.ОборотЕН;
		Иначе
			СуммаРаспределяемогоРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатрат;
			СуммаЕНВДРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатратЕНВД;
			Строка.СуммаЕНВД = СуммаРаспределяемогоРасхода * Реквизиты.КоэффициентЕНВД + СуммаЕНВДРасхода;
		КонецЕсли;
		
		Если СводноеСальдоНач > 0 Тогда
			Если  СводноеСальдоКон - СводноеСальдоНач > 0 Тогда
				Строка.СуммаКт77 = Разница;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = 0;
			ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
				Строка.СуммаКт77 = 0;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = 0;
				Иначе  Если (СводноеСальдоКон < 0) И (СводноеСальдоНач >= 0) Тогда
					Строка.СуммаДт09 = - СводноеСальдоКон;
					Строка.СуммаДт77 = СводноеСальдоНач;
					Строка.СуммаКт09 = 0;
					Строка.СуммаКт77 = 0;
				Иначе
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = -Разница;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если  СводноеСальдоКон - СводноеСальдоНач < 0 Тогда
				Строка.СуммаКт77 = 0;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = - СводноеСальдоКон + СводноеСальдоНач;
			ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
				Строка.СуммаКт77 = 0;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = 0;
				Иначе  Если (СводноеСальдоКон > 0) И (СводноеСальдоНач <= 0) Тогда
					Строка.СуммаКт77 = СводноеСальдоКон;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = -СводноеСальдоНач;
					Строка.СуммаДт09 = 0;
				Иначе
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = Разница;
					Строка.СуммаДт09 = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат  ТаблицаРезультатов;
	
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет()

Функция ОборотыВременныхРазницПоВидуАктивовОбязательствСформироватьПакет(СтрокаВидАктиваОбязательства, ТекИндекс = 0, СоответствиеСтрокДляСвертки = "")
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	ВедетсяУчетПоПодразделениям = СтрокаВидАктиваОбязательства.Счета[0].УчетПоПодразделениям;
	
	МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
	Если НЕ КоличествоОбъектовАналитики = 0 Тогда
		ФлагОС_НМА = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства
			ИЛИ СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы
			ИЛИ СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
		ФлагОбъектовСтроительства = МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
		ФлагНЗП    = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	Иначе
		ФлагОС_НМА = Ложь;
		ФлагОбъектовСтроительства = Ложь;
		ФлагНЗП    = Ложь;
	КонецЕсли;
	
	ТекстЗапросаШаблон =
					"ВЫБРАТЬ
					|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
					|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
					|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
					|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
					|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3,
					|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт) КАК НачОстатокДт,
					|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт) КАК КонОстатокДт,
					|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокКт) КАК НачОстатокКт,
					|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокКт) КАК КонОстатокКт,
					|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт) КАК ОборотДт,
					|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРОборотКт) КАК ОборотКт,
					|	СУММА(0) КАК ОборотЕН,
					|	СУММА(0) КАК Признаны,
					|	СУММА(0) КАК ПеренесеныНаДругиеОбъекты,
					|	СУММА(0) КАК ПовлиялиНаРазницывОценкеРасходовННП,
					|	СУММА(0) КАК ПовлиялиНаРазницывОценкеРасходовНеННП
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
					|			&НачДата,
					|			&КонДата,
					|			,
					|			ДвиженияИГраницыПериода,
					|			Счет В (&МассивСчетов),
					|			&ВидСубконто,
					|			Организация В (&Организации)) КАК ХозрасчетныйОстаткиИОбороты
					|
					|СГРУППИРОВАТЬ ПО
					|	ХозрасчетныйОстаткиИОбороты.Счет,
					|	ХозрасчетныйОстаткиИОбороты.Субконто1,
					|	ХозрасчетныйОстаткиИОбороты.Субконто2,
					|	ХозрасчетныйОстаткиИОбороты.Субконто3,
					|	ХозрасчетныйОстаткиИОбороты.Подразделение
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ХозрасчетныйОбороты.Счет,
					|	ХозрасчетныйОбороты.Подразделение,
					|	ХозрасчетныйОбороты.Субконто1,
					|	ХозрасчетныйОбороты.Субконто2,
					|	ХозрасчетныйОбороты.Субконто3,
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(ХозрасчетныйОбороты.СуммаВРОборотКт),
					|	СУММА(0),
					|	0,
					|	СУММА(0),
					|	СУММА(ВЫБОР
					|			КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
					|				ТОГДА ХозрасчетныйОбороты.СуммаВРОборотДт - ХозрасчетныйОбороты.СуммаВРОборотКт
					|			ИНАЧЕ ХозрасчетныйОбороты.СуммаВРОборотКт - ХозрасчетныйОбороты.СуммаВРОборотДт
					|		КОНЕЦ)
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Обороты(
					|			&НачДата,
					|			&КонДата,
					|			,
					|			Счет В (&МассивСчетов),
					|			&ВидСубконто,
					|			Организация В (&Организации),
					|			КорСчет В (&СчетаЕН),
					|			) КАК ХозрасчетныйОбороты
					|
					|СГРУППИРОВАТЬ ПО
					|	ХозрасчетныйОбороты.Счет,
					|	ХозрасчетныйОбороты.Субконто1,
					|	ХозрасчетныйОбороты.Субконто2,
					|	ХозрасчетныйОбороты.Субконто3,
					|	ХозрасчетныйОбороты.Подразделение
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ХозрасчетныйОбороты.Счет,
					|	ХозрасчетныйОбороты.Подразделение,
					|	ХозрасчетныйОбороты.Субконто1,
					|	ХозрасчетныйОбороты.Субконто2,
					|	ХозрасчетныйОбороты.Субконто3,
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(ВЫБОР
					|			КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
					|				ТОГДА ХозрасчетныйОбороты.СуммаВРОборотДт - ХозрасчетныйОбороты.СуммаВРОборотКт
					|			ИНАЧЕ ХозрасчетныйОбороты.СуммаВРОборотКт - ХозрасчетныйОбороты.СуммаВРОборотДт
					|		КОНЕЦ),
					|	СУММА(0)
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Обороты(
					|			&НачДата,
					|			&КонДата,
					|			,
					|			Счет В (&МассивСчетов),
					|			&ВидСубконто,
					|			Организация В (&Организации),
					|			КорСчет В (&Счета90БезЕН),
					|			) КАК ХозрасчетныйОбороты
					|
					|СГРУППИРОВАТЬ ПО
					|	ХозрасчетныйОбороты.Счет,
					|	ХозрасчетныйОбороты.Субконто1,
					|	ХозрасчетныйОбороты.Субконто2,
					|	ХозрасчетныйОбороты.Субконто3,
					|	ХозрасчетныйОбороты.Подразделение
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ХозрасчетныйОбороты.Счет,
					|	ХозрасчетныйОбороты.Подразделение,
					|	ХозрасчетныйОбороты.Субконто1,
					|	ХозрасчетныйОбороты.Субконто2,
					|	ХозрасчетныйОбороты.Субконто3,
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(0),
					|	СУММА(ВЫБОР
					|			КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
					|				ТОГДА -ХозрасчетныйОбороты.СуммаВРОборотКт + ХозрасчетныйОбороты.СуммаВРОборотДт
					|			ИНАЧЕ ХозрасчетныйОбороты.СуммаВРОборотДт - ВЫБОР
					|					КОГДА ХозрасчетныйОбороты.СуммаВРОборотКт < 0
					|						ТОГДА ХозрасчетныйОбороты.СуммаВРОборотКт
					|					ИНАЧЕ 0
					|				КОНЕЦ
					|		КОНЕЦ),
					|	СУММА(ВЫБОР
					|			КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
					|				ТОГДА ВЫБОР
					|						КОГДА ХозрасчетныйОбороты.СуммаВРОборотДт > 0
					|							ТОГДА ХозрасчетныйОбороты.СуммаВРОборотДт
					|						ИНАЧЕ 0
					|					КОНЕЦ
					|			ИНАЧЕ ВЫБОР
					|					КОГДА ХозрасчетныйОбороты.СуммаВРОборотКт > 0
					|						ТОГДА ХозрасчетныйОбороты.СуммаВРОборотКт
					|					ИНАЧЕ 0
					|				КОНЕЦ
					|		КОНЕЦ),
					|	СУММА(0),
					|	СУММА(0)
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Обороты(
					|			&НачДата,
					|			&КонДата,
					|			,
					|			Счет В (&МассивСчетов),
					|			&ВидСубконто,
					|			Организация В (&Организации),
					|			НЕ КорСчет В (&Счета90ИЕН),
					|			) КАК ХозрасчетныйОбороты
					|
					|СГРУППИРОВАТЬ ПО
					|	ХозрасчетныйОбороты.Счет,
					|	ХозрасчетныйОбороты.Субконто1,
					|	ХозрасчетныйОбороты.Субконто2,
					|	ХозрасчетныйОбороты.Субконто3,
					|	ХозрасчетныйОбороты.Подразделение";
	
	Если ФлагОС_НМА Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.Счет,", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОбороты.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто3", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОбороты.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто2", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОбороты.Субконто2", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 1 Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто1", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОбороты.Субконто1", "");
	КонецЕсли;
		
	Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбыткиПрошлыхЛет Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт",
			"ВЫБОР КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.УбыткиПрошлыхЛет).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет) ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт КОНЕЦ");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт",
			"ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт - ВЫБОР КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.УбыткиПрошлыхЛет).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет) ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт ИНАЧЕ 0 КОНЕЦ");
	КонецЕсли;
	
	ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "&МассивСчетов", "&МассивСчетов" + ТекИндекс);
	ТекстЗапроса       = СтрЗаменить(ТекстЗапросаШаблон, "&ВидСубконто",  "&ВидСубконто"  + ТекИндекс);
	
	СтрокаДляСверткиИзмерения = "" + ?(ФлагОС_НМА, "", "Счет" + ?(ВедетсяУчетПоПодразделениям, ", Подразделение", ""))
		+ ?(КоличествоОбъектовАналитики = 0, "", ", Субконто1") + ?(ФлагОбъектовСтроительства, "", ?(КоличествоОбъектовАналитики >= 2, ", Субконто2",""))
		+ ?(ФлагНЗП, "", ?(КоличествоОбъектовАналитики = 3, ", Субконто3",""));
	СоответствиеСтрокДляСвертки.Вставить(ТекИндекс, СтрокаДляСверткиИзмерения);
	ТекИндекс = ТекИндекс + 1; 
	
	Возврат ТекстЗапроса;
	
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательствСформироватьПакет()

Функция ОборотыПостоянныхРазницПоВидуАктивовОбязательствСформироватьПакет(СтрокаВидАктиваОбязательства, ТекИндекс = 0, СоответствиеСтрокДляСвертки = "")
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	ВедетсяУчетПоПодразделениям = СтрокаВидАктиваОбязательства.Счета[0].УчетПоПодразделениям;
	
	МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
	Если НЕ КоличествоОбъектовАналитики = 0 Тогда
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, ФлагОС_НМА);
		ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
		ФлагНЗП    = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств =
			Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
	Иначе
		ФлагОС_НМА = Ложь;
		ФлагОбъектовСтроительства = Ложь;
		ФлагНЗП    = Ложь;
	КонецЕсли;
	
	//@skip-warning
	ТекстЗапросаШаблон = "ВЫБРАТЬ
	                     |	ХозрасчетныйОстаткиИОбороты.Счет,
	                     |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	                     |	ХозрасчетныйОстаткиИОбороты.Субконто2,
	                     |	ХозрасчетныйОстаткиИОбороты.Субконто3,
	                     |	ХозрасчетныйОстаткиИОбороты.Подразделение,
	                     |	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт КАК НачОстатокДт,
	                     |	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт КАК КонОстатокДт,
	                     |	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокКт КАК НачОстатокКт,
	                     |	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокКт КАК КонОстатокКт,
	                     |	ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт КАК ОборотДт,
	                     |	ХозрасчетныйОстаткиИОбороты.СуммаПРОборотКт КАК ОборотКт,
	                     |	0 КАК ОборотЕН,
	                     |	0 КАК Признаны,
	                     |	0 КАК ПеренесеныНаДругиеОбъекты,
	                     |	0 КАК ПовлиялиНаРазницывОценкеРасходовННП,
	                     |	0 КАК СуммаПНО,
	                     |	0 КАК СуммаПНА,
	                     |	0 КАК ПовлиялиНаРазницывОценкеРасходовНеННП
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			,
	                     |			ДвиженияИГраницыПериода,
	                     |			Счет В (&МассивСчетов)
						 | 				И НЕ Счет В (&Счета90, &Счета9101, &Счета9102),
	                     |			&ВидСубконто,
	                     |			Организация В (&Организации)) КАК ХозрасчетныйОстаткиИОбороты
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ХозрасчетныйОбороты.Счет,
	                     |	ХозрасчетныйОбороты.Субконто1,
	                     |	ХозрасчетныйОбороты.Субконто2,
	                     |	ХозрасчетныйОбороты.Субконто3,
	                     |	ХозрасчетныйОбороты.Подразделение,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ВЫБОР
	                     |		КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	                     |			ТОГДА ХозрасчетныйОбороты.СуммаПРОборотКт - ХозрасчетныйОбороты.СуммаПРОборотДт
	                     |		ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотДт - ХозрасчетныйОбороты.СуммаПРОборотКт
	                     |	КОНЕЦ,
	                     |	ВЫБОР
	                     |		КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	                     |			ТОГДА ХозрасчетныйОбороты.СуммаПРОборотДт
	                     |		ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотКт
	                     |	КОНЕЦ,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			Период,
	                     |			Счет В (&МассивСчетов)
						 | 				И НЕ Счет В (&Счета90, &Счета9101, &Счета9102),
	                     |			&ВидСубконто,
	                     |			Организация В (&Организации),
						 | 			НЕ КорСчет В (&Счета90, &Счета9101, &Счета9102, &СчетаЕН),
	                     |			) КАК ХозрасчетныйОбороты
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ХозрасчетныйОборотыДтКт.СчетДт,";
						 
						 Если КоличествоОбъектовАналитики > 0 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоДт1,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 1 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
	                    	 |	ХозрасчетныйОборотыДтКт.СубконтоДт2,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 2 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоДт3,";
						 КонецЕсли;
						 
						 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
	                     |	ХозрасчетныйОборотыДтКт.ПодразделениеДт,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотДт,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотКт,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотКт * &СтавкаНалога,
	                     |	0
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			Запись,
	                     |			СчетДт В (&МассивСчетов)
						 | 			И НЕ СчетДт В (&Счета90, &Счета9101, &Счета9102),
	                     |			&ВидСубконто,
	                     |			СчетКт В (&Счета9101)
	                     |				И НЕ СчетКт В (&СчетаЕН),
	                     |			,
	                     |			Организация В (&Организации)) КАК ХозрасчетныйОборотыДтКт
	                     |ГДЕ
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотДт <> 0
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ХозрасчетныйОбороты.Счет,
	                     |	ХозрасчетныйОбороты.Субконто1,
	                     |	ХозрасчетныйОбороты.Субконто2,
	                     |	ХозрасчетныйОбороты.Субконто3,
	                     |	ХозрасчетныйОбороты.Подразделение,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ВЫБОР
	                     |		КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	                     |			ТОГДА ХозрасчетныйОбороты.СуммаПРОборотКт
	                     |		ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотДт
	                     |	КОНЕЦ,
	                     |	ВЫБОР
	                     |		КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	                     |			ТОГДА ХозрасчетныйОбороты.СуммаПРОборотКт - ХозрасчетныйОбороты.СуммаПРОборотДт
	                     |		ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотДт - ХозрасчетныйОбороты.СуммаПРОборотКт
	                     |	КОНЕЦ,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ВЫБОР
	                     |		КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	                     |			ТОГДА ХозрасчетныйОбороты.СуммаПРОборотДт
	                     |		ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотКт
	                     |	КОНЕЦ
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			Период,
	                     |			Счет В (&МассивСчетов)
						 | 				И НЕ Счет В (&Счета90, &Счета9101, &Счета9102),
	                     |			&ВидСубконто,
	                     |			Организация В (&Организации),
	                     |			КорСчет В (&СчетаЕН),
	                     |			) КАК ХозрасчетныйОбороты
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ХозрасчетныйОборотыДтКт.СчетКт,";
						 
						 
						 Если КоличествоОбъектовАналитики > 0 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоКт1,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 1 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоКт2,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 2 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоКт3,";
						 КонецЕсли;
						 
						ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
	                     |	ХозрасчетныйОборотыДтКт.ПодразделениеКт,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотКт,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотКт,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотКт * &СтавкаНалога,
	                     |	0
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			Запись,
	                     |			,
	                     |			,
	                     |			СчетКт В (&МассивСчетов)
	                     |				И СчетКт В (&Счета9101),
	                     |			&ВидСубконто,
	                     |			Организация В (&Организации)) КАК ХозрасчетныйОборотыДтКт
	                     |ГДЕ
	                     |	ЕстьNull(ХозрасчетныйОборотыДтКт.СуммаПРОборотДт,0) = 0
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ХозрасчетныйОбороты.Счет,
	                     |	ХозрасчетныйОбороты.Субконто1,
	                     |	ХозрасчетныйОбороты.Субконто2,
	                     |	ХозрасчетныйОбороты.Субконто3,
	                     |	ХозрасчетныйОбороты.Подразделение,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ВЫБОР
	                     |		КОГДА ХозрасчетныйОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	                     |			ТОГДА ХозрасчетныйОбороты.СуммаПРКорОборотКт - ХозрасчетныйОбороты.СуммаПРКорОборотДт
	                     |		ИНАЧЕ ХозрасчетныйОбороты.СуммаПРКорОборотДт - ХозрасчетныйОбороты.СуммаПРКорОборотКт
	                     |	КОНЕЦ,
	                     |	ВЫБОР
						 |		КОГДА ХозрасчетныйОбороты.КорСчет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
						 |			ТОГДА 0
						 |		ИНАЧЕ (ХозрасчетныйОбороты.СуммаПРКорОборотКт - ХозрасчетныйОбороты.СуммаПРКорОборотДт) * &СтавкаНалога
						 |	КОНЕЦ,
						 |	ВЫБОР
						 |		КОГДА ХозрасчетныйОбороты.КорСчет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
						 |			ТОГДА (ХозрасчетныйОбороты.СуммаПРКорОборотДт - ХозрасчетныйОбороты.СуммаПРКорОборотКт) * &СтавкаНалога
						 |		ИНАЧЕ 0
						 |	КОНЕЦ,
						 |	0
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			Период,
	                     |			Счет В (&МассивСчетов)
						 | 			И НЕ Счет В (&Счета90, &Счета9101, &Счета9102),
	                     |			&ВидСубконто,
	                     |			Организация В (&Организации),
	                     |			КорСчет В (&Счета90)
	                     |				И НЕ КорСчет В (&СчетаЕН),
	                     |			) КАК ХозрасчетныйОбороты
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ХозрасчетныйОборотыДтКт.СчетДт,";
						 
						 Если КоличествоОбъектовАналитики > 0 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоДт1,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 1 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоДт2,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 2 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоДт3,";
						 КонецЕсли;
						 
						ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
	                     |	ХозрасчетныйОборотыДтКт.ПодразделениеКт,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотДт,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотДт,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотДт * &СтавкаНалога, 
	                     |	0,	
						 |	0
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			Период,
	                     |			СчетДт В (&МассивСчетов)
	                     |				И СчетДт В (&Счета9102),
	                     |			&ВидСубконто,
	                     |			,
	                     |			,
	                     |			Организация В (&Организации)) КАК ХозрасчетныйОборотыДтКт
	                     |ГДЕ
	                     |	ЕстьNull(ХозрасчетныйОборотыДтКт.СуммаПРОборотКт,0) = 0
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ХозрасчетныйОборотыДтКт.СчетКт,";
						 
						 
						 Если КоличествоОбъектовАналитики > 0 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоКт1,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 1 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоКт2,";
						 КонецЕсли;
						 Если КоличествоОбъектовАналитики > 2 Тогда
							 ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
							 |	ХозрасчетныйОборотыДтКт.СубконтоКт3,";
						 КонецЕсли;
						 
						ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
	                     |	ХозрасчетныйОборотыДтКт.ПодразделениеКт,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотКт,
	                     |	0,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотДт,
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотДт * &СтавкаНалога,
	                     |	0,
	                     |	0
	                     |ИЗ
	                     |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                     |			&НачДата,
	                     |			&КонДата,
	                     |			Запись,
	                     |			СчетДт В (&Счета9102)
	                     |				И НЕ СчетДт В (&СчетаЕН),
	                     |			,
	                     |			СчетКт В (&МассивСчетов)
						 | 				И НЕ СчетКт В (&Счета90, &Счета9101, &Счета9102),
	                     |			&ВидСубконто,
	                     |			Организация В (&Организации)) КАК ХозрасчетныйОборотыДтКт
	                     |ГДЕ
	                     |	ХозрасчетныйОборотыДтКт.СуммаПРОборотКт <> 0";

	Если ФлагОС_НМА = 1 Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.Счет,", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОбороты.Счет,", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОборотыДтКт.СчетДт,", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОборотыДтКт.СчетКт,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто3", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОбороты.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто2", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОбороты.Субконто2", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 1 Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОстаткиИОбороты.Субконто1", "");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, ",
			|	ХозрасчетныйОбороты.Субконто1", "");
	КонецЕсли;
		
	Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбыткиПрошлыхЛет Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт",
			"ВЫБОР КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.УбыткиПрошлыхЛет).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет) ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт КОНЕЦ");
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт",
			"ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт - ВЫБОР КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.УбыткиПрошлыхЛет).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет) ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт ИНАЧЕ 0 КОНЕЦ");
		КонецЕсли;
	
	ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "&МассивСчетов", "&МассивСчетов" + ТекИндекс);
	ТекстЗапроса       = СтрЗаменить(ТекстЗапросаШаблон, "&ВидСубконто",  "&ВидСубконто"  + ТекИндекс);
	
	СтрокаДляСверткиИзмерения = "" + ?(ФлагОС_НМА = 1, "", "Счет") + ?(ВедетсяУчетПоПодразделениям, ", Подразделение", "")
		+ ?(КоличествоОбъектовАналитики = 0, "", ", Субконто1") + ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики >= 2, ", Субконто2",""))
		+ ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ", Субконто3",""));
	СоответствиеСтрокДляСвертки.Вставить(ТекИндекс, СтрокаДляСверткиИзмерения);
	ТекИндекс = ТекИндекс + 1;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ОборотыПостоянныхРазницПоВидуАктивовОбязательствСформироватьПакет()

// Рассчитываются постоянные налоговые обязательства (активы)
//
// Параметры:
//		ТаблицаРеквизиты  - ТаблицаЗначений - значения реквизитов необходимых для расчета
//		СписокОрганизаций - СписокЗначений  - с Организациями, по которых необходимо произвести расчет
//		Отказ             - Булево          - признак, что при расчетах возникло исключение.
//		КоличествоОбрабатываемыхДанных - Число
// Возвращаемое значение:
//	Структура - 
//
Функция ПодготовитьТаблицуРасчетПостоянныхРазниц(ТаблицаРеквизиты, СписокОрганизаций, Отказ, КоличествоОбрабатываемыхДанных) Экспорт
	
	// Отложенный налоговый актив (обязательство) рассчитывается следующим образом:
	// Определяется сумма постоянных разниц, отраженных на счете 99.01.1, и
	// умножается на ставку налога на прибыль.
	
	РасчетНалога = ПолучитьТаблицаРасчетНалога();
	Параметры    = ПодготовитьПараметры(РасчетНалога, Неопределено, ТаблицаРеквизиты);
	Реквизиты    = Параметры.Реквизиты[0];
	ТаблицаРасчетПостоянныхРазниц = Параметры.ТаблицаРасчетНалога;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	МассивСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетов);   // разворачиваем до субсчетов
	
	МассивКорСчетов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);   // 99.01.1
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",      Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",      Реквизиты.КонДата);
	Запрос.УстановитьПараметр("Организации",  СписокОрганизаций);
	Запрос.УстановитьПараметр("Счета",        МассивСчетов);
	Запрос.УстановитьПараметр("КорСчета",     МассивКорСчетов);
	Запрос.УстановитьПараметр("СтавкаНалога", Реквизиты.СтавкаНалогаНаПрибыль);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство) КАК КоррСчет,
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотДт * &СтавкаНалога) КАК СуммаДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотКт * &СтавкаНалога) КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета),
	|			,
	|			Организация В (&Организации),
	|			НЕ КорСчет В (&КорСчета),
	|			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СуммаДт > 0 Тогда
			Запись = ТаблицаРасчетПостоянныхРазниц.Добавить();
			Запись.СуммаНалога        = Выборка.СуммаДт;
			Запись.СуммаЕНВД          = 0;
			Запись.КоррСчет           = Выборка.КоррСчет;
			Запись.ПоДебету           = "Д";
			Запись.СодержаниеПроводки = НСтр("ru = 'Постоянное налоговое обязательство';
											|en = 'Ongoing tax liability'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		КонецЕсли;
		
		Если Выборка.СуммаДт < 0 Тогда
			Запись = ТаблицаРасчетПостоянныхРазниц.Добавить();
			Запись.СуммаНалога        = -Выборка.СуммаДт;
			Запись.СуммаЕНВД          = 0;
			Запись.КоррСчет           = Выборка.КоррСчет;
			Запись.ПоДебету           = "К";
			Запись.СодержаниеПроводки = НСтр("ru = 'Постоянный налоговый актив';
											|en = 'Constant tax asset'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		КонецЕсли;
		
		Если Выборка.СуммаКт > 0 Тогда
			Запись = ТаблицаРасчетПостоянныхРазниц.Добавить();
			Запись.СуммаНалога        = Выборка.СуммаКт;
			Запись.СуммаЕНВД          = 0;
			Запись.КоррСчет           = Выборка.КоррСчет;
			Запись.ПоДебету           = "К";
			Запись.СодержаниеПроводки = НСтр("ru = 'Постоянный налоговый актив';
											|en = 'Constant tax asset'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		КонецЕсли;
		
		Если Выборка.СуммаКт < 0 Тогда
			Запись = ТаблицаРасчетПостоянныхРазниц.Добавить();
			Запись.СуммаНалога        = -Выборка.СуммаКт;
			Запись.СуммаЕНВД          = 0;
			Запись.КоррСчет           = Выборка.КоррСчет;
			Запись.ПоДебету           = "Д";
			Запись.СодержаниеПроводки = НСтр("ru = 'Постоянное налоговое обязательство';
											|en = 'Ongoing tax liability'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		КонецЕсли;
		
	КонецЕсли;
	
	ОтридцательныеПНО = Выборка.СуммаДт < 0;
	ОтридцательныеПНА = Выборка.СуммаКт < 0;
	
	ТаблицыДопРегистров = ПодготовитьТаблицыРазницИСтоимостиПНО_ПНА(Реквизиты, СписокОрганизаций, КоличествоОбрабатываемыхДанных, ОтридцательныеПНО, ОтридцательныеПНА);
	
	Возврат Новый Структура("ТаблицаРасчетПостоянныхРазниц, ТаблицаРазницВОценкеАктивовИОбязательств, ТаблицаСтоимостиНалоговыхАктивовИОбязательств",
							ТаблицаРасчетПостоянныхРазниц,
							ТаблицыДопРегистров.ТаблицаРазницВОценкеАктивовИОбязательств,
							ТаблицыДопРегистров.ТаблицаСтоимостиНалоговыхАктивовИОбязательств);
	
КонецФункции // ПодготовитьТаблицуРасчетПостоянныхРазниц

// Рассчитываются отложенные налоговые обязательства и отложенные налоговые активы
//
// Параметры:
//		ТаблицаРеквизиты  - ТаблицаЗначений - значения реквизитов необходимых для расчета
//		СписокОрганизаций - СписокЗначений  - с Организациями, по которых необходимо произвести расчет
//		Отказ             - Булево          - признак, что при расчетах возникло исключение.
//		КоличествоОбрабатываемыхДанных - Число
// Возвращаемое значение:
//	Структура - 
//
Функция РассчитатьВременныеРазницы(ТаблицаРеквизиты, СписокОрганизаций, Отказ, КоличествоОбрабатываемыхДанных) Экспорт
	
	РасчетНалога = ПолучитьТаблицаРасчетНалога();
	Параметры    = ПодготовитьПараметры(РасчетНалога, Неопределено, ТаблицаРеквизиты);
	Реквизиты    = Параметры.Реквизиты[0];
	ТаблицаРасчетВременныхРазниц = Параметры.ТаблицаРасчетНалога;
	
	ДанныеРасчета = Новый Структура();// Эти данные вернем. Данные таблиц ниже могут быть заменены на другие, но состав структуры не изменится.
	ДанныеРасчета.Вставить("ТаблицаРасчетВременныхРазниц",                  ТаблицаРасчетВременныхРазниц);
	ДанныеРасчета.Вставить("ТаблицаРазницВОценкеАктивовИОбязательств",      Новый ТаблицаЗначений);
	ДанныеРасчета.Вставить("ТаблицаСтоимостиНалоговыхАктивовИОбязательств", Новый ТаблицаЗначений);
	
	// Формируется таблица в которой задано соответствие видов 
	// активов (обязательств) счетам налогового учета.
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	
	// 1. Рассчитываем отложенные налоговые обязательства и активы и отражаем их.
	
	инд                 = 0; // начинаем с нуля
	ПакетОНО_ОНА        = Новый Запрос;
	ТекстЗапросаОНО_ОНА = "";
	СоответствиеСтрокДляСвертки                     = Новый Соответствие;
	СоответствиеДляТаблицыВидовАктивовИОбязательств = Новый Соответствие;
	СуммаПересчетаУбытков = 0;
	
	ПакетОНО_ОНА.УстановитьПараметр("НачДата",     Реквизиты.НачДата);
	ПакетОНО_ОНА.УстановитьПараметр("КонДата",     Реквизиты.КонДата);
	ПакетОНО_ОНА.УстановитьПараметр("Организации", СписокОрганизаций);
	ПакетОНО_ОНА.УстановитьПараметр("СтавкаНалога", 0);
	ПакетОНО_ОНА.УстановитьПараметр("СчетаУчетаАктивовИОбязательств",  Новый Массив);
	
	МассивСчетовПродажи = Новый Массив;
	МассивСчетовПродажи.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	МассивСчетовПродажи.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	МассивСчетовПродажи = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовПродажи);   // разворачиваем до субсчетов
	
	МассивСчетов90_91   = Новый Массив;
	МассивСчетов90_91.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	МассивСчетов90_91.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	МассивСчетов90_91 = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетов90_91);   // разворачиваем до субсчетов
	
	Счета90 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи);
	ПакетОНО_ОНА.УстановитьПараметр("Счета90", Счета90);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	СчетаЗатрат = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаЗатрат);   // разворачиваем до субсчетов
	
	ПакетОНО_ОНА.УстановитьПараметр("СчетаЕН", СчетаЗатрат);
	
	Счета90БезЕН = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Счета90БезЕН, Счета90);
	Счета90ИЕН = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Счета90ИЕН, Счета90);
	Для каждого СчетЕН Из СчетаЗатрат Цикл
	
		Индекс90 = Счета90ИЕН.Найти(СчетЕН);
		Если Индекс90 = Неопределено Тогда
			Счета90ИЕН.Добавить(СчетЕН);
		КонецЕсли;
		Индекс90 = Счета90БезЕН.Найти(СчетЕН);
		Если Индекс90 <> Неопределено Тогда
			Счета90БезЕН.Удалить(Индекс90);
		КонецЕсли;
	КонецЦикла;
	ПакетОНО_ОНА.УстановитьПараметр("Счета90ИЕН",   Счета90ИЕН);
	ПакетОНО_ОНА.УстановитьПараметр("Счета90БезЕН", Счета90БезЕН);
	
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода Тогда
			
			РассчитатьОНАПоУбыткамТекущегоПериода(
				ТаблицаРасчетВременныхРазниц, 
				СтрокаВидАктиваОбязательства, 
				Реквизиты, 
				СписокОрганизаций,
				СуммаПересчетаУбытков);
		Иначе
			ТекстЗапросаОНО_ОНА = ОборотыВременныхРазницПоВидуАктивовОбязательствСформироватьПакет(
				СтрокаВидАктиваОбязательства, 
				инд, 
				СоответствиеСтрокДляСвертки);
			
			ТекИндекс           = инд - 1;
			ПакетОНО_ОНА.Текст  = ПакетОНО_ОНА.Текст + ?(ТекИндекс = 0, "", ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()) + ТекстЗапросаОНО_ОНА;
			
			ПакетОНО_ОНА.УстановитьПараметр("МассивСчетов" + ТекИндекс, СтрокаВидАктиваОбязательства.Счета);
			ПакетОНО_ОНА.УстановитьПараметр("ВидСубконто"  + ТекИндекс, СтрокаВидАктиваОбязательства.Субконто);
			
			СоответствиеДляТаблицыВидовАктивовИОбязательств.Вставить(ТекИндекс, ТаблицаВидовАктивовИОбязательств.Индекс(СтрокаВидАктиваОбязательства));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеРасчета.Вставить("ТаблицаРасчетВременныхРазниц", ТаблицаРасчетВременныхРазниц); // Может измениться в РассчитатьОНАПоУбыткамТекущегоПериода()
	ДанныеРасчета.Вставить("СуммаПересчетаУбытков",       СуммаПересчетаУбытков);	
	
	Если ПакетОНО_ОНА.Текст = "" Тогда
		Возврат ДанныеРасчета;
	КонецЕсли;
	
	// 2. Определяем данные распределяемых расходов
	
	ТаблицаВидовАктивовИОбязательствДляРаспределения = ТаблицаВидовАктивовИОбязательств.СкопироватьКолонки();
	
	МассивТаблицРезультатов = Новый Массив;
	Результат = ПакетОНО_ОНА.ВыполнитьПакет();
	Если ТипЗнч(Результат) <> Тип("Массив") Или Результат.Количество() = 0 Тогда
		Возврат ДанныеРасчета;
	Иначе
		Для инд = 0 По Результат.ВГраница() Цикл
			Если СоответствиеСтрокДляСвертки.Получить(инд) = Неопределено Тогда // если нет в Соответствии - значит, это временная таблица
				Продолжить;
			КонецЕсли;
			
			ТаблицаРезультатов = Новый ТаблицаЗначений;
			ТаблицаРезультатов = Результат[инд].Выгрузить();
			
			Если ТаблицаРезультатов.Количество() > 0 Тогда
				ТаблицаРезультатов.Свернуть(СоответствиеСтрокДляСвертки[инд],
					"НачОстатокКт, КонОстатокКт, НачОстатокДт, КонОстатокДт, ОборотДт, ОборотКт, ОборотЕН,
					|Признаны, ПеренесеныНаДругиеОбъекты, ПовлиялиНаРазницывОценкеРасходовННП, ПовлиялиНаРазницывОценкеРасходовНеННП");
					
					МассивТаблицРезультатов.Добавить(ТаблицаРезультатов);
				
				СтрокаТаблицы = ТаблицаВидовАктивовИОбязательствДляРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТаблицаВидовАктивовИОбязательств[СоответствиеДляТаблицыВидовАктивовИОбязательств.Получить(инд)]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗапросРаспределяемыхРасходовПакет = ПолучитьТаблицуРаспределяемыхРасходов(
		Реквизиты, 
		СписокОрганизаций, 
		ТаблицаВидовАктивовИОбязательствДляРаспределения);
	
	Если ЗапросРаспределяемыхРасходовПакет.Текст = "" Тогда
		Возврат ДанныеРасчета;
	КонецЕсли;
	
	инд = 0;
	РезультатДляРаспределения = ЗапросРаспределяемыхРасходовПакет.ВыполнитьПакет();
	
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательствДляРаспределения Цикл
		
		ТаблицаРаспределяемыхРасходов = РезультатДляРаспределения[инд].Выгрузить();
		
		ОборотыВременныхРазниц = ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет(
			Реквизиты,
			МассивТаблицРезультатов[ТаблицаВидовАктивовИОбязательствДляРаспределения.Индекс(СтрокаВидАктиваОбязательства)], // т.к. таблица и массив заполнялись параллельно
			ТаблицаРаспределяемыхРасходов, СтрокаВидАктиваОбязательства.Субконто.Количество());
		
		РассчитатьОНО_ОНА(
			ТаблицаРасчетВременныхРазниц, 
			СтрокаВидАктиваОбязательства, 
			Реквизиты, 
			ОборотыВременныхРазниц);
		
		инд = инд + 1;
		
	КонецЦикла;
	
	ДанныеРасчета.Вставить("ТаблицаРасчетВременныхРазниц", ТаблицаРасчетВременныхРазниц); // Может измениться в РассчитатьОНО_ОНА()
	
	ТаблицыДопРегистров = ПодготовитьТаблицуРазницВОценкеАктивов(
		Реквизиты,
		ТаблицаВидовАктивовИОбязательствДляРаспределения,
		МассивТаблицРезультатов,
		Перечисления.ВидыРазницПБУ18.ВР,
		КоличествоОбрабатываемыхДанных);
	ДанныеРасчета.Вставить("ТаблицаРазницВОценкеАктивовИОбязательств", ТаблицыДопРегистров.ТаблицаРазницВОценкеАктивовИОбязательств);
	
	ТаблицаСтоимостиНалоговыхАктивовИОбязательств = ПодготовитьТаблицуСтоимостиНалоговыхАктивовИОбязательств(
		Реквизиты,
		ТаблицаРасчетВременныхРазниц,
		Перечисления.ВидыРазницПБУ18.ВР);
	ДанныеРасчета.Вставить("ТаблицаСтоимостиНалоговыхАктивовИОбязательств", ТаблицаСтоимостиНалоговыхАктивовИОбязательств);
	
	Возврат ДанныеРасчета;
	
КонецФункции // РассчитатьВременныеРазницы

Функция ПолучитьТаблицуРаспределяемыхРасходов(Реквизиты, СписокОрганизаций, ТаблицаВидовАктивовИОбязательств)
	
	СчетаПрочихРасходов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);

	ЗапросР = Новый Запрос;                                           
	ЗапросР.УстановитьПараметр("НачДата",               Реквизиты.НачДата);
	ЗапросР.УстановитьПараметр("КонДата",               Реквизиты.КонДата);
	ЗапросР.УстановитьПараметр("Организации",           СписокОрганизаций);
	ЗапросР.УстановитьПараметр("СчетаПрочихРасходов",   СчетаПрочихРасходов);
	
	ТекстЗапросаШаблон =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЗатрат,
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЗатратЕНВД,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация В (&Организации),
	|			КорСчет В (&КорСчета),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСубконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	ХозрасчетныйОбороты.КорСубконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&СчетаПрочихРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&Организации),
	|			КорСчет В (&КорСчета),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСубконто1";
	
	инд         = 0;
	ТекстПакета = "";
	Разделитель = "";
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		ЗапросР.УстановитьПараметр("КорСчета" + инд, СтрокаВидАктиваОбязательства.Счета);
		ТекстЗапроса  = СтрЗаменить(ТекстЗапросаШаблон, "(&КорСчета",   "(&КорСчета"   + инд);
		ТекстПакета   = ТекстПакета + Разделитель + ТекстЗапроса;
		
		Разделитель   = ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		инд           = инд + 1;
	КонецЦикла;
	
	ЗапросР.Текст = ТекстПакета;
	
	Возврат ЗапросР;
	
КонецФункции // ПолучитьТаблицуРаспределяемыхРасходов()

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы по конкретному виду активов
// (обязательств).
//
// Параметры:
//		СтрокаВидАктиваОбязательства - СтрокаТаблицыЗначений - строка таблицы, в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Процедура РассчитатьОНО_ОНА(ТаблицаРасчетВременныхРазниц, СтрокаВидАктиваОбязательства, Реквизиты, ОборотыВременныхРазниц)
	
	// Порядок расчета:
	// 1. Определяется остаток налогооблагаемых и вычитаемых разниц по виду активов в целом.
	// 2. Исходя из остатка разниц рассчитывается остаток отложенных налоговых активов
	//    и обязательств, который должен быть отражен на счетах 09 и 77 на конец месяца.
	// 3. Определяется сумма отложенных налоговых активов и обязательств, которая отражена
	//    на счетах 09 и 77 на конец месяца.
	// 4. Счета 09 и 77 корректируются на сумму разниц того что отражено на счете и того,
	//    что должно быть по результатам расчета.
	
	// Получить временные разницы, отраженные на плане счетов
	// по данному виду ОНА (ОНО), распределив их на вычитаемые и налогооблагаемые разницы.
	
	Если  ОборотыВременныхРазниц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем выбытие временных разниц под ЕНВД. Знак суммы ЕНВД соответствует виду
	// временных разниц: положительный - налогооблагаемые, отрицательный - вычитаемые.
	// Суммы изменения отложенных налогов рассчитаны без учета выбытия под ЕНВД, для 
	// правильного определения корсчета (99.02.1 или 68.04.2) следует скорректировать 
	// суммы изменения отложенных налогов. Если есть выбытие налогооблагаемых временных
	// разниц под ЕНВД, то следует его вычесть сначала из погашения ОНО (СуммаДт77),
	// затем остаток добавить в возникновение ОНО (СуммаКт77).
	// Симметрично для выбытия вычитаемых временных разниц и ОНА.
	
	СуммаЕНВД09 = 0;
	СуммаЕНВД77 = 0;
	Для Каждого Запись Из ОборотыВременныхРазниц Цикл
		Если Запись.СуммаЕНВД > 0 Тогда
			СуммаЕНВД77 = СуммаЕНВД77 + Запись.СуммаЕНВД;
			Если Запись.СуммаЕНВД > Запись.СуммаДт77 Тогда
				Запись.СуммаКт77 = Запись.СуммаКт77 + (Запись.СуммаЕНВД - Запись.СуммаДт77);
				Запись.СуммаДт77 = 0;
			Иначе
				Запись.СуммаДт77 = Запись.СуммаДт77 - Запись.СуммаЕНВД;
			КонецЕсли;
		Иначе
			СуммаЕНВД09 = СуммаЕНВД09 - Запись.СуммаЕНВД;
			Если -Запись.СуммаЕНВД > Запись.СуммаКт09 Тогда
				Запись.СуммаДт09 = Запись.СуммаДт09 + (-Запись.СуммаЕНВД - Запись.СуммаКт09);
				Запись.СуммаКт09 = 0;
			Иначе
				Запись.СуммаКт09 = Запись.СуммаКт09 + Запись.СуммаЕНВД;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаДт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт09") * Реквизиты.СтавкаНалогаНаПрибыль, 2);
	СуммаКт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаКт09") * Реквизиты.СтавкаНалогаНаПрибыль, 2);
	СуммаДт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт77") * Реквизиты.СтавкаНалогаНаПрибыль, 2);
	СуммаКт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаКт77") * Реквизиты.СтавкаНалогаНаПрибыль, 2);
	СуммаЕНВД09 = Окр(СуммаЕНВД09 * Реквизиты.СтавкаНалогаНаПрибыль, 2);
	СуммаЕНВД77 = Окр(СуммаЕНВД77 * Реквизиты.СтавкаНалогаНаПрибыль, 2);
	
	ОтражениеОНАиОНО(ТаблицаРасчетВременныхРазниц,
		СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, 
		Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД09, СуммаЕНВД77",
			СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД09, СуммаЕНВД77));
	
КонецПроцедуры

// Рассчитывается отложенные налоговый актив по убыткам текущего
// периода и отражается на счете 09.
//
Процедура РассчитатьОНАПоУбыткамТекущегоПериода(ТаблицаРасчетВременныхРазниц, СтрокаВидАктиваОбязательства, Реквизиты, СписокОрганизаций, СуммаПересчетаУбытков)
	
	ОписаниеНалоговогоПериода = НалоговыйУчет.БлижайшийНалоговыйПериод(Реквизиты.КонДата, Реквизиты.Организация);
	Если Реквизиты.КонДата < ОписаниеНалоговогоПериода.Начало Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПервыйМесяцНалоговогоПериода = (Реквизиты.НачДата = ОписаниеНалоговогоПериода.Начало);
	Если ЭтоПервыйМесяцНалоговогоПериода Тогда
		КонецПредыдущегоМесяцаНалоговогоПериода = Реквизиты.КонДата;
	Иначе
		КонецПредыдущегоМесяцаНалоговогоПериода = НачалоМесяца(Реквизиты.НачДата) - 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",      Реквизиты.НачДата);
	Запрос.УстановитьПараметр("НачалоГода",   ОписаниеНалоговогоПериода.Начало);
	Запрос.УстановитьПараметр("КонДата",      Реквизиты.КонДата);
	Запрос.УстановитьПараметр("КонДатаПред",  КонецПредыдущегоМесяцаНалоговогоПериода);
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организации",  СписокОрганизаций);
	Запрос.УстановитьПараметр("СтавкаНалога", Реквизиты.СтавкаНалогаНаПрибыль);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.СуммаНУОборот > 0
	|			ТОГДА ХозрасчетныйОбороты.СуммаНУОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УбытокНУ,
	|	0 КАК СуммаОстаток09,
	|	0 КАК УбытокНУПрошлый
	|ПОМЕСТИТЬ ВТ_Убытки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонГраница,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация В (&Организации)
	|				И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж), ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов)),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			Организация В (&Организации)
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачДата,
	|			&КонДата,
	|			Месяц,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			Организация В (&Организации)
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.РасходыБудущихПериодов)
	|				И СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.СуммаНУОборот > 0
	|			ТОГДА ХозрасчетныйОбороты.СуммаНУОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонДатаПред,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация В (&Организации)
	|				И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж), ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов)),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Убытки.УбытокНУ * &СтавкаНалога - ВТ_Убытки.СуммаОстаток09) КАК Сумма,
	|	СУММА(ВТ_Убытки.УбытокНУПрошлый * &СтавкаНалога - ВТ_Убытки.СуммаОстаток09) КАК СуммаПересчетаУбытков
	|ИЗ
	|	ВТ_Убытки КАК ВТ_Убытки";
	
	Выборка   = Запрос.Выполнить().Выбрать();
	
	ВременныеРазницы = Новый Структура;
	ВременныеРазницы.Вставить("СуммаДт09", 0);
	ВременныеРазницы.Вставить("СуммаКт09", 0);
	ВременныеРазницы.Вставить("СуммаДт77", 0);
	ВременныеРазницы.Вставить("СуммаКт77", 0);
	ВременныеРазницы.Вставить("СуммаЕНВД", 0);
									
	СчетаАктивовИОбязательств = Новый Структура("Счет09, Счет77, Счет68042",
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы,
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства,
								  ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
		
	Если Выборка.Сумма > 0 Тогда
		ВременныеРазницы.Вставить("СуммаДт09", Выборка.Сумма);
	Иначе
		ВременныеРазницы.Вставить("СуммаКт09", -Выборка.Сумма + Выборка.СуммаПересчетаУбытков);
		СуммаПересчетаУбытков = Выборка.СуммаПересчетаУбытков;
	КонецЕсли;
	
	Если Выборка.Сумма <> 0 Тогда
		ОтражениеОНАиОНО(ТаблицаРасчетВременныхРазниц, СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, ВременныеРазницы, СчетаАктивовИОбязательств);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьОНАПоУбыткамТекущегоПериода

// Упорядочиваются данный для передачи их в процедуру,
// которая формирует записи по счету 68.4.
//
Процедура ОтражениеОНАиОНО(ТаблицаРасчетВременныхРазниц, ВидАктивовОбязательств, ВременныеРазницы, СчетаАктивовИОбязательств = Неопределено)
	
	Если СчетаАктивовИОбязательств = Неопределено Тогда
		Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
		Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
		Счет68042 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Иначе
		// Для избежания многократного обращения к ИБ предопределенные значения получаются в вызывающей функции и далее
		// используются из свойств структуры.
		Счет09 = СчетаАктивовИОбязательств.Счет09;
		Счет77 = СчетаАктивовИОбязательств.Счет77;
		Счет68042 = СчетаАктивовИОбязательств.Счет68042;
	КонецЕсли;
	СуммаДт09 = ВременныеРазницы.СуммаДт09;
	СуммаКт09 = ВременныеРазницы.СуммаКт09;
	СуммаДт77 = ВременныеРазницы.СуммаДт77;
	СуммаКт77 = ВременныеРазницы.СуммаКт77;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВременныеРазницы,"СуммаЕНВД09") Тогда
		СуммаЕНВД09 = ВременныеРазницы.СуммаЕНВД09;
		СуммаЕНВД77 = ВременныеРазницы.СуммаЕНВД77;
	Иначе
		СуммаЕНВД09 = ВременныеРазницы.СуммаЕНВД;
		СуммаЕНВД77 = 0;
	КонецЕсли;
	
	// Образование отложенного налогового актива
	Если СуммаДт09 <> 0 Тогда
		Запись = ТаблицаРасчетВременныхРазниц.Добавить();
		Запись.КоррСчет           = Счет09;
		Запись.СуммаНалога        = СуммаДт09;
		Запись.СуммаЕНВД          = 0;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "Д";
		Запись.СодержаниеПроводки = НСтр("ru = 'Признание отложенного налогового актива';
										|en = 'Deferred tax asset recognition'",
										ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	КонецЕсли;
	
	// Погашение отложенного налогового актива
	Если СуммаКт09 <> 0 Или СуммаЕНВД09 > 0 Тогда
		Запись = ТаблицаРасчетВременныхРазниц.Добавить();
		Запись.КоррСчет           = Счет09;
		Запись.СуммаНалога        = СуммаКт09;
		Запись.СуммаЕНВД          = СуммаЕНВД09;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Погашение отложенного налогового актива';
										|en = 'Repayment of deferred tax asset'",
										ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	КонецЕсли;
	
	// Образование отложенного налогового обязательства
	Если СуммаКт77 <> 0 Тогда
		Запись = ТаблицаРасчетВременныхРазниц.Добавить();
		Запись.КоррСчет           = Счет77;
		Запись.СуммаНалога        = СуммаКт77;
		Запись.СуммаЕНВД          = 0;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Признание отложенного налогового обязательства';
										|en = 'Deferred tax liability recognition'",
										ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаДт77 <> 0 Или СуммаЕНВД77 > 0 Тогда
		Запись = ТаблицаРасчетВременныхРазниц.Добавить();
		Запись.КоррСчет           = Счет77;
		Запись.СуммаНалога        = СуммаДт77;
		Запись.СуммаЕНВД          = СуммаЕНВД77;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "Д";
		Запись.СодержаниеПроводки = НСтр("ru = 'Погашение отложенного налогового обязательства';
										|en = 'Repayment of deferred tax liability'",
										ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	КонецЕсли;
	
	// Списание отложенных налогов в связи со спец. налоговыми режимами.
	// Оборотов по счетам 09 и 77 нет, отложенные налоги списываем напрямую со счета 68.04.2.
	Если СуммаЕНВД09 > 0 И СуммаДт09 = 0 И СуммаКт09 = 0 Тогда
		Запись = ТаблицаРасчетВременныхРазниц.Добавить();
		Запись.КоррСчет           = Счет68042;
		Запись.СуммаНалога        = СуммаЕНВД09;
		Запись.СуммаЕНВД          = СуммаЕНВД09;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Корректировка отложенного налога в связи с выбытием активов и обязательств по деятельности, не облагаемой налогом на прибыль';
										|en = 'Deferred tax adjustment for the disposal of assets and liabilities for business activity not subject to income tax'",
										ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	КонецЕсли;
	Если СуммаЕНВД77 > 0 И СуммаДт77 = 0 И СуммаКт77 = 0 Тогда
		Запись = ТаблицаРасчетВременныхРазниц.Добавить();
		Запись.КоррСчет           = Счет68042;
		Запись.СуммаНалога        = СуммаЕНВД77;
		Запись.СуммаЕНВД          = СуммаЕНВД77;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "Д";
		Запись.СодержаниеПроводки = НСтр("ru = 'Корректировка отложенного налога в связи с выбытием активов и обязательств по деятельности, не облагаемой налогом на прибыль';
										|en = 'Deferred tax adjustment for the disposal of assets and liabilities for business activity not subject to income tax'",
										ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	КонецЕсли;
	
КонецПроцедуры // ОтражениеОНАиОНО

Функция ПолучитьТаблицаРасчетНалога()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаРасчетНалога = Новый ТаблицаЗначений;
	ТаблицаРасчетНалога.Колонки.Добавить("СуммаНалога",        ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНалога.Колонки.Добавить("СуммаЕНВД",          ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНалога.Колонки.Добавить("КоррСчет",           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаРасчетНалога.Колонки.Добавить("Субконто");
	ТаблицаРасчетНалога.Колонки.Добавить("Субконто68_4");
	ТаблицаРасчетНалога.Колонки.Добавить("Субконто68_4_2");
	ТаблицаРасчетНалога.Колонки.Добавить("ПоДебету",           ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаРасчетНалога.Колонки.Добавить("СодержаниеПроводки", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаРасчетНалога;
	
КонецФункции

// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

Процедура СформироватьДвиженияРасчетНалогаНаПрибыль(ТаблицаРасчетНалога, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметры(ТаблицаРасчетНалога, Неопределено, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Счет99 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	
	Для Каждого Запись Из Параметры.ТаблицаРасчетНалога Цикл
		
		Если Запись.Субконто68_4 <> Неопределено Тогда
			Счет68_04   = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
		Иначе
			Счет68_04   = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
		КонецЕсли;
		
		Счет68_04Дебет  = Счет68_04;
		Счет68_04Кредит = Счет68_04;
		
		СуммаНалога = Запись.СуммаНалога;
		Сумма99     = Запись.СуммаЕНВД;
		
		Если СуммаНалога <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СуммаНалога;
			Проводка.Содержание  = Запись.СодержаниеПроводки;
			
			Если Запись.ПоДебету = "Д" Тогда
				Проводка.СчетДт  = Запись.КоррСчет;
				Проводка.СчетКт  = Счет68_04Кредит;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Субконто);
				
				Если Запись.Субконто68_4 <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.Субконто68_4);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.Субконто68_4_2);
				КонецЕсли;
			Иначе
				Проводка.СчетДт = Счет68_04Дебет;
				Проводка.СчетКт = Запись.КоррСчет;
				
				Если Запись.Субконто68_4 <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.Счетдт, Проводка.СубконтоДт, 2, Запись.Субконто68_4);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.Субконто68_4_2);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Субконто);
			КонецЕсли
		КонецЕсли;
		
		Если Сумма99 <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = Сумма99;
			Проводка.Содержание  = Запись.СодержаниеПроводки;
			
			Если (Запись.ПоДебету = "Д" И Сумма99 > 0) Или (Запись.ПоДебету = "К" И Сумма99 < 0) Тогда
				Проводка.СчетДт  = Запись.КоррСчет;
				Проводка.СчетКт  = Счет99;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Субконто);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.Субконто68_4_2);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
			Иначе
				Проводка.СчетДт = Счет99;
				Проводка.СчетКт = Запись.КоррСчет;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Субконто);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.Субконто68_4_2);
			КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияРасчетНалогаНаПрибыль

#Область Антикризис

Процедура ОтразитьОсвобождениеОтНалога(Проводки, НачислениеНалога, КонтекстРасчета, ЕстьРаспределениеНалогаНаПрибыль)
	
	ПериодОсвобождения = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	Если КонтекстРасчета.КонецПериода < ПериодОсвобождения.Начало
		Или КонтекстРасчета.КонецПериода > ПериодОсвобождения.Конец Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(КонтекстРасчета.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	
	// Освобождение от налога предоставляется "в части авансовых платежей ... за минусом ранее начисленных сумм авансовых платежей"
	// При этом надо учитывать, что
	// - в частном случае эта разность может быть отрицательной
	// - проводки по начислению налога могут формироваться в течение второго квартала.
	
	ОсвобождениеОтНалога = НачислениеНалога.Скопировать();
	ОсвобождениеОтНалога.ЗаполнитьЗначения(0, "СуммаАвансовыхПлатежей,СуммаПроводки");
	
	// Для ИсключитьАвансовыеПлатежиДоОсвобожденияОтНалога важно, чтобы для налога в федеральный бюджет регистрация не была заполнена.
	// Очистим ее, а потом восстановим обратно
	Для Каждого Запись Из ОсвобождениеОтНалога Цикл
		Если Запись.УровеньБюджета = Перечисления.УровниБюджетов.ФедеральныйБюджет Тогда
			Запись.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	ИсключитьАвансовыеПлатежиДоОсвобожденияОтНалога(
		ОсвобождениеОтНалога,
		ПериодОсвобождения.Начало,
		КонтекстРасчета.Организация,
		ЕстьРаспределениеНалогаНаПрибыль);
	
	// Свернем освобождение от налога без учета вариантов н/о, т.к. для освобождения налога не ведем данную аналитику
	СвернутьНачислениеНалогаНаПрибыль(ОсвобождениеОтНалога, Истина);
	
	Для Каждого Запись Из ОсвобождениеОтНалога Цикл
		Если Запись.УровеньБюджета = Перечисления.УровниБюджетов.ФедеральныйБюджет Тогда
			Запись.РегистрацияВНалоговомОргане = КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации;
		КонецЕсли;
	КонецЦикла;
	
	// Теперь в СуммаПроводки - сумма освобождения, которая _должна быть_ отражена за этот период.
	// Ее нужно уменьшить на суммы, которые уже отражены - например, при расчете за май
	// нужно вычесть суммы, отраженные в апреле.
	
	СчетФинансовогоРезультатаОсвобождениеОтНалога = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	
	// Субконто РегистрацияВНалоговомОргане может не использоваться в конфигурации
	СубконтоРегистрацияВНалоговомОргане = Неопределено;
	ВидыСубконто = Новый Массив;
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Если ЗначениеЗаполнено(ВидыСубконто) Тогда
		СубконтоРегистрацияВНалоговомОргане = ВидыСубконто[0];
	КонецЕсли;
	
	СубконтоНачисленияНалога = Новый Массив;
	СубконтоНачисленияНалога.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоНачисленияНалога.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
		СубконтоНачисленияНалога.Добавить(СубконтоРегистрацияВНалоговомОргане);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",             ПериодОсвобождения.Начало);
	Запрос.УстановитьПараметр("КонецПериода",              КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация",               КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("СубконтоНачисленияНалога",  СубконтоНачисленияНалога);
	Запрос.УстановитьПараметр("СчетФинансовогоРезультата", СчетФинансовогоРезультатаОсвобождениеОтНалога);
	Запрос.УстановитьПараметр("ОсновнаяРегистрация",       КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации);
	// Запрос может быть модифицирован с помощью схемы запроса - заменено выражение для поля РегистрацияВНалоговомОргане
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсвобождениеОтНалога.СубконтоДт2 КАК УровеньБюджета,
	|	&ОсновнаяРегистрация КАК РегистрацияВНалоговомОргане,
	|	СУММА(ОсвобождениеОтНалога.СуммаОборот) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
	|			&СубконтоНачисленияНалога,
	|			СчетКт = &СчетФинансовогоРезультата,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)) КАК ОсвобождениеОтНалога
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсвобождениеОтНалога.СубконтоДт2
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОсвобождениеОтНалога.СуммаОборот) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	УровеньБюджета,
	|	РегистрацияВНалоговомОргане";
	
	Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
		
		КолонкаРегистрацияВНалоговомОргане = ОписаниеЗапроса.Колонки.Найти("РегистрацияВНалоговомОргане");
		ИндексПоля = ОписаниеЗапроса.Колонки.Индекс(КолонкаРегистрацияВНалоговомОргане);
		
		ВыражениеПоля = Новый ВыражениеСхемыЗапроса(
			"ЕСТЬNULL(ВЫБОР
			|	КОГДА ОсвобождениеОтНалога.СубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
			|	ТОГДА ОсвобождениеОтНалога.СубконтоДт3
			|КОНЕЦ, &ОсновнаяРегистрация)");
		
		ОписаниеЗапроса.Операторы[0].ВыбираемыеПоля.Установить(ИндексПоля, ВыражениеПоля);
			
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("УровеньБюджета");
	Отбор.Вставить("РегистрацияВНалоговомОргане");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Освобождение за весь период не может быть отрицательным.
	// Но при перераспределении налога между подразделениями может быть отрицательная сумма по конкретному подразделению.
	// Если проводки по освобождению уже были сформированы, при отсутствии налога к уплате (убытке) их нужно отсторнировать.
	Если ОсвобождениеОтНалога.Итог("СуммаПроводки") <= 0 И РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Освобождение = ОсвобождениеОтНалога.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Освобождение) Тогда
			Запись = Освобождение[0];
		Иначе
			Запись = ОсвобождениеОтНалога.Добавить();
			ЗаполнитьЗначенияСвойств(ОсвобождениеОтНалога.Добавить(), Выборка);
		КонецЕсли;
			
		Запись.СуммаПроводки = Запись.СуммаПроводки - Выборка.Сумма;
		
	КонецЦикла;
	
	// Собственно формирование проводок
	СодержаниеПроводки = НалоговыйУчет.ТекстСодержанияПроводкиОсвобождениеПострадавшихОтКоронавируса(КонтекстРасчета.КонецПериода);
	
	Для Каждого Запись Из ОсвобождениеОтНалога Цикл
		
		Если Запись.СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
		Проводка.Период      = КонтекстРасчета.КонецПериода;
		Проводка.Организация = КонтекстРасчета.Организация;
		Проводка.Сумма       = Запись.СуммаПроводки;
		Проводка.Содержание  = СодержаниеПроводки;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов,
			Запись.УровеньБюджета);
		Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				СубконтоРегистрацияВНалоговомОргане,
				Запись.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Проводка.СчетКт = СчетФинансовогоРезультатаОсвобождениеОтНалога;
		
		Проводки.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьАвансовыеПлатежиДоОсвобожденияОтНалога(ОсвобождениеОтНалога, НачалоПериодаОсвобождения, Организация, ЕстьРаспределениеНалогаНаПрибыль)
	
	КонтекстРасчета = НовыйКонтекстРасчета(Организация, НачалоПериодаОсвобождения - 1);
	Если КонтекстРасчета = Неопределено Тогда
		// Организация зарегистрирована после начала освобождения, исключать нечего
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьРаспределениеНалогаНаПрибыль Тогда
		
		СоответствиеПрежнихИТекущихНалоговыхОрганов = Неопределено;
		
	Иначе
		
		СоответствиеПрежнихИТекущихНалоговыхОрганов = Новый МенеджерВременныхТаблиц;
		
		РасчетРаспределенияНалоговойБазы = Неопределено;
		НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы(
			РасчетРаспределенияНалоговойБазы,
			КонтекстРасчета,
			0,
			СоответствиеПрежнихИТекущихНалоговыхОрганов);
			
	КонецЕсли;
	
	ИсключитьРанееНачисленныеАвансы(ОсвобождениеОтНалога, КонтекстРасчета, СоответствиеПрежнихИТекущихНалоговыхОрганов);
	
КонецПроцедуры

#КонецОбласти
