#Область ПрограммныйИнтерфейс

#Область ОбработкаСобытий

// Вызывается при получении нового транспортного контейнера, его распаковки
// и записи на основании него элемента справочника ТранзакцииОбменаСБанками,
// но до расшифровки и проверки подписи. Также вызывается в случае ошибки.
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//		* ИдентификаторТранзакции  - Строка - идентификатор транзакции.
//		* Документооборот  - СправочникСсылка.ДокументооборотыОбменаСБанками - документооборот, в рамках которого была получена транзакция.
//
Процедура ПриПолученииТранзакции(Транзакция, Результат) Экспорт
	
	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыТранзакции.Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ПриПолученииТранзакции(РеквизитыТранзакции, Результат);
	
КонецПроцедуры

// Вызывается после расшифровки всех файлов транспортного контейнера, если криптография происходит на сервере или в случае ошибки.
// Для поддержки случая криптографии на клиенте необходимо переопределить
// УниверсальныйОбменСБанкамиКлиентПереопределяемый.ПослеРасшифровкиТранспортногоКонтейнера().
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//		* Предупреждения  - Строка - Предупреждения, возникшие при расшифровке и проверке подписи.
//		* ОтмененоПользователем  - Булево - признак отмены пользователем.
//		* ПодписьНеДействительна  - Булево - Истина, если подпись под одним из документов неверна.
//		* НеизвестныйСертификатПодписи  - Булево - Истина, если подпись выполнена неизвестным сертификатом.
//
Процедура ПриРасшифровкеТранзакции(Транзакция, Результат) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается после отправки транзакции или при ошибке отправки.
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//
Процедура ПриОтправкеТранзакции(Транзакция, Результат) Экспорт

	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыТранзакции.Сервис);

	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ПриОтправкеТранзакции(РеквизитыТранзакции, Результат);
	
КонецПроцедуры

Процедура ПослеЗавершенияОбменаПоСервису(Сервис) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ПослеЗавершенияОбменаПоСервису();
	
КонецПроцедуры

// Вызывается после загрузки данных услуги банка, полученных с сервера.
//
// Параметры:
//	УслугаБанка   - СправочникСсылка.УслугиБанков - ссылка на элемент справочника, данные которого были обновлены.
//
Процедура ПослеЗагрузкиДанныхУслугиБанка(УслугаБанка, ИмяСервиса) Экспорт
	
	Если НЕ ИмяСервиса = "ФинансоваяОтчетность" Тогда
		Возврат;
	КонецЕсли;	
	
	Если ИмяСервиса = "ЗаявкиНаКредит" Или ИмяСервиса = "ЗаявкиНаЛизинг" Тогда
		ИмяМодуля = "ЗаявкиНаКредит";
	ИначеЕсли ИмяСервиса = "ЗаявкиНаОткрытиеСчета" Тогда
		ИмяМодуля = "ЗаявкиНаОткрытиеСчета";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не УниверсальныйОбменСБанками.СервисСуществует(ИмяМодуля) Тогда
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ПослеЗагрузкиДанныхУслугиБанка(УслугаБанка);
	
КонецПроцедуры

#КонецОбласти

#Область Идентификаторы

// Определяет версию сервиса, если он имеется в конфигурации.
//
// Параметры:
//	Сервис        - Перечисление.СервисыОбменаСБанками - Ссылка на сервис.
//	ВерсияСервиса - Строка - возвращаемый параметр. Версия сервиса в формате X.Y .
//
Процедура ОпределитьВерсиюСервиса(Сервис, ВерсияСервиса) Экспорт

	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ЗаявкиНаКредит" Или ИмяСервиса = "ЗаявкиНаЛизинг" Тогда
		ВерсияСервиса = "1.13";
	ИначеЕсли ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ВерсияСервиса = "1.27";
	ИначеЕсли ИмяСервиса = "ЗаявкиНаОткрытиеСчета" Тогда
		ВерсияСервиса = "1.1";
	КонецЕсли;

КонецПроцедуры

// Возвращает имя сервиса, которое используется при получении тикета на портале ИТС.
// Если возвращается пустая строка, то будет использовано значение по умолчанию.
// Параметры:
//   Сервис - Значение перечисления - значение, определяющее сервис для которого необходимо получить имя сервиса на портале
//   Имя - Строка - имя сервиса на портале ИТС
//
Процедура ИмяСервисаНаПорталеИТС(Сервис, Имя) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Возвращеает тип перечисления характеристик сервиса.
// Возвращаемые перечисления должны быть включены в состав определяемого типа ХарактеристикиСервисовУниверсальногоОбменаСБанками
//
// Параметры:
//  Сервис - Значение перечисления - значение, определяющее сервис для которого необходимо получить тип перечисления характеристик.
//
Процедура ПеречислениеХарактеристикСервиса(Сервис, Перечисление) Экспорт
	
	// Возвращаемые перечисления должны быть включены в состав определяемого типа ХарактеристикиСервисовУниверсальногоОбменаСБанками.
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяПеречисления = "ХарактеристикиСервисаФинансовойОтчетности";
	Иначе	
		Возврат;
	КонецЕсли;
	
	Перечисление = Перечисления[ИмяПеречисления];
	
КонецПроцедуры

// Вызывается при получении и расшифровке транзакций.
//
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - набор взаимодействий с банком по определенному
//                                                                      предмету обмена (например, заявке на кредит).
//
// Возвращаемое значение:
//   Структура   - см. УниверсальныйОбменСБанками.ОписаниеСтатусаДокументооборота()
//
Процедура СтатусДокументооборота(Документооборот, ОписаниеСтатуса) Экспорт
	
	Сервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документооборот, "Сервис");
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе		
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.СтатусДокументооборота(Документооборот, ОписаниеСтатуса);
	
КонецПроцедуры

// Возвращает спискок сервисов обмена с банками, для которых проверяется наличие входящих транзакций на сервере.
//
// Параметры:
//   Сервисы - Массив Из ПеречислениеСсылка.СервисыОбменаСБанками - в параметре возвращается список сервисов
//                                                             для проверки входящих транзакций в регламентном задании.
//
Процедура СписокСервисовДляАвтоматическойПроверкиВходящихТранзакций(Сервисы) Экспорт
	
	Сервисы = Новый Массив;
	Для Каждого ЗначениеПеречисления Из Перечисления.СервисыОбменаСБанками Цикл
		Сервисы.Добавить(ЗначениеПеречисления);
	КонецЦикла;
	
КонецПроцедуры

// Возвращеает макет с перечислением характеристик сервиса.
//
// Параметры:
//  Сервис       - ПеречислениеСсылка.СервисыОбменаСБанками - значение, определяющее сервис для которого необходимо
//                                                            получить тип перечисления характеристик.
//  Макет        - ТабличныйДокумент - один из общих макетов.
//
Процедура МакетСервиса(Сервис, Макет) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМакета = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ОписаниеДокументооборотовСервиса" + ИмяМакета);
	
КонецПроцедуры

// В параметре Сервис возвращает строковый идентификатор сервиса на основании анализа параметра СсылкаНаСервис.
// Параметры:
//   Сервис      - Перечисление.СервисыОбменаСБанками - значение перечисления СервисыОбменаСБанками.
//   ИмяСервиса  - Строка - в этот параметр возвращается строковый идентификатор сервиса после анализа параметра Сервис.
//
Процедура ОпределитьСервисПоСсылке(Сервис, ИмяСервиса) Экспорт
	
	Если ТипЗнч(Сервис) = Тип("ПеречислениеСсылка.СервисыОбменаСБанками") Тогда
		ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	КонецЕсли;
	
КонецПроцедуры

// В параметре Сервис возвращает значение перечисления СервисыОбменаСБанками на основании анализа параметра ИмяСервиса.
//
// Параметры:
//   ИмяСервиса  - Строка - строковый идентификатор сервиса.
//   Сервис      - Перечисление.СервисыОбменаСБанками - возвращаемое значение перечисления.
//
Процедура ОпределитьСервисПоИдентификаторуНаСервере(ИмяСервиса, Сервис) Экспорт
	
	Если Не УниверсальныйОбменСБанками.СервисСуществует(ИмяСервиса) Тогда
		// Неизвестный сервис, или сервис недоступен в данной конфигурации.
		Возврат;
	КонецЕсли;
	
	Сервис = Перечисления.СервисыОбменаСБанками[ИмяСервиса];
	
КонецПроцедуры

// Заполняет переданную таблицу этапов отправки.
// 
// Параметры:
//	Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - Документооборот обмена с банками.
//	ДополнительныеПараметры - Структура - Дополнительные параметры для формы состояния обмена.
//	ТаблицаЭтаповОтправки - ТаблицаЗначений - см. УниверсальныйОбменСБанками.ЗаготовкаТаблицыЭтаповОтправки().
//
Процедура ТаблицаЭтаповОтправки(Документооборот, ДополнительныеПараметры, ТаблицаЭтаповОтправки) Экспорт
	
	РеквизитыДокументооборота = УниверсальныйОбменСБанками.РеквизитыДокументооборота(Документооборот);
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыДокументооборота.Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ЗаполнитьТаблицуЭтаповОтправки(РеквизитыДокументооборота, ДополнительныеПараметры, ТаблицаЭтаповОтправки);
	
КонецПроцедуры

Процедура ЕстьКритическиеОшибкиДокументооборота(Сервис, Документооборот, ДополнительныеПараметры, Результат) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	Результат = МодульСервиса.ЕстьКритическиеОшибкиДокументооборота(Документооборот, ДополнительныеПараметры);
	
КонецПроцедуры

// Заполняет данные неотправленных извещений.
//
// Параметры:
// 	Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис обмена.
//	Отбор - Структура - Отбор для УниверсальныйОбменСБанками.ТранзакцииПоТипу().
//	ДанныеИзвещений - Структура - см. УниверсальныйОбменСБанками.НеотправленныеИзвещения()
//
Процедура НеотправленныеИзвещения(Сервис, Отбор, ДанныеИзвещений) Экспорт

КонецПроцедуры

Процедура ПредставлениеПредмета(Сервис, Предмет, БезИмениБанка, Представление) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	ПредметПредставление = МодульСервиса.ПредставлениеПредмета(Предмет, БезИмениБанка);
	Если Не ПустаяСтрока(ПредметПредставление) Тогда
		Представление = ПредметПредставление;
	КонецЕсли;
	
КонецПроцедуры

Процедура СведенияОПредмете(Сервис, Предмет, Сведения, СписокРеквизитов = Неопределено) Экспорт
	
	Если СписокРеквизитов = Неопределено Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Организация, Банк");
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, СписокРеквизитов);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Сведения, ЗначенияРеквизитов);
	
КонецПроцедуры

Процедура ГруппаНовогоСобытияДокументооборота(Сервис, ПараметрыСобытия, Группа) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ГруппаНовогоСобытияДокументооборота(
		УниверсальныйОбменСБанками.ГруппыСобытийСервиса(Сервис),
		ПараметрыСобытия);
	
КонецПроцедуры

Процедура ДатаПоследнегоОбновленияСобытий(Сервис, Дата) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ДатаПоследнегоОбновленияСобытий();
	
КонецПроцедуры

Процедура ГруппыСобытийСервиса(Сервис, ДанныеГрупп) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ФинансоваяОтчетность" Тогда
		ИмяМодуля = "ФинОтчетностьВБанки";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульСервиса = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	МодульСервиса.ГруппыСобытийСервиса(ДанныеГрупп);
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляОтветныхТранзакций(Сервис, ВходящиеТранзакции, Результат) Экспорт
	
КонецПроцедуры

Процедура ТребуетсяРасшифроватьДанныеХарактеристики(Сервис, Характеристика, Результат) Экспорт

	Результат = Ложь;

	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	ИмяХарактеристики = ОбщегоНазначения.ИмяЗначенияПеречисления(Характеристика);
	Если ИмяСервиса = "ЗаявкиНаОткрытиеСчета"
		И (ИмяХарактеристики = "УсловияОбслуживания"
			ИЛИ ИмяХарактеристики = "ДополнительныеПоказатели"
			ИЛИ ИмяХарактеристики = "ГруппыКонтрагентов"
			ИЛИ ИмяХарактеристики = "ДополнительныеФайлы") Тогда
			
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТребуетсяРасшифроватьДанныеСервиса(Сервис, Результат) Экспорт
	
	Результат = Ложь;
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	Если ИмяСервиса = "ЗаявкиНаОткрытиеСчета" Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти