
#Область СлужебныйПрограммныйИнтерфейс

// Процедура добавляет элементы управления, предназначенные для изменения порядка выплаты документов.
//
// Параметры:
//	Элементы	- Все элементы формы.
//
Процедура ПорядокВыплатыЗарплатыДополнитьФорму(Форма, ИмяГруппы = "ВыплатаГруппа", ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 

	Если Форма.Элементы.Найти("ПорядокВыплаты") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		НастройкиДатВыплаты			= Новый РеквизитФормы("НастройкиДатВыплаты", Новый ОписаниеТипов());
		ХарактерВыплатыЗарплата		= Новый РеквизитФормы("ХарактерВыплатыЗарплата", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерВыплатыЗарплаты"));
		ХарактерВыплатыАванс		= Новый РеквизитФормы("ХарактерВыплатыАванс", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерВыплатыЗарплаты"));
		РасчетнаяПланируемаяДатаВыплаты = Новый РеквизитФормы("РасчетнаяПланируемаяДатаВыплаты", Новый ОписаниеТипов("Дата"));
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(НастройкиДатВыплаты);
		Реквизиты.Добавить(ХарактерВыплатыЗарплата);
		Реквизиты.Добавить(ХарактерВыплатыАванс);
		Реквизиты.Добавить(РасчетнаяПланируемаяДатаВыплаты);
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, Реквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		// Устанавливаем значения, не заданные в случае отложенного создания.
		Форма.ХарактерВыплатыЗарплата	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		Форма.ХарактерВыплатыАванс		= Перечисления.ХарактерВыплатыЗарплаты.Аванс;
		ОбновитьПлановыеДатыВыплатыПоОрганизации(Форма);
		
		// Установка свойств элементов формы.
		ВыплатаГруппа = Форма.Элементы[ИмяГруппы];
		ВыплатаГруппа.Заголовок				= "Выплата";
		ВыплатаГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
		ВыплатаГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ПорядокВыплаты = Форма.Элементы.Вставить("ПорядокВыплаты", Тип("ПолеФормы"), ВыплатаГруппа);
		ПорядокВыплаты.Заголовок				= НСтр("ru = 'Выплата';
														|en = 'Payment'");
		ПорядокВыплаты.ПутьКДанным				= "Объект.ПорядокВыплаты";
		ПорядокВыплаты.Вид						= ВидПоляФормы.ПолеВвода;
		ПорядокВыплаты.Ширина					= 18;
		ПорядокВыплаты.РежимВыбораИзСписка		= Истина;
		ПорядокВыплаты.РастягиватьПоГоризонтали	= Ложь;
		ПорядокВыплаты.УстановитьДействие("ПриИзменении", "Подключаемый_ПорядокВыплатыПриИзменении");
		
		ПланируемаяДатаВыплаты = Форма.Элементы.Вставить("ПланируемаяДатаВыплаты", Тип("ПолеФормы"), ВыплатаГруппа);
		ПланируемаяДатаВыплаты.Заголовок	= НСтр("ru = 'Планируемая дата выплаты';
													|en = 'Planned payment date'");
		ПланируемаяДатаВыплаты.ПутьКДанным	= "Объект.ПланируемаяДатаВыплаты";
		ПланируемаяДатаВыплаты.Вид			= ВидПоляФормы.ПолеВвода;
		ПланируемаяДатаВыплаты.УстановитьДействие("ПриИзменении", "Подключаемый_ПланируемаяДатаВыплатыПриИзменении");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет на форму флажок "Рассчитать удержания". Используется в документах, 
// для которых разрешена выплата в межрасчет без расчета удержаний.
//
Процедура РассчитатьУдержанияДополнитьФорму(Форма, ИмяГруппы = "ВыплатаГруппа") Экспорт 

	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 

	Если Форма.Элементы.Найти("РассчитыватьУдержания") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыплатаГруппа = Форма.Элементы[ИмяГруппы];
	
	РассчитыватьУдержания = Форма.Элементы.Вставить("РассчитыватьУдержания", Тип("ПолеФормы"), ВыплатаГруппа);
	РассчитыватьУдержания.Заголовок	= НСтр("ru = 'Рассчитывать удержания';
												|en = 'Calculate deductions'");
	РассчитыватьУдержания.ПутьКДанным	= "Объект.РассчитыватьУдержания";
	РассчитыватьУдержания.Вид			= ВидПоляФормы.ПолеФлажка;
	РассчитыватьУдержания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	РассчитыватьУдержания.УстановитьДействие("ПриИзменении", "Подключаемый_РассчитыватьУдержанияПриИзменении");
	
КонецПроцедуры

// Процедура устанавливает характеры выплаты зарплаты, которые доступны пользователю в зависимости от функциональных
// опций.
//
// Параметры:
//	Элементы	- Все элементы формы.
//
Процедура УстановитьДоступныеХарактерыВыплаты(Элементы) Экспорт
	
	Если Элементы.Найти("ПорядокВыплаты") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПорядокВыплаты.СписокВыбора.ЗагрузитьЗначения(Перечисления.ХарактерВыплатыЗарплаты.ВсеЗначения());
	
КонецПроцедуры

// Процедура обновляет плановые даты выплат при изменении организации.
//
Процедура ОбновитьПлановыеДатыВыплатыПоОрганизации(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;	
	КонецЕсли;
	
	НастройкиДатВыплаты = РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.СведенияОНастройкахОрганизации(
		Форма.Объект.Организация, "ВыплачиватьЗарплатуВПоследнийДеньМесяца,ДатаВыплатыЗарплатыНеПозжеЧем,ДатаВыплатыАвансаНеПозжеЧем,ДатаВыплатыМежрасчетаНеПозжеЧем");
	
	Форма.НастройкиДатВыплаты	= Новый ФиксированнаяСтруктура(НастройкиДатВыплаты);
	
КонецПроцедуры

// Загружает из настроек признак видимости для подробных полей таблиц расчета.
//
Процедура УстановитьРежимОтображенияПодробноИзНастройки(Форма, ОписаниеТаблицы) Экспорт

	КлючОбъекта = Форма.Объект.Ссылка.Метаданные().Имя;
	КлючНастройки = ОписаниеТаблицы.ИмяТаблицы + "Подробно";
	ВидимостьПолейПодробно = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастройки);
	ВидимостьПолейПодробно = ?(ВидимостьПолейПодробно = Неопределено, Ложь, ВидимостьПолейПодробно);
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(Форма, ВидимостьПолейПодробно, ОписаниеТаблицы);

КонецПроцедуры

Функция СведенияОКорректировкахВыплаты(Форма, ПутьКДаннымАдресДанныеОбНДФЛ, ФизическоеЛицо = Неопределено) Экспорт
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(ПутьКДаннымАдресДанныеОбНДФЛ);
	
	Если ФизическоеЛицо = Неопределено Тогда
		КоллекцияСтрокКорректировкиВыплаты = Форма.Объект.КорректировкиВыплаты.Выгрузить();
	Иначе
		
		СтруктураОтбора = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		КоллекцияСтрокКорректировкиВыплаты = Форма.Объект.КорректировкиВыплаты.Выгрузить(СтруктураОтбора);
		
	КонецЕсли;
	
	ДанныеОбНДФЛ.Вставить("КорректировкиВыплаты", КоллекцияСтрокКорректировкиВыплаты);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, Форма.УникальныйИдентификатор);
	
КонецФункции

Функция ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыКорректировкиВыплаты()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыКорректировкиВыплаты();
	ОписаниеТаблицы.ПутьКДанным = "КорректировкиВыплаты";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

Процедура ФормаПодробнееОРасчетеНДФЛПриЗаполнении(Форма) Экспорт
	
	ДокументыВыполненияНачисленийДополнитьФорму(Форма, ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыКорректировкиВыплаты(), "");
	РасчетЗарплатыКлиентСервер.ФормаПодробнееОРасчетеНДФЛУстановитьВидимостьЭлементов(Форма);
	
КонецПроцедуры

Функция КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов() Экспорт
	Возврат РасчетЗарплатыРасширенный.КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов();
КонецФункции

Функция РезультатРаспределенияКорректировкиВыплаты(РаспределениеРезультатовУдержаний, ИдентификаторСтроки) Экспорт
	
	ОписаниеТаблицы = РасчетЗарплатыКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыКорректировкиВыплаты();
	ДанныеРаспределения = РаспределениеРезультатовУдержаний.Выгрузить();
	
	ИменаКолонокТаблицы = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
	
	ОтборСтрок = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ТаблицаРаспределенияПредварительно = ДанныеРаспределения.Скопировать(ОтборСтрок);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ТаблицаРаспределенияПредварительно);
	
	ТаблицаРаспределения = ТаблицаРаспределенияПредварительно.Скопировать(, ИменаКолонокТаблицы);
	СтруктураРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения);
	
	Возврат СтруктураРаспределения;
	
КонецФункции

Процедура ОбновитьФормуПоВариантуРасчетаСреднегоЗаработка(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.ОбновитьФормуПоВариантуРасчетаСреднегоЗаработка(Форма);
	Иначе
		Объект 		= Форма.Объект;
		Элементы 	= Форма.Элементы;
		
		Форма.ЗаголовокГруппыСреднийЗаработок = НСтр("ru = 'Средний заработок';
													|en = 'Average earnings'");
		Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.СреднийЗаработокСтраница;
		Если Элементы.Найти("РасчетДенежногоСодержания") <> Неопределено Тогда
			Элементы.РасчетДенежногоСодержания.Видимость = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область МетодыОбслуживанияФормДокументовВыполняющихНачисления

Процедура ДокументыВыполненияНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяКоманднойПанели = Неопределено, ДобавлятьЭлементыФормы = Истина) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;

	ВидРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект." + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета);
	ИмяПВР = Метаданные.НайтиПоТипу(ТипЗнч(ВидРасчета)).Имя;
	ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели);
	ЗарплатаКадрыРасширенный.ВводНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, 2, ДобавлятьЭлементыФормы);
	ДокументыВыполненияНачисленийУстановитьУсловноеОформление(Форма,ОписаниеТаблицыВидовРасчета);	
КонецПроцедуры	

Процедура ДокументыВыполненияНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели = Неопределено, РегистрацияНачисленийДоступна = Истина, КонтролируемыеПоля = Неопределено, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
	     Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, 2, ИмяПВР, РегистрацияНачисленийДоступна И ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, ДокументСсылка);
	
	Если РегистрацияНачисленийДоступна Тогда
		ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели, КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		Если ДобавлятьЭлементыФормы Тогда
			ДокументыВыполненияНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДокументыВыполненияНачисленийДобавитьРеквизитыОтображенияВремени(МассивДобавляемыхРеквизитов, ОписаниеТаблицыВидовРасчета) Экспорт
	
	Если Не ОписаниеТаблицыВидовРасчета.ОтображатьПоляОписанияВремени Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы(
			"ЕдиницаИзмеренияВремени",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)),
			ПутьКДанным));
	
	// Реквизит ВидВремени добавляется для того, чтобы при изменении полей ОплаченоДней/Часов,
	// понимать переносить ли значения в поля ОтработаноДней/Часов.
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("ВидВремени", 
			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"), ПутьКДанным));
	
КонецПроцедуры

Процедура ДополнитьФормуПолямиОплаченногоВремени(Форма, ОписаниеТаблицы) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ПутьКТаблице = ОписаниеТаблицы.ПутьКДанным;
	ИмяЭлементаДляВставки = ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей;
	
	ВидимостьПолей = ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени;
	РасчетЗарплатыРасширенныйКлиентСервер.УточнитьВидимостьОплаченногоВремениПоВидуРасчета(ВидимостьПолей, Форма, ОписаниеТаблицы);
	
	ГруппаОтработаноОплачено = Элементы.Найти(ИмяТаблицы + "ГруппаОтработаноОплачено");
	Если ГруппаОтработаноОплачено <> Неопределено Тогда
		ГруппаОтработаноОплачено.Видимость = ВидимостьПолей;
		Возврат;
	КонецЕсли;
	
	ЭлементДляВставки = Неопределено;
	Если Не ПустаяСтрока(ИмяЭлементаДляВставки) Тогда
		Если СтрЗаканчиваетсяНа(ИмяЭлементаДляВставки, ОписаниеТаблицы.ИмяПоляРезультат)
			И ЗарплатаКадрыРасширенныйПовтИсп.ВыполнятьРасчетЗависимыхНачисленийПриРазовых()
			И Элементы.Найти(ИмяТаблицы + "РанееНачислено") <> Неопределено Тогда
			ЭлементДляВставки = Элементы.Найти(ИмяТаблицы + ОписаниеТаблицы.ИмяПоляРезультат + "Группа");
		КонецЕсли;
		Если ЭлементДляВставки = Неопределено Тогда
			ЭлементДляВставки = Элементы.Найти(ИмяЭлементаДляВставки);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементДляРазмещения = Элементы.Найти(ИмяТаблицы);
	
	// Группа отображения отработано / оплачено дней / часов.
	ГруппаОтработаноОплачено = Элементы.Вставить(
		ИмяТаблицы + "ГруппаОтработаноОплачено",
		Тип("ГруппаФормы"),
		ЭлементДляРазмещения,
		ЭлементДляВставки);
	ГруппаОтработаноОплачено.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОтработаноОплачено.Заголовок = НСтр("ru = 'Отработано (оплачено)';
												|en = 'Worked (paid)'");
	ГруппаОтработаноОплачено.ОтображатьВШапке = Истина;
	ГруппаОтработаноОплачено.Видимость = ВидимостьПолей;
	
	ГруппаОплаченоДней = Элементы.Добавить(
		ИмяТаблицы + "ГруппаОплаченоДней",
		Тип("ГруппаФормы"),
		ГруппаОтработаноОплачено);
	ГруппаОплаченоДней.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОплаченоДней.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ОплаченоДней = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоДней",
		Тип("ПолеФормы"),
		ГруппаОплаченоДней);
	ОплаченоДней.Вид = ВидПоляФормы.ПолеВвода;
	ОплаченоДней.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	ОплаченоДней.ОтображатьВШапке = Ложь;
	ОплаченоДней.Ширина = 7;
	ОплаченоДней.РастягиватьПоГоризонтали = Ложь;
	ОплаченоДней.ПутьКДанным = ПутьКТаблице + ".ОплаченоДней";
	
	ОтработаноДней = Элементы.Добавить(
		ИмяТаблицы + "ОтработаноДней",
		Тип("ПолеФормы"),
		ГруппаОплаченоДней);
	ОтработаноДней.Вид = ВидПоляФормы.ПолеВвода;
	ОтработаноДней.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	ОтработаноДней.ОтображатьВШапке = Ложь;
	ОтработаноДней.Ширина = 7;
	ОтработаноДней.РастягиватьПоГоризонтали = Ложь;
	ОтработаноДней.ПутьКДанным = ПутьКТаблице + ".ОтработаноДней";
		
	ОплаченоЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоДнейЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаОплаченоДней);
	ОплаченоЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	ОплаченоЕдиницаИзмерения.Ширина = 5;
	ОплаченоЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	ОплаченоЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";
	
	ГруппаОплаченоЧасов = Элементы.Добавить(
		ИмяТаблицы + "ГруппаОплаченоЧасов",
		Тип("ГруппаФормы"),
		ГруппаОтработаноОплачено);
	ГруппаОплаченоЧасов.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОплаченоЧасов.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ОплаченоЧасов = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоЧасов",
		Тип("ПолеФормы"),
		ГруппаОплаченоЧасов);
	ОплаченоЧасов.Вид = ВидПоляФормы.ПолеВвода;
	ОплаченоЧасов.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	ОплаченоЧасов.ОтображатьВШапке = Ложь;
	ОплаченоЧасов.Ширина = 7;
	ОплаченоЧасов.РастягиватьПоГоризонтали = Ложь;
	ОплаченоЧасов.ПутьКДанным = ПутьКТаблице + ".ОплаченоЧасов";
	
	ОтработаноЧасов = Элементы.Добавить(
		ИмяТаблицы + "ОтработаноЧасов",
		Тип("ПолеФормы"),
		ГруппаОплаченоЧасов);
	ОтработаноЧасов.Вид = ВидПоляФормы.ПолеВвода;
	ОтработаноЧасов.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	ОтработаноЧасов.ОтображатьВШапке = Ложь;
	ОтработаноЧасов.Ширина = 7;
	ОтработаноЧасов.РастягиватьПоГоризонтали = Ложь;
	ОтработаноЧасов.ПутьКДанным = ПутьКТаблице + ".ОтработаноЧасов";
		
	ОплаченоЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоЧасовЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаОплаченоЧасов);
	ОплаченоЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	ОплаченоЕдиницаИзмерения.Ширина = 5;
	ОплаченоЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	ОплаченоЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";
		
	// Условное оформление.
	
	НачисленияБезОплаты = Новый СписокЗначений;
	НачисленияБезОплаты.ЗагрузитьЗначения(ПланыВидовРасчета.Начисления.НачисленияБезОплаты());
	
	// Оплачено дней
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'дн.';
								|en = 'days'");
	ГруппаИли = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоДней");
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтработаноДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДнейЕдиницаИзмеренияВремени");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОтработаноДней");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоДней");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Условие.Использование = Истина;
	Условие.ПравоеЗначение = НачисленияБезОплаты;
	Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + "." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
	Иначе
		Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
	КонецЕсли;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДней");
	
	// Если это внутрисменное отсутствие, не показываем дни.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВремяВЧасах");
	Условие.ПравоеЗначение = Истина;
	ГруппаИли = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВидВремени");
	Условие.ПравоеЗначение = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВидВремени");
	Условие.ПравоеЗначение = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОтработаноДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДнейЕдиницаИзмеренияВремени");
	
	// Оплачено часов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'чс.';
								|en = 'h.'");
	ГруппаИли = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоЧасов");
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтработаноЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасовЕдиницаИзмеренияВремени");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОтработаноЧасов");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоЧасов");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Условие.Использование = Истина;
	Условие.ПравоеЗначение = НачисленияБезОплаты;
	Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + "." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
	Иначе
		Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
	КонецЕсли;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасов");
	
	// Если это целодневное отсутствие, не показываем часы.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВремяВЧасах");
	Условие.ПравоеЗначение = Ложь;
	ГруппаИли = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВидВремени");
	Условие.ПравоеЗначение = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Условие = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВидВремени");
	Условие.ПравоеЗначение = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОтработаноЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасовЕдиницаИзмеренияВремени");
	
	// ФиксРасчетВремени
	ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	Если ОписаниеТаблицы.ЭтоПерерасчеты Тогда
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Ложь;
	Иначе 
		ГруппаОтбора =  ЭлементУсловногоОформления.Отбор;
	КонецЕсли;
	Условие = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксРасчетВремени");
	Условие.ПравоеЗначение = Истина;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОтработаноДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОтработаноЧасов");
	
КонецПроцедуры

Процедура ДополнитьФормуПолямиНормыВремени(Форма, ОписаниеТаблицы) Экспорт
	
	// Группа отображения Норма времени дней / часов.
	Если Не ОписаниеТаблицы.ОтображатьПоляНормыВремени Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ПутьКТаблице = ОписаниеТаблицы.ПутьКДанным;
	ИмяЭлементаДляВставки = ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей;
	
	ВидимостьПолей = ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени;
	РасчетЗарплатыРасширенныйКлиентСервер.УточнитьВидимостьНормыВремениПоВидуРасчета(ВидимостьПолей, Форма, ОписаниеТаблицы);
	
	ГруппаНормаВремени = Элементы.Найти(ИмяТаблицы + "ГруппаНормаВремени");
	Если ГруппаНормаВремени <> Неопределено Тогда
		ГруппаНормаВремени.Видимость = ВидимостьПолей;
		Возврат;
	КонецЕсли;
	
	ЭлементДляВставки = Неопределено;
	Если Не ПустаяСтрока(ИмяЭлементаДляВставки) Тогда
		Если СтрЗаканчиваетсяНа(ИмяЭлементаДляВставки, ОписаниеТаблицы.ИмяПоляРезультат)
			И ЗарплатаКадрыРасширенныйПовтИсп.ВыполнятьРасчетЗависимыхНачисленийПриРазовых()
			И Элементы.Найти(ИмяТаблицы + "РанееНачислено") <> Неопределено Тогда
			ЭлементДляВставки = Элементы.Найти(ИмяТаблицы + ОписаниеТаблицы.ИмяПоляРезультат + "Группа");
		КонецЕсли;
		Если ЭлементДляВставки = Неопределено Тогда
			ЭлементДляВставки = Элементы.Найти(ИмяЭлементаДляВставки);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементДляРазмещения = Элементы.Найти(ИмяТаблицы);
	
	ГруппаНормаВремени = Элементы.Вставить(
		ИмяТаблицы + "ГруппаНормаВремени",
		Тип("ГруппаФормы"),
		ЭлементДляРазмещения,
		ЭлементДляВставки);
	ГруппаНормаВремени.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаНормаВремени.Заголовок = НСтр("ru = 'Норма времени';
										|en = 'Standard hours'");
	ГруппаНормаВремени.ОтображатьВШапке = Истина;
	ГруппаНормаВремени.Видимость = ВидимостьПолей;
	
	ГруппаНормаВремениДней = Элементы.Добавить(
		ИмяТаблицы + "ГруппаНормаВремениДней",
		Тип("ГруппаФормы"),
		ГруппаНормаВремени);
	ГруппаНормаВремениДней.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаНормаВремениДней.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	НормаВремениДней = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениДней",
		Тип("ПолеФормы"),
		ГруппаНормаВремениДней);
	НормаВремениДней.Вид = ВидПоляФормы.ПолеВвода;
	НормаВремениДней.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НормаВремениДней.ОтображатьВШапке = Ложь;
	НормаВремениДней.Ширина = 7;
	НормаВремениДней.РастягиватьПоГоризонтали = Ложь;
	НормаВремениДней.ПутьКДанным = ПутьКТаблице + ".НормаДней";
		
	НормаВремениДнейДнейЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениДнейЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаНормаВремениДней);
	НормаВремениДнейДнейЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	НормаВремениДнейДнейЕдиницаИзмерения.Ширина = 5;
	НормаВремениДнейДнейЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	НормаВремениДнейДнейЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";
	
	ГруппаНормаВремениЧасов = Элементы.Добавить(
		ИмяТаблицы + "ГруппаНормаВремениЧасов",
		Тип("ГруппаФормы"),
		ГруппаНормаВремени);
	ГруппаНормаВремениЧасов.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаНормаВремениЧасов.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	НормаВремениЧасов = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениЧасов",
		Тип("ПолеФормы"),
		ГруппаНормаВремениЧасов);
	НормаВремениЧасов.Вид = ВидПоляФормы.ПолеВвода;
	НормаВремениЧасов.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НормаВремениЧасов.ОтображатьВШапке = Ложь;
	НормаВремениЧасов.Ширина = 7;
	НормаВремениЧасов.РастягиватьПоГоризонтали = Ложь;
	НормаВремениЧасов.ПутьКДанным = ПутьКТаблице + ".НормаЧасов";
		
	НормаВремениЧасовЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениЧасовЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаНормаВремениЧасов);
	НормаВремениЧасовЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	НормаВремениЧасовЕдиницаИзмерения.Ширина = 5;
	НормаВремениЧасовЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	НормаВремениЧасовЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";

	// Норма дней
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'дн.';
								|en = 'days'");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".НормаДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениДнейЕдиницаИзмеренияВремени");
	
	// Норма часов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'чс.';
								|en = 'h.'");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".НормаЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениЧасовЕдиницаИзмеренияВремени");
	
	// ФиксРасчетВремени
	ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	Если ОписаниеТаблицы.ЭтоПерерасчеты Тогда
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Ложь;
	Иначе 
		ГруппаОтбора =  ЭлементУсловногоОформления.Отбор;
	КонецЕсли;
		
	Условие = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксРасчетВремени");
	Условие.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениЧасов");
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДополнитьФормуПолямиОтображенияВремени(Форма, ОписаниеТаблицы) Экспорт
	
	Если Не ОписаниеТаблицы.ОтображатьПоляОписанияВремени Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнитьФормуПолямиОплаченногоВремени(Форма, ОписаниеТаблицы);
	ДополнитьФормуПолямиНормыВремени(Форма, ОписаниеТаблицы);
	
КонецПроцедуры

Процедура ДокументыНачисленийДополнитьФорму(Форма, ОписаниеДокумента, ТолькоВоВсехДействиях = Неопределено) Экспорт
	ДокументыВыполненияНачисленийДобавитьКомандуПересчитатьСотрудника(Форма, ОписаниеДокумента, ТолькоВоВсехДействиях);
КонецПроцедуры

Процедура ДокументыНачисленийДополнитьФормуРезультатыРаспределения(Форма, ОписанияТаблиц, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблиц) <> Тип("Массив") Тогда
		ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблиц);
	КонецЕсли;
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		
		ПутьКДанным = ОписаниеТаблицы.ПутьКДанным;
		
		Если ДобавлятьРеквизитыФормы Тогда
		
			МассивИменРеквизитовФормы = Новый Массив;
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
			
			ДобавляемыеРеквизиты = Новый Массив;
			
			РезультатРаспределения = Новый РеквизитФормы("РезультатРаспределения", Новый ОписаниеТипов(), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(РезультатРаспределения);
			
			КомандаРедактирования = Новый РеквизитФормы("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(62)), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(КомандаРедактирования);
			
			ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
		КонецЕсли;
		
		Если ДобавлятьЭлементыФормы Тогда
		
			ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
			ИмяПоляДляВставкиРезультатовРаспределения = ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов;
			ВставлятьПослеПоля = ОписаниеТаблицы.ВставлятьПослеПоля;
			
			Если ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов Тогда
				
				Таблица = Форма.Элементы.Найти(ИмяТаблицы);
				
				ЭлементФормы = Форма.Элементы.Найти(ИмяТаблицы + "КомандаРедактированияРаспределения");
				
				Если ЭлементФормы = Неопределено Тогда
					
					КомандаРедактирования = Форма.Элементы.Добавить(ИмяТаблицы + "КомандаРедактированияРаспределения", Тип("ПолеФормы"), Таблица);
					КомандаРедактирования.Вид = ВидПоляФормы.ПолеНадписи;
					Если РаботаВБюджетномУчреждении Тогда
						КомандаРедактирования.Заголовок = НСтр("ru = 'Финансир., расходы';
																|en = 'Financ., expenses'");
						КомандаРедактирования.Ширина = 17;
					Иначе
						КомандаРедактирования.Заголовок = НСтр("ru = 'Финансирование';
																|en = 'Financing'");
						КомандаРедактирования.Ширина = 14;
					КонецЕсли;				
					КомандаРедактирования.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
					КомандаРедактирования.ПутьКДанным = ПутьКДанным + ".КомандаРедактированияРаспределения";

					КомандаРедактирования.ГиперссылкаЯчейки = Истина;
					КомандаРедактирования.АвтоВысотаЯчейки = Истина;
					КомандаРедактирования.РастягиватьПоГоризонтали = Ложь;
					
					Если Не ПустаяСтрока(ИмяПоляДляВставкиРезультатовРаспределения) Тогда
						ПолеДляВставки = Неопределено;
						Если СтрЗаканчиваетсяНа(ИмяПоляДляВставкиРезультатовРаспределения, ОписаниеТаблицы.ИмяПоляРезультат)
							И ЗарплатаКадрыРасширенныйПовтИсп.ВыполнятьРасчетЗависимыхНачисленийПриРазовых()
							И Форма.Элементы.Найти(ИмяТаблицы + "РанееНачислено") <> Неопределено Тогда
							ПолеДляВставки = Форма.Элементы.Найти(ИмяТаблицы + ОписаниеТаблицы.ИмяПоляРезультат + "Группа");
						КонецЕсли;
						Если ПолеДляВставки = Неопределено Тогда
							ПолеДляВставки = Форма.Элементы.Найти(ИмяПоляДляВставкиРезультатовРаспределения);
						КонецЕсли;
						
						Форма.Элементы.Переместить(КомандаРедактирования, Таблица, ПолеДляВставки);
						Если ВставлятьПослеПоля Тогда
							Форма.Элементы.Переместить(ПолеДляВставки, Таблица, КомандаРедактирования);
						КонецЕсли;
					КонецЕсли;
					
					КомандаРедактирования.Шрифт = ШрифтыСтиля.ШрифтСоставнойНадписиМоноширинный;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СортироватьПерерасчеты(НачисленияПерерасчет) Экспорт
	Если НачисленияПерерасчет.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("ИсходнаяСтрока");
	ТаблицаСортировки.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСортировки.Колонки.Добавить("НаименованиеСотрудника", Новый ОписаниеТипов("Строка"));
	ТаблицаСортировки.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаСортировки.Колонки.Добавить("ОчередностьНачисления", Новый ОписаниеТипов("Число"));
	ТаблицаСортировки.Колонки.Добавить("ПорядокНачисления", Новый ОписаниеТипов("Число"));
	ТаблицаСортировки.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаСортировки.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("РегистраторРазовогоНачисления");
	
	НаименованияСотрудников = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НачисленияПерерасчет[0], "Сотрудник") Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияПерерасчет, "Сотрудник", Истина);
		Если Сотрудники.Количество() > 1 Тогда
			УстановитьПривилегированныйРежим(Истина);
			НаименованияСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "Наименование");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваНачислений = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НачисленияПерерасчет[0], "Начисление") Тогда
		Начисления = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияПерерасчет, "Начисление", Истина);
		Если Начисления.Количество() > 1 Тогда
			УстановитьПривилегированныйРежим(Истина);
			СвойстваНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Начисления, "РеквизитДопУпорядочивания, ОчередностьРасчета");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыФормы Из НачисленияПерерасчет Цикл
		СтрокаТаблицыСортировки = ТаблицаСортировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыСортировки, СтрокаТаблицыФормы);
		
		Если НаименованияСотрудников <> Неопределено Тогда
			СтрокаТаблицыСортировки.НаименованиеСотрудника = НаименованияСотрудников[СтрокаТаблицыСортировки.Сотрудник];
		КонецЕсли;
		
		Если СвойстваНачислений <> Неопределено 
			И ЗначениеЗаполнено(СтрокаТаблицыСортировки.Начисление) Тогда
			
			СтрокаТаблицыСортировки.ОчередностьНачисления = СвойстваНачислений[СтрокаТаблицыСортировки.Начисление].ОчередностьРасчета;
			СтрокаТаблицыСортировки.ПорядокНачисления = СвойстваНачислений[СтрокаТаблицыСортировки.Начисление].РеквизитДопУпорядочивания;
		КонецЕсли;
		
		СтрокаТаблицыСортировки.ИсходнаяСтрока = СтрокаТаблицыФормы;
	КонецЦикла;	
	
	ТаблицаСортировки.Сортировать("НаименованиеСотрудника, Сотрудник, ПериодДействия, РегистраторРазовогоНачисления, 
								|ОчередностьНачисления, ПорядокНачисления, Начисление, Сторно УБЫВ, ФиксСторно УБЫВ");
	
	ЦелевойПорядок = 1;
	Для Каждого ЭлементПорядка Из ТаблицаСортировки Цикл
		СтрокаТаблицыФормы = ЭлементПорядка.ИсходнаяСтрока;
		ТекущийИндексСтроки = НачисленияПерерасчет.Индекс(СтрокаТаблицыФормы);
		Сдвиг = ЦелевойПорядок - (ТекущийИндексСтроки + 1);
		
		НачисленияПерерасчет.Сдвинуть(ТекущийИндексСтроки, Сдвиг);
		ЦелевойПорядок = ЦелевойПорядок + 1;
	КонецЦикла;		
КонецПроцедуры	

// Проверяет есть ли в документе начисления строки, содержащие ручные исправления.
//
Функция ЕстьИсправленныеСтроки(Форма) Экспорт
	
	КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	Для Каждого КлючИЗначение Из КонтролируемыеПоля Цикл
		ИмяТаблицы = КлючИЗначение.Ключ;
		ФиксПоля = КлючИЗначение.Значение;
		Для Каждого СтрокаТаблицы Из Форма.Объект[ИмяТаблицы] Цикл
			Для Каждого ЭлементСтруктуры Из ФиксПоля Цикл
				ИмяПоля = ЭлементСтруктуры.Ключ;
				Если СтрокаТаблицы[ИмяПоля] = Истина Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаспределениеПоТерриториямУсловиямТруда

// Обработчик события при создании формы для документов с распределением начислений по территориям и условиям труда.
//
Процедура РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(Форма, Организация, ОписанияТаблицНачислений, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

// Обработчик события при получении данных (преобразовании объекта в данные формы) 
// для документов с распределением по территориям и условиям труда.
//
Процедура РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(Форма, Организация, ОписанияТаблицНачислений) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиТерриторий = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
	
	// Ключ идентификатор строки начисления - значение массив строк распределения.
	МассивыСтрокРаспределения = Новый Соответствие;
	Для Каждого СтрокаРаспределения Из Форма.Объект.РаспределениеПоТерриториямУсловиямТруда Цикл
		СтрокиРаспределения = МассивыСтрокРаспределения[СтрокаРаспределения.ИдентификаторСтроки];
		Если СтрокиРаспределения = Неопределено Тогда
			СтрокиРаспределения = Новый Массив;
			МассивыСтрокРаспределения.Вставить(СтрокаРаспределения.ИдентификаторСтроки, СтрокиРаспределения);
		КонецЕсли;
		ОписаниеСтроки = ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРаспределения);
		// Отбираем показатели.
		ОтборПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета");
		ОтборПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаРаспределения.ИдентификаторСтрокиПоказателей;
		СтрокиПоказателей = Форма.Объект.Показатели.НайтиСтроки(ОтборПоказателей);
		НомерПоказателя = 1;
		Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
			Если ПоказателиТерриторий.Найти(СтрокаПоказателей.Показатель) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеСтроки["Показатель" + НомерПоказателя] = СтрокаПоказателей.Показатель;
			ОписаниеСтроки["Значение" + НомерПоказателя] = СтрокаПоказателей.Значение;
			НомерПоказателя = НомерПоказателя + 1;
		КонецЦикла;
		СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтроки));
	КонецЦикла;
	
	// Обходим таблицы с начислениями, упаковываем фиксированные массивы.
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
			СтрокиРаспределения = МассивыСтрокРаспределения[СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета];
			Если СтрокиРаспределения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(СтрокиРаспределения);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений);
	
КонецПроцедуры

Функция РаспределениеПоТерриториямУсловиямТрудаНомерТаблицы() Экспорт
	
	Возврат 9;
	
КонецФункции

// Обработчик события, возникающего при преобразовании данных формы в объект (например, перед записью формы).
//
// ВАЖНО! К моменту вызова этого метода в коллекциях начислений должны быть заполнены идентификаторы строк.
//
Процедура РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(Форма, ТекущийОбъект, ОписанияТаблицНачислений) Экспорт
	
	ТекущийОбъект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(ТекущийОбъект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиПоказателей = РаспределениеПоТерриториямУсловиямТрудаНомерТаблицы() * 1000000;
	КоличествоПоказателей = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	
	// Обходим таблицы с начислениями, переносим строки из фиксированных массивов в табличную часть.
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		ИмяРеквизитаИдентификаторСтроки = ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки;
		ТаблицаРаспределенияПоТерриториямУсловиямТруда = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда) Тогда 
			АдресТаблицыРаспределения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда);
			Если ЗначениеЗаполнено(АдресТаблицыРаспределения) Тогда
				ТаблицаРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
			РаспределениеПоТерриториямУсловиямТруда = СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда;
			Если РаспределениеПоТерриториямУсловиямТруда = Неопределено И ТаблицаРаспределенияПоТерриториямУсловиямТруда <> Неопределено Тогда 
				ИсходныйИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + СтрокаТаблицы.ИсходныйНомерСтроки;
				Отбор = Новый Структура("ИдентификаторСтроки", ИсходныйИдентификаторСтроки);
				РаспределениеПоТерриториямУсловиямТруда =  ТаблицаРаспределенияПоТерриториямУсловиямТруда.НайтиСтроки(Отбор);
			КонецЕсли;
			Если РаспределениеПоТерриториямУсловиямТруда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаРаспределения Из РаспределениеПоТерриториямУсловиямТруда Цикл
				НоваяСтрокаРаспределения = ТекущийОбъект.РаспределениеПоТерриториямУсловиямТруда.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения, СтрокаРаспределения);
				НоваяСтрокаРаспределения.ИдентификаторСтроки = СтрокаТаблицы[ИмяРеквизитаИдентификаторСтроки];
				НоваяСтрокаРаспределения.ИдентификаторСтрокиПоказателей = ИдентификаторСтрокиПоказателей;
				Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
					Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТекущийОбъект.Показатели.Добавить();
					НоваяСтрока.Показатель = Показатель;
					НоваяСтрока.Значение = СтрокаРаспределения["Значение" + НомерПоказателя];
					НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиПоказателей;
				КонецЦикла;
				ИдентификаторСтрокиПоказателей = ИдентификаторСтрокиПоказателей + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет данные формы необходимыми реквизитами и элементами для работы механизма распределения начислений по
// территориям и условиям труда.
//
// Параметры
//	- Форма
//	- Организация
//	- ОписанияТаблицНачислений - массив с описаниями таблиц, с которыми будет связано распределение.
//
Процедура ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если ДобавлятьРеквизитыФормы Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		МассивИменРеквизитовФормы = Новый Массив;
		// Добавляем в каждую таблицу колонку с представлением распределения.
		Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
			КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы, , 2);
			// Собираем состав реквизитов таблицы.
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицы.ПутьКДанным);
			// Добавляем реквизит, в котором будет в виде фиксированного массива фиксированных структур храниться распределение в
			// течение жизни формы.
			РеквизитФормы = Новый РеквизитФормы("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов(), ОписаниеТаблицы.ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			// ..и реквизит, определяющий представление.
			РеквизитФормы = Новый РеквизитФормы("ПредставлениеРаспределенияПоТерриториямУсловиямТруда", Новый ОписаниеТипов("Строка"), ОписаниеТаблицы.ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			// Находим поле показателя.
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				РеквизитФормы = Новый РеквизитФормы("ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя, Новый ОписаниеТипов("Строка"), ОписаниеТаблицы.ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			КонецЦикла;
		КонецЦикла;
		// Добавляем реквизиты.
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы, , ОтложенноеИзменение);
	КонецЕсли;	
		
	Если ДобавлятьЭлементыФормы Тогда 
		// Добавляем в каждую таблицу поле для представления распределения.
		Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
			КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
			// Находим поле показателя.
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				// Добавляем условное оформление, в соответствии с которым в поле значение отображаем представление, если последнее заполнено.
				ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект." + ОписаниеТаблицы.ИмяТаблицы + ".ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя));
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Объект." + ОписаниеТаблицы.ИмяТаблицы + ".ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя, , ВидСравненияКомпоновкиДанных.Заполнено);
				ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ИмяТаблицы + "Значение" + НомерПоказателя);
			КонецЦикла;
			// Добавляем поле.
			ИмяПоля = ОписаниеТаблицы.ИмяТаблицы + "_РаспределениеПоТерриториямУсловиямТруда";
			Если Форма.Элементы.Найти(ИмяПоля) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Форма.Элементы.Найти(ОписаниеТаблицы.ИмяТаблицы) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Таблица = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы];
			ПолеРаспределения = Форма.Элементы.Добавить(ОписаниеТаблицы.ИмяТаблицы + "_РаспределениеПоТерриториямУсловиямТруда", Тип("ПолеФормы"), Таблица);
			ПолеРаспределения.Вид = ВидПоляФормы.ПолеНадписи;
			Если ОписаниеТаблицы.ПоказыватьУсловияТруда Тогда
				ПолеРаспределения.Заголовок = НСтр("ru = 'Терр., усл. труда';
													|en = 'Site, work. condit.'");
			Иначе
				ПолеРаспределения.Заголовок = НСтр("ru = 'Территория';
													|en = 'Area'");
			КонецЕсли;
			ПолеРаспределения.Ширина = 14;
			ПолеРаспределения.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			ПолеРаспределения.ПутьКДанным = ОписаниеТаблицы.ПутьКДанным + ".ПредставлениеРаспределенияПоТерриториямУсловиямТруда";
			ПолеРаспределения.ГиперссылкаЯчейки = Истина;
			ПолеРаспределения.АвтоВысотаЯчейки = Истина;
			ПолеРаспределения.РастягиватьПоГоризонтали = Ложь;
			МестоВставки = ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов;
			Если Не ПустаяСтрока(МестоВставки) Тогда
				ПолеДляВставки = Неопределено;
				Если СтрЗаканчиваетсяНа(МестоВставки, ОписаниеТаблицы.ИмяПоляРезультат)
					И ЗарплатаКадрыРасширенныйПовтИсп.ВыполнятьРасчетЗависимыхНачисленийПриРазовых()
					И Форма.Элементы.Найти(ОписаниеТаблицы.ИмяТаблицы + "РанееНачислено") <> Неопределено Тогда
					ПолеДляВставки = Форма.Элементы.Найти(ОписаниеТаблицы.ИмяТаблицы + ОписаниеТаблицы.ИмяПоляРезультат + "Группа");
				КонецЕсли;
				Если ПолеДляВставки = Неопределено Тогда
					ПолеДляВставки = Форма.Элементы.Найти(МестоВставки);
				КонецЕсли;
				
				Форма.Элементы.Переместить(ПолеРаспределения, Таблица, ПолеДляВставки);
				Если ОписаниеТаблицы.ВставлятьПослеПоля Тогда
					Форма.Элементы.Переместить(ПолеДляВставки, Таблица, ПолеРаспределения);
				КонецЕсли;
			КонецЕсли;
			ПолеРаспределения.Шрифт = ШрифтыСтиля.ШрифтСоставнойНадписиМоноширинный;
		КонецЦикла;
	КонецЕсли;
	
	// Установка видимости элементов.
	ИспользуютсяТерриторииИлиУсловияТруда = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
	ИспользуютсяТерритории = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация);
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ИмяПоля = ОписаниеТаблицы.ИмяТаблицы + "_РаспределениеПоТерриториямУсловиямТруда";
		Видимость = ?(ОписаниеТаблицы.ПоказыватьУсловияТруда, ИспользуютсяТерриторииИлиУсловияТруда, ИспользуютсяТерритории);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоля, "Видимость", Видимость);
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует строку представления для колонки с обозначением территорий и условий труда.
//
Процедура ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений, Сотрудники = Неопределено) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПоказателейПоТерриториямУсловиямТруда = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
			Если СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Сотрудники <> Неопределено И Сотрудники.Найти(СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаСотрудник]) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ЭлементыПредставления = Новый Соответствие;
			ЗначенияПоказателей = Новый Соответствие;
			Для Каждого СтрокаРаспределения Из СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда Цикл
				Если ЗначениеЗаполнено(СтрокаРаспределения.Территория) Тогда
					ЭлементыПредставления.Вставить(СтрокаРаспределения.Территория);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаРаспределения.УсловияТруда) Тогда
					ЭлементыПредставления.Вставить(СтрокаРаспределения.УсловияТруда);
				КонецЕсли;
				// Если заполнен показатель, собираем его уникальные значения.
				Для НомерПоказателя = 1 По КоличествоПоказателейПоТерриториямУсловиямТруда Цикл
					Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					Значения = ЗначенияПоказателей[Показатель];
					Если Значения = Неопределено Тогда
						Значения = Новый Соответствие;
						ЗначенияПоказателей.Вставить(Показатель, Значения);
					КонецЕсли;
					Значения.Вставить(СтрокаРаспределения["Значение" + НомерПоказателя]);
				КонецЦикла;
			КонецЦикла;
			// Заполняем представление в строке.
			ПредставлениеРаспределения = "";
			Для Каждого КлючПредставления Из ЭлементыПредставления Цикл
				ПредставлениеРаспределения = ПредставлениеРаспределения + КлючПредставления.Ключ + ", ";
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеРаспределения, 2);
			СтрокаТаблицы.ПредставлениеРаспределенияПоТерриториямУсловиямТруда = ПредставлениеРаспределения;
			// Формируем представление показателей.
			Если ЗначенияПоказателей.Количество() > 0 Тогда
				КоличествоПоказателейНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
				// Находим поле показателя.
				Для НомерПоказателя = 1 По КоличествоПоказателейНачислений Цикл
					Показатель = СтрокаТаблицы["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					Значения = ЗначенияПоказателей[Показатель];
					Если Значения = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Значения.Вставить(СтрокаТаблицы["Значение" + НомерПоказателя]);
					ПредставлениеЗначений = "";
					Для Каждого КлючИЗначение Из Значения Цикл
						ПредставлениеЗначений = ПредставлениеЗначений + Строка(КлючИЗначение.Ключ) + Символы.ПС;
					КонецЦикла;
					СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеЗначений);
					СтрокаТаблицы["ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя] = ПредставлениеЗначений;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет необходимые для редактирования распределения по территориям и условиям труда параметры.
//
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(Форма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	
	// Заполняем коллекцию Распределение и Показатели распределения.
	Объект = Форма.Объект;
	Начисления = Объект[ОписаниеТаблицы.ИмяТаблицы];
	ДанныеСтроки = Начисления.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	РаспределениеПоТерриториямУсловиямТруда = ДанныеСтроки.РаспределениеПоТерриториямУсловиямТруда;
	Если РаспределениеПоТерриториямУсловиямТруда = Неопределено Тогда 
		РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТрудаИзХранилища(Форма, ОписаниеТаблицы, ДанныеСтроки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаВидРасчета) Тогда
		Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
			ПараметрыФормы.Начисление = ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
		Иначе
			ПараметрыФормы.Начисление = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
		КонецЕсли;
	Иначе
		ПараметрыФормы.Договор = ДанныеСтроки.ДокументОснование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаФиксСторно)
		И ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаФиксСторно] Тогда
		
		ПараметрыФормы.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПараметрыФормы.ПоказыватьУсловияТруда = ОписаниеТаблицы.ПоказыватьУсловияТруда;
	ПараметрыФормы.Сотрудник = ДанныеСтроки.Сотрудник;
	ПараметрыФормы.Распределение = ПоместитьВоВременноеХранилище(РаспределениеПоТерриториямУсловиямТруда, Форма.УникальныйИдентификатор);
	ПараметрыФормы.Организация = Объект.Организация;
	
КонецПроцедуры

Функция РаспределениеПоТерриториямУсловиямТрудаИзХранилища(Форма, ОписаниеТаблицы, ДанныеСтроки)
	
	Если Не ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	АдресТаблицыРаспределения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда);
	
	Если Не ЗначениеЗаполнено(АдресТаблицыРаспределения) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
	
	Отбор = Новый Структура("ИдентификаторСтроки", ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки]);
	СтрокиРаспределения = РаспределениеПоТерриториямУсловиямТруда.НайтиСтроки(Отбор);
	
	Если СтрокиРаспределения.Количество() > 0 Тогда 
		Возврат СтрокиРаспределения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Осуществляет перенос данных по результатам редактирования данных распределения начислений.
//
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(Форма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	
	Объект = Форма.Объект;
	Начисления = Объект[ОписаниеТаблицы.ИмяТаблицы];
	
	ДанныеСтроки = Начисления.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ДанныеСтроки.РаспределениеПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(РезультатРедактирования.Распределение);
	
	// Если изменилась только сумма, и не изменились показатели, то
	// - вписываем новый итог в результат, 
	// - взводим флаг ФиксРасчет в Истина,
	// - запускаем пересчет с целью уточнить зависимые начисления и другие коллекции.
	
	ДанныеСтроки.Результат = РезультатРедактирования.Результат;
	ДанныеСтроки.ФиксРасчет = Истина;
	
КонецПроцедуры

// Функция конструирует структуру, описывающую данные о распределении по территориям, условиям труда.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	ПоляОписания.Вставить("УсловияТруда", Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
	ПоляОписания.Вставить("ДоляРаспределения", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	ПоляОписания.Вставить("Результат", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("СуммаВычета", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("СкидкаПоВзносам", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("РанееНачислено", Новый ОписаниеТипов("Число")); 
	ПоляОписания.Вставить("СуммаДоходаНеОблагаемаяНДФЛ", Новый ОписаниеТипов("Число"));
	
	Показатели = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
	Для НомерПоказателя = 1 По Показатели.Количество() Цикл
		ПоляОписания.Вставить("Показатель" + НомерПоказателя, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		ПоляОписания.Вставить("Значение" + НомерПоказателя, Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	КонецЦикла;
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьРаспределениеПоТерриториямУсловиямТрудаПоСтроке(СтрокаИсточник, ИдентификаторСтроки, ДанныеРаспределенияПоТерриториямУсловиямТруда) Экспорт

	РаспределениеПоТерриториямУсловиямТруда = СтрокаИсточник.РаспределениеПоТерриториямУсловиямТруда;
	Если РаспределениеПоТерриториямУсловиямТруда = Неопределено 
		И ДанныеРаспределенияПоТерриториямУсловиямТруда <> Неопределено Тогда 
		
		Отбор = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
		РаспределениеПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда.НайтиСтроки(Отбор);
		
	КонецЕсли;

	Возврат РаспределениеПоТерриториямУсловиямТруда; 
	
КонецФункции

#КонецОбласти

#Область МетодыОбслуживанияФормДокументовВыполняющихУдержания

// Определяет действует ли указанное удержание на указанную дату.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- Удержание
//	- ДатаАктуальности - дата, на которую определяется действует ли удержание.
//	- Регистратор - если указан, движения регистратора игнорируются.
//	- ДокументОснование - если указан, определяется действие удержание по конкретному основанию.
//	
Функция УдержаниеДействуетНаДату(Организация, ФизическоеЛицо, Удержание, ДатаАктуальности, Регистратор = Неопределено, ДокументОснование = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК УдержаниеДействует
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания.СрезПоследних(
	|			&ДатаАктуальности,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Организация = &Организация
	|				И Удержание = &Удержание
	|				И (ДокументОснование = &ДокументОснование
	|					ИЛИ &БезОтбораПоДокументамОснование)
	|				И (Регистратор <> &Регистратор
	|					ИЛИ &БезОтбораПоРегистратору)) КАК ПлановыеУдержания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеУдержания.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ПлановыеУдержания.ДействуетДо <= &ДатаАктуальности
	|				ТОГДА ПлановыеУдержания.ИспользуетсяПоОкончании
	|			ИНАЧЕ ПлановыеУдержания.Используется
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("БезОтбораПоРегистратору", Регистратор = Неопределено);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("БезОтбораПоДокументамОснование", ДокументОснование = Неопределено);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет перечень документов, на основании которых действует указанное удержание.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- Удержание
//	- ДатаАктуальности - дата, на которую определяется действует ли удержание.
//	- Регистратор - если указан, движения регистратора игнорируются.
//	
Функция ОснованияУдержания(Организация, ФизическоеЛицо, Удержание, ДатаАктуальности, Регистратор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.ДокументОснование
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания.СрезПоследних(
	|			&ДатаАктуальности,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Организация = &Организация
	|				И Удержание = &Удержание
	|				И (Регистратор <> &Регистратор
	|					ИЛИ &БезОтбораПоРегистратору)) КАК ПлановыеУдержания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеУдержания.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ПлановыеУдержания.ДействуетДо <= &ДатаАктуальности
	|				ТОГДА ПлановыеУдержания.ИспользуетсяПоОкончании
	|			ИНАЧЕ ПлановыеУдержания.Используется
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("БезОтбораПоРегистратору", Регистратор = Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Основания = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Основания.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Возврат Основания;
	
КонецФункции

// Определяет удержания, введенные на основании документов по физическому лицу.
//
// Параметры:
//		МенеджерВременныхТаблиц, в котором 
//		* есть таблица "ИмяВТОтборУдержаний" с полями
//			- ДокументОснование
//			- ФизическоеЛицо
//			- ДатаАктуальности - дата, на которую определяется действует ли удержание.
//		Организация - Ссылка на организацию
//		ИмяВТОтборУдержаний - Имя таблицы отборов
//		Регистратор - если указан, движения регистратора игнорируются.
//
// Возвращаемое значение:
//		УдержанияПоОснованиям - Соответствие
//								Ключ - Ссылка на документ основание
//								Значение - Массив ссылок удержаний по документу основанию
//	
Процедура СоздатьВТУдержанияПоВременнойТаблице(МенеджерВременныхТаблиц, Организация, ИмяВТОтборУдержаний = "ВТОтборУдержаний", Регистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.ДокументОснование КАК ДокументОснование,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание КАК Удержание,
	|	МАКСИМУМ(ПлановыеУдержания.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыУдержаний
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборУдержаний КАК ОтборУдержаний
	|		ПО ПлановыеУдержания.ФизическоеЛицо = ОтборУдержаний.ФизическоеЛицо
	|			И ПлановыеУдержания.ДокументОснование = ОтборУдержаний.ДокументОснование
	|ГДЕ
	|	ПлановыеУдержания.Организация = &Организация
	|	И (ПлановыеУдержания.Регистратор <> &Регистратор
	|			ИЛИ &БезОтбораПоРегистратору)
	|	И ОтборУдержаний.ДатаАктуальности > ПлановыеУдержания.Период
	|	И (ОтборУдержаний.ДатаАктуальности < ПлановыеУдержания.ДействуетДо
	|			ИЛИ ПлановыеУдержания.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|	И ВЫБОР
	|			КОГДА ПлановыеУдержания.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ПлановыеУдержания.ДействуетДо <= ОтборУдержаний.ДатаАктуальности
	|				ТОГДА ПлановыеУдержания.ИспользуетсяПоОкончании
	|			ИНАЧЕ ПлановыеУдержания.Используется
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеУдержания.ДокументОснование,
	|	ПлановыеУдержания.ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеУдержания.ДокументОснование КАК ДокументОснование,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание КАК Удержание
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыУдержаний КАК ПериодыУдержаний
	|		ПО ПлановыеУдержания.ДокументОснование = ПериодыУдержаний.ДокументОснование
	|			И ПлановыеУдержания.ФизическоеЛицо = ПериодыУдержаний.ФизическоеЛицо
	|			И ПлановыеУдержания.Удержание = ПериодыУдержаний.Удержание
	|			И ПлановыеУдержания.Период = ПериодыУдержаний.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериодыУдержаний";
	
	ИмяВТПериодыУдержаний = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПериодыУдержаний");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыУдержаний", ИмяВТПериодыУдержаний);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборУдержаний", ИмяВТОтборУдержаний);
	
	Запрос.УстановитьПараметр("Организация", Организация.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("БезОтбораПоРегистратору", Регистратор = Неопределено);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Метод заполняет реквизит документа удержанием, 
// если действующее удержание с такой ролью в системе - единственное.
// В случае если в системе нет вообще ни одного удержания с такой ролью взводится исключение.
//
// Параметры:
//	- КатегорияУдержания - ПеречислениеСсылка.КатегорииУдержаний
//	- РеквизитУдержания - реквизит документа для заполнения.
//	
Процедура ЗаполнитьУдержаниеВФормеДокументаПоРоли(Форма, РеквизитУдержания, КатегорияУдержания, ДополнительныйОтбор = Неопределено) Экспорт
	
	Отбор = Новый Структура("ВАрхиве, ПометкаУдаления", Ложь, Ложь);
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДополнительныйОтбор Цикл
			Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Удержания = РасчетЗарплаты.УдержанияПоКатегории(КатегорияУдержания, Отбор);
		
	Если Удержания.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружено ни одного удержания %2, регистрируемого документом «%1».';
				|en = 'No deduction %2 registered using the ""%1"" document is found.'"), 
				  Форма.Объект.Ссылка.Метаданные().Синоним, 
				  КатегорияУдержания);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
		
	Если Удержания.Количество() = 1 Тогда
		РеквизитУдержания = Удержания[0];
	КонецЕсли;
	
КонецПроцедуры

// Метод заполняет реквизит документа последним введенным для этого удержания контрагентом.
// В случае если в системе нет еще введенных документов по удержанию или удержание не заполнено, то контрагент не заполняется.
//
// Параметры:
//	- ИмяРеквизитаКонтрагент - наименование реквизита документа для заполнения.
//	- РеквизитУдержания - реквизит документа, где заполнено удержание.
//	
Процедура ЗаполнитьКонтрагентаВФормеДокументаПоУдержанию(Форма, ИмяРеквизитаКонтрагент, РеквизитУдержания) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитУдержания) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Удержание", РеквизитУдержания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументУдержания.Контрагент КАК Контрагент
	|ИЗ
	|	#ДокументУдержания КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Удержание = &Удержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументУдержания.МоментВремени УБЫВ";
	
	ИмяМетаданныхДокумента = Форма.Объект.Ссылка.Метаданные().ПолноеИмя();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументУдержания", ИмяМетаданныхДокумента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументУдержания.Контрагент", "ДокументУдержания." + ИмяРеквизитаКонтрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Форма.Объект[ИмяРеквизитаКонтрагент] = Выборка.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает значения периодических показателей зарплаты сотрудника по физическому лицу.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- Показатели - массив показателей.
//	- ДатаАктуальности - дата, на которую выявляются значения показателей.
//	- Регистратор - если указан, движения регистратора игнорируются.
//	- ДокументОснование - если указан, по всем основаниям.
//
Функция ЗначенияПоказателейФизическогоЛица(Организация, ФизическоеЛицо, Показатели, ДатаАктуальности, Регистратор = Неопределено, ДокументОснование = Неопределено) Экспорт
	
	// Определяем таблицу измерений.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ИзмеренияДаты.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИзмеренияДаты.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Измерения.ДокументОснование.Тип);
	
	Для Каждого Показатель Из Показатели Цикл
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Период = ДатаАктуальности;
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Показатель = Показатель;
		НоваяСтрока.ДокументОснование = ДокументОснование;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбор для исключения движений текущего регистратора.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если Регистратор <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателей.Показатель,
	|	СУММА(ВЫРАЗИТЬ(ЗначенияПериодическихПоказателей.Значение КАК ЧИСЛО)) КАК Значение
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателей.Показатель";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДокументыПлановыхУдержанийУстановитьВидимостьПоказателей(Элементы, Удержание, ИмяЭлементаПоказателей = "Показатели") Экспорт
	
	// Показываем таблицу показателей, если есть отображаемые показатели.
	Если Не ЗначениеЗаполнено(Удержание) Тогда
		Элементы[ИмяЭлементаПоказателей].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Удержание);
	
	Если ВидРасчетаИнфо.КоличествоПостоянныхПоказателей = 0 Тогда
		Элементы[ИмяЭлементаПоказателей].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы[ИмяЭлементаПоказателей].Видимость = Истина;
	
КонецПроцедуры

Процедура ДокументыПлановыхУдержанийУстановитьВидимостьРазмера(Элементы, Удержание, ИмяПоляРазмер = "ГруппаРазмер") Экспорт 
	
	Если Не ЗначениеЗаполнено(Удержание) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяПоляРазмер, "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Удержание);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяПоляРазмер, "Видимость", Не ВидРасчетаИнфо.Рассчитывается);
	
КонецПроцедуры

Процедура ДокументыПлановыхУдержанийУстановитьРазмер(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Удержание) Тогда
		Объект.Размер = 0;
		Возврат;
	КонецЕсли;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.Удержание);

	Если ВидРасчетаИнфо.Рассчитывается Тогда 
		Объект.Размер = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыПлановыхУдержанийЗаполнитьПоказатели(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Принимается решение о том, показывать ли таблицу показателей.
	// Если показывать, то таблица заполняется по состоянию на указанную дату действия.
	
	Объект.Показатели.Очистить();
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.Удержание);
	
	Показатели = Новый Массив;
	Для Каждого ДанныеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ДанныеПоказателя.ЗапрашиватьПриВводе Тогда
			Показатели.Добавить(ДанныеПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	// Если удержание не действует на выбранную дату - ничего не делаем.
	Если Не Форма.УдержаниеДействует Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.Показатели, Показатели, "Показатель");
		Возврат;
	КонецЕсли;
	
	// ..Если действует - получаем и заполняем значения.
	ДокументОснование = Неопределено;
	Если Объект.Свойство("ДокументОснование") Тогда
		ДокументОснование = Объект.ДокументОснование;
	КонецЕсли;
	ЗначенияПоказателей = ЗначенияПоказателейФизическогоЛица(
		Объект.Организация, Объект.ФизическоеЛицо, Показатели, Объект.ДатаНачала, Объект.Ссылка, ДокументОснование);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗначенияПоказателей, Объект.Показатели);
	
КонецПроцедуры

Процедура УстановитьСтраницуДействия(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Форма.УдержаниеДействует И Объект.Действие <> Перечисления.ДействияСУдержаниями.Начать Тогда
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.ДействуетСтраницаГруппа;
	Иначе
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.НеДействуетСтраница;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьДокументаОснования(Форма, ОснованияУдержания = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьСтраницуДействия(Форма);
	
	// Документ основания недоступен, если он единственный или, если выполняется начало нового удержания.
	Если Объект.Действие = Перечисления.ДействияСУдержаниями.Начать Тогда
		Объект.ДокументОснование = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Доступность", Ложь);
		Возврат;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Доступность", Истина);
	КонецЕсли;
	
	Если ОснованияУдержания = Неопределено Тогда
		ОснованияУдержания = ОснованияУдержания(
			Объект.Организация, Объект.ФизическоеЛицо, Объект.Удержание, Объект.ДатаНачала, Объект.Ссылка);
	КонецЕсли;
	
	Если ОснованияУдержания.Количество() = 1 Тогда
		Объект.ДокументОснование = ОснованияУдержания[0];
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьВыбораВидаДействия(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Прежде всего определяем есть ли действующие удержания такого вида у этого сотрудника (по любому из документов
	// основания).
	ОснованияУдержания = ОснованияУдержания(
		Объект.Организация, Объект.ФизическоеЛицо, Объект.Удержание, Объект.ДатаНачала, Объект.Ссылка);
	
	Элементы.ВидДействияГруппа.Видимость = ОснованияУдержания.Количество() > 0;
	
	// Если нет действующих удержаний, то выбора нет - начинаем новое.
	Если ОснованияУдержания.Количество() = 0 Тогда
		Объект.Действие = Перечисления.ДействияСУдержаниями.Начать;
	КонецЕсли;
	
	УстановитьДоступностьДокументаОснования(Форма, ОснованияУдержания);
	
КонецПроцедуры

Процедура ЗаполнитьДействиеИПоказатели(Форма, ДокументОснование = Неопределено, ИмяЭлементаПоказателей = "Показатели") Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.УдержаниеДействует = УдержаниеДействуетНаДату(
		Объект.Организация, Объект.ФизическоеЛицо, Объект.Удержание, Объект.ДатаНачала, Объект.Ссылка, ДокументОснование);
	
	УстановитьСтраницуДействия(Форма);
	ДокументыПлановыхУдержанийУстановитьВидимостьПоказателей(Элементы, Объект.Удержание, ИмяЭлементаПоказателей);
	ДокументыПлановыхУдержанийЗаполнитьПоказатели(Форма);
	ДокументыПлановыхУдержанийУстановитьВидимостьРазмера(Элементы, Объект.Удержание);
	ДокументыПлановыхУдержанийУстановитьРазмер(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьПределУдержания(Объект, ДокументОснование = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда 
		Возврат;
	КонецЕсли;
	
	СведенияОПределе = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ПрекратитьПоДостижениюПредела,Предел");
	ЗаполнитьЗначенияСвойств(Объект, СведенияОПределе);
	
КонецПроцедуры

#КонецОбласти

// Устанавливает значение реквизиту формы ВыполнятьПредварительныйРасчетДокумента из настроек.
//
Процедура ПодготовитьФормуДляПредварительногоРасчетаНачислений(Форма) Экспорт
	
	Форма.ВыполнятьПредварительныйРасчетДокумента = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты().ВыполнятьПредварительныйРасчетДокументов;
	
КонецПроцедуры

// Проверяет таблицу начислений и устанавливает признак необходимости рассчитать документ.
//
Процедура УстановитьПризнакНеобходимостиРасчета(Форма) Экспорт
	
	Если Форма.Объект.Начисления.Количество() = 0 Тогда
		
		Форма.РасчетНеобходимоВыполнить = Истина;
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьСостояниеКнопкиФормыРассчитать(
			Форма, Форма.РасчетНеобходимоВыполнить);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак необходимости рассчитать в каждой строке многосотрудникового документа.
//
Процедура УстановитьПризнакНеобходимостиРасчетаСтрокСотрудников(Форма) Экспорт
	
	Если Форма.ИспользуетсяРасчетЗарплаты
		И Форма.РегистрацияНачисленийДоступна Тогда
		
		Для Каждого СтрокаСотрудника Из Форма.Объект.Сотрудники Цикл
			
			Если Форма.Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник)).Количество() = 0 Тогда
				СтрокаСотрудника.ТребуетсяРасчет = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область АдаптерМенеджераРасчета

#Область ДанныеФормыВДанныеМенеджераРасчета

Процедура НачисленияВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(СтрокаФормы) = Тип("ДанныеФормыЭлементКоллекции") Тогда
				Идентификатор = СтрокаФормы.ПолучитьИдентификатор();
			Иначе
				Идентификатор = ТаблицаИсточник.Индекс(СтрокаФормы);
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, Идентификатор);
		КонецЕсли;
		СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, "Начисления", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
		
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Начисления", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачисленияПерерасчетСНулевымиСторноВДанныеМенеджераРасчета(ТаблицаИсточник, ТаблицаДополнение, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено) Экспорт
	НачисленияПерерасчетВДанныеМенеджераРасчета(ТаблицаДополнение, МенеджерРасчета, Организация, Отбор, ПозицииВставки, ДанныеРезультатовРаспределения, ДанныеРаспределенияПоТерриториямУсловиямТруда, "НачисленияПерерасчетНулевыеСторно");
	НачисленияПерерасчетВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор, ПозицииВставки, ДанныеРезультатовРаспределения, ДанныеРаспределенияПоТерриториямУсловиямТруда);
КонецПроцедуры

Процедура НачисленияВДанныеМенеджераРасчетаВидНачисленияВШапке(ТаблицаИсточник, МенеджерРасчета, Организация, ВидНачисления, Отбор = Неопределено, ПозицииВставки = Неопределено, БазовыйПериод = Неопределено) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидНачисления);
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаНачисленияВДанныеМенеджераРасчетаНачисленияВШапке(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, ВидНачисления, БазовыйПериод);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Начисления", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачисленияБезОплатыВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, ВидРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			
			ФизическоеЛицо = Отбор.ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		
		СтрокаНачисления = МенеджерРасчета.СтрокаТаблицыНачислений();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаФормы);
		СтрокаНачисления.Начисление = ВидРасчета;
		СтрокаНачисления.ФизическоеЛицо = ФизическоеЛицо;
		ПоказателиВМенеджерРасчета(СтрокаНачисления, СтрокаФормы, "Начисления", ВидРасчетаИнфо.КоличествоПоказателейИспользуемыхПриРасчете);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Начисления", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачисленияПерерасчетВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено, ИмяТаблицыПерерасчета = "НачисленияПерерасчет") Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			ФизическоеЛицо = Отбор.ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, ИмяТаблицыПерерасчета, ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить(ИмяТаблицыПерерасчета, ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПособияВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			ФизическоеЛицо = Отбор.ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, "Пособия", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Пособия", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПособияПерерасчетВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			ФизическоеЛицо = Отбор.ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, "ПособияПерерасчет", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("ПособияПерерасчет", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЛьготыВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено, Перерасчет = Ложь) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	ИмяТаблицы = ?(Перерасчет, "ЛьготыПерерасчет", "Льготы");
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			ФизическоеЛицо = Отбор.ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, ИмяТаблицы, ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить(ИмяТаблицы, ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачисленияПоДоговорамВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	КодыДоходаДоговорРаботыУслуги = УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаНачисленияПоДоговорамВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, КодыДоходаДоговорРаботыУслуги, ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения)
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("НачисленияПоДоговорам", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено, Перерасчет = Ложь) Экспорт

	Удержания = МенеджерРасчета.Зарплата.Удержания;
	ИдентификаторыСтрокФизическихЛиц = Новый Соответствие;
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Удержание");
	КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		Если Отбор <> Неопределено Тогда
			ФизическоеЛицо = Отбор.ФизическиеЛицаОтбор[СтрокаФормы.ФизическоеЛицо];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокФизическихЛиц, СтрокаФормы.ФизическоеЛицо, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, КатегорииУдержаний, ДанныеРезультатовРаспределения, Перерасчет);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ИмяТаблицы = ?(Перерасчет, "УдержанияПерерасчет", "Удержания");
		ПозицииВставки.Вставить(ИмяТаблицы, ИдентификаторыСтрокФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияИсправленияВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт

	Удержания = МенеджерРасчета.Зарплата.Удержания;
	ИдентификаторыСтрокФизическихЛиц = Новый Соответствие;
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Удержание");
	КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		Если Отбор <> Неопределено Тогда
			ФизическоеЛицо = Отбор.ФизическиеЛицаОтбор[СтрокаФормы.ФизическоеЛицо];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокФизическихЛиц, СтрокаФормы.ФизическоеЛицо, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если СтрокаФормы.ФиксРасчет
			Или СтрокаФормы.ФиксЗаполнение
			Или СтрокаФормы.ФиксСтрока Тогда
			
			СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, КатегорииУдержаний, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Удержания", ИдентификаторыСтрокФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура КорректировкиВыплатыВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	ИдентификаторыСтрокФизическихЛиц = Новый Соответствие;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		Если Отбор <> Неопределено Тогда
			ФизическоеЛицо = Отбор.ФизическиеЛицаОтбор[СтрокаФормы.ФизическоеЛицо];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокФизическихЛиц, СтрокаФормы.ФизическоеЛицо, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("КорректировкиВыплаты", ИдентификаторыСтрокФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПогашениеЗаймовВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ИдентификаторыСтрокФизическихЛиц = Новый Соответствие;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		Если Отбор <> Неопределено Тогда
			ФизическоеЛицо = Отбор.ФизическиеЛицаОтбор[СтрокаФормы.ФизическоеЛицо];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокФизическихЛиц, СтрокаФормы.ФизическоеЛицо, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаПогашениеЗаймовВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("ПогашениеЗаймов", ИдентификаторыСтрокФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура НДФЛВДанныеМенеджераРасчета(ТаблицаНДФЛ, ТаблицаВычетов, МенеджерРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	СтрокиВычетовКУдалению = Новый Массив;
	ИдентификаторыСтрокФизическихЛиц = Новый Соответствие;
	
	Для Каждого СтрокаФормы Из ТаблицаНДФЛ Цикл
		
		Если Отбор <> Неопределено Тогда
			ФизическоеЛицо = Отбор.ФизическиеЛицаОтбор[СтрокаФормы.ФизическоеЛицо];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокФизическихЛиц, СтрокаФормы.ФизическоеЛицо, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиНДФЛ", СтрокаФормы.ИдентификаторСтрокиНДФЛ);
		СтрокиПримененныеВычеты = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиВычетовКУдалению, СтрокиПримененныеВычеты);
		СтрокаНДФЛВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, СтрокиПримененныеВычеты, ДанныеРезультатовРаспределения);
		
	КонецЦикла;
		
	Если ПозицииВставки <> Неопределено Тогда	
		ПозицииВставки.Вставить("НДФЛ", ИдентификаторыСтрокФизическихЛиц);
	КонецЕсли;
		
	Если Отбор = Неопределено Тогда
		ТаблицаНДФЛ.Очистить();
		ТаблицаВычетов.Очистить();
	Иначе
		УдалитьСтрокиРасчета(ТаблицаВычетов, СтрокиВычетовКУдалению);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВзносыВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено) Экспорт

	СтрокиРасчета = Новый Массив;
	ИдентификаторыСтрокФизическихЛиц = Новый Соответствие;
		
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		Если Отбор <> Неопределено Тогда
			ФизическоеЛицо = Отбор.ФизическиеЛицаОтбор[СтрокаФормы.ФизическоеЛицо];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокФизическихЛиц, СтрокаФормы.ФизическоеЛицо, СтрокаФормы.ПолучитьИдентификатор());
			СтрокиРасчета.Добавить(СтрокаФормы);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МенеджерРасчета.Зарплата.Взносы.Добавить(), СтрокаФормы);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Взносы", ИдентификаторыСтрокФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, ИдентификаторСтроки = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		Возврат;
	КонецЕсли;
	
	РезультатРаспределения = СтрокаИсточник.РезультатРаспределения;
	Если РезультатРаспределения = Неопределено 
		И ДанныеРезультатовРаспределения <> Неопределено Тогда 
		
		Отбор = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
		РезультатРаспределения = ДанныеРезультатовРаспределения.НайтиСтроки(Отбор);
	КонецЕсли;
		
	Если РезультатРаспределения <> Неопределено Тогда
		Для Каждого СтрокаРаспределения Из РезультатРаспределения Цикл
			СтрокаРезультатаРаспределения = СтрокаПриемник.РаспределениеПоСтатьям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультатаРаспределения, СтрокаРаспределения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, ИдентификаторСтроки = Неопределено, МенеджерРасчета, Организация, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;	
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТруда = ПолучитьРаспределениеПоТерриториямУсловиямТрудаПоСтроке(СтрокаИсточник, ИдентификаторСтроки, ДанныеРаспределенияПоТерриториямУсловиямТруда);
		
	Если РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда
	
		Показатели = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
		КоличествоПоказателей = Показатели.Количество();
		
		Для Каждого СтрокаРаспределения Из РаспределениеПоТерриториямУсловиямТруда Цикл
			СтрокаТерриторииУсловияТруда = МенеджерРасчета.СтрокаТаблицыТерриторииУсловияТруда(СтрокаПриемник);
			ЗаполнитьЗначенияСвойств(СтрокаТерриторииУсловияТруда, СтрокаРаспределения);
			ПоказателиВМенеджерРасчета(СтрокаТерриторииУсловияТруда, СтрокаРаспределения, , КоличествоПоказателей, Ложь);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПоказателиВМенеджерРасчета(СтрокаПриемник, СтрокаФормы, ИмяПВР = "Начисления", КоличествоПоказателей = Неопределено, ОчищатьПоказатели = Истина) Экспорт
	
	Если КоличествоПоказателей = Неопределено Тогда
		КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете(ИмяПВР);
	КонецЕсли;
	
	Для Сч = 1 По КоличествоПоказателей Цикл
				
		Если РасчетЗарплатыРасширенный.ЕстьПолеВСтрокеКоллекции(СтрокаФормы, "Показатель" + Сч)
			И ЗначениеЗаполнено(СтрокаФормы["Показатель" + Сч]) Тогда
			
			СтрокаПоказателя = СтрокаПриемник.Показатели.Добавить();
			СтрокаПоказателя.Показатель = СтрокаФормы["Показатель" + Сч];
			СтрокаПоказателя.Значение = СтрокаФормы["Значение" + Сч];
			
			Если ОчищатьПоказатели Тогда
				СтрокаФормы["Показатель" + Сч] = Неопределено;
				СтрокаФормы["Значение" + Сч] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов, БазовыйПериод = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаПриемник.ДатаНачала) Тогда
		СтрокаПриемник.ДатаНачала = НачалоМесяца(СтрокаИсточник.ПериодДействия);
		СтрокаПриемник.ДатаОкончания = КонецМесяца(СтрокаИсточник.ПериодДействия);
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ТребуетсяРасчетБазы = Истина
		И ЗначенияРеквизитов.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
		
		СтрокаПриемник.ДатаНачала = НачалоМесяца(СтрокаИсточник.ПериодДействия);
		СтрокаПриемник.ДатаОкончания = КонецМесяца(СтрокаИсточник.ПериодДействия);
		
		Если БазовыйПериод = Неопределено Тогда
			СтрокаПриемник.НачалоБазовогоПериода = СтрокаИсточник.ДатаНачала;
			СтрокаПриемник.ОкончаниеБазовогоПериода = СтрокаИсточник.ДатаОкончания;
		Иначе
			СтрокаПриемник.НачалоБазовогоПериода = БазовыйПериод.ДатаНачала;
			СтрокаПриемник.ОкончаниеБазовогоПериода = БазовыйПериод.ДатаОкончания;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УпаковатьИзвестныеПоказателиВМенеджерРасчета(МенеджерРасчета, ТаблицаИсточник, Показатель = Неопределено) Экспорт
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		Для Каждого СтрокаПоказателя Из СтрокаИсточника.Показатели Цикл
			Если Показатель = Неопределено
				Или СтрокаПоказателя.Показатель = Показатель Тогда
				
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(СтрокаИсточника, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, Организация, ФизическоеЛицо, Владелец = Неопределено, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.СтрокаТаблицыНачислений();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.Организация = Организация;
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаИсточник.Начисление);
	ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(СтрокаПриемник, СтрокаИсточник, ВидРасчетаИнфо);
	СтрокаПриемник.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаПриемник.Владелец = Владелец;
	ЗаполнитьДополнительныеСвойстваНачисленийМенеджераРасчета(СтрокаПриемник, СтрокаИсточник);
	
	ПоказателиВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, "Начисления");
	РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
		СтрокаПриемник,
		СтрокаИсточник,
		СтрокаИсточник.ИдентификаторСтрокиВидаРасчета,
		МенеджерРасчета,
		Организация,
		ДанныеРаспределенияПоТерриториямУсловиямТруда);
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтрокиВидаРасчета, ДанныеРезультатовРаспределения);
		
КонецПроцедуры

Процедура СтрокаНачисленияВДанныеМенеджераРасчетаНачисленияВШапке(МенеджерРасчета, СтрокаИсточник, Организация, ФизическоеЛицо, ВидНачисления, БазовыйПериод = Неопределено) Экспорт
	
	СтрокаНачисления = МенеджерРасчета.СтрокаТаблицыНачислений();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаИсточник);
	СтрокаНачисления.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаНачисления.Организация = Организация;
	СтрокаНачисления.Начисление = ВидНачисления;
	СтрокаНачисления.Владелец = "Начисления";
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидНачисления);
	
	ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(СтрокаНачисления, СтрокаИсточник, ВидРасчетаИнфо, БазовыйПериод);
	ПоказателиВМенеджерРасчета(СтрокаНачисления, СтрокаИсточник, "Начисления", ВидРасчетаИнфо.КоличествоПоказателейИспользуемыхПриРасчете);
	РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
		СтрокаНачисления,
		СтрокаИсточник,
		СтрокаИсточник.ИдентификаторСтрокиВидаРасчета,
		МенеджерРасчета,
		Организация);
	РезультатРаспределенияВМенеджерРасчета(СтрокаНачисления, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтрокиВидаРасчета);
		
КонецПроцедуры

Процедура СтрокаНачисленияПоДоговорамВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, Организация, ФизическоеЛицо, КодыДоходаДоговорРаботыУслуги, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.Зарплата.ДоговорыПодряда.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	Если КодыДоходаДоговорРаботыУслуги.Найти(СтрокаИсточник.КодДохода) <> Неопределено Тогда
    	СтрокаПриемник.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги;
	Иначе
		СтрокаПриемник.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа;
	КонецЕсли;
	СтрокаПриемник.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаПриемник.ТерриторииУсловияТруда = Обработки.МенеджерРасчетаЗарплаты.ТаблицаТерриторийУсловийТруда();
	РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
		СтрокаПриемник,
		СтрокаИсточник,
		СтрокаИсточник.ИдентификаторСтроки,
		МенеджерРасчета,
		Организация,
		ДанныеРаспределенияПоТерриториямУсловиямТруда);
	СтрокаПриемник.РаспределениеПоСтатьям = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРаспределениеРезультатовНачислений();
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтроки, ДанныеРезультатовРаспределения);
	
КонецПроцедуры

Процедура СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, Организация, ФизическоеЛицо, Владелец, ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.СтрокаТаблицыНачислений();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.Организация = Организация;
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаИсточник.Начисление);
	
	ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(СтрокаПриемник, СтрокаИсточник, ВидРасчетаИнфо);
	СтрокаПриемник.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаПриемник.Владелец = Владелец;
	ПоказателиВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, "Начисления");
	РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
		СтрокаПриемник,
		СтрокаИсточник,
		СтрокаИсточник.ИдентификаторСтрокиВидаРасчета,
		МенеджерРасчета,
		Организация,
		ДанныеРаспределенияПоТерриториямУсловиямТруда);
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтрокиВидаРасчета, ДанныеРезультатовРаспределения);
	ЗаполнитьДополнительныеСвойстваПособийМенеджераРасчета(СтрокаПриемник, СтрокаИсточник);
	
КонецПроцедуры

Процедура СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, КатегорииУдержаний, ДанныеРезультатовРаспределения = Неопределено, Перерасчет = Ложь) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.СтрокаТаблицыУдержаний();
	СтрокаПриемник.Владелец = ?(Перерасчет, "УдержанияПерерасчет", "Удержания");
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.Категория = КатегорииУдержаний[СтрокаИсточник.Удержание];
	ПоказателиВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, "Удержания"); 
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтрокиВидаРасчета, ДанныеРезультатовРаспределения);
	
КонецПроцедуры

Процедура СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.Зарплата.КорректировкиВыплаты.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтроки, ДанныеРезультатовРаспределения);
	
КонецПроцедуры

Процедура СтрокаПогашениеЗаймовВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.Зарплата.ПогашениеЗаймов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	СтрокаПриемник.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтроки, ДанныеРезультатовРаспределения);
	
КонецПроцедуры

Процедура СтрокаНДФЛВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, СтрокиПримененныеВычеты, ДанныеРезультатовРаспределения = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.Зарплата.НДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("Налог");
	ИменаРесурсовСумма = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("Сумма");
	ВсегоКолонокСПревышением = ИменаРесурсовНалога.Количество();
	Для Сч = 1 По ВсегоКолонокСПревышением Цикл
		СтрокаПриемник[ИменаРесурсовСумма[Сч - 1]] = СтрокаИсточник[ИменаРесурсовНалога[Сч - 1]];
	КонецЦикла;
	
	ПоляТаблицы = УчетНДФЛ.ПоляТаблицыПоВидамВычетов();
	
	МесяцыПериодаПредоставленияВычета = Новый Соответствие;
	НалоговыеБазыВычетов = Новый Соответствие;
	
	Для Каждого СтрокаВычета Из СтрокиПримененныеВычеты Цикл
		МесяцыПериодаПредоставленияВычета.Вставить(СтрокаВычета.МесяцПериодаПредоставленияВычета,СтрокаВычета.МесяцПериодаПредоставленияВычета);
		НалоговыеБазыВычетов.Вставить(СтрокаВычета.НалоговаяБаза,СтрокаВычета.НалоговаяБаза);
	КонецЦикла;
	
	Если НалоговыеБазыВычетов.Количество() < 2 Тогда
		Если МесяцыПериодаПредоставленияВычета.Количество() = 0 Тогда
			
		ИначеЕсли МесяцыПериодаПредоставленияВычета.Количество() = 1 Тогда
			Для Каждого СтрокаВычета Из СтрокиПримененныеВычеты Цикл
				ИмяПоля = ПоляТаблицы[СтрокаВычета.КодВычета];
				Если СтрокаПриемник[ИмяПоля] = 0 Тогда
					СтрокаДляЗаполнения = СтрокаПриемник;
					СтрокаДляЗаполнения.НалоговаяБаза = СтрокаВычета.НалоговаяБаза;
				Иначе
					СтрокаДляЗаполнения = МенеджерРасчета.Зарплата.НДФЛ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, СтрокаИсточник,,"Налог,ЗачтеноАвансовыхПлатежей,ПримененныйВычетЛичный,ПримененныйВычетЛичныйНалоговаяБаза");
					СтрокаДляЗаполнения.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
				КонецЕсли;
				СтрокаДляЗаполнения[ИмяПоля] = СтрокаВычета.РазмерВычета;
				СтрокаДляЗаполнения.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
				СтрокаДляЗаполнения.НалоговаяБаза = СтрокаВычета.НалоговаяБаза;
			КонецЦикла; 
		Иначе
			ПервыйМесяцОбработан = Ложь;
			Для Каждого Элемент Из МесяцыПериодаПредоставленияВычета Цикл
				Если Не ПервыйМесяцОбработан Тогда
					СтрокаДляЗаполнения = СтрокаПриемник;
					ПервыйМесяцОбработан = Истина;
				Иначе
					СтрокаДляЗаполнения = МенеджерРасчета.Зарплата.НДФЛ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, СтрокаИсточник,,"Налог,ЗачтеноАвансовыхПлатежей,ПримененныйВычетЛичный,ПримененныйВычетЛичныйНалоговаяБаза");
					СтрокаДляЗаполнения.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
				КонецЕсли;
				Для Каждого СтрокаВычета Из СтрокиПримененныеВычеты Цикл
					Если СтрокаВычета.МесяцПериодаПредоставленияВычета <> Элемент.Ключ Тогда
						Продолжить;
					КонецЕсли;
					ИмяПоля = ПоляТаблицы[СтрокаВычета.КодВычета];
					СтрокаДляЗаполнения[ИмяПоля] = СтрокаВычета.РазмерВычета;
					СтрокаДляЗаполнения.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
					СтрокаДляЗаполнения.НалоговаяБаза = СтрокаВычета.НалоговаяБаза;
				КонецЦикла; 
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПервыйМесяцОбработан = Ложь;
		Для Каждого ЭлементНалоговаяБаза ИЗ НалоговыеБазыВычетов Цикл
			Для Каждого Элемент Из МесяцыПериодаПредоставленияВычета Цикл
				Если Не ПервыйМесяцОбработан Тогда
					СтрокаДляЗаполнения = СтрокаПриемник;
					ПервыйМесяцОбработан = Истина;
				Иначе
					СтрокаДляЗаполнения = МенеджерРасчета.Зарплата.НДФЛ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, СтрокаИсточник,,"Налог,ЗачтеноАвансовыхПлатежей,ПримененныйВычетЛичный,ПримененныйВычетЛичныйНалоговаяБаза");
					СтрокаДляЗаполнения.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
				КонецЕсли;
				Для Каждого СтрокаВычета Из СтрокиПримененныеВычеты Цикл
					Если СтрокаВычета.МесяцПериодаПредоставленияВычета <> Элемент.Ключ 
						Или СтрокаВычета.НалоговаяБаза <> ЭлементНалоговаяБаза.Ключ Тогда
						Продолжить;
					КонецЕсли;
					ИмяПоля = ПоляТаблицы[СтрокаВычета.КодВычета];
					СтрокаДляЗаполнения[ИмяПоля] = СтрокаВычета.РазмерВычета;
					СтрокаДляЗаполнения.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
					СтрокаДляЗаполнения.НалоговаяБаза = СтрокаВычета.НалоговаяБаза;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПриемник.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РезультатРаспределенияВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, СтрокаИсточник.ИдентификаторСтрокиНДФЛ, ДанныеРезультатовРаспределения);
	
КонецПроцедуры

Процедура ЗависимыеНачисленияВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ИмяТаблицыЗависимыеНачисления = "ЗависимыеНачисления") Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			
			ФизическоеЛицо = Отбор.ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, ИмяТаблицыЗависимыеНачисления);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить(ИмяТаблицыЗависимыеНачисления, ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОчиститьПоказателиСтрокиФормы(СтрокаФормы, ИмяПВР = "Начисления", КоличествоПоказателей = Неопределено) Экспорт
	
	Если КоличествоПоказателей = Неопределено Тогда
		КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете(ИмяПВР);
	КонецЕсли;
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		Если РасчетЗарплатыРасширенный.ЕстьПолеВСтрокеКоллекции(СтрокаФормы, "Показатель" + Сч) Тогда		
				СтрокаФормы["Показатель" + Сч] = Неопределено;
				СтрокаФормы["Значение" + Сч] = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура НачисленияДолейРКСНВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено, ИмяТаблицыЗависимыеНачисления = "НачисленияДолейРКСН") Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			
			ФизическоеЛицо = Отбор.ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, ИмяТаблицыЗависимыеНачисления);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить(ИмяТаблицыЗависимыеНачисления, ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ДанныеМенеджераРасчетаВДанныеФормы

Процедура РасчетЗарплатыНачисленияВДанныеФормы(ТаблицыНачислений, ТаблицаИсточник, Организация, МесяцНачисления = Неопределено, ПозицииВставки = Неопределено, РежимДоначисления = Ложь) Экспорт
	
	ВидыРасчета = Новый Массив;
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		ВидыРасчета.Добавить(СтрокаИсточника.Начисление);
	КонецЦикла;
	
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияНачислений();
	
	ПозицииСотрудников = Новый Соответствие;
	СоответствиеОбходовСотрудников = Новый Соответствие;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ТаблицыНачислений Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицииСотрудниковТаблицы = Неопределено;
			Если Не ПозицииВставки.Свойство(КлючИЗначение.Ключ, ПозицииСотрудниковТаблицы) Тогда
				ПозицииСотрудниковТаблицы = Новый Соответствие;
				ПозицииВставки.Вставить(КлючИЗначение.Ключ, ПозицииСотрудниковТаблицы);
			КонецЕсли;
			ПозицииСотрудников.Вставить(КлючИЗначение.Ключ, ПозицииСотрудниковТаблицы);
			СоответствиеОбходовСотрудников.Вставить(КлючИЗначение.Ключ, Новый Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаНачисления Из ТаблицаИсточник Цикл
		
		ЭтоПерерасчет = РежимДоначисления Или ЭтоСтрокаПерерасчета(СтрокаНачисления, МесяцНачисления);
		ЭтоПособие = ЭтоСтрокаПособия(СтрокаНачисления);
		ЭтоНулевоеСторно = СтрокаНачисления.ФиксСторно
			И СтрокаНачисления.Сторно
			И СтрокаНачисления.Результат = 0
			И СтрокаНачисления.ОплаченоДней = 0
			И СтрокаНачисления.ОплаченоЧасов = 0;
			
		ЭтоЛьготы = Ложь;
		ЭтоУправленческиеНачисления = Ложь;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников")
			И ТаблицыНачислений.Льготы <> Неопределено Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			ЭтоЛьготы = Модуль.ЭтоСтрокаЛьготы(СтрокаНачисления, ВидыРасчетаИнфо);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата")
			И ТаблицыНачислений.УправленческиеНачисления <> Неопределено Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			ЭтоУправленческиеНачисления = Модуль.ЭтоСтрокаУправленческиеНачисления(СтрокаНачисления);
		КонецЕсли;
		
		Если ТаблицыНачислений["ПособияПерерасчет"] <> Неопределено
			И (СтрокаНачисления.Владелец = "ПособияПерерасчет"
				Или ЭтоПособие И ЭтоПерерасчет И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец)) Тогда
			
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["ПособияПерерасчет"], ПозицииСотрудников["ПособияПерерасчет"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["ПособияПерерасчет"], ОбходТаблицыИдентификаторов);
			СтрокаПособияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["Пособия"] <> Неопределено
			И (СтрокаНачисления.Владелец = "Пособия"
				Или ЭтоПособие И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец)) Тогда
			
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["Пособия"], ПозицииСотрудников["Пособия"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["Пособия"], ОбходТаблицыИдентификаторов);
			СтрокаПособияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["НачисленияПерерасчетНулевыеСторно"] <> Неопределено
			И (СтрокаНачисления.Владелец = "НачисленияПерерасчетНулевыеСторно"
				Или ЭтоНулевоеСторно) Тогда
		
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["НачисленияПерерасчетНулевыеСторно"], ПозицииСотрудников["НачисленияПерерасчетНулевыеСторно"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["НачисленияПерерасчетНулевыеСторно"], ОбходТаблицыИдентификаторов);
			СтрокаНачисленияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["ЛьготыПерерасчет"] <> Неопределено
			И ЭтоЛьготы	И ЭтоПерерасчет  И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец) Тогда
			
		    ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["ЛьготыПерерасчет"], ПозицииСотрудников["ЛьготыПерерасчет"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["ЛьготыПерерасчет"], ОбходТаблицыИдентификаторов);
			СтрокаЛьготыВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["Льготы"] <> Неопределено
			И ЭтоЛьготы Тогда
			
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["Льготы"], ПозицииСотрудников["Льготы"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["Льготы"], ОбходТаблицыИдентификаторов);
			СтрокаЛьготыВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") 
			И ТаблицыНачислений["УправленческиеНачисления"] <> Неопределено
			И ЭтоУправленческиеНачисления Тогда
			
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["УправленческиеНачисления"], ПозицииСотрудников["УправленческиеНачисления"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["УправленческиеНачисления"], ОбходТаблицыИдентификаторов);
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.СтрокаУправленческиеНачисленияВДанныеФормы(СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицыНачислений["НачисленияПерерасчет"] <> Неопределено
			И (СтрокаНачисления.Владелец = "НачисленияПерерасчет"
				Или ЭтоПерерасчет И Не ЗначениеЗаполнено(СтрокаНачисления.Владелец)) Тогда
				
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["НачисленияПерерасчет"], ПозицииСотрудников["НачисленияПерерасчет"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["НачисленияПерерасчет"], ОбходТаблицыИдентификаторов);
			СтрокаНачисленияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНачисления.РассчитыватьПоРазовымНачислениямДокумента 
			И ТаблицыНачислений.Свойство("ЗависимыеНачисления") 
			И ТаблицыНачислений.ЗависимыеНачисления <> Неопределено Тогда
			
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["ЗависимыеНачисления"], ПозицииСотрудников["ЗависимыеНачисления"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["ЗависимыеНачисления"], ОбходТаблицыИдентификаторов);
			СтрокаНачисленияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНачисления.РассчитыватьПоРазовымНачислениямДокумента 
			И ТаблицыНачислений.Свойство("НачисленияДолейРКСН") 
			И ТаблицыНачислений.НачисленияДолейРКСН <> Неопределено Тогда
			
			ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["НачисленияДолейРКСН"], ПозицииСотрудников["НачисленияДолейРКСН"], СтрокаНачисления.Сотрудник);
			СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["НачисленияДолейРКСН"], ОбходТаблицыИдентификаторов);
			СтрокаНачисленияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
			
			Продолжить;
		КонецЕсли;
		
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["Начисления"], ПозицииСотрудников["Начисления"], СтрокаНачисления.Сотрудник);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыНачислений["Начисления"], ОбходТаблицыИдентификаторов);
		СтрокаНачисленияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ТаблицыНачислений Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьНеактуальныеСтрокиФормы(КлючИЗначение.Значение, СоответствиеОбходовСотрудников[КлючИЗначение.Ключ], ПозицииСотрудников[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетЗарплатыНачисленияВДанныеФормыБезОплаты(ТаблицыНачислений, ТаблицаИсточник, Организация) Экспорт
	
	ВидыРасчета = Новый Массив;
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		ВидыРасчета.Добавить(СтрокаИсточника.Начисление);
	КонецЦикла;
	
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияНачислений();
	
	ТаблицаНачисления = ТаблицыНачислений.Начисления;
	ТаблицаПерерасчет = ТаблицыНачислений.НачисленияПерерасчет;
	ТаблицаПерерасчетНулевыеСторно = ТаблицыНачислений.НачисленияПерерасчетНулевыеСторно;
	ПереноситьНулевыеСторно = ТаблицаПерерасчетНулевыеСторно <> Неопределено;
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		Если СтрокаИсточника.Владелец = "НачисленияПерерасчет" Тогда
			Если ПереноситьНулевыеСторно И СтрокаИсточника.ФиксСторно И  СтрокаИсточника.Сторно И СтрокаИсточника.Результат = 0 Тогда
				НоваяСтрока = ТаблицаПерерасчетНулевыеСторно.Добавить();
				СтрокаНачисленияВДанныеФормы(Организация, НоваяСтрока, СтрокаИсточника, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПерерасчет.Добавить();
			СтрокаНачисленияВДанныеФормы(Организация, НоваяСтрока, СтрокаИсточника, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
		Иначе
			НоваяСтрока = ТаблицаНачисления.Добавить();
			СтрокаНачисленияБезОплатыВДанныеФормы(НоваяСтрока, СтрокаИсточника, ВидыРасчетаИнфо);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетЗарплатыНачисленияПоДоговорамВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, Организация, ПозицииВставки = Неопределено) Экспорт
	
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияНачислений();
	ПозицииСотрудников = Неопределено;
	СоответствиеОбходовСотрудников = Неопределено;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("НачисленияПоДоговорам", ПозицииСотрудников) Тогда
			ПозицииСотрудников = Новый Соответствие;
			ПозицииВставки.Вставить("НачисленияПоДоговорам", ПозицииСотрудников);
		КонецЕсли;
		СоответствиеОбходовСотрудников = Новый Соответствие;
	КонецЕсли;
			
	Для Каждого СтрокаНачисления Из ТаблицаИсточник Цикл
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников, ПозицииСотрудников, СтрокаНачисления.Сотрудник);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		СтрокаНачисленияПоДоговорамВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ПараметрыДляПроверкиРезультатаРаспределения);
	КонецЦикла; 
	
	УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовСотрудников, ПозицииСотрудников);
	
КонецПроцедуры

Процедура РасчетЗарплатыУдержанияВДанныеФормы(ТаблицыУдержаний, ТаблицаИсточник, МесяцНачисления = Неопределено, ПозицииВставки = Неопределено, РежимДоначисления = Ложь) Экспорт
	
	ВидыРасчета = Новый Массив;
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		ВидыРасчета.Добавить(СтрокаИсточника.Удержание);
	КонецЦикла;
	
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
	
	ПозицииФизическихЛиц = Новый Соответствие;
	СоответствиеОбходовФизическихЛиц = Новый Соответствие;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ТаблицыУдержаний Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицииФизическихЛицТаблицы = Неопределено;
			Если Не ПозицииВставки.Свойство(КлючИЗначение.Ключ, ПозицииФизическихЛицТаблицы) Тогда
				ПозицииФизическихЛицТаблицы = Новый Соответствие;
				ПозицииВставки.Вставить(КлючИЗначение.Ключ, ПозицииФизическихЛицТаблицы);
			КонецЕсли;
			ПозицииФизическихЛиц.Вставить(КлючИЗначение.Ключ, ПозицииФизическихЛицТаблицы);
			СоответствиеОбходовФизическихЛиц.Вставить(КлючИЗначение.Ключ, Новый Соответствие);
		КонецЦикла;
	КонецЕсли;
			
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ЭтоПерерасчет = РежимДоначисления Или ЭтоСтрокаПерерасчетаУдержаний(СтрокаИсточник, МесяцНачисления);
		Если ТаблицыУдержаний.УдержанияПерерасчет <> Неопределено 
			И ЭтоПерерасчет
			Или СтрокаИсточник.Владелец = "УдержанияПерерасчет" Тогда
			
			ИмяТаблицы = "УдержанияПерерасчет";
		Иначе
			ИмяТаблицы = "Удержания";
		КонецЕсли;
		
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовФизическихЛиц[ИмяТаблицы], ПозицииФизическихЛиц[ИмяТаблицы], СтрокаИсточник.ФизическоеЛицо);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицыУдержаний[ИмяТаблицы], ОбходТаблицыИдентификаторов);
		СтрокаУдержанияВДанныеФормы(СтрокаФормы, СтрокаИсточник, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
	КонецЦикла; 
	
	Для Каждого КлючИЗначение Из ТаблицыУдержаний Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьНеактуальныеСтрокиФормы(КлючИЗначение.Значение, СоответствиеОбходовФизическихЛиц[КлючИЗначение.Ключ], ПозицииФизическихЛиц[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетЗарплатыНДФЛВДанныеФормы(ТаблицаНДФЛ, ТаблицаВычетов, ТаблицаИсточник, ПозицииВставки = Неопределено, ТаблицаДокументов = Неопределено, ДокументСсылка = Неопределено) Экспорт
	
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ТаблицаНДФЛ) + 1;
	
	ФизическиеЛица = Новый Соответствие;
	
	ОписаниеКолонок = УчетНДФЛ.ОписаниеКолонокТаблицыНДФЛ(ТаблицаИсточник);
	СтруктураПоискаВычетов = Новый Структура(ОписаниеКолонок.КолонкиПоиска);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаИсточник, ОписаниеКолонок.КолонкиПоиска);
	
	ИсточникСИндексами = ТаблицаИсточник.Скопировать();
	ИсточникСИндексами.Индексы.Добавить(ОписаниеКолонок.КолонкиСвязиТаблиц);
	ИсточникСИндексами.Индексы.Добавить(ОписаниеКолонок.КолонкиПоиска);
	НДФЛ = УчетНДФЛ.ТаблицаНДФЛбезМесяцаПериодаПредоставленияВычета(ИсточникСИндексами, ОписаниеКолонок);
	ПозицииФизическихЛицНДФЛ = Неопределено;
	ПозицииФизическихЛицВычетов = Неопределено;
	СоответствиеОбходовФизическихЛиц = Неопределено;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("НДФЛ", ПозицииФизическихЛицНДФЛ) Тогда
			ПозицииФизическихЛицНДФЛ = Новый Соответствие;
			ПозицииВставки.Вставить("НДФЛ", ПозицииФизическихЛицНДФЛ);
		КонецЕсли;
		ПозицииФизическихЛицВычетов = Новый Соответствие;
		ПозицииВставки.Вставить("ПримененныеВычетыНаДетейИИмущественные", ПозицииФизическихЛицВычетов);
		СоответствиеОбходовФизическихЛиц = Новый Соответствие;
	КонецЕсли;
			
	Для Каждого СтрокаИсточник Из НДФЛ Цикл
		СтрокаИсточник.ИдентификаторСтрокиНДФЛ = МаксимальныйИдентификаторСтрокиНДФЛ;
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛицНДФЛ, СтрокаИсточник.ФизическоеЛицо);
		СтрокаНДФЛ = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаНДФЛ, ОбходТаблицыИдентификаторов);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВычетов,СтрокаИсточник);
		СтрокиВычетов = ИсточникСИндексами.НайтиСтроки(СтруктураПоискаВычетов);
		СтрокаНДФЛВДанныеФормы(СтрокаНДФЛ, ТаблицаВычетов, СтрокаИсточник, СтрокиВычетов, ПараметрыДляПроверкиРезультатаРаспределения, ПозицииФизическихЛицВычетов);
		
		МаксимальныйИдентификаторСтрокиНДФЛ = МаксимальныйИдентификаторСтрокиНДФЛ + 1;
		Если ТаблицаДокументов <> Неопределено Тогда
			ДокументыФизическихЛиц = ФизическиеЛица[СтрокаИсточник.ФизическоеЛицо];
			Если ДокументыФизическихЛиц = Неопределено Тогда 
				ДокументыФизическихЛиц = Новый Соответствие;
		        ФизическиеЛица.Вставить(СтрокаИсточник.ФизическоеЛицо, ДокументыФизическихЛиц);
			КонецЕсли;
			Для Каждого ДокументОснование Из СтрокаИсточник.УчтенныеОснования Цикл 
				Если ЗначениеЗаполнено(ДокументОснование) И ДокументОснование <> ДокументСсылка Тогда 
					ДокументыФизическихЛиц.Вставить(ДокументОснование, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	УдалитьНеактуальныеСтрокиФормы(ТаблицаНДФЛ, СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛицНДФЛ);
	
	Если ТаблицаДокументов <> Неопределено Тогда
		ПозицииФизическихЛиц = Неопределено;
		Если ПозицииВставки <> Неопределено Тогда
			ПозицииФизическихЛиц = Новый Соответствие;
			ПозицииВставки.Вставить("УчтенныеПриРасчетеНДФЛДокументы", ПозицииФизическихЛиц);
		КонецЕсли;
		Для Каждого ДанныеФизическогоЛица Из ФизическиеЛица Цикл
			ФизическоеЛицо = ДанныеФизическогоЛица.Ключ;
			ДокументыФизическихЛиц = ДанныеФизическогоЛица.Значение;
			Для Каждого ДанныеДокумента Из ДокументыФизическихЛиц Цикл 
				СтрокаДокумента = ТаблицаДокументов.Добавить();
				СтрокаДокумента.ФизическоеЛицо = ФизическоеЛицо;
				СтрокаДокумента.ДокументОснование = ДанныеДокумента.Ключ;
				Если ПозицииВставки <> Неопределено Тогда
					РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(
						ПозицииФизическихЛиц, ФизическоеЛицо, СтрокаДокумента.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетЗарплатыКорректировкиВыплатыВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, ПозицииВставки = Неопределено) Экспорт
	
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
	
	ПозицииФизическихЛиц = Неопределено;
	СоответствиеОбходовФизическихЛиц = Неопределено;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("КорректировкиВыплаты", ПозицииФизическихЛиц) Тогда
			ПозицииФизическихЛиц = Новый Соответствие;
			ПозицииВставки.Вставить("КорректировкиВыплаты", ПозицииФизическихЛиц);
		КонецЕсли;
		СоответствиеОбходовФизическихЛиц = Новый Соответствие;
	КонецЕсли;
			
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц, СтрокаИсточник.ФизическоеЛицо);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		СтрокаКорректировкиВыплатыВДанныеФормы(СтрокаФормы, СтрокаИсточник, ПараметрыДляПроверкиРезультатаРаспределения);
	КонецЦикла; 
	
	УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц);
	
КонецПроцедуры

Процедура РасчетЗарплатыВзносыВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, ПозицииВставки = Неопределено) Экспорт
	
	ПозицииФизическихЛиц = Неопределено;
	СоответствиеОбходовФизическихЛиц = Неопределено;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("Взносы", ПозицииФизическихЛиц) Тогда
			ПозицииФизическихЛиц = Новый Соответствие;
			ПозицииВставки.Вставить("Взносы", ПозицииФизическихЛиц);
		КонецЕсли;
		СоответствиеОбходовФизическихЛиц = Новый Соответствие;
	КонецЕсли;
			
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц, СтрокаИсточник.ФизическоеЛицо);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаИсточник);
	КонецЦикла; 
	
	УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц);
	
КонецПроцедуры

Процедура РасчетЗарплатыПогашениеЗаймовВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, ПозицииВставки = Неопределено) Экспорт
	
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
	
	ПозицииФизическихЛиц = Неопределено;
	СоответствиеОбходовФизическихЛиц = Неопределено;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("ПогашениеЗаймов", ПозицииФизическихЛиц) Тогда
			ПозицииФизическихЛиц = Новый Соответствие;
			ПозицииВставки.Вставить("ПогашениеЗаймов", ПозицииФизическихЛиц);
		КонецЕсли;
		СоответствиеОбходовФизическихЛиц = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц, СтрокаИсточник.ФизическоеЛицо);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		СтрокаПогашениеЗаймовВДанныеФормы(СтрокаФормы, СтрокаИсточник, ПараметрыДляПроверкиРезультатаРаспределения);
	КонецЦикла; 
			
	УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц);
	
КонецПроцедуры

Процедура СтрокаНачисленияБезОплатыВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = Неопределено;
	Если ЗначениеЗаполнено(СтрокаИсточник.Начисление) Тогда
		ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	КонецЕсли;
	
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
		ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаНачисленияВДанныеПерерасчета(Организация, СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, , "ИдентификаторСтроки");
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник.Дополнительно);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда 
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
		ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТрудаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, Организация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник); 
	КонецЕсли;	
	
КонецПроцедуры

Процедура СтрокаПособияВДанныеФормы(Организация, СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
		ДополнительныеСвойстваПособийВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
		ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТрудаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, Организация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
		Если СтрокаПриемник.РезультатРаспределения <> Неопределено Тогда
		
			СтрокаПриемник.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиНачисления(
				СтрокаПриемник.Результат,
				СтрокаПриемник.Начисление,
				СтрокаИсточник.РаспределениеПоСтатьям, 
				ПараметрыДляПроверкиРезультатаРаспределения);
		
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаЛьготыВДанныеФормы(Организация, СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
		ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТрудаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, Организация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
		Если СтрокаПриемник.РезультатРаспределения <> Неопределено Тогда
		
			СтрокаПриемник.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиНачисления(
				СтрокаПриемник.Результат,
				СтрокаПриемник.Начисление,
				СтрокаИсточник.РаспределениеПоСтатьям, 
				ПараметрыДляПроверкиРезультатаРаспределения);
		
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСтрокаПособия(СтрокаНачисления) Экспорт
	
	КатегорииПособий = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	Если КатегорииПособий.Найти(СтрокаНачисления.Категория) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСтрокаПерерасчета(СтрокаНачисления, МесяцНачисления) Экспорт
	
	Если СтрокаНачисления.ФиксСторно = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если МесяцНачисления = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если СтрокаНачисления.ПериодДействия < МесяцНачисления Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСтрокаПерерасчетаУдержаний(СтрокаУдержания, МесяцНачисления) Экспорт
	
	Если МесяцНачисления = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаУдержания.ДатаНачала < МесяцНачисления Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов) Экспорт
	
	Если ЗначенияРеквизитов.ТребуетсяРасчетБазы
		И ЗначенияРеквизитов.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
		
		СтрокаПриемник.ДатаНачала = СтрокаИсточник.НачалоБазовогоПериода;
		СтрокаПриемник.ДатаОкончания = СтрокаИсточник.ОкончаниеБазовогоПериода;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, Показатели) Экспорт
	
	ЕстьПоказателиИсточника = СтрокаИсточник.Показатели.Количество() > 0;
	
	Сч = 1;
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.ОтображатьВДокументахНачисления Тогда
			СтрокаПриемник["Показатель" + Сч] = Показатель.Показатель;
			Если ЕстьПоказателиИсточника Тогда
				СтрокаПоказателя = СтрокаИсточник.Показатели.Найти(Показатель.Показатель, "Показатель");
				Если СтрокаПоказателя <> Неопределено Тогда
					СтрокаПриемник["Значение" + Сч] = СтрокаПоказателя.Значение;
					СтрокаПриемник["ПредставлениеПоказателя" + Сч] 	= 
						?(ЗначениеЗаполнено(СтрокаПоказателя.Показатель.КраткоеНаименование), СтрокаПоказателя.Показатель.КраткоеНаименование, СтрокаПоказателя.Показатель.Наименование);
				КонецЕсли;
			КонецЕсли;
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетЗарплатыНДФЛКонтрагентовВДанныеФормы(ТаблицаНДФЛ, ТаблицаВычетов, ТаблицаИсточник, ПозицииВставки = Неопределено, ТаблицаДокументов = Неопределено, ДокументСсылка = Неопределено) Экспорт
	
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
	ПараметрыДляПроверкиРезультатаРаспределения.Сотрудник = Ложь;
	
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ТаблицаНДФЛ) + 1;
	
	ФизическиеЛица = Новый Соответствие;
	
	ОписаниеКолонок = УчетНДФЛ.ОписаниеКолонокТаблицыНДФЛ(ТаблицаИсточник);
	СтруктураПоискаВычетов = Новый Структура(ОписаниеКолонок.КолонкиПоиска);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаИсточник, ОписаниеКолонок.КолонкиПоиска);
	
	НДФЛ = УчетНДФЛ.ТаблицаНДФЛбезМесяцаПериодаПредоставленияВычета(ТаблицаИсточник, ОписаниеКолонок);
	ПозицииФизическихЛицНДФЛ = Неопределено;
	ПозицииФизическихЛицВычетов = Неопределено;
	СоответствиеОбходовФизическихЛиц = Неопределено;	
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииФизическихЛицНДФЛ = ПозицииВставки["НДФЛ"];
		Если ПозицииФизическихЛицНДФЛ = Неопределено Тогда
			ПозицииФизическихЛицНДФЛ = Новый Соответствие;
			ПозицииВставки.Вставить("НДФЛ", ПозицииФизическихЛицНДФЛ);
		КонецЕсли;
		ПозицииФизическихЛицВычетов = Новый Соответствие;
		ПозицииВставки.Вставить("ПримененныеВычетыНаДетейИИмущественные", ПозицииФизическихЛицВычетов);
		СоответствиеОбходовФизическихЛиц = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		СтрокаИсточник.ИдентификаторСтрокиНДФЛ = МаксимальныйИдентификаторСтрокиНДФЛ;
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛицНДФЛ, СтрокаИсточник.ФизическоеЛицо);
		СтрокаНДФЛ = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаНДФЛ, ОбходТаблицыИдентификаторов);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВычетов,СтрокаИсточник);
		СтрокиВычетов = ТаблицаИсточник.НайтиСтроки(СтруктураПоискаВычетов);
		СтрокаНДФЛВДанныеФормы(СтрокаНДФЛ, ТаблицаВычетов, СтрокаИсточник, СтрокиВычетов, ПараметрыДляПроверкиРезультатаРаспределения, ПозицииФизическихЛицВычетов);
		
		МаксимальныйИдентификаторСтрокиНДФЛ = МаксимальныйИдентификаторСтрокиНДФЛ + 1;
		Если ТаблицаДокументов <> Неопределено Тогда
			ДокументыФизическихЛиц = ФизическиеЛица[СтрокаИсточник.ФизическоеЛицо];
			Если ДокументыФизическихЛиц = Неопределено Тогда 
				ДокументыФизическихЛиц = Новый Соответствие;
				ФизическиеЛица.Вставить(СтрокаИсточник.ФизическоеЛицо, ДокументыФизическихЛиц);
			КонецЕсли;
			Для Каждого ДокументОснование Из СтрокаИсточник.УчтенныеОснования Цикл 
				Если ЗначениеЗаполнено(ДокументОснование) И ДокументОснование <> ДокументСсылка Тогда 
					ДокументыФизическихЛиц.Вставить(ДокументОснование, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	УдалитьНеактуальныеСтрокиФормы(ТаблицаНДФЛ, СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛицНДФЛ);
	
	Если ТаблицаДокументов <> Неопределено Тогда
		ПозицииФизическихЛиц = Неопределено;
		Если ПозицииВставки <> Неопределено Тогда
			ПозицииФизическихЛиц = Новый Соответствие;
			ПозицииВставки.Вставить("УчтенныеПриРасчетеНДФЛДокументы", ПозицииФизическихЛиц);
		КонецЕсли;
		Для Каждого ДанныеФизическогоЛица Из ФизическиеЛица Цикл
			ФизическоеЛицо = ДанныеФизическогоЛица.Ключ;
			ДокументыФизическихЛиц = ДанныеФизическогоЛица.Значение;
			Для Каждого ДанныеДокумента Из ДокументыФизическихЛиц Цикл 
				СтрокаДокумента = ТаблицаДокументов.Добавить();
				СтрокаДокумента.ФизическоеЛицо = ФизическоеЛицо;
				СтрокаДокумента.ДокументОснование = ДанныеДокумента.Ключ;
				Если ПозицииВставки <> Неопределено Тогда
					РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(
						ПозицииФизическихЛиц, ФизическоеЛицо, СтрокаДокумента.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПараметрыСтрок() Экспорт
	
	ПараметрыСтрок = Новый Структура(
		"МесяцНачисления,
		|ВидыРасчетаИнфо,
		|ПозицииВставки,
		|ПараметрыДляПроверкиРезультатаРаспределения,
		|Организация,
		|ТаблицыНачислений");
		
	Возврат ПараметрыСтрок;
	
КонецФункции

Процедура УстановитьТекущуюСтрокуТаблицыФормы(Форма, ИмяТаблицы, НомерСтроки) Экспорт

	ТаблицаФормы = Форма.Объект[ИмяТаблицы];
	Если НомерСтроки > ТаблицаФормы.Количество() Тогда
		НомерСтроки = ТаблицаФормы.Количество();
	КонецЕсли;
	ИдентификаторСтроки = ТаблицаФормы[НомерСтроки - 1].ПолучитьИдентификатор();
	Форма.Элементы[ИмяТаблицы].ТекущаяСтрока = ИдентификаторСтроки;	

КонецПроцедуры

Процедура ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные) Экспорт

	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ИзмененныеДанные, "Сотрудник", Истина);
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	ВидРасчетаОбязателен = Новый Массив;
	ВидРасчетаОбязателен.Добавить("Удержания");
	
	Для Каждого ИзмененнаяСтрока Из ИзмененныеДанные Цикл
		
		Если ВидРасчетаОбязателен.Найти(ИзмененнаяСтрока.ИмяТаблицы) <> Неопределено
			И Не ЗначениеЗаполнено(ИзмененнаяСтрока.ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИзмененнаяСтрока.ФизическоеЛицо) Тогда
			Если Не ЗначениеЗаполнено(ИзмененнаяСтрока.Сотрудник) Тогда
				Продолжить;
			КонецЕсли;
			ИзмененнаяСтрока.ФизическоеЛицо = ФизическиеЛицаСотрудников[ИзмененнаяСтрока.Сотрудник];
		КонецЕсли; 
		
		МенеджерРасчета.ДобавитьИсточникИзменений(
			ИзмененнаяСтрока.ИмяТаблицы,
			ИзмененнаяСтрока.ФизическоеЛицо,
			ИзмененнаяСтрока.Сотрудник,
			ИзмененнаяСтрока.ВидРасчета);

	КонецЦикла;
	
	ИзмененныеДанные.Очистить();

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеКорректировокВыплат

Функция ДанныеКорректировокВыплаты(Форма, ФизическоеЛицо = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если ФизическоеЛицо = Неопределено Тогда
		СтрокиКорректировок = Объект.КорректировкиВыплаты.Выгрузить();
	Иначе
		Отбор = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		СтрокиКорректировок = Объект.КорректировкиВыплаты.Выгрузить(Объект.КорректировкиВыплаты.НайтиСтроки(Отбор));
	КонецЕсли;
	
	// Копирование структуры таблицы.
	РаспределениеКорректировок = Объект.РаспределениеРезультатовУдержаний.Выгрузить(Новый Массив);
	
	Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
		Если СтрокаКорректировки.РезультатРаспределения <> Неопределено Тогда
			Для Каждого СтрокаРаспределения Из СтрокаКорректировки.РезультатРаспределения Цикл
				НоваяСтрока = РаспределениеКорректировок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если РаспределениеКорректировок.Количество() = 0 Тогда
		СтрокиРаспределенияОбъекта = Новый Массив;
		Отбор = Новый Структура("ИдентификаторСтроки");
		Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
			Отбор.ИдентификаторСтроки = СтрокаКорректировки.ИдентификаторСтроки;
			НайденныеСтроки = Объект.РаспределениеРезультатовУдержаний.НайтиСтроки(Отбор);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиРаспределенияОбъекта, НайденныеСтроки);
		КонецЦикла;
		РаспределениеКорректировок = Объект.РаспределениеРезультатовУдержаний.Выгрузить(СтрокиРаспределенияОбъекта);
	КонецЕсли;
	
	ДанныеКорректировок = Новый Структура;
	ДанныеКорректировок.Вставить("КорректировкиВыплаты", СтрокиКорректировок);
	ДанныеКорректировок.Вставить("РаспределениеРезультатовУдержаний", РаспределениеКорректировок);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеКорректировок, Форма.УникальныйИдентификатор);
	
КонецФункции

Процедура ОбновитьДанныеКорректировокВыплаты(Форма, АдресВременногоХранилища) Экспорт
	
	Объект = Форма.Объект;
	
	ДанныеКорректировок = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ОчиститьКорректировкиВыплаты(Объект);
	
	Объект.КорректировкиВыплаты.Загрузить(ДанныеКорректировок.КорректировкиВыплаты);
	Форма.КорректировкаВыплаты = Объект.КорректировкиВыплаты.Итог("КорректировкаВыплаты");
	
КонецПроцедуры

Процедура ОбновитьДанныеКорректировокВыплатыВТаблице(Форма, АдресВременногоХранилища, УдалитьФиксированные = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ДанныеКорректировок = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ОчиститьКорректировкиВыплаты(Объект, ДанныеКорректировок.ФизическоеЛицо, УдалитьФиксированные);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеКорректировок.КорректировкиВыплаты, Объект.КорректировкиВыплаты);
	
	ТекущиеДанные = Объект.Начисления.НайтиПоИдентификатору(Форма.Элементы.Начисления.ТекущаяСтрока);
	ТекущиеДанные.КорректировкаВыплаты = 0;
	Для Каждого СтрокаКорректировки Из ДанныеКорректировок.КорректировкиВыплаты Цикл
		ТекущиеДанные.КорректировкаВыплаты = ТекущиеДанные.КорректировкаВыплаты + СтрокаКорректировки.КорректировкаВыплаты;
	КонецЦикла;
	
КонецПроцедуры

Процедура КорректировкаВыплатыПриИзмененииВТаблице(Объект, ДанныеСтроки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Сотрудник, "ФизическоеЛицо");
	ОчиститьКорректировкиВыплаты(Объект, ФизическоеЛицо, Истина);
	
	НоваяСтрока = Объект.КорректировкиВыплаты.Добавить();
	НоваяСтрока.КорректировкаВыплаты = ДанныеСтроки.КорректировкаВыплаты;
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	НоваяСтрока.ФиксСтрока = Истина;
	НоваяСтрока.ФиксРасчет = Истина;
	
КонецПроцедуры

Процедура УстановитьДоступностьКорректировкиВыплаты(Форма, Видимость, ПолныеПраваНаДокумент = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КорректировкаВыплатыГруппа", "Видимость", Видимость);
		
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	РедактироватьВОтдельнойФорме = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КорректировкаВыплаты", "ТолькоПросмотр", РедактироватьВОтдельнойФорме);
		
	Если ПолныеПраваНаДокумент Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "КорректировкаВыплаты", "Видимость", Видимость);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "КорректировкаВыплатыПодробно", "Видимость", РедактироватьВОтдельнойФорме);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ДокументыПриСозданииНаСервере(Форма, ОписаниеДокумента = Неопределено) Экспорт
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АдаптерМенеджераРасчета

#Область ДанныеФормыВДанныеМенеджераРасчета

Процедура ЗаполнитьДополнительныеСвойстваПособийМенеджераРасчета(СтрокаПриемник, СтрокаИсточник)
	
	Дополнительно = СтрокаПриемник.Дополнительно;
	Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", СтрокаИсточник.РезультатВТомЧислеЗаСчетФБ);
	Дополнительно.Вставить("СуммаВсегоПоУходуЗаПервымРебенком", СтрокаИсточник.СуммаВсегоПоУходуЗаПервымРебенком);
	Дополнительно.Вставить("СуммаСверхНормПоУходуЗаПервымРебенком", СтрокаИсточник.СуммаСверхНормПоУходуЗаПервымРебенком);
	Дополнительно.Вставить("СуммаВсегоПоУходуЗаВторымРебенком", СтрокаИсточник.СуммаВсегоПоУходуЗаВторымРебенком);
	Дополнительно.Вставить("СуммаСверхНормПоУходуЗаВторымРебенком", СтрокаИсточник.СуммаСверхНормПоУходуЗаВторымРебенком);
	Дополнительно.Вставить("ФинансированиеФедеральнымБюджетом", СтрокаИсточник.ФинансированиеФедеральнымБюджетом);
	Дополнительно.Вставить("СтраховойСлучай", СтрокаИсточник.СтраховойСлучай);
	Дополнительно.Вставить("КоличествоДетей", СтрокаИсточник.КоличествоДетей);
	Дополнительно.Вставить("КоличествоПервыхДетей", СтрокаИсточник.КоличествоПервыхДетей);

КонецПроцедуры

Процедура ЗаполнитьДополнительныеСвойстваНачисленийМенеджераРасчета(СтрокаПриемник, СтрокаИсточник) Экспорт
	
	Дополнительно = СтрокаПриемник.Дополнительно;
	Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", 0);
	ЗаполнитьЗначенияСвойств(Дополнительно, СтрокаИсточник);
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеМенеджераРасчетаВДанныеФормы

Процедура СтрокаНачисленияВДанныеФормы(Организация, СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ИсходныеДанные = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаИсточник.Дополнительно);
		ИсходныеДанные.Вставить("КатегорияНачисления", ЗначенияРеквизитов.КатегорияНачисленияИлиНеоплаченногоВремени);
		УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиРезультатыРасчетаПособия(СтрокаПриемник, ИсходныеДанные);
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
		ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТрудаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, Организация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
		Если СтрокаПриемник.РезультатРаспределения <> Неопределено Тогда
		
			СтрокаПриемник.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиНачисления(
				СтрокаИсточник.Результат,
				СтрокаИсточник.Начисление,
				СтрокаИсточник.РаспределениеПоСтатьям, 
				ПараметрыДляПроверкиРезультатаРаспределения);
		
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СтрокаНачисленияПоДоговорамВДанныеФормы(Организация, СтрокаПриемник, СтрокаИсточник, ПараметрыДляПроверкиРезультатаРаспределения)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	РаспределениеПоТерриториямУсловиямТрудаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, Организация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
		Если СтрокаПриемник.РезультатРаспределения <> Неопределено Тогда
			
			СтрокаПриемник.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиНачисления(
				СтрокаИсточник.Результат,
				СтрокаИсточник.Начисление,
				СтрокаИсточник.РаспределениеПоСтатьям, 
				ПараметрыДляПроверкиРезультатаРаспределения);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаУдержанияВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Удержание);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
		Если СтрокаПриемник.РезультатРаспределения <> Неопределено Тогда
			
			СтрокаПриемник.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиУдержания(
				СтрокаПриемник.Результат, 
				СтрокаИсточник.РаспределениеПоСтатьям, 
				ПараметрыДляПроверкиРезультатаРаспределения);
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаПогашениеЗаймовВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ПараметрыДляПроверкиРезультатаРаспределения)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
	Если СтрокаИсточник.РаспределениеПоСтатьям <> Неопределено Тогда
		
		СуммаОсновнойСтроки = СтрокаПриемник.НачисленоПроцентов 
			+ СтрокаПриемник.ПогашениеПроцентов 
			+ СтрокаПриемник.ПогашениеЗайма 
			+ СтрокаПриемник.МатериальнаяВыгода 
			+ СтрокаПриемник.НалогНаМатериальнуюВыгоду;
			
		СтрокаПриемник.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиПогашениеЗаймов(
			СуммаОсновнойСтроки, 
			СтрокаИсточник.РаспределениеПоСтатьям, 
			ПараметрыДляПроверкиРезультатаРаспределения);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаКорректировкиВыплатыВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ПараметрыДляПроверкиРезультатаРаспределения)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник);
	Если СтрокаИсточник.РаспределениеПоСтатьям <> Неопределено Тогда
		
		СтрокаПриемник.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиУдержания(
			СтрокаПриемник.КорректировкаВыплаты, 
			СтрокаИсточник.РаспределениеПоСтатьям, 
			ПараметрыДляПроверкиРезультатаРаспределения);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаНДФЛВДанныеФормы(СтрокаНДФЛ, ТаблицаВычетов, СтрокаИсточник, СтрокиВычетов, ПараметрыДляПроверкиРезультатаРаспределения, ПозицииФизическихЛицВычетов)
	
	ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаИсточник);
	
	ВидыВычетов = УчетНДФЛ.ВидыВычетовПоПолямТаблицы();
	Для каждого СтрокаВычета Из СтрокиВычетов Цикл
		Для Каждого КлючИЗначение Из ВидыВычетов Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			КодВычета = КлючИЗначение.Значение;
			Если ЗначениеЗаполнено(СтрокаВычета[ИмяПоля]) Тогда
				СтрокаВычетов = ТаблицаВычетов.Добавить();
				СтрокаВычетов.ИдентификаторСтрокиНДФЛ = СтрокаИсточник.ИдентификаторСтрокиНДФЛ;
				СтрокаВычетов.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
				СтрокаВычетов.КодВычета = КодВычета;
				СтрокаВычетов.РазмерВычета = СтрокаВычета[ИмяПоля];
				СтрокаВычетов.НалоговаяБаза = СтрокаВычета.НалоговаяБаза;
				Если ПозицииФизическихЛицВычетов <> Неопределено Тогда
					РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(
						ПозицииФизическихЛицВычетов, СтрокаИсточник.ФизическоеЛицо, СтрокаВычетов.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанныеФормы(СтрокаНДФЛ, СтрокаИсточник);
		Если СтрокаНДФЛ.РезультатРаспределения <> Неопределено Тогда
			СтрокаНДФЛ.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиУдержания(
				УчетНДФЛ.ИтоговаяСуммаНДФЛпоСтроке(СтрокаНДФЛ, "Налог") - УчетНДФЛ.ИтоговаяСуммаНДФЛпоСтроке(СтрокаНДФЛ, "ЗачтеноАвансовыхПлатежей"),
				СтрокаИсточник.РаспределениеПоСтатьям, 
				ПараметрыДляПроверкиРезультатаРаспределения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура РаспределениеПоТерриториямУсловиямТрудаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, Организация = Неопределено)
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;	
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаРаспределения Из СтрокаИсточник.ТерриторииУсловияТруда Цикл
		
		ОписаниеСтроки = ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРаспределения);
		Сч = 1;
		Для Каждого СтрокаПоказателя Из СтрокаРаспределения.Показатели Цикл
			ОписаниеСтроки["Показатель" + Сч] = СтрокаПоказателя.Показатель;
			ОписаниеСтроки["Значение" + Сч] = СтрокаПоказателя.Значение;
			Сч = Сч + 1;
		КонецЦикла;
		МассивСтрок.Добавить(ОписаниеСтроки);
		
	КонецЦикла; 
	СтрокаПриемник.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(МассивСтрок);
	
КонецПроцедуры	

Процедура РезультатРаспределенияВДанныеФормы(СтрокаПриемник, СтрокаИсточник)

	Если СтрокаИсточник.РаспределениеПоСтатьям <> Неопределено Тогда
		
		СтруктураРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(СтрокаИсточник.РаспределениеПоСтатьям); 
		СтрокаПриемник.РезультатРаспределения = СтруктураРаспределения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеСвойстваПособийВДанныеФормы(СтрокаПриемник, СтрокаИсточник) Экспорт
	
	Дополнительно = СтрокаИсточник.Дополнительно;
	Дополнительно.Свойство("РезультатВТомЧислеЗаСчетФБ", СтрокаПриемник.РезультатВТомЧислеЗаСчетФБ);
	Дополнительно.Свойство("СуммаВсегоПоУходуЗаПервымРебенком", СтрокаПриемник.СуммаВсегоПоУходуЗаПервымРебенком);
	Дополнительно.Свойство("СуммаСверхНормПоУходуЗаПервымРебенком", СтрокаПриемник.СуммаСверхНормПоУходуЗаПервымРебенком);
	Дополнительно.Свойство("СуммаВсегоПоУходуЗаВторымРебенком", СтрокаПриемник.СуммаВсегоПоУходуЗаВторымРебенком);
	Дополнительно.Свойство("СуммаСверхНормПоУходуЗаВторымРебенком", СтрокаПриемник.СуммаСверхНормПоУходуЗаВторымРебенком);
	Дополнительно.Свойство("ФинансированиеФедеральнымБюджетом", СтрокаПриемник.ФинансированиеФедеральнымБюджетом);
	Дополнительно.Свойство("СтраховойСлучай", СтрокаПриемник.СтраховойСлучай);
	Дополнительно.Свойство("КоличествоДетей", СтрокаПриемник.КоличествоДетей);
	Дополнительно.Свойство("КоличествоПервыхДетей", СтрокаПриемник.КоличествоПервыхДетей);

КонецПроцедуры

Функция ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников, ПозицииСотрудников, Сотрудник) Экспорт
	
	Если СоответствиеОбходовСотрудников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СоответствиеОбходовСотрудников[Сотрудник] = Неопределено Тогда
		Если ПозицииСотрудников[Сотрудник] = Неопределено Тогда
			Идентификаторы = Новый Массив;
			ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйКлиентСервер.НовыйОбходИдентификаторовТаблицы(Идентификаторы);
			ПозицииСотрудников.Вставить(Сотрудник, Идентификаторы);
		Иначе
			ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйКлиентСервер.НовыйОбходИдентификаторовТаблицы(ПозицииСотрудников[Сотрудник]);
		КонецЕсли;
		СоответствиеОбходовСотрудников.Вставить(Сотрудник, ОбходТаблицыИдентификаторов);
	Иначе
		ОбходТаблицыИдентификаторов = СоответствиеОбходовСотрудников[Сотрудник];
	КонецЕсли;
	
	Возврат ОбходТаблицыИдентификаторов;
		
КонецФункции

Процедура УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовСотрудников, ПозицииСотрудников) Экспорт
	
	Если СоответствиеОбходовСотрудников = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПозицииСотрудников Цикл
		ОбходТаблицыИдентификаторов = СоответствиеОбходовСотрудников[КлючИЗначение.Ключ];
		Если ОбходТаблицыИдентификаторов = Неопределено Тогда
			ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйКлиентСервер.НовыйОбходИдентификаторовТаблицы(КлючИЗначение.Значение);
		КонецЕсли;
		РасчетЗарплатыРасширенныйКлиентСервер.УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, ОбходТаблицыИдентификаторов);	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура УдалитьСтрокиРасчета(Таблица, СтрокиРасчета, ПолноеУдаление = Ложь)
	
	Если ПолноеУдаление Тогда
		Таблица.Очистить();
	Иначе
		Для Каждого СтрокаУдаления Из СтрокиРасчета Цикл
			Таблица.Удалить(СтрокаУдаления);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормамиДокументовВыполняющихНачисления

Процедура ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(Форма) Экспорт
	
	Форма.РассчитыватьДокументыПриРедактировании = Константы.РассчитыватьДокументыПриРедактировании.Получить();
	Если Форма.РассчитыватьДокументыПриРедактировании Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПересчитатьДокумент",
			"Видимость",
			Ложь);
			
	КонецЕсли; 
	
КонецПроцедуры

// Процедура предназначена для заполнения значений показателей, 
// а также сведений сотрудника (подразделение, график работы и др.) 
// в строке документа, выполняющего начисления.
// Используется при изменении одного или нескольких полей, влияющих на такие сведения.
//
// Параметры:
//	Форма						- управляемая форма документа.
//	ИдентификаторСтроки			- идентификатор коллекции данных формы, связанных с таблицей начислений.
//	ОписаниеТаблицы	- структура, содержащая сведения об изменяемой таблицы начислений
//	ЗаполнятьСведенияСотрудников- булево, определяет необходимость обновления кадровых данных
//	ЗаполнятьЗначенияПоказателей- булево, определяет необходимость обновления значений показателей.
//
Процедура ДополнитьСтрокуРасчета(Форма, ОписаниеДокумента, ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	
	ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСтроки);
	
	ДополнитьСтрокиРасчета(Форма, ОписаниеДокумента, ОписаниеТаблицы, ИдентификаторыСтрок, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
	
КонецПроцедуры

// Выполняет дозаполнение строк коллекции данными, 
// необходимыми для расчета: сведениями о сотрудниках, 
// показателями расчета и их значениями.
//
Процедура ДополнитьСтрокиРасчета(Форма, ОписаниеДокумента, ОписаниеТаблицы, ИдентификаторыСтрок = Неопределено, ЗаполнятьСведенияСотрудников = Истина, ЗаполнятьЗначенияПоказателей = Истина, ПозицииВставки = Неопределено) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Если ИдентификаторыСтрок = Неопределено Тогда
		СтрокиРасчета = ДанныеНачислений;
	Иначе
		Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
			ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыСтрок);
		КонецЕсли;
		СтрокиРасчета = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			СтрокаРасчета = ДанныеНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаРасчета <> Неопределено Тогда
				СтрокиРасчета.Добавить(СтрокаРасчета);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ВидыРасчета = Новый Массив;
	Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		ВидыРасчета.Добавить(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
	Иначе
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРасчета, ОписаниеТаблицы.ИмяРеквизитаВидРасчета); 
	КонецЕсли;
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	МесяцНачисления = Форма.Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	Если Форма.Объект.Свойство("Организация") Тогда
		Организация = Форма.Объект.Организация;
	КонецЕсли;
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	Если ОписаниеДокумента.УдержанияИмя = ИмяТаблицы
		Или ОписаниеДокумента.УдержанияПерерасчетИмя = ИмяТаблицы Тогда
		ТаблицаРасчета = МенеджерРасчета.ТаблицаУдержаний();
	Иначе
		ТаблицаРасчета = МенеджерРасчета.ТаблицаНачислений();
	КонецЕсли;
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		НоваяСтрока = ТаблицаРасчета.Добавить();
		СоответствиеСтрок.Вставить(НоваяСтрока, СтрокаРасчета);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		НоваяСтрока.Организация = Организация;
		// Если сотрудник указан в шапке.
		Если Не ОписаниеТаблицы.СодержитПолеСотрудник Тогда
			НоваяСтрока.Сотрудник = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаСотрудник];
		КонецЕсли;
		// Вид расчета может быть указан в шапке.
		Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
			НоваяСтрока.Начисление = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
		КонецЕсли;
		// Период может не использоваться, тогда полей нет в таблице, их нужно получать 
		// - по периоду, если он указан в шапке
		// - по периоду регистрации.
		Если ОписаниеТаблицы.ИмяРеквизитаДатаНачала = Неопределено Тогда
			Если ОписаниеТаблицы.ИмяРеквизитаПериод <> Неопределено Тогда
				НоваяСтрока.ДатаНачала = НачалоМесяца(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]);
			КонецЕсли; 
			Если ОписаниеДокумента.ПериодДействияВШапке И ОписаниеДокумента.ДатаНачалаИмя <> Неопределено Тогда
				НоваяСтрока.ДатаНачала = Форма.Объект[ОписаниеДокумента.ДатаНачалаИмя];
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеТаблицы.ИмяРеквизитаДатаОкончания = Неопределено Тогда
			Если ОписаниеТаблицы.ИмяРеквизитаПериод <> Неопределено Тогда
				НоваяСтрока.ДатаОкончания = КонецМесяца(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]);
			КонецЕсли; 
			Если ОписаниеДокумента.ПериодДействияВШапке И ОписаниеДокумента.ДатаОкончанияИмя <> Неопределено Тогда
				НоваяСтрока.ДатаОкончания = Форма.Объект[ОписаниеДокумента.ДатаОкончанияИмя];
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.УдержанияИмя = ИмяТаблицы
			Или ОписаниеДокумента.УдержанияПерерасчетИмя = ИмяТаблицы
			Или Не ЗначениеЗаполнено(НоваяСтрока.Начисление) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(НоваяСтрока.Начисление);
		ПериодыСтрокиРасчета = Новый Структура("ПериодДействия, ДатаНачала, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(ПериодыСтрокиРасчета, НоваяСтрока);
		ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(НоваяСтрока, ПериодыСтрокиРасчета, ЗначенияРеквизитов);
		
		Если ЗаполнятьЗначенияПоказателей Тогда		
			НоваяСтрока.Показатели = МенеджерРасчета.ТаблицаПоказателей();
			ПоказателиВМенеджерРасчета(НоваяСтрока, СтрокаРасчета);
		КонецЕсли;				
				
	КонецЦикла;
	
	// Скорректируем период датами приема на работу / увольнения сотрудников.
	Если ОписаниеДокумента.ПериодДействияВШапке Тогда
		МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчета, "Сотрудник", Истина);
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, "ДатаПриема,ДатаЗавершенияРаботы");
		КадровыеДанныеСотрудников.Индексы.Добавить("Сотрудник");
		Для Каждого СтрокаТаблицы Из ТаблицаРасчета Цикл
			КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
			Если КадровыеДанныеСотрудника <> Неопределено Тогда
				Если СтрокаТаблицы.ДатаНачала < КадровыеДанныеСотрудника.ДатаПриема
					И НачалоМесяца(СтрокаТаблицы.ДатаНачала) = НачалоМесяца(КадровыеДанныеСотрудника.ДатаПриема) Тогда
					
					СтрокаТаблицы.ДатаНачала = КадровыеДанныеСотрудника.ДатаПриема;
				КонецЕсли;
				Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаЗавершенияРаботы)
					И СтрокаТаблицы.ДатаОкончания > КадровыеДанныеСотрудника.ДатаЗавершенияРаботы
					И НачалоМесяца(СтрокаТаблицы.ДатаОкончания) = НачалоМесяца(КадровыеДанныеСотрудника.ДатаЗавершенияРаботы) Тогда
					
					СтрокаТаблицы.ДатаОкончания = Макс(КонецДня(СтрокаТаблицы.ДатаНачала), КадровыеДанныеСотрудника.ДатаЗавершенияРаботы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазбиватьСтрокиНачислений = ОписаниеДокумента.ВидНачисленияВШапке 
								И ОписаниеДокумента.РазбиватьСтрокиНачислений
								И ВидыРасчетаИнфо[Форма.Объект[ОписаниеДокумента.ВидНачисленияИмя]] <> Неопределено 
								И ВидыРасчетаИнфо[Форма.Объект[ОписаниеДокумента.ВидНачисленияИмя]].ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия;
		
	Если ОписаниеДокумента.УдержанияИмя = ИмяТаблицы
		Или ОписаниеДокумента.УдержанияПерерасчетИмя = ИмяТаблицы Тогда
		
		Если ЗаполнятьСведенияСотрудников Тогда
			МенеджерРасчета.ЗаполнитьСведенияУдержанийДляРасчета(ТаблицаРасчета);
		КонецЕсли;
		
		Если ЗаполнятьЗначенияПоказателей Тогда
			МенеджерРасчета.ЗаполнитьЗначенияПоказателейУдержаний(ТаблицаРасчета);
		КонецЕсли;
		
		ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчета, "Удержание");
		ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		// Переносим значения в исходную коллекцию.
		Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
			СтрокаУдержанияВДанныеФормы(КлючИЗначение.Значение, КлючИЗначение.Ключ, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
		КонецЦикла;
	Иначе
		Если ЗаполнятьСведенияСотрудников Тогда
			МенеджерРасчета.УстановитьТаблицуНачисления(ТаблицаРасчета);
			Если РазбиватьСтрокиНачислений Тогда
				МенеджерРасчета.РазбитьСтрокиНачислений();
			КонецЕсли;			
			МенеджерРасчета.ЗаполнитьСведенияНачисленийДляРасчетаСлужебный();	
		КонецЕсли;
		
		Если ЗаполнятьЗначенияПоказателей Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				МодульУправленческаяЗарплатаФормы = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
				МодульУправленческаяЗарплатаФормы.ПередЗаполнениемЗначенийПоказателейНачислений(ОписаниеТаблицы, ТаблицаРасчета);
			КонецЕсли;
			МенеджерРасчета.ЗаполнитьЗначенияПоказателейНачислений(ТаблицаРасчета);
		КонецЕсли;
		
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчета, "Начисление");
		ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		// Переносим значения в исходную коллекцию. 
		Если ПозицииВставки <> Неопределено Тогда	
			ПеренестиНачисленияВФорму(ДанныеНачислений, ТаблицаРасчета, ВидыРасчетаИнфо, Организация, ПозицииВставки);		
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") 
			И ИмяТаблицы = "УправленческиеНачисления" Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
				Модуль.СтрокаУправленческиеНачисленияВДанныеФормы(КлючИЗначение.Значение, КлючИЗначение.Ключ, ВидыРасчетаИнфо);
			КонецЦикла;
		Иначе	
			Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
				СтрокаНачисленияБезОплатыВДанныеФормы(КлючИЗначение.Значение, КлючИЗначение.Ключ, ВидыРасчетаИнфо);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условное оформление формы элементами, связанными с механизмом фиксации изменений.
//
Процедура ДокументыВыполненияНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета) Экспорт 
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	РеквизитКонтроляПолей = "КонтролируемыеПоля" + ИмяТаблицы;
	
	КонтролируемыеПоля = Форма[РеквизитКонтроляПолей];
	
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		Если ОписаниеТаблицыВидовРасчета.ЭтоПерерасчеты Тогда
			ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ГруппаИли = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСторно");
			ЭлементОтбора.ПравоеЗначение = Ложь;
			
			ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСтрока");
			ЭлементОтбора.ПравоеЗначение = Истина;
		Иначе
			ГруппаОтбора = ЭлементУсловногоОформления.Отбор;
		КонецЕсли;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + "." + ЭлементСтруктуры.Ключ);
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		Для Каждого ИмяПоля Из ЭлементСтруктуры.Значение Цикл
			ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформление.Использование = Истина;
			// Ограничение: предполагается, что имена элементов формы строятся 
			// по принципу ИмяТаблицы + ИмяПоля.
			ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяПоля);
		КонецЦикла;
		
		ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
		ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
		
		Если ЭлементСтруктуры.Ключ = "ФиксРасчет" 
			И ЭлементСтруктуры.Значение.Найти("Результат") <> Неопределено Тогда
			
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксРасчет");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Результат");
			ЭлементОтбора.ПравоеЗначение = 0;
			
			ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформление.Использование = Истина;
			ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Результат");
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеТаблицыВидовРасчета.ЭтоПерерасчеты Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	    ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформление.Использование = Истина;
		ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
			ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаРазрешеноРедактироватьСторно(ОписаниеТаблицыВидовРасчета.ИмяТаблицы));
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
		ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформление.Использование = Истина;
		ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
		
	КонецЕсли;
	
	// Место получения дохода доступно только если период действия начисления <> периоду регистрации
	Если ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеМестоПолученияДохода") И ОписаниеТаблицыВидовРасчета.СодержитПолеМестоПолученияДохода Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДоступноМестоПолученияДохода");
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформление.Использование = Истина;
		ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы+ ".МестоПолученияДохода");
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели = Неопределено, КонтролируемыеПоля = Неопределено, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт 
	
	ИмяТаблицы 	= ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	
	Если ДобавлятьРеквизитыФормы Тогда
		// Создаем реквизит для контролируемых полей.
		ДобавляемыеРеквизиты = Новый Массив;
		КонтролируемыеПоляРеквизит = Новый РеквизитФормы("КонтролируемыеПоля" + ИмяТаблицы, 
									Новый ОписаниеТипов());
		ДобавляемыеРеквизиты.Добавить(КонтролируемыеПоляРеквизит);
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		ОтменятьВсеИсправления 	= Ложь;
		Если ОписаниеТаблицыВидовРасчета.Свойство("ОтменятьВсеИсправления") Тогда  
			ОтменятьВсеИсправления = ОписаниеТаблицыВидовРасчета["ОтменятьВсеИсправления"];
		КонецЕсли;
		
		// Если команда уже есть, то форма уже снабжена реквизитами и командами контроля исправлений.
		Если Форма.Команды.Найти(ИмяТаблицы + "ОтменитьИсправление") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Форма.ТолькоПросмотр Тогда
			КомандаОтменитьИсправление = Форма.Команды.Добавить(ИмяТаблицы + "ОтменитьИсправление");
			КомандаОтменитьИсправление.Действие = "Подключаемый_" + ИмяТаблицы + "ОтменитьИсправление";
			Если ОтменятьВсеИсправления Тогда
				НаименованиеКомандаОтменитьИсправление = НСтр("ru = 'Отменить исправления сотрудника';
																|en = 'Cancel employee corrections'");
			Иначе
				НаименованиеКомандаОтменитьИсправление = НСтр("ru = 'Отменить исправления';
																|en = 'Cancel changes'");
			КонецЕсли;
			КомандаОтменитьИсправление.Заголовок = НаименованиеКомандаОтменитьИсправление;
			КомандаОтменитьИсправление.ИзменяетСохраняемыеДанные = Истина;
			
			Если ОтменятьВсеИсправления Тогда
				КомандаОтменитьВсе = Форма.Команды.Добавить(ИмяТаблицы + "ОтменитьВсеИсправления");
				КомандаОтменитьВсе.Действие = "Подключаемый_" + ИмяТаблицы + "ОтменитьВсеИсправления";
				КомандаОтменитьВсе.Заголовок = НСтр("ru = 'Отменить все исправления в документе';
													|en = 'Cancel all corrections in the document'");
				КомандаОтменитьВсе.ИзменяетСохраняемыеДанные = Истина;
			КонецЕсли;
			
			Если ИмяКоманднойПанели = Неопределено Тогда
				ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
			КонецЕсли;
			
			КоманднаяПанель = Форма.Элементы.Найти(ИмяКоманднойПанели);
			Если КоманднаяПанель <> Неопределено Тогда
				Если КоманднаяПанель.ПодчиненныеЭлементы.Количество() = 0 Тогда
					МестоВставки = Неопределено;
				Иначе
					МестоВставки = КоманднаяПанель.ПодчиненныеЭлементы[0];
				КонецЕсли;
				
				Если ОтменятьВсеИсправления Тогда
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправлениеГруппа";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						Подменю = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанель, МестоВставки);
						Подменю.Вид = ВидГруппыФормы.Подменю;
						Подменю.Заголовок = НСтр("ru = 'Отмена исправлений';
												|en = 'Cancel corrections'");
					КонецЕсли;
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправление";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьИсправление = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
						КнопкаОтменитьИсправление.ИмяКоманды = ИмяТаблицы + "ОтменитьИсправление";
					КонецЕсли;
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьВсеИсправления";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьВсеИсправления = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
						КнопкаОтменитьВсеИсправления.ИмяКоманды = ИмяТаблицы + "ОтменитьВсеИсправления";
					КонецЕсли;
					
				Иначе
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправление";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьИсправление = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), КоманднаяПанель, МестоВставки);
						КнопкаОтменитьИсправление.ИмяКоманды = ИмяТаблицы + "ОтменитьИсправление";
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ИмяКонтекстногоМеню = ИмяТаблицы + "КонтекстноеМеню";
			КонтекстноеМеню = Форма.Элементы.Найти(ИмяКонтекстногоМеню);
			Если КонтекстноеМеню <> Неопределено Тогда
				Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() = 0 Тогда
					МестоВставки = Неопределено;
				Иначе
					МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
				КонецЕсли;
				ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправлениеКМ";
				КнопкаОтменитьИсправлениеКМ = Форма.Элементы.Найти(ИмяЭлемента);
				Если КнопкаОтменитьИсправлениеКМ = Неопределено Тогда
					КнопкаОтменитьИсправлениеКМ = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), КонтекстноеМеню, МестоВставки);
					КнопкаОтменитьИсправлениеКМ.ИмяКоманды = ИмяТаблицы + "ОтменитьИсправление";
				КонецЕсли;
				Форма.Элементы.Переместить(КнопкаОтменитьИсправлениеКМ, КонтекстноеМеню, МестоВставки);
				Если ОтменятьВсеИсправления Тогда
					ИмяЭлемента = ИмяТаблицы + "ОтменитьВсеИсправленияКМ";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьВсеИсправленияКМ = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), КонтекстноеМеню, МестоВставки);
						КнопкаОтменитьВсеИсправленияКМ.ИмяКоманды = ИмяТаблицы + "ОтменитьВсеИсправления";
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяПВР) Тогда
			МаксимальноеКоличествоПоказателей = 0;
		Иначе
			МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей(ИмяПВР);
		КонецЕсли;
		
		// Обработаем контролируемые поля таблицы.
		Если КонтролируемыеПоля = Неопределено Тогда 
			КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
		КонецЕсли;
		
		Если КонтролируемыеПоля.Свойство(ИмяТаблицы) Тогда
			КонтролируемыеПоляТаблицы = КонтролируемыеПоля[ИмяТаблицы];
			// Если среди контролируемых полей есть ФиксЗаполнение - дополним его состав значениями показателей.
			Если КонтролируемыеПоляТаблицы.Свойство("ФиксЗаполнение") Тогда
				Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
					КонтролируемыеПоляТаблицы.ФиксЗаполнение.Добавить("Значение" + НомерПоказателя);
				КонецЦикла;
			КонецЕсли;
			КонтролируемыеПоляСФиксированнымиМассивами = Новый Структура;
			Для Каждого ЭлементСтруктуры Из КонтролируемыеПоляТаблицы Цикл
				КонтролируемыеПоляСФиксированнымиМассивами.Вставить(ЭлементСтруктуры.Ключ, 
					Новый ФиксированныйМассив(ЭлементСтруктуры.Значение));
			КонецЦикла;
			Форма["КонтролируемыеПоля" + ИмяТаблицы] = Новый ФиксированнаяСтруктура(КонтролируемыеПоляСФиксированнымиМассивами);
		Иначе
			Форма["КонтролируемыеПоля" + ИмяТаблицы] = Новый ФиксированнаяСтруктура;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуПересчитатьСотрудникаВТаблицуДокумента(Форма, ИмяТаблицы, ИмяКоманднойПанели, ТолькоВоВсехДействиях)
	
	Если Форма.Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		// Такой таблицы нет в форме
		Возврат;
	КонецЕсли;
	
	Если Форма.Команды.Найти(ИмяТаблицы + "ПересчитатьСотрудника") <> Неопределено Тогда
		// Команда уже существует
		Возврат;
	КонецЕсли;
	
	// Добавляем команду формы
	КомандаПересчитатьСотрудника = Форма.Команды.Добавить(ИмяТаблицы + "ПересчитатьСотрудника");
	КомандаПересчитатьСотрудника.Действие = "Подключаемый_" + ИмяТаблицы + "ПересчитатьСотрудника";
	КомандаПересчитатьСотрудника.Заголовок = НСтр("ru = 'Пересчитать сотрудника';
													|en = 'Recalculate employee'");
	КомандаПересчитатьСотрудника.Подсказка = НСтр("ru = 'Строки выбранных сотрудников перезаполняются и перерассчитываются по всем таблицам, 
                                                   |исправления не отменяются';
                                                   |en = 'Rows of the selected employees are refilled and recalculated in all tables,
                                                   |corrections are not canceled'");
	КомандаПересчитатьСотрудника.Картинка = БиблиотекаКартинок.Обновить;
	КомандаПересчитатьСотрудника.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаПересчитатьСотрудника.ИзменяетСохраняемыеДанные = Истина;
	
	// Добавляем элементы (группу кнопок и кнопку) в командную панель.
	Если ИмяКоманднойПанели = Неопределено Тогда
		ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
	КонецЕсли;
	
	КоманднаяПанель = Форма.Элементы.Найти(ИмяКоманднойПанели);
	Если КоманднаяПанель <> Неопределено Тогда
		Если КоманднаяПанель.ПодчиненныеЭлементы.Количество() = 0 Тогда
			МестоВставки = Неопределено;
		Иначе
			МестоВставки = КоманднаяПанель.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудникаГруппа";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			ГруппаКнопок = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанель, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа';
											|en = 'Update document lines'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудника";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаПересчитатьСотрудника = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаПересчитатьСотрудника.ИмяКоманды = ИмяТаблицы + "ПересчитатьСотрудника";
			КнопкаПересчитатьСотрудника.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
		КонецЕсли;
		
		// Добавляем элементы в контекстное меню.
		КонтекстноеМеню = Форма.Элементы[ИмяТаблицы].КонтекстноеМеню;
		
		МестоВставки = Неопределено;
		Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() > 0 Тогда
			МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудникаГруппа";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			ГруппаКнопок = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КонтекстноеМеню, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа';
											|en = 'Update document lines'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудника";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаПересчитатьСотрудника = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаПересчитатьСотрудника.ИмяКоманды = ИмяТаблицы + "ПересчитатьСотрудника";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДобавитьКомандуПересчитатьСотрудника(Форма, ОписаниеДокумента, ТолькоВоВсехДействиях)
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("НачисленияПоДоговорам");
	ТаблицыДокумента.Добавить("НачисленияПерерасчет");
	ТаблицыДокумента.Добавить("Пособия");
	ТаблицыДокумента.Добавить("ПособияПерерасчет");
	ТаблицыДокумента.Добавить("Удержания");
	ТаблицыДокумента.Добавить("УдержанияПерерасчет");
	ТаблицыДокумента.Добавить("НДФЛ");
	ТаблицыДокумента.Добавить("Льготы");
	ТаблицыДокумента.Добавить("ЛьготыПерерасчет");
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИмяТаблицы = ОписаниеДокумента[ТаблицаДокумента + "Имя"];
		Если ИмяТаблицы <> Неопределено Тогда
			
			ИмяКоманднойПанели = Неопределено;
			
			ОписаниеДокумента.Свойство(ТаблицаДокумента + "КоманднаяПанельИмя", ИмяКоманднойПанели);
			ДобавитьКомандуПересчитатьСотрудникаВТаблицуДокумента(Форма, ИмяТаблицы, ИмяКоманднойПанели, ТолькоВоВсехДействиях);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СотрудникиФизическиеЛицаОтбор() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ФизическиеЛица", Новый Массив);
	Отбор.Вставить("ФизическиеЛицаСотрудников", Новый Соответствие);
	Отбор.Вставить("ФизическиеЛицаОтбор", Новый Соответствие);
	Отбор.Вставить("СотрудникиКРасчету", Новый Массив);
	
	Возврат Отбор;
	
КонецФункции

Функция ТаблицыНачисленийФормы() Экспорт

	ТаблицыНачислений = Новый Структура(
		"Начисления,
		|НачисленияПерерасчет,
		|НачисленияПерерасчетНулевыеСторно,
		|Пособия,
		|ПособияПерерасчет,
		|Льготы,
		|ЛьготыПерерасчет,
		|УправленческиеНачисления,
		|ЗависимыеНачисления,
		|НачисленияДолейРКСН");
		
	Возврат ТаблицыНачислений;
	
КонецФункции

Функция ТаблицыУдержанийФормы() Экспорт

	ТаблицыУдержаний = Новый Структура(
		"Удержания,
		|УдержанияПерерасчет");
		
	Возврат ТаблицыУдержаний;
	
КонецФункции

Процедура ПодготовитьМассивСтрокНачисленийПередЗаполнением(СтрокиПоСотруднику) Экспорт
							
	Индекс = СтрокиПоСотруднику.ВГраница();
	Пока Индекс > 0 Цикл
		РасчетЗарплатыРасширенныйФормы.ОчиститьПоказателиСтрокиФормы(СтрокиПоСотруднику[Индекс]);
		СтрокиПоСотруднику.Удалить(Индекс);
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура СброситьФиксПризнакиСтроки(КонтролируемыеПоля, СтрокаРасчета) Экспорт

	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		СтрокаРасчета[ЭлементСтруктуры.Ключ] = Ложь;
	КонецЦикла;
	Если СтрокаРасчета.Свойство("ФиксСтрока") Тогда
		СтрокаРасчета.ФиксСтрока = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПозицииВставки(СтрокиРасчета, ПозицииВставки) Экспорт
	
	Если ПозицииВставки = Неопределено Тогда
		ПозицииВставки = Новый Структура;
		ПозицииВставки.Вставить("Начисления", Новый Соответствие);
	КонецЕсли;
	
	Если СтрокиРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		
		ИдентификаторыСтрокСотрудников = ПозицииВставки.Начисления;
		
		Если ИдентификаторыСтрокСотрудников.Получить(СтрокаРасчета.Сотрудник) = Неопределено Тогда			
			МассивИдентификаторов = Новый Массив;
			ИдентификаторыСтрокСотрудников.Вставить(СтрокаРасчета.Сотрудник, МассивИдентификаторов);
		КонецЕсли;			
		
		МассивИдентификаторов.Добавить(СтрокаРасчета.ПолучитьИдентификатор());				
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ПеренестиНачисленияВФорму(ТаблицаПриемник, ТаблицаИсточник, ВидыРасчетаИнфо, Организация, ПозицииВставки)
	
	ПозицииСотрудников = Новый Соответствие;
	СоответствиеОбходовСотрудников = Новый Соответствие;
	
	Если ПозицииВставки <> Неопределено Тогда			
		ПозицииСотрудниковТаблицы = Неопределено;
		Если Не ПозицииВставки.Свойство("Начисления", ПозицииСотрудниковТаблицы) Тогда
			ЗаполнитьПозицииВставки(ТаблицаПриемник, ПозицииВставки);
			ПозицииСотрудниковТаблицы = ПозицииВставки.Начисления;
		КонецЕсли;
		ПозицииСотрудников.Вставить("Начисления", ПозицииСотрудниковТаблицы);
		СоответствиеОбходовСотрудников.Вставить("Начисления", Новый Соответствие);
	КонецЕсли;
	
	Для Каждого СтрокаНачисления Из ТаблицаИсточник Цикл
		
		ОбходТаблицыИдентификаторов = ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников["Начисления"], ПозицииСотрудников["Начисления"], СтрокаНачисления.Сотрудник);		
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		СтрокаНачисленияБезОплатыВДанныеФормы(СтрокаФормы, СтрокаНачисления, ВидыРасчетаИнфо);
		
	КонецЦикла;
	
	УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовСотрудников["Начисления"], ПозицииСотрудников["Начисления"]);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормамиСписочныхДокументовВыполняющихУдержания

Процедура УдержанияСпискомУстановитьСтраницуДействия(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.Действие <> Перечисления.ДействияСУдержаниями.Начать Тогда
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.ДействуетСтраницаГруппа;
	Иначе
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.НеДействуетСтраница;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияСпискомУстановитьДоступностьПоляРазмер(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РежимПросмотра = Объект.Действие = Перечисления.ДействияСУдержаниями.Прекратить;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдержанияПоказатели", "ТолькоПросмотр", РежимПросмотра);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдержанияРазмер", "ТолькоПросмотр", РежимПросмотра);
	
КонецПроцедуры

Процедура УдержанияСпискомУстановитьРазмерПриПрекращенииУдержания(Форма, ОписаниеТаблицы) Экспорт 
	
	Объект = Форма.Объект;
	Если Объект.Действие <> Перечисления.ДействияСУдержаниями.Прекратить Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
	
	Для Каждого ДанныеФизическогоЛица Из Объект.Удержания Цикл 
		ДанныеФизическогоЛица.Размер = 0;
		Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
			ДанныеФизическогоЛица["Значение" + НомерПоказателя] = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдержанияСпискомОбработкаПодбораНаСервере(Форма, ВыбранныеФизическиеЛица) Экспорт
	
	Объект = Форма.Объект;
	
	Для Каждого ФизическоеЛицо Из ВыбранныеФизическиеЛица Цикл
		
		Отбор = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		Если Объект.Удержания.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Удержания.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			
			НомерПоказателя = 1;
			Для Каждого ОписаниеПоказателя Из Форма.Показатели Цикл
				НоваяСтрока["Показатель" + НомерПоказателя] = ОписаниеПоказателя.Показатель;
				НомерПоказателя = НомерПоказателя + 1;
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УдержанияСпискомРеквизитыВДанные(Форма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета) Экспорт 
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1);	
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Удержание) Тогда
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ТекущийОбъект.Удержание);
		Если ВидРасчетаИнфо.Рассчитывается Тогда 
			Для Каждого ДанныеФизическогоЛица Из ТекущийОбъект.Удержания Цикл 
				ДанныеФизическогоЛица.Размер = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдержанияСпискомУстановитьПараметрыВыбораФизическихЛиц(Форма) Экспорт
	
	ПараметрыДляВыбора = Новый Массив;
	Если Форма.МассивФизическихЛиц.Количество() > 0 Тогда 
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", Форма.МассивФизическихЛиц);
		ПараметрыДляВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Форма.Элементы.УдержанияФизическоеЛицо.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляВыбора);
	
КонецПроцедуры

#КонецОбласти

Процедура ОчиститьКорректировкиВыплаты(Объект, ФизическоеЛицо = Неопределено, УдалитьФиксированные = Ложь)
	
	Отбор = Новый Структура();
	
	Если ФизическоеЛицо <> Неопределено Тогда
		Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	КонецЕсли;
	
	Если УдалитьФиксированные = Ложь Тогда
		Отбор.Вставить("ФиксСтрока", Ложь);
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		СтрокиКорректировок = Объект.КорректировкиВыплаты.НайтиСтроки(Отбор);	
	Иначе
		СтрокиКорректировок = Объект.КорректировкиВыплаты;
	КонецЕсли;
	
	Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
		Объект.КорректировкиВыплаты.Удалить(СтрокаКорректировки);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваКолонокИтоговыхНачислений(Форма) Экспорт
	
	Для Н = 1 По 6 Цикл
		Форма.Элементы["НачисленияРезультатЗависимыхНачислений" + Формат(Н, "ЧГ=")].Видимость = Ложь;
	КонецЦикла;
	
	ВидыРасчета = Новый Массив;
	КолонкиЗависимыхНачислений = Новый Соответствие;
	Если Форма.КолонкиИтоговЗависимыхНачислений <> Неопределено Тогда
		КолонкиЗависимыхНачислений = Новый Соответствие(Форма.КолонкиИтоговЗависимыхНачислений);
	КонецЕсли;
	Если Форма.ЕстьЗависимыеНачисления Тогда
		
		ВидыРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
				Форма.Объект.ЗависимыеНачисления.Выгрузить( , "Начисление").ВыгрузитьКолонку("Начисление"));
		
		Для Каждого ВидРасчета Из ВидыРасчета Цикл
			Если КолонкиЗависимыхНачислений[ВидРасчета] = Неопределено Тогда
				КолонкиЗависимыхНачислений.Вставить(ВидРасчета, 0); 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОписанияДобавляемыхРеквизитов = Новый ТаблицаЗначений;
	ОписанияДобавляемыхРеквизитов.Колонки.Добавить("ИндексРеквизита", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ОписанияДобавляемыхРеквизитов.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого ОписаниеКолонки Из КолонкиЗависимыхНачислений Цикл
		
		ВидРасчета = ОписаниеКолонки.Ключ;
		ВидимостьКолонки = ВидыРасчета.Найти(ВидРасчета) <> Неопределено;
		ИндексРеквизита = ОписаниеКолонки.Значение;
		
		Если ИндексРеквизита = 0 Тогда
			Форма.КоличествоКолонокИтоговЗависимыхНачислений = Форма.КоличествоКолонокИтоговЗависимыхНачислений + 1;
			ОписаниеРеквизита = ОписанияДобавляемыхРеквизитов.Добавить();
			ОписаниеРеквизита.ИндексРеквизита = Форма.КоличествоКолонокИтоговЗависимыхНачислений;
			ОписаниеРеквизита.ВидРасчета = ВидРасчета;
		Иначе
			Форма.Элементы["НачисленияРезультатЗависимыхНачислений" + Формат(ИндексРеквизита, "ЧГ=")].Видимость = ВидимостьКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписанияДобавляемыхРеквизитов.Количество() Тогда
		НаименованияНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОписанияДобавляемыхРеквизитов.ВыгрузитьКолонку("ВидРасчета"), "Наименование, КраткоеНаименование");
		ОписаниеТипаНачислений = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
		ДобавляемыеРеквизиты = Новый Массив;
		Для Каждого ОписаниеРеквизита Из ОписанияДобавляемыхРеквизитов Цикл
			КолонкиЗависимыхНачислений.Вставить(ОписаниеРеквизита.ВидРасчета, ОписаниеРеквизита.ИндексРеквизита);
			
			Если ОписаниеРеквизита.ИндексРеквизита <= 6 Тогда
				Продолжить;
			КонецЕсли;
			ЗаголовокРеквизита = ?(ПустаяСтрока(НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование), 
				НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].Наименование, 
				НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование);
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РезультатЗависимыхНачислений" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ="), 
											ОписаниеТипаНачислений, "Объект.Начисления", ЗаголовокРеквизита));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИтогРезультатЗависимыхНачислений" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ="), ОписаниеТипаНачислений));
		КонецЦикла;
		Если ДобавляемыеРеквизиты.Количество() Тогда 
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		
		Для Каждого ОписаниеРеквизита Из ОписанияДобавляемыхРеквизитов Цикл
			
			Если ОписаниеРеквизита.ИндексРеквизита <= 6 Тогда
				НовыйЭлемент = Форма.Элементы["НачисленияРезультатЗависимыхНачислений" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ=")];
				НовыйЭлемент.Заголовок = ?(ПустаяСтрока(НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование), 
					НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].Наименование, 
					НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование);
				НовыйЭлемент.Видимость = Истина;
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Форма.Элементы.Добавить("НачисленияРезультатЗависимыхНачислений" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ="),
				Тип("ПолеФормы"), Форма.Элементы.Начисления);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "Объект.Начисления.РезультатЗависимыхНачислений" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ=");
			НовыйЭлемент.ПутьКДаннымПодвала = "ИтогРезультатЗависимыхНачислений" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ=");
		КонецЦикла;
	КонецЕсли;
	
	Форма.КолонкиИтоговЗависимыхНачислений = Новый ФиксированноеСоответствие(КолонкиЗависимыхНачислений);
	
КонецПроцедуры

Процедура ЗаполнитьИтогиЗависимыхНачислений(Форма, Сотрудники) Экспорт
	Если Форма.КоличествоКолонокИтоговЗависимыхНачислений = 0 Тогда
		Возврат
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ИзвестныеКолонкиЗависимыхНачислений = Новый Соответствие(Форма.КолонкиИтоговЗависимыхНачислений);
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ЗависимыеНачисления, "Начисление", Истина);
	Для Каждого ВидРасчета Из ВидыРасчета Цикл
		Если ИзвестныеКолонкиЗависимыхНачислений[ВидРасчета] = Неопределено Тогда
			РасчетЗарплатыРасширенныйФормы.УстановитьСвойстваКолонокИтоговыхНачислений(Форма);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Сотрудники = Неопределено Тогда
		МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ЗависимыеНачисления, "Сотрудник");
	ИначеЕсли ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		МассивСотрудников = Сотрудники;
	КонецЕсли; 
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		
		ПараметрыПоискаПоТаблицеНачислений = Новый Структура;
		ПараметрыПоискаПоТаблицеНачислений.Вставить("Сотрудник");
		Отбор = Новый Структура("Сотрудник", Сотрудник);
		СтрокиНачисленийПоСотруднику = Объект.Начисления.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаНачислений Из СтрокиНачисленийПоСотруднику Цикл
			Для ИндексКолонкиИтогов = 1 По Форма.КоличествоКолонокИтоговЗависимыхНачислений Цикл
				ИмяРеквизита = "РезультатЗависимыхНачислений" + Формат(ИндексКолонкиИтогов, "ЧГ=");
				СтрокаНачислений[ИмяРеквизита] = 0;
			КонецЦикла;
		КонецЦикла;
				
		Если СтрокиНачисленийПоСотруднику.Количество() > 1 Тогда
			КолонкиВыгрузки = "Сотрудник, Подразделение, Начисление, Результат";	
			КолонкиГруппировки = "Сотрудник, Подразделение, Начисление";
			ПараметрыПоискаПоТаблицеНачислений.Вставить("Подразделение"); 
		Иначе
			КолонкиВыгрузки = "Сотрудник, Начисление, Результат";	
			КолонкиГруппировки = "Сотрудник, Начисление";							
		КонецЕсли;
		
		ТаблицаЗависимыхНачислений = Объект.ЗависимыеНачисления.Выгрузить(Отбор, КолонкиВыгрузки);
		ТаблицаЗависимыхНачислений.Свернуть(КолонкиГруппировки, "Результат");
		
		Для Каждого СтрокаЗависимыхНачислений Из ТаблицаЗависимыхНачислений Цикл
			
			Если СтрокаЗависимыхНачислений.Результат = 0 Тогда
				Продолжить;
			КонецЕсли;
						
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаПоТаблицеНачислений, СтрокаЗависимыхНачислений);
			СтрокиНачислений = Объект.Начисления.НайтиСтроки(ПараметрыПоискаПоТаблицеНачислений);
			МассивКоэффициентов = Новый Массив;
			Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл			
				МассивКоэффициентов.Добавить(СтрокаНачислений.Результат);			
			КонецЦикла;
			
			МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаЗависимыхНачислений.Результат, МассивКоэффициентов);
			Если МассивРаспределения <> Неопределено Тогда
				ИндексКолонкиИтогов = Форма.КолонкиИтоговЗависимыхНачислений[СтрокаЗависимыхНачислений.Начисление];
				ИмяРеквизита = "РезультатЗависимыхНачислений" + Формат(ИндексКолонкиИтогов, "ЧГ=");
				Индекс = 0;
				Для Каждого СтрокаРаспределения Из МассивРаспределения Цикл
					СтрокиНачислений[Индекс][ИмяРеквизита] = СтрокаРаспределения;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваКолонокИтоговыхНачисленийДолейРКСН(Форма) Экспорт
	
	Для Н = 1 По 6 Цикл
		Форма.Элементы["НачисленияРезультатНачисленийДолейРКСН" + Формат(Н, "ЧГ=")].Видимость = Ложь;
	КонецЦикла;
	
	ВидыРасчета = Новый Массив;
	КолонкиНачисленийДолейРКСН = Новый Соответствие;
	Если Форма.КолонкиИтоговНачисленийДолейРКСН <> Неопределено Тогда
		КолонкиНачисленийДолейРКСН = Новый Соответствие(Форма.КолонкиИтоговНачисленийДолейРКСН);
	КонецЕсли;
	Если Форма.ЕстьНачисленияДолейРКСН Тогда
			
		ВидыРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
				Форма.Объект.НачисленияДолейРКСН.Выгрузить( , "Начисление").ВыгрузитьКолонку("Начисление"));
		
		Для Каждого ВидРасчета Из ВидыРасчета Цикл
			Если КолонкиНачисленийДолейРКСН[ВидРасчета] = Неопределено Тогда
				КолонкиНачисленийДолейРКСН.Вставить(ВидРасчета, 0); 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОписанияДобавляемыхРеквизитов = Новый ТаблицаЗначений;
	ОписанияДобавляемыхРеквизитов.Колонки.Добавить("ИндексРеквизита", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ОписанияДобавляемыхРеквизитов.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого ОписаниеКолонки Из КолонкиНачисленийДолейРКСН Цикл
		
		ВидРасчета = ОписаниеКолонки.Ключ;
		ВидимостьКолонки = ВидыРасчета.Найти(ВидРасчета) <> Неопределено;
		ИндексРеквизита = ОписаниеКолонки.Значение;
		
		Если ИндексРеквизита = 0 Тогда
			Форма.КоличествоКолонокИтоговНачисленийДолейРКСН = Форма.КоличествоКолонокИтоговНачисленийДолейРКСН + 1;
			ОписаниеРеквизита = ОписанияДобавляемыхРеквизитов.Добавить();
			ОписаниеРеквизита.ИндексРеквизита = Форма.КоличествоКолонокИтоговНачисленийДолейРКСН;
			ОписаниеРеквизита.ВидРасчета = ВидРасчета;
		Иначе
			Форма.Элементы["НачисленияРезультатНачисленийДолейРКСН" + Формат(ИндексРеквизита, "ЧГ=")].Видимость = ВидимостьКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписанияДобавляемыхРеквизитов.Количество() Тогда
		НаименованияНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОписанияДобавляемыхРеквизитов.ВыгрузитьКолонку("ВидРасчета"), "Наименование, КраткоеНаименование");
		ОписаниеТипаНачислений = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
		ДобавляемыеРеквизиты = Новый Массив;
		
		Для Каждого ОписаниеРеквизита Из ОписанияДобавляемыхРеквизитов Цикл
			КолонкиНачисленийДолейРКСН.Вставить(ОписаниеРеквизита.ВидРасчета, ОписаниеРеквизита.ИндексРеквизита);
			
			Если ОписаниеРеквизита.ИндексРеквизита <= 6 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОписаниеРеквизита.ВидРасчета) Тогда
				Продолжить;	
			КонецЕсли;	    
			
			ЗаголовокРеквизита = ?(ПустаяСтрока(НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование), 
				НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].Наименование, 
				НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование);
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РезультатНачисленийДолейРКСН" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ="), 
											ОписаниеТипаНачислений, "Объект.Начисления", ЗаголовокРеквизита));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИтогРезультатНачисленийДолейРКСН" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ="), ОписаниеТипаНачислений));
		КонецЦикла;
		
		Если ДобавляемыеРеквизиты.Количество() Тогда 
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		
		Для Каждого ОписаниеРеквизита Из ОписанияДобавляемыхРеквизитов Цикл
			
			Если ОписаниеРеквизита.ИндексРеквизита <= 6 Тогда
				
				Если Не ЗначениеЗаполнено(ОписаниеРеквизита.ВидРасчета) Тогда
					Продолжить;	
				КонецЕсли;
	
				НовыйЭлемент = Форма.Элементы["НачисленияРезультатНачисленийДолейРКСН" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ=")];
				НовыйЭлемент.Заголовок = ?(ПустаяСтрока(НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование), 
					НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].Наименование, 
					НаименованияНачислений[ОписаниеРеквизита.ВидРасчета].КраткоеНаименование);
				НовыйЭлемент.Видимость = Истина;
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Форма.Элементы.Добавить("НачисленияРезультатНачисленийДолейРКСН" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ="),
				Тип("ПолеФормы"), Форма.Элементы.Начисления);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "Объект.Начисления.РезультатНачисленийДолейРКСН" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ=");
			НовыйЭлемент.ПутьКДаннымПодвала = "ИтогРезультатНачисленийДолейРКСН" + Формат(ОписаниеРеквизита.ИндексРеквизита, "ЧГ=");
		КонецЦикла;
	КонецЕсли;
	
	Форма.КолонкиИтоговНачисленийДолейРКСН = Новый ФиксированноеСоответствие(КолонкиНачисленийДолейРКСН);
	
КонецПроцедуры

Процедура ЗаполнитьИтогиНачисленийДолейРКСН(Форма, Сотрудники) Экспорт
	Если Форма.КоличествоКолонокИтоговНачисленийДолейРКСН = 0 Тогда
		Возврат
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ИзвестныеКолонкиНачисленийДолейРКСН = Новый Соответствие(Форма.КолонкиИтоговНачисленийДолейРКСН);
	
	НачисленияДолейРКСН = Объект.НачисленияДолейРКСН; 	   
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияДолейРКСН, "Начисление", Истина);
	
	Для Каждого ВидРасчета Из ВидыРасчета Цикл
		Если ИзвестныеКолонкиНачисленийДолейРКСН[ВидРасчета] = Неопределено Тогда
			РасчетЗарплатыРасширенныйФормы.УстановитьСвойстваКолонокИтоговыхНачисленийДолейРКСН(Форма);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Сотрудники = Неопределено Тогда
		МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияДолейРКСН, "Сотрудник");
	ИначеЕсли ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		МассивСотрудников = Сотрудники;
	КонецЕсли; 
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		
		ПараметрыПоискаПоТаблицеНачислений = Новый Структура;
		ПараметрыПоискаПоТаблицеНачислений.Вставить("Сотрудник");
		Отбор = Новый Структура("Сотрудник", Сотрудник);
		СтрокиНачисленийПоСотруднику = Объект.Начисления.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаНачислений Из СтрокиНачисленийПоСотруднику Цикл
			Для ИндексКолонкиИтогов = 1 По Форма.КоличествоКолонокИтоговНачисленийДолейРКСН Цикл
				ИмяРеквизита = "РезультатНачисленийДолейРКСН" + Формат(ИндексКолонкиИтогов, "ЧГ=");
				СтрокаНачислений[ИмяРеквизита] = 0;
			КонецЦикла;
		КонецЦикла;
				
		Если СтрокиНачисленийПоСотруднику.Количество() > 1 Тогда
			КолонкиВыгрузки = "Сотрудник, Подразделение, Начисление, Результат";	
			КолонкиГруппировки = "Сотрудник, Подразделение, Начисление";
			ПараметрыПоискаПоТаблицеНачислений.Вставить("Подразделение"); 
		Иначе
			КолонкиВыгрузки = "Сотрудник, Начисление, Результат";	
			КолонкиГруппировки = "Сотрудник, Начисление";							
		КонецЕсли;
		
		ТаблицаНачисленийДолейРКСН = НачисленияДолейРКСН.Выгрузить(Отбор, КолонкиВыгрузки);
		ТаблицаНачисленийДолейРКСН.Свернуть(КолонкиГруппировки, "Результат");
		
		Для Каждого СтрокаНачисленийДолейРКСН Из ТаблицаНачисленийДолейРКСН Цикл
			
			Если СтрокаНачисленийДолейРКСН.Результат = 0 Тогда
				Продолжить;
			КонецЕсли;
						
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаПоТаблицеНачислений, СтрокаНачисленийДолейРКСН);
			СтрокиНачислений = Объект.Начисления.НайтиСтроки(ПараметрыПоискаПоТаблицеНачислений);
			МассивКоэффициентов = Новый Массив;
			Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл			
				МассивКоэффициентов.Добавить(СтрокаНачислений.Результат);			
			КонецЦикла;
			
			МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаНачисленийДолейРКСН.Результат, МассивКоэффициентов);
			Если МассивРаспределения <> Неопределено Тогда
				ИндексКолонкиИтогов = Форма.КолонкиИтоговНачисленийДолейРКСН[СтрокаНачисленийДолейРКСН.Начисление];
				ИмяРеквизита = "РезультатНачисленийДолейРКСН" + Формат(ИндексКолонкиИтогов, "ЧГ=");
				Индекс = 0;
				Для Каждого СтрокаРаспределения Из МассивРаспределения Цикл
					СтрокиНачислений[Индекс][ИмяРеквизита] = СтрокаРаспределения;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

