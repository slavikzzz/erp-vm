
#Область ПрограммныйИнтерфейс

#Область Локализация

Процедура ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя) Экспорт
	
	//++ НЕ ГОСИС
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмя);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	//++ НЕ ГОСИС
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(Ссылка.Метаданные().ПолноеИмя());
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// Требуется определить массив ссылок служебных организаций, исключаемых из списков выбора в библиотеке.
// 
// Параметры:
//  СписокОрганизаций - Массив из ОпределяемыйТип.Организация - переопределяемый параметр, массив организаций, исключаемых из списков.
Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Проверяет использование подразделений в информационной базе.
// 
// Параметры:
//  Использовать - Булево - Подразделения используются (исходящий).
//
Процедура ИспользованиеПодразделений(Использовать) Экспорт
	
	//++ НЕ ГОСИС
	
	Использовать = Истина;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования серий (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВладелецСерий.ИспользоватьСерии
		|		КОГДА
		|			Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Определяет использование в инофрмационной базе обособленных подразделений выделенных на отдельный баланс
// 
// Параметры:
//  Использовать - Булево - Используются подразделения, выделенных на обособленный баланс
//
Процедура ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс(Использовать) Экспорт
	
	//++ НЕ ГОСИС
	
	Использовать = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ПриОпределенииИспользованияЧастичногоВыбытия(Использование, ВидПродукцииИС) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС));
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|		И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета";
	Использование = Не Запрос.Выполнить().Пустой();
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//  Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//                                                                                              собственную организацию или контрагента
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",         Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(ТорговыйОбъект)
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Подразделение                         КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(ТорговыйОбъект)
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(&ТорговыйОбъект КАК Справочник.СтруктураПредприятия) КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации)                  КАК Организация
		|ПОМЕСТИТЬ Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП/GLN из информационной базы.
//
// Параметры:
//  Сведения      - Структура - структура с реквизитами организации, которые требуется заполнить,
//  Организация   - ОпределяемыйТип.Организация - ссылка на собственную организацию,
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
Процедура ПриОпределенииИННКППGLNОрганизации(Сведения, Организация, Подразделение) Экспорт
	
	//++ НЕ ГОСИС
	Параметры = Новый Структура();
	Параметры.Вставить("ИНН");
	Параметры.Вставить("КПП");
	Параметры.Вставить("GLN");
	Параметры.Вставить("ИностранныйКонтрагент");
	
	ИнтеграцияГИСМПереопределяемый.ИННКППGLNОрганизации(Организация, Подразделение, Параметры);
	ЗаполнитьЗначенияСвойств(Сведения, Параметры);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре:
//   * Модифицирует соединение с регистром если в качестве источника описания может использоваться не номенклатура,
//   * Получает значение служебного реквизита "Произвольная единица учета" (для номенклатуры единица учета отличается от
//     маркированной потребительской упаковки),
//   * Получает значение служебного реквизита "Требует взвешивания" (маркированные потребительские упаковки имеют
//     индивидуальный вес).
//
// Параметры:
//  ТекстЗапроса           - Строка - текст запроса с регистром "ОписаниеНоменклатурыИС" (исходящий),
//  ПутьКРегистру          - Строка - имя таблицы регистра "ОписаниеНоменклатурыИС" в запросе,
//  ПутьКПолюНоменклатура  - Строка - путь к номенклатуре в запросе
//  ПутьКИсточникуОписания - Строка - путь к источнику описания
Процедура ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, ПутьКРегистру, ПутьКПолюНоменклатура, ПутьКИсточникуОписания) Экспорт
	
	//++ НЕ ГОСИС
	
	// Соединение с регистром
	ИмяПоляЗамены = "&ТоварыОписаниеНоменклатурыИС";
	ТекстЗамены = СтрШаблон("%2.Номенклатура = %1
	|	ИЛИ %2.Номенклатура = %1.НаборУпаковок", ПутьКПолюНоменклатура, ПутьКРегистру);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	// Получение признака Произвольная единица учета
	ИмяПоляЗамены = "&ПроизвольнаяЕдиницаУчета";
	ТекстЗамены = СтрШаблон("ЕСТЬNULL(%1.КоличествоВПотребительскойУпаковке, 1) <> 1
	|	ИЛИ ЕСТЬNULL(%1.ЕмкостьПотребительскойУпаковки, 1) > 1
	|	ИЛИ (%1.Номенклатура ЕСТЬ NULL
	|		И %2.ОсобенностьУчета В (
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС))
	|		И %2.ЕдиницаИзмерения.ТипИзмеряемойВеличины В(
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)))
	|", ПутьКРегистру, ПутьКПолюНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	// Получение признака Требует взвешивания
	ИмяПоляЗамены = "&ТребуетВзвешивания";
	ТекстЗамены = СтрШаблон("(%1.Номенклатура ЕСТЬ NULL
	|	ИЛИ %1.КоличествоВПотребительскойУпаковке = 0)
	|	И %2.ОсобенностьУчета В (
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС))
	|	И %2.ЕдиницаИзмерения.ТипИзмеряемойВеличины В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
	|", ПутьКРегистру, ПутьКПолюНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре, а также при использовании режима "ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками":
//   * Дополняет входящий текст запроса.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса получения описания номенклатуры ИС.
Процедура ДополнитьТекстЗапросаОписанияНоменклатуры(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	
	// Дополняем:
	// 1. Получение реквизита "Вариант частичного выбытия" из явного указания субпотребительской упаковки
	// 2. Получение реквизита "ЕмкостьПотребительскойУпаковки" в зависимости от указания упаковок
	// 3. Изменение значения по-умолчанию для продукции с мерным типом измеряемой величины единицы хранения
	// 4. Не для алкоголя и немаркируемой продукции
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОписаниеНоменклатурыИС.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками)
		|				И ОписаниеНоменклатурыИС.ПотребительскаяУпаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				И ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками)
		|			ТОГДА 0
		|		ИНАЧЕ ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки
		|	КОНЕЦ                               КАК ЕмкостьПотребительскойУпаковки,
		|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке  КАК КоличествоВПотребительскойУпаковке,
		|	ВЫБОР
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками)
		|			ТОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИС.ЧастьПотребительскойУпаковки)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура)
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИС.ГрупповаяЛогистическаяУпаковка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИС.ПотребительскаяУпаковка)
		|			ТОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
		|	КОНЕЦ                                                      КАК ВариантЧастичногоВыбытия,
		|	ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения КАК ВариантИспользованияЕдиницыХранения,
		|	ОписаниеНоменклатурыИС.ПотребительскаяУпаковка             КАК ПотребительскаяУпаковка,
		|	ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия           КАК УпаковкаЧастичногоВыбытия
		|ИЗ
		|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура В (&Номенклатура)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка,
		|	Неопределено,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ОсобенностьУчета В (
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС))
		|		И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
		|			ТОГДА 0
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
		|			И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
		|			И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво)
		|			И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках)
		|		ТОГДА ЗНАЧЕНИЕ (Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ОсобенностьУчета В (
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС))
		|		И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИС.МернаяПродукцияТребуетУказанияЗначения)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	Неопределено,
		|	Неопределено
		|ИЗ Справочник.Номенклатура КАК СправочникНоменклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|	ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИСНаборы
		|	ПО ОписаниеНоменклатурыИСНаборы.Номенклатура = СправочникНоменклатура.НаборУпаковок
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В (&Номенклатура)
		|	И ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
		|	И ОписаниеНоменклатурыИСНаборы.Номенклатура ЕСТЬ NULL
		|";
		
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании источника описания номенклатуры отличного от ссылки 
//   на номенклатуру:
//   * Дополняет входящий массив классами номенклатуры,
//   * Возвращает соответствие добавленных классов и исходной номенклатуры.
//
// Параметры:
//  Номенклатура - Массив Из ОпределяемыйТип.ИсточникОписанияноменклатурыИС - Источник описания номенклатуры.
//  СоответстиеИсточникаНоменклатуре - Соответствие из КлючИЗначение - описание добавленных классов номенклатуры:
//   * Ключ - ОпределяемыйТип.ИсточникОписанияНоменклатурыИС - Источник описания номенклатуры,
//   * Значение - Массив Из ОпределяемыйТип.Номенклатура - номенклатура из входящего массива
Процедура ДополнитьИсточникиОписанияНоменклатуры(Номенклатура, СоответстиеИсточникаНоменклатуре) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.НаборУпаковок КАК НаборУпаковок,
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&номенклатура)
	|	И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|	И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементСоответствия = СоответстиеИсточникаНоменклатуре.Получить(Выборка.НаборУпаковок);
		Если ЭлементСоответствия = Неопределено Тогда
			ЭлементСоответствия = новый Массив;
			СоответстиеИсточникаНоменклатуре.Вставить(Выборка.НаборУпаковок, ЭлементСоответствия);
		КонецЕсли;
		ЭлементСоответствия.Добавить(Выборка.Ссылка);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация (исходящий),
//              - Неопределено - организация не найдена (исходящий),
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Проверка, является ли партнер индивидуальным предпринимателем.
// 
// Параметры:
//  ОрганизацияКонтрагент - ОпределяемыйТип.Организация, ОпределяемыйТип.КонтрагентГосИС - Партнер или организация
//  ЭтоИндивидуальныйПредприниматель - Булево - Истина, если это индивидуальный предприниматель
Процедура ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(ОрганизацияКонтрагент, ЭтоИндивидуальныйПредприниматель) Экспорт
	
	//++ НЕ ГОСИС
	ЭтоИндивидуальныйПредприниматель = ИнтеграцияИСУТ.ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(ОрганизацияКонтрагент);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать проверку возможности выбора серии для номенклатуры.
// 
// Параметры:
//  ДанныеДляРасчетаСерии  - Структура - Данные для расчета серий.
//  ПараметрыУказанияСерий - Структура - Параметры указания серий.
//  ТребуетсяВыбор         - Булево - исходящий, признак необходимости выбора серии.
//  СерияДолжнаБытьУказана - Булево - исходящий, признак обязательного заполнения серии.
//  КэшированныеЗначения   - Произвольный - кэшированные значения
//
Процедура ПриОпределенииНеобходимостиВыбораСерии(ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор, СерияДолжнаБытьУказана, КэшированныеЗначения = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Структура;
	КонецЕсли;
	
	// Автоматическая генерация серий в приемке
	Если ДанныеДляРасчетаСерии.Операция = Перечисления.ВидыОперацийИСМП.Приемка Тогда
		Если Не КэшированныеЗначения.Свойство("АвтоматическаяГенерацияСерий") Тогда
			КэшированныеЗначения.Вставить("АвтоматическаяГенерацияСерий", Новый Соответствие);
		КонецЕсли;
		КэшПоиск = КэшированныеЗначения.АвтоматическаяГенерацияСерий.Получить(ДанныеДляРасчетаСерии.Номенклатура);
		Если КэшПоиск = Неопределено Тогда
			КэшПоиск = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляРасчетаСерии.Номенклатура, "ВидНоменклатуры.АвтоматическиГенерироватьСерии");
			КэшированныеЗначения.АвтоматическаяГенерацияСерий.Вставить(ДанныеДляРасчетаСерии.Номенклатура, КэшПоиск);
		КонецЕсли;
		Если КэшПоиск = Истина Тогда
			ТребуетсяВыбор = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Необходимость указания серий
	Если Не КэшированныеЗначения.Свойство("ПризнакУказанияСерий") Тогда
		КэшированныеЗначения.Вставить("ПризнакУказанияСерий", Новый Соответствие);
	КонецЕсли;
	
	КэшПоиск = КэшированныеЗначения.ПризнакУказанияСерий.Получить(ДанныеДляРасчетаСерии.Номенклатура);
	Если КэшПоиск <> Неопределено Тогда
		ТребуетсяВыбор = КэшПоиск;
		Возврат;
	КонецЕсли;
	
	ПараметрыУказанияСерийКопия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
	
	ИмяТЧ = "Товары";
	Если ПараметрыУказанияСерийКопия.Свойство("ВыходныеИзделия") Тогда
		ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.ВыходныеИзделия;
		ПараметрыУказанияСерийКопия.ПодготовкаОрдера = Истина;
		ИмяТЧ = "ВыходныеИзделия";
	КонецЕсли;
	// Производство ЕГАИС
	Если ПараметрыУказанияСерийКопия.Свойство("Товары") Тогда
		ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.Товары;
	КонецЕсли;
	
	Если ПараметрыУказанияСерийКопия.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция" Тогда
		ПараметрыУказанияСерийКопия.ИмяТЧТовары = ИмяТЧ;
		ПараметрыУказанияСерийКопия.ИмяТЧСерии = ИмяТЧ;
		ИнтеграцияИСУТКлиентСервер.ПараметрыУказанияСерийЗаменитьИмяТЧ(ПараметрыУказанияСерийКопия);
		ПараметрыУказанияСерийКопия.ИменаПолейДополнительные.Удалить(
			ПараметрыУказанияСерийКопия.ИменаПолейДополнительные.Найти("КоличествоПодобрано"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерийКопия.ИмяТЧСерии) Тогда 
		ПараметрыУказанияСерийКопия.ИмяТЧСерии = ПараметрыУказанияСерийКопия.ИмяТЧТовары;
	КонецЕсли;
	
	ТекущаяСтрока = Новый Структура;
	
	ТекущаяСтрока.Вставить("Номенклатура",   ДанныеДляРасчетаСерии.Номенклатура);
	ТекущаяСтрока.Вставить("Характеристика", ДанныеДляРасчетаСерии.Характеристика);
	ТекущаяСтрока.Вставить("Склад",          ДанныеДляРасчетаСерии.Склад);
	ТекущаяСтрока.Вставить("Получатель",     ДанныеДляРасчетаСерии.Склад);
	ТекущаяСтрока.Вставить("ТипНоменклатуры");
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются");
	ТекущаяСтрока.Вставить("Серия");
	ТекущаяСтрока.Вставить("Назначение");
	ТекущаяСтрока.Вставить("НазначениеОтправитель");
	ТекущаяСтрока.Вставить("НомерСтроки",         1);
	ТекущаяСтрока.Вставить("Количество",          1);
	ТекущаяСтрока.Вставить("КоличествоПодобрано", 1);
	ТекущаяСтрока.Вставить("СтатусУказанияСерийОтправитель", 0);
	ТекущаяСтрока.Вставить("СтатусУказанияСерийПолучатель", 0);
	ТекущаяСтрока.Вставить("СтатусУказанияСерийНаСкладах", 0);
	ТекущаяСтрока.Вставить("СтатусУказанияСерийПереданныхТоваров", 0);
	ТекущаяСтрока.Вставить("Произведено");
	ТекущаяСтрока.Вставить("Отменено");
	ТекущаяСтрока.Вставить("ДатаПроизводства");
	ТекущаяСтрока.Вставить("СтатусУказанияСерий", 0);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
		ТекущаяСтрока.Характеристика);
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));

	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерийКопия, ДанныеДляРасчетаСерии.Склад));
	
	Кэш = Неопределено;
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Кэш);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СтатусУказанияСерийОтправитель) Тогда
		ТекущаяСтрока.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерийОтправитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СтатусУказанияСерийНаСкладах) Тогда
		ТекущаяСтрока.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерийНаСкладах;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СтатусУказанияСерийПереданныхТоваров) Тогда
		ТекущаяСтрока.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерийПереданныхТоваров;
	КонецЕсли;
	
	ТребуетсяВыбор = Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(ТекущаяСтрока.СтатусУказанияСерий, ПараметрыУказанияСерийКопия);
	
	Если ТребуетсяВыбор Тогда
		СтатусыСерийСериюМожноУказать = ПроверкаИПодборПродукцииИСМПКлиентСервер.СтатусыСерийСериюМожноУказать();
		СерияДолжнаБытьУказана = СтатусыСерийСериюМожноУказать.Найти(ТекущаяСтрока.СтатусУказанияСерий) = Неопределено;
	Иначе
		СерияДолжнаБытьУказана = Ложь;
	КонецЕсли;
	
	КэшированныеЗначения.ПризнакУказанияСерий.Вставить(ДанныеДляРасчетаСерии.Номенклатура, ТребуетсяВыбор);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить наличие маркируемых товаров для которых нет стандартной фабричной упаковки
//   (настраиваемых не в регистре ОписаниеноменклатурыИС).
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (исходящий).
//
Процедура ИспользованиеПродукцииТребующейВзвешивания(Использование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	
	ОсобенностьУчета = Новый Массив;
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	Запрос.УстановитьПараметр("МерныеТипы", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|			Или ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.НаборУпаковок)
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
		|	И СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностьУчета)
		|	И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипы)
		|";
	Использование = Не Запрос.Выполнить().Пустой();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Для БРМК. Определяет коды маркировки на оборудовании розлива по переданной таблице товаров.
// Необходимо заполнить выходной параметр КегиНаОборудованииРозлива
// 
// Параметры:
//  КегиНаОборудованииРозлива - ТаблицаЗначений - Коды маркировки подключенные к оборудованию розлива:
//  * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки кега
//  * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика кода маркировки кега
//  * Серия - ОпределяемыйТип.СерияНоменклатуры - серия кода маркировки кега
//  * ИндексИсходнойСтроки - Число - Служебный, в переопределении можно не заполнять
//  * УчитыватьСерии - Булево - учитвать серии исходной таблицы товаров
//  * ВариантЧастичногоВыбытия - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС - настройка частичного выбытия номенклатуры
//  * КодМаркировки - ОпределяемыйТип.ШтрихкодУпаковкиИС - код маркировки кега
//  * Комментарий - ОпределяемыйТип.ОборудованиеРозливаИСМП - описание оборудования, к которому подключен кег см. РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС
//  * КодМаркировкиСтрокой - Строка - представление кода маркировки см. РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС
//  * ПолныйКодМаркировки - Строка - полный код маркировки кега Base64 см. РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС
//  ТаблицаТовары - см. РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.НоваяТаблицаПоискаВскрытыхПотребительскихУпаковок
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ТолькоПолноеСоответствие - Булево - Искать без учета подменной номенклатуры
Процедура ПриОпределенииВскрытыхПотребительскихУпаковок(КегиНаОборудованииРозлива, ТаблицаТовары, ПараметрыСканирования, ТолькоПолноеСоответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Для БРМК. Определяет параметры полей описания номенклатуры по коду маркировки.
// 
// Параметры:
//  ПараметрыОписания - Структура:
//  *  ИмяПоляНоменклатураШтрихкода   - Строка - поле Номенклатура
//  *  ИмяПоляХарактеристикаШтрихкода - Строка - поле Характеристика
//  *  ИмяПоляСерияШтрихкода          - Строка - поле Серия
//  *  ПутьКИсточникуДанныхШтрихкода  - Строка - таблица источника
//  *  ИмяПоляКодМаркировки           - Строка - поле таблицы источника
Процедура ПриОпределенииПараметровИсточникаДанныхНоменклатурыПоКодуМаркировки(ПараметрыОписания) Экспорт
	
	Если Не ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		ПараметрыОписания.ИмяПоляНоменклатураШтрихкода  = "Владелец";
		ПараметрыОписания.ПутьКИсточникуДанныхШтрихкода = "РегистрСведений.Штрихкоды";
		ПараметрыОписания.ИмяПоляКодМаркировки          = "Штрихкод";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//  Представление  - Строка                                     - представление для заполнения,
//  Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//  Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//  Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	//++ НЕ ГОСИС
	Представление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		СокрЛП(Номенклатура),
		СокрЛП(Характеристика),
		Упаковка,
		Серия);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Проверка, является ли переданный документ внутренним перемещением.
// Необходимо для проверки доступности передачи по ОСУ - есть виды продукции, по которым
// разрешена передача по ОСУ между своими подразделениями
// 
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - Контекст.
//  ЭтоВнутреннееПеремещение - Булево - Истина, если это документ внутреннего перемещения
// 
Процедура ЭтоДокументВнутреннегоПеремещения(Контекст, ЭтоВнутреннееПеремещение) Экспорт
	
	//++ НЕ ГОСИС
	Если Контекст = Неопределено Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДанных) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ЭтоВнутреннееПеремещение = Истина;
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		ЭтоВнутреннееПеремещение = Истина;
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ДокументСсылка.ОтборРазмещениеТоваров")
		И ЗначениеЗаполнено(ИсточникДанных) Тогда
		ЭтоВнутреннееПеремещение = (ИнтеграцияИСВызовСервераУТ.ЭтоРаспоряжениеОрдераНаВнутреннееПеремещение(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанных, "Распоряжение")));
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда
		ЭтоВнутреннееПеремещение = (ИнтеграцияИСВызовСервераУТ.ЭтоРаспоряжениеОрдераНаВнутреннееПеремещение(ИсточникДанных.Распоряжение));
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
		И ЗначениеЗаполнено(ИсточникДанных) Тогда
		ЭтоВнутреннееПеремещение = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанных, "СкладскаяОперация") = ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению"));
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		ЭтоВнутреннееПеремещение = (ИсточникДанных.СкладскаяОперация = ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению"));
	Иначе
		ЭтоВнутреннееПеремещение = Ложь;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Если Форма.ИмяФормы <> "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "ОбщаяФорма.ФормаУточненияДанныхИС"
		И Форма.ИмяФормы <> "ОбщаяФорма.ФормаУточненияПодобраннойПродукцииИСМП" Тогда
			
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				Префикс + "ВыгрузитьДанныеВТСД",
				"Видимость",
				Ложь);
		КонецЦикла;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
