#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверкаУвольненияБезКомпенсацийИУдержаний(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРасчетныйМесяц = ЗарплатаКадрыБазовый.РасчетныйМесяц(ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РезультатПроверкиУвольненияБезКомпенсацийИУдержаний(ТекущийРасчетныйМесяц);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВидыЕжегодныхОплачиваемыхОтпусков = Справочники.ВидыОтпусков.ВидыЕжегодныхОплачиваемыхОтпусков();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Остатки = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(Выборка.Сотрудник, Выборка.ДатаУвольнения,, Истина);
		Если Остатки.ОстатокНаДату = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Отпуск Из Остатки.ОстаткиВРазрезеВидовОтпусков Цикл
			Если ВидыЕжегодныхОплачиваемыхОтпусков.Найти(Отпуск.ВидЕжегодногоОтпуска) <> Неопределено Тогда
				МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);;
				Проблема.УточнениеПроблемы = СтрШаблон(
					НСтр("ru = 'Сотрудник уволен без компенсаций и удержаний в текущем расчетном месяце (%1).';
						|en = 'Employee dismissed without compensation and deductions in the current settlement month (%1).'"),
					ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ТекущийРасчетныйМесяц));
				УстановитьПривилегированныйРежим(Истина);
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				УстановитьПривилегированныйРежим(Ложь);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатПроверкиУвольненияБезКомпенсацийИУдержаний(ТекущийРасчетныйМесяц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийРасчетныйМесяц", ТекущийРасчетныйМесяц);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Увольнение.Сотрудник КАК Сотрудник,
		|	Увольнение.ДатаУвольнения КАК ДатаУвольнения
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущийРасчетныйМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущийРасчетныйМесяц, МЕСЯЦ)
		|	И Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать)
		|	И Увольнение.Проведен
		|	И НЕ Увольнение.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомСотрудники.ДатаУвольнения
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|ГДЕ
		|	УвольнениеСпискомСотрудники.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущийРасчетныйМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущийРасчетныйМесяц, МЕСЯЦ)
		|	И УвольнениеСпискомСотрудники.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать)
		|	И УвольнениеСпискомСотрудники.Ссылка.Проведен
		|	И НЕ УвольнениеСпискомСотрудники.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли