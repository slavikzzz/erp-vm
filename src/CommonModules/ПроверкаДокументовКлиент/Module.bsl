//////////////////////////////////////////////////////////////////////////////////////////////
// Проверка документов: методы, работающие на  стороне клиента.
//  
//////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет команду изменения статуса проверки документа,
// см. ПроверкаДокументовВызовСервера.ВыполнитьКомандуИзмененияСтатусаПроверкиДокумента.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой расположена команда;
//  Команда - КомандаФормы - Команда, которую нужно выполнить.
//
Процедура ВыполнитьКомандуИзмененияСтатусаПроверкиДокумента(Форма, Команда) Экспорт
	
	Если СтрНайти(Команда.Имя, "ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента") И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ДокументПроверен") Тогда
		
		Если Не Форма.Объект.Проведен Тогда
			ДополнительныеПараметрыОповещения = Новый Структура("Форма, Команда, Проведение", Форма, Команда, Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередПроверкой", ЭтотОбъект, ДополнительныеПараметрыОповещения);
			ТекстВопроса = НСтр("ru = 'Проверка возможна только для проведенных документов. Провести документ и продолжить выполнение проверки?';
								|en = 'Check is available only for posted documents. Do you want to post the document and continue checking?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли Форма.Модифицированность Тогда
			ДополнительныеПараметрыОповещения = Новый Структура("Форма, Команда", Форма, Команда);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередПроверкой", ЭтотОбъект, ДополнительныеПараметрыОповещения);
			ТекстВопроса = НСтр("ru = 'Документ был изменен. Для изменения статуса проверки необходимо записать документ. Продолжить?';
								|en = 'Document was modified. To change the check status, save the document. Do you want to continue?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ДанныеОбОшибке = Новый Соответствие;
			Форма.РазблокироватьДанныеФормыДляРедактирования();
			ПроверкаДокументовВызовСервера.ВыполнитьКомандуИзмененияСтатусаПроверкиДокумента(Форма.Объект.Ссылка, ДанныеОбОшибке);
			Если ДанныеОбОшибке.Количество() Тогда
				ПоказатьПредупреждение(, ДанныеОбОшибке.Получить(Форма.Объект.Ссылка), 15, НСтр("ru = 'Не удалось изменить статус проверки документа';
																								|en = 'Cannot change the document check status'"));
			Иначе
				Оповестить("Запись_СтатусПроверкиДокумента", Форма.Объект.Ссылка, Форма);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы. Проверяет, если оповещение вызвано новым статусом
// проверки - обновляет команду изменения статуса проверки формы и блокирует форму в случае необходимости (когда статус
//            проверки документа "Проверен").
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, из обработчика события которой происходит вызов процедуры:
//  	* Объект - ДокументОбъект -
//  ИмяСобытия - Строка - идентификатор сообщения принимающей формой (см. метод Оповестить);
//	Параметр - Структура - параметр сообщения (см. метод Оповестить);
//	Источник - Произвольный - источник события (см. метод Оповестить).
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ДокументПроверен") Тогда
		ТипыДокументовСОтключаемойПроверкой = ТипыДокументовСОтключаемойПроверкойПриФоновомПроведенииОснований();
		Если ИмяСобытия = "Запись_СтатусПроверкиДокумента" ИЛИ СтрНачинаетсяС(ИмяСобытия, "Запись")
			И ТипыДокументовСОтключаемойПроверкой.Найти(ТипЗнч(Форма.Объект.Ссылка)) <> Неопределено Тогда
			
			Форма.Прочитать();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
// Необходимо при записи проверенного документа выводить предупреждение о том, что документ был проверен и при записи
// снимется с проверки. У пользователя будет возможность отменить запись. Данная проверка будет вызываться вне
// зависимости от опции жесткой/мягкой проверки, так как при жесткой проверке запись измененного документа не возможна.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры:
//  	* Объект - ДокументОбъект -
//  Отказ - Булево - признак отказа от записи документа;
//	ПараметрыЗаписи - Структура - параметры записи (см. событие ПередЗаписью).
//
Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ДокументПроверен")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ПодтверждениеЗаписи")
		И Форма.ПроверкаДокументов_ПодтверждениеЗаписи И Форма.ПроверкаДокументов_ДокументПроверен Тогда
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "НеВыполнятьПроверкуПередЗаписью") Тогда
			Форма.НеВыполнятьПроверкуПередЗаписью = Истина;
		КонецЕсли;
		
		Отказ = Истина;
		
		ДополнительныеПараметрыОповещения = Новый Структура("Форма, ПараметрыЗаписи", Форма, ПараметрыЗаписи);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередЗаписью", ЭтотОбъект, ДополнительныеПараметрыОповещения);
		ТекстВопроса = НСтр("ru = 'Данный документ ранее был проверен. Запись документа пометит его к повторной проверке. Продолжить?';
							|en = 'This document has already been checked. If you save the document, it will be marked for recheck. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработчикОповещенияВопросПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Форма.ПроверкаДокументов_ПодтверждениеЗаписи = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "НеВыполнятьПроверкуПередЗаписью") Тогда
			ДополнительныеПараметры.Форма.НеВыполнятьПроверкуПередЗаписью = Ложь;
		КонецЕсли;
		Если ДополнительныеПараметры.Форма.Записать(ДополнительныеПараметры.ПараметрыЗаписи) Тогда
			ЗакрыватьФорму = Неопределено;
			ДополнительныеПараметры.ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму", ЗакрыватьФорму);
			Если ЗакрыватьФорму = Истина Тогда
				ДополнительныеПараметры.Форма.Закрыть();
			Иначе
				Оповестить("Запись_СтатусПроверкиДокумента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикОповещенияВопросПередПроверкой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И ДополнительныеПараметры.Свойство("Форма") Тогда
		Форма = ДополнительныеПараметры.Форма; // РасширениеУправляемойФормыДляДокумента -
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ПодтверждениеЗаписи") Тогда
			Форма.ПроверкаДокументов_ПодтверждениеЗаписи = Ложь;
		КонецЕсли;
		СтруктураЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		СтруктураЗаписи = ?(ДополнительныеПараметры.Свойство("Проведение"), СтруктураЗаписи, Неопределено);
		Если Форма.Записать(СтруктураЗаписи) Тогда
			ВыполнитьКомандуИзмененияСтатусаПроверкиДокумента(Форма, ДополнительныеПараметры.Команда);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипыДокументовСОтключаемойПроверкойПриФоновомПроведенииОснований()
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураВыданныйАванс"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураПолученныйАванс"));
	
	ПроверкаДокументовКлиентЛокализация.ДополнитьТипыДокументовСОтключаемойПроверкойПриФоновомПроведенииОснований(МассивВозврата);
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти
