
#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект, ОписаниеДокумента) Экспорт

	Форма.ДокументКЭДО = ДокументКЭДОЗаявки(ТекущийОбъект.Ссылка);
	Форма.ЭлектронныйДокумент = ЭлектронныйДокументЗаявкиСотрудника(ТекущийОбъект.Ссылка);
	ПечатнаяФормаСоШтампами = ПредставлениеДокументаЗаявки(Форма.ЭлектронныйДокумент);
	Если ПечатнаяФормаСоШтампами <> Неопределено Тогда
		Форма.ПредставлениеДокумента = ПечатнаяФормаСоШтампами;
	КонецЕсли;
	
	Если ЗаявкиСотрудников.ЭтоСогласуемаяЗаявка(ТекущийОбъект.Ссылка) Тогда
		// Получим результаты согласования заявки.
		РезультатыСогласования = РезультатыСогласованияЗаявки(ТекущийОбъект);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Форма.РезультатыСогласования);
	КонецЕсли;
	
	Если Не ТекущийОбъект.Выполнена Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Предмет", ТекущийОбъект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		ТекущиеЗадачи = Запрос.Выполнить().Выгрузить();
		Если ЗначениеЗаполнено(ТекущиеЗадачи) Тогда
			Форма.АвторПоручения 	= ТекущиеЗадачи[0].Автор;
			Форма.ИсполнительЗадачи = ТекущиеЗадачи[0].Исполнитель;
			Если Не ЗначениеЗаполнено(Форма.ИсполнительЗадачи) Тогда
				УстановитьПривилегированныйРежим(Истина);
				Форма.ИсполнительЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеЗадачи[0].БизнесПроцесс, "Исполнитель");
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеДокумента.ПроверятьСвязанныеЗаявки Тогда
		ПрочитатьВывестиСвязанныеЗаявки(Форма, ТекущийОбъект, ОписаниеДокумента);
	КонецЕсли;
	
	Если ОписаниеДокумента.ДоступнаОтменаЗаявки Тогда
		ПрочитатьВывестиДанныеОтменыЗаявок(Форма, ТекущийОбъект, ОписаниеДокумента);
	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, ОписаниеДокумента) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Интерактивное создание документа не поддерживается.';
								|en = 'Интерактивное создание документа не поддерживается.'");
	КонецЕсли;
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	// Состояние заявки.
	Если Объект.Выполнена Тогда
		Если Объект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
			ЗаголовокСостояниеЗаявки = НСтр("ru = 'Заявка выполнена';
											|en = 'Заявка выполнена'");
		ИначеЕсли Объект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована Тогда
			ЗаголовокСостояниеЗаявки = НСтр("ru = 'Заявка аннулирована';
											|en = 'Заявка аннулирована'");
		Иначе
			ЗаголовокСостояниеЗаявки = НСтр("ru = 'Заявка отклонена, описание причины см в сообщении сотруднику';
											|en = 'Заявка отклонена, описание причины см в сообщении сотруднику'");
		КонецЕсли;
	Иначе
		ЗаголовокСостояниеЗаявки = НСтр("ru = 'Заявка на выполнении';
										|en = 'Заявка на выполнении'");
	КонецЕсли;
	Элементы.ДекорацияСостояниеЗаявки.Заголовок = ЗаголовокСостояниеЗаявки;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияЗаявкаВыполнена", "Видимость", Объект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияОтклонена", "Видимость", Объект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияАннулирована", "Видимость", Объект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияНаВыполнении", "Видимость", Не Объект.Выполнена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаНаВыполнении", "Видимость", Не Объект.Выполнена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаИсполнение", "Видимость", Объект.Выполнена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"АвторПоручения", "Видимость", ЗначениеЗаполнено(Форма.АвторПоручения));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДокументКЭДО", "Видимость", ЗначениеЗаполнено(Форма.ДокументКЭДО));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ИдентификаторЭлектронногоДокумента", "Видимость", ЗначениеЗаполнено(Объект.ИдентификаторЭлектронногоДокумента));
	
	ФормаЗаблокирована = Объект.Выполнена Или ОписаниеДокумента.ДоступнаОтменаЗаявки И ЗначениеЗаполнено(Форма.ОтменяющаяЗаявка);
	
	// Установка доступности формы.
	Форма.ТолькоПросмотр = ФормаЗаблокирована;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаПояснениеСвязанныеЗаявки", "Видимость", Не ФормаЗаблокирована);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СтраницыФормы", "ТолькоПросмотр", ФормаЗаблокирована);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаКомандыВыполнения", "Доступность", Не ФормаЗаблокирована);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаКомандыВыполненияЗаявки", "Доступность", Не ФормаЗаблокирована);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ВыбратьТиповойОтвет", "Доступность", Не ФормаЗаблокирована);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ИзменитьСрокИсполнения", "Доступность", Не ФормаЗаблокирована);
	
	
	Если ОписаниеДокумента.ДоступнаОтменаЗаявки Тогда
		
		// Если заявка отменяет другую.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ГруппаОтменяемаяЗаявка", "Видимость", ЗначениеЗаполнено(Форма.Объект.ОтменяемаяЗаявка));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ГруппаДанныеЗаявления", "Видимость", Не Форма.Объект.ВариантИсправления = Перечисления.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена);
		
		Если ЗначениеЗаполнено(Форма.ОтменяющаяЗаявка) Тогда
			Если Форма.Объект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована
				Или Форма.РезультатВыполненияОтменяющейЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
				ЗаголовокОтменаЗаявки = НСтр("ru = 'Отменена по заявке';
											|en = 'Отменена по заявке'");
			Иначе
				ЗаголовокОтменаЗаявки = НСтр("ru = 'Зарегистрирована отмена этой заявки';
											|en = 'Зарегистрирована отмена этой заявки'");
			КонецЕсли;
			Форма.Элементы.ДекорацияНадписьОтменена.Заголовок = ЗаголовокОтменаЗаявки;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ГруппаСостояниеОтменены", "Видимость", ЗначениеЗаполнено(Форма.ОтменяющаяЗаявка));
		
	КонецЕсли;
	
	Если ОписаниеДокумента.ВыводитьДокументыЗаявки Тогда
		ВывестиДокументыИзТаблицыДокументовЗаявки(Форма, ОписаниеДокумента);
	КонецЕсли;
	
	Если ОписаниеДокумента.ПроверятьСвязанныеЗаявки Тогда
		УстановитьДоступностьВыполненияПоСвязаннымЗаявкам(Форма, ОписаниеДокумента);
	КонецЕсли;
	
	Если ОписаниеДокумента.ВыводитьДокументыЗаявки И ОписаниеДокумента.ДоступнаОтменаЗаявки Тогда
		УстановитьТекстПоясненияПорядкаВыполненияЗаявкиСДокументамиИОтменой(Форма, ОписаниеДокумента);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьДокументыЗаявки

Процедура ВывестиДокументыИзТаблицыДокументовЗаявки(Форма, ОписаниеДокумента) Экспорт
	
	Если Не ОписаниеДокумента.ВыводитьДокументыЗаявки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыПоЗаявке = Форма.Объект[ОписаниеДокумента.ДокументыПоЗаявкеИмя];
	ЗаполнитьСтатусВТаблицеДокументов(ДокументыПоЗаявке);
	
	ТипРеквизита = ТипРеквизитаДокументыПоЗаявкеДокумент(Форма.Объект.Ссылка, ОписаниеДокумента);
	ИмяСвойства = ОписаниеДокумента.ДокументыПоЗаявкеДокументИмя;
	
	ИмяГруппыРодитель = "ГруппаДокументыПоЗаявке";
	ГруппаФормыРодитель = Форма.Элементы.Найти(ИмяГруппыРодитель);
	УдаляемыеЭлементы = Новый Массив;
	Если ГруппаФормыРодитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Для каждого ЭлементФормы Из ГруппаФормыРодитель.ПодчиненныеЭлементы Цикл
			УдаляемыеЭлементы.Добавить(ЭлементФормы);
		КонецЦикла;
	КонецЕсли;
	Для каждого ЭлементФормы Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(ЭлементФормы);
	КонецЦикла;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если СтрНайти(РеквизитФормы.Имя, "_ДокументПоЗаявке") > 0 Тогда
			УдаляемыеРеквизиты.Добавить(РеквизитФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ЗначенияРеквизитов = Новый Структура;
	Для каждого ЭлементКоллекции Из ДокументыПоЗаявке Цикл
		Индекс = Строка(ЭлементКоллекции.ПолучитьИдентификатор());
		ИмяРеквизита = СтрШаблон("_%1%2", "ДокументПоЗаявке", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЭлементКоллекции[ИмяСвойства]);
	КонецЦикла;
	
	НетДокументовПоЗаявке = (ДокументыПоЗаявке.Количество() = 0);
	Если НетДокументовПоЗаявке Тогда
		ТекстЗаголовка = НСтр("ru = '<документы по заявке не созданы>';
								|en = '<документы по заявке не созданы>'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыЗаявкиПояснение", "Заголовок", ТекстЗаголовка);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыЗаявкиПояснение", "Видимость", НетДокументовПоЗаявке);
	
	Если ДобавляемыеРеквизиты.Количество() = 0 И УдаляемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(Форма, ЗначенияРеквизитов);
	
	Для каждого ЭлементКоллекции Из ДокументыПоЗаявке Цикл
		
		СтатусДокумента = ЭлементКоллекции["СтатусДокумента"];
		КартинкаДокумента = БиблиотекаКартинок.Документ;
		Если СтатусДокумента = 1 Тогда
			КартинкаДокумента = БиблиотекаКартинок.ДокументПроведен;
		ИначеЕсли СтатусДокумента = 3 Тогда
			КартинкаДокумента = БиблиотекаКартинок.ДокументПомеченНаУдаление;
		КонецЕсли;
		
		Индекс = Строка(ЭлементКоллекции.ПолучитьИдентификатор());
		
		ИмяГруппы = СтрШаблон("_%1%2", ИмяГруппыРодитель, Индекс);
		ПодчиненнаяГруппа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаФормыРодитель);
		ПодчиненнаяГруппа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
		ПодчиненнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ПодчиненнаяГруппа.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		ПодчиненнаяГруппа.ОтображатьЗаголовок 	= Ложь;
		ПодчиненнаяГруппа.ЦветФона 					= ЦветаСтиля.ЦветДополнительнойНавигации;
		ПодчиненнаяГруппа.ГоризонтальныйИнтервал 	= ИнтервалМеждуЭлементамиФормы.Половинный;
		ПодчиненнаяГруппа.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		ИмяЭлемента = СтрШаблон("_%1%2", "КартинкаСостояниеДокументПоЗаявке", Индекс);
		ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 		= ВидДекорацииФормы.Картинка;
		ЭлементФормы.Картинка 	= КартинкаДокумента;
		
		ИмяЭлемента = СтрШаблон("_%1%2", "ДокументПоЗаявке", Индекс);
		ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 				= ВидПоляФормы.ПолеНадписи;
		ЭлементФормы.Гиперссылка 		= Истина;
		ЭлементФормы.ПутьКДанным 		= ИмяЭлемента;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
		ЭлементФормы.МаксимальнаяШирина 	= 25;
		
		Если Не Форма.Объект.Выполнена Тогда
			ТекстПодсказки = НСтр("ru = 'Удалить документ из заявки';
									|en = 'Удалить документ из заявки'");
			ИмяЭлемента = СтрШаблон("_%1%2", "КартинкаУдалитьДокументПоЗаявке", Индекс);
			ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
			ЭлементФормы.Вид 			= ВидДекорацииФормы.Картинка;
			ЭлементФормы.Гиперссылка 	= Истина;
			ЭлементФормы.Подсказка 		= ТекстПодсказки;
			ЭлементФормы.Картинка 		= БиблиотекаКартинок.СерыйКрест;
			ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_УдалитьДокументПоЗаявке");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусВТаблицеДокументов(ТаблицаДокументов)
	
	Для каждого СтрокаТЧ Из ТаблицаДокументов Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументСсылка) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДокументСсылка, "Проведен, ПометкаУдаления", Истина);
			Если ЗначенияРеквизитов.Проведен = Истина Тогда
				СтрокаТЧ.СтатусДокумента = 1;
			ИначеЕсли ЗначенияРеквизитов.ПометкаУдаления = Истина Тогда
				СтрокаТЧ.СтатусДокумента = 3;
			Иначе
				СтрокаТЧ.СтатусДокумента = 0;
			КонецЕсли;
		Иначе
			СтрокаТЧ.СтатусДокумента = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаЗаявок

Процедура ПрочитатьВывестиДанныеОтменыЗаявок(Форма, Объект, ОписаниеДокумента)
	
	Форма.РезультатВыполненияОтменяемойЗаявки = РезультатВыполненияЗаявки(Объект.ОтменяемаяЗаявка);
	ПрочитатьДанныеОтменяющейЗаявки(Форма, Объект);
	ВывестиДокументыОтменяемойЗаявки(Форма, ОписаниеДокумента);

КонецПроцедуры

Процедура ПрочитатьДанныеОтменяющейЗаявки(Форма, Объект)
	
	ОтменяющаяЗаявка 	= Неопределено;
	РезультатВыполнения = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтменяемаяЗаявка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЗаявок.Заявка КАК Заявка,
	|	ДанныеЗаявок.РезультатВыполнения КАК РезультатВыполнения
	|ИЗ
	|	РегистрСведений.ДанныеЗаявокКабинетСотрудника КАК ДанныеЗаявок
	|ГДЕ
	|	ДанныеЗаявок.ОтменяемаяЗаявка = &ОтменяемаяЗаявка
	|	И НЕ ДанныеЗаявок.ПометкаУдаления";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		ДанныеЗаявки = РезультатЗапроса.Выгрузить();
		Если ДанныеЗаявки[0].РезультатВыполнения <> Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена Тогда
			ОтменяющаяЗаявка 	= ДанныеЗаявки[0].Заявка;
			РезультатВыполнения = ДанныеЗаявки[0].РезультатВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ОтменяющаяЗаявка = ОтменяющаяЗаявка;
	Форма.РезультатВыполненияОтменяющейЗаявки = РезультатВыполнения;

КонецПроцедуры

Процедура ВывестиДокументыОтменяемойЗаявки(Форма, ОписаниеДокумента)
	
	ОтменяемаяЗаявка = Форма.Объект.ОтменяемаяЗаявка;
	ЕстьОтменяемаяЗаявка = ЗначениеЗаполнено(ОтменяемаяЗаявка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаДокументыОтменяемойЗаявкиГлавная", "Видимость", ЕстьОтменяемаяЗаявка);
	
	Если Не ЕстьОтменяемаяЗаявка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОтменяемаяЗаявка) = Тип("ДокументСсылка.ЗаявкаПрежняяВерсияКабинетСотрудника") Тогда
		ДокументыПоЗаявке = ДокументыОтменяемойЗаявкиПрежнейВерсии(ОтменяемаяЗаявка);
		ТипРеквизита = ТипРеквизитаДокументыПоЗаявкеДокумент(Форма.Объект.Ссылка, ОписаниеДокумента);
	Иначе
		ЗаявкаОбъект = ОтменяемаяЗаявка.ПолучитьОбъект();
		ДокументыПоЗаявке = ЗаявкаОбъект.ДокументыПоЗаявке;
		ТипРеквизита = ТипРеквизитаДокументыПоЗаявкеДокумент(ОтменяемаяЗаявка, ОписаниеДокумента);
	КонецЕсли;
	
	ИмяСвойства = "ДокументСсылка";
	
	ИмяГруппыРодитель = "ГруппаДокументыОтменяемойЗаявки";
	ГруппаФормыРодитель = Форма.Элементы.Найти(ИмяГруппыРодитель);
	УдаляемыеЭлементы = Новый Массив;
	Если ГруппаФормыРодитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Для каждого ЭлементФормы Из ГруппаФормыРодитель.ПодчиненныеЭлементы Цикл
			УдаляемыеЭлементы.Добавить(ЭлементФормы);
		КонецЦикла;
	КонецЕсли;
	Для каждого ЭлементФормы Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(ЭлементФормы);
	КонецЦикла;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если СтрНайти(РеквизитФормы.Имя, "_ДокументОтменяемойЗаявки") > 0 Тогда
			УдаляемыеРеквизиты.Добавить(РеквизитФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ЗначенияРеквизитов = Новый Структура;
	Для НомерСтроки = 1 По ДокументыПоЗаявке.Количество() Цикл
		Индекс = Строка(НомерСтроки - 1);
		ИмяРеквизита = СтрШаблон("_%1%2", "ДокументОтменяемойЗаявки", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ДокументыПоЗаявке[НомерСтроки-1][ИмяСвойства]);
	КонецЦикла;
	
	НетДокументовПоЗаявке = (ДокументыПоЗаявке.Количество() = 0);
	Если НетДокументовПоЗаявке Тогда
		ТекстЗаголовка = НСтр("ru = '<документы по заявке не созданы>';
								|en = '<документы по заявке не созданы>'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыОтменяемойЗаявкиПояснение", "Заголовок", ТекстЗаголовка);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыОтменяемойЗаявкиПояснение", "Видимость", НетДокументовПоЗаявке);
	
	Если ДобавляемыеРеквизиты.Количество() = 0 И УдаляемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(Форма, ЗначенияРеквизитов);
	
	Для НомерСтроки = 1 По ДокументыПоЗаявке.Количество() Цикл
		
		Индекс = Строка(НомерСтроки - 1);
		
		ИмяГруппы = СтрШаблон("_%1%2", ИмяГруппыРодитель, Индекс);
		ПодчиненнаяГруппа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаФормыРодитель);
		ПодчиненнаяГруппа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
		ПодчиненнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ПодчиненнаяГруппа.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		ПодчиненнаяГруппа.ОтображатьЗаголовок 	= Ложь;
		ПодчиненнаяГруппа.ЦветФона 					= ЦветаСтиля.ЦветДополнительнойНавигации;
		ПодчиненнаяГруппа.ГоризонтальныйИнтервал 	= ИнтервалМеждуЭлементамиФормы.Половинный;
		ПодчиненнаяГруппа.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		ИмяЭлемента = СтрШаблон("_%1%2", "ДокументОтменяемойЗаявки", Индекс);
		ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 				= ВидПоляФормы.ПолеНадписи;
		ЭлементФормы.Гиперссылка 		= Истина;
		ЭлементФормы.ПутьКДанным 		= ИмяЭлемента;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
		ЭлементФормы.МаксимальнаяШирина 	= 25;
		
	КонецЦикла;

КонецПроцедуры

Функция ДокументыОтменяемойЗаявкиПрежнейВерсии(ОтменяемаяЗаявка)
	
	ДокументыЗаявки = Новый Массив;
	
	Задание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтменяемаяЗаявка, "Задание");
	Если ТипЗнч(Задание) = Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаОтпуск") Тогда
		ЗаданиеОбъект = Задание.ПолучитьОбъект();
		ДокументыЗаявки = ЗаданиеОбъект.Отпуска.Выгрузить();
		ДокументыЗаявки.Колонки.Отпуск.Имя = "ДокументСсылка";
	КонецЕсли;
	
	Возврат ДокументыЗаявки;

КонецФункции

#КонецОбласти

#Область СвязанныеЗаявки

Процедура ПрочитатьВывестиСвязанныеЗаявки(Форма, Объект, ОписаниеДокумента) Экспорт
	
	ПрочитатьСвязанныеЗаявки(Форма, Объект);
	ВывестиСвязанныеЗаявкиСотрудника(Форма);

КонецПроцедуры

Процедура ПрочитатьСвязанныеЗаявки(Форма, Объект)

	СвязанныеЗаявки = ЗаявкиСотрудников.СвязанныеЗаявкиСотрудника(Объект.Ссылка, Объект.ИдентификаторЗаявки);
	Форма.СвязанныеЗаявки.Загрузить(СвязанныеЗаявки);
	
	РезультатВыполненияСвязаннойЗаявки = Неопределено;
	Если ЗначениеЗаполнено(СвязанныеЗаявки) Тогда
		Для каждого СтрокаТЗ Из СвязанныеЗаявки Цикл
			РезультатВыполненияСвязаннойЗаявки = СтрокаТЗ.РезультатВыполнения;
			Если ЗначениеЗаполнено(РезультатВыполненияСвязаннойЗаявки) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.РезультатВыполненияСвязаннойЗаявки = РезультатВыполненияСвязаннойЗаявки;

КонецПроцедуры

Процедура ВывестиСвязанныеЗаявкиСотрудника(Форма)
	
	ТекстыСообщения = СвязаннаяЗаявкаТекстыСообщения();
	Форма.СообщениеСвязаннаяЗаявкаВыполнена = ТекстыСообщения.Выполнена;
	Форма.СообщениеСвязаннаяЗаявкаОтклонена = ТекстыСообщения.Отклонена;
	
	ИмяГруппыРодитель = "ГруппаСвязанныеЗаявки";
	ГруппаФормыРодитель = Форма.Элементы.Найти(ИмяГруппыРодитель);
	УдаляемыеЭлементы = Новый Массив;
	Если ГруппаФормыРодитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Для каждого ЭлементФормы Из ГруппаФормыРодитель.ПодчиненныеЭлементы Цикл
			УдаляемыеЭлементы.Добавить(ЭлементФормы);
		КонецЦикла;
	КонецЕсли;
	Для каждого ЭлементФормы Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(ЭлементФормы);
	КонецЦикла;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если СтрНайти(РеквизитФормы.Имя, "_СвязаннаяЗаявка") > 0 Тогда
			УдаляемыеРеквизиты.Добавить(РеквизитФормы.Имя);
		ИначеЕсли СтрНайти(РеквизитФормы.Имя, "_СвязаннаяЗаявкаСостояние") > 0 Тогда
			УдаляемыеРеквизиты.Добавить(РеквизитФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ЗначенияРеквизитов = Новый Структура;
	Для НомерСтроки = 1 По Форма.СвязанныеЗаявки.Количество() Цикл
		
		Индекс = Строка(НомерСтроки - 1);
		
		ИмяРеквизита = СтрШаблон("_%1%2", "СвязаннаяЗаявка", Индекс);
		ЗначениеПредставлениеНедоступна = Форма.СвязанныеЗаявки[НомерСтроки-1]["ПредставлениеНедоступна"];
		Если ЗначениеЗаполнено(ЗначениеПредставлениеНедоступна) Тогда
			ТипРеквизита = Новый ОписаниеТипов("Строка");
			ЗначенияРеквизитов.Вставить(ИмяРеквизита, Форма.СвязанныеЗаявки[НомерСтроки-1]["ПредставлениеНедоступна"]);
		Иначе
			ТипРеквизита = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Форма.Объект.Ссылка)));
			ЗначенияРеквизитов.Вставить(ИмяРеквизита, Форма.СвязанныеЗаявки[НомерСтроки-1]["Ссылка"]);
		КонецЕсли;
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		ИмяРеквизита = СтрШаблон("%1%2", "_СвязаннаяЗаявкаСостояние", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, Форма.СвязанныеЗаявки[НомерСтроки-1]["СостояниеЗаявки"]);
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() = 0 И УдаляемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(Форма, ЗначенияРеквизитов);
	
	Для НомерСтроки = 1 По Форма.СвязанныеЗаявки.Количество() Цикл
		
		Индекс = Строка(НомерСтроки - 1);
		
		ЗначениеПредставлениеНедоступна = Форма.СвязанныеЗаявки[НомерСтроки-1]["ПредставлениеНедоступна"];
		
		ИмяГруппы = СтрШаблон("_%1%2", ИмяГруппыРодитель, Индекс);
		ПодчиненнаяГруппа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаФормыРодитель);
		ПодчиненнаяГруппа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
		ПодчиненнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ПодчиненнаяГруппа.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		ПодчиненнаяГруппа.ОтображатьЗаголовок 	= Ложь;
		ПодчиненнаяГруппа.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		ИмяЭлемента = СтрШаблон("_%1%2", "СвязаннаяЗаявка", Индекс);
		ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 				= ВидПоляФормы.ПолеНадписи;
		ЭлементФормы.Гиперссылка 		= Не ЗначениеЗаполнено(ЗначениеПредставлениеНедоступна);
		ЭлементФормы.ПутьКДанным 		= ИмяЭлемента;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ИмяЭлемента = СтрШаблон("_%1%2", "СвязаннаяЗаявкаСостояние", Индекс);
		ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 				= ВидПоляФормы.ПолеНадписи;
		ЭлементФормы.ПутьКДанным 		= ИмяЭлемента;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СвязаннаяЗаявкаТекстыСообщения()
	
	ТекстыСообщения = Новый Структура("Отклонена,Выполнена");
	
	ТекстыСообщения.Отклонена = НСтр("ru = 'Связанная заявка отклонена, текущую заявку можно только отклонить.';
									|en = 'Связанная заявка отклонена, текущую заявку можно только отклонить.'");
	ТекстыСообщения.Выполнена = НСтр("ru = 'Связанная заявка была выполнена, текущую заявку нельзя отклонить.';
									|en = 'Связанная заявка была выполнена, текущую заявку нельзя отклонить.'");
	
	Возврат ТекстыСообщения;

КонецФункции

#КонецОбласти

#Область ПолучениеПредставленияФайлаЗаявки

Функция ПредставлениеДокументаЗаявки(ЭлектронныйДокумент)

	ПечатнаяФормаСоШтампами = Неопределено;
	Если ЭлектронныйДокумент <> Неопределено И КадровыйЭДО.ЭтоФайлПечатнойФормы(ЭлектронныйДокумент) Тогда
		ПечатнаяФормаСоШтампами = ПечатнаяФормаСоШтампами(ЭлектронныйДокумент);
	КонецЕсли;
	
	Возврат ПечатнаяФормаСоШтампами;

КонецФункции

Функция ЭлектронныйДокументЗаявкиСотрудника(Заявка)
	
	ИмяТаблицы = СтрШаблон("%1.%2%3", "Справочник", Заявка.Метаданные().Имя, "ПрисоединенныеФайлы");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОснованиеДокумента", Заявка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО ДокументКадровогоЭДО.ЭлектронныйДокумент = ПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	НЕ ДокументКадровогоЭДО.ПометкаУдаления
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления
	|	И ДокументКадровогоЭДО.ОснованиеДокумента = &ОснованиеДокумента
	|	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыПрисоединенныеФайлы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции 

Функция ПечатнаяФормаСоШтампами(ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеФайлаПечатнойФормы = РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайлаПечатнойФормы(ЭлектронныйДокумент);
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеФайлаПечатнойФормы <> Неопределено Тогда
		Оригинал = ДанныеФайлаПечатнойФормы.Оригинал;
		Возврат КадровыйЭДО.ПечатнаяФормаСоШтампами(ЭлектронныйДокумент, Оригинал, Истина, Истина);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область Прочие

Функция РезультатыСогласованияЗаявки(ЗаявкаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", ЗаявкаОбъект.Ссылка);
	Запрос.УстановитьПараметр("Подписант", ЗаявкаОбъект.ФизическоеЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыСогласования.Заявка КАК Заявка,
	|	РезультатыСогласования.Подписант КАК Согласовал,
	|	РезультатыСогласования.РольПодписанта КАК Роль,
	|	РезультатыСогласования.ДатаСогласования КАК Дата,
	|	РезультатыСогласования.РезультатСогласования КАК Результат
	|ИЗ
	|	РегистрСведений.РезультатыСогласованияЗаявокКабинетСотрудника КАК РезультатыСогласования
	|ГДЕ
	|	РезультатыСогласования.Заявка = &Заявка
	|	И РезультатыСогласования.Подписант <> &Подписант
	|
	|УПОРЯДОЧИТЬ ПО
	|	Роль";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументКЭДОЗаявки(Заявка)
	
	ДокументКЭДО = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОснованиеДокумента", Заявка); 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ОснованиеДокумента = &ОснованиеДокумента";
		ДокументыКЭДО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Если ЗначениеЗаполнено(ДокументыКЭДО) Тогда
			ДокументКЭДО = ДокументыКЭДО[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументКЭДО;

КонецФункции

Функция РезультатВыполненияЗаявки(Заявка)
	
	РезультатВыполнения = Неопределено;
	Если Не ЗначениеЗаполнено(Заявка) Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЗаявок.РезультатВыполнения КАК РезультатВыполнения
	|ИЗ
	|	РегистрСведений.ДанныеЗаявокКабинетСотрудника КАК ДанныеЗаявок
	|ГДЕ
	|	ДанныеЗаявок.Заявка = &Заявка
	|	И НЕ ДанныеЗаявок.ПометкаУдаления";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатВыполнения = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("РезультатВыполнения")[0];
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

Функция ЗначенияДляВыбораВидаДокумента(МДОпределяемыйТип) Экспорт
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	ТипыДокументов = МДОпределяемыйТип.Тип.Типы();
	Для каждого ТипДокумента Из ТипыДокументов Цикл
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипДокумента);
		ЗначенияДляВыбора.Добавить(МетаданныеОбъекта.ПолноеИмя(), МетаданныеОбъекта.Синоним);
	КонецЦикла;
	
	Возврат ЗначенияДляВыбора;
	
КонецФункции

Функция ФайлыОжидающиеПодписание(ФайлыДляПроверки) Экспорт
	
	Если ФайлыДляПроверки.Количество() = 0  Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	ФайлыДляПодписания = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФайлыПечатныхФорм", ФайлыДляПроверки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРегистра.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
	|	ТаблицаРегистра.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.ЗапланированныеДействияСФайламиДокументовКЭДО КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ПрисоединенныйФайл В(&ФайлыПечатныхФорм)
	|	И ТаблицаРегистра.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСФайламиДокументовКЭДО.Подписать)";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляПодписания = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Для каждого СтрокаТЗ Из ДанныеДляПодписания Цикл
		ФайлыДляПодписания.Вставить(СтрокаТЗ.ПрисоединенныйФайл, СтрокаТЗ.Исполнитель);
	КонецЦикла;
	
	Возврат ФайлыДляПодписания;

КонецФункции

Функция ТипРеквизитаДокументыПоЗаявкеДокумент(Ссылка, ОписаниеДокумента)

	МДТабличнаяЧасть = Ссылка.Метаданные().ТабличныеЧасти[ОписаниеДокумента.ДокументыПоЗаявкеИмя];
	Возврат Новый ОписаниеТипов(МДТабличнаяЧасть.Реквизиты[ОписаниеДокумента.ДокументыПоЗаявкеДокументИмя].Тип.Типы());

КонецФункции

Процедура УстановитьТекстПоясненияПорядкаВыполненияЗаявкиСДокументамиИОтменой(Форма, ОписаниеДокумента)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	Строка1 = НСтр("ru = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий,';
					|en = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий,'");
	Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
					|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
	ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);

	Если Объект.ВариантИсправления = Перечисления.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена Тогда
		Если Форма.РезультатВыполненияОтменяемойЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
			Строка1 = НСтр("ru = 'Для выполнения заявки необходимо отменить все документы, созданные по отменяемой заявке,';
							|en = 'Для выполнения заявки необходимо отменить все документы, созданные по отменяемой заявке,'");
			Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
							|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
			ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
		Иначе
			ТекстПояснения = НСтр("ru = 'Заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
									|en = 'Заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		КонецЕсли;
	ИначеЕсли Объект.ВариантИсправления = Перечисления.ВариантыИсправленияЗаявокКабинетСотрудника.Перенос Тогда
		Если Форма.РезультатВыполненияОтменяемойЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
			Строка1 = НСтр("ru = 'Для выполнения заявки необходимо исправить или отменить все документы, созданные по отменяемой заявке,  создать новый документ или выбрать уже существующий,';
							|en = 'Для выполнения заявки необходимо исправить или отменить все документы, созданные по отменяемой заявке,  создать новый документ или выбрать уже существующий,'");
			Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
							|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
			ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Форма.ОтменяющаяЗаявка) Тогда
		ТекстПояснения = НСтр("ru = 'Выполнение заявки недоступно. Необходимо выполнить или отклонить отменяющую заявку.';
								|en = 'Выполнение заявки недоступно. Необходимо выполнить или отклонить отменяющую заявку.'");
	КонецЕсли;
	
	Элементы.ДекорацияВыполнениеПояснение.Заголовок = ТекстПояснения;

КонецПроцедуры

Процедура УстановитьДоступностьВыполненияПоСвязаннымЗаявкам(Форма, ОписаниеДокумента) Экспорт
	
	Если Форма.Объект.Выполнена Или Не ОписаниеДокумента.ДоступноОтклонениеЗаявки Тогда
		Возврат;
	КонецЕсли;

	ЗаявкаОтменена = ОписаниеДокумента.ДоступнаОтменаЗаявки И ЗначениеЗаполнено(Форма.ОтменяющаяЗаявка);
	
	ЗаголовокСвязанныеЗаявки = "";
	Если Не ЗаявкаОтменена Тогда
		
		Если Форма.РезультатВыполненияСвязаннойЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
			ЗаголовокСвязанныеЗаявки = Форма.СообщениеСвязаннаяЗаявкаВыполнена;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаЗаявкаОтклонена", "Доступность", Ложь);
		ИначеЕсли Форма.РезультатВыполненияСвязаннойЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена Тогда
			ЗаголовокСвязанныеЗаявки = Форма.СообщениеСвязаннаяЗаявкаОтклонена;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаЗаявкаВыполнена", "Доступность", Ложь);
		КонецЕсли;
		Форма.Элементы.ПояснениеСвязанныеЗаявки.Заголовок = ЗаголовокСвязанныеЗаявки;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаПояснениеСвязанныеЗаявки", "Видимость", Не ПустаяСтрока(ЗаголовокСвязанныеЗаявки));

КонецПроцедуры


#КонецОбласти

#КонецОбласти



