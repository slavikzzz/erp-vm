////////////////////////////////////////////////////////////////////////////////
// Подсистема "Криптография".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет поиска сертификата в хранилище.
Функция НайтиСертификат(Сертификат, ВыполнятьПроверку = Ложь) Экспорт
	
	// сначала ищем сертификаты в новом хранилище
	СертификатПоиска = Новый Структура;
	ДополнитьСвойствоСтруктуры(Сертификат, СертификатПоиска, "Отпечаток");
	ДополнитьСвойствоСтруктуры(Сертификат, СертификатПоиска, "СерийныйНомер");
	ДополнитьСвойствоСтруктуры(Сертификат, СертификатПоиска, "Издатель");
	
	НайденныйСертификат = ХранилищеСертификатов.НайтиСертификат(СертификатПоиска);
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина, Сертификат);

	Если НайденныйСертификат <> Неопределено Тогда
		НайденныйСертификат = Новый Структура(НайденныйСертификат);
		Если ВыполнятьПроверку Тогда
			СертификатДействителен = Истина;
			Попытка
				СервисКриптографии.ПроверитьСертификат(НайденныйСертификат.Сертификат);
			Исключение
				СертификатДействителен = Ложь;
			КонецПопытки;
			НайденныйСертификат.Вставить("Валиден", СертификатДействителен);
		КонецЕсли;
		ДобавитьРеквизитыДляСовместимости(НайденныйСертификат, МестоХраненияКлюча);
	КонецЕсли;
	
	Возврат НайденныйСертификат;
	
КонецФункции

// Выполняет поиска сертификата в хранилище DSS.
Функция НайтиОблачныйСертификат(Сертификат, ВыполнятьПроверку = Ложь, ТолькоЛичный = Ложь) Экспорт
	
	НайденныйСертификат = Неопределено;
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(Перечисления.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись, Неопределено);
	
	// сначала ищем сертификаты в новом хранилище
	СертификатПоиска = Новый Структура;
	ДополнитьСвойствоСтруктуры(Сертификат, СертификатПоиска, "Отпечаток");
	ДополнитьСвойствоСтруктуры(Сертификат, СертификатПоиска, "СерийныйНомер");
	ДополнитьСвойствоСтруктуры(Сертификат, СертификатПоиска, "Издатель");
	
	Если НЕ ТолькоЛичный Тогда
		НайденныйСертификат = НайтиСертификатПолучателя(СертификатПоиска);
	КонецЕсли;
	
	Если ИспользованиеОблачнойПодписиВозможно() И НайденныйСертификат = Неопределено Тогда // ищем в личных
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		СертификатОблака = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СертификатПоиска);
		Если СертификатОблака.Свойство("Отпечаток") Тогда
			СертификатОблака.Отпечаток = НРег(СтрЗаменить(СертификатОблака.Отпечаток, " ", ""));
		КонецЕсли;
		Если СертификатОблака.Свойство("СерийныйНомер") Тогда
			СертификатОблака.СерийныйНомер = НРег(СтрЗаменить(СертификатОблака.СерийныйНомер, " ", ""));
		КонецЕсли;
		
		НашлиОблачныйСертификат = МодульСервисКриптографииDSS.НайтиСертификат(СертификатОблака);
		Если НашлиОблачныйСертификат.Выполнено Тогда
			МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(НашлиОблачныйСертификат.УчетнаяЗапись);
			НайденныйСертификат = НашлиОблачныйСертификат.ДанныеСертификата;
		КонецЕсли;
	КонецЕсли;
	
	Если НайденныйСертификат <> Неопределено Тогда
		НайденныйСертификат = Новый Структура(НайденныйСертификат);
		Если ВыполнятьПроверку Тогда
			РезультатВызова = МодульСервисКриптографииDSS.ПроверитьСертификат(
					КриптографияЭДКОКлиентСервер.ПолучитьУчетнуюЗаписьПодписи(МестоХраненияКлюча),
					НайденныйСертификат.Сертификат);
			НайденныйСертификат.Вставить("Валиден", РезультатВызова.Выполнено И РезультатВызова.Результат);
		КонецЕсли;
		ДобавитьРеквизитыДляСовместимости(НайденныйСертификат, МестоХраненияКлюча);
	КонецЕсли;
	
	Возврат НайденныйСертификат;
	
КонецФункции

Функция ВычислитьИдентификаторСертификата(СерийныйНомер, Издатель) Экспорт
	
	СоответствиеИмяOID = СоответствиеИмяOID();
	Для Каждого Элемент Из Издатель Цикл
		Если СоответствиеИмяOID.Получить(Элемент.Представление) <> Неопределено Тогда
			Элемент.Представление = СоответствиеИмяOID.Получить(Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСертификата(СерийныйНомер, Издатель);
	
КонецФункции

// Выполняет поиск сертификата получателя в хранилище сертификатов БРО
//
// Параметры:
//	Сертификат - Структура - содержит поля для поиска сертификата, например поле ТипСертификата может содержать варианты:
//				MY, AddressBook, CA, ROOT
//
// Возвращаемое значение:
// 	ФиксированнаяСтруктура
//
Функция НайтиСертификатПолучателя(Сертификат) Экспорт
	
	Результат = РегистрыСведений.ХранилищеСертификатовПолучателей.НайтиСертификат(Сертификат);
	Возврат Результат;
	
КонецФункции

// Выполняет добавление сертификата получателя в хранилище сертификатов БРО
//
// Параметры:
//	Сертификат - Структура 
//	ТипХранилища - Строка - тип хранилища
//
// Возвращаемое значение
//	Строка, Неопределено - Идентификатор сертификата в случае успеха
//
Функция ДобавитьСертификатПолучателя(Сертификат, ТипХранилища) Экспорт
	
	Возврат РегистрыСведений.ХранилищеСертификатовПолучателей.ДобавитьСертификат(Сертификат, ТипХранилища);
	
КонецФункции

// Выполняет поиск сертификата получателя в хранилище сертификатов БРО
//
// Параметры:
//	ТипХранилища - Строка - тип хранилища
//
Функция ПолучитьСертификатыПолучателей(ТипХранилища) Экспорт
	
	Результат = РегистрыСведений.ХранилищеСертификатовПолучателей.ПолучитьСертификаты(ТипХранилища);
	Возврат Результат;
	
КонецФункции

// Получает основные свойства переданного сертификата.
// 
// Параметры:
//   Сертификат - ДвоичныеДанные - сертификат, свойства которого необходимо получить.
//
// Возвращаемое значение:
//	 ФиксированнаяСтруктура - свойства сертификата:
//    * Версия - Строка - версия сертификата.
//    * ДатаНачала - Дата - дата начала действия сертификата (UTC).
//    * ДатаОкончания - Дата - дата окончания действия сертификата (UTC).
//    * Издатель - ФиксированнаяСтруктура - информация об издателе сертификата:
//        ** CN - Строка - commonName 
//        ** O - Строка - organizationName; 
//        ** OU - Строка - organizationUnitName; 
//        ** C - Строка - countryName; 
//        ** ST - Строка - stateOrProvinceName; 
//        ** L - Строка - localityName; 
//        ** E - Строка - emailAddress; 
//        ** SN - Строка - surname; 
//        ** GN - Строка - givenName; 
//        ** T - Строка - title;
//        ** STREET - Строка - streetAddress;
//        ** OGRN - Строка - ОГРН;
//        ** OGRNIP - Строка - ОГРНИП;
//        ** INN - Строка - ИНН;
//        ** SNILS - Строка - СНИЛС;
//           ...
//    * ИспользоватьДляПодписи - Булево - указывает, можно ли использовать данный сертификат для подписи.
//    * ИспользоватьДляШифрования - Булево - указывает, можно ли использовать данный сертификат для шифрования.
//    * ОткрытыйКлюч - ДвоичныеДанные - содержит данные открытого ключа.
//    * Отпечаток - ДвоичныеДанные - содержит данные отпечатка. Вычисляется динамически, по алгоритму SHA-1.
//    * РасширенныеСвойства - ФиксированнаяСтруктура -  расширенные свойства сертификата:
//        ** EKU - ФиксированныйМассив - Enhanced Key Usage.
//    * СерийныйНомер - ДвоичныеДанные - серийный номер сертификата.
//    * Субъект - ФиксированнаяСтруктура - информацию о субъекте сертификата. Состав см. Издатель.
//    * Сертификат - ДвоичныеДанные - файл сертификата в кодировке DER.
//    * Идентификатор - Строка - вычисляется по ключевым свойствам Издателя и серийному номеру по алгоритму SHA1.
//                               Используется для идентификации сертификата в сервисе криптографии.
//
Функция ПолучитьСвойстваСертификатаПолучателя(Сертификат) Экспорт
	
	Возврат РегистрыСведений.ХранилищеСертификатовПолучателей.ПолучитьСвойстваСертификата(Сертификат);
	
КонецФункции

// Возвращает алгоритм зашифрованного или подписанного сообщения PKCS#7 либо сертификата X.509.
Функция АлгоритмКриптосообщенияИлиСертификата(
		КриптосообщениеИлиДанныеСертификата,
		ЭтоСертификат = Ложь,
		ЭтоСтрокаBase64 = Ложь,
		МестоХраненияКлюча = Неопределено) Экспорт
		
	Если НЕ ЗначениеЗаполнено(КриптосообщениеИлиДанныеСертификата) Тогда
		Результат = "";
	
	ИначеЕсли ЭтоСертификат Тогда
		Настройки = Новый Структура;
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлюча, Настройки);
		Настройки.Вставить("ЭтоСтрокаBase64",		ЭтоСтрокаBase64);
		
		СвойстваСертификата = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваСертификата(
			КриптосообщениеИлиДанныеСертификата, Настройки);
		
		Результат = СвойстваСертификата.АлгоритмПубличногоКлюча;
		
	Иначе
		Настройки = Новый Структура;
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлюча, Настройки);
		Настройки.Вставить("ПрочитатьПодписанныеДанные", 			Ложь);
		Настройки.Вставить("ПрочитатьИздателяИСерийныйНомер", 		Ложь);
		Настройки.Вставить("ПрочитатьАлгоритмПубличногоКлюча", 		Истина);
		Настройки.Вставить("ЭтоСтрокаBase64", 						ЭтоСтрокаBase64);
		Настройки.Вставить("ВозвращатьИсключения", 					Ложь);
		
		СвойстваКриптосообщения = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(
			КриптосообщениеИлиДанныеСертификата, Настройки);
		
		Если СвойстваКриптосообщения.Тип = "EnvelopedData" И СвойстваКриптосообщения.Получатели.Количество() >= 1 Тогда
			Результат = СвойстваКриптосообщения.Получатели[0].АлгоритмПубличногоКлюча;
		ИначеЕсли СвойстваКриптосообщения.Тип = "SignedData" И СвойстваКриптосообщения.Подписанты.Количество() >= 1 Тогда
			Результат = СвойстваКриптосообщения.Подписанты[0].АлгоритмПодписи;
		Иначе
			Результат = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка(Результат);
	
КонецФункции

// Добавляет сертификат в хранилище сертификатов получателей.
// 
// Параметры:
//   Сертификат - ДвоичныеДанные - файл сертификата.
//              - Строка - адрес файла сертификата во временном хранилище.
//   ТипХранилища - Строка - тип хранилища, в которое необходимо добавить сертификат, возможные варианты: MY
//
Процедура Добавить(Сертификат, ТипХранилища) Экспорт

	Если ТипЗнч(ТипХранилища) = Тип("Строка") Тогда
		ТипХранилища = XMLЗначение(Тип("ПеречислениеСсылка.ТипХранилищаСертификатов"), ТипХранилища);
	КонецЕсли;

	Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
		СертификатДвоичныеДанные = ПолучитьИзВременногоХранилища(Сертификат);
	Иначе
		СертификатДвоичныеДанные = Сертификат;
	КонецЕсли;
		
	СвойстваСертификата = СервисКриптографии.ПолучитьСвойстваСертификата(СертификатДвоичныеДанные);
	
	НаборЗаписей = РегистрыСведений.ХранилищеСертификатов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипХранилища.Установить(ТипХранилища);
	НаборЗаписей.Отбор.Идентификатор.Установить(СвойстваСертификата.Идентификатор);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ТипХранилища  = ТипХранилища;
	НоваяЗапись.Идентификатор = СвойстваСертификата.Идентификатор;	
	НоваяЗапись.ДатаНачала    = СвойстваСертификата.ДатаНачала;
	НоваяЗапись.ДатаОкончания = СвойстваСертификата.ДатаОкончания;
	НоваяЗапись.СерийныйНомер = НРег(СтрЗаменить(СвойстваСертификата.СерийныйНомер, " ", ""));
	НоваяЗапись.Отпечаток     = НРег(СтрЗаменить(СвойстваСертификата.Отпечаток, " ", ""));
	Если СвойстваСертификата.Субъект.Свойство("CN") Тогда
		НоваяЗапись.Наименование  = СвойстваСертификата.Субъект.CN;
	КонецЕсли;

	НоваяЗапись.Сертификат = Новый ХранилищеЗначения(СвойстваСертификата, Новый СжатиеДанных(9));
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Определяет доступность подсистемы облачной подписи в рамках обмена с КО (1С-Отчетность)
//
// Возвращаемое значение:
//	Булево - Возвращает Истина, если база используется во Фреш и включена ФО "ЭлектроннаяОблачнаяПодпись"
//
Функция ИспользованиеОблачнойПодписиВозможно() Экспорт
	
	Результат = Ложь;
	
	Если НЕ РаботаВМоделиСервиса() Тогда
		Результат = Ложь;
		
	ИначеЕсли ДоступнаПодсистемаКриптографииDSS() Тогда
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		Результат = МодульСервисКриптографииDSS.ИспользоватьСервисОблачнойПодписи();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие встроенной подсистемы поддержки облачной криптографии
//
// Возвращаемое значение:
//	Булево - Возвращает Истина, если база используется во Фреш
//
Функция ДоступнаПодсистемаКриптографииDSS() Экспорт
	
	ПредыдущееИмя = "СтандартныеПодсистемы.ЭлектроннаяОблачнаяПодпись";
	
	Результат = ОбщегоНазначения.ПодсистемаСуществует(ПредыдущееИмя)
		ИЛИ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS");
		
	Возврат Результат;
	
КонецФункции

// Определяет режим запуска приложения в коробке или модели сервиса
//
// Возвращаемое значение:
//	Булево - Возвращает Истина, если база используется во Фреш
//
Функция РаботаВМоделиСервиса() Экспорт
	
	Результат = ОбщегоНазначения.РазделениеВключено();
	
	Возврат Результат;
	
КонецФункции

// Получить дополнительные настройки для учетной записи облачной подписи в рамках обмена с КО (1С-Отчетность)
//
// Параметры:
//	УчетнаяЗапись 	- СправочникСсылка.УчетныеЗаписиDSS,
//					- СправочникСсылка.Организация
//
// Возвращаемое значение:
//	Структура 
//		* 
//
Функция ДополнительныеНастройкиОблачнойПодписи(УчетнаяЗапись) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УчетнаяЗапись", Неопределено);
	Результат.Вставить("ОтключитьНапоминание", Ложь);
	Результат.Вставить("ИНН", "");
	Результат.Вставить("СНИЛС", "");
	Результат.Вставить("СрокДействияКлюча", '00010101');
	Результат.Вставить("Телефон", "");
	Результат.Вставить("ЭлектроннаяПочта", "");
	Результат.Вставить("Существует", Ложь);
	Результат.Вставить("ДатаФормирования", Ложь);
	Результат.Вставить("Организация", '00010101');
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаСервисаПодписи.УчетнаяЗапись КАК УчетнаяЗапись,
	|	НастройкиОбменаСервисаПодписи.ОтключитьНапоминание КАК ОтключитьНапоминание,
	|	НастройкиОбменаСервисаПодписи.ИНН КАК ИНН,
	|	НастройкиОбменаСервисаПодписи.СНИЛС КАК СНИЛС,
	|	НастройкиОбменаСервисаПодписи.ОкончаниеДействияВектораАутентификации КАК СрокДействияКлюча,
	|	НастройкиОбменаСервисаПодписи.Телефон КАК Телефон,
	|	НастройкиОбменаСервисаПодписи.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	|	ИСТИНА КАК Существует,
	|	НастройкиОбменаСервисаПодписи.Организация КАК Организация,
	|	НастройкиОбменаСервисаПодписи.ДатаФормирования КАК ДатаФормирования
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСервисаПодписи КАК НастройкиОбменаСервисаПодписи";
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	НастройкиОбменаСервисаПодписи.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", УчетнаяЗапись);
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	НастройкиОбменаСервисаПодписи.УчетнаяЗапись = &УчетнаяЗапись
		|	И НастройкиОбменаСервисаПодписи.Идентификатор = &ИдентификаторСсылки";
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("ИдентификаторСсылки", УчетнаяЗапись.УникальныйИдентификатор());
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаФормирования УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьРеквизитыДляСовместимости(Сертификат, МестоХраненияКлюча)
	
	ПоясСеанса = ЧасовойПоясСеанса();
	
	ДатаНачалаСертификата = Сертификат.ДатаНачала;
	Если ТипЗнч(ДатаНачалаСертификата) = Тип("Дата") Тогда
		ДатаНачалаСертификата = МестноеВремя(ДатаНачалаСертификата, ПоясСеанса);
	КонецЕсли;
	ДатаОкончанияСертификата = Сертификат.ДатаОкончания;
	Если ТипЗнч(ДатаОкончанияСертификата) = Тип("Дата") Тогда
		ДатаОкончанияСертификата = МестноеВремя(ДатаОкончанияСертификата, ПоясСеанса);
	КонецЕсли;
	
	// Поля для совместимости
	Сертификат.Вставить("ДействителенС", ДатаНачалаСертификата);
	Сертификат.Вставить("ДействителенПо", ДатаОкончанияСертификата);
	
	Сертификат.Вставить("Поставщик", КриптографияЭДКОСлужебныйВызовСервера.ПреобразоватьВСтроку(Сертификат.Издатель));
	Сертификат.Вставить("Владелец", КриптографияЭДКОСлужебныйВызовСервера.ПреобразоватьВСтроку(Сертификат.Субъект));
	
	Сертификат.Вставить("Отпечаток", НРег(СтрЗаменить(Сертификат.Отпечаток, " ", "")));
	Сертификат.СерийныйНомер = НРег(СокрЛП(Сертификат.СерийныйНомер));
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, Сертификат);
	
	Возврат Сертификат;
	
КонецФункции

Процедура ДополнитьСвойствоСтруктуры(Донор, Получатель, ИмяСвойства)
	
	Если Донор.Свойство(ИмяСвойства) Тогда
		Получатель.Вставить(ИмяСвойства, Донор[ИмяСвойства]);
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторСертификата(СерийныйНомер, СписокOID)
	
	Ключи = СтрРазделить("2.5.4.3,2.5.4.4,2.5.4.6,2.5.4.7,2.5.4.8,2.5.4.10,2.5.4.11,2.5.4.12,2.5.4.42,1.2.840.113549.1.9.1", ",");
	Свойства = Новый СписокЗначений;
	Для Каждого Элемент Из СписокOID Цикл
		Если Ключи.Найти(Элемент.Представление) <> Неопределено Тогда
			Свойства.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	СерийныйНомерСтрока = НРег(СтрЗаменить(СерийныйНомер, " ", ""));
	
	Свойства.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	МассивЗначений = Свойства.ВыгрузитьЗначения();
	
	МассивЗначений.Добавить(СерийныйНомерСтрока);
	
	ИздательИСерийныйНомер = СтрСоединить(МассивЗначений, "#");
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ИздательИСерийныйНомер);
	
	Возврат НРег(СтрЗаменить(Хеширование.ХешСумма, " ", ""));	
	
КонецФункции

Функция СоответствиеИмяOID()
	
	СоответствиеOID = Новый Соответствие;
	СоответствиеOID.Вставить("CN", "2.5.4.3"); // commonName
	СоответствиеOID.Вставить("C", "2.5.4.6"); // countryName
	СоответствиеOID.Вставить("ST", "2.5.4.8"); // stateOrProvinceName
	СоответствиеOID.Вставить("L", "2.5.4.7"); // localityName
	СоответствиеOID.Вставить("STREET", "2.5.4.9"); // streetAddress
	СоответствиеOID.Вставить("O", "2.5.4.10"); // organizationName
	СоответствиеOID.Вставить("OU", "2.5.4.11"); // organizationUnitName
	СоответствиеOID.Вставить("T", "2.5.4.12"); // title
	СоответствиеOID.Вставить("OGRN", "1.2.643.100.1"); // ОГРН
	СоответствиеOID.Вставить("OGRNIP", "1.2.643.100.5"); // ОГРНИП
	СоответствиеOID.Вставить("SNILS", "1.2.643.100.3"); // СНИЛС
	СоответствиеOID.Вставить("INN", "1.2.643.3.131.1.1"); // ИНН
	СоответствиеOID.Вставить("INNLE", "1.2.643.100.4"); // ИНН ЮЛ
	СоответствиеOID.Вставить("E", "1.2.840.113549.1.9.1"); // emailAddress	
	СоответствиеOID.Вставить("SN", "2.5.4.4"); // surname
	СоответствиеOID.Вставить("GN", "2.5.4.42"); // givenName
	
	Возврат СоответствиеOID;
	
КонецФункции

#КонецОбласти