#Область ПрограммныйИнтерфейс

// Дополняет параметры отражения необходимыми для формирования проводок по данным регламентированного учета.
// 
// Параметры:
// 	 ПараметрыФормированияПроводок - см. МеждународныйУчетПроведениеСервер.ПараметрыФормированияПроводок
//
Процедура ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок) Экспорт
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормированияПроводок.Вставить("ВестиУУНаПланеСчетовХозрасчетный", Константы.ВестиУУНаПланеСчетовХозрасчетный.Получить());
	ПараметрыФормированияПроводок.Вставить("ДатаНачалаУУНаПланеСчетовХозрасчетный", Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить());
	//-- Локализация
КонецПроцедуры

// Выполняет формирование проводок международного учета по данным регламентированного учета.
// 
// Параметры:
// 	ПараметрыФормированияПроводок - Структура - Параметры формирования проводок.
// 	ТаблицаПроводок - ТаблицаЗначений - Таблица, в которую добавляются сформированные проводки.
//
Процедура Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок) Экспорт
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		Возврат;
	КонецЕсли;
	
	#Область ТекстЗапросаПроводокРеглУчетаКОтражениюВМеждународномУчете
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОтражениеДокументовВРеглУчете.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)) В (
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную))
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОтраженВРеглУчете
	|ПОМЕСТИТЬ ДокументыКОтражениюПоДаннымРегл
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|		ПО ДокументыКОтражению.Организация = ОтражениеДокументовВРеглУчете.Организация
	|			И ДокументыКОтражению.Регистратор = ОтражениеДокументовВРеглУчете.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.ДатаОтражения,
	|	ДокументыКОтражению.Регистратор,
	|	ДокументыКОтражению.ПланСчетов,
	|	ДокументыКОтражению.Организация,
	|	ДокументыКОтражению.НастройкаФормированияПроводок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	ДокументыКОтражениюПоДаннымРегл КАК ДокументыКОтражению
	|ГДЕ
	|	НЕ ДокументыКОтражению.ОтраженВРеглУчете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	ДокументыКОтражениюПоДаннымРегл КАК ДокументыКОтражению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|	ПО
	|		ДокументыКОтражению.Регистратор = Хозрасчетный.Регистратор
	|ГДЕ
	|	ДокументыКОтражению.ОтраженВРеглУчете
	|	И Хозрасчетный.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДокументыКОтражению.ПланСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей КАК СпособУчетаНесобственныхЦенностей
	|ПОМЕСТИТЬ ДокументыОтраженныеВРеглУчете
	|ИЗ
	|	ДокументыКОтражениюПоДаннымРегл КАК ДокументыКОтражению
	|ГДЕ
	|	ДокументыКОтражению.ОтраженВРеглУчете
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт,
	|	ХозрасчетныйДвиженияССубконто.НаправлениеДеятельностиДт,
	|	ХозрасчетныйДвиженияССубконто.НаправлениеДеятельностиКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	ХозрасчетныйДвиженияССубконто.СуммаУУ КАК СуммаУУ,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СчетДт.Забалансовый, ЛОЖЬ) КАК ЗабалансовыйДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СчетКт.Забалансовый, ЛОЖЬ) КАК ЗабалансовыйКт
	|ПОМЕСТИТЬ ПроводкиРеглУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			(Регистратор, Организация) В
	|				(ВЫБРАТЬ
	|					ДокументыОтраженныеВРеглУчете.Регистратор,
	|					ДокументыОтраженныеВРеглУчете.Организация
	|				ИЗ
	|					ДокументыОтраженныеВРеглУчете КАК ДокументыОтраженныеВРеглУчете),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	НЕ ХозрасчетныйДвиженияССубконто.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиРеглУчета.Регистратор,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
	|	ПроводкиРеглУчета.Период,
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СубконтоДт1,
	|	ПроводкиРеглУчета.ВидСубконтоДт1,
	|	ПроводкиРеглУчета.СубконтоДт2,
	|	ПроводкиРеглУчета.ВидСубконтоДт2,
	|	ПроводкиРеглУчета.СубконтоДт3,
	|	ПроводкиРеглУчета.ВидСубконтоДт3,
	|	ПроводкиРеглУчета.СчетКт,
	|	ПроводкиРеглУчета.СубконтоКт1,
	|	ПроводкиРеглУчета.ВидСубконтоКт1,
	|	ПроводкиРеглУчета.СубконтоКт2,
	|	ПроводкиРеглУчета.ВидСубконтоКт2,
	|	ПроводкиРеглУчета.СубконтоКт3,
	|	ПроводкиРеглУчета.ВидСубконтоКт3,
	|	ПроводкиРеглУчета.Организация,
	|	ПроводкиРеглУчета.ВалютаДт,
	|	ПроводкиРеглУчета.ВалютаКт,
	|	ПроводкиРеглУчета.ПодразделениеДт,
	|	ПроводкиРеглУчета.ПодразделениеКт,
	|	ПроводкиРеглУчета.НаправлениеДеятельностиДт,
	|	ПроводкиРеглУчета.НаправлениеДеятельностиКт,
	|	ПроводкиРеглУчета.Сумма,
	|	ПроводкиРеглУчета.СуммаУУ,
	|	ПроводкиРеглУчета.ВалютнаяСуммаДт,
	|	ПроводкиРеглУчета.ВалютнаяСуммаКт,
	|	ПроводкиРеглУчета.КоличествоДт,
	|	ПроводкиРеглУчета.КоличествоКт,
	|	ДокументыОтраженныеВРеглУчете.ПланСчетов КАК ПланСчетов,
	|	ДокументыОтраженныеВРеглУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ПроводкиРеглУчетаДляОбработки
	|ИЗ
	|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтраженныеВРеглУчете КАК ДокументыОтраженныеВРеглУчете
	|		ПО ПроводкиРеглУчета.Регистратор = ДокументыОтраженныеВРеглУчете.Регистратор
	|			И ПроводкиРеглУчета.Организация = ДокументыОтраженныеВРеглУчете.Организация
	|			И НАЧАЛОПЕРИОДА(ПроводкиРеглУчета.Период, ДЕНЬ) = ДокументыОтраженныеВРеглУчете.ДатаОтражения
	|ГДЕ
	|	(НЕ ПроводкиРеглУчета.ЗабалансовыйДт И НЕ ПроводкиРеглУчета.ЗабалансовыйКт)
	|	ИЛИ ДокументыОтраженныеВРеглУчете.СпособУчетаНесобственныхЦенностей = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ОтражаютсяНаЗабалансовыхСчетах)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ПроводкиРеглУчетаДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПроводкиРеглУчетаДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПроводкиРеглУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыКОтражениюПоДаннымРегл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОтраженныеВРеглУчете
	|";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументыОжидаютОтраженияВРеглУчете = РезультатыЗапросов[1].Выбрать();
	Пока ВыборкаДокументыОжидаютОтраженияВРеглУчете.Следующий() Цикл
		Проводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(Проводка, ВыборкаДокументыОжидаютОтраженияВРеглУчете);
		МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете);
		МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, НСтр("ru = 'Для отражения в международном учете документ предварительно необходимо отразить в регл.';
																				|en = 'To record the document in international accounting, record it in compl. accounting first '"));
		МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;
	
	ВыборкаДокументыОтраженныеВРеглУчетеБезПроводок = РезультатыЗапросов[2].Выбрать();
	Пока ВыборкаДокументыОтраженныеВРеглУчетеБезПроводок.Следующий() Цикл
		Проводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(Проводка, ВыборкаДокументыОтраженныеВРеглУчетеБезПроводок);
		МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
		МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;

	ПроводкиРеглУчета = РезультатыЗапросов[6].Выгрузить(); // ТаблицаЗначений - 
	ПроводкиРеглУчета.Индексы.Добавить("Регистратор, НомерСтроки");

	Если ПроводкиРеглУчета.Количество() Тогда
		ТранслироватьПроводкиПоСоответствиямОборотов(ПроводкиРеглУчета, ТаблицаПроводок, ПараметрыФормированияПроводок);
	КонецЕсли;
	
	Если ПроводкиРеглУчета.Количество() Тогда
		ТранслироватьПроводкиПоСоответствиямСчетов(ПроводкиРеглУчета, ТаблицаПроводок, ПараметрыФормированияПроводок);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Дополняет таблицы регистрации документа к отражению в международном учете по данным регистрации к отражению в регламентированного.
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, который проводится.
// 	ДополнительныеСвойстваОбъекта - Структура - Дополнительные свойства объекта
// 	ДополнительныеСвойстваРегистра - Структура - Дополнительные свойства РС ОтражениеДокументовВМеждународномУчете.
// 	ТаблицаРегистрации - ТаблицаЗначений - Таблица с данными регистрации к отражению, которую необходимо дополнить:
// 	                      * Период - Дата - период регистрации (дата документа);
// 	                      * Организация - СправочникСсылка.Организации - организация по которой документ формирует проводки;
// 	                      * ДатаОтражения - Дата - дата, на которую документ формирует проводки;
// 	                      * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - отражаемая хозяйственная операция.
// 	ВыборочнаяРегистрация - Булево - Признак выборочной регистрации документа к отражению в учете.
// 	                                 Установить Истина, если статус "К отражению" необходимо установить только по выбранным организациям и датам.
// 	                                 При этом по остальным статус оставить неизменным.
// 	ТаблицаВыборочнойРегистрации - ТаблицаЗначений - Таблица дат и организаций, по которым надо установить статус "К отражению":
// 	                      * Организация - СправочникСсылка.Организации - организация по которой документ формирует проводки;
// 	                      * ДатаОтражения - Дата - дата, на которую документ формирует проводки.
//
Процедура ДополнитьТаблицыРегистрацииКОтражению(Объект, ДополнительныеСвойстваОбъекта, ДополнительныеСвойстваРегистра, ТаблицаРегистрации, ВыборочнаяРегистрация, ТаблицаВыборочнойРегистрации) Экспорт
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтражениеДокументовВРеглУчете = Неопределено;
	ПереданаТаблицаТаблицаОтражениеДокументовВРеглУчете = 
		ДополнительныеСвойстваРегистра.Свойство("ТаблицаОтражениеДокументовВРеглУчете", ТаблицаОтражениеДокументовВРеглУчете);
	
	НеРегистрироватьКОтражениюВРеглУчете = Ложь;
	Если ДополнительныеСвойстваОбъекта.Свойство("НеРегистрироватьКОтражениюВРеглУчете") Тогда
		НеРегистрироватьКОтражениюВРеглУчете = ДополнительныеСвойстваОбъекта.НеРегистрироватьКОтражениюВРеглУчете;
	КонецЕсли;
	
	Если ПереданаТаблицаТаблицаОтражениеДокументовВРеглУчете  Тогда 
		// В модуле менеджера была подготовлена таблица данных для регистрации.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОтражениеДокументовВРеглУчете, ТаблицаРегистрации);
	ИначеЕсли НеРегистрироватьКОтражениюВРеглУчете Тогда
		// Таблица регистрации пустая
	Иначе
		// Документ регистрируется общим порядком:
		// - датой документа
		// - по организации документа.
		НоваяСтрока = ТаблицаРегистрации.Добавить();
		НоваяСтрока.Период         = Объект.Дата;
		НоваяСтрока.Организация    = Объект.Организация;
		НоваяСтрока.ДатаОтражения  = НачалоДня(Объект.Дата);
	КонецЕсли;
	
	Если ДополнительныеСвойстваРегистра.Свойство("ВыборочнаяРегистрацияКОтражениюВРеглУчете")
		 И ДополнительныеСвойстваРегистра.ВыборочнаяРегистрацияКОтражениюВРеглУчете Тогда
		ВыборочнаяРегистрация = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ДополнительныеСвойстваРегистра.ТаблицаВыборочнойРегистрацииКОтражениюВРеглУчете,
			ТаблицаВыборочнойРегистрации);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Выполняет проверку наличия настроенных соответствий счетов, необходимых для отражения документов. 
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу ДокументыКОтражению:
// 	              * Документ - ДокументСсылка - 
// 	              * Организация - СправочникСсылка.Организации - 
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета -
// 	ПараметрыПроверки - См. Обработки.ОтражениеДокументовВМеждународномУчете.ПараметрыПроверкиПравилОтражения
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица необходимых настроек:
// 	              * Счет - ПланСчетовСсылка -
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - 
// 	              * Комментарий - Строка -
//
Функция ПроверитьПравилаОтражения(МенеджерВременныхТаблиц, ПараметрыПроверки) Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		Возврат ТаблицаОшибок;
	КонецЕсли;
	
	ТаблицаОшибок.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("ПланСчетов", Новый ОписаниеТипов("СправочникСсылка.ПланыСчетовМеждународногоУчета"));
	ТаблицаОшибок.Колонки.Добавить("НастройкаФормированияПроводок", Новый ОписаниеТипов("СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета"));
	ТаблицаОшибок.Индексы.Добавить("Счет, ПланСчетов, НастройкаФормированияПроводок");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияСчетовМеждународногоУчетаТребующиеНастройки.ПланСчетов КАК ПланСчетов,
	|	СоответствияСчетовМеждународногоУчетаТребующиеНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СоответствияСчетовМеждународногоУчетаТребующиеНастройки.СчетУчета КАК Счет
	|ИЗ
	|	РегистрСведений.СоответствияСчетовМеждународногоУчетаТребующиеНастройки КАК СоответствияСчетовМеждународногоУчетаТребующиеНастройки
	|	
	|ГДЕ
	|	(ПланСчетов, НастройкаФормированияПроводок, Документ) В
	|		(ВЫБРАТЬ
	|			ДокументыКОтражению.ПланСчетов,
	|			ДокументыКОтражению.НастройкаФормированияПроводок,
	|			ДокументыКОтражению.Регистратор
	|		ИЗ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		)
	|";
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОшибок.Сортировать("Счет, ПланСчетов, НастройкаФормированияПроводок");
	//-- Локализация
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// Вызывает отражение документа в регламентированном учете.
// 
// Параметры:
// 	РеквизитыДокумента - Структура - Реквизиты документа, который необходимо отразить:
// 	                     * Ссылка - ДокументСсылка - Ссылка на документ;
// 	                     * Дата - Дата - Дата документа;
// 	                     * Организация - СправочникСсылка.Организации - Дата документа.
//
Процедура ОтразитьДокументВРеглУчете(РеквизитыДокумента) Экспорт
	//++ Локализация
	РеглУчетПроведениеСервер.ОтразитьДокумент(РеквизитыДокумента);
	//-- Локализация
КонецПроцедуры

// Заполняет таблицу документами, требующими отражения и формирующими проводки регламентированного учета по определенному счету.
// 
// Параметры:
// 	ТаблицаДокументов - ТаблицаЗначений - Заполняемая таблица значений:
// 						Колонки:
// 						* Документ - ДокументСсылка - Ссылка на документ;
// 						* Дата - Дата - Дата документа;
// 						* Организация - СправочникСсылка.Организации - Организация, по которой документ формирует проводки регл. учета;
// 						* Комментарий - Строка - Комментарий к статусу отражения документа в международном учете;
// 	Счет - ПланСчетовСсылка - Счет регламентированного учета, по которому необходимо отобрать проводки документов.
// 	НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - Настройка формирования проводок для отбора документов.
// 	Организация - СправочникСсылка.Организации - Организация для отбора документов.
//
Процедура ЗаполнитьТаблицуДокументовПоСчету(ТаблицаДокументов, Счет, НастройкаФормированияПроводок, Организация) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Дата,
	|	ДокументыКОтражению.Регистратор КАК Документ,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК ПериодНастройкиФормированияПроводок
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДокументыКОтражению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО
	|		ДокументыКОтражению.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ДокументыКОтражению.Период >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|ГДЕ
	|	ДокументыКОтражению.Организация = &Организация
	|	И ДокументыКОтражению.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете))
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.Период,
	|	ДокументыКОтражению.Регистратор,
	|	ДокументыКОтражению.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ПроводкиДокументов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			(Организация, Период, Регистратор) В
	|				(ВЫБРАТЬ
	|					ДокументыКОтражению.Организация,
	|					ДокументыКОтражению.Дата,
	|					ДокументыКОтражению.Документ
	|				ИЗ
	|					ДокументыКОтражению КАК ДокументыКОтражению),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	(ХозрасчетныйДвиженияССубконто.СчетДт = &Счет
	|			ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт = &Счет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Дата,
	|	ДокументыКОтражению.Документ,
	|	ДокументыКОтражению.Организация,
	|	ОтражениеДокументовВМеждународномУчете.Комментарий
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПроводкиДокументов КАК ПроводкиДокументов
	|		ПО 
	|			ДокументыКОтражению.Документ = ПроводкиДокументов.Регистратор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|		ПО
	|			ДокументыКОтражению.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|			И ДокументыКОтражению.ПериодНастройкиФормированияПроводок = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|			И НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|		ПО
	|			ДокументыКОтражению.Организация = ОтражениеДокументовВМеждународномУчете.Организация
	|			И ДокументыКОтражению.Дата = ОтражениеДокументовВМеждународномУчете.Период
	|			И ДокументыКОтражению.Документ = ОтражениеДокументовВМеждународномУчете.Регистратор";
	
	Запрос.УстановитьПараметр("Счет",            Счет);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Запрос.УстановитьПараметр("Организация",     Организация);
	
	ТаблицаДокументов.Загрузить(Запрос.Выполнить().Выгрузить());
	//-- Локализация
	
КонецПроцедуры

// Выполняет проверку правил отражения перед их записью в регистр ПравилаОтраженияВМеждународномУчете.
//
// Параметры:
// 	ПравилаОтраженияВМеждународномУчете - ТаблицаЗначений - Выгрузка набора записей регистра ПравилаОтраженияВМеждународномУчете.
// 	Отказ - Булево - Признак отказа записи, устанавливается в случае ошибки.
//
Процедура ПередЗаписьюПравилОтражения(ПравилаОтраженияВМеждународномУчете, Отказ) Экспорт

	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныПроводок.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ШаблоныПроводок.ШаблонПроводки КАК ШаблонПроводки
	|ПОМЕСТИТЬ ШаблоныПроводок
	|ИЗ 
	|	&ШаблоныПроводок КАК ШаблоныПроводок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШаблонПроводки
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныПроводок.НастройкаФормированияПроводок.Владелец КАК ПланСчетов,
	|	ШаблоныПроводок.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ШаблоныПроводок.ШаблонПроводки КАК ШаблонПроводки,
	|	ДанныеСправочника.СчетРеглУчета КАК СчетРеглУчета
	|ПОМЕСТИТЬ СчетаРеглУчета 
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СоответствияСчетовМеждународногоУчета КАК ДанныеСправочника
	|	ПО
	|		ШаблоныПроводок.ШаблонПроводки = ДанныеСправочника.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРеглУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаРеглУчета.ШаблонПроводки КАК СоответствиеСчетов,
	|	СчетаРеглУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	СчетаРеглУчета КАК СчетаРеглУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СчетаРеглУчетаИгнорируемыеПриОтраженииВМеждународномУчете КАК ИгнорируемыеСчета
	|	ПО
	|		СчетаРеглУчета.НастройкаФормированияПроводок = ИгнорируемыеСчета.НастройкаФормированияПроводок
	|		И СчетаРеглУчета.СчетРеглУчета = ИгнорируемыеСчета.СчетРеглУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаРеглУчета.ПланСчетов КАК ПланСчетов,
	|	СчетаРеглУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаРеглУчета.СчетРеглУчета КАК СчетУчета
	|ИЗ
	|	СчетаРеглУчета КАК СчетаРеглУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ШаблоныПроводок.НастройкаФормированияПроводок.Владелец КАК ПланСчетов,
	|	ШаблоныПроводок.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДанныеСправочника.СчетРеглУчетаДт КАК СчетУчета
	|ИЗ 
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СоответствияОборотовМеждународногоУчета КАК ДанныеСправочника
	|	ПО
	|		ШаблоныПроводок.ШаблонПроводки = ДанныеСправочника.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ШаблоныПроводок.НастройкаФормированияПроводок.Владелец КАК ПланСчетов,
	|	ШаблоныПроводок.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДанныеСправочника.СчетРеглУчетаКт КАК СчетУчета
	|ИЗ 
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СоответствияОборотовМеждународногоУчета КАК ДанныеСправочника
	|	ПО
	|		ШаблоныПроводок.ШаблонПроводки = ДанныеСправочника.Ссылка
	|";
	
	Запрос.УстановитьПараметр("ШаблоныПроводок", ПравилаОтраженияВМеждународномУчете);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоИгнорируемымСчетам = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаПоИгнорируемымСчетам.Следующий() Цикл
		ТекстСообщения = 
			СтрШаблон(НСтр("ru = 'Счет регл. учета, указанный в соответствии ""%1"", игнорируется в настройке ""%2"".';
							|en = 'Local accounting account specified in accordance with ""%1"" is ignored in setting ""%2"".'"),
				ВыборкаПоИгнорируемымСчетам.СоответствиеСчетов, 
				ВыборкаПоИгнорируемымСчетам.НастройкаФормированияПроводок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
	Если Не Отказ Тогда
		ВыборкаПравилаОтражения =  РезультатыЗапроса[3].Выбрать();
		Пока ВыборкаПравилаОтражения.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СоответствияСчетовМеждународногоУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПланСчетов.Установить(ВыборкаПравилаОтражения.ПланСчетов);
			НаборЗаписей.Отбор.НастройкаФормированияПроводок.Установить(ВыборкаПравилаОтражения.НастройкаФормированияПроводок);
			НаборЗаписей.Отбор.СчетУчета.Установить(ВыборкаПравилаОтражения.СчетУчета);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	//++ Локализация
	#Область СверкаОборотовМУиБУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаОборотовМУиБУ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	#Область СоответствиеСчетовМеждународногоИРегламентированногоУчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СоответствиеСчетовМеждународногоИРегламентированногоУчета);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Показывает использование счетов учета в настройках соответствия счетов и оборотов
		|международного и регламентированного учета';
		|en = 'Covers using accounting accounts in account and turnover correlation settings
		| of international and local accounting'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СоответствиеСчетовМеждународногоИРегламентированногоУчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Показывает использование счетов учета в настройках соответствия счетов и оборотов
		|международного и регламентированного учета';
		|en = 'Covers using accounting accounts in account and turnover correlation settings
		| of international and local accounting'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СоответствиеСчетовМеждународногоИРегламентированногоУчетаКонтекст");
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область ОтражениеВМеждународномУчетеПоДаннымРегламентированного

Процедура ТранслироватьПроводкиПоСоответствиямОборотов(ПроводкиРеглУчета, ТаблицаПроводок, ПараметрыФормированияПроводок)

	#Область ТекстЗапросаДанныеТрансляцииОборотовРеглУчета
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СчетКт,
	|	ПроводкиРеглУчета.НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ПроводкиРеглУчета
	|ИЗ
	|	&ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеОборотов.Ссылка,
	|	СоответствиеОборотов.ЭтоГруппа,
	|	СоответствиеОборотов.СчетРеглУчетаДт,
	|	СоответствиеОборотов.СчетРеглУчетаКт,
	|	СоответствиеОборотов.ДополнительныйОтбор,
	|	СоответствиеОборотов.СчетМеждународногоУчетаДт,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаДт.Валютный, ЛОЖЬ) КАК СчетМеждународногоУчетаДтВалютный,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаДт.Количественный, ЛОЖЬ) КАК СчетДтКоличественный,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаДт.УчетПоПодразделениям, ЛОЖЬ) КАК УчетПоПодразделениямДт,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаДт.УчетПоНаправлениямДеятельности, ЛОЖЬ) КАК УчетПоНаправлениямДт,
	|	ВидыСубконтоДт1.ВидСубконто КАК ВидСубконтоДт1,
	|	ВидыСубконтоДт2.ВидСубконто КАК ВидСубконтоДт2,
	|	ВидыСубконтоДт3.ВидСубконто КАК ВидСубконтоДт3,
	|	СоответствиеОборотов.СчетМеждународногоУчетаКт,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаКт.Валютный, ЛОЖЬ) КАК СчетМеждународногоУчетаКтВалютный,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаКт.Количественный, ЛОЖЬ) КАК СчетКтКоличественный,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаКт.УчетПоПодразделениям, ЛОЖЬ) КАК УчетПоПодразделениямКт,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаКт.УчетПоНаправлениямДеятельности, ЛОЖЬ) КАК УчетПоНаправлениямКт,
	|	ВидыСубконтоКт1.ВидСубконто КАК ВидСубконтоКт1,
	|	ВидыСубконтоКт2.ВидСубконто КАК ВидСубконтоКт2,
	|	ВидыСубконтоКт3.ВидСубконто КАК ВидСубконтоКт3,
	|	СоответствиеОборотов.УстановленДополнительныйОтбор,
	|	СоответствиеОборотов.ВариантСовместногоПрименения,
	|	СоответствиеОборотов.РучноеУточнениеПроводки,
	|	СоответствиеОборотов.НеОтражаетсяВМеждународномУчете,
	|	ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок,
	|	ВидыСубконтоРеглДт1.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРеглДт1,
	|	ВидыСубконтоРеглДт2.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРеглДт2,
	|	ВидыСубконтоРеглДт3.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРеглДт3,
	|	ВидыСубконтоРеглКт1.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРеглКт1,
	|	ВидыСубконтоРеглКт2.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРеглКт2,
	|	ВидыСубконтоРеглКт3.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРеглКт3,
	|	ВидыСубконтоДт1.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоДт1,
	|	ВидыСубконтоДт2.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоДт2,
	|	ВидыСубконтоДт3.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоДт3,
	|	ВидыСубконтоКт1.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоКт1,
	|	ВидыСубконтоКт2.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоКт2,
	|	ВидыСубконтоКт3.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоКт3
	|ИЗ
	|	Справочник.СоответствияОборотовМеждународногоУчета КАК СоответствиеОборотов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВМеждународномУчете
	|		ПО (ПравилаОтраженияВМеждународномУчете.ШаблонПроводки = СоответствиеОборотов.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоДт1
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаДт = ВидыСубконтоДт1.Ссылка
	|			И (ВидыСубконтоДт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоДт2
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаДт = ВидыСубконтоДт2.Ссылка
	|			И (ВидыСубконтоДт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоДт3
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаДт = ВидыСубконтоДт3.Ссылка
	|			И (ВидыСубконтоДт3.НомерСтроки = 3)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоКт1
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаКт = ВидыСубконтоКт1.Ссылка
	|			И (ВидыСубконтоКт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоКт2
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаКт = ВидыСубконтоКт2.Ссылка
	|			И (ВидыСубконтоКт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоКт3
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаКт = ВидыСубконтоКт3.Ссылка
	|			И (ВидыСубконтоКт3.НомерСтроки = 3)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|		ПО ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок = ПроводкиРеглУчета.НастройкаФормированияПроводок
	|			И СоответствиеОборотов.СчетРеглУчетаДт = ПроводкиРеглУчета.СчетДт
	|			И СоответствиеОборотов.СчетРеглУчетаКт = ПроводкиРеглУчета.СчетКт
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоРеглДт1
	|		ПО СоответствиеОборотов.СчетРеглУчетаДт = ВидыСубконтоРеглДт1.Ссылка
	|			И ВидыСубконтоРеглДт1.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоРеглДт2
	|		ПО СоответствиеОборотов.СчетРеглУчетаДт = ВидыСубконтоРеглДт2.Ссылка
	|			И ВидыСубконтоРеглДт2.НомерСтроки = 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоРеглДт3
	|		ПО СоответствиеОборотов.СчетРеглУчетаДт = ВидыСубконтоРеглДт3.Ссылка
	|			И ВидыСубконтоРеглДт3.НомерСтроки = 3
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоРеглКт1
	|		ПО СоответствиеОборотов.СчетРеглУчетаКт = ВидыСубконтоРеглКт1.Ссылка
	|			И ВидыСубконтоРеглКт1.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоРеглКт2
	|		ПО СоответствиеОборотов.СчетРеглУчетаКт = ВидыСубконтоРеглКт2.Ссылка
	|			И ВидыСубконтоРеглКт2.НомерСтроки = 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоРеглКт3
	|		ПО СоответствиеОборотов.СчетРеглУчетаКт = ВидыСубконтоРеглКт3.Ссылка
	|			И ВидыСубконтоРеглКт3.НомерСтроки = 3
	|ГДЕ
	|	НЕ СоответствиеОборотов.ПометкаУдаления
	|	И НЕ ПроводкиРеглУчета.НастройкаФормированияПроводок ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеОборотов.РеквизитДопУпорядочивания ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗаполненияСубконтоСоответствий.Ссылка КАК СоответствиеОборотов,
	|	НастройкиЗаполненияСубконтоСоответствий.ПоложениеСубконто,
	|	НастройкиЗаполненияСубконтоСоответствий.ВидСубконто,
	|	НастройкиЗаполненияСубконтоСоответствий.ЗаполнятьИзИсточника,
	|	НастройкиЗаполненияСубконтоСоответствий.УказанноеЗначение,
	|	НастройкиЗаполненияСубконтоСоответствий.Выражение
	|ИЗ
	|	Справочник.СоответствияОборотовМеждународногоУчета.НастройкиЗаполненияСубконто КАК НастройкиЗаполненияСубконтоСоответствий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствияОборотовМеждународногоУчета КАК СоответствияОборотов
	|		ПО НастройкиЗаполненияСубконтоСоответствий.Ссылка = СоответствияОборотов.Ссылка
	|			И (НЕ СоответствияОборотов.ПометкаУдаления)";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроводкиРеглУчета", ПроводкиРеглУчета);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СоответствияОборотов = РезультатЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	НастройкиЗаполненияСубконто = РезультатЗапроса[2].Выгрузить(); // ТаблицаЗначений - 
	НастройкиЗаполненияСубконто.Индексы.Добавить("СоответствиеОборотов");
	
	ПараметрыТрансляции = Новый Структура;
	ПараметрыТрансляции.Вставить("СоответствияОборотов", СоответствияОборотов.Строки);
	ПараметрыТрансляции.Вставить("НастройкиЗаполненияСубконто", НастройкиЗаполненияСубконто);
	ПараметрыТрансляции.Вставить("ВариантСовместногоПрименения", Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение);
	ПараметрыТрансляции.Вставить("ДополнительныйОтборГруппы", Неопределено);
	ПараметрыТрансляции.Вставить("ПараметрыФормированияПроводок", ПараметрыФормированияПроводок);
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхРеглУчета(ПроводкиРеглУчета);
	
	ОбработанныеПроводки = Новый Соответствие;
	
	ТранслироватьПроводкиПоСоответствиямОборотовРекурсивно(
		СхемаКомпоновкиДанных,
		ПроводкиРеглУчета, 
		ПараметрыТрансляции,
		ТаблицаПроводок,
		ОбработанныеПроводки);

КонецПроцедуры

Процедура ТранслироватьПроводкиПоСоответствиямОборотовРекурсивно(СхемаКомпоновкиДанных, ПроводкиРеглУчета, ПараметрыТрансляции, ТаблицаПроводок, ОбработанныеПроводки)
	
	СоответствияОборотов = ПараметрыТрансляции.СоответствияОборотов;
	ВариантСовместногоПрименения = ПараметрыТрансляции.ВариантСовместногоПрименения;
	ДополнительныйОтборГруппы = ПараметрыТрансляции.ДополнительныйОтборГруппы;
	НастройкиЗаполненияСубконто = ПараметрыТрансляции.НастройкиЗаполненияСубконто;
	
	ПараметрыФормированияПроводок = ПараметрыТрансляции.ПараметрыФормированияПроводок; // см. МеждународныйУчетПроведениеСервер.ПараметрыФормированияПроводок
	СтруктураПроводки = ПараметрыФормированияПроводок.СтруктураПроводки;
	
	Для каждого СоответствиеОборотов Из СоответствияОборотов Цикл
		
		Если СоответствиеОборотов.ЭтоГруппа Тогда
			ВариантСовместногоПримененияГруппы = СоответствиеОборотов.ВариантСовместногоПрименения;
			Если СоответствиеОборотов.УстановленДополнительныйОтбор Тогда
				ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
				КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
					СхемаКомпоновкиДанных, ДополнительныйОтбор, СоответствиеОборотов.ДополнительныйОтбор.Получить()); 
				Если ДополнительныйОтборГруппы <> Неопределено Тогда
					КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
						СхемаКомпоновкиДанных, ДополнительныйОтбор, ДополнительныйОтборГруппы);
				КонецЕсли;
			КонецЕсли;
			ПараметрыТрансляцииГруппы = Новый Структура;
			ПараметрыТрансляцииГруппы.Вставить("СоответствияОборотов", СоответствиеОборотов.Строки);
			ПараметрыТрансляцииГруппы.Вставить("ВариантСовместногоПрименения", ВариантСовместногоПримененияГруппы);
			ПараметрыТрансляцииГруппы.Вставить("ДополнительныйОтборГруппы", ДополнительныйОтбор);
			ПараметрыТрансляцииГруппы.Вставить("НастройкиЗаполненияСубконто", НастройкиЗаполненияСубконто);
			ПараметрыТрансляцииГруппы.Вставить("ПараметрыФормированияПроводок", ПараметрыФормированияПроводок);
			
			ТранслироватьПроводкиПоСоответствиямОборотовРекурсивно(
				СхемаКомпоновкиДанных, 
				ПроводкиРеглУчета, 
				ПараметрыТрансляцииГруппы, 
				ТаблицаПроводок,
				ОбработанныеПроводки);
		Иначе
			
			Настройки = Новый НастройкиКомпоновкиДанных;
			НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "Регистратор");
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "НомерСтроки");
			
			УстановитьЗаполнениеСубконтоПоСоответствиюОборотов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеОборотов, 
				НастройкиЗаполненияСубконто);
				
			УстановитьОтборПроводокПоСоответствиюОборотов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеОборотов, 
				ДополнительныйОтборГруппы);
			
			ВнешниеНаборы = Новый Структура;
			ВнешниеНаборы.Вставить("ТаблицаДанных", ПроводкиРеглУчета);
			
			Попытка
				РезультатТрансляцииОборота = 
					ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
			Исключение
				ТекстСообщения = Символы.ПС + НСтр("ru = 'Не удалось получить данные для отражения оборота по соответствию ""%ОборотМежд%""
											|по причине';
											|en = 'Cannot get data to record turnover by ""%ОборотМежд%""
											|due to'") + ":" + Символы.ПС + Символы.Таб + "%Причина%";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОборотМежд%", СоответствиеОборотов.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'Возможно в соответствии оборота установлены некорректные настройки дополнительного отбора или заполнения субконто.';
							|en = 'Turnover mapping may have incorrect settings of filling additional filter and extra dimension.'");
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
				
			ИсключаемыеПоля = ИсключаемыеПоля(СоответствиеОборотов);
			Для каждого Строка Из РезультатТрансляцииОборота Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Регистратор", Строка.Регистратор);
				Отбор.Вставить("НомерСтроки", Строка.НомерСтроки);
				ПроводкаРеглУчета = ПроводкиРеглУчета.НайтиСтроки(Отбор)[0];
				
				ОбработанныеПроводки.Вставить(ПроводкаРеглУчета);
				
				Если Не СоответствиеОборотов.НеОтражаетсяВМеждународномУчете Тогда
					Проводка = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПроводки);
					
					ЗаполнитьЗначенияСвойств(Проводка, ПроводкаРеглУчета, , ИсключаемыеПоля);
					ЗаполнитьЗначенияСвойств(Проводка, СоответствиеОборотов);
					
					Проводка.СоответствиеОборотов = СоответствиеОборотов.Ссылка;
					
					Проводка.СчетДт = СоответствиеОборотов.СчетМеждународногоУчетаДт;
					Проводка.СубконтоДт1 = Строка.СубконтоМеждународныйДт1;
					Проводка.СубконтоДт2 = Строка.СубконтоМеждународныйДт2;
					Проводка.СубконтоДт3 = Строка.СубконтоМеждународныйДт3;
					
					Проводка.СчетКт = СоответствиеОборотов.СчетМеждународногоУчетаКт;
					Проводка.СубконтоКт1 = Строка.СубконтоМеждународныйКт1;
					Проводка.СубконтоКт2 = Строка.СубконтоМеждународныйКт2;
					Проводка.СубконтоКт3 = Строка.СубконтоМеждународныйКт3;
					
					УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(ПроводкаРеглУчета.ПланСчетов, ПроводкаРеглУчета.Организация);
					ФункциональнаяСумма = ФункциональнаяСумма(ПроводкаРеглУчета, ПараметрыФормированияПроводок, УчетныеВалютыНаПланеСчетов); 
					Проводка.Сумма = ФункциональнаяСумма.Сумма;
					Проводка.ВалютаХраненияСуммыФункциональной = ФункциональнаяСумма.Валюта;
					Проводка.ВалютаФункциональная = УчетныеВалютыНаПланеСчетов.Функциональная;
					
					СуммаПредставления = СуммаПредставления(ПроводкаРеглУчета, ПараметрыФормированияПроводок, УчетныеВалютыНаПланеСчетов);
					Проводка.СуммаПредставления = СуммаПредставления.Сумма;
					Проводка.ВалютаХраненияСуммыПредставления = СуммаПредставления.Валюта;
					Если СуммаПредставления.Сумма = 0 Тогда
						Проводка.СуммаПредставления = ФункциональнаяСумма.Сумма;
						Проводка.ВалютаХраненияСуммыПредставления = ФункциональнаяСумма.Валюта;
					КонецЕсли;
					Проводка.ВалютаПредставления = УчетныеВалютыНаПланеСчетов.Представления;
					
					ЗаполнитьВалютнуюСумму(Проводка, 
						СоответствиеОборотов.СчетМеждународногоУчетаДтВалютный, 
						СоответствиеОборотов.СчетМеждународногоУчетаКтВалютный);
						
					Если СоответствиеОборотов.РучноеУточнениеПроводки Тогда
						МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, 
							Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
					КонецЕсли;
					
					МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение Тогда
			Для каждого Проводка Из ОбработанныеПроводки Цикл
				ПроводкиРеглУчета.Удалить(Проводка.Ключ);
			КонецЦикла;
			ОбработанныеПроводки.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТранслироватьПроводкиПоСоответствиямСчетов(ПроводкиРеглУчета, ТаблицаПроводок, ПараметрыФормированияПроводок)

	#Область ТекстЗапросаДанныеТрансляцииСчетов
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроводкиРеглУчета.Регистратор,
	|	ПроводкиРеглУчета.НомерСтроки,
	|	ПроводкиРеглУчета.Период,
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СубконтоДт1,
	|	ПроводкиРеглУчета.ВидСубконтоДт1,
	|	ПроводкиРеглУчета.СубконтоДт2,
	|	ПроводкиРеглУчета.ВидСубконтоДт2,
	|	ПроводкиРеглУчета.СубконтоДт3,
	|	ПроводкиРеглУчета.ВидСубконтоДт3,
	|	ПроводкиРеглУчета.СчетКт,
	|	ПроводкиРеглУчета.СубконтоКт1,
	|	ПроводкиРеглУчета.ВидСубконтоКт1,
	|	ПроводкиРеглУчета.СубконтоКт2,
	|	ПроводкиРеглУчета.ВидСубконтоКт2,
	|	ПроводкиРеглУчета.СубконтоКт3,
	|	ПроводкиРеглУчета.ВидСубконтоКт3,
	|	ПроводкиРеглУчета.Организация,
	|	ПроводкиРеглУчета.ВалютаДт,
	|	ПроводкиРеглУчета.ВалютаКт,
	|	ПроводкиРеглУчета.ПодразделениеДт,
	|	ПроводкиРеглУчета.ПодразделениеКт,
	|	ПроводкиРеглУчета.НаправлениеДеятельностиДт,
	|	ПроводкиРеглУчета.НаправлениеДеятельностиКт,
	|	ПроводкиРеглУчета.Сумма,
	|	ПроводкиРеглУчета.Сумма КАК СуммаПредставления,
	|	ПроводкиРеглУчета.ВалютнаяСуммаДт,
	|	ПроводкиРеглУчета.ВалютнаяСуммаКт,
	|	ПроводкиРеглУчета.КоличествоДт,
	|	ПроводкиРеглУчета.КоличествоКт,
	|	ПроводкиРеглУчета.ПланСчетов,
	|	ПроводкиРеглУчета.НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ПроводкиРеглУчета
	|ИЗ
	|	&ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СчетКт,
	|	ПроводкиРеглУчета.НастройкаФормированияПроводок
	|ПОМЕСТИТЬ СчетаПроводокРеглУчета
	|ИЗ
	|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияСчетов.Ссылка КАК Ссылка,
	|	СоответствияСчетов.СчетРеглУчета КАК СчетРеглУчета,
	|	СоответствияСчетов.СчетМеждународногоУчета КАК СчетМеждународногоУчета,
	|	СоответствияСчетов.СчетМеждународногоУчета.Валютный КАК СчетМеждународногоУчетаВалютный,
	|	СоответствияСчетов.СчетМеждународногоУчета.Количественный КАК СчетМеждународногоУчетаКоличественный,
	|	СоответствияСчетов.СчетМеждународногоУчета.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	СоответствияСчетов.СчетМеждународногоУчета.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениям,
	|	СоответствияСчетов.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|	ПравилаОтраженияВУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА ПроводкиРеглУчетаСчетПоДт.СчетДт ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименятьДляСчетаДт,
	|	ВЫБОР
	|		КОГДА ПроводкиРеглУчетаСчетПоКт.СчетКт ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименятьДляСчетаКт,
	|	СоответствияСчетов.РеквизитДопУпорядочивания
	|ПОМЕСТИТЬ ТаблицаСоответствияСчетов
	|ИЗ
	|	Справочник.СоответствияСчетовМеждународногоУчета КАК СоответствияСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВУчете
	|		ПО (ПравилаОтраженияВУчете.ШаблонПроводки = СоответствияСчетов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаПроводокРеглУчета КАК ПроводкиРеглУчетаСчетПоДт
	|		ПО СоответствияСчетов.СчетРеглУчета = ПроводкиРеглУчетаСчетПоДт.СчетДт
	|			И (ПравилаОтраженияВУчете.НастройкаФормированияПроводок = ПроводкиРеглУчетаСчетПоДт.НастройкаФормированияПроводок)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаПроводокРеглУчета КАК ПроводкиРеглУчетаСчетПоКт
	|		ПО СоответствияСчетов.СчетРеглУчета = ПроводкиРеглУчетаСчетПоКт.СчетКт
	|			И (ПравилаОтраженияВУчете.НастройкаФормированияПроводок = ПроводкиРеглУчетаСчетПоКт.НастройкаФормированияПроводок)
	|ГДЕ
	|	НЕ СоответствияСчетов.ПометкаУдаления
	|	И (НЕ ПроводкиРеглУчетаСчетПоДт.СчетДт ЕСТЬ NULL 
	|			ИЛИ НЕ ПроводкиРеглУчетаСчетПоКт.СчетКт ЕСТЬ NULL )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроводкиРеглУчета.Регистратор,
	|	ПроводкиРеглУчета.НомерСтроки,
	|	ПроводкиРеглУчета.Период,
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СубконтоДт1,
	|	ПроводкиРеглУчета.ВидСубконтоДт1,
	|	ПроводкиРеглУчета.СубконтоДт2,
	|	ПроводкиРеглУчета.ВидСубконтоДт2,
	|	ПроводкиРеглУчета.СубконтоДт3,
	|	ПроводкиРеглУчета.ВидСубконтоДт3,
	|	ПроводкиРеглУчета.СчетКт,
	|	ПроводкиРеглУчета.СубконтоКт1,
	|	ПроводкиРеглУчета.ВидСубконтоКт1,
	|	ПроводкиРеглУчета.СубконтоКт2,
	|	ПроводкиРеглУчета.ВидСубконтоКт2,
	|	ПроводкиРеглУчета.СубконтоКт3,
	|	ПроводкиРеглУчета.ВидСубконтоКт3,
	|	ПроводкиРеглУчета.Организация,
	|	ПроводкиРеглУчета.ВалютаДт,
	|	ПроводкиРеглУчета.ВалютаКт,
	|	ПроводкиРеглУчета.ПодразделениеДт,
	|	ПроводкиРеглУчета.ПодразделениеКт,
	|	ПроводкиРеглУчета.НаправлениеДеятельностиДт,
	|	ПроводкиРеглУчета.НаправлениеДеятельностиКт,
	|	ПроводкиРеглУчета.Сумма,
	|	ПроводкиРеглУчета.Сумма КАК СуммаПредставления,
	|	ПроводкиРеглУчета.ВалютнаяСуммаДт,
	|	ПроводкиРеглУчета.ВалютнаяСуммаКт,
	|	ПроводкиРеглУчета.КоличествоДт,
	|	ПроводкиРеглУчета.КоличествоКт,
	|	ПроводкиРеглУчета.ПланСчетов,
	|	ПроводкиРеглУчета.НастройкаФормированияПроводок,
	|	СоответствияСчетов.Ссылка КАК Соответствие
	|ИЗ
	|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствияСчетов КАК СоответствияСчетов
	|	ПО ПроводкиРеглУчета.СчетДт = СоответствияСчетов.СчетРеглУчета
	|		ИЛИ ПроводкиРеглУчета.СчетКт = СоответствияСчетов.СчетРеглУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗаполненияСубконтоСоответствий.Ссылка КАК СоответствиеСчетов,
	|	НастройкиЗаполненияСубконтоСоответствий.ВидСубконто,
	|	НастройкиЗаполненияСубконтоСоответствий.ЗаполнятьИзИсточника,
	|	НастройкиЗаполненияСубконтоСоответствий.УказанноеЗначение,
	|	НастройкиЗаполненияСубконтоСоответствий.Выражение
	|ИЗ
	|	Справочник.СоответствияСчетовМеждународногоУчета.НастройкиЗаполненияСубконто КАК НастройкиЗаполненияСубконтоСоответствий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствияСчетовМеждународногоУчета КАК СоответствияСчетов
	|		ПО НастройкиЗаполненияСубконтоСоответствий.Ссылка = СоответствияСчетов.Ссылка
	|			И (НЕ СоответствияСчетов.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствияСчетов.Ссылка,
	|	ТаблицаСоответствияСчетов.СчетРеглУчета,
	|	ТаблицаСоответствияСчетов.СчетМеждународногоУчета,
	|	ТаблицаСоответствияСчетов.СчетМеждународногоУчетаВалютный,
	|	ТаблицаСоответствияСчетов.СчетМеждународногоУчетаКоличественный,
	|	ТаблицаСоответствияСчетов.УчетПоПодразделениям,
	|	ТаблицаСоответствияСчетов.УчетПоНаправлениям,
	|	ВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|	ВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|	ВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|	ТаблицаСоответствияСчетов.Ссылка.ДополнительныйОтбор КАК ДополнительныйОтбор,
	|	ТаблицаСоответствияСчетов.УстановленДополнительныйОтбор,
	|	ТаблицаСоответствияСчетов.НастройкаФормированияПроводок,
	|	ТаблицаСоответствияСчетов.ПрименятьДляСчетаДт,
	|	ТаблицаСоответствияСчетов.ПрименятьДляСчетаКт,
	|	ТаблицаСоответствияСчетов.РеквизитДопУпорядочивания КАК Порядок,
	|	ВидыСубконто1Регл.ВидСубконто КАК ВидСубконто1Регл,
	|	ВидыСубконто2Регл.ВидСубконто КАК ВидСубконто2Регл,
	|	ВидыСубконто3Регл.ВидСубконто КАК ВидСубконто3Регл,
	|	ВидыСубконто1Регл.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРегл1,
	|	ВидыСубконто2Регл.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРегл2,
	|	ВидыСубконто3Регл.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконтоРегл3,
	|	ВидыСубконто1.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконто1,
	|	ВидыСубконто2.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконто2,
	|	ВидыСубконто3.ВидСубконто.ТипЗначения КАК ТипЗначВидСубконто3,
	|	ВЫБОР
	|		КОГДА ТаблицаСоответствияСчетов.НастройкаФормированияПроводок ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ТаблицаСоответствияСчетов.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|			= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаменитьСторноРеверсом
	|ИЗ
	|	ТаблицаСоответствияСчетов КАК ТаблицаСоответствияСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто1
	|		ПО ТаблицаСоответствияСчетов.СчетМеждународногоУчета = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто2
	|		ПО ТаблицаСоответствияСчетов.СчетМеждународногоУчета = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто3
	|		ПО ТаблицаСоответствияСчетов.СчетМеждународногоУчета = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1Регл
	|		ПО ТаблицаСоответствияСчетов.СчетРеглУчета = ВидыСубконто1Регл.Ссылка
	|			И (ВидыСубконто1Регл.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2Регл
	|		ПО ТаблицаСоответствияСчетов.СчетРеглУчета = ВидыСубконто2Регл.Ссылка
	|			И (ВидыСубконто2Регл.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3Регл
	|		ПО ТаблицаСоответствияСчетов.СчетРеглУчета = ВидыСубконто3Регл.Ссылка
	|			И (ВидыСубконто3Регл.НомерСтроки = 3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаСоответствияСчетов.РеквизитДопУпорядочивания";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПроводкиРеглУчета", ПроводкиРеглУчета);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СоответствияСчетов = РезультатЗапроса[5].Выгрузить();
	
	ПрименяемыеСоответствия = ПолучитьПрименяемыеСоответствия(СоответствияСчетов, РезультатЗапроса[3]);
	
	НастройкиЗаполненияСубконто = РезультатЗапроса[4].Выгрузить(); // ТаблицаЗначений - 
	НастройкиЗаполненияСубконто.Индексы.Добавить("СоответствиеСчетов");
	
	ПоложенияСчета = Новый Массив();
	ПоложенияСчета.Добавить("Дт");
	ПоложенияСчета.Добавить("Кт");
	
	СхемыКомпоновкиДанных = Новый Структура;
	Для каждого ПоложениеСчета Из ПоложенияСчета Цикл
		КлючСхемаКомпоновкиДанных = "СхемаКомпоновкиДанных" + ПоложениеСчета;
		СхемыКомпоновкиДанных.Вставить(КлючСхемаКомпоновкиДанных, СхемаКомпоновкиДанныхРеглУчета(ПроводкиРеглУчета, ПоложениеСчета));
	КонецЦикла;
	
	ПрименениеСоответствий = Новый ТаблицаЗначений;
	ПрименениеСоответствий.Колонки.Добавить("Регистратор");
	ПрименениеСоответствий.Колонки.Добавить("НомерСтроки");
	ПрименениеСоответствий.Колонки.Добавить("СчетДт");
	ПрименениеСоответствий.Колонки.Добавить("СчетДтВалютный", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("СчетДтКоличественный", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("УчетПоПодразделениямДт", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("УчетПоНаправлениямДт", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоДт1");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоДт2");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоДт3");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоДт1");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоДт2");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоДт3");
	ПрименениеСоответствий.Колонки.Добавить("СчетКт");
	ПрименениеСоответствий.Колонки.Добавить("СчетКтВалютный", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("СчетКтКоличественный", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("УчетПоПодразделениямКт", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("УчетПоНаправлениямКт", Новый ОписаниеТипов("Булево"));
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоКт1");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоКт2");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоКт3");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоКт1");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоКт2");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоКт3");
	ПрименениеСоответствий.Колонки.Добавить("СоответствиеСчетаДт");
	ПрименениеСоответствий.Колонки.Добавить("СоответствиеСчетаКт");
	ПрименениеСоответствий.Индексы.Добавить("Регистратор, НомерСтроки");
	
	Для каждого СоответствиеСчетов Из СоответствияСчетов Цикл
		
		Если ПрименяемыеСоответствия[СоответствиеСчетов.Ссылка] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроводкиРеглУчета.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для каждого ПоложениеСчета Из ПоложенияСчета Цикл
			
			Если Не СоответствиеСчетов["ПрименятьДляСчета" + ПоложениеСчета] Тогда
				Продолжить;
			КонецЕсли;
			
			СхемаКомпоновкиДанных = СхемыКомпоновкиДанных["СхемаКомпоновкиДанных" + ПоложениеСчета];
			
			Настройки = Новый НастройкиКомпоновкиДанных;
			НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "Регистратор");
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "НомерСтроки");
			
			УстановитьЗаполнениеСубконтоПоСоответствиюСчетов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеСчетов, 
				НастройкиЗаполненияСубконто);
				
			УстановитьОтборПроводокПоСоответствиюСчетов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеСчетов);
			
			ВнешниеНаборы = Новый Структура;
			ВнешниеНаборы.Вставить("ТаблицаДанных", ПроводкиРеглУчета);
			
			Попытка
				РезультатПримененияСоответствия = 
					ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
			Исключение
				ТекстСообщения = Символы.ПС + НСтр("ru = 'Не удалось получить данные для отражения счета по соответствию ""%СоответствиеСчета%""
											|по причине';
											|en = 'Cannot get data for account recording by correspondence ""%СоответствиеСчета%""
											|due to'") + ":" + Символы.ПС + Символы.Таб + "%Причина%";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СоответствиеСчета%", СоответствиеСчетов.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'Возможно в соответствии счета установлены некорректные настройки дополнительного отбора или заполнения субконто.';
							|en = 'Incorrect settings of filling additional filter or extra dimension may have been selected in the account mapping.'");
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
				
			Для каждого Строка Из РезультатПримененияСоответствия Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Регистратор", Строка.Регистратор);
				Отбор.Вставить("НомерСтроки", Строка.НомерСтроки);
				РезультатПоиска = ПрименениеСоответствий.НайтиСтроки(Отбор);
				Если РезультатПоиска.Количество() Тогда
					СтрокаПримененияСоответствий = РезультатПоиска[0];
					Если ЗначениеЗаполнено(СтрокаПримененияСоответствий["СоответствиеСчета" + ПоложениеСчета]) Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					СтрокаПримененияСоответствий = ПрименениеСоответствий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПримененияСоответствий, Отбор);
				КонецЕсли;
				
				ПроводкаРеглУчета = ПроводкиРеглУчета.НайтиСтроки(Отбор)[0];
				
				СтрокаПримененияСоответствий["Счет" + ПоложениеСчета] = СоответствиеСчетов.СчетМеждународногоУчета;
				СтрокаПримененияСоответствий["Счет" + ПоложениеСчета + "Валютный"] = СоответствиеСчетов.СчетМеждународногоУчетаВалютный;
				СтрокаПримененияСоответствий["Счет" + ПоложениеСчета + "Количественный"] = СоответствиеСчетов.СчетМеждународногоУчетаКоличественный;
				СтрокаПримененияСоответствий["УчетПоПодразделениям" + ПоложениеСчета] = СоответствиеСчетов.УчетПоПодразделениям;
				СтрокаПримененияСоответствий["УчетПоНаправлениям" + ПоложениеСчета] = СоответствиеСчетов.УчетПоНаправлениям;
				СтрокаПримененияСоответствий["ВидСубконто" + ПоложениеСчета + "1"] = СоответствиеСчетов.ВидСубконто1;
				СтрокаПримененияСоответствий["ВидСубконто" + ПоложениеСчета + "2"] = СоответствиеСчетов.ВидСубконто2;
				СтрокаПримененияСоответствий["ВидСубконто" + ПоложениеСчета + "3"] = СоответствиеСчетов.ВидСубконто3;
				СтрокаПримененияСоответствий["Субконто" + ПоложениеСчета + "1"] = Строка.СубконтоМеждународный1;
				СтрокаПримененияСоответствий["Субконто" + ПоложениеСчета + "2"] = Строка.СубконтоМеждународный2;
				СтрокаПримененияСоответствий["Субконто" + ПоложениеСчета + "3"] = Строка.СубконтоМеждународный3;
				СтрокаПримененияСоответствий["СоответствиеСчета" + ПоложениеСчета] = СоответствиеСчетов.Ссылка;
				
				ТранслироватьПроводку = Истина;
				Если Не ЗначениеЗаполнено(СтрокаПримененияСоответствий.СчетДт) 
					 И ЗначениеЗаполнено(ПроводкаРеглУчета.СчетДт) Тогда
					ТранслироватьПроводку = Ложь;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаПримененияСоответствий.СчетКт) 
					 И ЗначениеЗаполнено(ПроводкаРеглУчета.СчетКт) Тогда
					ТранслироватьПроводку = Ложь;
				КонецЕсли;
				
				Если Не ТранслироватьПроводку Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
				ИсключаемыеПоля = ИсключаемыеПоля(СтрокаПримененияСоответствий);
				ЗаполнитьЗначенияСвойств(Проводка, ПроводкаРеглУчета, , ИсключаемыеПоля);
				ЗаполнитьЗначенияСвойств(Проводка, СтрокаПримененияСоответствий);
			
				УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(ПроводкаРеглУчета.ПланСчетов, ПроводкаРеглУчета.Организация);
				ФункциональнаяСумма = ФункциональнаяСумма(ПроводкаРеглУчета, ПараметрыФормированияПроводок, УчетныеВалютыНаПланеСчетов); 
				Проводка.Сумма = ФункциональнаяСумма.Сумма;
				Проводка.ВалютаХраненияСуммыФункциональной = ФункциональнаяСумма.Валюта;
				Проводка.ВалютаФункциональная = УчетныеВалютыНаПланеСчетов.Функциональная;
				
				СуммаПредставления = СуммаПредставления(ПроводкаРеглУчета, ПараметрыФормированияПроводок, УчетныеВалютыНаПланеСчетов);
				Проводка.СуммаПредставления = СуммаПредставления.Сумма;
				Проводка.ВалютаХраненияСуммыПредставления = СуммаПредставления.Валюта;
				Если СуммаПредставления.Сумма = 0 Тогда
					Проводка.СуммаПредставления = ФункциональнаяСумма.Сумма;
					Проводка.ВалютаХраненияСуммыПредставления = ФункциональнаяСумма.Валюта;
				КонецЕсли;
				Проводка.ВалютаПредставления = УчетныеВалютыНаПланеСчетов.Представления;
				
				ЗаполнитьВалютнуюСумму(Проводка, 
					СтрокаПримененияСоответствий.СчетДтВалютный, 
					СтрокаПримененияСоответствий.СчетКтВалютный);
				
				Если СоответствиеСчетов.ЗаменитьСторноРеверсом
					И ((ЗначениеЗаполнено(Проводка.Сумма) И Проводка.Сумма < 0)
					ИЛИ (ЗначениеЗаполнено(Проводка.СуммаПредставления) И Проводка.СуммаПредставления < 0)) Тогда
					РегистрыБухгалтерии.Международный.ИнвертироватьПроводку(
						Проводка,
						ПараметрыФормированияПроводок.ИнвертируемыеПоля,
						ПараметрыФормированияПроводок.ИнвертируемыеРесурсы,
						ПараметрыФормированияПроводок.КоличествоСубконто);
				КонецЕсли;
				
				МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
				
				ПроводкиРеглУчета.Удалить(ПроводкаРеглУчета);
				
			КонецЦикла; // по результату применения соответствия
			
		КонецЦикла;// по Дт и Кт
		
	КонецЦикла;
	
	Если ПроводкиРеглУчета.Количество() Тогда
		
		#Область ТекстЗапросаПроводокБезСоответствия
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПроводкиРеглУчета.Период КАК Период,
		|	ПроводкиРеглУчета.Регистратор КАК Регистратор,
		|	ПроводкиРеглУчета.НомерСтроки КАК НомерСтроки,
		|	ПроводкиРеглУчета.ПодразделениеДт КАК ПодразделениеДт,
		|	ПроводкиРеглУчета.ПодразделениеКт КАК ПодразделениеКт,
		|	ПроводкиРеглУчета.СчетДт КАК СчетДт,
		|	ПроводкиРеглУчета.СчетКт КАК СчетКт,
		|	ПроводкиРеглУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ПроводкиРеглУчета.ПланСчетов КАК ПланСчетов,
		|	ПроводкиРеглУчета.Организация КАК Организация,
		|	ЕСТЬNULL(ПроводкиРеглУчета.КоличествоДт, 0) КАК КоличествоДт,
		|	ЕСТЬNULL(ПроводкиРеглУчета.КоличествоКт, 0) КАК КоличествоКт,
		|	ЕСТЬNULL(ПроводкиРеглУчета.ВалютнаяСуммаДт, 0) КАК ВалютнаяСуммаДт,
		|	ЕСТЬNULL(ПроводкиРеглУчета.ВалютнаяСуммаКт, 0) КАК ВалютнаяСуммаКт,
		|	ПроводкиРеглУчета.Сумма КАК Сумма,
		|	ПроводкиРеглУчета.СуммаУУ КАК СуммаУУ
		|ПОМЕСТИТЬ ПроводкиРеглУчета
		|ИЗ
		|	&ПроводкиРеглУчета КАК ПроводкиРеглУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроводкиРеглУчета.Период КАК Период,
		|	ПроводкиРеглУчета.Регистратор КАК Регистратор,
		|	ПроводкиРеглУчета.НомерСтроки КАК НомерСтроки,
		|	""Дт"" КАК ПоложениеСчета,
		|	ПроводкиРеглУчета.ПодразделениеДт КАК ПодразделениеДт,
		|	ПроводкиРеглУчета.ПодразделениеКт КАК ПодразделениеКт,
		|	ПроводкиРеглУчета.СчетДт КАК Счет,
		|	ПроводкиРеглУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ПроводкиРеглУчета.ПланСчетов КАК ПланСчетов,
		|	ПроводкиРеглУчета.Организация КАК Организация,
		|	ПроводкиРеглУчета.КоличествоДт КАК КоличествоДт,
		|	ПроводкиРеглУчета.КоличествоКт КАК КоличествоКт,
		|	ПроводкиРеглУчета.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ПроводкиРеглУчета.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ПроводкиРеглУчета.Сумма КАК Сумма,
		|	ПроводкиРеглУчета.СуммаУУ КАК СуммаУУ
		|ПОМЕСТИТЬ СчетаПроводокРеглУчета
		|ИЗ
		|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроводкиРеглУчета.Период КАК Период,
		|	ПроводкиРеглУчета.Регистратор,
		|	ПроводкиРеглУчета.НомерСтроки,
		|	""Кт"",
		|	ПроводкиРеглУчета.ПодразделениеДт КАК ПодразделениеДт,
		|	ПроводкиРеглУчета.ПодразделениеКт КАК ПодразделениеКт,
		|	ПроводкиРеглУчета.СчетКт,
		|	ПроводкиРеглУчета.НастройкаФормированияПроводок,
		|	ПроводкиРеглУчета.ПланСчетов КАК ПланСчетов,
		|	ПроводкиРеглУчета.Организация,
		|	ПроводкиРеглУчета.КоличествоДт КАК КоличествоДт,
		|	ПроводкиРеглУчета.КоличествоКт КАК КоличествоКт,
		|	ПроводкиРеглУчета.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ПроводкиРеглУчета.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ПроводкиРеглУчета.Сумма КАК Сумма,
		|	ПроводкиРеглУчета.СуммаУУ КАК СуммаУУ
		|ИЗ
		|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НастройкаФормированияПроводок,
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаРеглУчета.Период КАК Период,
		|	СчетаРеглУчета.Регистратор КАК Регистратор,
		|	СчетаРеглУчета.НомерСтроки КАК НомерСтроки,
		|	СчетаРеглУчета.ПодразделениеДт КАК ПодразделениеДт,
		|	СчетаРеглУчета.ПодразделениеКт КАК ПодразделениеКт,
		|	СчетаРеглУчета.Счет КАК Счет,
		|	СчетаРеглУчета.ПоложениеСчета КАК ПоложениеСчета,
		|	СчетаРеглУчета.ПланСчетов КАК ПланСчетов,
		|	СчетаРеглУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	СчетаРеглУчета.Организация КАК Организация,
		|	СчетаРеглУчета.КоличествоДт КАК КоличествоДт,
		|	СчетаРеглУчета.КоличествоКт КАК КоличествоКт,
		|	СчетаРеглУчета.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	СчетаРеглУчета.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	СчетаРеглУчета.Сумма КАК Сумма,
		|	СчетаРеглУчета.СуммаУУ КАК СуммаУУ
		|ИЗ
		|	СчетаПроводокРеглУчета КАК СчетаРеглУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаИгнорируемыеПриОтраженииВМеждународномУчете КАК ИгнорируемыеСчета
		|		ПО СчетаРеглУчета.НастройкаФормированияПроводок = ИгнорируемыеСчета.НастройкаФормированияПроводок
		|			И СчетаРеглУчета.Счет = ИгнорируемыеСчета.СчетРеглУчета
		|ГДЕ
		|	ИгнорируемыеСчета.СчетРеглУчета ЕСТЬ NULL ";
		#КонецОбласти
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПроводкиРеглУчета", ПроводкиРеглУчета);

		Выборка = Запрос.Выполнить().Выбрать();
		
		ШаблонОшибки = НСтр("ru = 'Не указан соответствующий счет для %Счет%.';
							|en = 'Corresponding account for %Счет% is not specified.'");
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Регистратор", Выборка.Регистратор);
			Отбор.Вставить("НомерСтроки", Выборка.НомерСтроки);
			
			РезультатПоиска = ПрименениеСоответствий.НайтиСтроки(Отбор);
			Если РезультатПоиска.Количество() Тогда
				СтрокаПримененияСоответствий = РезультатПоиска[0];
			Иначе
				СтрокаПримененияСоответствий = Неопределено;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.Счет) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПримененияСоответствий <> Неопределено 
				И ЗначениеЗаполнено(СтрокаПримененияСоответствий["Счет" + Выборка.ПоложениеСчета]) Тогда
				Продолжить;
			КонецЕсли;
			
			УчетныеВалюты = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(Выборка.ПланСчетов, Выборка.Организация);
			ФункциональнаяСумма = ФункциональнаяСумма(Выборка, ПараметрыФормированияПроводок, УчетныеВалюты);
			РесурсыЗаполнены = Ложь;
			Если ФункциональнаяСумма.Сумма <> 0 Тогда
				РесурсыЗаполнены = Истина;	
			ИначеЕсли Выборка.КоличествоДт <> 0 Или Выборка.КоличествоКт <> 0 Или Выборка.ВалютнаяСуммаДт <> 0 Или Выборка.ВалютнаяСуммаКт <> 0 Тогда
				РесурсыЗаполнены = Истина;
			КонецЕсли;
			Если Не РесурсыЗаполнены Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Счет%", Выборка.Счет);
			
			Проводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
			ЗаполнитьЗначенияСвойств(Проводка, Отбор);
			ЗаполнитьЗначенияСвойств(Проводка, Выборка);
			МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
			МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
			МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
			
			МенеджерЗаписи = РегистрыСведений.СоответствияСчетовМеждународногоУчетаТребующиеНастройки.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПланСчетов = Выборка.ПланСчетов;
			МенеджерЗаписи.НастройкаФормированияПроводок = Выборка.НастройкаФормированияПроводок;
			МенеджерЗаписи.СчетУчета = Выборка.Счет;
			МенеджерЗаписи.Документ = Выборка.Регистратор;
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИсключаемыеПоля(ДанныеСчета)
	
	МаксКоличествоСубконто = 3;
	ВидыСчета = СтрРазделить("Дт,Кт",",");
	ИсключаемыеПоля = Новый Массив;
	Для Каждого Вид Из ВидыСчета Цикл
		ИсключаемыеПоля.Добавить("Счет" + Вид);
		Если НЕ ДанныеСчета["УчетПоПодразделениям" + Вид] Тогда
			ИсключаемыеПоля.Добавить("Подразделение" + Вид);
		КонецЕсли;
		Если НЕ ДанныеСчета["Счет" + Вид + "Количественный"] Тогда
			ИсключаемыеПоля.Добавить("Количество" + Вид);
		КонецЕсли;
		Для Номер = 1 По МаксКоличествоСубконто Цикл
			ВидНомер = Вид + Номер;
			ИсключаемыеПоля.Добавить("ВидСубконто"+ ВидНомер);
			ИсключаемыеПоля.Добавить("Субконто"+ ВидНомер);
		КонецЦикла;
		Если НЕ ДанныеСчета["УчетПоНаправлениям" + Вид] Тогда
			ИсключаемыеПоля.Добавить("НаправлениеДеятельности" + Вид);
		КонецЕсли;
	КонецЦикла;
	Возврат СтрСоединить(ИсключаемыеПоля,",");
	
КонецФункции

Функция ПолучитьПрименяемыеСоответствия(СоответствияСчетов, ПроводкиРеглУчета)
	
	ПрименяемыеСоответствия = Новый Соответствие;
	Если СоответствияСчетов.Количество() = 0 Тогда
		Возврат ПрименяемыеСоответствия;
	КонецЕсли;

	СхемаОтборов = СхемаКомпоновкиДанныхРеглУчета(ПроводкиРеглУчета);
	Настройки = Новый НастройкиКомпоновкиДанных;
	
	ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "Соответствие", "Соответствие");
	ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "Регистратор", "Регистратор");
	ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "НомерСтроки", "НомерСтроки");
	ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "СчетДт", "СчетДт");
	ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "СчетКт", "СчетКт");
	
	Для Каждого СоответствиеСчета Из СоответствияСчетов Цикл
		
		Если НЕ СоответствиеСчета.УстановленДополнительныйОтбор Тогда
			ПрименяемыеСоответствия.Вставить(СоответствиеСчета.Ссылка, Истина);
			Продолжить;
		КонецЕсли;
		
		ИмяПараметраСоответствия = "Соответствие"+СоответствиеСчета.Порядок;
		ФинансоваяОтчетностьСервер.НовыйПараметр(Настройки, ИмяПараметраСоответствия, СоответствиеСчета.Ссылка);
		НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(Настройки.Структура, "Соответствие");
		
		ОтборСоответствия = ФинансоваяОтчетностьСервер.НовыйОтбор(НоваяГруппировка.Отбор, "Соответствие");
		ОтборСоответствия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных."+ИмяПараметраСоответствия);
		НовыйОтборДт = НоваяГруппировка.Отбор;
		НовыйОтборКт = НоваяГруппировка.Отбор;
		Если СоответствиеСчета.ПрименятьДляСчетаДт И СоответствиеСчета.ПрименятьДляСчетаКт Тогда
			ГруппаИЛИ = ФинансоваяОтчетностьСервер.НовыйОтбор(НоваяГруппировка.Отбор,
				Неопределено, Неопределено, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			НовыйОтборДт = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИЛИ,
				Неопределено, Неопределено, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НовыйОтборКт = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИЛИ,
				Неопределено, Неопределено, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ДопОтбор = СоответствиеСчета.ДополнительныйОтбор.Получить();
		Если СоответствиеСчета.ПрименятьДляСчетаДт Тогда
			ФинансоваяОтчетностьСервер.НовыйОтбор(НовыйОтборДт, "СчетДт", СоответствиеСчета.СчетРеглУчета);
			ФинансоваяОтчетностьСервер.НовыйОтбор(НовыйОтборДт, "НастройкаФормированияПроводок", СоответствиеСчета.НастройкаФормированияПроводок);
			ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДопОтбор.Отбор, НовыйОтборДт, Истина,,"Дт");
		КонецЕсли;
		
		Если СоответствиеСчета.ПрименятьДляСчетаКт Тогда
			ФинансоваяОтчетностьСервер.НовыйОтбор(НовыйОтборКт, "СчетКт", СоответствиеСчета.СчетРеглУчета);
			ФинансоваяОтчетностьСервер.НовыйОтбор(НовыйОтборКт, "НастройкаФормированияПроводок", СоответствиеСчета.НастройкаФормированияПроводок);
			ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДопОтбор.Отбор, НовыйОтборКт, Истина,,"Кт");
		КонецЕсли;
		
		Если НоваяГруппировка.Отбор.Элементы.Количество() = 0 Тогда
			Настройки.Структура.Удалить(НоваяГруппировка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоответствияСчетов.Количество() <> ПрименяемыеСоответствия.Количество() Тогда
		ВнешниеНаборы = Новый Структура("ТаблицаДанных", ПроводкиРеглУчета);
		РезультатПримененияОтборов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаОтборов, Настройки, ВнешниеНаборы);
		Если РезультатПримененияОтборов.Количество() > 0 Тогда
			РезультатПримененияОтборов.Свернуть("Соответствие");
			Для Каждого Строка Из РезультатПримененияОтборов Цикл
				ПрименяемыеСоответствия.Вставить(Строка.Соответствие, Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПрименяемыеСоответствия;
	
КонецФункции

Функция СхемаКомпоновкиДанныхРеглУчета(ТаблицаДанных, ПоложениеСчета = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхемаНаборОбъект("ТаблицаДанных");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("ТаблицаДанных");
	
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		ПутьКДанным = ИмяПоля;
		Если ПоложениеСчета = "Дт" Тогда
			ПутьКДанным = СтрЗаменить(ПутьКДанным, "Дт", "");
		ИначеЕсли ПоложениеСчета = "Кт" Тогда
			ПутьКДанным = СтрЗаменить(ПутьКДанным, "Кт", "");
		КонецЕсли;
		НовоеПоле.ПутьКДанным = ПутьКДанным;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
	КонецЦикла;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Параметр.Имя = "Кэш";
	Параметр.Значение = Новый Соответствие;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Процедура УстановитьЗаполнениеСубконтоПоСоответствиюОборотов(СхемаКомпоновкиДанных, Настройки, СоответствиеОборотов, НастройкиЗаполненияСубконто)
	
	СхемаКомпоновкиДанных.ВычисляемыеПоля.Очистить();
	
	УточняемыеВычисляемыеПоля = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("СоответствиеОборотов", СоответствиеОборотов.Ссылка);
	Отбор.Вставить("ПоложениеСубконто");
	Отбор.Вставить("ВидСубконто");
	
	ПоложенияСубконто = Новый Массив;
	ПоложенияСубконто.Добавить("Дт");
	ПоложенияСубконто.Добавить("Кт");
	
	Для НомерСубконто = 1 По 3 Цикл
		Для каждого ПоложениеСубконто Из ПоложенияСубконто Цикл
			Выражение   = "NULL";
			ВидСубконто = СоответствиеОборотов["ВидСубконто" + ПоложениеСубконто + НомерСубконто];
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				Отбор.ПоложениеСубконто = ПоложениеСубконто;
				Отбор.ВидСубконто = ВидСубконто;
				РезультатПоиска = НастройкиЗаполненияСубконто.НайтиСтроки(Отбор);
				Если РезультатПоиска.Количество() Тогда
					Выражение = МеждународныйУчетПроведениеСервер.ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, РезультатПоиска[0]);
				КонецЕсли;
			КонецЕсли;
			ПутьКДанным = "СубконтоМеждународный" + ПоложениеСубконто + НомерСубконто;
			ВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, Выражение);
			Если СтрНайти(Выражение, "{") > 0 Тогда
				// Есть характеристики
				УточняемыеВычисляемыеПоля.Добавить(ВычисляемоеПоле);
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, ПутьКДанным);
		КонецЦикла;
	КонецЦикла;
	
	Если УточняемыеВычисляемыеПоля.Количество() > 0 Тогда
		ИсходныеВыражения = Новый Массив;
		Для Каждого ВычисляемоеПоле Из УточняемыеВычисляемыеПоля Цикл
			Если ИсходныеВыражения.Найти(ВычисляемоеПоле.Выражение) = Неопределено Тогда
				ИсходныеВыражения.Добавить(ВычисляемоеПоле.Выражение);
			КонецЕсли;
		КонецЦикла;
		РезультатПреобразования = РаботаСФормулами.ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновкиДанных,
			ИсходныеВыражения);
		Если РезультатПреобразования.ЕстьОшибки Тогда
			ТекстыОшибок = Новый Массив;
			Для Каждого ИсходноеВыражениеИТекстОшибки Из РезультатПреобразования.СообщенияОшибокПреобразования Цикл
				ТекстыОшибок.Добавить(ИсходноеВыражениеИТекстОшибки.Значение);
			КонецЦикла;
			ТекстВсехОшибок = СтрСоединить(ТекстыОшибок, Символы.ПС);
			ТекстСообщения = НСтр("ru = 'Не удалось получить данные для отражения оборота по соответствию ""%1""
											|по причине:
											|	%2';
											|en = 'Cannot get data to record turnover by correspondence ""%1""
											|due to
											|	%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СоответствиеОборотов.Ссылка,
				ТекстВсехОшибок);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПреобразованныеВыражения = РезультатПреобразования.ПреобразованныеВыражения;
		Для Каждого ВычисляемоеПоле Из УточняемыеВычисляемыеПоля Цикл
			ЗаменаВыражения = ПреобразованныеВыражения.Получить(ВычисляемоеПоле.Выражение);
			ВычисляемоеПоле.Выражение = ЗаменаВыражения;
		КонецЦикла;
	КонецЕсли;
	
	Для НомерСубконто = 1 По 3 Цикл
		Для каждого ПоложениеСубконто Из ПоложенияСубконто Цикл
			Выражение 		= "Субконто" + ПоложениеСубконто + НомерСубконто;
			ПолеСубконто 	= СхемаКомпоновкиДанных.НаборыДанных.ТаблицаДанных.Поля.Найти(Выражение);
			Если ПолеСубконто = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначВидСубконтоРегл 	= СоответствиеОборотов["ТипЗначВидСубконтоРегл" + ПоложениеСубконто + НомерСубконто];
			Если ЗначениеЗаполнено(ТипЗначВидСубконтоРегл) Тогда
				ПолеСубконто.ТипЗначения = ТипЗначВидСубконтоРегл;
			Иначе
				ПолеСубконто.ТипЗначения = Новый ОписаниеТипов();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗаполнениеСубконтоПоСоответствиюСчетов(СхемаКомпоновкиДанных, Настройки, СоответствиеСчетов, НастройкиЗаполненияСубконто)
	
	СхемаКомпоновкиДанных.ВычисляемыеПоля.Очистить();
	
	УточняемыеВычисляемыеПоля = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("СоответствиеСчетов", СоответствиеСчетов.Ссылка);
	Отбор.Вставить("ВидСубконто");
	
	Для НомерСубконто = 1 По 3 Цикл
		ВидСубконто = СоответствиеСчетов["ВидСубконто" + НомерСубконто];
		Выражение = "NULL";
		Если ЗначениеЗаполнено(ВидСубконто) Тогда
			Отбор.ВидСубконто = ВидСубконто;
			РезультатПоиска = НастройкиЗаполненияСубконто.НайтиСтроки(Отбор);
			Если РезультатПоиска.Количество() Тогда
				Выражение = МеждународныйУчетПроведениеСервер.ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, РезультатПоиска[0]);
			КонецЕсли;
		КонецЕсли;
		ПутьКДанным = "СубконтоМеждународный" + НомерСубконто;
		ВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, Выражение); 
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, ПутьКДанным);
		Если СтрНайти(Выражение, "}") > 0 Тогда
			// Есть характеристика
			УточняемыеВычисляемыеПоля.Добавить(ВычисляемоеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Если УточняемыеВычисляемыеПоля.Количество() > 0 Тогда
		ИсходныеВыражения = Новый Массив;
		Для Каждого ВычисляемоеПоле Из УточняемыеВычисляемыеПоля Цикл
			Если ИсходныеВыражения.Найти(ВычисляемоеПоле.Выражение) = Неопределено Тогда
				ИсходныеВыражения.Добавить(ВычисляемоеПоле.Выражение);
			КонецЕсли;
		КонецЦикла;
		РезультатПреобразования = РаботаСФормулами.ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновкиДанных,
			ИсходныеВыражения);
		Если РезультатПреобразования.ЕстьОшибки Тогда
			ТекстыОшибок = Новый Массив;
			Для Каждого ИсходноеВыражениеИТекстОшибки Из РезультатПреобразования.СообщенияОшибокПреобразования Цикл
				ТекстыОшибок.Добавить(ИсходноеВыражениеИТекстОшибки.Значение);
			КонецЦикла;
			ТекстВсехОшибок = СтрСоединить(ТекстыОшибок, Символы.ПС);
			ТекстСообщения = НСтр("ru = 'Не удалось получить данные для отражения счета по соответствию ""%1""
											|по причине:
											|	%2';
											|en = 'Cannot get data for account recording by correspondence ""%1""
											|due to
											|	%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СоответствиеСчетов.Ссылка,
				ТекстВсехОшибок);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПреобразованныеВыражения = РезультатПреобразования.ПреобразованныеВыражения;
		Для Каждого ВычисляемоеПоле Из УточняемыеВычисляемыеПоля Цикл
			ЗаменаВыражения = ПреобразованныеВыражения.Получить(ВычисляемоеПоле.Выражение);
			ВычисляемоеПоле.Выражение = ЗаменаВыражения;
		КонецЦикла;
	КонецЕсли;
	
	Для НомерСубконто = 1 По 3 Цикл
		Выражение 		= "Субконто" + НомерСубконто;
		ПолеСубконто 	= СхемаКомпоновкиДанных.НаборыДанных.ТаблицаДанных.Поля.Найти(Выражение);
		Если ПолеСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначВидСубконтоРегл = СоответствиеСчетов["ТипЗначВидСубконтоРегл" + НомерСубконто];
		Если ЗначениеЗаполнено(ТипЗначВидСубконтоРегл) Тогда
			ПолеСубконто.ТипЗначения = ТипЗначВидСубконтоРегл;
		Иначе
			ПолеСубконто.ТипЗначения = Новый ОписаниеТипов();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборПроводокПоСоответствиюОборотов(СхемаКомпоновкиДанных, Настройки, СоответствиеОборотов, ДополнительныйОтборГруппы = Неопределено) Экспорт
	
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "СчетДт", СоответствиеОборотов.СчетРеглУчетаДт);
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "СчетКт", СоответствиеОборотов.СчетРеглУчетаКт);
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "НастройкаФормированияПроводок", СоответствиеОборотов.НастройкаФормированияПроводок);
	
	Если ДополнительныйОтборГруппы <> Неопределено Тогда
		ПреобразоватьОтборСоответствияОборотов(ДополнительныйОтборГруппы.Отбор.Элементы);
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтборГруппы.Отбор, Настройки.Отбор);
	КонецЕсли;
	
	Если СоответствиеОборотов.УстановленДополнительныйОтбор Тогда
		ДополнительныйОтбор = СоответствиеОборотов.ДополнительныйОтбор.Получить();
		ПреобразоватьОтборСоответствияОборотов(ДополнительныйОтбор.Отбор.Элементы);
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтбор.Отбор, Настройки.Отбор);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборПроводокПоСоответствиюСчетов(СхемаКомпоновкиДанных, Настройки, СоответствиеСчетов) Экспорт
	
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "Счет", СоответствиеСчетов.СчетРеглУчета);
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "НастройкаФормированияПроводок", СоответствиеСчетов.НастройкаФормированияПроводок);
	
	Если СоответствиеСчетов.УстановленДополнительныйОтбор Тогда
		ДопОтбор = СоответствиеСчетов.ДополнительныйОтбор.Получить();
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДопОтбор.Отбор, Настройки.Отбор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВалютнуюСумму(Проводка, СчетДтВалютный, СчетКтВалютный)
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Проводка.Организация);
	
	ПризнакиСчетов = Новый Структура;
	ПризнакиСчетов.Вставить("Дт", СчетДтВалютный); 
	ПризнакиСчетов.Вставить("Кт", СчетКтВалютный); 
	
	Для каждого ПризнакСчета Из ПризнакиСчетов Цикл
		
		Валютный = ПризнакСчета.Значение;
		ВалютаЗаполнена = ЗначениеЗаполнено(Проводка["Валюта" + ПризнакСчета.Ключ]);
		
		Если Валютный И Не ВалютаЗаполнена Тогда
			Проводка["Валюта" + ПризнакСчета.Ключ]        = ВалютаРеглУчета;
			Проводка["ВалютнаяСумма" + ПризнакСчета.Ключ] = Проводка.Сумма;
		ИначеЕсли Не Валютный И ВалютаЗаполнена Тогда
			Проводка["Валюта" + ПризнакСчета.Ключ]        = Неопределено;
			Проводка["ВалютнаяСумма" + ПризнакСчета.Ключ] = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Проводка.СуммаПредставления = Проводка.Сумма;
	
КонецПроцедуры

Процедура ПреобразоватьОтборСоответствияОборотов(ЭлементыОтбора)
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПреобразоватьОтборСоответствияОборотов(ЭлементОтбора.Элементы);
		Иначе
			
			ЛевоеЗначениеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			
			Если СтрНайти(ЛевоеЗначениеОтбора, "СчетДт.") > 0 Тогда
				ЛевоеЗначениеОтбора = СтрЗаменить(ЛевоеЗначениеОтбора, "СчетДт.", "");
			ИначеЕсли СтрНайти(ЛевоеЗначениеОтбора, "СчетКт.") > 0 Тогда
				ЛевоеЗначениеОтбора = СтрЗаменить(ЛевоеЗначениеОтбора, "СчетКт.", "");
			КонецЕсли;
			
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Параметры:
// 	Данные - СтрокаТаблицыЗначений - 
// 	ПараметрыФормированияПроводок - См. МеждународныйУчетПроведениеСервер.ПараметрыФормированияПроводок
// 	ВалютыМеждународногоУчета - См. МеждународныйУчетОбщегоНазначения.УчетныеВалюты
// Возвращаемое значение:
// 	Структура - Содержит поля:
// 		* Сумма - Число -
// 		* Валюта - СправочникСсылка.Валюты -
Функция ФункциональнаяСумма(Данные, ПараметрыФормированияПроводок, ВалютыМеждународногоУчета) Экспорт
	
	Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр
		И ПараметрыФормированияПроводок.ВестиУУНаПланеСчетовХозрасчетный 
		И ПараметрыФормированияПроводок.ДатаНачалаУУНаПланеСчетовХозрасчетный <= Данные.Период Тогда
		Сумма = Данные.СуммаУУ;
		Валюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	Иначе
		Сумма = Данные.Сумма;
		Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Данные.Организация);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сумма", Сумма);
	Результат.Вставить("Валюта", Валюта);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Данные - СтрокаТаблицыЗначений - 
// 	ПараметрыФормированияПроводок - См. МеждународныйУчетПроведениеСервер.ПараметрыФормированияПроводок
// 	ВалютыМеждународногоУчета - См. МеждународныйУчетОбщегоНазначения.УчетныеВалюты
// Возвращаемое значение:
// 	Структура - Содержит поля:
// 		* Сумма - Число -
// 		* Валюта - СправочникСсылка.Валюты -
Функция СуммаПредставления(Данные,  ПараметрыФормированияПроводок, ВалютыМеждународногоУчета)
	
	Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр
		И ПараметрыФормированияПроводок.ВестиУУНаПланеСчетовХозрасчетный 
		И ПараметрыФормированияПроводок.ДатаНачалаУУНаПланеСчетовХозрасчетный >= Данные.Период Тогда
		Сумма = Данные.СуммаУУ;
		Валюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	Иначе
		Сумма = Данные.Сумма;
		Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Данные.Организация);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сумма", Сумма);
	Результат.Вставить("Валюта", Валюта);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//-- Локализация
