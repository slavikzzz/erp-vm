////////////////////////////////////////////////////////////////////////////////
// Отражение зарплаты в учете
// Переопределяемое в пределах библиотеки поведение.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция СтраховыеВзносыДляПлатежейПоРезультатамРасчета(Организации, ПериодРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организации", Организации);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтраховыеВзносы.Организация КАК Организация,
	|	0 КАК ПоляВзносов,
	|	СтраховыеВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтраховыеВзносы.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
	|ГДЕ
	|	СтраховыеВзносы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтраховыеВзносы.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносы.Организация,
	|	СтраховыеВзносы.СтатьяФинансирования,
	|	СтраховыеВзносы.СтатьяРасходов";
	
	ТекстПолейВзносов = "";
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина)) Цикл
		ТекстПолейВзносов = ТекстПолейВзносов + "Сумма(СтраховыеВзносы." + ИмяПоля + ")  КАК " + ИмяПоля + "," + Символы.ПС;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "0 КАК ПоляВзносов,", ТекстПолейВзносов);
	
	ДополнительныеПоля = "СтатьяФинансирования,СтатьяРасходов";
	Возврат ОтражениеЗарплатыВУчете.ТаблицаСтраховыхВзносовПоВидамОпераций(Запрос.Выполнить().Выгрузить(), ПериодРегистрации, ДополнительныеПоля);
	
КонецФункции

#Область ОбслуживаниеРаспределенияУдержаний

Функция ОписаниеИсходныхДанныхДляРаспределенияУдержаний() Экспорт

	ИсходныеДанные = Новый Структура("
	|БазовыеНачисления,
	|СтрокиУжеУдержаноПоФизическимЛицам,
	|ТаблицаУдержаний,
	|МенеджерВременныхТаблиц,
	|Организация,
	|ПериодРегистрации,
	|ВидыНачисленийДополненияРасчетнойБазы,
	|ОкончательныйРасчет");
	
	Возврат ИсходныеДанные;

КонецФункции

// Выполняет распределение удержаний по статьям
//	Параметры
//		РаспределениеУдержаний, таблица значений, которая заполняется результатами отражения удержаний
//		ИсходныеДанные - структура, , см ОписаниеИсходныхДанныхДляРаспределенияУдержаний
//
Процедура ВыполнитьРаспределениеУдержаний(РаспределениеУдержаний, ИсходныеДанные) Экспорт
	
	ТаблицаУдержаний = ИсходныеДанные.ТаблицаУдержаний;
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	ПериодРегистрации       = ИсходныеДанные.ПериодРегистрации;
	Организация      		= ИсходныеДанные.Организация;
	БазовыеНачисления 		= ИсходныеДанные.БазовыеНачисления;
	ВидыНачисленийДополненияРасчетнойБазы 	= ИсходныеДанные.ВидыНачисленийДополненияРасчетнойБазы;
	СтрокиУжеУдержаноПоФизическимЛицам 		= ИсходныеДанные.СтрокиУжеУдержаноПоФизическимЛицам;
	
	УдалитьВТ = Новый Массив;
	
	КатегорииОплатыБольничного = ПланыВидовРасчета.Начисления.КатегорииОплатыБольничного();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорииБЛ", КатегорииОплатыБольничного);
	Запрос.УстановитьПараметр("Удержания", ТаблицаУдержаний);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ВидУдержания КАК ВидУдержания,
	|	Удержания.Сумма КАК Сумма,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.ПлатежныйАгент КАК ПлатежныйАгент,
	|	Удержания.Получатель КАК Получатель,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТУдержанияДляРаспределения
	|ИЗ
	|	&Удержания КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдержанияДляРаспределения.ДокументОснование КАК ИсполнительныйДокумент,
	|	УдержанияДляРаспределения.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсполнительныеДокументы
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК УдержанияДляРаспределения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО УдержанияДляРаспределения.ВидУдержания = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|ГДЕ
	|	УдержанияДляРаспределения.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияБазовыеВидыРасчета.Ссылка КАК Ссылка,
	|	УдержанияБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета,
	|	УдержанияБазовыеВидыРасчета.Ссылка.КатегорияУдержания КАК КатегорияУдержания
	|ИЗ
	|	ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК УдержанияБазовыеВидыРасчета
	|ГДЕ
	|	УдержанияБазовыеВидыРасчета.Ссылка.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииБЛ)";
	
	УдалитьВТ.Добавить("ВТУдержанияДляРаспределения");
	УдалитьВТ.Добавить("ВТИсполнительныеДокументы");
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	ВыборкаБазовыеВР = Результат[КоличествоРезультатов-1].Выбрать();
	ВРОплатыБЛ = Результат[КоличествоРезультатов].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	БазовыеВидыРасчета = Новый Соответствие;
	БазовыеВидыРасчетаБезБЛ = Новый Соответствие;
	Пока ВыборкаБазовыеВР.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ВРУдержание = ВыборкаБазовыеВР.Ссылка;
		
		МассивВР = Новый Массив;
		МассивВРБезБЛ = Новый Массив;
		Если ВыборкаБазовыеВР.КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВР, ВидыНачисленийДополненияРасчетнойБазы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВРБезБЛ, ВидыНачисленийДополненияРасчетнойБазы);
			Пока ВыборкаБазовыеВР.Следующий() Цикл
				МассивВР.Добавить(ВыборкаБазовыеВР.ВидРасчета);
				Если ВРОплатыБЛ.Найти(ВыборкаБазовыеВР.ВидРасчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				МассивВРБезБЛ.Добавить(ВыборкаБазовыеВР.ВидРасчета);
			КонецЦикла;
		Иначе
			Пока ВыборкаБазовыеВР.Следующий() Цикл
				МассивВР.Добавить(ВыборкаБазовыеВР.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
			
		БазовыеВидыРасчета.Вставить(ВРУдержание, МассивВР);
		БазовыеВидыРасчетаБезБЛ.Вставить(ВРУдержание, МассивВРБезБЛ);
		
	КонецЦикла;

	// Запрашиваем условия удержаний.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсполнительныеДокументы", "ИсполнительныйДокумент");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("УсловияУдержанияПоИсполнительномуДокументу", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокУдержаний.Сотрудник КАК Сотрудник,
	|	СписокУдержаний.ВидУдержания КАК ВидУдержания,
	|	СписокУдержаний.Сумма КАК Сумма,
	|	СписокУдержаний.ДокументОснование КАК ДокументОснование,
	|	СписокУдержаний.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокУдержаний.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(УсловияУдержания.УчитыватьБольничныеЛисты, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(УсловияУдержания.ВидБазы, ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум)
	|		ИЛИ ЕСТЬNULL(УсловияУдержания.ВидБазы, ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум)) = ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПустаяСсылка) КАК УчитыватьБольничныеЛисты
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК СписокУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО СписокУдержаний.ВидУдержания = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
	|		ПО СписокУдержаний.ДокументОснование = УсловияУдержания.ИсполнительныйДокумент
	|			И СписокУдержаний.ДатаНачала = УсловияУдержания.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокУдержаний.Сотрудник КАК Сотрудник,
	|	СписокУдержаний.ВидУдержания КАК ВидУдержания,
	|	СписокУдержаний.Сумма КАК Сумма,
	|	СписокУдержаний.ДокументОснование КАК ДокументОснование,
	|	СписокУдержаний.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокУдержаний.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(УдержанияИсполнительныйЛист.ИдентификаторСтроки, 0) КАК ИдентификаторСтрокиБазыУдержаний
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК СписокУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО СписокУдержаний.ВидУдержания = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияДляРаспределения КАК УдержанияИсполнительныйЛист
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК УдержанияВторойСписок
	|			ПО УдержанияИсполнительныйЛист.ВидУдержания = УдержанияВторойСписок.Ссылка
	|				И (УдержанияВторойСписок.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|		ПО СписокУдержаний.ПлатежныйАгент = УдержанияИсполнительныйЛист.ПлатежныйАгент
	|			И СписокУдержаний.Получатель = УдержанияИсполнительныйЛист.Получатель
	|			И СписокУдержаний.ФизическоеЛицо = УдержанияИсполнительныйЛист.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	ТаблицаИсполнительныеЛисты = Результат[КоличествоРезультатов-1].Выгрузить();
	РезультатВознагражденияПлатежногоАгента = Результат[КоличествоРезультатов];
	
	ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияУдержаний();
	ПараметрыРаспределения.Организация 		 = Организация;
	ПараметрыРаспределения.ПериодРегистрации = ПериодРегистрации;
	
	// Исполнительные листы
	Если ТаблицаИсполнительныеЛисты.Количество()>0 Тогда
		
		ПараметрыРаспределения.УчитыватьЗнакБазовыхЗначений = Истина;
		
		Отбор = Новый Структура("УчитыватьБольничныеЛисты", Истина);
		НайденныеСтроки = ТаблицаИсполнительныеЛисты.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			ПараметрыРаспределения.БазовыеВидыРасчета = БазовыеВидыРасчета;
			ТаблицаРаспределения = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(НайденныеСтроки, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, ПараметрыРаспределения);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
		КонецЕсли;
		
		Отбор.УчитыватьБольничныеЛисты = Ложь;
		НайденныеСтроки = ТаблицаИсполнительныеЛисты.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			ПараметрыРаспределения.БазовыеВидыРасчета = БазовыеВидыРасчетаБезБЛ;
			ТаблицаРаспределения = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(НайденныеСтроки, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, ПараметрыРаспределения);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
		КонецЕсли;
		
		// Устанавливаем значения по умолчанию.
		ПараметрыРаспределения.УчитыватьЗнакБазовыхЗначений = Ложь;
		ПараметрыРаспределения.БазовыеВидыРасчета = Неопределено;
		
	КонецЕсли;
	
	// Вознаграждение платежного агента, распределяем по базе исполнительных листов
	Если Не РезультатВознагражденияПлатежногоАгента.Пустой() Тогда
		
		Отбор = Новый Структура("ИдентификаторСтроки");
		Выборка = РезультатВознагражденияПлатежногоАгента.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
			
			РезультатРаспределенияИЛ = РаспределениеУдержаний.СкопироватьКолонки();
			
			Пока Выборка.Следующий() Цикл
				Отбор.ИдентификаторСтроки = Выборка.ИдентификаторСтрокиБазыУдержаний;
				ТаблицаБазы = РаспределениеУдержаний.Скопировать(Отбор);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБазы, РезультатРаспределенияИЛ);
			КонецЦикла;
			
			КоллекцияДляРаспределения = Новый Массив;
			КоллекцияДляРаспределения.Добавить(Выборка);
			
			Если РезультатРаспределенияИЛ.Количество() = 0 Тогда
				// удерживаем из всех начислений
				ПараметрыРаспределения.УчитыватьЗнакБазовыхЗначений = Не ИсходныеДанные.ОкончательныйРасчет;
				ТаблицаРаспределения = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(КоллекцияДляРаспределения, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, ПараметрыРаспределения);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
			Иначе
				
				РезультатРаспределенияИЛ.Колонки.Результат.Имя = "Сумма";
				РезультатРаспределенияИЛ.Колонки.Добавить("ГоловнойСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
				РезультатРаспределенияИЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
				РезультатРаспределенияИЛ.ЗаполнитьЗначения(Выборка.ФизическоеЛицо,"ФизическоеЛицо");
				
				ПараметрыРаспределения.УчитыватьЗнакБазовыхЗначений = Ложь;
				ТаблицаРаспределения = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(КоллекцияДляРаспределения, РезультатРаспределенияИЛ, Новый Соответствие, ПараметрыРаспределения);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Устанавливаем значения по умолчанию.
		ПараметрыРаспределения.УчитыватьЗнакБазовыхЗначений = Ложь;
		
	КонецЕсли;
	
	// остальные удержания
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокУдержаний.Сотрудник КАК Сотрудник,
	|	СписокУдержаний.ВидУдержания КАК ВидУдержания,
	|	СписокУдержаний.ДатаНачала КАК ДатаНачала,
	|	СписокУдержаний.ДатаОкончания КАК ДатаОкончания,
	|	СписокУдержаний.Сумма КАК Сумма,
	|	СписокУдержаний.ДокументОснование КАК ДокументОснование,
	|	СписокУдержаний.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокУдержаний.Подразделение КАК Подразделение,
	|	Удержания.СтратегияОтраженияВУчете КАК СтратегияОтраженияВУчете,
	|	Удержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Удержания.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТПрочиеУдержанияДляРаспределения
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК СписокУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО СписокУдержаний.ВидУдержания = Удержания.Ссылка
	|			И (НЕ Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрочиеУдержания.ДокументОснование КАК ДокументОснование,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПрочиеУдержания.ДатаНачала КАК ДатаНачала,
	|	МАКСИМУМ(БухучетПлановыхУдержаний.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхУдержаний КАК БухучетПлановыхУдержаний
	|		ПО ПрочиеУдержания.ФизическоеЛицо = БухучетПлановыхУдержаний.ФизическоеЛицо
	|			И ПрочиеУдержания.ДокументОснование = БухучетПлановыхУдержаний.ДокументОснование
	|			И ПрочиеУдержания.ВидУдержания = БухучетПлановыхУдержаний.Удержание
	|			И ПрочиеУдержания.ДатаНачала >= БухучетПлановыхУдержаний.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеУдержания.ФизическоеЛицо,
	|	ПрочиеУдержания.ДокументОснование,
	|	ПрочиеУдержания.ВидУдержания,
	|	ПрочиеУдержания.ИдентификаторСтроки,
	|	ПрочиеУдержания.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо <= МаксимальныеПериоды.ДатаНачала
	|			ТОГДА БухучетПлановыхУдержаний.СтатьяФинансированияПоОкончании
	|		ИНАЧЕ БухучетПлановыхУдержаний.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо <= МаксимальныеПериоды.ДатаНачала
	|			ТОГДА БухучетПлановыхУдержаний.СтатьяРасходовПоОкончании
	|		ИНАЧЕ БухучетПлановыхУдержаний.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо <= МаксимальныеПериоды.ДатаНачала
	|			ТОГДА БухучетПлановыхУдержаний.ИспользуетсяПоОкончании
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ПОМЕСТИТЬ ВТБухучетИзДокумента
	|ИЗ
	|	ВТМаксимальныеПериоды КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхУдержаний КАК БухучетПлановыхУдержаний
	|		ПО МаксимальныеПериоды.ФизическоеЛицо = БухучетПлановыхУдержаний.ФизическоеЛицо
	|			И МаксимальныеПериоды.Период = БухучетПлановыхУдержаний.Период
	|			И МаксимальныеПериоды.ДокументОснование = БухучетПлановыхУдержаний.ДокументОснование
	|			И МаксимальныеПериоды.ВидУдержания = БухучетПлановыхУдержаний.Удержание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрочиеУдержания.Сотрудник КАК Сотрудник,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.Сумма КАК Сумма,
	|	ПрочиеУдержания.ДокументОснование КАК ДокументОснование,
	|	ПрочиеУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПрочиеУдержания.Подразделение КАК Подразделение,
	|	ПрочиеУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ПрочиеУдержания.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетИзДокумента КАК БухучетИзДокумента
	|		ПО ПрочиеУдержания.ИдентификаторСтроки = БухучетИзДокумента.ИдентификаторСтроки
	|ГДЕ
	|	ПрочиеУдержания.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета)
	|	И БухучетИзДокумента.ИдентификаторСтроки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрочиеУдержания.Сотрудник КАК Сотрудник,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.Сумма КАК Сумма,
	|	ПрочиеУдержания.ДокументОснование КАК ДокументОснование,
	|	ПрочиеУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПрочиеУдержания.Подразделение КАК Подразделение,
	|	БухучетИзДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетИзДокумента.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетИзДокумента КАК БухучетИзДокумента
	|		ПО ПрочиеУдержания.ИдентификаторСтроки = БухучетИзДокумента.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрочиеУдержания.Сотрудник КАК Сотрудник,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.Сумма КАК Сумма,
	|	ПрочиеУдержания.ДокументОснование КАК ДокументОснование,
	|	ПрочиеУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПрочиеУдержания.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(Удержания.ОкруглятьРезультатРаспределения, ЛОЖЬ) КАК ОкруглятьРезультатРаспределения
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетИзДокумента КАК БухучетИзДокумента
	|		ПО ПрочиеУдержания.ИдентификаторСтроки = БухучетИзДокумента.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО ПрочиеУдержания.ВидУдержания = Удержания.Ссылка
	|ГДЕ
	|	ПрочиеУдержания.СтратегияОтраженияВУчете <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета)
	|	И БухучетИзДокумента.ИдентификаторСтроки ЕСТЬ NULL";
	
	УдалитьВТ.Добавить("ВТПрочиеУдержанияДляРаспределения");  
	УдалитьВТ.Добавить("ВТБухучетИзДокумента");
	УдалитьВТ.Добавить("ВТМаксимальныеПериоды");
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	// Обработаем удержания, для которых указан бухучет в виде расчета или в документе основании
	// для таких строк необходимо выполнить распределение только по рабочим местам.

	// удержания для которых указан бухучет в документе
	ПрочиеУдержания = Результат[КоличествоРезультатов-1].Выгрузить();
	// добавим удержания для которых указан бухучет в виде расчета
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[КоличествоРезультатов-2].Выгрузить(), ПрочиеУдержания);
	Если ПрочиеУдержания.Количество()>0 Тогда
		// Выполняем распределение удержаний только по рабочим местам.
		ТаблицаРаспределения =  УдержанияПоРабочимМестам(ПрочиеУдержания, БазовыеНачисления, Организация, ПериодРегистрации);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
	КонецЕсли;
	
	// Обработаем удержания со стратегией по базе или по фактическим начислениям
	ПрочиеУдержания = Результат[КоличествоРезультатов].Выгрузить();
	Если ПрочиеУдержания.Количество()>0 Тогда
		ПараметрыРаспределения.УчитыватьЗнакБазовыхЗначений = Не ИсходныеДанные.ОкончательныйРасчет;
		ПараметрыРаспределения.БазовыеВидыРасчета = БазовыеВидыРасчета;
		ТаблицаРаспределения = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(ПрочиеУдержания, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, ПараметрыРаспределения);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет распределение строк с ограничением удержаний по рабочим местам и статьям
//	
//	Параметры
//		Организация - СправочникСсылка.Организация - организация по которой выполняется распределение.
//		ПериодРегистрации - Дата - месяц.
//		ОграниченияВзысканий - ТаблицаЗначений - таблица, строки которой необходимо распределить.
//		ИсключаемыйРегистратор - ДокументСсылка - документ, данные которого необходимо исключить при распределении.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - структура таблицы соответствует  таблице ОграниченияВзысканий.
//
Функция ОграниченияВзысканийПоРабочимМестамИСтатьям(Организация, ПериодРегистрации, ОграниченияВзысканий, ИсключаемыйРегистратор) Экспорт
	
	РезультатыРаспределения = ОграниченияВзысканий.СкопироватьКолонки();
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ОграниченияВзысканий, "ФизическоеЛицо", Истина);
	Удержания = ОбщегоНазначения.ВыгрузитьКолонку(ОграниченияВзысканий, "ВидУдержания", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("Удержания", Удержания);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК Ссылка,
	|	Удержания.ОкруглятьРезультатРаспределения КАК ОкруглятьРезультатРаспределения
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка В(&Удержания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
	|	НачисленияУдержания.Контрагент КАК Контрагент,
	|	НачисленияУдержания.ДатаНачала КАК ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.Организация = &Организация
	|	И НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияУдержания.ФизическоеЛицо В(&ФизическиеЛица)
	|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
	|	И НачисленияУдержания.Регистратор <> &ИсключаемыйРегистратор
	|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.ДатаОкончания,
	|	НачисленияУдержания.СтатьяФинансирования,
	|	НачисленияУдержания.Контрагент,
	|	НачисленияУдержания.ДатаНачала,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.НачислениеУдержание";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТочностьОкругления = Новый Соответствие;
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТочностьОкругления.Вставить(Выборка.Ссылка, ?(Выборка.ОкруглятьРезультатРаспределения,0,2));
	КонецЦикла;
	
	БазаРаспределения = РезультатЗапроса[1].Выгрузить();
	
	ПоляОтбора = "ФизическоеЛицо,ВидУдержания,ДатаНачала,ДатаОкончания,Контрагент";
	БазаРаспределения.Индексы.Добавить(ПоляОтбора);
	Отбор = Новый Структура(ПоляОтбора);
	СтрокиБазы = Новый Массив;
	СтрокиБезБазы = Новый Массив;
	РаспределениеУдержаний = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	Для каждого СтрокаУдержаний Из ОграниченияВзысканий Цикл
		
		СтрокиБазы.Очистить();
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаУдержаний);
		НайденныеСтроки = БазаРаспределения.НайтиСтроки(Отбор);
		
		Если СтрокаУдержаний.КатегорияУдержания <> Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента
			И ЗначениеЗаполнено(СтрокаУдержаний.ДокументОснование) Тогда
			
			Для каждого СтрокаБазы Из НайденныеСтроки Цикл
				Если СтрокаБазы.ДокументОснование = СтрокаУдержаний.ДокументОснование Тогда
					СтрокиБазы.Добавить(СтрокаБазы);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			СтрокиБазы = НайденныеСтроки;
		КонецЕсли;
		
		Если СтрокиБазы.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиБазы, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма, Коэффициенты, ТочностьОкругления[СтрокаУдержаний.ВидУдержания]);
		
		Если РаспределенныеСуммы = Неопределено Тогда
			СтрокиБезБазы.Добавить(СтрокаУдержаний);
		Иначе
			
			Для Индекс = 0 По СтрокиБазы.Количество() - 1 Цикл
				
				СтрокаРаспределения = СтрокиБазы[Индекс];
				НоваяСтрока = РаспределениеУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				
				НоваяСтрока.Сотрудник 				= СтрокаРаспределения.Сотрудник;
				НоваяСтрока.Подразделение 			= СтрокаРаспределения.Подразделение;
				НоваяСтрока.СтатьяФинансирования 	= СтрокаРаспределения.СтатьяФинансирования;
				НоваяСтрока.СтатьяРасходов 			= СтрокаРаспределения.СтатьяРасходов;
				НоваяСтрока.Результат 				= РаспределенныеСуммы[Индекс];
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(РаспределениеУдержаний);
	
	Если СтрокиБезБазы.Количество() > 0 Тогда
		ОтражениеЗарплатыВУчете.РаспределитьУдержанияПоБазеПоУмолчанию(РаспределениеУдержаний, СтрокиБезБазы, Организация, ПериодРегистрации, Истина);
	КонецЕсли;
	
	РаспределениеУдержаний.Индексы.Добавить("ИдентификаторСтроки");
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	Для каждого СтрокаТЗ Из ОграниченияВзысканий Цикл
	
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		НайденныеСтроки = РаспределениеУдержаний.НайтиСтроки(Отбор);
		Для каждого СтрокаРаспределения Из НайденныеСтроки Цикл
		
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Сотрудник 				= СтрокаРаспределения.Сотрудник;
			НоваяСтрока.Подразделение 			= СтрокаРаспределения.Подразделение;
			НоваяСтрока.СтатьяФинансирования 	= СтрокаРаспределения.СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов 			= СтрокаРаспределения.СтатьяРасходов;
			НоваяСтрока.Сумма 					= СтрокаРаспределения.Результат;
		
		КонецЦикла;
	
	КонецЦикла;
	
	РезультатыРаспределения.Колонки.ВидУдержания.Имя = "Удержание";
	
	Возврат РезультатыРаспределения;
	
КонецФункции 

#КонецОбласти

Функция НоваяТаблицаРезультатПогашениеЗаймов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	// колонки для совместимости, для займов будут с пустыми значениями 
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип));

	
	Возврат Таблица;

КонецФункции

Процедура ДополнитьМассивТиповНачисления(МассивТипов) Экспорт

	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
КонецПроцедуры

// Дополняет записи набора записей регистра СведенияОДоходахНДФЛ аналитикой: Статьи финансирования и/или Статьи расходов
// Параметры 
//		Движения - коллекции наборов записей движений документа, должна содержать коллекции еще не записанных наборов
//			СведенияОДоходахНДФЛ
//			НачисленияУдержанияПоСотрудникамАвансом - коллекция может отсутствовать или быть пустой.
//			НачисленияУдержанияПоСотрудникам - коллекция может отсутствовать или быть пустой.
//		
Процедура ДополнитьСведенияОДоходахНДФЛСведениямиОРаспределенииПоСтатьям(Движения, Аванс = Ложь) Экспорт

	Если Аванс Тогда
		ИмяТаблицы = "НачисленияУдержанияПоСотрудникамАвансом";
	Иначе
		ИмяТаблицы = "НачисленияУдержанияПоСотрудникам";
	КонецЕсли;
	
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		Если Движения.Свойство(ИмяТаблицы) = Ложь Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Движения.Найти(ИмяТаблицы) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РаспределениеНачислений = Движения[ИмяТаблицы].Выгрузить();
	Если РаспределениеНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПустыеЗначенияТерритории = ОтражениеЗарплатыВУчете.ПустыеЗначенияТерриторииДляПараметраЗапросов();
	Запрос.УстановитьПараметр("ПустыеТерритории", ПустыеЗначенияТерритории);
	Запрос.УстановитьПараметр("РаспределениеНачислений", РаспределениеНачислений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РаспределениеНачислений.НачислениеУдержание КАК Начисление,
	|	РаспределениеНачислений.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА РаспределениеНачислений.МестоПолученияДохода В (&ПустыеТерритории)
	|			ТОГДА РаспределениеНачислений.ТерриторияВыполненияРаботВОрганизации
	|		ИНАЧЕ РаспределениеНачислений.МестоПолученияДохода
	|	КОНЕЦ КАК Территория,
	|	РаспределениеНачислений.Сотрудник КАК Сотрудник,
	|	РаспределениеНачислений.Подразделение КАК Подразделение,
	|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеНачислений.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачислений
	|ИЗ
	|	&РаспределениеНачислений КАК РаспределениеНачислений
	|ГДЕ
	|	РаспределениеНачислений.Сумма <> 0
	|	И РаспределениеНачислений.ИдентификаторСтроки > 0
	|	И (РаспределениеНачислений.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))
	|			ИЛИ РаспределениеНачислений.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|				И (РаспределениеНачислений.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|					ИЛИ РаспределениеНачислений.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)))";
	// Условие "РаспределениеНачислений.ИдентификаторСтроки > 0" учитывает исправление документа текущим периодом.
	Запрос.Выполнить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			Модуль.УдалитьСуммыЗаСчетГрантовВТаблицеБухучетНачислений(Запрос.МенеджерВременныхТаблиц, "ВТРаспределениеНачислений");
		КонецЕсли;
	КонецЕсли;
	
	СведенияОДоходах = Движения.СведенияОДоходахНДФЛ.Выгрузить();
	
	// Учет исправлений документа текущим периодом.
	Отбор = Новый Структура("Сторно", Истина);
	СведенияОДоходахСторно = СведенияОДоходах.Скопировать(Отбор);
	Если СведенияОДоходахСторно.Количество() > 0 Тогда
		Отбор.Сторно = Ложь;
		СведенияОДоходах = СведенияОДоходах.Скопировать(Отбор);
	КонецЕсли;
	
	СведенияОДоходахЗачетАванса = СведенияОДоходах.СкопироватьКолонки();
	Если Не Аванс Тогда
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.ЗарегистрированоПриНачисленииАванса) Тогда
				СтрокиКУдалению.Добавить(СтрокаТЗ);
				ЗаполнитьЗначенияСвойств(СведенияОДоходахЗачетАванса.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
			СведенияОДоходах.Удалить(СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	НовыеСведенияОДоходах = ОтражениеЗарплатыВУчете.НовыеСведенияОДоходахДополненныеСтатьями(СведенияОДоходах, Запрос.МенеджерВременныхТаблиц);
	НовыеСведенияОДоходахЗачетАванса = НовыеСведенияОДоходахЗачетАвансаДополненныеСтатьями(СведенияОДоходахЗачетАванса);
	
	Для каждого СтрокаТЗ Из СведенияОДоходахСторно Цикл
		ЗаполнитьЗначенияСвойств(НовыеСведенияОДоходах.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из НовыеСведенияОДоходахЗачетАванса Цикл
		ЗаполнитьЗначенияСвойств(НовыеСведенияОДоходах.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Если НовыеСведенияОДоходах.Количество()>0 Тогда
		Движения.СведенияОДоходахНДФЛ.Загрузить(НовыеСведенияОДоходах);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет записи набора записей регистра СведенияОДоходахНДФЛ аналитикой: Статьи финансирования и/или Статьи расходов
// Параметры 
//		Движения - коллекции наборов записей движений документа, должна содержать коллекции еще не записанных наборов
//			СведенияОДоходахНДФЛ
//			НачисленияУдержанияПоКонтрагентамАкционерам - коллекция может отсутствовать или быть пустой.
//		
Процедура ДополнитьСведенияОДоходахНДФЛКонтрагентовСведениямиОРаспределенииПоСтатьям(Движения) Экспорт

	Если Движения.Найти("НачисленияУдержанияПоКонтрагентамАкционерам") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспределениеНачислений = Движения["НачисленияУдержанияПоКонтрагентамАкционерам"].Выгрузить();
	Если РаспределениеНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	РаспределениеНачислений.Колонки.Период.Имя = "ДатаНачала";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПустыеЗначенияТерритории = ОтражениеЗарплатыВУчете.ПустыеЗначенияТерриторииДляПараметраЗапросов();
	Запрос.УстановитьПараметр("ПустыеТерритории", ПустыеЗначенияТерритории);
	Запрос.УстановитьПараметр("РаспределениеНачислений", РаспределениеНачислений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РаспределениеНачислений.НачислениеУдержание КАК Начисление,
	|	РаспределениеНачислений.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА РаспределениеНачислений.МестоПолученияДохода В (&ПустыеТерритории)
	|			ТОГДА РаспределениеНачислений.ТерриторияВыполненияРаботВОрганизации
	|		ИНАЧЕ РаспределениеНачислений.МестоПолученияДохода
	|	КОНЕЦ КАК Территория,
	|	РаспределениеНачислений.Сотрудник КАК Сотрудник,
	|	РаспределениеНачислений.Подразделение КАК Подразделение,
	|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеНачислений.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачислений
	|ИЗ
	|	&РаспределениеНачислений КАК РаспределениеНачислений
	|ГДЕ
	|	РаспределениеНачислений.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))
	|	И РаспределениеНачислений.Сумма <> 0";
	Запрос.Выполнить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			Модуль.УдалитьСуммыЗаСчетГрантовВТаблицеБухучетНачислений(Запрос.МенеджерВременныхТаблиц, "ВТРаспределениеНачислений");
		КонецЕсли;
	КонецЕсли;
	
	СведенияОДоходах = Движения.СведенияОДоходахНДФЛ.Выгрузить();
	
	НовыеСведенияОДоходах = ОтражениеЗарплатыВУчете.НовыеСведенияОДоходахДополненныеСтатьями(СведенияОДоходах, Запрос.МенеджерВременныхТаблиц);
	Если НовыеСведенияОДоходах.Количество()>0 Тогда
		Движения.СведенияОДоходахНДФЛ.Загрузить(НовыеСведенияОДоходах);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТРаспределениеНачисленийДляНДФЛ(ПараметрыРаспределения, СуществуетТаблицаУсловий, ИсключаемыеРегистраторы)
	
	Организация 			= ПараметрыРаспределения.Организация;
	ПериодРегистрации 		= ПараметрыРаспределения.ПериодРегистрации;
	МенеджерВременныхТаблиц = ПараметрыРаспределения.МенеджерВременныхТаблиц;
	МассивФизическихЛиц 	= ПараметрыРаспределения.МассивФизическихЛиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	
	Если Не СуществуетТаблицаУсловий Тогда
		Запрос.УстановитьПараметр("ЕдиновременныеПособия", ВидыОсобыхНачисленийЕдиновременныеПособия());
		Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
		УсловиеОтбора = "
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
		|ГДЕ
		|	Начисления.Организация = &Организация
		|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Начисления.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))
		|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)
		|	И НЕ Начисления.ДанныеМежрасчетногоПериода
		|	И НЕ Начисления.НачислениеУдержание В (&ЕдиновременныеПособия)
		|	И НЕ Начисления.Регистратор В (&ИсключаемыеРегистраторы)";
	Иначе
		УсловиеОтбора = "
		|	ВТУсловияОтбораДляРаспределенияНДФЛ КАК УсловияОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
		|		ПО УсловияОтбора.Регистратор = Начисления.Регистратор
		|			И УсловияОтбора.ФизическоеЛицо = Начисления.ФизическоеЛицо
		|			И Начисления.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))";
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.МестоПолученияДохода КАК МестоПолученияДохода,
	|	Начисления.НачислениеУдержание КАК НачислениеУдержание,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.Регистратор КАК ДокументОснованиеНДФЛ,
	|	Начисления.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачисленийДляНДФЛ
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления", УсловиеОтбора);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам", "РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам");
		ПолеДокументОснованиеНДФЛ = "
		|	ВЫБОР
		|		КОГДА Начисления.Регистратор ССЫЛКА Документ.ПереносЗатратНаПерсоналМеждуСтатьями
		|			ТОГДА Начисления.ПервичныйРегистратор
		|		ИНАЧЕ Начисления.Регистратор
		|	КОНЕЦ КАК ДокументОснованиеНДФЛ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Регистратор КАК ДокументОснованиеНДФЛ", ПолеДокументОснованиеНДФЛ);
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТРаспределениеНачисленийДляУдержаний(ОтборФизическиеЛица, ИсключаемыеРегистраторы, ПараметрыРаспределения) Экспорт
	
	Организация 			= ПараметрыРаспределения.Организация;
	ПериодРегистрации 		= ПараметрыРаспределения.ПериодРегистрации;
	МенеджерВременныхТаблиц = ПараметрыРаспределения.МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ФизическиеЛица", ОтборФизическиеЛица);
	Запрос.УстановитьПараметр("ЕдиновременныеПособия", ВидыОсобыхНачисленийЕдиновременныеПособия());
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	Начисления.НачислениеУдержание КАК НачислениеУдержание,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачисленийДляУдержаний
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))
	|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)
	|	И НЕ Начисления.ДанныеМежрасчетногоПериода
	|	И НЕ Начисления.НачислениеУдержание В (&ЕдиновременныеПособия)
	|	И НЕ Начисления.Регистратор В (&ИсключаемыеРегистраторы)";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ОписаниеПоляПодразделениеУчетаЗатрат = 
		"	ВЫБОР
		|		КОГДА Начисления.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА Начисления.Подразделение
		|		ИНАЧЕ Начисления.ПодразделениеУчетаЗатрат
		|	КОНЕЦ КАК ПодразделениеУчетаЗатрат";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат", ОписаниеПоляПодразделениеУчетаЗатрат);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления", "РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК Начисления");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТУдержанияПоСотрудникамКонтрагент(МенеджерВременныхТаблиц, ИмяТаблицы = "ВТУдержанияПоСотрудникам") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержанияПоСотрудникам.Удержание,
	|	УдержанияПоСотрудникам.ДокументОснование КАК ДокументОснование,
	|	ПолучателиУдержаний.Контрагент
	|ПОМЕСТИТЬ ВТУдержанияПоСотрудникамКонтрагент
	|ИЗ
	|	#ИмяТаблицы КАК УдержанияПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУдержаний КАК ПолучателиУдержаний
	|		ПО УдержанияПоСотрудникам.ДокументОснование = ПолучателиУдержаний.ДокументОснование
	|			И УдержанияПоСотрудникам.ФизическоеЛицо = ПолучателиУдержаний.ФизическоеЛицо
	|			И УдержанияПоСотрудникам.Удержание = ПолучателиУдержаний.Удержание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьТаблицуНДФЛ(ПериодРегистрации, Организация, МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	
	ВидыОпераций = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ(Истина);

	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	0 КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.Организация = &Организация
	|	И НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияУдержания.НачислениеУдержание В(&ВидыОпераций)
	|	И НЕ НачисленияУдержания.Регистратор ССЫЛКА Документ.НачислениеДивидендов
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.Организация,
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сотрудник,
	|	ТаблицаНДФЛ.НачислениеУдержание,
	|	ТаблицаНДФЛ.СтатьяРасходов,
	|	ТаблицаНДФЛ.Подразделение,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ТерриторияВыполненияРаботВОрганизации,
	|	ТаблицаНДФЛ.РегистрацияВНалоговомОргане,
	|	ТаблицаНДФЛ.ИдентификаторСтроки
	|ИЗ
	|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Организация КАК Организация,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.НачислениеУдержание КАК НачислениеУдержание,
	|	ВременнаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,
	|	ВременнаяТаблица.Сумма КАК Сумма,
	|	ВременнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ВременнаяТаблица.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВременнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТТаблицаНДФЛ
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачислениеУдержание";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьТаблицуНачислений(ПериодРегистрации, Организации, МенеджерВременныхТаблиц, Сотрудники) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОтборОрганизаций = Организации;
	Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
		ОтборОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организации", ОтборОрганизаций);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	УсловиеПоСотрудникам = "ИСТИНА";
	Если Сотрудники <> Неопределено Тогда
		УсловиеПоСотрудникам = "Начисления.Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	&ПериодРегистрации КАК ДатаНачала,
	|	&ПериодРегистрации КАК ДатаОкончания,
	|	&ПериодРегистрации КАК ПериодДействия,
	|	Начисления.НачислениеУдержание КАК НачислениеУдержание,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	0 КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК Сторно,
	|	ЛОЖЬ КАК ФиксСторно
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК Начисления
	|ГДЕ
	|	Начисления.Организация В(&Организации)
	|	И Начисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	И &УсловиеПоСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Регистратор,
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПериодДействия,
	|	Начисления.НачислениеУдержание,
	|	Начисления.Сумма,
	|	Начисления.ДокументОснование,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сторно,
	|	Начисления.ФиксСторно
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Регистратор КАК Регистратор,
	|	ВременнаяТаблица.Организация КАК Организация,
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,
	|	ВременнаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВременнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ВременнаяТаблица.ДатаНачала КАК ДатаНачала,
	|	ВременнаяТаблица.ДатаОкончания КАК ДатаОкончания,
	|	ВременнаяТаблица.ПериодДействия КАК ПериодДействия,
	|	ВременнаяТаблица.НачислениеУдержание КАК НачислениеУдержание,
	|	ВременнаяТаблица.Сумма КАК Сумма,
	|	ВременнаяТаблица.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВременнаяТаблица.Сторно КАК Сторно,
	|	ВременнаяТаблица.ФиксСторно КАК ФиксСторно
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВременнаяТаблица";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотрудникам", УсловиеПоСотрудникам);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьТаблицуУдержаний(ПериодРегистрации, Организации, МенеджерВременныхТаблиц, Сотрудники) Экспорт

	ВидыОсобыхНачисленийИУдержанийНДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОтборОрганизаций = Организации;
	Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
		ОтборОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организации", ОтборОрганизаций);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	
	УсловиеПоСотрудникам = "ИСТИНА";
	Если Сотрудники <> Неопределено Тогда
		УсловиеПоСотрудникам = "НачисленияУдержания.Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УдержанияПоСотрудникам.Организация КАК Организация,
	|	УдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|	УдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|	УдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|	УдержанияПоСотрудникам.ДатаНачала КАК ДатаНачала,
	|	УдержанияПоСотрудникам.Удержание КАК Удержание,
	|	УдержанияПоСотрудникам.Сумма КАК Сумма,
	|	УдержанияПоСотрудникам.ДокументОснование КАК ДокументОснование,
	|	УдержанияПоСотрудникам.Контрагент КАК Контрагент,
	|	УдержанияПоСотрудникам.ВидОперации КАК ВидОперации,
	|	УдержанияПоСотрудникам.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	ВТУдержанияПоСотрудникам КАК УдержанияПоСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НАЧАЛОПЕРИОДА(НачисленияУдержания.Период, МЕСЯЦ),
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.Сумма,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.Контрагент,
	|	ВЫБОР
	|		КОГДА УдержаниеВидОперации.ВидОперации ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)
	|		КОГДА УдержаниеВидОперации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты)
	|		КОГДА УдержаниеВидОперации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты)
	|		ИНАЧЕ УдержаниеВидОперации.ВидОперации
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК УдержаниеВидОперации
	|		ПО НачисленияУдержания.НачислениеУдержание = УдержаниеВидОперации.НачислениеУдержание
	|ГДЕ
	|	НачисленияУдержания.Организация В(&Организации)
	|	И НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НЕ НачисленияУдержания.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|	И &УсловиеПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУдержанияПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Организация КАК Организация,
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,
	|	ВременнаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВременнаяТаблица.ДатаНачала КАК ДатаНачала,
	|	ВременнаяТаблица.Удержание КАК Удержание,
	|	ВременнаяТаблица.Сумма КАК Сумма,
	|	ВременнаяТаблица.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблица.Контрагент КАК Контрагент,
	|	ВременнаяТаблица.ВидОперации КАК ВидОперации,
	|	ВременнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТУдержанияПоСотрудникам
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВременнаяТаблица";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотрудникам", УсловиеПоСотрудникам);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьТаблицуНачислениеУдержаниеВидОперации(Таблица) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДополняемаяТаблица", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НачислениеУдержание,
	|	Таблица.ВидОперации
	|ПОМЕСТИТЬ ВТДополняемаяТаблица
	|ИЗ
	|	&ДополняемаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополняемаяТаблица.НачислениеУдержание КАК НачислениеУдержание,
	|	ДополняемаяТаблица.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТДополняемаяТаблица КАК ДополняемаяТаблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыВыплатБывшимСотрудникам.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам)
	|ИЗ
	|	Справочник.ВидыВыплатБывшимСотрудникам КАК ВидыВыплатБывшимСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыПрочихДоходовФизическихЛиц.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
	|ИЗ
	|	Справочник.ВидыПрочихДоходовФизическихЛиц КАК ВидыПрочихДоходовФизическихЛиц";
	
	Таблица = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Функция ТипыПоляДокументОснование() Экспорт
	
	МассивТипов = Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип.Типы();
	МассивТиповКА = Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержанияПоКонтрагентамАкционерам.Тип.Типы();
	
	Для каждого Значение Из МассивТиповКА Цикл
		МассивТипов.Добавить(Значение);
	КонецЦикла;
		
	Возврат МассивТипов;
	
КонецФункции

Функция ТипыПоляПервичныйРегистратор() Экспорт

	Возврат Метаданные.ОпределяемыеТипы.РегистраторыБухучетНачисленияУдержанияПоСотрудникам.Тип.Типы();

КонецФункции

Функция БазаРаспределенияНДФЛКУдержанию(ТаблицаУсловийОтбора, ПоСотрудникам) Экспорт

	Если ПоСотрудникам Тогда
		Возврат БазаРаспределенияНДФЛКУдержаниюСотрудников(ТаблицаУсловийОтбора);
	Иначе
		Возврат БазаРаспределенияНДФЛКУдержаниюКонтрагентов(ТаблицаУсловийОтбора);
	КонецЕсли;

КонецФункции

// Функция дополняет переданную таблицу значений результатами отражения в бухучете исчисленного НДФЛ.
//	Параметры
//		ТаблицаУсловийОтбора, таблица значений с полями
//			* ФизическоеЛицо
//			* ДокументОснование, ОпределяемыйТип.ДокументыОснованияНДФЛ
//
//	Возвращаемое значение - таблица значений с полями
//			* ФизическоеЛицо
//			* Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//			* ДокументОснование, ОпределяемыйТип.ДокументыОснованияНДФЛ
//			* КатегорияДохода, тип ПеречислениеСсылка.КатегорииДоходовНДФЛ.
//			* СтатьяФинансирования, Тип СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов, Тип СправочникСсылка.СтатьиРасходовЗарплата
//			* Сумма
//
Функция БазаРаспределенияНДФЛКУдержаниюСотрудников(ТаблицаУсловийОтбора)
	
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	ПустыеЗначенияТерритории = ОтражениеЗарплатыВУчете.ПустыеЗначенияТерриторииДляПараметраЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаУсловийОтбора", ТаблицаУсловийОтбора);
	Запрос.УстановитьПараметр("ПустыеТерритории", ПустыеЗначенияТерритории);
	Запрос.УстановитьПараметр("ИсчисленныеНалоги", Перечисления.ВидыОсобыхНачисленийИУдержаний.СтрокиИсчисленныхНалогов());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТСписокУсловий
	|ИЗ
	|	&ТаблицаУсловийОтбора КАК ТаблицаУсловийОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА НЕ НачисленияУдержания.МестоПолученияДохода В (&ПустыеТерритории)
	|			ТОГДА НачисленияУдержания.МестоПолученияДохода
	|		КОГДА НЕ НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации В (&ПустыеТерритории)
	|			ТОГДА НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации
	|		ИНАЧЕ НачисленияУдержания.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	НачисленияУдержания.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
	|	НачисленияУдержания.Сумма КАК Сумма
	|ИЗ
	|	ВТСписокУсловий КАК ТаблицаУсловийОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|		ПО ТаблицаУсловийОтбора.ДокументОснование = НачисленияУдержания.Регистратор
	|			И ТаблицаУсловийОтбора.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо
	|			И (НачисленияУдержания.НачислениеУдержание В (&ИсчисленныеНалоги))
	|			И (НЕ НачисленияУдержания.Сторно)
	|ГДЕ
	|	НачисленияУдержания.Сумма <> 0
	|	И НЕ НачисленияУдержания.ЗачетАвансаНДФЛ";
	
	Если ИспользоватьСтатьиФинансирования Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.НачисленияУдержанияПоСотрудникам", "РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам");
	КонецЕсли;
	БухучетНДФЛ = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА НЕ НачисленияУдержания.МестоПолученияДохода В (&ПустыеТерритории)
	|			ТОГДА НачисленияУдержания.МестоПолученияДохода
	|		КОГДА НЕ НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации В (&ПустыеТерритории)
	|			ТОГДА НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации
	|		ИНАЧЕ НачисленияУдержания.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	НачисленияУдержания.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
	|	НачисленияУдержания.Сумма КАК Сумма
	|ИЗ
	|	ВТСписокУсловий КАК ТаблицаУсловийОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержания
	|		ПО ТаблицаУсловийОтбора.ДокументОснование = НачисленияУдержания.Регистратор
	|			И ТаблицаУсловийОтбора.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо
	|			И (НачисленияУдержания.НачислениеУдержание В (&ИсчисленныеНалоги))
	|			И (НЕ НачисленияУдержания.Сторно)
	|ГДЕ
	|	НачисленияУдержания.Сумма <> 0";
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), БухучетНДФЛ);
	
	Если ИспользоватьСтатьиФинансирования Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА НЕ БухучетНачисленияУдержания.МестоПолученияДохода В (&ПустыеТерритории)
		|			ТОГДА БухучетНачисленияУдержания.МестоПолученияДохода
		|		КОГДА НЕ БухучетНачисленияУдержания.ТерриторияВыполненияРаботВОрганизации В (&ПустыеТерритории)
		|			ТОГДА БухучетНачисленияУдержания.ТерриторияВыполненияРаботВОрганизации
		|		ИНАЧЕ БухучетНачисленияУдержания.Подразделение
		|	КОНЕЦ КАК Подразделение,
		|	БухучетНачисленияУдержания.КатегорияДохода КАК КатегорияДохода,
		|	БухучетНачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачисленияУдержания.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	БухучетНачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
		|	БухучетНачисленияУдержания.Сумма КАК Сумма
		|ИЗ
		|	ВТСписокУсловий КАК ТаблицаУсловийОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисленияУдержания
		|		ПО ТаблицаУсловийОтбора.ДокументОснование = БухучетНачисленияУдержания.ПервичныйРегистратор
		|			И ТаблицаУсловийОтбора.ФизическоеЛицо = БухучетНачисленияУдержания.ФизическоеЛицо
		|			И (БухучетНачисленияУдержания.НачислениеУдержание В(&ИсчисленныеНалоги))
		|			И (НЕ БухучетНачисленияУдержания.Сторно)
		|ГДЕ
		|	БухучетНачисленияУдержания.Сумма <> 0
		|	И НЕ БухучетНачисленияУдержания.ЗачетАвансаНДФЛ";
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), БухучетНДФЛ);
		
	КонецЕсли;
	
	Если Не ИспользоватьСтатьиФинансирования Тогда
		БухучетНДФЛ.ЗаполнитьЗначения(Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(),"СтатьяФинансирования");
	КонецЕсли;
	
	БухучетНДФЛ.Свернуть(
		"ФизическоеЛицо,
		|ДокументОснование,
		|Подразделение,
		|КатегорияДохода,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|ВидДоходаИсполнительногоПроизводства,
		|ВидУдержания", 
		"Сумма");
	Отбор = Новый Структура("Сумма", 0);
	НулевыеСуммы = БухучетНДФЛ.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НулевыеСуммы Цикл
		БухучетНДФЛ.Удалить(СтрокаТЗ);
	КонецЦикла;
	
	Возврат БухучетНДФЛ;
	
КонецФункции

// Функция дополняет переданную таблицу значений результатами отражения в бухучете исчисленного НДФЛ.
//	Параметры
//		ТаблицаУсловийОтбора, таблица значений с полями
//			* ФизическоеЛицо
//			* ДокументОснование, ОпределяемыйТип.ДокументыОснованияНДФЛ
//
//	Возвращаемое значение - таблица значений с полями
//			* ФизическоеЛицо
//			* Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//			* ДокументОснование, ОпределяемыйТип.ДокументыОснованияНДФЛ
//			* КатегорияДохода, тип ПеречислениеСсылка.КатегорииДоходовНДФЛ.
//			* СтатьяФинансирования, Тип СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов, Тип СправочникСсылка.СтатьиРасходовЗарплата
//			* Сумма
//
Функция БазаРаспределенияНДФЛКУдержаниюКонтрагентов(ТаблицаУсловийОтбора)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаУсловийОтбора", ТаблицаУсловийОтбора);
	Запрос.УстановитьПараметр("ИспользоватьСтатьиФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный"));
	Запрос.УстановитьПараметр("ИсчисленныеНалоги", Перечисления.ВидыОсобыхНачисленийИУдержаний.СтрокиИсчисленныхНалогов());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТСписокУсловий
	|ИЗ
	|	&ТаблицаУсловийОтбора КАК ТаблицаУсловийОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА НачисленияУдержания.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка) КАК КатегорияДохода,
	|	ВЫБОР
	|		КОГДА НачисленияУдержания.НачислениеУдержание В (&ИсчисленныеНалоги)
	|			ТОГДА НачисленияУдержания.НачислениеУдержание
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|	КОНЕЦ КАК ВидУдержания,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	|ИЗ
	|	ВТСписокУсловий КАК ТаблицаУсловийОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|		ПО ТаблицаУсловийОтбора.ДокументОснование = НачисленияУдержания.Регистратор
	|			И ТаблицаУсловийОтбора.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо
	|			И (НачисленияУдержания.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ))
	|			И (НачисленияУдержания.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам), &ИсчисленныеНалоги))
	|			И (НЕ НачисленияУдержания.Сторно)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУсловийОтбора.ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.ДокументОснование,
	|	НачисленияУдержания.Подразделение,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА НачисленияУдержания.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства,
	|	ВЫБОР
	|		КОГДА НачисленияУдержания.НачислениеУдержание В (&ИсчисленныеНалоги)
	|			ТОГДА НачисленияУдержания.НачислениеУдержание
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(НачисленияУдержания.Сумма) <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает структуру с данными для распределения НДФЛ по статьям.
//
// Параметры:
// 		ПараметрыРаспределения - Структура, описание см НовоеОписаниеПараметровРаспределенияНДФЛ.
//
// Возвращаемое значение:
// 		Структура - Ключ содержит имя данных
// 			* БазаВсеНачисления - ТаблицаЗначений
// 			* СтрокиУжеУдержано - Соответствие.
//
Функция ДанныеДляРаспределенияНДФЛ(ПараметрыРаспределения) Экспорт

	ДанныеДляРаспределенияНДФЛ = Новый Структура("БазаВсеНачисления, СтрокиУжеУдержано");
	ДанныеДляРаспределенияНДФЛ.СтрокиУжеУдержано = Новый Соответствие;
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	
	МенеджерВременныхТаблиц = ПараметрыРаспределения.МенеджерВременныхТаблиц;
	Организация 			= ПараметрыРаспределения.Организация;
	ПериодРегистрации 		= ПараметрыРаспределения.ПериодРегистрации;
	МассивФизическихЛиц 	= ПараметрыРаспределения.МассивФизическихЛиц;
	МассивУдержаний 		= ПараметрыРаспределения.МассивУдержаний;
	ИсключаемыйРегистратор 	= ПараметрыРаспределения.ИсключаемыйРегистратор;
	ОкончательныйРасчет 	= ПараметрыРаспределения.ОкончательныйРасчет;
	РегистраторыНДФЛОбновленияБухучета 	= ПараметрыРаспределения.РегистраторыНДФЛОбновленияБухучета;
	ИмяВТДанныеТекущегоДокумента 		= ПараметрыРаспределения.ИмяВТДанныеТекущегоДокумента;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПустыеЗначенияТерритории = ОтражениеЗарплатыВУчете.ПустыеЗначенияТерриторииДляПараметраЗапросов();
	Запрос.УстановитьПараметр("ПустыеТерритории", ПустыеЗначенияТерритории);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ИспользоватьСтатьиФинансирования", ИспользоватьСтатьиФинансирования);
	
	УдалитьВТ = Новый Массив;
	
	Если ОкончательныйРасчет Тогда
		
		// Если таблица существует, отбор выполняем по ней,
		// иначе будем использовать отбор по ИсключаемыеРегистраторы.
		СуществуетТаблицаУсловий = ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТУсловияОтбораДляРаспределенияНДФЛ");
		ТаблицаУсловийПустая = Истина;
		Если СуществуетТаблицаУсловий Тогда
			ТаблицаУсловийПустая = Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТУсловияОтбораДляРаспределенияНДФЛ");
		КонецЕсли;
		
		// Массив будет использоваться в условиях отбора,
		// если не переданы основания, учтенные при расчете НДФЛ.
		ИсключаемыеРегистраторы = Новый Массив;
		ИсключаемыеРегистраторы.Добавить(ИсключаемыйРегистратор);
		
		// Уточним состав исключаемых регистраторов.
		Если Не СуществуетТаблицаУсловий И ИспользоватьСтатьиФинансирования Тогда
			
			Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БухучетНачисления.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисления
			|ГДЕ
			|	БухучетНачисления.ФизическоеЛицо В(&ФизическиеЛица)
			|	И БухучетНачисления.Организация = &Организация
			|	И БухучетНачисления.ПервичныйРегистратор = &ИсключаемыйРегистратор
			|	И БухучетНачисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
			Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы, Регистраторы);
			
		КонецЕсли;
		
		// Получим уже зарегистрированное распределение начислений.
		// Если есть основания, учтенные при расчете НДФЛ, то по ним,
		// иначе без учета исключаемых регистраторов и без учета начислений межрасчетного периода.
		СоздатьВТРаспределениеНачисленийДляНДФЛ(ПараметрыРаспределения, СуществуетТаблицаУсловий, ИсключаемыеРегистраторы);
		УдалитьВТ.Добавить("ВТРаспределениеНачисленийДляНДФЛ");

		// Получение сведений об уже выполненных удержаниях.
		Если Не СуществуетТаблицаУсловий Или Не ТаблицаУсловийПустая Тогда
			
			// Определим условия отбора данных.
			Если СуществуетТаблицаУсловий Тогда
				УсловиеОтбора = "
				|	ВТУсловияОтбораДляРаспределенияНДФЛ КАК УсловияОтбора
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
				|		ПО УсловияОтбора.Регистратор = НачисленияУдержания.Регистратор
				|			И УсловияОтбора.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо
				|			И НачисленияУдержания.НачислениеУдержание В(&Удержания)";
			Иначе
				Если РегистраторыНДФЛОбновленияБухучета <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы, РегистраторыНДФЛОбновленияБухучета);
				КонецЕсли;
				Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
				УсловиеОтбора = "
				|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
				|ГДЕ
				|	НачисленияУдержания.Организация = &Организация
				|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
				|	И НачисленияУдержания.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
				|	И НачисленияУдержания.ФизическоеЛицо В(&ФизическиеЛица)
				|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
				|	И НЕ НачисленияУдержания.Регистратор В (&ИсключаемыеРегистраторы)";
			КонецЕсли;
			
			// Уточнение таблицы регистра.
			Если ИспользоватьСтатьиФинансирования Тогда
				УсловиеОтбора = СтрЗаменить(УсловиеОтбора,"РегистрНакопления.НачисленияУдержанияПоСотрудникам","РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Удержания", МассивУдержаний);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияУдержания.Сотрудник КАК Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА НЕ НачисленияУдержания.МестоПолученияДохода В (&ПустыеТерритории)
			|			ТОГДА НачисленияУдержания.МестоПолученияДохода
			|		КОГДА НЕ НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации В (&ПустыеТерритории)
			|			ТОГДА НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации
			|		ИНАЧЕ НачисленияУдержания.Подразделение
			|	КОНЕЦ КАК Территория,
			|	НачисленияУдержания.Подразделение КАК Подразделение,
			|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
			|	НачисленияУдержания.ДатаПолученияДохода КАК ДатаПолученияДохода,
			|	ВЫБОР
			|		КОГДА &ИспользоватьСтатьиФинансирования
			|			ТОГДА НачисленияУдержания.СтатьяФинансирования
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|	КОНЕЦ КАК СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
			|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
			|	НачисленияУдержания.КатегорияДохода КАК КатегорияДохода,
			|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержания.Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо,
			|	НачисленияУдержания.Подразделение,
			|	НачисленияУдержания.НачислениеУдержание,
			|	НачисленияУдержания.СтатьяРасходов,
			|	ВЫБОР
			|		КОГДА НЕ НачисленияУдержания.МестоПолученияДохода В (&ПустыеТерритории)
			|			ТОГДА НачисленияУдержания.МестоПолученияДохода
			|		КОГДА НЕ НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации В (&ПустыеТерритории)
			|			ТОГДА НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации
			|		ИНАЧЕ НачисленияУдержания.Подразделение
			|	КОНЕЦ,
			|	НачисленияУдержания.ДатаПолученияДохода,
			|	НачисленияУдержания.КатегорияДохода,
			|	ВЫБОР
			|		КОГДА &ИспользоватьСтатьиФинансирования
			|			ТОГДА НачисленияУдержания.СтатьяФинансирования
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|	КОНЕЦ,
			|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства
			|
			|ИМЕЮЩИЕ
			|	СУММА(НачисленияУдержания.Сумма) <> 0";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания", УсловиеОтбора);
			
			ДанныеДляРаспределенияНДФЛ.СтрокиУжеУдержано = ОтражениеЗарплатыВУчете.СтрокиТаблицыЗначенийПоФизическимЛицам(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеНачислений.Сотрудник КАК Сотрудник,
		|	РаспределениеНачислений.Территория КАК Территория,
		|	РаспределениеНачислений.Подразделение КАК Подразделение,
		|	РаспределениеНачислений.Начисление КАК Начисление,
		|	РаспределениеНачислений.ДатаНачала КАК ДатаНачала,
		|	РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСтатьиФинансирования
		|			ТОГДА РаспределениеНачислений.СтатьяФинансирования
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеНачислений.ДанныеТекущегоДокумента КАК ДанныеТекущегоДокумента,
		|	РаспределениеНачислений.ДокументОснование КАК ДокументОснование,
		|	СУММА(РаспределениеНачислений.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТРаспределениеНачисленийДляБазыНДФЛ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаспределениеНачислений.Сотрудник КАК Сотрудник,
		|		ВЫБОР
		|			КОГДА НЕ РаспределениеНачислений.МестоПолученияДохода В (&ПустыеТерритории)
		|				ТОГДА РаспределениеНачислений.МестоПолученияДохода
		|			КОГДА НЕ РаспределениеНачислений.ТерриторияВыполненияРаботВОрганизации В (&ПустыеТерритории)
		|				ТОГДА РаспределениеНачислений.ТерриторияВыполненияРаботВОрганизации
		|			ИНАЧЕ РаспределениеНачислений.Подразделение
		|		КОНЕЦ КАК Территория,
		|		РаспределениеНачислений.НачислениеУдержание КАК Начисление,
		|		РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|		РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|		РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|		РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|		РаспределениеНачислений.ДатаНачала КАК ДатаНачала,
		|		РаспределениеНачислений.Сумма КАК Сумма,
		|		РаспределениеНачислений.Подразделение КАК Подразделение,
		|		ЛОЖЬ КАК ДанныеТекущегоДокумента,
		|		РаспределениеНачислений.ДокументОснованиеНДФЛ КАК ДокументОснование
		|	ИЗ
		|		ВТРаспределениеНачисленийДляНДФЛ КАК РаспределениеНачислений
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РаспределениеНачислений.Сотрудник,
		|		ВЫБОР
		|			КОГДА НЕ РаспределениеНачислений.МестоПолученияДохода В (&ПустыеТерритории)
		|				ТОГДА РаспределениеНачислений.МестоПолученияДохода
		|			КОГДА НЕ РаспределениеНачислений.Территория В (&ПустыеТерритории)
		|				ТОГДА РаспределениеНачислений.Территория
		|			ИНАЧЕ РаспределениеНачислений.Подразделение
		|		КОНЕЦ,
		|		РаспределениеНачислений.Начисление,
		|		РаспределениеНачислений.ФизическоеЛицо,
		|		РаспределениеНачислений.СтатьяФинансирования,
		|		РаспределениеНачислений.СтатьяРасходов,
		|		РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства,
		|		РаспределениеНачислений.ДатаНачала,
		|		РаспределениеНачислений.Сумма,
		|		РаспределениеНачислений.Подразделение,
		|		&ДанныеТекущегоДокумента,
		|		&ДокументОснованиеНДФЛ
		|	ИЗ
		|		ВТРаспределениеНачисленийТекущегоДокумента КАК РаспределениеНачислений
		|	ГДЕ
		|		РаспределениеНачислений.ФизическоеЛицо В(&ФизическиеЛица)) КАК РаспределениеНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеНачислений.Сотрудник,
		|	РаспределениеНачислений.Подразделение,
		|	РаспределениеНачислений.Начисление,
		|	РаспределениеНачислений.ФизическоеЛицо,
		|	РаспределениеНачислений.СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеНачислений.Территория,
		|	РаспределениеНачислений.ДатаНачала,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСтатьиФинансирования
		|			ТОГДА РаспределениеНачислений.СтатьяФинансирования
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|	КОНЕЦ,
		|	РаспределениеНачислений.ДанныеТекущегоДокумента,
		|	РаспределениеНачислений.ДокументОснование
		|
		|ИМЕЮЩИЕ
		|	СУММА(РаспределениеНачислений.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеНачисленийДляБазыНДФЛ.Сотрудник КАК Сотрудник,
		|	РаспределениеНачисленийДляБазыНДФЛ.Территория КАК Территория,
		|	РаспределениеНачисленийДляБазыНДФЛ.Подразделение КАК Подразделение,
		|	РаспределениеНачисленийДляБазыНДФЛ.Начисление КАК Начисление,
		|	РаспределениеНачисленийДляБазыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РаспределениеНачисленийДляБазыНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределениеНачисленийДляБазыНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеНачисленийДляБазыНДФЛ.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеНачисленийДляБазыНДФЛ.Сумма КАК Сумма
		|ИЗ
		|	ВТРаспределениеНачисленийДляБазыНДФЛ КАК РаспределениеНачисленийДляБазыНДФЛ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеНачислений.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА НЕ РаспределениеНачислений.МестоПолученияДохода В (&ПустыеТерритории)
		|			ТОГДА РаспределениеНачислений.МестоПолученияДохода
		|		КОГДА НЕ РаспределениеНачислений.Территория В (&ПустыеТерритории)
		|			ТОГДА РаспределениеНачислений.Территория
		|		ИНАЧЕ РаспределениеНачислений.Подразделение
		|	КОНЕЦ КАК Территория,
		|	РаспределениеНачислений.Подразделение КАК Подразделение,
		|	РаспределениеНачислений.Начисление КАК Начисление,
		|	РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСтатьиФинансирования
		|			ТОГДА РаспределениеНачислений.СтатьяФинансирования
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеНачислений.ДатаНачала КАК ДатаНачала,
		|	&ДанныеТекущегоДокумента КАК ДанныеТекущегоДокумента,
		|	&ДокументОснованиеНДФЛ КАК ДокументОснование,
		|	СУММА(РаспределениеНачислений.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТРаспределениеНачисленийДляБазыНДФЛ
		|ИЗ
		|	ВТРаспределениеНачисленийТекущегоДокумента КАК РаспределениеНачислений
		|ГДЕ
		|	РаспределениеНачислений.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НЕ РаспределениеНачислений.МестоПолученияДохода В (&ПустыеТерритории)
		|			ТОГДА РаспределениеНачислений.МестоПолученияДохода
		|		КОГДА НЕ РаспределениеНачислений.Территория В (&ПустыеТерритории)
		|			ТОГДА РаспределениеНачислений.Территория
		|		ИНАЧЕ РаспределениеНачислений.Подразделение
		|	КОНЕЦ,
		|	РаспределениеНачислений.Подразделение,
		|	РаспределениеНачислений.Начисление,
		|	РаспределениеНачислений.ДатаНачала,
		|	РаспределениеНачислений.ФизическоеЛицо,
		|	РаспределениеНачислений.Сотрудник,
		|	РаспределениеНачислений.СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСтатьиФинансирования
		|			ТОГДА РаспределениеНачислений.СтатьяФинансирования
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(РаспределениеНачислений.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеНачисленийДляБазыНДФЛ.Сотрудник КАК Сотрудник,
		|	РаспределениеНачисленийДляБазыНДФЛ.Территория КАК Территория,
		|	РаспределениеНачисленийДляБазыНДФЛ.Подразделение КАК Подразделение,
		|	РаспределениеНачисленийДляБазыНДФЛ.Начисление КАК Начисление,
		|	РаспределениеНачисленийДляБазыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РаспределениеНачисленийДляБазыНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределениеНачисленийДляБазыНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеНачисленийДляБазыНДФЛ.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеНачисленийДляБазыНДФЛ.Сумма КАК Сумма
		|ИЗ
		|	ВТРаспределениеНачисленийДляБазыНДФЛ КАК РаспределениеНачисленийДляБазыНДФЛ";
		
	КонецЕсли;
	
	КолонкиТаблицы = МенеджерВременныхТаблиц.Таблицы[ИмяВТДанныеТекущегоДокумента].Колонки;
	Если КолонкиТаблицы.Найти("ДанныеТекущегоДокумента") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеТекущегоДокумента", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеТекущегоДокумента", "РаспределениеНачислений.ДанныеТекущегоДокумента");
	КонецЕсли;
	Если КолонкиТаблицы.Найти("ДокументОснованиеНДФЛ") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументОснованиеНДФЛ", "НЕОПРЕДЕЛЕНО");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументОснованиеНДФЛ", "РаспределениеНачислений.ДокументОснованиеНДФЛ");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРаспределениеНачисленийТекущегоДокумента", ИмяВТДанныеТекущегоДокумента);
	ДанныеДляРаспределенияНДФЛ.БазаВсеНачисления = Запрос.Выполнить().Выгрузить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			Модуль.УдалитьСуммыЗаСчетГрантовВТаблицеБухучетНачислений(МенеджерВременныхТаблиц, "ВТРаспределениеНачисленийДляБазыНДФЛ");
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат ДанныеДляРаспределенияНДФЛ;

КонецФункции

Функция УдержанияПоРабочимМестам(ТаблицаУдержаний, БазаРаспределения, Организация, ПериодРегистрации)
	
	РезультатРаспределения = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат РезультатРаспределения;
	КонецЕсли;
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(БазаРаспределения, "ФизическоеЛицо");
	
	КолонкиГруппировки = "ГоловнойСотрудник,Сотрудник,Подразделение,ПодразделениеУчетаЗатрат";
	
	СтрокиБезБазы = Новый Массив;
	ОтборСтрок = Новый Структура("ФизическоеЛицо");
	Для Каждого СтрокаУдержаний Из ТаблицаУдержаний Цикл
		
		ОтборСтрок.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
		СтрокиРаспределения = БазаРаспределения.Скопировать(ОтборСтрок);

		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		СтрокиРаспределения.Свернуть(КолонкиГруппировки,"Сумма");
		
		СтрокиРаспределенияБезУчетаПодразделения = Новый Массив;
		СтрокиРаспределенияСУчетомПодразделения = Новый Массив;
		СтрокиРаспределенияСУчетомОсновногоСотрудника = Новый Массив;
		Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиРаспределения Цикл
			СтрокиРаспределенияБезУчетаПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			// Если подразделение совпадает, то эта строка с более точным источником распределением.
			Если СтрокаУдержаний.Подразделение = СтрокаБазыПоФизическомуЛицу.Подразделение Тогда
				СтрокиРаспределенияСУчетомПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) 
				И СтрокаУдержаний.Сотрудник = СтрокаБазыПоФизическомуЛицу.ГоловнойСотрудник Тогда
				СтрокиРаспределенияСУчетомОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
		КонецЦикла;
		
		СтрокиРаспределения = СтрокиРаспределенияСУчетомОсновногоСотрудника;
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиРаспределения = СтрокиРаспределенияСУчетомПодразделения;
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезУчетаПодразделения;
			КонецЕсли;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма, Коэффициенты, 2);
		
		Если РаспределенныеСуммы <> Неопределено Тогда
			
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				НоваяСтрока = РезультатРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[Индекс]);
				НоваяСтрока.Результат = РаспределенныеСуммы[Индекс];
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			НоваяСтрока.Результат = СтрокаУдержаний.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(РезультатРаспределения);
	
	РезультатРаспределения.ЗаполнитьЗначения(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения, "ВидДоходаИсполнительногоПроизводства");
	
	Если СтрокиБезБазы.Количество() > 0 Тогда
		РаспределитьУдержанияПоРабочимМестамПоБазеПоУмолчанию(РезультатРаспределения, СтрокиБезБазы, Организация, ПериодРегистрации);
	КонецЕсли;
	
	Возврат РезультатРаспределения;
	
КонецФункции

Процедура РаспределитьУдержанияПоРабочимМестамПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиУдержаний, Организация, ПериодРегистрации)
	
	// Массив физических лиц, данные которых еще не распределились.
	МассивФизическихЛиц = Новый Массив;
	Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
		Если МассивФизическихЛиц.Найти(СтрокаУдержаний.ФизическоеЛицо) = Неопределено Тогда
			МассивФизическихЛиц.Добавить(СтрокаУдержаний.ФизическоеЛицо);
		КонецЕсли
	КонецЦикла;
	
	БазаПоУмолчанию = РасчетЗарплаты.БазаУдержанийПоУмолчанию(МассивФизическихЛиц, ПериодРегистрации, Организация);
	БазаПоУмолчанию.Индексы.Добавить("ФизическоеЛицо");
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо");
	Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
		
		ОтборСтрок.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
		СтрокиРаспределения = БазаПоУмолчанию.НайтиСтроки(ОтборСтрок);
		
		СтрокиРаспределенияСУчетомОсновногоСотрудника  = Новый Массив;
		СтрокиРаспределенияБезУчетаОсновногоСотрудника = Новый Массив;
		Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиРаспределения Цикл
			СтрокиРаспределенияБезУчетаОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
			Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) 
				И СтрокаУдержаний.Сотрудник = СтрокаБазыПоФизическомуЛицу.ГоловнойСотрудник Тогда
				СтрокиРаспределенияСУчетомОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
		КонецЦикла;
		
		СтрокиРаспределения = СтрокиРаспределенияСУчетомОсновногоСотрудника;
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиРаспределения = СтрокиРаспределенияБезУчетаОсновногоСотрудника;
		КонецЕсли;
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Результат = СтрокаУдержаний.Сумма;
		ИначеЕсли СтрокиРаспределения.Количество() = 1 Тогда
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			НоваяСтрока.Результат = СтрокаУдержаний.Сумма;
			
		Иначе
			
			// Распределяем пропорционально суммам в найденных строках.
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
			// распределяем суммы с учетом ранее удержанного
			РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма, Коэффициенты, 2);
			
			Если РаспределенныеСуммы <> Неопределено Тогда
				
				// добавляем распределенные суммы
				Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
					
					СтрокаРаспределения = СтрокиРаспределения[Индекс];
					НоваяСтрока = РезультатыРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
					НоваяСтрока.Результат = РаспределенныеСуммы[Индекс];
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = РезультатыРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
				НоваяСтрока.Результат = СтрокаУдержаний.Сумма;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьИсключаемыеРегистраторыБазыДляРаспределенияНДФЛ(ИсключаемыйРегистратор, ИсключаемыеРегистраторы, ПараметрыПолученияБазы) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 	ПараметрыПолученияБазы.Организация);
		Запрос.УстановитьПараметр("ФизическиеЛица", ПараметрыПолученияБазы.МассивФизическихЛиц);
		Запрос.УстановитьПараметр("ДатаНачала", 	НачалоМесяца(ПараметрыПолученияБазы.ПериодРегистрации));
		Запрос.УстановитьПараметр("ДатаОкончания", 	КонецМесяца(ПараметрыПолученияБазы.ПериодРегистрации));
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БухучетНачисления.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисления
		|ГДЕ
		|	БухучетНачисления.ФизическоеЛицо В(&ФизическиеЛица)
		|	И БухучетНачисления.Организация = &Организация
		|	И БухучетНачисления.ПервичныйРегистратор = &ИсключаемыйРегистратор
		|	И БухучетНачисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
		УстановитьПривилегированныйРежим(Истина);
		Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		УстановитьПривилегированныйРежим(Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы, Регистраторы, Истина);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьБазуУдержанийПоУмолчаниюСтатьями(БазаПоУмолчанию, Организация, ПериодРегистрации) Экспорт
	
	БазаПоУмолчанию.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	БазаПоУмолчанию.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		РасчетыПоОплатеТруда = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
		
		БазаПоУмолчанию.ЗаполнитьЗначения(РасчетыПоОплатеТруда, "СтатьяРасходов");
		
	Иначе
		
		ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьБазуУдержанийПоУмолчаниюСтатьями(БазаПоУмолчанию, Организация, ПериодРегистрации);
		
	КонецЕсли;

КонецПроцедуры

// Возвращает результат распределения НДФЛ по рабочим местам и статьям.
//
// Параметры:
//  ТаблицаНДФЛ       - ТаблицаЗначений - структура таблицы см НоваяТаблицаРезультатРасчетаНДФЛ.
//  База              - ТаблицаЗначений - рассчитанная база для распределения.
//  БазаВсеНачисления - ТаблицаЗначений - сведения для распределения тех строк, для которых нет базы.
//  СтрокиУжеУдержано - Соответствие    - сведения об уже зарегистрированных распределения НДФЛ в разрезе физических лиц.
//  Организация       - СправочникСсылка.Организации.
//  ПериодРегистрации - Дата.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см НоваяТаблицаРаспределениеРезультатовУдержаний.
//
Функция НДФЛПоРабочимМестамИСтатьям(ТаблицаНДФЛ, База, БазаВсеНачисления,
										СтрокиУжеУдержано, Организация, ПериодРегистрации) Экспорт
				
	РезультатыРаспределения = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	Если ТаблицаНДФЛ.Количество() = 0 Тогда
		Возврат РезультатыРаспределения;
	КонецЕсли;
	
	ОтрицательныеСуммыРаспределятьНаСтатьюИзНастроек = ЗначениеЗаполнено(ОтражениеЗарплатыВБухучетеРасширенный.СтатьяФинансированияОтрицательногоНалога(Организация, ПериодРегистрации));
	// Строки с отрицательной суммой НДФЛ, для отнесения на статью из настроек, если она заполнена.
	СтрокиРаспределенияНаСтатьюИзНастроек = Новый Массив;
	
	Если База.Колонки.Найти("ЗачетАванса") = Неопределено Тогда
		База.Колонки.Добавить("ЗачетАванса", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(База, "ФизическоеЛицо,ЗачетАванса");
	ОтборБазы = Новый Структура("ФизическоеЛицо,ЗачетАванса");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(БазаВсеНачисления, "ФизическоеЛицо");
	ОтборВсеНачисления = Новый Структура("ФизическоеЛицо");
	
	// Строки с положительной суммой НДФЛ, для которых нет базы.
	СтрокиБезБазы = Новый Массив;
	// Строки с отрицательной суммой НДФЛ, для которых нет базы.
	СтрокиРаспределенияПоУмочанию = Новый Массив;
	
	ДатаИзмененияПорядкаИсчисленияНалога = УчетНДФЛ.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев();
	
	Для Каждого СтрокаНДФЛ Из ТаблицаНДФЛ Цикл
		
		Если СтрокаНДФЛ.Сумма < 0 И ОтрицательныеСуммыРаспределятьНаСтатьюИзНастроек Тогда
			СтрокиРаспределенияНаСтатьюИзНастроек.Добавить(СтрокаНДФЛ);
			Продолжить;
		КонецЕсли;
		
		// При обработке "старых" данных, у которых не заполнено поле СтрокаНДФЛ.ДатаПолученияДохода
		// оставляем прежнее поведение, не учитываем ранее удержанные суммы и из базы исключаем строки с признаком ДоходМежрасчетногоПериода.
		
		УчитыватьДатуПолученияДохода = ЗначениеЗаполнено(СтрокаНДФЛ.ДатаПолученияДохода) И СтрокаНДФЛ.ДатаПолученияДохода >= ДатаИзмененияПорядкаИсчисленияНалога;
		УчитыватьКатегориюДохода     = УчитыватьДатуПолученияДохода И ЗначениеЗаполнено(СтрокаНДФЛ.КатегорияДохода) И СтрокаНДФЛ.ДатаПолученияДохода >= '20170101';
		УчитыватьУжеРаспределенные   = (СтрокаНДФЛ.Сумма <> 0) И УчитыватьДатуПолученияДохода;
		
		СтрокиРаспределения = Новый Массив;
		ОтборБазы.ФизическоеЛицо = СтрокаНДФЛ.ФизическоеЛицо;
		ОтборБазы.ЗачетАванса 	 = Ложь;
		СтрокиБазыПоФизлицу = База.НайтиСтроки(ОтборБазы);
		
		Если Не УчитыватьДатуПолученияДохода Тогда
			
			СтрокиРаспределенияБезТерритории = Новый Массив;
			Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
				Если Не СтрокаТЗ.ДоходМежрасчетногоПериода Тогда 
					Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
						СтрокиРаспределения.Добавить(СтрокаТЗ);
					КонецЕсли;
					СтрокиРаспределенияБезТерритории.Добавить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезТерритории;	
			КонецЕсли;
			
		ИначеЕсли Не УчитыватьКатегориюДохода Тогда
			
			СтрокиРаспределенияБезДаты = Новый Массив;
			Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
				Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода Тогда
					СтрокиРаспределения.Добавить(СтрокаТЗ);	
				ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
					СтрокиРаспределенияБезДаты.Добавить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезДаты;
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиРаспределения = СтрокиБазыПоФизлицу;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // учитываем дату получения дохода и категорию дохода
			
			СтрокиРаспределенияБезДатыИКатегорий = Новый Массив;
			СтрокиРаспределенияБезКатегорий = Новый Массив;
			СтрокиРаспределенияБезДата = Новый Массив;
			Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
				Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода И СтрокаТЗ.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода Тогда
					СтрокиРаспределения.Добавить(СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода Тогда
					СтрокиРаспределенияБезКатегорий.Добавить(СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода Тогда
					СтрокиРаспределенияБезДата.Добавить(СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
					СтрокиРаспределенияБезДатыИКатегорий.Добавить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
			
			ПроверитьНаЗачетАванса = (СтрокиБазыПоФизлицу.Количество() = 0);
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезКатегорий;
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиРаспределения = СтрокиРаспределенияБезДата;
					ПроверитьНаЗачетАванса = Истина;
					Если СтрокиРаспределения.Количество() = 0  Тогда
						СтрокиРаспределения = СтрокиРаспределенияБезДатыИКатегорий;
						Если СтрокиРаспределения.Количество() = 0 Тогда
							СтрокиРаспределения = СтрокиБазыПоФизлицу;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверитьНаЗачетАванса Тогда
				
				ОтборБазы.ЗачетАванса = Истина;
				СтрокиБазыЗачетАвансаПоФизлицу = База.НайтиСтроки(ОтборБазы);
				СтрокиРаспределенияЗачетАванса = Новый Массив;
				СтрокиРаспределенияЗачетАвансаБезКатегорий = Новый Массив;
				Для каждого СтрокаТЗ Из СтрокиБазыЗачетАвансаПоФизлицу Цикл
					Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода И СтрокаТЗ.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода Тогда
						СтрокиРаспределенияЗачетАванса.Добавить(СтрокаТЗ);
					ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода Тогда
						СтрокиРаспределенияЗачетАвансаБезКатегорий.Добавить(СтрокаТЗ);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокиРаспределенияЗачетАванса.Количество() = 0 Тогда
					СтрокиРаспределенияЗачетАванса = СтрокиРаспределенияЗачетАвансаБезКатегорий;
				КонецЕсли;
				
				Если СтрокиРаспределенияЗачетАванса.Количество() <> 0 Тогда
					СтрокиРаспределения = СтрокиРаспределенияЗачетАванса;
				Иначе
					СтрокиРаспределения = СтрокиРаспределенияБезДатыИКатегорий;
					Если СтрокиРаспределения.Количество() = 0 Тогда
						СтрокиРаспределения = СтрокиБазыПоФизлицу;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			Если СтрокаНДФЛ.Сумма < 0 Тогда
				СтрокиРаспределенияПоУмочанию.Добавить(СтрокаНДФЛ);
				Продолжить;
			Иначе
				// не нашли строки распределения по базе
				ОтборВсеНачисления.ФизическоеЛицо = СтрокаНДФЛ.ФизическоеЛицо;
				СтрокиБазыПоФизлицу = БазаВсеНачисления.НайтиСтроки(ОтборВсеНачисления);
				Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
					Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
						СтрокиРаспределения.Добавить(СтрокаТЗ);
					КонецЕсли;
				КонецЦикла;
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиРаспределения = СтрокиБазыПоФизлицу;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаНДФЛ);
			Продолжить;
		КонецЕсли;
		
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержано[СтрокаНДФЛ.ФизическоеЛицо];
		Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
			Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаНДФЛ.ВидУдержания 
 						И СтрокаУжеУдержаноПоФизическомуЛицу.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода
						И СтрокаУжеУдержаноПоФизическомуЛицу.Территория = СтрокаНДФЛ.Территория
						И (Не УчитыватьКатегориюДохода Или СтрокаУжеУдержаноПоФизическомуЛицу.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода) Тогда
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаНДФЛ.Сумма + РанееУдержано, Коэффициенты, 0);
		
		Если РаспределенныеСуммы <> Неопределено Тогда
			
			// вычитаем уже удержанные суммы
			Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
				
				Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
					Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаНДФЛ.ВидУдержания 
						И СтрокаУжеУдержаноПоФизическомуЛицу.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода
						И СтрокаУжеУдержаноПоФизическомуЛицу.Территория = СтрокаНДФЛ.Территория
						И (Не УчитыватьКатегориюДохода Или СтрокаУжеУдержаноПоФизическомуЛицу.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода) Тогда
						
						НоваяСтрока = РезультатыРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
						
						НоваяСтрока.Результат 			= - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
						НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// добавляем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = РезультатыРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				
				НоваяСтрока.ВидУдержания        = СтрокаНДФЛ.ВидУдержания;
				НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
				НоваяСтрока.Результат           = РаспределенныеСуммы[Индекс];
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			
			НоваяСтрока.ВидУдержания        = СтрокаНДФЛ.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
			НоваяСтрока.Результат           = СтрокаНДФЛ.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(РезультатыРаспределения);
	
	Если СтрокиБезБазы.Количество() > 0 Тогда
		ОтражениеЗарплатыВУчете.РаспределитьУдержанияПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиБезБазы, Организация, ПериодРегистрации);
	КонецЕсли;
	
	Если СтрокиРаспределенияПоУмочанию.Количество() > 0 Тогда
		ОтражениеЗарплатыВУчете.РаспределитьНДФЛПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиРаспределенияПоУмочанию, Организация, ПериодРегистрации);
	КонецЕсли;
	
	Если СтрокиРаспределенияНаСтатьюИзНастроек.Количество() > 0 Тогда
		РаспределитьНДФЛПоОсновнымРабочимМестам(РезультатыРаспределения, СтрокиРаспределенияНаСтатьюИзНастроек, Организация, ПериодРегистрации);
	КонецЕсли;
	
	Возврат РезультатыРаспределения;
	
КонецФункции

Функция ВидыОсобыхНачисленийЕдиновременныеПособия()

	Пособия = Новый Массив;
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение);
	
	Возврат Пособия;

КонецФункции

Процедура ЗаполнитьОснованияВыплатБезАванса(ОснованияВыплат, ОснованияВыплатБезАванса) Экспорт

	Для каждого СтрокаТЗ Из ОснованияВыплат Цикл
		Если ТипЗнч(СтрокаТЗ.ДокументОснование) <> Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца") Тогда
			ЗаполнитьЗначенияСвойств(ОснованияВыплатБезАванса.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция УдержанНалогСАванса(ТаблицаОтбораУжеУдержаноНДФЛ, ИсключаемыйРегистратор, ДатаОперации) Экспорт
	
	УдержанНалогСАванса = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаУсловийОтбора", ТаблицаОтбораУжеУдержаноНДФЛ);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(ДатаОперации));
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.Подразделение КАК Подразделение,
	|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование,
	|	ТаблицаУсловийОтбора.КатегорияДохода КАК КатегорияДохода,
	|	ТаблицаУсловийОтбора.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ТаблицаУсловийОтбора.КодДохода КАК КодДохода,
	|	ТаблицаУсловийОтбора.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаУсловийОтбора.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
	|ПОМЕСТИТЬ ВТСписокУсловий
	|ИЗ
	|	&ТаблицаУсловийОтбора КАК ТаблицаУсловийОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(0) КАК Сумма,
	|	СписокУсловий.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСписокУсловий КАК СписокУсловий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|		ПО СписокУсловий.ФизическоеЛицо = НДФЛКПеречислению.ФизическоеЛицо
	|			И СписокУсловий.Подразделение = НДФЛКПеречислению.Подразделение
	|			И (НДФЛКПеречислению.ДокументОснование ССЫЛКА Документ.НачислениеЗаПервуюПоловинуМесяца)
	|			И (НЕ СписокУсловий.ДокументОснование ССЫЛКА Документ.НачислениеЗаПервуюПоловинуМесяца)
	|			И СписокУсловий.КатегорияДохода = НДФЛКПеречислению.КатегорияДохода
	|			И СписокУсловий.СтавкаНалогообложенияРезидента = НДФЛКПеречислению.СтавкаНалогообложенияРезидента
	|			И СписокУсловий.КодДохода = НДФЛКПеречислению.КодДохода
	|			И СписокУсловий.РегистрацияВНалоговомОргане = НДФЛКПеречислению.РегистрацияВНалоговомОргане
	|			И СписокУсловий.ВключатьВДекларациюПоНалогуНаПрибыль = НДФЛКПеречислению.ВключатьВДекларациюПоНалогуНаПрибыль
	|			И (НДФЛКПеречислению.Регистратор <> &ИсключаемыйРегистратор)
	|			И (НДФЛКПеречислению.Период <= &ДатаАктуальности)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокУсловий.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(0) <> 0";

	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве();
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + "СУММА(НДФЛКПеречислению." + ИмяРесурса + ") КАК " + ИмяРесурса + "," + Символы.ПС;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СУММА(0) КАК Сумма,", ТекстНалогов);
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + ?(ЗначениеЗаполнено(ТекстНалогов), "ИЛИ ", "") + "СУММА(НДФЛКПеречислению." + ИмяРесурса + ") <> 0 ";
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(0) <> 0", ТекстНалогов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдержанНалогСАванса.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	Возврат УдержанНалогСАванса;
	
КонецФункции

// Выполняет распределение НДФЛ по основным рабочим местам и статье из настроек.
//
// Параметры:
//  РезультатыРаспределения - ТаблицаЗначений - см НоваяТаблицаРаспределениеРезультатовУдержаний().
//  СтрокиНДФЛ - ТаблицаЗначений, Массив - коллекция строк таблицы значений, для распределения,
//  	обязательные колонки:
//  	* ИдентификаторСтроки
//  	* Сотрудник
//  	* ФизическоеЛицо
//  	* ВидУдержания
//  	* Сумма
//  	* Подразделение
//  	* ДокументОснование
//	Организация - СправочникСсылка.Организации.
//	ПериодРегистрации - Дата.
//
Процедура РаспределитьНДФЛПоОсновнымРабочимМестам(РезультатыРаспределения, СтрокиНДФЛ, Организация, ПериодРегистрации)

	СтатьяФинансирования = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяФинансированияОтрицательногоНалога(Организация, ПериодРегистрации);
	СтатьяРасходов = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяОплатаТруда();
	
	// Массив физических лиц, данные которых еще не распределились.
	МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиНДФЛ, "ФизическоеЛицо", Истина);
	
	// Описание таблицы базы см РасчетЗарплаты.НоваяТаблицаБазаУдержанийПоУмолчанию.
	БазаПоУмолчанию = РасчетЗарплаты.БазаУдержанийПоУмолчанию(МассивФизическихЛиц, ПериодРегистрации, Организация);
	
	БазаПоУмолчанию.Колонки.Добавить("ВидДоходаИсполнительногоПроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	БазаПоУмолчанию.ЗаполнитьЗначения(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения, "ВидДоходаИсполнительногоПроизводства");
	
	БазаПоУмолчанию.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	БазаПоУмолчанию.ЗаполнитьЗначения(СтатьяФинансирования, "СтатьяФинансирования");
	
	БазаПоУмолчанию.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	БазаПоУмолчанию.ЗаполнитьЗначения(СтатьяРасходов, "СтатьяРасходов");
	
	БазаПоУмолчанию.Индексы.Добавить("ФизическоеЛицо");
	
	ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(МассивФизическихЛиц, Истина, Организация, ПериодРегистрации);
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо");
	Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
		
		ОтборСтрок.ФизическоеЛицо = СтрокаНДФЛ.ФизическоеЛицо;
		СтрокиРаспределения = БазаПоУмолчанию.НайтиСтроки(ОтборСтрок);
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
			НоваяСтрока.Результат = СтрокаНДФЛ.Сумма;
		ИначеЕсли СтрокиРаспределения.Количество() = 1 Тогда
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			НоваяСтрока.ВидУдержания        = СтрокаНДФЛ.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
			НоваяСтрока.Результат = СтрокаНДФЛ.Сумма;
		Иначе
			
			СтрокаРаспределения = СтрокиРаспределения[0];
			
			// используем строку по основному сотруднику
			НайденнаяСтрока = ОсновныеСотрудникиФизическихЛиц.Найти(СтрокаНДФЛ.ФизическоеЛицо, "ФизическоеЛицо");
			Если НайденнаяСтрока <> Неопределено Тогда
				Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
					Если НайденнаяСтрока.Сотрудник = СтрокаТЗ.Сотрудник Тогда
						СтрокаРаспределения = СтрокаТЗ;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
			НоваяСтрока.ВидУдержания        = СтрокаНДФЛ.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
			НоваяСтрока.Результат = СтрокаНДФЛ.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеСведенияОДоходахЗачетАвансаДополненныеСтатьями(СведенияОДоходах)
	
	НовыеСведенияОДоходах = СведенияОДоходах.СкопироватьКолонки();
	Если Не ЗначениеЗаполнено(СведенияОДоходах) Тогда
		Возврат НовыеСведенияОДоходах;
	КонецЕсли;
	
	СведенияОДоходах.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ИдентификаторСтроки = 1;
	Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
		СтрокаТЗ.ИдентификаторСтроки = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СведенияОДоходах", СведенияОДоходах);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходахНДФЛ.Период КАК Период,
	|	СведенияОДоходахНДФЛ.Организация КАК Организация,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.КодВычета КАК КодВычета,
	|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|	СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса КАК ЗарегистрированоПриНачисленииАванса,
	|	СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСведенияОДоходахЗачетАванса
	|ИЗ
	|	&СведенияОДоходах КАК СведенияОДоходахНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗачетАванса.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходах.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СведенияОДоходах.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(СведенияОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(СведенияОДоходах.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТСведенияОДоходахЗачетАванса КАК ЗачетАванса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
	|		ПО ЗачетАванса.Организация = СведенияОДоходах.Организация
	|			И ЗачетАванса.РегистрацияВНалоговомОргане = СведенияОДоходах.РегистрацияВНалоговомОргане
	|			И ЗачетАванса.СтавкаНалогообложения = СведенияОДоходах.СтавкаНалогообложения
	|			И ЗачетАванса.ИсточникДоходаЗаПределамиРФ = СведенияОДоходах.ИсточникДоходаЗаПределамиРФ
	|			И ЗачетАванса.ФизическоеЛицо = СведенияОДоходах.ФизическоеЛицо
	|			И ЗачетАванса.Сотрудник = СведенияОДоходах.Сотрудник
	|			И ЗачетАванса.Подразделение = СведенияОДоходах.Подразделение
	|			И ЗачетАванса.ПодразделениеСотрудника = СведенияОДоходах.ПодразделениеСотрудника
	|			И ЗачетАванса.КатегорияДохода = СведенияОДоходах.КатегорияДохода
	|			И ЗачетАванса.КодДохода = СведенияОДоходах.КодДохода
	|			И ЗачетАванса.КодВычета = СведенияОДоходах.КодВычета
	|			И ЗачетАванса.Начисление = СведенияОДоходах.Начисление
	|			И ЗачетАванса.ЗарегистрированоПриНачисленииАванса = СведенияОДоходах.ЗарегистрированоПриНачисленииАванса
	|			И (СведенияОДоходах.ДокументОснование ССЫЛКА Документ.НачислениеЗаПервуюПоловинуМесяца)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗачетАванса.ИдентификаторСтроки,
	|	СведенияОДоходах.СтатьяФинансирования,
	|	СведенияОДоходах.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахЗачетАванса.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходахЗачетАванса.Период КАК Период,
	|	СведенияОДоходахЗачетАванса.Организация КАК Организация,
	|	СведенияОДоходахЗачетАванса.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахЗачетАванса.Начисление КАК Начисление,
	|	СведенияОДоходахЗачетАванса.ПодразделениеСотрудника КАК Подразделение,
	|	СведенияОДоходахЗачетАванса.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
	|	СведенияОДоходахЗачетАванса.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходахЗачетАванса.СуммаВычета КАК СуммаВычета
	|ИЗ
	|	ВТСведенияОДоходахЗачетАванса КАК СведенияОДоходахЗачетАванса
	|ГДЕ
	|	НЕ(СведенияОДоходахЗачетАванса.СуммаДохода = 0
	|				И СведенияОДоходахЗачетАванса.СуммаВычета = 0)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.ВГраница();
	
	СтрокиКРаспределению = РезультатЗапроса[КоличествоРезультатов].Выгрузить();
	База = РезультатЗапроса[КоличествоРезультатов-1].Выгрузить();
	СтрокиБезБазы = СтрокиКРаспределению.СкопироватьКолонки();
	
	РезультатРаспределения = Новый ТаблицаЗначений;
	РезультатРаспределения.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	РезультатРаспределения.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатРаспределения.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатРаспределения.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	РезультатРаспределения.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	База.Индексы.Добавить("ИдентификаторСтроки");
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	Для каждого СтрокаТЗ Из СтрокиКРаспределению Цикл
	
		СуммаДохода = СтрокаТЗ.СуммаДохода;
		СуммаВычета = СтрокаТЗ.СуммаВычета;
		
		Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтроки;
		СтрокиБазы = База.НайтиСтроки(Отбор);
		
		Если Не ЗначениеЗаполнено(СтрокиБазы) Тогда
			ЗаполнитьЗначенияСвойств(СтрокиБезБазы.Добавить(), СтрокаТЗ);
			Продолжить;
		КонецЕсли;
		
		КоэффициентыСуммаДохода = Новый Массив;
		КоэффициентыСуммаВычета = Новый Массив;
		Для каждого СтрокаТЗ Из СтрокиБазы Цикл
			КоэффициентыСуммаДохода.Добавить(СтрокаТЗ.СуммаДохода);
			КоэффициентыСуммаВычета.Добавить(СтрокаТЗ.СуммаВычета);
		КонецЦикла;
		
		Если КоэффициентыСуммаДохода.Количество() = 1 Тогда
			
			НоваяСтрока = РезультатРаспределения.Добавить();
			НоваяСтрока.ИдентификаторСтроки  = СтрокаТЗ.ИдентификаторСтроки;
			НоваяСтрока.СтатьяФинансирования = СтрокиБазы[0].СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов 		 = СтрокиБазы[0].СтатьяРасходов;
			НоваяСтрока.СуммаДохода 		 = СуммаДохода;
			НоваяСтрока.СуммаВычета 		 = СуммаВычета;
			
		Иначе
			
			РаспределенныеСуммыДохода = Неопределено;
			Если СуммаДохода <> 0 Тогда
				РаспределенныеСуммыДохода = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаДохода, КоэффициентыСуммаДохода);
			КонецЕсли;
			
			РаспределенныеСуммыВычета = Неопределено;
			Если СуммаВычета <> 0 Тогда
				РаспределенныеСуммыВычета = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаВычета, КоэффициентыСуммаВычета);
			КонецЕсли;
			
			Если РаспределенныеСуммыДохода = Неопределено И РаспределенныеСуммыВычета = Неопределено Тогда
				
				НоваяСтрока = РезультатРаспределения.Добавить();
				НоваяСтрока.ИдентификаторСтроки  = СтрокаТЗ.ИдентификаторСтроки;
				НоваяСтрока.СтатьяФинансирования = СтрокиБазы[0].СтатьяФинансирования;
				НоваяСтрока.СтатьяРасходов 		 = СтрокиБазы[0].СтатьяРасходов;
				НоваяСтрока.СуммаДохода 		 = СуммаДохода;
				НоваяСтрока.СуммаВычета 		 = СуммаВычета;
				
			Иначе
				
				РезультатРаспределенияСтроки = РезультатРаспределения.СкопироватьКолонки();
				
				Если РаспределенныеСуммыДохода <> Неопределено Тогда
					Для Индекс = 0 По КоэффициентыСуммаДохода.ВГраница() Цикл
						НоваяСтрока = РезультатРаспределенияСтроки.Добавить();
						НоваяСтрока.ИдентификаторСтроки  = СтрокаТЗ.ИдентификаторСтроки;
						НоваяСтрока.СтатьяФинансирования = СтрокиБазы[Индекс].СтатьяФинансирования;
						НоваяСтрока.СтатьяРасходов 		 = СтрокиБазы[Индекс].СтатьяРасходов;
						НоваяСтрока.СуммаДохода 		 = РаспределенныеСуммыДохода[Индекс];
					КонецЦикла;
				КонецЕсли;
				
				Если РаспределенныеСуммыВычета <> Неопределено Тогда
					Для Индекс = 0 По КоэффициентыСуммаВычета.ВГраница() Цикл
						НоваяСтрока = РезультатРаспределенияСтроки.Добавить();
						НоваяСтрока.ИдентификаторСтроки  = СтрокаТЗ.ИдентификаторСтроки;
						НоваяСтрока.СтатьяФинансирования = СтрокиБазы[Индекс].СтатьяФинансирования;
						НоваяСтрока.СтатьяРасходов 		 = СтрокиБазы[Индекс].СтатьяРасходов;
						НоваяСтрока.СуммаВычета 		 = РаспределенныеСуммыВычета[Индекс];
					КонецЦикла;
				КонецЕсли;
				
				РезультатРаспределенияСтроки.Свернуть("ИдентификаторСтроки,СтатьяФинансирования,СтатьяРасходов","СуммаДохода,СуммаВычета");
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРаспределенияСтроки, РезультатРаспределения);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если СтрокиБезБазы.Количество() > 0 Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
			ОтражениеЗарплатыВБухучете.РаспределитьСведенияОДоходахПоСтатьямиПоБазеПоУмолчанию(СтрокиБезБазы, РезультатРаспределения);
		Иначе
			
			НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
			ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
			
			Для каждого СтрокаТЗ Из СтрокиБезБазы Цикл
			
				НоваяСтрока = РезультатРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				
				ВидОперации = НачислениеУдержаниеВидОперации[СтрокаТЗ.Начисление];
				Если ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
					СтатьяРасходов = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды];
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам 
					Или ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов Тогда
					СтатьяРасходов = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
				Иначе
					СтатьяРасходов = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
				КонецЕсли;
				
				НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатРаспределения.Количество() > 0 Тогда
		
		РезультатРаспределения.Индексы.Добавить("ИдентификаторСтроки");
		Отбор = Новый Структура("ИдентификаторСтроки");
		
		Для каждого СтрокаДоходов Из СведенияОДоходах Цикл
			
			Отбор.ИдентификаторСтроки = СтрокаДоходов.ИдентификаторСтроки;
			СтрокиРаспределения = РезультатРаспределения.НайтиСтроки(Отбор);
			Если СтрокиРаспределения.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НовыеСведенияОДоходах.Добавить(), СтрокаДоходов);
			Иначе	
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					НоваяСтрока = НовыеСведенияОДоходах.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоходов);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеСведенияОДоходах;

КонецФункции

Процедура ДополнительноеУсловиеБазыЗачетАванса(ДополнительноеУсловие) Экспорт

	ДополнительноеУсловие = "СведенияОДоходах.ДокументОснование ССЫЛКА Документ.НачислениеЗаПервуюПоловинуМесяца";

КонецПроцедуры

Процедура ДополнитьТипыРегистраторовНачисленийУдержаний(ТипыРегистраторов) Экспорт

	ТипыДополняемыхРегистраторов = Метаданные.РегистрыНакопления.НачисленияУдержанияПоКонтрагентамАкционерам.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	Для каждого ТипРегистратора Из ТипыДополняемыхРегистраторов Цикл
		ТипыРегистраторов.Добавить(ТипРегистратора);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

