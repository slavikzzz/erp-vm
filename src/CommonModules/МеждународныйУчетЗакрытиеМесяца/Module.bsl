
#Область ПрограммныйИнтерфейс

#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ЗакрытиеМесяцаСервер.ДополнитьНазванияТаблицДляЗаданий(Запрос, ЭлементСоответствия.Ключ);
		ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			Запрос.МенеджерВременныхТаблиц.Таблицы,
			ТекстЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ОтражениеДокументовВМеждународномУчете

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОтражениеДокументовВМеждународномУчете(ТаблицаЭтапов,ТекущийРодитель) Экспорт

	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВМеждународномУчете,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетЗакрытиеМесяца.Использование_ОтражениеДокументовВМеждународномУчете");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетЗакрытиеМесяца.Выполнить_ОтражениеДокументовВМеждународномУчете");
	НоваяСтрока.ДействиеПодробнее  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ОтражениеДокументовВМеждународномУчете.Формы.Форма.ПолноеИмя());
	
КонецПроцедуры

// Выполняет проверку необходимости выполнения этапа закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Использование_ОтражениеДокументовВМеждународномУчете(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПроводкиМеждународногоУчетаПоДаннымОперативного")
	 И НЕ ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Формирование проводок по данным оперативного и регламентированного учета не используется.';
				|en = 'Posting generation for real-time and local accounting data is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(
	|			&КонецПериода,
	|			Организация В (&МассивОрганизаций)) КАК ПланыСчетовМеждународногоУчетаОрганизаций";
	
	Запрос.Выполнить();
	
	Если ЗакрытиеМесяцаСервер.РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций с необходимостью отражения международного учета.';
				|en = 'There are no companies that require recording in financial accounting.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ОтражениеДокументов.Организация = Организации.Ссылка
	|ГДЕ
	|	ОтражениеДокументов.ДатаОтражения <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
	|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВРучную))
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете),
	|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров))
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЕстьОжидающиеОтражения = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете = НЕ МассивРезультатов[2].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает отражения в учете документов: %1';
					|en = 'Documents awaiting posting in accounting: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если ЕстьНеОтраженныеВУчете Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				?(ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета"),
					НСтр("ru = 'Не отражено в учете документов: %1';
						|en = 'Not recorded in document accounting: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					НСтр("ru = 'Не отражено в учете документов из-за отсутствия правил отражения: %1';
						|en = 'Not recorded in document accounting since there are no recording rules: %1'", ОбщегоНазначения.КодОсновногоЯзыка())),
				СокрЛП(МассивРезультатов[2].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет этап закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Выполнить_ОтражениеДокументовВМеждународномУчете(ПараметрыОбработчика) Экспорт
	
	ПараметрыОтражения = МеждународныйУчетПроведениеСервер.ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.Организации = ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций;
	ПараметрыОтражения.ДатаОкончания = КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(ПараметрыОтражения);
	
КонецПроцедуры

#КонецОбласти

#Область РеклассификацияДолгосрочныхАктивовОбязательств

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РеклассификацияДолгосрочныхАктивовОбязательств(ТаблицаЭтапов, ТекущийРодитель) Экспорт

	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РеклассификацияДолгосрочныхАктивовОбязательствМУ,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Run'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетЗакрытиеМесяца.Использование_РеклассификацияДолгосрочныхАктивовОбязательств");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетЗакрытиеМесяца.Выполнить_РеклассификацияДолгосрочныхАктивовОбязательств");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РеклассификацияДолгосрочныхАктивовОбязательств);
	
КонецПроцедуры

// Выполняет проверку необходимости выполнения этапа закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Использование_РеклассификацияДолгосрочныхАктивовОбязательств(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Формирование проводок по объектам учета не используется.';
				|en = 'Entry generation by accounting objects is not used.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика, Истина);
		
		Запрос = Новый Запрос;
		ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	ВТОрганизации КАК Организации
		|";
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
				ПараметрыОбработчика,
				НСтр("ru = 'Деление активов и обязательств на краткосрочные/долгосрочные не используется.';
					|en = 'Division of assets and liabilities into short-term or long-term ones is not used.'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		Иначе
			Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
			ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Организации.Количество());
		КонецЕсли;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацииРеклассификации = МеждународныйУчетПоДаннымФинансовыхРегистров.ОрганизацииРеклассификацииДолгосрочныхАктивовОбязательств(
		Организации, ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В (&ОрганизацииРеклассификации)
	|";
	
	Запрос.УстановитьПараметр("ОрганизацииРеклассификации", ОрганизацииРеклассификации);
	Запрос.Выполнить();
	
	НаличиеОперацииОбязательно = ОрганизацииРеклассификации.Количество() > 0;
	
	ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика,,, НаличиеОперацииОбязательно);
	
КонецПроцедуры

// Выполняет этап закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Выполнить_РеклассификацияДолгосрочныхАктивовОбязательств(ПараметрыОбработчика) Экспорт
	
	ВыполнитьЗаданияКЗакрытиюМесяца(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазницВФункциональнойВалюте

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_РасчетКурсовыхРазницВФункциональнойВалюте(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазницВФункциональнойВалюте,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетЗакрытиеМесяца.Использование_РасчетКурсовыхРазницВФункциональнойВалюте");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетЗакрытиеМесяца.Выполнить_РасчетКурсовыхРазницВФункциональнойВалюте");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницФункциональнаяВалюта);
КонецПроцедуры

// Выполняет проверку необходимости выполнения этапа закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Использование_РасчетКурсовыхРазницВФункциональнойВалюте(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации";
	ВыборкаПоПланамСчетов = Запрос.Выполнить().Выбрать();
	
	ВсегоНеЗакрыто = 0;
	Пока ВыборкаПоПланамСчетов.Следующий() Цикл
		НеЗакрытоПоПлануСчетов = Документы.РегламентнаяОперацияМеждународныйУчет.НезакрытыеКурсовыеРазницы(
			ВыборкаПоПланамСчетов.ПланСчетов,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
			КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
			Истина);
		
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, НеЗакрытоПоПлануСчетов);
		ВсегоНеЗакрыто = ВсегоНеЗакрыто + НеЗакрытоПоПлануСчетов;
	КонецЦикла;
	
	Если ВсегоНеЗакрыто <> 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые курсовые разницы для расчета.';
				|en = 'There are unclosed exchange differences for calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет этап закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Выполнить_РасчетКурсовыхРазницВФункциональнойВалюте(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область ЗакрытиеСчетовУчетаДоходовИРасходовМУ

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ЗакрытиеСчетовУчетаДоходовИРасходовМУ,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Run'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетЗакрытиеМесяца.Использование_ЗакрытиеСчетовУчетаДоходовИРасходовМУ");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетЗакрытиеМесяца.Выполнить_ЗакрытиеСчетовУчетаДоходовИРасходовМУ");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов);
КонецПроцедуры

// Выполняет проверку необходимости выполнения этапа закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Использование_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации";
	ВыборкаПоПланамСчетов = Запрос.Выполнить().Выбрать();
	
	ВсегоНеЗакрыто = 0;
	Пока ВыборкаПоПланамСчетов.Следующий() Цикл
		НеЗакрытоПоПлануСчетов = Документы.РегламентнаяОперацияМеждународныйУчет.ЕстьНезакрытыеСчетаУчетаДоходовРасходов(
			ВыборкаПоПланамСчетов.ПланСчетов,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
			КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, НеЗакрытоПоПлануСчетов);
		ВсегоНеЗакрыто = ВсегоНеЗакрыто + НеЗакрытоПоПлануСчетов;
	КонецЦикла;
	
	Если ВсегоНеЗакрыто <> 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые счета учета.';
				|en = 'There are unclosed ledger accounts.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет этап закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Выполнить_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазницВВалютеПредставления

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РасчетКурсовыхРазницВВалютеПредставления(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазницВВалютеПредставления,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетЗакрытиеМесяца.Использование_РасчетКурсовыхРазницВВалютеПредставления");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетЗакрытиеМесяца.Выполнить_РасчетКурсовыхРазницВВалютеПредставления");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления);
КонецПроцедуры

// Выполняет проверку необходимости выполнения этапа закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Использование_РасчетКурсовыхРазницВВалютеПредставления(ПараметрыОбработчика) Экспорт
	
	Если Не ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации
	|ГДЕ
	|	ВТОрганизации.ВалютаФункциональная <> ВТОрганизации.ПланСчетов.ВалютаПредставления
	|;
	|
	|////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации
	|";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Если РезультатыЗапроса[0].Пустой() Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Функциональная валюта совпадает с валютой представления.';
				|en = 'Functional currency matches the reporting currency.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ВыборкаПоПланамСчетов = РезультатыЗапроса[1].Выбрать();
	
	ВсегоНеПересчитано = 0;
	Пока ВыборкаПоПланамСчетов.Следующий() Цикл
		
		НеПересчитаноПоПлануСчетов = Документы.РегламентнаяОперацияМеждународныйУчет.НеПересчитаноВВалютуПредставления(
			ВыборкаПоПланамСчетов.ПланСчетов,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
			КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
			Истина);
		
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ВсегоНеПересчитано);
		ВсегоНеПересчитано = ВсегоНеПересчитано + НеПересчитаноПоПлануСчетов;
	КонецЦикла;
	
	Если ВсегоНеПересчитано <> 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые курсовые разницы для расчета.';
				|en = 'There are unclosed exchange differences for calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет этап закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Выполнить_РасчетКурсовыхРазницВВалютеПредставления(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаДатыЗапретаФормированияПроводокМУ

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_УстановкаДатыЗапретаФормированияПроводокМУ(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.УстановкаДатыЗапретаФормированияПроводокМУ,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Установить';
										|en = 'Set'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетЗакрытиеМесяца.Использование_УстановкаДатыЗапретаФормированияПроводокМУ");
	НоваяСтрока.ДействиеОформление = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетЗакрытиеМесяца.Оформление_УстановкаДатыЗапретаФормированияПроводокМУ");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.РегистрыСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет.Формы.ДатыЗапретаФормирования.ПолноеИмя());
КонецПроцедуры

// Выполняет проверку необходимости выполнения этапа закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Использование_УстановкаДатыЗапретаФормированияПроводокМУ(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует наименование этапа установки даты запрета формирования проводок
//
// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
//
Процедура Оформление_УстановкаДатыЗапретаФормированияПроводокМУ(ПараметрыОбработчика) Экспорт
	
	ДатаЗапрета = МеждународныйУчетОбщегоНазначения.ДатаЗапретаФормированияПроводок(ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Дата запрета формирования проводок %1';
			|en = 'Posting generation closing date %1'"),
		Формат(ДатаЗапрета, "ДЛФ=DD"));
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Описание действия "Открыть форму списка документов ""Регламентная операция (международный учет)""".
// Отбор по типам операций берется из свойства ТипыРегламентныхОпераций описания этапа закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ() Экспорт
	
	Описание = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РегламентнаяОперацияМеждународныйУчет.Формы.ФормаСписка.ПолноеИмя(),
		Истина);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УниверсальныеПроверкиЭтаповЗакрытияМесяца

// Проверяет использование международного учета.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования международного учета.
//
Функция ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Международный финансовый учет не ведется.';
				|en = 'Financial accounting is not kept.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет необходимость формирования проводок международного учета хотя бы у одной рассчитываемой организации в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика 			  - Структура - параметры обработчика события этапа
//	ТолькоФормироватьВременнуюТаблицу - Булево - если Истина, то не нужно изменять состояние этапа.
//	
// Возвращаемое значение:
//	Булево - признак наличие настроек.
//
Функция ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика, ТолькоФормироватьВременнуюТаблицу = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация КАК Ссылка,
	|	Т.ПланСчетов КАК ПланСчетов,
	|	ВЫБОР
	|		КОГДА Т.ПланСчетов.УчетВФункциональнойВалюте = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл)
	|			ТОГДА Т.Организация.ВалютаРегламентированногоУчета
	|		ИНАЧЕ &ВалютаУправленческогоУчета
	|	КОНЕЦ КАК ВалютаФункциональная
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&КонецПериода, Организация В (&МассивОрганизаций)) КАК Т
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Перечисление.ТипыРегламентныхОперацийМеждународныйУчет КАК ТипыРегламентныхОпераций
	|		ГДЕ
	|			ТипыРегламентныхОпераций.Ссылка В (&ТипыОпераций)
	|			И ТипыРегламентныхОпераций.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.РеклассификацияДолгосрочныхАктивовОбязательств)
	|			И ТипыРегламентныхОпераций.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Организация КАК Ссылка,
	|	Т.ПланСчетов КАК ПланСчетов,
	|	ВЫБОР
	|		КОГДА Т.ПланСчетов.УчетВФункциональнойВалюте = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл)
	|			ТОГДА Т.Организация.ВалютаРегламентированногоУчета
	|		ИНАЧЕ &ВалютаУправленческогоУчета
	|	КОНЕЦ КАК ВалютаФункциональная
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&КонецПериода, Организация В (&МассивОрганизаций)) КАК Т
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.РеклассификацияДолгосрочныхАктивовОбязательств) В (&ТипыОпераций)
	|	И Т.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств = ИСТИНА)
	|	ИЛИ
	|	(ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов) В (&ТипыОпераций)
	|	И Т.НастройкаФормированияПроводок.ЗакрытиеСчетовДоходовИРасходов В (&ПериодичностьЗакрытияСчетов))
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ПланСчетов
	|";
	
	ПериодичностьЗакрытияСчетов = Новый Массив();
	ПериодичностьЗакрытияСчетов.Добавить(Перечисления.ЗакрытиеСчетовДоходовИРасходов.Ежемесячно);
	
	Если КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) = КонецГода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) Тогда
		ПериодичностьЗакрытияСчетов.Добавить(Перечисления.ЗакрытиеСчетовДоходовИРасходов.ВКонцеГода);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодичностьЗакрытияСчетов", ПериодичностьЗакрытияСчетов);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ТипыОпераций", ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	Запрос.Выполнить();
	
	Если ЗакрытиеМесяцаСервер.РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		Если НЕ ТолькоФормироватьВременнуюТаблицу Тогда
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Не требуется отражение в международном учете.';
					|en = 'General ledger posting is not required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие документов "Регламентная операция (международный учет)".
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ТипОперации 		 		- ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//									если не указан, то анализируется типы операций из свойства ТипыРегламентныхОпераций данного этапа
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора документов по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//	НаличиеДокументаОбязательно - Булево - признак обязательного наличия документа.
//	
Процедура ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика,
	Знач ТипОперации = Неопределено, ИмяТаблицыОтбораОрганизаций = "ВТОрганизации", НаличиеДокументаОбязательно = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Ссылка    КАК ТипОперации,
	|	Организации.Ссылка КАК Организация,
	|	ПланыСчетовМеждународногоУчета.ПланСчетов КАК ПланСчетов
	|ПОМЕСТИТЬ ВТОперации
	|ИЗ
	|	Перечисление.ТипыРегламентныхОперацийМеждународныйУчет КАК Операции
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТОрганизации КАК Организации
	|	ПО
	|		ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&КонецПериода) КАК ПланыСчетовМеждународногоУчета
	|	ПО
	|		Организации.Ссылка = ПланыСчетовМеждународногоУчета.Организация
	|ГДЕ
	|	Операции.Ссылка В (&ТипыОпераций)
	|	И ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок <> ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|	И ВЫБОР
	|		КОГДА Операции.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.РеклассификацияДолгосрочныхАктивовОбязательств)
	|			ТОГДА ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств = ИСТИНА
	|		КОГДА Операции.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов)
	|			ТОГДА ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок.ЗакрытиеСчетовДоходовИРасходов В (&ПериодичностьЗакрытияСчетов)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.ТипОперации КАК ТипОперации,
	|	Операции.Организация КАК Организация,
	|	Операции.ПланСчетов КАК ПланСчетов,
	|	КОЛИЧЕСТВО(РегламентнаяОперация.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	ВТОперации КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперацияМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Операции.Организация)
	|			И (РегламентнаяОперация.ПланСчетов = Операции.ПланСчетов)
	|			И (РегламентнаяОперация.ТипОперации = Операции.ТипОперации)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.ПланСчетов,
	|	Операции.ТипОперации,
	|	Операции.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	ЕстьОшибки    = Ложь;
	ЕстьДокументы = Ложь;
	Период 		= РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ТипыОпераций  = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	ПериодичностьЗакрытияСчетов = Новый Массив();
	ПериодичностьЗакрытияСчетов.Добавить(Перечисления.ЗакрытиеСчетовДоходовИРасходов.Ежемесячно);
	
	Если КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) = КонецГода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) Тогда
		ПериодичностьЗакрытияСчетов.Добавить(Перечисления.ЗакрытиеСчетовДоходовИРасходов.ВКонцеГода);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодичностьЗакрытияСчетов", ПериодичностьЗакрытияСчетов);
	Запрос.УстановитьПараметр("ТипыОпераций", ТипыОпераций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоДокументов > 1 Тогда
			
			ЕстьОшибки = Истина;
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По организации ""%1"" по плану счетов ""%2"" за период %3 сформировано несколько документов регламентных операций ""%4"" .';
						|en = 'Several period-end transaction documents ""%4"" have been generated for company ""%1"" as per chart of accounts ""%2"" in period %3.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Организация,
					Выборка.ПланСчетов,
					Период,
					СокрЛП(Выборка.ТипОперации)));
					
			Продолжить;
			
		ИначеЕсли Выборка.КоличествоДокументов = 0 Тогда
			
			Если НЕ НаличиеДокументаОбязательно Тогда
				// Нет данных к расчету и нет регламентного документа - расчет не требуется.
			Иначе
				// Есть данные для расчета, но нет регламентного документа - расчет не выполнен.
				ЕстьОшибки = Истина;
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По организации ""%1"" по плану счетов ""%2"" за период %3 не сформирована регламентная операция ""%4"".';
							|en = 'The period-end transaction ""%4"" has not been generated for company ""%1"" as per chart of accounts ""%2"" in period %3.'", ОбщегоНазначения.КодОсновногоЯзыка()),
						Выборка.Организация,
						Выборка.ПланСчетов,
						Период,
						СокрЛП(Выборка.ТипОперации)));
			КонецЕсли;
			
		Иначе // есть один документ
			ЕстьДокументы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НаличиеДокументаОбязательно И НЕ ЕстьОшибки И НЕ ЕстьДокументы Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период %1 нет данных для расчета и отсутствует документ ""Регламентная операция (международный учет)"".';
					|en = 'No data for calculation and no ""Period-end transaction — Financial accounting"" document for period %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Период));
		
	КонецЕсли;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос,
		"ВТОперации" + ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеРегламентныхОпераций

// Формирует документы "Регламентная операция (международный учет)".
//
// Параметры:
//	ПараметрыОбработчика 	- Структура - параметры обработчика события этапа
//	ТипОперации 			- ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//								если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа
//	ДанныеЗадания - см. ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц
//	УничтожатьВТОрганизации - Булево - признак необходимости удаления временной таблицы ВТОрганизации.
//
// Возвращаемое значение:
//	Булево - наличие ошибок при создании документов
//	
Функция СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика,
	Знач ТипОперации = Неопределено, ДанныеЗадания = Неопределено, УничтожатьВТОрганизации = Истина) Экспорт
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика, Истина) Тогда
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Организация,
	|	Т.ПланСчетов КАК ПланСчетов,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РегламентнаяОперация.Ссылка
	|	КОНЕЦ КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	ВТОрганизации КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперацияМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.ПланСчетов = Т.ПланСчетов)
	|			И (РегламентнаяОперация.Организация = Т.Ссылка)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.ТипОперации = &ТипОперации)
	|			И (РегламентнаяОперация.Проведен)
	|ГДЕ
	|	&ДополнительныйОтбор
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	РегламентныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ПланСчетов КАК ПланСчетов,
	|	Т.Организация КАК Организация,
	|	МАКСИМУМ(Т.РегламентныйДокумент) КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТАктуальныеДокументы
	|ИЗ
	|	ВТДокументы КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ПланСчетов,
	|	Т.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	РегламентныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ПланСчетов КАК ПланСчетов,
	|	Т.Организация КАК Организация,
	|	Т.РегламентныйДокумент,
	|	ВЫБОР
	|		КОГДА Т.РегламентныйДокумент <> Т2.РегламентныйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ВТДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеДокументы КАК Т2
	|		ПО 
	|			Т.ПланСчетов = Т2.ПланСчетов
	|			И Т.Организация = Т2.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Если ТипЗнч(ДанныеЗадания) = Тип("Структура") И ДанныеЗадания.Свойство("Организация") Тогда
		Запрос.УстановитьПараметр("Организации", ДанныеЗадания.Организация);
		ДополнительныйОтбор = "Т.Ссылка В (&Организации)";
	Иначе
		ДополнительныйОтбор = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ДополнительныйОтбор);
	Запрос.Текст = ТекстЗапроса;
	
	ТипыОпераций = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	Для Каждого ТипОперации Из ТипыОпераций Цикл
		
		Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.РегламентныйДокумент) Тогда
				РегламентныйДокумент = Документы.РегламентнаяОперацияМеждународныйУчет.СоздатьДокумент();
			Иначе
				РегламентныйДокумент = Выборка.РегламентныйДокумент.ПолучитьОбъект();
			КонецЕсли;
			
			РегламентныйДокумент.ДополнительныеСвойства.Вставить("ВыполнениеЭтапаЗакрытияМесяца", Истина);
			
			Попытка
			
				Если Выборка.Удалить Тогда
					РегламентныйДокумент.УстановитьПометкуУдаления(Истина);
					Продолжить;
				ИначеЕсли РегламентныйДокумент.Проведен Тогда
					РегламентныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
				
				РегламентныйДокумент.Дата 	     	= КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
				РегламентныйДокумент.ПланСчетов 	= Выборка.ПланСчетов;
				РегламентныйДокумент.Организация 	= Выборка.Организация;
				РегламентныйДокумент.ТипОперации   	= ТипОперации;
				РегламентныйДокумент.Ответственный 	= Пользователи.ТекущийПользователь();
				
				РегламентныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Формирование документа ""Регламентная операция (международный учет)"" по организации ""%1"" и плану счетов ""%2"" за период %3 завершилось с ошибкой:
						|%4';
						|en = 'Generation of the ""Period-end transaction — Financial accounting"" document by the ""%1"" company and ""%2"" chart of accounts for period %3 was completed with an error:
						|%4'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Организация,
					Выборка.ПланСчетов,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЕстьОшибки = Истина;
				НастройкаФормированияПроводокСОшибкой = Неопределено;
				РегламентныйДокумент.ДополнительныеСвойства.Свойство("НастройкаФормированияПроводокСОшибкой", НастройкаФормированияПроводокСОшибкой);
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					Выборка.Организация,
					,
					,
					НастройкаФормированияПроводокСОшибкой);
				
			КонецПопытки;
			
		КонецЦикла;
		
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТДокументы, ВТАктуальныеДокументы");
		
	КонецЦикла;
	
	Если УничтожатьВТОрганизации Тогда
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВыполненияЗаданийКРасчетуИФормированиюДвижений

// Для документов, зарегистрированных к отражению в международном учете, формирует массив строковых сообщений
// о невыполнении отложенных заданий по расчетам, распределениям, формированию движений.
// 
// Параметры:
//	СтатусОтражения - ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - отбор документов по статусу отражения в МФУ
//	ДатаОтражения - Дата - отбор заданий не позднее переданной даты
//	Организация - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации - отбор заданий по организации
//	Документ - ДокументСсылка, Массив из ДокументСсылка - отбор заданий по документу
//	Подробно - Булево - При значении Истина добавляет даты периодов, начиная с которых требуется выполнение заданий
// 
// Возвращаемое значение:
//	Массив из Строка - описания невыполненных отложенных заданий
//
Функция НевыполненныеОтложенныеЗадания(СтатусОтражения, ДатаОтражения, Организация, Документ, Подробно = Ложь) Экспорт
	
	НевыполненныеЗадания = Новый Массив();
	ОтборЗаданийПоДокументу = ЗначениеЗаполнено(Документ);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НовыеВзаиморасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	Запрос.УстановитьПараметр("ТипыДокументов", ВнеоборотныеАктивыПовтИсп.ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	
	ТекстЗапроса = "";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.Регистратор КАК Регистратор,
		|	СебестоимостьТоваров.Организация КАК Организация
		|ПОМЕСТИТЬ втСебестоимостьТоваров
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Регистратор В (&Документ)
		|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И СебестоимостьТоваров.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ПОМЕСТИТЬ втРасчетыСПоставщиками
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Регистратор В (&Документ)
		|	И РасчетыСПоставщиками.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.Регистратор КАК Регистратор,
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ПОМЕСТИТЬ втРасчетыСКлиентами
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.Регистратор В (&Документ)
		|	И РасчетыСКлиентами.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьОС.Регистратор КАК Регистратор,
		|	СтоимостьОС.Организация КАК Организация,
		|	СтоимостьОС.АналитикаКапитализацииРасходов КАК АналитикаКапитализацииРасходов
		|ПОМЕСТИТЬ втСтоимостьОС
		|ИЗ
		|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|ГДЕ
		|	СтоимостьОС.Регистратор В (&Документ)
		|	И СтоимостьОС.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьНМА.Регистратор КАК Регистратор,
		|	СтоимостьНМА.Организация КАК Организация,
		|	СтоимостьНМА.НематериальныйАктив КАК НематериальныйАктив
		|ПОМЕСТИТЬ втСтоимостьНМА
		|ИЗ
		|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
		|ГДЕ
		|	СтоимостьНМА.Регистратор В (&Документ)
		|	И СтоимостьНМА.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПоОС.Ссылка КАК Ссылка,
		|	ДокументыПоОС.Организация КАК Организация,
		|	ДокументыПоОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втДокументыПоОС
		|ИЗ
		|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
		|ГДЕ
		|	ДокументыПоОС.Ссылка В (&Документ)
		|	И ДокументыПоОС.ТипСсылки В (&ТипыДокументов)
		|	И ДокументыПоОС.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПоНМА.Ссылка КАК Ссылка,
		|	ДокументыПоНМА.Организация КАК Организация,
		|	ДокументыПоНМА.НематериальныйАктив КАК НематериальныйАктив
		|ПОМЕСТИТЬ втДокументыПоНМА
		|ИЗ
		|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
		|ГДЕ
		|	ДокументыПоНМА.Ссылка В (&Документ)
		|	И ДокументыПоНМА.ТипСсылки В (&ТипыДокументов)
		|	И ДокументыПоНМА.Проведен";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ОбщегоНазначения.РазделительПакетаЗапросов()) + "
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаданияКРасчетуСебестоимости.Месяц) КАК Период
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК ЗаданияКРасчетуСебестоимости
	|		ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКРасчетуСебестоимости.Организация
	|		 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКРасчетуСебестоимости.Месяц";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСебестоимостьТоваров КАК СебестоимостьТоваров
		|		ПО ОтражениеДокументовВМеждународномУчете.Регистратор = СебестоимостьТоваров.Регистратор
		|		 И ОтражениеДокументовВМеждународномУчете.Организация = СебестоимостьТоваров.Организация";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	&ОтборПоСтатусуОтражения
	|	И &ОтборПоДатеОтражения
	|	И &ОтборПоОрганизации
	|	И &ОтборПоДокументу
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(ЗаданияКРасчетуСебестоимости.Месяц) ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаданияКРаспределениюРасчетов.Месяц) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ЗаданияКРаспределениюРасчетовСПоставщиками.Месяц) КАК Месяц
	|	ИЗ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК ЗаданияКРаспределениюРасчетовСПоставщиками
	|			ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКРаспределениюРасчетовСПоставщиками.АналитикаУчетаПоПартнерам.Организация
	|			 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКРаспределениюРасчетовСПоставщиками.Месяц";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРасчетыСПоставщиками КАК РасчетыСПоставщиками
		|			ПО ОтражениеДокументовВМеждународномУчете.Регистратор = РасчетыСПоставщиками.Регистратор
		|			 И ЗаданияКРаспределениюРасчетовСПоставщиками.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ
	|		НЕ &НовыеВзаиморасчеты
	|		И &ОтборПоСтатусуОтражения
	|		И &ОтборПоДатеОтражения
	|		И &ОтборПоОрганизации
	|		И &ОтборПоДокументу
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ЗаданияКРаспределениюРасчетовСКлиентами.Месяц) КАК Месяц
	|	ИЗ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК ЗаданияКРаспределениюРасчетовСКлиентами
	|			ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам.Организация
	|			 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКРаспределениюРасчетовСКлиентами.Месяц";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРасчетыСКлиентами КАК РасчетыСКлиентами
		|			ПО ОтражениеДокументовВМеждународномУчете.Регистратор = РасчетыСКлиентами.Регистратор
		|			 И ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ
	|		НЕ &НовыеВзаиморасчеты
	|		И &ОтборПоСтатусуОтражения
	|		И &ОтборПоДатеОтражения
	|		И &ОтборПоОрганизации
	|		И &ОтборПоДокументу
	|	) КАК ЗаданияКРаспределениюРасчетов
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(ЗаданияКРаспределениюРасчетов.Месяц) ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаданияКРасчетуСтоимостиВНА.Месяц) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ЗаданияКРасчетуСтоимостиВНА.Месяц) КАК Месяц
	|	ИЗ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК ЗаданияКРасчетуСтоимостиВНА
	|			ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКРасчетуСтоимостиВНА.Организация
	|			 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКРасчетуСтоимостиВНА.Месяц";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостьОС КАК СтоимостьОС
		|			ПО ОтражениеДокументовВМеждународномУчете.Регистратор = СтоимостьОС.Регистратор
		|			 И ОтражениеДокументовВМеждународномУчете.Организация = СтоимостьОС.Организация
		|			 И ЗаданияКРасчетуСтоимостиВНА.ОбъектУчета = СтоимостьОС.АналитикаКапитализацииРасходов";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ
	|		&ОтборПоСтатусуОтражения
	|		И &ОтборПоДатеОтражения
	|		И &ОтборПоОрганизации
	|		И &ОтборПоДокументу";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МИНИМУМ(ЗаданияКРасчетуСтоимостиВНА.Месяц) КАК Месяц
		|	ИЗ
		|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК ЗаданияКРасчетуСтоимостиВНА
		|			ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКРасчетуСтоимостиВНА.Организация
		|			 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКРасчетуСтоимостиВНА.Месяц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостьНМА КАК СтоимостьНМА
		|			ПО ОтражениеДокументовВМеждународномУчете.Регистратор = СтоимостьНМА.Регистратор
		|			 И ОтражениеДокументовВМеждународномУчете.Организация = СтоимостьНМА.Организация
		|			 И ЗаданияКРасчетуСтоимостиВНА.ОбъектУчета = СтоимостьНМА.НематериальныйАктив
		|	ГДЕ
		|		&ОтборПоСтатусуОтражения
		|		И &ОтборПоДатеОтражения
		|		И &ОтборПоОрганизации
		|		И &ОтборПоДокументу";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	) КАК ЗаданияКРасчетуСтоимостиВНА
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(ЗаданияКРасчетуСтоимостиВНА.Месяц) ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаданияКФормированиюДвиженийПоВНА.Месяц) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ЗаданияКФормированиюДвиженийПоВНА.Месяц) КАК Месяц
	|	ИЗ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК ЗаданияКФормированиюДвиженийПоВНА
	|			ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКФормированиюДвиженийПоВНА.Организация
	|			 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКФормированиюДвиженийПоВНА.Месяц";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыПоОС КАК ДокументыПоОС
		|			ПО ОтражениеДокументовВМеждународномУчете.Регистратор = ДокументыПоОС.Ссылка
		|			 И ОтражениеДокументовВМеждународномУчете.Организация = ДокументыПоОС.Организация
		|			 И ЗаданияКФормированиюДвиженийПоВНА.ОбъектУчета = ДокументыПоОС.ОсновноеСредство";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ
	|		&ОтборПоСтатусуОтражения
	|		И &ОтборПоДатеОтражения
	|		И &ОтборПоОрганизации
	|		И &ОтборПоДокументу";
	
	Если ОтборЗаданийПоДокументу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МИНИМУМ(ЗаданияКФормированиюДвиженийПоВНА.Месяц) КАК Месяц
		|	ИЗ
		|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК ЗаданияКФормированиюДвиженийПоВНА
		|			ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКФормированиюДвиженийПоВНА.Организация
		|			 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКФормированиюДвиженийПоВНА.Месяц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыПоНМА КАК ДокументыПоНМА
		|			ПО ОтражениеДокументовВМеждународномУчете.Регистратор = ДокументыПоНМА.Ссылка
		|			 И ОтражениеДокументовВМеждународномУчете.Организация = ДокументыПоНМА.Организация
		|			 И ЗаданияКФормированиюДвиженийПоВНА.ОбъектУчета = ДокументыПоНМА.НематериальныйАктив
		|	ГДЕ
		|		&ОтборПоСтатусуОтражения
		|		И &ОтборПоДатеОтражения
		|		И &ОтборПоОрганизации
		|		И &ОтборПоДокументу";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	) КАК ЗаданияКФормированиюДвиженийПоВНА
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(ЗаданияКФормированиюДвиженийПоВНА.Месяц) ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаданияКЗакрытиюМесяца.Месяц) КАК Период
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
	|		ПО ОтражениеДокументовВМеждународномУчете.Организация = ЗаданияКЗакрытиюМесяца.Организация
	|		 И ОтражениеДокументовВМеждународномУчете.ДатаОтражения >= ЗаданияКЗакрытиюМесяца.Месяц
	|		 И ТИПЗНАЧЕНИЯ(ОтражениеДокументовВМеждународномУчете.Регистратор) = ТИП(Документ.ПризнаниеРасходовПоИсследованиямИРазработкам)
	|		 И ЗаданияКЗакрытиюМесяца.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеРасходовПоИсследованиямИРазработкам)
	|ГДЕ
	|	&ОтборПоСтатусуОтражения
	|	И &ОтборПоДатеОтражения
	|	И &ОтборПоОрганизации
	|	И &ОтборПоДокументу
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(ЗаданияКЗакрытиюМесяца.Месяц) ЕСТЬ NULL
	|";
	
	Если ЗначениеЗаполнено(СтатусОтражения) Тогда
		ОтборПоСтатусуОтражения = "ОтражениеДокументовВМеждународномУчете.Статус В (&СтатусОтражения)";
		Запрос.УстановитьПараметр("СтатусОтражения", СтатусОтражения);
	Иначе
		ОтборПоСтатусуОтражения = "ИСТИНА";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтражения) Тогда
		ОтборПоДатеОтражения = "ОтражениеДокументовВМеждународномУчете.ДатаОтражения <= &ДатаОтражения";
		Запрос.УстановитьПараметр("ДатаОтражения", ДатаОтражения);
	Иначе
		ОтборПоДатеОтражения = "ИСТИНА";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтборПоОрганизации = "ОтражениеДокументовВМеждународномУчете.Организация В (&Организация)";
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		ОтборПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	Если ОтборЗаданийПоДокументу Тогда
		ОтборПоДокументу = "ОтражениеДокументовВМеждународномУчете.Регистратор В (&Документ)";
		Запрос.УстановитьПараметр("Документ", Документ);
	Иначе
		ОтборПоДокументу = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоСтатусуОтражения", ОтборПоСтатусуОтражения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоДатеОтражения", ОтборПоДатеОтражения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОрганизации", ОтборПоОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоДокументу", ОтборПоДокументу);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = ТекстЗапроса;
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	НевыполненныеЗадания.Добавить(НСтр("ru = 'Расчет себестоимости не выполнен';
										|en = 'Cost is not calculated'"));
	НевыполненныеЗадания.Добавить(НСтр("ru = 'Распределение расчетов не выполнено';
										|en = 'AR/AP are not allocated'"));
	НевыполненныеЗадания.Добавить(НСтр("ru = 'Расчет стоимости ОС и НМА не выполнен';
										|en = 'FIxed asset and intangible asset value is not calculated'"));
	НевыполненныеЗадания.Добавить(НСтр("ru = 'Формирование движений по учету ОС и НМА не выполнено';
										|en = 'Register records by accounting of fixed assets and intangible assets are not generated'"));
	НевыполненныеЗадания.Добавить(НСтр("ru = 'Признание расходов по исследованиям и разработкам не выполнено';
										|en = 'R&D asset write-off is not performed'"));
	
	КоличествоЗаданий = НевыполненныеЗадания.Количество();
	КоличествоРезультатов = Результаты.Количество();
	
	Для НомерЗадания = 1 По КоличествоЗаданий Цикл
		ИндексЗадания = КоличествоЗаданий - НомерЗадания;
		ИндексРезультата = КоличествоРезультатов - НомерЗадания;
		
		Если Результаты[ИндексРезультата].Пустой() Тогда
			НевыполненныеЗадания.Удалить(ИндексЗадания);
		ИначеЕсли Подробно Тогда
			Выборка = Результаты[ИндексРезультата].Выбрать();
			Выборка.Следующий();
			НевыполненныеЗадания[ИндексЗадания] = СтрШаблон(
				НСтр("ru = '%1 с %2.';
					|en = '%1 from %2.'"),
				НевыполненныеЗадания[ИндексЗадания],
				Формат(Выборка.Период, НСтр("ru = 'ДФ=MM.yyyy;';
											|en = 'DF=MM/yyyy'")));
		Иначе
			НевыполненныеЗадания[ИндексЗадания] = НевыполненныеЗадания[ИндексЗадания] + ".";
		КонецЕсли;
	КонецЦикла;
	
	Возврат НевыполненныеЗадания;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеЗаданийКЗакрытиюМесяцаСлужебные

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос)
	
	СоответствиеТекстовЗапросов = Новый Соответствие();
	
	Если ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		СоответствиеТекстовЗапросов.Вставить("РасчетыСКлиентамиИзменения", ТекстЗапросаРасчетыСКлиентами(Запрос));
		СоответствиеТекстовЗапросов.Вставить("РасчетыСПоставщикамиИзменения", ТекстЗапросаРасчетыСПоставщиками(Запрос));
		СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыПоФинансовымИнструментам", ТекстЗапросаРасчетыПоФинансовымИнструментам(Запрос));
		СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийГрафикОплатУслугПоАренде", ТекстЗапросаГрафикОплатУслугПоАренде(Запрос));
		СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийГрафикОплатКредитовИДепозитов", ТекстЗапросаГрафикОплатКредитовИДепозитов(Запрос));
	КонецЕсли;
	
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаРасчетыСКлиентами(Запрос)
	
	ТекстЗапросаВременныхТаблиц = "
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Месяц КАК Месяц,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	ТаблицаИзменений.Документ Документ
	|ПОМЕСТИТЬ втПериодыИзменений_РасчетыСКлиентами
	|ИЗ 
	|	РасчетыСКлиентамиИзменения КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Сумма <> 0 ИЛИ ТаблицаИзменений.СуммаРегл <> 0 ИЛИ ТаблицаИзменений.СуммаУпр <> 0
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Месяц,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Документ
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ВременнаяТаблица = "втПериодыИзменений_РасчетыСКлиентами";
	ТекстЗапроса = ОбщийТекстЗапросаЗаданияПоРеклассификации(ВременнаяТаблица);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(
		ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ВременнаяТаблица);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками(Запрос)
	
	ТекстЗапросаВременныхТаблиц = "
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Месяц КАК Месяц,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	ТаблицаИзменений.Документ КАК Документ
	|ПОМЕСТИТЬ втПериодыИзменений_РасчетыСПоставщиками
	|ИЗ
	|	РасчетыСПоставщикамиИзменения КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Сумма <> 0 ИЛИ ТаблицаИзменений.СуммаРегл <> 0 ИЛИ ТаблицаИзменений.СуммаУпр <> 0
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Месяц,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Документ
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ВременнаяТаблица = "втПериодыИзменений_РасчетыСПоставщиками";
	ТекстЗапроса = ОбщийТекстЗапросаЗаданияПоРеклассификации(ВременнаяТаблица);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(
		ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ВременнаяТаблица);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаРасчетыПоФинансовымИнструментам(Запрос)
	
	ТекстЗапросаВременныхТаблиц = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ТаблицаИзменений.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ТаблицаИзменений.Регистратор КАК Документ
	|ПОМЕСТИТЬ втПериодыИзменений_РасчетыПоФинансовымИнструментам
	|ИЗ
	|	ТаблицаИзмененийРасчетыПоФинансовымИнструментам КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Сумма <> 0 ИЛИ ТаблицаИзменений.СуммаРегл <> 0 ИЛИ ТаблицаИзменений.СуммаУпр <> 0
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ),
	|	ТаблицаИзменений.АналитикаУчетаПоПартнерам.Организация,
	|	ТаблицаИзменений.Регистратор
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ВременнаяТаблица = "втПериодыИзменений_РасчетыПоФинансовымИнструментам";
	ТекстЗапроса = ОбщийТекстЗапросаЗаданияПоРеклассификации(ВременнаяТаблица);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(
		ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ВременнаяТаблица);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаГрафикОплатУслугПоАренде(Запрос)
	
	ТекстЗапросаВременныхТаблиц = "
	|ВЫБРАТЬ
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ТаблицаИзменений.Дата, МЕСЯЦ)) КАК НачалоПериода,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(ТаблицаИзменений.Дата, МЕСЯЦ)) КАК КонецПериода,
	|	ТаблицаИзменений.Договор.Организация КАК Организация,
	|	ТаблицаИзменений.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втПериодИзменений_ГрафикОплатУслугПоАренде
	|ИЗ
	|	ТаблицаИзмененийГрафикОплатУслугПоАренде КАК ТаблицаИзменений
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Договор.Организация,
	|	ТаблицаИзменений.Регистратор
	|";
	
	ИсточникДанных = "втПериодИзменений_ГрафикОплатУслугПоАренде";
	ТаблицаДляПомещения = "втПериодыИзменений_ГрафикОплатУслугПоАренде";
	
	ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ ТекстЗапросаПериодыИзмененийПоГрафикуОплат(ИсточникДанных, ТаблицаДляПомещения)
		+ ОбщегоНазначения.РазделительПакетаЗапросов();
		
	ТекстЗапроса = ОбщийТекстЗапросаЗаданияПоРеклассификации(ТаблицаДляПомещения);
	ВременныеТаблицы = ИсточникДанных + "," + ТаблицаДляПомещения;
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(
		ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ВременныеТаблицы);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаГрафикОплатКредитовИДепозитов(Запрос)
	
	ТекстЗапросаВременныхТаблиц = "
	|ВЫБРАТЬ
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ)) КАК НачалоПериода,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ)) КАК КонецПериода,
	|	ТаблицаИзменений.ВариантГрафика.Владелец.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ втПериодИзменения_ГрафикОплатКредитовИДепозитов
	|ИЗ
	|	ТаблицаИзмененийГрафикОплатКредитовИДепозитов КАК ТаблицаИзменений
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.ВариантГрафика.Владелец.Организация
	|";
	
	ИсточникДанных = "втПериодИзменения_ГрафикОплатКредитовИДепозитов";
	ТаблицаДляПомещения = "втПериодыИзменений_ГрафикОплатКредитовИДепозитов";
	
	ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ ТекстЗапросаПериодыИзмененийПоГрафикуОплат(ИсточникДанных, ТаблицаДляПомещения)
		+ ОбщегоНазначения.РазделительПакетаЗапросов();
		
	ТекстЗапроса = ОбщийТекстЗапросаЗаданияПоРеклассификации(ТаблицаДляПомещения);
	ВременныеТаблицы = ИсточникДанных + "," + ТаблицаДляПомещения;
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(
		ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ВременныеТаблицы);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаПериодыИзмененийПоГрафикуОплат(ИсточникДанных, ТаблицаДляПомещения)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Месяц,
	|	ПериодИзмененийГрафикаОплат.Организация КАК Организация,
	|	ПериодИзмененийГрафикаОплат.Регистратор КАК Документ
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	&ИсточникДанных КАК ПериодИзмененийГрафикаОплат
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперацияМеждународныйУчет КАК РегламентнаяОперация
	|		ПО РегламентнаяОперация.Организация = ПериодИзмененийГрафикаОплат.Организация
	|		 И РегламентнаяОперация.Дата МЕЖДУ ПериодИзмененийГрафикаОплат.НачалоПериода И ПериодИзмененийГрафикаОплат.КонецПериода
	|		 И РегламентнаяОперация.Проведен
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ),
	|	ПериодИзмененийГрафикаОплат.Организация,
	|	ПериодИзмененийГрафикаОплат.Регистратор
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	Организация
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДляПомещения", ТаблицаДляПомещения);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОбщийТекстЗапросаЗаданияПоРеклассификации(ИсточникДанных)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИзменений.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РеклассификацияДолгосрочныхАктивовОбязательствМУ) КАК Операция,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	ТаблицаИзменений.Документ КАК Документ
	|ИЗ 
	|	&ИсточникДанных КАК ТаблицаИзменений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитика
	|		ПО ТаблицаИзменений.Организация = УчетнаяПолитика.Организация
	|		 И ТаблицаИзменений.Месяц >= УчетнаяПолитика.Период
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетов
	|		ПО ТаблицаИзменений.Организация = ПланыСчетов.Организация
	|		 И ТаблицаИзменений.Месяц >= ПланыСчетов.Период
	|ГДЕ
	|	УчетнаяПолитика.ДлительностьОперационногоЦикла > 0
	|	И ПланыСчетов.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств
	|	И УчетнаяПолитика.Период В (
	|		ВЫБРАТЬ
	|			МАКСИМУМ(ПериодыУчетнойПолитики.Период)
	|		ИЗ
	|			РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК ПериодыУчетнойПолитики
	|		ГДЕ
	|			ПериодыУчетнойПолитики.Организация = ТаблицаИзменений.Организация
	|			И ПериодыУчетнойПолитики.Период <= ТаблицаИзменений.Месяц
	|		)
	|	И ПланыСчетов.Период В (
	|		ВЫБРАТЬ
	|			МАКСИМУМ(ПериодыПлановСчетов.Период)
	|		ИЗ
	|			РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПериодыПлановСчетов
	|		ГДЕ
	|			ПериодыПлановСчетов.Организация = ТаблицаИзменений.Организация
	|			И ПериодыПлановСчетов.ПланСчетов = ПланыСчетов.ПланСчетов
	|			И ПериодыПлановСчетов.Период <= ТаблицаИзменений.Месяц
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеЗаданийКЗакрытиюМесяцаСлужебные

Процедура ВыполнитьЗаданияКЗакрытиюМесяца(ПараметрыОбработчика)
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	ТипыОпераций = Новый Массив();
	
	Для Каждого ТипОперации Из ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций Цикл
		Если ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, НачалоПериода) Тогда
			ТипыОпераций.Добавить(ТипОперации);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипыОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ДанныеЗадания = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
			НачалоПериода,
			КонецПериода,
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
				|%2';
				|en = 'An error occurred when calculating for the %1 period:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	КонецПопытки;
	
	ЕстьОшибки = СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика, ТипыОпераций, ДанныеЗадания);
	
	Если НЕ ЕстьОшибки Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
				Неопределено,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеЗадания.ВременныеТаблицы);
			
			СформироватьЗаданияНаСледующийПериод(ПараметрыРасчета, ТипыОпераций, ДанныеЗадания);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, Период)
	
	Периодичность = ПериодичностьРегламентнойОперации(ТипОперации);
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат Истина;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат (Месяц(Период) % 3 = 0);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат (Месяц(Период) = 12);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверная периодичность регламентной операции';
								|en = 'Incorrect frequency of the period-end transaction'");
	КонецЕсли; 
	
КонецФункции

Функция ПериодичностьРегламентнойОперации(ТипОперации)
	
	Возврат Перечисления.Периодичность.Месяц;
	
КонецФункции

Процедура СформироватьЗаданияНаСледующийПериод(ПараметрыРасчета, ТипыОпераций, ДанныеЗадания)
	
	Если ТипыОпераций.Найти(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РеклассификацияДолгосрочныхАктивовОбязательств) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСледующегоПериода = ДобавитьМесяц(НачалоМесяца(ПараметрыРасчета.ПериодРегистрации), 1);
	
	ОрганизацииСледующегоПериода = МеждународныйУчетПоДаннымФинансовыхРегистров.ОрганизацииРеклассификацииДолгосрочныхАктивовОбязательств(
		ДанныеЗадания.Организация, НачалоСледующегоПериода);
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВтКэшГраниц
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КэшГраниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	*
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	ВтКэшГраниц КАК КэшГраниц
	|ГДЕ
	|	КэшГраниц.Организация В(&Организации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтКэшГраниц
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеЗадания.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Организации", ОрганизацииСледующегоПериода);
	Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
		Запрос.МенеджерВременныхТаблиц,
		НачалоСледующегоПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
