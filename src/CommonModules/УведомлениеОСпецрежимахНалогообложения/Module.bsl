#Область ПрограммныйИнтерфейс

// Функция возвращает таблицу уведомлений в соответствии с установленным отбором
// в хронологическом порядке по убыванию
//
// Параметры:
//  Отбор - Структура - задает условия поиска:
//    * Организация    - СправочникСсылка.Организации
//    * ВидУведомления  - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения
//    * ИмяФормы        - Строка
//
// Возвращаемое значение:
//  ТаблицаЗначений
//    * Ссылка - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//    * Дата - Дата
//    * ИмяФормы - Строка - имя формы
//
Функция НайтиУведомления(Отбор) Экспорт
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка,
		|	УведомлениеОСпецрежимахНалогообложения.Дата КАК Дата,
		|	УведомлениеОСпецрежимахНалогообложения.ИмяФормы КАК ИмяФормы
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления";
	
	Организация = Неопределено;
	Если Отбор.Свойство("Организация", Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация";
	КонецЕсли;
	
	ВидУведомления = Неопределено;
	Если Отбор.Свойство("ВидУведомления", ВидУведомления) Тогда
		Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.ВидУведомления = &ВидУведомления";
	КонецЕсли;
	
	ИмяФормы = Неопределено;
	Если Отбор.Свойство("ИмяФормы", ИмяФормы) Тогда
		Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.ИмяФормы = &ИмяФормы";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает таблицу уведомлений в соответствии с установленным отбором
// в хронологическом порядке по убыванию
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Неопределено, если данных нет (нет формы Р11001)
//  Структура с ключами
//      - УставныйКапитал - Число, размер уставного капитала в рублях (1)
//      - Учредители - Таблица значений с колонками
//          - ИНН - Строка, ИНН учредителя (2.1)
//          - Учредитель - Строка, наименование учредителя (2.2)
//          - СуммаКапитала - Число - стоимость доли в уставном капитале (2.3)
//
Функция ПолучитьСведенияОбУставномКапиталеФормыР11001(Организация) Экспорт 
	Если Метаданные.Отчеты.Найти("РегламентированноеУведомлениеФормаР11001") = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР11001)
		|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация
		|	И НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	УведомлениеОСпецрежимахНалогообложения.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Отчеты["РегламентированноеУведомлениеФормаР11001"].ПолучитьДанныеОтчета(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Возвращает поэлементное разложение адреса ФИАС в JSON-представлении для заполнения заявлений на регистрацию ИП и ЮЛ.
//
// Параметры:
//   Адрес - JSON-представление ареса в формате ФИАС;
//   ДополнительныеПараметры - дополнительные параметры для разбора адреса.
//
/// Возвращаемое значение:
//   Структура - значения элементов адреса для заполнения заявлений.
//
Функция АдресВФорматеФИАС(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	
	ВозвращаемыйАдрес = Новый Структура;
	ВозвращаемыйАдрес.Вставить("СтрокаАдресногоОбъекта", Адрес);
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		ПараметрыСокращения = Новый Структура("КодыАдреса", Истина);
		СтруктураАдресаЗаписи = РаботаСАдресами.СведенияОбАдресеПриказМинфинаРФ171н(Адрес, ПараметрыСокращения);
	Иначе
		СтруктураАдресаЗаписи = РаботаСАдресамиКлиентСервер.ПоляАдреса();
		СтруктураАдресаЗаписи.Вставить("КодМуниципальногоРайона", "");
		СтруктураАдресаЗаписи.Вставить("КодПоселения", "");
	КонецЕсли;
	
	ПреобразованиеСтруктураАдресаЗаписи(СтруктураАдресаЗаписи, Адрес);
	
	ОдноименныеСвойства = Новый Массив;
	ОдноименныеСвойства.Добавить("Индекс");
	ОдноименныеСвойства.Добавить("КодРегиона");
	ОдноименныеСвойства.Добавить("МуниципальныйРайон");
	ОдноименныеСвойства.Добавить("Поселение");
	ОдноименныеСвойства.Добавить("НаселенныйПункт");
	ОдноименныеСвойства.Добавить("Территория");
	ОдноименныеСвойства.Добавить("Улица");
	ОдноименныеСвойства.Добавить("НомерЗемельногоУчастка");
	
	// Временно.
	ОдноименныеСвойства.Добавить("ПоселениеСокращение");
	
	Для Каждого ИмяСвойства Из ОдноименныеСвойства Цикл
		ВозвращаемыйАдрес.Вставить(ИмяСвойства,
			?(СтруктураАдресаЗаписи.Свойство(ИмяСвойства), СтруктураАдресаЗаписи[ИмяСвойства], ""));
	КонецЦикла;
	
	ВозвращаемыйАдрес.Вставить("НаселенныйПунктВид", СтруктураАдресаЗаписи.НаселенныйПунктТипКраткий);
	ВозвращаемыйАдрес.Вставить("ТерриторияТип", СтруктураАдресаЗаписи.ТерриторияТипКраткий);
	ВозвращаемыйАдрес.Вставить("УлицаТип", СтруктураАдресаЗаписи.УлицаТипКраткий);
	
	// Учет особенности возвращаемых БСП сведений об адресе в формате ФИАС
	// (не заполнен населенный пункт, но заполнен город).
	ПолучатьНаселенныйПунктИзГорода =
		НЕ ЗначениеЗаполнено(СтруктураАдресаЗаписи.НаселенныйПункт)
		И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Город);
	Если ПолучатьНаселенныйПунктИзГорода Тогда
		ВозвращаемыйАдрес.Вставить("НаселенныйПункт", СтруктураАдресаЗаписи.Город);
		ВозвращаемыйАдрес.Вставить("НаселенныйПунктВид", СтруктураАдресаЗаписи.ГородТипКраткий);
	КонецЕсли;
	
	// Идентификатор дома или адресного объекта.
	ЗначениеСвойства = "";
	СтруктураАдресаЗаписи.Свойство("ИдентификаторДома", ЗначениеСвойства);
	Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		СтруктураАдресаЗаписи.Свойство("ИдентификаторАдресногоОбъекта", ЗначениеСвойства);
	КонецЕсли;
	ВозвращаемыйАдрес.Вставить("ИдентификаторАдресногоОбъекта",
		?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, ""));
	
	// Муниципальные райны.
	ВозвращаемыйАдрес.Вставить("МуниципальныйРайонВид", СтруктураАдресаЗаписи.КодМуниципальногоРайона);
	Сокращение = НРег(СокрЛП(СтрЗаменить(СтруктураАдресаЗаписи.МуниципальныйРайонТипКраткий, " ", "")));
	Если Сокращение = "м.р-н" Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Муниципальный район");
	ИначеЕсли Сокращение = "г.о.вн.д." ИЛИ Сокращение = "г.о." Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Городской округ с внутригородским делением");
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Городской округ");
	ИначеЕсли Сокращение = "вн.тер." ИЛИ Сокращение = "вн.тер.г." Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Внутригородская территория города федерального значения");
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Внутригородская территория");
	ИначеЕсли Сокращение = "м.о." Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Муниципальный округ");
	КонецЕсли;
	
	// Поселения.
	ВозвращаемыйАдрес.Вставить("ПоселениеВид", СтруктураАдресаЗаписи.КодПоселения);
	Сокращение = НРег(СокрЛП(СтрЗаменить(СтруктураАдресаЗаписи.ПоселениеТипКраткий, " ", "")));
	Если Сокращение = "г.п." Тогда
		ВозвращаемыйАдрес.Поселение = ОбрезанноеНазвание(ВозвращаемыйАдрес.Поселение, "Городское поселение");
	ИначеЕсли Сокращение = "с.п." Тогда
		ВозвращаемыйАдрес.Поселение = ОбрезанноеНазвание(ВозвращаемыйАдрес.Поселение, "Сельское поселение");
	ИначеЕсли Сокращение = "вн.р-н" Тогда
		ВозвращаемыйАдрес.Поселение = ОбрезанноеНазвание(ВозвращаемыйАдрес.Поселение, "Внутригородской район");
	КонецЕсли;
	
	// Идентификационные элементы объекта адресации.
	Здания = Новый Массив;
	
	ЗданиеТип   = СтруктураАдресаЗаписи.Здание.ТипЗдания;
	ЗданиеНомер = СтруктураАдресаЗаписи.Здание.Номер;
	Если ЗначениеЗаполнено(ЗданиеТип) И ЗначениеЗаполнено(ЗданиеНомер) Тогда
		Здания.Добавить(Новый Структура("ЗданиеТип, ЗданиеНомер", ЗданиеТип, ЗданиеНомер));
	КонецЕсли;
	
	Корпуса = СтруктураАдресаЗаписи.Корпуса;
	Для Каждого Корпус Из Корпуса Цикл
		КорпусТип = Корпус.ТипКорпуса;
		КорпусНомер = Корпус.Номер;
		Если ЗначениеЗаполнено(КорпусТип) И ЗначениеЗаполнено(КорпусНомер) Тогда
			Здания.Добавить(Новый Структура("ЗданиеТип, ЗданиеНомер", КорпусТип, КорпусНомер));
		КонецЕсли;
	КонецЦикла;
	
	ВозвращаемыйАдрес.Вставить("Здания", Здания);
	
	// Помещения внутри здания.
	Помещения = Неопределено;
	ПомещениеВЗданииТип     = "";
	ПомещениеВЗданииНомер   = "";
	ПомещениеВКвартиреТип   = "";
	ПомещениеВКвартиреНомер = "";
	
	// Структура массива соответствует иерархии помещений в здании.
	Помещения = СтруктураАдресаЗаписи.Помещения;
	Если Помещения.Количество() > 0 Тогда
		ПомещениеВЗданииТип = Помещения[0].ТипПомещения;
		ПомещениеВЗданииНомер = Помещения[0].Номер;
	КонецЕсли;
	
	Если Помещения.Количество() > 1 Тогда
		ПомещениеВКвартиреТип = Помещения[1].ТипПомещения;
		ПомещениеВКвартиреНомер = Помещения[1].Номер;
	КонецЕсли;
	
	ВозвращаемыйАдрес.Вставить("ПомещениеВЗданииТип",     ПомещениеВЗданииТип);
	ВозвращаемыйАдрес.Вставить("ПомещениеВЗданииНомер",   ПомещениеВЗданииНомер);
	ВозвращаемыйАдрес.Вставить("ПомещениеВКвартиреТип",   ПомещениеВКвартиреТип);
	ВозвращаемыйАдрес.Вставить("ПомещениеВКвартиреНомер", ПомещениеВКвартиреНомер);
	
	// Устаревшие поля для обратной совместимости.
	ВозвращаемыйАдрес.Вставить("МуниципальныйРайонСокращение", "");
	ВозвращаемыйАдрес.Вставить("ПоселениеСокращение", "");
	ВозвращаемыйАдрес.Вставить("НаселенныйПунктСокращение", "");
	
	Возврат ВозвращаемыйАдрес;
	
КонецФункции

// Возвращает таблицу с ошибками по схеме выгрузки для уведомления.
//
// Параметры:
//   Объект - JSON-представление ареса в формате ФИАС;
//   ДополнительныеПараметры - дополнительные параметры (могут понадобится в журналах, задел на будущее).
//
/// Возвращаемое значение:
//   Структура - СписокЗначений с ошибками.
//   Неопределено - при возникновении ошибки
//
Функция ПроверитьДокументСВыводомВТаблицу(Объект, ДополнительныеПараметры = Неопределено) Экспорт 
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения") Тогда 
		ИмяОтчета = Объект.ИмяОтчета;
		ИмяФормы = Объект.ИмяФормы;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "ИмяОтчета, ИмяФормы");
		ИмяОтчета = Реквизиты.ИмяОтчета;
		ИмяФормы = Реквизиты.ИмяФормы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Отчеты[ИмяОтчета].ПроверитьДокументСВыводомВТаблицу(Объект, ИмяФормы, Новый УникальныйИдентификатор);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовоеДеревоСтраницФормыУведомления() Экспорт 
	ДеревоСтраниц = Новый ДеревоЗначений;
	ДеревоСтраниц.Колонки.Добавить("ИДНаименования");
	ДеревоСтраниц.Колонки.Добавить("ИмяМакета");
	ДеревоСтраниц.Колонки.Добавить("ИндексКартинки");
	ДеревоСтраниц.Колонки.Добавить("МакетыПФ");
	ДеревоСтраниц.Колонки.Добавить("Многостраничность");
	ДеревоСтраниц.Колонки.Добавить("Многострочность");
	ДеревоСтраниц.Колонки.Добавить("МногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоСтраниц.Колонки.Добавить("Наименование");
	ДеревоСтраниц.Колонки.Добавить("УИД");
	
	Возврат ДеревоСтраниц;
КонецФункции

Функция ИнформацияПоМЧБШаблонуСправки(Отбор) Экспорт 
	НайденныеСтроки = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ТаблицаМЧБШаблоновСправок().НайтиСтроки(Отбор);
	Возврат ?(НайденныеСтроки.Количество() = 1, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденныеСтроки[0]), Неопределено);
КонецФункции

Функция СведенияИзФормРегистрации(Уведомление) Экспорт 
	Попытка
		Если ТипЗнч(Уведомление) <> Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "ИмяОтчета,ИмяФормы,ДанныеУведомления");
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("Отчеты." + РеквизитыУведомления.ИмяОтчета);
		Возврат МодульУведомления.СведенияИзФормРегистрации(РеквизитыУведомления.ИмяФормы , РеквизитыУведомления.ДанныеУведомления);
	Исключение
		ЗаписьЖурналаРегистрации("Получение сведений из форм регистрации",
			УровеньЖурналаРегистрации.Ошибка, ,Уведомление,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция СформироватьСпискиВыбораДляПроверкиВыгрузки(ОтчетИмя, МакетИмя, АрхивМакетов = "") Экспорт 
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИДНаименования");
	Результат.Колонки.Добавить("ИмяПоля");
	Результат.Колонки.Добавить("Код");
	Результат.Колонки.Добавить("Наименование");
	
	Если ТипЗнч(Метаданные.Отчеты[ОтчетИмя].Макеты.Найти(МакетИмя)) = Тип("ОбъектМетаданных") Тогда 
		МакетСписковВыбора = Отчеты[ОтчетИмя].ПолучитьМакет(МакетИмя);
	ИначеЕсли ЗначениеЗаполнено(АрхивМакетов) Тогда 
		МакетСписковВыбора = ЗагрузитьМакетыИзАрхива(Новый Структура("ИмяОтчета, ИмяФормы", ОтчетИмя, ""), "", АрхивМакетов)[МакетИмя];
	Иначе
		Возврат Результат;
	КонецЕсли;
	ОблВсеСписки = МакетСписковВыбора.Области.Найти("КоллекцияСписков");
	Если ОблВсеСписки = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ТекущаяСтрока = ОблВсеСписки.Верх;
	Пока ТекущаяСтрока <= ОблВсеСписки.Низ Цикл
		ИДНаименования = МакетСписковВыбора.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Если Не ЗначениеЗаполнено(ИДНаименования) Тогда 
			Прервать;
		КонецЕсли;
		
		ИмяПоля = МакетСписковВыбора.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		ИмяСписка = МакетСписковВыбора.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		
		Список = МакетСписковВыбора.Область(ИмяСписка);
		ТС = Список.Верх;
		Пока ТС <= Список.Низ Цикл
			Код = МакетСписковВыбора.Область(ТС, 1, ТС, 1).Текст;
			Наименование = МакетСписковВыбора.Область(ТС, 2, ТС, 2).Текст;
			Если Не ЗначениеЗаполнено(Код) И Не ЗначениеЗаполнено(Наименование) Тогда 
				Прервать;
			КонецЕсли;
			
			НовСтр = Результат.Добавить();
			НовСтр.ИДНаименования = ИДНаименования;
			НовСтр.ИмяПоля = ИмяПоля;
			НовСтр.Код = Код;
			НовСтр.Наименование = Наименование;
			
			ТС = ТС + 1;
		КонецЦикла;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ПолнаяПроверкаЗаполненныхПоказателейНаСоотвествиеСписку(ИмяМакетаСписки,
	ИмяМакетаСхема,
	ИмяОтчета,
	ТаблицаОшибок,
	Данные) Экспорт 
	
	СоответствиеМногострочныхЧастей = СформироватьСоответствиеМногострочныхЧастей(Данные.ДеревоСтраниц);
	СпискиВыбора = СформироватьСпискиВыбораДляПроверкиВыгрузки(
		ИмяОтчета, ИмяМакетаСписки, ?(ТипЗнч(Данные) = Тип("Структура"), ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, "АрхивМакетов"), ""));
	Схема = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакетаСхема);
	СтрОтбора = Новый Структура("ИмяПоля, ИДНаименования");
	СтрОтбораЗначение = Новый Структура("ИмяПоля, ИДНаименования, Код");
	
	Для Инд = 1 По Схема.ВысотаТаблицы Цикл 
		Раздел = Схема.Область(Инд, 2, Инд, 2).Текст;
		РазделИсходный = Раздел;
		Ключ = Схема.Область(Инд, 3, Инд, 3).Текст;
		Если Не ЗначениеЗаполнено(Раздел) Или Не ЗначениеЗаполнено(Ключ) Тогда 
			Продолжить;
		КонецЕсли;
		СтрОтбора.ИмяПоля = Ключ;
		Если ТипЗнч(СоответствиеМногострочныхЧастей) = Тип("Соответствие")
			И СоответствиеМногострочныхЧастей[Раздел] <> Неопределено Тогда 
			
			Раздел = СоответствиеМногострочныхЧастей[Раздел];
		КонецЕсли;
		СтрОтбора.ИДНаименования = Раздел;
		
		Если СпискиВыбора.НайтиСтроки(СтрОтбора).Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ПоказательПоля = Неопределено;
		Если Данные.ДанныеУведомления.Свойство(РазделИсходный) Тогда 
			СтраницаРаздела = Данные.ДанныеУведомления[РазделИсходный];
			СтраницаРаздела.Свойство(Ключ, ПоказательПоля);
			Если ЗначениеЗаполнено(ПоказательПоля) Тогда 
				ЗаполнитьЗначенияСвойств(СтрОтбораЗначение, СтрОтбора);
				СтрОтбораЗначение.Код = ПоказательПоля;
				Если СпискиВыбора.НайтиСтроки(СтрОтбораЗначение).Количество() = 0 Тогда
					ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
						"Неправильно заполнено: " + Схема.Область(Инд, 13, Инд, 13).Текст, РазделИсходный, Ключ, Неопределено));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Данные.Свойство("ДанныеМногостраничныхРазделов")
			И Данные.ДанныеМногостраничныхРазделов.Свойство(РазделИсходный) Тогда 
			ЗаполнитьЗначенияСвойств(СтрОтбораЗначение, СтрОтбора);
			Для Каждого Стр Из Данные.ДанныеМногостраничныхРазделов[РазделИсходный] Цикл 
				СтраницаРаздела = Стр.Значение;
				СтраницаРаздела.Свойство(Ключ, ПоказательПоля);
				Если ЗначениеЗаполнено(ПоказательПоля) Тогда 
					СтрОтбораЗначение.Код = ПоказательПоля;
					Если СпискиВыбора.НайтиСтроки(СтрОтбораЗначение).Количество() = 0 Тогда
						ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
							"Неправильно заполнено: " + Схема.Область(Инд, 13, Инд, 13).Текст, РазделИсходный, Ключ, СтраницаРаздела.УИД));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Данные.Свойство("ДанныеДопСтрокБД")И Данные.ДанныеДопСтрокБД.Свойство(РазделИсходный) 
			И РазделИсходный <> Раздел Тогда 
			
			СоответствиеУИД = Новый Соответствие;
			ЗаполнитьЗначенияСвойств(СтрОтбораЗначение, СтрОтбора);
			Для Каждого Стр Из Данные.ДанныеДопСтрокБД[РазделИсходный] Цикл 
				Если СоответствиеУИД[Стр.УИД] = Неопределено Тогда 
					СоответствиеУИД.Вставить(Стр.УИД, 1);
				Иначе
					СоответствиеУИД[Стр.УИД] = СоответствиеУИД[Стр.УИД] + 1;
				КонецЕсли;
				Если ТипЗнч(Данные.ДанныеДопСтрокБД[РазделИсходный].Колонки.Найти(Ключ)) = Тип("КолонкаТаблицыЗначений") Тогда 
					СтрОтбораЗначение.Код = Стр[Ключ];
					
					Если СпискиВыбора.НайтиСтроки(СтрОтбораЗначение).Количество() = 0 Тогда
						ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
							"Неправильно заполнено: " + Схема.Область(Инд, 13, Инд, 13).Текст, Раздел,
							Ключ + "___" + Формат(СоответствиеУИД[Стр.УИД], "ЧГ="), Стр.УИД));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПоказательНаСоотвествиеСписку(ТекущаяСтраница,
	СпискиВыбора,
	ИмяПоказателя,
	ИДСтраницы,
	Обязательность,
	Описание,
	ТаблицаОшибок) Экспорт 
		
	ТекУИД = ?(ТекущаяСтраница.Свойство("УИД"), ТекущаяСтраница.УИД, Неопределено);
	Если Обязательность = Истина 
		И Не ЗначениеЗаполнено(ТекущаяСтраница[ИмяПоказателя]) Тогда 
		
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не заполнено: " + Описание, ИДСтраницы, ИмяПоказателя, ТекУИД));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтраница[ИмяПоказателя]) Тогда 
		СтруктураОтбора = Новый Структура("ИДНаименования, ИмяПоля, Код", ИДСтраницы, ИмяПоказателя, ТекущаяСтраница[ИмяПоказателя]);
		Если СпискиВыбора.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Неправильно заполнено: " + Описание, ИДСтраницы, ИмяПоказателя, ТекУИД));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьСпискиВыбора(Форма, ИмяМакета) Экспорт
	Форма.СпискиВыбора.Очистить();
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	МакетСписковВыбора = ПолучитьМакетТабличногоДокумента(Форма, ИмяМакета);
	
	ОблВсеСписки = МакетСписковВыбора.Области.Найти("КоллекцияСписков");
	Если ОблВсеСписки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ОблВсеСписки.Верх;
	Пока ТекущаяСтрока <= ОблВсеСписки.Низ Цикл
		ИДНаименования = МакетСписковВыбора.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Если Не ЗначениеЗаполнено(ИДНаименования) Тогда 
			Прервать;
		КонецЕсли;
		
		ИмяПоля = МакетСписковВыбора.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		ИмяСписка = МакетСписковВыбора.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		
		Список = МакетСписковВыбора.Область(ИмяСписка);
		ТС = Список.Верх;
		Пока ТС <= Список.Низ Цикл
			Код = МакетСписковВыбора.Область(ТС, 1, ТС, 1).Текст;
			Наименование = МакетСписковВыбора.Область(ТС, 2, ТС, 2).Текст;
			Если Не ЗначениеЗаполнено(Код) И Не ЗначениеЗаполнено(Наименование) Тогда 
				Прервать;
			КонецЕсли;
			
			НовСтр = Форма.СпискиВыбора.Добавить();
			НовСтр.ИДНаименования = ИДНаименования;
			НовСтр.ИмяПоля = ИмяПоля;
			НовСтр.Код = Код;
			НовСтр.Наименование = Наименование;
			
			ТС = ТС + 1;
		КонецЦикла;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
КонецПроцедуры

Функция ЭтоПолеАдресаРегистрационныхЗаявлений(Поле) Экспорт 
	НрегПоле = НРег(Поле);
	Если СтрЗаканчиваетсяНа(НрегПоле, "типдома")
		Или СтрЗаканчиваетсяНа(НрегПоле, "дом")
		Или СтрЗаканчиваетсяНа(НрегПоле, "типкорпуса")
		Или СтрЗаканчиваетсяНа(НрегПоле, "корпус")
		Или СтрЗаканчиваетсяНа(НрегПоле, "типквартиры")
		Или СтрЗаканчиваетсяНа(НрегПоле, "квартира") Тогда 
		
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ВывестиСтрокуНаПечатьСКонтролемДляРегистрационныхЗаявлений(Строка, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию = "", ВыходЗаПределы = Ложь) Экспорт 
	ДлинаСтроки = СтрДлина(Строка);
	
	ИмяПараметра = ПрефиксПараметра + "_" + Формат(ДлинаСтроки, "ЧГ=");
	Если ДлинаСтроки > 1 И ОбластиМакета.Найти(ИмяПараметра) = Неопределено И ОбластиМакета.Найти(ПрефиксПараметра + "_1") <> Неопределено Тогда 
		ВыходЗаПределы = Истина;
	КонецЕсли;
	
	ВывестиСтрокуНаПечать(Строка, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию);
КонецПроцедуры

Процедура ВывестиСтрокуНаПечать(Строка, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию = "") Экспорт 
	ДлинаСтроки = СтрДлина(Строка);
	Индекс = 1;
	
	Пока Истина Цикл 
		ИмяПараметра = ПрефиксПараметра + "_" + Формат(Индекс, "ЧГ=");
		Обл = ОбластиМакета.Найти(ИмяПараметра);
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Если Индекс > ДлинаСтроки Тогда 
			Если ЗначениеЗаполнено(СимволПоУмолчанию) Тогда 
				Обл.Текст = СимволПоУмолчанию;
				Индекс = Индекс + 1;
			Иначе 
				Прервать;
			КонецЕсли;
		Иначе 
			Обл.Текст = Сред(Строка, Индекс, 1);
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиЧислоНаПечать(знач Число, ПрефиксПараметра, ОбластиМакета) Экспорт
	Число = ?(ЗначениеЗаполнено(Число), Число, 0);
	Инд = 1;
	ИмяПараметра = ПрефиксПараметра + "_1";
	Область = ОбластиМакета.Найти(ИмяПараметра);
	ЗнаковПослеЗапятой = 0;
	
	Если Область = Неопределено 
		Или Область.Лево <> Область.Право Тогда 
		Возврат;
	КонецЕсли;
	
	Координата = Область.Лево;
	
	Пока Истина Цикл 
		Инд = Инд + 1;
		ИмяПараметра = ПрефиксПараметра + "_" + Инд;
		Область = ОбластиМакета.Найти(ИмяПараметра);
		Если Область = Неопределено 
			Или Область.Лево <> Область.Право Тогда 
			Прервать;
		КонецЕсли;
		
		Если ЗнаковПослеЗапятой > 0 
			Или Область.Лево > Координата + 1 Тогда 
			
			ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
		КонецЕсли;
		
		Координата = Координата + 1;
	КонецЦикла;
	
	Если Число = 0 Тогда 
		Ч = "0" + Прав(Формат(Pow(10, ЗнаковПослеЗапятой), "ЧГ="), ЗнаковПослеЗапятой);
		Ч = Прав("                                " + Ч, Инд - 1);
	Иначе 
		Ч = Формат(Цел(Число * Pow(10, ЗнаковПослеЗапятой)), "ЧГ=");
		Если СтрДлина(Ч) < ЗнаковПослеЗапятой + 1 Тогда
			Ч = Прав("000000000000000000000000000000" + Ч, ЗнаковПослеЗапятой + 1);
		КонецЕсли;
		Ч = Прав("                                " + Ч, Инд - 1);
	КонецЕсли;
	ВывестиСтрокуНаПечать(Ч, ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Процедура ВывестиЧислоСПрочеркамиНаПечать(Знач Число, ПрефиксПараметра, ОбластиМакета, НастройкиПечати = Неопределено) Экспорт
	Число = ?(ЗначениеЗаполнено(Число), Число, 0);
	Инд = 1;
	ИмяПараметра = ПрефиксПараметра + "_1";
	Область = ОбластиМакета.Найти(ИмяПараметра);
	ЗнаковПослеЗапятой = 0;
	ЗнаковДоЗапятой = 1;
	
	Если Область = Неопределено  Тогда 
		Возврат;
	КонецЕсли;
	ЦелаяЧасть = Истина;
	
	Координата = Область.Право;
	Пока Истина Цикл 
		Инд = Инд + 1;
		ИмяПараметра = ПрефиксПараметра + "_" + Инд;
		Область = ОбластиМакета.Найти(ИмяПараметра);
		Если Область = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Если Область.Лево > Координата + 1 Тогда 
			ЦелаяЧасть = Ложь;
		КонецЕсли;
		Если ЦелаяЧасть Тогда
			ЗнаковДоЗапятой = ЗнаковДоЗапятой + 1;
		Иначе
			ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
		КонецЕсли;
		Координата = Область.Право;
	КонецЦикла;
	
	Если НастройкиПечати = Неопределено Тогда 
		НастройкиПечати = ДополнительныеНастройкиПечати();
	КонецЕсли;

	Если Число = 0 Тогда 
		Ч = "-------------------------------------------------";
	Иначе
		Если НастройкиПечати.ЧислаСлева Тогда 
			Ч = Лев(Формат(Цел(Число), "ЧН=0; ЧГ=") + "-----------------------------------------------", ЗнаковДоЗапятой);
		ИначеЕсли Число > 0 Тогда 
			Ч = Прав("-----------------------------------------------" + Формат(Цел(Число), "ЧН=0; ЧГ="), ЗнаковДоЗапятой);
		Иначе
			Ч = Прав("                                               " + Формат(Цел(Число), "ЧН=0; ЧГ="), ЗнаковДоЗапятой);
		КонецЕсли;
		ДробнаяЧасть = Макс(Цел(Число) - Число, Число - Цел(Число));
		Если ДробнаяЧасть = 0 Тогда 
			Ч2 = "";
		Иначе
			Ч2 = Формат(Цел(ДробнаяЧасть*Pow(10, ЗнаковПослеЗапятой)), "ЧГ=");
			Ч2 = Прав("00000000000000000000000000000000000000000000" + Ч2, ЗнаковПослеЗапятой);
			Ч2 = Лев(Ч2 + "00000000000000000000000000000000000000000000", ЗнаковПослеЗапятой);
		КонецЕсли;
		Ч = Ч + Ч2 + "-------------------------------------------------";
	КонецЕсли;
	ВывестиСтрокуНаПечать(Ч, ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Процедура ВывестиДатуНаПечать(Дата, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию = "") Экспорт
	ПредставлениеДаты = "";
	Для Инд = 1 По 8 Цикл 
		ПредставлениеДаты = ПредставлениеДаты + СимволПоУмолчанию;
	КонецЦикла;
	Если ЗначениеЗаполнено(Дата) Тогда 
		День = День(Дата);
		Месяц = Месяц(Дата);
		Год = Год(Дата);
		
		Если Год = 1 И Месяц = 1 И День = 1 Тогда 
			ПредставлениеДаты = СокрЛП(Формат(Дата, "ДФ=HHmmss; ДП=' '") + ПредставлениеДаты);
		Иначе
			ПредставлениеДаты = СокрЛП(Формат(Дата, "ДФ=ddMMyyyy; ДП=' '") + ПредставлениеДаты);
		КонецЕсли;
	КонецЕсли;
	
	ВывестиСтрокуНаПечать(ПредставлениеДаты, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию);
КонецПроцедуры

Процедура ВывестиОКВЭДНаПечать(ОКВЭД, ПрефиксПараметра, ОбластиМакета) Экспорт 
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОКВЭД, ".");
	Подстроки.Добавить("");
	Подстроки.Добавить("");
	Подстроки.Добавить("");
	Подстроки[0] = Прав("   " + Подстроки[0], 2);
	Подстроки[1] = Лев(Подстроки[1]+"   ", 2);
	Подстроки[2] = Лев(Подстроки[2]+"   ", 2);
	
	ВывестиСтрокуНаПечать(Подстроки[0]+Подстроки[1]+Подстроки[2], ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Функция НовыйПустойЛист() Экспорт 
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ПолеСверху = 5;
	ПечатнаяФорма.ПолеСправа = 5;
	ПечатнаяФорма.ПолеСнизу  = 5;
	ПечатнаяФорма.ПолеСлева  = 5;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	Возврат ПечатнаяФорма;
КонецФункции

Процедура ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр, ВыводитьТолькоЗаполненые = Истина) Экспорт 
	Если ВыводитьТолькоЗаполненые Тогда 
		ПФЗаполнена = Ложь;
		Для Каждого Параметр Из ПечатнаяФорма.Параметры Цикл 
			Если ЗначениеЗаполнено(Параметр) Тогда 
				ПФЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл 
			Если ПФЗаполнена Тогда 
				Прервать;
			КонецЕсли;
			
			Если СтрНачинаетсяС(НРег(Обл.Имя), "номстр_") Тогда 
				Продолжить;
			КонецЕсли;
			
			ПФЗаполнена = ЗначениеЗаполнено(Обл.Текст);
		КонецЦикла;
	Иначе
		ПФЗаполнена = Истина;
	КонецЕсли;
	
	Если Не ПФЗаполнена Тогда 
		НомСтр = НомСтр - 1;
		ПечатнаяФорма = НовыйПустойЛист();
		Возврат;
	КонецЕсли;
	
	Лист = Новый Массив;
	Лист.Добавить(ПоместитьВоВременноеХранилище(ПечатнаяФорма, Новый УникальныйИдентификатор));
	Лист.Добавить(Новый УникальныйИдентификатор);
	Лист.Добавить("Лист " + НомСтр);
	Листы.Добавить(Лист, "Лист " + НомСтр);
	
	ПечатнаяФорма = НовыйПустойЛист();
КонецПроцедуры

Процедура НачальныеОперацииСМногострочнымиБлоками(Форма) Экспорт
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многострочность Тогда
			Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
				Форма[Мнг.Значение].Очистить();
				Форма[Мнг.Значение].Добавить();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтраницаЗаполнена(Данные) Экспорт 
	Для Каждого КЗ Из Данные Цикл
		Если ТипЗнч(КЗ.Значение) = Тип("УникальныйИдентификатор") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КЗ.Значение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция МногострочнаяЧастьЗаполнена(Данные) Экспорт 
	Колонки = Данные.Колонки;
	Для Каждого Стр Из Данные Цикл 
		Для Каждого Колонка Из Данные.Колонки Цикл
			Если Колонка.Имя = "УИД" И ТипЗнч(Стр[Колонка.Имя]) = Тип("УникальныйИдентификатор") Тогда 
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр[Колонка.Имя]) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ЗаполнитьТаблицуФорматов(Форма, ИмяМакета) Экспорт
	МакетФорматов = ПолучитьМакетТабличногоДокумента(Форма, ИмяМакета);
	ТЧ = Новый ОписаниеТипов("Число");
	
	Стр = 0;
	Пока Истина Цикл 
		Стр = Стр + 1;
		ИДСтраницы = МакетФорматов.Область(Стр, 1, Стр, 1).Текст;
		Поле = МакетФорматов.Область(Стр, 2, Стр, 2).Текст;
		Всего = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 3, Стр, 3).Текст);
		ПослеЗапятой = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 4, Стр, 4).Текст);
		Неотрицательный = ЗначениеЗаполнено(МакетФорматов.Область(Стр, 5, Стр, 5).Текст);
		
		Если Не ЗначениеЗаполнено(ИДСтраницы) Или Не ЗначениеЗаполнено(Поле)
			Или Не ЗначениеЗаполнено(Всего) Или Не ЗначениеЗаполнено(ПослеЗапятой) Тогда 
			Прервать;
		КонецЕсли;
		
		НовСтр = Форма.ЧисловыеФорматы.Добавить();
		НовСтр.ИДСтраницы = ИДСтраницы;
		НовСтр.Поле = Поле;
		НовСтр.Всего = Всего;
		НовСтр.ПослеЗапятой = ПослеЗапятой;
		НовСтр.Неотрицательный = Неотрицательный;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТаблицуТекстовыхФорматов(Форма, ИмяМакета) Экспорт
	МакетФорматов = Отчеты[Форма.Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
	ТЧ = Новый ОписаниеТипов("Число");
	
	Стр = 0;
	Пока Истина Цикл 
		Стр = Стр + 1;
		ИДСтраницы = МакетФорматов.Область(Стр, 1, Стр, 1).Текст;
		Поле = МакетФорматов.Область(Стр, 2, Стр, 2).Текст;
		ДлСтроки = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 3, Стр, 3).Текст);

		Если Не ЗначениеЗаполнено(ИДСтраницы) Или Не ЗначениеЗаполнено(Поле)
			Или Не ЗначениеЗаполнено(ДлСтроки) Тогда 
			Прервать;
		КонецЕсли;
		
		НовСтр = Форма.ТекстовыеФорматы.Добавить();
		НовСтр.ИДСтраницы = ИДСтраницы;
		НовСтр.Поле = Поле;
		НовСтр.ДлСтроки = ДлСтроки;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФорматыВПолях(Форма) Экспорт
	ПоляСФорматами = Форма.ЧисловыеФорматы.НайтиСтроки(Новый Структура("ИДСтраницы", Форма.ТекущееИДНаименования));
	Для Каждого Стр Из ПоляСФорматами Цикл 
		Знак = ?(Стр.Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
		ОТ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Стр.Всего, Стр.ПослеЗапятой, Знак));
		Обл = Форма.ПредставлениеУведомления.Области.Найти(Стр.Поле);
		Если Обл <> Неопределено Тогда 
			Обл.ТипЗначения = ОТ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФорматыТекстаВПолях(Форма) Экспорт
	ПоляСФорматами = Форма.ТекстовыеФорматы.НайтиСтроки(Новый Структура("ИДСтраницы", Форма.ТекущееИДНаименования));
	Для Каждого Стр Из ПоляСФорматами Цикл 
		ОТ = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(Стр.ДлСтроки, ДопустимаяДлина.Переменная));
		Обл = Форма.ПредставлениеУведомления.Области.Найти(Стр.Поле);
		Если Обл <> Неопределено Тогда 
			Обл.ТипЗначения = ОТ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьСтраницуУведомления(Форма) Экспорт
	ТекущийЭлемент = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТекущийЭлемент <> Неопределено Тогда 
		НовСтр = СкопироватьСтрокуВДереве(Форма, ТекущийЭлемент);
		Возврат ОперацииСНовойСтрокой(НовСтр, Форма);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция КопироватьСтраницуУведомления(Форма, СПодчиненными) Экспорт
	ТекущийЭлемент = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТекущийЭлемент <> Неопределено Тогда 
		НовСтр = СкопироватьСтрокуВДеревеСДанными(Форма, ТекущийЭлемент, СПодчиненными);
		Возврат ОперацииСНовойСтрокой(НовСтр, Форма);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция УдалитьСтраницуНаСервере(Форма) Экспорт
	Для Каждого Стр Из Форма.ТекущиеМногострочныеЧасти Цикл 
		ТЗ = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[Стр.Значение]);
		Строки = ТЗ.НайтиСтроки(Новый Структура("УИД", Форма["УИДТекущаяСтраница"]));
		Для Каждого СтрМнг Из Строки Цикл 
			ТЗ.Удалить(СтрМнг);
		КонецЦикла;
		Форма.ДанныеДопСтрок[Стр.Значение] = ПоместитьВоВременноеХранилище(ТЗ, Форма.ДанныеДопСтрок[Стр.Значение]);
	КонецЦикла;
	
	ТекущийЭлемент = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТекущийЭлемент <> Неопределено Тогда
		Родитель = ТекущийЭлемент.ПолучитьРодителя();
		Если Родитель.ПолучитьЭлементы().Количество() = 1 Тогда
			ДобавитьСтраницуУведомления(Форма);
			ПослеУдаления = Родитель.ПолучитьЭлементы()[1];
		Иначе
			ПослеУдаления = Родитель.ПолучитьЭлементы()[0];
			Если ПослеУдаления = ТекущийЭлемент Тогда
				ПослеУдаления = Родитель.ПолучитьЭлементы()[1];
			Иначе
				Для Каждого Стр Из Родитель.ПолучитьЭлементы() Цикл 
					Если Стр = ТекущийЭлемент Тогда 
						Прервать;
					КонецЕсли;
					ПослеУдаления = Стр;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьСтруктурыДанных(Форма, ТекущийЭлемент);
		Родитель.ПолучитьЭлементы().Удалить(ТекущийЭлемент);
		ПеренумероватьЭлементы(Родитель);
		Форма.Модифицированность = Истина;
		НовИд = ПослеУдаления.ПолучитьИдентификатор();
		Если НовИд <> Неопределено Тогда 
			Форма.Элементы.ДеревоСтраниц.ТекущаяСтрока = НовИд;
		КонецЕсли;
		Возврат НовИд;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ПроставлениеКоличестваСтраниц(СписокПечатаемыхЛистов) Экспорт
	Если ТипЗнч(СписокПечатаемыхЛистов) = Тип("СписокЗначений")
		И СписокПечатаемыхЛистов.Количество() > 0 Тогда 
		
		ЭлементТитульныйЛист = СписокПечатаемыхЛистов[0].Значение;
		Если ТипЗнч(ЭлементТитульныйЛист) = Тип("Массив")
			И ЭлементТитульныйЛист.Количество() = 3 
			И ЭтоАдресВременногоХранилища(ЭлементТитульныйЛист[0])
			И ТипЗнч(ЭлементТитульныйЛист[1]) = Тип("УникальныйИдентификатор") Тогда 
			
			ТабДок = ПолучитьИзВременногоХранилища(ЭлементТитульныйЛист[0]);
			ВывестиЧислоСПрочеркамиНаПечать(СписокПечатаемыхЛистов.Количество(), "ВсегоСтраниц", ТабДок.Области);
			ЭлементТитульныйЛист[0] = ПоместитьВоВременноеХранилище(ТабДок, ЭлементТитульныйЛист[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьУведомленияБРО(Форма) Экспорт
	Форма.СохранитьДанные();
	Если ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура") Тогда 
		Форма.СтруктураРеквизитовУведомления = Новый Структура(
			"СписокПечатаемыхЛистов", Отчеты[Форма.Объект.ИмяОтчета].СформироватьСписокЛистов(Форма.Объект.Ссылка));
	Иначе
		Форма.СтруктураРеквизитовУведомления = Новый Структура(
			"СписокПечатаемыхЛистов", Отчеты[Форма.Объект.ИмяОтчета].СформироватьСписокЛистов(Форма.Объект));
	КонецЕсли;
	
	ПроставлениеКоличестваСтраниц(Форма.СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов);
	Для Каждого Элт Из Форма.СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов Цикл 
		ЗначениеДляМодификации = Элт.Значение;
		ТабДок = ПолучитьИзВременногоХранилища(ЗначениеДляМодификации[0]);
		УИД = Новый УникальныйИдентификатор;
		ЗначениеДляМодификации[0] = ПоместитьВоВременноеХранилище(ТабДок, УИД);
		ЗначениеДляМодификации[1] = УИД;
	КонецЦикла;
КонецПроцедуры

Функция СкопироватьСтрокуВДереве(Форма, Источник) Экспорт 
	Родитель = Источник.ПолучитьРодителя();
	Приемник = Родитель.ПолучитьЭлементы().Добавить();
	СкопироватьСтрокуВДеревеРек(Форма, Источник, Приемник);
	Возврат Приемник;
КонецФункции

Функция ПолучитьУИДРодителя(Строка) Экспорт 
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда 
		Родитель = Строка.Родитель;
	Иначе 
		Родитель = Строка.ПолучитьРодителя();
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель.ИДНаименования) Тогда 
		Возврат Родитель.УИД;
	КонецЕсли;
	
	Возврат ПолучитьУИДРодителя(Родитель);
КонецФункции

Процедура НачальныеОперацииПриСозданииНаСервере(Форма) Экспорт
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Форма.Объект.ДатаПодписи = ТекущаяДатаСеанса();
		Форма.Заголовок = Форма.Заголовок + " (создание)";
	КонецЕсли;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	Форма.Объект.ИмяФормы = Разложение[3];
	Форма.Объект.ИмяОтчета = Разложение[1];
	
	ДобавлениеСтандартныхРеквизитовФормы(Форма);
	ДобавлениеРеквизитовДляЗапретаРедактирования(Форма);
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.УведомлениеОСпецрежимахНалогообложения) Тогда 
		ЗапретитьРедактированиеРеквизитовОткрытогоОтчета(Форма);
		ОбщегоНазначения.СообщитьПользователю("Отсутствует право на редактирование отчета");
	ИначеЕсли ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Форма.Объект.Ссылка, , Форма.УникальныйИдентификатор);
		Исключение
			ЗапретитьРедактированиеРеквизитовОткрытогоОтчета(Форма);
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке.Причина.Описание);
		КонецПопытки;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("СсылкаНового") Тогда
		НовыеРеквизиты = Новый Массив;
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаНоваяСсылка(), Новый ОписаниеТипов()));
		Форма.ИзменитьРеквизиты(НовыеРеквизиты);
		Форма[ИмяРеквизитаНоваяСсылка()] = Форма.Параметры.СсылкаНового;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(Форма);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Форма.Объект.Ссылка);
КонецПроцедуры

Процедура СобратьДанныеМногострочныхЧастейТекущейСтраницы(Форма, МногострочныеЧасти, ПредУИД) Экспорт 
	Для Каждого МнгЧ Из Форма.ТекущиеМногострочныеЧасти Цикл 
		СЗ = Форма.ДанныеДопСтрокСтраницы[МнгЧ.Значение];
		Для Инд = 1 По СЗ.Количество() Цикл 
			ИндСтр = Форма.РазделительНомераСтроки + Формат(Инд, "ЧГ=0");
			ДанныеСтроки = СЗ[Инд-1].Значение;
			Для Каждого КЗ Из ДанныеСтроки Цикл 
				ДанныеСтроки[КЗ.Ключ] = Форма.ПредставлениеУведомления.Области[КЗ.Ключ + ИндСтр].Значение;
			КонецЦикла;
		КонецЦикла;
		
		ВсеДопСтроки = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[МнгЧ.Значение]);
		СтрокиТекущейСтраницы = ВсеДопСтроки.НайтиСтроки(Новый Структура("УИД", ПредУИД));
		Для Инд = 0 По СтрокиТекущейСтраницы.Количество() - СЗ.Количество() - 1 Цикл 
			ВсеДопСтроки.Удалить(СтрокиТекущейСтраницы[Инд]);
		КонецЦикла;
		
		Для Инд = СтрокиТекущейСтраницы.Количество() + 1 По СЗ.Количество() Цикл 
			НовСтр = ВсеДопСтроки.Добавить();
			НовСтр.УИД = ПредУИД;
		КонецЦикла;
		
		СтрокиТекущейСтраницы = ВсеДопСтроки.НайтиСтроки(Новый Структура("УИД", ПредУИД));
		Для Инд = 0 По СтрокиТекущейСтраницы.ВГраница() Цикл 
			ЗаполнитьЗначенияСвойств(СтрокиТекущейСтраницы[Инд], СЗ[Инд].Значение);
		КонецЦикла;
		
		Форма.ДанныеДопСтрок[МнгЧ.Значение] = ПоместитьВоВременноеХранилище(ВсеДопСтроки, Форма.ДанныеДопСтрок[МнгЧ.Значение]);
	КонецЦикла;
КонецПроцедуры

Процедура ПоказатьМногострочныеЧасти(Форма, Макет, МногострочныеЧасти, ЧисловыеФорматы = Неопределено) Экспорт 
	Если ТипЗнч(МногострочныеЧасти) = Тип("СписокЗначений") 
		И МногострочныеЧасти.Количество() > 0 Тогда 
		
		Для Каждого МнгСтр Из МногострочныеЧасти Цикл 
			ТЗ = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[МнгСтр.Значение]);
			ИсхСтр = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение][0].Значение);
			Для Каждого КЗ Из ИсхСтр Цикл 
				ИсхСтр[Кз.Ключ] = Неопределено;
			КонецЦикла;
			
			Строки = ТЗ.НайтиСтроки(Новый Структура("УИД", Форма.УИДТекущаяСтраница));
			Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение].Очистить();
			Инд = 0;
			Пока Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение].Количество() < Строки.Количество() Цикл 
				ТекСтр = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИсхСтр);
				ЗаполнитьЗначенияСвойств(ТекСтр, Строки[Инд]);
				Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение].Добавить(ТекСтр);
				Инд = Инд + 1;
			КонецЦикла;
			
			Если Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение].Количество() = 0 Тогда 
				Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение].Добавить(ИсхСтр);
			КонецЕсли;
			
			Форма.ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть("Header_" + МнгСтр.Значение));
			Инд = 0;
			ВыводитьЗначокУдаления = Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение].Количество() > 1;
			Для Каждого Стр Из Форма.ДанныеДопСтрокСтраницы[МнгСтр.Значение] Цикл
				Инд = Инд + 1;
				ИндСтр = Форма.РазделительНомераСтроки + Формат(Инд, "ЧГ=");
				Обл = Макет.ПолучитьОбласть("Str_" + МнгСтр.Значение);
				Для Каждого ОблПодч Из Обл.Области Цикл 
					Если ОблПодч.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
						Если ТипЗнч(ЧисловыеФорматы) = Тип("ДанныеФормыКоллекция") Тогда 
							ПоляСФорматами = ЧисловыеФорматы.НайтиСтроки(Новый Структура("ИДСтраницы, Поле", Форма.ТекущееИДНаименования, ОблПодч.Имя));
							Если ПоляСФорматами.Количество() = 1 Тогда 
								Знак = ?(ПоляСФорматами[0].Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
								ОТ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ПоляСФорматами[0].Всего, ПоляСФорматами[0].ПослеЗапятой, Знак));
								ОблПодч.ТипЗначения = ОТ;
							КонецЕсли;
						КонецЕсли;
						Если ОблПодч.СодержитЗначение Тогда 
							Стр.Значение.Свойство(ОблПодч.Имя, ОблПодч.Значение);
						КонецЕсли;
						ОблПодч.Имя = ОблПодч.Имя + ИндСтр;
					КонецЕсли;
					
					Если ВыводитьЗначокУдаления И ОблПодч.Имя = "Del_" + МнгСтр.Значение + ИндСтр Тогда 
						ОблПодч.Текст = "х";
						ОблПодч.Гиперссылка = Истина;
					КонецЕсли;
				КонецЦикла;
				Форма.ПредставлениеУведомления.Вывести(Обл);
			КонецЦикла;
			Форма.ПредставлениеУведомления.Области["Str_" + МнгСтр.Значение].Имя = "";
			
			ОблДобавленияСтроки = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ОбщиеЭлементы").ПолучитьОбласть("AddStrArea");
			ОблДобавленияСтроки.Области["AddStrLabel"].Имя = "AddStrLabel_" + МнгСтр.Значение;
			ОблДобавленияСтроки.Области["AddStr"].Имя = "AddStr_" + МнгСтр.Значение;
			Форма.ПредставлениеУведомления.Вывести(ОблДобавленияСтроки);
			Форма.ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть("Footer_" + МнгСтр.Значение));
		КонецЦикла;
		РаскраситьАвтозаполняемыеЯчейки(Форма);
		ПозиционироватьсяНаЯчейке(Форма);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьДанные(Форма, СтруктураПараметров) Экспорт
	Документ = Форма.РеквизитФормыВЗначение("Объект");
	ЭтоНовый = Документ.ЭтоНовый();
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаНоваяСсылка()) И ЭтоНовый Тогда
		Документ.УстановитьСсылкуНового(Форма[ИмяРеквизитаНоваяСсылка()]);
	КонецЕсли;

	Документ.Записать();
	
	Форма.ЗначениеВРеквизитФормы(Документ, "Объект");
	Форма.Модифицированность = Ложь;
	Форма.Заголовок = СтрЗаменить(Форма.Заголовок, " (создание)", "");
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(Форма);
	Если ЭтоНовый Тогда 
		ЗаблокироватьДанныеДляРедактирования(Форма.Объект.Ссылка, , Форма.УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(Форма, Новый Структура("ЭтоНовоеУведомление", Ложь));
	КонецЕсли;
КонецПроцедуры

Процедура ХранимыеВСтруктуреФайлыРек(Стр, Результат)
	Для Каждого Кол Из Стр.Владелец().Колонки Цикл 
		Если ТипЗнч(Стр[Кол.Имя]) = Тип("СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы")
			И ЗначениеЗаполнено(Стр[Кол.Имя]) Тогда 
			Результат.Вставить(Стр[Кол.Имя]);
		КонецЕсли;
		Для Каждого СтрПодч Из Стр.Строки Цикл 
			ХранимыеВСтруктуреФайлыРек(СтрПодч, Результат);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ХранимыеВСтруктуреФайлы(Форма)
	ПриложенныеФайлы = Форма.РеквизитФормыВЗначение("ПриложенныеФайлы");
	Результат = Новый Соответствие;
	
	Если ТипЗнч(ПриложенныеФайлы) = Тип("ДеревоЗначений") Тогда 
		Для Каждого Стр Из ПриложенныеФайлы.Строки Цикл 
			ХранимыеВСтруктуреФайлыРек(Стр, Результат);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура СохранитьДанныеСУдалениемФайлов(Форма, СтруктураПараметров) Экспорт
	Документ = Форма.РеквизитФормыВЗначение("Объект");
	ЭтоНовый = Документ.ЭтоНовый();
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаНоваяСсылка()) И ЭтоНовый Тогда
		Документ.УстановитьСсылкуНового(Форма[ИмяРеквизитаНоваяСсылка()]);
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		Документ.Записать();
		
		ПрисодединенныеФайлы = Новый Массив;
		ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами").ЗаполнитьПрисоединенныеФайлыКОбъекту(Документ.Ссылка, ПрисодединенныеФайлы);
		СлужебныеФайлыИнфо = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПрисодединенныеФайлы, "Служебный");
		Для Каждого Файл Из ПрисодединенныеФайлы Цикл 
			Если СлужебныеФайлыИнфо[Файл] <> Истина Тогда 
				СлужебныеФайлыИнфо.Удалить(Файл);
			КонецЕсли;
		КонецЦикла;
		
		ХранимыеВСтруктуреФайлы = ХранимыеВСтруктуреФайлы(Форма);
		СлужебныеФайлыИнфо.Удалить("ываваывав");
		Для Каждого КЗ Из ХранимыеВСтруктуреФайлы Цикл 
			СлужебныеФайлыИнфо.Удалить(КЗ.Ключ);
		КонецЦикла;
		
		Для Каждого КЗ Из СлужебныеФайлыИнфо Цикл 
			УдалениеПрисоединенногоСлужебногоФайла(КЗ.Ключ, Ложь);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось сохранить уведомление, обратитесь к администратору");
		Возврат;
	КонецПопытки;
	
	Форма.ЗначениеВРеквизитФормы(Документ, "Объект");
	Форма.Модифицированность = Ложь;
	Форма.Заголовок = СтрЗаменить(Форма.Заголовок, " (создание)", "");
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(Форма);
	Если ЭтоНовый Тогда 
		ЗаблокироватьДанныеДляРедактирования(Форма.Объект.Ссылка, , Форма.УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(Форма, Новый Структура("ЭтоНовоеУведомление", Ложь));
	КонецЕсли;
КонецПроцедуры

#Область ЖурналыСправок

Функция ЗагрузитьСправку(СхемаВыгрузки, ДеревоЗагрузки, ПутьКСтрокеСДанными) Экспорт 
	ТекущиеДанные = Новый Структура;
	ДанныеСправкиПоСхеме = НайтиУзелВДеревеПоПути(СхемаВыгрузки, ПутьКСтрокеСДанными, "Код");
	ЗагрузитьСправкуРек(ДанныеСправкиПоСхеме, ДеревоЗагрузки, ПутьКСтрокеСДанными, ТекущиеДанные);
	Возврат ТекущиеДанные;
КонецФункции

Процедура ЗагрузитьСправкуРек(СтрокаСхемыВыгрузки, ДеревоЗагрузки, ПутьКСтрокеСДанными, ТекущиеДанные) Экспорт
	Если ЗначениеЗаполнено(СтрокаСхемыВыгрузки.Ключ) И ЗначениеЗаполнено(СтрокаСхемыВыгрузки.Код) Тогда 
		УзелЗагрузки = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/" + ПутьКСтрокеСДанными, "ИмяЭлемента");
		Если ТипЗнч(УзелЗагрузки) = Тип("СтрокаДереваЗначений") Тогда 
			ТекущиеДанные.Вставить(СтрокаСхемыВыгрузки.Ключ, УзелЗагрузки.ЗначениеЭлемента);
		КонецЕсли;
	КонецЕсли;
	Для Каждого Строка Из СтрокаСхемыВыгрузки.Строки Цикл 
		ЗагрузитьСправкуРек(Строка, ДеревоЗагрузки, ПутьКСтрокеСДанными + "/" + Строка.Код, ТекущиеДанные);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСправкуИзXMLЗаполнениеДанных(Форма, ДополнительныеПараметры, ИмяРаздела) Экспорт 
	ТекстВыгрузки = ДополнительныеПараметры.ТД.ПолучитьТекст();
	ДанныеСправки = Отчеты[Форма.Объект.ИмяОтчета].ДанныеСправки(Форма.Объект, ТекстВыгрузки);
	Если ТипЗнч(ДанныеСправки) = Тип("Структура") Тогда 
		Для Каждого Стр Из Форма.ДанныеМногостраничныхРазделов[ИмяРаздела] Цикл 
			Если Стр.Значение.УИД = Форма.УИДТекущаяСтраница Тогда 
				Для Каждого КЗ Из Стр.Значение Цикл 
					Область = Форма.ПредставлениеУведомления.Области.Найти(КЗ.Ключ);
					Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента")
						И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						И Область.СодержитЗначение = Истина Тогда 
						
						Если ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
							Стр.Значение[КЗ.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСправки, КЗ.Ключ));
						Иначе 
							Стр.Значение[КЗ.Ключ] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСправки, КЗ.Ключ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Форма.ПоказатьТекущуюМногостраничнуюСтраницу(Форма.ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы()[0].ИмяМакета, Форма.УИДТекущаяСтраница);
				Форма.Модифицированность = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ЭлектронноеПредставлениеСправки(Объект, УникальныйИдентификатор, СодержаниеВыгрузки) Экспорт
	Если СодержаниеВыгрузки = Неопределено Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выгрузка данного уведомления не предусмотрена';
													|en = 'Выгрузка данного уведомления не предусмотрена'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив;
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		Если ЗначениеЗаполнено(ЭлементВыгрузки.ТекстФайла) Тогда 
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			СохраняемыйФайл = Новый ТекстовыйДокумент;
			СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
			СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
			
			ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Если УникальныйИдентификатор <> Неопределено Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
			КонецЕсли;
			
			УдалитьФайлы(ИмяВременногоФайла);
			
			СтруктураВыгрузки = Новый Структура;
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
			СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
			СтруктураВыгрузки.Вставить("ТестВыгрузки", ЭлементВыгрузки.ТекстФайла);
			СтруктураВыгрузки.Вставить("КодировкаВыгрузки", ЭлементВыгрузки.КодировкаТекста);
			
			Результат.Добавить(СтруктураВыгрузки);
		ИначеЕсли СодержаниеВыгрузки.Колонки.Найти("ДвоичныеДанныеФайла") <> Неопределено Тогда 
			СтруктураВыгрузки = Новый Структура;
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", ПоместитьВоВременноеХранилище(ЭлементВыгрузки.ДвоичныеДанныеФайла));
			СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
			СтруктураВыгрузки.Вставить("ТестВыгрузки", "");
			СтруктураВыгрузки.Вставить("КодировкаВыгрузки", "");
			
			Результат.Добавить(СтруктураВыгрузки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ПроверкаДанныхПолучателяСправки(Сведения, ИмяСтраницы, ТаблицаОшибок, ПризнакСовпадения) Экспорт 
	Если Не ЗначениеЗаполнено(Сведения.Фамилия) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана фамилия", ИмяСтраницы, "Фамилия", Сведения.УИД));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Сведения.Имя) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указано имя", ИмяСтраницы, "Имя", Сведения.УИД));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Сведения.ДатаРожд) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана дата рождения", ИмяСтраницы, "ДатаРожд", Сведения.УИД));
	КонецЕсли;
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаИНН(Сведения, ТаблицаОшибок, ИмяСтраницы, "ИННФЛ", Ложь, Ложь);
	Если Не ЗначениеЗаполнено(Сведения.ИННФЛ)
		Или БлокЗаполнен(Сведения, "КодВидДок,СерНомДок,ДатаДок") Тогда 
		Если Не ЗначениеЗаполнено(Сведения.КодВидДок) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан код документа", ИмяСтраницы, "КодВидДок", Сведения.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Сведения.СерНомДок) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указаны серия/номер документа", ИмяСтраницы, "СерНомДок", Сведения.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Сведения.ДатаДок) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указана дата выдачи документа", ИмяСтраницы, "ДатаДок", Сведения.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ПризнакСовпадения = "0" Тогда 
		Если Не ЗначениеЗаполнено(Сведения.ФамилияПолучатель) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указана фамилия", ИмяСтраницы, "ФамилияПолучатель", Сведения.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Сведения.ИмяПолучатель) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано имя", ИмяСтраницы, "ИмяПолучатель", Сведения.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Сведения.ДатаРождПолучатель) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указана дата рождения", ИмяСтраницы, "ДатаРождПолучатель", Сведения.УИД));
		КонецЕсли;
		УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаИНН(Сведения, ТаблицаОшибок, "СведОплФизУсл", "ИННФЛПолучатель", Ложь, Ложь);
		Если Не ЗначениеЗаполнено(Сведения.ИННФЛПолучатель) Или БлокЗаполнен(Сведения, "КодВидДокПолучатель,СерНомДокПолучатель,ДатаДокПолучатель") Тогда 
			Если Не ЗначениеЗаполнено(Сведения.КодВидДокПолучатель) Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указан код документа", ИмяСтраницы, "КодВидДокПолучатель", Сведения.УИД));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Сведения.СерНомДокПолучатель) Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указаны серия/номер документа", ИмяСтраницы, "СерНомДокПолучатель", Сведения.УИД));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Сведения.ДатаДокПолучатель) Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указана дата выдачи документа", ИмяСтраницы, "ДатаДокПолучатель", Сведения.УИД));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПризнакСовпадения = "1" Тогда 
		Если БлокЗаполнен(Сведения, "ИННФЛПолучатель,ДатаРождПолучатель,КодВидДокПолучатель,СерНомДокПолучатель,"
				+"ДатаДокПолучатель,ФамилияПолучатель,ИмяПолучатель,ОтчествоПолучатель") Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"При признаке ""1"" сведения кому оказаны услуги не заполняются", ИмяСтраницы, "ФамилияПолучатель", Сведения.УИД));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьСправку(Объект, УИДТекущаяСтраница, ИмяРаздела) Экспорт
	СписокИспользуемыхМакетов = УведомлениеОСпецрежимахНалогообложения.ЗагрузитьМакетыИзАрхива(Объект, "БланкиПечати_");
	Листы = Новый СписокЗначений;
	
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураПараметров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеУведомления").Получить();
	
	ДанныеПечати = Новый Структура;
	Для Каждого Стр Из СтруктураПараметров.ДанныеМногостраничныхРазделов[ИмяРаздела] Цикл 
		Если Стр.Значение.УИД = УИДТекущаяСтраница Тогда 
			ДанныеПечати = Стр.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ДанныеПечати["НомКорр"] = РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(ДанныеПечати["НомКорр"]);
	
	ИННКПП = УведомлениеОСпецрежимахНалогообложения.ТиповаяСтруктураИННКППДляПечати(Объект, СтруктураПараметров.ДанныеУведомления.Титульная);
	ИННКПП.Вставить("НаимОрг", СтруктураПараметров.ДанныеУведомления.Титульная.НаимОрг);
	ИННКПП.Вставить("ОтчГод", СтруктураПараметров.ДанныеУведомления.Титульная.ОтчГод);
	ИННКПП.Вставить("ДАТА_ПОДПИСИ", СтруктураПараметров.ДанныеУведомления.Титульная.ДАТА_ПОДПИСИ);
	
	НомСтр = 0;
	НапечататьСтруктуру(Объект.ИмяОтчета, ДанныеПечати, НомСтр, 
		ПустойМакетИзСписка(Объект, СписокИспользуемыхМакетов, "Печать_Налогоплательщик_2023_1"), ПечатнаяФорма, ИННКПП);
	ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
	
	НапечататьСтруктуру(Объект.ИмяОтчета, ДанныеПечати, НомСтр, 
		ПустойМакетИзСписка(Объект, СписокИспользуемыхМакетов, "Печать_Получатель_2023_1"), ПечатнаяФорма, ИННКПП);
	УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
	
	Возврат Листы;
КонецФункции

Функция СформироватьЖурналСправок(Объект, ИмяРаздела) Экспорт
	Листы = Новый СписокЗначений;
	ПечатнаяФорма = НовыйПустойЛист();
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	МакетПФ = Отчеты[Объект.ИмяОтчета].ПолучитьМакет("Печать_Журнал_2023_1");
	Заголовок = МакетПФ.ПолучитьОбласть("Заголовок");
	Строка = МакетПФ.ПолучитьОбласть("Строка");
	Подвал = МакетПФ.ПолучитьОбласть("Подвал");
	
	ДанныеУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеУведомления").Получить();
	Титульная = ДанныеУведомления.ДанныеУведомления.Титульная;
	ЗаполнитьЗначенияСвойств(Заголовок.Параметры, Титульная);
	ПечатнаяФорма.Вывести(Заголовок);
	
	Инд = 0;
	Для Каждого Стр Из ДанныеУведомления.ДанныеМногостраничныхРазделов[ИмяРаздела] Цикл 
		Инд = Инд + 1;
		ЗаполнитьЗначенияСвойств(Строка.Параметры, Титульная);
		ЗаполнитьЗначенияСвойств(Строка.Параметры, Стр.Значение);
		Строка.Параметры.НомПП = Инд;
		Строка.Параметры.ФИО = СокрЛП("" + Стр.Значение.Фамилия + " " + Стр.Значение.Имя + " " + Стр.Значение.Отчество);
		Строка.Параметры.ФИОПолучатель = СокрЛП("" + Стр.Значение.ФамилияПолучатель + " " + Стр.Значение.ИмяПолучатель + " " + Стр.Значение.ОтчествоПолучатель);
		ПечатнаяФорма.Вывести(Строка);
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(Подвал);
	ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, 1, Ложь);
	Возврат Листы;
КонецФункции

Процедура СформироватьКомандыРаботыСоСправкамиЗаблокированногоОбъекта(Форма) Экспорт 
	Если Форма.Элементы.ПредставлениеУведомления.ТолькоПросмотр Тогда
		ПодменюДействий = Форма.Элементы.Добавить("ДействияСоСправкой", Тип("ГруппаФормы"), Форма.КоманднаяПанель);
		ПодменюДействий.Заголовок = "Операции со справкой";
		ПодменюДействий.Вид = ВидГруппыФормы.Подменю;
		
		НоваяКоманда = Форма.Команды.Добавить("ПечатьСправки");
		НоваяКоманда.Действие = "Подключаемый_КомандаРаботыСоСправкой";
		НоваяКоманда.Заголовок = "Печать справки";
		НовыйЭлемент = Форма.Элементы.Добавить("ПечатьСправки", Тип("КнопкаФормы"), ПодменюДействий);
		НовыйЭлемент.ИмяКоманды = "ПечатьСправки";
		
		НоваяКоманда = Форма.Команды.Добавить("ПечатьPDF417");
		НоваяКоманда.Действие = "Подключаемый_КомандаРаботыСоСправкой";
		НоваяКоманда.Заголовок = "Печать справки (PDF-417)";
		НовыйЭлемент = Форма.Элементы.Добавить("ПечатьPDF417", Тип("КнопкаФормы"), ПодменюДействий);
		НовыйЭлемент.ИмяКоманды = "ПечатьPDF417";
		
		НоваяКоманда = Форма.Команды.Добавить("ВыгрузитьСправку");
		НоваяКоманда.Действие = "Подключаемый_КомандаРаботыСоСправкой";
		НоваяКоманда.Заголовок = "Выгрузить справку";
		НовыйЭлемент = Форма.Элементы.Добавить("ВыгрузитьСправку", Тип("КнопкаФормы"), ПодменюДействий);
		НовыйЭлемент.ИмяКоманды = "ВыгрузитьСправку";
		
		Форма.Элементы.Переместить(ПодменюДействий, Форма.КоманднаяПанель, Форма.Элементы.ОтправитьВКонтролирующийОрган);
	КонецЕсли;
КонецПроцедуры

Процедура СпрятатьЭлементыРаботыСоСправкамиЗаблокированногоОбъекта(Форма) Экспорт 
	Если Форма.Элементы.ПредставлениеУведомления.ТолькоПросмотр Тогда
		Для Каждого СтрОбл Из СтрРазделить("ПечатьСправки,ПечатьPDF417,ВыгрузитьСправку,ПроверитьВыгрузкуСправки,ЗагрузитьИзФайла", ",") Цикл 
			Область = Форма.ПредставлениеУведомления.Области.Найти(СтрОбл);
			Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
				Область.Гиперссылка = Ложь;
				Область.Текст = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияСданныхОтчетов

Функция СохраненныйСтатусОтправкиУведомления(Объект) Экспорт 
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЖурналОтправокВКонтролирующиеОрганы.*
	|ИЗ
	|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
	|ГДЕ
	|	ЖурналОтправокВКонтролирующиеОрганы.Организация = &Организация
	|	И ЖурналОтправокВКонтролирующиеОрганы.Ссылка = &Уведомление";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Уведомление", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатусОтправки;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

Функция ПолучитьМакетТабличногоДокумента(Форма, ИмяМакета) Экспорт 
	Если Метаданные.Отчеты[Форма.Объект.ИмяОтчета].Макеты.Найти(ИмяМакета) = Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Форма.ИмяМакетаАрхиваТабличныхДокументов) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(Форма.АдресВХранилищеЭкранныеФормы) Тогда 
			СоответсвиеМакетов = ПолучитьИзВременногоХранилища(Форма.АдресВХранилищеЭкранныеФормы);
			Если СоответсвиеМакетов = Неопределено Тогда 
				СоответсвиеМакетов = ЗагрузитьМакетыТабличныхДокументовИзАрхива(Форма);
			КонецЕсли;
		Иначе
			СоответсвиеМакетов = ЗагрузитьМакетыТабличныхДокументовИзАрхива(Форма);
		КонецЕсли;
		Возврат СоответсвиеМакетов[ИмяМакета];
	Иначе
		Возврат Отчеты[Форма.Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
	КонецЕсли;
КонецФункции

Процедура СформироватьМакетПростойФормы(Форма, ИмяМакета, ПредставлениеУведомления) Экспорт 
	Форма[ПредставлениеУведомления].Очистить();
	МакетДокумента = Отчеты[СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1]].ПолучитьМакет(ИмяМакета);
	СформироватьСтруктуруДанныхПростогоУведомления(Форма, МакетДокумента);
	Форма[ПредставлениеУведомления].Вывести(МакетДокумента);
КонецПроцедуры

Процедура ЗагрузитьДанныеПростогоУведомления(Форма, ДанныеДляЗагрузки, ТабДок) Экспорт
	Для Каждого КЗ Из ДанныеДляЗагрузки Цикл
		Обл = ТабДок.Области.Найти(КЗ.Ключ);
		Если Обл <> Неопределено Тогда 
			Обл.Значение = КЗ.Значение;
			Форма.ДанныеУведомления.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьКонтейнерДанныхУведомления(КонтейнерВходящий, КонтейнерРезультат, ЕстьМногостраничность = Ложь) Экспорт 
	КонтейнерРезультат.Вставить("ДанныеУведомления", Новый Структура);
	Если ЕстьМногостраничность Тогда
		КонтейнерРезультат.Вставить("ДанныеМногостраничныхРазделов", Новый Структура);
	КонецЕсли;
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтейнерВходящий.ИмяФормы, ".");
	
	Для Каждого Стр Из КонтейнерВходящий.ДеревоСтраниц.Строки Цикл
		Если Стр.Многостраничность Тогда 
			Если Стр.Многострочность Тогда
				// пока пусто
			Иначе
				МнгСтр = Стр.Строки[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(МнгСтр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если МнгСтр.Строки.Количество() > 0 Тогда
					СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				КонтейнерРезультат.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
			КонецЕсли;
		Иначе
			Если Стр.Многострочность Тогда
				ОбластиВМногостраничнойЧасти = Новый Соответствие;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
					Для Каждого Обл Из МакетДокумента.ПолучитьОбласть(Мнг.Значение).Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ОбластиВМногостраничнойЧасти.Вставить(Обл.Имя, Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение
						И ОбластиВМногостраничнойЧасти[Обл.Имя] = Неопределено Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				КонтейнерРезультат.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			Иначе
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				КонтейнерРезультат.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НачальныеОперацииСКонтейнеромМногострочныхБлоков(КонтейнерВходящий, КонтейнерРезультат) Экспорт
	Для Каждого Стр Из КонтейнерВходящий.ДеревоСтраниц.Строки Цикл
		Если Стр.Многострочность Тогда
			Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
				ТЗ = Новый ТаблицаЗначений;
				ТЗ.Колонки.Добавить("А01020000", Новый ОписаниеТипов("Строка"));
				ТЗ.Добавить();
				КонтейнерРезультат.Вставить(Мнг.Значение, ТЗ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхУведомленияНовогоОбразца(Форма) Экспорт 
	Форма.ДанныеУведомления = Новый Структура;
	Форма.ДанныеМногостраничныхРазделов = Новый Структура;
	Форма.ДанныеДопСтрок = Новый Структура;
	Форма.ДанныеДопСтрокСтраницы = Новый Структура;
	Форма.ИдентификаторыОбычныхСтраниц = Новый Структура;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Для Каждого Стр Из ЭлементыДерева(Форма.ДеревоСтраниц) Цикл
		Если Стр.Многостраничность Тогда 
			Если Стр.Многострочность Тогда
				МнгСтр = ЭлементыДерева(Стр)[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = ПолучитьМакетТабличногоДокумента(Форма, МнгСтр.ИмяМакета).ПолучитьОбласть("ОсновнаяЧасть");
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
					КонецЕсли;
				КонецЦикла;
				
				Если ЭлементыДерева(МнгСтр).Количество() > 0 Тогда
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
				
				Для Каждого МногострочныйЭлемент Из МнгСтр.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = ПолучитьМакетТабличногоДокумента(Форма, МнгСтр.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда
							
							ТЗ.Колонки.Добавить(Обл.Имя, ТипОбластиИзМакетаСтраницы(Обл));
							СтрокаДанных.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
			Иначе
				МнгСтр = ЭлементыДерева(Стр)[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = ПолучитьМакетТабличногоДокумента(Форма, МнгСтр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
					КонецЕсли;
				КонецЦикла;
				
				Если ЭлементыДерева(МнгСтр).Количество() > 0 Тогда
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
			КонецЕсли;
		Иначе
			Форма.ИдентификаторыОбычныхСтраниц.Вставить(Стр.ИДНаименования, Стр.УИД);
			Если Стр.Многострочность Тогда
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = ПолучитьМакетТабличногоДокумента(Форма, Стр.ИмяМакета).ПолучитьОбласть("ОсновнаяЧасть");
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
				
				Для Каждого МногострочныйЭлемент Из Стр.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = ПолучитьМакетТабличногоДокумента(Форма, Стр.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ТЗ.Колонки.Добавить(Обл.Имя, ТипОбластиИзМакетаСтраницы(Обл));
							СтрокаДанных.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
				
				Для Каждого МнгСтр Из ЭлементыДерева(Стр) Цикл 
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЦикла;
			Иначе
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = ПолучитьМакетТабличногоДокумента(Форма, Стр.ИмяМакета).ПолучитьОбласть("ОсновнаяЧасть");
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
				
				Для Каждого МнгСтр Из ЭлементыДерева(Стр) Цикл 
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОчисткаОтчетаДействия(Параметры) Экспорт 
	Форма = Параметры.Форма;
	Форма.Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Форма.Объект.Организация);
	Форма.СформироватьДеревоСтраниц();
	СформироватьСтруктуруДанныхУведомленияНовогоОбразца(Форма);
	Форма.ЗаполнитьНачальныеДанные();
КонецПроцедуры

Процедура ДополнитьСлужебнымиСтруктурамиАдреса(ДанныеУведомления = Неопределено, ДанныеМногостраничныхРазделов = Неопределено) Экспорт 
	Если ДанныеУведомления <> Неопределено Тогда 
		Для Каждого КЗ Из ДанныеУведомления Цикл 
			Если КЗ.Значение.Свойство("РайонСокращение") 
				И Не КЗ.Значение.Свойство("АдресXML") Тогда
				
				КЗ.Значение.Вставить("АдресXML", "");
			КонецЕсли;
			
			Если КЗ.Значение.Свойство("АДДР00РайонСокращение") 
				И Не КЗ.Значение.Свойство("АДДР00АдресXML") Тогда
				
				КЗ.Значение.Вставить("АДДР00АдресXML", "");
			КонецЕсли;
			
			Если КЗ.Значение.Свойство("АДДР01РайонСокращение") 
				И Не КЗ.Значение.Свойство("АДДР00АдресXML") Тогда
				
				КЗ.Значение.Вставить("АДДР01АдресXML", "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеМногостраничныхРазделов <> Неопределено Тогда 
		Для Каждого КЗ0 Из ДанныеМногостраничныхРазделов Цикл 
			Для Каждого Элт Из КЗ0.Значение Цикл 
				КЗ = Элт.Значение;
				
				Если КЗ.Свойство("РайонСокращение") 
					И Не КЗ.Свойство("АдресXML") Тогда
					
					КЗ.Вставить("АдресXML", "");
				КонецЕсли;
				
				Если КЗ.Свойство("АДДР00РайонСокращение") 
					И Не КЗ.Свойство("АДДР00АдресXML") Тогда
					
					КЗ.Вставить("АДДР00АдресXML", "");
				КонецЕсли;
				
				Если КЗ.Свойство("АДДР01РайонСокращение") 
					И Не КЗ.Свойство("АДДР00АдресXML") Тогда
					
					КЗ.Вставить("АДДР01АдресXML", "");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПолныйПутьВДеревеЗагрузки(Стр) Экспорт 
	ПолныйПуть = Стр.ИмяЭлемента;
	СтрРодитель = Стр.Родитель;
	Пока СтрРодитель <> Неопределено Цикл 
		ПолныйПуть = СтрРодитель.ИмяЭлемента + "/" + ПолныйПуть;
		СтрРодитель = СтрРодитель.Родитель;
	КонецЦикла;
	Возврат ПолныйПуть;
КонецФункции

Функция ПолучитьПустуюТаблицуПутейВВыгрузке() Экспорт
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("ПутьXML", Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаДат;
КонецФункции

Функция НайтиУзелыВДеревеПоПути(Дерево, Путь, ИмяКолонки) Экспорт 
	РазложениеПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Путь, "/");
	МассивНайденыхУзлов = Новый Массив;
	НайтиУзлыВДеревеПоПутиРек(Дерево.Строки, РазложениеПути, 0, ИмяКолонки, МассивНайденыхУзлов);
	Возврат МассивНайденыхУзлов;
КонецФункции

Процедура НайтиУзлыВДеревеПоПутиРек(ДеревоСтроки, РазложениеПути, Инд, ИмяКолонки, МассивНайденыхУзлов) Экспорт 
	НайденныеСтроки = ДеревоСтроки.НайтиСтроки(Новый Структура(ИмяКолонки, РазложениеПути[Инд]));
	Если НайденныеСтроки.Количество() = 0 Тогда 
		Возврат;
	Иначе
		Для Каждого Стр Из НайденныеСтроки Цикл 
			Если Инд = РазложениеПути.ВГраница() Тогда
				МассивНайденыхУзлов.Добавить(Стр);
			Иначе
				НайтиУзлыВДеревеПоПутиРек(НайденныеСтроки[0].Строки, РазложениеПути, Инд + 1, ИмяКолонки, МассивНайденыхУзлов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция НайтиУзелВДеревеПоПути(Дерево, Путь, ИмяКолонки) Экспорт
	РазложениеПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Путь, "/");
	Возврат НайтиУзелВДеревеПоПутиРек(Дерево.Строки, РазложениеПути, 0, ИмяКолонки);
КонецФункции

Функция НайтиУзелВДеревеПоПутиРек(ДеревоСтроки, РазложениеПути, Инд, ИмяКолонки) Экспорт 
	НайденныеСтроки = ДеревоСтроки.НайтиСтроки(Новый Структура(ИмяКолонки, РазложениеПути[Инд]));
	Если НайденныеСтроки.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе
		Если Инд = РазложениеПути.ВГраница() Тогда 
			Возврат НайденныеСтроки[0];
		Иначе
			Возврат НайтиУзелВДеревеПоПутиРек(НайденныеСтроки[0].Строки, РазложениеПути, Инд + 1, ИмяКолонки);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ДеревоСтроки, ИмяЭлемента, ИмяКолонки) Экспорт 
	НайденныеСтроки = ДеревоСтроки.НайтиСтроки(Новый Структура(ИмяКолонки, ИмяЭлемента));
	Если НайденныеСтроки.Количество() = 1 Тогда 
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СформироватьДеревоЗагрузки(ПредставлениеXML) Экспорт 
	ДеревоЗагрузки = Новый ДеревоЗначений;
	ДеревоЗагрузки.Колонки.Добавить("ИмяЭлемента", Новый ОписаниеТипов("Строка"));
	ДеревоЗагрузки.Колонки.Добавить("ТипЭлемента", Новый ОписаниеТипов("Строка"));
	ДеревоЗагрузки.Колонки.Добавить("ЗначениеЭлемента", Новый ОписаниеТипов("Строка"));
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	СформироватьДеревоЗагрузкиРек(ДокументDOM.ДочерниеУзлы, ДеревоЗагрузки.Строки);
	ЧтениеXML.Закрыть();
	
	Возврат ДеревоЗагрузки;
КонецФункции

Процедура ЗагрузитьОбычныеСтраницы(Форма, ДеревоЗагрузки, СхемаВыгрузки, ДополнительныеПараметры) Экспорт
	Если Не ДополнительныеПараметры.Свойство("ТаблицаОсобыхПолейВВыгрузке") Тогда 
		ДополнительныеПараметры.Вставить("ТаблицаОсобыхПолейВВыгрузке", ПолучитьПустуюТаблицуПутейВВыгрузке())
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("КартаМногостраничныхРазделов") Тогда 
		ДополнительныеПараметры.Вставить("КартаМногостраничныхРазделов", ПолучитьСтандартнуюКартуМногостраничныхРазделов(Форма))
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ОписаниеТиповЧисло", Новый ОписаниеТипов("Число"));
	
	ТаблицаДатВВыгрузке = СформироватьТаблицуДатВВыгрузке(Форма, СхемаВыгрузки, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ТаблицаДатВВыгрузке", ТаблицаДатВВыгрузке);
	ДополнительныеПараметры.Вставить("СтруктураПоискаПутиXML", Новый Структура("ПутьXML"));
	
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Фамилия", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ПодписантФамилия = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Имя", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ПодписантИмя = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Отчество", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ПодписантОтчество = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/ДатаДок", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ДатаПодписи = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
	КонецЕсли;
	
	Для Каждого КЗ Из Форма.ДанныеУведомления Цикл 
		ДеревоСтраниц = ДанныеФормыВЗначение(Форма.ДеревоСтраниц, Тип("ДеревоЗначений"));
		Для Каждого Стр Из ДеревоСтраниц.Строки.НайтиСтроки(Новый Структура("ИДНаименования", КЗ.Ключ), Истина) Цикл 
			Если Стр.Многострочность Тогда 
				Для Каждого МнгСтр Из Стр.МногострочныеЧасти Цикл 
					ТЗМнг = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[МнгСтр.Значение]);
					ТЗМнг.Очистить();
					ОтбСтроки = СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многострочность", МнгСтр.Значение, Истина), Истина);
					РазделМногострочнойЧасти = МнгСтр.Значение;
					Если ОтбСтроки.Количество() = 0 
						И ДополнительныеПараметры.Свойство("ЗаменыИменМногострочныхЧастей") Тогда 
						
						ОтбСтроки = СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многострочность", ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[МнгСтр.Значение], Истина), Истина);
						Если ЗначениеЗаполнено(ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[МнгСтр.Значение]) Тогда 
							РазделМногострочнойЧасти = ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[МнгСтр.Значение];
						КонецЕсли;
					КонецЕсли;
					
					Если ОтбСтроки.Количество() = 0 Тогда 
						ПоместитьВоВременноеХранилище(ТЗМнг, Форма.ДанныеДопСтрок[МнгСтр.Значение]);
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрМнг Из ОтбСтроки Цикл 
						ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(СтрМнг);
						СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, ПолныйПуть, "ИмяЭлемента");
						Если Не ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
							Продолжить;
						КонецЕсли;
						
						СтрокиДанных = СтрЗагружаемоеЗначение.Родитель.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", СтрЗагружаемоеЗначение.ИмяЭлемента), Ложь);
						Для Каждого СтрокаДанных Из СтрокиДанных Цикл 
							НовСтр = ТЗМнг.Добавить();
							НовСтр.УИД = Форма.ИдентификаторыОбычныхСтраниц[КЗ.Ключ];
							
							Если СтрокаДанных.ТипЭлемента = "П" Тогда 
								Если ТЗМнг.Колонки.Найти(СтрокаДанных.ИмяЭлемента) <> Неопределено Тогда 
									НовСтр[СтрокаДанных.ИмяЭлемента] = СтрокаДанных.ЗначениеЭлемента;
									
									ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										НовСтр[СтрокаДанных.ИмяЭлемента] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрокаДанных.ЗначениеЭлемента);
									КонецЕсли;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрокаДанных, НовСтр);
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли СтрокаДанных.ТипЭлемента = "С" Тогда
								Для Каждого СтрВДереве Из СтрМнг.Строки.НайтиСтроки(Новый Структура("Раздел", РазделМногострочнойЧасти), Истина) Цикл
									Если ТЗМнг.Колонки.Найти(СтрВДереве.Ключ) = Неопределено Тогда 
										Продолжить;
									КонецЕсли;
									СтрЗагружаемоеЗначение = СтрокаДанных.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", СтрВДереве.Код), Истина);
									Если СтрЗагружаемоеЗначение.Количество() = 0 Тогда 
										Продолжить;
									КонецЕсли;
									НовСтр[СтрВДереве.Ключ] = СтрЗагружаемоеЗначение[0].ЗначениеЭлемента;
									ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть + "/" + СтрВДереве.Код;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										НовСтр[СтрВДереве.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение[0].ЗначениеЭлемента);
									КонецЕсли;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение[0], НовСтр);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
					ПоместитьВоВременноеХранилище(ТЗМнг, Форма.ДанныеДопСтрок[МнгСтр.Значение]);
				КонецЦикла;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Для Каждого Стр Из СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", КЗ.Ключ), Истина) Цикл 
			Если Не ЗначениеЗаполнено(Стр.Ключ) Тогда 
				ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(Стр);
				СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, ПолныйПуть, "ИмяЭлемента");
				ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
				ОтбСтроки = ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
				Если ОтбСтроки.Количество() > 0 Тогда 
					КЗ.Значение[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
				КонецЕсли;
				ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
				Если ОтбСтроки.Количество() > 0 Тогда
					Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, КЗ.Значение);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(Стр);
			
			СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, ПолныйПуть, "ИмяЭлемента");
			Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
				Если КЗ.Значение.Свойство(Стр.Ключ) Тогда
					Если Стр.Формат = "N" И ТипЗнч(КЗ.Значение[Стр.Ключ]) = Тип("Число") Тогда 
						КЗ.Значение[Стр.Ключ] = ДополнительныеПараметры.ОписаниеТиповЧисло.ПривестиЗначение(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
					Иначе
						КЗ.Значение[Стр.Ключ] = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
					КонецЕсли;
					
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
					ОтбСтроки = ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда 
						КЗ.Значение[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда
						Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, КЗ.Значение);
					КонецЕсли;
				Иначе
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
					ОтбСтроки = ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда 
						КЗ.Значение[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда
						Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, КЗ.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КЗ.Значение.Свойство("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ") Тогда
			СтрФамилия = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Фамилия", "ИмяЭлемента");
			КЗ.Значение["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"] = СокрЛП(Форма.Объект.ПодписантФамилия + " " 
										+ Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

Функция ПолучитьНаименованиеИПИзВыгрузки(ДеревоЗагрузки) Экспорт 
	Наим = "";
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИО/Фамилия", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИО/Имя", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИО/Отчество", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наим) Тогда 
		Возврат СокрЛП(Наим);
	КонецЕсли;
	
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПИП/ФИОИП/Фамилия", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПИП/ФИОИП/Имя", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПИП/ФИОИП/Отчество", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наим) Тогда 
		Возврат СокрЛП(Наим);
	КонецЕсли;
	
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИОФЛ/Фамилия", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИОФЛ/Имя", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИОФЛ/Отчество", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	
	Возврат СокрЛП(Наим);
КонецФункции

Функция СформироватьПустуюКартуМногостраничныхРазделов() Экспорт 
	КартаРазделов = Новый ДеревоЗначений;
	КартаРазделов.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	Возврат КартаРазделов;
КонецФункции

Процедура ЗагрузитьМногостраничныеСтраницы(Форма, ДеревоЗагрузки, СхемаВыгрузки, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.Свойство("КартаМногостраничныхРазделов") Тогда 
		КартаРазделов = ДополнительныеПараметры.КартаМногостраничныхРазделов;
	Иначе
		КартаРазделов = Форма.ПолучитьКартуМногостраничныхРазделов();
	КонецЕсли;
	ДеревоСтраниц = ДанныеФормыВЗначение(Форма.ДеревоСтраниц, Тип("ДеревоЗначений"));
	ДополнительныеПараметры.Вставить("ДеревоСтраницЭталон", ДеревоСтраниц.Скопировать());
	ДополнительныеПараметры.Вставить("ДеревоЗагрузки", ДеревоЗагрузки);
	ДополнительныеПараметры.Вставить("СхемаВыгрузки", СхемаВыгрузки);
	ДополнительныеПараметры.Вставить("ОписаниеТиповЧисло", Новый ОписаниеТипов("Число"));
	ЗагрузитьМногостраничныеСтраницыРек(Форма, ДополнительныеПараметры, КартаРазделов.Строки, ДеревоСтраниц.Строки, Неопределено, Неопределено, "");
	УдалитьЛишниеМногостраничныеСтраницы(Форма, ДеревоСтраниц.Строки);
	ЗначениеВДанныеФормы(ДеревоСтраниц, Форма.ДеревоСтраниц);
	Форма.Модифицированность = Истина;
	
	ВсеУИД = Новый Соответствие;
	ПолучитьВсеУИД(ВсеУИД, ДеревоСтраниц.Строки);
	
	Для Каждого КЗ Из Форма.ДанныеМногостраничныхРазделов Цикл
		Инд = КЗ.Значение.Количество() - 1;
		Пока Инд >= 0 Цикл 
			Если ВсеУИД[КЗ.Значение[Инд].Значение.УИД] <> Истина Тогда 
				КЗ.Значение.Удалить(Инд);
			КонецЕсли;
			Инд = Инд - 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСтандартнуюКартуМногостраничныхРазделов(Форма) Экспорт 
	КартаРазделов = СформироватьПустуюКартуМногостраничныхРазделов();
	ПолучитьСтандартнуюКартуМногостраничныхРазделовРек(Форма.ДеревоСтраниц.ПолучитьЭлементы(), КартаРазделов.Строки);
	Возврат КартаРазделов;
КонецФункции

Процедура УстановитьОрганизациюПоПараметрамЗагрузки(Форма, ПараметрыЗагрузкиXML) Экспорт 
	Если ПараметрыЗагрузкиXML.Свойство("Организация") 
		И Форма.Объект.Организация <> ПараметрыЗагрузкиXML.Организация
		И ЗначениеЗаполнено(ПараметрыЗагрузкиXML.Организация) Тогда
		
		Форма.Объект.Организация = ПараметрыЗагрузкиXML.Организация;
		ПараметрыЗагрузкиXML.Свойство("РегистрацияВНалоговомОргане", Форма.Объект.РегистрацияВИФНС);
		Если Не ЗначениеЗаполнено(Форма.Объект.РегистрацияВИФНС) Тогда 
			Форма.Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Форма.Объект.Организация);
		КонецЕсли;
		Форма.ЗаполнитьНачальныеДанные();
	КонецЕсли;
КонецПроцедуры

Функция ДополнитьЗаголовокУведомления(Заголовок, Организация) Экспорт 
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		Возврат Заголовок + " ("
		+ РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "НаимЮЛСокр").НаимЮЛСокр
		+ ")";
	Иначе
		Возврат Заголовок + " ("
		+ РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "ФИО").ФИО
		+ ")";
	КонецЕсли;
КонецФункции

Функция ОтветыНаТребование(Требование, ВидУведомления) Экспорт
	Если ТипЗнч(Требование) <> Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов")
		И ТипЗнч(Требование) <> Тип("СправочникОбъект.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда 
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
	|ГДЕ
	|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления = &ВидУведомления
	|	И ВЫРАЗИТЬ(УведомлениеОСпецрежимахНалогообложения.Основание КАК Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов) = &Требование";
	
	Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
	Запрос.УстановитьПараметр("Требование", Требование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл 
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьТребованиеИзУведомления(Уведомление) Экспорт
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "ВидУведомления, ДанныеУведомления", Истина);
	Если Реквизиты.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы
		Или Реквизиты.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов Тогда 
		Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты.ДанныеУведомления.Получить().СтруктураРеквизитов, "_Требование", Неопределено);
	ИначеЕсли Реквизиты.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрЛьготИмущество Тогда 
		Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты.ДанныеУведомления.Получить(), "_Требование", Неопределено);
	КонецЕсли;
КонецФункции

Процедура ПроверкаДатВУведомлении(Данные, ТаблицаОшибок) Экспорт 
	СоответствиеМногострочныхЧастей = СформироватьСоответствиеМногострочныхЧастей(Данные.ДеревоСтраниц);
	МинимальныйГод = 1900;
	МаксимальныйГод = 2100;
	
	Для Каждого КЗ1 Из Данные.ДанныеУведомления Цикл 
		Для Каждого КЗ2 Из КЗ1.Значение Цикл 
			Если СтрНайти(КЗ2.Ключ, "___") = 0 И ЗначениеЗаполнено(КЗ2.Значение) И ТипЗнч(КЗ2.Значение) = Тип("Дата") Тогда
				Если Год(КЗ2.Значение) = 1 И Месяц(КЗ2.Значение) = 1 И День(КЗ2.Значение) = 1 Тогда 
					Продолжить;
				ИначеЕсли Год(КЗ2.Значение) < МинимальныйГод Или Год(КЗ2.Значение) > МаксимальныйГод Тогда 
					ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
						"Вероятно, неправильно указана дата", КЗ1.Ключ, КЗ2.Ключ));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если Данные.Свойство("ДанныеМногостраничныхРазделов") И ТипЗнч(Данные.ДанныеМногостраничныхРазделов) = Тип("Структура") Тогда 
		Для Каждого КЗ1 Из Данные.ДанныеМногостраничныхРазделов Цикл 
			Для Каждого КЗ01 Из КЗ1.Значение Цикл 
				Для Каждого КЗ2 Из КЗ01.Значение Цикл 
					Если СтрНайти(КЗ2.Ключ, "___") = 0 И ЗначениеЗаполнено(КЗ2.Значение) И ТипЗнч(КЗ2.Значение) = Тип("Дата") Тогда
						Если Год(КЗ2.Значение) = 1 И Месяц(КЗ2.Значение) = 1 И День(КЗ2.Значение) = 1 Тогда 
							Продолжить;
						ИначеЕсли Год(КЗ2.Значение) < МинимальныйГод Или Год(КЗ2.Значение) > МаксимальныйГод Тогда 
							ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
								"Вероятно, неправильно указана дата", КЗ1.Ключ, КЗ2.Ключ, КЗ01.Значение.УИД));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Счетчики = Новый Соответствие;
	Если Данные.Свойство("ДанныеДопСтрокБД") И ТипЗнч(СоответствиеМногострочныхЧастей) = Тип("Соответствие") Тогда 
		Для Каждого КЗ1 Из СоответствиеМногострочныхЧастей Цикл 
			Если Не Данные.ДанныеДопСтрокБД.Свойство(КЗ1.Ключ) Тогда 
				Продолжить;
			КонецЕсли;
			Для Каждого Стр Из Данные.ДанныеДопСтрокБД[КЗ1.Ключ] Цикл 
				КлючСоответствия = КЗ1.Ключ + Строка(Стр.УИД);
				Если Счетчики[КлючСоответствия] = Неопределено Тогда 
					Счетчики.Вставить(КлючСоответствия, 1);
				Иначе
					Счетчики[КлючСоответствия] = Счетчики[КлючСоответствия] + 1;
				КонецЕсли;
				Для Каждого Кол Из Данные.ДанныеДопСтрокБД[КЗ1.Ключ].Колонки Цикл 
					Если ЗначениеЗаполнено(Стр[Кол.Имя]) И ТипЗнч(Стр[Кол.Имя]) = Тип("Дата") Тогда
						Если Год(Стр[Кол.Имя]) = 1 И Месяц(Стр[Кол.Имя]) = 1 И День(Стр[Кол.Имя]) = 1 Тогда 
							Продолжить;
						ИначеЕсли Год(Стр[Кол.Имя]) < МинимальныйГод Или Год(Стр[Кол.Имя]) > МаксимальныйГод Тогда 
							ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
								"Вероятно, неправильно указана дата", КЗ1.Значение, Кол.Имя + "___" + Счетчики[КлючСоответствия], Стр.УИД));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СпрятатьКнопкиВыгрузкиОтправкиУНеактуальныхФорм(Форма) Экспорт 
	Попытка
		ОтобранныеСтроки = Отчеты[Форма.Объект.ИмяОтчета].ПолучитьТаблицуФорм().НайтиСтроки(
			Новый Структура("ИмяФормы", Форма.Объект.ИмяФормы));
		Если ОтобранныеСтроки.Количество() = 0 Тогда 
			СпрятатьЭлемент(Форма.Элементы, "ОтправитьВКонтролирующийОрган");
			СпрятатьЭлемент(Форма.Элементы, "ФормаСформироватьXML");
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данная редакция формы не является актуальной';
														|en = 'Данная редакция формы не является актуальной'"));
		ИначеЕсли ОтобранныеСтроки.Количество() = 1 Тогда 
			Строка = ОтобранныеСтроки[0];
			Если ЗначениеЗаполнено(Строка.ДатаКонца) И ТекущаяДатаСеанса() > КонецДня(Строка.ДатаКонца) Тогда 
				ОбщегоНазначения.СообщитьПользователю("Срок действия формы до " + Формат(Строка.ДатаКонца, "ДЛФ=DD"));
				СпрятатьЭлемент(Форма.Элементы, "ОтправитьВКонтролирующийОрган");
			ИначеЕсли ЗначениеЗаполнено(Строка.ДатаНачала) И ТекущаяДатаСеанса() < НачалоДня(Строка.ДатаНачала) Тогда 
				ОбщегоНазначения.СообщитьПользователю("Форма действует с " + Формат(Строка.ДатаНачала, "ДЛФ=DD"));
				СпрятатьЭлемент(Форма.Элементы, "ОтправитьВКонтролирующийОрган");
			КонецЕсли;
		Иначе
			ОтобранныеСтроки = Отчеты[Форма.Объект.ИмяОтчета].ПолучитьТаблицуФорм().НайтиСтроки(
				Новый Структура("ИмяФормы, ВидУведомления", Форма.Объект.ИмяФормы, Форма.Объект.ВидУведомления));
				
			Если ОтобранныеСтроки.Количество() = 0 Тогда 
				СпрятатьЭлемент(Форма.Элементы, "ОтправитьВКонтролирующийОрган");
				СпрятатьЭлемент(Форма.Элементы, "ФормаСформироватьXML");
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данная редакция формы не является актуальной';
															|en = 'Данная редакция формы не является актуальной'"));
			ИначеЕсли ОтобранныеСтроки.Количество() = 1 Тогда 
				Строка = ОтобранныеСтроки[0];
				Если ЗначениеЗаполнено(Строка.ДатаКонца) И ТекущаяДатаСеанса() > КонецДня(Строка.ДатаКонца) Тогда 
					ОбщегоНазначения.СообщитьПользователю("Срок действия формы до " + Формат(Строка.ДатаКонца, "ДЛФ=DD"));
					СпрятатьЭлемент(Форма.Элементы, "ОтправитьВКонтролирующийОрган");
				ИначеЕсли ЗначениеЗаполнено(Строка.ДатаНачала) И ТекущаяДатаСеанса() < НачалоДня(Строка.ДатаНачала) Тогда 
					ОбщегоНазначения.СообщитьПользователю("Форма действует с " + Формат(Строка.ДатаНачала, "ДЛФ=DD"));
					СпрятатьЭлемент(Форма.Элементы, "ОтправитьВКонтролирующийОрган");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ПроверкаАктуальностиФормыПриВыгрузке(ИмяФормы, ТаблицаОшибок, ТаблицаФорм) Экспорт 
	Формы = ТаблицаФорм.НайтиСтроки(Новый Структура("ИмяФормы", ИмяФормы));
	Если Формы.Количество() = 0
		Или (ЗначениеЗаполнено(Формы[0].ДатаКонца) И ДобавитьМесяц(Формы[0].ДатаКонца, 1) < ТекущаяДатаСеанса())
		Или (ЗначениеЗаполнено(Формы[0].ДатаНачала) И Формы[0].ДатаНачала > ТекущаяДатаСеанса()) Тогда 
		
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Редакция формы не является актуальной", "", ""));
	КонецЕсли;
КонецПроцедуры

Функция НайтиСтрокуВДеревеПоУИД(Дерево, UID) Экспорт
	Возврат УведомлениеОСпецрежимахНалогообложенияКлиентСервер.НайтиСтрокуВДеревеПоУИД(Дерево, UID);
КонецФункции

Процедура ЗаменитьИмяОтчетаПередОткрытием(ВидСообщения, ИмяФормы, ИмяОтчета) Экспорт 
	ТаблицаЗамен = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ПолучитьТаблицуЗаменИменОтчетов();
	СтруктураПоиска = Новый Структура("СтароеИмяОтчета, СтароеИмяФормы, СтарыйВидУведомления", ИмяОтчета, ИмяФормы, ВидСообщения);
	ОтбСтроки = ТаблицаЗамен.НайтиСтроки(СтруктураПоиска);
	Если ОтбСтроки.Количество() = 1 Тогда 
		ВидСообщения = ОтбСтроки[0].НовыйВидУведомления;
		ИмяОтчета = ОтбСтроки[0].НовоеИмяОтчета;
		ИмяФормы = ОтбСтроки[0].НовоеИмяФормы;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаменитьТекстовоеОписаниеУведомления(Наименование, ИмяФормы) Экспорт
	Если ТипЗнч(ИмяФормы) = Тип("Строка") И ЗначениеЗаполнено(ИмяФормы) Тогда  
		ТаблицаЗамен = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ПолучитьТаблицуОписанийПрикрепленныхОтчетов();
		СтруктураПоиска = Новый Структура("ИмяФормы", ИмяФормы);
		ОтбСтроки = ТаблицаЗамен.НайтиСтроки(СтруктураПоиска);
		Если ОтбСтроки.Количество() = 1 Тогда
			Наименование = ОтбСтроки[0].ТекстовоеНазвание;
		КонецЕсли;
	Иначе
		Наименование = Строка(Наименование);
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьМакетыИзАрхива(Объект, Префикс, ИмяМакетаАрхива = Неопределено) Экспорт 
	СоответствиеИспользуемыхМакетов = Новый Соответствие;
	
	АрхивТабличныхДокументов = Неопределено;
	Если ЗначениеЗаполнено(ИмяМакетаАрхива) Тогда 
		Для Каждого Макет Из Метаданные.Отчеты[Объект.ИмяОтчета].Макеты Цикл 
			Если СтрНачинаетсяС(Макет.Имя, "EF_") И СтрЗаканчиваетсяНа(Макет.Имя, ИмяМакетаАрхива) Тогда 
				АрхивТабличныхДокументов = Макет;
				Прервать;
			ИначеЕсли Макет.Имя = ИмяМакетаАрхива Тогда 
				АрхивТабличныхДокументов = Макет;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Макет Из Метаданные.Отчеты[Объект.ИмяОтчета].Макеты Цикл 
			Если СтрНачинаетсяС(Макет.Имя, "EF_") И СтрЗаканчиваетсяНа(Макет.Имя, Префикс + Объект.ИмяФормы) Тогда 
				АрхивТабличныхДокументов = Макет;
				Прервать;
			ИначеЕсли СтрЗаканчиваетсяНа(Макет.Имя, Префикс + Объект.ИмяФормы) Тогда 
				АрхивТабличныхДокументов = Макет;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если АрхивТабличныхДокументов = Неопределено Тогда 
		Возврат СоответствиеИспользуемыхМакетов;
	КонецЕсли;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(
		Новый ПотокВПамяти(ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Отчеты[Объект.ИмяОтчета].ПолучитьМакет(АрхивТабличныхДокументов.Имя))));
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	Для Каждого Элт Из ЧтениеZipФайла.Элементы Цикл
		ИмяФайлаДляРаспаковки = КаталогВременныхФайлов + Элт.Имя;
		ЧтениеZipФайла.Извлечь(Элт, КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Если НРег(Элт.Расширение) = "mxl" Тогда 
			ТекущийТабличныйДокумент = Новый ТабличныйДокумент;
			ТекущийТабличныйДокумент.Прочитать(ИмяФайлаДляРаспаковки);
			СоответствиеИспользуемыхМакетов.Вставить(Элт.ИмяБезРасширения, ТекущийТабличныйДокумент);
		ИначеЕсли НРег(Элт.Расширение) = "tif" Тогда 
			СоответствиеИспользуемыхМакетов.Вставить(Элт.ИмяБезРасширения, Новый ДвоичныеДанные(ИмяФайлаДляРаспаковки));
		КонецЕсли;
		УдалитьФайлы(ИмяФайлаДляРаспаковки);
	КонецЦикла;
	
	ЧтениеZipФайла.Закрыть();
	Возврат СоответствиеИспользуемыхМакетов;
КонецФункции

Функция ПустойМакетИзСписка(Объект, СписокИспользуемыхМакетов, ИмяМакета) Экспорт 
	Если ТипЗнч(СписокИспользуемыхМакетов) = Тип("Соответствие") Тогда 
		МакетПФ = СписокИспользуемыхМакетов[ИмяМакета];
		Если ТипЗнч(МакетПФ) = Тип("ТабличныйДокумент") Тогда 
			Для Каждого Область Из МакетПФ.Области Цикл 
				Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
					Если Область.СодержитЗначение = Истина Тогда 
						Область.Значение = Неопределено;
					ИначеЕсли Область.СодержитЗначение = Ложь Тогда
						Область.Текст = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Возврат МакетПФ;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения") Тогда 
		ИмяОтчета = Объект.ИмяОтчета;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда 
		ИмяОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ИмяОтчета");
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда 
		ИмяОтчета = Объект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные.Отчеты[ИмяОтчета].Макеты.Найти(ИмяМакета) <> Неопределено Тогда 
		Возврат Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	КонецЕсли;
КонецФункции

Процедура ОчисткаПрисоединенныхФайлов(Форма, ИмяРеквизита, ИмяКолонки) Экспорт
	ПриложенныеФайлы = Неопределено;
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл 
		Если РеквизитФормы.Имя = ИмяРеквизита Тогда 
			ПриложенныеФайлы = Форма[ИмяРеквизита];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПриложенныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр0 Из ПриложенныеФайлы.ПолучитьЭлементы() Цикл 
		УдалениеПрисоединенногоСлужебногоФайла(Стр0[ИмяКолонки], Ложь);
		Для Каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
			УдалениеПрисоединенногоСлужебногоФайла(Стр1[ИмяКолонки], Ложь);
		КонецЦикла;
	КонецЦикла;
	ПриложенныеФайлы.ПолучитьЭлементы().Очистить();
	Форма.Модифицированность = Истина;
	Форма.СохранитьДанные();
КонецПроцедуры

Процедура УдалениеПрисоединенногоСлужебногоФайла(ПрисоединенныйФайлСсылка, ВыводитьСообщение = Истина) Экспорт 
	Если ТипЗнч(ПрисоединенныйФайлСсылка) = Тип("СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы")
		И ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда 
		
		Попытка
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
			Если ПрисоединенныйФайлОбъект = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			Если ПравоДоступа("Удаление", Метаданные.Справочники.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы) Тогда 
				ПрисоединенныйФайлОбъект.Удалить();
			Иначе
				ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		Исключение
			Если ВыводитьСообщение Тогда 
				ОбщегоНазначения.СообщитьПользователю("Не удалось удалить присоединенный файл");
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПредставителяПоОрганизации(Форма, ИмяТитульная = "Титульная") Экспорт
	Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьДанныеРуководителя(Форма.Объект);
	ЕстьОбласть = (Неопределено <> Форма.ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"));
	ПодписантСтр = СокрЛП(Форма.Объект.ПодписантФамилия + " " + Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
	Форма.ДанныеУведомления[ИмяТитульная].Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
	Если ЕстьОбласть Тогда 
		Форма.ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = ПодписантСтр;
	КонецЕсли;
	ОбластьНаимДок = Форма.ПредставлениеУведомления.Области.Найти("НаимДок");
	Если ОбластьНаимДок <> Неопределено Тогда 
		ОбластьНаимДок.Значение = "";
	КонецЕсли;
	Форма.ДанныеУведомления[ИмяТитульная].Вставить("НаимДок", "");
	ОбластьНаимДок = Форма.ПредставлениеУведомления.Области.Найти("НаимОргПред");
	Если ОбластьНаимДок <> Неопределено Тогда 
		ОбластьНаимДок.Значение = "";
	КонецЕсли;
	Форма.ДанныеУведомления[ИмяТитульная].Вставить("НаимОргПред", "");
	ОбластьНаимДок = Форма.ПредставлениеУведомления.Области.Найти("ПРИЗНАК_НП_ПОДВАЛ");
	Если ОбластьНаимДок <> Неопределено Тогда 
		ОбластьНаимДок.Значение = "1";
	КонецЕсли;
	Форма.ДанныеУведомления[ИмяТитульная].Вставить("ПРИЗНАК_НП_ПОДВАЛ", "1");
КонецПроцедуры

Процедура УстановитьПредставителяПоФизЛицу(Форма, ИмяТитульная = "Титульная")  Экспорт 
	ДанныеУведомленияТитульный = Форма.ДанныеУведомления[ИмяТитульная];
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(Форма.Объект.РегистрацияВИФНС);
	ДанныеУведомленияТитульный.Вставить("КодНО", Реквизиты.Код);
	ДанныеУведомленияТитульный.Вставить("КПП", Реквизиты.КПП);
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			Форма.Объект.Организация, 
			ДанныеУведомленияТитульный["КодНО"], 
			ДанныеУведомленияТитульный["КПП"]);
			
		Если ЗначениеЗаполнено(СведенияОПредставителе.НаименованиеОрганизацииПредставителя) Тогда 
			ПодписантСтр = СведенияОПредставителе.ФИОПредставителя;
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
			Форма.Объект.ПодписантФамилия = СокрЛП(ФИО.Фамилия);
			Форма.Объект.ПодписантИмя = СокрЛП(ФИО.Имя);
			Форма.Объект.ПодписантОтчество = СокрЛП(ФИО.Отчество);
		Иначе
			ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Реквизиты.Представитель, , Форма.Объект.ДатаПодписи);
			Форма.Объект.ПодписантФамилия = СокрЛП(ДанныеПредставителя.Фамилия);
			Форма.Объект.ПодписантИмя = СокрЛП(ДанныеПредставителя.Имя);
			Форма.Объект.ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
			ПодписантСтр = СокрЛП(Форма.Объект.ПодписантФамилия + " " + Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
		КонецЕсли;
		
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		ДанныеУведомленияТитульный.Вставить("НаимОргПред", СведенияОПредставителе.НаименованиеОрганизацииПредставителя);
		Если (Неопределено <> Форма.ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ")) Тогда 
			Форма.ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = ПодписантСтр;
		КонецЕсли;
		Если (Неопределено <> Форма.ПредставлениеУведомления.Области.Найти("НаимОргПред")) Тогда 
			Форма.ПредставлениеУведомления.Области["НаимОргПред"].Значение = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		КонецЕсли;
	Иначе
		Форма.Объект.ПодписантФамилия = "";
		Форма.Объект.ПодписантИмя = "";
		Форма.Объект.ПодписантОтчество = "";
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", "");
		ДанныеУведомленияТитульный.Вставить("НаимОргПред", "");
		Если (Неопределено <> Форма.ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ")) Тогда 
			Форма.ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
		КонецЕсли;
		Если (Неопределено <> Форма.ПредставлениеУведомления.Области.Найти("НаимОргПред")) Тогда 
			Форма.ПредставлениеУведомления.Области["НаимОргПред"].Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	ОбластьНаимДок = Форма.ПредставлениеУведомления.Области.Найти("НаимДок");
	Если ОбластьНаимДок <> Неопределено Тогда 
		ОбластьНаимДок.Значение = Реквизиты.ДокументПредставителя;
	КонецЕсли;
	ДанныеУведомленияТитульный.Вставить("НаимДок", Реквизиты.ДокументПредставителя);
	ОбластьНаимДок = Форма.ПредставлениеУведомления.Области.Найти("ПРИЗНАК_НП_ПОДВАЛ");
	Если ОбластьНаимДок <> Неопределено Тогда 
		ОбластьНаимДок.Значение = "2";
	КонецЕсли;
	ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ", "2");
КонецПроцедуры

Процедура УдалитьСтроку(Форма, ИмяОбласти, Высота = 1) Экспорт 
	РазделительНомераСтроки = Форма.РазделительНомераСтроки;
	ПредставлениеУведомления = Форма.ПредставлениеУведомления;
	ДанныеДопСтрокСтраницы = Форма.ДанныеДопСтрокСтраницы;
	Если ПредставлениеУведомления.Области[ИмяОбласти].Гиперссылка = Ложь Тогда 
		Возврат;
	КонецЕсли;
	
	ОТЧ = Новый ОписаниеТипов("Число");
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИмяОбласти, "Del_", ""), РазделительНомераСтроки);
	ДопСтроки = Разложение[0];
	Номер = ОТЧ.ПривестиЗначение(Разложение[1]);
	ДанныеДопСтрокСтраницы[ДопСтроки].Удалить(Номер-1);
	Верх = ПредставлениеУведомления.Области[ИмяОбласти].Верх;
	ПредставлениеУведомления.УдалитьОбласть(ПредставлениеУведомления.Область(Верх,,Верх + Высота - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Низ = Верх + (ДанныеДопСтрокСтраницы[ДопСтроки].Количество() - Номер + 1) * Высота;
	
	Если Низ >= Верх Тогда 
		Области = ПредставлениеУведомления.ПолучитьОбласть(Верх,,Низ).Области;
		СоответствиеИмен = Новый Соответствие;
		Для Каждого Обл Из Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				П = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Обл.Имя, РазделительНомераСтроки);
				Если П.Количество() = 2 Тогда 
					СоответствиеИмен[Обл.Имя] = П[0] + РазделительНомераСтроки + Формат(ОТЧ.ПривестиЗначение(П[1]) - 1, "ЧГ=0");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Пока Истина Цикл 
			Если СоответствиеИмен.Количество() = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Для Каждого КЗ Из СоответствиеИмен Цикл 
				Если СоответствиеИмен[КЗ.Значение] <> Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				ПредставлениеУведомления.Области[КЗ.Ключ].Имя = КЗ.Значение;
				СоответствиеИмен.Удалить(КЗ.Ключ);
				Прервать;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДопСтрокСтраницы[ДопСтроки].Количество() = 1 Тогда
		ОблПодч = ПредставлениеУведомления.Области["Del_" + Разложение[0] + РазделительНомераСтроки + "1"];
		ОблПодч.Текст = "";
		ОблПодч.Гиперссылка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьСтроку(Форма, ИмяОбласти) Экспорт 
	РазделительНомераСтроки = Форма.РазделительНомераСтроки;
	ПредставлениеУведомления = Форма.ПредставлениеУведомления;
	ДанныеДопСтрокСтраницы = Форма.ДанныеДопСтрокСтраницы;
	ТекущийМакет = Форма.ТекущийМакет;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "AddStr_", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "AddStrLabel_", "");
	
	ДопСтрокиТекущейСтраницы = ДанныеДопСтрокСтраницы[ИмяОбласти];
	НомерДобавляемойСтроки = ДопСтрокиТекущейСтраницы.Количество() + 1;
	НоваяСтрока = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеДопСтрокСтраницы[ИмяОбласти][0].Значение);
	Верх = 0;
	Для Каждого КЗ Из НоваяСтрока Цикл 
		НоваяСтрока[КЗ.Ключ] = Неопределено;
		Обл = ПредставлениеУведомления.Области[КЗ.Ключ + РазделительНомераСтроки + Формат(НомерДобавляемойСтроки - 1, "ЧГ=0")];
		Если Обл.Верх + 1 > Верх Тогда 
			Верх = Обл.Верх + 1;
		КонецЕсли;
	КонецЦикла;
	ДопСтрокиТекущейСтраницы.Добавить(НоваяСтрока);
	Обл = ПолучитьМакетТабличногоДокумента(Форма, Форма.ТекущийМакет).ПолучитьОбласть("Str_" + ИмяОбласти);
	ИндСтр = РазделительНомераСтроки + Формат(НомерДобавляемойСтроки, "ЧГ=0");
	Для Каждого ОблПодч Из Обл.Области Цикл 
		Если ОблПодч.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ОблПодч.Имя = ОблПодч.Имя + ИндСтр;
		КонецЕсли;
	КонецЦикла;
	ПредставлениеУведомления.ВставитьОбласть(Обл.Область(), ПредставлениеУведомления.Область(Верх,,Верх,), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ПредставлениеУведомления.Области["Str_" + ИмяОбласти].Имя = "";
	Для Инд = 1 По НомерДобавляемойСтроки Цикл 
		ОблПодч = ПредставлениеУведомления.Области["Del_" + ИмяОбласти + РазделительНомераСтроки + Формат(Инд, "ЧГ=0")];
		ОблПодч.Текст = "х";
		ОблПодч.Гиперссылка = Истина;
	КонецЦикла;
	
	Для Каждого КЗ Из ДопСтрокиТекущейСтраницы[НомерДобавляемойСтроки-1].Значение Цикл 
		Форма.Элементы.ПредставлениеУведомления.ТекущаяОбласть = 
			ПредставлениеУведомления.Области.Найти(КЗ.Ключ + РазделительНомераСтроки + Формат(НомерДобавляемойСтроки, "ЧГ="));
		Прервать;
	КонецЦикла;
	
	РаскраситьАвтозаполняемыеЯчейки(Форма);
КонецПроцедуры

Процедура ТиповаяПечатьНесколькихСтраницНаОдинБланк(Объект, Листы, СтруктураПараметров, ИмяРаздела, КоличествоКопий, ИмяМакета, НомСтр, ИННКПП) Экспорт 
	Если СтруктураПараметров.ДанныеМногостраничныхРазделов[ИмяРаздела].Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеНастройкиПечати = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ДополнительныеНастройкиПечати");
	ВыводитьМакет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ВыводитьМакет", Истина);
	
	СтрРаздела = Новый Структура;
	Для Каждого КЗ Из СтруктураПараметров.ДанныеМногостраничныхРазделов[ИмяРаздела][0].Значение Цикл 
		Для Инд = 1 По КоличествоКопий Цикл
			СтрРаздела.Вставить(КЗ.Ключ + "_" + Инд);
		КонецЦикла;
	КонецЦикла;
	
	Инд = 0;
	Для Каждого Элт Из СтруктураПараметров.ДанныеМногостраничныхРазделов[ИмяРаздела] Цикл 
		Если Не СтраницаЗаполнена(Элт.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		Инд = Инд + 1;
		Для Каждого КЗ Из Элт.Значение Цикл
			Если СтрРаздела.Свойство(КЗ.Ключ + "_" + Инд) Тогда 
				СтрРаздела[КЗ.Ключ + "_" + Инд] = КЗ.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если Инд = КоличествоКопий Тогда 
			Если ТипЗнч(ИмяМакета) = Тип("ТабличныйДокумент") Тогда 
				МакетДляПечати = Новый ТабличныйДокумент;
				МакетДляПечати.Вывести(ИмяМакета);
			Иначе
				МакетДляПечати = ИмяМакета;
			КонецЕсли;
			
			ПечатнаяФорма = НовыйПустойЛист();
			НапечататьСтруктуру(Объект.ИмяОтчета, СтрРаздела, НомСтр, МакетДляПечати, ПечатнаяФорма, ИННКПП, ВыводитьМакет, ДополнительныеНастройкиПечати);
			ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр, Ложь);
			Инд = 0;
			Для Каждого КЗ Из СтрРаздела Цикл 
				СтрРаздела[КЗ.Ключ] = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Инд <> 0 Тогда
		Если ТипЗнч(ИмяМакета) = Тип("ТабличныйДокумент") Тогда 
			МакетДляПечати = Новый ТабличныйДокумент;
			МакетДляПечати.Вывести(ИмяМакета);
		Иначе
			МакетДляПечати = ИмяМакета;
		КонецЕсли;
		
		ПечатнаяФорма = НовыйПустойЛист();
		НапечататьСтруктуру(Объект.ИмяОтчета, СтрРаздела, НомСтр, МакетДляПечати, ПечатнаяФорма, ИННКПП, ВыводитьМакет, ДополнительныеНастройкиПечати);
		ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр, Ложь);
	КонецЕсли;
КонецПроцедуры

Функция ТиповаяСтруктураИННКППДляПечати(Объект, Титульная) Экспорт 
	ИННКПП = Новый Структура;
	ИННКПП.Вставить("ИНН", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Титульная, "ИНН"));
	ИННКПП.Вставить("КПП", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Титульная, "КПП"));
	ИННКПП.Вставить("ТекстовоеПредставлениеДатыПодписи", 
		Формат(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Титульная, "ДАТА_ПОДПИСИ"), "ДЛФ=DD; ДП="));
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		ФИОИП = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Объект.Организация, Объект.ДатаПодписи, "ФамилияИП, ИмяИП, ОтчествоИП");
		ИННКПП.Вставить("ФамилияВерх", ФИОИП.ФамилияИП);
		ИННКПП.Вставить("ИмяВерх", Лев(ВРег(СокрЛП(ФИОИП.ИмяИП)), 1));
		ИННКПП.Вставить("ОтчествоВерх", Лев(ВРег(СокрЛП(ФИОИП.ОтчествоИП)), 1));
	Иначе
		ИННКПП.Вставить("ФамилияВерх", "");
		ИННКПП.Вставить("ИмяВерх", "");
		ИННКПП.Вставить("ОтчествоВерх", "");
	КонецЕсли;
	
	ДополнитьСтруктуруПодписантами(Объект, ИННКПП);
	Возврат ИННКПП;
КонецФункции

Функция ПустоеДеревоСтраницУведомления() Экспорт 
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("УИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Дерево.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Многостраничность", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Многострочность", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("МногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений"));
	Дерево.Колонки.Добавить("МакетыПФ", Новый ОписаниеТипов("Строка"));
	Возврат Дерево;
КонецФункции

#Область ДанныеТребования

Функция РегистрацияВИФНСПоТребованию(Требование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НалоговыеОрганы КАК НалоговыеОрганы
	|		ПО РегистрацииВНалоговомОргане.Код = НалоговыеОрганы.Код
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Организация
	|	И НалоговыеОрганы.Ссылка = &НалоговыйОрган";
		
	
	Запрос.УстановитьПараметр("Организация", Требование.Организация);
	Запрос.УстановитьПараметр("НалоговыйОрган", Требование.НалоговыйОрган);
	
	РегистрацияВИФНС = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		РегистрацияВИФНС = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат РегистрацияВИФНС;
	
КонецФункции

Функция ДанныеОтветаНаТребование(ОтветНаТребованиеДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(ОтветНаТребованиеДокументов);
	Если ЦиклОбмена = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ответ на требование должен быть отправлен';
													|en = 'Ответ на требование должен быть отправлен'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СообщенияЦикла = ДокументооборотСКОВызовСервера.ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена);
	
	Данные     = ДанныеЧтенияОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла);
	ДатаПриема = ДатаПриемаОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла);
	
	Если Данные = Неопределено ИЛИ ДатаПриема = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить данные из ответа на требование';
													|en = 'Не удалось получить данные из ответа на требование'"));
		Возврат Неопределено;
	Иначе
		Данные.Вставить("_ДатаПрмЭ", ДатаПриема);
		Возврат Данные;
	КонецЕсли;
	
КонецФункции

Функция ДанныеЧтенияОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла) Экспорт
	
	Сообщения = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП));
	
	Если Сообщения.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ответ на требование должен быть отправлен';
													|en = 'Ответ на требование должен быть отправлен'"));
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();

	ТранспортноеСообщение = Сообщения[0].Ссылка;
	Вложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(
		ТранспортноеСообщение, 
		Истина, 
		Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
	
	ДвДанныеОписи = Неопределено;
	Для каждого Вложение Из Вложения Цикл
		Если Вложение.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.xml Тогда
			ДвДанныеОписи = Вложение.Данные.Получить();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДвДанныеОписи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ДвДанныеОписи.Записать(ВременныйФайл);
	
	ДеревоXML = КонтекстЭДОСервер.ЗагрузитьXMLВДеревоЗначений(ВременныйФайл);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайл);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_ИмяОпис    = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,, "ИдФайл", "А", Истина).Значение;
	_ИмяФайлОтв = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,, "ИдФайлОсн", "Э", Истина).Значение;
	
	_ИмяДокР = Новый Массив;
	НайденныеСтроки = Новый Массив;
	УзлыИмяФайл = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,НайденныеСтроки, "ИмяФайл", "Э", Истина).Значение;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		_ИмяДокР.Добавить(НайденнаяСтрока.Значение);
	КонецЦикла; 
	
	Результат = Новый Структура();
	Результат.Вставить("_ИмяДокР", _ИмяДокР);
	Результат.Вставить("_ИмяФайлОтв", _ИмяФайлОтв);
	Результат.Вставить("_ИмяОпис", _ИмяОпис);
	Результат.Вставить("_КодНОДокПред", ОтветНаТребованиеДокументов.НалоговыйОрган.Код);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФайлаТребования(Требование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	_ИмяФайлТреб = "";
	Если ТипЗнч(Требование) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда 
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ИменаФайлов = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Требование);
		_ИмяФайлТреб = КонтекстЭДОСервер.ИмяФайлаБезРасширения(ИменаФайлов[0].ИмяФайла);
	КонецЕсли;
	
	Возврат _ИмяФайлТреб;
	
КонецФункции

Функция ДанныеТребования(Требование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрацияВИФНС = РегистрацияВИФНСПоТребованию(Требование);
	_ИмяФайлТреб     = ИмяФайлаТребования(Требование);
	_НомТреб         = Требование.НомерДокумента;
	_ДатаТреб        = Требование.ДатаДокумента;
	
	Результат = Новый Структура();
	Результат.Вставить("_ИмяФайлТреб",     _ИмяФайлТреб);
	Результат.Вставить("_НомТреб",         _НомТреб);
	Результат.Вставить("_ДатаТреб",        _ДатаТреб);
	Результат.Вставить("РегистрацияВИФНС", РегистрацияВИФНС);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПечатьВСледующихВерсиях(Объект) Экспорт 
	Листы = Новый СписокЗначений;
	ПечатнаяФорма = НовыйПустойЛист();
	ПечатнаяФорма.Вывести(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПечатьВСледующихВерсиях"));
	ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, 1, Ложь);
	Возврат Листы;
КонецФункции

Функция ТекстОшибкиПриПроверкиВыгрузки() Экспорт 
	Возврат "При проверке выгрузки обнаружены ошибки. Для просмотра списка ошибок
		| перейдите в форму уведомления, меню ""Проверка"", пункт ""Проверить выгрузку""";
КонецФункции

Процедура СообщитьОшибкиПриПроверкеВыгрузки(Объект, Ошибки, ДанныеУведомления) Экспорт 
	Если Ошибки.Количество() > 0 Тогда 
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиПриПроверкиВыгрузки(), Объект.Ссылка);
		Если ДанныеУведомления.Свойство("РазрешитьВыгружатьСОшибками") И ДанныеУведомления.РазрешитьВыгружатьСОшибками = Ложь Тогда 
			ВызватьИсключение "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СведенияЭлектронногоПредставления() Экспорт 
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ДвоичныеДанныеФайла", Новый ОписаниеТипов("ДвоичныеДанные"));
	
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ДанныеУведомленияДляВыгрузки(Объект) Экспорт 
	ДанныеУведомления = Объект.ДанныеУведомления.Получить();
	
	Если ТипЗнч(ДанныеУведомления) = Тип("Структура") Тогда 
		ДанныеУведомления.Вставить("Организация", Объект.Организация);
		ДанныеУведомления.Вставить("ПодписантФамилия", Объект.ПодписантФамилия);
		ДанныеУведомления.Вставить("ПодписантИмя", Объект.ПодписантИмя);
		ДанныеУведомления.Вставить("ПодписантОтчество", Объект.ПодписантОтчество);
		ДанныеУведомления.Вставить("ВидУведомления", Объект.ВидУведомления);
		ДанныеУведомления.Вставить("Объект", Объект);
		ДанныеУведомления.Вставить("АрхивМакетов", "");
		ДанныеУведомления.Вставить("ОТЧ", Новый ОписаниеТипов("Число"));
		ДанныеУведомления.Вставить("ОТБ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Возврат ДанныеУведомления;
КонецФункции

Процедура ВыгрузитьДеревоВТаблицу(СтруктураВыгрузки, ОсновныеСведения, СведенияЭлектронногоПредставления) Экспорт 
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура ТиповоеЗаполнениеДанными(ДанныеУведомления, ОсновныеСведения, ДеревоВыгрузки) Экспорт 
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(ОсновныеСведения, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметрыСРазделами(ОсновныеСведения, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзелНов(ДанныеУведомления, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
КонецПроцедуры

Функция ТаблицаУведомленийСХешем() Экспорт 
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидУведомления");
	Результат.Колонки.Добавить("Синоним");
	Результат.Колонки.Добавить("Хеш");
	
	СоответствиеИменамОтчетов = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ПолучитьСоответствиеВидовУведомленийИменамОтчетов();
	ХешКоды = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ПолучитьХеш();
	Для Каждого КЗ Из СоответствиеИменамОтчетов Цикл 
		Если Метаданные.Отчеты.Найти(КЗ.Значение) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтр = Результат.Добавить();
		НовСтр.ВидУведомления = КЗ.Ключ;
		НовСтр.Синоним = Строка(КЗ.Ключ);
		НовСтр.Хеш = ПолучитьХеш(НовСтр.Синоним) + ХешКоды[КЗ.Ключ];
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НоваяТаблицаФормОтчета() Экспорт 
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОбщегоНазначения.ОписаниеТипаСтрока(200), "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "         " + "по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОбщегоНазначения.ОписаниеТипаСтрока(50), "Редакция формы", 20);
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция СформироватьСоответствиеМногострочныхЧастей(ДеревоСтраниц) Экспорт 
	Результат = Новый Соответствие;
	ЗаполнитьСоответствиеМногострочныхЧастейРек(Результат, ДеревоСтраниц.Строки);
	Возврат Результат;
КонецФункции

Процедура ПоказатьТекущуюСтраницу(Форма, ИмяМакета, ПредУИД) Экспорт 
	Форма.ПредставлениеУведомления.Очистить();
	Форма.ТекущийМакет = ИмяМакета;
	Макет = ПолучитьМакетТабличногоДокумента(Форма, ИмяМакета);
	Форма.ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть("ОсновнаяЧасть"));
	СтрДанных = Форма.ДанныеУведомления[Форма.ТекущееИДНаименования];
	Для Каждого Обл Из Форма.ПредставлениеУведомления.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение Тогда 
			
			СтрДанных.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьФорматыВПолях(Форма);
	Если Форма.Элементы.Найти("ДеревоСтраницКонтекстноеМенюДобавитьСтраницу") <> Неопределено Тогда 
		Форма.Элементы.ДеревоСтраницКонтекстноеМенюДобавитьСтраницу.Доступность = Ложь;
		Форма.Элементы.ДеревоСтраницКонтекстноеМенюУдалитьСтраницу.Доступность = Ложь;
	КонецЕсли;
	
	РаскраситьАвтозаполняемыеЯчейки(Форма);
	ПозиционироватьсяНаЯчейке(Форма);
КонецПроцедуры

Процедура ПозиционироватьсяНаЯчейке(Форма) Экспорт 
	ПараметрыПозиционирования = Форма["ПараметрыПозиционирования"];
	Если ЗначениеЗаполнено(ПараметрыПозиционирования.ИмяОбласти) Тогда 
		ОбластьДляПозиционирования = Форма.ПредставлениеУведомления.Области.Найти(ПараметрыПозиционирования.ИмяОбласти);
		Форма.Элементы.ПредставлениеУведомления.ТекущаяОбласть = ОбластьДляПозиционирования;
		Если ТипЗнч(ОбластьДляПозиционирования) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
			ПараметрыПозиционирования.ИмяОбласти = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, Узел, ПараметрыТекущейСтраницы = Неопределено, УИДРодителя = Неопределено) Экспорт 
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "А" Или Стр.Тип = "A" Или Стр.Тип = "П" Тогда
			Если Стр.Многострочность = Истина Тогда
				Многострочность = Неопределено;
				Если ПараметрыВыгрузки.ДанныеДопСтрокБД.Свойство(Стр.Раздел, Многострочность)
					И ТипЗнч(Многострочность) = Тип("ТаблицаЗначений") Тогда
				
					Для Каждого СтрМнгч Из Многострочность Цикл
						Если ЗначениеЗаполнено(УИДРодителя)
							И УИДРодителя <> СтрМнгч.УИД Тогда 
							
							Продолжить;
						КонецЕсли;
						
						НовУзел = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Стр);
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(НовУзел, СтрМнгч[НовУзел["Ключ"]]);
					КонецЦикла;
					
					РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Стр.Ключ) Тогда
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыТекущейСтраницы <> Неопределено И ПараметрыТекущейСтраницы.Свойство(Стр.Ключ, ЗначениеПоказателя) Тогда 
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
				ИначеЕсли ПараметрыТекущейСтраницы = Неопределено 
					И ЗначениеЗаполнено(Стр.Раздел)
					И ПараметрыВыгрузки.ДанныеУведомления.Свойство(Стр.Раздел, ЗначениеПоказателя) Тогда 
					Если ЗначениеПоказателя.Свойство(Стр.Ключ, ЗначениеПоказателя) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многостраничность = Истина Тогда
				Многостраничность = Неопределено;
				Если ПараметрыВыгрузки.ДанныеМногостраничныхРазделов.Свойство(Стр.Раздел, Многостраничность)
					И ТипЗнч(Многостраничность) = Тип("СписокЗначений") Тогда
				
					Для Каждого СтрМнгч Из Многостраничность Цикл 
						Если УИДРодителя = Неопределено Или СтрМнгч.Значение.УИДРодителя = УИДРодителя Тогда 
							НовУзел = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Стр);
							ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, НовУзел, СтрМнгч.Значение, СтрМнгч.Значение.УИД);
						КонецЕсли;
					КонецЦикла;
					
					РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КонецЕсли;
			Иначе
				Если Стр.Многострочность = Истина Тогда
					Многострочность = Неопределено;
					Если ПараметрыВыгрузки.ДанныеДопСтрокБД.Свойство(Стр.Раздел, Многострочность)
						И ТипЗнч(Многострочность) = Тип("ТаблицаЗначений") Тогда
					
						Для Каждого СтрМнгч Из Многострочность Цикл
							Если ЗначениеЗаполнено(УИДРодителя)
								И УИДРодителя <> СтрМнгч.УИД Тогда 
								
								Продолжить;
							КонецЕсли;
							
							НовУзел = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Стр);
							ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, НовУзел, 
								ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрМнгч));
						КонецЦикла;
						
						РегламентированнаяОтчетность.УдалитьУзел(Стр);
					КонецЕсли;
				Иначе
					ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, Стр, ПараметрыТекущейСтраницы, УИДРодителя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьДанныеПередПечатью(СтруктураДанныхСтраницы, РазбиватьСуммы = Истина) Экспорт 
	Для Каждого КЗ Из СтруктураДанныхСтраницы Цикл 
		Если ТипЗнч(КЗ.Значение) = Тип("Дата") И Не СтруктураДанныхСтраницы.Свойство(КЗ.Ключ + "1") Тогда 
			РазбитьДатуДляПечатиВПрямоугольники(СтруктураДанныхСтраницы, КЗ.Ключ);
		КонецЕсли;
		Если РазбиватьСуммы И ТипЗнч(КЗ.Значение) = Тип("Число") И Не СтруктураДанныхСтраницы.Свойство(КЗ.Ключ + "1") Тогда 
			РазбитьЧислоДляПечатиВПрямоугольники(СтруктураДанныхСтраницы, КЗ.Ключ, 2);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НапечататьДанные(ИмяОтчета, СтруктураДанныхСтраницы, ИмяМакета, ПечатнаяФорма, ИННКПП) Экспорт
	Попытка
		Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
			Если ТипЗнч(ИмяМакета) = Тип("Строка") Тогда 
				МакетПФ = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
			ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ТабличныйДокумент") Тогда 
				МакетПФ = ИмяМакета;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПечатнаяФорма) = Тип("ТабличныйДокумент") Тогда 
			МакетПФ = ПечатнаяФорма;
		Иначе
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	ИННКПП.НомСтр = ИННКПП.НомСтр + 1;
	ПечатнаяФорма.Вывести(МакетПФ);
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
			Если СтруктураДанныхСтраницы.Свойство(Обл.Имя) Тогда 
				Обл.Текст = СтруктураДанныхСтраницы[Обл.Имя];
			КонецЕсли;
			Если ИННКПП.Свойство(Обл.Имя) Тогда 
				Обл.Текст = ИННКПП[Обл.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДополнительныеНастройкиПечати() Экспорт 
	НастройкиПечати = Новый Структура;
	НастройкиПечати.Вставить("СПрочерками", Истина);
	НастройкиПечати.Вставить("ЧислаСлева", Истина);
	Возврат НастройкиПечати;
КонецФункции

Процедура НапечататьСтруктуру(ИмяОтчета, СтруктураДанныхСтраницы, НомСтр, ИмяМакета, ПечатнаяФорма, ИННКПП, ВыводитьМакет = Истина, Настройки = Неопределено) Экспорт 
	Попытка
		Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
			Если ТипЗнч(ИмяМакета) = Тип("Строка") Тогда 
				МакетПФ = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
			ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ТабличныйДокумент") Тогда 
				МакетПФ = ИмяМакета;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПечатнаяФорма) = Тип("ТабличныйДокумент") Тогда 
			МакетПФ = ПечатнаяФорма;
		Иначе
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда 
		НастройкиПечати = Настройки;
	ИначеЕсли ТипЗнч(Настройки) = Тип("Булево") Тогда 
		НастройкиПечати = ДополнительныеНастройкиПечати();
		НастройкиПечати.СПрочерками = Настройки;
	Иначе
		НастройкиПечати = ДополнительныеНастройкиПечати();
	КонецЕсли;
	НомСтр = НомСтр + 1;
	НапечататьСтруктуруСлужебный(ИННКПП, МакетПФ.Области, НастройкиПечати);
	НапечататьСтруктуруСлужебный(СтруктураДанныхСтраницы, МакетПФ.Области, НастройкиПечати);
	
	ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
	Если ИННКПП.Свойство("ИНН") Тогда 
		ВывестиСтрокуНаПечать(ИННКПП.ИНН, "ИННШапка", МакетПФ.Области, "-");
	КонецЕсли;
	Если ИННКПП.Свойство("КПП") Тогда 
		ВывестиСтрокуНаПечать(ИННКПП.КПП, "КППШапка", МакетПФ.Области, "-");
	КонецЕсли;
	
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"ТекстовоеПредставлениеДатыПодписи,ФамилияВерх,ИмяВерх,ОтчествоВерх", ",") Цикл 
		
		Если ИННКПП.Свойство(Элт) Тогда
			Обл = МакетПФ.Области.Найти(Элт);
			Если Не Обл = Неопределено Тогда 
				Обл.Текст = ИННКПП[Элт];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(МакетПФ.Параметры, СтруктураДанныхСтраницы);
	Если ВыводитьМакет Тогда 
		ПечатнаяФорма.Вывести(МакетПФ);
	КонецЕсли;
КонецПроцедуры

Процедура НапечататьСтраницыСМногострочнойЧастью(Объект, Листы, СтруктураПараметров, ИмяРаздела, МногострочнаяЧасть, ИмяМакета, НомСтр, ИННКПП) Экспорт 
	Если СтруктураПараметров.ДанныеМногостраничныхРазделов.Свойство(ИмяРаздела)
		И СтруктураПараметров.ДанныеМногостраничныхРазделов[ИмяРаздела].Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	МногостраничныйРаздел = (СтруктураПараметров.ДанныеМногостраничныхРазделов.Свойство(ИмяРаздела));
	Если МногостраничныйРаздел Тогда
		Для Каждого Стр Из СтруктураПараметров.ДанныеМногостраничныхРазделов[ИмяРаздела] Цикл 
			СтраницаДляПечати = Стр.Значение;
			НапечататьСтраницуСМногострочнойЧастью(Объект, Листы, СтруктураПараметров, СтраницаДляПечати, МногострочнаяЧасть, ИмяМакета, НомСтр, ИННКПП);
		КонецЦикла;
	Иначе
		СтраницаДляПечати = СтруктураПараметров.ДанныеУведомления[ИмяРаздела];
		НапечататьСтраницуСМногострочнойЧастью(Объект, Листы, СтруктураПараметров, СтраницаДляПечати, МногострочнаяЧасть, ИмяМакета, НомСтр, ИННКПП);
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьСтруктуруПодписантами(Объект, ИННКПП) Экспорт 
	ИННКПП.Вставить("ФамилияПодп", Объект.ПодписантФамилия);
	ИННКПП.Вставить("ИмяПодп", Объект.ПодписантИмя);
	ИННКПП.Вставить("ОтчествоПодп", Объект.ПодписантОтчество);
	ИННКПП.Вставить("ПодпФ", ВРег(Объект.ПодписантФамилия));
	ИННКПП.Вставить("ПодпИ", ВРег(Объект.ПодписантИмя));
	ИННКПП.Вставить("ПодпО", ВРег(Объект.ПодписантОтчество));
КонецПроцедуры

Процедура РазбитьДатуДляПечатиВПрямоугольники(Данные, ИмяПоля) Экспорт 
	Данные.Вставить(ИмяПоля + "1", Формат(Данные[ИмяПоля], "ДФ=dd"));
	Данные.Вставить(ИмяПоля + "2", Формат(Данные[ИмяПоля], "ДФ=MM"));
	Данные.Вставить(ИмяПоля + "3", Формат(Данные[ИмяПоля], "ДФ=yyyy"));
КонецПроцедуры

Процедура РазбитьЧислоДляПечатиВПрямоугольники(Данные, ИмяПоля, РазрядовПослеЗапятой) Экспорт 
	ДанныеЧисло = ?(ЗначениеЗаполнено(Данные[ИмяПоля]), Число(Данные[ИмяПоля]), 0);
	Данные.Вставить(ИмяПоля + "1", Формат(Цел(ДанныеЧисло), "ЧН=0"));
	Дельта = Цел((ДанныеЧисло - Цел(ДанныеЧисло)) * Pow(10, РазрядовПослеЗапятой));
	ФорматнаяСтрока = "ЧВН=; ЧЦ=" + РазрядовПослеЗапятой + "; ЧН=";
	Для Инд = 1 По РазрядовПослеЗапятой Цикл
		ФорматнаяСтрока = ФорматнаяСтрока + "0";
	КонецЦикла;
	Данные.Вставить(ИмяПоля + "2", Формат(Дельта, ФорматнаяСтрока));
КонецПроцедуры

Процедура ЗащитаОбласти(Форма, ИмяОбласти) Экспорт 
	Область = Форма.ПредставлениеУведомления.Области.Найти(ИмяОбласти);
	Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Область.Защита = Истина;
		Область.ЦветФона = Форма.ЦФБ;
	КонецЕсли;
КонецПроцедуры

Функция ПоказатьТекущуюМногостраничнуюСтраницу(Форма, ИмяМакета) Экспорт 
	Форма.ПредставлениеУведомления.Очистить();
	ТекущийМакет = ИмяМакета;
	Макет = ПолучитьМакетТабличногоДокумента(Форма, ИмяМакета);
	ВыводитьПанельУправленияСтраницами = Макет.Области.Найти("НеВыводитьПанельУправленияСтраницами") = Неопределено
		И Не Форма.Элементы.ПредставлениеУведомления.ЧерноБелыйПросмотр;
	Если ВыводитьПанельУправленияСтраницами Тогда 
		Форма.ПредставлениеУведомления.Вывести(УведомлениеОСпецрежимахНалогообложенияПовтИсп.МакетСтраницыДобавитьУдалитьСкопировать());
	КонецЕсли;
	Форма.ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть("ОсновнаяЧасть"));
	УстановитьФорматыВПолях(Форма);
	
	СтрДанных = Неопределено;
	Для Каждого Элт Из Форма.ДанныеМногостраничныхРазделов[Форма.ТекущееИДНаименования] Цикл 
		Если Элт.Значение.УИД = Форма.УИДТекущаяСтраница Тогда 
			СтрДанных = Элт.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из Форма.ПредставлениеУведомления.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение Тогда 
			
			СтрДанных.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДеревоСтраницКонтекстноеМенюДобавитьСтраницу = Форма.Элементы.Найти("ДеревоСтраницКонтекстноеМенюДобавитьСтраницу");
	ДеревоСтраницКонтекстноеМенюУдалитьСтраницу = Форма.Элементы.Найти("ДеревоСтраницКонтекстноеМенюУдалитьСтраницу");
	Если ВыводитьПанельУправленияСтраницами Тогда 
		НайденнаяСтрока = НайтиСтрокуВДеревеПоУИД(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
		ДеревоСтраницКонтекстноеМенюУдалитьСтраницу = Форма.Элементы.Найти("ДеревоСтраницКонтекстноеМенюУдалитьСтраницу");
		Если НайденнаяСтрока <> Неопределено
			И НайденнаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда 
			
			Форма.ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Текст = "";
			Форма.ПредставлениеУведомления.Области.УдалитьСтраницу.Текст = "";
			Форма.ПредставлениеУведомления.Области.ПерейтиПоНомеру.Текст = "";
			Форма.ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Гиперссылка = Ложь;
			Форма.ПредставлениеУведомления.Области.УдалитьСтраницу.Гиперссылка = Ложь;
			Форма.ПредставлениеУведомления.Области.ПерейтиПоНомеру.Гиперссылка = Ложь;
			
			Если ДеревоСтраницКонтекстноеМенюУдалитьСтраницу <> Неопределено Тогда 
				ДеревоСтраницКонтекстноеМенюУдалитьСтраницу.Доступность = Ложь;
			КонецЕсли;
		Иначе
			Если ДеревоСтраницКонтекстноеМенюУдалитьСтраницу <> Неопределено Тогда 
				ДеревоСтраницКонтекстноеМенюУдалитьСтраницу.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДеревоСтраницКонтекстноеМенюДобавитьСтраницу <> Неопределено Тогда 
			ДеревоСтраницКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
		КонецЕсли;
	Иначе
		Если ДеревоСтраницКонтекстноеМенюДобавитьСтраницу <> Неопределено Тогда 
			ДеревоСтраницКонтекстноеМенюДобавитьСтраницу.Доступность = Ложь;
		КонецЕсли;
		Если ДеревоСтраницКонтекстноеМенюУдалитьСтраницу <> Неопределено Тогда 
			ДеревоСтраницКонтекстноеМенюУдалитьСтраницу.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	РаскраситьАвтозаполняемыеЯчейки(Форма);
	ПозиционироватьсяНаЯчейке(Форма);
	Возврат Макет;
КонецФункции

Функция БлокЗаполнен(Данные, Показатели) Экспорт 
	БлокЗаполнен = Ложь;
	Для Каждого Поле Из СтрРазделить(Показатели, ",", Ложь) Цикл 
		Если СтрНайти(Поле, "_") = 0 Или Данные.Свойство(Поле) Тогда 
			БлокЗаполнен = БлокЗаполнен Или ЗначениеЗаполнено(Данные[Поле]);
		КонецЕсли;
	КонецЦикла;
	Возврат БлокЗаполнен;
КонецФункции

Функция ТаблицаОшибокУстаревшаяФорма(Сообщение = "Форма устарела") Экспорт 
	ТаблицаОшибок = Новый СписокЗначений;
	ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(Сообщение, "", ""));
	Возврат ТаблицаОшибок;
КонецФункции

Процедура ДанныеВВерхнийРегистр(Данные) Экспорт 
	Для Каждого КЗ Из Данные Цикл 
		Если ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда 
			Данные[КЗ.Ключ] = ВРег(КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузкаЗаполняемыхПоказателейОтчета(Форма, ИмяФормы = "") Экспорт 
	ИДРедакцииОтчета = ?(ЗначениеЗаполнено(ИмяФормы), ИмяФормы, Форма.Объект.ИмяФормы);
	ПараметрыОтчета = Новый Структура("Организация, ДатаПодписи, РегистрацияВИФНС",
		Форма.Объект.Организация, Форма.Объект.ДатаПодписи, Форма.Объект.РегистрацияВИФНС);
	ПоказателиОтчета = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		СтрЗаменить(Форма.Объект.ИмяОтчета, "EF_", ""), ИДРедакцииОтчета, ПараметрыОтчета);
		
	Если ТипЗнч(ПоказателиОтчета) = Тип("Структура") И ПоказателиОтчета.Количество() > 0 Тогда 
		Для Каждого КЗ Из ПоказателиОтчета Цикл 
			Форма.ЗаполняемыеРеквизиты.Добавить(КЗ.Ключ);
		КонецЦикла;
	Иначе
		ФормаЗаполнить = Форма.Элементы.Найти("ФормаЗаполнить");
		Если ТипЗнч(ФормаЗаполнить) = Тип("КнопкаФормы") Тогда 
			ФормаЗаполнить.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СтруктураПараметровДляСохранения(Форма) Экспорт 
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Или Не ЗначениеЗаполнено(Форма.Объект.Дата) Тогда
		Форма.Объект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Форма["ТекущиеМногострочныеЧасти"].Количество() > 0 Тогда 
		СобратьДанныеМногострочныхЧастейТекущейСтраницы(Форма, Форма["ТекущиеМногострочныеЧасти"], Форма["УИДТекущаяСтраница"]);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоСтраниц", Форма.РеквизитФормыВЗначение("ДеревоСтраниц"));
	СтруктураПараметров.Вставить("ДанныеУведомления", Форма["ДанныеУведомления"]);
	СтруктураПараметров.Вставить("РазрешитьВыгружатьСОшибками", Форма["РазрешитьВыгружатьСОшибками"]);
	СтруктураПараметров.Вставить("ИдентификаторыОбычныхСтраниц", Форма["ИдентификаторыОбычныхСтраниц"]);
	СтруктураПараметров.Вставить("ДанныеМногостраничныхРазделов", Форма["ДанныеМногостраничныхРазделов"]);
	СтруктураПараметров.Вставить("ДанныеДопСтрокБД", ДопСтрокиДляСохранения(Форма));
	СтруктураПараметров.Вставить("ДокументОснование", Форма.Объект.Основание);
	Возврат СтруктураПараметров;
КонецФункции

Функция ЗагрузкаДанныхУведомления(Форма, СсылкаНаДанные) Экспорт
	РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДанные, "ДанныеУведомления, Основание");
	СтруктураПараметров = РеквизитыУведомления["ДанныеУведомления"].Получить();
	Форма["ДанныеУведомления"] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ДанныеУведомления", Новый Структура);
	Форма["ДанныеМногостраничныхРазделов"] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ДанныеМногостраничныхРазделов", Новый Структура);
	Форма["ИдентификаторыОбычныхСтраниц"] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ИдентификаторыОбычныхСтраниц", Новый Структура);
	Форма["РазрешитьВыгружатьСОшибками"] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "РазрешитьВыгружатьСОшибками", Истина);
	Форма.ЗначениеВРеквизитФормы(СтруктураПараметров.ДеревоСтраниц, "ДеревоСтраниц");
	ЗагрузкаМногострочныхЧастейУведомления(Форма, СтруктураПараметров);
	Возврат СтруктураПараметров;
КонецФункции

#Область РаботаСАдресамиФИАС

Процедура ОбновитьАдресВМногостраничнойСтранице(Результат, Форма) Экспорт 
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Форма.ПредставлениеУведомления.Области["АдресJSON"].Значение = Результат.Значение;
		
		ТекСтраницаДанные = Неопределено;
		Для Каждого Стр Из Форма.ДанныеМногостраничныхРазделов[Форма.ТекущееИДНаименования] Цикл 
			Если Стр.Значение.УИД = Форма.УИДТекущаяСтраница Тогда 
				ТекСтраницаДанные = Стр.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекСтраницаДанные <> Неопределено Тогда 
			ТекСтраницаДанные["АдресJSON"] = Результат.Значение;
		КонецЕсли;
		
		ПоказателиАдреса = СоответствиеПоказателейСтраницыРеквизитамАдреса();
		АдресВФорматеФИАС = АдресВФорматеФИАС(Результат.Значение);
		Для Каждого КЗ Из АдресВФорматеФИАС Цикл
			Если ТипЗнч(КЗ.Значение) = Тип("Массив") Тогда
				Если КЗ.Ключ = "Здания" Тогда 
					Для Инд = 1 По 3 Цикл
						ТекСтраницаДанные["Аддр_ЗданиеТип" + Инд] = "";
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеТип" + Инд].Значение = "";
						ТекСтраницаДанные["Аддр_ЗданиеНомер" + Инд] = "";
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеНомер" + Инд].Значение = "";
					КонецЦикла;
					Для Инд = 1 По 3 Цикл 
						Если КЗ.Значение.Количество() < Инд Тогда 
							Прервать;
						КонецЕсли;
						ТекСтраницаДанные["Аддр_ЗданиеТип" + Инд] = КЗ.Значение[Инд - 1].ЗданиеТип;
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеТип" + Инд].Значение = КЗ.Значение[Инд - 1].ЗданиеТип;
						ТекСтраницаДанные["Аддр_ЗданиеНомер" + Инд] = КЗ.Значение[Инд - 1].ЗданиеНомер;
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеНомер" + Инд].Значение = КЗ.Значение[Инд - 1].ЗданиеНомер;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если ПоказателиАдреса.Свойство(КЗ.Ключ)
					И ТекСтраницаДанные.Свойство(ПоказателиАдреса[КЗ.Ключ]) Тогда 
					
					ТекСтраницаДанные[ПоказателиАдреса[КЗ.Ключ]] = КЗ.Значение;
					Форма.ПредставлениеУведомления.Области[ПоказателиАдреса[КЗ.Ключ]].Значение = КЗ.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьАдресВМногостраничнойСтранице(ТаблицаОшибок, Данные, ИДСтраницы) Экспорт 
	Если Не СтрПодобнаПоРегулярномуВыражению(Данные.Аддр_Регион, "[0-9]{2}") Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан / неправильно указан код региона", ИДСтраницы, "Аддр_Регион", Данные.УИД));
	КонецЕсли;
	Если Данные.Аддр_Регион <> "99"
		Или ЗначениеЗаполнено(Данные.Аддр_МуниципРайонВидКод) 
		Или ЗначениеЗаполнено(Данные.Аддр_МуниципРайонНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_МуниципРайонВидКод) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид муниципального района", ИДСтраницы, "Аддр_МуниципРайонВидКод", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_МуниципРайонНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано наименование муниципального района/городского округа/внутригородской " 
				+ "территории города федерального значения/муниципального округа",
				ИДСтраницы, "Аддр_МуниципРайонНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Аддр_МуниципРайонВидКод) И
		(Данные.Аддр_МуниципРайонВидКод <> "1" И Данные.Аддр_МуниципРайонВидКод <> "2"
		И Данные.Аддр_МуниципРайонВидКод <> "3" И Данные.Аддр_МуниципРайонВидКод <> "4" И Данные.Аддр_МуниципРайонВидКод <> "5") Тогда 
		
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Неправильно указан вид муниципального района", ИДСтраницы, "Аддр_МуниципРайонВидКод", Данные.УИД));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенВидКод) 
		Или ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенВидКод) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид городского поселения", ИДСтраницы, "Аддр_ГородСелПоселенВидКод", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано наименование городского поселения/сельского поселения/межселенной территории"
				+" в составе муниципального района/внутригородского района городского округ", ИДСтраницы,
				"Аддр_ГородСелПоселенНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенВидКод) И
		(Данные.Аддр_ГородСелПоселенВидКод <> "1" И Данные.Аддр_ГородСелПоселенВидКод <> "2"
		И Данные.Аддр_ГородСелПоселенВидКод <> "3" И Данные.Аддр_ГородСелПоселенВидКод <> "4") Тогда 
		
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Неправильно указан вид городского поселения", ИДСтраницы, "Аддр_ГородСелПоселенВидКод", Данные.УИД));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Данные.Аддр_НаселенПунВид) 
		Или ЗначениеЗаполнено(Данные.Аддр_НаселенПунктНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_НаселенПунВид) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид населенного пункта", ИДСтраницы, "Аддр_НаселенПунВид", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_НаселенПунктНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан населенный пункт", ИДСтраницы, "Аддр_НаселенПунктНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан тип/вид элемента планировочной структуры", ИДСтраницы, "Аддр_ЭлПланСтруктурТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан элемент планировочной структуры", ИДСтраницы, "Аддр_ЭлПланСтруктурНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан тип/вид элемента улично-дорожной сети", ИДСтраницы, "Аддр_ЭлУлДорСетиТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан элемент улично-дорожной сети", ИДСтраницы, "Аддр_ЭлУлДорСетиНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияНомер) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан тип помещения", ИДСтраницы, "Аддр_ПомещЗданияТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияНомер) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан номер помещения", ИДСтраницы, "Аддр_ПомещЗданияНомер", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыНомер) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан тип помещения внутри квартиры", ИДСтраницы, "Аддр_ПомещКвартирыТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыНомер) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан номер помещения внутри квартиры", ИДСтраницы, "Аддр_ПомещКвартирыНомер", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Для Инд = 1 По 3 Цикл 
		Если ЗначениеЗаполнено(Данные["Аддр_ЗданиеТип" + Инд]) 
			Или ЗначениеЗаполнено(Данные["Аддр_ЗданиеНомер" + Инд]) Тогда 
			
			Если Не ЗначениеЗаполнено(Данные["Аддр_ЗданиеТип" + Инд]) Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указан тип здания", ИДСтраницы, "Аддр_ЗданиеТип" + Инд, Данные.УИД));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Данные["Аддр_ЗданиеНомер" + Инд]) Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указан номер здания", ИДСтраницы, "Аддр_ЗданиеНомер" + Инд, Данные.УИД));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция АдресНаМногостраничнойСтраницеЗаполнен(Данные) Экспорт
	Для Каждого КЗ Из Данные Цикл 
		Если ЗначениеЗаполнено(КЗ.Значение)
			И СтрНачинаетсяС(КЗ.Ключ, "Аддр_") Тогда 
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьМакетДвоичныхДанных(ФормаИмяОтчета, ИмяМакета) Экспорт
	Если ТипЗнч(ФормаИмяОтчета) = Тип("Строка") Тогда 
		ИмяОтчета = ФормаИмяОтчета;
		Для Каждого Макет Из Метаданные.Отчеты[ИмяОтчета].Макеты Цикл 
			Если СтрНачинаетсяС(Макет.Имя, "EF_") И СтрЗаканчиваетсяНа(Макет.Имя, ИмяМакета) Тогда 
				Возврат Отчеты[ИмяОтчета].ПолучитьМакет(Макет.Имя);
			КонецЕсли;
		КонецЦикла;
		Возврат Отчеты[ФормаИмяОтчета].ПолучитьМакет(ИмяМакета);
	ИначеЕсли ТипЗнч(ФормаИмяОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда 
		ИмяОтчета = ФормаИмяОтчета.Объект.ИмяОтчета;
		Для Каждого Макет Из Метаданные.Отчеты[ИмяОтчета].Макеты Цикл 
			Если СтрНачинаетсяС(Макет.Имя, "EF_") И СтрЗаканчиваетсяНа(Макет.Имя, ИмяМакета) Тогда 
				Возврат Отчеты[ИмяОтчета].ПолучитьМакет(Макет.Имя);
			КонецЕсли;
		КонецЦикла;
		Если ТипЗнч(Метаданные.Отчеты[ИмяОтчета].Макеты.Найти(ИмяМакета)) = Тип("ОбъектМетаданных") Тогда 
			Возврат Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФормаИмяОтчета.АдресВХранилищеЭкранныеФормы) 
			И ЭтоАдресВременногоХранилища(ФормаИмяОтчета.АдресВХранилищеЭкранныеФормы) Тогда
			
			СоответсвиеМакетов = ПолучитьИзВременногоХранилища(ФормаИмяОтчета.АдресВХранилищеЭкранныеФормы);
			Если СоответсвиеМакетов = Неопределено Тогда 
				СоответсвиеМакетов = ЗагрузитьМакетыТабличныхДокументовИзАрхива(ФормаИмяОтчета);
			КонецЕсли;
			Возврат СоответсвиеМакетов[ИмяМакета];
		ИначеЕсли ЗначениеЗаполнено(ФормаИмяОтчета.ИмяМакетаАрхиваТабличныхДокументов) Тогда 
			Возврат ЗагрузитьМакетыТабличныхДокументовИзАрхива(ФормаИмяОтчета)[ИмяМакета];
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ПечатьСтруктурыНаФорму(Источник, ПечатнаяФорма) Экспорт 
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Ложь 
			И Источник.Свойство(Обл.Имя) Тогда 
			
			Обл.Текст = Источник[Обл.Имя];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РаскраситьАвтозаполняемыеЯчейки(Форма)
	Для Каждого Элт Из Форма.ЗаполняемыеРеквизиты Цикл 
		Обл = Форма.ПредставлениеУведомления.Области.Найти(Элт.Значение);
		Если Обл <> Неопределено Тогда 
			Обл.ЦветФона = Форма["ЦветФонаАвто"]
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузкаМногострочныхЧастейУведомления(Форма, СтруктураПараметров)
	ДанныеДопСтрокБД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ДанныеДопСтрокБД", Новый Структура);
	Форма.ДанныеДопСтрок = Новый Структура;
	Форма.ДанныеДопСтрокСтраницы = Новый Структура;
	Для Каждого КЗ Из ДанныеДопСтрокБД Цикл 
		Форма.ДанныеДопСтрок.Вставить(КЗ.Ключ, ПоместитьВоВременноеХранилище(КЗ.Значение, Новый УникальныйИдентификатор));
		Стр = Новый Структура;
		Для Каждого Кол Из КЗ.Значение.Колонки Цикл 
			Если Кол.Имя <> "УИД" Тогда 
				Стр.Вставить(Кол.Имя);
			КонецЕсли;
		КонецЦикла;
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(Стр);
		Форма.ДанныеДопСтрокСтраницы.Вставить(КЗ.Ключ, СЗ);
	КонецЦикла;
КонецПроцедуры

Функция ДопСтрокиДляСохранения(Форма)
	ДанныеДопСтрокБД = Новый Структура;
	Для Каждого КЗ Из ?(ТипЗнч(Форма.ДанныеДопСтрок) = Тип("Структура"), Форма.ДанныеДопСтрок, Новый Структура) Цикл 
		ДанныеДопСтрокБД.Вставить(КЗ.Ключ, ПолучитьИзВременногоХранилища(КЗ.Значение));
	КонецЦикла;
	Возврат ДанныеДопСтрокБД;
КонецФункции

Процедура СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из ЭлементыДерева(Строка) Цикл
		Если ЭлементыДерева(ПодчМнг).Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда
			Если ПодчМнг.Многострочность Тогда
				Для Каждого МногострочныйЭлемент Из ПодчМнг.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = ПолучитьМакетТабличногоДокумента(Форма, ПодчМнг.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ТЗ.Колонки.Добавить(Обл.Имя, ТипОбластиИзМакетаСтраницы(Обл));
							СтрокаДанных.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = ПолучитьМакетТабличногоДокумента(Форма, ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя, ПустоеЗначениеПоТипуОбласти(Обл));
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			Форма.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЭлементыДерева(Исходник)
	Если ТипЗнч(Исходник) = Тип("ДеревоЗначений") Или ТипЗнч(Исходник) = Тип("СтрокаДереваЗначений") Тогда 
		Возврат Исходник.Строки;
	Иначе
		Возврат Исходник.ПолучитьЭлементы();
	КонецЕсли;
КонецФункции

Процедура СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из Строка.Строки Цикл
		Если ПодчМнг.Строки.Количество() > 0 Тогда
			СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда 
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			КонтейнерРезультат.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхПростогоУведомления(Форма, ПредставлениеУведомления)
	Форма.ДанныеУведомления = Новый Структура;
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
			И Обл.СодержитЗначение Тогда 
			
			Форма.ДанныеУведомления.Вставить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗагрузитьМакетыТабличныхДокументовИзАрхива(Форма)
	СоответствиеМакетовЭкранныхФорм = ЗагрузитьМакетыИзАрхива(Форма.Объект, "", Форма.ИмяМакетаАрхиваТабличныхДокументов);
	Форма.АдресВХранилищеЭкранныеФормы = ПоместитьВоВременноеХранилище(СоответствиеМакетовЭкранныхФорм, Форма.УникальныйИдентификатор);
	Возврат СоответствиеМакетовЭкранныхФорм;
КонецФункции

Процедура ДобавлениеРеквизитовДляЗапретаРедактирования(Форма)
	ФлагВозможностиПечатиСЭЦП = ЗначениеЗаполнено(Форма.Объект.Ссылка) 
		И ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения");
		
	ДобавляемыеРеквизиты = Новый Массив;
	Реквизит_СтруктураРеквизитовФормы = Новый РеквизитФормы("СтруктураРеквизитовФормы", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит_СтруктураРеквизитовФормы);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Форма["СтруктураРеквизитовФормы"] = Новый Структура("ПоследнийЦиклОбмена", Неопределено);
	Если ФлагВозможностиПечатиСЭЦП И ЗначениеЗаполнено(ТипПолучателя(Форма)) Тогда 
		ЗапретитьРедактированиеРеквизитовСданногоОтчета(Форма);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавлениеСтандартныхРеквизитовФормы(Форма)
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповСтрока20 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповЧисло10 = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяМакетаАрхиваТабличныхДокументов",ОписаниеТиповСтрока100));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АдресВХранилищеЭкранныеФормы", ОписаниеТиповСтрока100));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УИДПереключение", Новый ОписаниеТипов("УникальныйИдентификатор")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УИДТекущаяСтраница", Новый ОписаниеТипов("УникальныйИдентификатор")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыПозиционирования", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РазделительНомераСтроки", ОписаниеТиповСтрока100));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РучнойВвод", ОписаниеТиповБулево));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЭтоЮЛ", ОписаниеТиповБулево));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РазрешитьВыгружатьСОшибками", ОписаниеТиповБулево));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СПодчиненными", ОписаниеТиповБулево));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УдалениеСтраницы", ОписаниеТиповБулево));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтруктураРеквизитовУведомления", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СворачиваемыеЭлементы", ОписаниеТиповСтрока100));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИнформационнаяПанельБРОКэш", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЧисловыеФорматы", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СпискиВыбора", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекстовыеФорматы", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗагружаемыеКоды", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееИДНаименования", ОписаниеТиповСтрока100));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДанныеДопСтрокСтраницы", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДанныеДопСтрок", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДанныеМногостраничныхРазделов", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИдентификаторыОбычныхСтраниц", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДанныеУведомления", Новый ОписаниеТипов()));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗаполняемыеРеквизиты", Новый ОписаниеТипов("СписокЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущиеМногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОТД", Новый ОписаниеТипов("ОписаниеТипов")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОТЧ", Новый ОписаниеТипов("ОписаниеТипов")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АдресХранилища", ОписаниеТиповСтрока100));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущийМакет", ОписаниеТиповСтрока100));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Подключена1СОтчетность", ОписаниеТиповБулево));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЭтоНовоеУведомление", ОписаниеТиповБулево));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ДобавляемыеРеквизиты.Очистить();
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИДСтраницы", ОписаниеТиповСтрока20, "ЧисловыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Поле", ОписаниеТиповСтрока20, "ЧисловыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Всего", ОписаниеТиповЧисло10, "ЧисловыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПослеЗапятой", ОписаниеТиповЧисло10, "ЧисловыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Неотрицательный", ОписаниеТиповБулево, "ЧисловыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИДНаименования", ОписаниеТиповСтрока100, "СпискиВыбора"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяПоля", ОписаниеТиповСтрока100, "СпискиВыбора"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Код", ОписаниеТиповСтрока100, "СпискиВыбора"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Наименование", Новый ОписаниеТипов("Строка"), "СпискиВыбора"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИДСтраницы", ОписаниеТиповСтрока20, "ТекстовыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Поле", ОписаниеТиповСтрока20, "ТекстовыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДлСтроки", ОписаниеТиповЧисло10, "ТекстовыеФорматы"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Код", ОписаниеТиповСтрока, "ЗагружаемыеКоды"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Название", ОписаниеТиповСтрока, "ЗагружаемыеКоды"));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	СоздатьРеквизитЦвета(Форма, "ЦветФонаАвто", ЦветаСтиля.ЦветМакетаБРОАвтозаполнение);
	СоздатьРеквизитЦвета(Форма, "ЦФЖ", ЦветаСтиля.ЦветМакетаБРОРучноеЗаполнение);
	СоздатьРеквизитЦвета(Форма, "ЦФБ", ЦветаСтиля.ЦветМакетаБРОФон);
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Организация) Тогда 
		Форма.Параметры.Свойство("Организация", Форма.Объект.Организация);
	КонецЕсли;
	
	Форма["ПараметрыПозиционирования"] = Новый Структура("ИмяОбласти,ИмяСтраницы,УИДСтраницы,УИДТекущаяСтраница");
	Форма["РазделительНомераСтроки"] = "___";
	Форма["РучнойВвод"] = Ложь;
	Форма["РазрешитьВыгружатьСОшибками"] = Ложь;
	Форма["СПодчиненными"] = Ложь;
	Форма["УдалениеСтраницы"] = Ложь;
	Форма["ОТД"] = Новый ОписаниеТипов("Дата");
	Форма["ОТЧ"] = Новый ОписаниеТипов("Число");
	Форма["ЭтоЮЛ"] = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Форма.Объект.Организация);
	Форма["Подключена1СОтчетность"] = ИнтерфейсыВзаимодействияБРО.ОрганизацияИмеетУчетнуюЗапись(Форма.Объект.Организация);
	Форма["ЭтоНовоеУведомление"] = Форма.РеквизитФормыВЗначение("Объект").ЭтоНовый();
КонецПроцедуры

Функция ТипПолучателя(Форма)
	Если УведомлениеОСпецрежимахНалогообложенияПовтИсп.ВидыУведомленийВФНС()[Форма.Объект.ВидУведомления] = Истина Тогда 
		Возврат Перечисления.ТипыКонтролирующихОрганов.ФНС;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Процедура ЗапретитьРедактированиеРеквизитовОткрытогоОтчета(Форма)
	Попытка
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
			МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
			МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(Форма,,
				НСтр("ru = 'Разрешить редактирование уведомления';
					|en = 'Разрешить редактирование уведомления'"), Форма.Объект.Ссылка);
		КонецЕсли;
		
		ИменаПолейТабличногоДокумента = СтрРазделить("ПредставлениеУведомления", ";");
		Для Каждого ИмяПоляТабличногоДокумента Из ИменаПолейТабличногоДокумента Цикл
			ЭлементФормыПолеТабличногоДокумента = Форма.Элементы.Найти(ИмяПоляТабличногоДокумента);
			Если НЕ ЭлементФормыПолеТабличногоДокумента = Неопределено Тогда
				ЭлементФормыПолеТабличногоДокумента.ЧерноБелыйПросмотр = Истина;
				ЭлементФормыПолеТабличногоДокумента.УстановитьДействие("Выбор",
					"Отключенный_" + ЭлементФормыПолеТабличногоДокумента.ПолучитьДействие("Выбор"));
			КонецЕсли;
		КонецЦикла;
		
		КнопкаРазрешитьРедактирование = Форма.Элементы.Найти("РазрешитьРедактированиеРеквизитовОбъекта");
		Если ТипЗнч(КнопкаРазрешитьРедактирование) = Тип("КнопкаФормы") Тогда 
			КнопкаРазрешитьРедактирование.Видимость = Ложь;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка запрета редактирования открытого уведомления';
				|en = 'Установка запрета редактирования открытого уведомления'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗапретитьРедактированиеРеквизитовСданногоОтчета(Форма)
	КонтролирующийОрган = ТипПолучателя(Форма);
	СтатусОтправки = Неопределено;
	СостояниеСдачиОтчетности = Неопределено;
	СохраненныйДок = Форма.Объект.Ссылка;
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьСтатусИСостояниеСдачиОтчетности(
		СохраненныйДок, СохраненныйДок.Организация, КонтролирующийОрган, СостояниеСдачиОтчетности, СтатусОтправки);
	СтатусОтправкиВЖурнале = СохраненныйСтатусОтправкиУведомления(Форма.Объект);
	
	ЗапретитьРедактированиеПользователем = ((СтрНачинаетсяС(СтатусОтправки, "Сдано")
		И СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота)
		ИЛИ СтатусОтправки = ДокументооборотСКОКлиентСервер.СтатусСданоТребуетУточнения()) И СтрНайти(СтатусОтправки, СтатусОтправкиВЖурнале) = 1;
		
	Если ЗапретитьРедактированиеПользователем Тогда
		Попытка
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
				МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
				МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(Форма,,
					НСтр("ru = 'Разрешить редактирование уведомления';
						|en = 'Разрешить редактирование уведомления'"), СохраненныйДок);
			КонецЕсли;
				
			ИменаПолейТабличногоДокумента = СтрРазделить("ПредставлениеУведомления", ";");
			Для Каждого ИмяПоляТабличногоДокумента Из ИменаПолейТабличногоДокумента Цикл
				ЭлементФормыПолеТабличногоДокумента = Форма.Элементы.Найти(ИмяПоляТабличногоДокумента);
				Если НЕ ЭлементФормыПолеТабличногоДокумента = Неопределено Тогда
					ЭлементФормыПолеТабличногоДокумента.ЧерноБелыйПросмотр = Истина;
					ЭлементФормыПолеТабличногоДокумента.УстановитьДействие("Выбор",
						"Отключенный_" + ЭлементФормыПолеТабличногоДокумента.ПолучитьДействие("Выбор"));
				КонецЕсли;
			КонецЦикла;
			
			ТекущееСостояние = РегламентированнаяОтчетность.ТекущееСостояниеОтправки(СохраненныйДок, КонтролирующийОрган);
			ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СохраненныйДок);
			Если ТекущееСостояние <> Неопределено И ЗначениеЗаполнено(ЦиклОбмена) Тогда
				Форма.СтруктураРеквизитовФормы.Вставить("ПоследнийЦиклОбмена", ЦиклОбмена);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Установка запрета редактирования сданного уведомления';
					|en = 'Установка запрета редактирования сданного уведомления'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ДанныйПодразделПустРек(Форма, ТекущаяСтрока, Результат)
	ПодразделПуст = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИДНаименования) Тогда 
		Если ТекущаяСтрока.Многостраничность Тогда
			СтрДанных = Неопределено;
			Для Каждого Элт Из Форма.ДанныеМногостраничныхРазделов[ТекущаяСтрока.ИДНаименования] Цикл 
				Если Элт.Значение.УИД = ТекущаяСтрока.УИД Тогда 
					СтрДанных = Элт.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущаяСтрока.Многострочность Тогда
			Если Форма.ДанныеУведомления.Свойство(ТекущаяСтрока.ИДНаименования) Тогда 
				СтрДанных = Форма.ДанныеУведомления[ТекущаяСтрока.ИДНаименования];
				ПодразделПуст = МногострочнаяЧастьЗаполнена(ТекущаяСтрока.МногострочныеЧасти);
			КонецЕсли;
		Иначе
			СтрДанных = Форма.ДанныеУведомления[ТекущаяСтрока.ИДНаименования];
		КонецЕсли;
		
		Если ТипЗнч(СтрДанных) = Тип("Структура") Тогда 
			ПодразделПуст = ПодразделПуст И (Не СтраницаЗаполнена(СтрДанных));
		Иначе
			ПодразделПуст = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из ТекущаяСтрока.ПолучитьЭлементы() Цикл 
		ПодразделПуст = ДанныйПодразделПустРек(Форма, Стр, Результат) И ПодразделПуст;
	КонецЦикла;
	
	Если ПодразделПуст И ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
		Результат.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
	Возврат ПодразделПуст;
КонецФункции

Процедура ПеренумероватьЭлементы(Корень)
	Если Не ЗначениеЗаполнено(Корень.ИДНаименования) Тогда 
		Инд = 0;
		Для Каждого Стр Из Корень.ПолучитьЭлементы() Цикл 
			Инд = Инд + 1;
			Стр.Наименование = "Стр. " + Инд;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из Корень.ПолучитьЭлементы() Цикл 
		ПеренумероватьЭлементы(Стр);
	КонецЦикла;
КонецПроцедуры

Процедура СкопироватьСтрокуВДеревеРек(Форма, Источник, Приемник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Если ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда 
		Приемник.УИД = Новый УникальныйИдентификатор;
		СЗ = Форма.ДанныеМногостраничныхРазделов[Приемник.ИДНаименования];
		СтруктураНовСтр = Новый Структура;
		Для Каждого КЗ Из СЗ.Получить(0).Значение Цикл
			Если ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда 
				СтруктураНовСтр.Вставить(КЗ.Ключ, "");
			ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Число") Тогда 
				СтруктураНовСтр.Вставить(КЗ.Ключ, 0);
			ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Булево") Тогда 
				СтруктураНовСтр.Вставить(КЗ.Ключ, Ложь);
			Иначе
				СтруктураНовСтр.Вставить(КЗ.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураНовСтр.Вставить("УИД", Приемник.УИД);
		СтруктураНовСтр.Вставить("УИДРодителя", ПолучитьУИДРодителя(Приемник));
		СЗ.Добавить(СтруктураНовСтр);
	КонецЕсли;
	
	СтрокиДляКопирования = ПолучитьСписокСтрокДляКопирования(Форма, Источник);
	Для Каждого Стр Из СтрокиДляКопирования Цикл 
		НовСтр = Приемник.ПолучитьЭлементы().Добавить();
		СкопироватьСтрокуВДеревеРек(Форма, Стр, НовСтр);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда
		Приемник.УИД = Приемник.ПолучитьЭлементы()[0].УИД;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокСтрокДляКопирования(Форма, Источник)
	СЗ = Новый Массив;
	ВсеТипыПодчиненныхЛистов = Новый Соответствие;
	
	Если Источник.ПолучитьЭлементы().Количество() > 0 Тогда 
		Для Каждого Стр Из Источник.ПолучитьЭлементы() Цикл 
			Если ЗначениеЗаполнено(Стр.ИДНаименования) Тогда 
				ВсеТипыПодчиненныхЛистов.Вставить(Стр.ИДНаименования);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Стр Из Источник.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(Стр.ИДНаименования) Тогда 
				Если ВсеТипыПодчиненныхЛистов[Стр.ИДНаименования] = Неопределено Тогда 
					ВсеТипыПодчиненныхЛистов[Стр.ИДНаименования] = 1;
					СЗ.Добавить(Стр);
				КонецЕсли;
			Иначе
				СЗ.Добавить(Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СЗ;
КонецФункции

Функция ОперацииСНовойСтрокой(НовСтр, Форма)
	ПеренумероватьЭлементы(НовСтр.ПолучитьРодителя());
	НовИд = НовСтр.ПолучитьИдентификатор();
	Если НовИд <> Неопределено Тогда 
		Форма.Элементы.ДеревоСтраниц.ТекущаяСтрока = НовИд;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	Возврат НовИд;
КонецФункции

Функция СкопироватьСтрокуВДеревеСДанными(Форма, Источник, СПодчиненными) 
	Родитель = Источник.ПолучитьРодителя();
	Приемник = Родитель.ПолучитьЭлементы().Добавить();
	СкопироватьСтрокуВДеревеСДаннымиРек(Форма, Источник, Приемник, СПодчиненными);
	Возврат Приемник;
КонецФункции

Процедура СкопироватьСтрокуВДеревеСДаннымиРек(Форма, Источник, Приемник, СПодчиненными)
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Если ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда 
		Приемник.УИД = Новый УникальныйИдентификатор;
		СЗ = Форма.ДанныеМногостраничныхРазделов[Приемник.ИДНаименования];
		Для Каждого Элт Из СЗ Цикл 
			Если Элт.Значение.УИД = Источник.УИД Тогда 
				СтруктураНовСтр = Новый Структура;
				Для Каждого КЗ Из Элт.Значение Цикл 
					СтруктураНовСтр.Вставить(КЗ.Ключ, КЗ.Значение);
				КонецЦикла;
				СтруктураНовСтр.Вставить("УИД", Приемник.УИД);
				СтруктураНовСтр.Вставить("УИДРодителя", ПолучитьУИДРодителя(Приемник));
				СЗ.Добавить(СтруктураНовСтр);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого МногострочнаяЧасть Из Источник.МногострочныеЧасти Цикл
			ДанныеДопСтрок = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[МногострочнаяЧасть.Значение]);
			ОтобранныеСтроки = ДанныеДопСтрок.НайтиСтроки(Новый Структура("УИД", Источник.УИД));
			Для Каждого Стр Из ОтобранныеСтроки Цикл 
				НовСтр = ДанныеДопСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				НовСтр.УИД = Приемник.УИД;
			КонецЦикла;
			Форма.ДанныеДопСтрок[МногострочнаяЧасть.Значение] = ПоместитьВоВременноеХранилище(ДанныеДопСтрок,
				Форма.ДанныеДопСтрок[МногострочнаяЧасть.Значение]);
		КонецЦикла;
	КонецЕсли;
	
	Если СПодчиненными Тогда 
		Для Каждого Стр Из Источник.ПолучитьЭлементы() Цикл 
			НовСтр = Приемник.ПолучитьЭлементы().Добавить();
			СкопироватьСтрокуВДеревеСДаннымиРек(Форма, Стр, НовСтр, СПодчиненными);
		КонецЦикла;
	Иначе
		СтрокиДляКопирования = ПолучитьСписокСтрокДляКопирования(Форма, Источник);
		Для Каждого Стр Из СтрокиДляКопирования Цикл 
			НовСтр = Приемник.ПолучитьЭлементы().Добавить();
			СкопироватьСтрокуВДеревеРек(Форма, Стр, НовСтр);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда
		Приемник.УИД = Приемник.ПолучитьЭлементы()[0].УИД;
	КонецЕсли;
КонецПроцедуры

Функция НайтиЭлементПоУИДВДереве(Элементы, УИД)
	Для Каждого Элт Из Элементы Цикл 
		Рез = НайтиЭлементПоУИДВДереве(Элт.ПолучитьЭлементы(), УИД);
		Если Рез <> Неопределено Тогда 
			Возврат Рез;
		КонецЕсли;
		Если Элт.УИД = УИД Тогда 
			Возврат Элт;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура УдалитьСтруктурыДанных(Форма, СтрокаДляУдаления)
	Для Каждого Стр Из СтрокаДляУдаления.ПолучитьЭлементы() Цикл 
		УдалитьСтруктурыДанных(Форма, Стр);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДляУдаления.ИДНаименования) Тогда
		ДанныеМногостраничнойЧасти = Форма.ДанныеМногостраничныхРазделов[СтрокаДляУдаления.ИДНаименования];
		Для Каждого Стр Из ДанныеМногостраничнойЧасти Цикл 
			Если Стр.Значение.УИД = СтрокаДляУдаления.УИД Тогда 
				ДанныеМногостраничнойЧасти.Удалить(Стр);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СкопироватьСтрокуВДеревеЗначенийРек(СтрокаИсточник, СтрокаПриемник, Форма, УИДТекСтр, Уровень)
	НовУИД = Новый УникальныйИдентификатор;
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	Если Уровень > 0 
		И ЗначениеЗаполнено(СтрокаПриемник.ИДНаименования)
		И Форма.ДанныеМногостраничныхРазделов.Свойство(СтрокаПриемник.ИДНаименования) Тогда 
		
		НовУИД = Новый УникальныйИдентификатор;
		СписокСтраниц = Форма.ДанныеМногостраничныхРазделов[СтрокаПриемник.ИДНаименования];
		СписокСтраниц.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СписокСтраниц[0].Значение));
		СтраницаДляЗаполнения = СписокСтраниц[СписокСтраниц.Количество() - 1].Значение;
		СтрокаПриемник.УИД = НовУИД;
		
		СтраницаДляЗаполнения.УИД = НовУИД;
		СтраницаДляЗаполнения.УИДРодителя = УИДТекСтр;
	Иначе
		НовУИД = УИДТекСтр;
	КонецЕсли;
	
	Для Каждого СтрПодч Из СтрокаИсточник.Строки Цикл 
		НовСтрПодч = СтрокаПриемник.Строки.Добавить();
		СкопироватьСтрокуВДеревеЗначенийРек(СтрПодч, НовСтрПодч, Форма, НовУИД, Уровень + 1);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПолныйПутьВСхемеВыгрузки(Стр)
	ПолныйПуть = Стр.Код;
	СтрРодитель = Стр.Родитель;
	Пока СтрРодитель <> Неопределено Цикл 
		ПолныйПуть = СтрРодитель.Код + "/" + ПолныйПуть;
		СтрРодитель = СтрРодитель.Родитель;
	КонецЦикла;
	Возврат "Файл/" + ПолныйПуть;
КонецФункции

Процедура СформироватьДеревоЗагрузкиРек(ДочерниеУзлы, СтрокиДерева)
	Для Каждого ДочернийУзел Из ДочерниеУзлы Цикл
		Если Не ДочернийУзел.ТипУзла = ТипУзлаDOM.Элемент Тогда 
			Продолжить;
		КонецЕсли;
		НовСтр = СтрокиДерева.Добавить();
		НовСтр.ИмяЭлемента = ДочернийУзел.ИмяУзла;
		НовСтр.ЗначениеЭлемента = ДочернийУзел.ЗначениеУзла;
		Если ЗначениеЗаполнено(ДочернийУзел.ТекстовоеСодержимое) Тогда
			Если ДочернийУзел.ДочерниеУзлы.Количество() = 1
				И ДочернийУзел.ДочерниеУзлы[0].ТипУзла = ТипУзлаDOM.Текст Тогда 
				
				НовСтр.ТипЭлемента = "П";
				НовСтр.ЗначениеЭлемента = ДочернийУзел.ТекстовоеСодержимое;
			Иначе 
				НовСтр.ТипЭлемента = "С";
			КонецЕсли;
		Иначе
			НовСтр.ТипЭлемента = "С";
		КонецЕсли;
		
		Для Каждого Атрибут Из ДочернийУзел.Атрибуты Цикл 
			НовСтрАтр = НовСтр.Строки.Добавить();
			НовСтрАтр.ИмяЭлемента = Атрибут.ИмяУзла;
			НовСтрАтр.ЗначениеЭлемента = Атрибут.ЗначениеУзла;
			НовСтрАтр.ТипЭлемента = "А";
		КонецЦикла;
		
		Если ДочернийУзел.ДочерниеУзлы.Количество() > 0 Тогда 
			СформироватьДеревоЗагрузкиРек(ДочернийУзел.ДочерниеУзлы, НовСтр.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьСоответствиеИдентификаторовСтраницМакетам(Форма, СтрокиДерева, СоответствиеИдентификаторовСтраницМакетам, ИмяОтчета)
	Для Каждого Стр Из СтрокиДерева Цикл
		Если ЗначениеЗаполнено(Стр.ИмяМакета) Тогда 
			СоответствиеИдентификаторовСтраницМакетам.Вставить(Стр.ИДНаименования, ПолучитьМакетТабличногоДокумента(Форма, Стр.ИмяМакета));
		КонецЕсли;
		ПолучитьСоответствиеИдентификаторовСтраницМакетам(Форма, Стр.Строки, СоответствиеИдентификаторовСтраницМакетам, ИмяОтчета);
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьТаблицуДатВВыгрузкеРек(ТекущийПутьВСхемеВыгрузки, СтрокиВСхемеВыгрузки, ТаблицаДатВВыгрузке, СоответствиеМакетовТабличнымДокументам)
	Для Каждого Стр Из СтрокиВСхемеВыгрузки Цикл 
		Если ЗначениеЗаполнено(Стр.Раздел) 
			И ЗначениеЗаполнено(Стр.Ключ)
			И ТипЗнч(СоответствиеМакетовТабличнымДокументам[Стр.Раздел]) = Тип("ТабличныйДокумент") Тогда 
			
			ОблДата = СоответствиеМакетовТабличнымДокументам[Стр.Раздел].Области.Найти(Стр.Ключ);
			Если ТипЗнч(ОблДата) = Тип("ОбластьЯчеекТабличногоДокумента")
				И ОблДата.СодержитЗначение = Истина Тогда 
				
				Если ОблДата.ТипЗначения.СодержитТип(Тип("Дата")) Тогда 
					НовСтр = ТаблицаДатВВыгрузке.Добавить();
					НовСтр.ПутьXML = ТекущийПутьВСхемеВыгрузки + "/" + Стр.Код;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СформироватьТаблицуДатВВыгрузкеРек(ТекущийПутьВСхемеВыгрузки + "/" + Стр.Код, Стр.Строки, ТаблицаДатВВыгрузке, СоответствиеМакетовТабличнымДокументам)
	КонецЦикла;
КонецПроцедуры

Функция СформироватьТаблицуДатВВыгрузке(Форма, СхемаВыгрузки, ДополнительныеПараметры)
	ТаблицаДатВВыгрузке = ПолучитьПустуюТаблицуПутейВВыгрузке();
	ИмяОтчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	ДеревоСтраниц = ДанныеФормыВЗначение(Форма.ДеревоСтраниц, Тип("ДеревоЗначений"));
	СоответствиеИдентификаторовСтраницМакетам = Новый Соответствие;
	ПолучитьСоответствиеИдентификаторовСтраницМакетам(Форма, ДеревоСтраниц.Строки, СоответствиеИдентификаторовСтраницМакетам, ИмяОтчета);
	Если ДополнительныеПараметры.Свойство("ЗаменыИменМногострочныхЧастей")
		И ТипЗнч(ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей) = Тип("Соответствие") Тогда 
		
		Для Каждого КЗ Из ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей Цикл 
			Если СоответствиеИдентификаторовСтраницМакетам[КЗ.Значение] <> Неопределено Тогда 
				 СоответствиеИдентификаторовСтраницМакетам.Вставить(КЗ.Ключ, СоответствиеИдентификаторовСтраницМакетам[КЗ.Значение]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СформироватьТаблицуДатВВыгрузкеРек("Файл", СхемаВыгрузки.Строки, ТаблицаДатВВыгрузке, СоответствиеИдентификаторовСтраницМакетам);
	
	Возврат ТаблицаДатВВыгрузке;
КонецФункции

Процедура ПолучитьВсеУИД(ВсеУИД, Строки)
	Для Каждого Стр Из Строки Цикл 
		ВсеУИД.Вставить(Стр.УИД, Истина);
		ПолучитьВсеУИД(ВсеУИД, Стр.Строки);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьЛишниеМногостраничныеСтраницы(Форма, ДеревоСтраницСтроки)
	КУдалению = Новый Массив;
	СтруктураПоиска = Новый Структура("УИД");
	Для Каждого КЗ Из Форма.ДанныеМногостраничныхРазделов Цикл 
		КУдалению.Очистить();
		Для Каждого Элт Из Форма.ДанныеМногостраничныхРазделов[КЗ.Ключ] Цикл 
			СтруктураПоиска.УИД = Элт.Значение.УИД;
			Если ДеревоСтраницСтроки.НайтиСтроки(СтруктураПоиска, Истина).Количество() = 0 Тогда 
				КУдалению.Добавить(Элт);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элт Из КУдалению Цикл 
			Форма.ДанныеМногостраничныхРазделов[КЗ.Ключ].Удалить(Элт);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьМногострочныеЧастиМножественнойСтраницы(Форма, ДополнительныеПараметры, СтрокаВДереве, УИД, РодительскаяСтрокаДанных, РодительскаяСтрокаДереваВыгрузки)
	Для Каждого МнгСтр Из СтрокаВДереве.МногострочныеЧасти Цикл 
		ИдМнгСтр = МнгСтр.Значение;
		Если ДополнительныеПараметры.Свойство("ЗаменыИменМногострочныхЧастей") Тогда 
			Если ЗначениеЗаполнено(ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[ИдМнгСтр]) Тогда 
				ИдМнгСтр = ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[ИдМнгСтр];
			КонецЕсли;
		КонецЕсли;
		
		ОтбСтроки = РодительскаяСтрокаДереваВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многострочность", ИдМнгСтр, Истина), Истина);
		Если ОтбСтроки.Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		ПутьДоРодительскойСтроки = ПолучитьПолныйПутьВСхемеВыгрузки(РодительскаяСтрокаДереваВыгрузки);
		ПутьДоМногострочнойСтроки = ПолучитьПолныйПутьВСхемеВыгрузки(ОтбСтроки[0]);
		Если Не СтрНачинаетсяС(ПутьДоМногострочнойСтроки, ПутьДоРодительскойСтроки) Тогда 
			Продолжить;
		КонецЕсли;
		ОтносительныйПуть = Сред(ПутьДоМногострочнойСтроки, СтрДлина(ПутьДоРодительскойСтроки) + 2);
		ДельтаПутиРазложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтносительныйПуть, "/", Истина);
		УзелМногострочнойСтраницы = НайтиУзелВДеревеПоПутиРек(РодительскаяСтрокаДанных.Строки, ДельтаПутиРазложение, 0, "ИмяЭлемента");
		Если Не ТипЗнч(УзелМногострочнойСтраницы) = Тип("СтрокаДереваЗначений") Тогда 
			Продолжить;
		КонецЕсли;
		ОтбСтрокиДанных = УзелМногострочнойСтраницы.Родитель.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", УзелМногострочнойСтраницы.ИмяЭлемента), Ложь);
		
		ТЗМнг = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[МнгСтр.Значение]);
		Для Каждого СтрМнг Из ОтбСтрокиДанных Цикл
			НовСтр = ТЗМнг.Добавить();
			НовСтр.УИД = УИД;
			Если СтрМнг.ТипЭлемента = "П" Тогда
				Если ТЗМнг.Колонки.Найти(СтрМнг.ИмяЭлемента) <> Неопределено Тогда 
					НовСтр[СтрМнг.ИмяЭлемента] = СтрМнг.ЗначениеЭлемента;
					
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПутьДоМногострочнойСтроки;
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						НовСтр[СтрМнг.ИмяЭлемента] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрМнг.ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						Форма.ОсобаяОбработкаЭлементов(ПутьДоМногострочнойСтроки, СтрМнг, НовСтр);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрМнг.ТипЭлемента = "С" Тогда
				Для Каждого СтрВДереве Из ОтбСтроки[0].Строки.НайтиСтроки(Новый Структура("Раздел", ИдМнгСтр), Истина) Цикл
					Если ТЗМнг.Колонки.Найти(СтрВДереве.Ключ) = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					СтрЗагружаемоеЗначение = СтрМнг.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", СтрВДереве.Код), Истина);
					Если СтрЗагружаемоеЗначение.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(НовСтр[СтрВДереве.Ключ]) = Тип("Дата") Тогда 
						НовСтр[СтрВДереве.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение[0].ЗначениеЭлемента);
					Иначе
						НовСтр[СтрВДереве.Ключ] = СтрЗагружаемоеЗначение[0].ЗначениеЭлемента;
					КонецЕсли;
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолучитьПолныйПутьВДеревеЗагрузки(СтрЗагружаемоеЗначение[0]);
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						НовСтр[СтрВДереве.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение[0].ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						Форма.ОсобаяОбработкаЭлементов(ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML, СтрЗагружаемоеЗначение[0], НовСтр);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ТЗМнг, Форма.ДанныеДопСтрок[МнгСтр.Значение]);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьМногостраничныеСтраницыРек(Форма, ДополнительныеПараметры, СтрокиКарты, ДеревоСтраницСтроки, УИДРодителя, ТекущаяСтрокаВыгрузки, ПутьВерхнегоУровня)
	Для Каждого СтрокаКарты Из СтрокиКарты Цикл
		СтрокиВДереве = ДеревоСтраницСтроки.НайтиСтроки(Новый Структура("ИДНаименования", СтрокаКарты.ИДНаименования), Истина);
		СтрокаВДереве = СтрокиВДереве[0];
		СтрокиЭталон = ДополнительныеПараметры.ДеревоСтраницЭталон.Строки.НайтиСтроки(Новый Структура("ИДНаименования", СтрокаКарты.ИДНаименования), Истина);
		СтрокаЭталон = СтрокиЭталон[0];
		
		СтрокиВСхемеВыгрузки = ДополнительныеПараметры.СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многостраничность", СтрокаКарты.ИДНаименования, Истина), Истина);
		Если СтрокиВСхемеВыгрузки.Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		ПолныйПутьДоМногострочнойЧасти = ПолучитьПолныйПутьВСхемеВыгрузки(СтрокиВСхемеВыгрузки[0]);
		Если ТекущаяСтрокаВыгрузки = Неопределено Тогда 
			УзелМногострочнойСтраницы = НайтиУзелВДеревеПоПути(ДополнительныеПараметры.ДеревоЗагрузки, ПолныйПутьДоМногострочнойЧасти, "ИмяЭлемента");
		Иначе
			ДельтаПути = Сред(ПолныйПутьДоМногострочнойЧасти, СтрДлина(ПутьВерхнегоУровня) + 1);
			ДельтаПутиРазложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДельтаПути, "/");
			УзелМногострочнойСтраницы = НайтиУзелВДеревеПоПутиРек(ТекущаяСтрокаВыгрузки.Строки, ДельтаПутиРазложение, 0, "ИмяЭлемента");
		КонецЕсли;
		Если ТипЗнч(УзелМногострочнойСтраницы) <> Тип("СтрокаДереваЗначений") Тогда 
			Продолжить;
		КонецЕсли;
		
		МногостраничныеУзлы = УзелМногострочнойСтраницы.Родитель.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", УзелМногострочнойСтраницы.ИмяЭлемента), Ложь);
		СписокСтраниц = Форма.ДанныеМногостраничныхРазделов[СтрокаКарты.ИДНаименования];
		Для Инд = 0 По МногостраничныеУзлы.ВГраница() Цикл 
			УИДТекСтр = Новый УникальныйИдентификатор;
			СписокСтраниц.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СписокСтраниц[0].Значение));
			СтраницаДляЗаполнения = СписокСтраниц[СписокСтраниц.Количество() - 1].Значение;
			СтраницаДляЗаполнения.УИД = УИДТекСтр;
			ДанныеXML = МногостраничныеУзлы[Инд];
			Если СтраницаДляЗаполнения.Свойство("УИДРодителя") Тогда 
				СтраницаДляЗаполнения.УИДРодителя = УИДРодителя;
			КонецЕсли;
			
			Если Инд > 0 Тогда 
				НоваяСтрокаВДереве = СтрокаВДереве.Родитель.Строки.Добавить();
				СкопироватьСтрокуВДеревеЗначенийРек(СтрокаЭталон, НоваяСтрокаВДереве, Форма, УИДТекСтр, 0);
				НоваяСтрокаВДереве.УИД = УИДТекСтр;
				НоваяСтрокаВДереве.Наименование = Лев(СтрокаЭталон.Наименование, СтрДлина(СтрокаЭталон.Наименование) - 1) + Формат((Инд + 1), "ЧГ=0");
				СтрокаВДеревеРек = НоваяСтрокаВДереве;
			Иначе
				СтрокаВДереве.УИД = УИДТекСтр;
				СтрокаВДеревеРек = СтрокаВДереве;
			КонецЕсли;
			
			Если СтрокаВДеревеРек.Многострочность Тогда
				ЗагрузитьМногострочныеЧастиМножественнойСтраницы(Форма, ДополнительныеПараметры, СтрокаВДеревеРек, УИДТекСтр, МногостраничныеУзлы[Инд], СтрокиВСхемеВыгрузки[0]);
			КонецЕсли;
			
			Для Каждого Стр Из ДополнительныеПараметры.СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", СтрокаКарты.ИДНаименования), Истина) Цикл
				ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(Стр);
				ОтносительныйПуть = СтрЗаменить(ПолныйПуть, ПолныйПутьДоМногострочнойЧасти, "");
				Если Не ЗначениеЗаполнено(ОтносительныйПуть) Тогда 
					Продолжить;
				КонецЕсли;
				СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПутиРек(ДанныеXML.Строки, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтносительныйПуть, "/", Истина), 0, "ИмяЭлемента");
				Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") И ЗначениеЗаполнено(Стр.Ключ) Тогда
					Если СтраницаДляЗаполнения.Свойство(Стр.Ключ) Тогда
						Если Стр.Формат = "N" И ТипЗнч(СтраницаДляЗаполнения[Стр.Ключ]) = Тип("Число") Тогда 
							СтраницаДляЗаполнения[Стр.Ключ] = ДополнительныеПараметры.ОписаниеТиповЧисло.ПривестиЗначение(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
						Иначе
							СтраницаДляЗаполнения[Стр.Ключ] = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
						КонецЕсли;
						
						ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
						ОтбСтроки = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
						Если ОтбСтроки.Количество() > 0 Тогда 
							СтраницаДляЗаполнения[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
						КонецЕсли;
						ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
						Если ОтбСтроки.Количество() > 0 Тогда
							Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, СтраницаДляЗаполнения)
						КонецЕсли;
					Иначе
						ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
						ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
						Если ОтбСтроки.Количество() > 0 Тогда
							Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, СтраницаДляЗаполнения)
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаКарты.Строки.Количество() > 0 Тогда 
				ЗагрузитьМногостраничныеСтраницыРек(Форма, ДополнительныеПараметры, СтрокаКарты.Строки, СтрокаВДеревеРек.Строки, СтрокаВДеревеРек.УИД, ДанныеXML, ПолныйПутьДоМногострочнойЧасти + "/");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьСтандартнуюКартуМногостраничныхРазделовРек(Элементы, КартаРазделовСтроки)
	Для Каждого Элемент Из Элементы Цикл
		СтрокиРек = КартаРазделовСтроки;
		Если Элемент.Многостраничность И ЗначениеЗаполнено(Элемент.ИДНаименования) И ЗначениеЗаполнено(Элемент.УИД) Тогда 
			НовСтр = КартаРазделовСтроки.Добавить();
			НовСтр.ИДНаименования = Элемент.ИДНаименования;
			СтрокиРек = НовСтр.Строки;
		КонецЕсли;
		ПолучитьСтандартнуюКартуМногостраничныхРазделовРек(Элемент.ПолучитьЭлементы(), СтрокиРек);
	КонецЦикла;
КонецПроцедуры

Функция ДатаПриемаОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла)
	Сообщения = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО));
	Если Сообщения.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ответ на требование должен быть принят в ФНС';
													|en = 'Ответ на требование должен быть принят в ФНС'"));
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();

	ТранспортноеСообщение = Сообщения[0].Ссылка;
	Вложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(
		ТранспортноеСообщение, 
		Истина, 
		Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент);
	
	ДвДанныеКвитанцииОПриеме = Неопределено;
	Для каждого Вложение Из Вложения Цикл
		Если Вложение.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.xml Тогда
			
			ДвДанныеКвитанцииОПриеме = Вложение.Данные.Получить();
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДвДанныеКвитанцииОПриеме = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ДвДанныеКвитанцииОПриеме.Записать(ВременныйФайл);
	
	ДеревоXML = КонтекстЭДОСервер.ЗагрузитьXMLВДеревоЗначений(ВременныйФайл);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайл);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДатаСтрокой = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,, "ДатаПрин", "А", Истина).Значение;
	_ДатаПрмЭ = КонтекстЭДОСервер.ДатаВремяИзСтроки(ДатаСтрокой);
	Возврат _ДатаПрмЭ;
	
КонецФункции

Процедура НапечататьСтраницуСМногострочнойЧастью(Объект, Листы, СтруктураПараметров, СтраницаДляПечати, МногострочнаяЧасть, ИмяМакета, НомСтр, ИННКПП)
	Попытка
		Если ТипЗнч(ИмяМакета) = Тип("Строка") Тогда 
			МакетПФКеш = Отчеты[Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ТабличныйДокумент") Тогда 
			МакетПФКеш = ИмяМакета;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	НастройкиПечати = ДополнительныеНастройкиПечати();
	ВсегоСтраниц = 0;
	
	Если СтраницаДляПечати.Свойство("УИД") Тогда 
		ТаблицаМногострочнаяЧасть = СтруктураПараметров.ДанныеДопСтрокБД[МногострочнаяЧасть].СкопироватьКолонки();
		Для Каждого Стр Из СтруктураПараметров.ДанныеДопСтрокБД[МногострочнаяЧасть] Цикл 
			Если Стр.УИД = СтраницаДляПечати.УИД Тогда 
				ЗаполнитьЗначенияСвойств(ТаблицаМногострочнаяЧасть.Добавить(), Стр);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаМногострочнаяЧасть = СтруктураПараметров.ДанныеДопСтрокБД[МногострочнаяЧасть];
	КонецЕсли;
		
	СтраницаЗаполнена = Ложь;
	Для Каждого КЗ Из СтраницаДляПечати Цикл 
		Если ТипЗнч(КЗ.Значение) = Тип("УникальныйИдентификатор") 
			Или СтрНайти(КЗ.Ключ, "___") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(КЗ.Значение) Тогда 
			СтраницаЗаполнена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКолонкиДанных = "";
	Для Каждого Кол Из ТаблицаМногострочнаяЧасть.Колонки Цикл 
		Если Кол.Имя = "УИД" Тогда 
			Продолжить;
		КонецЕсли;
		ИмяКолонкиДанных = Кол.Имя;
		Для Каждого Стр Из ТаблицаМногострочнаяЧасть Цикл 
			Если ЗначениеЗаполнено(Стр[Кол.Имя]) Тогда 
				СтраницаЗаполнена = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не СтраницаЗаполнена Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = 0;
	Пока Истина Цикл 
		КоличествоСтрок = КоличествоСтрок + 1;
		Если МакетПФКеш.Области.Найти(ИмяКолонкиДанных + "_" + (КоличествоСтрок+1) + "_1") = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КоличествоСтраниц = Макс(1, 1 + Цел(ТаблицаМногострочнаяЧасть.Количество() / КоличествоСтрок) 
		- ?(ТаблицаМногострочнаяЧасть.Количество() % КоличествоСтрок = 0, 1, 0));
	
	Для Инд = 0 По КоличествоСтраниц - 1 Цикл 
		МакетПФ = Новый ТабличныйДокумент;
		МакетПФ.Вывести(МакетПФКеш);
		
		НомСтр = НомСтр + 1;
		ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
		Если ИННКПП.Свойство("ИНН") Тогда 
			ВывестиСтрокуНаПечать(ИННКПП.ИНН, "ИННШапка", МакетПФ.Области, "-");
		КонецЕсли;
		Если ИННКПП.Свойство("КПП") Тогда 
			ВывестиСтрокуНаПечать(ИННКПП.КПП, "КППШапка", МакетПФ.Области, "-");
		КонецЕсли;
		НапечататьСтруктуруСлужебный(ИННКПП, МакетПФ.Области, НастройкиПечати);
		НапечататьСтруктуруСлужебный(СтраницаДляПечати, МакетПФ.Области, НастройкиПечати);
		
		СтруктураПечатиДопСтрок = Новый Структура;
		Для Каждого Кол Из ТаблицаМногострочнаяЧасть.Колонки Цикл 
			Если Кол.Имя = "УИД" Тогда 
				Продолжить;
			КонецЕсли;
			
			Для Инд2 = 1 По КоличествоСтрок Цикл 
				Если Инд*КоличествоСтрок + Инд2 <= ТаблицаМногострочнаяЧасть.Количество() Тогда 
					СтруктураПечатиДопСтрок.Вставить(Кол.Имя + "_" + Инд2, ТаблицаМногострочнаяЧасть[Инд*КоличествоСтрок + Инд2 - 1][Кол.Имя]);
				Иначе
					СтруктураПечатиДопСтрок.Вставить(Кол.Имя + "_" + Инд2);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		НапечататьСтруктуруСлужебный(СтруктураПечатиДопСтрок, МакетПФ.Области, НастройкиПечати);
		
		ЗаполнитьЗначенияСвойств(МакетПФ.Параметры, СтраницаДляПечати);
		Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				"ТекстовоеПредставлениеДатыПодписи,ФамилияВерх,ИмяВерх,ОтчествоВерх", ",") Цикл 
			
			Если ИННКПП.Свойство(Элт) Тогда
				Обл = МакетПФ.Области.Найти(Элт);
				Если Не Обл = Неопределено Тогда 
					Обл.Текст = ИННКПП[Элт];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПечатнаяФорма = НовыйПустойЛист();
		ПечатнаяФорма.Вывести(МакетПФ);
		ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр, Ложь);
	КонецЦикла;
КонецПроцедуры

Функция СоответствиеПоказателейСтраницыРеквизитамАдреса() 
	Соотв = Новый Структура;
	Соотв.Вставить("ИдентификаторАдресногоОбъекта", "Аддр_ИдНом");
	Соотв.Вставить("КодРегиона", "Аддр_Регион");
	Соотв.Вставить("МуниципальныйРайонВид", "Аддр_МуниципРайонВидКод");
	Соотв.Вставить("МуниципальныйРайон", "Аддр_МуниципРайонНаим");
	Соотв.Вставить("ПоселениеВид", "Аддр_ГородСелПоселенВидКод");
	Соотв.Вставить("Поселение", "Аддр_ГородСелПоселенНаим");
	Соотв.Вставить("НаселенныйПунктВид", "Аддр_НаселенПунВид");
	Соотв.Вставить("НаселенныйПункт", "Аддр_НаселенПунктНаим");
	Соотв.Вставить("ТерриторияТип", "Аддр_ЭлПланСтруктурТип");
	Соотв.Вставить("Территория", "Аддр_ЭлПланСтруктурНаим");
	Соотв.Вставить("УлицаТип", "Аддр_ЭлУлДорСетиТип");
	Соотв.Вставить("Улица", "Аддр_ЭлУлДорСетиНаим");
	Соотв.Вставить("ПомещениеВЗданииТип", "Аддр_ПомещЗданияТип");
	Соотв.Вставить("ПомещениеВЗданииНомер", "Аддр_ПомещЗданияНомер");
	Соотв.Вставить("ПомещениеВКвартиреТип", "Аддр_ПомещКвартирыТип");
	Соотв.Вставить("НомерЗемельногоУчастка", "Аддр_ЗемелУчасток");
	Возврат Соотв;
КонецФункции

Функция ОбрезанноеНазвание(ИсходноеНазвание, ВырезаемаяПодстрока)
	
	ПозицияВырезки = СтрНайти(ВРег(ИсходноеНазвание), ВРег(ВырезаемаяПодстрока));
	
	ОбрезаннаяСтрока = ИсходноеНазвание;
	
	Если ПозицияВырезки > 0 Тогда
		ОбрезаннаяСтрока = Лев(ИсходноеНазвание, ПозицияВырезки - 1)
		                 + Сред(ИсходноеНазвание, ПозицияВырезки + СтрДлина(ВырезаемаяПодстрока));
	КонецЕсли;
	
	Возврат СокрЛП(ОбрезаннаяСтрока);
	
КонецФункции

Функция ПустоеЗначениеПоТипуОбласти(Область)
	Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента")
		И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		И Область.СодержитЗначение = Истина Тогда 
		
		Если Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
			Возврат 0;
		ИначеЕсли Область.ТипЗначения.СодержитТип(Тип("Дата")) Тогда 
			Возврат Дата('00010101000000');
		ИначеЕсли Область.ТипЗначения.СодержитТип(Тип("Булево")) Тогда 
			Возврат Ложь;
		ИначеЕсли Область.ТипЗначения.СодержитТип(Тип("Строка")) Тогда 
			Возврат "";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ТипОбластиИзМакетаСтраницы(Область)
	Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента")
		И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		И Область.СодержитЗначение = Истина Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Число") Тогда 
			Возврат Новый ОписаниеТипов("Число");
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			Возврат Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Возврат Новый ОписаниеТипов("Дата");
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура СпрятатьЭлемент(ЭлементыФормы, ИмяЭлемента)
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Не Элемент = Неопределено Тогда 
		Элемент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСоответствиеМногострочныхЧастейРек(Результат, Строки)
	Для Каждого Стр Из Строки Цикл
		Если ТипЗнч(Стр.МногострочныеЧасти) = Тип("СписокЗначений") 
			И ЗначениеЗаполнено(Стр.ИДНаименования) Тогда 
			Для Каждого Элт Из Стр.МногострочныеЧасти Цикл 
				Результат.Вставить(Элт.Значение, Стр.ИДНаименования);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСоответствиеМногострочныхЧастейРек(Результат, Стр.Строки)
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьХеш(Стр)
	Хеш = СтрЗаменить(НРег(Стр), " ", "");
	Хеш = СтрЗаменить(Хеш, """", "");
	Хеш = СтрЗаменить(Хеш, ",", "");
	Хеш = СтрЗаменить(Хеш, "ё", "е");
	Возврат Хеш;
КонецФункции

Процедура СоздатьРеквизитЦвета(Форма, ИмяРеквизита, ЗначениеРеквизита)
	РеквизитНайден = Ложь;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл 
		Если Реквизит.Имя = ИмяРеквизита Тогда 
			РеквизитНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не РеквизитНайден Тогда 
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Цвет"));
		ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Форма[ИмяРеквизита] = ЗначениеРеквизита;
КонецПроцедуры

Процедура ПреобразованиеСтруктураАдресаЗаписи(СтруктураАдресаЗаписи, Адрес)
	// Иногда вынуждены преобразовывать адрес
	// Когда населенный пункт указывается в полях район вместо поля город
	ГородЗаполнен = ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдресаЗаписи, "Город"));
	РайонЗаполнен = ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдресаЗаписи, "Район"));
	Если Не ГородЗаполнен И РайонЗаполнен Тогда 
		РайонСокращение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдресаЗаписи, "РайонСокращение");
		Если РайонСокращение = "г." Тогда 
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Город", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдресаЗаписи, "Район"));
			СтруктураЗаписи.Вставить("ГородСокращение", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдресаЗаписи, "РайонСокращение"));
			СтруктураЗаписи.Вставить("ГородТипКраткий", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдресаЗаписи, "РайонТипКраткий"));
			СтруктураЗаписи.Вставить("ГородТипПолный", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдресаЗаписи, "РайонТипПолный"));
			ЗаполнитьЗначенияСвойств(СтруктураАдресаЗаписи, СтруктураЗаписи);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НапечататьСтруктуруСлужебный(Данные, Области, НастройкиПечати)
	СимволПрочерк = ?(НастройкиПечати.СПрочерками, "-", " ");
	Для Каждого КЗ Из Данные Цикл
		Если ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда 
			ВывестиСтрокуНаПечать(КЗ.Значение, КЗ.Ключ, Области, СимволПрочерк);
		ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Дата") Тогда 
			ВывестиДатуНаПечать(КЗ.Значение, КЗ.Ключ, Области, СимволПрочерк);
		ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Число") Тогда
			Если НастройкиПечати.СПрочерками Тогда 
				ВывестиЧислоСПрочеркамиНаПечать(КЗ.Значение, КЗ.Ключ, Области, НастройкиПечати);
			Иначе
				ВывестиЧислоНаПечать(КЗ.Значение, КЗ.Ключ, Области);
			КонецЕсли;
		ИначеЕсли КЗ.Значение = Неопределено Тогда 
			ВывестиСтрокуНаПечать("", КЗ.Ключ, Области, СимволПрочерк);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИмяРеквизитаНоваяСсылка()
	
	Возврат "НоваяСсылкаУведомления";
	
КонецФункции

Процедура ВыгрузкаВАрхив(ПараметрыОтчета, АдресХранилища) Экспорт
	Результат = Новый Структура;
	
	Попытка
		ДокОбъект = ПараметрыОтчета.Ссылка.ПолучитьОбъект();
		УникальныйИдентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "УникальныйИдентификатор", Новый УникальныйИдентификатор);
		ПомещатьВАрхив = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ПомещатьВАрхив", Истина);
		Выгрузка = ДокОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
		
		Если ПомещатьВАрхив Тогда 
			ВременныйКаталог = ПолучитьИмяВременногоФайла();
			СоздатьКаталог(ВременныйКаталог);
			ВременныйКаталог = ВременныйКаталог + ПолучитьРазделительПути();
			
			ПотокZipФайла = Новый ПотокВПамяти;
			ЗаписьZipФайла = Новый ЗаписьZipФайла(ПотокZipФайла, , , МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный, МетодШифрованияZIP.Zip20);
			Для Каждого Элт Из Выгрузка Цикл 
				ИмяФайла = Лев(Элт.ИмяФайлаВыгрузки, СтрНайти(Элт.ИмяФайлаВыгрузки, ".", НаправлениеПоиска.СКонца)) + "zip";
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(Элт.АдресФайлаВыгрузки);
				ДвоичныеДанные.Записать(ВременныйКаталог + Элт.ИмяФайлаВыгрузки);
				ЗаписьZipФайла.Добавить(ВременныйКаталог + Элт.ИмяФайлаВыгрузки);
			КонецЦикла;
			ЗаписьZipФайла.Записать();
			
			Результат.Вставить("ДвоичныеДанныеАрхива", ПотокZipФайла.ЗакрытьИПолучитьДвоичныеДанные());
			Результат.Вставить("ИмяФайла", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ИмяФайла", ИмяФайла));
			УдалитьФайлы(ВременныйКаталог);
		КонецЕсли;
		
		Результат.Вставить("Выполнено", Истина);
	Исключение
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		Результат.Вставить("Выполнено", Ложь);
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

#КонецОбласти