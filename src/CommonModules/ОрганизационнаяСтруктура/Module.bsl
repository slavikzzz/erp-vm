
#Область ПрограммныйИнтерфейс

// Возвращает подразделение в структуре предприятия соответствующее организации или подразделению организации.
//
// Параметры:
//	СтруктурнаяЕдиница - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - элемент структуры юридических лиц.
//
// Возвращаемое значение:
//	СправочникСсылка.СтруктураПредприятия - ссылка на найденное подразделение.
//
Функция ПодразделениеВСтруктуреПредприятия(СтруктурнаяЕдиница) Экспорт
	
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", СтруктурнаяЕдиница);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Источник = &Источник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Подразделение = Выборка.Подразделение;		
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

// Возвращает запрос с полями Период, ПозицияШтатногоРасписания, СтруктурноеПодразделение.
//
// Параметры:
//  ТолькоРазрешенные                    - Булево
//  ИмяВТПериодПозицияШтатногоРасписания - Строка
//  ИмяПоляПериод                        - Строка
//  ИмяПоляПозицияШтатногоРасписания     - Строка
//
// Возвращаемое значение:
//  Запрос
//
Функция ЗапросВТМестаПозицийВСтруктуреПредприятия(ТолькоРазрешенные,
	ИмяВТПериодПозицияШтатногоРасписания = "ВТПериодПозицияШтатногоРасписания", ИмяПоляПериод = "Период",
	ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодПозицияШтатногоРасписания.Период КАК Период,
		|	ПериодПозицияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК СтруктурноеПодразделение
		|ПОМЕСТИТЬ ВТМестаПозицийВСтруктуреПредприятия
		|ИЗ
		|	ВТПериодПозицияШтатногоРасписания КАК ПериодПозицияШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК
		|			МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
		|		ПО ПериодПозицияШтатногоРасписания.ДолжностьПоШтатномуРасписанию = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодПозицияШтатногоРасписания", ИмяВТПериодПозицияШтатногоРасписания);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодПозицияШтатногоРасписания.Период",
		"ПериодПозицияШтатногоРасписания." + ИмяПоляПериод);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодПозицияШтатногоРасписания.ПозицияШтатногоРасписания",
		"ПериодПозицияШтатногоРасписания." + ИмяПоляПозицияШтатногоРасписания);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктураПредприятия() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Подразделение,
	|	СтруктураПредприятия.Родитель КАК ПодразделениеРодитель
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	НЕ СтруктураПредприятия.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураПредприятия.Ссылка ИЕРАРХИЯ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Считывает подразделение структуры предприятия, соответствующее позиции штатного расписания.
//
Функция МестоПозицииВСтруктуреПредприятия(Позиция) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МестоПозиции.Подразделение
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|ГДЕ
		|	МестоПозиции.Позиция = &Позиция");
		
	Запрос.УстановитьПараметр("Позиция", Позиция);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выборка.Подразделение;
	
КонецФункции

Функция МестоСотрудниковВСтруктуреПредприятия(ТолькоРазрешенные, СписокСотрудников, ДатаПолученияДанных) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, "МестоВСтруктуреПредприятия", ДатаПолученияДанных);
	
	МестоСотрудниковВСтруктуреПредприятия = Новый Соответствие;
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанные Цикл 
		МестоСотрудниковВСтруктуреПредприятия.Вставить(КадровыеДанныеСотрудника.Сотрудник, КадровыеДанныеСотрудника.МестоВСтруктуреПредприятия);
	КонецЦикла;
	
	Возврат МестоСотрудниковВСтруктуреПредприятия;
	
КонецФункции

Процедура ЗаполнитьДанныеИсточникаВыбранногоПодразделения(ДанныеИсточника, ВыбранноеПодразделение) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеПодразделение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбранноеПодразделение", ВыбранноеПодразделение);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Источник = &ВыбранноеПодразделение";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ДанныеИсточника = Выборка.Ссылка;
	
КонецПроцедуры

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестоПозиции.Подразделение КАК Подразделение,
	|	МестоПозиции.Позиция КАК Позиция
	|ИЗ
	|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
	|ГДЕ
	|	МестоПозиции.Позиция В(&Позиции)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТМестаПозицийВСтруктуреПредприятияПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяТаблицыПозиций = "ВТПозиции", ИмяКолонкиПозиции = "Позиция") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПозиций.Позиция КАК Позиция,
	|	МестоПозиции.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТМестаПозицийВСтруктуреПредприятия
	|ИЗ
	|	#ТаблицаПозиций КАК ТаблицаПозиций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
	|		ПО ТаблицаПозиций.Позиция = МестоПозиции.Позиция";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПозиций", ИмяТаблицыПозиций);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаПозиций.Позиция", "ТаблицаПозиций." + ИмяКолонкиПозиции);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТПозицииПодразделений(МенеджерВременныхТаблиц, ИмяФильтра) Экспорт

	Запрос = ЗапросВТПозицииПодразделений(ИмяФильтра);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

Функция ПозицииПодразделений(Подразделения) Экспорт

	Если ТипЗнч(Подразделения) <> Тип("Массив") Тогда
		МассивПодразделений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделения);
	Иначе
		МассивПодразделений = Подразделения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделения
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В(&МассивПодразделений)";
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	Запрос.Выполнить();
	
	СоздатьВТПозицииПодразделений(Запрос.МенеджерВременныхТаблиц, "ВТПодразделения");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПозицииПодразделений.Подразделение КАК Подразделение,
		|	ВТПозицииПодразделений.Позиция КАК Позиция
		|ИЗ
		|	ВТПозицииПодразделений КАК ВТПозицииПодразделений";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПодчиненныеПодразделения(МассивПодразделенийУзла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктураПредприятия.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивПодразделенийУзла);
	
	МассивДопустимыхЗначений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Возврат МассивДопустимыхЗначений;
	
КонецФункции

// Вышестоящие подразделения.
// 
// Параметры:
//  Поздразделения - Массив из СправочникСсылка.СтруктураПредприятия
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Вышестоящие подразделения:
//    * Подразделение - СправочникСсылка.СтруктураПредприятия - запрашиваемое подразделение
//    * ВышестоящееПодразделение - СправочникСсылка.СтруктураПредприятия - вышестоящее подразделение
//    * Уровень - Число - дистанция по иерархии, где 1 - это непосредственный родитель, 2 - родитель родителя и т.д.
Функция ВышестоящиеПодразделения(Поздразделения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Подразделения", Поздразделения);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подчиненность.СтруктурнаяЕдиница КАК Подразделение,
		|	Подчиненность.ВышестоящаяСтруктурнаяЕдиница КАК ВышестоящееПодразделение,
		|	Подчиненность.Уровень КАК Уровень
		|ИЗ
		|	РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК Подчиненность
		|ГДЕ
		|	Подчиненность.СтруктурнаяЕдиница В(&Подразделения)
		|	И Подчиненность.Уровень > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подчиненность.СтруктурнаяЕдиница,
		|	Подчиненность.Уровень";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу значений - соответствие подразделений в структуре предприятия для переданным подразделениям организации.
//
// Параметры:
//	ПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций, Массив (СправочникСсылка.ПодразделенияОрганизаций) - подразделение или массив подразделений.
//
// Возвращаемое значение:
//	ТаблицаЗначений, с колонками
//		* Источник - СправочникСсылка.ПодразделенияОрганизаций - регламентированное подразделение.
//		* Подразделение - СправочникСсылка.СтруктураПредприятия - соответствующее ему управленческое подразделение.
//
Функция ПодразделенияВСтруктуреПредприятия(ПодразделенияОрганизации) Экспорт

	СоответствиеПодразделений = Новый Соответствие;
	
	Если ТипЗнч(ПодразделенияОрганизации) = Тип("Массив") Тогда
		МассивПараметр = ПодразделенияОрганизации;
	Иначе
		МассивПараметр = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодразделенияОрганизации);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Источник КАК Источник,
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Источник В(&МассивИсточников)";
	Запрос.УстановитьПараметр("МассивИсточников", МассивПараметр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#Область УправлениеОтборамиВФормахСДинамическимСписком

Процедура УстановитьПараметрыВыбораУправленческойОрганизацииПоЭлементу(Форма, ЭлементФормы) Экспорт
	
	ПараметрВыбора = Новый ПараметрВыбора("ПоказыватьУправленческуюОрганизацию", Истина);
	
	ПараметрыВыбора = Новый Массив(ЭлементФормы.ПараметрыВыбора);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	ЭлементФормы.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораУправленческойОрганизации(Форма, СоздатьЭлементы = Истина) Экспорт
	
	Если СоздатьЭлементы Тогда
		Форма.Элементы[Форма.НаименованиеРеквизитаФормыДинамическийСписок].СоздатьЭлементыФормыПользовательскихНастроек();
	КонецЕсли;
	
	ЭлементФормы = ЭлементФормыПользовательскийОтборПоОрганизации(Форма.Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки, Форма.ИмяПоляОрганизация);
	Если ЭлементФормы <> Неопределено Тогда
		УстановитьПараметрыВыбораУправленческойОрганизацииПоЭлементу(Форма, ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтатноеРасписание

Процедура ПриСозданииФормыПозицииШтатногоРасписания(Форма) Экспорт
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем реквизит места в структуре предприятия.
	ОписаниеТипов = Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия");
	РеквизитФормы = Новый РеквизитФормы("МестоВСтруктуреПредприятия", ОписаниеТипов, , , Истина);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	// Добавляем поле ввода.
	Элементы = Форма.Элементы;
	Если Элементы.Найти("МестоВСтруктуреПредприятия") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле = Элементы.Добавить("МестоВСтруктуреПредприятия", Тип("ПолеФормы"), Элементы.МестоВСтруктуреПредприятияГруппа);
	Поле.Заголовок = НСтр("ru = 'Место в стр-ре предприятия';
							|en = 'Place in the enterprise structure'");
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.ПутьКДанным = "МестоВСтруктуреПредприятия.Подразделение";
	Поле.УстановитьДействие("ПриИзменении", "Подключаемый_МестоВСтруктуреПредприятияПриИзменении");
	
КонецПроцедуры

Процедура ПриПолученииДанныхФормыПозицииШтатногоРасписания(Форма, ПозицияСсылка, ЗначениеКопирования) Экспорт
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	// Считываем место в структуре предприятия из регистра сведений в реквизит формы.
	МенеджерЗаписи = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = ПозицияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Отбор = Новый Структура("Позиция", ЗначениеКопирования);
		Выборка = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда 
			МенеджерЗаписи.Подразделение = Выборка.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "МестоВСтруктуреПредприятия");
	
КонецПроцедуры

Процедура ПриЗаписиФормыПозицииШтатногоРасписания(Форма, ТекущийОбъект) Экспорт
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	// Записываем данные из реквизита формы в регистр сведений.
	НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Позиция.Установить(ТекущийОбъект.Ссылка);
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Форма.МестоВСтруктуреПредприятия);
	Запись.Позиция = ТекущийОбъект.Ссылка;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриПолученииБлокируемыхРеквизитов(БлокируемыеРеквизиты) Экспорт
	
	БлокируемыеРеквизиты.Добавить("МестоВСтруктуреПредприятия");
	
КонецПроцедуры

Процедура ДополнитьДанныеПозицииШтатногоРасписания(ДанныеПозиции, ПозицияШтатногоРасписания) Экспорт
	
	ДанныеПозиции.Вставить("МестоВСтруктуреПредприятия");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписание.Ссылка,
		|	МестоПозиции.Подразделение КАК МестоВСтруктуреПредприятия
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|		ПО (МестоПозиции.Позиция = ШтатноеРасписание.Ссылка)
		|			И (ШтатноеРасписание.Ссылка = &Позиция)");
		
	Запрос.УстановитьПараметр("Позиция", ПозицияШтатногоРасписания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеПозиции.МестоВСтруктуреПредприятия = Выборка.МестоВСтруктуреПредприятия;
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписания(Форма, СозданиеНовой) Экспорт 
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"АвтоОтметкаНезаполненного",
		Ложь);
	
	Если СозданиеНовой Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Владелец",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Владелец) И Объект.Владелец <> УправленческаяОрганизация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Подразделение));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(Форма.МестоВСтруктуреПредприятия.Подразделение, Объект.Подразделение));
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписанияПриВеденииИстории(Форма) Экспорт
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(Форма.МестоВСтруктуреПредприятия.Подразделение, Объект.Подразделение));
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если Объект.Владелец <> УправленческаяОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"АвтоОтметкаНезаполненного",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Должность",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Должность));
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписанияВнешниеДанные(Форма) Экспорт
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(Форма.МестоВСтруктуреПредприятия.Подразделение, Объект.Подразделение));
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Владелец");
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если Организация <> УправленческаяОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Подразделение));
		
КонецПроцедуры

Процедура ШтатноеРасписаниеФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт 
	
	Форма.СтруктураПредприятияСписок.ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	СтруктураПредприятия.ВерсияДанных КАК ВерсияДанных,
		|	СтруктураПредприятия.ПометкаУдаления КАК ПометкаУдаления,
		|	СтруктураПредприятия.Родитель КАК Родитель,
		|	СтруктураПредприятия.Код КАК Код,
		|	СтруктураПредприятия.Наименование КАК Наименование,
		|	СтруктураПредприятия.Источник КАК Источник,
		|	СтруктураПредприятия.СоответствуетСтруктуреЮридическихЛиц КАК СоответствуетСтруктуреЮридическихЛиц,
		|	СтруктураПредприятия.Предопределенный КАК Предопределенный,
		|	СтруктураПредприятия.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|{ГДЕ
		|	(СтруктураПредприятия.Ссылка В
		|			(ВЫБРАТЬ
		|				ПодчиненностьСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|			ИЗ
		|				РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК ПодчиненностьСтруктурныхЕдиниц
		|			ГДЕ
		|				ПодчиненностьСтруктурныхЕдиниц.ВышестоящаяСтруктурнаяЕдиница В (&СтруктурнаяЕдиница)))}";
	
	ДобавитьПанельОтбораШтатногоРасписанияПоСтруктуреПредприятия(Форма, Отказ, СтандартнаяОбработка);
	ДобавитьКомандуСозданияУправленческойПозицииВСпискеШтатногоРасписания(Форма, Отказ, СтандартнаяОбработка);
	ДобавитьМестоВСтруктуреПредприятияВФормуСпискаШтатногоРасписания(Форма, "СправочникШтатноеРасписание");
	
КонецПроцедуры

Процедура ПриПолученииВнешнихДанныхПозицииШтатногоРасписания(Форма, ДанныеПозиции) Экспорт
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = ДанныеПозиции.ПозицияШтатногоРасписания;
	МенеджерЗаписи.Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "МестоВСтруктуреПредприятия");
	
КонецПроцедуры

Процедура ЗаполнитьМестоВСтруктуреПредприятияПоДаннымФормы(Форма, ДанныеПозиции) Экспорт
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции.МестоВСтруктуреПредприятия = Форма.МестоВСтруктуреПредприятия.Подразделение;
		
КонецПроцедуры

Процедура ИзменитьПроверяемыеРеквизитыШтатногоРасписания(ПроверяемыеРеквизиты) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Подразделение");
	
КонецПроцедуры

Процедура ПриПроведенииДокументовИзмененияШтатногоРасписания(Объект) Экспорт 
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	СведенияОНаименованиях = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("СведенияОНаименованиях", СведенияОНаименованиях);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПозицииШтатногоРасписания", Объект.Позиции);
	Запрос.УстановитьПараметр("ИзменитьОрганизацию", Объект.Организация <> УправленческаяОрганизация);
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПозицииШтатногоРасписания.Позиция,
		|	ПозицииШтатногоРасписания.ИдентификаторСтрокиПозиции,
		|	ПозицииШтатногоРасписания.Должность,
		|	ПозицииШтатногоРасписания.Подразделение,
		|	ПозицииШтатногоРасписания.МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	&ПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Позиции.Позиция,
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.Должность,
		|	Позиции.Подразделение,
		|	Позиции.МестоВСтруктуреПредприятия
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ПО Позиции.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
		|ГДЕ
		|	(Позиции.Позиция.Владелец = &УправленческаяОрганизация
		|				И &ИзменитьОрганизацию
		|			ИЛИ Позиции.Позиция.Должность <> Позиции.Должность
		|			ИЛИ Позиции.Позиция.Подразделение <> Позиции.Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Позиции.Позиция,
		|	Позиции.Позиция.Наименование КАК Наименование,
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.Должность,
		|	Позиции.МестоВСтруктуреПредприятия
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ПО Позиции.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
		|ГДЕ
		|	ЕСТЬNULL(МестоПозицииВСтруктуреПредприятия.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) <> Позиции.МестоВСтруктуреПредприятия";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
		ПозицияОбъект.Владелец = Объект.Организация;
		ПозицияОбъект.Должность = Выборка.Должность;
		ПозицияОбъект.Подразделение = Выборка.Подразделение;
		
		НаименованиеПозиции = "";
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда 
			НаименованиеПозиции = СведенияОНаименованиях.Получить(Выборка.ИдентификаторСтрокиПозиции);
			СведенияОНаименованиях.Удалить(Выборка.ИдентификаторСтрокиПозиции);
		ИначеЕсли ЗначениеЗаполнено(Выборка.МестоВСтруктуреПредприятия) Тогда  
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
			ДополнительныеПараметры.Вставить("МестоВСтруктуреПредприятия", Выборка.МестоВСтруктуреПредприятия);
			ДополнительныеПараметры.Вставить("ПолноеНаименованиеДолжности", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияОбъект.Должность, "НаименованиеДляЗаписейОТрудовойДеятельности"));
			ДополнительныеПараметры.Вставить("ПолноеНаименованиеПодразделения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияОбъект.Подразделение, "НаименованиеДляЗаписейОТрудовойДеятельности"));
				
			НаименованиеПозиции = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				ПозицияОбъект.Подразделение,
				ПозицияОбъект.Должность,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПозиции.Наименование) Тогда 
			ПозицияОбъект.Наименование = НаименованиеПозиции.Наименование;
			ПозицияОбъект.НаименованиеПолное = НаименованиеПозиции.НаименованиеПолное;
		КонецЕсли;
		
		ПозицияОбъект.Записать();
		
	КонецЦикла;	
		
	Выборка = РезультатыЗапроса[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Позиция = Выборка.Позиция;
		НоваяЗапись.Подразделение = Выборка.МестоВСтруктуреПредприятия;
		
		НаименованиеПозиции = "";
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда 
			НаименованиеПозиции = СведенияОНаименованиях.Получить(Выборка.ИдентификаторСтрокиПозиции);
			СведенияОНаименованиях.Удалить(Выборка.ИдентификаторСтрокиПозиции);
		ИначеЕсли ЗначениеЗаполнено(Выборка.МестоВСтруктуреПредприятия) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
			ДополнительныеПараметры.Вставить("МестоВСтруктуреПредприятия", Выборка.МестоВСтруктуреПредприятия);
			ДополнительныеПараметры.Вставить("ПолноеНаименованиеДолжности", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Должность, "НаименованиеДляЗаписейОТрудовойДеятельности"));
			
			НаименованиеПозиции = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				НоваяЗапись.Подразделение,
				Выборка.Должность,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПозиции) И НаименованиеПозиции.Наименование <> Выборка.Наименование Тогда 
			ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
			ПозицияОбъект.Наименование = НаименованиеПозиции.Наименование;
			ПозицияОбъект.НаименованиеПолное = НаименованиеПозиции.НаименованиеПолное;
			ПозицияОбъект.Записать();
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьФормуДокументовИзмененияШтатногоРасписания(Форма) Экспорт 
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "ПодборУправленческойПозиции";
	Элементы = Форма.Элементы;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Подбор';
										|en = 'Select'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.Позиции.КоманднаяПанель);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти("ПозицииМестоВСтруктуреПредприятия") = Неопределено Тогда
		ПолеПодразделение = Элементы.Добавить("ПозицииМестоВСтруктуреПредприятия", Тип("ПолеФормы"), Элементы.ПодразделениеДолжностьГруппа);
		ПолеПодразделение.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПодразделение.ПутьКДанным = "Объект.Позиции.МестоВСтруктуреПредприятия";
		ПолеПодразделение.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриЗаписи(ПозицияОбъект, Отказ) Экспорт
	
	Если ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПозицияОбъект.ГруппаПозицийПодразделения Тогда
		Возврат;
	КонецЕсли;

	ОбновитьМестаПозицийШтатногоРасписанияПоСтруктуреЮридическихЛиц(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПозицияОбъект.Ссылка));
	
КонецПроцедуры

Процедура ОбновитьМестаПозицийШтатногоРасписанияПоСтруктуреЮридическихЛиц(Позиции = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Позиция,
		|	МАКСИМУМ(СтруктураПредприятия.Ссылка) КАК МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ ВТМестаВСтруктуреПредприятия
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = ШтатноеРасписание.Подразделение)
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (&ОтборПозиций)
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтатноеРасписание.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаПозиций.Позиция КАК Позиция,
		|	МестаПозиций.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
		|ИЗ
		|	ВТМестаВСтруктуреПредприятия КАК МестаПозиций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК СохраненныеМеста
		|		ПО (СохраненныеМеста.Позиция = МестаПозиций.Позиция)
		|			И (СохраненныеМеста.Подразделение = МестаПозиций.МестоВСтруктуреПредприятия)
		|ГДЕ
		|	СохраненныеМеста.Подразделение ЕСТЬ NULL";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ОтборПозиций", 
		?(Позиции = Неопределено, "ИСТИНА", "ШтатноеРасписание.Ссылка В (&Позиции)"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Позиции <> Неопределено Тогда
		ИсточникДляБлокировки = Новый ТаблицаЗначений;
		ИсточникДляБлокировки.Колонки.Добавить("Позиция");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ИсточникДляБлокировки, Позиции, "Позиция");
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ШтатноеРасписание");
	Если Позиции <> Неопределено Тогда
		ЭлементБлокировкиДанных.ИсточникДанных = ИсточникДляБлокировки;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Ссылка", "Позиция");
	КонецЕсли;
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия");
	Если Позиции <> Неопределено Тогда
		ЭлементБлокировкиДанных.ИсточникДанных = ИсточникДляБлокировки;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Позиция", "Позиция");
	КонецЕсли;
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Позиция = Выборка.Позиция;
		НоваяЗапись.Подразделение = Выборка.МестоВСтруктуреПредприятия;
		
		НаборЗаписей.Записать();
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УточнитьЗапросДанныхВыбораСправочникаШтатноеРасписание(Запрос, Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("МестоВСтруктуреПредприятия") Тогда
		
		Если ЗначениеЗаполнено(Параметры.Отбор.МестоВСтруктуреПредприятия) Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ШтатноеРасписание КАК ШтатноеРасписание",
				"Справочник.ШтатноеРасписание КАК ШтатноеРасписание
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
					|	ПО ШтатноеРасписание.Ссылка = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция");
			
			Запрос.Текст = Запрос.Текст + "
				|	И ЕСТЬNULL(МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) В (
				|		ВЫБРАТЬ
				|			СтруктурнаяЕдиница
				|		ИЗ
				|			РегистрСведений.ПодчиненностьСтруктурныхЕдиниц
				|		ГДЕ
				|			ВышестоящаяСтруктурнаяЕдиница В (&МестоВСтруктуреПредприятия))";
			
			Запрос.УстановитьПараметр("МестоВСтруктуреПредприятия", Параметры.Отбор.МестоВСтруктуреПредприятия);
			
		КонецЕсли;
		
		Параметры.Отбор.Удалить("МестоВСтруктуреПредприятия");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИспользованиеВРегламентированномУчете

Функция СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Экспорт
	
	Используется = Ложь;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ОпределитьИспользованиеСтруктурыПредприятияДляОтраженияВРегламентированномУчете(Используется);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ОпределитьИспользованиеСтруктурыПредприятияДляОтраженияВРегламентированномУчете(Используется);
	КонецЕсли;

	Возврат Используется;
	
КонецФункции

Процедура ДополнитьФормуДокументаОтражениеЗарплатыВБухучете(Форма) Экспорт 
	
	Если Не СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = "НачисленнаяЗарплатаИВзносыМестоВСтруктуреПредприятия";
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
	
		Родитель = Форма.Элементы.Найти("НачисленнаяЗарплатаИВзносы");
		СледующийЭлемент = Форма.Элементы.Найти("НачисленнаяЗарплатаИВзносыВидОперации");
		
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.НачисленнаяЗарплатаИВзносы.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия';
												|en = 'Place in the enterprise structure'");
		
	КонецЕсли;
		
	ИмяЭлемента = "УдержаннаяЗарплатаМестоВСтруктуреПредприятия";
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
	
		Родитель = Форма.Элементы.Найти("УдержаннаяЗарплата");
		СледующийЭлемент = Форма.Элементы.Найти("УдержаннаяЗарплатаВидОперации");
		
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.УдержаннаяЗарплата.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия';
												|en = 'Place in the enterprise structure'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеДокументаМестомВСтруктуреПредприятия(ДанныеДокумента, ИменаТаблиц) Экспорт 
	
	Если Не СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Тогда 
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблиц);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НомерТаблицы = 1;
	ИсходныеДанныеТекст = "";
	СотрудникиПериодыТекст = "";
	
	Для Каждого КлючИЗначение Из ДанныеДокумента Цикл 
		
		Если СписокТаблиц.Найти(КлючИЗначение.Ключ) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = "ТаблицаДокумента" + НомерТаблицы;
		ИмяВременнойТаблицы = "ВТТаблицаДокумента" + НомерТаблицы;
		
		Запрос.УстановитьПараметр(ИмяТаблицы, КлючИЗначение.Значение);
		
		Если КлючИЗначение.Ключ = "УдержаннаяЗарплата" Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ТаблицаДокумента.Сотрудник КАК Сотрудник,
			               |	ТаблицаДокумента.ДатаНачала КАК Период
			               |ПОМЕСТИТЬ ВТПредварительнаяТаблицаДокумента
			               |ИЗ
			               |	&ИмяТаблицы КАК ТаблицаДокумента
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТаблицаДокумента.Сотрудник КАК Сотрудник,
			               |	ТаблицаДокумента.Период КАК Период
			               |ПОМЕСТИТЬ ВТТаблицаДокумента
			               |ИЗ
			               |	ВТПредварительнаяТаблицаДокумента КАК ТаблицаДокумента
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	ТаблицаДокумента.Сотрудник,
			               |	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ТаблицаДокумента.Период, МЕСЯЦ), ДЕНЬ)
			               |ИЗ
			               |	ВТПредварительнаяТаблицаДокумента КАК ТаблицаДокумента";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ТаблицаДокумента.Сотрудник КАК Сотрудник,
			               |	ТаблицаДокумента.ДатаНачала КАК Период
			               |ПОМЕСТИТЬ ВТТаблицаДокумента
			               |ИЗ
			               |	&ИмяТаблицы КАК ТаблицаДокумента";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаДокумента", ИмяВременнойТаблицы);
		
		РазделительЗапросов = ?(НомерТаблицы = 1, "", ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИсходныеДанныеТекст = ИсходныеДанныеТекст + РазделительЗапросов + ТекстЗапроса;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТаблицаДокумента.Сотрудник,
		               |	ТаблицаДокумента.Период
		               |ПОМЕСТИТЬ ВТСотрудникиПериоды
		               |ИЗ
		               |	#ВТТаблицаДокумента КАК ТаблицаДокумента";
					   
		Если НомерТаблицы <> 1 Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТСотрудникиПериоды", "");
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТТаблицаДокумента", ИмяВременнойТаблицы);
		
		ТекстОбъединить = "
		                  |ОБЪЕДИНИТЬ
		                  |";

		Если НомерТаблицы = 1 Тогда 
			ТекстОбъединить = "";
		КонецЕсли;
		
		СотрудникиПериодыТекст = СотрудникиПериодыТекст + ТекстОбъединить + ТекстЗапроса;
		
		НомерТаблицы = НомерТаблицы + 1;
		
	КонецЦикла;
	
	Если ИсходныеДанныеТекст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ИсходныеДанныеТекст, СотрудникиПериодыТекст);
	
	Запрос.Текст = ИсходныеДанныеТекст;
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "МестоВСтруктуреПредприятия";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыеДанныеСотрудников.Сотрудник,
	               |	КадровыеДанныеСотрудников.Период,
	               |	КадровыеДанныеСотрудников.МестоВСтруктуреПредприятия
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
				   
	МестоВСтруктуреПредприятияСотрудников = Запрос.Выполнить().Выгрузить();
	МестоВСтруктуреПредприятияСотрудников.Индексы.Добавить("Сотрудник,Период");
	
	ТипСтруктураПредприятия = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	
	Для Каждого КлючИЗначение Из ДанныеДокумента Цикл 
		
		Если СписокТаблиц.Найти(КлючИЗначение.Ключ) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТаблицаДокумента = КлючИЗначение.Значение;
		Если ТаблицаДокумента.Колонки.Найти("МестоВСтруктуреПредприятия") = Неопределено Тогда 
			ТаблицаДокумента.Колонки.Добавить("МестоВСтруктуреПредприятия", ТипСтруктураПредприятия);
		КонецЕсли;
		
		ЭтоУдержаннаяЗарплата = КлючИЗначение.Ключ = "УдержаннаяЗарплата";
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл 
			Отбор = Новый Структура("Сотрудник,Период", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.ДатаНачала);
			НайденныеСтроки = МестоВСтруктуреПредприятияСотрудников.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаТаблицы.МестоВСтруктуреПредприятия = НайденныеСтроки[0].МестоВСтруктуреПредприятия;
			КонецЕсли;
			Если ЭтоУдержаннаяЗарплата И Не ЗначениеЗаполнено(СтрокаТаблицы.МестоВСтруктуреПредприятия) Тогда
				Отбор.Период = НачалоДня(КонецМесяца(СтрокаТаблицы.ДатаНачала));
				НайденныеСтроки = МестоВСтруктуреПредприятияСотрудников.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда 
					СтрокаТаблицы.МестоВСтруктуреПредприятия = НайденныеСтроки[0].МестоВСтруктуреПредприятия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьФормуДокументаНачислениеОценочныхОбязательствПоОтпускам(Форма) Экспорт 
	
	Если Не СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = "ОценочныеОбязательстваМестоВСтруктуреПредприятия";
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
		Родитель = Форма.Элементы.Найти("ОценочныеОбязательства");
		СледующийЭлемент = Форма.Элементы.Найти("ОценочныеОбязательстваПодразделение");
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.ОценочныеОбязательства.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия';
												|en = 'Place in the enterprise structure'");
	КонецЕсли;
	
	ИмяЭлемента = "ОценочныеОбязательстваПоСотрудникамМестоВСтруктуреПредприятия";
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
		Родитель = Форма.Элементы.Найти("ОценочныеОбязательстваПоСотрудникам");
		СледующийЭлемент = Форма.Элементы.Найти("ОценочныеОбязательстваПоСотрудникамПодразделение");
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.ОценочныеОбязательстваПоСотрудникам.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия';
												|en = 'Place in the enterprise structure'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуЗначенийМестомВСтруктуреПредприятия(ТаблицаСДанными) Экспорт
	
	МестоВСтруктуреПредприятияСотрудников = КадровыйУчет.КадровыеДанныеСотрудниковПоТаблицеЗначений(
		Ложь, 
		ТаблицаСДанными, 
		"МестоВСтруктуреПредприятия");
	
	Для Каждого СтрокаТаблицы Из ТаблицаСДанными Цикл 
		Отбор = Новый Структура("Сотрудник,Период", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Период);
		НайденныеСтроки = МестоВСтруктуреПредприятияСотрудников.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			СтрокаТаблицы.МестоВСтруктуреПредприятия = НайденныеСтроки[0].МестоВСтруктуреПредприятия;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьФормуДокументаСтатистикаПерсонала(Форма) Экспорт 
	
	Если Не СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = "ПоказателиМестоВСтруктуреПредприятия";
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
	
		Родитель = Форма.Элементы.Найти("Показатели");
		СледующийЭлемент = Форма.Элементы.Найти("ГруппаСреднесписочнаяЧисленность");
		
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.Показатели.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия';
												|en = 'Place in the enterprise structure'");
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ВариантыОтчетов

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура, "ЮридическаяСтруктура");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура, "УправленческаяСтруктура");
	Вариант.ФункциональныеОпции.Добавить("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4fd-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.СтруктураПредприятия);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.СтруктураПредприятия, Истина);
	
КонецПроцедуры

Процедура ДополнитьОписаниеПрофиля(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения");
	
КонецПроцедуры

// Обслуживание подсистемы УправлениеДоступом
// см. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
//
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	// Структура предприятия.
	Если ВидыДоступа.Найти("Подразделения", "Имя") = Неопределено Тогда
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя = "Подразделения";
		ВидДоступа.Представление = НСтр("ru = 'Структура предприятия';
										|en = 'Business units'");
		ВидДоступа.ТипЗначений = Тип("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование) Экспорт
	
	Если ИмяВидаДоступа = "Подразделения" Тогда
		Использование = Константы.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы.Получить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Устанавливает использование структуры предприятия.
// 
// Параметры:
// 	СоответствуетСтруктуреЮридическихЛиц - Булево - устанавливаемое положение настройки.
//
Процедура УстановитьИспользованиеСтруктурыПредприятия(СоответствуетСтруктуреЮридическихЛиц) Экспорт
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(Не СоответствуетСтруктуреЮридическихЛиц);
КонецПроцедуры

// Возвращает соответствует ли структура предприятия структуре юридических лиц
//
// Возвращаемое значение:
//	Булево - ИСТИНА, если структура соответствует структуре юридических лиц
//		Иначе возвращает ЛОЖЬ
//
Функция СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц() Экспорт
	
	Возврат Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
КонецФункции

Процедура ЗарегистрироватьИзменениеКадровойИсторииПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Возврат;
	КонецЕсли;
	МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
	
	Если Не МодульСинхронизацияДанных.ПринадлежностьФизическихЛицПоПодразделениямЗаполнена() Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделенияНовые = Новый Массив;
	ФизическиеЛицаНовые = Новый Массив;
	ПодразделенияУтраченные = Новый Массив;
	ФизическиеЛицаУтраченные = Новый Массив;
	
	ИзменившиесяДанные = Источник.ТаблицаИзменившихсяДанныхНабора();
	
	Позиции = ИзменившиесяДанные.ВыгрузитьКолонку("НовоеЗначениеДолжностьПоШтатномуРасписанию");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Позиции, ИзменившиесяДанные.ВыгрузитьКолонку("СтароеЗначениеДолжностьПоШтатномуРасписанию"), Истина);
	МестаПозицийВСтруктуреПредприятия = МестаПозицийВСтруктуреПредприятия(Позиции);
	МестаПозицийВСтруктуреПредприятия.Индексы.Добавить("Позиция");
	
	// Анализируем изменения того, что влияет на принадлежность физического лица к структурным подразделениям: позиции.
	ОтборСтрок = Новый Структура("Позиция");
	Для Каждого СтрокаТаблицы Из ИзменившиесяДанные Цикл
		Если СтрокаТаблицы["Добавление"] = Истина Или СтрокаТаблицы["ИзменилсяРесурсДолжностьПоШтатномуРасписанию"] = Истина Тогда
			ОтборСтрок.Позиция = СтрокаТаблицы.НовоеЗначениеДолжностьПоШтатномуРасписанию;
			НайденныеСтроки = МестаПозицийВСтруктуреПредприятия.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Подразделение = НайденныеСтроки[0].Подразделение;
				ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(ПодразделенияНовые, Подразделение);
				ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(ФизическиеЛицаНовые, СтрокаТаблицы.ФизическоеЛицо);
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы["Удаление"] = Истина Или СтрокаТаблицы["ИзменилсяРесурсДолжностьПоШтатномуРасписанию"] = Истина Тогда
			ОтборСтрок.Позиция = СтрокаТаблицы.СтароеЗначениеДолжностьПоШтатномуРасписанию;
			НайденныеСтроки = МестаПозицийВСтруктуреПредприятия.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Подразделение = НайденныеСтроки[0].Подразделение;
				ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(ПодразделенияУтраченные, Подразделение);
				ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(ФизическиеЛицаУтраченные, СтрокаТаблицы.ФизическоеЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МодульСинхронизацияДанных.ЗарегистрироватьПринадлежностьФизическихЛиц(
		ПодразделенияНовые, ФизическиеЛицаНовые,
		МодульСинхронизацияДанных.МетаданныеРегистраСведенийПодразделенийФизическихЛиц(), "Подразделение");
	МодульСинхронизацияДанных.ЗарегистрироватьУтраченныхФизическихЛиц(
		ПодразделенияУтраченные, ФизическиеЛицаУтраченные,
		МодульСинхронизацияДанных.МетаданныеРегистраСведенийУтраченныхПодразделенийФизическихЛиц(), "Подразделение");
	
КонецПроцедуры

#Область ШаблоныПравилРегистрации

// Заменяет текст запроса регистрации изменений объекта для получения списка узлов-получателей по подразделениям
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Объект - СправочникОбъект
//  Подразделения - СправочникСсылка.СтруктураПредприятия, Массив из СправочникСсылка.СтруктураПредприятия -
//   ссылка или массив ссылок на подразделения, по которым нужно получить список узлов-получателей
Процедура ОграничитьРегистрациюОбъектаОтборомПоПодразделениям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса,
	ИспользоватьКэш, Объект, Подразделения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
	Если Не МодульСинхронизацияДанных.ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Подразделения) = Тип("Массив") Тогда
		ИспользоватьКэш = Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Подразделения", Подразделения);
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
	|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоПодразделениям
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ВЫБОР
	|				КОГДА ПланОбменаПодразделения.Подразделение В (&СвойствоОбъекта_Подразделения)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) = ИСТИНА
	|		ИЛИ КОЛИЧЕСТВО(ПланОбменаПодразделения.Подразделение) = 0)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаПодразделения","ПланОбмена." + ИмяПланаОбмена + ".Подразделения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел", "&" + ИмяПланаОбмена + "ЭтотУзел");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстЗапроса", ТекстЗапроса);
	Параметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	РазделыДанных = МодульСинхронизацияДанных.РазделыДанныхОбъекта(Объект.Метаданные().ПолноеИмя());
	МодульСинхронизацияДанных.ДобавитьВЗапросОтборПоУзламОтобраннымПоРазделамДанных(ИмяПланаОбмена, Параметры,
		РазделыДанных);
		
	ТекстЗапроса = Параметры.ТекстЗапроса;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗапроса, Параметры.ПараметрыЗапроса, Истина);
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений объекта для получения списка узлов-получателей по подразделениям
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Объект - СправочникОбъект
//  Подразделения - СправочникСсылка.СтруктураПредприятия, Массив из СправочникСсылка.СтруктураПредприятия -
//   ссылка или массив ссылок на подразделения, по которым нужно получить список узлов-получателей
//  ЗаменитьТекстЗапроса - Булево - если Истина, то текст запроса полностью заменятся, если Ложь, то дополняется.
Процедура ДополнитьОграничениеРегистрацииОбъектаОтборомПоПодразделениям(ИмяПланаОбмена, Отказ, ТекстЗапроса,
	ПараметрыЗапроса, ИспользоватьКэш, Объект, Подразделения, ЗаменитьТекстЗапроса = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
	Если Не МодульСинхронизацияДанных.ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Подразделения) = Тип("Массив") Тогда
		ИспользоватьКэш = Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Подразделения", Подразделения);
	
	Если ЗаменитьТекстЗапроса Тогда
		ТекстЗапроса = "";
	ИначеЕсли Не ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
	|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоПодразделениям)
	|			И МАКСИМУМ(ВЫБОР
	|					КОГДА ПланОбменаПодразделения.Подразделение В (&СвойствоОбъекта_Подразделения)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) = ИСТИНА
	|		ИЛИ КОЛИЧЕСТВО(ПланОбменаПодразделения.Подразделение) = 0)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаПодразделения","ПланОбмена." + ИмяПланаОбмена + ".Подразделения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел", "&" + ИмяПланаОбмена + "ЭтотУзел");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
КонецПроцедуры

Процедура ДополнитьОграничениеРегистрацииОбъектаОтборомПоСотруднику(ИмяПланаОбмена, Отказ, ТекстЗапроса,
	ПараметрыЗапроса, ИспользоватьКэш, Объект, Сотрудник, ЗаменитьТекстЗапроса = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
	Если Не МодульСинхронизацияДанных.ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаменитьТекстЗапроса Тогда
		ТекстЗапроса = "";
	ИначеЕсли Не ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	КОЛИЧЕСТВО(ПодразделенияСотрудников.Подразделение) КАК КоличествоПодразделений
	|ПОМЕСТИТЬ ВТКоличествоПодразделенийСотрудника
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияСотрудников КАК ПодразделенияСотрудников
	|		ПО Сотрудники.Ссылка = ПодразделенияСотрудников.Сотрудник
	|ГДЕ
	|	Сотрудники.Ссылка = &СвойствоОбъекта_Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|;
	|" + ТекстЗапроса +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
	|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияСотрудников КАК ПодразделенияСотрудников
	|		ПО (ПланОбменаПодразделения.Подразделение = ПодразделенияСотрудников.Подразделение)
	|		И (ПодразделенияСотрудников.Сотрудник = &СвойствоОбъекта_Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоПодразделенийСотрудника КАК ВТКоличествоПодразделенийСотрудника
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &СвойствоОбъекта_Отправитель
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка,
	|	ВТКоличествоПодразделенийСотрудника.КоличествоПодразделений,
	|	ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоПодразделениям
	|ИМЕЮЩИЕ
	|	ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоПодразделениям
	|	И (МАКСИМУМ(ВЫБОР
	|		КОГДА ПодразделенияСотрудников.Подразделение ЕСТЬ НЕ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) = ИСТИНА
	|	ИЛИ КОЛИЧЕСТВО(ПланОбменаПодразделения.Подразделение) = 0
	|	ИЛИ ВТКоличествоПодразделенийСотрудника.КоличествоПодразделений = 0
	|	И МИНИМУМ(ПланОбменаПодразделения.Подразделение) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаПодразделения","ПланОбмена." + ИмяПланаОбмена + ".Подразделения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел", "&" + ИмяПланаОбмена + "ЭтотУзел");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений физических лиц для получения списка узлов-получателей по Подразделениям,
// в которых установлены трудовые отношения по этим физическим лицам.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена.
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта.
//  ФизическиеЛица - Ссылка или массив ссылок физических лиц, по которым нужно получить список узлов-получателей.
//  ДополнительныеПараметрыПолученияСотрудников - Структура параметров, которые будут использоваться для получения
//                                                списка сотрудников физического лица.
//
Процедура ДополнитьОграничениеРегистрацииОбъектаОтборомПоФизическимЛицам(ИмяПланаОбмена, Отказ, ТекстЗапроса,
	ПараметрыЗапроса, ИспользоватьКэш, Объект, ФизическоеЛицо, ЗаменитьТекстЗапроса = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
	Если Не МодульСинхронизацияДанных.ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаменитьТекстЗапроса Тогда
		ТекстЗапроса = "";
	ИначеЕсли Не ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	КОЛИЧЕСТВО(ПодразделенияФизическихЛиц.Подразделение) КАК КоличествоПодразделений
	|ПОМЕСТИТЬ ВТКоличествоПодразделенийФизЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияФизическихЛиц КАК ПодразделенияФизическихЛиц
	|		ПО ФизическиеЛица.Ссылка = ПодразделенияФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &СвойствоОбъекта_ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Ссылка
	|;
	|" + ТекстЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
	|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияФизическихЛиц КАК ПодразделенияФизическихЛиц
	|		ПО (ПланОбменаПодразделения.Подразделение = ПодразделенияФизическихЛиц.Подразделение)
	|			И (ПодразделенияФизическихЛиц.ФизическоеЛицо = &СвойствоОбъекта_ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоПодразделенийФизЛица КАК ВТКоличествоПодразделенийФизЛица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &СвойствоОбъекта_Отправитель
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка,
	|	ВТКоличествоПодразделенийФизЛица.КоличествоПодразделений,
	|	ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоПодразделениям
	|
	|ИМЕЮЩИЕ
	|	ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоПодразделениям И
	|	(МАКСИМУМ(ВЫБОР
	|				КОГДА ПодразделенияФизическихЛиц.Подразделение ЕСТЬ НЕ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) = ИСТИНА
	|		ИЛИ КОЛИЧЕСТВО(ПланОбменаПодразделения.Подразделение) = 0
	|		ИЛИ ВТКоличествоПодразделенийФизЛица.КоличествоПодразделений = 0
	|			И МИНИМУМ(ПланОбменаПодразделения.Подразделение) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаПодразделения","ПланОбмена." + ИмяПланаОбмена + ".Подразделения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел", "&" + ИмяПланаОбмена + "ЭтотУзел");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
КонецПроцедуры

#Область ПереносДанныхИзПрежнихПрограмм

Процедура УточнениеПозицииШРСотрудниковПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Параметры, Отказ) Экспорт
	
	Если ОбъектНайден И ПараметрыОбъекта <> Неопределено Тогда
		
		Если Не Параметры.Свойство("НовыеПозицииСотрудников") Тогда
			Параметры.Вставить("НовыеПозицииСотрудников", Новый Соответствие);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ПараметрыОбъекта["Организация"]);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПараметрыОбъекта["ПодразделениеОрганизации"]);
		Запрос.УстановитьПараметр("Должность", ПараметрыОбъекта["Должность"]);
		Запрос.УстановитьПараметр("Подразделение", ПараметрыОбъекта["Подразделение"]);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МестоПозиции.Позиция КАК Позиция,
		|	МестоПозиции.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|ГДЕ
		|	МестоПозиции.Подразделение = &Подразделение
		|	И МестоПозиции.Позиция.Владелец = &Владелец
		|	И МестоПозиции.Позиция.Подразделение = &ПодразделениеОрганизации
		|	И МестоПозиции.Позиция.Должность = &Должность";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ОписаниеПозиции = Новый Структура("Позиция,Подразделение");
			ОписаниеПозиции.Позиция = Выборка.Позиция;
			ОписаниеПозиции.Подразделение = Выборка.Подразделение;
			
			Параметры.НовыеПозицииСотрудников.Вставить(Объект.Ссылка, ОписаниеПозиции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ЗаменитьПозицииСотрудниковПослеЗагрузки(Параметры) Экспорт
	
	Если Параметры.Свойство("НовыеПозицииСотрудников") Тогда
		
		ПозицииСотрудников = Параметры.НовыеПозицииСотрудников;
		СотрудникиДляОбработки = Новый Массив;
		Для каждого ЭлементКоллекции Из ПозицииСотрудников Цикл
			СотрудникиДляОбработки.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", СотрудникиДляОбработки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Сотрудник В(&Сотрудники)
		|	И КадроваяИсторияСотрудников.Регистратор ССЫЛКА Документ.НачальнаяШтатнаяРасстановка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция КАК Позиция,
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
		Результат = Запрос.ВыполнитьПакет();
		
		Расстановка  = Результат[0].Выгрузить();
		МестаПозиций = Результат[1].Выгрузить();
		
		СоответствиеПозиций = Новый Соответствие;
		Для каждого СтрокаТЗ Из МестаПозиций Цикл
			СоответствиеПозиций.Вставить(СтрокаТЗ.Позиция, СтрокаТЗ.Подразделение);
		КонецЦикла;
		
		ДокументыКОбработке = Новый Соответствие;
		
		Для каждого СтрокаТЗ Из Расстановка Цикл
			
			ПозицияРасстановки = СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
			Подразделение = СоответствиеПозиций[ПозицияРасстановки];
			
			ОписаниеПозиции = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
			Если ОписаниеПозиции = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеПозиции.Подразделение = Подразделение И ОписаниеПозиции.Позиция = ПозицияРасстановки Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСотрудников = ДокументыКОбработке[СтрокаТЗ.Регистратор];
			Если МассивСотрудников = Неопределено Тогда
				МассивСотрудников = Новый Массив;
				ДокументыКОбработке.Вставить(СтрокаТЗ.Регистратор, МассивСотрудников);
			КонецЕсли;
			МассивСотрудников.Добавить(СтрокаТЗ.Сотрудник);
			
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из ДокументыКОбработке Цикл
			
			ДокументОбъект = ЭлементКоллекции.Ключ.ПолучитьОбъект();
			Если ДокументОбъект.Проведен Тогда
				
				ТЧСотрудники = ДокументОбъект.Сотрудники;
				
				МассивСотрудников = ЭлементКоллекции.Значение;
				Для каждого Сотрудник Из МассивСотрудников Цикл
					
					СтрокаТЧ = ТЧСотрудники.Найти(Сотрудник, "Сотрудник");
					Если СтрокаТЧ <> Неопределено Тогда
						ОписаниеПозиции = ПозицииСотрудников[СтрокаТЧ.Сотрудник];
						СтрокаТЧ.ДолжностьПоШтатномуРасписанию = ОписаниеПозиции.Позиция;
					КонецЕсли;
					
				КонецЦикла;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура МестоПозицииВСтруктуреПредприятияПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбъектНайден И ПараметрыОбъекта <> Неопределено И ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ПараметрыОбъекта["Организация"]);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПараметрыОбъекта["ПодразделениеОрганизации"]);
		Запрос.УстановитьПараметр("Должность", ПараметрыОбъекта["Должность"]);
		Запрос.УстановитьПараметр("Подразделение", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МестоПозиции.Позиция КАК Позиция
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|ГДЕ
		|	МестоПозиции.Подразделение = &Подразделение
		|	И МестоПозиции.Позиция.Владелец = &Владелец
		|	И МестоПозиции.Позиция.Подразделение = &ПодразделениеОрганизации
		|	И МестоПозиции.Позиция.Должность = &Должность";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			// нет такой позиции и места в структуре, создадим новую
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ШтатноеРасписание.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|ГДЕ
			|	ШтатноеРасписание.Владелец = &Владелец
			|	И ШтатноеРасписание.Подразделение = &ПодразделениеОрганизации
			|	И ШтатноеРасписание.Должность = &Должность";
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ПозицияОснование = Выборка.Ссылка;
				
				НоваяПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НоваяПозицияОбъект, ПозицияОснование.ПолучитьОбъект());
				НоваяПозицияОбъект.Записать();
				
				НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Позиция = НоваяПозицияОбъект.Ссылка;
				НоваяЗапись.Подразделение = Объект.Ссылка;
				НаборЗаписей.Отбор.Позиция.Установить(НоваяПозицияОбъект.Ссылка);
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеМестоВСтруктуреПредприятия_ПоляПоиска(СвойстваПоиска, ПараметрыОбъекта, СсылкаНаОбъект, ПрекратитьПоиск, СтрокаИменСвойствПоиска) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОбъекта) Или Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		СтрокаИменСвойствПоиска = "Владелец, Должность, Подразделение";
	Иначе
		
		Запрос = Новый Запрос;
		
		СвойствоДолжность = СвойстваПоиска.Получить("Должность");
		Запрос.УстановитьПараметр("Должность", СвойствоДолжность);
		Запрос.УстановитьПараметр("ЕстьДолжность", ЗначениеЗаполнено(СвойствоДолжность));
		
		СвойствоПодразделение = СвойстваПоиска.Получить("Подразделение");
		Запрос.УстановитьПараметр("Подразделение", СвойствоПодразделение);
		Запрос.УстановитьПараметр("ЕстьПодразделение", ЗначениеЗаполнено(СвойствоПодразделение));
		
		СвойствоВладелец = СвойстваПоиска.Получить("Владелец");
		Запрос.УстановитьПараметр("Владелец", СвойствоВладелец);
		Запрос.УстановитьПараметр("ЕстьВладелец", ЗначениеЗаполнено(СвойствоВладелец));
		
		СвойствоМестоВСтруктуреПредприятия = ПараметрыОбъекта.Получить("МестоВСтруктуреПредприятия");
		Запрос.УстановитьПараметр("МестоВСтруктуреПредприятия", СвойствоМестоВСтруктуреПредприятия);
		Запрос.УстановитьПараметр("ЕстьМестоВСтруктуреПредприятия", ЗначениеЗаполнено(СвойствоМестоВСтруктуреПредприятия));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
		|		ПО ШтатноеРасписание.Ссылка = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ЕстьДолжность
		|				ТОГДА ШтатноеРасписание.Должность = &Должность
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЕстьПодразделение
		|				ТОГДА ШтатноеРасписание.Подразделение = &Подразделение
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЕстьВладелец
		|				ТОГДА ШтатноеРасписание.Владелец = &Владелец
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЕстьМестоВСтруктуреПредприятия
		|				ТОГДА МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение = &МестоВСтруктуреПредприятия
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СсылкаНаОбъект = Выборка.Ссылка;
		КонецЕсли;
		ПрекратитьПоиск = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеМестоВСтруктуреПредприятияПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта) Экспорт
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		МестоВСтруктуреПредприятия = ПараметрыОбъекта.Получить("МестоВСтруктуреПредприятия");
		Если ОбъектНайден Тогда
			СсылкаОбъекта = Объект.Ссылка;
		Иначе
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			СсылкаОбъекта = МенеджерОбъекта.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаОбъекта);
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Позиция = СсылкаОбъекта;
		НоваяЗапись.Подразделение = МестоВСтруктуреПредприятия;
		НаборЗаписей.Отбор.Позиция.Установить(СсылкаОбъекта);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КабинетСотрудника

Функция ТипСтруктураПредприятия() Экспорт
		
	Возврат Тип("СправочникСсылка.СтруктураПредприятия");

КонецФункции

#КонецОбласти

// Возвращает массив организация, связанных с подразделением.
//
// Параметры:
//	Подразделение - СправочникСсылка.СтруктураПредприятия
//
// Возвращаемое значение:
//    Массив - Массив значений - СправочникСсылка.Организации.
//   					
Функция ОрганизацииПодразделения(Подразделение) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ВсеОрганизацииБезУправленческой();
	КонецЕсли;
	
	Если СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц() Тогда
		ПодразделениеВСтруктуреПредприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Источник");
		Если ТипЗнч(ПодразделениеВСтруктуреПредприятия) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ПодразделениеВСтруктуреПредприятия = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеВСтруктуреПредприятия, "Владелец");
		КонецЕсли;
		
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодразделениеВСтруктуреПредприятия);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ ВТСтруктураПредприятияОтбор
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ (&Подразделение)";
	
	Запрос.Выполнить();
	
	СоздатьВТПозицииПодразделений(Запрос.МенеджерВременныхТаблиц, "ВТСтруктураПредприятияОтбор");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписание.Владелец КАК Организация
		|ИЗ
		|	ВТПозицииПодразделений КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Позиции.Позиция = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	ШтатноеРасписание.Утверждена
		|	И НЕ ШтатноеРасписание.Закрыта";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

// Возвращает таблицу значений, заполненную сотрудниками.
//
// Параметры:
//	Подразделение - СправочникСсылка.СтруктураПредприятия
//	НачалоПериода - Дата - начало периода
//	ОкончаниеПериода - Дата - конец периода
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений - см. КадровыйУчет.СотрудникиОрганизации.
//   					
Функция СотрудникиПодразделения(Подразделение, НачалоПериода, ОкончаниеПериода) Экспорт
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериода;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДолжностьПоШтатномуРасписанию,МестоВСтруктуреПредприятия";
	ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	ПараметрыПолученияСотрудников.ВключаяУволенныхНаНачалоПериода = Истина;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПодчиненныеПодразделения = ПодчиненныеПодразделения(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение));
		ПозицииПодразделения = ПозицииПодразделений(ПодчиненныеПодразделения).ВыгрузитьКолонку("Позиция");
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПолученияСотрудников.Отборы, "ДолжностьПоШтатномуРасписанию", "В", ПозицииПодразделения);
	КонецЕсли;
	
	Возврат КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
КонецФункции

Функция ВсеОрганизацииБезУправленческой(УправленческаяОрганизация = Неопределено, УчитыватьПомеченныеНаУдаление = Истина) Экспорт
	
	Если УправленческаяОрганизация = Неопределено Тогда 
		УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка <> &УправленческаяОрганизация
		|	И НЕ Организации.ПометкаУдаления";
	
	Если УчитыватьПомеченныеНаУдаление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ Организации.ПометкаУдаления", "ИСТИНА")
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтатноеРасписание

Функция ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия()
	
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(МестоВСтруктуреПредприятия, Подразделение)
	
	Если Не ЗначениеЗаполнено(МестоВСтруктуреПредприятия) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоВСтруктуреПредприятия, "Источник");
	
	Возврат Источник <> Подразделение;
	
КонецФункции

Процедура ДобавитьПанельОтбораШтатногоРасписанияПоСтруктуреПредприятия(Форма, Отказ, СтандартнаяОбработка)
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Список = Форма.СтруктураПредприятияСписок;
	Список.ОсновнаяТаблица = "Справочник.СтруктураПредприятия";
	
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.Использование И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Источник") Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы = Форма.Элементы;
	ГруппаСтруктураПредприятия = Элементы.ГруппаСтруктураПредприятия;
	
	Если Элементы.Найти("СтруктураПредприятияСписок") = Неопределено Тогда
		ПолеСтруктураПредприятияСписок = Элементы.Добавить("СтруктураПредприятияСписок", Тип("ТаблицаФормы"), ГруппаСтруктураПредприятия);
		ПолеСтруктураПредприятияСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ПолеСтруктураПредприятияСписок.Отображение = ОтображениеТаблицы.Дерево;
		ПолеСтруктураПредприятияСписок.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		ПолеСтруктураПредприятияСписок.ПутьКДанным = "СтруктураПредприятияСписок";
		ПолеСтруктураПредприятияСписок.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_СтруктураПредприятияСписокПриАктивизацииСтроки");
	КонецЕсли;
	
	Если Элементы.Найти("СтруктураПредприятияСписокПодразделение") = Неопределено Тогда
		ПолеПодразделение = Элементы.Добавить("СтруктураПредприятияСписокПодразделение", Тип("ПолеФормы"), ПолеСтруктураПредприятияСписок);
		ПолеПодразделение.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеПодразделение.Заголовок = НСтр("ru = 'Подразделение';
											|en = 'Business unit'");
		ПолеПодразделение.ПутьКДанным = "СтруктураПредприятияСписок.Ссылка";
	КонецЕсли;
	
	ИмяКоманды = "ВидСтруктураПредприятия";
	ВидСпискаГруппа = Элементы.ВидСписка;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Структура предприятия';
										|en = 'Business units'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ВидСпискаГруппа);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуСозданияУправленческойПозицииВСпискеШтатногоРасписания(Форма, Отказ, СтандартнаяОбработка)
	
	Если Не ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ИмяКоманды = "СоздатьУправленческуюПозицию";
	СоздатьСкопироватьГруппа = Элементы.СоздатьСкопироватьГруппа;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Создать';
										|en = 'Create'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), СоздатьСкопироватьГруппа);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМестоВСтруктуреПредприятияВФормуСпискаШтатногоРасписания(Форма, ИмяОсновнойТаблицы, ИмяРеквизитаСписок = "Список")
	
	ОтборМестоВСтруктуреПредприятия = Неопределено;
	Если Форма.Параметры.Отбор.Свойство("МестоВСтруктуреПредприятия", ОтборМестоВСтруктуреПредприятия) Тогда
		Форма.Параметры.Отбор.Удалить("МестоВСтруктуреПредприятия")
	КонецЕсли;
	
	ОтображатьМестоВСтруктуреПредприятия = ОтображатьВШтатномРасписанииМестоВСтруктуреПредприятия();
	УстановленОтборПоМестуВСтруктуреПредприятия = ЗначениеЗаполнено(ОтборМестоВСтруктуреПредприятия);
	
	Если Не ОтображатьМестоВСтруктуреПредприятия И Не УстановленОтборПоМестуВСтруктуреПредприятия Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидСтруктураПредприятия",
		"Видимость",
		Не УстановленОтборПоМестуВСтруктуреПредприятия);
	
	Список = Форма[ИмяРеквизитаСписок];
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """МестоВСтруктуреПредприятия"" КАК МестоВСтруктуреПредприятия", "МестоВСтруктуреПредприятия.Подразделение КАК МестоВСтруктуреПредприятия");
	Список.ТекстЗапроса = Список.ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
	|	ПО " + ИмяОсновнойТаблицы + ".Ссылка = МестоВСтруктуреПредприятия.Позиция";
	
	Элементы = Форма.Элементы;
	ГруппаМестоВСтруктуреПредприятия = Элементы.ГруппаМестоВСтруктуреПредприятия;
	
	Если Элементы.Найти("МестоВСтруктуреПредприятия") = Неопределено Тогда
		Поле = Элементы.Добавить("МестоВСтруктуреПредприятия", Тип("ПолеФормы"), ГруппаМестоВСтруктуреПредприятия);
		Поле.Заголовок = НСтр("ru = 'В структуре предприятия';
								|en = 'In enterprise structure '");
		Поле.Вид = ВидПоляФормы.ПолеНадписи;
		Поле.Ширина = 12;
		Поле.ПутьКДанным = ИмяРеквизитаСписок + ".МестоВСтруктуреПредприятия";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"МестоВСтруктуреПредприятия", 
		"Видимость", 
		ОтображатьМестоВСтруктуреПредприятия);
	
	Если УстановленОтборПоМестуВСтруктуреПредприятия Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "МестоВСтруктуреПредприятия", ОтборМестоВСтруктуреПредприятия, ВидСравненияКомпоновкиДанных.ВИерархии);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура УправленческаяПозицияПриСозданииНаСервере(Форма, Параметры, СозданиеНовой) Экспорт 
	
	Если Не Параметры.Свойство("УправленческаяПозиция") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если СозданиеНовой Тогда 
		Объект.Владелец = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросВТМестоПозицииВСтруктуреПредприятия(ИмяВТ = "ВТВсеПозицииНаДатуАктуальности", ИмяПоляПозиция = "ПозицияШтатногоРасписания") Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МестоПозицииВСтруктуреПредприятия.Позиция КАК Позиция,
		|	МестоПозицииВСтруктуреПредприятия.Подразделение КАК МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ ВТМестоПозицииВСтруктуреПредприятия
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеПозицииНаДатуАктуальности КАК ВсеПозицииНаДатуАктуальности
		|		ПО (МестоПозицииВСтруктуреПредприятия.Позиция = ВсеПозицииНаДатуАктуальности.Позиция)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВсеПозицииНаДатуАктуальности.Позиция", "ВсеПозицииНаДатуАктуальности." + ИмяПоляПозиция);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВсеПозицииНаДатуАктуальности", ИмяВТ);
	
	Возврат Запрос;
	
КонецФункции

Функция ДобавитьПолеСведенийОМестеВСтруктуреПредприятия(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт 
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМестеВСтруктуреПредприятия(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОМестеВСтруктуреПредприятия", Истина);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ДолжностьПоШтатномуРасписанию");
		
		ПутьКДанным = ПутьКДаннымСведенийОМестеВСтруктуреПредприятия(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОМестеВСтруктуреПредприятия(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("МестоВСтруктуреПредприятия");
		
КонецФункции

Функция ПутьКДаннымСведенийОМестеВСтруктуреПредприятия(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("МестоВСтруктуреПредприятия") Тогда
		ПутьКДанным = "МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаСведенияОМестеВСтруктуреПредприятия(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт 
	
	Если ИсточникиДанных.Получить("СведенияОМестеВСтруктуреПредприятия") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
		|		ПО (КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция)}";
	
КонецПроцедуры

Процедура СкрытьУправленческуюОрганизациюИзДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт 
	
	Если ПоказыватьУправленческуюОрганизацию(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если УправленческаяОрганизация = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Если Не Параметры.Отбор.Свойство("Ссылка") Тогда
		Параметры.Отбор.Вставить("Ссылка", ВсеОрганизацииБезУправленческой(УправленческаяОрганизация));
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Параметры.Отбор["Ссылка"]) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Параметры.Отбор["Ссылка"], УправленческаяОрганизация);
	Иначе
		Если Параметры.Отбор["Ссылка"] = УправленческаяОрганизация Тогда
			Параметры.Отбор.Вставить("Ссылка", Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУправленческуюОрганизацию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если УправленческаяОрганизация <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = Справочники.Организации.СоздатьЭлемент();
	
	УправленческаяОрганизация.Наименование = НСтр("ru = 'Управленческая организация';
													|en = 'Management company'");
	УправленческаяОрганизация.НаименованиеПолное = НСтр("ru = 'Управленческая организация';
														|en = 'Management company'");
	УправленческаяОрганизация.НаименованиеСокращенное = НСтр("ru = 'Управленческая организация';
															|en = 'Management company'");
	
	УправленческаяОрганизация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;
	УправленческаяОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	УправленческаяОрганизация.ИмяПредопределенныхДанных = "УправленческаяОрганизация";
	
	УправленческаяОрганизация.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ПриУстановкеИспользованияУправленческойЗарплаты(ИспользоватьУправленческуюЗарплату) Экспорт
	
	Если ИспользоватьУправленческуюЗарплату = Истина Тогда
		СоздатьУправленческуюОрганизацию();
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементФормыПользовательскийОтборПоОрганизации(ПодчиненныеЭлементыНастроек, ИмяПоляОрганизация)
	
	Для Каждого ЭлементПодчиненныхЭлементовНастроек Из ПодчиненныеЭлементыНастроек.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементПодчиненныхЭлементовНастроек) = Тип("ГруппаФормы") И ЭлементПодчиненныхЭлементовНастроек.Заголовок = ИмяПоляОрганизация Тогда
			Для Каждого ЭлементГруппыОрганизация Из ЭлементПодчиненныхЭлементовНастроек.ПодчиненныеЭлементы Цикл
				Если ЭлементГруппыОрганизация.Имя = ЭлементПодчиненныхЭлементовНастроек.Имя + "Значение" Тогда
					Возврат ЭлементГруппыОрганизация;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(ЭлементПодчиненныхЭлементовНастроек) = Тип("ГруппаФормы") Тогда
			ЭлементГруппыОрганизация = ЭлементФормыПользовательскийОтборПоОрганизации(ЭлементПодчиненныхЭлементовНастроек, ИмяПоляОрганизация);
			Если ЭлементГруппыОрганизация <> Неопределено Тогда
				Возврат ЭлементГруппыОрганизация;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИспользуетсяОбменУправлениеПредприятием2() Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуетсяОбменУправлениеПредприятием2 = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиУниверсальныйФормат");
		ИспользуетсяОбменУправлениеПредприятием2 = Модуль.ИспользуетсяОбменУправлениеПредприятием2();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользуетсяОбменУправлениеПредприятием2;
	
КонецФункции

Процедура ОбновитьНастройкиСтруктурыПредприятияПриИспользованииОбменаУП2(ОбменНастроен) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьИспользованиеСтруктурыПредприятия(Не ОбменНастроен);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЗапросВТПозицииПодразделений(ИмяФильтра)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК Подразделение,
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТПозицииПодразделений
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТПодразделения КАК ВТПодразделения
		|		ПО МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение = ВТПодразделения.Подразделение
		|ГДЕ
		|	НЕ МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция.ГруппаПозицийПодразделения";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТПодразделения", ИмяФильтра);
	
	Возврат Запрос;
	
КонецФункции

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОрганизационнаяСтруктура.УстановитьРежимСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.НеВыполнятьПриПереходеСДругойПрограммы = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.10";
	Обработчик.Процедура = "РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.УдалитьЛишниеЗаписиДляГруппыПозицийПодразделения";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2b642695-21cb-4180-a939-24f4a232c5b3");
	Обработчик.Комментарий = НСтр("ru = 'Удаление лишних записей мест позиций в структуре предприятия, ошибочно созданных для групп позиций.';
									|en = 'Delete extra records of places of positions in the enterprise structure that were created for position groups by mistake.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.15.65";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ЗаполнитьКодИсточникаВСтруктуреПредприятия";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("02fe3f12-0101-4f64-9996-539d5e56de9f");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебного реквизита «Код источника» элементов структуры предприятия.';
									|en = 'Populating the internal attribute ""Source code"" of the enterprise structure elements.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ОбновитьСтруктуруПредприятия";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("989c8519-3c38-4ff1-85fc-f7c0c486f9a7");
	Обработчик.Комментарий = НСтр("ru = 'Обновление элементов справочника «Структура предприятия» в режиме соответствия структур.';
									|en = 'Updating the ""Enterprise structure"" catalog elements in the structure matching mode.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.2";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ДобавитьРольИзменениеМестаСотрудникаВСтруктуреПредприятияВПользовательскиеПрофили";
	Обработчик.РежимВыполнения = "Оперативно";
	
КонецПроцедуры

Процедура УстановитьРежимСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц() Экспорт
	
	Соответствует = Истина;
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриУстановкеСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц(Соответствует);
	
	УстановитьИспользованиеСтруктурыПредприятия(Соответствует);

КонецПроцедуры

Процедура ЗаполнитьКодИсточникаВСтруктуреПредприятия(ПараметрыОбновления) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка,
		|	ПодразделенияОрганизаций.Код
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ПодразделенияОрганизаций.Ссылка = СтруктураПредприятия.Источник
		|		И ПодразделенияОрганизаций.Код <> СтруктураПредприятия.КодИсточника";
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Справочники.СтруктураПредприятия);
	
	ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
	Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
		ОписаниеБлокировки.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Ссылка;
		Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Возврат;
		КонецЕсли;
		Подразделение = ВыборкаОбновляемыхДанных.Ссылка.ПолучитьОбъект();
		Подразделение.КодИсточника = ВыборкаОбновляемыхДанных.Код;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Подразделение);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтруктуруПредприятия(ПараметрыОбновления = Неопределено) Экспорт
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	ОрганизационнаяСтруктураСобытия.ОбновитьСтруктуруПредприятия();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
КонецПроцедуры

// Добавляет роль изменения мест сотрудников в структуре предприятия в непоставляемые (пользовательские) профили групп доступа.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ДобавитьРольИзменениеМестаСотрудникаВСтруктуреПредприятияВПользовательскиеПрофили() Экспорт
	
	ЗаменяемыеРоли = Новый Соответствие;
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеОрганизационнойСтруктуры.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ИзменениеМестаСотрудникаВСтруктуреПредприятия.Имя);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОрганизационнойСтруктуры", НовыеРоли);
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло", Форма.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло);
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло") Тогда
		Форма["СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло"] = СохраненныеНастройки["СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло"];
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ?(Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Получить(), 0, 1);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПриложения) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПриложения.Вставить("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло", ?(Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц, 1, 0));
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда 
		Возврат;
	КонецЕсли;
	
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(Параметры.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = 0);
	
КонецПроцедуры

#КонецОбласти

Функция ПоказыватьУправленческуюОрганизацию(ПараметрыВыбора = Неопределено)
	
	Если ИспользоватьУмолчаниеДляОтображенияУправленческойОрганизации(ПараметрыВыбора) Тогда
		Возврат ПоказыватьУправленческуюОрганизациюПоУмолчанию();
	КонецЕсли;

	ПоказыватьУправленческуюОрганизацию = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыВыбора, "ПоказыватьУправленческуюОрганизацию", Ложь);
	ЭтоВыборЗначенияДоступа = ПараметрыВыбора.Свойство("ЭтоВыборЗначенияДоступа");
	
	Возврат (ПоказыватьУправленческуюОрганизацию Или ЭтоВыборЗначенияДоступа)
		И (ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату")
			Или ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц"));
	
КонецФункции

Функция ПоказыватьУправленческуюОрганизациюПоУмолчанию()

	Показывать = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенная = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенная.ПриОпределенииПоказыватьУправленческуюОрганизациюПоУмолчанию(Показывать);
	КонецЕсли;

	Если Показывать = Неопределено Тогда
		Показывать = Истина;
	КонецЕсли;
	
	Возврат Показывать;

КонецФункции

Функция ИспользоватьУмолчаниеДляОтображенияУправленческойОрганизации(ПараметрыВыбора)
	
	Если ПараметрыВыбора = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ПоказыватьУправленческуюОрганизацию") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ЭтоВыборЗначенияДоступа") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПриСозданииФормыСпискаОрганизаций(Форма, Параметры, СписокОрганизаций) Экспорт
	
	Если ПоказыватьУправленческуюОрганизацию(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОрганизаций, 
		"Ссылка", 
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация"), 
		ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

Процедура ДополнитьДополнительныеПоляОтчетаШтатноеРасписание(СоответствиеДополнительныхПолейПредставлениям) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременнойТаблицы = "Представления_ШтатноеРасписание";
	
	ДополнительныеПоляПредставлений = Неопределено;
	Если Не СоответствиеДополнительныхПолейПредставлениям.Свойство(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений) Тогда
		
		ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
		СоответствиеДополнительныхПолейПредставлениям.Вставить(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений);
		
	КонецЕсли;
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МестоВСтруктуреПредприятия";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	СтрокаДополнительногоПоля.ПутьПоляСКД = "МестоВСтруктуреПредприятия";
	
КонецПроцедуры

Процедура ДополнитьДополнительныеПоляОтчетаКадроваяИсторияСотрудников(СоответствиеДополнительныхПолейПредставлениям) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременнойТаблицы = "_";
	
	ДополнительныеПоляПредставлений = Неопределено;
	Если Не СоответствиеДополнительныхПолейПредставлениям.Свойство(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений) Тогда
		
		ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
		СоответствиеДополнительныхПолейПредставлениям.Вставить(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений);
		
	КонецЕсли;
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МестоВСтруктуреПредприятия";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение";
	
	ОписаниеСоединения = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
	ОписаниеСоединения.Источник = "РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
	ОписаниеСоединения.Псевдоним = "РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
	ОписаниеСоединения.Условие = "ВсяКадроваяИстория.ДолжностьПоШтатномуРасписанию = РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция";
	ОписаниеСоединения.ПсевдонимИсточникаСвязи = "ВсяКадроваяИстория";
	
	СтрокаДополнительногоПоля.Соединения.Добавить(ОписаниеСоединения);
	
КонецПроцедуры

Процедура ЗаполнитьМестоВСтруктуреПредприятияДанныхДляПодбораСотрудников(НаборЗаписейДанныеДляПодбораСотрудников) Экспорт
	
	СписокПозиций = Новый Соответствие;
	Для Каждого Запись Из НаборЗаписейДанныеДляПодбораСотрудников Цикл
		
		Если ЗначениеЗаполнено(Запись.ДолжностьПоШтатномуРасписанию)
			И Не ЗначениеЗаполнено(Запись.МестоВСтруктуреПредприятия) Тогда
			
			СписокПозиций.Вставить(Запись.ДолжностьПоШтатномуРасписанию);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокПозиций.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокПозиций", ОбщегоНазначения.ВыгрузитьКолонку(СписокПозиций, "Ключ"));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция КАК Позиция,
			|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
			|ГДЕ
			|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция В(&СписокПозиций)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокПозиций.Вставить(Выборка.Позиция, Выборка.Подразделение);
			КонецЦикла;
			
			Для Каждого Запись Из НаборЗаписейДанныеДляПодбораСотрудников Цикл
				
				Если ЗначениеЗаполнено(Запись.ДолжностьПоШтатномуРасписанию) Тогда
					Запись.МестоВСтруктуреПредприятия = СписокПозиций.Получить(Запись.ДолжностьПоШтатномуРасписанию);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормСпискаИлиВыбораСотрудников(Форма, Параметры) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.СтруктураПредприятия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МестоВСтруктуреПредприятия",
		"Видимость",
		Истина);
	
	ДобавитьТаблицуСтруктурыПредприятия = Не Параметры.Отбор.Свойство("МестоВСтруктуреПредприятия");
	
	Если ДобавитьТаблицуСтруктурыПредприятия Тогда
		
		КоллекцияОтборов = Новый Массив;
		КоллекцияОтборов.Добавить(Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы);
		КоллекцияОтборов.Добавить(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы);
		ПользовательскиеОтборы = СотрудникиКлиентСерверРасширенный.ПользовательскиеОтборы(Форма.Список);
		Если ПользовательскиеОтборы <> Неопределено Тогда
			КоллекцияОтборов.Добавить(ПользовательскиеОтборы);
		КонецЕсли;
		
		Для Каждого ЭлементыОтбора Из КоллекцияОтборов Цикл
			
			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация")
					Или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Филиал")
					Или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОрганизации")
					Или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестоВСтруктуреПредприятия") Тогда
					
					ДобавитьТаблицуСтруктурыПредприятия = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ДобавитьТаблицуСтруктурыПредприятия Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ДобавитьТаблицуСтруктурыПредприятия Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаОтборов = Форма.Элементы.Найти("ПодразделенияГруппыСотрудниковСтраницы");
	Если ГруппаОтборов <> Неопределено Тогда
		
		ИмяОрганизационнаяСтруктураСтраница = "ОрганизационнаяСтруктураСтраница";
		ОрганизационнаяСтруктураСтраница = Форма.Элементы.Найти(ИмяОрганизационнаяСтруктураСтраница);
		Если ОрганизационнаяСтруктураСтраница = Неопределено Тогда
			
			// Добавление реквизита
			
			МассивНовыхРеквизитов = Новый Массив;
			МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы("ОрганизационнаяСтруктура", Новый ОписаниеТипов("ДинамическийСписок")));
			
			Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);
			
			Форма.ОрганизационнаяСтруктура.ОсновнаяТаблица = "Справочник.СтруктураПредприятия";
			
			// Добавление таблицы
			
			ОрганизационнаяСтруктураСтраница = Форма.Элементы.Добавить(ИмяОрганизационнаяСтруктураСтраница, Тип("ГруппаФормы"), ГруппаОтборов);
			ОрганизационнаяСтруктураСтраница.Вид = ВидГруппыФормы.Страница;
			
			ОрганизационнаяСтруктураТаблица = Форма.Элементы.Добавить("ОрганизационнаяСтруктураТаблица", Тип("ТаблицаФормы"), ОрганизационнаяСтруктураСтраница);
			ОрганизационнаяСтруктураТаблица.ПутьКДанным = "ОрганизационнаяСтруктура";
			ОрганизационнаяСтруктураТаблица.ТолькоПросмотр = Истина;
			ОрганизационнаяСтруктураТаблица.Шапка = Ложь;
			ОрганизационнаяСтруктураТаблица.Отображение = ОтображениеТаблицы.Дерево;
			ОрганизационнаяСтруктураТаблица.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			ОрганизационнаяСтруктураТаблица.ИзменятьСоставСтрок = Ложь;
			ОрганизационнаяСтруктураТаблица.ИзменятьПорядокСтрок = Ложь;
			ОрганизационнаяСтруктураТаблица.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_ОрганизационнаяСтруктураПриАктивизацииСтроки");
			
			ОрганизационнаяСтруктураТаблицаСсылка = Форма.Элементы.Добавить("ОрганизационнаяСтруктураТаблицаСсылка", Тип("ПолеФормы"), ОрганизационнаяСтруктураТаблица);
			ОрганизационнаяСтруктураТаблицаСсылка.Вид = ВидПоляФормы.ПолеНадписи;
			ОрганизационнаяСтруктураТаблицаСсылка.ПутьКДанным = "ОрганизационнаяСтруктура.Ссылка";
			
			// Добавление команды
			
			Команда = Форма.Команды.Добавить("ПоОрганизационнойСтруктуре");
			Команда.Заголовок = НСтр("ru = 'Структура предприятия';
									|en = 'Business units'");
			Команда.Действие = "Подключаемый_ПоОрганизационнойСтруктуре";
			
			ГруппаКоманд = Форма.Элементы.Найти("ВидСпискаГруппа");
			Если ГруппаКоманд <> Неопределено Тогда
				
				КомандаФормы = Форма.Элементы.Добавить("ФормаПоОрганизационнойСтруктуре", Тип("КнопкаФормы"), ГруппаКоманд);
				КомандаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				КомандаФормы.ИмяКоманды = "ПоОрганизационнойСтруктуре";
				
				НастройкаВидПоОрганизационнойСтруктуре = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокСотрудников", "ВидПоОрганизационнойСтруктуре");
				КомандаФормы.Пометка = ?(НастройкаВидПоОрганизационнойСтруктуре = Неопределено, Ложь, НастройкаВидПоОрганизационнойСтруктуре);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокСотрудниковУстановитьОтображениеСписков(Форма, СохранитьНастройки) Экспорт
	
	ОрганизационнаяСтруктураКлиентСервер.СписокСотрудниковУстановитьОтображениеСписков(Форма);
	
	Если СохранитьНастройки Тогда
		
		Если Не Форма.ПолучитьФункциональнуюОпциюФормы("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокСотрудников", "ВидПоОрганизационнойСтруктуре", Ложь);
		Иначе
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокСотрудников", "ВидПоОрганизационнойСтруктуре", Форма.Элементы.ФормаПоОрганизационнойСтруктуре.Пометка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "МестоВСтруктуреПредприятия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".МестоВСтруктуреПредприятия";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоляПредставлений = Неопределено;
	Если Не ДополнительныеПоля.Свойство("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляПредставлений) Тогда
		ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
	КонецЕсли;
	
	ИмяПоля = "МестоВСтруктуреПредприятия";
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Найти(ИмяПоля, "ИмяПоля");
	Если СтрокаДополнительногоПоля = Неопределено Тогда
		
		СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
		СтрокаДополнительногоПоля.ИмяПоля = ИмяПоля;
		СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеСотрудников",
		"МестоВСтруктуреПредприятия",
		"Работа.МестоВСтруктуреПредприятия");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеСотрудниковНаКонецПериода",
		"МестоВСтруктуреПредприятияНаКонецПериода",
		"Работа.МестоВСтруктуреПредприятияНаКонецПериода");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеГоловныхСотрудников",
		"МестоВСтруктуреПредприятияГоловногоСотрудникаНаКонецПериода",
		"Работа.МестоВСтруктуреПредприятияГоловногоСотрудникаНаКонецПериода",
		НСтр("ru = 'Место в структуре предприятия основного сотрудника на конец периода';
			|en = 'Main employee place in the enterprise structure as of the end of the period'"));
	
КонецПроцедуры

#Область ИсточникСведенийОШтатномРасписании

Процедура ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников) Экспорт
	
	ДобавитьОписаниеСведенийМестаВСтруктуреПредприятия(ОписаниеИсточников);
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийМестаВСтруктуреПредприятия(ОписаниеИсточников)
	
	ИдентификаторИсточника = "РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
	ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "МестоВСтруктуреПредприятия";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение");
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия
			|		ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция}";
		
	Иначе
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия
			|		ПО СправочникШтатноеРасписание.Ссылка = РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция}";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти



