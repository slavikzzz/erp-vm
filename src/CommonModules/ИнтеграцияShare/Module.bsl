
#Область ПрограммныйИнтерфейс

#Область ВзаимодействиеССервисом

// Возвращает настройки сервиса для публикации документа в сервисе 1С:Share.
// Настройки загружаются из общего хранилища настроек авторизованного пользователя.
// В случае, если сохраненных настроек нет в хранилище - выполняется запрос в сервис для получения настроек
// с последующим сохранением в общие настройки авторизованного пользователя.
//
// Параметры:
//  Отказ - Булево - признак наличия ошибок при выполнении запроса в сервисе.
//                   При наличие ошибок выполняется запись в журнал регистрации и вывод сообщения пользователю.
//                   В случае Отказ = Истина рекомендуется ссылаться на запись в журнале регистрацию.
//
// Возвращаемое значение:
//  Неопределено - в случае, если не удалось загрузить настройки.
//  Структура    - настройки сервиса:
//   * МаксимальныйРазмерПакетаВБайтах - Строка - максимальный размер транспортного пакета (zip-архива)
//                                                для публикации документа в байтах.
//
Функция НастройкиСервисаДляПубликации(Отказ) Экспорт
	
	НастройкиСервиса = НастройкиСервисаИзХранилищаПользователя();
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = НастройкиСервисаДляПубликацииИзСервиса(Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СохранитьНастройкиСервисаВХранилищеПользователя(НастройкиСервиса);
	КонецЕсли;
	
	Возврат НастройкиСервиса;
	
КонецФункции

// Отправляет в сервис 1С:Share сведения в какой объект загружен электронный документ в прикладной базе.
// Данные используются при повторной загрузки документа в базу.
//
// Параметры:
//  ПараметрыДокумента - см. ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаДляОтметкиЗагрузкиВБазу
//  Отказ - Булево - признак наличия ошибок при выполнении запроса.
//                   При наличие ошибок выполняется запись в журнал регистрации и вывод сообщения пользователю.
//
Процедура ОтметитьВСервисеЗагрузкуДокументаВБазу(Знач ПараметрыДокумента, Отказ) Экспорт
	
	ЗапросСервиса = ЗапросСервисаОтметитьЗагрузкуДокумента(ПараметрыДокумента, Отказ);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Права

// Возвращает признак наличия прав использования сервиса 1С:Share.
//
// Возвращаемое значение:
//  Булево - признак наличия прав доступа.
//
Функция ЕстьПравоИспользованияСервиса() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь()
		Или ПравоДоступа("Использование", Метаданные.Обработки.СервисShare);
	
КонецФункции

// Добавляет в профиль роли базовых прав для использования сервиса 1С:Share.
//
// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьПраваИспользованияСервиса(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваСервисShare");

КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеДокументы

// Способ обмена электронного документа через сервис 1С:Share
// для взаимодействия с подсистемой ЭлектронноеВзаимодействие.ОбменСКонтрагентами
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СпособыОбменаЭД - значение "Через1CShare".
Функция СпособОбмена() Экспорт
	
	Возврат Перечисления.СпособыОбменаЭД.Через1CShare;
	
КонецФункции

// Возвращает структуру, состава команд исходящих и входящих документов доступных для обмена в сервисе 1С:Share.
//
// Возвращаемое значение:
//  Структура - состав команд исходящих и входящих документов:
//   * Исходящие - Массив Из Строка - наименование объекта метаданных, которому разрешено отправление из базы через сервис.
//                                    Например: Документ.СчетНаОплатуПокупателю, Справочник.ДоговорыКонтрагентов.
//   * Входящие  - Массив Из Строка - наименование объекта метаданных, которому разрешена загрузка в базу через сервис.
//                                    Например: Документ.СчетНаОплатуПоставщика, Справочник.ДоговорыКонтрагентов.
//
Функция НовыйСоставКомандShare() Экспорт
	
	СоставКоманды = Новый Структура;
	СоставКоманды.Вставить("Исходящие", Новый Массив);
	СоставКоманды.Вставить("Входящие" , Новый Массив);
	
	Возврат СоставКоманды;
	
КонецФункции

// Конструктор параметров публикуемого документа для формирования визуализации документа.
//
// Возвращаемое значение:
//  Структура - параметры публикуемого документа для формирования визуализации документа:
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//   * ДвоичныеДанныеДокумента - ДвоичныеДанные - данные публикуемого документа
//   * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//   * СвойстваПредставления - Структура - свойства представления, которые при необходимости можно переопределить 
//                                         при использовании стандартной обработки:
//      ** ПараметрыВизуализации  - См. ОбменСКонтрагентамиИнтеграция.НовыеПараметрыВизуализации - параметры визуализации 
//                                            для формирования визуализации при стандартной обработки.
//      ** ПредставлениеДокумента  - Строка - представление публикуемого документа, отображаемое пользователю.
//
Функция НовыеПараметрыПубликуемогоДокументаДляВизуализации() Экспорт
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ОбъектУчета");
	ПараметрыДокумента.Вставить("ДвоичныеДанныеДокумента");
	ПараметрыДокумента.Вставить("ТипДокумента");
	
	СвойстваПредставления = Новый Структура;
	СвойстваПредставления.Вставить("ПараметрыВизуализации",
		ОбменСКонтрагентамиИнтеграция.НовыеПараметрыВизуализации());
	СвойстваПредставления.Вставить("ПредставлениеДокумента");
	
	ПараметрыДокумента.Вставить("СвойстваПредставления", СвойстваПредставления);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

// Инициализирует параметры для загрузки электронного документа в объект учета.
//
// Возвращаемое значение:
//  Структура - параметры для загрузки документа:
//   * СпособОбмена - См. СпособОбмена
//   * ДанныеОсновногоФайла - Неопределено, См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла - данные файла
//              электронного документа.
//   * ДополнительныеФайлыДокумента - Неопределено, См. НовоеОписаниеДополнительныхФайлов
//   * ФайлыВизуализации - Массив из См. НовыйФайлВизуализации() - файлы визуализации документа.
//
Функция НовыеПараметрыДляЗагрузкиДокументаВОбъектУчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СпособОбмена", СпособОбмена());
	Результат.Вставить("ДанныеОсновногоФайла", Неопределено);
	Результат.Вставить("ДополнительныеФайлыДокумента", Неопределено);
	Результат.Вставить("ФайлыВизуализации", Новый Массив);
	
	Возврат Результат;

КонецФункции


#КонецОбласти

#Область РаботаСФайлами

// Возвращает признак доступности типа файла к отправке в сервис 1С:Share.
// Расширение файла проверяется на запрещенные типы из ИнтеграцияShareКлиентСервер.ЗапрещенныеРасширенияФайла.
//
// Параметры:
//  РасширениеФайла - Строка
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//
// Возвращаемое значение:
//  Булево - признак поддерживаемого расширения
Функция РасширениеФайлаДоступно(Знач РасширениеФайла, Знач ДвоичныеДанныеФайла) Экспорт
	
	РасширениеФайлаБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Расширение = СтрШаблон(".%1;", НРег(РасширениеФайлаБезТочки));
	
	ЗапрещенныеРасширенияФайла = ИнтеграцияShareКлиентСервер.ЗапрещенныеРасширенияФайла();

	Возврат СтрНайти(ЗапрещенныеРасширенияФайла, Расширение) = 0;
	
КонецФункции

// Конструктор данных присоединенного файла для выбора к публикации.
//
// Возвращаемое значение:
//  Структура - содержит данные присоединенного файла:
//   * СсылкаНаФайл - ОпределяемыйТип.ПрисоединенныйФайл, Неопределено - ссылка на файл документа к публикации.
//   * Наименование - Строка - наименование файла без расширения.
//   * Расширение   - Строка - расширение файла без точки.
//
Функция НовыеДанныеПрисоединенногоФайла() Экспорт
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("СсылкаНаФайл", Неопределено);
	ДанныеФайла.Вставить("Наименование", "");
	ДанныеФайла.Вставить("Расширение", "");
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзЭлектронногоВзаимодействия

// См. ПодключаемыеКомандыЭДОСобытия.ПриОпределенииСпискаКомандЭДО
Процедура ПриОпределенииСпискаКомандЭДО(Знач СоставКоманд, Знач ПолноеИмя, Знач НаправлениеЭД, КомандыЭДО) Экспорт
	
	Если ЕстьПравоИспользованияСервиса()
		И СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено
			И НаправлениеЭД <> Перечисления.НаправленияЭДО.Входящий
			И ПравоДоступа("Вывод", Метаданные) Тогда
			
		КомандыShare = НовыйСоставКомандShare();
		ИнтеграцияShareПереопределяемый.ПриОпределенииСоставаКомандShare(КомандыShare);
		
		Если КомандыShare.Исходящие.Найти(ПолноеИмя) <> Неопределено Тогда
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтеграцияShareКлиент.ПоделитьсяДокументом";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПоделитьсяДокументомShare";
			КомандаЭДО.Представление = НСтр("ru = 'Поделиться документом';
											|en = 'Share the document'", ОбщегоНазначения.КодОсновногоЯзыка());
			КомандаЭДО.Порядок       = 101;
			КомандаЭДО.Картинка      = БиблиотекаКартинок["Поделиться"];
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "";
			КомандаЭДО.Недоступна      = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСервиса

#Область ПубликацияДокумента

// Параметры:
//  ПараметрыДокумента - см. ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаКПубликации
//  АдресХранилищаРезультата - Строка - адрес временного хранилища с данными опубликованного документа
//                                      см. ИнтеграцияShareКлиентСервер.НовыеДанныеОпубликованногоДокумента
Процедура ОпубликоватьИПолучитьСсылкуНаСкачиваниеДокументаВФоне(Знач ПараметрыДокумента, АдресХранилищаРезультата) Экспорт
	
	Отказ = Ложь;
	ОпубликоватьИПолучитьСсылкуНаСкачиваниеДокумента(ПараметрыДокумента, Отказ);
	
	Если Отказ Тогда
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПараметрыДокумента, АдресХранилищаРезультата);

КонецПроцедуры

// Отправляет электронный документ в сервис 1С:Share и формирует короткую ссылку на скачивание.
//
// Параметры:
//  ПараметрыДокумента - См. ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаКПубликации
//  Отказ              - Булево - признак наличия ошибок при выполнении операции.
//
Процедура ОпубликоватьИПолучитьСсылкуНаСкачиваниеДокумента(ПараметрыДокумента, Отказ) Экспорт
	
	СсылкаНаДокумент = ПараметрыДокумента.ЭлектронныйДокумент;
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СсылкиНаДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДокумент);
	ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(СсылкиНаДокументы, Истина);
	
	Если СсылкиНаДокументы.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиПакета = ПараметрыДокумента.РезультатПроверкиПакета;
	
	ДополнительныеФайлы = ДополнительныеФайлыДляПубликации(СсылкаНаДокумент, РезультатПроверкиПакета.ДанныеФайловКПубликации);
	
	ДанныеДокумента = ДанныеТранспортногоКонтейнераПакетаЭДО(СсылкаНаДокумент, ДополнительныеФайлы);
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда
		ВидОперации = НСтр("ru = '1С:Share. Формирование транспортного пакета ЭДО.';
							|en = '1С:Share. Generate EDI transport package.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать электронный документ.';
								|en = 'Cannot generate an electronic document.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			ТекстСообщения, ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеПубликации = ДанныеДокументаДляПубликации(ДанныеДокумента);
	
	Если ДанныеПубликации = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверитьРазмерПакетаТранспортногоКонтейнера(РезультатПроверкиПакета, Отказ, ДанныеДокумента,
		ДанныеПубликации.ДвоичныеДанныеПакета);
	
	Если Отказ
		Или РезультатПроверкиПакета.ПревышенРазмерПакета Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОтправитьДокумент(ДанныеПубликации, Отказ);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса = Неопределено Или Не РезультатЗапроса.Данные.Свойство("shortLink")
		Или ПустаяСтрока(РезультатЗапроса.Данные.Свойство("shortLink")) Тогда
			
		ВидОперации = НСтр("ru = 'Получен некорректный ответ от сервиса 1С:Share';
							|en = 'An incorrect response is received from 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
		СообщениеОбОшибке = НСтр("ru = 'Получен некорректный ответ от сервиса 1С:Share';
								|en = 'An incorrect response is received from 1С:Share'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			СообщениеОбОшибке, СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ДанныеОпубликованногоДокумента = ИнтеграцияShareКлиентСервер.НовыеДанныеОпубликованногоДокумента();
	ДанныеОпубликованногоДокумента.ЭлектронныйДокумент          = СсылкаНаДокумент;
	ДанныеОпубликованногоДокумента.Контрагент                   = ДанныеДокумента.Контрагент;
	ДанныеОпубликованногоДокумента.ПредставлениеДокумента       = ДанныеДокумента.ПредставлениеОтправляемогоДокумента;
	ДанныеОпубликованногоДокумента.ОрганизацияНаименование      = ДанныеДокумента.ДанныеОрганизации.Наименование;
	ДанныеОпубликованногоДокумента.КонтрагентНаименование       = ДанныеДокумента.ДанныеКонтрагента.Наименование;
	ДанныеОпубликованногоДокумента.СуммаДокумента               = ДанныеДокумента.Сумма;
	ДанныеОпубликованногоДокумента.ВалютаДокумента              = ДанныеДокумента.ПредставлениеВалюты;
	ДанныеОпубликованногоДокумента.СсылкаДляСкачиванияДокумента = РезультатЗапроса.Данные.shortLink;
	
	ПараметрыДокумента.ДанныеОпубликованногоДокумента = ДанныеОпубликованногоДокумента;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДокумента

// Загружает данные документа по публичной ссылке из сервиса 1С:Share.
//
// Параметры:
//  СсылкаДляСкачивания - Строка - адрес ссылки для скачивания документа.
//  ДанныеДокумента     - См. РезультатОбработкиПолученияДанныхДокументаПоПубличнойСсылке
//  Отказ               - Булево - признак отказа выполнения.
//
Процедура ЗагрузитьКраткиеДанныеДокументаПоПубличнойСсылке(Знач СсылкаДляСкачивания, ДанныеДокумента, Отказ) Экспорт
	
	ЗапросСервиса = ЗапросСервисаПолучитьКраткиеДанныеДокументаПоПубличнойСсылке(СсылкаДляСкачивания);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = РезультатОбработкиПолученияДанныхДокументаПоПубличнойСсылке(РезультатЗапроса);
	
КонецПроцедуры

Процедура ЗагрузитьЭлектронныйДокументПоИдентификаторуДокумента(Знач ИдентификаторДокумента, АдресХранилищаРезультата) Экспорт
	
	Отказ = Ложь;
	
	ЗапросСервиса = ЗапросСервисаПолучитьДанныеДокументаДляЗагрузки(ИдентификаторДокумента);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаРезультата);
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = РезультатОбработкиЗагрузкиДокументаИзСервиса(РезультатЗапроса);
	ДанныеДокумента.ИдентификаторЭлектронногоДокумента = ИдентификаторДокумента;
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);

КонецПроцедуры

// Загружает данные электронного документа по публичной ссылке из сервиса 1С:Share.
//
// Параметры:
//  СсылкаДляСкачивания      - Строка - адрес ссылки для скачивания документа.
//  АдресХранилищаРезультата - Строка - адрес хранилища значений с загруженными данными документа.
//                                      См. НовоеОписаниеДанныхЭлектронногоДокумента
//
Процедура ЗагрузитьЭлектронныйДокументаПоПубличнойСсылкеИзСервиса(Знач СсылкаДляСкачивания, АдресХранилищаРезультата) Экспорт
	
	Отказ = Ложь;
	ЗапросСервиса = ЗапросСервисаПолучитьДанныеДокументаПоПубличнойСсылке(СсылкаДляСкачивания);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = РезультатОбработкиЗагрузкиДокументаИзСервиса(РезультатЗапроса);

	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьЭлектронныйДокументВОбъектУчета(Знач ОписаниеЭлектронногоДокумента, АдресХранилищаРезультата) Экспорт
	
	ДанныеДокумента = НовыеДанныеЭлектронногоДокументаДляЗагрузки();
	ПрочитатьДанныеЭлектронногоДокумента(ДанныеДокумента, ОписаниеЭлектронногоДокумента);
	
	Отказ = Ложь;
	ПроверитьСопоставлениеНоменклатурыДокумента(ДанныеДокумента, Отказ);
	
	Если Отказ Тогда
		ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);
		Возврат;
	КонецЕсли;
	
	СоздатьВУчетеЭлектронныйДокумент(ДанныеДокумента, АдресХранилищаРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

Функция НовыеДанныеЭлектронногоДокументаДляЗагрузки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеОрганизации", НовыйУчастникОбмена());
	Результат.Вставить("ДанныеКонтрагента", НовыйУчастникОбмена());
	Результат.Вставить("ИдентификаторЭлектронногоДокумента");
	Результат.Вставить("ПредставлениеДокумента");
	Результат.Вставить("ТипДокумента");
	
	Результат.Вставить("Контрагент");
	Результат.Вставить("Организация");
	Результат.Вставить("НоменклатураСопоставления", Новый Массив());
	Результат.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	Результат.Вставить("ДанныеОсновногоФайла");
	Результат.Вставить("ДанныеФайлаДопДанных");
	Результат.Вставить("НаправлениеЭД", ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий"));
	Результат.Вставить("ДокументУчета");
	Результат.Вставить("ИдентификаторДокумента");
	
	Результат.Вставить("ДополнительныеФайлыДокумента");
	Результат.Вставить("ФайлыВизуализации", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Словарь

Функция СсылкаНаИнструкциюСервиса() Экспорт
	
	СсылкаНаИнструкциюСервиса = СсылкаНаИнструкциюСервисаВБЭД();
	ИнтеграцияShareПереопределяемый.ПриОпределенииГиперссылкиНаИнструкциюПоРаботеССервисом(СсылкаНаИнструкциюСервиса);
	
	Возврат СсылкаНаИнструкциюСервиса;
	
КонецФункции

#КонецОбласти

#Область ПубликацияДокумента

// Параметры:
//  ОбъектУчета - ДокументСсылка, СправочникСсылка - объект учета к публикации.
//
// Возвращаемое значение:
//  Структура - параметры объекта учета к публикации электронного документа:
//   * ЯвляетсяГруппой - Булево
//   * ДанныеФайлов    - Массив из См. ИнтеграцияShareКлиентСервер.НовыеДанныеФайлаДляВыбораКПубликации
Функция ПараметрыОбъектаУчетаКПубликации(ОбъектУчета) Экспорт
	
	ПараметрыОбъектаУчета = Новый Структура;
	ПараметрыОбъектаУчета.Вставить("ЯвляетсяГруппой", Ложь);
	ПараметрыОбъектаУчета.Вставить("ДанныеФайлов", Новый Массив);
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектУчета.Метаданные()) Тогда

		ЗначениеГруппыОбъектаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУчета, "ЭтоГруппа");
		Если ЗначениеГруппыОбъектаУчета = Истина Тогда
			ПараметрыОбъектаУчета.ЯвляетсяГруппой = Истина;
			Возврат ПараметрыОбъектаУчета;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьФайлыДокументаДляВыбораКПубликации(ПараметрыОбъектаУчета.ДанныеФайлов, ОбъектУчета);
	
	Возврат ПараметрыОбъектаУчета;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиСервиса

Функция НастройкиСервисаИзХранилищаПользователя();
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
		ИмяКлючаХранилищаСНастройкамиСервиса());

КонецФункции
	
Процедура СохранитьНастройкиСервисаВХранилищеПользователя(Знач НастройкиСервиса)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
		ИмяКлючаХранилищаСНастройкамиСервиса(),
		НастройкиСервиса);

КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Описание запроса к сервису.
//
// Возвращаемое значение:
//  Структура - содержит стандартный набор параметров для выполнения команд сервиса:
//    * Сервис        - Строка - имя сервиса.
//    * АдресСервиса  - Строка - адрес сервиса.
//    * Наименование  - Строка - полное наименование метода.
//    * СтрокаЗапроса - Строка - адрес URI метода.
//    * Метод         - Строка - метод HTTP соединения, например POST.
//    * Данные        - ДвоичныеДанные, Строка, Неопределено - передаваемые данные.
//    * Ошибки        - Соответствие из КлючИЗначение - Соответствие ошибок, например: (404, "Не найдено"):
//      ** Ключ     - Число
//      ** Значение - Строка
//    * БлокироватьСообщенияОбОшибках - Булево - блокировка вывода сообщения об ошибках.
//    * Заголовки                     - Соответствие из Строка- данные заголовков:
//       ** Ключ - Строка - наименование заголовка HTTP запроса.
//       ** Значение - Строка - значение заголовка HTTP запроса.
//    * ТипПередаваемогоКонтента      - Строка - описание контента передаваемого в заголовке.
//    * ТипВозвращаемогоКонтента      - Строка - описание контента для чтения данных.
//    * ДопустимыеКодыСостояния       - Массив из Число - коды состояния, означающие успешное выполнение запроса.
//
Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Сервис"                       , "Share");
	ЗапросСервиса.Вставить("АдресСервиса"                 , "");
	ЗапросСервиса.Вставить("Наименование"                 , "");
	ЗапросСервиса.Вставить("СтрокаЗапроса"                , "");
	ЗапросСервиса.Вставить("Метод"                        , "");
	ЗапросСервиса.Вставить("Данные"                       , Неопределено);
	ЗапросСервиса.Вставить("Ошибки"                       , Новый Соответствие);
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь);
	ЗапросСервиса.Вставить("Заголовки"                    , Новый Соответствие);
	ЗапросСервиса.Вставить("ТипПередаваемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ТипВозвращаемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ДопустимыеКодыСостояния"      , Новый Массив());

	Возврат ЗапросСервиса;
	
КонецФункции

Функция НовыйОтборСопоставленияНоменклатурыДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Владелец");
	Результат.Вставить("Идентификатор");
	Результат.Вставить("ИдентификаторНоменклатурыСервиса");
	Результат.Вставить("ИдентификаторХарактеристикиСервиса");
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаСопоставленияНоменклатурыДокумента()

	НоменклатураСопоставленияДокументов = Новый ТаблицаЗначений;
	НоменклатураСопоставленияДокументов.Колонки.Добавить("Владелец");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("Идентификатор");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("ИдентификаторНоменклатурыСервиса");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("ИдентификаторХарактеристикиСервиса");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("ДанныеНоменклатурыКонтрагента");

	Возврат НоменклатураСопоставленияДокументов;

КонецФункции

Функция НовоеОписаниеДанныхЗагрузкиЭлектронногоДокумента()
	
	ДанныеЗагрузки = Новый Структура;
	ДанныеЗагрузки.Вставить("Дата", Дата(1,1,1));
	ДанныеЗагрузки.Вставить("ИдентификаторДокумента", "");
	ДанныеЗагрузки.Вставить("ИдентификаторВнешнейСистемы", "");
	ДанныеЗагрузки.Вставить("ЗагруженКакПрисоединенныйДокумент", Ложь);
	ДанныеЗагрузки.Вставить("ТипМетаданныхВладельца", "");
	ДанныеЗагрузки.Вставить("ОбъектУчета");
	ДанныеЗагрузки.Вставить("СпособЗагрузки");
	
	Возврат ДанныеЗагрузки;
	
КонецФункции

// Возвращаемое значение:
//  Структура - описание данных электронного документа загруженного из сервиса 1С:Share:
//   * ИдентификаторЭлектронногоДокумента - Строка - идентификатор загруженного электронного документа из сервиса.
//   * ВерсияФормата - Строка - версия формата транспортного контейнера.
//   * ХранилищеТранспортногоКонтейнера - Неопределено
//                                        ХранилищеЗначения из См. НовоеОписаниеДанныхТранспортногоКонтейнера 
//   * ДанныеЗагрузкиДокумента - Структура из См. НовоеОписаниеДанныхЗагрузкиЭлектронногоДокумента - заполнен, если документ
//                                                                                  уже загружался в учетную базу.
//   * ДоступКДокументуЗакрыт - Булево - у документа истекло время хранения или к нему закрыли доступ.
//   * ДокументНеНайден - Булево - документ не найден в сервисе.
//
Функция НовоеОписаниеДанныхЭлектронногоДокумента()
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ИдентификаторЭлектронногоДокумента", "");
	ДанныеДокумента.Вставить("ВерсияФормата", "");
	ДанныеДокумента.Вставить("ХранилищеТранспортногоКонтейнера", Неопределено);
	ДанныеДокумента.Вставить("ДанныеЗагрузкиДокумента", НовоеОписаниеДанныхЗагрузкиЭлектронногоДокумента());
	ДанныеДокумента.Вставить("ДоступКДокументуЗакрыт", Ложь);
	ДанныеДокумента.Вставить("ДокументНеНайден", Ложь);
	
	Возврат ДанныеДокумента;
	
КонецФункции

Функция НовыйУчастникОбмена()
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование");
	Результат.Вставить("ИНН");
	Результат.Вставить("КПП");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  См. СинхронизацияЭДО.НовоеОписаниеДополнительныхФайлов
Функция НовоеОписаниеДополнительныхФайлов()
	
	Возврат СинхронизацияЭДО.НовоеОписаниеДополнительныхФайлов();
	
КонецФункции

// Конструктор параметров файла визуализации электронного документа.
//
// Возвращаемое значение:
//  - Неопределено, Массив из Структура - файлы визуализации документа:
//     * Имя - Строка - имя файла с расширением.
//     * ИмяБезРасширения - Строка - имя файла без расширения.
//     * Расширение - Строка - расширение файла без точки, например "pdf".
//     * ДвоичныеДанныеФайла - Неопределено, ДвоичныеДанные - содержание файла.
//     * Представление - Строка - представление файла для отображения пользователю.
Функция НовыйФайлВизуализации()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", "");
	Результат.Вставить("ИмяБезРасширения", "");
	Результат.Вставить("Расширение", "");
	Результат.Вставить("ДвоичныеДанныеФайла", Неопределено);
	Результат.Вставить("Представление", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура - описание данных транспортного контейнера по электронному документу из сервиса 1С:Share:
//   * ДеревоТранспортногоКонтейнера - Неопределено, ДеревоЗначений из см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента -
//                                 данные из транспортного контейнера. Строится по макету
//                                 см. Обработка.СервисShare.Макет.ТранспортныйКонтейнер.
//   * ФайлыКонтейнера - ТаблицаЗначений - содержит данные о файлах из контейнера:
//     ** Имя - Строка - имя файла с расширением.
//     ** ИмяБезРасширения - Строка - имя файла без расширения.
//     ** Расширение - Строка - расширение файла без точки, например "pdf".
//     ** ДвоичныеДанныеФайла - ДвоичныеДанные - содержание файла.
//     ** ВидФайла - Строка - вариант вида файла из см. ИнтеграцияShareКлиентСервер.ВидыФайловДокумента.
//     ** Представление - Строка - представление файла, которое будет отображаться пользователю.
//
Функция НовоеОписаниеДанныхТранспортногоКонтейнера()
	
	ФайлыКонтейнера = Новый ТаблицаЗначений;
	ФайлыКонтейнера.Колонки.Добавить("Имя");
	ФайлыКонтейнера.Колонки.Добавить("ИмяБезРасширения");
	ФайлыКонтейнера.Колонки.Добавить("Расширение");
	ФайлыКонтейнера.Колонки.Добавить("ДвоичныеДанныеФайла");
	ФайлыКонтейнера.Колонки.Добавить("ВидФайла");
	ФайлыКонтейнера.Колонки.Добавить("Представление");
	
	ДанныеКонтейнера = Новый Структура;
	ДанныеКонтейнера.Вставить("ДеревоТранспортногоКонтейнера", Неопределено);
	ДанныеКонтейнера.Вставить("ФайлыКонтейнера", ФайлыКонтейнера);
	
	Возврат ДанныеКонтейнера;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значения в формате строки JSON.
//
// Параметры:
//  Данные          - Произвольный - значение записи JSON.
//  ПараметрыЗаписи - ПараметрыЗаписиJSON  - параметры записи JSON.
// 
// Возвращаемое значение:
//  Строка - значение в строке JSON.
//
Функция ЗначениеВJSON(Данные, ПараметрыЗаписи = Неопределено)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураИзПотокаJSON(Знач ПотокДанных)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ПотокДанных);
	Результат = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO);

	ЧтениеJSON.Закрыть();
	ПотокДанных.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСервиса

// Параметры запроса отправить документ.
//
// Параметры:
//  ДанныеПубликации - Структура - данные документа к публикации.
//  Отказ            - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. НовыйЗапросСервиса.
//
Функция ЗапросСервисаОтправитьДокумент(Знач ДанныеПубликации, Отказ = Ложь)
	
	НастройкиПубликации = ДанныеПубликации.НастройкиПубликации;
	
	СхемаПубликации = ?(ЗначениеЗаполнено(НастройкиПубликации.СхемаПубликации),
		НастройкиПубликации.СхемаПубликации,
		ИнтеграцияShareКлиентСервер.СхемыПубликацииДокумента().Стандартная);
	
	ПараметрыЗапроса = СтрШаблон("?publicationScheme=%1", СхемаПубликации);
	
	Если ЗначениеЗаполнено(НастройкиПубликации.АдресОплаты) Тогда
		ПараметрыЗапроса = СтрШаблон("%1&URLPayment=%2", ПараметрыЗапроса, НастройкиПубликации.АдресОплаты);
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Данные                   = ДанныеПубликации.ДвоичныеДанныеПакета;
	ЗапросСервиса.СтрокаЗапроса            = СтрШаблон("%1/documents%2", ПутьПубликацииСервиса(), ПараметрыЗапроса);
	ЗапросСервиса.ТипПередаваемогоКонтента = "application/vnd-1cshare-doc.v2+bin";
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-shortLink.v1+json";
	ЗапросСервиса.Метод                    = "POST";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияСоздано());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Отправка документа в сервис 1С:Share';
			|en = 'Send the document to 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьКраткиеДанныеДокументаПоПубличнойСсылке(Знач СсылкаДляСкачивания)
	
	ОписаниеСсылки = ОбщегоНазначенияКлиентСервер.СтруктураURI(СсылкаДляСкачивания);
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.АдресСервиса             = ОписаниеСсылки.ИмяСервера;
	ЗапросСервиса.СтрокаЗапроса            = ОписаниеСсылки.ПутьНаСервере;
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-shortLink-doc.v1+json";
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияНеНайден());
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияУдален());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение сведений публичной ссылки в сервисе 1С:Share';
			|en = 'Receive public link information in 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьДанныеДокументаДляЗагрузки(Знач ИдентификаторДокументаСервиса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = СтрШаблон("%1/documents/%2", ПутьПубликацииСервиса(),
		ИдентификаторДокументаСервиса);
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-doc.v2+json";
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение данных документа в сервисе 1С:Share';
			|en = 'Receive document data in 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьДанныеДокументаПоПубличнойСсылке(Знач СсылкаДляСкачивания)
	
	ОписаниеСсылки = ОбщегоНазначенияКлиентСервер.СтруктураURI(СсылкаДляСкачивания);
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.АдресСервиса             = ОписаниеСсылки.ИмяСервера;
	ЗапросСервиса.СтрокаЗапроса            = ОписаниеСсылки.ПутьНаСервере;
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-shortLink-docFull.v2+json";
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияНеНайден());
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияУдален());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение сведений публичной ссылки в сервисе 1С:Share';
			|en = 'Receive public link information in 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ОписаниеДокументаПоПубличнойСсылкеВМоделиСервиса(Знач РезультатЗапроса)
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеОрганизации",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "nameSender"));
	Результат.Вставить("ИдентификаторЭлектронногоДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentIdLink"));
	Результат.Вставить("ИдентификаторДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentGuid"));
	Результат.Вставить("ТипДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentDataType"));
	Результат.Вставить("ДатаДокумента",
		Формат(ПрочитатьДатуJSON(
				ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentDate"),
				ФорматДатыJSON.ISO),
			"ДЛФ=D;"));
	Результат.Вставить("НомерДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentNumber"));
	Результат.Вставить("ПредставлениеДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentTitle"));
	Результат.Вставить("СпособЗагрузки",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "downloadMethod"));
	Результат.Вставить("ТипМетаданныхВладельца",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "typeMetadataOfDocumentOwner"));

	Возврат Результат;
	
КонецФункции

Функция ЗапросСервисаОтметитьЗагрузкуДокумента(Знач ДанныеДокумента, Отказ = Ложь)

	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("documentGuid"               , XMLСтрока(ДанныеДокумента.ОбъектУчета));
	ТелоЗапроса.Вставить("downloadMethod"             , ДанныеДокумента.СпособЗагрузки);
	ТелоЗапроса.Вставить("typeMetadataOfDocumentOwner", ДанныеДокумента.ТипМетаданныхДокументаВладельца);
	ТелоЗапроса.Вставить("dateOfDownload"             , ТекущаяУниверсальнаяДата());

	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Данные                   = ЗначениеВJSON(ТелоЗапроса);
	ЗапросСервиса.СтрокаЗапроса            = СтрШаблон("%1/documents/%2/download", ПутьПубликацииСервиса(),
		ДанныеДокумента.ИдентификаторЭлектронногоДокумента);
	ЗапросСервиса.ТипПередаваемогоКонтента = "application/vnd-1cshare-download-doc.v2+json";
	ЗапросСервиса.Метод                    = "PATCH";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Изменение состояния электронного документа в сервисе 1С:Share';
			|en = 'Change the electronic document state in 1С:Share'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;

КонецФункции

Функция НастройкиСервисаДляПубликацииИзСервиса(Отказ)
	
	ЗапросСервиса = ЗапросСервисаПолучитьНастройкиДляПубликации();
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСервиса = РезультатЗапроса.Данные;
	
	МаксимальныйРазмерПакета = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "maxSizeTransportPackage");

	НастройкиСервиса = Новый Структура;
	НастройкиСервиса.Вставить("МаксимальныйРазмерПакетаВБайтах", МаксимальныйРазмерПакета);
	
	Возврат НастройкиСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьНастройкиДляПубликации()

	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = СтрШаблон("%1/settings", ПутьПубликацииСервиса());
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-settings.v1+json";
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение настроек сервиса для публикации документа в сервисе 1С:Share';
			|en = 'Receive service settings to publishing a document in 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;

КонецФункции

#КонецОбласти

#Область ВыполнениеЗапросов

// Выполнение команды сервиса.
//
// Параметры:
//   ЗапросСервиса - Структура - параметры вызова или имя команды, см. НовыйЗапросСервиса.
//   Отказ         - Булево - признак ошибки выполнения.
//   ТекстОшибки   - Строка - текст ошибки при выполнении команды.
//
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьЗапрос(Знач ЗапросСервиса, Отказ, ТекстОшибки = Неопределено)
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	// Определение имени сервиса.
	ИмяСервиса = ИнтеграцияShareКлиентСервер.ИмяСервиса();
	Если Не ПустаяСтрока(ЗапросСервиса.Сервис) Тогда
		ИмяСервиса = ЗапросСервиса.Сервис;
	КонецЕсли;
	
	// Установка параметров соединения.
	ПараметрыСоединения = ИнтеграцияShareПовтИсп.ПараметрыСоединения(ИмяСервиса, ЗапросСервиса.АдресСервиса);
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения с сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервисом 1С:Share. Подробности см. в журнале регистрации.';
							|en = 'No connection to 1С:Share. For more information, see the event log.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ЗапросСервиса.СтрокаЗапроса, ЗапросСервиса.Заголовки);
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипПередаваемогоКонтента) Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипПередаваемогоКонтента(),
			ЗапросСервиса.ТипПередаваемогоКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипВозвращаемогоКонтента) Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипВозвращаемогоКонтента(),
			ЗапросСервиса.ТипВозвращаемогоКонтента);
	КонецЕсли;
	
	УстановитьСлужебныеДанныеВЗаголовки(HTTPЗапрос);
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, HTTPЗапрос);
	Исключение
		ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ЗафиксироватьОшибкуВЗапросе(Соединение, ЗапросСервиса, ПодробноеОписаниеОшибки, Отказ);
		Возврат Неопределено;
	КонецПопытки;
	
	// Разбор тела ответа
	РезультатВыполнения = ОбработатьОтветСервиса(HTTPОтвет, ЗапросСервиса, ТекстОшибки, Отказ);
	
	// Выполнить перенаправление запроса
	Если РезультатВыполнения.КодСостояния = КодСостоянияРедиректаЗапроса() Тогда
		ЗапросСервисаРедиректа = НовыйЗапросСервиса();
		ЗаполнитьПараметрыЗапросаСервисаРедиректа(ЗапросСервисаРедиректа, ЗапросСервиса, РезультатВыполнения);
		ВыполнитьЗапрос(ЗапросСервисаРедиректа, Отказ, ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Или Не ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ОбработатьОтветСервиса(Знач HTTPОтвет, Знач ЗапросСервиса, ТекстОшибки, Отказ)
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния", КодСостояния);
	Результат.Вставить("Данные"      , Неопределено);
	
	Если КодСостояния = КодСостоянияРедиректаЗапроса() Тогда
		СтрокаАдреса = URLРедиректа(HTTPОтвет, ТекстОшибки);
		Если СтрокаАдреса <> Неопределено Тогда
			Результат.Данные = СтрокаАдреса;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапросВыполненКорректно(ЗапросСервиса, HTTPОтвет, ТекстОшибки) Тогда
		Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Данные = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Попытка
			ПотокДанных = HTTPОтвет.ПолучитьТелоКакПоток();
			Данные = СтруктураИзПотокаJSON(ПотокДанных);
		Исключение
			Отказ = Истина;
			ТекстОшибки = ТекстОшибкиПриВыполненииЗапроса(КодСостояния, HTTPОтвет, ТекстОшибки);
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки, ИнтеграцияShareКлиентСервер.ИмяПодсистемы());
		КонецПопытки;
	КонецЕсли;
	
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросВыполненКорректно(Знач ЗапросСервиса, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.ДопустимыеКодыСостояния.Количество() = 0
		Или ЗапросСервиса.ДопустимыеКодыСостояния.Найти(КодСостояния) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибкиПриВыполненииЗапроса(КодСостояния, HTTPОтвет, ТекстОшибки);
	
	Возврат Ложь;
	
КонецФункции

Функция ТекстОшибкиПриВыполненииЗапроса(Знач КодСостояния, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПодстрокиОшибки = Новый Массив;
	Если ЕстьПодробноеОписаниеОшибки(HTTPОтвет) Тогда
		ОписаниеОшибки = СтруктураИзПотокаJSON(HTTPОтвет.ПолучитьТелоКакПоток());
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru = 'Код состояния %1 - %2';
												|en = 'Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ОписаниеОшибки.title));
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru = 'Компонент сервиса: %1';
												|en = 'Service component: %1'", КодЯзыка), ОписаниеОшибки.type));
		
		ИдентификаторТрассировки = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "traceId");
		Если ЗначениеЗаполнено(ИдентификаторТрассировки) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор трассировки: %1';
													|en = 'Tracing ID: %1'", КодЯзыка),
			ИдентификаторТрассировки));
		КонецЕсли;
		
		ПодробноеОписание = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "detail");
		Если ЗначениеЗаполнено(ПодробноеОписание) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru = 'Подробное описание: %1';
													|en = 'Details: %1'", КодЯзыка), ПодробноеОписание));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтандартныеТекстыОшибокHTTPЗапросов().Получить(КодСостояния);
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КодСостояния >= 500 Тогда
				ТекстОшибки = НСтр("ru = 'внутренняя ошибка сервиса';
									|en = 'internal service error'", КодЯзыка);
			ИначеЕсли КодСостояния >= 400 Тогда
				ТекстОшибки = НСтр("ru = 'ошибка параметров запроса';
									|en = 'request parameter error'", КодЯзыка);
			Иначе
				ТекстОшибки = НСтр("ru = 'неизвестная ошибка';
									|en = 'unknown error'", КодЯзыка);
			КонецЕсли;
		КонецЕсли;
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru = 'Код состояния %1 - %2';
												|en = 'Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ТекстОшибки));
		
		Тело = "";
		Попытка
			Тело = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если Не ПустаяСтрока(Тело) Тогда
				ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru = 'Тело ответа: %1';
														|en = 'Response body: %1'", КодЯзыка), Тело));
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПодстрокиОшибки, Символы.ПС);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ЗафиксироватьОшибкуВЗапросе(Знач ПараметрыСоединения, Знач ЗапросСервиса,
	Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru = 'Ошибка взаимодействия с сервисом 1С:Share';
												|en = '1С:Share interaction error'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru = 'Хост: %1';
												|en = 'Host: %1'"), ПараметрыСоединения.Сервер));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru = 'Запрос: %1 %2.';
												|en = 'Request: %1 %2.'"), ЗапросСервиса.Метод,
		ЗапросСервиса.СтрокаЗапроса));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru = 'Текст ошибки: %1';
												|en = 'Error text: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИнтеграцияShareКлиентСервер.ИмяПодсистемы());
	ОбщегоНазначения.СообщитьПользователю(ПодробноеОписаниеОшибки);

	Возврат ПодробноеОписаниеОшибки;

КонецФункции

Функция ЕстьПодробноеОписаниеОшибки(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаТипПередаваемогоКонтента()) = ТипКонтентаОшибка();
	
КонецФункции

Функция URLРедиректа(Знач HTTPОтвет, ТекстОшибки = Неопределено)
	
	Результат = HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаРедиректа());

	Если Результат <> Неопределено Тогда
		Результат = СокрЛП(Результат);
		Если ПустаяСтрока(Результат) Тогда
			Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при выполнении запроса %1. Некорректное перенаправление,
				 | отсутствует HTTP-заголовок ответа ""Location"".';
				 |en = 'An error occurred when executing the %1 request. Incorrect redirection.
				 | No HTTP Location response header.'", ОбщегоНазначения.КодОсновногоЯзыка()), HTTPОтвет);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапросаСервисаРедиректа(ЗапросСервиса, Знач ДанныеИсходногоЗапроса,
	Знач РезультатИсходногоЗапроса)
	
	ЗаполнитьЗначенияСвойств(ЗапросСервиса, ДанныеИсходногоЗапроса, , "АдресСервиса, СтрокаЗапроса");
	
	URLРедиректа = РезультатИсходногоЗапроса.Данные;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLРедиректа);
	
	ЗапросСервиса.СтрокаЗапроса = СтруктураURI.ПутьНаСервере;
	ЗапросСервиса.АдресСервиса  = СтруктураURI.ИмяСервера;

КонецПроцедуры

Процедура УстановитьСлужебныеДанныеВЗаголовки(HTTPЗапрос)
	
	ДанныеЗаголовков = ИнтеграцияShareПовтИсп.СлужебныеДанныеЗаголовковЗапроса();
	
	Для Каждого СтрокаЗаголовка Из ДанныеЗаголовков Цикл
		HTTPЗапрос.Заголовки.Вставить(СтрокаЗаголовка.Ключ, СтрокаЗаголовка.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Словарь

Функция ИмяЗаголовкаТипПередаваемогоКонтента()
	
	Возврат "Content-Type";
	
КонецФункции

Функция ИмяЗаголовкаТипВозвращаемогоКонтента()
	
	Возврат "Accept";
	
КонецФункции

Функция ИмяЗаголовкаРедиректа()
	
	Возврат "Location";
	
КонецФункции

Функция ТипКонтентаОшибка()
	
	Возврат "application/problem+json";
	
КонецФункции

Функция КодСостоянияРедиректаЗапроса()
	
	Возврат 302;
	
КонецФункции

Функция КодСостоянияВыполнено()
	
	Возврат 200;
	
КонецФункции

Функция КодСостоянияНеНайден()
	
	Возврат 404;
	
КонецФункции

Функция КодСостоянияУдален()
	
	Возврат 410;
	
КонецФункции

Функция КодСостоянияСоздано()
	
	Возврат 201;
	
КонецФункции

Функция СтандартныеТекстыОшибокHTTPЗапросов()

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'ошибка в запросе.';
										|en = 'error in request.'", КодЯзыка));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'неверные данные аутентификации.';
										|en = 'invalid authentication data.'", КодЯзыка));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'у клиента нет доступа к ресурсу.';
										|en = 'the client has no access to resource.'", КодЯзыка));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'на сервере нет ресурса по указанному URI.';
										|en = 'the specified URI does not contain resource on server.'", КодЯзыка));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'указанный метод нельзя применить к текущему ресурсу.';
										|en = 'the specified method cannot be applied to the current resource.'", КодЯзыка));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'запрошенный URI не может удовлетворить переданным в заголовке
		|характеристикам.';
		|en = 'the requested URI cannot meet the characteristics passed in
		|the header.'", КодЯзыка));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'для доступа к серверу требуется аутентификация
		|для прокси-сервера';
		|en = 'proxy server authentication is required to access
		|the server'", КодЯзыка));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'время ожидания сервером передачи от клиента истекло.';
										|en = 'request timeout.'", КодЯзыка));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'запрос не может быть выполнен из-за конфликтного
		|обращения к ресурсу.';
		|en = 'cannot execute the request due to an resource
		|access conflict.'", КодЯзыка));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'ресурс был удален и теперь недоступен.';
										|en = 'resource has been deleted and is now unavailable.'", КодЯзыка));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'не указан объем передаваемых данных в заголовке.';
										|en = 'scope of transferred data is not specified in the header.'", КодЯзыка));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'ни одно из условных полей заголовка запроса не было выполнено.';
										|en = 'none of the request header conditional fields were met.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'слишком большой размер тела запроса.';
										|en = 'request body is too large.'", КодЯзыка));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'слишком длинный URL.';
										|en = 'URL is too long.'", КодЯзыка));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'контент переданного типа не поддерживается.';
										|en = 'content of the passed type is not supported.'", КодЯзыка));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'имеется логическая ошибка, из-за которой невозможно
		|произвести операцию.';
		|en = 'there is a logic error making the operation
		|unavailable.'", КодЯзыка));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'ресурс заблокирован.';
										|en = 'resource is blocked.'", КодЯзыка));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'необходимо обновить протокол.';
										|en = 'protocol update is required.'", КодЯзыка));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'слишком много запросов в единицу времени.';
										|en = 'too many requests per time unit.'", КодЯзыка));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'превышена допустимая длина заголовков.';
										|en = 'permissible header length is exceeded.'", КодЯзыка));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'запрашиваемый адрес недоступен.';
										|en = 'requested address is not available.'", КодЯзыка));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'поступило недостаточно информации.';
										|en = 'insufficient information received.'", КодЯзыка));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'внутренняя ошибка сервера.';
										|en = 'internal server error.'", КодЯзыка));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'сервер не поддерживает возможностей, необходимых
		|для обработки запроса.';
		|en = 'server does not support features required
		|to process the request.'", КодЯзыка));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'сервер, выступая в роли шлюза или прокси-сервера,
		|получил недействительное ответное сообщение от вышестоящего сервера.';
		|en = 'server received an invalid response from the upstream server
		|while acting as a gateway or proxy server.'", КодЯзыка));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'сервер временно не имеет возможности обрабатывать запросы
		|по техническим причинам.';
		|en = 'server temporarily cannot process request
		|due to technical reasons.'", КодЯзыка));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'сервер в роли шлюза или прокси-сервера не дождался ответа
		|от вышестоящего сервера для завершения текущего запроса.';
		|en = 'server did not receive a timely response from the upstream server
		|while acting as a gateway or proxy server.'", КодЯзыка));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'сервер не поддерживает указанную в запросе
		|версию протокола HTTP.';
		|en = 'server does not support HTTP version
		|specified in the request.'", КодЯзыка));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'не хватает места для выполнения текущего запроса.';
										|en = 'not enough space to execute current request.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'на сервере отсутствует расширение, которое желает
		|использовать клиент.';
		|en = 'the extension required by the client
		|is missing on server.'", КодЯзыка));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'необходимо авторизоваться в сети провайдера.';
										|en = 'authentication in provider network is required.'", КодЯзыка));
	
	Возврат СоответствиеКодов;
	
КонецФункции

Функция ИмяКлючаХранилищаСНастройкамиСервиса()
	
	Возврат "НастройкиСервисаShare";
	
КонецФункции

Функция АктуальнаяВерсияФорматаТранспортногоКонтейнера()
	
	Возврат "1.0.1";
	
КонецФункции

Функция ИмяФайлаТранспортногоКонтейнера()
	
	Возврат "metacard.xml";
	
КонецФункции

Функция ДеревоДанныхТранспортногоКонтейнера()
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("СервисShare.ТранспортныйКонтейнер");
	
КонецФункции

Функция ПространствоИмен()
	
	Возврат Метаданные.ПакетыXDTO.ContainerShare.ПространствоИмен;
	
КонецФункции

Функция ИмяПакетаКонтейнера()
	
	Возврат "ContainerShare";
	
КонецФункции

Функция ПутьПубликацииСервиса()
	
	Возврат "api";
	
КонецФункции

Функция СсылкаНаИнструкциюСервисаВБЭД()
	
	Возврат "https://its.1c.ru/db/bed1912doc#content:1793:hdoc";
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекцией

// Получить значение данных коллекции в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив из строка- элементы пути, например pathToRoot[0]; categories.
//  ЕстьОшибки - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваКоллекцииВРекурсии(Знач Значение, Знач СвойстваПути, ЕстьОшибки = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если Не ЭтоКоллекция(Значение) Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Структура") И Не Значение.Свойство(Свойство) 
		Или ТипЗнч(Значение) = Тип("Соответствие") И Значение.Получить(Свойство) = Неопределено Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

Функция ЗначениеКоллекцииПоАбсолютномуПути(Знач Значение, Знач Путь, ЕстьОшибки = Ложь) Экспорт
	
	СвойстваПути = СтрРазделить(Путь, ".", Ложь);
	
	Попытка
		Результат = ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	Исключение
		Результат = Неопределено;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоКоллекция(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие");
	
КонецФункции

#КонецОбласти

#Область ПубликацияДокумента

Функция ДанныеФайлаДляВыбораКПубликации(Знач СсылкаНаФайл, Знач ДанныеПрисоединенногоФайла)
	
	ДанныеФайла = ИнтеграцияShareКлиентСервер.НовыеДанныеФайлаДляВыбораКПубликации();
	ДанныеФайла.СсылкаНаФайл = СсылкаНаФайл;

	ДанныеФайла.Наименование = ДанныеПрисоединенногоФайла.Наименование;
	ДанныеФайла.Расширение   = ДанныеПрисоединенногоФайла.Расширение;
	ДанныеФайла.ИмяФайла     = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.Наименование,
		ДанныеФайла.Расширение);

	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеФайла.ДвоичныеДанныеФайла = ДвоичныеДанныеФайла;
	ДанныеФайла.Размер              = ДвоичныеДанныеФайла.Размер();

	Возврат ДанныеФайла;
		
КонецФункции

#КонецОбласти

#Область ФормированиеТранспортногоПакета

Функция ДополнительныеФайлыДляПубликации(Знач СсылкаНаДокумент, Знач ДанныеФайлов)
	
	ДополнительныеФайлы = НовоеОписаниеДополнительныхФайлов();
	
	Если Не ЗначениеЗаполнено(ДанныеФайлов) Тогда
		Возврат ДополнительныеФайлы; // Дополнительные файлы отсутствуют
	КонецЕсли;
	
	Для Каждого СтрокаФайла Из ДанныеФайлов Цикл
		ДополнительныйФайл = ДополнительныеФайлы.Добавить();
		ДополнительныйФайл.ОбъектУчета         = СсылкаНаДокумент;
		ДополнительныйФайл.ДвоичныеДанныеФайла = СтрокаФайла.ДвоичныеДанныеФайла;
		ДополнительныйФайл.ИмяФайла            = СтрокаФайла.ИмяФайла;
		ДополнительныйФайл.РасширениеБезТочки  = СтрокаФайла.Расширение;
		ДополнительныйФайл.ИмяБезРасширения    = СтрокаФайла.Наименование;
	КонецЦикла;
	
	Возврат ДополнительныеФайлы;
	
КонецФункции

Функция ДанныеДокументаДляПубликации(ДанныеДокумента)
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ошибки = Неопределено;
	ИсходныйТранспортныйКонтейнер = ДеревоДанныхТранспортногоКонтейнера();
	
	АдресКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ПодготовитьТранспортныйКонтейнер(ИсходныйТранспортныйКонтейнер, АдресКаталога, ДанныеДокумента, Ошибки);
	
	ИтоговыйТранспортныйКонтейнер = ИсходныйТранспортныйКонтейнер.Скопировать();
	
	ИнтеграцияShareПереопределяемый.ПриОпределенииДанныхПубликуемогоДокумента(ИтоговыйТранспортныйКонтейнер,
		ДанныеДокумента.ОбъектУчета);
	
	ОбъединитьДанныеТранспортногоКонтейнера(ИтоговыйТранспортныйКонтейнер, ИсходныйТранспортныйКонтейнер);
	
	// Выполним проверку на заполненность обязательных полей.
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ИтоговыйТранспортныйКонтейнер, Ошибки);
	КонецЕсли;
	
	ДополнитьДанныеДокументаИзДерева(ДанныеДокумента, ИтоговыйТранспортныйКонтейнер);
	
	НастройкиПубликации = НастройкиПубликацииДокумента(ИтоговыйТранспортныйКонтейнер);
	
	ТранспортнаяИнформация = СформироватьТранспортныйКонтейнерCML(ИтоговыйТранспортныйКонтейнер, Ошибки, ДанныеДокумента.ОбъектУчета);
	Если ТранспортнаяИнформация <> Неопределено Тогда
		ИмяФайла = АдресКаталога + ИмяФайлаТранспортногоКонтейнера();
		ТранспортнаяИнформация.Записать(ИмяФайла);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		
		ОбъектыДобавляемыеВАрхив = АдресКаталога + "*";
		
		ПараметрыАрхива = РаботаСФайламиБЭД.НовыеПараметрыФормированияАрхива();
		ПараметрыАрхива.РежимСохраненияПутей = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
		ПараметрыАрхива.РежимОбработкиПодкаталогов = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
		
		Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыДобавляемыеВАрхив), , ПараметрыАрхива);
		
	Иначе
		Архив = Неопределено;
		ВидОперации = НСтр("ru = 'Формирование транспортного контейнера Share';
							|en = 'Generate Share transport container'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ТекстСообщения = СтрШаблон(НСтр("ru = 'При формирование возникли следующие ошибки:
			|%1';
			|en = 'The following errors occurred while generating:
			|%1'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекстОшибки);
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(), ТекстСообщения,
			ТекстСообщения);
	КонецЕсли;
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
	
	ДанныеПубликации = Новый Структура;
	ДанныеПубликации.Вставить("ДвоичныеДанныеПакета", Архив);
	ДанныеПубликации.Вставить("НастройкиПубликации", НастройкиПубликации);
	
	Возврат ДанныеПубликации;
	
КонецФункции

Процедура ОбъединитьДанныеТранспортногоКонтейнера(ИтоговыйТранспортныйКонтейнер, Знач ИсходныйТранспортныйКонтейнер)
	
	ТранспортнаяИнформация = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ИсходныйТранспортныйКонтейнер, "ТранспортнаяИнформация");
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьСтруктуруВГруппуДерева(ИтоговыйТранспортныйКонтейнер,
		ТранспортнаяИнформация, "ТранспортнаяИнформация");
	
	ВалютаКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ИтоговыйТранспортныйКонтейнер,
		"КарточкаПередаваемыхДанных.Описание.Валюта.Код");
	Если ВалютаКод = Неопределено Тогда
		ВалютаДокумента = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ИсходныйТранспортныйКонтейнер, "КарточкаПередаваемыхДанных.Описание.Валюта");
		ДеревоЭлектронногоДокументаБЭД.ЗагрузитьСтруктуруВГруппуДерева(
			ИтоговыйТранспортныйКонтейнер, ВалютаДокумента, "КарточкаПередаваемыхДанных.Описание.Валюта");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранспортныйКонтейнер(ДеревоТранспортныйКонтейнер, АдресКаталога, Знач ДанныеДокумента, Ошибки)
	
	СтруктураОтправителя = ЗаполнитьДанныеОбУчастникеОбмена(ДанныеДокумента.ДанныеОрганизации);
	СтруктураПолучателя  = ЗаполнитьДанныеОбУчастникеОбмена(ДанныеДокумента.ДанныеКонтрагента);
	
	ПредставлениеДокумента = ДанныеДокумента.ПредставлениеОтправляемогоДокумента;
	
	КарточкаПередаваемыхДанных = Новый Структура;
	КарточкаПередаваемыхДанных.Вставить("ВерсияФормата", АктуальнаяВерсияФорматаТранспортногоКонтейнера());
	КарточкаПередаваемыхДанных.Вставить("Идентификатор", XMLСтрока(ДанныеДокумента.ОбъектУчета));
	КарточкаПередаваемыхДанных.Вставить("ВидДокумента", XMLСтрока(ДанныеДокумента.ТипДокумента));
	КарточкаПередаваемыхДанных.Вставить("ПредставлениеОтправляемогоДокумента", ПредставлениеДокумента);
	КарточкаПередаваемыхДанных.Вставить("ТипМетаданных", ДанныеДокумента.ОбъектУчета.Метаданные().Имя);

	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("ПредставлениеПолучаемогоДокумента", ДанныеДокумента.ПредставлениеПолучаемогоДокумента);
	ОписаниеДокумента.Вставить("Дата", ДанныеДокумента.Дата);
	ОписаниеДокумента.Вставить("Номер", ДанныеДокумента.Номер);
	ОписаниеДокумента.Вставить("Сумма", ДанныеДокумента.Сумма);
	
	ВалютаДокумента = Новый Структура;
	ВалютаДокумента.Вставить("Код", "643");
	ВалютаДокумента.Вставить("Наименование", "руб.");
	ОписаниеДокумента.Вставить("Валюта", ВалютаДокумента);
	
	КарточкаПередаваемыхДанных.Вставить("Описание", ОписаниеДокумента);
	КарточкаПередаваемыхДанных.Вставить("Отправитель", СтруктураОтправителя);
	КарточкаПередаваемыхДанных.Вставить("Получатель", СтруктураПолучателя);
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьСтруктуруВГруппуДерева(ДеревоТранспортныйКонтейнер,
		КарточкаПередаваемыхДанных, "КарточкаПередаваемыхДанных");
	
	РасширениеАрхива = "zip";
	ИмяФайлаАрхива = СтрШаблон("EDI_%1.%2", ДанныеДокумента.УникальныйИдентификатор, РасширениеАрхива);
	ДанныеДокумента.ДвоичныеДанныеПакета.Записать(АдресКаталога + ИмяФайлаАрхива);
	
	ГлавныйФайл = Новый Структура;
	ГлавныйФайл.Вставить("Путь", ИмяФайлаАрхива);
	ГлавныйФайл.Вставить("ЕстьПрисоединенныеФайлы", ЗначениеЗаполнено(ДанныеДокумента.ДвоичныеДанныеДополнительныхДанных));
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьСтруктуруВГруппуДерева(ДеревоТранспортныйКонтейнер, ГлавныйФайл,
		"ТранспортнаяИнформация.ГлавныйФайл");
	
	ФайлыВизуализации = Новый ТаблицаЗначений;
	ФайлыВизуализации.Колонки.Добавить("Путь");
	ФайлыВизуализации.Колонки.Добавить("Представление");
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ДанныеДокумента.ПолноеИмяФайлаПредставления);
	ДанныеДокумента.ДвоичныеДанныеПредставления.Записать(АдресКаталога + ИмяФайла);

	ФайлВизуализации = ФайлыВизуализации.Добавить();
	ФайлВизуализации.Путь          = ИмяФайла;
	ФайлВизуализации.Представление = ПредставлениеДокумента;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(ДеревоТранспортныйКонтейнер, ФайлыВизуализации,
		"ТранспортнаяИнформация.ФайлыВизуализации");
	
КонецПроцедуры

Функция ЗаполнитьДанныеОбУчастникеОбмена(Знач ДанныеУчастникаОбмена)
	
	Результат = Новый Структура();
	Результат.Вставить("Наименование", ДанныеУчастникаОбмена.Наименование);
	Результат.Вставить("TIN" , ДанныеУчастникаОбмена.ИНН);
	Результат.Вставить("КПП" , ДанныеУчастникаОбмена.КПП);
	Результат.Вставить("КодСтраны", "643"); // Значение по умолчанию код России.
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьДанныеДокументаИзДерева(ДанныеДокумента, Знач ДеревоТранспортныйКонтейнер)
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ПредставлениеВалюты)
		И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоТранспортныйКонтейнер,
			"КарточкаПередаваемыхДанных.Описание.Валюта") = Истина Тогда
		ДанныеДокумента.ПредставлениеВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоТранспортныйКонтейнер, "КарточкаПередаваемыхДанных.Описание.Валюта.Наименование");
	КонецЕсли;

КонецПроцедуры

Функция СформироватьТранспортныйКонтейнерCML(ДеревоДанных, Ошибки, ЭлектронныйДокумент = Неопределено)
	
	ПутьКОписанию = СтрШаблон("{%1}.%2", ПространствоИмен(), ИмяПакетаКонтейнера());
	
	Попытка
		ТранспортныйКонтейнер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Карточка = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Card");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("FormatVersion", "КарточкаПередаваемыхДанных.ВерсияФормата");
		ЗначенияСвойствXDTO.Вставить("Identifier", "КарточкаПередаваемыхДанных.Идентификатор");
		ЗначенияСвойствXDTO.Вставить("DocumentType", "КарточкаПередаваемыхДанных.ВидДокумента");
		ЗначенияСвойствXDTO.Вставить("TitleDocumentSender", "КарточкаПередаваемыхДанных.ПредставлениеОтправляемогоДокумента");
		ЗначенияСвойствXDTO.Вставить("MetadataType", "КарточкаПередаваемыхДанных.ТипМетаданных");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Карточка, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		
		Описание = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Card.Description");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("TitleDocumentRecipient", "КарточкаПередаваемыхДанных.Описание.ПредставлениеПолучаемогоДокумента");
		ЗначенияСвойствXDTO.Вставить("Date", "КарточкаПередаваемыхДанных.Описание.Дата");
		ЗначенияСвойствXDTO.Вставить("Number", "КарточкаПередаваемыхДанных.Описание.Номер");
		ЗначенияСвойствXDTO.Вставить("Sum", "КарточкаПередаваемыхДанных.Описание.Сумма");
		ЗначенияСвойствXDTO.Вставить("VATSum", "КарточкаПередаваемыхДанных.Описание.СуммаНДС");

		ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
		ПараметрыЗаполнения.ОбязательныеСвойства = "TitleDocumentRecipient";
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Описание, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки, ПараметрыЗаполнения);
		
		Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.Описание.Валюта") = Истина Тогда
			Валюта = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Card.Description.Currency");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "Code",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.Описание.Валюта.Код"), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "Name",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.Описание.Валюта.Наименование"), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Описание, "Currency", Валюта, , Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, Истина, Ошибки);
		
		Отправитель = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Card.Sender");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("Name", "КарточкаПередаваемыхДанных.Отправитель.Наименование");
		ЗначенияСвойствXDTO.Вставить("TIN", "КарточкаПередаваемыхДанных.Отправитель.TIN");
		ЗначенияСвойствXDTO.Вставить("KPP", "КарточкаПередаваемыхДанных.Отправитель.КПП");
		ЗначенияСвойствXDTO.Вставить("CodeCountry", "КарточкаПередаваемыхДанных.Отправитель.КодСтраны");
		
		ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
		ПараметрыЗаполнения.ОбязательныеСвойства = "Name,TIN";
		
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Отправитель, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки, ПараметрыЗаполнения);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, Истина, Ошибки);
		
		Получатель = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Card.Recipient");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("Name", "КарточкаПередаваемыхДанных.Получатель.Наименование");
		ЗначенияСвойствXDTO.Вставить("TIN", "КарточкаПередаваемыхДанных.Получатель.TIN");
		ЗначенияСвойствXDTO.Вставить("KPP", "КарточкаПередаваемыхДанных.Получатель.КПП");
		ЗначенияСвойствXDTO.Вставить("CodeCountry", "КарточкаПередаваемыхДанных.Получатель.КодСтраны");
		
		ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
		ПараметрыЗаполнения.ОбязательныеСвойства = "Name,TIN";
		
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Получатель, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки, ПараметрыЗаполнения);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Recipient", Получатель, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранспортныйКонтейнер, "Card", Карточка, Истина, Ошибки);
		
		ТранспортнаяИнформация = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Meta");
		
		ГлавныйФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Meta.MainFile");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("Path", "ТранспортнаяИнформация.ГлавныйФайл.Путь");
		ЗначенияСвойствXDTO.Вставить("AttachedFiles", "ТранспортнаяИнформация.ГлавныйФайл.ЕстьПрисоединенныеФайлы");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ГлавныйФайл, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранспортнаяИнформация, "MainFile", ГлавныйФайл, Истина, Ошибки);
		
		СтрокаФайлыВизуализации = ДеревоЭлектронногоДокументаБЭД.СтрокаДерева(ДеревоДанных, "ТранспортнаяИнформация.ФайлыВизуализации", Истина);
		Если ЗначениеЗаполнено(СтрокаФайлыВизуализации.Значение) Тогда
			ФайлыВизуализации = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Meta.FilesVisualization");
			Для Каждого СтрокаФайл Из СтрокаФайлыВизуализации.Строки Цикл
				ФайлВизуализации = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Meta.FilesVisualization.File");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("Path", "ТранспортнаяИнформация.ФайлыВизуализации.НомерСтроки.Путь");
				ЗначенияСвойствXDTO.Вставить("Name", "ТранспортнаяИнформация.ФайлыВизуализации.НомерСтроки.Представление");
				
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ФайлВизуализации, ЗначенияСвойствXDTO, СтрокаФайл, Ошибки);
				ФайлыВизуализации.File.Добавить(ФайлВизуализации);
			КонецЦикла;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранспортнаяИнформация, "FilesVisualization", ФайлыВизуализации, Истина, Ошибки);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранспортныйКонтейнер, "Meta", ТранспортнаяИнформация, Истина, Ошибки);
		
		ТранспортныйКонтейнер.Проверить();
		
		Возврат РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ТранспортныйКонтейнер, Ложь);
	Исключение
		ДобавитьОшибкуФормированияТранспортногоКонтейнера(ИнформацияОбОшибке(), Ошибки);
	КонецПопытки;
	
КонецФункции

// Добавляет в контекст операции ошибку формирования транспортного контейнера.
//
// Параметры:
//  ИнформацияОбОшибке         - ИнформацияОбОшибке - информация об ошибке, см. синтакс-помощник.
//  Ошибки                     - Массив из Строка - тексты ошибок.
//  КраткоеПредставлениеОшибки - Строка - краткое представление ошибки, если параметр не указан, будет получено
//                               из ИнформацияОбОшибке.
//
Процедура ДобавитьОшибкуФормированияТранспортногоКонтейнера(ИнформацияОбОшибке, Ошибки, КраткоеПредставлениеОшибки = "")
	
	Если КраткоеПредставлениеОшибки = "" Тогда
		ТекстСообщения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ТекстСообщения = КраткоеПредставлениеОшибки;
	КонецЕсли;

	ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстСообщения);
		
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения + Символы.ПС
		+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисShare);
	
КонецПроцедуры

Процедура ПроверитьРазмерПакетаТранспортногоКонтейнера(РезультатПроверкиПакета, Отказ, Знач ДанныеДокумента,
	Знач ПакетТранспортногоКонтейнера)
	
	НастройкиСервиса = НастройкиСервисаДляПубликации(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйРазмерПакета = НастройкиСервиса.МаксимальныйРазмерПакетаВБайтах;
	РазмерПакета = ПакетТранспортногоКонтейнера.Размер();
	
	Если МаксимальныйРазмерПакета >= РазмерПакета Тогда
		Возврат;
	КонецЕсли;
	
	РазмерПрисоединенныхФайлов = РазмерПрисоединенныхФайлов(ДанныеДокумента, Отказ);

	РазмерПакетаБезПрисоединенныхФайлов = РазмерПакета - РазмерПрисоединенныхФайлов;
	
	РезультатПроверкиПакета.МаксимальныйРазмерПакета            = МаксимальныйРазмерПакета;
	РезультатПроверкиПакета.ПревышенРазмерПакета                = Истина;
	РезультатПроверкиПакета.РазмерПакетаБезПрисоединенныхФайлов = РазмерПакетаБезПрисоединенныхФайлов;
	
КонецПроцедуры

Функция РазмерПрисоединенныхФайлов(Знач ДанныеДокумента, Отказ)
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ДвоичныеДанныеДополнительныхДанных) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Для корректного вычисления размера файла необходимо поместить в zip-архив,
	// т.к. после архивирования может измениться размер файла.
	АдресКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	ДанныеДокумента.ДвоичныеДанныеДополнительныхДанных.Записать(АдресКаталога + ДанныеДокумента.ПолноеИмяДополнительногоФайла);
	
	ФайлыДобавляемыеВАрхив = Новый Массив;
	ФайлыДобавляемыеВАрхив.Добавить(АдресКаталога);

	ПараметрыАрхива = РаботаСФайламиБЭД.НовыеПараметрыФормированияАрхива();
	ПараметрыАрхива.РежимСохраненияПутей       = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
	ПараметрыАрхива.РежимОбработкиПодкаталогов = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
	
	ДвоичныеДанныеФайла = РаботаСФайламиБЭД.СформироватьАрхивФайлов(ФайлыДобавляемыеВАрхив, , ПараметрыАрхива);
	
	ФайловаяСистема.УдалитьВременныйКаталог(АдресКаталога);
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Отказ = Истина;
		ВидОперации = НСтр("ru = 'Проверка размера дополнительных файлов.';
							|en = 'Check the size of additional files.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			, НСтр("ru = 'Произошла ошибка при выполнении формирования.';
					|en = 'An error occurred while generating.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеФайла.Размер();
	
КонецФункции

Функция НастройкиПубликацииДокумента(Знач ДеревоДанных)
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "КарточкаПередаваемыхДанных.НастройкиПубликации");
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеДокументыЭДО

Процедура ПрочитатьДанныеЭлектронногоДокумента(ДанныеДокумента, Знач ОписаниеЭлектронногоДокумента)

	ДанныеДокумента.ИдентификаторЭлектронногоДокумента = ОписаниеЭлектронногоДокумента.ИдентификаторЭлектронногоДокумента;
	
	ДанныеТранспортногоКонтейнера = ОписаниеЭлектронногоДокумента.ХранилищеТранспортногоКонтейнера.Получить();
	
	Если ДанныеТранспортногоКонтейнера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоКонтейнера = ДанныеТранспортногоКонтейнера.ДеревоТранспортногоКонтейнера;
	
	ДанныеДокумента.ДанныеОрганизации.Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоКонтейнера,
		"КарточкаПередаваемыхДанных.Получатель.Наименование");
	ДанныеДокумента.ДанныеОрганизации.ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоКонтейнера,
		"КарточкаПередаваемыхДанных.Получатель.TIN");
	ДанныеДокумента.ДанныеОрганизации.КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоКонтейнера,
		"КарточкаПередаваемыхДанных.Получатель.КПП", Ложь);
		
	ДанныеДокумента.ДанныеКонтрагента.Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоКонтейнера,
		"КарточкаПередаваемыхДанных.Отправитель.Наименование");
	ДанныеДокумента.ДанныеКонтрагента.ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоКонтейнера,
		"КарточкаПередаваемыхДанных.Отправитель.TIN");
	ДанныеДокумента.ДанныеКонтрагента.КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоКонтейнера,
		"КарточкаПередаваемыхДанных.Отправитель.КПП", Ложь);
		
	ФайлыТранспортногоКонтейнера = ДанныеТранспортногоКонтейнера.ФайлыКонтейнера;
	
	НайденыеСтроки = ФайлыТранспортногоКонтейнера.НайтиСтроки(
		Новый Структура("ВидФайла", ИнтеграцияShareКлиентСервер.ВидыФайловДокумента().ГлавныйФайл));
	
	Если НайденыеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеГлавногоФайл = НайденыеСтроки[0];
	
	ДополнитьДанныеДокументаИзОписанияПакетаДокументовЭДО(ДанныеДокумента, ДанныеГлавногоФайл);
	
	ДополнитьДанныеУчастниковОбмена(ДанныеДокумента);
	
	НайденныеФайлы = ФайлыТранспортногоКонтейнера.НайтиСтроки(
		Новый Структура("ВидФайла", ИнтеграцияShareКлиентСервер.ВидыФайловДокумента().ФайлВизуализации));
	
	Для Каждого СтрокаФайла Из НайденныеФайлы Цикл
		ФайлВизуализации = НовыйФайлВизуализации();
		ЗаполнитьЗначенияСвойств(ФайлВизуализации, СтрокаФайла);
		ДанныеДокумента.ФайлыВизуализации.Добавить(ФайлВизуализации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеУчастниковОбмена(ДанныеДокумента)

	Контрагент = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(
		"Контрагенты", ДанныеДокумента.ДанныеКонтрагента.ИНН, ДанныеДокумента.ДанныеКонтрагента.КПП, Контрагент);
	ДанныеДокумента.Контрагент = Контрагент;

	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(
		"Организации", ДанныеДокумента.ДанныеОрганизации.ИНН, ДанныеДокумента.ДанныеОрганизации.КПП, Организация);
	ДанныеДокумента.Организация = Организация;

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("ИНН", ДанныеДокумента.ДанныеКонтрагента.ИНН);
		РеквизитыКонтрагента.Вставить("КПП", ДанныеДокумента.ДанныеКонтрагента.КПП);
		РеквизитыКонтрагента.Вставить("Наименование", ДанныеДокумента.ДанныеКонтрагента.Наименование);

		ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, ДанныеДокумента.Контрагент);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСопоставлениеНоменклатурыДокумента(ДанныеДокумента, Отказ)
	
	НоменклатураСопоставленияДокументов = НоваяТаблицаСопоставленияНоменклатурыДокумента();
	НоменклатураСопоставленияПоДокументу = ОбменСКонтрагентамиИнтеграция.ДанныеНеСопоставленнойНоменклатурыДокумента(
		ДанныеДокумента.ДанныеОсновногоФайла, ДанныеДокумента.Контрагент);

	Для Каждого ЭлементКоллекции Из НоменклатураСопоставленияПоДокументу Цикл

		Отбор = НовыйОтборСопоставленияНоменклатурыДокумента();
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементКоллекции);
		Если НоменклатураСопоставленияДокументов.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяЗапись = НоменклатураСопоставленияДокументов.Добавить();
			НоваяЗапись.ДанныеНоменклатурыКонтрагента = ЭлементКоллекции;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭлементКоллекции);
		КонецЕсли;

	КонецЦикла;

	Если НоменклатураСопоставленияДокументов.Количество() Тогда
		Отказ = Истина;
		ДанныеДокумента.НоменклатураСопоставления = НоменклатураСопоставленияДокументов.ВыгрузитьКолонку(
			"ДанныеНоменклатурыКонтрагента");
		ДанныеДокумента.ТребуетсяСопоставлениеНоменклатуры = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьДанныеДокументаИзОписанияПакетаДокументовЭДО(ДанныеДокумента, Знач ДанныеГлавногоФайл)
	
	ОписаниеПакета = ОбменСКонтрагентами.ОписаниеКонтейнераЭлектронногоДокумента(ДанныеГлавногоФайл.ДвоичныеДанныеФайла);
	
	Если ЗначениеЗаполнено(ОписаниеПакета.Содержание) Тогда
		ДанныеДокумента.ТипДокумента = ОписаниеПакета.Содержание.ТипДокумента;
	КонецЕсли;
	
	ДанныеДокумента.ДанныеОсновногоФайла = ОписаниеПакета.ДанныеОсновногоФайла;
	ДанныеДокумента.ДанныеФайлаДопДанных = ОписаниеПакета.ДанныеФайлаДопДанных;
	
	ДополнительныеФайлы = НовоеОписаниеДополнительныхФайлов();
	СинхронизацияЭДО.ПрочитатьДополнительныеДанныеДокумента(ДополнительныеФайлы, ОписаниеПакета.ДанныеФайлаДопДанных, Неопределено);
	
	ДанныеДокумента.ДополнительныеФайлыДокумента = Новый ХранилищеЗначения(ДополнительныеФайлы);
	
КонецПроцедуры

Функция НовыеДанныеТранспортногоКонтейнераПакетаЭДО()
	
	Результат = Новый Структура;
	Результат.Вставить("ОбъектУчета");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("ДвоичныеДанныеПакета");
	Результат.Вставить("ДвоичныеДанныеПредставления");
	Результат.Вставить("ДвоичныеДанныеДополнительныхДанных");
	Результат.Вставить("ПолноеИмяФайла");
	Результат.Вставить("ПолноеИмяДополнительногоФайла");
	Результат.Вставить("ПолноеИмяФайлаПредставления");
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагент");
	Результат.Вставить("Направление");
	Результат.Вставить("ТипДокумента");
	Результат.Вставить("ПредставлениеОтправляемогоДокумента");
	Результат.Вставить("ПредставлениеПолучаемогоДокумента");
	Результат.Вставить("Номер");
	Результат.Вставить("Дата");
	Результат.Вставить("Сумма");
	Результат.Вставить("ПредставлениеВалюты");
	Результат.Вставить("ДанныеОрганизации");
	Результат.Вставить("ДанныеКонтрагента");

	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура - настройки источника для формирования электронного документа:
//    * ТипДокумента       - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.ТипыДокументов. Обязательный.
//    * Формат             - Строка - формат значения элемента структуры возвращаемой см. ОбменСКонтрагентами.ФорматыДокументов.
//    * Направление        - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.НаправленияДокументов(). Обязательный.
//    * Организация        - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент         - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
Функция НовыеНастройкиФормированияДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ТипДокумента");
	Результат.Вставить("Формат");
	Результат.Вставить("Направление");
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагент");
	Результат.Вставить("ДоговорКонтрагента");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеТранспортногоКонтейнераПакетаЭДО(Знач СсылкаНаДокумент, Знач ДополнительныеФайлы)
	
	НастройкиФормированияДокумента = НовыеНастройкиФормированияДокумента();
	ИнтеграцияShareПереопределяемый.ЗаполнитьНастройкиФормированияДокумента(СсылкаНаДокумент, НастройкиФормированияДокумента);
	
	ДанныеДокумента = ДанныеСформированногоДокументаДляВыгрузки(СсылкаНаДокумент, НастройкиФормированияДокумента);
	
	Если ДанныеДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = НовыеДанныеТранспортногоКонтейнераПакетаЭДО();

	ПредставлениеДокумента = Строка(ДанныеДокумента.Объект);

	ПараметрыВизуализации = ОбменСКонтрагентамиИнтеграция.НовыеПараметрыВизуализации();
	ПараметрыВизуализации.ВыводитьДопДанные           = Ложь;
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна          = Ложь;

	ОписаниеПредставленияДокумента = Неопределено;
	СтандартнаяОбработка           = Истина;

	ПараметрыДокументаДляВизуализации = НовыеПараметрыПубликуемогоДокументаДляВизуализации();
	ПараметрыДокументаДляВизуализации.ОбъектУчета             = ДанныеДокумента.Объект;
	ПараметрыДокументаДляВизуализации.ДвоичныеДанныеДокумента = ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные;
	ПараметрыДокументаДляВизуализации.ТипДокумента            = ДанныеДокумента.ТипДокумента;

	СвойстваПредставления = ПараметрыДокументаДляВизуализации.СвойстваПредставления;
	СвойстваПредставления.ПараметрыВизуализации   = ПараметрыВизуализации;
	СвойстваПредставления.ПредставлениеДокумента  = ПредставлениеДокумента;

	ИнтеграцияShareПереопределяемый.ПриОпределенииВизуализацииПубликуемогоДокумента(ОписаниеПредставленияДокумента,
		ПараметрыДокументаДляВизуализации, СтандартнаяОбработка);

	ПредставлениеДокумента = ПараметрыДокументаДляВизуализации.СвойстваПредставления.ПредставлениеДокумента;

	ДвоичныеДанныеПредставлениеДокумента = Неопределено;
	ИмяФайлаПредставлениеДокумента       = Неопределено;
	Если СтандартнаяОбработка = Истина Тогда

		ПараметрыВизуализации = ПараметрыДокументаДляВизуализации.СвойстваПредставления.ПараметрыВизуализации;

		РезультатФормирования = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения(ДанныеДокумента.ВидДокумента,
			ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные, , ПараметрыВизуализации);

		Если Не РезультатФормирования.Успех Тогда
			Возврат Неопределено;
		КонецЕсли;

		ИмяФайлаПредставлениеДокумента = ИмяФайлаВФорматеPDF(ПредставлениеДокумента);
		ДвоичныеДанныеПредставлениеДокумента = ДвоичныеДанныеПредставленияДокументаВФорматеPDF(
			РезультатФормирования.ПредставлениеДокумента);

	Иначе
		
		Если Не ЗначениеЗаполнено(ОписаниеПредставленияДокумента.ДвоичныеДанные) Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		ДвоичныеДанныеПредставлениеДокумента = ОписаниеПредставленияДокумента.ДвоичныеДанные;
		ИмяФайлаПредставлениеДокумента       = ОписаниеПредставленияДокумента.ИмяФайла;
	КонецЕсли;

	Отказ = Ложь;
	СинхронизацияЭДО.ЗаполнитьОписаниеДополнительныхДанныхДокумента(ДанныеДокумента, ДополнительныеФайлы, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	РезультатФормированияПакета = СинхронизацияЭДО.ДвоичныеДанныеТранспортногоКонтейнера(ДанныеДокумента);
	Если РезультатФормированияПакета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат.ОбъектУчета                         = ДанныеДокумента.Объект;
	Результат.УникальныйИдентификатор             = ДанныеДокумента.ИдентификаторДокументооборота;
	Результат.ДвоичныеДанныеПакета                = РезультатФормированияПакета;
	Результат.ПолноеИмяФайла                      = ДанныеДокумента.ОписаниеДанных.ИмяФайла;
	Результат.ДвоичныеДанныеПредставления         = ДвоичныеДанныеПредставлениеДокумента;
	Результат.ПолноеИмяФайлаПредставления         = ИмяФайлаПредставлениеДокумента;
	Результат.ДвоичныеДанныеДополнительныхДанных  = ДанныеДокумента.ОписаниеДополнительныхДанных.ДвоичныеДанные;
	Результат.ПолноеИмяДополнительногоФайла       = ДанныеДокумента.ОписаниеДополнительныхДанных.ИмяФайла;
	Результат.ПредставлениеПолучаемогоДокумента   = ДанныеДокумента.Представление;
	Результат.ПредставлениеОтправляемогоДокумента = ПредставлениеДокумента;
	Результат.Организация                         = ДанныеДокумента.Организация;
	Результат.Контрагент                          = ДанныеДокумента.Контрагент;
	Результат.Направление                         = Перечисления.НаправленияЭДО.Исходящий;
	Результат.ТипДокумента                        = ДанныеДокумента.ТипДокумента;

	ОписаниеДокумента = ДанныеДокумента.ОписаниеДокумента;
	Результат.Номер = ОписаниеДокумента.Номер;
	Результат.Дата  = ОписаниеДокумента.Дата;
	Результат.Сумма = ОписаниеДокумента.Сумма;

	Результат.ДанныеОрганизации = ДанныеУчастникаОбмена(ДанныеДокумента.Организация);
	Результат.ДанныеКонтрагента = ДанныеУчастникаОбмена(ДанныеДокумента.Контрагент);

	Возврат Результат;
	
КонецФункции

Функция ДанныеСформированногоДокументаДляВыгрузки(СсылкаНаДокумент, ДанныеДокумента)

	Настройки = ФорматыЭДО.НовыеНастройкиФормированияДокументаПоОбъектуУчета();
	Настройки.ТипДокумента                        = ДанныеДокумента.ТипДокумента;
	Настройки.Формат                              = ДанныеДокумента.Формат;
	Настройки.ОтключитьРассчетДополнительныхПолей = Истина;
	Настройки.Организация                         = ДанныеДокумента.Организация;
	Настройки.Контрагент                          = ДанныеДокумента.Контрагент;
	Настройки.Договор                             = ДанныеДокумента.ДоговорКонтрагента;
	
	ДанныеОрганизации = ДанныеУчастникаОбмена(ДанныеДокумента.Организация);
	ДанныеКонтрагента = ДанныеУчастникаОбмена(ДанныеДокумента.Контрагент);

	Данные = ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула();
	Данные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	Данные.Участники.ИдентификаторОтправителя = ДанныеОрганизации.ИНН + ?(ПустаяСтрока(
		ДанныеОрганизации.КПП), "", "_" + ДанныеОрганизации.КПП);
	Данные.Участники.ИдентификаторПолучателя = ДанныеКонтрагента.ИНН + ?(ПустаяСтрока(
		ДанныеКонтрагента.КПП), "", "_" + ДанныеКонтрагента.КПП);

	ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Настройки);
	ПараметрыФормирования.Отправитель = Настройки.Организация;
	ПараметрыФормирования.Получатель = Настройки.Контрагент;
	
	ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(СсылкаНаДокумент, ПараметрыФормирования);
	Данные.ДанныеДокумента = ОписаниеДанных.Данные;

	РезультатФормирования = ФорматыЭДО.СформироватьДанныеОсновногоТитулаПоОбъектуУчета(
		СсылкаНаДокумент, Настройки, Данные);

	ВидОперации = НСтр("ru = 'Формирование электронного документа для отправки.';
						|en = 'Generate an electronic document to send.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = "";
	Если РезультатФормирования.ЕстьОшибки Тогда

		Для Каждого ОписаниеОшибки Из РезультатФормирования.Ошибки.ЗаполнениеДанных Цикл

			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС;
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + ОписаниеОшибки.ТекстОшибки;

		КонецЦикла;
		
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			ТекстОшибки, ТекстОшибки, СсылкаНаДокумент);

		Возврат Неопределено;
	КонецЕсли;
	
	Содержание = РезультатФормирования.Содержание;
	
	Если Содержание = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить данные документа по формату %1';
									|en = 'Cannot receive document data by the %1 format'"), ДанныеДокумента.Формат);
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			ТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;

	НовыеДанные = Новый Структура;
	НовыеДанные.Вставить("Объект", СсылкаНаДокумент);
	НовыеДанные.Вставить("ИдентификаторДокументооборота", Строка(Новый УникальныйИдентификатор));
	НовыеДанные.Вставить("ИдентификаторСообщения", Содержание.ИдентификаторДокумента);
	НовыеДанные.Вставить("ТипДокумента", ДанныеДокумента.ТипДокумента);
	НовыеДанные.Вставить("ВидДокумента", ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ДанныеДокумента.ТипДокумента));
	НовыеДанные.Вставить("ИдентификаторОтправителя", Данные.Участники.ИдентификаторОтправителя);
	НовыеДанные.Вставить("ИдентификаторПолучателя", Данные.Участники.ИдентификаторПолучателя);
	НовыеДанные.Вставить("Организация", ДанныеДокумента.Организация);
	НовыеДанные.Вставить("Контрагент", ДанныеДокумента.Контрагент);
	НовыеДанные.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	НовыеДанные.Вставить("ОписаниеДанных", РаботаСФайламиБЭД.НовоеОписаниеФайла());
	НовыеДанные.Вставить("ОписаниеДополнительныхДанных", РаботаСФайламиБЭД.НовоеОписаниеФайла());

	НовыеДанные.Вставить("ТипРегламента", Содержание.ТипРегламента);
	НовыеДанные.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);

	ОписаниеДокумента = СинхронизацияЭДО.НовоеОписаниеДокумента();
	ОписаниеДокумента.Номер = Содержание.НомерДокумента;
	ОписаниеДокумента.Дата  = Содержание.ДатаДокумента;
	ОписаниеДокумента.Сумма = Содержание.СуммаДокумента;
	НовыеДанные.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	НовыеДанные.ОписаниеДанных.ИмяФайла       = РезультатФормирования.Документ.ИмяФайла;
	НовыеДанные.ОписаниеДанных.ДвоичныеДанные = РезультатФормирования.Документ.ДвоичныеДанные;
	
	ВидДокументаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыеДанные.ВидДокумента, "Наименование");
	
	ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
	ПараметрыПредставления.ВидДокумента   = ВидДокументаНаименование;
	ПараметрыПредставления.НомерДокумента = Содержание.НомерДокумента;
	ПараметрыПредставления.ДатаДокумента  = Содержание.ДатаДокумента;
	НовыеДанные.Вставить("Представление",
		ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления));

	Возврат НовыеДанные;

КонецФункции

// Параметры:
//  ПредставлениеДокумента - ТабличныйДокумент
//
Функция ДвоичныеДанныеПредставленияДокументаВФорматеPDF(Знач ПредставлениеДокумента)
	
	ПотокПредставления = Новый ПотокВПамяти();
	ПредставлениеДокумента.Записать(ПотокПредставления, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ПотокПредставления.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Функция ИмяФайлаВФорматеPDF(Знач ИмяФайла)
	
	Возврат СтрШаблон("%1.pdf", ИмяФайла);
	
КонецФункции

Функция ДанныеУчастникаОбмена(Знач УчастникОбмена)
	
	СведенияУчастника = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(УчастникОбмена);
	
	Наименование = СведенияУчастника.Наименование;
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СведенияУчастника.СокращенноеНаименование;
	КонецЕсли;
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СведенияУчастника.ПолноеНаименование;
	КонецЕсли;

	Результат = НовыйУчастникОбмена();
	Результат.Наименование = Наименование;
	Результат.ИНН          = СведенияУчастника.ИНН;
	Результат.КПП          = СведенияУчастника.КПП;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочитатьТранспортныйКонтейнер

Процедура РаспаковатьТранспортныйКонтейнер(ДанныеДокумента, Знач ДвоичныеДанныеТранспортныйКонтейнер)
	
	КаталогРаспаковки = ФайловаяСистема.СоздатьВременныйКаталог();
	РаспакованныеФайлы = РаботаСФайламиБЭД.РаспаковатьАрхив(ДвоичныеДанныеТранспортныйКонтейнер, КаталогРаспаковки, ,
		НСтр("ru = 'Распаковка транспортного контейнера сервиса 1C:Share.';
			|en = 'Unpack the 1C:Share transport container.'"));
	
	Если РаспакованныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьТранспортныйКонтейнер(ДанныеДокумента, РаспакованныеФайлы);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(КаталогРаспаковки);
	
КонецПроцедуры

Процедура ПрочитатьТранспортныйКонтейнер(ДанныеДокумента, Знач РаспакованныеФайлы)
	
	ДанныеКонтейнера = НовоеОписаниеДанныхТранспортногоКонтейнера();

	ФайлТранспортногоКонтейнера = Неопределено;
	Для Каждого РаспакованныйФайл Из РаспакованныеФайлы Цикл
		Если НРег(РаспакованныйФайл.Имя) = ИмяФайлаТранспортногоКонтейнера() Тогда
			ФайлТранспортногоКонтейнера = РаспакованныйФайл.ПолноеИмя;
		Иначе
			НовыйФайл = ДанныеКонтейнера.ФайлыКонтейнера.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйФайл, РаспакованныйФайл);
			НовыйФайл.ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
 
	ВидОперации = НСтр("ru = 'Чтение транспортного контейнера электронного документа.';
						|en = 'Read the transport container of an electronic document.'");
	Если ФайлТранспортногоКонтейнера = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при чтении транспортного контейнера:
			| контейнер не содержит обязательный файл ""metacard.xml""';
			|en = 'Error reading the transport container:
			| The container does not contain a required ""metacard.xml"" file'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			ТекстОшибки, ТекстОшибки);
		Возврат;
	КонецЕсли;

	Если ДанныеДокумента.ВерсияФормата <> АктуальнаяВерсияФорматаТранспортногоКонтейнера() Тогда
		ТекстВерсии = ?(ЗначениеЗаполнено(ДанныеДокумента.ВерсияФормата), СтрШаблон(НСтр(
			"ru = 'не поддержана версия формата ""%1""';
			|en = 'the ""%1"" format version is not supported'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеДокумента.ВерсияФормата), НСтр("ru = 'не заполнена версия формата';
												|en = 'the format version is not filled in'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при чтении транспортного контейнера:
			| %2';
			|en = 'Ошибка при чтении транспортного контейнера:
			| %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекстОшибки, ТекстВерсии);
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			ТекстОшибки, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПутьКОписанию = РаботаСФайламиБЭД.ПолучитьТипЗначенияCML(ИмяПакетаКонтейнера(), ПространствоИмен());
	
	Попытка
		КонтейнерXDTO = РаботаСФайламиБЭД.ПрочитатьXDTO(ФайлТранспортногоКонтейнера, ПутьКОписанию);
	Исключение

		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.';
								|en = 'An error occurred while reading data from file %1: %2.'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ФайлТранспортногоКонтейнера,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ТекстСообщения);
		Возврат;

	КонецПопытки;

	ДеревоДанных = ДеревоДанныхТранспортногоКонтейнера();

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.ВерсияФормата",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Card.FormatVersion"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.Идентификатор",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Card.Identifier"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.ВидДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Card.DocumentType"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"КарточкаПередаваемыхДанных.ПредставлениеОтправляемогоДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
		КонтейнерXDTO, "Card.TitleDocumentSender"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.ТипМетаданных",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Card.MetadataType"));

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"КарточкаПередаваемыхДанных.Описание.ПредставлениеПолучаемогоДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
		КонтейнерXDTO, "Card.Description.TitleDocumentRecipient"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "КарточкаПередаваемыхДанных.Описание.Дата",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Card.Description.Date"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"КарточкаПередаваемыхДанных.Описание.Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO,
		"Card.Description.Number"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"КарточкаПередаваемыхДанных.Описание.Сумма", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO,
		"Card.Description.Sum"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"КарточкаПередаваемыхДанных.Описание.СуммаНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO,
		"Card.Description.VATSum"));

	ВалютаXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Currency");
	Если ЗначениеЗаполнено(ВалютаXDTO) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"КарточкаПередаваемыхДанных.Описание.Валюта.Код", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ВалютаXDTO,
			"Code"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"КарточкаПередаваемыхДанных.Описание.Валюта.Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
			ВалютаXDTO, "Name"));
	КонецЕсли;

	ДанныеОтправителяXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Card.Sender");
	ЗаполнитьДанныеОрганизацииИзСвойстваXDTO(ДеревоДанных, "КарточкаПередаваемыхДанных.Отправитель",
		ДанныеОтправителяXDTO);

	ДанныеПолучателяXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Card.Recipient");
	ЗаполнитьДанныеОрганизацииИзСвойстваXDTO(ДеревоДанных, "КарточкаПередаваемыхДанных.Получатель",
		ДанныеПолучателяXDTO);

	ДанныеКонтактовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеОтправителяXDTO, "Contacts");
	Если ЗначениеЗаполнено(ДанныеКонтактовXDTO) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"КарточкаПередаваемыхДанных.Отправитель.Контакты.Наименавание", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
			ДанныеКонтактовXDTO, "Name"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"КарточкаПередаваемыхДанных.Отправитель.Контакты.Телефон", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
			ДанныеКонтактовXDTO, "Telephone"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"КарточкаПередаваемыхДанных.Отправитель.Контакты.ЭлектроннаяПочта", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
			ДанныеКонтактовXDTO, "Email"));
	КонецЕсли;

	ВидыФайловДокумента = ИнтеграцияShareКлиентСервер.ВидыФайловДокумента();
	ПутьДоГлавногоФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Meta.MainFile.Path");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ТранспортнаяИнформация.ГлавныйФайл.Путь", ПутьДоГлавногоФайла);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ТранспортнаяИнформация.ГлавныйФайл.ЕстьПрисоединенныеФайлы", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
		КонтейнерXDTO, "Meta.MainFile.AttachedFiles"));

	ДополнитьФайлКонтейнера(ДанныеКонтейнера.ФайлыКонтейнера, ПутьДоГлавногоФайла, ВидыФайловДокумента.ГлавныйФайл);

	ТаблицаФайлыВизуализации = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
		"ТранспортнаяИнформация.ФайлыВизуализации");
	ФайлыВизуализацииXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КонтейнерXDTO, "Meta.FilesVisualization", , , Истина);
	Если ФайлыВизуализацииXDTO <> Неопределено Тогда
		Для Каждого ФайлВизуализацииXDTO Из ФайлыВизуализацииXDTO Цикл
			НоваяСтрокаФайла = ТаблицаФайлыВизуализации.Добавить();
			НоваяСтрокаФайла.Представление = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФайлВизуализацииXDTO, "File.Name");
			НоваяСтрокаФайла.Путь = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФайлВизуализацииXDTO, "File.Path");

			ДополнитьФайлКонтейнера(ДанныеКонтейнера.ФайлыКонтейнера, НоваяСтрокаФайла.Путь,
				ВидыФайловДокумента.ФайлВизуализации, НоваяСтрокаФайла.Представление);
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаФайлыВизуализации,
			"ТранспортнаяИнформация.ФайлыВизуализации");
	КонецЕсли;
	
	ДанныеКонтейнера.ДеревоТранспортногоКонтейнера = ДеревоДанных.Скопировать();
	
	ДанныеДокумента.ХранилищеТранспортногоКонтейнера = Новый ХранилищеЗначения(ДанныеКонтейнера);
	
КонецПроцедуры

Процедура ДополнитьФайлКонтейнера(ФайлыКонтейнера, Знач ПутьДоФайла, Знач ВидФайла, Знач ПредставлениеФайла = "")
	
	СтруктурированноеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьДоФайла);
	
	НайденныеФайлы = ФайлыКонтейнера.НайтиСтроки(Новый Структура("Имя", СтруктурированноеИмяФайла.Имя));
	Если ЗначениеЗаполнено(НайденныеФайлы) Тогда
		ФайлКонтейнера = НайденныеФайлы[0];
		ФайлКонтейнера.ВидФайла = ВидФайла;
		ФайлКонтейнера.Представление = ПредставлениеФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОрганизацииИзСвойстваXDTO(ДеревоДанных, Знач ПутьОписания, Знач СвойствоXDTO)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьОписания + ".Наименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СвойствоXDTO, "Name"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьОписания + ".TIN",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СвойствоXDTO, "TIN"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьОписания + ".КПП",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СвойствоXDTO, "KPP"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьОписания + ".КодСтраны",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СвойствоXDTO, "CodeCountry"));
	
КонецПроцедуры

Функция ДанныеДокументаПоПубличнойСсылкеИзМоделиСервиса(ДвоичныеДанныеТранспортныйКонтейнер, Знач РезультатЗапроса)
	
	ДанныеДокумента = НовоеОписаниеДанныхЭлектронногоДокумента();

	Если РезультатЗапроса.КодСостояния = КодСостоянияНеНайден() Тогда
		ДанныеДокумента.ДокументНеНайден = Истина;
		Возврат ДанныеДокумента;
	ИначеЕсли РезультатЗапроса.КодСостояния = КодСостоянияУдален() Тогда
		ДанныеДокумента.ДоступКДокументуЗакрыт = Истина;
		Возврат ДанныеДокумента;
	КонецЕсли;

	ДанныеСервиса = РезультатЗапроса.Данные;

	Отказ = Ложь;
	СвойствоКонтейнераВМоделиСервиса = "containerData";
	ТранспортныйКонтейнер = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, СвойствоКонтейнераВМоделиСервиса, Отказ);

	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Чтение данных запроса электронного документа:';
							|en = 'Reading electronic document request data:'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при чтении данных электронного документа:
			| не заполнено свойство ""%1""';
			|en = 'An error occurred when reading the electronic document data:
			| the ""%1"" property is not filled in'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СвойствоКонтейнераВМоделиСервиса);
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ИнтеграцияShareКлиентСервер.ИмяПодсистемы(),
			ТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;

	ДвоичныеДанныеТранспортныйКонтейнер = Base64Значение(ТранспортныйКонтейнер);
	ДанныеДокумента.ИдентификаторЭлектронногоДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса,
		"documentIdLink");
	ДанныеДокумента.ВерсияФормата = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "FormatVersion");

	ДанныеЗагрузкиВМоделиСервиса = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "dataOfDownload");
	Если ЗначениеЗаполнено(ДанныеЗагрузкиВМоделиСервиса) Тогда
		ДанныеЗагрузкиДокумента = НовоеОписаниеДанныхЗагрузкиЭлектронногоДокумента();
		ДатаЗагрузки = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеЗагрузкиВМоделиСервиса, "date", );
		ДанныеЗагрузкиДокумента.Дата = ПрочитатьДатуJSON(ДатаЗагрузки, ФорматДатыJSON.ISO);
		
		ДанныеЗагрузкиДокумента.ИдентификаторДокумента = ЗначениеКоллекцииПоАбсолютномуПути(
			ДанныеЗагрузкиВМоделиСервиса, "documentGuid");
		ДанныеЗагрузкиДокумента.ИдентификаторВнешнейСистемы = ЗначениеКоллекцииПоАбсолютномуПути(
			ДанныеЗагрузкиВМоделиСервиса, "endpointId");
		ДанныеЗагрузкиДокумента.СпособЗагрузки = ЗначениеКоллекцииПоАбсолютномуПути(
			ДанныеЗагрузкиВМоделиСервиса, "downloadMethod");
		ДанныеЗагрузкиДокумента.ТипМетаданныхВладельца = ЗначениеКоллекцииПоАбсолютномуПути(
			ДанныеЗагрузкиВМоделиСервиса, "typeMetadataOfDocumentOwner");
			
		ДанныеДокумента.ДанныеЗагрузкиДокумента = ДанныеЗагрузкиДокумента;
	КонецЕсли;

	Возврат ДанныеДокумента;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДокумента

Функция ЗаголовокЗагружаемогоДокумента(Знач ДанныеСервиса)
	
	Возврат СтрШаблон(НСтр("ru = 'Загрузить %1 от %2';
							|en = 'Загрузить %1 от %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеСервиса.ПредставлениеДокумента,
			ДанныеСервиса.НаименованиеОрганизации);
	
КонецФункции

Функция РезультатОбработкиПолученияДанныхДокументаПоПубличнойСсылке(Знач РезультатЗапроса)
	
	Если РезультатЗапроса.КодСостояния = КодСостоянияНеНайден()
		Или РезультатЗапроса.КодСостояния = КодСостоянияУдален() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСервиса = ОписаниеДокументаПоПубличнойСсылкеВМоделиСервиса(РезультатЗапроса.Данные);
	
	ТипыОбъектаУчета = ТипыОбъектаУчетаЭлектронногоДокумента(ДанныеСервиса.ТипДокумента);
	
	Если ТипыОбъектаУчета = Неопределено
		Или ТипыОбъектаУчета.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Загрузка документа с типом %1 не поддерживается';
															|en = 'Загрузка документа с типом %1 не поддерживается'"),
			ДанныеСервиса.ТипДокумента));
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументУчета = СсылкаНаОбъектУчетаЭлектронногоДокумента(ДанныеСервиса);
	
	ЗаголовокДокумента = ЗаголовокЗагружаемогоДокумента(ДанныеСервиса);
	
	Результат = Новый Структура();
	Результат.Вставить("НаименованиеОрганизации"           , ДанныеСервиса.НаименованиеОрганизации);
	Результат.Вставить("ПредставлениеДокумента"            , ДанныеСервиса.ПредставлениеДокумента);
	Результат.Вставить("ЗаголовокДокумента"                , ЗаголовокДокумента);
	Результат.Вставить("ДокументУчета"                     , ДокументУчета);
	Результат.Вставить("ИдентификаторЭлектронногоДокумента", ДанныеСервиса.ИдентификаторЭлектронногоДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОбработкиЗагрузкиДокументаИзСервиса(РезультатЗапроса)
	
	ДвоичныеДанныеТранспортныйКонтейнер = Неопределено;
	ДанныеДокумента = ДанныеДокументаПоПубличнойСсылкеИзМоделиСервиса(ДвоичныеДанныеТранспортныйКонтейнер, РезультатЗапроса);
	
	Если ДанныеДокумента = Неопределено Или ДанныеДокумента.ДоступКДокументуЗакрыт
		Или ДанныеДокумента.ДокументНеНайден Тогда
		Возврат ДанныеДокумента;
	КонецЕсли;
	
	РаспаковатьТранспортныйКонтейнер(ДанныеДокумента, ДвоичныеДанныеТранспортныйКонтейнер);
	
	ДанныеЗагрузкиДокумента = ДанныеДокумента.ДанныеЗагрузкиДокумента;
	Если ЗначениеЗаполнено(ДанныеЗагрузкиДокумента) Тогда
		ДанныеЗагрузкиДокумента.ОбъектУчета = СсылкаНаОбъектУчетаЭлектронногоДокумента(ДанныеЗагрузкиДокумента);
	КонецЕсли;
	
	Возврат ДанныеДокумента;

КонецФункции

Функция ТипыОбъектаУчетаЭлектронногоДокумента(Знач ТипЭлектронногоДокумента)
	
	Если Не ЗначениеЗаполнено(ТипЭлектронногоДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НРег(Лев(ТипЭлектронногоДокумента, 3)) = "v8." Тогда // для обратной совместимости
		ТипЭлектронногоДокумента = Сред(ТипЭлектронногоДокумента, 4);
	КонецЕсли;
	
	ТипДокумента = ОбменСКонтрагентамиИнтеграция.ТипДокументаПоЗначениюСервиса(ТипЭлектронногоДокумента);
	Если ТипДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыОбъектов = ИнтеграцияЭДО.ТипыОбъектовУчетаПоТипуЭлектронногоДокумента(ТипДокумента);
	
	КомандыShare = НовыйСоставКомандShare();
	ИнтеграцияShareПереопределяемый.ПриОпределенииСоставаКомандShare(КомандыShare);
	
	ТипыОбъектовНаУдаление = Новый Массив;
	Для Каждого ТипОбъекта Из ТипыОбъектов Цикл
		ПолноеИмя = ТипОбъекта.Значение.Метаданные().ПолноеИмя();
		Если КомандыShare.Входящие.Найти(ПолноеИмя) = Неопределено Тогда
			ТипыОбъектовНаУдаление.Добавить(ТипОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипОбъекта Из ТипыОбъектовНаУдаление Цикл
		ТипыОбъектов.Удалить(ТипОбъекта);
	КонецЦикла;
		
	Возврат ТипыОбъектов;
	
КонецФункции

Процедура СоздатьВУчетеЭлектронныйДокумент(Знач ДанныеДокумента, АдресХранилищаРезультата) Экспорт
	
	ПараметрыОтраженияВУчете = ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
	ПараметрыОтраженияВУчете.Отправитель  = ДанныеДокумента.Контрагент;
	ПараметрыОтраженияВУчете.ТипДокумента = ДанныеДокумента.ТипДокумента;
	ПараметрыОтраженияВУчете.Направление  = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	ПараметрыОтраженияВУчете.ДанныеОсновногоФайла       = ДанныеДокумента.ДанныеОсновногоФайла;
	ПараметрыОтраженияВУчете.ДанныеДополнительногоФайла = ДанныеДокумента.ДанныеФайлаДопДанных;
	
	ДополнительныеФайлы = Неопределено;
	Если ДанныеДокумента.ДополнительныеФайлыДокумента <> Неопределено Тогда
		ДополнительныеФайлы = ДанныеДокумента.ДополнительныеФайлыДокумента.Получить();
	КонецЕсли;
	
	ДополнительныеДанные = НовыеПараметрыДляЗагрузкиДокументаВОбъектУчета();
	ДополнительныеДанные.ДанныеОсновногоФайла         = ДанныеДокумента.ДанныеОсновногоФайла;
	ДополнительныеДанные.ДополнительныеФайлыДокумента = ДополнительныеФайлы;
	ДополнительныеДанные.ФайлыВизуализации            = ДанныеДокумента.ФайлыВизуализации;
	
	ПараметрыОтраженияВУчете.ДополнительныеДанные = ДополнительныеДанные;
	
	МассивОбъектов = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) Тогда
		МассивОбъектов.Добавить(ДанныеДокумента.ДокументУчета);
	КонецЕсли;
	
	СпособОбработки  = "";
	ТипыОбъектаУчета = ТипыОбъектаУчетаЭлектронногоДокумента(ДанныеДокумента.ТипДокумента);
	Если ЗначениеЗаполнено(ТипыОбъектаУчета) Тогда
		СпособОбработки = ТипыОбъектаУчета[0].Представление;
	КонецЕсли;

	Отказ = Ложь;
	ОтражениеВУчетеЭДО.ОтразитьДанныеЭлектронногоДокумента(ПараметрыОтраженияВУчете, СпособОбработки, МассивОбъектов);

	Если Не ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) И ЗначениеЗаполнено(МассивОбъектов) Тогда
		ДанныеДокумента.ДокументУчета = МассивОбъектов[0];
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) Тогда
		ПодробноеОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось загрузить документ %1.
			|Подробности см. в журнале регистрации.';
			|en = 'Cannot import the %1 document.
			|For more information, see the event log.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеДокумента.ПредставлениеДокумента);

		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки,
			ИнтеграцияShareКлиентСервер.ИмяПодсистемы());
		ОбщегоНазначения.СообщитьПользователю(ПодробноеОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаДляОтметкиЗагрузкиВБазу();
	ПараметрыДокумента.ОбъектУчета                        = ДанныеДокумента.ДокументУчета;
	ПараметрыДокумента.ТипМетаданныхДокументаВладельца    = 
		Метаданные.НайтиПоТипу(ТипЗнч(ДанныеДокумента.ДокументУчета)).ПолноеИмя();

	ПараметрыДокумента.ИдентификаторЭлектронногоДокумента = ДанныеДокумента.ИдентификаторЭлектронногоДокумента;
	ОтметитьВСервисеЗагрузкуДокументаВБазу(ПараметрыДокумента, Отказ);
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);

КонецПроцедуры

#КонецОбласти

#Область РаботаСДанными

Функция СсылкаНаОбъектУчетаЭлектронногоДокумента(Знач ДанныеЗагрузкиДокумента)
	
	Если Не ЗначениеЗаполнено(ДанныеЗагрузкиДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ДанныеЗагрузкиДокумента.ТипМетаданныхВладельца);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипМетаданныхОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеЗагрузкиДокумента.ТипМетаданныхВладельца);
	СсылкаНаОбъектУчета = ТипМетаданныхОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗагрузкиДокумента.ИдентификаторДокумента));

	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъектУчета)
		Или СсылкаНаОбъектУчета.ПометкаУдаления Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаОбъектУчета;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

// Параметры:
//  ДанныеФайлов - Массив из см. ИнтеграцияShareКлиентСервер.НовыеДанныеФайлаДляВыбораКПубликации
//  Документ - ДокументСсылка, СправочникСсылка - ссылка на публикуемый документ.
Процедура ЗаполнитьФайлыДокументаДляВыбораКПубликации(ДанныеФайлов, Знач Документ)
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияShareПереопределяемый.ПриОпределенииФайловДокументаДляВыбораКПубликации(ДанныеФайлов, Документ, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		
		Для Каждого ФайлДокумента Из ДанныеФайлов Цикл
			ДанныеФайла = ДанныеФайлаДляВыбораКПубликации(ФайлДокумента.СсылкаНаФайл, ФайлДокумента);

			Если ДанныеФайла = Неопределено Тогда
				Возврат;
			КонецЕсли;

			ДанныеФайлов.Добавить(ДанныеФайла);

		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыДокумента = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Документ, ПрисоединенныеФайлыДокумента);
	
	Если Не ЗначениеЗаполнено(ПрисоединенныеФайлыДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыФайла = "Наименование, Расширение, ПометкаУдаления";
	ЗначенияРеквизитовФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПрисоединенныеФайлыДокумента, РеквизитыФайла, Истина);
	
	Для Каждого ФайлДокумента Из ПрисоединенныеФайлыДокумента Цикл
		
		ЗначенияРеквизитовФайла = ЗначенияРеквизитовФайлов[ФайлДокумента];
		
		Если ЗначенияРеквизитовФайла = Неопределено Или ЗначенияРеквизитовФайла.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФайла = ДанныеФайлаДляВыбораКПубликации(ФайлДокумента, ЗначенияРеквизитовФайла);
		
		Если ДанныеФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеФайлов.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
