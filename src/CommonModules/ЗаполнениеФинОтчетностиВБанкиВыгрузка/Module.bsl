////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры формирования XML-представлений отчетов сервисов
// 1С:Кредит и 1С:ФинОтчетность
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает сведения ОСВ для заполнения отчетов и выгрузки XML.
//
// Параметры:
//   СписокОрганизаций - Массив - Организации, по которым запрашиваются сведения для ОСВ;
//   НачалоПериода - Дата;
//   КонецПериода - Дата.
//
// Возвращаемое значение:
//   Структура:
//     * Балансовые - ДеревоЗначений;
//     * Забалансовые - ДеревоЗначений.
//
Функция СведенияОСВ(СписокОрганизаций, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый КАК Забалансовый,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК СчетКод,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Наименование КАК СчетНаименование,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок
		|ИТОГИ
		|	СУММА(СНД),
		|	СУММА(СНК),
		|	СУММА(ДО),
		|	СУММА(КО),
		|	СУММА(СКД),
		|	СУММА(СКК)
		|ПО
		|	Забалансовый,
		|	Счет ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СведенияОСВ_Балансовые = Новый ДеревоЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если Колонка.Имя = "Забалансовый" Тогда
			Продолжить;
		КонецЕсли;
		СведенияОСВ_Балансовые.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	СведенияОСВ_Забалансовые = СведенияОСВ_Балансовые.Скопировать();
	
	ДанныеЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрокаПоБалансу Из ДанныеЗапроса.Строки Цикл
		Если СтрокаПоБалансу.Забалансовый Тогда
			НоваяСтрокаОСВ = СведенияОСВ_Забалансовые.Строки.Добавить();
			ВнестиСтрокиВСведенияОСВ(НоваяСтрокаОСВ, СтрокаПоБалансу);
			РассчитатьИтогиОСВ(СведенияОСВ_Забалансовые);
		Иначе
			НоваяСтрокаОСВ = СведенияОСВ_Балансовые.Строки.Добавить();
			ВнестиСтрокиВСведенияОСВ(НоваяСтрокаОСВ, СтрокаПоБалансу);
			РассчитатьИтогиОСВ(СведенияОСВ_Балансовые);
		КонецЕсли;
	КонецЦикла;
	
	СведенияОСВ = Новый Структура;
	СведенияОСВ.Вставить("Балансовые", СведенияОСВ_Балансовые);
	СведенияОСВ.Вставить("Забалансовые", СведенияОСВ_Забалансовые);
	
	Возврат СведенияОСВ;
	
КонецФункции

// Конструктор параметров функции ЗаполнениеФинОтчетностиВБанкиВыгрузка.ВыгрузкаОСВ
//
// Возвращаемое значение:
//   Структура:
//     * ИдФайла - Строка - технический идентификатор файла, обычно соответствует имени файла;
//     * ДатаВыгрузки - Дата;
//     * Организация - СправочникСсылка.Организации - организация, от имени которой идет отправка;
//     * Организации - Массив - полный перечень организаций по которым выбираются данные;
//     * НачалоПериода - Дата;
//     * КонецПериода - Дата.
//
Функция ПараметрыВыгрузкиОСВ() Экспорт
	
	ПараметрыВыгрузкиОСВ = Новый Структура;
	
	ПараметрыВыгрузкиОСВ.Вставить("ИдФайла", "");
	ПараметрыВыгрузкиОСВ.Вставить("ДатаВыгрузки", '0001-01-01');
	
	ПараметрыВыгрузкиОСВ.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыВыгрузкиОСВ.Вставить("Организации", Новый Массив);
	
	ПараметрыВыгрузкиОСВ.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыВыгрузкиОСВ.Вставить("КонецПериода",  '0001-01-01');
	
	ПараметрыВыгрузкиОСВ.Вставить("ПоместитьВАрхивZIP",  Ложь);
	
	Возврат ПараметрыВыгрузкиОСВ;
	
КонецФункции

// Возвращает двоичные данные с представлением оборотно-сальдовой ведомости.
//
// Параметры:
//   ПараметрыВыгрузки - см. ЗаполнениеФинОтчетностиВБанкиВыгрузка.ПараметрыВыгрузкиОСВ
//
// Возвращаемое значение:
//   ДвоичныеДанные.
//
Функция ВыгрузкаОСВ(ПараметрыВыгрузки) Экспорт
	
	ИдФайла      = ПараметрыВыгрузки.ИдФайла;
	ДатаВыгрузки = ПараметрыВыгрузки.ДатаВыгрузки;
	
	Организация   = ПараметрыВыгрузки.Организация;
	Организации   = ПараметрыВыгрузки.Организации;
	НачалоПериода = ПараметрыВыгрузки.НачалоПериода;
	КонецПериода  = ПараметрыВыгрузки.КонецПериода;
	
	СведенияОСВ = СведенияОСВ(Организации, НачалоПериода, КонецПериода);
	
	ПараметрыXMLВыгрузкиОСВ = ПараметрыXMLВыгрузкиОСВ();
	
	ПараметрыXMLВыгрузкиОСВ.ДатаДок = ДатаВыгрузки;
	ПараметрыXMLВыгрузкиОСВ.ИдФайл = ИдФайла;
	
	ПараметрыXMLВыгрузкиОСВ.НачалоПериода = НачалоПериода;
	ПараметрыXMLВыгрузкиОСВ.КонецПериода  = КонецПериода;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	ПараметрыXMLВыгрузкиОСВ.ЭтоИП = ЭтоИП;
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИОРук, ФИО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаВыгрузки, СтрокаСведений);
	
	ПараметрыXMLВыгрузкиОСВ.ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	Если ЭтоИП Тогда
		ПараметрыXMLВыгрузкиОСВ.НаимОрг = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		ПараметрыXMLВыгрузкиОСВ.НаимОрг = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		ПараметрыXMLВыгрузкиОСВ.КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	ПараметрыXMLВыгрузкиОСВ.Данные.Балансовые   = СведенияОСВ.Балансовые;
	ПараметрыXMLВыгрузкиОСВ.Данные.Забалансовые = СведенияОСВ.Забалансовые;
	
	ПараметрыXMLВыгрузкиОСВ.ПоместитьВАрхивZIP = ПараметрыВыгрузки.ПоместитьВАрхивZIP;
	
	Возврат ПредставлениеОСВ(ПараметрыXMLВыгрузкиОСВ);
	
КонецФункции

// Конструктор параметров функции ЗаполнениеФинОтчетностиВБанкиВыгрузка.ВыгрузкаАнализаСчета
//
// Возвращаемое значение:
//   Структура:
//     * ИдФайла - Строка - технический идентификатор файла, обычно соответствует имени файла;
//     * ДатаВыгрузки - Дата;
//     * Организация - СправочникСсылка.Организации - организация, от имени которой идет отправка;
//     * Организации - Массив - полный перечень организаций по которым выбираются данные;
//     * Счет - ПланСчетовСсылка.Хозрасчетный;
//     * НачалоПериода - Дата;
//     * КонецПериода - Дата.
//
Функция ПараметрыВыгрузкиАнализаСчета() Экспорт
	
	ПараметрыВыгрузкиАнализаСчета = Новый Структура;
	
	ПараметрыВыгрузкиАнализаСчета.Вставить("ИдФайла", "");
	ПараметрыВыгрузкиАнализаСчета.Вставить("ДатаВыгрузки", '0001-01-01');
	
	ПараметрыВыгрузкиАнализаСчета.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыВыгрузкиАнализаСчета.Вставить("Организации", Новый Массив);
	
	ПараметрыВыгрузкиАнализаСчета.Вставить("Счет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыВыгрузкиАнализаСчета.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыВыгрузкиАнализаСчета.Вставить("КонецПериода",  '0001-01-01');
	
	ПараметрыВыгрузкиАнализаСчета.Вставить("ПоместитьВАрхивZIP",  Ложь);
	
	Возврат ПараметрыВыгрузкиАнализаСчета;
	
КонецФункции

// Возвращает двоичные данные с представлением анализа счета.
//
// Параметры:
//   ПараметрыВыгрузки - см. ЗаполнениеФинОтчетностиВБанкиВыгрузка.ПараметрыВыгрузкиАнализаСчета
//
// Возвращаемое значение:
//   ДвоичныеДанные
//
Функция ВыгрузкаАнализаСчета(ПараметрыВыгрузки) Экспорт
	
	ИдФайла      = ПараметрыВыгрузки.ИдФайла;
	ДатаВыгрузки = ПараметрыВыгрузки.ДатаВыгрузки;
	
	Организация = ПараметрыВыгрузки.Организация;
	Организации = ПараметрыВыгрузки.Организации;
	
	Счет          = ПараметрыВыгрузки.Счет;
	НачалоПериода = ПараметрыВыгрузки.НачалоПериода;
	КонецПериода  = ПараметрыВыгрузки.КонецПериода;
	
	ПараметрыЗапросаАнализСчета = ПараметрыЗапросаАнализСчета();
	ПараметрыЗапросаАнализСчета.СписокОрганизаций = Организации;
	ПараметрыЗапросаАнализСчета.Счет = Счет;
	ПараметрыЗапросаАнализСчета.НачалоПериода = НачалоПериода;
	ПараметрыЗапросаАнализСчета.КонецПериода = КонецПериода;
	
	ЗапросАнализаСчета = ЗапросАнализСчета(ПараметрыЗапросаАнализСчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапросаАнализаСчета = ЗапросАнализаСчета.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыXMLВыгрузкиАнализаСчета = ПараметрыXMLВыгрузкиАнализаСчета();
	
	ПараметрыXMLВыгрузкиАнализаСчета.ДатаДок = ДатаВыгрузки;
	ПараметрыXMLВыгрузкиАнализаСчета.ИдФайл = ИдФайла;
	
	ПараметрыXMLВыгрузкиАнализаСчета.Счет          = Счет;
	ПараметрыXMLВыгрузкиАнализаСчета.НачалоПериода = НачалоПериода;
	ПараметрыXMLВыгрузкиАнализаСчета.КонецПериода  = КонецПериода;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	ПараметрыXMLВыгрузкиАнализаСчета.ЭтоИП = ЭтоИП;
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИОРук, ФИО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаВыгрузки, СтрокаСведений);
	
	ПараметрыXMLВыгрузкиАнализаСчета.ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	Если ЭтоИП Тогда
		ПараметрыXMLВыгрузкиАнализаСчета.НаимОрг = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		ПараметрыXMLВыгрузкиАнализаСчета.НаимОрг = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		ПараметрыXMLВыгрузкиАнализаСчета.КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	ПараметрыXMLВыгрузкиАнализаСчета.Данные = РезультатЗапросаАнализаСчета;
	
	ПараметрыXMLВыгрузкиАнализаСчета.ПоместитьВАрхивZIP = ПараметрыВыгрузки.ПоместитьВАрхивZIP;
	
	Возврат ПредставлениеАнализаСчета(ПараметрыXMLВыгрузкиАнализаСчета);
	
КонецФункции

// Конструктор параметров функции ЗаполнениеФинОтчетностиВБанкиВыгрузка.ВыгрузкаКарточкиСчета
//
// Возвращаемое значение:
//   Структура:
//     * ИдФайла - Строка - технический идентификатор файла, обычно соответствует имени файла;
//     * ДатаВыгрузки - Дата;
//     * Организация - СправочникСсылка.Организации - организация, от имени которой идет отправка;
//     * Организации - Массив - полный перечень организаций по которым выбираются данные;
//     * Счет - ПланСчетовСсылка.Хозрасчетный;
//     * НачалоПериода - Дата;
//     * КонецПериода - Дата.
//
Функция ПараметрыВыгрузкиКарточкиСчета() Экспорт
	
	ПараметрыВыгрузкиКарточкиСчета = Новый Структура;
	
	ПараметрыВыгрузкиКарточкиСчета.Вставить("ИдФайла", "");
	ПараметрыВыгрузкиКарточкиСчета.Вставить("ДатаВыгрузки", '0001-01-01');
	
	ПараметрыВыгрузкиКарточкиСчета.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыВыгрузкиКарточкиСчета.Вставить("Организации", Новый Массив);
	
	ПараметрыВыгрузкиКарточкиСчета.Вставить("Счет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыВыгрузкиКарточкиСчета.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыВыгрузкиКарточкиСчета.Вставить("КонецПериода",  '0001-01-01');
	
	ПараметрыВыгрузкиКарточкиСчета.Вставить("ПоместитьВАрхивZIP",  Ложь);
	
	Возврат ПараметрыВыгрузкиКарточкиСчета;
	
КонецФункции

// Возвращает двоичные данные с представлением карточки счета.
//
// Параметры:
//   ПараметрыВыгрузки - см. ЗаполнениеФинОтчетностиВБанкиВыгрузка.ПараметрыВыгрузкиКарточкиСчета
//
// Возвращаемое значение:
//   ДвоичныеДанные
//
Функция ВыгрузкаКарточкиСчета(ПараметрыВыгрузки) Экспорт
	
	ИдФайла      = ПараметрыВыгрузки.ИдФайла;
	ДатаВыгрузки = ПараметрыВыгрузки.ДатаВыгрузки;
	
	Организация = ПараметрыВыгрузки.Организация;
	Организации = ПараметрыВыгрузки.Организации;
	
	Счет          = ПараметрыВыгрузки.Счет;
	НачалоПериода = ПараметрыВыгрузки.НачалоПериода;
	КонецПериода  = ПараметрыВыгрузки.КонецПериода;
	
	ПараметрыСводныхСведений = ЗаполнениеФинОтчетностиВБанкиВыгрузка.ПараметрыДанныхКарточкиСчетаСводныеСведения();
	ПараметрыСводныхСведений.Организации = Организации;
	ПараметрыСводныхСведений.СчетВерхнегоУровня = Счет;
	ПараметрыСводныхСведений.КодСчетаВерхнегоУровня = Счет.Код;
	ПараметрыСводныхСведений.СчетаВИерархии = БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет);
	ПараметрыСводныхСведений.НачалоПериода = НачалоПериода;
	ПараметрыСводныхСведений.КонецПериода  = КонецПериода;
	
	СводныеСведения = КарточкаСчетаСводныеСведения(ПараметрыСводныхСведений);
	
	ПараметрыЗапросаДетальныхСведений = ПараметрыЗапросаКарточкиСчетаДетальныеСведения();
	ПараметрыЗапросаДетальныхСведений.Организации = Организации;
	ПараметрыЗапросаДетальныхСведений.СчетаВИерархии = БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет);
	ПараметрыЗапросаДетальныхСведений.НачалоПериода = НачалоПериода;
	ПараметрыЗапросаДетальныхСведений.КонецПериода = КонецПериода;
	
	УстановитьПривилегированныйРежим(Истина);
	ДетальныеСведения = ЗапросКарточкаСчетаДетальныеСведения(ПараметрыЗапросаДетальныхСведений).Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыXMLВыгрузкиКарточкиСчета = ПараметрыXMLВыгрузкиКарточкиСчета();
	
	ПараметрыXMLВыгрузкиКарточкиСчета.ДатаДок = ДатаВыгрузки;
	ПараметрыXMLВыгрузкиКарточкиСчета.ИдФайл = ИдФайла;
	
	ПараметрыXMLВыгрузкиКарточкиСчета.Счет          = Счет;
	ПараметрыXMLВыгрузкиКарточкиСчета.НачалоПериода = НачалоПериода;
	ПараметрыXMLВыгрузкиКарточкиСчета.КонецПериода  = КонецПериода;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	ПараметрыXMLВыгрузкиКарточкиСчета.ЭтоИП = ЭтоИП;
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИОРук, ФИО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаВыгрузки, СтрокаСведений);
	
	ПараметрыXMLВыгрузкиКарточкиСчета.ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	Если ЭтоИП Тогда
		ПараметрыXMLВыгрузкиКарточкиСчета.НаимОрг = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		ПараметрыXMLВыгрузкиКарточкиСчета.НаимОрг = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		ПараметрыXMLВыгрузкиКарточкиСчета.КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	ПараметрыXMLВыгрузкиКарточкиСчета.СводныеСведения = СводныеСведения;
	ПараметрыXMLВыгрузкиКарточкиСчета.ДетальныеСведения = ДетальныеСведения;
	
	ПараметрыXMLВыгрузкиКарточкиСчета.ПоместитьВАрхивZIP = ПараметрыВыгрузки.ПоместитьВАрхивZIP;
	
	Возврат ПредставлениеКарточкиСчета(ПараметрыXMLВыгрузкиКарточкиСчета);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОборотноСальдоваяВедомость

Процедура ВнестиСтрокиВСведенияОСВ(СведенияОСВ, ДанныеЗапроса)
	
	Для Каждого СтрокаДанных Из ДанныеЗапроса.Строки Цикл
		ЭтоДетальнаяЗапись = (СтрокаДанных.Строки.Количество() = 0);
		Если НЕ ЭтоДетальнаяЗапись Тогда
			НоваяСтрокаОСВ = СведенияОСВ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОСВ, СтрокаДанных);
			
			ВнестиСтрокиВСведенияОСВ(НоваяСтрокаОСВ, СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтогиОСВ(СведенияОСВ)
	
	ИтоговаяСтрока = СведенияОСВ.Строки[0];
	
	СНД = 0;
	СНК = 0;
	ДО = 0;
	КО = 0;
	СКД = 0;
	СКК = 0;
	
	Для Каждого СтрокаСчета Из ИтоговаяСтрока.Строки Цикл
		СНД = СНД + СтрокаСчета.СНД;
		СНК = СНК + СтрокаСчета.СНК;
		ДО  = ДО  + СтрокаСчета.ДО;
		КО  = КО  + СтрокаСчета.КО;
		СКД = СКД + СтрокаСчета.СКД;
		СКК = СКК + СтрокаСчета.СКК;
	КонецЦикла;
	
	ИтоговаяСтрока.СНД = СНД;
	ИтоговаяСтрока.СНК = СНК;
	ИтоговаяСтрока.ДО  = ДО;
	ИтоговаяСтрока.КО  = КО;
	ИтоговаяСтрока.СКД = СКД;
	ИтоговаяСтрока.СКК = СКК;
	
КонецПроцедуры

// Конструктор параметров функции ЗаполнениеФинОтчетностиВБанкиВыгрузка.ВыгрузкаОСВ
//
// Возвращаемое значение:
//   Структура:
//     * ИдФайл - Строка - технический идентификатор файла;
//     * ВерсПрог - Строка - наименование и версия конфигурации, заполняется автоматически;
//     * ДатаДок - Дата - дата отправки электронного представления;
//     * ЭтоИП - Булево - признак индивидуального предпринимателя;
//     * НаимОрг - Строка - наименование организации, от имени которой производится отправка;
//     * ИНН - Строка - ИНН организациии или индивидуального предпринимателя;
//     * КПП - Строка - КПП организации;
//     * НачалоПериода - Дата;
//     * КонецПериода - Дата;
//     * Данные - Структура:
//       ** Балансовые - ДеревоЗначений;
//       ** Забалансовые - ДеревоЗначений.
//
Функция ПараметрыXMLВыгрузкиОСВ()
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ИдФайл", "");
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", '0001-01-01');
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", Ложь);
	ПараметрыВыгрузки.Вставить("НаимОрг", "");
	ПараметрыВыгрузки.Вставить("ИНН", "");
	ПараметрыВыгрузки.Вставить("КПП", "");
	
	ПараметрыВыгрузки.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыВыгрузки.Вставить("КонецПериода", '0001-01-01');
	
	ПараметрыВыгрузки.Вставить("ПоместитьВАрхивZIP", Ложь);
	ПараметрыВыгрузки.Вставить("Данные", Новый Структура);
	ПараметрыВыгрузки.Данные.Вставить("Балансовые", Новый ДеревоЗначений);
	ПараметрыВыгрузки.Данные.Вставить("Забалансовые", Новый ДеревоЗначений);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

// Возвращает двоичные данные с представлением оборотно-сальдовой ведомости в формате версии 1.01.02.
//
// Параметры:
//   ПараметрыВыгрузки - см. ПараметрыВыгрузкиОСВ_1_01_02
//
// Возвращаемое значение:
//   ДвоичныеДанные
//
Функция ПредставлениеОСВ(ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ПоместитьВАрхивZIP Тогда
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		ИмяВременногоФайла = ВременныйКаталог + ПараметрыВыгрузки.ИдФайл;
		Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(Компоновщик, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(Компоновщик, "ИдФайл",   ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(Компоновщик, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(Компоновщик, "ВерсФорм", "1.01.02");
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок, "Д");
	ВывестиАтрибут(Компоновщик, "ОКЕИ", "383", "Т,3"); // в рублях и копейках
	
	ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки);
	ВывестиУзел_ОСВ(Компоновщик, ПараметрыВыгрузки);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Файл
	
	Если ПараметрыВыгрузки.ПоместитьВАрхивZIP Тогда
		Возврат ДвоичныеДанныеЗаписьZipФайла(Компоновщик, ИмяВременногоФайла, ВременныйКаталог);
	Иначе
		Возврат ДвоичныеДанныеКомпоновщикаXML(Компоновщик, ИмяВременногоФайла);
	КонецЕсли;
	
КонецФункции

Процедура ВывестиУзел_ОСВ(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОборотноСальдоваяВедомость");
	
	ВывестиАтрибут(Компоновщик, "НачПер", ПараметрыВыгрузки.НачалоПериода, "Д");
	ВывестиАтрибут(Компоновщик, "КонПер", ПараметрыВыгрузки.КонецПериода, "Д");
	
	БалансовыеСчета = ПараметрыВыгрузки.Данные.Балансовые;
	ЗабалансовыеСчета = ПараметрыВыгрузки.Данные.Забалансовые;
	
	Если БалансовыеСчета.Строки.Количество() > 0 Тогда
		ВывестиСтраницуВУзел_БалансовыеСчета(Компоновщик, БалансовыеСчета.Строки[0]);
	КонецЕсли;
	
	Если ЗабалансовыеСчета.Строки.Количество() > 0 Тогда
		ВывестиСтраницуВУзел_ЗабалансовыеСчета(Компоновщик, ЗабалансовыеСчета.Строки[0]);
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ОборотноСальдоваяВедомость
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_БалансовыеСчета(Компоновщик, ДанныеУзла)
	
	Компоновщик.ЗаписатьНачалоЭлемента("БалансовыеСчета");
	
	ВывестиАтрибут(Компоновщик, "СНД", ДанныеУзла.СНД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СНК", ДанныеУзла.СНК, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ДО",  ДанныеУзла.ДО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "КО",  ДанныеУзла.КО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКД", ДанныеУзла.СКД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКК", ДанныеУзла.СКК, "Ч,15,2");
	
	ВывестиСтраницуВУзел_Счет(Компоновщик, ДанныеУзла);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // БалансовыеСчета
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_ЗабалансовыеСчета(Компоновщик, ДанныеУзла)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ЗабалансовыеСчета");
	
	ВывестиСтраницуВУзел_Счет(Компоновщик, ДанныеУзла);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ЗабалансовыеСчета
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_Счет(Компоновщик, ДанныеОтчета)
	
	Для Каждого СтрокаСчета Из ДанныеОтчета.Строки Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		ВывестиАтрибут(Компоновщик, "Код", СтрокаСчета.СчетКод, "Т,8");
		ВывестиАтрибут(Компоновщик, "Наименование", СтрокаСчета.СчетНаименование, "Т,120");
		
		ВывестиАтрибут(Компоновщик, "СНД", СтрокаСчета.СНД, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СНК", СтрокаСчета.СНК, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "ДО",  СтрокаСчета.ДО,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "КО",  СтрокаСчета.КО,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКД", СтрокаСчета.СКД, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКК", СтрокаСчета.СКК, "Ч,15,2");
		
		ВывестиСтраницуВУзел_Счет(Компоновщик, СтрокаСчета);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АнализСчета

Функция ПараметрыЗапросаАнализСчета() Экспорт
	
	ПараметрыЗапросаАнализСчета = Новый Структура;
	
	ПараметрыЗапросаАнализСчета.Вставить("СписокОрганизаций", Новый Массив);
	ПараметрыЗапросаАнализСчета.Вставить("Счет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыЗапросаАнализСчета.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыЗапросаАнализСчета.Вставить("КонецПериода",  '0001-01-01');
	
	Возврат ПараметрыЗапросаАнализСчета;
	
КонецФункции

Функция ЗапросАнализСчета(ПараметрыЗаполнения) Экспорт
	
	СписокОрганизаций = ПараметрыЗаполнения.СписокОрганизаций;
	Счет = ПараметрыЗаполнения.Счет;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	ПараметрыСчета = ПараметрыОтправкиСчета(Счет);
	
	Запрос = Новый Запрос;
	
	// ВНИМАНИЕ! Код обработки результата запроса рассчитывает на 5 уровней выборки
	// (где 0 - общие итоги, а 5 - детальные записи, которые выгружаются в xml-файл) - см. секцию ИТОГИ ниже.
	// При этом записи нижнего уровня (5) с признаком ДетальнаяЗапись=ЛОЖЬ в форму отчета не попадают -
	// они нужны только для выгрузки в xml.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	"""" КАК ПредставлениеСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	"""" КАК ПредставлениеСубконто2,
		|	NULL КАК КорСчет,
		|	"""" КАК КодКорСчета,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК,
		|	NULL КАК Субконто1ИНН,
		|	NULL КАК Субконто1КПП,
		|	NULL КАК Субконто2ИНН,
		|	NULL КАК Субконто2КПП,
		|	ЛОЖЬ КАК ДетальнаяЗапись,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Количественный КАК КоличественныйУчет,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК СНД_Кол,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК СНК_Кол,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК ДО_Кол,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК КО_Кол,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК СКД_Кол,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК СКК_Кол,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Валютный КАК ВалютныйУчет,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Код
		|		ИНАЧЕ &ВРУ
		|	КОНЕЦ КАК Валюта,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК СНД_Вал,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК СНК_Вал,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ДО_Вал,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК КО_Вал,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК СКД_Вал,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК СКК_Вал
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета0), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Счет.Код,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.КорСчет.Код,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА,
		|	ХозрасчетныйОбороты.Счет.Количественный,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.КоличествоОборотДт,
		|	ХозрасчетныйОбороты.КоличествоОборотКт,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.Счет.Валютный,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
		|			ТОГДА ХозрасчетныйОбороты.Валюта.Код
		|		ИНАЧЕ &ВРУ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета0), , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("Счета0", ПараметрыСчета[0].Счета);
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Субконто1, НЕОПРЕДЕЛЕНО),
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Субконто2, НЕОПРЕДЕЛЕНО),
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		|	NULL,
		|	"""",
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		|	ВТ_ДанныеКонтрагентов1.ИНН,
		|	ВТ_ДанныеКонтрагентов1.КПП,
		|	ВТ_ДанныеКонтрагентов2.ИНН,
		|	ВТ_ДанныеКонтрагентов2.КПП,
		|	ЛОЖЬ,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Количественный,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Валютный,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Код
		|		ИНАЧЕ &ВРУ
		|	КОНЕЦ,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &ВидыСубконто, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов1
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов1.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов2
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеКонтрагентов2.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Счет.Код,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1),
		|	ХозрасчетныйОбороты.Субконто2,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2),
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.КорСчет.Код,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА,
		|	ХозрасчетныйОбороты.Счет.Количественный,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.КоличествоОборотДт,
		|	ХозрасчетныйОбороты.КоличествоОборотКт,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.Счет.Валютный,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
		|			ТОГДА ХозрасчетныйОбороты.Валюта.Код
		|		ИНАЧЕ &ВРУ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета), &ВидыСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты";
	
	Для Инд = 1 По ПараметрыСчета.Количество() - 1 Цикл
		Если ПараметрыСчета[Инд].Счета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстИмениТаблицы = "ХозрасчетныйОстаткиИОбороты" + СтрокаЧГ0(Инд);
		ТекстИмениТаблицыОборотов = "ХозрасчетныйОбороты" + СтрокаЧГ0(Инд);
		ТекстПараметраСчета = "Счета" + СтрокаЧГ0(Инд);
		ТекстПараметраВидыСубконто = "ВидыСубконто" + СтрокаЧГ0(Инд);
		
		ТекстСегментаЗапроса = ШаблонЗапроса;
		
		Если ПараметрыСчета[Инд].Субконто.Количество() < 2 Тогда
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ХозрасчетныйОстаткиИОбороты.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2)", """");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ХозрасчетныйОбороты.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2)", """");
		КонецЕсли;
		
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты", ТекстИмениТаблицы);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОбороты", ТекстИмениТаблицыОборотов);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Счета", "&" + ТекстПараметраСчета);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&ВидыСубконто", "&" + ТекстПараметраВидыСубконто);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
		             + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС
		             + ТекстСегментаЗапроса;
		
		Запрос.УстановитьПараметр(ТекстПараметраСчета, ПараметрыСчета[Инд].Счета);
		Запрос.УстановитьПараметр(ТекстПараметраВидыСубконто, ПараметрыСчета[Инд].Субконто);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
		+ "
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Валюта,
		|	Субконто1,
		|	Субконто2,
		|	ДетальнаяЗапись,
		|	КорСчет
		|ИТОГИ
		|	МАКСИМУМ(КодСчета) КАК КодСчета,
		|	МАКСИМУМ(Субконто1ИНН) КАК Субконто1ИНН,
		|	МАКСИМУМ(Субконто1КПП) КАК Субконто1КПП,
		|	МАКСИМУМ(Субконто2ИНН) КАК Субконто2ИНН,
		|	МАКСИМУМ(Субконто2КПП) КАК Субконто2КПП,
		|	МАКСИМУМ(ПредставлениеСубконто1) КАК ПредставлениеСубконто1,
		|	МАКСИМУМ(ПредставлениеСубконто2) КАК ПредставлениеСубконто2,
		|	ЛОЖЬ КАК ДетальнаяЗапись,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНД
		|		КОНЕЦ) КАК СНД,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНК
		|		КОНЕЦ) КАК СНК,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА ДО
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДО,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА КО
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КО,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКД
		|		КОНЕЦ) КАК СКД,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКК
		|		КОНЕЦ) КАК СКК,
		|	МАКСИМУМ(КоличественныйУчет) КАК КоличественныйУчет,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНД_Кол
		|		КОНЕЦ) КАК СНД_Кол,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНК_Кол
		|		КОНЕЦ) КАК СНК_Кол,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА ДО_Кол
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДО_Кол,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА КО_Кол
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КО_Кол,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКД_Кол
		|		КОНЕЦ) КАК СКД_Кол,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКК_Кол
		|		КОНЕЦ) КАК СКК_Кол,
		|	МАКСИМУМ(ВалютныйУчет) КАК ВалютныйУчет,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНД_Вал
		|		КОНЕЦ) КАК СНД_Вал,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНК_Вал
		|		КОНЕЦ) КАК СНК_Вал,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА ДО_Вал
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДО_Вал,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА КО_Вал
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КО_Вал,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКД_Вал
		|		КОНЕЦ) КАК СКД_Вал,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКК_Вал
		|		КОНЕЦ) КАК СКК_Вал
		|ПО
		|	ОБЩИЕ,
		|	Счет,
		|	Субконто1,
		|	Субконто2,
		|	Валюта
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("ВРУ", Константы.ВалютаРегламентированногоУчета.Получить().Код);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Организация", "В (&СписокОрганизаций)");
	
	Возврат Запрос;
	
КонецФункции

Функция ПараметрыXMLВыгрузкиАнализаСчета()
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ИдФайл", "");
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", '0001-01-01');
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", Ложь);
	ПараметрыВыгрузки.Вставить("НаимОрг", "");
	ПараметрыВыгрузки.Вставить("ИНН", "");
	ПараметрыВыгрузки.Вставить("КПП", "");
	
	ПараметрыВыгрузки.Вставить("Счет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыВыгрузки.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыВыгрузки.Вставить("КонецПериода", '0001-01-01');
	
	ПараметрыВыгрузки.Вставить("ПоместитьВАрхивZIP", Ложь);
	ПараметрыВыгрузки.Вставить("Данные");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ПредставлениеАнализаСчета(ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ПоместитьВАрхивZIP Тогда
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		ИмяВременногоФайла = ВременныйКаталог + ПараметрыВыгрузки.ИдФайл;
		Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(Компоновщик, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(Компоновщик, "ИдФайл",   ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(Компоновщик, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(Компоновщик, "ВерсФорм", "1.01.02");
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок, "Д");
	ВывестиАтрибут(Компоновщик, "ОКЕИ", "383", "Т,3"); // в рублях и копейках
	
	ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_АнализСчета(Компоновщик, ПараметрыВыгрузки);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Файл
	
	Если ПараметрыВыгрузки.ПоместитьВАрхивZIP Тогда
		Возврат ДвоичныеДанныеЗаписьZipФайла(Компоновщик, ИмяВременногоФайла, ВременныйКаталог);
	Иначе
		Возврат ДвоичныеДанныеКомпоновщикаXML(Компоновщик, ИмяВременногоФайла);
	КонецЕсли;
	
КонецФункции

Процедура ВывестиУзел_АнализСчета(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("АнализСчета");
	
	ВывестиАтрибут(Компоновщик, "Код",    ПараметрыВыгрузки.Счет.Код, "Т,8");
	ВывестиАтрибут(Компоновщик, "Наим",   ПараметрыВыгрузки.Счет.Наименование, "Т,120");
	ВывестиАтрибут(Компоновщик, "НачПер", ПараметрыВыгрузки.НачалоПериода, "Д");
	ВывестиАтрибут(Компоновщик, "КонПер", ПараметрыВыгрузки.КонецПериода, "Д");
	
	ВывестиСтраницуВУзел_АнализСчетов_АнализСчета(Компоновщик, ПараметрыВыгрузки.Данные);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // АнализСчета
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_АнализСчетов_АнализСчета(Компоновщик, Данные)
	
	ВыборкаИтоги = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ВыборкаПоСчетам = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСчетам.Следующий() Цикл
		ВыборкаПоСубконто1 = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСубконто1.Следующий() Цикл
			ВыборкаПоСубконто2 = ВыборкаПоСубконто1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСубконто2.Следующий() Цикл
				ВыборкаПоВалютам = ВыборкаПоСубконто2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВалютам.Следующий() Цикл
					ВыборкаДетальныхЗаписей = ВыборкаПоВалютам.Выбрать();
					
					Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
						Если НЕ ВыборкаДетальныхЗаписей.ДетальнаяЗапись Тогда
							Компоновщик.ЗаписатьНачалоЭлемента("СтрокаАнализа");
							
							ВывестиУзел_АнализСчетов_АнализСчета_Счет(Компоновщик, ВыборкаДетальныхЗаписей);
							
							// Корреспондирующие обороты.
							Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
								Если НЕ ВыборкаДетальныхЗаписей.ДетальнаяЗапись Тогда
									ИмяФункции = "ЗаполнениеФинОтчетностиВБанкиВыгрузка.ВывестиСтраницуВУзел_АнализСчетов_АнализСчета";
									ВызватьИсключение СтрШаблон(НСтр("ru = 'Функция %1:
										|нарушена последовательность детальных записей в запросе с данными';
										|en = 'Function %1:
										|sequence of detailed records in a query with data is violated'"), ИмяФункции);
								КонецЕсли;
								
								Компоновщик.ЗаписатьНачалоЭлемента("Корреспонденция");
								
								СведенияКоррСчета = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(ВыборкаДетальныхЗаписей.КорСчет);
								
								ВывестиАтрибут(Компоновщик, "Код", СведенияКоррСчета.КодСчета, "Т,8");
								
								ВывестиАтрибут(Компоновщик, "ДО", ВыборкаДетальныхЗаписей.ДО, "Ч,15,2");
								ВывестиАтрибут(Компоновщик, "КО", ВыборкаДетальныхЗаписей.КО, "Ч,15,2");
								
								Если ВыборкаДетальныхЗаписей.КоличественныйУчет Тогда
									ВывестиАтрибут(Компоновщик, "ДО_Кол", ВыборкаДетальныхЗаписей.ДО_Кол, "Ч,15,3");
									ВывестиАтрибут(Компоновщик, "КО_Кол", ВыборкаДетальныхЗаписей.КО_Кол, "Ч,15,3");
								КонецЕсли;
								
								Если ВыборкаДетальныхЗаписей.ВалютныйУчет Тогда
									ВывестиАтрибут(Компоновщик, "Валюта", ВыборкаДетальныхЗаписей.Валюта, "Т,3");
									ВывестиАтрибут(Компоновщик, "ДО_Вал", ВыборкаДетальныхЗаписей.ДО_Вал, "Ч,15,2");
									ВывестиАтрибут(Компоновщик, "КО_Вал", ВыборкаДетальныхЗаписей.КО_Вал, "Ч,15,2");
								КонецЕсли;
								
								Компоновщик.ЗаписатьКонецЭлемента(); // "Корреспонденция"
								
							КонецЦикла;
							
							Компоновщик.ЗаписатьКонецЭлемента(); // СтрокаАнализа
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиУзел_АнализСчетов_АнализСчета_Счет(Компоновщик, ДанныеУзла)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Счет");
	
	СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(ДанныеУзла.Счет);
	
	ВывестиАтрибут(Компоновщик, "Код", СведенияСчетаСтроки.КодСчета, "Т,8");
	
	ВывестиАтрибут(Компоновщик, "СНД", ДанныеУзла.СНД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СНК", ДанныеУзла.СНК, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ДО",  ДанныеУзла.ДО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "КО",  ДанныеУзла.КО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКД", ДанныеУзла.СКД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКК", ДанныеУзла.СКК, "Ч,15,2");
	
	Если ДанныеУзла.КоличественныйУчет Тогда
		ВывестиАтрибут(Компоновщик, "СНД_Кол", ДанныеУзла.СНД_Кол, "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "СНК_Кол", ДанныеУзла.СНК_Кол, "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "ДО_Кол",  ДанныеУзла.ДО_Кол,  "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "КО_Кол",  ДанныеУзла.КО_Кол,  "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "СКД_Кол", ДанныеУзла.СКД_Кол, "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "СКК_Кол", ДанныеУзла.СКК_Кол, "Ч,15,3");
	КонецЕсли;
	
	Если ДанныеУзла.ВалютныйУчет Тогда
		ВывестиАтрибут(Компоновщик, "Валюта",  ДанныеУзла.Валюта, "Т,3");
		ВывестиАтрибут(Компоновщик, "СНД_Вал", ДанныеУзла.СНД_Вал, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СНК_Вал", ДанныеУзла.СНК_Вал, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "ДО_Вал",  ДанныеУзла.ДО_Вал,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "КО_Вал",  ДанныеУзла.КО_Вал,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКД_Вал", ДанныеУзла.СКД_Вал, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКК_Вал", ДанныеУзла.СКК_Вал, "Ч,15,2");
	КонецЕсли;
	
	Субконто1 = ДанныеУзла.Субконто1;
	Субконто1_Представление = ДанныеУзла.ПредставлениеСубконто1;
	Субконто1_Тип = Строка(ТипЗнч(ДанныеУзла.Субконто1));
	Субконто1_ИНН = ?(ТипЗнч(Субконто1) = Тип("СправочникСсылка.Контрагенты"), ДанныеУзла.Субконто1.ИНН, "");
	
	Если Субконто1 <> Неопределено Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("Субконто1");
		ВывестиАтрибут(Компоновщик, "Представление", Субконто1_Представление, "Т,1000");
		ВывестиАтрибут(Компоновщик, "ТипСубконто", Субконто1_Тип, "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", Субконто1_ИНН, "Т,12");
		Компоновщик.ЗаписатьКонецЭлемента(); // Субконто1
	КонецЕсли;
	
	Субконто2 = ДанныеУзла.Субконто2;
	Субконто2_Представление = ДанныеУзла.ПредставлениеСубконто2;
	Субконто2_Тип = Строка(ТипЗнч(ДанныеУзла.Субконто2));
	Субконто2_ИНН = ?(ТипЗнч(Субконто2) = Тип("СправочникСсылка.Контрагенты"), ДанныеУзла.Субконто2.ИНН, "");
	
	Если Субконто2 <> Неопределено Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("Субконто2");
		ВывестиАтрибут(Компоновщик, "Представление", Субконто2_Представление, "Т,1000");
		ВывестиАтрибут(Компоновщик, "ТипСубконто", Субконто2_Тип, "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", Субконто2_ИНН, "Т,12");
		Компоновщик.ЗаписатьКонецЭлемента(); // Субконто2
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Счет
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаСчета

Функция ПараметрыДанныхКарточкиСчетаСводныеСведения() Экспорт
	
	ПараметрыДанных = Новый Структура;
	
	ПараметрыДанных.Вставить("Организации", Новый Массив);
	
	ПараметрыДанных.Вставить("СчетВерхнегоУровня", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыДанных.Вставить("КодСчетаВерхнегоУровня", "");
	
	ПараметрыДанных.Вставить("СчетаВИерархии", Новый Массив);
	
	ПараметрыДанных.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыДанных.Вставить("КонецПериода",  '0001-01-01');
	
	Возврат ПараметрыДанных;
	
КонецФункции

Функция КарточкаСчетаСводныеСведения(ПараметрыДанных) Экспорт
	
	СводныеДанные = НовыеСводныеДанныеКарточкиСчета();
	
	СтрокаСчетаВерхнегоУровня = СводныеДанные.Строки.Добавить();
	СтрокаСчетаВерхнегоУровня.Счет          = ПараметрыДанных.СчетВерхнегоУровня;
	СтрокаСчетаВерхнегоУровня.Представление = ПараметрыДанных.КодСчетаВерхнегоУровня;
	
	Запрос = Новый Запрос;
	
	// Обороты за период рассчитываются по таблице РегистрБухгалтерии.Хозрасчетный,
	// т.к. Хозрасчетный.ОстаткиИОбороты не содержит данных, когда обороты в 
	// периоде есть, но итоговые остатки на начало и конец нулевые
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОстатковИОборотов.Счет КАК Счет,
		|	ТаблицаОстатковИОборотов.Счет.Код КАК Представление,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоНачальноеДт) КАК СальдоНачальноеДт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоНачальноеКт) КАК СальдоНачальноеКт,
		|	СУММА(ТаблицаОстатковИОборотов.ОборотыДт) КАК ОборотыДт,
		|	СУММА(ТаблицаОстатковИОборотов.ОборотыКт) КАК ОборотыКт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоКонечноеДт) КАК СальдоКонечноеДт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоКонечноеКт) КАК СальдоКонечноеКт
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СальдоНачальноеДт,
		|		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СальдоНачальноеКт,
		|		0 КАК ОборотыДт,
		|		0 КАК ОборотыКт,
		|		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СальдоКонечноеДт,
		|		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СальдоКонечноеКт
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаУчета), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОборотыПоСчетам.Счет,
		|		0,
		|		0,
		|		СУММА(ОборотыПоСчетам.ОборотыДт),
		|		СУММА(ОборотыПоСчетам.ОборотыКт),
		|		0,
		|		0
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Хозрасчетный.СчетДт КАК Счет,
		|			Хозрасчетный.Сумма КАК ОборотыДт,
		|			0 КАК ОборотыКт
		|		ИЗ
		|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|		ГДЕ
		|			Хозрасчетный.Активность
		|			И Хозрасчетный.Организация В(&СписокОрганизаций)
		|			И Хозрасчетный.СчетДт В(&СчетаУчета)
		|			И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			Хозрасчетный.СчетКт,
		|			0,
		|			Хозрасчетный.Сумма
		|		ИЗ
		|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|		ГДЕ
		|			Хозрасчетный.Активность
		|			И Хозрасчетный.Организация В(&СписокОрганизаций)
		|			И Хозрасчетный.СчетКт В(&СчетаУчета)
		|			И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода) КАК ОборотыПоСчетам
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОборотыПоСчетам.Счет) КАК ТаблицаОстатковИОборотов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатковИОборотов.Счет,
		|	ТаблицаОстатковИОборотов.Счет.Код
		|ИТОГИ
		|	СУММА(СальдоНачальноеДт),
		|	СУММА(СальдоНачальноеКт),
		|	СУММА(ОборотыДт),
		|	СУММА(ОборотыКт),
		|	СУММА(СальдоКонечноеДт),
		|	СУММА(СальдоКонечноеКт)
		|ПО
		|	Счет ИЕРАРХИЯ"; 
	
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыДанных.Организации);
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыДанных.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыДанных.КонецПериода);
	
	Запрос.УстановитьПараметр("СчетаУчета", ПараметрыДанных.СчетаВИерархии);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПоСчету = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	
	ЗапросДляСубсчетов = Новый Запрос;
	ЗапросДляСубсчетов.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросДляСубсчетов.УстановитьПараметр("СписокОрганизаций", ПараметрыДанных.Организации);
	ЗапросДляСубсчетов.УстановитьПараметр("НачалоПериода",     ПараметрыДанных.НачалоПериода);
	ЗапросДляСубсчетов.УстановитьПараметр("КонецПериода",      ПараметрыДанных.КонецПериода);
	ЗапросДляСубсчетов.УстановитьПараметр("СчетаУчета",        ПараметрыДанных.СчетаВИерархии);
	ЗапросДляСубсчетов.УстановитьПараметр("СубконтоБанковскиеСчета",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
		
	// Обороты за период рассчитываются по таблице Хозрасчетный.Обороты с детализацией
	// до записи, т.к. Хозрасчетный.ОстаткиИОбороты не содержит данных когда обороты в 
	// периоде есть, но итоговые остатки на начало и конец нулевые, если даже 
	// аналитика отличается, но в запросе не указана
	ЗапросДляСубсчетов.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОстатковИОборотов.Счет КАК Счет,
		|	ТаблицаОстатковИОборотов.Субконто1 КАК Субконто1,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоНачальноеДт) КАК СальдоНачальноеДт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоНачальноеКт) КАК СальдоНачальноеКт,
		|	СУММА(ТаблицаОстатковИОборотов.ОборотыДт) КАК ОборотыДт,
		|	СУММА(ТаблицаОстатковИОборотов.ОборотыКт) КАК ОборотыКт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоКонечноеДт) КАК СальдоКонечноеДт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоКонечноеКт) КАК СальдоКонечноеКт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоНачальноеВалДт) КАК СальдоНачальноеВалДт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоНачальноеВалКт) КАК СальдоНачальноеВалКт,
		|	СУММА(ТаблицаОстатковИОборотов.ОборотыВалДт) КАК ОборотыВалДт,
		|	СУММА(ТаблицаОстатковИОборотов.ОборотыВалКт) КАК ОборотыВалКт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоКонечноеВалДт) КАК СальдоКонечноеВалДт,
		|	СУММА(ТаблицаОстатковИОборотов.СальдоКонечноеВалКт) КАК СальдоКонечноеВалКт
		|ПОМЕСТИТЬ ВТ_ТаблицаОстатковИОборотов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|		ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
		|		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СальдоНачальноеДт,
		|		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СальдоНачальноеКт,
		|		0 КАК ОборотыДт,
		|		0 КАК ОборотыКт,
		|		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СальдоКонечноеДт,
		|		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СальдоКонечноеКт,
		|		ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК СальдоНачальноеВалДт,
		|		ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК СальдоНачальноеВалКт,
		|		0 КАК ОборотыВалДт,
		|		0 КАК ОборотыВалКт,
		|		ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК СальдоКонечноеВалДт,
		|		ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК СальдоКонечноеВалКт
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаУчета), &СубконтоБанковскиеСчета, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Счет,
		|		ХозрасчетныйОбороты.Субконто1,
		|		0,
		|		0,
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
		|		0,
		|		0,
		|		0,
		|		0,
		|		СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт),
		|		СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт),
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Запись, Счет В (&СчетаУчета), &СубконтоБанковскиеСчета, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХозрасчетныйОбороты.Счет,
		|		ХозрасчетныйОбороты.Субконто1) КАК ТаблицаОстатковИОборотов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатковИОборотов.Счет,
		|	ТаблицаОстатковИОборотов.Субконто1";
	
	ЗапросДляСубсчетов.Выполнить();
	
	Если ВыборкаПоСчету.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаСчетаВерхнегоУровня, ВыборкаПоСчету);
		
		СтрокиПоСубсчетам = СтрокаСчетаВерхнегоУровня.Строки;
		ВыборкаПоСубсчетам = ВыборкаПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		Если ВыборкаПоСубсчетам.Количество() = 0 Тогда
			ВыборкаПоСубсчетам = ВыборкаПоСчету.Выбрать();
		КонецЕсли;
		
		Пока ВыборкаПоСубсчетам.Следующий() Цикл
			Заполнить_Операции_СводныеСведенияПоСубсчету(
				СтрокиПоСубсчетам, ВыборкаПоСубсчетам, ЗапросДляСубсчетов);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СводныеДанные;
	
КонецФункции

Функция НовыеСводныеДанныеКарточкиСчета()
	
	ТипДенежнаяСумма = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	СводныеДанные = Новый ДеревоЗначений;
	
	СводныеДанные.Колонки.Добавить("Счет");
	СводныеДанные.Колонки.Добавить("Представление");
	СводныеДанные.Колонки.Добавить("Расшифровка");
	СводныеДанные.Колонки.Добавить("ЗаголовокВалюта");
	СводныеДанные.Колонки.Добавить("Валютный", Новый ОписаниеТипов("Булево"));
	СводныеДанные.Колонки.Добавить("НомерСчета");
	СводныеДанные.Колонки.Добавить("БИКБанка");
	СводныеДанные.Колонки.Добавить("НаименованиеБанка");
	СводныеДанные.Колонки.Добавить("КодВалюты");
	
	СводныеДанные.Колонки.Добавить("СальдоНачальноеДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоНачальноеКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеКт", ТипДенежнаяСумма);
	
	СводныеДанные.Колонки.Добавить("СальдоНачальноеВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоНачальноеВалКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыВалКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеВалКт", ТипДенежнаяСумма);
	
	Возврат СводныеДанные;
	
КонецФункции

Процедура Заполнить_Операции_СводныеСведенияПоСубсчету(СтрокиПоСубсчетам, ВыборкаПоСубсчетам, Запрос)
	
	Если ВыборкаПоСубсчетам.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
		НоваяСтрокаСубсчета = СтрокиПоСубсчетам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСубсчета, ВыборкаПоСубсчетам);
		
		// Рекурсивный разбор субсчетов.
		Выборка = ВыборкаПоСубсчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		Если Выборка.Количество() = 0 Тогда
			Выборка = ВыборкаПоСубсчетам.Выбрать();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Заполнить_Операции_СводныеСведенияПоСубсчету(
				НоваяСтрокаСубсчета.Строки, Выборка, Запрос);
		КонецЦикла;
		
	Иначе
		СтрокиПоБанковскимСчетам = СтрокиПоСубсчетам;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаОстатковИОборотов.Субконто1 КАК Счет,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаОстатковИОборотов.Субконто1) КАК Представление,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Валютный
			|			ТОГДА ""Вал.""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ЗаголовокВалюта,
			|	БанковскиеСчета.Валютный КАК Валютный,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.БИКБанка КАК БИКБанка,
			|	БанковскиеСчета.НаименованиеБанка КАК НаименованиеБанка,
			|	БанковскиеСчета.КодВалюты КАК КодВалюты,
			|	ТаблицаОстатковИОборотов.СальдоНачальноеДт КАК СальдоНачальноеДт,
			|	ТаблицаОстатковИОборотов.СальдоНачальноеКт КАК СальдоНачальноеКт,
			|	ТаблицаОстатковИОборотов.ОборотыДт КАК ОборотыДт,
			|	ТаблицаОстатковИОборотов.ОборотыКт КАК ОборотыКт,
			|	ТаблицаОстатковИОборотов.СальдоКонечноеДт КАК СальдоКонечноеДт,
			|	ТаблицаОстатковИОборотов.СальдоКонечноеКт КАК СальдоКонечноеКт,
			|	ТаблицаОстатковИОборотов.СальдоНачальноеВалДт КАК СальдоНачальноеВалДт,
			|	ТаблицаОстатковИОборотов.СальдоНачальноеВалКт КАК СальдоНачальноеВалКт,
			|	ТаблицаОстатковИОборотов.ОборотыВалДт КАК ОборотыВалДт,
			|	ТаблицаОстатковИОборотов.ОборотыВалКт КАК ОборотыВалКт,
			|	ТаблицаОстатковИОборотов.СальдоКонечноеВалДт КАК СальдоКонечноеВалДт,
			|	ТаблицаОстатковИОборотов.СальдоКонечноеВалКт КАК СальдоКонечноеВалКт
			|ИЗ
			|	ВТ_ТаблицаОстатковИОборотов КАК ТаблицаОстатковИОборотов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчетаПереопределяемый КАК БанковскиеСчета
			|		ПО ТаблицаОстатковИОборотов.Субконто1 = БанковскиеСчета.Счет
			|ГДЕ
			|	ТаблицаОстатковИОборотов.Счет = &СчетУчетаБС
			|
			|УПОРЯДОЧИТЬ ПО
			|	Счет
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("СчетУчетаБС", ВыборкаПоСубсчетам.Счет);
		
		Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_БанковскиеСчетаПереопределяемый") = Неопределено Тогда
			ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаПоБанковскимСчетам = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Пока ВыборкаПоБанковскимСчетам.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоБанковскимСчетам.Счет) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаБанковскогоСчета = СтрокиПоБанковскимСчетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаБанковскогоСчета, ВыборкаПоБанковскимСчетам);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗапросаКарточкиСчетаДетальныеСведения() Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("Организации", Новый Массив);
	
	ПараметрыЗапроса.Вставить("СчетаВИерархии", Новый Массив);
	
	ПараметрыЗапроса.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыЗапроса.Вставить("КонецПериода",  '0001-01-01');
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросКарточкаСчетаДетальныеСведения(ПараметрыЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Период КАК Период,
		|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
		|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 КАК ВидСубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 КАК ВидСубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 КАК ВидСубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 КАК ВидСубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 КАК ВидСубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 КАК ВидСубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт.Наименование КАК ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт.Наименование КАК ВалютаКт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
		|	ХозрасчетныйДвиженияССубконто.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_ВсеОперации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Активность
		|				И Организация В (&СписокОрганизаций)
		|				И Счет В (&СчетаУчета),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеОперации.Период КАК ДатаОперации,
		|	ВТ_ВсеОперации.Регистратор КАК Документ,
		|	ВТ_ВсеОперации.НомерСтроки КАК НомерСтроки,
		|	ВТ_ВсеОперации.СчетДт КАК СчетДт,
		|	ВТ_ВсеОперации.СчетКт КАК СчетКт,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт1
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт2
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт3
		|	КОНЕЦ КАК БанковскийСчет,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.Организация
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт1) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт2) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт3) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт3
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт1) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт2) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт3) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт3
		|	КОНЕЦ КАК Договор,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаДт, 0) КАК СуммаВал,
		|	ВТ_ВсеОперации.Сумма КАК Сумма,
		|	ВТ_ВсеОперации.Содержание КАК Назначение,
		|	ВТ_ДокументыПоСчету.НомерВходящегоДокумента КАК НомерДокумента,
		|	ВТ_ДокументыПоСчету.ДатаВходящегоДокумента КАК ДатаДокумента,
		|	ВТ_ДокументыПоСчету.ВидОперации КАК ВидОперации,
		|	ВТ_ВсеОперации.Сумма КАК СуммаДт,
		|	0 КАК СуммаКт,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаДт, 0) КАК СуммаВалДт,
		|	0 КАК СуммаВалКт,
		|	ВТ_ВсеОперации.ВалютаДт КАК ВалютаДт,
		|	ВТ_ВсеОперации.ВалютаКт КАК ВалютаКт,
		|	1 КАК ВидДвиженияПоСчету
		|ПОМЕСТИТЬ ВТ_ОперацииПоСчету
		|ИЗ
		|	ВТ_ВсеОперации КАК ВТ_ВсеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыПоСчетуПереопределяемый КАК ВТ_ДокументыПоСчету
		|		ПО ВТ_ВсеОперации.Регистратор = ВТ_ДокументыПоСчету.Ссылка
		|ГДЕ
		|	ВТ_ВсеОперации.СчетДт В(&СчетаУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеОперации.Период,
		|	ВТ_ВсеОперации.Регистратор,
		|	ВТ_ВсеОперации.НомерСтроки,
		|	ВТ_ВсеОперации.СчетДт,
		|	ВТ_ВсеОперации.СчетКт,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт1
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт2
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт3
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.Организация
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт1) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт2) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт3) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт3
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт1) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт2) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт3) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт3
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаКт, 0),
		|	ВТ_ВсеОперации.Сумма,
		|	ВТ_ВсеОперации.Содержание,
		|	ВТ_ДокументыПоСчету.НомерВходящегоДокумента,
		|	ВТ_ДокументыПоСчету.ДатаВходящегоДокумента,
		|	ВТ_ДокументыПоСчету.ВидОперации,
		|	0,
		|	ВТ_ВсеОперации.Сумма,
		|	0,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаКт, 0),
		|	ВТ_ВсеОперации.ВалютаДт,
		|	ВТ_ВсеОперации.ВалютаКт,
		|	0
		|ИЗ
		|	ВТ_ВсеОперации КАК ВТ_ВсеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыПоСчетуПереопределяемый КАК ВТ_ДокументыПоСчету
		|		ПО ВТ_ВсеОперации.Регистратор = ВТ_ДокументыПоСчету.Ссылка
		|ГДЕ
		|	ВТ_ВсеОперации.СчетКт В(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОперацииПоСчету.ДатаОперации КАК ДатаОперации,
		|	ВТ_ОперацииПоСчету.Документ КАК Документ,
		|	ВТ_ОперацииПоСчету.НомерСтроки КАК НомерСтроки,
		|	ВТ_ОперацииПоСчету.СчетДт КАК СчетДт,
		|	ВТ_ОперацииПоСчету.СчетКт КАК СчетКт,
		|	ВТ_ОперацииПоСчету.БанковскийСчет КАК БанковскийСчет,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.Контрагент) КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.Договор) КАК Договор,
		|	ВТ_ОперацииПоСчету.СуммаВал КАК СуммаВал,
		|	ВТ_ОперацииПоСчету.Сумма КАК Сумма,
		|	ВТ_ОперацииПоСчету.Назначение КАК Назначение,
		|	ВТ_ОперацииПоСчету.НомерДокумента КАК НомерДокумента,
		|	ВТ_ОперацииПоСчету.ДатаДокумента КАК ДатаДокумента,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.ВидОперации) КАК ВидОперации,
		|	ВТ_ОперацииПоСчету.СуммаДт КАК СуммаДт,
		|	ВТ_ОперацииПоСчету.СуммаКт КАК СуммаКт,
		|	ВТ_ОперацииПоСчету.СуммаВалДт КАК СуммаВалДт,
		|	ВТ_ОперацииПоСчету.СуммаВалКт КАК СуммаВалКт,
		|	ВТ_ОперацииПоСчету.ВалютаДт КАК ВалютаДт,
		|	ВТ_ОперацииПоСчету.ВалютаКт КАК ВалютаКт,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """") КАК ИНН,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """") КАК КПП,
		|	ВТ_ОперацииПоСчету.СчетДт.Код КАК СчетДтКод,
		|	ВТ_ОперацииПоСчету.СчетКт.Код КАК СчетКтКод,
		|	ВТ_ОперацииПоСчету.ВидДвиженияПоСчету КАК ВидДвиженияПоСчету
		|ИЗ
		|	ВТ_ОперацииПоСчету КАК ВТ_ОперацииПоСчету
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
		|		ПО ВТ_ОперацииПоСчету.Контрагент = ВТ_ДанныеКонтрагентов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОперации,
		|	Документ,
		|	НомерСтроки
		|ИТОГИ ПО
		|	БанковскийСчет";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыЗапроса.Организации);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыЗапроса.КонецПериода);
	
	Запрос.УстановитьПараметр("СчетаУчета", ПараметрыЗапроса.СчетаВИерархии);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентов",
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ВидыСубконтоКонтрагентов());
	Запрос.УстановитьПараметр("ВидыСубконтоДоговоров",
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ВидыСубконтоДоговоров());
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Организация", "В (&СписокОрганизаций)");
	
	Возврат Запрос;
	
КонецФункции

Функция ПараметрыXMLВыгрузкиКарточкиСчета()
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ИдФайл", "");
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", '0001-01-01');
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", Ложь);
	ПараметрыВыгрузки.Вставить("НаимОрг", "");
	ПараметрыВыгрузки.Вставить("ИНН", "");
	ПараметрыВыгрузки.Вставить("КПП", "");
	
	ПараметрыВыгрузки.Вставить("Счет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыВыгрузки.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыВыгрузки.Вставить("КонецПериода",  '0001-01-01');
	
	ПараметрыВыгрузки.Вставить("СводныеСведения", Новый ДеревоЗначений);
	ПараметрыВыгрузки.Вставить("ПоместитьВАрхивZIP", Ложь);
	ПараметрыВыгрузки.Вставить("ДетальныеСведения");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ПредставлениеКарточкиСчета(ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ПоместитьВАрхивZIP Тогда
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		ИмяВременногоФайла = ВременныйКаталог + ПараметрыВыгрузки.ИдФайл;
		Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(Компоновщик, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(Компоновщик, "ИдФайл",   ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(Компоновщик, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(Компоновщик, "ВерсФорм", "1.01.02");
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок, "Д");
	ВывестиАтрибут(Компоновщик, "ОКЕИ", "383", "Т,3"); // в рублях и копейках
	
	ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Файл
	
	Если ПараметрыВыгрузки.ПоместитьВАрхивZIP Тогда
		Возврат ДвоичныеДанныеЗаписьZipФайла(Компоновщик, ИмяВременногоФайла, ВременныйКаталог);
	Иначе
		Возврат ДвоичныеДанныеКомпоновщикаXML(Компоновщик, ИмяВременногоФайла);
	КонецЕсли;
	
КонецФункции

Процедура ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОперБанкСч");
	
	ВывестиАтрибут(Компоновщик, "НачПер", ПараметрыВыгрузки.НачалоПериода, "Д");
	ВывестиАтрибут(Компоновщик, "КонПер", ПараметрыВыгрузки.КонецПериода, "Д");
	
	ВывестиСтраницуВУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ОперБанкСч
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки)
	
	СводныеСведения = ПараметрыВыгрузки.СводныеСведения;
	
	СтрокаСчетаВерхнегоУровня = СводныеСведения.Строки[0];
	
	Компоновщик.ЗаписатьНачалоЭлемента("СчетУчета");
	
	ВывестиАтрибут(Компоновщик, "КодСчета",        СтрокаСчетаВерхнегоУровня.Представление, "Т,8");
	ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчетаВерхнегоУровня.СальдоНачальноеДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыДт",       СтрокаСчетаВерхнегоУровня.ОборотыДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыКт",       СтрокаСчетаВерхнегоУровня.ОборотыКт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СальдоКонечное",  СтрокаСчетаВерхнегоУровня.СальдоКонечноеДт, "Ч,15,2");
	
	ВывестиСтраницуВУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, ПараметрыВыгрузки);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СчетУчета
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, ПараметрыВыгрузки)
	
	СводныеСведения = ПараметрыВыгрузки.СводныеСведения;
	ДетальныеСведения = ПараметрыВыгрузки.ДетальныеСведения;
	
	ВыборкаПоБанковскимСчетам = ДетальныеСведения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоБанковскимСчетам.Следующий() Цикл
		БанковскийСчет = ВыборкаПоБанковскимСчетам.БанковскийСчет;
		
		Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		СводныеСведенияПоБанковскомуСчету = СводныеСведения.Строки.Найти(БанковскийСчет, "Счет", Истина);
		
		Компоновщик.ЗаписатьНачалоЭлемента("БанкСч");
		
		ВывестиНеобязательныйАтрибут(Компоновщик, "Наименование", СводныеСведенияПоБанковскомуСчету.Представление, "Т,100");
		ВывестиАтрибут(Компоновщик, "Номер", СводныеСведенияПоБанковскомуСчету.НомерСчета, "Т,34");
		ВывестиАтрибут(Компоновщик, "БИК", СводныеСведенияПоБанковскомуСчету.БИКБанка, "Т,9");
		ВывестиНеобязательныйАтрибут(Компоновщик, "Банк", СводныеСведенияПоБанковскомуСчету.НаименованиеБанка, "Т,100");
		
		Если СводныеСведенияПоБанковскомуСчету.Валютный Тогда
			ВывестиАтрибут(Компоновщик, "Валюта", СводныеСведенияПоБанковскомуСчету.КодВалюты, "Т,3");
		КонецЕсли;
		
		ВывестиАтрибут(Компоновщик, "СальдоНачальное", СводныеСведенияПоБанковскомуСчету.СальдоНачальноеДт, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "ОборотыДт"      , СводныеСведенияПоБанковскомуСчету.ОборотыДт, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "ОборотыКт"      , СводныеСведенияПоБанковскомуСчету.ОборотыКт, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СальдоКонечное" , СводныеСведенияПоБанковскомуСчету.СальдоКонечноеДт, "Ч,15,2");
		
		Если СводныеСведенияПоБанковскомуСчету.Валютный Тогда
			ВывестиАтрибут(Компоновщик, "СальдоНачальноеВал", СводныеСведенияПоБанковскомуСчету.СальдоНачальноеВалДт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ОборотыДтВал"      , СводныеСведенияПоБанковскомуСчету.ОборотыВалДт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ОборотыКтВал"      , СводныеСведенияПоБанковскомуСчету.ОборотыВалКт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СальдоКонечноеВал" , СводныеСведенияПоБанковскомуСчету.СальдоКонечноеВалДт, "Ч,15,2");
		КонецЕсли;
		
		ВыборкаПоОперациям = ВыборкаПоБанковскимСчетам.Выбрать();
		
		Пока ВыборкаПоОперациям.Следующий() Цикл
			Компоновщик.ЗаписатьНачалоЭлемента("Операция");
			
			ВывестиАтрибут(Компоновщик, "Дата", ВыборкаПоОперациям.ДатаОперации, "Д");
			Если ЗначениеЗаполнено(ВыборкаПоОперациям.НомерДокумента)
			   И ЗначениеЗаполнено(ВыборкаПоОперациям.ДатаДокумента) Тогда
				ВывестиНеобязательныйАтрибут(Компоновщик, "ДокНомер", ВыборкаПоОперациям.НомерДокумента, "Т,255");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ДокДата", ВыборкаПоОперациям.ДатаДокумента, "Д");
			КонецЕсли;
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "ВидОперации", ВыборкаПоОперациям.ВидОперации, "Т,255");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Назначение", ВыборкаПоОперациям.Назначение, "Т,255");
			
			ВывестиАтрибут(Компоновщик, "СчетДт", ВыборкаПоОперациям.СчетДтКод, "Т,8");
			ВывестиАтрибут(Компоновщик, "СчетКт", ВыборкаПоОперациям.СчетКтКод, "Т,8");
			ВывестиАтрибут(Компоновщик, "Сумма", ВыборкаПоОперациям.Сумма, "Ч,15,2");
			
			Если СводныеСведенияПоБанковскомуСчету.Валютный Тогда
				ВывестиАтрибут(Компоновщик, "СуммаВал", ВыборкаПоОперациям.СуммаВал, "Ч,15,2");
			КонецЕсли;
			
			ВывестиАтрибут(Компоновщик, "ВидДвижения", ВыборкаПоОперациям.ВидДвиженияПоСчету, "Ч,1");
			
			Если ЗначениеЗаполнено(ВыборкаПоОперациям.Контрагент) Тогда
				Компоновщик.ЗаписатьНачалоЭлемента("Контрагент");
				
				ВывестиАтрибут(Компоновщик, "Наименование", ВыборкаПоОперациям.Контрагент, "Т,250");
				
				Если ЗначениеЗаполнено(ВыборкаПоОперациям.ИНН) Тогда
					Если СтрДлина(ВыборкаПоОперациям.ИНН) = 10 И СтрДлина(ВыборкаПоОперациям.КПП) = 9 Тогда
						ВывестиАтрибут(Компоновщик, "ИНН", ВыборкаПоОперациям.ИНН, "Т,10");
						ВывестиАтрибут(Компоновщик, "КПП", ВыборкаПоОперациям.КПП, "Т,9");
						
					ИначеЕсли СтрДлина(ВыборкаПоОперациям.ИНН) = 12 Тогда
						ВывестиАтрибут(Компоновщик, "ИНН", ВыборкаПоОперациям.ИНН, "Т,12");
						
					КонецЕсли;
					
				КонецЕсли;
				
				ВывестиНеобязательныйАтрибут(Компоновщик, "Договор", ВыборкаПоОперациям.Договор, "Т, 255");
				
				Компоновщик.ЗаписатьКонецЭлемента(); // Контрагент
				
			КонецЕсли;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Операция
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // БанкСч
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОтправкиСчетов

Функция ПараметрыОтправкиСчета(ОтправляемыйСчет)
	
	ПараметрыСчета = Новый ТаблицаЗначений;
	ПараметрыСчета.Колонки.Добавить("Счета");
	ПараметрыСчета.Колонки.Добавить("Субконто");
	
	СтрокаПараметров = ПараметрыСчета.Добавить(); // Для счетов отправляемых без аналитики
	СтрокаПараметров.Счета    = Новый Массив;
	СтрокаПараметров.Субконто = Новый Массив;
	
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета);
	
	ЗаполнитьПараметрыПоСубсчетам(ОтправляемыйСчет, ПараметрыСчета);
	
	Возврат ПараметрыСчета;
	
КонецФункции

Процедура ЗаполнитьПараметрыПоСубсчетам(ОтправляемыйСчет, ПараметрыСчета)
	
	Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ОтправляемыйСчет);
	
	КоличествоСочетаний = ПараметрыСчета.Количество();
	
	Для Каждого Субсчет Из Субсчета Цикл
		СтрокаПараметра = ПараметрыСчета[0]; // для счетов с неподдерживаемой аналитикой
		
		Для Инд = 1 По КоличествоСочетаний - 1 Цикл
			Если СчетУдовлетворяетАналитике(Субсчет, ПараметрыСчета[Инд].Субконто) Тогда
				СтрокаПараметра = ПараметрыСчета[Инд];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаПараметра.Счета.Добавить(Субсчет);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СчетУдовлетворяетАналитике(СчетУчета, НаборСубконто)
	
	ВсеСубконтоНайдены = Истина;
	
	Для Каждого Субконто Из НаборСубконто Цикл
		ВсеСубконтоНайдены = ВсеСубконтоНайдены
			И СчетУчета.ВидыСубконто.Найти(Субконто) <> Неопределено;
	КонецЦикла;
	
	Возврат ВсеСубконтоНайдены;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеУзлы

Процедура ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Организация");
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ВывестиАтрибут(Компоновщик, "Наим", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		ВывестиАтрибут(Компоновщик, "ИНН",  ПараметрыВыгрузки.ИНН,   "Т,12");
		
	Иначе
		ВывестиАтрибут(Компоновщик, "Наим", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		ВывестиАтрибут(Компоновщик, "ИНН",  ПараметрыВыгрузки.ИНН,  "Т,12");
		ВывестиАтрибут(Компоновщик, "КПП",  ПараметрыВыгрузки.КПП,  "Т,9");
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Организация
	
КонецПроцедуры

#КонецОбласти

#Область КомпоновщикXML

Функция НовыйКомпоновщикXML(ИмяФайла, Кодировка = "windows-1251")
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	Возврат КомпоновщикXML;
	
КонецФункции

Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "П" Тогда
		ПредставлениеЗначения = Строка(ЗначениеАтрибута);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Функция ДвоичныеДанныеКомпоновщикаXML(КомпоновщикXML, ИмяФайла)
	
	КомпоновщикXML.Закрыть();
	КомпоновщикXML = Неопределено;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

Функция ДвоичныеДанныеЗаписьZipФайла(КомпоновщикXML, ИмяФайла, ИмяКаталога)
	
	КомпоновщикXML.Закрыть();
	КомпоновщикXML = Неопределено;
	
	ЗаписьZipФайла = Новый ЗаписьZipФайла;
	ЗаписьZipФайла.Добавить(ИмяФайла);
	
	ДвоичныеДанныеФайла = ЗаписьZipФайла.ПолучитьДвоичныеДанные();
	ЗаписьZipФайла = Неопределено;
	
	УдалитьФайлы(ИмяКаталога);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

#КонецОбласти

Функция ВыборкаСегментовОтчетаПоСчетуПериоду(ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода, СохраненныйДокумент) Экспорт
	
	ШаблонОтбора = ПрефиксСегментаОтчетаПоСчетуПериоду(ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода) + ".%";
	
	Возврат ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора, СохраненныйДокумент);
	
КонецФункции

Функция ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора, СохраненныйДокумент) Экспорт
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ВидДополнительногоФайла";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", ШаблонОтбора);
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", СохраненныйДокумент);
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	Возврат ВыборкаСегментов;
	
КонецФункции

Функция ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла, СохраненныйДок) Экспорт
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистраСведений.РегламентированныйОтчет = СохраненныйДок;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗаписьРегистраСведений.Выбран() Тогда
		Данные = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
	Иначе
		Данные = Неопределено;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПрефиксСегментаОтчетаПоСчетуПериоду(ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода) Экспорт
	
	Возврат ИмяРаздела + "." + СчетУчета.УникальныйИдентификатор() + "."
		+ СтрокаГГММ_ГГММ(ДатаНачалаПериода, ДатаКонцаПериода);
	
КонецФункции

Функция СтрокаГГММ_ГГММ(ДатаНачала, ДатаОкончания) Экспорт

	Подстроки = Новый Массив;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Подстроки.Добавить(Формат(ДатаНачала, "ДФ='ггММ'"));
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Подстроки.Добавить(Формат(ДатаОкончания, "ДФ='ггММ'"));
	КонецЕсли;
	
	Возврат СтрСоединить(Подстроки, "_");

КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

#Область ОберткиФункцийИПроцедур

#КонецОбласти

#КонецОбласти
