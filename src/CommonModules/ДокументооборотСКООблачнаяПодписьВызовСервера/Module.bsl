#Область ПрограммныйИнтерфейс

// Вычисляет статус проверки легитимности сертификата для обмена с КО
// Предназначена для предварительной проверки сертификата, прежде чем получать подпись к сертификату
//
// Параметры:
//	Сертификат - ДвоичныеДанные, Строка, Структура
//	ДанныеСертификата - Неопределено - используется для возрата содержимого сертификата
//	ДанныеПодписи - Неопределено - используется для возрата содержимого подписи
//	ОтпечатокСертификата - Строка - используется для возрата отпечатка сертификата
//
// Возвращаемое значение:
//  - Булево - Истина, если сертификат допустим для дальнейшей работы
//  - Неопределено - если подсистема недоступна или проверка невозможна
//
Функция СтатусПодготовкиСертификата(Сертификат, ДанныеСертификата = Неопределено, ДанныеПодписи = Неопределено, ОтпечатокСертификата = "") Экспорт
	
	Результат = Неопределено;
	
	Если КриптографияЭДКО.ДоступнаПодсистемаКриптографииDSS() Тогда
		МодульСервисКриптографииDSSASNКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSASNКлиентСервер");
		
		Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
			ДанныеСертификата = Сертификат;
			СвойстваСертификата = МодульСервисКриптографииDSSASNКлиентСервер.ПолучитьСвойстваСертификата(ДанныеСертификата);
		ИначеЕсли ТипЗнч(Сертификат) = Тип("Строка") И ЭтоАдресВременногоХранилища(Сертификат) Тогда
			ДанныеСертификата = ПолучитьИзВременногоХранилища(Сертификат);
			СвойстваСертификата = МодульСервисКриптографииDSSASNКлиентСервер.ПолучитьСвойстваСертификата(ДанныеСертификата);
		Иначе
			СвойстваСертификата = Новый Структура("Отпечаток");
			Попытка
				ЗаполнитьЗначенияСвойств(СвойстваСертификата, Сертификат);
				Результат = СтатусПроверенногоСертификата(СвойстваСертификата);
			Исключение
				Результат = Неопределено;
			КонецПопытки;
			
			Если Результат = Неопределено Тогда
				СвойстваСертификата.Вставить("ТипСертификата", "MY");
				НашлиСертификат = КриптографияЭДКО.НайтиСертификатПолучателя(СвойстваСертификата);
				ДанныеСертификата = ?(НашлиСертификат = Неопределено, Неопределено, НашлиСертификат.Сертификат);
			КонецЕсли;	
		КонецЕсли;
		
		ОтпечатокСертификата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваСертификата, "Отпечаток", "");
		Если Результат = Неопределено Тогда
			Результат = СтатусПроверенногоСертификата(СвойстваСертификата.Отпечаток);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Подписи = КриптографияЭДКОСлужебныйВызовСервера.ПодписиСертификатовДокументооборота(СвойстваСертификата.Отпечаток);
			Если Подписи.Количество() > 0 Тогда
				ДанныеПодписи = Base64Значение(Подписи[0].signature);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет легитимность использования сертификата для обмена с КО
//
// Параметры:
//	ДанныеСертификата - ДвоичныеДанные - если передана структура, то она должна содержать поле "Отпечаток", служит
//					полем поиска в регистре сведений "ХранилищеСертификатовПолучателей"
//	ДанныеПодписи - Неопределено, ДвоичныеДанные - если Неопределено, то проверяется только издатель сертификата, иначе ожидается "голая" подпись
//
// Возвращаемое значение:
//  Булево - Истина, если использование сертификата легитимно
//
Функция ПодготовитьСертификат(ДанныеСертификата, ДанныеПодписи = Неопределено) Экспорт
	
	Результат = Ложь;
	Если НЕ КриптографияЭДКО.ДоступнаПодсистемаКриптографииDSS() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОтпечатокСертификата = "";
	
	Если ДанныеСертификата <> Неопределено Тогда
		МодульСервисКриптографииDSSASNКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSASNКлиентСервер");
		СвойстваСертификата = МодульСервисКриптографииDSSASNКлиентСервер.ПолучитьСвойстваСертификата(ДанныеСертификата);
		ОтпечатокСертификата = СвойстваСертификата.Отпечаток;
		ОткрытыйКлючСертификата = СвойстваСертификата.ОткрытыйКлюч;
		Издатель = СвойстваСертификата.Издатель;
	КонецЕсли;
	
	Если ОтпечатокСертификата = Неопределено Тогда
		Результат = Ложь;
	ИначеЕсли ДанныеПодписи = Неопределено Тогда
		Результат = ПроверитьИздателяСертификата(Издатель);
	Иначе
		СертификатКонтроля = ПолучитьДанныеСертификатаКО();
		Результат = ПроверитьПодписьГОСТ2012(ДанныеСертификата, ДанныеПодписи, СертификатКонтроля);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Обертка для функции  ПодготовитьСертификат
//
// Параметры:
//	ПараметрыОперации - Струтура - содержит следующие поля
//	 	* Сертификат - Строка, Структура, ДвоичныеДанные - если передана структура, то она должна содержать поле "Отпечаток", служит
//					полем поиска в регистре сведений "ХранилищеСертификатовПолучателей"
//		* Подпись - Неопределено, ДвоичныеДанные - если Неопределено, то проверяется только издатель сертификата, иначе ожидается "голая" подпись
//
// Возвращаемое значение:
//	Булево - Истина, если использование сертификата легитимно
//
Функция ПодготовитьСертификатСПараметрами(ПараметрыОперации, АдресРезультата = Неопределено) Экспорт
	
	Результат = Ложь;
	Если КриптографияЭДКО.ДоступнаПодсистемаКриптографииDSS() Тогда
	
		МодульСервисКриптографииDSSКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSКлиентСервер");
		Сертификат = МодульСервисКриптографииDSSКлиентСервер.ПолучитьПолеСтруктуры(ПараметрыОперации, "Сертификат");
		Подпись = МодульСервисКриптографииDSSКлиентСервер.ПолучитьПолеСтруктуры(ПараметрыОперации, "Подпись");
		Результат = ПодготовитьСертификат(Сертификат, Подпись);
		
		Если АдресРезультата <> Неопределено Тогда
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		КонецЕсли;
	
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Выполняет расчет значения хеша с использованием алгоритма ГОСТ2012
//
// Параметры:
//	ТелоСодержимого - ДвоичныеДанные - содержимое для вычисления значения хеша
//	ДлинаЗначения - Число - ожидаемые значения 256, 512
//
// Возвращаемое значение:
//	Строка - HEX представление вычисленного значения, для варианта 256 бит содержит 64 символа, для 512 бит - 128 символов
//
Функция ЗначениеХешГОСТ2012(ТелоСодержимого, ДлинаЗначения = 512) Экспорт
	
	// инициализация данных
	ПараметрыХеша = ПолучитьПараметрыАлгоритма(ДлинаЗначения);
	КонтрольнаяСумма = ПараметрыХеша.КонтрольнаяСумма;
	РазмерБлока = ПараметрыХеша.РазмерБлока;
	БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТелоСодержимого);
	РазмерСодержимого = БуферДанных.Размер;
	
	// основной цикл
	УказательБлока = 0;
	
	Пока УказательБлока + РазмерБлока <= РазмерСодержимого Цикл
		
		БлокДанных = БуферДанных.Прочитать(УказательБлока, РазмерБлока);
		
		ОбработатьБлокДанных(ПараметрыХеша, БлокДанных, УказательБлока);
		КонтрольнаяСумма = СуммированиеВекторов(КонтрольнаяСумма, БлокДанных); 
		
		УказательБлока = УказательБлока + РазмерБлока;
		
	КонецЦикла;
	
	// обязательное дополнение
	БлокДанных = ДополнитьБлок(ПараметрыХеша, БуферДанных);
	ОбработатьБлокДанных(ПараметрыХеша, БлокДанных, УказательБлока);
	КонтрольнаяСумма = СуммированиеВекторов(КонтрольнаяСумма, БлокДанных); 
	
	// завершающий расчет
	БлокДанных = ПолучитьВектор(ПараметрыХеша);
	БлокДанных.ЗаписатьЦелое64(0, РазмерСодержимого * 8);
	
	ОбработатьБлокДанных(ПараметрыХеша, БлокДанных, 0);
	ОбработатьБлокДанных(ПараметрыХеша, КонтрольнаяСумма, 0);
	
	// подготовка результата
	ПромежуточныйИтог = ПараметрыХеша.ПромежуточныйИтог;
	Если ПараметрыХеша.ДлинаКлюча = 256 Тогда
		ПромежуточныйИтог = ПромежуточныйИтог.Прочитать(32, 32);
	КонецЕсли;
	
	Результат = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(ПромежуточныйИтог);
	
	Возврат Результат;
	
КонецФункции	

// Выполняет проверку подписи по стандарту ГОСТ2012
//
// Параметры:
//  ИсходныеДанные     - ДвоичныеДанные - исходный содержимое документа
//  ДанныеПодписи      - ДвоичныеДанные - содержимое подписи
//  СертификатПроверки - ДвоичныеДанные - содержит данные сертификата
//
// Возвращаемое значение:
//  Булево - Истина, если проверка пройдена
//
Функция ПроверитьПодписьГОСТ2012(ИсходныеДанные, ДанныеПодписи, СертификатПроверки = Неопределено) Экспорт
	
	Результат = Ложь;
	
	МодульСервисКриптографииDSSASNКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSASNКлиентСервер");
	// анализ отсоединенной подписи
	Если СертификатПроверки <> Неопределено Тогда
		СвойстваСертификата		= МодульСервисКриптографииDSSASNКлиентСервер.ПолучитьСвойстваСертификата(СертификатПроверки);
		ДлинаКлюча 				= ДлинаКлючаАлгоритма(СвойстваСертификата.АлгоритмПубличногоКлюча);
		Если ДлинаКлюча <> Неопределено Тогда
			ХешДанных 				= ЗначениеХешГОСТ2012(ИсходныеДанные, ДлинаКлюча);
			ХешДанных 				= ПеревернутьHEX(ХешДанных);
			ПредставлениеПодписи 	= ПолучитьHexСтрокуИзДвоичныхДанных(ДанныеПодписи);
			ПредставлениеПодписи 	= ПеревернутьHEX(ПредставлениеПодписи);
			РезультатПроверки 		= ПроверимПодписьПоАлгоритму(
					ПолучитьЗначениеОткрытогоКлюча(СвойстваСертификата.ОткрытыйКлюч),
					ПолучитьДвоичныеДанныеИзHexСтроки(ХешДанных),
					ПолучитьДвоичныеДанныеИзHexСтроки(ПредставлениеПодписи), 
					ДлинаКлюча);
			Результат = РезультатПроверки.Результат;
		КонецЕсли;
		
	Иначе
		СвойстваПодписи = МодульСервисКриптографииDSSASNКлиентСервер.ПолучитьСвойстваПодписи(ДанныеПодписи);
		Результат = СвойстваПодписи.Количество() > 0;
		СписокХешей = Новый Соответствие();
	
		Для Каждого СтрокаМассива Из СвойстваПодписи Цикл
			ДлинаКлюча = ДлинаКлючаАлгоритма(СтрокаМассива.АлгоритмШифрованияХеша);
			Если ДлинаКлюча = Неопределено Тогда
				Результат = Ложь;
				Продолжить;
			КонецЕсли;
			
			ХешДанных = СписокХешей[СтрокаМассива.АлгоритмХеша];
			Если ХешДанных = Неопределено Тогда
				ХешДанных = ЗначениеХешГОСТ2012(ИсходныеДанные, ДлинаКлюча);
				СписокХешей.Вставить(СтрокаМассива.АлгоритмХеша, ХешДанных);
			КонецЕсли;
			
			Если ХешДанных <> СтрокаМассива.ХешДокумента Тогда
				Результат = Ложь;
			Иначе
				ХешАтрибутов = ЗначениеХешГОСТ2012(ПолучитьДвоичныеДанныеИзHexСтроки(СтрокаМассива.АтрибутыПодписи), ДлинаКлюча);
				ХешАтрибутов = ПеревернутьHEX(ХешАтрибутов);
				
				РезультатПроверки = ПроверимПодписьПоАлгоритму(
								ПолучитьЗначениеОткрытогоКлюча(СтрокаМассива.ЗначениеОткрытогоКлюча),
								ПолучитьДвоичныеДанныеИзHexСтроки(ХешАтрибутов), 
								ПолучитьДвоичныеДанныеИзHexСтроки(СтрокаМассива.ЗначениеПодписи),
								ДлинаКлюча);
								
				Результат = Результат И РезультатПроверки.Результат;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСПодсистемамиБСП

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// Используется для инициализации параметра сеанса в рамках механизмов БСП
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "СертификатыОбменаСКО" Тогда
		СохранитьРеестрПроверенныхСертификатов(Новый Соответствие);
		УстановленныеПараметры.Добавить("СертификатыОбменаСКО");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Вызов API подготовки сертификата документооборота с КО.';
															|en = 'Вызов API подготовки сертификата документооборота с КО.'") 
														+ ": " + ИмяПроцедуры;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ДополнительныйРезультат = Ложь;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыСеанса

// Получает реестр проверенных сертификатов допустимых для обмена с КО
//
// Возвращаемое значение:
//	ФиксированноеСоответствие - где Ключ - строковый отпечаток сертификата, Значение - булево
//
Функция ПолучитьРеестрПроверенныхСертификатов()
	
	ТекущийРеестр = ПараметрыСеанса.СертификатыОбменаСКО;
	Возврат ТекущийРеестр;
	
КонецФункции

// Дополняет реестр проверенных сертификатов допустимых для обмена с КО
//
// Параметры:
//	Отпечаток - Строка
//	СтатусПроверки - Булево
//
Процедура ДополнитьРеестрПроверенныхСертификатов(Отпечаток, СтатусПроверки) Экспорт
	
	ТекущийРеестр = Новый Соответствие(ПолучитьРеестрПроверенныхСертификатов());
	ТекущийРеестр.Вставить(НРег(Отпечаток), СтатусПроверки);
	СохранитьРеестрПроверенныхСертификатов(ТекущийРеестр);
	
КонецПроцедуры

// Получает значение ранее проведенной проверки легитимности сертификата
//
// Параметры:
//	ОтпечатокСертификата - Строка
//
// Возвращаемое значение:
//  Булево
//
Функция СтатусПроверенногоСертификата(ОтпечатокСертификата)
	
	ТекущийРеестр = ПолучитьРеестрПроверенныхСертификатов();
	Результат = ТекущийРеестр.Получить(НРег(ОтпечатокСертификата));
	
	Возврат Результат;
	
КонецФункции

// Выполняет служебную функцию записи данных в параметры сеанса
//
// Параметры:
//	ТекущийРеестр - Соответствие, ФиксированноеСоответствие - данные для записи в параметры сеанса
//
Процедура СохранитьРеестрПроверенныхСертификатов(ТекущийРеестр)
	
	Если ТипЗнч(ТекущийРеестр) = Тип("Соответствие") Тогда
		НовыйРеестр = Новый ФиксированноеСоответствие(ТекущийРеестр);
	Иначе
		НовыйРеестр = ТекущийРеестр;
	КонецЕсли;
	
	ПараметрыСеанса.СертификатыОбменаСКО = НовыйРеестр;
	
КонецПроцедуры

#КонецОбласти

#Область ХешГОСТ2012

// Блок для вычисления значения хеша по стандарту ГОСТ2012 (256 и 512 бит)
// Содержит "классические" функции, а также "оптимизированные" варианты
// Реализованный алгоритм использует "оптимизированный" вариант
//
Функция ПолучитьПараметрыАлгоритма(ДлинаКлюча)
	
	// Вектора 512 бит (64 байт) представляет собой объект БуферОбмена размером 64 байт, основной объект манипуляций
	
	РазмерБлока = 63;
	
	Результат = Новый Структура;
	
	Результат.Вставить("РазмерБлока", РазмерБлока + 1); // количество байтов в 512 бита
	Результат.Вставить("ДлинаКлюча", ДлинаКлюча);
	
	Результат.Вставить("КонтрольнаяСумма", ПолучитьВектор(Результат));
	
	БазовыйБлок = ПолучитьВектор(Результат);
	Если ДлинаКлюча = 256 Тогда
		Для Счетчик = 0 По РазмерБлока Цикл
			БазовыйБлок[Счетчик] = 1;
		КонецЦикла;
	КонецЕсли;	
	
	Результат.Вставить("ПромежуточныйИтог", БазовыйБлок);
	
	Результат.Вставить("ШаблонЗамены", ПолучитьВектор(Результат, // Pi
		"252, 238, 221,  17, 207, 110,  49,  22, 251, 196, 250,
		|218,  35, 197,   4,  77, 233, 119, 240, 219, 147,  46,
		|153, 186,  23,  54, 241, 187,  20, 205,  95, 193, 249,
		| 24, 101,  90, 226,  92, 239,  33, 129,  28,  60,  66,
		|139,   1, 142,  79,   5, 132,   2, 174, 227, 106, 143,
		|160,   6,  11, 237, 152, 127, 212, 211,  31, 235,  52,
		| 44,  81, 234, 200,  72, 171, 242,  42, 104, 162, 253,
		| 58, 206, 204, 181, 112,  14,  86,   8,  12, 118,  18,
		|191, 114,  19,  71, 156, 183,  93, 135,  21, 161, 150,
		| 41,  16, 123, 154, 199, 243, 145, 120, 111, 157, 158,
		|178, 177,  50, 117,  25,  61, 255,  53, 138, 126, 109,
		| 84, 198, 128, 195, 189,  13,  87, 223, 245,  36, 169,
		| 62, 168,  67, 201, 215, 121, 214, 246, 124,  34, 185,
		|  3, 224,  15, 236, 222, 122, 148, 176, 188, 220, 232,
		| 40,  80,  78,  51,  10,  74, 167, 151,  96, 115,  30,
		|  0,  98,  68,  26, 184,  56, 130, 100, 159,  38,  65,
		|173,  69,  70, 146,  39,  94,  85,  47, 140, 163, 165,
		|125, 105, 213, 149,  59,   7,  88, 179,  64, 134, 172,
		| 29, 247,  48,  55, 107, 228, 136, 217, 231, 137, 225,
		| 27, 131,  73,  76,  63, 248, 254, 141,  83, 170, 144,
		|202, 216, 133,  97,  32, 113, 103, 164,  45,  43,   9,
		| 91, 203, 155,  37, 208, 190, 229, 108,  82,  89, 166,
		|116, 210, 230, 244, 180, 192, 209, 102, 175, 194,  57,
		| 75,  99, 182"));
	
	Результат.Вставить("ШаблонПерестановки", ПолучитьВектор(Результат,  // Tau
		"0,  8, 16, 24, 32, 40, 48, 56,
		|1,  9, 17, 25, 33, 41, 49, 57,
		|2, 10, 18, 26, 34, 42, 50, 58,
		|3, 11, 19, 27, 35, 43, 51, 59,
		|4, 12, 20, 28, 36, 44, 52, 60,
		|5, 13, 21, 29, 37, 45, 53, 61,
		|6, 14, 22, 30, 38, 46, 54, 62,
		|7, 15, 23, 31, 39, 47, 55, 63"));
	
	МассивОбработки = ПолучитьМассив(
		"8e20faa72ba0b470, 47107ddd9b505a38, ad08b0e0c3282d1c, d8045870ef14980e,
		|6c022c38f90a4c07, 3601161cf205268d, 1b8e0b0e798c13c8, 83478b07b2468764,
		|a011d380818e8f40, 5086e740ce47c920, 2843fd2067adea10, 14aff010bdd87508,
		|0ad97808d06cb404, 05e23c0468365a02, 8c711e02341b2d01, 46b60f011a83988e,
		|90dab52a387ae76f, 486dd4151c3dfdb9, 24b86a840e90f0d2, 125c354207487869,
		|092e94218d243cba, 8a174a9ec8121e5d, 4585254f64090fa0, accc9ca9328a8950,
		|9d4df05d5f661451, c0a878a0a1330aa6, 60543c50de970553, 302a1e286fc58ca7,
		|18150f14b9ec46dd, 0c84890ad27623e0, 0642ca05693b9f70, 0321658cba93c138,
		|86275df09ce8aaa8, 439da0784e745554, afc0503c273aa42a, d960281e9d1d5215,
		|e230140fc0802984, 71180a8960409a42, b60c05ca30204d21, 5b068c651810a89e,
		|456c34887a3805b9, ac361a443d1c8cd2, 561b0d22900e4669, 2b838811480723ba,
		|9bcf4486248d9f5d, c3e9224312c8c1a0, effa11af0964ee50, f97d86d98a327728,
		|e4fa2054a80b329c, 727d102a548b194e, 39b008152acb8227, 9258048415eb419d,
		|492c024284fbaec0, aa16012142f35760, 550b8e9e21f7a530, a48b474f9ef5dc18,
		|70a6a56e2440598e, 3853dc371220a247, 1ca76e95091051ad, 0edd37c48a08a6d8,
		|07e095624504536c, 8d70c431ac02a736, c83862965601dd1b, 641c314b2b8ee083",
		16);
	
	ШаблонСжатия = Новый Массив;
	КоличествоЭлементов = МассивОбработки.Количество() - 1; 
	Для Счетчик = 0 По КоличествоЭлементов Цикл
		НовоеЗначение = Новый БуферДвоичныхДанных(8);
		НовоеЗначение.ЗаписатьЦелое64(0, МассивОбработки[Счетчик]);
		ШаблонСжатия.Добавить(НовоеЗначение);
	КонецЦикла;	
	
	Результат.Вставить("ШаблонСжатия", ШаблонСжатия);
	
	// попытка оптимизации - исключить битовые операции
	ШаблонСжатияОптимизированный = Новый Массив;
	СдвигСчетчика = 0;
		
	Для СчетчикЗнаков = 0 По 7 Цикл
		
		БлокЧисел = Новый Соответствие;
		
		Для Счетчик = 0 По 255 Цикл
			
			Если Счетчик = 0 Тогда
				НовоеЗначение = Новый БуферДвоичныхДанных(0);
			Иначе	
				НовоеЗначение = Новый БуферДвоичныхДанных(8);
				Для СчетчикБитов = 0 По 7 Цикл
					Если ПроверитьБит(Счетчик, СчетчикБитов) Тогда
						НовоеЗначение.ЗаписатьПобитовоеИсключительноеИли(0, ШаблонСжатия[63 - (СдвигСчетчика + СчетчикБитов)]);
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			БлокЧисел.Вставить(Счетчик, НовоеЗначение);
			
		КонецЦикла;
		
		ШаблонСжатияОптимизированный.Добавить(БлокЧисел);
		СдвигСчетчика = СдвигСчетчика + 8;
		
	КонецЦикла;
	
	Результат.Вставить("ШаблонСжатияОптимизированный", ШаблонСжатияОптимизированный);
	
	МассивОбработки = ПолучитьМассив(
		"b1085bda1ecadae9ebcb2f81c0657c1f 2f6a76432e45d016714eb88d7585c4fc 4b7ce09192676901a2422a08a460d315 05767436cc744d23dd806559f2a64507,
		|6fa3b58aa99d2f1a4fe39d460f70b5d7 f3feea720a232b9861d55e0f16b50131 9ab5176b12d699585cb561c2db0aa7ca 55dda21bd7cbcd56e679047021b19bb7,
		|f574dcac2bce2fc70a39fc286a3d8435 06f15e5f529c1f8bf2ea7514b1297b7b d3e20fe490359eb1c1c93a376062db09 c2b6f443867adb31991e96f50aba0ab2,
		|ef1fdfb3e81566d2f948e1a05d71e4dd 488e857e335c3c7d9d721cad685e353f a9d72c82ed03d675d8b71333935203be 3453eaa193e837f1220cbebc84e3d12e,
		|4bea6bacad4747999a3f410c6ca92363 7f151c1f1686104a359e35d7800fffbd bfcd1747253af5a3dfff00b723271a16 7a56a27ea9ea63f5601758fd7c6cfe57,
		|ae4faeae1d3ad3d96fa4c33b7a3039c0 2d66c4f95142a46c187f9ab49af08ec6 cffaa6b71c9ab7b40af21f66c2bec6b6 bf71c57236904f35fa68407a46647d6e,
		|f4c70e16eeaac5ec51ac86febf240954 399ec6c7e6bf87c9d3473e33197a93c9 0992abc52d822c3706476983284a0504 3517454ca23c4af38886564d3a14d493,
		|9b1f5b424d93c9a703e7aa020c6e4141 4eb7f8719c36de1e89b4443b4ddbc49a f4892bcb929b069069d18d2bd1a5c42f 36acc2355951a8d9a47f0dd4bf02e71e,
		|378f5a541631229b944c9ad8ec165fde 3a7d3a1b258942243cd955b7e00d0984 800a440bdbb2ceb17b2b8a9aa6079c54 0e38dc92cb1f2a607261445183235adb,
		|abbedea680056f52382ae548b2e4f3f3 8941e71cff8a78db1fffe18a1b336103 9fe76702af69334b7a1e6c303b7652f4 3698fad1153bb6c374b4c7fb98459ced,
		|7bcd9ed0efc889fb3002c6cd635afe94 d8fa6bbbebab07612001802114846679 8a1d71efea48b9caefbacd1d7d476e98 dea2594ac06fd85d6bcaa4cd81f32d1b,
		|378ee767f11631bad21380b00449b17a cda43c32bcdf1d77f82012d430219f9b 5d80ef9d1891cc86e71da4aa88e12852 faf417d5d9b21b9948bc924af11bd720",
		"ОбратныйПорядок16");
	
	КонстантыХеша = Новый Массив;
	КоличествоЭлементов = МассивОбработки.Количество() - 1; 
	Для Счетчик = 0 По КоличествоЭлементов Цикл
		НовоеЗначение = ПолучитьБуферДвоичныхДанныхИзHexСтроки(МассивОбработки[Счетчик]);
		КонстантыХеша.Добавить(НовоеЗначение);
	КонецЦикла;	
	
	Результат.Вставить("КонстантыХеша", КонстантыХеша);
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьБлок(ПараметрыХеша, БуферДанных)
	
	РазмерСодержимого = БуферДанных.Размер;
	Остаток = РазмерСодержимого % ПараметрыХеша.РазмерБлока;
	РазмерБлока = ПараметрыХеша.РазмерБлока - Остаток;
	Если Остаток = 0 Тогда
		БлокДанных = Новый БуферДвоичныхДанных(0);
	Иначе
		БлокДанных = БуферДанных.Прочитать(РазмерСодержимого - Остаток, Остаток);
	КонецЕсли;	
	
	Добавка = Новый БуферДвоичныхДанных(РазмерБлока);
	Добавка.Установить(0, 1);
	Результат = БлокДанных.Соединить(Добавка);
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьМассив(Знач СтрокаДляЗаполнения, СистемаСчисления = 10)
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(СтрокаДляЗаполнения) Тогда
		СтрокаДляЗаполнения = СтрЗаменить(СтрокаДляЗаполнения, Символы.ПС, "");
		СтрокаДляЗаполнения = СтрЗаменить(СтрокаДляЗаполнения, " ", "");
		Результат = СтрРазделить(СтрокаДляЗаполнения, ",", Ложь);
		КоличествоЭлементов = Результат.Количество() - 1; 
		
		Для Счетчик = 0 По КоличествоЭлементов Цикл
			СтрокаМассива = Результат[Счетчик];
			Если СистемаСчисления = 10 Тогда
				НовоеЗначение =  Число(СтрокаМассива);
			ИначеЕсли СистемаСчисления = 16 Тогда
				НовоеЗначение = ЧислоИзШестнадцатеричнойСтроки("0x" + СтрокаМассива);
			ИначеЕсли СистемаСчисления = "ОбратныйПорядок16" Тогда
				ДлинаСтроки = СтрДлина(СтрокаМассива) / 2 - 1;
				НовоеЗначение = "";
				Для СчетчикПар = 0 По ДлинаСтроки Цикл
					НовоеЗначение = НовоеЗначение + Сред(СтрокаМассива, (ДлинаСтроки - СчетчикПар + 1) * 2 - 1, 2);
				КонецЦикла;
			Иначе
				НовоеЗначение = СтрокаМассива;
			КонецЕсли;
			Результат[Счетчик] = НовоеЗначение;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВектор(ПараметрыХеша, Знач СтрокаДляЗаполнения = "")
	
	МассивЧисел = ПолучитьМассив(СтрокаДляЗаполнения);
	РазмерБлока = ПараметрыХеша.РазмерБлока;
	Если МассивЧисел.Количество() > 0 Тогда
		РазмерБлока = МассивЧисел.Количество();
	КонецЕсли;
	
	Результат = Новый БуферДвоичныхДанных(РазмерБлока);

	Если МассивЧисел.Количество() > 0 Тогда
		РазмерБлока = РазмерБлока - 1;
		Для Счетчик = 0 По РазмерБлока Цикл
			Результат[Счетчик] = МассивЧисел[Счетчик];
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

// HashG - оптимизированный
//
Процедура ОбработатьБлокДанных(ПараметрыХеша, БлокДанных, УказательБлока)
	
	ПромежуточныйИтог = ПараметрыХеша.ПромежуточныйИтог;
	КонтрольнаяСумма = ПараметрыХеша.КонтрольнаяСумма;
	
	Результат = ПромежуточныйИтог.Прочитать(0, 8);
	ВторойБлок = Новый БуферДвоичныхДанных(8);
	ВторойБлок.ЗаписатьЦелое64(0, УказательБлока * 8);
	Результат = ИсключающееВекторов(Результат, ВторойБлок);
	
	Результат = Результат.Соединить(ПромежуточныйИтог.Прочитать(8, 56));
	Результат = СводныйБлокДанных(ПараметрыХеша, Результат);
	Результат = ОбработатьВсеРаундовыеКлючи(ПараметрыХеша, Результат, БлокДанных);
	
	Результат = ИсключающееВекторов(Результат, ПромежуточныйИтог);
	Результат = ИсключающееВекторов(Результат, БлокДанных);
	
	ПараметрыХеша.ПромежуточныйИтог = Результат;
	
КонецПроцедуры

// HashX
// Складывает два вектора используя операцию XOR
//
Функция ИсключающееВекторов(ПервыйБлок, ВторойБлок)
	
	Результат = ПервыйБлок.Скопировать();
	Результат.ЗаписатьПобитовоеИсключительноеИли(0, ВторойБлок);
	Возврат Результат;
	
КонецФункции

// HashAdd512
// Складывает два вектора по модулю 512 бита
//
Функция СуммированиеВекторов(ПервыйБлок, ВторойБлок)
	
	Результат = Новый БуферДвоичныхДанных(64);
	
	РазмерБлока = Мин(ПервыйБлок.Размер, ВторойБлок.Размер);
	
	Результат = Новый БуферДвоичныхДанных(РазмерБлока);
	РазмерБлока = РазмерБлока - 1;
	Переполнение = 0;
	
	Для Счетчик = 0 По РазмерБлока Цикл
		Переполнение = ПервыйБлок[Счетчик] + ВторойБлок[Счетчик] + Переполнение;
		Результат[Счетчик] = Переполнение % 256;
		Переполнение = Цел(Переполнение / 256);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// HashL
// Преобразовывает биты в векторе по Галуа, оптимизированный
//
Функция ПреобразоватьБлокДанныхОптимальный(ПараметрыХеша, БлокДанных)

	Результат = Новый БуферДвоичныхДанных(0);
	ШаблонСжатия = ПараметрыХеша.ШаблонСжатияОптимизированный;
	
	СчетчикБлоков = 0;
	// оптимизация
	Для СчетчикЦикла = 0 По 7 Цикл
		
		НовоеЗначение = Новый БуферДвоичныхДанных(8);
		
		Для Счетчик = 0 По 7 Цикл
			НовоеЗначение.ЗаписатьПобитовоеИсключительноеИли(0, ШаблонСжатия[Счетчик][БлокДанных[СчетчикБлоков]]);
			СчетчикБлоков = СчетчикБлоков + 1;
		КонецЦикла;	
		
		Результат = Результат.Соединить(НовоеЗначение);
		
	КонецЦикла;	
	
	Возврат Результат;

КонецФункции

// HashLPS
// Сводное преобразование байтов, оптимизированный
//
Функция СводныйБлокДанных(ПараметрыХеша, БлокДанных)

	Результат = ПолучитьВектор(ПараметрыХеша);
	ШаблонЗамены = ПараметрыХеша.ШаблонЗамены; // Pi
	ШаблонПерестановки = ПараметрыХеша.ШаблонПерестановки; // Tau
	РазмерБлока = ПараметрыХеша.РазмерБлока - 1;
	
	Для Счетчик = 0 По РазмерБлока Цикл
		Результат[ШаблонПерестановки[Счетчик]] = ШаблонЗамены[БлокДанных[Счетчик]];
	КонецЦикла;
	
	Результат = ПреобразоватьБлокДанныхОптимальный(ПараметрыХеша, Результат);
	
	Возврат Результат;
	
КонецФункции

// HashE
// Обработка раундовых ключей
//
Функция ОбработатьВсеРаундовыеКлючи(ПараметрыХеша, ПервыйБлок, ВторойБлок)
	
	КонстантыХеша = ПараметрыХеша.КонстантыХеша;
	
	ДанныеПервогоБлока = ПервыйБлок.Скопировать();
	ДанныеВторогоБлока = ВторойБлок.Скопировать(); 
	
	Для Счетчик = 0 По 11 Цикл
		ДанныеВторогоБлока = ИсключающееВекторов(ДанныеПервогоБлока, ДанныеВторогоБлока);
		ДанныеВторогоБлока = СводныйБлокДанных(ПараметрыХеша, ДанныеВторогоБлока);
		
		ДанныеПервогоБлока = ИсключающееВекторов(ДанныеПервогоБлока, КонстантыХеша[Счетчик]);
		ДанныеПервогоБлока = СводныйБлокДанных(ПараметрыХеша, ДанныеПервогоБлока);
		
	КонецЦикла;
	
	Результат = ИсключающееВекторов(ДанныеПервогоБлока, ДанныеВторогоБлока);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПодписиГОСТ2012

Функция ДополнитьСписокКривых(ВекторP, ВекторQ, ВекторA, ВекторB, ВекторX, ВекторY, ВекторE = Неопределено, ВекторD = Неопределено)
	
	Префикс = "0x";
	Результат = Новый Структура;
	
	Результат.Вставить("ВекторP", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторP));
	Результат.Вставить("ВекторQ", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторQ));
	Результат.Вставить("ВекторA", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторA));
	Результат.Вставить("ВекторB", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторB));
	Результат.Вставить("ВекторX", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторX));
	Результат.Вставить("ВекторY", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторY));
	Результат.Вставить("ВекторE", 0);
	Результат.Вставить("ВекторD", 0);
	Результат.Вставить("Статус", Неопределено);
	
	Если ЗначениеЗаполнено(ВекторE) Тогда
		Результат.Вставить("ВекторE", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторE));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВекторD) Тогда
		Результат.Вставить("ВекторD", ЧислоИзШестнадцатеричнойСтроки(Префикс + ВекторD));
	КонецЕсли;
	
	Парам1 = Результат.ВекторY * Результат.ВекторY % Результат.ВекторP;
	Парам2 = ((Результат.ВекторX * Результат.ВекторX + Результат.ВекторA) * Результат.ВекторX + Результат.ВекторB) % Результат.ВекторP;
	Если Парам2 < 0 Тогда
		Парам2 = Парам2 + Результат.ВекторP;
	КонецЕсли;	
	
	Если Парам1 <> Парам2 Тогда
		ВызватьИсключение НСтр("ru = 'Неверные параметры эллиптической кривой';
								|en = 'Неверные параметры эллиптической кривой'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодговитьКривыеПодписи()
	
	СписокКривых = Новый Соответствие();
	
	СписокКривых.Вставить("GostR3410_2001_ParamSet_cc",
		ДополнитьСписокКривых(
			"C0000000000000000000000000000000000000000000000000000000000003C7",
        	"5fffffffffffffffffffffffffffffff606117a2f4bde428b7458a54b6e87b85",
        	"C0000000000000000000000000000000000000000000000000000000000003c4",
        	"2d06B4265ebc749ff7d0f1f1f88232e81632e9088fd44b7787d5e407e955080c",
        	"0000000000000000000000000000000000000000000000000000000000000002",
        	"a20e034bf8813ef5c18d01105e726a17eb248b264ae9706f440bedc8ccb6b22c"));
		
	СписокКривых.Вставить("id-GostR3410-2001-TestParamSet",
		ДополнитьСписокКривых(
			"8000000000000000000000000000000000000000000000000000000000000431",
			"8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3",
			"0000000000000000000000000000000000000000000000000000000000000007",
			"5FBFF498AA938CE739B8E022FBAFEF40563F6E6A3472FC2A514C0CE9DAE23B7E",
			"0000000000000000000000000000000000000000000000000000000000000002",
			"08E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8"));
	
	СписокКривых.Вставить("id-GostR3410-2001-CryptoPro-A-ParamSet",
		ДополнитьСписокКривых(
			"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97",
			"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C611070995AD10045841B09B761B893",
			"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD94",
			"00000000000000000000000000000000000000000000000000000000000000a6",
			"0000000000000000000000000000000000000000000000000000000000000001",
			"8D91E471E0989CDA27DF505A453F2B7635294F2DDF23E3B122ACC99C9E9F1E14"));
		
	СписокКривых.Вставить("id-GostR3410-2001-CryptoPro-B-ParamSet",
		ДополнитьСписокКривых(
			"8000000000000000000000000000000000000000000000000000000000000C99",
			"800000000000000000000000000000015F700CFFF1A624E5E497161BCC8A198F",
			"8000000000000000000000000000000000000000000000000000000000000C96",
			"3E1AF419A269A5F866A7D3C25C3DF80AE979259373FF2B182F49D4CE7E1BBC8B",
			"0000000000000000000000000000000000000000000000000000000000000001",
			"3FA8124359F96680B83D1C3EB2C070E5C545C9858D03ECFB744BF8D717717EFC"));
		
	СписокКривых.Вставить("id-GostR3410-2001-CryptoPro-C-ParamSet",
		ДополнитьСписокКривых(
			"9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D759B",
			"9B9F605F5A858107AB1EC85E6B41C8AA582CA3511EDDFB74F02F3A6598980BB9",
			"9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D7598",
			"000000000000000000000000000000000000000000000000000000000000805a",
			"0000000000000000000000000000000000000000000000000000000000000000",
			"41ECE55743711A8C3CBF3783CD08C0EE4D4DC440D4641A8F366E550DFDB3BB67"));
		
		
	СписокКривых.Вставить("id-tc26-gost-3410-2012-256-paramSetA",
		ДополнитьСписокКривых(
	        "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97",
	        "400000000000000000000000000000000FD8CDDFC87B6635C115AF556C360C67",
	        "C2173F1513981673AF4892C23035A27CE25E2013BF95AA33B22C656F277E7335",
	        "295F9BAE7428ED9CCC20E7C359A9D41A22FCCD9108E17BF7BA9337A6F8AE9513",
	        "91E38443A5E82C0D880923425712B2BB658B9196932E02C78B2582FE742DAA28",
	        "32879423AB1A0375895786C4BB46E9565FDE0B5344766740AF268ADB32322E5C",
	        1,
	        "0605F6B7C183FA81578BC39CFAD518132B9DF62897009AF7E522C32D6DC7BFFB"));
		
	СписокКривых.Вставить("id-tc26-gost-3410-2012-512-paramSetTest",
		ДополнитьСписокКривых(
			"4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DF1D852741AF4704A0458047E80E4546D35B8336FAC224DD81664BBF528BE6373",
			"4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DA82F2D7ECB1DBAC719905C5EECC423F1D86E25EDBE23C595D644AAF187E6E6DF",
			7,
			"1CFF0806A31116DA29D8CFA54E57EB748BC5F377E49400FDD788B649ECA1AC4361834013B2AD7322480A89CA58E0CF74BC9E540C2ADD6897FAD0A3084F302ADC",
			"24D19CC64572EE30F396BF6EBBFD7A6C5213B3B3D7057CC825F91093A68CD762FD60611262CD838DC6B60AA7EEE804E28BC849977FAC33B4B530F1B120248A9A",
			"2BB312A43BD2CE6E0D020613C857ACDDCFBF061E91E5F2C3F32447C259F39B2C83AB156D77F1496BF7EB3351E1EE4E43DC1A18B91B24640B6DBB92CB1ADD371E"));
		
	СписокКривых.Вставить("id-tc26-gost-3410-12-512-paramSetA",
		ДополнитьСписокКривых(
			"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7",
			"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27E69532F48D89116FF22B8D4E0560609B4B38ABFAD2B85DCACDB1411F10B275",
			"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC4",
			"E8C2505DEDFC86DDC1BD0B2B6667F1DA34B82574761CB0E879BD081CFD0B6265EE3CB090F30D27614CB4574010DA90DD862EF9D4EBEE4761503190785A71C760",
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
			"7503CFE87A836AE3A61B8816E25450E6CE5E1C93ACF1ABC1778064FDCBEFA921DF1626BE4FD036E93D75E6A50E3A41E98028FE5FC235F5B889A589CB5215F2A4"));
		
	СписокКривых.Вставить("id-tc26-gost-3410-12-512-paramSetB",
		ДополнитьСписокКривых(
			"8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F",
			"800000000000000000000000000000000000000000000000000000000000000149A1EC142565A545ACFDB77BD9D40CFA8B996712101BEA0EC6346C54374F25BD",
			"8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006C",
			"687D1B459DC841457E3E06CF6F5E2517B97C7D614AF138BCBF85DC806C4B289F3E965D2DB1416D217F8B276FAD1AB69C50F78BEE1FA3106EFB8CCBC7C5140116",
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
			"1A8F7EDA389B094C2C071E3647A8940F3C123B697578C213BE6DD9E6C8EC7335DCB228FD1EDF4A39152CBCAAF8C0398828041055F94CEEEC7E21340780FE41BD"));
		
	СписокКривых.Вставить("id-tc26-gost-3410-2012-512-paramSetC",
		ДополнитьСписокКривых(
			"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7",
			"3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC98CDBA46506AB004C33A9FF5147502CC8EDA9E7A769A12694623CEF47F023ED",
			"DC9203E514A721875485A529D2C722FB187BC8980EB866644DE41C68E143064546E861C0E2C9EDD92ADE71F46FCF50FF2AD97F951FDA9F2A2EB6546F39689BD3",
			"B4C4EE28CEBC6C2C8AC12952CF37F16AC7EFB6A9F69F4B57FFDA2E4F0DE5ADE038CBC2FFF719D2C18DE0284B8BFEF3B52B8CC7A5F5BF0A3C8D2319A5312557E1",
			"E2E31EDFC23DE7BDEBE241CE593EF5DE2295B7A9CBAEF021D385F7074CEA043AA27272A7AE602BF2A7B9033DB9ED3610C6FB85487EAE97AAC5BC7928C1950148",
			"F5CE40D95B5EB899ABBCCFF5911CB8577939804D6527378B8C108C3D2090FF9BE18E2D33E3021ED2EF32D85822423B6304F726AA854BAE07D0396E9A9ADDC40F",
			1,
			"9E4F5D8C017D8D9F13A5CF3CDF5BFE4DAB402D54198E31EBDE28A0621050439CA6B39E0A515C06B304E2CE43E79E369E91A0CFC2BC2A22B4CA302DBB33EE7550"));

	СписокКривых.Вставить("id-GostR3410-2001-CryptoPro-XchA-ParamSet", СписокКривых["id-GostR3410-2001-CryptoPro-A-ParamSet"]);
	СписокКривых.Вставить("id-GostR3410-2001-CryptoPro-XchB-ParamSet", СписокКривых["id-GostR3410-2001-CryptoPro-C-ParamSet"]);
	СписокКривых.Вставить("id-tc26-gost-3410-2012-256-paramSetB", СписокКривых["id-GostR3410-2001-CryptoPro-A-ParamSet"]);
	СписокКривых.Вставить("id-tc26-gost-3410-2012-256-paramSetC", СписокКривых["id-GostR3410-2001-CryptoPro-B-ParamSet"]);
	СписокКривых.Вставить("id-tc26-gost-3410-2012-256-paramSetD", СписокКривых["id-GostR3410-2001-CryptoPro-C-ParamSet"]);
	
	Возврат СписокКривых;
		
//DEFAULT_CURVE = CURVES["id-GostR3410-2001-CryptoPro-A-ParamSet"]

КонецФункции

Функция ПолучитьЗначениеОткрытогоКлюча(ПредставлениеКлюча)
	
	Результат = Новый Массив(2);
	ДлинаСтроки = СтрДлина(ПредставлениеКлюча);
	
	Если ДлинаСтроки > 256 Тогда
		РазмерБлока = 64;
	Иначе
		РазмерБлока = 32;
	КонецЕсли;
	
	ОткрытыйКлюч = ПредставлениеКлюча;
	Если ДлинаСтроки % 32 <> 0 Тогда // значит обрамлен в octet string
		ОткрытыйКлюч = Сред(ОткрытыйКлюч, 4);
	КонецЕсли;	
	
	ОткрытыйКлюч = ПеревернутьHEX(ОткрытыйКлюч);
	ДанныеКлюча = ПолучитьБуферДвоичныхДанныхИзHexСтроки(ОткрытыйКлюч);
	
	Результат[0] = ПолучитьЦелоеЧисло(ДанныеКлюча.Прочитать(РазмерБлока, РазмерБлока));
	Результат[1] = ПолучитьЦелоеЧисло(ДанныеКлюча.Прочитать(0, РазмерБлока));
	
	Возврат Результат;
	
КонецФункции

Функция ПеревернутьHEX(ДанныеСтроки)
	
	Результат = "";
	ДлинаДанных = СтрДлина(ДанныеСтроки) / 2;
	Следующий = СтрДлина(ДанныеСтроки) - 1;
			
	Для Счетчик = 0 По ДлинаДанных - 1 Цикл
		Результат = Результат + Сред(ДанныеСтроки, Следующий, 2);
		Следующий = Следующий - 2;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ДлинаКлючаАлгоритма(ПредставлениеАлгоритма)
	
	ВесьМассив = Новый Соответствие;
	
	ВесьМассив.Вставить("GOST R 34.10-2012-256", 256);
	ВесьМассив.Вставить("GOST R 34.10-2012-512", 512);
	ВесьМассив.Вставить("GOST R 34.10-2012-256 + GOST R 34.11-2012-256", 256);
	ВесьМассив.Вставить("GOST R 34.10-2012-512 + GOST R 34.11-2012-512", 512);
	ВесьМассив.Вставить("GOST R 34.10-2001", 256);
	
	Результат = ВесьМассив[ПредставлениеАлгоритма];
	
	Возврат Результат;
	
КонецФункции

Функция ПроверимПодписьПоАлгоритму(ОткрытыйКлюч, ЗначениеХеша, ЗначениеПодписи, ДлинаКлюча)
	
	Отказ = Ложь;
	ТекстОшибки = НСтр("ru = 'Проверка не прошла';
						|en = 'Проверка не прошла'");
	
	ПараметрыКривых = ПодговитьКривыеПодписи();
	Если ДлинаКлюча = 512 Тогда
		ТекущаяКривая = ПараметрыКривых["id-tc26-gost-3410-12-512-paramSetA"];
	Иначе
		ТекущаяКривая = ПараметрыКривых["id-GostR3410-2001-CryptoPro-XchA-ParamSet"];
	КонецЕсли;	
	
	РазмерБлока = ДлинаКлюча / 8;
	МассивПодписи = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ЗначениеПодписи);
	
	Если МассивПодписи.Размер <> РазмерБлока * 2 Тогда
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Неправильная длина значения подписи.';
							|en = 'Неправильная длина значения подписи.'");
	КонецЕсли;
	
	ПервыйКлюч = ОткрытыйКлюч[0]; 
	ВторойКлюч = ОткрытыйКлюч[1];
	
	Если НЕ Отказ Тогда
		ВекторQ = ТекущаяКривая.ВекторQ;
		ВекторP = ТекущаяКривая.ВекторP;
		ПервоеЧисло = ПолучитьЦелоеЧисло(МассивПодписи.Прочитать(0, РазмерБлока));
		ВтороеЧисло = ПолучитьЦелоеЧисло(МассивПодписи.Прочитать(РазмерБлока, РазмерБлока));
		Отказ = ВтороеЧисло <=0 ИЛИ ВтороеЧисло >= ВекторQ ИЛИ ПервоеЧисло <= 0 ИЛИ ПервоеЧисло >= ВекторQ;
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
		
		ОстатокДеления = ПолучитьЦелоеЧисло(ЗначениеХеша) % ВекторQ;
		Если ОстатокДеления = 0 Тогда
			ОстатокДеления = 1;
		КонецЕсли;
		
		НовоеЗначение = НайтиОбщийЗнаменатель(ОстатокДеления, ВекторQ);
		Пер1 = ПервоеЧисло * НовоеЗначение % ВекторQ;
		Пер2 = ВекторQ - ВтороеЧисло * НовоеЗначение % ВекторQ;
		
		РезультатВычисления = ВычислитьЭкспоненту(ТекущаяКривая, Пер1);
		ПервыйВекторX = РезультатВычисления.ВекторX;
		ПервыйВекторY = РезультатВычисления.ВекторY;
		
		РезультатВычисления = ВычислитьЭкспоненту(ТекущаяКривая, Пер2, ПервыйКлюч, ВторойКлюч);
		ВторойВекторX = РезультатВычисления.ВекторX;
		ВторойВекторY = РезультатВычисления.ВекторY;
		
		ТекущееЗначение = ВторойВекторX - ПервыйВекторX;
		Если ТекущееЗначение < 0 Тогда
			ТекущееЗначение = ТекущееЗначение + ВекторP;
		КонецЕсли;	
		
		ТекущееЗначение = НайтиОбщийЗнаменатель(ТекущееЗначение, ВекторP);
		
		Пер1 = ВторойВекторY - ПервыйВекторY;
		
		ТекущееЗначение = ТекущееЗначение * Пер1 % ВекторP;
		ТекущееЗначение = ТекущееЗначение * ТекущееЗначение % ВекторP;
		ТекущееЗначение = ТекущееЗначение - ПервыйВекторX - ВторойВекторX;
		ТекущееЗначение = ТекущееЗначение % ВекторP;
		Если ТекущееЗначение < 0 Тогда
			ТекущееЗначение = ТекущееЗначение + ВекторP;
		КонецЕсли;
		ТекущееЗначение = ТекущееЗначение % ВекторQ;
		
	КонецЕсли;
	
	Если Отказ ИЛИ ТекущееЗначение <> ВтороеЧисло Тогда
		Результат = Новый Структура("Результат, Ошибка", Ложь, ТекстОшибки);
	Иначе
		Результат = Новый Структура("Результат", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьЦелоеЧисло(ДанныеЧисла)
	
	Если ТипЗнч(ДанныеЧисла) = Тип("ДвоичныеДанные") Тогда
		ПредставлениеЧисла = ПолучитьHexСтрокуИзДвоичныхДанных(ДанныеЧисла);
	ИначеЕсли ТипЗнч(ДанныеЧисла) = Тип("БуферДвоичныхДанных") Тогда
		ПредставлениеЧисла = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(ДанныеЧисла);
	ИначеЕсли ТипЗнч(ДанныеЧисла) = Тип("Строка") Тогда
		ПредставлениеЧисла = ДанныеЧисла;
	КонецЕсли;	
	
	Результат = ЧислоИзШестнадцатеричнойСтроки("0x" + ПредставлениеЧисла);

	Возврат Результат;
	
КонецФункции

// Поиск общего знаменателя по обобщеному алгоритму Евклида
// модифицированный для инверсии числа
//
Функция НайтиОбщийЗнаменатель(ЗначениеЧисла, МодульЧисла)
	
	Если ЗначениеЧисла < 0 Тогда
		Возврат МодульЧисла - НайтиОбщийЗнаменатель(-ЗначениеЧисла, МодульЧисла);
	КонецЕсли;
	
	Результат = 0;
	ТекущийРезультат = 1;
	
	ТекущийМодуль = МодульЧисла;
	ТекущееЗначение = ЗначениеЧисла;
	
	Пока ТекущееЗначение <> 0 Цикл
		НовоеЗначение = Цел(ТекущийМодуль / ТекущееЗначение);
		
		Перестановка = Результат;
		Результат = ТекущийРезультат;
		ТекущийРезультат = Перестановка - НовоеЗначение * ТекущийРезультат;
		
		Перестановка = ТекущийМодуль;
		ТекущийМодуль = ТекущееЗначение;
		ТекущееЗначение = Перестановка - НовоеЗначение * ТекущееЗначение;
		
	КонецЦикла;
	
	Если ТекущийМодуль > 1 Тогда
		Результат = -1;
	ИначеЕсли Результат < 0 Тогда
		Результат = Результат + МодульЧисла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВычислитьЭкспоненту(ТекущаяКривая, ЗначениеЧисла, ВекторX = Неопределено, ВекторY = Неопределено)
	
	Если ВекторX = Неопределено Тогда
		ВекторX = ТекущаяКривая.ВекторX;
	КонецЕсли;
	
	Если ВекторY = Неопределено Тогда
		ВекторY = ТекущаяКривая.ВекторY;
	КонецЕсли;
	
	ТекущийВекторX = ВекторX;
	ТекущийВекторY = ВекторY;
	Если ЗначениеЧисла = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибочное значение числа';
								|en = 'Ошибочное значение числа'");;
	КонецЕсли;
	
	ЗначениеЧисла = ЗначениеЧисла - 1;
	
	Пока ЗначениеЧисла <> 0 Цикл
		Если ЗначениеЧисла % 2 = 1 Тогда
			РезультатСложения = СложитьВектора(ТекущаяКривая, ТекущийВекторX, ТекущийВекторY, ВекторX, ВекторY);
			ТекущийВекторX = РезультатСложения.ВекторX;
			ТекущийВекторY = РезультатСложения.ВекторY;
		КонецЕсли;
		ЗначениеЧисла = Цел(ЗначениеЧисла / 2);
		
		РезультатСложения = СложитьВектора(ТекущаяКривая, ВекторX, ВекторY, ВекторX, ВекторY);
		ВекторX = РезультатСложения.ВекторX;
		ВекторY = РезультатСложения.ВекторY;
		
	КонецЦикла;
	
	Результат = Новый Структура("ВекторX, ВекторY", ТекущийВекторX, ТекущийВекторY);

	Возврат Результат;
	
КонецФункции

Функция СложитьВектора(ТекущаяКривая, ПервыйВекторX, ПервыйВекторY, ВторойВекторX, ВторойВекторY)
	
	ВекторA = ТекущаяКривая.ВекторA;
	ВекторP = ТекущаяКривая.ВекторP;
	
	Если ПервыйВекторX = ВторойВекторX И ПервыйВекторY = ВторойВекторY Тогда
		ТекущееЗначение = ((3 * ПервыйВекторX * ПервыйВекторX + ВекторA) * НайтиОбщийЗнаменатель(2 * ПервыйВекторY, ВекторP)) % ВекторP;
	Иначе
		ТекущийВекторX = ПоложительноеЧисло(ТекущаяКривая, ВторойВекторX - ПервыйВекторX) % ВекторP;
		ТекущийВекторY = ПоложительноеЧисло(ТекущаяКривая, ВторойВекторY - ПервыйВекторY) % ВекторP;
		ТекущееЗначение = (ТекущийВекторY * НайтиОбщийЗнаменатель(ТекущийВекторX, ВекторP)) % ВекторP;
	КонецЕсли;
	
	ТекущийВекторX = ПоложительноеЧисло(ТекущаяКривая, ТекущееЗначение * ТекущееЗначение - ПервыйВекторX - ВторойВекторX) % ВекторP;
	ТекущийВекторY = ПоложительноеЧисло(ТекущаяКривая, ТекущееЗначение * (ПервыйВекторX - ТекущийВекторX) - ПервыйВекторY) % ВекторP;
	
	Результат = Новый Структура("ВекторX, ВекторY", ТекущийВекторX, ТекущийВекторY);
	
	Возврат Результат;
	
КонецФункции

Функция ПоложительноеЧисло(ТекущаяКривая, ТекущееЗначение)
	
	Результат = ТекущееЗначение;
	Если ТекущееЗначение < 0 Тогда
		Результат = Результат + ТекущаяКривая.ВекторP;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПроверитьИздателяСертификата(ИздательСертификата)
	
	ИменаУЦКалуги 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИменаУЦКалуги();
	ИменаУЦ       	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаУЦКалуги, Символы.ПС, Ложь);
	НашлиЭлемент  	= ИменаУЦ.Найти(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИздательСертификата, "Организация", ""));
	Результат		= НашлиЭлемент <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеСертификатаКО()
	
	ИсходныеДаннные = 
	"MIIIBjCCB7OgAwIBAgIQeCZFARWsW55GT9KgSff3ADAKBggqhQMHAQEDAjCCAQ8x
	|GDAWBgUqhQNkARINMTAyNDAwMTQzNDA0OTEaMBgGCCqFAwOBAwEBEgwwMDQwMjkw
	|MTc5ODExCzAJBgNVBAYTAlJVMR4wHAYDVQQIDBU0MCDQmtCw0LvRg9C20YHQutCw
	|0Y8xGTAXBgNVBAcMENCzLiDQmtCw0LvRg9Cz0LAxLDAqBgNVBAkMI9C/0LXRgC4g
	|0KLQtdGA0LXQvdC40L3RgdC60LjQuSDQtC42MScwJQYDVQQKDB7QkNCeINCa0JDQ
	|m9Cj0JPQkCDQkNCh0KLQoNCQ0JsxODA2BgNVBAMML9Ci0LXRgdGC0L7QstGL0Lkg
	|0JDQniDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbMB4XDTIwMDgxMjE5MzM1MVoX
	|DTI0MTExNDA3MzYwM1owggE8MRgwFgYFKoUDZAESDTEwMjQwMDE0MzQwNDkxGjAY
	|BggqhQMDgQMBARIMMDA0MDI5MDE3OTgxMS0wKwYDVQQIDCQ0MCDQmtCw0LvRg9C2
	|0YHQutCw0Y8g0L7QsdC70LDRgdGC0YwxKTAnBgNVBAoMINCQ0J4gItCa0JDQm9Cj
	|0JPQkCDQkNCh0KLQoNCQ0JsiMQswCQYDVQQGEwJSVTEtMCsGA1UECAwkNDAg0JrQ
	|sNC70YPQttGB0LrQsNGPINC+0LHQu9Cw0YHRgtGMMRgwFgYDVQQHDA/Qsy7QmtCw
	|0LvRg9Cz0LAxKTAnBgNVBAoMINCQ0J4gItCa0JDQm9Cj0JPQkCDQkNCh0KLQoNCQ
	|0JsiMSkwJwYDVQQDDCDQkNCeICLQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbIjBm
	|MB8GCCqFAwcBAQEBMBMGByqFAwICJAAGCCqFAwcBAQICA0MABEBK0kVVjACzVUnF
	|BehXVrgZZfiBiyGQ55h8dhUyRHhVBzroo7pIg/XUaZwTQj/vWttMsyXyNVv4wUoV
	|tG3vgF7oo4IEsTCCBK0wDgYDVR0PAQH/BAQDAgP4MDQGCSsGAQQBgjcVBwQnMCUG
	|HSqFAwICMgEJvpBShqDVQITViQ2E3o9RgfdRg7xOAgEBAgEAMCcGA1UdJQQgMB4G
	|CCsGAQUFBwMCBggrBgEFBQcDAQYIKwYBBQUHAwQwHQYDVR0gBBYwFDAIBgYqhQNk
	|cQEwCAYGKoUDZHECMDsGBSqFA2RvBDIMMNCh0JrQl9CYICLQmtGA0LjQv9GC0L7Q
	|n9GA0L4iICjQstC10YDRgdC40Y8gNC4wKTArBgNVHRAEJDAigA8yMDIwMDgxMjE5
	|MzM1MVqBDzIwMjUwODExMjEwMDAwWjAzBgkrBgEEAYI3FQoEJjAkMAoGCCsGAQUF
	|BwMCMAoGCCsGAQUFBwMBMAoGCCsGAQUFBwMEMGMGCCsGAQUFBwEBBFcwVTBTBggr
	|BgEFBQcwAoZHaHR0cDovL3dpbi01N2w2MmpjaHBoYy9haWEvODkwZTIwOTk1YjQ0
	|MDVlNzIxNGE1ODJjMjllYzA4ZGQ0ZjFhMWQ1MS5jcnQwggFKBgUqhQNkcASCAT8w
	|ggE7DFPQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/QoNCeIENTUCIgKNCy0LXRgNGB
	|0LjRjyA0LjApICjQuNGB0L/QvtC70L3QtdC90LjQtSAyIC1CYXNlKQyBkdCf0YDQ
	|vtCz0YDQsNC80LzQvdC+LdCw0L/Qv9Cw0YDQsNGC0L3Ri9C5INC60L7QvNC/0LvQ
	|tdC60YEgItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi
	|0JrRgNC40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuNC4IDIuMCIMIdCh
	|0KQvMTI0LTMzODAg0L7RgiAxMSDQvNCw0Y8gMjAxOAwt0KHQpC8xMjgtMzU5MiDQ
	|vtGCIDE3INC+0LrRgtGP0LHRgNGPIDIwMTgg0LMuMFgGA1UdHwRRME8wTaBLoEmG
	|R2h0dHA6Ly93aW4tNTdsNjJqY2hwaGMvY2RwLzg5MGUyMDk5NWI0NDA1ZTcyMTRh
	|NTgyYzI5ZWMwOGRkNGYxYTFkNTEuY3JsMIIBUAYDVR0jBIIBRzCCAUOAFIkOIJlb
	|RAXnIUpYLCnsCN1PGh1RoYIBF6SCARMwggEPMRgwFgYFKoUDZAESDTEwMjQwMDE0
	|MzQwNDkxGjAYBggqhQMDgQMBARIMMDA0MDI5MDE3OTgxMQswCQYDVQQGEwJSVTEe
	|MBwGA1UECAwVNDAg0JrQsNC70YPQttGB0LrQsNGPMRkwFwYDVQQHDBDQsy4g0JrQ
	|sNC70YPQs9CwMSwwKgYDVQQJDCPQv9C10YAuINCi0LXRgNC10L3QuNC90YHQutC4
	|0Lkg0LQuNjEnMCUGA1UECgwe0JDQniDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCb
	|MTgwNgYDVQQDDC/QotC10YHRgtC+0LLRi9C5INCQ0J4g0JrQkNCb0KPQk9CQINCQ
	|0KHQotCg0JDQm4IQOACAAAWr/aVK+dr28p7VajAdBgNVHQ4EFgQUXMnGEYht2TWz
	|mM8rNSoGN7+XfLUwCgYIKoUDBwEBAwIDQQClwX8w7IviT4l3c+E0de5eZpbAg6tz
	|g6WknGgpoM48NRazRbeuL2zlP/e2eK8iXGZuLpaxwouSJOZ4m65ynd3z";
	
	Результат = Base64Значение(ИсходныеДаннные);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
