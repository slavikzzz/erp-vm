
#Область СлужебныеПроцедурыИФункции

#Область ЗаказыПоставщикам

Функция ПроверитьВозможностьВводаНаОсновании(ПараметрКоманды) Экспорт
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрКоманды,"Статус,Проведен");
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПараметрКоманды);
	МенеджерОбъекта.ПроверитьВозможностьВводаНаОсновании(
		ПараметрКоманды, СтруктураРеквизитов.Статус, НЕ СтруктураРеквизитов.Проведен, Истина);
	
КонецФункции

#КонецОбласти

#Область ДокументыНаОснованииЗаказа

// Формиирует параметры открытия формы накладной на основании заказа/распоряжений.
// 
// Параметры:
//  Распоряжения - Массив из ДокументСсылка- список распоряжений, на основании которых оформляется накладная.
//  ИмяНакладной - Строка - Тип документа, на осоновании которого формируется распоряжение.
//  ХозяйственнаяОперация - Неопределено, ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция
// 
// Возвращаемое значение:
//  Структура - Параметры открытия формы накладной на основании заказа
Функция ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(Распоряжения, ИмяНакладной, ХозяйственнаяОперация = Неопределено) Экспорт
	
	ДанныеДляПроверки = Документы[ИмяНакладной].ДанныеДляПроверкиВводаНаОсновании(Распоряжения, ХозяйственнаяОперация);
	ОткрытьФормуДокумента = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеДляПроверки.Основание) Тогда
		
		// Проверка статуса
		ДопустимыеСтатусы = Документы[ДанныеДляПроверки.Основание.Метаданные().Имя].ДопустимыеСтатусыВводаНаОсновании(ИмяНакладной);
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(ДанныеДляПроверки.Основание, ДанныеДляПроверки.Статус, Ложь,
			ДопустимыеСтатусы.Найти(ДанныеДляПроверки.Статус) = Неопределено, ДопустимыеСтатусы);
			
		// Проверка действий
		Если Не ДанныеДляПроверки.ЕстьОтгрузить Тогда
			ВызватьИсключение ОбеспечениеВДокументахСервер.ТекстОшибкиНетТоваровДоступныхДляОтгрузки()
		КонецЕсли;
		
		ОткрытьФормуДокумента = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляПроверки.РаспоряженияКОформлению) Тогда
		ВызватьИсключение НСтр("ru = 'Нет свободных остатков к оформлению. Ввод на основании невозможен.';
								|en = 'No available inventory to register. Cannot generate the document.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляПроверки.Основание) И ДанныеДляПроверки.МожноСгруппировать Тогда
		РаспоряженияКГруппировке = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДанныеДляПроверки.РаспоряженияКОформлению);
		НакладныеСервер.СгруппироватьДокументыПоКлючевымПолям(РаспоряженияКГруппировке,
			Документы[ИмяНакладной].КлючевыеПоляШапкиРаспоряжения());
		Если РаспоряженияКГруппировке.Количество() = 1 Тогда
			ОткрытьФормуДокумента = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	Если ОткрытьФормуДокумента Тогда
		
		ПараметрыЗаполнения = Документы[ИмяНакладной].ПараметрыЗаполненияДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ДанныеДляПроверки);
		РеквизитыШапки = Документы[ИмяНакладной].ДанныеЗаполненияНакладной(ДанныеДляПроверки.РаспоряженияКОформлению,
			ДанныеДляПроверки);
		Документы[ИмяНакладной].ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки,
			ДанныеДляПроверки.РаспоряженияКОформлению);
		
		ПараметрыОткрытия.Вставить("ИмяФормы", "Документ." + ИмяНакладной + ".ФормаОбъекта");
		ПараметрыОткрытия.Вставить("ПараметрыФормы", Новый Структура("Основание", ПараметрыЗаполнения));
		ПараметрыОткрытия.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
		
	Иначе
		
		ПараметрыОткрытия = Документы[ИмяНакладной].ПараметрыОткрытияФормыРабочегоМеста(ХозяйственнаяОперация);
		ПараметрыОткрытия.ПараметрыФормы.Вставить("КлючНазначенияФормы", "ВводНаОсновании");
		ПараметрыОткрытия.ПараметрыФормы.Вставить("Распоряжения",        Распоряжения);
		ПараметрыОткрытия.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция АктВыполненныхРаботПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрКоманды))
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам") Тогда
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() > 0 Тогда
			ДокументОснование = ПараметрКоманды[0];
		Иначе
			ДокументОснование = ПараметрКоманды;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ПродажиВызовСервера.СформироватьДанныеЗаполненияАктовВыполненныхРабот(ПараметрКоманды, РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

Функция ПриобретениеТоваровУслугПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("СкладПоступления",  Неопределено);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрКоманды))
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() > 0 Тогда
			ДокументОснование = ПараметрКоманды[0];
		Иначе
			ДокументОснование = ПараметрКоманды;
		КонецЕсли;
		
		Если ОбщегоНазначенияУТ.ПроверитьОперациюРаспоряжения(ДокументОснование,"ПриобретениеТоваровУслуг") Тогда
			
			ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
	Иначе
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(ПараметрКоманды, "ПриобретениеТоваровУслуг", РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

Функция ПриемкаТоваровНаХранениеПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("СкладПоступления",  Неопределено);
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив")
		И ПараметрКоманды.Количество() > 0 Тогда
		
		ДокументОснование = ПараметрКоманды[0];
		
	Иначе
		ДокументОснование = ПараметрКоманды;
	КонецЕсли;
	
	ХозяйственнаяОперация = Неопределено;
	//++ НЕ УТКА
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
		ХозяйственнаяОперация =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца2_5");
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрКоманды))
		Или ХозяйственнаяОперация = Неопределено
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
		
		Если ОбщегоНазначенияУТ.ПроверитьОперациюРаспоряжения(ДокументОснование, "ПриемкаТоваровНаХранение", ХозяйственнаяОперация) Тогда
			ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(ПараметрКоманды, "ПриемкаТоваровНаХранение", РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

Функция ОперацияПоПлатежнойКарте_ВозвратПараметрыЗаполнения(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив")
		И ПараметрКоманды.Количество() > 0 Тогда
		ДанныеОснования = ПараметрКоманды[0];	
	Иначе
		ДанныеОснования = ПараметрКоманды;
	КонецЕсли;	
	
	Возврат Новый Структура("Основание", Новый Структура("Основание, ХозяйственнаяОперация", ДанныеОснования, Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту));
	
КонецФункции

#КонецОбласти

#Область ЗаказНаПеремещение

Функция СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладовПараметрыСоздания(ПараметрКоманды) Экспорт
	
	ПараметрыСозданияПоГруппеСкладов = Документы.ЗаказНаПеремещение.ПараметрыСозданияПоГруппеСкладовПоПоступлениюТоваровУслуг(ПараметрКоманды);
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

Функция СоздатьЗаказНаПеремещениеНаОснованииПриемкиТоваровНаХранениеПоГруппеСкладовПараметрыСоздания(ПараметрКоманды) Экспорт
	
	ПараметрыСозданияПоГруппеСкладов = Документы.ЗаказНаПеремещение.ПараметрыСозданияПоГруппеСкладовПоПриемкеТоваровНаХранение(ПараметрКоманды);
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

#КонецОбласти

#Область ПеремещениеТоваров

Функция СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды) Экспорт
	
	ПараметрыСозданияПоГруппеСкладов = Документы.ПеремещениеТоваров.ПараметрыСозданияПоГруппеСкладов(ПараметрКоманды);
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

#КонецОбласти

#Область РеализацияТоваровУслуг

Функция РеализацияТоваровУслугПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("СкладОтгрузки", 			Неопределено);
	ПараметрыОснования.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрКоманды))
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам") Тогда
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив")
			И ПараметрКоманды.Количество() > 0 Тогда
			
			ДокументОснование = ПараметрКоманды[0];
			
		Иначе
			ДокументОснование = ПараметрКоманды;
		КонецЕсли;
		
		ХозяйственнаяОперация = Неопределено;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ХозяйственнаяОперацияРеализация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозяйственнаяОперация");
			ХозяйственнаяОперация = ПродажиСервер.ПолучитьХозяйственнуюОперациюРеализацииПоВозврату(ХозяйственнаяОперацияРеализация);
		КонецЕсли;
		
		Если ОбщегоНазначенияУТ.ПроверитьОперациюРаспоряжения(ДокументОснование, "РеализацияТоваровУслуг", ХозяйственнаяОперация) Тогда
			ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		ИмяДокумента   = "РеализацияТоваровУслуг";
		
		Если НЕ ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(ПараметрКоманды, ИмяДокумента, РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",      РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование",   ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

#КонецОбласти

#Область СчетНаОплату

Функция СчетНаОплатуРеализацияАктПолучитьПараметрыОткрытияФормы(Основание) Экспорт
	
	ПараметрыОткрытияФормы = Неопределено;
	
	МассивЗаказов = СчетНаОплатуРеализацияАктПолучитьЗаказыРеализацииСервер(Основание);
	
	Если СчетНаОплатуРеализацияАктПроверитьПорядокРасчетов(Основание)
	 ИЛИ МассивЗаказов.Количество() = 0 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", Новый Структура("Основание", Основание));
		
	ИначеЕсли МассивЗаказов.Количество() = 1 Тогда
		ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(МассивЗаказов[0]);
		ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
			
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

Функция СчетНаОплатуРеализацияАктПроверитьПорядокРасчетов(Основание)
	
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПорядокРасчетов");
	
	Возврат ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказам;
	
КонецФункции 

Функция СчетНаОплатуРеализацияАктПолучитьЗаказыРеализацииСервер(Основание)
	
	Запрос = Новый Запрос();
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОтчетКомитентуОЗакупкахТовары.ЗаказКлиента КАК ЗаказКлиента
			|ИЗ
			|	Документ.ОтчетКомитентуОЗакупках.Товары КАК ОтчетКомитентуОЗакупкахТовары
			|ГДЕ
			|	ОтчетКомитентуОЗакупкахТовары.Ссылка = &Основание
			|	И ОтчетКомитентуОЗакупкахТовары.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
			|
			|";
		Запрос.УстановитьПараметр("Основание", Основание);
		РезультатЗапроса = Запрос.Выполнить();
		МассивЗаказов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	Иначе
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК ЗаказКлиента
			|ПОМЕСТИТЬ
			|	Заказы
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Основание
			|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
			|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
			|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &Основание
			|	И РеализацияТоваровУслуг.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
			|	И РеализацияТоваровУслуг.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
			|	И РеализацияТоваровУслуг.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АктВыполненныхРаботУслуги.ЗаказКлиента КАК ЗаказКлиента
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК АктВыполненныхРаботУслуги
			|ГДЕ
			|	АктВыполненныхРаботУслуги.Ссылка = &Основание
			|	И АктВыполненныхРаботУслуги.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
			|	И АктВыполненныхРаботУслуги.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
			|	И АктВыполненныхРаботУслуги.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АктВыполненныхРабот.ЗаказКлиента КАК ЗаказКлиента
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
			|ГДЕ
			|	АктВыполненныхРабот.Ссылка = &Основание
			|	И АктВыполненныхРабот.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
			|	И АктВыполненныхРабот.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
			|	И АктВыполненныхРабот.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
			|;
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Заказы.ЗаказКлиента КАК ЗаказКлиента
			|ИЗ
			|	Заказы КАК Заказы
			|
			|";
			
		Запрос.УстановитьПараметр("Основание", Основание);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		МассивЗаказов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
		
	КонецЕсли;
	
	Возврат МассивЗаказов;
	
КонецФункции

Функция СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(Договор) Экспорт
	
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
	Возврат ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным;
	
КонецФункции

//++ НЕ УТКА

Функция СчетНаОплатуОтчетДавальцу2_5ПолучитьПараметрыОткрытияФормы(ОтчетДавальцу) Экспорт
	
	ПараметрыОткрытияФормы = Неопределено;
	
	МассивЗаказов = СчетНаОплатуОтчетДавальцу2_5ПолучитьЗаказыОтчетаДавальцу2_5Сервер(ОтчетДавальцу);
	
	Если СчетНаОплатуОтчетДавальцуПроверитьПорядокРасчетов(ОтчетДавальцу) Или МассивЗаказов.Количество() = 0 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", Новый Структура("Основание", ОтчетДавальцу));
		
	ИначеЕсли МассивЗаказов.Количество() = 1 Тогда
		
		ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(МассивЗаказов[0]);
		ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
			
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

Функция СчетНаОплатуОтчетДавальцу2_5ПолучитьЗаказыОтчетаДавальцу2_5Сервер(ОтчетДавальцу)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПродукции.ЗаказДавальца КАК ЗаказКлиента
	|ПОМЕСТИТЬ
	|	Заказы
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаПродукции
	|ГДЕ
	|	ТаблицаПродукции.Ссылка = &ОтчетДавальцу
	|	И ТаблицаПродукции.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетДавальцу2_5.ЗаказДавальца КАК ЗаказКлиента
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ОтчетДавальцу2_5
	|ГДЕ
	|	ОтчетДавальцу2_5.Ссылка = &ОтчетДавальцу
	|	И ОтчетДавальцу2_5.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.ЗаказКлиента КАК ЗаказКлиента
	|ИЗ
	|	Заказы КАК Заказы
	|";
		
	Запрос.УстановитьПараметр("ОтчетДавальцу", ОтчетДавальцу);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	
КонецФункции

Функция СчетНаОплатуОтчетДавальцуПроверитьПорядокРасчетов(ОтчетДавальцу)
	
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетДавальцу, "ПорядокРасчетов");
	
	Возврат ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказам;
	
КонецФункции

//++ Устарело_Переработка24
Функция СчетНаОплатуОтчетДавальцуПолучитьПараметрыОткрытияФормы(ОтчетДавальцу) Экспорт
	
	ПараметрыОткрытияФормы = Неопределено;
	
	МассивЗаказов = СчетНаОплатуОтчетДавальцуПолучитьЗаказыОтчетаДавальцуСервер(ОтчетДавальцу);
	
	Если СчетНаОплатуОтчетДавальцуПроверитьПорядокРасчетов(ОтчетДавальцу)
		ИЛИ МассивЗаказов.Количество() = 0 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", Новый Структура("Основание", ОтчетДавальцу));
		
	ИначеЕсли МассивЗаказов.Количество() = 1 Тогда
		
		ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(МассивЗаказов[0]);
		ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
			
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

Функция СчетНаОплатуОтчетДавальцуПолучитьЗаказыОтчетаДавальцуСервер(ОтчетДавальцу)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетДавальцуУслуги.ЗаказДавальца КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	Заказы
		|ИЗ
		|	Документ.ОтчетДавальцу.Продукция КАК ОтчетДавальцуУслуги
		|ГДЕ
		|	ОтчетДавальцуУслуги.Ссылка = &ОтчетДавальцу
		|	И ОтчетДавальцуУслуги.ЗаказДавальца <> НЕОПРЕДЕЛЕНО
		|	И ОтчетДавальцуУслуги.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетДавальцу.ЗаказДавальца КАК ЗаказКлиента
		|ИЗ
		|	Документ.ОтчетДавальцу КАК ОтчетДавальцу
		|ГДЕ
		|	ОтчетДавальцу.Ссылка = &ОтчетДавальцу
		|	И ОтчетДавальцу.ЗаказДавальца <> НЕОПРЕДЕЛЕНО
		|	И ОтчетДавальцу.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца.ПустаяСсылка)
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Заказы КАК Заказы
		|");
		
	Запрос.УстановитьПараметр("ОтчетДавальцу", ОтчетДавальцу);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивЗаказов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	Возврат МассивЗаказов;
	
КонецФункции
//-- Устарело_Переработка24

//++ Устарело_Производство21
Функция ВыпускПродукцииПараметрыОформленияВыпуска(МассивСсылок, ТекстПредупреждения) Экспорт

	Если МассивСсылок.Количество() > 1 И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВыпускПоНесколькимРаспоряжениям") Тогда
		ТекстПредупреждения = НСтр("ru = 'Оформление одного документа на основании нескольких маршрутных листов отключено.
											|Необходимо выбрать один маршрутный лист.';
											|en = 'Registration of a single document based on multiple route sheets is disabled.
											|Please select one route sheet.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Документы.ВыпускПродукции.ПараметрыОформленияВыпуска(МассивСсылок, Неопределено, ТекстПредупреждения);

КонецФункции
//-- Устарело_Производство21

//-- НЕ УТКА

#КонецОбласти

#Область ИзменениеАссортимента

Функция УстановитьПоддержаниеЗапасов(ПараметрКоманды) Экспорт
	
	Возврат Обработки.НастройкаПоддержанияЗапасов.УстановитьПоддержаниеЗапасовДляДокументаИзмененияАссортимента(ПараметрКоманды);
	
КонецФункции

#КонецОбласти

Функция ПроверитьСтатусПересчетаНаСервере(ПересчетСсылка) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("МожноОткрытьПомощник", Ложь);
	РезультатПроверки.Вставить("СообщениеПользователю", "");
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПересчетСсылка, "Статус");
	Если Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда 
		РезультатПроверки.МожноОткрытьПомощник = Истина;
	Иначе
		СообщениеПользователю = НСтр("ru = 'Документ ""%ПересчетТоваров%"" находится в статусе ""%ТекущийСтатус%"". Воспользоваться помощником оформления складских актов можно только в статусе ""%СтатусВыполнено%"".';
									|en = '""%ПересчетТоваров%"" status is ""%ТекущийСтатус%."" You can run Inventory Adjustment Wizard only if its status is ""%СтатусВыполнено%.""'");
		СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ПересчетТоваров%", ПересчетСсылка);
		СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ТекущийСтатус%", Статус);
		СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%СтатусВыполнено%", Перечисления.СтатусыПересчетовТоваров.Выполнено);
		РезультатПроверки.СообщениеПользователю	= СообщениеПользователю;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

//++ НЕ УТ

//++ Устарело_Производство21
Функция СписаниеЗатратНаВыпускПараметрыВводаНаОсновании(МассивВыпусков, ОбъектФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ВыпускПродукцииТовары.Ссылка.Дата, МЕСЯЦ) КАК Период,
	|	Остатки.Организация КАК Организация,
	|	ВыпускПродукцииТовары.Спецификация КАК Спецификация,
	|	Остатки.Назначение КАК Назначение,
	|	Остатки.Распоряжение,
	|	Остатки.КодСтроки КАК КодСтроки,
	|	Остатки.КоличествоОстаток КАК Количество,
	|	Остатки.Подразделение,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпецификацияВыходныеИзделия.НомерСтроки, 0) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновноеИзделие,
	|	ВыпускПродукцииТовары.ТипСтоимости
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Остатки(, Распоряжение В (&МассивВыпусков)) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК СпецификацияВыходныеИзделия
	|			ПО ВыпускПродукцииТовары.Спецификация = СпецификацияВыходныеИзделия.Ссылка
	|				И ВыпускПродукцииТовары.Номенклатура = СпецификацияВыходныеИзделия.Номенклатура
	|				И (ВыпускПродукцииТовары.Характеристика = СпецификацияВыходныеИзделия.Характеристика
	|					ИЛИ СпецификацияВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ПО Остатки.Распоряжение = ВыпускПродукцииТовары.Ссылка
	|			И Остатки.КодСтроки = ВыпускПродукцииТовары.КодСтроки
	|			И Остатки.Номенклатура = ВыпускПродукцииТовары.Номенклатура
	|			И Остатки.Характеристика = ВыпускПродукцииТовары.Характеристика
	|			И Остатки.Назначение = ВыпускПродукцииТовары.Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	Спецификация,
	|	Назначение УБЫВ";
	
	Запрос.УстановитьПараметр("МассивВыпусков", МассивВыпусков);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	АвтоматическоеСоздание = Истина; // документы могут быть созданы автоматически если во всех распоряжениях заполнена спецификация
	НесколькоДокументов    = Ложь;
	ТекПериод              = Неопределено;
	ТекОрганизация         = Неопределено;
	ТекСпецификация        = Неопределено;
	ТекНазначение          = Неопределено;
	
	// Данные шапки и распоряжения для заполнения нового документа, если автоматическое формирование невозможно.
	ДанныеШапки = Новый Структура("Количество, Период, Организация, Подразделение, Номенклатура, Характеристика, Назначение, Спецификация", 0);
	ТаблицаРаспоряжений = Новый ТаблицаЗначений;
	ТаблицаРаспоряжений.Колонки.Добавить("Распоряжение",      Новый ОписаниеТипов("ДокументСсылка.ВыпускПродукции"));
	ТаблицаРаспоряжений.Колонки.Добавить("КодСтроки",         Новый ОписаниеТипов("Число"));
	
	ЕстьСтрокиБезСпецификации = Ложь;
	
	ДанныеШапкиЗаполнены = Ложь;
	ПерваяИтерация = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		// Если основное изделие не выбрано, то данные шапки будут заполнены по первому распоряжению.
		Если ПерваяИтерация
			И Выборка.ТипСтоимости = Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается Тогда
			ЗаполнитьЗначенияСвойств(ДанныеШапки, Выборка, , "Количество");
			ПерваяИтерация = Ложь;
		КонецЕсли;
		
		// Если спецификация не указана, то данные шапки заполняются по первому распоряжению
		// открывается форма нового, заполненная всей продукцией.
		Если Не ЗначениеЗаполнено(Выборка.Спецификация) И Не ЕстьСтрокиБезСпецификации Тогда
			ЕстьСтрокиБезСпецификации = Истина;
			ЗаполнитьЗначенияСвойств(ДанныеШапки, Выборка);
			ДанныеШапки.Спецификация = Неопределено;
			АвтоматическоеСоздание = Ложь;
			ДанныеШапкиЗаполнены = Истина;
		КонецЕсли;
		
		Если Выборка.ОсновноеИзделие И Не ДанныеШапкиЗаполнены Тогда
			ЗаполнитьЗначенияСвойств(ДанныеШапки, Выборка, , "Количество");
			ДанныеШапкиЗаполнены = Истина;
		КонецЕсли;
		
		Если ТекПериод = Неопределено Тогда
			ТекПериод = Выборка.Период;
		КонецЕсли;
		Если ТекОрганизация = Неопределено Тогда
			ТекОрганизация = Выборка.Организация;
		КонецЕсли;
		Если ТекСпецификация = Неопределено Тогда
			ТекСпецификация = Выборка.Спецификация;
		КонецЕсли;
		Если ТекНазначение = Неопределено Тогда
			ТекНазначение = Выборка.Назначение;
		КонецЕсли;
		
		Если ТекПериод <> Выборка.Период Или 
			ТекОрганизация <> Выборка.Организация Или
			ТекСпецификация <> Выборка.Спецификация Или
			(ТекНазначение <> Выборка.Назначение И ЗначениеЗаполнено(ТекНазначение) И ЗначениеЗаполнено(Выборка.Назначение)) Тогда
			НесколькоДокументов = Истина;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаРаспоряжений.Добавить(), Выборка);
		
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("ДанныеШапки", ДанныеШапки);
	Результат.Вставить("Распоряжения", ПоместитьВоВременноеХранилище(ТаблицаРаспоряжений));
	
	Результат.Вставить("СписокДокументов", Новый СписокЗначений);
	Результат.Вставить("ДанныеШапкиЗаполнены", ДанныеШапкиЗаполнены);
	
	Если АвтоматическоеСоздание И НесколькоДокументов Тогда
		
		Параметры = Новый Структура("Распоряжения", ТаблицаРаспоряжений);
		
		ДокументыПоПараметрам = Документы.СписаниеЗатратНаВыпуск.ДокументыПоПараметрам(Параметры, Истина);
		
		Если ДокументыПоПараметрам.Свойство("ДокументОбъект") Тогда
			
			Результат.Вставить("ОткрытьФормуНового");
			
			ЗначениеВДанныеФормы(ДокументыПоПараметрам.ДокументОбъект, ОбъектФормы);
			
		Иначе
			Результат.СписокДокументов = ДокументыПоПараметрам.СписокДокументов;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СписаниеЗатратНаВыпускПроверитьОбъектыОснований(ПараметрКоманды) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РаспоряженияНаСписаниеПоНормативамОстатки.КоличествоОстаток, 0) КАК Поле1
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Остатки КАК РаспоряженияНаСписаниеПоНормативамОстатки
	|ГДЕ
	|	РаспоряженияНаСписаниеПоНормативамОстатки.Распоряжение В(&Массив)
	|	И ЕСТЬNULL(РаспоряженияНаСписаниеПоНормативамОстатки.КоличествоОстаток, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВыпускПродукции.ВыпускПоРаспоряжениям
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Поле1
	|ИЗ
	|	Документ.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Ссылка В(&Массив)
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВыпускПродукции.ВыпускПоРаспоряжениям
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыпускПродукции.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Ссылка В(&Массив)
	|	И ВыпускПродукции.Подразделение.ИспользуетсяСписаниеЗатратНаВыпуск
	|";
	
	Запрос.УстановитьПараметр("Массив", ПараметрКоманды);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой() Тогда
		Возврат Неопределено;
	ИначеЕсли Результат[1].Пустой() Тогда
		Возврат НСтр("Ru = 'Списание затрат оформляется только по выпускам без заказа. Создание документа не требуется.'");
	ИначеЕсли Результат[2].Пустой() Тогда
		Возврат НСтр("Ru = 'Списание затрат на выпуск выбранных подразделений не используется. Создание документа не требуется.'");
	Иначе
		Возврат НСтр("Ru = 'По выбранным распоряжениям затраты уже списаны. Создание документа не требуется.'");
	КонецЕсли;
	
КонецФункции
//-- Устарело_Производство21

//-- НЕ УТ

//++ НЕ УТКА

//++ Устарело_Производство21

Функция ВводКорректировкиДоступен(СписокЗаказов, ТекстПредупреждения) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводство.Ссылка В(&СписокЗаказов)";
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТекстПредупреждения = НСтр("ru = 'Корректировка доступна для заказов в статусах ""К производству"" и ""Закрыт"".';
									|en = 'Adjustment is available for orders with the ""For production"" and ""Closed"" statuses.'");
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

//++ Устарело_Переработка24

Функция СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований) Экспорт
	
	Возврат Документы.ЗаказДавальца.СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований);
	
КонецФункции
//-- Устарело_Переработка24
//-- Устарело_Производство21

//++ Устарело_Переработка24

Функция СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований) Экспорт
	
	Возврат Документы.ЗаказДавальца.СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований);
	
КонецФункции
//-- Устарело_Переработка24

Функция СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальца2_5ПроверкаОснований(ОбъектыОснований) Экспорт
	
	Возврат Документы.ЗаказДавальца2_5.СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований);
	
КонецФункции

Функция СоздатьПроизводственнуюОперациюНаОснованииПроверкаОснования(ОбъектОснование) Экспорт
	
	Возврат Документы.ПроизводственнаяОперация2_2.СоздатьПроизводственнуюОперациюНаОснованииПроверкаОснования(ОбъектОснование);
	
КонецФункции

Функция СоздатьНачальныеОстаткиНЗППоПартиямПроизводства(СсылкаНаДокумент, ИдентификаторФормы) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Распределение начальных остатков НЗП по партиям производство';
								|en = 'Allocation of WIP opening balances by production lots'");
	ВыполняемыйМетод = "Документы.НачальныеОстаткиНЗППоПодразделениям.РаспределитьНачальныеОстаткиПоПартиямПроизводства";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		ВыполняемыйМетод,
		СсылкаНаДокумент,
		ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции
//-- НЕ УТКА

Функция АктОРасхожденияхПослеПриемкиПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	Если ОбщегоНазначенияУТ.ПроверитьОперациюРаспоряжения(ПараметрКоманды[0], "АктОРасхожденияхПослеПриемки") Тогда
		ПараметрыОснования = Новый Структура;
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды[0]);
		
		ПараметрыФормы = Новый Структура("Основание", ПараметрыОснования);
		
		Возврат ПараметрыФормы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ПередачаТоваровХранителю

Функция ПередачаТоваровХранителюПараметрыОткрытияФормы(ОбъектыОснований) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("СкладОтгрузки", Неопределено);
	ПараметрыОснования.Вставить("ТекстОшибки", "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектыОснований))
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам") Тогда
		
		Если ТипЗнч(ОбъектыОснований) = Тип("Массив")
			И ОбъектыОснований.Количество() > 0 Тогда
			
			ДокументОснование = ОбъектыОснований[0];
			
		Иначе
			ДокументОснование = ОбъектыОснований;
		КонецЕсли;
		
		Если ОбщегоНазначенияУТ.ПроверитьОперациюРаспоряжения(ДокументОснование, "ПередачаТоваровХранителю") Тогда
			ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
		ИначеЕсли ОбщегоНазначенияУТ.ПроверитьОперациюРаспоряжения(ДокументОснование, "ПередачаНаКомиссию")
			И ЗначениеЗаполнено(ДокументОснование.Договор) Тогда
			ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		ИмяДокумента   = "ПередачаТоваровХранителю";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивСсылок", ОбъектыОснований);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорЗаказа
			|		ПО ДоговорЗаказа.Ссылка = ЗаказКлиента.Договор
			|ГДЕ
			|	ЗаказКлиента.Ссылка В(&МассивСсылок)
			|	И ((ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
			|		И НЕ ЗаказКлиента.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			|		И ДоговорЗаказа.КомиссионныеПродажи25)
			|		ИЛИ ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи))";
		
		РезультатПроверкиОбъектыОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если РезультатПроверкиОбъектыОснований.Количество() = 0 Тогда
			
			Если ОбъектыОснований.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для данного документа';
									|en = 'Unable to execute the command for this document'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для выбранных документов';
									|en = 'Command cannot be executed for the selected documents'");
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если Не ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(РезультатПроверкиОбъектыОснований, ИмяДокумента, РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование", РезультатПроверкиОбъектыОснований);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

#КонецОбласти

#Область КорректировкаНазначенияТоваров

Функция СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиентаПроверкаТипаНазначения(ПараметрыКоманды) Экспорт
	
	Возврат Документы.КорректировкаНазначенияТоваров.СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиентаПроверкаТипаНазначения(ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

#Область ОтгрузкаТоваровСХранения

Функция СоздатьОтгрузкуТоваровСХраненияНаОснованииЗаказаКлиентаПроверкаТипаНазначения(ПараметрыКоманды) Экспорт
	
	Возврат Документы.ОтгрузкаТоваровСХранения.СоздатьОтгрузкуТоваровСХраненияНаОснованииЗаказаКлиентаПроверкаХозОперации(ПараметрыКоманды);
	
КонецФункции

//++ НЕ УТКА

Функция ОтгрузкаТоваровСХраненияПередачаДавальцуПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрКоманды))
	 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам") Тогда
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() > 0 Тогда
			ДокументОснование = ПараметрКоманды[0];
		Иначе
			ДокументОснование = ПараметрКоманды;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
		
	Иначе
		
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

Функция ОтгрузкаТоваровСХраненияВозвратДавальцуПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрКоманды))
	 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам") Тогда
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() > 0 Тогда
			ДокументОснование = ПараметрКоманды[0];
		Иначе
			ДокументОснование = ПараметрКоманды;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("ДокументОснование", ДокументОснование);
		
	Иначе
		
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти
