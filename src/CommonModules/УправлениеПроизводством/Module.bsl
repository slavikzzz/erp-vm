////////////////////////////////////////////////////////////////////////////////
// Управление производством: содержит процедуры для управления производством.
// Модуль входит в подсистему "УправлениеПредприятием".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкиПодсистемы

// Получает настройки подсистемы "Межцеховое управление"
// 
// Возвращаемое значение:
//   - Структура - настройки управления производством.
//
Функция НастройкиУправленияПроизводством() Экспорт
	
	НастройкиПодсистемы = Новый Структура();
	
	НаборКонстант = Константы.СоздатьНабор(
		"МетодикаУправленияПроизводством,
		|ДинамическаяСтруктураЗаказовНаПроизводство,
		|ИспользоватьПланированиеПоПроизводственнымРесурсам,
		|ИспользоватьПланированиеПоМатериальнымРесурсам,
		|ИспользоватьИнтервалПланированияЧас");
	НаборКонстант.Прочитать();

	НастройкиПодсистемы.Вставить("ДинамическаяСтруктураЗаказовНаПроизводство", НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство);
	НастройкиПодсистемы.Вставить("ПланируетсяГрафикПроизводства", ИспользуетсяГрафикПроизводства(НаборКонстант));
	НастройкиПодсистемы.Вставить("ИспользуетсяПланированиеПоПроизводственнымРесурсам", НаборКонстант.ИспользоватьПланированиеПоПроизводственнымРесурсам);
	НастройкиПодсистемы.Вставить("ИспользуетсяПланированиеПоМатериальнымРесурсам", НаборКонстант.ИспользоватьПланированиеПоМатериальнымРесурсам);
	НастройкиПодсистемы.Вставить("ФорматДатыГрафика", ФорматнаяСтрокаДляДатыГрафикаПроизводства(НаборКонстант));
	
	Возврат НастройкиПодсистемы;
	
КонецФункции

// Определяет используется ли график производства.
// 
// Параметры:
//  НаборКонстант - КонстантыНабор - значения констант.
// 
// Возвращаемое значение:
//   Булево - Истина, если график производства используется.
//
Функция ИспользуетсяГрафикПроизводства(НаборКонстант = Неопределено) Экспорт
	
	Если НаборКонстант <> Неопределено Тогда
		МетодикаУправления = НаборКонстант.МетодикаУправленияПроизводством;
	Иначе 
		МетодикаУправления = Константы.МетодикаУправленияПроизводством.Получить();
	КонецЕсли;
	
	Возврат МетодикаУправления <> Перечисления.МетодикаУправленияПроизводством.БезПланирования;
	
КонецФункции

// Определяет форматную строку для даты графика производства
//
// Параметры:
//  НаборКонстант - КонстантыНабор - значения констант.
// 
// Возвращаемое значение:
//  Строка - форматная строка
//
Функция ФорматнаяСтрокаДляДатыГрафикаПроизводства(НаборКонстант = Неопределено) Экспорт
	
	Если НаборКонстант <> Неопределено Тогда
		ИспользоватьИнтервалПланированияЧас = НаборКонстант.ИспользоватьИнтервалПланированияЧас;
	Иначе 
		ИспользоватьИнтервалПланированияЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
	КонецЕсли;
	
	Если ИспользоватьИнтервалПланированияЧас Тогда
		Результат = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		Результат = "ДЛФ=D";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает вариант обособление материалов в производстве.
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации, Неопределено - 
//  ДинамическаяСтруктура - Булево - 
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыОбособленияМатериаловВПроизводстве - вариант обособление материалов в производстве.
//
Функция ВариантОбособленияМатериаловВПроизводстве(
			ХозяйственнаяОперация = Неопределено,
			ДинамическаяСтруктура = Ложь) Экспорт
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5 Тогда
		
		Если Константы.ВариантОбособленияМатериаловПриПриемеВПереработку.Получить() =
										Перечисления.ВариантыОбособленияПриПриемеВПереработку.ДоговорСДавальцем Тогда
			Возврат Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца;
		Иначе
			Возврат Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции;
		КонецЕсли;
		
	Иначе
	
		ВариантОбособления = Константы.ВариантОбособленияМатериаловВПроизводстве.Получить();
		Если ВариантОбособления.Пустая() Тогда
			ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства;
		КонецЕсли;
		
		Если ДинамическаяСтруктура
			И ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства Тогда
			Возврат Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство;
		Иначе
			Возврат ВариантОбособления;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

// Определяет, используются ли серии в производстве версии 2.2.
//
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  *ИспользоватьСерииНоменклатуры - Булево - признак использование серий номенклатуры.
//  *УчитыватьСебестоимостьПоСериям - Булево - признак учета себестоимости по сериям.
//
Функция ИспользованиеСерийВПроизводстве22() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить(
		"ИспользоватьСерииНоменклатуры",
		ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство22"));
	
	Результат.Вставить(
		"УчитыватьСебестоимостьПоСериям",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство22"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказНаПроизводство

// Добавляет на форму списка условное оформление для поля Приоритет.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма.
//  ИмяСписка         - Строка - имя динамического списка.
//  ИмяПоля           - Строка - имя поля Приоритет динамического списка.
//  ИмяЭлемента       - Строка - имя колонки Приоритет динамического списка.
//  ИспользуетсяОтбор - Булево - Истина, если используется отбор и для него необходимо установить условное оформление.
//  ИмяПоляОтбора     - Строка - имя реквизита формы для отбора.
//  ИмяЭлементаОтбора - Строка - имя элемента формы для отбора.
//
Процедура УстановитьУсловноеОформлениеПоляПриоритет(Форма, ИмяСписка, ИмяПоля, ИмяЭлемента, ИспользуетсяОтбор = Ложь, ИмяПоляОтбора = Неопределено, ИмяЭлементаОтбора = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	ПредставлениеЭлементаОформления = НСтр("ru = 'Приоритет';
											|en = 'Priority'");
	Для Индекс = 0 По УсловноеОформление.Элементы.Количество() - 1 Цикл
		Элемент = УсловноеОформление.Элементы[0];
		Если Элемент.Представление = ПредставлениеЭлементаОформления Тогда
			УсловноеОформление.Элементы.Удалить(Элемент);
			Индекс = Индекс - 1;
		Конецесли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Приоритеты.Ссылка  КАК Приоритет,
		|	Приоритеты.Цвет    КАК Цвет
		|ИЗ
		|	Справочник.Приоритеты КАК Приоритеты");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Цвет = Выборка.Цвет;// ХранилищеЗначения
			// колонка
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоля);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет.Получить());
			
			Элемент.Представление = ПредставлениеЭлементаОформления;
			
			// отбор
			Если ИспользуетсяОтбор Тогда
				
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет.Получить());
				
				Элемент.Представление = ПредставлениеЭлементаОформления;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму списка условное оформление поля ДатаПроизводства
//
//  Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//   ИмяСписка - Строка - имя динамического списка.
//   ИмяПоляДата - Строка - условное оформление формы.
//
Процедура УстановитьУсловноеОформлениеПоляДатаПроизводства(Форма, ИмяСписка = "Список", ИмяПоляДата = "Дата") Экспорт
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);

	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", ФорматнаяСтрокаДляДатыГрафикаПроизводства());
	
КонецПроцедуры

// Добавляет на форму списка условное оформление
//
//  Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//   ИмяСписка - Строка - имя динамического списка.
//
Процедура УстановитьУсловноеОформлениеСпискаПоСтатусуЗаказа(Форма, ИмяСписка = "Список") Экспорт

	// Оформление заказа в статусе "Формируется"
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытого заказа
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры
#КонецОбласти

#Область Этап

// Структура заполнения данных при изменении статуса
//
// Параметры:
//  Объект                  - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура - этап.
//  ПлановаяДатаПоступления - Дата - плановая дата поступления изделий.
// 
// Возвращаемое значение:
//   - Структура - данные заполнения.
//
Функция ДанныеЗаполненияПриИзмененииСтатуса(Объект, Знач ПлановаяДатаПоступления = Неопределено) Экспорт
	
	Результат = Новый Структура("ДатаСобытия,ПлановаяДатаПоступления");
	
	Если ПлановаяДатаПоступления <> Неопределено Тогда
		Результат.ПлановаяДатаПоступления = ПлановаяДатаПоступления;
	Иначе
		Результат.ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Объект.Ссылка);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Выполняет необходимые действия с объектом при изменении отметки выполнения этапа производства.
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап
//  ДанныеЗаполнения - Структура - см. метод ДанныеЗаполненияПриИзмененииСтатуса().
// 
// Возвращаемое значение:
//  Строка - содержит список реквизитов, которые были изменены при изменении отметки выполнения.
//
Функция ЗаполнитьРеквизитыЭтапаПриИзмененииОтметкиВыполнения(Объект, ДанныеЗаполнения = Неопределено) Экспорт
	
	СтатусФормируется = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	СтатусСформирован = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
	СтатусКВыполнению = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
	СтатусНачат       = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	СтатусЗавершен    = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	НачатоВыполнение    = (Объект.ФактическоеНачалоЭтапа <> '000101010000');
	ЗавершеноВыполнение = (Объект.ФактическоеОкончаниеЭтапа <> '000101010000');
	
	ИзмененныеРеквизиты = "Статус";
	
	Если ЗавершеноВыполнение Тогда
		
		Объект.Статус = СтатусЗавершен;
		
	ИначеЕсли НачатоВыполнение 
		И Объект.Статус = СтатусЗавершен Тогда
		
		Объект.Статус = СтатусНачат;
		
	ИначеЕсли НачатоВыполнение 
		И (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению) Тогда
		
		Объект.Статус = СтатусНачат;
		
	ИначеЕсли НЕ НачатоВыполнение
		И (Объект.Статус = СтатусНачат
			ИЛИ Объект.Статус = СтатусЗавершен) Тогда
		
		Объект.Статус = СтатусКВыполнению;
		
	КонецЕсли;
	
	ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения, ИзмененныеРеквизиты);
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

// Выполняет действия необходимые при изменения статуса документа
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап
//  СтатусДоИзменения - ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2 - статус до изменений
//  ДанныеЗаполнения - Структура - см. метод ДанныеЗаполненияПриИзмененииСтатуса().
// 
// Возвращаемое значение:
//  Строка - содержит список реквизитов, которые были изменены при смене статуса.
//
Функция ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(Объект, СтатусДоИзменения, ДанныеЗаполнения = Неопределено) Экспорт
	
	СтатусНачат       = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	СтатусЗавершен    = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	ИзмененныеРеквизиты = "";
	
	ДатаСобытия = Неопределено;
	Если ДанныеЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения.Свойство("ДатаСобытия", ДатаСобытия);
	КонецЕсли;
	
	Если Объект.Статус <> СтатусДоИзменения Тогда
		
		ИзмененныеРеквизиты = "Статус";
		
		НачатоВыполнение =    (Объект.Статус = СтатусНачат ИЛИ Объект.Статус = СтатусЗавершен);
		ЗавершеноВыполнение = (Объект.Статус = СтатусЗавершен);
		
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ФактическоеНачалоЭтапа,
													 |ФактическоеОкончаниеЭтапа,
													 |НачатоВыполнениеЭтапа,
													 |ЗавершеноВыполнениеЭтапа,
													 |Выполнено";
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					НачатоВыполнение, 
					Объект.ФактическоеНачалоЭтапа,
					ДатаСобытия);
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ЗавершеноВыполнение, 
					Объект.ФактическоеОкончаниеЭтапа,
					ДатаСобытия,
					ЗавершеноВыполнение);
		
		ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения, ИзмененныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

// Возвращает параметры для открытия формы Документ.ЭтапПроизводства2_2.Форма.ФормаРучногоРазмещенияВГрафике.
//
// Параметры:
//  Объект					 - ДокументОбъект.ЭтапПроизводства2_2 - этап производства
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - параметры формы ручного размещения этапа в графике.
//
Функция ПараметрыФормыРучногоРазмещенияЭтапаВГрафике(Объект, УникальныйИдентификатор) Экспорт

	ПараметрыФормы = Новый Структура;
	
	// Данные этапа
	
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("Статус", Объект.Статус);
	ПараметрыФормы.Вставить("Распоряжение", Объект.Распоряжение);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	// Данные графика производства
	
	ПараметрыФормы.Вставить("РучноеРазмещениеВГрафике", Объект.РучноеРазмещениеВГрафике);
	ПараметрыФормы.Вставить("ГрафикПроизводства");
	
	// Занятость видов рабочих центров
	
	АдресНормативы = "";
	АдресСтруктураЗанятости = "";
	
	Если Объект.РучноеРазмещениеВГрафике
		ИЛИ Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
		
		// Нормативы
		
		ВидыРабочихЦентров = ИспользуемыеВидыРабочихЦентров(Объект);
		
		АдресНормативы = ПоместитьВоВременноеХранилище(ВидыРабочихЦентров, УникальныйИдентификатор);
		
		// Занятость видов рабочих центров
		
		Если Объект.РучноеРазмещениеВГрафике Тогда
			
			ЗанятоЭтапом = Объект.ЗанятостьВидовРабочихЦентров.Выгрузить();
			
			МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ЗанятоЭтапом, "ВидРабочегоЦентра");
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ЗанятоЭтапом = РегистрыНакопления.ДоступностьВидовРабочихЦентров.ЗанятоЭтапом(Объект.Ссылка);
			
			Если ЗанятоЭтапом.Количество() > 0 Тогда
				МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ЗанятоЭтапом, "ВидРабочегоЦентра");
			Иначе
				МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ВидыРабочихЦентров, "ВидРабочегоЦентра");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗанятоЭтапом.Свернуть("ВидРабочегоЦентра, ДатаИнтервала", "Количество");
		ЗанятоЭтапом.Индексы.Добавить("ВидРабочегоЦентра, ДатаИнтервала");
		
		СтруктураЗанятости = Новый Структура("
				|ЗанятоЭтапом, МассивВРЦ",
				ЗанятоЭтапом,
				МассивВРЦ);
			
		АдресСтруктураЗанятости = ПоместитьВоВременноеХранилище(СтруктураЗанятости, УникальныйИдентификатор)
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресНормативы", АдресНормативы);
	ПараметрыФормы.Вставить("АдресСтруктураЗанятости", АдресСтруктураЗанятости);
	
	Возврат ПараметрыФормы;

КонецФункции

// Формирует представление этапа, используется для оформления полей в СКД
//
// Параметры:
//  Номер				 - 	Строка - номер
//  НаименованиеЭтапа	 - 	Строка - наименование
// 
// Возвращаемое значение:
//  Строка - представление этапа
//
Функция ПредставлениеЭтапа(Номер, НаименованиеЭтапа) Экспорт
	
	Возврат СтрШаблон("%1, %2", Номер, НаименованиеЭтапа);
	
КонецФункции

#КонецОбласти

#Область График

// Инициирует планирование графика производства.
//
// Параметры:
//  НастройкиПланирования - Структура - настройки планирования графика.
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище,
//		по которому надо поместить результаты планирования.
//
Процедура ПланироватьИЗаписатьГрафикВФоне(НастройкиПланирования, АдресХранилища) Экспорт
	
	Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьИЗаписатьГрафикВФоне(
		НастройкиПланирования, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет наличие изменений в табличной части документа.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект	 - проверяемый документ
//  ДанныеДоИзменения	 - Структура		 - структура, содержащая данные документа до изменения
//  ИмяТаблицы			 - Строка			 - имя проверяемой таблицы
//  Реквизиты			 - Массив			 - массив проверяемых реквизитов.
// 
// Возвращаемое значение:
//   - Булево - признак наличия изменений в табличной части.
//
Функция ИзмененаТабличнаяЧастьДокумента(ДокументОбъект, ДанныеДоИзменения, ИмяТаблицы, Реквизиты = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ТаблицаДоИзменения = ДанныеДоИзменения[ИмяТаблицы];// ТаблицаЗначений -
	
	Если Реквизиты = Неопределено Тогда
		
		Реквизиты = Новый Массив;
		Для каждого Колонка Из ТаблицаДоИзменения.Колонки Цикл
			Реквизиты.Добавить(Колонка.Имя);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаДоИзменения.Количество() <> ДокументОбъект[ИмяТаблицы].Количество() Тогда
		
		Результат = Истина;
		
	Иначе
		
		Для Индекс = 0 По ТаблицаДоИзменения.Количество()-1 Цикл
			
			СтрокаДоИзменения = ТаблицаДоИзменения[Индекс];
			СтрокаПослеИзменения = ДокументОбъект[ИмяТаблицы][Индекс];
			
			Для каждого Реквизит Из Реквизиты Цикл
				Если СтрокаДоИзменения[Реквизит] <> СтрокаПослеИзменения[Реквизит] Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет корректность заполнения количества в табличной части
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъектИмяОбработки - объект, который нужно проверить
//  ИмяТЧ - Строка - имя проверяемой табличной части
//  МассивНепроверяемыхРеквизитов - Массив - реквизиты, которые необходимо
//		исключить из стандартной процедуры проверки заполнения.
//  Отказ - Булево - флаг отказа от записи объекта (выполнения заданного действия).
//
Процедура ПроверитьЗаполнениеКоличестваВТЧ(Объект, ИмяТЧ, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	ПутьКДанным = "Объект";
	
	ТабличнаяЧасть = Объект[ИмяТЧ]; // ДокументТабличнаяЧасть.ПроизводственнаяОперация2_2.МатериалыИРаботы, ДокументТабличнаяЧасть.ПроизводственнаяОперация2_2.ВыходныеИзделия - 
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".Количество");
	
	ПредставлениеТЧ                          = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаКоличествоУпаковок = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.КоличествоУпаковок.Синоним;
	
	ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';
									|en = 'Column ""%ПредставлениеКолонки%"" in line %НомерСтроки% of the ""%ПредставлениеТЧ%"" list is not filled in'");
	ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';
								|en = 'Zero quantity is detected when converted to storage unit in line %НомерСтроки% of list ""%ПредставлениеТЧ%""'");
	ШаблонОшибкаПересчета = СтрЗаменить(ШаблонОшибкаПересчета, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	
	Для Каждого СтрокаТаб Из ТабличнаяЧасть Цикл
		
		Если СтрокаТаб.Количество = 0 
			И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПутьКДанным,Отказ);
			
		ИначеЕсли СтрокаТаб.Количество = 0 Или СтрокаТаб.КоличествоУпаковок = 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковок);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПутьКДанным,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения служебных констант ИспользоватьСерииНоменклатурыПроизводство22
//	и УчитыватьСебестоимостьПоСериямПроизводство22 по данным видов номенклатуры и политик учета серий.
//
Процедура НастроитьИспользованиеСерийВПроизводстве22() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыНоменклатуры.ИспользоватьСерии) КАК ИспользоватьСерииНоменклатурыПроизводство22,
		|	МАКСИМУМ(ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)) КАК УчитыватьСебестоимостьПоСериямПроизводство22
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыНоменклатуры.ИспользоватьСерии) ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Константы.ИспользоватьСерииНоменклатурыПроизводство22 КАК ИспользоватьСерииНоменклатурыПроизводство22,
		|	Константы.УчитыватьСебестоимостьПоСериямПроизводство22 КАК УчитыватьСебестоимостьПоСериямПроизводство22
		|ИЗ
		|	Константы КАК Константы");
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьСерииНоменклатурыПроизводство22");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.УчитыватьСебестоимостьПоСериямПроизводство22");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			
			НовыеЗначения = МассивРезультатов[0].Выбрать();
			НовыеЗначения.Следующий();
		
			СтарыеЗначения = МассивРезультатов[1].Выбрать();
			СтарыеЗначения.Следующий();
				
			Если НовыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22
				<> СтарыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22 Тогда
				
				Константы.ИспользоватьСерииНоменклатурыПроизводство22.Установить(
					НовыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22);
				
			КонецЕсли;
			
			Если НовыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22
				<> СтарыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22 Тогда
				
				Константы.УчитыватьСебестоимостьПоСериямПроизводство22.Установить(
					НовыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Шаблон = НСтр("ru = 'Не удалось установить значение константы ""Использовать серии номенклатуры производство 2.2"" по причине: %1';
						|en = 'Cannot set value of the ""Use item batch production 2.2"" constant. Reason: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка константы ""Использовать серии номенклатуры производство 2.2""';
				|en = 'Set the ""Use item batch production 2.2"" constant'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы.ИспользоватьСерииНоменклатурыПроизводство22,
			,
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

//++ НЕ УТКА
#Область ПланированиеПроизводстваПродукцииБезСпецификаций

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ПланированиеПроизводстваПродукцииБезСпецификаций(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПланированиеПроизводстваПродукцииБезСпецификаций);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УправлениеПроизводством.Оформление_ПланированияПроизводстваПродукцииБезСпецификаций");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УправлениеПроизводством.Использование_ПланированияПроизводстваПродукцииБезСпецификаций");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ЗаказНаПроизводство2_2.Формы.Очередь.ПолноеИмя());
	СтруктураОтборов = Новый Структура();
	СтруктураОтборов.Вставить("ТребуетсяПроверитьЭтапы", Истина);
	СтруктураОтборов.Вставить("ТребуетсяСформироватьЭтапы", Истина);
	СтруктураОтборов.Вставить("ТипПроизводственногоПроцесса", Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций);
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("СтруктураОтборов", СтруктураОтборов);
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ПроверкаЗакрытияМесяца", Истина);
КонецПроцедуры

// Обработчики этапа.

// Процедура определяет необходимость выполнения этапа.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Использование_ПланированияПроизводстваПродукцииБезСпецификаций(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Routing operation accounting is not kept'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат;
		
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется управление производством (версия 2.2)';
				|en = 'Production management, version 2.2 is not used'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	Запрос.Текст = Документы.ЗаказНаПроизводство2_2.ТекстЗапросаВТНезапланированнаяПродукцияЗаказа();
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.НезапланированнаяПродукцияБезСпецификаций = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Весь объем производства продукции по заказам без спецификаций запланировано, либо планирование не требуется.';
				|en = 'The whole volume of production by orders without bills of materials is planned or planning is not required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет оформление этапа.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Оформление_ПланированияПроизводстваПродукцииБезСпецификаций(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Запланировать';
															|en = 'To plan'");
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ПланированияПроизводстваПродукцииБезСпецификаций(ТаблицаПроверок) Экспорт
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НезапланированнаяПродукцияБезСпецификаций",
		Перечисления.ОперацииЗакрытияМесяца.ПланированиеПроизводстваПродукцииБезСпецификаций,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"УправлениеПроизводством.ПроверкаНеобходимостиПланированияПроизводстваПродукцииБезСпецификаций");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Планирование производства продукции без спецификаций.';
			|en = 'Plan production of manufactured products without BOMs.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Если по заказу на производство без спецификаций произведена часть продукции, то производство оставшейся части должно быть запланировано в полном объеме, либо отменено.';
			|en = 'If some products are manufactured by production order without bills of materials, the rest of them should be planned for production fully or canceled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
КонецПроцедуры

// Процедура проверяет наличие ошибок при выполнении этапа и регистрирует их в ИБ.
//
// Параметры:
//  ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНеобходимостиПланированияПроизводстваПродукцииБезСпецификаций(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация",			НСтр("ru = 'Организация';
														|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ЗаказНаПроизводство",	НСтр("ru = 'Заказ на производство';
														|en = 'Production order'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Номенклатура",		НСтр("ru = 'Номенклатура';
													|en = 'Items'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Характеристика",		НСтр("ru = 'Характеристика';
														|en = 'Variant'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Назначение",			НСтр("ru = 'Назначение';
														|en = 'Assignment'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ТекстШаблонОшибки =
		НСтр("ru = 'Обнаружены заказы на производство без спецификаций, по которым произведена часть продукции, а производство оставшейся части не запланировано. Организация ""%1"", период %2';
			|en = 'Production orders are found without bills of materials by which some products were manufactured and manufacturing of the rest of the products is not planned. Company %1, period %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"НезапланированнаяПродукцияБезСпецификаций",
		ТекстШаблонОшибки,
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#КонецОбласти

#Область Прочее

Функция ДанныеЗаполненияНовойПартииПроизводства(Распоряжение, НазначениеПродукция) Экспорт
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Документ", "Ссылка");
	ИменаРеквизитов.Вставить("Организация");
	ИменаРеквизитов.Вставить("НаправлениеДеятельности");
	ИменаРеквизитов.Вставить("ВидДеятельностиНДС", "ЗаказПодДеятельность");
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, ИменаРеквизитов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Вставить("Назначение", НазначениеПродукция);
	
	Если ЗначениеЗаполнено(НазначениеПродукция) Тогда
		НаправлениеДеятельности = УправлениеПроизводствомПовтИсп.НаправлениеДеятельностиНазначенияПродукции(НазначениеПродукция);
		Результат.НаправлениеДеятельности = НаправлениеДеятельности;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаказНаПроизводство

// Параметры:
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - 
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений
//
Функция ДобавитьКомандуСоздатьОбеспечивающийЗаказ(КомандыСоздатьНаОсновании) Экспорт
	
	//++ Устарело_Производство21
	Если ПроизводствоСервер.ИспользуетсяПроизводство22() Тогда
	//-- Устарело_Производство21	
		МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство2_2;
		ИмяДокумента = "ЗаказНаПроизводство2_2";
	//++ Устарело_Производство21	
	Иначе
		МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство;
		ИмяДокумента = "ЗаказНаПроизводство";
	КонецЕсли;
	//-- Устарело_Производство21
	
	Если ПравоДоступа("Добавление", МенеджерОбъекта) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьОбеспечивающийЗаказ";
		КомандаСоздатьНаОсновании.Менеджер =  МенеджерОбъекта.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МенеджерОбъекта);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
		ПараметрыСоздания = ОбеспечениеВДокументахСервер.ПараметрыСозданияОбеспечивающегоЗаказа(
			КомандаСоздатьНаОсновании.ДополнительныеПараметры);
		ПараметрыСоздания.ИмяМенеджераДокумента = ИмяДокумента;
		ПараметрыСоздания.ИмяФормы = "Документ." + ИмяДокумента + ".ФормаОбъекта";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Этап

#Область ВыходныеИзделия

Процедура ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(ТабличнаяЧасть, СтрокиЗаполнения = Неопределено) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть,
		СтруктураДействий,
		СтрокиЗаполнения);
	
	ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(ТабличнаяЧасть, "Получатель",, СтрокиЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

Процедура ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(Форма, ТабличнаяЧасть, СтрокиЗаполнения = Неопределено) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть,
		СтруктураДействий,
		СтрокиЗаполнения);
		
	ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(ТабличнаяЧасть, "Склад",, СтрокиЗаполнения);
	
	ПараметрыДокумента = Новый Структура("Форма,Коллекция", Форма, ТабличнаяЧасть);
	ОбеспечениеВДокументахСервер.ЗаполнитьСлужебныеРеквизитыФормыДокумента(ПараметрыДокумента);
		
КонецПроцедуры

#КонецОбласти

#Область Нормативы

Функция ПолучитьНормативы(Нормативы, МассивДанных, СтруктураПоиска, ЕстьУпаковки = Ложь) Экспорт
	
	Результат = ПроизводствоСервер.СоздатьМассив(МассивДанных.Количество(), 0);
	
	Если ЗначениеЗаполнено(Нормативы) Тогда
		
		Если ЕстьУпаковки Тогда
			
			ДанныеСтрокСУпаковками = Новый Массив;
			СоответствиеСтрокСУпаковками = Новый Соответствие;
			Индекс = 0;
			Для Х = 0 По МассивДанных.ВГраница() Цикл
				ДанныеСтроки = МассивДанных[Х];
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
					ИЛИ ДанныеСтроки.ХарактеристикиИспользуются И НЕ ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
				СписокСтрок = Нормативы.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрок.Количество() <> 0 Тогда
					
					Для каждого Строка Из СписокСтрок Цикл
						Результат[Х] = Результат[Х] + Строка.КоличествоУпаковок
							* Строка.ДанныеУпаковки.Числитель / Строка.ДанныеУпаковки.Знаменатель;
					КонецЦикла;

					Если ЗначениеЗаполнено(ДанныеСтроки.Упаковка) Тогда
						ДанныеСтрокСУпаковками.Добавить(ДанныеСтроки);
						СоответствиеСтрокСУпаковками.Вставить(Индекс, Х);
						Индекс = Индекс + 1;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДанныеСтрокСУпаковками.Количество() <> 0 Тогда
				КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(ДанныеСтрокСУпаковками);
				Для Сч = 0 По ДанныеСтрокСУпаковками.ВГраница() Цикл
					Х = СоответствиеСтрокСУпаковками.Получить(Сч);
					ТекущиеДанные = МассивДанных[Х];
					Коэффициент = КоэффициентыУпаковок.Получить(ТекущиеДанные.Номенклатура).Получить(ТекущиеДанные.Упаковка);
					Результат[Х] = Результат[Х] / Коэффициент;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Для Х = 0 По МассивДанных.ВГраница() Цикл
				ДанныеСтроки = МассивДанных[Х];
				
				ЗначениеНеЗаполнено = Ложь;
				Для каждого КлючИЗначение Из СтруктураПоиска Цикл
					Если ЗначениеЗаполнено(КлючИЗначение.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ЗначениеНеЗаполнено = Истина;
					Прервать;
				КонецЦикла;
				Если ЗначениеНеЗаполнено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
				СписокСтрок = Нормативы.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрок.Количество() <> 0 Тогда
					Результат[Х] = СписокСтрок[0].Количество;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Трудозатраты

// Информация о месте работы исполнителя.
// 
// Параметры:
//  Исполнитель - ОпределяемыйТип.ИсполнительРабот - Исполнитель
// 
// Возвращаемое значение:
//  Структура - Информация о месте работы исполнителя:
// * Подразделение - СправочникСсылка.СтруктураПредприятия
// * Организация - СправочникСсылка.Организации
Функция ИнформацияОМестеРаботыИсполнителя(Исполнитель) Экспорт
	
	ИнформацияОМестеРаботы = Новый Структура("Подразделение,Организация",
		Справочники.СтруктураПредприятия.ПустаяСсылка(),
		Справочники.Организации.ПустаяСсылка());
	
	ТипИсполнителя = ТипЗнч(Исполнитель);
	
	Если ТипИсполнителя = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		// в текущей конфигурации получение информации о месте работы не предусмотрено

//++ Локализация
	ИначеЕсли ТипИсполнителя = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДляПодбора.МестоВСтруктуреПредприятия КАК Подразделение,
		|	ДанныеДляПодбора.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбора
		|ГДЕ
		|	ДанныеДляПодбора.Сотрудник = &Исполнитель
		|	И ДанныеДляПодбора.Начало <= &ТекущаяДата
		|	И ДанныеДляПодбора.Окончание >= &ТекущаяДата");
		Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ИнформацияОМестеРаботы, Выборка);
//-- Локализация

	ИначеЕсли ТипИсполнителя = Тип("СправочникСсылка.Бригады") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Бригады.Подразделение КАК Подразделение,
		|	Бригады.Организация КАК Организация
		|ИЗ
		|	Справочник.Бригады КАК Бригады
		|ГДЕ
		|	Бригады.Ссылка = &Исполнитель");
		Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ИнформацияОМестеРаботы, Выборка);		
	КонецЕсли;
	
	Возврат ИнформацияОМестеРаботы;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОбновитьПризнакТребуетсяЗаполнитьПолеЭтапПотребитель(Форма, СписокЗаказов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|ГДЕ
	|	Заказы.Ссылка В (&СписокЗаказов)
	|	И Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
	|");
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Форма.ТребуетсяЗаполнитьПолеЭтапПотребитель = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// Описывает служебные данные которые используются при редактировании этапа
//
// Параметры:
//  Режим	 - Строка	 - режим редактирования этапа (варианты: Объект, Обработка).
// 
// Возвращаемое значение:
//  Структура - параметры редактирования этапа.
//
Функция ПараметрыРедактированияЭтапа(Режим) Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("Режим", Режим);
	Результат.Вставить("ЭтоЗаказПереработчику", Ложь);
	
	Результат.Вставить("ИмяРеквизитаОбъект", "Объект");
	Результат.Вставить("ИмяРеквизитаСсылка", "Ссылка");
	
	Результат.Вставить("ИмяРеквизитаПараметрыУказанияСерий", "ПараметрыУказанияСерий");
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьНаправлениеВыпускаВТЧ(КоллекцияСтрок) Экспорт
	
	Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
		
		Если ДанныеСтроки.СписатьНаРасходы Тогда
			ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		ИначеЕсли ДанныеСтроки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		Иначе
			ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.СтатьяРасходов) Тогда
			ДанныеСтроки.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения = Неопределено, ИзмененныеРеквизиты = "")
	СтатусФормируется = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	СтатусСформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	СтатусКВыполнению = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	СтатусНачат       = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");
	СтатусЗавершен    = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");
	
	ВсеКоличествоВыполнено = Ложь;
	
	Если Объект.Статус = СтатусЗавершен Тогда
		
		Если Объект.ПроизводствоНаСтороне
			ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
			ВсеКоличествоВыполнено = Истина;
			
		Иначе
			
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ПартииПроизводства.ОсновноеИзделиеНоменклатура    КАК Номенклатура,
				|	ПартииПроизводства.ОсновноеИзделиеХарактеристика  КАК Характеристика,
				|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПлан, 1) КАК КоэффициентПлан,
				|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиФакт, 1) КАК КоэффициентФакт
				|ИЗ
				|	Справочник.ПартииПроизводства КАК ПартииПроизводства
				|ГДЕ
				|	ПартииПроизводства.Ссылка = &ПартияПроизводства";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ТекстЗапросаКоэффициентУпаковкиПлан",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ВЫРАЗИТЬ(&УпаковкаПлан КАК Справочник.УпаковкиЕдиницыИзмерения)",
					"ПартииПроизводства.ОсновноеИзделиеНоменклатура"));
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ТекстЗапросаКоэффициентУпаковкиФакт",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ВЫРАЗИТЬ(&УпаковкаФакт КАК Справочник.УпаковкиЕдиницыИзмерения)",
					"ПартииПроизводства.ОсновноеИзделиеНоменклатура"));
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
			Запрос.УстановитьПараметр("УпаковкаПлан", Объект.УпаковкаПлан);
			Запрос.УстановитьПараметр("УпаковкаФакт", Объект.УпаковкаФакт);
			
			ИзделиеПартии = Запрос.Выполнить().Выбрать();
			ИзделиеПартии = ?(ИзделиеПартии.Следующий(), ИзделиеПартии, Неопределено);
			
			// Заполнение факта по выпуску
			Если Объект.КоличествоУпаковокФакт = 0
				И Объект.ВыходныеИзделия.Количество() <> 0
				И ИзделиеПартии <> Неопределено Тогда
				
				КоличествоУпаковок = 0;
				Количество = 0;
				Упаковка = Объект.УпаковкаФакт;
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", ИзделиеПартии.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", ИзделиеПартии.Характеристика);
				СтруктураПоиска.Вставить("Произведено", Истина);
				СтруктураПоиска.Вставить("Отменено", Ложь);
				
				Для каждого Строка Из Объект.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
					Если Упаковка <> Неопределено Тогда
						Если Упаковка = Строка.Упаковка Тогда
							КоличествоУпаковок = КоличествоУпаковок + Строка.КоличествоУпаковок;
						Иначе
							Упаковка = Неопределено;
						КонецЕсли;
					КонецЕсли;
					Количество = Количество + Строка.Количество;
				КонецЦикла;
				
				Если Упаковка = Неопределено Тогда
					Объект.КоличествоУпаковокФакт = Количество / ИзделиеПартии.КоэффициентФакт;
				Иначе
					Объект.КоличествоУпаковокФакт = КоличествоУпаковок;
				КонецЕсли;
				
				Если Объект.КоличествоУпаковокФакт <> 0 Тогда
					ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",КоличествоУпаковокФакт";
				КонецЕсли;
				
			КонецЕсли;
			
			// Установка факт = план
			Если Объект.КоличествоУпаковокФакт = 0
					И Объект.КоличествоУпаковокОтменено = 0 Тогда
				Объект.КоличествоУпаковокФакт = Объект.КоличествоУпаковокПлан;
				Объект.УпаковкаФакт = Объект.УпаковкаПлан;
				ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",КоличествоУпаковокФакт,УпаковкаФакт";
			КонецЕсли;
			
			// Расчет ВсеКоличествоВыполнено
			Если Объект.КоличествоУпаковокОтменено = 0
				И ИзделиеПартии <> Неопределено Тогда
				Если Объект.УпаковкаФакт = Объект.УпаковкаПлан Тогда
					ВсеКоличествоВыполнено = Объект.КоличествоУпаковокФакт >= Объект.КоличествоУпаковокПлан;
				Иначе
					ВсеКоличествоВыполнено = (Объект.КоличествоУпаковокФакт * ИзделиеПартии.КоэффициентФакт)
						>= (Объект.КоличествоУпаковокПлан * ИзделиеПартии.КоэффициентПлан);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли Объект.Статус <> СтатусНачат Тогда
		
		Объект.КоличествоУпаковокФакт = 0;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",КоличествоУпаковокФакт";
		
	КонецЕсли;
	
	ПлановаяДатаПоступления = '00010101';
	
	Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("ПлановаяДатаПоступления") И ЗначениеЗаполнено(ДанныеЗаполнения.ПлановаяДатаПоступления) Тогда
		ПлановаяДатаПоступления = ДанныеЗаполнения.ПлановаяДатаПоступления;
	КонецЕсли;
	
	ИменаТаблицИзделия = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
	
	// Выходные изделия и трудозатраты
	Если (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению
			ИЛИ Объект.Статус = СтатусЗавершен)
		И НЕ Объект.ПроизводствоНаСтороне Тогда
		
		Отметка = (Объект.Статус = СтатусЗавершен);
		
		УстановитьОтметкуПроизведено = Истина;
		
		Если Объект.Статус = СтатусЗавершен Тогда
			
			Если ВсеКоличествоВыполнено Тогда
				
				СтруктураОтбора = Новый Структура("Произведено", Истина);
				Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
				
					Если Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора).ВГраница() <> -1 Тогда
						УстановитьОтметкуПроизведено = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				УстановитьОтметкуПроизведено = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если УстановитьОтметкуПроизведено Тогда
			
			ДатаПроизводства = Неопределено;

			Если Отметка Тогда
				ДатаПроизводства = ТекущаяДатаСеанса();
			КонецЕсли;    
			
			Если Отметка 
				И Объект.ПроизводствоОднойДатой Тогда
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Истина,
							Объект.ДатаПроизводства, ДатаПроизводства, Истина);
				
			КонецЕсли;
						
			Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
				
				Для Каждого Строка Из Объект[ИмяТаблицы] Цикл
					
					Если (ИмяТаблицы = "ВыходныеИзделия"
							ИЛИ ИмяТаблицы = "ПобочныеИзделия")
							И Строка.Отменено Тогда
						Продолжить;
					КонецЕсли;
					
					Строка.Произведено = Отметка;
					
					Если Отметка Тогда
						УправлениеПроизводством.УстановитьДатуПоОтметке(
									Истина, 
									Строка.ДатаПроизводства, ДатаПроизводства, Истина);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Документы.ЭтапПроизводства2_2.ЗаполнитьЦеныПоВидуЦен(Объект);
			
		КонецЕсли;
		
		// Трудозатраты
		УстановитьОтметкуВыполнено = Истина;
		
		Если Объект.Статус = СтатусЗавершен Тогда
			
			Если ВсеКоличествоВыполнено Тогда
				СтруктураОтбора = Новый Структура("Выполнено", Истина);
				Если Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора).ВГраница() <> -1 Тогда
					УстановитьОтметкуВыполнено = Ложь;
				КонецЕсли;
			Иначе
				УстановитьОтметкуВыполнено = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если УстановитьОтметкуВыполнено
			И Документы.ЭтапПроизводства2_2.ИспользуетсяОтметкаВыполненныхТрудозатрат(Объект) Тогда
			
			Для Каждого Строка Из Объект.Трудозатраты Цикл
				
				Если Строка.Отменено Тогда
					Продолжить;
				КонецЕсли;
				
				Строка.Выполнено = Отметка;
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Отметка, 
							Строка.ДатаВыполнения,, Истина);
							
				Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
					Строка.Исполнитель = Объект.Исполнитель;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = СтатусНачат Тогда
		
		Если Объект.ПроизводствоОднойДатой Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
						Истина, 
						Объект.ДатаПроизводства, ПлановаяДатаПоступления);
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Произведено", Ложь);
		
		Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
			
			Для Каждого Строка Из Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора) Цикл
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Истина, 
							Строка.ДатаПроизводства, ПлановаяДатаПоступления);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Обеспечение, расход и экономия материалов
	Если НЕ Объект.ПроизводствоНаСтороне Тогда
		
		Если (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению) Тогда
		
			Документы.ЭтапПроизводства2_2.ОтменитьДействиеОтгрузить(Объект);
			
			Если Объект.Статус = СтатусФормируется Тогда
				Документы.ЭтапПроизводства2_2.ОтменитьДействиеРезервировать(Объект);
			КонецЕсли;
			
			Объект.РасходМатериаловИРабот.Очистить();
			
			Объект.ЭкономияМатериалов.Очистить();
			Объект.ЭкономияМатериаловСерии.Очистить();
			
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РасходМатериаловИРабот,ЭкономияМатериалов";
			
		ИначеЕсли Объект.Статус = СтатусЗавершен Тогда
			
			Если Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 0 Тогда
				
				СтрокиКОтгрузке = Новый Массив;
				Для каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
					Если Строка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить
						И НЕ Строка.Отменено Тогда
						СтрокиКОтгрузке.Добавить(Строка);
					КонецЕсли;
				КонецЦикла;
				
				ТребуетсяЗаполнитьОбеспечение = (СтрокиКОтгрузке.Количество() <> 0);
				
				Если (ТребуетсяЗаполнитьОбеспечение) Тогда
					
					ОтгружатьЧастями = (СтрокиКОтгрузке.Количество() <> Объект.ОбеспечениеМатериаламиИРаботами.Количество());
					Если Объект.НеОтгружатьЧастями Тогда
						Если ОтгружатьЧастями Тогда
							Объект.НеОтгружатьЧастями = Ложь;
							Объект.ДатаОтгрузки = '00010101';
						Иначе
							Объект.ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса());
						КонецЕсли;
					КонецЕсли;
					
					Документы.ЭтапПроизводства2_2.УстановитьДействиеОтгрузить(Объект);
					
				КонецЕсли;
				
				ТребуетсяЗаполнитьРасход = Объект.РасходМатериаловИРабот.Количество() = 0
					И Объект.ЭкономияМатериалов.Количество() = 0
					И ВсеКоличествоВыполнено;
				
				Если ТребуетсяЗаполнитьРасход Тогда
					
					Если Объект.РасходОднойДатой Тогда
						Объект.ДатаРасхода = НачалоДня(ТекущаяДатаСеанса());
					КонецЕсли;
					
					Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект);
					ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РасходМатериаловИРабот";
					
				КонецЕсли;
				
				ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ДатаОтгрузки,НеОтгружатьЧастями,ДатаРасхода,РасходОднойДатой";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// От статуса зависит указание серий
	ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(Объект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	
КонецПроцедуры

Функция ВыполняетсяПакетноеФормированиеЭтапов(Объект) Экспорт
	
	Возврат Объект.ДополнительныеСвойства.Свойство(КлючПакетныйРежимФормированияЭтапов());
	
КонецФункции

Функция КлючПакетныйРежимФормированияЭтапов() Экспорт
	
	Возврат "ПакетныйРежимФормированияЭтапов";
	
КонецФункции

Процедура УстановитьДатуВыполненияТрудозатраты(ТекущиеДанные, ДатаСобытияЗавершение) Экспорт
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(ТекущиеДанные.Выполнено, ТекущиеДанные.ДатаВыполнения, ДатаСобытияЗавершение);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление
 
// Добавляет на форму условное оформление выходных изделий этапа производства.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ИменаЭлементов   - Структура - имена элементов формы.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ИменаЭлементов, ПутиКДанным = Неопределено) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		ИменаЭлементов.НоменклатураЕдиницаИзмерения, 
		ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		ИменаЭлементов.Характеристика,
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		Ложь,
		ИменаЭлементов.Серия,
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий",
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		Форма,
		Ложь,
		ИменаЭлементов.СтатусУказанияСерий,
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		Форма,
		ИменаЭлементов.Назначение,
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры",
		Ложь);
		
	#КонецОбласти
	
	// Дата производства обязательна к заполнению в статусе начат, завершен
	#Область ДатаПроизводства
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ДатаПроизводства);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область Назначение
	
	// Назначение в давальческой схеме, при производстве разбираемого изделия.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.Назначение);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	// Давальческая схема
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ДавальческиеОперации = Новый СписокЗначений;
	//++ Устарело_Переработка24
	ДавальческиеОперации.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
	//-- Устарело_Переработка24
	ДавальческиеОперации.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5);
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ДавальческиеОперации;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Производство и дальнейшая разборка изделия
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", ВРег(ИмяТЧ) <> ВРег("ПобочныеИзделия"));
	
	// Назначение не указывается при списании на расходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.Назначение);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	//++ Устарело_Переработка24
	
	// Признак оформить отчет давальцу отображается только в давальческой схеме 2.4
	#Область ОформитьОтчетДавальцу
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ОформитьОтчетДавальцу);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	//-- Устарело_Переработка24
	
	// Представление поля НаправлениеВыпуска
	#Область НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.НаправлениеВыпуска);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.НаправлениеВыпуска);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To business unit'"));

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.НаправлениеВыпуска);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы';
																|en = 'Expense as'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.НаправлениеВыпуска);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", ВРег(ИмяТЧ) <> ВРег("ВыходныеИзделия"));
	
	#КонецОбласти
	
	// Статья и аналитика только если списываем на расходы, иначе указывается получатель.
	#Область АналитикаРасходов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.СтатьяРасходов);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.АналитикаРасходов);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.АналитикаАктивовПассивов);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ПредставлениеОтраженияОперации);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Представление полей при отмене строк
	#Область ОтменаСтрок
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.Произведено);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.Получатель);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.КоличествоУпаковок);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы[ИмяТЧ],
		ИменаЭлементов.Отменено,
		ИменаЭлементов.ПричинаОтмены);
	
	#КонецОбласти
	
	// Обработать по спецификации
	#Область ОбработатьПоСпецификации
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.Спецификация);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без спецификации>';
																|en = '<without bill of materials>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.Спецификация);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.Спецификация);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ОбработатьПоСпецификации);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// Подразделение-получатель
	УстановитьУсловноеОформлениеПолучатель(Форма, ИмяОбъекта, ИмяТЧ, , ПутиКДанным);
	
КонецПроцедуры

// Добавляет на форму условное оформление назначения выходных изделий этапа производства.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеНазначенияВыходныхИзделийЭтапаПроизводства(Форма, ПутиКДанным = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Назначение обязательно: в давальческой схеме, при производстве разбираемого изделия.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ВыходныеИзделияНазначение"]["Имя"]);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	//++ Устарело_Переработка24
	
	// Давальческая схема
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути("Объект", ПутиКДанным, "ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//-- Устарело_Переработка24
	
	// Производство и дальнейшая разборка изделия
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

// Добавляет на форму условное оформление назначения побочных изделий этапа производства.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеНазначенияПобочныхИзделийЭтапаПроизводства(Форма, ПутиКДанным = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Назначение обязательно: в давальческой схеме, при производстве разбираемого изделия.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ПобочныеИзделияНазначение"]["Имя"]);
	
	// Производство и дальнейшая разборка изделия
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

// Возвращает структуру ключей для указания имен полей таблицы РасходМатериаловИРабот
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//   * НоменклатураЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//   * Серия - СправочникСсылка.СерииНоменклатуры -
//   * СтатьяКалькуляции - СправочникСсылка.СтатьиКалькуляции -
//
Функция ИменаЭлементовРасходМатериаловИРаботЭтапаПроизводства() Экспорт
	
	ИменаЭлементов = Новый Структура;
	ИменаЭлементов.Вставить("НоменклатураЕдиницаИзмерения");
	ИменаЭлементов.Вставить("Характеристика");
	ИменаЭлементов.Вставить("Серия");
	ИменаЭлементов.Вставить("СтатьяКалькуляции");
	
	Возврат ИменаЭлементов;
	
КонецФункции

// Добавляет на форму условное оформление экономии материалов этапа производства.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеЭкономияМатериаловЭтапаПроизводства(Форма, ИмяОбъекта, ПутиКДанным = Неопределено) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		"ЭкономияМатериаловНоменклатураЕдиницаИзмерения",
		ИмяОбъекта + ".ЭкономияМатериалов.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		"ЭкономияМатериаловХарактеристика",
		ИмяОбъекта + ".ЭкономияМатериалов.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		Ложь,
		"ЭкономияМатериаловСерия",
		ИмяОбъекта + ".ЭкономияМатериалов.СтатусУказанияСерий",
		ИмяОбъекта + ".ЭкономияМатериалов.ТипНоменклатуры");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		Форма,
		Ложь,
		"ЭкономияМатериаловСтатусУказанияСерий",
		ИмяОбъекта + ".ЭкономияМатериалов.СтатусУказанияСерий");
	
	#КонецОбласти
	
	// Текст для поля Действия
	#Область Действия
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловДействия");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".ЭкономияМатериалов.Действия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Передать на склад';
																|en = 'Transfer to warehouse'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловДействия");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".ЭкономияМатериалов.Действия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы';
																|en = 'Expense as'"));
	#КонецОбласти
	
	// Статья и аналитика только если списываем на расходы, иначе указывается получатель.
	#Область АналитикаРасходов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловСтатьяРасходов");

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловАналитикаРасходов");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловАналитикаАктивовПассивов");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловПредставлениеОтраженияОперации");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".ЭкономияМатериалов.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Назначение не указывается для тары
	#Область Назначение_МногооборотнаяТара
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловОбособить");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".ЭкономияМатериалов.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловНадписьНазначение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".ЭкономияМатериалов.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется для тары>';
																|en = '<not used for package>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Назначение не указывается при списании на расходы
	#Область Назначение_СписатьНаРасходы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭкономияМатериаловНазначение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".ЭкономияМатериалов.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Подразделение-получатель
	УстановитьУсловноеОформлениеПолучатель(Форма, ИмяОбъекта, "ЭкономияМатериалов",, ПутиКДанным);
	
КонецПроцедуры

// Добавляет на форму условное оформление расхода материалов и работ этапа производства.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта     - Строка - имя объекта.
//  ИмяТЧ          - Строка - имя табличной части.
//  ИменаЭлементов - см. ИменаЭлементовРасходМатериаловИРаботЭтапаПроизводства.
//  ПутиКДанным    - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеРасходМатериаловИРаботЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ИменаЭлементов, ПутиКДанным = Неопределено) Экспорт
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		ИменаЭлементов.НоменклатураЕдиницаИзмерения,
		ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		ИменаЭлементов.Характеристика,
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		"СерииВсегдаВТЧТовары",
		ИменаЭлементов.Серия,
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий",
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	
	#КонецОбласти
	
	ИмяЭлемента = ИменаЭлементов.СтатьяКалькуляции;
	
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеСтатьиКалькуляции(Форма, ИмяОбъекта, ИмяТЧ, ИмяЭлемента, ПутиКДанным);
	
КонецПроцедуры

// Добавляет на форму условное оформление трудозатрат.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ПрефиксЭлементов - Строка - префикс элементов.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеТрудозатраты(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Исполнитель"]["Имя"]);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Выполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Выполнено"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Количество"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы[ПрефиксЭлементов + ИмяТЧ],
		Элементы[ПрефиксЭлементов + ИмяТЧ + "Отменено"]["Имя"],
		Элементы[ПрефиксЭлементов + ИмяТЧ + "ПричинаОтмены"]["Имя"]);
	
	//
	
	ИмяЭлемента = ПрефиксЭлементов + ИмяТЧ + "СтатьяКалькуляции";
	
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеСтатьиКалькуляции(
		Форма, ИмяОбъекта, ИмяТЧ, ИмяЭлемента, ПутиКДанным, Истина);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПолучатель(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено)

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Получатель совпадает с выпускающим подразделением
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Получатель"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Подразделение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Получатель не обязателен к заполнению
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Получатель"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Если Не ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		// Изделия остаются для последующей обработки
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "Получатель"]["Имя"]);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
		
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение  = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ОставитьИзделияУПереработчика");
		Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("ru = '<не требуется>';
																					|en = '<not required>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму условное оформление для полей Цена, Сумма.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ПрефиксЭлементов - Строка - префикс элементов.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеФиксированнойСтоимостиЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт
	
	// Описание:
	// - цена и сумма для побочных изделий обязательна в статусе Начат и Завершен, если продукция выпущена
	// - цена и сумма для побочных изделий доступна, если продукция выпущена или вид цен не заполнен.
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Цена"]["Имя"]);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Сумма"]["Имя"]);
	
	ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Цена"]["Имя"]);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Сумма"]["Имя"]);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПроизводствоУправлениеФормами.ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Добавляет на форму условное оформление для поля ЭтапПотребитель.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ПрефиксЭлементов - Строка - префикс элементов.
//  ПутиКДанным      - Структура, Неопределено - путь к данным.
//
Процедура УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ЭтапПотребитель"]["Имя"]);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ЭтапПотребитель"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗаполнитьПолеЭтапПотребитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ЭтапПотребитель"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗаполнитьПолеЭтапПотребитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Графы

// Возвращает граф этапов производства, представленный в виде списка смежности.
// В возвращаемой таблице вершины хранятся как строки таблицы значений, а ребра - как значение одной из колонок.
//
// Параметры:
//  ДанныеЗаполнения - РезультатЗапроса	 - данные для заполнения графа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений, хранящая вершины и ребра графа, со следующими колонками:
//  * Ссылка          - СправочникСсылка, ДокументСсылка - ссылка на справочник или на документ.
//  * Ребра           - Массив - массив ребер.
//  * КоличествоРебер - Число - количество ребер.
//
Функция Граф(ДанныеЗаполнения = Неопределено) Экспорт
	
	Типы = Новый Массив;
	Типы.Добавить(Справочники.ТипВсеСсылки());
	Типы.Добавить(Документы.ТипВсеСсылки());
	
	Граф = Новый ТаблицаЗначений();
	Граф.Колонки.Добавить("Ссылка",          Новый ОписаниеТипов(Типы));
	Граф.Колонки.Добавить("Ребра",           Новый ОписаниеТипов("Массив"));
	Граф.Колонки.Добавить("КоличествоРебер", Новый ОписаниеТипов("Число"));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("РезультатЗапроса") 
		И НЕ ДанныеЗаполнения.Пустой() Тогда
		
		Вершина = ?(Ложь, Новый Структура("Ссылка"), Неопределено);
		Выборка = ДанныеЗаполнения.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Вершина = Неопределено
				ИЛИ Вершина.Ссылка <> Выборка.Вершина Тогда
				Вершина = ДобавитьВершинуВСписокСмежности(Граф, Выборка.Вершина);
			КонецЕсли;
			
			Если Выборка.СмежнаяВершина <> null Тогда
				ДобавитьСмежнуюВершинуВСписокСмежности(Вершина, Выборка.СмежнаяВершина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Граф.Индексы.Добавить("Ссылка");
	
	Возврат Граф;
	
КонецФункции

// Выполняет поиск циклов в графе, в качестве алгоритма поиска 
//  используется нерекурсивный обход графа в глубину.
//
// Параметры:
//  Граф - см. УправлениеПроизводством.Граф
//  НачалоДуги - ЛюбаяСсылка - вершина (начало дуги, на которой найден цикл).
//  КонецДуги - ЛюбаяСсылка - вершина (конец дуги, на которой найден цикл).
// 
// Возвращаемое значение:
//   - Булево - Истина, если цикл найден.
//
Функция ЕстьЦиклыВГрафе(Граф, НачалоДуги = Неопределено, КонецДуги = Неопределено) Экспорт
	
	Если Граф.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли Граф.Количество() = 1 Тогда
		Вершина   = Граф[0].Ссылка;
		ЕстьЦиклы = Граф[0].Ребра.Найти(Вершина) <> Неопределено;
		Если ЕстьЦиклы Тогда
			НачалоДуги = Вершина;
		КонецЕсли;
		Возврат ЕстьЦиклы;
	КонецЕсли;
	
	Граф.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Число"));
	Граф.Колонки.Добавить("ИндексСмежнойВершины", Новый ОписаниеТипов("Число"));
	Граф.ЗаполнитьЗначения(-1, "ИндексСмежнойВершины");
	
	ЕстьЦиклы = Ложь;
	
	Белый = 0;
	Серый = 1;
	Черный = 2;
	
	Вершина = Граф[0];
	Вершина.Цвет = Серый;
	
	Стек = Новый Массив; // см. УправлениеПроизводством.Граф
	Стек.Добавить(Вершина);
	
	Пока Стек.ВГраница() <> -1 И НЕ ЕстьЦиклы Цикл
		
		Вершина = Стек[0];
		
		Если Вершина.ИндексСмежнойВершины + 1 < Вершина.КоличествоРебер Тогда
			
			Для Индекс = Вершина.ИндексСмежнойВершины + 1 По Вершина.КоличествоРебер - 1 Цикл
				
				Вершина.ИндексСмежнойВершины = Индекс;
				
				СмежнаяВершина = Граф.Найти(Вершина.Ребра[Индекс], "Ссылка");
				
				Если СмежнаяВершина.Цвет = Серый Тогда
					
					ЕстьЦиклы  = Истина;
					НачалоДуги = Вершина.Ссылка;
					КонецДуги  = СмежнаяВершина.Ссылка;
					
					Прервать;
					
				ИначеЕсли СмежнаяВершина.Цвет = Белый Тогда
					
					СмежнаяВершина.Цвет = Серый;
					
					Стек.Вставить(0,СмежнаяВершина);
					
					Прервать;
				
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Вершина.Цвет = Черный;
			
			Стек.Удалить(0);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Граф.Колонки.Удалить("Цвет");
	Граф.Колонки.Удалить("ИндексСмежнойВершины");
	
	Возврат ЕстьЦиклы;
	
КонецФункции

// Возвращает окружение вершины.
//
// Параметры:
//  Вершина - СтрокаТаблицыЗначений - строка таблицы значений, см. описание функции Граф(). Используемые колонки:
//             * Ссылка - СправочникСсылка, ДокументСсылка - ссылка.
//             * Ребра  - Массив - ребра.
// 
// Возвращаемое значение:
//   - Массив - Окружение вершины.
//
Функция НайтиОкружениеВершины(Вершина) Экспорт
	
	Результат = Новый Массив;
	
	// Добавим служебное поле для работы алгоритма
	Вершина.Владелец().Колонки.Добавить("Посещена", Новый ОписаниеТипов("Булево"));
	
	ПоискВГлубину(Вершина, Результат);
	
	// Удалим текущую вершину
	Результат.Удалить(Результат.Найти(Вершина.Ссылка));
	
	// Удалим служебное поле
	Вершина.Владелец().Колонки.Удалить("Посещена");
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск в глубину.
//
// Параметры:
//  Вершина    - СтрокаТаблицыЗначений - строка таблицы значений, см. описание функции Граф(). Используемые колонки:
//                * Ссылка   - СправочникСсылка, ДокументСсылка - ссылка.
//                * Ребра    - Массив - ребра.
//                * Посещена - Булево - признак Посещена.
//  Результат  - Массив - Посещенные вершины.
//
Процедура ПоискВГлубину(Вершина, Результат) Экспорт
	
	Если Вершина.Посещена Тогда
		Возврат;
	КонецЕсли;
	
	Вершина.Посещена = Истина;
	Результат.Добавить(Вершина.Ссылка);
	
	Для Каждого Ребро Из Вершина.Ребра Цикл
		
		СмежнаяВершина = Вершина.Владелец().Найти(Ребро, "Ссылка");
		ПоискВГлубину(СмежнаяВершина, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает направление обхода графа "Вперед"
// 
// Возвращаемое значение:
//   - Число - направление обхода графа "Вперед".
//
Функция НаправлениеОбходаГрафаВперед() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает направление обхода графа "Назад"
// 
// Возвращаемое значение:
//   - Число - направление обхода графа "Назад".
//
Функция НаправлениеОбходаГрафаНазад() Экспорт
	
	Возврат -1;
	
КонецФункции

// Добавить вершину в список смежности
//
// Параметры:
//  Граф   - см. УправлениеПроизводством.Граф
//  Ссылка - ДокументСсылка, СправочникСсылка - ссылка на вершину.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - вершина.
//
Функция ДобавитьВершинуВСписокСмежности(Граф, Ссылка) Экспорт
	
	Вершина = Граф.Добавить();
	Вершина.Ссылка = Ссылка;
	Возврат Вершина;
	
КонецФункции

// Добавить смежную вершину в список смежности
//
// Параметры:
//  Вершина	 - СтрокаТаблицыЗначений			 - вершина
//  Ссылка	 - ДокументСсылка, СправочникСсылка	 - ссылка на смежную вершину.
//
Процедура ДобавитьСмежнуюВершинуВСписокСмежности(Вершина, Ссылка) Экспорт
	
	Вершина.Ребра.Добавить(Ссылка);
	Вершина.КоличествоРебер = Вершина.КоличествоРебер + 1;
	
КонецПроцедуры

// Возвращает вершину графа по переданной ссылке, при необходимости вершина предварительно создается
//
// Параметры:
//  Граф	 - см. Граф
//  Ссылка	 - ДокументСсылка, СправочникСсылка	 - ссылка на объект.
//  
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - вершина.
//
Функция ПолучитьВершинуГрафаПоСсылке(Граф, Ссылка) Экспорт
	
	Вершина = Граф.Найти(Ссылка, "Ссылка");
	Если Вершина = Неопределено Тогда
		
		Вершина = УправлениеПроизводством.ДобавитьВершинуВСписокСмежности(Граф, Ссылка);
		
	КонецЕсли;
	
	Возврат Вершина;
	
КонецФункции

#КонецОбласти

#Область Запросы

Функция ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса) Экспорт
	
	Возврат СтрСоединить(ТекстыЗапроса, "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|");
			
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

// Структура данных изделий этапа производства
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - структура данных.
//
Функция СтруктураДанныхИзделияЭтапа() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Результат.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Результат.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));

	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("Получатель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("ЭтапПотребитель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	Результат.Колонки.Добавить("Упаковка", ОписаниеТипов);
	
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоУпаковок");
	
	Возврат Результат;
	
КонецФункции

// Структура данных этапа производства для проверки заполнения
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПроверятьТЧВыходныеИзделия - Булево - проверять табличную часть
// * ПроверятьТЧПобочныеИзделия - Булево - проверять табличную часть
// * ПроверятьТЧОбеспечениеМатериаламиИРаботами - Булево - проверять табличную часть
// * ПроверятьТЧРасходМатериаловИРабот - Булево - проверять табличную часть
// * ПроверятьТЧЭкономияМатериалов - Булево - проверять табличную часть
// * ПроверятьТЧТрудозатраты - Булево - проверять табличную часть
// * ПроверятьТЧНаборыМатериаловИРабот - Булево - проверять табличную часть
// * Реквизиты - ТаблицаЗначений - таблица реквизитов:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
// * РеквизитыЗаказаПереработчику - Структура - описание интерактивно редактируемого заказа переработчику:
// ** ЗаказПереработчику - ДокументСсылка.ЗаказПереработчику, ДокументСсылка.ЗаказПереработчику2_5 - ссылка на документ.
// ** Статус - ПеречислениеСсылка.СтатусыЗаказовПереработчикам - статус заказа.
// ** Проведен - Булево - флаг проведения.
// * ВыходныеИзделия - ТаблицаЗначений - таблица выходных изделий:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
// * ПобочныеИзделия - ТаблицаЗначений - таблица выходных изделий:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
// * ОбеспечениеМатериаламиИРаботами - ТаблицаЗначений - таблица побочных изделий:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
// * РасходМатериаловИРабот - ТаблицаЗначений - таблица расхода:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
// * ЭкономияМатериалов - ТаблицаЗначений - таблица экономии:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
// * Трудозатраты - ТаблицаЗначений - таблица трудозатрат:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
// * НаборыМатериаловИРабот - ТаблицаЗначений - таблица трудозатрат:
// ** Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ
Функция СтруктураДанныхЭтаповПроизводства() Экспорт
	
	Результат = Новый Структура;
	
	МетаданныеДокумента = Метаданные.Документы.ЭтапПроизводства2_2;
	
	// Шапка
	Реквизиты = Новый ТаблицаЗначений;
	
	Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Реквизиты.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
		Реквизиты.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Результат.Вставить("Реквизиты", Реквизиты);
	
	// Реквизиты интерактивно редактируемого заказа переработчику
	Результат.Вставить("РеквизитыЗаказаПереработчику", Неопределено);
	
	// ТЧ
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ПобочныеИзделия");
	СписокТЧ.Добавить("ОбеспечениеМатериаламиИРаботами");
	СписокТЧ.Добавить("РасходМатериаловИРабот");
	СписокТЧ.Добавить("ЭкономияМатериалов");
	СписокТЧ.Добавить("Трудозатраты");
	СписокТЧ.Добавить("НаборыМатериаловИРабот");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Результат.Вставить("ПроверятьТЧ" + ИмяТЧ, Ложь);
		Результат.Вставить(ИмяТЧ, ТабличнаяЧастьДокументаЭтапПроизводства(ИмяТЧ));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыДокументаЭтапПроизводства() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ЭтапПроизводства2_2;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	
	Для каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
		Реквизиты.Вставить(Реквизит.Имя, Реквизит.Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Реквизиты.Вставить(Реквизит.Имя, Реквизит.Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает таблицу значений со структурой табличной части документа ЭтапПроизводства2_2
//
// Параметры:
//  ИмяТЧ - Строка - имя табличной части документа ЭтапПроизводства2_2
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит:
//   * НомерСтроки - Число - 
//
Функция ТабличнаяЧастьДокументаЭтапПроизводства(ИмяТЧ) Экспорт
	
	ТабличнаяЧасть = Новый ТаблицаЗначений;
	МетаданныеДокумента = Метаданные.Документы.ЭтапПроизводства2_2;
	ОписаниеТипаДокумента = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Для каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].СтандартныеРеквизиты Цикл
		ТабличнаяЧасть.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Для каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
		ТабличнаяЧасть.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	ТабличнаяЧасть.Колонки.Добавить("Ссылка", ОписаниеТипаДокумента);
	Возврат ТабличнаяЧасть;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

//++ Устарело_Переработка24
#Область ПереработкаДавальческогоСырья

// Используется для заполнения флага "Передать давальцу" в производственных документах,
//  отражающих факт производства давальческой продукции.
//
// Параметры:
//  Коллекция - ТабличнаяЧасть, Массив - Табличная часть документа, либо массив строк табличной части документа,
//                                       содержащие реквизит Назначение и реквизит ПередатьДавальцу.
//
Процедура ЗаполнитьФлагПередатьДавальцуПоНазначениюВКоллекции(Коллекция) Экспорт
	
	Назначения = Новый Массив;
	Для Каждого ТекСтрока Из Коллекция Цикл
		Назначения.Добавить(ТекСтрока.Назначение);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Назначения, Справочники.Назначения.ПустаяСсылка());
	
	СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(Назначения);
	
	Для Каждого Строка Из Коллекция Цикл
		
		СвойстваНазначения = СвойстваНазначений.Получить(Строка.Назначение);
		Строка.ПередатьДавальцу = СвойстваНазначения <> Неопределено И СвойстваНазначения.ЭтоДавальческаяПродукция;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
//-- Устарело_Переработка24

//-- НЕ УТКА

//++ Устарело_Производство21
#Область ПереходНаУправлениеПроизводствомВерсии22

Процедура ОтключитьПроизводство21() Экспорт
	
	Константы.ИспользоватьУправлениеПроизводством.Установить(Ложь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ЕстьНезавершенныеОперацииВПроизводстве21() Экспорт
	
	Если КоличествоВыполняющихсяЗаказовНаПроизводство21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоЗаказовМатериаловОжидающихИсполнения21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоРаспоряженийНаОформлениеВыпускаПродукции21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоВыпусковТребующихСписанияЗатрат21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьОстаткиМатериаловИРаботВПроизводстве21() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НезавершенныеПроизводственныеПроцессы21() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КоличествоВыполняющихсяЗаказовНаПроизводство",       КоличествоВыполняющихсяЗаказовНаПроизводство21());
	Результат.Вставить("КоличествоЗаказовМатериаловОжидающихИсполнения",     КоличествоЗаказовМатериаловОжидающихИсполнения21());
	Результат.Вставить("КоличествоРаспоряженийНаОформлениеВыпускаПродукции", КоличествоРаспоряженийНаОформлениеВыпускаПродукции21());
	Результат.Вставить("КоличествоВыпусковТребующихСписанияЗатрат",          КоличествоВыпусковТребующихСписанияЗатрат21());
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоВыполняющихсяЗаказовНаПроизводство21()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказНаПроизводство.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Проведен
		|	И ЗаказНаПроизводство.Статус <> &СтатусЗавершен");
		
	Запрос.УстановитьПараметр("СтатусЗавершен", Перечисления.СтатусыЗаказовНаПроизводство.Закрыт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;

КонецФункции

Функция КоличествоЗаказовМатериаловОжидающихИсполнения21()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказМатериаловВПроизводство.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТРаспоряжения
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство КАК ЗаказМатериаловВПроизводство
		|ГДЕ
		|	ЗаказМатериаловВПроизводство.Проведен
		|	И НЕ ЗаказМатериаловВПроизводство.УправлениеПроизводством2_2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
		|			,
		|			Распоряжение В
		|				(ВЫБРАТЬ
		|					ТОтбора.Ссылка
		|				ИЗ
		|					ВТРаспоряжения КАК ТОтбора)) КАК Остатки
		|ГДЕ
		|	(Остатки.ЗаказаноОстаток > 0
		|		ИЛИ Остатки.КОформлениюОстаток > 0)");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция КоличествоРаспоряженийНаОформлениеВыпускаПродукции21()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(, ) КАК Остатки
		|ГДЕ
		|	Остатки.КОформлениюОстаток > 0");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция КоличествоВыпусковТребующихСписанияЗатрат21()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Остатки(, ) КАК Остатки");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция ЕстьОстаткиМатериаловИРаботВПроизводстве21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Остатки.Организация    КАК Организация,
		|	Остатки.Номенклатура   КАК Номенклатура,
		|	Остатки.Характеристика КАК Характеристика,
		|	Остатки.Подразделение  КАК Подразделение,
		|	Остатки.Серия          КАК Серия,
		|	Остатки.Назначение     КАК Назначение
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
		|			,
		|			Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|												ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				И Подразделение ССЫЛКА Справочник.СтруктураПредприятия) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток <> 0");
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти
//-- Устарело_Производство21

#Область Прочее

// Устанавливает дату с учетом переданной отметки
//
// Параметры:
//  Отметка		 - Булево	 - отметка
//  ПолеДата	 - Дата		 - реквизит, в котором нужно установить дату
//  ДатаСобытия	 - Дата		 - устанавливаемая дата
//  Затереть	 - Булево	 - признак, что дату нужно установить принудительно.
//
Процедура УстановитьДатуПоОтметке(Отметка, ПолеДата, ДатаСобытия = Неопределено, Затереть = Ложь) Экспорт
	
	Если ДатаСобытия = Неопределено Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ Отметка И ПолеДата <> '000101010000' Тогда
		ПолеДата  = '000101010000';
	ИначеЕсли Отметка И (ПолеДата = '000101010000' ИЛИ Затереть) Тогда
		ПолеДата = ДатаСобытия;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает используемые виды рабочих центров
// 
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап производства.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ИспользуемыеВидыРабочихЦентров(Объект) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров");
	Результат.Колонки.Добавить("ВидРабочегоЦентра", ОписаниеТипа);
	
	ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени");
	Результат.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипа);
	
	ОписаниеТипа = ОбщегоНазначения.ОписаниеТипаЧисло(10, 1, ДопустимыйЗнак.Неотрицательный);
	Результат.Колонки.Добавить("ВремяРаботы", ОписаниеТипа);
	
	ПараметрыОтбора = Новый Структура("Использовать", Истина);
	
	Для Каждого Строка Из Объект.ВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ОбновитьПлановыеДатыПоступления(Объект, ПлановаяДатаПоступления, ПредыдущееЗначение) Экспорт
	                                              
	// После ручного изменения графика, необходимо обновить плановые даты производства
	Если Объект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ НЕ Объект.РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПроизводствоОднойДатой
		И Объект.ДатаПроизводства = ПредыдущееЗначение Тогда
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					Истина, 
					Объект.ДатаПроизводства,
					ПлановаяДатаПоступления,
					Истина);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("Произведено", Ложь);
	СтруктураОтбора.Вставить("ДатаПроизводства", ПредыдущееЗначение);
	
	ИменаТаблиц = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Для Каждого Строка Из Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора) Цикл
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
						Истина, 
						Строка.ДатаПроизводства,
						ПлановаяДатаПоступления,
						Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтборСтатейРасходов(ОтборСтатейРасходов) Экспорт
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПродаж);
	ДоступныеВариантыРаспределенияРасходов = Новый ФиксированныйМассив(МассивВариантов);
	
	ОтборСтатейРасходов.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
	ОтборСтатейРасходов.Вставить("ВариантРаспределенияРасходов", ДоступныеВариантыРаспределенияРасходов);
	
КонецПроцедуры

Функция ИспользуетсяОперацияКакРаспоряжениеВыработки(СравниваемаяДата) Экспорт
	
	Если СравниваемаяДата = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Дата = УправлениеПроизводствомПовтИсп.ДатаНачалаВеденияУчетаВыработкиПоОперациям();
	
	Возврат ЗначениеЗаполнено(Дата) И СравниваемаяДата >= Дата;
	
КонецФункции

#КонецОбласти

#Область График

// Создает временную таблицу, содержащую даты обеспечения этапов производства материалами.
// Учитываются только материалы, ограничивающие этапы в графике производства.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//  Этапы - Массив - ссылки на этапы, даты обеспечения которых необходимо получить.
//  ВРазрезеНоменклатуры - Булево - если Истина, то даты получаются в разрезе материалов.
//  ВРазрезеОбеспечивающихЭтапов - Булево - если Истина, то даты получаются в разрезе
//		обеспечивающих этапов производства. Обеспечивающие документы прочих типов сворачиваются.
//
Процедура СоздатьВТОграниченияГрафикаПроизводстваПоМатериалам(МенеджерВременныхТаблиц, Этапы, ВРазрезеНоменклатуры, ВРазрезеОбеспечивающихЭтапов) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ПоляВыборка,
		|	МАКСИМУМ(
		|				ВЫБОР
		|					КОГДА Обеспечение.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|						И НЕ (Обеспечение.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
		|								И ВЫРАЗИТЬ(Обеспечение.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение
		|									= ВЫРАЗИТЬ(Обеспечение.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение)
		|						ТОГДА ВЫБОР
		|								КОГДА Обеспечение.ДатаПоступления < &НачалоТекущегоДня 
		|									ТОГДА &НачалоТекущегоДня
		|								ИНАЧЕ Обеспечение.ДатаПоступления
		|							КОНЕЦ
		|					ИНАЧЕ РасчетПереопределяемый.ПлановаяДатаПоставки
		|				КОНЕЦ) КАК ДатаОбеспечения
		|ПОМЕСТИТЬ ВТОграниченияГрафикаПроизводстваПоМатериалам
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Обеспечение
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|ГДЕ
		|	Обеспечение.ЗаказНаОтгрузку В(&Этапы)
		|	И Обеспечение.Состояние В (
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить))
		|	И НЕ ИСТИНА В
		|		(
		|			ВЫБРАТЬ
		|				ПЕРВЫЕ 1 ИСТИНА
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
		|			ГДЕ
		|				Изделия.Ссылка = Обеспечение.ЗаказНаПоступление
		|				И Изделия.ЭтапПотребитель = Обеспечение.ЗаказНаОтгрузку
		|				И НЕ Изделия.Отменено
		|				И НЕ Изделия.СписатьНаРасходы)
		|	И НЕ ИСТИНА В
		|		(
		|			ВЫБРАТЬ
		|				ПЕРВЫЕ 1 ИСТИНА
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
		|			ГДЕ
		|				Изделия.Ссылка = Обеспечение.ЗаказНаПоступление
		|				И Изделия.ЭтапПотребитель = Обеспечение.ЗаказНаОтгрузку
		|				И НЕ Изделия.Отменено
		|				И НЕ Изделия.СписатьНаРасходы)
		|
		|СГРУППИРОВАТЬ ПО
		|	&ПоляГруппировка";
	
	// Подстановка расчета плановой даты поставки
	Подстановки = ОбеспечениеВДокументахСервер.ПодстановкиПлановойДатыПоставки(
		"Обеспечение.Номенклатура",
		"Обеспечение.Характеристика",
		"Обеспечение.Склад",
		"&НачалоТекущегоДня",
		"ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетПереопределяемый.ПлановаяДатаПоставки", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА", Подстановки.Соединения);
	
	// Подстановка полей выборки
	Подстановка = "Обеспечение.ЗаказНаОтгрузку КАК ЭтапПроизводства";
	Если ВРазрезеНоменклатуры Тогда
		Подстановка = Подстановка + ",
			|	Обеспечение.Номенклатура    КАК Номенклатура,
			|	Обеспечение.Характеристика  КАК Характеристика";
	КонецЕсли;
	Если ВРазрезеОбеспечивающихЭтапов Тогда
		Подстановка = Подстановка + ",
			|	ВЫБОР
			|		КОГДА Обеспечение.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
			|			ТОГДА Обеспечение.ЗаказНаПоступление
			|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
			|	КОНЕЦ КАК ЭтапПроизводстваОбеспечивающий";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборка", Подстановка);
	
	// Подстановка полей группировки
	Подстановка = "Обеспечение.ЗаказНаОтгрузку";
	Если ВРазрезеНоменклатуры Тогда
		Подстановка = Подстановка + ",
			|	Обеспечение.Номенклатура,
			|	Обеспечение.Характеристика";
	КонецЕсли;
	Если ВРазрезеОбеспечивающихЭтапов Тогда
		Подстановка = Подстановка + ",
			|	ВЫБОР
			|		КОГДА Обеспечение.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
			|			ТОГДА Обеспечение.ЗаказНаПоступление
			|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
			|	КОНЕЦ";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировка", Подстановка);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выполняет "онлайн" расчет сроков обеспечения этапов материалами для задачи расчета графика производства.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ для которого необходимо получить ограничения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - таблица с колонками:
//		* ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//		* ДатаОбеспечения - Дата - дата обеспечения этапа материалами.
//	Если обеспечиваемые материалы отсутствуют, то возвращается Неопределено.
//
Функция РассчитатьОграниченияГрафикаПроизводстваПоМатериалам(Распоряжение) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Распоряжение = &Распоряжение
		|		И ЭтапыПроизводства.Проведен
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументЗаказ.Приоритет.РеквизитДопУпорядочивания КАК Приоритет
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ДокументЗаказ
		|ГДЕ
		|	ДокументЗаказ.Ссылка = &Распоряжение");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	МассивЭтапов = ПакетРезультатов[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПриоритетЗаказа = ПакетРезультатов[1].Выгрузить()[0].Приоритет;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РаспределениеЗапасов.РаспределениеЗапасовНаЗаказыВыбраннойОчереди(
		МассивЭтапов,
		ПриоритетЗаказа,
		МенеджерВременныхТаблиц);
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоЭтогоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.ЭтапПроизводства          КАК ЭтапПроизводства,
		|	МАКСИМУМ(Набор.ДатаОбеспечения) КАК ДатаОбеспечения
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.ЗаказНаОтгрузку                     КАК ЭтапПроизводства,
		|		РасчетПереопределяемый.ПлановаяДатаПоставки КАК ДатаОбеспечения
		|	ИЗ
		|		ВтРаспределение КАК Таблица
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|	ГДЕ
		|		Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
		|			И РасчетПереопределяемый.ПлановаяДатаПоставки > &НачалоЭтогоДня
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Таблица.ЗаказНаОтгрузку КАК ЭтапПроизводства,
		|		ВЫБОР 
		|			КОГДА НЕ (Таблица.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
		|				И ВЫРАЗИТЬ(Таблица.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение
		|					= ВЫРАЗИТЬ(Таблица.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение)
		|				ТОГДА Таблица.ДатаПоступления
		|			ИНАЧЕ РасчетПереопределяемый.ПлановаяДатаПоставки
		|		КОНЕЦ                   КАК ДатаОбеспечения
		|	ИЗ
		|		ВтРаспределение КАК Таблица
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|	ГДЕ
		|		Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|			И Таблица.ДатаПоступления > &НачалоЭтогоДня
		|			И НЕ ИСТИНА В
		|				(
		|					ВЫБРАТЬ
		|						ПЕРВЫЕ 1 ИСТИНА
		|					ИЗ
		|						Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
		|					ГДЕ
		|						Изделия.Ссылка = Таблица.ЗаказНаПоступление
		|						И Изделия.ЭтапПотребитель = Таблица.ЗаказНаОтгрузку
		|						И НЕ Изделия.Отменено
		|						И НЕ Изделия.СписатьНаРасходы)
		|			И НЕ ИСТИНА В
		|				(
		|					ВЫБРАТЬ
		|						ПЕРВЫЕ 1 ИСТИНА
		|					ИЗ
		|						Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
		|					ГДЕ
		|						Изделия.Ссылка = Таблица.ЗаказНаПоступление
		|						И Изделия.ЭтапПотребитель = Таблица.ЗаказНаОтгрузку
		|						И НЕ Изделия.Отменено
		|						И НЕ Изделия.СписатьНаРасходы)) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.ЭтапПроизводства";
	
	Подстановки = ОбеспечениеВДокументахСервер.ПодстановкиПлановойДатыПоставки(
		"Таблица.Номенклатура",
		"Таблица.Характеристика",
		"Таблица.Склад",
		"&НачалоЭтогоДня",
		"ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетПереопределяемый.ПлановаяДатаПоставки", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА", Подстановки.Соединения);
		
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// По данным графика производства проверяет соблюдение условия: этап-последователь
// начинается после этапа-предшественника. Под последователями/предшественниками понимаются
// как этапы одной цепочки, находящиеся в непосредственной связи, так и этапы различных цепочек,
// связанные через назначения. Этапы для которых условие не соблюдается помечаются как требующие пересчета.
//
// Параметры:
//  Этапы - ДокументСсылка.ЭтапПроизводства2_2, Массив - этапы которые необходимо проверить.
//
Процедура ПроверитьПорядокСледованияЭтапов(Этапы) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(Этапы) = Тип("Массив") Тогда
		МассивЭтапов = Этапы;
	Иначе
		МассивЭтапов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Этапы);
	КонецЕсли;
	Документы.ЭтапПроизводства2_2.СоздатьВТСвязиЭтапов(МенеджерВременныхТаблиц, МассивЭтапов, Ложь);
	
	ТекстыЗапросовПакета = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТСвязиЭтапов.СледующийЭтап
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	ТекстыЗапросовПакета.Добавить(
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ТекстЗапросаВТСрокиВыполненияЭтапов("ВТЭтапы", "ЭтапПроизводства"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап,
	|	ВТСвязиЭтапов.СледующийЭтап
	|ПОМЕСТИТЬ ВТСвязиСНарушением
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокиВыполненияЭтапов КАК ГрафикЭтапа
	|		ПО ВТСвязиЭтапов.Этап = ГрафикЭтапа.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокиВыполненияЭтапов КАК ГрафикСледующегоЭтапа
	|		ПО ВТСвязиЭтапов.СледующийЭтап = ГрафикСледующегоЭтапа.ЭтапПроизводства
	|ГДЕ
	|	ГрафикЭтапа.ЭтапПроизводства ЕСТЬ НЕ NULL 
	|	И ГрафикСледующегоЭтапа.ЭтапПроизводства ЕСТЬ НЕ NULL 
	|	И ГрафикЭтапа.ОкончаниеЭтапа > ГрафикСледующегоЭтапа.НачалоЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Этап
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСвязиСНарушением.СледующийЭтап КАК Этап
	|	ИЗ
	|		ВТСвязиСНарушением КАК ВТСвязиСНарушением
	|	ГДЕ
	|		ВТСвязиСНарушением.Этап В(&Этапы)
	|		И ВЫРАЗИТЬ(ВТСвязиСНарушением.Этап КАК Документ.ЭтапПроизводства2_2).Распоряжение.РазмещениеВыпуска = &КНачалу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТСвязиСНарушением.Этап
	|	ИЗ
	|		ВТСвязиСНарушением КАК ВТСвязиСНарушением
	|	ГДЕ
	|		ВТСвязиСНарушением.СледующийЭтап В(&Этапы)
	|		И ВЫРАЗИТЬ(ВТСвязиСНарушением.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).Распоряжение.РазмещениеВыпуска = &КОкончанию) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Этап КАК Документ.ЭтапПроизводства2_2).Статус В (&СтатусыЭтапа)";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Этапы", МассивЭтапов);
	Запрос.УстановитьПараметр("СтатусГрафика", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("СтатусыЭтапа", Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован());
	Запрос.УстановитьПараметр("КНачалу", Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	Запрос.УстановитьПараметр("КОкончанию", Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию);
	
	НеактуальныеЭтапы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Этап");
	
	Если ЗначениеЗаполнено(НеактуальныеЭтапы) Тогда
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(НеактуальныеЭтапы);
	КонецЕсли;
	
КонецПроцедуры

// По данным графика производства проверяет соблюдение условия: дата обеспечения материалов находится 
// раньше даты начала этапов по графику. Этапы для которых условие не соблюдается помечаются как требующие пересчета.
//
// Параметры:
//  Этапы - Массив - содержит ссылки на документы, дата обеспечения которых могла измениться.
//
Процедура ПроверитьСрокиОбеспеченияЭтапов(Этапы) Экспорт
	
	Если Этапы.Количество() = 0 
		ИЛИ НЕ ИспользуетсяГрафикПроизводства() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТОграниченияГрафикаПроизводстваПоМатериалам(
		МенеджерВременныхТаблиц,
		Этапы,
		Ложь,
		Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Обеспечение.ЭтапПроизводства               КАК ЭтапПроизводства,
		|	Обеспечение.ЭтапПроизводстваОбеспечивающий КАК ЭтапПроизводстваИнициатор
		|ИЗ
		|	ВТОграниченияГрафикаПроизводстваПоМатериалам КАК Обеспечение
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Этапы
		|		ПО Обеспечение.ЭтапПроизводства = Этапы.Ссылка
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
		|		ПО Этапы.Распоряжение = График.Распоряжение
		|			И Этапы.Ссылка = График.ЭтапПроизводства
		|			И График.СтатусГрафика = &РабочийГрафик
		|ГДЕ
		|	График.НачалоЭтапа < Обеспечение.ДатаОбеспечения");
	
	Запрос.УстановитьПараметр("РабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НеактуальныеЭтапы = Запрос.Выполнить().Выгрузить();
	
	Если НеактуальныеЭтапы.Количество() > 0 Тогда
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗаданияСИнициаторами(НеактуальныеЭтапы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

