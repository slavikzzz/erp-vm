#Область ПрограммныйИнтерфейс

// Дополняет структуру параметров отражения записей регистров накопления в финансовом учете.
// 
// Параметры:
// 	ПараметрыОтражения - см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете.
// 
Процедура ДополнитьПараметрыОтраженияДвиженийВФинансовомУчете(ПараметрыОтражения) Экспорт
	
	ПараметрыОтражения.Вставить("ЭтоРегистрУчетаНДС", Ложь);
	ПараметрыОтражения.Вставить("ТипДанныхУчета", ПредопределенноеЗначение("Перечисление.ТипыДанныхУчета.ПустаяСсылка"));
	ПараметрыОтражения.Вставить("СтруктураАналитики", Новый Структура);
	ПараметрыОтражения.Вставить("Показатели", Новый Соответствие);
	ПараметрыОтражения.Вставить("ПутьКДаннымДопНастройкаХозОперации", "");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодпискиНаСобытия

Процедура ОтметитьДокументКОтражениюВБюджетированииПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
	 ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Для Каждого Движения Из Источник.Движения Цикл
			Движения.ДополнительныеСвойства.Вставить("НеОтражатьВБюджетировании", Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьДокументКОтражениюВБюджетированииПриЗаписиНабораЗаписей(Источник, Отказ, РежимЗаписи) Экспорт
	Перем НомерЗадания;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеОтражатьВБюджетировании") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		ЕстьИзменения = Ложь;
		
		Регистратор = Источник.Отбор.Регистратор.Значение;
		НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
		НаборЗаписей.Прочитать();
		
		Периоды = Источник.Выгрузить(, "Период");
		Для Каждого СтрокаПериода Из Периоды Цикл
			СтрокаПериода.Период = НачалоДня(СтрокаПериода.Период);
		КонецЦикла;
		Периоды.Свернуть("Период");
		
		Для Каждого СтрокаПериода Из Периоды Цикл
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, СтрокаПериода.Период, ЕстьИзменения);
		КонецЦикла;
		
		Если Не Периоды.Количество() Тогда
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтметитьДокументКОтражениюВБюджетированииПриПроведении(Источник, Отказ, РежимЗаписи) Экспорт
	Перем НомерЗадания, ЕстьИзменения;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		ЕстьИзменения = Ложь;
		
		Регистратор = Источник.Ссылка;
		НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
		
		ВсеПериоды = Новый ТаблицаЗначений;
		ВсеПериоды.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		Для Каждого Движения Из Источник.Движения Цикл
			МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(Движения));
			Если ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра)
				ИЛИ ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
				Периоды = Движения.Выгрузить(, "Период"); // ТаблицаЗначений - 
				Периоды.Свернуть("Период");
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Периоды, ВсеПериоды);
			КонецЕсли;
		КонецЦикла;
		
		ВсеПериоды.Свернуть("Период");
		
		Для Каждого СтрокаПериода Из ВсеПериоды Цикл
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, СтрокаПериода.Период, ЕстьИзменения);
		КонецЦикла;
		
		Если Не ВсеПериоды.Количество() Тогда
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не Отказ И ЕстьИзменения И Константы.АктуализироватьФактБюджетированияПриПроведенииДокументов.Получить() Тогда
		ОтразитьДокументыФоновымЗаданием(,,Ложь);
	КонецЕсли;
	
КонецПроцедуры


// Отмечает документ к отражению в бюджетировании.
// 
// Параметры:
// 	Источник - ДокументОбъект - 
// 	Отказ - Булево - 
Процедура ОтметитьДокументКОтражениюВБюджетированииПриУдаленииПроведения(Источник, Отказ) Экспорт
	Перем НомерЗадания;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		ЕстьИзменения = Ложь;
		
		Регистратор = Источник.Ссылка;
		НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
		ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не Отказ И ЕстьИзменения И	Константы.АктуализироватьФактБюджетированияПриПроведенииДокументов.Получить() Тогда
		ОтразитьДокументыФоновымЗаданием(,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор)
	
	НомерЗадания = 0;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", НомерЗадания);
	ЭлементБлокировки.УстановитьЗначение("Документ",     Регистратор);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
	НаборЗаписей.Отбор.Документ.Установить(Регистратор);
	
	Возврат НаборЗаписей;
	
КонецФункции

Процедура ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, ПериодЗаписи, ЕстьИзменения)
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ПериодЗаписи = ПериодЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Запись = НаборЗаписей.Добавить();
	Запись.НомерЗадания = НомерЗадания;
	Запись.Документ = Регистратор;
	Запись.ПериодЗаписи = ПериодЗаписи;
	Запись.ИмяВидаДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Регистратор)).Имя;
	
	ЕстьИзменения = Истина;
	
КонецПроцедуры

Процедура ВыполнитьОффлайновыеРасчеты(ДокументыКРасчету, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	ОкончаниеРасчета = КонецМесяца(ДатаОкончания)+1;
	
	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|ГДЕ
		|	Расчеты.Регистратор В (&ДокументыКОтражению)
		|	И Расчеты.Активность
		|");
		
		Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКРасчету);
		МассивАналитикПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		Если МассивАналитикПоставщиков.Количество() > 0 Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикПоставщиков;
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ОкончаниеРасчета, АналитикиРасчета);
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|ГДЕ
		|	Расчеты.Регистратор В (&ДокументыКОтражению)
		|	И Расчеты.Активность
		|");
		
		Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКРасчету);
		МассивАналитикКлиентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		Если МассивАналитикКлиентов.Количество() > 0 Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикКлиентов;
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ОкончаниеРасчета, АналитикиРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументыКРасчету.Количество() > 0 Тогда
		ПараметрыВыполнения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыВыполненияОффлайновыхРасчетов();
		ПараметрыВыполнения.ДатаОкончания = ДатаОкончания;
		ПараметрыВыполнения.ДокументыКРасчету = ДокументыКРасчету;
		ПараметрыВыполнения.КоличествоПотоков = КоличествоПотоковОтраженияВБюджетировании();
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ВыполнитьОффлайновыеРасчеты(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеВыполнениемОффлайновыхРасчетов

Функция КоличествоПотоковОтраженияВБюджетировании()
	
	КоличествоПотоковСРазделением = 1;
	КоличествоПотоковБезРазделения = 6;
	
	Если НЕ ВозможноМногопоточноеОтражение() Тогда
		КоличествоПотоков = 1;
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда
		КоличествоПотоков = КоличествоПотоковСРазделением;
	Иначе
		КоличествоПотоков = КоличествоПотоковБезРазделения;
	КонецЕсли;
	
	Возврат КоличествоПотоков;
	
КонецФункции

Функция ВозможноМногопоточноеОтражение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ ОбщегоНазначения.РежимОтладки()
		И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И РегистрыНакопления.ФактическиеДанныеБюджетирования.ПолучитьРежимРазделенияИтогов();
	
КонецФункции

#КонецОбласти


// Возвращает флаг необходимости установки документа (регистратора) в очередь отражения бюджетирования.
// 
// Параметры:
// 	Источник - ДокументОбъект, РегистрНакопленияНаборЗаписей -
// Возвращаемое значение:
// 	Булево - Истина, если необходимо ставить документ в очередь отражения бюджетирования
Функция НужноСтавитьДокументВОчередьЗаданий(Источник)
	Перем КэшФОИспользоватьБюджетирование;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИспользоватьБюджетирование", КэшФОИспользоватьБюджетирование) Тогда
		Если КэшФОИспользоватьБюджетирование = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		Источник.ДополнительныеСвойства.Вставить("ИспользоватьБюджетирование", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Если Не ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ФактическиеДанныеБюджетирования") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОборотыБюджетов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭкземплярБюджета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеОбъекта = Источник.Метаданные(); // ОбъектМетаданныхРегистрНакопления, ОбъектМетаданныхДокумент -
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		Регистратор = Источник.Отбор.Регистратор.Значение;
		РегистраторыФактическихДанных = Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования.СтандартныеРеквизиты.Регистратор.Тип;
		
		Если Не РегистраторыФактическихДанных.СодержитТип(ТипЗнч(Регистратор)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не Источник.Количество() Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ПометкаУдаления");
			Если ПометкаУдаления = Неопределено ИЛИ ПометкаУдаления = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
				|	1
				|ИЗ
				|	&Таблица КАК Таблица
				|ГДЕ
				|	Таблица.Регистратор = &Регистратор";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "РегистрНакопления." + МетаданныеОбъекта.Имя);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Если Запрос.Выполнить().Пустой() Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		РегистраторыФактическихДанных = Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования.СтандартныеРеквизиты.Регистратор.Тип;
		Если Не РегистраторыФактическихДанных.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает имена документов, по которым собираются фактические данные по правилу
//
// Параметры:
//  ОписаниеПравила - СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов, СтрокаТаблицыЗначений - правило получения факта
//  КэшИменДокументов - ТаблицаЗначений:
//   * Правило - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов
//   * ИмяВидаДокумента - Строка
// Возвращаемое значение:
//  Массив из Строка
Функция ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила, КэшИменДокументов = Неопределено) Экспорт
	
	Если ТипЗнч(ОписаниеПравила) = Тип("СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
			|	КэшИменДокументовДляОбработкиПоПравилу.ИмяВидаДокумента
			|ИЗ
			|	РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу КАК КэшИменДокументовДляОбработкиПоПравилу
			|ГДЕ
			|	КэшИменДокументовДляОбработкиПоПравилу.Правило = &Правило";
		
		Запрос.УстановитьПараметр("Правило", ОписаниеПравила.Ссылка);
		ИменаВидовДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяВидаДокумента");
		Правило = ОписаниеПравила.Ссылка;
		ИсточникДанных = ОписаниеПравила.ИсточникДанных;
	Иначе
		ИменаВидовДокументов = КэшИменДокументов.Скопировать(Новый Структура("Правило", ОписаниеПравила.Правило), "ИмяВидаДокумента").ВыгрузитьКолонку("ИмяВидаДокумента");
		Правило = ОписаниеПравила.Правило;
		ИсточникДанных = ОписаниеПравила.ИсточникДанныхХО;
	КонецЕсли;
	
	Если ИменаВидовДокументов.Количество() Тогда
		Возврат ИменаВидовДокументов;
	КонецЕсли;
	
	Если ОписаниеПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет
		И ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам") Тогда
		МассивИменВидовДокументов = ИсточникиДанныхСервер.ИменаВидовДокументовПоИсточникуДанных(ИсточникДанных);
		Если ОписаниеПравила.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате
			Или ОписаниеПравила.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита
			Или ОписаниеПравила.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита Тогда
			МассивИменВидовДокументов.Добавить(Метаданные.Документы.ЗаявкаНаКомандировку.Имя);
			МассивИменВидовДокументов.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Имя);
		КонецЕсли;
	Иначе
		СКД = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ОписаниеПравила);
		Если СКД = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МассивИменВидовДокументов = Новый Массив;
		Для Каждого Набор Из СКД.НаборыДанных Цикл
			Если ТипЗнч(Набор) <> Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				МассивИменВидовДокументов.Добавить("");
				Прервать;
			Иначе
				СхемаЗапроса = Новый СхемаЗапроса;
				СхемаЗапроса.УстановитьТекстЗапроса(Набор.Запрос);
				Для Каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
					Если ТипЗнч(ПакетЗапроса) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Колонка Из ПакетЗапроса.Колонки Цикл
						Если НРег(Колонка.Псевдоним) <> НРег("Регистратор") Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого Тип Из Колонка.ТипЗначения.Типы() Цикл
							МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
							Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа) Тогда
								МассивИменВидовДокументов.Добавить(МетаданныеТипа.Имя);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Не МассивИменВидовДокументов.Количество() Тогда
			МассивИменВидовДокументов.Добавить("");
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаВидовДокументов = Новый ТаблицаЗначений;
	ИменаВидовДокументов.Колонки.Добавить("Правило");
	ИменаВидовДокументов.Колонки.Добавить("ИмяВидаДокумента");
	
	Для Каждого ИмяВидаДокумента Из МассивИменВидовДокументов Цикл
		НоваяСтрока = ИменаВидовДокументов.Добавить();
		НоваяСтрока.ИмяВидаДокумента = ИмяВидаДокумента;
		НоваяСтрока.Правило = Правило;
	КонецЦикла;
	
	ИменаВидовДокументов.Свернуть("Правило, ИмяВидаДокумента", "");
	
	НаборЗаписей = РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Правило.Установить(Правило);
	НаборЗаписей.Загрузить(ИменаВидовДокументов);
	НаборЗаписей.Записать();
	
	Возврат ИменаВидовДокументов.ВыгрузитьКолонку("ИмяВидаДокумента");
	
КонецФункции

// Формирует движения по регистру ФактическиеДанныеБюджетирования по таблице документов
//
// Параметры:
//  ДокументыКОбработке - ТаблицаЗначений:
//   *НомерЗадания - Число
//   *Документ - ДокументСсылка
//   *ИмяВидаДокумента - Строка
//  ИменаВидовДокументов - Массив из Строка, Неопределено
//
Процедура СформироватьДвиженияПоРегиструФактаБюджетирования(ДокументыКОбработке, КоличествоОбработанныхДокументов, Знач ИменаВидовДокументов = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	КэшИменДокументовДляОбработкиПоПравилу.Правило,
		|	КэшИменДокументовДляОбработкиПоПравилу.ИмяВидаДокумента
		|ИЗ
		|	РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу КАК КэшИменДокументовДляОбработкиПоПравилу";
	
	РезультатЗапроса = Запрос.Выполнить();
	КэшИменДокументов = РезультатЗапроса.Выгрузить();
	
	ДокументыКОбработке.Индексы.Добавить("ИмяВидаДокумента");
	ДокументыКОбработке.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ДокументыКОбработке.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("Булево"));
	ДокументыКОбработке.Индексы.Добавить("Ошибка");
	
	ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета();
	ТаблицаНаборовКЗаписи = БюджетированиеСервер.ШаблонТаблицыФактаПоСтатьямБюджетов(ПараметрыПолученияФакта);
	ТаблицаНаборовКЗаписи.Колонки.Добавить("Правило");
	
	СКДПравил = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника("ПравилаПолученияФактаПоСтатьямБюджетов", "ПравилаПолученияФакта");
	СКДПравил = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(СКДПравил); // СхемаКомпоновкиДанных -
	ПересчитываемыеПоля = Новый Соответствие;
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаВалюта", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаВалютаУпр", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаВалютаРегл", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаКорВалюта", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяКоличество", """""");
	ПересчитываемыеПоля.Вставить("ВыраженияПоказателейСуммы", "Неопределено");
	
	Для каждого ВычисляемоеПоле Из СКДПравил.ВычисляемыеПоля Цикл
		ПереопределениеВыражения = ПересчитываемыеПоля.Получить(ВычисляемоеПоле.ПутьКДанным);
		Если НЕ ПереопределениеВыражения = Неопределено Тогда
			ВычисляемоеПоле.Выражение = ПереопределениеВыражения;
		КонецЕсли;
	КонецЦикла;
	
	Настройки = СКДПравил.НастройкиПоУмолчанию;
	
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПромежуточноеКэшированиеРезультатовРаботыПравил", Истина);
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ФинансоваяОтчетностьСервер.НовыйПорядок(Настройки, "ТипДанныхУчетаПриход");
	ФинансоваяОтчетностьСервер.НовыйПорядок(Настройки, "ТипДанныхУчетаРасход");
	ФинансоваяОтчетностьСервер.НовыйПорядок(Настройки, "ИсточникДанныхХО");
	ФинансоваяОтчетностьСервер.НовыйПорядок(Настройки, "ДействуетС");
	ФинансоваяОтчетностьСервер.НовыйПорядок(Настройки, "ДействуетПо");
	
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКДПравил, Настройки); // ТаблицаЗначений -
	
	ТаблицаПравил.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравил.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	ОпределятьИменаВидовДокументов = (ИменаВидовДокументов = Неопределено);
	ДокументыКОбработкеПоПравилу = Неопределено;
	ТаблицаКорреспонденций = Неопределено;
	ПараметрыПредыдущейИтерации = Новый Структура("ИсточникДанныхХО, ДействуетС, ДействуетПо, ИменаВидовДокументов");
	
	ПараметрыФормированияКорреспонденцийРегистров = Новый Структура;
	Если ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам") Тогда
		
		ТаблицаПравил.Колонки.Добавить("ТаблицаКорреспонденций");
		
		ПараметрыФормированияКорреспонденцийРегистров.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);;
		ПараметрыФормированияКорреспонденцийРегистров.Вставить("РегистрыНДС", Новый Массив);
		ПараметрыФормированияКорреспонденцийРегистров.Вставить("РегистрыБезСуммыУпр", Новый Массив);
		ПараметрыФормированияКорреспонденцийРегистров.Вставить("РегистрыБезСуммыРегл", Новый Массив);
		ПараметрыФормированияКорреспонденцийРегистров.Вставить("ПараметрыЗаполнения", ПараметрыЗаполненияКорреспонденций());
		ПараметрыФормированияКорреспонденцийРегистров.Вставить("СтруктураТаблицАналитики", Новый Структура);
		
		ДокументыКОбработке.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		ДокументыКОбработке.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	КонецЕсли;
	
	Для Каждого ОписаниеПравила Из ТаблицаПравил Цикл
		
		Если ОпределятьИменаВидовДокументов Тогда
			ИменаВидовДокументов = ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила, КэшИменДокументов);
		КонецЕсли;
		
		Если ИменаВидовДокументов = Неопределено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			СобытиеЖР = НСтр("ru = 'Не выполнено правило бюджетирования';
							|en = 'Budgeting rule is not executed'", КодОсновногоЯзыка);
			ТекстСообщения = НСтр("ru = 'Не выполнено правило бюджетирования, т.к. не определена СКД получения данных';
									|en = 'Budgeting rule is not executed as data receipt DCS is not determined'", КодОсновногоЯзыка);
			ЗаписьЖурналаРегистрации(
				СобытиеЖР,,,
				ОписаниеПравила.Правило,
				ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыПредыдущейИтерации.ИменаВидовДокументов = Неопределено
			Или Не ОбщегоНазначенияУТКлиентСервер.МассивыРавны(ИменаВидовДокументов, ПараметрыПредыдущейИтерации.ИменаВидовДокументов, Ложь) Тогда
			СтруктураПоиска = Новый Структура("Ошибка", Ложь);
			Если ИменаВидовДокументов.Найти("") <> Неопределено Тогда
				ДокументыКОбработкеПоПравилу = ДокументыКОбработке.Скопировать(СтруктураПоиска);
			Иначе
				ДокументыКОбработкеПоПравилу = ДокументыКОбработке.СкопироватьКолонки();
				Для Каждого ИмяВидаДокумента Из ИменаВидовДокументов Цикл
					СтруктураПоиска.Вставить("ИмяВидаДокумента", ИмяВидаДокумента);
					НайденныеСтроки = ДокументыКОбработке.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НоваяСтрока = ДокументыКОбработкеПоПравилу.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			ПараметрыПредыдущейИтерации.ИменаВидовДокументов = ОбщегоНазначения.СкопироватьРекурсивно(ИменаВидовДокументов);
		КонецЕсли;
		
		КоличествоДокументовКОбработке = ДокументыКОбработкеПоПравилу.Количество();
		Если КоличествоДокументовКОбработке = 0 Тогда
			// Нет документов к обработке по правилу
			Продолжить;
		КонецЕсли;
		
		ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета(ОписаниеПравила);
		
		Если ОписаниеПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет
			И ПараметрыФормированияКорреспонденцийРегистров.Свойство("МенеджерВременныхТаблиц") Тогда
			Если ОписаниеПравила.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате
				Или ОписаниеПравила.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита
				Или ОписаниеПравила.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита Тогда
				ОписаниеПравила.ТаблицаКорреспонденций = ПолучитьТаблицуКорреспонденцийДенежныхСредствКВыплате(
					ДокументыКОбработкеПоПравилу, ПараметрыПолученияФакта, ОписаниеПравила);
			Иначе
				Если ОписаниеПравила.ИсточникДанныхХО = ПараметрыПредыдущейИтерации.ИсточникДанныхХО
					И ОписаниеПравила.ДействуетС = ПараметрыПредыдущейИтерации.ДействуетС
					И ОписаниеПравила.ДействуетПо = ПараметрыПредыдущейИтерации.ДействуетПо Тогда
					Если ТаблицаКорреспонденций <> Неопределено Тогда
						ОписаниеПравила.ТаблицаКорреспонденций = ТаблицаКорреспонденций.Скопировать();
					КонецЕсли;
				Иначе
					ТаблицаКорреспонденций = ПолучитьТаблицуКорреспонденцийБалансовыхРегистров(
						ДокументыКОбработкеПоПравилу, ПараметрыПолученияФакта, ОписаниеПравила, ПараметрыФормированияКорреспонденцийРегистров);
					Если ТаблицаКорреспонденций = Неопределено Тогда
						Если ДокументыКОбработкеПоПравилу.Найти(Метаданные.Документы.ДвижениеПрочихАктивовПассивов.Имя,
							"ИмяВидаДокумента") <> Неопределено
							И (ОписаниеПравила.ТипДанныхУчетаПриход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы
							Или ОписаниеПравила.ТипДанныхУчетаРасход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы) Тогда
							ТаблицаКорреспонденций = ПолучитьТаблицуКорреспонденцийПрочихАктивовПассивов(
							ДокументыКОбработкеПоПравилу, ПараметрыПолученияФакта, ОписаниеПравила);
						КонецЕсли;
					КонецЕсли;
					Если ТаблицаКорреспонденций <> Неопределено Тогда
						ОписаниеПравила.ТаблицаКорреспонденций = ТаблицаКорреспонденций.Скопировать();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ПараметрыПредыдущейИтерации, ОписаниеПравила);
				КонецЕсли;
				// Возможно были ошибки корреспонденций - их необходимо зафиксировать для расследования
				СтруктураПоиска = Новый Структура("Ошибка", Истина);
				Для Каждого СтрокаДокумент Из ДокументыКОбработкеПоПравилу.НайтиСтроки(СтруктураПоиска) Цикл
					Если Не ПустаяСтрока(СтрокаДокумент.Комментарий) Тогда
						НоваяСтрока = ТаблицаНаборовКЗаписи.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеПравила);
						НоваяСтрока.Регистратор = СтрокаДокумент.Документ;
						НоваяСтрока.Валюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
					КонецЕсли;
					ДокументыКОбработке.Найти(СтрокаДокумент.Документ, "Документ").Ошибка = Истина;
					ДокументыКОбработкеПоПравилу.Удалить(СтрокаДокумент);
				КонецЦикла;
			КонецЕсли;
			Если ОписаниеПравила.ТаблицаКорреспонденций = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			СписокДокументов = Новый СписокЗначений;
			СписокДокументов.ЗагрузитьЗначения(ДокументыКОбработкеПоПравилу.ВыгрузитьКолонку("Документ"));
			СКДПравила = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ОписаниеПравила);
			НастройкиКомпоновкиДанных = СКДПравила.НастройкиПоУмолчанию;
			ФинансоваяОтчетностьСервер.УстановитьОтбор(НастройкиКомпоновкиДанных.Отбор, "Регистратор",
				СписокДокументов, ВидСравненияКомпоновкиДанных.ВСписке);
			ПараметрыПолученияФакта.ДополнительныйОтбор = НастройкиКомпоновкиДанных;
		КонецЕсли;
		
		// Подготовим таблицу факта
		ФактПоСтатьямБюджетов = БюджетированиеСервер.ШаблонТаблицыФактаПоСтатьямБюджетов(ПараметрыПолученияФакта);
	
		// Получим факт в соответствии с правилами
		БюджетированиеСервер.ФактСтатьиБюджетовПоПравилу(ОписаниеПравила, ПараметрыПолученияФакта, ФактПоСтатьямБюджетов);
		
		// Дубли строк со сценарием Исполнение бюджета нужно удалить, так как в бюджетном кэше нет измерения Сценарий
		Если ОписаниеПравила.ТипПравила
			= Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные Тогда
			СтрокиИсполнениеБюджета = ФактПоСтатьямБюджетов.НайтиСтроки(Новый Структура("Сценарий",
				Справочники.Сценарии.ИсполнениеБюджета));
			Для Каждого СтрокаИсполнениеБюджета Из СтрокиИсполнениеБюджета Цикл
				ФактПоСтатьямБюджетов.Удалить(СтрокаИсполнениеБюджета);
			КонецЦикла;
		КонецЕсли;
		
		ФактПоСтатьямБюджетов.Колонки.Добавить("Правило");
		ФактПоСтатьямБюджетов.ЗаполнитьЗначения(ОписаниеПравила.Правило, "Правило");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФактПоСтатьямБюджетов, ТаблицаНаборовКЗаписи);
		
		КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + КоличествоДокументовКОбработке;
		
	КонецЦикла;
	
	Если ПараметрыФормированияКорреспонденцийРегистров.Свойство("МенеджерВременныхТаблиц") Тогда
		ПараметрыФормированияКорреспонденцийРегистров.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	ПривестиТаблицуНаборовКЗаписи(ТаблицаНаборовКЗаписи);
	
	Для Каждого СтрокаДокумента Из ДокументыКОбработке Цикл
		
		Если Не СтрокаДокумента.Документ.Метаданные().Движения.Содержит(
				Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ФактическиеДанныеБюджетирования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаДокумента.Документ);
		ДвиженияРегистратора = ТаблицаНаборовКЗаписи.НайтиСтроки(Новый Структура("Регистратор", СтрокаДокумента.Документ));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДвиженияРегистратора, НаборЗаписей);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПривестиТаблицуНаборовКЗаписи(ТаблицаНаборовКЗаписи)
	
	ТаблицаНаборовКЗаписи.Колонки.Добавить("Активность");
	ТаблицаНаборовКЗаписи.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаНаборовКЗаписи.Индексы.Добавить("Регистратор");
	
	Для каждого СтрокаТаблицы Из ТаблицаНаборовКЗаписи Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВалютаХранения) Тогда
			СтрокаТаблицы.Валюта = СтрокаТаблицы.ВалютаХранения;
			СтрокаТаблицы.СуммаВВалюте = СтрокаТаблицы.СуммаВВалютеХранения;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ВалютаФункциональная) Тогда
			СтрокаТаблицы.Валюта = СтрокаТаблицы.ВалютаФункциональная;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыПолученияФактаПоНастройкамОтчета(ОписаниеПравила = Неопределено)
	
	Параметры = БюджетированиеСервер.ШаблонПараметровПолученияФакта();
	Если ОписаниеПравила <> Неопределено Тогда
		НачалоПериода    = ОписаниеПравила.ДействуетС;
		ОкончаниеПериода = ОписаниеПравила.ДействуетПо;
		Если НЕ ЗначениеЗаполнено(ОкончаниеПериода) Тогда
			// Установка параметра окончание периода для запросов, у которых в качестве источника данных - физическая таблица регистра.
			ОкончаниеПериода = Дата(3999, 12, 31, 23, 59, 59);
		КонецЕсли;
		Параметры.Период = Новый СтандартныйПериод(НачалоПериода, ОкончаниеПериода);
	КонецЕсли;
	Параметры.ПоОрганизациям = Истина;
	Параметры.ПоПодразделениям = Истина;
	Параметры.ПоРегистратору = Истина;
	Параметры.ВозвращатьУпрИРеглСуммы = Истина;
	
	Параметры.Периодичность = Перечисления.Периодичность.День;
	
	Возврат Параметры; 
	
КонецФункции

Процедура ОтразитьДокументыВБюджетировании(НачалоПериода = Неопределено, КонецПериода = Неопределено,
	ИменаВидовДокументов = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтражениеДокументовВБюджетировании);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка.Заблокировать();
		ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКОтражениюВБюджетировании.НомерЗадания,
		|	ЗаданияКОтражениюВБюджетировании.Документ КАК Документ,
		|	ЗаданияКОтражениюВБюджетировании.ПериодЗаписи,
		|	ЗаданияКОтражениюВБюджетировании.ИмяВидаДокумента
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
		|ГДЕ
		|	ЗаданияКОтражениюВБюджетировании.НомерЗадания = 0
		|ИТОГИ ПО
		|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам") Тогда
		ДокументыКРасчету = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ДокументыКРасчету.Добавить(Выборка.Документ);
		КонецЦикла;
		ВыполнитьОффлайновыеРасчеты(ДокументыКРасчету, КонецПериода);
		Выборка.Сбросить();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания", 0);
			ЭлементБлокировки.УстановитьЗначение("Документ",     Выборка.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(0);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(ТекущийНомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			
			ВыборкаДетальныеЗаписи = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись,ВыборкаДетальныеЗаписи);
				Запись.НомерЗадания = ТекущийНомерЗадания;
			КонецЦикла;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖР = НСтр("ru = 'Бюджетирование';
							|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "." + НСтр("ru = 'Отражение факта';
							|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СобытиеЖР,
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;

	КонецЦикла;
	
	ЧастичноеОтражениеДокументов = НачалоПериода <> Неопределено ИЛИ КонецПериода <> Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		
		Запрос = Новый Запрос;
		Если ЧастичноеОтражениеДокументов Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(НачалоПериода, КонецПериода, МенеджерВременныхТаблиц, ИменаВидовДокументов);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
			|	МИНИМУМ(ЗаданияКОтражениюВБюджетировании.НомерЗадания) КАК НомерЗадания
			|ПОМЕСТИТЬ ЗаданиеКОбработке
			|ИЗ
			|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
			|ГДЕ
			|	ЗаданияКОтражениюВБюджетировании.НомерЗадания <= &НомерЗадания И ЗаданияКОтражениюВБюджетировании.НомерЗадания <> 0
			|	И &ФильтрНаДокументы
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерЗадания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10001
			|	ЗаданияКОтражениюВБюджетировании.Документ,
			|	ЗаданияКОтражениюВБюджетировании.НомерЗадания,
			|	ЗаданияКОтражениюВБюджетировании.ИмяВидаДокумента
			|ИЗ
			|	ЗаданиеКОбработке КАК ЗаданиеКОбработке
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
			|		ПО ЗаданиеКОбработке.НомерЗадания = ЗаданияКОтражениюВБюджетировании.НомерЗадания
			|ГДЕ
			|	НЕ ЗаданияКОтражениюВБюджетировании.НомерЗадания ЕСТЬ NULL
			|	И &ФильтрНаДокументы";
			
		Если ЧастичноеОтражениеДокументов Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрНаДокументы", "Документ В (ВЫБРАТЬ Документ ИЗ ДокументыКОтражению)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрНаДокументы", "ИСТИНА");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой()
		 ИЛИ ТекущийНомерЗадания = 0 Тогда
			ТекущийНомерЗадания = ТекущийНомерЗадания + 1;
			Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(ТекущийНомерЗадания);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
		Возврат;
	КонецПопытки;
	
	Если РезультатЗапроса.Пустой() И ТекущийНомерЗадания <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЧтоОбрабатывать = Истина;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ОбщийМодуль.ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании");
	ВсегоКоличествоОбработанныхДокументов = 0;
	
	Пока ЕстьЧтоОбрабатывать Цикл
		
		ДокументыКОбработке = РезультатЗапроса.Выгрузить();
		ОбрабатываетсяПорция = ДокументыКОбработке.Количество() = 10001;
		
		КоличествоОбработанныхДокументов = 0;
		СформироватьДвиженияПоРегиструФактаБюджетирования(ДокументыКОбработке, КоличествоОбработанныхДокументов, ИменаВидовДокументов);
		ВсегоКоличествоОбработанныхДокументов = ВсегоКоличествоОбработанныхДокументов + КоличествоОбработанныхДокументов;
		
		НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
		Если ОбрабатываетсяПорция ИЛИ ЧастичноеОтражениеДокументов Тогда
			
			НачатьТранзакцию();

			Попытка
				
				Для Каждого СтрокаДокумента Из ДокументыКОбработке Цикл
								
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить();
					ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
					ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	СтрокаДокумента.НомерЗадания);
					ЭлементБлокировки.УстановитьЗначение("Документ",		СтрокаДокумента.Документ);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					Блокировка.Заблокировать();
				
					НаборЗаписей.Отбор.НомерЗадания.Установить(СтрокаДокумента.НомерЗадания);
					НаборЗаписей.Отбор.Документ.Установить(СтрокаДокумента.Документ);
					НаборЗаписей.Записать();				
							
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				СобытиеЖР = НСтр("ru = 'Бюджетирование';
								|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Отражение факта';
								|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СобытиеЖР,
					УровеньЖурналаРегистрации.Ошибка,,,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВсегоКоличествоОбработанныхДокументов);
				Возврат;
			КонецПопытки;
		
		Иначе
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
				ЭлементБлокировки.УстановитьЗначение("НомерЗадания", ДокументыКОбработке[0].НомерЗадания);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				НаборЗаписей.Отбор.НомерЗадания.Установить(ДокументыКОбработке[0].НомерЗадания);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				СобытиеЖР = НСтр("ru = 'Бюджетирование';
								|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Отражение факта';
								|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СобытиеЖР,
					УровеньЖурналаРегистрации.Ошибка,,,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВсегоКоличествоОбработанныхДокументов);
				Возврат;
			КонецПопытки;

		КонецЕсли;
		
		Если ЧастичноеОтражениеДокументов Тогда
			МенеджерВременныхТаблиц.Закрыть();
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(НачалоПериода, КонецПериода, МенеджерВременныхТаблиц);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьЧтоОбрабатывать = Не РезультатЗапроса.Пустой();
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВсегоКоличествоОбработанныхДокументов);
	
КонецПроцедуры

Функция ЕстьХранимыеПравилаСтатейДляВидаБюджета(ВидБюджета)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.СтатьиБюджетов
	|			ТОГДА ""СтатьиБюджетов""
	|		КОГДА ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.ПоказателиБюджетов
	|			ТОГДА ""ПоказателиБюджетов""
	|	КОНЕЦ КАК ВидОбъекта,
	|	ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель КАК СтатьяПоказатель
	|ПОМЕСТИТЬ СтатьиИПоказателиБюджета
	|ИЗ
	|	Справочник.ВидыБюджетов.КэшСтатейИПоказателей КАК ВидыБюджетовКэшСтатейИПоказателей
	|ГДЕ
	|	ВидыБюджетовКэшСтатейИПоказателей.Ссылка = &ВидБюджета
	|	И (ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.СтатьиБюджетов
	|			ИЛИ ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.ПоказателиБюджетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОбъекта,
	|	СтатьяПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	СтатьиИПоказателиБюджета КАК СтатьиИПоказателиБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ПО (СтатьиИПоказателиБюджета.ВидОбъекта = ""СтатьиБюджетов"")
	|			И СтатьиИПоказателиБюджета.СтатьяПоказатель = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	СтатьиИПоказателиБюджета КАК СтатьиИПоказателиБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|		ПО (СтатьиИПоказателиБюджета.ВидОбъекта = ""ПоказателиБюджетов"")
	|			И СтатьиИПоказателиБюджета.СтатьяПоказатель = СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ПО СвязиПоказателейБюджетов.СтатьяБюджетов = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил";
	
	Результат = Запрос.Выполнить();
	ЕстьХранимыеПравила = НЕ Результат.Пустой();
	
	Возврат ЕстьХранимыеПравила;
КонецФункции

Функция ЕстьХранимыеПравилаСтатейИПоказателей(СтатьяБюджетов, ПоказательБюджетов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяБюджетов", СтатьяБюджетов);
	Запрос.УстановитьПараметр("ПоказательБюджетов", ПоказательБюджетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|	И ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ПО СвязиПоказателейБюджетов.СтатьяБюджетов = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
	|ГДЕ
	|	СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов = &ПоказательБюджетов
	|	И ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|	И (СвязиПоказателейБюджетов.СтатьяБюджетов = &СтатьяБюджетов
	|			ИЛИ &СтатьяБюджетов = НЕОПРЕДЕЛЕНО)";
	
	Результат = Запрос.Выполнить();
	ЕстьХранимыеПравила = НЕ Результат.Пустой();
	
	Возврат ЕстьХранимыеПравила;
КонецФункции

Процедура ВывестиАктуальностьОтраженияФактическихДанных(ДокументРезультат, ДопСвойства, ПроверятьАктивныеЗадания = Истина) Экспорт
	
	НужнаНадпись = ДопСвойства.Свойство("КоличествоДокументовКОтражениюВБюджетировании");
	
	Если ПроверятьАктивныеЗадания Тогда
		Ключ = "ОтражениеДокументовВБюджетировании";
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если АктивныеЗадания.Количество() = 0 Тогда
			НужнаНадпись = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаНадпись Тогда
		ВидБюджета = Неопределено;
		СтатьяБюджетов = Неопределено;
		ПоказательБюджетов = Неопределено;
		Если ДопСвойства.Свойство("ПроверкаХранимыхПравилВидБюджета", ВидБюджета) Тогда
			НужнаНадпись = ЕстьХранимыеПравилаСтатейДляВидаБюджета(ВидБюджета);
		Иначе
			ДопСвойства.Свойство("ПроверкаХранимыхПравилСтатьяБюджетов", СтатьяБюджетов);
			ДопСвойства.Свойство("ПроверкаХранимыхПравилПоказательБюджетов", ПоказательБюджетов);
			Если СтатьяБюджетов <> Неопределено ИЛИ ПоказательБюджетов <> Неопределено Тогда
				НужнаНадпись = ЕстьХранимыеПравилаСтатейИПоказателей(СтатьяБюджетов, ПоказательБюджетов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаНадпись Тогда
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
		ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
		ЧастиТекста = Новый Массив;
		ЧастиТекста.Добавить(НСтр("ru = 'Отражения в бюджетировании ожидает %1 документов.';
									|en = '%1 documents await recording in budgeting.'"));
		ЧастиТекста.Добавить(НСтр("ru = 'Запущено задание по распределению расчетов с %2 по %3.';
									|en = 'Job for allocating settlements from %2 to %3 is started.'"));
		ЧастиТекста.Добавить(НСтр("ru = 'После отражения Вам будет предложено переформировать отчет.';
									|en = 'You will be offered to rebuild the report after recording.'"));
		ТекстПредупреждения = СтрСоединить(ЧастиТекста, Символы.ПС);
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			ДопСвойства.КоличествоДокументовКОтражениюВБюджетировании,
			Формат(ДопСвойства.НачалоПериода, "ДЛФ=D"),
			Формат(ДопСвойства.КонецПериода, "ДЛФ=D"));
		ОбластьПредупреждение.Текст = ТекстПредупреждения;
		ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		ДокументРезультат.ВставитьОбласть(ТаблицаПредупреждение.Область(1,,1,), ДокументРезультат.Область(1,,1,), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		ДопСвойства.Удалить("КоличествоДокументовКОтражениюВБюджетировании");
		ДопСвойства.Удалить("НачалоПериода");
		ДопСвойства.Удалить("КонецПериода");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(Знач НачалоПериода, Знач КонецПериода, МенеджерВременныхТаблиц, ИменаВидовДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Документ КАК Документ
		|ПОМЕСТИТЬ ДокументыПериода
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК Задания
		|ГДЕ
		|	Задания.ПериодЗаписи МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Задания.ИмяВидаДокумента В (&ИменаВидовДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Документ
		|ПОМЕСТИТЬ ДокументыСПустымПериодом
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК Задания
		|ГДЕ
		|	Задания.ПериодЗаписи = ДАТАВРЕМЯ(1, 1, 1)
		|	И Задания.ИмяВидаДокумента В (&ИменаВидовДокументов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Задания.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыСПустымПериодом.Документ КАК Документ
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	ДокументыСПустымПериодом КАК ДокументыСПустымПериодом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеДанныеБюджетирования КАК ФактическиеДанныеБюджетирования
		|		ПО ДокументыСПустымПериодом.Документ = ФактическиеДанныеБюджетирования.Регистратор
		|ГДЕ
		|	ФактическиеДанныеБюджетирования.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументыПериода.Документ
		|ИЗ
		|	ДокументыПериода КАК ДокументыПериода");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = Дата(1,1,1);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = Дата(3999, 12, 31, 23, 59, 59);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Если ИменаВидовДокументов <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИменаВидовДокументов", ИменаВидовДокументов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Задания.ИмяВидаДокумента В (&ИменаВидовДокументов)", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОтразитьДокументыФоновымЗаданием(НачалоПериода = Неопределено, КонецПериода = Неопределено, ОжидатьВыполнения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = "ОтражениеДокументовВБюджетировании";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется отражение документов в бюджетировании';
								|en = 'Recording documents in budgeting'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(НачалоПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(КонецПериода);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Попытка
			// В файловой базе есть ограничение на получение списка фоновых заданий.
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
		Исключение
			Возврат;
		КонецПопытки;
	Иначе
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	КонецЕсли;
	
	Если ОжидатьВыполнения Тогда
		Попытка
			ФоновоеЗадание.ОжидатьЗавершения(1);
		Исключение
			СобытиеЖР = НСтр("ru = 'Выполнение отражения документов в бюджетировании';
							|en = 'Post the documents in budgeting'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СобытиеЖР,
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#Область ФактПоДаннымКорреспонденцийОстаточныхФинансовыхРегистров

// Возвращает таблицу факта по результатам корреспонденции балансовых регистров.
//
// Параметры:
//  ДокументыКОбработке - ТаблицаЗначений
//  ПараметрыПолученияФакта - Структура - параметры получения факта, в том числе:
//   * Период - СтандартныйПериод
//  ОписаниеПравила - СтрокаТаблицыЗначений:
//   * ИсточникДанныхХО - СправочникСсылка.НастройкиХозяйственныхОпераций
//   * ТипДанныхУчетаПриход - ПеречислениеСсылка.ТипыДанныхУчета
//   * ТипДанныхУчетаРасход - ПеречислениеСсылка.ТипыДанныхУчета
//  ПараметрыФормированияКорреспонденций - Структура:
//   * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//   * РегистрыНДС - Массив из Строка - регистры учета НДС
//   * РегистрыБезСуммыУпр - Массив из Строка - регистры без показателя СуммаУпр
//   * РегистрыБезСуммыРегл - Массив из Строка - регистры без показателя СуммаРегл
//
// Возвращаемое значение:
//  ТаблицаЗначений
Функция ПолучитьТаблицуКорреспонденцийБалансовыхРегистров(ДокументыКОбработке, ПараметрыПолученияФакта, ОписаниеПравила, ПараметрыФормированияКорреспонденций)

	ОстаточныеФинансовыеРегистры = Новый Соответствие;
	
	ИменаВидовДокументов = ДокументыКОбработке.Скопировать(, "ИмяВидаДокумента");
	ИменаВидовДокументов.Свернуть("ИмяВидаДокумента");
	Для Каждого СтрокаДокумент Из ИменаВидовДокументов Цикл
		ОстаточныеФинансовыеРегистрыПоВидуДокумента = БюджетированиеПовтИсп.ОстаточныеФинансовыеРегистрыПоИмениВидаДокумента(
			СтрокаДокумент.ИмяВидаДокумента);
		Для Каждого КлючИЗначение Из ОстаточныеФинансовыеРегистрыПоВидуДокумента Цикл
			ОстаточныеФинансовыеРегистры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоПериода", ПараметрыПолученияФакта.Период.ДатаНачала);
	ПараметрыЗапроса.Вставить("КонецПериода", ПараметрыПолученияФакта.Период.ДатаОкончания);
	ПараметрыЗапроса.Вставить("НастройкаХозОперации", ОписаниеПравила.ИсточникДанныхХО);
	ПараметрыЗапроса.Вставить("НастройкиХозОперацийДляЗамены",
		БюджетированиеПовтИсп.НастройкиХозяйственныхОперацийДляЗамены());
	ПараметрыЗапроса.Вставить("Регистратор", Неопределено);
	ПараметрыЗапроса.Вставить("ПоказателиПоКорреспондирующимРегистрам",
		ИсточникиДанныхПовтИсп.ПоказателиПоКорреспондирующимРегистрам());
	ПараметрыЗапроса.Вставить("РегистрыВосстановленияРасчетовПоСторно",
		ФинансовыйУчетПоДаннымБалансовыхРегистров.РегистрыВосстановленияРасчетовПоСторно());
	ПараметрыЗапроса.Вставить("РегистрыСОтборомПоПоказателям",
		ФинансовыйУчетПоДаннымБалансовыхРегистров.РегистрыСОтборомПоПоказателям());

	Запрос = ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса,
		ПараметрыФормированияКорреспонденций.МенеджерВременныхТаблиц);
	КорИсточникиДанных = Запрос.Параметры.КорИсточникиДанных; // ТаблицаЗначений -
	
	//++ НЕ УТКА
	КорИсточникиДанных.Колонки.Удалить("ОбъектУчета");
	//-- НЕ УТКА
	КорИсточникиДанных.Колонки.Добавить("Показатель",
		Новый ОписаниеТипов("ПеречислениеСсылка.ПоказателиАналитическихРегистров"));
	КорИсточникиДанных.Колонки.Добавить("ИмяРегистра", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(500)));
	Запрос.Параметры.Вставить("РегистрыНДС", ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияКорреспонденций.РегистрыНДС));
	Запрос.Параметры.Вставить("РегистрыБезСуммыУпр", ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияКорреспонденций.РегистрыБезСуммыУпр));
	Запрос.Параметры.Вставить("РегистрыБезСуммыРегл", ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияКорреспонденций.РегистрыБезСуммыРегл));
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросовЗаписейРегистров = Неопределено;
	
	ЕстьДокументыКОтражению = ЕстьДокументыДляФормированияКорреспонденцийЗаписейРегистров(ДокументыКОбработке, Запрос, ТекстыЗапросов);
	Если ЕстьДокументыКОтражению Тогда
		
		Запрос.Параметры.РегистрыВыборкиАналитики.Очистить();
		
		ТекстыЗапросовЗаписейРегистров = ТекстыЗапросовЗаписейРегистров(Запрос, ОстаточныеФинансовыеРегистры);
		
		Если ТекстыЗапросовЗаписейРегистров.Количество() = 0 Тогда
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ДокументыКОбработке");
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ДокументыКОтражению");
			Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
			Запрос.Выполнить();
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыФормированияКорреспонденций.Вставить("РегистрыНДС", ОбщегоНазначения.СкопироватьРекурсивно(Запрос.Параметры.РегистрыНДС));
		ПараметрыФормированияКорреспонденций.Вставить("РегистрыБезСуммыУпр", ОбщегоНазначения.СкопироватьРекурсивно(Запрос.Параметры.РегистрыБезСуммыУпр));
		ПараметрыФормированияКорреспонденций.Вставить("РегистрыБезСуммыРегл", ОбщегоНазначения.СкопироватьРекурсивно(Запрос.Параметры.РегистрыБезСуммыРегл));
		
		ТекстыЗапросов.Добавить(ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров));
		
		СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов);
		
		РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов);
		
		ПроверитьОшибкиКорреспонденций(ДокументыКОбработке, Запрос, ТекстыЗапросов);
	
	ИначеЕсли Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("КэшДвижений") = Неопределено Тогда
		
		// Документы без корреспонденции балансовых регистров (заявки на расход ДС, заявки на командировку и т.д.)
		// обрабатывать не нужно. Такие документы не попадают в выборку и отсутствуют в кэше.
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ДокументыКОбработке");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ДокументыКОтражению");
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.Выполнить();
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОбработатьКорреспонденцииРегистровИПоместитьВКэш(Запрос, ТекстыЗапросов);
	
	СмещениеИндекса = 0;
	СформироватьЗапросыАналитикиКорреспонденцийИПоместитьВКэш(Запрос, ТекстыЗапросов, ТекстыЗапросовЗаписейРегистров, СмещениеИндекса);
	
	Если ЕстьДокументыКОтражению Тогда
		ОбработатьКэшДокументов(Запрос, ТекстыЗапросов, СмещениеИндекса);
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.УничтожитьВременныеТаблицы(Запрос, ТекстыЗапросов);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	ИндексРезультатаЗапросаДвижений = 0;
	ТаблицыАналитики = ПараметрыФормированияКорреспонденций.СтруктураТаблицАналитики;
	Если ЕстьДокументыКОтражению Тогда
		Для Каждого КлючИЗначение Из Запрос.Параметры.РегистрыВыборкиАналитики Цикл
			ТаблицаАналитики = ТаблицаЗапросаАналитики(Результаты[КлючИЗначение.Значение]);
			Если ТаблицыАналитики.Свойство(КлючИЗначение.Ключ)
				И КлючИЗначение.Ключ = Запрос.Параметры.ИмяРегистраСлужебныхОбъектовУчета Тогда
				ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицыАналитики[КлючИЗначение.Ключ], ТаблицаАналитики);
			Иначе
				ТаблицыАналитики.Вставить(КлючИЗначение.Ключ, ТаблицаАналитики);
			КонецЕсли;
			Если КлючИЗначение.Значение >= ИндексРезультатаЗапросаДвижений Тогда
				ИндексРезультатаЗапросаДвижений = КлючИЗначение.Значение + 1;
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаДокументов = Результаты[ИндексРезультатаЗапросаДвижений+1+СмещениеИндекса].Выбрать();
		СтруктураПоиска = Новый Структура("Документ");
		Пока ВыборкаДокументов.Следующий() Цикл
			// По документам корреспонденция отсутствует - такие документы нужно исключить из выборки в дальнейшем
			СтруктураПоиска.Документ = ВыборкаДокументов.Документ;
			СтрокаДокумент = ДокументыКОбработке.НайтиСтроки(СтруктураПоиска)[0];
			СтрокаДокумент.Ошибка = Истина;
		КонецЦикла;
	КонецЕсли;
	
	КорреспонденцииРегистров = Результаты[ИндексРезультатаЗапросаДвижений];
	Если КорреспонденцииРегистров.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВыборкаКорреспонденций = КорреспонденцииРегистров.Выбрать();
	РезультатДвижения = Результаты[ИндексРезультатаЗапросаДвижений+1];
	ВыборкаДвижения = РезультатДвижения.Выбрать();
	
	СтруктураПоиска = Новый Структура("ИмяРегистраДт, ИмяРегистраКт");
	
	ТаблицаКорреспонденций = Неопределено;
	АналитикаКорреспонденций = Новый Структура("АналитикаДт, АналитикаКт, КорАналитика", Новый Массив, Новый Массив,
		Новый Соответствие);
	ПараметрыКорреспонденции = Новый Структура;
	СуммовыеРесурсы = Новый Соответствие;
	РеверсыКорреспонденций = Новый Массив;
	ДанныеДляЗаполнения = Новый Структура("СтрокиАналитикиДт, СтрокиАналитикиКт");
	
	// 1 - формируется основная таблица корреспонденций (типы данных учета совпадают с хозяйственной операцией) с полями аналитики
	// 2 - суммовые и количественные показатели прочих таблиц корреспонденций записываются в основную таблицу
	Для Счетчик = 1 По 2 Цикл
		
		Если Счетчик = 2 И ТаблицаКорреспонденций = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр(
				"ru = 'Некорректно настроены типы данных учета Приход и Расход для хозяйственной операции %1.';
				|en = 'The Income and Expense accounting data types for the %1 business transaction are configured incorrectly.'"),
				ОписаниеПравила.ИсточникДанныхХО);
		КонецЕсли;
		
		ВыборкаКорреспонденций.Сбросить();
		Пока ВыборкаКорреспонденций.Следующий() Цикл
			
			Если ВыборкаКорреспонденций.ИмяРегистраДт = Запрос.Параметры.ИмяРегистраСлужебныхОбъектовУчета
				Или Не ЗначениеЗаполнено(ОписаниеПравила.ТипДанныхУчетаПриход) Тогда
				ТипДанныхУчетаДт = ОписаниеПравила.ТипДанныхУчетаПриход;
				ПараметрыОтраженияДт = Неопределено;
			Иначе
				ПараметрыОтраженияДт = ОстаточныеФинансовыеРегистры.Получить(ВыборкаКорреспонденций.ИмяРегистраДт);
				ПараметрыОтраженияДт.Вставить("ИмяРегистра", ВыборкаКорреспонденций.ИмяРегистраДт);
				ТипДанныхУчетаДт = ПараметрыОтраженияДт.ТипДанныхУчета;
			КонецЕсли;
			Если ВыборкаКорреспонденций.ИмяРегистраКт = Запрос.Параметры.ИмяРегистраСлужебныхОбъектовУчета
				Или Не ЗначениеЗаполнено(ОписаниеПравила.ТипДанныхУчетаРасход) Тогда
				ТипДанныхУчетаКт = ОписаниеПравила.ТипДанныхУчетаРасход;
				ПараметрыОтраженияКт = Неопределено;
			Иначе
				ПараметрыОтраженияКт = ОстаточныеФинансовыеРегистры.Получить(ВыборкаКорреспонденций.ИмяРегистраКт);
				ПараметрыОтраженияКт.Вставить("ИмяРегистра", ВыборкаКорреспонденций.ИмяРегистраКт);
				ТипДанныхУчетаКт = ПараметрыОтраженияКт.ТипДанныхУчета;
			КонецЕсли;
			ОсновнаяТаблица = (ТипДанныхУчетаДт = ОписаниеПравила.ТипДанныхУчетаПриход
				И ТипДанныхУчетаКт = ОписаниеПравила.ТипДанныхУчетаРасход);
			Если Не ОсновнаяТаблица И ВыборкаКорреспонденций.ИнвертироватьКорреспонденцию Тогда
				ОсновнаяТаблица = (ТипДанныхУчетаДт = ОписаниеПравила.ТипДанныхУчетаРасход Или ПараметрыОтраженияДт = Неопределено)
				И (ТипДанныхУчетаКт = ОписаниеПравила.ТипДанныхУчетаПриход Или ПараметрыОтраженияКт = Неопределено);
				РеверсКорреспонденции = Истина;
			ИначеЕсли ТипДанныхУчетаДт = ТипДанныхУчетаКт И ВыборкаКорреспонденций.ИнвертироватьКорреспонденцию Тогда
				РеверсКорреспонденции = Истина;
			Иначе
				РеверсКорреспонденции = Ложь;
			КонецЕсли;
			Если Счетчик = 1 И Не ОсновнаяТаблица Тогда
				Продолжить;
			ИначеЕсли Счетчик = 2 И ОсновнаяТаблица Тогда
				Продолжить;
			КонецЕсли;
			Если ОсновнаяТаблица И ТаблицаКорреспонденций = Неопределено Тогда
				ТаблицаКорреспонденций = ИсточникиДанныхСервер.ТаблицаКорреспонденцийРегистров(
					ОписаниеПравила.ИсточникДанныхХО, АналитикаКорреспонденций);
			КонецЕсли;
			Если Счетчик = 2 Тогда
				ИсходноеКоличествоРесурсов = СуммовыеРесурсы.Количество();
				Если РеверсКорреспонденции Тогда
					КлючКорреспонденции = ВыборкаКорреспонденций.ИмяРегистраКт + ВыборкаКорреспонденций.ИмяРегистраДт;
					РеверсыКорреспонденций.Добавить(КлючКорреспонденции);
				Иначе
					КлючКорреспонденции = ВыборкаКорреспонденций.ИмяРегистраДт + ВыборкаКорреспонденций.ИмяРегистраКт;
				КонецЕсли;
				Если ТаблицаКорреспонденций.Индексы.Количество() = 0 Тогда
					ТаблицаКорреспонденций.Индексы.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПоляПоискаКорреспонденцииРегистров());
				КонецЕсли;
			КонецЕсли;
			ДобавитьПоказателиВТаблицуКорреспонденций(ТаблицаКорреспонденций, ПараметрыОтраженияКт,
				ПараметрыОтраженияДт, СуммовыеРесурсы, Запрос.Параметры, ОсновнаяТаблица);
			Если Счетчик = 2 Тогда
				НовоеКоличествоРесурсов = СуммовыеРесурсы.Количество();
				Если НовоеКоличествоРесурсов = ИсходноеКоличествоРесурсов
					И ПараметрыОтраженияДт <> Неопределено
					И ПараметрыОтраженияКт <> Неопределено
					// Возможен перенос сумм с одного показателя на другой - в таком случае показатели уже добавлены в основной корреспонденции
					И ВыборкаКорреспонденций.ИмяРегистраДт <> ВыборкаКорреспонденций.ИмяРегистраКт
					// Возможны реверсы корреспонденций - в таком случае показатели возможно уже были добавлены
					И РеверсыКорреспонденций.Найти(КлючКорреспонденции) = Неопределено Тогда
					// В таком случае суммы не добавляются к отражению факта
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ПараметрыКорреспонденции.Вставить("ОсновнаяТаблица", ОсновнаяТаблица);
			ПараметрыКорреспонденции.Вставить("РеверсКорреспонденции", РеверсКорреспонденции);
			
			КолонкиТаблицыАналитикиДт = ТаблицыАналитики[ВыборкаКорреспонденций["ИмяРегистра" + ?(
				РеверсКорреспонденции, "Кт", "Дт")]].СкопироватьКолонки(); // ТаблицаЗначений -
			КолонкиТаблицыАналитикиКт = ТаблицыАналитики[ВыборкаКорреспонденций["ИмяРегистра" + ?(
				РеверсКорреспонденции, "Дт", "Кт")]].СкопироватьКолонки(); // ТаблицаЗначений -
			ПараметрыКорреспонденции.Вставить("КорректировкаАналитикиДт", КорректировкаКолонокАналитикиКорреспонденции(
				КолонкиТаблицыАналитикиДт.Колонки, "Дт", АналитикаКорреспонденций));
			ПараметрыКорреспонденции.Вставить("КорректировкаАналитикиКт", КорректировкаКолонокАналитикиКорреспонденции(
				КолонкиТаблицыАналитикиКт.Колонки, "Кт", АналитикаКорреспонденций));
			
			ПараметрыКорреспонденции.Вставить("ОтборПоПоказателю", Не ((ВыборкаКорреспонденций.ИмяРегистраДт = Запрос.Параметры.ИмяРегистраСлужебныхОбъектовУчета
				Или Запрос.Параметры.РегистрыВосстановленияРасчетовПоСторно.Найти(ВыборкаКорреспонденций.ИмяРегистраДт)
				<> Неопределено) И (ВыборкаКорреспонденций.ИмяРегистраКт = Запрос.Параметры.ИмяРегистраСлужебныхОбъектовУчета
				Или Запрос.Параметры.РегистрыВосстановленияРасчетовПоСторно.Найти(ВыборкаКорреспонденций.ИмяРегистраКт)
				<> Неопределено)));
			
			ВыборкаДвижения.Сбросить();
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаКорреспонденций);
			Пока ВыборкаДвижения.НайтиСледующий(СтруктураПоиска) Цикл
				ДанныеДляЗаполнения.СтрокиАналитикиДт = СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики,
					Запрос.Параметры, "Дт", ПараметрыКорреспонденции);
				ДанныеДляЗаполнения.СтрокиАналитикиКт = СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики,
					Запрос.Параметры, "Кт", ПараметрыКорреспонденции);
				
				ОшибкиПроводок = Новый Массив;
				
				Если Не ФинансовыйУчетПоДаннымБалансовыхРегистров.ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения,
					ДанныеДляЗаполнения.СтрокиАналитикиДт, Запрос.Параметры, ?(РеверсКорреспонденции, "Кт", "Дт")) Тогда
					ОшибкиПроводок.Добавить(СтрШаблон(НСтр(
						"ru = 'Ошибка при подборе аналитики к записи регистра ""%1"" с идентификатором %2.';
						|en = 'An error occurred while picking a dimension for the ""%1"" register record with ID %2.'",
						ОбщегоНазначения.КодОсновногоЯзыка()), ОбщегоНазначения.ПредставлениеОбъекта(
						Метаданные.РегистрыНакопления[ВыборкаДвижения["ИмяРегистра" + ?(РеверсКорреспонденции, "Кт", "Дт")]]),
						ВыборкаДвижения.ИдентификаторФинЗаписи));
				КонецЕсли;

				Если Не ФинансовыйУчетПоДаннымБалансовыхРегистров.ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения,
					ДанныеДляЗаполнения.СтрокиАналитикиКт, Запрос.Параметры, ?(РеверсКорреспонденции, "Дт", "Кт")) Тогда
					ОшибкиПроводок.Добавить(СтрШаблон(НСтр(
						"ru = 'Ошибка при подборе аналитики к записи регистра ""%1"" с идентификатором %2.';
						|en = 'An error occurred while picking a dimension for the ""%1"" register record with ID %2.'",
						ОбщегоНазначения.КодОсновногоЯзыка()), ОбщегоНазначения.ПредставлениеОбъекта(
						Метаданные.РегистрыНакопления[ВыборкаДвижения["ИмяРегистра" + ?(РеверсКорреспонденции, "Дт", "Кт")]]),
						ВыборкаДвижения.ИдентификаторФинЗаписи));
				КонецЕсли;

				Если ДанныеДляЗаполнения.СтрокиАналитикиДт.Количество() > 1
					И ДанныеДляЗаполнения.СтрокиАналитикиКт.Количество() > 1 Тогда
					ОшибкиПроводок.Добавить(СтрШаблон(НСтр(
						"ru = 'Записи регистров ""%1"" и ""%2"" с идентификатором %3 имеют отношение ""многие ко многим"".';
						|en = 'Records of registers ""%1"" and ""%2"" with ID %3 have the Many-to-Many relationship.'",
						ОбщегоНазначения.КодОсновногоЯзыка()), ОбщегоНазначения.ПредставлениеОбъекта(
						Метаданные.РегистрыНакопления[ВыборкаДвижения["ИмяРегистра" + ?(РеверсКорреспонденции, "Кт", "Дт")]]),
						ОбщегоНазначения.ПредставлениеОбъекта(
						Метаданные.РегистрыНакопления[ВыборкаДвижения["ИмяРегистра" + ?(РеверсКорреспонденции, "Дт", "Кт")]]),
						ВыборкаДвижения.ИдентификаторФинЗаписи));
				КонецЕсли;

				Если ОшибкиПроводок.Количество() > 0 Тогда
					ТекстОшибки = "";
					ОшибкиПроводок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОшибкиПроводок);
					Для Каждого ОшибкаПроводки Из ОшибкиПроводок Цикл
						ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + ОшибкаПроводки;
					КонецЦикла;
					СтрокиДокументов = ДокументыКОбработке.НайтиСтроки(Новый Структура("Документ",
						ВыборкаДвижения.Регистратор));
					Для Каждого СтрокаДокумент Из СтрокиДокументов Цикл
						ЗаполнитьЗначенияСвойств(СтрокаДокумент, ВыборкаДвижения);
						СтрокаДокумент.Ошибка = Истина;
						СтрокаДокумент.Комментарий = ТекстОшибки;
					КонецЦикла;
					Продолжить;
				Иначе
					ДобавитьСтрокиТаблицыКорреспонденций(ТаблицаКорреспонденций, ВыборкаДвижения, ДанныеДляЗаполнения,
						АналитикаКорреспонденций, ПараметрыКорреспонденции, СуммовыеРесурсы, ПараметрыФормированияКорреспонденций);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаКорреспонденций.Индексы.Очистить();
	
	ВыборкаКорреспонденций.Сбросить();
	
	ИтогоСуммовыеРесурсы = Новый Массив;
	Для Каждого СуммовойРесурс Из СуммовыеРесурсы Цикл
		ИтогоСуммовыеРесурсы.Добавить(СуммовойРесурс.Значение.ИмяПоказателяУпр);
		ИтогоСуммовыеРесурсы.Добавить(СуммовойРесурс.Значение.ИмяПоказателяРегл);
		Если СуммовойРесурс.Значение.Свойство("ИмяПоказателяВал") Тогда
			ИтогоСуммовыеРесурсы.Добавить(СуммовойРесурс.Значение.ИмяПоказателяВал);
		КонецЕсли;
	КонецЦикла;
	
	// В некоторых случаях приход и расход в корреспонденции со служебными объектами учета.
	// В таком случае необходимо свернуть таблицу.
	Если ВыборкаКорреспонденций.Количество() > 1
		И Не ВыборкаКорреспонденций.НайтиСледующий(Новый Структура("Порядок", 1)) Тогда
		ПерезаполнитьТаблицуКорреспонденцийПоАналитикеПриходРасход(ТаблицаКорреспонденций, АналитикаКорреспонденций,
			ИтогоСуммовыеРесурсы);
	КонецЕсли;
	
	// Составные суммовые ресурсы добавляются последовательно
	Для Счетчик = 1 По 3 Цикл
		СоставныеСуммовыеРесурсы = ИсточникиДанныхСервер.СоставныеСуммовыеРесурсы(ИтогоСуммовыеРесурсы, Счетчик);
		Для Каждого КлючИЗначение Из СоставныеСуммовыеРесурсы Цикл
			Если ТаблицаКорреспонденций.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				ТаблицаКорреспонденций.Колонки.Добавить(КлючИЗначение.Ключ, ПараметрыФормированияКорреспонденций.ПараметрыЗаполнения.ОписаниеТипаДенежногоПоля);
				ИтогоСуммовыеРесурсы.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
			Если ПустаяСтрока(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаТаблицы Из ТаблицаКорреспонденций Цикл
				Если Счетчик < 3 Тогда
					Для Каждого ИмяКолонки Из КлючИЗначение.Значение Цикл
						СтрокаТаблицы[КлючИЗначение.Ключ] = СтрокаТаблицы[КлючИЗначение.Ключ] + СтрокаТаблицы[ИмяКолонки];
					КонецЦикла;
				Иначе
					Для Каждого ИмяКолонки Из КлючИЗначение.Значение Цикл
						Если СтрНайти(ИмяКолонки, "-") > 0 Тогда
							ИмяКолонки = СтрЗаменить(ИмяКолонки, "-", "");
							КоэффициентРесурса = -1;
						Иначе
							КоэффициентРесурса = 1;
						КонецЕсли;
						СтрокаТаблицы[КлючИЗначение.Ключ] = СтрокаТаблицы[КлючИЗначение.Ключ] + СтрокаТаблицы[ИмяКолонки] * КоэффициентРесурса;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СкорректироватьСуммовыеРесурсы(ТаблицаКорреспонденций, ОписаниеПравила.ТипДанныхУчетаПриход, ОписаниеПравила.ТипДанныхУчетаРасход, ИтогоСуммовыеРесурсы);
	
	ПоляГруппировок = СтрРазделить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПоляПоискаКорреспонденцииРегистров(), ",", );
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляГруппировок, АналитикаКорреспонденций.АналитикаКт, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляГруппировок, АналитикаКорреспонденций.АналитикаДт, Истина);
	Если ТаблицаКорреспонденций.Колонки.Найти("Валюта") <> Неопределено Тогда
		ПоляГруппировок.Добавить("Валюта");
	КонецЕсли;
	Если ТаблицаКорреспонденций.Колонки.Найти("Количество") <> Неопределено Тогда
		ИтогоСуммовыеРесурсы.Добавить("Количество");
		Если ТаблицаКорреспонденций.Колонки.Найти("КорКоличество") <> Неопределено Тогда
			ИтогоСуммовыеРесурсы.Добавить("КорКоличество");
		КонецЕсли;
	КонецЕсли;
	ТаблицаКорреспонденций.Свернуть(СтрСоединить(ПоляГруппировок, ","), СтрСоединить(ИтогоСуммовыеРесурсы, ","));
	
	Возврат ТаблицаКорреспонденций;
	
КонецФункции

Функция ЕстьДокументыДляФормированияКорреспонденцийЗаписейРегистров(ДокументыКОбработке, Запрос, ТекстыЗапросов)

	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДокументыКОбработке.Документ КАК Регистратор
	|ПОМЕСТИТЬ ДокументыКОбработке
	|ИЗ
	|	&ДокументыКОбработке КАК ДокументыКОбработке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор");
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("КэшДокументов") <> Неопределено Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ДокументыКОбработке.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	ДокументыКОбработке КАК ДокументыКОбработке
		|ГДЕ
		|	НЕ ДокументыКОбработке.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|	И НЕ ДокументыКОбработке.Регистратор ССЫЛКА Документ.ЗаявкаНаКомандировку
		|	И НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					КэшДокументов КАК КэшДокументов
		|				ГДЕ
		|					КэшДокументов.Регистратор = ДокументыКОбработке.Регистратор
		|					И КэшДокументов.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор");
	Иначе
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ДокументыКОбработке.Регистратор
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	ДокументыКОбработке КАК ДокументыКОбработке
		|ГДЕ
		|	НЕ ДокументыКОбработке.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|	И НЕ ДокументыКОбработке.Регистратор ССЫЛКА Документ.ЗаявкаНаКомандировку
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументыКОбработке", ДокументыКОбработке);
	
	Возврат ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, "ДокументыКОтражению");

КонецФункции

Процедура ПерезаполнитьТаблицуКорреспонденцийПоАналитикеПриходРасход(ТаблицаКорреспонденций, АналитикаКорреспонденций, СуммовыеРесурсы)
	
	ТаблицаКорреспонденцийПриход = ТаблицаКорреспонденций.СкопироватьКолонки();
	ТаблицаКорреспонденцийРасход = ТаблицаКорреспонденций.СкопироватьКолонки();
	АналитикаПриход = СтрСоединить(АналитикаКорреспонденций.АналитикаДт, ",");
	АналитикаРасход = СтрСоединить(АналитикаКорреспонденций.АналитикаКт, ",");
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаКорреспонденций.Количество() Цикл
		СтрокаТаблицы = ТаблицаКорреспонденций[Счетчик];
		ЭтоПриход = Ложь;
		ЭтоРасход = Ложь;
		Для Каждого Аналитика Из АналитикаКорреспонденций.АналитикаДт Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы[Аналитика]) Тогда
				ЭтоПриход = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Аналитика Из АналитикаКорреспонденций.АналитикаКт Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы[Аналитика]) Тогда
				ЭтоРасход = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоПриход = ЭтоРасход Тогда
			Счетчик = Счетчик + 1;
			Продолжить;
		КонецЕсли;
		Если ЭтоПриход Тогда
			НоваяСтрока = ТаблицаКорреспонденцийПриход.Добавить();
		Иначе
			НоваяСтрока = ТаблицаКорреспонденцийРасход.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		ТаблицаКорреспонденций.Удалить(Счетчик);
	КонецЦикла;
	
	СуммовыеРесурсыПоСтроке = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(СуммовыеРесурсы, Истина);
	
	Если ТаблицаКорреспонденцийПриход.Количество() > 0
		И ТаблицаКорреспонденцийРасход.Количество() > 0 Тогда
		СчетчикПриход = 0;
		Пока СчетчикПриход < ТаблицаКорреспонденцийПриход.Количество() Цикл
			СтрокаПриход = ТаблицаКорреспонденцийПриход[СчетчикПриход];
			СчетчикРасход = 0;
			Пока СчетчикРасход < ТаблицаКорреспонденцийРасход.Количество() Цикл
				ОстатокПоРесурсамПриход = 0;
				ОстатокПоРесурсамРасход = 0;
				СтрокаРасход = ТаблицаКорреспонденцийРасход[СчетчикРасход];
				Для Каждого Ресурс Из СуммовыеРесурсы Цикл
					СуммовыеРесурсыПоСтроке[Ресурс] = Мин(СтрокаПриход[Ресурс], СтрокаРасход[Ресурс]);
					СтрокаПриход[Ресурс] = СтрокаПриход[Ресурс] - СуммовыеРесурсыПоСтроке[Ресурс];
					ОстатокПоРесурсамПриход = ОстатокПоРесурсамПриход + СтрокаПриход[Ресурс];
					СтрокаРасход[Ресурс] = СтрокаРасход[Ресурс] - СуммовыеРесурсыПоСтроке[Ресурс];
					ОстатокПоРесурсамРасход = ОстатокПоРесурсамРасход + СтрокаРасход[Ресурс];
				КонецЦикла;
				НоваяСтрока = ТаблицаКорреспонденций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриход, "Период,Регистратор,Организация,Валюта");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриход, АналитикаПриход);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасход, АналитикаРасход);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СуммовыеРесурсыПоСтроке);
				Если ОстатокПоРесурсамРасход = 0 Тогда
					ТаблицаКорреспонденцийРасход.Удалить(СчетчикРасход);
				Иначе
					СчетчикРасход = СчетчикРасход + 1;
				КонецЕсли;
				Если ОстатокПоРесурсамПриход = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ОстатокПоРесурсамПриход = 0 Тогда
				ТаблицаКорреспонденцийПриход.Удалить(СчетчикПриход);
			Иначе
				СчетчикПриход = СчетчикПриход + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПриход Из ТаблицаКорреспонденцийПриход Цикл
		НоваяСтрока = ТаблицаКорреспонденций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриход);
	КонецЦикла;
	Для Каждого СтрокаРасход Из ТаблицаКорреспонденцийРасход Цикл
		НоваяСтрока = ТаблицаКорреспонденций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасход);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьСуммовыеРесурсы(ТаблицаКорреспонденций, ТипДанныхУчетаПриход, ТипДанныхУчетаРасход, СуммовыеРесурсы)
	
	ТипыДанныхУчета = Новый Массив;
	ТипыДанныхУчета.Добавить(ТипДанныхУчетаПриход);
	Если ТипДанныхУчетаРасход <> ТипДанныхУчетаПриход Тогда
		ТипыДанныхУчета.Добавить(ТипДанныхУчетаРасход);
	КонецЕсли;
	
	ЗаменяемыеСуммовыеРесурсы = Новый Соответствие;
	// Замена с удалением дубля
	ЗаменяемыеСуммовыеРесурсы.Вставить("СтоимостьСНДСУпр", "СтоимостьУпр");
	ЗаменяемыеСуммовыеРесурсы.Вставить("СуммаДопРасходовСНДСУпр", "СуммаДопРасходовУпр");
	
	Для Каждого ЗаменяемыйРесурс Из ЗаменяемыеСуммовыеРесурсы Цикл
		Если ТаблицаКорреспонденций.Колонки.Найти(ЗаменяемыйРесурс.Ключ) <> Неопределено Тогда
			ТаблицаКорреспонденций.Колонки.Удалить(ЗаменяемыйРесурс.Значение);
			ТаблицаКорреспонденций.Колонки[ЗаменяемыйРесурс.Ключ].Имя = ЗаменяемыйРесурс.Значение;
			СуммовыеРесурсы.Удалить(СуммовыеРесурсы.Найти(ЗаменяемыйРесурс.Ключ));
		КонецЕсли;
	КонецЦикла;
	
	ЗаменяемыеСуммовыеРесурсы.Очистить();
	// Замена без удаления дубля
	ЗаменяемыеСуммовыеРесурсы.Вставить("СебестоимостьСНДСУпр", "СебестоимостьУпр");
	
	Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.Контрагенты) <> Неопределено Тогда
		Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.ДенежныеСредства) = Неопределено Тогда
			ЗаменяемыеСуммовыеРесурсы.Вставить("СуммаОплатыУпр", "СуммаУпр");
			ЗаменяемыеСуммовыеРесурсы.Вставить("СуммаОплатыРегл", "СуммаРегл");
			ЗаменяемыеСуммовыеРесурсы.Вставить("СуммаОплатыВал", "СуммаВал");
		Иначе
			ЗаменяемыеСуммовыеРесурсы.Вставить("СуммаУпр", "СуммаОплатыУпр");
			ЗаменяемыеСуммовыеРесурсы.Вставить("СуммаРегл", "СуммаОплатыРегл");
			ЗаменяемыеСуммовыеРесурсы.Вставить("СуммаВал", "СуммаОплатыВал");
		КонецЕсли;
		Если ТипДанныхУчетаПриход = Перечисления.ТипыДанныхУчета.Номенклатура Тогда
			ЗаменяемыеСуммовыеРесурсы.Вставить("СебестоимостьСНДСУпр", "СуммаБезНДСУпр");
			ЗаменяемыеСуммовыеРесурсы.Вставить("СебестоимостьРегл", "СуммаБезНДСРегл");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЗаменяемыйРесурс Из ЗаменяемыеСуммовыеРесурсы Цикл
		Если ТаблицаКорреспонденций.Колонки.Найти(ЗаменяемыйРесурс.Ключ) <> Неопределено Тогда
			Если ТаблицаКорреспонденций.Колонки.Найти(ЗаменяемыйРесурс.Значение) = Неопределено Тогда
				ТаблицаКорреспонденций.Колонки[ЗаменяемыйРесурс.Ключ].Имя = ЗаменяемыйРесурс.Значение;
				СуммовыеРесурсы.Добавить(ЗаменяемыйРесурс.Значение);
			Иначе
				Для Каждого СтрокаТаблицы Из ТаблицаКорреспонденций.НайтиСтроки(Новый Структура(ЗаменяемыйРесурс.Значение, 0)) Цикл
					СтрокаТаблицы[ЗаменяемыйРесурс.Значение] = СтрокаТаблицы[ЗаменяемыйРесурс.Ключ];
				КонецЦикла;
				ТаблицаКорреспонденций.Колонки.Удалить(ЗаменяемыйРесурс.Ключ);
			КонецЕсли;
			СуммовыеРесурсы.Удалить(СуммовыеРесурсы.Найти(ЗаменяемыйРесурс.Ключ));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаЗапросаАналитики(РезультатЗапроса)
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	ОбязательныеПоляИндекса = "Период,Регистратор,ИдентификаторФинЗаписи,ИдентификаторСтроки,ИмяРегистра,Организация";
	
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",ЭтоДебет,ЭтоСторно,Показатель");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",ЭтоКредит,ЭтоСторно,Показатель");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",НастройкаХозОперации,ЭтоДебет,ЭтоСторно,Показатель");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",НастройкаХозОперации,ЭтоКредит,ЭтоСторно,Показатель");
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Функция СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики, ПараметрыЗапроса, ДтКт, ПараметрыКорреспонденции)
	
	КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
	РеверсКорреспонденции = ПараметрыКорреспонденции.РеверсКорреспонденции;
	
	ИмяРегистра = ВыборкаДвижения["ИмяРегистра" + ?(РеверсКорреспонденции, КорДтКт, ДтКт)];
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Период", ВыборкаДвижения.Период);
	СтруктураПоиска.Вставить("Регистратор", ВыборкаДвижения.Регистратор);
	СтруктураПоиска.Вставить("ИдентификаторФинЗаписи", ВыборкаДвижения.ИдентификаторФинЗаписи);
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ВыборкаДвижения["ИдентификаторСтроки" + ?(РеверсКорреспонденции, КорДтКт, ДтКт)]);
	СтруктураПоиска.Вставить("ИмяРегистра", ИмяРегистра);
	СтруктураПоиска.Вставить("Организация", ВыборкаДвижения.Организация);
	
	Если ВыборкаДвижения.УчитыватьХозОперацию Тогда
		СтруктураПоиска.Вставить("НастройкаХозОперации", ВыборкаДвижения.НастройкаХозОперации);
	КонецЕсли;
	
	Если ДтКт = "Дт" Тогда
		СтруктураПоиска.Вставить(?(РеверсКорреспонденции, "ЭтоДебет", "ЭтоКредит"), Ложь);
	Иначе
		СтруктураПоиска.Вставить(?(РеверсКорреспонденции, "ЭтоКредит", "ЭтоДебет"), Ложь);
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ЭтоСторно",
		?(РеверсКорреспонденции, ВыборкаДвижения["ЭтоСторно"+КорДтКт], ВыборкаДвижения["ЭтоСторно" + ДтКт]));
	
	Если ПараметрыКорреспонденции.ОтборПоПоказателю Тогда
		СтруктураПоиска.Вставить("Показатель", ВыборкаДвижения["Показатель" + ?(РеверсКорреспонденции, КорДтКт, ДтКт)]);
	КонецЕсли;
	
	СтрокиАналитики = ТаблицыАналитики[ИмяРегистра].Скопировать(СтруктураПоиска); // ТаблицаЗначений -
	
	СоответствиеАналитикиКорреспонденций = ПараметрыКорреспонденции["КорректировкаАналитики"+ДтКт];
	Для Каждого КлючИЗначение Из СоответствиеАналитикиКорреспонденций Цикл
		СтрокиАналитики.Колонки[КлючИЗначение.Ключ].Имя = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат СтрокиАналитики;
	
КонецФункции

Функция ПараметрыЗаполненияКорреспонденций()

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПоляПоиска", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПоляПоискаКорреспонденцииРегистров());
	ПараметрыЗаполнения.Вставить("ИмяСлужебногоРегистра", ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета());
	ПараметрыЗаполнения.Вставить("ПараметрыРесурсов", ИсточникиДанныхПовтИсп.ПараметрыРесурсовСуммыИКоличества());
	ПараметрыЗаполнения.Вставить("ОписаниеТипаДенежногоПоля", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	
	Возврат ПараметрыЗаполнения;

КонецФункции

Функция КорректировкаКолонокАналитикиКорреспонденции(КолонкиТаблицыАналитики, ДтКт, АналитикаКорреспонденций)
	
	КорректировкаКолонок = Новый Соответствие;
	
	МассивАналитик = АналитикаКорреспонденций["Аналитика" + ДтКт];
	КорАналитика = АналитикаКорреспонденций.КорАналитика;
	Для Каждого ИмяАналитики Из МассивАналитик Цикл
		Если КолонкиТаблицыАналитики.Найти(ИмяАналитики) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли КорАналитика.Получить(ИмяАналитики) <> Неопределено Тогда
			СкорректированноеИмяАналитики = КорАналитика[ИмяАналитики];
			Если КолонкиТаблицыАналитики.Найти(СкорректированноеИмяАналитики) <> Неопределено Тогда
				КорректировкаКолонок.Вставить(СкорректированноеИмяАналитики, ИмяАналитики);
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяАналитики, "НаправлениеДеятельности") > 0 И ИмяАналитики <> "НаправлениеДеятельности" Тогда
			КорректировкаКолонок.Вставить("НаправлениеДеятельности", ИмяАналитики);
		ИначеЕсли ИмяАналитики = "ПодразделениеДоходовРасходов" Или ИмяАналитики = "ПодразделениеАктивовПассивов" Тогда
			КорректировкаКолонок.Вставить("Подразделение", ИмяАналитики);
		ИначеЕсли ИмяАналитики = "Статья" И КолонкиТаблицыАналитики.Найти("СтатьяДоходовРасходов") <> Неопределено Тогда
			КорректировкаКолонок.Вставить("СтатьяДоходовРасходов", "Статья");
		КонецЕсли;
	КонецЦикла;
	
	Возврат КорректировкаКолонок;
	
КонецФункции

Процедура ДобавитьПоказателиВТаблицуКорреспонденций(ТаблицаКорреспонденций, ПараметрыОтраженияКт, ПараметрыОтраженияДт,
	СуммовыеРесурсы, ПараметрыЗапроса, ОсновнаяТаблица)
	
	Показатели = Новый Массив;
	
	Если Не ((ПараметрыОтраженияКт = Неопределено
		Или ПараметрыЗапроса.РегистрыВосстановленияРасчетовПоСторно.Найти(ПараметрыОтраженияКт.ИмяРегистра) <> Неопределено)
		И (ПараметрыОтраженияДт = Неопределено
		Или ПараметрыЗапроса.РегистрыВосстановленияРасчетовПоСторно.Найти(ПараметрыОтраженияДт.ИмяРегистра) <> Неопределено)) Тогда
	
		Если ПараметрыОтраженияКт <> Неопределено Тогда
			Для Каждого Показатель Из ПараметрыОтраженияКт.Показатели Цикл
				Если ПараметрыЗапроса.ПоказателиПоКорреспондирующимРегистрам.Найти(Показатель.Ключ) = Неопределено
					Или ПараметрыОтраженияДт <> Неопределено
					И ПараметрыОтраженияДт.Показатели.Получить(Показатель.Ключ) <> Неопределено
					И ПараметрыОтраженияКт.ИмяРегистра <> ПараметрыОтраженияДт.ИмяРегистра Тогда
					Показатели.Добавить(Показатель.Ключ);
				КонецЕсли;
			КонецЦикла;
			Если ОсновнаяТаблица И ПараметрыОтраженияКт.РесурсыКоличество.Количество() > 0
				И ТаблицаКорреспонденций.Колонки.Найти("Количество") = Неопределено Тогда
				ТаблицаКорреспонденций.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
			КонецЕсли;
		Иначе
			ПоказателиСлужебные = ИсточникиДанныхПовтИсп.ПоказателиСуммыПоУмолчаниюПоИсточникуДанных(ПараметрыЗапроса.НастройкаХозОперации);
			Для Каждого Показатель Из ПоказателиСлужебные Цикл
				Показатели.Добавить(Показатель);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОтраженияДт <> Неопределено Тогда
			Для Каждого Показатель Из ПараметрыОтраженияДт.Показатели Цикл
				Если Показатели.Найти(Показатель.Ключ) <> Неопределено Тогда
					Продолжить;
				ИначеЕсли ПараметрыЗапроса.ПоказателиПоКорреспондирующимРегистрам.Найти(Показатель.Ключ) = Неопределено Тогда
					Показатели.Добавить(Показатель.Ключ);
				КонецЕсли;
			КонецЦикла;
			Если ОсновнаяТаблица И ПараметрыОтраженияДт.РесурсыКоличество.Количество() > 0 Тогда
				Если ТаблицаКорреспонденций.Колонки.Найти("Количество") = Неопределено Тогда
					ТаблицаКорреспонденций.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
				ИначеЕсли ТаблицаКорреспонденций.Колонки.Найти("КорКоличество") = Неопределено Тогда
					ТаблицаКорреспонденций.Колонки.Добавить("КорКоличество", ТаблицаКорреспонденций.Колонки.Количество.ТипЗначения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПоказателиСлужебные = ИсточникиДанныхПовтИсп.ПоказателиСуммыПоУмолчаниюПоИсточникуДанных(ПараметрыЗапроса.НастройкаХозОперации);
			Для Каждого Показатель Из ПоказателиСлужебные Цикл
				Если Показатели.Найти(Показатель) = Неопределено Тогда
					Показатели.Добавить(Показатель);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Показатели.Количество() = 0 Тогда
		Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.Сумма);
	КонецЕсли;
	
	ОписаниеТипаДенежногоПоля = РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля();
	ИменаПоказателей = ИсточникиДанныхПовтИсп.ИменаСуммовыхПоказателей();
	Для Каждого Показатель Из Показатели Цикл
		ИмяПоказателя = ИменаПоказателей.Получить(Показатель);
		Если ИмяПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоказателяУпр = ИмяПоказателя.Упр;
		ИмяПоказателяРегл = ИмяПоказателя.Регл;
		ИмяПоказателяВал = ИмяПоказателя.Вал;
		Если ТаблицаКорреспонденций.Колонки.Найти(ИмяПоказателяУпр) = Неопределено Тогда
			ТаблицаКорреспонденций.Колонки.Добавить(ИмяПоказателяУпр, ОписаниеТипаДенежногоПоля);
			ТаблицаКорреспонденций.Колонки.Добавить(ИмяПоказателяРегл, ОписаниеТипаДенежногоПоля);
			СуммовыеРесурсы.Вставить(Показатель, Новый Структура("ИмяПоказателяУпр, ИмяПоказателяРегл", ИмяПоказателяУпр, ИмяПоказателяРегл));
			Если ПараметрыОтраженияКт <> Неопределено И ПараметрыОтраженияКт.РесурсыВал.Количество() > 0
				Или ПараметрыОтраженияДт <> Неопределено И ПараметрыОтраженияДт.РесурсыВал.Количество() > 0 Тогда
				ТаблицаКорреспонденций.Колонки.Добавить(ИмяПоказателяВал, ОписаниеТипаДенежногоПоля);
				СуммовыеРесурсы[Показатель].Вставить("ИмяПоказателяВал", ИмяПоказателяВал);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокиТаблицыКорреспонденций(ТаблицаКорреспонденций, ВыборкаДвижения, ДанныеДляЗаполнения,
	АналитикаКорреспонденций, ПараметрыКорреспонденции, СуммовыеРесурсы, ПараметрыФормированияКорреспонденций)
	
	СтрокиАналитикиДт = ДанныеДляЗаполнения.СтрокиАналитикиДт;
	СтрокиАналитикиКт = ДанныеДляЗаполнения.СтрокиАналитикиКт;
	
	ОсновнаяТаблица = ПараметрыКорреспонденции.ОсновнаяТаблица;
	РеверсКорреспонденции = ПараметрыКорреспонденции.РеверсКорреспонденции;
	
	ПоляПоиска = ПараметрыФормированияКорреспонденций.ПараметрыЗаполнения.ПоляПоиска;
	ИмяСлужебногоРегистра = ПараметрыФормированияКорреспонденций.ПараметрыЗаполнения.ИмяСлужебногоРегистра;
	ПараметрыРесурсов = ПараметрыФормированияКорреспонденций.ПараметрыЗаполнения.ПараметрыРесурсов;
	
	Если СтрокиАналитикиДт.Количество() > 1
		Или ДанныеДляЗаполнения.СтрокиАналитикиКт.Количество() > 1 Тогда
		Если СтрокиАналитикиДт.Количество() > 1 Тогда
			МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
			ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
		Иначе
			ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
			МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
		КонецЕсли;
	ИначеЕсли ВыборкаДвижения["ИмяРегистра" + ?(РеверсКорреспонденции, "Кт", "Дт")] = ИмяСлужебногоРегистра Тогда
		МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
		ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
	Иначе
		МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
		ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
	КонецЕсли;
	
	Если РеверсКорреспонденции Тогда
		МногоАналитик.Вставить("ДтКт", ?(МногоАналитик.ДтКт = "Дт", "Кт", "Дт"));
		ОднаАналитика.Вставить("ДтКт", ?(ОднаАналитика.ДтКт = "Дт", "Кт", "Дт"));
	КонецЕсли;
	РесурсыМногихАналитик = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПересчитанныеРесурсыМногихАналитик(
		ВыборкаДвижения, МногоАналитик, ПараметрыРесурсов);
	РесурсыОднойАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.РаспределенныеРесурсыОднойАналитики(
		ВыборкаДвижения, ОднаАналитика, РесурсыМногихАналитик, ПараметрыРесурсов);
	Если РеверсКорреспонденции Тогда
		МногоАналитик.Вставить("ДтКт", ?(МногоАналитик.ДтКт = "Дт", "Кт", "Дт"));
		ОднаАналитика.Вставить("ДтКт", ?(ОднаАналитика.ДтКт = "Дт", "Кт", "Дт"));
	КонецЕсли;
	
	Коэффициент = ?(РеверсКорреспонденции Или ВыборкаДвижения.ИнвертироватьПроводку И ВыборкаДвижения.ИмяРегистраДт = ВыборкаДвижения.ИмяРегистраКт, -1, 1);
	
	Для Счетчик = 1 По МногоАналитик.СтрокиАналитики.Количество() Цикл
		
		СтрокаАналитики = МногоАналитик.СтрокиАналитики[Счетчик-1];
		Если ОсновнаяТаблица Тогда
			НоваяСтрока = ТаблицаКорреспонденций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДвижения, ПоляПоиска);
			Если СтрокаАналитики.ИмяРегистра <> ИмяСлужебногоРегистра Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАналитики, СтрСоединить(АналитикаКорреспонденций["Аналитика"
					+ МногоАналитик.ДтКт], ","));
			КонецЕсли;
			Если ОднаАналитика.СтрокиАналитики[0].ИмяРегистра <> ИмяСлужебногоРегистра Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОднаАналитика.СтрокиАналитики[0], СтрСоединить(
					АналитикаКорреспонденций["Аналитика" + ОднаАналитика.ДтКт], ","));
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДвижения.ИдентификаторСтрокиДт)
				И СтрДлина(ВыборкаДвижения.ИдентификаторСтрокиДт) = 36 Тогда
				НоваяСтрока.ИдентификаторФинЗаписи = ВыборкаДвижения.ИдентификаторСтрокиДт;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаДвижения.ИдентификаторСтрокиКт)
				И СтрДлина(ВыборкаДвижения.ИдентификаторСтрокиКт) = 36 Тогда
				НоваяСтрока.ИдентификаторФинЗаписи = ВыборкаДвижения.ИдентификаторСтрокиКт;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаАналитики.Валюта) Тогда
				НоваяСтрока.Валюта = СтрокаАналитики.Валюта;
				Если ЗначениеЗаполнено(РесурсыОднойАналитики[Счетчик-1].Валюта)
					И ТаблицаКорреспонденций.Колонки.Найти("КорВалюта") <> Неопределено Тогда
					НоваяСтрока.КорВалюта = РесурсыОднойАналитики[Счетчик-1].Валюта;
				КонецЕсли;
			Иначе
				НоваяСтрока.Валюта = РесурсыОднойАналитики[Счетчик-1].Валюта;
			КонецЕсли;
		Иначе
			СтруктураПоиска = Новый Структура(ПоляПоиска);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДвижения);
			Если ЗначениеЗаполнено(ВыборкаДвижения.ИдентификаторСтрокиДт) Тогда
				СтруктураПоиска.ИдентификаторФинЗаписи = ВыборкаДвижения.ИдентификаторСтрокиДт;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаДвижения.ИдентификаторСтрокиКт) Тогда
				СтруктураПоиска.ИдентификаторФинЗаписи = ВыборкаДвижения.ИдентификаторСтрокиКт;
			КонецЕсли;
			ЭтоПереносСуммы = ВыборкаДвижения.ИмяРегистраДт = ВыборкаДвижения.ИмяРегистраКт
				И ЗначениеЗаполнено(ВыборкаДвижения.ПоказательДт)
				И ЗначениеЗаполнено(ВыборкаДвижения.ПоказательКт)
				И ВыборкаДвижения.ПоказательДт <> ВыборкаДвижения.ПоказательКт;
			Если ЭтоПереносСуммы Тогда
				СтруктураПоиска.Удалить("Период");
			КонецЕсли;
			НайденныеСтроки = ТаблицаКорреспонденций.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		МассивПоказателей = Новый Массив;
		Если ВыборкаДвижения.ИмяРегистраДт <> ИмяСлужебногоРегистра Тогда
			МассивПоказателей.Добавить(ВыборкаДвижения.ПоказательДт);
		Иначе
			ПоказателиСлужебные = ИсточникиДанныхПовтИсп.ПоказателиСуммыПоУмолчаниюПоИсточникуДанных(
				ВыборкаДвижения.НастройкаХозОперации);
			МассивПоказателей.Добавить(ПоказателиСлужебные[0]);
		КонецЕсли;
		Если ВыборкаДвижения.ИмяРегистраКт <> ИмяСлужебногоРегистра Тогда
			МассивПоказателей.Добавить(ВыборкаДвижения.ПоказательКт);
		Иначе
			ПоказателиСлужебные = ИсточникиДанныхПовтИсп.ПоказателиСуммыПоУмолчаниюПоИсточникуДанных(
				ВыборкаДвижения.НастройкаХозОперации);
			МассивПоказателей.Добавить(ПоказателиСлужебные[0]);
		КонецЕсли;
		МассивПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателей);
		// Пустой показатель может быть только один - тогда используются колонки СуммаУпр, СуммаРегл, СуммаВал
		Если МассивПоказателей.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивПоказателей,
				Перечисления.ПоказателиАналитическихРегистров.ПустаяСсылка());
			Если МассивПоказателей.Найти(Перечисления.ПоказателиАналитическихРегистров.Сумма) <> Неопределено
				И (ВыборкаДвижения.ИмяРегистраДт = ИмяСлужебногоРегистра
				Или ВыборкаДвижения.ИмяРегистраКт = ИмяСлужебногоРегистра)
				И МассивПоказателей.Количество() > 1 Тогда
				// Если для основного регистра задан показатель, то показатель Сумма для служебного регистра не нужен
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивПоказателей,
					Перечисления.ПоказателиАналитическихРегистров.Сумма);
			КонецЕсли;
		КонецЕсли;
		Для Каждого Показатель Из МассивПоказателей Цикл
			Если Не ОсновнаяТаблица И ЭтоПереносСуммы И Показатель = ВыборкаДвижения.ПоказательКт Тогда
				КоэффициентПереносаСуммы = -1;
			Иначе
				КоэффициентПереносаСуммы = 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(Показатель) Тогда
				ИменаПоказателя = СуммовыеРесурсы.Получить(Показатель);
			Иначе
				ИменаПоказателя = СуммовыеРесурсы.Получить(Перечисления.ПоказателиАналитическихРегистров.Сумма);
			КонецЕсли;
			НоваяСтрока[ИменаПоказателя.ИмяПоказателяУпр] = ?(Не ОсновнаяТаблица, НоваяСтрока[ИменаПоказателя.ИмяПоказателяУпр], 0)
				+ РесурсыМногихАналитик[Счетчик - 1].СуммаУпр * Коэффициент * КоэффициентПереносаСуммы;
			НоваяСтрока[ИменаПоказателя.ИмяПоказателяРегл] = ?(Не ОсновнаяТаблица, НоваяСтрока[ИменаПоказателя.ИмяПоказателяРегл], 0)
				+ РесурсыМногихАналитик[Счетчик - 1].СуммаРегл * Коэффициент * КоэффициентПереносаСуммы;
			Если ИменаПоказателя.Свойство("ИмяПоказателяВал")
				И ТаблицаКорреспонденций.Колонки.Найти(ИменаПоказателя.ИмяПоказателяВал) <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаАналитики.СуммаВал) Тогда
					НоваяСтрока[ИменаПоказателя.ИмяПоказателяВал] = ?(Не ОсновнаяТаблица, НоваяСтрока[ИменаПоказателя.ИмяПоказателяВал], 0)
						+ РесурсыМногихАналитик[Счетчик - 1].СуммаВал * Коэффициент * КоэффициентПереносаСуммы;
				Иначе
					НоваяСтрока[ИменаПоказателя.ИмяПоказателяВал] = ?(Не ОсновнаяТаблица, НоваяСтрока[ИменаПоказателя.ИмяПоказателяВал], 0)
						+ РесурсыОднойАналитики[Счетчик - 1].СуммаВал * Коэффициент * КоэффициентПереносаСуммы;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаКорреспонденций.Колонки.Найти("Количество") <> Неопределено Тогда
			Если ТаблицаКорреспонденций.Колонки.Найти("КорКоличество") <> Неопределено Тогда
				Если ВыборкаДвижения["Количественный"+?(РеверсКорреспонденции, "Дт", "Кт")] Тогда
					НоваяСтрока.Количество = ?(МногоАналитик.ДтКт = "Дт", РесурсыОднойАналитики[Счетчик
						- 1].Количество, РесурсыМногихАналитик[Счетчик - 1].Количество) * Коэффициент;
				КонецЕсли;
				Если ВыборкаДвижения["Количественный"+?(РеверсКорреспонденции, "Кт", "Дт")] Тогда
					НоваяСтрока.КорКоличество = ?(МногоАналитик.ДтКт = "Дт", РесурсыМногихАналитик[Счетчик
						- 1].Количество, РесурсыОднойАналитики[Счетчик - 1].Количество) * Коэффициент;
				КонецЕсли;
			ИначеЕсли ВыборкаДвижения.КоличественныйДт Или ВыборкаДвижения.КоличественныйКт Тогда
				НоваяСтрока.Количество = ?(ЗначениеЗаполнено(СтрокаАналитики.Количество), РесурсыМногихАналитик[Счетчик
					- 1].Количество, РесурсыОднойАналитики[Счетчик - 1].Количество) * Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ТекстыЗапросовОбработкиДвиженийРегистров

Процедура ОбработатьИСоединитьТаблицыДвижений(Запрос, ТекстыЗапросов)
	
	СвернутьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов, "Дт");
	СвернутьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов, "Кт");
	
	ОпределитьСложныеПроводкиСУказаниемКорИсточников(Запрос, ТекстыЗапросов);
	
	ДобавитьИдентификаторыИсточниковДанных(ТекстыЗапросов, Запрос.Параметры, "Дт");
	ДобавитьИдентификаторыИсточниковДанных(ТекстыЗапросов, Запрос.Параметры, "Кт");
	
	ДобавитьИтогиПоОперациямИФинЗаписям(ТекстыЗапросов, "Дт");
	ДобавитьИтогиПоОперациямИФинЗаписям(ТекстыЗапросов, "Кт");
	
	СоединитьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСИтогамиДебет");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСИтогамиКредит");
	
КонецПроцедуры

Процедура СвернутьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	втДвиженияРегистровДтКт.Период КАК Период,
	|	втДвиженияРегистровДтКт.ИмяРегистра КАК ИмяРегистра,
	|	втДвиженияРегистровДтКт.ЭтоДтКт КАК ЭтоДтКт,
	|	втДвиженияРегистровДтКт.ЭтоСторно КАК ЭтоСторно,
	|	втДвиженияРегистровДтКт.Регистратор КАК Регистратор,
	|	втДвиженияРегистровДтКт.Организация КАК Организация,
	|	втДвиженияРегистровДтКт.НастройкаХозОперации КАК НастройкаХозОперации,
	|	втДвиженияРегистровДтКт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	втДвиженияРегистровДтКт.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	втДвиженияРегистровДтКт.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	втДвиженияРегистровДтКт.Валюта КАК Валюта,
	|	втДвиженияРегистровДтКт.Показатель КАК Показатель,
	|	втДвиженияРегистровДтКт.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	втДвиженияРегистровДтКт.РеквизитСторно КАК РеквизитСторно,
	|	МАКСИМУМ(втДвиженияРегистровДтКт.НомерЗаписи) КАК НомерЗаписи,
	|	СУММА(втДвиженияРегистровДтКт.СуммаУпр) КАК СуммаУпр,
	|	СУММА(втДвиженияРегистровДтКт.СуммаРегл) КАК СуммаРегл,
	|	СУММА(втДвиженияРегистровДтКт.СуммаВал) КАК СуммаВал,
	|	СУММА(втДвиженияРегистровДтКт.Количество) КАК Количество
	|ПОМЕСТИТЬ втСвернутыеДвиженияДтКт
	|ИЗ
	|	втДвиженияРегистровДтКт КАК втДвиженияРегистровДтКт
	|СГРУППИРОВАТЬ ПО
	|	втДвиженияРегистровДтКт.Период,
	|	втДвиженияРегистровДтКт.Регистратор,
	|	втДвиженияРегистровДтКт.ИдентификаторФинЗаписи,
	|	втДвиженияРегистровДтКт.ИмяРегистра,
	|	втДвиженияРегистровДтКт.Организация,
	|	втДвиженияРегистровДтКт.НастройкаХозОперации,
	|	втДвиженияРегистровДтКт.ИдентификаторСтроки,
	|	втДвиженияРегистровДтКт.ВидДеятельностиНДС,
	|	втДвиженияРегистровДтКт.Валюта,
	|	втДвиженияРегистровДтКт.Показатель,
	|	втДвиженияРегистровДтКт.ЭтоДтКт,
	|	втДвиженияРегистровДтКт.ДопНастройкаХозОперации,
	|	втДвиженияРегистровДтКт.ЭтоСторно,
	|	втДвиженияРегистровДтКт.РеквизитСторно
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	ИмяРегистра,
	|	Организация,
	|	НастройкаХозОперации";
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ИмяТаблицыДвижений = "втДвиженияРегистровДтКт";
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	
КонецПроцедуры

Процедура ОпределитьСложныеПроводкиСУказаниемКорИсточников(Запрос, ТекстыЗапросов)
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втКорИсточникиДанных") = Неопределено Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	КорИсточникиДанных.Показатель КАК Показатель,
		|	КорИсточникиДанных.ИмяРегистра КАК ИмяРегистра,
		|	КорИсточникиДанных.КорИсточникДанных КАК КорИмяРегистра,
		|	КорИсточникиДанных.Идентификатор КАК Идентификатор,
		|	КорИсточникиДанных.КорИдентификатор КАК КорИдентификатор
		|ПОМЕСТИТЬ втКорИсточникиДанных
		|ИЗ
		|	&КорИсточникиДанных КАК КорИсточникиДанных
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель,
		|	ИмяРегистра
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	КорИсточникиДанных.Показатель КАК Показатель,
		|	КорИсточникиДанных.ИмяРегистра КАК ИмяРегистра,
		|	КорИсточникиДанных.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ втИдентификаторыКорИсточниковДанных
		|ИЗ
		|	втКорИсточникиДанных КАК КорИсточникиДанных
		|СГРУППИРОВАТЬ ПО
		|	КорИсточникиДанных.Показатель,
		|	КорИсточникиДанных.ИмяРегистра,
		|	КорИсточникиДанных.Идентификатор
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель,
		|	ИмяРегистра
		|");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебет.Период КАК Период,
	|	ДвиженияДебет.Организация КАК Организация,
	|	ДвиженияДебет.Регистратор КАК Регистратор,
	|	ДвиженияДебет.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебет.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КорИсточникиДанных.КорИмяРегистра КАК КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор КАК КорИдентификатор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияДебет.Показатель) КАК КоличествоПоказателей
	|ПОМЕСТИТЬ втИдентификаторыОперацийДебет
	|ИЗ
	|	втСвернутыеДвиженияДебет КАК ДвиженияДебет
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|		ПО ДвиженияДебет.Показатель = КорИсточникиДанных.Показатель
	|		И ДвиженияДебет.ИмяРегистра = КорИсточникиДанных.ИмяРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебет.Период,
	|	ДвиженияДебет.Регистратор,
	|	ДвиженияДебет.ИдентификаторФинЗаписи,
	|	ДвиженияДебет.Организация,
	|	ДвиженияДебет.НастройкаХозОперации,
	|	КорИсточникиДанных.КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	КорИмяРегистра,
	|	Организация,
	|	НастройкаХозОперации
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияКредит.Период КАК Период,
	|	ДвиженияКредит.Организация КАК Организация,
	|	ДвиженияКредит.Регистратор КАК Регистратор,
	|	ДвиженияКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КорИсточникиДанных.КорИмяРегистра КАК КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор КАК КорИдентификатор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияКредит.Показатель) КАК КоличествоПоказателей
	|ПОМЕСТИТЬ втИдентификаторыОперацийКредит
	|ИЗ
	|	втСвернутыеДвиженияКредит КАК ДвиженияКредит
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|		ПО ДвиженияКредит.Показатель = КорИсточникиДанных.Показатель
	|		И ДвиженияКредит.ИмяРегистра = КорИсточникиДанных.ИмяРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияКредит.Период,
	|	ДвиженияКредит.Регистратор,
	|	ДвиженияКредит.ИдентификаторФинЗаписи,
	|	ДвиженияКредит.Организация,
	|	ДвиженияКредит.НастройкаХозОперации,
	|	КорИсточникиДанных.КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	КорИмяРегистра,
	|	Организация,
	|	НастройкаХозОперации
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	втИдентификаторыОперацийДебет КАК ИдентификаторыОперацийДебет
	|ГДЕ
	|	ИдентификаторыОперацийДебет.КоличествоПоказателей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	втИдентификаторыОперацийКредит КАК ИдентификаторыОперацийКредит
	|ГДЕ
	|	ИдентификаторыОперацийКредит.КоличествоПоказателей > 1
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Очистить();
	
	Результаты = Запрос.ВыполнитьПакет();
	ЕстьСложныеПроводки = НЕ Результаты[Результаты.ВГраница()].Пустой();
	
	Если НЕ ЕстьСложныеПроводки Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвиженияДебет.Период КАК Период,
		|	ДвиженияДебет.ИмяРегистра КАК ИмяРегистра,
		|	ДвиженияДебет.Организация КАК Организация,
		|	ДвиженияДебет.Регистратор КАК Регистратор,
		|	ДвиженияДебет.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ДвиженияДебет.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияДебет.Показатель) КАК КоличествоПоказателей
		|ИЗ
		|	втСвернутыеДвиженияДебет КАК ДвиженияДебет
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИдентификаторыОперацийКредит КАК ИдентификаторыОперацийКредит
		|		ПО ДвиженияДебет.Период = ИдентификаторыОперацийКредит.Период
		|		 И ДвиженияДебет.Регистратор = ИдентификаторыОперацийКредит.Регистратор
		|		 И ДвиженияДебет.ИдентификаторФинЗаписи = ИдентификаторыОперацийКредит.ИдентификаторФинЗаписи
		|		 И ДвиженияДебет.ИмяРегистра = ИдентификаторыОперацийКредит.КорИмяРегистра
		|		 И ДвиженияДебет.Организация = ИдентификаторыОперацийКредит.Организация
		|		 И ВЫБОР
		|			КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				И ИдентификаторыОперацийКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				ТОГДА ДвиженияДебет.НастройкаХозОперации = ИдентификаторыОперацийКредит.НастройкаХозОперации
		|			ИНАЧЕ ИСТИНА
		|		 КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияДебет.Период,
		|	ДвиженияДебет.Регистратор,
		|	ДвиженияДебет.ИдентификаторФинЗаписи,
		|	ДвиженияДебет.ИмяРегистра,
		|	ДвиженияДебет.Организация,
		|	ДвиженияДебет.НастройкаХозОперации
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияДебет.Показатель) > 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвиженияКредит.Период КАК Период,
		|	ДвиженияКредит.ИмяРегистра КАК ИмяРегистра,
		|	ДвиженияКредит.Организация КАК Организация,
		|	ДвиженияКредит.Регистратор КАК Регистратор,
		|	ДвиженияКредит.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ДвиженияКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияКредит.Показатель) КАК КоличествоПоказателей
		|ИЗ
		|	втСвернутыеДвиженияКредит КАК ДвиженияКредит
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИдентификаторыОперацийДебет КАК ИдентификаторыОперацийДебет
		|		ПО ДвиженияКредит.Период = ИдентификаторыОперацийДебет.Период
		|		 И ДвиженияКредит.Регистратор = ИдентификаторыОперацийДебет.Регистратор
		|		 И ДвиженияКредит.ИдентификаторФинЗаписи = ИдентификаторыОперацийДебет.ИдентификаторФинЗаписи
		|		 И ДвиженияКредит.ИмяРегистра = ИдентификаторыОперацийДебет.КорИмяРегистра
		|		 И ДвиженияКредит.Организация = ИдентификаторыОперацийДебет.Организация
		|		 И ВЫБОР
		|			КОГДА ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				И ИдентификаторыОперацийДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				ТОГДА ДвиженияКредит.НастройкаХозОперации = ИдентификаторыОперацийДебет.НастройкаХозОперации
		|			ИНАЧЕ ИСТИНА
		|		 КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияКредит.Период,
		|	ДвиженияКредит.Регистратор,
		|	ДвиженияКредит.ИдентификаторФинЗаписи,
		|	ДвиженияКредит.ИмяРегистра,
		|	ДвиженияКредит.Организация,
		|	ДвиженияКредит.НастройкаХозОперации
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияКредит.Показатель) > 1
		|";
		
		Результат = Запрос.Выполнить();
		ЕстьСложныеПроводки = НЕ Результат.Пустой();
	КонецЕсли;
	
	Если НЕ ЕстьСложныеПроводки Тогда
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИдентификаторыОперацийДебет");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИдентификаторыОперацийКредит");
	КонецЕсли;
	
	Запрос.Параметры.СложныеПроводкиСУказаниемКорИсточников = ЕстьСложныеПроводки;
	
КонецПроцедуры

Процедура ДобавитьИдентификаторыИсточниковДанных(ТекстыЗапросов, ПараметрыЗапроса, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.Показатель КАК Показатель,
	|	ДвиженияРегистров.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно,
	|	&ЕстьКорИсточникиДанных КАК ЕстьКорИсточникиДанных,
	|	&ИдентификаторКорИсточниковДанных КАК ИдентификаторКорИсточниковДанных
	|ПОМЕСТИТЬ втДвиженияДтКт
	|ИЗ
	|	втСвернутыеДвиженияДтКт КАК ДвиженияРегистров
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	Организация,
	|	ИдентификаторКорИсточниковДанных
	|";
	
	Если ПараметрыЗапроса.СложныеПроводкиСУказаниемКорИсточников Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"втСвернутыеДвиженияДтКт КАК ДвиженияРегистров",
			"втСвернутыеДвиженияДтКт КАК ДвиженияРегистров
			|	ЛЕВОЕ СОЕДИНЕНИЕ втИдентификаторыКорИсточниковДанных КАК ИдентификаторыКорИсточниковДанных
			|		ПО ДвиженияРегистров.Показатель = ИдентификаторыКорИсточниковДанных.Показатель
			|		И ДвиженияРегистров.ИмяРегистра = ИдентификаторыКорИсточниковДанных.ИмяРегистра");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ПОМЕСТИТЬ втДвиженияДтКт",
			"ПОМЕСТИТЬ втДвиженияРегистровДтКт");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Регистратор,
			|	ИдентификаторФинЗаписи,",
			"ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Регистратор,
			|	ИдентификаторФинЗаписи,
			|	ИмяРегистра,");
		
		ЕстьКорИсточникиДанных = "НЕ ИдентификаторыКорИсточниковДанных.Идентификатор ЕСТЬ NULL";
		ИдентификаторКорИсточниковДанных = "ЕСТЬNULL(ИдентификаторыКорИсточниковДанных.Идентификатор, """")";
	Иначе
		ЕстьКорИсточникиДанных = "ИСТИНА В
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			втИдентификаторыКорИсточниковДанных КАК ИдентификаторыКорИсточниковДанных
			|		ГДЕ
			|			ИдентификаторыКорИсточниковДанных.Показатель = ДвиженияРегистров.Показатель
			|			И ИдентификаторыКорИсточниковДанных.ИмяРегистра = ДвиженияРегистров.ИмяРегистра
			|		)";
		ИдентификаторКорИсточниковДанных = """""";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьКорИсточникиДанных", ЕстьКорИсточникиДанных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторКорИсточниковДанных", ИдентификаторКорИсточниковДанных);
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ИмяТаблицыДвижений = "втСвернутыеДвиженияДтКт";
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	
	Если ПараметрыЗапроса.СложныеПроводкиСУказаниемКорИсточников Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДвиженияРегистров.Период КАК Период,
		|	ДвиженияРегистров.НомерЗаписи КАК НомерЗаписи,
		|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
		|	ДвиженияРегистров.Показатель КАК Показатель,
		|	ДвиженияРегистров.ЭтоДтКт КАК ЭтоДтКт,
		|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
		|	ДвиженияРегистров.Организация КАК Организация,
		|	ДвиженияРегистров.Регистратор КАК Регистратор,
		|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДвиженияРегистров.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		|	ДвиженияРегистров.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
		|	ДвиженияРегистров.Валюта КАК Валюта,
		|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
		|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
		|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
		|	ДвиженияРегистров.Количество КАК Количество,
		|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно,
		|	ДвиженияРегистров.ЕстьКорИсточникиДанных КАК ЕстьКорИсточникиДанных,
		|	ВЫБОР
		|		КОГДА ДвиженияРегистров.ИдентификаторКорИсточниковДанных <> """"
		|			ТОГДА ДвиженияРегистров.ИдентификаторКорИсточниковДанных
		|		ИНАЧЕ ЕСТЬNULL(КорИдентификаторыОпераций.КорИдентификатор, """")
		|	КОНЕЦ КАК ИдентификаторКорИсточниковДанных
		|ПОМЕСТИТЬ втДвиженияДтКт
		|ИЗ
		|	втДвиженияРегистровДтКт КАК ДвиженияРегистров
		|	ЛЕВОЕ СОЕДИНЕНИЕ втКорИдентификаторыОперацийДтКт КАК КорИдентификаторыОпераций
		|		ПО ДвиженияРегистров.Период = КорИдентификаторыОпераций.Период
		|		 И ДвиженияРегистров.Регистратор = КорИдентификаторыОпераций.Регистратор
		|		 И ДвиженияРегистров.ИдентификаторФинЗаписи = КорИдентификаторыОпераций.ИдентификаторФинЗаписи
		|		 И ДвиженияРегистров.ИмяРегистра = КорИдентификаторыОпераций.КорИмяРегистра
		|		 И ДвиженияРегистров.Организация = КорИдентификаторыОпераций.Организация
		|		 И ВЫБОР
		|			КОГДА ДвиженияРегистров.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				И КорИдентификаторыОпераций.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				ТОГДА ДвиженияРегистров.НастройкаХозОперации = КорИдентификаторыОпераций.НастройкаХозОперации
		|			ИНАЧЕ ИСТИНА
		|		 КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Регистратор,
		|	ИдентификаторФинЗаписи,
		|	НастройкаХозОперации,
		|	Организация,
		|	ИдентификаторКорИсточниковДанных
		|";
		
		ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ИмяТаблицыДвижений = "втДвиженияРегистровДтКт";
		ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
		
		ИмяТаблицыДвижений = "втКорИдентификаторыОперацийДтКт";
		ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИтогиПоОперациямИФинЗаписям(ТекстыЗапросов, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторКорИсточниковДанных КАК ИдентификаторКорИсточниковДанных,
	|	КОЛИЧЕСТВО(Движения.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(Движения.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Движения.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоОперациям
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|ГДЕ
	|	НЕ Движения.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ИдентификаторФинЗаписи,
	|	Движения.Организация,
	|	Движения.НастройкаХозОперации,
	|	Движения.ИдентификаторКорИсточниковДанных
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация,
	|	НастройкаХозОперации,
	|	ИдентификаторКорИсточниковДанных
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КОЛИЧЕСТВО(Движения.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(Движения.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Движения.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоФинЗаписям
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|ГДЕ
	|	НЕ Движения.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|	И Движения.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втКорДвиженияДтКт КАК КорДвижения
	|		ГДЕ
	|			КорДвижения.Период = Движения.Период
	|			И КорДвижения.Регистратор = Движения.Регистратор
	|			И КорДвижения.ИдентификаторФинЗаписи = Движения.ИдентификаторФинЗаписи
	|			И КорДвижения.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			И КорДвижения.Организация = Движения.Организация
	|			И КорДвижения.ЭтоКорДтКт
	|			И НЕ КорДвижения.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|		)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втКорДвиженияДтКт КАК КорДвижения
	|			ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|				ПО КорИсточникиДанных.Показатель = Движения.Показатель
	|				И КорИсточникиДанных.ИмяРегистра = Движения.ИмяРегистра
	|			ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК ИсточникиДанных
	|				ПО ИсточникиДанных.Показатель = КорДвижения.Показатель
	|				И ИсточникиДанных.ИмяРегистра = КорДвижения.ИмяРегистра
	|		ГДЕ
	|			КорДвижения.Период = Движения.Период
	|			И КорДвижения.Регистратор = Движения.Регистратор
	|			И КорДвижения.ИдентификаторФинЗаписи = Движения.ИдентификаторФинЗаписи
	|			И КорДвижения.НастройкаХозОперации = Движения.НастройкаХозОперации
	|			И КорДвижения.Организация = Движения.Организация
	|			И КорДвижения.ЭтоКорДтКт
	|			И (КорДвижения.Показатель <> Движения.Показатель ИЛИ КорДвижения.ИмяРегистра <> Движения.ИмяРегистра ИЛИ КорДвижения.ЭтоСторно = Движения.ЭтоСторно)
	|			И ВЫБОР
	|				КОГДА НЕ ИсточникиДанных.Показатель ЕСТЬ NULL
	|					ТОГДА ИсточникиДанных.КорИмяРегистра = Движения.ИмяРегистра
	|				КОГДА НЕ КорИсточникиДанных.Показатель ЕСТЬ NULL
	|					ТОГДА КорИсточникиДанных.КорИмяРегистра = КорДвижения.ИмяРегистра
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			И НЕ КорДвижения.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|		)
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ИдентификаторФинЗаписи,
	|	Движения.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.НомерЗаписи КАК НомерЗаписи,
	|	Движения.ИмяРегистра КАК ИмяРегистра,
	|	Движения.ЭтоДтКт КАК ЭтоДтКт,
	|	Движения.ЭтоСторно КАК ЭтоСторно,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Движения.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	Движения.Валюта КАК Валюта,
	|	Движения.Показатель КАК Показатель,
	|	Движения.СуммаУпр КАК СуммаУпр,
	|	Движения.СуммаРегл КАК СуммаРегл,
	|	Движения.СуммаВал КАК СуммаВал,
	|	Движения.Количество КАК Количество,
	|	Движения.РеквизитСторно КАК РеквизитСторно,
	|	Движения.ЕстьКорИсточникиДанных КАК ЕстьКорИсточникиДанных,
	|	ЕСТЬNULL(ИтогиПоОперациям.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейОперации,
	|	ЕСТЬNULL(ИтогиПоОперациям.СуммаУпр, 0) КАК СуммаУпрОперации,
	|	ЕСТЬNULL(ИтогиПоОперациям.СуммаРегл, 0) КАК СуммаРеглОперации,
	|	ЕСТЬNULL(ИтогиПоФинЗаписям.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписям.СуммаУпр, 0) КАК СуммаУпрФинЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписям.СуммаРегл, 0) КАК СуммаРеглФинЗаписи,
	|	ТИПЗНАЧЕНИЯ(Движения.Регистратор) КАК ТипРегистратора
	|ПОМЕСТИТЬ втДвиженияСИтогамиДтКт
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоОперациям КАК ИтогиПоОперациям
	|		ПО Движения.Период = ИтогиПоОперациям.Период
	|		 И Движения.Регистратор = ИтогиПоОперациям.Регистратор
	|		 И Движения.ИдентификаторФинЗаписи = ИтогиПоОперациям.ИдентификаторФинЗаписи
	|		 И Движения.Организация = ИтогиПоОперациям.Организация
	|		 И Движения.НастройкаХозОперации = ИтогиПоОперациям.НастройкаХозОперации
	|		 И Движения.ИдентификаторКорИсточниковДанных = ИтогиПоОперациям.ИдентификаторКорИсточниковДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоФинЗаписям КАК ИтогиПоФинЗаписям
	|		ПО Движения.Период = ИтогиПоФинЗаписям.Период
	|		 И Движения.Регистратор = ИтогиПоФинЗаписям.Регистратор
	|		 И Движения.ИдентификаторФинЗаписи = ИтогиПоФинЗаписям.ИдентификаторФинЗаписи
	|		 И Движения.Организация = ИтогиПоФинЗаписям.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация,
	|	НастройкаХозОперации,
	|	Показатель
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИтогиПоОперациям");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИтогиПоФинЗаписям");
	
КонецПроцедуры

Процедура СоединитьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДвиженияДебет.Период, ДвиженияКредит.Период) КАК Период,
	|	ЕСТЬNULL(ДвиженияДебет.НомерЗаписи, 0) КАК НомерЗаписиДт,
	|	ЕСТЬNULL(ДвиженияКредит.НомерЗаписи, 0) КАК НомерЗаписиКт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебет.ИмяРегистра ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.ИмяРегистра
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияКредит.ИмяРегистра ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.ИмяРегистра
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ЕСТЬNULL(ДвиженияДебет.ДопНастройкаХозОперации, ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)) КАК ДопНастройкаХозОперацииДт,
	|	ЕСТЬNULL(ДвиженияКредит.ДопНастройкаХозОперации, ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)) КАК ДопНастройкаХозОперацииКт,
	|	ЕСТЬNULL(ДвиженияДебет.ЭтоСторно, ЛОЖЬ) КАК ЭтоСторноДт,
	|	ЕСТЬNULL(ДвиженияКредит.ЭтоСторно, ЛОЖЬ) КАК ЭтоСторноКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.Организация ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.Организация
	|		КОГДА ДвиженияКредит.Организация ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.Организация
	|		КОГДА ДвиженияДебет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДвиженияКредит.Организация
	|		ИНАЧЕ ДвиженияДебет.Организация
	|	КОНЕЦ КАК Организация,
	|	ЕСТЬNULL(ДвиженияДебет.Регистратор, ДвиженияКредит.Регистратор) КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.НастройкаХозОперации
	|		КОГДА ДвиженияКредит.НастройкаХозОперации ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.НастройкаХозОперации
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ДвиженияКредит.НастройкаХозОперации
	|		ИНАЧЕ ДвиженияДебет.НастройкаХозОперации
	|	КОНЕЦ КАК НастройкаХозОперации,
	|	ЕСТЬNULL(ДвиженияДебет.ИдентификаторФинЗаписи, ДвиженияКредит.ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи,
	|	ЕСТЬNULL(ДвиженияДебет.ИдентификаторСтроки, """") КАК ИдентификаторСтрокиДт,
	|	ЕСТЬNULL(ДвиженияКредит.ИдентификаторСтроки, """") КАК ИдентификаторСтрокиКт,
	|	ЕСТЬNULL(ДвиженияДебет.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСДт,
	|	ЕСТЬNULL(ДвиженияКредит.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСКт,
	|	ЕСТЬNULL(ДвиженияДебет.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДт,
	|	ЕСТЬNULL(ДвиженияКредит.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА (ДвиженияДебет.ИмяРегистра В (&РегистрыВосстановленияРасчетовПоСторно)
	|			ИЛИ ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета))
	|			И (ДвиженияКредит.ИмяРегистра В (&РегистрыВосстановленияРасчетовПоСторно)
	|			ИЛИ ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета))
	|			И (НЕ ДвиженияДебет.ИмяРегистра В (&РегистрыСОтборомПоПоказателям)
	|			ИЛИ НЕ ДвиженияКредит.ИмяРегистра В (&РегистрыСОтборомПоПоказателям))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ДвиженияДебет.Показатель, ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.ПустаяСсылка))
	|	КОНЕЦ КАК ПоказательДт,
	|	ВЫБОР
	|		КОГДА (ДвиженияДебет.ИмяРегистра В (&РегистрыВосстановленияРасчетовПоСторно)
	|			ИЛИ ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета))
	|			И (ДвиженияКредит.ИмяРегистра В (&РегистрыВосстановленияРасчетовПоСторно)
	|			ИЛИ ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета))
	|			И (НЕ ДвиженияДебет.ИмяРегистра В (&РегистрыСОтборомПоПоказателям)
	|			ИЛИ НЕ ДвиженияКредит.ИмяРегистра В (&РегистрыСОтборомПоПоказателям))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ДвиженияКредит.Показатель, ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.ПустаяСсылка))
	|	КОНЕЦ КАК ПоказательКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) КАК СуммаДвиженияУпрДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0) КАК СуммаДвиженияУпрКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) КАК СуммаДвиженияРеглДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0) КАК СуммаДвиженияРеглКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаВал, 0) КАК СуммаДвиженияВалДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаВал, 0) КАК СуммаДвиженияВалКт,
	|	ЕСТЬNULL(ДвиженияДебет.Количество, 0) КАК КоличествоДвиженияДт,
	|	ЕСТЬNULL(ДвиженияКредит.Количество, 0) КАК КоличествоДвиженияКт,
	|	ЕСТЬNULL(ДвиженияДебет.РеквизитСторно, ЛОЖЬ) КАК РеквизитСторноДт,
	|	ЕСТЬNULL(ДвиженияКредит.РеквизитСторно, ЛОЖЬ) КАК РеквизитСторноКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрФинЗаписи, 0)
	|				  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРеглФинЗаписи, 0)
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|					  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ (ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|		  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРеглОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРеглОперации, 0)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|			  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СложнаяПроводкаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрФинЗаписи, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|				  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРеглФинЗаписи, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|					  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ (ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) = 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|		  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРеглОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРеглОперации, 0)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|			  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СложнаяПроводкаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|		  ИЛИ ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьХозОперацию,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.СуммаУпр ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияКредит.СуммаУпр
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.СуммаУпр <> ЕСТЬNULL(ДвиженияКредит.СуммаУпрФинЗаписи, 0)
	|					ТОГДА ДвиженияДебет.СуммаУпр
	|				КОГДА ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|				ИНАЧЕ ДвиженияДебет.СуммаУпр
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.СуммаУпрОперации <> ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|			ТОГДА ДвиженияДебет.СуммаУпр
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1
	|			ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|		ИНАЧЕ ДвиженияДебет.СуммаУпр
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.СуммаУпр ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияДебет.СуммаУпр
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрФинЗаписи, 0) <> ДвиженияКредит.СуммаУпр
	|					ТОГДА ДвиженияКредит.СуммаУпр
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0)
	|				ИНАЧЕ ДвиженияКредит.СуммаУпр
	|			КОНЕЦ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) <> ДвиженияКредит.СуммаУпрОперации
	|			ТОГДА ДвиженияКредит.СуммаУпр
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ДвиженияКредит.КоличествоЗаписейОперации = 1
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0)
	|		ИНАЧЕ ДвиженияКредит.СуммаУпр
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.СуммаРегл ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияКредит.СуммаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.СуммаРегл <> ЕСТЬNULL(ДвиженияКредит.СуммаРеглФинЗаписи, 0)
	|					ТОГДА ДвиженияДебет.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|				ИНАЧЕ ДвиженияДебет.СуммаРегл
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.СуммаРеглОперации <> ЕСТЬNULL(ДвиженияКредит.СуммаРеглОперации, 0)
	|			ТОГДА ДвиженияДебет.СуммаРегл
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1
	|			ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|		ИНАЧЕ ДвиженияДебет.СуммаРегл
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.СуммаРегл ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияДебет.СуммаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРеглФинЗаписи, 0) <> ДвиженияКредит.СуммаРегл
	|					ТОГДА ДвиженияКредит.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0)
	|				ИНАЧЕ ДвиженияКредит.СуммаРегл
	|			КОНЕЦ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРеглОперации, 0) <> ДвиженияКредит.СуммаРеглОперации
	|			ТОГДА ДвиженияКредит.СуммаРегл
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) = 1
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0)
	|		ИНАЧЕ ДвиженияКредит.СуммаРегл
	|	КОНЕЦ КАК СуммаРеглКт
	|ПОМЕСТИТЬ ТаблицаКорреспонденцийДвиженийРегистров
	|ИЗ
	|	втДвиженияСИтогамиДебет КАК ДвиженияДебет
	|	ПОЛНОЕ СОЕДИНЕНИЕ втДвиженияСИтогамиКредит КАК ДвиженияКредит
	|	ПО ДвиженияДебет.Период = ДвиженияКредит.Период
	|	И ДвиженияДебет.Регистратор = ДвиженияКредит.Регистратор
	|	И ДвиженияДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|	И ДвиженияДебет.Организация = ДвиженияКредит.Организация
	|	И НЕ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|	И НЕ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|	И ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ДвиженияДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	// Корреспонденции записей с заполненной и пустой настройками ХО разрешены, если для записи с заполненной ХО нет других корреспонденций с такой же ХО
	|		КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|						ПО КорИсточникиДанных.Показатель = ДвиженияДебет.Показатель
	|						И КорИсточникиДанных.ИмяРегистра = ДвиженияДебет.ИмяРегистра
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК ИсточникиДанных
	|						ПО ИсточникиДанных.Показатель = ДвиженияТолькоКредит.Показатель
	|						И ИсточникиДанных.ИмяРегистра = ДвиженияТолькоКредит.ИмяРегистра
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И НЕ ДвиженияТолькоКредит.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|					И (ДвиженияТолькоКредит.Показатель <> ДвиженияДебет.Показатель ИЛИ ДвиженияТолькоКредит.ИмяРегистра <> ДвиженияДебет.ИмяРегистра ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|					И ВЫБОР
	|						КОГДА НЕ ИсточникиДанных.Показатель ЕСТЬ NULL
	|							ТОГДА ИсточникиДанных.КорИмяРегистра = ДвиженияДебет.ИмяРегистра
	|						КОГДА НЕ КорИсточникиДанных.Показатель ЕСТЬ NULL
	|							ТОГДА КорИсточникиДанных.КорИмяРегистра = ДвиженияТолькоКредит.ИмяРегистра
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				)
	// Корреспонденции записей с заполненной и пустой настройками ХО разрешены, если для записи с заполненной ХО нет других корреспонденций с такой же ХО
	|		КОГДА ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|						ПО КорИсточникиДанных.Показатель = ДвиженияКредит.Показатель
	|						И КорИсточникиДанных.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК ИсточникиДанных
	|						ПО ИсточникиДанных.Показатель = ДвиженияТолькоДебет.Показатель
	|						И ИсточникиДанных.ИмяРегистра = ДвиженияТолькоДебет.ИмяРегистра
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И НЕ ДвиженияТолькоДебет.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|					И (ДвиженияТолькоДебет.Показатель <> ДвиженияКредит.Показатель ИЛИ ДвиженияТолькоДебет.ИмяРегистра <> ДвиженияКредит.ИмяРегистра ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|					И ВЫБОР
	|						КОГДА НЕ ИсточникиДанных.Показатель ЕСТЬ NULL
	|							ТОГДА ИсточникиДанных.КорИмяРегистра = ДвиженияКредит.ИмяРегистра
	|						КОГДА НЕ КорИсточникиДанных.Показатель ЕСТЬ NULL
	|							ТОГДА КорИсточникиДанных.КорИмяРегистра = ДвиженияТолькоДебет.ИмяРегистра
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				)
	// Корреспонденции записей с пустыми настройками ХО запрещены, если обе образуют сложные проводки с другими записями
	|		КОГДА ДвиженияДебет.КоличествоЗаписейЗаписи > 1 И ДвиженияКредит.КоличествоЗаписейЗаписи > 1
	|			ТОГДА ЛОЖЬ
	// Корреспонденции записей с пустыми настройками ХО запрещены, если одна образует сложные проводки, а для другой есть корреспонденция с заполненной настройкой ХО
	|		КОГДА ДвиженияДебет.КоличествоЗаписейЗаписи > 1
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И НЕ ДвиженияТолькоДебет.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|					И (ДвиженияТолькоДебет.Показатель <> ДвиженияКредит.Показатель ИЛИ ДвиженияТолькоДебет.ИмяРегистра <> ДвиженияКредит.ИмяРегистра ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|				)
	// Корреспонденции записей с пустыми настройками ХО запрещены, если одна образует сложные проводки, а для другой есть корреспонденция с заполненной настройкой ХО
	|		КОГДА ДвиженияКредит.КоличествоЗаписейЗаписи > 1
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И НЕ ДвиженияТолькоКредит.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|					И (ДвиженияТолькоКредит.Показатель <> ДвиженияДебет.Показатель ИЛИ ДвиженияТолькоКредит.ИмяРегистра <> ДвиженияДебет.ИмяРегистра ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|				)
	// Корреспонденции записей с пустыми настройками ХО запрещены, если для обеих есть корреспонденции с заполненными настройками ХО
	|		ИНАЧЕ НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДвиженияДебет КАК ДвиженияТолькоДебет
	|			ГДЕ
	|				ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|				И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|				И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|				И ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|				И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|				И ДвиженияТолькоДебет.ЭтоДебет
	|				И НЕ ДвиженияТолькоДебет.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|				И (ДвиженияТолькоДебет.Показатель <> ДвиженияКредит.Показатель ИЛИ ДвиженияТолькоДебет.ИмяРегистра <> ДвиженияКредит.ИмяРегистра ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|			)
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДвиженияКредит КАК ДвиженияТолькоКредит
	|			ГДЕ
	|				ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|				И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|				И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|				И ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|				И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|				И ДвиженияТолькоКредит.ЭтоКредит
	|				И НЕ ДвиженияТолькоКредит.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|				И (ДвиженияТолькоКредит.Показатель <> ДвиженияДебет.Показатель ИЛИ ДвиженияТолькоКредит.ИмяРегистра <> ДвиженияДебет.ИмяРегистра ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|			)
	|	 КОНЕЦ
	|	И ВЫБОР
	|		КОГДА ДвиженияДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|			И НЕ ДвиженияДебет.ИмяРегистра В (&РегистрыВосстановленияРасчетовПоСторно)
	|			И ДвиженияДебет.Показатель <> ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.ПустаяСсылка)
	|			И ДвиженияКредит.Показатель <> ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.ПустаяСсылка)
	|			И ДвиженияДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|			ТОГДА ДвиженияДебет.Показатель = ДвиженияКредит.Показатель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА ДвиженияДебет.ИмяРегистра В (&РегистрыСОтборомПоПоказателям)
	|			И ДвиженияКредит.ИмяРегистра В (&РегистрыСОтборомПоПоказателям)
	|			И ДвиженияДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|			ТОГДА ДвиженияДебет.Показатель = ДвиженияКредит.Показатель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА ДвиженияДебет.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|			ТОГДА ДвиженияДебет.Показатель = ДвиженияКредит.Показатель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА ДвиженияКредит.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|			ТОГДА ДвиженияКредит.Показатель = ДвиженияДебет.Показатель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	 И ВЫБОР
	// Корреспонденции записей оборотного регистров с самими собой запрещены всегда
	|		КОГДА НЕ ДвиженияДебет.ЭтоДебет И НЕ ДвиженияКредит.ЭтоКредит
	|			ТОГДА ЛОЖЬ
	// Корреспонденции записей ограничены в описании показателя дебета
	|		КОГДА ДвиженияДебет.ЕстьКорИсточникиДанных
	|			ТОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втКорИсточникиДанных КАК КорИсточникиДанных
	|				ГДЕ
	|					КорИсточникиДанных.Показатель = ДвиженияДебет.Показатель
	|					И КорИсточникиДанных.ИмяРегистра = ДвиженияДебет.ИмяРегистра
	|					И КорИсточникиДанных.КорИмяРегистра = ДвиженияКредит.ИмяРегистра
	|				)
	// Корреспонденции записей ограничены в описании показателя кредита
	|		КОГДА ДвиженияКредит.ЕстьКорИсточникиДанных
	|			ТОГДА ИСТИНА В 
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втКорИсточникиДанных КАК КорИсточникиДанных
	|				ГДЕ
	|					КорИсточникиДанных.Показатель = ДвиженияКредит.Показатель
	|					И КорИсточникиДанных.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|					И КорИсточникиДанных.КорИмяРегистра = ДвиженияДебет.ИмяРегистра
	|				)
	// Корреспонденции прямой и сторно записей внутри одного регистра разрешены, если для сторно нет корреспонденций с другими объектами или таким же признаком сторно и суммами упр и регл
	|		КОГДА ДвиженияДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра И ДвиженияДебет.Показатель = ДвиженияКредит.Показатель И ДвиженияДебет.ЭтоСторно И НЕ ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ((ДвиженияТолькоКредит.ИмяРегистра <> ДвиженияДебет.ИмяРегистра
	|						ИЛИ ДвиженияТолькоКредит.Показатель <> ДвиженияДебет.Показатель
	|						ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|						ИЛИ
	|						(ДвиженияТолькоКредит.ИмяРегистра = ДвиженияДебет.ИмяРегистра
	|						И ДвиженияТолькоКредит.Показатель = ДвиженияДебет.Показатель
	|						И ДвиженияТолькоКредит.ЭтоСторно <> ДвиженияДебет.ЭтоСторно
	|						И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|						И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл)
	|					)
	|				)
	// Корреспонденции прямой и сторно записей внутри одного регистра разрешены, если для сторно нет корреспонденций с другими объектами или таким же признаком сторно и суммами упр и регл
	|		КОГДА ДвиженияДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра И ДвиженияДебет.Показатель = ДвиженияКредит.Показатель И НЕ ДвиженияДебет.ЭтоСторно И ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ((ДвиженияТолькоДебет.ИмяРегистра <> ДвиженияКредит.ИмяРегистра
	|						ИЛИ ДвиженияТолькоДебет.Показатель <> ДвиженияКредит.Показатель
	|						ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|						ИЛИ
	|						(ДвиженияТолькоДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|						И ДвиженияТолькоДебет.Показатель = ДвиженияКредит.Показатель
	|						И ДвиженияТолькоДебет.ЭтоСторно <> ДвиженияКредит.ЭтоСторно
	|						И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|						И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл)
	|					)
	|				)
	// Корреспонденции записей внутри одного регистра приоритет у записей с одинаковыми объектами учета и суммами упр и регл
	|		КОГДА ДвиженияДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра И ДвиженияДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И ВЫБОР
	|						КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоКредит.ИмяРегистра = ДвиженияДебет.ИмяРегистра
	|					И ДвиженияТолькоКредит.Показатель = ДвиженияДебет.Показатель
	|					И ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно
	|					И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|					И (ДвиженияТолькоКредит.ИмяРегистра <> ДвиженияКредит.ИмяРегистра
	|						ИЛИ ДвиженияТолькоКредит.Показатель <> ДвиженияКредит.Показатель
	|						ИЛИ
	|						(ДвиженияТолькоКредит.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|						И ДвиженияТолькоКредит.Показатель = ДвиженияКредит.Показатель
	|						И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл)
	|					)
	|				)
	|			И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И ВЫБОР
	|						КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|					И ДвиженияТолькоДебет.Показатель = ДвиженияКредит.Показатель
	|					И ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|					И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|					И (ДвиженияТолькоДебет.ИмяРегистра <> ДвиженияДебет.ИмяРегистра
	|						ИЛИ ДвиженияТолькоДебет.Показатель <> ДвиженияДебет.Показатель
	|						ИЛИ
	|						(ДвиженияТолькоДебет.ИмяРегистра = ДвиженияДебет.ИмяРегистра
	|						И ДвиженияТолькоДебет.Показатель = ДвиженияДебет.Показатель
	|						И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл)
	|					)
	|				)
	// Прочие случаи отношения многие ко многим, приоритет у записей с одинаковыми суммами упр и регл
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации > 1 И ДвиженияКредит.КоличествоЗаписейОперации > 1
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|					И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл
	|				)
	|			И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|					И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл
	|				)
	|		ИНАЧЕ ИСТИНА
	|	 КОНЕЦ
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.Регистратор ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	// Запись с нулевыми балансовыми ресурсами не выводим
	|				КОГДА ДвиженияКредит.СуммаУпр = 0 И ДвиженияКредит.СуммаРегл = 0
	|					ТОГДА ЛОЖЬ
	// Запись остаточного регистра выводим всегда
	|				КОГДА ДвиженияКредит.ЭтоКредит
	|					ТОГДА ИСТИНА
	// Запись с нулевыми балансовыми ресурсами не выводим
	|				КОГДА ДвиженияДебет.СуммаУпр = 0 И ДвиженияДебет.СуммаРегл = 0
	|					ТОГДА ЛОЖЬ
	// Запись остаточного регистра выводим всегда
	|				КОГДА ДвиженияДебет.ЭтоДебет
	|					ТОГДА ИСТИНА
	// Запись оборотного регистра не выводим, если для нее же есть корреспонденция с другим расходным движением
	|				ИНАЧЕ НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						втДвиженияКредит КАК ДвиженияТолькоКредит
	|						ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|							ПО ДвиженияТолькоКредит.ИмяРегистра = КорИсточникиДанных.КорИмяРегистра
	|							 И ДвиженияКредит.ЕстьКорИсточникиДанных
	|					ГДЕ
	|						ДвиженияТолькоКредит.Период = ДвиженияКредит.Период
	|						И ДвиженияТолькоКредит.Регистратор = ДвиженияКредит.Регистратор
	|						И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|						И ДвиженияТолькоКредит.Организация = ДвиженияКредит.Организация
	|						И ДвиженияТолькоКредит.ЭтоКредит
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА НЕ КорИсточникиДанных.Показатель ЕСТЬ NULL
	|								ТОГДА КорИсточникиДанных.Показатель = ДвиженияКредит.Показатель
	|								И КорИсточникиДанных.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|							ИНАЧЕ НЕ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|						КОНЕЦ
	|					)
	|					И НЕ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.Регистратор ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	// Запись с нулевыми балансовыми ресурсами не выводим
	|				КОГДА ДвиженияДебет.СуммаУпр = 0 И ДвиженияДебет.СуммаРегл = 0
	|					ТОГДА ЛОЖЬ
	// Запись остаточного регистра выводим всегда
	|				КОГДА ДвиженияДебет.ЭтоДебет
	|					ТОГДА ИСТИНА
	// Запись оборотного регистра не выводим, если для нее же есть корреспонденция с другим приходным движением
	|				ИНАЧЕ НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						втДвиженияДебет КАК ДвиженияТолькоДебет
	|						ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|							ПО ДвиженияТолькоДебет.ИмяРегистра = КорИсточникиДанных.КорИмяРегистра
	|							 И ДвиженияДебет.ЕстьКорИсточникиДанных
	|					ГДЕ
	|						ДвиженияТолькоДебет.Период = ДвиженияДебет.Период
	|						И ДвиженияТолькоДебет.Регистратор = ДвиженияДебет.Регистратор
	|						И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|						И ДвиженияТолькоДебет.Организация = ДвиженияДебет.Организация
	|						И ДвиженияТолькоДебет.ЭтоДебет
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА НЕ КорИсточникиДанных.Показатель ЕСТЬ NULL
	|								ТОГДА КорИсточникиДанных.Показатель = ДвиженияДебет.Показатель
	|								И КорИсточникиДанных.ИмяРегистра = ДвиженияДебет.ИмяРегистра
	|							ИНАЧЕ НЕ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|						КОНЕЦ
	|					)
	|					И НЕ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА ДвиженияДебет.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|			ИЛИ ДвиженияКредит.Показатель В (&ПоказателиПоКорреспондирующимРегистрам)
	|			ТОГДА ДвиженияДебет.ИмяРегистра <> ДвиженияКредит.ИмяРегистра
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация,
	|	ЭтоСторноДт,
	|	ЭтоСторноКт
	|";
	
	ТаблицаКорреспонденцийДвиженийРегистров = Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров;
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ТаблицаКорреспонденцийДвиженийРегистров) <> Неопределено Тогда
		ТаблицаКорреспонденцийДвиженийРегистров = ТаблицаКорреспонденцийДвиженийРегистров + "1";
		Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров = ТаблицаКорреспонденцийДвиженийРегистров;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаКорреспонденцийДвиженийРегистров", ТаблицаКорреспонденцийДвиженийРегистров);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ЭтоДтКт = "ЭтоДебет";
		ЭтоКорДтКт = "ЭтоКредит";
		втДвиженияДтКт = "втДвиженияДебет";
		втКорДвиженияДтКт = "втДвиженияКредит";
		втДвиженияСИтогамиДтКт = "втДвиженияСИтогамиДебет";
		втДвиженияРегистровДтКт = "втДвиженияРегистровДебет";
		втСвернутыеДвиженияДтКт = "втСвернутыеДвиженияДебет";
		втДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсДебет";
		втКорДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсКредит";
		втКорИдентификаторыОперацийДтКт = "втИдентификаторыОперацийКредит";
	Иначе
		ЭтоДтКт = "ЭтоКредит";
		ЭтоКорДтКт = "ЭтоДебет";
		втДвиженияДтКт = "втДвиженияКредит";
		втКорДвиженияДтКт = "втДвиженияДебет";
		втДвиженияСИтогамиДтКт = "втДвиженияСИтогамиКредит";
		втДвиженияРегистровДтКт = "втДвиженияРегистровКредит";
		втСвернутыеДвиженияДтКт = "втСвернутыеДвиженияКредит";
		втДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсКредит";
		втКорДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсДебет";
		втКорИдентификаторыОперацийДтКт = "втИдентификаторыОперацийДебет";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭтоДтКт", ЭтоДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭтоКорДтКт", ЭтоКорДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияДтКт", втДвиженияДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втКорДвиженияДтКт", втКорДвиженияДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияСИтогамиДтКт", втДвиженияСИтогамиДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияРегистровДтКт", втДвиженияРегистровДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втСвернутыеДвиженияДтКт", втСвернутыеДвиженияДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияРегистровРеверсДтКт", втДвиженияРегистровРеверсДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втКорДвиженияРегистровРеверсДтКт", втКорДвиженияРегистровРеверсДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втКорИдентификаторыОперацийДтКт", втКорИдентификаторыОперацийДтКт);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовФормированияКорреспонденций

Функция ШаблонТекстаЗапросаЗаписейРегистра()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Показатель КАК Показатель,
	|	&ЭтоДебет КАК ЭтоДебет,
	|	&ЭтоКредит КАК ЭтоКредит,
	|	&ЭтоСторно КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	&Регистратор КАК Регистратор,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&НастройкаХозОперации КАК НастройкаХозОперации,
	|	&ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	&ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	&ВидДеятельностиНДС КАК СлужебныйВидДеятельностиНДС,
	|	&Валюта КАК Валюта,
	|	&СуммаУпр КАК СуммаУпр,
	|	&СуммаРегл КАК СуммаРегл,
	|	&СуммаВал КАК СуммаВал,
	|	&Количество КАК Количество,
	|	&РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ ИмяТаблицыКэшРегистра
	|ИЗ
	|	&ИсточникДанных
	|ГДЕ
	|	&Активность
	|	И &ИдентификаторФинЗаписи <> &ИдентификаторНеиспользуемойФинЗаписи
	|	И &УсловиеРегистратор
	|	И &УсловиеЗначенияРесурсов
	|	И &УсловиеУдаляемыеДокументы
	|	И &УсловиеДополнительныйОтбор
	|	И &УсловиеРеквизитСторно
	|	И &Период МЕЖДУ &НачалоПериода И &КонецПериода
	|СГРУППИРОВАТЬ ПО
	|	&Период,
	|	&Показатель,
	|	&ЭтоДебет,
	|	&ЭтоКредит,
	|	&ЭтоСторно,
	|	&ГруппаПолейАналитики,
	|	&Регистратор,
	|	&Организация,
	|	&Подразделение,
	|	&НаправлениеДеятельности,
	|	&НастройкаХозОперации,
	|	&ДопНастройкаХозОперации,
	|	&ИдентификаторФинЗаписи,
	|	&ИдентификаторСтроки,
	|	&ВидДеятельностиНДС,
	|	&Валюта,
	|	&РеквизитСторно
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстыЗапросовЗаписейРегистров(Запрос, ОстаточныеФинансовыеРегистры)
	
	ТекстыЗапросовРегистров = Новый Структура();
	
	ВидРегистраОбороты = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	
	Для Каждого КлючИЗначение Из ОстаточныеФинансовыеРегистры Цикл
		
		ИмяРегистра = КлючИЗначение.Ключ;
		ПараметрыОтраженияДвижений = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ПараметрыОтраженияДвижений.ТипДанныхУчета) Тогда
			Продолжить;
		КонецЕсли;
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
		
		Если НЕ ПустаяСтрока(ПараметрыОтраженияДвижений.УсловиеДебет)
		 ИЛИ НЕ ПустаяСтрока(ПараметрыОтраженияДвижений.УсловиеКредит) Тогда
			УсловиеДебет  = ПараметрыОтраженияДвижений.УсловиеДебет;
			УсловиеКредит = ПараметрыОтраженияДвижений.УсловиеКредит;
		ИначеЕсли МетаданныеРегистра.ВидРегистра = ВидРегистраОбороты Тогда
			УсловиеДебет  = "ЛОЖЬ";
			УсловиеКредит = "ЛОЖЬ";
		ИначеЕсли ПараметрыОтраженияДвижений.ИнверсияДвижений Тогда
			УсловиеДебет  = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
			УсловиеКредит = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
		Иначе
			УсловиеДебет  = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
			УсловиеКредит = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
		КонецЕсли;
		
		Если УсловиеДебет = "ЛОЖЬ" Тогда
			ВыражениеЭтоДебет = УсловиеДебет;
		Иначе
			ВыражениеЭтоДебет = "ВЫБОР
			|		КОГДА &ЭтоСторно
			|			ТОГДА &УсловиеКредит
			|		ИНАЧЕ &УсловиеДебет
			|	КОНЕЦ";
		КонецЕсли;
		
		Если УсловиеКредит = "ЛОЖЬ" Тогда
			ВыражениеЭтоКредит = УсловиеКредит;
		Иначе
			ВыражениеЭтоКредит = "ВЫБОР
			|		КОГДА &ЭтоСторно
			|			ТОГДА &УсловиеДебет
			|		ИНАЧЕ &УсловиеКредит
			|	КОНЕЦ";
		КонецЕсли;
		
		ПараметрыОтраженияДвижений.Вставить("ВыражениеЭтоДебет", ВыражениеЭтоДебет);
		ПараметрыОтраженияДвижений.Вставить("ВыражениеЭтоКредит", ВыражениеЭтоКредит);
		
		КлючиРесурсовПоказателей = Новый Соответствие;
		
		Для Каждого СтрокаПоказатель Из ПараметрыОтраженияДвижений.Показатели Цикл
			
			СтрокаПоказатель.Значение.Вставить("Показатель", СтрокаПоказатель.Ключ);
			СтрокаПоказатель.Значение.Вставить("ИмяРегистра", ИмяРегистра);
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьКорИсточникиДанных(Запрос.Параметры, СтрокаПоказатель.Значение);
			
			ВсеРесурсы = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаПоказатель.Значение.РесурсыУпр);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаПоказатель.Значение.РесурсыРегл);
			КлючРесурсов = СтрСоединить(ВсеРесурсы, ",");
			
			Если КлючиРесурсовПоказателей[КлючРесурсов] <> Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Ресурсы %1 дублируются у показателей регистра %2';
									|en = 'The %1 resources are duplicated for the %2 register indicators'");
				ВызватьИсключение СтрШаблон(ТекстОшибки, КлючРесурсов, ИмяРегистра);
			Иначе
				КлючиРесурсовПоказателей.Вставить(КлючРесурсов, СтрокаПоказатель.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если КлючиРесурсовПоказателей.Количество() = 0 Тогда
			ПоляВыборкиПоказателя = СтрокиВыборкиПолейПоОписаниюПоказателя(ПараметрыОтраженияДвижений);
		Иначе
			ПоляВыборкиПоказателя = Новый Структура;
			ИменаПолейВыборки = Перечисления.ПоказателиАналитическихРегистров.ПоляВыборкиПоОписаниюПоказателя();
			
			Для Каждого ИмяПоля Из ИменаПолейВыборки Цикл
				ПоляВыборкиПоказателя.Вставить(ИмяПоля, Новый Соответствие());
			КонецЦикла;
			
			НомерКлючаРесурсов = 0;
			
			Для Каждого КлючРесурсовПоказателей Из КлючиРесурсовПоказателей Цикл
				НомерКлючаРесурсов = НомерКлючаРесурсов + 1;
				
				СтрокиВыборкиПолейОбъектаУчета = СтрокиВыборкиПолейПоОписаниюПоказателя(ПараметрыОтраженияДвижений,
					КлючРесурсовПоказателей.Значение);
				
				Для Каждого КлючИЗначение Из ПоляВыборкиПоказателя Цикл
					СтрокаВыборкиПоля = СтрокиВыборкиПолейОбъектаУчета[КлючИЗначение.Ключ];
					Если КлючИЗначение.Значение[СтрокаВыборкиПоля] = Неопределено Тогда
						КлючИЗначение.Значение.Вставить(СтрокаВыборкиПоля, Новый Массив());
					КонецЕсли;
					КлючИЗначение.Значение[СтрокаВыборкиПоля].Добавить(НомерКлючаРесурсов);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого ИмяПоля Из ИменаПолейВыборки Цикл
				СтрокиВыборкиПоля = ПоляВыборкиПоказателя[ИмяПоля];
				ПолеВыборкиПоказателя = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыбораЗначенияПоля(СтрокиВыборкиПоля);
				ПоляВыборкиПоказателя.Вставить(ИмяПоля, ПолеВыборкиПоказателя);
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымПодразделение) Тогда
			Подразделение = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(
				Справочники.СтруктураПредприятия.ПустаяСсылка());
		Иначе
			Подразделение = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
				ПараметрыОтраженияДвижений.ПутьКДаннымПодразделение);
		КонецЕсли;

		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымНаправлениеДеятельности) Тогда
			НаправлениеДеятельности = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(
				Справочники.НаправленияДеятельности.ПустаяСсылка());
		Иначе
			НаправлениеДеятельности = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
				ПараметрыОтраженияДвижений.ПутьКДаннымНаправлениеДеятельности);
		КонецЕсли;

		НастройкаХозОперации = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ПараметрыОтраженияДвижений.ПутьКДаннымНастройкаХозОперации);

		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымДопНастройкаХозОперации) Тогда
			ДопНастройкаХозОперации = НастройкаХозОперации;
		Иначе
			ДопНастройкаХозОперации = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
				ПараметрыОтраженияДвижений.ПутьКДаннымДопНастройкаХозОперации);
		КонецЕсли;

		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымВалюта) Тогда
			Валюта = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Справочники.Валюты.ПустаяСсылка());
		Иначе
			Валюта = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
				ПараметрыОтраженияДвижений.ПутьКДаннымВалюта);
		КонецЕсли;

		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымСторно) Тогда
			РеквизитСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Ложь);
		Иначе
			РеквизитСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
				ПараметрыОтраженияДвижений.ПутьКДаннымСторно);
		КонецЕсли;

		Регистратор = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ПараметрыОтраженияДвижений.ПутьКДаннымРегистратор);
		Организация = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ПараметрыОтраженияДвижений.ПутьКДаннымОрганизация);
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымВидДеятельностиНДС) Тогда
			ВидДеятельностиНДС = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(
				Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка());
		Иначе
			ВидДеятельностиНДС = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
				ПараметрыОтраженияДвижений.ПутьКДаннымВидДеятельностиНДС);
		КонецЕсли;
		
		Если ПараметрыОтраженияДвижений.ЭтоРегистрУчетаНДС
			И Запрос.Параметры.РегистрыНДС.Найти(ИмяРегистра) = Неопределено Тогда
			Запрос.Параметры.РегистрыНДС.Добавить(ИмяРегистра);
		КонецЕсли;
		
		Если ФинансовыйУчетПоДаннымБалансовыхРегистров.РесурсОтсутствуетИлиМожетБытьПустым(ПараметрыОтраженияДвижений.РесурсыУпр)
			И Запрос.Параметры.РегистрыБезСуммыУпр.Найти(ИмяРегистра) = Неопределено Тогда
			Запрос.Параметры.РегистрыБезСуммыУпр.Добавить(ИмяРегистра);
		КонецЕсли;
		
		Если ФинансовыйУчетПоДаннымБалансовыхРегистров.РесурсОтсутствуетИлиМожетБытьПустым(ПараметрыОтраженияДвижений.РесурсыРегл)
			И Запрос.Параметры.РегистрыБезСуммыРегл.Найти(ИмяРегистра) = Неопределено Тогда
			Запрос.Параметры.РегистрыБезСуммыРегл.Добавить(ИмяРегистра);
		КонецЕсли;
		
		ИсточникДанных = СтрШаблон("РегистрНакопления.%1 КАК ТаблицаРегистра", ИмяРегистра) + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ПорцияДокументов
			|		ПО &Регистратор = ПорцияДокументов.Регистратор";
		УсловиеУдаляемыеДокументы = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияУдаляемыеДокументы(МетаданныеРегистра);
		
		Если КлючиРесурсовПоказателей.Количество() > 1 Тогда
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьПовторительВИсточникДанных(ИсточникДанных,
				КлючиРесурсовПоказателей.Количество());
		КонецЕсли;
		
		УсловиеРегистратор = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияРегистратор(Запрос.Параметры);
		УсловиеДополнительныйОтбор = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаДополнительныйОтбор(ПараметрыОтраженияДвижений);
		Если ИмяРегистра = РегистрыНакопленияМетаданные.РасчетыСКлиентамиПоСрокам.Имя Тогда
			УсловиеДополнительныйОтбор = ?(ПустаяСтрока(УсловиеДополнительныйОтбор), "", УсловиеДополнительныйОтбор) + СтрЗаменить("
			|	И ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
			|			ТОГДА ПсевдонимИсточникаДанных.АналитикаУчетаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ПараметрыОтраженияДвижений.ПсевдонимИсточникаДанных);
		ИначеЕсли ИмяРегистра = РегистрыНакопленияМетаданные.РасчетыСПоставщикамиПоСрокам.Имя Тогда
			УсловиеДополнительныйОтбор = ?(ПустаяСтрока(УсловиеДополнительныйОтбор), "", УсловиеДополнительныйОтбор) + СтрЗаменить("
			|	И ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
			|			ТОГДА ПсевдонимИсточникаДанных.АналитикаУчетаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ПараметрыОтраженияДвижений.ПсевдонимИсточникаДанных);
		КонецЕсли;
		Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("КэшДокументов") <> Неопределено Тогда
			УсловиеДополнительныйОтбор = ?(ПустаяСтрока(УсловиеДополнительныйОтбор), "", УсловиеДополнительныйОтбор) + "
			|	И НЕ ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				КэшДокументов КАК КэшДокументов
			|			ГДЕ
			|				КэшДокументов.Регистратор = &Регистратор
			|				И КэшДокументов.Период = &Период)";
		КонецЕсли;
		УсловиеРеквизитСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияРеквизитСторно();
		
		ТекстЗапроса = ШаблонТекстаЗапросаЗаписейРегистра();
		
		Если КлючиРесурсовПоказателей.Количество() > 1 Тогда
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьПовторительВПоляГруппировки(ТекстЗапроса);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаправлениеДеятельности", НаправлениеДеятельности);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторФинЗаписи", ПоляВыборкиПоказателя.ИдентификаторФинЗаписи);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХозОперации", НастройкаХозОперации);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторСтроки", ПоляВыборкиПоказателя.ИдентификаторСтроки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоДебет", ПоляВыборкиПоказателя.ЭтоДебет);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоКредит", ПоляВыборкиПоказателя.ЭтоКредит);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоСторно", ПоляВыборкиПоказателя.ЭтоСторно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаУпр", ПоляВыборкиПоказателя.СуммаУпр);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаРегл", ПоляВыборкиПоказателя.СуммаРегл);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаВал", ПоляВыборкиПоказателя.СуммаВал);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Количество", ПоляВыборкиПоказателя.Количество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗначенияРесурсов", ПоляВыборкиПоказателя.УсловиеЗначенияРесурсов);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДебет", УсловиеДебет);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКредит", УсловиеКредит);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРегистратор", УсловиеРегистратор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУдаляемыеДокументы", УсловиеУдаляемыеДокументы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДополнительныйОтбор", УсловиеДополнительныйОтбор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРеквизитСторно", УсловиеРеквизитСторно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ИмяРегистра));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", Валюта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Регистратор", Регистратор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", Организация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подразделение", Подразделение);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДеятельностиНДС", ВидДеятельностиНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитСторно", РеквизитСторно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопНастройкаХозОперации", ДопНастройкаХозОперации);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Показатель", ПоляВыборкиПоказателя.Показатель);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаРегистратор", "&Регистратор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаОрганизация", "&Организация");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Период", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("Период"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Активность", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("Активность"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("ВидДвижения"));
		
		Если ИмяРегистра = РегистрыНакопленияМетаданные.РасчетыСКлиентамиПоСрокам.Имя Тогда
			ТекстВложеннойТаблицы = "(" + СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицыКэшРегистра", "") + ")";
			
			// удалить после исправления ошибки 00-00450915
			НачислениеАвансаКлиентаПриВозврате = "(ТаблицаРегистра.ЭтоКредит
			|	И ТаблицаРегистра.Показатель = ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеКредиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.ВозвратТоваровОтКлиента),
			|		ТИП(Документ.КорректировкаРеализации),
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			// удалить после исправления причины возникновения ошибки 00-00556880 и 00-00570173
			ЗачетАвансаКлиентаПриКорректировке = "(ТаблицаРегистра.ЭтоДебет
			|	И ТаблицаРегистра.Показатель = ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеДебиторскойЗадолженности),
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеКредиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ТаблицаРегистра.Период КАК Период,
			|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаКлиентаПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ТаблицаРегистра.Показатель
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.Показатель
			|	КОНЕЦ КАК Показатель,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ КАК ЭтоДебет,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ КАК ЭтоКредит,
			|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
			|	&ПоляАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор КАК Регистратор,
			|	ТаблицаРегистра.Организация КАК Организация,
			|	ТаблицаРегистра.Подразделение КАК Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ КАК НастройкаХозОперации,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ДопНастройкаХозОперации
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента)
			|		ИНАЧЕ ТаблицаРегистра.ДопНастройкаХозОперации
			|	КОНЕЦ КАК ДопНастройкаХозОперации,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС КАК СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.Валюта КАК Валюта,
			|	СУММА(ТаблицаРегистра.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ТаблицаРегистра.СуммаРегл) КАК СуммаРегл,
			|	СУММА(ТаблицаРегистра.СуммаВал) КАК СуммаВал,
			|	СУММА(ТаблицаРегистра.Количество) КАК Количество,
			|	ТаблицаРегистра.РеквизитСторно КАК РеквизитСторно
			|ИЗ
			|	&ТекстВложеннойТаблицы КАК ТаблицаРегистра
			|	,
			|	(ВЫБРАТЬ
			|		НЕОПРЕДЕЛЕНО КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Дт КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Кт КАК ДтКт
			|	) КАК ЧастиДвойнойЗаписи
			|ГДЕ
			|	ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|	ИЛИ &НачислениеАвансаКлиентаПриВозврате
			|	ИЛИ &ЗачетАвансаКлиентаПриКорректировке
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаРегистра.Период,
			|	ТаблицаРегистра.ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаКлиентаПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ТаблицаРегистра.Показатель
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.Показатель
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ,
			|	ТаблицаРегистра.ЭтоСторно,
			|	&ГруппаАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор,
			|	ТаблицаРегистра.Организация,
			|	ТаблицаРегистра.Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ДопНастройкаХозОперации
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента)
			|		ИНАЧЕ ТаблицаРегистра.ДопНастройкаХозОперации
			|	КОНЕЦ,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.Валюта,
			|	ТаблицаРегистра.РеквизитСторно
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВложеннойТаблицы", ТекстВложеннойТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачислениеАвансаКлиентаПриВозврате", НачислениеАвансаКлиентаПриВозврате);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗачетАвансаКлиентаПриКорректировке", ЗачетАвансаКлиентаПриКорректировке);
			
		ИначеЕсли ИмяРегистра = РегистрыНакопленияМетаданные.РасчетыСПоставщикамиПоСрокам.Имя Тогда
			ТекстВложеннойТаблицы = "(" + СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицыКэшРегистра", "") + ")";
			
			// удалить после исправления ошибки 00-00453822
			НачислениеАвансаПоставщикуПриВозврате = "(ТаблицаРегистра.ЭтоДебет
			|	И ТаблицаРегистра.Показатель = ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеДебиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.ВозвратТоваровПоставщику),
			|		ТИП(Документ.КорректировкаПриобретения),
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			// удалить после исправления причины возникновения ошибки 00-00556880 и 00-00570173
			ЗачетАвансаПоставщикуПриКорректировке = "(ТаблицаРегистра.ЭтоКредит
			|	И ТаблицаРегистра.Показатель = ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеКредиторскойЗадолженности),
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеДебиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ТаблицаРегистра.Период КАК Период,
			|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ТаблицаРегистра.Показатель
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.Показатель
			|	КОНЕЦ КАК Показатель,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ КАК ЭтоДебет,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ КАК ЭтоКредит,
			|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
			|	&ПоляАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор КАК Регистратор,
			|	ТаблицаРегистра.Организация КАК Организация,
			|	ТаблицаРегистра.Подразделение КАК Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ КАК НастройкаХозОперации,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ДопНастройкаХозОперации
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику)
			|		ИНАЧЕ ТаблицаРегистра.ДопНастройкаХозОперации
			|	КОНЕЦ КАК ДопНастройкаХозОперации,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС КАК СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.Валюта КАК Валюта,
			|	СУММА(ТаблицаРегистра.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ТаблицаРегистра.СуммаРегл) КАК СуммаРегл,
			|	СУММА(ТаблицаРегистра.СуммаВал) КАК СуммаВал,
			|	СУММА(ТаблицаРегистра.Количество) КАК Количество,
			|	ТаблицаРегистра.РеквизитСторно КАК РеквизитСторно
			|ИЗ
			|	&ТекстВложеннойТаблицы КАК ТаблицаРегистра
			|	,
			|	(ВЫБРАТЬ
			|		НЕОПРЕДЕЛЕНО КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Дт КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Кт КАК ДтКт
			|	) КАК ЧастиДвойнойЗаписи
			|ГДЕ
			|	ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|	ИЛИ &НачислениеАвансаПоставщикуПриВозврате
			|	ИЛИ &ЗачетАвансаПоставщикуПриКорректировке
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаРегистра.Период,
			|	ТаблицаРегистра.ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ТаблицаРегистра.Показатель
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.Показатель
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ,
			|	ТаблицаРегистра.ЭтоСторно,
			|	&ГруппаАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор,
			|	ТаблицаРегистра.Организация,
			|	ТаблицаРегистра.Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ДопНастройкаХозОперации
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику)
			|		ИНАЧЕ ТаблицаРегистра.ДопНастройкаХозОперации
			|	КОНЕЦ,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.Валюта,
			|	ТаблицаРегистра.РеквизитСторно
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВложеннойТаблицы", ТекстВложеннойТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачислениеАвансаПоставщикуПриВозврате", НачислениеАвансаПоставщикуПриВозврате);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗачетАвансаПоставщикуПриКорректировке", ЗачетАвансаПоставщикуПриКорректировке);
		КонецЕсли;

		
		ТекстыЗапросовРегистров.Вставить(ИмяРегистра, ТекстЗапроса);
		
	КонецЦикла;
	
	Возврат ТекстыЗапросовРегистров;
	
КонецФункции

Функция ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров)
	
	ТекстыЗапросов = Новый Массив();
	
	Для Каждого КлючИЗначение Из ТекстыЗапросовЗаписейРегистров Цикл
		ТекстыЗапросов.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицыКэшРегистра", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбораАналитики", "//ПоляВыбораАналитики");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаПолейАналитики", "//ГруппаПолейАналитики");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляАналитикиВложеннойТаблицы", "//ПоляАналитикиВложеннойТаблицы");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаАналитикиВложеннойТаблицы", "//ГруппаАналитикиВложеннойТаблицы");
	
	УдаляемыеПоляВыборки = СтрРазделить("Подразделение,НаправлениеДеятельности", ",");
	ПоляИндексирования = СтрРазделить("ЭтоДебет,ЭтоКредит", ",");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапроса, УдаляемыеПоляВыборки , ПоляИндексирования, "втДвиженияРегистров");

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.Показатель КАК Показатель,
	|	ДвиженияРегистров.ЭтоДебет КАК ЭтоДебет,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.СлужебныйВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ДвиженияРегистров.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|					ТОГДА ДвиженияРегистров.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ТОГДА ДвиженияРегистров.СуммаВал
	|				ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|			КОНЕЦ
	|		ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА ДвиженияРегистров.Валюта = ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			И ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		ИНАЧЕ ДвиженияРегистров.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровДебет
	|ИЗ
	|	втДвиженияРегистров КАК ДвиженияРегистров
	|ГДЕ
	|	НЕ ДвиженияРегистров.ЭтоКредит
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.Показатель КАК Показатель,
	|	ДвиженияРегистров.ЭтоКредит КАК ЭтоКредит,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.СлужебныйВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ДвиженияРегистров.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|					ТОГДА ДвиженияРегистров.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ТОГДА ДвиженияРегистров.СуммаВал
	|				ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|			КОНЕЦ
	|		ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА ДвиженияРегистров.Валюта = ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			И ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		ИНАЧЕ ДвиженияРегистров.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровКредит
	|ИЗ
	|	втДвиженияРегистров КАК ДвиженияРегистров
	|ГДЕ
	|	НЕ ДвиженияРегистров.ЭтоДебет
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистров");
	
	ОбработатьИСоединитьТаблицыДвижений(Запрос, ТекстыЗапросов);
	
	ОпределитьОшибкиКорреспонденций(ТекстыЗапросов, Запрос.Параметры, Истина);
	
	Если ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, "втОшибкиКорреспонденций") Тогда
		ОпределитьМаксимальныйНомерЗаписейДвижений(ТекстыЗапросов);
		
		ВосстановитьДвиженияОшибочныхКорреспонденций(ТекстыЗапросов, Запрос.Параметры, "Дт");
		ВосстановитьДвиженияОшибочныхКорреспонденций(ТекстыЗапросов, Запрос.Параметры, "Кт");
		
		ОпределитьРегистрыСДвижениямиРеверса(ТекстыЗапросов);
		
		ЗаменитьДвиженияРеверсаНаСторно(ТекстыЗапросов, "Дт");
		ЗаменитьДвиженияРеверсаНаСторно(ТекстыЗапросов, "Кт");
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втМаксимальныйНомерЗаписей");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистровРеверсДебет");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистровРеверсКредит");
		
		ТаблицаКорреспонденцийДвиженийРегистров = Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров;
		
		ОбработатьИСоединитьТаблицыДвижений(Запрос, ТекстыЗапросов);
		
		ОпределитьКорреспонденцииБезОшибок(ТекстыЗапросов, Запрос.Параметры);
		ОпределитьРегистрыЗаменыРеверсаНаСторно(ТекстыЗапросов);
		
		Если ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, "втКорреспонденцииБезОшибок") Тогда
			ЗаменитьКорреспонденцииРеверсаНаСторно(ТекстыЗапросов,
				Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров,
				ТаблицаКорреспонденцийДвиженийРегистров);
			
			ТаблицаРегистровЗаменыРеверса = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втРегистрыЗаменыРеверсаНаСторно");
			ТаблицаРегистровЗаменыРеверса = ТаблицаРегистровЗаменыРеверса.ПолучитьДанные().Выгрузить();
			Запрос.Параметры.РегистрыЗаменыРеверсаНаСторно = ТаблицаРегистровЗаменыРеверса.ВыгрузитьКолонку("ИмяРегистра");
		Иначе
			Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров = ТаблицаКорреспонденцийДвиженийРегистров;
		КонецЕсли;
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втКорреспонденцииБезОшибок");
		
	Иначе
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");
		ДобавитьПустуюТаблицуДокументовЗаменыРеверса(ТекстыЗапросов);
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияДебет");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияКредит");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втКорИсточникиДанных");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИдентификаторыКорИсточниковДанных");
	
	ВосстановитьРасчетыПоСторно(Запрос, ТекстыЗапросов);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	0 КАК НомерСложнойЗаписи,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ПоказательДт КАК ПоказательДт,
	|	ДвиженияДебетКредит.ПоказательКт КАК ПоказательКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ЕСТЬNULL(ДвиженияДебетКредит.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииДт КАК ДопНастройкаХозОперацииДт,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииКт КАК ДопНастройкаХозОперацииКт,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаУпрДт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА ДвиженияДебетКредит.СуммаРеглДт = ДвиженияДебетКредит.СуммаРеглКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаУпрКт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА ДвиженияДебетКредит.СуммаРеглДт = ДвиженияДебетКредит.СуммаРеглКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрКт
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаРеглДт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА ДвиженияДебетКредит.СуммаУпрДт = ДвиженияДебетКредит.СуммаУпрКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаРеглКт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА ДвиженияДебетКредит.СуммаУпрДт = ДвиженияДебетКредит.СуммаУпрКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглКт
	|	КОНЕЦ КАК СуммаРеглКт
	|ПОМЕСТИТЬ втДвиженияДебетКредит
	|ИЗ
	|	ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияДебетКредит";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ТаблицаКорреспонденцийДвиженийРегистров",
		Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов,
		Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров);
	
КонецПроцедуры

Процедура РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СуммыДокументовВВалютахУчета.Регистратор КАК Регистратор,
	|	СуммыДокументовВВалютахУчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СуммыДокументовВВалютахУчета.Валюта КАК Валюта,
	|	СуммыДокументовВВалютахУчета.СуммаБезНДС КАК СуммаБезНДС,
	|	СуммыДокументовВВалютахУчета.СуммаНДС КАК СуммаНДС,
	|	СуммыДокументовВВалютахУчета.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыДокументовВВалютахУчета.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
	|ПОМЕСТИТЬ втСуммыДокументовВВалютахУчета
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|ГДЕ
	// Отключено до реализации в бюджетировании объектов учета
	|	ЛОЖЬ
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|		ГДЕ
	|			ДвиженияДебетКредит.Регистратор = СуммыДокументовВВалютахУчета.Регистратор
	|			И (ДвиженияДебетКредит.СложнаяПроводкаДт ИЛИ ДвиженияДебетКредит.СложнаяПроводкаКт)
	|		)
	|	И СуммыДокументовВВалютахУчета.ОтражаетсяВРасчетах
	|	И СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|	И (СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов = СуммыДокументовВВалютахУчета.Валюта
	|		ИЛИ СуммыДокументовВВалютахУчета.СуммаНДСВзаиморасчетов <> 0)
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ИдентификаторСтроки,
	|	ВалютаВзаиморасчетов
	|");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияДебетКредит.НомерСложнойЗаписи КАК НомерСложнойЗаписи,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ПоказательДт КАК ПоказательДт,
	|	ДвиженияДебетКредит.ПоказательКт КАК ПоказательКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииДт КАК ДопНастройкаХозОперацииДт,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииКт КАК ДопНастройкаХозОперацииКт,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК РаспределяемаяСуммаВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК РаспределяемаяСуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК РаспределяемоеКоличествоДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК РаспределяемоеКоличествоКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = &ВалютаУправленческогоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА СуммыВВалютахДт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРаспределениеСуммыДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = &ВалютаУправленческогоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА СуммыВВалютахКт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРаспределениеСуммыКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА 0
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалДт
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА СуммыВВалютахДт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалДт * ДвиженияДебетКредит.СуммаУпрДт / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалДт * ДвиженияДебетКредит.СуммаРеглДт / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(31, 2))
	|		КОГДА ДвиженияДебетКредит.ВидДеятельностиНДСДт В (&ТипыНалогообложенияБезУчетаНДС)
	|		  ИЛИ ДвиженияДебетКредит.ВидДеятельностиНДСКт В (&ТипыНалогообложенияБезУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыНДС)
	|					ТОГДА 0
	|				КОГДА СуммыВВалютахДт.ВалютаВзаиморасчетов = СуммыВВалютахДт.Валюта
	|					ТОГДА СуммыВВалютахДт.СуммаБезНДС + СуммыВВалютахДт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахДт.СуммаВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахДт.СуммаБезНДС < 0 ИЛИ СуммыВВалютахДт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА СуммыВВалютахДт.ВалютаВзаиморасчетов = СуммыВВалютахДт.Валюта
	|					ТОГДА СуммыВВалютахДт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахДт.СуммаНДСВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахДт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА СуммыВВалютахДт.ВалютаВзаиморасчетов = СуммыВВалютахДт.Валюта
	|				ТОГДА СуммыВВалютахДт.СуммаБезНДС
	|			ИНАЧЕ СуммыВВалютахДт.СуммаВзаиморасчетов - СуммыВВалютахДт.СуммаНДСВзаиморасчетов
	|		КОНЕЦ * ВЫБОР
	|			КОГДА СуммыВВалютахДт.СуммаБезНДС < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА 0
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалКт
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА СуммыВВалютахКт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалКт * ДвиженияДебетКредит.СуммаУпрКт / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалКт * ДвиженияДебетКредит.СуммаРеглКт / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(31, 2))
	|		КОГДА ДвиженияДебетКредит.ВидДеятельностиНДСКт В (&ТипыНалогообложенияБезУчетаНДС)
	|		  ИЛИ ДвиженияДебетКредит.ВидДеятельностиНДСДт В (&ТипыНалогообложенияБезУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыНДС)
	|					ТОГДА 0
	|				КОГДА СуммыВВалютахКт.ВалютаВзаиморасчетов = СуммыВВалютахКт.Валюта
	|					ТОГДА СуммыВВалютахКт.СуммаБезНДС + СуммыВВалютахКт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахКт.СуммаВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахКт.СуммаБезНДС < 0 ИЛИ СуммыВВалютахКт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА СуммыВВалютахКт.ВалютаВзаиморасчетов = СуммыВВалютахКт.Валюта
	|					ТОГДА СуммыВВалютахКт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахКт.СуммаНДСВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахКт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА СуммыВВалютахКт.ВалютаВзаиморасчетов = СуммыВВалютахКт.Валюта
	|				ТОГДА СуммыВВалютахКт.СуммаБезНДС
	|			ИНАЧЕ СуммыВВалютахКт.СуммаВзаиморасчетов - СуммыВВалютахКт.СуммаНДСВзаиморасчетов
	|		КОНЕЦ * ВЫБОР
	|			КОГДА СуммыВВалютахКт.СуммаБезНДС < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияДт = 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРаспределениеКоличестваДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияКт = 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРаспределениеКоличестваКт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияДт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт * ДвиженияДебетКредит.СуммаУпрДт / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт * ДвиженияДебетКредит.СуммаРеглДт / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоДт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияКт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт * ДвиженияДебетКредит.СуммаУпрКт / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт * ДвиженияДебетКредит.СуммаРеглКт / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоКт
	|ПОМЕСТИТЬ втРаспределениеНебалансовых
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСуммыДокументовВВалютахУчета КАК СуммыВВалютахДт
	|		ПО ДвиженияДебетКредит.Регистратор = СуммыВВалютахДт.Регистратор
	|		 И ДвиженияДебетКредит.ИдентификаторСтрокиКт = СуммыВВалютахДт.ИдентификаторСтроки
	|		 И ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.ВалютаВзаиморасчетов
	|		 И ДвиженияДебетКредит.СложнаяПроводкаДт
	|		 И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|			ГДЕ
	|				ДокументыЗаменыРеверса.Период = ДвиженияДебетКредит.Период
	|				И ДокументыЗаменыРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
	|				И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|				И ДокументыЗаменыРеверса.Организация = ДвиженияДебетКредит.Организация
	|			)
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСуммыДокументовВВалютахУчета КАК СуммыВВалютахКт
	|		ПО ДвиженияДебетКредит.Регистратор = СуммыВВалютахКт.Регистратор
	|		 И ДвиженияДебетКредит.ИдентификаторСтрокиДт = СуммыВВалютахКт.ИдентификаторСтроки
	|		 И ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.ВалютаВзаиморасчетов
	|		 И ДвиженияДебетКредит.СложнаяПроводкаКт
	|		 И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|			ГДЕ
	|				ДокументыЗаменыРеверса.Период = ДвиженияДебетКредит.Период
	|				И ДокументыЗаменыРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
	|				И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|				И ДокументыЗаменыРеверса.Организация = ДвиженияДебетКредит.Организация
	|			)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	НомерЗаписиДт,
	|	НомерЗаписиКт,
	|	НомерСложнойЗаписи
	|";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);

	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияДебетКредит");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втСуммыДокументовВВалютахУчета");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияСуммы(ТекстыЗапросов,
		"втКоррекцияОшибокСуммВалДт", "РаспределяемаяСуммаВалДт", "СуммаВалДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияСуммы(ТекстыЗапросов,
		"втКоррекцияОшибокСуммВалКт", "РаспределяемаяСуммаВалКт", "СуммаВалКт");

	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияКоличества(ТекстыЗапросов,
		"втКоррекцияОшибокКоличествДт", "РаспределяемоеКоличествоДт", "КоличествоДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияКоличества(ТекстыЗапросов,
		"втКоррекцияОшибокКоличествКт", "РаспределяемоеКоличествоКт", "КоличествоКт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.Период КАК Период,
	|	РаспределениеНебалансовых.НомерСтроки КАК НомерЗаписи,
	|	РаспределениеНебалансовых.НомерЗаписиДт КАК НомерЗаписиДт,
	|	РаспределениеНебалансовых.НомерЗаписиКт КАК НомерЗаписиКт,
	|	РаспределениеНебалансовых.ИмяРегистраДт КАК ИмяРегистраДт,
	|	РаспределениеНебалансовых.ИмяРегистраКт КАК ИмяРегистраКт,
	|	РаспределениеНебалансовых.ЭтоСторноДт КАК ЭтоСторноДт,
	|	РаспределениеНебалансовых.ЭтоСторноКт КАК ЭтоСторноКт,
	|	РаспределениеНебалансовых.Организация КАК Организация,
	|	РаспределениеНебалансовых.Регистратор КАК Регистратор,
	|	РаспределениеНебалансовых.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РаспределениеНебалансовых.ДопНастройкаХозОперацииДт КАК ДопНастройкаХозОперацииДт,
	|	РаспределениеНебалансовых.ДопНастройкаХозОперацииКт КАК ДопНастройкаХозОперацииКт,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	РаспределениеНебалансовых.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	РаспределениеНебалансовых.ВалютаДт КАК ВалютаДт,
	|	РаспределениеНебалансовых.ВалютаКт КАК ВалютаКт,
	|	РаспределениеНебалансовых.ПоказательДт КАК ПоказательДт,
	|	РаспределениеНебалансовых.ПоказательКт КАК ПоказательКт,
	|	РаспределениеНебалансовых.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	РаспределениеНебалансовых.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	РаспределениеНебалансовых.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	РаспределениеНебалансовых.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	РаспределениеНебалансовых.РеквизитСторноДт КАК РеквизитСторноДт,
	|	РаспределениеНебалансовых.РеквизитСторноКт КАК РеквизитСторноКт,
	|	РаспределениеНебалансовых.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	РаспределениеНебалансовых.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	РаспределениеНебалансовых.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	РаспределениеНебалансовых.СуммаУпрДт КАК СуммаУпрДт,
	|	РаспределениеНебалансовых.СуммаУпрКт КАК СуммаУпрКт,
	|	РаспределениеНебалансовых.СуммаРеглДт КАК СуммаРеглДт,
	|	РаспределениеНебалансовых.СуммаРеглКт КАК СуммаРеглКт,
	|	РаспределениеНебалансовых.СуммаВалДт + ЕСТЬNULL(КоррекцияОшибокСуммВалДт.ОшибкаОкругления, 0) КАК СуммаВалДт,
	|	РаспределениеНебалансовых.СуммаВалКт + ЕСТЬNULL(КоррекцияОшибокСуммВалКт.ОшибкаОкругления, 0) КАК СуммаВалКт,
	|	РаспределениеНебалансовых.КоличествоДт + ЕСТЬNULL(КоррекцияОшибокКоличествДт.ОшибкаОкругления, 0) КАК КоличествоДт,
	|	РаспределениеНебалансовых.КоличествоКт + ЕСТЬNULL(КоррекцияОшибокКоличествКт.ОшибкаОкругления, 0) КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияДебетКредит
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалДт КАК КоррекцияОшибокСуммВалДт
	|		ПО РаспределениеНебалансовых.НомерЗаписиДт = КоррекцияОшибокСуммВалДт.НомерЗаписиДт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокСуммВалДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалКт КАК КоррекцияОшибокСуммВалКт
	|		ПО РаспределениеНебалансовых.НомерЗаписиКт = КоррекцияОшибокСуммВалКт.НомерЗаписиКт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокСуммВалКт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествДт КАК КоррекцияОшибокКоличествДт
	|		ПО РаспределениеНебалансовых.НомерЗаписиДт = КоррекцияОшибокКоличествДт.НомерЗаписиДт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокКоличествДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествКт КАК КоррекцияОшибокКоличествКт
	|		ПО РаспределениеНебалансовых.НомерЗаписиКт = КоррекцияОшибокКоличествКт.НомерЗаписиКт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокКоличествКт.НомерСтроки
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписиДт,
	|	НомерЗаписиКт
	|");
	
	УдаляемыеВременныеТаблицы = Новый Массив();
	УдаляемыеВременныеТаблицы.Добавить("втРаспределениеНебалансовых");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммВалДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммВалКт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокКоличествДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокКоличествКт");

	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемыеВременныеТаблицы);
	
КонецПроцедуры

Процедура ПроверитьОшибкиКорреспонденций(ДокументыКОбработке, Запрос, ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.ИмяРегистраДт КАК ИмяРегистраДт,
	|	Движения.ИмяРегистраКт КАК ИмяРегистраКт,
	|	Движения.ЭтоСторноДт КАК ЭтоСторноДт,
	|	Движения.ЭтоСторноКт КАК ЭтоСторноКт,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.СуммаУпрДт КАК СуммаУпрДт,
	|	Движения.СуммаУпрКт КАК СуммаУпрКт,
	|	Движения.СуммаРеглДт КАК СуммаРеглДт,
	|	Движения.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ втОшибкиКорреспонденций
	|ИЗ
	|	втДвиженияДебетКредит КАК Движения
	|ГДЕ
	|	Движения.ИмяРегистраДт = """"
	|	ИЛИ Движения.ИмяРегистраКт = """"
	|	ИЛИ Движения.ИдентификаторФинЗаписи = """"
	|	ИЛИ Движения.СуммаУпрДт <> Движения.СуммаУпрКт
	|	ИЛИ Движения.СуммаРеглДт <> Движения.СуммаРеглКт
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	Организация
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОшибкиКорреспонденций.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ЕСТЬNULL(ПрочиеАктивыПассивыДт.Статья, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) КАК СтатьяАктивовПассивовДт,
	|	ЕСТЬNULL(ПрочиеАктивыПассивыКт.Статья, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) КАК СтатьяАктивовПассивовКт,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор,
	|	ОшибкиКорреспонденций.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОшибкиКорреспонденций.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОшибкиКорреспонденций.СуммаУпрДт КАК СуммаУпрДт,
	|	ОшибкиКорреспонденций.СуммаУпрКт КАК СуммаУпрКт,
	|	ОшибкиКорреспонденций.СуммаРеглДт КАК СуммаРеглДт,
	|	ОшибкиКорреспонденций.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивыДт
	|		ПО ОшибкиКорреспонденций.Период = ПрочиеАктивыПассивыДт.Период
	|		 И ОшибкиКорреспонденций.Регистратор = ПрочиеАктивыПассивыДт.Регистратор
	|		 И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ПрочиеАктивыПассивыДт.ИдентификаторФинЗаписи
	|		 И ОшибкиКорреспонденций.НастройкаХозОперации = ПрочиеАктивыПассивыДт.НастройкаХозяйственнойОперации
	|		 И ОшибкиКорреспонденций.Организация = ПрочиеАктивыПассивыДт.Организация
	|		 И ПрочиеАктивыПассивыДт.ДебетКредит = ВЫБОР
	|			КОГДА ОшибкиКорреспонденций.ЭтоСторноДт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|		 КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивыКт
	|		ПО ОшибкиКорреспонденций.Период = ПрочиеАктивыПассивыКт.Период
	|		 И ОшибкиКорреспонденций.Регистратор = ПрочиеАктивыПассивыКт.Регистратор
	|		 И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ПрочиеАктивыПассивыКт.ИдентификаторФинЗаписи
	|		 И ОшибкиКорреспонденций.НастройкаХозОперации = ПрочиеАктивыПассивыКт.НастройкаХозяйственнойОперации
	|		 И ОшибкиКорреспонденций.Организация = ПрочиеАктивыПассивыКт.Организация
	|		 И ПрочиеАктивыПассивыКт.ДебетКредит = ВЫБОР
	|			КОГДА ОшибкиКорреспонденций.ЭтоСторноКт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|		 КОНЕЦ
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиКорреспонденций.Период,
	|	ОшибкиКорреспонденций.Регистратор,
	|	ОшибкиКорреспонденций.Организация
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	
	МетаданныеРегистра = РегистрыНакопленияМетаданные.ФактическиеДанныеБюджетирования;
	
	Выборка = Результаты[Результаты.ВГраница() - 1].Выбрать();
	ВыборкаПроводки = Результаты[Результаты.ВГраница()].Выбрать();
	
	Пока ВыборкаПроводки.Следующий() Цикл
		ОшибкиПроводок = Новый Массив;
		
		СтруктураПоиска = Новый Структура("Период,Организация,Регистратор");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПроводки);
		
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторФинЗаписи) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнен идентификатор фин.записи в %1';
									|en = 'Financial record ID is required in %1'");
				Если НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраДт)
					ИЛИ Выборка.ИмяРегистраДт = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт])));
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраКт)
					ИЛИ Выборка.ИмяРегистраКт =  ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт])));
				ИначеЕсли Выборка.ИмяРегистраДт = Выборка.ИмяРегистраКт Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт])));
				Иначе
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистрах ""%1"" и ""%2""';
																		|en = 'the ""%1"" and ""%2"" registers'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт])));
				КонецЕсли;
				ОшибкиПроводок.Добавить(ТекстОшибки);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраДт) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр(
					"ru = 'Не найдена корреспонденция для записи регистра ""%1"" с идентификатором %2';
					|en = 'Correspondence for the ""%1"" register record with the %2 ID is not found'",
					ОбщегоНазначения.КодОсновногоЯзыка()), ОбщегоНазначения.ПредставлениеОбъекта(
					РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]), Выборка.ИдентификаторФинЗаписи);
				ОшибкиПроводок.Добавить(ТекстОшибки);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраКт) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр(
					"ru = 'Не найдена корреспонденция для записи регистра ""%1"" с идентификатором %2';
					|en = 'Correspondence for the ""%1"" register record with the %2 ID is not found'",
					ОбщегоНазначения.КодОсновногоЯзыка()), ОбщегоНазначения.ПредставлениеОбъекта(
					РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]), Выборка.ИдентификаторФинЗаписи);
				ОшибкиПроводок.Добавить(ТекстОшибки);
				
			Иначе
				
				Если Выборка.СуммаУпрДт <> Выборка.СуммаУпрКт Тогда
					Если Выборка.ИмяРегистраДт
						= ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
						ТекстОшибки = СтрШаблон(НСтр(
							"ru = 'Не совпадают суммы управленческого учета дебета и кредита по идентификатору ""%1""';
							|en = 'Debit and credit amounts in management accounting for ID %1 do not match'",
							ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.ИдентификаторФинЗаписи);
					Иначе
						ТекстОшибки = СтрШаблон(НСтр(
							"ru = 'Не совпадают суммы управленческого учета записей регистров ""%1"" и ""%2"" с идентификатором %3';
							|en = 'The amounts of management accounting of the ""%1"" and ""%2"" register records with the %3 ID do not match'",
							ОбщегоНазначения.КодОсновногоЯзыка()), ОбщегоНазначения.ПредставлениеОбъекта(
							РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]), ОбщегоНазначения.ПредставлениеОбъекта(
							РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]), Выборка.ИдентификаторФинЗаписи);
					КонецЕсли;
					ОшибкиПроводок.Добавить(ТекстОшибки);
				КонецЕсли;

				Если Выборка.СуммаРеглДт <> Выборка.СуммаРеглКт Тогда
					Если Выборка.ИмяРегистраДт
						= ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
						ТекстОшибки = СтрШаблон(НСтр(
							"ru = 'Не совпадают суммы регламентированного учета дебета и кредита по идентификатору ""%1""';
							|en = 'Debit and credit amounts in local accounting for ID %1 do not match'",
							ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.ИдентификаторФинЗаписи);
					Иначе
						ТекстОшибки = СтрШаблон(НСтр(
							"ru = 'Не совпадают суммы регламентированного учета записей регистров ""%1"" и ""%2"" с идентификатором %3';
							|en = 'The amounts of local accounting of the ""%1"" and ""%2"" register records with the %3 ID do not match'",
							ОбщегоНазначения.КодОсновногоЯзыка()), ОбщегоНазначения.ПредставлениеОбъекта(
							РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]), ОбщегоНазначения.ПредставлениеОбъекта(
							РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]), Выборка.ИдентификаторФинЗаписи);
					КонецЕсли;
					ОшибкиПроводок.Добавить(ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОшибкиПроводок.Количество() > 0 Тогда
			ТекстОшибки = "";
			ОшибкиПроводок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОшибкиПроводок);
			Для Каждого ОшибкаПроводки Из ОшибкиПроводок Цикл
				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + ОшибкаПроводки;
			КонецЦикла;
			СтрокиДокументы = ДокументыКОбработке.НайтиСтроки(Новый Структура("Документ", ВыборкаПроводки.Регистратор));
			Для Каждого СтрокаДокумент Из СтрокиДокументы Цикл
				ЗаполнитьЗначенияСвойств(СтрокаДокумент, ВыборкаПроводки);
				СтрокаДокумент.Ошибка = Истина;
				СтрокаДокумент.Комментарий = ТекстОшибки;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втРегистраторыСОшибками
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиКорреспонденций.Период,
	|	ОшибкиКорреспонденций.Регистратор,
	|	ОшибкиКорреспонденций.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");

	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.ИмяРегистраДт КАК ИмяРегистраДт,
	|	Движения.ИмяРегистраКт КАК ИмяРегистраКт,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ВЫБОР
	|		КОГДА Движения.ДопНастройкаХозОперацииДт = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА Движения.ДопНастройкаХозОперацииКт
	|		КОГДА Движения.ДопНастройкаХозОперацииКт = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА Движения.ДопНастройкаХозОперацииДт
	|		КОГДА Движения.ДопНастройкаХозОперацииДт <> Движения.НастройкаХозОперации
	|			ТОГДА Движения.ДопНастройкаХозОперацииДт
	|		ИНАЧЕ Движения.ДопНастройкаХозОперацииКт
	|	КОНЕЦ КАК ДопНастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ЭтоСторноДт КАК ЭтоСторноДт,
	|	Движения.ЭтоСторноКт КАК ЭтоСторноКт,
	|	Движения.ЭтоСторноДт ИЛИ Движения.ЭтоСторноКт КАК ИнвертироватьПроводку,
	|	Движения.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	Движения.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	Движения.ВалютаДт КАК ВалютаДт,
	|	Движения.ВалютаКт КАК ВалютаКт,
	|	НЕ Движения.ВалютаДт ЕСТЬ NULL КАК ВалютныйДт,
	|	НЕ Движения.ВалютаКт ЕСТЬ NULL КАК ВалютныйКт,
	|	Движения.ПоказательДт КАК ПоказательДт,
	|	Движения.ПоказательКт КАК ПоказательКт,
	|	Движения.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	Движения.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	Движения.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	Движения.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	Движения.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	Движения.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	Движения.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	Движения.СуммаУпрДт КАК СуммаУпр,
	|	Движения.СуммаРеглДт КАК СуммаРегл,
	|	Движения.СуммаВалДт КАК СуммаВалДт,
	|	Движения.СуммаВалКт КАК СуммаВалКт,
	|	Движения.КоличествоДт КАК КоличествоДт,
	|	Движения.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвижения
	|ИЗ
	|	втДвиженияДебетКредит КАК Движения
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втРегистраторыСОшибками КАК РегистраторыСОшибками
	|		ГДЕ
	|			РегистраторыСОшибками.Период = Движения.Период
	|			И РегистраторыСОшибками.Регистратор = Движения.Регистратор
	|			И РегистраторыСОшибками.Организация = Движения.Организация
	|		)");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияДебетКредит");

КонецПроцедуры

Процедура ОбработатьКэшДокументов(Запрос, ТекстыЗапросов, СмещениеИндекса)
	
	СмещениеИндекса = СмещениеИндекса + 2;
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("КэшДокументов") <> Неопределено Тогда
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "КэшДокументов");
		СмещениеИндекса = СмещениеИндекса + 1;
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшДвижений.Регистратор,
	|	КэшДвижений.Период
	|ПОМЕСТИТЬ КэшДокументов
	|ИЗ
	|	КэшДвижений КАК КэшДвижений
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период");
	Если Запрос.Параметры.ИсходныеВременныеТаблицы.Найти("КэшДокументов") = Неопределено Тогда
		Запрос.Параметры.ИсходныеВременныеТаблицы.Добавить("КэшДокументов");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Регистратор КАК Документ
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|ГДЕ
	|	&НачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|	И &КонецПериода = ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					КэшДокументов КАК КэшДокументов
	|				ГДЕ
	|					КэшДокументов.Регистратор = ДокументыКОтражению.Регистратор)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втРегистраторыСОшибками КАК втРегистраторыСОшибками
	|				ГДЕ
	|					втРегистраторыСОшибками.Регистратор = ДокументыКОтражению.Регистратор)");
	
КонецПроцедуры

Процедура ОбработатьКорреспонденцииРегистровИПоместитьВКэш(Запрос, ТекстыЗапросов)
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.Выполнить();
		ТекстыЗапросов.Очистить();
	КонецЕсли;
	
	ТаблицыМенеджераВТ = Запрос.МенеджерВременныхТаблиц.Таблицы;
	
	Если ТаблицыМенеджераВТ.Найти("втДвижения") <> Неопределено Тогда
		
		Если ТаблицыМенеджераВТ.Найти("КэшДвижений") <> Неопределено Тогда
			
			ТекстыЗапросов.Добавить("
			|ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ НовыйКэшДвижений
			|ИЗ
			|	втДвижения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	КэшДвижений");
			
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "КэшДвижений");
			
			ТекстыЗапросов.Добавить("
			|ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ КэшДвижений
			|ИЗ
			|	НовыйКэшДвижений
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	Период");
			
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "НовыйКэшДвижений");
			
		Иначе
			ТекстыЗапросов.Добавить("
			|ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ КэшДвижений
			|ИЗ
			|	втДвижения
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	Период");
		КонецЕсли;
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвижения");
		
		Если Запрос.Параметры.ИсходныеВременныеТаблицы.Найти("КэшДвижений") = Неопределено Тогда
			Запрос.Параметры.ИсходныеВременныеТаблицы.Добавить("КэшДвижений");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ втДвиженияСХозОперациями
	|ИЗ
	|	КэшДвижений КАК КэшДвижений
	|ГДЕ
	|	КэшДвижений.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ДокументыКОбработке КАК ДокументыКОбработке
	|			ГДЕ
	|				ДокументыКОбработке.Регистратор = КэшДвижений.Регистратор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтрокиДт,
	|	ИдентификаторСтрокиКт
	|	");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.ИмяРегистраДт КАК ИмяРегистраДт,
	|	Движения.ИмяРегистраКт КАК ИмяРегистраКт,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ЭтоСторноДт КАК ЭтоСторноДт,
	|	Движения.ЭтоСторноКт КАК ЭтоСторноКт,
	|	Движения.ЭтоСторноДт
	|		ИЛИ Движения.ЭтоСторноКт КАК ИнвертироватьПроводку,
	|	Движения.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	Движения.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	Движения.ВалютаДт КАК ВалютаДт,
	|	Движения.ВалютаКт КАК ВалютаКт,
	|	НЕ Движения.ВалютаДт ЕСТЬ NULL КАК ВалютныйДт,
	|	НЕ Движения.ВалютаКт ЕСТЬ NULL КАК ВалютныйКт,
	|	Движения.ПоказательДт КАК ПоказательДт,
	|	Движения.ПоказательКт КАК ПоказательКт,
	|	Движения.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	Движения.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	Движения.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	Движения.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	Движения.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	Движения.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	Движения.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	Движения.СуммаУпр КАК СуммаУпр,
	|	Движения.СуммаРегл КАК СуммаРегл,
	|	Движения.СуммаВалДт КАК СуммаВалДт,
	|	Движения.СуммаВалКт КАК СуммаВалКт,
	|	Движения.КоличествоДт КАК КоличествоДт,
	|	Движения.КоличествоКт КАК КоличествоКт,
	|	Движения.КоличествоДт <> 0 КАК КоличественныйДт,
	|	Движения.КоличествоКт <> 0 КАК КоличественныйКт
	|ПОМЕСТИТЬ втДвижения
	|ИЗ
	|	втДвиженияСХозОперациями КАК Движения
	|ГДЕ
	|	(НЕ Движения.НастройкаХозОперации В (&НастройкиХозОперацийДляЗамены)
	|			ИЛИ &НастройкаХозОперации В (&НастройкиХозОперацийДляЗамены))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.Период,
	|	Движения.ИмяРегистраДт,
	|	Движения.ИмяРегистраКт,
	|	Движения.Организация,
	|	Движения.Регистратор,
	|	Движения.НастройкаХозОперации,
	|	ДвиженияСХозОперациями.ДопНастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи,
	|	Движения.ЭтоСторноДт,
	|	Движения.ЭтоСторноКт,
	|	ДвиженияСХозОперациями.ЭтоСторноДт
	|		ИЛИ ДвиженияСХозОперациями.ЭтоСторноКт,
	|	Движения.ИдентификаторСтрокиДт,
	|	Движения.ИдентификаторСтрокиКт,
	|	Движения.ВалютаДт,
	|	Движения.ВалютаКт,
	|	НЕ Движения.ВалютаДт ЕСТЬ NULL,
	|	НЕ Движения.ВалютаКт ЕСТЬ NULL,
	|	Движения.ПоказательДт,
	|	Движения.ПоказательКт,
	|	Движения.СуммаДвиженияУпрДт,
	|	Движения.СуммаДвиженияУпрКт,
	|	Движения.СуммаДвиженияРеглДт,
	|	Движения.СуммаДвиженияРеглКт,
	|	Движения.СложнаяПроводкаДт,
	|	Движения.СложнаяПроводкаКт,
	|	Движения.УчитыватьХозОперацию,
	|	Движения.СуммаУпр,
	|	Движения.СуммаРегл,
	|	Движения.СуммаВалДт,
	|	Движения.СуммаВалКт,
	|	Движения.КоличествоДт,
	|	Движения.КоличествоКт,
	|	Движения.КоличествоДт <> 0,
	|	Движения.КоличествоКт <> 0
	|ИЗ
	|	втДвиженияСХозОперациями КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДвиженияСХозОперациями КАК ДвиженияСХозОперациями
	|		ПО Движения.Период = ДвиженияСХозОперациями.Период
	|			И Движения.Регистратор = ДвиженияСХозОперациями.Регистратор
	|			И Движения.Организация = ДвиженияСХозОперациями.Организация
	|			И Движения.ИдентификаторФинЗаписи = ДвиженияСХозОперациями.ИдентификаторФинЗаписи
	|			И Движения.ИдентификаторСтрокиДт = ДвиженияСХозОперациями.ИдентификаторСтрокиДт
	|			И Движения.ИдентификаторСтрокиКт = ДвиженияСХозОперациями.ИдентификаторСтрокиКт
	|			И Движения.НастройкаХозОперации <> ДвиженияСХозОперациями.НастройкаХозОперации
	|ГДЕ
	|	Движения.НастройкаХозОперации В(&НастройкиХозОперацийДляЗамены)
	|	И Движения.НастройкаХозОперации <> &НастройкаХозОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДопНастройкаХозОперации");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСХозОперациями");
	
КонецПроцедуры

Процедура СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоДебет,
	|	ЛОЖЬ КАК ЭтоКредит,
	|	Движения.Период КАК Период,
	|	Движения.ИмяРегистраДт КАК ИмяРегистра,
	|	Движения.ПоказательДт КАК Показатель,
	|	Движения.ЭтоСторноДт КАК ЭтоСторно,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтрокиДт КАК ИдентификаторСтроки,
	|	Движения.ВалютаДт КАК Валюта,
	|	СУММА(Движения.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Движения.СуммаРегл) КАК СуммаРегл,
	|	СУММА(Движения.СуммаВалДт) КАК СуммаВал,
	|	СУММА(Движения.КоличествоДт) КАК Количество
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	втДвижения КАК Движения
	|ГДЕ
	|	Движения.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтрокиДт,
	|	Движения.ПоказательДт,
	|	Движения.ИмяРегистраДт,
	|	Движения.ЭтоСторноДт,
	|	Движения.Организация,
	|	Движения.НастройкаХозОперации,
	|	Движения.ВалютаДт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоДебет,
	|	ИСТИНА КАК ЭтоКредит,
	|	Движения.Период КАК Период,
	|	Движения.ИмяРегистраКт КАК ИмяРегистра,
	|	Движения.ПоказательКт КАК Показатель,
	|	Движения.ЭтоСторноКт КАК ЭтоСторно,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтрокиКт КАК ИдентификаторСтроки,
	|	Движения.ВалютаКт КАК Валюта,
	|	СУММА(Движения.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Движения.СуммаРегл) КАК СуммаРегл,
	|	СУММА(Движения.СуммаВалКт) КАК СуммаВал,
	|	СУММА(Движения.КоличествоКт) КАК Количество
	|ИЗ
	|	втДвижения КАК Движения
	|ГДЕ
	|	Движения.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтрокиКт,
	|	Движения.ПоказательКт,
	|	Движения.ИмяРегистраКт,
	|	Движения.ЭтоСторноКт,
	|	Движения.Организация,
	|	Движения.НастройкаХозОперации,
	|	Движения.ВалютаКт
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтроки,
	|	Показатель,
	|	Организация,
	|	НастройкаХозОперации
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДляПомещения", "вт"
		+ ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета());
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура СформироватьЗапросыАналитикиКорреспонденцийИПоместитьВКэш(Запрос, ТекстыЗапросов, ТекстыЗапросовРегистров, СмещениеИндекса)
	
	УдаляемыеВременныеТаблицы = Новый Массив();
	ИндексРезультатаЗапросаАналитики = 0;
	
	Если ТекстыЗапросовРегистров <> Неопределено Тогда
		
		УдаляемыеПоляВыборки = СтрРазделить("СлужебныйВидДеятельностиНДС,РеквизитСторно,ДопНастройкаХозОперации", ",");
		ПоляИндексаРеверса = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПоляИндексаТаблицЗаменыРеверсаНаСторно();
	
		СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов);
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	Движения.ИмяРегистра КАК ИмяРегистра
		|ИЗ
		|	(ВЫБРАТЬ
		|		Движения.ИмяРегистраДт КАК ИмяРегистра
		|	ИЗ
		|		втДвижения КАК Движения
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ Движения.ИмяРегистраКт КАК ИмяРегистра
		|	ИЗ
		|		втДвижения КАК Движения) КАК Движения
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.ИмяРегистра");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Очистить();
	Результаты = Запрос.ВыполнитьПакет();
	
	Если ТекстыЗапросовРегистров <> Неопределено Тогда
		
		ВыборкаИмяРегистра = Результаты[Результаты.Количество()-1].Выбрать();
		Пока ВыборкаИмяРегистра.Следующий() Цикл
			
			ИмяТаблицыРегистра = ВыборкаИмяРегистра.ИмяРегистра;
			ИмяТаблицыКэшРегистра = СтрЗаменить("КэшАналитики_ИмяРегистра", "ИмяРегистра", ИмяТаблицыРегистра);
			ИмяТаблицыНовыйКэшРегистра = СтрЗаменить("НовыйКэшАналитики_ИмяРегистра", "ИмяРегистра", ИмяТаблицыРегистра);
			Если ИмяТаблицыРегистра = Запрос.Параметры.ИмяРегистраСлужебныхОбъектовУчета Тогда
				ИмяТаблицыРегистра = "";
				ИмяТаблицыКэшРегистра = "";
				ИмяТаблицыНовыйКэшРегистра = "";
			КонецЕсли;
			
			СтрокиПолейАналитики = Новый Массив;
			СтрокиГруппАналитики = Новый Массив;
			
			ДобавитьПоляАналитикиРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики, ИмяТаблицыРегистра);
			
			ИмяВременнойТаблицыРегистра = "вт" + ВыборкаИмяРегистра.ИмяРегистра;
			
			Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицыРегистра) = Неопределено Тогда
				ТекстЗапросаРегистра = ТекстыЗапросовРегистров[ИмяТаблицыРегистра];
				ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
				
				Если Запрос.Параметры.РегистрыЗаменыРеверсаНаСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
					ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра,
						УдаляемыеПоляВыборки, , ИмяВременнойТаблицыРегистра);
					ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
					УдаляемыеВременныеТаблицы.Добавить(ИмяВременнойТаблицыРегистра);
					ИндексРезультатаЗапросаАналитики = ИндексРезультатаЗапросаАналитики + 1;
					СмещениеИндекса = СмещениеИндекса + 1;
					
					ТекстЗапросаРегистра = ТекстВыборкиАналитикиИзВременнойТаблицы(Истина);
					ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ИмяВременнойТаблицыРегистра);
				Иначе
					ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, , "ИмяТаблицыКэшРегистра");
				КонецЕсли;
				
				Если Запрос.Параметры.РегистрыВосстановленияРасчетовПоСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
					ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ИмяТаблицыРегистра);
				КонецЕсли;
			Иначе
				ТекстЗапросаРегистра = ТекстВыборкиАналитикиИзВременнойТаблицы();
				Если ПустаяСтрока(ИмяТаблицыРегистра) Тогда
					ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "ПОМЕСТИТЬ ИмяТаблицыКэшРегистра", "");
					ДобавитьПроизвольныеПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики);
				КонецЕсли;
				ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ИмяВременнойТаблицыРегистра);
			КонецЕсли;
			
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			
			Если Не ПустаяСтрока(ИмяТаблицыРегистра) Тогда
				Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицыКэшРегистра) <> Неопределено Тогда
					ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапросаРегистра, "ИмяТаблицыКэшРегистра", ИмяТаблицыНовыйКэшРегистра)
						+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() + СтрЗаменить("
						|ВЫБРАТЬ
						|	*
						|ИЗ
						|	ИмяТаблицыКэшРегистра", "ИмяТаблицыКэшРегистра", ИмяТаблицыКэшРегистра));
					ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыКэшРегистра);
					ТекстЗапроса = "
					|ВЫБРАТЬ
					|	*
					|ПОМЕСТИТЬ ИмяТаблицыКэшРегистра
					|ИЗ
					|	ИмяТаблицыНовыйКэшРегистра
					|ИНДЕКСИРОВАТЬ ПО
					|	Регистратор,
					|	Период";
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыКэшРегистра", ИмяТаблицыКэшРегистра);
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыНовыйКэшРегистра", ИмяТаблицыНовыйКэшРегистра);
					ТекстыЗапросов.Добавить(ТекстЗапроса);
					ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыНовыйКэшРегистра);
					ИндексРезультатаЗапросаАналитики = ИндексРезультатаЗапросаАналитики + 4;
				Иначе
					ИндексироватьПо = "ИНДЕКСИРОВАТЬ ПО"; //@Query-part
					Если СтрНайти(ТекстЗапросаРегистра, ИндексироватьПо, НаправлениеПоиска.СКонца) = 0 Тогда
						ТекстЗапросаРегистра = ТекстЗапросаРегистра + "
						|ИНДЕКСИРОВАТЬ ПО
						|	Регистратор,
						|	Период";
					КонецЕсли;
					ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапросаРегистра, "ИмяТаблицыКэшРегистра", ИмяТаблицыКэшРегистра));
					ИндексРезультатаЗапросаАналитики = ИндексРезультатаЗапросаАналитики + 1;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяТаблицыКэшРегистра) Тогда
				ТекстЗапросаРегистра = СтрЗаменить("
				|ВЫБРАТЬ
				|	*
				|ИЗ
				|	ИмяТаблицыКэшРегистра КАК ИмяТаблицыКэшРегистра
				|ГДЕ
				|	ИмяТаблицыКэшРегистра.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	И ИСТИНА В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				ИСТИНА
				|			ИЗ
				|				ДокументыКОбработке КАК ДокументыКОбработке
				|			ГДЕ
				|				ДокументыКОбработке.Регистратор = ИмяТаблицыКэшРегистра.Регистратор)", "ИмяТаблицыКэшРегистра", ИмяТаблицыКэшРегистра);
				Если Запрос.Параметры.ИсходныеВременныеТаблицы.Найти(ИмяТаблицыКэшРегистра) = Неопределено Тогда
					Запрос.Параметры.ИсходныеВременныеТаблицы.Добавить(ИмяТаблицыКэшРегистра);
				КонецЕсли;
			КонецЕсли;
			
			ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
			Запрос.Параметры.РегистрыВыборкиАналитики.Вставить(ВыборкаИмяРегистра.ИмяРегистра, ИндексРезультатаЗапросаАналитики);
			ИндексРезультатаЗапросаАналитики = ИндексРезультатаЗапросаАналитики + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	Движения.ИмяРегистраДт КАК ИмяРегистраДт,
	|	Движения.ИмяРегистраКт КАК ИмяРегистраКт,
	|	МИНИМУМ(Движения.ИнвертироватьПроводку) КАК ИнвертироватьКорреспонденцию,
	|	ВЫБОР
	|		КОГДА Движения.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|				ИЛИ Движения.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА 2
	|		КОГДА Движения.ИмяРегистраДт В (&РегистрыВосстановленияРасчетовПоСторно)
	|				И Движения.ИмяРегистраКт В (&РегистрыВосстановленияРасчетовПоСторно)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	втДвижения КАК Движения
	|ГДЕ
	|	Движения.ДопНастройкаХозОперации = &НастройкаХозОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.ИмяРегистраДт,
	|	Движения.ИмяРегистраКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втДвижения КАК Движения
	|ГДЕ
	|	Движения.ДопНастройкаХозОперации = &НастройкаХозОперации");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемыеВременныеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовИсправленияОшибокКорреспонденцийСРеверсом

Процедура ОпределитьОшибкиКорреспонденций(ТекстыЗапросов, ПараметрыЗапроса, ОшибкиРеверса = Ложь)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ втОшибкиКорреспонденций
	|ИЗ
	|	ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияДебетКредит
	|ГДЕ
	|	(ДвиженияДебетКредит.ИмяРегистраДт = """"
	|		ИЛИ ДвиженияДебетКредит.ИмяРегистраКт = """"
	|		ИЛИ (ДвиженияДебетКредит.СуммаУпрДт <> ДвиженияДебетКредит.СуммаУпрКт
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыУпр)
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыУпр))
	|		ИЛИ (ДвиженияДебетКредит.СуммаРеглДт <> ДвиженияДебетКредит.СуммаРеглКт
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыРегл)
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыРегл)))
	|	И ДвиженияДебетКредит.ИдентификаторФинЗаписи <> """"
	|	И &ЭтоДвиженияРеверса
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.Период,
	|	ДвиженияДебетКредит.Регистратор,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|";
	
	Если ОшибкиРеверса Тогда
		ЭтоДвиженияРеверса = "ИСТИНА В 
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияРеверса
		|		ГДЕ
		|			ДвиженияРеверса.Период = ДвиженияДебетКредит.Период
		|			И ДвиженияРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
		|			И ДвиженияРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
		|			И ДвиженияРеверса.Организация = ДвиженияДебетКредит.Организация
		|			И (ДвиженияРеверса.ЭтоСторноДт ИЛИ ДвиженияРеверса.ЭтоСторноКт)
		|		)";
	Иначе
		ЭтоДвиженияРеверса = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоДвиженияРеверса", ЭтоДвиженияРеверса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаКорреспонденцийДвиженийРегистров", ПараметрыЗапроса.ТаблицаКорреспонденцийДвиженийРегистров);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ОпределитьМаксимальныйНомерЗаписейДвижений(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	МАКСИМУМ(МаксимальныеНомераЗаписей.НомерЗаписи) КАК НомерЗаписи
	|ПОМЕСТИТЬ втМаксимальныйНомерЗаписей
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДвиженияДебет.НомерЗаписи) КАК НомерЗаписи
	|	ИЗ
	|		втДвиженияДебет КАК ДвиженияДебет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ДвиженияКредит.НомерЗаписи) КАК НомерЗаписи
	|	ИЗ
	|		втДвиженияКредит КАК ДвиженияКредит
	|	) КАК МаксимальныеНомераЗаписей
	|");
	
КонецПроцедуры

Процедура ВосстановитьДвиженияОшибочныхКорреспонденций(ТекстыЗапросов, ПараметрыЗапроса, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.ИмяРегистра КАК ИмяРегистра,
	|	Движения.Показатель КАК Показатель,
	|	Движения.ЭтоДтКт КАК ЭтоДтКт,
	|	Движения.ЭтоСторно КАК ЭтоСторно,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Движения.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	Движения.Валюта КАК Валюта,
	|	Движения.СуммаУпр КАК СуммаУпр,
	|	Движения.СуммаРегл КАК СуммаРегл,
	|	Движения.СуммаВал КАК СуммаВал,
	|	Движения.Количество КАК Количество,
	|	Движения.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровРеверсДтКт
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|		ГДЕ
	|			ОшибкиКорреспонденций.Период = Движения.Период
	|			И ОшибкиКорреспонденций.Регистратор = Движения.Регистратор
	|			И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = Движения.ИдентификаторФинЗаписи
	|			И ОшибкиКорреспонденций.Организация = Движения.Организация
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ИмяТаблицыДвижений = "втДвиженияДтКт";
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	
КонецПроцедуры

Процедура ОпределитьРегистрыСДвижениямиРеверса(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРеверсДт.Период КАК Период,
	|	ДвиженияРеверсДт.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверсДт.Организация КАК Организация,
	|	ДвиженияРеверсДт.Регистратор КАК Регистратор,
	|	ДвиженияРеверсДт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ втРегистрыСДвижениямиРеверса
	|ИЗ
	|	втДвиженияРегистровРеверсДебет КАК ДвиженияРеверсДт
	|ГДЕ
	|	ДвиженияРеверсДт.ЭтоСторно
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРеверсКт.Период КАК Период,
	|	ДвиженияРеверсКт.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверсКт.Организация КАК Организация,
	|	ДвиженияРеверсКт.Регистратор КАК Регистратор,
	|	ДвиженияРеверсКт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	втДвиженияРегистровРеверсКредит КАК ДвиженияРеверсКт
	|ГДЕ
	|	ДвиженияРеверсКт.ЭтоСторно
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|");
	
КонецПроцедуры

Процедура ЗаменитьДвиженияРеверсаНаСторно(ТекстыЗапросов, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияРеверс.Период КАК Период,
	|	ДвиженияРеверс.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверс.Показатель КАК Показатель,
	|	ДвиженияРеверс.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияРеверс.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРеверс.Организация КАК Организация,
	|	ДвиженияРеверс.Регистратор КАК Регистратор,
	|	ДвиженияРеверс.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРеверс.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	ДвиженияРеверс.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРеверс.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРеверс.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРеверс.Валюта КАК Валюта,
	|	ДвиженияРеверс.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРеверс.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРеверс.СуммаВал КАК СуммаВал,
	|	ДвиженияРеверс.Количество КАК Количество,
	|	ДвиженияРеверс.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровСторно
	|ИЗ
	|	втДвиженияРегистровРеверсДтКт КАК ДвиженияРеверс
	|ГДЕ
	|	НЕ ДвиженияРеверс.ЭтоСторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияРеверс.Период КАК Период,
	|	ДвиженияРеверс.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверс.Показатель КАК Показатель,
	|	ДвиженияРеверс.ЭтоКорДтКт КАК ЭтоДтКт,
	|	НЕ ДвиженияРеверс.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРеверс.Организация КАК Организация,
	|	ДвиженияРеверс.Регистратор КАК Регистратор,
	|	ДвиженияРеверс.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРеверс.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	ДвиженияРеверс.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРеверс.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРеверс.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРеверс.Валюта КАК Валюта,
	|	- ДвиженияРеверс.СуммаУпр КАК СуммаУпр,
	|	- ДвиженияРеверс.СуммаРегл КАК СуммаРегл,
	|	- ДвиженияРеверс.СуммаВал КАК СуммаВал,
	|	- ДвиженияРеверс.Количество КАК Количество,
	|	ДвиженияРеверс.РеквизитСторно КАК РеквизитСторно
	|ИЗ
	|	втКорДвиженияРегистровРеверсДтКт КАК ДвиженияРеверс
	|ГДЕ
	|	ДвиженияРеверс.ЭтоСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияСторно.Период КАК Период,
	|	ДвиженияСторно.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияСторно.Показатель КАК Показатель,
	|	ДвиженияСторно.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияСторно.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияСторно.Организация КАК Организация,
	|	ДвиженияСторно.Регистратор КАК Регистратор,
	|	ДвиженияСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСторно.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	ДвиженияСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСторно.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияСторно.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияСторно.Валюта КАК Валюта,
	|	СУММА(ДвиженияСторно.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияСторно.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ДвиженияСторно.СуммаВал) КАК СуммаВал,
	|	СУММА(ДвиженияСторно.Количество) КАК Количество,
	|	ДвиженияСторно.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втСвернутыеДвиженияСторно
	|ИЗ
	|	втДвиженияРегистровСторно КАК ДвиженияСторно
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСторно.Период,
	|	ДвиженияСторно.ИмяРегистра,
	|	ДвиженияСторно.Показатель,
	|	ДвиженияСторно.ЭтоДтКт,
	|	ДвиженияСторно.ЭтоСторно,
	|	ДвиженияСторно.Организация,
	|	ДвиженияСторно.Регистратор,
	|	ДвиженияСторно.НастройкаХозОперации,
	|	ДвиженияСторно.ДопНастройкаХозОперации,
	|	ДвиженияСторно.ИдентификаторФинЗаписи,
	|	ДвиженияСторно.ИдентификаторСтроки,
	|	ДвиженияСторно.ВидДеятельностиНДС,
	|	ДвиженияСторно.Валюта,
	|	ДвиженияСторно.РеквизитСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистровСторно");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияСторно.НомерЗаписи + МаксимальныйНомерЗаписей.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСторно.Период КАК Период,
	|	ДвиженияСторно.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияСторно.Показатель КАК Показатель,
	|	ДвиженияСторно.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияСторно.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияСторно.Организация КАК Организация,
	|	ДвиженияСторно.Регистратор КАК Регистратор,
	|	ДвиженияСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСторно.ДопНастройкаХозОперации КАК ДопНастройкаХозОперации,
	|	ДвиженияСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСторно.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияСторно.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияСторно.Валюта КАК Валюта,
	|	ДвиженияСторно.СуммаУпр КАК СуммаУпр,
	|	ДвиженияСторно.СуммаРегл КАК СуммаРегл,
	|	ДвиженияСторно.СуммаВал КАК СуммаВал,
	|	ДвиженияСторно.Количество КАК Количество,
	|	ДвиженияСторно.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровДтКт
	|ИЗ
	|	втСвернутыеДвиженияСторно КАК ДвиженияСторно
	|	,
	|	втМаксимальныйНомерЗаписей КАК МаксимальныйНомерЗаписей
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втСвернутыеДвиженияСторно");
	
КонецПроцедуры

Процедура ОпределитьКорреспонденцииБезОшибок(ТекстыЗапросов, ПараметрыЗапроса)
	
	ОпределитьОшибкиКорреспонденций(ТекстыЗапросов, ПараметрыЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииДт КАК ДопНастройкаХозОперацииДт,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииКт КАК ДопНастройкаХозОперацииКт,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияДебетКредит.ПоказательДт КАК ПоказательДт,
	|	ДвиженияДебетКредит.ПоказательКт КАК ПоказательКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ втКорреспонденцииБезОшибок
	|ИЗ
	|	ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияДебетКредит
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|		ГДЕ
	|			ОшибкиКорреспонденций.Период = ДвиженияДебетКредит.Период
	|			И ОшибкиКорреспонденций.Регистратор = ДвиженияДебетКредит.Регистратор
	|			И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|			И ОшибкиКорреспонденций.Организация = ДвиженияДебетКредит.Организация
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаКорреспонденцийДвиженийРегистров", ПараметрыЗапроса.ТаблицаКорреспонденцийДвиженийРегистров);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ПараметрыЗапроса.ТаблицаКорреспонденцийДвиженийРегистров);
	
КонецПроцедуры

Процедура ОпределитьРегистрыЗаменыРеверсаНаСторно(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КорреспонденцииБезОшибок.Период КАК Период,
	|	КорреспонденцииБезОшибок.Организация КАК Организация,
	|	КорреспонденцииБезОшибок.Регистратор КАК Регистратор,
	|	КорреспонденцииБезОшибок.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ втДокументыЗаменыРеверсаНаСторно
	|ИЗ
	|	втКорреспонденцииБезОшибок КАК КорреспонденцииБезОшибок
	|СГРУППИРОВАТЬ ПО
	|	КорреспонденцииБезОшибок.Период,
	|	КорреспонденцииБезОшибок.Регистратор,
	|	КорреспонденцииБезОшибок.ИдентификаторФинЗаписи,
	|	КорреспонденцииБезОшибок.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрыРеверса.ИмяРегистра КАК ИмяРегистра
	|ПОМЕСТИТЬ втРегистрыЗаменыРеверсаНаСторно
	|ИЗ
	|	втРегистрыСДвижениямиРеверса КАК РегистрыРеверса
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|		ГДЕ
	|			ДокументыЗаменыРеверса.Период = РегистрыРеверса.Период
	|			И ДокументыЗаменыРеверса.Регистратор = РегистрыРеверса.Регистратор
	|			И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = РегистрыРеверса.ИдентификаторФинЗаписи
	|			И ДокументыЗаменыРеверса.Организация = РегистрыРеверса.Организация
	|		)
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втРегистрыСДвижениямиРеверса");
	
КонецПроцедуры

Процедура ЗаменитьКорреспонденцииРеверсаНаСторно(ТекстыЗапросов,
	СоздаваемаяТаблицаКорреспонденцийДвижений, УдаляемаяТаблицаКорреспонденцийДвижений)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ПоказательДт КАК ПоказательДт,
	|	ДвиженияДебетКредит.ПоказательКт КАК ПоказательКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииДт КАК ДопНастройкаХозОперацииДт,
	|	ДвиженияДебетКредит.ДопНастройкаХозОперацииКт КАК ДопНастройкаХозОперацииКт,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ СоздаваемаяТаблицаКорреспонденцийДвижений
	|ИЗ
	|	УдаляемаяТаблицаКорреспонденцийДвижений КАК ДвиженияДебетКредит
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|		ГДЕ
	|			ДокументыЗаменыРеверса.Период = ДвиженияДебетКредит.Период
	|			И ДокументыЗаменыРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
	|			И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|			И ДокументыЗаменыРеверса.Организация = ДвиженияДебетКредит.Организация
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияБезОшибок.Период КАК Период,
	|	ДвиженияБезОшибок.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияБезОшибок.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияБезОшибок.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияБезОшибок.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияБезОшибок.ПоказательДт КАК ПоказательДт,
	|	ДвиженияБезОшибок.ПоказательКт КАК ПоказательКт,
	|	ДвиженияБезОшибок.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияБезОшибок.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияБезОшибок.Организация КАК Организация,
	|	ДвиженияБезОшибок.Регистратор КАК Регистратор,
	|	ДвиженияБезОшибок.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияБезОшибок.ДопНастройкаХозОперацииДт КАК НастройкаХозОперацииДт,
	|	ДвиженияБезОшибок.ДопНастройкаХозОперацииКт КАК НастройкаХозОперацииКт,
	|	ДвиженияБезОшибок.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияБезОшибок.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияБезОшибок.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияБезОшибок.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияБезОшибок.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияБезОшибок.ВалютаДт КАК ВалютаДт,
	|	ДвиженияБезОшибок.ВалютаКт КАК ВалютаКт,
	|	ДвиженияБезОшибок.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияБезОшибок.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияБезОшибок.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияБезОшибок.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияБезОшибок.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияБезОшибок.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияБезОшибок.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияБезОшибок.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияБезОшибок.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияБезОшибок.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияБезОшибок.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияБезОшибок.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияБезОшибок.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияБезОшибок.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияБезОшибок.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияБезОшибок.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияБезОшибок.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втКорреспонденцииБезОшибок КАК ДвиженияБезОшибок
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СоздаваемаяТаблицаКорреспонденцийДвижений", СоздаваемаяТаблицаКорреспонденцийДвижений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УдаляемаяТаблицаКорреспонденцийДвижений", УдаляемаяТаблицаКорреспонденцийДвижений);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемаяТаблицаКорреспонденцийДвижений);
	
КонецПроцедуры

Процедура ДобавитьПустуюТаблицуДокументовЗаменыРеверса(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(0001, 01, 01) КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ втДокументыЗаменыРеверсаНаСторно
	|ГДЕ
	|	ЛОЖЬ
	|");
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовВосстановленияРасчетовПоСторно

Процедура ВосстановитьРасчетыПоСторно(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	РеестрДокументов.Организация КАК Организация,
	|	РеестрДокументов.Ссылка КАК ДокументСторно,
	|	РеестрДокументов.ДатаДокументаИБ КАК Период,
	|	РеестрДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ втРеестрДокументовСторно
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО РеестрДокументов.Ссылка = ДокументыКОтражению.Регистратор
	|ГДЕ
	|	РеестрДокументов.Проведен
	|	И РеестрДокументов.СторноИсправление
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСторно,
	|	СторнируемыйДокумент
	|";
	
	Если Запрос.Параметры.ВосстановитьРасчетыПоСторно Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 0", "");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#Область ВосстановлениеАвансаКлиента
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	""РасчетыСКлиентамиПоСрокам"" КАК ИмяРегистра,
	|	ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты) КАК ПоказательДт,
	|	ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты) КАК ПоказательКт,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента) КАК НастройкаХозОперации,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента) КАК ДопНастройкаХозОперации,
	|	"""" КАК ИдентификаторФинЗаписи,
	|	"""" КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РеквизитСторно,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.Регистратор КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	&ПрочиеПоляИсточникиСубконто,
	|	СУММА(ДанныеРегистра.ДолгУпр) КАК СуммаУпрДт,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК СуммаУпрКт,
	|	СУММА(ДанныеРегистра.ДолгРегл) КАК СуммаРеглДт,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК СуммаРеглКт,
	|	СУММА(ДанныеРегистра.Долг) КАК СуммаВалДт,
	|	СУММА(ДанныеРегистра.Предоплата) КАК СуммаВалКт
	|ПОМЕСТИТЬ втРасчетыСКлиентамиПоСторно
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Валюта КАК Валюта,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСКлиентамиПоСрокам.ДокументРегистратор = РеестрДокументов.СторнируемыйДокумент
	|		 И РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация
	|	ГДЕ
	|		НЕ РасчетыСКлиентамиПоСрокам.Сторно
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Валюта КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСКлиентамиПоСрокам.ДокументРегистратор = РеестрДокументов.ДокументСторно
	|		 И РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация
	|	ГДЕ
	|		РасчетыСКлиентамиПоСрокам.Сторно
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Долг) <> 0 ИЛИ СУММА(ДанныеРегистра.Предоплата) <> 0
	|";
	
	СуществующиеПоляИсточникиСубконто = Новый Массив();
	СуществующиеПоляИсточникиСубконто.Добавить("АналитикаУчетаПоПартнерам");
	СуществующиеПоляИсточникиСубконто.Добавить("ОбъектРасчетов");
	СуществующиеПоляИсточникиСубконто.Добавить("Валюта");
	СуществующиеПоляИсточникиСубконто.Добавить("РасчетныйДокумент");
	
	ПрочиеПоляИсточникиСубконто = Новый Массив();
	ТекстыВыборкиПрочихПолей = Новый Массив();
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	ПараметрыОтраженияВУчете = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ПараметрыОтраженияДвиженийВФинансовомУчете
	Если ПараметрыОтраженияВУчете.СтруктураАналитики.Количество() = 0 Тогда
		ПараметрыОтраженияВУчете.СтруктураАналитики = ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(ПараметрыОтраженияВУчете.ТипДанныхУчета);
	КонецЕсли;
	
	Для Каждого ОписаниеАналитики Из ПараметрыОтраженияВУчете.СтруктураАналитики Цикл
		ЧастиПутиКДанным = СтрРазделить(ОписаниеАналитики.Значение.ПутьКДанным, ".");
		ИмяПоляРегистра = ЧастиПутиКДанным[0];
		Если СуществующиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено
			И ПрочиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено Тогда
			ПрочиеПоляИсточникиСубконто.Добавить(ИмяПоляРегистра);
			ТекстыВыборкиПрочихПолей.Добавить("НЕОПРЕДЕЛЕНО КАК " + ИмяПоляРегистра);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеПоляИсточникиСубконто", ?(ТекстыВыборкиПрочихПолей.Количество() = 0, "НЕОПРЕДЕЛЕНО", СтрСоединить(ТекстыВыборкиПрочихПолей, РазделительСтрок)));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ВосстановлениеАвансаПоставщику
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	""РасчетыСПоставщикамиПоСрокам"" КАК ИмяРегистра,
	|	ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПредоплаты) КАК ПоказательДт,
	|	ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.СуммаПостоплаты) КАК ПоказательКт,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику) КАК НастройкаХозОперации,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику) КАК ДопНастройкаХозОперации,
	|	"""" КАК ИдентификаторФинЗаписи,
	|	"""" КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РеквизитСторно,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.Регистратор КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	&ПрочиеПоляИсточникиСубконто,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК СуммаУпрДт,
	|	СУММА(ДанныеРегистра.ДолгУпр) КАК СуммаУпрКт,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК СуммаРеглДт,
	|	СУММА(ДанныеРегистра.ДолгРегл) КАК СуммаРеглКт,
	|	СУММА(ДанныеРегистра.Предоплата) КАК СуммаВалДт,
	|	СУММА(ДанныеРегистра.Долг) КАК СуммаВалКт
	|ПОМЕСТИТЬ втРасчетыСПоставщикамиПоСторно
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РеестрДокументов.СторнируемыйДокумент
	|		 И РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация
	|	ГДЕ
	|		НЕ РасчетыСПоставщикамиПоСрокам.Сторно
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РеестрДокументов.ДокументСторно
	|		 И РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация
	|	ГДЕ
	|		РасчетыСПоставщикамиПоСрокам.Сторно
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Долг) <> 0 ИЛИ СУММА(ДанныеРегистра.Предоплата) <> 0
	|";
	
	СуществующиеПоляИсточникиСубконто = Новый Массив();
	СуществующиеПоляИсточникиСубконто.Добавить("АналитикаУчетаПоПартнерам");
	СуществующиеПоляИсточникиСубконто.Добавить("ОбъектРасчетов");
	СуществующиеПоляИсточникиСубконто.Добавить("Валюта");
	СуществующиеПоляИсточникиСубконто.Добавить("РасчетныйДокумент");
	
	ПрочиеПоляИсточникиСубконто = Новый Массив();
	ТекстыВыборкиПрочихПолей = Новый Массив();
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	ПараметрыОтраженияВУчете = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ПараметрыОтраженияДвиженийВФинансовомУчете
	Если ПараметрыОтраженияВУчете.СтруктураАналитики.Количество() = 0 Тогда
		ПараметрыОтраженияВУчете.СтруктураАналитики = ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(
			ПараметрыОтраженияВУчете.ТипДанныхУчета);
	КонецЕсли;
	
	Для Каждого ОписаниеАналитики Из ПараметрыОтраженияВУчете.СтруктураАналитики Цикл
		ЧастиПутиКДанным = СтрРазделить(ОписаниеАналитики.Значение.ПутьКДанным, ".");
		ИмяПоляРегистра = ЧастиПутиКДанным[0];
		Если СуществующиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено
			И ПрочиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено Тогда
			ПрочиеПоляИсточникиСубконто.Добавить(ИмяПоляРегистра);
			ТекстыВыборкиПрочихПолей.Добавить("НЕОПРЕДЕЛЕНО КАК " + ИмяПоляРегистра);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеПоляИсточникиСубконто", ?(ТекстыВыборкиПрочихПолей.Количество()
		= 0, "НЕОПРЕДЕЛЕНО", СтрСоединить(ТекстыВыборкиПрочихПолей, РазделительСтрок)));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втРеестрДокументовСторно");
	
	Если Запрос.Параметры.ВосстановитьРасчетыПоСторно Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
		
		Если ОбщегоНазначенияУТ.РазмерВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, "втРасчетыСКлиентамиПоСторно") > 0 Тогда
			ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(
				"втРасчетыСКлиентамиПоСторно",
				Запрос.МенеджерВременныхТаблиц,
				"ИдентификаторФинЗаписи");
		КонецЕсли;
		
		Если ОбщегоНазначенияУТ.РазмерВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, "втРасчетыСПоставщикамиПоСторно") > 0 Тогда
			ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(
				"втРасчетыСПоставщикамиПоСторно",
				Запрос.МенеджерВременныхТаблиц,
				"ИдентификаторФинЗаписи");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ИмяРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
	|	ТаблицаРегистра.ПоказательДт КАК Показатель,
	|	ИСТИНА КАК ЭтоДебет,
	|	ЛОЖЬ КАК ЭтоКредит,
	|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	ТаблицаРегистра.Регистратор КАК Регистратор,
	|	ТаблицаРегистра.Организация КАК Организация,
	|	ТаблицаРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ТаблицаРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаРегистра.Валюта КАК Валюта,
	|	ТаблицаРегистра.СуммаУпрДт КАК СуммаУпр,
	|	ТаблицаРегистра.СуммаРеглДт КАК СуммаРегл,
	|	ТаблицаРегистра.СуммаВалДт КАК СуммаВал,
	|	0 КАК Количество
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаРегистра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
	|	ТаблицаРегистра.ПоказательКт КАК Показатель,
	|	ЛОЖЬ КАК ЭтоДебет,
	|	ИСТИНА КАК ЭтоКредит,
	|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	ТаблицаРегистра.Регистратор КАК Регистратор,
	|	ТаблицаРегистра.Организация КАК Организация,
	|	ТаблицаРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ТаблицаРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаРегистра.Валюта КАК Валюта,
	|	ТаблицаРегистра.СуммаУпрКт КАК СуммаУпр,
	|	ТаблицаРегистра.СуммаРеглКт КАК СуммаРегл,
	|	ТаблицаРегистра.СуммаВалКт КАК СуммаВал,
	|	0 КАК Количество
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаРегистра
	|";
	
	Если ИмяРегистра = Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя Тогда
		ИсточникДанных = "втРасчетыСКлиентамиПоСторно";
	Иначе
		ИсточникДанных = "втРасчетыСПоставщикамиПоСторно";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
	
	ИндексироватьПо = "ИНДЕКСИРОВАТЬ ПО"; //@Query-part
	
	Если СтрНайти(ТекстЗапросаРегистра, ИндексироватьПо, НаправлениеПоиска.СКонца) = 0 Тогда
		ТекстЗапросаРегистра = ТекстЗапросаРегистра
			+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
			+ ТекстЗапроса;
	Иначе
		ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, ИндексироватьПо,
			ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
			+ ТекстЗапроса
			+ ИндексироватьПо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовАналитикиКорреспонденций

Функция ТекстВыборкиАналитикиИзВременнойТаблицы(ЗаменаРеверсаНаСторно = Ложь)
	
	Если ЗаменаРеверсаНаСторно Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
		|	ТаблицаРегистра.Показатель КАК Показатель,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоДебет
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоДебет
		|		ИНАЧЕ ТаблицаРегистра.ЭтоДебет
		|	КОНЕЦ КАК ЭтоДебет,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоКредит
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоКредит
		|		ИНАЧЕ ТаблицаРегистра.ЭтоКредит
		|	КОНЕЦ КАК ЭтоКредит,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоСторно
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоСторно
		|		ИНАЧЕ ТаблицаРегистра.ЭтоСторно
		|	КОНЕЦ КАК ЭтоСторно,
		|	&ПоляАналитикиВложеннойТаблицы,
		|	ТаблицаРегистра.Регистратор КАК Регистратор,
		|	ТаблицаРегистра.Организация КАК Организация,
		|	ТаблицаРегистра.Подразделение КАК Подразделение,
		|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаРегистра.Валюта КАК Валюта,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.СуммаУпр
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.СуммаУпр
		|		ИНАЧЕ ТаблицаРегистра.СуммаУпр
		|	КОНЕЦ) КАК СуммаУпр,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.СуммаРегл
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.СуммаРегл
		|		ИНАЧЕ ТаблицаРегистра.СуммаРегл
		|	КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.СуммаВал
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.СуммаВал
		|		ИНАЧЕ ТаблицаРегистра.СуммаВал
		|	КОНЕЦ) КАК СуммаВал,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.Количество
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.Количество
		|		ИНАЧЕ ТаблицаРегистра.Количество
		|	КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ИмяТаблицыКэшРегистра
		|ИЗ
		|	&ИсточникДанных КАК ТаблицаРегистра
		|	ЛЕВОЕ СОЕДИНЕНИЕ втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
		|		ПО ТаблицаРегистра.Период = ДокументыЗаменыРеверса.Период
		|		 И ТаблицаРегистра.Регистратор = ДокументыЗаменыРеверса.Регистратор
		|		 И ТаблицаРегистра.ИдентификаторФинЗаписи = ДокументыЗаменыРеверса.ИдентификаторФинЗаписи
		|		 И ТаблицаРегистра.Организация = ДокументыЗаменыРеверса.Организация
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРегистра.Период,
		|	ТаблицаРегистра.ИмяРегистра,
		|	ТаблицаРегистра.Показатель,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоДебет
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоДебет
		|		ИНАЧЕ ТаблицаРегистра.ЭтоДебет
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоКредит
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоКредит
		|		ИНАЧЕ ТаблицаРегистра.ЭтоКредит
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоСторно
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоСторно
		|		ИНАЧЕ ТаблицаРегистра.ЭтоСторно
		|	КОНЕЦ,
		|	&ГруппаАналитикиВложеннойТаблицы,
		|	ТаблицаРегистра.Регистратор,
		|	ТаблицаРегистра.Организация,
		|	ТаблицаРегистра.Подразделение,
		|	ТаблицаРегистра.НаправлениеДеятельности,
		|	ТаблицаРегистра.НастройкаХозОперации,
		|	ТаблицаРегистра.ИдентификаторФинЗаписи,
		|	ТаблицаРегистра.ИдентификаторСтроки,
		|	ТаблицаРегистра.Валюта
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Период
		|";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
		|	ТаблицаРегистра.Показатель КАК Показатель,
		|	ТаблицаРегистра.ЭтоДебет КАК ЭтоДебет,
		|	ТаблицаРегистра.ЭтоКредит КАК ЭтоКредит,
		|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
		|	&ПоляВыбораАналитики,
		|	ТаблицаРегистра.Регистратор КАК Регистратор,
		|	ТаблицаРегистра.Организация КАК Организация,
		|	ТаблицаРегистра.Подразделение КАК Подразделение,
		|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаРегистра.Валюта КАК Валюта,
		|	ТаблицаРегистра.СуммаУпр КАК СуммаУпр,
		|	ТаблицаРегистра.СуммаРегл КАК СуммаРегл,
		|	ТаблицаРегистра.СуммаВал КАК СуммаВал,
		|	ТаблицаРегистра.Количество КАК Количество
		|ПОМЕСТИТЬ ИмяТаблицыКэшРегистра
		|ИЗ
		|	&ИсточникДанных КАК ТаблицаРегистра
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииФормированияТекстовЗапросов

Функция СтрокиВыборкиПолейПоОписаниюПоказателя(ПараметрыОтраженияДвижений, ОписаниеПоказателя = Неопределено) Экспорт
	
	ПоляВыборки = Новый Структура(СтрСоединить(
		Перечисления.ПоказателиАналитическихРегистров.ПоляВыборкиПоОписаниюПоказателя(), ","));
	
	ПсевдонимИсточника = ПараметрыОтраженияДвижений.ПсевдонимИсточникаДанных;
	
	Если ОписаниеПоказателя <> Неопределено Тогда
		Показатель = ОписаниеПоказателя.Показатель;
	Иначе
		Показатель = Перечисления.ПоказателиАналитическихРегистров.ПустаяСсылка();
	КонецЕсли;
	
	ПоляВыборки.Показатель = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Показатель);
	
	Если ОписаниеПоказателя <> Неопределено И Не ПустаяСтрока(ОписаниеПоказателя.ПутьКДаннымИдентификаторФинЗаписи) Тогда
		ПоляВыборки.ИдентификаторФинЗаписи = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ОписаниеПоказателя.ПутьКДаннымИдентификаторФинЗаписи);
	Иначе
		ПоляВыборки.ИдентификаторФинЗаписи = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ПараметрыОтраженияДвижений.ПутьКДаннымИдентификаторФинЗаписи, ПсевдонимИсточника);
	КонецЕсли;
	Если ОписаниеПоказателя <> Неопределено И Не ПустаяСтрока(ОписаниеПоказателя.ПутьКДаннымИдентификаторСтроки) Тогда
		ПоляВыборки.ИдентификаторСтроки = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ОписаниеПоказателя.ПутьКДаннымИдентификаторСтроки, ПсевдонимИсточника);
	ИначеЕсли Не ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымИдентификаторСтроки) Тогда
		ПоляВыборки.ИдентификаторСтроки = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ПараметрыОтраженияДвижений.ПутьКДаннымИдентификаторСтроки, ПсевдонимИсточника);
	Иначе
		ПоляВыборки.ИдентификаторСтроки = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(
			ПараметрыОтраженияДвижений.ПутьКДаннымИдентификаторСтроки);
	КонецЕсли;
	Если ОписаниеПоказателя <> Неопределено И Не ПустаяСтрока(ОписаниеПоказателя.ВыражениеЭтоДебет) Тогда
		ПоляВыборки.ЭтоДебет = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ОписаниеПоказателя.ВыражениеЭтоДебет, ПсевдонимИсточника);
	ИначеЕсли ПараметрыОтраженияДвижений.ВыражениеЭтоДебет = "ЛОЖЬ" Тогда
		ПоляВыборки.ЭтоДебет = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Ложь);
	Иначе
		ПоляВыборки.ЭтоДебет = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ПараметрыОтраженияДвижений.ВыражениеЭтоДебет, ПсевдонимИсточника);
	КонецЕсли;
	Если ОписаниеПоказателя <> Неопределено И Не ПустаяСтрока(ОписаниеПоказателя.ВыражениеЭтоКредит) Тогда
		ПоляВыборки.ЭтоКредит = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ОписаниеПоказателя.ВыражениеЭтоКредит, ПсевдонимИсточника);
	ИначеЕсли ПараметрыОтраженияДвижений.ВыражениеЭтоКредит = "ЛОЖЬ" Тогда
		ПоляВыборки.ЭтоКредит = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Ложь);
	Иначе
		ПоляВыборки.ЭтоКредит = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(
			ПараметрыОтраженияДвижений.ВыражениеЭтоКредит, ПсевдонимИсточника);
	КонецЕсли;
	
	Если ОписаниеПоказателя <> Неопределено
		И ОписаниеПоказателя.РесурсыУпр.Количество() > 0 Тогда
		РесурсУпр = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ОписаниеПоказателя.РесурсыУпр);
	Иначе
		РесурсУпр = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыУпр);
	КонецЕсли;
	Если ОписаниеПоказателя <> Неопределено
		И ОписаниеПоказателя.РесурсыРегл.Количество() > 0 Тогда
		РесурсРегл = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ОписаниеПоказателя.РесурсыРегл);
	Иначе
		РесурсРегл = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыРегл);
	КонецЕсли;
	Если ОписаниеПоказателя <> Неопределено
		И ОписаниеПоказателя.РесурсыВал.Количество() > 0 Тогда
		РесурсВал = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ОписаниеПоказателя.РесурсыВал);
	Иначе
		РесурсВал = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыВал);
	КонецЕсли;
	Если ОписаниеПоказателя <> Неопределено
		И ОписаниеПоказателя.РесурсыКоличество.Количество() > 0 Тогда
		РесурсКоличество = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ОписаниеПоказателя.РесурсыКоличество);
	Иначе
		РесурсКоличество = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыКоличество);
	КонецЕсли;
	
	ШаблонВыборкиСуммы = "ВЫБОР
	|		КОГДА СУММА(&Ресурс) < 0
	|			ТОГДА -СУММА(&Ресурс)
	|		ИНАЧЕ СУММА(&Ресурс)
	|	КОНЕЦ";
	
	УсловияСторно = Новый Массив();
	УсловияНеНоль = Новый Массив();
	
	ПоляВыборки.СуммаУпр = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсУпр,
		ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	ПоляВыборки.СуммаРегл = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсРегл,
		ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	ПоляВыборки.СуммаВал = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсВал,
		ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	ПоляВыборки.Количество = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсКоличество,
		ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	
	Если УсловияСторно.Количество() = 0 Тогда
		УсловияСторно.Добавить("ЛОЖЬ");
	КонецЕсли;
	
	Если УсловияНеНоль.Количество() = 0 Тогда
		УсловияНеНоль.Добавить("ЛОЖЬ");
	КонецЕсли;
	
	ПоляВыборки.ЭтоСторно = "(" + СтрСоединить(УсловияСторно, " ИЛИ ") + ")";
	ПоляВыборки.УсловиеЗначенияРесурсов = "(" + СтрСоединить(УсловияНеНоль, " ИЛИ ") + ")";
	
	Возврат ПоляВыборки;
	
КонецФункции

Процедура ДобавитьПоляАналитикиРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики, ИмяРегистра)
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("Организация");
	СуществующиеПоляВыборки.Добавить("Подразделение");
	СуществующиеПоляВыборки.Добавить("НаправлениеДеятельности");
	СуществующиеПоляВыборки.Добавить("Валюта");
	
	Если Не ПустаяСтрока(ИмяРегистра) Тогда
		МенеджерРегистра = РегистрыНакопления[ИмяРегистра]; // РегистрНакопленияМенеджер -
		ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
		
		СтруктураАналитикиРегистра = ПараметрыОтраженияВУчете.СтруктураАналитики; // см. ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета
		Если СтруктураАналитикиРегистра.Количество() = 0 Тогда
			СтруктураАналитикиРегистра = ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(ПараметрыОтраженияВУчете.ТипДанныхУчета);
		КонецЕсли;
		Для Каждого ОписаниеАналитики Из СтруктураАналитикиРегистра Цикл
			ИмяПоля = ОписаниеАналитики.Ключ;
			Если СуществующиеПоляВыборки.Найти(ИмяПоля) = Неопределено Тогда
				Если ОписаниеАналитики.Значение.Свойство("Значение") Тогда
					ПутьКДанным = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ОписаниеАналитики.Значение.Значение);
				Иначе
					ПутьКДанным = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ОписаниеАналитики.Значение.ПутьКДанным);
				КонецЕсли;
				СтрокиПолейАналитики.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
				СтрокиГруппАналитики.Добавить(ПутьКДанным);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра)

	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	
	Если СтрокиПолейАналитики.Количество() > 0 Тогда
		ТекстПолейАналитики = СтрСоединить(СтрокиПолейАналитики, РазделительСтрок);
	Иначе
		ТекстПолейАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	Если СтрокиГруппАналитики.Количество() > 0 Тогда
		ТекстГруппыАналитики = СтрСоединить(СтрокиГруппАналитики, РазделительСтрок);
	Иначе
		ТекстГруппыАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ПоляВыбораАналитики", ТекстПолейАналитики);
	ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ГруппаПолейАналитики", ТекстГруппыАналитики);
	
	Если СтрНайти(ТекстЗапросаРегистра, "&ПоляАналитикиВложеннойТаблицы") > 0 Тогда
		Разделитель = " КАК ";
		ДлинаРазделителя = СтрДлина(Разделитель);
		
		ПоляВложеннойТаблицы = Новый Массив();
		ГруппыВложеннойТаблицы = Новый Массив();
		
		Для Каждого СтрокаВыборкиПоля Из СтрокиПолейАналитики Цикл
			ПозицияРазделителя = СтрНайти(СтрокаВыборкиПоля, Разделитель, НаправлениеПоиска.СКонца);
			ПсевдонимПоля = Сред(СтрокаВыборкиПоля, ПозицияРазделителя + ДлинаРазделителя);
			
			ПутьКДанным = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПсевдонимПоля);
			
			ПоляВложеннойТаблицы.Добавить(ПутьКДанным + " КАК " + ПсевдонимПоля);
			ГруппыВложеннойТаблицы.Добавить(ПутьКДанным);
		КонецЦикла;
	
		Если ПоляВложеннойТаблицы.Количество() > 0 Тогда
			ТекстПолейАналитики = СтрСоединить(ПоляВложеннойТаблицы, РазделительСтрок);
		Иначе
			ТекстПолейАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
		КонецЕсли;
		
		Если ГруппыВложеннойТаблицы.Количество() > 0 Тогда
			ТекстГруппыАналитики = СтрСоединить(ГруппыВложеннойТаблицы, РазделительСтрок);
		Иначе
			ТекстГруппыАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
		КонецЕсли;
		
		ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ПоляАналитикиВложеннойТаблицы", ТекстПолейАналитики);
		ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ГруппаАналитикиВложеннойТаблицы", ТекстГруппыАналитики);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроизвольныеПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики)
	
	ПолеАналитики = "ВЫБОР
		|	КОГДА ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипыДокументовРозничныхПродаж)
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
		|	ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ";
	СтрокиПолейАналитики.Добавить(ПолеАналитики + " КАК Партнер");
	СтрокиГруппАналитики.Добавить(ПолеАналитики);
	ПолеАналитики = "ВЫБОР
		|	КОГДА ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипыДокументовРозничныхПродаж)
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
		|	ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ";
	СтрокиПолейАналитики.Добавить(ПолеАналитики + " КАК Контрагент");
	СтрокиГруппАналитики.Добавить(ПолеАналитики);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеТаблицыКорреспонденций

Функция ПолучитьТаблицуКорреспонденцийДенежныхСредствКВыплате(ДокументыКОбработке, ПараметрыПолученияФакта, ОписаниеПравила)
	
	ИменаВидовДокументов = ИсточникиДанныхПовтИсп.ИменаВидовДокументовДляКонтроляЛимитов(Перечисления.ТипыДанныхУчета.ДенежныеСредства);
	
	ДокументыКОбработкеПоПравилу = ДокументыКОбработке.СкопироватьКолонки();
	
	Для Каждого ИмяВидаДокумента Из ИменаВидовДокументов Цикл
		ДокументыКОбработкеПоВиду = ДокументыКОбработке.Скопировать(Новый Структура("ИмяВидаДокумента", ИмяВидаДокумента));
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ДокументыКОбработкеПоПравилу, ДокументыКОбработкеПоВиду);
	КонецЦикла;
	
	Если ДокументыКОбработкеПоПравилу.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СКД = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника("ПравилаПолученияФактаПоСтатьямБюджетов",
		"ДвиженияДенежныхСредствКВыплате");
	СКД = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(СКД); // СхемаКомпоновкиДанных -
	ИмяТипаДанныхУчета = ОбщегоНазначения.ИмяЗначенияПеречисления(ОписаниеПравила.ТипДанныхУчетаПриход);
	Счетчик = 0;
	Пока Счетчик < СКД.НаборыДанных.Количество() Цикл
		Если СКД.НаборыДанных[Счетчик].Имя <> ИмяТипаДанныхУчета Тогда
			СКД.НаборыДанных.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	НДТаблицаПериодов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКД, Тип(
		"НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаПериодов");
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДТаблицаПериодов, "НачалоПериода", "НачалоПериода");
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДТаблицаПериодов, "КонецПериода", "КонецПериода");
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПериодов.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПериодов.Добавить();
	ТаблицаПериодов[0].НачалоПериода =  ПараметрыПолученияФакта.Период.ДатаНачала;
	ТаблицаПериодов[0].КонецПериода =  ПараметрыПолученияФакта.Период.ДатаОкончания;
	КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКД, "ТаблицаПериодов", ИмяТипаДанныхУчета, "НачалоПериода",
		"НачалоПериода", "НачалоПериода");
	КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКД, "ТаблицаПериодов", ИмяТипаДанныхУчета, "КонецПериода",
		"КонецПериода", "КонецПериода");

	Настройки = СКД.НастройкиПоУмолчанию;
	СтруктураАналитики = ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(
		ОписаниеПравила.ТипДанныхУчетаПриход);
	Для Каждого Аналитика Из СтруктураАналитики Цикл
		ИмяПоля = Аналитика.Ключ;
		ЗаголовокПоля = Аналитика.Значение["Заголовок"];
		Если КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Настройки.Выбор.Элементы, ИмяПоля) = Неопределено Тогда
			Если ОписаниеПравила.ТипДанныхУчетаПриход = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
				ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "Кор" + ИмяПоля, ЗаголовокПоля);
			Иначе
				Если (ИмяПоля = "Подразделение" Или ИмяПоля = "НаправлениеДеятельности") Тогда
					ПараметрыПоля = ИсточникиДанныхПовтИсп.ИмяПоляПоТипуДанныхУчета(ИмяПоля, ЗаголовокПоля,
						ОписаниеПравила.ТипДанныхУчетаПриход);
					ИмяПоля = ПараметрыПоля.ИмяПоля;
					ЗаголовокПоля = ПараметрыПоля.ЗаголовокПоля;
				КонецЕсли;
				ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, ИмяПоля, ЗаголовокПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "НастройкаХозОперации",
		ОписаниеПравила.ИсточникДанныхХО, ВидСравненияКомпоновкиДанных.Равно);
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.ЗагрузитьЗначения(ДокументыКОбработкеПоПравилу.ВыгрузитьКолонку("Документ"));
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "Регистратор", СписокДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке);

	ТаблицаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Настройки, Новый Структура("ТаблицаПериодов",
		ТаблицаПериодов));
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТаблицуКорреспонденцийПрочихАктивовПассивов(ДокументыКОбработке, ПараметрыПолученияФакта, ОписаниеПравила)
	
	ДокументыКОбработкеПоПравилу = ДокументыКОбработке.Скопировать(Новый Структура("ИмяВидаДокумента",
		Метаданные.Документы.ДвижениеПрочихАктивовПассивов.Имя));
	Если ДокументыКОбработкеПоПравилу.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	СКДДвижениеПрочихАктивовПассивов = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника(
		"ПравилаПолученияФактаПоСтатьямБюджетов", "ДвиженияПрочихАктивовПассивов");
	СКДДвижениеПрочихАктивовПассивов = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(
		СКДДвижениеПрочихАктивовПассивов); // СхемаКомпоновкиДанных -

	Настройки = СКДДвижениеПрочихАктивовПассивов.НастройкиПоУмолчанию;
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "Период", ПараметрыПолученияФакта.Период.ДатаНачала,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "Период", ПараметрыПолученияФакта.Период.ДатаОкончания,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "НастройкаХозОперации",
		ОписаниеПравила.ИсточникДанныхХО, ВидСравненияКомпоновкиДанных.Равно);
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.ЗагрузитьЗначения(ДокументыКОбработкеПоПравилу.ВыгрузитьКолонку("Документ"));
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "Регистратор", СписокДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке);

	ТаблицаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКДДвижениеПрочихАктивовПассивов, Настройки); // ТаблицаЗначений -
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыДанныхУчетаСовпадают = (ОписаниеПравила.ТипДанныхУчетаПриход = ОписаниеПравила.ТипДанныхУчетаРасход);
	
	Для Счетчик = 1 По 2 Цикл
		ВидДвижения = ?(Счетчик = 1, "Приход", "Расход");
		Если ОписаниеПравила["ТипДанныхУчета" + ВидДвижения] = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
			ТаблицаДанных.Колонки["Подразделение" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают, ?(Счетчик = 1,
				"КорПодразделение", "Подразделение"), "ПодразделениеДоходовРасходов");
			ТаблицаДанных.Колонки["НаправлениеДеятельности" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают, ?(Счетчик
				= 1, "КорНаправлениеДеятельности", "НаправлениеДеятельности"), "НаправлениеДеятельностиДоходовРасходов");
			ТаблицаДанных.Колонки["СтатьяДоходовРасходов" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают И Счетчик
				= 1, "КорСтатьяДоходовРасходов", "СтатьяДоходовРасходов");
			ТаблицаДанных.Колонки["АналитикаДоходов" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают И Счетчик = 1,
				"КорАналитикаДоходов", "АналитикаДоходов");
			ТаблицаДанных.Колонки["АналитикаРасходов" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают И Счетчик = 1,
				"КорАналитикаРасходов", "АналитикаРасходов");
			ТаблицаДанных.Колонки.Удалить("СтатьяАктивовПассивов" + ВидДвижения);
			ТаблицаДанных.Колонки.Удалить("АналитикаАктивовПассивов" + ВидДвижения);
		Иначе
			ТаблицаДанных.Колонки["Подразделение" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают, ?(Счетчик = 1,
				"КорПодразделение", "Подразделение"), "ПодразделениеАктивовПассивов");
			ТаблицаДанных.Колонки["НаправлениеДеятельности" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают, ?(Счетчик
				= 1, "КорНаправлениеДеятельности", "НаправлениеДеятельности"), "НаправлениеДеятельностиАктивовПассивов");
			ТаблицаДанных.Колонки["СтатьяАктивовПассивов" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают И Счетчик
				= 1, "КорСтатьяАктивовПассивов", "СтатьяАктивовПассивов");
			ТаблицаДанных.Колонки["АналитикаАктивовПассивов" + ВидДвижения].Имя = ?(ТипыДанныхУчетаСовпадают И Счетчик
				= 1, "КорАналитикаАктивовПассивов", "АналитикаАктивовПассивов");
			ТаблицаДанных.Колонки.Удалить("СтатьяДоходовРасходов" + ВидДвижения);
			ТаблицаДанных.Колонки.Удалить("АналитикаДоходов" + ВидДвижения);
			ТаблицаДанных.Колонки.Удалить("АналитикаРасходов" + ВидДвижения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

