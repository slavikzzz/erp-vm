////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен с банками по зарплатным проектам".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ВыгрузитьФайлыОбменаСБанком(Знач СтруктураПараметров, АдресХранилища) Экспорт
	
	МассивДокументов = Новый Массив;
	Для Каждого ДокументМассива Из СтруктураПараметров.МассивДокументов Цикл
		Если ОбменСБанкамиПоЗарплатнымПроектам.ЭтоВедомостьВБанк(ДокументМассива)
			И Не ОбменСБанкамиПоЗарплатнымПроектам.РазрешенаОтправкаОтдельнойВедомости() Тогда
			Продолжить;
		КонецЕсли;
		МассивДокументов.Добавить(ДокументМассива);
	КонецЦикла;
	СтруктураПараметров.МассивДокументов = МассивДокументов;
	
	ОбменСБанкамиПоЗарплатнымПроектам.ВыгрузитьФайлыОбменаСБанком(СтруктураПараметров, АдресХранилища);
	Возврат ОбменСБанкамиПоЗарплатнымПроектам.МассивОписанийПередаваемыхФайлов(АдресХранилища, СтруктураПараметров.УникальныйИдентификаторФормы);
	
КонецФункции

// Загружает подтверждение банка из файла.
//
// Параметры:
//		МассивОписанийФайлов - ОписаниеПереданногоФайла/Адрес во временном хранилище - массив описаний файлов/массив адресов во временном хранилище.
//
// Возвращаемое значение:
//		СозданныеДокументы - Соответствие созданных документов и первичных документов.
//
Функция ЗагрузитьПодтвержденияИзБанка(МассивОписанийФайлов, ДокументОбъектПодтверждение = Неопределено) Экспорт
	
	СозданныеДокументы = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из МассивОписанийФайлов Цикл
		
		Если ЭтоАдресВременногоХранилища(ЭлементМассива) Тогда
			АдресФайлаВоВременномХранилище = ЭлементМассива;
			РасширениеФайла = "xml";
		Иначе
			АдресФайлаВоВременномХранилище = ЭлементМассива.Хранение;
			РасширениеФайла = ЭлементМассива.Имя;
			Поз = СтрНайти(РасширениеФайла, ".");
			Пока Поз > 0 Цикл
				РасширениеФайла = Сред(РасширениеФайла, Поз + 1);
				Поз = СтрНайти(РасширениеФайла, ".");
			КонецЦикла;
		КонецЕсли;
		
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
		ХешСумма = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
		
		ДокументПодтверждения = ЗагрузитьПодтверждениеИзБанка(ИмяВременногоФайла, ХешСумма, ДокументОбъектПодтверждение);
		
		// Удаляем временный файл
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обмен с банками по зарплатным проектам.Загрузка подтверждения банка из файла';
					|en = 'Bank exchange by payroll card programs. Import bank confirmation from the file'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		СозданныеДокументы.Вставить(ДокументПодтверждения, ?(ДокументПодтверждения = Неопределено, Неопределено, ДокументПодтверждения.ПервичныйДокумент));
		Если ДокументПодтверждения <> Неопределено Тогда
			Если ЭтоАдресВременногоХранилища(ЭлементМассива) Тогда
				ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(
					ДокументПодтверждения,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПодтверждения.ЗарплатныйПроект, "ОтделениеБанка"),
					ДокументПодтверждения.Номер,
					?(ТипЗнч(ДокументПодтверждения) = Тип("ДокументСсылка.ПодтверждениеЗачисленияЗарплаты"), "y", "n"));
			Иначе
				ИмяФайла = ЭлементМассива.Имя;
			КонецЕсли;
			РазделительПути = ПолучитьРазделительПути();
			Поз = СтрНайти(ИмяФайла, РазделительПути);
			Пока Поз > 0 Цикл
				ИмяФайла = Сред(ИмяФайла, Поз + 1);
				Поз = СтрНайти(ИмяФайла, РазделительПути);
			КонецЦикла;
			УстановитьПривилегированныйРежим(Истина);
			
			ПараметрыФайла = Новый Структура(
				"Автор,
				|ВладелецФайлов,
				|ИмяБезРасширения,
				|РасширениеБезТочки,
				|ВремяИзменения,
				|ВремяИзмененияУниверсальное");
				
			ПараметрыФайла.ВладелецФайлов = ДокументПодтверждения;
			ПараметрыФайла.ИмяБезРасширения =Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4);
			ПараметрыФайла.РасширениеБезТочки = Прав(ИмяФайла, 3);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции

// Загружает подтверждение банка из файла.
//
// Параметры:
//		ПолноеИмяФайла - расположение файла.
//
// Возвращаемое значение:
//		Ссылка на документ или Неопределено, если документ не создан.
//
Функция ЗагрузитьПодтверждениеИзБанка(ПолноеИмяФайла, ХешСумма, ДокументОбъектПодтверждение = Неопределено)
	
	СтандартнаяОбработка = Истина;
	ЗагруженныйДокумент = Неопределено;
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОбработатьЗагрузку(ПолноеИмяФайла, ЗагруженныйДокумент, СтандартнаяОбработка, ДокументОбъектПодтверждение);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат ЗагруженныйДокумент;
	КонецЕсли;
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.ФорматОбменаСБанкамиПоЗарплатнымПроектам.ПространствоИмен);
	ТипОбъектаXDTO = Пакет.КорневыеСвойства[0].Тип;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	Попытка
		ОбъектXDTOВременный = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
		ОбменСБанкамиПоЗарплатнымПроектам.ЗаполнитьОбъектXDTO(ОбъектXDTO, ОбъектXDTOВременный);
		
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru = 'Неверный формат файла.';
										|en = 'Invalid file format.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
		
		Возврат Неопределено;
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	Если ОбъектXDTO.Получить("РезультатЗачисленияЗарплаты") <> Неопределено
		И (ДокументОбъектПодтверждение = Неопределено Или ТипЗнч(ДокументОбъектПодтверждение) = Тип("ДокументОбъект.ПодтверждениеЗачисленияЗарплаты"))Тогда
		Возврат СоздатьДокументПодтверждения(ОбъектXDTO, ХешСумма, Метаданные.Документы.ПодтверждениеЗачисленияЗарплаты, ДокументОбъектПодтверждение);
	ИначеЕсли ОбъектXDTO.Получить("РезультатОткрытияСчетов") <> Неопределено
		И (ДокументОбъектПодтверждение = Неопределено Или ТипЗнч(ДокументОбъектПодтверждение) = Тип("ДокументОбъект.ПодтверждениеОткрытияЛицевыхСчетовСотрудников"))Тогда
		Возврат СоздатьДокументПодтверждения(ОбъектXDTO, ХешСумма, Метаданные.Документы.ПодтверждениеОткрытияЛицевыхСчетовСотрудников, ДокументОбъектПодтверждение);
	Иначе
		ТекстСообщенияОбОшибке = НСтр("ru = 'Нет сведений о подтверждении банка.';
										|en = 'No information on the bank confirmation.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает документ "Подтверждение" и заполняет его свойствами объекта XDTO.
//
// Параметры:
//		ОбъектXDTO
//
// Возвращаемое значение:
//		Ссылка на созданный документ или Неопределено, если документ не создан.
//
Функция СоздатьДокументПодтверждения(ОбъектXDTO, ХешСумма, МетаданныеПодтверждения, ДокументОбъектПодтверждение = Неопределено)
	
	СвойстваОбъектаXDTO = ОбъектXDTO.Свойства();
	
	Если СвойстваОбъектаXDTO.Получить("ИдПервичногоДокумента") = Неопределено Или Не ЗначениеЗаполнено(ОбъектXDTO.ИдПервичногоДокумента) Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не указан ИдПервичногоДокумента в загружаемом файле.';
										|en = 'ИдПервичногоДокумента is not specified in the imported file.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОбъектXDTO.ИдПервичногоДокумента) Или ОбъектXDTO.ИдПервичногоДокумента = СтроковыеФункцииБЗККлиентСервер.ПустойУникальныйИдентификатор() Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Неверный ИдПервичногоДокумента в загружаемом файле (ожидается не пустой GUID).';
										|en = 'Incorrect ИдПервичногоДокумента in the imported file (not empty GUID is expected).'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	ИдДокумента = Новый УникальныйИдентификатор(ОбъектXDTO.ИдПервичногоДокумента);
	
	ПервичныйДокументОбъект = Неопределено;
	
	Для Каждого ТипПервичногоДокумента Из МетаданныеПодтверждения.Реквизиты.ПервичныйДокумент.Тип.Типы() Цикл
		МетаданныеПервичногоДокумента = Метаданные.НайтиПоТипу(ТипПервичногоДокумента);
		МенеджерПервичногоДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПервичногоДокумента.ПолноеИмя());
		СсылкаНаПервичныйДокумент = МенеджерПервичногоДокумента.ПолучитьСсылку(ИдДокумента);
		ПервичныйДокументОбъект = СсылкаНаПервичныйДокумент.ПолучитьОбъект();
		Если ПервичныйДокументОбъект <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервичныйДокументОбъект = Неопределено Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Отсутствует первичный документ для загружаемого файла.';
										|en = 'Primary document is missing for the downloaded file.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДокументОбъектПодтверждение = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПервичныйДокумент", СсылкаНаПервичныйДокумент);
		Запрос.УстановитьПараметр("ХешФайла", ХешСумма);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПодтверждения.Ссылка КАК ДокументПодтверждения
		|ИЗ
		|	Документ." + МетаданныеПодтверждения.Имя + " КАК ДокументыПодтверждения
		|ГДЕ
		|	ДокументыПодтверждения.ПервичныйДокумент = &ПервичныйДокумент
		|		И ДокументыПодтверждения.ХешФайла = &ХешФайла";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ДокументОбъект = Выборка.ДокументПодтверждения.ПолучитьОбъект();
			
		Иначе
			
			ДокументОбъект = Документы[МетаданныеПодтверждения.Имя].СоздатьДокумент();
			
		КонецЕсли;
	Иначе
		ДокументОбъект = ДокументОбъектПодтверждение;
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Для документа %1 уже зарегистрирован документ подтверждения';
				|en = 'Confirmation document is already registered for document %1 '"),
			СсылкаНаПервичныйДокумент);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка, "ПервичныйДокумент");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	Отказ = Ложь;
	
	ДокументОбъект.ЗаполнитьДокументИзОбъектаXDTO(ОбъектXDTO, ХешСумма, СсылкаНаПервичныйДокумент, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПервичныйДокумент) Тогда
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		КонтрольныеСуммы = ОбъектXDTO.КонтрольныеСуммы;
		
		БылиОшибкиПриЗагрузке = Ложь;
		
		Если ДокументОбъект.Сотрудники.Количество() <> КонтрольныеСуммы.КоличествоЗаписей Тогда
			ТекстОшибки = НСтр("ru = 'Количество строк в документе не совпадает с контрольными данными.';
								|en = 'Number of lines in the document does not match the check data.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект, , , БылиОшибкиПриЗагрузке);
		КонецЕсли;
		
		Если КонтрольныеСуммы.СуммаИтого <> Неопределено И ДокументОбъект.Сотрудники.Итог("Сумма") <> КонтрольныеСуммы.СуммаИтого Тогда
			ТекстОшибки = НСтр("ru = 'Сумма, зачисленная по документу, не совпадает с контрольными данными.';
								|en = 'Amount transferred under the document does not match the check data.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект, , , БылиОшибкиПриЗагрузке);
		КонецЕсли;
		
		Если Не БылиОшибкиПриЗагрузке И ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Возврат ДокументОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
