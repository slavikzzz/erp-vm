#Область ПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ПериодРегистрации
//		Пособия - таблица значений с колонками
//			ФизическоеЛицо: должно быть непустым
//          ВидПособияСоциальногоСтрахования
//          СуммаВсего.
//          Сотрудник - необязательная, может отсутствовать.
//          ВидЗанятости - необязательная, может отсутствовать.
//          ОплаченныеДни - необязательная, может отсутствовать.
//          СтраховыеСлучаи - необязательная, может отсутствовать.
//          ДатаСтраховогоСлучая - необязательная, может отсутствовать.
//          ФинансированиеФедеральнымБюджетом - необязательная, может отсутствовать.
//          СуммаСверхНорм - необязательная, может отсутствовать.
//		ПособияПоУходу - таблица значений с колонками
//			ФизическоеЛицо: должно быть непустым
//          СуммаВсего.
//          Сотрудник - необязательная, может отсутствовать.
//          ВидЗанятости - необязательная, может отсутствовать.
//          СтраховыеСлучаи - необязательная, может отсутствовать.
//          ДатаСтраховогоСлучая - необязательная, может отсутствовать.
//          ФинансированиеФедеральнымБюджетом - необязательная, может отсутствовать.
//          СуммаСверхНорм - необязательная, может отсутствовать.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПособия(Движения, Отказ, Организация, ПериодРегистрации, Пособия, ПособияПоУходу, Записывать = Ложь) Экспорт
	
	ПособияВыплачиваетФСС = ПериодРегистрации >= ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация);
	
	ЕстьНовыеСтрокиПособий = Ложь;
	ЕстьНовыеСтрокиПособийПоУходу = Ложь;
	Если Пособия <> Неопределено Тогда
		Для Каждого СтрокаДанных Из Пособия Цикл
			ЕстьНовыеСтрокиПособий = Истина;
			НоваяСтрока = Движения.ПособияПоСоциальномуСтрахованию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = ПериодРегистрации;
			Если СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание Тогда
				СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи, СтрокаДанных.СуммаВсего);
			ИначеЕсли ПособияВыплачиваетФСС И (СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью) Тогда
			Иначе
				СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС, СтрокаДанных.СуммаВсего);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПособияПоУходу <> Неопределено Тогда
		Для Каждого СтрокаДанных Из ПособияПоУходу Цикл
			ЕстьНовыеСтрокиПособийПоУходу = Истина;
			НоваяСтрока = Движения.ПособияПоУходуЗаРебенком.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = ПериодРегистрации;
			СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС, СтрокаДанных.СуммаВсегоПоУходуЗаПервымРебенком + СтрокаДанных.СуммаВсегоПоУходуЗаВторымРебенком);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьНовыеСтрокиПособий Или ЕстьНовыеСтрокиПособийПоУходу Тогда
		Если Записывать Тогда
			Движения.РасчетыСФондамиПоСтраховымВзносам.Записать();
			Движения.РасчетыСФондамиПоСтраховымВзносам.Записывать = Ложь;
		Иначе
			Движения.РасчетыСФондамиПоСтраховымВзносам.Записывать = Истина;
		КонецЕсли;
		Если Пособия <> Неопределено Тогда
			Если ЕстьНовыеСтрокиПособий Тогда
				Движения.ПособияПоСоциальномуСтрахованию.Записать();
				Движения.ПособияПоСоциальномуСтрахованию.Записывать = Ложь;
			Иначе
				Движения.ПособияПоСоциальномуСтрахованию.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ПособияПоУходу <> Неопределено Тогда
			Если ЕстьНовыеСтрокиПособийПоУходу Тогда
				Движения.ПособияПоУходуЗаРебенком.Записать();
				Движения.ПособияПоУходуЗаРебенком.Записывать = Ложь;
			Иначе
				Движения.ПособияПоУходуЗаРебенком.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Составляет соответствие размеров предельной величины базы страховых взносов,
//	действующих на указанные годы.
//
// Параметры:
//	Годы - массив элементов типа число.
//
// Возвращаемое значение - соответствие, где ключом является год, а значением - размер предельной величины.
//
Функция ПредельнаяВеличинаБазыСтраховыхВзносов(Годы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПредельнаяВеличинаБазы(Запрос.МенеджерВременныхТаблиц, Годы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредельнаяВеличинаБазыСтраховыхВзносов.Год КАК Год,
	|	ПредельнаяВеличинаБазыСтраховыхВзносов.Размер КАК Размер
	|ИЗ
	|	ВТПредельнаяВеличинаБазы КАК ПредельнаяВеличинаБазыСтраховыхВзносов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредельнаяВеличина = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПредельнаяВеличина.Вставить(Выборка.Год, Выборка.Размер);
	КонецЦикла;
	
	Возврат ПредельнаяВеличина;
	
КонецФункции

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//      	Должна содержать готовую таблицу рег-ра СтраховыеВзносыПоФизическимЛицам с полями:
//				ФизическоеЛицо,
//				Сотрудник,
//				Начисление,
//				ДатаНачала,
//				ПФРПоСуммарномуТарифу и пр. ресурсы рег-ра СтраховыеВзносыПоФизическимЛицам
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ПериодРегистрации - дата -
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура ЗарегистрироватьСтраховыеВзносыКакПособие(Движения, Отказ, Организация, ПериодРегистрации, Записывать = Ложь) Экспорт
	
	Если Отказ Или ПериодРегистрации < '20150101' Тогда // До 2015 года взносы оплачивал работодатель.
		Возврат
	КонецЕсли;
	
	НачисленияДляОтбораВзносов = НачисленияОблагаемыхВзносамиПособий();

	Если Не ЗначениеЗаполнено(НачисленияДляОтбораВзносов) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начисления", НачисленияДляОтбораВзносов);
	Запрос.УстановитьПараметр("Движения", Движения.СтраховыеВзносыПоФизическимЛицам);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОДоходахИВзносах.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахИВзносах.ДатаНачала КАК ДатаСтраховогоСлучая,
	|	0 КАК СуммаВсего
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	&Движения КАК СведенияОДоходахИВзносах
	|ГДЕ
	|	СведенияОДоходахИВзносах.Начисление В(&Начисления)
	|	И СведенияОДоходахИВзносах.ДатаНачала >= ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахИВзносах.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахИВзносах.ДатаСтраховогоСлучая,
	|	ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами) КАК ВидПособияСоциальногоСтрахования,
	|	СУММА(СведенияОДоходахИВзносах.СуммаВсего) КАК СуммаВсего
	|ИЗ
	|	ВТДвижения КАК СведенияОДоходахИВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахИВзносах.ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.Сотрудник,
	|	СведенияОДоходахИВзносах.ДатаСтраховогоСлучая
	|
	|ИМЕЮЩИЕ
	|	СУММА(СведенияОДоходахИВзносах.СуммаВсего) <> 0";
	
	ОписаниеПолейВзносов = СтрЗаменить(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина,"СведенияОДоходахИВзносах"), ","," + ") + " КАК СуммаВсего";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "0 КАК СуммаВсего", ОписаниеПолейВзносов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	СформироватьПособия(Движения, Отказ, Организация, ПериодРегистрации, Результат.Выгрузить(), Неопределено, Записывать);
	
КонецПроцедуры

// Вычисляет продолжительность нестраховых периодов стажа на основании сведений о стаже из больничного.
//
// Параметры:
//   Больничный - ДокументОбъект.БольничныйЛист, ДанныеФормыСтруктура, Структура
//       * СтажРасширенныйЛет     - Число
//       * СтажРасширенныйМесяцев - Число
//       * СтажРасширенныйДней    - Число
//       * СтажЛет                - Число
//       * СтажМесяцев            - Число
//       * СтажДней               - Число
//
// Возвращаемое значение:
//    Структура
//        * Лет     - Число
//        * Месяцев - Число
//
Функция НестраховойСтаж(Больничный) Экспорт
	Результат = Новый Структура("Лет, Месяцев");
	
	ВсегоМесяцев = Больничный.СтажРасширенныйЛет * 12
		+ Больничный.СтажРасширенныйМесяцев
		- Больничный.СтажЛет * 12
		- Больничный.СтажМесяцев
		- ?(Больничный.СтажРасширенныйДней < Больничный.СтажДней, 1, 0);
	
	Если ВсегоМесяцев > 0 Тогда
		Результат.Лет     = Цел(ВсегоМесяцев / 12);
		Результат.Месяцев = ВсегоМесяцев % 12;
	Иначе
		Результат.Лет     = 0;
		Результат.Месяцев = 0;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать НестраховойСтаж.
// Возвращает разность стажей в годах и месяцах.
//
// Параметры:
//  БольшийСтажЛет, БольшийСтажМесяцев, МеньшийСтажЛет, МеньшийСтажМесяцев.
//
// Возвращаемое значение:
//   Структура - РазностьЛет, РазностьМесяцев.
//
Функция ПодсчитатьРазностьСтажейВГодахИМесяцах(БольшийСтажЛет, БольшийСтажМесяцев, МеньшийСтажЛет, МеньшийСтажМесяцев, БольшийСтажДней = 0, МеньшийСтажДней = 0) Экспорт
	РазностьЛет = 0;
	РазностьМесяцев = 0;
	
	РазностьМесяцев = БольшийСтажЛет * 12 + БольшийСтажМесяцев - МеньшийСтажЛет * 12 - МеньшийСтажМесяцев;
	Если БольшийСтажДней < МеньшийСтажДней Тогда
		РазностьМесяцев = РазностьМесяцев - 1;
	КонецЕсли;
	Если РазностьМесяцев > 0 Тогда
		РазностьЛет = Цел(РазностьМесяцев / 12);
		РазностьМесяцев = РазностьМесяцев - РазностьЛет * 12;
	Иначе
		РазностьЛет = 0;
		РазностьМесяцев = 0;
	КонецЕсли;
	
	Возврат Новый Структура("РазностьЛет,РазностьМесяцев", РазностьЛет, РазностьМесяцев);
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Заполняет табличные части документа "ИсходящаяСправкаОЗаработкеДляРасчетаПособий".
//
// Параметры:
//  Объект -  ДокументОбъект.ИсходящаяСправкаОЗаработкеДляРасчетаПособий
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия.
//
// Возвращаемое значение:
//	Истина, если данные в объекте были обновлены.
//
Функция ЗаполнитьСправкуДаннымиОЗаработкеИДняхОтсутствия(Объект, ПараметрыЗаполнения) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ЗаполнитьСправкуДаннымиОЗаработкеИДняхОтсутствия(Объект, ПараметрыЗаполнения);

КонецФункции

// Дополняет описание фиксации данных документа "ИсходящаяСправкаОЗаработкеДляРасчетаПособий".
//
// Параметры:
//  ПараметрыФиксацииВторичныхДанных - см. ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных.
//
Процедура ДополнитьПараметрыФиксацииИсходящаяСправкаОЗаработкеДляРасчетаПособий(ПараметрыФиксацииВторичныхДанных) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.ДополнитьПараметрыФиксацииИсходящаяСправкаОЗаработкеДляРасчетаПособий(ПараметрыФиксацииВторичныхДанных);

КонецПроцедуры

// Формирует параметры для создания временных таблиц используемых для заполнения справки о заработке для расчета
// пособий.
//
// Параметры:
//  Объект - ДокументОбъект.СправкаОЗаработкеДляРасчетаПособий.
//
// Возвращаемое значение:
//    Структура:
//		ГодНачало
//		ГодОкончание
//		Сотрудник
//		Организация
//      ПоВсемОП - данные по Организации или по ГоловнойОрганизации.
//      Обновление - учитывать ли зафиксированные в документе реквизиты.
//      РасчетныеГоды - отбор заполняемых лет, входящих в период между ГодНачало и ГодОкончание.
//      ОграничиватьРазмерЗаработка - применять ли ограничение базой страховых взносов.
//
Функция ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Объект) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Объект)

КонецФункции

// Возвращает Истина если лицо попадает под действие 421-ФЗ от 2014 года и дата события в 2015-2016 годах.
Функция ПрименяетсяФЗ_421_2014(ФизическоеЛицо, ДатаНачалаСобытия) Экспорт
	Если ДатаНачалаСобытия < '20150101'Или ДатаНачалаСобытия >= '20170101'Тогда // До 2015 и с 2017 года средний исчисляется одинаково для всех.
		Возврат Ложь;
	КонецЕсли;
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ПостоянноПроживалВКрыму18Марта2014Года") = Истина;
КонецФункции

// Возвращает Истина если лицо попадает под действие 20-ФЗ от 2023 года и дата события в 2023-2024 годах.
Функция ПрименяетсяФЗ_20_2023(ФизическоеЛицо, ДатаНачалаСобытия) Экспорт
	Если ДатаНачалаСобытия < '20230301'Или ДатаНачалаСобытия >= '20250101'Тогда // До 03.2023 и с 2025 года средний исчисляется одинаково для всех.
		Возврат Ложь;
	КонецЕсли;
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ПрименяетсяФЗ_20_2023") = Истина;
КонецФункции

Функция ДатаВключенияРКПриРасчетеБольничного() Экспорт
	
	Возврат '20200619';
	
КонецФункции

Функция ДоступноПособиеВставшимНаУчетВРанниеСроки(ДатаНачалаСобытия) Экспорт
	Возврат ДобавитьМесяц(ДатаНачалаСобытия, -8) < УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтменыЕдиновременногоПособияВставшимНаУчетВРанниеСроки();
КонецФункции

Функция ДействуетПолнаяОплатаПоУходуЗаРебенкомДо8Лет(ДатаНачалаСобытия) Экспорт
	Возврат ДатаНачалаСобытия >= УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаНачалаПолнойОплатыПоУходуЗаРебенкомДо8Лет();
КонецФункции

Функция ДействуетПорядокНСПЗ_2022(ДатаНачалаСобытия) Экспорт
	Возврат ?(ЗначениеЗаполнено(ДатаНачалаСобытия),
		ДатаНачалаСобытия >= НачалоДействияПорядкаНСПЗ_2022(),
		ТекущаяДатаСеанса() >= НачалоДействияПорядкаНСПЗ_2022());
КонецФункции

Функция НачалоДействияПорядкаНСПЗ_2022() Экспорт
	Возврат '20220901';
КонецФункции

Функция МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ(МинимальныйСреднедневнойЗаработок, РайонныйКоэффициентРФНаНачалоСобытия, ДатаНачалаСобытия) Экспорт
	
	Возврат ?(ДатаНачалаСобытия < ДатаВключенияРКПриРасчетеБольничного(), 
		МинимальныйСреднедневнойЗаработок, 
		МинимальныйСреднедневнойЗаработок * РайонныйКоэффициентРФНаНачалоСобытия);
				
КонецФункции

// Возвращает дату начала оплаты за счет ФСС.
Функция ДатаНачалаОплатыЗаСчетФСС(ДатаНачалаСобытия, ПричинаНетрудоспособности) Экспорт
	КоличествоДнейЗаСчетРаботодателя = КоличествоДнейЗаСчетРаботодателя(ДатаНачалаСобытия, ПричинаНетрудоспособности);
	Возврат ДатаНачалаСобытия + КоличествоДнейЗаСчетРаботодателя * 86400;
КонецФункции

#Область РегламентированнаяОтчетность

// РСВ

Процедура ОписаниеПоказателей_РСВ_2020Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130004002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130004003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130005002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130005003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006201", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006202", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006203", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006204", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130008003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130008004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009003", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140004002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140010002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140018002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140030002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140030003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140030004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140031004", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ_2020Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Параметр ФормированиеПерсонифицированныхСведенийОЗастрахованныхЛицах используется
	// только если данные собираются для вывода Раздела 3 РСВ
	Если ПараметрыОтчета.Свойство("ФормированиеПерсонифицированныхСведенийОЗастрахованныхЛицах") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	ОрганизацииДляСбораДанных = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Организация, ДатаКонцаПериодаОтчета);
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	ДатаАктуальности = Макс(ОкончаниеПериода, КонецДня(ПараметрыОтчета.ДатаПодписи));
	
	ОписаниеТаблиц = Новый Структура("ПособияПоНетрудоспособности2017,ПособияПоУходу2017,ПолучателейПособияПоУходу2017,ПособияПоНетрудоспособностиСверхНорм2017,ПолучателейПособийСверхНорм2020,ПособияПоУходуСверхНорм2017,ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017,ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017,ПолучателейПособияПоУходуСверхНорм2017");
	РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, ОрганизацииДляСбораДанных, ОписаниеТаблиц, Ложь, ДатаАктуальности);
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета);
	Значение = Неопределено;
	Раздел1Прил3 = Контейнер.Раздел1Прил3.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Раздел1Прил4 = Контейнер.Раздел1Прил4.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил4 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил4[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 3 Раздела 1
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособности2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПособияПоУходу2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходу2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	// Приложение 4 Раздела 1
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособностиСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособийСверхНорм2020;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПособияПоУходуСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130004002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130004003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130005002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130005003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006201", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006202", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006203", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006204", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130008003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130008004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009003", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140004002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140010002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140018002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140030003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140030004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140031004", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Параметр ФормированиеПерсонифицированныхСведенийОЗастрахованныхЛицах используется
	// только если данные собираются для вывода Раздела 3 РСВ
	Если ПараметрыОтчета.Свойство("ФормированиеПерсонифицированныхСведенийОЗастрахованныхЛицах") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	ДатаАктуальности = Макс(ОкончаниеПериода, КонецДня(ПараметрыОтчета.ДатаПодписи));
	
	ОписаниеТаблиц = Новый Структура("ПособияПоНетрудоспособности2017,ПособияПоУходу2017,ПолучателейПособияПоУходу2017,ПособияПоНетрудоспособностиСверхНорм2017,ПолучателейПособийСверхНорм2017,ПособияПоУходуСверхНорм2017,ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017,ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017,ПолучателейПособияПоУходуСверхНорм2017");
	РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, Ложь, ДатаАктуальности);
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета);
	Значение = Неопределено;
	Раздел1Прил3 = Контейнер.Раздел1Прил3.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Раздел1Прил4 = Контейнер.Раздел1Прил4.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил4 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил4[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 2 Раздела 1
	Контейнер.Раздел1Прил2.Строки[0].Данные.П000120000101 = ?(ДатаКонцаПериодаОтчета > ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация),"1","2");
	
	// Приложение 3 Раздела 1
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособности2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПособияПоУходу2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходу2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	// Приложение 4 Раздела 1
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособностиСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособийСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПособияПоУходуСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

КонецПроцедуры


Процедура РасчетПоказателейРСВ(ИмяРасчета, НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь, ДатаАктуальности = Неопределено) Экспорт

	УточненнаяДатаАктуальности = ?(ЗначениеЗаполнено(ДатаАктуальности), ДатаАктуальности, ОкончаниеПериода);
	
	Если ИмяРасчета = "РасчетПоказателей_РСВ_2017Кв1" Тогда
		РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные, УточненнаяДатаАктуальности);
	Иначе
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные, ДатаАктуальности)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	НачалоТекущегоКвартала = НачалоКвартала(ОкончаниеПериода);
	ОтчитывающаясяОрганизация = ?(ТипЗнч(Организация) = Тип("Массив"), Организация[0], Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала",		НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(ОтчитывающаясяОрганизация));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	
	// Приложение 3 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособности2017") Или ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособностиСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пособия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Пособия.ВидЗанятости КАК ВидЗанятости,
		|	Пособия.ВидЗанятости КАК ПроверяемыйВидЗанятости,
		|	Пособия.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
		|	Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	НАЧАЛОПЕРИОДА(Пособия.Период, МЕСЯЦ) КАК Период,
		|	СУММА(Пособия.СтраховыеСлучаи) КАК СтраховыеСлучаиОборот,
		|	СУММА(Пособия.ОплаченныеДни) КАК ОплаченныеДниОборот,
		|	СУММА(Пособия.СуммаВсего) КАК СуммаВсегоОборот,
		|	СУММА(Пособия.СуммаСверхНорм) КАК СуммаСверхНормОборот,
		|	Пособия.ФизическоеЛицо КАК ФизЛицоДляСвязей
		|ПОМЕСТИТЬ ВТДанныеУчета
		|ИЗ
		|	РегистрНакопления.ПособияПоСоциальномуСтрахованию КАК Пособия
		|ГДЕ
		|	Пособия.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И Пособия.Организация В(&Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости,
		|	Пособия.ВидПособияСоциальногоСтрахования,
		|	Пособия.ФинансированиеФедеральнымБюджетом,
		|	НАЧАЛОПЕРИОДА(Пособия.Период, МЕСЯЦ),
		|	Пособия.ВидЗанятости,
		|	Пособия.ФизическоеЛицо";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособности2017") Тогда
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(ОтчитывающаясяОрганизация));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеУчета.ФизическоеЛицо,
		|	ДанныеУчета.Период
		|ПОМЕСТИТЬ ВТПериодыФизЛицОрганизаций
		|ИЗ
		|	ВТДанныеУчета КАК ДанныеУчета";
		Запрос.Выполнить();
		
		УчетСтраховыхВзносов.СформироватьВТДанныеОПравахНаСтрахование(Запрос.МенеджерВременныхТаблиц);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001102,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002102,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003102,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130004002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130004003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриРожденииРебенка)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130005002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриРожденииРебенка)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130005003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130007002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130007003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130007004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130008004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130009001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130009002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130009003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриРожденииРебенка)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ВсегоРасходов,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ВсегоСверхНорм,
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости
		|ИЗ
		|	ВТДанныеУчета КАК Пособия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравахНаСтрахование КАК ДанныеОПравахНаСтрахование
		|		ПО Пособия.ФизЛицоДляСвязей = ДанныеОПравахНаСтрахование.ФизическоеЛицо
		|			И Пособия.Период = ДанныеОПравахНаСтрахование.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости";

		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
			МассивПолей.Добавить("ВидЗанятости");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоНетрудоспособности2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПособияПоУходу2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходу2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованиюОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиПоУходуЗаПервымРебенком) КАК СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаПервымРебенком) КАК СуммаВсегоПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормПоУходуЗаПервымРебенком) КАК СуммаСверхНормПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиПоУходуЗаВторымРебенком) КАК СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаВторымРебенком) КАК СуммаВсегоПоУходуЗаВторымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормПоУходуЗаВторымРебенком) КАК СуммаСверхНормПоУходуЗаВторымРебенкомОборот,
		|	НАЧАЛОПЕРИОДА(ПособияСоциальномуСтрахованиюОбороты.Период, КВАРТАЛ) КАК Период
		|ПОМЕСТИТЬ ВТПособияПоУходу
		|ИЗ
		|	РегистрНакопления.ПособияПоУходуЗаРебенком КАК ПособияСоциальномуСтрахованиюОбороты
		|ГДЕ
		|	ПособияСоциальномуСтрахованиюОбороты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И ПособияСоциальномуСтрахованиюОбороты.Организация В(&Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияСоциальномуСтрахованиюОбороты.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(ПособияСоциальномуСтрахованиюОбороты.Период, КВАРТАЛ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоУходу2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияПоУходу.ФизическоеЛицо,
		|	СУММА(ПособияПоУходу.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот) КАК СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаВсегоПоУходуЗаПервымРебенкомОборот) КАК СуммаВсегоПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаСверхНормПоУходуЗаПервымРебенкомОборот) КАК СуммаСверхНормПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот) КАК СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаВсегоПоУходуЗаВторымРебенкомОборот) КАК СуммаВсегоПоУходуЗаВторымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаСверхНормПоУходуЗаВторымРебенкомОборот) КАК СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|ПОМЕСТИТЬ ВТПособияПоУходуВцелом
		|ИЗ
		|	ВТПособияПоУходу КАК ПособияПоУходу
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияПоУходу.ФизическоеЛицо";
		Запрос.Выполнить();
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот <> 0
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006102,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот), 0) КАК П000130006103,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот), 0) КАК П000130006104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот <> 0
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006201,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006202,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот), 0) КАК П000130006203,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот), 0) КАК П000130006204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ДнейПоУходу,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот + Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот), 0) КАК ВсегоПоУходу,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот + Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот), 0) КАК СверхНормПоУходу,
		|	Пособия.ФизическоеЛицо
		|ИЗ
		|	ВТПособияПоУходуВцелом КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо";
		
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоУходу2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходу2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеУчетаПособий.ФизическоеЛицо), 0) КАК П000130006001
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПособияСоциальномуСтрахованиюОбороты.ФизическоеЛицо КАК ФизическоеЛицо
		|	ИЗ
		|		ВТПособияПоУходу КАК ПособияСоциальномуСтрахованиюОбороты
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПособияСоциальномуСтрахованиюОбороты.ФизическоеЛицо
		|
		|	ИМЕЮЩИЕ
		|		СУММА(ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаПервымРебенкомОборот + ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаВторымРебенкомОборот) <> 0) КАК ДанныеУчетаПособий";
		ОписаниеТаблиц.ПолучателейПособияПоУходу2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Приложение 4 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособностиСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2020") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПособияСоциальномуСтрахованию.СтраховыеСлучаиОборот) КАК СтраховыеСлучаи,
		|	СУММА(ПособияСоциальномуСтрахованию.СуммаСверхНормОборот) КАК СуммаСверхНорм,
		|	СУММА(ПособияСоциальномуСтрахованию.ОплаченныеДниОборот) КАК ОплаченныеДни,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период КАК Период
		|ПОМЕСТИТЬ ВТПособияСверхНорм
		|ИЗ
		|	ВТДанныеУчета КАК ПособияСоциальномуСтрахованию
		|ГДЕ
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность), ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды), ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью))
		|	И ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом <> ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПустаяСсылка)
		|	И ПособияСоциальномуСтрахованию.СуммаСверхНормОборот <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо,
		|	0,
		|	СУММА(ПособияСоциальномуСтрахованию.СуммаВсегоОборот),
		|	СУММА(ПособияСоциальномуСтрахованию.ОплаченныеДниОборот),
		|	НЕОПРЕДЕЛЕНО,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период
		|ИЗ
		|	ВТДанныеУчета КАК ПособияСоциальномуСтрахованию
		|ГДЕ
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами), ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами))
		|	И ПособияСоциальномуСтрахованию.СуммаВсегоОборот <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФинансированиеФедеральнымБюджетом,
		|	ВидПособияСоциальногоСтрахования";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособностиСверхНорм2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140002003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140002004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140003003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140003004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140008004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140009003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140009004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140014003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140014004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140016003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140016004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140017003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140017004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140022003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140022004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140023003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140023004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140030003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140030004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140031004,
		|	Пособия.ФизическоеЛицо
		|ИЗ
		|	ВТПособияСверхНорм КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо";
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоНетрудоспособностиСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140002002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140003002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140008002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140009002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140014002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140016002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140017002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140022002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140023002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пособия.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|		Пособия.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования
		|	ИЗ
		|		ВТПособияСверхНорм КАК Пособия
		|
		|	СГРУППИРОВАТЬ ПО
		|		Пособия.ФинансированиеФедеральнымБюджетом,
		|		Пособия.ВидПособияСоциальногоСтрахования) КАК ВсеПолучатели";
		
		ОписаниеТаблиц.ПолучателейПособийСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2020") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140002002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140003002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140008002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140009002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140014002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140016002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140017002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140022002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140023002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140030002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пособия.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|		ВЫБОР
		|			КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|					И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|				ТОГДА Пособия.ВидПособияСоциальногоСтрахования
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПустаяСсылка)
		|		КОНЕЦ КАК ВидПособияСоциальногоСтрахования
		|	ИЗ
		|		ВТПособияСверхНорм КАК Пособия
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Пособия.ФинансированиеФедеральнымБюджетом,
		|		ВЫБОР
		|			КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|					И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|				ТОГДА Пособия.ВидПособияСоциальногоСтрахования
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПустаяСсылка)
		|		КОНЕЦ) КАК ВсеПолучатели";
		
		ОписаниеТаблиц.ПолучателейПособийСверхНорм2020 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПособияПоУходуСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017")
		Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуСверхНорм2017") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	СУММА(ПособияСоциальномуСтрахованию.СтраховыеСлучаиПоУходуЗаПервымРебенком) КАК СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованию.СуммаСверхНормПоУходуЗаПервымРебенком) КАК СуммаСверхНормПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованию.СтраховыеСлучаиПоУходуЗаВторымРебенком) КАК СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот,
		|	СУММА(ПособияСоциальномуСтрахованию.СуммаСверхНормПоУходуЗаВторымРебенком) КАК СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|ПОМЕСТИТЬ ВТПособияПоУходуСверхНорм
		|ИЗ
		|	РегистрНакопления.ПособияПоУходуЗаРебенком КАК ПособияСоциальномуСтрахованию
		|ГДЕ
		|	ПособияСоциальномуСтрахованию.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И ПособияСоциальномуСтрахованию.Организация В(&Организация)
		|	И ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом <> ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом";

		Запрос.Выполнить();
		
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоУходуСверхНорм2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140005003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140005004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140006003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140006004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140011003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140011004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140012003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140012004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140019003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140019004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140020003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140020004,
		|	Пособия.ФизическоеЛицо
		|ИЗ
		|	ВТПособияПоУходуСверхНорм КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо";
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоУходуСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140005002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140011002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140019002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пособия.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом
		|	ИЗ
		|		ВТПособияПоУходуСверхНорм КАК Пособия
		|	ГДЕ
		|		Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот <> 0
		|
		|	СГРУППИРОВАТЬ ПО
		|		Пособия.ФинансированиеФедеральнымБюджетом) КАК ВсеПолучатели";
		ОписаниеТаблиц.ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140006002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140012002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140020002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пособия.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом
		|	ИЗ
		|		ВТПособияПоУходуСверхНорм КАК Пособия
		|	ГДЕ
		|		Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот <> 0
		|
		|	СГРУППИРОВАТЬ ПО
		|		Пособия.ФинансированиеФедеральнымБюджетом) КАК ВсеПолучатели";
		ОписаниеТаблиц.ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140004002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140010002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140018002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПособияПоУходу.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		ПособияПоУходу.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом
		|	ИЗ
		|		ВТПособияПоУходуСверхНорм КАК ПособияПоУходу
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПособияПоУходу.ФинансированиеФедеральнымБюджетом) КАК ВсеПолучатели";
		ОписаниеТаблиц.ПолучателейПособияПоУходуСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

КонецПроцедуры


// 4-ФСС

Процедура ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030001003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030001004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030002003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030002004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030004003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030004004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030005003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030005004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030007003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030007004", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	ОрганизацииДляСбораДанных = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Организация, ДатаКонцаПериодаОтчета);

	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	ОписаниеТаблиц = Новый Структура("ПособияПоНетрудоспособности2017");
	РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, ОкончаниеПериода, ОрганизацииДляСбораДанных, ОписаниеТаблиц);
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета);
	Значение = Неопределено;
	Для каждого КлючИЗначение Из Контейнер.Таблица3_4 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Таблица3_4[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	// РАСХОДЫ НА ЦЕЛИ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ С НАЧАЛА ГОДА
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособности2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Контейнер.Таблица3_4, СтрокаДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2016Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2016Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2016Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2015Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2015Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2015Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2013Кв2(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2013Кв2(ПоказателиОтчета)
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2012Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2011Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2011Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2011Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2011Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры


Процедура РасчетПоказателей4ФСС(ИмяРасчета, НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь) Экспорт

	ОтчитывающаясяОрганизация = ?(ТипЗнч(Организация) = Тип("Массив"), Организация[0], Организация);
	Если ИмяРасчета = "РасчетПоказателей_4ФСС_2012Кв1" Тогда
		РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, ОкончаниеПериода, ОтчитывающаясяОрганизация, ОписаниеТаблиц, ПодробныеДанные);
	ИначеЕсли ИмяРасчета = "РасчетПоказателей_4ФСС_2015Кв1" Тогда
		РасчетПоказателей_4ФСС_2015Кв1(НачалоПериода, ОкончаниеПериода, ОтчитывающаясяОрганизация, ОписаниеТаблиц, ПодробныеДанные);
	ИначеЕсли ИмяРасчета = "РасчетПоказателей_4ФСС_2016Кв1" Тогда
		РасчетПоказателей_4ФСС_2016Кв1(НачалоПериода, ОкончаниеПериода, ОтчитывающаясяОрганизация, ОписаниеТаблиц, ПодробныеДанные);
	ИначеЕсли ИмяРасчета = "РасчетПоказателей_4ФСС_2017Кв1" Тогда
		РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
	Иначе
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	НачалоТекущегоКвартала = НачалоКвартала(ОкончаниеПериода);
	ОтчитывающаясяОрганизация = ?(ТипЗнч(Организация) = Тип("Массив"), Организация[0], Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала",		НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(ОтчитывающаясяОрганизация));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособности2017") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пособия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Пособия.ВидЗанятости КАК ВидЗанятости,
		|	Пособия.ВидЗанятости КАК ПроверяемыйВидЗанятости,
		|	Пособия.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
		|	Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	НАЧАЛОПЕРИОДА(Пособия.Период, МЕСЯЦ) КАК Период,
		|	СУММА(Пособия.СтраховыеСлучаи) КАК СтраховыеСлучаиОборот,
		|	СУММА(Пособия.ОплаченныеДни) КАК ОплаченныеДниОборот,
		|	СУММА(Пособия.СуммаВсего) КАК СуммаВсегоОборот,
		|	СУММА(Пособия.СуммаСверхНорм) КАК СуммаСверхНормОборот,
		|	Пособия.ФизическоеЛицо КАК ФизЛицоДляСвязей
		|ПОМЕСТИТЬ ВТДанныеУчета
		|ИЗ
		|	РегистрНакопления.ПособияПоСоциальномуСтрахованию КАК Пособия
		|ГДЕ
		|	Пособия.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И Пособия.Организация В(&Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости,
		|	Пособия.ВидПособияСоциальногоСтрахования,
		|	Пособия.ФинансированиеФедеральнымБюджетом,
		|	НАЧАЛОПЕРИОДА(Пособия.Период, МЕСЯЦ),
		|	Пособия.ВидЗанятости,
		|	Пособия.ФизическоеЛицо";
		Запрос.Выполнить();
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030001003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030001004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030002003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030002004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030004003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030004004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030005003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030005004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030007003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030007004,
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости
		|ИЗ
		|	ВТДанныеУчета КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости";

		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
			МассивПолей.Добавить("ВидЗанятости");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоНетрудоспособности2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные)
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.РасчетПоказателей_4ФСС_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2015Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные)
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.РасчетПоказателей_4ФСС_2015Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные)
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
КонецПроцедуры

Функция УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей)
	
	Для каждого ПолеРасшифровки Из МассивПолей Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Пособия." + ПолеРасшифровки,"Неопределено");
	КонецЦикла;
	
	Возврат ТекстЗапроса
	
КонецФункции

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента.
Функция ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки);
	
КонецФункции

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПереопределитьСтатусИСостояниеСдачиОтчетности.
Процедура ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен, ПометкаУдаления, СостояниеРеестра, ДатаПолученияОтветаФСС");
		
		Если ЗначенияРеквизитов.ПометкаУдаления Тогда
			СтатусОтправки = НСтр("ru = 'Удален';
									|en = 'Removed'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
			
		ИначеЕсли Не ЗначенияРеквизитов.Проведен Тогда
			СтатусОтправки = НСтр("ru = 'В работе';
									|en = 'In progress'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
			
		ИначеЕсли ЗначенияРеквизитов.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ПринятФСС Тогда
			СтатусОтправки = НСтр("ru = 'Принят';
									|en = 'Accepted'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			
		ИначеЕсли ЗначенияРеквизитов.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.НеПринятФСС Тогда
			СтатусОтправки = НСтр("ru = 'Не принят';
									|en = 'Not accepted'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			
		ИначеЕсли ЗначенияРеквизитов.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ЧастичноПринятФСС Тогда
			СтатусОтправки = НСтр("ru = 'Принят частично';
									|en = 'Partially accepted'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			
		Иначе
			СтатусОтправки = НСтр("ru = 'В работе';
									|en = 'In progress'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаПолученияОтветаФСС) Тогда
			СтатусОтправки = СтатусОтправки + " " + Формат(ЗначенияРеквизитов.ДатаПолученияОтветаФСС, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
Процедура ПослеРасшифровкиСообщенияСЭДО(Страхователь, Сообщение, Результат) Экспорт
	
	СЭДОФСС.ПослеРасшифровкиСообщенияСЭДО(Страхователь, Сообщение, Результат);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО.
Процедура ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	
	СЭДОФСС.ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОтветаНаПодтверждениеОПрочтении.
Процедура ПослеПолученияОтветаНаПодтверждениеОПрочтении(Страхователь, РезультатыПодтверждений, Результат) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПослеПолученияОтветаНаПодтверждениеОПрочтении(Страхователь, РезультатыПодтверждений, Результат);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияПодтвержденияДоставкиОператоромСообщенияСЭДО.
Процедура ПослеПолученияПодтвержденияДоставкиОператоромСообщенияСЭДО(Страхователь, ИсходноеСообщение, СтатусПодтверждения, Результат) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПослеПолученияПодтвержденияДоставкиОператоромСообщенияСЭДО(
		Страхователь,
		ИсходноеСообщение,
		СтатусПодтверждения,
		Результат);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибкиДоставкиОператоромСообщенияСЭДО.
Процедура ПослеПолученияОшибкиДоставкиОператоромСообщенияСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПослеПолученияОшибкиДоставкиОператоромСообщенияСЭДО(
		Страхователь,
		ИсходноеСообщение,
		ТекстОшибки,
		Результат);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет физлицо, уполномоченного отправлять (предоставлять) в ФСС информацию, необходимую для выплат пособий.
// Выполняется однократно при обновлении ИБ для заполнения физлиц в документах,
// подключенных к механизму заполнения ответственных лиц организаций.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - документ, в котором необходимо заполнить уполномоченного представителя.
//
Процедура ЗаполнитьУполномоченногоПоПрямымВыплатамФСС(ДокументОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.УдалитьФИОУполномоченного)
		И Не ЗначениеЗаполнено(ДокументОбъект.ПредставительСФР) Тогда
		
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДокументОбъект.УдалитьФИОУполномоченного);
		РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(
			"",
			ЧастиИмени.Фамилия,
			ЧастиИмени.Имя,
			ЧастиИмени.Отчество);
		ФизическоеЛицо = РезультатПоиска.ФизическоеЛицо;
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			ДокументОбъект.ПредставительСФР = ФизическоеЛицо;
			ДокументОбъект.УдалитьФИОУполномоченного = "";
		Иначе
			Текст = СтрШаблон(
				НСтр("ru = 'Для уполномоченного представителя ""%1"" не найдено физическое лицо. %2';
					|en = 'No individual found for authorized representative ""%1"". %2'"),
				ДокументОбъект.УдалитьФИОУполномоченного,
				РезультатПоиска.ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурнала(),
				УровеньЖурналаРегистрации.Предупреждение,
				ДокументОбъект.Метаданные(),
				ДокументОбъект.Ссылка,
				Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеПомеченныхОбъектов

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	РегистрыСведений.СведенияОбЭЛН.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);
	СЭДОФСС.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4e1-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c55aaff6-d584-11eb-80f4-4cedfb43b11a", Метаданные.Документы.ВозмещениеБольничныхВЧастиФБ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf2c-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbef9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявлениеВФССОВозмещенииРасходовНаПогребение);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf69-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf70-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОписьЗаявленийСотрудниковНаВыплатуПособий);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbffa-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4cd-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbefb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.МедицинскиеОрганизации);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	Списки.Вставить(Метаданные.Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий, Истина);
	Списки.Вставить(Метаданные.Справочники.ИсходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем, Истина);
	Списки.Вставить(Метаданные.Справочники.РеестрДанныхЭЛНЗаполняемыхРаботодателемПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ПособияПоСоциальномуСтрахованию, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ПособияПоУходуЗаРебенком, Истина);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	ПрямыеВыплатыПособийСоциальногоСтрахования.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	Описание = Описание + "
	|Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Чтение.ГруппыФизическихЛиц
	|Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Чтение.Организации
	|Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Изменение.ГруппыФизическихЛиц
	|Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Изменение.Организации
	|Справочник.ИсходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИсходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИсходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИсходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Изменение.Организации
	|Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.Чтение.Организации
	|Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.Изменение.Организации
	|Справочник.РеестрДанныхЭЛНЗаполняемыхРаботодателемПрисоединенныеФайлы.Чтение.Организации
	|Справочник.РеестрДанныхЭЛНЗаполняемыхРаботодателемПрисоединенныеФайлы.Изменение.Организации
	|РегистрСведений.СведенияОбЭЛН.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОбЭЛН.Чтение.Организации
	|РегистрСведений.СведенияОбЭЛН.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОбЭЛН.Изменение.Организации
	|РегистрНакопления.ПособияПоСоциальномуСтрахованию.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ПособияПоСоциальномуСтрахованию.Чтение.Организации
	|РегистрНакопления.ПособияПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ПособияПоУходуЗаРебенком.Чтение.Организации";
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	ПрямыеВыплатыПособийСоциальногоСтрахования.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных.
Процедура ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных) Экспорт
	
	// АПК:278-выкл Базовые подсистемы могут условно вызывать расширенные.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования") Тогда
		МодульУчетПособийСоциальногоСтрахованияРасширенный = ОбщегоНазначения.ОбщийМодуль("УчетПособийСоциальногоСтрахованияРасширенный");
		МодульУчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных);
	КонецЕсли;
	// АПК:278-вкл
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "АдресМестаЖительства,ВидДокумента,СерияДокумента,НомерДокумента,ДатаВыдачиДокумента,КемВыданДокумент,ДанныеОЗаработке.РасчетныйГод,ДанныеОЗаработке.Заработок";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ПособияПоСоциальномуСтрахованию";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммаВсего,СуммаСверхНорм,СуммаФинансируемаяРаботодателем";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ПособияПоУходуЗаРебенком";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммаВсегоПоУходуЗаПервымРебенком,СуммаСверхНормПоУходуЗаПервымРебенком,СуммаВсегоПоУходуЗаВторымРебенком,СуммаСверхНормПоУходуЗаВторымРебенком";
	НовыеСведения.ОбластьДанных		= "Доходы";
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияОбъектов

// См. ПрефиксацияОбъектовПереопределяемый.ПолучитьПрефиксообразующиеРеквизиты.
Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СЭДОФСС.ПолучитьПрефиксообразующиеРеквизиты(Объекты);
	
КонецПроцедуры

#КонецОбласти

// Получает данные больничного по ссылке, либо находит последний больничный лист по номеру.
//
// Параметры:
//   СсылкаИлиНомер - ДокументСсылка.БольничныйЛист, Строка - Ссылка больничного или номер листка нетрудоспособности.
//
// Возвращаемое значение:
//   Неопределено - Если не удалось найти больничный.
//   Структура - Данные больничного.
//
Функция ДанныеБольничногоЛиста(СсылкаИлиНомер) Экспорт
	Отбор = Новый Структура;
	Если ТипЗнч(СсылкаИлиНомер) = Тип("Строка") Тогда
		Отбор.Вставить("НомерЛисткаНетрудоспособности", СсылкаИлиНомер);
	Иначе
		Отбор.Вставить("Ссылка", СсылкаИлиНомер);
	КонецЕсли;
	
	Запрос = Документы.БольничныйЛист.ЗапросПоБольничным(Отбор, "Проведен УБЫВ, ПометкаУдаления, ПериодРегистрации УБЫВ", 1);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеБольничного = Новый Структура;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ДанныеБольничного.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;
	Возврат ДанныеБольничного;
КонецФункции

// Определяет последний день болезни, оформленной несколькими листками нетрудоспособности.
//
// Параметры:
//   ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист - Первичный листок нетрудоспособности.
//   ИсключаемыеДокументы - Массив из ДокументСсылка.БольничныйЛист - Больничные, которые не нужно учитывать 
//       при определении последнего дня болезни.
//
// Возвращаемое значение:
//   Дата - Последний день болезни, зарегистрированной по переданному больничному.
//
Функция ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПервичныйБольничныйЛист", ПервичныйБольничныйЛист);
	Запрос.УстановитьПараметр("ИсключаемыеДокументы", ?(ИсключаемыеДокументы = Неопределено, Новый Массив, ИсключаемыеДокументы));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &ПервичныйБольничныйЛист
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ПервичныйБольничныйЛист = &ПервичныйБольничныйЛист
	|	И НЕ БольничныйЛист.Ссылка В (&ИсключаемыеДокументы)
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Возврат Выборка.ДатаОкончания;
КонецФункции

#Область ОграничениеПособияСнизуИсходяИзМРОТ

// Возвращает размер ограничения пособия по нетрудоспособности "снизу" исходя из МРОТ.
//   Относится к мерам повышения уровня социального обеспечения граждан в условиях,
//   связанных с распространением коронавирусной инфекции (2019-nCoV).
//
// Параметры:
//   ПричинаНетрудоспособности - ПеречислениеСсылка.ПричиныНетрудоспособности - Проверяемая причина нетрудоспособности.
//   ДатаНачалаОплаты          - Дата  - Дата начала оплаты нетрудоспособности.
//   ДнейОплаты                - Число - Количество оплачиваемых дней.
//                                       Период оплаты не должен выходить за пределы месяца.
//   РайонныйКоэффициентРФ     - Число - Районный коэффициент, используемый для оплаты пособия сотруднику.
//   ДоляНеполногоВремени      - Число - Количество ставок, занимаемых сотрудником.
//   МРОТ                      - Число - Минимальный размер оплаты труда на дату начала события (больничного).
//
// Возвращаемое значение:
//   Число
//
Функция ОграничениеПособияСнизуМРОТ(ПричинаНетрудоспособности, ДатаНачалаОплаты, ДнейОплаты, РайонныйКоэффициентРФ, ДоляНеполногоВремени, МРОТ) Экспорт
	Если Не ОграничиватьПособиеСнизуМРОТ(ПричинаНетрудоспособности, ДатаНачалаОплаты) Тогда
		Возврат 0;
	КонецЕсли;
	МРОТНеполногоВремени = МРОТ * РайонныйКоэффициентРФ * ДоляНеполногоВремени;
	ДнейВМесяце = День(КонецМесяца(ДатаНачалаОплаты));
	Если ДнейОплаты < ДнейВМесяце Тогда
		Возврат Окр(Окр(МРОТНеполногоВремени / ДнейВМесяце, 2) * ДнейОплаты, 2);
	Иначе
		Возврат Окр(МРОТНеполногоВремени, 2);
	КонецЕсли;
КонецФункции

// Возвращает признак необходимости повышенной оплаты пособий по нетрудоспособности из-за эпидемии коронавируса.
//   Изменение введено статьей 1 Федерального закона от 01.04.2020 № 104-ФЗ,
//   сделано постоянным статьей 4 Федерального закона от 29.12.2020 № 478-ФЗ.
//
// Параметры:
//   ПричинаНетрудоспособности - ПеречислениеСсылка.ПричиныНетрудоспособности - Проверяемая причина нетрудоспособности.
//   ДатаНачалаОплаты - Дата - Проверяемый период действия начисления.
//
// Возвращаемое значение:
//   Булево
//
Функция ОграничиватьПособиеСнизуМРОТ(ПричинаНетрудоспособности, ДатаНачалаОплаты) Экспорт
	Возврат (
		ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
		И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.Профзаболевание
		И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании
		И ДатаНачалаОплаты >= '20200401');
КонецФункции

#КонецОбласти

#Область БазоваяФункциональностьДокументов

Функция ЗначенияРеквизитовДоЗаписи(ДокументОбъект, ОписаниеРеквизитов) Экспорт
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	Если ЭтоНовый Тогда
		Результат = ЗначенияСвойствОбъекта(ДокументОбъект, ОписаниеРеквизитов);
	Иначе
		Результат = ЗначенияРеквизитовОбъекта(ДокументОбъект.Ссылка, ОписаниеРеквизитов);
	КонецЕсли;
	Результат.Вставить("ЭтоНовый", ЭтоНовый);
	Возврат Результат;
КонецФункции

Процедура ЗапуститьФоновыйПроцессПриЗаписиДокумента(ДокументОбъект, ПричинаЗапуска, ОписаниеРеквизитов, ИмяМетода) Экспорт
	ЗначенияРеквизитовДоЗаписи  = ДокументОбъект.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	ЗначенияРеквизитовПриЗаписи = ЗначенияСвойствОбъекта(ДокументОбъект, ОписаниеРеквизитов);
	ПредставлениеОперации       = СтрШаблон(
		НСтр("ru = '%1 (%2 %3 от %4)';
			|en = '%1 (%2 %3 from %4)'"),
		ПричинаЗапуска,
		ДокументОбъект.Метаданные().Синоним,
		ДокументОбъект.Номер,
		Формат(ДокументОбъект.Дата, "ДЛФ=D"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗначенияРеквизитовДоЗаписи",  ЗначенияРеквизитовДоЗаписи);
	ПараметрыПроцедуры.Вставить("ЗначенияРеквизитовПриЗаписи", ЗначенияРеквизитовПриЗаписи);
	ПараметрыПроцедуры.Вставить("Ссылка",                      ДокументОбъект.Ссылка);
	ПараметрыПроцедуры.Вставить("ВерсияДанных",                ДокументОбъект.ВерсияДанных);
	ПараметрыПроцедуры.Вставить("ПредставлениеОперации",       ПредставлениеОперации);
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыЗапуска.ОжидатьЗавершение           = 0;
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = ПредставлениеОперации;
	ПараметрыЗапуска.ЗапуститьВФоне              = Истина;
	
	ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыЗапуска);
КонецПроцедуры

Функция ДождатьсяОкончанияЗаписиОбъекта(Параметры) Экспорт
	Ссылка                = Параметры.Ссылка;
	ПредставлениеОперации = Параметры.ПредставлениеОперации;
	ВерсияДанныхПриЗаписи = Параметры.ВерсияДанных;
	ЭтоНовый              = Параметры.ЗначенияРеквизитовДоЗаписи.ЭтоНовый;
	
	Если ЭтоНовый Тогда
		ЖдатьВБлокировке     = Ложь;
		КоличествоПопыток    = 25;
		ПаузаМежду           = 5;
		ВерсияДанныхДоЗаписи = Неопределено;
	Иначе
		ЖдатьВБлокировке     = Истина;
		КоличествоПопыток    = 5;
		ПаузаМежду           = 5; // + 20 секунд на блокировку.
		ВерсияДанныхДоЗаписи = Параметры.ЗначенияРеквизитовДоЗаписи.ВерсияДанных;
	КонецЕсли;
	
	Если ВерсияДанныхДоЗаписи <> ВерсияДанныхПриЗаписи И ЗначениеЗаполнено(ВерсияДанныхПриЗаписи) Тогда
		Если ВерсияДанныхПриЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВерсияДанных") Тогда
			Возврат Истина; // Объект записан.
		КонецЕсли;
	КонецЕсли;
	
	ОбъектМетаданных = Ссылка.Метаданные();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурнала(),
		УровеньЖурналаРегистрации.Примечание,
		ОбъектМетаданных,
		Ссылка,
		СтрШаблон(НСтр("ru = '%1: Ожидание записи объекта: Начало';
						|en = '%1: Waiting for object writing: Starting'"), ПредставлениеОперации));
	
	Результат = Ложь;
	Для НомерПопытки = 1 По КоличествоПопыток Цикл
		Успех = Истина;
		Причина = "";
		Если ЖдатьВБлокировке Тогда
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
				Блокировка.Заблокировать();
				ОтменитьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Успех = Ложь;
				Причина = СтрШаблон(
					НСтр("ru = 'Не удалось дождаться записи объекта по причине: %1';
						|en = 'Cannot wait for object writing. Reason: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			Если Успех Тогда
				ВерсияДанныхТекущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВерсияДанных");
				Если ВерсияДанныхТекущая = Неопределено Или ВерсияДанныхТекущая = ВерсияДанныхДоЗаписи Тогда
					Успех = Ложь;
					Причина = НСтр("ru = 'Блокировку удалось установить, но версия данных осталась старой';
									|en = 'The lock was set, but the data version remained outdated'");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВерсияДанныхТекущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВерсияДанных");
			Если ВерсияДанныхТекущая = Неопределено Или ВерсияДанныхТекущая = ВерсияДанныхДоЗаписи Тогда
				Успех = Ложь;
				Причина = НСтр("ru = 'Версия данных все еще старая';
								|en = 'The data version is still outdated'");
			КонецЕсли;
		КонецЕсли;
		
		Если Не Успех Тогда
			ПредставлениеВерсии = ?(ВерсияДанныхТекущая = Неопределено, НСтр("ru = 'Неопределено';
																			|en = 'Undefined'"), ВерсияДанныхТекущая);
			Причина = Причина + Символы.ПС + СтрШаблон(НСтр("ru = 'Текущая версия данных: %1';
															|en = 'The current data version: %1'"), ПредставлениеВерсии);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурнала(),
				?(НомерПопытки < КоличествоПопыток, УровеньЖурналаРегистрации.Предупреждение, УровеньЖурналаРегистрации.Ошибка),
				ОбъектМетаданных,
				Ссылка,
				ПредставлениеОперации + ": " + Причина);
			Пауза(ПаузаМежду);
		Иначе
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурнала(),
		УровеньЖурналаРегистрации.Примечание,
		ОбъектМетаданных,
		Ссылка,
		СтрШаблон(НСтр("ru = '%1: Ожидание записи объекта: Завершение';
						|en = '%1: Waiting for object writing: Finalizing'"), ПредставлениеОперации));
	Возврат Результат;
КонецФункции

Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбновлениеИнформационнойБазыСлужебный.Пауза", Параметры);
	КонецЕсли;
	
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЗаписи

Процедура ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(БольничныйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СведенияОбЭЛН.ПриЗаписиБольничного(БольничныйОбъект);
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	ПрямыеВыплатыПособийСоциальногоСтрахования.ПриЗаписиБольничного(БольничныйОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
	// АПК:278-выкл Базовые подсистемы могут условно вызывать расширенные.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетПособийСоциальногоСтрахованияРасширенный");
		Модуль.ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ);
	КонецЕсли;
	// АПК:278-вкл
	
КонецПроцедуры

Процедура ПриЗаписиСправочникаФизическиеЛица(ФизическоеЛицоОбъект, Отказ) Экспорт
	// При изменении кадровых данных необходимо отпраивть обновленные сведения о застрахованном лице в ФСС.
	// Состав сведений см. в функции Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных().
	Если ФизическоеЛицоОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
	
	ЗначенияДоЗаписи = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(ФизическоеЛицоОбъект, "ДополнительныеСвойства.ПрежниеЗначения");
	СтарыйСНИЛС = ?(ЗначенияДоЗаписи = Неопределено, ФизическоеЛицоОбъект.СтраховойНомерПФР, ЗначенияДоЗаписи.СтраховойНомерПФР);
	НовыйСНИЛС = ФизическоеЛицоОбъект.СтраховойНомерПФР;
	Если СтарыйСНИЛС <> НовыйСНИЛС Тогда
		СЭДОФСС.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	КонецЕсли;
	
	// Очередь обработки кадровых данных зависит от данных регистра ЗастрахованныеЛицаСЭДО,
	// поэтому обновление можно запланировать в самом конце, после всех прочих обновлений.
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоФизическимЛицам(ФизическиеЛица);
КонецПроцедуры

Процедура ПриЗаписиРегистраГражданствоФизическихЛиц(РегистрСведенийНаборЗаписей, Отказ, Замещение) Экспорт
	// При изменении кадровых данных необходимо отпраивть обновленные сведения о застрахованном лице в ФСС.
	// Состав сведений см. в функции Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных().
	Если Отказ Или РегистрСведенийНаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ФизическиеЛица = КоллекцииБЗК.УникальныеЗначенияКолонки(РегистрСведенийНаборЗаписей, "ФизическоеЛицо");
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоФизическимЛицам(ФизическиеЛица);
КонецПроцедуры

Процедура ПриЗаписиРегистраДокументыФизическихЛиц(РегистрСведенийНаборЗаписей, Отказ, Замещение) Экспорт
	// При изменении кадровых данных необходимо отпраивть обновленные сведения о застрахованном лице в ФСС.
	// Состав сведений см. в функции Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных().
	Если Отказ Или РегистрСведенийНаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ФизическиеЛица = КоллекцииБЗК.УникальныеЗначенияКолонки(РегистрСведенийНаборЗаписей, "Физлицо");
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоФизическимЛицам(ФизическиеЛица);
КонецПроцедуры

Процедура ПриЗаписиРегистраКадроваяИсторияСотрудников(РегистрСведенийНаборЗаписей, Отказ, Замещение, ИзменившиесяДанные) Экспорт
	// При изменении кадровых данных необходимо отпраивть обновленные сведения о застрахованном лице в ФСС.
	// Состав сведений см. в функции Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных().
	Если Отказ Или РегистрСведенийНаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Таблица = РегистрСведенийНаборЗаписей.Выгрузить(, "ФизическоеЛицо, ГоловнаяОрганизация");
	Таблица.Свернуть("ФизическоеЛицо, ГоловнаяОрганизация");
	Таблица.Колонки.Добавить("СНИЛС", Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО.Измерения.СНИЛС.Тип);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоТаблице(Таблица);
КонецПроцедуры

Процедура ПриЗаписиРегистраСтатусФизическихЛицКакНалогоплательщиковНДФЛ(РегистрСведенийНаборЗаписей, Отказ, Замещение) Экспорт
	// При изменении кадровых данных необходимо отпраивть обновленные сведения о застрахованном лице в ФСС.
	// Состав сведений см. в функции Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных().
	// Код по обновлению сведений полностью совпадает с процедурой выше.
	ПриЗаписиРегистраГражданствоФизическихЛиц(РегистрСведенийНаборЗаписей, Отказ, Замещение);
КонецПроцедуры

Процедура ПриЗаписиРегистраВидыЗанятостиСотрудников(РегистрСведенийНаборЗаписей, Отказ, Замещение) Экспорт
	// При изменении кадровых данных необходимо отпраивть обновленные сведения о застрахованном лице в ФСС.
	// Состав сведений см. в функции Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных().
	Если Отказ Или РегистрСведенийНаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Таблица = РегистрСведенийНаборЗаписей.Выгрузить(, "ФизическоеЛицо, ГоловнаяОрганизация");
	Таблица.Свернуть("ФизическоеЛицо, ГоловнаяОрганизация");
	Таблица.Колонки.Добавить("СНИЛС", Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО.Измерения.СНИЛС.Тип);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоТаблице(Таблица);
КонецПроцедуры

#КонецОбласти

#Область ДокументПриемНаРаботу

Функция ИменаРеквизитовДокументаПриемНаРаботу()
	Возврат "Дата, Номер, ПометкаУдаления, Проведен, Организация, ФизическоеЛицо, ВерсияДанных";
КонецФункции

Процедура ПередЗаписьюДокументаПриемНаРаботу(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитовДоЗаписи = ЗначенияРеквизитовДоЗаписи(ДокументОбъект, ИменаРеквизитовДокументаПриемНаРаботу());
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписиДокументаПриемНаРаботу(ДокументОбъект, Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаЗапуска  = НСтр("ru = 'Обновление вторичных данных учета пособий';
							|en = 'Update secondary benefit accounting data'");
	ИменаРеквизитов = ИменаРеквизитовДокументаПриемНаРаботу();
	ИмяМетода       = "УчетПособийСоциальногоСтрахования.ПриЗаписиДокументаПриемНаРаботуВФоне";
	ЗапуститьФоновыйПроцессПриЗаписиДокумента(ДокументОбъект, ПричинаЗапуска, ИменаРеквизитов, ИмяМетода);
	
КонецПроцедуры

Процедура ПриЗаписиДокументаПриемНаРаботуВФоне(Параметры, АдресХранилища) Экспорт
	Если Не ДождатьсяОкончанияЗаписиОбъекта(Параметры) Тогда
		Возврат; // Обновит очередь обработки кадровых данных, запуск которой был запланирован при записи регистров.
	КонецЕсли;
	
	ТаблицаОбновления = РегистрыСведений.ЗастрахованныеЛицаСЭДО.ПустаяТаблицаОбновления();
	
	ЗначенияРеквизитовПриЗаписи = Параметры.ЗначенияРеквизитовПриЗаписи;
	Если ЗначениеЗаполнено(ЗначенияРеквизитовПриЗаписи.Организация)
		И ЗначениеЗаполнено(ЗначенияРеквизитовПриЗаписи.ФизическоеЛицо) Тогда
		СтрокаТаблицы = ТаблицаОбновления.Добавить();
		СтрокаТаблицы.ФизическоеЛицо = ЗначенияРеквизитовПриЗаписи.ФизическоеЛицо;
		СтрокаТаблицы.Страхователь   = СЭДОФСС.СтраховательОрганизации(ЗначенияРеквизитовПриЗаписи.Организация);
	КонецЕсли;
	
	ЗначенияРеквизитовДоЗаписи = Параметры.ЗначенияРеквизитовДоЗаписи;
	Если Не ЗначенияРеквизитовДоЗаписи.ЭтоНовый
		И ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.Организация)
		И ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо) 
		И Не (ЗначенияРеквизитовДоЗаписи.Организация    = ЗначенияРеквизитовПриЗаписи.Организация
			И ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо = ЗначенияРеквизитовПриЗаписи.ФизическоеЛицо) Тогда
		СтрокаТаблицы = ТаблицаОбновления.Добавить();
		СтрокаТаблицы.ФизическоеЛицо = ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо;
		СтрокаТаблицы.Страхователь   = СЭДОФСС.СтраховательОрганизации(ЗначенияРеквизитовДоЗаписи.Организация);
	КонецЕсли;
	
	РегистрыСведений.ЗастрахованныеЛицаСЭДО.ОбновитьПоТаблице(ТаблицаОбновления, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияИЖурналРегистрации

// Записывает в журнал и сообщает о критичной ошибке обработчика события без поднятия исключения.
//
// Параметры:
//   ИмяМетода - Строка
//   ТекстОшибки - Строка
//   Ссылка - ЛюбаяСсылка
//
Процедура СообщитьОКритичнойОшибкеОбработчикаСобытия(ИмяМетода, ТекстОшибки, Ссылка) Экспорт
	Текст = СтрШаблон(
		НСтр("ru = 'При обработке события ""%1"" возникла ошибка: %2';
			|en = 'Error occurred when handling event ""%1"": %2'"),
		ИмяМетода, 
		Символы.ПС + ТекстОшибки);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка);
	
	ЗаписатьОшибкуВЖурнал(Текст, Ссылка);
КонецПроцедуры

// Записыват ошибку в журнал.
Процедура ЗаписатьОшибкуВЖурнал(Текст, Ссылка = Неопределено, ОбъектМетаданных = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурнала(),
		УровеньЖурналаРегистрации.Ошибка,
		?(ОбъектМетаданных = Неопределено, ?(Ссылка = Неопределено, Неопределено, Ссылка.Метаданные()), ОбъектМетаданных),
		Ссылка,
		Текст);
КонецПроцедуры

Функция ИмяСобытияЖурнала() Экспорт
	Возврат НСтр("ru = 'Пособия социального страхования';
				|en = 'Social insurance allowances'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

#КонецОбласти

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает количество дней за счет работодателя в зависимости от даты начала нетрудоспособности.
Функция КоличествоДнейЗаСчетРаботодателя(ДатаНачалаСобытия, ПричинаНетрудоспособности) Экспорт
	// См. пункт 1 части 2 статьи 3 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	// См. пункт 1 статьи 8 Федерального закона от 24.07.1998 № 125-ФЗ (ред. от 25.02.2022).
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
		Возврат ?(ДатаНачалаСобытия > УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаНачалаРеформыСоцСтрахования(), 3, 2);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Процедура рассчитывает строки со способом расчета "ПоСреднемуЗаработкуФСС".
//
// Параметры:
//	- СтрокиРасчета - Массив, фрагмент таблицы Начисления.
//	- ДополнительныеПараметры - дополнительные свойства менеджера расчета.
//	- ПрименяетсяСторнирование - Булево, Истина если строки начислений содержат флаги сторнирования.
//
Процедура РассчитатьПособиеПоНетрудоспособности(СтрокиРасчета, ДополнительныеПараметры, ПрименяетсяСторнирование = Истина) Экспорт
	
	ПараметрыОплаты = ДополнительныеПараметрыРасчетаПособияПоНетрудоспособности();
	ЗаполнитьЗначенияСвойств(ПараметрыОплаты, ДополнительныеПараметры.ПараметрыРасчетаПособияПоНетрудоспособности);
	
	ГруппыСтрокРасчета = ГруппыСтрокРасчета(СтрокиРасчета);
	
	Если Не ЗначениеЗаполнено(ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия)
		Или ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия < 1 Тогда
		ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия = 1;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОплаты.РасчетПоПравилам2010Года) <> Тип("Булево") Тогда
		ПараметрыОплаты.РасчетПоПравилам2010Года = Ложь;
	КонецЕсли;
		
	НазначитьПособие = ПараметрыОплаты.НазначитьПособие;
	Если НазначитьПособие = Истина Тогда
		ПрименятьОграничениеДляПособийПоНС_ПЗ = (ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
											Или ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание)
											И ПараметрыОплаты.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты;
											
		ОграниченияДляПособийПоНС_ПЗ = Новый Соответствие;
		Если ПрименятьОграничениеДляПособийПоНС_ПЗ Тогда
			
			ИзмеренияДаты = Новый ТаблицаЗначений;
			ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			Для Каждого ГруппаСтрокРасчета Из ГруппыСтрокРасчета Цикл
				ИзмеренияДаты.Добавить().Период = ГруппаСтрокРасчета.ДатаНачала;
				ОграниченияДляПособийПоНС_ПЗ.Вставить(ГруппаСтрокРасчета.ДатаНачала, 0);
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ПараметрыПостроения.ВсеЗаписи = Истина;
			
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
				"МаксимальныйРазмерЕжемесячнойСтраховойВыплаты",
				Запрос.МенеджерВременныхТаблиц,
				Ложь,
				ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
				ПараметрыПостроения);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МаксимальныйРазмер.Период КАК Период,
			|	МаксимальныйРазмер.Размер КАК Размер
			|ИЗ
			|	ВТМаксимальныйРазмерЕжемесячнойСтраховойВыплатыСрезПоследних КАК МаксимальныйРазмер";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОграниченияДляПособийПоНС_ПЗ.Вставить(Выборка.Период, Выборка.Размер * 4);
			КонецЦикла;
		Иначе
			Для Каждого ГруппаСтрокРасчета Из ГруппыСтрокРасчета Цикл
				ОграниченияДляПособийПоНС_ПЗ.Вставить(ГруппаСтрокРасчета.ДатаНачала, 0);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоУходЗаРебенком = (
		ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
	
	ПрименятьОграничениеПособияСнизуМРОТПоМесяцам = ЭтоУходЗаРебенком;
	Если ПрименятьОграничениеПособияСнизуМРОТПоМесяцам Тогда
		КэшРасчетаПоМесяцам = Новый ТаблицаЗначений;
		КэшРасчетаПоМесяцам.Колонки.Добавить("ГруппаСтрокРасчета");
		КэшРасчетаПоМесяцам.Колонки.Добавить("НачалоМесяца");
		КэшРасчетаПоМесяцам.Колонки.Добавить("Результат");
		КэшРасчетаПоМесяцам.Колонки.Добавить("РезультатБезЛьгот");
		КэшРасчетаПоМесяцам.Колонки.Добавить("ОграничениеПособияСнизу");
		Месяцы = Новый Массив;
	КонецЕсли;
	
	РассчитыватьЧастьЗаСчетФБ = ЗначениеЗаполнено(ПараметрыОплаты.ПроцентОплатыБезЛьгот)
		И ЗначениеЗаполнено(ПараметрыОплаты.ФинансированиеФедеральнымБюджетом);
	
	ДатаОтменыРасчета2010Года = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаНачалаРеформыСоцСтрахования();
	Для Каждого ГруппаСтрокРасчета Из ГруппыСтрокРасчета Цикл
		СтрокаТаблицы   = ГруппаСтрокРасчета.ОсновнаяСтрокаРасчета;
		СтрокаТаблицыРК = ГруппаСтрокРасчета.СтрокаРасчетаРК;
		СтрокаТаблицыСН = ГруппаСтрокРасчета.СтрокаРасчетаСН;
		
		Сторно = Ложь;
		Если ПрименяетсяСторнирование Тогда
			Сторно = СтрокаТаблицы.Сторно;
		КонецЕсли;
		
		СтрокаТаблицы.Результат = 0;
		СтрокаТаблицы.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", 0);
		Если СтрокаТаблицыРК <> Неопределено Тогда
			СтрокаТаблицыРК.Результат = 0;
			СтрокаТаблицыРК.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", 0);
		КонецЕсли;
		Если СтрокаТаблицыСН <> Неопределено Тогда
			СтрокаТаблицыСН.Результат = 0;
			СтрокаТаблицыСН.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", 0);
		КонецЕсли;
		
		Если НазначитьПособие <> Истина Тогда
			// Нет данных для расчета.
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыОплаты.ИспользоватьСреднийЗаработокБольничныйЗаСчетРаботодателя
			И ЗарплатаКадры.ИнформацияОВидеРасчета(СтрокаТаблицы.Начисление).КатегорияНачисленияИлиНеоплаченногоВремени
				= Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя Тогда
			СреднийВсего = ПараметрыОплаты.СреднийЗаработокБольничныйЗаСчетРаботодателя;
			СреднийРК    = ПараметрыОплаты.СреднийЗаработокБольничныйЗаСчетРаботодателяРК;
			СреднийСН    = ПараметрыОплаты.СреднийЗаработокБольничныйЗаСчетРаботодателяСН;
		Иначе
			СреднийВсего = ПараметрыОплаты.СреднийДневнойЗаработок;
			СреднийРК    = ПараметрыОплаты.СреднийДневнойЗаработокРК;
			СреднийСН    = ПараметрыОплаты.СреднийДневнойЗаработокСН;
		КонецЕсли;
		
		ОплачиваемоеВремя = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "КалендарныеДни");
		Если ОплачиваемоеВремя = Неопределено Тогда
			ОплачиваемоеВремя = 0;
		КонецЕсли;
		
		ИменаПараметровОплатыСтроки = "ПроцентОплаты, ПроцентОплатыБезЛьгот, ОграничениеПособия, ОграничениеПособияБезЛьгот";
		ПараметрыОплатыСтроки = Новый Структура(ИменаПараметровОплатыСтроки);
		Если ЭтоУходЗаРебенком
			И СтрокаТаблицы.Дополнительно.Свойство("ОграничениеПособия") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОплатыСтроки, СтрокаТаблицы.Дополнительно, ИменаПараметровОплатыСтроки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПараметрыОплатыСтроки.ОграничениеПособия) Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОплатыСтроки, ПараметрыОплаты);
			Если ЭтоУходЗаРебенком
				И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНачалаПоловиннойОплаты)
				И СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНачалаПоловиннойОплаты Тогда
				ПараметрыОплатыСтроки.ПроцентОплаты         = 50;
				ПараметрыОплатыСтроки.ПроцентОплатыБезЛьгот = 50;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыОплатыСтроки);
		ПроцентОплаты              = ПараметрыОплатыСтроки.ПроцентОплаты;
		ПроцентОплатыБезЛьгот      = ПараметрыОплатыСтроки.ПроцентОплатыБезЛьгот;
		ОграничениеПособия         = ПараметрыОплатыСтроки.ОграничениеПособия;
		ОграничениеПособияБезЛьгот = ПараметрыОплатыСтроки.ОграничениеПособияБезЛьгот;
		
		ПрименятьОграничениеМРОТом = ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ
			Или (СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНарушенияРежима И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНарушенияРежима));
		ПрименятьОграничениеМРОТомБезЛьгот = ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ
			Или (СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНарушенияРежима И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНарушенияРежима));
		
		РасчетПоПравилам2010Года = ПараметрыОплаты.РасчетПоПравилам2010Года
			Или ПараметрыОплаты.ПериодРегистрации < ДатаОтменыРасчета2010Года
			Или ПараметрыОплаты.ДатаНачалаСобытия < ДатаОтменыРасчета2010Года;
		
		ТекущийРайонныйКоэффициент = 1;
		РайонныйКоэффициентРФ = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "РайонныйКоэффициентРФ");
		Если РайонныйКоэффициентРФ <> Неопределено Тогда
			ТекущийРайонныйКоэффициент = Макс(РайонныйКоэффициентРФ, 1);
		КонецЕсли;
		
		МРОТ = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "МРОТ");
		ТекущийМРОТ = МРОТ * ТекущийРайонныйКоэффициент;
		
		НормированноеОграничениеДляПособийПоНС_ПЗ = ОграниченияДляПособийПоНС_ПЗ[СтрокаТаблицы.ДатаНачала];
		
		НормаВремени = День(КонецМесяца(СтрокаТаблицы.ДатаНачала));
		Если ОплачиваемоеВремя < НормаВремени Тогда
			ОграничениеПособияМРОТом = Окр(Окр(ТекущийМРОТ / НормаВремени, 2) * ОплачиваемоеВремя, 2);
			НормированноеОграничениеДляПособийПоНС_ПЗ = Окр(Окр(НормированноеОграничениеДляПособийПоНС_ПЗ / НормаВремени, 2) * ОплачиваемоеВремя, 2);
		Иначе
			ОграничениеПособияМРОТом = Окр(ТекущийМРОТ,2);
		КонецЕсли;
		
		Если РасчетПоПравилам2010Года Тогда
			Результат = СуммаПособия_2010(
				ОплачиваемоеВремя,
				СреднийВсего,
				ОграничениеПособия,
				ПроцентОплаты,
				?(ПрименятьОграничениеМРОТом, ОграничениеПособияМРОТом, Неопределено));
			СтрокаТаблицы.Результат = Результат * ?(Сторно, -1, 1);
			Если РассчитыватьЧастьЗаСчетФБ Тогда
				РезультатБезЛьгот = СуммаПособия_2010(
					ОплачиваемоеВремя,
					СреднийВсего,
					ОграничениеПособия,
					ПроцентОплатыБезЛьгот,
					?(ПрименятьОграничениеМРОТомБезЛьгот, ОграничениеПособияМРОТом, Неопределено));
				Если РезультатБезЛьгот < Результат Тогда
					СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ = (Результат - РезультатБезЛьгот) * ?(Сторно, -1, 1);
					СтрокаТаблицы.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
				КонецЕсли;
			КонецЕсли;
		Иначе
			МинимальныйСреднедневнойЗаработок = МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ(
				ПараметрыОплаты.МинимальныйСреднедневнойЗаработок, 
				ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия,
				ПараметрыОплаты.ДатаНачалаСобытия);
			Если СреднийВсего >= МинимальныйСреднедневнойЗаработок Тогда
				ДневноеПособие = Окр(СреднийВсего * ПроцентОплаты / 100, 2);
				ДневноеПособиеРК = Окр(СреднийРК * ПроцентОплаты / 100, 2);
				ДневноеПособиеСН = Окр(СреднийСН * ПроцентОплаты / 100, 2);
				РезультатВсего = Окр(ОплачиваемоеВремя * ДневноеПособие, 2);
				РезультатРК = Окр(ОплачиваемоеВремя * ДневноеПособиеРК, 2);
				РезультатСН = Окр(ОплачиваемоеВремя * ДневноеПособиеСН, 2);
			Иначе // В случае ограничения пособия "снизу" доля СН отсутствует.
				ДневноеПособие = Окр(ПараметрыОплаты.МинимальныйСреднедневнойЗаработок * ПроцентОплаты / 100, 2);
				РезультатВсего = Окр(ОплачиваемоеВремя * ДневноеПособие * ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия, 2);
				РезультатРК = Окр(ОплачиваемоеВремя * ДневноеПособие * (ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия - 1), 2);
				РезультатСН = 0;
			КонецЕсли;
			
			// Ограничение пособия сверху
			Если ПрименятьОграничениеМРОТом Тогда
				ОграничениеСверху = ОграничениеПособияМРОТом;
			ИначеЕсли ПрименятьОграничениеДляПособийПоНС_ПЗ Тогда
				ОграничениеСверху = НормированноеОграничениеДляПособийПоНС_ПЗ;
			Иначе
				ОграничениеСверху = Неопределено;
			КонецЕсли;
			Если ОграничениеСверху <> Неопределено И ОграничениеСверху < РезультатВсего Тогда
				Если РезультатВсего > 0 Тогда
					РезультатРК = Окр(РезультатРК * ОграничениеСверху / РезультатВсего, 2);
					РезультатСН = Окр(РезультатСН * ОграничениеСверху / РезультатВсего, 2);
				Иначе
					РезультатРК = 0;
					РезультатСН = 0;
				КонецЕсли;
				РезультатВсего = ОграничениеСверху;
			КонецЕсли;
			
			// Ограничение пособия снизу
			ОграничениеПособияСнизу = ОграничениеПособияСнизуМРОТ(
				ПараметрыОплаты.ПричинаНетрудоспособности,
				СтрокаТаблицы.ДатаНачала,
				ОплачиваемоеВремя,
				РайонныйКоэффициентРФ,
				ПараметрыОплаты.ДоляНеполногоВремени,
				МРОТ);
			Если ОграничениеПособияСнизу > 0 Тогда
				Если ПрименятьОграничениеПособияСнизуМРОТПоМесяцам Тогда
					НачалоМесяца = НачалоМесяца(СтрокаТаблицы.ДатаНачала);
					Если Месяцы.Найти(НачалоМесяца) = Неопределено Тогда
						Месяцы.Добавить(НачалоМесяца);
					КонецЕсли;
					СтрокаТаблицыПоМесяцам = КэшРасчетаПоМесяцам.Добавить();
					СтрокаТаблицыПоМесяцам.ГруппаСтрокРасчета = ГруппаСтрокРасчета;
					СтрокаТаблицыПоМесяцам.НачалоМесяца = НачалоМесяца;
					СтрокаТаблицыПоМесяцам.Результат = РезультатВсего;
					СтрокаТаблицыПоМесяцам.РезультатБезЛьгот = 0;
					СтрокаТаблицыПоМесяцам.ОграничениеПособияСнизу = ОграничениеПособияСнизу;
				Иначе
					Если ОграничениеПособияСнизу > РезультатВсего Тогда
						РезультатВсего = ОграничениеПособияСнизу;
						РезультатРК = Окр(ОграничениеПособияСнизу / РайонныйКоэффициентРФ * (РайонныйКоэффициентРФ - 1), 2);
						РезультатСН = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Доли РК и СН отделяются от пособия только если созданы соответствующие начисления.
			Если СтрокаТаблицыРК = Неопределено Тогда
				РезультатРК = 0;
			Иначе
				СтрокаТаблицыРК.Результат = РезультатРК * ?(Сторно, -1, 1);
			КонецЕсли;
			Если СтрокаТаблицыСН = Неопределено Тогда
				РезультатСН = 0;
			Иначе
				СтрокаТаблицыСН.Результат = РезультатСН * ?(Сторно, -1, 1);
			КонецЕсли;
			Результат = (РезультатВсего - РезультатРК - РезультатСН);
			СтрокаТаблицы.Результат = Результат * ?(Сторно, -1, 1);
			ГруппаСтрокРасчета.РезультатВсего = РезультатВсего * ?(Сторно, -1, 1);
			
			// Часть пособия, финансируемая федеральным бюджетом.
			Если РассчитыватьЧастьЗаСчетФБ Тогда
				Если СреднийВсего >= МинимальныйСреднедневнойЗаработок Тогда
					ДневноеПособие = Окр(СреднийВсего * ПроцентОплатыБезЛьгот / 100, 2);
					ДневноеПособиеРК = Окр(СреднийРК * ПроцентОплатыБезЛьгот / 100, 2);
					ДневноеПособиеСН = Окр(СреднийСН * ПроцентОплатыБезЛьгот / 100, 2);
					РезультатВсегоБезЛьгот = Окр(ОплачиваемоеВремя * ДневноеПособие, 2);
					РезультатРКБезЛьгот    = Окр(ОплачиваемоеВремя * ДневноеПособиеРК, 2);
					РезультатСНБезЛьгот    = Окр(ОплачиваемоеВремя * ДневноеПособиеСН, 2);
				Иначе
					ДневноеПособие = Окр(ПараметрыОплаты.МинимальныйСреднедневнойЗаработок * ПроцентОплатыБезЛьгот / 100, 2);
					РезультатВсегоБезЛьгот = Окр(ОплачиваемоеВремя * ДневноеПособие * ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия, 2);
					РезультатРКБезЛьгот    = Окр(ОплачиваемоеВремя * ДневноеПособие * (ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия - 1), 2);
					РезультатСНБезЛьгот    = 0;
				КонецЕсли;
				
				Если ПрименятьОграничениеМРОТомБезЛьгот И ОграничениеПособияМРОТом < РезультатВсегоБезЛьгот Тогда
					Если РезультатВсегоБезЛьгот > 0 Тогда
						РезультатРКБезЛьгот = Окр(РезультатРКБезЛьгот * ОграничениеПособияМРОТом / РезультатВсегоБезЛьгот, 2);
						РезультатСНБезЛьгот = Окр(РезультатСНБезЛьгот * ОграничениеПособияМРОТом / РезультатВсегоБезЛьгот, 2);
					Иначе
						РезультатРКБезЛьгот = 0;
						РезультатСНБезЛьгот = 0;
					КонецЕсли;
					РезультатВсегоБезЛьгот = ОграничениеПособияМРОТом;
				КонецЕсли;
				
				// Ограничение пособия снизу в размере МРОТ,
				// применяемое с 01.04.2020 в связи с эпидемией коронавируса,
				// не зависит от процентов стажа.
				Если ОграничениеПособияСнизу > 0 Тогда
					Если ПрименятьОграничениеПособияСнизуМРОТПоМесяцам Тогда
						СтрокаТаблицыПоМесяцам.РезультатБезЛьгот = РезультатВсегоБезЛьгот;
					Иначе
						Если ОграничениеПособияСнизу > РезультатВсегоБезЛьгот Тогда
							РезультатВсегоБезЛьгот = ОграничениеПособияСнизу;
							РезультатРКБезЛьгот = Окр(ОграничениеПособияСнизу / РайонныйКоэффициентРФ * (РайонныйКоэффициентРФ - 1), 2);
							РезультатСНБезЛьгот = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если РезультатВсегоБезЛьгот < РезультатВсего Тогда
					// Доли РК и СН отделяются от пособия только если созданы соответствующие начисления.
					Если СтрокаТаблицыРК = Неопределено Тогда
						РезультатРКБезЛьгот = 0;
					Иначе
						СтрокаТаблицыРК.Дополнительно.РезультатВТомЧислеЗаСчетФБ = (РезультатРК - РезультатРКБезЛьгот) * ?(Сторно, -1, 1);
						СтрокаТаблицыРК.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыРК.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
					КонецЕсли;
					Если СтрокаТаблицыСН = Неопределено Тогда
						РезультатСНБезЛьгот = 0;
					Иначе
						СтрокаТаблицыСН.Дополнительно.РезультатВТомЧислеЗаСчетФБ = (РезультатСН - РезультатСНБезЛьгот) * ?(Сторно, -1, 1);
						СтрокаТаблицыСН.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыСН.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
					КонецЕсли;
					РезультатБезЛьгот = РезультатВсегоБезЛьгот - РезультатРКБезЛьгот - РезультатСНБезЛьгот;
					СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ = (Результат - РезультатБезЛьгот) * ?(Сторно, -1, 1);
					СтрокаТаблицы.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПрименятьОграничениеПособияСнизуМРОТПоМесяцам И КэшРасчетаПоМесяцам.Количество() > 0 Тогда
		Для Каждого НачалоМесяца Из Месяцы Цикл
			
			Копия = КэшРасчетаПоМесяцам.Скопировать(Новый Структура("НачалоМесяца", НачалоМесяца));
			
			ИтогРезультат               = Копия.Итог("Результат");
			ИтогРезультатБезЛьгот       = Копия.Итог("РезультатБезЛьгот");
			ИтогОграничениеПособияСнизу = Копия.Итог("ОграничениеПособияСнизу");
			
			ЗаменитьРезультатНаМРОТ         = (ИтогОграничениеПособияСнизу > ИтогРезультат);
			ЗаменитьРезультатБезЛьготНаМРОТ = (ИтогОграничениеПособияСнизу > ИтогРезультатБезЛьгот И РассчитыватьЧастьЗаСчетФБ);
			
			Если ЗаменитьРезультатНаМРОТ Или ЗаменитьРезультатБезЛьготНаМРОТ Тогда
				
				Для Каждого КэшСтроки Из Копия Цикл
					ГруппаСтрокРасчета = КэшСтроки.ГруппаСтрокРасчета;
					СтрокаТаблицы   = ГруппаСтрокРасчета.ОсновнаяСтрокаРасчета;
					СтрокаТаблицыРК = ГруппаСтрокРасчета.СтрокаРасчетаРК;
					СтрокаТаблицыСН = ГруппаСтрокРасчета.СтрокаРасчетаСН;
					
					Сторно = ПрименяетсяСторнирование И СтрокаТаблицы.Сторно;
					
					Если ЗаменитьРезультатНаМРОТ Тогда
						КэшСтроки.Результат     = КэшСтроки.ОграничениеПособияСнизу;
						СтрокаТаблицы.Результат = КэшСтроки.ОграничениеПособияСнизу * ?(Сторно, -1, 1);
						Если СтрокаТаблицыРК <> Неопределено Тогда
							СтрокаТаблицыРК.Результат = 0;
							СтрокаТаблицыРК.Дополнительно.РезультатВТомЧислеЗаСчетФБ = 0;
							СтрокаТаблицыРК.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыРК.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
						КонецЕсли;
						Если СтрокаТаблицыСН <> Неопределено Тогда
							СтрокаТаблицыСН.Результат = 0;
							СтрокаТаблицыСН.Дополнительно.РезультатВТомЧислеЗаСчетФБ = 0;
							СтрокаТаблицыСН.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыСН.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗаменитьРезультатБезЛьготНаМРОТ Тогда
						КэшСтроки.РезультатБезЛьгот = КэшСтроки.ОграничениеПособияСнизу;
					КонецЕсли;
					
					Если РассчитыватьЧастьЗаСчетФБ И КэшСтроки.РезультатБезЛьгот < КэшСтроки.Результат Тогда
						СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ = (КэшСтроки.Результат - КэшСтроки.РезультатБезЛьгот) * ?(Сторно, -1, 1);
						СтрокаТаблицы.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
						Если СтрокаТаблицыРК <> Неопределено Тогда
							СтрокаТаблицыРК.Дополнительно.РезультатВТомЧислеЗаСчетФБ = 0;
							СтрокаТаблицыРК.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыРК.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
						КонецЕсли;
						Если СтрокаТаблицыСН <> Неопределено Тогда
							СтрокаТаблицыСН.Дополнительно.РезультатВТомЧислеЗаСчетФБ = 0;
							СтрокаТаблицыСН.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыСН.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппыСтрокРасчета(СтрокиРасчета)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОсновнаяСтрокаРасчета");
	Результат.Колонки.Добавить("СтрокаРасчетаРК");
	Результат.Колонки.Добавить("СтрокаРасчетаСН");
	Результат.Колонки.Добавить("ДатаНачала");
	Результат.Колонки.Добавить("ДатаОкончания");
	Результат.Колонки.Добавить("ОсновноеНачисление");
	Результат.Колонки.Добавить("РезультатВсего", Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип);
	Результат.Колонки.Добавить("РезультатРК", Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип);
	Результат.Колонки.Добавить("РезультатСН", Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип);
	
	КатегорииРК = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииРК();
	КатегорииСН = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииСН();
	
	Фильтр = Новый Структура("ДатаНачала, ДатаОкончания, ОсновноеНачисление");
	
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		ЗаполнитьЗначенияСвойств(Фильтр, СтрокаТаблицы);
		Фильтр.ОсновноеНачисление = СтрокаТаблицы.Начисление;
		Информация = ЗарплатаКадры.ИнформацияОВидеРасчета(СтрокаТаблицы.Начисление);
		ЭтоРК = (КатегорииРК.Найти(Информация.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено);
		ЭтоСН = (КатегорииСН.Найти(Информация.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено);
		Если (ЭтоРК Или ЭтоСН) И ЗначениеЗаполнено(Информация.ОсновнойВидРасчета) тогда
			Фильтр.ОсновноеНачисление = Информация.ОсновнойВидРасчета;
		КонецЕсли;
		Найденные = Результат.НайтиСтроки(Фильтр);
		Если Найденные.Количество() = 0 Тогда
			ГруппаСтрокРасчета = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(ГруппаСтрокРасчета, Фильтр);
		Иначе
			ГруппаСтрокРасчета = Найденные[0];
		КонецЕсли;
		Если ЭтоРК Тогда
			ГруппаСтрокРасчета.СтрокаРасчетаРК = СтрокаТаблицы;
		ИначеЕсли ЭтоСН Тогда
			ГруппаСтрокРасчета.СтрокаРасчетаСН = СтрокаТаблицы;
		Иначе
			ГруппаСтрокРасчета.ОсновнаяСтрокаРасчета = СтрокаТаблицы;
		КонецЕсли;
	КонецЦикла;
	
	КоллекцииБЗК.УдалитьСтрокиТаблицыПоЗначению(Результат, "ОсновнаяСтрокаРасчета", Неопределено);
	
	Возврат Результат;
КонецФункции

Функция СуммаПособия_2010(КоличествоДней, СреднийДневной, ОграничениеПособия, ПроцентОплаты, МРОТДляОграниченияСверху)
	РазмерОграниченияДля2010года = Окр(РазмерОграниченияДля2010года() / 365, 2);
	Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.БезОграничений Тогда
		Результат = КоличествоДней * Окр(СреднийДневной * ПроцентОплаты / 100, 2);
	Иначе
		Результат = КоличествоДней * Окр(Мин(СреднийДневной, РазмерОграниченияДля2010года) * ПроцентОплаты / 100, 2);
	КонецЕсли;
	
	// Ограничение пособия сверху
	Если МРОТДляОграниченияСверху <> Неопределено Тогда
		Результат = Мин(Результат, МРОТДляОграниченияСверху);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДополнительныеПараметрыРасчетаПособияПоНетрудоспособности() Экспорт
	
	ПараметрыОплаты = Новый Структура(
		"Организация,
		|ПериодРегистрации,
		|ДатаНачалаСобытия,
		|ПричинаНетрудоспособности,
		|СреднийДневнойЗаработок,
		|СреднийДневнойЗаработокРК,
		|СреднийДневнойЗаработокСН,
		|ПроцентОплаты,
		|ДоляНеполногоВремени,
		|ОграничениеПособия,
		|ПроцентОплатыБезЛьгот,
		|ОграничениеПособияБезЛьгот,
		|ФинансированиеФедеральнымБюджетом,
		|ДатаНарушенияРежима,
		|РасчетПоПравилам2010Года,
		|ДатаНачалаПоловиннойОплаты,
		|МинимальныйСреднедневнойЗаработок,
		|РайонныйКоэффициентРФНаНачалоСобытия,
		|ИспользоватьСреднийЗаработокБольничныйЗаСчетРаботодателя,
		|СреднийЗаработокБольничныйЗаСчетРаботодателя,
		|СреднийЗаработокБольничныйЗаСчетРаботодателяРК,
		|СреднийЗаработокБольничныйЗаСчетРаботодателяСН,
		|НазначитьПособие,
		|ИспользоватьПериодыУходаВШапке");
	
	Возврат ПараметрыОплаты;
КонецФункции

// Составляет временную таблицу ВТПредельнаяВеличинаБазы, содержащую размеры предельной
// величины базы страховых взносов, действующих на указанные годы.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//		Годы - массив элементов типа число.
//
Процедура СоздатьВТПредельнаяВеличинаБазы(МенеджерВременныхТаблиц, Годы) Экспорт

	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Год Из Годы Цикл
		ИзмеренияДаты.Добавить().Период = Дата(Год, 1, 1);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	&ИзмеренияДаты КАК ИзмеренияДаты";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредельнаяВеличинаБазыСтраховыхВзносов",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГОД(ПредельнаяВеличинаБазыСтраховыхВзносов.Период) КАК Год,
	|	ЕСТЬNULL(ПредельнаяВеличинаБазыСтраховыхВзносов.РазмерФСС, 0) КАК Размер
	|ПОМЕСТИТЬ ВТПредельнаяВеличинаБазы
	|ИЗ
	|	ВТПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних КАК ПредельнаяВеличинаБазыСтраховыхВзносов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГОД(ИзмеренияДаты.Период),
	|	&ПредельнаяВеличинаДо2010
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|ГДЕ
	|	ИзмеренияДаты.Период < ДАТАВРЕМЯ(2010, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДаты";
	
	Запрос.УстановитьПараметр("ПредельнаяВеличинаДо2010", РазмерОграниченияДля2010года());
	Запрос.Выполнить();

КонецПроцедуры

// Возвращает массив ссылок из ПВР Начисления, соответствующих облагаемым взносами компенсациям, возмещаемым из бюджета ФСС
// (в частности, оплата 4-х дополнительных выходных дней для ухода за детьми инвалидами).
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	Массив
//
Функция НачисленияОблагаемыхВзносамиПособий() Экспорт

	Возврат УчетПособийСоциальногоСтрахованияВнутренний.НачисленияОблагаемыхВзносамиПособий();
	
КонецФункции

// Параметры:
//		Движения - коллекция движений регистратора.
//		Организация
//		ПериодРегистрации
//		ВидСтрахования
//		Сумма
//
Функция СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, ВидСтрахования, Сумма)

	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	НоваяСтрока = Движения.РасчетыСФондамиПоСтраховымВзносам.Добавить();
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Период = ПериодРегистрации;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.ЭтоСтраховыеВзносы = Истина;
	НоваяСтрока.ГодЗадолженностиПоЕСН = 0;
	НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидСтрахования;
	НоваяСтрока.РасчетыПоПособиям = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
	НоваяСтрока.Сумма = Сумма;
	
    Возврат НоваяСтрока
	
КонецФункции

// Возвращает размер ограничений, используемых при расчетах "по правилам 2010 года".
//
// Возвращаемое значение:
//	число
//
Функция РазмерОграниченияДля2010года() Экспорт
	
	Возврат 415000
	
КонецФункции

Функция ДанныеОЗаработкеДляЗаполнения(ПараметрыЗаполнения) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ДанныеОЗаработкеДляЗаполнения(ПараметрыЗаполнения);
	
КонецФункции

Функция ДоляНеполногоРабочегоВремени(ДоляНеполногоРабочегоВремени) Экспорт
	
	ДоляНеполногоВремени = 1;
	
	Если ТипЗнч(ДоляНеполногоРабочегоВремени) = Тип("Число")
		И ДоляНеполногоРабочегоВремени > 0
		И ДоляНеполногоРабочегоВремени < 1 Тогда
		ДоляНеполногоВремени = ДоляНеполногоРабочегоВремени;
	КонецЕсли;
	
	Возврат ДоляНеполногоВремени
	
КонецФункции

#Область Больничный

Функция ПроверитьНомерЛН(НомерЛН) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат НСтр("ru = 'Номер листка не заполнен.';
					|en = 'The sheet number cannot be blank.'");
	ИначеЕсли СтрДлина(НомерЛН) <> 12 Тогда
		Возврат СтрШаблон(НСтр("ru = 'В номере листка %2 символов, а должно быть 12 (введен номер: %1).';
								|en = 'The sheet number has %2 characters but should be 12 (number entered: %1).'"), НомерЛН, СтрДлина(НомерЛН));
	КонецЕсли;
	СтрокаБезЦифр = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(НомерЛН);
	Если СтрокаБезЦифр <> "" Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'В номере листка обнаружены лишние символы: ""%2"" (введен номер: %1). Номер должен содержать только цифры.';
				|en = 'Extra characters were found in the sheet number: ""%2"" (number entered: %1). The number must contain only digits.'"),
			НомерЛН,
			СтрокаБезЦифр);
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ПроверитьРегистрационныйНомерФСС(Номер, ЭтоДополнительныйКод = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(Номер) Тогда
		Если Не ЭтоДополнительныйКод Тогда
			Возврат НСтр("ru = 'Не заполнен регистрационный номер ФСС.';
						|en = 'SSF registration number is not specified.'");
		КонецЕсли;
	ИначеЕсли СтрДлина(Номер) <> 10 Тогда
		Если ЭтоДополнительныйКод Тогда
			Текст = НСтр("ru = 'В дополнительном коде ФСС %1 символов, а должно быть 10.';
						|en = 'Additional SSF code has %1 characters but should have 10.'");
		Иначе
			Текст = НСтр("ru = 'В регистрационном номере ФСС %1 символов, а должно быть 10.';
						|en = 'The SSF registration number contains %1 characters instead of 10.'");
		КонецЕсли;
		Возврат СтрШаблон(Текст, СтрДлина(Номер));
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(Номер);
		Если ЛишниеСимволы <> "" Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Если ЭтоДополнительныйКод Тогда
					Текст = НСтр("ru = 'В дополнительном коде ФСС должны быть только цифры (""%1"" - не цифра).';
								|en = 'The additional SSF code must contain only digits (""%1"" is not a digit).'");
				Иначе
					Текст = НСтр("ru = 'В регистрационном номере ФСС должны быть только цифры (""%1"" - не цифра).';
								|en = 'The SSF registration number must contain numbers only (""%1"" is not a number).'");
				КонецЕсли;
			Иначе
				Если ЭтоДополнительныйКод Тогда
					Текст = НСтр("ru = 'В дополнительном коде ФСС должны быть только цифры (""%1"" - не цифры).';
								|en = 'The additional SSF code must contain only digits (""%1"" are not digits).'");
				Иначе
					Текст = НСтр("ru = 'В регистрационном номере ФСС должны быть только цифры (""%1"" - не цифры).';
								|en = 'The SSF registration number must contain numbers only (""%1"" are not numbers).'");
				КонецЕсли;
			КонецЕсли;
			Возврат СтрШаблон(Текст, ЛишниеСимволы);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

// Возвращает максимальное количество оплачиваемых дней нетрудоспособности для указанной причины.
//   См. части 2 и 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
//
// Параметры:
//   КодПричины                   - Строка(2)
//   ВозрастРодственникаПолныхЛет - Число
//
// Возвращаемое значение:
//   Число, Неопределено
//
Функция ДнейОплатыЗаСлучай(КодПричины, ВозрастРодственникаПолныхЛет) Экспорт
	Если КодПричины = "08" Тогда
		Возврат 24; // Часть 2 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли КодПричины = "09" И ВозрастРодственникаПолныхЛет >= 16 Тогда
		Возврат 7; // Пункт 6 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли КодПричины = "09" И ВозрастРодственникаПолныхЛет >= 7 Тогда
		Возврат 15; // Пункт 2 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает максимальное количество оплачиваемых дней нетрудоспособности по уходу за родственником в год.
//   См. часть 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
//
// Параметры:
//   СлучайУходаЗаБольнымРебенком - ПеречислениеСсылка.СлучаиУходаЗаБольнымиДетьми
//
// Возвращаемое значение:
//   Число, Неопределено
//
Функция ДнейУходаЗаРодственникомВГод(СлучайУходаЗаБольнымРебенком) Экспорт
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре Тогда
		Возврат 60; // Пункт 1 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре Тогда
		Возврат 90; // Пункт 1 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетВСтационаре
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
		Возврат 45; // Пункт 2 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ИнвалидомДо8ЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ИнвалидомДо8ЛетВСтационаре
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре Тогда
		Возврат 120; // Пункт 3 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриПоствакцинальномОсложненииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриПоствакцинальномОсложненииВСтационаре
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриВИЧ
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ Тогда
		Возврат Неопределено; // Пункты 4 и 5 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	Иначе
		Возврат 30; // Пункт 6 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	КонецЕсли;
КонецФункции

// Возвращает количество оплачиваемых дней по уходу за ребенком перед началом половинной оплаты.
//   См. часть 3 статьи 7 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
//
// Параметры:
//   ПричинаНетрудоспособности    - ПеречислениеСсылка.ПричиныНетрудоспособности
//   СлучайУходаЗаБольнымРебенком - ПеречислениеСсылка.СлучаиУходаЗаБольнымиДетьми
//
// Возвращаемое значение:
//   Число, Неопределено
//
Функция ДнейПолнойОплатыПередПоловинной(СлучайУходаЗаБольнымРебенком, ДатаНачалаСобытия) Экспорт
	Если Не ДействуетПолнаяОплатаПоУходуЗаРебенкомДо8Лет(ДатаНачалаСобытия) Тогда
		Возврат ДнейПолнойОплатыПередПоловинной_2020(СлучайУходаЗаБольнымРебенком);
	КонецЕсли;
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно Тогда
		Возврат 10; // Пункт 1 части 3 статьи 7 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// См. часть 3 статьи 7 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
Функция ДнейПолнойОплатыПередПоловинной_2020(СлучайУходаЗаБольнымРебенком)
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно Тогда
		Возврат 10;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает процент и тип ограничения оплаты пособия на основании данных больничного и даты увольнения.
//
// Параметры:
//   Больничный - ДанныеФормыСтруктура, ДокументОбъект.БольничныйЛист
//
// Возвращаемое значение:
//   Структура
//     * ПроцентОплаты              - Число - Процент оплаты.
//     * ПроцентОплатыБезЛьгот      - Число - Процент оплаты без льгот, финансируемых за счет средств ФБ.
//     * ОграничениеПособия         - ПеречислениеСсылка.ВидыОграниченияПособия - Тип ограничения пособия.
//     * ОграничениеПособияБезЛьгот - ПеречислениеСсылка.ВидыОграниченияПособия - Тип ограничения пособия без льгот.
//
Функция ПроцентОплатыИОграничениеПособия(Больничный, СлучайУхода = Неопределено) Экспорт
	Результат = Новый Структура("ПроцентОплаты, ПроцентОплатыБезЛьгот, ОграничениеПособия, ОграничениеПособияБезЛьгот");
	
	Если ЭтоТравмаНаПроизводствеИлиПрофзаболевание(Больничный) Тогда
		// Больничный по НС/ПЗ оплачивается в размере 100% с особым ограничением.
		// Часть за счет ФБ не рассчитывается.
		Результат.ПроцентОплаты = 100;
		Если Больничный.ДатаНачалаСобытия >= УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаВводаОграниченийДляПособийПоНС_ПЗ() Тогда
			Результат.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты;
		Иначе
			Результат.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.БезОграничений;
		КонецЕсли;
		Результат.ПроцентОплатыБезЛьгот      = 0;
		Результат.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ПустаяСсылка();
		Возврат Результат;
	КонецЕсли;
	
	МесяцевСтажаБезНестраховыхПериодов = Больничный.СтажЛет * 12 + Больничный.СтажМесяцев;
	
	Если ПрименятьЛьготыПоРадиацииИлиПодразделениямОсобогоРиска(Больничный) Тогда
		// Больничный с льготами по радиации / подразделениям особого риска оплачивается в размере 100% с общим ограничением.
		// Доплата до 100% выполняется за счет средств ФБ.
		Результат.ПроцентОплаты      = 100;
		Результат.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение;
	Иначе
		// Размер ограничения рассчитывается в зависимости от стажа с учетом нестраховых периодов.
		МесяцевСтажаСНестраховымиПериодами = Больничный.СтажРасширенныйЛет * 12 + Больничный.СтажРасширенныйМесяцев;
		МесяцевСтажаСНестраховымиПериодами = Макс(МесяцевСтажаСНестраховымиПериодами, МесяцевСтажаБезНестраховыхПериодов);
		Если МесяцевСтажаСНестраховымиПериодами < 6 Тогда
			Результат.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ;
		Иначе
			Результат.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение;
		КонецЕсли;
		Если СлучайУхода = Неопределено Тогда
			СлучайУхода = Больничный.СлучайУходаЗаБольнымРебенком;
		КонецЕсли;
		Если Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			// Больничный по беременности и родам оплачивается в размере 100% (не выдается после увольнения).
			// Часть за счет ФБ не рассчитывается.
			Результат.ПроцентОплаты              = 100;
			Результат.ПроцентОплатыБезЛьгот      = 0;
			Результат.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ПустаяСсылка();
			Возврат Результат;
		ИначеЕсли ИспользуетсяУсловиеИсчисления(Больничный, "47") Тогда
			// Сотрудник уволен, в течение 30 календарных дней оплачивается 60%.
			// Часть за счет ФБ не рассчитывается.
			Результат.ПроцентОплаты              = 60;
			Результат.ПроцентОплатыБезЛьгот      = 0;
			Результат.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ПустаяСсылка();
			Возврат Результат;
		ИначеЕсли ИспользуетсяУсловиеИсчисления(Больничный, "44") Тогда
			// Работа в районах Крайнего Севера имеет меньший приоритет чем увольнение.
			// Доплата до 100% выполняется за счет средств ФБ.
			Результат.ПроцентОплаты = 100;
		ИначеЕсли ЭтоПолностьюОплачиваемыйУходЗаРебенкомДо8Лет(Больничный, СлучайУхода) Тогда
			// Уход за ребенком в возрасте до 8 лет оплачивается в размере 100% и без учета стажа (с 01.09.2021).
			// Размер ограничения рассчитывается без учета стажа.
			// Доплата до 100% выполняется за счет средств ФБ.
			Результат.ПроцентОплаты = 100;
			Результат.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение;
		Иначе
			// По общим правилам процент оплаты рассчитывается в зависимости от стажа с учетом нестраховых периодов.
			ЛетСтажа = Цел(МесяцевСтажаСНестраховымиПериодами / 12);
			Если ЛетСтажа >= 8 Тогда
				Результат.ПроцентОплаты = 100;
			ИначеЕсли ЛетСтажа >= 5 Тогда
				Результат.ПроцентОплаты = 80;
			Иначе
				Результат.ПроцентОплаты = 60;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение ограничений без льгот для расчета части за счет ФБ
	Если МесяцевСтажаБезНестраховыхПериодов < 6 Тогда
		Результат.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ;
	Иначе
		Результат.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ОбщееОграничение;
	КонецЕсли;
	
	Если Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		// Больничный по беременности и родам оплачивается в размере 100%.
		Результат.ПроцентОплатыБезЛьгот = 100;
	ИначеЕсли ИспользуетсяУсловиеИсчисления(Больничный, "47") Тогда
		// Сотрудник уволен, в течение 30 календарных дней оплачивается 60%.
		Результат.ПроцентОплатыБезЛьгот = 60;
	Иначе
		// По общим правилам процент оплаты без льгот рассчитывается в зависимости от стажа без учета нестраховых периодов.
		ЛетСтажа = Цел(МесяцевСтажаБезНестраховыхПериодов / 12);
		Если ЛетСтажа >= 8 Тогда
			Результат.ПроцентОплатыБезЛьгот = 100;
		ИначеЕсли ЛетСтажа >= 5 Тогда
			Результат.ПроцентОплатыБезЛьгот = 80;
		Иначе
			Результат.ПроцентОплатыБезЛьгот = 60;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает причину нетрудоспособности на основании кода причины и возраста родственника.
Функция ПричинаНетрудоспособности(КодПричины, ВозрастРодственника, ДатаНачалаСобытия = Неопределено, НомерЛН = "", ГоловнаяОрганизация = Неопределено) Экспорт
	Если УчетПособийСоциальногоСтрахования.ДействуетПорядокНСПЗ_2022(ДатаНачалаСобытия) Тогда
		Возврат ПричинаНетрудоспособности_2022(КодПричины, ВозрастРодственника, НомерЛН, ГоловнаяОрганизация);
	Иначе
		Возврат ПричинаНетрудоспособности_2021(КодПричины, ВозрастРодственника);
	КонецЕсли;
КонецФункции

// Возвращает причину нетрудоспособности на основании кода причины и возраста родственника.
Функция ПричинаНетрудоспособности_2022(КодПричины, ВозрастРодственника, НомерЛН, ГоловнаяОрганизация)
	
	Если КодПричины = "01" И ЕстьПризнакиПособияНСПЗ(КодПричины, НомерЛН, ГоловнаяОрганизация) Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.Профзаболевание;
		
	ИначеЕсли КодПричины = "02" И ЕстьПризнакиПособияНСПЗ(КодПричины, НомерЛН, ГоловнаяОрганизация) Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
		
	Иначе
		Возврат ПричинаНетрудоспособности_2021(КодПричины, ВозрастРодственника);
		
	КонецЕсли;
	
КонецФункции

// Возвращает Истина если в первичном учете есть признаки того, что указанный ЭЛН является ПЗ/НС.
Функция ЕстьПризнакиПособияНСПЗ(КодПричины, НомерЛН, ГоловнаяОрганизация)
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.НомерЛН = &НомерЛН
	|	И ВходящийЗапросФССДляРасчетаПособия.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ВходящийЗапросФССДляРасчетаПособия.ВидПособия = &ВидПособияНСПЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОбЭЛН.ПричинаНетрудоспособности = &Причина";
	
	Если КодПричины = "01" Тогда
		Причина = Перечисления.ПричиныНетрудоспособности.Профзаболевание;
	Иначе
		Причина = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		УдаляемыйФрагмент = "И ВходящийЗапросФССДляРасчетаПособия.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, УдаляемыйФрагмент, "");
		УдаляемыйФрагмент = "И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, УдаляемыйФрагмент, "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ВидПособияНСПЗ", Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве);
	Запрос.УстановитьПараметр("Причина", Причина);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

// Возвращает причину нетрудоспособности на основании кода причины и возраста родственника.
Функция ПричинаНетрудоспособности_2021(КодПричины, ВозрастРодственника)
	
	Если КодПричины = "01" Или КодПричины = "02" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли КодПричины = "03" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.Карантин;
		
	ИначеЕсли КодПричины = "04" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
		
	ИначеЕсли КодПричины = "05" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
		
	ИначеЕсли КодПричины = "06" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.Протезирование;
		
	ИначеЕсли КодПричины = "07" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.Профзаболевание;
		
	ИначеЕсли КодПричины = "08" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании;
		
	ИначеЕсли КодПричины = "09"
		Или (Не ЗначениеЗаполнено(КодПричины) И ЗначениеЗаполнено(ВозрастРодственника)) Тогда
		
		Если ВозрастРодственника <> Неопределено И ВозрастРодственника >= 15 Тогда
			Возврат Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым;
		Иначе
			Возврат Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		КонецЕсли;
		
	ИначеЕсли КодПричины = "10" Или КодПричины = "11" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли КодПричины = "12" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		
	ИначеЕсли КодПричины = "13" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		
	ИначеЕсли КодПричины = "14" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		
	ИначеЕсли КодПричины = "15" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		
	Иначе
		Возврат Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	КонецЕсли;
	
КонецФункции

Функция СлучайУхода(ДатаНачалаСобытия, КодПричины, ВозрастРодственника, РежимЛечения) Экспорт
	
	Если ВозрастРодственника = Неопределено Тогда
		Возврат Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка();
	КонецЕсли;
	
	Стационар = (РежимЛечения = Перечисления.РежимыЛечения.Стационар
		Или РежимЛечения = Перечисления.РежимыЛечения.ДневнойСтационар);
	
	Если КодПричины = "09"
		Или (Не ЗначениеЗаполнено(КодПричины) И ЗначениеЗаполнено(ВозрастРодственника)) Тогда
		
		Если ВозрастРодственника < 7 Тогда
			Возврат ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно);
		ИначеЕсли ВозрастРодственника >= 7
			И ВозрастРодственника < 8
			И УчетПособийСоциальногоСтрахования.ДействуетПолнаяОплатаПоУходуЗаРебенкомДо8Лет(ДатаНачалаСобытия) Тогда
			Возврат ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетАмбулаторно);
		ИначеЕсли ВозрастРодственника >= 7 И ВозрастРодственника < 15 Тогда
			Возврат ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно);
		Иначе
			Возврат Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли КодПричины = "12" Тогда
		
		Возврат ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно);
		
	ИначеЕсли КодПричины = "13" Тогда
		
		Если ВозрастРодственника < 8
			И УчетПособийСоциальногоСтрахования.ДействуетПолнаяОплатаПоУходуЗаРебенкомДо8Лет(ДатаНачалаСобытия) Тогда
			Возврат ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ИнвалидомДо8ЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ИнвалидомДо8ЛетАмбулаторно);
		Иначе
			Возврат ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно);
		КонецЕсли;
		
	ИначеЕсли КодПричины = "14" Тогда
		
		Если ВозрастРодственника < 8
			И УчетПособийСоциальногоСтрахования.ДействуетПолнаяОплатаПоУходуЗаРебенкомДо8Лет(ДатаНачалаСобытия) Тогда
			Возврат ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриПоствакцинальномОсложненииВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриПоствакцинальномОсложненииАмбулаторно);
		Иначе
			Возврат ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно);
		КонецЕсли;
		
	ИначеЕсли КодПричины = "15" Тогда
		
		Если ВозрастРодственника < 8
			И УчетПособийСоциальногоСтрахования.ДействуетПолнаяОплатаПоУходуЗаРебенкомДо8Лет(ДатаНачалаСобытия) Тогда
			Возврат Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриВИЧ;
		Иначе
			Возврат Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка();
КонецФункции

// Возвращает Истина, если случай нетрудоспособности - (04) Травма на производстве или (07) Профзаболевание.
Функция ЭтоТравмаНаПроизводствеИлиПрофзаболевание(Больничный) Экспорт
	Возврат Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		Или Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание;
КонецФункции

// Возвращает Истина, если это уход за ребенком в возрасте до 8 лет с доплатой до 100% из средств федерального бюджета.
Функция ЭтоПолностьюОплачиваемыйУходЗаРебенкомДо8Лет(Больничный, СлучайУхода) Экспорт
	// Основная, самая быстрая проверка.
	Если Не ЗначениеЗаполнено(СлучайУхода) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Проверка на дату вступления закона в силу.
	Если Не ДействуетПолнаяОплатаПоУходуЗаРебенкомДо8Лет(Больничный.ДатаНачалаСобытия) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Проверка на пересечение с другими льготами (дублирование функции ПроцентОплатыИОграничениеПособия).
	Если ЭтоТравмаНаПроизводствеИлиПрофзаболевание(Больничный)
		Или ПрименятьЛьготыПоРадиацииИлиПодразделениямОсобогоРиска(Больничный)
		Или Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
		Или ИспользуетсяУсловиеИсчисления(Больничный, "47")
		Или ИспользуетсяУсловиеИсчисления(Больничный, "44") Тогда
		Возврат Ложь;
	КонецЕсли;
	// Проверка возраста.
	Возврат СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетАмбулаторно
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетВСтационаре
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.ИнвалидомДо8ЛетАмбулаторно
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.ИнвалидомДо8ЛетВСтационаре
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриПоствакцинальномОсложненииАмбулаторно
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриПоствакцинальномОсложненииВСтационаре
		Или СлучайУхода = Перечисления.СлучаиУходаЗаБольнымиДетьми.До8ЛетПриВИЧ;
КонецФункции

// Возвращает Истина, если в больничном выбрана льгота Чернобыль, Маяк, Семипалатинск или Подразделения особого риска.
Функция ПрименятьЛьготыПоРадиацииИлиПодразделениямОсобогоРиска(Больничный) Экспорт
	Возврат Больничный.ПрименятьЛьготыПриНачисленииПособия
		И Больничный.ФинансированиеФедеральнымБюджетом <> Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов;
КонецФункции

// Возвращает Истина, если в больничном используется указанный код условия исчисления пособия.
Функция ИспользуетсяУсловиеИсчисления(Больничный, КодУсловияИсчисления) Экспорт
	Возврат Больничный.УсловияИсчисленияКод1 = КодУсловияИсчисления
		Или Больничный.УсловияИсчисленияКод2 = КодУсловияИсчисления
		Или Больничный.УсловияИсчисленияКод3 = КодУсловияИсчисления;
КонецФункции

// Возвращает Истина, если в больничном удалось установить указанный код условия исчисления пособия.
Функция УстановитьУсловиеИсчисления(Больничный, КодУсловияИсчисления) Экспорт
	Если ИспользуетсяУсловиеИсчисления(Больничный, КодУсловияИсчисления) Тогда
		Возврат Истина; // Уже установлено.
	КонецЕсли;
	Если Больничный.УсловияИсчисленияКод1 = "" Тогда
		Больничный.УсловияИсчисленияКод1 = КодУсловияИсчисления;
	ИначеЕсли Больничный.УсловияИсчисленияКод2 = "" Тогда
		Больничный.УсловияИсчисленияКод2 = КодУсловияИсчисления;
	ИначеЕсли Больничный.УсловияИсчисленияКод3 = "" Тогда
		Больничный.УсловияИсчисленияКод3 = КодУсловияИсчисления;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина; // Успешно установлено.
КонецФункции

// Удаляет условие исчисления из больничного.
Процедура УдалитьУсловиеИсчисления(Больничный, КодУсловияИсчисления) Экспорт
	
	Если Больничный.УсловияИсчисленияКод1 = КодУсловияИсчисления Тогда
		Больничный.УсловияИсчисленияКод1 = "";
	КонецЕсли;
	Если Больничный.УсловияИсчисленияКод2 = КодУсловияИсчисления Тогда
		Больничный.УсловияИсчисленияКод2 = "";
	КонецЕсли;
	Если Больничный.УсловияИсчисленияКод3 = КодУсловияИсчисления Тогда
		Больничный.УсловияИсчисленияКод3 = "";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список выбора поля ввода случая ухода за больным ребенком.
Процедура ЗаполнитьСписокВыбораСлучаевУходаЗаБольнымРебенком(Больничный, ПолеВвода, ТаблицаВыбораСлучаевУхода) Экспорт
	СписокВыбора = ПолеВвода.СписокВыбора;
	СписокВыбора.Очистить();
	
	// Фильтр по коду причины.
	Если ЗначениеЗаполнено(Больничный.КодПричиныНетрудоспособности) Тогда
		КодыПричины = СтрРазделить(Больничный.КодПричиныНетрудоспособности, Символы.ПС);
	Иначе
		КодыПричины = Перечисления.ПричиныНетрудоспособности.КодыПричины(
			Больничный.ДатаНачалаСобытия,
			Больничный.ПричинаНетрудоспособности);
	КонецЕсли;
	
	// Добавление всех случаев, удовлетворяющих фильтру по коду причины.
	Для Каждого СтрокаТаблицы Из ТаблицаВыбораСлучаевУхода Цикл
		Если КодыПричины.Найти(СтрокаТаблицы.КодПричиныНетрудоспособности) <> Неопределено Тогда
			СписокВыбора.Добавить(СтрокаТаблицы.Значение, СтрокаТаблицы.Представление);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление случая, выбранного в шапке больничного.
	Случай = Больничный.СлучайУходаЗаБольнымРебенком;
	Если ЗначениеЗаполнено(Случай) И СписокВыбора.НайтиПоЗначению(Случай) = Неопределено Тогда
		СтрокаТаблицы = ТаблицаВыбораСлучаевУхода.Найти(Случай, "Значение");
		Представление = ?(СтрокаТаблицы = Неопределено, Строка(Случай), СтрокаТаблицы.Представление);
		СписокВыбора.Добавить(Случай, Новый ФорматированнаяСтрока(Представление, , ЦветаСтиля.ПоясняющийОшибкуТекст));
		ПолеВвода.ЦветТекста          = ЦветаСтиля.ПоясняющийОшибкуТекст;
		ПолеВвода.ЦветТекстаЗаголовка = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Иначе
		ПолеВвода.ЦветТекста          = Новый Цвет;
		ПолеВвода.ЦветТекстаЗаголовка = Новый Цвет;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Больничный.ДатаНачалаСобытия) Тогда
		ПолеВвода.ПодсказкаВвода = НСтр("ru = '<Выберите дату начала нетрудоспособности>';
										|en = '<Select incapacity for work start date>'");
	Иначе
		ПолеВвода.ПодсказкаВвода = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СреднийЗаработокФСС

// Функция дополняет исходные данные и вызывает метод расчета показателя
// среднедневной заработок по правилам расчета ФСС.
//
Функция СреднийДневнойЗаработокФСС(ПараметрыРасчета) Экспорт
	Возврат СреднийЗаработокФСС(ПараметрыРасчета).Общий;
КонецФункции

Функция СреднийЗаработокФСС(ПараметрыРасчета) Экспорт
	ГодыПредельныхВеличин = УчетПособийСоциальногоСтрахованияКлиентСервер.ГодыПредельныхВеличин(ПараметрыРасчета);
	ПараметрыРасчета.ПредельныеВеличиныПоГодам = ПредельнаяВеличинаБазыСтраховыхВзносов(ГодыПредельныхВеличин);
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.СреднийЗаработокФСС(ПараметрыРасчета);
КонецФункции

// Функция дополняет исходные данные и вызывает метод расчета показателя
// минимальный среднедневной заработок по правилам расчета ФСС.
//
Функция МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета) Экспорт

	ПараметрыРасчета.МинимальныйРазмерОплатыТрудаРФ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(ПараметрыРасчета.ДатаНачалаСобытия);
	
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
	
КонецФункции

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработкаПоДокументу

// Создает временную таблицу с реквизитами документов необходимыми для формирования
// структуры параметров расчета среднего заработка ФСС.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - менеджер временных таблиц, куда будет помещена временная таблица ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС
//  МассивСсылок			 - массив ссылок, по которым необходимо получить данные, допустимые типы элементов - "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком".
//
Процедура СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок);
	
КонецПроцедуры

// Функция - Таблицы данных среднего заработка ФСС
//
// Параметры:
//  ИмяДокумента - Строка, имя документа для которого надо получить данные для расчета среднего заработка
//  МассивСсылок - массив, "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком".
//
// Возвращаемое значение:
//  ДанныеДляРасчета - структура, содержит поля с таблицами данных для расчета среднего заработка по МассивСсылок
//					ДанныеОНачислениях, Таблица значений
//					ДанныеОВремени, Таблица значений
//					ДанныеСтрахователей, Таблица значений.
//
Функция ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок);
	
КонецФункции

// Функция - Реквизиты документа для подготовки параметров расчета среднего заработка ФСС.
//
// Возвращаемое значение:
//  РеквизитыДокумента - описание документа в котором рассчитывается средний заработок.
//				Структура, содержащая поля:
//					Ссылка, "ДокументСсылка.БольничныйЛист"
//					Сотрудник, СправочникСсылка.Сотрудник
//					ФизическоеЛицо, СправочникСсылка.ФизическиеЛица
//					ДатаНачалаСобытия, Дата
//					ПрименятьПредельнуюВеличину, Булево
//					ИспользоватьДниБолезниУходаЗаДетьми, Булево
//					УчитыватьДниПриостановленияТД, Булево
//					ПериодРасчетаСреднегоЗаработкаНачало, Дата
//					ПериодРасчетаСреднегоЗаработкаОкончание, Дата
//					ПериодРасчетаСреднегоЗаработкаПервыйГод, Дата
//					ПериодРасчетаСреднегоЗаработкаВторойГод, Дата
//					УчитыватьЗаработокПредыдущихСтрахователей, Булево
//					РасчетПоПравилам2010Года, Булево
//					ДоляНеполногоВремени, Число
//					РайонныйКоэффициентРФ, Число
//					МинимальныйРазмерОплатыТрудаРФ, Число.
//
Функция РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС() Экспорт
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка");
	РеквизитыДокумента.Вставить("ФизическоеЛицо");
	РеквизитыДокумента.Вставить("Сотрудник");
	РеквизитыДокумента.Вставить("ДатаНачалаСобытия");
	РеквизитыДокумента.Вставить("ИсточникСреднего");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаПервыйГод");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаВторойГод");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаНачало");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаОкончание");
	РеквизитыДокумента.Вставить("УчитыватьЗаработокПредыдущихСтрахователей", Ложь);
	РеквизитыДокумента.Вставить("РасчетПоПравилам2010Года", Ложь);
	РеквизитыДокумента.Вставить("ИспользоватьДниБолезниУходаЗаДетьми");
	РеквизитыДокумента.Вставить("УчитыватьДниПриостановленияТД", Ложь);
	РеквизитыДокумента.Вставить("ДнейПриостановленияТДЗаГод1", 0);
	РеквизитыДокумента.Вставить("ДнейПриостановленияТДЗаГод2", 0);
	РеквизитыДокумента.Вставить("МинимальныйРазмерОплатыТрудаРФ");
	РеквизитыДокумента.Вставить("РайонныйКоэффициентРФ", 1);
	РеквизитыДокумента.Вставить("ДоляНеполногоВремени", 1);
	РеквизитыДокумента.Вставить("ПрименятьПредельнуюВеличину");
	РеквизитыДокумента.Вставить("ЭтоДоплатаДоСреднего", Ложь);
	
	Возврат РеквизитыДокумента;
	
КонецФункции

// Функция - Данные документа для расчета среднего заработка ФСС
//
// Параметры:
//  РеквизитыДокумента - см. УчетПособийСоциальногоСтрахованияРасширенный.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС
//  ТаблицыДанныхОСреднем - см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС.
//
// Возвращаемое значение:
//  ДанныеДокумента - структура, содержит поля:
//					ПараметрыРасчета, см. УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу
//					ДанныеРасчетаСреднего, см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС.
//
Функция ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокумента, ТаблицыДокумента) Экспорт
	ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу(РеквизитыДокумента);
	ПараметрыРасчета.ПолучатьДанныеПоГодам               = Истина;
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми = РеквизитыДокумента.ИспользоватьДниБолезниУходаЗаДетьми;
	ПараметрыРасчета.УчитыватьДниПриостановленияТД       = РеквизитыДокумента.УчитыватьДниПриостановленияТД;
	ПараметрыРасчета.РайонныйКоэффициентРФ               = РеквизитыДокумента.РайонныйКоэффициентРФ;
	ПараметрыРасчета.ПорядокРасчета                      = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(РеквизитыДокумента.ДатаНачалаСобытия);
	ПараметрыРасчета.ПрименятьПредельнуюВеличину         = РеквизитыДокумента.ПрименятьПредельнуюВеличину;
	ПараметрыРасчета.МинимальныйРазмерОплатыТрудаРФ      = РеквизитыДокумента.МинимальныйРазмерОплатыТрудаРФ;
	
	ГодыПредельныхВеличин = УчетПособийСоциальногоСтрахованияКлиентСервер.ГодыПредельныхВеличин(ПараметрыРасчета);
	ПараметрыРасчета.ПредельныеВеличиныПоГодам = ПредельнаяВеличинаБазыСтраховыхВзносов(ГодыПредельныхВеличин);
	
	Фильтр = Новый Структура("Ссылка", РеквизитыДокумента.Ссылка);
	
	ПараметрыРасчета.ДанныеНачислений    = ТаблицыДокумента.ДанныеОНачислениях.Скопировать(Фильтр);
	ПараметрыРасчета.ДанныеВремени       = ТаблицыДокумента.ДанныеОВремени.Скопировать(Фильтр);
	ПараметрыРасчета.ДанныеСтрахователей = ТаблицыДокумента.ДанныеСтрахователей.Скопировать(Фильтр);
	
	ВсеПриостановленияТД = ОбщегоНазначенияБЗК.ЗначениеСвойства(ТаблицыДокумента, "ПриостановленияТрудовыхДоговоров");
	Если ВсеПриостановленияТД <> Неопределено Тогда
		ПараметрыРасчета.ПриостановленияТрудовыхДоговоров = ВсеПриостановленияТД.Скопировать(Фильтр);
	КонецЕсли;
	
	СреднийЗаработокСЭДО = ОбщегоНазначенияБЗК.ЗначениеСвойства(ТаблицыДокумента, "СреднийЗаработокСЭДО");
	Если СреднийЗаработокСЭДО <> Неопределено Тогда
		ПараметрыРасчета.СреднийЗаработокСЭДО = СреднийЗаработокСЭДО.Скопировать(Фильтр);
	КонецЕсли;
	
	ДанныеРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС(
		ПараметрыРасчета);
	
	Возврат Новый Структура("ПараметрыРасчета, ДанныеРасчетаСреднего", ПараметрыРасчета, ДанныеРасчетаСреднего);
КонецФункции

// Функция - Параметры расчета среднего дневного заработка ФСС по документу
//
// Параметры:
//  РеквизитыДокумента	 - 	см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.РеквизитыДокументаДляРасчетаСреднегоДневногоЗаработкаФСС
//  ДанныеОНачислениях	 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС
//  ДанныеОВремени		 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС
//  ДанныеСтрахователей	 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС.
//
// Возвращаемое значение:
//  ПараметрыРасчета - структура, см.УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС.
//
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу(Документ) Экспорт
	
	ИменаРеквизитов =
	"ДатаНачалаСобытия,
	|ПериодРасчетаСреднегоЗаработкаНачало,
	|ПериодРасчетаСреднегоЗаработкаОкончание,
	|ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|ПериодРасчетаСреднегоЗаработкаВторойГод,
	|ФизическоеЛицо,
	|УчитыватьЗаработокПредыдущихСтрахователей,
	|ИсточникСреднего,
	|ДнейПриостановленияТДЗаГод1,
	|ДнейПриостановленияТДЗаГод2,
	|ДоляНеполногоВремени,
	|Сотрудник";
	РеквизитыДокумента = ОбщегоНазначенияБЗК.ЗначенияСвойств(Документ, ИменаРеквизитов);
	
	// В базовой реализации отсутствуют реквизиты начала и окончания периода расчета.
	Если РеквизитыДокумента.УчитыватьЗаработокПредыдущихСтрахователей = Неопределено Тогда
		РеквизитыДокумента.УчитыватьЗаработокПредыдущихСтрахователей = Ложь;
	КонецЕсли;
	Если РеквизитыДокумента.ИсточникСреднего = Неопределено Тогда
		РеквизитыДокумента.ИсточникСреднего = Перечисления.ИсточникиСреднегоДляПособий.ПустаяСсылка();
	КонецЕсли;
	Если РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаНачало = Неопределено Тогда
		Если РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаПервыйГод > 1900 Тогда
			РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаНачало = Дата(
				РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1);
		Иначе
			РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаНачало = '00010101';
		КонецЕсли;
	КонецЕсли;
	Если РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаОкончание = Неопределено Тогда
		Если РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаВторойГод > 1900 Тогда
			РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаОкончание = КонецДня(Дата(
				РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31));
		Иначе
			РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаОкончание = '00010101';
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, РеквизитыДокумента);
	
	ПараметрыРасчета.РасчетныеГоды          = ГодыПериодаРасчетаСреднего(РеквизитыДокумента);
	ПараметрыРасчета.ПрименяетсяФЗ_421_2014 = ПрименяетсяФЗ_421_2014(РеквизитыДокумента.ФизическоеЛицо, РеквизитыДокумента.ДатаНачалаСобытия);
	ПараметрыРасчета.ПрименяетсяФЗ_20_2023  = ПрименяетсяФЗ_20_2023(РеквизитыДокумента.ФизическоеЛицо, РеквизитыДокумента.ДатаНачалаСобытия);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ГодыПериодаРасчетаСреднего(Объект) Экспорт
	
	Годы = Новый Массив;
	
	Годы.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
	Годы.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
	
	Возврат Годы;
	
КонецФункции

#КонецОбласти

#Область КонструкторыТаблицДанныхСреднегоЗаработка

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаНачисленийСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаДанных.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ОтработанноеВремяДляСреднегоФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокДанныеСтрахователей
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка", Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.СтандартныеРеквизиты.Регистратор.Тип);
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(4, 0));
	ТаблицаДанных.Колонки.Добавить("Страхователь", ОписаниеТипаСтраховательСреднийЗаработокФСС());
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ОписаниеТипаСтраховательСреднийЗаработокФСС()
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ОписаниеТипаСтраховательСреднийЗаработокФСС();
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПриостановленияТрудовыхДоговоров

Функция ПриостановленияТрудовыхДоговоров(Больничный) Экспорт
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтбора.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОтбора.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОтбора.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	
	Если ЗначениеЗаполнено(Больничный.ПериодРасчетаСреднегоЗаработкаПервыйГод) Тогда
		Период1 = ТаблицаОтбора.Добавить();
		Период1.ГоловнаяОрганизация = Больничный.ГоловнаяОрганизация;
		Период1.ФизическоеЛицо      = Больничный.ФизическоеЛицо;
		Период1.НачалоПериода       = Дата(Больничный.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1);
		Период1.ОкончаниеПериода    = КонецГода(Период1.НачалоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Больничный.ПериодРасчетаСреднегоЗаработкаВторойГод)
		И Больничный.ПериодРасчетаСреднегоЗаработкаВторойГод <> Больничный.ПериодРасчетаСреднегоЗаработкаПервыйГод Тогда
		Период2 = ТаблицаОтбора.Добавить();
		Период2.ГоловнаяОрганизация = Больничный.ГоловнаяОрганизация;
		Период2.ФизическоеЛицо      = Больничный.ФизическоеЛицо;
		Период2.НачалоПериода       = Дата(Больничный.ПериодРасчетаСреднегоЗаработкаВторойГод, 1, 1);
		Период2.ОкончаниеПериода    = КонецГода(Период2.НачалоПериода);
	КонецЕсли;
	
	ОснованиеДокументОснование = Новый Массив;
	ОснованиеДокументОснование.Добавить(Перечисления.НормативныеДокументыОснованийКадровыхПриказов.ТКРФ);
	ОснованиеДокументОснование.Добавить(Перечисления.НормативныеДокументыОснованийКадровыхПриказов.ФЗ79);
	
	Отбор = Новый Структура("ОснованиеДокументОснование", ОснованиеДокументОснование);
	
	ПриостановленияТД = КадровыйУчет.ПриостановленияТрудовыхДоговоров(Истина, ТаблицаОтбора, Отбор);
	
	// Удаление неподходящих.
	ПоискОснованийНПА = Новый Соответствие;
	ПоискОснованийНПА.Вставить(НРег("Контракт531"),     Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР.ФЗ_79_СТ_53_1);
	ПоискОснованийНПА.Вставить(НРег("Мобилизация531"),  Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР.ФЗ_79_СТ_53_1);
	ПоискОснованийНПА.Вставить(НРег("Содействие531"),   Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР.ФЗ_79_СТ_53_1);
	ПоискОснованийНПА.Вставить(НРег("Контракт3517"),    Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР.ТК_351_7);
	ПоискОснованийНПА.Вставить(НРег("Мобилизация3517"), Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР.ТК_351_7);
	ПоискОснованийНПА.Вставить(НРег("Содействие3517"),  Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР.ТК_351_7);
	
	ПриостановленияТД.Колонки.Добавить("ОснованиеНПА", Новый ОписаниеТипов("ПеречислениеСсылка.ОснованияПриостановленияТрудовыхДоговоровСФР"));
	
	ОбратныйИндекс = ПриостановленияТД.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		СтрокаТаблицы = ПриостановленияТД[ОбратныйИндекс];
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеИмяПредопределенныхДанных) Тогда
			Массив = СтрРазделить(СтрокаТаблицы.ОснованиеИмяПредопределенныхДанных, ".");
			ИмяНРег = НРег(Массив[Массив.ВГраница()]);
			СтрокаТаблицы.ОснованиеНПА = ПоискОснованийНПА[ИмяНРег];
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеНПА) Тогда
			ПриостановленияТД.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПриостановленияТД;
КонецФункции

Процедура ПроверитьПриостановленияТрудовыхДоговоров(Больничный, ПриостановленияТД, ИзмененияРазрешены = Истина) Экспорт
	Если Не ИзмененияРазрешены Тогда
		ДнейДоИзменения1 = Больничный.ДнейПриостановленияТДЗаГод1;
		ДнейДоИзменения2 = Больничный.ДнейПриостановленияТДЗаГод2;
	КонецЕсли;
	Больничный.ДнейПриостановленияТДЗаГод1 = 0;
	Больничный.ДнейПриостановленияТДЗаГод2 = 0;
	Предшествующий = Неопределено;
	ПриостановленияТД.Сортировать("ДатаНачала Возр, ДатаОкончания Убыв");
	Для Каждого Период Из ПриостановленияТД Цикл
		Если Не ИзмененияРазрешены Тогда
			КалендарныхДнейДоИзменения = Период.КалендарныхДней;
		КонецЕсли;
		Период.КалендарныхДней = 0;
		Период.Ошибка = Ложь;
		Период.Год = Год(Период.ДатаНачала);
		
		Если Не ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			Период.ТекстОшибки = НСтр("ru = 'Не заполнена дата начала';
										|en = 'Start date  is empty.'");
			Период.Ошибка = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			Период.ТекстОшибки = НСтр("ru = 'Не заполнена дата окончания';
										|en = 'End date  is empty.'");
			Период.Ошибка = Истина;
		ИначеЕсли Период.ДатаНачала > Период.ДатаОкончания Тогда
			Период.ТекстОшибки = НСтр("ru = 'Дата окончания предшествует дате начала';
										|en = 'End date is earlier than start date'");
			Период.Ошибка = Истина;
		Иначе
			Период.КалендарныхДней = ОбщегоНазначенияБЗК.КоличествоДнейВПериоде(
				Период.ДатаНачала,
				Период.ДатаОкончания);
			Если Период.Год <> Год(Период.ДатаОкончания) Тогда
				Период.ТекстОшибки = СтрШаблон(НСтр("ru = 'Период затрагивает два года (год даты начала не совпадает с годом даты окончания)';
													|en = 'The period covers two years (the year of the start date does not match the year of the end date)'"));
				Период.Ошибка = Истина;
			ИначеЕсли Период.Год = Больничный.ПериодРасчетаСреднегоЗаработкаПервыйГод Тогда
				Больничный.ДнейПриостановленияТДЗаГод1 = Больничный.ДнейПриостановленияТДЗаГод1 + Период.КалендарныхДней;
			ИначеЕсли Период.Год = Больничный.ПериодРасчетаСреднегоЗаработкаВторойГод Тогда
				Больничный.ДнейПриостановленияТДЗаГод2 = Больничный.ДнейПриостановленияТДЗаГод2 + Период.КалендарныхДней;
			ИначеЕсли Период.Год < Больничный.ПериодРасчетаСреднегоЗаработкаПервыйГод Тогда
				Период.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Год приостановления трудового договора (%1) предшествует первому году расчета среднего заработка (%2)';
						|en = 'The employment contract suspension year (%1) precedes the first year of average earnings calculation (%2)'"),
					Формат(Период.Год, "ЧГ="),
					Формат(Больничный.ПериодРасчетаСреднегоЗаработкаПервыйГод, "ЧГ="));
				Период.Ошибка = Истина;
			ИначеЕсли Период.Год > Больничный.ПериодРасчетаСреднегоЗаработкаВторойГод Тогда
				Период.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Год приостановления трудового договора (%1) превышает второй год расчета среднего заработка (%2)';
						|en = 'The employment contract suspension year (%1) exceeds the second year of average earnings calculation (%2)'"),
					Формат(Период.Год, "ЧГ="),
					Формат(Больничный.ПериодРасчетаСреднегоЗаработкаВторойГод, "ЧГ="));
				Период.Ошибка = Истина;
			ИначеЕсли Предшествующий <> Неопределено
				И Период.ДатаНачала <= Предшествующий.ДатаОкончания Тогда
				Период.ТекстОшибки = НСтр("ru = 'Пересекается с предшествующим периодом (см. выше)';
											|en = 'Overlaps with the previous period (see above)'");
				Период.Ошибка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ИзмененияРазрешены Тогда
			Если КалендарныхДнейДоИзменения <> Период.КалендарныхДней Тогда
				ТекстОшибки = НСтр("ru = 'Изменено количество календарных дней приостановления трудовых договоров с %3 по %4. Было: %1, Стало: %2.';
									|en = 'Number of calendar days of employment contract suspension was changed from %3 to %4. Previous value: %1, Current value: %2.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, КалендарныхДнейДоИзменения, Период.КалендарныхДней, Период.ДатаНачала, Период.ДатаОкончания);
				Период.ТекстОшибки = ТекстОшибки;
				Период.Ошибка = Истина;
				СообщенияБЗККлиентСервер.СообщитьВФорме(ТекстОшибки, "Объект.ПриостановленияТрудовыхДоговоров");
			КонецЕсли;
		КонецЕсли;
		
		Если Не Период.Ошибка И Не ЗначениеЗаполнено(Период.ОснованиеНПА) Тогда
			Период.ТекстОшибки = НСтр("ru = 'Не заполнено основание приостановки трудового договора';
										|en = 'Employment contract suspension reason is not filled'");
			Период.Ошибка = Истина;
		КонецЕсли;
		
		Предшествующий = Период;
	КонецЦикла;
	
	Если Не ИзмененияРазрешены Тогда
		Если ДнейДоИзменения1 <> Больничный.ДнейПриостановленияТДЗаГод1 Тогда
			ТекстОшибки = НСтр("ru = 'Изменено количество дней приостановления трудовых договоров за первый год расчета среднего заработка. Было: %1, Стало: %2.';
								|en = 'Number of employment contract suspension days for the first year of average earnings calculation was changed. Previous value: %1, Current value: %2.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДнейДоИзменения1, Больничный.ДнейПриостановленияТДЗаГод1);
			СообщенияБЗККлиентСервер.СообщитьВФорме(ТекстОшибки, "Объект.ДнейПриостановленияТДЗаГод1");
		КонецЕсли;
		Если ДнейДоИзменения2 <> Больничный.ДнейПриостановленияТДЗаГод2 Тогда
			ТекстОшибки = НСтр("ru = 'Изменено количество дней приостановления трудовых договоров за второй год расчета среднего заработка. Было: %1, Стало: %2.';
								|en = 'Number of employment contract suspension days for the second year of average earnings calculation was changed. Previous value: %1, Current value: %2.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДнейДоИзменения2, Больничный.ДнейПриостановленияТДЗаГод2);
			СообщенияБЗККлиентСервер.СообщитьВФорме(ТекстОшибки, "Объект.ДнейПриостановленияТДЗаГод2");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	СЭДОФСС.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	ПрямыеВыплатыПособийСоциальногоСтрахования.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	РегистрыСведений.СведенияОбЭЛН.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	РегистрыСведений.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.8.29";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("fc04daaa-52ab-11e8-b5b2-5404a6a6895d");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьХешЭЛН";
	Обработчик.Комментарий     = НСтр("ru = 'Перенос Хэшей ЭЛН в регистр сведений.';
										|en = 'Transfer ESLR hashes to the information register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.8.30";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9ccc5c61-8686-11e8-8a21-5404a6a6895d");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьУполномоченногоВОписях";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение уполномоченного представителя в документах ""Опись заявлений сотрудников на выплату пособий"".';
										|en = 'Fill in authorized representative in the ""List of employee applications for allowance payment"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.9.37";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ea89c346-fd2b-11e8-80c4-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВБольничных";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение признака ""Поставлена на учет в ранние сроки беременности"" в больничных.';
										|en = 'Fill in the ""Registered in early pregnancy"" flag in sick leave records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.9.37";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("d6ffed73-fd2e-11e8-80c4-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВРеестрах";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение признака ""Поставлена на учет в ранние сроки беременности"" в реестрах прямых выплат.';
										|en = 'Fill in the ""Registered in early pregnancy"" flag in direct payments registries.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.11.15";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("b0f041b8-5062-11e9-80ca-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ПеренестиСостоянияЭЛН";
	Обработчик.Комментарий     = НСтр("ru = 'Перенос состояний ЭЛН в регистр сведений.';
										|en = 'Transferring ESLR statuses to the information register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.11.16";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("0cfd1dc7-92a8-11e9-80cd-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ДобавитьРолиЭЛНВПользовательскиеПрофили";
	Обработчик.Комментарий     = НСтр("ru = 'Добавление ролей ЭЛН в непоставляемые (пользовательские) профили групп доступа.';
										|en = 'Adding ESLR roles to non-supplied (user) access group profiles.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.141";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("563af2b1-af41-11eb-80f1-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьГоловнуюОрганизациюВБольничных";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение головной организации в больничных.';
										|en = 'Fill in a parent company in sick leave records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.141";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("3f1a9cdc-b4bf-11eb-80f1-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьГоловнуюОрганизациюИЗафиксироватьПричинуИсправленияВРеестрахЭЛН";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение головной организации и фиксация причины исправления в реестрах ЭЛН.';
										|en = 'Fill in a parent company and record the correction reason in ESLR registries.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ef274df8-0be8-11ec-80fb-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ОчиститьСлучайУходаВБольничных";
	Обработчик.Комментарий     = НСтр("ru = 'Очистка неиспользуемых полей в больничных.';
										|en = 'Clear unused fields in sick leave records.'");
	
КонецПроцедуры

Процедура ЗаполнитьХешЭЛН(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрыЭЛН.УдалитьХеш КАК УдалитьХеш,
	|	РеестрыЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	РеестрыЭЛН.Ссылка КАК Ссылка,
	|	РеестрыЭЛН.Ссылка.Организация КАК Организация,
	|	РеестрыЭЛН.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТВсеРеестры
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК РеестрыЭЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО РеестрыЭЛН.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	РеестрыЭЛН.УдалитьХеш <> """"
	|	И РеестрыЭЛН.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОбЭЛН.Хеш ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрыЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(РеестрыЭЛН.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТМаксимальныеРеестры
	|ИЗ
	|	ВТВсеРеестры КАК РеестрыЭЛН
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрыЭЛН.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Больничные.Ссылка КАК Ссылка,
	|	Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	Больничные.УдалитьХеш КАК УдалитьХеш,
	|	Больничные.Организация КАК Организация,
	|	Больничные.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТВсеБольничные
	|ИЗ
	|	Документ.БольничныйЛист КАК Больничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО Больничные.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	Больничные.УдалитьХеш <> """"
	|	И Больничные.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОбЭЛН.Хеш ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТВсеБольничные.Ссылка) КАК Ссылка,
	|	ВТВсеБольничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ПОМЕСТИТЬ ВТМаксимальныеБольничные
	|ИЗ
	|	ВТВсеБольничные КАК ВТВсеБольничные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВсеБольничные.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеРеестров.НомерЛисткаНетрудоспособности, ДанныеБольничных.НомерЛисткаНетрудоспособности) КАК НомерЛисткаНетрудоспособности,
	|	ЕСТЬNULL(ДанныеРеестров.УдалитьХеш, ДанныеБольничных.УдалитьХеш) КАК УдалитьХеш,
	|	ЕСТЬNULL(ДанныеРеестров.Организация, ДанныеБольничных.Организация) КАК Организация,
	|	ЕСТЬNULL(ДанныеРеестров.ФизическоеЛицо, ДанныеБольничных.ФизическоеЛицо) КАК ФизическоеЛицо
	|ИЗ
	|	ВТМаксимальныеРеестры КАК МаксимальныеРеестры
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТМаксимальныеБольничные КАК МаксимальныеБольничные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеБольничные КАК ДанныеБольничных
	|			ПО МаксимальныеБольничные.Ссылка = ДанныеБольничных.Ссылка
	|		ПО МаксимальныеРеестры.НомерЛисткаНетрудоспособности = МаксимальныеБольничные.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеРеестры КАК ДанныеРеестров
	|		ПО МаксимальныеРеестры.Ссылка = ДанныеРеестров.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.СведенияОбЭЛН.ЗаписатьПервичныеСведения(
			Выборка.НомерЛисткаНетрудоспособности,
			Выборка.УдалитьХеш,
			Неопределено,
			Выборка.Организация,
			Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьУполномоченногоВОписях(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Опись.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий КАК Опись
	|ГДЕ
	|	Опись.УдалитьФИОУполномоченного <> """"
	|	И Опись.ПредставительСФР = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Опись.Дата УБЫВ";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработкаЗавершена = Выборка.Количество() < 1000;
	Пространство = "Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий";
	Поле = "Ссылка";
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Пространство, Поле, Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаполнитьУполномоченногоПоПрямымВыплатамФСС(ДокументОбъект);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
КонецПроцедуры

Процедура ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВБольничных(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Больничный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК Больничный
	|ГДЕ
	|	(Больничный.УдалитьПоставленаНаУчетВРанниеСрокиБеременности = ИСТИНА
	|			ИЛИ Больничный.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам))
	|	И Больничный.ПоставленаНаУчетВРанниеСрокиБеременности = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВРанниеСрокиБеременности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Больничный.Дата УБЫВ";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработкаЗавершена = Выборка.Количество() < 1000;
	Пространство = "Документ.БольничныйЛист";
	Поле = "Ссылка";
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Пространство, Поле, Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ДокументОбъект.УдалитьПоставленаНаУчетВРанниеСрокиБеременности Тогда
			ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
		Иначе
			ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
КонецПроцедуры

Процедура ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВРеестрах(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Сведения.Ссылка КАК Ссылка,
	|	Сведения.Заявление КАК Заявление,
	|	Сведения.Заявление.ВидПособия КАК ЗаявлениеВидПособия
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК Сведения
	|ГДЕ
	|	(Сведения.УдалитьПоставленаНаУчетВРанниеСрокиБеременности = ИСТИНА
	|			ИЛИ Сведения.Заявление.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам)
	|			ИЛИ Сведения.Заявление.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ПособиеВставшимНаУчетВРанниеСроки)
	|			ИЛИ Сведения.Заявление.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки))
	|	И Сведения.ПоставленаНаУчетВРанниеСрокиБеременности = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВРанниеСрокиБеременности.ПустаяСсылка)";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработкаЗавершена = Выборка.Количество() < 1000;
	Пространство = "Документ.БольничныйЛист";
	Поле = "Ссылка";
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Пространство, Поле, Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			Найденные = ДокументОбъект.СведенияНеобходимыеДляНазначенияПособий.НайтиСтроки(Новый Структура("Заявление", Выборка.Заявление));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если Выборка.ЗаявлениеВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам Тогда
					СтрокаТаблицы.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
				Иначе
					СтрокаТаблицы.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
КонецПроцедуры

Процедура ПеренестиСостоянияЭЛН(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	// 1. Перенос состояний реестров.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрЭЛН.Ссылка КАК Ссылка,
	|	РеестрЭЛН.СостояниеРеестра КАК СостояниеРеестра,
	|	РеестрЭЛН.УдалитьСтатусДокумента КАК УдалитьСтатусДокумента
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК РеестрЭЛН
	|ГДЕ
	|	РеестрЭЛН.СостояниеРеестра = ЗНАЧЕНИЕ(Перечисление.СостоянияРеестровФСС.ПустаяСсылка)";
	
	ПараметрыФиксации = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.ФиксироватьОтличия = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Заполнение поля "СостояниеРеестра".
		Если ЗначениеЗаполнено(ДокументОбъект.СостояниеРеестра) Тогда
			Если ДокументОбъект.УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС Тогда
				ДокументОбъект.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ПринятФСС;
			ИначеЕсли ДокументОбъект.УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС Тогда
				ДокументОбъект.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.НеПринятФСС;
			ИначеЕсли ДокументОбъект.УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен Тогда
				ДокументОбъект.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.Подготовлен;
			ИначеЕсли ДокументОбъект.УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе Тогда
				ДокументОбъект.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ВРаботе;
			Иначе
				ДокументОбъект.СостояниеРеестра = ДокументОбъект.СостояниеДокументаИзСостоянийЭЛН();
			КонецЕсли;
			ДокументОбъект.УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПустаяСсылка();
		КонецЕсли;
		
		// Проведение документа если он не помечен на удаление и его состояние заполнено.
		ДокументРежимЗаписи = Неопределено;
		Если Не ДокументОбъект.ПометкаУдаления
			И Не ДокументОбъект.Проведен
			И ДокументОбъект.СостояниеРеестра <> Перечисления.СостоянияРеестровФСС.ВРаботе
			И ДокументОбъект.СостояниеРеестра <> Перечисления.СостоянияРеестровФСС.ПустаяСсылка() Тогда
			ДокументРежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		// Заполнение поля "Состояние" в таблице "ДанныеЭЛН".
		СостояниеЭЛН = СостояниеЭЛНИзСостоянияРеестраЭЛН(ДокументОбъект.СостояниеРеестра);
		Если СостояниеЭЛН <> Неопределено Тогда
			Для Каждого СтрокаТаблицы Из ДокументОбъект.ДанныеЭЛН Цикл
				СтрокаТаблицы.Состояние = СостояниеЭЛН;
			КонецЦикла;
		КонецЕсли;
		
		// Фиксация отличий от больничного.
		Модифицирован = ДокументОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
		
		Если Модифицирован Или ДокументОбъект.Модифицированность() Или ДокументРежимЗаписи <> Неопределено Тогда
			СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, , , ДокументРежимЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Заполнение регистра сведений об ЭЛН.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.Хеш КАК Хеш,
	|	СведенияОбЭЛН.СостояниеОтправки КАК СостояниеОтправки,
	|	СведенияОбЭЛН.ОтправленныйРеестр КАК ОтправленныйРеестр,
	|	СведенияОбЭЛН.Больничный КАК Больничный,
	|	СведенияОбЭЛН.КомментарийКСостоянию КАК КомментарийКСостоянию
	|ПОМЕСТИТЬ ВТ_ЭЛН
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ОтправленныйРеестр = ЗНАЧЕНИЕ(Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка)
	|	И СведенияОбЭЛН.СостояниеОтправки = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВРеестрахЭЛН.ПустаяСсылка)
	|	И СведенияОбЭЛН.Больничный = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|	И СведенияОбЭЛН.Хеш <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.НомерПервичногоЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
	|	БольничныйЛист.НомерЗаменяемогоЛН КАК НомерЗаменяемогоЛН,
	|	БольничныйЛист.Проведен КАК Проведен,
	|	БольничныйЛист.Дата КАК Дата,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ ВТ_Больничные
	|ИЗ
	|	ВТ_ЭЛН КАК ВТ_ЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = БольничныйЛист.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	БольничныйЛист.Проведен
	|	И НЕ БольничныйЛист.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка КАК Ссылка,
	|	ТабличнаяЧастьИзРеестраЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	ТабличнаяЧастьИзРеестраЭЛН.Состояние КАК Состояние,
	|	ТабличнаяЧастьИзРеестраЭЛН.КомментарийКСостоянию КАК КомментарийКСостоянию,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.Дата КАК Дата,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.ДатаПолученияОтветаФСС КАК ДатаПолученияОтветаФСС,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.Проведен КАК Проведен,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.СостояниеРеестра КАК СостояниеРеестра,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьИзРеестраЭЛН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВРеестрахЭЛН.НеПринятФСС)
	|			ТОГДА 1
	|		КОГДА ТабличнаяЧастьИзРеестраЭЛН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеЭЛНЧислом
	|ПОМЕСТИТЬ ВТ_Реестры
	|ИЗ
	|	ВТ_ЭЛН КАК ВТ_ЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ТабличнаяЧастьИзРеестраЭЛН
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ТабличнаяЧастьИзРеестраЭЛН.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.Проведен
	|	И НЕ ТабличнаяЧастьИзРеестраЭЛН.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТСведенияИзРеестра.Ссылка) КАК ПоследнийОтправленныйРеестр
	|ПОМЕСТИТЬ ВТ_ПоследниеОтправленныеРеестры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТСведенияИзРеестра.Дата) КАК ДатаПоследнегоРеестра
	|	ИЗ
	|		ВТ_Реестры КАК ВТСведенияИзРеестра
	|	ГДЕ
	|		ВТСведенияИзРеестра.СостояниеЭЛНЧислом > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности) КАК ПоследниеРеестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реестры КАК ВТСведенияИзРеестра
	|		ПО ПоследниеРеестры.НомерЛисткаНетрудоспособности = ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|			И ПоследниеРеестры.ДатаПоследнегоРеестра = ВТСведенияИзРеестра.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТСведенияИзРеестра.Ссылка) КАК ПоследнийПринятыйРеестр
	|ПОМЕСТИТЬ ВТ_ПоследниеПринятыеРеестры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТСведенияИзРеестра.Дата) КАК ДатаПоследнегоРеестра
	|	ИЗ
	|		ВТ_Реестры КАК ВТСведенияИзРеестра
	|	ГДЕ
	|		ВТСведенияИзРеестра.СостояниеЭЛНЧислом = 2
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности) КАК ПоследниеРеестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реестры КАК ВТСведенияИзРеестра
	|		ПО ПоследниеРеестры.НомерЛисткаНетрудоспособности = ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|			И ПоследниеРеестры.ДатаПоследнегоРеестра = ВТСведенияИзРеестра.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТСведенияИзРеестра.Ссылка) КАК ПоследнийПодготовленныйКОтправкеРеестр
	|ПОМЕСТИТЬ ВТ_ПоследниеПодготовленныеКОтправкеРеестры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТСведенияИзРеестра.Дата) КАК ДатаПоследнегоРеестра
	|	ИЗ
	|		ВТ_Реестры КАК ВТСведенияИзРеестра
	|	ГДЕ
	|		ВТСведенияИзРеестра.СостояниеЭЛНЧислом = 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности) КАК ПоследниеРеестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реестры КАК ВТСведенияИзРеестра
	|		ПО ПоследниеРеестры.НомерЛисткаНетрудоспособности = ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|			И ПоследниеРеестры.ДатаПоследнегоРеестра = ВТСведенияИзРеестра.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТ_Больничные.Ссылка) КАК ПоследнийБольничный
	|ПОМЕСТИТЬ ВТ_ПоследниеПроведенныеБольничные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТ_Больничные.Дата) КАК ДатаПоследнегоБольничного
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|			МАКСИМУМ(ВТ_Больничные.ПериодРегистрации) КАК МаксимальныйПериодРегистрацииБольничного
	|		ИЗ
	|			ВТ_Больничные КАК ВТ_Больничные
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_Больничные.НомерЛисткаНетрудоспособности) КАК МаксимальныеПериодыРегистрацииБольничных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Больничные КАК ВТ_Больничные
	|			ПО МаксимальныеПериодыРегистрацииБольничных.НомерЛисткаНетрудоспособности = ВТ_Больничные.НомерЛисткаНетрудоспособности
	|				И МаксимальныеПериодыРегистрацииБольничных.МаксимальныйПериодРегистрацииБольничного = ВТ_Больничные.ПериодРегистрации
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_Больничные.НомерЛисткаНетрудоспособности) КАК МаксимальныеДатыБольничных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Больничные КАК ВТ_Больничные
	|		ПО МаксимальныеДатыБольничных.НомерЛисткаНетрудоспособности = ВТ_Больничные.НомерЛисткаНетрудоспособности
	|			И МаксимальныеДатыБольничных.ДатаПоследнегоБольничного = ВТ_Больничные.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Больничные.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	ЕСТЬNULL(ВТ_ПоследниеПроведенныеБольничные.ПоследнийБольничный, НЕОПРЕДЕЛЕНО) КАК ПоследнийБольничный,
	|	ЕСТЬNULL(ВТ_ПоследниеПодготовленныеКОтправкеРеестры.ПоследнийПодготовленныйКОтправкеРеестр, НЕОПРЕДЕЛЕНО) КАК ПоследнийПодготовленныйКОтправкеРеестр,
	|	ЕСТЬNULL(ВТ_ПоследниеОтправленныеРеестры.ПоследнийОтправленныйРеестр, НЕОПРЕДЕЛЕНО) КАК ПоследнийОтправленныйРеестр,
	|	ЕСТЬNULL(ВТ_ПоследниеПринятыеРеестры.ПоследнийПринятыйРеестр, НЕОПРЕДЕЛЕНО) КАК ПоследнийПринятыйРеестр
	|ИЗ
	|	ВТ_ЭЛН КАК ВТ_ЭЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеПроведенныеБольничные КАК ВТ_ПоследниеПроведенныеБольничные
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеПроведенныеБольничные.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеПодготовленныеКОтправкеРеестры КАК ВТ_ПоследниеПодготовленныеКОтправкеРеестры
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеПодготовленныеКОтправкеРеестры.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеОтправленныеРеестры КАК ВТ_ПоследниеОтправленныеРеестры
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеОтправленныеРеестры.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеПринятыеРеестры КАК ВТ_ПоследниеПринятыеРеестры
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеПринятыеРеестры.НомерЛисткаНетрудоспособности";
	
	НаборЗаписей = РегистрыСведений.СведенияОбЭЛН.СоздатьНаборЗаписей();
	ИзмерениеОтбора = "НомерЛисткаНетрудоспособности";
	ПространствоБлокировки = "РегистрСведений.СведенияОбЭЛН";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаБольничных = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Больничные").ПолучитьДанные().Выгрузить();
	ТаблицаРеестров = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Реестры").ПолучитьДанные().Выгрузить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ИзмерениеОтбора, Выборка[ИзмерениеОтбора]) Тогда
			ОбработкаЗавершена = Ложь; // Запись заблокирована, требуется повторная обработка.
			Продолжить;
		КонецЕсли;
		НаборЗаписей.Отбор.НомерЛисткаНетрудоспособности.Установить(Выборка.НомерЛисткаНетрудоспособности);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() <> 1 Тогда
			ОбработкаЗавершена = Ложь; // Нештатная ситуация.
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей[0];
		ЗаписьМодифицирована = Ложь;
		
		Если Не ЗначениеЗаполнено(Запись.Больничный)
			И ЗначениеЗаполнено(Выборка.ПоследнийБольничный) Тогда
			ЗаписьМодифицирована = Истина;
			ПоследнийБольничный = ТаблицаБольничных.Найти(Выборка.ПоследнийБольничный, "Ссылка");
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ПоследнийБольничный);
		КонецЕсли;
		
		ПоследнийПринятыйРеестр = НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Выборка.ПоследнийПринятыйРеестр, Выборка.НомерЛисткаНетрудоспособности);
		Если ПоследнийПринятыйРеестр <> Неопределено Тогда
			ЗаписьМодифицирована = Истина;
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОРеестре(Запись, ПоследнийПринятыйРеестр, ПоследнийПринятыйРеестр);
		КонецЕсли;
		
		ПоследнийОтправленныйРеестр = НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Выборка.ПоследнийОтправленныйРеестр, Выборка.НомерЛисткаНетрудоспособности);
		Если ПоследнийОтправленныйРеестр <> Неопределено
			И ПоследнийОтправленныйРеестр <> ПоследнийПринятыйРеестр
			И (ПоследнийПринятыйРеестр = Неопределено
				Или ПоследнийПринятыйРеестр.Дата < ПоследнийОтправленныйРеестр.Дата) Тогда
			ЗаписьМодифицирована = Истина;
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОРеестре(Запись, ПоследнийОтправленныйРеестр, ПоследнийОтправленныйРеестр);
		КонецЕсли;
		
		ПоследнийПодготовленныйКОтправкеРеестр = НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Выборка.ПоследнийПодготовленныйКОтправкеРеестр, Выборка.НомерЛисткаНетрудоспособности);
		Если ПоследнийПодготовленныйКОтправкеРеестр <> Неопределено
			И ПоследнийПодготовленныйКОтправкеРеестр <> ПоследнийОтправленныйРеестр
			И (ПоследнийОтправленныйРеестр = Неопределено
				Или ПоследнийОтправленныйРеестр.Дата < ПоследнийПодготовленныйКОтправкеРеестр.Дата) Тогда
			ЗаписьМодифицирована = Истина;
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОРеестре(Запись, ПоследнийПодготовленныйКОтправкеРеестр, ПоследнийПодготовленныйКОтправкеРеестр);
		КонецЕсли;
		
		Если ЗаписьМодифицирована Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Истина, Ложь);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

Функция НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Ссылка, НомерЛисткаНетрудоспособности)
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Найденные = ТаблицаРеестров.НайтиСтроки(Новый Структура("НомерЛисткаНетрудоспособности, Ссылка", НомерЛисткаНетрудоспособности, Ссылка));
	Если Найденные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Найденные[0];
КонецФункции

Процедура ДобавитьРолиЭЛНВПользовательскиеПрофили(ПараметрыОбновления = Неопределено) Экспорт
	Контекст = УправлениеДоступомБЗК.КонтекстДобавляемыхРолей("УчетПособийСоциальногоСтрахования.ДобавитьРолиЭЛНВПользовательскиеПрофили");
	
	// ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеНачисленнойЗарплаты", "ЧтениеЭЛН");
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеНачисленнойЗарплаты", "ЧтениеРеестровЭЛН");
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеНачисленнойЗарплаты", "ДобавлениеИзменениеЭЛН");
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеНачисленнойЗарплаты", "ДобавлениеИзменениеРеестровЭЛН");
	// Конец ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования", "ЧтениеЭЛН");
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования", "ДобавлениеИзменениеЭЛН");
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
		УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеДокументовЗарплатаКадры", "ЧтениеЭЛН");
		УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеДокументовЗарплатаКадры", "ДобавлениеИзменениеЭЛН");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования") Тогда
		УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеБольничныхЛистов", "ЧтениеЭЛН");
		УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеБольничныхЛистов", "ДобавлениеИзменениеЭЛН");
	КонецЕсли;
	
	УправлениеДоступомБЗК.ДобавитьРолиВНепоставляемыеПрофили(Контекст);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьГоловнуюОрганизациюВБольничных(ПараметрыОбновления = Неопределено) Экспорт
	ЗаполнитьГоловнуюОрганизациюВДокументах(Метаданные.Документы.БольничныйЛист, ПараметрыОбновления);
КонецПроцедуры

Процедура ЗаполнитьГоловнуюОрганизациюВДокументах(МетаданныеДокумента, ПараметрыОбновления = Неопределено)
	ОбработкаЗавершена   = Истина;
	ОбработчикОтложенный = (ПараметрыОбновления <> Неопределено);
	
	ПолеБлокировки    = "Ссылка";
	ТаблицаБлокировки = МетаданныеДокумента.ПолноеИмя();
	
	РазмерПорции = ?(ОбработчикОтложенный, 1000, 0);
	ПустаяСсылкаОрганизации = Справочники.Организации.ПустаяСсылка();
	
	Отбор = Новый ОтборКомпоновкиДанных;
	ЗапросыБЗК.ДобавитьОтбор(Отбор, "ГоловнаяОрганизация", "=", ПустаяСсылкаОрганизации);
	ЗапросыБЗК.ДобавитьОтбор(Отбор, "Организация",        "<>", ПустаяСсылкаОрганизации);
	
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	НастройкиЗапроса.Отбор      = Отбор;
	НастройкиЗапроса.Порядок    = "Дата УБЫВ, Проведен УБЫВ, Ссылка УБЫВ";
	НастройкиЗапроса.Количество = РазмерПорции;
	
	Запрос = ЗапросыБЗК.ЗапросКТаблице(ТаблицаБлокировки, ПолеБлокировки, НастройкиЗапроса);
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(ПолеБлокировки);
	
	Если ОбработчикОтложенный И МассивСсылок.Количество() = РазмерПорции Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ОбработчикОтложенный Тогда
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления,
					ТаблицаБлокировки,
					ПолеБлокировки,
					Ссылка) Тогда
				ОбработкаЗавершена = Ложь; // Объект заблокирован, требуется повторная обработка.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ГоловнаяОрганизацияДоИзменения = ДокументОбъект.ГоловнаяОрганизация;
		ДокументОбъект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ДокументОбъект.Организация);
		ОбъектИзменен = (ГоловнаяОрганизацияДоИзменения <> ДокументОбъект.ГоловнаяОрганизация);
		Если ОбъектИзменен Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		КонецЕсли;
		
		Если ОбработчикОтложенный Тогда
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбработчикОтложенный Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

// Заполнение головной организации и фиксация причины исправления в реестрах ЭЛН.
Процедура ЗаполнитьГоловнуюОрганизациюИЗафиксироватьПричинуИсправленияВРеестрахЭЛН(ПараметрыОбновления = Неопределено) Экспорт
	МетаданныеДокумента = Метаданные.Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем;
	
	ОбработкаЗавершена   = Истина;
	ОбработчикОтложенный = (ПараметрыОбновления <> Неопределено);
	
	ПолеБлокировки    = "Ссылка";
	ТаблицаБлокировки = МетаданныеДокумента.ПолноеИмя();
	
	РазмерПорции = ?(ОбработчикОтложенный, 1000, 0);
	ПустаяСсылкаОрганизации = Справочники.Организации.ПустаяСсылка();
	
	Отбор = Новый ОтборКомпоновкиДанных;
	ЗапросыБЗК.ДобавитьОтбор(Отбор, "ГоловнаяОрганизация", "=", ПустаяСсылкаОрганизации);
	
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	НастройкиЗапроса.Отбор      = Отбор;
	НастройкиЗапроса.Порядок    = "Дата УБЫВ, Проведен УБЫВ, Ссылка УБЫВ";
	НастройкиЗапроса.Количество = РазмерПорции;
	
	Запрос = ЗапросыБЗК.ЗапросКТаблице(ТаблицаБлокировки, ПолеБлокировки, НастройкиЗапроса);
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(ПолеБлокировки);
	
	Если ОбработчикОтложенный И МассивСсылок.Количество() = РазмерПорции Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ОбработчикОтложенный Тогда
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления,
					ТаблицаБлокировки,
					ПолеБлокировки,
					Ссылка) Тогда
				ОбработкаЗавершена = Ложь; // Объект заблокирован, требуется повторная обработка.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектИзменен = Ложь;
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ГоловнаяОрганизацияДоИзменения = ДокументОбъект.ГоловнаяОрганизация;
			ДокументОбъект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ДокументОбъект.Организация);
			Если ГоловнаяОрганизацияДоИзменения <> ДокументОбъект.ГоловнаяОрганизация Тогда
				ОбъектИзменен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ДокументОбъект.ДанныеЭЛН Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.КодПричиныИсправления)
				И ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитТаблицы(
					ДокументОбъект,
					"ДанныеЭЛН",
					СтрокаТаблицы,
					"КодПричиныИсправления") Тогда
				ОбъектИзменен = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ОписаниеПричиныИсправления)
				И ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитТаблицы(
					ДокументОбъект,
					"ДанныеЭЛН",
					СтрокаТаблицы,
					"ОписаниеПричиныИсправления") Тогда
				ОбъектИзменен = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектИзменен Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		КонецЕсли;
		
		Если ОбработчикОтложенный Тогда
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбработчикОтложенный Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
	
КонецПроцедуры

// Исправляет несоответствия требованию "Случай ухода может быть заполнен только в больничных по уходу".
// Это важно в связи с тем, что во многих функциях причина нетрудоспособности теперь не проверяется.
Процедура ОчиститьСлучайУходаВБольничных(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена   = Истина;
	ОбработчикОтложенный = (ПараметрыОбновления <> Неопределено);
	
	ТаблицаБлокировки = Метаданные.Документы.БольничныйЛист.ПолноеИмя();
	ПолеБлокировки    = "Ссылка";
	РазмерПорции      = ?(ОбработчикОтложенный, 1000, 0);
	
	Отбор = Новый ОтборКомпоновкиДанных;
	ЗапросыБЗК.ДобавитьОтбор(Отбор, "СлучайУходаЗаБольнымРебенком", "<>", Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка());
	ЗапросыБЗК.ДобавитьОтбор(Отбор, "ПричинаНетрудоспособности",    "<>", Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
	
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	НастройкиЗапроса.Отбор      = Отбор;
	НастройкиЗапроса.Порядок    = "Дата УБЫВ, Проведен УБЫВ, Ссылка УБЫВ";
	НастройкиЗапроса.Количество = РазмерПорции;
	
	Запрос = ЗапросыБЗК.ЗапросКТаблице(ТаблицаБлокировки, ПолеБлокировки, НастройкиЗапроса);
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(ПолеБлокировки);
	
	Если ОбработчикОтложенный И МассивСсылок.Количество() = РазмерПорции Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ОбработчикОтложенный Тогда
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления,
					ТаблицаБлокировки,
					ПолеБлокировки,
					Ссылка) Тогда
				ОбработкаЗавершена = Ложь; // Объект заблокирован, требуется повторная обработка.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Документы.БольничныйЛист.ОчиститьСлучайУходаПриНеобходимости(ДокументОбъект);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ОбработчикОтложенный Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РеестрЭЛН

// Возвращает состояние ЭЛН.
Функция СостояниеЭЛНИзСостоянияРеестраЭЛН(СостояниеРеестраЭЛН) Экспорт
	
	Если СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровФСС.ПринятФСС Тогда
		Возврат Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС;
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровФСС.НеПринятФСС Тогда
		Возврат Перечисления.СостоянияЭЛНВРеестрахЭЛН.НеПринятФСС;
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровФСС.Подготовлен Тогда
		Возврат Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПустаяСсылка();
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровФСС.ВРаботе Тогда
		Возврат Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПустаяСсылка();
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровФСС.ЧастичноПринятФСС Тогда
		Возврат Неопределено;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	СписокОбъектов.Добавить(Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий);
	СписокОбъектов.Добавить(Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	СписокОбъектов.Добавить(Документы.ВозмещениеБольничныхВЧастиФБ);
	СписокОбъектов.Добавить(Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов);
	СписокОбъектов.Добавить(Документы.ЗаявлениеВФССОВозмещенииРасходовНаПогребение);
	СписокОбъектов.Добавить(Документы.ЗаявлениеСотрудникаНаВыплатуПособия);
	СписокОбъектов.Добавить(Документы.ОписьЗаявленийСотрудниковНаВыплатуПособий);
	СписокОбъектов.Добавить(Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий);
	СписокОбъектов.Добавить(Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФСС.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональностьДокументов

Функция ЗначенияСвойствОбъекта(Объект, ОписаниеРеквизитов)
	Результат = ОбщегоНазначенияБЗК.ЗначенияСвойств(Объект, ИменаРеквизитов(ОписаниеРеквизитов));
	ВыгрузитьВТаблицыЗначений(Результат, ОписаниеРеквизитов);
	Возврат Результат;
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, ОписаниеРеквизитов)
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов(ОписаниеРеквизитов));
	ВыгрузитьВТаблицыЗначений(Результат, ОписаниеРеквизитов);
	Возврат Результат;
КонецФункции

Функция ИменаРеквизитов(ОписаниеРеквизитов)
	Если ТипЗнч(ОписаниеРеквизитов) = Тип("Структура") Тогда
		Возврат ОписаниеРеквизитов.ИменаРеквизитовШапки + "," + ОписаниеРеквизитов.ИменаТаблиц;
	Иначе
		Возврат ОписаниеРеквизитов;
	КонецЕсли;
КонецФункции

Процедура ВыгрузитьВТаблицыЗначений(Структура, ОписаниеРеквизитов)
	Если ТипЗнч(ОписаниеРеквизитов) = Тип("Структура") Тогда
		Для Каждого ИмяТаблицы Из СтрРазделить(ОписаниеРеквизитов.ИменаТаблиц, ", ", Ложь) Цикл
			Структура[ИмяТаблицы] = Структура[ИмяТаблицы].Выгрузить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ДнейОплатыЗаСлучай.
// Возвращает максимальное количество оплачиваемых дней нетрудоспособности для указанной причины.
//   См. части 2 и 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
//
// Параметры:
//   ПричинаНетрудоспособности    - ПеречислениеСсылка.ПричиныНетрудоспособности
//   СлучайУходаЗаБольнымРебенком - ПеречислениеСсылка.СлучаиУходаЗаБольнымиДетьми
//
// Возвращаемое значение:
//   Число, Неопределено
//
Функция ДнейОплатыЗаСлучайНетрудоспособности(ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком) Экспорт
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
		Возврат 24; // Часть 2 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		Возврат 7; // Пункт 6 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.До7ПолныхЛетВСтационаре
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
		Возврат 15; // Пункт 2 части 5 статьи 6 Федерального закона от 29.12.2006 № 255-ФЗ (ред. от 25.02.2022).
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти
