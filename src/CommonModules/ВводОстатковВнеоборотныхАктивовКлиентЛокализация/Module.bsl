////////////////////////////////////////////////////////////////////////////////
// Процедуры, используемые для локализации документа "Ввод остатков внеоборотных активов".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ФормаОсновныеСредства

// Параметры:
// 	Команда - КомандаФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаОсновныеСредства_ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Команда.Имя = Элементы.ОСЗаполнитьПоДаннымОУ.ИмяКоманды Тогда
		ЗаполнитьПоДаннымОУ(Форма, Объект.ОС, Команда.Имя, ТребуетсяВызовСервера, ПродолжитьВыполнениеКоманды);
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ТребуетсяВызовСервера,
			ДополнительныеПараметры);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормаНематериальныеАктивы

// Параметры:
// 	Команда - КомандаФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаНематериальныеАктивы_ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Команда.Имя = Элементы.НМАЗаполнитьПоДаннымОУ.ИмяКоманды Тогда
		ЗаполнитьПоДаннымОУ(Форма, Объект.НМА, Команда.Имя, ТребуетсяВызовСервера, ПродолжитьВыполнениеКоманды);
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ТребуетсяВызовСервера,
			ДополнительныеПараметры);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПереданныеВАрендуОсновныеСредства

// Параметры:
// 	Команда - КомандаФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаПереданныеВАрендуОсновныеСредства_ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Команда.Имя = Элементы.ОСЗаполнитьПоДаннымОУ.ИмяКоманды Тогда
		ЗаполнитьПоДаннымОУ(Форма, Объект.ОС, Команда.Имя, ТребуетсяВызовСервера, ПродолжитьВыполнениеКоманды);
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ТребуетсяВызовСервера,
			ДополнительныеПараметры);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормаАрендованныеОсновныеСредства

// Параметры:
// 	Команда - КомандаФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаАрендованныеОсновныеСредства_ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Команда.Имя = Элементы.АрендованныеОСЗаполнитьПоДаннымОУ.ИмяКоманды Тогда
		ЗаполнитьПоДаннымОУ(Форма, Объект.АрендованныеОС, Команда.Имя, ТребуетсяВызовСервера, ПродолжитьВыполнениеКоманды);
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ТребуетсяВызовСервера,
			ДополнительныеПараметры);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПредметыЛизингаЗаБалансом

// Параметры:
// 	Команда - КомандаФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаПредметыЛизингаЗаБалансом_ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Команда.Имя = Элементы.АрендованныеОСЗаполнитьПоДаннымОУ.ИмяКоманды Тогда
		ЗаполнитьПоДаннымОУ(Форма, Объект.АрендованныеОС, Команда.Имя, ТребуетсяВызовСервера, ПродолжитьВыполнениеКоманды);
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ТребуетсяВызовСервера,
			ДополнительныеПараметры);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормаРасчетыПоДоговорамАренды

// Параметры:
// 	Команда - КомандаФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаРасчетыПоДоговорамАренды_ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Команда.Имя = Элементы.РасчетыПоДоговорамАрендыЗаполнитьПоДаннымОУ.ИмяКоманды Тогда
		ЗаполнитьПоДаннымОУ(Форма, Объект.РасчетыПоДоговорамАренды, Команда.Имя, ТребуетсяВызовСервера, ПродолжитьВыполнениеКоманды);
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ТребуетсяВызовСервера,
			ДополнительныеПараметры);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормаРедактированияСтрокиОС

// Параметры:
// 	Элемент - ПолеФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаРедактированияСтрокиОС_ПриИзмененииРеквизита(Элемент, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	
	//++ Локализация

	Элементы = Форма.Элементы;
	
	Если Элемент.Имя = Элементы.ПрименениеЦелевогоФинансирования.Имя
		ИЛИ Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСИзДокумента.Имя 
		ИЛИ Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСРаспределяется.Имя 
		ИЛИ Элемент.Имя = Элементы.НачислятьАмортизациюНУ.Имя  
		ИЛИ Элемент.Имя = Элементы.НачислятьИзносБУ.Имя  
		ИЛИ Элемент.Имя = Элементы.АмортизационнаяГруппа.Имя  
		ИЛИ Элемент.Имя = Элементы.НедвижимоеИмущество.Имя Тогда	
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент.Имя = Элементы.ВключитьАмортизационнуюПремиюВСоставРасходов.Имя Тогда
	
		ТребуетсяВызовСервера = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
	
	ИначеЕсли Элемент.Имя = Элементы.ТекущаяСтоимостьНУ.Имя
		ИЛИ Элемент.Имя = Элементы.ТекущаяСтоимостьПР.Имя	
		ИЛИ Элемент.Имя = Элементы.ТекущаяСтоимостьБУЦФ.Имя
		ИЛИ Элемент.Имя = Элементы.ТекущаяСтоимостьПРЦФ.Имя
		ИЛИ Элемент.Имя = Элементы.ПервоначальнаяСтоимостьНУ.Имя
		ИЛИ Элемент.Имя = Элементы.ПервоначальнаяСтоимостьПР.Имя
		ИЛИ Элемент.Имя = Элементы.НакопленнаяАмортизацияНУ.Имя
		ИЛИ Элемент.Имя = Элементы.НакопленнаяАмортизацияПР.Имя
		ИЛИ Элемент.Имя = Элементы.НакопленнаяАмортизацияБУЦФ.Имя
		ИЛИ Элемент.Имя = Элементы.НакопленнаяАмортизацияПРЦФ.Имя Тогда	
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_ПересчитатьЗависимыеСуммы");
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент.Имя = Элементы.ПорядокУчетаНУ.Имя Тогда
		
		ФормаРедактированияСтрокиОС_ПорядокУчетаНУПриИзменении(Форма, ДополнительныеПараметры);
		
	ИначеЕсли Элемент.Имя = Элементы.СтатьяРасходовАмортизационнойПремии.Имя
		ИЛИ Элемент.Имя = Элементы.СтатьяРасходовНалог.Имя
		ИЛИ Элемент.Имя = Элементы.СтатьяДоходовЦФ.Имя Тогда
		
		ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(Форма, Элемент);
		
	ИначеЕсли Элемент.Имя = Элементы.СтатьяРасходовНУ.Имя Тогда
		
		ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(Форма, Элемент);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент = Элементы.ПередаватьРасходыВДругуюОрганизацию Тогда

		ФормаРедактированияСтрокиОС_ПередаватьРасходыВДругуюОрганизациюПриИзменении(Форма, ДополнительныеПараметры);
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует обработка события для элемента ""%1""';
										|en = 'No processing of the event for the ""%1"" item'"), Элемент.Имя);
	КонецЕсли; 
	
	//-- Локализация
	
	ОбщегоНазначенияУТКлиент.ПродолжитьИзменениеРеквизита(
		Форма, 
		Элемент.Имя, 
		ТребуетсяВызовСервера,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиОС_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элемент = Элементы.СтатьяРасходовБУ
		ИЛИ Элемент = Элементы.СтатьяРасходовНУ
		ИЛИ Элемент = Элементы.СтатьяРасходовАмортизационнойПремии
		ИЛИ Элемент = Элементы.СтатьяРасходовНалог Тогда
		
		ДоходыИРасходыКлиент.НачалоВыбораСтатьи(Форма, Элемент, СтандартнаяОбработка);
		
	ИначеЕсли Элемент = Элементы.АналитикаРасходовБУ
		ИЛИ Элемент = Элементы.АналитикаРасходовНУ
		ИЛИ Элемент = Элементы.АналитикаРасходовАмортизационнойПремии
		ИЛИ Элемент = Элементы.АналитикаРасходовНалог Тогда
		
		ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(Форма, Элемент, СтандартнаяОбработка);
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует обработка события ""НачалоВыбора"" для элемента ""%1""';
										|en = 'No processing of the event ""НачалоВыбора"" for the item ""%1""'"), Элемент.Имя);
	КонецЕсли;
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиОС_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Форма) Экспорт

	//++ Локализация
	Элементы = Форма.Элементы;
	Если Элемент = Элементы.АналитикаРасходовБУ
		ИЛИ Элемент = Элементы.АналитикаРасходовНУ
		ИЛИ Элемент = Элементы.АналитикаРасходовАмортизационнойПремии
		ИЛИ Элемент = Элементы.АналитикаРасходовНалог Тогда
		
		ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли; 
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиОС_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Форма) Экспорт

	//++ Локализация
	Элементы = Форма.Элементы;
	Если Элемент = Элементы.АналитикаРасходовБУ
		ИЛИ Элемент = Элементы.АналитикаРасходовНУ
		ИЛИ Элемент = Элементы.АналитикаРасходовАмортизационнойПремии
		ИЛИ Элемент = Элементы.АналитикаРасходовНалог Тогда
		
		ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли; 
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Функция ФормаРедактированияСтрокиОС_ТребуетсяВызовСервераДляНастройкиЭлементовФормы(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
			И Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("АмортизационнаяГруппа")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НедвижимоеИмущество") Тогда
		Возврат Истина;
	КонецЕсли; 
	
	//-- Локализация
	
	Возврат Ложь;

КонецФункции

Процедура ФормаРедактированияСтрокиОС_ПриИзмененииСрокаИспользования(Форма, ИмяРеквизита, ОбновитьЕслиСовпадают, СписокРеквизитов) Экспорт

	//++ Локализация
	
	Если ИмяРеквизита = "СрокИспользованияБУ"
		И Форма.ОтражатьВУпрУчете
		И (Форма.СрокИспользованияУУ = 0
			ИЛИ ОбновитьЕслиСовпадают 
				И Форма.ЗначенияРеквизитовДоИзменения.СрокИспользованияБУ = Форма.ЗначенияРеквизитовДоИзменения.СрокИспользованияУУ) Тогда
		
		Форма.СрокИспользованияУУ = Форма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияУУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита = "СрокИспользованияБУ"
		И Форма.ОтражатьВРеглУчете
		И (Форма.СрокИспользованияНУ = 0
			ИЛИ ОбновитьЕслиСовпадают
				И Форма.ЗначенияРеквизитовДоИзменения.СрокИспользованияБУ = Форма.ЗначенияРеквизитовДоИзменения.СрокИспользованияНУ) Тогда
		
		Форма.СрокИспользованияНУ = Форма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияНУ";
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиОС_ТекущаяСтоимостьБУПриИзменении(Форма) Экспорт
	
	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ТекущаяСтоимостьНУ.Видимость Тогда
		Если Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
			Форма.ТекущаяСтоимостьНУ = 0;
		ИначеЕсли Форма.ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьБУ = Форма.ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьНУ Тогда
			Форма.ТекущаяСтоимостьНУ = Форма.ТекущаяСтоимостьБУ;
		КонецЕсли;
	КонецЕсли;
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиОС_НакопленнаяАмортизацияБУПриИзменении(Форма) Экспорт
	
	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элементы.НакопленнаяАмортизацияНУ.Видимость 
		И Форма.ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияБУ = Форма.ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияНУ 
		И Форма.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ")
		И Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда
		
		Форма.НакопленнаяАмортизацияНУ = Форма.НакопленнаяАмортизацияБУ;
	КонецЕсли; 
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиОС_ПервоначальнаяСтоимостьБУПриИзменении(Форма) Экспорт
	
	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ПервоначальнаяСтоимостьНУ.Видимость 
		И Форма.ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = Форма.ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияНУ Тогда
		Форма.ПервоначальнаяСтоимостьНУ = Форма.ПервоначальнаяСтоимостьБУ;
	КонецЕсли; 
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

#КонецОбласти

#Область ФормаРедактированияСтрокиНМА

// Параметры:
// 	Элемент - ПолеФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ФормаРедактированияСтрокиНМА_ПриИзмененииРеквизита(Элемент, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	
	//++ Локализация
	
	Элементы = Форма.Элементы;

	Если Элемент.Имя = Элементы.ПрименениеЦелевогоФинансирования.Имя
		ИЛИ Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСИзДокумента.Имя 
		ИЛИ Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСРаспределяется.Имя 
		ИЛИ Элемент.Имя = Элементы.СрокИспользованияНУДо2009.Имя
		ИЛИ Элемент.Имя = Элементы.МетодНачисленияАмортизацииНУ.Имя
		ИЛИ Элемент.Имя = Элементы.ПередаватьРасходыВДругуюОрганизацию.Имя Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент.Имя = Элементы.ПорядокУчетаНУ.Имя Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_ПересчитатьЗависимыеСуммы");
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент.Имя = Элементы.ТекущаяСтоимостьНУ.Имя
		ИЛИ Элемент.Имя = Элементы.ТекущаяСтоимостьПР.Имя 
		ИЛИ Элемент.Имя = Элементы.ТекущаяСтоимостьБУЦФ.Имя	
		ИЛИ Элемент.Имя = Элементы.ПервоначальнаяСтоимостьНУ.Имя
		ИЛИ Элемент.Имя = Элементы.НакопленнаяАмортизацияНУ.Имя
		ИЛИ Элемент.Имя = Элементы.НакопленнаяАмортизацияПР.Имя
		ИЛИ Элемент.Имя = Элементы.НакопленнаяАмортизацияБУЦФ.Имя Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_ПересчитатьЗависимыеСуммы");
		
	ИначеЕсли Элемент.Имя = Элементы.СрокИспользованияНУ.Имя Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыДействия = Новый Структура("ИмяРеквизита,ОбновитьЕслиСовпадают", Элемент.Имя, Ложь);
		ДополнительныеПараметры.Вставить("Выполнить_ПриИзмененииСрокаИспользования", ПараметрыДействия);
		
	ИначеЕсли Элемент.Имя = Элементы.ДатаПринятияКУчетуБУ.Имя Тогда	
		
		ФормаРедактированияСтрокиНМА_ДатаПринятияКУчетуБУПриИзменении(Форма, ДополнительныеПараметры);
		
	ИначеЕсли Элемент.Имя = Элементы.РезервПереоценкиСтоимостиРеглСумма.Имя Тогда	
		
		ФормаРедактированияСтрокиНМА_РезервПереоценкиСтоимостиРеглСуммаПриИзменении(Форма);
		
	ИначеЕсли Элемент = Элементы.СтатьяРасходовНУ
		ИЛИ Элемент = Элементы.СтатьяДоходов Тогда	
		
		ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(Форма, Элемент);
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует обработка события для элемента ""%1""';
										|en = 'No processing of the event for the ""%1"" item'"), Элемент.Имя);
	КонецЕсли; 
	
	//-- Локализация
	
	ОбщегоНазначенияУТКлиент.ПродолжитьИзменениеРеквизита(
		Форма, 
		Элемент.Имя, 
		ТребуетсяВызовСервера,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элемент = Элементы.СтатьяРасходовБУ
		ИЛИ Элемент = Элементы.СтатьяРасходовНУ Тогда
		
		ДоходыИРасходыКлиент.НачалоВыбораСтатьи(Форма, Элемент, СтандартнаяОбработка);
		
	ИначеЕсли Элемент = Элементы.АналитикаРасходовБУ
		ИЛИ Элемент = Элементы.АналитикаРасходовНУ Тогда
		
		ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(Форма, Элемент, СтандартнаяОбработка);
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует обработка события ""НачалоВыбора"" для элемента ""%1""';
										|en = 'No processing of the event ""НачалоВыбора"" for the item ""%1""'"), Элемент.Имя);
	КонецЕсли;
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Форма) Экспорт

	//++ Локализация
	Элементы = Форма.Элементы;
	Если Элемент = Элементы.АналитикаРасходовБУ
		ИЛИ Элемент = Элементы.АналитикаРасходовНУ Тогда
		ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли; 
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Форма) Экспорт

	//++ Локализация
	Элементы = Форма.Элементы;
	Если Элемент = Элементы.АналитикаРасходовБУ
		ИЛИ Элемент = Элементы.АналитикаРасходовНУ Тогда
		ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли; 
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_ПриИзмененииСрокаИспользования(Форма, ИмяРеквизита, ОбновитьЕслиСовпадают, СписокРеквизитов) Экспорт

	//++ Локализация
	
	Если ИмяРеквизита = "СрокИспользованияБУ"
		И Форма.ОтражатьВРеглУчете
		И (Форма.СрокИспользованияНУ = 0
			ИЛИ ОбновитьЕслиСовпадают
				И Форма.ЗначенияРеквизитовДоИзменения.СрокИспользованияБУ = Форма.ЗначенияРеквизитовДоИзменения.СрокИспользованияНУ) Тогда
		
		Форма.СрокИспользованияНУ = Форма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияНУ";
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_ТекущаяСтоимостьБУПриИзменении(Форма) Экспорт
	
	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	СуммаНУ = Форма.ТекущаяСтоимостьБУ - Форма.ТекущаяСтоимостьПР - Форма.ТекущаяСтоимостьВР;
	Если СуммаНУ < 0 Тогда
		Форма.ТекущаяСтоимостьНУ = 0;
		Форма.ТекущаяСтоимостьВР = Форма.ТекущаяСтоимостьБУ - Форма.ТекущаяСтоимостьНУ - Форма.ТекущаяСтоимостьПР;
	Иначе
		Форма.ТекущаяСтоимостьНУ = СуммаНУ;
	КонецЕсли;
	
	Если Элементы.ТекущаяСтоимостьНУ.Видимость 
		И Форма.ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьБУ = Форма.ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьНУ Тогда
		Форма.ТекущаяСтоимостьНУ = Форма.ТекущаяСтоимостьБУ;
	КонецЕсли; 
	
	//-- Локализация

	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_НакопленнаяАмортизацияБУПриИзменении(Форма) Экспорт
	
	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элементы.НакопленнаяАмортизацияНУ.Видимость 
		И Форма.ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияБУ = Форма.ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияНУ
		И Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда
		Форма.НакопленнаяАмортизацияНУ = Форма.НакопленнаяАмортизацияБУ;
	КонецЕсли; 
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_ПервоначальнаяСтоимостьБУПриИзменении(Форма) Экспорт
	
	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ПервоначальнаяСтоимостьНУ.Видимость 
		И Форма.ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = Форма.ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьНУ Тогда
		Форма.ПервоначальнаяСтоимостьНУ = Форма.ПервоначальнаяСтоимостьБУ;
	КонецЕсли; 
	
	//-- Локализация
	
	Возврат; // В WE пустой обработчик.
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область ФормаРедактированияСтрокиОС

Процедура ФормаРедактированияСтрокиОС_ПорядокУчетаНУПриИзменении(Форма, ДополнительныеПараметры)
	
	ИзмененныеРеквизиты = "ПорядокУчетаНУ";
	Если Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		Форма.ПервоначальнаяСтоимостьОтличается = Истина;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПервоначальнаяСтоимостьОтличается";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", ИзмененныеРеквизиты);
	ДополнительныеПараметры.Вставить("Выполнить_ПересчитатьЗависимыеСуммы");
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиОС_ПередаватьРасходыВДругуюОрганизациюПриИзменении(Форма, ДополнительныеПараметры)
	
	Если Не Форма.ПередаватьРасходыВДругуюОрганизацию Тогда
		Форма.ОрганизацияПолучательРасходов = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", "ПередаватьРасходыВДругуюОрганизацию");
	
КонецПроцедуры

#КонецОбласти

#Область ФормаРедактированияСтрокиНМА

Процедура ФормаРедактированияСтрокиНМА_ДатаПринятияКУчетуБУПриИзменении(Форма, ДополнительныеПараметры)
	
	Если Форма.ОтражатьВУпрУчете 
		И Форма.ЗначенияРеквизитовДоИзменения.ДатаПринятияКУчетуБУ = Форма.ЗначенияРеквизитовДоИзменения.ДатаПринятияКУчетуУУ Тогда
		Форма.ДатаПринятияКУчетуУУ = Форма.ДатаПринятияКУчетуБУ;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", "ДатаПринятияКУчетуБУ");
	ДополнительныеПараметры.Вставить("Выполнить_ЗаполнитьЗначенияРеквизитовДоИзменения");
	
КонецПроцедуры

Процедура ФормаРедактированияСтрокиНМА_РезервПереоценкиСтоимостиРеглСуммаПриИзменении(Форма)
	
	Если Форма.ТекущаяСтоимостьБУ <> 0 И Форма.РезервПереоценкиСтоимостиРеглСумма <> 0 Тогда
		МножительЦФ = ?(Форма.ПрименениеЦелевогоФинансирования, 1, 0);
		Форма.РезервПереоценкиАмортизацииРеглСумма = 
			(Форма.НакопленнаяАмортизацияБУ + МножительЦФ * Форма.НакопленнаяАмортизацияБУЦФ)
			* (Форма.РезервПереоценкиСтоимостиРеглСумма / (Форма.ТекущаяСтоимостьБУ + МножительЦФ * Форма.ТекущаяСтоимостьБУ));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоДаннымОперативногоУчета

Процедура ЗаполнитьПоДаннымОУ(Форма, ТабличнаяЧасть, ИмяКоманды, ТребуетсяВызовСервера, ПродолжитьВыполнениеКоманды)
	
	Если ТабличнаяЧасть.Количество() <> 0 Тогда

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
		ОповещениеВопросЗаполнитьПоОстаткам = Новый ОписаниеОповещения("ЗаполнитьПоДаннымОУЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'При заполнении текущие данные табличной части будут очищены. Продолжить?';
							|en = 'Current table data will be cleared. Continue?'");
		ПоказатьВопрос(ОповещениеВопросЗаполнитьПоОстаткам, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
		ПродолжитьВыполнениеКоманды = Ложь;
		
	Иначе
		
		ТребуетсяВызовСервера = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымОУЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			ДополнительныеПараметры.Форма, 
			ДополнительныеПараметры.ИмяКоманды, 
			Истина,
			Неопределено);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#КонецОбласти

