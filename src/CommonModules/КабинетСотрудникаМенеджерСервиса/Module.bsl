
#Область СлужебныеПроцедурыИФункции

#Область ФоновыеЗадания

Процедура ПолучитьАбонентовИнтернетПоддержкиФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	Результат = Новый Структура("ИнтернетПоддержкаДоступна,АбонентыИП,СообщениеОбОшибке", Ложь);
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ИнтернетПоддержкаДоступна = Истина;
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Ответ = АбонентыИППользователяИП(Тикет);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.АбонентыИП = Ответ.Абоненты;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗарезервироватьИмяДоменаФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Ответ = ЗарезервироватьИмяДомена(Параметры.ИмяДомена, Параметры.ИдентификаторВладельца);
	ПоместитьВоВременноеХранилище(Ответ, АдресХранилища);

КонецПроцедуры

Процедура ИнформацияОСервисеФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Структура("ОписаниеПриложения,Абонент,СервисЗаблокирован,СообщениеОбОшибке");
	
	// Получение информации о приложении
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Ответ = ИнформацияОПриложении(Настройки.ИдентификаторПриложения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ОписаниеПриложения = Ответ.ОписаниеПриложения;
	КонецЕсли;
	
	// Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;	
	КонецЕсли;
	
	// Получение состояния ИС.
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИСДоступна = ИнтеграцияКабинетСотрудникаОбмен.ИнформационнаяСистемаДоступна();
		УстановитьПривилегированныйРежим(Ложь);
		Если ИСДоступна <> Неопределено Тогда
			Результат.СервисЗаблокирован = Не ИСДоступна;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновлениеСведенийОбОплатеФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Отказ = Ложь;
	Результат = Новый Структура("Абонент,СервисЗаблокирован,СообщениеОбОшибке");
	
	// Обновление данных тарифа текущего абонента.
	Ответ = ОбновитьДанныеТарифа();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	// Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;	
	КонецЕсли;
	
	// Получение состояния ИС.
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИСДоступна = ИнтеграцияКабинетСотрудникаОбмен.ИнформационнаяСистемаДоступна();
		УстановитьПривилегированныйРежим(Ложь);
		Если ИСДоступна <> Неопределено Тогда
			Результат.СервисЗаблокирован = Не ИСДоступна;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);	

КонецПроцедуры

Процедура ОбновитьСвойстваПриложенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Структура("ОписаниеПриложения,ОписаниеАдминистратора,СообщениеОбОшибке");
	
	Если ЗначениеЗаполнено(Параметры.ОписаниеПриложения) Тогда
		Ответ = ОбновитьСвойстваПриложения(Параметры.Идентификатор, Параметры.ОписаниеПриложения);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			Результат.ОписаниеПриложения = Ответ.ОписаниеПриложения;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И ЗначениеЗаполнено(Параметры.ОписаниеАдминистратора) Тогда
		
		Отказ = ИнтеграцияКабинетСотрудника.ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
		
		Если Не Отказ Тогда
			
			Ответ = ОбновитьАдминистратораПриложения(Параметры.Идентификатор, Параметры.ОписаниеАдминистратора);
			Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
				Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			ИначеЕсли Ответ.АдминистраторИзменен Тогда
				Результат.ОписаниеАдминистратора = Параметры.ОписаниеАдминистратора;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Если ЗначениеЗаполнено(Результат.ОписаниеПриложения) Тогда
			Настройки.НаименованиеПриложения = Результат.ОписаниеПриложения.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.ОписаниеАдминистратора) Тогда
			Настройки.Ответственный = Параметры.Ответственный;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ИзменитьАбонентаИнтернетПоддержкиФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	// Порядок смены абонента ИП:
	// - получение тикета ИП
	// - получение абонента ИП для пользователя ИП
	// - создание нового абонента сервиса
	// - смена абонента сервиса в приложении
	// - сохранение новых ключей менеджера
	// - обновление данных об оплате.
	
	Отказ = Ложь;
	Результат = Новый Структура("ИнтернетПоддержкаДоступна, Абонент, СервисЗаблокирован, СообщениеОбОшибке");
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ИнтернетПоддержкаДоступна = Истина;
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	// Получение абонента ИП для пользователя ИП.
	ИдентификаторИП = "";
	Если Не Отказ Тогда
		Ответ = АбонентыИППользователяИП(Тикет);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			ИдентификаторИП = Ответ.Абоненты[0].Идентификатор;
		КонецЕсли;
	КонецЕсли;

	// Создание нового абонента сервиса.
	НовыеКлючиМенеджера = Неопределено;
	ИдентификаторАбонентаСервиса = "";
	Если Не Отказ Тогда
		Ответ = СоздатьАбонентаСервиса(ИдентификаторИП);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			НовыеКлючиМенеджера = Новый Структура;
			НовыеКлючиМенеджера.Вставить("ИдентификаторКлиента", Ответ.Абонент.ИдентификаторКлиента);
			НовыеКлючиМенеджера.Вставить("СекретКлиента", Ответ.Абонент.СекретКлиента);
			ИдентификаторАбонентаСервиса = Ответ.Абонент.ИдентификаторАбонентаСервиса;
		КонецЕсли;
	КонецЕсли;
	
	// Смена абонента сервиса в приложении.
	Если Не Отказ Тогда
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Ответ = СменаАбонентаСервиса(ИдентификаторАбонентаСервиса, Настройки.ИдентификаторПриложения);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение новых ключей менеджера.
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьКлючиМенеджера(НовыеКлючиМенеджера.ИдентификаторКлиента, НовыеКлючиМенеджера.СекретКлиента);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Токен");
		УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли;
	
	// Обновление данных об оплате. Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;	
	КонецЕсли;
	
	// Обновление данных об оплате. Получение состояния ИС.
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИСДоступна = ИнтеграцияКабинетСотрудникаОбмен.ИнформационнаяСистемаДоступна();
		УстановитьПривилегированныйРежим(Ложь);
		Если ИСДоступна <> Неопределено Тогда
			Результат.СервисЗаблокирован = Не ИСДоступна;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОтключениеСервисаФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ЗаписатьСобытиеОтключениеСервиса(Истина);
	
	// Не обрабатываем ответ сервера.
	УдалениеИнформационнойСистемы();
	ПоместитьВоВременноеХранилище(Истина, АдресХранилища);

КонецПроцедуры

Процедура ЗавершитьСценарийОтложенногоПодключенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ИнтеграцияКабинетСотрудника.ВключитьНастройкиПрограммыПослеПодключенияПриложения();

КонецПроцедуры

Процедура ПолучениеКодаАктивацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("КодАктивации,СообщениеОбОшибке");
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Идентификатор = НастройкиСервиса.Идентификатор;
	
	Ответ = ПолучениеКодаАктивации(НастройкиСервиса.Идентификатор);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		Результат.КодАктивации = Ответ.КодАктивации;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ПодключениеПоКодуАктивацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	// - получение тикета ИП
	// - получение абонента ИП для пользователя ИП
	// - создание нового абонента сервиса
	// - подключение ИС на нового абонента по коду активации
	// - сохранение новых ключей
	// - обновление данных об оплате.
	
	Отказ = Ложь;
	Результат = Новый Структура("ИнтернетПоддержкаДоступна, НеправильныйКодАктивации, Абонент, СообщениеОбОшибке", Ложь, Ложь);
	
	КодАктивации = Параметры.КодАктивации;
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ИнтернетПоддержкаДоступна = Истина;
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	// Получение абонента ИП для пользователя ИП.
	ИдентификаторИП = "";
	Если Не Отказ Тогда
		Ответ = АбонентыИППользователяИП(Тикет);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			ИдентификаторИП = Ответ.Абоненты[0].Идентификатор;
		КонецЕсли;
	КонецЕсли;

	// Создание нового абонента сервиса.
	НовыеКлючиМенеджера = Неопределено;
	Если Не Отказ Тогда
		Ответ = СоздатьАбонентаСервиса(ИдентификаторИП);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			НовыеКлючиМенеджера = Новый Структура;
			НовыеКлючиМенеджера.Вставить("ИдентификаторКлиента", Ответ.Абонент.ИдентификаторКлиента);
			НовыеКлючиМенеджера.Вставить("СекретКлиента", Ответ.Абонент.СекретКлиента);
		КонецЕсли;
	КонецЕсли;
	
	// Подключение ИС на нового абонента по коду активации
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Идентификатор = НастройкиСервиса.Идентификатор;
	НовыеКлючиПриложения = Неопределено;
	Если Не Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СохранитьКлючиМенеджера(НовыеКлючиМенеджера.ИдентификаторКлиента, НовыеКлючиМенеджера.СекретКлиента);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Токен");
		УстановитьПривилегированныйРежим(Ложь);
		
		Ответ = ПодключениеИСПоКодуАктивации(Идентификатор, КодАктивации);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Результат.НеправильныйКодАктивации = Ответ.НеправильныйКодАктивации;
			Отказ = Истина;
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Ключи");
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Токен");
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			НовыеКлючиПриложения = Новый Структура;
			НовыеКлючиПриложения.Вставить("ИдентификаторКлиента", Ответ.ИнформационнаяСистема.ИдентификаторКлиента);
			НовыеКлючиПриложения.Вставить("СекретКлиента", Ответ.ИнформационнаяСистема.СекретКлиента);
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение новых ключей.
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		ИнтеграцияУправлениеПерсоналом.СохранитьКлючиПриложения(Приложение, НовыеКлючиПриложения);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Обновление данных об оплате. Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверкаДоступностиИнтернетПоддержкиФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("ИнтернетПоддержкаДоступна,СообщениеОбОшибке", Ложь);
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		Результат.ИнтернетПоддержкаДоступна = Истина;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ПодключитьСервисФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Структура("Выполнено,Заказано,СсылкаДляАдминистратора,СообщениеОбОшибке", Ложь, Ложь, "",Неопределено);
	
	// Создание АбонентаСервиса
	Ответ = СоздатьАбонентаСервиса(Параметры.ИдентификаторИП);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		СохранитьКлючиМенеджера(Ответ.Абонент.ИдентификаторКлиента, Ответ.Абонент.СекретКлиента);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Токен");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Подключение к сервису.
	ОписаниеПриложения = Неопределено;
	ОписаниеИС = Неопределено;
	Если Не Отказ Тогда
		
		ДанныеДляПодключения = ДанныеДляПодключения(Параметры);
		Ответ = ПодключитьСервис(ДанныеДляПодключения);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			
			ОписаниеПриложения = Ответ.РезультатПодключения.ОписаниеПриложения;
			ОписаниеИС = Ответ.РезультатПодключения.ОписаниеИС;
			Статус = Ответ.РезультатПодключения.Статус;
			
			Если Статус = "done" Тогда
				Результат.Выполнено = Истина;
				Результат.СсылкаДляАдминистратора = ОписаниеПриложения.Администратор.СсылкаДляАдминистратора;
			ИначеЕсли Статус = "inProgress" Тогда
				Результат.Заказано = Истина;
			Иначе
				СообщениеОбОшибке = НСтр("ru = 'Не удалось подключить сервис.';
										|en = 'Cannot connect the service.'");
				Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
				Комментарий = СтрШаблон("%1 %2",НСтр("ru = 'При создании приложения получен статус:';
													|en = 'When creating the application, the following status is received:'"), Статус);
				ЗаписьЖурналаРегистрации(ИмяСобытияМенеджера(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		ЗаписатьНастройкиПриПодключенииСервиса(ОписаниеПриложения, ОписаниеИС);
	ИначеЕсли Результат.Заказано Тогда
		НачатьПодключениеКСервисуВОтложенномРежиме(ОписаниеПриложения);
	Иначе
		ОчиститьДанныеПриОтключенииСервиса(Истина, Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверкаОтложенногоПодключенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("Выполнено,ОшибкаСозданияПриложения,СсылкаДляАдминистратора,СообщениеОбОшибке", Ложь, Ложь, "",Неопределено);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	СостояниеПодключения = ИнтеграцияУправлениеПерсоналомМенеджер.СостояниеПодключенияПриложения(Приложение);
	
	Ответ = ПроверитьОтложенноеПодключение(СостояниеПодключения.ИдентификаторЗаявки);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		
		ОписаниеПриложения 	= Ответ.РезультатПодключения.ОписаниеПриложения;
		ОписаниеИС 			= Ответ.РезультатПодключения.ОписаниеИС;
		Статус 				= Ответ.РезультатПодключения.Статус;
		
		Если Статус = "done" Тогда
			Результат.Выполнено = Истина;
			Результат.СсылкаДляАдминистратора = ОписаниеПриложения.Администратор.СсылкаДляАдминистратора;
		ИначеЕсли Статус <> "inProgress" Тогда
			Результат.ОшибкаСозданияПриложения = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось подключить сервис.';
									|en = 'Cannot connect the service.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			Комментарий = СтрШаблон("%1 %2",НСтр("ru = 'При создании приложения получен статус:';
												|en = 'When creating the application, the following status is received:'"), Статус);
			ЗаписьЖурналаРегистрации(ИмяСобытияМенеджера(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		// удаляем сведения отложенного подключения
		ИнтеграцияУправлениеПерсоналомМенеджер.ОчиститьСостояниеПодключенияПриложения(Приложение);
		ЗаписатьНастройкиПриПодключенииСервиса(ОписаниеПриложения, ОписаниеИС);
	ИначеЕсли Результат.ОшибкаСозданияПриложения Тогда
		ОчиститьДанныеПриОтключенииСервиса(Истина, Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеСМенеджеромСервиса

Функция ВерсияПриложения(ВестиПротокол) Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Ответ = ИнформацияОПриложении(Настройки.ИдентификаторПриложения, ВестиПротокол);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Ответ.ОписаниеПриложения.Версия;

КонецФункции

#КонецОбласти

#Область ЗапросыКМенеджеруСервиса

// Получает список абонентов интернет-поддержки пользователя интернет-поддержки.
//
// Параметры:
// 		ИдентификаторПользователя - Строка
//
// Возвращаемое значение:
// 		Структура - содержит ключи
// 			* Абоненты - Массив - массив структур с ключами
// 					** Идентификатор - Строка
// 					** Наименование - Строка - наименование абонента для показа пользователю
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция АбонентыИППользователяИП(Тикет)

	Результат = Новый Структура("Абоненты, СообщениеОбОшибке", Новый Массив);
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", 	КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", 	"application/json");
	Заголовки.Вставить("ticket", 		Тикет);
	
	РесурсAPI = "/api/users/subscribers";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200  Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		МассивОбъектов = ПрочитатьJSON(ЧтениеJSON, Истина);
		Для каждого ЭлементМассива Из МассивОбъектов Цикл
			Абонент = АбонентИППоОтветуНаЗапрос(ЭлементМассива);
			Результат.Абоненты.Добавить(Абонент);
		КонецЦикла;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Тикет ИПП не прошел проверку.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации пользователя интернет-поддержки.';
								|en = 'Online support user authentication error.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет резервирование выбранного имени домена в сервисе.
//
// Параметры:
// 		ИмяДомена - Строка
// 		ИдентификаторВладельца - Строка - определяет для кого резервируется имя.
//
// Возвращаемое значение:
// 		Структура - содержит ключи
// 			* ИмяЗарезервировано - Булево - Истина, если имя зарезервировано.
// 			* Пояснение - Строка, Неопределено - описание причины отказа резервирования.
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке при выполнении резервирования.
//
Функция ЗарезервироватьИмяДомена(ИмяДомена, ИдентификаторВладельца)
	
	Результат = Новый Структура("Зарезервировано, Пояснение, СообщениеОбОшибке", Ложь);
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	// Формируем запрос.
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("ticket", 		Тикет);
	
	РесурсAPI = "/api/hostnames/check";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("hostname", 		ИмяДомена);
	ТелоЗапроса.Вставить("reserve",  		true);
	ТелоЗапроса.Вставить("subscriberID", 	ИдентификаторВладельца);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 201 Тогда
		// Доменное имя доступно.
		Результат.Зарезервировано = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		// Некорректный запрос.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Токен не прошел проверку.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации пользователя интернет-поддержки.';
								|en = 'Online support user authentication error.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 409 Тогда
		// Доменное имя занято.
		Результат.Пояснение = НСтр("ru = 'Это имя домена занято, введите другое имя.';
									|en = 'This domain name is taken, please enter a different name.'");
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Создает абонента сервиса по идентификатору пользователя интернет-поддержки.
//
// Параметры:
// 		ИдентификаторИП - Строка - ключ связи с интернет-поддержкой.
//
// Возвращаемое значение:
// 		Структура - содержит ключи
// 			* АбонентСоздан - Булево
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция СоздатьАбонентаСервиса(ИдентификаторИП)

	Результат = Новый Структура("Абонент,СообщениеОбОшибке");
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("ticket", Тикет);
	
	РесурсAPI = "/api/subscribers/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторИП);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, Истина);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 201 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.Абонент = АбонентПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации пользователя интернет-поддержки.';
								|en = 'Online support user authentication error.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Абонент интернет-поддержки не найден.';
								|en = 'Online support subscriber not found.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция УдалениеИнформационнойСистемы()

	Результат = Новый Структура("ИнформационнаяСистемаУдалена,СообщениеОбОшибке", Ложь);
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ИдентификаторИС = Настройки.Идентификатор;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/information-systems/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторИС);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "DELETE";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		Результат.ИнформационнаяСистемаУдалена = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// ИС не найдена, считаем что удаление выполнено.
		Результат.ИнформационнаяСистемаУдалена = Истина;
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

// Выполняет GET запрос для получения объекта Приложение.
//
// Параметры:
// 		ИдентификаторПриложения - Строка - идентификатор приложения
//
// Возвращаемое значение:
// 		Структура
// 			* ОписаниеПриложения - Структура, Неопределено - описание структуры см НовоеОписаниеПриложения.
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция ИнформацияОПриложении(ИдентификаторПриложения, ВестиПротокол = Ложь)

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения(ВестиПротокол);
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеПриложения = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Сервис с идентификатором %1 не найден.';
											|en = 'Service with %1 ID is not found.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет GET запрос для получения объекта Абонент сервиса.
//
// Возвращаемое значение:
// 		Структура
// 			* Абонент - Структура, Неопределено - описание структуры см НовоеОписаниеАбонента.
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция ИнформацияОбАбоненте()

	Результат = Новый Структура("Абонент,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/subscribers";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСервисаСоЗначениямиДата());
		Результат.Абонент = АбонентПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьДанныеТарифа()

	Результат = Новый Структура("СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/subscribers/plans/updates";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьСвойстваПриложения(ИдентификаторПриложения, ОписаниеПриложения)

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъектаПриложение(), ОписаниеПриложения);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PATCH";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеПриложения = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Сервис с идентификатором %1 не найден.';
											|en = 'Service with %1 ID is not found.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьАдминистратораПриложения(ИдентификаторПриложения, ОписаниеАдминистратора)

	Результат = Новый Структура("АдминистраторИзменен,СообщениеОбОшибке", Ложь);
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api//applications/{ID}/administrators";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъектаАдминистратор(), ОписаниеАдминистратора);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PUT";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		Результат.АдминистраторИзменен = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Сервис с идентификатором %1 не найден.';
											|en = 'Service with %1 ID is not found.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

Функция СменаАбонентаСервиса(ИдентификаторАбонентаСервиса, ИдентификаторПриложения)

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("subscriber", ИдентификаторАбонентаСервиса);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PATCH";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеПриложения = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Сервис с идентификатором %1 не найден.';
											|en = 'Service with %1 ID is not found.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучениеКодаАктивации(ИдентификаторИС)

	Результат = Новый Структура("КодАктивации,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/information-systems/{ID}/restore";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторИС);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.КодАктивации = ОбъектОтвета["code"];
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Информационная система не найдена.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Информационная система с идентификатором %1 не найдена.';
											|en = 'Information system with %1 ID is not found.'"), ИдентификаторИС);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПодключениеИСПоКодуАктивации(ИдентификаторИС, КодАктивации)

	Результат = Новый Структура("ИнформационнаяСистема,НеправильныйКодАктивации,СообщениеОбОшибке",,Ложь);
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/information-systems/{ID}/restore";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторИС);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("code", КодАктивации);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;

	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ИнформационнаяСистема = ИнформационнаяСистемаПоОтветуНаЗапрос(ОбъектОтвета)
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Incorrect request.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		Результат.НеправильныйКодАктивации = Истина;
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибки());
		СообщениеОбОшибке = НСтр("ru = 'Неправильный код активации';
								|en = 'Incorrect activation code'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		Результат.НеправильныйКодАктивации = Истина;
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибки());
		СообщениеОбОшибке = НСтр("ru = 'Неправильный код активации. Информационная система не найдена.';
								|en = 'Incorrect activation code. Information system is not found.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Unknown server response.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения)
	
	Результат = Новый Структура("Ответ,СообщениеОбОшибке");
	Токен = "";
	
	Ответ = НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	Попытка
		Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
		Если ПараметрыСоединения.ВестиПротокол Тогда
			ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
		КонецЕсли;
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Результат.Ответ = Ответ;
	Возврат Результат;
	
КонецФункции 

Функция ПодключитьСервис(ДанныеДляПодключения)

	Результат = Новый Структура("РезультатПодключения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/deployments";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	СтрокаТела = ИнтеграцияУправлениеПерсоналом.СформироватьJSON(ДанныеДляПодключения);
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, Истина);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.РезультатПодключения = РезультатПодключенияПоОтветуНаЗапрос(ОбъектОтвета);
		Статус = Результат.РезультатПодключения.Статус;
		Если Статус <> "done" И Статус <> "inProgress" Тогда
			ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, НСтр("ru = 'Не удалось подключить сервис.';
																					|en = 'Cannot connect the service.'"));
		КонецЕсли;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Ошибка связи с сервисом.';
								|en = 'Service connection error.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 409 Тогда
		// Доменное имя не уникально.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Это доменное имя занято, укажите другое имя.';
								|en = 'This domain name is taken, please enter a different name.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка связи с сервисом.';
								|en = 'Service connection error.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПроверитьОтложенноеПодключение(ИдентификаторПриложения)

	Результат = Новый Структура("РезультатПодключения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/deployments/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, Истина);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.РезультатПодключения = РезультатПодключенияПоОтветуНаЗапрос(ОбъектОтвета);
		Статус = Результат.РезультатПодключения.Статус;
		Если Статус <> "done" И Статус <> "inProgress" Тогда
			ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, НСтр("ru = 'Не удалось подключить сервис.';
																					|en = 'Cannot connect the service.'"));
		КонецЕсли;
	Иначе
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru = 'Ошибка связи с сервисом.';
								|en = 'Service connection error.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСКлючамиМенеджераСервиса

Функция ЕстьКлючиМенеджераСервиса() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат КлючиМенеджера() <> Неопределено;

КонецФункции

Процедура СохранитьКлючиМенеджера(ИдентификаторКлиента, СекретКлиента)

	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Ключи",ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Ключи",СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

Функция КлючиМенеджера()
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Менеджер.Ключи",
		"ИдентификаторКлиента,СекретКлиента");
	УстановитьПривилегированныйРежим(Ложь);

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхАутентификации

Функция ТокенАутентификации(Соединение, ПараметрыСоединения)
	
	Результат = Новый Структура("Токен,СообщениеОбОшибке");
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Менеджер.Токен",
		"Токен,СрокГодности");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеВБезопасномХранилище.Токен <> Неопределено
		И ДанныеВБезопасномХранилище.СрокГодности <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеВБезопасномХранилище.СрокГодности Тогда
			Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
		Иначе
			Результат.Токен = ДанныеВБезопасномХранилище.Токен;
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
	КонецЕсли;
	
КонецФункции 

Функция НовыйТокенАутентификации(Соединение, ПараметрыСоединения)

	Результат = Новый Структура("Токен,СообщениеОбОшибке");
	
	УстановитьПривилегированныйРежим(Истина);
	КлючиМенеджера = КлючиМенеджера();
	УстановитьПривилегированныйРежим(Ложь);
	Если КлючиМенеджера = Неопределено Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации в сервисе 1С:Кабинет сотрудника. Отсутствуют ключи доступа к менеджеру сервиса';
											|en = 'Authentication error in the 1C: Employee Account service. Access keys to the service manager are missing'");
		Возврат Результат;
	КонецЕсли;
	
	СтрокаКлючей = ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиМенеджера.ИдентификаторКлиента, КлючиМенеджера.СекретКлиента));
	СтрокаBase64 = Base64Строка(СтрокаКлючей);
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
		
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыСоединения, "POST", Запрос, , ОписаниеОшибки());
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ от сервера.';
								|en = 'Cannot get a response from the server.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Результат.Токен = РезультатЧтенияJSON["id_token"];
			СрокГодности = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Токен",Результат.Токен, "Токен");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Токен",СрокГодности, "СрокГодности");
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Токен) Тогда
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2';
				|en = 'Cannot to get authentication token.
				|Server returned code:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияМенеджера(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			Комментарий);
			
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2",
											НСтр("ru = 'Ошибка аутентификации в сервисе.';
												|en = 'Authentication error in service.'"),
											ПодробностиВЖурналеРегистрации());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ТикетАутентификацииНаПорталеПоддержке() Экспорт

	Результат = Новый Структура("Тикет,СообщениеОбОшибке");
	
	ОтветСервиса = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		УстановитьПривилегированныйРежим(Истина);
		ОтветСервиса = Модуль.ТикетАутентификацииНаПорталеПоддержки(ИдентификаторСервиса());
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОтветСервиса = Неопределено Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Интернет-поддержка пользователей недоступна.';
											|en = 'Online user support is unavailable.'");
	Иначе
		Если ПустаяСтрока(ОтветСервиса.КодОшибки) Тогда
			Результат.Тикет = ОтветСервиса.Тикет;
		Иначе
			Результат.СообщениеОбОшибке = ОтветСервиса.СообщениеОбОшибке;
			Если ОтветСервиса.КодОшибки = "ОшибкаСервиса"
				Или ОтветСервиса.КодОшибки = "ОшибкаПодключения"
				Или ОтветСервиса.КодОшибки = "НеизвестнаяОшибка" Тогда
				
				Комментарий = СтрШаблон("%1 %2",
								НСтр("ru = 'Ошибка аутентификации Интернет-поддержки.';
									|en = 'Online support authentication error.'"),
								ОтветСервиса.ИнформацияОбОшибке);
								
				ЗаписьЖурналаРегистрации(
					ИмяСобытияМенеджера(),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаписьСобытийВЖурналРегистрации

// Добавление текстового блока Подробности см. в журнале регистрации.
//
Функция ПодробностиВЖурналеРегистрации()

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.';
				|en = 'See the event log for details.'");

КонецФункции

Процедура ЗаписатьОшибкуВызова(ПараметрыСоединения, Метод, HTTPЗапрос, HTTPОтвет = Неопределено, ОписаниеОшибки = Неопределено)
	
	ИмяСобытияЖР = ИмяСобытияМенеджера();
	Сервер = ПараметрыСоединения.Схема + "://" + ПараметрыСоединения.ИмяСервера;
	
	ЗапросТекст = Метод + " " + Сервер + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Заголовок.Ключ = "ticket" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.';
							|en = 'Cannot get a response from the server.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1';
									|en = 'Server returned status code: %1'"), HTTPОтвет.КодСостояния);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(ТелоОтвета) Тогда
			ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		ОтветТекст = ОтветТекст + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2';
	|en = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	
КонецПроцедуры			

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, HTTPЗапрос)

	Сервер = ПараметрыСоединения.Схема + "://" + ПараметрыСоединения.ИмяСервера;
	
	ЗапросТекст = ИмяМетода + " " + Сервер + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Заголовок.Ключ = "ticket" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2';
	|en = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(ИмяСобытияПротоколЗапрос(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, HTTPЗапрос, HTTPОтвет, СкрытьКлючи = Ложь)

	Сервер = ПараметрыСоединения.Схема + "://" + ПараметрыСоединения.ИмяСервера;
	
	ЗапросТекст = ИмяМетода + " " + Сервер + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Заголовок.Ключ = "ticket" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.';
							|en = 'Cannot get a response from the server.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1';
									|en = 'Server returned status code: %1'"), HTTPОтвет.КодСостояния);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(ТелоОтвета) Тогда
			Если СкрытьКлючи Тогда
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
				ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
				Если ЗначениеЗаполнено(ОбъектОтвета["clientID"]) Тогда
					ОбъектОтвета.Вставить("clientID", "*");
				КонецЕсли;
				Если ЗначениеЗаполнено(ОбъектОтвета["clientSecret"]) Тогда
					ОбъектОтвета.Вставить("clientSecret", "*");
				КонецЕсли;
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписатьJSON(ЗаписьJSON, ОбъектОтвета);
				ТелоОтвета = ЗаписьJSON.Закрыть();
			КонецЕсли;
			ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2';
	|en = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИмяСобытияПротоколОтвет(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеОтключениеСервиса(СервисУдаляется) Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения';
													|en = 'Application ID'"), Настройки.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы';
													|en = 'Information system ID'"), Настройки.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Отключение сервиса 1С:Кабинет сотрудника.';
								|en = 'Disabling 1C:Employee account service.'");
	Если СервисУдаляется Тогда
		СтрокаСобытие = СтрШаблон("%1 %2",СтрокаСобытие, НСтр("ru = 'Сервис удален.';
																|en = 'Service has been deleted.'"));
	КонецЕсли;
	Шаблон = ("%1
			|%2
			|%3");
	Комментарий = СтрШаблон(Шаблон, СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияОтключениеСервиса(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

// Формирует текстовое описание ошибки из ответа сервера
// переданного в объекте "error".
//
// Параметры:
// 		HTTPОтвет - HTTPОтвет - ответ полученный от сервиса.
//
// Возвращаемое значение:
// 		Строка - Описание ошибки.
//
Функция ОписаниеОшибкиОтветаСервера(HTTPОтвет)
	
	ОписаниеОшибки = "";
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ТелоКакСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
	Если Не ПустаяСтрока(ТелоКакСтрока) Тогда
		
		ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока);
		
		ОбъектОтвета = Неопределено;
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			Ошибка = ОбъектОтвета["error"];
			Если Ошибка <> Неопределено Тогда
				
				ОписаниеИзОтвета = Ошибка["description"];
				Если ОписаниеИзОтвета = Неопределено Тогда
					ОписаниеОшибки = НСтр("ru = 'отсутствует';
											|en = 'absent'");
				КонецЕсли;
				
				ШаблонОписания = НСтр("ru = 'Описание: %1
				|Подробно:';
				|en = 'Description: %1
				|More information:'");
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания, Ошибка["description"]);
				
				Если Ошибка["value"] <> Неопределено Тогда
					Для Каждого КлючЗначение Из Ошибка["value"] Цикл
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + КлючЗначение.Ключ + ": " + КлючЗначение.Значение;
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				ОписаниеОшибки = НСтр("ru = 'Неизвестное описание ошибки.';
										|en = 'Unknown error details.'");
			КонецЕсли;
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Неизвестное описание ошибки.';
									|en = 'Unknown error details.'");
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

#КонецОбласти

#Область КонструкторыОбъектов

Функция ОписаниеОбъектаПриложение()
	
	ОписаниеВложенногоОбъекта = Новый Соответствие;
	ОписаниеВложенногоОбъекта.Вставить("administrator", "Администратор");
	ОписаниеВложенногоОбъекта.Вставить("ОписаниеПолей", ОписаниеОбъектаАдминистратор());
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"Идентификатор");
	СоответствиеПолей.Вставить("name",				"Наименование"); 
	СоответствиеПолей.Вставить("subscriber",		"ИдентификаторАбонентаСервиса");
	СоответствиеПолей.Вставить("hostname",			"ИмяДомена");
	СоответствиеПолей.Вставить("url",				"АдресПриложения");
	СоответствиеПолей.Вставить("aliasUrl",			"АдресПриложенияПоИмени");
	СоответствиеПолей.Вставить("status",			"Статус");
	СоответствиеПолей.Вставить("version",			"Версия");
	СоответствиеПолей.Вставить("administrator", 	ОписаниеВложенногоОбъекта);
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаАдминистратор()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("personID", 	"ФизическоеЛицо");
	СоответствиеПолей.Вставить("username", 	"Логин");
	СоответствиеПолей.Вставить("phone", 	"Телефон");
	СоответствиеПолей.Вставить("email", 	"АдресЭлектроннойПочты");
	СоответствиеПолей.Вставить("logonUrl",	"СсылкаДляАдминистратора");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаАбонентСервиса()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"ИдентификаторАбонентаСервиса");
	СоответствиеПолей.Вставить("userUeid",			"ИдентификаторПользователяИП");
	СоответствиеПолей.Вставить("subscriberUeid",	"ИдентификаторАбонентаИП");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("isTrial",			"ИспользуетсяПробныйПериод");
	СоответствиеПолей.Вставить("trialEndDate",		"ДатаОкончанияПробногоПериода");
	СоответствиеПолей.Вставить("paidLimitAccounts",	"ОплаченоКабинетов");
	СоответствиеПолей.Вставить("paymentEndDate",	"ДатаОкончанияОплаченногоПериода");
	СоответствиеПолей.Вставить("activeAccounts",	"КоличествоАктивированныхКабинетов");
	СоответствиеПолей.Вставить("clientID",			"ИдентификаторКлиента");
	СоответствиеПолей.Вставить("clientSecret",		"СекретКлиента");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаИнформационнаяСистема()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"Идентификатор");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("clientID",			"ИдентификаторКлиента");
	СоответствиеПолей.Вставить("clientSecret",		"СекретКлиента");
	СоответствиеПолей.Вставить("applicationID", 	"ИдентификаторПриложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаАбонентИП()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"Идентификатор");
	СоответствиеПолей.Вставить("name",				"Наименование"); 
	
	Возврат СоответствиеПолей;

КонецФункции

// Возвращает структуру с описанием приложения сервиса.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаПриложение.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеПриложения() Экспорт

	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИдентификаторАбонентаСервиса");
	Описание.Вставить("ИмяДомена");
	Описание.Вставить("АдресПриложения");
	Описание.Вставить("АдресПриложенияПоИмени");
	Описание.Вставить("Статус");
	Описание.Вставить("Версия");
	Описание.Вставить("Администратор", НовоеОписаниеАдминистратора());
	
	Возврат Описание;

КонецФункции

// Возвращает структуру с описанием Администратора сервиса.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаАдминистратор.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеАдминистратора() Экспорт

	Описание = Новый Структура;
	Описание.Вставить("ФизическоеЛицо");
	Описание.Вставить("Логин");
	Описание.Вставить("Телефон");
	Описание.Вставить("АдресЭлектроннойПочты");
	Описание.Вставить("СсылкаДляАдминистратора");
	
	Возврат Описание;

КонецФункции

// Возвращает структуру с описанием Абонента сервиса.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаАбонентСервиса.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеАбонента()

	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторАбонентаСервиса");
	Описание.Вставить("ИдентификаторПользователяИП");
	Описание.Вставить("ИдентификаторАбонентаИП");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИспользуетсяПробныйПериод");
	Описание.Вставить("ДатаОкончанияПробногоПериода");
	Описание.Вставить("ОплаченоКабинетов");
	Описание.Вставить("ДатаОкончанияОплаченногоПериода");
	Описание.Вставить("КоличествоАктивированныхКабинетов");
	Описание.Вставить("ИдентификаторКлиента");
	Описание.Вставить("СекретКлиента");
	
	Возврат Описание;

КонецФункции

// Возвращает структуру с описанием Информационной системы.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаИнформационнаяСистема.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеИнформационнойСистемы()
	
	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИдентификаторКлиента");
	Описание.Вставить("СекретКлиента");
	Описание.Вставить("ИдентификаторПриложения");
	Возврат Описание;
	
КонецФункции

// Возвращает структуру с описанием абонента интернет-поддержки.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаАбонентИП.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеАбонентаИП()
	
	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование"); 
	
	Возврат Описание;

КонецФункции

#КонецОбласти

#Область ЗначенияКонстант

Функция АдресМенеджераСервиса()
	
	Возврат "https://ess-manager.1c-cabinet.ru/applications/ess-manager";
	
КонецФункции

Функция ИдентификаторСервиса()

	Возврат "1C-ESS";

КонецФункции

#КонецОбласти

#Область Прочие

// Заполняет соответствие для тела запроса по описанию объекта и значениям полей. 
//
// Параметры:
// 		ОписаниеОбъекта - Соответствие
// 		ЗначенияПолейОбъекта - Структура
//
// Возвращаемое значение:
// 		Соответствие - ключи описаны в ОписаниеОбъекта, значения указаны в ЗначенияПолейОбъекта.
//
Функция ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъекта, ЗначенияПолейОбъекта)
	
	Результат = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Соответствие") Тогда
			// вложенный объект
			Для каждого ЭлементВложеннойКоллекции Из ЭлементКоллекции.Значение Цикл
				Если ТипЗнч(ЭлементВложеннойКоллекции.Значение) = Тип("Соответствие") Тогда
					ОписаниеВложенногоОбъекта = ЭлементВложеннойКоллекции.Значение;
				Иначе
					ИмяВложенногоОбъекта = ЭлементВложеннойКоллекции.Значение;
				КонецЕсли;
			КонецЦикла;
			ВложенныйОбъект = ТелоЗапросаПоОписаниюОбъекта(ОписаниеВложенногоОбъекта, ЗначенияПолейОбъекта[ИмяВложенногоОбъекта]);
			Если ВложенныйОбъект.Количество() > 0 Тогда
				Результат.Вставить(ЭлементКоллекции.Ключ, ВложенныйОбъект);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ЗначенияПолейОбъекта[ЭлементКоллекции.Значение]) Тогда
				Результат.Вставить(ЭлементКоллекции.Ключ, ЗначенияПолейОбъекта[ЭлементКоллекции.Значение]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовоеHTTPСоединение(ПараметрыСоединения, Таймаут = 120)
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(ПараметрыСоединения.Схема) = "HTTPS" Или ВРег(ПараметрыСоединения.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	Соединение = Новый HTTPСоединение(ПараметрыСоединения.Хост, ПараметрыСоединения.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

Функция ПараметрыСоединения(ВестиПротокол = Ложь)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресМенеджераСервиса());
	
	ПараметрыСоединения = Новый Структура("Хост,Порт,ПутьНаСервере,Схема,ИмяСервера,ВестиПротокол");
	ЗаполнитьЗначенияСвойств(ПараметрыСоединения, СтруктураURI);
	ПараметрыСоединения.Вставить("ВестиПротокол", ВестиПротокол Или Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить());
	
	Возврат ПараметрыСоединения;

КонецФункции

Функция ИменаСвойствСервисаСоЗначениямиДата()

	Результат = Новый Массив;
	Результат.Добавить("trialEndDate");
	Результат.Добавить("paymentEndDate");
	Возврат Результат;	

КонецФункции

// Заполняет структуру описания приложения на основании ответа на запрос.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеПриложения
//
Функция ПриложениеПоОтветуНаЗапрос(ОбъектОтвета)
	
	НовоеПриложение = НовоеОписаниеПриложения();
	Если ОбъектОтвета <> Неопределено Тогда
		
		НовоеПриложение.Идентификатор 			= ОбъектОтвета["ID"];
		НовоеПриложение.Наименование 			= ОбъектОтвета["name"];
		НовоеПриложение.ИмяДомена 				= ОбъектОтвета["hostname"];
		НовоеПриложение.АдресПриложения 		= ОбъектОтвета["url"];
		НовоеПриложение.АдресПриложенияПоИмени 	= ОбъектОтвета["aliasUrl"];
		НовоеПриложение.Статус 					= ОбъектОтвета["status"];
		НовоеПриложение.Версия 					= ОбъектОтвета["version"];
		НовоеПриложение.ИдентификаторАбонентаСервиса = ОбъектОтвета["subscriber"];
		
		АдминистраторПриложения = ОбъектОтвета["administrator"];
		Если АдминистраторПриложения <> Неопределено Тогда
			НовоеПриложение.Администратор.Логин 				  = АдминистраторПриложения["username"];
			НовоеПриложение.Администратор.Телефон 				  = АдминистраторПриложения["phone"];
			НовоеПриложение.Администратор.АдресЭлектроннойПочты   = АдминистраторПриложения["email"];
			НовоеПриложение.Администратор.СсылкаДляАдминистратора = АдминистраторПриложения["logonUrl"];
			НовоеПриложение.Администратор.ФизическоеЛицо 		  = АдминистраторПриложения["personID"];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеПриложение;
	
КонецФункции

// Заполняет структуру описания информационной системы на основании ответа на запрос
// создания новой информационной системы.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеПриложения
//
Функция ИнформационнаяСистемаПоОтветуНаЗапрос(ОбъектОтвета)
	
	ОписаниеОбъекта = ОписаниеОбъектаИнформационнаяСистема();
	ОписаниеИС 		= НовоеОписаниеИнформационнойСистемы();
	
	Если ОбъектОтвета <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
			ОписаниеИС[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеИС;
	
КонецФункции

// Заполняет структуру описания Абонента на основании ответа на запрос.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеАбонента
//
Функция АбонентПоОтветуНаЗапрос(ОбъектОтвета)

	ОписаниеОбъекта  = ОписаниеОбъектаАбонентСервиса();
	ОписаниеАбонента = НовоеОписаниеАбонента();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОписаниеАбонента[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат ОписаниеАбонента;

КонецФункции

// Заполняет структуру описания Абонента на основании ответа на запрос.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеАбонента
//
Функция АбонентИППоОтветуНаЗапрос(ОбъектОтвета)

	ОписаниеОбъекта  = ОписаниеОбъектаАбонентИП();
	ОписаниеАбонента = НовоеОписаниеАбонентаИП();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОписаниеАбонента[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат ОписаниеАбонента;

КонецФункции

Процедура ОчиститьДанныеПриОтключенииСервиса(ОчищатьДанныеОтложенногоПодключения, РегистрироватьСобытиеЖР) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Если ОчищатьДанныеОтложенногоПодключения Тогда
		ИнтеграцияУправлениеПерсоналомМенеджер.ОчиститьСостояниеПодключенияПриложения(Приложение);
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналом.ОчиститьДанныеПриОтключенииПриложения(Приложение, РегистрироватьСобытиеЖР);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ОписаниеДанныеДляПодключения() Экспорт

	Описание = Новый Структура;
	Описание.Вставить("ИмяПриложения");
	Описание.Вставить("ИмяДомена");
	Описание.Вставить("ИмяИС");
	Описание.Вставить("Администратор");
	Описание.Вставить("ИдентификаторИП");
	
	Возврат Описание;

КонецФункции

Функция РезультатПодключенияПоОтветуНаЗапрос(ОбъектОтвета)

	РезультатПодключения = Новый Структура("ОбъектОтвета,ОписаниеПриложения,ОписаниеИС,Статус");
	РезультатПодключения.ОписаниеПриложения = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета["application"]);
	РезультатПодключения.ОписаниеИС 		= ИнформационнаяСистемаПоОтветуНаЗапрос(ОбъектОтвета["informationSystem"]);
	РезультатПодключения.Статус 			= ОбъектОтвета["status"];
	
	Возврат РезультатПодключения;

КонецФункции

Процедура ЗаписатьНастройкиПриПодключенииСервиса(ОписаниеПриложения, ОписаниеИС)

	СсылкаСтрока = ОписаниеПриложения.Администратор.ФизическоеЛицо;
	Ответственный = Неопределено;
	Если Не ПустаяСтрока(СсылкаСтрока) Тогда
		ОтветственныйСсылка = Неопределено;
		Попытка
			ОтветственныйСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаСтрока));
		Исключение
			ОтветственныйСсылка = Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(ОтветственныйСсылка) И ОбщегоНазначения.СсылкаСуществует(ОтветственныйСсылка) Тогда
			Ответственный = ОтветственныйСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияКабинетСотрудника.ЗаписатьНастройкиПриПодключенииПриложения(Ответственный, ОписаниеПриложения, ОписаниеИС);

КонецПроцедуры

Функция ДанныеДляПодключения(ПараметрыПодключения)

	ОписаниеОбъекта = Новый Соответствие();
	
	ОбъектDTO = ФизическоеЛицоАдминистраторОбъектDTO(ПараметрыПодключения.Администратор);
	ОписаниеОбъекта.Вставить("person", ОбъектDTO);
	
	Приложение = Новый Структура;
	Приложение.Вставить("name", 	ПараметрыПодключения.ИмяПриложения);
	Приложение.Вставить("hostname", ПараметрыПодключения.ИмяДомена);
	ОписаниеОбъекта.Вставить("application", Приложение);
	
	ИнформационнаяСистема = Новый Структура("name", ПараметрыПодключения.ИмяИС);
	ОписаниеОбъекта.Вставить("informationSystem", ИнформационнаяСистема);
	
	Возврат ОписаниеОбъекта;

КонецФункции

Функция НазваниеГруппыСобытийЖР()
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Возврат ИнтеграцияУправлениеПерсоналом.НазваниеГруппыСобытийЖР(Приложение);
	
КонецФункции

Функция ИмяСобытияМенеджера()

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Менеджер сервиса';
																|en = 'Service manager'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПротоколЗапрос()
	
	Возврат ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().Запрос;

КонецФункции

Функция ИмяСобытияПротоколОтвет()
	
	Возврат ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().Ответ;

КонецФункции

Функция ИмяСобытияОтключениеСервиса()
	
	Возврат ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().Отключение;

КонецФункции

Функция ФизическоеЛицоАдминистраторОбъектDTO(ФизическоеЛицо)
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	Данные = ИнтеграцияУправлениеПерсоналомОбмен.ДанныеФизическихЛицДляВыгрузки(Приложение, ФизическиеЛица, Ложь);
	
	ИменаКолонок = "
	|ФизическоеЛицо,
	|Фамилия,Имя,Отчество,Инициалы,
	|Пол,ДатаРождения,МестоРожденияПредставление,
	|ИНН,СтраховойНомерПФР,
	|ТелефонРабочийПредставление,ТелефонМобильныйПредставление,EMailПредставление,
	|АдресПоПропискеПредставление,АдресМестаПроживанияПредставление,
	|ДокументУдостоверяющийЛичность";
	
	ТаблицаДанных = ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);
	ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Данные.ТаблицаДанных[0]);
	
	МенеджерКонвертации = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерКонвертации(Приложение);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	РезультатКонвертации = МенеджерКонвертации.ВыполнитьКонвертациюВОбъектыDTO(ТаблицаДанных, ТипОбъекта);

	Возврат РезультатКонвертации.Данные[0];

КонецФункции

#КонецОбласти

#Область ОтложенноеПодключениеКСервису

// Процедура регламентного задания ПодключениеСервисаКабинетСотрудника
Процедура ОтложенноеПодключениеСервиса(ПараметрыПодключения) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	СостояниеПодключения = ИнтеграцияУправлениеПерсоналомМенеджер.СостояниеПодключенияПриложения(Приложение);
	Если Не ЗначениеЗаполнено(СостояниеПодключения.Состояние) Тогда
		УдалитьРегламентноеЗадание(ПараметрыПодключения);
	ИначеЕсли СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.ОжиданиеПодключения Тогда
		Ответ = ПроверитьОтложенноеПодключение(СостояниеПодключения.ИдентификаторЗаявки);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			ВызватьИсключение Ответ.СообщениеОбОшибке;
		Иначе
			ОписаниеПриложения 	= Ответ.РезультатПодключения.ОписаниеПриложения;
			ОписаниеИС 			= Ответ.РезультатПодключения.ОписаниеИС;
			Статус 				= Ответ.РезультатПодключения.Статус;
			Если Статус = "done" Тогда
				ЗаписатьНастройкиПриПодключенииСервиса(ОписаниеПриложения, ОписаниеИС);
				ЗавершитьПодключениеКСервису(ПараметрыПодключения, Ложь, ОписаниеПриложения.Администратор.СсылкаДляАдминистратора);
			ИначеЕсли Статус <> "inProgress" Тогда
				ОчиститьДанныеПриОтключенииСервиса(Истина, Ложь);
				ЗавершитьПодключениеКСервису(ПараметрыПодключения, Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.Создано Тогда
		ЗавершитьПодключениеКСервису(ПараметрыПодключения, Ложь);
	Иначе
		ЗавершитьПодключениеКСервису(ПараметрыПодключения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеКСервисуВОтложенномРежиме(ОписаниеПриложения)
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Состояние = Перечисления.СостоянияПодключенияПриложения.ОжиданиеПодключения;
	ИнтеграцияУправлениеПерсоналомМенеджер.УстановитьСостояниеПодключения(Приложение, Состояние, ОписаниеПриложения.Идентификатор);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 600;
	
	ПараметрыПодключения = Новый Структура("ИдентификаторЗадания");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные",		Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника);
	ПараметрыЗадания.Вставить("Наименование",	НСтр("ru = 'Подключение сервиса ""1С:Кабинет сотрудника""';
														|en = 'Connection to ""1C:Employee Account"" service'"));
	ПараметрыЗадания.Вставить("Использование",	Истина);
	ПараметрыЗадания.Вставить("Расписание",		Расписание);
	ПараметрыЗадания.Вставить("Параметры",		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПодключения));
	Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	ПараметрыПодключения.ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	ОбновитьПараметрыРегламентногоЗаданияПодключениеСервисаКабинетСотрудника(ПараметрыПодключения);
	
КонецПроцедуры

Процедура ЗавершитьПодключениеКСервису(ПараметрыПодключения, ОшибкаСоздания, СсылкаДляАдминистратора = "")
	
	УдалитьРегламентноеЗадание(ПараметрыПодключения);
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Если ОшибкаСоздания Тогда
		ОчиститьДанныеПриОтключенииСервиса(Ложь, Ложь);
		ИнтеграцияУправлениеПерсоналомМенеджер.УстановитьСостояниеПодключения(Приложение, Перечисления.СостоянияПодключенияПриложения.ОшибкаСоздания);
	Иначе
		ИнтеграцияУправлениеПерсоналомМенеджер.УстановитьСостояниеПодключения(Приложение, Перечисления.СостоянияПодключенияПриложения.Создано,, СсылкаДляАдминистратора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыРегламентногоЗаданияПодключениеСервисаКабинетСотрудника(ПараметрыПодключения)
	Изменения = Новый Структура;
	Изменения.Вставить("Параметры", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПодключения));
	РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыПодключения.ИдентификаторЗадания, Изменения);
КонецПроцедуры

Процедура УдалитьРегламентноеЗадание(ПараметрыПодключения)

	РегламентныеЗаданияСервер.УдалитьЗадание(ПараметрыПодключения.ИдентификаторЗадания);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
