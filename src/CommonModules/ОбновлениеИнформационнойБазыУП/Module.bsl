////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеПредприятием.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "ERPWE";
	Описание.Версия = "2.5.17.219";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = "ERPWE";
	
	//++ Локализация
	Описание.Имя                            = "УправлениеПредприятием";
	Описание.ИдентификаторИнтернетПоддержки = "Enterprise20";
	//-- Локализация

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ОбновлениеИнформационнойБазыУП.ПриДобавленииОбработчиковОбновленияУП(Обработчики);
	
	Документы.ЭтапПроизводства2_2.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ОчередьПроизводственныхОпераций.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыКОтгрузке.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПланыСчетовМеждународногоУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СостоянияЭтаповПроизводства.ПриДобавленииОбработчиковОбновления(Обработчики);
	ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СтруктураЗаказа.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ТрудозатратыСтруктурыЗаказа.ПриДобавленииОбработчиковОбновления(Обработчики);
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
	ОбновлениеИнформационнойБазыУТ.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.СоздатьПредопределенныеНаборыСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.СоздатьПредопределенныеНаборыСвойств";

	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ОбновлениеУТДоERP";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ОбновлениеКАДоERP";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	
	ОбновлениеИнформационнойБазыЛокализация.ПриДобавленииОбработчиковПереходаНаУП(Обработчики);
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура: 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлей"
	 ИЛИ ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков, ИдентификаторИнтернетПоддержки");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	//++ НЕ УХ
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.2.1.13",
		"Роль.РазделМеждународныйФинансовыйУчет",
		"Роль.ПодсистемаМеждународныйФинансовыйУчет",
		ОписаниеПодсистемы.Имя);
	//-- НЕ УХ
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.56",
		"Роль.ДобавлениеИзменениеПричинЗадержекВыполненияМаршрутныхЛистов",
		"Роль.ДобавлениеИзменениеПричинЗадержекВыполненияЭтаповПроизводства",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.56",
		"Роль.ЧтениеПричинЗадержекВыполненияМаршрутныхЛистов",
		"Роль.ЧтениеПричинЗадержекВыполненияЭтаповПроизводства",
		ОписаниеПодсистемы.Имя);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УП (ERP).
//
Процедура ПервыйЗапуск() Экспорт
	
	Справочники.СтатьиКалькуляции.НастроитьСтатьюКалькуляцииПредопределенныхЭлементов();
	Справочники.ПланыСчетовМеждународногоУчета.СоздатьМеждународныйПланСчетовПервыйЗапуск();
	
КонецПроцедуры

Процедура ОбновлениеКАДоERP() Экспорт
	
	Справочники.СтатьиКалькуляции.НастроитьСтатьюКалькуляцииПредопределенныхЭлементов();
	ПроизводствоСервер.УстановитьИспользованиеПараметризацииРесурсныхСпецификаций();
	ПроизводствоСервер.УстановитьОпцииДляРаботыСПроизводственнымиОперациями();
	Константы.ДатаНачалаВеденияУчетаВыработкиПоОперациям.Установить(Дата("19800101"));
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("КомплекснаяАвтоматизация", Ложь);
	ЗначенияКонстант.Вставить("УправлениеПредприятием", Истина);

	#Область Варианты_обособления
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловВПроизводстве.Имя,             Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловВРемонтах.Имя,                 Перечисления.ВариантыОбособленияМатериаловВРемонтах.ЗаказНаРемонт);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловПриПриемеВПереработку.Имя,     Перечисления.ВариантыОбособленияПриПриемеВПереработку.ДоговорСДавальцем);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияПродукцииПриПриемеВПереработку.Имя,      Перечисления.ВариантыОбособленияПриПриемеВПереработку.ДоговорСДавальцем);
	#КонецОбласти
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ОбновлениеУТДоERP() Экспорт
	
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	Константы.ДатаНачалаВеденияУчетаВыработкиПоОперациям.Установить(Дата("19800101"));
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьЗначениеРазделенияПоОбластямДанных();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("УправлениеТорговлей", Ложь);
	ЗначенияКонстант.Вставить("УправлениеПредприятием", Истина);
	
	#Область Варианты_обособления
	//++ Устарело_Переработка24
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловВПереработке.Имя,              Перечисления.ВариантыОбособленияПриПередачеВПереработку.ЗаказПереработчику);
	//-- Устарело_Переработка24
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияУПереработчика2_5.Имя,                   Перечисления.ВариантыОбособленияПриПередачеВПереработку.НеОбосабливать);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияВПередачеПереработчику2_5.Имя,           Перечисления.ВариантыОбособленияПриПередачеВПереработку.ЗаказПереработчику);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловВПроизводстве.Имя,             Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловПриПередачеВПроизводство.Имя,  Перечисления.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НазначениеПолучателя);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловВРемонтах.Имя,                 Перечисления.ВариантыОбособленияМатериаловВРемонтах.ЗаказНаРемонт);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияМатериаловПриПриемеВПереработку.Имя,     Перечисления.ВариантыОбособленияПриПриемеВПереработку.ДоговорСДавальцем);
	ЗначенияКонстант.Вставить(Метаданные.Константы.ВариантОбособленияПродукцииПриПриемеВПереработку.Имя,      Перечисления.ВариантыОбособленияПриПриемеВПереработку.ДоговорСДавальцем);
	#КонецОбласти
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияУП(Обработчики) Экспорт

#Область ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти

#Область УстановитьКонстантуИспользоватьЗагрузкуПроизводственнойНСИ

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.УстановитьКонстантуИспользоватьЗагрузкуПроизводственнойНСИ";
	Обработчик.Версия = "2.5.13.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f7a23487-2434-4c2e-be37-db329d6f0574");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать загрузку производственной НСИ"".';
									|en = 'Sets the ""Use import of production master data"" constant value.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ХранитьОперацииВРесурсныхСпецификациях.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьЗагрузкуПроизводственнойНСИ.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуИспользоватьНесколькоОрганизацийПроизводствоИзДавальческогоСырья2_5

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.УстановитьКонстантуИспользоватьНесколькоОрганизацийПроизводствоИзДавальческогоСырья2_5";
	Обработчик.Версия = "2.5.17.26";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d845d99f-0c32-485f-93b8-113ce4fcd2e5");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать несколько организаций и производство из давальческого сырья 2.5"".';
									|en = 'Sets the value of the ""Use multiple companies and subcontracting 2.5"" constant.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьНесколькоОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьПроизводствоИзДавальческогоСырья2_5.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьНесколькоОрганизацийПроизводствоИзДавальческогоСырья2_5.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
#КонецОбласти

#Область УстановитьКонстантуИспользоватьНесколькоОрганизацийПроизводствоНаСтороне2_5

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.УстановитьКонстантуИспользоватьНесколькоОрганизацийПроизводствоНаСтороне2_5";
	Обработчик.Версия = "2.5.17.26";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ed841252-38a9-43be-a448-06c2759ea6b7");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать несколько организаций и производство на стороне 2.5"".';
									|en = 'Sets the value of the ""Use multiple companies and production by third party 2.5"" constant.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьНесколькоОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьПроизводствоНаСтороне2_5.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьНесколькоОрганизацийПроизводствоНаСтороне2_5.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
#КонецОбласти

КонецПроцедуры

#Область УстановкаКонстанты_ИспользоватьЗагрузкуПроизводственнойНСИ

Процедура УстановитьКонстантуИспользоватьЗагрузкуПроизводственнойНСИ() Экспорт
	
	Константы.ИспользоватьЗагрузкуПроизводственнойНСИ.Установить(
		Константы.ХранитьОперацииВРесурсныхСпецификациях.Получить() И НЕ ОбщегоНазначения.РазделениеВключено());
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьНесколькоОрганизацийПроизводствоИзДавальческогоСырья2_5

Процедура УстановитьКонстантуИспользоватьНесколькоОрганизацийПроизводствоИзДавальческогоСырья2_5() Экспорт
	
	Константы.ИспользоватьНесколькоОрганизацийПроизводствоИзДавальческогоСырья2_5.Установить(
		Константы.ИспользоватьНесколькоОрганизаций.Получить()
		И Константы.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Получить());
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьНесколькоОрганизацийПроизводствоНаСтороне2_5

Процедура УстановитьКонстантуИспользоватьНесколькоОрганизацийПроизводствоНаСтороне2_5() Экспорт
	
	Константы.ИспользоватьНесколькоОрганизацийПроизводствоНаСтороне2_5.Установить(
		Константы.ИспользоватьНесколькоОрганизаций.Получить()
		И Константы.ИспользоватьПроизводствоНаСтороне2_5.Получить());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
