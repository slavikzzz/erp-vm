#Область СлужебныйПрограммныйИнтерфейс

#Область Обмен

Функция ЗагрузитьВходящиеДокументыУниверсально(ПараметрыЗагрузки, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("СообщенияПослеПодписания",       Неопределено);
	ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресДанныхЛогаЗапроса",         Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере());
	
	Организации = Новый Массив;
	Если ТипЗнч(ПараметрыЗагрузки.Организация) = Тип("Массив") Тогда
		Организации = ПараметрыЗагрузки.Организация;
	Иначе
		Организации.Добавить(ПараметрыЗагрузки.Организация);
	КонецЕсли;
	
	Операция           = Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов;
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции(, Ложь);

	Если ВидыПродукцииУчета.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС) <> Неопределено Тогда
		ВидМолочнойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	ИначеЕсли ВидыПродукцииУчета.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС) <> Неопределено Тогда
		ВидМолочнойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС;
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	Для Каждого ОрганизацияДляОбмена Из Организации Цикл
		
		Для Каждого ВидПродукции Из ВидыПродукцииУчета Цикл
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
				И ВидМолочнойПродукции <> ВидПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			АбстрактноеСообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
			
			АбстрактноеСообщениеJSON.ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
			АбстрактноеСообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
			
			АбстрактноеСообщениеJSON.Организация       = ОрганизацияДляОбмена;
			АбстрактноеСообщениеJSON.Документ          = Неопределено;
			АбстрактноеСообщениеJSON.ДокументОснование = Неопределено;
			
			АбстрактноеСообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
				Операция, Неопределено, Неопределено);
			
			АбстрактноеСообщениеJSON.ТекстСообщенияJSON  = Неопределено;
			АбстрактноеСообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			АбстрактноеСообщениеJSON.Версия              = Неопределено;
			АбстрактноеСообщениеJSON.ТребуетсяПодписание = Ложь;
			АбстрактноеСообщениеJSON.ПараметрыЗапроса    = ПараметрыЗагрузки; //.Инервал;
			
			АбстрактноеСообщениеJSON.ВидПродукции              = ВидПродукции;
			АбстрактноеСообщениеJSON.Операция                  = Операция;
			АбстрактноеСообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
			
			СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СертификатыДляПодписанияНаСервере  = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП.СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ДатаСледующейИтерации = ОбменДаннымиИСМП.ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                       И ПараметрыОбмена.СообщенияКПодписанию.Количество())
	                       Или (ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено
	                       И ПараметрыОбмена.КОбновлениюКлючейСессии.Количество());
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ОбменДаннымиИСМП.ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ОбменДаннымиИСМП.ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ОбменДаннымиИСМП.ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ОбменДаннымиИСМП.ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			ОбменДаннымиИСМП.ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.СообщенияПослеПодписания       = ПараметрыОбмена.СообщенияПослеПодписания;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание           = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии  = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию     = Неопределено;
		ПараметрыОбмена.СообщенияПослеПодписания = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ОбщегоНазначенияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВремяОжиданияОбработкиКвитанции() Экспорт
	
	// Ожидать квитанция в течение суток.
	ВремяОжидания = 60*60*24;
	
	Возврат ВремяОжидания;
	
КонецФункции

Функция ОпределитьСтанциюУправленияЗаказами(СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Успешно",                   Истина);
	ВозвращаемоеЗначение.Вставить("СтанцияУправленияЗаказами", Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкаОбмена",           Неопределено);
	
	РезультатПолученияНастройки = НастройкаОбменаСУЗ(
		ДополнительныеПараметры.ПараметрыОбмена,
		НоваяСтруктураПоискаНастроекОбменаСУЗ(Шапка));
	
	Если Не РезультатПолученияНастройки.Успешно Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			РезультатПолученияНастройки.ТекстОшибки);
		СообщенияJSON.Добавить(СообщениеJSON);
		ВозвращаемоеЗначение.Успешно = Ложь;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ВозвращаемоеЗначение.НастройкаОбмена           = РезультатПолученияНастройки.НастройкаОбмена;
	ВозвращаемоеЗначение.СтанцияУправленияЗаказами = РезультатПолученияНастройки.НастройкаОбмена.СтанцияУправленияЗаказами;
	
	Если ВозвращаемоеЗначение.СтанцияУправленияЗаказами = Неопределено Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.';
							|en = 'Не удалось определить активный СУЗ для организации %1.'"), Шапка.Организация));
		СообщенияJSON.Добавить(СообщениеJSON);
		ВозвращаемоеЗначение.Успешно = Ложь;
	ИначеЕсли РезультатПолученияНастройки.НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Формат обмена с СУЗ версии v1 не поддерживается для вида продукции: %1';
							|en = 'Формат обмена с СУЗ версии v1 не поддерживается для вида продукции: %1'") , Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		ВозвращаемоеЗначение.Успешно = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОпределитьСтанциюУправленияЗаказамиУпрощенно(СообщенияJSON, Операция, Шапка, ДополнительныеПараметры) Экспорт

	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();

	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = Шапка.Документ;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;

	СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
		Операция, Шапка.Документ, Шапка.ПоследнийНомерВерсии + 1);

	РезультатОпределенияСУЗ = ОпределитьСтанциюУправленияЗаказами(
		СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);

	Возврат РезультатОпределенияСУЗ;

КонецФункции

Функция НоваяСтруктураПоискаНастроекОбменаСУЗ(Основание = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Организация");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("Назначение");
	ВозвращаемоеЗначение.Вставить("СтанцияУправленияЗаказами");
	ВозвращаемоеЗначение.Вставить("ПроизводственныйОбъект");
	
	Если Основание <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Основание);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ЗагрузитьВходящиеДокументыДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыЗагрузки = ПараметрыФоновогоЗадания.ПараметрыЗагрузки;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ОбменДаннымиИСМП.ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ЗагрузитьВходящиеДокументыУниверсально(ПараметрыЗагрузки, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеШтрихкодовУпаковок(Объект, Отказ) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Объект, Неопределено, Объект.ВидПродукции);
	
	СписокУпаковок = Объект.ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	ЭтоМаркировкаМолочнойПродукции = (ТипЗнч(Объект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.УточнениеСведенийОКодахМаркировкиИСМП"))
		И ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Объект.ВидПродукции);

	Если ЭтоМаркировкаМолочнойПродукции Тогда
		УпаковкиБезУточнения = Объект.ШтрихкодыУпаковок.НайтиСтроки(
			Новый Структура("СрокГодности,ИдентификаторПроисхожденияВЕТИС",
				Дата(1,1,1), ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроисхожденияВЕТИС")));
		Если УпаковкиБезУточнения.Количество()<>СписокУпаковок.Количество() Тогда
			СписокУпаковок = Новый Массив;
			Для Каждого СтрокаТабличнойЧасти Из Объект.ШтрихкодыУпаковок Цикл
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодности)
						Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторПроисхожденияВЕТИС) Тогда
					СписокУпаковок.Добавить(СтрокаТабличнойЧасти.ШтрихкодУпаковки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(Объект.Товары, СписокУпаковок, ПараметрыСканирования);
	
	Если РезультатПроверки.ДанныеСоответствуют Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'В строке %1 для номенклатурной позиции %2 должно быть указано %5 %3, а подобрано - %4';
						|en = 'В строке %1 для номенклатурной позиции %2 должно быть указано %5 %3, а подобрано - %4'");
	ШаблонОшибкиЛишниеКоды = НСтр("ru = 'Для номенклатурной позиции %1 подобрано %3 %2, а соответствующая им строка табличной части ""Товары"" отсутствует';
									|en = 'Для номенклатурной позиции %1 подобрано %3 %2, а соответствующая им строка табличной части ""Товары"" отсутствует'");
	Если ЭтоМаркировкаМолочнойПродукции Тогда
		ШаблонОшибки = НСтр("ru = 'Для номенклатурной позиции %1 подобрано %3 %2, а суммарно в табличной части ""Товары"" должно быть указано - %4';
							|en = 'Для номенклатурной позиции %1 подобрано %3 %2, а суммарно в табличной части ""Товары"" должно быть указано - %4'");
	КонецЕсли;
	
	Для Каждого Расхождение Из РезультатПроверки.СтрокиСРасхождением Цикл
		Если Расхождение.НомерСтроки = -1 Тогда
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЛишниеКоды, Расхождение.Номенклатура, Расхождение.Указано, Расхождение.Представление);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект,"Товары",, Отказ);
		ИначеЕсли ЭтоМаркировкаМолочнойПродукции Тогда
			ТекстОшибки = СтрШаблон(ШаблонОшибки,
				Расхождение.Номенклатура, Расхождение.Указано, Расхождение.Представление, Расхождение.Необходимо);
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Расхождение.НомерСтроки, Расхождение.Поле);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, ПутьКТабличнойЧасти,, Отказ);
		Иначе
			ТекстОшибки = СтрШаблон(ШаблонОшибки,
				Расхождение.НомерСтроки, Расхождение.Номенклатура, Расхождение.Необходимо, Расхождение.Указано, Расхождение.Представление);
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Расхождение.НомерСтроки, Расхождение.Поле);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, ПутьКТабличнойЧасти,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШтрихкодовУпаковокПеремещенияМеждуМОД(Объект, Отказ) Экспорт
	
	ЭтоДокументВнутреннегоПеремещенияМеждуМОД = ТипЗнч(Объект) = Тип("ДокументОбъект.ПеремещениеМеждуМОДИСМП")
		Или ТипЗнч(Объект) = Тип("ДокументСсылка.ПеремещениеМеждуМОДИСМП");
		
	Если Не ЭтоДокументВнутреннегоПеремещенияМеждуМОД Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Объект);
	ПараметрыСканирования.СсылкаНаОбъект = Объект.Ссылка;
	
	РезультатПроверки = ТаблицаТоварыПеремещениеМеждуМОДСоответствуетСпискуУпаковокМаркируемойПродукции(Объект, ПараметрыСканирования);
	
	Если РезультатПроверки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииОбменаДанными

// Формирует текст счетчика по формату N из M.
//
// Параметры:
// 	ТекущийНомерГруппы - Число - текущий номер в группе.
// 	КоличествоГрупп - Число - Всего элементов в группе.
// Возвращаемое значение:
// 	Строка - Сформированный текст счетчика.
Функция ТекстКоличествоИзГруппы(ТекущийНомерГруппы, КоличествоГрупп) Экспорт
	Если КоличествоГрупп > ТекущийНомерГруппы Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 из %2';
								|en = '%1 из %2'"), ТекущийНомерГруппы, КоличествоГрупп);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область МаркировкаОстатков

// Заполняет колонку GTIN в переданный таблице значениями, пригодными для маркировки остатков, полученными с помощью
// (См. ИнтерфейсИСМП.НайтиПродукциюПоИННПроизводителя)
//
// Параметры:
// 	ТаблицаНоменклатуры   - ДанныеФормыКоллекция                      - Таблица номенклатуры для заполнения колонки GTIN:
// 	 * ЦелевойПол         - ПеречислениеСсылка.ЦелевойПолИСМП         - Целевой пол.
// 	 * СпособВводаВОборот - ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Способ ввода в оборот.
// 	 * КодТНВЭД           - Строка                                    - Код ТНВЭД будет взято первые два символа.
// 	 * GTIN               - Строка                                    - Поле GTIN, значение которого требуется заполнить,
// 	                                                                    если не заполнено.
// 	Организация  - ОпределяемыйТип.Организация - Оранизация-владелец.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// Возвращаемое значение:
//  Структура - Заполнить GTINМаркировки остатков:
// * ТребуетсяОбновлениеКлючаСессии - Булево - Обновление ключа сессии.
// * ТекстОшибки - Неопределено, Строка - Текст ошибки.
Функция ЗаполнитьGTINМаркировкиОстатков(ТаблицаНоменклатуры, Организация, ВидПродукции) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    Неопределено);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	НомерСтраницы           = 0;
	ПовторятьИтерацию       = Истина;
	СоответствиеСтрокПоиска = Новый Соответствие;
	
	Для Каждого СтрокаТовары Из ТаблицаНоменклатуры Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоиска = СтрокаДляПоискаGTINМаркировкиОстатков(ВидПродукции, СтрокаТовары);
		
		МассивСтрокТоварыПоСоответствию  = СоответствиеСтрокПоиска[СтрокаПоиска];
		
		Если МассивСтрокТоварыПоСоответствию = Неопределено Тогда
			МассивСтрокТоварыПоСоответствию = Новый Массив;
			СоответствиеСтрокПоиска.Вставить(СтрокаПоиска, МассивСтрокТоварыПоСоответствию);
		КонецЕсли;
		
		МассивСтрокТоварыПоСоответствию.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	КешОписанияОстатков = Новый Соответствие();
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ВидПродукции",        ВидПродукции);
	ПараметрыЗаполнения.Вставить("Организация",         Организация);
	ПараметрыЗаполнения.Вставить("КешОписанияОстатков", КешОписанияОстатков);
	ПараметрыЗаполнения.Вставить("СтрокиПоиска",        СоответствиеСтрокПоиска);
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		ДанныеКэшаОписанияОстатков = РегистрыСведений.КэшОписанияОстатковИСМП.ДанныеДляПоискаПриЗаполненииGTIN(ПараметрыЗаполнения);
		ЗаполнитьПоОписаниюОстатков(
			ПараметрыЗаполнения,
			ДанныеКэшаОписанияОстатков);
		
	КонецЕсли;
	
	Пока СоответствиеСтрокПоиска.Количество() И ПовторятьИтерацию Цикл
		
		РезультатЗапроса = ИнтерфейсИСМП.НайтиПродукциюПоИННПроизводителя(Неопределено, ВидПродукции, НомерСтраницы, Организация);
		НомерСтраницы    = НомерСтраницы + 1;
		
		Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат ВозвращаемоеЗначение;
		ИначеЕсли РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN = Неопределено Тогда
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
			Прервать;
		ИначеЕсли РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN.Количество() = 0 Тогда
			ПовторятьИтерацию = Ложь;
		КонецЕсли;
		
		ЗаполнитьПоОписаниюОстатков(
			ПараметрыЗаполнения,
			РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN,
			Истина);
		
		Если СоответствиеСтрокПоиска.Количество() = 0 Тогда
			ПовторятьИтерацию = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.СохранитьПредставлениеОписанияОстатков(КешОписанияОстатков);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует строку для передачи описания остатков
// 
// Параметры:
// 	СтрокаТовары - СтрокаТабличнойЧасти - Строка докумемента Заказа на эмиссию СУЗ
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// * release_method - Строка - Способ ввода в оборот
// * name           - Строка - Наименование товара
// * model          - Строка - Модель
// * tnved_code_2   - Строка - Начало кода ТНВЭД
// * product_gender - Строка - Целевой пол
// * consumer_age   - Строка - Возрастная категория
Функция ОбязательныеПоляОписанияОстатковПоСтрокеДокумента(СтрокаТовары, ВидПродукции) Экспорт
	
	СтрокаОписания = Новый Структура;
	ЗначениеТНВЭД  = ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(СтрокаТовары.КодТНВЭД, ВидПродукции);
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
		СтрокаОписания.Вставить("tnved_code", ЗначениеТНВЭД);
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		СтрокаОписания.Вставить("tnved_code_4", ЗначениеТНВЭД);
	Иначе
		СтрокаОписания.Вставить("tnved_code_2", ЗначениеТНВЭД);
	КонецЕсли;
	
	ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
		ВидПродукции, ЗначениеТНВЭД);
	
	Если ПараметрыОписанияОстатков.ИспользоватьЦелевойПол Тогда
		СтрокаОписания.Вставить("product_gender", ИнтерфейсСУЗСлужебный.ЦелевойПол(СтрокаТовары.ЦелевойПол));
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьВозрастнуюКатегорию Тогда
		СтрокаОписания.Вставить("consumer_age",
			ИнтерфейсСУЗСлужебный.ВозрастнаяКатегория(СтрокаТовары.ВозрастнаяКатегория));
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьМодель Тогда
		СтрокаОписания.Вставить("model", СокрЛП(СтрокаТовары.Модель));
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьТоварныйЗнак Тогда
		ТоварныйЗнак = СокрЛП(СтрокаТовары.ТоварныйЗнак);
		Если Не ЗначениеЗаполнено(ТоварныйЗнак)
			И (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.Духи) Тогда
			ТоварныйЗнак = "Отсутствует";
		КонецЕсли;
		СтрокаОписания.Вставить("brand", ТоварныйЗнак);
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьНаименование Тогда
		Если ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
			СтрокаОписания.Вставить(
				"name", СтрокаТовары.Наименование);
		Иначе
			СтрокаОписания.Вставить(
				"name", ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьСпособВводаВОборот Тогда
		СтрокаОписания.Вставить("release_method",
			ИнтерфейсСУЗСлужебный.СпособВыпускаВОборот(СтрокаТовары.СпособВводаВОборот, "ОСТАТКИ"));
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат СтрокаОписания;
	
КонецФункции

Функция НормализованноеСтроковоеЗначение(Знач ВходноеЗначение) Экспорт
	
	ВходноеЗначение = НРег(СокрЛП(ВходноеЗначение));
	
	Пока СтрНайти(ВходноеЗначение, "  ") > 0 Цикл
		ВходноеЗначение = СтрЗаменить(ВходноеЗначение, "  ", " ");
	КонецЦикла;
	
	Возврат ВходноеЗначение;
	
КонецФункции

#КонецОбласти

#Область XDTO

// Устанавливает значение свойства объекта XDTO.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ИмяСвойства - Строка - Имя свойства
//  ЗначениеСвойства - Неопределено, Строка, ОбъектXDTO, Произвольный - Значение свойства
//  КешОшибок - Структура из КлючИЗначение - кеш ошибок
//  Глубина - Неопределено - Глубина
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КешОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = РаботаСXMLИС.ДанныеДляРасшифровкиОшибок(,Глубина);
	ДанныеДляРасшифровкиОшибок.Таблица = ИнтеграцияИСМППовтИсп.ТаблицаПолейДанныйДляРасшифровкиОшибок();
	
	РаботаСXMLИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, ДанныеДляРасшифровкиОшибок);
	
КонецПроцедуры

#КонецОбласти

Функция ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(ПараметрыЗапроса, ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ;
	
	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор     = Строка(Новый УникальныйИдентификатор);
	СообщениеJSON.ЗагружатьДо       = ЗагружатьДо;
	
	СообщениеJSON.Организация       = ЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПолученияДанных(
		Операция);
	
	СообщениеJSON.ТекстСообщенияJSON  = Неопределено;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	СообщениеJSON.СообщениеОснование  = ЭлементОчереди.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	
	СообщениеJSON.ВидПродукции              = ЭлементОчереди.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
	СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	
	СообщенияJSON = Новый Массив;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	ОбменДаннымиИСМП.ПодготовитьСообщенияКПередаче(
		СообщенияJSON, ПараметрыОбмена,
		ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора());
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьКПередачеСообщениеНаЗакрытиеПодзаказаНаЭмиссиюКодовМаркировки(ЭлементОчередиОснование, Знач ЗагружатьДо, ПараметрыЗапроса, ПараметрыОбмена, НастройкаОбменаСУЗ) Экспорт
	
	ЗагружатьДо = Строка(ЗагружатьДо);
	Операция    = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ;
	
	ФорматОбменаV3 = НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3;
	
	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор);
	СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
	
	СообщениеJSON.Организация       = ЭлементОчередиОснование.Организация;
	СообщениеJSON.Документ          = ЭлементОчередиОснование.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчередиОснование.ДокументОснование;
	
	СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
		Операция);
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = ФорматОбменаV3;
	
	СообщениеJSON.СообщениеОснование  = ЭлементОчередиОснование.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	
	СообщениеJSON.ВидПродукции              = ЭлементОчередиОснование.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
	СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	
	Если ФорматОбменаV3 Тогда
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("orderId", ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
		Если ПараметрыЗапроса.Свойство("GTIN") Тогда
			ТелоЗапроса.Вставить("gtin", ПараметрыЗапроса.GTIN);
		КонецЕсли;
		СообщениеJSON.ТекстСообщенияJSON  = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		СообщениеJSON.ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	ДанныеПовторногоПолучения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ДанныеПовторногоПолучения");
	
	Если ДанныеПовторногоПолучения <> Неопределено Тогда
		
		ЗагружатьДо = СообщениеJSON.Идентификатор;
		Операция    = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ;
		
		СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор);
		СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
		
		СообщениеJSON.Организация       = ЭлементОчередиОснование.Организация;
		СообщениеJSON.Документ          = ЭлементОчередиОснование.Документ;
		СообщениеJSON.ДокументОснование = ЭлементОчередиОснование.ДокументОснование;
		
		СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПолученияДанных(
			Операция);
		
		СообщениеJSON.ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщениеJSON.СообщениеОснование  = ЭлементОчередиОснование.Сообщение;
		
		СообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		
		СообщениеJSON.ВидПродукции              = ЭлементОчередиОснование.ВидПродукции;
		СообщениеJSON.Операция                  = Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
		СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
		
		СообщенияJSON.Вставить(0, СообщениеJSON);
		
	КонецЕсли;
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Если ФорматОбменаV3 Тогда
		
		СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
		ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП.СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
		
		ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
		
		// Добавить подписанные сообщения в очередь сообщений
		ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
			ПодписанныеСообщенияПоОрганизациям,
			ПараметрыОбмена);
	Иначе
		
		ОбменДаннымиИСМП.ПодготовитьСообщенияКПередаче(
			СообщенияJSON, ПараметрыОбмена,
			ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора());
		
	КонецЕсли;
	
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИндексКартинкиПоВидуУпаковкиИВидуПродукции(ВидУпаковки, ВидПродукции) Экспорт
	
	Если ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		Возврат -1;
	КонецЕсли;
	
	СмещениеВидаПродукции = 0;
	СмещениеВидаУпаковки  = 0;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		СмещениеВидаПродукции = 1;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
		СмещениеВидаПродукции = 7;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
		СмещениеВидаПродукции = 10;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия20 Тогда
		СмещениеВидаПродукции = 13;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		СмещениеВидаПродукции = 16;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь Тогда
		СмещениеВидаПродукции = 19;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность2025 Тогда
		СмещениеВидаПродукции = 22;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		СмещениеВидаПродукции = 25;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		СмещениеВидаПродукции = 30;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		СмещениеВидаПродукции = 33;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		СмещениеВидаПродукции = 36;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
		СмещениеВидаПродукции = 39;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
		СмещениеВидаПродукции = 45;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Антисептики Тогда
		СмещениеВидаПродукции = 48;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		СмещениеВидаПродукции = 51;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		СмещениеВидаПродукции = 57;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.СоковаяПродукция
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки Тогда
		СмещениеВидаПродукции = 54;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
		СмещениеВидаПродукции = 51;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС Тогда
		СмещениеВидаПродукции = 60;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция Тогда
		СмещениеВидаПродукции = 63;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС Тогда
		СмещениеВидаПродукции = 66;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС Тогда
		СмещениеВидаПродукции = 69;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты Тогда
		СмещениеВидаПродукции = 72;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей Тогда
		СмещениеВидаПродукции = 75;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция Тогда
		СмещениеВидаПродукции = 78;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РастительныеМасла Тогда
		СмещениеВидаПродукции = 81;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
		СмещениеВидаПродукции = 84;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС Тогда
		СмещениеВидаПродукции = 87;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция Тогда
		СмещениеВидаПродукции = 90;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОтопительныеПриборы Тогда
		СмещениеВидаПродукции = 93;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.СтроительныеМатериалы Тогда
		СмещениеВидаПродукции = 96;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПечатнаяПродукция Тогда
		СмещениеВидаПродукции = 99;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки Тогда
		СмещениеВидаПродукции = 102;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
		СмещениеВидаПродукции = 105;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		СмещениеВидаПродукции = 108;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КабельнаяПродукция Тогда
		СмещениеВидаПродукции = 111;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МоторныеМасла Тогда
		СмещениеВидаПродукции = 114;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Бакалея Тогда
		СмещениеВидаПродукции = 117;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПолимерныеТрубы Тогда
		СмещениеВидаПродукции = 126;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.СладостиИКондитерскиеИзделия Тогда
		СмещениеВидаПродукции = 129;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПечатныеПлаты Тогда
		СмещениеВидаПродукции = 123;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ДезинфицирующиеСредства Тогда
		СмещениеВидаПродукции = 120;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы2025 Тогда
		СмещениеВидаПродукции = 39;
	КонецЕсли;
	
	Если ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		СмещениеВидаУпаковки = 1;
	КонецЕсли;
	
	Возврат СмещениеВидаПродукции + СмещениеВидаУпаковки;
	
КонецФункции

Функция КоличествоКодовВСообщенииАгрегация() Экспорт
	Возврат 25000;
КонецФункции

Функция КоличествоКодовВСообщенииПодтверждениеПоступленияКИЗ() Экспорт
	Возврат 25000;
КонецФункции

Функция КоличествоКодовВСообщенииВводВОборот(ЭтоМаркировкаОстатков = Ложь) Экспорт
	Если ЭтоМаркировкаОстатков Тогда
		Возврат 5000;
	Иначе
		Возврат 25000;
	КонецЕсли;
КонецФункции

Функция КоличествоКодовВСообщенииАТК() Экспорт
	Возврат 25000;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбмена

Функция НоваяСтруктураАктивныхЗаказовПоСУЗ() Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДатаПоследнегоЗапросаПревышения", '00010101');
	СтруктураВозврата.Вставить("ТекущееКоличествоЗаказов",        0);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МаксимальноеКоличествоЗаказовВОчередиСУЗ()
	Возврат 100;
КонецФункции

Функция ПериодичностьОтправкиЗаказовПослеПревышения()
	Возврат 60;
КонецФункции

Функция МаксимальноеКоличествоСтрокВЗаказе() Экспорт
	Возврат 10;
КонецФункции

Функция МаксимальноеКоличествоКодовПоСтрокеЗаказа(ФорматОбмена) Экспорт
	
	МаксимальноеКоличествоКодовПоСтрокеЗаказа = Новый Структура;
	МаксимальноеКоличествоКодовПоСтрокеЗаказа.Вставить("ПределОбщий", 150000);
	
	Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3 Тогда
		МаксимальноеКоличествоКодовПоСтрокеЗаказа.Вставить("ПределДляОднойСтроки", 2000000);
	Иначе
		МаксимальноеКоличествоКодовПоСтрокеЗаказа.Вставить("ПределДляОднойСтроки", 150000);
	КонецЕсли;
	
	Возврат МаксимальноеКоличествоКодовПоСтрокеЗаказа;
	
КонецФункции

#КонецОбласти

#Область МаркировкаОстатков

Процедура ЗаполнитьПоОписаниюОстатков(ПараметрыЗаполнения, ДанныеОписанияОстатков, СохранятьОписание = Ложь)
	
	КешОписанияОстатков = ПараметрыЗаполнения.КешОписанияОстатков;
	ВидПродукции        = ПараметрыЗаполнения.ВидПродукции;
	Организация         = ПараметрыЗаполнения.Организация;
	СтрокиПоиска        = ПараметрыЗаполнения.СтрокиПоиска;
	НайденныеКлючи      = Новый Массив;
		
	Для Каждого КлючИЗначениеИсточник Из СтрокиПоиска Цикл
		
		Для Каждого КлючИЗначение Из ДанныеОписанияОстатков Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИскомоеНаименование = КлючИЗначениеИсточник.Ключ;
			СтрокиТоваров       = КлючИЗначениеИсточник.Значение;
			GTIN                = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(КлючИЗначение.Ключ);
			ОписаниеПозиции     = КлючИЗначение.Значение;
			НаименованиеПолное  = ОписаниеПозиции.НаименованиеПолное;
			
			Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
				Или ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
				ЧастиНазвания = Новый Массив();
				ЧастиНазвания.Добавить(ОписаниеПозиции.НаименованиеПолное);
				Если ЗначениеЗаполнено(ОписаниеПозиции.ТорговаяМарка) Тогда
					ЧастиНазвания.Добавить(ОписаниеПозиции.ТорговаяМарка);
				Иначе
					ЧастиНазвания.Добавить("Отсутствует");
				КонецЕсли;
				НаименованиеПолное = СтрСоединить(ЧастиНазвания, ". ");
			КонецЕсли;
			
			Если НормализованноеСтроковоеЗначение(НаименованиеПолное) = НормализованноеСтроковоеЗначение(ИскомоеНаименование) Тогда
				
				НайденныеСтроки = Новый Массив;
				
				Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
					
					Если Не СтрНачинаетсяС(СтрокаТовары.КодТНВЭД, ОписаниеПозиции.КодТНВЭД) Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТовары.GTIN = GTIN;
					НайденныеСтроки.Добавить(СтрокаТовары);
					
					Если СохранятьОписание И КешОписанияОстатков.Получить(GTIN) = Неопределено Тогда
						СтруктураОписания = Новый Структура();
						СтруктураОписания.Вставить("Представление",  ОписаниеПозиции.НаименованиеПолное);
						СтруктураОписания.Вставить("КодТНВЭД",       ОписаниеПозиции.КодТНВЭД);
						СтруктураОписания.Вставить("Организация",    Организация);
						СтруктураОписания.Вставить("ВидПродукции",   ВидПродукции);
						СтруктураОписания.Вставить("ДанныеОписания", СтрокаТовары);
						КешОписанияОстатков.Вставить(GTIN, СтруктураОписания);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
					СтрокиТоваров.Удалить(СтрокиТоваров.Найти(УдаляемаяСтрока));
				КонецЦикла;
				
				Если СтрокиТоваров.Количество() = 0 Тогда
					НайденныеКлючи.Добавить(ИскомоеНаименование);
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаКлюч Из НайденныеКлючи Цикл
		СтрокиПоиска.Удалить(СтрокаКлюч);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоЗапросСуществующихGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена)
	
	Возврат (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки
		И ЭлементОчереди.ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора());
	
КонецФункции

Функция ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование) Экспорт
	
	СообщениеОбработано = Истина;
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
			ПодготовитьСообщенияПоАбстрактнойАгрегации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТК Тогда
			ПодготовитьСообщенияПоАбстрактнойОперацииАТК(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
			ПодготовитьСообщенияПоАбстрактнойОперацииВводВОборотИмпортСФТС(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Приемка 
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонить Тогда
			ПодготовитьСообщенияПоАбстрактнойОперацииПриемкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать Тогда
			ПодготовитьСообщенияПоАбстрактнойОперацииОтгрузкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформации Тогда
			ПодготовитьСообщенияПоАбстрактнойОперацииСогласиеОПредоставлениеИнформации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки Тогда
			ПодготовитьСообщенияПоАбстрактнойОперацииОтчетОбИспользовании(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе Тогда
			ПодготовитьСообщенияПоЗапросуВыгрузкиИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		Иначе
			СообщениеОбработано = Ложь;
		КонецЕсли;

	ИначеЕсли ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗапросИдентификатораСоединенияСУЗ Тогда
			
			НастройкаОбменаСУЗ = ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ();
			НастройкаОбменаСУЗ.Сервер                           = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.Адрес;
			НастройкаОбменаСУЗ.Порт                             = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.Порт;
			НастройкаОбменаСУЗ.Таймаут                          = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.Таймаут;
			НастройкаОбменаСУЗ.ИспользоватьЗащищенноеСоединение = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.ИспользоватьЗащищенноеСоединение;
			НастройкаОбменаСУЗ.СтанцияУправленияЗаказами        = ЭлементОчереди.РеквизитыИсходящегоСообщения.СтанцияУправленияЗаказами;
			НастройкаОбменаСУЗ.Идентификатор                    = ЭлементОчереди.РеквизитыИсходящегоСообщения.СтанцияУправленияЗаказами.Идентификатор;
			НастройкаОбменаСУЗ.Организация                      = ЭлементОчереди.РеквизитыИсходящегоСообщения.Организация;
			НастройкаОбменаСУЗ.ПроизводственныйОбъект           = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПроизводственныйОбъект;
			НастройкаОбменаСУЗ.ФорматОбмена                     = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			
			ПередатьЗапросНаПолучениеИдентификатораСоединения(
				ЭлементОчереди,
				ПараметрыОбмена,
				НаборЗаписей,
				НастройкаОбменаСУЗ,
				НаборЗаписейОснование);
			
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗапросМестОсуществленияДеятельности Тогда
			
			НастройкаОбменаСУЗ = ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ();
			НастройкаОбменаСУЗ.Сервер                           = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.Адрес;
			НастройкаОбменаСУЗ.Порт                             = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.Порт;
			НастройкаОбменаСУЗ.Таймаут                          = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.Таймаут;
			НастройкаОбменаСУЗ.ИспользоватьЗащищенноеСоединение = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.ИспользоватьЗащищенноеСоединение;
			НастройкаОбменаСУЗ.ИдентификаторСоединения          = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыПодключенияКСУЗ.ИдентификаторСоединения;
			НастройкаОбменаСУЗ.СтанцияУправленияЗаказами        = ЭлементОчереди.РеквизитыИсходящегоСообщения.СтанцияУправленияЗаказами;
			НастройкаОбменаСУЗ.Идентификатор                    = ЭлементОчереди.РеквизитыИсходящегоСообщения.СтанцияУправленияЗаказами.Идентификатор;
			НастройкаОбменаСУЗ.Организация                      = ЭлементОчереди.РеквизитыИсходящегоСообщения.Организация;
			НастройкаОбменаСУЗ.ПроизводственныйОбъект           = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПроизводственныйОбъект;
			НастройкаОбменаСУЗ.ФорматОбмена                     = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			
			ПередатьЗапросНаПолучениеМестОсуществленияДеятельности(
				ЭлементОчереди,
				ПараметрыОбмена,
				НаборЗаписей,
				НастройкаОбменаСУЗ,
				НаборЗаписейОснование);
			
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца
			Тогда
			ОбменДаннымиИСМП.ПодготовитьСообщенияКПередачеПовторно(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
		Иначе
			
			РезультатПолученияНастройки = НастройкаОбменаСУЗ(
				ПараметрыОбмена,
				ЭлементОчереди,
				Истина);
			
			Если Не РезультатПолученияНастройки.Успешно Тогда
				Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
					Возврат СообщениеОбработано;
				Иначе
					ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
				ПередатьЗаказНаЭмиссиюКодовМаркировкиСУЗ(
					ЭлементОчереди,
					ПараметрыОбмена,
					НаборЗаписей,
					РезультатПолученияНастройки.НастройкаОбмена,
					НаборЗаписейОснование);
			ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
				ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ(
					ЭлементОчереди, ПараметрыОбмена, РезультатПолученияНастройки.НастройкаОбмена);
			Иначе
				ПередатьОтчетСУЗ(
					ЭлементОчереди,
					ПараметрыОбмена,
					НаборЗаписей,
					РезультатПолученияНастройки.НастройкаОбмена,
					НаборЗаписейОснование);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщениеОбработано;
	
КонецФункции

Функция ОбработатьЭлементОчередиПолученияДанных(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	СообщениеОбработано = Истина;
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
			
			РезультатПолученияНастройки = НастройкаОбменаСУЗ(
				ПараметрыОбмена,
				ЭлементОчереди,
				Истина);
				
			Если Не РезультатПолученияНастройки.Успешно Тогда
				Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
					Возврат СообщениеОбработано;
				Иначе
					ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			//@skip-check query-in-loop
			ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиИСМП(
				ЭлементОчереди, ПараметрыОбмена, РезультатПолученияНастройки.НастройкаОбмена);
			
		ИначеЕсли ЭтоЗапросСуществующихGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена) Тогда
			ЗапроситьСуществующиеGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Приемка
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонить
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТК Тогда
			// Фиктивная операция по изменению статуса и записи протокола обмена
			ОбменДаннымиИСМП.ЗагрузитьРезультатОбработкиАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса Тогда
			// Фиктивная операция по изменению статуса для трансформации агрегатов
			ЗагрузитьРезультатОбработкиАбстрактнойАгрегацииИзменениеРасчетСтатуса(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаАгент
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя 
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием 
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаПродажа
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
			ОбменДаннымиИСМП.ЗагрузитьРезультатОбработкиСДополнительнымиДействиями(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов Тогда
			ЗагрузитьВходящиеДокументы(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
			ЗагрузитьСодержаниеРезультатаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки Тогда
			ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатусаКодовМаркировки(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех Тогда
			ЗагрузитьРезультатПроверкаСтатусаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
			//Фиктивная операция для расчета статуса по нескольким сообщениями.
			//@skip-check query-in-loop
			ЗагрузитьРезультатОбработкиАбстрактнойОперацииРасчетСтатуса(
				ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание Тогда
			ЗагрузитьРезультатПодписанияСогласия(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе Тогда
			ЗагрузитьРезультатПолученияВыгрузки(ЭлементОчереди, ПараметрыОбмена);
		Иначе
			СообщениеОбработано = Ложь
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		
		ПроверятьДоступность =
			ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки
			И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса
			И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
			И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса
			И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса
			И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса;
		
		РезультатПолученияНастройки = НастройкаОбменаСУЗ(ПараметрыОбмена, ЭлементОчереди, ПроверятьДоступность);
		Если Не РезультатПолученияНастройки.Успешно Тогда
			Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
				Возврат СообщениеОбработано;
			Иначе
				ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаОбменаСУЗ = РезультатПолученияНастройки.НастройкаОбмена;
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
			// Фиктивная операция по изменению статуса и записи протокола обмена
			ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса Тогда
			// Фиктивная операция для расчета статуса по нескольким сообщениями.
			ЗагрузитьРезультатОбработкиЗапросаЗаказНаЭмиссиюСУЗАбстрактнаяОперация(
				ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ Тогда
			//@skip-check query-in-loop
			ЗагрузитьКодыМаркировки(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо Тогда
			//@skip-check query-in-loop
			ЗагрузитьКодыМаркировкиНезависимо(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ Тогда
			//@skip-check query-in-loop
			ЗагрузитьКодыМаркировкиПовторно(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
			ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ(
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса Тогда
			//Фиктивная операция для расчета статуса по нескольким сообщениями.
			//@skip-check query-in-loop
			ЗагрузитьРезультатОбработкиАбстрактнойОперацииРасчетСтатуса(
				ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
			//@skip-check query-in-loop
			ЗагрузитьРезультатОбработкиВводаВОборот(
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента Тогда
			ЗагрузитьРезультатПолученияКвитанцииДокументаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		Иначе
			ЗагрузитьРезультатОбработкиОтчетаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка';
								|en = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Возврат СообщениеОбработано;
	
КонецФункции

// Проверяет статус агрегата, полученный по данным ИС МП, в строках дерева, и наличие в дереве наборов и групповых упаковок.
// 1. Если агрегат не сформирован, его статус Неопределен.
// 2. Если присутствуют наборы, то агрегацию необходимо выполнять до ввода в оборот.
// 
// Параметры:
//  СтрокаДереваВерхнегоУровня - СтрокаДереваЗначений - Строка дерева значений.
//  
// Возвращаемое значение:
//  Булево - Истина, если найдены сформированные по данным ИС МП агрегаты.
//
Функция НайтиСформированныеАгрегатыПоДаннымИСМП(СтрокаДереваВерхнегоУровня)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрокаДереваВерхнегоУровня.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
		Результат.ЕстьОшибки = Истина;
		Если СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Результат.ТекстОшибки = ТекстОшибкиНайденыКодыНаборовГрупповыхУпаковокПриИмпортеСФТС();
		Иначе
			Результат.ТекстОшибки = ТекстОшибкиНайденыСформированныеАгрегатыИСМППриИмпортеСФТС();
		КОнецЕсли;
	Иначе
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			Результат = НайтиСформированныеАгрегатыПоДаннымИСМП(СтрокаДерева);
			Если Результат.ЕстьОшибки Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует и заполняет сообщения для операции "трансформация агрегатов" (с видом удаление) и "расформирование АТК" 
// по таблице маркированных товаров.
// 
// Параметры:
//  МаркированныеТовары - См. ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  СообщенияJSONТрансформация - Массив из Структура- соответствие сообщений для отправки, которое нужно заполнить 
//                                              сформированными сообщениями:
//   * Ключ - см. ОбменДаннымиИСМП.СтруктураСообщенияJSON
//   * Значение - Строка - Идентификатор сообщения.
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена.
//  ПараметрыОбработки - Структура:
//   * ОбрабатыватьКодыАТК - Булево - Истина, если требуется подготовить сообщения для расформирования АТК.
//
Процедура ПодготовитьКПередачеСообщенияДляТрансформацииАгрегатовИСМП(МаркированныеТовары, ОбщийЭлементОчереди,
	Знач ЗагружатьДо, СообщенияJSONТрансформация, ПараметрыОбмена, ПараметрыОбработки) Экспорт
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	НастройкиРазбораКодаМаркировки = Новый Структура;
	НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь));
	НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);

	АТКДляРасформирования    = Новый Соответствие;
	УпаковкиДляТрансформации = Новый Соответствие;
	
	КешДанныхРазбора = Новый Соответствие;
	Для Каждого СтрокаМаркированногоТовара Из МаркированныеТовары Цикл
		Если ЗначениеЗаполнено(СтрокаМаркированногоТовара.РодительскаяУпаковка) Тогда
			
			ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
				СтрокаМаркированногоТовара.РодительскаяУпаковка, ОбщийЭлементОчереди.ВидПродукции, КешДанныхРазбора,
				НастройкиРазбораКодаМаркировки);

			ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаМаркированногоТовара.РодительскаяУпаковка];
			ДанныеРазбора = ДанныеРазбораИПримечание.ДанныеРазбора;
			
			НормализованныйКодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
			
			Если ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
				Если ПараметрыОбработки.ОбрабатыватьКодыАТК Тогда
					АТКДляРасформирования.Вставить(НормализованныйКодУпаковки);
				КонецЕсли;
			Иначе
				ВложенныеКодыМаркировки = УпаковкиДляТрансформации.Получить(НормализованныйКодУпаковки);
				Если ВложенныеКодыМаркировки = Неопределено Тогда
					ВложенныеКодыМаркировки = Новый Массив;
				КонецЕсли;
				
				РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(
					СтрокаМаркированногоТовара.Штрихкод, ОбщийЭлементОчереди.ВидПродукции, НастройкиРазбораКодаМаркировки);
				НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора.ДанныеРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
				
				ВложенныеКодыМаркировки.Добавить(НормализованныйКодМаркировки);
				УпаковкиДляТрансформации[НормализованныйКодУпаковки] = ВложенныеКодыМаркировки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если АТКДляРасформирования.Количество() Тогда
		СписокПродукцииАТК = Новый Массив;
		Для Каждого КлючИЗначение Из АТКДляРасформирования Цикл
			СписокПродукцииАТК.Добавить(Новый Структура("atk", КлючИЗначение.Ключ));
		КонецЦикла;
		
		ТелоЗапросаРазагрегация = Новый Структура;
		ТелоЗапросаРазагрегация.Вставить("trade_participant_inn", ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаРазагрегация.Вставить("products_list",         СписокПродукцииАТК);
		
		Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление;
		СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаРазагрегация, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщенияJSONТрансформация.Добавить(СообщениеJSON);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из УпаковкиДляТрансформации Цикл
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
		КодУпаковки = КлючИЗначение.Ключ;
		
		ТелоЗапросаУдаление = Новый Структура;
		
		ТелоЗапросаУдаление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаУдаление.Вставить("participant_inn",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаУдаление.Вставить("reaggregation_type", "REMOVING");
		ТелоЗапросаУдаление.Вставить("uitu",               КодУпаковки);
		ТелоЗапросаУдаление.Вставить("uit_uitu_list",      Новый Массив);
	
		Для Каждого КодМаркировки Из КлючИЗначение.Значение Цикл
			reaggregationUnit = Новый Структура;
			reaggregationUnit.Вставить("uit_uitu", КодМаркировки);
			ТелоЗапросаУдаление.uit_uitu_list.Добавить(reaggregationUnit);
		КонецЦикла;
		
		СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаУдаление, Операция, ОбщийЭлементОчереди);
		
		СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
		СообщениеJSON.Описание = СтрШаблон("%1 %2 (изменение)", ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(Операция), КодУпаковки);
		
		СообщенияJSONТрансформация.Добавить(СообщениеJSON);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует и заполняет массив сообщений для формирования АТК по документу Маркировка товаров ИС МП.
// 
// Параметры:
//  ТаблицаКодовМаркировки - ТаблицаЗначений:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - штрихкод упаковки.
//   * Штрихкод - Строка - значение штрихкода.
//  ДанныеШапки - См. ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  СообщенияJSON - Массив из см. СтруктураСообщенияJSON. - массив сообщений для отправки
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена.
//
Процедура ПодготовитьКПередачеСообщенияДляФормированияКодовАТКИСМП(ТаблицаКодовМаркировки, ДанныеШапки,
	ОбщийЭлементОчереди, Знач ЗагружатьДо, СообщенияJSON, ПараметрыОбмена) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаКодовМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ТаблицаКодовМаркировки.Штрихкод         КАК Штрихкод,
	|	ТаблицаКодовМаркировки.Номенклатура     КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаКодовМаркировки
	|ИЗ
	|	&ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО 
	|	Товары.Номенклатура,
	|	Товары.КодТНВЭД,
	|	Товары.СтавкаНДС
	|");
	
	ТекстЗапросаТаблицаТовары  = "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.КодТНВЭД     КАК КодТНВЭД,
	|	Товары.СтавкаНДС    КАК СтавкаНДС,
	|	ТаблицаКодовМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ТаблицаКодовМаркировки.Штрихкод         КАК Штрихкод
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|	ПО Товары.Номенклатура = ТаблицаКодовМаркировки.Номенклатура
	|ИТОГИ ПО
	|	&ПоляИтогов";

	ВариантФормированияАТКИСМП = ДанныеШапки.ВариантФормированияАТКИСМП;
	Если ВариантФормированияАТКИСМП = Перечисления.ВариантыФормированияАТКИСМП.КодТНВЭД Тогда
		ПолеИтогов = "КодТНВЭД";
	ИначеЕсли ВариантФормированияАТКИСМП = Перечисления.ВариантыФормированияАТКИСМП.КодТНВЭДНДС Тогда
		ПолеИтогов = "КодТНВЭД, СтавкаНДС";
	ИначеЕсли ВариантФормированияАТКИСМП = Перечисления.ВариантыФормированияАТКИСМП.Номенклатура Тогда
		ПолеИтогов = "Номенклатура";
	КонецЕсли;
	
	ТекстЗапросаТаблицаТовары = СтрЗаменить(ТекстЗапросаТаблицаТовары, "&ПоляИтогов", ПолеИтогов);
	СписокЗапросов.Добавить(
		ТекстЗапросаТаблицаТовары,
		"ШтрихкодыКФормированию");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                 ОбщийЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("ТаблицаКодовМаркировки", ТаблицаКодовМаркировки);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ШтрихкодыКФормированию = РезультатЗапроса["ШтрихкодыКФормированию"];
	
	РеквизитыОрганизации =  РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ДанныеШапки.Организация);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИННОрганизации", РеквизитыОрганизации.ИНН);
	Настройки.Вставить("КоличествоКодовВСообщенииАТК", КоличествоКодовВСообщенииАТК());

	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;

	Настройки.Вставить("ПараметрыНормализацииПрочее", ПараметрыНормализацииПрочее);

	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;

	НастройкиРазбораКодаМаркировки = Новый Структура;
	НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь));
	НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);

	Настройки.Вставить("НастройкиРазбораКодаМаркировки", НастройкиРазбораКодаМаркировки);

	ДеревоУпаковок = ШтрихкодыКФормированию.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		ЗаполнитьСообщенияJSONФормированиеАТК(
			СтрокаДерева,
			СообщенияJSON,
			ОбщийЭлементОчереди,
			ЗагружатьДо,
			Настройки);
	КонецЦикла;
	
КонецПроцедуры

// Формирует и заполняет массив сообщений для отправки для вида операции "Формирование АТК".
// 
// Параметры:
//  СтрокаДереваВерхнегоУровня - СтрокаДереваЗначений - Строка дерева значений.
//  СообщенияJSON - Массив из см. СтруктураСообщенияJSON
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  ПараметрыНормализацииПрочее - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки.
//  Настройки - Структура из КлючиЗначение:
//  * ИННОрганизации - Строка - ИНН организации.
//  * КоличествоКодовВСообщенииАТК - Число - максимальное количество кодов в сообщении.
//
Процедура ЗаполнитьСообщенияJSONФормированиеАТК(СтрокаДереваВерхнегоУровня, СообщенияJSON, ОбщийЭлементОчереди, ЗагружатьДо, Настройки)
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание;

	СписокПродукции            = Новый Массив;
	ГруппаНормализованныхКодов = Новый Массив;

	КоличествоКодовВСообщенииАТК = Настройки.КоличествоКодовВСообщенииАТК;
	ТекущееКоличествоКодов       = 0;

	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.Штрихкод) Тогда

			Если ТекущееКоличествоКодов = КоличествоКодовВСообщенииАТК Тогда
				ТелоЗапроса = Новый Структура;
				ТелоЗапроса.Вставить("trade_participant_inn", Настройки.ИННОрганизации);
				ТелоЗапроса.Вставить("products_list",         СписокПродукции);

				ПараметрыЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса);
				//@skip-check bsl-legacy-check-expression-type
				ПараметрыЗапроса.Вставить("ДанныеСообщения", ГруппаНормализованныхКодов);

				СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапроса, Операция, ОбщийЭлементОчереди);
				СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
				СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
				СообщениеJSON.Версия           = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;

				СообщенияJSON.Добавить(СообщениеJSON);

				СписокПродукции = Новый Массив;
				ГруппаНормализованныхКодов = Новый Массив;
				ТекущееКоличествоКодов = 0;
			КонецЕсли;

			РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(
				СтрокаДерева.Штрихкод, ОбщийЭлементОчереди.ВидПродукции, Настройки.НастройкиРазбораКодаМаркировки);
			КодДляПередачиИСМП = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, Настройки.ПараметрыНормализацииПрочее);

			СтрокаТЧ = Новый Структура;
			СтрокаТЧ.Вставить("ki", КодДляПередачиИСМП);

			СписокПродукции.Добавить(СтрокаТЧ);

			ГруппаНормализованныхКодов.Добавить(КодДляПередачиИСМП);
			ТекущееКоличествоКодов = ТекущееКоличествоКодов + 1;

		Иначе
			ЗаполнитьСообщенияJSONФормированиеАТК(СтрокаДерева, СообщенияJSON, ОбщийЭлементОчереди, ЗагружатьДо, Настройки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокПродукции.Количество() Тогда
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("trade_participant_inn", Настройки.ИННОрганизации);
		ТелоЗапроса.Вставить("products_list",         СписокПродукции);
		
		ПараметрыЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса);
		//@skip-check bsl-legacy-check-expression-type
		ПараметрыЗапроса.Вставить("ДанныеСообщения", ГруппаНормализованныхКодов);
		
		СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапроса, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		СообщениеJSON.Версия           = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает и заполняет структуру абстрактного сообщения очереди.
// 
// Параметры:
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП -  операция обмена.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  
// Возвращаемое значение:
//  Структура - см. СтруктураСообщенияJSON
//
Функция ЗаполнитьСообщениеJSONАбстрактнаяОперация(Операция, ОбщийЭлементОчереди)
	
	АбстрактноеСообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	
	АбстрактноеСообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
	АбстрактноеСообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
	АбстрактноеСообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
	АбстрактноеСообщениеJSON.Идентификатор     = Строка(Новый УникальныйИдентификатор());
	АбстрактноеСообщениеJSON.ЗагружатьДо       = ОбщийЭлементОчереди.Сообщение;
	
	АбстрактноеСообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(Операция, ОбщийЭлементОчереди.Документ);
	
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	АбстрактноеСообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	АбстрактноеСообщениеJSON.Версия              = Неопределено;
	АбстрактноеСообщениеJSON.ТребуетсяПодписание = Ложь;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса    = Неопределено;
	АбстрактноеСообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
	
	АбстрактноеСообщениеJSON.ВидПродукции              = ОбщийЭлементОчереди.ВидПродукции;
	АбстрактноеСообщениеJSON.Операция                  = Операция;
	АбстрактноеСообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	Возврат АбстрактноеСообщениеJSON;
	
КонецФункции

Процедура ПодготовитьКПередачеСообщениеЗапросаСтатусаКодов(ЭлементОчереди, ПараметрыОбмена)
	
	Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("КодыМаркировкиДляКонтроляСтатусов",                  Новый Массив);
	ПараметрыЗапроса.Вставить("ДопустимыеНачальныеСтатусыКодовОтчетОНанесении",     Новый Массив);
	ПараметрыЗапроса.Вставить("ОжидаемыеСтатусыКодовПослеПередачиОтчетаОНанесении", Новый Массив);
	ПараметрыЗапроса.Вставить("ОтчетПереданВСУЗ",                                   Ложь);
	ПараметрыЗапроса.Вставить("ПовторныйЗапросКвитанции",                           Ложь);
	ПараметрыЗапроса.Вставить("ИдентификаторЗаявки",                                "");
	ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений",              Ложь);
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса);
	ПараметрыЗапроса.ОтчетПереданВСУЗ = Истина;
	
	СообщениеJSON = ЗаполнитьСообщениеJSONАбстрактнаяОперация(Операция, ЭлементОчереди);
	СообщениеJSON.ИдентификаторЗаявки = ЭлементОчереди.ИдентификаторЗаявки;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	СообщениеJSON.Версия              = ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
	
	СообщенияJSON = Новый Массив;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	ОбменДаннымиИСМП.ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена, ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора());
	
КонецПроцедуры

#Область Агрегация

// Формирует и заполняет массив сообщений для расформирования агрегатов и АТК по документу Маркировка товаров ИС МП.
// 
// Параметры:
//  МаркированныеТовары - См. ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу.
//  ОбщийЭлементОчереди -  СтрокаТаблицыЗначений - строка ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена.
//  УпаковкиДокумента - Соответствие из КлючИЗначение - соотвествие упаковок обрабатываемого документа:
//   * Ключ - Строка - нормализованный код упаковки.
//   * Значение - Строка - код родительской упаковки.
//  СообщенияJSONОперацияУдаление - Массив из Структура - Пакет сообщений для отправки, которое нужно заполнить 
//                                                 сформированными сообщениями.
// Возвращаемое значение:
//  Структура - результат подготовки сообщений:
//  * ЕстьОшибки - Булево - истина, если при получении данных по данным ИСМП возникли ошибки.
//  * ТекстОшибки - Строка - описание ошибки.
//  * ТребуетсяОбновлениеКлючаСессии - Булево - признак необходимости обновления ключа сессии.
Функция ПодготовитьКПередачеСообщенияДляРазагрегацииКодовМаркировкиИСМП(
	МаркированныеТовары, ОбщийЭлементОчереди, Знач ЗагружатьДо,
	ПараметрыОбмена, УпаковкиДокумента, СообщенияJSONОперацияУдаление) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	СписокПродукции    = Новый Массив;
	СписокПродукцииАТК = Новый Массив;
	
	ПараметрыОбработкиУпаковок = Новый Структура;
	ПараметрыОбработкиУпаковок.Вставить("КешОбработаннныхУпаковок", Новый Соответствие);
	ПараметрыОбработкиУпаковок.Вставить("КешУпаковокКРазагрегации", Новый Соответствие);
	ПараметрыОбработкиУпаковок.Вставить("КешУпаковокВиртуальнаяРазагрегация", Новый Соответствие);
	
	Для Каждого СтрокаМаркированногоТовара Из МаркированныеТовары Цикл
		
		УпаковкаКРазагрегацииНайдена = Ложь;
		Если ЗначениеЗаполнено(СтрокаМаркированногоТовара.РодительскаяУпаковка) Тогда
			КодУпаковки = СтрокаМаркированногоТовара.РодительскаяУпаковка;
			
			Если ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[КодУпаковки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[КодУпаковки] = Истина;
			
			Если УпаковкиДокумента[КодУпаковки] = Неопределено Тогда
				
				РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаМаркированногоТовара.РодительскаяУпаковка, ОбщийЭлементОчереди.ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
				НормализованныйКодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
				
				ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[НормализованныйКодУпаковки] = Истина;
				
				Если УпаковкиДокумента[НормализованныйКодУпаковки] = Неопределено Тогда
					УпаковкаКРазагрегацииНайдена = Истина;
					Если РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
						// Согласно документации в АТК указываются только номера КИ.
						СписокПродукцииАТК.Добавить(Новый Структура("atk", НормализованныйКодУпаковки));
						Продолжить;
					Иначе
						ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Вставить(НормализованныйКодУпаковки, "uitu");
					КонецЕсли;
					
				Иначе
					УпаковкиДокумента[НормализованныйКодУпаковки] = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаМаркированногоТовара.СтрокаДерева <> Неопределено
				И СтрокаМаркированногоТовара.СтрокаДерева.Родитель <> Неопределено
				И ЗначениеЗаполнено(СтрокаМаркированногоТовара.СтрокаДерева.Родитель.РодительскаяУпаковка) Тогда
				
				РодительскаяУпаковка = СтрокаМаркированногоТовара.СтрокаДерева.Родитель.РодительскаяУпаковка;
				
				Результат = ОбработатьУпаковкиВерхнегоУровня(
					РодительскаяУпаковка,
					УпаковкиДокумента,
					ПараметрыОбработкиУпаковок,
					УпаковкаКРазагрегацииНайдена,
					ОбщийЭлементОчереди,
					ПараметрыНормализацииПрочее,
					ПараметрыОбмена);
				
				Если Результат.ЕстьОшибки Или Результат.ТребуетсяОбновлениеКлючаСессии Тогда
					Возврат Результат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из УпаковкиДокумента Цикл

		Если ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[КлючИЗначение.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Результат = ОбработатьУпаковкиВерхнегоУровня(
			КлючИЗначение.Значение,
			УпаковкиДокумента,
			ПараметрыОбработкиУпаковок,
			УпаковкаКРазагрегацииНайдена,
			ОбщийЭлементОчереди,
			ПараметрыНормализацииПрочее,
			ПараметрыОбмена);

		Если Результат.ЕстьОшибки Или Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Результат;
		КонецЕсли;

	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации Цикл
		СписокПродукции.Добавить(Новый Структура(КлючИЗначение.Значение, КлючИЗначение.Ключ));
	КонецЦикла;
	
	Если СписокПродукции.Количество() Тогда
		ТелоЗапросаРазагрегация = Новый Структура;
		ТелоЗапросаРазагрегация.Вставить("participant_inn", ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаРазагрегация.Вставить("products_list",   СписокПродукции);
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление;
		СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаРазагрегация, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщенияJSONОперацияУдаление.Добавить(СообщениеJSON);
		
	КонецЕсли;
	
	Если СписокПродукцииАТК.Количество() Тогда
		ТелоЗапросаРазагрегация = Новый Структура;
		ТелоЗапросаРазагрегация.Вставить("trade_participant_inn", ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаРазагрегация.Вставить("products_list",         СписокПродукцииАТК);
		
		Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление;
		СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаРазагрегация, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщенияJSONОперацияУдаление.Добавить(СообщениеJSON);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает иерархию родительских упаковок и заполняет соотвествие упаковок к разагрегации.
// Параметры:
//  РодительскаяУпаковка - Строка - значение кода родительской упаковки
//  УпаковкиДокумента - Соответствие из КлючИЗначение - соотвествие упаковок обрабатываемого документа:
//   * Ключ - Строка - нормализованный код упаковки.
//   * Значение - Строка - код родительской упаковки.
//  ПараметрыОбработкиУпаковок - Структура:
//   * КешОбработаннныхУпаковок- Соответствие из КлючИЗначение - кеш упаковок обработанных.
//   * КешУпаковокКРазагрегации - Соответствие из КлючИЗначение - кеш упаковок для разагрегации.
//   * КешУпаковокВиртуальнаяРазагрегация - Соответствие из КлючИЗначение - кеш упаковок, которые будут разагргегированы по данным сервиса.
//  УпаковкаКРазагрегацииНайдена - Булево
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыНормализацииПрочее - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки.
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена. 
// 
// Возвращаемое значение:
//  Структура - результат подготовки сообщений:
//  * ЕстьОшибки - Булево - истина, если при получении данных по данным ИСМП возникли ошибки.
//  * ТекстОшибки - Строка - описание ошибки.
//  * ТребуетсяОбновлениеКлючаСессии - Булево - признак необходимости обновления ключа сессии.
Функция ОбработатьУпаковкиВерхнегоУровня(Знач РодительскаяУпаковка, УпаковкиДокумента, 
	ПараметрыОбработкиУпаковок, УпаковкаКРазагрегацииНайдена,
	ОбщийЭлементОчереди, ПараметрыНормализацииПрочее, ПараметрыОбмена)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	Пока ЗначениеЗаполнено(РодительскаяУпаковка) Цикл
		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
			РодительскаяУпаковка, ОбщийЭлементОчереди.ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
		НормализованныйКодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
		
		// Контроль иерархии упаковок, добавленных к разагрегации. Отправлять упаковку нижнего уровня, родительские упаковки будут расформированы автоматически.
		Если УпаковкиДокумента[НормализованныйКодУпаковки] = Неопределено 
			И УпаковкиДокумента[РодительскаяУпаковка] = Неопределено Тогда
			Если УпаковкаКРазагрегацииНайдена Тогда
				ПараметрыОбработкиУпаковок.КешУпаковокВиртуальнаяРазагрегация.Вставить(НормализованныйКодУпаковки);
				Если ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Получить(НормализованныйКодУпаковки) <> Неопределено Тогда
					ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Удалить(НормализованныйКодУпаковки);
					Прервать;
				КонецЕсли;
			Иначе
				ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Вставить(НормализованныйКодУпаковки, "uitu");
				УпаковкаКРазагрегацииНайдена = Истина;
			КонецЕсли;
		ИначеЕсли УпаковкаКРазагрегацииНайдена Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[РодительскаяУпаковка] = Истина;
		ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[НормализованныйКодУпаковки] = Истина;
		
		МассивСтрокКодов = Новый Массив;
		ДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки();
		СтрокаКодаМаркировки = ДанныеКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировки, РезультатРазбора);
		
		МассивСтрокКодов.Добавить(СтрокаКодаМаркировки);
		РезультатЗапросаДанных = ИнтерфейсИСМП.СтатусыКодовМаркировки(МассивСтрокКодов, ОбщийЭлементОчереди.Организация);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДанных, ОбщийЭлементОчереди, ПараметрыОбмена) Тогда
			Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапросаДанных.ТекстОшибки) Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.ТекстОшибки = РезультатЗапросаДанных.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		РезультатЗапросаПоСтроке = РезультатЗапросаДанных.СтатусыКодовМаркировки.Получить(СтрокаКодаМаркировки);
		
		Если РезультатЗапросаПоСтроке <> Неопределено
			И РезультатЗапросаПоСтроке.Свойство("РодительскаяУпаковка") Тогда
			РодительскаяУпаковка = РезультатЗапросаПоСтроке.РодительскаяУпаковка;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирование сообщения по абстрактной операции по расчету статусов агрегации при подготовке очереди сообщений для создания агрегатов или АТК
// и заполнение реквизитов "ЗагружатьДо, ЗагружатьПосле" в подготовленных сообщениях для отправки.
// Последовательность отправки сообщений должна быть: 
// 1. Трансформация (добавление) агрегатов.
// 2. Агрегация (формирование новых агрегатов).
// 3. Трансформация (удаление) агрегатов.
// 4. Разагрегация (агрегатов и АТК).
// 
// Параметры:
//  СообщенияJSON - Массив из См. СтруктураСообщенияJSON- массив сообщений для заполнения (см. СтруктураСообщенияJSON).
//  ОбщийЭлементОчереди -  СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ПакетСообщений - Соответствие из КлючИЗначение - соответствие сообщений для обработки:
//   * Ключ - Число - Приоритет отправки.
//   * Значение - Массив из Структура - пакет сообщений одного уровня, могут обрабатываться параллельно.
//  СообщениеОснование - Строка - сообщение основание.
Процедура ПодготовитьКПередачеСообщениеАбстрактнаяАгрегацияИзменениеРасчетСтатуса(СообщенияJSON, ОбщийЭлементОчереди, ПакетСообщений, СообщениеОснование = "")

	ПриоритетыОбработки = Новый СписокЗначений();
	Для Каждого КлючИЗначение Из ПакетСообщений Цикл
		ПриоритетыОбработки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ПриоритетыОбработки.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	ПредыдущийПакетСообщений = Неопределено;
	Для Каждого ЭлементСписка Из ПриоритетыОбработки Цикл
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса;
		АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSONАбстрактнаяОперация(Операция, ОбщийЭлементОчереди);
		
		Если ЗначениеЗаполнено(СообщениеОснование) Тогда
			АбстрактноеСообщениеJSON.СообщениеОснование = СообщениеОснование;
		КонецЕсли;

		Если ПредыдущийПакетСообщений = Неопределено Тогда
			ПредыдущийПакетСообщений = СообщенияJSON;
		КонецЕсли;
		
		Для Каждого СообщениеJSON Из ПредыдущийПакетСообщений Цикл
			СообщениеJSON.ЗагружатьПосле = АбстрактноеСообщениеJSON.Идентификатор;
		КонецЦикла;
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Для Каждого СообщениеJSON Из ПакетСообщений[ЭлементСписка.Значение] Цикл
			СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
			СообщенияJSON.Добавить(СообщениеJSON);
		КонецЦикла;
		
		ПредыдущийПакетСообщений = ПакетСообщений[ЭлементСписка.Значение];
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьТелоЗапросаАгрегацияСоздание(ОбщийЭлементОчереди);
	
	Результат = Новый Структура;
	Результат.Вставить("participantId",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
	Результат.Вставить("participant_inn",  ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
	Результат.Вставить("aggregationUnits", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьТелоЗапросаРасформирование(ОбщийЭлементОчереди)

	ТелоЗапросаРасформированиеНабора = Новый Структура;
	ТелоЗапросаРасформированиеНабора.Вставить("participant_inn", ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
	ТелоЗапросаРасформированиеНабора.Вставить("products_list",   Новый Массив);

	Возврат ТелоЗапросаРасформированиеНабора;

КонецФункции

Функция ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМППоДеревуУпаковок(
	ДеревоУпаковок, ОбщийЭлементОчереди, Знач ЗагружатьДо, СообщенияJSON,
	ПараметрыОбмена, УпаковкиДокумента, КешСтатусовКодовМаркировки);
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ПараметрыАгрегации = Новый Структура;
	ПараметрыАгрегации.Вставить("ОбработанныеУпаковки",                  УпаковкиДокумента);
	ПараметрыАгрегации.Вставить("ЗагружатьДо",                           ЗагружатьДо);
	ПараметрыАгрегации.Вставить("УровниАгрегации",                       Новый Соответствие);
	ПараметрыАгрегации.Вставить("СообщенияJSONОперацияУдаление",         Новый Массив);
	ПараметрыАгрегации.Вставить("МаксимальноеКоличествоКодовВДокументе", КоличествоКодовВСообщенииАгрегация());
	ПараметрыАгрегации.Вставить("КодыНаборовКПроверке",                  Новый Массив);
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Результат = ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
			СтрокаДерева, ОбщийЭлементОчереди, ЗагружатьДо, СообщенияJSON,
			ПараметрыОбмена, ПараметрыАгрегации, КешСтатусовКодовМаркировки);
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если Результат.ЕстьОшибки Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	СообщенияАгрегации = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ПараметрыАгрегации.УровниАгрегации Цикл

		Если КлючИЗначение.Значение.ТелоЗапросаСоздание.aggregationUnits.Количество() Тогда
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ДанныеСообщения", КлючИЗначение.Значение.КодыУпаковокКАгрегации);

			СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(
				КлючИЗначение.Значение.ТелоЗапросаСоздание,
				Перечисления.ВидыОперацийИСМП.АгрегацияСоздание,
				ОбщийЭлементОчереди);

			СообщениеJSON.ЗагружатьДо      = ЗагружатьДо;
			СообщениеJSON.Версия           = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;

			КлючИЗначение.Значение.СообщенияJSONОперацияДобавление.Добавить(СообщениеJSON);

		КонецЕсли;

		Если КлючИЗначение.Значение.ТелоЗапросаСозданиеНабора.aggregationUnits.Количество() Тогда
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ДанныеСообщения", КлючИЗначение.Значение.КодыНаборовКАгрегации);

			СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(
				КлючИЗначение.Значение.ТелоЗапросаСозданиеНабора,
				Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора,
				ОбщийЭлементОчереди);

			СообщениеJSON.ЗагружатьДо      = ЗагружатьДо;
			СообщениеJSON.Версия           = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			
			КлючИЗначение.Значение.СообщенияJSONОперацияДобавление.Добавить(СообщениеJSON);
			
		КонецЕсли;

		Если КлючИЗначение.Значение.ТелоЗапросаРасформирование.products_list.Количество() Тогда

			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ДанныеСообщения", КлючИЗначение.Значение.КодыКРасформированию);

			// Сохранить пакет кодов в сообщение.
			СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(
				КлючИЗначение.Значение.ТелоЗапросаРасформирование,
				Перечисления.ВидыОперацийИСМП.АгрегацияУдаление,
				ОбщийЭлементОчереди);

			СообщениеJSON.ЗагружатьДо      = ЗагружатьДо;
			СообщениеJSON.Версия           = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;

			ПараметрыАгрегации.СообщенияJSONОперацияУдаление.Добавить(СообщениеJSON);

		КонецЕсли;

		СообщенияАгрегации.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.СообщенияJSONОперацияДобавление);

	КонецЦикла;
	
	МаксимальныйПриоритет = Неопределено;
	Для Каждого КлючИЗначение Из СообщенияАгрегации Цикл
		Если МаксимальныйПриоритет = Неопределено Тогда
			МаксимальныйПриоритет = КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Ключ > МаксимальныйПриоритет Тогда
			МаксимальныйПриоритет = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыАгрегации.СообщенияJSONОперацияУдаление.Количество() Тогда
		Если МаксимальныйПриоритет = Неопределено Тогда
			МаксимальныйПриоритет = 1;
		КонецЕсли;
		СообщенияАгрегации.Вставить(МаксимальныйПриоритет + 1, ПараметрыАгрегации.СообщенияJSONОперацияУдаление);
	КонецЕсли;

	Результат.Вставить("СообщенияАгрегации", СообщенияАгрегации);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьКПередачеСообщениеАгрегацииКодовМаркировкиИСМП(СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди, Знач ЗагружатьДо, СообщенияJSON,
	ПараметрыОбмена, ПараметрыАгрегации)
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	КодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);

	Если СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
		Или СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		ПараметрыАгрегации.ОбработанныеУпаковки[КодУпаковки] = СтрокаДереваВерхнегоУровня.РодительскаяУпаковка;
	КонецЕсли;

	ЭлементАгрегации = Новый Структура;
	ЭлементАгрегации.Вставить("unitSerialNumber", КодУпаковки);
	Если СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		ЭлементАгрегации.Вставить("aggregationType", "SETS_AGGREGATION");
	Иначе
		ЭлементАгрегации.Вставить("aggregationType", "AGGREGATION");
	КонецЕсли;
	ЭлементАгрегации.Вставить("sntins", Новый Массив);

	ЭлементыАгрегации = Новый Массив;
	ЭлементыАгрегации.Добавить(ЭлементАгрегации);
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		ЭлементАгрегации.sntins.Добавить(
			РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				СтрокаДерева, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее));
	КонецЦикла;

	// Количество вложенных кодов + код агрегата
	ТекущееКоличествоКодов = ЭлементАгрегации.sntins.Количество() + 1;

	УровеньАгрегации = СтрокаДереваВерхнегоУровня.Уровень();
	ДанныеУровняАгрегации = ПараметрыАгрегации.УровниАгрегации[УровеньАгрегации + 1];

	Если ДанныеУровняАгрегации = Неопределено Тогда
		
		ДанныеУровняАгрегации = Новый Структура;
		ДанныеУровняАгрегации.Вставить("КоличествоКодов",           0);
		ДанныеУровняАгрегации.Вставить("ТелоЗапросаСоздание",       ИнициализироватьТелоЗапросаАгрегацияСоздание(ОбщийЭлементОчереди));
		ДанныеУровняАгрегации.Вставить("КодыУпаковокКАгрегации",    Новый Массив);

		ДанныеУровняАгрегации.Вставить("КоличествоКодовНаборов",    0);
		ДанныеУровняАгрегации.Вставить("ТелоЗапросаСозданиеНабора", ИнициализироватьТелоЗапросаАгрегацияСоздание(ОбщийЭлементОчереди));
		ДанныеУровняАгрегации.Вставить("КодыНаборовКАгрегации",     Новый Массив);

		ДанныеУровняАгрегации.Вставить("КоличествоКодовКРасформированию", 0);
		ДанныеУровняАгрегации.Вставить("ТелоЗапросаРасформирование",      ИнициализироватьТелоЗапросаРасформирование(ОбщийЭлементОчереди));
		ДанныеУровняАгрегации.Вставить("КодыКРасформированию",            Новый Массив);

		ДанныеУровняАгрегации.Вставить("СообщенияJSONОперацияДобавление", Новый Массив);

		ПараметрыАгрегации.УровниАгрегации[УровеньАгрегации + 1] = ДанныеУровняАгрегации;

	КонецЕсли;

	// Дополнить текущий пакет кодов.
	Если СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		
		Если ДанныеУровняАгрегации.КоличествоКодовНаборов + ТекущееКоличествоКодов >= ПараметрыАгрегации.МаксимальноеКоличествоКодовВДокументе
			И ДанныеУровняАгрегации.КоличествоКодовНаборов > 0 Тогда
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ДанныеСообщения", ДанныеУровняАгрегации.КодыНаборовКАгрегации);

			// Сохранить пакет кодов в сообщение.
			СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(
				Новый Структура, Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора, ОбщийЭлементОчереди);
			СообщениеJSON.ЗагружатьДо        = ЗагружатьДо;
			СообщениеJSON.Версия             = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
			СообщениеJSON.ТекстСообщенияJSON = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ДанныеУровняАгрегации.ТелоЗапросаСоздание, Истина);
			СообщениеJSON.ПараметрыЗапроса   = ПараметрыЗапроса;

			ДанныеУровняАгрегации.СообщенияJSONОперацияДобавление.Добавить(СообщениеJSON);

			// Подготовка нового пакета к заполнению.
			ДанныеУровняАгрегации.ТелоЗапросаСозданиеНабора = ИнициализироватьТелоЗапросаАгрегацияСоздание(ОбщийЭлементОчереди);
			ДанныеУровняАгрегации.КоличествоКодовНаборов    = 0;
			ДанныеУровняАгрегации.КодыНаборовКАгрегации     = Новый Массив;

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеУровняАгрегации.ТелоЗапросаСозданиеНабора.aggregationUnits, ЭлементыАгрегации);
		ДанныеУровняАгрегации.КодыНаборовКАгрегации.Добавить(СтрокаДереваВерхнегоУровня.Штрихкод);

	Иначе

		Если ДанныеУровняАгрегации.КоличествоКодов + ТекущееКоличествоКодов >= ПараметрыАгрегации.МаксимальноеКоличествоКодовВДокументе
			И ДанныеУровняАгрегации.КоличествоКодов > 0 Тогда
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ДанныеСообщения", ДанныеУровняАгрегации.КодыУпаковокКАгрегации);

			// Сохранить пакет кодов в сообщение.
			СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(
				Новый Структура, Перечисления.ВидыОперацийИСМП.АгрегацияСоздание, ОбщийЭлементОчереди);
			СообщениеJSON.ЗагружатьДо        = ЗагружатьДо;
			СообщениеJSON.Версия             = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
			СообщениеJSON.ТекстСообщенияJSON = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ДанныеУровняАгрегации.ТелоЗапросаСоздание, Истина);
			СообщениеJSON.ПараметрыЗапроса   = ПараметрыЗапроса;
			
			ДанныеУровняАгрегации.СообщенияJSONОперацияДобавление.Добавить(СообщениеJSON);
			
			// Подготовка нового пакета к заполнению.
			ДанныеУровняАгрегации.ТелоЗапросаСоздание    = ИнициализироватьТелоЗапросаАгрегацияСоздание(ОбщийЭлементОчереди);
			ДанныеУровняАгрегации.КоличествоКодов        = 0;
			ДанныеУровняАгрегации.КодыУпаковокКАгрегации = Новый Массив;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеУровняАгрегации.ТелоЗапросаСоздание.aggregationUnits, ЭлементыАгрегации);
		ДанныеУровняАгрегации.КодыУпаковокКАгрегации.Добавить(СтрокаДереваВерхнегоУровня.Штрихкод);
		
	КонецЕсли;

	ДанныеУровняАгрегации.КоличествоКодов = ДанныеУровняАгрегации.КоличествоКодов + ТекущееКоличествоКодов;

	Возврат ДанныеУровняАгрегации;

КонецФункции

Функция ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
	СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди, Знач ЗагружатьДо, СообщенияJSON,
	ПараметрыОбмена, ПараметрыАгрегации, КешСтатусовКодовМаркировки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;

	Если (СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И СтрокаДереваВерхнегоУровня.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен) Тогда
		
		ПодготовитьКПередачеСообщениеАгрегацииКодовМаркировкиИСМП(
			СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди, ЗагружатьДо, СообщенияJSON,
			ПараметрыОбмена, ПараметрыАгрегации);
		
	// Статус упаковки отличается от статуса новой упаковки, требуется переагрегация
	ИначеЕсли ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН = СтрокаДереваВерхнегоУровня.ИННВладельца Тогда
		
		Если ЗначениеЗаполнено(СтрокаДереваВерхнегоУровня.ВидПродукции)
			И СтрокаДереваВерхнегоУровня.ВидПродукции <> ОбщийЭлементОчереди.ВидПродукции Тогда
			Результат.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Упаковка %1 принадлежит к товарной группе %2. Ожидаемая товарная группа %3';
					|en = 'Упаковка %1 принадлежит к товарной группе %2. Ожидаемая товарная группа %3'"),
				СтрокаДереваВерхнегоУровня.Штрихкод,
				СтрокаДереваВерхнегоУровня.ВидПродукции,
				ОбщийЭлементОчереди.ВидПродукции);
			Результат.ЕстьОшибки = Истина;
			Возврат Результат;
		КонецЕсли;
		
		КодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
		
		ТелоЗапросаУдаление      = Неопределено;
		ТелоЗапросаДобавление    = Неопределено;
		РезультатЗапросаПоСтроке = Неопределено;
		
		СтрокаДереваОбработана = Ложь;
		
		Если (СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				Или СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
			
			РезультатЗапросаПоСтроке = КешСтатусовКодовМаркировки[КодУпаковки];
			
			Если РезультатЗапросаПоСтроке = Неопределено Тогда
				
				ПодготовитьКПередачеСообщениеАгрегацииКодовМаркировкиИСМП(
					СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди, ЗагружатьДо, СообщенияJSON,
					ПараметрыОбмена, ПараметрыАгрегации);
				
				СтрокаДереваОбработана = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтрокаДереваОбработана Тогда
			
			Если РезультатЗапросаПоСтроке = Неопределено Тогда
				
				СтрокаКодаМаркировки = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(КодУпаковки, ОбщийЭлементОчереди.ВидПродукции);
				
				РезультатЗапросаДанных = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
					СтрокаКодаМаркировки,
					ОбщийЭлементОчереди.Организация);
				
				Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДанных, ОбщийЭлементОчереди, ПараметрыОбмена) Тогда
					Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
					Возврат Результат;
				ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаДанных.ТекстОшибки) Тогда
					Результат.ТекстОшибки = РезультатЗапросаДанных.ТекстОшибки;
					Результат.ЕстьОшибки = Истина;
					Возврат Результат;
				КонецЕсли;
				
				РезультатЗапросаПоСтроке = РезультатЗапросаДанных.СтатусыКодовМаркировки.Получить(СтрокаКодаМаркировки);
				
			КонецЕсли;
			
			ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных = Новый Соответствие;
			
			Если РезультатЗапросаПоСтроке <> Неопределено
				И РезультатЗапросаПоСтроке.ВложенныеУпаковки <> Неопределено Тогда
				
				Для Каждого КлючИЗначение Из РезультатЗапросаПоСтроке.ВложенныеУпаковки Цикл
					Если КлючИЗначение.Значение.ДанныеРазбора = Неопределено Тогда
						КодМаркировки = КлючИЗначение.Значение.Штрихкод;
					Иначе
						КодМаркировки = КлючИЗначение.Значение.ДанныеРазбора.НормализованныйКодМаркировки;
					КонецЕсли;
					ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных[КодМаркировки] = КлючИЗначение.Значение;
				КонецЦикла;
				
			КонецЕсли;
			
			ПараметрыАгрегации.ОбработанныеУпаковки[КодУпаковки] = СтрокаДереваВерхнегоУровня.РодительскаяУпаковка;
			
			ВложенныеУпаковки = Новый Соответствие;
			Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
				
				Если СтрокаДерева.ДанныеРазбора = Неопределено Тогда
					КодМаркировки = СтрокаДерева.Штрихкод;
				Иначе
					КодМаркировки = СтрокаДерева.ДанныеРазбора.НормализованныйКодМаркировки;
				КонецЕсли;
				
				ВложенныеУпаковки.Вставить(КодМаркировки, СтрокаДерева);
				
				ТребуетсяДобавление = (ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных[КодМаркировки] = Неопределено);
				Если ТребуетсяДобавление Тогда
					
					КодМаркировкиДляПередачи = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
						СтрокаДерева, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
					
					reaggregationUnit = Новый Структура;
					reaggregationUnit.Вставить("uit_uitu", КодМаркировкиДляПередачи);
					
					Если ТелоЗапросаДобавление = Неопределено Тогда
						ТелоЗапросаДобавление = Новый Структура;
						
						ТелоЗапросаДобавление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
						ТелоЗапросаДобавление.Вставить("participant_inn",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
						ТелоЗапросаДобавление.Вставить("reaggregation_type", "ADDING");
						ТелоЗапросаДобавление.Вставить("uitu",               КодУпаковки);
						ТелоЗапросаДобавление.Вставить("uit_uitu_list",      Новый Массив);
					КонецЕсли;
					
					ТелоЗапросаДобавление.uit_uitu_list.Добавить(reaggregationUnit);
					
					Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных Цикл
				
				КодМаркировки = КлючИЗначение.Ключ;
				СтрокаДанных  = КлючИЗначение.Значение;
				
				ТребуетсяУдаление = (ВложенныеУпаковки[КодМаркировки] = Неопределено);
				Если ТребуетсяУдаление Тогда
					
					КодМаркировкиДляПередачи = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
						СтрокаДанных, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
					
					Если ТелоЗапросаУдаление = Неопределено Тогда
						ТелоЗапросаУдаление = Новый Структура;
						
						ТелоЗапросаУдаление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
						ТелоЗапросаУдаление.Вставить("participant_inn",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
						ТелоЗапросаУдаление.Вставить("reaggregation_type", "REMOVING");
						ТелоЗапросаУдаление.Вставить("uitu",               КодУпаковки);
						ТелоЗапросаУдаление.Вставить("uit_uitu_list",      Новый Массив);
					КонецЕсли;
					
					reaggregationUnit = Новый Структура;
					reaggregationUnit.Вставить("uit_uitu", КодМаркировкиДляПередачи);
					ТелоЗапросаУдаление.uit_uitu_list.Добавить(reaggregationUnit);
					
					Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Упаковка %1 принадлежит ИНН %2';
				|en = 'Упаковка %1 принадлежит ИНН %2'"),
			СтрокаДереваВерхнегоУровня.Штрихкод,
			СтрокаДереваВерхнегоУровня.ИННВладельца);
		Результат.ЕстьОшибки = Истина;
		
		Возврат Результат;

	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение Тогда
		
		Если ТелоЗапросаДобавление <> Неопределено И ТелоЗапросаДобавление.uit_uitu_list.Количество() > 0 Тогда
			
			СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
			СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
			
			СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
			СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
			СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
			
			СообщениеJSON.Описание = СтрШаблон(
				НСтр("ru = '%1 %2 (добавление)';
					|en = '%1 %2 (добавление)'"),
				ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(Операция),
				СтрокаДереваВерхнегоУровня.Штрихкод);
			
			СообщениеJSON.ТекстСообщенияJSON  = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ТелоЗапросаДобавление, Истина);
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
			СообщениеJSON.ТребуетсяПодписание = Истина;
			СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить(
				"ДанныеСообщения",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					СтрокаДереваВерхнегоУровня.Штрихкод));
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			
			СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
			СообщениеJSON.Операция     = Операция;
			СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЕсли;
		
		Если ТелоЗапросаУдаление <> Неопределено И ТелоЗапросаУдаление.uit_uitu_list.Количество() > 0 Тогда
			
			СообщениеJSONУдаление = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
			СообщениеJSONУдаление.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СообщениеJSONУдаление.ЗагружатьДо   = ЗагружатьДо;
			
			СообщениеJSONУдаление.Организация       = ОбщийЭлементОчереди.Организация;
			СообщениеJSONУдаление.Документ          = ОбщийЭлементОчереди.Документ;
			СообщениеJSONУдаление.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
			
			СообщениеJSONУдаление.Описание = СтрШаблон(
				НСтр("ru = '%1 %2 (изменение)';
					|en = '%1 %2 (изменение)'"),
				ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(Операция),
				СтрокаДереваВерхнегоУровня.Штрихкод);
			
			СообщениеJSONУдаление.ТекстСообщенияJSON  = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ТелоЗапросаУдаление, Истина);
			СообщениеJSONУдаление.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSONУдаление.Версия              = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
			СообщениеJSONУдаление.ТребуетсяПодписание = Истина;
			СообщениеJSONУдаление.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить(
				"ДанныеСообщения",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					СтрокаДереваВерхнегоУровня.Штрихкод));
			СообщениеJSONУдаление.ПараметрыЗапроса = ПараметрыЗапроса;
			
			СообщениеJSONУдаление.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
			СообщениеJSONУдаление.Операция     = Операция;
			СообщениеJSONУдаление.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			
			ПараметрыАгрегации.СообщенияJSONОперацияУдаление.Добавить(СообщениеJSONУдаление);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл

		Результат = ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
			СтрокаДерева, ОбщийЭлементОчереди,
			ЗагружатьДо, СообщенияJSON, ПараметрыОбмена, ПараметрыАгрегации, КешСтатусовКодовМаркировки);

		Если Результат.ЕстьОшибки Или Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Результат;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиМОТП(ПараметрыОбработки, СтрокаДереваВерхнегоУровня) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",  Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбщийЭлементОчереди = ПараметрыОбработки.ЭлементОчереди;
	ПространствоИмен    = ПараметрыОбработки.МетаданныеXDTO.АгрегацияМОТП.ПространствоИмен;
	
	КоличествоКодовВДокументе = КоличествоКодовВСообщенииАгрегация();
	
	Если ПараметрыОбработки.СообщениеАгрегации = Неопределено Тогда
		
		РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыОбработки.ДанныеШапки.Организация);
		ПараметрыОбработки.ДанныеШапки.Вставить("ИНН", РеквизитыОрганизации.ИНН);
		
		ФайлXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Файл");
		УведомлениеXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Уведомление", ФайлXDTO);
		СведенияОбАгрегацииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "СведенияОбАгрегации", УведомлениеXDTO);
		ПараметрыОбработки.Вставить("СведенияОбАгрегацииXDTO", СведенияОбАгрегацииXDTO);
		
		// Инициализация
		АгрегацияСоздание = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
		СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(Новый Структура, АгрегацияСоздание, ОбщийЭлементОчереди);
		СообщениеJSON.Версия = ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
		
		ПараметрыОбработки.СообщениеАгрегации = СообщениеJSON;
		
		ПараметрыОбработки.Вставить("КоличествоВТекущейГруппе", 0);
		ПараметрыОбработки.Вставить("ТекущийПакетКодов",        Новый Массив);
		ПараметрыОбработки.Вставить("КодыУпаковокКАгрегации",   Новый Массив);
		
		КоличествоВТекущейГруппе = 0;
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("ПакетКодовВерхнегоУровня", Новый Массив);
		ДанныеСообщения.Вставить("КодыУпаковокКАгрегации",   Новый Массив);
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		
		РезультатПодготовкиСообщений = ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиМОТП(ПараметрыОбработки, СтрокаДерева);
		Если РезультатПодготовкиСообщений.ЕстьОшибки Тогда
			Возврат РезультатПодготовкиСообщений;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДереваВерхнегоУровня) = Тип("ДеревоЗначений") Тогда
			
			Если КоличествоВТекущейГруппе + ПараметрыОбработки.КоличествоВТекущейГруппе > КоличествоКодовВДокументе Тогда
				
				Если ДанныеСообщения.ПакетКодовВерхнегоУровня.Количество() Тогда 
					ЗаполнитьДанныеОГрупповыхУпаковкахXDTO(ДанныеСообщения, ПараметрыОбработки);
					ДанныеСообщения.ПакетКодовВерхнегоУровня = Новый Массив;
					ДанныеСообщения.КодыУпаковокКАгрегации   = Новый Массив;
				КонецЕсли;
				
				КоличествоВТекущейГруппе = 0;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеСообщения.ПакетКодовВерхнегоУровня, ПараметрыОбработки.ТекущийПакетКодов);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеСообщения.КодыУпаковокКАгрегации,   ПараметрыОбработки.КодыУпаковокКАгрегации);
			КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + ПараметрыОбработки.КоличествоВТекущейГруппе;
			
			ПараметрыОбработки.ТекущийПакетКодов        = Новый Массив;
			ПараметрыОбработки.КоличествоВТекущейГруппе = 0;
			ПараметрыОбработки.КодыУпаковокКАгрегации   = Новый Массив;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДереваВерхнегоУровня) = Тип("ДеревоЗначений") Тогда
		
		Если КоличествоВТекущейГруппе > 0 Тогда
			ЗаполнитьДанныеОГрупповыхУпаковкахXDTO(ДанныеСообщения, ПараметрыОбработки);
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если СтрокаДереваВерхнегоУровня.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
		Или СтрокаДереваВерхнегоУровня.Статус = Неопределено
		Или ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН = СтрокаДереваВерхнегоУровня.ИННВладельца Тогда
		
		СведенияОбАгрегацииXDTO = ПараметрыОбработки.СведенияОбАгрегацииXDTO;
		ГрупповаяУпаковкаXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
			ПространствоИмен, "ИнформацияОбАгрегировании", СведенияОбАгрегацииXDTO);
		
		КодУпаковки = ОбменДаннымиИСМП.КодМаркировкиДляПередачиИСМП(
			СтрокаДереваВерхнегоУровня, ПараметрыОбработки.ПараметрыНормализации);
		
		ЗаполнитьСвойствоXDTO(
			ГрупповаяУпаковкаXDTO, "КодГрупповойУпаковки", КодУпаковки, ПараметрыОбработки.СообщениеАгрегации);
		
		Если СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьСвойствоXDTO(
				ГрупповаяУпаковкаXDTO, "ТипУпаковки", "Транспортная", ПараметрыОбработки.СообщениеАгрегации);
		Иначе
			ЗаполнитьСвойствоXDTO(
				ГрупповаяУпаковкаXDTO, "ТипУпаковки", "Потребительская", ПараметрыОбработки.СообщениеАгрегации);
		КонецЕсли;
		
		ВложенныеКоды = Новый Массив;
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			
			ВложенныеКоды.Добавить(
				ОбменДаннымиИСМП.КодМаркировкиДляПередачиИСМП(
				СтрокаДерева, ПараметрыОбработки.ПараметрыНормализации));
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(
			ГрупповаяУпаковкаXDTO, "СписокКодовИдентификации",
			СтрСоединить(ВложенныеКоды, " "), ПараметрыОбработки.СообщениеАгрегации);
		
		ПараметрыОбработки.КоличествоВТекущейГруппе = ПараметрыОбработки.КоличествоВТекущейГруппе + ВложенныеКоды.Количество();
		ПараметрыОбработки.ТекущийПакетКодов.Добавить(ГрупповаяУпаковкаXDTO);
		ПараметрыОбработки.КодыУпаковокКАгрегации.Добавить(СтрокаДереваВерхнегоУровня.Штрихкод);
		
	Иначе
		
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Упаковка %1 принадлежит ИНН %2';
				|en = 'Упаковка %1 принадлежит ИНН %2'"),
			СтрокаДереваВерхнегоУровня.Штрихкод,
			СтрокаДереваВерхнегоУровня.ИННВладельца);
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОбработки.СообщениеАгрегации.ТекстОшибки) Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки =СтрШаблон(
			НСтр("ru = 'Внутренная ошибка формирования XML:
			|%1';
			|en = 'Внутренная ошибка формирования XML:
			|%1'"),
			ПараметрыОбработки.СообщениеАгрегации.ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьФайлXDTOДляАгрегации(ПространствоИмен, ПараметрыОбработки, СообщениеJSON)
	ФайлXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Файл");
	
	ВерсияПрограммы = ИнтерфейсМОТПСлужебный.ВерсияПрограммы();
	ИмяФайла        = ИнтерфейсМОТПСлужебный.ИмяФайлаXDTO(
		ПараметрыОбработки.ДанныеШапки, ПараметрыОбработки.МетаданныеXDTO.АгрегацияМОТП);
	
	ЗаполнитьСвойствоXDTO(ФайлXDTO, "ИмяФайла",        ИмяФайла,        СообщениеJSON);
	ЗаполнитьСвойствоXDTO(ФайлXDTO, "ВерсияПрограммы", ВерсияПрограммы, СообщениеJSON);
	
	// Уведомление
	УведомлениеXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Уведомление", ФайлXDTO);
	ЗаполнитьСвойствоXDTO(ФайлXDTO, "Уведомление", УведомлениеXDTO, СообщениеJSON);
	СведенияОбАгрегацииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "СведенияОбАгрегации", УведомлениеXDTO);
	
	ЗначениеДаты = Формат(ПараметрыОбработки.ДанныеШапки.Дата, "ДФ=dd.MM.yyyy;");
	ЗаполнитьСвойствоXDTO(СведенияОбАгрегацииXDTO, "Дата",  ЗначениеДаты,    СообщениеJSON);
	ЗаполнитьСвойствоXDTO(СведенияОбАгрегацииXDTO, "Время", ПараметрыОбработки.ДанныеШапки.Дата, СообщениеJSON);
	
	// ИНН
	ИННXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ИНН", СведенияОбАгрегацииXDTO);
	Если СтрДлина(ПараметрыОбработки.ДанныеШапки.ИНН) > 10 Тогда
		ИмяПоляИНН = "ИННФЛТип";
	Иначе
		ИмяПоляИНН = "ИННЮЛТип";
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(ИННXDTO, ИмяПоляИНН, ПараметрыОбработки.ДанныеШапки.ИНН, СообщениеJSON);
	ЗаполнитьСвойствоXDTO(СведенияОбАгрегацииXDTO, "ИНН", ИННXDTO, СообщениеJSON);
	
	// Сведения об агрегации
	ЗаполнитьСвойствоXDTO(
		УведомлениеXDTO, "СведенияОбАгрегации", СведенияОбАгрегацииXDTO, СообщениеJSON);
		
	Возврат ФайлXDTO;
КонецФункции

Процедура ЗаполнитьДанныеОГрупповыхУпаковкахXDTO(ДанныеСообщения, ПараметрыОбработки)
	
	ОбщийЭлементОчереди = ПараметрыОбработки.ЭлементОчереди;
	ПространствоИмен    = ПараметрыОбработки.МетаданныеXDTO.АгрегацияМОТП.ПространствоИмен;
	
	АгрегацияСоздание = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
	СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(Новый Структура, АгрегацияСоздание, ОбщийЭлементОчереди);
	СообщениеJSON.ЗагружатьДо = ОбщийЭлементОчереди.Сообщение;
	
	ПараметрыОбработки.СообщениеАгрегации = СообщениеJSON;
	
	ФайлXDTO = ПодготовитьФайлXDTOДляАгрегации(ПространствоИмен, ПараметрыОбработки, СообщениеJSON);
	
	Для Каждого ГрупповаяУпаковкаXDTO Из ДанныеСообщения.ПакетКодовВерхнегоУровня Цикл
		ЗаполнитьСвойствоXDTO(
			ФайлXDTO.Уведомление.СведенияОбАгрегации,
			"ИнформацияОбАгрегировании",
			ГрупповаяУпаковкаXDTO,
			ПараметрыОбработки.СообщениеАгрегации);
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ДанныеСообщения", ДанныеСообщения.КодыУпаковокКАгрегации);
	СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
	
	ПараметрыОбработки.ДанныеСообщений.Вставить(СообщениеJSON, ФайлXDTO);
	
КонецПроцедуры

// Инициализация параметров проверки агрегатов при подготовке сообщений к передаче
//
// Возвращаемое значение:
//  Структура:
//  * ПараметрыПроверкиИерархииАгрегатов - Неопределено
//  * КонтролироватьДопустимуюИерархиюУпаковок - Булево.
//  * КонтролироватьСоставАгрегатаПоДаннымИСМП - Булево.
//  * ПараметрыНормализации - Неопределено.
//  * КонтролироватьСоставГрупповойУпаковки - Булево.
Функция ИнициализироватьПараметрыПроверкиАгрегатов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыПроверкиИерархииАгрегатов",       Неопределено);
	Результат.Вставить("КонтролироватьДопустимуюИерархиюУпаковок", Ложь);
	Результат.Вставить("КонтролироватьСоставАгрегатаПоДаннымИСМП", Ложь);
	Результат.Вставить("ПараметрыНормализации",                    Неопределено);
	Результат.Вставить("КонтролироватьСоставГрупповойУпаковки",    Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьКонтрольСоставаАгрегатаПоДаннымИСМП(СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди, ПараметрыОбмена, ПараметрыНормализации)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",  Ложь);
	Результат.Вставить("ОбщиеОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрокаДереваВерхнегоУровня.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
		
		Если ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН <> СтрокаДереваВерхнегоУровня.ИННВладельца Тогда
			
			Результат.ЕстьОшибки = Истина;
			Результат.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Упаковка %1 принадлежит ИНН %2';
					|en = 'Упаковка %1 принадлежит ИНН %2'"),
				СтрокаДереваВерхнегоУровня.Штрихкод,
				СтрокаДереваВерхнегоУровня.ИННВладельца);
			Возврат Результат;
			
		КонецЕсли;
		
		КодУпаковки = ОбменДаннымиИСМП.КодМаркировкиДляПередачиИСМП(
			СтрокаДереваВерхнегоУровня, ПараметрыНормализации);
		
		ВложенныеКодыМаркировки = Новый Соответствие;
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			ВложенныеКодыМаркировки.Вставить(СтрокаДерева.НормализованныйШтрихкод, Истина);
		КонецЦикла;
		
		СтрокаКодаМаркировки = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(КодУпаковки, ОбщийЭлементОчереди.ВидПродукции);
		
		РезультатЗапросаДанных = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
			СтрокаКодаМаркировки,
			ОбщийЭлементОчереди.Организация);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДанных, ОбщийЭлементОчереди, ПараметрыОбмена) Тогда
			Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапросаДанных.ТекстОшибки) Тогда
			Результат.ТекстОшибки = РезультатЗапросаДанных.ТекстОшибки;
			Результат.ЕстьОшибки  = Истина;
			Результат.ОбщиеОшибки = Истина;
			Возврат Результат;
		КонецЕсли;
		
		РезультатЗапросаПоСтроке = РезультатЗапросаДанных.СтатусыКодовМаркировки.Получить(СтрокаКодаМаркировки);
		
		Если РезультатЗапросаПоСтроке <> Неопределено
			И РезультатЗапросаПоСтроке.ВложенныеУпаковки <> Неопределено Тогда
			Для Каждого КлючИЗначение Из РезультатЗапросаПоСтроке.ВложенныеУпаковки Цикл
				Если ВложенныеКодыМаркировки.Получить(КлючИЗначение.Ключ.НормализованныйШтрихкод) = Неопределено Тогда
					Результат.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Упаковка %1 по данным ГИС МТ содержит коды, которых нет в новой агрегации.
					           |Операция удаления кодов из агрегатов для табачной продукции не поддерживается. Создайте новую упаковку.';
					           |en = 'Упаковка %1 по данным ГИС МТ содержит коды, которых нет в новой агрегации.
					           |Операция удаления кодов из агрегатов для табачной продукции не поддерживается. Создайте новую упаковку.'"),
					КодУпаковки);
				Результат.ЕстьОшибки = Истина;
				Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Контроль вложенности упаковок при подготовке сообщений агрегации через СУЗ.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка верхнего уровня.
//  ПодчиненнаяСтрокаДерева - СтрокаДереваЗначений - добавляемая строка.
//  ПараметрыПроверки - См. ИнициализироватьПараметрыПроверкиАгрегатов.
// 
// Возвращаемое значение:
//  Строка - Описание ошибок, найденных при проверке. Пустая строка, если ошибок не найдено.
//
Функция ВыполнитьКонтрольДопустимойИерархииУпаковки(СтрокаДерева, ПодчиненнаяСтрокаДерева, ПараметрыПроверки) Экспорт
	
	Результат = "";
	ПараметрыПроверкиИерархииАгрегатов = ПараметрыПроверки.ПараметрыПроверкиИерархииАгрегатов;
	ДопустимыеВложенияПоВидуУпаковки   = ПараметрыПроверкиИерархииАгрегатов.Получить(СтрокаДерева.ВидУпаковки);
	ДопустимыеВложенияПоТипуШтрихкода  = ПараметрыПроверкиИерархииАгрегатов.Получить(СтрокаДерева.ТипШтрихкода);
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.ВидУпаковки) Тогда
		
		Результат = СтрШаблон(
			НСтр("ru = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.';
				|en = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.'"),
			ПодчиненнаяСтрокаДерева.Штрихкод);
		
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки) Тогда
		
		Результат = СтрШаблон(
			НСтр("ru = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.';
				|en = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.'"),
			СтрокаДерева.Штрихкод);
		
	ИначеЕсли ДопустимыеВложенияПоВидуУпаковки <> Неопределено
		И ДопустимыеВложенияПоВидуУпаковки.Найти(ПодчиненнаяСтрокаДерева.ВидУпаковки) = Неопределено
		И (СтрокаДерева.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		   Или СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		       И ДопустимыеВложенияПоТипуШтрихкода <> Неопределено
		       И ДопустимыеВложенияПоТипуШтрихкода.Найти(ПодчиненнаяСтрокаДерева.ВидУпаковки) = Неопределено) Тогда
		
		Результат = СтрШаблон(
			НСтр("ru = '%1 упаковка %2 не может содержать %3';
				|en = '%1 упаковка %2 не может содержать %3'"),
			СтрокаДерева.ВидУпаковки,
			СтрокаДерева.Штрихкод,
			ПодчиненнаяСтрокаДерева.Штрихкод);
		
	ИначеЕсли ПодчиненнаяСтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		И ДопустимыеВложенияПоТипуШтрихкода <> Неопределено Тогда
		Если ДопустимыеВложенияПоТипуШтрихкода.Найти(ПодчиненнаяСтрокаДерева.ТипШтрихкода) = Неопределено Тогда
			
			Результат = СтрШаблон(
				НСтр("ru = '%1 упаковка %2 не может содержать %3';
					|en = '%1 упаковка %2 не может содержать %3'"),
				СтрокаДерева.ТипШтрихкода,
				СтрокаДерева.Штрихкод,
				ПодчиненнаяСтрокаДерева.Штрихкод);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыПроверки.Свойство("КонтролироватьСоставГрупповойУпаковки")
		И ПараметрыПроверки.КонтролироватьСоставГрупповойУпаковки
		И СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		ВложенныеСтрокиГрупповойУпаковки = СтрокаДерева.Строки;
		ТекущийТипШтрихкода              = ПодчиненнаяСтрокаДерева.ТипШтрихкода;
		
		Для Каждого ВложеннаяСтрокаДерева Из ВложенныеСтрокиГрупповойУпаковки Цикл
			
			Если ВложеннаяСтрокаДерева.ТипШтрихкода <> ТекущийТипШтрихкода Тогда
				Результат = СтрШаблон(
					НСтр("ru = '%1 упаковка %2 не может содержать разные шаблоны кодов маркировки';
						|en = '%1 упаковка %2 не может содержать разные шаблоны кодов маркировки'"),
					СтрокаДерева.ВидУпаковки,
					СтрокаДерева.Штрихкод);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыПроверки.КонтролироватьСоставГрупповойУпаковки = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьСоставДопустимуюИерерхиюДереваУпаковок(ДеревоУпаковок, ОбщийЭлементОчереди, ПараметрыОбмена, ПараметрыПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	МассивОшибок = Новый Массив;

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		РезультатПроверки = ПроверитьСоставДопустимуюИерархиюУпаковки(СтрокаДерева, ОбщийЭлементОчереди, ПараметрыОбмена, ПараметрыПроверки);
		Если РезультатПроверки.ЕстьОшибки Тогда
			Результат.ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, РезультатПроверки.НайденныеОшибки);
		КонецЕсли;
		
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.ЕстьОшибки Тогда
		Результат.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьСоставДопустимуюИерархиюУпаковки(СтрокаДерева, ОбщийЭлементОчереди, ПараметрыОбмена, ПараметрыПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("НайденныеОшибки", Новый Массив);
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	Если ПараметрыПроверки.КонтролироватьСоставАгрегатаПоДаннымИСМП Тогда
		
		РезультатПроверки = ВыполнитьКонтрольСоставаАгрегатаПоДаннымИСМП(СтрокаДерева, ОбщийЭлементОчереди, ПараметрыОбмена, ПараметрыПроверки.ПараметрыНормализации);
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
		Если РезультатПроверки.ЕстьОшибки Тогда
			Результат.НайденныеОшибки.Добавить(РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		Если РезультатПроверки.ОбщиеОшибки Тогда
			ПараметрыПроверки.КонтролироватьСоставАгрегатаПоДаннымИСМП = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПроверкиВложенныхСтрок = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПроверки);
	
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		
		Если ПараметрыПроверки.КонтролироватьДопустимуюИерархиюУпаковок Тогда
			РезультатПроверки = ВыполнитьКонтрольДопустимойИерархииУпаковки(СтрокаДерева, ПодчиненнаяСтрокаДерева, ПараметрыПроверкиВложенныхСтрок);
			Если ЗначениеЗаполнено(РезультатПроверки) Тогда
				Результат.НайденныеОшибки.Добавить(РезультатПроверки);
			КонецЕсли;
		КонецЕсли;
		
		Если ПодчиненнаяСтрокаДерева.Строки.Количество() Тогда
			
			РезультатПроверки = ПроверитьСоставДопустимуюИерархиюУпаковки(ПодчиненнаяСтрокаДерева, ОбщийЭлементОчереди, ПараметрыОбмена, ПараметрыПроверки);
			Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
				Возврат РезультатПроверки;
			КонецЕсли;
			Если РезультатПроверки.ЕстьОшибки Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НайденныеОшибки, РезультатПроверки.НайденныеОшибки);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Результат.НайденныеОшибки.Количество() Тогда
		Результат.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПриемкаТоваровИСМП

//Преобразовывает вид операции документа к строковому представлению для передачи в ИС МП
//
// Параметры:
//  ОперацияДокумента - ПеречислениеСсылка.ВидыОперацийИСМП - операция документа
//  СообщениеJSON - См. ОбменДаннымиИСМП.СтруктураСообщенияJSON
//
// Возвращаемое значение:
//  Строка, Неопределено - вид операции для ИС МП.
Функция ВидОперацииДокументаИСМП(ОперацияДокумента, СообщениеJSON)
	
	ВидОперации = Неопределено;
	
	Если ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаПродажа Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия Тогда
		ВидОперации = "COMMISSION";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаАгент Тогда
		ВидОперации = "AGENT";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля
		Или ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ
		Или ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ Тогда
		ВидОперации = "";
	Иначе
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Неизвестный вид операции документа Приемка товаров ИС МП: %1';
					|en = 'Неизвестный вид операции документа Приемка товаров ИС МП: %1'"), ОперацияДокумента));
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

Процедура ДополнитьКолонкиДереваДаннымиОперацииЕАЭС(ДеревоУпаковок)
	
	ДеревоУпаковок.Колонки.Добавить("ЗаполнятьДанныеОперацииЕАЭС", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("КодТНВЭД",    ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ДеревоУпаковок.Колонки.Добавить("Цена",        ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ДеревоУпаковок.Колонки.Добавить("СуммаНДС",    ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ДеревоУпаковок.Колонки.Добавить("СуммаАкциза", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Если ДеревоУпаковок.Колонки.Найти("ГоденДо") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	Если ДеревоУпаковок.Колонки.Найти("ДатаПроизводства") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ДатаПроизводства", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	ДеревоУпаковок.Колонки.Добавить("ВидДокументаСертификации",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС"));
	ДеревоУпаковок.Колонки.Добавить("НомерДокументаСертификации", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоУпаковок.Колонки.Добавить("ДатаДокументаСертификации",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
КонецПроцедуры

Функция ДополнитьДеревоУпаковокДаннымиТоваров(ДеревоУпаковок, ИсточникДанных, ИменаКолонокДляЗаполнения, ДоступенСрокГодности, СообщениеJSON)
	
	ЕстьОшибки = Ложь;
	
	ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина);
	ПараметрыОтбораGTIN = Новый Структура("GTIN");
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаДерева);
			Если ДоступенСрокГодности Тогда
				ПараметрыОтбора.Вставить("СрокГодности", СтрокаДерева.ГоденДо);
			КонецЕсли;
			СтрокаДерева.ЗаполнятьДанныеОперацииЕАЭС = Истина;
			НайденныеСтроки = ИсточникДанных.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() = 0 И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыОтбораGTIN, СтрокаДерева);
				НайденныеСтроки = ИсточникДанных.НайтиСтроки(ПараметрыОтбораGTIN);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
					ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.';
								|en = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					ЕстьОшибки = Истина;
				Иначе
					ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена строка с GTIN %1.';
								|en = 'В табличной части ""Товары"" не найдена строка с GTIN %1.'"),
							ПараметрыОтбораGTIN.GTIN));
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаИсточникаДанных Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаИсточникаДанных, ИменаКолонокДляЗаполнения);
				Прервать;
			КонецЦикла;
		Иначе
			ЕстьОшибки = ЕстьОшибки Или ДополнитьДеревоУпаковокДаннымиТоваров(СтрокаДерева, ИсточникДанных, ИменаКолонокДляЗаполнения, ДоступенСрокГодности, СообщениеJSON);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Выполняет сравнение двух деревьев значений: Дерева по данным информационной базы, сформированнное по данным документа
//  и дерева, полученного из сервиса ИС МП.
//
// Параметры:
//  ДеревоУпаковок - см. ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок
//  ДеревоУпаковокПоДаннымСервиса - ДеревоЗначений - Дерево, полученное из сервиса Гос. ИС.
//  ПолнаяПроверкаДеревьев - Булево - Истина, если требуется двухстороннее сравнение деревьев.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами - См. ВыявитьРасхожденияВСтрокахДеревьев
Функция ВыявитьРасхожденияВСоставахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, ПолнаяПроверкаДеревьев = Истина)
	
	КэшПроверенныхСтрок = Новый Соответствие;
	КэшНенайденныхСтрок = Новый Массив;

	ДеревоУпаковокПоДаннымСервиса.Строки.Сортировать("Штрихкод", Истина);
	
	ДеревоУпаковокПоДаннымСервиса.Колонки.Добавить("НарушенСостав",         Новый ОписаниеТипов("Булево"));
	ДеревоУпаковокПоДаннымСервиса.Колонки.Добавить("НайденаВДругойКоробке", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковокПоДаннымСервиса.Колонки.Добавить("ОтсутствуетПоДаннымИБ", Новый ОписаниеТипов("Булево"));
	
	Если ПолнаяПроверкаДеревьев Тогда
		РезультатПроверки = ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, КэшПроверенныхСтрок,
			КэшНенайденныхСтрок, Истина);
		Если РезультатПроверки.ЕстьОшибки и КэшНенайденныхСтрок.Количество() > 0 Тогда
			РезультатПроверки.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Невозможно принять документ, выявлены излишки. %1';
					|en = 'Невозможно принять документ, выявлены излишки. %1'"),
				КэшНенайденныхСтрок[0].Штрихкод);
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	РезультатПроверки = ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковокПоДаннымСервиса, ДеревоУпаковок, КэшПроверенныхСтрок,
		КэшНенайденныхСтрок, Ложь);
	
	Если РезультатПроверки.ЕстьОшибки
		И Не ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
		РезультатПроверки.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно принять документ, выявлены расхождения. %1';
				|en = 'Невозможно принять документ, выявлены расхождения. %1'"),
			КэшНенайденныхСтрок[0].Штрихкод);
	КонецЕсли;

	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет поиск переданной строки в дереве значений. Поиск выполняется полным перебором строк в дереве значений
//
// Параметры:
//  СтрокаПоиска - СтрокаДереваЗначений - Строка дерева значений
//  ДеревоПроверки - ДеревоЗначений - Дерево значений, в котором осуществляется поиск
//
// Возвращаемое значение:
//  Неопределено, СтрокаДереваЗначений - Найденная строка дерева значений.
Функция НайтиСтрокиВИсходномДереве(СтрокаПоиска, ДеревоПроверки) Экспорт
	
	НайденнаяСтрока = Неопределено;
	СоответствующаяСтрокаДереваПроверки = ДеревоПроверки.Строки.Найти(СтрокаПоиска.НормализованныйШтрихкод, "НормализованныйШтрихкод");
	
	Если СоответствующаяСтрокаДереваПроверки = Неопределено Тогда
		Для Каждого СтрокаДереваПоиска Из ДеревоПроверки.Строки Цикл
			Если СтрокаДереваПоиска.Строки.Количество() Тогда 
				НайденнаяСтрока = НайтиСтрокиВИсходномДереве(СтрокаПоиска, СтрокаДереваПоиска);
				Если НайденнаяСтрока <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НайденнаяСтрока = СоответствующаяСтрокаДереваПроверки;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

// Получает код маркировки строки дерева в виде, необходимом для системы ИС МП.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева значений
//
// Возвращаемое значение
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиИСМП(СтрокаДерева)
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
		СтрокаДерева.Штрихкод, СтрокаДерева.ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
	Возврат ОбменДаннымиИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
	
КонецФункции

// Проверят Дерево значений 1 на соотствие Дерева значений 2. Подготавливает данные для отправки в ИС МП. Фиксирует расхождения.
//
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - Дерево значений для проверки
//  ДеревоЗначений2 - ДеревоЗначений - Дерево значений для поиска
//  КэшПроверенныхСтрок - Соответствие из КлючИЗначение - соответствие совпадающих строк, найденных при первой итерации
//  КэшНенайденныхСтрок - Массив из СтрокаДереваЗначений - Массив ненайденных строк
//  ПерваяИтерация - Булево - признак первой итерации операции сравнения
//  ДеревоПроверкиИсходное - ДеревоЗначений, Неопределено - Дерево упаковок для сравнения полным перебором.
//
// Возвращаемое значение
//  Структура - Структура со свойствами:
//  * НарушенСостав - Булево - Истина, если расхождений по коробке не выявлено.
//  * СоставУпаковок - Массив из Структура - Массив структур для формирования свойства products сообщения JSON.
//  * ЕстьОшибки - Булево - Истина, если выявлены расхождения при первой итерации.
Функция ВыявитьРасхожденияВСтрокахДеревьев(ДеревоЗначений1, ДеревоЗначений2, КэшПроверенныхСтрок,
	КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное = Неопределено)
	
	Если ПерваяИтерация И ДеревоПроверкиИсходное = Неопределено Тогда
		ДеревоПроверкиИсходное = ДеревоЗначений2;
	КонецЕсли;
	
	ПараметрыПроверки = НовыйРезультатОбработкиВложенийПриемкиТоваровИСМП();
	
	СоставКоробки = Новый Массив;
	
	ПромежуточныйМассив = Новый Массив;
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		СоответствующаяСтрокаДерева2 = КэшПроверенныхСтрок.Получить(СтрокаДерева1);
		Если СоответствующаяСтрокаДерева2 <> Неопределено Тогда
			ПараметрыПроверкиВложенныхСтрок = ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, СоответствующаяСтрокаДерева2,
				КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
			Если ТипЗнч(ДеревоЗначений1) = Тип("СтрокаДереваЗначений") Тогда
				
				Если ПараметрыПроверкиВложенныхСтрок.НарушенСостав Или СтрокаДерева1.НайденаВДругойКоробке
					Или СтрокаДерева1.НарушенСостав Тогда
					ПараметрыПроверки.НарушенСостав = Истина;
				КонецЕсли;
				
			Иначе
				
				ПараметрыПроверки.НарушенСостав = Ложь;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПромежуточныйМассив, ПараметрыПроверкиВложенныхСтрок.СоставУпаковок);
			Продолжить;
			
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			НайденнаяСтрокаДерева2 = ДеревоЗначений2.Строки.Найти(СтрокаДерева1.Штрихкод, "Штрихкод");
			
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				
				НайденнаяСтрокаДерева2 = НайтиСтрокиВИсходномДереве(СтрокаДерева1, ДеревоПроверкиИсходное);
				
				Если НайденнаяСтрокаДерева2 <> Неопределено Тогда
					
					НайденнаяСтрокаДерева2.НайденаВДругойКоробке = Истина;
					КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
					ДополнитьДанныеСтрокиДереваДляОперацийЕАЭС(НайденнаяСтрокаДерева2, СтрокаДерева1);
					
					Если ТипЗнч(ДеревоЗначений2) = Тип("СтрокаДереваЗначений") Тогда
						ДеревоЗначений2.НарушенСостав = Истина;
						КэшПроверенныхСтрок.Вставить(ДеревоЗначений2, ДеревоЗначений1);
					КонецЕсли;
					
					Если НайденнаяСтрокаДерева2.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
						ПараметрыПроверкиВложенныхСтрок = ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2,
							КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
						ПараметрыПроверки.ЕстьОшибки = ПараметрыПроверкиВложенныхСтрок.ЕстьОшибки;
					КонецЕсли;
				Иначе
					
					КэшНенайденныхСтрок.Добавить(СтрокаДерева1);
					ПараметрыПроверки.ЕстьОшибки = Истина;
					Прервать;
					
				КонецЕсли;
				
			Иначе
				КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ДополнитьДанныеСтрокиДереваДляОперацийЕАЭС(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ПараметрыПроверкиВложенныхСтрок = ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2,
					КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
				ПараметрыПроверки.ЕстьОшибки = ПараметрыПроверкиВложенныхСтрок.ЕстьОшибки;
				Если ПараметрыПроверки.ЕстьОшибки Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтрокаДерева1.ОтсутствуетПоДаннымИБ = Истина;
			ПараметрыПроверкиВложенныхСтрок =  ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2,
				КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
			
			Если ТипЗнч(ДеревоЗначений1) = Тип("СтрокаДереваЗначений") Тогда
				Если ПараметрыПроверкиВложенныхСтрок.НарушенСостав Или СтрокаДерева1.НайденаВДругойКоробке Тогда
					ПараметрыПроверки.НарушенСостав = Истина;
				КонецЕсли;
			Иначе
				ПараметрыПроверки.НарушенСостав = Ложь;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПромежуточныйМассив, ПараметрыПроверкиВложенныхСтрок.СоставУпаковок);
			
		КонецЕсли;
		
	КонецЦикла;
	Если Не ПерваяИтерация Тогда
		Если ТипЗнч(ДеревоЗначений1) = Тип("СтрокаДереваЗначений") Тогда
			
			СтрокаJSON = Новый Структура;
			
			Если ДеревоЗначений1.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				ИмяРеквизитаКИ = "uit_code";
			ИначеЕсли ДеревоЗначений1.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ИмяРеквизитаКИ = "uitu_code";
			КонецЕсли;
			
			Если ПараметрыПроверки.НарушенСостав Или ДеревоЗначений1.ОтсутствуетПоДаннымИБ
				Или ДеревоЗначений1.НарушенСостав Тогда
				СтрокаJSON.Вставить("accepted", Ложь);
			Иначе
				СтрокаJSON.Вставить("accepted", Истина);
				ДополнитьДанныеJSONДляОперацийЕАЭС(ДеревоЗначений1, СтрокаJSON);
			КонецЕсли;
			
			СтрокаJSON.Вставить(ИмяРеквизитаКИ, КодМаркировкиДляПередачиИСМП(ДеревоЗначений1));
			
			Если ДеревоЗначений1.Строки.Количество()=0 Тогда
				СоставКоробки.Добавить(СтрокаJSON);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПроверки.СоставУпаковок, СоставКоробки);
			Иначе
				СтрокаJSON.Вставить("children", ПромежуточныйМассив);
				СоставКоробки.Добавить(СтрокаJSON);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПроверки.СоставУпаковок, СоставКоробки);
			КонецЕсли;
			
			Если ДеревоЗначений1.НайденаВДругойКоробке Или ДеревоЗначений1.ОтсутствуетПоДаннымИБ
				Или ДеревоЗначений1.НарушенСостав Тогда
				ПараметрыПроверки.НарушенСостав = Истина;
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПроверки.СоставУпаковок, ПромежуточныйМассив);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыПроверки;
КонецФункции

// Новый результат обработки вложений приемки товаров ИСМП.
//
// Возвращаемое значение:
//  Структура - Новый результат обработки вложений приемки товаров ИСМП:
// * НарушенСостав - Булево -
// * СоставУпаковок - Массив из Произвольный -
// * ЕстьОшибки - Булево -
// * ТекстОшибки - Неопределено, Строка -
Функция НовыйРезультатОбработкиВложенийПриемкиТоваровИСМП()

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("НарушенСостав",  Ложь);
	ПараметрыПроверки.Вставить("СоставУпаковок", Новый Массив);
	ПараметрыПроверки.Вставить("ЕстьОшибки",     Ложь);
	ПараметрыПроверки.Вставить("ТекстОшибки",    Неопределено);

	Возврат ПараметрыПроверки

КонецФункции

Процедура ДополнитьДанныеСтрокиДереваДляОперацийЕАЭС(СтрокаПриемник, СтрокаИсточник)
	
	СписокСвойствДляЗаполнения = "ЗаполнятьДанныеОперацииЕАЭС, КодТНВЭД, Цена, СуммаНДС,
	                             |ВидДокументаСертификации, НомерДокументаСертификации, ДатаДокументаСертификации,
	                             |ДатаПроизводства, ГоденДо, СуммаАкциза";
	Если СтрокаИсточник.ЗаполнятьДанныеОперацииЕАЭС Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, СписокСвойствДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеJSONДляОперацийЕАЭС(СтрокаДанных, СтрокаJSON);
	
	Если ТипЗнч(СтрокаДанных) <> Тип("СтрокаДереваЗначений")
		Или (СтрокаДанных.ЗаполнятьДанныеОперацииЕАЭС
		И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская) Тогда
		
		СтрокаJSON.Вставить("tnved_code",   СтрокаДанных.КодТНВЭД);
		СтрокаJSON.Вставить("product_cost", СтрокаДанных.Цена     * 100);
		СтрокаJSON.Вставить("product_tax",  СтрокаДанных.СуммаНДС * 100);
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидДокументаСертификации) Тогда
			
			СтрокаJSON.Вставить("certificate_document_data", Новый Массив);
			
			ДанныеСертификации = Новый Структура;
			ДанныеСертификации.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаДанных.ВидДокументаСертификации));
			ДанныеСертификации.Вставить("certificate_number", СтрокаДанных.НомерДокументаСертификации);
			ДанныеСертификации.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаДанных.ДатаДокументаСертификации));
			
			СтрокаJSON.certificate_document_data.Добавить(ДанныеСертификации);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаПроизводства) Тогда
			СтрокаJSON.Вставить("production_date", ИнтеграцияИС.ДатаUTC(СтрокаДанных.ДатаПроизводства));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ГоденДо) Тогда
			СтрокаJSON.Вставить("expiration_date", ИнтеграцияИС.ДатаUTC(СтрокаДанных.ГоденДо));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.СуммаАкциза) Тогда
			СтрокаJSON.Вставить("excisable", Истина);
			СтрокаJSON.Вставить("excise",    СтрокаДанных.СуммаАкциза * 100);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗагрузитьСодержаниеРезультатаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьСодержаниеРезультатаОбработкиДокумента");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КоличествоЗаписей", 300);
	ПараметрыОтбора.Вставить("Идентификатор",     ЭлементОчереди.ИдентификаторЗаявки);
	
	ПараметрыОбработки                    = ИнтерфейсИСМП.НовыеПараметрыОбработкиСоставаДокумента();
	ПараметрыОбработки.РасширенныеСтатусы = Истина;
	ПараметрыОбработки.ИмяПоляТела        = "products_list";
	Если ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
		ПараметрыОбработки.ИмяПоляСортировки = "name";
	Иначе
		ПараметрыОбработки.ИмяПоляСортировки = "key";
	КонецЕсли;
	
	РезультатОбработкиЗаявки = СоставДокументаПоИдентификатору(ЭлементОчереди, ПараметрыОтбора, ПараметрыОбработки);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления
			Или ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
				
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
			ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ
			Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
			
		КонецЕсли;
		
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована) Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ОбработкаЗагрузкиПереданногоДокумента(ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ПараметрыОбновленияСтатуса) Экспорт
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТК Тогда

		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			РезультатФормированияАТК = ПараметрыЗапроса.РезультатФормированияАТК;

			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ОтчетПроизводственнойЛинии", Ложь) Тогда

				Для Каждого ДанныеАТК Из РезультатФормированияАТК Цикл
					ДанныеЗаписи = Новый Структура;
					ДанныеЗаписи.Вставить("ДокументОснование", ЭлементОчереди.Документ);
					ДанныеЗаписи.Вставить("АТК",               ДанныеАТК.КодАТК);
					ДанныеЗаписи.Вставить("ДанныеАТК",         Новый ХранилищеЗначения(ДанныеАТК.ВложенныеКоды));
					ДанныеЗаписи.Вставить("Версия",            ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
					РегистрыСведений.ВложенныеШтрихкодыАТКИСМП.СохранитьАТКПоДокументу(ДанныеЗаписи);
				КонецЦикла;

			Иначе

				БлокировкаДокумент = Новый БлокировкаДанных;

				ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
				ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
					"Ссылка", Новый ОписаниеТипов("ДокументСсылка.МаркировкаТоваровИСМП"));
				ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;

				ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.МаркировкаТоваровИСМП");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				//@skip-check lock-out-of-try
				БлокировкаДокумент.Заблокировать();

				ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();

				УстановитьПривилегированныйРежим(Истина);
				Для Каждого ДанныеАТК Из РезультатФормированияАТК Цикл

					НовыйЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
					НовыйЭлемент.ЗначениеШтрихкода = ДанныеАТК.КодАТК;

					ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(ДанныеАТК.ВложенныеКоды);
					НоменклатураУпаковки   = Новый Соответствие;

					НоменклатураУпаковки   = Новый Соответствие;
					ХарактеристикаУпаковки = Новый Соответствие;

					Для Каждого СтрокаТаблицы Из ШтрихкодыУпаковок Цикл
						СтрокаТЧ = НовыйЭлемент.ВложенныеШтрихкоды.Добавить();
						СтрокаТЧ.Штрихкод = СтрокаТаблицы.Ссылка;
						НоменклатураУпаковки.Вставить(СтрокаТаблицы.Номенклатура, Истина);
						ХарактеристикаУпаковки.Вставить(СтрокаТаблицы.Характеристика, Истина);
					КонецЦикла;

					Если НоменклатураУпаковки.Количество() > 1 Или ХарактеристикаУпаковки.Количество() > 1 Тогда
						НовыйЭлемент.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
					Иначе
						НовыйЭлемент.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
					КонецЕсли;

					Если Не ЗначениеЗаполнено(НовыйЭлемент.ДатаУпаковки) Тогда
						НовыйЭлемент.ДатаУпаковки = ТекущаяДатаСеанса();
					КонецЕсли;

					НовыйЭлемент.Записать();

					СтрокаТЧ = ДокументОбъект.ШтрихкодыАТК.Добавить();
					СтрокаТЧ.ШтрихкодУпаковки = НовыйЭлемент.Ссылка;

				КонецЦикла;

				ДокументОбъект.Записать();

			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
		
		ПараметрыОбновленияСтатуса.Статус = КонвертированныйОбщийСтатусДокумента(
			РезультатОбработкиЗаявки.Статус, ЭлементОчереди.Документ);
			
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			БлокировкаДокумент = Новый БлокировкаДанных;
			
			ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
				"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"));
			ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
			
			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			//@skip-check lock-out-of-try
			БлокировкаДокумент.Заблокировать();
			
			КешОписанияОстатков = Новый Соответствие();
			ДокументОбъект      = ЭлементОчереди.Документ.ПолучитьОбъект();
			МассивСтрокОтвета   = РезультатОбработкиЗаявки.СоставДокумента;
			
			Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = ОбязательныеПоляОписанияОстатковПоСтрокеДокумента(
					СтрокаТовары, ДокументОбъект.ВидПродукции);
					
				Для Каждого СтрокаОтвета Из МассивСтрокОтвета Цикл
					
					СтрокаРезультатаСоответствуетЗапросу = Истина;
					
					Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
						ЗначениеПоиска = Неопределено;
						Если Не СтрокаОтвета.Свойство(КлючИЗначение.Ключ, ЗначениеПоиска) Тогда
							Если ЗначениеЗаполнено(СтруктураПоиска[КлючИЗначение.Ключ]) Тогда
								СтрокаРезультатаСоответствуетЗапросу = Ложь;
								Прервать;
							КонецЕсли;
						ИначеЕсли НормализованноеСтроковоеЗначение(ЗначениеПоиска) <> НормализованноеСтроковоеЗначение(СтруктураПоиска[КлючИЗначение.Ключ]) Тогда
							СтрокаРезультатаСоответствуетЗапросу = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не СтрокаРезультатаСоответствуетЗапросу Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТовары.GTIN = СтрокаОтвета.gtin;
					
					Если КешОписанияОстатков.Получить(СтрокаТовары.GTIN) = Неопределено Тогда
						СтруктураОписания = Новый Структура();
						Если СтрокаОтвета.Свойство("name") Тогда
							СтруктураОписания.Вставить("Представление", СтрокаОтвета.name);
						Иначе
							ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
								ДокументОбъект.ВидПродукции,
								ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(СтрокаТовары.КодТНВЭД, ДокументОбъект.ВидПродукции));
							Если ПараметрыОписанияОстатков.ИспользоватьНаименование Тогда
								Если ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
									СтруктураОписания.Вставить("Представление", СтрокаТовары.Наименование);
								Иначе
									СтруктураОписания.Вставить(
										"Представление",
									ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
								КонецЕсли;
							Иначе
								СтруктураОписания.Вставить(
									"Представление",
										СтрокаДляПоискаGTINМаркировкиОстатков(
										ДокументОбъект.ВидПродукции,
										СтрокаТовары));
							КонецЕсли;
						КонецЕсли;
						СтруктураОписания.Вставить("Организация",    ДокументОбъект.Организация);
						СтруктураОписания.Вставить("ВидПродукции",   ДокументОбъект.ВидПродукции);
						СтруктураОписания.Вставить("ДанныеОписания", СтрокаТовары);
						СтруктураОписания.Вставить("КодТНВЭД",       СтрокаТовары.КодТНВЭД);
						КешОписанияОстатков.Вставить(СтрокаТовары.GTIN, СтруктураОписания);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			РегистрыСведений.КэшОписанияОстатковИСМП.СохранитьПредставлениеОписанияОстатков(КешОписанияОстатков);
			
			Если ДокументОбъект.Модифицированность() Тогда
				ДокументОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетПодтверждения
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ Тогда
			
			БлокировкаДокумент = Новый БлокировкаДанных;
			
			ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
				"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОтгрузкаТоваровИСМП"));
			ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
			
			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.ОтгрузкаТоваровИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			//@skip-check lock-out-of-try
			БлокировкаДокумент.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			ДокументОбъект.ИдентификаторЗаявкиНаОтгрузку = ЭлементОчереди.ИдентификаторЗаявки;
			ДокументОбъект.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		
		ИспользуетсяРегистрДляХраненияДанныхОтчета = Ложь;
		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		ПараметрыЗапроса.Свойство("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
		
		ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
			"Ссылка", Новый ОписаниеТипов("ДокументСсылка.МаркировкаТоваровИСМП"));
		ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;

		Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда

			Блокировка                = Новый БлокировкаДанных();
			ЭлементБлокировки         = Блокировка.Добавить("РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП");
			ЭлементБлокировки.Режим   = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Документ", ЭлементОчереди.Документ);

			//@skip-check lock-out-of-try
			Блокировка.Заблокировать();

			НаборЗаписей = РегистрыСведений.ДанныеОтчетаПроизводственнойЛинииИСМП.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ЭлементОчереди.Документ);

			НаборЗаписей.Прочитать();

		Иначе

			БлокировкаДокумент = Новый БлокировкаДанных;

			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.МаркировкаТоваровИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			//@skip-check lock-out-of-try
			БлокировкаДокумент.Заблокировать();

			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			ДанныеОтчета = ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии;

		КонецЕсли;
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			УдалитьПолныеКодовМаркировкиИзПула = (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса)
				Или Не ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ЭлементОчереди.ВидПродукции)
					И Не ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
					И (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса
					   Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот);

			Если УдалитьПолныеКодовМаркировкиИзПула Тогда
				ЭтоМолочнаяПродукция = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ЭлементОчереди.ВидПродукции);
				КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(ЭтоМолочнаяПродукция);
				СоответствиеКодовУпаковокДляПоискаВПуле = Новый Соответствие;

				ГруппаКолонокДляПоискаВПулеКодовМаркировки = Новый Массив;
				ГруппаКолонокДляПоискаВПулеКодовМаркировки.Добавить("НормализованноеЗначениеШтрихкода");
				ГруппаКолонокДляПоискаВПулеКодовМаркировки.Добавить("НормализованноеЗначениеШтрихкодаУпаковки");

			КонецЕсли;
			
			Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда
				
				ДанныеОтчета = НаборЗаписей.Выгрузить(, "Документ, КлючЗаписи, НормализованноеЗначениеШтрихкода, НормализованноеЗначениеШтрихкодаУпаковки");
				НаборЗаписей.Загрузить(ДанныеОтчета);
				НаборЗаписей.Записать();

				Если УдалитьПолныеКодовМаркировкиИзПула Тогда
					Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
						ДобавитьКодыМаркировкиСтрокиОтчетаВТаблицуДляПоискаВПуле(
							СтрокаОтчета,
							КодыМаркировки,
							СоответствиеКодовУпаковокДляПоискаВПуле,
							ГруппаКолонокДляПоискаВПулеКодовМаркировки);
					КонецЦикла;
				КонецЕсли;

			Иначе

				Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл

					СтрокаОтчета.ЗначениеШтрихкода                    = "";
					СтрокаОтчета.ЗначениеШтрихкодаУпаковки            = "";
					СтрокаОтчета.ФорматBase64                         = Ложь;
					СтрокаОтчета.ТекстОшибкиЗначениеШтрихкода         = "";
					СтрокаОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки = "";

					Если УдалитьПолныеКодовМаркировкиИзПула Тогда
						ДобавитьКодыМаркировкиСтрокиОтчетаВТаблицуДляПоискаВПуле(
							СтрокаОтчета,
							КодыМаркировки,
							СоответствиеКодовУпаковокДляПоискаВПуле,
							ГруппаКолонокДляПоискаВПулеКодовМаркировки);
					КонецЕсли;

				КонецЦикла;

				Если ДокументОбъект.Модифицированность() Тогда
					ДокументОбъект.Записать();
				КонецЕсли;

			КонецЕсли;
			
			Если УдалитьПолныеКодовМаркировкиИзПула Тогда
				
				УдалитьПолныеКодовМаркировкиИзПулаПослеУспешнойОбработкиСообщения(
					ЭлементОчереди,
					КодыМаркировки,
					ЭтоМолочнаяПродукция);
				
			КонецЕсли;
			
			БлокировкаНаборЗаписей = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаНаборЗаписей.Добавить("РегистрСведений.ПакетыКодовМаркировкиИСМП");
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "Ссылка");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			//@skip-check lock-out-of-try
			БлокировкаНаборЗаписей.Заблокировать();
			
			РегистрыСведений.ПакетыКодовМаркировкиИСМП.УдалитьЗаписиПоДокументу(ЭлементОчереди.Документ);

		Иначе // ошибка или частично
			
			Если Не РезультатОбработкиЗаявки.Свойство("ПовторныйЗапросКвитанции")
				Или РезультатОбработкиЗаявки.Свойство("ОбновитьДанныеОтчета") Тогда
				
				КодыОбработанныеСОшибками = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументу(ЭлементОчереди.Документ);
				
				Если КодыОбработанныеСОшибками.Количество() Тогда
					
					Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда
						ДанныеОтчета = НаборЗаписей.Выгрузить();
					КонецЕсли;
					
					ЗаполнитьОшибкиПриОбработкеВГИСМТ(ДанныеОтчета, КодыОбработанныеСОшибками, ИспользуетсяРегистрДляХраненияДанныхОтчета);
					
					Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда
						НаборЗаписей.Загрузить(ДанныеОтчета);
						НаборЗаписей.Записать();
					ИначеЕсли ДокументОбъект.Модифицированность() Тогда
						ДокументОбъект.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса Тогда
		
		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		ИспользуетсяРегистрДляХраненияДанныхОтчета = Ложь;
		ПараметрыЗапроса.Свойство("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
		
		ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
			"Ссылка", Новый ОписаниеТипов("ДокументСсылка.МаркировкаТоваровИСМП"));
		ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
		
		Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда

			Блокировка                = Новый БлокировкаДанных();
			ЭлементБлокировки         = Блокировка.Добавить("РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП");
			ЭлементБлокировки.Режим   = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Документ", ЭлементОчереди.Документ);

			//@skip-check lock-out-of-try
			Блокировка.Заблокировать();

		Иначе

			БлокировкаДокумент = Новый БлокировкаДанных;

			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.МаркировкаТоваровИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			//@skip-check lock-out-of-try
			БлокировкаДокумент.Заблокировать();

		КонецЕсли;
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			// При успешной первой отправке не нужно очищать данные отчета:
			// 1. При отправке через СУЗ коды нормализованы и сохранены в документ.
			// 2. Строки данных отчета не содержат ошибок.
			Если ПараметрыЗапроса.ПовторнаяОтправка Тогда

				Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда
					НаборЗаписей = РегистрыСведений.ДанныеОтчетаПроизводственнойЛинииИСМП.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Документ.Установить(ЭлементОчереди.Документ);

					НаборЗаписей.Прочитать();
					ДанныеОтчета = НаборЗаписей.Выгрузить(, "Документ, КлючЗаписи, НормализованноеЗначениеШтрихкода, НормализованноеЗначениеШтрихкодаУпаковки");
					НаборЗаписей.Загрузить(ДанныеОтчета);
					НаборЗаписей.Записать();

				Иначе
					ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
					ДанныеОтчета = ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии;
					Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
						СтрокаОтчета.ЗначениеШтрихкода                    = "";
						СтрокаОтчета.ЗначениеШтрихкодаУпаковки            = "";
						СтрокаОтчета.ФорматBase64                         = Ложь;
						СтрокаОтчета.ТекстОшибкиЗначениеШтрихкода         = "";
						СтрокаОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки = "";
					КонецЦикла;
					Если ДокументОбъект.Модифицированность() Тогда
						ДокументОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			
				БлокировкаНаборЗаписей = Новый БлокировкаДанных();
				ЭлементБлокировки = БлокировкаНаборЗаписей.Добавить("РегистрСведений.ПакетыКодовМаркировкиИСМП");
				ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				//@skip-check lock-out-of-try
				БлокировкаНаборЗаписей.Заблокировать();
				РегистрыСведений.ПакетыКодовМаркировкиИСМП.УдалитьЗаписиПоДокументу(ЭлементОчереди.Документ);

			КонецЕсли;
			
		Иначе // ошибка или частично
			
			КодыОбработанныеСОшибками = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументу(ЭлементОчереди.Документ);
			
			Если КодыОбработанныеСОшибками.Количество() Тогда
				
				Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда
					ДанныеОтчета = НаборЗаписей.Выгрузить();
				Иначе
					ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
					ДанныеОтчета = ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии;
				КонецЕсли;

				ЗаполнитьОшибкиПриОбработкеВГИСМТ(ДанныеОтчета, КодыОбработанныеСОшибками, ИспользуетсяРегистрДляХраненияДанныхОтчета);
				
				Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда
					НаборЗаписей.Загрузить(ДанныеОтчета);
					НаборЗаписей.Записать();
				ИначеЕсли ДокументОбъект.Модифицированность() Тогда
					ДокументОбъект.Записать();
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес Тогда
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
				"Ссылка", Новый ОписаниеТипов("ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП"));
			ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
			
			БлокировкаДокумент = Новый БлокировкаДанных;
			
			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.УточнениеСведенийОКодахМаркировкиИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			//@skip-check lock-out-of-try
			БлокировкаДокумент.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			
			УдалитьПолныеКодовМаркировкиИзПула = ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес
				Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании;
			Если УдалитьПолныеКодовМаркировкиИзПула Тогда
				
				ЭтоМолочнаяПродукция = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ЭлементОчереди.ВидПродукции);
				КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(ЭтоМолочнаяПродукция);
				СоответствиеКодовУпаковокДляПоискаВПуле = Новый Соответствие;
				
				ГруппаКолонокДляПоискаВПулеКодовМаркировки = Новый Массив;
				ГруппаКолонокДляПоискаВПулеКодовМаркировки.Добавить("НормализованноеЗначениеШтрихкода");
				
			КонецЕсли;
			
			ДанныеОтчета = ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии;
			
			Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
				
				СтрокаОтчета.ЗначениеШтрихкода = "";
				СтрокаОтчета.ТекстОшибкиЗначениеШтрихкода = "";
				СтрокаОтчета.ФорматBase64      = Ложь;
				
				Если УдалитьПолныеКодовМаркировкиИзПула Тогда
					ДобавитьКодыМаркировкиСтрокиОтчетаВТаблицуДляПоискаВПуле(
						СтрокаОтчета,
						КодыМаркировки,
						СоответствиеКодовУпаковокДляПоискаВПуле,
						ГруппаКолонокДляПоискаВПулеКодовМаркировки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если УдалитьПолныеКодовМаркировкиИзПула Тогда
				
				УдалитьПолныеКодовМаркировкиИзПулаПослеУспешнойОбработкиСообщения(
					ЭлементОчереди,
					КодыМаркировки,
					ЭтоМолочнаяПродукция);
				
			КонецЕсли;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ДокументОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента
				И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ОперацияДокумента")
				И (ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОперацияДокумента =
					Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки))
		И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		Тогда
		
		БлокировкаДокумент = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
			"Ссылка", Новый ОписаниеТипов("ДокументСсылка.СписаниеКодовМаркировкиИСМП"));
		ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
		
		ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.СписаниеКодовМаркировкиИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		//@skip-check lock-out-of-try
		БлокировкаДокумент.Заблокировать();
		
		ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
		
		Для Каждого СтрокаОтчета Из ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии Цикл
			
			СтрокаОтчета.ЗначениеШтрихкода         = "";
			СтрокаОтчета.ЗначениеШтрихкодаУпаковки = "";
			СтрокаОтчета.ФорматBase64              = Ложь;
			
		КонецЦикла;
		
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать();
		КонецЕсли;
		
	ИначеЕсли (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса)
		И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда

		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса Тогда
			ОписаниеТипа = Новый ОписаниеТипов("ДокументСсылка.МаркировкаТоваровИСМП");
		Иначе
			ОписаниеТипа = Новый ОписаниеТипов("ДокументСсылка.СписаниеКодовМаркировкиИСМП");
		КонецЕсли;

		ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить("Ссылка", ОписаниеТипа);
		ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;

		БлокировкаНаборЗаписей = Новый БлокировкаДанных();
		ЭлементБлокировки = БлокировкаНаборЗаписей.Добавить("РегистрСведений.ПакетыКодовМаркировкиИСМП");
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//@skip-check lock-out-of-try
		БлокировкаНаборЗаписей.Заблокировать();

		РегистрыСведений.ПакетыКодовМаркировкиИСМП.УдалитьЗаписиПоДокументу(ЭлементОчереди.Документ);

	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеЗаказаНаЭмиссиюСУЗ Тогда

		ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"));
		ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;

		БлокировкаДанных = Новый БлокировкаДанных();

		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");

		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказНаЭмиссию", "Ссылка");

		//@skip-check lock-out-of-try
		БлокировкаДанных.Заблокировать();

		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		РегистрыСведений.ПулКодовМаркировкиСУЗ.ОчисткаПулаКодовМаркировкиПоЗаказуНаЭмиссию(
			ЭлементОчереди.Документ, ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузкуАннулирование Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		МенеджерОбъекта.ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиЗапросаЗаказНаЭмиссиюСУЗАбстрактнаяОперация(ЭлементОчереди, ПараметрыОбмена)
	
	СтатусОбработки  = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	ОсновнаяОперация = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки;
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура")
		И ПараметрыЗапроса.Свойство("ОсновнаяОперация") Тогда
		ОсновнаяОперация = ПараметрыЗапроса.ОсновнаяОперация;
	КонецЕсли;

	Если ОсновнаяОперация = Перечисления.ВидыОперацийИСМП.ЗакрытиеЗаказаНаЭмиссиюСУЗ Тогда
		
		Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗЗакрыт;

	Иначе
		
		ДанныеСтатусаПоПулу = Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДанныеРасчетаСтатусаЗаказаПоПулу(ЭлементОчереди.Документ, ЭлементОчереди.ВидПродукции);
		Статус              = ДанныеСтатусаПоПулу.Статус;
		СтатусОбработки     = ДанныеСтатусаПоПулу.СтатусОбработки;

	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		ОсновнаяОперация,
		ПараметрыОбновленияСтатуса);
	
	ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиАбстрактнойОперацииРасчетСтатуса(ЭлементОчереди, ПараметрыОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ        КАК Ссылка,
	|	ИСМППрисоединенныеФайлы.Описание        КАК Описание,
	|	ИСМППрисоединенныеФайлы.СтатусОбработки КАК СтатусОбработки
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ИСМППрисоединенныеФайлы.Версия     = &Версия
	|	И ИСМППрисоединенныеФайлы.Операция   = &Операция
	|	И ИСМППрисоединенныеФайлы.Документ   = &Документ");
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	ОперацияДокумента = ПараметрыЗапроса.ОперацияДокумента;

	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковкиРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса Тогда
		Операция = ОперацияДокумента;
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса Тогда
		Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ;
	Иначе
		Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("Версия",   ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	
	ВыборкаОшибок = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки  = Ложь;
	ЕстьУспешно = Ложь;
	ЭтоПовторнаяОтправка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыЗапроса, "ПовторнаяОтправка", Ложь);
	
	МассивОшибок          = Новый Массив;
	ОбработанЧастично     = Ложь;
	ЕстьСтатусНеопределен = Ложь;
	
	ЭтоПовторныйЗапросКвитанции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыЗапроса, "ПовторныйЗапросКвитанции", Ложь);
	
	Если ЭтоПовторныйЗапросКвитанции Тогда
		ЕстьОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ЕстьПакетыКодовОшибками", Ложь);
	КонецЕсли;
	
	Пока ВыборкаОшибок.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОшибок.Описание) Тогда
			МассивОшибок.Добавить(ВыборкаОшибок.Описание);
			Если ВыборкаОшибок.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен Тогда
				ЕстьСтатусНеопределен = Истина;
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
		Иначе
			ЕстьУспешно = Истина;
		КонецЕсли;
		Если ВыборкаОшибок.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично Тогда
			ОбработанЧастично = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса Тогда
		Если ЕстьОшибки И (ЕстьУспешно Или ЭтоПовторнаяОтправка)
			Или ЕстьСтатусНеопределен И (ЕстьУспешно Или ЭтоПовторнаяОтправка)
			Или ОбработанЧастично Тогда
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ИначеЕсли Не (ЕстьОшибки Или ЕстьСтатусНеопределен) Тогда
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		ИначеЕсли Не ЕстьОшибки Тогда
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетСтатусНеопределен;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен;
		Иначе
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		КонецЕсли;
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		Если ЕстьОшибки И (ЕстьУспешно Или ЭтоПовторнаяОтправка) Тогда
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ИначеЕсли Не ЕстьОшибки Тогда
			Если ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
				И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "КодыАгрегированы", Ложь) Тогда
				Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
			Иначе
				Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
			КонецЕсли;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		Иначе
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		КонецЕсли;
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса Тогда
		Если ЕстьОшибки И (ЕстьУспешно Или ЭтоПовторнаяОтправка) Тогда
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтвержденоЧастично;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ИначеЕсли Не ЕстьОшибки Тогда
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтверждено;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		Иначе
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОшибкаПередачи;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		КонецЕсли;
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса Тогда
		Если ЕстьОшибки И (ЕстьУспешно Или ЭтоПовторнаяОтправка) Тогда
			Статус          = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаныЧастично;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ИначеЕсли Не ЕстьОшибки Тогда
			Статус          = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаны;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		Иначе
			Статус          = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		КонецЕсли;
	Иначе // АгрегацияРасчетСтатуса
		Если ЕстьОшибки И (ЕстьУспешно Или ЭтоПовторнаяОтправка) Тогда
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированыЧастично;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ИначеЕсли Не ЕстьОшибки Тогда
			Если ОперацияДокумента = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
				Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
			ИначеЕсли ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(ОперацияДокумента) <> Неопределено Тогда
				Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТребуетсяВводВОборот", Ложь) Тогда
				Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
			Иначе
				Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
			КонецЕсли;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		Иначе
			Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	
	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СтрокаРезультата.ТекстОшибки           = ОписаниеОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Ложь;
	СтрокаРезультата.Передано              = Ложь;
	СтрокаРезультата.Принято               = Истина;
	СтрокаРезультата.НовыйСтатус           = СтатусОбработки;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	
	СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ПараметрыЗапроса;
	
	// Для расчета действия "Запросите квитанцию".
	ПараметрыОбновленияСтатуса.Вставить("ЕстьСтатусНеопределен", ЕстьСтатусНеопределен);
	
	РезультатОбработкиЗаявки = Новый Структура;
	РезультатОбработкиЗаявки.Вставить("СтатусОбработки", СтатусОбработки);
	
	Если ЭтоПовторныйЗапросКвитанции Тогда
		
		РезультатОбработкиЗаявки.Вставить("ПовторныйЗапросКвитанции", Истина);
		Если ЕстьУспешно Или ОбработанЧастично Тогда
			РезультатОбработкиЗаявки.Вставить("ОбновитьДанныеОтчета", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	СоздаватьШтрихкодыУпаковок = Ложь;
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		И ПараметрыЗапроса.Свойство("СоздаватьШтрихкодыУпаковок")
		И ПараметрыЗапроса.СоздаватьШтрихкодыУпаковок Тогда
		
		ДанныеДереваУпаковок = ПодготовитьДеревоУпаковокВерхнегоУровняПоДокументу(ЭлементОчереди.Документ);
		
		Если ЗначениеЗаполнено(ДанныеДереваУпаковок.ТекстОшибки) Тогда
			СтрокаРезультата.ТекстОшибки = ДанныеДереваУпаковок.ТекстОшибки;
			ПараметрыОбновленияСтатуса.Вставить("ОшибкаПриСозданииШтрихкодовУпаковок", Истина);
		Иначе
			СоздаватьШтрихкодыУпаковок = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);
		
		СтрокаРезультата.ОбъектИзменен = Истина;
		
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыЗапроса, "ПовторнаяОтправкаНеТребуется", Ложь) Тогда
			
			ПротоколОбмена = ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена();
			ОтветТело = СтрШаблон(
				НСтр("ru = 'Не найдено кодов маркировки, требующих повторной отправки в ГИС МТ.
				           |Обработка кодов для операции ""%1"" завершена.';
				           |en = 'Не найдено кодов маркировки, требующих повторной отправки в ГИС МТ.
				           |Обработка кодов для операции ""%1"" завершена.'"),
				ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(Операция));
			
			ЗаписьПротокола = ПротоколОбмена.Добавить();
			ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
			ЗаписьПротокола.Операция = Операция;
			ЗаписьПротокола.ОтветТело = ОтветТело;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
			Реквизиты.Вставить("Описание",             "");
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
		КонецЕсли;
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		ЗафиксироватьТранзакцию();
		
		ТранзакцияЗафиксирована = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3';
			           |en = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных, ЭлементОчереди.Документ);
		
		ТранзакцияЗафиксирована = Ложь;
		
	КонецПопытки;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	Если ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Если СоздаватьШтрихкодыУпаковок Тогда
			НачатьТранзакцию();
			Попытка
				Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(
					ДанныеДереваУпаковок.ДеревоУпаковок,
					ДанныеДереваУпаковок.ПараметрыСканирования);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр(
					"ru = 'ГосИС: Запись штрихкодов упаковок верхнего уровня при обработке очереди сообщений';
					|en = 'ГосИС: Запись штрихкодов упаковок верхнего уровня при обработке очереди сообщений'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				ВызватьИсключение ПодробноеПредставлениеОшибки;
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ТребуетсяУдалитьИзОчереди = Истина;

	Если ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда

		ДанныеСтатусаИзменены     = Истина;
		ДобавитьВПротоколОбмена   = Истина;
		ТребуетсяУдалитьИзОчереди = Ложь;

		НачатьТранзакцию();

		Попытка

			Блокировка = Новый БлокировкаДанных;
			ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
			Блокировка.Заблокировать();

			НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
			НаборЗаписей.Прочитать();

			Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
				Если НаборЗаписей.Количество() = 0 Тогда
					ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
				ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
				Возврат;
			КонецЕсли;

			Если ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗОтгруженоЗаказчику Тогда

				ТребуетсяУдалитьИзОчереди = Истина;
				ДобавитьВПротоколОбмена   = Ложь;

			Иначе

				ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса[0];
				РезультатЗапросаСтатуса = ИнтерфейсСУЗ.СтатусЗаказаПоИдентификатору(
					ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ, ЭлементОчереди.ИдентификаторЗаявки);

				Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаСтатуса, ЭлементОчереди, ПараметрыОбмена) Тогда
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;

				Если РезультатЗапросаСтатуса.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда

					ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
					Если РезультатЗапросаСтатуса.КодСостояния = 404
						Или РезультатЗапросаСтатуса.КодСостояния = 400 Тогда // Заявка отсутствует или обработанная сервисом ошибка

						ТребуетсяУдалитьИзОчереди             = Истина;
						ЭлементОчереди.ТекущийСтатус          = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка;
						ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;

					Иначе
						ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
						ДобавитьВПротоколОбмена = Ложь;
						ДанныеСтатусаИзменены   = Ложь;
					КонецЕсли;

				ИначеЕсли РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗАннулирован
					Или РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Аннулирован
					Или РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка
					Или РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗУничтожено
					Или РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗЗакрыт Тогда

					ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
					Если РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка
						И ЗначениеЗаполнено(РезультатЗапросаСтатуса.ТекстОшибки) Тогда
						ТекстОшибки = РезультатЗапросаСтатуса.ТекстОшибки;
					Иначе
						ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Заказ %1 находится в состоянии %2.';
								|en = 'Заказ %1 находится в состоянии %2.'"),
							ЭлементОчереди.ИдентификаторЗаявки,
							РезультатЗапросаСтатуса.Статус);
					КонецЕсли;

					ЭлементОчереди.ТекущийСтатус          = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка;
					ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
					ТребуетсяУдалитьИзОчереди             = Истина;
					ДанныеСтатусаИзменены                 = Ложь; // Для следующей обработки абстрактного сообщения

				ИначеЕсли РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗОтгруженоЗаказчику Тогда

					ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
					ЭлементОчереди.ТекущийСтатус          = РезультатЗапросаСтатуса.Статус;
					ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;

					ПараметрыЗапроса.ИдентификаторБизнесЗаказа = ЭлементОчереди.ИдентификаторЗаявки;

					ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(
						ПараметрыЗапроса, ЭлементОчереди, ЭлементОчереди.Сообщение, ПараметрыОбмена, НастройкаОбменаСУЗ);

				Иначе

					Если ЭлементОчереди.ТекущийСтатус = РезультатЗапросаСтатуса.Статус Тогда
						ДанныеСтатусаИзменены = Ложь;
					Иначе
						ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
						ЭлементОчереди.ТекущийСтатус = РезультатЗапросаСтатуса.Статус;
					КонецЕсли;
					ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;

					Если РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке
						Или РезультатЗапросаСтатуса.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПодтвержденИСМП Тогда
						ОтложитьОбработкуЭлементаОчереди(ЭлементОчереди, ПараметрыОбмена);
					Иначе
						ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если ДобавитьВПротоколОбмена
				И ДобавлятьЗаписьВПротоколОбмена(ЭлементОчереди, РезультатЗапросаСтатуса) Тогда
				ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
					ЭлементОчереди,
					РезультатЗапросаСтатуса);
			КонецЕсли;

			Если ДанныеСтатусаИзменены Тогда

				СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();

				СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
				СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
				СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = ЭлементОчереди.ТекущийСтатус;
				СтрокаРезультата.ОбъектИзменен         = Ложь;

				СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
				Если РезультатЗапросаСтатуса <> Неопределено Тогда
					СтрокаРезультата.ТекстСообщения = РезультатЗапросаСтатуса.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
					СтрокаРезультата.ТекстОшибки    = РезультатЗапросаСтатуса.ТекстОшибки;
				КонецЕсли;

				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);

			КонецЕсли;

			Если Не ТребуетсяУдалитьИзОчереди
				Или ДанныеСтатусаИзменены Тогда
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,,,
					Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
			КонецЕсли;

			ТранзакцияЗафиксирована = Истина;
			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();

			ТранзакцияЗафиксирована = Ложь;

			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При обработке документа %1 возникла ошибка:
				           |Текст ошибки: %2
				           |Организация: %3
				           |Текст JSON см. в журнале регистрации.';
				           |en = 'При обработке документа %1 возникла ошибка:
				           |Текст ошибки: %2
				           |Организация: %3
				           |Текст JSON см. в журнале регистрации.'"),
				ЭлементОчереди.Документ,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ЭлементОчереди.Организация);

			ТекстОшибкиЖурналРегистрации = СтрШаблон(
				НСтр("ru = 'При обработке документа %1 возникла ошибка:
				           |Текст ошибки: %2
				           |Организация: %3';
				           |en = 'При обработке документа %1 возникла ошибка:
				           |Текст ошибки: %2
				           |Организация: %3'"),
				ЭлементОчереди.Документ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ЭлементОчереди.Организация);

			ОбъектМетаданных = Неопределено;
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
			КонецЕсли;

			ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);

		КонецПопытки;

		Если Не ТранзакцияЗафиксирована Тогда
			ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ТребуетсяУдалитьИзОчереди Тогда
		ЗаписатьПротоколОбменаВФайлСОписаниемОшибкиИзПротокола(ЭлементОчереди, ТекстОшибки);
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПротоколОбменаВФайлСОписаниемОшибкиИзПротокола(ЭлементОчереди, ТекстОшибки = Неопределено)

	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Описание = ОшибкаИзПротоколаОбмена(ЭлементОчереди, СтатусОбработки);
	Если Не ЗначениеЗаполнено(Описание) Тогда
		Описание = Строка(ТекстОшибки);
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
	Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
	Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
	Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
	Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("Описание",             Описание);
	
	ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
	ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
		ПротоколаОбменаXML,
		Реквизиты);

КонецПроцедуры

Функция ОшибкаИзПротоколаОбмена(ЭлементОчереди, СтатусОбработки)
	
	ТекстОшибки = "";
	
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ОтветТело) Тогда
				ДанныеОтвета = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(СтрокаТЧ.ОтветТело);
				Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					Если ДанныеОтвета.Количество() = 0 Тогда
						ДанныеОтвета = Неопределено;
					Иначе
						ДанныеОтвета = ДанныеОтвета[0];
					КонецЕсли;
				КонецЕсли;
				Если ДанныеОтвета <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "rejectionReason") Тогда
					
						ТекстыОшибок = Новый Массив;
						ТекстыОшибок.Добавить(ДанныеОтвета.rejectionReason);

						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "poolInfos")
							И ТипЗнч(ДанныеОтвета.poolInfos) = Тип("Массив") Тогда

							Для каждого СтрокаПула Из ДанныеОтвета.poolInfos Цикл

								Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПула, "rejectionReason")
									И ТекстыОшибок.Найти(СтрокаПула.rejectionReason) = Неопределено Тогда
									ТекстыОшибок.Добавить(СтрокаПула.rejectionReason);
								КонецЕсли;
							КонецЦикла;

						КонецЕсли;

						ТекстОшибки = СокрЛП(СтрСоединить(ТекстыОшибок, Символы.ПС));
						Прервать;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "errorCode")
						И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "errorText") Тогда
						ТекстОшибки = СтрШаблон("%1 (%2)", ДанныеОтвета.errorText, ДанныеОтвета.errorCode)
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ЗагрузитьРезультатОбработкиВводаВОборот(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	ИСМППрисоединенныеФайлы.Описание
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ИСМППрисоединенныеФайлы.Версия     = &Версия
	|	И ИСМППрисоединенныеФайлы.Операция   = &Операция
	|	И ИСМППрисоединенныеФайлы.Документ   = &Документ");

	Запрос.УстановитьПараметр("Документ", ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("Операция", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОперацияДокумента);
	Запрос.УстановитьПараметр("Версия",   ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);

	ВыборкаОшибок = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки  = Ложь;
	ЕстьУспешно = Ложь;
	
	Пока ВыборкаОшибок.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОшибок.Описание) Тогда
			ЕстьОшибки = Истина;
		Иначе
			ЕстьУспешно = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки И ЕстьУспешно Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	ИначеЕсли Не ЕстьОшибки Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Иначе
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

// Компанует строку наименования - ключ для поиска в национальном каталоге GTIN для маркировки остатков, используя
// переданные параметры.
//
// Параметры:
// 	ВидПродукции       - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	СтрокаТовары       - СтрокаТабличнойЧасти               - Строка табличной части.
// Возвращаемое значение:
// 	Строка - Итоговое наименование в каталоге.
//
Функция СтрокаДляПоискаGTINМаркировкиОстатков(ВидПродукции, СтрокаТовары)
	
	ТребуетсяВозрастнаяКатегория = Ложь;
	
	ЧастиНазвания = Новый Массив();
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь Тогда
		ЧастиНазвания.Добавить("Остатки");
		ЧастиНазвания.Добавить("Обувь");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		ЧастиНазвания.Добавить("Шины");
		ЧастиНазвания.Добавить(ОписаниеТоварногоЗнака(СтрокаТовары.ТоварныйЗнак));
		ЧастиНазвания.Добавить(СокрЛП(СтрокаТовары.Модель));
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		ЧастиНазвания.Добавить(
			ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность2025 Тогда
		ТребуетсяВозрастнаяКатегория = ИнтеграцияИСКлиентСервер.КодТНВЭДТребуетВозрастнуюКатегорию(
			ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(СтрокаТовары.КодТНВЭД, ВидПродукции));
		Если ТребуетсяВозрастнаяКатегория Тогда
			ЧастиНазвания.Добавить("Белье");
		Иначе
			ЧастиНазвания.Добавить("Одежда");
		КонецЕсли;
		ЧастиНазвания.Добавить(ОписаниеТоварногоЗнака(СтрокаТовары.ТоварныйЗнак));
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
		Если ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
			ЧастиНазвания.Добавить(СокрЛП(СтрокаТовары.Наименование));
		Иначе
			ЧастиНазвания.Добавить(
				СокрЛП(
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						СтрокаТовары.Номенклатура,
						СтрокаТовары.Характеристика)));
		КонецЕсли;
		ЧастиНазвания.Добавить(ОписаниеТоварногоЗнака(СтрокаТовары.ТоварныйЗнак, "Отсутствует"));
	КонецЕсли;
	
	Если ТребуетсяВозрастнаяКатегория Тогда
		Если ЗначениеЗаполнено(СтрокаТовары.ВозрастнаяКатегория) Тогда
			ЧастиНазвания.Добавить(СокрЛП(СтрокаТовары.ВозрастнаяКатегория));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТовары.ЦелевойПол) Тогда
			ЧастиНазвания.Добавить(ЦелевойПолПредставлениеДляПоискаGTIN(СтрокаТовары.ЦелевойПол));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Если СтрокаТовары.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство") Тогда
			ЧастиНазвания.Добавить("Произведен в РФ");
		ИначеЕсли СтрокаТовары.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт") Тогда
			ЧастиНазвания.Добавить("Ввезен в РФ");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиНазвания, ". ");
	
КонецФункции

Функция ЦелевойПолПредставлениеДляПоискаGTIN(ЦелевойПол)
	
	Если ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Мужская") Тогда
		Представление = "Мужская";
	ИначеЕсли ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Женская") Тогда
		Представление = "Женская";
	ИначеЕсли ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Детская") Тогда
		Представление = "Детская";
	ИначеЕсли ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Унисекс") Тогда
		Представление = "Унисекс";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Целевой пол %1 не поддерживается';
				|en = 'Целевой пол %1 не поддерживается'"),
			Представление);
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

Процедура ЗапроситьСуществующиеGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена)

	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗапроситьСуществующиеGTINНаОстатки");
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		БлокировкаДокумент = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
			"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"));
		ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
		
		ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		//@skip-check lock-out-of-try
		БлокировкаДокумент.Заблокировать();
		
		ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
		ТекстОшибки    = "";
		
		РезультатЗаполнения = ЗаполнитьGTINМаркировкиОстатков(
			ДокументОбъект.Товары,
			ДокументОбъект.Организация,
			ДокументОбъект.ВидПродукции);
		
		Если ЗначениеЗаполнено(РезультатЗаполнения.ТекстОшибки) Тогда
			ВызватьИсключение РезультатЗаполнения.ТекстОшибки;
		КонецЕсли;
		
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать();
		КонецЕсли;
		
		ТребуетсяОписатьОстатки = Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТребуетсяЗапросGTIN(ДокументОбъект);
		СтатусОбработки         = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		МенеджерОбъекта         = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		Если ТребуетсяОписатьОстатки Тогда
			
			Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
			
			СообщенияJSON = МенеджерОбъекта.ОписаниеОстатковJSON(ЭлементОчереди.Документ, Неопределено);
			
			СертификатыДляПодписанияНаСервере  = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
			ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП.СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
				ПодписанныеСообщенияПоОрганизациям,
				ПараметрыОбмена);
			
		Иначе
			
			Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены;
			
		КонецЕсли;
		
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		
		ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
		
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			ЭлементОчереди.Операция,
			ПараметрыОбновленияСтатуса);
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
			Реквизиты.Вставить("Описание",             ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Иначе
		
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
		
		КонецЕсли;
		
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = "";
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При получении GTIN на остатки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При получении GTIN на остатки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
			
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ОписаниеТоварногоЗнака(ТоварныйЗнак, ЗначениеТоварногоЗнакаПоУмолчанию = "Без товарного знака")
	Если ЗначениеЗаполнено(ТоварныйЗнак) Тогда
		Возврат СокрЛП(ТоварныйЗнак);
	Иначе
		Возврат ЗначениеТоварногоЗнакаПоУмолчанию;
	КонецЕсли;
КонецФункции

#КонецОбласти

Функция ВремяОжиданияСледующегоЗапросаСУЗ(НастройкаОбмена) Экспорт
	
	РазрешеннаяДатаСледующегоЗапроса = НастройкаОбмена.ДатаПоследнегоЗапроса + НастройкаОбмена.ИнтервалМеждуЗапросами;
	ВремяОжиданияСледующегоЗапроса = РазрешеннаяДатаСледующегоЗапроса - ТекущаяДатаСеанса();
	Если ВремяОжиданияСледующегоЗапроса < 0 Тогда
		ВремяОжиданияСледующегоЗапроса = 0;
	КонецЕсли;
	
	Возврат ВремяОжиданияСледующегоЗапроса;
	
КонецФункции

Функция СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Экспорт
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами
		И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.ЗапросИдентификатораСоединенияСУЗ Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки
			И ЭлементОчереди.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			
			ПараметрыКонтроля = ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди);
			
			Если ПараметрыКонтроля <> Неопределено Тогда
				
				ВремяСледующегоЗапроса = ПараметрыКонтроля.ДатаПоследнегоЗапросаПревышения + ПериодичностьОтправкиЗаказовПослеПревышения();
				
				НаступилоВремяОбмена = (ВремяСледующегоЗапроса <= ТекущаяДатаСеанса());
				СУЗПолный = (ПараметрыКонтроля.ТекущееКоличествоЗаказов >= МаксимальноеКоличествоЗаказовВОчередиСУЗ());
				
				Если Не НаступилоВремяОбмена И СУЗПолный Тогда
					ДатаСледующейИтерации = ВремяСледующегоЗапроса;
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		РезультатПолученияНастройки = НастройкаОбменаСУЗ(
			ПараметрыОбмена,
			ЭлементОчереди);
		
		Если Не РезультатПолученияНастройки.Успешно Тогда
			Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
				Возврат Ложь;
			Иначе
				ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаОбменаСУЗ = РезультатПолученияНастройки.НастройкаОбмена;
		
		Если НастройкаОбменаСУЗ <> Неопределено Тогда
			
			ВремяОжидания = ВремяОжиданияСледующегоЗапросаСУЗ(НастройкаОбменаСУЗ);
			Если ВремяОжидания > 0 Тогда
				ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания;
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Экспорт
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		
		РезультатПолученияНастройки = НастройкаОбменаСУЗ(
			ПараметрыОбмена,
			ЭлементОчереди);
		Если Не РезультатПолученияНастройки.Успешно Тогда
			Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
				Возврат Ложь;
			Иначе
				ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаОбменаСУЗ = РезультатПолученияНастройки.НастройкаОбмена;
		
		Если НастройкаОбменаСУЗ <> Неопределено Тогда
			
			ВремяОжидания = ВремяОжиданияСледующегоЗапросаСУЗ(НастройкаОбменаСУЗ);
			Если ВремяОжидания > 0 Тогда
				ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания;
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗагрузитьРезультатОбработкиОтчетаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокумента");
	
	РезультатОбработкиЗаявки = ИнтерфейсСУЗ.СтатусОбработкиОтчета_V2(
		ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ, ЭлементОчереди.Операция);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерацииЗапросаКСУЗ(ЭлементОчереди);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
			ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			Если Не ЗначениеЗаполнено(Реквизиты.Описание)
				И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
				Реквизиты.Описание = НСтр("ru = 'Ошибка обработки сообщения. Заявка отклонена.';
											|en = 'Ошибка обработки сообщения. Заявка отклонена.'");
			КонецЕсли;
			
			Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				
				ОбработкаЗагрузкиПереданногоДокумента(
					ЭлементОчереди,
					ПараметрыОбмена,
					РезультатОбработкиЗаявки,
					Неопределено);

				Если ПараметрыЗапроса <> Неопределено Тогда
					
					Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ
						Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки Тогда
						ОперацияИСМП = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента;
					ИначеЕсли ПараметрыЗапроса.Свойство("КонтролироватьСтатусДокументаАгрегацияИСМП") Тогда
						ОперацияИСМП = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОперацияИСМП <> Неопределено Тогда
					
					СообщениеJSON = ЗаполнитьСообщениеJSONАбстрактнаяОперация(ОперацияИСМП, ЭлементОчереди);
					СообщениеJSON.ИдентификаторЗаявки = ЭлементОчереди.ИдентификаторЗаявки;
					СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
					СообщениеJSON.Версия              = ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
					
					Если ОперацияИСМП = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента Тогда
						СообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
					КонецЕсли;
					
					СообщенияJSON = Новый Массив;
					СообщенияJSON.Добавить(СообщениеJSON);
					
					ОбменДаннымиИСМП.ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена, ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора());
					
					ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
						НаборЗаписей,,,
						Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
					
				Иначе
					
					ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
					ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
						ПротоколаОбменаXML,
						Реквизиты);
					
					ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
					
				КонецЕсли;
				
			Иначе
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
				ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				
				Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса <> Неопределено
					И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ДанныеСообщения") Тогда
					ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчереди,, ЭлементОчереди.ИдентификаторЗаявки);
				КонецЕсли;
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				
			КонецЕсли;
			
		Иначе
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
			
		КонецЕсли;
		
		Если Не ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ИспользуетсяПакетнаяПередачаСообщений") Тогда
			// При пакетной обработке статус ранее установлен "Обрабатывается".
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.Статус            = Неопределено;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
			ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ЭлементОчереди.Документ,
				РезультатОбработкиЗаявки.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
			
			СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
			СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
			СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
			
			СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
			СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
			СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
			
			СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Истина;
			СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
			СтрокаРезультата.ОбъектИзменен         = Ложь;
			
			СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
			СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		   Или (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		        И ОперацияИСМП = Неопределено)) Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерацииЗапросаКСУЗ(ЭлементОчереди);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры


Функция ЗапроситьКодыМаркировкиИзБизнесЗаказа(ПараметрыЗапроса, ДанныеПула, ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	СтрокиЗаказа = ДанныеПоТоварамЗаказаНаЭмиссию(ЭлементОчереди, ДанныеПула, ПараметрыЗапроса);

	Если ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула = 500000;
		КоличествоЗагружаемыхКодов = МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула;
	Иначе
		Если ЗначениеЗаполнено(НастройкаОбменаСУЗ.ПолучатьКодовЗаИтерацию) Тогда
			МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула = НастройкаОбменаСУЗ.ПолучатьКодовЗаИтерацию;
		Иначе
			МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула = 1000;
		КонецЕсли;
		Если МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула > ДанныеПула.Остаток Тогда
			КоличествоЗагружаемыхКодов = ДанныеПула.Остаток;
		Иначе
			КоличествоЗагружаемыхКодов = МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула;
		КонецЕсли;
	КонецЕсли;


	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		РезультатЗапросаКодовМаркировки = ИнтерфейсСУЗ.ЗапроситьКодыМаркировкиИзБизнесЗаказа_V1(
			ПараметрыЗапроса, КоличествоЗагружаемыхКодов,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2
		Или НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3 Тогда
		РезультатЗапросаКодовМаркировки = ИнтерфейсСУЗ.ЗапроситьКодыМаркировкиИзБизнесЗаказа_V2(
			ПараметрыЗапроса, КоличествоЗагружаемыхКодов, ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов,
			ЭлементОчереди, НастройкаОбменаСУЗ);
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаКодовМаркировки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат РезультатЗапросаКодовМаркировки;
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается';
				|en = 'Формат обмена %1 не поддерживается'"),
			ЭлементОчереди.ФорматОбмена);
	КонецЕсли;

	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо Тогда
		ПараметрыЗагрузки = ПараметрыОбмена.ПараметрыЗагрузкиКодовМаркировкиВПул[ЭлементОчереди.Сообщение];
		Если ПараметрыЗагрузки.ТребуетсяПоискСуществующихКодов
			И РезультатЗапросаКодовМаркировки.ДанныеБлока <> Неопределено
			И ПараметрыЗагрузки.СуществующиеКоды.Количество() Тогда
			РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки, ПараметрыЗагрузки.СуществующиеКоды);
		КонецЕсли;
	КонецЕсли;

	Если РезультатЗапросаКодовМаркировки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
		ЭлементОчередиДляЗаписиПротоколаОбмена = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		Если ЭлементОчередиДляЗаписиПротоколаОбмена <> Неопределено Тогда
			ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
				ЭлементОчередиДляЗаписиПротоколаОбмена,
				РезультатЗапросаКодовМаркировки);
		КонецЕсли;
	КонецЕсли;

	Если РезультатЗапросаКодовМаркировки.ДанныеБлока <> Неопределено Тогда

		НаборЗаписейПулКодовМаркировкиСУЗ = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ЗаказНаЭмиссию.Установить(ЭлементОчереди.Документ, Истина);
		НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ДокументОснование.Установить(ЭлементОчереди.ДокументОснование, Истина);

		МассивДанныхRFID = Новый Массив();

		ПараметрыСтрокЗаказа = Новый Структура();
		ПараметрыСтрокЗаказа.Вставить("СтрокиЗаказа",      СтрокиЗаказа);
		ПараметрыСтрокЗаказа.Вставить("ТекущаяСтрока",     Неопределено);
		ПараметрыСтрокЗаказа.Вставить("РежимПереполнения", Ложь);
		ПараметрыСтрокЗаказа.Вставить("ВидПродукции",      ЭлементОчереди.ВидПродукции);

		КэшРазбораКодаМаркировки = Неопределено;

		ДатаЭмиссииУниверсальная = ТекущаяУниверсальнаяДата();
		Для Каждого ЗначениеШтрихкода Из РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки Цикл

			ПараметрыКода = РезультатЗапросаКодовМаркировки.ДанныеБлока.ПараметрыКодовМаркировки[ЗначениеШтрихкода];

			ВыбратьСтрокуДляРаспределенияКодовМаркировки(ПараметрыСтрокЗаказа, ПараметрыКода);

			СтрокаЗаказаНаЭмиссию = ПараметрыСтрокЗаказа.ТекущаяСтрока;

			ЗаписьНабора = НаборЗаписейПулКодовМаркировкиСУЗ.Добавить();
			// Измерения
			ЗаписьНабора.ЗаказНаЭмиссию    = ЭлементОчереди.Документ;
			ЗаписьНабора.ДокументОснование = ЭлементОчереди.ДокументОснование;

			// Ресурсы
			ЗаписьНабора.Статус                    = Перечисления.СтатусыКодовМаркировкиСУЗ.Сгенерирован;
			// Реквизиты
			ЗаписьНабора.Организация               = ЭлементОчереди.Организация;
			ЗаписьНабора.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

			ЗаписьНабора.Номенклатура              = СтрокаЗаказаНаЭмиссию.Номенклатура;
			ЗаписьНабора.Характеристика            = СтрокаЗаказаНаЭмиссию.Характеристика;

			ЗаписьНабора.ВидПродукции              = СтрокаЗаказаНаЭмиссию.ВидПродукции;

			СпособВводаВОборот = Неопределено;
			Если СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда

				ЗаписьНабора.КодМаркировки = ЗначениеШтрихкода;
				ЗаписьНабора.ТипШтрихкода  = Перечисления.ТипыШтрихкодов.Code128;

				СпособВводаВОборот                     = ПараметрыКода.СпособВводаВОборот;
				ЗаписьНабора.ВидКИЗ                    = ПараметрыКода.ВидКИЗ;
				ЗаписьНабора.РазмерКИЗ                 = ПараметрыКода.РазмерКИЗ;
				ЗаписьНабора.GTIN                      = ПараметрыКода.GTIN;
				ЗаписьНабора.ДатаПечатиУниверсальная   = ДатаЭмиссииУниверсальная;
				ЗаписьНабора.ДатаЭмиссииУниверсальная  = УниверсальноеВремя(ПараметрыКода.ДатаЭмиссии);

				ДанныеRDFID = РегистрыСведений.ДанныеRFIDИСМП.НовыйЭлементЗаписиДанных();
				ДанныеRDFID.ЗначениеШтрихкода = ЗначениеШтрихкода;
				ДанныеRDFID.RFIDTID           = ПараметрыКода.RFIDTID;
				Если ЗначениеЗаполнено(ПараметрыКода.SGTIN) Тогда
					ДанныеRDFID.EPCGTIN = ПараметрыКода.GTIN;
					ДанныеRDFID.RFIDEPC = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(
						ПараметрыКода.GTIN, СтрРазделить(ПараметрыКода.SGTIN, ".")[3], 1);
				КонецЕсли;
				МассивДанныхRFID.Добавить(ДанныеRDFID);

			Иначе

				РезультатРазбора = РазобратьКодМаркировкиДляБизнесЗаказа(
					ЗначениеШтрихкода,
					СтрокаЗаказаНаЭмиссию,
					КэшРазбораКодаМаркировки);

				ЗаписьНабора.GTIN                      = ДанныеПула.GTIN;
				ЗаписьНабора.ПолныйКодМаркировки       = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ЗначениеШтрихкода);
				ЗаписьНабора.МаркировкаОстатков        = СтрокаЗаказаНаЭмиссию.МаркировкаОстатков;
				ЗаписьНабора.ДатаЭмиссииУниверсальная  = ДатаЭмиссииУниверсальная;
				СпособВводаВОборот                     = СтрокаЗаказаНаЭмиссию.СпособВводаВОборот;

				ЗаписьНабора.КодМаркировки = РезультатРазбора.НормализованныйКодМаркировки;
				ЗаписьНабора.ТипШтрихкода  = РезультатРазбора.ТипШтрихкода;

			КонецЕсли;

			Если СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				ЗаписьНабора.МаксимальнаяРозничнаяЦена = СтрокаЗаказаНаЭмиссию.МаксимальнаяРозничнаяЦена;
			ИначеЕсли СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
				ЗаписьНабора.СрокГодности = РезультатРазбора.СрокГодности;
			КонецЕсли;

			ЗаписьНабора.СпособВводаВОборот        = СпособВводаВОборот;
			ЗаписьНабора.Шаблон                    = СтрокаЗаказаНаЭмиссию.Шаблон;
			ЗаписьНабора.ХешСуммаКодаМаркировки    = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗаписьНабора.КодМаркировки);
			ЗаписьНабора.ИдентификаторБлокаСУЗ     = РезультатЗапросаКодовМаркировки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов;
			ЗаписьНабора.ИдентификаторЗаказаСУЗ    = ПараметрыЗапроса.ИдентификаторБизнесЗаказа;

			СтрокаЗаказаНаЭмиссию.КоличествоПолучено = СтрокаЗаказаНаЭмиссию.КоличествоПолучено + 1;

		КонецЦикла;

		Если НаборЗаписейПулКодовМаркировкиСУЗ.Количество() Тогда
			НаборЗаписейПулКодовМаркировкиСУЗ.Записать(Ложь);
		КонецЕсли;

		Если МассивДанныхRFID.Количество() Тогда
			РезультатЗаписи = РегистрыСведений.ДанныеRFIDИСМП.ЗаписатьДанные(МассивДанныхRFID);
			Если Не РезультатЗаписи.Успешно Тогда
				ВызватьИсключение РезультатЗаписи.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат РезультатЗапросаКодовМаркировки;

КонецФункции

Функция ДанныеПоТоварамЗаказаНаЭмиссию(ЭлементОчереди, ДанныеПула, ПараметрыЗапроса)

	Если ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПараметрыЗаказа.СпособВводаВОборот КАК СпособВводаВОборот,
		|	ПараметрыЗаказа.GTIN               КАК GTIN,
		|	ПараметрыЗаказа.ВидКИЗ             КАК ВидКИЗ,
		|	ПараметрыЗаказа.РазмерКИЗ          КАК РазмерКИЗ,
		|	ПараметрыЗаказа.КодТНВЭД           КАК КодТНВЭД,
		|	ПараметрыЗаказа.Шаблон             КАК Шаблон
		|ПОМЕСТИТЬ ПараметрыЗаказа
		|ИЗ
		|	&ПараметрыЗаказа КАК ПараметрыЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.ВидПродукции                       КАК ВидПродукции,
		|	ТабличнаяЧасть.СпособВводаВОборот        КАК СпособВводаВОборот,
		|	ТабличнаяЧасть.Номенклатура              КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика            КАК Характеристика,
		|	ТабличнаяЧасть.GTIN                      КАК GTIN,
		|	ТабличнаяЧасть.ВидКИЗ                    КАК ВидКИЗ,
		|	ТабличнаяЧасть.РазмерКИЗ                 КАК РазмерКИЗ,
		|	ТабличнаяЧасть.Шаблон                    КАК Шаблон,
		|	ПОДСТРОКА(ТабличнаяЧасть.КодТНВЭД, 1, 4) КАК КодТНВЭД,
		|	СУММА(ТабличнаяЧасть.Количество)         КАК Количество
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
		|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗаказа КАК ПараметрыЗаказа
		|		ПО ТабличнаяЧасть.СпособВводаВОборот = ПараметрыЗаказа.СпособВводаВОборот
		|			И ТабличнаяЧасть.GTIN            = ПараметрыЗаказа.GTIN
		|			И ТабличнаяЧасть.ВидКИЗ          = ПараметрыЗаказа.ВидКИЗ
		|			И ТабличнаяЧасть.РазмерКИЗ       = ПараметрыЗаказа.РазмерКИЗ
		|			И ТабличнаяЧасть.Шаблон          = ПараметрыЗаказа.Шаблон
		|			И ПОДСТРОКА(ТабличнаяЧасть.КодТНВЭД, 1, 4) = ПараметрыЗаказа.КодТНВЭД
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	Шапка.ВидПродукции,
		|	ТабличнаяЧасть.СпособВводаВОборот,
		|	ТабличнаяЧасть.Шаблон,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.GTIN,
		|	ТабличнаяЧасть.РазмерКИЗ,
		|	ТабличнаяЧасть.ВидКИЗ,
		|	ПОДСТРОКА(ТабличнаяЧасть.КодТНВЭД, 1, 4)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот КАК СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.Шаблон             КАК Шаблон,
		|	ПулКодовМаркировкиСУЗ.ВидКИЗ             КАК ВидКИЗ,
		|	ПулКодовМаркировкиСУЗ.РазмерКИЗ          КАК РазмерКИЗ,
		|	ПулКодовМаркировкиСУЗ.Номенклатура       КАК Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика     КАК Характеристика,
		|	ПулКодовМаркировкиСУЗ.GTIN               КАК GTIN,
		|	СУММА(1)                                 КАК КоличествоПолучено
		|ПОМЕСТИТЬ ДанныеПула
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗаказа КАК ПараметрыЗаказа
		|		ПО ПулКодовМаркировкиСУЗ.СпособВводаВОборот = ПараметрыЗаказа.СпособВводаВОборот
		|			И ПулКодовМаркировкиСУЗ.GTIN            = ПараметрыЗаказа.GTIN
		|			И ПулКодовМаркировкиСУЗ.ВидКИЗ          = ПараметрыЗаказа.ВидКИЗ
		|			И ПулКодовМаркировкиСУЗ.РазмерКИЗ       = ПараметрыЗаказа.РазмерКИЗ
		|			И ПулКодовМаркировкиСУЗ.Шаблон          = ПараметрыЗаказа.Шаблон
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.ВидКИЗ,
		|	ПулКодовМаркировкиСУЗ.РазмерКИЗ,
		|	ПулКодовМаркировкиСУЗ.GTIN,
		|	ПулКодовМаркировкиСУЗ.Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика,
		|	ПулКодовМаркировкиСУЗ.Шаблон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.ВидПродукции                           КАК ВидПродукции,
		|	ТабличнаяЧасть.СпособВводаВОборот                     КАК СпособВводаВОборот,
		|	ТабличнаяЧасть.ВидКИЗ                                 КАК ВидКИЗ,
		|	ТабличнаяЧасть.РазмерКИЗ                              КАК РазмерКИЗ,
		|	ТабличнаяЧасть.Номенклатура                           КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика                         КАК Характеристика,
		|	ТабличнаяЧасть.GTIN                                   КАК GTIN,
		|	ТабличнаяЧасть.Шаблон                                 КАК Шаблон,
		|	ТабличнаяЧасть.Количество                             КАК Количество,
		|	ТабличнаяЧасть.КодТНВЭД                               КАК КодТНВЭД,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.КоличествоПолучено, 0) КАК КоличествоПолучено
		|ИЗ
		|	ТаблицаТовары КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПула КАК ПулКодовМаркировкиСУЗ
		|		ПО ТабличнаяЧасть.Номенклатура      = ПулКодовМаркировкиСУЗ.Номенклатура
		|		И ТабличнаяЧасть.Характеристика     = ПулКодовМаркировкиСУЗ.Характеристика
		|		И ТабличнаяЧасть.СпособВводаВОборот = ПулКодовМаркировкиСУЗ.СпособВводаВОборот
		|		И ТабличнаяЧасть.ВидКИЗ             = ПулКодовМаркировкиСУЗ.ВидКИЗ
		|		И ТабличнаяЧасть.GTIN               = ПулКодовМаркировкиСУЗ.GTIN
		|		И ТабличнаяЧасть.РазмерКИЗ          = ПулКодовМаркировкиСУЗ.РазмерКИЗ
		|		И ТабличнаяЧасть.Шаблон             = ПулКодовМаркировкиСУЗ.Шаблон");

		ПараметрыЗаказа = НоваяТаблицаПараметровЗаказаКодовМаркировки();
		Для Каждого ПараметрЗаказа Из ПараметрыЗапроса.ПараметрыЗаказа Цикл
			НоваяСтрока = ПараметрыЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрЗаказа);
		КонецЦикла;
		Запрос.УстановитьПараметр("ПараметрыЗаказа", ПараметрыЗаказа);
		Запрос.УстановитьПараметр("Ссылка",          ЭлементОчереди.Документ);

		СтрокиЗаказа = Запрос.Выполнить().Выгрузить();

		Если СтрокиЗаказа.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка:
			                             |При загрузке кодов маркировки не найдена исходная строка заказа на эмиссию';
			                             |en = 'Внутренняя ошибка:
			                             |При загрузке кодов маркировки не найдена исходная строка заказа на эмиссию'");
		КонецЕсли;

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Шапка.ВидПродукции            КАК ВидПродукции,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ТабличнаяЧасть.СпособВводаВОборот
		|		ИНАЧЕ Шапка.СпособВводаВОборот
		|	КОНЕЦ                         КАК СпособВводаВОборот,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
		|	КОНЕЦ                         КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ТабличнаяЧасть.Характеристика
		|	КОНЕЦ                         КАК Характеристика,
		|
		|	ТабличнаяЧасть.GTIN           КАК GTIN,
		|	ТабличнаяЧасть.Шаблон         КАК Шаблон,
		|	ТабличнаяЧасть.СрокГодности   КАК СрокГодности,
		|	ВЫБОР
		|		КОГДА
		|			ТабличнаяЧасть.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС)
		|				ТОГДА ТабличнаяЧасть.ИдентификаторСтроки
		|		ИНАЧЕ """"
		|	КОНЕЦ                                    КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
		|	СУММА(ТабличнаяЧасть.Количество)         КАК Количество,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МаркировкаОстатков
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
		|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.GTIN = &GTIN
		|СГРУППИРОВАТЬ ПО
		|	Шапка.ВидПродукции,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ТабличнаяЧасть.СпособВводаВОборот
		|		ИНАЧЕ Шапка.СпособВводаВОборот
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ТабличнаяЧасть.Характеристика
		|	КОНЕЦ,
		|	ТабличнаяЧасть.GTIN,
		|	ТабличнаяЧасть.Шаблон,
		|	ТабличнаяЧасть.СрокГодности,
		|	ВЫБОР
		|		КОГДА
		|			ТабличнаяЧасть.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС)
		|				ТОГДА ТабличнаяЧасть.ИдентификаторСтроки
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ТабличнаяЧасть.МаксимальнаяРозничнаяЦена,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот КАК СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.Номенклатура       КАК Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика     КАК Характеристика,
		|	ПулКодовМаркировкиСУЗ.GTIN               КАК GTIN,
		|	ПулКодовМаркировкиСУЗ.Шаблон             КАК Шаблон,
		|	ПулКодовМаркировкиСУЗ.СрокГодности       КАК СрокГодности,
		|	СУММА(1)                                 КАК КоличествоПолучено
		|ПОМЕСТИТЬ ДанныеПула
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &Ссылка
		|	И ПулКодовМаркировкиСУЗ.GTIN = &GTIN
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.GTIN,
		|	ПулКодовМаркировкиСУЗ.Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика,
		|	ПулКодовМаркировкиСУЗ.Шаблон,
		|	ПулКодовМаркировкиСУЗ.СрокГодности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.ВидПродукции                           КАК ВидПродукции,
		|	ТабличнаяЧасть.СпособВводаВОборот                     КАК СпособВводаВОборот,
		|	ТабличнаяЧасть.Номенклатура                           КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика                         КАК Характеристика,
		|	ТабличнаяЧасть.GTIN                                   КАК GTIN,
		|	ТабличнаяЧасть.Шаблон                                 КАК Шаблон,
		|	ТабличнаяЧасть.ИдентификаторСтроки                    КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.СпособВводаВОборот                     КАК ТоварыСпособВводаВОборот,
		|	ТабличнаяЧасть.МаксимальнаяРозничнаяЦена              КАК МаксимальнаяРозничнаяЦена,
		|	ТабличнаяЧасть.Количество                             КАК Количество,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.КоличествоПолучено, 0) КАК КоличествоПолучено,
		|	ТабличнаяЧасть.МаркировкаОстатков                     КАК МаркировкаОстатков
		|ИЗ
		|	ТаблицаТовары КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПула КАК ПулКодовМаркировкиСУЗ
		|		ПО ТабличнаяЧасть.Номенклатура      = ПулКодовМаркировкиСУЗ.Номенклатура
		|		И ТабличнаяЧасть.Характеристика     = ПулКодовМаркировкиСУЗ.Характеристика
		|		И ТабличнаяЧасть.СпособВводаВОборот = ПулКодовМаркировкиСУЗ.СпособВводаВОборот
		|		И ТабличнаяЧасть.СрокГодности       = ПулКодовМаркировкиСУЗ.СрокГодности
		|		И ТабличнаяЧасть.Шаблон             = ПулКодовМаркировкиСУЗ.Шаблон
		|		И ТабличнаяЧасть.МаксимальнаяРозничнаяЦена = ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена");
	
		Запрос.УстановитьПараметр("GTIN",       ДанныеПула.GTIN);
		Запрос.УстановитьПараметр("Ссылка",     ЭлементОчереди.Документ);
		Запрос.УстановитьПараметр("НачалоGTIN", ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
		Запрос.УстановитьПараметр(
			"ПустаяНоменклатура",
			ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Запрос.УстановитьПараметр(
			"ПустаяХарактеристика",
			ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));

		Товары = Запрос.Выполнить().Выгрузить();

		СтруктураПоискаСтрокиЗаказа = Новый Структура;
		СтруктураПоискаСтрокиЗаказа.Вставить("GTIN",                ДанныеПула.GTIN);
		СтруктураПоискаСтрокиЗаказа.Вставить("ИдентификаторСтроки", ПараметрыЗапроса.ИдентификаторСтрокиЗаказа);
		СтруктураПоискаСтрокиЗаказа.Вставить("Шаблон",              ПараметрыЗапроса.Шаблон);

		МассивПолейИндекса = Новый Массив();
		Для Каждого КлючИЗначение Из СтруктураПоискаСтрокиЗаказа Цикл
			МассивПолейИндекса.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		Товары.Индексы.Добавить(СтрСоединить(МассивПолейИндекса, ","));

		СтрокиЗаказа = Товары.НайтиСтроки(СтруктураПоискаСтрокиЗаказа);
		Если СтрокиЗаказа.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка:
			                             |При загрузке кодов маркировки не найдена исходная строка заказа на эмиссию';
			                             |en = 'Внутренняя ошибка:
			                             |При загрузке кодов маркировки не найдена исходная строка заказа на эмиссию'");
		КонецЕсли;

	КонецЕсли;
	
	Возврат СтрокиЗаказа;
	
КонецФункции

Процедура ВыбратьСтрокуДляРаспределенияКодовМаркировки(ПараметрыСтрокЗаказа, ПараметрыКода)
	
	Если ПараметрыСтрокЗаказа.СтрокиЗаказа.Количество() = 1 Тогда
		ПараметрыСтрокЗаказа.ТекущаяСтрока = ПараметрыСтрокЗаказа.СтрокиЗаказа[0];
		Возврат;
	КонецЕсли;
	
	ЭтоМех = (ПараметрыСтрокЗаказа.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);

	Если ПараметрыСтрокЗаказа.РежимПереполнения Тогда
		
		НоваяСтрока             = Неопределено;
		МинимальноеПереполнение = Неопределено;
		
		Для Каждого ТекущаяСтрока Из ПараметрыСтрокЗаказа.СтрокиЗаказа Цикл
			
			Если ЭтоМех И Не СтрокаЗаказаСоответствуетПараметруКода(ТекущаяСтрока, ПараметрыКода) Тогда
				Продолжить;
			КонецЕсли;
			Если ТекущаяСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущееПереполнение = ТекущаяСтрока.КоличествоПолучено / ТекущаяСтрока.Количество;
			
			Если МинимальноеПереполнение = Неопределено Тогда
				МинимальноеПереполнение = ТекущееПереполнение;
				НоваяСтрока = ТекущаяСтрока;
				Продолжить;
			КонецЕсли;
			
			Если ТекущееПереполнение < МинимальноеПереполнение Тогда
				МинимальноеПереполнение = ТекущееПереполнение;
				НоваяСтрока = ТекущаяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НоваяСтрока = Неопределено Тогда
			Для Каждого СтрокаЗаказа Из ПараметрыСтрокЗаказа.СтрокиЗаказа Цикл
				Если ЭтоМех И Не СтрокаЗаказаСоответствуетПараметруКода(СтрокаЗаказа, ПараметрыКода) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = СтрокаЗаказа;
				Прервать;
			КонецЦикла;
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ПараметрыСтрокЗаказа.СтрокиЗаказа[0];
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСтрокЗаказа.ТекущаяСтрока = НоваяСтрока;
		
	Иначе
		
		Если ПараметрыСтрокЗаказа.ТекущаяСтрока = Неопределено Тогда
			Для Каждого СтрокаЗаказа Из ПараметрыСтрокЗаказа.СтрокиЗаказа Цикл
				Если ЭтоМех И Не СтрокаЗаказаСоответствуетПараметруКода(СтрокаЗаказа, ПараметрыКода) Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыСтрокЗаказа.ТекущаяСтрока = СтрокаЗаказа;
				Прервать;
			КонецЦикла;
			Если ПараметрыСтрокЗаказа.ТекущаяСтрока = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка:
			                                 |При загрузке кодов маркировки не найдена исходная строка заказа на эмиссию';
			                                 |en = 'Внутренняя ошибка:
			                                 |При загрузке кодов маркировки не найдена исходная строка заказа на эмиссию'");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыСтрокЗаказа.ТекущаяСтрока.Количество >= ПараметрыСтрокЗаказа.ТекущаяСтрока.КоличествоПолучено Тогда
			
			НоваяСтрока = Неопределено;
			Для Каждого ТекущаяСтрока Из ПараметрыСтрокЗаказа.СтрокиЗаказа Цикл
				
				Если ЭтоМех И Не СтрокаЗаказаСоответствуетПараметруКода(ТекущаяСтрока, ПараметрыКода) Тогда
					Продолжить;
				КонецЕсли;
				Если ТекущаяСтрока.Количество > ТекущаяСтрока.КоличествоПолучено Тогда
					НоваяСтрока = ТекущаяСтрока;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НоваяСтрока = Неопределено Тогда
				ПараметрыСтрокЗаказа.РежимПереполнения = Истина;
				ПараметрыСтрокЗаказа.ТекущаяСтрока     = Неопределено;
				ВыбратьСтрокуДляРаспределенияКодовМаркировки(ПараметрыСтрокЗаказа, ПараметрыКода);
			Иначе
				ПараметрыСтрокЗаказа.ТекущаяСтрока = НоваяСтрока;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаЗаказаСоответствуетПараметруКода(СтрокаЗаказа, ПараметрыКода)

	Возврат (СтрокаЗаказа.GTIN = ПараметрыКода.GTIN
		И СтрокаЗаказа.ВидКИЗ = ПараметрыКода.ВидКИЗ
		И СтрокаЗаказа.РазмерКИЗ = ПараметрыКода.РазмерКИЗ
		И СтрокаЗаказа.СпособВводаВОборот = ПараметрыКода.СпособВводаВОборот
		И СтрокаЗаказа.КодТНВЭД = ПараметрыКода.КодТНВЭД);

КонецФункции

// Новая таблица параметров заказа кодов маркировки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица параметров заказа кодов маркировки:
// * СпособВводаВОборот - ПеречислениеСсылка.СпособыВводаВОборотСУЗ -
// * Шаблон - ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ -
// * GTIN - ОпределяемыйТип.GTIN
// * ВидКИЗ - ПеречислениеСсылка.ВидыКиЗГИСМ -
// * РазмерКИЗ - ПеречислениеСсылка.РазмерыКиЗГИСМ -
// * КодТНВЭД - Строка -
Функция НоваяТаблицаПараметровЗаказаКодовМаркировки() Экспорт

	ПараметрыЗаказа = Новый ТаблицаЗначений();
	ПараметрыЗаказа.Колонки.Добавить("СпособВводаВОборот", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ПараметрыЗаказа.Колонки.Добавить("Шаблон",             Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	ПараметрыЗаказа.Колонки.Добавить("GTIN",               Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПараметрыЗаказа.Колонки.Добавить("ВидКИЗ",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКиЗГИСМ"));
	ПараметрыЗаказа.Колонки.Добавить("РазмерКИЗ",          Новый ОписаниеТипов("ПеречислениеСсылка.РазмерыКиЗГИСМ"));
	ПараметрыЗаказа.Колонки.Добавить("КодТНВЭД",           ОбщегоНазначения.ОписаниеТипаСтрока(10));

	Возврат ПараметрыЗаказа;

КонецФункции

Функция ЗапроситьСтатусПулаКодовМаркировкиПоСтрокеЗаказаИПолучитьКоды(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	РезультатОбработкиПула = Новый Структура;
	РезультатОбработкиПула.Вставить("ОбработкаПулаЗавершена",                      Ложь);
	РезультатОбработкиПула.Вставить("ИдентификаторПоследнегоБлокаКодов");
	РезультатОбработкиПула.Вставить("ОбновитьИдентификаторЗаявкиСообщенияОчереди", Ложь);
	РезультатОбработкиПула.Вставить("ТребуетсяОбновлениеКлючаСессии",              Ложь);
	РезультатОбработкиПула.Вставить("ТекстОшибки",                                 Неопределено);

	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	ТребуетсяAPIМех   = (ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);

	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		Результат = ИнтерфейсСУЗ.СтатусПулаКодовМаркировкиИзБизнесЗаказа_V1(
			ПараметрыЗапроса,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2
		Или НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3 Тогда
		Если ТребуетсяAPIМех Тогда
			Результат = ИнтерфейсСУЗ.СтатусЗаказаПоИдентификатору(ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ, ПараметрыЗапроса.ИдентификаторБизнесЗаказа)
		Иначе
			Результат = ИнтерфейсСУЗ.СтатусПулаКодовМаркировкиИзБизнесЗаказа_V2(
				ПараметрыЗапроса, ЭлементОчереди.ВидПродукции,
				НастройкаОбменаСУЗ);
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается';
				|en = 'Формат обмена %1 не поддерживается'"),
			ЭлементОчереди.ФорматОбмена);
	КонецЕсли;
	
	КодыМожноЗагружать = Истина;
	Если ТребуетсяAPIМех Тогда
		Если Результат.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗОтгруженоЗаказчику Тогда
			СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Готов;
		ИначеЕсли Результат.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка Тогда
			КодыМожноЗагружать = Ложь;
		Иначе
			СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Закрыт;
		КонецЕсли;
	ИначеЕсли Результат.ДанныеПула <> Неопределено Тогда
		ДанныеПула = Результат.ДанныеПула;
		СтатусПула = ДанныеПула.Статус;
	Иначе
		КодыМожноЗагружать = Ложь;
	КонецЕсли;

	Если КодыМожноЗагружать Тогда
		
		ОбработатьПараметрыЗагрузкиКодовПриВыполненииОперации(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);

		ЭлементОчередиСообщенияОснования = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

		Если ДобавлятьЗаписьВПротоколОбмена(ЭлементОчередиСообщенияОснования, Результат) Тогда
			ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
				ЭлементОчередиСообщенияОснования,
				Результат);
			РезультатОбработкиПула.ОбновитьИдентификаторЗаявкиСообщенияОчереди = Истина;
		КонецЕсли;
		
		Если СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Готов Тогда
			
			РезультатЗапросаКодовМаркировки = ЗапроситьКодыМаркировкиИзБизнесЗаказа(
				ПараметрыЗапроса, ДанныеПула,
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
			
			Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаКодовМаркировки, ЭлементОчереди, ПараметрыОбмена) Тогда
				РезультатОбработкиПула.ТребуетсяОбновлениеКлючаСессии = Истина;
				Возврат РезультатОбработкиПула;
			КонецЕсли;
			
			Если РезультатЗапросаКодовМаркировки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
				
				// Требуется ожидание
				Если ЭлементОчереди.ТекущийСтатус = СтатусПула
					И ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки Тогда
					// Если с момента последнего изменения статуса прошло более 5 минут,
					// то отложим обработку элемента очереди до следующей попытки обмена.
					Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
						И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
						ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
					Иначе
						ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
					КонецЕсли;
				Иначе
					
					ЭлементОчереди.ТекущийСтатус          = СтатусПула;
					ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
					
					Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
						ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
					КонецЕсли;
					
				КонецЕсли;
				
				РезультатОбработкиПула.ОбработкаПулаЗавершена = Ложь;
				
			Иначе
				
				Если ЗначениеЗаполнено(РезультатЗапросаКодовМаркировки.ТекстОшибки) Тогда
					Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо Тогда
						РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
					Иначе
						ВызватьИсключение РезультатЗапросаКодовМаркировки.ТекстОшибки;
					КонецЕсли;
				ИначеЕсли ТребуетсяAPIМех Тогда
					РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
					РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов = РезультатЗапросаКодовМаркировки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов;
				Иначе
					РезультатОбработкиПула.ОбработкаПулаЗавершена = (ДанныеПула.Остаток - РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки.Количество()) <= 0;
					РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов = РезультатЗапросаКодовМаркировки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов;
				КонецЕсли;
				
				ЭлементОчереди.ТекущийСтатус          = СтатусПула;
				ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
				
				Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
					ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Обрабатывается Тогда
			
			// Требуется ожидание
			Если ЭлементОчереди.ТекущийСтатус = СтатусПула
				И ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки Тогда
				// Если с момента последнего изменения статуса прошло более 5 минут,
				// то отложим обработку элемента очереди до следующей попытки обмена.
				Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
					И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
					ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				Иначе
					ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
				КонецЕсли;
			Иначе
				
				ЭлементОчереди.ТекущийСтатус          = СтатусПула;
				ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
				
				Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
					ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Ложь;
			
		ИначеЕсли СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Закрыт Тогда
			
			// Элемент очереди отработан
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
			
			ЭлементОчереди.ТекущийСтатус          = СтатусПула;
			ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
		ИначеЕсли СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка
			Или СтатусПула = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Отклонен Тогда
			
			// Элемент очереди отработан
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
			
			ЭлементОчереди.ТекущийСтатус          = СтатусПула;
			ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Результат.РезультатОтправкиЗапроса <> Неопределено
		И Результат.РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
		
		// Элемент очереди отработан
		РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
		
	ИначеЕсли Результат.РезультатОтправкиЗапроса <> Неопределено
		И Результат.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		
		// Подзаказ утерян
		РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Подзаказ %1 не найден в ГИС МТ.';
				|en = 'Подзаказ %1 не найден в ГИС МТ.'"),
			ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
			
		Результат.ТекстОшибки = ТекстОшибки + Символы.ПС + Результат.ТекстОшибки;
		
		ЭлементОчередиСообщенияОснования = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		Если ЭлементОчередиСообщенияОснования <> Неопределено Тогда
			ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
				ЭлементОчередиСообщенияОснования,
				Результат);
		КонецЕсли;
		
		ЭлементОчереди.ТекущийСтатус          = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка;
		ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;

	ИначеЕсли Результат.ТребуетсяОбновлениеКлючаСессии Тогда
		
		РезультатОбработкиПула.ТребуетсяОбновлениеКлючаСессии = Истина;
		
	Иначе
		
		ВызватьИсключение Результат.ТекстОшибки;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиПула;
	
КонецФункции

Процедура ОбработатьПараметрыЗагрузкиКодовПриВыполненииОперации(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)

	Если ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо Тогда
		Возврат;
	КонецЕсли;

	Если Не ПараметрыОбмена.Свойство("ПараметрыЗагрузкиКодовМаркировкиВПул") Тогда
		ПараметрыОбмена.Вставить("ПараметрыЗагрузкиКодовМаркировкиВПул", Новый Соответствие());
	КонецЕсли;

	ПараметрыЗагрузкиКодовМаркировкиВПул = ПараметрыОбмена.ПараметрыЗагрузкиКодовМаркировкиВПул[ЭлементОчереди.Сообщение];
	Если ПараметрыЗагрузкиКодовМаркировкиВПул = Неопределено Тогда
		ПараметрыЗагрузкиКодовМаркировкиВПул = ПараметрыЗагрузкиКодовМаркировкиВПул();
		ПараметрыЗагрузкиКодовМаркировкиВПул.ТребуетсяПоискСуществующихКодов = (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо);
		ПараметрыОбмена.ПараметрыЗагрузкиКодовМаркировкиВПул.Вставить(
			ЭлементОчереди.Сообщение,
			ПараметрыЗагрузкиКодовМаркировкиВПул);
	КонецЕсли;

	Если ПараметрыЗагрузкиКодовМаркировкиВПул.ТребуетсяПоискСуществующихКодов
		И Не ПараметрыЗагрузкиКодовМаркировкиВПул.СуществуюшиеКодыПрочитаны Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки
			|ИЗ
			|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
			|ГДЕ
			|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &Документ";

		Запрос.УстановитьПараметр("Документ", ЭлементОчереди.Документ);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПараметрыЗагрузкиКодовМаркировкиВПул.СуществующиеКоды.Добавить(ВыборкаДетальныеЗаписи.КодМаркировки);
		КонецЦикла;
		ПараметрыЗагрузкиКодовМаркировкиВПул.СуществуюшиеКодыПрочитаны = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ДобавлятьЗаписьВПротоколОбмена(ЭлементОчередиСообщения, Результат)

	ДобавлятьЗаписьВПротоколОбмена = Истина;
	Если ЭлементОчередиСообщения.ПротоколОбмена = Неопределено Тогда
		Возврат ДобавлятьЗаписьВПротоколОбмена;
	КонецЕсли;
	Если ЭлементОчередиСообщения <> Неопределено Тогда
		КоличествоСтрокПротоколаОбмена = ЭлементОчередиСообщения.ПротоколОбмена.Количество();
		Если КоличествоСтрокПротоколаОбмена > 0 Тогда
			ПоследняяЗаписьПротокола = ЭлементОчередиСообщения.ПротоколОбмена[КоличествоСтрокПротоколаОбмена - 1];
			Если ПоследняяЗаписьПротокола.СтатусОбработки = Результат.СтатусОбработки
				И ПоследняяЗаписьПротокола.ОтветТело = Результат.РезультатОтправкиЗапроса.ТекстВходящегоСообщения Тогда
				ДобавлятьЗаписьВПротоколОбмена = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДобавлятьЗаписьВПротоколОбмена = Ложь;
	КонецЕсли;

	Возврат ДобавлятьЗаписьВПротоколОбмена;

КонецФункции

Процедура ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиИСМП(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировки");
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМПОбщегоНазначения.СтатусОбработкиДокументаПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.Организация,, Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект,
		"error_code")
		И РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект.error_code = 412102 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	СтатусыЗаказов = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли РезультатОбработкиЗаявки.Статус = СтатусыЗаказов.ИСМПНаРассмотренииОператором
			Или РезультатОбработкиЗаявки.Статус = СтатусыЗаказов.КОплате Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПолноеИмя = ЭлементОчереди.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
			ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
	
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
		КонецЕсли;
		
		Если РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству
			Или РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично Тогда
			
			ТребуетсяЗапроситьКоды = Истина;
			Если РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки
				|ИЗ
				|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
				|ГДЕ
				|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию");
				Запрос.УстановитьПараметр("ЗаказНаЭмиссию", ЭлементОчереди.Документ);
				ТребуетсяЗапроситьКоды = Не Запрос.Выполнить().Пустой();
			КонецЕсли;
			
			Объект = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект;
			Если Объект <> Неопределено И ТребуетсяЗапроситьКоды Тогда
				
				ЗагружатьДо = ЭлементОчереди.Сообщение;
				
				ИнформацияПоДокументу = Объект.document_information;
				Для Каждого ЭлементДанных Из ИнформацияПоДокументу.products_information Цикл
					
					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", ЭлементОчереди.ИдентификаторЗаявки);
					ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", ЭлементДанных.order_line_id);
					ПараметрыЗапроса.Вставить("GTIN",                      ЭлементДанных.gtin);
					
					НовыйЭлементОчереди = ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(
						ПараметрыЗапроса,
						ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ);
					
					Если НовыйЭлементОчереди <> Неопределено Тогда
						
						// Коды маркировки загружаются строго последовательно.
						ЗагружатьДо = НовыйЭлементОчереди.Сообщение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		СтрокаРезультата.Организация               = ЭлементОчереди.Организация;
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен     = Ложь;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура УстановитьДатуСледующейИтерацииЗапросаКСУЗ(ЭлементОчереди)

	ВремяОжидания = ИнтерфейсСУЗ.ИнтервалПолученияСтатусаОбработкиОтчетаСУЗ();
	Если ВремяОжидания > 0 Тогда
		ЭлементОчереди.ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания;
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьКодыМаркировки(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ЭлементОчередиОснование = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьКодыМаркировки");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	РезультатОбработкиПула = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		РезультатОбработкиПула = ЗапроситьСтатусПулаКодовМаркировкиПоСтрокеЗаказаИПолучитьКоды(
			ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиПула, ЭлементОчереди, ПараметрыОбмена) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если РезультатОбработкиПула.ОбновитьИдентификаторЗаявкиСообщенияОчереди
			И ЭлементОчередиОснование <> Неопределено Тогда
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписейОснования,,,
				Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена));
		КонецЕсли;
		
		ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписей,,,,
			РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов);
		
		Если РезультатОбработкиПула.ОбработкаПулаЗавершена Тогда
			
			Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2
				Или НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3 Тогда
				
				Если ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
					И ЭлементОчереди.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
					
					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
					ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ИдентификаторСтрокиЗаказа);
					ПараметрыЗапроса.Вставить("GTIN",                              ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.GTIN);
					ПараметрыЗапроса.Вставить("Шаблон",                            ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Шаблон);
					ПараметрыЗапроса.Вставить("ИдентификаторПоследнегоБлокаКодов", РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов);
					ПараметрыЗапроса.Вставить("ДанныеПовторногоПолучения",         Неопределено);
					
					РезультатДанныхПовтороногоПолучения = ДанныеПовторногоПолученияКодов(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
					Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатДанныхПовтороногоПолучения, ЭлементОчереди, ПараметрыОбмена) Тогда
						Возврат;
					ИначеЕсли ЗначениеЗаполнено(РезультатДанныхПовтороногоПолучения.ТекстОшибки) Тогда
						ВызватьИсключение РезультатДанныхПовтороногоПолучения.ТекстОшибки;
					КонецЕсли;
					ПараметрыЗапроса.ДанныеПовторногоПолучения = РезультатДанныхПовтороногоПолучения.Данные;
					
					Если ЭлементОчередиОснование = Неопределено Тогда
						ЭлементОчередиКПередаче            = ЭлементОчереди;
						ЭлементОчередиКПередачеЗагружатьДо = "";
					Иначе
						ЭлементОчередиКПередаче            = ЭлементОчередиОснование;
						ЭлементОчередиКПередачеЗагружатьДо = ЭлементОчередиОснование.Сообщение;
					КонецЕсли;
					
					ПодготовитьКПередачеСообщениеНаЗакрытиеПодзаказаНаЭмиссиюКодовМаркировки(
						ЭлементОчередиКПередаче, ЭлементОчередиКПередачеЗагружатьДо, ПараметрыЗапроса, ПараметрыОбмена, НастройкаОбменаСУЗ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;

		ТранзакцияЗафиксирована = Истина;

		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ТранзакцияЗафиксирована = Ложь;

		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);

		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");

		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;

		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);

	КонецПопытки;

	Если (РезультатОбработкиПула <> Неопределено
		И РезультатОбработкиПула.ОбработкаПулаЗавершена)
		И ТранзакцияЗафиксирована Тогда

		ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов;
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

	ИначеЕсли Не ТранзакцияЗафиксирована Тогда

		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);

		Возврат;

	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);

КонецПроцедуры

Процедура ЗагрузитьКодыМаркировкиНезависимо(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)

	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьКодыМаркировкиНезависимо");

	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	РезультатОбработкиПула = Неопределено;

	НачатьТранзакцию();

	Попытка

		Блокировка = Новый БлокировкаДанных;

		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();

		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			ЗафиксироватьТранзакцию();
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			Возврат;
		КонецЕсли;

		РезультатОбработкиПула = ЗапроситьСтатусПулаКодовМаркировкиПоСтрокеЗаказаИПолучитьКоды(
			ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);

		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиПула, ЭлементОчереди, ПараметрыОбмена) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписей,,,,
			РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов);

		Если РезультатОбработкиПула.ОбработкаПулаЗавершена Тогда
			ЗаписатьПротоколОбменаВФайлСОписаниемОшибкиИзПротокола(ЭлементОчереди);
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			ОбработатьРезультатПолученияСообщения(РезультатОбработкиПула, ЭлементОчереди, ПараметрыОбмена);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если (РезультатОбработкиПула <> Неопределено
		И РезультатОбработкиПула.ОбработкаПулаЗавершена)
		И ТранзакцияЗафиксирована Тогда
		
		ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов;
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьКодыМаркировкиПовторно(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьКодыМаркировкиПовторно");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого СтрокаПовторногоПолучения Из ПараметрыЗапроса.ДанныеПовторногоПолучения Цикл
		
			ДанныеПулаПовторно = Новый Структура();
			ДанныеПулаПовторно.Вставить("GTIN",    ПараметрыЗапроса.GTIN);
			ДанныеПулаПовторно.Вставить("Остаток", СтрокаПовторногоПолучения.Количество);
			
			ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = СтрокаПовторногоПолучения.ИдентификаторБлока;
			
			//@skip-check query-in-loop
			РезультатЗапросаКодовМаркировки = ЗапроситьКодыМаркировкиИзБизнесЗаказа(
				ПараметрыЗапроса, ДанныеПулаПовторно,
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
			
			Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаКодовМаркировки, ЭлементОчереди, ПараметрыОбмена) Тогда
				Возврат;
			КонецЕсли;
			
			ДанныеОбработаны = Истина;
			
			Если РезультатЗапросаКодовМаркировки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
				
				// Требуется ожидание
				Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
					И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
					ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				Иначе
					ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
				КонецЕсли;
				ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.Обрабатывается;
			
				ДанныеОбработаны = Ложь;
				
			ИначеЕсли РезультатЗапросаКодовМаркировки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				
				ЭлементОчереди.ТекущийСтатус                = Перечисления.СтатусыДокументовИСМП.Принят;
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				
			Иначе
				
				ЭлементОчереди.ТекущийСтатус                = Перечисления.СтатусыДокументовИСМП.Ошибка;
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				
			КонецЕсли;
			
			Если ДанныеОбработаны Тогда
				ИндексСтроки = ПараметрыЗапроса.ДанныеПовторногоПолучения.Найти(СтрокаПовторногоПолучения);
				ПараметрыЗапроса.ДанныеПовторногоПолучения.Удалить(ИндексСтроки);
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
		Если ПараметрыЗапроса.ДанныеПовторногоПолучения.Количество() = 0 Тогда
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки (повторно) по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке кодов маркировки (повторно) по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки (повторно) по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке кодов маркировки (повторно) по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ПараметрыЗапроса.ДанныеПовторногоПолучения.Количество() = 0
		И ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ПараметрыЗагрузкиКодовМаркировкиВПул()

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяПоискСуществующихКодов", Ложь);
	ВозвращаемоеЗначение.Вставить("СуществуюшиеКодыПрочитаны",       Ложь);
	ВозвращаемоеЗначение.Вставить("СуществующиеКоды",                Новый Массив());

	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ДанныеПовторногоПолученияКодов(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("Данные",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ПараметрыЗапросаКодов = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Количество = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапросаКодов, "Количество", 0);
	GTIN       = ПараметрыЗапросаКодов.GTIN;
	
	Если Не ЗначениеЗаполнено(Количество) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПулКодовМаркировкиСУЗ.КодМаркировки) КАК Количество,
		|	ПулКодовМаркировкиСУЗ.ИдентификаторБлокаСУЗ     КАК ИдентификаторБлока
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию           = &ЗаказНаЭмиссию
		|	И ПулКодовМаркировкиСУЗ.ИдентификаторЗаказаСУЗ = &ИдентификаторЗаказаСУЗ
		|	И ПулКодовМаркировкиСУЗ.GTIN                   = &GTIN
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗ.ИдентификаторБлокаСУЗ";
	
	Запрос.УстановитьПараметр("GTIN",                   GTIN);
	Запрос.УстановитьПараметр("ИдентификаторЗаказаСУЗ", ПараметрыЗапросаКодов.ИдентификаторБизнесЗаказа);
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию",         ЭлементОчереди.Документ);
	
	ТаблицаБлоков = Запрос.Выполнить().Выгрузить();
	ПолученоКодов = ТаблицаБлоков.Итог("Количество");
	
	Если ПолученоКодов >= Количество Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтерфейсСУЗ.ЗапроситьСписокИдентификаторовПакетовБизнесЗаказа_V2(
		ПараметрыЗапросаКодов, ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если РезультатЗапроса.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		Если РезультатЗапроса.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		КонецЕсли;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДанныеПовторногоПолучения = Новый Массив();
	
	Для Каждого СтрокаРезультат Из РезультатЗапроса.ДанныеБлоков Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИдентификаторБлока", СтрокаРезультат.ИдентификаторБлока);
		
		ПоискБлоков = ТаблицаБлоков.НайтиСтроки(СтруктураПоиска);
		
		Если ПоискБлоков.Количество() = 0 Тогда
			ДанныеПовторногоПолучения.Добавить(СтрокаРезультат);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПовторногоПолучения.Количество() <> 0 Тогда
		ВозвращаемоеЗначение.Данные = ДанныеПовторногоПолучения
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗагрузитьВходящиеДокументы(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументы");
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТипИСМП = "ЗагрузитьВходящиеДокументы";
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		// Загрузка входящих документов в ИБ
		ПараметрыЗагрузки = Новый Структура;
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("НачалоПериода")
			Или ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("КонецПериода") Тогда
			ПараметрыЗагрузки.Вставить("НачалоПериода", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.НачалоПериода);
			ПараметрыЗагрузки.Вставить("КонецПериода",  ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.КонецПериода);
		КонецЕсли;
		
		Результат = ЗагрузитьДокументы(ЭлементОчереди, ПараметрыОбмена, ПараметрыЗагрузки);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(Результат, ЭлементОчереди, ПараметрыОбмена)
			Или ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = Результат.ТекстОшибки;
			ТранзакцияЗафиксирована = Ложь;
			
		Иначе
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
			
			ТранзакцияЗафиксирована = Истина;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке входящих документов возникла ошибка:
			           |Текст ошибки: %1
			           |Организация: %2
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке входящих документов возникла ошибка:
			           |Текст ошибки: %1
			           |Организация: %2
			           |Текст JSON см. в журнале регистрации.'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке входящих документов возникла ошибка:
			           |Текст ошибки: %1
			           |Организация: %2';
			           |en = 'При загрузке входящих документов возникла ошибка:
			           |Текст ошибки: %1
			           |Организация: %2'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, Неопределено, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

#Область ЗагрузкаДокументовПриемкаТоваровИСМП

// Загрузка входящих документов Приемка товаров из ИС МП.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена.
//  ПараметрыЗагрузки - Структура из КлючИЗначение - параметры отбора для загрузки:
//   * НачалоПериода - Дата - дата начала отбора по периоду.
//   * КонецПериода  - Дата - дата окончания отбора по периоду.
// 
// Возвращаемое значение:
//  Структура - См. ИнтерфейсИСМП.НайтиДокументыПоОтбору, ИнтерфейсИСМП.СоставДокументаПоИдентификатору.
Функция ЗагрузитьДокументы(ЭлементОчереди, ПараметрыОбмена, ПараметрыЗагрузки)
	
	РезультатЗапросаДокументов = ВходящиеДокументы(ЭлементОчереди, ПараметрыЗагрузки);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДокументов, ЭлементОчереди, ПараметрыОбмена)
		Или ЗначениеЗаполнено(РезультатЗапросаДокументов.ТекстОшибки)
		Или РезультатЗапросаДокументов.НайденныеДокументы = Неопределено Тогда
		Возврат РезультатЗапросаДокументов;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДоступныеДокументы.Идентификатор Как Идентификатор
	|ПОМЕСТИТЬ втДоступныеДокументы
	|ИЗ
	|	&ДоступныеДокументы как ДоступныеДокументы
	|ИНДЕКСИРОВАТЬ ПО 
	|	ДоступныеДокументы.Идентификатор");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	втДоступныеДокументы.Идентификатор
	|ИЗ
	|	втДоступныеДокументы КАК втДоступныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|		ПО втДоступныеДокументы.Идентификатор = ПриемкаТоваровИСМП.НомерЗаявкиНаОтгрузку
	|		И НЕ ПриемкаТоваровИСМП.ПометкаУдаления
	|ГДЕ
	|	ПриемкаТоваровИСМП.Ссылка ЕСТЬ NULL",
	"ДокументыДляЗагрузки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеДокументы", РезультатЗапросаДокументов.ДоступныеДокументы);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-check bsl-legacy-check-string-literal
	ДокументыДляЗагрузки = РезультатЗапроса["ДокументыДляЗагрузки"].Выгрузить();
	
	Если ДокументыДляЗагрузки.Количество() = 0 Тогда
		Возврат РезультатЗапросаДокументов;
	КонецЕсли;
	
	Для Каждого ИдентификаторДокумента Из ДокументыДляЗагрузки Цикл
		
		ЭлементОчередиДляЗагрузкиДокумента = Новый Структура;
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("ПротоколОбмена");
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("СообщениеОснование");
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("Операция",     Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов);
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("Организация",  ЭлементОчереди.Организация);
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("ВидПродукции", ЭлементОчереди.ВидПродукции);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Идентификатор",     ИдентификаторДокумента.Идентификатор);
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ЭлементОчереди.ВидПродукции) Тогда
			ПараметрыОбработки = ИнтерфейсИСМП.НовыеПараметрыОбработкиСоставаДокумента();
			ПараметрыОбработки.ИмяПоляСортировки = "gtin";
		КонецЕсли;

		СтруктураОбработкиДокумента = СоставДокументаПоИдентификатору(
			ЭлементОчередиДляЗагрузкиДокумента, ПараметрыОтбора, ПараметрыОбработки);
		
		Если ЗначениеЗаполнено(СтруктураОбработкиДокумента.ТекстОшибки)
			Или СтруктураОбработкиДокумента.ТребуетсяОбновлениеКлючаСессии
			Или СтруктураОбработкиДокумента.ДанныеДокумента = Неопределено Тогда
			
			Возврат СтруктураОбработкиДокумента;
			
		КонецЕсли;
		
		СоставДокумента = СтруктураОбработкиДокумента.СоставДокумента;
		Если СоставДокумента.Количество() > 0 Тогда
			
			РезультатПроверкиТоварнойГруппы = Неопределено;
			ПроверитьВидПродукцииДокументаПоДаннымСервиса(
				СоставДокумента, 
				ЭлементОчереди.Организация,
				ЭлементОчереди.ВидПродукции,
				РезультатПроверкиТоварнойГруппы);
			
			Если РезультатПроверкиТоварнойГруппы <> Неопределено Тогда
					
				Если РезультатПроверкиТоварнойГруппы.Свойство("РазличныеТоварныеГруппы") Тогда
					Продолжить;
				КонецЕсли;
				СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
				
				СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение        = ЭлементОчереди.Назначение;
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = Неопределено;
				СтрокаРезультата.ДокументОснование = Неопределено;
				
				СтрокаРезультата.ТекстОшибки           = РезультатПроверкиТоварнойГруппы.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = Неопределено;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение             = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения        = "";
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				Продолжить;
			КонецЕсли;
			
			Для Каждого ДанныеДокумента Из СтруктураОбработкиДокумента.ДанныеДокумента Цикл
			
				ДокументОбъект = Документы.ПриемкаТоваровИСМП.СоздатьДокумент();
				ДокументОбъект.Организация  = ЭлементОчереди.Организация;
				ДокументОбъект.ВидПродукции = ЭлементОчереди.ВидПродукции;
				
				ТелоДокумента             = ДанныеДокумента.body;
				ВыводИзОборота            = Ложь;
				ЭтоТрансграничнаяОперация = Ложь;
				ЭтоОбъемноСортовойУчет    = Ложь;
				ВидБезвозмезднойОперации = Неопределено;
				Если ТелоДокумента.Свойство("withdrawal_from_turnover", ВыводИзОборота) и ВыводИзОборота Тогда
					ВидБезвозмезднойОперации = ТелоДокумента.withdrawal_type;
				КонецЕсли;
				
				Если ТелоДокумента.Свойство("sender_inn") Тогда
					ИННОтправителя = ТелоДокумента.sender_inn;
				КонецЕсли;
				Если ТелоДокумента.Свойство("turnover_type") Тогда
					ДокументОбъект.Операция = ВидОперацииПриемкаТоваров(ТелоДокумента.turnover_type, ВидБезвозмезднойОперации);
				ИначеЕсли ДанныеДокумента.Свойство("type") Тогда
					Если ДанныеДокумента.type = "LP_SHIP_GOODS_CROSSBORDER" Тогда
						ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля;
						ЭтоТрансграничнаяОперация = Истина;
					ИначеЕсли ДанныеДокумента.type = "EAS_CROSSBORDER" Тогда
						ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ;
						ЭтоТрансграничнаяОперация = Истина;
					ИначеЕсли ДанныеДокумента.type = "EAS_GTIN_CROSSBORDER_IMPORT" Тогда
						ДокументОбъект.Операция   = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ;
						ЭтоОбъемноСортовойУчет    = Истина;
					КонецЕсли;
					Если ЭтоТрансграничнаяОперация
						Или ЭтоОбъемноСортовойУчет Тогда
						Если ТелоДокумента.Свойство("exporter_taxpayer_id") Тогда
							ИННОтправителя = ТелоДокумента.exporter_taxpayer_id;
						КонецЕсли;
						ДокументОбъект.ИННОператора = ТелоДокумента.sender_inn;
					КонецЕсли;
				КонецЕсли;
				СертификацияИспользуется = (ЭтоТрансграничнаяОперация Или ЭтоОбъемноСортовойУчет);

				ДокументОбъект.НомерПервичногоДокумента = ТелоДокумента.document_num;
				Если ЗначениеЗаполнено(ТелоДокумента.document_date) Тогда
					ДокументОбъект.ДатаПервичногоДокумента = ПрочитатьДатуJSON(ТелоДокумента.document_date, ФорматДатыJSON.ISO);
				КонецЕсли;
				
				ДокументОбъект.ИННОтправителя = ИННОтправителя;
				
				Если ИнтеграцияИСМПСлужебныйКлиентСервер.ЭтоПриемкаИзСтранЕАЭС(ДокументОбъект.Операция) Тогда
					КонтрагентПоИНН = ИнтеграцияИСМП.КонтрагентПоНалоговомуНомеру(ДокументОбъект.ИННОтправителя);
				Иначе
					КонтрагентПоИНН = ИнтеграцияИСМП.КонтрагентПоИНН(ДокументОбъект.ИННОтправителя);
				КонецЕсли;
				
				Если КонтрагентПоИНН <> Неопределено Тогда
					ДокументОбъект.Контрагент = КонтрагентПоИНН;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТелоДокумента.transfer_date) Тогда
					ДокументОбъект.ДатаОтгрузки = ПрочитатьДатуJSON(ТелоДокумента.transfer_date, ФорматДатыJSON.ISO);
				КонецЕсли;
				
				ДокументОбъект.НомерЗаявкиНаОтгрузку = ДанныеДокумента.number;
				
				ДанныеШтрихкодов = Новый Массив;
				
				ЭтоМех = ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;

				Для Каждого СтрокаКодаМаркировки Из СоставДокумента Цикл
					Если СтрокаКодаМаркировки.Свойство("cis") Тогда
						ИмяСвойстваКодМаркировки = "cis";
					ИначеЕсли СтрокаКодаМаркировки.Свойство("uit_code") Тогда
						ИмяСвойстваКодМаркировки = "uit_code";
					ИначеЕсли СтрокаКодаМаркировки.Свойство("uitu_code") Тогда
						ИмяСвойстваКодМаркировки = "uitu_code";
					ИначеЕсли СтрокаКодаМаркировки.Свойство("gtin") Тогда
						ИмяСвойстваКодМаркировки = "gtin";
					Иначе
						Продолжить;
					КонецЕсли;
					
					СтруктураШтрихкодов = Новый Структура;
					СтруктураШтрихкодов.Вставить("Штрихкод",   СтрокаКодаМаркировки[ИмяСвойстваКодМаркировки]);
					СтруктураШтрихкодов.Вставить("Количество", 1);
					СтруктураШтрихкодов.Вставить("Цена",       0);
					СтруктураШтрихкодов.Вставить("СуммаНДС",   0);
					СтруктураШтрихкодов.Вставить("GTIN",       "");
					СтруктураШтрихкодов.Вставить("ВесПродукции", 0);
					
					Если СтрокаКодаМаркировки.Свойство("product_cost") Тогда
						СтруктураШтрихкодов.Цена = СтрокаКодаМаркировки.product_cost/100;
					КонецЕсли;
					Если СтрокаКодаМаркировки.Свойство("product_tax") Тогда
						СтруктураШтрихкодов.СуммаНДС = СтрокаКодаМаркировки.product_tax/100;
					КонецЕсли;
					Если (ЭтоМех Или ЭтоОбъемноСортовойУчет)
						И СтрокаКодаМаркировки.Свойство("gtin") Тогда
						СтруктураШтрихкодов.GTIN = СтрокаКодаМаркировки.gtin;
					КонецЕсли;
					
					Если ЭтоТрансграничнаяОперация Тогда
						СтруктураШтрихкодов.Вставить("КодТНВЭД", "");
						Если СтрокаКодаМаркировки.Свойство("tnved_code") Тогда
							СтруктураШтрихкодов.КодТНВЭД = СтрокаКодаМаркировки.tnved_code;
						КонецЕсли;
					ИначеЕсли ЭтоОбъемноСортовойУчет Тогда
						Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ДокументОбъект.ВидПродукции) Тогда
							СтруктураШтрихкодов.Вставить("ВСД", "");
							Если СтрокаКодаМаркировки.Свойство("vsd_number") Тогда
								СтруктураШтрихкодов.ВСД = СтрокаКодаМаркировки.vsd_number;
							КонецЕсли;
						КонецЕсли;
						Если СтрокаКодаМаркировки.Свойство("cis_quantity") Тогда
							СтруктураШтрихкодов.Количество = СтрокаКодаМаркировки.cis_quantity;
						КонецЕсли;
						Если СтрокаКодаМаркировки.Свойство("weight") Тогда
							СтруктураШтрихкодов.ВесПродукции = СтрокаКодаМаркировки.weight;
						КонецЕсли;
					КонецЕсли;

					Если СертификацияИспользуется Тогда
						СтруктураШтрихкодов.Вставить("ВидДокументаСертификации",   "");
						СтруктураШтрихкодов.Вставить("НомерДокументаСертификации", "");
						СтруктураШтрихкодов.Вставить("ДатаДокументаСертификации",  "");
						Если СтрокаКодаМаркировки.Свойство("certificate_document_data") Тогда
							Для Каждого ДанныеСерификации Из СтрокаКодаМаркировки.certificate_document_data Цикл
								СтруктураШтрихкодов.ВидДокументаСертификации   = ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(ДанныеСерификации.certificate_type);
								СтруктураШтрихкодов.НомерДокументаСертификации = ДанныеСерификации.certificate_number;
								СтруктураШтрихкодов.ДатаДокументаСертификации  = ПрочитатьДатуJSON(ДанныеСерификации.certificate_date, ФорматДатыJSON.ISO);
								Прервать;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					ДанныеШтрихкодов.Добавить(СтруктураШтрихкодов);

					СтрокаШтрихкода = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
					СтрокаШтрихкода.ЗначениеШтрихкода = СтруктураШтрихкодов.Штрихкод;
					СтрокаШтрихкода.Цена              = СтруктураШтрихкодов.Цена;
					СтрокаШтрихкода.СуммаНДС          = СтруктураШтрихкодов.СуммаНДС;
					СтрокаШтрихкода.GTIN              = СтруктураШтрихкодов.GTIN;
					Если СтрокаКодаМаркировки.Свойство("count_children") Тогда
						СтрокаШтрихкода.КоличествоУпаковок = СтрокаКодаМаркировки.count_children;
					ИначеЕсли СтрокаКодаМаркировки.Свойство("cis_quantity") Тогда
						СтрокаШтрихкода.КоличествоУпаковок = СтрокаКодаМаркировки.cis_quantity;
					Иначе
						СтрокаШтрихкода.КоличествоУпаковок = 1;
					КонецЕсли;

				КонецЦикла;
				
				Если ЭтоОбъемноСортовойУчет Тогда
					ШтрихкодированиеИСМПСлужебный.ЗаменитьЗначенияШтрихкодаНаОбъемноСортовойУчет(
						ДокументОбъект.ШтрихкодыУпаковок, "ЗначениеШтрихкода", "КоличествоУпаковок");
					ОбработкаДокументаОбъемноСортовогоУчета(ДокументОбъект, ДанныеШтрихкодов);
				Иначе

					РезультатЗапросаВложенныхШтриходов = Неопределено;
					ДополнитьТабличныеЧастиПоДаннымИСМП(ДокументОбъект, ДанныеШтрихкодов, РезультатЗапросаВложенныхШтриходов);

					Если РезультатЗапросаВложенныхШтриходов <> Неопределено Тогда
						СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();

						СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
						СтрокаРезультата.Назначение        = ЭлементОчереди.Назначение;
						СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
						СтрокаРезультата.Объект            = Неопределено;
						СтрокаРезультата.ДокументОснование = Неопределено;

						СтрокаРезультата.ТекстОшибки           = РезультатЗапросаВложенныхШтриходов.ТекстОшибки;
						СтрокаРезультата.ПодготовленоКПередаче = Ложь;
						СтрокаРезультата.Передано              = Ложь;
						СтрокаРезультата.Принято               = Истина;
						СтрокаРезультата.НовыйСтатус           = Неопределено;
						СтрокаРезультата.ОбъектИзменен         = Ложь;

						СтрокаРезультата.Сообщение             = ЭлементОчереди.Сообщение;
						СтрокаРезультата.ТекстСообщения        = "";

						ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
						Продолжить;
					КонецЕсли;
				
				КонецЕсли;

				ДокументОбъект.Дата = ТекущаяДатаСеанса();
				
				ДокументОбъект.Записать();
				
			КонецЦикла;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ДокументОбъект.Ссылка);
			Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
			Реквизиты.Вставить("Версия",               "1.0");
			Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята);
			Реквизиты.Вставить("Описание",             "");
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиДляЗагрузкиДокумента.ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Назначение",      Перечисления.НазначениеСообщенийИСМП.ИСМП);
			ДополнительныеПараметры.Вставить("СтатусОбработки", Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята);
			ДополнительныеПараметры.Вставить("ВидПродукции",    ЭлементОчереди.ВидПродукции);
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ЭлементОчереди.Операция, ДополнительныеПараметры);
			
			СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
			
			СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
			СтрокаРезультата.Назначение        = ЭлементОчереди.Назначение;
			СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
			СтрокаРезультата.Объект            = ДокументОбъект.Ссылка;
			СтрокаРезультата.ДокументОснование = Неопределено;
			
			СтрокаРезультата.ТекстОшибки           = СтруктураОбработкиДокумента.ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Истина;
			СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
			СтрокаРезультата.ОбъектИзменен         = Истина;
			
			СтрокаРезультата.Сообщение             = ЭлементОчереди.Сообщение;
			СтрокаРезультата.ТекстСообщения        = "";
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОбработкиДокумента;
	
КонецФункции

//Инициализация таблицы документов для входящих документов из ИС МП
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//  * Идентификатор - Строка - Идентификатор документа.
//  * Статус - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
Функция ИнициализироватьТаблицуДокументов()
	
	ТаблицаЗагруженныхДокументов = Новый ТаблицаЗначений;
	ТаблицаЗагруженныхДокументов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТаблицаЗагруженныхДокументов.Колонки.Добавить("Статус",        Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДокументовИСМП"));
	
	Возврат ТаблицаЗагруженныхДокументов;
	
КонецФункции

// Получает из сервиса ИС МП доступные для загрузки документы со статусом ОжидаетсяПодтверждениеПоступления
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыЗагрузки - Структура - параметры отбора для загрузки.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//  * РезультатОтправкиЗапроса - (См. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//  * НайденныеДокументы - Массив Из См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента.
//                       - Неопределено - Если при получении данных возникла ошибка.
//  * ТекстОшибки        - Строка - Текст сообщения об ошибке.
//  * ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигацииПоДокументам).
//                       - Неопределено - Если при получении данных возникла ошибка.
//  * ДоступныеДокументы - См. ИнициализироватьТаблицуДокументов.
Функция ВходящиеДокументы(ЭлементОчереди, ПараметрыЗагрузки)
	
	ДоступныеДокументы = ИнициализироватьТаблицуДокументов();
	
	РезультатЗапроса = Новый Структура;
	
	СведенияОбОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ЭлементОчереди.Организация);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипЗапроса",    Перечисления.ТипыЗапросовИС.Входящий);
	ПараметрыОтбора.Вставить("ПолучательИНН", СведенияОбОрганизации.ИНН);
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.НачалоПериода)
		Или ЗначениеЗаполнено(ПараметрыЗагрузки.КонецПериода) Тогда
		ПараметрыОтбора.Вставить("Интервал",      Истина);
		ПараметрыОтбора.Вставить("НачалоПериода", ПараметрыЗагрузки.НачалоПериода);
		Если ЗначениеЗаполнено(ПараметрыЗагрузки.КонецПериода) Тогда
			ПараметрыОтбора.Вставить("КонецПериода",  КонецДня(ПараметрыЗагрузки.КонецПериода));
		Иначе
			ПараметрыОтбора.Вставить("КонецПериода",  ПараметрыЗагрузки.КонецПериода);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("КоличествоЗаписей", 10);
	ПараметрыОтбора.Вставить(
		"ТипДокумента",
		"LP_SHIP_GOODS_CROSSBORDER,LP_SHIP_GOODS,LP_SHIP_GOODS_CSV,LP_SHIP_GOODS_XML,EAS_CROSSBORDER,EAS_GTIN_CROSSBORDER_IMPORT");
	
	ПараметрыНавигации = Неопределено;
	
	Пока ПараметрыНавигации = Неопределено 
		Или ПараметрыНавигации.КоличествоЗаписейОбработано = ПараметрыОтбора.КоличествоЗаписей Цикл
		
		РезультатЗапроса = ИнтерфейсИСМП.НайтиДокументыПоОтбору(
			ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции,
			ПараметрыОтбора, ПараметрыНавигации);
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки)
			Или РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии
			Или РезультатЗапроса.НайденныеДокументы = Неопределено
			Или РезультатЗапроса.НайденныеДокументы.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ЭлементМассива Из РезультатЗапроса.НайденныеДокументы Цикл
			Если ЭлементМассива.Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
				ЗаполнитьЗначенияСвойств(ДоступныеДокументы.Добавить(), ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатЗапроса.Вставить("ДоступныеДокументы", ДоступныеДокументы);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Получает из сервиса ИС МП состав продукции по идентификатору документа
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыОтбора - Структура - параметры отбора для загрузки:
//  * КоличествоЗаписей - Число - Количество считываемых записей.
//  * Идентификатор - Строка - Идентификатор документа.
//  ПараметрыОбработки - Структура, Неопределено - Параметры обработки результата.
// Возвращаемое значение:
//  Структура - Структура со свойствами - См. ИнтерфейсИСМП.СоставДокументаПоИдентификатору.
Функция СоставДокументаПоИдентификатору(ЭлементОчереди, ПараметрыОтбора, ПараметрыОбработки = Неопределено)
	
	Результат = Новый Структура;
	
	РезультатЗапроса = ИнтерфейсИСМП.СоставДокументаПоИдентификатору(
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции,
		ПараметрыОтбора,, ПараметрыОбработки);
	
	Если РезультатЗапроса.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Если РезультатЗапроса.СоставДокумента = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = РезультатЗапроса;
	
	ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатЗапроса);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьВидПродукцииДокументаПоДаннымСервиса(СоставДокумента, Организация, ВидПродукции, РезультатЗапроса)
	
	ПакетКодовМаркировки = Новый Массив();
	Для Каждого СтрокаКодаМаркировки Из СоставДокумента Цикл
		
		Если СтрокаКодаМаркировки.Свойство("uit_code") Тогда
			ИмяСвойстваКодМаркировки = "uit_code";
		ИначеЕсли СтрокаКодаМаркировки.Свойство("uitu_code") Тогда
			ИмяСвойстваКодМаркировки = "uitu_code";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировки[ИмяСвойстваКодМаркировки]);
		Прервать;
		
	КонецЦикла;
	
	Если ПакетКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РезультатПолученияДанных = ИнтерфейсИСМП.ТоварнаяГруппаПоКодамИдентификации(ПакетКодовМаркировки, Организация);
	
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		РезультатЗапроса = РезультатПолученияДанных;
		Возврат;
	КонецЕсли;
	
	Если РезультатПолученияДанных.ВидПродукции <> ВидПродукции Тогда
		РезультатЗапроса = РезультатПолученияДанных;
		РезультатЗапроса.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Товарная группа сообщения %1 отличается от товарной группы документа %2.
			|Документ пропущен для загрузки';
			|en = 'Товарная группа сообщения %1 отличается от товарной группы документа %2.
			|Документ пропущен для загрузки'"),
			ВидПродукции,
			РезультатЗапроса.ВидПродукции);
		РезультатЗапроса.Вставить("РазличныеТоварныеГруппы", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

//Выполняет заполнение табличных частей переданного документа по данным ИС МП
//
// Параметры:
//  ДокументПриемка - ДокументОбъект.ПриемкаТоваровИСМП - документ для заполнения.
//  ДанныеШтрихкодов - Массив из Структура - Массив из подготовленных структур для получения данных вложенных штрихкодов по данным ИС МП.
//  РезультатЗапроса - см. ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП
Процедура ДополнитьТабличныеЧастиПоДаннымИСМП(ДокументПриемка, ДанныеШтрихкодов, РезультатЗапроса)
	
	ВидПродукции          = ДокументПриемка.ВидПродукции;
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДокументПриемка, Неопределено, ВидПродукции);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	
	СоответствиеНормализованныхШтрихкодов = Новый Соответствие;
	
	ЭтоПриемкаИзЕАЭССПризнаниемКМ    = (ДокументПриемка.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ);
	ЭтоПриемкаТрансграничнаяТорговля = (ДокументПриемка.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля);
	ЭтоПриемкаПродукцииИзМеха        = ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	
	РезультатПолученияДанных      = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП(
		ДанныеШтрихкодов, ПараметрыСканирования);
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		РезультатЗапроса = РезультатПолученияДанных;
		Возврат;
	КонецЕсли;
	
	МаркированныеТовары = РезультатПолученияДанных.ВложенныеШтрихкоды.МаркированныеТовары.Скопировать(,
		"GTIN, Номенклатура, Характеристика, Серия, Количество, КоличествоПотребительскихУпаковок");
	МаркированныеТовары.Свернуть(
		"GTIN, Номенклатура, Характеристика, Серия",
		"Количество, КоличествоПотребительскихУпаковок");
	ДокументПриемка.Товары.Загрузить(МаркированныеТовары);
	
	Если ЭтоПриемкаПродукцииИзМеха Тогда

		СтруктураДействий = Новый Структура;

		ДанныеДокументаПоGTIN = Новый Соответствие;
		Для Каждого СтрокаДанных Из ДанныеШтрихкодов Цикл

			GTIN = СтрокаДанных.GTIN;
			ДанныеСтрокиПоGTIN = ДанныеДокументаПоGTIN[GTIN];

			Если ДанныеСтрокиПоGTIN = Неопределено Тогда
				ДанныеСтрокиПоGTIN = ИнициализироватьСтруктуруЗаполненияДанныхШтрихкодовПродукцияИзНатуральногоМеха();
			КонецЕсли;

			ДанныеСтрокиПоGTIN.Количество = ДанныеСтрокиПоGTIN.Количество + 1;
			ДанныеСтрокиПоGTIN.Сумма      = ДанныеСтрокиПоGTIN.Сумма      + СтрокаДанных.Цена;
			ДанныеСтрокиПоGTIN.СуммаНДС   = ДанныеСтрокиПоGTIN.СуммаНДС   + СтрокаДанных.СуммаНДС;

			ДанныеДокументаПоGTIN[GTIN] = ДанныеСтрокиПоGTIN;

		КонецЦикла;

	ИначеЕсли ЭтоПриемкаИзЕАЭССПризнаниемКМ Или ЭтоПриемкаТрансграничнаяТорговля Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
		
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов                                = ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки;
		ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация                                   = Ложь;
		ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = Истина;
		
		НастройкиРазбораКодаМаркировки = Новый Структура;
		НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
		НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
		НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);

		КешДанныхРазбора      = Новый Соответствие;
		ДанныеДокументаПоGTIN = Новый Соответствие;

		Для Каждого СтрокаДанных Из ДанныеШтрихкодов Цикл
		
			ДанныеРазбора = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
				СтрокаДанных.Штрихкод, ВидПродукции, КешДанныхРазбора, НастройкиРазбораКодаМаркировки);
			ДанныеРазбораИРезультат = КешДанныхРазбора[СтрокаДанных.Штрихкод];
			
			GTIN = Неопределено;
			Если ДанныеРазбораИРезультат <> Неопределено
				И ДанныеРазбораИРезультат.ДанныеРазбора <> Неопределено
				И ДанныеРазбораИРезультат.ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
				ДанныеРазбораИРезультат.ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN);
				СоответствиеНормализованныхШтрихкодов.Вставить(ДанныеРазбора.НормализованныйШтрихкод, 	СтрокаДанных.Штрихкод);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(GTIN) Тогда
				
				ДанныеСтрокиПоGTIN = ДанныеДокументаПоGTIN[GTIN];
				
				Если ДанныеСтрокиПоGTIN = Неопределено Тогда
					ДанныеСтрокиПоGTIN = ИнициализироватьСтруктуруЗаполненияДанныхШтрихкодовПриПриемкеИзЕАЭССпризнаниемКИ();
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиПоGTIN, СтрокаДанных, "КодТНВЭД, ВидДокументаСертификации, НомерДокументаСертификации, ДатаДокументаСертификации");
				КонецЕсли;
				
				ДанныеСтрокиПоGTIN.Количество = ДанныеСтрокиПоGTIN.Количество + 1;
				ДанныеСтрокиПоGTIN.Сумма      = ДанныеСтрокиПоGTIN.Сумма      + СтрокаДанных.Цена;
				ДанныеСтрокиПоGTIN.СуммаНДС   = ДанныеСтрокиПоGTIN.СуммаНДС   + СтрокаДанных.СуммаНДС;
				
				ДанныеДокументаПоGTIN[GTIN] = ДанныеСтрокиПоGTIN;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ДокументПриемка.Товары Цикл
		
		Если СтрокаТоваров.Количество = 0 И Не ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
			СтрокаТоваров.Количество = СтрокаТоваров.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество;
		Если ЭтоПриемкаПродукцииИзМеха Тогда

			Если ЗначениеЗаполнено(СтрокаТоваров.GTIN) Тогда
				ДанныеСтрокиПоGTIN = ДанныеДокументаПоGTIN[СтрокаТоваров.GTIN];
				Если ДанныеСтрокиПоGTIN <> Неопределено Тогда
					ЗаполнитьЦенуСуммуНДСПоДаннымВходящегоДокумента(СтрокаТоваров, ДанныеСтрокиПоGTIN);
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
				ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТоваров, СтруктураДействий, ДокументПриемка);
			КонецЕсли;

		ИначеЕсли ЭтоПриемкаИзЕАЭССПризнаниемКМ Тогда
			
			Если ЗначениеЗаполнено(СтрокаТоваров.GTIN) Тогда
				ДанныеСтрокиПоGTIN = ДанныеДокументаПоGTIN[СтрокаТоваров.GTIN];
				Если ДанныеСтрокиПоGTIN <> Неопределено Тогда
					ЗаполнитьЦенуСуммуНДСПоДаннымВходящегоДокумента(СтрокаТоваров, ДанныеСтрокиПоGTIN);
					ЗаполнитьЗначенияСвойств(
						СтрокаТоваров,
						ДанныеСтрокиПоGTIN,
						"КодТНВЭД, ВидДокументаСертификации, НомерДокументаСертификации, ДатаДокументаСертификации");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
				ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТоваров, СтруктураДействий, ДокументПриемка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ДокументПриемка, Документы.ПриемкаТоваровИСМП);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументПриемка, ПараметрыУказанияСерий);
	
	ДанныеУпаковокСКоличеством = ЗаполнитьКоличествоПотребительскихУпаковок(РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок, СоответствиеНормализованныхШтрихкодов);
	
	Для Каждого СтрокаУпаковки Из ДокументПриемка.ШтрихкодыУпаковок Цикл
		КоличествоУпаковок = ДанныеУпаковокСКоличеством.Получить(СтрокаУпаковки.ЗначениеШтрихкода);
		Если КоличествоУпаковок <> Неопределено Тогда
			СтрокаУпаковки.КоличествоУпаковок = КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуСуммуНДСПоДаннымВходящегоДокумента(СтрокаТоваров, ИсточникДанных)

	СтрокаТоваров.Цена = ИсточникДанных.Сумма / ?(СтрокаТоваров.Количество = 0, 1, СтрокаТоваров.Количество);
	СтрокаТоваров.СуммаНДС = ИсточникДанных.СуммаНДС / ?(СтрокаТоваров.Количество = 0, 1, СтрокаТоваров.Количество);

КонецПроцедуры

//Выполняет заполнение документа данными объемно-сортового учета.
//
// Параметры:
//  ДокументПриемка  - ДокументОбъект.ПриемкаТоваровИСМП - документ для заполнения.
//  ДанныеШтрихкодов - Массив из Структура - Массив из подготовленных структур для заполнения Товаров.
Процедура ОбработкаДокументаОбъемноСортовогоУчета(ДокументПриемка, ДанныеШтрихкодов)

	ВидПродукцииДокумента = ДокументПриемка.ВидПродукции;
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДокументПриемка, Неопределено, ВидПродукцииДокумента);

	Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукцииДокумента) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции = Новый Массив();
		ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции(, Ложь);
		Для Каждого ВидПродукции Из ВидыПродукцииУчета Цикл
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
				ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукции);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ИспользуетсяПодсистемаВетИС = ИнтеграцияИСМПВЕТИС.ИспользуетсяПодсистемаВетИС();
	Если ИспользуетсяПодсистемаВетИС Тогда
		ИмяТаблицыСправочникаВСД = "ВетеринарноСопроводительныйДокументВЕТИС";
		КешПоискаВСД = Новый Структура(
			"ПараметрыПреобразования",
			Новый Структура(
				"НайденныеСсылки",
				Новый Структура(ИмяТаблицыСправочникаВСД, Новый Соответствие)));
	КонецЕсли;

	GTINПотребительскихУпаковок = Новый Соответствие();
	ШтрихкодыEAN = Новый Массив;
	Для Каждого СтрокаШтрихкода Из ДанныеШтрихкодов Цикл
		ШтрихкодыEAN.Добавить(РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаШтрихкода.Штрихкод));
		GTINПотребительскихУпаковок.Вставить(СтрокаШтрихкода.Штрихкод, Истина);
	КонецЦикла;
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(
		ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСПоНоменклатуре");
	ВидыПродукцииПоТоварам = Новый Массив();

	Для Каждого СтрокаДанных Из ДанныеШтрихкодов Цикл

		ВидПродукцииСтроки = ВидПродукцииДокумента;
		НоваяСтрока        = ДокументПриемка.Товары.Добавить();
		НоваяСтрока.GTIN   = СтрокаДанных.Штрихкод;
		
		УказанВесВТелеСообщения = СтрокаДанных.ВесПродукции > 0;
		
		Если УказанВесВТелеСообщения Тогда
			НоваяСтрока.КоличествоУпаковок = СтрокаДанных.ВесПродукции / 1000; // Указывается общий вес всей позиции в граммах
			НоваяСтрока.Количество         = СтрокаДанных.ВесПродукции / 1000;
		Иначе
			НоваяСтрока.КоличествоУпаковок = СтрокаДанных.Количество;
			НоваяСтрока.Количество         = СтрокаДанных.Количество;
		КонецЕсли;
		
		НоваяСтрока.Цена               = СтрокаДанных.Цена;
		НоваяСтрока.СуммаНДС           = СтрокаДанных.СуммаНДС * НоваяСтрока.Количество;
		НоваяСтрока.Сумма              = НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.КоличествоПотребительскихУпаковок = СтрокаДанных.Количество;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных, "ВидДокументаСертификации, НомерДокументаСертификации, ДатаДокументаСертификации");

		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ШтрихкодEAN", РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаДанных.Штрихкод));

		СтрокиПоEAN = ДанныеПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);

		Если СтрокиПоEAN.Количество() = 1 Тогда
			СтрокаПоEAN = СтрокиПоEAN[0];
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоEAN, "Номенклатура, Характеристика, Серия, Упаковка");
			Если СтрокаПоEAN.ПроизвольнаяЕдиницаУчета
				И Не УказанВесВТелеСообщения Тогда
				Если ЗначениеЗаполнено(СтрокаПоEAN.Коэффициент) Тогда
					НоваяСтрока.КоличествоУпаковок = СтрокаДанных.Количество * СтрокаПоEAN.Коэффициент;
					НоваяСтрока.Количество         = НоваяСтрока.КоличествоУпаковок;
					НоваяСтрока.Сумма              = НоваяСтрока.Цена      * НоваяСтрока.КоличествоУпаковок;
					НоваяСтрока.СуммаНДС           = СтрокаДанных.СуммаНДС * НоваяСтрока.КоличествоУпаковок;
				КонецЕсли;
			КонецЕсли;
			ВидПродукцииСтроки = СтрокаПоEAN.ВидПродукции;
		ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукцииДокумента)
			И ЗначениеЗаполнено(СтрокаДанных.ВСД)
			И ВидыПродукцииУчета.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС) <> Неопределено Тогда
			ВидПродукцииСтроки = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
		КонецЕсли;

		Если ВидыПродукцииПоТоварам.Найти(ВидПродукцииСтроки) <> Неопределено Тогда
			ВидыПродукцииПоТоварам.Добавить(ВидПродукцииСтроки);
		КонецЕсли;

		Если ВидПродукцииСтроки = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
			И ЗначениеЗаполнено(СтрокаДанных.ВСД) Тогда

			ИдентификаторПроисхожденияВЕТИССтрокой = ИнтеграцияИСКлиентСервер.ПреобразоватьИдентификаторВСД(
				СокрЛП(СтрокаДанных.ВСД));

			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторПроисхожденияВЕТИССтрокой)Тогда
				НоваяСтрока.ИдентификаторПроисхожденияВЕТИССтрокой = ИдентификаторПроисхожденияВЕТИССтрокой;
				Если ИспользуетсяПодсистемаВетИС Тогда
					ИнтеграцияИСМПВЕТИС.ПолучитьСсылкуПоСтроковомуИдентификаторуПроисхождения(ИдентификаторПроисхожденияВЕТИССтрокой, НоваяСтрока.ИдентификаторПроисхожденияВЕТИС, КешПоискаВСД);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			ИсходнаяСуммаНДС = СтрокаДанных.СуммаНДС;
			ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, ДокументПриемка);
			Если НоваяСтрока.СуммаНДС <> ИсходнаяСуммаНДС Тогда
				НоваяСтрока.СуммаНДС  = ИсходнаяСуммаНДС;
				НоваяСтрока.СтавкаНДС = Неопределено;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если ВидыПродукцииПоТоварам.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС) <> Неопределено
		И ВидПродукцииДокумента <> Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ДокументПриемка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	КонецЕсли;

	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ДокументПриемка, Документы.ПриемкаТоваровИСМП);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументПриемка, ПараметрыУказанияСерий);

КонецПроцедуры

//Заполняет соотвествие штрихкодов упаковок количеством вложенных единиц продукции
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - дерево упаковок.
//	СоответствиеНормализованныхШтрихкодов - Соответствие из КлючИЗначение
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - См. ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП
//  * Значение - Число - Количество вложенных потребительских упаковок
Функция ЗаполнитьКоличествоПотребительскихУпаковок(ДеревоУпаковок, СоответствиеНормализованныхШтрихкодов)
	
	СоответствиеУпаковок = Новый Соответствие;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Количество = КоличествоВложенныхПотребительскихУпаковок(СтрокаДерева);
		
		НормализованныйКодМаркировки = СоответствиеНормализованныхШтрихкодов[СтрокаДерева.Штрихкод];
		Если НормализованныйКодМаркировки = Неопределено Тогда
			НормализованныйКодМаркировки = НормализованноеПредставлениеКодаМаркировкиДляПередачиИСМППоВидуПродукции(
				СтрокаДерева.Штрихкод, СтрокаДерева.ВидПродукции);
		КонецЕсли;
		
		СоответствиеУпаковок.Вставить(НормализованныйКодМаркировки, Количество);
		
	КонецЦикла;
	
	Возврат СоответствиеУпаковок;
	
КонецФункции

Функция НормализованноеПредставлениеКодаМаркировкиДляПередачиИСМППоВидуПродукции(КодМаркировки, ВидПродукции)
	
	// В отличии от метода КодМаркировкиДляПередачиИСМП, не выдает исключение, если код маркировки разобрать не удалось.
	
	ПримечаниеКРезультатуРазбора = Неопределено;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
		КодМаркировки, ВидПродукции, ПримечаниеКРезультатуРазбора);
	
	Если ДанныеРазбора = Неопределено Тогда
		Возврат КодМаркировки;
	КонецЕсли;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;
	
	НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		ДанныеРазбора, ВидПродукции, ПараметрыНормализации);
	
	Возврат НормализованныйКодМаркировки;
	
КонецФункции

//Выполняет расчет количество вложенных потребительских упаковок в дереве упаковок
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - дерево упаковок.
//
// Возвращаемое значение:
//  Число - количество вложенных единиц.
Функция КоличествоВложенныхПотребительскихУпаковок(ДеревоУпаковок)
	
	КоличествоПотребительскихУпаковок = 0;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок + КоличествоВложенныхПотребительскихУпаковок(СтрокаДерева);
	КонецЦикла;
	
	Если ДеревоУпаковок.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат КоличествоПотребительскихУпаковок;
	
КонецФункции

//Преобразовывает тип операции, полученный по данным ИС МП в перечисление для документов Отгрузка товаров ИС МП, Приемка товаров ИС МП
//
// Параметры:
//  ТипОперацииПродажа - Строка - тип операции по данным сервиса.
//  ВидБезвозмезднойОперации - Строка - вид операции по данным сервиса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - вид операции для документа.
Функция ВидОперацииПриемкаТоваров(ТипОперацииПродажа, ВидБезвозмезднойОперации = Неопределено)
	Если ТипОперацииПродажа = "SELLING" Тогда
		Если ВидБезвозмезднойОперации = Неопределено Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаПродажа;
		ИначеЕсли ВидБезвозмезднойОперации = "DONATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача;
		ИначеЕсли ВидБезвозмезднойОперации = "STATE_ENTERPRISE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием;
		ИначеЕсли ВидБезвозмезднойОперации = "NO_RETAIL_USE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя;
		КонецЕсли;
	ИначеЕсли ТипОперацииПродажа = "COMMISSION" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия;
	ИначеЕсли ТипОперацииПродажа = "AGENT" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ПриемкаАгент;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ИнициализироватьСтруктуруЗаполненияДанныхШтрихкодовПриПриемкеИзЕАЭССпризнаниемКИ()
	
	Результат = Новый Структура;
	Результат.Вставить("КодТНВЭД", "");
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("СуммаНДС", 0);
	Результат.Вставить("Количество", 0);
	Результат.Вставить("ВидДокументаСертификации", "");
	Результат.Вставить("НомерДокументаСертификации", "");
	Результат.Вставить("ДатаДокументаСертификации", "");
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьСтруктуруЗаполненияДанныхШтрихкодовПродукцияИзНатуральногоМеха()

	Результат = Новый Структура;
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("СуммаНДС", 0);
	Результат.Вставить("Количество", 0);

	Возврат Результат;

КонецФункции

#КонецОбласти

// Дополняет таблицу протокола обмена данными лога запросов.
// 
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений()).
//  СлужебныйПротоколОбмена - См. ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП -  операция обмена.
// 
// Возвращаемое значение:
//  Строка - представление протокола обмена.
Функция ДополнитьПротоколОбмена(ЭлементОчереди, СлужебныйПротоколОбмена, СтатусОбработки, Операция)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		ЭлементОчереди.ПротоколОбмена = ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена();
	КонецЕсли;
	
	МассивСтрокПротокола = Новый Массив;
	Для Каждого ЗаписьПротокола Из СлужебныйПротоколОбмена Цикл
		
		ЗаписьПротокола.СтатусОбработки = СтатусОбработки;
		ЗаписьПротокола.Операция        = Операция;
		
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.Запрос);
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.ЗапросТело);
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.КодСостояния);
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.ОтветТело);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СлужебныйПротоколОбмена, ЭлементОчереди.ПротоколОбмена);
	
	Результат = СтрСоединить(МассивСтрокПротокола, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

//Добавляет описание ошибки, возникшей при подготовке сообщения JSON к отправке в абстрактной операции, в протокол элемента очереди.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений()).
//  ТекстОшибки - Строка, Массив из Строка - Описание ошибки при подготовке сообщения.
//  Статус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - статус обработки.
//
// Возвращаемое значение
//  Строка - описание ошибки.
Функция ДобавитьВПротоколОбменаОписаниеОшибки(ЭлементОчереди, ТекстОшибки, Статус = Неопределено)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		
		ЭлементОчереди.ПротоколОбмена = ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена();
		Если ЗначениеЗаполнено(Статус) Тогда
			ТипыСтатуса = Новый Массив;
			ТипыСтатуса.Добавить(ТипЗнч(Статус));
			ЭлементОчереди.ПротоколОбмена.Колонки.Добавить("Статус", Новый ОписаниеТипов(ТипыСтатуса));
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьПротокола = ЭлементОчереди.ПротоколОбмена.Добавить();
	ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
	ЗаписьПротокола.Операция          = ЭлементОчереди.Операция;
	ЗаписьПротокола.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
	Если ЗначениеЗаполнено(Статус) Тогда
		ЗаписьПротокола.Статус            = Статус;
	КонецЕсли;
	
	Если ТипЗнч(ТекстОшибки) = Тип("Массив") Тогда
		ОписаниеОшибки = СтрСоединить(ТекстОшибки, Символы.ПС);
	Иначе
		ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	ЗаписьПротокола.ОтветТело = ОписаниеОшибки;
	
	Возврат ОписаниеОшибки;

КонецФункции

Процедура ПередатьЗаказНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		ДанныеОбработки = ИнтерфейсСУЗ.СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V1(
			РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2
		Или НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3 Тогда
		СвойстваПодписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			РеквизитыИсходящегоСообщения, "СвойстваПодписи");
		Подпись = ОбщегоНазначенияИСМПСлужебный.ПодписьИзСвойствПодписи(СвойстваПодписи);
		ДанныеОбработки = ИнтерфейсСУЗ.СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V2(
			РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
			НастройкаОбменаСУЗ, Подпись);
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(ДанныеОбработки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается';
				|en = 'Формат обмена %1 не поддерживается'"),
			НастройкаОбменаСУЗ.ФорматОбмена);
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
		ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2';
						           |en = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1';
						           |en = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
				
				Если ЭтоСообщениеОПревышенииМаксимальногоКоличестваАктивныхЗаказовСУЗ(ДанныеОбработки.ТекстОшибки) Тогда
					ПараметрыКонтроля = ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди, Истина);
					ПараметрыКонтроля.ТекущееКоличествоЗаказов        = МаксимальноеКоличествоЗаказовВОчередиСУЗ();
					ПараметрыКонтроля.ДатаПоследнегоЗапросаПревышения = ТекущаяДатаСеанса();
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ЗагружатьДо = ЭлементОчереди.Сообщение;
			
			// Массив Из Структура - Параметры запроса:
			// * ИдентификаторБизнесЗаказа - Строка - Поле для заполнения идентификатора заказа
			// * ИдентификаторСтрокиЗаказа - Строка - Идентификатор строки заказа
			// * GTIN                      - Строка - GTIN
			Для Каждого ПараметрыЗапроса Из ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса Цикл
				
				ПараметрыЗапроса.ИдентификаторБизнесЗаказа = ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки;
				
				Если ЭлементОчереди.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
					НовыйЭлементОчереди = ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(
						ПараметрыЗапроса,
						ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ);
				КонецЕсли;
				
				Если НовыйЭлементОчереди <> Неопределено Тогда
					// Коды маркировки загружаются строго последовательно.
					ЗагружатьДо = НовыйЭлементОчереди.Сообщение;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписейОснование = Неопределено Тогда
			
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки,
					НастройкаОбменаСУЗ.СтанцияУправленияЗаказами,
					Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
				
			Иначе
				
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки,
					НастройкаОбменаСУЗ.СтанцияУправленияЗаказами,
					Неопределено);
				
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснование,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
				
			КонецЕсли;
			
			ЭлементОчереди.ИдентификаторЗаявки          = ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			ЭлементОчереди.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ФорматОбмена",              НастройкаОбменаСУЗ.ФорматОбмена);
			ДополнительныеПараметры.Вставить("СтанцияУправленияЗаказами", НастройкаОбменаСУЗ.СтанцияУправленияЗаказами);
			ДополнительныеПараметры.Вставить("Назначение",                Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами);
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
				ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки,
				ДополнительныеПараметры);
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2';
					           |en = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1';
					           |en = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСообщениеОПревышенииМаксимальногоКоличестваАктивныхЗаказовСУЗ(ТекстСообщения)
	Возврат СтрНайти(ТекстСообщения, "Количество заказов в очереди не может превышать") > 0
		Или СтрНайти(ТекстСообщения, "Количество активных заказов не может превышать") > 0
		Или СтрНайти(ТекстСообщения, "order.queued.too.much") > 0;
КонецФункции

Процедура ПередатьОтчетСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбИспользованииКодовМаркировкиБизнесЗаказа_V1(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
				НастройкаОбменаСУЗ);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная операция СУЗ %1';
					|en = 'Неизвестная операция СУЗ %1'"),
				НастройкаОбменаСУЗ.Операция);
		КонецЕсли;
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2
		Или НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3 Тогда
		
		Подпись = Неопределено;
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ТребуетсяПодписание Тогда
			СвойстваПодписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				РеквизитыИсходящегоСообщения, "СвойстваПодписи");
			Подпись = ОбщегоНазначенияИСМПСлужебный.ПодписьИзСвойствПодписи(СвойстваПодписи);
		КонецЕсли;
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ Тогда
			
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбИспользованииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди,
				НастройкаОбменаСУЗ, Подпись);
				
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОСписанииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
				НастройкаОбменаСУЗ, Подпись);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбАгрегацииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди,
				НастройкаОбменаСУЗ, Подпись);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗапросИдентификатораСоединенияСУЗ Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ЗапроситьИдентификаторСоединения_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди,
				НастройкаОбменаСУЗ, Подпись);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПодтвердитьПоступлениеКИЗ_V3(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
				НастройкаОбменаСУЗ, Подпись);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеЗаказаНаЭмиссиюСУЗ Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ЗакрытьЗаказНаЭмиссию_V3(
				РеквизитыИсходящегоСообщения.ПараметрыЗапроса,
				ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ, РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная операция СУЗ: %1';
					|en = 'Неизвестная операция СУЗ: %1'"),
				ЭлементОчереди.Операция);
		КонецЕсли;
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(ДанныеОбработки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается';
				|en = 'Формат обмена %1 не поддерживается'"),
			НастройкаОбменаСУЗ.ФорматОбмена);
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
		ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	ТекстОшибки =  ДанныеОбработки.ТекстОшибки;
	//@skip-check bsl-legacy-check-static-feature-access
	Если ЗначениеЗаполнено(ТекстОшибки) И НайтиНедопустимыеСимволыXML(ДанныеОбработки.ТекстОшибки) Тогда
		ТекстОшибки = СтрЗаменить(ТекстОшибки, Символ(29), "<GS>");
	КонецЕсли;
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
				И ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2';
						           |en = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1';
						           |en = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ИдентификаторЗаявки = ДанныеОбработки.ИдентификаторЗаявки;

			Если НаборЗаписейОснование = Неопределено Тогда
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ИдентификаторЗаявки,,
					Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
			Иначе
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ИдентификаторЗаявки,,
					Неопределено);
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснование,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
			КонецЕсли;
			
			ЭлементОчереди.ИдентификаторЗаявки          = ИдентификаторЗаявки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			ЭлементОчереди.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки);
		Иначе
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
		КонецЕсли;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса <> Неопределено
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса, "ИспользуетсяПакетнаяПередачаСообщений", Ложь) Тогда
			
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ДанныеСообщения") Тогда
				ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчереди,, ЭлементОчереди.ИдентификаторЗаявки);
			КонецЕсли;
			
		Иначе
			
			РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2';
					           |en = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1';
					           |en = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1'"),
					ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьЗапросНаПолучениеИдентификатораСоединения(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Подпись = Неопределено;
	Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ТребуетсяПодписание Тогда
		СвойстваПодписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			РеквизитыИсходящегоСообщения, "СвойстваПодписи");
		Подпись = ОбщегоНазначенияИСМПСлужебный.ПодписьИзСвойствПодписи(СвойстваПодписи);
	КонецЕсли;
	
	ДанныеОбработки = ИнтерфейсСУЗ.ЗапроситьИдентификаторСоединения_V2(
		РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди,
		НастройкаОбменаСУЗ, Подпись);
	
	ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
		ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
	
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект      = ДанныеОбработки.ИдентификаторСоединения;
	
		СтрокаРезультата.ТекстОшибки           = ДанныеОбработки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Истина;
		СтрокаРезультата.Передано              = Истина;
		СтрокаРезультата.Принято               = Ложь;
		СтрокаРезультата.НовыйСтатус           = Неопределено;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РеквизитыИсходящегоСообщения.ТекстСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Идентификатор соединения не получен:
				           |Текст ошибки: %1';
				           |en = 'Идентификатор соединения не получен:
				           |Текст ошибки: %1'"),
				ДанныеОбработки.ТекстОшибки);
		КонецЕсли;
		
		ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьЗапросНаПолучениеМестОсуществленияДеятельности(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	ДанныеОбработки = ИнтерфейсСУЗ.ЗапроситьМестаОсуществленияДеятельности(
		ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ, РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
	
	ПредставлениеПротоколаОбмена = "";
	
	ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
	
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект      = ДанныеОбработки.РезультатОтправкиЗапроса.Объект;
	
		СтрокаРезультата.ТекстОшибки           = ДанныеОбработки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Истина;
		СтрокаРезультата.Передано              = Истина;
		СтрокаРезультата.Принято               = Ложь;
		СтрокаРезультата.НовыйСтатус           = Неопределено;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РеквизитыИсходящегоСообщения.ТекстСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Места осуществления деятельности не получены:
				           |Текст ошибки: %1';
				           |en = 'Места осуществления деятельности не получены:
				           |Текст ошибки: %1'"),
				ДанныеОбработки.ТекстОшибки);
		КонецЕсли;
		
		ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ЭлементОчередиЗаказНаЭмиссию = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	Если ЭлементОчередиЗаказНаЭмиссию = Неопределено Тогда
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиЗаказНаЭмиссию.Сообщение;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчередиЗаказНаЭмиссию.Сообщение);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ТребуетсяПодписание Тогда
			СвойстваПодписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ЭлементОчереди.РеквизитыИсходящегоСообщения, "СвойстваПодписи");
			Подпись = ПодписьИзСвойствПодписи(СвойстваПодписи);
		Иначе
			Подпись = Неопределено;
		КонецЕсли;

		РезультатОбработкиЗаявки = ИнтерфейсСУЗ.ЗакрытьПодзаказПоGTIN_V2(
			ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса,
			ЭлементОчереди.ВидПродукции,
			НастройкаОбменаСУЗ,
			ЭлементОчереди.РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
			Подпись);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;

		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
			ЭлементОчередиЗаказНаЭмиссию,
			РезультатОбработкиЗаявки);
		
		ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки;

		ЭлементОчереди.ТекущийСтатус                = Неопределено;
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		
		ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписейОснования,,,
			Новый ХранилищеЗначения(ЭлементОчередиЗаказНаЭмиссию.ПротоколОбмена));
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = Неопределено;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ПараметрыКонтроля = ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди);
		
		Если ПараметрыКонтроля <> Неопределено Тогда
			ПараметрыКонтроля.ТекущееКоличествоЗаказов = ПараметрыКонтроля.ТекущееКоличествоЗаказов - 1;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст XML:
			           |%4';
			           |en = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст XML:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка)
		И ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

#Область ПроверкиРезультатаПередачиОтчетаОНанесенииСУЗ

Процедура ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатусаКодовМаркировки(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.РасчетСтатусаКодовМаркировки");
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МассивСтрок = Новый Массив();
	Для Каждого ЗначениеШтрихкода Из ПараметрыЗапроса.КодыМаркировкиДляКонтроляСтатусов Цикл
		СтруктураЗначения = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
			ЗначениеШтрихкода, ЭлементОчереди.ВидПродукции);
		МассивСтрок.Добавить(СтруктураЗначения);
	КонецЦикла;
	
	ЛогированиеЗапросовИСМП.ВключитьЛогированиеЗапросовДляПротоколаОбмена();
	
	РезультатПолученияДанных = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
		МассивСтрок,
		ЭлементОчереди.Организация);
	
	ПараметрыЛогирования = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
	ПротоколОбмена       = ЛогированиеЗапросовИСМП.ЗавершитьЛогированиеЗапросовПоИдентификаторуПротоколаОбмена(ПараметрыЛогирования.ТекущийИдентификаторПротоколОБмена);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПовторныйЗапросКвитанции = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ПовторныйЗапросКвитанции")
		И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ПовторныйЗапросКвитанции;
	
	Если Не ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки)
		И РезультатПолученияДанных.СтатусыКодовМаркировки <> Неопределено Тогда
		Для Каждого КлючИЗначение Из РезультатПолученияДанных.СтатусыКодовМаркировки Цикл
			СтатусКодов = КлючИЗначение.Значение.Статус;
			Если ПараметрыЗапроса.ОжидаемыеСтатусыКодовПослеПередачиОтчетаОНанесении.Найти(СтатусКодов) <> Неопределено Тогда
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			ИначеЕсли ПараметрыЗапроса.ДопустимыеНачальныеСтатусыКодовОтчетОНанесении.Найти(СтатусКодов) <> Неопределено Тогда
				// Статус запрашивается после запроса квитанции, через 40 минут. Если статус кодов не изменился - то отчет обработан с ошибкой.
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ИначеЕсли ЭтоПовторныйЗапросКвитанции
				И (СтатусКодов = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				Или СтатусКодов = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен) Тогда
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен;
			Иначе
				// Если статус кода изменился на несколько действий, например, вместо "наненсен" статус стал "введен в оборот" или "списан"
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		Если ЭтоПовторныйЗапросКвитанции Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен;
		Иначе
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
		КонецЕсли;
	КонецЕсли;
	
	Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
	
	Если ЭлементОчереди.ТекущийСтатусОбработки = СтатусОбработки Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ЭлементОчередиОснование = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
			НаборЗаписейОснования.Прочитать();
		Иначе
			НаборЗаписейОснования = Неопределено;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или НаборЗаписейОснования <> Неопределено
				И Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования <> Неопределено И НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротокола = ДополнитьПротоколОбмена(ЭлементОчередиОснование, ПротоколОбмена, СтатусОбработки, Операция);
		
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;   //основания?
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		Если СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса, "ИспользуетсяПакетнаяПередачаСообщений", Ложь) Тогда
			ПараметрыОбновленияСтатуса.Вставить("ЕстьЗависимыеСообщения", Истина);
		КонецЕсли;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчередиОснование.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчередиОснование.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчередиОснование.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчередиОснование.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатПолученияДанных.ТекстОшибки);
			
			Если Не ЗначениеЗаполнено(Реквизиты.Описание)
				И (СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
				   Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен) Тогда
				Реквизиты.Описание = НСтр("ru = 'Ошибка при получении результата обработки документа.
				                                |Не удалось получить квитанцию для отчета о нанесении, статус кодов не изменился.
				                                |Запросите квитанцию повторно или обратитесь в техническую поддержку оператора ГИС МТ
				                                |для получения дополнительной информации о состоянии обработки отчета.';
				                                |en = 'Ошибка при получении результата обработки документа.
				                                |Не удалось получить квитанцию для отчета о нанесении, статус кодов не изменился.
				                                |Запросите квитанцию повторно или обратитесь в техническую поддержку оператора ГИС МТ
				                                |для получения дополнительной информации о состоянии обработки отчета.'");
			КонецЕсли;
			
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиОснование.ПротоколОбмена);
			
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколОбменаXML,
				Реквизиты);
			
			Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
				СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
				СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
				
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
				СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
				
				СтрокаРезультата.ТекстОшибки           = РезультатПолученияДанных.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения               = ПредставлениеПротокола;
				СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротокола;
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				
				Если ЭтоПовторныйЗапросКвитанции Тогда
					РегистрыСведений.ПакетыКодовМаркировкиИСМП.УдалитьЗаписиПоИдентификаторуЗаявки(
						ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ИдентификаторЗаявки,
						ЭлементОчереди.Документ);
				КонецЕсли;
				
			ИначеЕсли Не ЭтоПовторныйЗапросКвитанции Тогда
				
				ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчередиОснование,, ЭлементОчередиОснование.ИдентификаторЗаявки);
				
			КонецЕсли;
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			КонецЕсли;
			
		Иначе // ЗаявкаОбрабатывается
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				?(НаборЗаписейОснования = Неопределено, НаборЗаписей, НаборЗаписейОснования),
				Неопределено,
				Неопределено,
				Новый ХранилищеЗначения(
					ЭлементОчередиОснование.ПротоколОбмена));
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована Тогда
		
		Если СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
			
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
				Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчередиОснование) <> -1 Тогда
					ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчередиОснование);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПроверкаСтатусаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена)
	
	ЭлементОчередиОснование = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатСписаниеПроверкаСтатусаОбработкиДокумента");
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента Тогда
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатАгрегацияПроверкаСтатусаОбработкиДокумента");
	Иначе
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокументаВводВОборот");
	КонецЕсли;
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМПОбщегоНазначения.СтатусОбработкиДокументаПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции, ЭлементОчереди.Операция);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		Если ЭлементОчереди <> ЭлементОчередиОснование Тогда
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		КонецЕсли;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		Если ЭлементОчереди <> ЭлементОчередиОснование Тогда
			НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
			НаборЗаписейОснования.Прочитать();
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или Не (НаборЗаписейОснования = Неопределено Или НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если ЭлементОчереди <> ЭлементОчередиОснование И НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.Статус            = Неопределено;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
			ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ЭлементОчереди.Документ,
				РезультатОбработкиЗаявки.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
			ЭлементОчередиОснование,
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчередиОснование.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиОснование.ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
				СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
				
				СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
				СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
				
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
				СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
				
				СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
				СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
				
				ОбработкаЗагрузкиПереданногоДокумента(
					ЭлементОчереди,
					ПараметрыОбмена,
					РезультатОбработкиЗаявки,
					ПараметрыОбновленияСтатуса);
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				
			ИначеЕсли (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
				Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка)
				И ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ДанныеСообщения")
				И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
				
				ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчередиОснование);
				
			КонецЕсли;
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			Если ЭлементОчереди <> ЭлементОчередиОснование Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			КонецЕсли;
			
		Иначе
			
			Если ЭлементОчереди <> ЭлементОчередиОснование Тогда
				
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснования,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
			
			Иначе
				
				ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка) Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		Если ЭлементОчереди <> ЭлементОчередиОснование Тогда
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчередиОснование) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчередиОснование);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗагрузитьРезультатОбработкиАбстрактнойАгрегацииИзменениеРасчетСтатуса(ЭлементОчереди, ПараметрыОбмена)
	
	ЭлементОчередиАбстрактнаяАгрегация = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ЭлементОчередиАбстрактнаяАгрегация.ПротоколОбмена = Неопределено Тогда
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	МассивОшибок    = Новый Массив;
	ОписаниеОшибки  = "";
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
	
	Для Каждого СтрокаТЧ Из ЭлементОчередиАбстрактнаяАгрегация.ПротоколОбмена Цикл

		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда

			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ДанныеОтвета = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(СтрокаТЧ.ОтветТело);

			Если ДанныеОтвета <> Неопределено Тогда
				Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					ТелоОтвета = ДанныеОтвета[0];
				Иначе
					ТелоОтвета = ДанныеОтвета;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТелоОтвета, "errors") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, ТелоОтвета["errors"], Истина);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = НСтр("ru = '<Описание ошибки отсутствует>';
									|en = '<Описание ошибки отсутствует>'");
		КонецЕсли;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Неопределено;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчередиАбстрактнаяАгрегация.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчередиАбстрактнаяАгрегация.ИдентификаторЗаявки);
		Реквизиты.Вставить("Операция",             ЭлементОчередиАбстрактнаяАгрегация.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчередиАбстрактнаяАгрегация.СообщениеОснование);
		Реквизиты.Вставить("Версия",               ЭлементОчередиАбстрактнаяАгрегация.РеквизитыИсходящегоСообщения.Версия);
		Реквизиты.Вставить("ТипСообщения",         ЭлементОчередиАбстрактнаяАгрегация.РеквизитыИсходящегоСообщения.ТипСообщения);
		Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
		Реквизиты.Вставить("Описание",             ОписаниеОшибки);
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиАбстрактнаяАгрегация.ПротоколОбмена);
		ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
			ПротоколаОбменаXML,
			Реквизиты);
		
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = ОписаниеОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = СтрокаТЧ.ОтветТело; 
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПротоколаОбменаXML;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если ЭлементОчередиКУдалению.СообщениеОснование = ЭлементОчереди.СообщениеОснование Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчередиКУдалению, ПараметрыОбмена);
				Если ЭлементОчередиКУдалению.Сообщение <> ЭлементОчереди.Сообщение Тогда
					ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиКУдалению, ПараметрыОбмена);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчередиАбстрактнаяАгрегация, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиАбстрактнаяАгрегация, ПараметрыОбмена);
		
		Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчередиКУдалению) <> -1 
				И ЭлементОчередиКУдалению.Сообщение <> ЭлементОчереди.Сообщение Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчередиКУдалению);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
	КонецЕсли;
	
	ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры



Процедура ПодготовитьСообщенияПоАбстрактнойОперацииВводВОборотИмпортСФТС(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|		И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		И Шапка.Ссылка = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Номер                          КАК Номер,
	|	Шапка.Дата                           КАК Дата,
	|	Шапка.ДокументОснование              КАК ДокументОснование,
	|	
	|	Шапка.Организация                    КАК Организация,
	|	Представление(Шапка.Организация)     КАК ОрганизацияПредставление,
	|	
	|	Шапка.Контрагент                     КАК Контрагент,
	|	Представление(Шапка.Контрагент)      КАК КонтрагентПредставление,
	|	
	|	Шапка.Ответственный                  КАК Ответственный,
	|	Представление(Шапка.Ответственный)   КАК ОтветственныйПредставление,
	|	
	|	Шапка.ВидПродукции                   КАК ВидПродукции,
	|	Шапка.Операция                       КАК Операция,
	|	Шапка.ОперацияНанесения              КАК ОперацияНанесения,
	|	Шапка.ОтчетПроизводственнойЛинии     КАК ОтчетПроизводственнойЛинии,
	|	Шапка.ДатаПроизводства               КАК ДатаПроизводства,
	|	Шапка.ВариантЗаполненияДекларации    КАК ВариантЗаполненияДекларации,
	|	Шапка.ДатаДекларации                 КАК ДатаДекларации,
	|	Шапка.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|
	|	Шапка.ВариантВыполненияАгрегации        КАК ВариантВыполненияАгрегации,
	|	Шапка.ОперацияНанесенияТолькоДляНаборов КАК ОперацияНанесенияТолькоДляНаборов,
	|	
	|	Шапка.Ссылка                         КАК Ссылка,
	|	
	|	Шапка.ИдентификаторПроисхожденияВЕТИССтрокой КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	Шапка.Номенклатура                           КАК Номенклатура,
	|	Шапка.Характеристика                         КАК Характеристика,
	|	Шапка.Серия                                  КАК Серия
	|	
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	ТекстЗапросаТовары = 
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.GTIN               КАК GTIN,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.ИдентификаторПроисхожденияВЕТИС        КАК ИдентификаторПроисхожденияВЕТИС,
	|	&ИдентификаторПроисхожденияВЕТИССтрокой       КАК ИдентификаторПроисхожденияВЕТИССтрокой
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(ТекстЗапросаТовары);
	СписокЗапросов.Добавить(ТекстЗапросаТовары, "Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	ШтрихкодыУпаковок.СрокГодности                    КАК СрокГодности
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВложенныеШтрихкодыАТКИСМП.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(ВложенныеШтрихкодыАТКИСМП.Версия)  КАК Версия
	|ПОМЕСТИТЬ ВерсииСообщений
	|ИЗ
	|	РегистрСведений.ВложенныеШтрихкодыАТКИСМП КАК ВложенныеШтрихкодыАТКИСМП
	|ГДЕ
	|	ВложенныеШтрихкодыАТКИСМП.ДокументОснование = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ВложенныеШтрихкодыАТКИСМП.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыАТКИСМП.АТК       КАК ШтрихкодУпаковки,
	|	ВложенныеШтрихкодыАТКИСМП.ДанныеАТК КАК ДанныеАТК
	|ИЗ
	|	ВерсииСообщений КАК ВерсииСообщений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВложенныеШтрихкодыАТКИСМП КАК ВложенныеШтрихкодыАТКИСМП
	|		ПО ВложенныеШтрихкодыАТКИСМП.ДокументОснование = ВерсииСообщений.ДокументОснование
	|		И ВложенныеШтрихкодыАТКИСМП.Версия = ВерсииСообщений.Версия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыАТК.ШтрихкодУпаковки,
	|	Неопределено
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыАТК КАК ШтрихкодыАТК
	|ГДЕ
	|	ШтрихкодыАТК.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковокАТК");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода                        КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки                КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64 КАК ФорматBase64,
	|	ДанныеОтчета.НомерСтроки  КАК КлючЗаписи,
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗначениеШтрихкодаКПередаче,
	|
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗначениеШтрихкодаУпаковкиКПередаче,
	|	ДанныеОтчета.Ссылка КАК Документ
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|	И ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.ЗначениеШтрихкода,
	|	ДанныеРегистра.ЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкода,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.ФорматBase64,
	|	ДанныеРегистра.КлючЗаписи,
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеРегистра.Документ
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|	И ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючЗаписи",
	"ДанныеОтчетаПроизводственнойЛинии");

	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("ИдентификаторПроисхожденияВЕТИССтрокой", "");
	Запрос.УстановитьПараметр("Повторно", ПараметрыЗапроса.ПовторнаяОтправка);

	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ДанныеШапки = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковокАТК = РезультатЗапроса["ШтрихкодыУпаковокАТК"].Выгрузить();
	//@skip-warning
	ДанныеОтчета = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();

	Если Не ДанныеШапки.Следующий()
		Или (ШтрихкодыУпаковок.Количество() = 0 И ДанныеОтчета.Количество() = 0) Тогда
		
		ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	НомерВерсии = ДанныеШапки.ПоследнийНомерВерсии + 1;

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(
		ДанныеШапки, Неопределено, ЭлементОчереди.ВидПродукции);
	Настройки = Новый Структура(
		"СоздаватьШтрихкодУпаковки, СсылкаНаОбъект",
		Ложь, ЭлементОчереди.Документ);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Истина);
	
	Фильтр = Неопределено;
	
	Если ДанныеШапки.ОтчетПроизводственнойЛинии Тогда

		КодыМаркировкиНормализованы = Истина;

		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
			Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкода) Тогда
				КодыМаркировкиНормализованы = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;

		ПараметрыРазбора = Новый Структура;
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		ПараметрыРазбора.Вставить("КодыМаркировкиНормализованы",            КодыМаркировкиНормализованы);

		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));

		// С учетом возможных пустых колонок ЗначениеШтрихкода, если ввод в оборот после нанесения.
		РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
			ДанныеОтчета, ЭлементОчереди.ВидПродукции, ПараметрыРазбора);

		ИсточникДанных = Новый Массив;
		КешДанныхРазбора = Новый Соответствие;

		Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл

			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;

			ИсточникДанных.Добавить(
				Новый Структура(
					"Штрихкод, ШтрихкодУпаковки",
					ИсходнаяСтрока.НормализованноеЗначениеШтрихкода, ИсходнаяСтрока.НормализованноеЗначениеШтрихкодаУпаковки));

			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл

				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;

				Если КешДанныхРазбора[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = Неопределено Тогда
					
					СтруктураДанныхРазбора = ИнициализироватьСтруктуруДанныхРазбора();
					СтруктураДанныхРазбора.ВидУпаковки               = СтрокаДанных[ИменаКолонок.ВидУпаковки];
					СтруктураДанныхРазбора.ТипШтрихкода              = СтрокаДанных[ИменаКолонок.ТипШтрихкода];
					СтруктураДанныхРазбора.EAN                       = СтрокаДанных[ИменаКолонок.EAN];
					СтруктураДанныхРазбора.GTIN                      = СтрокаДанных[ИменаКолонок.GTIN];
					СтруктураДанныхРазбора.КоличествоВложенныхЕдиниц = СтрокаДанных[ИменаКолонок.КоличествоВложенныхЕдиниц];
					СтруктураДанныхРазбора.ДанныеРазбора             = СтрокаДанных[ИменаКолонок.ДанныеРазбора];
					СтруктураДанныхРазбора.КодДляПередачиИСМП        = СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП];
					КешДанныхРазбора.Вставить(
						ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки],
						СтруктураДанныхРазбора);

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

		Результат = ДеревоУпаковокПоДаннымОтчетаПроизводственнойЛинии(ДанныеШапки, ИсточникДанных, КешДанныхРазбора);
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ВызватьИсключение Результат.ТекстОшибки;
		КонецЕсли;

		ДеревоУпаковок = Результат.ДеревоУпаковок;

		ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок);
		ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД = Истина;

		// Сохранение параметров сканирования.
		// При подготовке дерева упаковок в сценарии работы с ТСД не следует выполнять обращения к ГИС МТ.
		// Все необходимые обращения выполнит механизм штрихкодирования.
		ШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		ШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);

		ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии = Истина;
		ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "НеПроверять";
		ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = Истина;
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, Истина);

		РезультатОбработкиШтрихкодов = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьШтрихкоды(
			Неопределено, ПараметрыСканирования,
			Неопределено, Новый УникальныйИдентификатор, Неопределено, ДанныеПоШтрихкодам);

		РезультатПолученияДанных = Новый Структура;
		РезультатПолученияДанных.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
		Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
			РезультатОбработки = КлючИЗначение.Значение;
			Если РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМП")
					И РезультатОбработки.ТребуетсяАвторизацияИСМП Тогда
				РезультатПолученияДанных.ТребуетсяОбновлениеКлючаСессии = Истина;
				Прервать;
			КонецЕсли;
			Если РезультатОбработки.Свойство("ЕстьОшибки") И РезультатОбработки.ЕстьОшибки Тогда
				ВызватьИсключение РезультатОбработки.ТекстОшибки;
			КонецЕсли;
		КонецЦикла;

		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;

		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;

	Иначе

		Если ПараметрыЗапроса.ПовторнаяОтправка Тогда
			Фильтр = ПараметрыЗапроса.ШтрихкодыУпаковокКПовторнойПередаче;
		КонецЕсли;

		РезультатПолученияДанных = ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(ЭлементОчереди.Документ, ПараметрыСканирования, Истина);

		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;

		Если РезультатПолученияДанных.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
		КонецЕсли;

		ВложенныеШтрихкоды = РезультатПолученияДанных.ВложенныеШтрихкоды;

	КонецЕсли;
	
	СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(Новый Структура, ДанныеШапки.Операция, ЭлементОчереди);
	
	СообщенияJSON = Новый Массив;
	
	ЕстьОшибки = Ложь;
	
	КодыАгрегированы    = ПараметрыЗапроса.КодыАгрегированы;
	КодыАТКСформированы = ПараметрыЗапроса.КодыАТКСформированы;
	Если Не КодыАгрегированы Тогда // При вводе в оборот в разрезе кодов или АТК.
		Для Каждого СтрокаДерева Из ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
			Результат = НайтиСформированныеАгрегатыПоДаннымИСМП(СтрокаДерева);
			Если Результат.ЕстьОшибки Тогда
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, Результат.ТекстОшибки);
				СообщенияJSON.Добавить(СообщениеJSON);
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда

		ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииПрочее.НачинаетсяСоСкобки = Ложь;

		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("trade_participant_inn", ПараметрыЗапроса.ОрганизацияИНН);
		Если ДанныеШапки.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или ДанныеШапки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
			ТелоЗапроса.Вставить("trade_participant_kpp", ПараметрыЗапроса.ОрганизацияКПП);
		КонецЕсли;
		ТелоЗапроса.Вставить("declaration_date",      Формат(ДанныеШапки.ДатаДекларации,"ДФ=yyyy-MM-dd")); // Смена формата?
		ТелоЗапроса.Вставить("declaration_number",    ДанныеШапки.РегистрационныйНомерДекларации);

		ТелоЗапроса.Вставить("products_list",        Новый Массив);

		Настройки = Новый Структура;

		Настройки.Вставить("ИмяРеквизитаТовары",         "products_list");
		// Для всех товарных групп, кроме молочной продукции, использовать cis
		Настройки.Вставить("ИмяРеквизитаКодМаркировки",  "cis");
		Настройки.Вставить("УказыватьТипУпаковки",       Ложь);
		Настройки.Вставить("УровеньВложенностиУпаковок", 1);
		Настройки.Вставить("ЗаполнятьВложенныеКоды",     Ложь);

		Настройки.Вставить("УказыватьИдентификаторПроисхожденияВЕТИС", Ложь);
		Настройки.Вставить("УказыватьДатуПроизводства",                Ложь);
		
		Настройки.Вставить("ИмяРеквизитаКодМаркировкиДополнительное", "");
		
		ЭтоМолочнаяПродукцияИСМП = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ДанныеШапки.ВидПродукции);
		Если ЭтоМолочнаяПродукцияИСМП Тогда
			ДатаПроизводства = Формат(ДанныеШапки.ДатаПроизводства,"ДФ=yyyy-MM-dd");
			ТелоЗапроса.Вставить("production_date",       ДатаПроизводства);
			
			Настройки.УказыватьДатуПроизводства = Истина;
			Настройки.Вставить("ДатаПроизводства", ДатаПроизводства);
			Настройки.ИмяРеквизитаКодМаркировкиДополнительное = "ki";
		КонецЕсли;
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(ДанныеШапки.ВидПродукции) Тогда
			Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
			Настройки.ЗаполнятьВложенныеКоды                   = Истина;
			Настройки.ИмяРеквизитаКодМаркировкиДополнительное = "ki";
		КонецЕсли;
		
		Настройки.Вставить("КоличествоКодовВСообщении",  КоличествоКодовВСообщенииВводВОборот());
		Настройки.Вставить("ОтчетПроизводственнойЛинии", ДанныеШапки.ОтчетПроизводственнойЛинии);
		Настройки.Вставить("Фильтр",                     Фильтр);

		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;

		НастройкиРазбораКодаМаркировки = Новый Структура;
		НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
		НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь));
		НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);

		Настройки.Вставить("НастройкиРазбораКодаМаркировки",         НастройкиРазбораКодаМаркировки);
		Настройки.Вставить("ПараметрыНормализацииПрочее",            ПараметрыНормализацииПрочее);

		Настройки.Вставить("ДоступенРежимИсправленияОшибок",
			ДанныеШапки.ВариантЗаполненияДекларации <> Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК);

		ГруппыКодов = Новый Массив;

		Если ДанныеШапки.ОтчетПроизводственнойЛинии Тогда

			Если ДанныеШапки.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки Тогда

				ЗаполнитьСведенияОТоварахИмпортСФТСПоШтрихкодамУпаковок(СообщениеJSON, ЭлементОчереди, ГруппыКодов,
					ВложенныеШтрихкоды.МаркированныеТовары, ДанныеШапки, Настройки);

			ИначеЕсли ДанныеШапки.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда

				ЗаполнитьСведенияИмпортСФТСПоДаннымАТКОтчетаПроизводственнойЛинии(ЭлементОчереди, ГруппыКодов,
					ДанныеШапки, ШтрихкодыУпаковокАТК, Настройки);

			Иначе // Агрегаты

				ЗаполнитьСведенияИмпортФТСПоДеревуУпаковок(СообщениеJSON, ЭлементОчереди, ГруппыКодов,
					ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеШапки, Настройки);

			КонецЕсли;

		Иначе

			Если ДанныеШапки.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки Тогда
				ЗаполнитьСведенияОТоварахИмпортСФТСПоШтрихкодамУпаковок(СообщениеJSON, ЭлементОчереди, ГруппыКодов,
					ВложенныеШтрихкоды.МаркированныеТовары, Товары, Настройки);

			ИначеЕсли ДанныеШапки.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда

				РезультатПоискаАТК = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
					ШтрихкодыУпаковокАТК.ВыгрузитьКолонку("ШтрихкодУпаковки"),
					ПараметрыСканирования,,
					Истина);

				Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС Тогда
					ДополнитьДеревоУпаковокАТКСпецификой(РезультатПоискаАТК.МаркированныеТовары, ВложенныеШтрихкоды);
				КонецЕсли;

				ЗаполнитьСведенияИмпортФТСПоДеревуУпаковок(СообщениеJSON, ЭлементОчереди, ГруппыКодов,
					РезультатПоискаАТК.ДеревоУпаковок, Товары, Настройки);

			Иначе // Агрегаты

				ЗаполнитьСведенияИмпортФТСПоДеревуУпаковок(СообщениеJSON, ЭлементОчереди, ГруппыКодов,
					ВложенныеШтрихкоды.ДеревоУпаковок, Товары, Настройки);

			КонецЕсли;

		КонецЕсли;

		Для Каждого ДанныеСообщения Из ГруппыКодов Цикл

			ТелоЗапросаСообщения = ОбщегоНазначения.СкопироватьРекурсивно(ТелоЗапроса);
			ТелоЗапросаСообщения.products_list = ДанныеСообщения.ГруппаКодов;

			СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаСообщения, ДанныеШапки.Операция, ЭлементОчереди);

			ПараметрыЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса);
			Если Настройки.ДоступенРежимИсправленияОшибок Тогда
				//@skip-check bsl-legacy-check-expression-type
				ПараметрыЗапроса.Вставить("ДанныеСообщения", ДанныеСообщения.ГруппаНормализованныхКодов);
			КонецЕсли;

			СообщениеJSON.Идентификатор      = Строка(Новый УникальныйИдентификатор());
			СообщениеJSON.ЗагружатьДо        = ЭлементОчереди.Сообщение;
			СообщениеJSON.Версия             = НомерВерсии;
			СообщениеJSON.ПараметрыЗапроса   = ПараметрыЗапроса;
			СообщениеJSON.СообщениеОснование = "";
			СообщениеJSON.Описание           = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
				ДанныеШапки.Операция, ЭлементОчереди.Документ, НомерВерсии);

			СообщениеОснованиеДляСлужебногоПротоколаОбмена = СообщениеJSON.Идентификатор;

			СообщенияJSON.Добавить(СообщениеJSON);

		КонецЦикла;
		
		СообщенияJSONТрансформация = Новый Массив;
		
		Если Не КодыАгрегированы Тогда
			
			ПараметрыОбработки = Новый Структура;
			// Если ввод в оборот осуществляется по кодам АТК, то исключить подготовку операции "расформирование АТК"
			ПараметрыОбработки.Вставить("ОбрабатыватьКодыАТК", Не КодыАТКСформированы);
			
			ПодготовитьКПередачеСообщенияДляТрансформацииАгрегатовИСМП(
				ВложенныеШтрихкоды.МаркированныеТовары,
				ЭлементОчереди,
				СообщениеОснованиеДляСлужебногоПротоколаОбмена,
				СообщенияJSONТрансформация,
				ПараметрыОбмена,
				ПараметрыОбработки);

			Для Каждого СообщениеТрансформация Из СообщенияJSONТрансформация Цикл
				СообщениеТрансформация.СообщениеОснование = СообщениеОснованиеДляСлужебногоПротоколаОбмена;
			КонецЦикла;

		КонецЕсли;
		
		Если СообщенияJSONТрансформация.Количество() Тогда
			ПакетСообщений = Новый Соответствие;
			ПакетСообщений.Вставить(1, СообщенияJSONТрансформация);
			ПодготовитьКПередачеСообщениеАбстрактнаяАгрегацияИзменениеРасчетСтатуса(СообщенияJSON, ЭлементОчереди, ПакетСообщений);
		КонецЕсли;
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП.СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияИмпортФТСПоДеревуУпаковок(СообщениеJSON, ОбщийЭлементОчереди, ГруппыКодов, ИсточникДанных, ИсточникДанныхТовары, Настройки)
	
	Фильтр = Неопределено;
	Если Настройки.УровеньВложенностиУпаковок = 1 Тогда

		КоличествоКодовВПакете = 0;

		ТекущаяГруппа = Новый Массив;

		ОписаниеПакета = Новый Структура;
		ОписаниеПакета.Вставить("ГруппаКодов", ТекущаяГруппа);
		Если Настройки.ДоступенРежимИсправленияОшибок Тогда
			ГруппаНормализованныхКодов = Новый Массив;
			ОписаниеПакета.Вставить("ГруппаНормализованныхКодов", ГруппаНормализованныхКодов);
		КонецЕсли;

		//@skip-check bsl-legacy-check-expression-type
		Настройки.Вставить("КоличествоВТекущейГруппе", 0);
		//@skip-check bsl-legacy-check-expression-type
		Настройки.Вставить("ТекущаяГруппаНормализованныхКодов", Новый Массив);

		Фильтр = Настройки.Фильтр;
	Иначе
		ТекущаяГруппа = ГруппыКодов;
	КонецЕсли;
	
	Для Каждого СтрокаШтрихкодаУпаковки Из ИсточникДанных.Строки Цикл
		
		Если Фильтр <> Неопределено
			И Фильтр[СтрокаШтрихкодаУпаковки.ШтрихкодУпаковки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТЧ = ЗаполнитьДанныеСтрокиВводВОборотИмпортФТС(
			СообщениеJSON,
			ОбщийЭлементОчереди,
			СтрокаШтрихкодаУпаковки,
			ИсточникДанныхТовары,
			Настройки);

		Настройки.КоличествоВТекущейГруппе = Настройки.КоличествоВТекущейГруппе + 1;
		Если Настройки.ДоступенРежимИсправленияОшибок
			И СтрокаШтрихкодаУпаковки.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Настройки.ТекущаяГруппаНормализованныхКодов.Добавить(СтрокаШтрихкодаУпаковки.Штрихкод);
		КонецЕсли;
		
		Если Настройки.ЗаполнятьВложенныеКоды И СтрокаШтрихкодаУпаковки.Строки.Количество() Тогда
			
			НастройкиВложенныхУпаковок = ОбщегоНазначения.СкопироватьРекурсивно(Настройки);
			НастройкиВложенныхУпаковок.УровеньВложенностиУпаковок = Настройки.УровеньВложенностиУпаковок + 1;
			НастройкиВложенныхУпаковок.КоличествоВТекущейГруппе   = 0;
			НастройкиВложенныхУпаковок.ТекущаяГруппаНормализованныхКодов = Новый Массив;

			ВложенныеКоды = Новый Массив;
			
			ЗаполнитьСведенияИмпортФТСПоДеревуУпаковок(СообщениеJSON, ОбщийЭлементОчереди, ВложенныеКоды, СтрокаШтрихкодаУпаковки,
				ИсточникДанныхТовары, НастройкиВложенныхУпаковок);

			СтрокаТЧ.Вставить("children", ВложенныеКоды);

			Если Настройки.ДоступенРежимИсправленияОшибок Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Настройки.ТекущаяГруппаНормализованныхКодов, НастройкиВложенныхУпаковок.ТекущаяГруппаНормализованныхКодов);
			КонецЕсли;

			Настройки.КоличествоВТекущейГруппе = Настройки.КоличествоВТекущейГруппе + НастройкиВложенныхУпаковок.КоличествоВТекущейГруппе;

		КонецЕсли;

		Если Настройки.УровеньВложенностиУпаковок = 1 Тогда

			Если КоличествоКодовВПакете > 0
				И КоличествоКодовВПакете + Настройки.КоличествоВТекущейГруппе > Настройки.КоличествоКодовВСообщении Тогда

				ГруппыКодов.Добавить(ОписаниеПакета);

				ТекущаяГруппа = Новый Массив;

				ОписаниеПакета = Новый Структура;
				ОписаниеПакета.Вставить("ГруппаКодов", ТекущаяГруппа);
				Если Настройки.ДоступенРежимИсправленияОшибок Тогда
					ГруппаНормализованныхКодов = Новый Массив;
					ОписаниеПакета.Вставить("ГруппаНормализованныхКодов", ГруппаНормализованныхКодов);
				КонецЕсли;

				КоличествоКодовВПакете = 0;

			КонецЕсли;

			Если Настройки.ДоступенРежимИсправленияОшибок Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаНормализованныхКодов, Настройки.ТекущаяГруппаНормализованныхКодов);
				Настройки.ТекущаяГруппаНормализованныхКодов = Новый Массив;
			КонецЕсли;

			КоличествоКодовВПакете = КоличествоКодовВПакете + Настройки.КоличествоВТекущейГруппе;
			Настройки.КоличествоВТекущейГруппе = 0;

		КонецЕсли;

		ТекущаяГруппа.Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
	Если Настройки.УровеньВложенностиУпаковок = 1 И ТекущаяГруппа.Количество() Тогда
		ГруппыКодов.Добавить(ОписаниеПакета);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСведенияОТоварахИмпортСФТСПоШтрихкодамУпаковок(
	СообщениеJSON, ОбщийЭлементОчереди, ГруппыКодов, МаркированныеТовары, Товары, Настройки)
	
	КоличествоВТекущейГруппе = 0;
	Фильтр = Настройки.Фильтр;
	
	ТекущаяГруппа                     = Неопределено;
	ТекущаяГруппаНормализованныхКодов = Неопределено;

	Для Каждого СтрокаТЧМаркированныеТовары Из МаркированныеТовары Цикл
		
		Если Фильтр <> Неопределено
			И Фильтр[СтрокаТЧМаркированныеТовары.ШтрихкодУпаковки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если КоличествоВТекущейГруппе = Настройки.КоличествоКодовВСообщении Или ТекущаяГруппа = Неопределено Тогда

			ТекущаяГруппа = Новый Массив;
			ТекущаяГруппаНормализованныхКодов = Новый Массив;

			ОписаниеПакета = Новый Структура;
			ОписаниеПакета.Вставить("ГруппаКодов",                ТекущаяГруппа);
			ОписаниеПакета.Вставить("ГруппаНормализованныхКодов", ТекущаяГруппаНормализованныхКодов);

			ГруппыКодов.Добавить(ОписаниеПакета);
			КоличествоВТекущейГруппе = 0;

		КонецЕсли;

		СтрокаТЧ = ЗаполнитьДанныеСтрокиВводВОборотИмпортФТС(
			СообщениеJSON,
			ОбщийЭлементОчереди,
			СтрокаТЧМаркированныеТовары,
			Товары,
			Настройки);

		ТекущаяГруппа.Добавить(СтрокаТЧ);
		ТекущаяГруппаНормализованныхКодов.Добавить(СтрокаТЧМаркированныеТовары.Штрихкод);
		
		КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьДанныеСтрокиВводВОборотИмпортФТС(СообщениеJSON, ОбщийЭлементОчереди, СтрокаИсточникаДанных, ИсточникДанныхТовары, Настройки)

	ПараметрыНормализацииПрочее = Настройки.ПараметрыНормализацииПрочее;
	
	Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС
		И СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		Если Настройки.ОтчетПроизводственнойЛинии Тогда

			СтрокаТЧТовары = ИсточникДанныхТовары;

		Иначе

			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",                    СтрокаИсточникаДанных.Номенклатура);
			Отбор.Вставить("Характеристика",                  СтрокаИсточникаДанных.Характеристика);
			Отбор.Вставить("Серия",                           СтрокаИсточникаДанных.Серия);
			Отбор.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаИсточникаДанных.ИдентификаторПроисхожденияВЕТИС);

			НайденныеСтроки = ИсточникДанныхТовары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.';
							|en = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
						ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
							Отбор.Номенклатура,
							Отбор.Характеристика,,
							Отбор.Серия)));
				Возврат Неопределено;
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.';
							|en = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
								Отбор.Номенклатура,
								Отбор.Характеристика,,
								Отбор.Серия)));
				Возврат Неопределено;
			КонецЕсли;

			СтрокаТЧТовары = НайденныеСтроки[0];

		КонецЕсли;

	КонецЕсли;
	
	РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
		СтрокаИсточникаДанных.Штрихкод, ОбщийЭлементОчереди.ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
	НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		РезультатРазбора.ДанныеРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
	
	СтрокаТЧ = Новый Структура;
	СтрокаТЧ.Вставить(Настройки.ИмяРеквизитаКодМаркировки, НормализованныйКодМаркировки);
	
	Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС
		И СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		И СтрокаТЧТовары <> Неопределено Тогда
		СтрокаТЧ.Вставить("vsd_number", СтрокаТЧТовары.ИдентификаторПроисхожденияВЕТИССтрокой);
	КонецЕсли;
	
	Если Настройки.УказыватьДатуПроизводства Тогда
		СтрокаТЧ.Вставить("production_date", Настройки.ДатаПроизводства);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки.ИмяРеквизитаКодМаркировкиДополнительное) Тогда
		СтрокаТЧ.Вставить(Настройки.ИмяРеквизитаКодМаркировкиДополнительное, НормализованныйКодМаркировки);
	КонецЕсли;
	
	Возврат СтрокаТЧ;
	
КонецФункции

Процедура ПодготовитьСообщенияПоАбстрактнойОперацииАТК(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	// Заполнение данных по маркируемым товарам
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода                        КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки                КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64 КАК ФорматBase64,
	|	ДанныеОтчета.НомерСтроки  КАК КлючЗаписи
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.ЗначениеШтрихкода,
	|	ДанныеРегистра.ЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкода,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.ФорматBase64,
	|	ДанныеРегистра.КлючЗаписи
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	КлючЗаписи",
	"ДанныеОтчетаПроизводственнойЛинии");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДанныеОтчета = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	ДанныеШапки = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ЭлементОчереди.Документ);
	СообщенияJSON = Новый Массив;
	
	Если ШтрихкодыУпаковок.Количество() = 0 И ДанныеОтчета.Количество() = 0 Тогда

		ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.';
							|en = 'Нет данных для выгрузки.'");

		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();

		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);

		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();

		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;

		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = ТекстОшибки;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = Неопределено;

		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(
		ДанныеШапки, Неопределено, ЭлементОчереди.ВидПродукции);
	Настройки = Новый Структура(
		"СоздаватьШтрихкодУпаковки, СсылкаНаОбъект",
		Ложь, ЭлементОчереди.Документ);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Истина);
	
	ЕстьОшибки = Ложь;
	
	Если ДанныеШапки.ОтчетПроизводственнойЛинии Тогда

		КодыМаркировкиНормализованы = Истина;
		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
			Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкода) Тогда
				КодыМаркировкиНормализованы = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;

		ПакетКодовАТК    = Новый Массив;
		МассивСтрок      = Новый Массив;

		КоличествоКодовВСообщенииАТК = КоличествоКодовВСообщенииАТК();

		ПараметрыРазбора = Новый Структура;
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		// Коды нормализуются при проверке вида упаковок перед формированием сообщения.
		ПараметрыРазбора.Вставить("КодыМаркировкиНормализованы",            КодыМаркировкиНормализованы);

		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));

		// 1. Разбор кодов, подготовка данных для построения дерева упаковок.

		РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
			ДанныеОтчета, ДанныеШапки.ВидПродукции, ПараметрыРазбора);

		КоличествоКодовВТекущейГруппе = 0;

		ГруппаКодов                = Неопределено;
		ГруппаНормализованныхКодов = Неопределено;

		Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл

			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;

			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл

				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДанных[ИменаКолонок.ВидУпаковки] = Перечисления.ВидыУпаковокИС.Набор
					Или СтрокаДанных[ИменаКолонок.ВидУпаковки] = Перечисления.ВидыУпаковокИС.Групповая Тогда
					ЕстьОшибки = Истина;
					Прервать;
				КонецЕсли;
				
				Если СтрокаДанных[ИменаКолонок.ВидУпаковки] <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
					Продолжить;
				КонецЕсли;

				Если КоличествоКодовВТекущейГруппе = КоличествоКодовВСообщенииАТК Или ГруппаКодов = Неопределено Тогда

					ГруппаКодов = Новый Массив;
					ГруппаНормализованныхКодов = Новый Массив;

					ОписаниеПакета = Новый Структура;
					ОписаниеПакета.Вставить("ГруппаКодов",                ГруппаКодов);
					ОписаниеПакета.Вставить("ГруппаНормализованныхКодов", ГруппаНормализованныхКодов);

					ПакетКодовАТК.Добавить(ОписаниеПакета);
					КоличествоКодовВТекущейГруппе = 0;

				КонецЕсли;

				СтрокаТЧ = Новый Структура;
				СтрокаТЧ.Вставить("ki", СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП]);

				ГруппаКодов.Добавить(СтрокаТЧ);
				ГруппаНормализованныхКодов.Добавить(СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП]);

				СтруктураЗначения = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
					ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки], ЭлементОчереди.ВидПродукции, СтрокаДанных[ИменаКолонок.ДанныеРазбора]);
				МассивСтрок.Добавить(СтруктураЗначения);

				КоличествоКодовВТекущейГруппе = КоличествоКодовВТекущейГруппе + 1;

			КонецЦикла;
			
			Если ЕстьОшибки Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьОшибки Тогда
			
			РезультатПоиска = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
				МассивСтрок,
				ЭлементОчереди.Организация);
			
			Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПоиска, ЭлементОчереди, ПараметрыОбмена) Тогда
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатПоиска.ТекстОшибки) Тогда
				ВызватьИсключение РезультатПоиска.ТекстОшибки;
			КонецЕсли;
			
			ИсточникДанных = ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары();
			Если ИсточникДанных.Колонки.Найти("РодительскаяУпаковка") = Неопределено Тогда
				ИсточникДанных.Колонки.Добавить("РодительскаяУпаковка");
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из РезультатПоиска.СтатусыКодовМаркировки Цикл
				
				СтрокаТаблицы = ИсточникДанных.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, КлючИЗначение.Ключ);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, КлючИЗначение.Значение);
				
			КонецЦикла;
			
			ИсточникДанных.Сортировать("Штрихкод");

		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования,,
			Истина);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПоиска, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатПоиска.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПоиска.ТекстОшибки;
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
			Результат = НайтиСформированныеАгрегатыПоДаннымИСМП(СтрокаДерева);
			Если Результат.ЕстьОшибки Тогда
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОшибки Тогда
			ИсточникДанных = РезультатПоиска.МаркированныеТовары;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(Новый Структура, ДанныеШапки.Операция, ЭлементОчереди);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			ТекстОшибкиНайденыКодыНаборовГрупповыхУпаковокПриИмпортеСФТС());
		СообщенияJSON.Добавить(СообщениеJSON);  
		
	Иначе
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ОбрабатыватьКодыАТК", Истина);
		
		СообщенияJSONТрансформация = Новый Массив;
		ПодготовитьКПередачеСообщенияДляТрансформацииАгрегатовИСМП(
			ИсточникДанных,
			ЭлементОчереди,
			ЭлементОчереди.Сообщение,
			СообщенияJSONТрансформация,
			ПараметрыОбмена,
			ПараметрыОбработки);
		
		Если ДанныеШапки.ОтчетПроизводственнойЛинии Тогда
			
			РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ДанныеШапки.Организация);
			
			Для Каждого ДанныеСообщения Из ПакетКодовАТК Цикл
				
				ТелоЗапроса = Новый Структура;
				ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
				ТелоЗапроса.Вставить("products_list",         ДанныеСообщения.ГруппаКодов);
				
				Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание;
				
				СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(ТелоЗапроса, Операция, ЭлементОчереди);
				
				ПараметрыЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса);
				//@skip-check bsl-legacy-check-expression-type
				ПараметрыЗапроса.Вставить("ДанныеСообщения", ДанныеСообщения.ГруппаНормализованныхКодов);
				
				СообщениеJSON.ПараметрыЗапроса =  ПараметрыЗапроса;
				СообщениеJSON.ЗагружатьДо      = ЭлементОчереди.Сообщение;
				СообщениеJSON.Версия           = ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
				СообщенияJSON.Добавить(СообщениеJSON);
				
			КонецЦикла;
			
		Иначе
			
			МаркированныеТовары = Новый ТаблицаЗначений;
			МаркированныеТовары.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
			МаркированныеТовары.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
			МаркированныеТовары.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатПоиска.МаркированныеТовары, МаркированныеТовары);
			
			ПодготовитьКПередачеСообщенияДляФормированияКодовАТКИСМП(
				МаркированныеТовары, ДанныеШапки,
				ЭлементОчереди, ЭлементОчереди.Сообщение, СообщенияJSON, ПараметрыОбмена);
		КонецЕсли;
		
		// Выполнять удаление кодов из агрегатов и разагрегацию АТК в первую очередь
		Если СообщенияJSONТрансформация.Количество() Тогда
			ПакетСообщений = Новый Соответствие;
			ПакетСообщений.Вставить(1, СообщенияJSONТрансформация);
			ПодготовитьКПередачеСообщениеАбстрактнаяАгрегацияИзменениеРасчетСтатуса(СообщенияJSON, ЭлементОчереди, ПакетСообщений);
		КонецЕсли;
		
		// Если формирование АТК не требуется - завершить операцию
		Если СообщенияJSON.Количество() = 0 Тогда
			
			ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП.СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры



Процедура ПодготовитьСообщенияПоАбстрактнойАгрегации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	// Заполнение данных по маркируемым товарам
	ДанныеШапки = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ЭлементОчереди.Документ);
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(
		ДанныеШапки, Неопределено, ЭлементОчереди.ВидПродукции);
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Истина);
	
	СообщенияJSON = Новый Массив;
	
	СтатусОшибкаПередачи = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
	Если Не ДанныеШапки.ОтчетПроизводственнойЛинии Тогда
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ЭлементОчереди.ВидПродукции) Тогда
			РезультатПолученияДанных = ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(ЭлементОчереди.Документ, ПараметрыСканирования, Истина);
		Иначе
			РезультатПолученияДанных = ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(ЭлементОчереди.Документ, ПараметрыСканирования, Истина);
		КонецЕсли;
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатПолученияДанных.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
		КонецЕсли;
		
		ВложенныеШтрихкоды = РезультатПолученияДанных.ВложенныеШтрихкоды;
		
	Иначе
		
		СписокЗапросов = Новый СписокЗначений;
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
		|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
		|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
		|
		|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
		|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки,
		|	ДанныеОтчета.НомерСтроки КАК КлючЗаписи,
		|	ДанныеОтчета.Ссылка КАК Документ
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
		|ГДЕ
		|	ДанныеОтчета.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.ЗначениеШтрихкода,
		|	ДанныеРегистра.ЗначениеШтрихкодаУпаковки,
		|	ДанныеРегистра.ФорматBase64,
		|	ДанныеРегистра.НормализованноеЗначениеШтрихкода,
		|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки,
		|	ДанныеРегистра.КлючЗаписи,
		|	ДанныеРегистра.Документ
		|ИЗ
		|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Документ = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючЗаписи
		|",
		"ДанныеОтчетаПроизводственнойЛинии");
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Документ = &Ссылка
		|",
		"ДанныеРегистра");

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
		
		РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
		
		//@skip-warning
		ДанныеОтчета = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
		//@skip-warning
		ИспользуетсяРегистрДляХраненияДанныхОтчета = Не РезультатЗапроса["ДанныеРегистра"].Пустой();

		КодыМаркировкиНормализованы = Истина;
		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
			Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкода) Тогда
				КодыМаркировкиНормализованы = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;

		ПараметрыРазбора = Новый Структура;
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		ПараметрыРазбора.Вставить("КодыМаркировкиНормализованы",            КодыМаркировкиНормализованы);
		
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
		
		РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
			ДанныеОтчета, ЭлементОчереди.ВидПродукции, ПараметрыРазбора);
		
		Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Или Не КодыМаркировкиНормализованы Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			РезультатСохраненияДанныхОтчета = МенеджерОбъекта.СохранитьОбработанныеДанныеОтчета(
				ЭлементОчереди.Документ,
				ДанныеОтчета,
				Истина,
				ИспользуетсяРегистрДляХраненияДанныхОтчета,
				ЭлементОчереди.Организация);
			
			МассивОшибок = Новый Массив;
			
			Если РезультатСохраненияДанныхОтчета.ЕстьОшибки Тогда
				МассивОшибок.Добавить(РезультатСохраненияДанныхОтчета.ТекстОшибки);
			КонецЕсли;
			
			Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Тогда
				МассивОшибок.Добавить(НСтр("ru = 'Некорректный формат данных отчета производственной линии';
											|en = 'Некорректный формат данных отчета производственной линии'"));
			КонецЕсли;

			Если МассивОшибок.Количество() Тогда

				ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена, СтатусОшибкаПередачи, СтрСоединить(МассивОшибок, Символы.ПС));
				Возврат;

			КонецЕсли;

		КонецЕсли;
		
		ИсточникДанных = Новый Массив;
		КешДанныхРазбора = Новый Соответствие;
		
		Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
		
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			
			ИсточникДанных.Добавить(
				Новый Структура(
					"Штрихкод, ШтрихкодУпаковки",
					ИсходнаяСтрока.НормализованноеЗначениеШтрихкода, ИсходнаяСтрока.НормализованноеЗначениеШтрихкодаУпаковки));
			
			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
				
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КешДанныхРазбора[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = Неопределено Тогда
					
					СтруктураДанныхРазбора = ИнициализироватьСтруктуруДанныхРазбора();
					СтруктураДанныхРазбора.ВидУпаковки               = СтрокаДанных[ИменаКолонок.ВидУпаковки];
					СтруктураДанныхРазбора.ТипШтрихкода              = СтрокаДанных[ИменаКолонок.ТипШтрихкода];
					СтруктураДанныхРазбора.EAN                       = СтрокаДанных[ИменаКолонок.EAN];
					СтруктураДанныхРазбора.GTIN                      = СтрокаДанных[ИменаКолонок.GTIN];
					СтруктураДанныхРазбора.КоличествоВложенныхЕдиниц = СтрокаДанных[ИменаКолонок.КоличествоВложенныхЕдиниц];
					СтруктураДанныхРазбора.ДанныеРазбора             = СтрокаДанных[ИменаКолонок.ДанныеРазбора];
					СтруктураДанныхРазбора.КодДляПередачиИСМП        = СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП];
					КешДанныхРазбора.Вставить(
						ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки],
						СтруктураДанныхРазбора);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Результат = ДеревоУпаковокПоДаннымОтчетаПроизводственнойЛинии(ДанныеШапки, ИсточникДанных, КешДанныхРазбора);
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ВызватьИсключение Результат.ТекстОшибки;
		КонецЕсли;
		
		ДеревоУпаковок = Результат.ДеревоУпаковок;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок);
		ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД = Истина;
		
		// Сохранение параметров сканирования.
		// При подготовке дерева упаковок в сценарии работы с ТСД не следует выполнять обращения к ГИС МТ.
		// Все необходимые обращения выполнит механизм штрихкодирования.
		ШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		ШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии = Истина;
		ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "НеПроверять";
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
		ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = Истина;
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, Истина);
		
		РезультатОбработкиШтрихкодов = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьШтрихкоды(
			Неопределено, ПараметрыСканирования,
			Неопределено, Новый УникальныйИдентификатор, Неопределено, ДанныеПоШтрихкодам);
		
		РезультатПолученияДанных = Новый Структура;
		РезультатПолученияДанных.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
		Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
			РезультатОбработки = КлючИЗначение.Значение;
			Если РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМП")
					И РезультатОбработки.ТребуетсяАвторизацияИСМП Тогда
				РезультатПолученияДанных.ТребуетсяОбновлениеКлючаСессии = Истина;
				Прервать;
			КонецЕсли;
			Если РезультатОбработки.Свойство("ЕстьОшибки") И РезультатОбработки.ЕстьОшибки Тогда
				ВызватьИсключение РезультатОбработки.ТекстОшибки;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ЭлементОчереди.ВидПродукции) Тогда
		
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("СообщениеАгрегации", Неопределено);
		ПараметрыОбработки.Вставить("ЭлементОчереди",     ЭлементОчереди);
		ПараметрыОбработки.Вставить("ПараметрыОбмена",    ПараметрыОбмена);
		ПараметрыОбработки.Вставить("ДанныеСообщений",    Новый Соответствие());
		ПараметрыОбработки.Вставить("МетаданныеXDTO",     Новый Структура());
		ПараметрыОбработки.Вставить("ДанныеШапки",        ДанныеШапки);
		ПараметрыОбработки.МетаданныеXDTO.Вставить("АгрегацияМОТП", Метаданные.ПакетыXDTO.АгрегацияМОТП);
		ПараметрыОбработки.МетаданныеXDTO.Вставить("ВыбытиеМОТП",   Метаданные.ПакетыXDTO.ВыбытиеМОТП);
		ПараметрыОбработки.ДанныеШапки.Вставить("ИНН", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		
		ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
		ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
		ПараметрыОбработки.Вставить("ПараметрыНормализации", ПараметрыНормализацииПрочее);
		
		ПараметрыПроверки = ИнициализироватьПараметрыПроверкиАгрегатов();
		
		ДопустимыеВложенияАгрегатовПоВидамПродукции = ПроверкаИПодборПродукцииМОТПКлиентСервер.ДопустимыеВложенияАгрегатовПоВидамПродукции();
		ПараметрыПроверки.ПараметрыПроверкиИерархииАгрегатов       = ДопустимыеВложенияАгрегатовПоВидамПродукции.Получить(ЭлементОчереди.ВидПродукции);
		ПараметрыПроверки.КонтролироватьДопустимуюИерархиюУпаковок = Истина;
		ПараметрыПроверки.ПараметрыНормализации                    = ПараметрыНормализацииПрочее;
		
		Если ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
			Или ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
			ПараметрыПроверки.КонтролироватьСоставГрупповойУпаковки = Истина;
		КонецЕсли;
		
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса <> Неопределено
			И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ПроверятьСоставУпаковокПоДаннымИСМП") Тогда
			ПараметрыПроверки.КонтролироватьСоставАгрегатаПоДаннымИСМП = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ПроверятьСоставУпаковокПоДаннымИСМП;
		КонецЕсли;
		
		РезультатПроверки = ПроверитьСоставДопустимуюИерерхиюДереваУпаковок(ВложенныеШтрихкоды.ДеревоУпаковок, ЭлементОчереди, ПараметрыОбмена, ПараметрыПроверки);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПроверки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатПроверки.ЕстьОшибки Тогда
			ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена, СтатусОшибкаПередачи, РезультатПроверки.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Результат = ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиМОТП(
			ПараметрыОбработки,
			ВложенныеШтрихкоды.ДеревоУпаковок);
		
		Если Результат.ЕстьОшибки Тогда
			ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена, СтатусОшибкаПередачи, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ПараметрыОбработки.ДанныеСообщений Цикл
			ТекстСообщенияXML = ОбщегоНазначенияИСМП.ОбъектXDTOВXML(КлючИЗначение.Значение);
			КлючИЗначение.Ключ.ТекстСообщенияJSON = ТекстСообщенияXML;
			СообщенияJSON.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	Иначе
		
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ(ЭлементОчереди.ВидПродукции) Тогда

			ДопустимыеВложенияАгрегатовПоВидамПродукции = ПроверкаИПодборПродукцииИСМПКлиентСервер.ДопустимыеВложенияАгрегатовПоВидамПродукции();

			ПараметрыПроверки = ИнициализироватьПараметрыПроверкиАгрегатов();
			ПараметрыПроверки.ПараметрыПроверкиИерархииАгрегатов       = ДопустимыеВложенияАгрегатовПоВидамПродукции.Получить(ЭлементОчереди.ВидПродукции);
			ПараметрыПроверки.КонтролироватьДопустимуюИерархиюУпаковок = Истина;
			
			РезультатПроверки = ПроверитьСоставДопустимуюИерерхиюДереваУпаковок(
				ВложенныеШтрихкоды.ДеревоУпаковок, ЭлементОчереди, ПараметрыОбмена, ПараметрыПроверки);
			
			Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПроверки, ЭлементОчереди, ПараметрыОбмена) Тогда
				Возврат;
			КонецЕсли;
			
			Если РезультатПроверки.ЕстьОшибки Тогда
				ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(
					ЭлементОчереди, ПараметрыОбмена, СтатусОшибкаПередачи, РезультатПроверки.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатЗапросаСтатусов = ПолучитьСтатусыНаборовГрупповыхУпаковок(ВложенныеШтрихкоды.МаркированныеТовары, ЭлементОчереди, ПараметрыОбмена);
		Если РезультатЗапросаСтатусов.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатЗапросаСтатусов.ЕстьОшибки Тогда
			ВызватьИсключение РезультатЗапросаСтатусов.ТекстОшибки;
		КонецЕсли;
		
		УпаковкиДокумента = Новый Соответствие;
		
		Результат = ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМППоДеревуУпаковок(
			ВложенныеШтрихкоды.ДеревоУпаковок, ЭлементОчереди, ЭлементОчереди.Сообщение, СообщенияJSON,
			ПараметрыОбмена, УпаковкиДокумента, РезультатЗапросаСтатусов.КешСтатусовКодовМаркировки);
		
		Если Результат.ЕстьОшибки Тогда
			ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена, СтатусОшибкаПередачи, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(Результат, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		ПакетСообщений = Результат.СообщенияАгрегации;
		
		СообщенияJSONОперацияРазагрегация = Новый Массив;
		Результат = ПодготовитьКПередачеСообщенияДляРазагрегацииКодовМаркировкиИСМП(
			ВложенныеШтрихкоды.МаркированныеТовары,
			ЭлементОчереди, ЭлементОчереди.Сообщение,
			ПараметрыОбмена, УпаковкиДокумента, СообщенияJSONОперацияРазагрегация);
		
		Если Результат.ЕстьОшибки Тогда
			ВызватьИсключение Результат.ТекстОшибки;
		КонецЕсли;
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(Результат, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если СообщенияJSONОперацияРазагрегация.Количество() Тогда
			ПакетСообщений.Вставить(ПакетСообщений.Количество() + 1, СообщенияJSONОперацияРазагрегация);
		КонецЕсли;
		
		Если ПакетСообщений.Количество() Тогда
			ПодготовитьКПередачеСообщениеАбстрактнаяАгрегацияИзменениеРасчетСтатуса(
				СообщенияJSON,
				ЭлементОчереди,
				ПакетСообщений);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если агрегация не требуется - завершить операцию
	Если СообщенияJSON.Количество() = 0 Тогда
		
		ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП. СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

// Подготавливает сообщения по операции "аннулирование" документа Отгрузка товаров к передаче в сервис ИС МП.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений()).
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена.
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьСообщенийИСМП - набор записей по сообщению
Процедура ПодготовитьСообщенияПоАбстрактнойОперацииОтгрузкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|
	|	Шапка.Организация                        КАК Организация,
	|	Представление(Шапка.Организация)         КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|	Шапка.ИдентификаторЗаявкиНаОтгрузку      КАК ИдентификаторЗаявкиНаОтгрузку,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.ВидПродукции                       КАК ВидПродукции,
	|	Шапка.Ссылка                             КАК Ссылка
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ЭлементОчереди.Документ);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий()
		Или Не ЗначениеЗаполнено(Шапка.ИдентификаторЗаявкиНаОтгрузку) Тогда
		
		ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	ЕстьОшибки    = Ложь;
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМПОбщегоНазначения.СтатусОбработкиДокументаПоИдентификатору(
		Шапка.ИдентификаторЗаявкиНаОтгрузку,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции);
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);

	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();

	Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.ТекстОшибки) Тогда
		
		ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатОбработкиЗаявки);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка);
		Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиЗаявки.Статус <> Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления 
		И РезультатОбработкиЗаявки.Статус <> Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ПараметрыОбновленияСтатуса.Вставить("ВидПродукции",               ЭлементОчереди.ВидПродукции);
		ПараметрыОбновленияСтатуса.Вставить("ОбновлениеСтатусаДокумента", Истина);
		
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ, Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатОбработкиЗаявки);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
		Реквизиты.Вставить("Описание",             "");
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
	КонецЕсли;
	
	НомерВерсии   = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
	СообщениеJSON.ЗагружатьДо   = ЭлементОчереди.Сообщение;
	
	СообщениеJSON.Организация       = ЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
		ЭлементОчереди.Операция, ЭлементОчереди.Документ, НомерВерсии);
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.СообщениеОснование  = ЭлементОчереди.Сообщение;
	СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.ВидПродукции        = ЭлементОчереди.ВидПродукции;
	
	СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование;
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ЭлементОчереди.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1';
					|en = 'Не заполнено поле ""ИНН"" для организации %1'"), ЭлементОчереди.Организация));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
	Иначе
		ТелоЗапроса = Новый Структура;
		
		ТелоЗапроса.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("shipment_number", Шапка.ИдентификаторЗаявкиНаОтгрузку);
		
		ТекстСообщенияJSON = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON = ТекстСообщенияJSON;
		
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП. СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки          = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

// Подготавливает сообщения документа Приемка товаров к передаче в сервис ИС МП.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений()).
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена.
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьСообщенийИСМП - набор записей по сообщению
Процедура ПодготовитьСообщенияПоАбстрактнойОперацииПриемкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	Шапка.ДокументОснование               КАК ДокументОснование,
	|
	|	Шапка.Операция                        КАК Операция,
	|	Шапка.НомерПервичногоДокумента        КАК НомерПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента         КАК ДатаПервичногоДокумента,
	|	Шапка.ВидПродукции                    КАК ВидПродукции,
	|	Шапка.Контрагент                      КАК Контрагент,
	|	Представление(Шапка.Контрагент)       КАК КонтрагентПредставление,
	|
	|	Шапка.ИННОтправителя                  КАК ИННОтправителя,
	|	Шапка.ДатаПриемки                     КАК ДатаПриемки,
	|	Шапка.ДатаОтгрузки                    КАК ДатаОтгрузки,
	|	Шапка.НомерЗаявкиНаОтгрузку           КАК НомерЗаявкиНаОтгрузку,
	|	Шапка.ИННОператора                    КАК ИННОператора,
	|	Шапка.Ссылка                          КАК Ссылка
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	ТекстЗапросаТовары = "ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.GTIN           КАК GTIN,
	|	Товары.ДатаПроизводства КАК ДатаПроизводства,
	|	Товары.СрокГодности   КАК СрокГодности,
	|	Товары.Цена           КАК Цена,
	|	Товары.СуммаНДС       КАК СуммаНДС,
	|	Товары.СуммаАкциза    КАК СуммаАкциза,
	|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
	|	Товары.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	&ИдентификаторПроисхожденияВЕТИССтрокой  КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|
	|	Товары.ВидДокументаСертификации   КАК ВидДокументаСертификации,
	|	Товары.НомерДокументаСертификации КАК НомерДокументаСертификации,
	|	Товары.ДатаДокументаСертификации  КАК ДатаДокументаСертификации
	|
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|";

	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(ТекстЗапросаТовары, Истина);
	СписокЗапросов.Добавить(ТекстЗапросаТовары, "Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕстьNull(ШтрихкодыУпаковок.ШтрихкодУпаковки, Неопределено)  КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ЗначениеШтрихкода                         КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковок.СрокГодности                              КАК СрокГодности,
	|	ШтрихкодыУпаковок.GTIN                                      КАК GTIN,
	|	ШтрихкодыУпаковок.КоличествоУпаковок                        КАК КоличествоУпаковок,
	|	ШтрихкодыУпаковок.Цена                                      КАК Цена,
	|	ШтрихкодыУпаковок.СуммаНДС                                  КАК СуммаНДС
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                                 ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("ИдентификаторПроисхожденияВЕТИССтрокой", "");
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или ШтрихкодыУпаковок.Количество() = 0 Тогда
		
		ОбменДаннымиИСМП.ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	ЕстьОшибки    = Ложь;
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМПОбщегоНазначения.СтатусОбработкиДокументаПоИдентификатору(
		Шапка.НомерЗаявкиНаОтгрузку,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции);
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();

	Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.ТекстОшибки) Тогда
		
		СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СообщениеJSON.ЗагружатьДо   = ЭлементОчереди.Сообщение;
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			РезультатОбработкиЗаявки.ТекстОшибки);
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если РезультатОбработкиЗаявки.Статус <> Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ПараметрыОбновленияСтатуса.Вставить("ВидПродукции",               ЭлементОчереди.ВидПродукции);
		ПараметрыОбновленияСтатуса.Вставить("ОбновлениеСтатусаДокумента", Истина);
		
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ, Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатОбработкиЗаявки);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
		Реквизиты.Вставить("Описание",             "");
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
	КонецЕсли;
	
	// Заполнение данных по маркируемым товарам
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	ПараметрыСканирования.СсылкаНаОбъект = Шапка.Ссылка;
	ПараметрыСканирования.СопоставлятьНоменклатуру = Ложь;
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	
	ОперацияПодтверждениеПриемки = Ложь;
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Приемка Тогда
		ОперацияПодтверждениеПриемки = Истина;
	КонецЕсли;
	
	НомерВерсии   = Шапка.ПоследнийНомерВерсии + 1;

	СообщениеJSON = ОбменДаннымиИСМП.ЗаполнитьСообщениеJSONКПередаче(Новый Структура, ЭлементОчереди.Операция, ЭлементОчереди);
	СообщениеJSON.ЗагружатьДо = ЭлементОчереди.Сообщение;
	СообщениеJSON.Описание    = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
		ЭлементОчереди.Операция, ЭлементОчереди.Документ, НомерВерсии);

	ЭтоПриемкаИзЕАЭСПриОСУ = (Шапка.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ);

	ДоступнаДатаПроизводства = ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступнаДатаПроизводстваПриПриемкеОтгрузке(Шапка.Операция, Шапка.ВидПродукции);
	ДоступенСрокГодности = ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(Шапка.Операция, Шапка.ВидПродукции);
	ДоступнаПодакцизнаяПродукция = ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступнаПодакцизнаяПродукцияПриПриемкеОтгрузке(Шапка.Операция, Шапка.ВидПродукции);

	Если ОперацияПодтверждениеПриемки Тогда
		
		СообщениеJSON.Операция = Шапка.Операция;

		РезультатПроверки = НовыйРезультатОбработкиВложенийПриемкиТоваровИСМП();

		Для Каждого СтрокаТаблицы Из Товары Цикл
			КоличествоУпаковок = СтрокаТаблицы.КоличествоУпаковок;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоПотребительскихУпаковок) Тогда
				КоличествоУпаковок = СтрокаТаблицы.КоличествоПотребительскихУпаковок;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КоличествоУпаковок) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.СуммаНДС = Окр(СтрокаТаблицы.СуммаНДС / КоличествоУпаковок, 2);
			Если ДоступнаПодакцизнаяПродукция Тогда
				СтрокаТаблицы.СуммаАкциза = Окр(СтрокаТаблицы.СуммаАкциза / КоличествоУпаковок, 2);
			Иначе
				СтрокаТаблицы.СуммаАкциза = 0;
			КонецЕсли;
		КонецЦикла;

		Если ЭтоПриемкаИзЕАЭСПриОСУ Тогда

			ЗаполнитьРезультатПроверкиПриемкиТоваровИСМППриОСУ(РезультатПроверки, Товары, ШтрихкодыУпаковок, ПараметрыСканирования);

		Иначе

			ДанныеШтрихкодовСписок = Новый Массив;
			Для Каждого СтрокаШтрихкода Из ШтрихкодыУпаковок Цикл
				Если ЗначениеЗаполнено(СтрокаШтрихкода.ЗначениеШтрихкода) Тогда
					ЭлементСписка = Новый Структура();
					ЭлементСписка.Вставить("Штрихкод",   СтрокаШтрихкода.ЗначениеШтрихкода);
					ЭлементСписка.Вставить("Количество", 1);
					ДанныеШтрихкодовСписок.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;

			ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
			ШтрихкодированиеОбщегоНазначенияИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
				ДанныеПоШтрихкодам, ДанныеШтрихкодовСписок, ПараметрыСканирования);
			ШтрихкодированиеОбщегоНазначенияИС.ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
			РезультатПоискаПоДаннымДокумента = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
				ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
				ПараметрыСканирования,, Истина);
			ДеревоУпаковокПоДаннымДокумента = РезультатПоискаПоДаннымДокумента.ДеревоУпаковок;

			РезультатПолученияДереваИСМП = ИнтерфейсИСМП.ДеревоУпаковок(
				ДанныеПоШтрихкодам.ДанныеКодовМаркировки, Неопределено,
				ПараметрыСканирования);

			Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДереваИСМП, ЭлементОчереди, ПараметрыОбмена) Тогда
				Возврат;
			КонецЕсли;

			Если ЗначениеЗаполнено(РезультатПолученияДереваИСМП.ТекстОшибки) Тогда
				РезультатПроверки.ТекстОшибки = РезультатПолученияДереваИСМП.ТекстОшибки;
				РезультатПроверки.ЕстьОшибки  = Истина;
			ИначеЕсли РезультатПолученияДереваИСМП.ДеревоУпаковок = Неопределено Тогда
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Дерево упаковок по данным сервиса неопределено';
													|en = 'Дерево упаковок по данным сервиса неопределено'");
				РезультатПроверки.ЕстьОшибки  = Истина;
			КонецЕсли;

			ДеревоУпаковокПоДаннымИСМП = РезультатПолученияДереваИСМП.ДеревоУпаковок;
		
			ДополнитьКолонкиДереваДаннымиОперацииЕАЭС(ДеревоУпаковокПоДаннымДокумента);
			ДополнитьКолонкиДереваДаннымиОперацииЕАЭС(ДеревоУпаковокПоДаннымИСМП);

			Если Не ЕстьОшибки
				И Не РезультатПроверки.ЕстьОшибки
				И ИнтеграцияИСМПСлужебныйКлиентСервер.ЭтоПриемкаИзСтранЕАЭС(Шапка.Операция) Тогда

				ИменаКолонокДляЗаполнения = "КодТНВЭД, Цена, СуммаНДС, ВидДокументаСертификации, НомерДокументаСертификации, ДатаДокументаСертификации";
				Если ДоступнаДатаПроизводства Тогда
					ИменаКолонокДляЗаполнения = ИменаКолонокДляЗаполнения + ", ДатаПроизводства";
				КонецЕсли;
				Если ДоступнаПодакцизнаяПродукция Тогда
					ИменаКолонокДляЗаполнения = ИменаКолонокДляЗаполнения + ", СуммаАкциза";
				КонецЕсли;
				
				ИменаПолей = Новый Массив;
				ИменаПолей.Добавить("Номенклатура");
				ИменаПолей.Добавить("Характеристика");
				ИменаПолей.Добавить("Серия");
				Если ДоступенСрокГодности Тогда
					ИменаПолей.Добавить("СрокГодности");
				КонецЕсли;
				
				Товары.Индексы.Добавить(СтрСоединить(ИменаПолей, ","));
				Товары.Индексы.Добавить("GTIN");
				ЕстьОшибки = ДополнитьДеревоУпаковокДаннымиТоваров(ДеревоУпаковокПоДаннымДокумента, Товары, ИменаКолонокДляЗаполнения, ДоступенСрокГодности, СообщениеJSON);

			КонецЕсли;

			Если Не ЕстьОшибки
				И Не РезультатПроверки.ЕстьОшибки Тогда
				РезультатПроверки = ВыявитьРасхожденияВСоставахДеревьев(
					ДеревоУпаковокПоДаннымДокумента,
					ДеревоУпаковокПоДаннымИСМП,
					ОперацияПодтверждениеПриемки);
			КонецЕсли;

		КонецЕсли;

		Если Не ЕстьОшибки Тогда
			
			Если РезультатПроверки.ЕстьОшибки Тогда
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					РезультатПроверки.ТекстОшибки);
				ЕстьОшибки = Истина;
			ИначеЕсли Не РезультатПроверки.Свойство("СоставУпаковок")
				Или РезультатПроверки.СоставУпаковок.Количество() = 0 Тогда
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						НСтр("ru = 'Нет данных для выгрузки.';
							|en = 'Нет данных для выгрузки.'"));
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;

	Иначе
		СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		Статус = Перечисления.СтатусыОбработкиПриемкиТоваровИСМП.ПодтверждениеПриемкиОшибка;
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		ПараметрыОбновленияСтатуса.Вставить("ВидПродукции",      ЭлементОчереди.ВидПродукции);
		ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции", ЭлементОчереди.Операция);
		
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ, Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		ДобавитьВПротоколОбменаОписаниеОшибки(ЭлементОчереди, СообщениеJSON.ТекстОшибки, Статус);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка);
		Реквизиты.Вставить("Описание",             СообщениеJSON.ТекстОшибки);
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);

		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	Иначе
		
		РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ЭлементОчереди.Организация);
		ВидОперации = ВидОперацииДокументаИСМП(Шапка.Операция, СообщениеJSON);
		
		ТелоЗапроса = Новый Структура;
		
		ТелоЗапроса.Вставить("document_number",          Шапка.НомерПервичногоДокумента);
		ТелоЗапроса.Вставить("document_date",            ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
		ТелоЗапроса.Вставить("transfer_date",            ИнтеграцияИС.ДатаUTC(Шапка.ДатаОтгрузки));
		ТелоЗапроса.Вставить("request_type",             "ACCEPTANCE");
		ТелоЗапроса.Вставить("release_order_number",     Шапка.НомерЗаявкиНаОтгрузку);
		ТелоЗапроса.Вставить("trade_sender_inn",         Шапка.ИННОтправителя);
		ТелоЗапроса.Вставить("trade_recipient_inn",      РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("trade_owner_inn",          "");
		
		Если Не ЭтоПриемкаИзЕАЭСПриОСУ Тогда
			ТелоЗапроса.Вставить("turnover_type", ВидОперации);
		КонецЕсли;

		Если ИнтеграцияИСМПСлужебныйКлиентСервер.ЭтоПриемкаИзСтранЕАЭС(Шапка.Операция) Тогда
			Если Не ЭтоПриемкаИзЕАЭСПриОСУ Тогда
				ТелоЗапроса.Вставить("release_method", "CROSSBORDER");
			КонецЕсли;
			ТелоЗапроса.Вставить("exporter_taxpayer_id", Шапка.ИННОтправителя); // Идентификатор экспортёра в ЕАЭС, соответствует значению "exporter_taxpayer_id"
			ТелоЗапроса.Вставить("exporter_name",        Шапка.КонтрагентПредставление);
			ТелоЗапроса.Вставить("trade_sender_inn",     Шапка.ИННОператора); // Идентификатор Оператора ЕАЭС,  соответствует значению "sender_inn"
		КонецЕсли;
		
		Если ОперацияПодтверждениеПриемки Тогда
			ТелоЗапроса.Вставить("acceptance_date", ИнтеграцияИС.ДатаUTC(Шапка.ДатаПриемки));
			ТелоЗапроса.Вставить("products",        Новый Массив);
			ТелоЗапроса.products = РезультатПроверки.СоставУпаковок;
		Иначе
			ДатаПриемки = Шапка.ДатаПриемки;
			Если Не ЗначениеЗаполнено(Шапка.ДатаПриемки) Тогда
				ДатаПриемки = ТекущаяДатаСеанса();
			КонецЕсли;
			ТелоЗапроса.Вставить("acceptance_date", ИнтеграцияИС.ДатаUTC(ДатаПриемки));
			ТелоЗапроса.Вставить("reject_all",      Истина);
		КонецЕсли;
		
		ТекстСообщенияJSON = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП. СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки          = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

// Заполнить результат проверки приемки товаров ИСМППри ОСУ.
//
// Параметры:
//  РезультатПроверки - см. НовыйРезультатОбработкиВложенийПриемкиТоваровИСМП.
//  Товары            - ТаблицаЗначений - Таблица товаров.
//  ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов.
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ЗаполнитьРезультатПроверкиПриемкиТоваровИСМППриОСУ(РезультатПроверки, Товары, ШтрихкодыУпаковок, ПараметрыСканирования)

	ШтрихкодыУпаковокКонтроль = ШтрихкодыУпаковок.Скопировать();
	ТоварыКонтроль            = Товары.Скопировать();
	ТоварыКонтроль.Свернуть("GTIN", "КоличествоУпаковок, КоличествоПотребительскихУпаковок");
	ШтрихкодыУпаковокКонтроль.Свернуть("GTIN", "КоличествоУпаковок");

	ТекстыОшибок = Новый Массив();
	Для Каждого СтрокаТовары Из ТоварыКонтроль Цикл

		КоличествоВШтрихкодах = 0;
		КоличествоВТоварах    = СтрокаТовары.КоличествоУпаковок;
		Если ЗначениеЗаполнено(СтрокаТовары.КоличествоПотребительскихУпаковок) Тогда
			КоличествоВТоварах = СтрокаТовары.КоличествоПотребительскихУпаковок;
		КонецЕсли;

		СтруктураПоискаШтрихкоды = Новый Структура();
		СтруктураПоискаШтрихкоды.Вставить("GTIN", СтрокаТовары.GTIN);
		НайденныеСтроки = ШтрихкодыУпаковокКонтроль.НайтиСтроки(СтруктураПоискаШтрихкоды);
		Если НайденныеСтроки.Количество() Тогда
			КоличествоВШтрихкодах = НайденныеСтроки[0].КоличествоУпаковок;
		КонецЕсли;

		Если КоличествоВТоварах > КоличествоВШтрихкодах Тогда
			ТекстыОшибок.Добавить(
				СтрШаблон(
					НСтр("ru = 'GTIN: %1, в исходном документе: %2, принимается: %3';
						|en = 'GTIN: %1, в исходном документе: %2, принимается: %3'"),
					СтрокаТовары.GTIN,
					КоличествоВШтрихкодах,
					КоличествоВТоварах));
		КонецЕсли;

	КонецЦикла;

	Если ТекстыОшибок.Количество() Тогда
		РезультатПроверки.ЕстьОшибки = Истина;
		ТекстыОшибок.Вставить(0,
			СтрШаблон(
				НСтр("ru = 'Невозможно принять документ, выявлены расхождения:';
					|en = 'Невозможно принять документ, выявлены расхождения:'"),
				));
		РезультатПроверки.ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
		Возврат;
	КонецЕсли;
	
	GTINПотребительскихУпаковок = Новый Соответствие();
	ШтрихкодыEAN = Новый Массив;
	Для Каждого СтрокаШтрихкода Из ТоварыКонтроль Цикл
		ШтрихкодыEAN.Добавить(РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаШтрихкода.GTIN));
		GTINПотребительскихУпаковок.Вставить(СтрокаШтрихкода.GTIN, Истина);
	КонецЦикла;
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(
		ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);
	
	СтруктураПоиска = Новый Структура("ШтрихкодEAN");
	Для Каждого СтрокаТаблицы Из Товары Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.КоличествоУпаковок) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаJSON = Новый Структура();
		СтрокаJSON.Вставить("gtin",         СтрокаТаблицы.GTIN);
		СтрокаJSON.Вставить("cis_quantity", СтрокаТаблицы.КоличествоУпаковок);
		Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоПотребительскихУпаковок) Тогда
			СтрокаJSON.cis_quantity = СтрокаТаблицы.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
			СтрокаJSON.Вставить("vsd_number", СокрЛП(СтрокаТаблицы.ИдентификаторПроисхожденияВЕТИССтрокой));
		КонецЕсли;
		
		СтруктураПоиска.ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаТаблицы.GTIN);
		СтрокиПоEAN = ДанныеПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);
		// Параметр может быть заполнен для товара с признаком переменного веса
		Если СтрокиПоEAN.Количество() = 1
			И СтрокиПоEAN[0].ПроизвольнаяЕдиницаУчета Тогда
			СтрокаJSON.Вставить("weight", СтрокаТаблицы.Количество * 1000); // Указывается общий вес всей позиции в граммах
		КонецЕсли;
		
		ДополнитьДанныеJSONДляОперацийЕАЭС(СтрокаТаблицы, СтрокаJSON);

		РезультатПроверки.СоставУпаковок.Добавить(СтрокаJSON);

	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьОчередьЗапросаСтатусаОтгрузкаТоваровИСМП(ЭлементОчередиАбстрактнойОперации, СтатусОбработки) Экспорт
	
	ПараметрыОбменаОтгрузка = ОбменДаннымиИСМП.ПараметрыОбмена(ЭлементОчередиАбстрактнойОперации.Организация);
	
	ОбменДаннымиИСМП.ПостроитьОчередьСообщений(ПараметрыОбменаОтгрузка, ЭлементОчередиАбстрактнойОперации.Документ);
	
	Для Каждого ЭлементОчереди Из ПараметрыОбменаОтгрузка.ОчередьСообщений Цикл
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
		Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
		Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
		Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
		Реквизиты.Вставить("Описание",             "");
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
			ПротоколаОбменаXML,
			Реквизиты);
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбменаОтгрузка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРезультатПолученияСообщения(РезультатыПолученияСообщения, ЭлементОчереди, ПараметрыОбмена)

	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПолученияСообщения.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПолученияСообщения.ТекстОшибки;
	КонецЕсли;

	ЭлементОчереди.ТекстОшибки = ТекстОшибки;

	СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();

	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Ложь;
	СтрокаРезультата.Передано              = Ложь;
	СтрокаРезультата.Принято               = Ложь;
	СтрокаРезультата.ОбъектИзменен         = Ложь;

	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);

	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);

КонецПроцедуры

Функция ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди, Инициализация = Ложь)
	
	СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	ПараметрыКонтроля         = ПараметрыОбмена.КонтрольКоличестваЗаказовСУЗ.Получить(СтанцияУправленияЗаказами);
	
	Если Инициализация И ПараметрыКонтроля = Неопределено Тогда
		
		ПараметрыКонтроля = НоваяСтруктураАктивныхЗаказовПоСУЗ();
		ПараметрыОбмена.КонтрольКоличестваЗаказовСУЗ.Вставить(СтанцияУправленияЗаказами, ПараметрыКонтроля);
		
	КонецЕсли;
	
	Возврат ПараметрыКонтроля;
	
КонецФункции

Функция НастройкаОбменаСУЗ(ПараметрыОбмена, ЭлементОчереди, ПроверятьДоступность = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Успешно",                        Истина);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("НастройкаОбмена",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	НастройкиПоОрганизации = ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере.Получить(ЭлементОчереди.Организация);
	
	Если НастройкиПоОрганизации <> Неопределено Тогда
		
		НастройкаБезПроизводственногоОбъекта = Неопределено;
		
		Для Каждого НастройкаОбмена Из НастройкиПоОрганизации Цикл
			
			Если ЗначениеЗаполнено(ЭлементОчереди.СтанцияУправленияЗаказами)
				И ЭлементОчереди.СтанцияУправленияЗаказами <> НастройкаОбмена.СтанцияУправленияЗаказами Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НастройкаОбмена.ПроизводственныйОбъект) Тогда
				НастройкаБезПроизводственногоОбъекта = НастройкаОбмена;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ПроизводственныйОбъект)
				Или НастройкаОбмена.ПроизводственныйОбъект = ЭлементОчереди.ПроизводственныйОбъект Тогда
				ВозвращаемоеЗначение.НастройкаОбмена = НастройкаОбмена;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВозвращаемоеЗначение.НастройкаОбмена = Неопределено
			И НастройкаБезПроизводственногоОбъекта <> Неопределено Тогда
			ВозвращаемоеЗначение.НастройкаОбмена = НастройкаБезПроизводственногоОбъекта;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.НастройкаОбмена = Неопределено Тогда
		
		ВозвращаемоеЗначение.Успешно     = Ложь;
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось определить активную настройку СУЗ для документа: %1
			           |Проверьте производственный объект, идентификатор соединения в настройках подключения к СУЗ.';
			           |en = 'Не удалось определить активную настройку СУЗ для документа: %1
			           |Проверьте производственный объект, идентификатор соединения в настройках подключения к СУЗ.'"),
			ЭлементОчереди.Документ);
		
	ИначеЕсли ПроверятьДоступность Тогда
		
		РезультатПроверкиСУЗ = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(
			ЭлементОчереди.ВидПродукции,
			ВозвращаемоеЗначение.НастройкаОбмена);
			
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПроверкиСУЗ, ЭлементОчереди, ПараметрыОбмена) Тогда
			ВозвращаемоеЗначение.Успешно                        = Ложь;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Требуется обновление ключа сессии СУЗ: %1
				           |для документа: %2';
				           |en = 'Требуется обновление ключа сессии СУЗ: %1
				           |для документа: %2'"),
				ВозвращаемоеЗначение.НастройкаОбмена.СтанцияУправленияЗаказами,
				ЭлементОчереди.Документ);
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если Не РезультатПроверкиСУЗ.Доступен
			Или ЗначениеЗаполнено(РезультатПроверкиСУЗ.ТекстОшибки) Тогда
			
			ВозвращаемоеЗначение.Успешно = Ложь;
			
			Если ЗначениеЗаполнено(РезультатПроверкиСУЗ.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = РезультатПроверкиСУЗ.ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось определить доступность СУЗ: %1 (%2)
					           |для документа: %3';
					           |en = 'Не удалось определить доступность СУЗ: %1 (%2)
					           |для документа: %3'"),
					ВозвращаемоеЗначение.НастройкаОбмена.СтанцияУправленияЗаказами,
					ЭлементОчереди.ПроизводственныйОбъект,
					ЭлементОчереди.Документ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПодписьИзСвойствПодписи(ВходящиеДанные) Экспорт

	Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		СвойстваПодписи = ВходящиеДанные;
	КонецЕсли;

	Если ТипЗнч(СвойстваПодписи) = Тип("Структура") Тогда
		Подпись = СвойстваПодписи.Подпись;
	Иначе
		Подпись = "";
	КонецЕсли;

	Возврат Подпись;

КонецФункции

Функция КонвертированныйОбщийСтатусДокумента(ИсходныйСтатус, Документ)

	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Документ);
	Возврат МенеджерОбъекта.КонвертированныйОбщийСтатус(ИсходныйСтатус);

КонецФункции

// Выполняет разбор кода маркировки для бизнес заказа.
//
// Параметры:
//   КодМаркировки            - Строка                - код маркировки.
//   СтрокаЗаказаНаЭмиссию    - СтрокаТаблицыЗначений - Строка таблицы Товары заказа на эмиссию.
//   КэшРазбораКодаМаркировки - Неопределено          - Заполняется служебными данными при первом вызове.
// Возвращаемое значение:
//    Структура из КлючИЗначение:
//     * НормализованныйКодМаркировки - Строка
//     * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов
//     * СрокГодности - Дата - Актуально только для молочной продукции
//
Функция РазобратьКодМаркировкиДляБизнесЗаказа(КодМаркировки, СтрокаЗаказаНаЭмиссию, КэшРазбораКодаМаркировки)
	
	ВидПродукции = СтрокаЗаказаНаЭмиссию.ВидПродукции;
	// Предполагаем, что:
	// 1. В коде маркировки, до "Серийного номера", отсутствуют недопустимые символы (СУЗ передает качественные коды).
	// 2. Коды маркировки однотипные и разбираются по одному шаблону.
	// Полный разбор кода маркировки выполняем один раз, при первом вызове. При последующих вызовах,
	// из кода маркировки получаем только "Серийный номер" по позиции в шаблоне.
	
	Если КэшРазбораКодаМаркировки = Неопределено Тогда
		
		Настройки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(ВидПродукции);
		
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = Истина;
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			КодМаркировки, ВидПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПользовательскиеПараметрыРазбораКодаМаркировки);
		
		Если ДанныеРазбора = Неопределено Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось разобрать код маркировки: %1
				          |%2';
				          |en = 'Не удалось разобрать код маркировки: %1
				          |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеРазбора.Детализация.ШаблонРазбораКодаМаркировки) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось определить шаблон кода маркировки: %1';
					|en = 'Не удалось определить шаблон кода маркировки: %1'"),
				КодМаркировки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеРазбора.ВидУпаковки) Тогда
			ВидУпаковкиШаблона = ИнтеграцияИСМПСлужебныйКлиентСервер.ВидУпаковкиПоШаблонуКодаМаркировки(СтрокаЗаказаНаЭмиссию.Шаблон);
			Если Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(ВидПродукции, ВидУпаковкиШаблона, ДанныеРазбора) Тогда
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не удалось определить вид упаковки в код маркировки: %1
				              |%2';
				              |en = 'Не удалось определить вид упаковки в код маркировки: %1
				              |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
				
			КонецЕсли;
			ДанныеРазбора.ВидУпаковки = ВидУпаковкиШаблона;
		КонецЕсли;
		
		СрокГодности = '00010101';
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			Если ДанныеРазбора.СоставКодаМаркировки.Свойство("ГоденДо")
				И ЗначениеЗаполнено(ДанныеРазбора.СоставКодаМаркировки.ГоденДо) Тогда
				СрокГодности = ДанныеРазбора.СоставКодаМаркировки.ГоденДо;
			КонецЕсли;
		КонецЕсли;
		
		ПозицииЭлементовКодаМаркировки = Настройки.ШаблоныИОписанияВидовПродукции[ДанныеРазбора.Детализация.ШаблонРазбораКодаМаркировки].ПозицииЭлементовКодаМаркировки;
		
		НормализованныйКодМаркировки = ДанныеРазбора.НормализованныйКодМаркировки;
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			ПараметрыНормализации        = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеРазбора,
				ВидПродукции,
				ПараметрыНормализации);
		КонецЕсли;
		
		КодМаркировкиДляНормализации = СтрЗаменить(НормализованныйКодМаркировки, ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер, "СерийныйНомер");
		
		ИмяСвойстваПозиции = "ПозицияЗначения";
		Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
			ИмяСвойстваПозиции = "ПозицияЗначенияСоСкобкой";
		КонецЕсли;
		
		КэшРазбораКодаМаркировки = Новый Структура;
		КэшРазбораКодаМаркировки.Вставить("ТипШтрихкода",                 ДанныеРазбора.ТипШтрихкода);
		КэшРазбораКодаМаркировки.Вставить("СерийныйНомерДлинаЗначения",   ПозицииЭлементовКодаМаркировки["СерийныйНомер"].ДлинаЗначения);
		КэшРазбораКодаМаркировки.Вставить("СерийныйНомерПозицияЗначения", ПозицииЭлементовКодаМаркировки["СерийныйНомер"][ИмяСвойстваПозиции]);
		КэшРазбораКодаМаркировки.Вставить("КодМаркировкиДляНормализации", КодМаркировкиДляНормализации);
		КэшРазбораКодаМаркировки.Вставить("СрокГодности",                 СрокГодности);
		РезультатРазбора = Новый Структура;
		РезультатРазбора.Вставить("ТипШтрихкода",                 ДанныеРазбора.ТипШтрихкода);
		РезультатРазбора.Вставить("НормализованныйКодМаркировки", НормализованныйКодМаркировки);
		РезультатРазбора.Вставить("СрокГодности",                 СрокГодности);
		
		Возврат РезультатРазбора;
		
	КонецЕсли;
	
	СерийныйНомер = Сред(КодМаркировки, КэшРазбораКодаМаркировки.СерийныйНомерПозицияЗначения, КэшРазбораКодаМаркировки.СерийныйНомерДлинаЗначения);
	НормализованныйКодМаркировки = СтрЗаменить(КэшРазбораКодаМаркировки.КодМаркировкиДляНормализации, "СерийныйНомер", СерийныйНомер);
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("ТипШтрихкода",                 КэшРазбораКодаМаркировки.ТипШтрихкода);
	РезультатРазбора.Вставить("НормализованныйКодМаркировки", НормализованныйКодМаркировки);
	РезультатРазбора.Вставить("СрокГодности",                 КэшРазбораКодаМаркировки.СрокГодности);
	
	Возврат РезультатРазбора;
	
КонецФункции

Функция СообщениеКПередачеJSONСогласиеОПредоставлениеИнформации(ПараметрыОбработкиДокумента, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ХешСумма", ПараметрыОбработкиДокумента.ХешСумма);
	
	СообщенияJSON = Новый Массив;
	
	НомерВерсии = Неопределено;
	Операция    = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформации;

	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = ПараметрыОбработкиДокумента.Организация;
	СообщениеJSON.Документ          = ПараметрыОбработкиДокумента.Ссылка;
	СообщениеJSON.ДокументОснование = Неопределено;
	
	СообщениеJSON.Описание = НСтр("ru = 'Обновление документа согласия о предоставлении информации в ГИС МТ (абстрактная операция)';
									|en = 'Обновление документа согласия о предоставлении информации в ГИС МТ (абстрактная операция)'");
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	СообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура ПодготовитьСообщенияПоАбстрактнойОперацииСогласиеОПредоставлениеИнформации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	Результат = СогласиеОПредоставленииИнформацииГИСМТ.ПодготовитьСообщенияПоАбстрактнойОперацииСогласиеОПредоставлениеИнформации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(Результат, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияJSON = Результат.СообщенияJSON;
	
	Если СообщенияJSON.Количество() = 0 Тогда
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП. СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = ОбменДаннымиИСМП.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПодписанияСогласия(ЭлементОчереди, ПараметрыОбмена)
	
	ЭлементОчередиОснование = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	РезультатПодписанияСогласия = СогласиеОПредоставленииИнформацииГИСМТ.РезультатПодписанияСогласия(
		ЭлементОчереди.Организация, ЭлементОчереди.Операция, ЭлементОчереди.ИдентификаторЗаявки);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПодписанияСогласия, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	НовыйСтатус = СогласиеОПредоставленииИнформацииГИСМТ.ОбновитьСтатусПослеПодписанияСогласия(
		ЭлементОчереди,
		РезультатПодписанияСогласия,
		ПараметрыОбмена);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчередиОснование, РезультатПодписанияСогласия);
		
		Если РезультатПодписанияСогласия.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатПодписанияСогласия.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
			
			СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
			СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
			СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
			
			СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
			СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
			СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
			
			СтрокаРезультата.ТекстОшибки           = РезультатПодписанияСогласия.ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Истина;
			СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
			СтрокаРезультата.ОбъектИзменен         = Ложь;
			
			СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
			СтрокаРезультата.ТекстСообщения               = РезультатПодписанияСогласия.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			КонецЕсли;
			
		Иначе
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
		КонецЕсли;
		
		Если РезультатПодписанияСогласия.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			И ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования Тогда
			
			Результат = СогласиеОПредоставленииИнформацииГИСМТ.ПодготовитьСообщенияПоАбстрактнойОперацииСогласиеОПредоставлениеИнформации(ЭлементОчереди, ПараметрыОбмена, Неопределено);
			
			Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(Результат, ЭлементОчереди, ПараметрыОбмена) Тогда
				Возврат;
			КонецЕсли;
			
			СообщенияJSON = Результат.СообщенияJSON;
			
			Если СообщенияJSON.Количество() > 0 Тогда
				
				СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
				ПодписанныеСообщенияПоОрганизациям = ОбменДаннымиИСМП. СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
				
				ОбменДаннымиИСМП.ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
				
				// Добавить подписанные сообщения в очередь сообщений
				ОбменДаннымиИСМП.ПодготовитьПодписанныеСообщенияКПередаче(
					ПодписанныеСообщенияПоОрганизациям,
					ПараметрыОбмена);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстОшибкиЖурналРегистрации = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатПодписанияСогласия.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатПодписанияСогласия.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание Тогда
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
		КонецЕсли;
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
КонецПроцедуры

#Область ЧастичноеВыбытие

Функция ПредставлениеНастройкиВариантаУчетаПоВидуПродукции(ВидПродукции, ВариантУчета) Экспорт
	
	Если ВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
		Возврат НСтр("ru = 'Применяется разупаковка с передачей в торговый зал';
					|en = 'Применяется разупаковка с передачей в торговый зал'");
	Иначе
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
			Возврат НСтр("ru = 'Поддерживается продажа духов (туалетной воды) на разлив';
						|en = 'Поддерживается продажа духов (туалетной воды) на разлив'");
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
			Возврат НСтр("ru = 'Поддерживается поштучная продажа сигар (сигарилл, ...) из упаковки';
						|en = 'Поддерживается поштучная продажа сигар (сигарилл, ...) из упаковки'");
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
			Возврат НСтр("ru = 'Поддерживается продажа пива на разлив';
						|en = 'Поддерживается продажа пива на разлив'");
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
			Возврат НСтр("ru = 'Поддерживается поштучная продажа никотиносодержащей продукции из упаковки';
						|en = 'Поддерживается поштучная продажа никотиносодержащей продукции из упаковки'");
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы2025 Тогда
			Возврат НСтр("ru = 'Поддерживается поштучная продажа биологически активных добавок из упаковки';
						|en = 'Поддерживается поштучная продажа биологически активных добавок из упаковки'");
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия20 Тогда
			Возврат НСтр("ru = 'Поддерживается поштучная продажа медицинских изделий из упаковки';
						|en = 'Поддерживается поштучная продажа медицинских изделий из упаковки'");
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации Тогда
			Возврат НСтр("ru = 'Поддерживается поштучная продажа технических средств реабилитации из упаковки';
						|en = 'Поддерживается поштучная продажа технических средств реабилитации из упаковки'");
		Иначе
			Возврат НСтр("ru = 'Поддерживается частичное выбытие';
						|en = 'Поддерживается частичное выбытие'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Заменяет Неопределено на пустую строку для работы с соответствием
Функция КлючСоответствия(КлючИлиНеопределено)
	Если КлючИлиНеопределено = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Возврат КлючИлиНеопределено;
КонецФункции

// Проверяет на соответствие табличной части "Товары" списку штрихкодов упаковок.
// 
// Параметры:
//  Товары - ТабличнаяЧасть - Табличная часть, где хранится список товаров маркируемой продукции.
//  СписокУпаковок - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - список связанных штрихкодов упаковок.
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  Структура - Таблица товары соответствует списку упаковок маркируемой продукции:
// * ДанныеСоответствуют - Булево - 
// * СтрокиСРасхождением - Массив из СтрокаТабличнойЧасти - 
Функция ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(Товары, СписокУпаковок, ПараметрыСканирования) Экспорт
	
	РезультатПроверки = Новый Структура("ДанныеСоответствуют, СтрокиСРасхождением", Истина, Новый Массив);
	
	ЕстьКолонкаКоличестваКодов = Товары.ВыгрузитьКолонки().Колонки.Найти("КоличествоПотребительскихУпаковок") <> Неопределено;
	
	ДанныеПоШтрихкодам = ЭлектронноеВзаимодействиеИСМП.Содержимое(СписокУпаковок,,ПараметрыСканирования.СозданиеНаборов);
	
	ДанныеДляПроверки = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Ключ = КлючСоответствия(СтрокаТЧ.Номенклатура);
		СоответствиеНоменклатура = ДанныеДляПроверки.Получить(Ключ);
		Если СоответствиеНоменклатура = Неопределено Тогда
			СоответствиеНоменклатура = Новый Соответствие;
			ДанныеДляПроверки.Вставить(Ключ, СоответствиеНоменклатура);
		КонецЕсли;
		
		Ключ = КлючСоответствия(СтрокаТЧ.Характеристика);
		СоответствиеХарактеристика = СоответствиеНоменклатура.Получить(Ключ);
		Если СоответствиеХарактеристика = Неопределено Тогда
			СоответствиеХарактеристика = Новый Соответствие;
			СоответствиеНоменклатура.Вставить(Ключ, СоответствиеХарактеристика);
		КонецЕсли;
		
		Ключ = КлючСоответствия(СтрокаТЧ.Серия);
		ДанныеСерия = СоответствиеХарактеристика.Получить(Ключ);
		Если ДанныеСерия = Неопределено Тогда
			ДанныеСерия = Новый Структура();
			ДанныеСерия.Вставить("НомераСтрок", Новый Массив);
			ДанныеСерия.Вставить("Количество",  0);
			ДанныеСерия.Вставить("Факт",        0);
			ДанныеСерия.Вставить("Кодов",       0);
			ДанныеСерия.Вставить("КодовФакт",   0);
		КонецЕсли;
		
		ДанныеСерия.НомераСтрок.Добавить(СтрокаТЧ.НомерСтроки);
		ДанныеСерия.Количество = ДанныеСерия.Количество + СтрокаТЧ.Количество;
		Если ЕстьКолонкаКоличестваКодов Тогда
			ДанныеСерия.Кодов = ДанныеСерия.Кодов + СтрокаТЧ.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		СоответствиеХарактеристика.Вставить(Ключ, ДанныеСерия);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ДанныеПоШтрихкодам Цикл
		
		Ключ = КлючСоответствия(СтрокаТЧ.Номенклатура);
		СоответствиеНоменклатура = ДанныеДляПроверки.Получить(Ключ);
		Если СоответствиеНоменклатура = Неопределено Тогда
			СоответствиеНоменклатура = Новый Соответствие;
			ДанныеДляПроверки.Вставить(Ключ, СоответствиеНоменклатура);
		КонецЕсли;
		
		Ключ = КлючСоответствия(СтрокаТЧ.Характеристика);
		СоответствиеХарактеристика = СоответствиеНоменклатура.Получить(Ключ);
		Если СоответствиеХарактеристика = Неопределено Тогда
			СоответствиеХарактеристика = Новый Соответствие;
			СоответствиеНоменклатура.Вставить(Ключ, СоответствиеХарактеристика);
		КонецЕсли;
		
		Ключ = КлючСоответствия(СтрокаТЧ.Серия);
		ДанныеСерия = СоответствиеХарактеристика.Получить(Ключ);
		Если ДанныеСерия = Неопределено Тогда
			ДанныеСерия = Новый Структура();
			ДанныеСерия.Вставить("НомераСтрок", Новый Массив);
			ДанныеСерия.Вставить("Количество",  0);
			ДанныеСерия.Вставить("Факт",        0);
			ДанныеСерия.Вставить("Кодов",       0);
			ДанныеСерия.Вставить("КодовФакт",   0);
		КонецЕсли;
		
		ДанныеСерия.Факт = ДанныеСерия.Факт + СтрокаТЧ.Количество;
		Если ЕстьКолонкаКоличестваКодов Тогда
			ДанныеСерия.КодовФакт = ДанныеСерия.КодовФакт + СтрокаТЧ.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		СоответствиеХарактеристика.Вставить(Ключ, ДанныеСерия);
		
	КонецЦикла;
	
	ШаблонРасхождение = Новый Структура();
	ШаблонРасхождение.Вставить("НомерСтроки", -1);
	ШаблонРасхождение.Вставить("Номенклатура");
	ШаблонРасхождение.Вставить("Необходимо");
	ШаблонРасхождение.Вставить("Указано");
	ШаблонРасхождение.Вставить("Поле");
	ШаблонРасхождение.Вставить("Представление");
	Для Каждого КлючиНоменклатура Из ДанныеДляПроверки Цикл
		Для Каждого КлючиХарактеристика Из КлючиНоменклатура.Значение Цикл
			Для Каждого КлючиСерия Из КлючиХарактеристика.Значение Цикл
				ДанныеСерии = КлючиСерия.Значение;
				Если (ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара Или ДанныеСерии.Кодов = 0)
						И ДанныеСерии.Количество <> ДанныеСерии.Факт Тогда
					РезультатПроверки.ДанныеСоответствуют = Ложь;
					СтрокаСРасхождением = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРасхождение);
					СтрокаСРасхождением.Поле = "КоличествоУпаковок";
					СтрокаСРасхождением.Представление = НСтр("ru = 'количество';
															|en = 'количество'");
					СтрокаСРасхождением.Номенклатура = КлючиНоменклатура.Ключ;
					СтрокаСРасхождением.Необходимо = ДанныеСерии.Количество;
					СтрокаСРасхождением.Указано = ДанныеСерии.Факт;
					Если ДанныеСерии.НомераСтрок.Количество() Тогда
						СтрокаСРасхождением.НомерСтроки = ДанныеСерии.НомераСтрок[0];
					КонецЕсли;
					РезультатПроверки.СтрокиСРасхождением.Добавить(СтрокаСРасхождением);
				КонецЕсли;
				Если (ЕстьКолонкаКоличестваКодов И ДанныеСерии.Кодов > 0)
						И ДанныеСерии.Кодов <> ДанныеСерии.КодовФакт Тогда
					РезультатПроверки.ДанныеСоответствуют = Ложь;
					СтрокаСРасхождением = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРасхождение);
					СтрокаСРасхождением.Поле = "КоличествоПотребительскихУпаковок";
					СтрокаСРасхождением.Представление = НСтр("ru = 'количество кодов';
															|en = 'количество кодов'");
					СтрокаСРасхождением.Номенклатура = КлючиНоменклатура.Ключ;
					СтрокаСРасхождением.Необходимо = ДанныеСерии.Кодов;
					СтрокаСРасхождением.Указано = ДанныеСерии.КодовФакт;
					Если ДанныеСерии.НомераСтрок.Количество() Тогда
						СтрокаСРасхождением.НомерСтроки = ДанныеСерии.НомераСтрок[0];
					КонецЕсли;
					РезультатПроверки.СтрокиСРасхождением.Добавить(СтрокаСРасхождением);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет на соответствие табличной части "Товары" списку штрихкодов упаковок документа Перемещение между МОД.
// 
// Параметры:
//  Объект - ДокументОбъект.ПеремещениеМеждуМОДИСМП - документ перемещения между МОД
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  Булево - если Истина, то заполнение некорректно
Функция ТаблицаТоварыПеремещениеМеждуМОДСоответствуетСпискуУпаковокМаркируемойПродукции(Объект, ПараметрыСканирования) Экспорт
	
	Отказ = Ложь;
	
	ТаблицаУпаковок = Объект.ШтрихкодыУпаковок.Выгрузить();
	ТаблицаТоваров  = Объект.Товары.Выгрузить();
	
	ТаблицаУпаковок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПеремещениеМеждуМОДИСМП"));
	ТаблицаУпаковок.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	ТаблицаУпаковок.ЗагрузитьКолонку(ТаблицаУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"), "Штрихкод");
	ТаблицаУпаковок.ЗаполнитьЗначения(ПараметрыСканирования.СсылкаНаОбъект, "Ссылка");
	
	ТаблицаТоваров.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПеремещениеМеждуМОДИСМП"));
	ТаблицаТоваров.ЗаполнитьЗначения(ПараметрыСканирования.СсылкаНаОбъект, "Ссылка");
	
	ДанныеПоШтрихкодам = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимоеИКодыОСУ(ТаблицаУпаковок, ТаблицаТоваров, ПараметрыСканирования);
	
	ИмяТаблицыТовары = "Товары";
	ИмяПоляТовары = "Номенклатура";
	ИмяПараметраУказанияСерий = "";
	
	ИмяТаблицыАкцизныеМарки = "ШтрихкодыУпаковок";
	ПолеТаблицыАкцизныеМарки = "ШтрихкодУпаковки";
	
	Для Каждого СтрокаТовары Из Объект[ИмяТаблицыТовары] Цикл
		
		ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина);
		ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
		
		КоличествоМарок = 0;
		СтрокиАкцизныхМарок = ДанныеПоШтрихкодам.НайтиСтроки(ОтборПоПолям);
		Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл
			КоличествоМарок = КоличествоМарок + СтрокаМарка.Количество;
			Если ЗначениеЗаполнено(СтрокаМарка.ТекстОшибкиИС) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрокаМарка.ТекстОшибкиИС,
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							СтрШаблон("Объект.%1",ИмяТаблицыТовары), СтрокаТовары.НомерСтроки, "Номенклатура"),,
					Отказ);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоЕдиницТоваров = 0;
		СтрокиТоваров = Объект[ИмяТаблицыТовары].НайтиСтроки(ОтборПоПолям);
		Для Каждого СтрокаТовар Из СтрокиТоваров Цикл 
			КоличествоЕдиницТоваров = КоличествоЕдиницТоваров + СтрокаТовар.Количество;
		КонецЦикла;
		
		Если КоличествоМарок <> КоличествоЕдиницТоваров И КоличествоМарок = 0 Тогда
			// все марки внутреннего перемещения списываются по ОСУ
			
			СписатьКодовАвтоОСУ = КоличествоЕдиницТоваров - КоличествоМарок;
			
			ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Ложь);
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
			
			СтрокиАкцизныхМарок = ДанныеПоШтрихкодам.НайтиСтроки(ОтборПоПолям);
			Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл
				Если СтрокаМарка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СписатьКодовАвтоОСУ = 0 Тогда
					Прервать;
				КонецЕсли;
				КоличествоСписать = СписатьКодовАвтоОСУ;
				Если КоличествоСписать > СтрокаМарка.Количество Тогда
					КоличествоСписать = СтрокаМарка.Количество;
				КонецЕсли;
				КоличествоМарок = КоличествоМарок + КоличествоСписать;
				СтрокаМарка.Количество = СтрокаМарка.Количество - КоличествоСписать;
				СписатьКодовАвтоОСУ = СписатьКодовАвтоОСУ - КоличествоСписать;
				Если ЗначениеЗаполнено(СтрокаМарка.ТекстОшибкиИС) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрокаМарка.ТекстОшибкиИС,
						Объект.Ссылка,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							СтрШаблон("Объект.%1", ИмяТаблицыТовары), СтрокаТовары.НомерСтроки, "Номенклатура"),,
						Отказ);
				КонецЕсли;
				
			КонецЦикла;
		
		ИначеЕсли КоличествоМарок <> КоличествоЕдиницТоваров Тогда
			// частично уже закрыто, ОСУ или не ОСУ, значит требуются оставшиеся марки
			
			Если ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
				ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика,, СтрокаТовары.Серия);
			Иначе
				ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика);
			КонецЕсли;
			
			Шаблон = НСтр("ru = 'Товара ""%1"" по документу - %2 %4, по кодам маркировки - %3.';
							|en = 'Товара ""%1"" по документу - %2 %4, по кодам маркировки - %3.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				ПредставлениеНоменклатуры,
				КоличествоЕдиницТоваров,
				КоличествоМарок);
				
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					СтрШаблон("Объект.%1", ИмяТаблицыТовары), СтрокаТовары.НомерСтроки, "Номенклатура"),,
				Отказ);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Процедура ОтложитьОбработкуЭлементаОчереди(ЭлементОчереди, ПараметрыОбмена, КоличествоМинут = 5)

	Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	// Если с момента последнего изменения статуса прошло более КоличествоМинут минут,
	// то отложим обработку элемента очереди до следующей попытки обмена.
	Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
		И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= КоличествоМинут * 60 Тогда
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	Иначе
		ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	КонецЕсли;

КонецПроцедуры

Функция ТребуетсяОжиданиеОбработкиКвитанции(ЭлементОчереди, ПовторныйЗапросКвитанции) Экспорт
	
	Если ПовторныйЗапросКвитанции Тогда
		// Обычное время ожидания ответа сервиса.
		МаксимальнаяДатаСледующегоЗапроса = ЭлементОчереди.ДатаСоздания + 60*5;
	Иначе
		МаксимальнаяДатаСледующегоЗапроса = ЭлементОчереди.ДатаСоздания + ВремяОжиданияОбработкиКвитанции();
	КонецЕсли;
	ТребуетсяОжидание = (МаксимальнаяДатаСледующегоЗапроса - ТекущаяУниверсальнаяДата()) > 0;
	
	Возврат ТребуетсяОжидание;
	
КонецФункции

Функция ТребуетсяОжиданиеОбработкиВыгрузки(ЭлементОчереди) Экспорт
	
	// Выгрузка доступна в течение 30 дней
	МаксимальнаяДатаСледующегоЗапроса = ЭлементОчереди.ДатаСоздания + 60 * 60 *24 * 30;
	ТребуетсяОжидание = (МаксимальнаяДатаСледующегоЗапроса - ТекущаяУниверсальнаяДата()) > 0;
	
	Возврат ТребуетсяОжидание;
	
КонецФункции

#Область ДеревоУпаковокПоДаннымОтчетаПроизводственнойЛинии

Функция ПодготовитьДеревоУпаковокВерхнегоУровняПоДокументу(Документ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДеревоУпаковок",        Неопределено);
	Результат.Вставить("ПараметрыСканирования", Неопределено);
	Результат.Вставить("ТекстОшибки",           "");
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                          КАК Номер,
	|	Шапка.Дата                           КАК Дата,
	|	Шапка.ДокументОснование              КАК ДокументОснование,
	|	Шапка.Ссылка                         КАК Документ,
	|	
	|	Шапка.Организация                    КАК Организация,
	|	Представление(Шапка.Организация)     КАК ОрганизацияПредставление,
	|
	|	Шапка.Контрагент                     КАК Контрагент,
	|	Представление(Шапка.Контрагент)      КАК КонтрагентПредставление,
	|
	|	Шапка.Ответственный                  КАК Ответственный,
	|	Представление(Шапка.Ответственный)   КАК ОтветственныйПредставление,
	|	
	|	Шапка.ВидПродукции                   КАК ВидПродукции,
	|	Шапка.Операция                       КАК Операция,
	|	Шапка.ОперацияНанесения              КАК ОперацияНанесения,
	|	// Для отчетов производственной линии
	|	Шапка.СоздаватьШтрихкодыУпаковок             КАК СоздаватьШтрихкодыУпаковок,
	|	Шапка.Номенклатура                           КАК Номенклатура,
	|	Шапка.Характеристика                         КАК Характеристика,
	|	Шапка.Серия                                  КАК Серия,
	|	Шапка.ОтчетПроизводственнойЛинии             КАК ОтчетПроизводственнойЛинии,
	|	Шапка.Ссылка                                 КАК Ссылка,
	|
	|	Шапка.ВариантВыполненияАгрегации        КАК ВариантВыполненияАгрегации,
	|	Шапка.ОперацияНанесенияТолькоДляНаборов КАК ОперацияНанесенияТолькоДляНаборов
	|
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");

	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	
	|	Ложь КАК ФорматBase64,
	|	ДанныеОтчета.НомерСтроки КАК НомерСтроки
	|	
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкода,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки,
	|	Ложь,
	|	ДанныеРегистра.КлючЗаписи
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	КешДанныхРазбора = Новый Соответствие;
	ШтрихкодыEAN     = Новый Соответствие;
	
	GTINПотребительскихУпаковок = Новый Соответствие;
	
	ПараметрыРазбора = Новый Структура;
	ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
	ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
	ПараметрыРазбора.Вставить("КодыМаркировкиНормализованы",            Ложь);
	
	ДанныеОтчета.Колонки.Добавить("НормализованноеЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("НормализованноеЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
	
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
	
	РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
		ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
	
	ИсточникДанных = Новый Массив;
	
	Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
		
		ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
		
		ИсточникДанных.Добавить(
			Новый Структура(
				"Штрихкод, ШтрихкодУпаковки",
				ИсходнаяСтрока.НормализованноеЗначениеШтрихкода, ИсходнаяСтрока.НормализованноеЗначениеШтрихкодаУпаковки));
		
		Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
			
			Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КешДанныхРазбора[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = Неопределено Тогда
				
				СтруктураДанныхРазбора = ИнициализироватьСтруктуруДанныхРазбора();
				СтруктураДанныхРазбора.ВидУпаковки               = СтрокаДанных[ИменаКолонок.ВидУпаковки];
				СтруктураДанныхРазбора.ТипШтрихкода              = СтрокаДанных[ИменаКолонок.ТипШтрихкода];
				СтруктураДанныхРазбора.EAN                       = СтрокаДанных[ИменаКолонок.EAN];
				СтруктураДанныхРазбора.GTIN                      = СтрокаДанных[ИменаКолонок.GTIN];
				СтруктураДанныхРазбора.КоличествоВложенныхЕдиниц = СтрокаДанных[ИменаКолонок.КоличествоВложенныхЕдиниц];
				СтруктураДанныхРазбора.ДанныеРазбора             = СтрокаДанных[ИменаКолонок.ДанныеРазбора];
				СтруктураДанныхРазбора.КодДляПередачиИСМП        = СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП];
				КешДанныхРазбора.Вставить(
					ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки],
					СтруктураДанныхРазбора);
				
				Если ШтрихкодыEAN[СтрокаДанных[ИменаКолонок.EAN]] = Неопределено 
					И ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.EAN]) Тогда
					ШтрихкодыEAN.Вставить(СтрокаДанных[ИменаКолонок.EAN], Истина);
				КонецЕсли;
				
				Если СтрокаДанных[ИменаКолонок.ВидУпаковки] = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					GTINПотребительскихУпаковок.Вставить(СтрокаДанных[ИменаКолонок.GTIN], Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыЗаполненияДерева = Новый Структура;
	ПараметрыЗаполненияДерева.Вставить("ШтрихкодыEAN", ШтрихкодыEAN);
	ПараметрыЗаполненияДерева.Вставить("GTINПотребительскихУпаковок", GTINПотребительскихУпаковок);

	ДанныеДерева = ДеревоУпаковокПоДаннымОтчетаПроизводственнойЛинии(Шапка, ИсточникДанных, КешДанныхРазбора, ПараметрыЗаполненияДерева, ПараметрыСканирования);

	ЗаполнитьЗначенияСвойств(Результат, ДанныеДерева);
	Результат.ПараметрыСканирования = ПараметрыСканирования;
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		
		Результат.ТекстОшибки = ДанныеДерева.ТекстОшибки;
		Возврат Результат;
		
	ИначеЕсли Результат.ДеревоУпаковок.Строки.Количество() Тогда
		
		МассивОшибок = Новый Массив;
		Если Не РассчитатьКоличествоВложенныхШтрихкодовПоДаннымДерева(Результат.ДеревоУпаковок, МассивОшибок) Тогда
			Результат.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДеревоУпаковокПоДаннымОтчетаПроизводственнойЛинии(ДанныеШапки, ИсточникДанных, КешДанныхРазбора, ПараметрыЗаполнения = Неопределено,
	ПараметрыСканирования = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ДеревоУпаковок", Неопределено);
	Результат.Вставить("ТекстОшибки",    "");

	Если ПараметрыЗаполнения = Неопределено Тогда
		ДополнитьСтрокуПоДаннымGTIN = Ложь;
	Иначе
		ДополнитьСтрокуПоДаннымGTIN = Истина;
		КешКоэффициентовПоEANGTIN   = Новый Соответствие;
		ДанныеEAN                   = Новый Массив;
		Для Каждого КлючИЗначение Из ПараметрыЗаполнения.ШтрихкодыEAN Цикл
			ДанныеEAN.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ДанныеEAN, ПараметрыСканирования, ПараметрыЗаполнения.GTINПотребительскихУпаковок);
	КонецЕсли;

	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	ДеревоУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
	ДеревоУпаковок.Колонки.Добавить("КодДляПередачиИСМП", Новый ОписаниеТипов("Строка"));

	СоответствиеСтрокДереваУпаковок = Новый Соответствие;

	ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(ИсточникДанных);

	Для Каждого СтрокаДанныхОтчета Из ИсточникДанных Цикл

		СтрокаДанных = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
		Если СтрокаДанных = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки';
									|en = 'Внутренняя ошибка разбора кодов маркировки'");
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ШтрихкодУпаковки) Тогда
			СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[СтрокаДанныхОтчета.ШтрихкодУпаковки];
			Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
				СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
			КонецЕсли;
		Иначе
			СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
		КонецЕсли;

		СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();

		СтрокаДерева.Штрихкод       = СтрокаДанныхОтчета.Штрихкод;
		СтрокаДерева.ТипШтрихкода   = СтрокаДанных.ТипШтрихкода;
		СтрокаДерева.ВидУпаковки    = СтрокаДанных.ВидУпаковки;
		СтрокаДерева.GTIN           = СтрокаДанных.GTIN;
		СтрокаДерева.EAN            = СтрокаДанных.EAN;
		СтрокаДерева.ВидПродукции   = ДанныеШапки.ВидПродукции;
		СтрокаДерева.Номенклатура   = ДанныеШапки.Номенклатура;
		СтрокаДерева.Характеристика = ДанныеШапки.Характеристика;
		СтрокаДерева.Серия          = ДанныеШапки.Серия;

		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		Иначе
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		КонецЕсли;

		СтрокаДерева.Количество               = 0;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета = Ложь;
		СтрокаДерева.НормализованныйШтрихкод  = СтрокаДанныхОтчета.Штрихкод;
		СтрокаДерева.КодДляПередачиИСМП       = СтрокаДанных.КодДляПередачиИСМП;

		Если СтрокаДанных.ДанныеРазбора <> Неопределено Тогда
			СтрокаДерева.ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
			СтрокаДанных.ДанныеРазбора.Свойство("СоставКодаМаркировки", СтрокаДерева.СоставКодаМаркировки);
			
			ШтрихкодированиеОбщегоНазначенияМОТП.РассчитатьХэшСуммуНормализации(
				СтрокаДерева,
				СтрокаДерева.ДанныеРазбора);
			
		КонецЕсли;

		Если ДополнитьСтрокуПоДаннымGTIN Тогда
			ДополнитьДанныеСтрокиДереваПоGTINEAN(СтрокаДерева, СтрокаДанных, КешКоэффициентовПоEANGTIN, ИнформацияПоШтрихкодамEAN, Результат.ТекстОшибки);
			Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;

		СоответствиеСтрокДереваУпаковок.Вставить(СтрокаДанныхОтчета.Штрихкод, СтрокаДерева);

	КонецЦикла;

	Результат.ДеревоУпаковок = ДеревоУпаковок;

	Возврат Результат;

КонецФункции

Процедура ДополнитьДанныеСтрокиДереваПоGTINEAN(СтрокаДерева, СтрокаДанных, КешКоэффициентовПоEANGTIN, ИнформацияПоШтрихкодамEAN, ТекстОшибки)

	ВидыУпаковокДляПередачиОтчетаОНанесении = ШтрихкодированиеИСКлиентСервер.ВидыУпаковокДляПередачиОтчетаОНанесении();
	КешПлановогоКоличестваПотребительскихУпаковокПоGTIN = КешКоэффициентовПоEANGTIN[СтрокаДанных.EAN];
	Если КешПлановогоКоличестваПотребительскихУпаковокПоGTIN <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДерева, КешПлановогоКоличестваПотребительскихУпаковокПоGTIN);
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ШтрихкодEAN", СтрокаДанных.EAN);

		НайденныеСтроки = ИнформацияПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 1 Тогда

			СтрокаИнформации = НайденныеСтроки[0];
			СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;
			СтрокаДерева.ПроизвольнаяЕдиницаУчета                  = СтрокаИнформации.ПроизвольнаяЕдиницаУчета;
			СтрокаДерева.ТребуетВзвешивания                        = СтрокаИнформации.ТребуетВзвешивания;

			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = 1;
				Если СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДерева.Коэффициент = СтрокаИнформации.Коэффициент;
				ИначеЕсли Не СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДерева.Коэффициент = 1;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ЗначениеЗаполнено(СтрокаДерева.GTIN)
				И СтрокаДанных.КоличествоВложенныхЕдиниц > 0 Тогда
				КоличествоПотребительскихУпаковокGTIN02 = СтрокаДанных.КоличествоВложенныхЕдиниц;
				Если КоличествоПотребительскихУпаковокGTIN02 > 0 Тогда
					СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок * КоличествоПотребительскихУпаковокGTIN02;
					СтрокаДерева.Коэффициент                               = СтрокаИнформации.Коэффициент                               * КоличествоПотребительскихУпаковокGTIN02;
				КонецЕсли;
			КонецЕсли;

			Если Не СтрокаДерева.ТребуетВзвешивания
				И ЗначениеЗаполнено(СтрокаДерева.Коэффициент) Тогда
				СтрокаДерева.Количество = СтрокаДерева.Коэффициент;
			КонецЕсли;

			СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок;

			Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДанныеПоEANGTIN = ИнициализироватьСтруктуруЗаполненияПлановогоКоличестваПотребительскихУпаковокПоGTIN();
				ЗаполнитьЗначенияСвойств(ДанныеПоEANGTIN, СтрокаДерева);
				КешКоэффициентовПоEANGTIN[СтрокаДанных.EAN] = ДанныеПоEANGTIN;
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(СтрокаДерева.ВидУпаковки) <> Неопределено Тогда

			СтруктураЗаполненияСпецифики = ИнициализироватьСтруктуруЗаполненияКоэффициентовПоОписаниюGTIN();
			СтруктураЗаполненияСпецифики.СтрокаДерева = СтрокаДерева;
			СтруктураЗаполненияСпецифики.GTIN         = СтрокаДанных.GTIN;

			ЗаполнитьЗначенияСвойств(СтруктураЗаполненияСпецифики, СтрокаДерева);

			ДанныеПоШтрихкодам = Новый Массив;
			ДанныеПоШтрихкодам.Добавить(СтруктураЗаполненияСпецифики);

			ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеПоШтрихкодам, Неопределено, Истина);
			// Коэффициент должен быть заполнен в базе для Потребительской или Групповой упаковки
			Если СтруктураЗаполненияСпецифики.ПлановоеКоличествоПотребительскихУпаковок = 0 Тогда
				ТекстОшибки =
					СтрШаблон(
						НСтр("ru = 'Не удалось определить плановое количество упаковок для %1';
							|en = 'Не удалось определить плановое количество упаковок для %1'"),
						СтрокаДанных.EAN);
			КонецЕсли;

			СтрокаДерева.ТребуетВзвешивания       = СтруктураЗаполненияСпецифики.ТребуетВзвешивания;
			СтрокаДерева.ПроизвольнаяЕдиницаУчета = СтруктураЗаполненияСпецифики.ПроизвольнаяЕдиницаУчета;

			Если Не СтрокаДерева.ТребуетВзвешивания
				И ЗначениеЗаполнено(СтрокаДерева.Коэффициент) Тогда
				СтрокаДерева.Количество = СтрокаДерева.Коэффициент;
			КонецЕсли;

			ДанныеПоEANGTIN = ИнициализироватьСтруктуруЗаполненияПлановогоКоличестваПотребительскихУпаковокПоGTIN();
			ЗаполнитьЗначенияСвойств(ДанныеПоEANGTIN, СтрокаДерева);
			КешКоэффициентовПоEANGTIN[СтрокаДанных.EAN] = ДанныеПоEANGTIN;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ИнициализироватьСтруктуруЗаполненияКоэффициентовПоОписаниюGTIN()
	
	Результат  = Новый Структура;
	
	Результат.Вставить("ОбработанСОшибками", Ложь);
	Результат.Вставить("GTIN",                      "");
	Результат.Вставить("ВидУпаковки",               Неопределено);
	Результат.Вставить("Коэффициент",               0);
	Результат.Вставить("КоличествоПотребительскихУпаковок",         0);
	Результат.Вставить("ПлановоеКоличествоПотребительскихУпаковок", Неопределено);
	Результат.Вставить("Количество",                0);
	Результат.Вставить("СоставКодаМаркировки",      Неопределено);
	Результат.Вставить("ДанныеРазбора",             Неопределено);
	Результат.Вставить("СтрокаДерева",              Неопределено);
	Результат.Вставить("Номенклатура",              Неопределено);
	Результат.Вставить("ТребуетВзвешивания",        Неопределено);
	Результат.Вставить("ПроизвольнаяЕдиницаУчета",  Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьКоличествоВложенныхШтрихкодовПоДаннымДерева(ДеревоУпаковок, МассивОшибок)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Итоги = Новый Структура("УчетноеКоличество, ПроизвольнаяЕдиницаУчета, КоличествоПотребительскихУпаковок", 0, Истина, 0);
		ЕстьОшибки = ЕстьОшибки Или РассчитатьКоличествоВложенныхШтрихкодовСтрокиДерева(СтрокаДерева, МассивОшибок, Итоги);
		
		СтрокаДерева.ПроизвольнаяЕдиницаУчета = Итоги.ПроизвольнаяЕдиницаУчета;
		Если Не Итоги.ПроизвольнаяЕдиницаУчета Тогда
			СтрокаДерева.Количество                        = Итоги.КоличествоПотребительскихУпаковок;
			СтрокаДерева.КоличествоПотребительскихУпаковок = 0;
		Иначе
			СтрокаДерева.Количество                        = Итоги.УчетноеКоличество;
			СтрокаДерева.КоличествоПотребительскихУпаковок = Итоги.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		СтрокаДерева.Строки.Очистить();
		
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция РассчитатьКоличествоВложенныхШтрихкодовСтрокиДерева(СтрокаДерева, МассивОшибок, Итоги)
	
	ЕстьОшибки = Ложь;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		// Расчет по количеству вложенных упаковок
		
		Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			
			ЕстьОшибки = ЕстьОшибки Или РассчитатьКоличествоВложенныхШтрихкодовСтрокиДерева(ВложеннаяСтрока, МассивОшибок, Итоги);
		
			ПроизвольнаяЕдиницаУчета = ВложеннаяСтрока.ПроизвольнаяЕдиницаУчета;
			
			Итоги.ПроизвольнаяЕдиницаУчета = Итоги.ПроизвольнаяЕдиницаУчета И ВложеннаяСтрока.ПроизвольнаяЕдиницаУчета;
			
			Если ВложеннаяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				Если ПроизвольнаяЕдиницаУчета Тогда
					Итоги.УчетноеКоличество = Итоги.УчетноеКоличество + ВложеннаяСтрока.Количество;
					Итоги.КоличествоПотребительскихУпаковок = Итоги.КоличествоПотребительскихУпаковок + 1;
				Иначе
					Итоги.УчетноеКоличество                 = Итоги.УчетноеКоличество                 + 1;
					Итоги.КоличествоПотребительскихУпаковок = Итоги.КоличествоПотребительскихУпаковок + 1;
				КонецЕсли;
			Иначе
				// Если не найдено подчиненных потребительских упаковок, тогда использовать количество из групповой или логистической упаковки.
				Если Итоги.КоличествоПотребительскихУпаковок = 0 Тогда
					Если ПроизвольнаяЕдиницаУчета Тогда
						Итоги.УчетноеКоличество = ВложеннаяСтрока.Количество;
						Итоги.КоличествоПотребительскихУпаковок = ВложеннаяСтрока.КоличествоПотребительскихУпаковок;
					Иначе
						Итоги.УчетноеКоличество = ВложеннаяСтрока.КоличествоПотребительскихУпаковок;
						Итоги.КоличествоПотребительскихУпаковок = ВложеннаяСтрока.КоличествоПотребительскихУпаковок;
					КонецЕсли;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли  СтрокаДерева.КоличествоПотребительскихУпаковок = 0 И СтрокаДерева.Количество = 0 Тогда
		
		МассивОшибок.Добавить(СтрШаблон(
			НСтр("ru = 'Не удалось определить плановое количество потребительских упаковок для %1.';
				|en = 'Не удалось определить плановое количество потребительских упаковок для %1.'"),
			СтрокаДерева.НормализованныйШтрихкод));
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ИнициализироватьСтруктуруЗаполненияПлановогоКоличестваПотребительскихУпаковокПоGTIN()
	
	Результат = Новый Структура;
	Результат.Вставить("Количество");
	Результат.Вставить("Коэффициент");
	Результат.Вставить("КоличествоПотребительскихУпаковок");
	Результат.Вставить("ПроизвольнаяЕдиницаУчета");
	Результат.Вставить("ТребуетВзвешивания");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчереди, ДанныеСообщения = Неопределено, ИдентификаторЗаявки = "") Экспорт
	
	Если ДанныеСообщения = Неопределено
		И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса <> Неопределено
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса, "ДанныеСообщения", Неопределено) <> Неопределено
		Тогда
		ДанныеСообщения = Новый ХранилищеЗначения(ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ДанныеСообщения);
	КонецЕсли;

	Если ДанныеСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("ДокументОснование",   ЭлементОчереди.Документ);
	ДанныеЗаписи.Вставить("Сообщение",           ЭлементОчереди.Сообщение);
	ДанныеЗаписи.Вставить("ДанныеСообщения",     ДанныеСообщения);
	ДанныеЗаписи.Вставить("Версия",              ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	ДанныеЗаписи.Вставить("ИдентификаторЗаявки", ИдентификаторЗаявки);
	
	РегистрыСведений.ПакетыКодовМаркировкиИСМП.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

// Проверяет статусы кодов по данным ИС МП перед отправкой пакетов сообщений отчета о нанесении.
// В контрольную выборку кодов включены по одному коду из каждого сообщения.
// Если после отправки отчета о нанесении данные коды сменили статус, то отчет обработан успешно.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений()).
//  ПараметрыОбмена - См. ОбменДаннымиИСМП.ПараметрыОбмена.
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьСообщенийИСМП - набор записей по сообщению
Процедура ПодготовитьСообщенияПоАбстрактнойОперацииОтчетОбИспользовании(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.РасчетСтатусаКодовМаркировки");
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МассивСтрок = Новый Массив();
	СоответствиеШтрихкодовСообщений = Новый Соответствие;
	СоответствиеОбработанныхКодов   = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ПараметрыЗапроса.КодыМаркировкиДляКонтроляСтатусов Цикл
		Для Каждого ЗначениеШтрихкода Из КлючИЗначение.Значение Цикл
			СтруктураЗначения = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
				ЗначениеШтрихкода, ЭлементОчереди.ВидПродукции);
			МассивСтрок.Добавить(СтруктураЗначения);
			СоответствиеШтрихкодовСообщений.Вставить(ЗначениеШтрихкода, КлючИЗначение.Ключ);
		КонецЦикла;
		СоответствиеОбработанныхКодов.Вставить(КлючИЗначение.Ключ, "");
	КонецЦикла;
	
	РезультатПолученияДанных = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
		МассивСтрок,
		ЭлементОчереди.Организация);
	
	Если МассивСтрок.Количество() Тогда

		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;

		ТребуетсяПовторОперации = Ложь;
		Если РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
			Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
			Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
			Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
			Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
			Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
			Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
			ТребуетсяПовторОперации = Истина;
		КонецЕсли;

		Если Не РезультатПолученияДанных.РезультатОтправкиЗапроса.ЗапросОтправлен
			Или Не РезультатПолученияДанных.РезультатОтправкиЗапроса.ОтветПолучен Тогда
			ТребуетсяПовторОперации = Истина;
		КонецЕсли;

		Если ТребуетсяПовторОперации Тогда
			// Если с момента последнего изменения статуса прошло более 5 минут,
			// то отложим обработку элемента очереди до следующей попытки обмена.
			ОтложитьОбработкуЭлементаОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	ИначеЕсли РезультатПолученияДанных.СтатусыКодовМаркировки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из РезультатПолученияДанных.СтатусыКодовМаркировки Цикл
			
			ИдентификаторСообщения = СоответствиеШтрихкодовСообщений[КлючИЗначение.Ключ.ИсходныйШтрихкод];
			КодМаркировкиДляКонтроляСтатусов = СоответствиеОбработанныхКодов[ИдентификаторСообщения];
			Если ЗначениеЗаполнено(КодМаркировкиДляКонтроляСтатусов) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЗапроса.ДопустимыеНачальныеСтатусыКодовОтчетОНанесении.Найти(КлючИЗначение.Значение.Статус) <> Неопределено Тогда
				КодМаркировкиДляКонтроляСтатусов = КлючИЗначение.Ключ.ИсходныйШтрихкод;
			Иначе
				КодМаркировкиДляКонтроляСтатусов = "";
			КонецЕсли;
			СоответствиеОбработанныхКодов.Вставить(ИдентификаторСообщения, КодМаркировкиДляКонтроляСтатусов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	
	ЭлементОчереди.ТекущийСтатус                = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
	ЭлементОчереди.ТекущийСтатусОбработки       = СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		// Для обновления параметров сообщения для контроля статусов.
		Для Каждого КлючИЗначение Из СоответствиеОбработанныхКодов Цикл
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = КлючИЗначение.Ключ;
		КонецЦикла;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого ЭлементОчередиКОбработке Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			КодМаркировки = СоответствиеОбработанныхКодов[ЭлементОчередиКОбработке.Сообщение];
			Если КодМаркировки <> Неопределено Тогда
				
				ПараметрыЗапроса = Новый Структура;
				Если ЗначениеЗаполнено(КодМаркировки) Тогда
					ПараметрыЗапроса.Вставить(
						"КодыМаркировкиДляКонтроляСтатусов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодМаркировки));
					ПараметрыЗапроса.Вставить("ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции", Истина);
				Иначе
					ПараметрыЗапроса.Вставить("ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции", Ложь);
				КонецЕсли;
				
				ОбновитьПараметрыЗапросаИсходящегоСообщенияВОчереди(ЭлементОчередиКОбработке, ПараметрыЗапроса);
				Для Каждого ЗначениеСтруктуры Из ПараметрыЗапроса Цикл
					ЭлементОчередиКОбработке.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Вставить(ЗначениеСтруктуры.Ключ, ЗначениеСтруктуры.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована Тогда
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	Иначе
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПолученияКвитанцииДокументаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатПолученияКвитанцииДокументаСУЗ");
	
	РезультатОбработкиЗаявки = ИнтерфейсСУЗ.СтатусКвитанцииДокумента_V2(
		ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	// Ошибка "6070: Документ с указанным идентификатором не найден или еще не сформирован. Проверьте корректность ввода идентификатора и повторите попытку позднее".
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 400
		И РезультатОбработкиЗаявки.КодОшибки = 6070 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	ЭтоПовторныйЗапросКвитанции = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ПовторныйЗапросКвитанции")
		И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ПовторныйЗапросКвитанции;
	
	Если Не ТребуетсяПовторОперации
		И (ЗначениеЗаполнено(РезультатОбработкиЗаявки.ИдентификаторСобытия)
			И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично)) Тогда
		
		РезультатОбработкиОтчета = ИнтерфейсСУЗ.РезультатОбработкиОтчетаПоДаннымКвитанции(
			ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.ВидПродукции, РезультатОбработкиЗаявки.ИдентификаторСобытия, НастройкаОбменаСУЗ);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиОтчета, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиОтчета);
		
		Если РезультатОбработкиОтчета.РезультатОтправкиЗапроса.КодСостояния = 400
			И РезультатОбработкиОтчета.КодОшибки = 6070 Тогда
			ТребуетсяПовторОперации = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.			
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если Не ТребуетсяОжиданиеОбработкиКвитанции(ЭлементОчереди, ЭтоПовторныйЗапросКвитанции) Тогда
			ЗавершитьОбработкуКвитанцииСтатусНеопределен(ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ОписаниеЗамера);
		ИначеЕсли ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерацииЗапросаКСУЗ(ЭлементОчереди);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчередиОснование = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
			НаборЗаписейОснования.Прочитать();
		Иначе
			НаборЗаписейОснования = Неопределено;
		КонецЕсли;
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или НаборЗаписейОснования <> Неопределено
				И Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования <> Неопределено И НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
			ЭлементОчередиОснование,
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично Тогда
			
			ТекстОшибки = РезультатОбработкиЗаявки.ТекстОшибки;
			
			// Расширенный текст ошибки по данным связанного с квитанцией документа.
			Если РезультатОбработкиОтчета <> Неопределено Тогда
				
				ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
					ЭлементОчередиОснование,
					РезультатОбработкиОтчета);
				
				ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОбработкиОтчета.ТекстОшибки;
				
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчередиОснование.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчередиОснование.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчередиОснование.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчередиОснование.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ТекстОшибки);
			
			Если Не ЗначениеЗаполнено(Реквизиты.Описание)
				И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
				Реквизиты.Описание = НСтр("ru = 'Ошибка обработки сообщения. Заявка отклонена.';
											|en = 'Ошибка обработки сообщения. Заявка отклонена.'");
			КонецЕсли;
			
			Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
				Или (ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ОперацияДокумента")
					И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОперацияДокумента =
						Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки) Тогда

				НовыйСтатус = Неопределено;

				Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ОперацияДокумента")
					И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОперацияДокумента =
						Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки Тогда

					МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);

					ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
					ПараметрыОбновленияСтатуса.Статус            = Неопределено;
					ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
					ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
					ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
					ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

					ОбработкаЗагрузкиПереданногоДокумента(
						ЭлементОчереди,
						ПараметрыОбмена,
						РезультатОбработкиЗаявки,
						ПараметрыОбновленияСтатуса);
					
					Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
						ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса, "ИспользуетсяПакетнаяПередачаСообщений", Ложь) Тогда
						ПараметрыОбновленияСтатуса.Вставить("ЕстьЗависимыеСообщения", Истина);
					КонецЕсли;
					
					НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
						ЭлементОчереди.Документ,
						РезультатОбработкиЗаявки.Операция,
						ПараметрыОбновленияСтатуса);

				КонецЕсли;

				СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
				
				СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
				СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
				
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
				СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
				
				СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
				СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				
				Если ЭтоПовторныйЗапросКвитанции Тогда
					РегистрыСведений.ПакетыКодовМаркировкиИСМП.УдалитьЗаписиПоИдентификаторуЗаявки(
						ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ИдентификаторЗаявки,
						ЭлементОчереди.Документ);
				КонецЕсли;
				
			ИначеЕсли ЭтоПовторныйЗапросКвитанции Тогда
				
				Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично
					И РезультатОбработкиОтчета <> Неопределено
					И РезультатОбработкиОтчета.КодыСОшибками.Количество() Тогда
					ДанныеСообщения = Новый ХранилищеЗначения(РезультатОбработкиОтчета.КодыСОшибками);
					ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчередиОснование, ДанныеСообщения);
				КонецЕсли;
				
			Иначе // Для повторного запроса квитанции не требуется записывать ошибку, данные о кодах уже есть в регистре.
				
				Если РезультатОбработкиОтчета <> Неопределено
					И РезультатОбработкиОтчета.КодыСОшибками.Количество() Тогда
					ДанныеСообщения = Новый ХранилищеЗначения(РезультатОбработкиОтчета.КодыСОшибками);
				Иначе
					ДанныеСообщения = Неопределено;
				КонецЕсли;
				
				ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчередиОснование, ДанныеСообщения, ЭлементОчередиОснование.ИдентификаторЗаявки);
				
			КонецЕсли;
			
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиОснование.ПротоколОбмена);
			
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
				ПротоколОбменаXML,
				Реквизиты);
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			КонецЕсли;
			
		Иначе
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				?(НаборЗаписейОснования = Неопределено, НаборЗаписей, НаборЗаписейОснования),
				Неопределено,
				Неопределено,
				Новый ХранилищеЗначения(
					ЭлементОчередиОснование.ПротоколОбмена));
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично) Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчередиОснование) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчередиОснование);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗавершитьОбработкуКвитанцииСтатусНеопределен(ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ОписаниеЗамера)
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ЭлементОчередиОснование = ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса,"ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции", Ложь);
	
	ЭтоПовторныйЗапросКвитанции = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ПовторныйЗапросКвитанции")
		И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ПовторныйЗапросКвитанции;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
			НаборЗаписейОснования.Прочитать();
		Иначе
			НаборЗаписейОснования = Неопределено;
		КонецЕсли;
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или НаборЗаписейОснования <> Неопределено
				И Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования <> Неопределено И НаборЗаписейОснования.Количество() = 0 Тогда
				
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();
				
			Иначе
				
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		Если ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции Тогда
			
			ПодготовитьКПередачеСообщениеЗапросаСтатусаКодов(ЭлементОчередиОснование, ПараметрыОбмена);
			ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчередиОснование, РезультатОбработкиЗаявки);
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				?(НаборЗаписейОснования = Неопределено, НаборЗаписей, НаборЗаписейОснования),,,
				Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена));
			
			Если Не ЭтоПовторныйЗапросКвитанции Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			КонецЕсли;
			
		Иначе
			
			РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен;
			
			ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчередиОснование, РезультатОбработкиЗаявки);
			
			Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса <> Неопределено
				И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса, "ИспользуетсяПакетнаяПередачаСообщений", Ложь) Тогда
				
				Если Не ЭтоПовторныйЗапросКвитанции Тогда
					ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчередиОснование,,ЭлементОчередиОснование.ИдентификаторЗаявки);
				КонецЕсли;
				
				ТекстыОшибок = Новый Массив;
				ТекстыОшибок.Добавить(НСтр("ru = 'Не удалось получить квитанцию по отчету о нанесении.
				                     |Запросите квитанцию повторно или обратитесь в техническую поддержку оператора ГИС МТ
				                     |для получения дополнительной информации о состоянии обработки отчета.';
				                     |en = 'Не удалось получить квитанцию по отчету о нанесении.
				                     |Запросите квитанцию повторно или обратитесь в техническую поддержку оператора ГИС МТ
				                     |для получения дополнительной информации о состоянии обработки отчета.'"));
				Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(РезультатОбработкиЗаявки.ТекстОшибки);
				КонецЕсли;
				ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
				
			Иначе // обновить статус документа списание
				
				ТекстыОшибок = Новый Массив;
				ТекстыОшибок.Добавить(НСтр("ru = 'Не удалось получить квитанцию.';
											|en = 'Не удалось получить квитанцию.'"));
				Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(РезультатОбработкиЗаявки.ТекстОшибки);
				КонецЕсли;
				ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
				
				МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);

				ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.Статус            = Неопределено;
				ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
				ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
				ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ЭлементОчереди.Документ,
					РезультатОбработкиЗаявки.Операция,
					ПараметрыОбновленияСтатуса);

				СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();

				СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
				СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
				СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

				СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
				СтрокаРезультата.ОбъектИзменен         = Ложь;

				СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
				СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;

				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчередиОснование.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
			Реквизиты.Вставить("Операция",             ЭлементОчередиОснование.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчередиОснование.Сообщение);
			Реквизиты.Вставить("Версия",               ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиОснование.ПротоколОбмена);
			ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
			
			Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
				ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			КонецЕсли;
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки квитанции отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована Тогда
		
		Если Не ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции Или Не ЭтоПовторныйЗапросКвитанции Тогда
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
		Если Не ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции И ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
		КонецЕсли;
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыЗапросаИсходящегоСообщенияВОчереди(ЭлементОчереди, ПараметрыЗапроса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
	НаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		РеквизитыИсходящегоСообщения = ЗаписьНабора.РеквизитыИсходящегоСообщения.Получить();
		Для Каждого ЗначениеСтруктуры Из ПараметрыЗапроса Цикл
			РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Вставить(ЗначениеСтруктуры.Ключ, ЗначениеСтруктуры.Значение);
		КонецЦикла;
		ЗаписьНабора.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(РеквизитыИсходящегоСообщения);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКодыМаркировкиДляПоискаВПулеПоШтрихкодамУпаковок(ЭлементОчереди, КодыМаркировки, ЭтоМолочнаяПродукция)
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковокПоДокументу(
		ЭлементОчереди.Документ, ЭлементОчереди.ВидПродукции,,Истина);

	СоответствиеГрупповыхУпаковок= Новый Соответствие;
	
	Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.ВложенныеШтрихкоды.МаркированныеТовары Цикл
		
		Если СтрокаТЧМаркированныеТовары.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
				СтрокаТЧМаркированныеТовары, КодыМаркировки, ЭтоМолочнаяПродукция);
			
		КонецЕсли;
		
		СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
		Если СтрокаРодитель <> Неопределено Тогда
			Если СоответствиеГрупповыхУпаковок[СтрокаРодитель.Штрихкод] = Неопределено Тогда
				СоответствиеГрупповыхУпаковок.Вставить(СтрокаРодитель.Штрихкод, Истина);
				Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
					Или СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
					
					ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
						СтрокаРодитель, КодыМаркировки, ЭтоМолочнаяПродукция);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОшибкиПриОбработкеВГИСМТ(ДанныеОтчета, КодыОбработанныеСОшибками, ИспользуетсяРегистрДляХраненияДанныхОтчета)

	ОписаниеОшибки = НСтр("ru = 'Ошибка при обработке в ГИС МТ: %1';
							|en = 'Ошибка при обработке в ГИС МТ: %1'");

	Если ИспользуетсяРегистрДляХраненияДанныхОтчета Тогда

		ДанныеОтчета.ЗаполнитьЗначения("", "ТекстОшибкиЗначениеШтрихкода");
		ДанныеОтчета.ЗаполнитьЗначения("", "ТекстОшибкиЗначениеШтрихкодаУпаковки");

		ДанныеОтчета.Индексы.Добавить("НормализованноеЗначениеШтрихкода");
		ДанныеОтчета.Индексы.Добавить("НормализованноеЗначениеШтрихкодаУпаковки");

		СтруктураОтбораЗначениеШтрихкода         = Новый Структура("НормализованноеЗначениеШтрихкода");
		СтруктураОтбораЗначениеШтрихкодаУпаковки = Новый Структура("НормализованноеЗначениеШтрихкодаУпаковки");
		Для Каждого НормализованныйКод Из КодыОбработанныеСОшибками Цикл

			ТекстОшибки = СтрШаблон(ОписаниеОшибки, НормализованныйКод);

			СтруктураОтбораЗначениеШтрихкода.НормализованноеЗначениеШтрихкода = НормализованныйКод;
			НайденныеСтроки = ДанныеОтчета.НайтиСтроки(СтруктураОтбораЗначениеШтрихкода);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ТекстОшибкиЗначениеШтрихкода = ТекстОшибки;
			КонецЦикла;

			СтруктураОтбораЗначениеШтрихкодаУпаковки.НормализованноеЗначениеШтрихкодаУпаковки = НормализованныйКод;
			НайденныеСтроки = ДанныеОтчета.НайтиСтроки(СтруктураОтбораЗначениеШтрихкодаУпаковки);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ТекстОшибкиЗначениеШтрихкодаУпаковки = ТекстОшибки;
			КонецЦикла;

		КонецЦикла;

	Иначе

		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл

			СтрокаОтчета.ТекстОшибкиЗначениеШтрихкода = "";
			СтрокаОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки = "";

			Если КодыОбработанныеСОшибками.Найти(СтрокаОтчета.НормализованноеЗначениеШтрихкода) <> Неопределено Тогда
				СтрокаОтчета.ТекстОшибкиЗначениеШтрихкода = СтрШаблон(ОписаниеОшибки, СтрокаОтчета.НормализованноеЗначениеШтрихкода);
			КонецЕсли;
			Если КодыОбработанныеСОшибками.Найти(СтрокаОтчета.НормализованноеЗначениеШтрихкодаУпаковки) <> Неопределено Тогда
				СтрокаОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки = СтрШаблон(ОписаниеОшибки, СтрокаОтчета.НормализованноеЗначениеШтрихкодаУпаковки);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСведенияИмпортСФТСПоДаннымАТКОтчетаПроизводственнойЛинии(ОбщийЭлементОчереди, ГруппыКодов, ДанныеШапки, ДанныеАТК, Настройки)

	НастройкиРазбораКодаМаркировки = Настройки.НастройкиРазбораКодаМаркировки;
	ПараметрыНормализацииПрочее    = Настройки.ПараметрыНормализацииПрочее;

	КоличествоВТекущейГруппе = 0;
	ТекущаяГруппа = Неопределено;

	Для Каждого СтрокаАТК Из ДанныеАТК Цикл

		Если КоличествоВТекущейГруппе >= Настройки.КоличествоКодовВСообщении Или ТекущаяГруппа = Неопределено Тогда

			ТекущаяГруппа = Новый Массив;

			ОписаниеПакета = Новый Структура;
			ОписаниеПакета.Вставить("ГруппаКодов",                ТекущаяГруппа);

			ГруппыКодов.Добавить(ОписаниеПакета);
			КоличествоВТекущейГруппе = 0;

		КонецЕсли;

		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(
			СтрокаАТК.ШтрихкодУпаковки, ОбщийЭлементОчереди.ВидПродукции, НастройкиРазбораКодаМаркировки);

		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить(
			Настройки.ИмяРеквизитаКодМаркировки,
			РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора.ДанныеРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее));
		СтрокаТЧ.Вставить("packType", "ATK");

		Если Настройки.ЗаполнятьВложенныеКоды Тогда
			СтрокаТЧ.Вставить("children", Новый Массив);

			ВложенныеКоды = СтрокаАТК.ДанныеАТК.Получить();
			Для Каждого КодМаркировки Из ВложенныеКоды Цикл

				РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(
					КодМаркировки, ОбщийЭлементОчереди.ВидПродукции, НастройкиРазбораКодаМаркировки);

				ВложеннаяСтрокаТЧ = Новый Структура;
				ВложеннаяСтрокаТЧ.Вставить(
					Настройки.ИмяРеквизитаКодМаркировки,
					РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
						РезультатРазбора.ДанныеРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее));
				ВложеннаяСтрокаТЧ.Вставить("packType", "UNIT");

				Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС Тогда
					ВложеннаяСтрокаТЧ.Вставить("vsd_number", ДанныеШапки.ИдентификаторПроисхожденияВЕТИССтрокой);
				КонецЕсли;
				Если Настройки.УказыватьДатуПроизводства Тогда
					ВложеннаяСтрокаТЧ.Вставить("production_date", Настройки.ДатаПроизводства);
				КонецЕсли;

				СтрокаТЧ.children.Добавить(ВложеннаяСтрокаТЧ);

				КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + 1;

			КонецЦикла;

		КонецЕсли;

		ТекущаяГруппа.Добавить(СтрокаТЧ);

		КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + 1;

	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьДеревоУпаковокАТКСпецификой(МаркированныеТовары, ВложенныеШтрихкоды)

	ПараметрыОтбора = Новый Структура("ШтрихкодУпаковки");
	Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТовары);
		НайденныеСтроки = ВложенныеШтрихкоды.МаркированныеТовары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() Тогда
			СтрокаТовары.СтрокаДерева.ИдентификаторПроисхожденияВЕТИС = НайденныеСтроки[0].ИдентификаторПроисхожденияВЕТИС;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКодыМаркировкиСтрокиОтчетаВТаблицуДляПоискаВПуле(СтрокаОтчета, КодыМаркировки, КешДанных, ГруппаКолонокДляПоискаВПулеКодовМаркировки)

	Для Каждого ИмяКолонкиЗначениеШтрихкода Из ГруппаКолонокДляПоискаВПулеКодовМаркировки Цикл

		НормализованныйКодМаркировки = СтрокаОтчета[ИмяКолонкиЗначениеШтрихкода];
		Если ЗначениеЗаполнено(НормализованныйКодМаркировки)
			И КешДанных[НормализованныйКодМаркировки] = Неопределено Тогда
			ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
				НормализованныйКодМаркировки, КодыМаркировки);
			КешДанных.Вставить(НормализованныйКодМаркировки, Истина);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьДанныеКОпределениюВидаУпаковки(КодМаркировки, GTIN, ДополнительныеПараметры) Экспорт

	КОпределениюВидаУпаковки = ДополнительныеПараметры.ПараметрыОбмена.КОпределениюВидаУпаковки;
	Если КОпределениюВидаУпаковки = Неопределено Тогда

		ФормаПроверки = Новый Структура;
		ФормаПроверки.Вставить("ИмяФормы", "Обработка.ПроверкаКодовМаркировкиИСМП");
		ФормаПроверки.Вставить("Организация", ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация);
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ФормаПроверки);

		// По аналогии с формой
		ПараметрыСканирования.ТолькоМаркируемаяПродукция          = Истина;
		ПараметрыСканирования.ОпределениеВидаПродукцииИСМП        = Истина;
		ПараметрыСканирования.КонтрольУникальностиКодовМаркировки = Ложь;
		ПараметрыСканирования.ДопустимыеВидыПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);

		// Не требуются лишние запросы данных
		ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП                                     = Ложь;
		ПараметрыСканирования.ВариантПолученияМРЦ                                                = "Вычисление";
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП                                     = Ложь;
		ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП          = Ложь;
		ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП = Ложь;
		ПараметрыСканирования.ТребуетсяЧастичноеВыбытие                                          = Ложь;

		КОпределениюВидаУпаковки = Новый Структура;
		КОпределениюВидаУпаковки.Вставить("GTIN",                  Новый Соответствие);
		КОпределениюВидаУпаковки.Вставить("ПараметрыСканирования", ПараметрыСканирования);

		ДополнительныеПараметры.ПараметрыОбмена.КОпределениюВидаУпаковки = КОпределениюВидаУпаковки;

	КонецЕсли;

	КОпределениюВидаУпаковки.GTIN.Вставить(GTIN, КодМаркировки);

КонецПроцедуры

Процедура УдалитьПолныеКодовМаркировкиИзПулаПослеУспешнойОбработкиСообщения(ЭлементОчереди, КодыМаркировки, ЭтоМолочнаяПродукция)
	
	Если КодыМаркировки.Количество() = 0 Тогда
		ЗаполнитьКодыМаркировкиДляПоискаВПулеПоШтрихкодамУпаковок(ЭлементОчереди, КодыМаркировки, ЭтоМолочнаяПродукция);
	КонецЕсли;
	
	РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
		КодыМаркировки, "ХешСуммаКодаМаркировки");
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ОчисткаПулаКодовМаркировкиПоОтчетуОНанесении(РезультатПоискаВПуле);
	
КонецПроцедуры

Функция ТекстОшибкиНайденыКодыНаборовГрупповыхУпаковокПриИмпортеСФТС()
	
	Результат = НСтр("ru = 'В документе найдены коды наборов или групповых упаковок.
	                       |Для ввода в оборот необходимо использовать режим ""Подготовить для декларации: Упаковки"".';
	                       |en = 'В документе найдены коды наборов или групповых упаковок.
	                       |Для ввода в оборот необходимо использовать режим ""Подготовить для декларации: Упаковки"".'");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОшибкиНайденыСформированныеАгрегатыИСМППриИмпортеСФТС()
	
	Результат = НСтр("ru = 'В документе найдены упаковки, агрегированные по данным ИС МП.
	                       |Для ввода в оборот необходимо использовать режим ""Подготовить для декларации: Упаковки"".';
	                       |en = 'В документе найдены упаковки, агрегированные по данным ИС МП.
	                       |Для ввода в оборот необходимо использовать режим ""Подготовить для декларации: Упаковки"".'");
	
	Возврат Результат;
	
КонецФункции

// Проверяет таблицу Маркированные товары:
// если у потребительской упаковки есть владелец набор или групповая упаковка, то запрашивает в сервисе статусы и состав
// наборов и групповых упаковок.
//
// Параметры:
//  МаркированныеТовары - см. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары.
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыОбмена - см. ОбменДаннымиИСМП.ПараметрыОбмена
//
// ВозвращаемоеЗначение:
//  Структура - Структура со свойствами:
//    ЕстьОшибки - Булево - есть ошибки при выполнении запроса.
//    ТекстОшибки - Строка - описание ошибки.
//    ТребуетсяОбновлениеКлючаСессии - Булево - требуется обновление ключа сессии.
//    КешСтатусовКодовМаркировки - Соответствие - соотвествие упаковок обрабатываемого документа:
//      Ключ - Строка - нормализованный код упаковки.
//      Значение - См. ИнтерфейсИСМПОбщегоНазначения.ПараметрыКодаМаркировкиМОТП
Функция ПолучитьСтатусыНаборовГрупповыхУпаковок(МаркированныеТовары, ЭлементОчереди, ПараметрыОбмена)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("КешСтатусовКодовМаркировки",     Новый Соответствие);
	
	МассивСтрок                      = Новый Массив();
	СоответствиеСтрокКодовМаркировки = Новый Соответствие;
	КешСтатусовКодовМаркировки       = Новый Соответствие;
	КешНаборовГрупповыхУпаковок      = Новый Соответствие;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	Для Каждого СтрокаТЧМаркированныеТовары Из МаркированныеТовары Цикл
		
		Если СтрокаТЧМаркированныеТовары.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаТЧМаркированныеТовары.СтрокаДерева <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Если есть владелец по данным ИСМП, то получить вложения набора для проверки состава. 
		СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
		Если СтрокаРодитель <> Неопределено
			И (СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
			И КешНаборовГрупповыхУпаковок[СтрокаРодитель.НормализованныйШтрихкод] = Неопределено Тогда
			
			РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
				СтрокаРодитель.НормализованныйШтрихкод, ЭлементОчереди.ВидПродукции);
			
			НормализованныйКодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, ЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
			
			МассивСтрок.Добавить(РезультатРазбора);
			СоответствиеСтрокКодовМаркировки.Вставить(РезультатРазбора, НормализованныйКодУпаковки);
			КешНаборовГрупповыхУпаковок[СтрокаРодитель.НормализованныйШтрихкод] = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() Тогда
		
		РезультатЗапросаДанных = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
			МассивСтрок,
			ЭлементОчереди.Организация);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат Результат;
		ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаДанных.ТекстОшибки) Тогда
			Результат.ТекстОшибки = РезультатЗапросаДанных.ТекстОшибки;
			Результат.ЕстьОшибки = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СоответствиеСтрокКодовМаркировки Цикл
			
			РезультатЗапросаПоСтроке = РезультатЗапросаДанных.СтатусыКодовМаркировки.Получить(КлючИЗначение.Ключ);
			Если РезультатЗапросаПоСтроке <> Неопределено
				И РезультатЗапросаПоСтроке.ВложенныеУпаковки <> Неопределено
				И РезультатЗапросаПоСтроке.ВложенныеУпаковки.Количество() Тогда
				КешСтатусовКодовМаркировки.Вставить(КлючИЗначение.Значение, РезультатЗапросаПоСтроке);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.КешСтатусовКодовМаркировки = КешСтатусовКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхРазбора()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидУпаковки");
	Результат.Вставить("ТипШтрихкода");
	Результат.Вставить("EAN");
	Результат.Вставить("GTIN");
	Результат.Вставить("КоличествоВложенныхЕдиниц");
	Результат.Вставить("ДанныеРазбора");
	Результат.Вставить("КодДляПередачиИСМП");
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьСообщенияПоЗапросуВыгрузкиИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	РезультатПолученияДанных = ВыгрузкиДанныхИСМП.СоздатьЗаданиеНаВыгрузку(
		ЭлементОчереди.Организация,
		ЭлементОчереди.Операция,
		ЭлементОчереди.ВидПродукции,
		ПараметрыЗапроса);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = Ложь;
	Если РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатПолученияДанных.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если Не РезультатПолученияДанных.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатПолученияДанных.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		ОтложитьОбработкуЭлементаОчереди(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатПолученияДанных);
	
	Если РезультатПолученияДанных.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или РезультатПолученияДанных.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		ИдентификаторЗадания = Неопределено;
		Если РезультатПолученияДанных.Данные <> Неопределено Тогда
			ИдентификаторЗадания = РезультатПолученияДанных.Данные.ИдентификаторЗадания;
		КонецЕсли;
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     РезультатПолученияДанных.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если РезультатПолученияДанных.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = '%1 не принят ИС МП:
					           |Текст ошибки: %2';
					           |en = '%1 не принят ИС МП:
					           |Текст ошибки: %2'"),
					ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
						ЭлементОчереди.Операция,
						ЭлементОчереди.Документ),
					РезультатПолученияДанных.ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				// При загрузке рег.заданием документ будет создан при получени результатов выгрузки.
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
				Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
				Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
				Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
				Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
				Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
				Реквизиты.Вставить("СтатусОбработки",      РезультатПолученияДанных.СтатусОбработки);
				Реквизиты.Вставить("Описание",             РезультатПолученияДанных.ТекстОшибки);
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ОбменДаннымиИСМП.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
				ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
			КонецЕсли;
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ЭлементОчереди.ТекущийСтатус                = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
			ЭлементОчереди.ТекущийСтатусОбработки       = РезультатПолученияДанных.СтатусОбработки;
			ЭлементОчереди.ИдентификаторЗаявки          = ИдентификаторЗадания;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,
				ИдентификаторЗадания,
				Неопределено,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
			
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			
			НовыйСтатус = Неопределено;
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ЭлементОчереди.Документ, ЭлементОчереди.Операция, РезультатПолученияДанных.СтатусОбработки);
			КонецЕсли;
			РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     РезультатПолученияДанных.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
			РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1 не принят ИС МП:
					       |Текст ошибки: %2';
					       |en = '%1 не принят ИС МП:
					       |Текст ошибки: %2'"),
					ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
						ЭлементОчереди.Операция,
						ЭлементОчереди.Документ),
				РезультатПолученияДанных.ТекстОшибки);
		КонецЕсли;
		
		ОбменДаннымиИСМП.ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПолученияВыгрузки(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатПолученияВыгрузки");
	
	РезультатОбработкиЗаявки = ВыгрузкиДанныхИСМП.СтатусЗаданияНаВыгрузку(
		ЭлементОчереди.Организация, ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.ВидПродукции);
	
	Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	СтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки;
	ТекстВходящегоСообщенияJSON = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
	
	Если Не ТребуетсяПовторОперации
		И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		
		РезультатПолученияИдентификаторов = ВыгрузкиДанныхИСМП.РезультирующиеИдентификаторыВыгрузок(
			ЭлементОчереди.Организация,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементОчереди.ИдентификаторЗаявки),
			ЭлементОчереди.ВидПродукции);
		
		Если ОбменДаннымиИСМП.ТребуетсяОбновлениеКлючаСессии(РезультатПолученияИдентификаторов, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		ТребуетсяПовторОперации = ОбменДаннымиИСМП.ТребуетсяПовторОперации(ЭлементОчереди, РезультатПолученияИдентификаторов);
		
		СтатусОбработки = РезультатПолученияИдентификаторов.СтатусОбработки;
		ТекстВходящегоСообщенияJSON = РезультатПолученияИдентификаторов.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		
		Если Не ТребуетсяПовторОперации
			И РезультатПолученияИдентификаторов.Данные <> Неопределено Тогда
			
			Если РезультатПолученияИдентификаторов.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				ИдентификаторВыгрузки = Неопределено;
				Для Каждого Строка Из РезультатПолученияИдентификаторов.Данные Цикл
					Если Строка.ИдентификаторЗадания = ЭлементОчереди.ИдентификаторЗаявки Тогда
						Если Строка.Доступен Тогда
							ИдентификаторВыгрузки = Строка.ИдентификаторВыгрузки;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ИдентификаторВыгрузки <> Неопределено Тогда
					
					РезультатПолученияВыгрузки = ВыгрузкиДанныхИСМП.ПолучитьРезультатыВыгрузкиИзZIP(
						ЭлементОчереди.Организация,
						ИдентификаторВыгрузки,
						ЭлементОчереди.ВидПродукции,
						ЭлементОчереди.Операция);
					
					Если РезультатПолученияВыгрузки.ОшибкаСервиса Тогда
						ТребуетсяПовторОперации = Истина;
					ИначеЕсли РезультатПолученияВыгрузки.ДанныеВыгрузки <> Неопределено Тогда
						ДанныеВыгрузки = РезультатПолученияВыгрузки.ДанныеВыгрузки;
					КонецЕсли;
					СтатусОбработки = РезультатПолученияВыгрузки.СтатусОбработки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяПовторОперации И ТребуетсяОжиданиеОбработкиВыгрузки(ЭлементОчереди) Тогда
		
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.			
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатусОбработки       = СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
				
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
			ЭлементОчереди,
			РезультатОбработкиЗаявки);
		
		МассивОшибок = Новый Массив;
		Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.ТекстОшибки) Тогда
			МассивОшибок.Добавить(РезультатОбработкиЗаявки.ТекстОшибки);
		КонецЕсли;
		
		ТекстОшибки = "";
		
		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ПараметрыЗапроса;
		ОбъектИзменен = Ложь;
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Тогда
			
			Если РезультатПолученияИдентификаторов <> Неопределено Тогда
				
				ПредставлениеПротоколаОбмена = ОбменДаннымиИСМП.ДобавитьВПротоколОбмена(
					ЭлементОчереди,
					РезультатПолученияИдентификаторов);
				
				Если ЗначениеЗаполнено(РезультатПолученияИдентификаторов.ТекстОшибки) Тогда
					МассивОшибок.Добавить(РезультатПолученияИдентификаторов.ТекстОшибки);
				КонецЕсли;
				
				Если РезультатПолученияВыгрузки <> Неопределено
					И ЗначениеЗаполнено(РезультатПолученияВыгрузки.ТекстОшибки) Тогда
					МассивОшибок.Добавить(РезультатПолученияВыгрузки.ТекстОшибки);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
				Если МассивОшибок.Количество() = 0 Тогда
					МассивОшибок.Добавить(СтрШаблон(
						Нстр("ru = 'Ошибка получения выгрузки %1 из сервиса, описание ошибки отсутствует.';
							|en = 'Ошибка получения выгрузки %1 из сервиса, описание ошибки отсутствует.'"),
						ЭлементОчереди.ИдентификаторЗаявки));
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
			
			Если ДанныеВыгрузки <> Неопределено Тогда
				
				ЭтоЗагрузкаОтклонений = Ложь;
				Если ПараметрыЗапроса.Свойство("ЭтоЗагрузкаОтклонений", ЭтоЗагрузкаОтклонений)
					И ЭтоЗагрузкаОтклонений
					И ДанныеВыгрузки.Количество() = 0 Тогда
					// Не записывать пустой файл выгрузки, обновить дату синхронизации
					
					РегистрыСведений.СинхронизацияДанныхИСМП.УстановитьДатуВыполненияСинхронизации(
						ЭлементОчереди.Организация,
						ЭлементОчереди.ВидПродукции,
						ЭлементОчереди.Операция,
						ПараметрыЗапроса.ДатаВыгрузкиКонецПериода);
					
				Иначе
					
					ПараметрыОбновленияСтатуса.Вставить("ДанныеВыгрузки", ДанныеВыгрузки);
					ОбработкаЗагрузкиПереданногоДокумента(
						ЭлементОчереди,
						ПараметрыОбмена,
						РезультатОбработкиЗаявки,
						ПараметрыОбновленияСтатуса);
					ОбъектИзменен = Истина;
				
					Реквизиты.Вставить("Операция", Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки);
					Реквизиты.Вставить("Описание", СтрШаблон(НСтр("ru = 'Результаты выгрузки %1';
																	|en = 'Результаты выгрузки %1'"), ЭлементОчереди.Операция));
					Реквизиты.Вставить("Документ", ЭлементОчереди.Документ);
					
					ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
					ХешированиеДанныхОбъект.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(ИдентификаторВыгрузки));
					ХешСуммаBase64 = Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
					
					ПараметрыФайла = Новый Структура();
					ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
					ПараметрыФайла.Вставить("ВладелецФайлов",     ЭлементОчереди.Документ);
					ПараметрыФайла.Вставить("ИмяБезРасширения",   Строка(Новый УникальныйИдентификатор));
					ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
					ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
					
					ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
						ПараметрыФайла,
						РезультатПолученияВыгрузки.АдресФайлаВоВременномХранилище,,,
						Справочники.ИСМППрисоединенныеФайлы.ПолучитьСсылку());
					
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ХешСумма = ХешСуммаBase64;
					
					ЗаполнитьЗначенияСвойств(ПрисоединенныйФайлОбъект, Реквизиты);
					
					ПрисоединенныйФайлОбъект.Записать();
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				
				// Если рег.задание получило пустую выгрузку, то документ не создается, протокол не записываем.
				Реквизиты.Вставить("Документ", ЭлементОчереди.Документ);
				Реквизиты.Вставить("Операция", ЭлементОчереди.Операция);
				Реквизиты.Вставить("Описание", ТекстОшибки);
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
				ОбменДаннымиИСМП.ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				
			КонецЕсли;
			
			ОбменДаннымиИСМП.УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбменДаннымиИСМП.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ЭлементОчереди.Документ,
				Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
				ПараметрыОбновленияСтатуса);
		Иначе
			
			НовыйСтатус = Неопределено;
			
		КонецЕсли;
		
		СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = ОбъектИзменен;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки выгрузки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки выгрузки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки выгрузки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки выгрузки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка) Тогда
		
		ОбменДаннымиИСМП.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ОбменДаннымиИСМП.ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиИСМП.УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

#КонецОбласти
