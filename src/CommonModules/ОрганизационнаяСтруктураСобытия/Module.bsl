
#Область СлужебныйПрограммныйИнтерфейс

// Процедура предназначена для обновления структуры предприятия.
//
Процедура ОбновитьСтруктуруПредприятия(УчитыватьФункциональныеОпции = Истина) Экспорт
	
	Если УчитыватьФункциональныеОпции
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		И Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Получить() Тогда
		// Соответствие не установлено - не нужно создавать элемент-«отражение».
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.СтруктураПредприятия");
	Блокировка.Добавить("Справочник.Организации");
	Блокировка.Добавить("Справочник.ПодразделенияОрганизаций");
	
	НачатьТранзакцию();

	Попытка
		Блокировка.Заблокировать();
		ОбновитьСтруктуруПредприятияПоТаблицеИсточника(Справочники.Организации.ПустаяСсылка());
		ОбновитьСтруктуруПредприятияПоТаблицеИсточника(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		ОрганизационнаяСтруктура.ОбновитьМестаПозицийШтатногоРасписанияПоСтруктуреЮридическихЛиц();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Организационная структура.Полное обновление структуры предприятия по структуре юридических лиц';
				|en = 'Organizational structure. Full update of the enterprise structure based on legal entities structure'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик подписки на событие СтруктураПредприятияПередЗаписью.
// Выполняется перед записью элемента структуры предприятия для синхронизации пометки удаления.
//
Процедура СтруктураПредприятияПередЗаписью(ПодразделениеПредприятияОбъект, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ПодразделениеПредприятияОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// При записи нужно синхронизировать с объектом структуры-источника пометку удаления.
	Если Не ЗначениеЗаполнено(ПодразделениеПредприятияОбъект.Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникОбъект = ПодразделениеПредприятияОбъект.Источник.ПолучитьОбъект();
	ИсточникОбъект.ДополнительныеСвойства.Вставить("УстановкаПометкиУдаленияСтруктурыПредприятия", Истина);
	ИсточникОбъект.УстановитьПометкуУдаления(ПодразделениеПредприятияОбъект.ПометкаУдаления);
	
КонецПроцедуры

// Обработчик подписки на событие АктуализироватьСтруктуруПредприятия.
// Выполняется при записи подразделения или организации для актуализации структуры предприятия.
//
Процедура ОбновитьЭлементСтруктурыПредприятия(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("УстановкаПометкиУдаленияСтруктурыПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		И Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Получить() Тогда
		// Соответствие не установлено - не нужно создавать элемент-«отражение».
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если Источник.Ссылка = УправленческаяОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().Владельцы.Количество() > 0 
		И Источник.Владелец = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.СтруктураПредприятия");
	ЭлементБлокировки = Блокировка.Добавить(Источник.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Источник.Ссылка);
	
	Попытка
		Блокировка.Заблокировать();
		ТаблицаИзмененных = ИзмененныеЭлементыИсточника(Источник.Ссылка);
		Для Каждого СтрокаИсточника Из ТаблицаИзмененных Цикл
			Если ЗначениеЗаполнено(СтрокаИсточника.Ссылка) Тогда
				ПодразделениеОбъект = СтрокаИсточника.Ссылка.ПолучитьОбъект();
			Иначе
				ПодразделениеОбъект = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, СтрокаИсточника, , "Код");
			ПодразделениеОбъект.КодИсточника = СтрокаИсточника.Код;
			ЗаполнитьКодПодразделенияПоИсточнику(ПодразделениеОбъект, СтрокаИсточника);
			ПодразделениеОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПоСтруктуреИсточнику", Истина);
			ПодразделениеОбъект.Записать();
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Организационная структура.Обновление элемента структуры предприятия по структуре юридических лиц';
				|en = 'Organizational structure. Update of the enterprise structure element based on legal entities structure'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , Источник.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Подготовка обновления регистра "ПодчиненностьСтруктурныхЕдиниц" при изменениях в справочнике СтруктураПредприятия.
// Обработчик события ПередЗаписью() этого справочника.
//
Процедура ПодготовитьОбновлениеПодчиненностиСтруктурныхЕдиниц(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНоваяСтруктурнаяЕдиница", Истина);
	Иначе
		
		ТекущийРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Родитель");
		Если ТекущийРодитель <> Источник.Родитель Тогда
			Источник.ДополнительныеСвойства.Вставить("СменаРодителя", Истина);
			Источник.ДополнительныеСвойства.Вставить("ПредыдущийРодитель", ТекущийРодитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновление регистра "ПодчиненностьСтруктурныхЕдиниц" при изменениях в справочнике СтруктураПредприятия.
// Обработчик события ПриЗаписи() этого справочника.
//
Процедура ОбновитьПодчиненностьСтруктурныхЕдиниц(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоНоваяСтруктурнаяЕдиница = Источник.ДополнительныеСвойства.Свойство("ЭтоНоваяСтруктурнаяЕдиница");
	СменаРодителя = Источник.ДополнительныеСвойства.Свойство("СменаРодителя");
	
	СписокСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
	
	Если НЕ ЭтоНоваяСтруктурнаяЕдиница И НЕ СменаРодителя Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ПодчиненностьСтруктурныхЕдиниц.ОбновитьПодчиненностьСтруктурныхЕдиниц(СписокСтруктурныхЕдиниц);
	
	Если СменаРодителя Тогда
		
		ПредыдущийРодитель = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ПредыдущийРодитель");
		Если ПредыдущийРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийРодитель = Источник.Родитель;
		
		РегистрыСведений.ПодчиненностьСтруктурныхЕдиниц.ОбновитьПодчиненностьСтруктурныхЕдиницПриСменеРодителя(
			Источник.Ссылка, ПредыдущийРодитель, ТекущийРодитель);
			
	КонецЕсли;
		
КонецПроцедуры

// Обновляет состояние структуры предприятия, используя все элементы таблицы источника.
//
Процедура ОбновитьСтруктуруПредприятияПоТаблицеИсточника(ИсточникПустаяСсылка)

	ТаблицаИзмененных = ИзмененныеЭлементыИсточника(ИсточникПустаяСсылка);
	
	Если ТаблицаИзмененных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отдельным запросом получаем иерархию элементов источника 
	// для корректной расстановки связей подразделений структуры предприятия.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИсточника.Ссылка КАК Источник,
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	#СтруктураИсточник КАК ТаблицаИсточника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО (СтруктураПредприятия.Источник = ТаблицаИсточника.Ссылка)
	|ГДЕ
	|	ТаблицаИсточника.Ссылка В(&Источник)
	|ИТОГИ ПО
	|	Источник ИЕРАРХИЯ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтруктураИсточник", ИсточникПустаяСсылка.Метаданные().ПолноеИмя());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Источник", ТаблицаИзмененных.ВыгрузитьКолонку("Источник"));
	
	РезультатИерархии = Запрос.Выполнить();
	
	СоответствиеПодразделений = Новый Соответствие;
	ОбновитьУровеньИерархииСтруктурыПредприятия(РезультатИерархии, ТаблицаИзмененных, СоответствиеПодразделений);
	
КонецПроцедуры

Процедура ОбновитьУровеньИерархииСтруктурыПредприятия(ВыборкаПоГруппировке, ТаблицаИзмененных, СоответствиеПодразделений)
	
	Выборка = ВыборкаПоГруппировке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		// Пропускаем, если источник уже обрабатывали на других уровнях группировки.
		Если ЗначениеЗаполнено(Выборка.Источник) 
			И СоответствиеПодразделений[Выборка.Источник] = Неопределено Тогда
			НайденныеСтроки = ТаблицаИзмененных.НайтиСтроки(Новый Структура("Источник", Выборка.Источник));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаИсточника = НайденныеСтроки[0];
				Если ЗначениеЗаполнено(СтрокаИсточника.Ссылка) Тогда
					ПодразделениеОбъект = СтрокаИсточника.Ссылка.ПолучитьОбъект();
				Иначе
					ПодразделениеОбъект = Справочники.СтруктураПредприятия.СоздатьЭлемент();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, СтрокаИсточника, , "Код");
				ПодразделениеОбъект.КодИсточника = СтрокаИсточника.Код;
				Родитель = СоответствиеПодразделений[СтрокаИсточника.ИсточникРодитель];
				Если Родитель <> Неопределено И ПодразделениеОбъект.Родитель <> Родитель Тогда
					ПодразделениеОбъект.Родитель = Родитель;
				КонецЕсли;
				ПодразделениеОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПоСтруктуреИсточнику", Истина);
				ЗаполнитьКодПодразделенияПоИсточнику(ПодразделениеОбъект, СтрокаИсточника);
				Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПодразделениеОбъект);
				Иначе
					ПодразделениеОбъект.Записать();
				КонецЕсли;
				СоответствиеПодразделений.Вставить(Выборка.Источник, ПодразделениеОбъект.Ссылка);
			КонецЕсли;
		КонецЕсли;
		ОбновитьУровеньИерархииСтруктурыПредприятия(Выборка, ТаблицаИзмененных, СоответствиеПодразделений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКодПодразделенияПоИсточнику(ПодразделениеОбъект, СведенияИсточника)
	
	// У организации нет кода, получаем очередной код по порядку.
	Если СведенияИсточника.Код = Неопределено И ПодразделениеОбъект.Ссылка.Пустая() Тогда
		УстановитьНовыйКод(ПодразделениеОбъект);
		Возврат;
	КонецЕсли;
	
	// Код подразделения составляем, добавляя в качестве префикса код организации-родителя.
	Если ТипЗнч(СведенияИсточника.Источник) <> Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	// Запросом находим код подразделения структуры предприятия, 
	// соответствующего организации подразделения.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", СведенияИсточника.Источник);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделениеВерхнегоУровня.Ссылка,
		|	ПодразделениеВерхнегоУровня.Код
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК ПодразделениеВерхнегоУровня
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|			ПО (Организации.Ссылка = ПодразделенияОрганизаций.Владелец)
		|		ПО (Организации.Ссылка = ПодразделениеВерхнегоУровня.Источник)
		|			И (ПодразделенияОрганизаций.Ссылка = &Источник)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНовыйКод(ПодразделениеОбъект, СведенияИсточника.Код, Выборка.Код);
	
КонецПроцедуры

Процедура УстановитьНовыйКод(ПодразделениеОбъект, КодИсточника = Неопределено, КодРодителя = Неопределено)

	ДлинаКода = Метаданные.Справочники.СтруктураПредприятия.ДлинаКода;
	
	НеудачныеПопытки = Новый Массив;
	
	Префикс = Лев(КодРодителя, ДлинаПрефиксаРодителя());
	Для ДлинаСередины = 0 По ДлинаКода - ДлинаПрефиксаРодителя() Цикл
		Если КодИсточника <> Неопределено Тогда
			ДлинаПостфикса = ДлинаКода - ДлинаПрефиксаРодителя() - ДлинаСередины;
			Постфикс = Прав(СокрЛП(КодИсточника), ДлинаПостфикса);
			Постфикс = Нули(Макс(ДлинаПостфикса - СтрДлина(Постфикс), 0)) + Постфикс;
		Иначе
			Постфикс = Нули(ДлинаКода - ДлинаПрефиксаРодителя() - ДлинаСередины);
		КонецЕсли;
		Для Попыток = 1 По ?(ДлинаСередины = 0 И ЗначениеЗаполнено(Префикс), 1, 5) Цикл
			ЧастиКода = Новый Массив;
			Если Не ЗначениеЗаполнено(Префикс) Или (ДлинаСередины = 0 И Не ЗначениеЗаполнено(КодРодителя)) Тогда
				Префикс = СлучайныеСимволы(ДлинаПрефиксаРодителя(), Истина);
			КонецЕсли;
			ЧастиКода.Добавить(Префикс);
			Если ДлинаСередины > 0 Тогда
				ЧастиКода.Добавить(СлучайныеСимволы(ДлинаСередины));
			КонецЕсли;
			ЧастиКода.Добавить(Постфикс);
			Код = СтрСоединить(ЧастиКода);
			Если Не КодЗанят(Код, ПодразделениеОбъект.Ссылка) Тогда
				ПодразделениеОбъект.Код = Код;
				Возврат;
			КонецЕсли;
			НеудачныеПопытки.Добавить(
				СтрШаблон(
					НСтр("ru = 'Попытка %1.%2: код «%3» (%4..%5), источник «%6», родитель «%7»';
						|en = 'Attempt %1.%2: code ""%3"" (%4..%5), source ""%6"", parent ""%7""'", 
						ОбщегоНазначения.КодОсновногоЯзыка()), 
					ДлинаСередины, Попыток, Код, Префикс, Постфикс, ПредставлениеЗначения(КодИсточника), ПредставлениеЗначения(КодРодителя)));
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Организационная структура.Установка нового кода подразделения структуры предприятия';
			|en = 'Organizational structure.Setting a new enterprise structure business unit code'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , СтрСоединить(НеудачныеПопытки, Символы.ПС));
		
	ВызватьИсключение НСтр("ru = 'Не удалось установить новый код элементу структуры предприятия.
						   |Пожалуйста, повторите попытку.';
						   |en = 'Cannot set new code to enterprise structure element.
						   |Please try again.'");
	
КонецПроцедуры

Функция ДлинаПрефиксаРодителя()
	Возврат 4;
КонецФункции

Функция Нули(Длина)
	Возврат СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("0", Длина);
КонецФункции

Функция СлучайныеСимволы(Длина, ТолькоЦифры = Ложь)
	
	СлучайныеСимволы = Новый Массив;
	
	Интервалы = Новый Массив;
	Интервалы.Добавить(Интервал(48, 57)); // 48..57 цифры от 0 до 9
	Если Не ТолькоЦифры Тогда
		Интервалы.Добавить(Интервал(65, 90)); // 65..90 латиница заглавные
	КонецЕсли;
	
	Генератор = Новый ГенераторСлучайныхЧисел();
	Для Номер = 1 По Длина Цикл
		Интервал = Интервалы[Генератор.СлучайноеЧисло(0, Интервалы.ВГраница())];
		СлучайныеСимволы.Добавить(Символ(Генератор.СлучайноеЧисло(Интервал.Начало, Интервал.Окончание))); 
	КонецЦикла;
	
	Возврат СтрСоединить(СлучайныеСимволы);
	
КонецФункции

Функция Интервал(Начало, Окончание)
	Возврат Новый Структура("Начало, Окончание", Начало, Окончание);
КонецФункции

Функция ПредставлениеЗначения(Значение)
	
	Если Значение = Неопределено Тогда
		Возврат НСтр("ru = 'Неопределено';
					|en = 'Undefined'");
	КонецЕсли;
	
	Возврат Строка(Значение);
	
КонецФункции

Функция КодЗанят(Код, ИсключаяПодразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("ТекущееПодразделение", ИсключаяПодразделение);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Код = &Код
		|	И СтруктураПредприятия.Ссылка <> &ТекущееПодразделение";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция предназначена для получения данных по таблице источника структуры предприятия.
//
// Параметры:
//	- Источник - ссылка на элемент структуры источника или пустая ссылка 
//				для определения метаданных.
//
// Возвращаемое значение - таблица значений с изменившимися элементами структуры источника и их данными.
//
Функция ИзмененныеЭлементыИсточника(Источник)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИсточника.Ссылка КАК Источник,
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	ТаблицаИсточника.ПометкаУдаления КАК ПометкаУдаления,
		|	ТаблицаИсточника.Код КАК Код,
		|	ТаблицаИсточника.Наименование КАК Наименование,
		|	ТаблицаИсточника.Родитель КАК ИсточникРодитель,
		|	ЕСТЬNULL(СтруктураПредприятияРодитель.Ссылка, СтруктураПредприятияВладелец.Ссылка) КАК Родитель,
		|	ИСТИНА КАК СоответствуетСтруктуреЮридическихЛиц
		|ИЗ
		|	#СтруктураИсточник КАК ТаблицаИсточника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = ТаблицаИсточника.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияРодитель
		|		ПО (СтруктураПредприятияРодитель.Источник = ТаблицаИсточника.Родитель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияВладелец
		|		ПО (СтруктураПредприятияВладелец.Источник = ТаблицаИсточника.Владелец)
		|ГДЕ
		|	(ТаблицаИсточника.Ссылка = &Источник
		|			ИЛИ &ПоВсемЭлементамИсточника)
		|	И ТаблицаИсточника.Предопределенный = ЛОЖЬ
		|	И &НЕВладелецПредопределенный
		|	И (СтруктураПредприятия.Ссылка ЕСТЬ NULL
		|			ИЛИ СтруктураПредприятия.ПометкаУдаления <> ТаблицаИсточника.ПометкаУдаления
		|			ИЛИ СтруктураПредприятия.Наименование <> ТаблицаИсточника.Наименование
		|			ИЛИ &КодИзменился
		|			ИЛИ &РодительИзменился)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтруктураИсточник", Источник.Метаданные().ПолноеИмя());
	
	Если Источник.Метаданные().ДлинаКода = 0 Тогда
		// Если нет кода - заменяем обращение к полю Код.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ТаблицаИсточника.Код КАК Код",
		"НЕОПРЕДЕЛЕНО КАК Код");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&КодИзменился",
		"СтруктураПредприятия.КодИсточника <> ТаблицаИсточника.Код");
	КонецЕсли;
	
	Если Источник.Метаданные().Владельцы.Количество() = 0 Тогда
		// Если справочник не подчинен владельцу, то изменяем заполнение поля Родитель.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ЕСТЬNULL(СтруктураПредприятияРодитель.Ссылка, СтруктураПредприятияВладелец.Ссылка)",
		"СтруктураПредприятияРодитель.Ссылка");
		// ..И исключаем соединение по владельцу.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияВладелец
		|		ПО (СтруктураПредприятияВладелец.Источник = ТаблицаИсточника.Владелец)",
		"");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&НЕВладелецПредопределенный",
		"ТаблицаИсточника.Владелец.Предопределенный = ЛОЖЬ");
	КонецЕсли;
	
	Если Не Источник.Метаданные().Иерархический Тогда
		// Если справочник не иерархический, то исключаем использование родителя.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтруктураПредприятияРодитель.Ссылка", "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияРодитель
		|		ПО (СтруктураПредприятияРодитель.Источник = ТаблицаИсточника.Родитель)",
		"");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточника.Родитель", "НЕОПРЕДЕЛЕНО");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&РодительИзменился", 
			"СтруктураПредприятия.Родитель <> ЕСТЬNULL(СтруктураПредприятияРодитель.Ссылка, СтруктураПредприятияВладелец.Ссылка)");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КодИзменился", Ложь);
	Запрос.УстановитьПараметр("РодительИзменился", Ложь);
	Запрос.УстановитьПараметр("НЕВладелецПредопределенный", Истина);
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("ПоВсемЭлементамИсточника", Не ЗначениеЗаполнено(Источник));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти
