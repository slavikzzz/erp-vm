#Область ПрограммныйИнтерфейс

// Создает хранилище со стандартной структурой
// элемента бюджетного отчета на основании ссылки или строки
// вида бюджета.
//
// Параметры:
//  Элемент  - ДанныеФормыЭлементДерева, СправочникСсылка.ЭлементыФинансовыхОтчетов - помещаемое значение
//  АдресХранилища - УникальныйИдентификатор - УИД формы вида бюджета.
//
// Возвращаемое значение:
//  Строка - Адрес в хранилище
//
Функция ПоместитьЭлементВХранилище(Элемент, АдресХранилища) Экспорт
	
	ПеременныеПериодов = ПеременныеПериодовБюджетирования(); // см. ПеременныеПериодовБюджетирования
	
	// Если формируем хранилище на основании строки - 
	// тогда формируем по элементу, если есть, иначе по самой строке.
	Если ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева")
		ИЛИ ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементКоллекции")
		ИЛИ ТипЗнч(Элемент) = Тип("СтрокаДереваЗначений") Тогда
		
		Если ЗначениеЗаполнено(Элемент.ЭлементОтчета) Тогда
			
			Возврат ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Элемент.ЭлементОтчета, АдресХранилища);
			
		Иначе
			
			Префикс = "ДополнительныйРеквизит_";
			
			СтруктураЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
			ЗаполнитьЗначенияСвойств(СтруктураЭлемента, Элемент);
			
			Если СтруктураЭлемента.ВидЭлемента = ВидЭлемента("СтатьяБюджетов")
				ИЛИ СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов") Тогда
				
				СтруктураЭлемента.Вставить(Префикс + "СтатьяБюджетов", Элемент.СтатьяПоказательТипИзмерения);
				СтруктураЭлемента.Вставить(Префикс + "ВыводимыеПоказатели", Элемент.ВыводимыеПоказатели);
				
				СтруктураЭлемента.Вставить(Префикс + "ПериодичностьСмещения", ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
				СтруктураЭлемента.Вставить(Префикс + "НижняяГраницаДанных", ПеременныеПериодов.НачалоПериодаДанных.Имя);
				СтруктураЭлемента.Вставить(Префикс + "ВерхняяГраницаДанных", ПеременныеПериодов.КонецПериодаДанных.Имя);
				СтруктураЭлемента.Вставить(Префикс + "НачалоПериодаГруппировки", ПеременныеПериодов.ПериодГруппировки.Имя);
				СтруктураЭлемента.Вставить(Префикс + "КонецПериодаГруппировки", ПеременныеПериодов.ПериодГруппировки.Имя);
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ПоказательБюджетов")
				ИЛИ СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов") Тогда
				
				СтруктураЭлемента.Вставить(Префикс + "ПоказательБюджетов", Элемент.СтатьяПоказательТипИзмерения);
				СтруктураЭлемента.Вставить(Префикс + "ВыводимыеПоказатели", Элемент.ВыводимыеПоказатели);
				СтруктураЭлемента.Вставить(Префикс + "ТипЗначенияПоказателя", Элемент.ТипЗначенияПоказателя);
				
				СтруктураЭлемента.Вставить(Префикс + "ПериодичностьСмещения", ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
				СтруктураЭлемента.Вставить(Префикс + "НижняяГраницаДанных", ПеременныеПериодов.НачалоПериодаДанных.Имя);
				СтруктураЭлемента.Вставить(Префикс + "ВерхняяГраницаДанных", ПеременныеПериодов.КонецПериодаДанных.Имя);
				СтруктураЭлемента.Вставить(Префикс + "НачалоПериодаГруппировки", ПеременныеПериодов.ПериодГруппировки.Имя);
				СтруктураЭлемента.Вставить(Префикс + "КонецПериодаГруппировки", ПеременныеПериодов.ПериодГруппировки.Имя);
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("НефинансовыйПоказатель") Тогда
				
				СтруктураЭлемента.Вставить(Префикс + "НефинансовыйПоказатель", Элемент.СтатьяПоказательТипИзмерения);
				СтруктураЭлемента.Вставить(Префикс + "ПериодичностьСмещения", ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("РедактируемоеЗначение") Тогда
				
				СтруктураЭлемента.Вставить(Префикс + "ТипРедактируемогоЗначения", "Число");
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе") Тогда
				
				СтруктураЭлемента.Вставить(Префикс + "ФормулаПоГруппе", ПредопределенноеЗначение("Перечисление.ВидыФормулБюджетирования.Сумма"));
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("Группа") Тогда
				
				СтруктураЭлемента.Вставить(Префикс + "ВыводитьЗаголовокЭлемента", Истина);
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
				
				СтруктураЭлемента.Вставить(Префикс + "Формула", "");
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("Измерение") Тогда
				
				ТипИзмерения = ОпределитьТипИзмеренияПоТипуЗначения(Элемент.СтатьяПоказательТипИзмерения, Элемент);
				СтруктураЭлемента.Вставить(Префикс + "ТипИзмерения", ТипИзмерения);
				Если ТипИзмерения = ТипИзмерения("ИзмерениеРегистра") Тогда
					СтруктураЭлемента.Вставить(Префикс + "ИмяИзмерения", Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Период") Тогда
					СтруктураЭлемента.Вставить(Префикс + "Периодичность", Элемент.СтатьяПоказательТипИзмерения);
					СтруктураЭлемента.Вставить(Префикс + "ЗначениеПериода", Элемент.ЗначениеАналитики);
				ИначеЕсли ТипИзмерения = ТипИзмерения("ФиксированнаяАналитика") Тогда
					СтруктураЭлемента.Вставить(Префикс + "ВидАналитики", Элемент.СтатьяПоказательТипИзмерения);
					СтруктураЭлемента.Вставить(Префикс + "ЭтоАналитикаПрочее", Элемент.ЭтоАналитикаПрочее);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Аналитика") Тогда
					СтруктураЭлемента.Вставить(Префикс + "ВидАналитики", Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Сценарий") Тогда
					СтруктураЭлемента.Вставить(Префикс + "Сценарий", Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Валюта") Тогда
					СтруктураЭлемента.Вставить(Префикс + "Валюта", Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Организация") Тогда
					СтруктураЭлемента.Вставить(Префикс + "Организация", Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Подразделение") Тогда
					СтруктураЭлемента.Вставить(Префикс + "Подразделение", Элемент.СтатьяПоказательТипИзмерения);
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(СтруктураЭлемента, АдресХранилища);
			
		КонецЕсли;
	Иначе
		Возврат ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Элемент, АдресХранилища);
	КонецЕсли;
	
КонецФункции

#Область Локализация

// Возвращает строковое представление пустого измерения (вида аналитики).
//
// Параметры:
//  ИзмерениеВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//  						- Строка - Измерение. Например "Организация" или "Подразделение".
//  Режим - Строка - Режим получения представления аналитики.
//  				Доступны значения:
//  					"Прочие" - Например, <прочие организации>.
//  					"Все" - Например, <все организации>.
//  					"ДобавляемыеИПрочие" - Например, <добавляемые и прочие организации>.
//  ПредставлениеИзмеренияВидаАналитики - Строка - Строковое представление вида аналитики или измерения.
//  			Для измерения - представление в локализованном формате.
//  			Для вида аналитики - наименование вида аналитики.
//  										- Неопределено - Значение по умолчанию. Представление определяется обращением к базе данных.
//  КэшПредставлений - Соответствие - Соответствие, где ключ - вид аналитики или строка - имя измерения. Значение - представление пустого значения, например <Прочие организации>.
//  					- Неопределено - Кэш представлений не задан.
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  			Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Строка - представление пустого измерения (вида аналитики), например, "<прочие статьи ДДС>".
//
Функция ПредставлениеПрочейАналитикиБюджетирования(ИзмерениеВидАналитики, Режим, ПредставлениеИзмеренияВидаАналитики = Неопределено, КэшПредставлений = Неопределено, КодЯзыка = "") Экспорт
	ПредставлениеПустогоЗначения = Неопределено;
	
	Если ИзмерениеВидАналитики = Неопределено Тогда
		ПредставлениеПустогоЗначения = "";
		Возврат ПредставлениеПустогоЗначения;
	КонецЕсли;
	Если НЕ КэшПредставлений = Неопределено Тогда
		ПредставлениеПустогоЗначения = КэшПредставлений.Получить(ИзмерениеВидАналитики);
	КонецЕсли;
	
	Если ПредставлениеПустогоЗначения = Неопределено Тогда
		ЭтоНумерованнаяАналитика = Ложь;
		Если ПредставлениеИзмеренияВидаАналитики = Неопределено Тогда
			Если ТипЗнч(ИзмерениеВидАналитики) = Тип("Строка") Тогда
				ПредставленияНумерованныхАналитик = ПредставленияНумерованныхАналитик(КодЯзыка);
				ПредставлениеНумерованнойАналитики = ПредставленияНумерованныхАналитик.Получить(ИзмерениеВидАналитики);
				
				Если ИзмерениеВидАналитики = "Организация" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Организации';
																|en = 'Companies'", КодЯзыка);
				ИначеЕсли ИзмерениеВидАналитики = "Подразделение" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Подразделения';
																|en = 'Business units'", КодЯзыка);
				ИначеЕсли ИзмерениеВидАналитики = "Сценарий" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Сценарии';
																|en = 'Scenarios'", КодЯзыка);
				ИначеЕсли ИзмерениеВидАналитики = "Валюта" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Валюты';
																|en = 'Currencies'", КодЯзыка);
				ИначеЕсли ПредставлениеНумерованнойАналитики <> Неопределено Тогда
					ПредставлениеИзмеренияВидаАналитики = ПредставлениеНумерованнойАналитики;
					ЭтоНумерованнаяАналитика = Истина;
				Иначе
					ПредставлениеИзмеренияВидаАналитики = ИзмерениеВидАналитики;
				КонецЕсли;
			Иначе
				ПредставлениеИзмеренияВидаАналитики = БюджетнаяОтчетностьВызовСервера.ПредставлениеВидаАналитики(ИзмерениеВидАналитики);
			КонецЕсли;
		КонецЕсли;
		Если ИзмерениеВидАналитики = "" ИЛИ ЭтоНумерованнаяАналитика Тогда
			Если Режим = "Все" Тогда
				ПредставлениеПустогоЗначения = НСтр("ru = '<все>';
													|en = '<all>'", КодЯзыка);
			ИначеЕсли Режим = "ДобавляемыеИПрочие" Тогда
				ПредставлениеПустогоЗначения = НСтр("ru = '<добавляемые и прочие>';
													|en = '<added and other>'", КодЯзыка);
			Иначе
				ПредставлениеПустогоЗначения = НСтр("ru = '<прочие>';
													|en = '<other>'", КодЯзыка);
			КонецЕсли;
		Иначе
			Если Режим = "Все" Тогда
				Шаблон = НСтр("ru = '<все %1>';
								|en = '<all %1>'", КодЯзыка);
			ИначеЕсли Режим = "ВсеИерархия" Тогда
				Шаблон = Нстр("ru = '<все %1 Иерархия>';
								|en = '<all %1 Hierarchy>'", КодЯзыка);
			ИначеЕсли Режим = "ДобавляемыеИПрочие" Тогда
				Шаблон = НСтр("ru = '<добавляемые и прочие %1>';
								|en = '<added and other %1>'", КодЯзыка);
			Иначе
				Шаблон = НСтр("ru = '<прочие %1>';
								|en = '<other %1>'", КодЯзыка);
			КонецЕсли;
			ПредставлениеПустогоЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				ПредставлениеИзмеренияВидаАналитики);
		КонецЕсли;
		Если НЕ КэшПредставлений = Неопределено Тогда
			КэшПредставлений.Вставить(ИзмерениеВидАналитики, ПредставлениеПустогоЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПустогоЗначения;
КонецФункции

// Возвращает строковое представление измерения.
//
// Параметры:
//  ИмяИзмерения - Строка - Предопределенное имя измерения.
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  				Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Строка - Строковое представление измерения.
//
Функция ПредставлениеИзмеренияБюджетирования(ИмяИзмерения, КодЯзыка = "") Экспорт
	
	ПредставленияНумерованныхАналитик = ПредставленияНумерованныхАналитик(КодЯзыка);
	ПредставлениеНумерованнойАналитики = ПредставленияНумерованныхАналитик.Получить(ИмяИзмерения);
	
	Если ИмяИзмерения = "Организация" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Организация';
										|en = 'Company'", КодЯзыка);
	ИначеЕсли ИмяИзмерения = "Подразделение" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Подразделение';
										|en = 'Business unit'", КодЯзыка);
	ИначеЕсли ИмяИзмерения = "Сценарий" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Сценарий';
										|en = 'Scenario'", КодЯзыка);
	ИначеЕсли ИмяИзмерения = "Валюта" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Валюта';
										|en = 'Currency'", КодЯзыка);
	ИначеЕсли ИмяИзмерения = "Период" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Период';
										|en = 'Period'", КодЯзыка);
	ИначеЕсли ИмяИзмерения = "НомерПодПериода" Тогда
		ПредставлениеИзмерения = НСтр("ru = '№ подпериода';
										|en = 'Subperiod No.'", КодЯзыка);
	ИначеЕсли ПредставлениеНумерованнойАналитики <> Неопределено Тогда
		ПредставлениеИзмерения = ПредставлениеНумерованнойАналитики;	
	Иначе
		ПредставлениеИзмерения = "";
	КонецЕсли;
	
	Возврат ПредставлениеИзмерения;
КонецФункции

#Область ПеременныеВФормулах

// Возвращает структуру значений переменных периодов, используемых в бюджетировании.
//
// Параметры:
//  ИсключаяСкобки - Булево - Если истина, то из имени и представления переменной будут исключены ограничивающие квадратные скобки.
//  			Значение по умолчанию Ложь. 
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  			Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Структура  - Структура переменных периодов, используемых в бюджетировании:
//   * НачалоПериодаДанных - Структура - содержит:
//   	** Имя - Строка - Значение переменной. Не локализуется, хранится в базе данных. Например, "[ГраницаФактДанных]".
//   	** Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   * КонецПериодаДанных - Структура - содержит:
//   	** Имя - Строка - Значение переменной. Не локализуется, хранится в базе данных. Например, "[ГраницаФактДанных]".
//   	** Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   * ГраницаФактДанных - Структура - содержит:
//   	** Имя - Строка - Значение переменной. Не локализуется, хранится в базе данных. Например, "[ГраницаФактДанных]".
//   	** Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   * ПериодГруппировки - Структура - содержит:
//   	** Имя - Строка - Значение переменной. Не локализуется, хранится в базе данных. Например, "[ГраницаФактДанных]".
//   	** Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//
Функция ПеременныеПериодовБюджетирования(ИсключаяСкобки = Ложь, КодЯзыка = "") Экспорт
	
	Результат = Новый Структура;
		
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			"НачалоПериодаДанных"));
	ЗначениеИПредставление.Вставить("Представление", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			НСтр("ru = 'Начало периода данных';
				|en = 'Data period start'", КодЯзыка)));
	Результат.Вставить("НачалоПериодаДанных", ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			"КонецПериодаДанных"));
	ЗначениеИПредставление.Вставить("Представление", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			НСтр("ru = 'Конец периода данных';
				|en = 'Data period end'", КодЯзыка)));
	Результат.Вставить("КонецПериодаДанных", ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			"ГраницаФактДанных"));
	ЗначениеИПредставление.Вставить("Представление", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			НСтр("ru = 'Граница факт.данных';
				|en = 'Act. data limit'", КодЯзыка)));
	Результат.Вставить("ГраницаФактДанных", ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			"ПериодГруппировки"));
	ЗначениеИПредставление.Вставить("Представление", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ИсключаяСкобки, "%1", "[%1]"),
			НСтр("ru = 'Период группировки';
				|en = 'Grouping period'", КодЯзыка)));
	Результат.Вставить("ПериодГруппировки", ЗначениеИПредставление);
	
	Возврат Результат;
КонецФункции

// Возвращает соответствие представлений переменных периодов и их значений.
//
// Параметры:
//  ИсключаяСкобки - Булево - Если истина, то из имени и представления переменной будут исключены ограничивающие квадратные скобки.
//  			Значение по умолчанию Ложь. 
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  			Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Соответствие представлений переменных периодов и их значений:
//   *Ключ - Строка - пользовательское представление переменной.
//   *Значение - Строка - хранимое не локализуемое значение переменной.
//
Функция ЗначенияПеременныхПериодовПоПредставлению(ИсключаяСкобки = Ложь, КодЯзыка = "") Экспорт
	Результат = Новый Соответствие;
	
	ПеременныеПериодов = ПеременныеПериодовБюджетирования(ИсключаяСкобки, КодЯзыка);
	Для Каждого КлючИЗначение Из ПеременныеПериодов Цикл
		ИмяПеременной = КлючИЗначение.Значение.Имя;
		Представление = КлючИЗначение.Значение.Представление;
		Результат.Вставить(Представление, ИмяПеременной);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает соответствие значений переменных периодов и их представлений.
//
// Параметры:
//  ИсключаяСкобки - Булево - Если истина, то из имени и представления переменной будут исключены ограничивающие квадратные скобки.
//  			Значение по умолчанию Ложь. 
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  			Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Соответствие значений переменных периодов и их представлений:
//   *Ключ - Строка - хранимое не локализуемое значение переменной.
//   *Значение - Строка - пользовательское представление переменной.
//
Функция ПредставленияПеременныхПериодовПоЗначению(ИсключаяСкобки = Ложь, КодЯзыка = "") Экспорт
	Результат = Новый Соответствие;
	
	ПеременныеПериодов = ПеременныеПериодовБюджетирования(ИсключаяСкобки, КодЯзыка);
	Для Каждого КлючИЗначение Из ПеременныеПериодов Цикл
		ИмяПеременной = КлючИЗначение.Значение.Имя;
		Представление = КлючИЗначение.Значение.Представление;
		Результат.Вставить(ИмяПеременной, Представление);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает структуру значений параметров для подстановки в текстовые поля, используемых в бюджетных отчетах.
//
// Параметры:
//  ИсключаяСкобки - Булево - Если истина, то из имени и представления параметра будут исключены ограничивающие квадратные скобки.
//  			Значение по умолчанию Ложь. 
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  			Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Структура - Структура параметров, используемых в бюджетировании:
//   *ВидОтчета - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *ТекущаяДатаИВремя - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *ПериодОтчетности - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *КонечнаяДатаПериодаОтчета - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *ГраницаФактическихДанных - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *Организация - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *Подразделение - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *Сценарий - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *СтатусДокумента - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *Ответственный - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *Утверждающий - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//
Функция ПеременныеБюджетныхОтчетов(ИсключаяСкобки = Ложь, КодЯзыка = "") Экспорт
	
	Результат = Новый Структура;
	
	ШаблонПеременной = ?(ИсключаяСкобки, "%1", "[%1]");
	
	ИмяПараметра = "ВидОтчета";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Вид отчета';
															|en = 'Report kind'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "ТекущаяДатаИВремя";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Текущая дата и время';
															|en = 'Current date and time'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "ПериодОтчетности";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Период отчетности';
															|en = 'Reporting period'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "КонечнаяДатаПериодаОтчета";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Конечная дата периода отчета';
															|en = 'End date of report period'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "ГраницаФактическихДанных";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Граница фактических данных';
															|en = 'Actual data offset'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "Организация";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Организация';
															|en = 'Company'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "Подразделение";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Подразделение';
															|en = 'Business unit'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "Сценарий";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Сценарий';
															|en = 'Scenario'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "СтатусДокумента";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Статус документа';
															|en = 'Document status'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	ИмяПараметра = "Ответственный";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Ответственный';
															|en = 'Person responsible'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	
	//++ НЕ УТКА
	ИмяПараметра = "Утверждающий";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПараметра);
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", Имя);
	ЗначениеИПредставление.Вставить("Представление", НСтр("ru = 'Утверждающий';
															|en = 'Approver'", КодЯзыка));
	Результат.Вставить(ИмяПараметра, ЗначениеИПредставление);
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

// Возвращает упорядоченный массив значений параметров для подстановки в текстовые поля, используемых в бюджетных отчетах.
//
// Параметры:
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  		Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Массив из Структура -  Упорядоченный массив параметров, параметр представляет структуру с колонками:
//  	*Имя - Строка - Идентификатор переменной.
//  	*Представление - Строка - Представление переменной.
//
Функция УпорядоченныеПеременныеБюджетныхОтчетов(КодЯзыка = "") Экспорт
	
	Результат = Новый Массив;
	
	ПеременныеБюджетныхОтчетов = ПеременныеБюджетныхОтчетов(Истина, КодЯзыка);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.ВидОтчета.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.ВидОтчета.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.ТекущаяДатаИВремя.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.ТекущаяДатаИВремя.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.ПериодОтчетности.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.ПериодОтчетности.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.КонечнаяДатаПериодаОтчета.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.КонечнаяДатаПериодаОтчета.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.ГраницаФактическихДанных.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.ГраницаФактическихДанных.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.Организация.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.Организация.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.Подразделение.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.Подразделение.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.Сценарий.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.Сценарий.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.СтатусДокумента.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.СтатусДокумента.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.Ответственный.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.Ответственный.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	//++ НЕ УТКА
	ЗначениеИПредставление = Новый Структура;
	ЗначениеИПредставление.Вставить("Имя", ПеременныеБюджетныхОтчетов.Утверждающий.Имя);
	ЗначениеИПредставление.Вставить("Представление", ПеременныеБюджетныхОтчетов.Утверждающий.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

// Вычисляет значение идентификатора из строки соответствии с правилами именования переменных.
// 
// Параметры:
//  СтрНаименование - Строка - Наименование, строка из которой необходимо получить идентификатор. 
//
// Возвращаемое значение:
//  Строка - Идентификатор, соответствующий правилам именования идентификаторов.
//
Функция ПолучитьИдентификатор(СтрНаименование) Экспорт
	
	Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(СтрНаименование); 
	
	Цифры = Новый Массив();
	Для Сч = 0 По 9 Цикл
		Цифры.Добавить(Строка(Сч));
	КонецЦикла;
	
	ПервыйСимволНеЦифра = Ложь;
	
	ДлинаИдентификатора = СтрДлина(Идентификатор);
	Если Не ПустаяСтрока(Идентификатор) Тогда
		Для НомерСимвола = 1 По ДлинаИдентификатора Цикл
			Если Цифры.Найти(Сред(Идентификатор, 1, 1)) = Неопределено Тогда
				ПервыйСимволНеЦифра = Истина;
			КонецЕсли;
			Если ПервыйСимволНеЦифра Тогда
				Прервать;
			Иначе
				Идентификатор = Сред(Идентификатор, 2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставленияНумерованныхАналитик(КодЯзыка = "")
	ПредставленияНумерованныхАналитик = Новый Соответствие;
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ПредставлениеНумерованнойАналитики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Аналитика%1';
				|en = 'Dimension%1'", КодЯзыка), 
			НомерАналитики);
		ПредставленияНумерованныхАналитик.Вставить("Аналитика" + НомерАналитики, ПредставлениеНумерованнойАналитики);
	КонецЦикла;
	Возврат ПредставленияНумерованныхАналитик;
КонецФункции

// Функция определяет тип измерения бюджетного отчета
//
// Параметры:
//  Значение  - Произвольный - значение измерения бюджетного отчета на основании которого определяется тип измерения.
//  ДополнительныеПараметры  - Структура - дополнительные сведения.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыИзмеренийФинансовогоОтчета - тип измерения.
//
Функция ОпределитьТипИзмеренияПоТипуЗначения(Значение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.Периодичность") Тогда
		
		Возврат ТипИзмерения("Период");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
		
		Если ДополнительныеПараметры <> Неопределено
			И (ЗначениеЗаполнено(ДополнительныеПараметры.ЗначениеАналитики) 
			ИЛИ ДополнительныеПараметры.ЭтоАналитикаПрочее) Тогда
			Возврат ТипИзмерения("ФиксированнаяАналитика");
		Иначе
			Возврат ТипИзмерения("Аналитика");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Сценарии") Тогда
		
		Возврат ТипИзмерения("Сценарий");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		
		Возврат ТипИзмерения("Организация");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Возврат ТипИзмерения("Подразделение");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Валюты") Тогда
		
		Возврат ТипИзмерения("Валюта");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		
		Возврат ТипИзмерения("ЕдиницаИзмерения");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат ТипИзмерения("ИзмерениеРегистра");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный тип измерения бюджетного отчета';
								|en = 'Unknown budget report dimension type'");
		
	КонецЕсли;
	
КонецФункции

// Процедура заполняет строку списка или дерева элементов отчета
// дополнительными реквизитами.
//
// Параметры:
//  Результат - структура - источник заполнения
//  СтрокаПриемник - ДанныеФормыЭлементДерева - строка, которую заполняем
//  АдресЭлементаВХранилище - строка - адрес хранилища элемента
//  Поле - ДанныеФормыКоллекция - для поиска строки, если приемник - идентификатор строки.
//
Процедура ЗаполнитьСтрокуСпискаЭлементовОтчета(Знач Результат, Знач СтрокаПриемник, АдресЭлементаВХранилище = Неопределено, Поле = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Форма возвращает актуальные реквизиты
	Если ТипЗнч(СтрокаПриемник) = Тип("Число") Тогда
		СтрокаПриемник = Поле.НайтиПоИдентификатору(СтрокаПриемник);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, Результат);
	ДополнительныеРеквизитыСписка = "ВыводимыеПоказатели, ТипЗначенияПоказателя, ВыводитьЗаголовокЭлемента, ПривилегированныйРежим";
	Если Не ЗначениеЗаполнено(АдресЭлементаВХранилище) Тогда
		ДополнительныеРеквизиты = 
				ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
													Результат,
													ДополнительныеРеквизитыСписка);
	Иначе
		// Но актуальные значения дополнительных реквизитов формируются на сервере
		// в ПередЗаписьюНаСервере, соответственно находятся в хранилище.
		ДополнительныеРеквизиты = 
				ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
													АдресЭлементаВХранилище,
													ДополнительныеРеквизитыСписка);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДополнительныеРеквизиты);
	
КонецПроцедуры

// Функция возвращает представление смещения
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения -
//  ЗначениеПустое - Булево -
//
// Возвращаемое значение:
//   Строка   - представление смещения.
//
Функция ПредставлениеСмещения(Форма, ЗначениеПустое = Ложь) Экспорт
	
	ЗначениеПустое = Ложь;
	
	ПеременныеПериодов = ПеременныеПериодовБюджетирования();
	Периодичность = Форма.ПериодичностьСмещения;
	Период = Форма.ПериодСмещения;
	
	Если Период = 0 Тогда
		ПредставлениеПериод = "";
	Иначе
		Представление = НСтр("ru = 'Данные смещены на %1 назад';
							|en = 'Data is shifted %1 back'");
		ПредставлениеПериод = БюджетированиеКлиентСервер.ПериодЦифрамиПериодичностьПрописью(Период, Периодичность);
		ПредставлениеПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, ПредставлениеПериод);
	КонецЕсли;
	
	ЕстьИзмененияГраниц = Ложь;
	Если Не СтрНайти(Форма.ИмяФормы, "НефинансовыйПоказатель") Тогда
		Если ЗначениеЗаполнено(Форма.НижняяГраницаДанных)
			И Форма.НижняяГраницаДанных <> ПеременныеПериодов.НачалоПериодаДанных.Имя Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.ВерхняяГраницаДанных)
			И Форма.ВерхняяГраницаДанных <> ПеременныеПериодов.КонецПериодаДанных.Имя Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.НачалоПериодаГруппировки)
			И Форма.НачалоПериодаГруппировки <> ПеременныеПериодов.ПериодГруппировки.Имя Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.КонецПериодаГруппировки)
			И Форма.КонецПериодаГруппировки <> ПеременныеПериодов.ПериодГруппировки.Имя Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеГраниц = "";
	Если ЕстьИзмененияГраниц Тогда
		ПредставлениеГраниц = НСтр("ru = 'Установлены границы периода';
									|en = 'Period boundaries are set'");
	КонецЕсли;
	
	Если ПредставлениеГраниц = ""
		И ПредставлениеПериод = "" Тогда
		
		Результат = НСтр("ru = 'Смещение и границы данных не заданы';
						|en = 'Offset and limits of data are not specified'");
		ЗначениеПустое = Истина;
		
	ИначеЕсли ПредставлениеПериод <> ""
		И ПредставлениеГраниц <> "" Тогда
		
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, %2';
				|en = '%1, %2'"),
			ПредставлениеПериод,
			НРег(ПредставлениеГраниц));
		
	ИначеЕсли ПредставлениеПериод <> "" Тогда
		
		Результат = ПредставлениеПериод;
		
	ИначеЕсли ПредставлениеГраниц <> "" Тогда
		
		Результат = ПредставлениеГраниц;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция возвращает цвет стиля
//
// Параметры:
//  ЛокальныйКэш  - Соответствие - локальный кэш для хранения соответствия имен и цветов, что бы не обращаться
//  					 к серверу в случае клиентского вызова.
//  ИмяЦвета  - Строка - имя цвета.
//
// Возвращаемое значение:
//   Цвет - Цвет стиля по имени.
//
Функция ПолучитьЦветСтиля(ЛокальныйКэш, ИмяЦвета) Экспорт
	Перем Цвет;
	
	Если ЛокальныйКэш = Неопределено Тогда
		ЛокальныйКэш = Новый Структура;
	КонецЕсли;
	
	Если ЛокальныйКэш.Свойство(ИмяЦвета, Цвет) Тогда
		Возврат Цвет;
	КонецЕсли;
	
	Цвет = БюджетнаяОтчетностьВызовСервера.ПолучитьЦвет(ИмяЦвета);
	ЛокальныйКэш.Вставить(ИмяЦвета, Цвет);
	
	Возврат Цвет;
	
КонецФункции

// Функция добавляет операнды в таблицу операндов
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма конструктора формул
//  НовыеОперанды  - Массив из ДанныеФормыЭлементДерева - Строки дерева операндов. Содержит в том числе:
//  	* Наименование - Строка -
//  ТаблицаОперандов - ТаблицаЗначений - Таблица выбранных в формуле операндов. Содержит в том числе:
//  	* Идентификатор - Строка -
//  Уникальный - Булево - признак уникальности операндов (добавлять операнды если есть).
//
// Возвращаемое значение:
//   Массив из ДанныеФормыЭлементКоллекции - массив добавленных строк таблицы операндов.
//
Функция ДобавитьОперандыФормулы(Форма, НовыеОперанды, ТаблицаОперандов, Уникальный) Экспорт
	
	МассивДобавленных = Новый Массив;
	Для Каждого Операнд Из НовыеОперанды Цикл
		
		Если Не ЭлементДоступенКакОперанд(Операнд) Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = ИмяОперанда(Операнд.Наименование, Операнд, ТаблицаОперандов, Уникальный);
		
		НайденныйОперанд = Неопределено;
		Если ЕстьПоказатель(Идентификатор, Операнд, ТаблицаОперандов, НайденныйОперанд) Тогда
			МассивДобавленных.Добавить(НайденныйОперанд);
		Иначе
			НоваяСтрока = ТаблицаОперандов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Операнд);
			НоваяСтрока.Идентификатор = Идентификатор;
			НоваяСтрока.НаименованиеДляПечати = Операнд.Наименование;
			НоваяСтрока.СтатьяПоказательТипИзмерения = Операнд.ЭлементВидаОтчетности;
			НоваяСтрока.ПривилегированныйРежимКартинка = Не Число(НоваяСтрока.ПривилегированныйРежим);
			Если НоваяСтрока.ВидЭлемента <> ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель") Тогда
				НоваяСтрока.ВыводимыеПоказатели = ПредопределенноеЗначение("Перечисление.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма");
				Если НоваяСтрока.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов") Тогда
					НоваяСтрока.ТипЗначенияПоказателя = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейБюджетногоОтчета.Оборот");
				КонецЕсли;
			КонецЕсли;
			МассивДобавленных.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если НЕ Форма.Модифицированность Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДобавленных;
	
КонецФункции

// Определяет возможно ли использования элемента финансового отчета в качестве операнда производного показателя
// Используется при добавлении операндов в производном показателе.
//
// Параметры:
//  ЭлементОтчета - ДанныеФормыЭлементДерева - проверяемый элемент отчета.
//
// Возвращаемое значение:
//   Булево -
//
Функция ЭлементДоступенКакОперанд(ЭлементОтчета) Экспорт
	ЭлементНеДоступен = 
			ЭлементОтчета = Неопределено
			Или ЭлементОтчета.ЭтоГруппа
			Или Не ЗначениеЗаполнено(ЭлементОтчета.ВидЭлемента)
			Или ЭлементОтчета.ВидЭлемента.Пустая()
			Или ЭлементОтчета.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов")
			Или ЭлементОтчета.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов");
	
	Возврат Не ЭлементНеДоступен;
КонецФункции
		
Функция ИмяОперанда(Наименование, Операнд, ТаблицаОперандов, Уникальный) Экспорт
	
	РазделительЯчеек = РазделительЯчеекСложнойТаблицы();
	
	ПодготовленноеНаименование = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(":+-*/=@№%()", Наименование, "");
	Массив = СтрРазделить(ПодготовленноеНаименование, " ", Ложь);
	
	Результат = "";
	Для Каждого Элемент Из Массив Цикл
		ЕстьРазделительЯчеек = (Прав(Элемент, 1) = РазделительЯчеек);
		Результат = Результат + ТРег(СокрЛП(Лев(Элемент, 7))) + ?(ЕстьРазделительЯчеек, РазделительЯчеек, "");
	КонецЦикла;
	
	Идентификатор = Результат;
	
	Если Уникальный Тогда
	
		Сч = 0;
		Пока ЕстьПоказатель(Идентификатор, Операнд, ТаблицаОперандов) Цикл
			Сч = Сч + 1;
			Идентификатор = Результат + "_" + Формат(Сч, "ЧГ=");
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(Операнд) = Тип("ДанныеФормыЭлементКоллекции") Тогда // Интерактивное добавление операнда
			ИдентификаторОперанда = Операнд.ПолучитьИдентификатор();
			Если ТаблицаОперандов.НайтиПоИдентификатору(ИдентификаторОперанда) = Неопределено Тогда
				СтруктураСравнения = Новый Структура("ВидЭлемента, ЭлементВидаОтчетности");
				ЗаполнитьЗначенияСвойств(СтруктураСравнения, Операнд);
				Идентификатор = БюджетнаяОтчетностьВызовСервера.УвеличитьНумераторИдентификатора(Идентификатор, СтруктураСравнения, ТаблицаОперандов);
			Иначе
				Идентификатор = БюджетнаяОтчетностьВызовСервера.УвеличитьНумераторИдентификатора(Идентификатор, ИдентификаторОперанда, ТаблицаОперандов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция РазделительЯчеекСложнойТаблицы() Экспорт
	Возврат ";";
КонецФункции


// Проверка наличия показателя
// 
// Параметры:
// 	Идентификатор - Строка -
// 	Операнд - ДанныеФормыЭлементДерева - содержит в том числе:
// * Наименование - Строка -
// 	ТаблицаОперандов - ТаблицаЗначений - содержит в том числе:
// * Идентификатор - Строка -
// 	НайденныйОперанд - Неопределено, СтрокаТаблицыЗначений -
// Возвращаемое значение:
// 	Булево -
Функция ЕстьПоказатель(Идентификатор, Операнд, ТаблицаОперандов, НайденныйОперанд = Неопределено)
	
	Для Каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		Если СтрокаОперанда.Идентификатор = Идентификатор Тогда
			
			НайденныйОперанд = СтрокаОперанда;
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВидЭлемента(ИмяВидаЭлемента) Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

Функция ТипИзмерения(ИмяВидаЭлемента)
	
	Возврат ПредопределенноеЗначение("Перечисление.ТипыИзмеренийФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

Функция ЛеваяЧастьИмениСовпадает(Имя, ИскомаяСтрока) Экспорт
	
	Возврат Лев(Имя, СтрДлина(ИскомаяСтрока)) = ИскомаяСтрока;
	
КонецФункции

// Определяет, является ли переданное поле полем, содержащим период
//
// Параметры:
//    Имя - Строка - Имя поля
//
// Возвращаемое значение:
//    Булево - Признак того, что поле является полем, содержащим период
//
Функция ЭтоПолеПериода(Имя) Экспорт
	
	ПоляПериода = Новый Массив;
	ПоляПериода.Добавить("Период");
	ПоляПериода.Добавить("ПериодДень");
	ПоляПериода.Добавить("ПериодНеделя");
	ПоляПериода.Добавить("ПериодДекада");
	ПоляПериода.Добавить("ПериодМесяц");
	ПоляПериода.Добавить("ПериодКвартал");
	ПоляПериода.Добавить("ПериодПолугодие");
	ПоляПериода.Добавить("ПериодГод");
	
	Возврат ПоляПериода.Найти(Имя) <> Неопределено;
	
КонецФункции

Функция ПараметрыОткрытияФормыНастройкиПериода(Форма, ДополнятьЭлементамиОтчета = Истина) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПериодСмещения");
	Параметры.Вставить("ПериодичностьСмещения");
	Параметры.Вставить("НижняяГраницаДанных");
	Параметры.Вставить("ВерхняяГраницаДанных");
	Параметры.Вставить("НачалоПериодаГруппировки");
	Параметры.Вставить("КонецПериодаГруппировки");
	Если ДополнятьЭлементамиОтчета Тогда
		Параметры.Вставить("АдресТаблицыЭлементов");
		Параметры.Вставить("АдресРедактируемогоЭлемента");
		Параметры.Вставить("АдресЭлементовОтчета");
		Параметры.Вставить("ВариантРасположенияГраницыФактическихДанных");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Параметры, Форма);
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыОткрытияФормыНастройкиПериодичностиПланирования(ФормаОбъект) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Периодичность");
	Параметры.Вставить("СпособПланирования");
	Параметры.Вставить("ВариантРасположенияГраницыФактическихДанных");
	Параметры.Вставить("КоличествоПериодовСкользящегоБюджета");
	Параметры.Вставить("СмещениеГраницыФакта");
	Параметры.Вставить("ПериодичностьГраницыФакта");
	
	ЗаполнитьЗначенияСвойств(Параметры, ФормаОбъект);
	
	Возврат Параметры;
	
КонецФункции

Функция ИмяРедактируемогоЗначенияБюджета(МассивИменРедактируемыхЗначений) Экспорт
	
	ИмяПоУмолчанию = НСтр("ru = 'Редактируемое значение';
							|en = 'Edited value'");
	
	Если МассивИменРедактируемыхЗначений.Количество() Тогда
		
		МассивИзначальныхИмен = Новый Массив;
		Для Каждого ЭлементМассива Из МассивИменРедактируемыхЗначений Цикл
			Если СтрНайти(ЭлементМассива, ИмяПоУмолчанию) > 0 Тогда
				МассивИзначальныхИмен.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		Если Не МассивИзначальныхИмен.Количество() Тогда
			
			Возврат ИмяПоУмолчанию;
			
		КонецЕсли;
		
		МаксимальноеИмя = МассивИзначальныхИмен[МассивИзначальныхИмен.ВГраница()];
		НачалоНомера = СтрНайти(МаксимальноеИмя, "#");
		Если НачалоНомера Тогда
			ИмяБезНомера = СокрЛП(Лев(МаксимальноеИмя, НачалоНомера - 1));
		Иначе
			ИмяБезНомера = СокрЛП(МаксимальноеИмя);
		КонецЕсли;
		
		Сч = 0;
		ИмяСНомером = ИмяБезНомера;
		Пока МассивИзначальныхИмен.Найти(ИмяСНомером) <> Неопределено Цикл
			Сч = Сч + 1;
			ИмяСНомером = ИмяБезНомера + " #" + Сч;
		КонецЦикла;
		
		Возврат ИмяСНомером;
		
	Иначе
		
		Возврат ИмяПоУмолчанию;
		
	КонецЕсли;
	
КонецФункции

Функция УпорядоченныеПериодичности() Экспорт
	
	Периодичности = Новый Массив;
	
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	
	Возврат Периодичности;
	
КонецФункции

// Возвращает минимальную периодичность из переданных
//
// Параметры:
// 	Периодичности - Массив - Периодичности, из которых надо найти минимальную.
// 
// Возвращаемое значение:
// 	ПеречислениеСсылка.Периодичность - Найденная минимальная периодичность.
//
Функция МинимальнаяПериодичность(Периодичности) Экспорт
	
	Результат = Неопределено;
	
	УпорядоченныеПериодичности = УпорядоченныеПериодичности();
	Для каждого Периодичность Из УпорядоченныеПериодичности Цикл 
		Если ЗначениеЗаполнено(Периодичность) И Периодичности.Найти(Периодичность) <> Неопределено Тогда
			Результат = Периодичность;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ЭкземплярБюджета

Функция МаксимальныйНомерПоПорядку(Объект) Экспорт
	
	МаксимальныйНомер = 0;
	Для Каждого СтрокаОборотов Из Объект.ОборотыПоСтатьямБюджетов Цикл
		МаксимальныйНомер = Макс(СтрокаОборотов.НомерПоПорядку, МаксимальныйНомер);
	КонецЦикла;
	
	Возврат МаксимальныйНомер;
	
КонецФункции

Функция ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, ДанныеПоиска, Добавлять = Истина) Экспорт
	Перем ИдентификаторСтроки;
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	СтруктураПоиска = Новый Структура;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		СтруктураПоиска.Вставить("Аналитика" + НомерАналитики);
	КонецЦикла;
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		СтруктураПоиска.Вставить("СтатьяБюджетов");
		СтруктураПоиска.Вставить("Валюта");
		ИмяТабличнойЧасти = "АналитикаСтатейБюджетов";
	Иначе
		СтруктураПоиска.Вставить("РедактируемоеЗначение");
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			СтруктураПоиска.Вставить("ВидАналитики" + Сч);
		КонецЦикла;
		ИмяТабличнойЧасти = "АналитикаЗначений";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоиска);
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		Если ТипЗнч(ДанныеПоиска) = Тип("Структура") Тогда
			Если ДанныеПоиска.Свойство("Валюта") Тогда
				Если ДанныеПоиска.Валюта = Неопределено Тогда
					СтруктураПоиска.Удалить("Валюта");
				Иначе
					СтруктураПоиска.Валюта = ДанныеПоиска.Валюта;
				КонецЕсли;
			Иначе
				СтруктураПоиска.Валюта = ВалютаСценария;
			КонецЕсли;
		Иначе
			СтруктураПоиска.Валюта = ВалютаСценария;
		КонецЕсли;
	Иначе
		МаксимальныйНомерАналитики = 0;
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			Если ЗначениеЗаполнено(СтруктураПоиска["ВидАналитики" + Сч]) Тогда
				МаксимальныйНомерАналитики = Сч;
			КонецЕсли;
		КонецЦикла;
		СтруктураПоиска.Вставить("КоличествоИспользуемыхАналитик", МаксимальныйНомерАналитики);
	КонецЕсли;
	
	РезультатПоиска = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		Если Добавлять Тогда
			СтрокаАналитикиСтатейБюджетов = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАналитикиСтатейБюджетов, СтруктураПоиска);
			СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ИдентификаторСтроки = СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки;
		КонецЕсли;
	Иначе
		ИдентификаторСтроки = РезультатПоиска[0].ИдентификаторСтроки;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции


// Преобразование расшифровки
// 
// Параметры:
// 	ОбъектИПараметрыРасчета - см. БюджетнаяОтчетностьКлиентСервер.СтруктураОбъектаДляРасчетаЯчейки
// 	Расшифровка - Соответствие, Неопределено - Описание
// 	РежимПоиска - Булево - Описание
// 	ИмяПоказателя - Неопределено, Строка - Описание
// Возвращаемое значение:
// 	Неопределено, Структура - 
Функция ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, РежимПоиска = Ложь, ИмяПоказателя = Неопределено) Экспорт
	Перем СтатьяБюджетов, СтруктураРезультат;
	
	КэшПараметровСтатей = ОбъектИПараметрыРасчета.КэшПараметровСтатей;
	Объект = ОбъектИПараметрыРасчета.Объект;
	
	Если Расшифровка.Свойство("СтатьяБюджетов", СтатьяБюджетов)
		И ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		СтруктураРезультат = Новый Структура("СтатьяБюджетов", СтатьяБюджетов);
	ИначеЕсли Расшифровка.Свойство("ПоказательБюджетов", СтатьяБюджетов)
		И ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		СтруктураРезультат = Новый Структура("ПоказательБюджетов", СтатьяБюджетов);
	ИначеЕсли Расшифровка.Свойство("РедактируемоеЗначение", СтатьяБюджетов)
		И ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		СтруктураРезультат = Новый Структура("РедактируемоеЗначение", СтатьяБюджетов);
	КонецЕсли;
	
	Если СтруктураРезультат = Неопределено Тогда
		Если Не РежимПоиска Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре вида бюджета: не определен тип ячейки значения';
									|en = 'Error in the budget profile structure: value cell type is not determined'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуемыеПериоды = Новый Массив;
	Для Каждого КлючИЗначение Из Расшифровка Цикл
		Если ЭтоПолеПериода(КлючИЗначение.Ключ) Тогда
			Периодичность = ФинансоваяОтчетностьКлиентСервер.ПериодичностьПоПериодуСтрокой(КлючИЗначение.Ключ);
			Если ЗначениеЗаполнено(Периодичность) Тогда
				ИспользуемыеПериоды.Добавить(Периодичность);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуемыеПериоды.Количество() Тогда
		МинимальнаяПериодичность = МинимальнаяПериодичность(ИспользуемыеПериоды);
		КолонкаПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период;
		СтруктураРезультат.Вставить("ПериодПланирования", Расшифровка[КолонкаПериод]);
	Иначе
		СтруктураРезультат.Вставить("ПериодПланирования", Объект.НачалоПериода);
	КонецЕсли;
	
	ПоказательРасшифровки = Неопределено;
	Если Расшифровка.Свойство("ИмяПоказателя", ПоказательРасшифровки) Тогда
		ИмяПоказателя = ПоказательРасшифровки;
	Иначе
		ИмяПоказателя = "Сумма";
	КонецЕсли;
	
	Валюта = Неопределено;
	Если Расшифровка.Свойство("Валюта", Валюта) Тогда
		СтруктураРезультат.Вставить("Валюта", Валюта);
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ПустоеЗначениеАналитики = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	Если СтруктураРезультат.Свойство("СтатьяБюджетов") И КэшПараметровСтатей[СтатьяБюджетов] <> Неопределено Тогда
		
		РеквизитыСтатьи = КэшПараметровСтатей[СтатьяБюджетов];
		
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			
			ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
			ТипВидаАналитики = РеквизитыСтатьи["ВидАналитики" + Сч + "ТипЗначения"];
			ЗначениеАналитики = ПустоеЗначениеАналитики;
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				ЗначениеАналитики = Расшифровка.ЗначенияАналитик[ВидАналитики];
				Если ТипЗнч(ЗначениеАналитики) = Тип("Строка") Тогда
					ЗначениеАналитики = ПустоеЗначениеАналитики;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТипВидаАналитики) Тогда
				ЗначениеАналитики = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(ЗначениеАналитики, ТипВидаАналитики);
			КонецЕсли;
			СтруктураРезультат.Вставить("Аналитика" + Сч, ЗначениеАналитики);
			
		КонецЦикла;
		
	Иначе
		
		СвойстваАналитикОтчета = БюджетнаяОтчетностьВызовСервера.СвойстваАналитикОтчета(ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета);
		ЗначенияТипов = СвойстваАналитикОтчета.ЗначенияТипов;
		ВидыАналитикОтчета = СвойстваАналитикОтчета.ВидыАналитикОтчета;
		
		Для СчетчикДополнения = 1 По МаксимальноеКоличествоАналитик Цикл
			ПустаяСсылкаНаАналитику = ПредопределенноеЗначение("ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка");
			СтруктураРезультат.Вставить("ВидАналитики" + СчетчикДополнения, ПустаяСсылкаНаАналитику);
			СтруктураРезультат.Вставить("Аналитика" + СчетчикДополнения, ПустоеЗначениеАналитики);
		КонецЦикла;
		
		
		// Получаем значения видов аналитики из расшифровки, упорядочиваем коллекцию по номеру аналитики в отчете в целом.
		НомераВидовАналитик = Новый СписокЗначений;
		АналитикаРасшифровкиПоНомеруВОтчете = Новый Соответствие;
		Для Каждого КлючИЗначение Из Расшифровка.ЗначенияАналитик Цикл
			ВидАналитики           = КлючИЗначение.Ключ;
			ИндексАналитикиВОтчете = ВидыАналитикОтчета.Найти(ВидАналитики);
			Если ИндексАналитикиВОтчете = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НомерАналитикиВОтчете = ИндексАналитикиВОтчете + 1;
			ЗначениеАналитики     = КлючИЗначение.Значение;
			НомераВидовАналитик.Добавить(НомерАналитикиВОтчете);
			АналитикаРасшифровкиПоНомеруВОтчете.Вставить(НомерАналитикиВОтчете,
				Новый Структура("ВидАналитики, ЗначениеАналитики", ВидАналитики, ЗначениеАналитики));
		КонецЦикла;
		НомераВидовАналитик.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		
		// Номера видов аналитики задаем в с 1 для данной статьи / показателя, но в порядке, соответствующему общему порядку
		// аналитики в отчете.
		Сч = 1;
		Для Каждого ЭлементСписка Из НомераВидовАналитик Цикл
			
			НомерАналитикиВОтчете = ЭлементСписка.Значение;
			ВидАналитики = АналитикаРасшифровкиПоНомеруВОтчете.Получить(НомерАналитикиВОтчете).ВидАналитики;
			ЗначениеАналитики = ПустоеЗначениеАналитики;
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				ЗначениеАналитики = АналитикаРасшифровкиПоНомеруВОтчете.Получить(НомерАналитикиВОтчете).ЗначениеАналитики;
				Если ТипЗнч(ЗначениеАналитики) = Тип("Строка") Тогда
					ЗначениеАналитики = ПустоеЗначениеАналитики;
				КонецЕсли;
			КонецЕсли;
			
			ТипЗначенияАналитики = ЗначенияТипов[ВидАналитики].ТипЗначения;
			ЗначениеАналитики = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(ЗначениеАналитики, ТипЗначенияАналитики);
			СтруктураРезультат.Вставить("Аналитика" + Сч, ЗначениеАналитики);
			СтруктураРезультат.Вставить("ВидАналитики" + Сч, ВидАналитики);
			Сч = Сч + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ОбъектИПараметрыРасчета - см. БюджетнаяОтчетностьКлиентСервер.СтруктураОбъектаДляРасчетаЯчейки
// 	Расшифровка - Соответствие, Неопределено -
// 	ИмяПоказателя - Строка, Неопределено -
// 	РасшифровкаАналитика - Структура, Неопределено -
// 	ТолькоНайти - Булево - Описание
// Возвращаемое значение:
// 	ДанныеФормыЭлементКоллекции - строка табличной части "ОборотыПоСтатьямБюджетов". Содержит в том числе:
// 		* Примечание - Строка -
//
Функция НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка, ИмяПоказателя = Неопределено, 
											РасшифровкаАналитика = Неопределено, ТолькоНайти = Ложь) Экспорт
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	РасшифровкаАналитика = ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, , ИмяПоказателя);
	ПериодПланирования   = РасшифровкаАналитика.ПериодПланирования;
	
	ИдентификаторСтроки  = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, РасшифровкаАналитика);
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	Отбор.Вставить("ПериодПланирования", ПериодПланирования);
	РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		
		Если ТолькоНайти Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаОборот = Объект.ОборотыПоСтатьямБюджетов.Добавить(); // ДанныеФормыЭлементКоллекции
		ЗаполнитьЗначенияСвойств(СтрокаОборот, Отбор);
		Если ОбъектИПараметрыРасчета.Свойство("МаксимальныйНомерПоПорядку") Тогда
			МаксимальныйНомер = ОбъектИПараметрыРасчета.МаксимальныйНомерПоПорядку;
		ИначеЕсли ОбъектИПараметрыРасчета.Свойство("ТекущийНомерПоПорядку")
			И ЗначениеЗаполнено(ОбъектИПараметрыРасчета.ТекущийНомерПоПорядку) Тогда
			МаксимальныйНомер = ОбъектИПараметрыРасчета.ТекущийНомерПоПорядку;
		Иначе
			МаксимальныйНомер = МаксимальныйНомерПоПорядку(Объект);
		КонецЕсли;
		СтрокаОборот.НомерПоПорядку = МаксимальныйНомер + 1;
		Если ОбъектИПараметрыРасчета.Свойство("МаксимальныйНомерПоПорядку") Тогда
			ОбъектИПараметрыРасчета.МаксимальныйНомерПоПорядку = СтрокаОборот.НомерПоПорядку;
		ИначеЕсли ОбъектИПараметрыРасчета.Свойство("ТекущийНомерПоПорядку") Тогда
			ОбъектИПараметрыРасчета.ТекущийНомерПоПорядку = СтрокаОборот.НомерПоПорядку;
		КонецЕсли;
		
	Иначе
		
		СтрокаОборот = РезультатПоиска[0]; // ДанныеФормыЭлементКоллекции
		
	КонецЕсли;
	
	Возврат СтрокаОборот;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ОбъектИПараметрыРасчета - см. БюджетнаяОтчетностьКлиентСервер.СтруктураОбъектаДляРасчетаЯчейки
// 	Расшифровка - см. БюджетнаяОтчетностьВызовСервера.ЗначениеРасшифровки
// 	ТекстЗначения - Строка -
// 	Примечание - Строка, Неопределено -
// 	РежимЗаполнения - Булево -
// Возвращаемое значение:
// 	Структура - Описание:
// * Примечание - Строка, Неопределено -
// * Сумма - Число -
// * СуммаВВалюте - Число -
// * Количество - Число -
// * Значение - Число -
//
Функция ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, ТекстЗначения, Примечание = Неопределено, РежимЗаполнения = Ложь) Экспорт
	Перем ИмяПоказателя, РасшифровкаАналитика;
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	СтрокаОборот = НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка, ИмяПоказателя, РасшифровкаАналитика);
	Если РасшифровкаАналитика.Свойство("ПоказательБюджетов")
		И ЗначениеЗаполнено(РасшифровкаАналитика.ПоказательБюджетов) Тогда
		// Расчетные показатели бюджетов рассчитываются автоматически и не редактируются
		ТекстЗначения = 0;
	КонецЕсли;
	Если ТипЗнч(ТекстЗначения) = Тип("Число") Тогда
		Значение = ТекстЗначения;
	ИначеЕсли ИмяПоказателя = "Значение" Тогда
		Значение = ТекстЗначения;
	ИначеЕсли ТекстЗначения = "#Знач" Тогда
		Значение = 0;
	Иначе
		Попытка
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, Символы.НПП, "");
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, " ", "");
			Если Лев(ЗначениеСтрокой, 1) = "("
			   И Прав(ЗначениеСтрокой, 1) = ")" Тогда
				ЗначениеСтрокой = Сред(ЗначениеСтрокой, 2, СтрДлина(ЗначениеСтрокой) - 2);
				Значение = -Число(ЗначениеСтрокой);
			Иначе
				Значение = Число(ЗначениеСтрокой);
			КонецЕсли;
		Исключение
			Значение = 0;
		КонецПопытки;
	КонецЕсли;
	
	ПериодПланирования = РасшифровкаАналитика.ПериодПланирования;
	
	Если Примечание <> Неопределено Тогда
		СтрокаОборот.Примечание = Примечание;
	КонецЕсли;
	
	Если ИмяПоказателя = "Сумма" Тогда
		
		Валюта = Неопределено;
		Если РасшифровкаАналитика.Свойство("Валюта", Валюта) И Валюта <> ВалютаСценария Тогда
			
			СтрокаОборот.Сумма = БюджетнаяОтчетностьВызовСервера.ПересчитатьПоТаблицеКурсов(ОбъектИПараметрыРасчета,
				Значение,
				ПериодПланирования,
				Валюта,
				ВалютаСценария);
			СтрокаОборот.СуммаВВалюте = Значение;
			
		Иначе
			
			СтрокаОборот.Сумма = Значение;
			СтрокаОборот.СуммаВВалюте = Значение;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОборот[ИмяПоказателя] = Значение;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Сумма", СтрокаОборот.Сумма);
	Результат.Вставить("СуммаВВалюте", СтрокаОборот.СуммаВВалюте);
	Результат.Вставить("Количество", СтрокаОборот.Количество);
	Результат.Вставить("Значение", СтрокаОборот.Значение);
	Если НЕ Примечание = Неопределено Тогда
		Результат.Вставить("Примечание", Примечание);
	КонецЕсли;
	
	Если Не РежимЗаполнения Тогда
		Если СтрокаОборот.Сумма = 0 И СтрокаОборот.СуммаВВалюте = 0
			И СтрокаОборот.Количество = 0
			И Не ЗначениеЗаполнено(СтрокаОборот.Значение)
			И ПустаяСтрока(СтрокаОборот.Примечание) Тогда
			
			Объект.ОборотыПоСтатьямБюджетов.Удалить(СтрокаОборот);
			ИдентификаторСтроки = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, РасшифровкаАналитика);
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
			РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
			Если Не РезультатПоиска.Количество() Тогда
				НайденнаяСтрока = Объект.АналитикаСтатейБюджетов.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
				Если НайденнаяСтрока.Количество() Тогда
					Объект.АналитикаСтатейБюджетов.Удалить(НайденнаяСтрока[0]);
				КонецЕсли;
				НайденнаяСтрока = Объект.АналитикаЗначений.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
				Если НайденнаяСтрока.Количество() Тогда
					Объект.АналитикаЗначений.Удалить(НайденнаяСтрока[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Конструктор структуры объекта для расчета ячейки
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * АдресДанныхРасшифровки - Строка, Неопределено -
// * ПараметрыВыводаВидаБюджета - Строка, Неопределено -
// * АдресТаблицыКурсов - Строка, Неопределено -
// * ТребоватьУказанияКурсовДляКаждогоПериода - Булево -
// * КэшПараметровСтатей - См. БюджетированиеСервер.ЗаполнитьКэшПараметровСтатей
// * ВалютаСценария - СправочникСсылка.Валюты, Неопределено -  
// * Объект - ДанныеФормыСтруктура, Неопределено -
Функция СтруктураОбъектаДляРасчетаЯчейки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Объект");
	Результат.Вставить("ВалютаСценария");
	Результат.Вставить("КэшПараметровСтатей");
	Результат.Вставить("ТребоватьУказанияКурсовДляКаждогоПериода");
	Результат.Вставить("АдресТаблицыКурсов");
	Результат.Вставить("ПараметрыВыводаВидаБюджета");
	Результат.Вставить("АдресДанныхРасшифровки");
	
	Возврат Результат;
	
КонецФункции


// Возвращает структуру объекта для расчета ячейки на основании данных формы
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// Возвращаемое значение:
// 	см. БюджетнаяОтчетностьКлиентСервер.СтруктураОбъектаДляРасчетаЯчейки
Функция СтруктураПоОбъектуЭкземпляраБюджета(Форма) Экспорт
	
	ОбъектИПараметрыРасчета = СтруктураОбъектаДляРасчетаЯчейки();
	ОбъектИПараметрыРасчета.Объект = Форма.Объект;
	ОбъектИПараметрыРасчета.ВалютаСценария = Форма.ВалютаСценария;
	ОбъектИПараметрыРасчета.КэшПараметровСтатей = Форма.КэшПараметровСтатей;
	ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода = Форма.ТребоватьУказанияКурсовДляКаждогоПериода;
	ОбъектИПараметрыРасчета.АдресТаблицыКурсов = Форма.АдресТаблицыКурсов;
	ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета = Форма.ПараметрыВыводаВидаБюджета;
	ОбъектИПараметрыРасчета.АдресДанныхРасшифровки = Форма.АдресДанныхРасшифровки;
	
	Возврат ОбъектИПараметрыРасчета;
	
КонецФункции

Функция ПараметрыПериода(Объект, ПараметрыДанных = Неопределено) Экспорт
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Структура;
	КонецЕсли;
	
	ПараметрыДанных.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыДанных.Вставить("КонецПериода", Объект.ОкончаниеПериода);
	ПараметрыДанных.Вставить("ГраницаФактДанных", Объект.ГраницаФактДанных);
	
	Возврат ПараметрыДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

