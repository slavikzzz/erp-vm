
#Область ПрограммныйИнтерфейс

// См. ИнтеграцияShare.ОпубликоватьИПолучитьСсылкуНаСкачиваниеДокумента
//
Процедура ОпубликоватьИПолучитьСсылкуНаСкачиваниеДокумента(ПараметрыДокумента, Отказ) Экспорт
	
	ИнтеграцияShare.ОпубликоватьИПолучитьСсылкуНаСкачиваниеДокумента(ПараметрыДокумента, Отказ);
	
КонецПроцедуры

// См. ИнтеграцияShare.ЗагрузитьКраткиеДанныеДокументаПоПубличнойСсылке
//
Процедура ЗагрузитьКраткиеДанныеДокументаПоПубличнойСсылке(СсылкаДляСкачивания, ДанныеДокумента, Отказ) Экспорт
	
	ИнтеграцияShare.ЗагрузитьКраткиеДанныеДокументаПоПубличнойСсылке(СсылкаДляСкачивания, ДанныеДокумента, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДлительнаяОперацияВФоне(Знач НаименованиеЗадания, Знач ИмяПроцедуры, Знач УникальныйИдентификатор,
	Знач ДополнительныеПараметры) Экспорт
	
	ДоступныеПроцедуры = ДоступныеИменаПроцедур();
	Если ДоступныеПроцедуры.Найти(ИмяПроцедуры) = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Вызвана недопустимая процедура в фоне ""%1""';
									|en = 'The invalid ""%1"" procedure is called in the background'", ОбщегоНазначения.КодОсновногоЯзыка()), ИмяПроцедуры);
		ТекстСообщения = НСтр("ru = 'Внутренняя ошибка выполнения операции.';
								|en = 'Internal operation error.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НаименованиеЗадания, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ДополнительныеПараметры, ПараметрыВыполнения);

КонецФункции

// См. ИнтеграцияShare.ПараметрыОбъектаУчетаКПубликации
Функция ПараметрыОбъектаУчетаКПубликации(Знач ОбъектУчета) Экспорт
	
	Возврат ИнтеграцияShare.ПараметрыОбъектаУчетаКПубликации(ОбъектУчета);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоступныеИменаПроцедур()
	
	ИменаПроцедур = Новый Массив;
	ИменаПроцедур.Добавить(ИнтеграцияShareКлиентСервер.ИмяПроцедурыЗагрузитьЭлектронныйДокументПоИдентификаторуДокумента());
	ИменаПроцедур.Добавить(ИнтеграцияShareКлиентСервер.ИмяПроцедурыСоздатьВУчетеЭлектронныйДокумент());
	ИменаПроцедур.Добавить(ИнтеграцияShareКлиентСервер.ИмяПроцедурыОпубликоватьЭлектронныйДокумент());
	ИменаПроцедур.Добавить(ИнтеграцияShareКлиентСервер.ИмяПроцедурыЗагрузитьЭлектронныйДокументаПоПубличнойСсылкеИзСервиса());
	ИменаПроцедур.Добавить(ИнтеграцияShareКлиентСервер.ИмяПроцедурыЗагрузитьЭлектронныйДокументВОбъектУчета());
	
	Возврат ИменаПроцедур;

КонецФункции

#КонецОбласти