#Область СлужебныйПрограммныйИнтерфейс

// См. ЗарплатаКадрыКлиент.НастройкиТипа.
Процедура ПриОпределенииНастроекТипа(Тип, НастройкиТипа) Экспорт
	
	Если Тип = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ")
		Или Тип = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		
		НастройкиТипа.ПоказыватьКомандыРаботыСФайлами = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

//  Возвращаемое значение:
//  	Тип СправочникСсылка.ВидыВычетовНДФЛ, вычет с кодом 405
//
Функция ВычетВПределахНормативовПоАвторскимВознаграждениям() Экспорт

	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыВычетовНДФЛ.Код405");

КонецФункции

// Возвращает одну из трех ставок налогообложения нерезидента, наиболее соответствующих доходу.
//
// Параметры:
//	КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ - 
//
// Возвращаемое значение:
//	Тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента.
//
Функция СтавкаНалогообложенияКатегорииДоходовПоУмолчанию(КатегорияДохода) Экспорт

	Возврат ?(КатегорияДохода = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.КатегорииДоходовНДФЛ.Дивиденды") 
			Или КатегорияДохода = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05")
			Или КатегорияДохода = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10") 
			Или КатегорияДохода = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12"),
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09"),
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13"));
	
КонецФункции 

// Процедура открывает общую форму, показывающую, какие вычеты были применены при расчете НДФЛ в документе.
//
// Параметры:
//	Организация									- СправочникСсылка.Организации
//	Владелец									- ФормаКлиентскогоПриложения, элемент, в который необходимо возвратить результат оповещения.
//	МесяцНачисления								- Дата
//	СотрудникФизическоеЛицо						- СправочникСсылка.Сотрудники
//												- СправочникСсылка.ФизическиеЛица
//	ДатаПолученияДохода							- Дата, предполагаемая дата получения дохода
//	НеРаспределятьПоИсточникамФинансирования	- Булево, Истина - если распределение производится документом.
//
// Возвращаемое значение
//	Форма при закрытии отправляет оповещение владельцу, с которым передается содержимое ТЧ НДФЛ и
//	ПримененныеВычетыНаДетейИИмущественные.
//
Процедура ОткрытьФормуПодробнееОРасчетеНДФЛ(Организация, Владелец, МесяцНачисления, СотрудникФизическоеЛицо, ДатаПолученияДохода, НеРаспределятьПоИсточникамФинансирования = Ложь, ОбработчикВыбора = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;       

	ПараметрыФормы.Вставить("ТолькоПросмотр", Владелец.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("СведенияОбНДФЛ", Владелец.СведенияОбНДФЛ());
	ПараметрыФормы.Вставить("МесяцНачисления", МесяцНачисления);
	ПараметрыФормы.Вставить("СотрудникФизическоеЛицо", СотрудникФизическоеЛицо);
	ПараметрыФормы.Вставить("ДокументСсылка", Владелец.Объект.Ссылка);
	ПараметрыФормы.Вставить("ДатаПолученияДохода", ДатаПолученияДохода);
	
	Если НеРаспределятьПоИсточникамФинансирования Тогда
		ПараметрыФормы.Вставить("НеРаспределятьПоИсточникамФинансирования", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ПодробнееОРасчетеНДФЛ", ПараметрыФормы, Владелец, , , , ОбработчикВыбора);
	
КонецПроцедуры

// Формирует и выводит на экран печатные формы с двумерным штрих-кодом PDF417.
// 
// Параметры:
//	КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Функция ВывестиМашиночитаемуюФормуСправки2НДФЛ(ОписаниеКоманды) Экспорт
	
	Для Каждого СправкаНДФЛ Из ОписаниеКоманды.ОбъектыПечати Цикл
		ВывестиМашиночитаемуюФорму(СправкаНДФЛ, ОписаниеКоманды.Форма);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура НДФЛПередУдалением(Форма, НДФЛВыделенныеСтроки, Отказ) Экспорт
	
	УчетНДФЛКлиентВнутренний.НДФЛПередУдалением(Форма, НДФЛВыделенныеСтроки, Отказ);
	
КонецПроцедуры

Процедура НДФЛПриАктивизацииСтроки(Форма) Экспорт
	
	УчетНДФЛКлиентВнутренний.НДФЛПриАктивизацииСтроки(Форма);
	
КонецПроцедуры

Процедура НДФЛПриНачалеРедактирования(Форма, ТекущиеДанные, НоваяСтрока, Копирование) Экспорт
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(Форма, "НДФЛ", ТекущиеДанные, НоваяСтрока, Копирование);
	
	ОписаниеПанелиВычеты = Форма.ОписаниеПанелиВычетыНаКлиенте();
	
	УчетНДФЛКлиентСервер.НазначитьИдентификаторСтрокеНДФЛ(ТекущиеДанные, Форма[ОписаниеПанелиВычеты.ИмяГруппыФормыПанелиВычеты + "МаксимальныйИдентификаторСтрокиНДФЛ"], НоваяСтрока);
	
	Если Копирование ИЛИ НоваяСтрока Тогда
		НДФЛПриАктивизацииСтроки(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура НДФЛПриОкончанииРедактирования(Форма) Экспорт
	
	ОписаниеПанелиВычеты = Форма.ОписаниеПанелиВычетыНаКлиенте();
	ИмяГруппыФормыПанелиВычеты = ОписаниеПанелиВычеты.ИмяГруппыФормыПанелиВычеты;
	
	НДФЛТекущиеДанные = УчетНДФЛКлиентСервер.НДФЛТекущиеДанные(Форма, ОписаниеПанелиВычеты);
	
	НДФЛТекущиеДанные["ПримененныйВычетЛичный"] 						= Форма[ИмяГруппыФормыПанелиВычеты + "ПримененныйВычетЛичный"];
	НДФЛТекущиеДанные["ПримененныйВычетЛичныйКодВычета"] 				= Форма[ИмяГруппыФормыПанелиВычеты + "ПримененныйВычетЛичныйКодВычета"];
	НДФЛТекущиеДанные["ПримененныйВычетЛичныйКЗачетуВозврату"] 			= Форма[ИмяГруппыФормыПанелиВычеты + "ПримененныйВычетЛичныйКЗачетуВозврату"];
	НДФЛТекущиеДанные["ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета"] = Форма[ИмяГруппыФормыПанелиВычеты + "ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета"];
	
	УчетНДФЛКлиентСервер.ЗаполнитьПредставлениеВычетовЛичныхСтрокиНДФЛ(Форма, НДФЛТекущиеДанные, ОписаниеПанелиВычеты);
	Форма[ИмяГруппыФормыПанелиВычеты + "ПредставлениеВычетовЛичных"] = НДФЛТекущиеДанные.ПредставлениеВычетовЛичных;
	
	НДФЛПриАктивизацииСтроки(Форма);
	
КонецПроцедуры

Процедура УдалитьПримененныеВычетыНаДетейИИмущественные(Форма) Экспорт
 	ОписаниеПанелиВычеты = Форма.ОписаниеПанелиВычетыНаКлиенте();
 	ПутьКТаблицеВычетов = ОписаниеПанелиВычеты.НастраиваемыеПанели["ВычетыНаДетейИИмущественные"];
 	Если ПутьКТаблицеВычетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
 	ЧастиИмениТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКТаблицеВычетов, ".");
	ИмяТаблицыВычетов = ЧастиИмениТаблицы[ЧастиИмениТаблицы.ВГраница()];
 	ИдентификаторыУдаляемыхСтрокСтрокиНДФЛ = Форма[ОписаниеПанелиВычеты.ИмяГруппыФормыПанелиВычеты + "ИдентификаторыУдаляемыхСтрокСтрокиНДФЛ"];
 	Для Каждого ИдентификаторСтроки Из ИдентификаторыУдаляемыхСтрокСтрокиНДФЛ Цикл
 		НайденныеСтроки = Форма.Объект[ИмяТаблицыВычетов].НайтиСтроки(Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторСтроки));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Форма.Объект[ИмяТаблицыВычетов].Удалить(НайденнаяСтрока);
		КонецЦикла;
 	КонецЦикла;
КонецПроцедуры

Процедура ВычетыПриНачалеРедактирования(СтрокаПримененныеВычетыНаДетейИИмущественные, НоваяСтрока, СтрокаИсточникЗаполнения) Экспорт
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПримененныеВычетыНаДетейИИмущественные, СтрокаИсточникЗаполнения);
	СтрокаПримененныеВычетыНаДетейИИмущественные.МесяцПериодаПредоставленияВычета = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(СтрокаПримененныеВычетыНаДетейИИмущественные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой");	
	
КонецПроцедуры

Процедура КодДоходаПриИзменении(Форма, ГодНалоговогоПериода, ИмяТаблицы, КодДоходаИмяРеквизита, ИмяПоляКодВычета, КодВычетаИмяРеквизита, СуммаВычетаИмяРеквизита = "") Экспорт
	ДанныеТекущейСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	КодДохода = ДанныеТекущейСтроки[КодДоходаИмяРеквизита];
	
	ОписаниеКодаДохода = УчетНДФЛКлиентПовтИсп.ПолучитьОписаниеКодаДохода(КодДохода);		
	
	СоответствиеДоступныхВычетовДоходам = УчетНДФЛКлиентПовтИсп.ВычетыКДоходам(ГодНалоговогоПериода);
	
	МассивДоступныхВычетов = СоответствиеДоступныхВычетовДоходам.Получить(КодДохода);
	
	Если МассивДоступныхВычетов <> Неопределено Тогда 
		Форма.Элементы[ИмяПоляКодВычета].СписокВыбора.ЗагрузитьЗначения(МассивДоступныхВычетов);
		Если МассивДоступныхВычетов.Количество() = 1 Тогда  
			ДанныеТекущейСтроки[КодВычетаИмяРеквизита] = МассивДоступныхВычетов[0];
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки[КодВычетаИмяРеквизита]) Тогда
		ДанныеТекущейСтроки[КодВычетаИмяРеквизита] = ОписаниеКодаДохода.ВычетПоУмолчанию;
	КонецЕсли;
	
	Если СуммаВычетаИмяРеквизита <> "" Тогда 
		ДанныеТекущейСтроки[СуммаВычетаИмяРеквизита] = 0;		
	КонецЕсли;

КонецПроцедуры

Процедура КодДоходаАктивацииСтроки(Форма, ГодНалоговогоПериода, ИмяТаблицы, КодДоходаИмяРеквизита, ИмяПоляКодВычета) Экспорт
	ДанныеТекущейСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда 
		КодДохода = ДанныеТекущейСтроки[КодДоходаИмяРеквизита];
	
		СоответствиеДоступныхВычетовДоходам = УчетНДФЛКлиентПовтИсп.ВычетыКДоходам(ГодНалоговогоПериода);
		
		МассивДоступныхВычетов = СоответствиеДоступныхВычетовДоходам.Получить(КодДохода);

		Если МассивДоступныхВычетов <> Неопределено Тогда 
			Форма.Элементы[ИмяПоляКодВычета].СписокВыбора.ЗагрузитьЗначения(МассивДоступныхВычетов);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ФормаПодробнееОРасчетеНДФЛНДФЛВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ОписаниеТаблицыНДФЛ, МесяцНачисления, Организация) Экспорт
	
	УчетНДФЛКлиентВнутренний.ФормаПодробнееОРасчетеНДФЛНДФЛВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ОписаниеТаблицыНДФЛ, МесяцНачисления, Организация);
	
КонецПроцедуры

Процедура ФормаПодробнееОРасчетеНДФЛПерераспределитьНДФЛ(СтрокаНДФЛ, РаботаВБюджетномУчреждении) Экспорт
	
	УчетНДФЛКлиентВнутренний.ФормаПодробнееОРасчетеНДФЛПерераспределитьНДФЛ(СтрокаНДФЛ, РаботаВБюджетномУчреждении);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Для переданного описания ячейки рег.отчета выбирает подходящий отчет-расшифровку,
// настраивает соотв. вариант и получает подготовленную к показу форму отчета.
// Параметры:
//	ИДОтчета - Строка - идентификатор отчета (совпадает с именем объекта метаданных).
// 	ИДРедакцииОтчета - Строка - идентификатор редакции формы отчета (совпадает с именем формы объекта метаданных).
//  ИДИменПоказателей - Массив - массив идентификаторов имен показателей, по которым формируется расшифровка.
//  ПараметрыОтчета - Структура - структура параметров отчета, необходимых для формирования расшифровки.
// 
Функция ФормаРасшифровкиРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ИДИменПоказателей) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ИмяПоказателя = ИДИменПоказателей[0];
	ИмяНабораДанных = "";
	ИмяОтчетаРасшифровки = "";
	ИмяРасчета = "";
	
	Если ИДОтчета = "РегламентированныйОтчет6НДФЛ" Тогда
		ИмяОтчетаРасшифровки = "Расшифровка6НДФЛ";
		ИмяРасчета = ?(ПараметрыОтчета.ДатаКонцаПериодаОтчета < '20170101', "РасчетПоказателей_6НДФЛ_2016Кв1", "РасчетПоказателей_6НДФЛ_2017Кв1");
		ПараметрыОтчета.Вставить("ИмяСКД");
		Если ИмяПоказателя = "П000020013002" Тогда
			ИмяПоказателя = "П000020013001" 
		ИначеЕсли ИмяПоказателя = "П000020014002" Тогда
			ИмяПоказателя = "П000020014001"
		КонецЕсли;
		Если ИДИменПоказателей[0] <> ИмяПоказателя Тогда
			ИДИменПоказателей.Вставить(0,ИмяПоказателя);
		КонецЕсли;
		ДополнитьПараметрыОтчета6НДФЛ(ПараметрыОтчета, ИмяПоказателя);
		ИмяНабораДанных = ПараметрыОтчета.ИмяСКД;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет6_НДФЛ" Тогда
		ИмяОтчетаРасшифровки = "Расшифровка6_НДФЛ";
		ПараметрыОтчета.Вставить("ИмяСКД");
		Если ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			ИмяРасчета = "РасчетПоказателей_6НДФЛ_2021Кв1";
			ДополнитьПараметрыОтчета6НДФЛ_2021(ПараметрыОтчета, ИмяПоказателя);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
			ИмяРасчета = "РасчетПоказателей_6НДФЛ_2021Кв4";
			ДополнитьПараметрыОтчета6НДФЛ_2021(ПараметрыОтчета, ИмяПоказателя);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2023Кв1" Тогда
			ИмяРасчета = "РасчетПоказателей_6НДФЛ_2023Кв1";
			ДополнитьПараметрыОтчета6НДФЛ_2023(ПараметрыОтчета, ИмяПоказателя);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2024Кв1" Тогда
			ИмяРасчета = "РасчетПоказателей_6НДФЛ_2024Кв1";
			ДополнитьПараметрыОтчета6НДФЛ_2024(ПараметрыОтчета, ИмяПоказателя);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2024Кв2" Тогда
			ИмяРасчета = "РасчетПоказателей_6НДФЛ_2024Кв2";
			ДополнитьПараметрыОтчета6НДФЛ_2024_Кв2(ПараметрыОтчета, ИмяПоказателя);
		КонецЕсли;
		ИмяНабораДанных = ПараметрыОтчета.ИмяСКД;
	Иначе
		
	КонецЕсли;
	
	// Подготовка отчета-расшифровки к показу.
	Если ЗначениеЗаполнено(ИмяОтчетаРасшифровки) И ЗначениеЗаполнено(ИмяНабораДанных) Тогда
		
		ПараметрыОтчета.Вставить("ИсточникРасшифровки", "УчетНДФЛЗаполнениеОтчетности");
		ПараметрыОтчета.Вставить("ИмяОтчетаРасшифровки", ИмяОтчетаРасшифровки);
		ПараметрыОтчета.Вставить("ИмяРасчета", ИмяРасчета);
		ПараметрыОтчета.Вставить("ИДИменПоказателей", ИДИменПоказателей);
		
		ПараметрыФормы = ЗарплатаКадрыКлиент.ЗаполнитьПараметрыФормыРасшифровкиОтчетности(ПараметрыОтчета);
		ФормаРасшифровки = ПолучитьФорму("ОбщаяФорма.РасшифровкаРегламентированногоОтчетаЗарплата",ПараметрыФормы );
		Возврат ФормаРасшифровки
		
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

Процедура ДополнитьПараметрыОтчета6НДФЛ(ПараметрыОтчета, ИмяПоказателя)

	Раздел = ЗарплатаКадрыКлиентСервер.РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	НомерСтроки = ЗарплатаКадрыКлиентСервер.СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	
	ИмяНабораДанных = "";
	ПараметрыОтчета.Вставить("ИмяСКД",ИмяНабораДанных);
	Если Раздел = "01" Тогда
		НомерПодраздела = Лев(НомерСтроки, 2);
		Если НомерСтроки = "020" Или НомерСтроки = "025" Тогда
			ИмяНабораДанных = "Раздел1Доходы"
		ИначеЕсли НомерСтроки = "030" Тогда
			ИмяНабораДанных = "Раздел1Вычеты"
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) И НомерСтроки <> "060" Тогда
			ИмяНабораДанных = "Раздел1Налоги"
		КонецЕсли;
	ИначеЕсли Раздел = "02" И (НомерСтроки = "130" Или НомерСтроки = "140") Тогда	
		ИмяНабораДанных = "Раздел2"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяНабораДанных) Тогда
			
		ПараметрыОтчета.Вставить("ИмяСКД",ИмяНабораДанных);

		ЗаголовокРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Разд. %1, поле %2';
				|en = 'Sect. %1, field %2'"),
			Формат(Число(Раздел), "ЧРД=."),
			НомерСтроки);
			
		ПараметрыОтчета.Вставить("ЗаголовокРасшифровки",ЗаголовокРасшифровки);
			
		ЗаголовокПоля = НСтр("ru = 'Сумма';
							|en = 'Amount'");
		Если Раздел = "01" Тогда
			Если НомерСтроки = "030" Тогда
				ЗаголовокПоля = НСтр("ru = 'Сумма вычета';
									|en = 'Deduction amount'");
			ИначеЕсли НомерСтроки = "020" Или НомерСтроки = "025" Тогда
				ЗаголовокПоля = НСтр("ru = 'Сумма дохода';
									|en = 'Income amount'");
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("ЗаголовокПоля", ЗаголовокПоля);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрыОтчета6НДФЛ_2021(ПараметрыОтчета, ИмяПоказателя)

	Раздел = ЗарплатаКадрыКлиентСервер.РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	НомерСтроки = ЗарплатаКадрыКлиентСервер.СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	
	ИмяНабораДанных = "";
	ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);
	
	ЗаголовокПоля = НСтр("ru = 'Сумма';
						|en = 'Amount'");
	Если Раздел = "01" Тогда
		Если НомерСтроки = "022" Тогда
			ИмяНабораДанных = "Раздел1Налоги"
		КонецЕсли;
		Если НомерСтроки = "032" Тогда
			ИмяНабораДанных = "Раздел1Возвраты"
		КонецЕсли;
	ИначеЕсли Раздел = "02" Тогда	
		Если НомерСтроки = "110" Или НомерСтроки = "111" Или НомерСтроки = "112" Или НомерСтроки = "113" Или НомерСтроки = "115" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма дохода';
								|en = 'Income amount'");
			ИмяНабораДанных = "Раздел2Доходы"
		ИначеЕсли НомерСтроки = "130" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма вычета';
								|en = 'Deduction amount'");
			ИмяНабораДанных = "Раздел2Вычеты"
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) И НомерСтроки <> "120" И НомерСтроки <> "121" Тогда
			ИмяНабораДанных = "Раздел2Налоги"
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяНабораДанных) Тогда
			
		ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);

		ЗаголовокРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Разд. %1, поле %2';
				|en = 'Sect. %1, field %2'"),
			Формат(Число(Раздел), "ЧРД=."),
			НомерСтроки);
			
		ПараметрыОтчета.Вставить("ЗаголовокРасшифровки",ЗаголовокРасшифровки);
			
		Если Раздел = "02" Тогда
			Если НомерСтроки = "030" Тогда
			ИначеЕсли НомерСтроки = "020" Или НомерСтроки = "025" Тогда
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("ЗаголовокПоля", ЗаголовокПоля);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрыОтчета6НДФЛ_2023(ПараметрыОтчета, ИмяПоказателя)

	Раздел = ЗарплатаКадрыКлиентСервер.РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	НомерСтроки = ЗарплатаКадрыКлиентСервер.СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	
	ИмяНабораДанных = "";
	ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);
	
	ЗаголовокПоля = НСтр("ru = 'Сумма';
						|en = 'Amount'");
	Если Раздел = "01" Тогда
		Если НомерСтроки = "021" Тогда
			ИмяНабораДанных = "Раздел1Налоги"
		КонецЕсли;
		Если НомерСтроки = "022" Тогда
			ИмяНабораДанных = "Раздел1Налоги"
		КонецЕсли;
		Если НомерСтроки = "023" Тогда
			ИмяНабораДанных = "Раздел1Налоги"
		КонецЕсли;
		Если НомерСтроки = "024" Тогда
			ИмяНабораДанных = "Раздел1Налоги"
		КонецЕсли;
		Если НомерСтроки = "032" Тогда
			ИмяНабораДанных = "Раздел1Возвраты"
		КонецЕсли;
	ИначеЕсли Раздел = "02" Тогда	
		Если НомерСтроки = "110" Или НомерСтроки = "111" Или НомерСтроки = "112" Или НомерСтроки = "113" Или НомерСтроки = "115" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма дохода';
								|en = 'Income amount'");
			ИмяНабораДанных = "Раздел2Доходы"
		ИначеЕсли НомерСтроки = "130" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма вычета';
								|en = 'Deduction amount'");
			ИмяНабораДанных = "Раздел2Вычеты"
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) И НомерСтроки <> "120" И НомерСтроки <> "121" Тогда
			ИмяНабораДанных = "Раздел2Налоги"
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяНабораДанных) Тогда
			
		ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);

		ЗаголовокРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Разд. %1, поле %2';
				|en = 'Sect. %1, field %2'"),
			Формат(Число(Раздел), "ЧРД=."),
			НомерСтроки);
			
		ПараметрыОтчета.Вставить("ЗаголовокРасшифровки",ЗаголовокРасшифровки);
			
		Если Раздел = "02" Тогда
			Если НомерСтроки = "030" Тогда
			ИначеЕсли НомерСтроки = "020" Или НомерСтроки = "025" Тогда
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("ЗаголовокПоля", ЗаголовокПоля);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрыОтчета6НДФЛ_2024(ПараметрыОтчета, ИмяПоказателя)

	Раздел = ЗарплатаКадрыКлиентСервер.РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	НомерСтроки = ЗарплатаКадрыКлиентСервер.СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	
	ИмяНабораДанных = "";
	ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);
	
	ЗаголовокПоля = НСтр("ru = 'Сумма';
						|en = 'Amount'");
	Если Раздел = "01" Тогда
		Если НомерСтроки <> "010" Тогда
			ИмяНабораДанных = "Раздел1НалогиВозвраты"
		КонецЕсли;
	ИначеЕсли Раздел = "02" Тогда	
		Если НомерСтроки = "120" Или НомерСтроки = "121" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма дохода';
								|en = 'Income amount'");
			ИмяНабораДанных = "Раздел2Доходы"
		ИначеЕсли НомерСтроки = "130" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма вычета';
								|en = 'Deduction amount'");
			ИмяНабораДанных = "Раздел2Вычеты"
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) И НомерСтроки > "131" Тогда
			ИмяНабораДанных = "Раздел2Налоги"
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяНабораДанных) Тогда
			
		ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);

		ЗаголовокРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Разд. %1, поле %2';
				|en = 'Sect. %1, field %2'"),
			Формат(Число(Раздел), "ЧРД=."),
			НомерСтроки);
			
		ПараметрыОтчета.Вставить("ЗаголовокРасшифровки",ЗаголовокРасшифровки);
			
		Если Раздел = "02" Тогда
			Если НомерСтроки = "030" Тогда
			ИначеЕсли НомерСтроки = "020" Или НомерСтроки = "025" Тогда
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("ЗаголовокПоля", ЗаголовокПоля);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрыОтчета6НДФЛ_2024_Кв2(ПараметрыОтчета, ИмяПоказателя)

	Раздел = ЗарплатаКадрыКлиентСервер.РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	НомерСтроки = ЗарплатаКадрыКлиентСервер.СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя);
	
	ИмяНабораДанных = "";
	ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);
	
	ЗаголовокПоля = НСтр("ru = 'Сумма';
						|en = 'Amount'");
	Если Раздел = "01" Тогда
		Если НомерСтроки <> "010" Тогда
			ИмяНабораДанных = "Раздел1НалогиВозвраты"
		КонецЕсли;
	ИначеЕсли Раздел = "02" Тогда	
		Если НомерСтроки = "120" Или НомерСтроки = "121" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма дохода';
								|en = 'Income amount'");
			ИмяНабораДанных = "Раздел2Доходы"
		ИначеЕсли НомерСтроки = "130" Тогда
			ЗаголовокПоля = НСтр("ru = 'Сумма вычета';
								|en = 'Deduction amount'");
			ИмяНабораДанных = "Раздел2Вычеты"
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) И НомерСтроки > "131" Тогда
			ИмяНабораДанных = "Раздел2Налоги2024"
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяНабораДанных) Тогда
			
		ПараметрыОтчета.Вставить("ИмяСКД", ИмяНабораДанных);

		ЗаголовокРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Разд. %1, поле %2';
				|en = 'Sect. %1, field %2'"),
			Формат(Число(Раздел), "ЧРД=."),
			НомерСтроки);
			
		ПараметрыОтчета.Вставить("ЗаголовокРасшифровки",ЗаголовокРасшифровки);
			
		Если Раздел = "02" Тогда
			Если НомерСтроки = "030" Тогда
			ИначеЕсли НомерСтроки = "020" Или НомерСтроки = "025" Тогда
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("ЗаголовокПоля", ЗаголовокПоля);
	
	КонецЕсли;
	
КонецПроцедуры

#Область ПанельПримененныеВычеты

Процедура НДФЛПередНачаломИзменения(Форма, ТекущиеДанные, Отказ) Экспорт
	
	УчетНДФЛКлиентВнутренний.НДФЛПередНачаломИзменения(Форма, ТекущиеДанные, Отказ);
	
КонецПроцедуры

Процедура НДФЛУстановитьДоступностьЭлементовЛичныхВычетов(Форма) Экспорт
	
	УчетНДФЛКлиентВнутренний.НДФЛУстановитьДоступностьЭлементовЛичныхВычетов(Форма)
	
КонецПроцедуры

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Печать).
//	 
Процедура ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;		
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить).
//	 
Процедура ВыгрузитьДокументОтчетности(Ссылка, УникальныйИдентификаторФормы) Экспорт
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		ДанныеФайла = ЗарплатаКадрыВызовСервера.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификаторФормы);
		РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);	
	КонецЕсли;	
	
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект).
//	 
Процедура СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка) Экспорт
	Если Тип = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;	
КонецПроцедуры	

Процедура МожноИзменятьПримененныеВычеты(Форма, Отказ) Экспорт
	
	УчетНДФЛКлиентВнутренний.МожноИзменятьПримененныеВычеты(Форма, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура УстановитьОтборыПримененныхВычетов(Форма, НДФЛТекущиеДанные) Экспорт
	
	ОписаниеПанелиВычеты = Форма.ОписаниеПанелиВычетыНаКлиенте();
	
	ГруппаФормыПанельВычеты = Форма.Элементы.Найти(ОписаниеПанелиВычеты.ИмяГруппыФормыПанелиВычеты);
	
	Если ГруппаФормыПанельВычеты = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НастраиваемыеПанели = ОписаниеПанелиВычеты.НастраиваемыеПанели;
	
	ВычетыНаДетейИИмущественные = НастраиваемыеПанели.Получить("ВычетыНаДетейИИмущественные");
	Если ВычетыНаДетейИИмущественные <> Неопределено Тогда
		
		СтруктураОтбораПримененныеВычетыНаДетейИИмущественные = Новый Структура("ИдентификаторСтрокиНДФЛ");
		Если НДФЛТекущиеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбораПримененныеВычетыНаДетейИИмущественные, НДФЛТекущиеДанные);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ГруппаФормыПанельВычеты.Имя + "ВычетыНаДетейИИмущественные",
			"ОтборСтрок",
			Новый ФиксированнаяСтруктура(СтруктураОтбораПримененныеВычетыНаДетейИИмущественные));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ГруппаФормыПанельВычеты.Имя + "ВычетыНаДетейИИмущественные",
			"ТолькоПросмотр",
			(НДФЛТекущиеДанные = Неопределено));
		
	КонецЕсли;
	
	ВычетыКДоходам = НастраиваемыеПанели.Получить("ВычетыКДоходам");
	Если ВычетыКДоходам <> Неопределено Тогда
		
		СтруктураОтбораВычетыПримененныеКДоходам = Новый Структура("ФизическоеЛицо,Подразделение,ВычетПримененныйКДоходам");
		Если НДФЛТекущиеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбораВычетыПримененныеКДоходам, НДФЛТекущиеДанные);
			СтруктураОтбораВычетыПримененныеКДоходам.ВычетПримененныйКДоходам = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ГруппаФормыПанельВычеты.Имя + "ВычетыКДоходам",
			"ОтборСтрок",
			Новый ФиксированнаяСтруктура(СтруктураОтбораВычетыПримененныеКДоходам));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ГруппаФормыПанельВычеты.Имя + "ВычетыКДоходам",
			"ТолькоПросмотр",
			(НДФЛТекущиеДанные = Неопределено));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьPDF417

Процедура ВывестиМашиночитаемуюФорму(СправкаНДФЛ, Форма, ПараметрыФормирования = Неопределено) Экспорт
	
	Если ПараметрыФормирования = Неопределено Тогда
		ПараметрыКлиента = Новый Структура("ЭтоВебКлиент, ВебБраузер", Ложь, "");
		#Если ВебКлиент Тогда
			ПараметрыКлиента.ЭтоВебКлиент = Истина;
			ПараметрыКлиента.ВебБраузер = РегламентированнаяОтчетностьКлиент.ВебБраузер();
		#КонецЕсли
		ПараметрыФормирования = УчетНДФЛВызовСервера.ПараметрыФормированияМЧБ2НДФЛ(СправкаНДФЛ, ПараметрыКлиента, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("Форма", Форма);
	
	#Если ВебКлиент Тогда
		ВывестиМашиночитаемуюФормуВВебКлиенте(ПараметрыФормирования);
	#Иначе
		ВывестиМашиночитаемуюФормуВТонкомКлиенте(ПараметрыФормирования);
	#КонецЕсли
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуЧерезСервис(ПараметрыФормирования)
	
	ПараметрыДляСервиса = Новый Структура("ПроксиВХранилище,ДвоичныеДанные,ИмяФайлаМакета,НаименованиеИФНС");
	ЗаполнитьЗначенияСвойств(ПараметрыДляСервиса, ПараметрыФормирования);
	
	Если УчетНДФЛВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис(ПараметрыДляСервиса) Тогда
		
		ИмяФайлаОтчета = Неопределено;
		Если ПараметрыФормирования.Свойство("ИмяФайла", ИмяФайлаОтчета) И ЗначениеЗаполнено(ИмяФайлаОтчета) Тогда
			ИмяФайлаОтчета = ИмяФайлаОтчета + ".pdf";
		Иначе
			ИмяФайлаОтчета = "" + Новый УникальныйИдентификатор() + ".pdf";
		КонецЕсли;
		
		// Дополним список параметров для получения отчета
		ПараметрыСформированногоОтчета = ПараметрыДляСервиса.ПараметрыВызоваЭкспортнойПроцедуры;
		
		// Откроем специальную форму длительной операции. Из нее с возрастающим периодом
		// производится вызов серверной процедуры для проверки готовности отчета на веб-сервисе.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
		ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
		
		РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, ПараметрыФормирования.Форма).Открыть();
		Возврат;
	КонецЕсли;
	
	ПараметрыФормирования.ВыводЧерезВебСервис = Ложь;
	
#Если ВебКлиент Тогда
	ВывестиМашиночитаемуюФормуВВебКлиенте(ПараметрыФормирования);
#Иначе
	ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодуль(Неопределено, ПараметрыФормирования);
#КонецЕсли

КонецПроцедуры

#Если ВебКлиент Тогда

Процедура ВывестиМашиночитаемуюФормуВВебКлиенте(ПараметрыФормирования)
	
	Если ПараметрыФормирования.ВыводЧерезВебСервис Тогда
		ВывестиМашиночитаемуюФормуЧерезСервис(ПараметрыФормирования);
	Иначе
		Если НЕ ПараметрыФормирования.ВебБраузер = "MSIE" Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.';
										|en = 'Warning! You can print a form with 2D PDF417 barcode in Web client only using Microsoft Internet Explorer.'"));
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ПараметрыФормирования);
		НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	Если Подключено Тогда
		ВывестиМашиночитаемуюФормуВВебКлиентеВыборКаталога(ДополнительныеПараметры);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширения(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение(Подключено, ДополнительныеПараметры) Экспорт	
	
	Если НЕ Подключено Тогда
		Возврат;
	КонецЕсли;
		
	ВывестиМашиночитаемуюФормуВВебКлиентеВыборКаталога(ДополнительныеПараметры)
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеВыборКаталога(ПараметрыФормирования)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = НСтр("ru = 'Выберите каталог для размещения временных файлов.';
											|en = 'Select a temporary files directory.'");
	
	АктивизироватьОсновноеОкно();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеОтображенияДиалогаВыбораКаталога", ЭтотОбъект, ПараметрыФормирования);
	
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеОтображенияДиалогаВыбораКаталога(ВыбранныеФайлы, ПараметрыФормирования) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РазделительПутиОС = ПолучитьРазделительПути();
	
	КаталогВремФайлов = ВыбранныеФайлы[0];
	ИмяВременногоФайла = КаталогВремФайлов + РазделительПутиОС + "ФайлВыгрузки_" + Новый УникальныйИдентификатор + ".xml";
	КаталогМакета = КаталогВремФайлов;
	
	ПараметрыФормирования.Вставить("ИмяФайла", ИмяВременногоФайла);
	ПараметрыФормирования.Вставить("КаталогМакета", КаталогМакета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеЧерезМодульПродолжение", ЭтотОбъект, ПараметрыФормирования);
	
	ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохраненияФайлов.Интерактивно = Ложь;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыФормирования.ДвоичныеДанные);
	ДвоичныеДанныеФайла = ДвоичныеДанные.ДанныеСправки;
	ДвоичныеДанныеМакета = ДвоичныеДанные.ДанныеМакета;
	
	СохраняемыеФайлы = Новый Массив;
	СохраняемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяВременногоФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла)));
	СохраняемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(КаталогМакета + ПараметрыФормирования.ИмяФайлаМакета, ПоместитьВоВременноеХранилище(ДвоичныеДанныеМакета)));
	
	ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, СохраняемыеФайлы, ПараметрыСохраненияФайлов);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЧерезМодульПродолжение(Результат, ПараметрыФормирования) Экспорт
	
	ТаксДокПринт = РегламентированнаяОтчетностьКлиент.СоздатьОбъектДляФормированияМашиночитаемойФормы();
	ПараметрыФормирования.Вставить("ТаксДокПринт", ТаксДокПринт);
	
	Если ТаксДокПринт = Неопределено Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить';
															|en = 'Apply'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
															|en = 'Cancel'"));
		
		ДополнительныеПараметры = Новый Структура("ПараметрыФормирования, ИмяМетодаОповещения", ПараметрыФормирования, "ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для формирования машиночитаемой формы необходимо установить%1библиотечный модуль печати двухмерного штрихкода PDF417.';
																					|en = 'To generate a machine-readable form, install the %1 library print module of 2D PDF417 barcode. '"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	Иначе
		ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(Результат, ПараметрыФормирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(Результат, ПараметрыФормирования) Экспорт // АПК:581 Контроль избыточности экспорта не нужен.
	
	ВремКаталог = ПараметрыФормирования.КаталогМакета;
	НаименованиеИФНС = ПараметрыФормирования.НаименованиеИФНС;
	ТаксДокПринт = ПараметрыФормирования.ТаксДокПринт;
	ВремФайл = ПараметрыФормирования.ИмяФайла;
	Форма = ПараметрыФормирования.Форма;
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			НаименованиеИФНС = ПараметрыФормирования.НаименованиеИФНС;
			Если ЗначениеЗаполнено(НаименованиеИФНС) Тогда
				ТаксДокПринт.SetPrintTiffParam1C(НСтр("ru = 'Наименование налогового органа-получателя';
														|en = 'Recipient tax authority name'"), НаименованиеИФНС);
			КонецЕсли;
			АктивизироватьОсновноеОкно();
			ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
		
		ТаксДокПринт = Неопределено;
		
		Если Не Форма.Окно = Неопределено Тогда
			Форма.Окно.Активизировать();
		КонецЕсли;
	Иначе
		ТекстВопроса = НСтр("ru = 'Формирование бланка формы прервано. Не удалось подключить вспомогательную
			|компоненту для формирования бланков форм с двухмерным штрихкодом PDF417.
			|Возможно, браузер не настроен в соответствии с особенностями настройки веб-браузера.
			|Открыть справочную информацию с описанием особенностей настроек веб-браузера?';
			|en = 'Form blank generation is canceled. Cannot connect to the secondary
			|component to generate form blanks with 2D PDF417 barcode.
			|Maybe, the browser is not configured according to the web browser configuration features.
			|Open help information with description of web browser configuration?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОткрытьСправкуЗавершение", РегламентированнаяОтчетностьКлиент);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет)
	КонецЕсли;
	
КонецПроцедуры

Процедура АктивизироватьОсновноеОкно()

	ОкнаКлиентПрил = ПолучитьОкна();
	
	ОсновноеОкно = Неопределено;
	Для Каждого ОткрытоеОкно Из ОкнаКлиентПрил Цикл
		Если ОткрытоеОкно.Основное Тогда
			ОсновноеОкно = ОткрытоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ОсновноеОкно = Неопределено Тогда
		ОсновноеОкно.Активизировать();
	КонецЕсли;

КонецПроцедуры

#Иначе

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиенте(ПараметрыФормирования)
	
	ЭтоВебКлиент = Ложь;
	ПроксиВХранилище = "";
	ВыводЧерезВебСервис = ПараметрыФормирования.ВыводЧерезВебСервис;
	
	Если ВыводЧерезВебСервис Тогда
		
		ВывестиМашиночитаемуюФормуЧерезСервис(ПараметрыФормирования);
		
	Иначе
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 поддерживается только в 32-разрядной версии платформы.';
											|en = 'Warning! You can print a form with 2D PDF417 barcode only in 32-bit platform version.'"));
			Возврат;
		КонецЕсли;
		
		ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодуль(Неопределено, ПараметрыФормирования)
		
	КонецЕсли;
	
КонецПроцедуры

// АПК:441-выкл Временный файл передается во внешнюю среду

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодуль(Результат, ПараметрыФормирования) Экспорт // АПК:581 Контроль избыточности экспорта не нужен.
	
	РазделительПутиОС = ПолучитьРазделительПути();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	КаталогМакета = ПолучитьИмяВременногоФайла() + РазделительПутиОС + "ШаблоныМЧБ_" + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(КаталогМакета);
	
	ПараметрыФормирования.Вставить("ИмяФайла", ИмяВременногоФайла);
	ПараметрыФормирования.Вставить("КаталогМакета", КаталогМакета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодульПродолжение", ЭтотОбъект, ПараметрыФормирования);
	
	ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохраненияФайлов.Интерактивно = Ложь;
	
	СохраняемыеФайлы = Новый Массив;
	СохраняемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяВременногоФайла, ПараметрыФормирования.ДанныеСправки));
	СохраняемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(КаталогМакета + ПараметрыФормирования.ИмяФайлаМакета, ПараметрыФормирования.АдресМакета));
	
	ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, СохраняемыеФайлы, ПараметрыСохраненияФайлов);
	
КонецПроцедуры

// АПК:441-вкл

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодульПродолжение(Результат, ПараметрыФормирования) Экспорт
	
	ТаксДокПринт = РегламентированнаяОтчетностьКлиент.СоздатьОбъектДляФормированияМашиночитаемойФормы();
	
	Если ТаксДокПринт = Неопределено Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить';
															|en = 'Apply'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
															|en = 'Cancel'"));
		
		ДополнительныеПараметры = Новый Структура("ПараметрыФормирования, ИмяМетодаОповещения", ПараметрыФормирования, "ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодульЗавершение");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для формирования машиночитаемой формы необходимо установить%1библиотечный модуль печати двухмерного штрихкода PDF417.';
																					|en = 'To generate a machine-readable form, install the %1 library print module of 2D PDF417 barcode. '"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	Иначе
		ПараметрыФормирования.Вставить("ТаксДокПринт", ТаксДокПринт);
		ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодульЗавершение(Результат, ПараметрыФормирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезМодульЗавершение(Результат, ПараметрыФормирования) Экспорт // АПК:581 Контроль избыточности экспорта не нужен.
	
	ВремКаталог = ПараметрыФормирования.КаталогМакета;
	НаименованиеИФНС = ПараметрыФормирования.НаименованиеИФНС;
	ТаксДокПринт = ПараметрыФормирования.ТаксДокПринт;
	ВремФайл = ПараметрыФормирования.ИмяФайла;
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			Если ЗначениеЗаполнено(НаименованиеИФНС) Тогда
				ТаксДокПринт.SetPrintTiffParam1C(НСтр("ru = 'Наименование налогового органа-получателя';
														|en = 'Recipient tax authority name'"), НаименованиеИФНС);
			КонецЕсли;
			ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ТаксДокПринт = Неопределено;
	
	// АПК:280-выкл Исключение не обрабатываем т.к. на этом шаге не происходит удаления файлов.
	Попытка
		УдалитьФайлы(ВремФайл);
		УдалитьФайлы(ВремКаталог);
	Исключение
	КонецПопытки;
	// АПК:280-вкл
	
КонецПроцедуры

#КонецЕсли

Процедура ОбработатьОшибкуМодуляПечати(ОписаниеОшибки, ВремКаталог)
	
	КодОшибки = Сред(ОписаниеОшибки, СтрНайти(ОписаниеОшибки, "0x"), 10);
	
	ТекстПредупреждения = "";
	Если КодОшибки = "0x80040004" ИЛИ КодОшибки = "0x80040005" Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось установить параметр печати.';
									|en = 'Cannot set print option.'");
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		ТекстПредупреждения = НСтр("ru = 'При попытке печати в компоненте печати возникла неизвестная ошибка.';
									|en = 'Unknown error occurred in the print component while trying to print.'");
	ИначеЕсли КодОшибки = "0x80040032" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось найти файл выгрузки отчета.';
									|en = 'Print component could not find the report export file.'");
	ИначеЕсли КодОшибки = "0x80040033" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось получить доступ к файлу выгрузки отчета.';
									|en = 'Print component could not access the report export file.'");
	ИначеЕсли КодОшибки = "0x8004000A" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось распознать формат файла выгрузки.';
									|en = 'Print component could not recognize the export file format.'");
	ИначеЕсли КодОшибки = "0x8004000B" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось распознать формат файла выгрузки.';
									|en = 'Print component could not recognize the export file format.'");
	ИначеЕсли КодОшибки = "0x8004000F" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось распознать версию формата выгрузки из текста выгрузки.';
									|en = 'Print component could not recognize the export format version from the export text.'");
	ИначеЕсли КодОшибки = "0x80040010" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось распознать форму по КНД в файле выгрузки.';
									|en = 'Print component could not recognize the form by the CTD in the export file.'");
	ИначеЕсли КодОшибки = "0x80040014" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось сформировать машиночитаемую форму по причине некорректного файла выгрузки.';
									|en = 'Print component could not generate a machine-readable form due to an invalid export file.'");
	ИначеЕсли КодОшибки = "0x8004003C" Тогда
		ТекстПредупреждения = НСтр("ru = 'Отсутствует шаблон для формирования машиночитаемой формы.';
									|en = 'Template for generating a machine-readable form is absent.'");
	ИначеЕсли КодОшибки = "0x80040046" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось найти каталог с шаблонами для печати.';
									|en = 'Print component could not find a directory with print templates.'");
	ИначеЕсли КодОшибки = "0x80040047" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось получить доступ к каталогу с шаблонами для печати.';
									|en = 'Print component was unable to access the directory with print templates.'");
	ИначеЕсли КодОшибки = "0x80040050" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось сформировать машиночитаемую форму из-за ошибки в шаблоне печати или подмены шаблона.';
									|en = 'Print component could not generate a machine-readable form due to an error in the print template or template replacement.'");
	ИначеЕсли КодОшибки = "0x80050035" Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll).';
									|en = 'Cannot find one of the auxiliary libraries used by the print component (GNIVCPDOC.dll).'");
	ИначеЕсли КодОшибки = "0x800501C5" Тогда
		ТекстПредупреждения = НСтр("ru = 'Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), подменена или устарела.';
									|en = 'One of the auxiliary libraries used by the print component (GNIVCPDOC.dll) is replaced or obsolete.'");
	ИначеЕсли КодОшибки = "0x8004006E" Тогда
		ТекстПредупреждения = НСтр("ru = 'Пакет ""Microsoft XML 4.0 SP 2"", используемый компонентой печати, отсутствует или нарушена его целостность.';
									|en = 'The ""Microsoft XML 4.0 SP 2"" package used by the print components is absent or tampered.'");
	ИначеЕсли КодОшибки = "0x80040078" Тогда
		ТекстПредупреждения = НСтр("ru = 'Пакет ""Windows Script 5.6"", используемый компонентой печати, отсутствует или нарушена его целостность.';
									|en = 'The ""Windows Script 5.6"" package used by the print components is absent or tampered.'");
	ИначеЕсли КодОшибки = "0x80050030" Тогда
		ТекстПредупреждения = НСтр("ru = 'Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), повреждена.';
									|en = 'One of the auxiliary libraries used by the print component (GNIVCPDOC.dll) is damaged.'");
	ИначеЕсли КодОшибки = "0x8004003D" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось получить доступ к файлу требуемого шаблона.';
									|en = 'Print component could not access the requested template file.'");
	ИначеЕсли КодОшибки = "0x80040065" Тогда
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось обнаружить в системе ни одного принтера.';
									|en = 'Print component could not find any printers in the system.'");
	ИначеЕсли КодОшибки = "0x80040064" Тогда // печать прервана
		Возврат;
	Иначе
		ТекстПредупреждения = ОписаниеОшибки;
	КонецЕсли;

	ТекстПредупреждения = НСтр("ru = 'Возможно, необходимо переустановить компоненту или вспомогательные библиотеки, используемые ей.';
								|en = 'You may need to reinstall the component or auxiliary libraries used by it.'")
							+ Символы.ПС + НСтр("ru = '|Хотите переустановить компоненту сейчас?.';
												|en = '|Reinstall component now?.'")
							+ Символы.ПС + Символы.ПС + НСтр("ru = '|Подробнее:';
															|en = '|Details:'")
							+ Символы.ПС + ?(ЗначениеЗаполнено(ТекстПредупреждения), ТекстПредупреждения, НСтр("ru = '<подробная информация отсутствует>.';
																												|en = '<detailed information is not available>'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремКаталог", ВремКаталог);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОшибкуМодуляПечатиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Ошибка при формировании машиночитаемой формы';
																								|en = 'An error occurred when generating the machine-readable form'"));
	
КонецПроцедуры

Процедура ОбработатьОшибкуМодуляПечатиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
		РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		РегламентированнаяОтчетностьКлиент.ОбработатьОшибкуМодуляПечатиЗавершение(РезультатВопроса, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросУстановитьКомпонентуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяМетодаОповещения = ДополнительныеПараметры.ИмяМетодаОповещения;
	ПараметрыФормирования = ДополнительныеПараметры.ПараметрыФормирования;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВремКаталог = ПараметрыФормирования.КаталогМакета;
		
		ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
		РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		
		// Если не удалось создать объект и пользователь не против, то запускаем установку компоненты
		Если НЕ РегламентированнаяОтчетностьКлиент.УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.';
										|en = 'Generation of machine-readable form is canceled: the subcomponent is not installed in the application.'"));
		Иначе
			ТаксДокПринт = РегламентированнаяОтчетностьКлиент.СоздатьОбъектДляФормированияМашиночитаемойФормы();
			ПараметрыФормирования.Вставить("ТаксДокПринт", ТаксДокПринт);
		КонецЕсли;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(ИмяМетодаОповещения, ЭтотОбъект, ПараметрыФормирования);
	ВыполнитьОбработкуОповещения(Оповещение, РезультатВопроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
