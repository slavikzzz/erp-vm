////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отчетности по НДС.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//++ НЕ УТ

#Область ЗаполнениеРегламентированнойОтчетностиПоНДС

#Область ДекларацияНДС

// Создает список показателей декларации по НДС, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2009Кв4.
//
// Параметры:
//	ПоказателиОтчета - Структура - Структура параметров отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2009Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Ложь);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Ложь);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300011005", Истина, Ложь);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300019003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300020003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300021003", Истина, Ложь);			
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_01", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_02", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_03", Истина, Ложь);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_04", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_05", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_06", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_07", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_08", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_09", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003000", Истина, Ложь);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008004", Истина, Ложь);
	
КонецПроцедуры

// Заполняет контейнер с показателями декларации по НДС.
// Для версии отчета ФормаОтчета2009Кв4.
//
// Параметры:
//	ПараметрыОтчета - Структура - Структура параметров отчета.
//	Контейнер - Структура - Данные отчета.
//	СохранятьТаблицуРасшифровок - Булево - Признак необходимости сохранения таблицы расшифровок.
//
Процедура ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер,СохранятьТаблицуРасшифровок = Истина) Экспорт
	
	///////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ОБЩИХ ДАННЫХ
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", НЕ ПараметрыОтчета.ВидДокумента = 0);
	Запрос.УстановитьПараметр("ВесьОборотЗаПериод", 
		?(ПараметрыОтчета.Свойство("ВесьОборотЗаПериод"),ПараметрыОтчета.ВесьОборотЗаПериод, Ложь));
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
	
	// События	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	// Виды ценностей
	ВидыЦенностейНеРеализация = Новый СписокЗначений;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностейНеРеализация,
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр080 =  Новый СписокЗначений;
	ВидыЦенностейСтр080.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр080", ВидыЦенностейСтр080);
	
	ВидыЦенностейСтр110 =  Новый СписокЗначений;
	ВидыЦенностейСтр110.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр110", ВидыЦенностейСтр110);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр160 =  Новый СписокЗначений;
	ВидыЦенностейСтр160.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр160", ВидыЦенностейСтр160);
	
	ВидыЦенностейСтр180 =  Новый СписокЗначений;
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр190 =  Новый СписокЗначений;
	ВидыЦенностейСтр190.Добавить(Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр190", ВидыЦенностейСтр190);
	
	ВидыЦенностейСтр200 =  Новый СписокЗначений;
	ВидыЦенностейСтр200.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр200", ВидыЦенностейСтр200);
	
	ВидыЦенностейСтр210 =  Новый СписокЗначений;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностейСтр210,
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	Запрос.УстановитьПараметр("ВидыЦенностейСтр210", ВидыЦенностейСтр210);
	
	ВидыЦенностейСтр130 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр160.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр190.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр200.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр210.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр130.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_1011711", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", 	ВидыЦенностей_1011703);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", 	Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностиНА =  Новый СписокЗначений;
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностиНА);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты";

	Запрос.Выполнить();
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	Если Контейнер.Свойство("Раздел2") Тогда   
		Раздел2 = Контейнер.Раздел2;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|				И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|				И НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|	КОНЕЦ КАК Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|ПОМЕСТИТЬ НДСЗаписиКнигиПродажРаздел2
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	(НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация))
		|	И НДСЗаписиКнигиПродажОбороты.ВидЦенности В(&ВидыЦенностейНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагент.КПП КАК П000200001003,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000200002003,
		|	Контрагент.ИНН КАК П000200003003,
		|	Контрагент.ЮридическоеФизическоеЛицо КАК ПокупательЮридическоеФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК П000200007003,
		|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажРаздел2.НДСОборот), 0) КАК П000200006003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|							И НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеНачисленНДС)
		|						ИЛИ НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеРеализация)
		|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000200008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеПолученАванс)
		|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000200009003,
		|	Контрагент.Ссылка КАК П000200002003_Расшифровка
		|ИЗ
		|	НДСЗаписиКнигиПродажРаздел2 КАК НДСЗаписиКнигиПродажРаздел2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагент
		|		ПО НДСЗаписиКнигиПродажРаздел2.Покупатель = Контрагент.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажРаздел2.Покупатель,
		|	Контрагент.ИНН,
		|	Контрагент.КПП,
		|	Контрагент.ЮридическоеФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ,
		|	Контрагент.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Заменим обращение к реквизиту контрагент договора
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорКонтрагента.Владелец", "ДоговорКонтрагента." + БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();

		СтраницаРаздел2 = Раздел2[0].Данные[0].Значение;
		
		Если СтраницаРаздел2.П000200005003 = Неопределено Тогда
			СтраницаРаздел2.П000200005003 = "";
			ОКАТО = "";
		Иначе
			ОКАТО = СтраницаРаздел2.П000200005003;
		КонецЕсли;
		
		Для Каждого Показатель Из СтраницаРаздел2 Цикл
			СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока Раздел2.Количество() > 1 Цикл
			Раздел2.Удалить(1);
		КонецЦикла;
		
		ПерваяСтраница = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел2.Добавить().Данные = Новый СписокЗначений();
				Раздел2[Раздел2.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные[0].Значение;	
			
			ДанныеЛистаРаздел2ФИО = (Выборка.ПокупательЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
			
			СтраницаРаздел2.П000200001003 = Выборка.П000200001003;
			СтраницаРаздел2.П000200002003 = Выборка.П000200002003;
			СтраницаРаздел2.П000200003003 = Выборка.П000200003003;
			СтраницаРаздел2.П000200005003 = ОКАТО;
			СтраницаРаздел2.П000200006003 = Выборка.П000200006003;
			СтраницаРаздел2.П000200007003 = Выборка.П000200007003;
			СтраницаРаздел2.П000200008003 = Выборка.П000200008003;
			СтраницаРаздел2.П000200009003 = Выборка.П000200009003;
			
			Если ДанныеЛистаРаздел2ФИО Тогда
				СтраницаРаздел2.П000200001003 = "";
				// Если в строке есть запятые, то удалим их, т.к. они являются разделителями.
				П000200002003 = СтрЗаменить(Выборка.П000200002003, ",", "");
				ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(П000200002003);
				ФамилияРаздел2  = СокрЛП(ФИО.Фамилия);
				ИмяРаздел2      = СокрЛП(ФИО.Имя);
				ОтчествоРаздел2 = СокрЛП(ФИО.Отчество);
				
				// Покажем в разделе, разбитое значение по частям, в случае, если что-то ошибочное, необходимо поправить в отчете.
				П000200002003 = СокрЛП(ФамилияРаздел2 + " " + ИмяРаздел2 + " " + ОтчествоРаздел2);
			Иначе
				ФамилияРаздел2 = "";
				ИмяРаздел2 = "";
				ОтчествоРаздел2 = "";
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 3
	
	Если Контейнер.Свойство("Раздел3") Тогда
		Раздел3 = Контейнер.Раздел3;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300001003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300002003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300003003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр060)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300006003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300009005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр110)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300011005
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3,ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация В (&Организация)
		|				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация В (&Организация)
		|				И ВЫБОР
		|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|					КОГДА &СУчетомКорректировок = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты";
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр130)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300013003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр140)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300014003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300015003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр160)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300016003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300018003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр190)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300019003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр200)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300020003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр210)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300021003
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3,ЗначенияДляЗаполнения);
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 3 ПРИЛ. 1
	Если Контейнер.Свойство("Раздел3_Прил1") Тогда
		Если КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) Тогда
			
			Раздел3_Прил1 = Контейнер.Раздел3_Прил1;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости КАК ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ КАК П000310001000,
			|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК П000310003000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ КАК П000310004000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ КАК П000310005000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости КАК П000310006000,
			|	ЕСТЬNULL(СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДС), 0) КАК П000310007000,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата) КАК П000310008001_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций КАК П000310008002_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС КАК П000310008003_,
			|	ЕСТЬNULL(СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДСВосстановлен), 0) КАК П000310008004_,
			|	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации
			|ИЗ
			|	Документ.ВосстановлениеНДСПоОбъектамНедвижимости.ОбъектыНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимости
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНДСПоОбъектамНедвижимости.СчетаФактуры КАК ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры
			|		ПО ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка
			|			И ВосстановлениеНДСпоОбъектамНедвижимости.КлючСтроки = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КлючСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&КонецПериода, ДатаИсправления = ДАТАВРЕМЯ(1,1,1) И Организация В (&Организация)) КАК МестонахождениеОС
			|		ПО ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости = МестонахождениеОС.ОсновноеСредство
			|ГДЕ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Организация В(&Организация)
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата <= &КонецПериода
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата),
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС,
			|	МестонахождениеОС.АдресМестонахождения,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ,
			|	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации
			|
			|УПОРЯДОЧИТЬ ПО
			|	П000310008001_
			|АВТОУПОРЯДОЧИВАНИЕ
			|ИТОГИ
			|	СУММА(П000310006000),
			|	СУММА(П000310007000),
			|	СУММА(П000310008001_),
			|	СУММА(П000310008003_),
			|	СУММА(П000310008004_)
			|ПО
			|	ОбъектНедвижимости,
			|	П000310003000";
			
			ПерваяСтраница = Истина;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ОбъектыНедвижимости = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			СтраницаРаздел3_Прил1 =  Раздел3_Прил1[0].Данные[0].Значение;
			
			Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
				СтраницаРаздел3_Прил1[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
			КонецЦикла;
			
			Пока Раздел3_Прил1.Количество()>1 Цикл
				Раздел3_Прил1.Удалить(1);
			КонецЦикла;
			
			
			Пока ОбъектыНедвижимости.Следующий() Цикл
				
				КодыОпераций = ОбъектыНедвижимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Пока КодыОпераций.Следующий() Цикл
					
					Если Не ПерваяСтраница Тогда
						
						
						СтруктураНовойТаблицы = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
							СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						Раздел3_Прил1.Добавить().Данные = Новый СписокЗначений();
						Раздел3_Прил1[Раздел3_Прил1.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
						
					Иначе
						// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
						ПерваяСтраница = Ложь;
					КонецЕсли;
					
					СтраницаРаздел3_Прил1 = Раздел3_Прил1[Раздел3_Прил1.Количество()-1].Данные[0].Значение;		
					
					СтраницаРаздел3_Прил1.П000310001000 = ОбъектыНедвижимости.П000310001000;
					
					Год = КодыОпераций.Выбрать();
					
					НомерСтроки = 0;
					
					Пока Год.Следующий() Цикл
						
						Если НомерСтроки = 0 Тогда
							СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Год.АдресМестонахождения);
							
							Если СтруктураАдреса <> Неопределено Тогда
								СтраницаРаздел3_Прил1.П000310002000_01 = СтруктураАдреса.Индекс;
								СтраницаРаздел3_Прил1.П000310002000_02 = Год.П000310002000_02;
								СтраницаРаздел3_Прил1.П000310002000_03 = СтруктураАдреса.Район;
								СтраницаРаздел3_Прил1.П000310002000_04 = СтруктураАдреса.Город;
								СтраницаРаздел3_Прил1.П000310002000_05 = СтруктураАдреса.НаселенныйПункт;
								СтраницаРаздел3_Прил1.П000310002000_06 = СтруктураАдреса.Улица;
								СтраницаРаздел3_Прил1.П000310002000_07 = СтруктураАдреса.Дом;
								СтраницаРаздел3_Прил1.П000310002000_08 = СтруктураАдреса.Корпус;
								СтраницаРаздел3_Прил1.П000310002000_09 = СтруктураАдреса.Квартира;
							КонецЕсли;
							
							СтраницаРаздел3_Прил1.П000310003000 = Год.П000310003000;
							СтраницаРаздел3_Прил1.П000310004000 = Год.П000310004000;
							СтраницаРаздел3_Прил1.П000310005000 = Год.П000310005000;
							СтраницаРаздел3_Прил1.П000310006000 = Год.П000310006000;
							СтраницаРаздел3_Прил1.П000310007000 = Год.П000310007000;
						КонецЕсли;
						
						НомерСтроки = НомерСтроки + 1;
						
						СтраницаРаздел3_Прил1["П000310008001_" + НомерСтроки] = Формат(Год.П000310008001_, "ЧГ=0");
						СтраницаРаздел3_Прил1["П000310008002_" + НомерСтроки] = Год.П000310008002_;
						СтраницаРаздел3_Прил1["П000310008003_" + НомерСтроки] = Год.П000310008003_;
						СтраницаРаздел3_Прил1["П000310008004_" + НомерСтроки] = Год.П000310008004_;
						
						// Восстановление должно быть отражено в течении 10 лет.
						Если НомерСтроки = 10 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 4
	
	Если Контейнер.Свойство("Раздел4") Тогда
		Раздел4 = Контейнер.Раздел4;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400000102_1
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеПодтвержденаСтавка0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4,ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400000103_1
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНДС0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4,ЗначенияДляЗаполнения);
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 6
	
	Если Контейнер.Свойство("Раздел6") Тогда 
		Раздел6 = Контейнер.Раздел6;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000102_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000103_1
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеНеПодтвержденаСтавка0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6,ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000104_1
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНеПодтвержденНДС0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6,ЗначенияДляЗаполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает показатели Раздела 3 Декларации НДС.
//
// Параметры:
//	СтруктураПоказателей - Структура - Данные отчета.
//
Процедура РассчитатьПоказателиРаздела3Декларации(СтруктураПоказателей) Экспорт
	
	СтруктураПоказателей.П000300001003 = Окр(СтруктураПоказателей.П000300001003);
	СтруктураПоказателей.П000300001005 = СтруктураПоказателей.П000300001003 * 18 / 100;
	СтруктураПоказателей.П000300002003 = Окр(СтруктураПоказателей.П000300002003);
	СтруктураПоказателей.П000300002005 = СтруктураПоказателей.П000300002003 * 10 / 100;
	СтруктураПоказателей.П000300003003 = Окр(СтруктураПоказателей.П000300003003);
	СтруктураПоказателей.П000300003005 = СтруктураПоказателей.П000300003003 * 18 / 118;
	СтруктураПоказателей.П000300004003 = Окр(СтруктураПоказателей.П000300004003);
	СтруктураПоказателей.П000300004005 = СтруктураПоказателей.П000300004003 * 10 / 110;
	СтруктураПоказателей.П000300006003 = Окр(СтруктураПоказателей.П000300006003);
	СтруктураПоказателей.П000300006005 = СтруктураПоказателей.П000300006003 * 18 / 100;
	СтруктураПоказателей.П000300001005 = Окр(СтруктураПоказателей.П000300001005);
	СтруктураПоказателей.П000300002005 = Окр(СтруктураПоказателей.П000300002005);
	СтруктураПоказателей.П000300003005 = Окр(СтруктураПоказателей.П000300003005);
	СтруктураПоказателей.П000300004005 = Окр(СтруктураПоказателей.П000300004005);
	СтруктураПоказателей.П000300005005 = Окр(СтруктураПоказателей.П000300005005);
	СтруктураПоказателей.П000300006005 = Окр(СтруктураПоказателей.П000300006005);
	СтруктураПоказателей.П000300007005 = Окр(СтруктураПоказателей.П000300007005);
	СтруктураПоказателей.П000300008005 = Окр(СтруктураПоказателей.П000300008005);
	СтруктураПоказателей.П000300009005 = Окр(СтруктураПоказателей.П000300009005);
	
	СтруктураПоказателей.П000300012005 = СтруктураПоказателей.П000300001005 + СтруктураПоказателей.П000300002005 + СтруктураПоказателей.П000300003005
		+ СтруктураПоказателей.П000300004005 + СтруктураПоказателей.П000300005005 + СтруктураПоказателей.П000300006005
		+ СтруктураПоказателей.П000300007005 + СтруктураПоказателей.П000300008005 + СтруктураПоказателей.П000300009005;
			
	СтруктураПоказателей.П000300018003 = Окр(СтруктураПоказателей.П000300018003);
	СтруктураПоказателей.П000300019003 = Окр(СтруктураПоказателей.П000300019003);
	
	СтруктураПоказателей.П000300017003 = СтруктураПоказателей.П000300018003 + СтруктураПоказателей.П000300019003;
		
	СтруктураПоказателей.П000300013003 = Окр(СтруктураПоказателей.П000300013003);
	СтруктураПоказателей.П000300015003 = Окр(СтруктураПоказателей.П000300015003);
	СтруктураПоказателей.П000300016003 = Окр(СтруктураПоказателей.П000300016003);
	СтруктураПоказателей.П000300017003 = Окр(СтруктураПоказателей.П000300017003);
	СтруктураПоказателей.П000300020003 = Окр(СтруктураПоказателей.П000300020003);
	СтруктураПоказателей.П000300021003 = Окр(СтруктураПоказателей.П000300021003);
			
	СтруктураПоказателей.П000300022003 = СтруктураПоказателей.П000300013003 + СтруктураПоказателей.П000300015003 + СтруктураПоказателей.П000300016003
		+ СтруктураПоказателей.П000300017003 + СтруктураПоказателей.П000300020003 + СтруктураПоказателей.П000300021003;
		
	СтруктураПоказателей.П000300023003 = Макс(СтруктураПоказателей.П000300012005 - СтруктураПоказателей.П000300022003, 0);
	
	СтруктураПоказателей.П000300024003 = Макс(СтруктураПоказателей.П000300022003 - СтруктураПоказателей.П000300012005, 0);												
			
КонецПроцедуры

// Возвращает признак применения Федерального Закона от 27.11.2017 №335-ФЗ,
// который возлагает исчисление НДС на покупателя товаров, перечисленных в п.8 ст. 161:
// - лом и отходы черных и цветных металлов,
// - алюминий вторичный и его сплавы,
// - сырые шкуры животных.
//
// Параметры:
// 	Дата - Дата - В данном параметре передается дата, на которую необходимо определить признак применения 335-ФЗ.
//
// Возвращаемое значение:
//  Булево - признак применения:
//           Истина - ФЗ применяется;
//           Ложь   - ФЗ не применяется.
//
Функция ВедетсяУчетНДСПоФЗ335(Дата) Экспорт
	
	НачалоПримененияФЗ335 = '20180101';
	
	Если Дата < НачалоПримененияФЗ335 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КосвенныеНалогиТаможенныйСоюз

// Заполняет контейнер с показателями декларации по косвенным налогам (таможенный союз).
// Для версии отчета ФормаОтчета2010Кв3.
//
// Параметры:
//	ПараметрыОтчета - Структура - Структура параметров отчета.
//	Контейнер - Структура - Данные отчета.
//
Процедура ЗаполнитьОтчетКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);
	
	Если Контейнер.Свойство("Раздел1") Тогда
		
		Раздел1 = Контейнер.Раздел1;
		
		Если ПараметрыОтчета.ДатаПодписи > ПараметрыОтчета.мДатаКонцаПериодаОтчета Тогда
			ДатаПодписиДекларации = ПараметрыОтчета.ДатаПодписи;
		Иначе
			ДатаПодписиДекларации = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
		КонецЕсли;
		
		НачислениеНДС = УчетНДСФормированиеОтчетности.НачислениеНДСПоЗаявлениямОВвозе(ПараметрыОтчета, ДатаПодписиДекларации);
		
		Если НЕ НачислениеНДС.Пустой() Тогда
			
			ТаблицаНачислений = НачислениеНДС.Выгрузить();
			Раздел1.П000100003101 = ТаблицаНачислений[0].СуммаНДС;
			
		КонецЕсли; 
			
		
	КонецЕсли;
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);

КонецПроцедуры

// Создает список показателей декларации по косвенным налогам, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2010Кв3.
//
// Параметры:
//	ПоказателиОтчета - Структура - Структура параметров отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПоказателиОтчета) Экспорт

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100003101", Истина, Истина);

КонецПроцедуры

#КонецОбласти

#Область ФормированиеКнигИЖурнала

// Возвращает документы НДС для передачи в электронном виде.
//
// Параметры:
//	СтруктураПараметров - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации.
//		* НалоговыйПериод - Дата - Налоговый период.
//
// Возвращаемое значение:
//	Структура - см. НовыйСтруктураДокументовОтчетности.
//
Функция СформироватьДокументыОтчетности(СтруктураПараметров) Экспорт
	
	ДокументыОтчетности = НовыйСтруктураДокументовОтчетности();
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.НалоговыйПериод) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Дата", КонецКвартала(СтруктураПараметров.НалоговыйПериод));
	СтруктураПараметров.Вставить("ФорматПоПостановлению735", СтруктураПараметров.НалоговыйПериод >= '20141001');
	СписокДокументов = ПолучитьСписокДокументовОтчетности(СтруктураПараметров);
	
	Для каждого СтрокаСписка Из СписокДокументов Цикл
		СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, ДокументыОтчетности);
	КонецЦикла;
	
	Возврат ДокументыОтчетности;
	
КонецФункции

// Получает пакет электронных представлений документов.
//
// Параметры:
//  ВыгружаемыеДокументы - Массив - перечень документов для которых
//                 необходимо получить электронные представления в виде двоичных данных.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор по которому
//                 осуществляется привязка двоичных данных во временном хранилище.
//
// Возвращаемое значение:
//   Соответствие - соответствие переданных ссылок на документы и массива структур с полями:
//                 * ТипФайла - Строка - описание типа файла;
//                 * ИмяФайла - Строка - имя файла с расширением;
//                 * АдресВременногоХранилища - Строка - адрес временного хранилища, в котором размещены двоичные данные файла.
//
Функция ПолучитьЭлектронныеДокументы(ВыгружаемыеДокументы, УникальныйИдентификатор = Неопределено) Экспорт
	
	Возврат УчетНДСПереопределяемый.СформироватьЭлектронныеДокументы(ВыгружаемыеДокументы, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

// Возвращает порядок округления НДС (Федеральный Закон N 248-ФЗ).
//
// Параметры:
// 	Дата  	- 	Дата - В данном параметре передается дата,
//            	на которую необходимо определить порядок округления НДС.
// Возвращаемое значение:
//  Булево - 	признак применения:
//				1 	- сумма НДС исчисляется с копейками;
//				2 	- сумма НДС исчисляется в полных рублях.
//
Функция ПолучитьПорядокОкругленияНДС(Дата) Экспорт

	НачалоПримененияОкругления = '20140101';
	
	Если Дата < НачалоПримененияОкругления Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции // ПолучитьПорядокОкругленияНДС()

// Возвращает признак применения правил заполнения декларации НДС по приказу ФНС от 19.08.2020 N ЕД-7-3/591@.
// Помимо прочего, приказом меняется порядок заполнения раздела 7 декларации, графы 3 и 4 с 01.10.2020 заполняются
// для всех операций, кроме операций реализации не на территории РФ.
//
// Параметры:
//  Дата   - тип дата, в данном параметре передается
//           дата на которую необходимо определить признак применения приказа
// Возвращаемое значение:
//  Булево - признак применения
//        Истина - приказ применяется
//        Ложь   - приказ не применяется
//
Функция ПравилаЗаполненияДекларацииС4кв2020(Дата) Экспорт
	
	НачалоПримененияПравил = '20201001';
	
	Если Дата < НачалоПримененияПравил Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#Область ВыводКнигИЖурналов

// Формирует список кодов видов операций, актуальный на переданную дату.
//
// Параметры:
//   ЧастьЖурнала         - Перечисления.ЧастиЖурналаУчетаСчетовФактур - список различается для полученных и выставленных счетов-фактур.
//   СписокКодовОпераций  - СписокЗначений - список выбора элемента формы, в который помещается формируемый список кодов видов операций.
//   Период               - Дата - дата, на которую требуется получить список кодов видов операций.
//
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокКодовОпераций, Период) Экспорт
	
	СписокКодовОпераций.Очистить();
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Период);
	
	Если ВерсияКодовВидовОпераций = 1 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг';
													|en = '01 - Receipt of goods, works, services'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные';
													|en = '02 - Issued advances'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат от покупателя';
													|en = '03 - Return from the customer'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента';
													|en = '04 - Consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента';
													|en = '05 - Advances for consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездное получение товаров, работ, услуг';
													|en = '10 - Acquisition of goods, works, services without compensation'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Полученные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '11 - Received goods, rights, cl.3, 4, 5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы выданные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '12 - Advances issued for goods, rights, cl.3,4,5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("99", НСтр("ru = '99 - Вычет НДС по налоговым накладным';
													|en = '99 - VAT deduction according to VAT invoices'"));
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализованные товары, работы, услуги';
													|en = '01 - Sold goods, works, services'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные';
													|en = '02 - Received advances'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат поставщику';
													|en = '03 - Return to the supplier'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента';
													|en = '04 - Consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента';
													|en = '05 - Advances for consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК';
													|en = '06 - Tax agent, art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("07", НСтр("ru = '07 - Списание за счет прибыли, пп.2 п.1 ст. 146 НК';
													|en = '07 - Debiting out of profit, subcl. 2, cl. 1, art. 146 of the Tax Code'"));
			СписокКодовОпераций.Добавить("08", НСтр("ru = '08 - Строительно-монтажные работы, пп.3 п.1 ст. 146 НК';
													|en = '08 - Construction and installation works, subcl. 3, cl. 1, art. 146 of the Tax Code'"));
			СписокКодовОпераций.Добавить("09", НСтр("ru = '09 - Суммы, связанные с расчетами по оплате, ст. 162 НК';
													|en = '09 - Amounts related to payment settlements, art. 162 of TC'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг';
													|en = '10 - Donation of goods, works, services'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Реализованные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '11 - Sold goods, rights, cl.3, 4, 5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы полученные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '12 - Advances received for goods, rights, cl.3,4,5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг';
													|en = '01 - Receipt of goods, works, services'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные';
													|en = '02 - Issued advances'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат от покупателя';
													|en = '03 - Return from the customer'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента';
													|en = '04 - Consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента';
													|en = '05 - Advances for consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездное получение товаров, работ, услуг';
													|en = '10 - Acquisition of goods, works, services without compensation'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Полученные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '11 - Received goods, rights, cl.3, 4, 5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы выданные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '12 - Advances issued for goods, rights, cl.3,4,5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица';
													|en = '17 - Return from a customer-individual'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of received goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза';
													|en = '19 - Goods import from the Eurasian Economic Union'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ';
													|en = '20 - Goods import to the Russian Federation'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК';
													|en = '22 - Return, offset of advance payments, cl.5, art. 171, cl. 6, art. 172 of the Tax Code'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК';
													|en = '23 - Business trip expenses acc. to accountable form, cl. 7, art. 171 of the Tax Code'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней';
													|en = '24 - Confirmation of 0% rate after 180 days'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Подтверждение ставки 0% по ранее восстановленному НДС';
													|en = '25 - Confirmation of 0% rate according to previously restored VAT'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("99", НСтр("ru = '99 - Вычет НДС по налоговым накладным';
													|en = '99 - VAT deduction according to VAT invoices'"));
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализованные товары, работы, услуги';
													|en = '01 - Sold goods, works, services'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные';
													|en = '02 - Received advances'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат поставщику';
													|en = '03 - Return to the supplier'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента';
													|en = '04 - Consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента';
													|en = '05 - Advances for consignor goods, works, services'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК';
													|en = '06 - Tax agent, art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("07", НСтр("ru = '07 - Списание за счет прибыли, пп.2 п.1 ст. 146 НК';
													|en = '07 - Debiting out of profit, subcl. 2, cl. 1, art. 146 of the Tax Code'"));
			СписокКодовОпераций.Добавить("08", НСтр("ru = '08 - Строительно-монтажные работы, пп.3 п.1 ст. 146 НК';
													|en = '08 - Construction and installation works, subcl. 3, cl. 1, art. 146 of the Tax Code'"));
			СписокКодовОпераций.Добавить("09", НСтр("ru = '09 - Суммы, связанные с расчетами по оплате, ст. 162 НК';
													|en = '09 - Amounts related to payment settlements, art. 162 of TC'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг';
													|en = '10 - Donation of goods, works, services'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Реализованные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '11 - Sold goods, rights, cl.3, 4, 5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы полученные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК';
													|en = '12 - Advances received for goods, rights, cl.3,4,5.1, art. 154, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of shipped goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%';
													|en = '21 - VAT restoration, cl. 8, art. 145, cl. 3, art. 170, art. 171.1 of the Tax Code and in case of transactions subject to taxation at a rate of 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Счета-фактуры не составляются по письменному согласию сторон';
													|en = '26 - Tax invoices are not made up by written consent of the parties'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг';
													|en = '01 - Receipt of goods, works, services'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные';
													|en = '02 - Issued advances'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента';
													|en = '15 - Joint purchase of goods, works, services for own needs and for the consignor'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица';
													|en = '17 - Return from a customer-individual'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of received goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза';
													|en = '19 - Goods import from the Eurasian Economic Union'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ';
													|en = '20 - Goods import to the Russian Federation'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК';
													|en = '22 - Return, offset of advance payments, cl.5, art. 171, cl. 6, art. 172 of the Tax Code'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК';
													|en = '23 - Business trip expenses acc. to accountable form, cl. 7, art. 171 of the Tax Code'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней';
													|en = '24 - Confirmation of 0% rate after 180 days'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК';
													|en = '25 - VAT deduction if 0% rate is confirmed according to previously restored VAT as well as according to cl. 7, art. 172 of the Tax Code'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("32", НСтр("ru = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК';
													|en = '32 - VAT deduction to SEZ of Kaliningrad Oblast, cl. 14, art. 171 of the Tax Code'"));
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализация товаров, работ, услуг и операции, приравненные к ней';
													|en = '01 - Sale of goods, works, services and operations equal to it '"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные';
													|en = '02 - Received advances'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК';
													|en = '06 - Tax agent, art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг';
													|en = '10 - Donation of goods, works, services'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("14", НСтр("ru = '14 - Реализация прав, пп.1-4 ст. 155 НК';
													|en = '14 - Sale of rights, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместная реализация собственных и комиссионных товаров, работ, услуг';
													|en = '15 - Joint sale of own and consigned goods, works, services'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of shipped goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%';
													|en = '21 - VAT restoration, cl. 8, art. 145, cl. 3, art. 170, art. 171.1 of the Tax Code and in case of transactions subject to taxation at a rate of 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов';
													|en = '26 - Sale of goods, works, services to individuals who do not pay VAT, advance receipt'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("29", НСтр("ru = '29 - Корректировка по п.6 ст. 105.3 НК';
													|en = '29 - Adjustment according to cl. 6, art. 105.3 of TC'"));
			СписокКодовОпераций.Добавить("30", НСтр("ru = '30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК';
													|en = '30 - Goods shipment to SEZ of Kaliningrad Oblast, par. 1, subcl. 1.1, cl. 1, art. 151 of the Tax Code'"));
			СписокКодовОпераций.Добавить("31", НСтр("ru = '31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК';
													|en = '31 - VAT payment to SEZ of Kaliningrad Oblast, par. 2, subcl. 1.1, cl. 1, art. 151 of the Tax Code'"));
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 4 Тогда 
		
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг';
													|en = '01 - Receipt of goods, works, services'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные';
													|en = '02 - Issued advances'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента';
													|en = '15 - Joint purchase of goods, works, services for own needs and for the consignor'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица';
													|en = '17 - Return from a customer-individual'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of received goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза';
													|en = '19 - Goods import from the Eurasian Economic Union'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ';
													|en = '20 - Goods import to the Russian Federation'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК';
													|en = '22 - Return, offset of advance payments, cl.5, art. 171, cl. 6, art. 172 of the Tax Code'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК';
													|en = '23 - Business trip expenses acc. to accountable form, cl. 7, art. 171 of the Tax Code'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней';
													|en = '24 - Confirmation of 0% rate after 180 days'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК';
													|en = '25 - VAT deduction if 0% rate is confirmed according to previously restored VAT as well as according to cl. 7, art. 172 of the Tax Code'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("32", НСтр("ru = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК';
													|en = '32 - VAT deduction to SEZ of Kaliningrad Oblast, cl. 14, art. 171 of the Tax Code'"));
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("36", НСтр("ru = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК';
													|en = '36 - VAT deduction when selling to a foreign citizen, cl. 4.1 of art. 171 of the Tax Code'"));
			СписокКодовОпераций.Добавить("41", НСтр("ru = '41 - Авансы выданные за товары п.8 ст. 161 НК';
													|en = '41 - Advances issued for goods cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("42", НСтр("ru = '42 - Получение товаров п.8 ст. 161 НК';
													|en = '42 - Receipt of goods cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("43", НСтр("ru = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК';
													|en = '43 - Return and recognition of advance payments for goods, cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("44", НСтр("ru = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения';
													|en = '44 - Change of received goods cost toward decrease cl.8 of art.161 of the Tax Code'"));
			
			// Код, рекомендованный в письме ФНС от 14.05.2019 № СД-4-3/8916@
			СписокКодовОпераций.Добавить("45", НСтр("ru = '45 - Приобретение у иностранной организации услуг в электронной форме, п.2.1 ст. 171 НК';
													|en = '45 - Acquisition of electronic services from a foreign company, item 2.1 art. 171 of the Tax Code'"));
			
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализация товаров, работ, услуг и операции, приравненные к ней';
													|en = '01 - Sale of goods, works, services and operations equal to it '"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные';
													|en = '02 - Received advances'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК';
													|en = '06 - Tax agent, art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг';
													|en = '10 - Donation of goods, works, services'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("14", НСтр("ru = '14 - Реализация прав, пп.1-4 ст. 155 НК';
													|en = '14 - Sale of rights, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместная реализация собственных и комиссионных товаров, работ, услуг';
													|en = '15 - Joint sale of own and consigned goods, works, services'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of shipped goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%';
													|en = '21 - VAT restoration, cl. 8, art. 145, cl. 3, art. 170, art. 171.1 of the Tax Code and in case of transactions subject to taxation at a rate of 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов';
													|en = '26 - Sale of goods, works, services to individuals who do not pay VAT, advance receipt'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("29", НСтр("ru = '29 - Корректировка по п.6 ст. 105.3 НК';
													|en = '29 - Adjustment according to cl. 6, art. 105.3 of TC'"));
			СписокКодовОпераций.Добавить("30", НСтр("ru = '30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК';
													|en = '30 - Goods shipment to SEZ of Kaliningrad Oblast, par. 1, subcl. 1.1, cl. 1, art. 151 of the Tax Code'"));
			СписокКодовОпераций.Добавить("31", НСтр("ru = '31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК';
													|en = '31 - VAT payment to SEZ of Kaliningrad Oblast, par. 2, subcl. 1.1, cl. 1, art. 151 of the Tax Code'"));
			
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("33", НСтр("ru = '33 - Авансы полученные за товары п.8 ст. 161 НК';
													|en = '33 - Advance payments received for goods cl.8, art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("34", НСтр("ru = '34 - Реализация товаров п.8 ст. 161 НК';
													|en = '34 - Sale of goods cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("35", НСтр("ru = '35 - Оформление документа для компенсации НДС гражданину иностранного государства';
													|en = '35 - Register document for PIT compensation to a foreign citizen'"));
			СписокКодовОпераций.Добавить("37", НСтр("ru = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
													|en = '37 - Export sales of commodities at a rate of 18%, cl. 7 of art. 164 of the Tax Code'"));
			СписокКодовОпераций.Добавить("38", НСтр("ru = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
													|en = '38 - Export sales of non-resource goods at a rate of 18%, cl. 7 of art. 164 of the Tax Code'"));
			СписокКодовОпераций.Добавить("39", НСтр("ru = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК';
													|en = '39 - Export sales of non-resource goods at a rate of 10%, cl. 7 of art. 164 of the Tax Code'"));
			СписокКодовОпераций.Добавить("40", НСтр("ru = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК';
													|en = '40 - Sale of works (services) regarding exported goods at a rate of 18%, subcl.2.1-2.5,2.7 and 2.8 cl.1, cl.7 art.164 of TC'"));
			
		КонецЕсли;

	ИначеЕсли ВерсияКодовВидовОпераций = 5 Тогда
		
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг';
													|en = '01 - Receipt of goods, works, services'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные';
													|en = '02 - Issued advances'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента';
													|en = '15 - Joint purchase of goods, works, services for own needs and for the consignor'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица';
													|en = '17 - Return from a customer-individual'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of received goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза';
													|en = '19 - Goods import from the Eurasian Economic Union'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ';
													|en = '20 - Goods import to the Russian Federation'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК';
													|en = '22 - Return, offset of advance payments, cl.5, art. 171, cl. 6, art. 172 of the Tax Code'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК';
													|en = '23 - Business trip expenses acc. to accountable form, cl. 7, art. 171 of the Tax Code'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней';
													|en = '24 - Confirmation of 0% rate after 180 days'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК';
													|en = '25 - VAT deduction if 0% rate is confirmed according to previously restored VAT as well as according to cl. 7, art. 172 of the Tax Code'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("32", НСтр("ru = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК';
													|en = '32 - VAT deduction to SEZ of Kaliningrad Oblast, cl. 14, art. 171 of the Tax Code'"));
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("36", НСтр("ru = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК';
													|en = '36 - VAT deduction when selling to a foreign citizen, cl. 4.1 of art. 171 of the Tax Code'"));
			СписокКодовОпераций.Добавить("41", НСтр("ru = '41 - Авансы выданные за товары п.8 ст. 161 НК';
													|en = '41 - Advances issued for goods cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("42", НСтр("ru = '42 - Получение товаров п.8 ст. 161 НК';
													|en = '42 - Receipt of goods cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("43", НСтр("ru = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК';
													|en = '43 - Return and recognition of advance payments for goods, cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("44", НСтр("ru = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения';
													|en = '44 - Change of received goods cost toward decrease cl.8 of art.161 of the Tax Code'"));
			
			// Код, рекомендованный в письме ФНС от 14.05.2019 № СД-4-3/8916@
			СписокКодовОпераций.Добавить("45", НСтр("ru = '45 - Приобретение у иностранной организации услуг в электронной форме, п.2.1 ст. 171 НК';
													|en = '45 - Acquisition of electronic services from a foreign company, item 2.1 art. 171 of the Tax Code'"));
			
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализация товаров, работ, услуг и операции, приравненные к ней';
													|en = '01 - Sale of goods, works, services and operations equal to it '"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные';
													|en = '02 - Received advances'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК';
													|en = '06 - Tax agent, art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг';
													|en = '10 - Donation of goods, works, services'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости';
													|en = '13 - Capital construction, modernization (reconstruction) of real estate'"));
			СписокКодовОпераций.Добавить("14", НСтр("ru = '14 - Реализация прав, пп.1-4 ст. 155 НК';
													|en = '14 - Sale of rights, subcl. 1-4, art. 155 of TC'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместная реализация собственных и комиссионных товаров, работ, услуг';
													|en = '15 - Joint sale of own and consigned goods, works, services'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС';
													|en = '16 - Return from a customer who does not pay VAT'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения';
													|en = '18 - Change of shipped goods (works, services) cost toward decrease'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%';
													|en = '21 - VAT restoration, cl. 8, art. 145, cl. 3, art. 170, art. 171.1 of the Tax Code and in case of transactions subject to taxation at a rate of 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов';
													|en = '26 - Sale of goods, works, services to individuals who do not pay VAT, advance receipt'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК';
													|en = '27 - Collective commission tax invoice, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК';
													|en = '28 - Collective commission tax invoice for advance, cl. 3.1 of article 169 of TC'"));
			СписокКодовОпераций.Добавить("29", НСтр("ru = '29 - Корректировка по п.6 ст. 105.3 НК';
													|en = '29 - Adjustment according to cl. 6, art. 105.3 of TC'"));
			СписокКодовОпераций.Добавить("30", НСтр("ru = '30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК';
													|en = '30 - Goods shipment to SEZ of Kaliningrad Oblast, par. 1, subcl. 1.1, cl. 1, art. 151 of the Tax Code'"));
			СписокКодовОпераций.Добавить("31", НСтр("ru = '31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК';
													|en = '31 - VAT payment to SEZ of Kaliningrad Oblast, par. 2, subcl. 1.1, cl. 1, art. 151 of the Tax Code'"));
			
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("33", НСтр("ru = '33 - Авансы полученные за товары п.8 ст. 161 НК';
													|en = '33 - Advance payments received for goods cl.8, art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("34", НСтр("ru = '34 - Реализация товаров п.8 ст. 161 НК';
													|en = '34 - Sale of goods cl. 8 of art. 161 of the Tax Code'"));
			СписокКодовОпераций.Добавить("35", НСтр("ru = '35 - Оформление документа для компенсации НДС гражданину иностранного государства';
													|en = '35 - Register document for PIT compensation to a foreign citizen'"));
			СписокКодовОпераций.Добавить("37", НСтр("ru = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
													|en = '37 - Export sales of commodities at a rate of 18%, cl. 7 of art. 164 of the Tax Code'"));
			СписокКодовОпераций.Добавить("38", НСтр("ru = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
													|en = '38 - Export sales of non-resource goods at a rate of 18%, cl. 7 of art. 164 of the Tax Code'"));
			СписокКодовОпераций.Добавить("39", НСтр("ru = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК';
													|en = '39 - Export sales of non-resource goods at a rate of 10%, cl. 7 of art. 164 of the Tax Code'"));
			СписокКодовОпераций.Добавить("40", НСтр("ru = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК';
													|en = '40 - Sale of works (services) regarding exported goods at a rate of 18%, subcl.2.1-2.5,2.7 and 2.8 cl.1, cl.7 art.164 of TC'"));
			
			// Код, введенный в действие с 1 апреля 2024 года.
			СписокКодовОпераций.Добавить("47", НСтр("ru = '47 - Перепродажа товаров физических лиц, указанных в пп.5.1 и 5.2 ст.154 НК';
													|en = '47. Resale of person goods specified in subcl. 5.1 and 5.2, art. 154 of the Tax Code of the Russian Federation'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выводит шапку для дополнительного листа книги покупок или продаж.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ, в который выводятся данные.
//	Макет - ТабличныйДокумент - Макет табличного документа.
//	СтруктураПараметров - Структура - Содержит параметры формирования, см. отчеты книга покупок и продаж.
//	НомерДополнительногоЛиста - Число - Номер листа.
//
Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста) Экспорт
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Если Секция.Области.Найти("НомераГрафДекларация") <> Неопределено Тогда 
		Секция.Область("НомераГрафДекларация").Видимость = Ложь;
	КонецЕсли;
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(
		СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
		
	ЭтоКнигаПродаж = СтруктураПараметров.Свойство("ЭтоКнигаПродаж") И СтруктураПараметров.ЭтоКнигаПродаж = Истина;
	
	Если СтруктураПараметров.ВерсияПостановленияНДС1137 >= 5 Тогда
		Секция.Область("Период").Видимость = Ложь;
		Если ЭтоКнигаПродаж Тогда
			Секция.Область("НомераГрафДекларация91").Видимость = Ложь;
		Иначе
			Секция.Область("НомераГрафДекларация81").Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если СтруктураПараметров.ВерсияПостановленияНДС1137 >= 5 Тогда
		Если ЭтоКнигаПродаж Тогда
			СекцияЗаголовок = Макет.ПолучитьОбласть("Заголовок91");
		Иначе
			СекцияЗаголовок = Макет.ПолучитьОбласть("Заголовок81");
		КонецЕсли;
		Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
			СекцияЗаголовок.Параметры.НомерЛиста = НомерДополнительногоЛиста;

		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СекцияЗаголовок);
		
	ИначеЕсли СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;
	КонецЕсли;
		
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = СтрШаблон(
			?(ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора),
				НСтр("ru = 'Отбор: Контрагент в группе %1';
					|en = 'Filter: Counterparty in group %1'"),
				НСтр("ru = 'Отбор: Контрагент = %1';
					|en = 'Filter: Counterparty = %1'")),
			СтруктураПараметров.КонтрагентДляОтбора);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

// Возвращает дату и номер счета-фактуры для вывода в отчете.
//
// Параметры:
// 	ЗаписьКниги - Структура, ВыборкаИзРезультатаЗапроса - Содержит поля:
//		* СчетФактура - ДокументСсылка.*, ссылка на документ, указываемый в качестве измерения
//						в регистрах НДС.
//		* НомерСчетаФактуры - Строка, номер счета-фактуры полученный предварительно.
//		* ДатаСчетаФактуры  - Дата, дата счета-фактуры, полученная предварительно.
//		* ОбрабатыватьНомерДокумента - Булево, признак того, что необходимо исключить префиксы из номера
//									документа перед печатью.
//		* СчетФактураДокумент - ДокументСсылка.СчетФактураПолученный/СчетФактураВыданный - ссылка на 
//							подчиненный документ "счет-фактура" (необязательный)
//
// Возвращаемое значение:
//	Структура - Содержит ключи, описанные в УчетНДСПереопределяемый.НовыйПредставлениеСчетаФактуры().
//
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги) Экспорт
	
	ВариантыПредставленияСФ = УчетНДСПереопределяемый.ОпределитьДатуИНомерСчетаФактурыДляПечати(
		ЗаписьКниги);
	
	Возврат ВариантыПредставленияСФ;
		
КонецФункции

// Возвращает данные об ИНН/КПП в зависимости от вида контрагента.
//
// Параметры:
//	ИНН - Строка - ИНН контрагента.
//	КПП - Строка - КПП контрагента. Пустое значение для физического лица.
//	КонтрагентНаименование - Строка - Наименование контрагента.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* ИННФЛ - Строка - ИНН (для физического лица)
//		* Фамилия - Строка - Фамилия (для физического лица).
//		* Имя - Строка - Имя (для физического лица)
//		* Отчество - Строка - Отчество (для физического лица).
//		* ИННЮЛ - Строка - ИНН (для юридического лица).
//		* КПП - Строка - КПП (для юридического лица).
//		* НаимОрг - Строка - Наименование (для юридического лица).
//
Функция ПолучитьСтруктуруРеквизитовКонтрагента(ИНН, КПП, Знач КонтрагентНаименование = "") Экспорт
	
	СтруктураРеквизитовКонтрагента = Новый Структура();
	
	Если СтрДлина(СокрЛП(ИНН)) > 10 Тогда
		СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", ИНН);
		КонтрагентНаименование = СокрЛП(КонтрагентНаименование);
		Если ЗначениеЗаполнено(КонтрагентНаименование) Тогда 
			Если ВРег(Лев(КонтрагентНаименование, 3))  = "ИП " Тогда 
				КонтрагентНаименование = Сред(КонтрагентНаименование, 4)
			ИначеЕсли ВРег(Прав(КонтрагентНаименование, 3))  = " ИП" Тогда 
				КонтрагентНаименование = Лев(КонтрагентНаименование, СтрДлина(КонтрагентНаименование) - 3);
			КонецЕсли;	
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(КонтрагентНаименование);
			СтруктураРеквизитовКонтрагента.Вставить("Фамилия", 	?(СтруктураФИО.Фамилия <> Неопределено, СтруктураФИО.Фамилия, ""));
			СтруктураРеквизитовКонтрагента.Вставить("Имя", 		?(СтруктураФИО.Имя <> Неопределено, СтруктураФИО.Имя, ""));
			СтруктураРеквизитовКонтрагента.Вставить("Отчество", ?(СтруктураФИО.Отчество <> Неопределено, СтруктураФИО.Отчество, ""));
		КонецЕсли;	
	Иначе
		СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", ИНН);
		СтруктураРеквизитовКонтрагента.Вставить("КПП", КПП);
		Если  ЗначениеЗаполнено(КонтрагентНаименование) Тогда 
			СтруктураРеквизитовКонтрагента.Вставить("НаимОрг", КонтрагентНаименование);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураРеквизитовКонтрагента;

КонецФункции

// Добавляет запись книги покупок/продаж для проверки контрагента на сервере ФНС.
//
// Параметры:
//	СтруктураПараметров - Структура - Параметры формирования отчета.
//	Строка - ВыборкаИзРезультатаЗапроса - Данные строки.
//	ОбластьТабличногоДокумента - ТабличныйДокумент - Табличный документ с отчетом.
//	ДетальнаяЗапись - ВыборкаИзРезультатаЗапроса - Детальная запись выборки.
//	НомерРаздела - Число - Номер раздела отчета.
//
Процедура ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, Строка, ОбластьТабличногоДокумента, ДетальнаяЗапись = Неопределено, НомерРаздела = 0) Экспорт
	
	// Если это заполнение документа или декларации по НДС, тогда игнорируем
	Если СтруктураПараметров.Свойство("ЗаполнениеДокумента") И СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.Свойство("ЗаполнениеДекларации") И СтруктураПараметров.ЗаполнениеДекларации Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности даты события
	Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") 
		ИЛИ СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактурыСортировка;
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактуры;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	// Если это детальные записи, то ИНН, КПП и контрагента берем из них.
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк.
	Если ДетальнаяЗапись <> Неопределено Тогда
		ДанныеВСтроке = ДетальнаяЗапись;
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	Контрагент 						= Строка.Контрагент;
	НомерСтрокиТабличногоДокумента 	= ОбластьТабличногоДокумента.Верх;
	Дата 							= НачалоДня(ДатаСобытия);
	Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
		ИНН = ДанныеВСтроке.ПродавецИНН;
		КПП = ДанныеВСтроке.ПродавецКПП;
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		ИНН = ДанныеВСтроке.ПокупательИНН;
		КПП = ДанныеВСтроке.ПокупательКПП;
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		ИНН = ДанныеВСтроке.КонтрагентИНН;
		КПП = ДанныеВСтроке.КонтрагентКПП;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ДобавитьКонтрагентаНаПроверку(
		СтруктураПараметров, 
		НомерСтрокиТабличногоДокумента, 
		Контрагент, 
		ИНН, 
		КПП, 
		Дата, 
		НомерРаздела);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

// Возвращает Истина, если текущую строку книги покупок / продаж необходимо выводить в отчет.
//
// Параметры:
//	СтруктураПараметров - Структура - Параметры формирования отчета.
//	Строка - ВыборкаИзРезультатаЗапроса - Данные строки.
//	ЭтоИтог - Булево - Признак того, что строка является итогом.
//	ДетальнаяЗапись - ВыборкаИзРезультатаЗапроса - Детальная запись выборки.
//
// Возвращаемое значение:
//	Булево - Истина, если строку требуется выводить в отчет.
//
Функция ВыводитьСтроку(СтруктураПараметров, Строка, ЭтоИтог = Ложь, ДетальнаяЗапись = Неопределено) Экспорт
	
	// Если это детальные записи, то ИНН, КПП и контрагента берем из них.
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк.
	Если ДетальнаяЗапись <> Неопределено Тогда
		ДанныеВСтроке = ДетальнаяЗапись;
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	ВыводитьСтроку = Истина;
	Если ЭтоИтог Тогда
		// В строке итога нет ИНН, КПП и даты, есть только контрагент 
		СтруктураПараметров.Вставить("ЭтоИтог", Истина);
		
		ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				Неопределено, 
				Неопределено, 
				Неопределено);
	Иначе
		
		СтруктураПараметров.Вставить("ЭтоИтог", Ложь);
		
		Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
				
			ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПродавецИНН, 
				ДанныеВСтроке.ПродавецКПП, 
				?(ЗначениеЗаполнено(ДанныеВСтроке.ДатаСчетаФактурыСортировка), ДанныеВСтроке.ДатаСчетаФактурыСортировка, ДанныеВСтроке.СчетФактураДата));
					
		ИначеЕсли СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
				
				ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПокупательИНН, 
				ДанныеВСтроке.ПокупательКПП, 
				?(ЗначениеЗаполнено(ДанныеВСтроке.ДатаСчетаФактурыСортировка), ДанныеВСтроке.ДатаСчетаФактурыСортировка, ДанныеВСтроке.СчетФактураДата));
				
		ИначеЕсли СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
				
			ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.КонтрагентИНН, 
				ДанныеВСтроке.КонтрагентКПП, 
				ДанныеВСтроке.ДатаСчетаФактуры);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыводитьСтроку;
	
КонецФункции

// Уменьшает итоги по книге покупок / продаж по данным текущей вычитаемой строки.
//
// Параметры:
//	СтрокаИтога - Структура - Содержит ключи для строки итогов книги покупок / продаж.
//	СтрокаВычитаемая - Произвольный - Данные вычитаемой строки.
//	СтруктураПараметров - Структура - Параметры формирования отчета.
//
Процедура УменьшитьСуммуИтога(СтрокаИтога, СтрокаВычитаемая, СтруктураПараметров) Экспорт
	
	Для каждого Колонка Из СтрокаИтога Цикл
		Параметр = Колонка.Ключ;
		СтрокаИтога[Параметр] = СтрокаИтога[Параметр] - СтрокаВычитаемая[Параметр];
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает структуру итогов книги покупок.
//
// Возвращаемое значение:
//	Структура - Содержит ключи для строки итогов книги покупок.
//
Функция НоваяСтрокаИтоговКнигиПокупок() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ВсегоПокупок", 		0);
	Результат.Вставить("НДС",				0);
	Результат.Вставить("СуммаБезНДС18", 	0);
	Результат.Вставить("НДС18",				0);
	Результат.Вставить("СуммаБезНДС10", 	0);
	Результат.Вставить("НДС10", 			0);
	Результат.Вставить("НДС0", 				0);
	Результат.Вставить("СуммаСовсемБезНДС",	0);
	
	Возврат Результат;

КонецФункции

// Заменяет пустые значения измерения ИсправленныйСчетФактура регистров НДС на Неопределено.
//
// Параметры:
//	Движения - РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПокупок,  
//				РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПродаж - Наборы регистров НДС.
//
Процедура ПривестиПустоеИзмерениеИсправленныйСчетФактура(Движения) Экспорт
	
	Для каждого Движение Из Движения Цикл
	
		Если НЕ ЗначениеЗаполнено(Движение.ИсправленныйСчетФактура)
			И Движение.ИсправленныйСчетФактура <> Неопределено Тогда
			
			Движение.ИсправленныйСчетФактура = Неопределено;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с отбором для поиска счетов-фактур полученных.
//
// Возвращаемое значение:
//	Структура - Содержит ключи для поиска счета-фактуры.
// 
Функция НовыйПараметрыПоискаСчетовФактур() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоПериода"      , Неопределено);
	Результат.Вставить("КонецПериода"       , Неопределено);
	Результат.Вставить("Организация"        , Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Фильтр"             , Неопределено);
	Результат.Вставить("ВсеКромеФильтра"    , Ложь);
	Результат.Вставить("НаличиеСчетаФактуры", Неопределено);
	Результат.Вставить("ДатаСФНеБолее"      , Неопределено);
	Результат.Вставить("ИскатьПоОборотам"   , Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение константы ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС
// для разделения больших книг покупок и продаж на части.
//
// Возвращаемое значение:
//	Число - число строк в одной порции отчета.
// 
Функция ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС() Экспорт

	Результат = Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Получить();
	Если Результат = 0 Тогда
		Результат = 10000;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает текст с названием листа книги покупок или продаж, разделенной на порции.
//
// Параметры:
//	НазваниеРаздела - Строка - Основное название раздела книги.
//	СчетчикСегментов - Число - Номер текущей части.
//
// Возвращаемое значение:
//	Строка - Сформированное название листа.
//
Функция СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментов) Экспорт

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 (часть %2)';
			|en = '%1 (%2 part)'"), НазваниеРаздела, СчетчикСегментов);

КонецФункции

Процедура ЗаполнитьПодстрочникРНПТ(Знач ДетальнаяЗапись, Знач ЗаписьКниги, Знач ПараметрыСтрокиРНПТ, Знач СтруктураПараметров, Знач СтруктураСекций, Знач СчетчикСегментов, Знач ТабличныйДокумент) Экспорт

	Перем ОбластьТабличногоДокумента, СтруктураРНПТ, ЭлементСвРегНом;

	Если СтруктураПараметров.ВерсияПостановленияНДС1137 < 5 Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим подстрочник, если по счету-фактуре разные РНПТ
	Если ЗначениеЗаполнено(СтруктураПараметров.МассивСвРегНом)
		И СтруктураПараметров.МассивСвРегНом.Количество() > 1 Тогда
		
		Для ЭлементСвРегНом = 1 По СтруктураПараметров.МассивСвРегНом.Количество() - 1 Цикл
			СтруктураРНПТ = СтруктураПараметров.МассивСвРегНом.Получить(ЭлементСвРегНом);
			ПараметрыСтрокиРНПТ.РегНомер     = СтруктураРНПТ.РегНомПросл;
			ПараметрыСтрокиРНПТ.КолПрослеж   = СтруктураРНПТ.КолТовПросл;
			ПараметрыСтрокиРНПТ.СтоимПрослеж = СтруктураРНПТ.СтоимТовПросл;
			ПараметрыСтрокиРНПТ.ЕдПрослеж    = СтруктураРНПТ.ОКЕИ;
			
			ОбластьЗапись = СтруктураСекций.СекцияСтрокаРНПТ.Область("ОбластьЗапись");
			Если ЭлементСвРегНом = СтруктураПараметров.МассивСвРегНом.Количество() - 1 Тогда
				ОбластьЗапись.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			Иначе
				ОбластьЗапись.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			КонецЕсли;
			
			Если СтруктураПараметров.ЗаписьДополнительногоЛиста
			 Или СтруктураПараметров.ЗаполнениеДекларации
			 Или СтруктураПараметров.ЗаполнениеДокумента Тогда
				ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрокаРНПТ);
			Иначе
				ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрокаРНПТ);
				ДобавитьКонтрагентаНаПроверку(
					СтруктураПараметров,
					ЗаписьКниги,
					ОбластьТабличногоДокумента,
					ДетальнаяЗапись,
					СчетчикСегментов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиГраницуСтроки(Знач СтруктураПараметров, Знач СтруктураСекций) Экспорт

	Перем ОбластьЗапись;
	
	Если СтруктураПараметров.ВерсияПостановленияНДС1137 < 5 Тогда
		Возврат;
	КонецЕсли;

	ОбластьЗапись = СтруктураСекций.СекцияСтрока.Область("ОбластьЗаписьОсновная");
	ОбластьЗапись.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Если Не ЗначениеЗаполнено(СтруктураПараметров.МассивСвРегНом)
		Или СтруктураПараметров.МассивСвРегНом.Количество() = 1 Тогда
		ОбластьЗапись.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Дата, с которой вступает в силу закон о НДС для УСН
// 
// Возвращаемое значение:
//  Дата - Дата начала применения НДС на УСН    //Федеральный закон от 12.07.2024 № 176-ФЗ
Функция ДатаНачалаПримененияНДСнаУСН() Экспорт
	
	Возврат Дата(2025, 1, 1);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

Функция НовыйСтруктураДокументовОтчетности()
	
	Результат = Новый Структура();
	
	Результат.Вставить("СозданныеДокументы"      , Новый Массив);
	Результат.Вставить("ПерезаполненныеДокументы", Новый Массив);
	Результат.Вставить("УдаленныеДокументы"      , Новый Массив);
	Результат.Вставить("Ошибки"                  , Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Результат)
	
	Если НЕ ЗначениеЗаполнено(СтрокаСписка.Документ) Тогда
		ДокументОбъект                 = Документы[СтрокаСписка.Имя].СоздатьДокумент();
		ДокументОбъект.Организация     = СтруктураПараметров.Организация;
		ДокументОбъект.Дата            = СтрокаСписка.Дата;
		ДокументОбъект.НалоговыйПериод = СтрокаСписка.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП    = УчетНДСКлиентСервер.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
		
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.Последним);
		
		СтруктураПараметров.Дата            = СтрокаСписка.Дата;
		СтруктураПараметров.НалоговыйПериод = СтрокаСписка.НалоговыйПериод;
	Иначе
		ДокументОбъект	= СтрокаСписка.Документ.ПолучитьОбъект();
		
		СтруктураПараметров.Дата            = ДокументОбъект.Дата;
		СтруктураПараметров.НалоговыйПериод = ДокументОбъект.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП         = УчетНДСКлиентСервер.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
	КонецЕсли;
	
	Документы[СтрокаСписка.Имя].ЗаполнитьОбъект(ДокументОбъект, СтруктураПараметров);
	
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	
	Попытка
	
		Если НЕ ЭтоНовый
			И (СтрокаСписка.Имя = "ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"
				ИЛИ СтрокаСписка.Имя = "ДопЛистКнигиПродажДляПередачиВЭлектронномВиде")
			И ДокументОбъект.ТабличнаяЧасть.Количество() = 0 
			И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда
			
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			Результат.УдаленныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
		Иначе
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			Если ЭтоНовый Тогда
				Результат.СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			Иначе
				Результат.ПерезаполненныеДокументы.Добавить(ДокументОбъект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ЭтоНовый, НСтр("ru = 'Не создан документ %1: %2';
							|en = 'Document %1 is not created: %2'"), НСтр("ru = 'Не перезаполнен документ %1: %2';
																		|en = 'Document %1 is not refilled: %2'")),
			ДокументОбъект.Метаданные().Синоним,
			ОписаниеОшибки());
			
		Результат.Ошибки.Добавить(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСписокДокументовОтчетности(СтруктураПараметров)
	
	Перем ФормироватьКнигуПокупок, ФормироватьКнигуПродаж;
	Перем ФормироватьЖурналУчетаСчетовФактур;
	Перем ФормироватьДопЛистыКнигиПокупок, ФормироватьДопЛистыКнигиПродаж;
	Перем СписокДокументов;
	
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПокупок", ФормироватьКнигуПокупок) Тогда
		ФормироватьКнигуПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПродаж", ФормироватьКнигуПродаж) Тогда
		ФормироватьКнигуПродаж = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьЖурналУчетаСчетовФактур", ФормироватьЖурналУчетаСчетовФактур) Тогда
		ФормироватьЖурналУчетаСчетовФактур = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПокупок", ФормироватьДопЛистыКнигиПокупок) Тогда
		ФормироватьДопЛистыКнигиПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПродаж", ФормироватьДопЛистыКнигиПродаж) Тогда
		ФормироватьДопЛистыКнигиПродаж = Ложь;
	КонецЕсли;
	
	СписокДокументов	= Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Имя",				ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокДокументов.Колонки.Добавить("Документ",			Документы.ТипВсеСсылки());
	СписокДокументов.Колонки.Добавить("Дата",				ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокДокументов.Колонки.Добавить("Номер",				ОбщегоНазначения.ОписаниеТипаСтрока(30));
	СписокДокументов.Колонки.Добавить("НалоговыйПериод",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	
	НачалоПериода	= НачалоКвартала(СтруктураПараметров.НалоговыйПериод);
	КонецПериода	= КонецКвартала(СтруктураПараметров.НалоговыйПериод);
	
	НачалоПримененияПостановления1137 	= '20120401';
	НачалоПримененияПостановления735 	= '20141001';
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137",  НачалоПримененияПостановления1137);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления735",  	НачалоПримененияПостановления735);
	Запрос.УстановитьПараметр("ФормироватьКнигуПокупок",			ФормироватьКнигуПокупок);
	Запрос.УстановитьПараметр("ФормироватьКнигуПродаж",				ФормироватьКнигуПродаж);
	Запрос.УстановитьПараметр("ФормироватьЖурналУчетаСчетовФактур",	ФормироватьЖурналУчетаСчетовФактур);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПокупок",	ФормироватьДопЛистыКнигиПокупок);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПродаж",		ФормироватьДопЛистыКнигиПродаж);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупокДо735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод < &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупок735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродажДо735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод < &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродаж735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПокупок.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПокупок.Номер,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупокДо735
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод < &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	&КонецПериода КАК День,
	|	ДополнительныйЛистКнигиПокупок.Номер,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупок735
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод >= &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПродаж.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПродаж.Номер,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродажДо735
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод < &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	&КонецПериода КАК День,
	|	ДополнительныйЛистКнигиПродаж.Номер,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродаж735
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод >= &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""КнигаПокупокДляПередачиВЭлектронномВиде"" КАК Имя,
	|	КнигаПокупок.Ссылка КАК Документ,
	|	КнигаПокупок.Дата КАК Дата,
	|	КнигаПокупок.Номер КАК Номер,
	|	КнигаПокупок.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.КнигаПокупокДляПередачиВЭлектронномВиде КАК КнигаПокупок
	|ГДЕ
	|	&ФормироватьКнигуПокупок
	|	И КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПокупок.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КнигаПродажДляПередачиВЭлектронномВиде"",
	|	КнигаПродаж.Ссылка,
	|	КнигаПродаж.Дата,
	|	КнигаПродаж.Номер,
	|	КнигаПродаж.НалоговыйПериод
	|ИЗ
	|	Документ.КнигаПродажДляПередачиВЭлектронномВиде КАК КнигаПродаж
	|ГДЕ
	|	&ФормироватьКнигуПродаж
	|	И КнигаПродаж.Организация = &Организация
	|	И КнигаПродаж.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПродаж.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде"",
	|	ЖурналУчетаСчетовФактур.Ссылка,
	|	ЖурналУчетаСчетовФактур.Дата,
	|	ЖурналУчетаСчетовФактур.Номер,
	|	ЖурналУчетаСчетовФактур.НалоговыйПериод
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	&ФормироватьЖурналУчетаСчетовФактур
	|	И ЖурналУчетаСчетовФактур.Организация = &Организация
	|	И ЖурналУчетаСчетовФактур.НалоговыйПериод = &НачалоПериода
	|	И НЕ ЖурналУчетаСчетовФактур.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупокДо735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПокупокДо735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупокДо735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупокДо735 КАК ВТ_НДСЗаписиКнигиПокупокДо735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735 КАК ВТ_ДополнительныеЛистыКнигиПокупокДо735
	|		ПО ВТ_НДСЗаписиКнигиПокупокДо735.День = ВТ_ДополнительныеЛистыКнигиПокупокДо735.День
	|			И ВТ_НДСЗаписиКнигиПокупокДо735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупокДо735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПокупок735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупок735 КАК ВТ_НДСЗаписиКнигиПокупок735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупок735 КАК ВТ_ДополнительныеЛистыКнигиПокупок735
	|		ПО ВТ_НДСЗаписиКнигиПокупок735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупок735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродажДо735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродажДо735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПродажДо735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродажДо735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродажДо735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродажДо735 КАК ВТ_НДСЗаписиКнигиПродажДо735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродажДо735 КАК ВТ_ДополнительныеЛистыКнигиПродажДо735
	|		ПО ВТ_НДСЗаписиКнигиПродажДо735.День = ВТ_ДополнительныеЛистыКнигиПродажДо735.День
	|			И ВТ_НДСЗаписиКнигиПродажДо735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродажДо735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПродаж735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродаж735 КАК ВТ_НДСЗаписиКнигиПродаж735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродаж735 КАК ВТ_ДополнительныеЛистыКнигиПродаж735
	|		ПО ВТ_НДСЗаписиКнигиПродаж735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродаж735.НалоговыйПериод";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СписокДокументов = Результат.Выгрузить();
	КонецЕсли;
	
	СписокДокументов.Индексы.Добавить("Имя");
	
	Если ФормироватьКнигуПокупок
		И СписокДокументов.Найти("КнигаПокупокДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(0);
		НоваяСтрока.Имя				= "КнигаПокупокДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьКнигуПродаж
		И СписокДокументов.Найти("КнигаПродажДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(1);
		НоваяСтрока.Имя				= "КнигаПродажДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьЖурналУчетаСчетовФактур
		И СписокДокументов.Найти("ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(2);
		НоваяСтрока.Имя				= "ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Возврат	СписокДокументов;

КонецФункции

//-- НЕ УТ

#КонецОбласти
