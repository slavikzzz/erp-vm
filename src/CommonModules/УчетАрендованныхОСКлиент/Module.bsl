#Область СлужебныеПроцедурыИФункции

// Открывает форму для ввод срока аренды, после ввода устанавливает срок в объекте.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма.
// 	Объект - ДанныеФормыСтруктура - Объект.
// 	ОбработчикЗавершения - Неопределено - Обработчик формы, который нужно вызвать после ввода срока.
Процедура ВвестиСрокАренды(Форма, Объект, ОбработчикЗавершения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачалаАренды", Объект.ДатаНачалаАренды);
	ПараметрыФормы.Вставить("СрокЛет", Объект.СрокЛет);
	ПараметрыФормы.Вставить("СрокМес", Объект.СрокМес);
	ПараметрыФормы.Вставить("СрокДней", Объект.СрокДней);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОткрытьФорму("Справочник.ДоговорыАренды.Форма.ВводСрокаАренды",
			ПараметрыФормы,,,,, 
			Новый ОписаниеОповещения("ВвестиСрокАрендыЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВвестиСрокАрендыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено 
		ИЛИ ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ДополнительныеПараметры.Объект;
	
	Если Объект.ДатаНачалаАренды <> РезультатЗакрытия.ДатаНачалаАренды
		ИЛИ Объект.СрокЛет <> РезультатЗакрытия.СрокЛет
		ИЛИ Объект.СрокМес <> РезультатЗакрытия.СрокМес
		ИЛИ Объект.СрокДней <> РезультатЗакрытия.СрокДней Тогда
			
		ДополнительныеПараметры.Форма.СрокАрендыИзменен = Истина;
		
		Объект.ДатаНачалаАренды = РезультатЗакрытия.ДатаНачалаАренды;
		Объект.СрокЛет = РезультатЗакрытия.СрокЛет;
		Объект.СрокМес = РезультатЗакрытия.СрокМес;
		Объект.СрокДней = РезультатЗакрытия.СрокДней;
		
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
		
		Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность заполнения графика оплат и начислений по данным раздела "Расчеты"
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  РеквизитыДоговора - Структура -
//  
// Возвращаемое значение:
// 	Булево - Истина, если можно заполнить
Функция ПроверитьВозможностьЗаполненияГрафикаПоРасчетам(Объект, РеквизитыДоговора) Экспорт
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	ДатаОкончания = ВнеоборотныеАктивыКлиентСервер.ДатаОкончанияПоСроку(
						Объект.ДатаНачалаАренды, Объект.СрокЛет, Объект.СрокМес, Объект.СрокДней, Истина);
	
	ЭтоИзменениеУсловийАренды = УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено';
								|en = '""Contract"" is not filled in.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Договор", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	//
	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
		И НЕ ЭтоИзменениеУсловийАренды
		И НЕ ЗначениеЗаполнено(Объект.СуммаОбеспечительногоПлатежа) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Сумма обеспечительного платежа"" не заполнено';
								|en = 'The ""Security deposit amount"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СуммаОбеспечительногоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
		И НЕ ЗначениеЗаполнено(Объект.ДатаПервогоОбеспечительногоПлатежа) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Дата первого обеспечительного платежа"" не заполнено';
								|en = 'The ""First security deposit date"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоОбеспечительногоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПервогоПлатежа)
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Дата первого платежа за услуги по аренде"" не заполнено';
								|en = 'The ""Date of the first payment for rental services"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если РеквизитыДоговора.ЕстьВыкупПредметовАренды
		И НЕ ЗначениеЗаполнено(Объект.СуммаВыкупаПредметовАренды) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Сумма выкупа предметов аренды"" не заполнено';
								|en = 'The ""Amount of rental objects redemption"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СуммаВыкупаПредметовАренды", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	//
	Если Объект.ДатаНачалаАренды = '000101010000'
		ИЛИ Объект.СрокЛет = 0 И Объект.СрокМес = 0 И Объект.СрокДней = 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Срок аренды"" не заполнено';
								|en = 'The ""Rental period"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СрокАренды", , ЕстьОшибки);
	КонецЕсли;

	//
	Если Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
		И НЕ ЗначениеЗаполнено(Объект.ОплатаУслугиПоАренде) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Платеж за услуги по аренде"" не заполнено';
								|en = 'The ""Payment for rental services"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОплатаУслугиПоАренде", "Объект", ЕстьОшибки);
	КонецЕсли;

	Если Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
		И НЕ ЗначениеЗаполнено(Объект.НачислениеУслугиПоАренде) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Начисление услуги по аренде"" не заполнено';
								|en = 'The ""Accrual of rental services"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "НачислениеУслугиПоАренде", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
		И Объект.ДатаПервогоОбеспечительногоПлатежа > ДатаОкончания
		И Объект.ДатаПервогоОбеспечительногоПлатежа <> '000101010000'
		И ДатаОкончания <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Обеспечительный платеж должен быть не позже окончания срока аренды';
								|en = 'The security deposit must be no later than the end of the rental term'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоОбеспечительногоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если Объект.ДатаПервогоПлатежа < Объект.ДатаНачалаАренды
		И Объект.ДатаПервогоПлатежа <> '000101010000'
		И Объект.ДатаНачалаАренды <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Первый платеж должен быть не раньше даты начала аренды';
								|en = 'The first payment must not be earlier than the rental start date'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяет возможность расчета ставки или стоимости.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды, ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде -
// 	РеквизитыДоговора - Структура -
// 	ИмяТабличнойЧастиОС - Строка -
// 	СообщатьОбОшибках - Булево -
// 	ПредыдущиеУсловия - Неопределено, Структура - См. УчетАрендованныхОС.СтоимостьПоПредыдущимУсловиям
// 	
// Возвращаемое значение:
// 	Булево - 
Функция МожноРассчитатьСтавкуИлиСтоимость(Объект, РеквизитыДоговора, ИмяТабличнойЧастиОС, СообщатьОбОшибках = Истина, ПредыдущиеУсловия = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	ПоФактическойСтоимости = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости"));
	
	СписокОшибок = Новый Массив;
	
	Если ПоФактическойСтоимости Тогда
		
		Если ИмяТабличнойЧастиОС <> "" Тогда
			
			Если Объект.ОС.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить список предметов аренды и их стоимость';
										|en = 'Fill in the list of rental objects and their cost'");
				ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "ОС", "Объект", ЕстьОшибки);
			КонецЕсли;
			
			Для Каждого ДанныеСтроки Из Объект.ОС Цикл
				
				Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
					И ДанныеСтроки.СправедливаяСтоимость = 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 необходимо заполнить справедливую стоимость';
													|en = 'Fill in the fair value in line %1'"), Формат(ДанныеСтроки.НомерСтроки, "ЧГ=;"));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "СправедливаяСтоимость");
					ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, Поле, "Объект", ЕстьОшибки);
					
				ИначеЕсли РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг")
					И ДанныеСтроки.Стоимость = 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 необходимо заполнить стоимость';
													|en = 'Fill in the cost in line %1'"), Формат(ДанныеСтроки.НомерСтроки, "ЧГ=;"));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "Стоимость");
					ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, Поле, "Объект", ЕстьОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе 
			
			Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
				И Объект.СправедливаяСтоимость = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить справедливую стоимость';
										|en = 'Fill in the fair value'");
				ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "СправедливаяСтоимость", "Объект", ЕстьОшибки);
				
			ИначеЕсли РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг")
				И Объект.Стоимость = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить стоимость';
										|en = 'Fill in the cost'");
				ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "Стоимость", "Объект", ЕстьОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект) Тогда
			ДатаНачалаАренды = Объект.ДатаНачалаАренды;
			СтоимостьПредметовАренды =
				УчетАрендованныхОСКлиентСервер.СтоимостьПредметовАренды(Объект, РеквизитыДоговора, ИмяТабличнойЧастиОС);
			ПриведеннаяСтоимость = УчетАрендованныхОСКлиентСервер.ПриведеннаяСтоимость(
				СтоимостьПредметовАренды,
				Объект.ГрафикОплатУслуг, 
				Объект.ДатаНачалаАренды);
		Иначе
			ДатаНачалаАренды = НачалоДня(Объект.Дата);
			КоэффициентРаспределения =
				УчетАрендованныхОСКлиентСервер.КоэффициентРаспределенияСтоимости(Объект.ОС, РеквизитыДоговора);
			
			СтоимостьДобавленныхПредметовАренды =
				УчетАрендованныхОСКлиентСервер.СтоимостьДобавленныхПредметовАренды(Объект.ОС);
			
			ПриведеннаяСтоимость = 
				ПредыдущиеУсловия.ПриведеннаяСтоимость
				* КоэффициентРаспределения
				+ СтоимостьДобавленныхПредметовАренды;
				
		КонецЕсли;
		
		ВсегоПлатежейБезНДС = УчетАрендованныхОСКлиентСервер.ВсегоПлатежейБезНДС(
									Объект.ГрафикОплатУслуг, ДатаНачалаАренды, Объект.СтавкаНДС);
		
		Если ПриведеннаяСтоимость > ВсегоПлатежейБезНДС И ВсегоПлатежейБезНДС > 0 Тогда
			 
			Объект.ПриведеннаяСтоимость = ПриведеннаяСтоимость;
			Объект.ПроцентнаяСтавка = 0;
			Объект.СуммаПроцентов = 0;
			
			Если НЕ УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект) Тогда
				Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг") Тогда
					ТекстСообщения = НСтр("ru = 'Сумма вложений лизингодателя (%1) должна быть меньше суммы платежей без НДС (%2)';
											|en = 'The amount of the lessor''s investments (%1) must be less than the amount of payments excluding VAT (%2)'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Стоимость предметов аренды (%1) должна быть меньше суммы платежей без НДС (%2)';
											|en = 'The cost of rental objects (%1) must be less than the amount of payments excluding VAT (%2)'");
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Приведенная стоимость (%1) должна быть меньше суммы будущих платежей без НДС (%2)';
										|en = 'The present value (%1) must be less than the amount of future payments excluding VAT (%2)'");
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ПриведеннаяСтоимость, "ЧДЦ=2"), Формат(ВсегоПлатежейБезНДС, "ЧДЦ=2"));

			ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "ПроцентнаяСтавка",, ЕстьОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ДатаПервогоПлатежа < Объект.ДатаНачалаАренды
		И Объект.ДатаПервогоПлатежа <> '000101010000'
		И Объект.ДатаНачалаАренды <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Первый платеж должен быть не раньше даты начала аренды (%1)';
								|en = 'The first payment must not be earlier than the rental start date (%1)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Объект.ДатаНачалаАренды,"ДЛФ=D;"));
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "ДатаПервогоПлатежа", "Объект", ЕстьОшибки);
		
	КонецЕсли;
	
	ДатаУслугаПоАренде = '000101010000';
	ДатаВыкупнаяСтоимость = '000101010000';
	ДатаОбеспечительныйПлатеж = '000101010000';
	Для Каждого ИсходнаяСтрокаГрафика Из Объект.ГрафикОплатУслуг Цикл		
		
		Если ИсходнаяСтрокаГрафика.УслугаПоАренде <> 0 
			И ИсходнаяСтрокаГрафика.Дата <> '000101010000' Тогда
			ДатаУслугаПоАренде = ?(
				ДатаУслугаПоАренде <> '000101010000', 
				Мин(ДатаУслугаПоАренде, ИсходнаяСтрокаГрафика.Дата), 
				ИсходнаяСтрокаГрафика.Дата);
		КонецЕсли;
		
		Если ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость <> 0 
			И ИсходнаяСтрокаГрафика.Дата <> '000101010000' Тогда
			ДатаВыкупнаяСтоимость = ?(
				ДатаВыкупнаяСтоимость <> '000101010000', 
				Мин(ДатаВыкупнаяСтоимость, ИсходнаяСтрокаГрафика.Дата), 
				ИсходнаяСтрокаГрафика.Дата);
		КонецЕсли;
		
		Если ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж <> 0 
			И ИсходнаяСтрокаГрафика.Дата <> '000101010000' Тогда
			ДатаОбеспечительныйПлатеж = ?(
				ДатаОбеспечительныйПлатеж <> '000101010000', 
				Мин(ДатаОбеспечительныйПлатеж, ИсходнаяСтрокаГрафика.Дата), 
				ИсходнаяСтрокаГрафика.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщатьОбОшибках Тогда
		Для Каждого ОписаниеОшибки Из СписокОшибок Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОписаниеОшибки.ТекстСообщения,, ОписаниеОшибки.Поле, ОписаниеОшибки.ПутьКДанным);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

Процедура ОткрытьГрафикиДоходнойАренды(Объект, Форма, ОсновноеСредство, АдресГрафиков, ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Арендатор", Объект.Арендатор);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("ОсновноеСредство", ОсновноеСредство);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СлужебныеПараметрыФормы", Форма.СлужебныеПараметрыФормы);
	ПараметрыФормы.Вставить("ГрафикиДоговора", АдресГрафиков);
	ПараметрыФормы.Вставить("ДатаНачалаАренды", НачалоДня(Объект.Дата));
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтображатьГрафикПроцентовИзРегистра", Форма.ОтображатьГрафикПроцентовИзРегистра);
	
	ОткрытьФорму("ОбщаяФорма.ГрафикиДоходнойАренды", ПараметрыФормы, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьЗаполнениеГрафиковДоходнойАренды(Объект, Форма, ВыбранныеОС, АдресГрафиков, ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Арендатор", Объект.Арендатор);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("ВыбранныеОС", ВыбранныеОС);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СлужебныеПараметрыФормы", Форма.СлужебныеПараметрыФормы);
	ПараметрыФормы.Вставить("ГрафикиДоговора", АдресГрафиков);
	ПараметрыФормы.Вставить("ДатаНачалаАренды", НачалоДня(Объект.Дата));
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтображатьГрафикПроцентовИзРегистра", Форма.ОтображатьГрафикПроцентовИзРегистра);
	
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеГрафиковДоходнойАренды", ПараметрыФормы, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

// Формирует печатную форму Справки-расчета начисления процентов
//
// Параметры:
//  Форма - см. Документ.ПередачаОСВАренду2_4.Форма.ФормаДокумента
//
Процедура СправкаРасчетНачисленияПроцентов(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОчиститьСообщения();
	
	// Проверим документ перед печатью.
	
	МассивОшибок = Новый Массив;
	
	Если НЕ Объект.Проведен Тогда 
		МассивОшибок.Добавить(НСтр("ru = 'Документ не проведен';
									|en = 'Document is not posted'"));
	КонецЕсли;
	
	Если Объект.ОС.Количество() = 0 Тогда
		МассивОшибок.Добавить(НСтр("ru = 'В документе нет ни одного основного средства';
									|en = 'There are no fixed assets in the document'"));
	КонецЕсли;
	
	Если Объект.ГрафикОплатУслуг.Количество() = 0 Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Не заполнен график оплат';
									|en = 'The payment schedule is not filled'"));
	КонецЕсли;
	
	Если Объект.ГрафикНачисленияПроцентов.Количество() = 0 Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Не заполнен график начисления процентов';
									|en = 'The interest charge schedule is not filled'"));
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщения = СтрСоединить(МассивОшибок, Символы.ПС);
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Печатаем справки-расчеты по выделенным строкам.
	ДанныеДляПечати = Новый Массив;
	СтрокаДляСправки = Новый Структура;
	СтрокаДляСправки.Вставить("ОсновноеСредство", ПредопределенноеЗначение("Справочник.ОбъектыЭксплуатации.ПустаяСсылка"));
	СтрокаДляСправки.Вставить("СтавкаДоходности", 0);
	СтрокаДляСправки.Вставить("АвансовыеПлатежи", 0);
	СтрокаДляСправки.Вставить("ПриведеннаяСтоимость", 0);
	СтрокаДляСправки.Вставить("НГЛС", 0);
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ОС.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Элементы.ОС.ДанныеСтроки(ВыделеннаяСтрока);
		
		ТекущаяСтрокаДляСправки = СтрокаДляСправки;
		ТекущаяСтрокаДляСправки.ОсновноеСредство     = ТекущиеДанные.ОсновноеСредство;
		ТекущаяСтрокаДляСправки.СтавкаДоходности     = ТекущиеДанные.СтавкаДоходности;
		ТекущаяСтрокаДляСправки.АвансовыеПлатежи     = 0;
		ТекущаяСтрокаДляСправки.ПриведеннаяСтоимость = ТекущиеДанные.ПриведеннаяСтоимость;
		ТекущаяСтрокаДляСправки.НГЛС                 = ТекущиеДанные.НГЛС;
		
		ДанныеДляПечати.Добавить(ТекущаяСтрокаДляСправки);
		
	КонецЦикла;
	
	ИмяМакета = "СправкаРасчетНачисленияПроцентов";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеДляПечати",ДанныеДляПечати);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
					"Обработка.ПечатьСправкиРасчетаНачисленияПроцентов",
					ИмяМакета,
					Объект.Ссылка,
					ЭтотОбъект,
					ПараметрыПечати);
					
КонецПроцедуры

// Удаляет основное средство из графиков документа
//
// Параметры:
//  Объект - см. Документ.ПередачаОСВАренду2_4
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации
//
Процедура УдалитьОСИзГрафиков(Объект, ОсновноеСредство) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикОплат = Объект.ГрафикОплатУслуг;
	ГрафикНачислений = Объект.ГрафикНачисленияУслуг;
	ГрафикПроцентов = Объект.ГрафикНачисленияПроцентов;
	
	СтруктураОтбора = Новый Структура("ОсновноеСредство", ОсновноеСредство);
	
	СтрокиОплат = ГрафикОплат.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаОплаты Из СтрокиОплат Цикл
		ГрафикОплат.Удалить(СтрокаОплаты);
	КонецЦикла;
	
	СтрокиНачислений = ГрафикНачислений.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
		ГрафикНачислений.Удалить(СтрокаНачислений);
	КонецЦикла;
	
	СтрокиПроцентов = ГрафикПроцентов.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаПроцентов Из СтрокиПроцентов Цикл
		ГрафикПроцентов.Удалить(СтрокаПроцентов);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
