#Область ПрограммныйИнтерфейс

// Заполнение таблицы этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
//	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
//
Процедура ДополнитьОписаниеЭтаповЗакрытияМесяца(ТаблицаЭтапов) Экспорт
	//++ Локализация
	#Область Группа_РучныеОперации
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыРучныеОперации();
	//++ НЕ УТ
	НалоговыйУчет.ДобавитьЭтап_ОсвобождениеОтУплатыНалоговВСвязиСКоронавирусом(ТаблицаЭтапов, ТекущийРодитель);
	НалоговыйУчет.ДобавитьЭтап_ПереходНаУчетКурсовыхРазницНУПо67ФЗ(ТаблицаЭтапов, ТекущийРодитель);
	ЗатратыЛокализацияСервер.ДобавитьЭтап_СписаниеЗатратНаВыпускБезРаспоряжений(ТаблицаЭтапов, ТекущийРодитель);
	ЗатратыЛокализацияСервер.ДобавитьЭтап_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ТаблицаЭтапов, ТекущийРодитель);
	//-- НЕ УТ
	УчетНДСРФ.ДобавитьЭтап_ОформлениеСчетовФактурИТаможенныхДокументов(ТаблицаЭтапов,ТекущийРодитель);

	//++ НЕ УТ
	РеглУчетСервер.ДобавитьЭтап_ПереходНаЕНС(ТаблицаЭтапов, ТекущийРодитель);
	УчетНДСРФ.ДобавитьЭтап_ПеречислениеНДСВБюджет(ТаблицаЭтапов,ТекущийРодитель);
	ВнеоборотныеАктивыЛокализация.ДобавитьЭтап_ПереходНаУчетВнеоборотныхАктивовВерсии24(ТаблицаЭтапов, ТекущийРодитель);
	РеглУчетСервер.ДобавитьЭтап_ВводСведенийСреднесписочнойЧисленности(ТаблицаЭтапов, ТекущийРодитель);
	//-- НЕ УТ
	#КонецОбласти
	
	#Область Группа_ФормированиеЗатрат
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыФормированиеЗатрат();
	//++ НЕ УТ
	ИнтеграцияБЗК.ДобавитьЭтап_ОтражениеЗарплатыВФинансовомУчете(ТаблицаЭтапов, ТекущийРодитель);
	ИнтеграцияБЗК.ДобавитьЭтап_НачислениеРезервовПоОплатеТруда(ТаблицаЭтапов, ТекущийРодитель);
	//-- НЕ УТ
	ПодарочныеСертификатыСервер.ДобавитьЭтап_АннулированиеПодарочныхСертификатов(ТаблицаЭтапов,ТекущийРодитель);
	//++ НЕ УТ
	ВнеоборотныеАктивыЛокализация.ДобавитьЭтап_ПризнаниеВНалоговомУчетеАрендныхПлатежей(ТаблицаЭтапов,ТекущийРодитель);
	ТМЦВЭксплуатацииЛокализация.ДобавитьЭтап_ПогашениеСтоимостиТМЦВЭксплуатации(ТаблицаЭтапов, ТекущийРодитель);
	РасчетИмущественныхНалоговУП.ДобавитьЭтап_РасчетНалогаНаИмущество(ТаблицаЭтапов, ТекущийРодитель);
	РасчетИмущественныхНалоговУП.ДобавитьЭтап_РасчетТранспортногоНалога(ТаблицаЭтапов, ТекущийРодитель);
	РасчетИмущественныхНалоговУП.ДобавитьЭтап_РасчетЗемельногоНалога(ТаблицаЭтапов, ТекущийРодитель);
	Документы.РегламентнаяОперация.ДобавитьЭтап_РасчетТорговогоСбора(ТаблицаЭтапов, ТекущийРодитель);
	//-- НЕ УТ

	//++ НЕ УТКА
	МеждународныйУчетВнеоборотныеАктивы.ДобавитьЭтап_НачислениеАмортизацииОСиНМАМеждународныйУчет(ТаблицаЭтапов, ТекущийРодитель);
	//-- НЕ УТКА
	#КонецОбласти
	
	//++ НЕ УТ
	#Область Группа_Себестоимость
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыСебестоимость();
	РасчетИмущественныхНалоговУП.ДобавитьЭтап_ДоначислениеНалогаНаИмущество(ТаблицаЭтапов, ТекущийРодитель);
	#КонецОбласти
	//-- НЕ УТ
	
	#Область Группа_РегламентированныйУчет
	
	//++ НЕ УТ
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыРегламентированныйУчет();
	УчетНДСРФ.ДобавитьЭтап_ФормированиеСводныхСправокНДС(ТаблицаЭтапов, ТекущийРодитель);
	РеглУчетСервер.ДобавитьЭтап_ОтражениеДокументовВРегламентированномУчете(ТаблицаЭтапов, ТекущийРодитель);
	РеглУчетСервер.ДобавитьЭтап_РеклассификацияДолгосрочныхАктивовОбязательств(ТаблицаЭтапов, ТекущийРодитель);	
	Документы.РегламентнаяОперация.ДобавитьЭтап_РасчетКурсовыхРазниц(ТаблицаЭтапов, ТекущийРодитель);
	РеглУчетСервер.ДобавитьЭтап_ФормированиеФинансовогоРезультата(ТаблицаЭтапов,ТекущийРодитель);
	//-- НЕ УТ
	#КонецОбласти
	
	#Область Группа_ФормированиеФинансовогоРезультата
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыФормированиеФинансовогоРезультата();
	//++ НЕ УТ
	РеглУчетСервер.ДобавитьЭтап_РасчетЕНС(ТаблицаЭтапов, ТекущийРодитель);
	//-- НЕ УТ
	#КонецОбласти
	
	//++ НЕ УТ 
	#Область Группа_УчетПоУСН
	
	ТекущийРодитель = ИдентификаторГруппыУчетПоУСН();
	УчетУСНПСНСервер.ДобавитьЭтап_ПризнаниеРасходовПриУСН(ТаблицаЭтапов, ТекущийРодитель);
	УчетУСНПСНСервер.ДобавитьЭтап_СторноДоходовКУДиР(ТаблицаЭтапов, ТекущийРодитель);
	УчетУСНПСНСервер.ДобавитьЭтап_РасчетНалогаУСН(ТаблицаЭтапов, ТекущийРодитель);
	
	#КонецОбласти
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Заполнение таблицы групп этапов закрытия месяца.
// Элементы данной таблицы являются элементами верхнего уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
//	ТаблицаГруппЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияГруппЭтапов
//
Процедура ДополнитьОписаниеГруппЭтаповЗакрытияМесяца(ТаблицаГруппЭтапов) Экспорт
	//++ Локализация

	//++ НЕ УТ
	ИндексГруппы = ТаблицаГруппЭтапов.Индекс(
		ТаблицаГруппЭтапов.Найти(ЗакрытиеМесяцаСервер.ИдентификаторГруппыРегламентированныйУчет())) + 1;
	
	НоваяСтрока = ТаблицаГруппЭтапов.Вставить(ИндексГруппы);
	НоваяСтрока.Код = ИдентификаторГруппыУчетПоУСН();
	НоваяСтрока.Наименование = НСтр("ru = 'Учет по УСН';
									|en = 'STS accounting'");
	//-- НЕ УТ
	
	//-- Локализация
КонецПроцедуры

// Заполняет проверки, выполняемые в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации.
//
Процедура ДополнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	//++ Локализация
	УчетНДСРФ.ОписаниеПроверок_ФормированиеСводныхСправокНДС(ТаблицаПроверок);
	УчетНДСРФ.ОписаниеПроверок_ФормированиеДвиженийПоНДС(ТаблицаПроверок);
	//++ НЕ УТ
	ЗатратыЛокализацияСервер.ОписаниеПроверок_СписаниеЗатратНаВыпускБезРаспоряжений(ТаблицаПроверок);
	ЗатратыЛокализацияСервер.ОписаниеПроверок_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ТаблицаПроверок);
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры


// Дополняет список операций закрытия месяца, использующих механизм заданий к закрытию месяца.
// 
// Параметры:
// 	ДанныеВыбора - СписокЗначений -
//
Процедура ДополнитьДанныеВыбораОперацийЗакрытияМесяца(ДанныеВыбора) Экспорт
	//++ Локализация

	//++ НЕ УТ
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеАрендныхПлатежей);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПогашениеСтоимостиТМЦВЭксплуатации);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаУСН);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.РеклассификацияДолгосрочныхАктивовОбязательств);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата);	
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетЕНС);
	//-- НЕ УТ
	

	//-- Локализация
	
КонецПроцедуры

//++ НЕ УТ

// Проверяет использование регламентированного учета в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	ИзменятьСостояниеЭтапа - Булево -
//	
// Возвращаемое значение:
//	Булево - признак использования регламентированного учета.
//
Функция ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика, ИзменятьСостояниеЭтапа = Истина) Экспорт
	
	Результат = Ложь;

	//++ Локализация
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		Если ИзменятьСостояниеЭтапа Тогда
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
				ПараметрыОбработчика,
				НСтр("ru = 'Регламентированный учет не ведется.';
					|en = 'Local accounting is not kept.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		КонецЕсли;
		
		Результат =  Ложь;
		
	Иначе
		
		ДатаНачалаВеденияРеглУчета = НачалоМесяца(Константы.ДатаНачалаВеденияРеглУчета.Получить());
		
		Если ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации < ДатаНачалаВеденияРеглУчета Тогда
			
			Если ИзменятьСостояниеЭтапа Тогда
				
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Регламентированный учет ведется начиная с периода %1';
							|en = 'Local accounting is kept from period %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
						РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДатаНачалаВеденияРеглУчета)));
				
			КонецЕсли;
			
			Результат =  Ложь;
		Иначе
			Результат =  Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Проверяет наличие документов "Регламентная операция".
//
// Параметры:
//	ПараметрыОбработчика 			   - Структура - параметры обработчика события этапа
//	ТипОперации							- Неопределено 		 			   
//++ Локализация
//										- ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//-- Локализация
//											если не указан, то анализируется типы операций из свойства ТипыРегламентныхОпераций данного этапа
//	ИмяТаблицыОтбораОрганизаций 	   - Строка - имя временной таблицы для отбора документов по организациям
//											организации в указанной таблице должны находиться в поле с именем "Ссылка"
//											если таблица не указана, то отбираются все организации из свойства МассивОрганизаций
//	ДляЭтапаИспользуетсяРегистрЗаданий - Булево - признак того, что для данного этапа используется один из регистров "ЗаданияК...".
//	
// Возвращаемое значение:
//	Булево - признак наличия документов.
//
Функция ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика, Знач ТипОперации = Неопределено,
			ИмяТаблицыОтбораОрганизаций = "", ДляЭтапаИспользуетсяРегистрЗаданий = Истина) Экспорт
	
	ЕстьОшибки    = Ложь;
	//++ Локализация
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Ссылка    КАК ТипОперации,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТОперации
	|ИЗ
	|	Перечисление.ТипыРегламентныхОпераций КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ИСТИНА
	|ГДЕ
	|	Операции.Ссылка В (&ТипыОпераций)
	|	И НЕ (Организации.Ссылка ЕСТЬ NULL)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.ТипОперации КАК ТипОперации,
	|	Операции.Организация КАК Организация,
	|	Организации.Ссылка.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	КОЛИЧЕСТВО(РегламентнаяОперация.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	ВТОперации КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Операции.Организация)
	|			И (РегламентнаяОперация.ТипОперации = Операции.ТипОперации)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Операции.Организация = Организации.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация,
	|	Организации.Ссылка.ОбособленноеПодразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	ЕстьДокументы = Ложь;
	Период 		  = РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ТипыОпераций  = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
		
	Запрос.УстановитьПараметр("ТипыОпераций", ТипыОпераций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбособленноеПодразделение
		 И НЕ Документы.РегламентнаяОперация.ОперацияИспользуетсяДляОбособленногоПодразделения(Выборка.ТипОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		// Для ПереоценкаСуммыВВалютеФинОтчетности и ЗакрытиеГода будем выводить сообщения об ошибках только если в отборе
		// присутствует искомая организация:
		Если Выборка.ОбособленноеПодразделение И Не ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации
			И ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Найти(Выборка.Организация) = Неопределено
			И (Выборка.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности
			ИЛИ Выборка.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода) Тогда
				Продолжить;
		КонецЕсли;
		
		Если Выборка.КоличествоДокументов > 1 Тогда
			
			ЕстьОшибки = Истина;
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По организации ""%1"" за период %2 сформировано несколько документов регламентных операций ""%3"".';
						|en = 'Several documents of the ""%3"" period-end operations were generated for the ""%1"" company for period %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Организация,
					Период,
					СокрЛП(Выборка.ТипОперации)));
					
			Продолжить;
			
		ИначеЕсли Выборка.КоличествоДокументов = 0 Тогда
			
			Если ДляЭтапаИспользуетсяРегистрЗаданий Тогда
				// Нет заданий к расчету и нет регламентного документа - расчет не требуется.
			Иначе
				// Есть данные для расчета (иначе эта процедура не вызывалась бы), но нет регламентного документа - расчет не выполнен.
				ЕстьОшибки = Истина;
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По организации ""%1"" за период %2 не сформирована регламентная операция ""%3"".';
							|en = 'The ""%3"" period-end operation was not generated for the ""%1"" company for period %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
						Выборка.Организация,
						Период,
						СокрЛП(Выборка.ТипОперации)));
			КонецЕсли;
			
		Иначе // есть один документ
			ЕстьДокументы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДляЭтапаИспользуетсяРегистрЗаданий И НЕ ЕстьОшибки И НЕ ЕстьДокументы Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период %1 нет заданий для расчета данной операции и отсутствует документ ""Регламентная операция"".';
					|en = 'No jobs for calculating this operation and no ""Period-end operation"" document for period %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Период));
		
	КонецЕсли;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос,
		"ВТОперации" + ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	//-- Локализация	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Описание действия "Открыть форму списка документов ""Регламентная операция""".
// Отбор по типам операций берется из свойства ТипыРегламентныхОпераций описания этапа закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация() Экспорт
	Описание = ЗакрытиеМесяцаСервер.СтруктураОписанияДействия();
	//++ Локализация
	Описание = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РегламентнаяОперация.Формы.ФормаСписка.ПолноеИмя(),
		Истина);
	//-- Локализация
	Возврат Описание;
	
КонецФункции

// Возвращает текст запроса для определения состояния отражения документов в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - текст запроса для определения состояния отражения документов.
//
Функция ТекстЗапросаСостояниеОтраженияДокументов() Экспорт
	
	МассивТекстовЗапроса = Новый Массив;
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый
	|		ПО ДанныеРегистра.Регистратор = ПроверкаДокументовПереопределяемый.Документ
	|			И ДанныеРегистра.Организация = ПроверкаДокументовПереопределяемый.Организация
	|			И ПроверкаДокументовПереопределяемый.СтатусПроверки <> ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И (Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы И ПроверкаДокументовПереопределяемый.Документ ЕСТЬ NULL
	|		ИЛИ НЕ Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы)
	|	И ДанныеРегистра.ДатаОтражения >= Константы.ДатаНачалаВеденияРеглУчета
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0";
	ПроверкаДокументовСервер.ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомИсключений(ТекстЗапроса, "ДанныеРегистра.Регистратор");
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) > 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый
	|		ПО ДанныеРегистра.Регистратор = ПроверкаДокументовПереопределяемый.Документ
	|			И ДанныеРегистра.Организация = ПроверкаДокументовПереопределяемый.Организация
	|			И ПроверкаДокументовПереопределяемый.СтатусПроверки <> ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы
	|	И ДанныеРегистра.ДатаОтражения >= Константы.ДатаНачалаВеденияРеглУчета
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И НЕ ПроверкаДокументовПереопределяемый.Документ ЕСТЬ NULL
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) > 0";
	ПроверкаДокументовСервер.ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомИсключений(ТекстЗапроса, "ДанныеРегистра.Регистратор");
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	//-- Локализация
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИспользоватьРеглУчет", ?(ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"), "ИСТИНА", "ЛОЖЬ"));
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ

#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	//++ Локализация

	//++ НЕ УТ
	УчетУСНПСНСервер.ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос,
		ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
	//-- НЕ УТ

	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ФормированиеРегламентныхДокументов

// Формирует документы "Регламентная операция" начиная с первого пересчитываемого периода до текущего рассчитываемого периода.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ПоОрганизациямДляКоторыхЕстьЗадания	- Булево - 
//	
Процедура РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, ПоОрганизациямДляКоторыхЕстьЗадания) Экспорт
	//++ Локализация
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = ?(ПараметрыОбработчика.АвтоматическоеТестирование,
		ПараметрыРасчета.НачалоПериода,
		ЗакрытиеМесяцаСервер.НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код, 
			ПараметрыРасчета.КонецПериода,,
			ПараметрыРасчета.МассивОрганизаций));
	
	ТипыОпераций = ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций;
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода Цикл
		
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗакрытиеМесяца.%1",
			СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
		ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных	= 0;
		
		НомерЗадания 	 	= ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ДанныеКРасчетуЗаМесяц =  ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДоступныеОрганизации,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ПоОрганизациямДляКоторыхЕстьЗадания Тогда
			
			Для каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				
				Для Каждого ТипОперации Из ТипыОпераций Цикл
					
					Если НЕ ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, НачалоРасчета) Тогда
						Продолжить;
					КонецЕсли; 
					
					РезультатРасчета = СформироватьДокументРегламентнаяОперация(
											ПараметрыОбработчика, 
											ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),
											ТипОперации, 
											НачалоРасчета);
											
					Если РезультатРасчета <> Неопределено Тогда
						Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки)
							ИЛИ РезультатРасчета.СписокОшибок.Количество() <> 0 Тогда
							ЕстьОшибки = Истина;
						Иначе
							КоличествоДанных = КоличествоДанных + РезультатРасчета.КоличествоДанных;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЦикла; 
			
		ИначеЕсли ДанныеКРасчетуЗаМесяц.Организация.Количество() <> 0 Тогда
			
			Для Каждого ТипОперации Из ТипыОпераций Цикл
				
				Если НЕ ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, НачалоРасчета) Тогда
					Продолжить;
				КонецЕсли; 
				
				РезультатРасчета = СформироватьДокументРегламентнаяОперация(
										ПараметрыОбработчика, 
										ДоступныеОрганизации,
										ТипОперации, 
										НачалоРасчета);
										
				Если РезультатРасчета <> Неопределено Тогда
					Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки)
						ИЛИ РезультатРасчета.СписокОшибок.Количество() <> 0 Тогда
						ЕстьОшибки = Истина;
					Иначе
						КоличествоДанных = КоличествоДанных + РезультатРасчета.КоличествоДанных;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		ЗакрытиеМесяцаСервер.УдалитьЗаданияКРасчетуЗаТекущийПериод(ПараметрыОбработчика, ДанныеКРасчетуЗаМесяц);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
		НачалоРасчета = ОкончаниеПериода + 1;
		
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

// Формирует документы "Регламентная операция" за один период.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	МассивОрганизаций - Массив -
//	ТипОперации 		 - Неопределено
//++ Локализация
//						 - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//-- Локализация
//							если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа
//	Период 				 - Дата, Неопределено - период для формирования документов;
//							если период не указан, то формируются документы за текущий рассчитываемый период.
//	
// Возвращаемое значение:
//  Неопределено
//++ Локализация
//	,Структура - см. Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации
//-- Локализация
//
Функция СформироватьДокументРегламентнаяОперация(ПараметрыОбработчика, МассивОрганизаций, Знач ТипОперации = Неопределено, Знач Период = Неопределено) Экспорт
	РезультатРасчета = Неопределено;
	//++ Локализация
	Если ЗначениеЗаполнено(ТипОперации) Тогда 
		ТипыОпераций = ?(ТипЗнч(ТипОперации) = Тип("Массив"), ТипОперации, ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации));
	Иначе
		ТипыОпераций = ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций;
	КонецЕсли;
	
	ТипыВыполняемыхОпераций = Новый Массив;
	
	Период = ?(ЗначениеЗаполнено(Период), Период, ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	Для Каждого ТипОперации Из ТипыОпераций Цикл
		
		Если ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, Период) Тогда
			ТипыВыполняемыхОпераций.Добавить(ТипОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипыВыполняемыхОпераций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатРасчета = Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(
		Период,
		ТипыВыполняемыхОпераций,
		МассивОрганизаций);
	
	Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По организации ""%1"" за период %2 не удалось провести регламентную операцию ""%3"" по причине:
				|%4';
				|en = 'Cannot post the ""%3"" period-end operation for the ""%1"" company for period %2 due to:
				|%4'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СокрЛП(РезультатРасчета.Организация),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Период),
			СокрЛП(РезультатРасчета.ТипОперации),
			РезультатРасчета.ТекстОшибки);
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			?(ЗначениеЗаполнено(РезультатРасчета.Организация), РезультатРасчета.Организация, МассивОрганизаций),
			Период,
			,
			РезультатРасчета.ДокументСОшибкой);
		
	КонецЕсли;
	
	Для каждого ОписаниеОшибки Из РезультатРасчета.СписокОшибок Цикл
		
		ПараметрыРегистрации =  ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ОписаниеОшибки.Организация,
			Период);
			
		ГруппаПроблем = НСтр("ru = 'При выполнении операции были диагностированы ошибки';
							|en = 'Errors were found when executing the operation'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРегистрации,
			ГруппаПроблем,
			Перечисления.ВажностьПроблемыУчета.Ошибка,
			ОписаниеОшибки.ОписаниеПроблемы,
			ОписаниеОшибки.Объект);
			
	КонецЦикла; 
	//-- Локализация
	Возврат РезультатРасчета;
КонецФункции

// Возвращает требуемую периодичность указанной регламентной операции.
//
// Параметры:
//	ТипОперации - Неопределено
//++ Локализация
//					- ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//-- Локализация
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.Периодичность - периодичность операции.
//
Функция ПериодичностьРегламентнойОперации(ТипОперации) Экспорт
	Периодичность = Неопределено;
	//++ Локализация
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТорговогоСбора
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
	 
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.КорректировкаНалоговойБазыПоКурсовымРазницам Тогда
		
		Периодичность = Перечисления.Периодичность.Год;
		
	Иначе
		
		Периодичность = Перечисления.Периодичность.Месяц;
		
	КонецЕсли;
	//-- Локализация
	Возврат Периодичность;
	
КонецФункции

// Проверяет совпадение указанного периода и периодичности регламентной операции.
//
// Параметры:
//	ТипОперации - Неопределено
//++ Локализация
//				- ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//-- Локализация
//	Период 		- Дата - период для формирования документа по данной операции.
//
// Возвращаемое значение:
//	 Булево - признак необходимости формирования документа.
//
Функция ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, Период) Экспорт
	Результат = Ложь;
	
	//++ Локализация
	Периодичность = ПериодичностьРегламентнойОперации(ТипОперации);
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = Истина;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = (Месяц(Период) % 3 = 0);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = (Месяц(Период) = 12);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверная периодичность регламентной операции';
								|en = 'Incorrect frequency of the period-end transaction'");
	КонецЕсли; 
	//-- Локализация	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область УстановкаБлокировкиФункционалаПриОбновленииИБ

// Обработчики обновления блокирующие закрытие месяца.
// Параметры:
//  Обработчики - Строка - Обработчики обновления не влияющие на закрытие месяца.
// 
Процедура ОбработчикиОбновленияБлокирующиеЗакрытиеМесяца(Обработчики) Экспорт
	Обработчики = Обработчики + "
	//++ Локализация
	|
	//++ НЕ УТ
	|РегистрыСведений.УчетнаяПолитикаБухУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.НастройкаПереходаНаФСБУ5.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.РасчетЗемельногоНалога.ЗаполнитьДаннымиПрежнегоРегистра
	//-- НЕ УТ
	|
	//-- Локализация
	|";
КонецПроцедуры

// Обработчики обновления не влияющие на закрытие месяца.
// Параметры:
//  Обработчики - Строка - Обработчики обновления не влияющие на закрытие месяца.
// 
Процедура ОбработчикиОбновленияНеВлияющиеНаЗакрытиеМесяца(Обработчики) Экспорт
	Обработчики = Обработчики +  "
	//++ Локализация
	|
	//++ НЕ УТ
	|ПланыСчетов.Хозрасчетный.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.ПорядокУплатыНалоговПоРегионам.ЗаполнитьДаннымиПрежнегоРегистраПорядокУплатыНалоговНаМестах
	|РегистрыСведений.РегистрацииВНалоговомОргане.ОбработатьДанныеДляПереходаНаНовуюВерсию
	//-- НЕ УТ
	|
	//-- Локализация
	|";
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервереФормаЗакрытиеМесяца(Отказ, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат;
КонецПроцедуры


// Настраивает форму закрытия месяца.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ВыполняетсяЗагрузкаНастроек - Булево -
//
Процедура НастроитьЭлементыПриИнициализацииФормы(Форма, ВыполняетсяЗагрузкаНастроек = Ложь) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	Если НЕ ВыполняетсяЗагрузкаНастроек Тогда
		
		Элементы.ФормаОткрытьЗаданияКПогашениюСтоимостиТМЦ.Видимость =
			Ложь // в УТ11

			//++ НЕ УТ
			ИЛИ ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации)
			//-- НЕ УТ
			ИЛИ Ложь; // для соблюдение стандарта по переносу выражений	
			
		Элементы.ФормаОткрытьЗаданияКДоначислениюНалогаНаИмущество.Видимость =
		    Ложь // в УТ11

			//++ НЕ УТ
			ИЛИ ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЗаданияКДоначислениюНалогаНаИмущество)
				И ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
			//-- НЕ УТ
			ИЛИ Ложь; // для соблюдение стандарта по переносу выражений
			
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область РаботаСДатами

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
// Параметры:
//  ИсточникиДанных - ТаблицаЗначений - см. описание в механизме БСП.
//
Процедура ДополнитьОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	//++ Локализация

	//++ НЕ УТ
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ДенежныеДокументы.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
										
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСН.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
										
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
										
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСНОСиНМА.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
										
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСНТовары.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыСведений.СпособыОтраженияРасходовПоИмущественнымНалогам.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ВыпускПродукции.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Возвращает дату задания на текущий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка - документ задания.
// 	Период - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаТекущийПериод(Операция, Организация, ДокументЗадания, Знач Период) Экспорт
	Месяц = Период;
	//++ Локализация

	//++ НЕ УТ
	Если Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество 
			И НЕ РасчетИмущественныхНалоговУП.УплачиваютсяАвансыПоНалогуНаИмущество(Организация, Период)
		
		ИЛИ Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога 
			И НЕ РасчетИмущественныхНалоговУП.УплачиваютсяАвансыПоЗемельномуНалогу(Организация, Период)
			
		ИЛИ Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога 
			И НЕ РасчетИмущественныхНалоговУП.УплачиваютсяАвансыПоТранспортномуНалогу(Организация, Период) Тогда
		
		Месяц = НачалоМесяца(КонецГода(Период));
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
	Возврат Месяц
	
КонецФункции

// Возвращает дату задания на следующий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка - документ задания.
// 	СледующийМесяц - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаСледующийПериод(Операция, Организация, ДокументЗадания, Знач СледующийМесяц) Экспорт
	
	ДатаЗадания = СледующийМесяц;
	
	//++ Локализация

	//++ НЕ УТ
	
	Если Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество Тогда
		
		ДатаЗадания = РасчетИмущественныхНалоговУП.ПериодРасчетаНалогаНаИмущество(Организация, СледующийМесяц);
		
	ИначеЕсли Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога Тогда
		
		ДатаЗадания = РасчетИмущественныхНалоговУП.ПериодРасчетаЗемельногоНалога(Организация, СледующийМесяц);
		
	ИначеЕсли Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога Тогда
		
		ДатаЗадания = РасчетИмущественныхНалоговУП.ПериодРасчетаТранспортногоНалога(Организация, СледующийМесяц);
		
	ИначеЕсли Операция = Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеАрендныхПлатежей Тогда
		
		ДатаЗадания = УчетАрендованныхОСЛокализация.СледующийПериодПризнанияВНУАрендныхПлатежей(Организация, СледующийМесяц);
		
	ИначеЕсли Операция = Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата Тогда
		
		ДатаЗадания = НачалоМесяца(КонецГода(СледующийМесяц));
		
	КонецЕсли;
	
	//-- НЕ УТ
	
	
	//-- Локализация

	Возврат ДатаЗадания;
	
КонецФункции

#КонецОбласти

//++ Локализация

#Область КонтрольныеРегистры

// Возвращает регистры, по данным которых могут формироваться задания к закрытию месяца.
//
// Возвращаемое значение:
//	Соответствие - метаданные регистров для заданий
//
Функция ИсточникиДанныхДляЗаданийЗакрытияМесяца() Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.АмортизацияНМА, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.АмортизацияОС, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыпускПродукции, Истина);
	//-- НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ГрафикОплатКредитовИДепозитов, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ГрафикОплатУслугПоАренде, Истина);
	//-- НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.МестонахождениеОС, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ОбесценениеВНА, Истина);
	//-- НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОС, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаОС, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаОСУУ, Истина);
	//-- НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочаяВыручка, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства, Истина);
	//-- НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентами, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов, Истина);
	//-- НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СоставЕГДС, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СтоимостьНМА, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СтоимостьОС, Истина);
	//-- НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизацийКПередаче, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.УзлыКомпонентыАмортизации, Истина);
	//-- НЕ УТ

	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДанныеОснованийСчетовФактур, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию, Истина);
	//++ НЕ УТ
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеДокументы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаОСБУ, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСН, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСНОСиНМА, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСНТовары, Истина);
	//-- НЕ УТ

	Возврат ВходящиеДанные;
	
КонецФункции

// Проверить контрольные регистры в источниках данных для заданий закрытия месяца.
// 
// Параметры:
//  Запрос - Запрос - запрос формирования движения по регистрам
//
Процедура ПроверитьКонтрольныеРегистрыВИсточникахДанныхДляЗаданийЗакрытияМесяца(Запрос) Экспорт
	
	ТекстОшибки = "";
	
	Для Каждого КлючИЗначение Из Запрос.Параметры.ТаблицыКонтрольныхРегистров Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		ТекстОшибки = ТекстОшибки + Символы.ПС
			+ ЗакрытиеМесяцаПовтИсп.ПроверитьВхождениеИсточникаДанныхВКонтрольныеРегистрыДляЗаданийЗакрытияМесяца(ИмяТаблицы);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение СокрЛП(ТекстОшибки);
	КонецЕсли;
	
	Запрос.Параметры.Удалить("ТаблицыКонтрольныхРегистров");
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

#Область ИдентификаторыГруппЭтапов

Функция ИдентификаторГруппыУчетПоУСН()
	Возврат "УчетПоУСН";
КонецФункции

#КонецОбласти

//-- НЕ УТ

//-- Локализация

#КонецОбласти
