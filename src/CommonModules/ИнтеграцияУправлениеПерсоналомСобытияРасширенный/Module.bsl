
#Область СлужебныйПрограммныйИнтерфейс

// Обработка записи набора записей РС ГрафикРаботыСотрудников.
//
Процедура ОбработатьИзменениеГрафиковРаботы(ИзменившиесяДанные) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;

	Если ИзменившиесяДанные = Неопределено Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "Сотрудник", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", Сотрудники);
	Запрос.УстановитьПараметр("УправленческаяОрганизация", ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)
	|	И Сотрудники.ГоловнаяОрганизация <> &УправленческаяОрганизация
	|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка";
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомРасширенный.ЗарегистрироватьИзмененияГрафиковРаботы(ТаблицаСотрудников);
	
КонецПроцедуры

// Обработка записи набора записей РС МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.
//
Процедура ПриЗаписиМестаПозицииШтатногоРасписанияВСтруктуреПредприятия(МенеджерВТ, НаборЗаписей) Экспорт
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	ПозицииДляОбновления = Новый Массив;
	ПозицииПодразделения = Новый Соответствие;
	
	Если НаборЗаписей <> Неопределено Тогда
		ПозицииДляОбновления = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей.Выгрузить(), "Позиция");
	ИначеЕсли МенеджерВТ <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестаВСтруктуреПредприятия.МестоВСтруктуреПредприятия КАК Подразделение,
		|	МестаВСтруктуреПредприятия.Позиция КАК Позиция
		|ИЗ
		|	ВТМестаВСтруктуреПредприятияПозиций КАК МестаВСтруктуреПредприятия";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПозицииДляОбновления.Добавить(Выборка.Позиция);
			ПозицииПодразделения.Вставить(Выборка.Позиция, Выборка.Подразделение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПозицииДляОбновления) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Позиции", ПозицииДляОбновления);
		Запрос.УстановитьПараметр("УправленческаяОрганизация", ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Ссылка В(&Позиции)
		|	И ШтатноеРасписание.Владелец <> &УправленческаяОрганизация";
		ПозицииДляОбновления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПозицииДляОбновления) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Позиции", ПозицииДляОбновления);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	&ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТПериодПозицияШтатногоРасписания
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	Запрос.Выполнить();
	ЗапросВТДанныеСотрудниковПозицийШтатногоРасписания = КадровыйУчетРасширенный.ЗапросВТДанныеСотрудниковПозицийШтатногоРасписания(Ложь);
	Запрос.Текст = ЗапросВТДанныеСотрудниковПозицийШтатногоРасписания.Текст;
	Запрос.Выполнить();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТДанныеСотрудниковПозицийШтатногоРасписания КАК ДанныеСотрудников";
	СотрудникиДляОбновления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ВыгружаемыеСотрудники = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаются(СотрудникиДляОбновления);
	
	ВыгружаемыеПозиции = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаются(ПозицииДляОбновления);
	
	ПозицииДляПроверки = Новый Массив;
	
	ВыгрузкаУП = Новый ТаблицаЗначений;
	ВыгрузкаУП.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаПубликации1СПерсонал.Тип));
	
	ИзмененияУП = Новый ТаблицаЗначений;
	ИзмененияУП.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменение1СПерсонал.Тип));
	ИзмененияУП.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	ИзмененияУП.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
	
	ВыгрузкаКС = Новый ТаблицаЗначений;
	ВыгрузкаКС.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаПубликацииКабинетСотрудника.Тип));
	
	ИзмененияКС = Новый ТаблицаЗначений;
	ИзмененияКС.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменениеКабинетСотрудника.Тип));
	ИзмененияКС.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	ИзмененияКС.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
	
	Приложения = ИнтеграцияУправлениеПерсоналом.ИспользуемыеПриложения();
	Для каждого Приложение Из Приложения Цикл
	
		Позиции = ВыгружаемыеПозиции[Приложение];
		Если Не ЗначениеЗаполнено(Позиции) Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПозицииДляПроверки, Позиции, Истина); 
		
		Подразделения = Новый Массив;
		Для каждого Позиция Из Позиции Цикл 
			
			Подразделение = ПозицииПодразделения[Позиция];
			Если ЗначениеЗаполнено(Подразделение) Тогда
				Подразделения.Добавить(Подразделение);
			КонецЕсли;
			
			Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
				НоваяСтрока = ИзмененияУП.Добавить();
				НоваяСтрока.Ссылка 			= Позиция;
				НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			Иначе
				НоваяСтрока = ИзмененияКС.Добавить();
				НоваяСтрока.Ссылка 			= Позиция;
				НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Подразделения) Тогда
			
			РодителиПодразделений = ИнтеграцияУправлениеПерсоналом.РодителиПодразделений(Подразделения);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
			
			ВыгружаемыеПодразделения = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаютсяВПриложение(Подразделения, Приложение);
			ПодразделенияДляРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Подразделения, ВыгружаемыеПодразделения);
			
			Для каждого Подразделение Из ПодразделенияДляРегистрации Цикл
				Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
					НоваяСтрока = ВыгрузкаУП.Добавить();
					НоваяСтрока.Ссылка = Подразделение;
					НоваяСтрока = ИзмененияУП.Добавить();
					НоваяСтрока.Ссылка 			= Подразделение;
					НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				Иначе
					НоваяСтрока = ВыгрузкаКС.Добавить();
					НоваяСтрока.Ссылка = Подразделение;
					НоваяСтрока = ИзмененияКС.Добавить();
					НоваяСтрока.Ссылка 			= Подразделение;
					НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Сотрудники = ВыгружаемыеСотрудники[Приложение];
		Если ЗначениеЗаполнено(Сотрудники) Тогда
			Для каждого Сотрудник Из Сотрудники Цикл
				Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
					НоваяСтрока = ИзмененияУП.Добавить();
					НоваяСтрока.Ссылка 			= Сотрудник;
					НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				Иначе
					НоваяСтрока = ИзмененияКС.Добавить();
					НоваяСтрока.Ссылка 			= Сотрудник;
					НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиПозицииШтатногоРасписания(ПозицииДляПроверки);
	
	ИнтеграцияУправлениеПерсоналомСобытия.ЗарегистрироватьИзмененияОбъектов(РезультатПроверки, ВыгрузкаУП, ИзмененияУП, ВыгрузкаКС, ИзмененияКС);
	
КонецПроцедуры

// Обработка записи набора записей РС ФотографииФизическихЛиц.
//
Процедура ФотографииФизическихЛицПриЗаписи(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей.Выгрузить(), "ФизическоеЛицо");
	Если Не ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаДляПроверки = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыеФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаются(ФизическиеЛица);
	ИзмененияУП = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом);
	ИзмененияКС = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	Для каждого ЭлементКоллекции Из ВыгружаемыеФизическиеЛица Цикл
	
		Приложение = ЭлементКоллекции.Ключ;
		ФизическиеЛицаПриложения = ЭлементКоллекции.Значение;
		Если Не ЗначениеЗаполнено(ФизическиеЛицаПриложения) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаДляПроверки, ФизическиеЛицаПриложения);
		
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ОбновитьНастройкуПубликации") Тогда
			
			Изменения = ИнтеграцияУправлениеПерсоналом.УжеЗарегистрированыДляОбмена(Приложение, ФизическиеЛицаПриложения, ТипОбъекта);
			ФизическиеЛицаКРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛицаПриложения, Изменения);
			
			Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
				ТаблицаИзменений = ИзмененияУП;
			Иначе
				ТаблицаИзменений = ИзмененияКС;
			КонецЕсли;
			Для каждого ФизическоеЛицо Из ФизическиеЛицаКРегистрации Цикл
				НоваяСтрока = ТаблицаИзменений.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ФизическиеЛицаДляПроверки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФизическиеЛицаДляПроверки);
	
	РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиФизическогоЛица(ФизическиеЛицаДляПроверки);
	ИнтеграцияУправлениеПерсоналомСобытия.ЗарегистрироватьИзмененияОбъектов(РезультатПроверки, Неопределено, ИзмененияУП, Неопределено, ИзмененияКС);

КонецПроцедуры

// Обработка записи набора записей РС ПозицииРуководителейПодразделений.
//
Процедура ПриЗаписиПозицииРуководителейПодразделений(ИсходныеПодразделения) Экспорт
	
	Если ИсходныеПодразделения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	ИерархияПодразделений = ИнтеграцияУправлениеПерсоналомРасширенный.ИерархияПодразделений(ИсходныеПодразделения);
	
	ВыгружаемыеПодразделения = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаются(ИерархияПодразделений.ВыгрузитьКолонку("Ссылка"));
	
	ИзмененияУП = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом);
	ИзмененияКС = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
	Для каждого ЭлементКоллекции Из ВыгружаемыеПодразделения Цикл
	
		Приложение = ЭлементКоллекции.Ключ;
		ПодразделенияПриложения = ЭлементКоллекции.Значение;
		Если Не ЗначениеЗаполнено(ПодразделенияПриложения) Тогда
			Возврат;
		КонецЕсли;
		
		Изменения = ИнтеграцияУправлениеПерсоналом.УжеЗарегистрированыДляОбмена(Приложение, ПодразделенияПриложения, ТипОбъекта);
		ПодразделенияКРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПриложения, Изменения);
		
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			ТаблицаИзменений = ИзмененияУП;
		Иначе
			ТаблицаИзменений = ИзмененияКС;
		КонецЕсли;
		Для каждого Подразделение Из ПодразделенияКРегистрации Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.Ссылка 			= Подразделение;
			НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
	
	КонецЦикла;
	
	ИнтеграцияУправлениеПерсоналомСобытия.ЗарегистрироватьИзмененияОбъектов(Неопределено, Неопределено, ИзмененияУП, Неопределено, ИзмененияКС);

КонецПроцедуры

// Обработка записи набора записей РС ПодразделенияОрганизацииРуководители.
//
Процедура ПодразделенияОрганизацииРуководителиПриЗаписи(НаборЗаписей) Экспорт
	
	ИсходныеПодразделения = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей.Выгрузить(), "Подразделение");
	Если ИсходныеПодразделения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	ИерархияПодразделений = ИнтеграцияУправлениеПерсоналомРасширенный.ИерархияПодразделений(ИсходныеПодразделения);
	
	ВыгружаемыеПодразделения = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаются(ИерархияПодразделений.ВыгрузитьКолонку("Ссылка"));

	ИзмененияУП = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом);
	ИзмененияКС = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
	Для каждого ЭлементКоллекции Из ВыгружаемыеПодразделения Цикл
	
		Приложение = ЭлементКоллекции.Ключ;
		ПодразделенияПриложения = ЭлементКоллекции.Значение;
		Если Не ЗначениеЗаполнено(ПодразделенияПриложения) Тогда
			Возврат;
		КонецЕсли;
		
		Изменения = ИнтеграцияУправлениеПерсоналом.УжеЗарегистрированыДляОбмена(Приложение, ПодразделенияПриложения, ТипОбъекта);
		ПодразделенияКРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПриложения, Изменения);
		
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			ТаблицаИзменений = ИзмененияУП;
		Иначе
			ТаблицаИзменений = ИзмененияКС;
		КонецЕсли;
		Для каждого Подразделение Из ПодразделенияКРегистрации Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.Ссылка 			= Подразделение;
			НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
	
	КонецЦикла;
	
	ИнтеграцияУправлениеПерсоналомСобытия.ЗарегистрироватьИзмененияОбъектов(Неопределено, Неопределено, ИзмененияУП, Неопределено, ИзмененияКС);

КонецПроцедуры

// Обработка записи производственных календарей, для обновления
// праздничных дней графика работы.
Процедура ОбработатьИзмененияПроизводственныхКалендарей(ТаблицаКалендарей) Экспорт
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат301() Тогда
		Возврат;
	КонецЕсли;
	
	КодыКалендарей = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаКалендарей, "КодПроизводственногоКалендаря", Истина);
	
	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Ссылка", 		Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменениеКабинетСотрудника.Тип));
	Изменения.Колонки.Добавить("ТипОбъекта", 	Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	Изменения.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыКалендарей", КодыКалендарей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТКалендари
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	ПроизводственныеКалендари.Код В(&КодыКалендарей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКалендари КАК Календари
	|		ПО ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = Календари.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО ГрафикиРаботыСотрудников.Ссылка = ВыгружаемыеОбъекты.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Изменения.Добавить();
		НоваяСтрока.Ссылка 			= Выборка.Ссылка;
		НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПраздничныеДниГрафикаРаботы;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	ИнтеграцияУправлениеПерсоналомСобытия.ЗарегистрироватьИзмененияОбъектов(Неопределено, Неопределено, Неопределено, Неопределено, Изменения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработка записи набора записей РС ПлановыеЕжегодныеОтпуска.
//
Процедура ПлановыеЕжегодныеОтпускаПриЗаписи(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = НаборЗаписей.Отбор.Найти("Сотрудник");
	Если ЭлементОтбора = Неопределено Или Не ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	Сотрудник = ЭлементОтбора.Значение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИнтеграцияКабинетСотрудника.ОбъектВыгружается(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	
	МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ссылка 		= ФизическоеЛицо;
	МенеджерЗаписи.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
	МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ссылка 		= Сотрудник;
	МенеджерЗаписи.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков;
	МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи.Записать();

КонецПроцедуры

// Обработка записи набора записей РС ЗаработанныеПраваНаОтпуска.
//
Процедура ЗаработанныеПраваНаОтпускаПриЗаписи(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = НаборЗаписей.Отбор.Найти("Сотрудник");
	Если ЭлементОтбора = Неопределено Или Не ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	Сотрудник = ЭлементОтбора.Значение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИнтеграцияКабинетСотрудника.ОбъектВыгружается(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	
	МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ссылка 		= ФизическоеЛицо;
	МенеджерЗаписи.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
	МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи.Записать();

КонецПроцедуры

// Обработка записи данных графика работы.
//
Процедура ГрафикиРаботыПоВидамВремениПриЗаписи(ГрафикРаботы, Год) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка 
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ГрафикРаботы", ГрафикРаботы);
		ЭлементБлокировки.УстановитьЗначение("Год", Год);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ГрафикРаботы = ГрафикРаботы;
		МенеджерЗаписи.Год 			= Год;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию(); 
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Обработка записи набора записей РС ПлановыеУдержания.
//
Процедура ПлановыеУдержанияПередЗаписью(НаборЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("УправленческаяОрганизация", ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Организация КАК Организация,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание КАК Удержание
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	|ГДЕ
	|	ПлановыеУдержания.Регистратор = &Регистратор
	|	И ПлановыеУдержания.Организация <> &УправленческаяОрганизация";
	ПрежниеЗначения = Запрос.Выполнить().Выгрузить();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПрежниеЗначенияОбновленияПубликацииУдержаний", ПрежниеЗначения);

КонецПроцедуры

// Обработка записи набора записей РС ПлановыеУдержания.
//
Процедура ПлановыеУдержанияПриЗаписи(НаборЗаписей) Экспорт
	
	ПлановыеУдержания = НаборЗаписей.Выгрузить(,"Организация,ФизическоеЛицо,Удержание");
	
	ПрежниеЗначения = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ПрежниеЗначенияОбновленияПубликацииУдержаний", ПрежниеЗначения);
	Если ПрежниеЗначения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПрежниеЗначения, ПлановыеУдержания);
		ПлановыеУдержания.Свернуть("Организация,ФизическоеЛицо,Удержание");
	КонецЕсли;
	
	Если ПлановыеУдержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлановыеУдержания", ПлановыеУдержания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Организация КАК Организация,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание КАК Удержание
	|ПОМЕСТИТЬ ВТПлановыеУдержания
	|ИЗ
	|	&ПлановыеУдержания КАК ПлановыеУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеУдержания.Организация КАК Организация,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.КатегорияУдержания КАК КатегорияУдержания
	|ИЗ
	|	ВТПлановыеУдержания КАК ПлановыеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО ПлановыеУдержания.Удержание = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО ПлановыеУдержания.ФизическоеЛицо = ПубликуемыеФизическиеЛица.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПлановыеУдержания.Организация = ПубликуемыеОбъекты.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляРегистрации = Запрос.Выполнить().Выгрузить();
	
	Если ДанныеДляРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеДляРегистрации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КатегорияУдержания", "КатегорияУдержания");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ДанныеДляРегистрации Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация 		= СтрокаТЗ.Организация;
			МенеджерЗаписи.ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
			МенеджерЗаписи.КатегорияУдержания = СтрокаТЗ.КатегорияУдержания;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработка записи набора записей РС НастройкиРасчетаЗарплатыРасширенный.
//
Процедура ПриЗаписиНастроекРасчетаЗарплаты(СтрокаНабора, СтароеСостояние) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСвойства = "ИспользоватьОплатуКомандировок,ИспользоватьОтгулы,ИспользоватьОтпускаУчебные,ИспользоватьОтпускаБезОплаты,ИспользоватьЕдиновременнуюВыплатуКОтпуску,ИспользоватьМатериальнуюПомощьПриОтпуске";
	МассивСвойств = СтрРазделить(ПроверяемыеСвойства, ",");
	Для каждого Свойство Из МассивСвойств Цикл
		Если СтрокаНабора[Свойство] <> СтароеСостояние[Свойство] Тогда
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// Обработка записи набора записей РС НастройкиСамообслуживанияСотрудников.
//
Процедура НастройкиСамообслуживанияСотрудниковПриЗаписи(НовоеСостояние, СтароеСостояние) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСвойства = "ИспользоватьЗапросыСправокСотрудником";
	НовоеЗначение  = НовоеСостояние[ИмяСвойства];
	СтароеЗначение = СтароеСостояние[ИмяСвойства];
	Если НовоеЗначение <> СтароеЗначение Тогда
		Если НовоеЗначение Тогда
			// Включено использование произвольных справок.
			ИнтеграцияКабинетСотрудника.ЗарегистрироватьПубликациюВидовСправок();
		Иначе
			// Выключено использование произвольных справок.
			ЗарегистрироватьОбновлениеВидовСправок();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработка записи набора записей РС НастройкиОхраныТруда.
//
Процедура НастройкиОхраныТрудаПриЗаписи(ПрежниеНастройки, НовыеНастройки) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника()
		Или Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПрежниеНастройки.ИспользоватьРабочиеМестаОхраныТруда <> НовыеНастройки.ИспользоватьРабочиеМестаОхраныТруда Тогда
		Если Не НовыеНастройки.ИспользоватьРабочиеМестаОхраныТруда Тогда
			НастройкиФункциональности = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
			Если НастройкиФункциональности.ПоказыватьОхрануТруда Тогда
				НастройкиФункциональности.ПоказыватьОхрануТруда = Ложь;
				ИнтеграцияКабинетСотрудника.СохранитьНастройкиИспользуемаяФункциональностьСервиса(НастройкиФункциональности);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка записи набора записей РС КлассыУсловийТрудаПоДолжностям.
//
Процедура КлассыУсловийТрудаПоДолжностямПриЗаписи(ИзменившиесяДанные) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника()
		Или Не ИнтеграцияКабинетСотрудника.ИспользоватьРабочиеМестаОхраныТруда() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменившиесяДанные = Неопределено Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ТипИсточника = Тип("СправочникСсылка.ШтатноеРасписание");
	Иначе
		ТипИсточника = Тип("СправочникСсылка.Должности");
	КонецЕсли;
	
	Должности = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "Должность", Истина);
	ДолжностиДляОбработки = Новый Массив;
	Для каждого Должность Из Должности Цикл
		Если ТипЗнч(Должность) <> ТипИсточника Тогда
			Продолжить;
		КонецЕсли;
		ДолжностиДляОбработки.Добавить(Должность);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ДолжностиДляОбработки.Количество() > 0 И ТипИсточника = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Позиции", ДолжностиДляОбработки);
		Запрос.УстановитьПараметр("УправленческаяОрганизация", ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Ссылка В(&Позиции)
		|	И ШтатноеРасписание.Владелец <> &УправленческаяОрганизация";
		ДолжностиДляОбработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Если ДолжностиДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомРасширенный.ОбработатьИзменениеКлассовУсловийТрудаПоДолжностям(ДолжностиДляОбработки);
	
КонецПроцедуры

// Обработка записи набора записей РС РабочиеМестаСотрудников.
//
Процедура РабочиеМестаСотрудниковПриЗаписи(ИзменившиесяДанные) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника()
		Или Не ИнтеграцияКабинетСотрудника.ИспользоватьРабочиеМестаОхраныТруда() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменившиесяДанные = Неопределено Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "Сотрудник", Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("УправленческаяОрганизация", ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)
	|	И Сотрудники.ГоловнаяОрганизация <> &УправленческаяОрганизация";
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомРасширенный.ОбработатьИзменениеРабочихМестСотрудников(Сотрудники);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ОбъектПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКонтролируемыхРеквизитов = ИменаКонтролируемыхРеквизитов(Источник);
	Если Источник.ЭтоНовый() Тогда
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхРеквизитов);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, ИменаКонтролируемыхРеквизитов);
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("ПрежниеДанныеПубликуемогоОбъекта", ПрежниеДанныеОбъекта);
	
КонецПроцедуры

Процедура ОбъектПриЗаписи(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;

	Если Не ИнтеграцияУправлениеПерсоналомСобытия.ЗначенияКонтролируемыхРеквизитовИзменились(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПриЗаписиОбъекта(Источник);
	
КонецПроцедуры 

Процедура ОбработчикПриЗаписиОбъекта(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		ПриЗаписиШтатноеРасписание(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ГрафикиРаботыСотрудников") Тогда
		ПриЗаписиГрафикиРаботыСотрудников(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СборГрафиковОтпусков") Тогда
		ПриЗаписиСборГрафиковОтпусков(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		ПриЗаписиСтруктураПредприятия(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправкаОстаткиОтпусков")
			ИЛИ ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправкаСМестаРаботы")
			ИЛИ ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтсутствие")
			ИЛИ ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы")Тогда
		ИнтеграцияУправлениеПерсоналомСобытия.ПриЗаписиЗаявкиСотрудника(Источник);
	ИначеЕсли ТипЗнч(Источник) = ИнтеграцияУправлениеПерсоналомРасширенный.ТипВидыПредоставляемыхСотрудникамСправокОбъект() Тогда
		ПриЗаписиВидыПредоставляемыхСотрудникамСправок(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ВидыОтпусков") Тогда
		ПриЗаписиВидыОтпусков(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаКомпенсацияОтпускаКабинетСотрудника")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаУчебныйОтпускКабинетСотрудника")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаДСВКабинетСотрудника")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаСправкаСМестаРаботыКабинетСотрудника") Тогда
		ИнтеграцияУправлениеПерсоналомСобытия.ПриЗаписиЗаявки(Источник);
	ИначеЕсли ТипЗнч(Источник) = ИнтеграцияУправлениеПерсоналомРасширенный.ТипРабочиеМестаОхраныТрудаОбъект() Тогда
		ПриЗаписиРабочиеМестаОхраныТруда(Источник);
	ИначеЕсли ТипЗнч(Источник) = ИнтеграцияУправлениеПерсоналомРасширенный.ТипКонстантаМенеджерЗначенияИспользоватьРабочиеМестаОхраныТруда() Тогда
		ПриЗаписиИспользоватьРабочиеМестаОхраныТруда(Источник);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗарегистрироватьПодразделенияРуководителей(ПодразделениеОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияРеквизитов = Неопределено;
	ПодразделениеОбъект.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияРеквизитов);
	ИмяСвойства = "ТекущийРуководитель";
	ЗначениеСвойства = Неопределено;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов) И ЗначенияРеквизитов.Свойство(ИмяСвойства, ЗначениеСвойства) Тогда
		Если ПодразделениеОбъект[ИмяСвойства] <> ЗначениеСвойства Тогда
			МассивПодразделений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодразделениеОбъект.Ссылка);
			ПодчиненныеПодразделения = ИнтеграцияУправлениеПерсоналомРасширенный.ПодчиненныеПодразделения(МассивПодразделений);
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение; 
			РассчитатьЗарегистрироватьИзмененияОбъектов(ПодчиненныеПодразделения, ТипОбъекта);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиПриЗаписи 

Процедура ПриЗаписиШтатноеРасписание(Объект)
	
	Если Объект.ГруппаПозицийПодразделения 
		Или Объект.Владелец = ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкуПубликации = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ОбновитьНастройкуПубликации", ОбновитьНастройкуПубликации);
	Если ОбновитьНастройкуПубликации = Неопределено Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
		ИнтеграцияУправлениеПерсоналомСобытия.ПриЗаписиОбъекта(Объект, ТипОбъекта);
	Иначе
		
		// Запись новой позиции штатного расписания.
		УстановитьПривилегированныйРежим(Истина); 
		
		ОбъектыПравил = Новый ТаблицаЗначений;
		ОбъектыПравил.Колонки.Добавить("Приложение");
		ОбъектыПравил.Колонки.Добавить("Ссылка");
		
		ОбъектыПриложенийДляРегистрации = Новый Соответствие;
		
		// Проверяем есть ли еще позиции штатного расписания у подразделения,
		// если нет, оно новое и потребуется проверка правил.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Подразделение = &Подразделение
		|	И ШтатноеРасписание.Ссылка <> &Ссылка
		|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
		// текущая позиция единственная в этом подразделении
		ПодразделениеНовое = Запрос.Выполнить().Пустой(); 
		
		// Проверим наличие организации и подразделения в правилах.
		ПроверяемыеОбъекты = Новый Массив;
		ПроверяемыеОбъекты.Добавить(Объект.Владелец);
		ПроверяемыеОбъекты.Добавить(Объект.Подразделение);
		ПодразделениеРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подразделение, "Родитель");
		Если ЗначениеЗаполнено(ПодразделениеРодитель) Тогда
			ПроверяемыеОбъекты.Добавить(ПодразделениеРодитель);
		КонецЕсли;
		
		Приложения = ИнтеграцияУправлениеПерсоналом.ИспользуемыеПриложения();
		ОбъектыЕстьВПравилах = ОбъектыЕстьВПравилах(ПроверяемыеОбъекты, Приложения);
		
		Для каждого Приложение Из Приложения Цикл
			
			ОбъектыЕстьВПравилахПриложения = ОбъектыЕстьВПравилах[Приложение];
			Если Не ЗначениеЗаполнено(ОбъектыЕстьВПравилахПриложения) Тогда
				Продолжить;
			КонецЕсли;
			
			ОрганизацияЕстьВПравилах 			= ОбъектыЕстьВПравилахПриложения[Объект.Владелец];
			ПодразделениеЕстьВПравилах 			= ОбъектыЕстьВПравилахПриложения[Объект.Подразделение];
			ПодразделениеРодительЕстьВПравилах 	= Ложь;
			Если ЗначениеЗаполнено(ПодразделениеРодитель) Тогда
				ПодразделениеРодительЕстьВПравилах = ОбъектыЕстьВПравилахПриложения[ПодразделениеРодитель];
			КонецЕсли;
			
			РегистрироватьПодразделение = Ложь;
			Если ПодразделениеНовое И Не ПодразделениеЕстьВПравилах Тогда
				Если ОрганизацияЕстьВПравилах Или ПодразделениеРодительЕстьВПравилах Тогда
					РегистрироватьПодразделение = Истина;
					ПодразделениеЕстьВПравилах = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПодразделениеЕстьВПравилах Тогда
				
				Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
					Подразделение = Объект.Подразделение;
				Иначе
					Подразделение = МестоПозицийВСтруктуреПредприятия(Объект.Ссылка);
				КонецЕсли;
				
				НоваяСтрока = ОбъектыПравил.Добавить();
				НоваяСтрока.Приложение = Приложение;
				НоваяСтрока.Ссылка = Объект.Ссылка;
				Если РегистрироватьПодразделение Тогда
					НоваяСтрока = ОбъектыПравил.Добавить();
					НоваяСтрока.Приложение = Приложение;
					НоваяСтрока.Ссылка = Объект.Подразделение;
				КонецЕсли;
				
				ОбъектыДляРегистрации = Новый ТаблицаЗначений;
				ОбъектыДляРегистрации.Колонки.Добавить("Ссылка");
				ОбъектыДляРегистрации.Колонки.Добавить("ТипОбъекта");
				НоваяСтрока = ОбъектыДляРегистрации.Добавить();
				НоваяСтрока.Ссылка = Объект.Ссылка;
				НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
				НоваяСтрока = ОбъектыДляРегистрации.Добавить();
				НоваяСтрока.Ссылка = Объект.Должность;
				НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность;
				Если ЗначениеЗаполнено(Подразделение) Тогда
					НоваяСтрока = ОбъектыДляРегистрации.Добавить();
					НоваяСтрока.Ссылка = Подразделение;
					НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
				КонецЕсли;
				
				ОбъектыПриложенийДляРегистрации.Вставить(Приложение, ОбъектыДляРегистрации);
				
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиПозицииШтатногоРасписания(Объект.Ссылка);
		ЕстьРезультатПроверки = ЗначениеЗаполнено(РезультатПроверки);
		
		ОбъектыДляРегистрацииУправлениеПерсоналом = ОбъектыПриложенийДляРегистрации[Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом];
		РегистрироватьУправлениеПерсоналом = ЗначениеЗаполнено(ОбъектыДляРегистрацииУправлениеПерсоналом);
		
		ОбъектыДляРегистрацииКабинетСотрудника = ОбъектыПриложенийДляРегистрации[Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника];
		РегистрироватьКабинетСотрудника = ЗначениеЗаполнено(ОбъектыДляРегистрацииКабинетСотрудника);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом");
			ЭлементБлокировки.ИсточникДанных = ОбъектыПравил;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			
			Если ЕстьРезультатПроверки Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
				ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			КонецЕсли;
			
			Если РегистрироватьУправлениеПерсоналом Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
				ЭлементБлокировки.ИсточникДанных = ОбъектыДляРегистрацииУправлениеПерсоналом;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
				ЭлементБлокировки.ИсточникДанных = ОбъектыДляРегистрацииУправлениеПерсоналом;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			КонецЕсли;
			
			Если РегистрироватьКабинетСотрудника Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = ОбъектыДляРегистрацииКабинетСотрудника;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = ОбъектыДляРегистрацииКабинетСотрудника;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			КонецЕсли;
			
			Блокировка.Заблокировать(); 
			
			Для каждого СтрокаТЗ Из ОбъектыПравил Цикл
				МенеджерЗаписи = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			Если ЕстьРезультатПроверки Тогда
				Для каждого СтрокаТЗ Из РезультатПроверки Цикл
					МенеджерЗаписи = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					Если СтрокаТЗ.ЕстьОшибка Тогда
						МенеджерЗаписи.Записать();
					Иначе
						МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РегистрироватьУправлениеПерсоналом Тогда
				Для каждого СтрокаТЗ Из ОбъектыДляРегистрацииУправлениеПерсоналом Цикл
					МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.Записать();
					МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Если РегистрироватьКабинетСотрудника Тогда
				Для каждого СтрокаТЗ Из ОбъектыДляРегистрацииКабинетСотрудника Цикл
					МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Ссылка = СтрокаТЗ.Ссылка;
					МенеджерЗаписи.Записать();
					МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиГрафикиРаботыСотрудников(Объект)
	
	Если Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
	ИнтеграцияУправлениеПерсоналомСобытия.ПриЗаписиОбъекта(Объект.Ссылка, ТипОбъекта);
	
КонецПроцедуры

Процедура ПриЗаписиСборГрафиковОтпусков(Объект)
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() 
		Или Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("1.1") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("НеОбновлятьВыгрузку") 
		Или Объект.Внешний
		Или Не Объект.СборЗапущен
		Или Не Документы.СборГрафиковОтпусков.ЭтоКорневойДокумент(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПредприятия;
	ИнтеграцияУправлениеПерсоналомСобытия.ЗарегистрироватьИзменениеДляОбмена(Объект.Ссылка, ТипОбъекта, Ложь, Истина, Неопределено);

КонецПроцедуры

Процедура ПриЗаписиСтруктураПредприятия(Объект)

	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
	ИнтеграцияУправлениеПерсоналомСобытия.ПриЗаписиОбъекта(Объект, ТипОбъекта);
	ПроверитьЗарегистрироватьПодразделенияРуководителей(Объект);

КонецПроцедуры

Процедура ПриЗаписиВидыПредоставляемыхСотрудникамСправок(Объект)
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() 
		Или Не КабинетСотрудника.ИспользоватьФормат50375() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектВыгружается = ИнтеграцияКабинетСотрудника.ОбъектВыгружается(Объект.Ссылка);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки;
	
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		Если Не ОбъектВыгружается Или Объект.ПометкаУдаления Или Объект.ВАрхиве Тогда
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 				= Объект.Ссылка;
			МенеджерЗаписи.УсловноВыгружается 	= Объект.ПометкаУдаления Или Объект.ВАрхиве;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка 		= Объект.Ссылка;
		МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт

	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ОбновитьКадровуюИсториюИнтеграцияУправлениеПерсоналом") Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник = НаборЗаписей.Отбор.Сотрудник.Значение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("УправленческаяОрганизация", ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник
	|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка
	|	И Сотрудники.ГоловнаяОрганизация <> &УправленческаяОрганизация";
	ТаблицаСотрудников  = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналом.ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников);

КонецПроцедуры

Процедура ПриЗаписиВидыОтпусков(Объект)
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника()
		Или Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектВыгружается = ИнтеграцияКабинетСотрудника.ОбъектВыгружается(Объект.Ссылка);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидОтпуска;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		Если Не ОбъектВыгружается Тогда
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = Объект.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка 		= Объект.Ссылка;
		МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ПриЗаписиРабочиеМестаОхраныТруда(Объект)
	
	Если Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника()
		Или Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектВыгружается = ИнтеграцияКабинетСотрудника.ОбъектВыгружается(Объект.Ссылка);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РабочееМестоОхраныТруда;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		Если Не ОбъектВыгружается Или Объект.ПометкаУдаления Тогда
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 				= Объект.Ссылка;
			МенеджерЗаписи.УсловноВыгружается 	= Объект.ПометкаУдаления Или Объект.ВАрхиве;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка 		= Объект.Ссылка;
		МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиИспользоватьРабочиеМестаОхраныТруда(Объект)

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника()
		Или Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не Объект.Значение Тогда
		НастройкиФункциональности = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		Если НастройкиФункциональности.ПоказыватьОхрануТруда Тогда
			НастройкиФункциональности.ПоказыватьОхрануТруда = Ложь;
			ИнтеграцияКабинетСотрудника.СохранитьНастройкиИспользуемаяФункциональностьСервиса(НастройкиФункциональности);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Процедура ЗарегистрироватьОбновлениеРуководителейПодразделений(ПозицииШР) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Подразделения = ИнтеграцияУправлениеПерсоналомРасширенный.ПодразделенияПозицийРуководителей(ПозицииШР);
	Если Не ЗначениеЗаполнено(Подразделения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
	РассчитатьЗарегистрироватьИзмененияОбъектов(Подразделения, ТипОбъекта);
	
КонецПроцедуры

Функция ИменаКонтролируемыхРеквизитов(Объект) Экспорт
	
	ИменаРеквизитов = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		ИменаРеквизитов = "Владелец,Подразделение,Должность,Наименование,ПометкаУдаления";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ГрафикиРаботыСотрудников") Тогда
		ИменаРеквизитов = "Наименование,ПометкаУдаления";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		ИменаРеквизитов = "Наименование,Код,Родитель";
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущийРуководитель", Объект.Метаданные()) Тогда
			ИменаРеквизитов = ИменаРеквизитов + ",ТекущийРуководитель";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СборГрафиковОтпусков") Тогда
		ИменаРеквизитов = "Год,СборЗапущен,СборЗавершен,Состояние,ПометкаУдаления";
	ИначеЕсли ТипЗнч(Объект) = ИнтеграцияУправлениеПерсоналомРасширенный.ТипВидыПредоставляемыхСотрудникамСправокОбъект() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
			МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			ИменаРеквизитов = МодульСамообслуживаниеСотрудников.ИменаКонтролируемыхПолейПредоставляемыхСотрудникамСправок(Объект);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ВидыОтпусков") Тогда
		ИменаРеквизитов = "Наименование,ОсновнойОтпуск";
	ИначеЕсли ТипЗнч(Объект) = ИнтеграцияУправлениеПерсоналомРасширенный.ТипРабочиеМестаОхраныТрудаОбъект() Тогда
		ИменаРеквизитов = "Владелец,Должность,Наименование,Номер,ВАрхиве,ПометкаУдаления";
	КонецЕсли;
	
	Возврат ИменаРеквизитов;
	
КонецФункции 

Функция МестоПозицийВСтруктуреПредприятия(ПозицияШР)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.МестоПозицииВСтруктуреПредприятия(ПозицияШР);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ОбъектыЕстьВПравилах(ПроверяемыеОбъекты, Приложения)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ПроверяемыеОбъекты);
	Запрос.УстановитьПараметр("Приложения", Приложения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаВыгрузки.Ссылка КАК Ссылка,
	|	ПравилаВыгрузки.Приложение КАК Приложение
	|ИЗ
	|	РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом КАК ПравилаВыгрузки
	|ГДЕ
	|	ПравилаВыгрузки.Приложение В(&Приложения)
	|	И ПравилаВыгрузки.Ссылка В(&Ссылки)";
	ОбъектыПравил = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("Приложение");
	Для каждого Приложение Из Приложения Цикл
		ОбъектыЕстьВПравилахПриложения = Новый Соответствие; 
		Отбор.Приложение = Приложение;
		МассивСсылок = ОбъектыПравил.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		ОбъектыЕстьВПравилах = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(МассивСсылок);
		Для каждого ПроверяемыйОбъект Из ПроверяемыеОбъекты Цикл
			ОбъектыЕстьВПравилахПриложения.Вставить(ПроверяемыйОбъект, ОбъектыЕстьВПравилах[ПроверяемыйОбъект] = Истина);
		КонецЦикла;
		Результат.Вставить(Приложение, ОбъектыЕстьВПравилахПриложения);
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

Процедура РассчитатьЗарегистрироватьИзмененияОбъектов(ОбъектыДляРегистрации, ТипОбъекта)

	Результат = РассчитатьИзмененияДляПриложений(ОбъектыДляРегистрации, ТипОбъекта);
	Если ЗначениеЗаполнено(Результат.ИзмененияУП) Или ЗначениеЗаполнено(Результат.ИзмененияКС) Тогда
		ИнтеграцияУправлениеПерсоналомСобытия.ЗарегистрироватьИзмененияОбъектов(Неопределено, Неопределено, Результат.ИзмененияУП, Неопределено, Результат.ИзмененияКС);
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьИзмененияДляПриложений(ОбъектыДляРегистрации, ТипОбъекта)
	
	Результат = Новый Структура("ИзмененияУП,ИзмененияКС");
	
	ПроверяемыеОбъекты = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаются(ОбъектыДляРегистрации); 
	
	ИзмененияУП = Новый ТаблицаЗначений;
	ИзмененияУП.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменение1СПерсонал.Тип));
	ИзмененияУП.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	ИзмененияУП.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
	
	ИзмененияКС = Новый ТаблицаЗначений;
	ИзмененияКС.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменениеКабинетСотрудника.Тип));
	ИзмененияКС.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	ИзмененияКС.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
	
	Для каждого ЭлементКоллекции Из ПроверяемыеОбъекты Цикл
		
		ВыгружаемыеОбъекты = ЭлементКоллекции.Значение;
		Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
			Если ЭлементКоллекции.Ключ = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
				Для каждого Ссылка Из ВыгружаемыеОбъекты Цикл
					НоваяСтрока = ИзмененияУП.Добавить();
					НоваяСтрока.Ссылка 			= Ссылка;
					НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЦикла;
			Иначе
				Для каждого Ссылка Из ВыгружаемыеОбъекты Цикл
					НоваяСтрока = ИзмененияКС.Добавить();
					НоваяСтрока.Ссылка 			= Ссылка;
					НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;

	Результат.ИзмененияУП = ИзмененияУП;
	Результат.ИзмененияКС = ИзмененияКС;
	
	Возврат Результат;

КонецФункции

Процедура ЗарегистрироватьОбновлениеВидовСправок()

	ТипСсылка = ИнтеграцияУправлениеПерсоналомРасширенный.ТипВидПредоставляемойСотрудникамСправкиСсылка();
	Если ТипСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК Таблица
	|ГДЕ
	|	&Условие";
	
	ИмяТаблицы = Метаданные.НайтиПоТипу(ТипСсылка).ПолноеИмя();
	Условие = СтрШаблон("%1 %2","Таблица.Ссылка ССЫЛКА", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Условие", Условие);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 






















