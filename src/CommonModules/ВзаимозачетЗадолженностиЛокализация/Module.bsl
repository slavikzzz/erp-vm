
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	
	МеханизмыДокумента.Добавить("ПодарочныеСертификаты");
	
	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	МеханизмыДокумента.Добавить("УчетУСНПСН");
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт	

КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	ПодарочныеСертификатыСервер.ОбработкаПроверкиЗаполнения(Объект, Отказ);
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	//++ Локализация
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		ЗаполнитьПоОперацииПоЯндексКассе(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт

КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	Документы.СчетФактураВыданныйАванс.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ВзаимозачетЗадолженности) Тогда

		// Акт взаимозачета (Microsoft Word)
		ИмяМакета = "ПФ_DOC_АктВзаимозачета" + "_" + ОбщегоНазначения.КодОсновногоЯзыка();
		Если Метаданные.Документы.ВзаимозачетЗадолженности.Макеты.Найти(ИмяМакета) <> Неопределено Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаВзаимозачетаЗадолженностиMicrosoftWord";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "АктВзаимозачетаMicrosoftWord";
			КомандаПечати.Представление = НСтр("ru = 'Акт взаимозачета (Microsoft Word)';
												|en = 'Netting agreement (Microsoft Word)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
																"ВидОперации",
																Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом,
																ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;

		// Акт переуступки долга (Microsoft Word)
		ИмяМакета = "ПФ_DOC_АктПереуступкиДолга" + "_" + ОбщегоНазначения.КодОсновногоЯзыка();
		Если Метаданные.Документы.ВзаимозачетЗадолженности.Макеты.Найти(ИмяМакета) <> Неопределено Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаПереуступкиДолгаMicrosoftWord";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "АктПереуступкиДолгаMicrosoftWord";
			КомандаПечати.Представление = НСтр("ru = 'Акт переуступки долга (Microsoft Word)';
												|en = 'Debt assignment protocol (Microsoft Word)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
																"ВидОперации",
																Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом,
																ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		
		// Акт переуступки долга между организациями (Microsoft Word)
		ИмяМакета = "ПФ_DOC_АктПереуступкиДолгаМеждуОрганизациями" + "_" + ОбщегоНазначения.КодОсновногоЯзыка();
		Если Метаданные.Документы.ВзаимозачетЗадолженности.Макеты.Найти(ИмяМакета) <> Неопределено Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаПереуступкиДолгаМеждуОрганизациямиMicrosoftWord";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "АктПереуступкиДолгаМеждуОрганизациямиMicrosoftWord";
			КомандаПечати.Представление = НСтр("ru = 'Акт переуступки долга между организациями (Microsoft Word)';
												|en = 'Debt assignment protocol between companies (Microsoft Word)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
			КомандаПечати.ФункциональныеОпции = "ИспользоватьНесколькоОрганизаций";
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
																"ВидОперации",
																Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом,
																ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр).
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
#Область ВзаимозачетСФилиалами // (Дт 6Х.ХХ :: Кт 79.02), (Дт 79.02 :: Кт 6Х.ХХ)

	ТекстВзаимозачетаСФилиалами = ТекстВзаимозачетаСФилиалами();

#КонецОбласти

#Область ВзаимозачетЧерез76    // (Дт 6Х.ХХ :: Кт 76.Х9), (Дт 76.Х9 :: Кт 6Х.ХХ)

	ТекстВзаимозачетаЧерез76 = 
	"
	|ВЫБРАТЬ // Дт 6Х.ХХ - Кт 76.Х9
	|	ДвиженияКК.Регистратор,
	|	ДвиженияКК.Период,
	|	ДвиженияКК.Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	ДвиженияКК.СуммаРегл КАК Сумма,	
	|	ДвиженияКК.Сумма	 КАК СуммаУУ,
	|	
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация = ВЫРАЗИТЬ(ДвиженияКК.КорКонтрагент КАК Справочник.Организации).ГоловнаяОрганизация
	|				ИЛИ ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.КорКонтрагент
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	ДвиженияКК.КорВалютаВзаиморасчетов КАК ВалютаДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеДт,
	|	ДвиженияКК.КорНаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация = ВЫРАЗИТЬ(ДвиженияКК.КорКонтрагент КАК Справочник.Организации).ГоловнаяОрганизация
	|				ИЛИ ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.КорКонтрагент
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК СчетДт,
	|	
	|	ДвиженияКК.КорКонтрагент КАК СубконтоДт1,
	|	ДвиженияКК.КорДоговор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ДвиженияКК.КорСуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ДвиженияКК.КорВалютаВзаиморасчетов КАК ВалютаКт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА ДвиженияКК.КорВалютаВзаиморасчетов = ДвиженияКК.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ)
	|	КОНЕЦ КАК СчетКт,
	|	
	|	ДвиженияКК.КорКонтрагент КАК СубконтоКт1,
	|	ДвиженияКК.КорДоговор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	ДвиженияКК.КорСуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Взаимозачет задолженности через транзитный счет"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВзаимозачетЗадолженности КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДвиженияКК
	|	ПО
	|		Операция.Ссылка = ДвиженияКК.Регистратор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК КорОбъектыРасчетов
	|	ПО
	|		ДвиженияКК.КорОбъектРасчетов = КорОбъектыРасчетов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		втУчетнаяПолитика КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ДвиженияКК.Регистратор = УчетнаяПолитикаОрганизаций.Ссылка
	|		И ДвиженияКК.Организация = УчетнаяПолитикаОрганизаций.Организация
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Константы КАК Константы
	|	ПО 
	|		ИСТИНА
	|ГДЕ
	|	ДвиженияКК.Организация.ГоловнаяОрганизация <> ЕСТЬNULL(ДвиженияКК.Контрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО)
	|	И ДвиженияКК.Организация.ГоловнаяОрганизация <> ЕСТЬNULL(ДвиженияКК.КорКонтрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО)
	|	И ДвиженияКК.ТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|	И ДвиженияКК.КорТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|	И ЕСТЬNULL(УчетнаяПолитикаОрганизаций.ВзаимозачетЧерезСчет76, ЛОЖЬ)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Дт 76.Х9 - Кт 6Х.ХХ
	|	ДвиженияКК.Регистратор,
	|	ДвиженияКК.Период,
	|	ДвиженияКК.Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	ДвиженияКК.СуммаРегл КАК Сумма,	
	|	ДвиженияКК.Сумма	 КАК СуммаУУ,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	ДвиженияКК.КорВалютаВзаиморасчетов КАК ВалютаДт,
	|	ЕСТЬNULL(ДвиженияКК.КорОбъектРасчетов.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА ДвиженияКК.КорВалютаВзаиморасчетов = ДвиженияКК.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ)
	|	КОНЕЦ КАК СчетДт,
	|	
	|	ДвиженияКК.КорКонтрагент КАК СубконтоДт1,
	|	ДвиженияКК.КорДоговор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ДвиженияКК.КорСуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация = ВЫРАЗИТЬ(ДвиженияКК.Контрагент КАК Справочник.Организации).ГоловнаяОрганизация
	|				ИЛИ ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.Контрагент
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	ДвиженияКК.ОбъектРасчетов.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ДвиженияКК.ВалютаВзаиморасчетов КАК ВалютаКт,
	|	ДвиженияКК.ОбъектРасчетов.Подразделение КАК ПодразделениеКт,
	|	ДвиженияКК.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация = ВЫРАЗИТЬ(ДвиженияКК.Контрагент КАК Справочник.Организации).ГоловнаяОрганизация
	|				ИЛИ ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.Контрагент
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК СчетКт,
	|	
	|	ДвиженияКК.Контрагент КАК СубконтоКт1,
	|	ДвиженияКК.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	ДвиженияКК.СуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Взаимозачет задолженности через транзитный счет"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВзаимозачетЗадолженности КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДвиженияКК
	|	ПО 
	|		Операция.Ссылка = ДвиженияКК.Регистратор
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		втУчетнаяПолитика КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ДвиженияКК.Регистратор = УчетнаяПолитикаОрганизаций.Ссылка
	|		И ДвиженияКК.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Константы КАК Константы
	|	ПО 
	|		ИСТИНА
	|ГДЕ
	|	ДвиженияКК.Организация.ГоловнаяОрганизация <> ЕСТЬNULL(ДвиженияКК.Контрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО)
	|	И ДвиженияКК.Организация.ГоловнаяОрганизация <> ЕСТЬNULL(ДвиженияКК.КорКонтрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО)
	|	И ДвиженияКК.ТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|	И ДвиженияКК.КорТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|	И ЕСТЬNULL(УчетнаяПолитикаОрганизаций.ВзаимозачетЧерезСчет76, ЛОЖЬ)
	|";
	
#КонецОбласти

#Область ВзаимозачетНапрямую   // (Дт 6Х.ХХ :: Кт 6Х.ХХ)

	ТекстВзаимозачетаНапрямую = 
	"
	|ВЫБРАТЬ // Дт 6Х.ХХ - Кт 6Х.ХХ
	|	ДвиженияКК.Регистратор,
	|	ДвиженияКК.Период,
	|	ДвиженияКК.Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	ДвиженияКК.СуммаРегл КАК Сумма,	
	|	ДвиженияКК.Сумма	 КАК СуммаУУ,
	|	
	|	ВЫБОР
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	ДвиженияКК.КорВалютаВзаиморасчетов КАК ВалютаДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ДвиженияКК.КорКонтрагент КАК СубконтоДт1,
	|	ДвиженияКК.КорДоговор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ДвиженияКК.КорСуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ДвиженияКК.ВалютаВзаиморасчетов КАК ВалютаКт,
	|	ОбъектыРасчетов.Подразделение КАК ПодразделениеКт,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	
	|	ДвиженияКК.Контрагент КАК СубконтоКт1,
	|	ДвиженияКК.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	ДвиженияКК.СуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Взаимозачет задолженности"" КАК Содержание
	|ИЗ  
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВзаимозачетЗадолженности КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДвиженияКК
	|	ПО 
	|		Операция.Ссылка = ДвиженияКК.Регистратор
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО
	|		ДвиженияКК.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК КорОбъектыРасчетов
	|	ПО
	|		ДвиженияКК.КорОбъектРасчетов = КорОбъектыРасчетов.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		втУчетнаяПолитика КАК УчетнаяПолитикаОрганизаций
	|	ПО 
	|		ДвиженияКК.Регистратор = УчетнаяПолитикаОрганизаций.Ссылка
	|		И ДвиженияКК.Организация = УчетнаяПолитикаОрганизаций.Организация
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Константы КАК Константы
	|	ПО
	|		ИСТИНА
	|ГДЕ
	|	ДвиженияКК.Организация.ГоловнаяОрганизация <> ЕСТЬNULL(ДвиженияКК.Контрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО)
	|	И ДвиженияКК.Организация.ГоловнаяОрганизация <> ЕСТЬNULL(ДвиженияКК.КорКонтрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО)
	|	И ДвиженияКК.ТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|	И ДвиженияКК.КорТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|	И НЕ ЕСТЬNULL(УчетнаяПолитикаОрганизаций.ВзаимозачетЧерезСчет76, ЛОЖЬ)
	|";
	
#КонецОбласти

	ТекстыОтражения = Новый Массив;
	ТекстыОтражения.Добавить(ТекстВзаимозачетаСФилиалами);
	ТекстыОтражения.Добавить(ТекстВзаимозачетаЧерез76);
	ТекстыОтражения.Добавить(ТекстВзаимозачетаНапрямую);
	
	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	//-- Локализация
	Возврат "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВсеДокументы.Ссылка КАК Ссылка,
	|	ВсеДокументы.Организация КАК Организация,
	|	ВсеДокументы.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВсеДокументы.Дата КАК Дата
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВсеДокументы
	|	ПО ДокументыКОтражению.Ссылка = ВсеДокументы.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВсеДокументы.Ссылка,
	|	ВсеДокументы.КонтрагентДебитор,
	|	ВЫРАЗИТЬ(ВсеДокументы.КонтрагентДебитор КАК Справочник.Организации).ГоловнаяОрганизация,
	|	ВсеДокументы.Дата
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВсеДокументы
	|	ПО ДокументыКОтражению.Ссылка = ВсеДокументы.Ссылка
	|	И ТИПЗНАЧЕНИЯ(ВсеДокументы.КонтрагентДебитор) = ТИП(Справочник.Организации)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВсеДокументы.Ссылка,
	|	ВсеДокументы.КонтрагентКредитор,
	|	ВЫРАЗИТЬ(ВсеДокументы.КонтрагентКредитор КАК Справочник.Организации).ГоловнаяОрганизация,
	|	ВсеДокументы.Дата
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ВзаимозачетЗадолженности КАК ВсеДокументы
	|	ПО 
	|		ДокументыКОтражению.Ссылка = ВсеДокументы.Ссылка
	|		И ТИПЗНАЧЕНИЯ(ВсеДокументы.КонтрагентКредитор) = ТИП(Справочник.Организации)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВсеДокументы.Ссылка,
	|	ВсеДокументы.ОрганизацияКредитор,
	|	ВсеДокументы.ОрганизацияКредитор.ГоловнаяОрганизация,
	|	ВсеДокументы.Дата
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ВзаимозачетЗадолженности КАК ВсеДокументы
	|	ПО 
	|		ДокументыКОтражению.Ссылка = ВсеДокументы.Ссылка
	|		И ВсеДокументы.ОрганизацияКредитор <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументы.Ссылка,
	|	втДокументы.Организация,
	|	УчетнаяПолитикаОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыУчетнойПолитики
	|ИЗ
	|	втДокументы КАК втДокументы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.УчетнаяПолитикаБухУчета КАК УчетнаяПолитикаОрганизаций
	|	ПО 
	|		втДокументы.ГоловнаяОрганизация = УчетнаяПолитикаОрганизаций.Организация
	|		И втДокументы.Дата >= УчетнаяПолитикаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втДокументы.Ссылка,
	|	втДокументы.Организация,
	|	УчетнаяПолитикаОрганизаций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументы.Ссылка КАК Ссылка,
	|	втДокументы.Организация КАК Организация,
	|	ЕСТЬNULL(УчетнаяПолитикаОрганизаций.ВзаимозачетЧерезСчет76, ЛОЖЬ) КАК ВзаимозачетЧерезСчет76
	|	
	|ПОМЕСТИТЬ втУчетнаяПолитика
	|ИЗ
	|	втДокументы КАК втДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ втПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|	ПО 
	|		втДокументы.Ссылка = ПериодыУчетнойПолитики.Ссылка
	|		И втДокументы.Организация = ПериодыУчетнойПолитики.Организация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухУчета КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ПериодыУчетнойПолитики.ГоловнаяОрганизация = УчетнаяПолитикаОрганизаций.Организация
	|		И ПериодыУчетнойПолитики.Период = УчетнаяПолитикаОрганизаций.Период
	|		
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Организация"
	+"
	|;
	|";
	
	Возврат ТекстЗапроса;
	
	//-- Локализация
	Возврат "";
	
КонецФункции

//++ Локализация

// Функция возвращает текст запроса для отражения взаимозачета между филиалами.
// Проводки вида Дт 6Х.ХХ :: Кт 79.02, Дт 79.02 :: Кт 6Х.ХХ.
//
// Параметры:
//  ИмяДокумента - Строка - Имя документа для которого необходимо сформировать запрос получения проводок.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстВзаимозачетаСФилиалами(ИмяДокумента = "") Экспорт
	
	ТекстЗапроса =
	"
	|ВЫБРАТЬ // ВзаимозачетСФилиалами (Дт 6Х.ХХ :: Кт 79.02), (Дт 79.02 :: Кт 6Х.ХХ)
	|	ДвиженияКК.Регистратор КАК Ссылка,
	|	ДвиженияКК.Период,
	|	ДвиженияКК.Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	ДвиженияКК.СуммаРегл КАК Сумма,	
	|	ДвиженияКК.Сумма	 КАК СуммаУУ,
	|	
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.КорКонтрагент.ГоловнаяОрганизация
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		КОГДА ДвиженияКК.КорТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	ДвиженияКК.КорВалютаВзаиморасчетов КАК ВалютаДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеДт,
	|	ЕСТЬNULL(КорОбъектыРасчетов.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.КорКонтрагент.ГоловнаяОрганизация
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК СчетДт,
	|	
	|	ДвиженияКК.КорКонтрагент КАК СубконтоДт1,
	|	ДвиженияКК.КорДоговор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ДвиженияКК.КорСуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.Контрагент.ГоловнаяОрганизация
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		КОГДА ДвиженияКК.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ДолгКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ДвиженияКК.ВалютаВзаиморасчетов КАК ВалютаКт,
	|	ОбъектыРасчетов.Подразделение КАК ПодразделениеКт,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР
	|		КОГДА ДвиженияКК.Организация.ГоловнаяОрганизация = ДвиженияКК.Контрагент.ГоловнаяОрганизация
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК СчетКт,
	|	
	|	ДвиженияКК.Контрагент КАК СубконтоКт1,
	|	ДвиженияКК.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	ДвиженияКК.СуммаВВалютеВзаиморасчетов КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Взаимозачет задолженности с филиалом"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВзаимозачетЗадолженности КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДвиженияКК
	|	ПО 
	|		Операция.Ссылка = ДвиженияКК.Регистратор
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО
	|		ДвиженияКК.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК КорОбъектыРасчетов
	|	ПО
	|		ДвиженияКК.КорОбъектРасчетов = КорОбъектыРасчетов.Ссылка
	|ГДЕ
	|	(ДвиженияКК.Организация.ГоловнаяОрганизация = ЕСТЬNULL(ДвиженияКК.Контрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО)
	|		ИЛИ ДвиженияКК.Организация.ГоловнаяОрганизация = ЕСТЬNULL(ДвиженияКК.КорКонтрагент.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО))
	|	И ДвиженияКК.ТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|	И ДвиженияКК.КорТипСуммы <> ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.ПустаяСсылка)
	|";
	
	Если НЕ ПустаяСтрока(ИмяДокумента) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВзаимозачетЗадолженности", ИмяДокумента);
		ТекстЗапроса = ТекстЗапроса + "
		|	И НЕ &НоваяАрхитектураВзаиморасчетов";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- Локализация

#КонецОбласти
//-- НЕ УТ

//++ Локализация
#Область Фискализация

// Возвращает параметры операции фискализации чека для печати чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Структура - Структура параметров операции фискализации чека
Функция ОсновныеПараметрыОперации(Форма) Экспорт
	
	ОсновныеПараметрыОперации = ФормированиеФискальныхЧековСерверПереопределяемый.СтруктураОсновныхПараметровОперации();
	
	ОсновныеПараметрыОперации.ДокументСсылка       = Форма.Объект.Ссылка;
	ОсновныеПараметрыОперации.СуммаДокумента       = Форма.Объект.СуммаРегл;
	
	ОсновныеПараметрыОперации.ИмяКомандыПробитияЧека = Форма.ИмяКомандыПробитияЧека;
	
	ОсновныеПараметрыОперации.ИмяРеквизитаГиперссылкиНаФорме = "ТекстДокументыНаОснованииПодвал";
	
	Если Форма.ИмяКомандыПробитияЧека = "КонтрагентПоставщик" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "КонтрагентДебитор" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "КонтрагентКредитор" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентКредитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "КонтрагентПодарочныйСертификат" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентКредитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "ОрганизацияДебитор" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	Иначе // ОрганизацияКредитор
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.ОрганизацияКредитор;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	КонецЕсли;
	
	ОсновныеПараметрыОперации.Валюта =  ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ОсновныеПараметрыОперации.Организация);
	
	Возврат ОсновныеПараметрыОперации;
	
КонецФункции

// Определяет, разрешено ли пробитие фискального чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Булево - Истина, если разрешено пробитие чека
Функция РазрешеноПробитиеФискальныхЧековПоДокументу(Форма) Экспорт
	
	Организация = Форма.Объект.Организация;
	ОрганизацияКредитор = Форма.Объект.ОрганизацияКредитор;
	
	КонтрагентДебитор = Форма.Объект.КонтрагентДебитор;
	КонтрагентКредитор = Форма.Объект.КонтрагентКредитор;
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
			
		Возврат Ложь;
	КонецЕсли;
	
	РазрешеноПробитиеФискальныхЧековПоДокументу = Ложь;
	
	ТипКонтрагентДебитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		ТипКонтрагентДебитор = Форма.ЮрФизЛицоДебитор;
	КонецЕсли;
	
	ТипКонтрагентКредитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентКредитор) Тогда
		ТипКонтрагентКредитор = Форма.ЮрФизЛицоКредитор;
	КонецЕсли;
	
	ВидОперации = Форма.Объект.ВидОперации;
	
	// Организация + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
	
	// Организация + Контрагент + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И ((ТипКонтрагентДебитор <> Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо)
			ИЛИ (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор <> Перечисления.ЮрФизЛицо.ФизЛицо)) Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
	
	// Организация + Физическое лицо 1 + Физическое лицо 2
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
	
	// Организация 1 + Организация 2 + Физическое лицо 1
	Если ЗначениеЗаполнено(ОрганизацияКредитор)
		И Организация <> ОрганизацияКредитор
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
		
	// Организация + Физическое лицо 1 + Физическое лицо 2 + Подарочные сертификаты
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
		И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ТаблицаЗадолженности = Форма.Объект.КредиторскаяЗадолженность;
		Если ТаблицаЗадолженности.Количество() = 1
			И ЗначениеЗаполнено(ТаблицаЗадолженности[0].ОбъектРасчетов)
			И ТаблицаЗадолженности[0].ОбъектРасчетовПодарочныйСертификат Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДебиторскаяЗадолженность.ОбъектРасчетов
			|ПОМЕСТИТЬ ОбъектыРасчетов
			|ИЗ
			|	&ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
			|;
			|//////////////////////////////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.ОбъектРасчетов.Объект КАК ОбъектОплаты
			|ИЗ
			|	ОбъектыРасчетов КАК ОбъектыРасчетов";
			Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", Форма.Объект.ДебиторскаяЗадолженность.Выгрузить());
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				РазрешеноПробитиеФискальныхЧековПоДокументу = Ложь;
				Если ФормированиеФискальныхЧековСервер.ДокументПоставкиСВозможностьюПробитияЧеков(Выборка.ОбъектОплаты)
					ИЛИ ТипЗнч(Выборка.ОбъектОплаты) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
				КонецЕсли;
				
				Если НЕ РазрешеноПробитиеФискальныхЧековПоДокументу Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РазрешеноПробитиеФискальныхЧековПоДокументу;
	
КонецФункции

// Формирует массив форматированных строк для формирования гиперссылки пробития фискального чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ-ссылка, по которому пробивается фискальный чек
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// 	МассивПредставлений - Массив из ФорматированнаяСтрока - Массив форматированных строк для формирования гиперссылки
//    пробития фискального чека.
Процедура ОбновитьГиперссылкуПробитияФискальногоЧека(ДокументСсылка, Форма, МассивПредставлений) Экспорт
	
	Организация = Форма.Объект.Организация;
	ОрганизацияКредитор = Форма.Объект.ОрганизацияКредитор;
	
	КонтрагентДебитор = Форма.Объект.КонтрагентДебитор;
	КонтрагентКредитор = Форма.Объект.КонтрагентКредитор;
	
	ВидОперации = Форма.Объект.ВидОперации;
	
	МассивСсылок = Новый Массив;
	ТипКонтрагентДебитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		ТипКонтрагентДебитор = Форма.ЮрФизЛицоДебитор;
		МассивСсылок.Добавить(КонтрагентДебитор);
	КонецЕсли;
	ТипКонтрагентКредитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентКредитор) Тогда
		ТипКонтрагентКредитор = Форма.ЮрФизЛицоКредитор;
		МассивСсылок.Добавить(КонтрагентКредитор);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивСсылок.Добавить(Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияКредитор) Тогда
		МассивСсылок.Добавить(ОрганизацияКредитор);
	КонецЕсли;
	НаименованияСсылок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "Наименование");
	
	МассивПредставлений = Новый Массив;
	
	// Организация + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		МассивПредставлений.Добавить("Зачет закупки: ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентПоставщикОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 
				ТекстСсылки = "КонтрагентПоставщикПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("Зачет продажи: ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентДебиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 
				ТекстСсылки = "КонтрагентДебиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация + Контрагент + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И ((ТипКонтрагентДебитор <> Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо)
			ИЛИ (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор <> Перечисления.ЮрФизЛицо.ФизЛицо)) Тогда
		
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			
			ТекстСсылки = "КонтрагентДебиторОткрытьЗаписьФискальнойОперации";
			Если ТипКонтрагентДебитор <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ТекстСсылки = "КонтрагентКредиторОткрытьЗаписьФискальнойОперации";
			КонецЕсли;
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "КонтрагентКредиторПробитьЧек";
				Если ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					ТекстСсылки = "КонтрагентДебиторПробитьЧек";
				КонецЕсли;
				
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация + Физическое лицо 1 + Физическое лицо 2
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		
		МассивПредставлений.Добавить("" + НаименованияСсылок[КонтрагентДебитор] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентДебиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "КонтрагентДебиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("" + НаименованияСсылок[КонтрагентКредитор] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентКредиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "КонтрагентКредиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// Организация 1 + Организация 2 + Физическое лицо 1
	Если ЗначениеЗаполнено(ОрганизацияКредитор)
		И Организация <> ОрганизацияКредитор
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		МассивПредставлений.Добавить("" + НаименованияСсылок[Организация] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "ОрганизацияОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "ОрганизацияПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("" + НаименованияСсылок[ОрганизацияКредитор] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "ОрганизацияКредиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.ОрганизацияКредитор) Тогда 			
				ТекстСсылки = "ОрганизацияКредиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация + Физическое лицо 1 + Физическое лицо 2
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ((ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами
			И КонтрагентДебитор <> КонтрагентКредитор
			И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И КонтрагентКредитор = Справочники.Контрагенты.РозничныйПокупатель)
	// Организация + Физическое лицо 1 + Физическое лицо 2 + Подарочный сертификат
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом
			И КонтрагентДебитор <> КонтрагентКредитор
			И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И КонтрагентКредитор = Справочники.Контрагенты.РозничныйПокупатель)
	// Организация + Физическое лицо
		Или (ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент
			И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И КонтрагентДебитор = Справочники.Контрагенты.РозничныйПокупатель)) Тогда
			
		ТаблицаЗадолженности = Форма.Объект.КредиторскаяЗадолженность;
			
		Если ТаблицаЗадолженности.Количество()=1 Тогда
			ОбъектРасчетов = ТаблицаЗадолженности[0].ОбъектРасчетов;
			Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
				Если ТаблицаЗадолженности[0].ОбъектРасчетовПодарочныйСертификат Тогда
 					
					МассивПредставлений.Добавить("" + НаименованияСсылок[КонтрагентДебитор] + ": ");
					ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка);
					
					Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
						
						НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
						
						ТекстСсылки = "КонтрагентПодарочныйСертификатОткрытьЗаписьФискальнойОперации";
						
						ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
						
					ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
						
						ТекстСсылки = "КонтрагентПодарочныйСертификатПробитьЧек";
						
						ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
						
					Иначе
						
						ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

// Определяет виды фискальных чеков, доступных по документу
// 
// Параметры:
// 	ВидыЧеков - ТаблицаЗначений - Таблица значений, содержащая виды фискальных чеков, доступных по документу
// 	Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция по документу
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
Процедура ЗаполнитьВидыФискальныхЧековПоДокументу(ВидыЧеков, Операция, ИмяКомандыПробитияЧека) Экспорт
	
	ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	Если ИмяКомандыПробитияЧека = "КонтрагентПоставщик" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентДебитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентКредитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентПодарочныйСертификат" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияДебитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияКредитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	КонецЕсли;
	
	ВидЧека = ВидыЧеков.Добавить();
	ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
	ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетаДенежнымиСредствами;
	ВидЧека.ВидЧекаКоррекции = Неопределено;
	
КонецПроцедуры

// Определяет систему налогообложения по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по документу
Функция СистемаНалогообложенияПоДокументу(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация");
	СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(РеквизитыДокумента.Организация);
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Возвращает данные по объекта расчетов по документу в зависимости от выбранной команды пробития чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, по которому определяются объекты расчетов
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений, содержащая суммы по объектам расчетов документа
Функция ДанныеПоОбъектамРасчетовПоДокументу(ДокументСсылка, ИмяКомандыПробитияЧека, ВзаиморасчетыОбновлены) Экспорт
	
	Если ИмяКомандыПробитияЧека = "КонтрагентПоставщик" Тогда
		
		Возврат ПолучитьДанныеПоЗадолженностиПередПоставщикамиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентДебитор" Тогда
		
		Возврат ПолучитьДанныеПоДебиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентКредитор" Тогда
		
		Возврат ПолучитьДанныеПоКредиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияДебитор" Тогда
		
		Возврат ПолучитьДанныеПоДебиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияКредитор" Тогда
		
		Возврат ПолучитьДанныеПоКредиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентПодарочныйСертификат" Тогда
		
		Возврат ПолучитьДанныеПоОплатеПодарочнымСертификатомДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

// Возвращает тип оплаты по документу для заполнения фискального чека
// 
// Параметры:
//  ДокументСсылка- ДокументСсылка - Документ, по которому пробивается фискальный чек
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОплатыККТ
Функция ТипОплатыПоДокументу(ДокументСсылка) Экспорт
	
	Возврат Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
	
КонецФункции

#КонецОбласти
//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ТекстЗапросаТаблицаКУДиР(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

//++ Локализация

//++ НЕ УТ

Функция ТекстЗапросаТаблицаКУДиР(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "КнигаУчетаДоходовИРасходов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Документы.ВзаимозачетЗадолженности.ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	Документы.ВзаимозачетЗадолженности.УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ОрганизацииНаУСН = УчетнаяПолитикаПереопределяемый.ОрганизацииНаУСНЗаПериод(НачалоМесяца(Запрос.Параметры.Период), КонецМесяца(Запрос.Параметры.Период));
	Запрос.УстановитьПараметр("ОрганизацииНаУСН", ОрганизацииНаУСН);
	
	ПараметрыУчетаОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Запрос.Параметры.Организация, Запрос.Параметры.Период);
	НДСВключатьВДоходы = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;

	Запрос.УстановитьПараметр("НДСВключатьВДоходы", НДСВключатьВДоходы);
	
	ПараметрыУчетаОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Запрос.Параметры.КонтрагентДебитор, Запрос.Параметры.Период);
	НДСВключатьВДоходы = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Запрос.УстановитьПараметр("НДСВключатьВДоходыДебитор", НДСВключатьВДоходы);
	
	ПараметрыУчетаОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Запрос.Параметры.Организация, Запрос.Параметры.Период);
	Если НЕ ЗначениеЗаполнено(ПараметрыУчетаОрганизации.СтавкаНДСПриУСН) Тогда
		ОсновнаяСтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(Запрос.Параметры.Организация, Запрос.Параметры.Период);
		Если ЗначениеЗаполнено(ОсновнаяСтавкаНДС) Тогда
			ОсновнаяСтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяСтавкаНДС, "Ставка");
		Иначе
			ОсновнаяСтавкаНДС = 0;
		КонецЕсли;
	Иначе
		ОсновнаяСтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУчетаОрганизации.СтавкаНДСПриУСН, "Ставка");
	КонецЕсли;
	Запрос.УстановитьПараметр("СтавкаНДС", ОсновнаяСтавкаНДС);
	
	ПараметрыУчетаОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Запрос.Параметры.КонтрагентДебитор, Запрос.Параметры.Период);
	Если НЕ ЗначениеЗаполнено(ПараметрыУчетаОрганизации.СтавкаНДСПриУСН) Тогда
		ОсновнаяСтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(Запрос.Параметры.КонтрагентДебитор, Запрос.Параметры.Период);
		Если ЗначениеЗаполнено(ОсновнаяСтавкаНДС) Тогда
			ОсновнаяСтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяСтавкаНДС, "Ставка");
		Иначе
			ОсновнаяСтавкаНДС = 0;
		КонецЕсли;
	Иначе
		ОсновнаяСтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУчетаОрганизации.СтавкаНДСПриУСН, "Ставка");
	КонецЕсли;
	Запрос.УстановитьПараметр("СтавкаНДСДебитор", ОсновнаяСтавкаНДС);
	
	//@skip-check ql-constants-in-binary-operation
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	Задолженность.Организация КАК Организация,
	|	&Ссылка КАК ДокументВозникновенияДоходовРасходов,
	|	СУММА(ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|		ТОГДА Задолженность.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК Графа4,
	|	СУММА(ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|		ТОГДА Задолженность.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК Графа5,
	|	0 КАК Графа6,
	|	0 КАК Графа7,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ &НДСВключатьВДоходы
	|		ТОГДА 
	|			(ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				ТОГДА Задолженность.СуммаВзаиморасчетов
	|				ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|			КОНЕЦ) * &СтавкаНДС / (100 + &СтавкаНДС) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ) КАК НДС,
	|	0 КАК ДоходЕНВД,
	|	&Номер КАК Номер,
	|	&Период КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности) КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	ВтДебиторскаяЗадолженность КАК Задолженность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента ПО ИСТИНА
	|ГДЕ
	|	Задолженность.Организация В (&ОрганизацииНаУСН)
	|	И ДанныеДокумента.ТипДебитора <> ДанныеДокумента.ТипКредитора
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ДанныеДокумента.КонтрагентДебитор КАК Организация,
	|	&Ссылка КАК ДокументВозникновенияДоходовРасходов,
	|	СУММА(ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|		ТОГДА Задолженность.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК Графа4,
	|	СУММА(ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|		ТОГДА Задолженность.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК Графа5,
	|	0 КАК Графа6,
	|	0 КАК Графа7,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ &НДСВключатьВДоходыДебитор
	|		ТОГДА 
	|			(ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				ТОГДА Задолженность.СуммаВзаиморасчетов
	|				ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|			КОНЕЦ) * &СтавкаНДСДебитор / (100 + &СтавкаНДСДебитор) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ) КАК НДС,
	|	0 КАК ДоходЕНВД,
	|	&Номер КАК Номер,
	|	&Период КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности) КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	ВтКредиторскаяЗадолженность КАК Задолженность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента ПО ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.ДебиторОрганизация
	|	И ДанныеДокумента.КонтрагентДебитор В (&ОрганизацииНаУСН)
	|	И ДанныеДокумента.ТипДебитора <> ДанныеДокумента.ТипКредитора
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.КонтрагентДебитор";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Документы.ВзаимозачетЗадолженности.ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период      КАК Период,
	|	&Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Период            КАК Период,
	|	ДанныеДокумента.КонтрагентДебитор КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|ИЗ ВтДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДебиторОрганизация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Период             КАК Период,
	|	ДанныеДокумента.КонтрагентКредитор КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|ИЗ ВтДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.КредиторОрганизация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                              КАК Период,
	|	ДебиторскаяЗадолженность.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	ВтДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|ГДЕ
	|	ДебиторскаяЗадолженность.Организация <> &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                               КАК Период,
	|	КредиторскаяЗадолженность.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	ВтКредиторскаяЗадолженность КАК КредиторскаяЗадолженность
	|ГДЕ
	|	КредиторскаяЗадолженность.Организация <> &Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

//-- Локализация

#КонецОбласти

#Область Прочее

//++ Локализация
Процедура ЗаполнитьПоОперацииПоЯндексКассе(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| // Данные шапки документа
	|
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный) КАК ВидОперации,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Клиент) КАК ТипКредитора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Клиент) КАК ТипДебитора,
	|
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ДанныеДокумента.Контрагент КАК КонтрагентКредитор,
	|	ДанныеДокумента.Эквайер КАК КонтрагентДебитор,
	|
	|	ДанныеДокумента.Валюта КАК Валюта,
	|
	|	&Ссылка КАК ДокументОснование,
	|
	|// Данные табличных частей
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|
	|	ДанныеДокумента.ОбъектРасчетов КАК ЗаказКредитора,
	|
	|	ДанныеДокумента.Контрагент.Партнер КАК ПартнерКредитор,
	|	ДанныеДокумента.Эквайер.Партнер КАК ПартнерДебитор
	|
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);

	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Если ДанныеЗаполнения.ДокументОснование = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Взаимозачет задолженности на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента';
			|en = 'It is not required to enter ""AR/AP offset"" based on the %1 document as it can be entered only based on the ""Payment receipt from customer"" operations'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Объект.Подразделение     = ДанныеЗаполнения.Подразделение;
	ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Объект.Ответственный     = Пользователи.ТекущийПользователь();
	
	// Дебиторская задолженность
	НоваяСтрока = Объект.ДебиторскаяЗадолженность.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.Партнер = ДанныеЗаполнения.ПартнерДебитор;
	
	// Кредиторская задолженность
	НоваяСтрока = Объект.КредиторскаяЗадолженность.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.Партнер = ДанныеЗаполнения.ПартнерКредитор;
	НоваяСтрока.ОбъектРасчетов = ДанныеЗаполнения.ЗаказКредитора;
	
КонецПроцедуры
//-- Локализация

#КонецОбласти

//++ Локализация
#Область Фискализация

Функция ПолучитьДанныеПоЗадолженностиПередПоставщикамиДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	РасчетыСПоставщикамиПоСрокам.ДолгРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
		|ГДЕ
		|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСПоставщикамиПоСрокам.ВидДвижения = &ВидДвижения
		|	И РасчетыСПоставщикамиПоСрокам.ДолгРегл > 0";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект  КАК Заказ,
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ВзаимозачетЗадолженностиКредиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоДебиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл > 0
		|			ТОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл
		|		КОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл > 0
		|			ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвиженияПриход
		|	И (РасчетыСКлиентамиПоСрокам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл > 0
		|			ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл
		|		КОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл > 0
		|			ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
		|ГДЕ
		|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСПоставщикамиПоСрокам.ВидДвижения = &ВидДвиженияРасход
		|	И (РасчетыСПоставщикамиПоСрокам.ДолгРегл > 0 ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл > 0)";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Заказ,
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ВзаимозачетЗадолженностиДебиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоКредиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	РасчетыСКлиентамиПоСрокам.ДолгРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвижения
		|	И РасчетыСКлиентамиПоСрокам.ДолгРегл > 0";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект  КАК Заказ,
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ВзаимозачетЗадолженностиКредиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоОплатеПодарочнымСертификатомДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов.Объект КАК Заказ,
		|	РасчетыСКлиентамиПоСрокам.ПредоплатаРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвиженияПриход
		|	И НЕ РасчетыСКлиентамиПоСрокам.ОбъектРасчетов.Объект ССЫЛКА Справочник.ПодарочныеСертификаты
		|	И РасчетыСКлиентамиПоСрокам.ПредоплатаРегл <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	РасчетыСКлиентамиПоСрокам.ДолгРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвиженияРасход
		|	И РасчетыСКлиентамиПоСрокам.ДолгРегл <> 0";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Заказ,
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ВзаимозачетЗадолженностиДебиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти
//-- Локализация

#КонецОбласти
