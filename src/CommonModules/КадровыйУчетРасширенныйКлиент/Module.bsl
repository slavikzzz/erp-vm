////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетРасширенныйКлиент: методы кадрового учета, работающие на стороне клиента.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму редактирования стажей сотрудника.
//
// Параметры:
//  ПараметрыФормы - Структура - См. функцию ПараметрыФормыРедактированияСтажей().
//  Обработчик - ОписаниеОповещения - Описание процедуры, вызываемой при окончании редактировании стажей с параметрами.
//     * РезультатРедактированияСтажей - Неопределено, КодВозвратаДиалога, Структура - 
//           Результат редактирования стажей.
//           При успешном окончании редактирования процедура будет вызвана с параметром типа "Структура" с полями:
//               ** Сотрудник - СправочникСсылка.Сотрудники
//               ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//               ** ДанныеСтажей - ДанныеФормыКоллекция
//           При отказе от редактирования процедура будет вызвана с параметром типа "Неопределено" или "КодВозвратаДиалога".
//           Пример чтения результатов процедуры см. в форме документа БольничныйЛист.
//     * ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ОткрытьФормуРедактированияСтажей(ПараметрыФормы, Обработчик) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ВводСтажаСотрудников", ПараметрыФормы, , , , , Обработчик);
	
КонецПроцедуры

// Возвращает параметры, необходимые для процедуры ОткрытьФормуРедактированияСтажей.
//
// Возвращаемое значение:
//   Структура - Параметры, необходимые для вызова процедуры ОткрытьФормуРедактированияСтажей.
//       * ТолькоПросмотр - Булево - Признак возможности редактирования отображаемых данных.
//       * Сотрудник - СправочникСсылка.Сотрудники - Необязательный, если передан параметр "ФизическоеЛицо".
//       * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Необязательный, если передан параметр "Сотрудник".
//       * ДатаСведений - Дата
//       * ВидыСтажа - Массив из СправочникСсылка.ВидыСтажа
//       * ДанныеСтажей - Соответствие - Данные стажей сотрудника.
//           * Ключ - СправочникСсылка.ВидыСтажа
//           * Значение - Структура - См. ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже().
//       * Записывать - Булево - Если Истина, данные о стаже будут записаны при закрытии формы.
//       * НеобязательныеВидыСтажа - ФиксированноеСоответствие - стажи, заполнение которых необязательно.
//           Для этих стажей будет выведен флажок, разрешающий редактирование данных стажа.
//           Эти виды стажа должны также быть перечислены в параметре ВидыСтажа.
//       * ЗаголовокФормы - Строка - Заголовок формы ввода стажей.
//
Функция ПараметрыФормыРедактированияСтажей() Экспорт
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыОткрытия.Вставить("Сотрудник", Неопределено);
	ПараметрыОткрытия.Вставить("ФизическоеЛицо", Неопределено);
	ПараметрыОткрытия.Вставить("ДатаСведений", Неопределено);
	ПараметрыОткрытия.Вставить("ВидыСтажа", Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеСтажей", Неопределено);
	ПараметрыОткрытия.Вставить("Записывать", Истина);
	ПараметрыОткрытия.Вставить("НеобязательныеВидыСтажа", Неопределено);
	ПараметрыОткрытия.Вставить("ЗаголовокФормы", Неопределено);
	Возврат ПараметрыОткрытия;
КонецФункции

// Открывает форму для объединения дублей из формы похожих физических лиц.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ОбъединитьДубли(Форма) Экспорт
	
	Форма.ВладелецФормы.Модифицированность = Ложь;
	Форма.ВладелецФормы.Закрыть();
	
	ПараметрыОткрытия = Новый Структура;
	
	Дубли = Новый СписокЗначений();
	Для Каждого ТекущаяСтрока Из Форма.Однофамильцы Цикл
		Дубли.Добавить(ТекущаяСтрока.ПохожийЧеловек);
	КонецЦикла;
	Если ЗначениеЗаполнено(Форма.Параметры.СсылкаНаОригинал) Тогда
		Дубли.Добавить(Форма.Параметры.СсылкаНаОригинал);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Дубли", Дубли);
	
	ОписаниеТипаВладельцаЛичныхДанных = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ТипЗнч(Дубли.Получить(0).Значение)));
	ПараметрыОткрытия.Вставить("ОписаниеТипаВладельцаЛичныхДанных", ОписаниеТипаВладельцаЛичныхДанных);

	ПараметрыОткрытия.Вставить("НеПоказыватьТипВладельцаЛичныхДанных", Истина);
	
	ОткрытьФорму("Обработка.ОбъединениеДублейПерсональныхДанных.Форма", ПараметрыОткрытия, , , , , , );
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать КадровыйУчетРасширенныйКлиент.ОткрытьФормуРедактированияСтажей.
// Открывает форму редактирования стажей сотрудника.
//
// Параметры:
//		Форма			- ФормаКлиентскогоПриложения
//		Сотрудник		- СправочникСсылка.Сотрудники
//		ДатаСведений	- Дата
//		ВидыСтажа		- Массив ссылок на элементы справочника ВидыСтажа.
//		ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица, передается если известно.
//		ДанныеСтажей	- Соответствие - Данные стажей сотрудника.
//   						* Ключ - Вид стажа;
//   						* Значение - Структура, сформированная методом ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже().
//		Записывать 		- Булево - Если Истина, данные о стаже будут записаны при закрытии формы.
//		НеобязательныеВидыСтажа	- Фиксированное соответствие - стажи, заполнение которых необязательно. Для этих стажей будет
//                                                             выведен флажок, разрешающий редактирование данных стажа. Эти
//                                                             виды стажа должны также быть перечислены в параметре ВидыСтажа.
//   						* Ключ - Вид стажа;
//   						* Значение - Строка, заголовок флажка.
//
Процедура ОткрытьФормуРедактированияСтажейСотрудника(Форма, Сотрудник, ДатаСведений, ВидыСтажа, ФизическоеЛицо = Неопределено, ДанныеСтажей = Неопределено, Записывать = Истина, НеобязательныеВидыСтажа = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("Сотрудник", Сотрудник);
	ПараметрыОткрытия.Вставить("ДатаСведений", ДатаСведений);
	ПараметрыОткрытия.Вставить("ВидыСтажа", ВидыСтажа);
	ПараметрыОткрытия.Вставить("ДанныеСтажей", ДанныеСтажей);
	ПараметрыОткрытия.Вставить("Записывать", Записывать);
	ПараметрыОткрытия.Вставить("НеобязательныеВидыСтажа", НеобязательныеВидыСтажа);
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ПараметрыОткрытия.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ВводСтажаСотрудников", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

// Устарела см. процедуру КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка.
//
Процедура ВыбратьСотрудниковРаботающихНаДату(ВладелецФормыВыбора, Организация = Неопределено, Подразделение = Неопределено, ДатаПримененияОтбора = '00010101', МножественныйВыбор = Истина, АдресСпискаПодобранныхСотрудников = "", СтруктураОтбора = Неопределено) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(ВладелецФормыВыбора, Организация, Подразделение, ДатаПримененияОтбора, МножественныйВыбор, АдресСпискаПодобранныхСотрудников, ПараметрыОткрытия);
	
КонецПроцедуры

// Устарела см. процедуру КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка.
//
Процедура ВыбратьСотрудниковРаботающихВПериоде(ВладелецФормыВыбора, Организация = Неопределено, Подразделение = Неопределено, НачалоПериодаПримененияОтбора = '00010101', ОкончаниеПериодаПримененияОтбора = '00010101', МножественныйВыбор = Истина, АдресСпискаПодобранныхСотрудников = "", СтруктураОтбора = Неопределено) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(ВладелецФормыВыбора, Организация, Подразделение, НачалоПериодаПримененияОтбора, ОкончаниеПериодаПримененияОтбора, МножественныйВыбор, АдресСпискаПодобранныхСотрудников, ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередЗаписьюКадровогоДокументаВФорме(Форма, Объект, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено, ЗакрытьПослеЗаписи = Истина) Экспорт 
	
	Перем РезультатыПроверки;
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	
	ИспользуетсяШтатноеРасписание = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание");
	Если ИспользуетсяШтатноеРасписание
		И Форма.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДанныеОЗанятыхПозициях = Форма.ПолучитьДанныеОЗанятыхПозициях();
		Если НЕ Форма.ПроверкаПередЗаписьюНаСервере(РезультатыПроверки, ДанныеОЗанятыхПозициях) Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДанныеОЗанятыхПозициях", ДанныеОЗанятыхПозициях);
			ПараметрыФормы.Вставить("ПроверкаПередЗаписью", Истина);
			ПараметрыФормы.Вставить("ПроверяемыйРегистратор", Объект.Ссылка);
			ПараметрыФормы.Вставить("РезультатыПроверки", РезультатыПроверки);
			
			Оповещение = Новый ОписаниеОповещения("ПередЗаписьюКадровогоДокументаВФормеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("ОбщаяФорма.ПроверкаСоответствияШтатномуРасписанию", ПараметрыФормы, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			СтруктураПроверки = Новый Структура("ВыбранноеДействие", Истина);
			ПередЗаписьюКадровогоДокументаВФормеЗавершение(СтруктураПроверки, ДополнительныеПараметры);
			
		КонецЕсли;
		
	ИначеЕсли Не ИспользуетсяШтатноеРасписание 
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		
		ДанныеОЗанятыхПозициях = Форма.ПолучитьДанныеОЗанятыхПозициях();
		Если НЕ Форма.ПроверкаПередЗаписьюНаСервере(РезультатыПроверки, ДанныеОЗанятыхПозициях) Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДанныеОЗанятыхПозициях", ДанныеОЗанятыхПозициях);
			ПараметрыФормы.Вставить("ПроверкаПередЗаписью", Истина);
			ПараметрыФормы.Вставить("ПроверяемыйРегистратор", Объект.Ссылка);
			ПараметрыФормы.Вставить("РезультатыПроверки", РезультатыПроверки);
			ПараметрыФормы.Вставить("ПроверкаСоответствияГрейдам", Истина);
			
			Оповещение = Новый ОписаниеОповещения("ПередЗаписьюКадровогоДокументаВФормеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("ОбщаяФорма.ПроверкаСоответствияШтатномуРасписанию", ПараметрыФормы, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			СтруктураПроверки = Новый Структура("ВыбранноеДействие", Истина);
			ПередЗаписьюКадровогоДокументаВФормеЗавершение(СтруктураПроверки, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе 
		
		СтруктураПроверки = Новый Структура("ВыбранноеДействие", Истина);
		ПередЗаписьюКадровогоДокументаВФормеЗавершение(СтруктураПроверки, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюКадровогоДокументаВФормеЗавершение(СтруктураПроверки, ДополнительныеПараметры) Экспорт 

	Если СтруктураПроверки = Неопределено Или СтруктураПроверки.ВыбранноеДействие = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", ДополнительныеПараметры.ЗакрытьПослеЗаписи);
	
	Если Форма.Записать(ПараметрыЗаписи) Тогда
		Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ПараметрыЗаписи);
		ИначеЕсли ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда 
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьВФормеДокументаУвольнение(Форма, ПараметрыЗаписи, ЗакрытьПослеЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
	Если Форма.Записать(ПараметрыЗаписи) И ЗакрытьПослеЗаписи И Не Форма.ЖдатьЗакрытияФормыУведомления Тогда 
		Форма.Закрыть();
	ИначеЕсли ЗакрытьПослеЗаписи Тогда
		Форма.ЖдатьЗакрытияФормыУведомления = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаСоответствиеШтатномуРасписанию(Форма, Объект, ИсправленныйДокумент = Неопределено) Экспорт 
	
	ДанныеОЗанятыхПозициях = Форма.ПолучитьДанныеОЗанятыхПозициях();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеОЗанятыхПозициях", ДанныеОЗанятыхПозициях);
	ПараметрыФормы.Вставить("ПроверкаПередЗаписью", Ложь);
	ПараметрыФормы.Вставить("ПроверяемыйРегистратор", Объект.Ссылка);
	
	Если ИсправленныйДокумент <> Неопределено Тогда
		ПараметрыФормы.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСоответствиеШтатномуРасписаниюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ПроверкаСоответствияШтатномуРасписанию", ПараметрыФормы, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПроверитьНаСоответствиеШтатномуРасписаниюЗавершение(СтруктураПроверки, ДополнительныеПараметры) Экспорт 
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если СтруктураПроверки <> Неопределено И СтруктураПроверки.ВыбранноеДействие = "ОК" Тогда
		УправлениеШтатнымРасписаниемКлиент.ОбработатьРезультатыПроверки(Форма, СтруктураПроверки.АдресРезультатаПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(Форма, ПараметрыОткрытия) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
		
		Если ПараметрыОткрытия = Неопределено Тогда
			ПараметрыОткрытия = Новый Структура;
		КонецЕсли; 
		
		ПараметрыОткрытия.Вставить("УчитыватьОтборПоПодразделению", Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.ПоказатьОписаниеИзмененийСистемы И ПараметрыРаботыКлиента.ВосстановитьПрисоединенныеФайлы Тогда
		ОткрытьФорму("Обработка.ИсправлениеПроблемыСПрисоединеннымиФайлами.Форма.Форма");
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать КадровыйУчетРасширенныйКлиент.ОткрытьФормуРедактированияСтажей.
// Открывает форму редактирования стажей физического лица.
//
// Параметры:
//		Форма			- ФормаКлиентскогоПриложения
//		ФизическоеЛицо		- СправочникСсылка.ФизическиеЛица
//		ДатаСведений	- Дата
//		ВидыСтажа		- Массив ссылок на элементы справочника ВидыСтажа.
//		ДанныеСтажей	- Соответствие - Данные стажей сотрудника.
//   						* Ключ - Вид стажа;
//   						* Значение - Структура, сформированная методом ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже().
//		ЗаголовокФормы	- Строка, произвольный заголовок формы ввода стажей.
//
Процедура ОткрытьФормуРедактированияСтажейФизическогоЛица(Форма, ФизическоеЛицо, ДатаСведений, ВидыСтажа, ДанныеСтажей, ЗаголовокФормы = "") Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ПараметрыОткрытия.Вставить("ДатаСведений", ДатаСведений);
	ПараметрыОткрытия.Вставить("ВидыСтажа", ВидыСтажа);
	ПараметрыОткрытия.Вставить("ДанныеСтажей", ДанныеСтажей);
	ПараметрыОткрытия.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	
	ОткрытьФорму("ОбщаяФорма.ВводСтажаСотрудников", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
