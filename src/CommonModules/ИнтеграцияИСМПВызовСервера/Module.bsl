#Область ПрограммныйИнтерфейс

#Область ДлительныеОперации

// Подготавливает сообщения к передаче в сервис ИСМП.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.Организация - Организация
//   * Интервал - Структура - Структура со свойствами:
//     ** НачалоПериода - Дата - Дата начала периода.
//     ** КонецПериода - Дата - Дата окончания периода.
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ЗагрузитьВходящиеДокументы(ПараметрыЗагрузки, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбмена = ОбменДаннымиИСМП.ПараметрыОбмена(ПараметрыЗагрузки.Организация, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ОбщегоНазначенияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка входящих документов из ИС МП';
																|en = 'Загрузка входящих документов из ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ОбменДаннымиИСМП.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументыДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументыУниверсально(ПараметрыЗагрузки, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запуск в фоне заполнения настроек разрешительного режима - аналогично обработчику обновления, но при включении новой товарной группы, 
// если на момент обновления таковых не велось
// 
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы
// 
// Возвращаемое значение:
//  см. ДлительныеОперации.ВыполнитьВФоне.
Функция ЗапуститьЗаполнениеНастроекРазрешительногоРежима(УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Первичная настройка разрешительного режима';
															|en = 'Первичная настройка разрешительного режима'");
	
	ПараметрыФоновогоЗадания = Новый Структура;
	ПараметрыФоновогоЗадания.Вставить("ПараметрыЛогированияЗапросовИСМП", ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП);
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСПереопределяемый");
		МодульИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияИСМП.ВыполнитьОбновлениеНастроекДляРазрешительногоРежимаДлительнаяОперация",
		ПараметрыФоновогоЗадания, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиУчета

// Возвращает дату обязательной маркировки маркируемой продукци переданного вида.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Дата - дата обязательной маркировки маркируемой продукции.
//
Функция ДатаОбязательнойМаркировкиПродукции(ВидМаркируемойПродукции) Экспорт
	
	ДатаОбязательнойМаркировки = '00010101';
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаКонтрольПроизводства КАК ДатаКонтрольПроизводства
	|ИЗ
	|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
	|ГДЕ
	|	ВидПродукции = &ВидМаркируемойПродукции
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДатаОбязательнойМаркировки = Выборка.ДатаКонтрольПроизводства;
	КонецЕсли;
	
	Возврат ДатаОбязательнойМаркировки;

КонецФункции

// Возвращает виды продукции, по которым доступно заполнение документа ИСМП
//
// Параметры:
//   ПолноеИмяДокумента - Строка - создаваемый вводом на основании документ
//   Ссылка - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ по которому происходит обработка заполнения
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - различные виды продукции в документе ИСМП, заполненном 
//     по основанию без фильтра по виду продукции.
Функция ВидыПродукцииДанныхЗаполнения(ПолноеИмяДокумента, Ссылка) Экспорт
	
	ДоступныеВидыПродукции = Новый Массив;
	
	Если НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Для Каждого ВидПродукцииИСМП Из ВидыПродукцииИСМП Цикл
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукцииИСМП) Тогда
			ДоступныеВидыПродукции.Добавить(ВидПродукцииИСМП);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеВидыПродукции.Количество() < 2 Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
	Предзаполнение = Документы[ИмяДокумента].СоздатьДокумент();
	Если Предзаполнение.Метаданные().ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	Предзаполнение.Заполнить(Ссылка);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
		И ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта("GTIN", Предзаполнение.Метаданные(), "Товары")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Операция") = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
		Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура, GTIN");
		ПараметрыЗаполненияПоКодамОстатков = Новый Структура;
		ПараметрыЗаполненияПоКодамОстатков.Вставить("Организация", Предзаполнение.Организация);
	Иначе
		Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура");
		Товары.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ПараметрыЗаполненияПоКодамОстатков = Неопределено;
	КонецЕсли;
	
	Товары.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Возврат ИнтеграцияИСМП.ВидыПродукцииПоТаблицеНоменклатуры(Товары, ПараметрыЗаполненияПоКодамОстатков);
	
КонецФункции

// 
// Параметры:
// 	Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// Возвращаемое значение:
// 	СправочникСсылка.ВидыАлкогольнойПродукции
//
Функция ВидПродукцииПоНоменклатуре(Номенклатура) Экспорт
	Возврат ОбщегоНазначенияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок ИС МП.
//
//Параметры:
//	 ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//	 ВидОперации  - ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - Вид операции.
//	
// Возвращаемое значение:
//  Произвольный - Истина, в случае необходимости контроля статусов.
Функция КонтролироватьСтатусыКодовМаркировки(ВидПродукции = Неопределено, ВидОперации = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(ВидПродукции = Неопределено, ВидОперации = Неопределено);
	
КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок при розничной торговле.
//
//Параметры:
//	 ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//	 ВидОперации  - ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - Вид операции.
// Возвращаемое значение:
//  Булево - Истина, в случае необходимости контроля статусов в рознице.
Функция КонтролироватьСтатусыКодовМаркировкиВРознице(ВидПродукции = Неопределено, ВидОперации = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице(ВидПродукции = Неопределено, ВидОперации = Неопределено);
	
КонецФункции

// Возвращает список учитываемых товарных групп перемещения между МОД на конкретную дату.
// 
// Параметры:
//  НаДату - Дата - дата проверки
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС
Функция СписокУчитываемойПродукцииКонтроляПеремещенийМеждуМОД(НаДату = Неопределено) Экспорт
	
	Возврат РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.СписокУчитываемойПродукцииПоддерживающейПеремещениеМеждуМОД(НаДату);
	
КонецФункции

#КонецОбласти

// Функция - Документы ИСМП по документу основанию
//
// Параметры:
//  ДокументОснование - ДокументСсылка - основание по которому надо получить документы ИСМП
// 
// Возвращаемое значение:
//  см. ИнтеграцияИС.ДокументыИСПоДокументуОснованию
//
Функция ДокументыИСМППоДокументуОснованию(ДокументОснование) Экспорт
	
	ДокументыИСМП = ИнтеграцияИС.ДокументыИСПоДокументуОснованию(
		ДокументОснование,
		Метаданные.РегистрыСведений.СтатусыДокументовИСМП);
	
	Возврат ДокументыИСМП;
	
КонецФункции

// Возвращает имена документов ИСМП, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ-основание для документа ИСМП
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ИСМП
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	Возврат РасчетСтатусовОформленияИСМП.ИменаДокументовДляДокументаОснования(ДокументОснование);
	
КонецФункции

// см. РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению
Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению(Основания, Документ);
	
КонецФункции

Функция ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Знач ДокументОснование) Экспорт
	
	ТекстНадписи = "";
	
	// Получим структуру вида ИмяДокументаИСМП - Статус
	СтатусыОформления = РегистрыСведений.СтатусыОформленияДокументовИСМП.СтатусыДокументовИСМППоДокументуОснованию(ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(СтатусыОформления) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
	
	// Получим структуру вида ИмяДокументаИСМП - Массив(ДокументыИСМПДанногоВида)
	ДокументыИСМП = ДокументыИСМППоДокументуОснованию(ДокументОснование);
	
	ТекстыНадписиПоДокументам = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		МетаданныеДокумента = Метаданные.Документы[КлючИЗначение.Ключ];
		
		Если ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента).Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Получим структуру с ключами "Представление, МассивДокументов, СтатусОформления, МетаданныеДокумента"
			Описание = ИнтеграцияИСМП.ОписаниеОформленныхДокументов(МетаданныеДокумента, ДокументОснование, ДокументыИСМП, СтатусыОформления);
			
			Если Описание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекстыНадписиПоДокументам.Количество() > 0 Тогда
				ТекстыНадписиПоДокументам.Добавить(", ");
			КонецЕсли;
			
			ТекстыНадписиПоДокументам.Добавить(Описание.ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстыНадписиПоДокументам);
	Возврат ТекстНадписи;
	
КонецФункции

// Получает ТН ВЭД
//
// Параметры:
//  КодТНВЭД - Строка - Код по классификатору товарной номенклатуры внешнеэкономической деятельности
//
// Возвращаемое значение:
//   Произвольный - элемент классификатора (если он определен в конфигурации)
//
Функция КлассификаторТНВЭДПоКоду(КодТНВЭД) Экспорт
	
	ТНВЭД = Неопределено;
	
	ИнтеграцияИСМППереопределяемый.КлассификаторТНВЭД(КодТНВЭД, ТНВЭД);
	
	Возврат ТНВЭД;
	
КонецФункции

Функция ИнформацияСертификатовНоменклатуры(СписокНоменклатуры) Экспорт
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

Функция ТребуетсяПерейтиВПул(Знач ДокументОснование) Экспорт
	
	Возврат Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТребуетсяПерейтиВПул(ДокументОснование);
	
КонецФункции

Функция ОрганизацияЯвляетсяФермером(Организация) Экспорт
	
	КодОКОПФ = "";
	
	ИнтеграцияИСПереопределяемый.КодОКОПФОрганизации(КодОКОПФ, Организация);
	
	Возврат КодОКОПФ = "15300" Или КодОКОПФ = "50101" Или КодОКОПФ = "14100";
	
КонецФункции

Функция ЭлектронныйДокументПоОбъектуУчета(ОбъектыУчета) Экспорт
	
	Результат = Новый Соответствие();
	
	Если ТипЗнч(ОбъектыУчета) = Тип("Массив") Тогда
		Источник = ОбъектыУчета;
	Иначе
		Источник = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;
	
	Для Каждого ОбъектУчета Из Источник Цикл
		Если ЗначениеЗаполнено(ОбъектУчета) Тогда
			Результат.Вставить(
				ОбъектУчета,
				ОбменСКонтрагентами.СтатусДокументооборота(ОбъектУчета).ЭлектронныйДокумент);
		Иначе
			Результат.Вставить(
				ОбъектУчета,
				Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти