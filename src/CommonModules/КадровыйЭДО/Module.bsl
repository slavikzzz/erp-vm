#Область ПрограммныйИнтерфейс

// Дорабатывает форму нового документа, создает реквизиты наличия присоединенных файлов печатных форм.
// Вызывается из события ПриСозданииНаСервере формы объекта.
//
// Параметры:
//   УправляемаяФорма     - ФормаКлиентскогоПриложения - форма объекта.
//   Отказ                - Булево
//   СтандартнаяОбработка - Булево
//   ОбъектФормы          - ДанныеФормыСтруктура, основной объект формы
//
Процедура ПриСозданииНаСервереФормыОбъекта(УправляемаяФорма, Отказ, СтандартнаяОбработка, ОбъектФормы) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УправляемаяФорма.Параметры.Свойство("Ключ") Тогда
		Возврат;
	КонецЕсли;
	
	Если УправляемаяФорма.Параметры.Ключ.Пустая() Тогда
		ПроинициализироватьФормуОбъекта(УправляемаяФорма);
		КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, ОбъектФормы, Ложь);
	КонецЕсли;
	
	Структура = Новый Структура("РеквизитыИдентификаторов,ПараметрыПодключаемыхКоманд", Null, Null);
	ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
	Если ТипЗнч(Структура.ПараметрыПодключаемыхКоманд) = Тип("Структура")
		И Структура.РеквизитыИдентификаторов = Неопределено Тогда
		
		УправляемаяФорма.РеквизитыИдентификаторов =
			Новый ФиксированноеСоответствие(РеквизитыИдентификаторовПоПараметрам(Структура.ПараметрыПодключаемыхКоманд));
		
		ПриПомещенииДанныхВРеквизиты(УправляемаяФорма, ОбъектФормы.Ссылка, ОбъектФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Дорабатывает форму существующего документа, создает реквизиты наличия присоединенных файлов печатных форм.
// Вызывается из события ПриЧтенииНаСервере формы объекта.
//
// Параметры:
//   УправляемаяФорма     - ФормаКлиентскогоПриложения - форма объекта.
//   ТекущийОбъект        - ДокументОбъект - объект, который будет прочитан.
//   ОбъектФормы          - ДанныеФормыСтруктура, основной объект формы
//
Процедура ПриЧтенииНаСервереФормыОбъекта(УправляемаяФорма, ТекущийОбъект, ОбъектФормы) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	ПроинициализироватьФормуОбъекта(УправляемаяФорма);
	
КонецПроцедуры

// В форме документа обновляет сведения о наличии присоединенных файлов печатных форм.
// Вызывается из события ПослеЗаписиНаСервере формы объекта.
//
// Параметры:
//   УправляемаяФорма     - ФормаКлиентскогоПриложения - форма объекта.
//   ТекущийОбъект        - ДокументОбъект - объект.
//   ПараметрыЗаписи      - Структура
//   ОбъектФормы          - ДанныеФормыСтруктура, основной объект формы
//
Процедура ПослеЗаписиНаСервереФормыОбъекта(УправляемаяФорма, ТекущийОбъект, ПараметрыЗаписи, ОбъектФормы) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	ПриПомещенииДанныхВРеквизиты(УправляемаяФорма, ТекущийОбъект.Ссылка, ОбъектФормы);
	
КонецПроцедуры

// Дорабатывает запрос динамического списка документов, расширяя состав полей признаками
// наличия присоединенного файла печатной формы.
//
// Параметры:
//  УправляемаяФорма - УправляемаяФорма
//  Список           - ДинамическийСписок
//
Процедура ПриСозданииНаСервереФормыСписка(УправляемаяФорма, Список) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура("ПараметрыПодключаемыхКоманд", Null);
	ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
	ПараметрыПодключаемыхКоманд = Структура.ПараметрыПодключаемыхКоманд;
	Если ТипЗнч(ПараметрыПодключаемыхКоманд) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыИдентификаторов = РеквизитыИдентификаторовПоПараметрам(ПараметрыПодключаемыхКоманд,
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Выбор.ДоступныеПоляВыбора.Элементы);
	
	Если РеквизитыИдентификаторов.Количество() > 0 Тогда
		
		Схема = Новый СхемаЗапроса();
		Схема.РежимКомпоновкиДанных = Истина;
		Схема.УстановитьТекстЗапроса(Список.ТекстЗапроса);
		Пакет = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество() - 1];
		Оператор = Пакет.Операторы[0];
		Для Каждого ТипыИдентификатора Из РеквизитыИдентификаторов Цикл
			Если ТипЗнч(ТипыИдентификатора.Значение) = Тип("Строка")
				И СтрНайти(ТипыИдентификатора.Значение, ",") = 0 Тогда
				
				Оператор.ВыбираемыеПоля.Добавить("ЛОЖЬ");
				Пакет.Колонки[Оператор.ВыбираемыеПоля.Количество() - 1].Псевдоним = ТипыИдентификатора.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Список.ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
		
		Для Каждого ТипыИдентификатора Из РеквизитыИдентификаторов Цикл
			Список.УстановитьОбязательноеИспользование(ТипыИдентификатора.Значение, Истина);
		КонецЦикла;
		
		ОграниченияОтбора = Список.ПолучитьОграниченияИспользованияВОтборе();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияОтбора,
			ОбщегоНазначения.ВыгрузитьКолонку(РеквизитыИдентификаторов, "Значение"), Истина);
		Список.УстановитьОграниченияИспользованияВОтборе(ОграниченияОтбора);
		
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РеквизитыИдентификаторов", РеквизитыИдентификаторов);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет флаги существования присоединенных файлов печатных форм.
//
// Параметры:
//  ИмяЭлемента - Строка
//  Настройки   - НастройкиКомпоновкиДанных
//  Строки      - СтрокиДинамическогоСписка
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Настройки.ДополнительныеСвойства.Свойство("РеквизитыИдентификаторов") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыИдентификаторов = Настройки.ДополнительныеСвойства.РеквизитыИдентификаторов;
	
	КлючиСтрок = Строки.ПолучитьКлючи();
	
	УстановитьПривилегированныйРежим(Истина);
	ФайлыПечатныхФорм = ФайлыПечатныхФормПоОбъектам(КлючиСтрок);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ОписаниеФайлов Из ФайлыПечатныхФорм Цикл
		
		СтрокаСписка = Строки.Получить(ОписаниеФайлов.Ключ);
		Если СтрокаСписка <> Неопределено Тогда
			
			ЗначенияИдентификаторов = ИспользуемыеИдентификаторы(ОписаниеФайлов.Значение);
			Для Каждого ЗначениеИдентификатора Из ЗначенияИдентификаторов Цикл
				ИмяРеквизита = РеквизитыИдентификаторов.Получить(ЗначениеИдентификатора.Ключ);
				Если ИмяРеквизита <> Неопределено Тогда
					СтрокаСписка.Данные[ИмяРеквизита] = ЗначениеИдентификатора.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Задает детальную область печати в табличном документе, позволяя более глубоко детализировать
// выводимые бланки по одной ссылке на объект.
//
// Параметры:
//  ПараметрыПечати            - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ДокументРезультат          - ТабличныйДокумент
//  ИдентификаторПечатнойФормы - Строка
//  НомерСтрокиНачалаОбласти   - Число
//  ДанныеПечати               - Структура, СтрокаТаблицаЗначений, содержащая детальную информацию
//  ОбъектДокумента            - Ссылка на печатаемый объект
//
Процедура ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторПечатнойФормы, НомерСтрокиНачалаОбласти, ДанныеПечати, ОбъектДокумента) Экспорт
	
	Если ПараметрыПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДетализации = Неопределено;
	Если ПараметрыПечати.Свойство("РеквизитыДетализации") Тогда
		РеквизитыДетализации = ПараметрыПечати.РеквизитыДетализации;
	КонецЕсли;
	
	Если РеквизитыДетализации = Неопределено
		И ПараметрыПечати.Свойство("РеквизитыДетализацииПакета") Тогда
		
		РеквизитыДетализации = ПараметрыПечати.РеквизитыДетализацииПакета[ИдентификаторПечатнойФормы];
	КонецЕсли;
	
	Если РеквизитыДетализации <> Неопределено Тогда
		
		КлючОбласти = Новый Структура(РеквизитыДетализации);
		ЗаполнитьЗначенияСвойств(КлючОбласти, ДанныеПечати);
		
		Если ПараметрыПечати.Свойство("ИдентификаторыОбластейОбъектов") Тогда
			ИдентификаторыОбластей = ПараметрыПечати.ИдентификаторыОбластейОбъектов;
		Иначе
			ИдентификаторыОбластей = Новый Соответствие;
			ПараметрыПечати.Вставить("ИдентификаторыОбластейОбъектов", ИдентификаторыОбластей);
		КонецЕсли;
		
		ИдентификаторыОбластейДокумента = ИдентификаторыОбластей.Получить(ОбъектДокумента);
		Если ИдентификаторыОбластейДокумента = Неопределено Тогда
			ИдентификаторыОбластейДокумента = Новый СписокЗначений;
			ИдентификаторыОбластей.Вставить(ОбъектДокумента, ИдентификаторыОбластейДокумента);
		КонецЕсли;
		
		ИдентификаторОбласти = "Область_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		
		НомерСтрокиОкончаниеОбласти = ДокументРезультат.ВысотаТаблицы;
		ДокументРезультат.Область(НомерСтрокиНачалаОбласти, , НомерСтрокиОкончаниеОбласти, ).Имя = ИдентификаторОбласти;
		КлючОбласти.Вставить("НомерСтрокиНачалаОбласти", НомерСтрокиНачалаОбласти);
		КлючОбласти.Вставить("НомерСтрокиОкончаниеОбласти", НомерСтрокиОкончаниеОбласти);
		
		ИдентификаторыОбластейДокумента.Добавить(КлючОбласти, ИдентификаторОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание файлов печатных форм объектов.
//
// Параметры:
//  Владельцы                  - Массив, ссылок на объекты с присоединенными файлами
//  ИдентификаторыПечатныхФорм - Массив, идентификаторов печатных форм
//                             - Строка, идентификаторы печатных форм, разделенные запятыми
//
// Возвращаемое значение:
//  Структура - с ключами:
//   * ПечатныеФормыОбъектов - Соответствие
//     * Ключ     - Ссылка на владельца
//     * Значение - Структура
//        * Ключ     - Идентификатор печатной формы
//        * Значение - Массив, ссылок на присоединенные файлы
//   * ОригиналыПечатныхФорм - Структура
//      * Ключ     - Идентификатор печатной формы
//      * Значение - Структура, с Ключами
//         * Наименование - Наименование печатной формы
//         * Оригиналы    - Соответствие
//            * Ключ     - Ссылка, на присоединенный файл печатной формы
//            * Значение - Структура с ключами, описывающими печатную форму
//
Функция ОписанияФайловПечатныхФормПоОбъектам(Владельцы, ИдентификаторыПечатныхФорм) Экспорт
	
	ОписанияФайлов = ОписанияФайловПечатныхФорм();
	ЗаполнитьОписанияФайловПечатныхФормПоОбъектам(ОписанияФайлов, Владельцы, ИдентификаторыПечатныхФорм);
	
	Возврат ОписанияФайлов;
	
КонецФункции

// Разблокирует объект с приложенными файлами печатных форм, помечая файлы печатных форм на удаление.
//
// Параметры:
//  ОбъектДляРазблокировки - ОпределяемыйТип.ОбъектСПечатнымиФормами
//
// Возвращаемое значение:
//  Строка - Пустая если все в порядке или полное описание возникшей ошибки.
//
Функция РазблокироватьОбъектДляИзменений(ОбъектДляРазблокировки) Экспорт
	
	Результат = "";
	Попытка
		УдалитьПечатныеФормыОбъекта(ОбъектДляРазблокировки);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		Результат = ПодробноеПредставлениеОшибки(Ошибка);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Вызывает процедуры печати в менеджерах объектов после переопределения массива ссылок, выводимых на печать.
//
// Параметры:
//  МенеджерПечати        - модуль менеджера или общий модуль, содержащий процедуру Печать
//  МассивОбъектов        - Массив, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ПараметрыПечати       - Структура, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  КоллекцияПечатныхФорм - ТаблицаЗначений, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ОбъектыПечати         - СписокЗначений, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ПараметрыВывода       - Структура, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  СписокСотрудников     - Массив, ссылок на элементы справочника Сотрудники, когда производится
//                          печать по одному сотруднику списочного документа
//
Процедура ПечатьСтороннейПечатнойФормы(МенеджерПечати, МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	Для Каждого СтрокаПечатнойФормы Из КоллекцияПечатныхФорм Цикл
		
		Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(СтрокаПечатнойФормы.ИмяМакета) Тогда
			МассивОбъектовНаПечать = МассивОбъектов;
			Прервать;
		КонецЕсли;
		
		МассивОбъектовНаПечать = ОбщегоНазначения.СкопироватьРекурсивно(МассивОбъектов);
		ПриОпределенииОбъектовПечатнойФормы(МассивОбъектовНаПечать, СтрокаПечатнойФормы.ИмяМакета,
			Метаданные.НайтиПоТипу(ТипЗнч(МенеджерПечати)).ПолноеИмя(), ПараметрыПечати, СписокСотрудников);
		
		Если ЗначениеЗаполнено(СписокСотрудников) Тогда
			МассивОбъектовНаПечать = МассивОбъектов;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОбъектовНаПечать = Неопределено Тогда
		МассивОбъектовНаПечать = Новый Массив;
	Иначе
		
		Если СписокСотрудников = Неопределено Тогда
			МенеджерПечати.Печать(МассивОбъектовНаПечать, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		Иначе
			МенеджерПечати.Печать(МассивОбъектовНаПечать, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников);
		КонецЕсли;
		
	КонецЕсли;
	
	ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Добавляет в команды печати объектов условия, позволяющие отличить их
// в общей массе команд печати.
//
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  ИмяОбъекта    - Строка, полное имя объекта метаданных, для которого необходимо
//                  получить список команд печати.
//
Процедура ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта) Экспорт
	
	Если Не (ИспользуютсяЭлектронныеДокументы()
		И ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта)) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипа = СтрЗаменить(ИмяОбъекта, ".", "Ссылка.");
	Если Не ЭтоТипОбъектаСПечатнымиФормами(Тип(ИмяТипа)) Тогда
		Возврат;
	КонецЕсли;
	
	КомандыДляРасширения = Новый Массив;
	КомандыПечатиПакетаДокументов = Новый Массив;
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		
		Если КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати"
			Или КомандаПечати.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" Тогда
			
			Если КомандаПечати.Картинка = БиблиотекаКартинок.СторонняяПечатнаяФорма Тогда
				Продолжить;
			КонецЕсли;
			
			Если КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьПакетаДокументов Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторКоманды = КомандаПечати.Идентификатор;
			Если ТипЗнч(ИдентификаторКоманды) = Тип("Массив") Тогда
				
				Если ИдентификаторКоманды.Количество() > 1 Тогда
					КомандыПечатиПакетаДокументов.Добавить(КомандаПечати);
					Продолжить;
				Иначе
					ИдентификаторКоманды = ИдентификаторКоманды[0];
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрРазделить(ИдентификаторКоманды, ",").Количество() > 1 Тогда
				КомандыПечатиПакетаДокументов.Добавить(КомандаПечати);
				Продолжить;
			КонецЕсли;
			
			Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИдентификаторКоманды) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Идентификатор", КомандаПечати.Идентификатор);
			СтруктураПоиска.Вставить("Обработчик", ОбработчикОткрытияПодписанныхФайлов());
			
			Если КомандыПечати.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				КомандыДляРасширения.Добавить(КомандаПечати);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КомандаДляРасширения Из КомандыДляРасширения Цикл
		
		Если ТипЗнч(КомандаДляРасширения.Идентификатор) = Тип("Массив") Тогда
			ИдентификаторКоманды = КомандаДляРасширения.Идентификатор[0];
		Иначе
			ИдентификаторКоманды = КомандаДляРасширения.Идентификатор;
		КонецЕсли;
		
		СловаИдентификатораКоманды = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИдентификаторКоманды);
		ИдентификаторПечатнойФормы = "БЗК_ПечатнаяФорма_" + СтрСоединить(СловаИдентификатораКоманды);
		
		КомандаПечати = КомандыПечати.Добавить();
		ЗаполнитьЗначенияСвойств(КомандаПечати, КомандаДляРасширения);
		
		КомандаПечати.УсловияВидимости = ОбщегоНазначения.СкопироватьРекурсивно(КомандаДляРасширения.УсловияВидимости);
		КомандаПечати.ТипыОбъектовПечати = ОбщегоНазначения.СкопироватьРекурсивно(КомандаДляРасширения.ТипыОбъектовПечати);
		КомандаПечати.Обработчик = ОбработчикОткрытияПодписанныхФайлов();
		КомандаПечати.Картинка = БиблиотекаКартинок.PDFПодписанныйЭЦП;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КомандаДляРасширения, "УсловияВидимостиПоТипамОбъектов") Тогда
			КомандаПечати.УсловияВидимостиПоТипамОбъектов = ОбщегоНазначения.СкопироватьРекурсивно(КомандаДляРасширения.УсловияВидимостиПоТипамОбъектов);
		КонецЕсли;
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, ИдентификаторПечатнойФормы, Истина);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаДляРасширения, ИдентификаторПечатнойФормы, Ложь);
		
	КонецЦикла;
	
	Если КомандыПечатиПакетаДокументов.Количество() > 0 Тогда
		
		Для Каждого Команда Из КомандыПечатиПакетаДокументов Цикл
			УстановитьПараметрыКомандПечатиКомплектаДокументов(Команда, КомандыПечати);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовПечатнойФормы.
Процедура ПриОпределенииОбъектовПечатнойФормы(ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ИмяМенеджераПечати, ПараметрыПечати, СписокСотрудников = Неопределено) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИдентификаторПечатнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияФайлов = КадровыйЭДОКлиентСервер.ОписанияФайловПечатныхФормИзПараметровПечати(ПараметрыПечати);
	Если ОписанияФайлов = Неопределено Тогда
		ОписанияФайлов = ОписанияФайловПечатныхФорм();
		КадровыйЭДОКлиентСервер.ДобавитьВПараметрыПечатиОписанияФайловПечатныхФорм(ПараметрыПечати, ОписанияФайлов);
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ОбработанныеИдентификаторыПечатныхФорм") Тогда
		ОбработанныеИдентификаторы = ПараметрыПечати.ОбработанныеИдентификаторыПечатныхФорм;
	Иначе
		ОбработанныеИдентификаторы = Новый Соответствие;
		ПараметрыПечати.Вставить("ОбработанныеИдентификаторыПечатныхФорм", ОбработанныеИдентификаторы);
	КонецЕсли;
	
	Если ОбработанныеИдентификаторы.Получить(ИдентификаторПечатнойФормы) <> Неопределено Тогда
		ОбъектыПечатнойФормы = Неопределено;
		Возврат;
	КонецЕсли;
	
	МассивОбъектовНаПечать = ОбъектыНаПечатьПоИдентификаторуПечатнойФормы(
		ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ОписанияФайлов, СписокСотрудников);
	
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ОбъектыПечатнойФормы, МассивОбъектовНаПечать) Тогда
		ОбработанныеИдентификаторы.Вставить(ИдентификаторПечатнойФормы, МассивОбъектовНаПечать);
	КонецЕсли;
	
	Если МассивОбъектовНаПечать.Количество() = 0 Тогда
		ОбъектыПечатнойФормы = Неопределено;
	Иначе
		ОбъектыПечатнойФормы = МассивОбъектовНаПечать;
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПечати.
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат
	КонецЕсли;
	
	Если Не ПараметрыПечати.Свойство("ОбработанныеИдентификаторыПечатныхФорм") Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияФайлов = КадровыйЭДОКлиентСервер.ОписанияФайловПечатныхФормИзПараметровПечати(ПараметрыПечати);
	Если ОписанияФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСертификаты(ПараметрыПечати);
	
	Для Каждого СтрокаКоллекции Из КоллекцияПечатныхФорм Цикл
		
		ИдентификаторПечатнойФормы = КадровыйЭДОКлиентСервер.ТолькоИдентификаторПечатнойФормы(СтрокаКоллекции.ИмяМакета);
		
		Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИдентификаторПечатнойФормы) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОбъектовНаПечать = ПараметрыПечати.ОбработанныеИдентификаторыПечатныхФорм.Получить(ИдентификаторПечатнойФормы);
		Если МассивОбъектовНаПечать = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.КоллекцииИдентичны(МассивОбъектов, МассивОбъектовНаПечать) Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Для Каждого ОбъектНаПечать Из МассивОбъектов Цикл
			
			Если МассивОбъектовНаПечать.Найти(ОбъектНаПечать) = Неопределено Тогда
				
				НачалоПечатнойФормы = ТабличныйДокумент.ВысотаТаблицы + 1;
				
				ФайлыОбъекта = ОписанияФайлов.ПечатныеФормыОбъектов.Получить(ОбъектНаПечать);
				Если ФайлыОбъекта <> Неопределено Тогда
					ФайлыИдентификатора = ФайлыОбъекта.Получить(ИдентификаторПечатнойФормы);
					Если ФайлыИдентификатора <> Неопределено Тогда
						
						ОригиналыИдентификатора = ОписанияФайлов.ОригиналыПечатныхФорм.Получить(ИдентификаторПечатнойФормы);
						Если ОригиналыИдентификатора <> Неопределено Тогда
							
							Для Каждого ФайлПечатнойФормы Из ФайлыИдентификатора Цикл
								
								НачалоБланка = ТабличныйДокумент.ВысотаТаблицы + 1;
								
								ОписаниеФайла = ОригиналыИдентификатора.Оригиналы.Получить(ФайлПечатнойФормы);
								
								ПечатнаяФорма = ПечатнаяФормаСоШтампами(ФайлПечатнойФормы, ОписаниеФайла.ПечатнаяФорма, Истина, Истина);
								ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ТабличныйДокумент, ПечатнаяФорма);
								
								ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ТабличныйДокумент, ИдентификаторПечатнойФормы,
									НачалоБланка, ОписаниеФайла, ОбъектНаПечать);
								
								ТабличныйДокумент.Защита = Истина;
								
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ТабличныйДокумент.ВысотаТаблицы > НачалоПечатнойФормы Тогда
					УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НачалоПечатнойФормы, ОбъектыПечати, ОбъектНаПечать);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаКоллекции.ТабличныйДокумент <> Неопределено Тогда
				
				ДанныеОбласти = ОбъектыПечати.НайтиПоЗначению(ОбъектНаПечать);
				Если ДанныеОбласти <> Неопределено
					И СтрокаКоллекции.ТабличныйДокумент.Области.Найти(ДанныеОбласти.Представление) <> Неопределено Тогда
					
					ПечатнаяФорма = СтрокаКоллекции.ТабличныйДокумент.ПолучитьОбласть(ДанныеОбласти.Представление);
					ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ТабличныйДокумент, ПечатнаяФорма);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			СтрокаКоллекции.ТабличныйДокумент = ТабличныйДокумент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы()
		Или Не ПравоДоступа("Добавление", Метаданные.Документы.ДокументКадровогоЭДО) Тогда
		
		Возврат;
	КонецЕсли;
	
	ИменаМакетов = "";
	Если ТипЗнч(Форма.Параметры.ИменаМакетов) = Тип("Строка")
		И Не ПустаяСтрока(Форма.Параметры.ИменаМакетов) Тогда
		
		ИменаМакетов = СтрРазделить(Форма.Параметры.ИменаМакетов, ",");
	ИначеЕсли ЗначениеЗаполнено(Форма.Параметры.ИменаМакетов) Тогда
		ИменаМакетов = Форма.Параметры.ИменаМакетов;
	ИначеЕсли ЗначениеЗаполнено(Форма.Параметры.ПараметрыИсточника) Тогда
		ИменаМакетов = СтрРазделить(Форма.Параметры.ПараметрыИсточника.ИдентификаторКоманды, ",");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаМакетов) Тогда
		
		Для Каждого ИмяМакета Из ИменаМакетов Цикл
			Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИмяМакета) Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Свойство("ИсключитьПередачуВКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ПодписаниеПечатныхФорм")
		Или ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(Форма.Параметры.ИмяМенеджераПечати)
		Или ТипЗнч(Форма.Параметры.ИсточникДанных) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		
		Если Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм")
			И Не Форма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Свойство("СторонняяПечатнаяФорма")
			И Не ЭтоОбъектСПечатнымиФормами(Форма.Параметры.ПараметрКоманды[0]) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
			
			ТребуетсяПечатнаяФормаБезПодписи = Не ЗаявкиСотрудников.ТребуетсяПечатнаяФормаСПодписью(Форма.Параметры.ПараметрКоманды);
				
			ДоступныеКоманды = ДоступныеКомандыФормыПечатьДокументов(Форма);
			
			ТолькоПодписание = Форма.Параметры.Свойство("ПодписаниеПечатныхФорм")
				Или ДоступныеКоманды.Подписать;
			
			Если ДоступныеКоманды.Ознакомиться Тогда
				ПечатьДокументовПриСозданииНаСервереВывестиКомандуОзнакомлено(Форма);
			ИначеЕсли ТолькоПодписание Тогда
				ПечатьДокументовПриСозданииНаСервереВывестиКомандуПодписать(Форма);
				Если Не ЗаявкиСотрудников.ВладелецЗаявкаСотрудника(Форма.Параметры.ПараметрКоманды) Тогда
					ПечатьДокументовПриСозданииНаСервереВывестиКомандуОтказать(Форма);
				КонецЕсли;
			Иначе
				
				Если Не ТребуетсяПечатнаяФормаБезПодписи Тогда
					
					// Отправить подписанные файлы
					КнопкаСохранить = Форма.Элементы.Найти("КнопкаСохранить");
					Если КнопкаСохранить <> Неопределено Тогда
						КнопкаСохранить.Видимость = Ложь;
					КонецЕсли;
					
					КомандаФормы = Форма.Команды.Добавить("НастроитьИПодписать");
					КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
					КомандаФормы.Заголовок = НСтр("ru = 'Настроить и подписать';
													|en = 'Set up and sign'");
					КомандаФормы.Подсказка = НСтр("ru = 'Настроить и подписать документы';
													|en = 'Set up and sign documents'");
					КомандаФормы.Картинка = БиблиотекаКартинок.НастроитьИПодписатьЦП;
					
					ГруппаФормы = Форма.Элементы.Вставить(КомандаФормы.Имя + "Группа", Тип("ГруппаФормы"),
						Форма.Элементы.КоманднаяПанельЕще, Форма.Элементы.ГруппаСохранитьОтправитьВсеДействия);
					ГруппаФормы.Вид = ВидГруппыФормы.ГруппаКнопок;
					
					КнопкаФормы = Форма.Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"), ГруппаФормы);
					
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.ТолькоВоВсехДействиях = Истина;
					
					КомандаФормы = Форма.Команды.Добавить("СохранитьВPDFИПодписатьФайл");
					КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
					КомандаФормы.Заголовок = НСтр("ru = 'Подписать PDF файл';
													|en = 'Sign PDF file'");
					КомандаФормы.Подсказка = НСтр("ru = 'Подписать и сохранить на диске';
													|en = 'Sign and save on hard drive'");
					КомандаФормы.Картинка = БиблиотекаКартинок.СохранитьИПодписать;
					
					КнопкаФормы = Форма.Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"),
						Форма.Элементы.ГруппаСохранитьОтправить);
					
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
					
					// Отправить подписанные файлы
					Если РаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
						
						КнопкаОтправить = Форма.Элементы.Найти("КнопкаОтправить");
						Если КнопкаОтправить <> Неопределено Тогда
							КнопкаОтправить.Видимость = Ложь;
						КонецЕсли;
						
						КомандаФормы = Форма.Команды.Добавить("ОтправитьПодписанныеPDF");
						КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
						КомандаФормы.Заголовок = НСтр("ru = 'Отправить подписанные PDF файлы';
														|en = 'Send signed PDF files'");
						КомандаФормы.Подсказка = НСтр("ru = 'Подписать и отправить на электронную почту';
														|en = 'Sign and email'");
						КомандаФормы.Картинка = БиблиотекаКартинок.ПодписатьИОтправитьЭлектронноеПисьмо;
						
						КнопкаФормы = Форма.Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"),
							Форма.Элементы.ГруппаСохранитьОтправить);
						
						КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
						КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
						КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиИнформациюОДоступностиРедактированияПечатнойФормы(Форма);
			
			Если Не ДоступныеКоманды.Ознакомиться И Не ТолькоПодписание Тогда
				ВывестиКомандыПередачиПечатныхФормВоВнешниеПриложения(Форма, Отказ, СтандартнаяОбработка);
			КонецЕсли;
			
			Если ТребуетсяПечатнаяФормаБезПодписи Тогда
				
				КомандаФормы = ИнтеграцияСРаботаВРоссии.КомандаПодписатьФормыПечатьДокументов(Форма);
				Если КомандаФормы = Неопределено Тогда
					КомандаФормы = ИнтеграцияКабинетСотрудника.КомандаПодписатьФормыПечатьДокументов(Форма);
				КонецЕсли;
				Если КомандаФормы <> Неопределено Тогда
					КомандаФормы.Заголовок = КомандаФормы.Заголовок + НСтр("ru = ' (без цифровой подписи)';
																			|en = ' (without digital signature)'");
					КомандаФормы.Подсказка = КомандаФормы.Подсказка + НСтр("ru = ' (без цифровой подписи)';
																			|en = ' (without digital signature)'");
				КонецЕсли;
				
				Форма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Вставить("ТребуетсяПечатнаяФормаБезПодписи",
					ТребуетсяПечатнаяФормаБезПодписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиКомандыПередачиПечатныхФормВоВнешниеПриложения(Форма, Отказ, СтандартнаяОбработка)
	
	ИнтеграцияСРаботаВРоссии.ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	Если Не ИнтеграцияСРаботаВРоссии.ДоступнаПередачаДокументовНаРаботаВРоссии() Тогда
		ИнтеграцияКабинетСотрудника.ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		КомандаФормы = ИнтеграцияСРаботаВРоссии.КомандаПодписатьФормыПечатьДокументов(Форма);
		Если КомандаФормы <> Неопределено Тогда
			
			Если СтрНайти(КомандаФормы.Заголовок, НСтр("ru = '1С:Кабинет сотрудника';
														|en = '1C:Employee Account'")) = 0 Тогда
				СвойстваКоманды = СвойстваКомандыПередачиНаПорталРаботаВРоссииИВКабинетСотрудника();
				КомандаФормы.Заголовок = СвойстваКоманды.Заголовок;
				КомандаФормы.Подсказка = СвойстваКоманды.Подсказка;
				КомандаФормы.Отображение = ОтображениеКнопки.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваКомандыПередачиНаПорталРаботаВРоссииИВКабинетСотрудника() Экспорт
	Возврат Новый Структура("Заголовок,Подсказка,Картинка",
		НСтр("ru = 'Передать на ""Работа в России"" и ""1С:Кабинет сотрудника""';
			|en = 'Pass to Work in Russia and 1C:Employee Account'"),
		НСтр("ru = 'Подписать и передать на порталы ""Работа в России"" и ""1С:Кабинет сотрудника""';
			|en = 'Sign and pass to Work in Russia and 1C:Employee Account portals'"),
		БиблиотекаКартинок.СервисКабинетСотрудника);
КонецФункции

Функция ФайлыПечатныхФормПоОбъектам(Владельцы, ИдентификаторыПечатныхФорм = Неопределено, ТолькоПечатныеФормыОбъектов = Ложь, ВТомЧислеПомеченныеНаУдаление = Ложь) Экспорт
	
	ИдентификаторыФайлов = Новый Соответствие;
	
	Выборка = ВыборкаДанныхПечатныхФорм(Владельцы, ИдентификаторыПечатныхФорм, ТолькоПечатныеФормыОбъектов, , ВТомЧислеПомеченныеНаУдаление);
	Пока Выборка.СледующийПоЗначениюПоля("Владелец") Цикл
		
		ИдентификаторыФайловСЭЦП = Новый Соответствие;
		ИдентификаторыФайлов.Вставить(Выборка.Владелец, ИдентификаторыФайловСЭЦП);
		
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторПечатнойФормы") Цикл
			
			СписокФайлов = Новый Массив;
			ИдентификаторыФайловСЭЦП.Вставить(Выборка.ИдентификаторПечатнойФормы, СписокФайлов);
			
			Пока Выборка.Следующий() Цикл
				
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Файл", Выборка.ФайлОбъекта);
				ОписаниеФайла.Вставить("Название", Выборка.Название);
				ОписаниеФайла.Вставить("Сотрудник", Выборка.Сотрудник);
				ОписаниеФайла.Вставить("ФизическоеЛицо", Выборка.ФизическоеЛицо);
				
				СписокФайлов.Добавить(Выборка.ФайлОбъекта);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИдентификаторыФайлов;
	
КонецФункции

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "06a2a25e-dc98-4d4a-a592-83ceaa9972e2", Метаданные.Документы.ДокументКадровогоЭДО);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "181ac4df-79cb-4557-a32b-94124b0e24e0", Метаданные.Документы.СогласиеНаПрисоединениеККЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ДокументКадровогоЭДО, Истина);
	Списки.Вставить(Метаданные.Справочники.ДокументКадровогоЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СогласиеНаПрисоединениеККЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ФизическиеЛицаПрисоединенныеККЭДО, Истина);
	Списки.Вставить(Метаданные.Справочники.СогласиеНаПрисоединениеККЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПодписиДокументовКЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияДокументовКЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РезультатыПубликацииДокументовКЭДО, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Изменение.Организации
		
		|Документ.ДокументКадровогоЭДО.Чтение.ГруппыФизическихЛиц
		|Документ.ДокументКадровогоЭДО.Чтение.Организации
		|Документ.ДокументКадровогоЭДО.Изменение.ГруппыФизическихЛиц
		|Документ.ДокументКадровогоЭДО.Изменение.Организации
		
		|Документ.СогласиеНаПрисоединениеККЭДО.Чтение.ГруппыФизическихЛиц
		|Документ.СогласиеНаПрисоединениеККЭДО.Чтение.Организации
		|Документ.СогласиеНаПрисоединениеККЭДО.Изменение.ГруппыФизическихЛиц
		|Документ.СогласиеНаПрисоединениеККЭДО.Изменение.Организации
		
		|Справочник.СогласиеНаПрисоединениеККЭДОПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СогласиеНаПрисоединениеККЭДОПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СогласиеНаПрисоединениеККЭДОПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СогласиеНаПрисоединениеККЭДОПрисоединенныеФайлы.Изменение.Организации
		
		|РегистрСведений.ФизическиеЛицаПрисоединенныеККЭДО.Чтение.ГруппыФизическихЛиц
		
		|РегистрСведений.ПодписиДокументовКЭДО.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ПодписиДокументовКЭДО.Чтение.Организации
		|РегистрСведений.ПодписиДокументовКЭДО.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ПодписиДокументовКЭДО.Изменение.Организации
		
		|РегистрСведений.РезультатыПубликацииДокументовКЭДО.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.РезультатыПубликацииДокументовКЭДО.Чтение.Организации
		
		|РегистрСведений.СостоянияДокументовКЭДО.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СостоянияДокументовКЭДО.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область БлокировкаИзмененияОбъектов

Функция ДобавитьБлокировкуИзмененияОбъекта(КоллекцияБлокировок, СсылкаНаОбъект) Экспорт
	
	ИдентификаторыПечатныхФорм = ИдентификаторыПечатныхФормОбъекта(СсылкаНаОбъект);
	Если ЗначениеЗаполнено(ИдентификаторыПечатныхФорм) Тогда
		
		БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта(
			"УправлениеПечатьюБЗК",
			НСтр("ru = 'К объекту приложены подписанные ЭЦП (электронной цифровой подписью) печатные формы.
				|При снятии блокировки объекта, подписанные печатные формы необходимо подписать заново, прежние версии печатных форм будут удалены.';
				|en = 'The digitally signed print forms are attached to the object. 
				|When the object is unlocked, re-sign the signed print forms, the previous versions of the print forms will be deleted.'"),
			Истина);
		БлокировкаИзмененияОбъекта.УстановитьБлокировку = ОбъектЗаблокированПоИдентификаторамПечатныхФорм(СсылкаНаОбъект, ИдентификаторыПечатныхФорм);
		
		КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
		
	КонецЕсли;
	
КонецФункции

Процедура ЗапретитьИзменениеДокументаПоФизическомуЛицу(Источник) Экспорт
	
	Если Не Источник.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	БлокироватьОбъект = ОбъектЗаблокирован(Источник.Ссылка, Источник.ПометкаУдаления);
	Если БлокироватьОбъект Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'К документу %1 приложены подписанные файлы печатных форм, необходимо удалить файлы перед записью документа.';
				|en = 'Signed files of print forms are attached to the %1 document, delete the files before writing the document.'"),
			Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Обработчики.Добавить(КадровыйЭДО);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.ДокументКадровогоЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Раздел = НСтр("ru = 'Кадровый ЭДО';
					|en = 'HR EDI'");
	
	КоличествоЗависшихЗаданий = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.КоличествоЗависшихЗаданийОбработки(Истина);
	Если ЗначениеЗаполнено(КоличествоЗависшихЗаданий) Тогда
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗависшиеЗадания_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		Дело.Количество     = КоличествоЗависшихЗаданий;
		Дело.ЕстьДела       = (Дело.Количество > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Просрочено!';
									|en = 'Overdue!'");
		
		Дело.Подсказка      =
			НСтр("ru = 'Задания с большими сроками ожидания выполнения, необходимо отменить или форсировать выполнение.';
				|en = 'Lengthy jobs need to be canceled or accelerated.'");
		
		Дело.ПараметрыФормы = Новый Структура;
		Дело.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Дело.Форма          = "Отчет.ПросроченныеДействияСПечатнымиФормами.Форма";
		
	КонецЕсли;
	
	ПрисоединенныеФайлы = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыНаПодписьПользователя(Истина, , Истина);
	
	ПечатныеФормы = ПрисоединенныеФайлы.Скопировать(
		Новый Структура("Действие,ПечатнаяФорма", Перечисления.ДействияСФайламиДокументовКЭДО.Подписать, Истина));
	Если ПечатныеФормы.Количество() > 0 Тогда
		
		КоличествоПросроченных = ПечатныеФормы.НайтиСтроки(Новый Структура("Просрочено", Истина)).Количество();
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "НаправленыНаПодпись_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		Дело.Количество     = ПечатныеФормы.Количество();
		Дело.ЕстьДела       = (Дело.Количество > 0);
		Дело.Важное         = КоличествоПросроченных > 0;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Подписать';
									|en = 'Sign'");
		
		Дело.Подсказка      =
			НСтр("ru = 'Перед дальнейшей обработкой печатные формы ожидают подписания ЭЦП (электронной цифровой подписью).';
				|en = 'Before further processing print forms are awaiting to be signed with an electronic signature.'");
		
		Дело.ПараметрыФормы = КадровыйЭДОВызовСервера.ПараметрыОткрытияФормыПодписанияПечатныхФорм(ПечатныеФормы);
		Дело.Форма          = "ОбщаяФорма.ПечатьДокументов";
		
	КонецЕсли;
	
	ПечатныеФормы = ПрисоединенныеФайлы.Скопировать(
		Новый Структура("Действие,ПечатнаяФорма", Перечисления.ДействияСФайламиДокументовКЭДО.Ознакомиться, Истина));
	Если ПечатныеФормы.Количество() > 0 Тогда
		
		КоличествоПросроченных = ПечатныеФормы.НайтиСтроки(Новый Структура("Просрочено", Истина)).Количество();
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "Ознакомиться_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		Дело.Количество     = ПечатныеФормы.Количество();
		Дело.ЕстьДела       = (Дело.Количество > 0);
		Дело.Важное         = КоличествоПросроченных > 0;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Ознакомиться';
									|en = 'Read'");
		
		Дело.Подсказка      =
			НСтр("ru = 'Печатные формы ожидают ознакомления с комментариями ответственных лиц.';
				|en = 'The print forms are pending the review of responsible persons'' comments.'");
		
		Дело.ПараметрыФормы = КадровыйЭДОВызовСервера.ПараметрыОткрытияФормыПодписанияПечатныхФорм(ПечатныеФормы);
		Дело.Форма          = "ОбщаяФорма.ПечатьДокументов";
		
	КонецЕсли;
	
	ФайлыНаПодпись = ПрисоединенныеФайлы.Скопировать(
		Новый Структура("Действие,ПечатнаяФорма", Перечисления.ДействияСФайламиДокументовКЭДО.Подписать, Ложь));
	Если ФайлыНаПодпись.Количество() > 0 Тогда
		
		КоличествоПросроченных = ФайлыНаПодпись.НайтиСтроки(Новый Структура("Просрочено", Истина)).Количество();
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "НаправленыНаПодпись_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		Дело.Количество     = ФайлыНаПодпись.Количество();
		Дело.ЕстьДела       = (Дело.Количество > 0);
		Дело.Важное         = КоличествоПросроченных > 0;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Подписать файлы';
									|en = 'Sign files'");
		
		Дело.Подсказка      =
			НСтр("ru = 'Перед дальнейшей обработкой файлы ожидают подписания ЭЦП (электронной цифровой подписью).';
				|en = 'Digitally sign the files before further processing.'");
		
		Дело.ПараметрыФормы = Новый Структура("ДокументыНаПодпись", Истина);
		Дело.Форма          = "Документ.ДокументКадровогоЭДО.ФормаСписка";
		
	КонецЕсли;
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		УведомитьОНеобходимостиПодписанияФайловДокументовКЭДО(
			ПрисоединенныеФайлы.Количество(),
			ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("Действие", Перечисления.ДействияСФайламиДокументовКЭДО.Подписать)).Количество(),
			ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("Действие", Перечисления.ДействияСФайламиДокументовКЭДО.Ознакомиться)).Количество(),
			ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("Просрочено", Истина)).Количество(),
			Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	ЗаданияКИсполнению = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗаданияОбработки(Истина);
	Для Каждого ОписаниеЗадания Из ЗаданияКИсполнению Цикл
		
		Если ОписаниеЗадания.Ключ = Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте Тогда
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "ГотовыКОтправке_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
			Дело.Количество     = ОписаниеЗадания.Значение;
			Дело.ЕстьДела       = (Дело.Количество > 0);
			Дело.Важное         = Ложь;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Отправить на электронную почту';
										|en = 'Send by email'");
			Дело.Подсказка      = НСтр("ru = 'Необходимо отправить печатные формы адресатам по электронной почте.';
										|en = 'Send print forms to recipients by email.'");
			
			ФайлыКОбработке = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
				Истина, Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
			
			СписокФайлов = ФайлыКОбработке.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
			
			Дело.ПараметрыФормы = Новый Структура;
			Дело.ПараметрыФормы.Вставить("СписокФайлов", СписокФайлов.ВыгрузитьЗначения());
			
			Дело.Форма          = "ОбщаяФорма.ОтправкаПодписанныхФайлов";
			
		ИначеЕсли ОписаниеЗадания.Ключ = Перечисления.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск Тогда
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "ГотовыКЗаписиНаДиск_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
			Дело.Количество     = ОписаниеЗадания.Значение;
			Дело.ЕстьДела       = (Дело.Количество > 0);
			Дело.Важное         = Ложь;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Записать на носитель';
										|en = 'Save to media'");
			Дело.Подсказка      = НСтр("ru = 'Необходимо записать файлы на диск (USB - носитель).';
										|en = 'Save files to the hard drive (USB drive).'");
			
			ФайлыКОбработке = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
				Истина, Перечисления.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск);
			
			СписокФайлов = ФайлыКОбработке.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск);
			
			Дело.ПараметрыФормы = Новый Структура;
			Дело.ПараметрыФормы.Вставить("СписокФайлов", СписокФайлов.ВыгрузитьЗначения());
			
			Дело.Форма          = "ОбщаяФорма.СохранениеПодписанныхФайлов";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьКЭДО;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСостоянийДокументовКЭДО;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьКЭДО;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПолучениеДокументовРаботаВРоссии;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСРаботаВРоссии;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСостоянийДокументовКЭДО.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПолучениеДокументовРаботаВРоссии.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеСостоянийДокументовКЭДО.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеДокументовРаботаВРоссии.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "Подписать";
	Вид.ИмяПодменю  = "ОзнакомитьсяИПодписать";
	Вид.Заголовок   = НСтр("ru = 'Подписать';
							|en = 'Sign'");
	Вид.Картинка    = БиблиотекаКартинок.ЭлектронноЦифроваяПодпись;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Вид.Порядок     = 10;
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "Просмотреть";
	Вид.ИмяПодменю  = "ОткрытьЭлектронныйДокумент";
	Вид.Заголовок   = НСтр("ru = 'Просмотреть';
							|en = 'View'");
	Вид.Картинка    = БиблиотекаКартинок.УровеньДоступаПросмотр;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Вид.Порядок     = 20;
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "СохранитьЭД";
	Вид.ИмяПодменю  = "СохранитьЭДНаДиск";
	Вид.Заголовок   = НСтр("ru = 'Сохранить ЭД';
							|en = 'Save the electronic document'");
	Вид.Картинка    = БиблиотекаКартинок.Записать;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Вид.Порядок     = 30;
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "ДополнительныеКоманды";
	Вид.ИмяПодменю  = "ДополнительныеКоманды";
	Вид.Заголовок   = НСтр("ru = 'Дополнительные команды';
							|en = 'Additional commands'");
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Вид.Порядок     = 40;
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "СохранитьМЧД";
	Вид.ИмяПодменю  = "СохранитьМЧДНаДиск";
	Вид.Картинка    = БиблиотекаКартинок.Записать;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Вид.Порядок     = 10;
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "ВерсииШаблона";
	Вид.ИмяПодменю  = "ОткрытьВерсииШаблона";
	Вид.Заголовок   = НСтр("ru = 'Версии шаблона';
							|en = 'Версии шаблона'");
	Вид.Картинка = БиблиотекаКартинок.ИсторияДанных;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Вид.Порядок     = 20;
	
КонецПроцедуры

Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Источники.Строки.Найти(Метаданные.Документы.ДокументКадровогоЭДО, "Метаданные") <> Неопределено Тогда
		
		Команда = Команды.Добавить();
		Команда.Вид = "Подписать";
		Команда.Представление = НСтр("ru = 'Подписать';
									|en = 'Sign'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.ВидимостьВФормах = "ФормаСписка";
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыПодписанияПечатныхФорм";
		Команда.Порядок = 10;
		Команда.ФункциональныеОпции = "ИспользоватьКЭДО";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ОжидаетПодписания", Истина);
		
		Команда = Команды.Добавить();
		Команда.Вид = "Просмотреть";
		Команда.Представление = НСтр("ru = 'Оригинал';
									|en = 'Original'");
		Команда.МножественныйВыбор = Ложь;
		Команда.ТребуетсяРаботаСФайлами = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыОткрытияЭлектронногоДокумента";
		Команда.Порядок = 20;
		
		Команда = Команды.Добавить();
		Команда.Вид = "Просмотреть";
		Команда.Представление = НСтр("ru = 'Версия для печати';
									|en = 'Version to print'");
		Команда.МножественныйВыбор = Ложь;
		Команда.ТребуетсяРаботаСФайлами = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыОткрытияВерсииЭлектронногоДокументаДляПечати";
		Команда.Порядок = 30;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "БЗК_ДокументСВерсиейДляПечати", Истина);
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка.ДокументКадровогоЭДО");
		Команда.Вид = "СохранитьЭД";
		Команда.Представление = НСтр("ru = 'Сохранить на диск';
									|en = 'Save to disk'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "ЗаписыватьТолькоНовые";
		Команда.ТребуетсяРаботаСФайлами = Истина;
		Команда.Порядок = 40;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыСохранитьЭД";
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка.ДокументКадровогоЭДО");
		Команда.Вид = "ДополнительныеКоманды";
		Команда.Представление = НСтр("ru = 'Обновить в 1С:Кабинет сотрудника';
									|en = 'Update in 1C:Employee Account'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.ТребуетсяРаботаСФайлами = Истина;
		Команда.ТолькоВоВсехДействиях = Истина;
		Команда.Порядок = 50;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыОбновитьВ1СКабинетСотрудника";
		Команда.ФункциональныеОпции = "ИспользоватьКЭДО";
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка.ДокументКадровогоЭДО");
		Команда.Вид = "ДополнительныеКоманды";
		Команда.Представление = НСтр("ru = 'Конвертировать в PDF/A-1A';
									|en = 'Convert into PDF/A-1A'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.Назначение = "ДляСписка";
		Команда.ТребуетсяРаботаСФайлами = Истина;
		Команда.ТолькоВоВсехДействиях = Истина;
		Команда.Порядок = 60;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыКонвертироватьДокументыВPDFA1A";
		Команда.ФункциональныеОпции = "ИспользоватьКЭДО";
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка.ДокументКадровогоЭДО");
		Команда.Вид = "ДополнительныеКоманды";
		Команда.Представление = НСтр("ru = 'Обновить состояния документов';
									|en = 'Update document states'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.Назначение = "ДляСписка";
		Команда.ТребуетсяРаботаСФайлами = Ложь;
		Команда.ТолькоВоВсехДействиях = Истина;
		Команда.Порядок = 70;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыОбновитьСостоянияДокументов";
		Команда.ФункциональныеОпции = "ИспользоватьКЭДО";
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка.ДокументКадровогоЭДО");
		Команда.Вид = "ДополнительныеКоманды";
		Команда.Представление = НСтр("ru = 'Проверить непроверенные подписи';
									|en = 'Check unverified signatures'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.Назначение = "ДляСписка";
		Команда.ТребуетсяРаботаСФайлами = Ложь;
		Команда.ТолькоВоВсехДействиях = Истина;
		Команда.Порядок = 80;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыПроверитьНеПроверенныеПодписи";
		Команда.ФункциональныеОпции = "ИспользоватьКЭДО";
		
	ИначеЕсли Источники.Строки.Найти(Метаданные.Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО, "Метаданные") <> Неопределено Тогда
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("СправочникСсылка.УдалитьМашиночитаемыеДоверенностиКЭДО");
		Команда.Вид = "СохранитьМЧД";
		Команда.Представление = НСтр("ru = 'Сохранить на диск';
									|en = 'Save to disk'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "Записывать";
		Команда.ТребуетсяРаботаСФайлами = Истина;
		Команда.Порядок = 10;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыСохранитьМЧД";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ДатаРегистрации", , ВидСравненияКомпоновкиДанных.Заполнено);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ДатаОтзыва", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ИначеЕсли Источники.Строки.Найти(Метаданные.Справочники.ШаблоныДокументов, "Метаданные") <> Неопределено Тогда
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("СправочникСсылка.ШаблоныДокументов");
		Команда.Вид = "Просмотреть";
		Команда.Представление = НСтр("ru = 'Визуализатор';
									|en = 'Визуализатор'");
		Команда.МножественныйВыбор = Ложь;
		Команда.РежимЗаписи = "Записывать";
		Команда.ТребуетсяРаботаСФайлами = Ложь;
		Команда.Порядок = 10;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыВизуализаторШаблонаДокумента";
		
		Команда = Команды.Добавить();
		Команда.ТипПараметра = Новый ОписаниеТипов("СправочникСсылка.ШаблоныДокументов");
		Команда.Вид = "ВерсииШаблона";
		Команда.Представление = НСтр("ru = 'Версии шаблона';
									|en = 'Версии шаблона'");
		Команда.МножественныйВыбор = Ложь;
		Команда.РежимЗаписи = "Записывать";
		Команда.ТребуетсяРаботаСФайлами = Ложь;
		Команда.Порядок = 20;
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыВерсииШаблонаДокумента";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВариантыОтчетов

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ШаблоныДокументовКабинетСотрудника);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДокументыКЭДОСОтказами);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДокументыКЭДОСотрудников);
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.ДокументКадровогоЭДО);
	
КонецПроцедуры

#КонецОбласти

Функция ДоступныеСодержанияДокументовПользователя(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Результат = Новый Массив;
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Пользователь, "ИдентификаторПользователяИБ");
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
	Если СвойстваПользователяИБ <> Неопределено Тогда
		ПользовательИБ = СвойстваПользователяИБ.ПользовательИБ;
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.КадроваяИсторияСотрудников, ПользовательИБ) Тогда
		Результат.Добавить(Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
		Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПлановыеНачисления, ПользовательИБ) Тогда
			Результат.Добавить(Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки);
			Если ПравоДоступа("Просмотр", Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам, ПользовательИБ) Тогда
				Результат.Добавить(Перечисления.СодержимоеДокументов.СодержитЗарплату);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальноДоступноеСодержимоеДокументовПользователя(Знач Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Результат = ДоступныеСодержанияДокументовПользователя(Пользователь);
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[Результат.Количество() - 1];
	КонецЕсли;
	Возврат Перечисления.СодержимоеДокументов.ПустаяСсылка();
КонецФункции

Функция ДлительностьОжиданияОбработки(ОжиданиеМинут) Экспорт
	
	Если Не ЗначениеЗаполнено(ОжиданиеМинут) Тогда
		Возврат "???";
	КонецЕсли;
	
	ВЧасах = Цел(ОжиданиеМинут / 60);
	
	Дней = Цел(ВЧасах / 24);
	Часов = ВЧасах - Дней * 24;
	Минут = ОжиданиеМинут - Дней * 24 * 60 - Часов * 60;
	
	Если Дней > 0 Тогда
		
		Шаблон = НСтр("ru = '%1 д. %2 ч. %3 м.';
						|en = '%1 d. %2 h %3 min'");
		Представление = СтрШаблон(
			Шаблон,
			Дней,
			Формат(Часов, "ЧЦ=2; ЧН=; ЧВН="),
			Формат(Минут, "ЧЦ=2; ЧН=; ЧВН="));
		
	ИначеЕсли Минут > 0 Тогда
		
		Шаблон = НСтр("ru = '%1 ч. %2 м.';
						|en = '%1 h %2 m'");
		Представление = СтрШаблон(
			Шаблон,
			Формат(Часов, "ЧЦ=2; ЧН=; ЧВН="),
			Формат(Минут, "ЧЦ=2; ЧН=; ЧВН="));
		
	Иначе
		
		Шаблон = НСтр("ru = '%2 м.';
						|en = '%2 min'");
		Представление = СтрШаблон(
			Шаблон,
			Формат(Минут, "ЧЦ=2; ЧН=; ЧВН="));
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПечатнаяФормаСоШтампами(ФайлПечатнойФормы, Оригинал, ВыводитьОжиданияПодписи = Ложь, ВыводитьКомментарииДокументов = Ложь) Экспорт
	
	Если ТипЗнч(Оригинал) = Тип("ТабличныйДокумент") Тогда
		ОригиналПечатнойФормы = Оригинал;
	Иначе
		ОригиналПечатнойФормы = Оригинал.Получить();
	КонецЕсли;
	
	Направления = Неопределено;
	Комментарии = Неопределено;
	Если ВыводитьОжиданияПодписи Тогда
		УстановитьПривилегированныйРежим(Истина);
		Направления = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.НаправленияНаПодпись(ФайлПечатнойФормы);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ВыводитьКомментарииДокументов Тогда
		УстановитьПривилегированныйРежим(Истина);
		Комментарии = РегистрыСведений.КомментарииФайловДокументовКЭДО.КомментарииФайла(ФайлПечатнойФормы);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ПечатнаяФормаСоШтампамиПоОригиналу(
		ОригиналПечатнойФормы,
		ЭлектроннаяПодпись.УстановленныеПодписи(ФайлПечатнойФормы),
		Направления,
		Комментарии);
	
КонецФункции

Функция ПечатнаяФормаСоШтампамиПоОригиналу(ОригиналПечатнойФормы, УстановленныеПодписи, Направления = Неопределено, Комментарии = Неопределено) Экспорт
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ВысотаНачало = 0;
	Если Комментарии <> Неопределено Тогда
		НомерКомментария = 0;
		Для Каждого ОписаниеКомментария Из Комментарии Цикл
			
			НомерСтрокиНачалаКомментария = НомерКомментария * 2 + 1;
			Область = ПечатнаяФорма.Область(НомерСтрокиНачалаКомментария, 1);
			Область.Текст = СтрШаблон(
				"%1 (%2)",
				ОписаниеКомментария.Исполнитель,
				Формат(ОписаниеКомментария.ДатаКомментария, "ДЛФ=DT"));
			Область.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			Область.Шрифт = Новый Шрифт(Область.Шрифт, , , Истина);
			
			НомерКомментария = НомерКомментария + 1;
			Область = ПечатнаяФорма.Область(НомерСтрокиНачалаКомментария + 1, 1,
				НомерСтрокиНачалаКомментария + 1, ОригиналПечатнойФормы.ШиринаТаблицы);
			Область.Объединить();
			Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Область.Текст = ОписаниеКомментария.Комментарий;
			Область.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			
		КонецЦикла;
		ВысотаНачало = ПечатнаяФорма.ВысотаТаблицы + 1;
		ВысотаКонец = ВысотаНачало + ОригиналПечатнойФормы.ВысотаТаблицы;
		Для НомерКолонки = 1 По ОригиналПечатнойФормы.ШиринаТаблицы Цикл
			ПечатнаяФорма.Область(, НомерКолонки, , НомерКолонки).ШиринаКолонки =
				ОригиналПечатнойФормы.Область(1, НомерКолонки, 1, НомерКолонки).ШиринаКолонки;
		КонецЦикла;
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ПечатнаяФорма, ОригиналПечатнойФормы, Ложь);
	
	ОписаниеШтампов = Новый Массив;
	ОписаниеПредопределенныхШтампов = Новый Соответствие;
	Для Каждого ДанныеСертификата Из УстановленныеПодписи Цикл
		
		ПараметрыШтампа = Новый Структура;
		ПараметрыШтампа.Вставить("ТекстОтметки", "");
		ПараметрыШтампа.Вставить("Логотип");
		
		Если ТипЗнч(ДанныеСертификата.Сертификат) = Тип("ДвоичныеДанные") Тогда
			Сертификат = ДанныеСертификата.Сертификат;
		Иначе
			Сертификат = ДанныеСертификата.Сертификат.Получить();
		КонецЕсли;
		
		Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
			Сертификат = ПолучитьИзВременногоХранилища(Сертификат);
		КонецЕсли;
		
		Если ТипЗнч(Сертификат) <> Тип("ДвоичныеДанные") Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось получить данные сертификата подписи %1 от %2 (отпечаток: %3)';
											|en = 'Cannot get signature certificate data %1 from %2 (thumbprint: %3)'"),
				ДанныеСертификата.КомуВыданСертификат,
				ДанныеСертификата.ДатаПодписи,
				ДанныеСертификата.Отпечаток);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;;
		КонецЕсли;
		
		Если Сертификат <> Неопределено Тогда
			СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
			РаботаСФайламиПереопределяемый.ПриПечатиФайлаСоШтампом(ПараметрыШтампа, СертификатКриптографии);
			
			Штамп = ЭлектроннаяПодпись.ШтампВизуализацииЭлектроннойПодписи(
				СертификатКриптографии, ДанныеСертификата.ДатаПодписи,
				ПараметрыШтампа.ТекстОтметки, ПараметрыШтампа.Логотип);
			
			ОбластьШтампа = Штамп.Область(1, 1, Штамп.ВысотаТаблицы, Штамп.ШиринаТаблицы);
			ОбластьШтампа.ЦветТекста = ЦветаСтиля.ЦветШтампаЦифровойПодписи;
			ОбластьШтампа.ЦветРамки = ЦветаСтиля.ЦветШтампаЦифровойПодписи;
			
			Если ПечатнаяФорма.Области.Найти("ШтампЭПОрганизация") <> Неопределено
				 И ДанныеСертификата.Комментарий = ""	
				 И ОписаниеПредопределенныхШтампов.Получить("ШтампЭПОрганизация") = Неопределено Тогда
				ОписаниеПредопределенныхШтампов.Вставить("ШтампЭПОрганизация", Штамп);	
			ИначеЕсли ПечатнаяФорма.Области.Найти("ШтампЭПСотрудник") <> Неопределено
					  И СтрНайти(ДанныеСертификата.Комментарий, "РольПодписанта:Сотрудник") <> 0
					  И ОписаниеПредопределенныхШтампов.Получить("ШтампЭПСотрудник") = Неопределено Тогда
				ОписаниеПредопределенныхШтампов.Вставить("ШтампЭПСотрудник", Штамп)	
			Иначе
				ОписаниеШтампов.Добавить(Штамп);	
			КонецЕсли;
			
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось вывести штамп подписи (%1 от %2)';
					|en = 'Cannot display the signature stamp (%1 from %2)'"),
				ДанныеСертификата.КомуВыданСертификат,
				ДанныеСертификата.ДатаПодписи);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектроннаяПодпись.ДобавитьШтампыВТабличныйДокумент(ПечатнаяФорма, ОписаниеПредопределенныхШтампов);
	ДобавитьШтампВТабличныйДокумент(ПечатнаяФорма, ОписаниеШтампов);
	
	Если Направления <> Неопределено Тогда
		Для Каждого Направление Из Направления Цикл
			
			Область = ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы + 2, 2);
			Область.Текст = СтрШаблон(НСтр("ru = 'Ожидает подписи (%1)';
											|en = 'Awaits signing (%1)'"), Направление.Исполнитель);
			Область.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Процедура ДобавитьШтампВТабличныйДокумент(ПечатнаяФорма, ТабличныеДокументыШтампов)
	
	КоличествоШтамповВСтроке = 2;
	Если ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт Тогда
		КоличествоШтамповВСтроке = 3;
	КонецЕсли;
	
	КоличествоИтераций = Цел(ТабличныеДокументыШтампов.Количество() / КоличествоШтамповВСтроке);
	Если КоличествоИтераций * КоличествоШтамповВСтроке < ТабличныеДокументыШтампов.Количество() Тогда
		КоличествоИтераций = КоличествоИтераций + 1;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("РазметкаШтамповДокументовКЭДО");
	Для НомерИтерации = 0 По КоличествоИтераций - 1 Цикл
		
		Если ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт Тогда
			ТаблицаШтампов = Макет.ПолучитьОбласть("Подписи|Ландшафт")
		Иначе
			ТаблицаШтампов = Макет.ПолучитьОбласть("Подписи|Портрет")
		КонецЕсли;
		
		ИндексПервого = НомерИтерации * КоличествоШтамповВСтроке;
		ВыводимыеШтампы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТабличныеДокументыШтампов[ИндексПервого]);
		Для Смещение = 1 По КоличествоШтамповВСтроке - 1 Цикл
			ИндексОчередного = ИндексПервого + Смещение;
			Если ИндексОчередного > ТабличныеДокументыШтампов.Количество() - 1 Тогда
				Прервать;
			КонецЕсли;
			ВыводимыеШтампы.Добавить(ТабличныеДокументыШтампов[ИндексОчередного]);
		КонецЦикла;
		
		ЭлектроннаяПодпись.ДобавитьШтампыВТабличныйДокумент(ТаблицаШтампов, ВыводимыеШтампы);
		
		СократитьТаблицуШтампов = Истина;
		Для НомерКолонки = 1 По ТаблицаШтампов.ШиринаТаблицы Цикл
			Если ЗначениеЗаполнено(ТаблицаШтампов.Область(ТаблицаШтампов.ВысотаТаблицы, НомерКолонки).Текст) Тогда
				СократитьТаблицуШтампов = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СократитьТаблицуШтампов Тогда
			ТаблицаШтампов = ТаблицаШтампов.ПолучитьОбласть(1, 1, ТаблицаШтампов.ВысотаТаблицы - 1, ТаблицаШтампов.ШиринаТаблицы);
		КонецЕсли;
		
		Если Не ПечатнаяФорма.ПроверитьВывод(ТаблицаШтампов) Тогда
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ШиринаШтампов = ТаблицаШтампов.ШиринаТаблицы;
		ШтампВерх = 1;
		ШтампНиз = ТаблицаШтампов.ВысотаТаблицы;
		ВысотаШтампов = ШтампНиз - ШтампВерх;
		ВысотаНачало = ПечатнаяФорма.ВысотаТаблицы + 1;
		ВысотаКонец = ВысотаНачало + ВысотаШтампов;
		
		ПечатнаяФорма.Область(ВысотаНачало, 1, ВысотаКонец, ШиринаШтампов).Разъединить();
		// Вставка в разъединенные области область из макета штампа.
		ИсходнаяОбласть = ТаблицаШтампов.Область(ШтампВерх, 1, ШтампНиз, ШиринаШтампов);
		ОбластьПриемник = ПечатнаяФорма.Область(ВысотаНачало, 1, ВысотаКонец, ШиринаШтампов);
		ПечатнаяФорма.ВставитьОбласть(ИсходнаяОбласть, ОбластьПриемник, , Истина);
		// Формат строк, чтобы изменение ширины колонок не повлияло на остальной документ.
		ПечатнаяФорма.Область(ВысотаНачало, , ВысотаКонец).СоздатьФорматСтрок();
		
		Для НомерКолонки = 1 По ШиринаШтампов Цикл
			ПечатнаяФорма.Область(ВысотаНачало, НомерКолонки, ВысотаКонец, НомерКолонки).ШиринаКолонки =
				ТаблицаШтампов.Область(, НомерКолонки, , НомерКолонки).ШиринаКолонки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьФайлыПечатныхФормОбработчик(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("УдалениеПечатныхФорм") Тогда
		
		МетаданныеВладельца = Источник.ВладелецФайла.Метаданные();
		Если МетаданныеВладельца <> Метаданные.Документы.ДокументКадровогоЭДО
			И ОбщегоНазначения.ЭтоДокумент(МетаданныеВладельца)
			И Источник.ПометкаУдаления Тогда
			
			УдаленоФайлов = УдалитьПечатныеФормыОбъекта(Источник.ВладелецФайла);
			Если УдаленоФайлов > 0 Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Удалено %1 печатных форм документа %2';
						|en = 'Removed %1 print forms of the %2 document'"),
					СтрокаСЧислом(
						НСтр("ru = ';%1 печатная форма; ;%1 печатных формы;%1 печатных форм;%1 печ. форм';
							|en = ';%1 print form; ;%1 print forms; %1 print forms; %1 print forms'"),
						УдаленоФайлов,
						ВидЧисловогоЗначения.Количественное),
					Источник.ВладелецФайла);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник.ВладелецФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеФайла(ОписанияФайлов, ДанныеПечатнойФормы) Экспорт
	
	ОписанияОригиналов = ОписанияФайлов.ОригиналыПечатныхФорм.Получить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы);
	Если ОписанияОригиналов = Неопределено Тогда
		
		ОписанияОригиналов = Новый Структура;
		ОписанияОригиналов.Вставить("Наименование", ДанныеПечатнойФормы.Название);
		ОписанияОригиналов.Вставить("Оригиналы", Новый Соответствие);
		
		ОписанияФайлов.ОригиналыПечатныхФорм.Вставить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы, ОписанияОригиналов)
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
		ОписанияОригиналов.Оригиналы.Вставить(ДанныеПечатнойФормы.ФайлОбъекта, ДанныеПечатнойФормы);
	КонецЕсли;
	
	ПечатныеФормыВладельца = ОписанияФайлов.ПечатныеФормыОбъектов.Получить(ДанныеПечатнойФормы.Владелец);
	Если ПечатныеФормыВладельца = Неопределено Тогда
		
		ПечатныеФормыВладельца = Новый Соответствие;
		ОписанияФайлов.ПечатныеФормыОбъектов.Вставить(
			ДанныеПечатнойФормы.Владелец, ПечатныеФормыВладельца);
		
	КонецЕсли;
	
	СписокФайловИдентификатора = ПечатныеФормыВладельца.Получить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы);
	Если СписокФайловИдентификатора = Неопределено Тогда
		СписокФайловИдентификатора = Новый Массив;
		ПечатныеФормыВладельца.Вставить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы, СписокФайловИдентификатора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
		СписокФайловИдентификатора.Добавить(ДанныеПечатнойФормы.ФайлОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПодписываемогоФайла() Экспорт
	
	Возврат Новый Структура(
		"Организация,
		|ФайлОбъекта,
		|АдресВХранилище,
		|УстановленныеПодписи,
		|ИмяФайла");
	
КонецФункции

// Возвращает структуру описания печатной формы
//
// Возвращаемое значение:
//	Структура - С ключами
//		* Владелец						- Ссылка на объект с присоединенными файлами
//		* ИдентификаторПечатнойФормы	- Строка, идентификатор печатной формы, заданный
//											при добавлении команд печати
//		* Название						- Строка, представление печатной формы
//		* ПечатнаяФорма					- ТабличныйДокумент
//		* ИмяФайла						- Строка, имя файла
//		* АдресВХранилище				- Строка, адрес во временном хранилище двоичных данных
//											присоединенного файла
//		* ФайлОбъекта					- ОпределяемыйТип.ПрисоединенныйФайлПечатнойФормы
//		* Организация					- СправочникСсылка.Организации
//		* Сотрудник						- СправочникСсылка.Сотрудники
//		* ФизическоеЛицо				- СправочникСсылка.ФизическиеЛица
//		* УстановленныеПодписи			- Соответствие:
//											* Ключ		- СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//											* Значение	- Булево, всегда Истина
//
Функция ДанныеПечатнойФормы() Экспорт
	
	ДанныеФормы = ДанныеПодписываемогоФайла();
	ДанныеФормы.Вставить("Владелец");
	ДанныеФормы.Вставить("ИдентификаторПечатнойФормы");
	ДанныеФормы.Вставить("Название");
	ДанныеФормы.Вставить("ПечатнаяФорма");
	ДанныеФормы.Вставить("Сотрудник");
	ДанныеФормы.Вставить("ФизическоеЛицо");
	ДанныеФормы.Вставить("Номер");
	ДанныеФормы.Вставить("Дата");
	ДанныеФормы.Вставить("ИмяОбласти");
	ДанныеФормы.Вставить("РегистрироватьКОтправке");
	
	Возврат ДанныеФормы;
	
КонецФункции

// Возвращает структуру описывающую файлы печатных форм
// 
// Возвращаемое значение:
//  Структура - с ключами
//   * ПечатныеФормыОбъектов - Соответствие
//   * ОригиналыПечатныхФорм - Соответствие
//
Функция ОписанияФайловПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатныеФормыОбъектов,ОригиналыПечатныхФорм", Новый Соответствие, Новый Соответствие);
	
КонецФункции

// Выполняет в фоновом режиме отправку по электронной почте готовых для этого печатных форм.
//
Процедура ВыполнитьОтправкуПечатныхФормПоЭлектроннойПочте() Экспорт
	
	ФайлыКОбработке = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
		Ложь, Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
	
	СписокФайлов = ФайлыКОбработке.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
	Если СписокФайлов <> Неопределено Тогда
		
		ДанныеФайловПечатныхФорм = ДанныеФайловПечатныхФормКОтправкеПоЭлектроннойПочте(СписокФайлов);
		ДанныеПолучателей = ПолучателиЭлектронныхПисем(ДанныеФайловПечатныхФорм);
		
		ОтправленныеПолучатели = ОтправитьПисьмаПолучателям(ДанныеПолучателей, ДанныеФайловПечатныхФорм, Новый УникальныйИдентификатор);
		
		Если ОтправленныеПолучатели.Количество() > 0 Тогда
			
			ОтправленныеФайлы = Новый Массив;
			Для Каждого ДанныеПолучателя Из ОтправленныеПолучатели Цикл
				ОписаниеФайлов = ДанныеФайловПечатныхФорм.Скопировать(Новый Структура("ФизическоеЛицо", ДанныеПолучателя.ФизическоеЛицо));
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтправленныеФайлы, ОписаниеФайлов.ВыгрузитьКолонку("ФайлОбъекта"));
			КонецЦикла;
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработки(
				ОтправленныеФайлы, Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяЗаписьЭлектроннойПочты() Экспорт
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеУчетныеЗаписи[0].Ссылка;
	
КонецФункции

Функция ОтправитьПисьмаПолучателям(ДанныеПолучателей, ДанныеФайловПечатныхФорм, ИдентификаторХранилища) Экспорт
	
	ОтправленныеПолучатели = Новый Массив;
	
	ЗаписьЭлектроннойПочты = УчетнаяЗаписьЭлектроннойПочты();
	
	ПолучателиПисем = Новый Соответствие;
	Письма = Новый Массив;
	Для Каждого ДанныеПолучателя Из ДанныеПолучателей Цикл
		
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(
			ЗаписьЭлектроннойПочты, ПараметрыПисьма(ДанныеПолучателя, ДанныеФайловПечатныхФорм, ИдентификаторХранилища));
		
		Письма.Добавить(Письмо);
		ПолучателиПисем.Вставить(Письмо, ДанныеПолучателя);
		
	КонецЦикла;
	
	Попытка
		
		ТекстОшибки = "";
		РезультатыОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьма(ЗаписьЭлектроннойПочты, Письма, ТекстОшибки);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Для Каждого ОписаниеПолучателяПисем Из ПолучателиПисем Цикл
				
				РезультатОтправки = РезультатыОтправки.Получить(ПолучателиПисем, ОписаниеПолучателяПисем.Ключ);
				Если РезультатОтправки <> Неопределено
					И РезультатОтправки.ОшибочныеПолучателиТогда.Количество() > 0 Тогда
					
					ТекстыОшибки = Новый Массив;
					Для Каждого ОписаниеОшибки Из РезультатОтправки.ОшибочныеПолучателиТогда Цикл
						ТекстыОшибки.Добавить(СтрШаблон("%1 - %2"), ОписаниеОшибки.Ключ, ОписаниеОшибки.Значение);
					КонецЦикла;
					
					ПолучателиПисем.Значение.ТекстОшибки = СтрСоединить(ТекстыОшибки, "; ");
					
				Иначе
					ОтправленныеПолучатели.Добавить(ПолучателиПисем.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого ДанныеПолучателя Из ДанныеПолучателей Цикл
				ОтправленныеПолучатели.Добавить(ДанныеПолучателя);
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		ИнформацияОшибке = ИнформацияОбОшибке();
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОшибке));
	КонецПопытки;
	
	Возврат ОтправленныеПолучатели;
	
КонецФункции

Функция ДанныеФайловПечатныхФормКОтправкеПоЭлектроннойПочте(СписокФайлов) Экспорт
	
	ДанныеФайловКОтправке = Новый ТаблицаЗначений;
	ДанныеФайловКОтправке.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000)));
	ДанныеФайловКОтправке.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеФайловКОтправке.Колонки.Добавить("ФайлОбъекта", Метаданные.ОпределяемыеТипы.ПрисоединенныйФайлПечатнойФормы.Тип);
	ДанныеФайловКОтправке.Колонки.Добавить("ОписаниеПечатнойФормы", Новый ОписаниеТипов);
	
	ОписанияФайлов = Новый Массив;
	ПрисоединенныеФайлы = Новый Массив;
	Для Каждого ФайлСписка Из СписокФайлов Цикл
		
		Если ТипЗнч(ФайлСписка) = Тип("Структура") Тогда
			ОписанияФайлов.Добавить(ФайлСписка);
		Иначе
			ПрисоединенныеФайлы.Добавить(ФайлСписка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписанияФайлов.Количество() > 0 Тогда
		
		Для Каждого ОписанияФайла Из ОписанияФайлов Цикл
			
			ПодписываемыйФайл = ДанныеФайловКОтправке.Добавить();
			ПодписываемыйФайл.Название = ОписанияФайла.Название;
			ПодписываемыйФайл.ФизическоеЛицо = ОписанияФайла.ФизическоеЛицо;
			ПодписываемыйФайл.ОписаниеПечатнойФормы = ОписанияФайла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеПечатныхФорм = РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайловПечатныхФорм(СписокФайлов);
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого ДанныеПечатнойФормы Из ДанныеПечатныхФорм Цикл
			
			ПодписываемыйФайл = ДанныеФайловКОтправке.Добавить();
			ПодписываемыйФайл.Название = ДанныеПечатнойФормы.Значение.Название;
			ПодписываемыйФайл.ФизическоеЛицо = ДанныеПечатнойФормы.Значение.ФизическоеЛицо;
			ПодписываемыйФайл.ФайлОбъекта = ДанныеПечатнойФормы.Ключ;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеФайловКОтправке;
	
КонецФункции

Функция ПолучателиЭлектронныхПисем(ДанныеФайловПечатныхФорм) Экспорт
	
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Получатели.Колонки.Добавить("ЭлектронныйАдрес", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000)));
	
	СписокПолучателей = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеФайловПечатныхФорм, "ФизическоеЛицо", Истина);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокПолучателей, "EMailПредставление");
	
	Для Каждого ДанныеПолучателя Из КадровыеДанные Цикл
		
		Получатель = Получатели.Добавить();
		Получатель.ФизическоеЛицо = ДанныеПолучателя.ФизическоеЛицо;
		Получатель.ЭлектронныйАдрес = ДанныеПолучателя.EMailПредставление;
		
	КонецЦикла;
	
	Возврат Получатели;
	
КонецФункции

Функция ЭтоТипОбъектаСПечатнымиФормами(ТипОбъекта) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ОбъектСПечатнымиФормами.Тип.СодержитТип(ТипОбъекта);
	
КонецФункции

Функция ЭтоОбъектСПечатнымиФормами(СсылкаНаОбъект) Экспорт
	
	Возврат ЭтоТипОбъектаСПечатнымиФормами(ТипЗнч(СсылкаНаОбъект));
	
КонецФункции

Функция ДанныеПечатнойФормыПоДаннымФайлаПечатнойФормы(ДанныеФайла) Экспорт
	
	ДанныеПечатнойФормы = ДанныеПечатнойФормы();
	ДанныеПечатнойФормы.Владелец =                   ДанныеФайла.Владелец;
	ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ДанныеФайла.ИдентификаторПечатнойФормы;
	ДанныеПечатнойФормы.Название =                   ДанныеФайла.Название;
	ДанныеПечатнойФормы.ФайлОбъекта =                ДанныеФайла.ФайлОбъекта;
	ДанныеПечатнойФормы.Организация =                ДанныеФайла.Организация;
	ДанныеПечатнойФормы.Сотрудник =                  ДанныеФайла.Сотрудник;
	ДанныеПечатнойФормы.ФизическоеЛицо =             ДанныеФайла.ФизическоеЛицо;
	ДанныеПечатнойФормы.ПечатнаяФорма =              ДанныеФайла.Оригинал.Получить();
	
	ЗаполнитьКоллекциюОтпечатковПодписей(ДанныеПечатнойФормы, ДанныеФайла.ФайлОбъекта);
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Процедура ЗаполнитьКоллекциюОтпечатковПодписей(ДанныеФайла, ПрисоединенныйФайл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл, , Истина);
	Если УстановленныеПодписи.Количество() > 0 Тогда
		Для Каждого УстановленнаяПодпись Из УстановленныеПодписи Цикл
			КадровыйЭДОКлиентСервер.ДобавитьДанныеПодписи(
				ДанныеФайла.УстановленныеПодписи,
				ЭлектроннаяПодпись.СсылкаНаСертификат(УстановленнаяПодпись.Отпечаток),
				УстановленнаяПодпись);
		КонецЦикла;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЭтоФайлПечатнойФормы(ПрисоединенныйФайл) Экспорт
	
	Возврат ОтобратьФайлыПечатныхФорм(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайл)).Количество() > 0;
	
КонецФункции

Функция ОтобратьФайлыПечатныхФорм(ПрисоединенныеФайлы) Экспорт
	
	Возврат РегистрыСведений.ПодписанныеПечатныеФормы.ОтобратьФайлыПечатныхФорм(ПрисоединенныеФайлы);
	
КонецФункции

Процедура ПриПодписанииФайловПечатныхФорм(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.Отбор.ПодписанныйОбъект.Использование
		Или Не ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(Источник.Отбор.ПодписанныйОбъект.Значение.Метаданные().ПолноеИмя()) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда
		
		СертификатыПользователя = КадровыйЭДОВызовСервера.СертификатыОрганизацииПользователя();
		
		ПодписанныеОбъекты = Новый Массив;
		Для Каждого Запись Из Источник Цикл
			Если Запись.УстановившийПодпись = Пользователи.ТекущийПользователь() Тогда
				Если СертификатыПользователя.Найти(Запись.Отпечаток, "Отпечаток") <> Неопределено Тогда
					ПодписанныеОбъекты.Добавить(Запись.ПодписанныйОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПодписанныеОбъекты) Тогда
			ПечатныеФормы = ОтобратьФайлыПечатныхФорм(ПодписанныеОбъекты);
			Если ЗначениеЗаполнено(ПечатныеФормы) Тогда
				КадровыйЭДОВызовСервера.УдалитьФайлыИзОбработкиПользователя(ПечатныеФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.19.77";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ПометитьНаУдалениеДокументыУдаленныхОснований";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5917f6cb-e603-45fe-86f4-22a6b690c7f1");
	Обработчик.Комментарий = НСтр("ru = 'Удаление документов кадрового ЭДО с удаленными основаниями.';
									|en = 'Deletion of HR EDI documents with deleted reference documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.2";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПечатныхФормБЗК.ЗаполнитьНастройки";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.2";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьНаличияСведенийОЗарплате";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bda48768-02e2-4c61-8e2c-aba05fecfc1a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение уровней доступа документов кадрового ЭДО.';
									|en = 'Fill in access levels of HR EDI documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.2";
	Обработчик.Процедура = "РегистрыСведений.ПодписанныеОбъектыПользователей.ЗаполнитьПодписанныеОбъекты";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ffd181db-bb81-46b3-adaa-62ac06056dea");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение информации об установленных подписях пользователей.';
									|en = 'Fill information on user signatures.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.64";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьПодписантов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("81fe5625-d308-471a-97f6-d7c866214360");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в табличной части документов кадрового ЭДО.';
									|en = 'Fill in signers in the table of HR EDI documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.23.3";
	Обработчик.Процедура = "КадровыйЭДО.ОбновитьРасписаниеЗаданияОбработкиДокументовПечатныхФорм";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b65cbd6d-6ce8-45c1-b391-a5931c5a5a0b");
	Обработчик.Комментарий = НСтр("ru = 'Обновление расписания обработки файлов документов КЭДО.';
									|en = 'Update processing schedule of HR EDI document files.'");
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.7";
	Обработчик.Процедура = "КадровыйЭДО.УстановитьЗначениеВедетсяУчетСогласийНаПрисоединениеККЭДООбновление";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.19";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПечатныхФормБЗК.ЗаполнитьНастройки";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.25.11";
	Обработчик.Процедура = "РегистрыСведений.СостояниеСогласияНаПрисоединениеККЭДО.ЗаполнитьДатыНачалаИОкончанияСогласийНаПрисоединениеККЭДООбновление";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6d722dee-649a-48eb-bff3-d667170c165a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение дат начала и окончания действия согласий на присоединение к КЭДО.';
									|en = 'Fill effective and expiration dates of consents to join HR EDI.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КодыДокументовКадровыхМероприятий) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.25.26";
		Обработчик.Процедура = "Справочники.КодыДокументовКадровыхМероприятий.НачальноеЗаполнение";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.25.27";
	Обработчик.Процедура = "КадровыйЭДО.УстановитьИспользованиеКЭДО";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.25.28";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьКодыДокументовКадровыхМероприятий";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1b4a5296-66d9-4745-9e33-2339b698ffa5");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение кодов документов кадровых мероприятий документов КЭДО.';
									|en = 'Fill codes of personnel measure documents of HR EDI documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.25.29";
	Обработчик.Процедура = "РегистрыСведений.ПодписанныеПечатныеФормы.ЗаполнитьНомераДокументов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2f29cbef-0859-4034-ba3f-04063ea45937");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение номеров первичных документов печатных форм.';
									|en = 'Fill numbers for source documents of print forms.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.25.135";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПечатныхФормБЗК.ЗаполнитьНастройки";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.3";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ПеренестиСведенияЭлектронногоДокумента";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("16b11277-09c2-4249-9af1-2798a2ff3b49");
	Обработчик.Комментарий = НСтр("ru = 'Перенос сведений об электронных документах.';
									|en = 'Transfer information on electronic documents.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.11";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьРасширенияЭлектронныхДокументов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("407cea50-5f5c-4eba-85e0-58554efddfae");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет расширения электронных документов в документах КЭДО.';
									|en = 'Fills electronic document extensions in HR EDI documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.11";
	Обработчик.Процедура = "РегистрыСведений.СостоянияДокументовКЭДО.ЗаполнитьСостояния";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f1c493e1-8d63-415c-972d-ea61370610cf");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет состояния документов КЭДО.';
									|en = 'Fills HR EDI document states.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегламентныеЗадания.ОбновлениеСостоянийДокументовКЭДО) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.27.20";
		Обработчик.Процедура = "КадровыйЭДО.ОбновитьРасписаниеЗаданияОбновленияСостоянийДокументовКЭДО";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.5";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьПризнакСоответствияФорматаДокументаТребованиям";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fc09de14-5e75-4273-8b03-0ee56374768e");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет признак соответствия электронных документов требованиям к формату.';
									|en = 'Fills the flag that indicates the compliance of electronic documents with format requirements.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.56";
	Обработчик.Процедура = "РегистрыСведений.ПодписиДокументовКЭДО.УдалитьБракованныеПодписиСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3e13933a-2726-4f7d-b003-4705065d8fa6");
	Обработчик.Комментарий = НСтр("ru = 'Удаление бракованных подписей.';
									|en = 'Delete defective signatures.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.79";
	Обработчик.Процедура = "РегистрыСведений.РезультатыПубликацииДокументовКЭДО.ЗаполнитьДатыПубликации";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("29ea2235-89a9-4fb5-86a6-75c0792238a3");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты публикации документов КЭДО.';
									|en = 'Fills dates of HR EDI document publication.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.38";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПечатныхФормБЗК.ЗаполнитьВариантПодписания";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.38";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьВариантПодписанияДокументов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b24d18a3-7797-49ee-9fd0-a4b27206fe36");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет варианты подписания документов КЭДО.';
									|en = 'Fills HR EDI document signing options.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.116";
	Обработчик.Процедура = "РегистрыСведений.ЭлектронныеПодписиКЭДО.ЗаполнитьИдентификаторыПодписей";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("845c4ccb-6199-4bcc-906b-1d9b3a70d66a");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет идентификаторы подписей.';
									|en = 'Заполняет идентификаторы подписей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.97";
	Обработчик.Процедура = "Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.ПеренестиДанныеМЧДВОбщийСправочник";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3ee17a0f-b290-4f76-957e-41c7933d1808");
	Обработчик.Комментарий = НСтр("ru = 'Переносит МЧД КЭДО в справочник универсального формата.';
									|en = 'Переносит МЧД КЭДО в справочник универсального формата.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.97";
	Обработчик.Процедура = "КадровыйЭДО.ЗарегистрироватьМашиночитаемыеДоверенностиДляОбмена";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6cb9209f-489d-4645-8ecb-1b2ddc78f74c");
	Обработчик.Комментарий = НСтр("ru = 'Регистрация МЧД для передачи в 1С:Кабинет сотрудника.';
									|en = 'Регистрация МЧД для передачи в 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.98";
	Обработчик.Процедура = "Справочники.ШаблоныДокументов.ВосстановитьНастройкиШаблонов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("62ca726d-94e8-489b-bbf3-a0e12d015cfa");
	Обработчик.Комментарий = НСтр("ru = 'Восстанавливает настройки шаблонов документов.';
									|en = 'Восстанавливает настройки шаблонов документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.99";
	Обработчик.Процедура = "КадровыйЭДО.ОбновитьВидПодписиСогласияНаПрисоединениеККЭДО";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cfb52087-5a6b-444b-a5a5-54efb20e4754");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет вариант подписания согласия на присоединение к КЭДО.';
									|en = 'Обновляет вариант подписания согласия на присоединение к КЭДО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.124";
	Обработчик.Процедура = "Справочники.ШаблоныДокументов.ЗаполнитьТребуетПодписания";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9c0f0d0d-e0b0-4eae-a098-73dcdf1fb022");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет требование подписания сотрудником шаблонов документов.';
									|en = 'Заполняет требование подписания сотрудником шаблонов документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.124";
	Обработчик.Процедура = "Справочники.ШаблоныДокументов.ОбновитьШаблоны";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("92baec68-3f1e-4276-afc4-9d75d17d366f");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет предопределенные шаблоны документов.';
									|en = 'Fills predefined document templates.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.171";
	Обработчик.Процедура = "Справочники.ШаблоныДокументов.ОбновитьВерсииШаблонов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("db9ab635-4012-483d-aa3c-e0d82fd8eae3");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет предопределенные шаблоны документов.';
									|en = 'Fills predefined document templates.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.174";
	Обработчик.Процедура = "Справочники.ШаблоныДокументов.ОбновитьШаблонДокументаОтсутсвие_3_0_1";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6ce116fa-27eb-484f-8ed9-3e9bb3e36e60");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет шаблон документа ""Отсутствие"".';
									|en = 'Обновляет шаблон документа ""Отсутствие"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.175";
	Обработчик.Процедура = "Справочники.ШаблоныДокументов.ОбновитьШаблоныДокументовЗаказаСправок_3_0_1";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7e902c19-1cee-4745-a88e-a534a8aef45a");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет шаблоны документов заказа справок.';
									|en = 'Обновляет шаблоны документов заказа справок.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.191";
	Обработчик.Процедура = "Справочники.ШаблоныДокументов.ЗаполнитьОбязательныеРеквизитыВариантовОтчетов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7bed7f11-54d4-44d9-bfe9-23b9c4c15b15");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет обязательные реквизиты вариантов отчетов.';
									|en = 'Заполняет обязательные реквизиты вариантов отчетов.'");
	
КонецПроцедуры

Функция РазместитьКомандуНаФормеПечатьДокументов(УправляемаяФорма, КомандаФормы) Экспорт
	
	КнопкаФормы = Неопределено;
	
	ГруппаСохранитьОтправить = УправляемаяФорма.Элементы.Найти("ГруппаСохранитьОтправить");
	Если ГруппаСохранитьОтправить <> Неопределено Тогда
		
		ЭлементВставки = Неопределено;
		Если ГруппаСохранитьОтправить.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ЭлементВставки = ГруппаСохранитьОтправить.ПодчиненныеЭлементы[0];
			Если ЭлементВставки.Имя = "ПодписатьПечатныеФормы" Тогда
				Если ГруппаСохранитьОтправить.ПодчиненныеЭлементы.Количество() > 1 Тогда
					ЭлементВставки = ГруппаСохранитьОтправить.ПодчиненныеЭлементы[1];
				Иначе
					ЭлементВставки = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КнопкаФормы = УправляемаяФорма.Элементы.Вставить(КомандаФормы.Имя, Тип("КнопкаФормы"),
			ГруппаСохранитьОтправить, ЭлементВставки);
			
		КнопкаФормы.Видимость =	ЗаявкиСотрудников.ТребуетсяОтправлятьФайл(УправляемаяФорма.Параметры.ПараметрКоманды);	
			
	КонецЕсли;
	
	Возврат КнопкаФормы;
	
КонецФункции

Функция Ассистент() Экспорт
	
	Возврат ОбсужденияБЗК.Ассистент(
		НСтр("ru = '1С:Кабинет сотрудника';
			|en = '1C:Employee Account'"),
		БиблиотекаКартинок.СервисКабинетСотрудника48);
	
КонецФункции

Процедура УведомитьОНеобходимостиПодписанияФайловДокументовКЭДО(КоличествоПечатныхФорм, КоличествоПечатныхФормНаПодпись, КоличествоПечатныхФормОзнакомиться, КоличествоПросроченных, Пользователь) Экспорт
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат;
	КонецЕсли;
	
	АссистентКЭДО = Ассистент();
	Если Не ЗначениеЗаполнено(АссистентКЭДО) Или Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если КоличествоПечатныхФорм = 0 Тогда
			ОбсужденияБЗК.УдалитьСообщения(АссистентКЭДО, КлючСообщенияОНеобходимостиПодписанияПечатныхФорм(),
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
		Иначе
			ТекстСообщения = "";
			Если КоличествоПечатныхФормНаПодпись > 0 Тогда
				ТекстСообщения = Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Ожидают подписания %1.';
							|en = 'Pending signing %1.'"),
						СтрокаСКоличествомДокументов(КоличествоПечатныхФормНаПодпись)));
			КонецЕсли;
			Если КоличествоПечатныхФормОзнакомиться > 0 Тогда
				ТекстСообщения = Новый ФорматированнаяСтрока(
					?(ЗначениеЗаполнено(ТекстСообщения), Строка(ТекстСообщения) + Символы.ПС, ""),
					СтрШаблон(НСтр("ru = 'Ожидают ознакомления %1.';
									|en = 'Pending %1 review.'"),
						СтрокаСКоличествомДокументов(КоличествоПечатныхФормОзнакомиться)));
			КонецЕсли;
			Если КоличествоПросроченных > 0 Тогда
				ТекстСообщения = Новый ФорматированнаяСтрока(
					ТекстСообщения,
					Символы.ПС,   
					Новый ФорматированнаяСтрока(
						СтрШаблон(
							НСтр("ru = 'В том числе %1 с большим сроком ожидания.';
								|en = 'including %1 with long timeout.'"),
							СтрокаСКоличествомДокументов(КоличествоПросроченных)), , ЦветаСтиля.ПоясняющийОшибкуТекст));
			КонецЕсли;
			
			ОписаниеСообщения = ОбсужденияБЗК.ОписаниеСообщения(
				ТекстСообщения, КлючСообщенияОНеобходимостиПодписанияПечатныхФорм());
				
			Если КоличествоПечатныхФормНаПодпись > 0 и КоличествоПечатныхФормОзнакомиться = 0 Тогда
				ОписаниеСообщения.Действия.Добавить(
					КадровыйЭДОКлиентСервер.ИмяДействияУведомленияОзнакомитьсяИПодписать(),
					НСтр("ru = 'Документы на подпись';
						|en = 'Documents to sign'"));
			Иначе
				ОписаниеСообщения.Действия.Добавить(
					КадровыйЭДОКлиентСервер.ИмяДействияУведомленияОзнакомитьсяСОтказомПодписать(),
					НСтр("ru = 'Документы требующие внимания';
						|en = 'Documents requiring attention'"));
			КонецЕсли;
			
			ОбсужденияБЗК.ОбновитьУведомление(АссистентКЭДО, ОписаниеСообщения,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
			
		КонецЕсли;
	Исключение
		
		ЗаписьЖурналаРегистрации(
			КадровыйЭДО.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Отправка уведомлений';
					|en = 'Send notifications'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПодписанныеОбъектыПользователей(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Отбор.ПодписанныйОбъект.Использование Тогда
		РегистрыСведений.ПодписанныеОбъектыПользователей.ОбновитьЗаписиПоОбъектам(
			Источник.Отбор.ПодписанныйОбъект.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРасписаниеЗаданияОбработкиДокументовПечатныхФорм(ПараметрыОбновления = Неопределено) Экспорт
	
	НеобходимоИспользовать = ИспользуютсяЭлектронныеДокументы(Истина);
	МетаданныеЗадания = Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм;
	
	УстановитьПривилегированныйРежим(Истина);
	Если НеобходимоИспользовать Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;
		Расписание.ПериодПовтораВТечениеДня = 1800;
		ОбщегоНазначенияБЗК.ВключитьПредопределенноеЗадание(МетаданныеЗадания, Расписание);
	Иначе
		ОбщегоНазначенияБЗК.ОтключитьПредопределенноеЗадание(МетаданныеЗадания);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьРасписаниеОбработкиДокументовВКабинетахСотрудников(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда
		ОбновитьРасписаниеЗаданияОбработкиДокументовПечатныхФорм();
		ОбновитьРасписаниеЗаданияОбновленияСостоянийДокументовКЭДО();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРасписаниеОбработкиДокументовИнтеграцииСРаботаВРоссии(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРасписаниеЗаданияОбработкиДокументовПечатныхФорм();
	ОбновитьРасписаниеЗаданияОбновленияСостоянийДокументовКЭДО();
	
КонецПроцедуры

#Область РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриСозданииФормыСпискаФайлов.
Процедура ПриСозданииФормыСпискаФайлов(Форма) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоОбъектСПечатнымиФормами(Форма.ВладелецФайла) Тогда
		Возврат
	КонецЕсли;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(Форма.Список.ТекстЗапроса);
		Источники = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники;
		
		ИсточникДокументКадровогоЭДО = Источники.Добавить("Документ.ДокументКадровогоЭДО", "ДокументКадровогоЭДО");
		СоединениеСДокументКадровогоЭДО = Источники[0].Соединения.Добавить(
			ИсточникДокументКадровогоЭДО, "Файлы.Ссылка = ДокументКадровогоЭДО.ЭлектронныйДокумент");
		
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			"ЕСТЬNULL(ДокументКадровогоЭДО.СодержимоеДокумента, ЗНАЧЕНИЕ(Перечисление.СодержимоеДокументов.НеСодержитЗарплаты)) В (&СодержимоеДокументов)");
		
		Форма.Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.Список, "СодержимоеДокументов", КадровыйЭДО.ДоступныеСодержанияДокументовПользователя(Пользователи.ТекущийПользователь()), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПроверитьВозможностьСохраненияИзмененийДокументаСПечатнымиФормами(ОбъектСПечатнымиФормами, РольСПравомУтверждения, Отказ) Экспорт
	
	// Объекты с ошибками не проверяются
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Новые объекты не проверяются
	Если ОбъектСПечатнымиФормами.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	// Объекты без печатных форм не проверяются
	Если Не ЭтоОбъектСПечатнымиФормами(ОбъектСПечатнымиФормами.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПечатныхФорм = ИдентификаторыПечатныхФормОбъекта(ОбъектСПечатнымиФормами.Ссылка);
	Если Не ЗначениеЗаполнено(ИдентификаторыПечатныхФорм) Тогда
		Возврат;
	КонецЕсли;
	
	Если КадровыеДанныеОбъектаЗаблокированы(ОбъектСПечатнымиФормами.Ссылка, ИдентификаторыПечатныхФорм) Тогда
		Возврат;
	КонецЕсли;
	
	// Если нет прав на добавление объектов - значит нельзя испортить что-то, вошедшее
	// в печатные формы "кадровиков"
	МетаданныеОбъекта = ОбъектСПечатнымиФормами.Метаданные();
	Если Не ПравоДоступа("Добавление", МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ПрежниеДанныеОбъекта = ОбъектСПечатнымиФормами.Ссылка.ПолучитьОбъект();
	
	// Проверка измененности реквизитов шапки
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если Не ПравоДоступа("Редактирование", Реквизит, РольСПравомУтверждения)
			И ПравоДоступа("Редактирование", Реквизит) Тогда
			
			Если ПрежниеДанныеОбъекта[Реквизит.Имя] <> ОбъектСПечатнымиФормами[Реквизит.Имя] Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		
		// Проверка измененности реквизитов табличных частей
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			
			Если ПравоДоступа("Редактирование", ТабличнаяЧасть) Тогда
				
				ИменаРеквизитов = Новый Массив;
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					
					Если Не ПравоДоступа("Редактирование", Реквизит, РольСПравомУтверждения)
						И ПравоДоступа("Редактирование", Реквизит) Тогда
						
						ИменаРеквизитов.Добавить(Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ИменаРеквизитов) Тогда
					
					Если Не ОбщегоНазначения.КоллекцииИдентичны(ПрежниеДанныеОбъекта[ТабличнаяЧасть.Имя],
						ОбъектСПечатнымиФормами[ТабличнаяЧасть.Имя], СтрСоединить(ИменаРеквизитов, ",")) Тогда
						
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Запись невозможна. Изменены данные, содержащиеся в подписанном электронном документе.';
				|en = 'Cannot save. The data contained in the signed electronic document is changed.'"),
			ОбъектСПечатнымиФормами.Ссылка, , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЭлектронныйДокумент(ПрисоединенныйФайл) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ПрисоединенныйФайл);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область РезультатыПубликацииДокументовКЭДО

Процедура ЗарегистрироватьПубликациюДокументаКЭДО(ДокументКЭДО, ДатаПубликации, Замещать = Ложь, ОтключитьБизнесЛогику = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.РезультатыПубликацииДокументовКЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументКЭДО);
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = ДокументКЭДО;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если Замещать Или Не ЗначениеЗаполнено(Запись.ДатаПубликации) Тогда
		Запись.ДатаПубликации = ДатаПубликации;
		Если ОтключитьБизнесЛогику Тогда
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗарегистрироватьУдалениеПубликацииДокументаКЭДО(ДокументКЭДО, ДатаУдаления) Экспорт
	
	НаборЗаписей = РегистрыСведений.РезультатыПубликацииДокументовКЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументКЭДО);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Запись = НаборЗаписей[0];
		Запись.ДатаУдаления = ДатаУдаления;
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ИдентификаторГруппыПроверокВеденияУчетаБЗК = ЗарплатаКадры.ИдентификаторГруппыПроверокВеденияУчетаБЗК();
	
	ГруппаПроверокКонтрольВеденияУчетаКадровыйЭДО = ГруппыПроверок.Добавить();
	ГруппаПроверокКонтрольВеденияУчетаКадровыйЭДО.Наименование		= НСтр("ru = 'Кадровый ЭДО';
																			|en = 'HR EDI'");
	ГруппаПроверокКонтрольВеденияУчетаКадровыйЭДО.Идентификатор		= ИдентификаторГруппыПроверокКонтрольВеденияУчетаКадровыйЭДО();
	Если ИдентификаторГруппыПроверокВеденияУчетаБЗК <> Неопределено Тогда
		ГруппаПроверокКонтрольВеденияУчетаКадровыйЭДО.ИдентификаторГруппы = ИдентификаторГруппыПроверокВеденияУчетаБЗК;
	КонецЕсли;
	ГруппаПроверокКонтрольВеденияУчетаКадровыйЭДО.КонтекстПроверокВеденияУчета	= ГруппаПроверокКонтрольВеденияУчетаКадровыйЭДО.Идентификатор;
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Соответствие требованиям приказа Минтруда России № 578н от 20 сентября 2022 г.';
															|en = 'Compliance with the requirements of Order of the Ministry of Labor of Russia No. 578n dated September 20, 2022.'");
	ГруппаПроверок.Идентификатор				= ИдентификаторГруппыПроверокСоответствияТребованиямПриказа578();
	ГруппаПроверок.ИдентификаторГруппы			= ГруппаПроверокКонтрольВеденияУчетаКадровыйЭДО.Идентификатор;
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Документ является печатной формой, сохраненной в формате PDF/A-1A';
													|en = 'The document is a print form saved in the PDF/A-1A format'");
	Проверка.Причины						= НСтр("ru = 'Документ создавался в более ранних версиях конфигурации или Не является печатной формой.';
													|en = 'The document was created in earlier configuration versions or is not a print form.'");
	Проверка.Рекомендация					= НСтр("ru = 'Перевыпустить печатную форму или подготовить печатную форму для сохранения документа КЭДО.';
													|en = 'Reissue the print form or prepare the print form to save the HR EDI document.'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаФорматаОсновногоДокумента";
	Проверка.ОбработчикПроверки				= "КадровыйЭДО.ПроверитьФорматОсновногоДокумента";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	Проверка.ДатаНачалаПроверки				= '20230301';
	Проверка.ЛимитПроблем					= 1000;
	Проверка.ПоддерживаетВыборочнуюПроверку = Истина;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'По документу завершены все запланированные задания пользователей';
													|en = 'For the document, all scheduled jobs of the user are completed'");
	Проверка.Причины						= НСтр("ru = 'По документу есть запланированные задания, которые еще не выполнены ответственными.';
													|en = 'For the document, there are scheduled jobs that are not completed by persons responsible.'");
	Проверка.Рекомендация					= НСтр("ru = 'Изменить ответственных запланированных заданий или отменить задания которые не нужны.';
													|en = 'Change persons responsible for scheduled jobs or cancel unnecessary jobs.'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаНеЗавершенныхИнтерактивныхЗапланированныхЗаданий";
	Проверка.ОбработчикПроверки				= "КадровыйЭДО.ПроверитьЗавершениеИнтерактивныхЗапланированныхЗаданий";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	Проверка.ДатаНачалаПроверки				= '20230301';
	Проверка.ЛимитПроблем					= 1000;
	Проверка.ПоддерживаетВыборочнуюПроверку = Истина;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'С документом ознакомились все сотрудники';
													|en = 'All the employees have read the document'");
	Проверка.Причины						= НСтр("ru = 'Не все сотрудники, указанные в документе ознакомились с его содержимым.';
													|en = 'Some of the employees specified in the document have not read it.'");
	Проверка.Рекомендация					= НСтр("ru = 'Напомнить сотрудникам о необходимости ознакомления.';
													|en = 'Remind the employees to read the document.'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЧтоВсеСотрудникиОзнакомлены";
	Проверка.ОбработчикПроверки				= "КадровыйЭДО.ПроверитьЧтоВсеСотрудникиОзнакомлены";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	Проверка.ДатаНачалаПроверки				= '20230301';
	Проверка.ЛимитПроблем					= 1000;
	Проверка.ПоддерживаетВыборочнуюПроверку = Истина;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Все подписи документа прошли проверку';
													|en = 'All document signatures are verified'");
	Проверка.Причины						= НСтр("ru = 'Есть подписи которые не проходят проверку.';
													|en = 'There are signatures that are not verified.'");
	Проверка.Рекомендация					= НСтр("ru = 'Обновить сертификаты, установить новые, подписать документы заново.';
													|en = 'Update the certificates, install new ones, and sign the documents again.'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаТогоЧтоВсеПодписиПрошлиПроверку";
	Проверка.ОбработчикПроверки				= "КадровыйЭДО.ПроверитьЧтоВсеПодписиПрошлиПроверку";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	Проверка.ДатаНачалаПроверки				= '20230301';
	Проверка.ЛимитПроблем					= 1000;
	Проверка.ПоддерживаетВыборочнуюПроверку = Истина;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Все подписи документа проходили проверку';
													|en = 'All document signatures were verified'");
	Проверка.Причины						= НСтр("ru = 'Есть подписи которые не проходили проверку.';
													|en = 'There are signatures that were not verified.'");
	Проверка.Рекомендация					= НСтр("ru = 'Выполнить проверку подписей.';
													|en = 'Verify the signatures.'");
	Проверка.Идентификатор					= ИдентификаторПроверкиТогоЧтоВсеПодписиПроходилиПроверку();
	Проверка.ОбработчикПроверки				= "КадровыйЭДО.ПроверитьЧтоВсеПодписиПроходилиПроверку";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	Проверка.ДатаНачалаПроверки				= '20230301';
	Проверка.ЛимитПроблем					= 1000;
	Проверка.ПоддерживаетВыборочнуюПроверку = Истина;
	Проверка.Отключена = Истина;
	
КонецПроцедуры

Функция ИдентификаторГруппыПроверокКонтрольВеденияУчетаКадровыйЭДО()
	
	Возврат "КонтрольВеденияУчетаКадровыйЭДО";
	
КонецФункции

Функция ИдентификаторГруппыПроверокСоответствияТребованиямПриказа578() Экспорт
	
	Возврат ИдентификаторГруппыПроверокКонтрольВеденияУчетаКадровыйЭДО()
		+ ".ПроверкаСоответствияТребованиямПриказаМинтруда578";
	
КонецФункции

Функция ИдентификаторПроверкиТогоЧтоВсеПодписиПроходилиПроверку() Экспорт
	Возврат ИдентификаторГруппыПроверокСоответствияТребованиямПриказа578()
		+ ".ПроверкаТогоЧтоВсеПодписиПроходилиПроверку";
КонецФункции

#КонецОбласти

Функция ТипЗначенияШаблонаДокументов(ТипРеквизита) Экспорт
	ТипЗначения = Перечисления.ТипыРеквизитовШаблоновДокументов.Строка;
	Если ТипРеквизита = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки()) Тогда
		ТипЗначения = Перечисления.ТипыРеквизитовШаблоновДокументов.Текст;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)) Тогда
		ТипЗначения = Перечисления.ТипыРеквизитовШаблоновДокументов.ЦелоеЧисло;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)) Тогда
		ТипЗначения = Перечисления.ТипыРеквизитовШаблоновДокументов.Число2ЗнакаПослеЗапятой;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		ТипЗначения = Перечисления.ТипыРеквизитовШаблоновДокументов.Дата;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("СтандартныйПериод") Тогда
		ТипЗначения = Перечисления.ТипыРеквизитовШаблоновДокументов.Период;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Булево") Тогда
		ТипЗначения = Перечисления.ТипыРеквизитовШаблоновДокументов.Булево;
	КонецЕсли;
	Возврат ТипЗначения;
КонецФункции

Процедура ВключитьИспользованиеШаблоновДокументов() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьШаблоныДокументов.Установить(Истина);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ДокументКадровогоЭДОФормаСпискаПриСозданииНаСервере(УправляемаяФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	КадровыйЭДОВнутренний.ДокументКадровогоЭДОФормаСпискаПриСозданииНаСервере(УправляемаяФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриИзмененииВерсииDTO() Экспорт
	
	Справочники.ШаблоныДокументов.ОбновитьШаблоны();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючСообщенияОНеобходимостиПодписанияПечатныхФорм()
	Возврат "ПодписаниеПечатныхФорм";
КонецФункции

Процедура ЗаполнитьОписанияФайловПечатныхФормПоОбъектам(ОписанияФайлов, Владельцы, ИдентификаторыПечатныхФорм, СписокСотрудников = Неопределено)
	
	Выборка = ВыборкаДанныхПечатныхФорм(Владельцы, ИдентификаторыПечатныхФорм, , СписокСотрудников);
	Пока Выборка.СледующийПоЗначениюПоля("Владелец") Цикл
		
		ИдентификаторыФайловВладельца = ОписанияФайлов.ПечатныеФормыОбъектов.Получить(Выборка.Владелец);
		Если ИдентификаторыФайловВладельца = Неопределено Тогда
			ИдентификаторыФайловВладельца = Новый Соответствие;
			ОписанияФайлов.ПечатныеФормыОбъектов.Вставить(
				Выборка.Владелец, ИдентификаторыФайловВладельца);
		КонецЕсли;
		
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторПечатнойФормы") Цикл
			
			ОригиналыПечатнойФормы = ОписанияФайлов.ОригиналыПечатныхФорм.Получить(Выборка.ИдентификаторПечатнойФормы);
			Если ОригиналыПечатнойФормы = Неопределено Тогда
				ОригиналыПечатнойФормы = Новый Структура;
				ОригиналыПечатнойФормы.Вставить("Наименование", Выборка.Название);
				ОригиналыПечатнойФормы.Вставить("Оригиналы", Новый Соответствие);
			КонецЕсли;
			
			СписокФайлов = Новый Массив;
			ИдентификаторыФайловВладельца.Вставить(Выборка.ИдентификаторПечатнойФормы, СписокФайлов);
			
			Пока Выборка.Следующий() Цикл
				
				ОригиналыПечатнойФормы.Оригиналы.Вставить(Выборка.ФайлОбъекта,
					ДанныеПечатнойФормыПоДаннымФайлаПечатнойФормы(Выборка));
				
				СписокФайлов.Добавить(Выборка.ФайлОбъекта);
				
				Если СписокСотрудников <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СписокСотрудников, Выборка.Сотрудник);
				КонецЕсли;
				
			КонецЦикла;
			
			ОписанияФайлов.ОригиналыПечатныхФорм.Вставить(Выборка.ИдентификаторПечатнойФормы, ОригиналыПечатнойФормы);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаДанныхПечатныхФорм(Владельцы, ИдентификаторыПечатныхФорм = Неопределено, ТолькоПечатныеФормыОбъектов = Ложь, СписокСотрудников = Неопределено, ВТомЧислеПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТипыОбъектов = ТипыОбъектов(Владельцы, ИдентификаторыПечатныхФорм, ТолькоПечатныеФормыОбъектов);
	
	СчетчикПараметров = 0;
	ТекстыЗапросов = Новый Массив;
	Для Каждого ТипВладельца Из ТипыОбъектов Цикл
		
		Если Не ЭтоТипОбъектаСПечатнымиФормами(ТипВладельца.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ТипВладельца.Ключ);
		ИмяПараметра = "ВладельцыФайлов_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
		Запрос.УстановитьПараметр(ИмяПараметра, ТипВладельца.Значение);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПрисоединенныеФайлы.Ссылка КАК ФайлОбъекта,
			|	ПрисоединенныеФайлы.ВладелецФайла КАК Владелец
			|ПОМЕСТИТЬ ВТДанныеПечатныхФорм
			|ИЗ
			|	Справочник.УвольнениеПрисоединенныеФайлы КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ВладелецФайла В(&ВладельцыФайлов)
			|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
		
		Если ВТомЧислеПомеченныеНаУдаление Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ПрисоединенныеФайлы.ПометкаУдаления", "");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.УвольнениеПрисоединенныеФайлы", "Справочник." + ИмяСправочника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВладельцыФайлов", "&" + ИмяПараметра);
		
		Если ТекстыЗапросов.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТДанныеПечатныхФорм", "");
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		СчетчикПараметров = СчетчикПараметров + 1;
		
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, "
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ФайлОбъекта,
			|	НЕОПРЕДЕЛЕНО КАК Владелец
			|ПОМЕСТИТЬ ВТДанныеПечатныхФорм";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодписанныеФормы.ИдентификаторПечатнойФормы КАК ИдентификаторПечатнойФормы,
		|	ДанныеПечатныхФорм.ФайлОбъекта КАК ФайлОбъекта,
		|	ДанныеПечатныхФорм.Владелец КАК Владелец,
		|	ПодписанныеФормы.Оригинал КАК Оригинал,
		|	ПодписанныеФормы.Название КАК Название,
		|	ПодписанныеФормы.Организация КАК Организация,
		|	ПодписанныеФормы.Сотрудник КАК Сотрудник,
		|	ПодписанныеФормы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПодписанныеФормы.Номер КАК Номер,
		|	ПодписанныеФормы.Дата КАК Дата
		|ИЗ
		|	ВТДанныеПечатныхФорм КАК ДанныеПечатныхФорм
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписанныеПечатныеФормы КАК ПодписанныеФормы
		|		ПО ДанныеПечатныхФорм.ФайлОбъекта = ПодписанныеФормы.ПрисоединенныйФайл
		|ГДЕ
		|	&ОтборПоИдентификаторуПечатнойФормы
		|	И &ОтборПоСпискуСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	Владелец,
		|	ИдентификаторПечатнойФормы,
		|	ФайлОбъекта";
	
	Если ИдентификаторыПечатныхФорм = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоИдентификаторуПечатнойФормы", "(ИСТИНА)");
	Иначе
		Запрос.УстановитьПараметр("ИдентификаторыПечатныхФорм", ИдентификаторыПечатныхФорм);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоИдентификаторуПечатнойФормы",
			"ПодписанныеФормы.ИдентификаторПечатнойФормы В (&ИдентификаторыПечатныхФорм)");
	КонецЕсли;
	
	Если СписокСотрудников = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпискуСотрудников", "(ИСТИНА)");
	Иначе
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпискуСотрудников",
			"ПодписанныеФормы.Сотрудник В (&СписокСотрудников)");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ОбъектЗаблокирован(СсылкаНаОбъект, ПометкаУдаления)
	
	ИдентификаторыПечатныхФорм = ИдентификаторыПечатныхФормОбъекта(СсылкаНаОбъект);
	Возврат ОбъектЗаблокированПоИдентификаторамПечатныхФорм(СсылкаНаОбъект, ИдентификаторыПечатныхФорм, ПометкаУдаления);
	
КонецФункции

Функция ОбъектЗаблокированПоИдентификаторамПечатныхФорм(СсылкаНаОбъект, ИдентификаторыПечатныхФорм, ПометкаУдаления = Ложь)
	
	БлокироватьФорму = Ложь;
	ПроверкаБлокировкиСУсловиемВыполнялась = Ложь;
	Для Каждого ИдентификаторПечатнойФормы Из ИдентификаторыПечатныхФорм Цикл
		
		Если ПометкаУдаления
			Или Не БлокировкаПечатнойФормыСУсловием(ИдентификаторПечатнойФормы) Тогда
			
			БлокироватьФорму = Истина;
			Прервать;
		КонецЕсли;
		
		Если Не ПроверкаБлокировкиСУсловиемВыполнялась Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект);
			Если МенеджерОбъекта.ОбъектЗаблокирован(СсылкаНаОбъект) Тогда
				БлокироватьФорму = Истина;
				Прервать;
			КонецЕсли;
			ПроверкаБлокировкиСУсловиемВыполнялась = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БлокироватьФорму;
	
КонецФункции

Функция КадровыеДанныеОбъектаЗаблокированы(СсылкаНаОбъект, ИдентификаторыПечатныхФорм = Неопределено)
	
	КадровыеДанныеЗаблокированы = Ложь;
	
	Если ИдентификаторыПечатныхФорм = Неопределено Тогда
		ИдентификаторыПечатныхФорм = ИдентификаторыПечатныхФормОбъекта(СсылкаНаОбъект);
	КонецЕсли;
	
	Для Каждого ИдентификаторПечатнойФормы Из ИдентификаторыПечатныхФорм Цикл
		Если Не БлокировкаПечатнойФормыСУсловием(ИдентификаторПечатнойФормы) Тогда
			КадровыеДанныеЗаблокированы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КадровыеДанныеЗаблокированы;
	
КонецФункции

Функция ИдентификаторыПечатныхФормОбъекта(СсылкаНаОбъект)
	
	ИдентификаторыПечатныхФорм = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодписанныеФормы.ИдентификаторПечатнойФормы КАК ИдентификаторПечатнойФормы
		|ИЗ
		|	Справочник.УвольнениеПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписанныеПечатныеФормы КАК ПодписанныеФормы
		|		ПО ПрисоединенныеФайлы.Ссылка = ПодписанныеФормы.ПрисоединенныйФайл
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ТипЗнч(СсылкаНаОбъект));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"Справочник.УвольнениеПрисоединенныеФайлы", "Справочник." + ИмяСправочника);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ИдентификаторыПечатныхФорм.Добавить(Выборка.ИдентификаторПечатнойФормы);
	КонецЦикла;
	
	Возврат ИдентификаторыПечатныхФорм;
	
КонецФункции

Процедура ПроинициализироватьФормуОбъекта(УправляемаяФорма)
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("ИдентификаторыФайловСЭЦП", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы("РеквизитыИдентификаторов", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	СуществующиеРеквизиты = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(УправляемаяФорма, СуществующиеРеквизиты);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(УправляемаяФорма, ДобавляемыеРеквизиты, СуществующиеРеквизиты);
	
КонецПроцедуры

Процедура ПриПомещенииДанныхВРеквизиты(УправляемаяФорма, СсылкаНаОбъект, ОбъектФормы)
	
	ОбновитьДанныеПечатныхФормСЭЦПВФормеОбъекта(УправляемаяФорма);
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, ОбъектФормы, Истина);
	
КонецПроцедуры

Функция ОбработчикОткрытияПодписанныхФайлов()
	Возврат "КадровыйЭДОКлиент.ВыполнитьКомандуОткрытияПодписанныхФайлов";
КонецФункции

Функция ТипыОбъектов(Владельцы, ИдентификаторыПечатныхФорм, ТолькоПечатныеФормыОбъектов)
	
	ОбъектыПоТипам = ОбщегоНазначенияБЗК.ОбъектыПоТипам(Владельцы);
	
	Если Не ТолькоПечатныеФормыОбъектов Тогда
		
		СторонниеПечатныеФормы = Новый Массив;
		Для Каждого ТипОбъектаСоСтороннимиПечатнымиФормами Из ТипыОбъектовСоСтороннимиПечатнымиФормами() Цикл
			
			ОбъектыТипа = ОбъектыПоТипам.Получить(ТипОбъектаСоСтороннимиПечатнымиФормами);
			Если ОбъектыТипа <> Неопределено Тогда
				
				МенеджерОбъекта = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипОбъектаСоСтороннимиПечатнымиФормами);
				ОбъектыСтороннихПечатныхФорм = МенеджерОбъекта.ОбъектыСтороннихПечатныхФорм(ОбъектыТипа, ИдентификаторыПечатныхФорм);
				
				Если ОбъектыСтороннихПечатныхФорм.Количество() > 0 Тогда
					
					Для Каждого ОписаниеОбъектов Из ОбъектыСтороннихПечатныхФорм Цикл
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СторонниеПечатныеФормы, ОписаниеОбъектов.Значение);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СторонниеПечатныеФормы.Количество() > 0 Тогда
			
			ОбъектыСтороннихФормПоТипам = ОбщегоНазначенияБЗК.ОбъектыПоТипам(СторонниеПечатныеФормы);
			Для Каждого ОписаниеОбъектовТипа Из ОбъектыСтороннихФормПоТипам Цикл
				
				ОбъектыТипа = ОбъектыПоТипам.Получить(ОписаниеОбъектовТипа.Ключ);
				Если ОбъектыТипа = Неопределено Тогда
					ОбъектыПоТипам.Вставить(ОписаниеОбъектовТипа.Ключ, ОписаниеОбъектовТипа.Значение);
				Иначе
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыТипа, ОписаниеОбъектовТипа.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектыПоТипам;
	
КонецФункции

Функция ТипыОбъектовСоСтороннимиПечатнымиФормами()
	
	Возврат КадровыйЭДОВнутренний.ТипыОбъектовСоСтороннимиПечатнымиФормами();
	
КонецФункции

Функция ОбновитьДанныеПечатныхФормСЭЦПВФормеОбъекта(УправляемаяФорма)
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СсылкаНаОбъектФормы = УправляемаяФорма.Объект.Ссылка;
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Структура = Новый Структура("ИдентификаторыФайловСЭЦП,РеквизитыИдентификаторов", Null, Null);
	ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
	Если Структура.ИдентификаторыФайловСЭЦП = Null Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторыФайлов = ФайлыПечатныхФормПоОбъектам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъектФормы), , Истина)[СсылкаНаОбъектФормы];
	
	Если ИдентификаторыФайлов = Неопределено Тогда
		
		Если УправляемаяФорма.ИдентификаторыФайловСЭЦП <> Неопределено Тогда
			УправляемаяФорма.ИдентификаторыФайловСЭЦП = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		ИдентификаторыФайловСЭЦП = ИспользуемыеИдентификаторы(ИдентификаторыФайлов);
		
		ИдентификаторыКоманд = Новый Соответствие;
		Для Каждого ОписаниеИдентификатора Из ИдентификаторыФайловСЭЦП Цикл
			ИдентификаторКоманды = Структура.РеквизитыИдентификаторов.Получить(ОписаниеИдентификатора.Ключ);
			Если ИдентификаторКоманды <> Неопределено Тогда
				ИдентификаторыКоманд.Вставить(ИдентификаторКоманды, ОписаниеИдентификатора.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если УправляемаяФорма.ИдентификаторыФайловСЭЦП = Неопределено
			Или Не ОбщегоНазначения.КоллекцииИдентичны(УправляемаяФорма.ИдентификаторыФайловСЭЦП, ИдентификаторыКоманд) Тогда
			
			УправляемаяФорма.ИдентификаторыФайловСЭЦП = Новый ФиксированноеСоответствие(ИдентификаторыКоманд);
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользуемыеИдентификаторы(ОписанияФайловОбъекта)
	
	ЗначенияИдентификаторов = Новый Соответствие;
	Для Каждого ОписаниеФормы Из ОписанияФайловОбъекта Цикл
		ЗначенияИдентификаторов.Вставить(ОписаниеФормы.Ключ, Истина);
	КонецЦикла;
	
	Возврат ЗначенияИдентификаторов;
	
КонецФункции

Функция ПараметрыПисьма(ДанныеПолучателя, ДанныеФайловПечатныхФорм, ИдентификаторХранилища)
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Истина);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Истина);
	
	ПолучателиСообщения = Новый Массив;
	ОписаниеПолучателя = Новый Структура;
	ОписаниеПолучателя.Вставить("Представление", ДанныеПолучателя.ФизическоеЛицо);
	ОписаниеПолучателя.Вставить("Адрес", ДанныеПолучателя.ЭлектронныйАдрес);
	ПолучателиСообщения.Добавить(ОписаниеПолучателя);
	
	ПараметрыПисьма.Вставить("Кому", ПолучателиСообщения);
	
	СписокНазваний = Новый Массив;
	ИменаФайлов = Новый Массив;
	Вложения = Новый Массив;
	
	Если ТипЗнч(ДанныеФайловПечатныхФорм) = Тип("ТаблицаЗначений") Тогда
		ОписаниеФайлов = ДанныеФайловПечатныхФорм.Скопировать(Новый Структура("ФизическоеЛицо", ДанныеПолучателя.ФизическоеЛицо));
	Иначе
		ОписаниеФайлов = ДанныеФайловПечатныхФорм.Выгрузить(Новый Структура("ФизическоеЛицо", ДанныеПолучателя.ФизическоеЛицо));
	КонецЕсли;
	
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		Если СписокНазваний.Найти(ОписаниеФайла.Название) = Неопределено Тогда
			СписокНазваний.Добавить(ОписаниеФайла.Название);
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлыДляВывода = Новый Массив;
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		Если ЗначениеЗаполнено(ОписаниеФайла.ФайлОбъекта) Тогда
			ФайлыДляВывода.Добавить(ОписаниеФайла.ФайлОбъекта);
		Иначе
			ФайлыДляВывода.Добавить(ОписаниеФайла.ОписаниеПечатнойФормы);
		КонецЕсли;
		
	КонецЦикла;
	ВыводимыеФайлы = КадровыйЭДОВызовСервера.ВыводимыеФайлыПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища);
	
	Для Каждого ОписаниеФайла Из ВыводимыеФайлы Цикл
		
		ИменаФайлов.Добавить(ОписаниеФайла.ИмяФайлаСРасширением);
		
		Вложение = Новый Структура;
		Вложение.Вставить("Представление", ОписаниеФайла.ИмяФайлаСРасширением);
		Вложение.Вставить("АдресВоВременномХранилище", ОписаниеФайла.АдресВоВременномХранилище);
		
		Вложения.Добавить(Вложение);
		
	КонецЦикла;
	
	ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Документы';
											|en = 'Documents'") + ": " + СтрСоединить(СписокНазваний, "; "));
	
	ПараметрыПисьма.Вставить("Тело",
		СтрокаСЧислом(
			НСтр("ru = ';Приложен %1 файл;;Приложено %1 файла;Приложено %1 файлов;Приложены файлы';
				|en = ';Attached %1 file;; Attached %1 files; Attached %1 files; Attached files'"),
			Вложения.Количество(), ВидЧисловогоЗначения.Количественное));
	
	ПараметрыПисьма.Тело = ПараметрыПисьма.Тело + ":" + Символы.ПС + Символы.Таб
		+ СтрСоединить(ИменаФайлов, ";" + Символы.ПС + Символы.Таб);
	
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Уточняет коллекцию дополнительных параметров команды печати комплекта документов,
// дополнительными параметрами команд печати отдельных документов.
//
// Параметры:
//  Команда       - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура УстановитьПараметрыКомандПечатиКомплектаДокументов(Команда, КомандыПечати)
	
	Если ТипЗнч(Команда.Идентификатор) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Команда.Идентификатор, ", ", Ложь);
	Иначе
		Идентификаторы = Команда.Идентификатор;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ИдентификаторПечатнойФормы = Идентификатор;
		НайденныеСтроки = КомандыПечати.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПечатнойФормы));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИдентификаторПечатнойФормы = КадровыйЭДОКлиентСервер.ТолькоИдентификаторПечатнойФормы(ИдентификаторПечатнойФормы);
			НайденныеСтроки = КомандыПечати.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПечатнойФормы));
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если Не Команда.ДополнительныеПараметры.Свойство("РеквизитыДетализацииПакета") Тогда
				Команда.ДополнительныеПараметры.Вставить("РеквизитыДетализацииПакета", Новый Соответствие);
			КонецЕсли;
			
			Если НайденныеСтроки[0].ДополнительныеПараметры.Свойство("РеквизитыДетализации") Тогда
				Команда.ДополнительныеПараметры.РеквизитыДетализацииПакета.Вставить(
					ИдентификаторПечатнойФормы, НайденныеСтроки[0].ДополнительныеПараметры.РеквизитыДетализации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыИдентификаторовПоПараметрам(ПараметрыПодключаемыхКоманд, ПоляСписка = Неопределено)
	
	РеквизитыИдентификаторов = Новый Соответствие;
	
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Для Каждого Подменю Из ПараметрыПодключаемыхКоманд.ПодменюСУсловиямиВидимости Цикл
		
		Для Каждого ОписаниеКоманды Из Подменю.КомандыСУсловиямиВидимости Цикл
			
			Для Каждого Условие Из ОписаниеКоманды.УсловияВидимости Цикл
				
				ИмяРеквизита = Условие.Реквизит;
				Если ПоляСписка <> Неопределено Тогда
					Если ПоляСписка.Найти(ИмяРеквизита) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если Не СтрНачинаетсяС(ИмяРеквизита, "БЗК_ПечатнаяФорма_") Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТипПараметра Из ОписаниеКоманды.ТипПараметра.Типы() Цикл
					
					Если ОбщегоНазначения.ЭтоСсылка(ТипПараметра) Тогда
						
						ТипыИдентификатора = РеквизитыИдентификаторов.Получить(ИмяРеквизита);
						Если ТипыИдентификатора = Неопределено Тогда
							
							НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(Новый Структура("ИмяВФорме", ОписаниеКоманды.ИмяВФорме));
							Если НайденныеКоманды.Количество() > 0 Тогда
								
								ИдентификаторКоманды = НайденныеКоманды[0].Идентификатор;
								Если ТипЗнч(ИдентификаторКоманды) = Тип("Массив") Тогда
									Если ИдентификаторКоманды.Количество() > 1 Тогда
										Продолжить;
									КонецЕсли;
									ИдентификаторКоманды = ИдентификаторКоманды[0];
								КонецЕсли;
								
								Если РеквизитыИдентификаторов.Получить(ИдентификаторКоманды) = Неопределено Тогда
									
									Если СтрРазделить(ИдентификаторКоманды, ",").Количество() > 1 Тогда
										Продолжить;
									КонецЕсли;
								
									РеквизитыИдентификаторов.Вставить(ИдентификаторКоманды, ИмяРеквизита);
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РеквизитыИдентификаторов;
	
КонецФункции

Функция ИспользуютсяЭлектронныеДокументы(ПоДаннымИБ = Ложь)
	
	Если ПоДаннымИБ Тогда
		
		Используются = Ложь;
		УстановитьПривилегированныйРежим(Истина);
		
		Если ИнтеграцияСРаботаВРоссии.ДоступнаПередачаДокументовНаРаботаВРоссии() Тогда
			Используются = Истина;
		КонецЕсли;
		
		Если Не Используются Тогда
			
			Запись = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.Прочитать();
			Если Запись.ИспользуетсяКадровыйЭДО Тогда
				Используются = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Используются;
		
	КонецЕсли;
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника")
		Или ИнтеграцияСРаботаВРоссии.ДоступнаПередачаДокументовНаРаботаВРоссии();
	
КонецФункции

// Возвращает массив объектов не содержащих файлов печатных форм.
//
// Параметры:
//  МассивОбъектов             - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ИдентификаторПечатнойФормы - Строка, идентификатор команды печати см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ОписанияФайлов             - см. ОписанияФайловПечатныхФорм
// Возвращаемое значение:
//  Массив - Массив из ЛюбаяСсылка - список объектов, для которых необходимо выполнить команду печати
//
Функция ОбъектыНаПечатьПоИдентификаторуПечатнойФормы(МассивОбъектов, ИдентификаторПечатнойФормы, ОписанияФайлов, СписокСотрудников = Неопределено)
	
	НапечатанныеОбъекты = Новый Массив;
	
	ЗаполнитьОписанияФайловПечатныхФормПоОбъектам(ОписанияФайлов, МассивОбъектов,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПечатнойФормы), СписокСотрудников);
	
	Для Каждого ОписаниеФайлов Из ОписанияФайлов.ПечатныеФормыОбъектов Цикл
		Если ОписаниеФайлов.Значение.Получить(ИдентификаторПечатнойФормы) <> Неопределено Тогда
			ИндексСсылки = МассивОбъектов.Найти(ОписаниеФайлов.Ключ);
			Если ИндексСсылки <> Неопределено Тогда
				НапечатанныеОбъекты.Добавить(ОписаниеФайлов.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НапечатанныеОбъекты.Количество() > 0 Тогда
		Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОбъектов, НапечатанныеОбъекты)
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция УдалитьПечатныеФормыОбъекта(Объект)
	
	Результат = 0;
	
	НачатьТранзакцию();
	Попытка
		Документы.ДокументКадровогоЭДО.УдалитьДокументыПечатныхФормОбъекта(Объект);
		УстановитьПривилегированныйРежим(Истина);
		Результат = РегистрыСведений.ПодписанныеПечатныеФормы.УдалитьПечатныеФормыОбъекта(Объект);
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьСертификаты(ПараметрыПечати)
	
	Если Не ПараметрыПечати.Свойство("ПодписиБезСертификатов")
		Или Не ЗначениеЗаполнено(ПараметрыПечати.ПодписиБезСертификатов) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ПодписьБезСертификата Из ПараметрыПечати.ПодписиБезСертификатов Цикл
		
		Если ЗначениеЗаполнено(ПодписьБезСертификата.Отпечаток) Тогда
			
			СохранитьСертификатПодписи(
				ПодписьБезСертификата.ПодписанныйОбъект,
				ПодписьБезСертификата.ПорядковыйНомер,
				ПодписьБезСертификата.Отпечаток,
				ПодписьБезСертификата.Сертификат);
			
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СохранитьСертификатПодписи(ПодписанныйОбъект, ПорядковыйНомер, Отпечаток, АдресСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Отбор.ПорядковыйНомер.Установить(ПорядковыйНомер);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Запись.Отпечаток = Отпечаток;
		Запись.Сертификат = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(АдресСертификата), Новый СжатиеДанных(9));
		НаборЗаписей.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СохранитьПодписьДокументаКЭДО(ДокументКЭДО, ФизическоеЛицо, Отпечаток, ДатаПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = ДокументКЭДО;
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Отпечаток = Отпечаток;
		МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(ИмяСобытия) Экспорт
	Возврат СтрШаблон(
		"%1.%2",
		НСтр("ru = 'Кадровый ЭДО';
			|en = 'HR EDI'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ИмяСобытия);
КонецФункции

Процедура ПечатьДокументовПриСозданииНаСервереВывестиКомандуПодписать(УправляемаяФорма)
	
	КнопкаПодписатьПечатныеФормы = УправляемаяФорма.Элементы.Найти("ПодписатьПечатныеФормы");
	Если КнопкаПодписатьПечатныеФормы <> Неопределено Тогда
		КнопкаПодписатьПечатныеФормы.Видимость = Ложь;
	КонецЕсли;
	
	КомандаФормы = УправляемаяФорма.Команды.Добавить("ПодписатьПечатныеФормы");
	КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Подписать';
									|en = 'Sign'");
	КомандаФормы.Подсказка = НСтр("ru = 'Подписать печатные формы';
									|en = 'Sign print forms'");
	
	КнопкаФормы = РазместитьКомандуНаФормеПечатьДокументов(УправляемаяФорма, КомандаФормы);
	Если КнопкаФормы <> Неопределено Тогда
		КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
		КнопкаФормы.Картинка = БиблиотекаКартинок.ЭлектронноЦифроваяПодпись;
		КнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
		КнопкаФормы.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьДокументовПриСозданииНаСервереВывестиКомандуОтказать(УправляемаяФорма)
	
	КнопкаОтказатьВПодписанииПечатныхФорм = УправляемаяФорма.Элементы.Найти("ОтказатьВПодписанииПечатныхФорм");
	Если КнопкаОтказатьВПодписанииПечатныхФорм <> Неопределено Тогда
		КнопкаОтказатьВПодписанииПечатныхФорм.Видимость = Ложь;
	КонецЕсли;
	
	КомандаФормы = УправляемаяФорма.Команды.Добавить("ОтказатьВПодписанииПечатныхФорм");
	КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Отказать';
									|en = 'Deny'");
	КомандаФормы.Подсказка = НСтр("ru = 'Отказать в подписании печатных форм';
									|en = 'Deny signing print forms'");
	
	КнопкаФормы = РазместитьКомандуНаФормеПечатьДокументов(УправляемаяФорма, КомандаФормы);
	Если КнопкаФормы <> Неопределено Тогда
		КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
		КнопкаФормы.Картинка = БиблиотекаКартинок.СтопБЗК;
		КнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьДокументовПриСозданииНаСервереВывестиКомандуОзнакомлено(УправляемаяФорма)
	
	КнопкаОзнакомленоСКомментариямиКПечатнойФормы = УправляемаяФорма.Элементы.Найти("ОзнакомленоСКомментариямиКПечатнойФорме");
	Если КнопкаОзнакомленоСКомментариямиКПечатнойФормы <> Неопределено Тогда
		КнопкаОзнакомленоСКомментариямиКПечатнойФормы.Видимость = Ложь;
	КонецЕсли;
	
	КомандаФормы = УправляемаяФорма.Команды.Добавить("ОзнакомленоСКомментариямиКПечатнойФорме");
	КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Ознакомлено';
									|en = 'I have read and understood'");
	КомандаФормы.Подсказка = НСтр("ru = 'Ознакомиться с комментариями ответственных лиц';
									|en = 'Review responsible persons'' comments'");
	
	КнопкаФормы = РазместитьКомандуНаФормеПечатьДокументов(УправляемаяФорма, КомандаФормы);
	Если КнопкаФормы <> Неопределено Тогда
		КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
		КнопкаФормы.Картинка = БиблиотекаКартинок.ДанныеПрочитаны;
		КнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
		КнопкаФормы.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеКомандыФормыПечатьДокументов(УправляемаяФорма)
	
	ДоступныеКоманды = Новый Структура("Подписать,Ознакомиться", Ложь, Ложь);
	
	ОписанияФайлов = КадровыйЭДОКлиентСервер.ОписанияФайловПечатныхФормИзПараметровФормы(УправляемаяФорма.Параметры);
	Если ОписанияФайлов <> Неопределено Тогда
		ФайлыПечатныхФорм = Новый Массив;
		Для Каждого ДанныеИдентификаторовПечатныхФорм Из ОписанияФайлов.ПечатныеФормыОбъектов Цикл
			Для Каждого ДанныеИдентификатораПечатнойФормы Из ДанныеИдентификаторовПечатныхФорм.Значение Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыПечатныхФорм, ДанныеИдентификатораПечатнойФормы.Значение);
			КонецЦикла;
		КонецЦикла;
		Если ЗначениеЗаполнено(ФайлыПечатныхФорм) Тогда
			ФайлыНаПодписьПользователя = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыНаПодписьПользователя(Истина, , Истина);
			Если ФайлыНаПодписьПользователя.Количество() >= ФайлыПечатныхФорм.Количество() Тогда
				ДоступныеКоманды.Подписать = Истина;
				Для Каждого ФайлПечатныхФорм Из ФайлыПечатныхФорм Цикл
					СтруктураПоиска = Новый Структура("ФайлОбъекта,Действие", ФайлПечатныхФорм, Перечисления.ДействияСФайламиДокументовКЭДО.Подписать);
					Если ФайлыНаПодписьПользователя.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
						ДоступныеКоманды.Подписать = Ложь;
					КонецЕсли;
					СтруктураПоиска = Новый Структура("ФайлОбъекта,Действие", ФайлПечатныхФорм, Перечисления.ДействияСФайламиДокументовКЭДО.Ознакомиться);
					Если ФайлыНаПодписьПользователя.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
						ДоступныеКоманды.Ознакомиться = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныеКоманды;
	
КонецФункции

Процедура ВывестиИнформациюОДоступностиРедактированияПечатнойФормы(УправляемаяФорма)
	
	Элементы = УправляемаяФорма.Элементы;
	Команды = УправляемаяФорма.Команды;
	
	ПрефиксЭлементов = КадровыйЭДОКлиентСервер.ПрефиксЭлементовОВозможностиРедактирования();
	
	ИмяГруппы = ПрефиксЭлементов + "Группа";
	ИнформацияОДоступностиРедактированияГруппа = Элементы.Найти(ИмяГруппы);
	Если ИнформацияОДоступностиРедактированияГруппа = Неопределено Тогда
		
		// Команда переключение режима редактирования
		НачатьИзменениеПечатнойФормы = Команды.Добавить("НачатьИзменениеПечатнойФормы");
		НачатьИзменениеПечатнойФормы.Действие = "Подключаемый_ВыполнитьКоманду";
		НачатьИзменениеПечатнойФормы.Заголовок = НСтр("ru = 'Редактировать';
														|en = 'Edit'");
		НачатьИзменениеПечатнойФормы.Картинка = БиблиотекаКартинок.ТабличныйДокументТолькоПросмотр;
		НачатьИзменениеПечатнойФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		НовыйЭлемент = Элементы.Вставить(ПрефиксЭлементов + "КомандаРедактирования", Тип("КнопкаФормы"),
			Элементы.Найти("ГруппаРедактированиеПечатнойФормы"), Элементы.Найти("КнопкаРедактирование"));
		НовыйЭлемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = "НачатьИзменениеПечатнойФормы";
		
		НастройкаПечатнойФормы = Неопределено;
		Если Элементы.НастройкиПечатныхФорм.ТекущаяСтрока = Неопределено Тогда
			Если УправляемаяФорма.НастройкиПечатныхФорм.Количество() > 0 Тогда
				НастройкаПечатнойФормы = УправляемаяФорма.НастройкиПечатныхФорм[0];
			КонецЕсли;
		Иначе
			НастройкаПечатнойФормы = УправляемаяФорма.НастройкиПечатныхФорм.НайтиПоИдентификатору(
				Элементы.НастройкиПечатныхФорм.ТекущаяСтрока);
		КонецЕсли;
		
		Если НастройкаПечатнойФормы <> Неопределено Тогда
			Элементы[НастройкаПечатнойФормы.ИмяРеквизита].Редактирование = Ложь;
		КонецЕсли;
		
		// Информация о невозможности редактирования
		ИнформацияОДоступностиРедактированияГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), УправляемаяФорма, Элементы.Найти("ГруппаПечатныеФормы"));
		ИнформацияОДоступностиРедактированияГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИнформацияОДоступностиРедактированияГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ИнформацияОДоступностиРедактированияГруппа.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "КартинкаИнформация", Тип("ДекорацияФормы"), ИнформацияОДоступностиРедактированияГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Информация16АнимированнаяБЗК;
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "Надпись", Тип("ДекорацияФормы"), ИнформацияОДоступностиРедактированияГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = НСтр("ru = 'Подписанные (ожидающие подписания) документы уже нельзя редактировать';
										|en = 'You cannot edit signed (pending signing) documents'");
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		
	КонецЕсли;
	
	КадровыйЭДОКлиентСервер.ОбновитьИнформационнуюНадписьОВозможностиРедактированияПечатнойФормы(УправляемаяФорма);
	
КонецПроцедуры

Функция ОписанияНастроекПечатныхФормПоУмолчанию() Экспорт
	
	ОписанияНастроек = Новый ТаблицаЗначений;
	ОписанияНастроек.Колонки.Добавить("ИдентификаторПечатнойФормы", Новый ОписаниеТипов("Строка"));
	ОписанияНастроек.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ОписанияНастроек.Колонки.Добавить("СодержимоеДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.СодержимоеДокументов"));
	ОписанияНастроек.Колонки.Добавить("БлокировкаСУсловием", Новый ОписаниеТипов("Булево"));
	ОписанияНастроек.Колонки.Добавить("НаСписокСотрудников", Новый ОписаниеТипов("Булево"));
	ОписанияНастроек.Колонки.Добавить("КодДокументаКадровогоМероприятия", Новый ОписаниеТипов("СправочникСсылка.КодыДокументовКадровыхМероприятий"));
	ОписанияНастроек.Колонки.Добавить("ВариантПодписания", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыПодписанияДокументовКЭДО"));
	
	ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
	Возврат ОписанияНастроек;
	
КонецФункции

Процедура ДобавитьНастройкуПечатнойФормы(ОписанияНастроек, ИдентификаторПечатнойФормы, Наименование, СодержимоеДокумента,
	БлокировкаСУсловием = Ложь, НаСписокСотрудников = Ложь, КодДокументаКадровогоМероприятия = Неопределено,
	ВариантПодписания = Неопределено) Экспорт
	
	Настройка = ОписанияНастроек.Добавить();
	Настройка.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
	Настройка.Наименование = Наименование;
	Настройка.СодержимоеДокумента = СодержимоеДокумента;
	Настройка.БлокировкаСУсловием = БлокировкаСУсловием;
	Настройка.НаСписокСотрудников = НаСписокСотрудников;
	Если КодДокументаКадровогоМероприятия <> Неопределено Тогда
		Настройка.КодДокументаКадровогоМероприятия =
			КадровыйЭДОПовтИсп.СсылкаНаКодДокументаКадровогоМероприятия(КодДокументаКадровогоМероприятия);
	КонецЕсли;
	Если ВариантПодписания = Неопределено Тогда
		Настройка.ВариантПодписания = Перечисления.ВариантыПодписанияДокументовКЭДО.Требуется;
	Иначе
		Настройка.ВариантПодписания = ВариантПодписания;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНастройкуПечатнойФормыПоМетаданным(ОписанияНастроек, ОбъектМетаданных, СодержимоеДокумента, БлокировкаСУсловием = Ложь,
	НаСписокСотрудников = Ложь, КодДокументаКадровогоМероприятия = Неопределено, ВариантПодписания = Неопределено) Экспорт
	
	ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		ОбъектМетаданных.Имя,
		ОбъектМетаданных.Синоним,
		СодержимоеДокумента,
		БлокировкаСУсловием,
		НаСписокСотрудников,
		КодДокументаКадровогоМероприятия,
		ВариантПодписания);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек)
	
	КадровыйЭДОВнутренний.ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
КонецПроцедуры

Функция БлокировкаПечатнойФормыСУсловием(ИдентификаторПечатнойФормы)
	
	НастройкиПечатнойФормы = КадровыйЭДОПовтИсп.НастройкиПечатныхФорм().Получить(ИдентификаторПечатнойФормы);
	Если НастройкиПечатнойФормы <> Неопределено Тогда
		Возврат НастройкиПечатнойФормы.БлокировкаСУсловием;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция СтрокаСКоличествомДокументов(КоличествоПечатныхФорм)
	
	Возврат СтрокаСЧислом(";%1 документ;;%1 документа;%1 документов; %1 документа",
		КоличествоПечатныхФорм, ВидЧисловогоЗначения.Количественное, "L=ru");
		
КонецФункции

#Область СогласиеНаПрисоединениеККЭДО

// Возвращает результат запроса по публикуемым физическим лицам по которым отсутствует согласие на присоединение к КЭДО
// Параметры:
//		ТаблицаФизическихЛиц - ТаблицаЗначений - таблица по всем физ.лица и организациям в которых они публикуются:
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо к публикации;
//			Организация - СправочникСсылка.Организации - организация физического лица по которой публикуется.
// Возвращаемое значение:
//		РезультатЗапроса - возвращает всех публикуемых физических лиц и организаций в которых работает физическое лицо без документа СогласиеНаПрисоединениеККЭДО.
Функция РезультатЗапросаТребуетсяСогласиеНаПрисоединениеККЭДО(ТаблицаФизическихЛиц) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаФизическихЛиц.Период КАК Период,
		|	ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаФизическихЛиц.Организация КАК Организация
		|ПОМЕСТИТЬ ВТТаблицаФизическихЛиц
		|ИЗ
		|	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаФизическихЛиц.Период КАК Период,
		|	ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Организации.ГоловнаяОрганизация КАК Организация
		|ПОМЕСТИТЬ ВТТаблицаФизическихЛицГоловныхОрганизаций
		|ИЗ
		|	ВТТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ТаблицаФизическихЛиц.Организация = Организации.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаФизическихЛицГоловныхОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаФизическихЛицГоловныхОрганизаций.Организация КАК Организация,
		|	СогласиеНаПрисоединениеККЭДО.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТАктуальныеСогласия
		|ИЗ
		|	ВТТаблицаФизическихЛицГоловныхОрганизаций КАК ТаблицаФизическихЛицГоловныхОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СогласиеНаПрисоединениеККЭДО КАК СогласиеНаПрисоединениеККЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСогласияНаПрисоединениеККЭДО КАК СостояниеСогласияНаПрисоединениеККЭДО
		|			ПО (СостояниеСогласияНаПрисоединениеККЭДО.Ссылка = СогласиеНаПрисоединениеККЭДО.Ссылка)
		|		ПО ТаблицаФизическихЛицГоловныхОрганизаций.ФизическоеЛицо = СогласиеНаПрисоединениеККЭДО.ФизическоеЛицо
		|			И ТаблицаФизическихЛицГоловныхОрганизаций.Организация = СогласиеНаПрисоединениеККЭДО.Организация
		|			И (СогласиеНаПрисоединениеККЭДО.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	(СогласиеНаПрисоединениеККЭДО.ПометкаУдаления = ЛОЖЬ
		|				И СостояниеСогласияНаПрисоединениеККЭДО.ДатаОкончания ЕСТЬ NULL
		|			ИЛИ СостояниеСогласияНаПрисоединениеККЭДО.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ИЛИ СостояниеСогласияНаПрисоединениеККЭДО.ДатаОкончания > &ТекущаяДата)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаФизическихЛицГоловныхОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаФизическихЛицГоловныхОрганизаций.Организация КАК ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема < ТаблицаФизическихЛицГоловныхОрганизаций.Период
		|			ТОГДА ТаблицаФизическихЛицГоловныхОрганизаций.Период
		|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|	КОНЕЦ КАК Период,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТТаблицаФизическихЛицГоловныхОрганизаций КАК ТаблицаФизическихЛицГоловныхОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеСогласия КАК АктуальныеСогласия
		|		ПО ТаблицаФизическихЛицГоловныхОрганизаций.ФизическоеЛицо = АктуальныеСогласия.ФизическоеЛицо
		|			И ТаблицаФизическихЛицГоловныхОрганизаций.Организация = АктуальныеСогласия.Организация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ТаблицаФизическихЛицГоловныхОрганизаций.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И ТаблицаФизическихЛицГоловныхОрганизаций.Организация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
		|ГДЕ
		|	АктуальныеСогласия.Ссылка ЕСТЬ NULL";
	
	Если ТаблицаФизическихЛиц.Колонки.Найти("Период") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФизическихЛиц.Период", "&ТекущаяДата");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	ИменаКадровыхДанных = "ГоловнаяОрганизация,Должность,Подразделение,ДатаНачалаУчета,ДатаЗавершенияРаботы";
	ДоступныРасширенныеПодсистемы = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы");
	ИспользоватьШтатноеРасписание = Ложь;
	Если ДоступныРасширенныеПодсистемы Тогда
		ИмяОпцииИспользоватьШтатноеРасписание = "ИспользоватьШтатноеРасписание";
		ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию(ИмяОпцииИспользоватьШтатноеРасписание);
		Если ИспользоватьШтатноеРасписание Тогда
			ИменаКадровыхДанных = СтрЗаменить(ИменаКадровыхДанных, ",Должность,Подразделение,", ",ДолжностьПоШтатномуРасписанию,");
		КонецЕсли;
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, ИменаКадровыхДанных);
	
	Если ДоступныРасширенныеПодсистемы И ИспользоватьШтатноеРасписание Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК Организация,
			|	МИНИМУМ(ЕСТЬNULL(КадровыеДанныеСотрудников.ДатаНачалаУчета, ДАТАВРЕМЯ(3999, 12, 31))) КАК ДатаНачалаУчета
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеДолжностиКабинетСотрудника
			|		ПО КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = ВыгружаемыеДолжностиКабинетСотрудника.Ссылка
			|			И (НЕ ВыгружаемыеДолжностиКабинетСотрудника.УсловноВыгружается)
			|ГДЕ
			|	(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ КадровыеДанныеСотрудников.ДатаЗавершенияРаботы > &ТекущаяДата)
			|	И НЕ ВыгружаемыеДолжностиКабинетСотрудника.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	КадровыеДанныеСотрудников.ФизическоеЛицо,
			|	КадровыеДанныеСотрудников.ГоловнаяОрганизация";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК Организация,
			|	МИНИМУМ(ЕСТЬNULL(КадровыеДанныеСотрудников.ДатаНачалаУчета, ДАТАВРЕМЯ(3999, 12, 31))) КАК ДатаНачалаУчета
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеПодразделенияКабинетСотрудника
			|		ПО КадровыеДанныеСотрудников.Подразделение = ВыгружаемыеПодразделенияКабинетСотрудника.Ссылка.Источник
			|			И (НЕ ВыгружаемыеПодразделенияКабинетСотрудника.УсловноВыгружается)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеДолжностиКабинетСотрудника
			|		ПО КадровыеДанныеСотрудников.Должность = ВыгружаемыеДолжностиКабинетСотрудника.Ссылка
			|			И (НЕ ВыгружаемыеДолжностиКабинетСотрудника.УсловноВыгружается)
			|ГДЕ
			|	(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ КадровыеДанныеСотрудников.ДатаЗавершенияРаботы > &ТекущаяДата)
			|	И НЕ ВыгружаемыеПодразделенияКабинетСотрудника.Ссылка ЕСТЬ NULL
			|	И НЕ ВыгружаемыеДолжностиКабинетСотрудника.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	КадровыеДанныеСотрудников.ФизическоеЛицо,
			|	КадровыеДанныеСотрудников.ГоловнаяОрганизация";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует согласие на присоединение к КЭДО по всем публикуемым физическим лицам.
//	Параметры:
//		ТаблицаФизическихЛиц - ТаблицаЗначений - таблица по всем физ.лица и организациям в которых они публикуются:
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо к публикации;
//			Организация - СправочникСсылка.Организации - организация физического лица по которой публикуется.
//		РучноеФормирование - Булево - флаг необходимо устанавливать, когда формирование выполняется вручную.
Процедура СформироватьСогласияНаПрисоединениеККЭДО(ТаблицаФизическихЛиц, РучноеФормирование = Ложь) Экспорт
	
	Если Не (РучноеФормирование Или Константы.АвтоматическиФормироватьСогласияНаПрисоединениеККЭДО.Получить()) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаТребуетсяСогласиеНаПрисоединениеККЭДО(ТаблицаФизическихЛиц);
	Если РезультатЗапроса.Пустой() Тогда
		Если РучноеФормирование Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не требуется формировать новые согласия';
														|en = 'Generation of new consents is not required'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СведенияОПодписях = ПодписиДокументов.СведенияОПодписяхПоУмолчаниюДляОбъектаМетаданных(
			Метаданные.Документы.СогласиеНаПрисоединениеККЭДО,
			Выборка.Организация);
		
		Пока Выборка.Следующий() Цикл
			ФизическиеЛица.Добавить(Выборка.ФизическоеЛицо);
			Согласие = НовыйСогласиеНаПрисоединениеККЭДО(Выборка.ФизическоеЛицо, Выборка.Организация, Выборка.ДатаНачалаУчета , СведенияОПодписях);
			РегистрыСведений.СостояниеСогласияНаПрисоединениеККЭДО.УстановитьДатуНачалаДействия(
				Согласие, Макс(ТекущаяДатаСеанса(), Выборка.ДатаНачалаУчета));
		КонецЦикла;
		
	КонецЦикла;
	
	РегистрыСведений.ФизическиеЛицаПрисоединенныеККЭДО.УстановитьПодключенККЭДОДляФизическогоЛица(ФизическиеЛица);
	
КонецПроцедуры

// Создает согласие на подключение к КЭДО и возвращает ссылку на созданный документ.
//	Параметры:
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - сотрудник по которому создается согласие на подключение к КЭДО;
//	    Организация - СправочникСсылка.Организации - организация сотрудника по которой создается согласие на подключение к КЭДО;
//	    ДатаНачалаУчета - Дата
//		СведенияОПодписях - Структура - см. ПодписиДокументов.СведенияОПодписяхПоУмолчаниюДляОбъектаМетаданных
//	Возвращаемое значение:
//		ДокументСсылка.СогласиеНаПрисоединениеКЭДО - ссылка на сформированный документ.
Функция НовыйСогласиеНаПрисоединениеККЭДО(ФизическоеЛицо, Организация, ДатаНачалаУчета, СведенияОПодписях) 
	СогласиеНаПрисоединениеККЭДО = Документы.СогласиеНаПрисоединениеККЭДО.СоздатьДокумент();
	СогласиеНаПрисоединениеККЭДО.Дата 			= Макс(ТекущаяДатаСеанса(), ?(ДатаНачалаУчета = '39991231', '00010101', ДатаНачалаУчета));
	СогласиеНаПрисоединениеККЭДО.Организация 	= Организация;
	СогласиеНаПрисоединениеККЭДО.ФизическоеЛицо = ФизическоеЛицо;
	Если СведенияОПодписях <> Неопределено Тогда
		СведенияОПодписях.Свойство("Руководитель", СогласиеНаПрисоединениеККЭДО.Руководитель);
		СведенияОПодписях.Свойство("ДолжностьРуководителя", СогласиеНаПрисоединениеККЭДО.ДолжностьРуководителя);
		СведенияОПодписях.Свойство("ОснованиеПодписиРуководителя", СогласиеНаПрисоединениеККЭДО.ОснованиеПодписиРуководителя);
	КонецЕсли;
	СогласиеНаПрисоединениеККЭДО.ДополнительныеСвойства.Вставить("НеВычислятьПрисоединениеККЭДО");
	СогласиеНаПрисоединениеККЭДО.Записать(РежимЗаписиДокумента.Проведение);
	Возврат СогласиеНаПрисоединениеККЭДО.Ссылка;
КонецФункции

// Возвращает таблицу физических лиц подключенных к КЭДО
//	Параметры:
//		ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица - массив проверяемых физических лиц.
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица физических лиц и состояния подключения к КЭДО.
Функция ФизическиеЛицаПрисоединенныеККЭДО(ФизическиеЛица) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛицаПрисоединенныеККЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ФизическиеЛицаПрисоединенныеККЭДО.Подключен КАК ИспользуетКЭДО
	               |ИЗ
	               |	РегистрСведений.ФизическиеЛицаПрисоединенныеККЭДО КАК ФизическиеЛицаПрисоединенныеККЭДО
	               |ГДЕ
	               |	ФизическиеЛицаПрисоединенныеККЭДО.ФизическоеЛицо В (&ФизическиеЛица)";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу документов согласий по документам КЭДО
//	Параметры:
//		СписокДокументов - Массив из ДокументСсылка.ДокументКадровогоЭДО - массив документов по которым необходимо сформировать таблицу.
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица документов КЭДО и документов согласий им соответствующих.
Функция ДокументыКЭДОСогласиеНаПрисоединениеККЭДО(СписокДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК ДокументКадровогоЭДО,
	|	СогласиеНаПрисоединениеККЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СогласиеНаПрисоединениеККЭДО КАК СогласиеНаПрисоединениеККЭДО
	|		ПО ДокументКадровогоЭДО.ОснованиеДокумента = СогласиеНаПрисоединениеККЭДО.Ссылка
	|ГДЕ
	|	ДокументКадровогоЭДО.Ссылка В (&ДокументыКЭДО)";
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

// Устанавливает значение константы ВедетсяУчетСогласийНаПрисоединениеККЭДО с проверками.
//	Параметры:
//		ИспользуетсяКадровыйЭДО - булево - значение флага использования КЭДО в ИБ.
Функция УстановитьЗначениеВедетсяУчетСогласийНаПрисоединениеККЭДО(ИспользуетсяКадровыйЭДО) Экспорт
	Значение = ИспользуетсяКадровыйЭДО И КабинетСотрудника.ИспользоватьФормат50366();
	Константы.ВедетсяУчетСогласийНаПрисоединениеККЭДО.Установить(Значение);
	Возврат Значение;
КонецФункции

// Отзывает согласие на присоединение к КЭДО у уволенного сотрудника.
//	Параметры:
//		Источник - РегистрСведенийНаборЗаписей.КадроваяИсторияСотрудников
Процедура ОтозватьСогласиеПриУвольнении(Источник) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
	ТаблицаФизическихЛиц.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	Для Каждого Запись Из Источник Цикл
		Если Запись.ВидСобытия <> Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаФизическихЛиц.Добавить();
		СтрокаТаблицы.ФизическоеЛицо = Запись.ФизическоеЛицо;
		СтрокаТаблицы.Организация = Запись.Организация;
		СтрокаТаблицы.Сотрудник = Запись.Сотрудник;
		СтрокаТаблицы.ДатаСобытия = Запись.Период;
	КонецЦикла;
	
	Если ТаблицаФизическихЛиц.Количество() = 0 Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("КэшТаблицаИзменившихсяДанных") Тогда
			
			ТаблицаОтмененныхУвольнений = Новый ТаблицаЗначений;
			ТаблицаОтмененныхУвольнений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
			ТаблицаОтмененныхУвольнений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			ТаблицаОтмененныхУвольнений.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
			Для Каждого СтрокаИзменений Из Источник.ДополнительныеСвойства.КэшТаблицаИзменившихсяДанных Цикл
				Если СтрокаИзменений.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение
					И СтрокаИзменений.НовоеЗначениеВидСобытия <> СтрокаИзменений.СтароеЗначениеВидСобытия Тогда
					
					НоваяСтрока = ТаблицаОтмененныхУвольнений.Добавить();
					НоваяСтрока.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
					НоваяСтрока.Организация = СтрокаИзменений.СтароеЗначениеОрганизация;
					НоваяСтрока.ДатаУвольнения = НачалоДня(НачалоДня(СтрокаИзменений.Период) - 1);
				КонецЕсли;
			КонецЦикла;
			
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ТаблицаОтмененныхУвольнений", ТаблицаОтмененныхУвольнений);
			Запрос.Текст = "ВЫБРАТЬ
				|	Увольнение.ДатаУвольнения КАК ДатаУвольнения,
				|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Увольнение.Организация КАК Организация
				|ПОМЕСТИТЬ ВТУвольнение
				|ИЗ
				|	&ТаблицаОтмененныхУвольнений КАК Увольнение
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СостояниеСогласияНаПрисоединениеККЭДО.Ссылка КАК Ссылка
				|ИЗ
				|	ВТУвольнение КАК ВТУвольнение
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСогласияНаПрисоединениеККЭДО КАК СостояниеСогласияНаПрисоединениеККЭДО
				|		ПО ВТУвольнение.ДатаУвольнения = СостояниеСогласияНаПрисоединениеККЭДО.ДатаОкончания
				|			И ВТУвольнение.ФизическоеЛицо = СостояниеСогласияНаПрисоединениеККЭДО.Ссылка.ФизическоеЛицо
				|			И ВТУвольнение.Организация = СостояниеСогласияНаПрисоединениеККЭДО.Ссылка.Организация";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.СостояниеСогласияНаПрисоединениеККЭДО.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка = Выборка.Ссылка;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ДатаОкончания = Дата(1, 1, 1, 0, 0, 0);
				МенеджерЗаписи.Записать(Истина);
			КонецЦикла;
			
		КонецЕсли;
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ТаблицаФизическихЛиц.Организация КАК Организация,
	               |	ТаблицаФизическихЛиц.Сотрудник КАК Сотрудник,
	               |	ТаблицаФизическихЛиц.ДатаСобытия КАК ДатаСобытия
	               |ПОМЕСТИТЬ ВТТаблицаФизическихЛиц
	               |ИЗ
	               |	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК Организация,
	               |	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТДействующиеСотрудники
	               |ИЗ
	               |	ВТТаблицаФизическихЛиц КАК ВТТаблицаФизическихЛиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |		ПО ВТТаблицаФизическихЛиц.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
	               |			И ВТТаблицаФизическихЛиц.Организация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
	               |			И ВТТаблицаФизическихЛиц.ДатаСобытия >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	               |ГДЕ
	               |	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК Организация,
	               |	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	               |	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема
	               |ПОМЕСТИТЬ ВТУволенныеФизическиеЛица
	               |ИЗ
	               |	ВТТаблицаФизическихЛиц КАК ВТТаблицаФизическихЛиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |		ПО ВТТаблицаФизическихЛиц.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
	               |			И ВТТаблицаФизическихЛиц.Организация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
	               |			И ВТТаблицаФизическихЛиц.ДатаСобытия >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеСотрудники КАК ВТДействующиеСотрудники
	               |		ПО ВТТаблицаФизическихЛиц.ФизическоеЛицо = ВТДействующиеСотрудники.ФизическоеЛицо
	               |			И ВТТаблицаФизическихЛиц.Организация = ВТДействующиеСотрудники.Организация
	               |ГДЕ
	               |	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |	И ВТДействующиеСотрудники.Сотрудник ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СогласиеНаПрисоединениеККЭДО.Ссылка КАК Ссылка,
	               |	ВТУволенныеФизическиеЛица.ДатаУвольнения КАК ДатаУвольнения
	               |ИЗ
	               |	ВТУволенныеФизическиеЛица КАК ВТУволенныеФизическиеЛица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СогласиеНаПрисоединениеККЭДО КАК СогласиеНаПрисоединениеККЭДО
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСогласияНаПрисоединениеККЭДО КАК СостояниеСогласияНаПрисоединениеККЭДО
	               |			ПО (СостояниеСогласияНаПрисоединениеККЭДО.Ссылка = СогласиеНаПрисоединениеККЭДО.Ссылка)
	               |		ПО ВТУволенныеФизическиеЛица.ФизическоеЛицо = СогласиеНаПрисоединениеККЭДО.ФизическоеЛицо
	               |			И ВТУволенныеФизическиеЛица.Организация = СогласиеНаПрисоединениеККЭДО.Организация
	               |ГДЕ
	               |	СогласиеНаПрисоединениеККЭДО.ПометкаУдаления = ЛОЖЬ
	               |	И ВТУволенныеФизическиеЛица.ДатаУвольнения >= СостояниеСогласияНаПрисоединениеККЭДО.ДатаНачала
	               |	И ВТУволенныеФизическиеЛица.ДатаПриема <= СостояниеСогласияНаПрисоединениеККЭДО.ДатаНачала";
	
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.СостояниеСогласияНаПрисоединениеККЭДО.УстановитьДатуПрекращенияДействия(
			Выборка.Ссылка,
			Выборка.ДатаУвольнения);		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура УстановитьЗначениеВедетсяУчетСогласийНаПрисоединениеККЭДООбновление() Экспорт
	УстановитьЗначениеВедетсяУчетСогласийНаПрисоединениеККЭДО(ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника"));
КонецПроцедуры

#КонецОбласти

Процедура УстановитьИспользованиеКЭДОПриВключенииИнтеграцииСРаботаВРоссии(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИспользованиеКЭДО(Источник.Значение);
	
КонецПроцедуры

Процедура УстановитьИспользованиеКЭДОПоНастройкамИнтеграцииСКабинетСотрудника(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяКадровыйЭДОКабинетСотрудника = Ложь;
	Если Источник.Количество() > 0 Тогда
		ИспользуетсяКадровыйЭДОКабинетСотрудника = Источник[0].ИспользуетсяКадровыйЭДО
	КонецЕсли;
	
	УстановитьИспользованиеКЭДО(, ИспользуетсяКадровыйЭДОКабинетСотрудника);
	
КонецПроцедуры

Процедура УстановитьИспользованиеКЭДО(ИспользоватьИнтеграциюСРаботаВРоссии = Неопределено, ИспользуетсяКадровыйЭДОКабинетСотрудника = Неопределено) Экспорт
	
	Если ИспользоватьИнтеграциюСРаботаВРоссии = Неопределено Тогда
		ИспользоватьИнтеграциюСРаботаВРоссии = ИнтеграцияСРаботаВРоссии.ДоступнаПередачаДокументовНаРаботаВРоссии();
	КонецЕсли;
	
	Если ИспользуетсяКадровыйЭДОКабинетСотрудника = Неопределено Тогда
		ИспользуетсяКадровыйЭДОКабинетСотрудника =
			РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции().ИспользуетсяКадровыйЭДО;
	КонецЕсли;
	
	НовоеЗначение = (ИспользоватьИнтеграциюСРаботаВРоссии Или ИспользуетсяКадровыйЭДОКабинетСотрудника);
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.ИспользоватьКЭДО.Получить() <> НовоеЗначение Тогда
		Константы.ИспользоватьКЭДО.Установить(НовоеЗначение);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область СостоянийДокументовКЭДО

// Обработчик регламентного задания
Процедура ОбновлениеСостоянийДокументовКЭДО() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСостоянийДокументовКЭДО);
	ОбновитьСостоянияДокументовКЭДО();
	
КонецПроцедуры

Процедура ОбновитьРасписаниеЗаданияОбновленияСостоянийДокументовКЭДО(ПараметрыОбновления = Неопределено) Экспорт
	
	НеобходимоИспользовать = ИспользуютсяЭлектронныеДокументы(Истина);
	МетаданныеЗадания = Метаданные.РегламентныеЗадания.ОбновлениеСостоянийДокументовКЭДО;
	
	УстановитьПривилегированныйРежим(Истина);
	Если НеобходимоИспользовать Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;
		Расписание.ПериодПовтораВТечениеДня = 900;
		ОбщегоНазначенияБЗК.ВключитьПредопределенноеЗадание(МетаданныеЗадания, Расписание);
	Иначе
		ОбщегоНазначенияБЗК.ОтключитьПредопределенноеЗадание(МетаданныеЗадания);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьСостоянияДокументовКЭДО(ДокументыКадровогоЭДО = Неопределено) Экспорт
	
	Если ДокументыКадровогоЭДО = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДокументыКЭДОКПересчетуСостояний.Объект КАК Объект
			|ИЗ
			|	РегистрСведений.ДокументыКЭДОКПересчетуСостояний КАК ДокументыКЭДОКПересчетуСостояний";
		
		УстановитьПривилегированныйРежим(Истина);
		ДокументыКПересчету = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		ДокументыКПересчету = ОбщегоНазначения.СкопироватьРекурсивно(ДокументыКадровогоЭДО);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.СостоянияДокументовКЭДО.РассчитатьСостоянияДокументовКЭДО(ДокументыКПересчету);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗарегистрироватьФайлыДокументовКЭДОКПересчетуСостояний(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент В(&ЭлектронныеДокументы)";
	
	УстановитьПривилегированныйРежим(Истина);
	ЗарегистрироватьДокументыКЭДОКПересчетуСостояний(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗарегистрироватьДокументКЭДОКПересчетуСостояний(ДокументКЭДО) Экспорт
	ЗарегистрироватьДокументыКЭДОКПересчетуСостояний(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументКЭДО));
КонецПроцедуры

Процедура ЗарегистрироватьДокументыКЭДОКПересчетуСостояний(ДокументыКЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыКЭДОКПересчетуСостояний КАК ДокументыКЭДОКПересчетуСостояний
		|		ПО ДокументКадровогоЭДО.Ссылка = ДокументыКЭДОКПересчетуСостояний.Объект
		|ГДЕ
		|	ДокументКадровогоЭДО.Ссылка В(&ДокументыКЭДО)
		|	И ДокументыКЭДОКПересчетуСостояний.Объект ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыКЭДОКПересчетуСостояний");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			НаборЗаписей = РегистрыСведений.ДокументыКЭДОКПересчетуСостояний.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			Запись = НаборЗаписей.Добавить();
			Запись.Объект = Выборка.Ссылка;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

Процедура ПроверитьФорматОсновногоДокумента(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	РезультатыПроверки = РезультатыПроверкиФорматОсновногоДокумента(
		ПараметрыПроверки.ДатаНачалаПроверки,
		ПараметрыПроверки.ПроверяемыеОбъекты,
		ПараметрыПроверки.ЛимитПроблем);
	
	Если РезультатыПроверки.Количество() > 0 Тогда
		
		Для Каждого СтрокаПроблемы Из РезультатыПроверки Цикл
			
			Если СтрокаПроблемы.ДокументНеЯвляетсяПечатнойФормой
				И ВРег(СтрокаПроблемы.Расширение) = ВРег("pdf") Тогда
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.ДокументКЭДО, ПараметрыПроверки);
				Проблема.Ответственный = СтрокаПроблемы.Ответственный;
				Проблема.УточнениеПроблемы = НСтр("ru = 'Документ не является печатной формой.';
													|en = 'The document is not a print form.'");
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьЗавершениеИнтерактивныхЗапланированныхЗаданий(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	РезультатыПроверки = РезультатыПроверкиЗавершенияИнтерактивныхЗапланированныхЗаданий(
		ПараметрыПроверки.ДатаНачалаПроверки,
		ПараметрыПроверки.ПроверяемыеОбъекты,
		ПараметрыПроверки.ЛимитПроблем);
	
	Если РезультатыПроверки.Количество() > 0 Тогда
		
		Для Каждого СтрокаПроблемы Из РезультатыПроверки Цикл
			
			Если СтрокаПроблемы.ЕстьНеЗавершенныеЗапланированныеДействия Тогда
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.ДокументКЭДО, ПараметрыПроверки);
				Проблема.Ответственный = СтрокаПроблемы.Ответственный;
				Проблема.УточнениеПроблемы = НСтр("ru = 'Не все исполнители завершили работу с документом.';
													|en = 'Some of the assignees are still working with the document.'");
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьЧтоВсеСотрудникиОзнакомлены(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	РезультатыПроверки = РезультатыПроверкиЧтоВсеСотрудникиОзнакомлены(
		ПараметрыПроверки.ДатаНачалаПроверки,
		ПараметрыПроверки.ПроверяемыеОбъекты,
		ПараметрыПроверки.ЛимитПроблем);
	
	Если РезультатыПроверки.Количество() > 0 Тогда
		
		Для Каждого СтрокаПроблемы Из РезультатыПроверки Цикл
			
			Если СтрокаПроблемы.НеВсеПодписиСобраны Тогда
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.ДокументКЭДО, ПараметрыПроверки);
				Проблема.Ответственный = СтрокаПроблемы.Ответственный;
				Проблема.УточнениеПроблемы = НСтр("ru = 'Не все сотрудники ознакомились с документом.';
													|en = 'Some of the employees have not read the document.'");
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьЧтоВсеПодписиПрошлиПроверку(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	РезультатыПроверки = РезультатыПроверкиЧтоВсеПодписиПрошлиПроверку(
		ПараметрыПроверки.ДатаНачалаПроверки,
		ПараметрыПроверки.ПроверяемыеОбъекты,
		ПараметрыПроверки.ЛимитПроблем);
	
	Если РезультатыПроверки.Количество() > 0 Тогда
		
		Для Каждого СтрокаПроблемы Из РезультатыПроверки Цикл
			
			Если СтрокаПроблемы.ЕстьНеПрошедшиеПроверкуПодписи Тогда
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.ДокументКЭДО, ПараметрыПроверки);
				Проблема.Ответственный = СтрокаПроблемы.Ответственный;
				Проблема.УточнениеПроблемы = НСтр("ru = 'Документ подписан не прошедшими проверку подписями.';
													|en = 'The document is signed with signatures that have not passed verification.'");
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьЧтоВсеПодписиПроходилиПроверку(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	РезультатыПроверки = РезультатыПроверкиЧтоВсеПодписиПроходилиПроверку(
		ПараметрыПроверки.ДатаНачалаПроверки,
		ПараметрыПроверки.ПроверяемыеОбъекты,
		ПараметрыПроверки.ЛимитПроблем);
	
	Если РезультатыПроверки.Количество() > 0 Тогда
		
		Для Каждого СтрокаПроблемы Из РезультатыПроверки Цикл
			
			Если СтрокаПроблемы.ЕстьНеПроверенныеПодписи Тогда
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.ДокументКЭДО, ПараметрыПроверки);
				Проблема.Ответственный = СтрокаПроблемы.Ответственный;
				Проблема.УточнениеПроблемы = НСтр("ru = 'Документ подписан непроверенными подписями.';
													|en = 'The document was signed with unverified signatures.'");
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция РезультатыПроверкиДокументовКЭДО(ДатаНачалаПроверки, ПроверяемыеОбъекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка КАК ДокументКЭДО,
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ЛОЖЬ КАК ДокументНеЯвляетсяПечатнойФормой,
		|	ЛОЖЬ КАК ЕстьНеЗавершенныеЗапланированныеДействия,
		|	ЛОЖЬ КАК НеВсеПодписиСобраны,
		|	ЛОЖЬ КАК ЕстьНеПрошедшиеПроверкуПодписи,
		|	ЛОЖЬ КАК ЕстьНеПроверенныеПодписи,
		|	ДокументКадровогоЭДО.Ответственный КАК Ответственный,
		|	ДокументКадровогоЭДО.Расширение КАК Расширение,
		|	ДокументКадровогоЭДО.ФорматДокументаСоответствуетТребованиям КАК ФорматДокументаСоответствуетТребованиям,
		|	ДокументКадровогоЭДО.ВариантПодписания КАК ВариантПодписания
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.Дата >= &ДатаНачалаПроверки
		|	И ДокументКадровогоЭДО.Ссылка В(&ПроверяемыеОбъекты)
		|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ДатаНачалаПроверки) Тогда
		Запрос.УстановитьПараметр("ДатаНачалаПроверки", ДатаНачалаПроверки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументКадровогоЭДО.Дата >= &ДатаНачалаПроверки", "(ИСТИНА)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяемыеОбъекты) Тогда
		Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументКадровогоЭДО.Ссылка В(&ПроверяемыеОбъекты)", "(ИСТИНА)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ЭлектронныйДокумент");
	
	Возврат Результат;
	
КонецФункции

Функция РезультатыПроверкиФорматОсновногоДокумента(Знач ДатаНачалаПроверки, Знач ПроверяемыеОбъекты, Знач ЛимитПроблем, РезультатыПроверки = Неопределено)
	
	Если РезультатыПроверки = Неопределено Тогда
		РезультатыПроверки = РезультатыПроверкиДокументовКЭДО(ДатаНачалаПроверки, ПроверяемыеОбъекты);
	КонецЕсли;
	
	РезультатыПроверки.ЗаполнитьЗначения(Истина, "ДокументНеЯвляетсяПечатнойФормой");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Расширение",
		КадровыйЭДОКлиентСервер.ТолькоРасширение(
			КадровыйЭДОКлиентСервер.РасширениеPDFДокумента()));
	СтруктураПоиска.Вставить("ФорматДокументаСоответствуетТребованиям", Истина);
	НайденныеСтроки = РезультатыПроверки.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ДокументНеЯвляетсяПечатнойФормой = Ложь;
	КонецЦикла;
	
	Возврат РезультатыПроверки;
	
КонецФункции

Функция РезультатыПроверкиЗавершенияИнтерактивныхЗапланированныхЗаданий(Знач ДатаНачалаПроверки, Знач ПроверяемыеОбъекты, Знач ЛимитПроблем, РезультатыПроверки = Неопределено)
	
	Если РезультатыПроверки = Неопределено Тогда
		РезультатыПроверки = РезультатыПроверкиДокументовКЭДО(ДатаНачалаПроверки, ПроверяемыеОбъекты);
	КонецЕсли;
	
	ЭлектронныеДокументы = РезультатыПроверки.ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	// Проверка того, что все запланированные интерактивные действия выполнены
	ОжидающиеИсполнителей = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ОжидающиеИсполнителей(ЭлектронныеДокументы);
	СчетчикПроблем = 0;
	Для Каждого ОписаниеДействийФайла Из ОжидающиеИсполнителей Цикл
		СтруктураПоиска = Новый Структура("ЭлектронныйДокумент", ОписаниеДействийФайла.Ключ);
		НайденныеСтроки = РезультатыПроверки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ЕстьНеЗавершенныеЗапланированныеДействия = Ложь;
			СчетчикПроблем = СчетчикПроблем + 1;
			Если ЗначениеЗаполнено(ЛимитПроблем) Тогда
				Если СчетчикПроблем = ЛимитПроблем Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатыПроверки;
	
КонецФункции

Функция РезультатыПроверкиЧтоВсеСотрудникиОзнакомлены(Знач ДатаНачалаПроверки, Знач ПроверяемыеОбъекты, Знач ЛимитПроблем, РезультатыПроверки = Неопределено)
	
	Если РезультатыПроверки = Неопределено Тогда
		РезультатыПроверки = РезультатыПроверкиДокументовКЭДО(ДатаНачалаПроверки, ПроверяемыеОбъекты);
	КонецЕсли;
	
	ДокументыКЭДО = РезультатыПроверки.ВыгрузитьКолонку("ДокументКЭДО");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка КАК Ссылка,
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументКадровогоЭДОВнешниеПодписанты.ФизическоеЛицо) КАК КоличествоНеПодписавших
		|ИЗ
		|	Документ.ДокументКадровогоЭДО.ВнешниеПодписанты КАК ДокументКадровогоЭДОВнешниеПодписанты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписиДокументовКЭДО КАК ПодписиДокументовКЭДО
		|		ПО ДокументКадровогоЭДОВнешниеПодписанты.Ссылка = ПодписиДокументовКЭДО.Объект
		|			И ДокументКадровогоЭДОВнешниеПодписанты.ФизическоеЛицо = ПодписиДокументовКЭДО.ФизическоеЛицо
		|ГДЕ
		|	ПодписиДокументовКЭДО.ФизическоеЛицо ЕСТЬ NULL
		|	И ДокументКадровогоЭДОВнешниеПодписанты.Ссылка В(&ДокументыКЭДО)
		|	И НЕ ДокументКадровогоЭДОВнешниеПодписанты.Ссылка.ВариантПодписания В (ЗНАЧЕНИЕ(Перечисление.ВариантыПодписанияДокументовКЭДО.НеТребуется), ЗНАЧЕНИЕ(Перечисление.ВариантыПодписанияДокументовКЭДО.НеобходимаСобственноручнаяПодпись))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка,
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка.ЭлектронныйДокумент
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументКадровогоЭДОВнешниеПодписанты.ФизическоеЛицо) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка.Дата УБЫВ";
	
	Если ЗначениеЗаполнено(ЛимитПроблем) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(ЛимитПроблем, "ЧН=; ЧГ="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ЭлектронныйДокумент", Выборка.ЭлектронныйДокумент);
		НайденныеСтроки = РезультатыПроверки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].НеВсеПодписиСобраны = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатыПроверки;
	
КонецФункции

Функция РезультатыПроверкиЧтоВсеПодписиПрошлиПроверку(Знач ДатаНачалаПроверки, Знач ПроверяемыеОбъекты, Знач ЛимитПроблем, РезультатыПроверки = Неопределено)
	
	Если РезультатыПроверки = Неопределено Тогда
		РезультатыПроверки = РезультатыПроверкиДокументовКЭДО(ДатаНачалаПроверки, ПроверяемыеОбъекты);
	КонецЕсли;
	
	ДокументыКЭДО = РезультатыПроверки.ВыгрузитьКолонку("ДокументКЭДО");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ДокументКадровогоЭДО.ЭлектронныйДокумент = ЭлектронныеПодписи.ПодписанныйОбъект
		|			И (НЕ ЭлектронныеПодписи.ПодписьВерна)
		|			И (ЭлектронныеПодписи.ДатаПроверкиПодписи <> ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	ДокументКадровогоЭДО.Ссылка В(&ДокументыКЭДО)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументКадровогоЭДО.Дата УБЫВ";
	
	Если ЗначениеЗаполнено(ЛимитПроблем) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(ЛимитПроблем, "ЧН=; ЧГ="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ЭлектронныйДокумент", Выборка.ЭлектронныйДокумент);
		НайденныеСтроки = РезультатыПроверки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ЕстьНеПрошедшиеПроверкуПодписи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатыПроверки;
	
КонецФункции

Функция РезультатыПроверкиЧтоВсеПодписиПроходилиПроверку(Знач ДатаНачалаПроверки, Знач ПроверяемыеОбъекты, Знач ЛимитПроблем, РезультатыПроверки = Неопределено)
	
	Если РезультатыПроверки = Неопределено Тогда
		РезультатыПроверки = РезультатыПроверкиДокументовКЭДО(ДатаНачалаПроверки, ПроверяемыеОбъекты);
	КонецЕсли;
	
	ДокументыКЭДО = РезультатыПроверки.ВыгрузитьКолонку("ДокументКЭДО");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ДокументКадровогоЭДО.ЭлектронныйДокумент = ЭлектронныеПодписи.ПодписанныйОбъект
		|			И (НЕ ЭлектронныеПодписи.ПодписьВерна)
		|			И (ЭлектронныеПодписи.ДатаПроверкиПодписи = ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	ДокументКадровогоЭДО.Ссылка В(&ДокументыКЭДО)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументКадровогоЭДО.Дата УБЫВ";
	
	Если ЗначениеЗаполнено(ЛимитПроблем) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(ЛимитПроблем, "ЧН=; ЧГ="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ЭлектронныйДокумент", Выборка.ЭлектронныйДокумент);
		НайденныеСтроки = РезультатыПроверки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ЕстьНеПроверенныеПодписи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатыПроверки;
	
КонецФункции

#КонецОбласти

Процедура ЗарегистрироватьМашиночитаемыеДоверенностиДляОбмена(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.0") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	МашиночитаемыеДоверенности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенности КАК МашиночитаемыеДоверенности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъектыКабинетСотрудника
		|		ПО МашиночитаемыеДоверенности.Ссылка = ВыгружаемыеОбъектыКабинетСотрудника.Ссылка
		|ГДЕ
		|	ВыгружаемыеОбъектыКабинетСотрудника.Ссылка ЕСТЬ NULL
		|	И МашиночитаемыеДоверенности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМЧД.Действует)
		|	И НЕ МашиночитаемыеДоверенности.Ссылка В (&МассивОбновленных)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Ссылка = Выборка.Ссылка;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
		НаборЗаписей.Отбор.ТипОбъекта.Установить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.МашиночитаемаяДоверенность);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Ссылка = Выборка.Ссылка;
		Запись.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.МашиночитаемаяДоверенность;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПометкуУдаленияВариантаШаблонаДокументовПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		И Источник.ПометкаУдаления
		И Источник.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ШаблоныДокументовКабинетСотрудника)
		И СтрНачинаетсяС(Источник.Наименование, "ШаблоныДокументов") Тогда
		
		Источник.ПометкаУдаления = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВариантПодписанияСогласияНаПрисоединениеККЭДО(СпособПолученияСогласияНаПрисоединениеККЭДО) Экспорт
	Если СпособПолученияСогласияНаПрисоединениеККЭДО = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент Тогда
		Возврат Перечисления.ВариантыПодписанияДокументовКЭДО.НеобходимаСобственноручнаяПодпись;
	КонецЕсли;
	Возврат Перечисления.ВариантыПодписанияДокументовКЭДО.Требуется;
КонецФункции

Процедура УстановитьВидПодписиСогласияНаПрисоединениеККЭДО(СпособПолученияСогласияНаПрисоединениеККЭДО) Экспорт
	
	ВариантПодписания = ВариантПодписанияСогласияНаПрисоединениеККЭДО(СпособПолученияСогласияНаПрисоединениеККЭДО);
	РегистрыСведений.НастройкиПечатныхФормБЗК.УстановитьВариантПодписанияПечатнойФормы(
		Документы.СогласиеНаПрисоединениеККЭДО.ИдентификаторКомандыПечатиЗаявления(), ВариантПодписания);
	
КонецПроцедуры

Процедура ОбновитьВидПодписиСогласияНаПрисоединениеККЭДО(ПараметрыОбновления = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		НастройкиИнтеграции = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
		ВариантПодписания = ВариантПодписанияСогласияНаПрисоединениеККЭДО(НастройкиИнтеграции.СпособПолученияСогласияНаПрисоединениеККЭДО);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПечатныхФормБЗК");
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.НастройкиПечатныхФормБЗК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторПечатнойФормы.Установить(Документы.СогласиеНаПрисоединениеККЭДО.ИдентификаторКомандыПечатиЗаявления());
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0
			И НаборЗаписей[0].ВариантПодписания <> ВариантПодписания Тогда
			
			НаборЗаписей[0].ВариантПодписания = ВариантПодписания;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			КадровыйЭДО.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления вида подписи согласия на присоединение к КЭДО';
					|en = 'Ошибка обновления вида подписи согласия на присоединение к КЭДО'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.НастройкиПечатныхФормБЗК,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ДокументКадровогоЭДО);
	СписокОбъектов.Добавить(Документы.СогласиеНаПрисоединениеККЭДО);
	
КонецПроцедуры

#КонецОбласти
