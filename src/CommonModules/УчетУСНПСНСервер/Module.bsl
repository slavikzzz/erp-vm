#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Если Не УчетнаяПолитика.ЗаполнятьКУДиР(Документ.Организация, Документ.Дата)
		И Не ТипЗнч(Документ) = Тип("ДокументОбъект.ВводОстатковРасходовПриУСН")
		И Не (ТипЗнч(Документ) = Тип("ДокументОбъект.ВзаимозачетЗадолженности")
				И УчетнаяПолитика.ЗаполнятьКУДиР(Документ.КонтрагентДебитор, Документ.Дата)) 
		И Не (ТипЗнч(Документ) = Тип("ДокументОбъект.ОтчетПоКомиссииМеждуОрганизациями")
				И УчетнаяПолитика.ЗаполнятьКУДиР(Документ.Комиссионер, Документ.Дата)) Тогда
		Возврат Параметры;
	КонецЕсли;
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходовРаздел2);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНТовары);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСН);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНТовары);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСН);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыСторно.Ссылка КАК Регистратор,
		|	ДокументыСторно.Дата КАК Период,
		|	ДокументыСторно.Дата КАК Дата,
		|	ДокументыСторно.Номер КАК Номер,
		|	ДанныеРегистра.Организация КАК Организация,
		|	ДанныеРегистра.ДокументВозникновенияДоходовРасходов КАК ДокументВозникновенияДоходовРасходов,
		|	ДанныеРегистра.ВидРасходов КАК ВидРасходов,
		|	ДанныеРегистра.Статья КАК Статья,
		|	ДанныеРегистра.Партия КАК Партия,
		|	-ДанныеРегистра.Графа4 КАК Графа4,
		|	-ДанныеРегистра.Графа5 КАК Графа5,
		|	-ДанныеРегистра.Графа6 КАК Графа6,
		|	-ДанныеРегистра.Графа7 КАК Графа7,
		|	-ДанныеРегистра.НДС КАК НДС,
		|	-ДанныеРегистра.ДоходЕНВД КАК ДоходЕНВД,
		|	-ДанныеРегистра.РасходЕНВД КАК РасходЕНВД,
		|	ДанныеРегистра.Содержание КАК Содержание,
		|	ИСТИНА КАК Сторно
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК ДанныеРегистра
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ДанныеРегистра.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|
		|ГДЕ
		|	НЕ ДанныеРегистра.Сторно";
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
	КонецЕсли;
	
	ДопУсловия = "ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.ВводОстатков), ТИП(Документ.ВводОстатковРасходовПриУСН))
	|	И ДанныеРегистра.ДокументВозникновенияРасходов ССЫЛКА Документ.ПервичныйДокумент
	|	И ДанныеРегистра.СуммаРасходов <> 0";
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасходыПриУСНТовары;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента, ДопУсловия));
	КонецЕсли;

	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента, ДопУсловия));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасходыПриУСН;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента, ДопУсловия));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам учета УСН.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКУДиР = Неопределено;
	ТаблицыДляДвижений.Свойство("Таблица" + "КнигаУчетаДоходовИРасходов", ТаблицаКУДиР);
	Если ЗначениеЗаполнено(ТаблицаКУДиР) Тогда
		РеквизитыКУДиР = Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.Реквизиты;
		Если ТаблицаКУДиР.Колонки.Найти("РеквизитыПервичногоДокумента") = Неопределено Тогда
			ТаблицаКУДиР.Колонки.Добавить("РеквизитыПервичногоДокумента", Новый ОписаниеТипов(РеквизитыКУДиР.РеквизитыПервичногоДокумента.Тип));
		КонецЕсли;
		Если ТаблицаКУДиР.Колонки.Найти("Содержание") = Неопределено Тогда
			ТаблицаКУДиР.Колонки.Добавить("Содержание", Новый ОписаниеТипов(РеквизитыКУДиР.Содержание.Тип));
		КонецЕсли;
		ЕстьКолонкаСторно = ТаблицаКУДиР.Колонки.Найти("Сторно") <> Неопределено;
		Для каждого Стр Из ТаблицаКУДиР Цикл
			Если Не ЗначениеЗаполнено(Стр.РеквизитыПервичногоДокумента) Тогда
				ПараметрыПервичногоДокумента = ПараметрыПервичногоДокумента();
				ЗаполнитьЗначенияСвойств(ПараметрыПервичногоДокумента, Стр);
				Стр.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(Стр.Регистратор, ПараметрыПервичногоДокумента);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Стр.Содержание) Тогда
				ПараметрыСодержанияДохода = ПараметрыСодержанияДохода();
				ЗаполнитьЗначенияСвойств(ПараметрыСодержанияДохода, Стр);
				Стр.Содержание = СодержаниеДохода(ПараметрыСодержанияДохода);
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.Содержание) И ЕстьКолонкаСторно И ЗначениеЗаполнено(Стр.Сторно) И Стр.Сторно Тогда
				Стр.Содержание = Стр.Содержание + " " + НСтр("ru = 'Сторно.';
															|en = 'Storno.'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КнигаУчетаДоходовИРасходов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КнигаУчетаДоходовИРасходовРаздел2");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасходыПриУСНТовары");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасходыПриУСНМатериалы");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасходыПриУСН");
	
КонецПроцедуры

#КонецОбласти

// Функция возвращает структура параметров первичного документа
//
// Возвращаемое значение:
//	Структура:
//		- НомерВходящегоДокумента - строка, номер указанный в документе пользователем;
//		- Номер - строка, номер заданный системой при вводе документа;
//		- ДатаВходящегоДокумента - дата, дата указанная в документе пользователем;
//		- Дата - ДатаИВремя - дата и время, заданное системой при вводе документа.
//
Функция ПараметрыПервичногоДокумента() Экспорт
	
	ПараметрыПервичногоДокумента = Новый Структура;
	ПараметрыПервичногоДокумента.Вставить("НомерВходящегоДокумента", "");
	ПараметрыПервичногоДокумента.Вставить("Номер", "");
	ПараметрыПервичногоДокумента.Вставить("ДатаВходящегоДокумента", Дата(1,1,1));
	ПараметрыПервичногоДокумента.Вставить("Дата", Дата(1,1,1));
	Возврат ПараметрыПервичногоДокумента;
	
КонецФункции

// Возвращает реквизиты первичного документа для занесения в графу 2 КУДиР.
//	Параметры:
//		Документ - ДокументОбъект - документ, для которого делаются движения КУДиР;
//		ТЧ - ТабличнаяЧасть объекта - табличная часть, где содержатся данные о номере и дате первичного документа;
//		Строка - Число - номер строки табличной части документа, где содержатся данные о номере и дате первичного документа;
//		УказыватьВид - Булево - признак необходимости указывать в результате синоним документа (например "Реализация товаров и услуг №1 от 01.01.2001").
//			Значение по умолчанию - Ложь;
//
//	Возвращаемое значение:
//		Строка - строка вида "Реализация товаров и услуг №1 от 01.01.2001" или "№1 от 01.01.2001", в зависимости от признака УказыватьВид.
//
Функция РеквизитыПервичногоДокумента(Документ, Параметры = Неопределено, УказыватьВид = Ложь) Экспорт
	
	// Если номера и даты не заполнены - значит нам по ссылке необходимо получить полные реквизиты документа,
	//	для этого обратимся к регистру сведений "ДанныеПервичныхДокументов":
	Если Параметры = Неопределено Тогда
		
		Параметры = ПараметрыПервичногоДокумента();
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеПервичныхДокументов.Номер КАК НомерВходящегоДокумента,
		               |	ДанныеПервичныхДокументов.Дата КАК ДатаВходящегоДокумента,
		               |	ДанныеПервичныхДокументов.ДатаРегистратора КАК Дата,
		               |	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер
		               |ИЗ
		               |	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		               |ГДЕ
		               |	ДанныеПервичныхДокументов.Документ = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Параметры, Результат);
		Иначе
			ЗаполнитьЗначенияСвойств(Параметры, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Номер, Дата"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Если дата и номер первичного документа не указаны или не заполнены, используем дату и номер регистрации.
	НомерВходящегоДокумента = ?(ЗначениеЗаполнено(Параметры.НомерВходящегоДокумента), Параметры.НомерВходящегоДокумента,
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметры.Номер, Истина, Истина));
	ДатаВходящегоДокумента = ?(ЗначениеЗаполнено(Параметры.ДатаВходящегоДокумента), Параметры.ДатаВходящегоДокумента,
		Параметры.Дата);
	
	ВидНаПечать	= ?(УказыватьВид, Строка(ТипЗнч(Документ)) + " " + НСтр("ru = 'от';
																			|en = 'dated'", ОбщегоНазначения.КодОсновногоЯзыка()) + " ", "");
	
	Возврат СтрШаблон(НСтр("ru = '%1%2, № %3';
							|en = '%1%2, No. %3'", ОбщегоНазначения.КодОсновногоЯзыка()), ВидНаПечать, Формат(ДатаВходящегоДокумента, "ДЛФ=D"), НомерВходящегоДокумента);
	
КонецФункции

// Формирует набор сторнирующих записей регистра КнигаУчетаДоходовИРасходов, соответствующих отбору.
//
// Параметры:
//  ОтборЗаписей - Структура - в ключе передается имя поля регистра, в значении - значение отбора
//                             (отбор производится по равенству).
//
// Возвращаемое значение:
//   Массив из Структура - набор данных сторнирующих записей, см. РезультатЗапросаВМассивСтруктур.
//
Функция СторноЗаписейКУДиРПоОтбору(ОтборЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСторноЗаписейКУДиР();
	
	СтрокиУсловий = Новый Массив;
	
	Если ОтборЗаписей <> Неопределено Тогда
		Для Каждого УсловиеОтбора Из ОтборЗаписей Цикл
			СтрокиУсловий.Добавить(ТекстУсловияЗапросаРавенство("КнигаУчетаДоходовИРасходов", УсловиеОтбора.Ключ));
			Запрос.УстановитьПараметр(УсловиеОтбора.Ключ, УсловиеОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьУсловияВТекстЗапроса(Запрос.Текст, СтрокиУсловий, "&Условия");
	
	Результат = Запрос.Выполнить();
	
	Возврат РезультатЗапросаВМассивСтруктур(Результат);
	
КонецФункции

// Формирует набор сторнирующих записей регистра КнигаУчетаДоходовИРасходов за период, соответствующих отбору.
//
// Параметры:
//  ПериодЗаписей - СтандартныйПериод - период, за который требуется сторнировать найденные записи.
//  ДополнительныйОтбор - Структура - в ключе передается имя поля регистра, в значении - значение отбора
//                                     (отбор производится по равенству).
//                      - Неопределено - отбор не задан.
//
// Возвращаемое значение:
//   Массив из Структура - набор данных сторнирующих записей, см. РезультатЗапросаВМассивСтруктур.
//
Функция СторноЗаписейКУДиРЗаПериод(ПериодЗаписей, ДополнительныйОтбор = Неопределено) Экспорт
	
	ЗаписиСторно = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСторноЗаписейКУДиР();
	
	СтрокиУсловий = Новый Массив;
	
	// Условие по периоду - особый синтаксис.
	
	СтрокиУсловий.Добавить(ТекстУсловияЗапросаГраницыПериода("КнигаУчетаДоходовИРасходов", "Период"));
	Запрос.УстановитьПараметр(ИмяПараметраНачалоПериода("Период"), ПериодЗаписей.ДатаНачала);
	Запрос.УстановитьПараметр(ИмяПараметраКонецПериода("Период"), ПериодЗаписей.ДатаОкончания);
	
	// Стандартные условия из ДополнительныйОтбор - простое условие на равенство.
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Для Каждого УсловиеОтбора Из ДополнительныйОтбор Цикл
			СтрокиУсловий.Добавить(ТекстУсловияЗапросаРавенство("КнигаУчетаДоходовИРасходов", УсловиеОтбора.Ключ));
			Запрос.УстановитьПараметр(УсловиеОтбора.Ключ, УсловиеОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьУсловияВТекстЗапроса(Запрос.Текст, СтрокиУсловий, "&Условия");
	
	Результат = Запрос.Выполнить();
	
	Возврат РезультатЗапросаВМассивСтруктур(Результат);
	
КонецФункции

#Область АктуальностьДанныхУСН

// Возвращает периоды с которого для операций УСН и ПСН закрытия месяца данные становятся неактуальными.
// Параметры:
//	КонецРасчета - Дата - ищутся записи, сделанные раньше этой даты;
//	СписокОрганизаций - Массив - СправочникСсылка.Организации - ищутся записи, сделанные по переданным организациям;
//								Если значение не заполнено - отбор не учитывается.
// Возвращаемое значение:
//	Структура - содержащая даты начала расчета для каждой из операций УСН и ПСН, если данные актуальные возвращает КонецРасчета + 1:
//		* НачалоРасчетаПризнаниеРасходовПриУСН - Дата - дата начала расчета, с которой данные по операции признания расходов УСН становятся не актуальными;
//		* НачалоРасчетаСторноДоходовКУДиР - Дата - дата начала расчета, с которой данные по операции сторно записей доходов КУДиР для УСН и ПСН становятся не актуальными;
//		* НачалоРасчетаНалогаУСН - Дата - дата начала расчета, с которой данные по операции расчета налога УСН становятся не актуальными.
//
Функция НачалоРасчетаОперацийПоУСН(КонецРасчета, СписокОрганизаций = Неопределено) Экспорт
	
	Если СписокОрганизаций = Неопределено Тогда
		СписокОрганизаций = Новый Массив;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрОрганизации.ГоловнаяОрганизация КАК Организация,
	|	СпрОрганизации.Ссылка КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ
	|	ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|ГДЕ
	|	&ПоВсемОрганизациям = ИСТИНА
	|	ИЛИ СпрОрганизации.Ссылка В (&СписокОрганизаций)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.Период КАК НачалоПериода,
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН КАК ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяПСН КАК ПрименяетсяПСН,
	|	ЕстьNULL(НастройкиУчетаУСН.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	МИНИМУМ(ЕстьNULL(НастройкиСистемыНалогообложенияСледующиеПериоды.Период, ДОБАВИТЬКДАТЕ(&КонецРасчета, СЕКУНДА, 1))) КАК КонецПериода
	|ПОМЕСТИТЬ ОрганизацииНаУСН
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|			ПО ГоловныеОрганизации.Организация = НастройкиСистемыНалогообложения.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложенияСледующиеПериоды
	|			ПО НастройкиСистемыНалогообложения.Период < НастройкиСистемыНалогообложенияСледующиеПериоды.Период
	|				И НастройкиСистемыНалогообложения.Организация = НастройкиСистемыНалогообложенияСледующиеПериоды.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&КонецРасчета,Организация В (ВЫБРАТЬ Организация ИЗ ВтГоловныеОрганизации)) КАК НастройкиУчетаУСН
	|			ПО ГоловныеОрганизации.Организация = НастройкиСистемыНалогообложения.Организация
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Период <= &КонецРасчета
	|	И (НастройкиСистемыНалогообложения.ПрименяетсяУСН ИЛИ НастройкиСистемыНалогообложения.ПрименяетсяПСН)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГоловныеОрганизации.ОбособленноеПодразделение,
	|	ЕСТЬNULL(НастройкиУчетаУСН.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ),
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяПСН,
	|	НастройкиСистемыНалогообложения.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НачалоПериода,
	|	КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияКЗакрытиюМесяца.Месяц,
	|	ЗаданияКЗакрытиюМесяца.Операция
	|ПОМЕСТИТЬ НеЗаполненныеДатыРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииНаУСН КАК УчетныеПолитикиОрганизаций
	|		ПО ЗаданияКЗакрытиюМесяца.Организация = УчетныеПолитикиОрганизаций.Организация
	|			И ЗаданияКЗакрытиюМесяца.Месяц >= УчетныеПолитикиОрганизаций.НачалоПериода
	|			И ЗаданияКЗакрытиюМесяца.Месяц < УчетныеПолитикиОрганизаций.КонецПериода
	|			И (ЗаданияКЗакрытиюМесяца.Операция В (ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН), ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР), ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РасчетНалогаУСН)))
	|ГДЕ
	|	(ЗаданияКЗакрытиюМесяца.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН)
	|				И УчетныеПолитикиОрганизаций.ПрименяетсяУСНДоходыМинусРасходы
	|			ИЛИ ЗаданияКЗакрытиюМесяца.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР)
	|			ИЛИ ЗаданияКЗакрытиюМесяца.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РасчетНалогаУСН)
	|		И УчетныеПолитикиОрганизаций.ПрименяетсяУСН) 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НеЗаполненныеДатыРасчета.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН)
	|				ТОГДА НеЗаполненныеДатыРасчета.Месяц
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(&КонецРасчета, СЕКУНДА, 1)
	|		КОНЕЦ) КАК НачалоРасчетаПризнаниеРасходовПриУСН,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НеЗаполненныеДатыРасчета.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР)
	|				ТОГДА НеЗаполненныеДатыРасчета.Месяц
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(&КонецРасчета, СЕКУНДА, 1)
	|		КОНЕЦ) КАК НачалоРасчетаСторноДоходовКУДиР,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НеЗаполненныеДатыРасчета.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РасчетНалогаУСН)
	|				ТОГДА НеЗаполненныеДатыРасчета.Месяц
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(&КонецРасчета, СЕКУНДА, 1)
	|		КОНЕЦ) КАК НачалоРасчетаНалогаУСН
	|ИЗ
	|	НеЗаполненныеДатыРасчета КАК НеЗаполненныеДатыРасчета";
	
	Запрос.УстановитьПараметр("КонецРасчета", КонецМесяца(КонецРасчета));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(СписокОрганизаций));
	
	ЗаданияКРасчету = Запрос.Выполнить();
	ДатыНачалаРасчета = ЗаданияКРасчету.Выбрать();
	
	СтруктураВозврата = Новый Структура("НачалоРасчетаПризнаниеРасходовПриУСН, НачалоРасчетаСторноДоходовКУДиР, НачалоРасчетаНалогаУСН");
	
	Если ДатыНачалаРасчета.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ДатыНачалаРасчета);
	КонецЕсли;
	
	Для каждого НачалоРасчета Из СтруктураВозврата Цикл
		Если Не ЗначениеЗаполнено(НачалоРасчета.Значение) Тогда
			СтруктураВозврата.Вставить(НачалоРасчета.Ключ, КонецМесяца(КонецРасчета) + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Процедура вызывается из методов регламентных операций для записи в регистр сведений "ЗаданияКЗакрытиюМесяца"
//	данных о необходимости пересчета признания расходов (если изменяются организации с объектом налогообложения "Доходы минус расходы").
// Параметры:
//	Период - Дата - период пересчета;
//	СписокОрганизаций - Массив - СправочникСсылка.Организации - массив организаций, для которых запущена процедура пересчета.
//	ТолькоРасходы - Булево - Признак выборки подходящих организаций:
//		если Истина - будут выбираться организации на УСН, с объектом налогообложения "Доходы минус расходы",
//		если Ложь - будут выбираться организации на УСН вне зависимости от объекта налогообложения, значение по умолчанию - Истина;
//	КоличествоОбработанныхЭлементов - Число - Количество данных, обработанных данной процедурой (см. общий модуль "Производительность").
//
Процедура ОбновитьЗаданияКЗакрытиюМесяцаПриВыполненииРеглОперации(Период, СписокОрганизаций, ТолькоРасходы = Истина, КоличествоОбработанныхЭлементов = 0) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|	&Период,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ПОМЕСТИТЬ КонтрольныеДанныеПоУСНДоходыМинусРасходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&Период,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ГоловныеОрганизации.Организация
	|				ИЗ
	|					ВтГоловныеОрганизации КАК ГоловныеОрганизации)
	|			И ПрименяетсяУСН ИЛИ ПрименяетсяПСН) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|	ПО ГоловныеОрганизации.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	|ГДЕ
	|	&ТолькоДоходыМинусРасходы = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|	&Период,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&Период,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ГоловныеОрганизации.Организация
	|				ИЗ
	|					ВтГоловныеОрганизации КАК ГоловныеОрганизации)
	|			И ПрименяетсяУСН) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|			ПО ГоловныеОрганизации.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(
	|			&Период,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ГоловныеОрганизации.Организация
	|				ИЗ
	|					ВтГоловныеОрганизации КАК ГоловныеОрганизации)
	|			И ПрименяетсяУСНДоходыМинусРасходы) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО НастройкиУчетаУСНСрезПоследних.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация 
	|
	|ГДЕ
	|	&ТолькоДоходыМинусРасходы = ИСТИНА
	|";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТолькоДоходыМинусРасходы", ТолькоРасходы);
	
	Запрос.Выполнить();
	
	Операция = ?(ТолькоРасходы, Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН,
		Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР);
	ОбновитьЗаданияКЗакрытиюМесяца(Запрос.МенеджерВременныхТаблиц, Операция, КоличествоОбработанныхЭлементов);
	
КонецПроцедуры

// Процедура записывает в регистр сведений "ЗаданияКЗакрытиюМесяца" данные о необходимости пересчета регл. операций по УСН,
// при отсутствии в регистре записей в этом периоде.
//	Параметры:
//		ВременнаяТаблица - МенеджерВременныхТаблиц - содержит таблицу:
//				* КонтрольныеДанныеПоУСНДоходыМинусРасходы - временная таблица с колонками:
//					** Организация - СправочникСсылка.Организации - организация для которой необходимо обновить данные пересчета;
//					** Документ - ДокументСсылка - документ, который вызвал необходимость обновления данных пересчета;
//					** Период - Дата - новая дата, на которую необходимо установить данные пересчета;
//					** Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция для которой устанавливаем новые данные пересчета;
//		Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - тип операции закрытия месяца, для которой происходит обновление
//					(в данном модуле актуален только для ПризнаниеРасходовПриУСН, РасчетНалогаУСН и СторноДоходовКУДиР);
//		КоличествоОбработанныхЭлементов - Число - Количество данных, обработанных данной процедурой (см. общий модуль "Производительность").
//
Процедура ОбновитьЗаданияКЗакрытиюМесяца(ВременнаяТаблица, Операция, КоличествоОбработанныхЭлементов = 0) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблица;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрольныеДанныеПоУСНДоходыМинусРасходы.Организация КАК Организация,
	|	КонтрольныеДанныеПоУСНДоходыМинусРасходы.Документ КАК Документ,
	|	НАЧАЛОПЕРИОДА(КонтрольныеДанныеПоУСНДоходыМинусРасходы.Период, МЕСЯЦ) КАК Месяц,
	|	&Операция КАК Операция
	|ИЗ
	|	КонтрольныеДанныеПоУСНДоходыМинусРасходы КАК КонтрольныеДанныеПоУСНДоходыМинусРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО Константы.ИспользоватьРеглУчет
	|			И НАЧАЛОПЕРИОДА(КонтрольныеДанныеПоУСНДоходыМинусРасходы.Период, МЕСЯЦ) >= Константы.ДатаНачалаВеденияРеглУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
	|		ПО КонтрольныеДанныеПоУСНДоходыМинусРасходы.Организация = ЗаданияКЗакрытиюМесяца.Организация
	|			И (ЗаданияКЗакрытиюМесяца.Операция = &Операция)
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрольныеДанныеПоУСНДоходыМинусРасходы.Организация,
	|	КонтрольныеДанныеПоУСНДоходыМинусРасходы.Документ,
	|	КонтрольныеДанныеПоУСНДоходыМинусРасходы.Период
	|
	|ИМЕЮЩИЕ
	|	КонтрольныеДанныеПоУСНДоходыМинусРасходы.Период < МИНИМУМ(ЕСТЬNULL(ЗаданияКЗакрытиюМесяца.Месяц, ДАТАВРЕМЯ(2099, 1, 1)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КонтрольныеДанныеПоУСНДоходыМинусРасходы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
		НаборЗаписей.НомерЗадания = ЗакрытиеМесяцаСервер.ТекущийНомерЗадания();
		НаборЗаписей.Записать();
		КоличествоОбработанныхЭлементов = КоличествоОбработанныхЭлементов + 1;
	КонецЦикла;
КонецПроцедуры

// Возвращает признак записи движений по регистру механизмом признания расходов.
//
// Параметры:
//	НаборЗаписей - НаборЗаписей - набор записей регистра.
//
// Возвращаемое значение:
//	Булево - Истина, если движения записываются регламентной операцией признания расходов.
//
Функция ДвиженияЗаписываютсяРегламентнойОперациейУСН(НаборЗаписей) Экспорт
	
	Возврат НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());
	
КонецФункции

#КонецОбласти

#Область НалоговыйПериод

// Определяет, что не требуется сдавать отчетность и уплачивать налог за переданный период (год)
// по причине регистрации организации в декабре этого года (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация   	- СправочникСсылка.Организации - проверяемая организация
//  Период        	- Дата - проверяемый период
//	ДатаРегистрации - Дата - дата регистрации организации.
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это пропущенный период
//              (организация зарегистрирована в декабре переданного года, и для нее актуальны требования п.2 статьи 55
//              НК РФ).
//
Функция НалоговыйПериодПропущен(Организация, Период, ДатаРегистрации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПропущенныйПериод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		Организация,
		ДатаРегистрации);
	
	Возврат ПропущенныйПериод <> Неопределено И (Год(ПропущенныйПериод) = Год(Период));
	
КонецФункции

// Определяет, что переданный период находится в пределах расширенного первого налогового периода -
// с даты регистрации в декабре по конец следующего года после регистрации (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация   	- СправочникСсылка.Организации - проверяемая организация
//  Период        	- Дата - проверяемый период (в пределах расширенного налогового периода)
//	ДатаРегистрации - Дата - дата регистрации организации.
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это расширенный период
//             (организация зарегистрирована в декабре переданного или прошлого года,
//              и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодРасширен(Организация, Период, ДатаРегистрации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, , ДатаРегистрации);
	
	Возврат НалоговыйПериод.Начало < НалоговыйПериод.Период;
	
КонецФункции

#КонецОбласти

#Область Патент

// Создает временную таблицу "ТаблицаДействующихПатентов" с колонками:
//		Патент - СправочникСсылка.Патенты - патент;
//		Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, для которого он применяется.
//
//	Параметры:
//		Запрос - Запрос - запрос, использующийся при проведении документа;
//		ТекстыЗапроса - СписокЗначений - список отдельных текстов запроса, испольщзующихся при проведении, с представлением - именем временной таблицы, которая создается;
//		ТолькоУникальные - Булево - если истина, то будут выбираться только те патенты, которые не применяются сразу для нескольких подразделений.
//
//	Возвращаемое значение:
//		Строка - текст, получившегося запроса.
//
Функция ТекстЗапросаТаблицаДействующихПатентовПодразделениям(Запрос, ТекстыЗапроса, ТолькоУникальные = Истина) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Патенты.Ссылка КАК Патент,
	|	ЕСТЬNULL(Подразделения.СтруктурнаяЕдиница, ПодразделенияПатента.Подразделение) КАК Подразделение
	|ПОМЕСТИТЬ ВТПодразделенияДействующихПатентов
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты.ПрименениеПатента КАК ПодразделенияПатента
	|		ПО Патенты.Ссылка = ПодразделенияПатента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК Подразделения
	|		ПО ПодразделенияПатента.Подразделение = Подразделения.ВышестоящаяСтруктурнаяЕдиница
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаОрганизации
	|		ПО УчетнаяПолитикаОрганизации.ПрименяетсяПСН
	|ГДЕ
	|	Патенты.Владелец = &Организация
	|	И НЕ Патенты.ПометкаУдаления
	|	И (Патенты.ДатаНачала <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|		И Патенты.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение";
	
	Если ТолькоУникальные Тогда
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТПодразделенияДействующихПатентов");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПодразделенияПатентов.Подразделение
		|ПОМЕСТИТЬ ВТУникальныеПодразделенияПатентов
		|ИЗ ВТПодразделенияДействующихПатентов КАК ПодразделенияПатентов
		|ГДЕ
		|	ПодразделенияПатентов.Патент <> ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ПодразделенияПатентов.Подразделение
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодразделенияПатентов.Патент) = 1";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТУникальныеПодразделенияПатентов");
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействующиеПатентыПоПодразделениям.Патент,
		|	ДействующиеПатентыПоПодразделениям.Подразделение
		|ПОМЕСТИТЬ ТаблицаДействующихПатентов
		|ИЗ ВТПодразделенияДействующихПатентов КАК ДействующиеПатентыПоПодразделениям
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ВТУникальныеПодразделенияПатентов КАК УникальныеПодразделенияПатентов
		|		ПО ДействующиеПатентыПоПодразделениям.Подразделение = УникальныеПодразделенияПатентов.Подразделение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДействующиеПатентыПоПодразделениям.Подразделение";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ТаблицаДействующихПатентов");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПодразделенияДействующихПатентов", "ТаблицаДействующихПатентов");
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ТаблицаДействующихПатентов");
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ДопСтроки - Таблица значений - Строки табличной части заявления
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеУтратаПраваПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	ТаблицаКонтейнера = Контейнер.ДопСтроки;
	ТаблицаКонтейнера.Очистить();
	
	ДанныеЗаполнения = ДанныеЗаполненияЗаявления(ПараметрыОтчета);
	ДанныеПатентов = ДанныеЗаполнения.ДанныеПатентов;
	
	КоличествоПатентовНаЛисте = КоличествоПатентовНаЛистеЗаявленияОбУтрате();
	
	НомерПатентаПоПорядку = 1;
	НоваяСтрока = ТаблицаКонтейнера.Добавить();
	
	Для Каждого Патент Из ДанныеПатентов Цикл
		
		Если НомерПатентаПоПорядку > КоличествоПатентовНаЛисте Тогда
			НомерПатентаПоПорядку = 1;
			НоваяСтрока = ТаблицаКонтейнера.Добавить();
		КонецЕсли;
		
		НоваяСтрока[СтрШаблон("НОМЕР_ПАТЕНТА_%1", НомерПатентаПоПорядку)] = Патент.НомерПатента;
		НоваяСтрока[СтрШаблон("ДАТА_НАЧАЛА_%1", НомерПатентаПоПорядку)] = Патент.ДатаНачала;
		НоваяСтрока[СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", НомерПатентаПоПорядку)] = Патент.ДатаОкончания;
		
		НомерПатентаПоПорядку = НомерПатентаПоПорядку + 1;
		
	КонецЦикла;
	
	ТитульныйЛист = Контейнер.Титульный;
	ТитульныйЛист.Вставить("ДАТА_УТРАТЫ_ПРАВА", ДанныеЗаполнения.ДатаУтратыПрава);
	
	Если ДанныеЗаполнения.Свойство("КодПричины") Тогда
		ТитульныйЛист.Вставить("КОД_ПРИЧИНЫ", ДанныеЗаполнения.КодПричины);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НалоговыйОрган") Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеЗаполнения.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеЗаполнения.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеПрекращениеПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения.Патент) Тогда
		Возврат;
	КонецЕсли;
	
	ТитульныйЛист = Контейнер.Титульный;
	
	ДанныеПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.ПараметрыЗаполнения.Патент,
		"НомерПатента, ДатаВыдачи, ПостановкаНаУчетВНалоговомОргане, НалоговыйОрган, НалоговыйОрган.Код");
		
	ТитульныйЛист.Вставить("НОМЕР_ПАТЕНТА", ДанныеПатента.НомерПатента);
	ТитульныйЛист.Вставить("ДАТА_ВЫДАЧИ",   ДанныеПатента.ДатаВыдачи);
	
	Если ДанныеПатента.ПостановкаНаУчетВНалоговомОргане =
			ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане")
		И ЗначениеЗаполнено(ДанныеПатента.НалоговыйОрган) Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеПатента.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеПатента.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияУтратаПраваФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КОД_ПРИЧИНЫ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_УТРАТЫ_ПРАВА", Истина, Ложь);
	Для Сч = 1 по КоличествоПатентовНаЛистеЗаявленияОбУтрате() Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("НОМЕР_ПАТЕНТА_%1", Сч) , Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_НАЧАЛА_%1", Сч), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", Сч), Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияПрекращениеПатентаФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НОМЕР_ПАТЕНТА", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ВЫДАЧИ", Истина, Ложь);
	
КонецПроцедуры

#КонецОбласти

// Описывает контекст, в котором выполняется расчет налога УСН - организацию, период и т.п.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  ПериодРасчета    - Дата - дата из последнего квартала отчетного периода, за который рассчитывается налог.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - расчет не имеет смысла: в указанный период организация еще не зарегистрирована, или не применяет УСН,
//                 или же налог в данном периоде не исчисляется в силу п. 2 статьи 55 НК РФ.
//
Функция НовыйКонтекстРасчетаНалога(Организация, ПериодРасчета) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоОтчетногоПериода = НачалоКвартала(ПериодРасчета);
	КонецОтчетногоПериода = КонецКвартала(ПериодРасчета);
	
	Если НЕ УчетнаяПолитикаПереопределяемый.ПрименяетсяУСНЗаПериод(Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		КонецОтчетногоПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, ,
		ДатаРегистрации);
		
	Если КонецОтчетногоПериода < НалоговыйПериод.Начало
		ИЛИ НалоговыйПериодПропущен(Организация, КонецОтчетногоПериода, ДатаРегистрации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыЗаПериод =
		УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода);
	ПрименяетсяУСНДоходыМинусРасходыЗаПериод =
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходыЗаПериод(Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода);

	ПрекращеноПрименениеУСНДоходы = ПрименяетсяУСНДоходыЗаПериод
		И Не УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, КонецОтчетногоПериода);
	ПрекращеноПрименениеУСНДоходыМинусРасходы = ПрименяетсяУСНДоходыМинусРасходыЗаПериод
		И Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, КонецОтчетногоПериода);
	
	КонтекстРасчета = Новый Структура;
	
	КонтекстРасчета.Вставить("Организация", Организация);
	КонтекстРасчета.Вставить("Период",      ПериодРасчета);
	
	КонтекстРасчета.Вставить("НачалоНалоговогоПериода", НалоговыйПериод.Начало);
	КонтекстРасчета.Вставить("КонецОтчетногоПериода",   КонецОтчетногоПериода);
	КонтекстРасчета.Вставить("НачалоГода",              НалоговыйПериод.Период);
	
	КонтекстРасчета.Вставить("ПрименяетсяУСНДоходы", ПрименяетсяУСНДоходыЗаПериод);
	КонтекстРасчета.Вставить("ПрименяетсяУСНДоходыМинусРасходы",
		ПрименяетсяУСНДоходыМинусРасходыЗаПериод И Не КонтекстРасчета.ПрименяетсяУСНДоходы);
	КонтекстРасчета.Вставить("СтавкаНалогаУСН",
		УчетнаяПолитика.СтавкаНалогаУСН(Организация, КонецОтчетногоПериода));
	
	// Если организация зарегистрирована в текущем году, не имеет смысла рассчитывать налог с начала года.
	НачалоПериодаРасчета = Макс(НалоговыйПериод.Период, НалоговыйПериод.Начало);
	
	ЭтоПервыйОтчетныйПериод      = (НачалоОтчетногоПериода = НачалоКвартала(НачалоПериодаРасчета));
	ЭтоЗавершающийОтчетныйПериод = (КонецОтчетногоПериода = КонецКвартала(НалоговыйПериод.Конец))
		Или ПрекращеноПрименениеУСНДоходы
		Или (ПрекращеноПрименениеУСНДоходыМинусРасходы И Не КонтекстРасчета.ПрименяетсяУСНДоходы);
	
	КонтекстРасчета.Вставить("ЭтоПервыйОтчетныйПериод",      ЭтоПервыйОтчетныйПериод);
	КонтекстРасчета.Вставить("ЭтоЗавершающийОтчетныйПериод", ЭтоЗавершающийОтчетныйПериод);
	
	КонтекстРасчета.Вставить("УменьшатьНалогНаТорговыйСбор",
		ЕстьПравоУменьшатьНалогНаТорговыйСбор(Организация, КонецОтчетногоПериода));
	
	Возврат КонтекстРасчета;
	
КонецФункции

// Описывает контекст выполнения ежеквартальных регламентных операций для УСН с объектом "доходы-расходы":
// организацию, период и т.п.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  Период           - Дата - дата из квартала, в котором выполняется регламентная операция.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - расчет не имеет смысла: в указанный период организация еще не зарегистрирована,
//                 или не применяет УСН с объектом "доходы минус расходы",
//                 или же переданный квартал не является завершенным отчетным/налоговым периодом в силу п. 2 статьи 55
//                 НК РФ.
//
Функция НовыйКонтекстРегламентнойОперации(Организация, Период) Экспорт
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода = КонецКвартала(Период);
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходыЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		КонецПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, ,
		ДатаРегистрации);
		
	Если КонецПериода < НалоговыйПериод.Начало
		ИЛИ НалоговыйПериодПропущен(Организация, КонецПериода, ДатаРегистрации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НачалоГода(Период) = НачалоКвартала(Период) Тогда
		// Операции первого квартала выполняются с начала налогового периода.
		// Начало налогового периода и начало квартала могут не совпадать - см.ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод.
		НачалоПериода = Мин(НачалоПериода, НалоговыйПериод.Начало);
	КонецЕсли;
	
	КонтекстОперации = Новый Структура;
	
	КонтекстОперации.Вставить("Организация",   Организация);
	КонтекстОперации.Вставить("Период",        Период);
	КонтекстОперации.Вставить("НачалоПериода", НачалоПериода);
	КонтекстОперации.Вставить("КонецПериода",  КонецПериода);
	
	Возврат КонтекстОперации;
	
КонецФункции

// Проверяет, разрешено ли организации уменьшать налог за данный квартал на суммы уплаченного торгового сбора.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация-налогоплательщик.
//  Период       - Дата - дата в пределах последнего квартала отчетного (налогового) периода.
//
// Возвращаемое значение:
//   Булево   - если Истина, налог можно уменьшить на уплаченный торговый сбор.
//
Функция ЕстьПравоУменьшатьНалогНаТорговыйСбор(Организация, Период) Экспорт
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода  = КонецКвартала(Период);
	
	Если Не (УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период)
		И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьРегионРегистрацииПриУменьшенииНалогаНаТорговыйСбор(Период) Тогда
		Возврат Истина;
	Иначе
		// При расчете налога за периоды ранее появления проверки в программе - регион не проверяем.
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, применяется ли освобождение от уплаты налога по УСН
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой выполняется проверка освобождения от налога;
//   Период      - Дата - Дата, для которой определяется освобождение от налога.
//   
// Возвращаемое значение:
//   Булево
//
Функция ПрименяетсяОсвобождениеОтНалога(Организация, Период) Экспорт
	
	Если НалоговыйУчет.ВозможноОсвобождениеОтНалога("УСН", Период)
		И НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает сведения о применении повышенной ставки налога в отчетном периоде
//
// Параметры:
//   КонтекстРасчета - Структура- см. НовыйКонтекстРасчетаНалога
//
// Возвращаемое значение:
//   Структура:
//      ПрименяетсяПовышеннаяСтавка - Булево - признак того, что в отчетном периоде применяется повышенная ставка
//      ПериодПревышенияЛимитов - Дата - отчетный период, в котором превышены границы применения 
//           основной ставки УСН
//      НалоговаяБазаДоПревышенияЛимитов - Число - налоговая база за период, предшествующий кварталу 
//           превышения границ применения основной ставки УСН.
//      НалогДоПревышенияЛимитов - Число - налог за период, предшествующий кварталу 
//           превышения 1 порога лимитов применения УСН.
//      НалоговаяБазаДоПревышенияЛимитовТорговыйСбор - Число - налоговая база по деятельности, облагаемой 
//           торговым сбором, за период, предшествующий кварталу превышения 1 порога лимитов применения УСН.
//      НалогДоПревышенияЛимитовТорговыйСбор - Число - налог по деятельности, облагаемой торговым сбором, за период,
//           предшествующий кварталу превышения 1 порога лимитов применения УСН.
//      Ошибки - Массив из Структура - массив ошибок, препятствующих расчету применения повышенной ставки налога.
//
Функция ПараметрыПримененияПовышеннойСтавкиНалога(КонтекстРасчета) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПрименяетсяПовышеннаяСтавка", Ложь);
	Результат.Вставить("ПериодПревышенияЛимитов", '00010101');
	Результат.Вставить("НалоговаяБазаДоПревышенияЛимитов", 0);
	Результат.Вставить("НалогДоПревышенияЛимитов", 0);
	Результат.Вставить("НалоговаяБазаДоПревышенияЛимитовТорговыйСбор", 0);
	Результат.Вставить("НалогДоПревышенияЛимитовТорговыйСбор", 0);
	Результат.Вставить("Ошибки", Новый Массив);
	
	ПериодПревышенияЛимитовОсновнойСтавки = ПериодНачалаПримененияПовышеннойСтавкиНалога(
		КонтекстРасчета.Организация, КонтекстРасчета.НачалоНалоговогоПериода, КонтекстРасчета.КонецОтчетногоПериода);
	
	Если ПериодПревышенияЛимитовОсновнойСтавки.Ошибки.Количество() > 0 Тогда
		Результат.Ошибки = ПериодПревышенияЛимитовОсновнойСтавки.Ошибки;
		Возврат Результат;
	Иначе
		Результат.ПериодПревышенияЛимитов = ПериодПревышенияЛимитовОсновнойСтавки.Период;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ПериодПревышенияЛимитов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПрименяетсяПовышеннаяСтавка = Истина;
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонтекстРасчета.Период);
	
	ОсновнаяСтавка = УчетУСНПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию(КонтекстРасчета.ПрименяетсяУСНДоходыМинусРасходы);
	
	Если НачалоКвартала(КонтекстРасчета.НачалоНалоговогоПериода) <> НачалоКвартала(Результат.ПериодПревышенияЛимитов) Тогда
		
		ПредшествующийПериод = КонецКвартала(ДобавитьМесяц(Результат.ПериодПревышенияЛимитов, -3));
		
		ДанныеРасчетаНалога = НалоговаяБазаЗаПериодПоДаннымРасчетаНалога(КонтекстРасчета.Организация, ПредшествующийПериод);
		
		Если ДанныеРасчетаНалога <> Неопределено Тогда
			
			Результат.НалоговаяБазаДоПревышенияЛимитов = ДанныеРасчетаНалога.НалоговаяБаза;
			Результат.НалогДоПревышенияЛимитов = ДанныеРасчетаНалога.Налог;
			Результат.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор = ДанныеРасчетаНалога.НалоговаяБазаТорговыйСбор;
			Результат.НалогДоПревышенияЛимитовТорговыйСбор = ДанныеРасчетаНалога.НалогТорговыйСбор;
			
		Иначе
			
			ДанныеКУДиР = ОборотыКУДиРЗаПериод(КонтекстРасчета.Организация, КонтекстРасчета.НачалоНалоговогоПериода,
				ПредшествующийПериод);
			
			Если КонтекстРасчета.ПрименяетсяУСНДоходы Тогда
				Результат.НалоговаяБазаДоПревышенияЛимитов = Окр(ДанныеКУДиР.Доходы, РазрядностьОкругленияПоказателей);
				Результат.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор =
					Окр(ДанныеКУДиР.ДоходыТорговыйСбор, РазрядностьОкругленияПоказателей);
			Иначе
				Результат.НалоговаяБазаДоПревышенияЛимитов =
					Макс(0, Окр(ДанныеКУДиР.Доходы - ДанныеКУДиР.Расходы, РазрядностьОкругленияПоказателей));
			КонецЕсли;
			
			Результат.НалогДоПревышенияЛимитов = Окр(
				Результат.НалоговаяБазаДоПревышенияЛимитов * ОсновнаяСтавка / 100, РазрядностьОкругленияПоказателей);
			
			Результат.НалогДоПревышенияЛимитовТорговыйСбор = Окр(
				Результат.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор * ОсновнаяСтавка / 100,
				РазрядностьОкругленияПоказателей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о средней численности наемных работников за отчетный период.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию
//   НачалоПериода - Дата - начало анализа численности работников
//   КонецПериода - Дата - конец анализа численности работников
//   УчитыватьРучныеКорректировки - Булево - учитывать сведения о численности, указанные пользователем
//
// Возвращаемое значение:
//   - Число - средняя численность наемных работников за отчетный период (если -1, то нет наемных работников)
//   - Неопределено - нет сведений о средней численности работников
//
Функция СредняяЧисленностьРаботников(Организация, НачалоПериода, КонецПериода, УчитыватьРучныеКорректировки = Истина) Экспорт
	
	Перем ЧисленностьРаботников;
	
	Если Не УчетнаяПолитика.ИспользуетсяТрудНаемныхРаботников(Организация, НачалоПериода) Тогда
		Возврат -1;
	КонецЕсли;

	Если УчитыватьРучныеКорректировки И КонецПериода > НачалоПериода И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(СтатистикаПерсоналаПоказатели.СреднесписочнаяЧисленностьСотрудников
		|		+ СтатистикаПерсоналаПоказатели.СреднесписочнаяЧисленностьВнешнихСовместителей
		|		+ СтатистикаПерсоналаПоказатели.СредняяЧисленностьДоговорников)
		|		/ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(СтатистикаПерсоналаПоказатели.Ссылка.ПериодРегистрации, МЕСЯЦ)),
		|		НЕОПРЕДЕЛЕНО) КАК ЧисленностьРаботников
		|ИЗ
		|	Документ.СтатистикаПерсонала.Показатели КАК СтатистикаПерсоналаПоказатели
		|ГДЕ
		|	СтатистикаПерсоналаПоказатели.Ссылка.ПериодРегистрации >= &НачалоПериода
		|	И СтатистикаПерсоналаПоказатели.Ссылка.ПериодРегистрации <= &КонецПериода
		|	И СтатистикаПерсоналаПоказатели.Ссылка.Проведен
		|	И СтатистикаПерсоналаПоказатели.Ссылка.Организация = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЧисленностьРаботников = Выборка.ЧисленностьРаботников;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧисленностьРаботников = Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		ДанныеОЧисленности = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(
			Организация, НачалоПериода, КонецПериода);
		
		Возврат ДанныеОЧисленности.СреднесписочнаяЧисленностьРаботников;
	КонецЕсли;
	
	Возврат ЧисленностьРаботников;
	
КонецФункции

// Возвращает сведения об оборотах книги учета доходов и расходов за отчетный период.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию;
//   НачалоОтчетногоПериода - Дата;
//   КонецОтчетногоПериода - Дата;
//
// Возвращаемое значение:
//   - Структура:
//   	- Доходы - Число - сумма доходов за период;
//   	- ДоходыТорговыйСбор - Число - сумма доходов по торговому сбору за период;
//   	- Расходы - Число - сумма расходов за период.
//
Функция ОборотыКУДиРЗаПериод(Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода) Экспорт
	
	СтруктураВозврата = Новый Структура("Доходы, ДоходыТорговыйСбор, Расходы", 0, 0, 0);

	ЗапросКУДиР = ЗапросКУДиРЗаПериод(Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода);
	
	Если ЗапросКУДиР = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДанныеКУДиР = ЗапросКУДиР.Выполнить().Выбрать();
	Если ДанныеКУДиР.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ДанныеКУДиР);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#Область ПроцедурыФормированияДвижений

// Процедура формирует движения по регистру "КУДиР", при выполнении регламентной операции "РасчетТранспортногоНалога",
// вызывается из модуля объекта документа "РегламентнаяОперация".
//
// Параметры:
//	ТаблицаПлатон - ТаблицаЗначений - таблица расходов по Платону
//		(см. РасчетИмущественныхНалоговПереопределяемый.ТаблицыРасчетНалога);
//	Реквизиты  - ТаблицаЗначений - таблица реквизитов
//		(см. РегламентнаяОперация.ТекстЗапросаРасчетИмущественныхНалогов);
//	ДокументОбъект - ДокументОбъект.РегламентнаяОперация - проводимый документ регламентной операции,
//		в рамках которой выполняется отражение расходов в УСН;
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(ТаблицаПлатон, Реквизиты, ДокументОбъект, Отказ) Экспорт
	
	Если Реквизиты.Количество() = 0 Тогда
		Возврат;
	Иначе
		Реквизиты = Реквизиты[0];
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПлатон.Количество() > 0 Тогда
	
		ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;
	
		Для Каждого СтрокаТаблицы Из ТаблицаПлатон Цикл
			
			Если СтрокаТаблицы.СуммаРегл = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонСодержания = НСтр("ru = 'Признаны в расходах НУ платежи в систему ""Платон"" по транспортному средству ""%1""';
									|en = 'Payments to Platon system by the ""%1"" vehicle are recognized in TA expenses'", ОбщегоНазначения.КодОсновногоЯзыка());
			Содержание = СтрШаблон(ШаблонСодержания, СтрокаТаблицы.ОсновноеСредство);
			
			ЗаписьКУДиР = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов.Добавить();
			
			ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, Реквизиты);
			
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Содержание = Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
			ЗаписьКУДиР.Графа6 = СтрокаТаблицы.СуммаНУДт;
			ЗаписьКУДиР.Графа7 = СтрокаТаблицы.СуммаНУДт;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	
	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ЗакрытиеМесяцаСервер.ДополнитьНазванияТаблицДляЗаданий(Запрос, ЭлементСоответствия.Ключ);
		ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			Запрос.МенеджерВременныхТаблиц.Таблицы,
			ТекстЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
	
	Для каждого ИмяТаблицы Из ИменаТаблицДляПроверкиПоОрганизациямУСН() Цикл
		Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
			// Дополним временные таблицы данными по организациям на УСН, для последующей актуализации данных, при необходимости:
			ДополнитьМенеджерВременныхТаблицДаннымиПоОрганизациямНаУСН(Запрос.МенеджерВременныхТаблиц);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ПризнаниеРасходовПриУСН

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - Таблица значений - (См. Обработка.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов).
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ПризнаниеРасходовПриУСН(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Execute'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетУСНПСНСервер.Использование_ПризнаниеРасходовПриУСН");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетУСНПСНСервер.Выполнить_ПризнаниеРасходовПриУСН");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникФормированияКУДиР.Формы.Форма.ПолноеИмя());
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН);
	
КонецПроцедуры

Процедура Использование_ПризнаниеРасходовПриУСН(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	ПроверитьИспользованиеУСНДоходыМинусРасходы(ПараметрыОбработчика);
	
	ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, "ВТОрганизации");
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика,, "ВТОрганизации");
	
КонецПроцедуры

Процедура Выполнить_ПризнаниеРасходовПриУСН(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаЛокализация.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СторноДоходовКУДиР

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - Таблица значений - (См. Обработка.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов).
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_СторноДоходовКУДиР(ТаблицаЭтапов,ТекущийРодитель) Экспорт

	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Execute'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетУСНПСНСервер.Использование_СторноДоходовКУДиР");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетУСНПСНСервер.Выполнить_СторноДоходовКУДиР");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникФормированияКУДиР.Формы.Форма.ПолноеИмя());
	
КонецПроцедуры

Процедура Использование_СторноДоходовКУДиР(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	ПроверитьИспользованиеУСН(ПараметрыОбработчика);
	
	ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, "ВТОрганизации");
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчетаУСН = Новый Структура("НачДата, КонДата, МассивОрганизаций",
		ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
		ПараметрыОбработчика.ДанныеЭтапа.МассивОрганизаций);
		
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Количество());
	
	Если НЕ ТребуетсяСторноДоходовКУДиР(ПараметрыРасчетаУСН) Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет доходов для сторнирования.';
				|en = 'No income to reverse.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_СторноДоходовКУДиР(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	НомерЗадания  = ЗакрытиеМесяцаСервер.ТекущийНомерЗадания();
	
	НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыРасчета.КонецПериода,
		НомерЗадания,
		ПараметрыОбработчика.ДанныеЭтапа.МассивОрганизаций);
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода Цикл
		
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		Для Каждого ТекущаяОрганизация Из ДоступныеОрганизации Цикл
			
			ПараметрыРасчетаУСН = Новый Структура("НачДата, КонДата, Организация",
				НачалоМесяца(НачалоРасчета),
				КонецМесяца(НачалоРасчета),
				ТекущаяОрганизация);
			
			СторноДоходовКУДиР(ПараметрыРасчетаУСН);
			
		КонецЦикла;
		
		НачалоРасчета = ДобавитьМесяц(НачалоРасчета, 1);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетНалогаУСН

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - Таблица значений - (См. Обработка.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов).
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РасчетНалогаУСН(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаУСН,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетУСНПСНСервер.Использование_РасчетНалогаУСН");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетУСНПСНСервер.Выполнить_РасчетНалогаУСН");
	НоваяСтрока.ДействиеОформление = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетУСНПСНСервер.Оформление_ОформлениеРасчетНалогаУСН");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникФормированияКУДиР.Формы.Форма.ПолноеИмя());
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН);
	
КонецПроцедуры

Процедура Использование_РасчетНалогаУСН(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	ПроверитьИспользованиеУСН(ПараметрыОбработчика);
	
	ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, "ВТОрганизации");
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	МесяцРасчета = Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	Если МесяцРасчета % 3 <> 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Расчет налога выполняется в последнем месяце квартала.';
				|en = 'Tax is calculated in the last month of the quarter.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика,, "ВТОрганизации");
	
КонецПроцедуры

Процедура Выполнить_РасчетНалогаУСН(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаЛокализация.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

Процедура Оформление_ОформлениеРасчетНалогаУСН(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование = СтрЗаменить(ПараметрыОбработчика.ДанныеЭтапа.Наименование, " " + "УСН", "");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ДополнитьПараметрамиПоУмолчанию(Параметры) Экспорт
	
	Если Параметры.Свойство("ТипОперации") И Параметры.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН Тогда
		
		Если Параметры.Свойство("Организация") Тогда
			Параметры.Вставить("ВалютаРегл", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Параметры.Организация));
		Иначе
			Параметры.Вставить("ВалютаРегл", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		КонецЕсли;
		
		Параметры.Вставить("СчетаМатериалов", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
		Параметры.Вставить("ИсключающиесяХозОперацииПрочиеРасходы", ИсключающиесяХозОперацииВПрочихРасходах());
		Параметры.Вставить("ИсключающиесяХозОперацииСебестоимости", ИсключающиесяХозОперацииВСебестоимости());
		Параметры.Вставить("ИсключающиесяРегистраторыСебестоимости", ИсключающиесяРегистраторыСебестоимости());
		Параметры.Вставить("ИсключающиесяДокументыПоступленияСебестоимости", ИсключающиесяДокументыПоступленияСебестоимости());
		Параметры.Вставить("ИсключающиесяДокументыПартийСебестоимости", ИсключающиесяДокументыПартийСебестоимости());
		Параметры.Вставить("ХозОперацииСписанияТоваров", ХозОперацииСписанияТоваров());
		Параметры.Вставить("ХозОперацииСписанияМатериалов", ХозОперацииСписанияМатериалов());
		Параметры.Вставить("ХозОперацииСписанияОСНМА", ХозОперацииСписанияОСНМА());
		Параметры.Вставить("СтатьиЗарплатыИНалогов", СтатьиЗарплатыИНалогов());
		Параметры.Вставить("ТипыНалоговНДФЛ", ТипыНалоговНДФЛ());
		Параметры.Вставить("ДатаПереходаНаЕНП", ДатаПримененияЕНП());
		Параметры.Вставить("ТипыЗаписейСебестоимостиДопРасходов", ТипыЗаписейСебестоимостиДопРасходов());
		ДатаНачалаВеденияУчетаУСНДоходыМинусРасходы = ?(Параметры.Свойство("Организация") И Параметры.Свойство("НачДата"),
			ДатаНачалаВеденияУчетаУСНДоходыМинусРасходы(Параметры.Организация, Параметры.НачДата), '00010101');
		НачДата = ?(Параметры.Свойство("НачДата"), Параметры.НачДата, ТекущаяДатаСеанса());
		ДатаНачалаАнализаОплатыНалогов = Макс(ДобавитьМесяц(НачДата, -12),
			Константы.ДатаНачалаВеденияРеглУчета.Получить(), ДатаНачалаВеденияУчетаУСНДоходыМинусРасходы);
		Параметры.Вставить("ДатаНачалаАнализаОплатыНалогов", ДатаНачалаАнализаОплатыНалогов);
		Параметры.Вставить("ТипыНеОблагаемыеНДС", УчетНДСУП.ВидыДеятельностиНДСУчитываетсяВСтоимости());
		
		РасчетСебестоимостиНДС.ДополнитьСтруктуруПараметровДляДетализацииПартийНДС(Параметры);
		
	Иначе
		Параметры.Вставить("НачДатаАнализаОРП", Макс(ДобавитьМесяц(Параметры.НачДата, -3), Константы.ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах.Получить()));
	КонецЕсли;
	МассивТиповОсобогоНалогообложения = Новый Массив;
	МассивТиповОсобогоНалогообложения.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	МассивТиповОсобогоНалогообложения.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту);
	Параметры.Вставить("ТипыОсобогоНалогообложения", МассивТиповОсобогоНалогообложения);
	Если Не Параметры.Свойство("НачГраница") И Параметры.Свойство("НачДата") Тогда
		Параметры.Вставить("НачГраница", Параметры.НачДата);
	КонецЕсли;
	Если Не Параметры.Свойство("КонГраница") И Параметры.Свойство("КонДата") Тогда
		Параметры.Вставить("КонГраница", Параметры.КонДата);
	КонецЕсли;
	
КонецПроцедуры

// Очищает движения служебных регистров УСН за указанный период по указанной организации.
//	Параметры:
//		ПараметрыЗапроса - Структура - содержит:
//			* НачалоПериода - дата - начало периода, в рамках которого будут очищаться движения регистров;
//			* КонецПериода - дата - конец периода, в рамках которого будут очищаться движения регистров;
//			* Организация - СправочникСсылка.Организации  - будут очищаться движения только для данной организации;
//			* ТипОперации - ПеречислениеСсылка.ТипыРегламентныхОпераций - в зависимости от переданной операции очищает либо движения по всем регистрам, либо только по КУДиР со сторно ЕНВД.
//
Процедура ОчиститьДвиженияРегистровУСНЗаУказанныйПериод(ПараметрыЗапроса, КоличествоОбработанныхДанных = 0) Экспорт
	
	#Область ЗапросКУдаляемымРегистраторам
	
	МассивРегистровДляОчистки = Новый Массив;
	Если ПараметрыЗапроса.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН Тогда
		МассивРегистровДляОчистки.Добавить("РасходыПриУСН");
		МассивРегистровДляОчистки.Добавить("РасходыПриУСНМатериалы");
		МассивРегистровДляОчистки.Добавить("РасходыПриУСНОСиНМА");
		МассивРегистровДляОчистки.Добавить("РасходыПриУСНТовары");
	КонецЕсли;
	МассивРегистровДляОчистки.Добавить("КнигаУчетаДоходовИРасходов");
	
	СтруктураДополнительныхУсловийНаРегистр = Новый Структура;
	СтруктураДополнительныхУсловийНаРегистр.Вставить("КнигаУчетаДоходовИРасходов");
	МассивДополнительныхУсловий = Новый Массив;
	Если ПараметрыЗапроса.ТипОперации.Пустая() Тогда
		// Если пустой тип операции - отменяем движения операции сторнирования, поэтому поставим условие на сторнирование:
		МассивДополнительныхУсловий.Добавить("(ТаблицаДляОчистки.Регистратор <> ТаблицаДляОчистки.ДокументВозникновенияДоходовРасходов
		|		И ТаблицаДляОчистки.ДокументВозникновенияДоходовРасходов <> НЕОПРЕДЕЛЕНО
		|		И НЕ ТаблицаДляОчистки.Регистратор ССЫЛКА Документ.РегламентнаяОперация
		|		ИЛИ ТаблицаДляОчистки.Графа5 < 0
		|		И Не ТаблицаДляОчистки.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
		|		И Не ТаблицаДляОчистки.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
		|		И Не ТаблицаДляОчистки.Регистратор ССЫЛКА Документ.ОтчетОРозничныхВозвратах)");
	Иначе
		// Если тип операции - признание расходов, то ограничение только на то, что это расход.
		МассивДополнительныхУсловий.Добавить("(ТаблицаДляОчистки.Графа6 <> 0 ИЛИ ТаблицаДляОчистки.Графа7 <> 0)");
	КонецЕсли;
	МассивДополнительныхУсловий.Добавить("Не ТаблицаДляОчистки.Регистратор ССЫЛКА Документ.ЗаписьКУДиР");
	МассивДополнительныхУсловий.Добавить("НЕ ТаблицаДляОчистки.Сторно");
	СтруктураДополнительныхУсловийНаРегистр.КнигаУчетаДоходовИРасходов = МассивДополнительныхУсловий;
	
	ОтступДополнительногоУсловияКРегистру = Символы.ПС + Символы.Таб + "И ";
	
	Запрос = ИнициализироватьЗапросПоПараметрам(ПараметрыЗапроса, Новый МенеджерВременныхТаблиц);
	
	ШаблонЗапросаКРегистру = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДляОчистки.Регистратор,
	|	""%ИмяРегистра"" КАК ВидРегистра
	|	&СтрокаСозданияВиртуальнойТаблицы
	|ИЗ
	|	&ИмяРегистра КАК ТаблицаДляОчистки
	|ГДЕ
	|	ТаблицаДляОчистки.Период >= &НачДата
	|	И ТаблицаДляОчистки.Период <= &КонДата
	|	И ТаблицаДляОчистки.Организация = &Организация
	|	И НЕ ТаблицаДляОчистки.Сторно
	|	И НЕ ТИПЗНАЧЕНИЯ(ТаблицаДляОчистки.Регистратор) В (ТИП(Документ.КорректировкаРегистров), ТИП(Документ.ЗаписьКУДиР))
	|	И НЕ (ТИПЗНАЧЕНИЯ(ТаблицаДляОчистки.Регистратор) В (ТИП(Документ.ВводОстатков), ТИП(Документ.ВводОстатковРасходовПриУСН))
	|		И ТаблицаДляОчистки.ДокументВозникновенияРасходов ССЫЛКА Документ.ПервичныйДокумент
	|		И ТаблицаДляОчистки.СуммаРасходов <> 0)";
	
	Для каждого РегистрДляОчистки Из МассивРегистровДляОчистки Цикл
		ТекстЗапросаКРегистру = ШаблонЗапросаКРегистру;
		СтрокаСозданияВиртуальнойТаблицы = ?(МассивРегистровДляОчистки.Получить(0) = РегистрДляОчистки, "ПОМЕСТИТЬ УдаляемыеРегистраторы", "");
		ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "&СтрокаСозданияВиртуальнойТаблицы", СтрокаСозданияВиртуальнойТаблицы);
		ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "&ИмяРегистра", "РегистрНакопления." + РегистрДляОчистки);
		ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "%ИмяРегистра", РегистрДляОчистки);
		Если РегистрДляОчистки = "КнигаУчетаДоходовИРасходов" Тогда
			ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "ДокументВозникновенияРасходов", "ДокументВозникновенияДоходовРасходов");
			ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "ТаблицаДляОчистки.СуммаРасходов <> 0", "ИСТИНА");
		КонецЕсли;
		МассивДопУсловий = Неопределено;
		Если СтруктураДополнительныхУсловийНаРегистр.Свойство(РегистрДляОчистки, МассивДопУсловий) Тогда
			Для каждого ДополнительноеУсловие Из МассивДопУсловий Цикл
				ТекстЗапросаКРегистру = ТекстЗапросаКРегистру + ОтступДополнительногоУсловияКРегистру + ДополнительноеУсловие;
			КонецЦикла;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ТекстЗапросаКРегистру;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область НеудаляемыеДвиженияДокументов
	
	ШаблонЗапросаКРегистру = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНеудаляемыхЗаписей.*
	|ИЗ
	|	УдаляемыеРегистраторы КАК УдаляемыеРегистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ИмяРегистра КАК ТаблицаНеудаляемыхЗаписей
	|		ПО УдаляемыеРегистраторы.Регистратор = ТаблицаНеудаляемыхЗаписей.Регистратор
	|			И УдаляемыеРегистраторы.ВидРегистра = ""%ИмяРегистра""
	|ГДЕ
	|	&НачДата > ТаблицаНеудаляемыхЗаписей.Период
	|		ИЛИ &КонДата < ТаблицаНеудаляемыхЗаписей.Период
	|		ИЛИ ТаблицаНеудаляемыхЗаписей.Организация <> &Организация
	|		ИЛИ ТаблицаНеудаляемыхЗаписей.Сторно
	|		ИЛИ ((ТИПЗНАЧЕНИЯ(ТаблицаНеудаляемыхЗаписей.Регистратор) = ТИП(Документ.ВводОстатков)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаНеудаляемыхЗаписей.Регистратор) = ТИП(Документ.ВводОстатковРасходовПриУСН))
	|		И ТаблицаНеудаляемыхЗаписей.ДокументВозникновенияРасходов ССЫЛКА Документ.ПервичныйДокумент
	|		И ТаблицаНеудаляемыхЗаписей.СуммаРасходов <> 0)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНеудаляемыхЗаписей.Регистратор";
	
	Для каждого РегистрДляОчистки Из МассивРегистровДляОчистки Цикл
		
		Если РегистрДляОчистки = "КнигаУчетаДоходовИРасходов" Тогда
			// Для книги учета доходов и расходов мы должны оставить записи сделанные только в качестве доходов.
			ТекстЗапросаКРегистру =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаписиДоходов.Период КАК Период,
			|	ЗаписиДоходов.Регистратор КАК Регистратор,
			|	ЗаписиДоходов.НомерСтроки КАК НомерСтроки,
			|	ЗаписиДоходов.Активность КАК Активность,
			|	ЗаписиДоходов.Организация КАК Организация,
			|	ЗаписиДоходов.ДокументВозникновенияДоходовРасходов КАК ДокументВозникновенияДоходовРасходов,
			|	ЗаписиДоходов.ВидРасходов КАК ВидРасходов,
			|	ЗаписиДоходов.Статья КАК Статья,
			|	ЗаписиДоходов.Графа4 КАК Графа4,
			|	ЗаписиДоходов.Графа5 КАК Графа5,
			|	ЗаписиДоходов.Графа6 КАК Графа6,
			|	ЗаписиДоходов.Графа7 КАК Графа7,
			|	ЗаписиДоходов.НДС КАК НДС,
			|	ЗаписиДоходов.ДоходЕНВД КАК ДоходЕНВД,
			|	ЗаписиДоходов.ДоходПатент КАК ДоходПатент,
			|	ЗаписиДоходов.РасходЕНВД КАК РасходЕНВД,
			|	ЗаписиДоходов.Содержание КАК Содержание,
			|	ЗаписиДоходов.РеквизитыПервичногоДокумента КАК РеквизитыПервичногоДокумента,
			|	ЗаписиДоходов.Партия КАК Партия,
			|	ЗаписиДоходов.Патент КАК Патент
			|ИЗ
			|	УдаляемыеРегистраторы КАК УдаляемыеРегистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов КАК ЗаписиДоходов
			|		ПО УдаляемыеРегистраторы.Регистратор = ЗаписиДоходов.Регистратор
			|			И УдаляемыеРегистраторы.ВидРегистра = ""%ИмяРегистра""
			|ГДЕ
			|	&НачДата > ЗаписиДоходов.Период
			|		ИЛИ &КонДата < ЗаписиДоходов.Период
			|		ИЛИ ЗаписиДоходов.Организация <> &Организация
			|		ИЛИ &ДополнительноеУсловиеПоРегистру
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
			МассивДопУсловий = Новый Массив;
			Если ПараметрыЗапроса.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН Тогда
				МассивДопУсловий.Добавить("ЗаписиДоходов.Графа5 < 0");
			Иначе
				МассивДопУсловий.Добавить("ЗаписиДоходов.Графа6 <> 0 ИЛИ ЗаписиДоходов.Графа7 <> 0");
				МассивДопУсловий.Добавить("ЗаписиДоходов.Регистратор = ЗаписиДоходов.ДокументВозникновенияДоходовРасходов");
				МассивДопУсловий.Добавить("ЗаписиДоходов.ДокументВозникновенияДоходовРасходов = Неопределено И (ЗаписиДоходов.Графа5 > 0");
				МассивДопУсловий.Добавить("ЗаписиДоходов.Графа5 = 0 И ЗаписиДоходов.ДоходЕНВД > 0)");
			КонецЕсли;
			ДополнительноеУсловиеПоРегистру = СтрСоединить(МассивДопУсловий, Символы.ПС + Символы.Таб + Символы.Таб + "ИЛИ" + " ");
			ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "&ДополнительноеУсловиеПоРегистру", ДополнительноеУсловиеПоРегистру);
		Иначе
			ТекстЗапросаКРегистру = ШаблонЗапросаКРегистру;
		КонецЕсли;
		ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "&ИмяРегистра", "РегистрНакопления." + РегистрДляОчистки);
		ТекстЗапросаКРегистру = СтрЗаменить(ТекстЗапросаКРегистру, "%ИмяРегистра", РегистрДляОчистки);
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаКРегистру;
		
	КонецЦикла;
	
	#КонецОбласти
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдаляемыеРегистраторы.Регистратор КАК Регистратор,
	|	УдаляемыеРегистраторы.ВидРегистра КАК ВидРегистра
	|ИЗ
	|	УдаляемыеРегистраторы КАК УдаляемыеРегистраторы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор
	|ИТОГИ ПО
	|	ВидРегистра";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаРегистраДляОчистки = Результат.Получить(МассивРегистровДляОчистки.Количество() + 1).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраДляОчистки.Следующий() Цикл
		
		ВыборкаДанныхДляОчистки = ВыборкаРегистраДляОчистки.Выбрать();
		ИндексРегистраВМассиве = МассивРегистровДляОчистки.Найти(ВыборкаРегистраДляОчистки.ВидРегистра);
		ВыборкаСохраняемыхДанныхРегистра = Результат.Получить(ИндексРегистраВМассиве + 1).Выбрать();
		ЕстьСохраняемыеДанные = ВыборкаСохраняемыхДанныхРегистра.Следующий();
		
		Пока ВыборкаДанныхДляОчистки.Следующий() Цикл
		
			НаборЗаписей = РегистрыНакопления[ВыборкаДанныхДляОчистки.ВидРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДанныхДляОчистки.Регистратор);
			
			Пока ЕстьСохраняемыеДанные И ВыборкаСохраняемыхДанныхРегистра.Регистратор = ВыборкаДанныхДляОчистки.Регистратор Цикл
				СтрокаЗаписи = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаписи, ВыборкаСохраняемыхДанныхРегистра);
				ЕстьСохраняемыеДанные = ВыборкаСохраняемыхДанныхРегистра.Следующий();
			КонецЦикла;
			
			НаборЗаписей.Записать();
			КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПризнаниеРасходов

Функция ТекстЗапросаЗаполненияРасходов() Экспорт
	
	ЗапросыВременныхТаблиц = Новый Массив;
	
	ЗапросыВременныхТаблиц.Добавить(РасчетСебестоимостиНДС.ТекстЗапросаДетализацияПартийНДС("Организация", "НачДата", "КонДата"));
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаВводаНачальныхОстатков());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаОстатковПриСтаромМетодеХраненияДопРасходов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаОстатков());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаОпределенияМатериалов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаСоответствияДокументовВозникновенияРасходов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПартийРеализацийБезПереходаПраваСобственности());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаРасходовПоСебестоимостиПредварительная());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаРасходовПоСебестоимости());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПрочихРасходов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаРасходовПоЗарплатеИНалогам());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаРасходовПоКредитамИЛизингу());
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПоОплатамНоваяАрхитектураРасчетов());
	Иначе
		ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПоОплатам());
	КонецЕсли;
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПоОплатамПодотчетникам());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПоОплатамЗарплатыИНалогов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаКДокументамВозникновенияРасходов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаКДокументамСписанияРасходов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаКДокументамОплатыРасходов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаТаблицыРегистраторовРасходов());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаТаблицыНачальнойТаблицы()); 
		
	Возврат СтрСоединить(ЗапросыВременныхТаблиц, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

Функция ТекстЗапросаВыборкиДокументовДляЗаполненияРасходов() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистраторов.ДокументВозникновенияРасходов,
	|	ТаблицаРегистраторов.Партия,
	|	ТаблицаРегистраторов.Регистратор КАК Регистратор,
	|	ТаблицаРегистраторов.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаРегистраторов.СуммаОтгрузки,
	|	ТаблицаРегистраторов.ВидОперации,
	|	ТаблицаРегистраторов.ВидРасходов,
	|	ТаблицаРегистраторов.ЭлементРасходов,
	|	ТаблицаРегистраторов.СтатьяРасходов,
	|	ТаблицаРегистраторов.Период КАК Период,
	|	ТаблицаРегистраторов.ХозяйственнаяОперация,
	|	ТаблицаРегистраторов.Организация,
	|	ТаблицаРегистраторов.НДС,
	|	ТаблицаРегистраторов.СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистраторов.ВидОперации В (""Оплата"", ""ОплатаБезРазбивкиПоДокументам"")
	|		ТОГДА 1
	|		КОГДА ТаблицаРегистраторов.ВидОперации В (""Аванс"", ""АвансБезРазбивкиПоДокументам"")
	|		ТОГДА 2
	|		ИНАЧЕ 10
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ТаблицаРегистраторов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|		ТОГДА 2
	|		КОГДА ТаблицаРегистраторов.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА))
	|		ТОГДА 3
	|		КОГДА ТаблицаРегистраторов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|		ТОГДА 4
	|		КОГДА ТаблицаРегистраторов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|		ТОГДА 5
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокРасходов,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистраторов.ПризнаватьРасходамиПриУСН
	|				И ТаблицаРегистраторов.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|			ТОГДА 1
	|		КОГДА ТаблицаРегистраторов.ПризнаватьРасходамиПриУСН
	|				И ТаблицаРегистраторов.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|			ТОГДА 2
	|		КОГДА ТаблицаРегистраторов.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|			ТОГДА 3
	|		КОГДА ТаблицаРегистраторов.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|			ТОГДА 4
	|		ИНАЧЕ 10
	|	КОНЕЦ КАК ПорядокСтатьиРасходов,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистраторов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаРегистраторов.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).РеквизитДопУпорядочивания, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДопПорядокСтатьиРасходов,
	|	ТаблицаРегистраторов.ВидДеятельности,
	|	ТаблицаРегистраторов.ПризнаватьРасходамиПриУСН,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументовЕАЭС.НомерОтметкиОРегистрации ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """")
	|		ИНАЧЕ ДанныеПервичныхДокументовЕАЭС.НомерОтметкиОРегистрации
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.НомерРегистратора, ВЫРАЗИТЬ(ТаблицаРегистраторов.Регистратор КАК Документ.КорректировкаРегистров).Номер) КАК Номер,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументовЕАЭС.ДатаПодтвержденияОплаты ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДанныеПервичныхДокументовЕАЭС.ДатаПодтвержденияОплаты
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ВЫРАЗИТЬ(ТаблицаРегистраторов.Регистратор КАК Документ.КорректировкаРегистров).Дата) КАК Дата,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, ТаблицаРегистраторов.Контрагент) КАК НаименованиеКонтрагента,
	|	ТаблицаРегистраторов.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА УчетнаяПолитика.ОсновноеНалогообложение = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнаватьНДС,
	|	ТаблицаРегистраторов.Сторно
	|ИЗ
	|	ТаблицаРегистраторовРасходов КАК ТаблицаРегистраторов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО ТаблицаРегистраторов.ДокументДляСвязи = ДанныеПервичныхДокументов.Документ
	|		И ТаблицаРегистраторов.Организация = ДанныеПервичныхДокументов.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОплатыНДСТоваровИзЕАЭС КАК ДанныеПервичныхДокументовЕАЭС 
	|	ПО ТаблицаРегистраторов.Регистратор = ДанныеПервичныхДокументовЕАЭС.Регистратор
	|	   И ДанныеПервичныхДокументовЕАЭС.Период >= &ДатаПереходаНаЕНП
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|	ПО Контрагенты.Ссылка = ТаблицаРегистраторов.Контрагент
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаНДС КАК УчетнаяПолитика
	|	ПО УчетнаяПолитика.Организация = ТаблицаРегистраторов.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ПорядокРасходов,
	|	ПорядокСтатьиРасходов,
	|	ДопПорядокСтатьиРасходов,
	|	ТаблицаРегистраторов.ДокументВозникновенияРасходов
	|ИТОГИ
	|	СРЕДНЕЕ(СуммаОплаты)
	|ПО
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура выполняет последовательно:
//	Признание расходов - см. метод ПризнатьРасходы;
//	Отражение расходов - см. метод ОтразитьРасходыКУДиР;
//
// Параметры:
//	Параметры - Структура:
//					НачалоПериода - Дата - дата, начиная с которой будут анализироваться данные инф. базы;
//					КонецПериода - Дата - дата, на конец которой будут анализироваться данные инф. базы;
//					Организация - СправочникСсылка.Организация - организация, по которой будут анализироваться данные инф. базы;
//	АдресХранилища - строка.
Процедура ПризнатьИОтразитьРасходыКУДиР(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	
	НомерЗадания = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
	Операция = Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН;
	ОперацииДляВыполнения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН);	
	ПериодРегламентнойОперации = КонецМесяца(НачалоКвартала(Параметры.КонДата));
	
	Пока ПериодРегламентнойОперации <= Параметры.КонДата И Не Отказ Цикл
		
		ДанныеКПризнаниюРасходовЗаМесяц = ДанныеКРасчету(НомерЗадания, Операция, Параметры.Организация,
			НачалоМесяца(ПериодРегламентнойОперации), ПериодРегламентнойОперации, Отказ);	
			
		Если Не Отказ Тогда
			Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(
				ПериодРегламентнойОперации, ОперацииДляВыполнения, Параметры.Организация, Отказ);
		КонецЕсли;
		
		ЗафиксироватьРасчет(НомерЗадания, Операция, Параметры.Организация,
			Дата(1,1,1), ПериодРегламентнойОперации, ДанныеКПризнаниюРасходовЗаМесяц, Отказ);
		
		ПериодРегламентнойОперации = КонецМесяца(ПериодРегламентнойОперации + 1);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Отказ Тогда
		ВызватьИсключение(НСтр("ru = 'Признание расходов в книгу учета доходов и расходов не выполнено (см. журнал регистрации).';
								|en = 'Expenses are not recognized in the ledger of income and expenditure (see event log).'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет анализ данных оперативных регистров и документов, все найденные расходы заносятся в
// соответствующие регистры УСН
//		с регистраторами, которые были регистраторами у оперативных регистров;
//
// Параметры:
//	ПараметрыРасчета - Структура, см. ЗаполнитьСтруктуруШапкиДокумента менеджера документа "РегламентнаяОперация":
//					НачДата - Дата - дата, начиная с которой будут анализироваться данные инф. базы;
//					КонДата - Дата - дата, на конец которой будут анализироваться данные инф. базы;
//					НачГраница - Граница - граница, начиная с которой будут анализироваться данные инф. базы;
//					КонГраница - Граница - граница, на конец которой будут анализироваться данные инф. базы;
//					Организация - СправочникСсылка.Организация - организация, по которой будут анализироваться данные инф. базы;
Процедура ПризнатьРасходы(ПараметрыРасчета, Движения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВходящиеДанные = ВходящиеДанныеПоОперации(Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН);
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, НСтр("ru = 'Признание расходов для целей УСН.';
																								|en = 'Recognize income for STS purposes.'"));
	
	КлючеваяОперация = "УчетПоУСН.ПризнаниеРасходов";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоОбработанныхДанных = 0;
	
	// Очистим движения тех документов, которые делали движения за указанный период.
	ОчиститьДвиженияРегистровУСНЗаУказанныйПериод(ПараметрыРасчета, КоличествоОбработанныхДанных);
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхДанных, "ОчиститьДвиженияРегистровУСНЗаУказанныйПериод");
	КоличествоОбработанныхДанных = 0;
	
	// Получим исходные данные на основании регистров оперативного учета.
	ВременныеТаблицыДляПризнанияРасходов = ВременныеТаблицыДляЗаполненияРасходов(ПараметрыРасчета);
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ВременныеТаблицыДляЗаполненияРасходов");
	
	КоэффициентОтнесенияРасходовКПрочейДеятельности = КоэффициентОтнесенияРасходовКПрочейДеятельности(ПараметрыРасчета);
	
	// На основании исходных данных оперативных регистров заполним служебные регистры расходов при УСН.
	ЗаполнитьРегистрыРасходовУСН(ВременныеТаблицыДляПризнанияРасходов, КоэффициентОтнесенияРасходовКПрочейДеятельности, Движения, КоличествоОбработанныхДанных);
		
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхДанных);
	
КонецПроцедуры

Функция ТекстЗапросаРасходыНаПриобретениеОС() Экспорт
	
	МассивТекстовЗапроса = Новый Массив;
	
	#Область ПервоначальныеСведения
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПервоначальныеСведения.НематериальныйАктив КАК ЭлементРасходов,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуБУ КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведения.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключитьВСоставАмортизируемогоИмущества)
	|		КОГДА ПервоначальныеСведения.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы)
	|	КОНЕЦ КАК ПорядокУчета,
	|	ЕСТЬNULL(ПорядокУчетаНМАБУ.СтатьяРасходовНУ.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)) КАК ВидДеятельности,
	|	ЕСТЬNULL(ПорядокУчетаНМАБУ.СтатьяРасходовНУ.ПризнаватьРасходамиПриУСН, ИСТИНА) КАК ПризнаватьРасходамиПриУСН
	|ПОМЕСТИТЬ ПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&КонГраница, Организация = &Организация) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(&КонГраница, Организация = &Организация) КАК ПорядокУчетаНМАБУ
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПорядокУчетаНМАБУ.НематериальныйАктив
	|			И ПервоначальныеСведения.Организация = ПорядокУчетаНМАБУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(&КонГраница, Организация = &Организация) КАК ПараметрыАмортизацииНМАБУ
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПараметрыАмортизацииНМАБУ.НематериальныйАктив
	|			И ПервоначальныеСведения.Организация = ПараметрыАмортизацииНМАБУ.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ПринятиеКУчету.Ссылка.ОбъектСтроительства, ПервоначальныеСведения.ОсновноеСредство) КАК ЭлементРасходов,
	|	ПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведения.ПорядокУчетаНУ КАК ПорядокУчета,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.СтатьяРасходовНУ.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)) КАК ВидДеятельности,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.СтатьяРасходовНУ.ПризнаватьРасходамиПриУСН, ИСТИНА) КАК ПризнаватьРасходамиПриУСН
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&КонГраница, Организация = &Организация И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)) КАК ПервоначальныеСведения
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&КонГраница, Организация = &Организация И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)) КАК ПорядокУчетаОСБУ
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И ПервоначальныеСведения.Организация = ПорядокУчетаОСБУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(&КонГраница, Организация = &Организация И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)) КАК ПараметрыАмортизацииОСБУ
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
	|			И ПервоначальныеСведения.Организация = ПараметрыАмортизацииОСБУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4.ОС КАК ПринятиеКУчету
	|		ПО ПервоначальныеСведения.Регистратор = ПринятиеКУчету.Ссылка
	|			И ПервоначальныеСведения.Организация = ПринятиеКУчету.Ссылка.Организация
	|			И ПервоначальныеСведения.ОсновноеСредство = ПринятиеКУчету.ОсновноеСредство
	|			И ПринятиеКУчету.Ссылка.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ПринимаемыеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПриУСНОСиНМА.ЭлементРасходов КАК ЭлементРасходов,
	|	РасходыПриУСНОСиНМА.Организация КАК Организация,
	|	РасходыПриУСНОСиНМА.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	РасходыПриУСНОСиНМА.ВидРасходов,
	|	ПервоначальныеСведения.ДатаПринятияКУчету,
	|	ПервоначальныеСведения.ПорядокУчета,
	|	ПервоначальныеСведения.ВидДеятельности,
	|	ПервоначальныеСведения.ПризнаватьРасходамиПриУСН,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведения.СрокПолезногоИспользования,
	|	МАКСИМУМ(РасходыПриУСНРасходы.Период) КАК Период,
	|	СУММА(РасходыПриУСНРасходы.СуммаРасходов) КАК СуммаРасходов,
	|	СУММА(РасходыПриУСНРасходы.НДС) КАК НДС,
	|	СУММА(РасходыПриУСНРасходы.СуммаОплаты) КАК СуммаОплаты,
	|	НАЧАЛОПЕРИОДА(ПервоначальныеСведения.ДатаПринятияКУчету, ГОД) = &НачГода 
	|		ИЛИ КОНЕЦПЕРИОДА(&ДатаРегистрацииОрганизации, Месяц) = КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачГода, Год, -1), Год) КАК АнализОплатЗаПредыдущиеГода
	|ПОМЕСТИТЬ ПринимаемыеРасходы
	|ИЗ
	|	РегистрНакопления.РасходыПриУСНОСиНМА.Остатки(&КонГраница, Организация = &Организация И ЭлементРасходов <> Неопределено) КАК РасходыПриУСНОСиНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведения КАК ПервоначальныеСведения
	|		ПО РасходыПриУСНОСиНМА.ЭлементРасходов = ПервоначальныеСведения.ЭлементРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНОСиНМА КАК РасходыПриУСНРасходы
	|		ПО РасходыПриУСНОСиНМА.Организация = РасходыПриУСНРасходы.Организация
	|			И РасходыПриУСНОСиНМА.ЭлементРасходов = РасходыПриУСНРасходы.ЭлементРасходов
	|			И РасходыПриУСНОСиНМА.ДокументВозникновенияРасходов = РасходыПриУСНРасходы.ДокументВозникновенияРасходов
	|			И РасходыПриУСНОСиНМА.ВидРасходов = РасходыПриУСНРасходы.ВидРасходов
	|			И РасходыПриУСНРасходы.Период <= &КонДата
	|			И РасходыПриУСНРасходы.СуммаРасходов > 0
	|			И РасходыПриУСНРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|ГДЕ
	|	РасходыПриУСНОСиНМА.СуммаОплатыОстаток > 0 И РасходыПриУСНОСиНМА.СуммаРасходовОстаток > 0
	|	И (ПервоначальныеСведения.ПорядокУчета <> ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключитьВСоставАмортизируемогоИмущества)
	|		ИЛИ КОНЕЦПЕРИОДА(&КонДата, Квартал) = &КонДата И КОНЕЦПЕРИОДА(&ДатаРегистрацииОрганизации, Месяц) <> КОНЕЦПЕРИОДА(&КонДата, Год))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСНОСиНМА.ЭлементРасходов,
	|	РасходыПриУСНОСиНМА.Организация,
	|	РасходыПриУСНОСиНМА.ДокументВозникновенияРасходов,
	|	РасходыПриУСНОСиНМА.ВидРасходов,
	|	ПервоначальныеСведения.ДатаПринятияКУчету,
	|	ПервоначальныеСведения.ПорядокУчета,
	|	ПервоначальныеСведения.ВидДеятельности,
	|	ПервоначальныеСведения.ПризнаватьРасходамиПриУСН,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведения.СрокПолезногоИспользования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходыПриУСНОСиНМА.Организация,
	|	РасходыПриУСНОСиНМА.ЭлементРасходов,
	|	РасходыПриУСНОСиНМА.ДокументВозникновенияРасходов,
	|	РасходыПриУСНОСиНМА.ВидРасходов";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область Оплаты
	МассивТекстовЗапросаОплат = Новый Массив;
	
	// Оплаты за ОС/НМА, сразу определенные по конкретному элементу расходов и учитывающиеся в регистре с заполненным элементом расходов. Анализируем за весь период.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПринимаемыеРасходы.ЭлементРасходов КАК ЭлементРасходов,
	|	ПринимаемыеРасходы.Организация КАК Организация,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ПринимаемыеРасходы.ВидРасходов КАК ВидРасходов,
	|	ПринимаемыеРасходы.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ВЫБОР
	|		КОГДА РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходыПриУСНОплаты.Период
	|		ИНАЧЕ РасходыПриУСНОплаты.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	РасходыПриУСНОплаты.Период КАК Период,
	|	КВАРТАЛ(ВЫБОР
	|			КОГДА &НачГода > РасходыПриУСНОплаты.ДатаОплаты
	|					И &НачГода > РасходыПриУСНОплаты.Период
	|					И &НачГода > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА &НачГода
	|			КОГДА РасходыПриУСНОплаты.ДатаОплаты > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА РасходыПриУСНОплаты.ДатаОплаты
	|			КОГДА РасходыПриУСНОплаты.Период > ПринимаемыеРасходы.ДатаПринятияКУчету
	|					И РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыПриУСНОплаты.Период
	|			ИНАЧЕ ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОНЕЦ) КАК НомерКварталаПериодаОплаты,
	|	1 КАК Графа8_КолКварталовВОтчетномПериоде,
	|	СУММА(РасходыПриУСНОплаты.СуммаОплаты) КАК СуммаОплаты
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	ПринимаемыеРасходы КАК ПринимаемыеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНОСиНМА КАК РасходыПриУСНОплаты
	|		ПО ПринимаемыеРасходы.Организация = РасходыПриУСНОплаты.Организация
	|			И ПринимаемыеРасходы.ЭлементРасходов = РасходыПриУСНОплаты.ЭлементРасходов
	|			И ПринимаемыеРасходы.ДокументВозникновенияРасходов = РасходыПриУСНОплаты.ДокументВозникновенияРасходов
	|			И ПринимаемыеРасходы.ВидРасходов = РасходыПриУСНОплаты.ВидРасходов
	|			И (ПринимаемыеРасходы.СуммаОплаты = 0)
	|ГДЕ
	|	(ПринимаемыеРасходы.АнализОплатЗаПредыдущиеГода
	|				И РасходыПриУСНОплаты.Период <= &КонДата
	|			ИЛИ РасходыПриУСНОплаты.Период МЕЖДУ &НачГода И &КонДата)
	|	И РасходыПриУСНОплаты.СуммаОплаты > 0
	|	И РасходыПриУСНОплаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПринимаемыеРасходы.Организация,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов,
	|	РасходыПриУСНОплаты.Период,
	|	ПринимаемыеРасходы.ДатаПринятияКУчету,
	|	ПринимаемыеРасходы.ВидРасходов,
	|	ВЫБОР
	|		КОГДА РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходыПриУСНОплаты.Период
	|		ИНАЧЕ РасходыПриУСНОплаты.ДатаОплаты
	|	КОНЕЦ,
	|	ПринимаемыеРасходы.ЭлементРасходов,
	|	КВАРТАЛ(ВЫБОР
	|			КОГДА &НачГода > РасходыПриУСНОплаты.ДатаОплаты
	|					И &НачГода > РасходыПриУСНОплаты.Период
	|					И &НачГода > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА &НачГода
	|			КОГДА РасходыПриУСНОплаты.ДатаОплаты > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА РасходыПриУСНОплаты.ДатаОплаты
	|			КОГДА РасходыПриУСНОплаты.Период > ПринимаемыеРасходы.ДатаПринятияКУчету
	|					И РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыПриУСНОплаты.Период
	|			ИНАЧЕ ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОНЕЦ)";
	МассивТекстовЗапросаОплат.Добавить(ТекстЗапроса);
	
	// Оплаты за ОС/НМА, сразу определенные как ОС/НМА, но без конкретизации по элементу расходов.
	// Анализируем только тот период, который был до (или равен) конкретизации по элементу расходов.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПринимаемыеРасходы.ЭлементРасходов КАК ЭлементРасходов,
	|	ПринимаемыеРасходы.Организация КАК Организация,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ПринимаемыеРасходы.ВидРасходов КАК ВидРасходов,
	|	ПринимаемыеРасходы.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ВЫБОР
	|		КОГДА РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходыПриУСНОплаты.Период
	|		ИНАЧЕ РасходыПриУСНОплаты.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	РасходыПриУСНОплаты.Период КАК Период,
	|	КВАРТАЛ(ВЫБОР
	|			КОГДА &НачГода > РасходыПриУСНОплаты.ДатаОплаты
	|					И &НачГода > РасходыПриУСНОплаты.Период
	|					И &НачГода > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА &НачГода
	|			КОГДА РасходыПриУСНОплаты.ДатаОплаты > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА РасходыПриУСНОплаты.ДатаОплаты
	|			КОГДА РасходыПриУСНОплаты.Период > ПринимаемыеРасходы.ДатаПринятияКУчету
	|					И РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыПриУСНОплаты.Период
	|			ИНАЧЕ ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОНЕЦ) КАК НомерКварталаПериодаОплаты,
	|	1 КАК Графа8_КолКварталовВОтчетномПериоде,
	|	СУММА(РасходыПриУСНОплаты.СуммаОплаты) КАК СуммаОплаты
	|ИЗ
	|	ПринимаемыеРасходы КАК ПринимаемыеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНОСиНМА КАК РасходыПриУСНОплаты
	|		ПО ПринимаемыеРасходы.Организация = РасходыПриУСНОплаты.Организация
	|			И (РасходыПриУСНОплаты.ЭлементРасходов = НЕОПРЕДЕЛЕНО)
	|			И ПринимаемыеРасходы.ДокументВозникновенияРасходов = РасходыПриУСНОплаты.ДокументВозникновенияРасходов
	|			И (ПринимаемыеРасходы.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС))
	|			И (ПринимаемыеРасходы.СуммаОплаты > 0)
	|			И (РасходыПриУСНОплаты.Период <= ПринимаемыеРасходы.Период)
	|ГДЕ
	|	(ПринимаемыеРасходы.АнализОплатЗаПредыдущиеГода
	|				И РасходыПриУСНОплаты.Период <= &КонДата
	|			ИЛИ РасходыПриУСНОплаты.Период МЕЖДУ &НачГода И &КонДата)
	|	И РасходыПриУСНОплаты.СуммаОплаты > 0
	|	И РасходыПриУСНОплаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПринимаемыеРасходы.Организация,
	|	ПринимаемыеРасходы.ВидРасходов,
	|	ВЫБОР
	|		КОГДА РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходыПриУСНОплаты.Период
	|		ИНАЧЕ РасходыПриУСНОплаты.ДатаОплаты
	|	КОНЕЦ,
	|	ПринимаемыеРасходы.ЭлементРасходов,
	|	ПринимаемыеРасходы.ДатаПринятияКУчету,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов,
	|	РасходыПриУСНОплаты.Период,
	|	КВАРТАЛ(ВЫБОР
	|			КОГДА &НачГода > РасходыПриУСНОплаты.ДатаОплаты
	|					И &НачГода > РасходыПриУСНОплаты.Период
	|					И &НачГода > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА &НачГода
	|			КОГДА РасходыПриУСНОплаты.ДатаОплаты > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА РасходыПриУСНОплаты.ДатаОплаты
	|			КОГДА РасходыПриУСНОплаты.Период > ПринимаемыеРасходы.ДатаПринятияКУчету
	|					И РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыПриУСНОплаты.Период
	|			ИНАЧЕ ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОНЕЦ)";
	МассивТекстовЗапросаОплат.Добавить(ТекстЗапроса);
	
	// Оплаты за ОС/НМА, сразу определенные как ОС/НМА, но без конкретизации по элементу расходов. Анализируем период, после конкретизации по элементу расходов.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПринимаемыеРасходы.ЭлементРасходов КАК ЭлементРасходов,
	|	ПринимаемыеРасходы.Организация КАК Организация,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ПринимаемыеРасходы.ВидРасходов КАК ВидРасходов,
	|	ПринимаемыеРасходы.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ВЫБОР
	|		КОГДА РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходыПриУСНОплаты.Период
	|		ИНАЧЕ РасходыПриУСНОплаты.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	РасходыПриУСНОплаты.Период КАК Период,
	|	КВАРТАЛ(ВЫБОР
	|			КОГДА &НачГода > РасходыПриУСНОплаты.ДатаОплаты
	|					И &НачГода > РасходыПриУСНОплаты.Период
	|					И &НачГода > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА &НачГода
	|			КОГДА РасходыПриУСНОплаты.ДатаОплаты > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА РасходыПриУСНОплаты.ДатаОплаты
	|			КОГДА РасходыПриУСНОплаты.Период > ПринимаемыеРасходы.ДатаПринятияКУчету
	|					И РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыПриУСНОплаты.Период
	|			ИНАЧЕ ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОНЕЦ) КАК НомерКварталаПериодаОплаты,
	|	1 КАК Графа8_КолКварталовВОтчетномПериоде,
	|	СУММА(РасходыПриУСНОплаты.СуммаОплаты) КАК СуммаОплаты
	|ИЗ
	|	ПринимаемыеРасходы КАК ПринимаемыеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНОСиНМА КАК РасходыПриУСНОплаты
	|		ПО ПринимаемыеРасходы.Организация = РасходыПриУСНОплаты.Организация
	|			И ПринимаемыеРасходы.ЭлементРасходов = РасходыПриУСНОплаты.ЭлементРасходов
	|			И ПринимаемыеРасходы.ДокументВозникновенияРасходов = РасходыПриУСНОплаты.ДокументВозникновенияРасходов
	|			И ПринимаемыеРасходы.ВидРасходов = РасходыПриУСНОплаты.ВидРасходов
	|			И (ПринимаемыеРасходы.СуммаОплаты > 0)
	|			И (РасходыПриУСНОплаты.Период > ПринимаемыеРасходы.Период)
	|ГДЕ
	|	(ПринимаемыеРасходы.АнализОплатЗаПредыдущиеГода
	|				И РасходыПриУСНОплаты.Период <= &КонДата
	|			ИЛИ РасходыПриУСНОплаты.Период МЕЖДУ &НачГода И &КонДата)
	|	И РасходыПриУСНОплаты.СуммаОплаты > 0
	|	И РасходыПриУСНОплаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПринимаемыеРасходы.ВидРасходов,
	|	ПринимаемыеРасходы.ДатаПринятияКУчету,
	|	ВЫБОР
	|		КОГДА РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходыПриУСНОплаты.Период
	|		ИНАЧЕ РасходыПриУСНОплаты.ДатаОплаты
	|	КОНЕЦ,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов,
	|	ПринимаемыеРасходы.Организация,
	|	ПринимаемыеРасходы.ЭлементРасходов,
	|	РасходыПриУСНОплаты.Период,
	|	КВАРТАЛ(ВЫБОР
	|			КОГДА &НачГода > РасходыПриУСНОплаты.ДатаОплаты
	|					И &НачГода > РасходыПриУСНОплаты.Период
	|					И &НачГода > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА &НачГода
	|			КОГДА РасходыПриУСНОплаты.ДатаОплаты > ПринимаемыеРасходы.ДатаПринятияКУчету
	|				ТОГДА РасходыПриУСНОплаты.ДатаОплаты
	|			КОГДА РасходыПриУСНОплаты.Период > ПринимаемыеРасходы.ДатаПринятияКУчету
	|					И РасходыПриУСНОплаты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыПриУСНОплаты.Период
	|			ИНАЧЕ ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОНЕЦ)
	|" + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ПринимаемыеРасходы.Организация,
	|	ПринимаемыеРасходы.ЭлементРасходов,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов,
	|	ПринимаемыеРасходы.ВидРасходов";
	МассивТекстовЗапросаОплат.Добавить(ТекстЗапроса);
	
	МассивТекстовЗапроса.Добавить(СтрСоединить(МассивТекстовЗапросаОплат, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	#КонецОбласти
	
	#Область НераспределенныеОплатыПереклассификация
	
	ТекстыЗапросаОплатПереквалификация = Новый Массив;
	
	// Оплаты за ОС/НМА, сразу определенные как материалы, без конкретизации по элементу расходов.
	// Анализируем только тот период, который был до (или равен) конкретизации по элементу расходов.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПриУСНОплаты.Организация КАК Организация,
	|	РасходыПриУСНОплаты.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	РасходыПриУСНОплаты.Период КАК ДатаОплаты,
	|	РасходыПриУСНОплаты.Регистратор КАК ДокументОплаты,
	|	РасходыПриУСНОплаты.СуммаОплаты КАК СуммаОплаты
	|ПОМЕСТИТЬ ОплатыПереквалификация
	|ИЗ
	|	ПринимаемыеРасходы КАК ПринимаемыеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНМатериалы КАК РасходыПриУСНОплаты
	|		ПО ПринимаемыеРасходы.Организация = РасходыПриУСНОплаты.Организация
	|			И ПринимаемыеРасходы.ДокументВозникновенияРасходов = РасходыПриУСНОплаты.ДокументВозникновенияРасходов
	|			И (ПринимаемыеРасходы.СуммаОплаты > 0)
	|			И (РасходыПриУСНОплаты.Период <= ПринимаемыеРасходы.Период)
	|ГДЕ
	|	(ПринимаемыеРасходы.АнализОплатЗаПредыдущиеГода
	|				И РасходыПриУСНОплаты.Период <= &КонДата
	|			ИЛИ РасходыПриУСНОплаты.Период МЕЖДУ &НачГода И &КонДата)
	|	И РасходыПриУСНОплаты.СуммаОплаты > 0
	|	И РасходыПриУСНОплаты.СуммаРасходов = 0
	|	И РасходыПриУСНОплаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
	ТекстыЗапросаОплатПереквалификация.Добавить(ТекстЗапроса);
	
	// Оплаты за ОС/НМА, сразу определенные как товары, без конкретизации по элементу расходов.
	// Анализируем только тот период, который был до (или равен) конкретизации по элементу расходов.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПриУСНОплаты.Организация КАК Организация,
	|	РасходыПриУСНОплаты.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	РасходыПриУСНОплаты.Период КАК ДатаОплаты,
	|	РасходыПриУСНОплаты.Регистратор КАК ДокументОплаты,
	|	РасходыПриУСНОплаты.СуммаОплаты КАК СуммаОплаты
	|ИЗ
	|	ПринимаемыеРасходы КАК ПринимаемыеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНТовары КАК РасходыПриУСНОплаты
	|		ПО ПринимаемыеРасходы.Организация = РасходыПриУСНОплаты.Организация
	|			И ПринимаемыеРасходы.ДокументВозникновенияРасходов = РасходыПриУСНОплаты.ДокументВозникновенияРасходов
	|			И (ПринимаемыеРасходы.СуммаОплаты > 0)
	|			И (РасходыПриУСНОплаты.Период <= ПринимаемыеРасходы.Период)
	|ГДЕ
	|	(ПринимаемыеРасходы.АнализОплатЗаПредыдущиеГода
	|				И РасходыПриУСНОплаты.Период <= &КонДата
	|			ИЛИ РасходыПриУСНОплаты.Период МЕЖДУ &НачГода И &КонДата)
	|	И РасходыПриУСНОплаты.СуммаОплаты > 0
	|	И РасходыПриУСНОплаты.СуммаРасходов = 0
	|	И РасходыПриУСНОплаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
	
	ТекстыЗапросаОплатПереквалификация.Добавить(ТекстЗапроса);
	
	МассивТекстовЗапроса.Добавить(СтрСоединить(ТекстыЗапросаОплатПереквалификация, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	#КонецОбласти
	
	#Область РасходыКПризнанию
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПринимаемыеРасходы.ЭлементРасходов КАК ЭлементРасходов,
	|	ПринимаемыеРасходы.Организация КАК Организация,
	|	ПринимаемыеРасходы.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ПринимаемыеРасходы.ВидРасходов КАК ВидРасходов,
	|	ПринимаемыеРасходы.ДатаПринятияКУчету КАК Графа3_ДатаВводаВЭксплуатацию,
	|	ПринимаемыеРасходы.ПорядокУчета КАК ПорядокУчета,
	|	ПринимаемыеРасходы.ВидДеятельности КАК ВидДеятельности,
	|	ПринимаемыеРасходы.ПризнаватьРасходамиПриУСН КАК ПризнаватьРасходамиПриУСН,
	|	ПринимаемыеРасходы.Период КАК ДатаВозникновения,
	|	ПринимаемыеРасходы.СуммаРасходов КАК СуммаРасходов,
	|	ПринимаемыеРасходы.НДС КАК НДС,
	|	ПринимаемыеРасходы.СуммаОплаты КАК ПервоначальнаяСуммаОплаты,
	|	ЕСТЬNULL(РасходыПриУСНОплаты.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА ПринимаемыеРасходы.ПорядокУчета = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключитьВСоставАмортизируемогоИмущества)
	|			ТОГДА КОНЕЦПЕРИОДА(&КонДата, КВАРТАЛ)
	|		КОГДА РасходыПриУСНОплаты.Период ЕСТЬ NULL
	|			ТОГДА ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОГДА ПринимаемыеРасходы.ДатаПринятияКУчету > ПринимаемыеРасходы.Период
	|				И ПринимаемыеРасходы.ДатаПринятияКУчету > РасходыПриУСНОплаты.Период
	|			ТОГДА ПринимаемыеРасходы.ДатаПринятияКУчету
	|		КОГДА ПринимаемыеРасходы.Период > РасходыПриУСНОплаты.Период
	|			ТОГДА КОНЕЦПЕРИОДА(ПринимаемыеРасходы.Период, ДЕНЬ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(РасходыПриУСНОплаты.Период, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА РасходыПриУСНОплаты.НомерКварталаПериодаОплаты ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 5 - РасходыПриУСНОплаты.НомерКварталаПериодаОплаты
	|	КОНЕЦ КАК Графа9_КолКварталовВНалПериоде,
	|	1 КАК Графа8_КолКварталовВОтчетномПериоде,
	|	ЕСТЬNULL(РасходыПриУСНОплаты.СуммаОплаты, 0) КАК Графа5_ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(РасходыПриУСНОплаты.СуммаОплаты, 0) КАК СуммаОплаты,
	|	100 КАК Графа10_ДоляРасходовЗаНалПериод,
	|	&Ссылка КАК Регистратор,
	|	&ТипОперации КАК ТипОперации,
	|	&КонДата КАК КонДата,
	|	&Номер КАК Номер
	|ПОМЕСТИТЬ РасходыКПризнанию
	|ИЗ
	|	ПринимаемыеРасходы КАК ПринимаемыеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК РасходыПриУСНОплаты
	|		ПО ПринимаемыеРасходы.Организация = РасходыПриУСНОплаты.Организация
	|			И ПринимаемыеРасходы.ЭлементРасходов = РасходыПриУСНОплаты.ЭлементРасходов
	|			И ПринимаемыеРасходы.ДокументВозникновенияРасходов = РасходыПриУСНОплаты.ДокументВозникновенияРасходов
	|			И ПринимаемыеРасходы.ВидРасходов = РасходыПриУСНОплаты.ВидРасходов";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ИтоговыйТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ИтоговыйТекстЗапроса;
	
КонецФункции

// Процедура выполняет анализ регистров УСН, если условия признания расходов соблюдены, расходы списываются и заносятся
// в регистры КУДиР и КУДиР Раздел 2.
//
// Параметры:
//	ПараметрыРасчета - Структура, см. ЗаполнитьСтруктуруШапкиДокумента менеджера документа "РегламентнаяОперация":
//					КонДата - Дата - дата, на конец которой будут анализироваться данные регистров УСН;
//					Организация - СправочникСсылка.Организация - организация, по которой будут анализироваться данные регистров УСН;
//					Ссылка - ДокументСсылка.РегламентнаяОперация - документ регламентной операции в который будут записываться движения;
//	Движения - движения документа "РегламентнаяОперация";
//	Отказ - булево - переменная, влияющая на отказ от проведения документа "РегламентнаяОперация".
Процедура ОтразитьРасходыКУДиР(ПараметрыРасчета, Движения, Отказ) Экспорт
	
	КлючеваяОперация = "УчетПоУСН.ОтражениеПризнанныхРасходовВКУДиР";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	УстановитьСлужебноеСвойствоДляРегистровУСН(Движения);
	
	ВременныеТаблицыРасходовНаОС = ПризнанныеРасходыПоАмортизации(ПараметрыРасчета);
	
	ПараметрыУчетаОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(ПараметрыРасчета.Организация, ПараметрыРасчета.НачДата);
	ПризнаватьНДС = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	ЗаполнитьКУДиР2ПризнаннымиРасходами(ВременныеТаблицыРасходовНаОС, Движения, ПризнаватьНДС);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Движения.КнигаУчетаДоходовИРасходовРаздел2.Количество());
	
КонецПроцедуры

Процедура УстановитьСлужебноеСвойствоДляРегистровУСН(Движения) Экспорт
	
	Движения.КнигаУчетаДоходовИРасходовРаздел2.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	Движения.РасходыПриУСН.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	Движения.РасходыПриУСНМатериалы.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	Движения.РасходыПриУСНОСиНМА.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	Движения.РасходыПриУСНТовары.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СторноДоходов

Функция ТекстЗапросаСторноДоходов() Экспорт
	
	ЗапросыВременныхТаблиц = Новый Массив;
	
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаУчетнаяПолитика());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаТаблицаДействующихПатентовПоПодразделениям());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаОрганизацииНаЕНВД());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПродаж());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаДоходовДляАнализаНеобходимостиСторно());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПродажИПлатежейКлиентам());
	ЗапросыВременныхТаблиц.Добавить("УНИЧТОЖИТЬ ТаблицаДействующихПатентов");
	ЗапросыВременныхТаблиц.Добавить("УНИЧТОЖИТЬ ВТОрганизацииНаЕНВД");
	ЗапросыВременныхТаблиц.Добавить("УНИЧТОЖИТЬ ДоходыДляПроверкиНаСторно");
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаЭквайринговыеПлатежи());
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаПродажИПлатежейОтБанка());
	ЗапросыВременныхТаблиц.Добавить("УНИЧТОЖИТЬ ВТПродажи");
	ЗапросыВременныхТаблиц.Добавить(ТекстЗапросаРегистраторовДоходов());
	ЗапросыВременныхТаблиц.Добавить("УНИЧТОЖИТЬ ТаблицаПродажИПлатежейКлиентам");
	ЗапросыВременныхТаблиц.Добавить("УНИЧТОЖИТЬ ВТЭквайринговыеПлатежи");
	
	Возврат СтрСоединить(ЗапросыВременныхТаблиц, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

Функция ТекстЗапросаВыборкиДокументовДляЗаполненияСторно() Экспорт
	
	МассивЗапросов = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРегистраторовДоходов.Период КАК Период,
	|	ТаблицаРегистраторовДоходов.Регистратор КАК Регистратор,
	|	ТаблицаРегистраторовДоходов.Организация КАК Организация,
	|	ТаблицаРегистраторовДоходов.Патент КАК Патент,
	|	ТаблицаРегистраторовДоходов.ДокументВозникновенияДоходов КАК Платеж,
	|	(ТаблицаРегистраторовДоходов.СуммаНДС) КАК СуммаНДС,
	|	(ТаблицаРегистраторовДоходов.СуммаНДСКомиссии) КАК СуммаНДСКомиссии,
	|	(ТаблицаРегистраторовДоходов.СуммаВсего) КАК СуммаВсего,
	|	(ТаблицаРегистраторовДоходов.СуммаУСН) КАК СуммаУСН,
	|	(ТаблицаРегистраторовДоходов.СуммаЕНВД) КАК СуммаЕНВД,
	|	(ТаблицаРегистраторовДоходов.СуммаПатент) КАК СуммаПатент,
	|	(ТаблицаРегистраторовДоходов.СуммаКомиссии) КАК СуммаНеПризнано,
	|	(ТаблицаРегистраторовДоходов.СуммаОплаты) КАК СуммаОплаты,
	|	(ТаблицаРегистраторовДоходов.СуммаПлатежа) КАК СуммаПлатежа,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.НомерРегистратора, ВЫРАЗИТЬ(ТаблицаРегистраторовДоходов.Регистратор КАК Документ.КорректировкаРегистров).Номер) КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ВЫРАЗИТЬ(ТаблицаРегистраторовДоходов.Регистратор КАК Документ.КорректировкаРегистров).Дата) КАК Дата,
	|	ТаблицаРегистраторовДоходов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаРегистраторовДоходов.ДоговорЭквайринга КАК ДоговорЭквайринга
	|ИЗ
	|	ТаблицаРегистраторовДоходов КАК ТаблицаРегистраторовДоходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО ТаблицаРегистраторовДоходов.Регистратор = ДанныеПервичныхДокументов.Документ
	|		И ТаблицаРегистраторовДоходов.Организация = ДанныеПервичныхДокументов.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРегистраторовДоходов.Период,
	|	ВЫБОР КОГДА ТаблицаРегистраторовДоходов.СуммаКомиссии > 0 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ,
	|	ТаблицаРегистраторовДоходов.Регистратор,
	|	ТаблицаРегистраторовДоходов.ДокументВозникновенияДоходов
	|АВТОУПОРЯДОЧИВАНИЕ
	|
	|ИТОГИ
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаВсего),
	|	СУММА(СуммаУСН),
	|	СУММА(СуммаЕНВД),
	|	СУММА(СуммаПатент),
	|	СУММА(СуммаНеПризнано),
	|	СУММА(СуммаОплаты),
	|	СУММА(СуммаПлатежа),
	|	МАКСИМУМ(ДоговорЭквайринга)
	|ПО
	|	Регистратор,
	|	Период,
	|	Платеж";
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРегистраторовДоходов.Регистратор КАК Регистратор,
	|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОРП.НДС, 0)) КАК СуммаНДС,
	|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОРП.Графа4, 0)) КАК СуммаВсего,
	|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОРП.Графа5, 0)) КАК СуммаУСН,
	|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОРП.ДоходЕНВД, 0)) КАК СуммаЕНВД,
	|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОРП.ДоходПатент, 0)) КАК СуммаПатент,
	|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОРП.Графа4 - КнигаУчетаДоходовИРасходовОРП.Графа5
	|		- КнигаУчетаДоходовИРасходовОРП.ДоходЕНВД - КнигаУчетаДоходовИРасходовОРП.ДоходПатент, 0)) КАК СуммаНеПризнано
	|	
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Регистратор, Т.Организация ИЗ ТаблицаРегистраторовДоходов КАК Т
	|		ГДЕ Т.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах) КАК ТаблицаРегистраторовДоходов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходовОРП
	|	ПО ТаблицаРегистраторовДоходов.Организация = КнигаУчетаДоходовИРасходовОРП.Организация
	|	И ТаблицаРегистраторовДоходов.Регистратор = КнигаУчетаДоходовИРасходовОРП.Регистратор
	|	И ТаблицаРегистраторовДоходов.Регистратор = КнигаУчетаДоходовИРасходовОРП.ДокументВозникновенияДоходовРасходов
	|	И ТаблицаРегистраторовДоходов.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|
	|ГДЕ
	|	КнигаУчетаДоходовИРасходовОРП.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистраторовДоходов.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРегистраторовДоходов.Регистратор";
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРегистраторовДоходов.ДокументВозникновенияДоходов КАК Платеж,
	|	КнигаУчетаДоходовИРасходов.ДокументВозникновенияДоходовРасходов КАК ДокументВозникновенияДоходовРасходов,
	|	КнигаУчетаДоходовИРасходов.Статья КАК Статья,
	|	КнигаУчетаДоходовИРасходов.Патент КАК Патент,
	|	СУММА(КнигаУчетаДоходовИРасходов.НДС) КАК ДоходНДС,
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа4) КАК ДоходВсего,
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа5) КАК ДоходУСН,
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа5) КАК ДоходУСНДляНДС,
	|	СУММА(КнигаУчетаДоходовИРасходов.ДоходЕНВД) КАК ДоходЕНВД,
	|	СУММА(КнигаУчетаДоходовИРасходов.ДоходПатент) КАК ДоходПатент,
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа4 - КнигаУчетаДоходовИРасходов.Графа5 - КнигаУчетаДоходовИРасходов.ДоходЕНВД - КнигаУчетаДоходовИРасходов.ДоходПатент) КАК ДоходНеПризнано,
	|	0 КАК СуммаПлатежа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ДокументВозникновенияДоходов, Т.Организация ИЗ ТаблицаРегистраторовДоходов КАК Т
	|	ГДЕ НЕ Т.ДокументВозникновенияДоходов ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|		И НЕ Т.ДокументВозникновенияДоходов ССЫЛКА Документ.ОтчетОРозничныхВозвратах) КАК ТаблицаРегистраторовДоходов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|	ПО ТаблицаРегистраторовДоходов.Организация = КнигаУчетаДоходовИРасходов.Организация
	|	И ТаблицаРегистраторовДоходов.ДокументВозникновенияДоходов = КнигаУчетаДоходовИРасходов.Регистратор
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Графа4 <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистраторовДоходов.ДокументВозникновенияДоходов,
	|	КнигаУчетаДоходовИРасходов.ДокументВозникновенияДоходовРасходов,
	|	КнигаУчетаДоходовИРасходов.Статья,
	|	КнигаУчетаДоходовИРасходов.Патент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРегистраторовДоходов.ДокументВозникновенияДоходов,
	|	КнигаУчетаДоходовИРасходов.ДокументВозникновенияДоходовРасходов,
	|	КнигаУчетаДоходовИРасходов.Статья,
	|	КнигаУчетаДоходовИРасходов.Патент УБЫВ";
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРегистраторовДоходов.Регистратор КАК Регистратор,
	|	ТаблицаРегистраторовДоходов.ДоговорЭквайринга КАК Договор,
	|	ЕСТЬNULL(СРЕДНЕЕ(ТаблицаПродажИПлатежейОтБанка.СуммаОплатыПлатежнымиКартами), СУММА(ТаблицаРегистраторовДоходов.СуммаОплаты)) КАК Сумма,
	|	ЕСТЬNULL(Сумма(ТаблицаПродажИПлатежейОтБанка.СуммаНДС - ТаблицаПродажИПлатежейОтБанка.СуммаНДСКомиссии), СУММА(ТаблицаРегистраторовДоходов.СуммаНДС)) КАК СуммаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Регистратор,
	|		Т.Организация,
	|		Т.ДоговорЭквайринга,
	|		СУММА(Т.СуммаОплаты) КАК СуммаОплаты,
	|		СУММА(Т.СуммаНДС) КАК СуммаНДС
	|	ИЗ ТаблицаРегистраторовДоходов КАК Т
	|	СГРУППИРОВАТЬ ПО
	|		Т.Регистратор,
	|		Т.Организация,
	|		Т.ДоговорЭквайринга) КАК ТаблицаРегистраторовДоходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПродажИПлатежейОтБанка КАК ТаблицаПродажИПлатежейОтБанка
	|	ПО ТаблицаРегистраторовДоходов.Организация = ТаблицаПродажИПлатежейОтБанка.Организация
	|	И ТаблицаРегистраторовДоходов.Регистратор = ТаблицаПродажИПлатежейОтБанка.Регистратор
	|	И ТаблицаРегистраторовДоходов.ДоговорЭквайринга = ТаблицаПродажИПлатежейОтБанка.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистраторовДоходов.Регистратор,
	|	ТаблицаРегистраторовДоходов.ДоговорЭквайринга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРегистраторовДоходов.Регистратор,
	|	ТаблицаРегистраторовДоходов.ДоговорЭквайринга";
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВТ_Данные.Организация КАК Организация,
	|	ВТ_Данные.НачалоМесяца КАК Период,
	|	ВЫБОР
	|		КОГДА НастройкиУчетаНДСПриУСН.ОсновноеНалогообложение = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК НеУчитыватьНДСВДоходах
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДСПриУСН КАК НастройкиУчетаНДСПриУСН
	|		ПО ВТ_Данные.Организация = НастройкиУчетаНДСПриУСН.Организация
	|			И ВТ_Данные.Период = НастройкиУчетаНДСПриУСН.Период";
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	Возврат СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());

КонецФункции

// Процедура выполняет сторнирование доходов по деятельности ЕНВД в КУДиР, ранее записанными приходом ДС.
Процедура СторноДоходовКУДиР(Параметры, АдресХранилища = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	
	КлючеваяОперация = "УчетПоУСН.СторноДоходовКУДиР";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоОбработанныхДанных = 0;
	
	НомерЗадания = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
	Операция = Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР;
	
	ВходящиеДанные = ВходящиеДанныеПоОперации(Операция);
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, НСтр("ru = 'Сторно доходов книги учета доходов и расходов.';
																								|en = 'Income storno of Ledger of income and expenditure.'"));
	
	ДанныеКСторнированиюДоходовЗаМесяц = ДанныеКРасчету(НомерЗадания, Операция, Параметры.Организация,
		Параметры.НачДата, Параметры.КонДата, Отказ);
		
	Если Отказ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ТипОперации", Перечисления.ТипыРегламентныхОпераций.ПустаяСсылка());
	
	// Очистим движения тех документов, которые делали движения за указанный период.
	ОчиститьДвиженияРегистровУСНЗаУказанныйПериод(Параметры, КоличествоОбработанныхДанных);
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхДанных, "ОчиститьДвиженияРегистровУСНЗаУказанныйПериод");
	КоличествоОбработанныхДанных = 0;
	
	// Получим исходные данные на основании регистров оперативного учета.
	ВременныеТаблицыДляЗаполненияСторно = ВременныеТаблицыДляЗаполненияСторно(Параметры);
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ДанныеКРасчету");
	
	СторнироватьОтраженныеДоходы(ВременныеТаблицыДляЗаполненияСторно, КоличествоОбработанныхДанных);
	
	ЗафиксироватьРасчет(НомерЗадания, Операция, Параметры.Организация,
		Параметры.НачДата, Параметры.КонДата, ДанныеКСторнированиюДоходовЗаМесяц, Отказ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхДанных);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Выполняет обработку установки даты начала признания доходов новым методом:
// - начиная с даты начала для регистра "КнигаУчетаДоходовИРасходов":
//		для документов "Приходный кассовый ордер" с операциями "ПоступлениеДенежныхСредствИзКассыККМ" или "ПоступлениеДенежныхСредствИзДругойКассы" удаляет движения;
//		для документов "Отчет о розничных продажах" добавляет движения.
//
Процедура ОбработкаУстановкиДатыНачалаПризнанияДоходовНовымМетодом(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ОбработаноПКО", 0);
	Результат.Вставить("ОбработаноОРП", 0);
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		МассивТекстовЗапроса = Новый Массив;
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОрганизацииНаУСН.Организация КАК Организация,
		|	ОрганизацииНаУСН.Период КАК НачалоПериода,
		|	МИНИМУМ(ЕСТЬNULL(ОстальныеОрганизации.Период, ДАТАВРЕМЯ(2120, 1, 1))) КАК КонецПериода
		|ПОМЕСТИТЬ ВТДанныеПоОрганизациямНаУСН
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения КАК ОрганизацииНаУСН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК ОстальныеОрганизации
		|		ПО ОрганизацииНаУСН.Организация = ОстальныеОрганизации.Организация
		|			И ОрганизацииНаУСН.Период < ОстальныеОрганизации.Период
		|			И (НЕ ОстальныеОрганизации.ПрименяетсяУСН)
		|ГДЕ
		|	ОрганизацииНаУСН.ПрименяетсяУСН
		|
		|СГРУППИРОВАТЬ ПО
		|	ОрганизацииНаУСН.Организация,
		|	ОрганизацииНаУСН.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КнигаУчетаДоходовИРасходов.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|	ПО ПриходныйКассовыйОрдер.Ссылка = КнигаУчетаДоходовИРасходов.Регистратор
		|		И (ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ)
		|		ИЛИ (ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы)
		|		И ПриходныйКассовыйОрдер.КассаОтправитель ССЫЛКА Справочник.КассыККМ))
		|ГДЕ
		|	КнигаУчетаДоходовИРасходов.Период >= &ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах";
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПоОрганизациямНаУСН КАК ОрганизациямНаУСН
		|	ПО ОрганизациямНаУСН.Организация = ОтчетОРозничныхПродажах.Организация
		|			И ОтчетОРозничныхПродажах.Дата >= ОрганизациямНаУСН.НачалоПериода
		|			И ОтчетОРозничныхПродажах.Дата < ОрганизациямНаУСН.КонецПериода
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Дата >= &ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах";
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		Запрос.УстановитьПараметр("ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах", Параметры.ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыборкаПКО = РезультатЗапроса[1].Выбрать();
		ВыборкаОРП = РезультатЗапроса[2].Выбрать();

		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.КнигаУчетаДоходовИРасходов.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса[1];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		
		Блокировка.Заблокировать();
		
		Пока ВыборкаПКО.Следующий() Цикл
			
			НаборЗаписей = РегистрыНакопления.КнигаУчетаДоходовИРасходов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПКО.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла;

		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.КнигаУчетаДоходовИРасходов.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса[2];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		
		Блокировка.Заблокировать();
		
		Пока ВыборкаОРП.Следующий() Цикл
			
			НаборЗаписей = РегистрыНакопления.КнигаУчетаДоходовИРасходов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаОРП.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			
			ТаблицыДанных = Документы.ОтчетОРозничныхПродажах.ДанныеДокументаДляПроведения(ВыборкаОРП.Регистратор, "КнигаУчетаДоходовИРасходов");
			ТаблицаДанных = ТаблицыДанных["Таблица" + "КнигаУчетаДоходовИРасходов"];
			НаборЗаписей.Загрузить(ТаблицаДанных);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Результат.ОбработаноПКО = ВыборкаПКО.Количество();
		Результат.ОбработаноОРП = ВыборкаОРП.Количество();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить движения по регистру КУДиР по причине: %1';
										|en = 'Cannot change records in LIE register. Reason: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Установка даты начала признания доходов новым методом.';
					|en = 'Setting a start date for new income recognition method'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеРегламентированнойОтчетности

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2009Кв1(ПоказателиОтчета) Экспорт
	
	// Раздел 1
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005003", Истина, Ложь);
	
	// Раздел 2
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020028003", Истина, Ложь);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2014Кв1(ПоказателиОтчета) Экспорт
	
	// Раздел 2.1
	
	// признак налогоплательщика
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010203", Истина, Ложь);
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210012003", Истина, Ложь);
	
	// расходы, уменьшающие налог
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014303", Истина, Ложь);
	
	// Раздел 2.2
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021303", Истина, Ложь);
	
	// расходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026303", Истина, Ложь);
	
	// убытки прошлых лет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220023003", Истина, Ложь);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2015Кв1(ПоказателиОтчета) Экспорт

	// Раздел 2.1.1
	
	// признак налогоплательщика
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110010203", Истина, Ложь);
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011303", Истина, Ложь);
	
	// ставки налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012303", Истина, Ложь);
	
	// расходы, уменьшающие налог
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014303", Истина, Ложь);
	
	// Раздел 2.1.2
	
	// доходы ТС
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011303", Истина, Ложь);
	
	// расходы, уменьшающие налог по ТС
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014303", Истина, Ложь);
	
	// Уплаченный торговый сбор
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015303", Истина, Ложь);
	
	// Раздел 2.2
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021303", Истина, Ложь);
	
	// расходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026303", Истина, Ложь);
	
	// убытки прошлых лет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220023003", Истина, Ложь);

КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2021Кв1(ПоказателиОтчета) Экспорт
	
	КлючиПоказателей = КлючиПоказателейДекларации2021Кв1();
	
	// Раздел 2.1 (для объекта "Доходы")
	
	КлючиПоказателей21 = КлючиПоказателей.Раздел21;
	
	// Подраздел 2.1.1 - основной
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
		КлючиПоказателей21.ПризнакНалогоплательщика, Истина, Ложь);
	
	Для НомерКвартала = 1 По 4 Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["Доходы" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["СтавкаНалога" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["УменьшениеНалога" + НомерКвартала], Истина, Ложь);
	КонецЦикла;
	
	// Подраздел 2.1.2 - для плательщиков торгового сбора
	Для НомерКвартала = 1 По 4 Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["ДоходыТС" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["УменьшениеНалогаТС" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["УплаченныйТорговыйСбор" + НомерКвартала], Истина, Ложь);
	КонецЦикла;
	
	// Раздел 2.2 (для объекта "Доходы минус расходы")
	
	КлючиПоказателей22 = КлючиПоказателей.Раздел22;
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
		КлючиПоказателей22.УбытокПрошлыхЛет, Истина, Ложь);
	
	Для НомерКвартала = 1 По 4 Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей22["Доходы" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей22["Расходы" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей22["СтавкаНалога" + НомерКвартала], Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация, "ЮридическоеФизическоеЛицо");
	
	РеквизитыОрганизации.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ПараметрыОтчета.Организация));
	

	Ставка = Контейнер.Раздел2.П000020020103;
	Раздел1 = Контейнер.Раздел1;
	Раздел2 = Контейнер.Раздел2;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("парамНачалоГода",            НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&парамНачалоГода, &парамКонецОтчетногоПериода, , Организация = &парамОрганизация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Доходы = 0;
	Расходы = 0;
	Пока Выборка.Следующий() Цикл
		Доходы = Доходы + ?(Выборка.Графа5Оборот = Null, 0, Выборка.Графа5Оборот);
		Расходы = Расходы + ?(Выборка.Графа7Оборот = Null, 0, Выборка.Графа7Оборот);
	КонецЦикла;
	
	ПрименяетсяУСНДоходы = Ложь;
	
	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиУчетаУСНСрезПоследних.ОбъектНалогообложенияУСН = ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.Доходы) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&парамКонецОтчетногоПериода,
	|			Организация = ВЫРАЗИТЬ(&парамОрганизация КАК Справочник.Организации).ГоловнаяОрганизация
	|				И ПрименяетсяУСН) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(
	|			&парамКонецОтчетногоПериода,
	|			Организация = ВЫРАЗИТЬ(&парамОрганизация КАК Справочник.Организации).ГоловнаяОрганизация) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО УчетнаяПолитикаОрганизацийСрезПоследних.Организация = НастройкиУчетаУСНСрезПоследних.Организация
	|";
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ПрименяетсяУСНДоходы = ВыборкаДетальныеЗаписи.ПрименяетсяУСНДоходы;	
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходы Тогда // Объект налогообложения "Доходы"
		
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = 0;
		
		ВзносыПФ = 0;
		
		Если Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) >= 2013 Тогда
			
			// Взносы и иные выплаты, уменьшающие сумму налога, с 2013 г. отражаются в 4 разделе документа "ЗаписьКУДиР".
			
			ДатаНачалоГода = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			ДатаКонецГода  = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			
			ЭтоИПБезРаботников = Ложь;
			
			Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// Для ИП - проверим, производились ли выплаты работникам и прочим физлицам (письмо Минфина РФ от 21 мая 2013 г. N 03-11-11/17926).
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация КАК Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецОтчетногоПериода, , Счет = &СчетЗарплаты, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(
				|			&НачалоГода,
				|			&КонецОтчетногоПериода,
				|			,
				|			Счет В (&СчетаВзносов),
				|			&ВидСубконтоВидыПлатежей,
				|			Организация = &Организация
				|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
				|			,
				|			) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0"
				;
				
				Запрос.УстановитьПараметр("Организация",             ПараметрыОтчета.Организация);
				Запрос.УстановитьПараметр("НачалоГода",              ДатаНачалоГода);
				Запрос.УстановитьПараметр("КонецОтчетногоПериода",   ДатаКонецГода);
				Запрос.УстановитьПараметр("СчетЗарплаты",            ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
				Запрос.УстановитьПараметр("ВидСубконтоВидыПлатежей", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
				
				СчетаВзносов = Новый Массив;
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);
				
				Запрос.УстановитьПараметр("СчетаВзносов", СчетаВзносов);
				
				Результат = Запрос.Выполнить();
				
				ЭтоИПБезРаботников = Результат.Пустой();
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("НачалоГода",            ДатаНачалоГода);
			Запрос.УстановитьПараметр("КонецОтчетногоПериода", ДатаКонецГода);
			Запрос.УстановитьПараметр("ЭтоИПБезРаботников",    ЭтоИПБезРаботников);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(УменьшениеНалога.ПФР + УменьшениеНалога.ФОМС + ВЫБОР
			|				КОГДА &ЭтоИПБезРаботников
			|					ТОГДА 0
			|				ИНАЧЕ УменьшениеНалога.ФСС + УменьшениеНалога.ФСС_НС + УменьшениеНалога.Больничные + УменьшениеНалога.ДобровольноеСтрахование
			|			КОНЕЦ), 0) КАК СуммаКУменьшениюНалога
			|ИЗ
			|	Документ.ЗаписьКУДиР.УменьшениеНалога КАК УменьшениеНалога
			|ГДЕ
			|	УменьшениеНалога.Ссылка.Дата МЕЖДУ &НачалоГода И &КонецОтчетногоПериода
			|	И УменьшениеНалога.Ссылка.Организация = &Организация
			|	И УменьшениеНалога.Ссылка.Проведен";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ВзносыПФ = Выборка.СуммаКУменьшениюНалога;
			
			Строка080 = Доходы * Ставка / 100;
			Если ЭтоИПБезРаботников Тогда
				// Для ИП, не производивших выплаты работникам и прочим физлицам, ограничение в 50% не действует (Письмо Минфина от
				// 02.04.2013 N 03-11-09/10547).
				ВзносыПФ = Мин(Строка080, ВзносыПФ);
			Иначе
				ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			КонецЕсли;
			
		Иначе
			// до 2012 года включительно - старый порядок заполнения
			НачДатаОплаты = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			КонДатаОплаты = КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);
			
			Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20100101' Тогда
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ТФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамОрганизация", 	ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("парамНачалоГода", 	НачДатаОплаты);
			Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонДатаОплаты);
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ВзносыПФ = ВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Строка080 = Доходы * Ставка / 100;
			ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			
			// взносы по стоимости страхового года
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Страх_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Нак_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
			
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ИПВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ИПВзносыПФ = ИПВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Если ИПВзносыПФ <> 0 Тогда
				ВзносыПФ = ВзносыПФ + ИПВзносыПФ;
				Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20120101' Тогда					
					ВзносыПФ = Мин(Строка080, ВзносыПФ);
				Иначе
					ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
				КонецЕсли;					
			КонецЕсли;
			
		КонецЕсли;
		
		Раздел2.П000020028003 = ВзносыПФ;
		
	Иначе // Объект налогообложения "Доходы минус расходы"
		
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация,
		НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		СуммаНеПеренесенныхУбытков       = УбыткиПрошлыхЛет.ПеренесенныеУбытки;
		УбытокОтУплатыМинимальногоНалога = УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
		
		НалоговаяБазаТекПериод  = Доходы - Расходы - УбытокОтУплатыМинимальногоНалога;
		УменьшениеНалоговойБазы = ?(НалоговаяБазаТекПериод > 0, Мин(НалоговаяБазаТекПериод, СуммаНеПеренесенныхУбытков), 0);
		
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = Расходы + УбытокОтУплатыМинимальногоНалога;
		Раздел2.П000020023003 = УменьшениеНалоговойБазы;
		Раздел2.П000020028003 = 0;
		
	КонецЕсли;
	
	// заполним авансовые платежи
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ДобавитьМесяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета, -3)));
	
	Запрос.УстановитьПараметр("СчетОтраженияНалога",  ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД); // Дт 99.01.1
	Запрос.УстановитьПараметр("СчетНачисленияНалога", ПланыСчетов.Хозрасчетный.ЕНприУСН); // Кт 68.12
	
	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК АвансовыйПлатеж,
	|	КВАРТАЛ(ХозрасчетныйОборотыДтКт.Период) КАК НомерКвартала
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоГода,
	|			&КонецПериода,
	|			Квартал,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	АвансовыеПлатежи = Запрос.Выполнить().Выгрузить();
	
	ПлатежиНарастающимИтогом = 0;
	
	Для НомерКвартала = 1 По 3 Цикл
		
		СтрокаПлатежа = АвансовыеПлатежи.Найти(НомерКвартала, "НомерКвартала");
		Если СтрокаПлатежа <> Неопределено Тогда
			ПлатежиНарастающимИтогом = ПлатежиНарастающимИтогом + СтрокаПлатежа.АвансовыйПлатеж;
		КонецЕсли;
		
		НомерГрафы = "П00001000"+ (НомерКвартала + 2) + "003";
		Раздел1[НомерГрафы] = ПлатежиНарастающимИтогом;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода       = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода        = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница = Новый Граница(КонецПериода, ВидГраницы.Включая);
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(ПараметрыОтчета.Организация, КонецПериода);
	
	// Необходимо учесть, что торговый сбор в 1 квартале уплачивается за квартал, относящийся к предыдущему налоговому периоду.
	ПлательщикТорговогоСбора = УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(ПараметрыОтчета.Организация, ДобавитьМесяц(НачалоПериода, -12), КонецПериода);
	УменьшатьНалогНаТорговыйСбор = ПрименяетсяУСНДоходы И ПлательщикТорговогоСбора;
	
	ИПИспользуетТрудНаемныхРаботников = УчетнаяПолитика.ИспользуетсяТрудНаемныхРаботников(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ЭтоИПБезВыплатФизлицам = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация) И НЕ ИПИспользуетТрудНаемныхРаботников;
	
	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	
	Если ПрименяетсяУСНДоходы Тогда
		// ставка налога общая для всей декларации
		СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, КонецПериода);
		Контейнер.Раздел21["П000210012003"] = СтавкаИзУП;
	КонецЕсли;
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		Если ПрименяетсяУСНДоходы Тогда
			СтрокаПериода.СтавкаНалога = Контейнер.Раздел21["П000210012003"];
		Иначе
			// ставки налога задаются для каждого из отчетных периодов
			ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
			СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
			СтрокаПериода.СтавкаНалога    = СтавкаИзУП;
		КонецЕсли;
		
	КонецЦикла;
	
	// показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ) КАК Период,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Графа7, 
	|	0 КАК ДоходыТорговыйСбор, 
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Графа5
	|ПОМЕСТИТЬ КнигаУчетаДоходовИРасходов
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходов.Графа5, 0) КАК Доходы,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходов.ДоходТорговыйСбор, 0) КАК ДоходыТорговыйСбор,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходов.Графа7, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|	ПО 
	|		ВТ_Периоды.Период = КнигаУчетаДоходовИРасходов.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(УменьшениеНалога.Ссылка.Дата, КВАРТАЛ) КАК Период,
		|	ЛОЖЬ,
		|	СУММА(УменьшениеНалога.ПФР) КАК ПФР,
		|	СУММА(УменьшениеНалога.ФСС) КАК ФСС,
		|	СУММА(УменьшениеНалога.ФОМС) КАК ФОМС,
		|	СУММА(УменьшениеНалога.ФСС_НС) КАК ФСС_НС,
		|	СУММА(УменьшениеНалога.Больничные) КАК Больничные,
		|	СУММА(УменьшениеНалога.ДобровольноеСтрахование) КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ВТ_Раздел4Обороты
		|ИЗ
		|	Документ.ЗаписьКУДиР.УменьшениеНалога КАК УменьшениеНалога
		|ГДЕ
		|	УменьшениеНалога.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И УменьшениеНалога.Ссылка.Организация = &Организация
		|	И УменьшениеНалога.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(УменьшениеНалога.Ссылка.Дата, КВАРТАЛ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
		|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.НомерКвартала,
		|	ВТ_Периоды.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
			|	ВТ_Периоды.Период,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
			|ИЗ
			|	ВТ_Периоды КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
			|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
			|			И (ВТ_Раздел4Обороты.ДеятельностьНаТорговомСборе)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.НомерКвартала,
			|	ВТ_Периоды.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКвартала"
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();
	
	УбыткиПрошлыхЛет = Неопределено;
	Если НЕ ПрименяетсяУСНДоходы Тогда
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	КонецЕсли;
	
	УплаченныйТорговыйСбор = Неопределено;
	Если УменьшатьНалогНаТорговыйСбор Тогда
		УплаченныйТорговыйСбор = УплаченныйТорговыйСборПоКварталамНарастающимИтогом(
			ПараметрыОтчета.Организация,
			НачалоПериода,
			КонецПериода);
	КонецЕсли;
	
	// заполнение показателей отчета
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	ИтогоДоходыТС                  = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[2].Выгрузить();
	
	Если ПрименяетсяУСНДоходы Тогда // объект налогообложения "доходы"
		
		РазрядностьОкругления = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонецПериода);
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		ЗаполняемыйРаздел["П000210010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[4].Выгрузить();
		
		ТаблицаРасходыУменьшающиеНалогТС = Неопределено;
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТаблицаРасходыУменьшающиеНалогТС = РезультатЗапросаНалоговаяБаза[5].Выгрузить();
		КонецЕсли;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы + СтрокаДоходов.Доходы;
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаДоходов.ДоходыТорговыйСбор;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог
				+ СтрокаРасходовУменьшающихНалог.ПФР + СтрокаРасходовУменьшающихНалог.ФОМС
				+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалог.ФСС + СтрокаРасходовУменьшающихНалог.ФСС_НС
				+ СтрокаРасходовУменьшающихНалог.Больничные + СтрокаРасходовУменьшающихНалог.ДобровольноеСтрахование);
			
			НалоговаяБаза = Окр(ИтогоДоходы, РазрядностьОкругления);
			НалогОтБазы = Окр(ИтогоДоходы*СтрокаПериода.СтавкаНалога/100, РазрядностьОкругления);
			УменьшениеНалога = Мин(Окр(НалогОтБазы*КоэффМаксУменьшенияНалога, РазрядностьОкругления), ИтогоРасходыУменьшающиеНалог);
			
			// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
			// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на
			// торговом сборе. В соответствии письмом ФНС от 14 августа 2015 г. N ГД-4-3/14386@ суммы вычитаемого из налога
			// торгового сбора добавляются к строкам 140-143.
			Если УменьшатьНалогНаТорговыйСбор Тогда
				
				СтрокаРасходовУменьшающихНалогТС = ТаблицаРасходыУменьшающиеНалогТС[СтрокаПериода.НомерКвартала-1];
				СтрокаУплаченногоТорговогоСбора  = УплаченныйТорговыйСбор[СтрокаПериода.НомерКвартала - 1];
				
				ИтогоРасходыУменьшающиеНалогТС   = ИтогоРасходыУменьшающиеНалогТС
					+ СтрокаРасходовУменьшающихНалогТС.ПФР + СтрокаРасходовУменьшающихНалогТС.ФОМС
					+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалогТС.ФСС + СтрокаРасходовУменьшающихНалогТС.ФСС_НС
						+ СтрокаРасходовУменьшающихНалогТС.Больничные + СтрокаРасходовУменьшающихНалогТС.ДобровольноеСтрахование);
				
				НалоговаяБазаТС    = Окр(ИтогоДоходыТС, РазрядностьОкругления);
				НалогОтБазыТС      = Окр(НалоговаяБазаТС*СтрокаПериода.СтавкаНалога/100, РазрядностьОкругления);
				УменьшениеНалогаТС = Мин(Окр(НалогОтБазыТС*КоэффМаксУменьшенияНалога, РазрядностьОкругления), ИтогоРасходыУменьшающиеНалогТС);
				НалогТСКУплате     = НалогОтБазыТС - УменьшениеНалогаТС;
				
				ТорговыйСборУплаченоНачислено = СтрокаУплаченногоТорговогоСбора.УплаченоСНачалаГода;
				ТорговыйСборВычитаемый = Мин(НалогТСКУплате, ТорговыйСборУплаченоНачислено);
				
				// добавляем вычитаемый торговый сбор к показателю строки 14х
				УменьшениеНалога = Мин(УменьшениеНалога + ТорговыйСборВычитаемый, НалогОтБазы);
				
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000210011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000210014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
	Иначе // объект налогообложения "доходы минус расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			// в последнем квартале года учтем перенесенные убытки прошлых лет
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
				ЗаполняемыйРаздел["П000220023003"] = УменьшениеНалоговойБазы;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер) Экспорт

	// Замер длительности автозаполнения: начало
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;

	НачалоГода              = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	НачалоНалоговогоПериода = ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета; // Для зарегистрированных в декабре при подаче декларации за следующий год - дата регистрации.
	КонецПериода            = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница     = Новый Граница(КонецПериода, ВидГраницы.Включая);
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(ПараметрыОтчета.Организация, КонецПериода);
	
	// Необходимо учесть, что торговый сбор в 1 квартале уплачивается за квартал, относящийся к предыдущему налоговому периоду.
	УменьшатьНалогНаТорговыйСбор = ЕстьПравоУменьшатьНалогНаТорговыйСбор(
		ПараметрыОтчета.Организация,
		КонецПериода);
	
	ИПИспользуетТрудНаемныхРаботников = УчетнаяПолитика.ИспользуетсяТрудНаемныхРаботников(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ЭтоИПБезВыплатФизлицам = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация) И НЕ ИПИспользуетТрудНаемныхРаботников;

	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоГода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		// ставки налога задаются для каждого из отчетных периодов
		ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоГода, (НомерКвартала-1)*3));
		СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
		СтрокаПериода.СтавкаНалога = СтавкаИзУП;
		
		Если ПрименяетсяУСНДоходы Тогда
			ИмяЯчейки = "П002110012" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел21[ИмяЯчейки] = СтавкаИзУП;
		Иначе
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
		КонецЕсли;
		
	КонецЦикла;
	
	// Показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовОбороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Период,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот) КАК Доходы,
	|	СУММА(0) КАК ДоходыТорговыйСбор,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот) КАК Расходы
	|ПОМЕСТИТЬ ВТ_ДоходыИРасходыОбороты
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовОбороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(ВТ_ДоходыИРасходыОбороты.Доходы, 0) КАК Доходы,
	|	ЕСТЬNULL(ВТ_ДоходыИРасходыОбороты.ДоходыТорговыйСбор, 0) КАК ДоходыТорговыйСбор,
	|	ЕСТЬNULL(ВТ_ДоходыИРасходыОбороты.Расходы, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоходыИРасходыОбороты КАК ВТ_ДоходыИРасходыОбороты
	|		ПО ВТ_Периоды.Период = ВТ_ДоходыИРасходыОбороты.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Периоды.НомерКвартала"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ГОД(КнигаРаздел4.Ссылка.Дата) < ГОД(&КонецПериода)
		|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаРаздел4.Ссылка.Дата, КВАРТАЛ)
		|	КОНЕЦ КАК Период,
		|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
		|	СУММА(КнигаРаздел4.ПФР) КАК ПФР,
		|	СУММА(КнигаРаздел4.ФСС) КАК ФСС,
		|	СУММА(КнигаРаздел4.ФОМС) КАК ФОМС,
		|	СУММА(КнигаРаздел4.ФСС_НС) КАК ФСС_НС,
		|	СУММА(КнигаРаздел4.Больничные) КАК Больничные,
		|	СУММА(КнигаРаздел4.ДобровольноеСтрахование) КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ВТ_Раздел4Обороты
		|ИЗ
		|	Документ.ЗаписьКУДиР.УменьшениеНалога КАК КнигаРаздел4
		|ГДЕ
		|	КнигаРаздел4.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КнигаРаздел4.Ссылка.Организация = &Организация
		|	И КнигаРаздел4.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ГОД(КнигаРаздел4.Ссылка.Дата) < ГОД(&КонецПериода)
		|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаРаздел4.Ссылка.Дата, КВАРТАЛ)
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период КАК Период,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
		|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.НомерКвартала,
		|	ВТ_Периоды.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
			|	ВТ_Периоды.Период,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
			|ИЗ
			|	ВТ_Периоды КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
			|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
			|			И (ВТ_Раздел4Обороты.ДеятельностьНаТорговомСборе)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.НомерКвартала,
			|	ВТ_Периоды.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКвартала"
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();

	УбыткиПрошлыхЛет = Неопределено;
	Если НЕ ПрименяетсяУСНДоходы Тогда
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация, НачалоГода, КонецПериода);
	КонецЕсли;
	
	УплаченныйТорговыйСбор = Неопределено;
	Если УменьшатьНалогНаТорговыйСбор Тогда
		УплаченныйТорговыйСбор = УплаченныйТорговыйСборПоКварталамНарастающимИтогом(ПараметрыОтчета.Организация,
			НачалоНалоговогоПериода, КонецПериода);
	КонецЕсли;
	
	// заполнение показателей отчета
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	ИтогоДоходыТС                  = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[2].Выгрузить();
	
	Если ПрименяетсяУСНДоходы Тогда // объект налогообложения "доходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		ЗаполняемыйРаздел["П002110010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[4].Выгрузить();
		
		ТаблицаРасходыУменьшающиеНалогТС = Неопределено;
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТаблицаРасходыУменьшающиеНалогТС = РезультатЗапросаНалоговаяБаза[5].Выгрузить();
		КонецЕсли;
				
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы + СтрокаДоходов.Доходы;
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаДоходов.ДоходыТорговыйСбор;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог
				+ СтрокаРасходовУменьшающихНалог.ПФР + СтрокаРасходовУменьшающихНалог.ФОМС
				+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалог.ФСС + СтрокаРасходовУменьшающихНалог.ФСС_НС
					+ СтрокаРасходовУменьшающихНалог.Больничные + СтрокаРасходовУменьшающихНалог.ДобровольноеСтрахование);
			
			НалоговаяБаза    = Окр(ИтогоДоходы, 0);
			НалогОтБазы      = Окр(НалоговаяБаза*СтрокаПериода.СтавкаНалога/100, 0);
			УменьшениеНалога = Мин(Окр(НалогОтБазы*КоэффМаксУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалог);
			
			// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
			// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на
			// торговом сборе.
			Если УменьшатьНалогНаТорговыйСбор Тогда
				
				СтрокаРасходовУменьшающихНалогТС = ТаблицаРасходыУменьшающиеНалогТС[СтрокаПериода.НомерКвартала-1];
				СтрокаУплаченногоТорговогоСбора  = УплаченныйТорговыйСбор[СтрокаПериода.НомерКвартала - 1];
				
				ИтогоРасходыУменьшающиеНалогТС   = ИтогоРасходыУменьшающиеНалогТС
					+ СтрокаРасходовУменьшающихНалогТС.ПФР + СтрокаРасходовУменьшающихНалогТС.ФОМС
					+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалогТС.ФСС + СтрокаРасходовУменьшающихНалогТС.ФСС_НС
						+ СтрокаРасходовУменьшающихНалогТС.Больничные + СтрокаРасходовУменьшающихНалогТС.ДобровольноеСтрахование);
				
				НалоговаяБазаТС    = Окр(ИтогоДоходыТС, 0);
				НалогОтБазыТС      = Окр(НалоговаяБазаТС*СтрокаПериода.СтавкаНалога/100, 0);
				УменьшениеНалогаТС = Мин(Окр(НалогОтБазыТС*КоэффМаксУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалогТС);
				
				ТорговыйСборУплачено = СтрокаУплаченногоТорговогоСбора.УплаченоСНачалаГода;
				
				ЗаполняемыйРаздел["П002120011" + ИдКвартала + "03"] = ИтогоДоходыТС;
				ЗаполняемыйРаздел["П002120014" + ИдКвартала + "03"] = УменьшениеНалогаТС;
				ЗаполняемыйРаздел["П002120015" + ИдКвартала + "03"] = ТорговыйСборУплачено;
				
			КонецЕсли;
			
			ЗаполняемыйРаздел["П002110011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П002110014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
	Иначе // объект налогообложения "доходы минус расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			// в последнем квартала года учтем перенесенные убытки прошлых лет
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
				ЗаполняемыйРаздел["П000220023003"] = УменьшениеНалоговойБазы;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Замер длительности автозаполнения: окончание
	ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяОкончанияОперации - ВремяНачалаОперации;
	ИмяСобытия = СтрШаблон(
		НСтр("ru = 'Заполнение регламентированных отчетов.Декларация по УСН за %1 год';
			|en = 'Fill in local reports.STS declaration for %1'", ОбщегоНазначения.КодОсновногоЯзыка()), // строка записывается в ИБ),
		Формат(Год(КонецПериода), "ЧГ=0"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Отчеты.РегламентированныйОтчетУСН.Формы.ФормаОтчета2014Кв1,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)';
											|en = 'Operation result (%1 ms)'", ОбщегоНазначения.КодОсновногоЯзыка()), Длительность),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

#Область ЗаполнениеДекларацииФормаОтчета2021Кв1

Процедура ЗаполнитьОтчетУСНФормаОтчета2021Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах(); // Для замера длительности
	
	Если Не УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияДекларации2021Кв1(ПараметрыОтчета);
	
	ДанныеКУДиР = ДанныеКУДиРЗаПериодПоКварталам(
		ПараметрыЗаполнения.Организация,
		ПараметрыЗаполнения.НачалоПериода,
		ПараметрыЗаполнения.КонецПериода,
		Истина,
		ПараметрыЗаполнения.ПрименяетсяУСНДоходы,
		ПараметрыЗаполнения.ПрименяетсяВычетНаТорговыйСбор);
	
	КлючиПоказателей = КлючиПоказателейДекларации2021Кв1();
	
	Если ПараметрыЗаполнения.ПрименяетсяУСНДоходы Тогда // Объект налогообложения "доходы"
		
		ЗаполнитьДекларацию2021ОбъектДоходы(
			ПараметрыЗаполнения,
			ДанныеКУДиР,
			Контейнер.Раздел21,
			КлючиПоказателей.Раздел21);
		
	Иначе // Объект налогообложения "доходы минус расходы"
		
		ЗаполнитьДекларацию2021ОбъектДоходыМинусРасходы(
			ПараметрыЗаполнения,
			ДанныеКУДиР,
			Контейнер.Раздел22,
			КлючиПоказателей.Раздел22);
		
	КонецЕсли;
	
	// Замер длительности автозаполнения: окончание
	ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяОкончанияОперации - ВремяНачалаОперации;
	ИмяСобытия = СтрШаблон(
		НСтр("ru = 'Заполнение регламентированных отчетов.Декларация по УСН за %1 год';
			|en = 'Fill in local reports.STS declaration for %1'", ОбщегоНазначения.КодОсновногоЯзыка()), // строка записывается в ИБ),
		Формат(Год(ПараметрыЗаполнения.КонецПериода), "ЧГ=0"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Отчеты.РегламентированныйОтчетУСН.Формы.ФормаОтчета2021Кв1,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)';
											|en = 'Operation result (%1 ms)'", ОбщегоНазначения.КодОсновногоЯзыка()), Длительность),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

Процедура ЗаполнитьДекларацию2021ОбъектДоходы(ПараметрыЗаполнения, ДанныеКУДиР, ЗаполняемыйРаздел, КлючиРаздела)
	
	ЗаполняемыйРаздел[КлючиРаздела.ПризнакНалогоплательщика]
		= ПризнакНалогоплательщикаВДекларацииУСНДоходы(ПараметрыЗаполнения.ПредпринимательБезСотрудников);
	
	КоэффициентПредельногоУменьшенияНалога = КоэффициентУменьшенияНалогаУСНДоходы(ПараметрыЗаполнения.ПредпринимательБезСотрудников);
	
	ИтогоДоходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	НалоговаяБазаДоПовышенияСтавки = 0;
	НалогДоПовышенияСтавки = 0;
	
	ИтогоДоходыТС = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	ИтогоТорговыйСборУплачено = 0;
	НалоговаяБазаДоПовышенияСтавкиТС = 0;
	НалогДоПовышенияСтавкиТС = 0;
	
	Для Каждого СтрокаНалоговойБазы Из ДанныеКУДиР.Раздел1 Цикл
		
		НомерКвартала = СтрокаНалоговойБазы.НомерКвартала;
		
		ОтборКвартал = Новый Структура("НомерКвартала", НомерКвартала);
		
		ИтогоДоходы = ИтогоДоходы + СтрокаНалоговойБазы.Доходы;
		
		ЛимитДоходов = КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаДоходовДляПримененияОсновнойСтавкиУСН(
			КонецКвартала(СтрокаНалоговойБазы.Период));
		ЛимитЧисленности =
			КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияОсновнойСтавкиУСН(КонецКвартала(СтрокаНалоговойБазы.Период));
		Численность = СредняяЧисленностьРаботников(ПараметрыЗаполнения.Организация,
			НачалоГода(СтрокаНалоговойБазы.Период), КонецКвартала(СтрокаНалоговойБазы.Период));
		
		ПовышеннаяСтавка = ИтогоДоходы >= ЛимитДоходов
			Или Численность <> Неопределено И Численность > ЛимитЧисленности;
		ТекущаяСтавкаНалога = ?(ПовышеннаяСтавка,
			УчетУСНПСНКлиентСервер.НалоговаяСтавкаПовышенная(),
			УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыЗаполнения.Организация, КонецКвартала(СтрокаНалоговойБазы.Период)));
		
		УменьшающиеРасходыЗаКвартал = ДанныеКУДиР.Раздел4.НайтиСтроки(ОтборКвартал);
		Для Каждого СтрокаРасхода Из УменьшающиеРасходыЗаКвартал Цикл
			ИтогоРасходыУменьшающиеНалог = ИтогоРасходыУменьшающиеНалог + СтрокаРасхода.ПФР + СтрокаРасхода.ФОМС;
			Если Не ПараметрыЗаполнения.ПредпринимательБезСотрудников Тогда
				ИтогоРасходыУменьшающиеНалог = ИтогоРасходыУменьшающиеНалог
					+ СтрокаРасхода.ФСС + СтрокаРасхода.ФСС_НС + СтрокаРасхода.Больничные + СтрокаРасхода.ДобровольноеСтрахование;
			КонецЕсли;
		КонецЦикла;
		
		Если ПовышеннаяСтавка Тогда
			НалоговаяБаза = Окр(ИтогоДоходы, 0) - НалоговаяБазаДоПовышенияСтавки;
			ТекущийНалог = Макс(Окр(НалоговаяБаза * ТекущаяСтавкаНалога / 100, 0) + НалогДоПовышенияСтавки, 0);
		Иначе
			НалоговаяБаза = Окр(ИтогоДоходы, 0);
			НалоговаяБаза = Макс(НалоговаяБаза, 0); // При расчете налога отрицательная налоговая база считается равной нулю.
			ТекущийНалог = Окр(НалоговаяБаза * ТекущаяСтавкаНалога / 100, 0);
			НалоговаяБазаДоПовышенияСтавки = НалоговаяБаза;
			НалогДоПовышенияСтавки = ТекущийНалог;
		КонецЕсли;
		
		УменьшениеНалога = Мин(
			Окр(ТекущийНалог * КоэффициентПредельногоУменьшенияНалога, 0),
			Макс(ИтогоРасходыУменьшающиеНалог, 0));
		
		// Передадим рассчитанные показатели в БРО.
		ЗаполняемыйРаздел[КлючиРаздела["СтавкаНалога" + НомерКвартала]]     = ТекущаяСтавкаНалога;
		ЗаполняемыйРаздел[КлючиРаздела["Доходы" + НомерКвартала]]           = ИтогоДоходы;
		ЗаполняемыйРаздел[КлючиРаздела["УменьшениеНалога" + НомерКвартала]] = УменьшениеНалога;
		
		// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
		// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на торговом сборе.
		// Для таких налогоплательщиков заполняется подраздел 2.1.2.
		Если ПараметрыЗаполнения.ПрименяетсяВычетНаТорговыйСбор Тогда
			
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаНалоговойБазы.ДоходыТорговыйСбор;
			
			ОтборРасходовТС = Новый Структура("НомерКвартала, ДеятельностьНаТорговомСборе", НомерКвартала, Истина);
			УменьшающиеРасходыЗаКварталТС = ДанныеКУДиР.Раздел4.НайтиСтроки(ОтборРасходовТС);
			Для Каждого СтрокаРасхода Из УменьшающиеРасходыЗаКварталТС Цикл
				ИтогоРасходыУменьшающиеНалогТС = ИтогоРасходыУменьшающиеНалогТС + СтрокаРасхода.ПФР + СтрокаРасхода.ФОМС;
				Если Не ПараметрыЗаполнения.ПредпринимательБезСотрудников Тогда
					ИтогоРасходыУменьшающиеНалогТС = ИтогоРасходыУменьшающиеНалогТС
						+ СтрокаРасхода.ФСС + СтрокаРасхода.ФСС_НС + СтрокаРасхода.Больничные + СтрокаРасхода.ДобровольноеСтрахование;
				КонецЕсли;
			КонецЦикла;
			
			Если ПовышеннаяСтавка Тогда
				НалоговаяБазаТС = Макс(Окр(ИтогоДоходыТС, 0) - НалоговаяБазаДоПовышенияСтавкиТС, 0);
				ТекущийНалогТС = Макс(Окр(НалоговаяБазаТС * ТекущаяСтавкаНалога / 100, 0) + НалогДоПовышенияСтавкиТС, 0);
			Иначе
				НалоговаяБазаТС = Окр(ИтогоДоходыТС, 0);
				НалоговаяБазаТС = Макс(НалоговаяБазаТС, 0); // При расчете налога отрицательная налоговая база считается равной нулю.
				ТекущийНалогТС = Окр(НалоговаяБазаТС * ТекущаяСтавкаНалога / 100, 0);
				НалоговаяБазаДоПовышенияСтавкиТС = НалоговаяБазаТС;
				НалогДоПовышенияСтавкиТС = ТекущийНалогТС;
			КонецЕсли;
			
			УменьшениеНалогаТС = Мин(
				Окр(ТекущийНалогТС * КоэффициентПредельногоУменьшенияНалога, 0),
				Макс(ИтогоРасходыУменьшающиеНалогТС, 0));
			
			ОтборУплаченныйТорговыйСбор = Новый Структура("НомерКвартала", НомерКвартала);
			УплаченныйТорговыйСборЗаКвартал = ДанныеКУДиР.Раздел5.НайтиСтроки(ОтборУплаченныйТорговыйСбор);
			Для Каждого СтрокаУплатыТорговогоСбора Из УплаченныйТорговыйСборЗаКвартал Цикл
				ИтогоТорговыйСборУплачено = ИтогоТорговыйСборУплачено + СтрокаУплатыТорговогоСбора.УплаченныйТорговыйСбор;
			КонецЦикла;
			
			// Передадим рассчитанные показатели в БРО.
			ЗаполняемыйРаздел[КлючиРаздела["ДоходыТС" + НомерКвартала]]               = ИтогоДоходыТС;
			ЗаполняемыйРаздел[КлючиРаздела["УменьшениеНалогаТС" + НомерКвартала]]     = УменьшениеНалогаТС;
			ЗаполняемыйРаздел[КлючиРаздела["УплаченныйТорговыйСбор" + НомерКвартала]] = ИтогоТорговыйСборУплачено;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДекларацию2021ОбъектДоходыМинусРасходы(ПараметрыЗаполнения, ДанныеКУДиР, ЗаполняемыйРаздел, КлючиРаздела)
	
	УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(
		ПараметрыЗаполнения.Организация,
		ПараметрыЗаполнения.НачалоПериода,
		ПараметрыЗаполнения.КонецПериода);
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	
	Для Каждого СтрокаНалоговойБазы Из ДанныеКУДиР.Раздел1 Цикл
		
		НомерКвартала = СтрокаНалоговойБазы.НомерКвартала;
		
		ИтогоДоходы  = ИтогоДоходы  + СтрокаНалоговойБазы.Доходы;
		ИтогоРасходы = ИтогоРасходы + СтрокаНалоговойБазы.Расходы;
		
		ЛимитДоходов = КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаДоходовДляПримененияОсновнойСтавкиУСН(
			КонецКвартала(СтрокаНалоговойБазы.Период));
		ЛимитЧисленности =
			КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияОсновнойСтавкиУСН(КонецКвартала(СтрокаНалоговойБазы.Период));
		Численность = СредняяЧисленностьРаботников(ПараметрыЗаполнения.Организация,
			НачалоГода(СтрокаНалоговойБазы.Период), КонецКвартала(СтрокаНалоговойБазы.Период));
		
		ПовышеннаяСтавка = ИтогоДоходы >= ЛимитДоходов
			Или Численность <> Неопределено И Численность > ЛимитЧисленности;
		ТекущаяСтавкаНалога = ?(ПовышеннаяСтавка,
			УчетУСНПСНКлиентСервер.НалоговаяСтавкаПовышенная(Истина),
			УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыЗаполнения.Организация, КонецКвартала(СтрокаНалоговойБазы.Период)));
		
		// В последнем квартале года учтем перенесенные убытки прошлых лет.
		Если СтрокаНалоговойБазы.НомерКвартала = 4 Тогда
			ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
			НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
			УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
			ЗаполняемыйРаздел[КлючиРаздела["УбытокПрошлыхЛет"]] = УменьшениеНалоговойБазы;
		КонецЕсли;
		
		// Передадим рассчитанные показатели в БРО.
		ЗаполняемыйРаздел[КлючиРаздела["СтавкаНалога" + НомерКвартала]] = ТекущаяСтавкаНалога;
		ЗаполняемыйРаздел[КлючиРаздела["Доходы" + НомерКвартала]]       = ИтогоДоходы;
		ЗаполняемыйРаздел[КлючиРаздела["Расходы" + НомерКвартала]]      = ИтогоРасходы;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеКУДиРЗаПериодПоКварталам(Организация, НачалоПериода, КонецПериода, Раздел1 = Истина, Раздел4 = Ложь, Раздел5 = Ложь)
	
	ДанныеКУДиР = Новый Структура("Раздел1, Раздел4, Раздел5");
	
	ТекстыЗапросов     = Новый Массив;
	ИндексыРезультатов = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",     КонецПериода);
	Запрос.УстановитьПараметр("ТаблицаКварталов", НоваяТаблицаКварталов(НачалоПериода, КонецПериода));
	
	// Временная таблица периодов для представления результата за каждый квартал, в том числе и с отсутствующими оборотами.
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаКварталов.Период КАК Период,
	|	ТаблицаКварталов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ Кварталы
	|ИЗ
	|	&ТаблицаКварталов КАК ТаблицаКварталов"
	);
	
	// Подготовка данных разделов КУДиР.
	
	Если Раздел1 = Истина Тогда
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Период КАК Период,
		|	СУММА(ВложенныйЗапрос.Доходы) КАК Доходы,
		|	СУММА(ВложенныйЗапрос.Расходы) КАК Расходы,
		|	СУММА(ВложенныйЗапрос.ДоходыТорговыйСбор) КАК ДоходыТорговыйСбор
		|ПОМЕСТИТЬ ДанныеРаздел1
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(КнигаРаздел1.Период, КВАРТАЛ) КАК Период,
		|		СУММА(КнигаРаздел1.Графа5Оборот - ВЫБОР
		|				КОГДА КнигаРаздел1.Графа6Оборот = 0
		|						И КнигаРаздел1.Графа7Оборот = 0
		|					ТОГДА КнигаРаздел1.НДСОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК Доходы,
		|		СУММА(КнигаРаздел1.Графа7Оборот) КАК Расходы,
		|		СУММА(0) КАК ДоходыТорговыйСбор,
		|		КнигаРаздел1.ДокументВозникновенияДоходовРасходов КАК ДокументВозникновенияДоходовРасходов
		|	ИЗ
		|		РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаРаздел1
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НАЧАЛОПЕРИОДА(КнигаРаздел1.Период, КВАРТАЛ),
		|		КнигаРаздел1.ДокументВозникновенияДоходовРасходов,
		|		КнигаРаздел1.ВидРасходов) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Период"
		);
		
		ИндексыРезультатов.Вставить("Раздел1", ТекстыЗапросов.Количество());
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Кварталы.Период КАК Период,
		|	Кварталы.НомерКвартала КАК НомерКвартала,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел1.Доходы, 0)) КАК Доходы,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел1.Расходы, 0)) КАК Расходы,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел1.ДоходыТорговыйСбор, 0)) КАК ДоходыТорговыйСбор
		|ИЗ
		|	Кварталы КАК Кварталы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаздел1 КАК ДанныеРаздел1
		|		ПО Кварталы.Период = ДанныеРаздел1.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Кварталы.Период,
		|	Кварталы.НомерКвартала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		
	КонецЕсли;
	
	Если Раздел4 = Истина Тогда
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел4.Ссылка.Дата, КВАРТАЛ) КАК Период,
		|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
		|	СУММА(КнигаРаздел4.ПФР) КАК ПФР,
		|	СУММА(КнигаРаздел4.ФСС) КАК ФСС,
		|	СУММА(КнигаРаздел4.ФОМС) КАК ФОМС,
		|	СУММА(КнигаРаздел4.ФСС_НС) КАК ФСС_НС,
		|	СУММА(КнигаРаздел4.Больничные) КАК Больничные,
		|	СУММА(КнигаРаздел4.ДобровольноеСтрахование) КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ДанныеРаздел4
		|ИЗ
		|	Документ.ЗаписьКУДиР.УменьшениеНалога КАК КнигаРаздел4
		|ГДЕ
		|	КнигаРаздел4.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КнигаРаздел4.Ссылка.Организация = &Организация
		|	И КнигаРаздел4.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(КнигаРаздел4.Ссылка.Дата, КВАРТАЛ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период"
		);
		
		ИндексыРезультатов.Вставить("Раздел4", ТекстыЗапросов.Количество());
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Кварталы.Период КАК Период,
		|	Кварталы.НомерКвартала КАК НомерКвартала,
		|	ЕСТЬNULL(ДанныеРаздел4.ДеятельностьНаТорговомСборе, ЛОЖЬ) КАК ДеятельностьНаТорговомСборе,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	Кварталы КАК Кварталы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаздел4 КАК ДанныеРаздел4
		|		ПО Кварталы.Период = ДанныеРаздел4.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Кварталы.Период,
		|	Кварталы.НомерКвартала,
		|	ЕСТЬNULL(ДанныеРаздел4.ДеятельностьНаТорговомСборе, ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		
	КонецЕсли;
	
	Если Раздел5 = Истина Тогда
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел5.Ссылка.Дата, КВАРТАЛ) КАК Период,
		|	СУММА(КнигаРаздел5.СуммаТорговогоСбора) КАК УплаченныйТорговыйСбор
		|ПОМЕСТИТЬ ДанныеРаздел5
		|ИЗ
		|	Документ.ЗаписьКУДиР.УплаченныйТорговыйСбор КАК КнигаРаздел5
		|ГДЕ
		|	КнигаРаздел5.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КнигаРаздел5.Ссылка.Организация = &Организация
		|	И КнигаРаздел5.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(КнигаРаздел5.Ссылка.Дата, КВАРТАЛ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел5.Период, КВАРТАЛ),
		|	СУММА(КнигаРаздел5.СуммаРеглОборот)
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Квартал,
		|			Организация = &Организация
		|				И ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
		|				И ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
		|				И СтатьяДоходовРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
		|				И АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТорговыйСбор)) КАК КнигаРаздел5
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(КнигаРаздел5.Период, КВАРТАЛ)"
		);
		
		ИндексыРезультатов.Вставить("Раздел5", ТекстыЗапросов.Количество());
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Кварталы.Период КАК Период,
		|	Кварталы.НомерКвартала КАК НомерКвартала,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел5.УплаченныйТорговыйСбор, 0)) КАК УплаченныйТорговыйСбор
		|ИЗ
		|	Кварталы КАК Кварталы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаздел5 КАК ДанныеРаздел5
		|		ПО Кварталы.Период = ДанныеРаздел5.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Кварталы.Период,
		|	Кварталы.НомерКвартала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		
	КонецЕсли;
	
	// Итоговый запрос и сборка результатов.
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Для Каждого ИндексРезультата Из ИндексыРезультатов Цикл
		ДанныеКУДиР[ИндексРезультата.Ключ] = Результаты[ИндексРезультата.Значение].Выгрузить();
	КонецЦикла;
	
	Возврат ДанныеКУДиР;
	
КонецФункции

Функция ПараметрыЗаполненияДекларации2021Кв1(ПараметрыОтчета)
	
	// Транслируем параметры отчета из БРО в параметры для методов автозаполнения.
	
	Организация   = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета); // Расширенный налоговый период не поддерживается - отменен с 2019 года.
	КонецПериода  = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("Организация",   Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода",  КонецПериода);
	
	ПараметрыЗаполнения.Вставить("НалоговыйПериодРасширен", НачалоГода(НачалоПериода) < НачалоГода(КонецПериода));
	
	ПараметрыЗаполнения.Вставить("ПрименяетсяУСНДоходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(Организация, НачалоПериода, КонецПериода));
	ПараметрыЗаполнения.Вставить("ПрименяетсяВычетНаТорговыйСбор",
		ЕстьПравоУменьшатьНалогНаТорговыйСбор(Организация, КонецПериода));
	ИПИспользуетТрудНаемныхРаботников = УчетнаяПолитика.ИспользуетсяТрудНаемныхРаботников(ПараметрыОтчета.Организация, НачалоПериода);
	ПараметрыЗаполнения.Вставить("ПредпринимательБезСотрудников",
		ПараметрыЗаполнения.ПрименяетсяУСНДоходы
		И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Не ИПИспользуетТрудНаемныхРаботников);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция КлючиПоказателейДекларации2021Кв1()
	
	КлючиПоказателей = Новый Структура;
	
	// Раздел 2.1 (для объекта "Доходы")
	
	КлючиПоказателей.Вставить("Раздел21", Новый Структура);
	
	Раздел21 = КлючиПоказателей.Раздел21;
	
	// Подраздел 2.1.1 - основной
	Раздел21.Вставить("ПризнакНалогоплательщика", "П002110010203");
	
	Раздел21.Вставить("Доходы1", "П002110011003");
	Раздел21.Вставить("Доходы2", "П002110011103");
	Раздел21.Вставить("Доходы3", "П002110011203");
	Раздел21.Вставить("Доходы4", "П002110011303");
	
	Раздел21.Вставить("СтавкаНалога1", "П002110012003");
	Раздел21.Вставить("СтавкаНалога2", "П002110012103");
	Раздел21.Вставить("СтавкаНалога3", "П002110012203");
	Раздел21.Вставить("СтавкаНалога4", "П002110012303");
	
	Раздел21.Вставить("УменьшениеНалога1", "П002110014003");
	Раздел21.Вставить("УменьшениеНалога2", "П002110014103");
	Раздел21.Вставить("УменьшениеНалога3", "П002110014203");
	Раздел21.Вставить("УменьшениеНалога4", "П002110014303");
	
	// Подраздел 2.1.2 - для плательщиков торгового сбора
	Раздел21.Вставить("ДоходыТС1", "П002120011003");
	Раздел21.Вставить("ДоходыТС2", "П002120011103");
	Раздел21.Вставить("ДоходыТС3", "П002120011203");
	Раздел21.Вставить("ДоходыТС4", "П002120011303");
	
	Раздел21.Вставить("УменьшениеНалогаТС1", "П002120014003");
	Раздел21.Вставить("УменьшениеНалогаТС2", "П002120014103");
	Раздел21.Вставить("УменьшениеНалогаТС3", "П002120014203");
	Раздел21.Вставить("УменьшениеНалогаТС4", "П002120014303");
	
	Раздел21.Вставить("УплаченныйТорговыйСбор1", "П002120015003");
	Раздел21.Вставить("УплаченныйТорговыйСбор2", "П002120015103");
	Раздел21.Вставить("УплаченныйТорговыйСбор3", "П002120015203");
	Раздел21.Вставить("УплаченныйТорговыйСбор4", "П002120015303");
	
	// Раздел 2.2 (для объекта "Доходы минус расходы")
	
	КлючиПоказателей.Вставить("Раздел22", Новый Структура);
	
	Раздел22 = КлючиПоказателей.Раздел22;
	
	Раздел22.Вставить("Доходы1", "П000220021003");
	Раздел22.Вставить("Доходы2", "П000220021103");
	Раздел22.Вставить("Доходы3", "П000220021203");
	Раздел22.Вставить("Доходы4", "П000220021303");
	
	Раздел22.Вставить("Расходы1", "П000220022003");
	Раздел22.Вставить("Расходы2", "П000220022103");
	Раздел22.Вставить("Расходы3", "П000220022203");
	Раздел22.Вставить("Расходы4", "П000220022303");
	
	Раздел22.Вставить("УбытокПрошлыхЛет", "П000220023003");
	
	Раздел22.Вставить("СтавкаНалога1", "П000220026003");
	Раздел22.Вставить("СтавкаНалога2", "П000220026103");
	Раздел22.Вставить("СтавкаНалога3", "П000220026203");
	Раздел22.Вставить("СтавкаНалога4", "П000220026303");
	
	Возврат КлючиПоказателей;
	
КонецФункции

// Возвращает значение признака налогоплательщика для подстановки в декларацию УСН при объекте "Доходы".
//
// Параметры:
//  ПредпринимательБезСотрудников - Булево - если Истина, декларация сдается предпринимателем,
//                                           не осуществляющим выплаты физлицам.
// Возвращаемое значение:
//   Строка - значение признака налогоплательщика в соответствии с форматом декларации.
//
Функция ПризнакНалогоплательщикаВДекларацииУСНДоходы(ПредпринимательБезСотрудников)
	
	Если ПредпринимательБезСотрудников Тогда
		Возврат "2";
	Иначе
		Возврат "1";
	КонецЕсли;
	
КонецФункции

// Определяет предельную долю уменьшения налога УСН-доходы на суммы страховых взносов, больничных
// и добровольного страхования в зависимости от характера налогоплательщика.
//
// Параметры:
//  ПредпринимательБезСотрудников - Булево - если Истина, налогоплательщик является предпринимателем,
//                                           не осуществляющим выплаты физлицам.
//
// Возвращаемое значение:
//   Число - предельная доля уменьшения налога (от 0 до 1).
//
Функция КоэффициентУменьшенияНалогаУСНДоходы(ПредпринимательБезСотрудников)
	
	Если ПредпринимательБезСотрудников Тогда
		Возврат 1;
	Иначе
		Возврат 0.5;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция УплаченныйТорговыйСборПоКварталамНарастающимИтогом(Организация, НачалоНалоговогоПериода, НалоговыйПериод)
	
	Если НалоговыйПериод >= УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		// Уплаченный торговый сбор определяем по данным V раздела КУДиР
		Возврат УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымКУДиР(Организация, НачалоНалоговогоПериода, НалоговыйПериод);
	Иначе
		// По данным бухгалтерского учета
		Возврат УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымБухгалтерскогоУчета(Организация, НачалоНалоговогоПериода, НалоговыйПериод);
	КонецЕсли;
	
КонецФункции

Функция УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымКУДиР(Организация, НачалоНалоговогоПериода, НалоговыйПериод)
	
	НачалоГода = НачалоГода(НалоговыйПериод);
	КонецГода  = КонецГода(НалоговыйПериод);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",   НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    КонецГода);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ТаблицаПериодов", НоваяТаблицаКварталов(НачалоГода, КонецГода));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Период КАК Период,
	|	ТаблицаПериодов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Дата) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК Период,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел5Обороты.СуммаТорговогоСбора) КАК СуммаТорговогоСбора
	|ПОМЕСТИТЬ ВТ_УплатаТорговогоСбораПоКварталам
	|ИЗ
	|	Документ.ЗаписьКУДиР.УплаченныйТорговыйСбор КАК КнигаУчетаДоходовИРасходовРаздел5Обороты
	|ГДЕ
	|	КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Дата) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Дата, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел5Обороты.СуммаРеглОборот)
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Квартал,
	|			Организация = &Организация
	|				И ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|				И ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И СтатьяДоходовРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|				И АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТорговыйСбор)) КАК КнигаУчетаДоходовИРасходовРаздел5Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период КАК Период,
	|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
	|	СУММА(ЕСТЬNULL(ВТ_УплатаТорговогоСбораПоКварталам.СуммаТорговогоСбора, 0)) КАК УплаченныйТорговыйСбор
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УплатаТорговогоСбораПоКварталам КАК ВТ_УплатаТорговогоСбораПоКварталам
	|		ПО ВТ_Периоды.Период = ВТ_УплатаТорговогоСбораПоКварталам.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Период,
	|	НомерКвартала
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Колонки.Добавить("УплаченоСНачалаГода");
	
	УплаченоСНачалаГода = 0;
	
	Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		УплаченоСНачалаГода = УплаченоСНачалаГода + СтрокаРезультат.УплаченныйТорговыйСбор;
		СтрокаРезультат.УплаченоСНачалаГода = УплаченоСНачалаГода;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымБухгалтерскогоУчета(Организация, НачалоНалоговогоПериода, НалоговыйПериод)
	
	НачалоГода = НачалоГода(НалоговыйПериод);
	КонецГода  = КонецГода(НалоговыйПериод);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",          КонецГода);
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("ТаблицаПериодов",       НоваяТаблицаКварталов(НачалоГода, КонецГода));
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств", Счета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Период КАК Период,
	|	ТаблицаПериодов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГОД(ХозрасчетныйОборотыДтКт.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Период,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ТорговыйСборУплачено
	|ПОМЕСТИТЬ ВТ_УплатаТорговогоСбораПоКварталам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Квартал,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДенежныхСредств) И НЕ СчетКт.Забалансовый,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГОД(ХозрасчетныйОборотыДтКт.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период КАК Период,
	|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
	|	ЕСТЬNULL(ВТ_УплатаТорговогоСбораПоКварталам.ТорговыйСборУплачено, 0) КАК ТорговыйСборУплачено
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УплатаТорговогоСбораПоКварталам КАК ВТ_УплатаТорговогоСбораПоКварталам
	|		ПО ВТ_Периоды.Период = ВТ_УплатаТорговогоСбораПоКварталам.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Колонки.Добавить("УплаченоСНачалаГода");
	
	УплаченоСНачалаГода = 0;
	
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		УплаченоСНачалаГода = УплаченоСНачалаГода + СтрокаРезультат.ТорговыйСборУплачено;
		СтрокаРезультат.УплаченоСНачалаГода = УплаченоСНачалаГода;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция НоваяТаблицаКварталов(НачалоПериода, КонецПериода)
	
	// Приводим период к границам квартала
	НачальнаяДата = НачалоКвартала(НачалоПериода);
	КонечнаяДата  = КонецКвартала(КонецПериода);
	
	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	Периоды.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекущийПериод = НачальнаяДата;
	
	Пока ТекущийПериод < КонечнаяДата Цикл
		
		НоваяСтрока = Периоды.Добавить();
		НоваяСтрока.Период        = ТекущийПериод;
		НоваяСтрока.НомерКвартала = Цел((Месяц(ТекущийПериод) - 1) / 3 + 1);
		
		ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущийПериод, Перечисления.Периодичность.Квартал);
		
	КонецЦикла;
	
	Возврат Периоды;
	
КонецФункции

#Область ПатентЗаполнениеЗаявления

Функция ДанныеЗаполненияЗаявления(ПараметрыОтчета)
	
	Перем ПараметрыЗаполнения;
	ДанныеЗаполнения = Новый Структура;
	
	Если ПараметрыОтчета.Свойство("ПараметрыЗаполнения", ПараметрыЗаполнения) И ПараметрыЗаполнения <> Неопределено Тогда
		ДатаУтратыПрава = ПараметрыЗаполнения.ДатаУтратыПрава;
	Иначе
		ДатаУтратыПрава = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	ГраницаДоходов = КонтрольПраваПримененияСпецрежима.ГраницаДоходовОграничивающаяПравоПримененияПСН();
	НачалоПериода  = НачалоГода(ДатаУтратыПрава);
	КонецПериода   = КонецДня(ДатаУтратыПрава);
	СтруктураСуммыДоходов = СуммаДохода(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	
	ГраницаЧисленностиРаботников = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент();
	СведенияОЧисленностиРаботников = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация,
		НачалоПериода, ДатаУтратыПрава);
	
	Если СтруктураСуммыДоходов.УСН + СтруктураСуммыДоходов.ПСН > ГраницаДоходов Тогда
		ДанныеЗаполнения.Вставить("КодПричины", 1);
	ИначеЕсли СведенияОЧисленностиРаботников.ЧисленностьРаботников > ГраницаЧисленностиРаботников Тогда 
		ДанныеЗаполнения.Вставить("КодПричины", 2);
	КонецЕсли;
	
	ДанныеПатентов = ДанныеДействующихПатентов(
		ПараметрыОтчета.Организация,
		ДатаУтратыПрава);
		
	// Если среди патентов отсутствуют оформленные по месту жительства,
	// то заявление в любую ИФНС, в которой поставлен на учет по ПСН
	Если ДанныеПатентов.Количество() > 0 Тогда
		ПатентПоМестуРегистрации = ДанныеПатентов.Найти(Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации,
														"ПостановкаНаУчетВНалоговомОргане");
		Если ПатентПоМестуРегистрации = Неопределено Тогда
			ДанныеЗаполнения.Вставить("НалоговыйОрган",    ДанныеПатентов[0].НалоговыйОрган);
			ДанныеЗаполнения.Вставить("НалоговыйОрганКод", ДанныеПатентов[0].НалоговыйОрганКод);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ДанныеПатентов",  ДанныеПатентов);
	ДанныеЗаполнения.Вставить("ДатаУтратыПрава", ДатаУтратыПрава);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КоличествоПатентовНаЛистеЗаявленияОбУтрате()
	
	Возврат 17;
	
КонецФункции

Функция ДанныеДействующихПатентов(Организация, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Патенты.Ссылка КАК Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.НомерПатента,
	|	Патенты.ДатаВыдачи,
	|	Патенты.ПостановкаНаУчетВНалоговомОргане,
	|	Патенты.НалоговыйОрган,
	|	Патенты.НалоговыйОрган.Код КАК НалоговыйОрганКод
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.ДатаНачала <= &ДатаОкончания
	|	И Патенты.ДатаОкончания >= &ДатаНачала
	|	И Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СуммаДохода(Организация, ДатаНачала, ДатаОкончания)
	
	СтруктураВозврата = Новый Структура("УСН, ПСН", 0, 0);
	
	Если Не УчетнаяПолитикаПереопределяемый.ПрименяетсяУСНЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК ДоходУСН,
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходПатентОборот КАК ДоходПатент
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.УСН = Выборка.ДоходУСН;
		СтруктураВозврата.ПСН = Выборка.ДоходПатент;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НачислениеНалога

// Процедура, вызывающая регламентную операцию по начислению налога УСН.
// Параметры:
//	Параметры - Структура:
//					КонецПериода - дата, по которую необходимо начислить налог УСН;
//					Организация - СправочникСсылка.Организация - организация, для которой необходимо начислить налог УСН;
//	АдресХранилища - строка.
Процедура НачислитьНалогУСН(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	
	НомерЗадания = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
	Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаУСН;
	ОперацииДляВыполнения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН);
	
	ДанныеКРасчетуНалогаЗаМесяц = ДанныеКРасчету(НомерЗадания, Операция, Параметры.Организация,
		НачалоКвартала(Параметры.КонДата), КонецКвартала(Параметры.КонДата), Отказ);
		
	Если Не Отказ Тогда
		Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(Параметры.КонДата, ОперацииДляВыполнения, Параметры.Организация, Отказ);
	КонецЕсли;
	
	ЗафиксироватьРасчет(НомерЗадания, Операция, Параметры.Организация,
		НачалоКвартала(Параметры.КонДата), КонецКвартала(Параметры.КонДата), ДанныеКРасчетуНалогаЗаМесяц, Отказ);
	
	Если Отказ Тогда
		ВызватьИсключение(НСтр("ru = 'Начисление налога по УСН не выполнено (см. журнал регистрации).';
								|en = 'STS tax is not accrued (see Event log).'"));
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает налог УСН по данным информационной базы и возвращает данные
// для отражения начисленного налога в проводках и во вспомогательных регистрах для справки-расчета.
//
// Параметры:
//  КонтекстРасчета      - Структура - контекст, в котором выполняется расчет (организация, период и т.п.),
//                                     см. НовыйКонтекстРасчета.
//
// Возвращаемое значение:
//  Структура    - содержит таблицы для отражения начисленного налога в бухучете и для формирования справки-расчета:
//                  * ТаблицаПроводок       - см. НалоговыйУчет.НоваяТаблицаНачисленияНалога
//                  * ТаблицаСправкиРасчета - см. НоваяТаблицаСправкиРасчетаНалога
//                  * Ошибки - Массив из Структура - массив ошибок.
//
Функция ПодготовитьРасчетНалога(КонтекстРасчета) Экспорт
	
	ТаблицаПроводок       = НалоговыйУчет.НоваяТаблицаНачисленияНалога();
	ТаблицаСправкиРасчета = НоваяТаблицаСправкиРасчетаНалога();
	Ошибки = Новый Массив;
	
	Если КонтекстРасчета.ПрименяетсяУСНДоходы Тогда
		РассчитатьНалогУСНОбъектДоходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета, Ошибки);
	Иначе
		РассчитатьНалогУСНОбъектДоходыМинусРасходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета, Ошибки);
	КонецЕсли;
	
	ТаблицыУпрРегистров = РасходыПоНалогу(КонтекстРасчета, ТаблицаСправкиРасчета);
	
	РезультатРасчета = Новый Структура();
	РезультатРасчета.Вставить("ТаблицаПроводок", ТаблицаПроводок);
	РезультатРасчета.Вставить("ТаблицаСправкиРасчета", ТаблицаСправкиРасчета);
	РезультатРасчета.Вставить("Ошибки", Ошибки);
	РезультатРасчета.Вставить("ТаблицаПрочиеАктивыПассивы", ТаблицыУпрРегистров.ПрочиеАктивыПассивы);
	РезультатРасчета.Вставить("ТаблицаДвиженияПоПрочимАктивамПассивам", ТаблицыУпрРегистров.ДвиженияПоПрочимАктивамПассивам);
	РезультатРасчета.Вставить("ТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы", ТаблицыУпрРегистров.ДвиженияДоходыРасходыПрочиеАктивыПассивы);
	
	Возврат РезультатРасчета;
	
КонецФункции

// Определяет сумму отраженных в бухгалтерском учете (начисленных) платежей по налогу УСН за указанный период.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  НачалоПериода    - Дата и время - начало анализируемого периода.
//  КонецПериода     - Дата и время - окончание анализируемого периода.
//
// Возвращаемое значение:
//  Число - сумма начисленного налога (авансовых платежей).
//
Функция НачисленныйНалогЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КонецПериода < НачалоПериода Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;             // Кт 68.12
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("НачалоПериода",        Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",         Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
	Запрос.УстановитьПараметр("СчетОтраженияНалога",  СчетОтраженияНалога);
	Запрос.УстановитьПараметр("ВидыПлатежей",         ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0)) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);
	
КонецФункции

Процедура РассчитатьНалогУСНОбъектДоходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета, Ошибки)
	
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;			  // Кт 68.12
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонтекстРасчета.Период);
	
	ДанныеПрогрессивнойШкалыУСН = ПараметрыПримененияПовышеннойСтавкиНалога(КонтекстРасчета);
	
	Если ДанныеПрогрессивнойШкалыУСН.Ошибки.Количество() > 0 Тогда
		Ошибки = ДанныеПрогрессивнойШкалыУСН.Ошибки;
		Возврат;
	КонецЕсли;
	
	СредняяЧисленностьРаботников = СредняяЧисленностьРаботников(КонтекстРасчета.Организация,
		КонтекстРасчета.НачалоНалоговогоПериода, КонтекстРасчета.КонецОтчетногоПериода);
	ЕстьРаботники = СредняяЧисленностьРаботников <> -1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецОтчетногоПериода);
	Запрос.УстановитьПараметр("ЕстьРаботники", ЕстьРаботники);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот - КнигаУчетаДоходовИРасходовОбороты.НДСОборот КАК Доходы,
	|	0 КАК ДоходыТорговыйСбор
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Раздел4Обороты.ПФР + Раздел4Обороты.ФОМС + ВЫБОР
	|		КОГДА &ЕстьРаботники
	|			ТОГДА Раздел4Обороты.ФСС + Раздел4Обороты.ФСС_НС + Раздел4Обороты.Больничные + Раздел4Обороты.ДобровольноеСтрахование
	|		ИНАЧЕ 0
	|	КОНЕЦ), 0) КАК РасходыУменьшающиеНалог,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе
	|ПОМЕСТИТЬ ВТ_Раздел4
	|ИЗ
	|	Документ.ЗаписьКУДиР.УменьшениеНалога КАК Раздел4Обороты
	|ГДЕ
	|	Раздел4Обороты.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Раздел4Обороты.Ссылка.Организация = &Организация
	|	И Раздел4Обороты.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Раздел4.РасходыУменьшающиеНалог), 0) КАК РасходыУменьшающиеНалог
	|ИЗ
	|	ВТ_Раздел4 КАК ВТ_Раздел4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Раздел4.РасходыУменьшающиеНалог), 0) КАК РасходыУменьшающиеНалог
	|ИЗ
	|	ВТ_Раздел4 КАК ВТ_Раздел4
	|ГДЕ
	|	ВТ_Раздел4.ДеятельностьНаТорговомСборе"
	;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	
	// расчет налога
	Доходы						 = 0;
	ДоходыТорговыйСбор           = 0;
	РасходыУменьшающиеНалог		 = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	МаксПроцентУменьшенияНалога  = ?(ЕстьРаботники, 50, 100);
	
	ВыборкаНалоговаяБаза = Результат[0].Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		Доходы = Макс(Окр(ВыборкаНалоговаяБаза.Доходы, РазрядностьОкругленияПоказателей), 0);
		
		Если КонтекстРасчета.УменьшатьНалогНаТорговыйСбор Тогда
			ДоходыТорговыйСбор = Макс(Окр(ВыборкаНалоговаяБаза.ДоходыТорговыйСбор, РазрядностьОкругленияПоказателей), 0);
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаУменьшениеНалога = Результат[2].Выбрать();
	Если ВыборкаУменьшениеНалога.Следующий() Тогда
		РасходыУменьшающиеНалог = Макс(Окр(ВыборкаУменьшениеНалога.РасходыУменьшающиеНалог, РазрядностьОкругленияПоказателей), 0);
	КонецЕсли;
	
	Если НЕ КонтекстРасчета.ЭтоПервыйОтчетныйПериод Тогда
		КонецПредыдущегоКвартала = НачалоКвартала(КонтекстРасчета.КонецОтчетногоПериода) - 1;
		
		ИсчисленоЗаПредыдущиеПериоды = НачисленныйНалогЗаПериод(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода, КонецПредыдущегоКвартала);
	КонецЕсли;
	
	НалоговаяБаза = Доходы;
	
	// Проверим необходимость применения повышенной ставки налога.
	СкорректироватьНалоговуюСтавку(КонтекстРасчета, НалоговаяБаза, ДанныеПрогрессивнойШкалыУСН, Ошибки);
	
	НалоговаяБазаЗаПериод = НалоговаяБаза - ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитов;
	НалогЗаПериод = Окр(НалоговаяБазаЗаПериод * КонтекстРасчета.СтавкаНалогаУСН / 100, РазрядностьОкругленияПоказателей);
	НалогСНачалаГодаВсего = Макс(НалогЗаПериод + ДанныеПрогрессивнойШкалыУСН.НалогДоПревышенияЛимитов, 0);
	
	УменьшениеНалога = Мин(РасходыУменьшающиеНалог,
		Окр(НалогСНачалаГодаВсего * МаксПроцентУменьшенияНалога / 100, РазрядностьОкругленияПоказателей));
	НалогСначалаГодаИсчисленный = НалогСНачалаГодаВсего - УменьшениеНалога;
	
	ТорговыйСборУплаченоВсего = 0;
	ТорговыйСборКВычету       = 0;
	
	// Рассчитаем налог отдельно по деятельности на торговом сборе, если она есть
	Если КонтекстРасчета.УменьшатьНалогНаТорговыйСбор Тогда
		РасходыУменьшающиеНалогТС = 0;
		
		ВыборкаУменьшениеНалогаТС = Результат[3].Выбрать();
		Если ВыборкаУменьшениеНалогаТС.Следующий() Тогда
			РасходыУменьшающиеНалогТС = Макс(Окр(ВыборкаУменьшениеНалогаТС.РасходыУменьшающиеНалог, РазрядностьОкругленияПоказателей), 0);
		КонецЕсли;
		
		НалоговаяБазаЗаПериод = ДоходыТорговыйСбор - ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор;
		НалогЗаПериод = Окр(НалоговаяБазаЗаПериод * КонтекстРасчета.СтавкаНалогаУСН / 100, РазрядностьОкругленияПоказателей);
		НалогТСВсего = Макс(НалогЗаПериод + ДанныеПрогрессивнойШкалыУСН.НалогДоПревышенияЛимитовТорговыйСбор, 0);
		
		УменьшениеНалогаТС = Мин(РасходыУменьшающиеНалогТС,
			Окр(НалогТСВсего * МаксПроцентУменьшенияНалога / 100, РазрядностьОкругленияПоказателей));
		
		НалогТСКУплате = НалогТСВсего - УменьшениеНалогаТС;
		
		ТорговыйСборУплаченоВсего = УплаченныйТорговыйСбор(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода, КонтекстРасчета.КонецОтчетногоПериода);
		ТорговыйСборКВычету = Мин(НалогТСКУплате, ТорговыйСборУплаченоВсего);
		
		// Запись Справки-расчета в части налога по деятельности на торговом сборе
		СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаСправки, КонтекстРасчета);
		
		СтрокаСправки.ПериодРасчета                = КонтекстРасчета.Период;
		СтрокаСправки.ОбъектНалогообложения        = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
		СтрокаСправки.ДеятельностьНаТорговомСборе  = Истина;
		СтрокаСправки.Доходы                       = ДоходыТорговыйСбор;
		СтрокаСправки.НалоговаяБаза                = ДоходыТорговыйСбор;
		СтрокаСправки.СтавкаНалогаУСН              = КонтекстРасчета.СтавкаНалогаУСН;
		СтрокаСправки.НалогВсего                   = НалогТСВсего;
		СтрокаСправки.РасходыУменьшающиеНалог      = РасходыУменьшающиеНалогТС;
		СтрокаСправки.ПроцентУменьшенияНалога      = МаксПроцентУменьшенияНалога;
		СтрокаСправки.УменьшениеНалогаФакт         = УменьшениеНалогаТС;
		СтрокаСправки.НалогИсчисленныйВсего        = НалогТСКУплате;
		СтрокаСправки.УплаченныйТорговыйСбор       = ТорговыйСборУплаченоВсего;
		СтрокаСправки.ТорговыйСборУменьшающийНалог = ТорговыйСборКВычету;
		СтрокаСправки.АвансовыеПлатежи             = 0;
		СтрокаСправки.НалогКУплате                 = 0;
		Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
			СтрокаСправки.ПериодПревышенияЛимитов = ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов;
		КонецЕсли;
		СтрокаСправки.СредняяЧисленностьРаботников = СредняяЧисленностьРаботников;
		
	КонецЕсли;
	
	ТорговыйСборВычитаемыйИзНалога = Мин(НалогСначалаГодаИсчисленный, ТорговыйСборКВычету);
	НалогСначалаГодаИсчисленный    = НалогСначалаГодаИсчисленный - ТорговыйСборВычитаемыйИзНалога;
	НалогКУплате = Окр(НалогСначалаГодаИсчисленный - ИсчисленоЗаПредыдущиеПериоды, 0);
	
	// Данные для проводки по начислению налога
	// (проводку формируем только при ненулевом налоге).
	Если НалогКУплате <> 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(КонтекстРасчета, НалогКУплате);
		
	КонецЕсли;
	
	// Если организация попадает под условия освобождения уплаты налога, тогда делаем дополнительную проводку
	Если НалогКУплате > 0 И ПрименяетсяОсвобождениеОтНалога(КонтекстРасчета.Организация, КонтекстРасчета.Период) Тогда
		
		НалоговыйУчет.ДополнитьПроводкамиПоОсвобождениюОтНалога(
			ТаблицаПроводок,
			КонтекстРасчета.Период,
			СчетНачисленияНалога,
			НалогКУплате);
		
	КонецЕсли;
	
	// Запись справки-расчета по налогу
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаСправки, КонтекстРасчета);
	
	СтрокаСправки.ПериодРасчета                = КонтекстРасчета.Период;
	СтрокаСправки.ОбъектНалогообложения        = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
	СтрокаСправки.ДеятельностьНаТорговомСборе  = Ложь;
	СтрокаСправки.Доходы                       = Доходы;
	СтрокаСправки.НалоговаяБаза                = Доходы;
	СтрокаСправки.СтавкаНалогаУСН              = КонтекстРасчета.СтавкаНалогаУСН;
	СтрокаСправки.НалогВсего                   = НалогСНачалаГодаВсего;
	СтрокаСправки.РасходыУменьшающиеНалог      = РасходыУменьшающиеНалог;
	СтрокаСправки.ПроцентУменьшенияНалога      = МаксПроцентУменьшенияНалога;
	СтрокаСправки.УменьшениеНалогаФакт         = УменьшениеНалога;
	СтрокаСправки.УплаченныйТорговыйСбор       = ТорговыйСборУплаченоВсего;
	СтрокаСправки.ТорговыйСборУменьшающийНалог = ТорговыйСборВычитаемыйИзНалога;
	СтрокаСправки.НалогИсчисленныйВсего        = НалогСначалаГодаИсчисленный;
	СтрокаСправки.АвансовыеПлатежи             = ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате                 = НалогКУплате;
	Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
		СтрокаСправки.ПериодПревышенияЛимитов = ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов;
	КонецЕсли;
	СтрокаСправки.СредняяЧисленностьРаботников = СредняяЧисленностьРаботников;
	
КонецПроцедуры

Процедура РассчитатьНалогУСНОбъектДоходыМинусРасходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкаРасчет, Ошибки)
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;             // Кт 68.12
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонтекстРасчета.Период);
	
	НалоговыеКаникулы = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(КонтекстРасчета.Организация)
		И УчетнаяПолитикаПереопределяемый.НалоговыеКаникулыУСН(КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода);
	
	ДанныеПрогрессивнойШкалыУСН = ПараметрыПримененияПовышеннойСтавкиНалога(КонтекстРасчета);
	
	Если ДанныеПрогрессивнойШкалыУСН.Ошибки.Количество() > 0 Тогда
		Ошибки = ДанныеПрогрессивнойШкалыУСН.Ошибки;
		Возврат;
	КонецЕсли;
	
	СредняяЧисленностьРаботников = СредняяЧисленностьРаботников(КонтекстРасчета.Организация,
		КонтекстРасчета.НачалоНалоговогоПериода, КонтекстРасчета.КонецОтчетногоПериода);
	
	// Расчет налога
	
	Доходы                       = 0;
	Расходы                      = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	
	ПеренесенныеУбытки               = 0;
	УбытокОтУплатыМинимальногоНалога = 0;
	УчтенныеУбытки                   = 0;
	
	МинимальныйНалог    = 0;
	ЭтоМинимальныйНалог = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецОтчетногоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.Доходы) КАК Доходы,
	|	СУММА(ВложенныйЗапрос.Расходы) КАК Расходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот - ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОбороты.Графа6Оборот = 0
	|					И КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот = 0
	|				ТОГДА КнигаУчетаДоходовИРасходовОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Доходы,
	|		КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы,
	|		КнигаУчетаДоходовИРасходовОбороты.ДокументВозникновенияДоходовРасходов КАК ДокументВозникновенияДоходовРасходов,
	|		КнигаУчетаДоходовИРасходовОбороты.ВидРасходов КАК ВидРасходов
	|	ИЗ
	|		РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК
	|		КнигаУчетаДоходовИРасходовОбороты) КАК ВложенныйЗапрос";
	
	ВыборкаНалоговаяБаза = Запрос.Выполнить().Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		Доходы  = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Доходы), ВыборкаНалоговаяБаза.Доходы, 0);
		Доходы  = Окр(Доходы, РазрядностьОкругленияПоказателей);
		
		Расходы = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Расходы), ВыборкаНалоговаяБаза.Расходы, 0);
		// Округление расходов производится после учета в их составе убытка от уплаты минимального налога.
	КонецЕсли;
	
	// Перенесенные на текущий период убытки прошлых лет учитываются только при расчете налога по итогам года.
	Если КонтекстРасчета.ЭтоЗавершающийОтчетныйПериод Тогда
		Убытки = ПеренесенныеУбыткиПрошлыхЛет(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоГода, КонтекстРасчета.КонецОтчетногоПериода);
		ПеренесенныеУбытки = Окр(Убытки.ПеренесенныеУбытки, РазрядностьОкругленияПоказателей);
		УбытокОтУплатыМинимальногоНалога = Убытки.УбытокОтУплатыМинимальногоНалога;
	КонецЕсли;
	
	Если НЕ КонтекстРасчета.ЭтоПервыйОтчетныйПериод Тогда
		КонецПредыдущегоКвартала = НачалоКвартала(КонтекстРасчета.КонецОтчетногоПериода) - 1;
		
		ИсчисленоЗаПредыдущиеПериоды = НачисленныйНалогЗаПериод(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода, КонецПредыдущегоКвартала);
	КонецЕсли;
	
	// Увеличиваем расходы на сумму разницы между уплаченным в прошлых периодах минимальным налогом и рассчитанным в общем порядке.
	Расходы = Окр(Расходы + УбытокОтУплатыМинимальногоНалога, РазрядностьОкругленияПоказателей);
	
	НалоговаяБаза = Макс(Доходы - Расходы, 0);
	Если КонтекстРасчета.ЭтоЗавершающийОтчетныйПериод Тогда
		УчтенныеУбытки = Мин(НалоговаяБаза, ПеренесенныеУбытки);
		НалоговаяБаза  = НалоговаяБаза - УчтенныеУбытки;
		
		// Для ИП на налоговых каникулах минимальный налог не рассчитывается.
		// Каникулы от минимального налога "заканчиваются" в тот момент, когда доходы превысили лимит 
		// применения основной ставки УСН и стала применяться повышенная ставка налога. 
		// При этом минимальный налог считается как обычно - от общей суммы доходов за год
		// (см. абз. 1 и абз. 2 п. 4 ст. 346.20 НК РФ)
		Если НалоговыеКаникулы И Не ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
			МинимальныйНалог = 0;
		Иначе
			МинимальныйНалог = Окр(Доходы / 100, 0); // 1% от доходов за год
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим необходимость применения повышенной ставки налога.
	СкорректироватьНалоговуюСтавку(КонтекстРасчета, НалоговаяБаза, ДанныеПрогрессивнойШкалыУСН, Ошибки);
	
	НалоговаяБазаЗаПериод = НалоговаяБаза - ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитов;
	НалогЗаПериод = Окр(НалоговаяБазаЗаПериод * КонтекстРасчета.СтавкаНалогаУСН / 100, РазрядностьОкругленияПоказателей); // Может быть отрицательным
	НалогСНачалаГода = Макс(0, НалогЗаПериод + ДанныеПрогрессивнойШкалыУСН.НалогДоПревышенияЛимитов);
	
	НалогКУплате = Окр(НалогСначалаГода - ИсчисленоЗаПредыдущиеПериоды, 0);
	
	// Если налог, рассчитанный в общем порядке по итогам года, меньше минимального налога
	// - требуется исчислить минимальный налог (1% от доходов).
	// Минимальный налог уменьшается на сумму исчисленных авансовых платежей за 9 месяцев (с учетом сумм "к уменьшению")
	// и уплачивается только в случае, если получившаяся разница положительная.
	Если КонтекстРасчета.ЭтоЗавершающийОтчетныйПериод И МинимальныйНалог > НалогСНачалаГода Тогда
		НалогКУплате = Окр(МинимальныйНалог - ИсчисленоЗаПредыдущиеПериоды, 0);
		ЭтоМинимальныйНалог = НалогКУплате > 0;
	КонецЕсли;
	
	// Данные для проводки по начислению налога
	// (проводку формируем только при ненулевом налоге).
	Если НалогКУплате <> 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(КонтекстРасчета, НалогКУплате, ЭтоМинимальныйНалог);
		
	КонецЕсли;
	
	// Если организация попадает под условия освобождения уплаты налога, тогда делаем дополнительную проводку
	Если НалогКУплате > 0 И ПрименяетсяОсвобождениеОтНалога(КонтекстРасчета.Организация, КонтекстРасчета.Период) Тогда
		
		НалоговыйУчет.ДополнитьПроводкамиПоОсвобождениюОтНалога(
			ТаблицаПроводок,
			КонтекстРасчета.Период,
			СчетНачисленияНалога,
			НалогКУплате);
		
	КонецЕсли;
	
	// Данные для справки-расчета
	СтрокаСправки = ТаблицаСправкаРасчет.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаСправки, КонтекстРасчета);
	
	СтрокаСправки.ПериодРасчета			= КонтекстРасчета.Период;
	СтрокаСправки.ОбъектНалогообложения	= Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	СтрокаСправки.Доходы				= Доходы;
	СтрокаСправки.Расходы				= Расходы;
	СтрокаСправки.ПеренесенныеУбытки	= УчтенныеУбытки;
	СтрокаСправки.НалоговаяБаза			= НалоговаяБаза;
	СтрокаСправки.СтавкаНалогаУСН		= КонтекстРасчета.СтавкаНалогаУСН;
	СтрокаСправки.НалогВсего			= НалогСНачалаГода;
	СтрокаСправки.НалогИсчисленныйВсего	= НалогСНачалаГода;
	СтрокаСправки.МинимальныйНалог		= МинимальныйНалог;
	СтрокаСправки.АвансовыеПлатежи		= ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате			= НалогКУплате;
	Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
		СтрокаСправки.ПериодПревышенияЛимитов = ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов;
	КонецЕсли;
	СтрокаСправки.СредняяЧисленностьРаботников = СредняяЧисленностьРаботников;
	
КонецПроцедуры

Функция НоваяТаблицаСправкиРасчетаНалога()
	
	ТипСтандартнаяСумма                = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	ТипСтандартнаяСуммаНеотрицательная = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный);
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ПериодРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("ОбъектНалогообложения",
		Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН"));
	Результат.Колонки.Добавить("ДеятельностьНаТорговомСборе", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("Доходы",                       ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("Расходы",                      ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("ПеренесенныеУбытки",           ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалоговаяБаза",                ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("СтавкаНалогаУСН",
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("НалогВсего",                   ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("РасходыУменьшающиеНалог",      ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("УплаченныйТорговыйСбор",       ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("ТорговыйСборУменьшающийНалог", ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("ПроцентУменьшенияНалога",
		ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("УменьшениеНалогаФакт",         ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалогИсчисленныйВсего",        ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("МинимальныйНалог",             ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("АвансовыеПлатежи",             ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалогКУплате",                 ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("ПериодПревышенияЛимитов",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("СредняяЧисленностьРаботников",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат Результат;
	
КонецФункции

Функция СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты, НалогКУплате = 0, ЭтоМинимальныйНалог = Ложь)
	
	Содержание = "";
	
	ПредставлениеПериода = ?(Реквизиты.ЭтоЗавершающийОтчетныйПериод,
		ПредставлениеПериода(Реквизиты.НачалоГода, Реквизиты.КонецОтчетногоПериода, "ФП=Истина"),
		ПредставлениеПериода(НачалоКвартала(Реквизиты.КонецОтчетногоПериода), Реквизиты.КонецОтчетногоПериода, "ФП=Истина"));
	
	Если НалогКУплате >= 0 Тогда
		Если Реквизиты.ЭтоЗавершающийОтчетныйПериод Тогда
			ВидНалога = ?(ЭтоМинимальныйНалог, НСтр("ru = 'минимальный налог';
													|en = 'minimum tax'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'налог';
																															|en = 'tax'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начислен %1, уплачиваемый в связи с применением УСН, за %2';
					|en = '%1 paid in relation to STS usage is accrued for %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ВидНалога, ПредставлениеПериода);
		Иначе
			Содержание = НСтр("ru = 'Начислен авансовый платеж по налогу, уплачиваемому в связи с применением УСН, за %1';
								|en = 'Tax advance payment paid due to STS application is accrued, for %1'", ОбщегоНазначения.КодОсновногоЯзыка());
			Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Содержание, ПредставлениеПериода);
		КонецЕсли;
	Иначе
		ВидПлатежа = ?(Реквизиты.ЭтоЗавершающийОтчетныйПериод,
			НСтр("ru = 'Налог, уплачиваемый в связи с применением УСН';
				|en = 'Tax paid due to using STS '", ОбщегоНазначения.КодОсновногоЯзыка()),
			НСтр("ru = 'Авансовый платеж по налогу, уплачиваемому в связи с применением УСН';
				|en = 'Advance payment for the tax paid due to applying STS'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, к уменьшению за %2';
					|en = '%1, to be reduced for %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ВидПлатежа, ПредставлениеПериода);
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

// Функция вызывается из модуля документа РегламентнаяОперация, служит для записи таблиц в движения документа. (см. ПодготовитьТаблицыНачисленияНалогаУСН)
// Параметры:
//	ТаблицаПроводок - ТаблицаЗначений (см. ПодготовитьТаблицыНачисленияНалогаУСН);
//	ТаблицаСправкиРасчета - ТаблицаЗначений (см. ПодготовитьТаблицыНачисленияНалогаУСН);
//	ТаблицаРеквизитов - ТаблицаЗначений (см. модуль менеджера Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияНалогаУСН);
//	Движения - движения документа "РегламентнаяОперация";
//	Отказ - Булево - переменная, влияющая на отказ от проведения документа "РегламентнаяОперация".
Процедура СформироватьДвиженияНачислениеНалогаУСН(ДанныеРасчета, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыНачисленияНалогаУСН(ДанныеРасчета.ТаблицаПроводок, ДанныеРасчета.ТаблицаСправкиРасчета, ТаблицаРеквизитов);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	// проводка по начислению налога
	Для каждого СтрокаПроводки Из Параметры.Проводки Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетДт, Проводка.СубконтоДт);
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетКт, Проводка.СубконтоКт);
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
	// данные для справки-расчета
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, Параметры.СправкаРасчет, Параметры.Реквизиты, "РасчетНалогаУСН");
	
	Если ДанныеРасчета.ТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы.Количество() <> 0 Тогда
		Движения.ДвиженияДоходыРасходыПрочиеАктивыПассивы.Записывать = Истина;
		Движения.ДвиженияДоходыРасходыПрочиеАктивыПассивы.Загрузить(ДанныеРасчета.ТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы);
	КонецЕсли;
	
	Если ДанныеРасчета.ТаблицаПрочиеАктивыПассивы.Количество() <> 0 Тогда
		Движения.ПрочиеАктивыПассивы.Записывать = Истина;
		Движения.ПрочиеАктивыПассивы.Загрузить(ДанныеРасчета.ТаблицаПрочиеАктивыПассивы);
	КонецЕсли;
	
	Если ДанныеРасчета.ТаблицаДвиженияПоПрочимАктивамПассивам.Количество() <> 0 Тогда
		Движения.ДвиженияПоПрочимАктивамПассивам.Записывать = Истина;
		Движения.ДвиженияПоПрочимАктивамПассивам.Загрузить(ДанныеРасчета.ТаблицаДвиженияПоПрочимАктивамПассивам);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Проводки
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"			// <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет,"	// <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "Сумма,"					// <Число, 15, 2> - сумма проводки
		+ "Содержание";				// <Строка, 150> - содержание проводки
	
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СправкаРасчет
	
	СписокОбязательныхКолонок = ""
		+ "ПериодРасчета,"				// <Дата> - период расчета (конец квартала)
		+ "ОбъектНалогообложения,"		// <ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН> - объект налогообложения
		+ "ДеятельностьНаТорговомСборе,"// <Булево> - если Ложь, запись по налогу УСН в целом; если Истина - запись по налогу от деятельности на торговом сборе
		+ "Доходы,"						// <<Число, 15, 2>> - сумма доходов за период (с начала года)
		+ "Расходы,"					// <<Число, 15, 2>> - сумма расходов за период (с начала года)
		+ "ПеренесенныеУбытки,"			// <<Число, 15, 2>> - сумма убытков, перенесенных на текущий налоговый период и уменьшающих налоговую базу
		+ "НалоговаяБаза,"				// <<Число, 15, 2>> - налоговая база с начала года
		+ "СтавкаНалогаУСН,"			// <<Число, 5, 2>> - ставка налога УСН
		+ "НалогВсего,"					// <<Число, 15, 2>> - сумма налога, рассчитанного от налоговой базы и ставки с начала года
		+ "РасходыУменьшающиеНалог,"	// <<Число, 15, 2>> - сумма расходов, уменьшающих налог при УСН-доходы (с начала года)
		+ "ПроцентУменьшенияНалога,"	// <<Число, 3, 0>> - максимально допустимый процент уменьшения налога на расходы по взносам, больничным и т.п. при УСН-Доходы
		+ "УменьшениеНалогаФакт,"		// <<Число, 15, 2>> - сумма, на которую фактически уменьшен налог (при УСН-доходы) с учетом процента ограничения
		+ "УплаченныйТорговыйСбор,"       // <Число, 15, 2> - сумма уплаченного в течение периода торгового сбора (в пределах исчисленного)
		+ "ТорговыйСборУменьшающийНалог," // <Число, 15, 2> - сумма торгового сбора, на которую можно уменьшить налог в дополнение к расходам по взносам, больничным и т.п.
		+ "НалогИсчисленныйВсего,"		// <<Число, 15, 2>> - сумма фактически исчисленного налога с начала года по текущий квартал включительно
		+ "МинимальныйНалог,"			// <<Число, 15, 2>> - сумма минимального налога (при УСН доходы-расходы) по итогам налогового периода
		+ "АвансовыеПлатежи,"			// <Число, 15, 2> - сумма начисленных в предыдущих кварталах (с начала года) авансовых платежей по налогу
		+ "НалогКУплате,"				// <Число, 15, 2> - сумма налога (авансового платежа), начисленного к уплате в текущем периоде
		+ "ПериодПревышенияЛимитов,"      // <Дата> - период, в котором превышен 1 порог лимитов УСН, установленный в КонтрольПраваПримененияСпецрежима
		+ "СредняяЧисленностьРаботников"; // <Число, 10, 0> - средняя численность наемных работников за отчетный период
	
	Параметры.Вставить("СправкаРасчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСправкиРасчета, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция РасходыПоНалогу(Реквизиты, СправкаРасчет)
	
	ПрочиеАктивыПассивы = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ДвиженияПоПрочимАктивамПассивам = РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ДвиженияДоходыРасходыПрочиеАктивыПассивы = РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ОбщегоНазначенияУТ.ДобавитьИдентификаторыВТаблицуЗначений(СправкаРасчет, "ИдентификаторСтроки");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период,
	|	&Организация,
	|	СправкаРасчет.ПериодРасчета,
	|	СправкаРасчет.ОбъектНалогообложения,
	|	СправкаРасчет.НалогКУплате,
	|	СправкаРасчет.МинимальныйНалог,
	|	СправкаРасчет.АвансовыеПлатежи,
	|	СправкаРасчет.ИдентификаторСтроки
	|ПОМЕСТИТЬ ДанныеРасчетаНалога
	|ИЗ
	|	&СправкаРасчет КАК СправкаРасчет
	|ГДЕ
	|	СправкаРасчет.НалогКУплате <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ДанныеРасчетаНалога.Период,
	|	ДанныеРасчетаНалога.Организация,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ВЫБОР
	|		КОГДА ДанныеРасчетаНалога.ОбъектНалогообложения = ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.Доходы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_Доходы)
	|		КОГДА ДанныеРасчетаНалога.НалогКУплате = ДанныеРасчетаНалога.МинимальныйНалог - ДанныеРасчетаНалога.АвансовыеПлатежи
	|				И ДанныеРасчетаНалога.НалогКУплате > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_МинимальныйНалог)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_ДоходыМинусРасходы)
	|	КОНЕЦ КАК Аналитика,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	ДанныеРасчетаНалога КАК ДанныеРасчетаНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ДанныеРасчетаНалога.Период,
	|	ДанныеРасчетаНалога.Организация,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки),
	|	ЗНАЧЕНИЕ(Справочник.ПрочиеАктивыПассивы.ПустаяСсылка),
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|ИЗ
	|	ДанныеРасчетаНалога КАК ДанныеРасчетаНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ДанныеРасчетаНалога.Период КАК Период,
	|	ДанныеРасчетаНалога.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ВЫБОР
	|		КОГДА ДанныеРасчетаНалога.ОбъектНалогообложения = ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.Доходы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_Доходы)
	|		КОГДА ДанныеРасчетаНалога.НалогКУплате = ДанныеРасчетаНалога.МинимальныйНалог - ДанныеРасчетаНалога.АвансовыеПлатежи
	|				И ДанныеРасчетаНалога.НалогКУплате > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_МинимальныйНалог)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_ДоходыМинусРасходы)
	|	КОНЕЦ КАК Аналитика,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|	ДанныеРасчетаНалога.НалогКУплате КАК СуммаРегл,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК СуммаСНДС,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК СуммаБезНДС,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК СуммаУпр,
	|	ДанныеРасчетаНалога.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеНалогаНаПрибыль) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ДанныеРасчетаНалога КАК ДанныеРасчетаНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ДанныеРасчетаНалога.Период КАК Период,
	|	ДанныеРасчетаНалога.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|	ДанныеРасчетаНалога.НалогКУплате КАК СуммаРегл,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК СуммаСНДС,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК СуммаБезНДС,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК СуммаУпр,
	|	ДанныеРасчетаНалога.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеНалогаНаПрибыль) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ДанныеРасчетаНалога КАК ДанныеРасчетаНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ДанныеРасчетаНалога.Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеНалогаНаПрибыль) КАК ХозяйственнаяОперация,
	|	ДанныеРасчетаНалога.Организация,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ВЫБОР
	|		КОГДА ДанныеРасчетаНалога.ОбъектНалогообложения = ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.Доходы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_Доходы)
	|		КОГДА ДанныеРасчетаНалога.НалогКУплате = ДанныеРасчетаНалога.МинимальныйНалог - ДанныеРасчетаНалога.АвансовыеПлатежи
	|				И ДанныеРасчетаНалога.НалогКУплате > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_МинимальныйНалог)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_ДоходыМинусРасходы)
	|	КОНЕЦ КАК АналитикаАктивовПассивов,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК КорПодразделение,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК КорСтатья,
	|	ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр КАК Сумма,
	|	ДанныеРасчетаНалога.НалогКУплате КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА ДанныеРасчетаНалога.НалогКУплате * &КоэффициентПересчетаВУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр
	|ИЗ
	|	ДанныеРасчетаНалога КАК ДанныеРасчетаНалога";
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация);
	
	КоэффициентПересчетаВУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ВалютаРегл, ВалютаУпр, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("СправкаРасчет", СправкаРасчет);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВУпр", КоэффициентПересчетаВУпр);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(Реквизиты.Период));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПрочиеАктивыПассивы = Результат[1].Выбрать();
	ВыборкаДвиженияПоПрочимАктивамПассивам = Результат[2].Выбрать();
	ВыборкаДвиженияДоходыРасходыПрочиеАктивыПассивы = Результат[3].Выбрать();
	
	Пока ВыборкаПрочиеАктивыПассивы.Следующий() Цикл
		
		Запись = ПрочиеАктивыПассивы.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаПрочиеАктивыПассивы);
		
	КонецЦикла;
	
	Пока ВыборкаДвиженияПоПрочимАктивамПассивам.Следующий() Цикл
		
		Запись = ДвиженияПоПрочимАктивамПассивам.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДвиженияПоПрочимАктивамПассивам);
		
	КонецЦикла;
	
	Пока ВыборкаДвиженияДоходыРасходыПрочиеАктивыПассивы.Следующий() Цикл
		
		Запись = ДвиженияДоходыРасходыПрочиеАктивыПассивы.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДвиженияДоходыРасходыПрочиеАктивыПассивы);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ПрочиеАктивыПассивы", ПрочиеАктивыПассивы);
	Результат.Вставить("ДвиженияПоПрочимАктивамПассивам", ДвиженияПоПрочимАктивамПассивам);
	Результат.Вставить("ДвиженияДоходыРасходыПрочиеАктивыПассивы", ДвиженияДоходыРасходыПрочиеАктивыПассивы);
	
	Возврат Результат;
	
КонецФункции

// Возвращает сумму фактически уплаченного организацией торгового сбора за период,
// учитываемую при уменьшении налога УСН-доходы.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - организация;
//  НачалоПериода  - Дата - начало анализируемого периода;
//  КонецПериода   - Дата - конец анализируемого периода;
//
// Возвращаемое значение:
//   Число  - сумма уплаченного торгового сбора
//
Функция УплаченныйТорговыйСбор(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если КонецПериода >= УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		// Уплаченный торговый сбор определяем по данным V раздела КУДиР.
		Возврат УплаченныйТорговыйСборПоДанным5РазделаКУДиР(Организация, НачалоПериода, КонецПериода);
	Иначе
		// Раздел V еще не ведется - определяем по данным бухгалтерского учета.
		Возврат УплаченныйТорговыйСборПоДаннымБухгалтерскогоУчета(Организация, НачалоПериода, КонецПериода);
	КонецЕсли;
	
КонецФункции

Функция УплаченныйТорговыйСборПоДанным5РазделаКУДиР(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовРаздел5Обороты.СуммаТорговогоСбора КАК СуммаТорговогоСбора
	|ПОМЕСТИТЬ УплатаТорговогоСбора
	|ИЗ
	|	Документ.ЗаписьКУДиР.УплаченныйТорговыйСбор КАК КнигаУчетаДоходовИРасходовРаздел5Обороты
	|ГДЕ
	|	КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходовРаздел5Обороты.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовРаздел5Обороты.СуммаРеглОборот
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|				И ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И СтатьяДоходовРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|				И АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТорговыйСбор)) КАК КнигаУчетаДоходовИРасходовРаздел5Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(УплатаТорговогоСбора.СуммаТорговогоСбора), 0) КАК СуммаТорговогоСбора
	|ИЗ УплатаТорговогоСбора"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаТорговогоСбора;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция УплаченныйТорговыйСборПоДаннымБухгалтерскогоУчета(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей());
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств", Счета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаТорговогоСбора
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДенежныхСредств) И НЕ СчетКт.Забалансовый,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОборотыДтКт"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаТорговогоСбора;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПериодНачалаПримененияПовышеннойСтавкиНалога(Организация, НачалоНалоговогоПериода, КонецОтчетногоПериода)
	
	Результат = Новый Структура("Период, Ошибки", Дата(1, 1, 1), Новый Массив);
	
	Если КонецОтчетногоПериода < УчетУСНКлиентСервер.ДатаНачалаПрогрессивнойШкалы() 
		Или КонецОтчетногоПериода > УчетНДС.ДатаНачалаПримененияНДСнаУСН() Тогда
		Возврат Результат;
	КонецЕсли;
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонецОтчетногоПериода);
	
	// Проверяем превышение лимита доходов.
	Запрос = ЗапросКУДиРЗаПериод(Организация, НачалоНалоговогоПериода, КонецОтчетногоПериода, Истина);
	
	ГраницаДоходов = КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаДоходовДляПримененияОсновнойСтавкиУСН(
		КонецОтчетногоПериода);
	
	ДоходыНакопительнымИтогом = 0;
	
	Если Запрос <> Неопределено Тогда
		
		ВыборкаКУДиР = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаКУДиР.Следующий() Цикл
			ДоходыНакопительнымИтогом = ДоходыНакопительнымИтогом + ВыборкаКУДИР.Доходы;
			
			Если Окр(ДоходыНакопительнымИтогом, РазрядностьОкругленияПоказателей) > ГраницаДоходов Тогда
				
				Если Не ЗначениеЗаполнено(Результат.Период)
					Или ВыборкаКУДиР.Период < Результат.Период Тогда
					Результат.Период = ВыборкаКУДиР.Период;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Проверяем превышение лимита средней численности работников.
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		ИЛИ РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация,
				НачалоНалоговогоПериода, КонецОтчетногоПериода) Тогда
		
		ГраницаЧисленностиРаботников =
			КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияОсновнойСтавкиУСН(НачалоНалоговогоПериода);
		
		ТекущийПериод = КонецКвартала(НачалоНалоговогоПериода);
		Пока ТекущийПериод <= КонецКвартала(КонецОтчетногоПериода) Цикл
			
			// Лимит по доходам достигнут раньше, чем лимит по сотрудникам. Дальнейшая проверка не имеет смысла
			Если ЗначениеЗаполнено(Результат.Период) И Результат.Период < ТекущийПериод Тогда
				Прервать;
			КонецЕсли;
			
			ЧисленностьРаботников = СредняяЧисленностьРаботников(Организация, НачалоНалоговогоПериода, ТекущийПериод);
			
			// При учете зарплаты во внешней программе, численность работников может быть не указана.
			// В таком случае считаем, что она находится в пределах 100 человек.
			Если ЧисленностьРаботников = Неопределено Тогда
				ЧисленностьРаботников = 1;
			КонецЕсли;
			
			Если ЧисленностьРаботников > ГраницаЧисленностиРаботников Тогда
				Результат.Период = НачалоКвартала(ТекущийПериод);
				Прервать;
			КонецЕсли;
			
			ТекущийПериод = КонецКвартала(ДобавитьМесяц(ТекущийПериод, 3));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросКУДиРЗаПериод(Организация, НачалоПериода, КонецПериода, РазбитьПоКварталам = Ложь)
	
	Если НачалоПериода > КонецПериода Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Период КАК Период,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы,
	|	0 КАК ДоходыТорговыйСбор
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал,
	|		Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Если НЕ РазбитьПоКварталам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КнигаУчетаДоходовИРасходовОбороты.Период", "&НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Квартал", "");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция НалоговаяБазаЗаПериодПоДаннымРасчетаНалога(Организация, ПериодРасчета)
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ПериодРасчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(КонецКвартала(ПериодРасчета)));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетНалогаУСН.Организация КАК Организация,
	|	РасчетНалогаУСН.ПериодРасчета КАК ПериодРасчета,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалоговаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК НалоговаяБаза,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалогВсего
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Налог,
	|	СУММА(ВЫБОР
	|		КОГДА РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалоговаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК НалоговаяБазаТорговыйСбор,
	|	СУММА(ВЫБОР
	|		КОГДА РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалогВсего
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК НалогТорговыйСбор
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета = &ПериодРасчета
	|	И РасчетНалогаУСН.Активность
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаУСН.Организация,
	|	РасчетНалогаУСН.ПериодРасчета";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
	КонецЕсли;
	
КонецФункции

Функция ПроверятьРегионРегистрацииПриУменьшенииНалогаНаТорговыйСбор(Период)
	
	// В соответствии с п. 8 ст. 346.21 НК РФ плательщики торгового сбора, применяющие УСН-доходы, могут уменьшить налог
	// на торговый сбор только тогда, когда и торговый сбор, и налог УСН уплачиваются в консолидированный бюджет
	// одного и того же региона. Поэтому при расчете торгового сбора, уменьшающего налог, необходимо проверять,
	// что налогоплательщик зарегистрирован в том же регионе, в котором уплачивает торговый сбор.
	
	// При этом необходимо избежать такой проверки при расчете налога "задним числом" - за периоды, когда
	// данной проверки в программе еще не было. Иначе при пересчете налога в организациях, зарегистрированных
	// не в регионе уплаты торгового сбора, сумма ранее рассчитанного налога может измениться.
	// А изменения в суммах начисленных налогов и финансового результата за предыдущие периоды нежелательны,
	// даже если какой-то из налогов исходно был рассчитан неверно.
	// Необходимые корректировки должны быть осознанным выбором пользователя и оформлены самостоятельно.
	
	// Пока не поддерживается проверка региона.
	
	Возврат Период >= '21200101';
	
КонецФункции

// Функция возвращает дату применения единого налогово платежа
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаПримененияЕНП() Экспорт
	
	// Федеральный закон от 14.07.2022 № 263-ФЗ "О внесении изменений в части первую и вторую Налогового кодекса
	// Российской Федерации" устанавливает что с 1 января 2023 года уплата любых налогов будет в обязательном порядке
	// осуществляться посредством единого налогового платежа на единый налоговый счет.

	Возврат Дата(2023,01,01);
	
КонецФункции

#КонецОбласти

#Область СторноЗаписейКУДиР

Функция ТекстЗапросаСторноЗаписейКУДиР()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходов.Период КАК Период,
	|	КнигаУчетаДоходовИРасходов.РеквизитыПервичногоДокумента КАК ДатаНомер,
	|	КнигаУчетаДоходовИРасходов.Содержание КАК Содержание,
	|	-КнигаУчетаДоходовИРасходов.Графа4 КАК Графа4,
	|	-КнигаУчетаДоходовИРасходов.Графа5 КАК Графа5,
	|	-КнигаУчетаДоходовИРасходов.Графа6 КАК Графа6,
	|	-КнигаУчетаДоходовИРасходов.Графа7 КАК Графа7,
	|	-КнигаУчетаДоходовИРасходов.НДС КАК НДС,
	|	-КнигаУчетаДоходовИРасходов.ДоходЕНВД КАК ДоходЕНВД,
	|	-КнигаУчетаДоходовИРасходов.ДоходПатент КАК ДоходПатент,
	|	-КнигаУчетаДоходовИРасходов.РасходЕНВД КАК РасходЕНВД,
	|	КнигаУчетаДоходовИРасходов.ДокументВозникновенияДоходовРасходов КАК ДокументВозникновенияДоходовРасходов,
	|	КнигаУчетаДоходовИРасходов.ВидРасходов КАК ВидРасходов,
	|	КнигаУчетаДоходовИРасходов.Статья КАК Статья,
	|	КнигаУчетаДоходовИРасходов.Партия КАК Партия,
	|	КнигаУчетаДоходовИРасходов.Патент КАК Патент
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	&Условия";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьУсловияВТекстЗапроса(ТекстЗапроса, Условия, ПодстрокаПоискаУсловий)
	
	РазделительУсловий = Символы.ПС + "	И	";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоискаУсловий, СтрСоединить(Условия, РазделительУсловий));
	
КонецПроцедуры

Функция ТекстУсловияЗапросаРавенство(ИмяТаблицы, ИмяПоля)
	
	Возврат СтрШаблон("%1.%2 = &%2", ИмяТаблицы, ИмяПоля);
	
КонецФункции

Функция ТекстУсловияЗапросаГраницыПериода(ИмяТаблицы, ИмяПоля)
	
	Возврат СтрШаблон("%1.%2 МЕЖДУ &%3 И &%4",
		ИмяТаблицы,
		ИмяПоля,
		ИмяПараметраНачалоПериода(ИмяПоля),
		ИмяПараметраКонецПериода(ИмяПоля));
	
КонецФункции

Функция ИмяПараметраНачалоПериода(ИмяПоляПериод)
	
	Возврат СтрШаблон("%1НачалоПериода", ИмяПоляПериод);
	
КонецФункции

Функция ИмяПараметраКонецПериода(ИмяПоляПериод)
	
	Возврат СтрШаблон("%1КонецПериода", ИмяПоляПериод);
	
КонецФункции

Функция РезультатЗапросаВМассивСтруктур(РезультатЗапроса)
	
	ЗаписиРезультата = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗаписиРезультата;
	КонецЕсли;
	
	ИменаКолонок = Новый Массив;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ",");
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураЗаписи = Новый Структура(ИменаКолонокСтрокой);
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);
		ЗаписиРезультата.Добавить(СтруктураЗаписи);
	КонецЦикла;
	
	Возврат ЗаписиРезультата;
	
КонецФункции

#КонецОбласти

#Область СторноДоходов

Процедура СторнироватьОтраженныеДоходы(ВременныеТаблицы, КоличествоОбработанныхДанных = 0)
	
	КолонкиСтруктуры = "СуммаВсего, СуммаУСН, СуммаПатент, СуммаЕНВД, СуммаНеПризнано, СуммаНДС, СуммаНДСКомиссии";
	
	РезультатЗапроса = ДанныеДокументовДляЗаполненияСторно(ВременныеТаблицы);
	
	ВыборкаДокументовСторнирования = РезультатЗапроса.Получить(0).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеОРП = РезультатЗапроса.Получить(1).Выгрузить();
	ДанныеОРП.Индексы.Добавить("Регистратор");
	
	Платежи = РезультатЗапроса.Получить(2).Выгрузить();
	Платежи.Индексы.Добавить("Платеж");
	
	ОплатыПоДокументу = РезультатЗапроса.Получить(3).Выгрузить();
	ОплатыПоДокументу.Индексы.Добавить("Регистратор"); 
	
	УчетнаяПолитикаОрганизации = РезультатЗапроса.Получить(4).Выгрузить();
	
	Пока ВыборкаДокументовСторнирования.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.КнигаУчетаДоходовИРасходов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументовСторнирования.Регистратор);
		Знак = ?(ТипЗнч(ВыборкаДокументовСторнирования.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента"), -1, 1);
			
		Если НЕ ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
			ИмяСобытия = НСтр("ru = 'Коррекция доходов по %1 при УСН. Не выполнена запись доходов в регистр КУДиР.';
								|en = 'Adjustment of income from %1 with STS. Income is not written to the LIE register.'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
			ИмяСобытия = СтрШаблон(ИмяСобытия, ПредставлениеОсобогоНалогообложения());
			Комментарий = НСтр("ru = 'Документ, корректирующий доходы, не является регистратором для служебного регистра УСН.';
								|en = 'Document that adjusts income is not a recorder for STS service register.'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов,
				ВыборкаДокументовСторнирования.Регистратор, Комментарий, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
			Продолжить;
			
		КонецЕсли;
		
		// Уже учтенные суммы по документу (актуально для отчетов о розничных продажах):
		УчтеноПоДокументу = Неопределено;
		Если ТипЗнч(ВыборкаДокументовСторнирования.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			УчтеноПоДокументу = Новый Структура(КолонкиСтруктуры, 0,0, 0, 0, 0, 0, 0);
			ДанныеТекущейОРП = ДанныеОРП.Найти(ВыборкаДокументовСторнирования.Регистратор, "Регистратор");
			Если НЕ ДанныеТекущейОРП = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(УчтеноПоДокументу, ДанныеТекущейОРП);
			КонецЕсли;
		КонецЕсли;
		
		ОплатыПоЭквайрингу = Новый Соответствие;
		СтруктураОтбора = Новый Структура("Регистратор", ВыборкаДокументовСторнирования.Регистратор);
		СтрокиОплат = ОплатыПоДокументу.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаОплаты Из СтрокиОплат Цикл
			ОплатыПоЭквайрингу.Вставить(СтрокаОплаты.Договор, СтрокаОплаты.Сумма);
		КонецЦикла;
		
		ПродажиПоЭквайрингу = Новый Соответствие;
		
		ВыборкаПериодов = ВыборкаДокументовСторнирования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПериодов.Следующий() Цикл
		
		ВыборкаПлатежей = ВыборкаПериодов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПлатежей.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПлатежей.Платеж) Тогда
				ДанныеПлатежа = Платежи.Найти(ВыборкаПлатежей.Платеж, "Платеж");
				
				Если ДанныеПлатежа = Неопределено Тогда
					ИмяСобытия = НСтр("ru = 'Коррекция доходов по %1 при УСН. Не выполнена запись доходов в регистр КУДиР.';
										|en = 'Adjustment of income from %1 with STS. Income is not written to the LIE register.'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
					ИмяСобытия = СтрШаблон(ИмяСобытия, ПредставлениеОсобогоНалогообложения());
					Комментарий = НСтр("ru = 'Документ, определенный как платеж, не сделал движений по доходам в служебный регистр УСН.';
										|en = 'The document defined as a payment did not make any income records to the STS service register.'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов,
						ВыборкаПлатежей.Платеж, Комментарий, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
					
					Продолжить;
					
				КонецЕсли;
				
				ДанныеПлатежа.СуммаПлатежа = ДанныеПлатежа.ДоходВсего;
			КонецЕсли;
			СуммаОплаты = Мин(ОплатыПоЭквайрингу.Получить(ВыборкаПлатежей.ДоговорЭквайринга), ДанныеПлатежа.СуммаПлатежа, ВыборкаПлатежей.СуммаВсего);
			СуммаНДСОплаты = Мин(ДанныеПлатежа.ДоходНДС, ВыборкаПлатежей.СуммаНДС);
			
			ОплатыПоЭквайрингу.Вставить(ВыборкаПлатежей.ДоговорЭквайринга, ОплатыПоЭквайрингу.Получить(ВыборкаПлатежей.ДоговорЭквайринга) - СуммаОплаты);
			
			Выборка = ВыборкаПлатежей.Выбрать();
			
			Пока Выборка.Следующий() И СуммаОплаты > 0 Цикл
				
				ДанныеПродажи = ПродажиПоЭквайрингу.Получить(Выборка.ХозяйственнаяОперация);
				ДоходыПоДокументу = Новый Структура(КолонкиСтруктуры);
				ЗаполнитьЗначенияСвойств(ДоходыПоДокументу, Выборка);
				ДанныеПродажи = ?(ДанныеПродажи = Неопределено, ДоходыПоДокументу, ДанныеПродажи);
				
				// Вычитаем из текущих сумм по документу уже учтенные суммы:
				Если УчтеноПоДокументу <> Неопределено Тогда
					СуммаВсего = 0;
					Для каждого ЭлементУчета Из ДанныеПродажи Цикл
						
						Если УчтеноПоДокументу[ЭлементУчета.Ключ] = 0 ИЛИ ЭлементУчета.Ключ = "СуммаВсего" Тогда
							Продолжить;
						КонецЕсли;
						
						СуммаУменьшения = ?(УчтеноПоДокументу[ЭлементУчета.Ключ] > ЭлементУчета.Значение,
							ЭлементУчета.Значение, УчтеноПоДокументу[ЭлементУчета.Ключ]);
						ДанныеПродажи[ЭлементУчета.Ключ] = ДанныеПродажи[ЭлементУчета.Ключ] - СуммаУменьшения;
						УчтеноПоДокументу[ЭлементУчета.Ключ] = УчтеноПоДокументу[ЭлементУчета.Ключ] - СуммаУменьшения;
						Если НЕ ЭлементУчета.Ключ = "СуммаУСН" Тогда
							СуммаВсего = СуммаВсего + СуммаУменьшения;
						КонецЕсли;
					КонецЦикла;
					УчтеноПоДокументу["СуммаВсего"] = УчтеноПоДокументу["СуммаВсего"] - СуммаВсего;
				КонецЕсли;
				
				СтруктураКорректировки = Новый Структура("УСН, ЕНВД, Патент, НеПризнано, НДС", 0, 0, 0, 0,0);
				ЕстьКорректировка = Ложь;
				
				УчтеннаяСумма = 0;
				
				Для каждого ЭлементКорректировки Из СтруктураКорректировки Цикл
					
					Если ЭлементКорректировки.Ключ = "НДС" Тогда
						Продолжить;
					КонецЕсли;
					
					ЗначениеКорректировки = ЭлементКорректировки.Значение;
					ИмяКолонки = ЭлементКорректировки.Ключ;
					
					СуммаДокумента = Мин(Знак * ДанныеПродажи["Сумма"+ИмяКолонки], СуммаОплаты);
					СуммаПлатежа = Мин(Знак * ДанныеПлатежа["Доход"+ИмяКолонки], СуммаОплаты);
					
					Если СуммаДокумента > СуммаПлатежа Тогда
						ЗначениеКорректировки = ЗначениеКорректировки + СуммаДокумента - СуммаПлатежа;
					КонецЕсли;
					
					СуммаДляУменьшенияПродажиОплаты = Мин(СуммаДокумента,СуммаПлатежа);
					СуммаДоУменьшения = ДанныеПродажи["Сумма"+ИмяКолонки];
											
					Если СуммаДляУменьшенияПродажиОплаты > 0 ИЛИ ЗначениеКорректировки <> 0 Тогда
						ДанныеПродажи["Сумма"+ИмяКолонки] = ДанныеПродажи["Сумма"+ИмяКолонки] -
							?(ЗначениеКорректировки = 0, СуммаДляУменьшенияПродажиОплаты, ЗначениеКорректировки);
					КонецЕсли;  
						
					Если СуммаДляУменьшенияПродажиОплаты > 0 Тогда
						ДанныеПлатежа["Доход"+ИмяКолонки] = ДанныеПлатежа["Доход"+ИмяКолонки] - СуммаДляУменьшенияПродажиОплаты;
						Если ЗначениеКорректировки = 0 Тогда
							// Учтем и сумму всего, так как уменьшаем данные платежа при отсутствии корректировки (если она будет, сумма всего будет уменьшена позже):
							ДанныеПлатежа.ДоходВсего = ДанныеПлатежа.ДоходВсего - СуммаДляУменьшенияПродажиОплаты;
							СуммаОплаты = СуммаОплаты - СуммаДляУменьшенияПродажиОплаты;
						КонецЕсли;
					КонецЕсли;
					
					СтруктураКорректировки[ИмяКолонки] = ЗначениеКорректировки;
					УчтеннаяСумма = УчтеннаяСумма + ЗначениеКорректировки;
					СуммаОплаты = СуммаОплаты - ЗначениеКорректировки;
					
					УчтеннаяСуммаУСН = СуммаДляУменьшенияПродажиОплаты - ЗначениеКорректировки;
					Если ЭлементКорректировки.Ключ = "УСН" И УчтеннаяСуммаУСН > 0 И ДанныеПлатежа.ДоходУСНДляНДС <> 0  
						И ЗначениеЗаполнено(ВыборкаПлатежей.ДоговорЭквайринга) Тогда
						Если СуммаДоУменьшения <> 0 Тогда
							СуммаКорректировкиНДСПродажи = (ДанныеПродажи.СуммаНДС - ДанныеПродажи.СуммаНДСКомиссии) * УчтеннаяСуммаУСН / СуммаДоУменьшения;
						Иначе 
							СуммаКорректировкиНДСПродажи = ДанныеПродажи.СуммаНДС;
						КонецЕсли;
						ДанныеПродажи.СуммаНДС = ДанныеПродажи.СуммаНДС - ?(СуммаКорректировкиНДСПродажи < 0, 0, СуммаКорректировкиНДСПродажи);
						СуммаКорректировкиНДС = Окр(ДанныеПлатежа.ДоходНДС * УчтеннаяСуммаУСН / ДанныеПлатежа.ДоходУСНДляНДС,2)
							- ?(СуммаКорректировкиНДСПродажи < 0, 0, СуммаКорректировкиНДСПродажи);
						Если СуммаКорректировкиНДС >= 1 Тогда
							СтруктураКорректировки.НДС = СтруктураКорректировки.НДС - Окр(СуммаКорректировкиНДС,2);
						КонецЕсли;
					КонецЕсли;
					
					
				КонецЦикла;
				
				Если УчтеннаяСумма > 0 Тогда
					
					ДанныеПродажи.СуммаВсего = Знак * ДанныеПродажи.СуммаВсего - УчтеннаяСумма;
					ЕстьКорректировка = Истина;
					
					Для каждого ЭлементКорректировки Из СтруктураКорректировки Цикл
					
						ИмяКолонки = ЭлементКорректировки.Ключ;
						
						Если УчтеннаяСумма = 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если ДанныеПлатежа["Доход"+ИмяКолонки] > 0 Тогда
							УменьшаемаяСумма = Мин(ДанныеПлатежа["Доход"+ИмяКолонки], УчтеннаяСумма);
							
							Если ИмяКолонки = "УСН" И ДанныеПлатежа.ДоходНДС <> 0 И ДанныеПлатежа.ДоходУСНДляНДС <> 0 Тогда 
								УменьшаемаяСуммаНДС = ДанныеПлатежа.ДоходНДС * УменьшаемаяСумма / ДанныеПлатежа.ДоходУСНДляНДС;
								СтруктураКорректировки.НДС = СтруктураКорректировки.НДС - УменьшаемаяСуммаНДС; 
							КонецЕсли;
							
							ДанныеПлатежа["Доход"+ИмяКолонки] = ДанныеПлатежа["Доход"+ИмяКолонки] - УменьшаемаяСумма;
							СтруктураКорректировки[ИмяКолонки] = СтруктураКорректировки[ИмяКолонки] - УменьшаемаяСумма;
							УчтеннаяСумма = УчтеннаяСумма - УменьшаемаяСумма;
							ДанныеПлатежа.СуммаПлатежа = ДанныеПлатежа.СуммаПлатежа - УменьшаемаяСумма;
							ДанныеПлатежа.ДоходВсего = ДанныеПлатежа.ДоходВсего - УменьшаемаяСумма;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				НеУчитыватьНДСВДоходах = Ложь;
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Организация", Выборка.Организация);
				ПараметрыОтбора.Вставить("Период", НачалоМесяца(Выборка.Период));
				СтрокиУчетнойПолитики = УчетнаяПолитикаОрганизации.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиУчетнойПолитики.Количество() > 0 И СтруктураКорректировки.НДС <> 0 Тогда
					НеУчитыватьНДСВДоходах = СтрокиУчетнойПолитики[0].НеУчитыватьНДСВДоходах; 
					ЕстьКорректировка = ЕстьКорректировка Или НеУчитыватьНДСВДоходах;
				КонецЕсли;
				
				Если ЕстьКорректировка Тогда
					
					ЗаписьСторноПриход = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьСторноПриход, ДанныеПлатежа);
					ЗаполнитьЗначенияСвойств(ЗаписьСторноПриход, Выборка);
					
					ЗаписьСторноПриход.Графа5 = СтруктураКорректировки.УСН;
					ЗаписьСторноПриход.ДоходЕНВД = СтруктураКорректировки.ЕНВД;
					ЗаписьСторноПриход.ДоходПатент = СтруктураКорректировки.Патент;
					
					Если НеУчитыватьНДСВДоходах Тогда
						ЗаписьСторноПриход.НДС = СтруктураКорректировки.НДС;
					КонецЕсли;
					
					ДополнительнаяИнформация = "";
					Если СтруктураКорректировки.ЕНВД > 0 Тогда
						ДополнительнаяИнформация = НСтр("ru = 'Не признаны доходы, по причине реализации по деятельности ЕНВД.';
														|en = 'Incomes are not recognized due to the sale of UTII operations.'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли СтруктураКорректировки.Патент > 0 И СтруктураКорректировки.УСН = 0 И СтруктураКорректировки.ЕНВД = 0 Тогда
						ДополнительнаяИнформация = НСтр("ru = 'Признаны доходы ПСН по причине изменения патента при продаже.';
														|en = 'The PTS income is recognized, due to patent change on sale.'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли СтруктураКорректировки.Патент > 0 И (СтруктураКорректировки.УСН < 0 ИЛИ СтруктураКорректировки.ЕНВД < 0) Тогда
						ДополнительнаяИнформация = НСтр("ru = 'Признаны доходы ПСН, по причине реализации по патенту.';
														|en = 'The PTS income is recognized, due to sale based on the patent.'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли СтруктураКорректировки.УСН > 0 И (СтруктураКорректировки.Патент < 0 ИЛИ СтруктураКорректировки.ЕНВД < 0) Тогда
						ДополнительнаяИнформация = НСтр("ru = 'Признаны доходы УСН, по причине реализации по деятельности упрощенного налогообложения.';
														|en = 'The PTS income is recognized, due to sale based on simplified taxation activity.'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли НеУчитыватьНДСВДоходах Тогда
						ДополнительнаяИнформация = НСтр("ru = 'Не признаны доходы в сумме НДС.';
														|en = 'Не признаны доходы в сумме НДС.'", ОбщегоНазначения.КодОсновногоЯзыка());
					Иначе
						ДополнительнаяИнформация = НСтр("ru = 'Не признаны доходы в части реализации комиссионного товара.';
														|en = 'Incomes regarding sales of consigned goods are not recognized.'", ОбщегоНазначения.КодОсновногоЯзыка());
					КонецЕсли;
					
					ПараметрыСодержанияДохода = ПараметрыСодержанияДохода();
					ПараметрыСодержанияДохода.ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
					ПараметрыСодержанияДохода.ИнформацияОПлатеже = ДополнительнаяИнформация;
					ЗаписьСторноПриход.Содержание = СодержаниеДохода(ПараметрыСодержанияДохода);
					ЗаписьСторноПриход.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(Выборка.Регистратор, Выборка);
					
				КонецЕсли;
				
				ПродажиПоЭквайрингу.Вставить(Выборка.ХозяйственнаяОперация, ДанныеПродажи);
				
				КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + 1;
			
			КонецЦикла;
			
		КонецЦикла;
		
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяСторноДоходовКУДиР(Параметры) Экспорт
	
	ВременныеТаблицыДляЗаполненияСторно = ВременныеТаблицыДляЗаполненияСторно(Параметры);
	ТаблицаРегистраторовДоходов = ВременныеТаблицыДляЗаполненияСторно.Таблицы.Найти("ТаблицаРегистраторовДоходов");
	
	Если ТаблицаРегистраторовДоходов = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Не ТаблицаРегистраторовДоходов.ПолучитьДанные().Пустой();
	КонецЕсли;
	
КонецФункции

#Область Запросы

Функция ДанныеДокументовДляЗаполненияСторно(ВременныеТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Текст = ТекстЗапросаВыборкиДокументовДляЗаполненияСторно();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ВременныеТаблицыДляЗаполненияСторно(Параметры)
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметровЗапроса = Параметры;
	Если Параметры.Свойство("Организация") Тогда
		СтруктураПараметровЗапроса.Вставить("МассивОрганизаций", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Организация));
	КонецЕсли;
	ДополнитьПараметрамиПоУмолчанию(СтруктураПараметровЗапроса);
	Запрос = ИнициализироватьЗапросПоПараметрам(СтруктураПараметровЗапроса, ВременныеТаблицы);
	
	Запрос.Текст = ТекстЗапросаСторноДоходов();
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции


Функция ТекстЗапросаТаблицаДействующихПатентовПоПодразделениям()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Патенты.Ссылка КАК Патент,
	|	Патенты.ДатаНачала КАК ДатаНачала,
	|	Патенты.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(Подразделения.СтруктурнаяЕдиница, ПодразделенияПатента.Подразделение) КАК Подразделение
	|ПОМЕСТИТЬ ВТПодразделенияДействующихПатентов
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты.ПрименениеПатента КАК ПодразделенияПатента
	|		ПО Патенты.Ссылка = ПодразделенияПатента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК Подразделения
	|		ПО ПодразделенияПатента.Подразделение = Подразделения.ВышестоящаяСтруктурнаяЕдиница
	|ГДЕ
	|	Патенты.Владелец В (&МассивОрганизаций)
	|	И НЕ Патенты.ПометкаУдаления
	|	И Патенты.ДатаНачала <= &КонДата
	|	И Патенты.ДатаОкончания >= &НачДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Патенты.Ссылка КАК Патент,
	|	Патенты.ДатаНачала КАК ДатаНачала,
	|	Патенты.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(Подразделения.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
	|
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патенты.ПрименениеПатента КАК ПодразделенияПатента
	|		ПО Патенты.Ссылка = ПодразделенияПатента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патенты КАК ДругиеПатенты
	|		ПО ДругиеПатенты.Владелец В (&МассивОрганизаций)
	|	И НЕ ДругиеПатенты.ПометкаУдаления
	|	И ДругиеПатенты.ДатаНачала <= &КонДата
	|	И ДругиеПатенты.ДатаОкончания >= &НачДата
	|	И Патенты.Ссылка <> ДругиеПатенты.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК Подразделения ПО ИСТИНА
	|ГДЕ
	|	Патенты.Владелец В (&МассивОрганизаций)
	|	И НЕ Патенты.ПометкаУдаления
	|	И Патенты.ДатаНачала <= &КонДата
	|	И Патенты.ДатаОкончания >= &НачДата
	|	И ДругиеПатенты.Ссылка ЕСТЬ NULL
	|	И ПодразделенияПатента.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияПатентов.Подразделение
	|ПОМЕСТИТЬ ВТУникальныеПодразделенияПатентов
	|ИЗ ВТПодразделенияДействующихПатентов КАК ПодразделенияПатентов
	|СГРУППИРОВАТЬ ПО
	|	ПодразделенияПатентов.Подразделение
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодразделенияПатентов.Патент) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДействующиеПатентыПоПодразделениям.Патент,
	|	ДействующиеПатентыПоПодразделениям.ДатаНачала,
	|	ДействующиеПатентыПоПодразделениям.ДатаОкончания,
	|	ДействующиеПатентыПоПодразделениям.Подразделение
	|ПОМЕСТИТЬ ТаблицаДействующихПатентов
	|ИЗ ВТПодразделенияДействующихПатентов КАК ДействующиеПатентыПоПодразделениям
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ВТУникальныеПодразделенияПатентов КАК УникальныеПодразделенияПатентов
	|		ПО ДействующиеПатентыПоПодразделениям.Подразделение = УникальныеПодразделенияПатентов.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДействующиеПатентыПоПодразделениям.Подразделение,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУникальныеПодразделенияПатентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПодразделенияДействующихПатентов";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОрганизацииНаЕНВД()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаЕНВД.Организация КАК Организация,
	|	УчетнаяПолитикаЕНВД.Период КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(УчетнаяПолитикаНеЕНВД.Период, &КонДата)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТОрганизацииНаЕНВДПредвирительная
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК УчетнаяПолитикаЕНВД
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК УчетнаяПолитикаНеЕНВД
	|		ПО УчетнаяПолитикаЕНВД.Организация = УчетнаяПолитикаНеЕНВД.Организация
	|		И НЕ УчетнаяПолитикаНеЕНВД.ПрименяетсяЕНВД
	|		И УчетнаяПолитикаНеЕНВД.Период <= &КонДата
	|		И УчетнаяПолитикаНеЕНВД.Период > УчетнаяПолитикаЕНВД.Период
	|ГДЕ
	|	УчетнаяПолитикаЕНВД.Организация В (&МассивОрганизаций)
	|	И УчетнаяПолитикаЕНВД.ПрименяетсяЕНВД
	|	И УчетнаяПолитикаЕНВД.Период <= &КонДата
	|СГРУППИРОВАТЬ ПО
	|	УчетнаяПолитикаЕНВД.Организация,
	|	УчетнаяПолитикаЕНВД.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОрганизацииНаЕНВД.ДатаНачала) КАК ДатаНачала,
	|	ОрганизацииНаЕНВД.ДатаОкончания,
	|	ОрганизацииНаЕНВД.Организация
	|ПОМЕСТИТЬ ВТОрганизацииНаЕНВД
	|ИЗ ВТОрганизацииНаЕНВДПредвирительная КАК ОрганизацииНаЕНВД
	|СГРУППИРОВАТЬ ПО
	|	ОрганизацииНаЕНВД.Организация,
	|	ОрганизацииНаЕНВД.ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОрганизацииНаЕНВДПредвирительная";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПродаж()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродаж.Период КАК Период,
	|	ВыручкаИСебестоимостьПродаж.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам
	|	КОНЕЦ КАК Аналитика,
	|	Аналитика.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаДействующихПатентов.Патент, НЕОПРЕДЕЛЕНО) КАК Патент,
	|	СУММА(ВыручкаИСебестоимостьПродаж.СуммаВыручкиСНДСРегл - ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл) КАК СуммаНДС,
	|	СУММА(ВЫБОР КОГДА
	|			ВыручкаИСебестоимостьПродаж.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|			ИЛИ ВыручкаИСебестоимостьПродаж.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		ТОГДА ВыручкаИСебестоимостьПродаж.СуммаВыручкиСНДСРегл - ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл
	|		ИНАЧЕ 0 КОНЕЦ) КАК СуммаНДСКомиссии, 
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентамиПоПринципалу.ДолгРегл, ВыручкаИСебестоимостьПродаж.СуммаВыручкиСНДСРегл)) КАК СуммаВсего,
	|	СУММА(ВЫБОР КОГДА НЕ ОрганизацииНаЕНВД.Организация ЕСТЬ NULL
	|			И ВыручкаИСебестоимостьПродаж.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|			И ВыручкаИСебестоимостьПродаж.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоПринципалу.ДолгРегл, ВыручкаИСебестоимостьПродаж.СуммаВыручкиСНДСРегл) ИНАЧЕ 0 КОНЕЦ) КАК СуммаЕНВД,
	|	СУММА(ВЫБОР КОГДА ВыручкаИСебестоимостьПродаж.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
	|			И ВыручкаИСебестоимостьПродаж.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|			И ВыручкаИСебестоимостьПродаж.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоПринципалу.ДолгРегл, ВыручкаИСебестоимостьПродаж.СуммаВыручкиСНДСРегл) ИНАЧЕ 0 КОНЕЦ) КАК СуммаПатент,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ РасчетыСКлиентамиПоПринципалу.ХозяйственнаяОперация ЕСТЬ NULL
	|			ТОГДА РасчетыСКлиентамиПоПринципалу.ДолгРегл - ВыручкаИСебестоимостьПродаж.СуммаВыручкиСНДСРегл
	|			КОГДА ВыручкаИСебестоимостьПродаж.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ИЛИ ВыручкаИСебестоимостьПродаж.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|			ТОГДА ВыручкаИСебестоимостьПродаж.СуммаВыручкиСНДСРегл
	|		ИНАЧЕ 0 КОНЕЦ) КАК СуммаКомиссии,
	|	ВыручкаИСебестоимостьПродаж.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТПродажи
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДействующихПатентов КАК ТаблицаДействующихПатентов
	|		ПО ВыручкаИСебестоимостьПродаж.Подразделение = ТаблицаДействующихПатентов.Подразделение
	|		И ВыручкаИСебестоимостьПродаж.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
	|		И ВыручкаИСебестоимостьПродаж.Период >= ТаблицаДействующихПатентов.ДатаНачала
	|		И ВыручкаИСебестоимостьПродаж.Период <= ТаблицаДействующихПатентов.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизацииНаЕНВД КАК ОрганизацииНаЕНВД
	|		ПО Аналитика.Организация = ОрганизацииНаЕНВД.Организация
	|		И ВыручкаИСебестоимостьПродаж.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|		И ВыручкаИСебестоимостьПродаж.Период >= ОрганизацииНаЕНВД.ДатаНачала
	|		И ВыручкаИСебестоимостьПродаж.Период <= ОрганизацииНаЕНВД.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоПринципалу
	|		ПО РасчетыСКлиентамиПоПринципалу.ДокументРегистратор = ВыручкаИСебестоимостьПродаж.Регистратор
	|		И РасчетыСКлиентамиПоПринципалу.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоставкаПодПринципала)
	|		И РасчетыСКлиентамиПоПринципалу.Период = ВыручкаИСебестоимостьПродаж.Период
	|		И ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.ОтчетКомитентуОЗакупках
	|ГДЕ
	|	Аналитика.Организация В (&МассивОрганизаций)
	|	И ВыручкаИСебестоимостьПродаж.Период МЕЖДУ &НачДата И &КонДата
	|	И ВЫБОР КОГДА ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	ТОГДА ВыручкаИСебестоимостьПродаж.Период > &НачДатаАнализаОРП ИНАЧЕ ИСТИНА КОНЕЦ
	|	И НЕ ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.ОтчетОРозничныхВозвратах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимостьПродаж.Период,
	|	ВыручкаИСебестоимостьПродаж.Регистратор,
	|	ВЫБОР
	|		КОГДА ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам
	|	КОНЕЦ,
	|	Аналитика.Организация,
	|	ЕСТЬNULL(ТаблицаДействующихПатентов.Патент, НЕОПРЕДЕЛЕНО),
	|	ВыручкаИСебестоимостьПродаж.ХозяйственнаяОперация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Аналитика,
	|	Период";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДоходовДляАнализаНеобходимостиСторно()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И РасчетыСКлиентами.ПредоплатаРегл <> 0
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.ДокументРегистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.РасчетныйДокумент ЕСТЬ NULL
	|		ТОГДА Взаимозачеты.РасчетныйДокумент
	|		КОГДА РасчетыСКлиентами.РасчетныйДокумент ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И НЕ ВзаимозачетыПоРасчетнымДокументам.ДокументРегистратор ЕСТЬ NULL
	|		ТОГДА ВзаимозачетыПоРасчетнымДокументам.ДокументРегистратор
	|		ИНАЧЕ РасчетыСКлиентами.РасчетныйДокумент
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.АналитикаУчетаПоПартнерам ЕСТЬ NULL
	|		ТОГДА Взаимозачеты.АналитикаУчетаПоПартнерам
	|		КОГДА РасчетыСКлиентами.РасчетныйДокумент ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И НЕ ВзаимозачетыПоРасчетнымДокументам.АналитикаУчетаПоПартнерам ЕСТЬ NULL
	|		ТОГДА ВзаимозачетыПоРасчетнымДокументам.АналитикаУчетаПоПартнерам
	|		ИНАЧЕ РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|	КОНЕЦ КАК АналитикаУчетаПоПартнерам,
	|	Аналитика.Организация КАК Организация,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ Взаимозачеты.ДолгРегл ЕСТЬ NULL 
	|	      	ТОГДА ЕСТЬNULL(Взаимозачеты.ДолгРегл, 0)
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|			ТОГДА РасчетыСКлиентами.ПредоплатаРегл
	|			ИНАЧЕ РасчетыСКлиентами.ДолгРегл
	|		КОНЕЦ ) КАК СуммаОплаты
	|ПОМЕСТИТЬ ДоходыДляПроверкиНаСторно
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Взаимозачеты
	|		ПО (РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности)
	|			И (РасчетыСКлиентами.ПредоплатаРегл <> 0)
	|			И (РасчетыСКлиентами.ДокументРегистратор = Взаимозачеты.ДокументРегистратор)
	|			И (РасчетыСКлиентами.РасчетныйДокумент <> Взаимозачеты.РасчетныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВзаимозачетыПоРасчетнымДокументам
	|		ПО (РасчетыСКлиентами.РасчетныйДокумент ССЫЛКА Документ.ВзаимозачетЗадолженности)
	|			И (РасчетыСКлиентами.РасчетныйДокумент = ВзаимозачетыПоРасчетнымДокументам.РасчетныйДокумент)
	|			И (ВзаимозачетыПоРасчетнымДокументам.РасчетныйДокумент <> ВзаимозачетыПоРасчетнымДокументам.ДокументРегистратор)
	|			И (РасчетыСКлиентами.ДокументРегистратор <> ВзаимозачетыПоРасчетнымДокументам.ДокументРегистратор)
	|ГДЕ
	|	Аналитика.Организация В (&МассивОрганизаций)
	|	И РасчетыСКлиентами.Период МЕЖДУ &НачДата И &КонДата
	|	И НЕ РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|	И РасчетыСКлиентами.РасчетныйДокумент <> РасчетыСКлиентами.ДокументРегистратор
	|	И (НЕ Взаимозачеты.АналитикаУчетаПоПартнерам ЕСТЬ NULL ИЛИ НЕ РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности)
	|	
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Период,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И РасчетыСКлиентами.ПредоплатаРегл <> 0
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.ДокументРегистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.РасчетныйДокумент ЕСТЬ NULL
	|		ТОГДА Взаимозачеты.РасчетныйДокумент
	|		КОГДА РасчетыСКлиентами.РасчетныйДокумент ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И НЕ ВзаимозачетыПоРасчетнымДокументам.ДокументРегистратор ЕСТЬ NULL
	|		ТОГДА ВзаимозачетыПоРасчетнымДокументам.ДокументРегистратор
	|		ИНАЧЕ РасчетыСКлиентами.РасчетныйДокумент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.АналитикаУчетаПоПартнерам ЕСТЬ NULL
	|		ТОГДА Взаимозачеты.АналитикаУчетаПоПартнерам
	|		КОГДА РасчетыСКлиентами.РасчетныйДокумент ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И НЕ ВзаимозачетыПоРасчетнымДокументам.АналитикаУчетаПоПартнерам ЕСТЬ NULL
	|		ТОГДА ВзаимозачетыПоРасчетнымДокументам.АналитикаУчетаПоПартнерам
	|		ИНАЧЕ РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|	КОНЕЦ,
	|	Аналитика.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	АналитикаУчетаПоПартнерам";
	
	#Область СтарыеВзаиморасчеты
	
	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И РасчетыСКлиентами.ПредоплатаРегл <> 0
	|			ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.ДокументРегистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.РасчетныйДокумент ЕСТЬ NULL
	|			ТОГДА Взаимозачеты.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.РасчетныйДокумент
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.АналитикаУчетаПоПартнерам ЕСТЬ NULL
	|			ТОГДА Взаимозачеты.АналитикаУчетаПоПартнерам
	|		ИНАЧЕ РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|	КОНЕЦ КАК АналитикаУчетаПоПартнерам,
	|	Аналитика.Организация КАК Организация,
	|	СУММА(ВЫБОР
	|		КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|		ТОГДА РасчетыСКлиентами.ПредоплатаРегл
	|		ИНАЧЕ РасчетыСКлиентами.ДолгРегл
	|	КОНЕЦ + ЕСТЬNULL(Взаимозачеты.ДолгРегл, 0)) КАК СуммаОплаты
	|ПОМЕСТИТЬ ДоходыДляПроверкиНаСторно
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Взаимозачеты
	|		ПО (РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности)
	|			И (РасчетыСКлиентами.ПредоплатаРегл <> 0)
	|			И (РасчетыСКлиентами.ДокументРегистратор = Взаимозачеты.ДокументРегистратор)
	|			И (РасчетыСКлиентами.РасчетныйДокумент <> Взаимозачеты.РасчетныйДокумент)
	|ГДЕ
	|	Аналитика.Организация В (&МассивОрганизаций)
	|	И РасчетыСКлиентами.Период МЕЖДУ &НачДата И &КонДата
	|	И НЕ РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|	И (НЕ Взаимозачеты.АналитикаУчетаПоПартнерам ЕСТЬ NULL ИЛИ НЕ РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности)
	|	
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Период,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И РасчетыСКлиентами.ПредоплатаРегл <> 0
	|			ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.ДокументРегистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.РасчетныйДокумент ЕСТЬ NULL
	|			ТОГДА Взаимозачеты.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.РасчетныйДокумент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И РасчетыСКлиентами.ПредоплатаРегл <> 0 И НЕ Взаимозачеты.АналитикаУчетаПоПартнерам ЕСТЬ NULL
	|			ТОГДА Взаимозачеты.АналитикаУчетаПоПартнерам
	|		ИНАЧЕ РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|	КОНЕЦ,
	|	Аналитика.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	АналитикаУчетаПоПартнерам";
		
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПродажИПлатежейКлиентам()
	
	МассивТекстовЗапросов = Новый Массив;
	
	#Область СоединениеПродажСПлатежами
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Период КАК Период,
	|	РасчетыСКлиентами.Регистратор КАК Регистратор,
	|	РасчетыСКлиентами.РасчетныйДокумент КАК ДокументВозникновенияДоходов,
	|	Продажи.Организация КАК Организация,
	|	Продажи.Патент КАК Патент,
	|	Продажи.ХозяйственнаяОперация,
	|	СРЕДНЕЕ(Продажи.СуммаНДС) КАК СуммаНДС,
	|	СРЕДНЕЕ(Продажи.СуммаНДСКомиссии) КАК СуммаНДСКомиссии,
	|	СРЕДНЕЕ(Продажи.СуммаВсего) КАК СуммаВсего,
	|	СРЕДНЕЕ(Продажи.СуммаВсего - Продажи.СуммаЕНВД - Продажи.СуммаПатент - Продажи.СуммаКомиссии) КАК СуммаУСН,
	|	СРЕДНЕЕ(Продажи.СуммаЕНВД) КАК СуммаЕНВД,
	|	СРЕДНЕЕ(Продажи.СуммаПатент) КАК СуммаПатент,
	|	СРЕДНЕЕ(Продажи.СуммаКомиссии) КАК СуммаКомиссии,
	|	СУММА(РасчетыСКлиентами.СуммаОплаты) КАК СуммаОплаты
	|ПОМЕСТИТЬ ТаблицаПродажИПлатежейКлиентам
	|ИЗ
	|	ВТПродажи КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоходыДляПроверкиНаСторно КАК РасчетыСКлиентами
	|		ПО Продажи.Регистратор = РасчетыСКлиентами.Регистратор
	|			И Продажи.Аналитика = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|			И НЕ Продажи.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			И НЕ Продажи.Регистратор ССЫЛКА Документ.ОтчетОРозничныхВозвратах
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Период,
	|	РасчетыСКлиентами.Регистратор,
	|	РасчетыСКлиентами.РасчетныйДокумент,
	|	Продажи.Организация,
	|	Продажи.Патент,
	|	Продажи.ХозяйственнаяОперация";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область СоединениеПлатежейСПродажами
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДоходыДляПроверкиНаСторно.Период,
	|	Продажи.Регистратор,
	|	ДоходыДляПроверкиНаСторно.Регистратор,
	|	ДоходыДляПроверкиНаСторно.Организация,
	|	ЕСТЬNULL(ТаблицаДействующихПатентов.Патент, НЕОПРЕДЕЛЕНО),
	|	Продажи.ХозяйственнаяОперация,
	|	СУММА(Продажи.СуммаВыручкиСНДСРегл - Продажи.СуммаВыручкиРегл) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА Продажи.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ИЛИ Продажи.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|			ТОГДА Продажи.СуммаВыручкиСНДСРегл - Продажи.СуммаВыручкиРегл
	|			ИНАЧЕ 0 КОНЕЦ) КАК СуммаНДСКомиссии,
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентамиПоПринципалу.ДолгРегл, Продажи.СуммаВыручкиСНДСРегл)) КАК СуммаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА ОрганизацииНаЕНВД.Организация ЕСТЬ NULL
	|				И Продажи.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
	|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоПринципалу.ДолгРегл, Продажи.СуммаВыручкиСНДСРегл)
	|			ИНАЧЕ 0 КОНЕЦ) - СУММА(ВЫБОР
	|			КОГДА НЕ РасчетыСКлиентамиПоПринципалу.ХозяйственнаяОперация ЕСТЬ NULL
	|			ТОГДА РасчетыСКлиентамиПоПринципалу.ДолгРегл - Продажи.СуммаВыручкиСНДСРегл
	|			КОГДА Продажи.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ИЛИ Продажи.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|			ТОГДА Продажи.СуммаВыручкиСНДСРегл
	|			ИНАЧЕ 0 КОНЕЦ) КАК СуммаУСН,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ОрганизацииНаЕНВД.Организация ЕСТЬ NULL
	|				И Продажи.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				И Продажи.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоПринципалу.ДолгРегл, Продажи.СуммаВыручкиСНДСРегл)
	|			ИНАЧЕ 0 КОНЕЦ) КАК СуммаЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА Продажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
	|				И Продажи.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				И Продажи.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоПринципалу.ДолгРегл, Продажи.СуммаВыручкиСНДСРегл)
	|			ИНАЧЕ 0 КОНЕЦ) КАК СуммаПатент,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ РасчетыСКлиентамиПоПринципалу.ХозяйственнаяОперация ЕСТЬ NULL
	|			ТОГДА РасчетыСКлиентамиПоПринципалу.ДолгРегл - Продажи.СуммаВыручкиСНДСРегл
	|			КОГДА Продажи.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ИЛИ Продажи.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|			ТОГДА Продажи.СуммаВыручкиСНДСРегл
	|			ИНАЧЕ 0 КОНЕЦ) КАК СуммаКомиссии,
	|	СРЕДНЕЕ(ДоходыДляПроверкиНаСторно.СуммаОплаты)
	|ИЗ
	|	ДоходыДляПроверкиНаСторно КАК ДоходыДляПроверкиНаСторно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Продажи
	|		ПО ДоходыДляПроверкиНаСторно.РасчетныйДокумент = Продажи.Регистратор
	|			И ДоходыДляПроверкиНаСторно.АналитикаУчетаПоПартнерам = Продажи.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДействующихПатентов КАК ТаблицаДействующихПатентов
	|		ПО Продажи.Подразделение = ТаблицаДействующихПатентов.Подразделение
	|		И Продажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
	|		И Продажи.Период >= ТаблицаДействующихПатентов.ДатаНачала
	|		И Продажи.Период <= ТаблицаДействующихПатентов.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизацииНаЕНВД КАК ОрганизацииНаЕНВД
	|		ПО ДоходыДляПроверкиНаСторно.Организация = ОрганизацииНаЕНВД.Организация
	|		И Продажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|		И Продажи.Период >= ОрганизацииНаЕНВД.ДатаНачала
	|		И Продажи.Период <= ОрганизацииНаЕНВД.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоПринципалу
	|		ПО РасчетыСКлиентамиПоПринципалу.ДокументРегистратор = Продажи.Регистратор
	|		И РасчетыСКлиентамиПоПринципалу.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоставкаПодПринципала)
	|		И РасчетыСКлиентамиПоПринципалу.Период = Продажи.Период
	|		И Продажи.Регистратор ССЫЛКА Документ.ОтчетКомитентуОЗакупках
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыДляПроверкиНаСторно.Период,
	|	Продажи.Регистратор,
	|	ДоходыДляПроверкиНаСторно.Регистратор,
	|	ДоходыДляПроверкиНаСторно.Организация,
	|	ЕСТЬNULL(ТаблицаДействующихПатентов.Патент, НЕОПРЕДЕЛЕНО),
	|	Продажи.ХозяйственнаяОперация
	|" + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументВозникновенияДоходов,
	|	Организация";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	Возврат СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

Функция ТекстЗапросаЭквайринговыеПлатежи()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ВидДвижения КАК ВидДвижения,
	|	СУММА(ДанныеРегистра.СуммаРегл) КАК СуммаРегл,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Договор КАК Договор
	|ПОМЕСТИТЬ ВТЭквайринговыеПлатежи
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВПути КАК ДанныеРегистра
	|
	|ГДЕ
	|	ДанныеРегистра.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)
	|	И ДанныеРегистра.Период МЕЖДУ &НачДата И &КонДата
	|	И ДанныеРегистра.Организация В (&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ВидДвижения,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ВидДвижения,
	|	Организация";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПродажИПлатежейОтБанка()
	
	ТекстыЗапроса = Новый Массив;
	
	#Область РозничныеПродажи
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РозничныеПродажи.Период КАК Период,
	|	РозничныеПродажи.Регистратор КАК Регистратор,
	|	РозничныеПродажи.Организация КАК Организация,
	|	РозничныеПродажи.Патент КАК Патент,
	|	РозничныеПродажи.СуммаНДС КАК СуммаНДС,
	|	РозничныеПродажи.СуммаНДСКомиссии КАК СуммаНДСКомиссии,
	|	РозничныеПродажи.СуммаВсего КАК СуммаВсего,
	|	РозничныеПродажи.СуммаВсего - РозничныеПродажи.СуммаЕНВД - РозничныеПродажи.СуммаПатент - РозничныеПродажи.СуммаКомиссии КАК СуммаУСН,
	|	РозничныеПродажи.СуммаЕНВД КАК СуммаЕНВД,
	|	РозничныеПродажи.СуммаПатент КАК СуммаПатент,
	|	РозничныеПродажи.СуммаКомиссии КАК СуммаКомиссии,
	|	ПродажиВСчетПлатежейОтБанка.Контрагент КАК Контрагент,
	|	ПродажиВСчетПлатежейОтБанка.Договор КАК Договор,
	|	ПродажиВСчетПлатежейОтБанка.СуммаРегл КАК СуммаОплатыПлатежнымиКартами,
	|	РозничныеПродажи.ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТаблицаПродажИПлатежейОтБанка
	|ИЗ
	|	ВТПродажи КАК РозничныеПродажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭквайринговыеПлатежи КАК ПродажиВСчетПлатежейОтБанка
	|		ПО РозничныеПродажи.Организация = ПродажиВСчетПлатежейОтБанка.Организация
	|			И РозничныеПродажи.Регистратор = ПродажиВСчетПлатежейОтБанка.Регистратор
	|			И ПродажиВСчетПлатежейОтБанка.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ПродажиВСчетПлатежейОтБанка.Период >= &НачДатаАнализаОРП
	|
	|ГДЕ
	|	РозничныеПродажи.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РозничныеПродажиПоЧекамККМ
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РозничныеПродажи.Период КАК Период,
	|	РозничныеПродажи.Регистратор КАК Регистратор,
	|	РозничныеПродажи.Организация КАК Организация,
	|	РозничныеПродажи.Патент КАК Патент,
	|	РозничныеПродажи.СуммаНДС КАК СуммаНДС,
	|	РозничныеПродажи.СуммаНДСКомиссии КАК СуммаНДСКомиссии,
	|	РозничныеПродажи.СуммаВсего КАК СуммаВсего,
	|	РозничныеПродажи.СуммаВсего - РозничныеПродажи.СуммаЕНВД - РозничныеПродажи.СуммаПатент - РозничныеПродажи.СуммаКомиссии КАК СуммаУСН,
	|	РозничныеПродажи.СуммаЕНВД КАК СуммаЕНВД,
	|	РозничныеПродажи.СуммаПатент КАК СуммаПатент,
	|	РозничныеПродажи.СуммаКомиссии КАК СуммаКомиссии,
	|	ПродажиВСчетПлатежейОтБанка.Контрагент КАК Контрагент,
	|	ПродажиВСчетПлатежейОтБанка.Договор КАК Договор,
	|	СУММА(ПродажиВСчетПлатежейОтБанка.СуммаРегл) КАК СуммаОплатыПлатежнымиКартами,
	|	РозничныеПродажи.ХозяйственнаяОперация
	|ИЗ
	|	ВТПродажи КАК РозничныеПродажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО РозничныеПродажи.Регистратор = ОтчетОРозничныхПродажах.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО ОтчетОРозничныхПродажах.КассоваяСмена = ЧекККМ.КассоваяСмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭквайринговыеПлатежи КАК ПродажиВСчетПлатежейОтБанка
	|		ПО РозничныеПродажи.Организация = ПродажиВСчетПлатежейОтБанка.Организация
	|			И ЧекККМ.Ссылка = ПродажиВСчетПлатежейОтБанка.Регистратор
	|			И ПродажиВСчетПлатежейОтБанка.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ПродажиВСчетПлатежейОтБанка.Период >= &НачДатаАнализаОРП
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничныеПродажи.Период,
	|	РозничныеПродажи.Регистратор,
	|	РозничныеПродажи.Организация,
	|	РозничныеПродажи.Патент,
	|	РозничныеПродажи.СуммаНДС,
	|	РозничныеПродажи.СуммаНДСКомиссии,
	|	РозничныеПродажи.СуммаВсего,
	|	РозничныеПродажи.СуммаЕНВД,
	|	РозничныеПродажи.СуммаПатент,
	|	РозничныеПродажи.СуммаКомиссии,
	|	ПродажиВСчетПлатежейОтБанка.Контрагент,
	|	ПродажиВСчетПлатежейОтБанка.Договор,
	|	РозничныеПродажи.ХозяйственнаяОперация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ОптовыеПродажи
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(ПродажиВСчетПлатежейОтБанка.Период),
	|	ОптовыеПродажи.Регистратор,
	|	ОптовыеПродажи.Организация,
	|	ОптовыеПродажи.Патент,
	|	ОптовыеПродажи.СуммаНДС,
	|	ОптовыеПродажи.СуммаНДСКомиссии,
	|	ОптовыеПродажи.СуммаВсего,
	|	ОптовыеПродажи.СуммаУСН,
	|	ОптовыеПродажи.СуммаЕНВД,
	|	ОптовыеПродажи.СуммаПатент,
	|	ОптовыеПродажи.СуммаКомиссии,
	|	ПродажиВСчетПлатежейОтБанка.Контрагент,
	|	ПродажиВСчетПлатежейОтБанка.Договор,
	|	СУММА(ПродажиВСчетПлатежейОтБанка.СуммаРегл),
	|	ОптовыеПродажи.ХозяйственнаяОперация
	|ИЗ
	|	ТаблицаПродажИПлатежейКлиентам КАК ОптовыеПродажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭквайринговыеПлатежи КАК ПродажиВСчетПлатежейОтБанка
	|		ПО ОптовыеПродажи.Организация = ПродажиВСчетПлатежейОтБанка.Организация
	|			И ОптовыеПродажи.ДокументВозникновенияДоходов = ПродажиВСчетПлатежейОтБанка.Регистратор
	|			И ПродажиВСчетПлатежейОтБанка.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ОптовыеПродажи.ДокументВозникновенияДоходов ССЫЛКА Документ.ОперацияПоПлатежнойКарте
	|
	|СГРУППИРОВАТЬ ПО
	|	ОптовыеПродажи.Регистратор,
	|	ОптовыеПродажи.Организация,
	|	ОптовыеПродажи.Патент,
	|	ОптовыеПродажи.СуммаНДС,
	|	ОптовыеПродажи.СуммаНДСКомиссии,
	|	ОптовыеПродажи.СуммаВсего,
	|	ОптовыеПродажи.СуммаУСН,
	|	ОптовыеПродажи.СуммаЕНВД,
	|	ОптовыеПродажи.СуммаПатент,
	|	ОптовыеПродажи.СуммаКомиссии,
	|	ПродажиВСчетПлатежейОтБанка.Контрагент,
	|	ПродажиВСчетПлатежейОтБанка.Договор,
	|	ОптовыеПродажи.ХозяйственнаяОперация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	Возврат СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

Функция ТекстЗапросаРегистраторовДоходов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПродажиИПлатежиКлиентам.Период КАК Период,
	|	ПродажиИПлатежиКлиентам.Регистратор КАК Регистратор,
	|	ПродажиИПлатежиКлиентам.ДокументВозникновенияДоходов КАК ДокументВозникновенияДоходов,
	|	ПродажиИПлатежиКлиентам.Организация КАК Организация,
	|	ПродажиИПлатежиКлиентам.Патент КАК Патент,
	|	(ПродажиИПлатежиКлиентам.СуммаНДС) КАК СуммаНДС,
	|	(ПродажиИПлатежиКлиентам.СуммаНДСКомиссии) КАК СуммаНДСКомиссии,
	|	(ПродажиИПлатежиКлиентам.СуммаВсего) КАК СуммаВсего,
	|	(ПродажиИПлатежиКлиентам.СуммаУСН) КАК СуммаУСН,
	|	(ПродажиИПлатежиКлиентам.СуммаЕНВД) КАК СуммаЕНВД,
	|	(ПродажиИПлатежиКлиентам.СуммаПатент) КАК СуммаПатент,
	|	(ПродажиИПлатежиКлиентам.СуммаКомиссии) КАК СуммаКомиссии,
	|	(ПродажиИПлатежиКлиентам.СуммаОплаты) КАК СуммаОплаты,
	|	(ПродажиИПлатежиКлиентам.СуммаОплаты) КАК СуммаПлатежа,
	|	ПродажиИПлатежиКлиентам.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыЭквайринга.ПустаяСсылка) КАК ДоговорЭквайринга
	|ПОМЕСТИТЬ ТаблицаРегистраторовДоходов
	|ИЗ
	|	ТаблицаПродажИПлатежейКлиентам КАК ПродажиИПлатежиКлиентам
	|ГДЕ
	|	НЕ ПродажиИПлатежиКлиентам.ДокументВозникновенияДоходов ССЫЛКА Документ.ОперацияПоПлатежнойКарте
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежиОтБанка.Период КАК Период,
	|	ПродажиИПлатежиОтБанка.Регистратор КАК Регистратор,
	|	ПлатежиОтБанка.Регистратор КАК ДокументВозникновенияДоходов,
	|	ПродажиИПлатежиОтБанка.Организация КАК Организация,
	|	ПродажиИПлатежиОтБанка.Патент КАК Патент,
	|	ПродажиИПлатежиОтБанка.СуммаНДС КАК СуммаНДС,
	|	ПродажиИПлатежиОтБанка.СуммаНДСКомиссии КАК СуммаНДСКомиссии,
	|	ПродажиИПлатежиОтБанка.СуммаВсего КАК СуммаВсего,
	|	ПродажиИПлатежиОтБанка.СуммаУСН КАК СуммаУСН,
	|	ПродажиИПлатежиОтБанка.СуммаЕНВД КАК СуммаЕНВД,
	|	ПродажиИПлатежиОтБанка.СуммаПатент КАК СуммаПатент,
	|	ПродажиИПлатежиОтБанка.СуммаКомиссии КАК СуммаКомиссии,
	|	ПродажиИПлатежиОтБанка.СуммаОплатыПлатежнымиКартами КАК СуммаОплаты,
	|	ПлатежиОтБанка.СуммаРегл КАК СуммаПлатежа,
	|	ПродажиИПлатежиОтБанка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПродажиИПлатежиОтБанка.Договор КАК ДоговорЭквайринга
	|ИЗ
	|	ТаблицаПродажИПлатежейОтБанка КАК ПродажиИПлатежиОтБанка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭквайринговыеПлатежи КАК ПлатежиОтБанка
	|		ПО ПлатежиОтБанка.Организация = ПродажиИПлатежиОтБанка.Организация
	|			И ПлатежиОтБанка.Контрагент = ПродажиИПлатежиОтБанка.Контрагент
	|			И ПлатежиОтБанка.Договор = ПродажиИПлатежиОтБанка.Договор
	|			И ПлатежиОтБанка.Период > ПродажиИПлатежиОтБанка.Период
	|			И ПлатежиОтБанка.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ ПлатежиОтБанка.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияДоходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчетнаяПолитика()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК НачалоМесяца
	|ПОМЕСТИТЬ ВТ_ДатыКалендаря
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачДата И &КонДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиУчетаНДСПриУСН.Период) КАК Период,
	|	НастройкиУчетаНДСПриУСН.Организация КАК Организация,
	|	ВТ_ДатыКалендаря.НачалоМесяца КАК НачалоМесяца
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДСПриУСН КАК НастройкиУчетаНДСПриУСН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыКалендаря КАК ВТ_ДатыКалендаря
	|		ПО НастройкиУчетаНДСПриУСН.Период <= ВТ_ДатыКалендаря.НачалоМесяца
	|ГДЕ
	|	НастройкиУчетаНДСПриУСН.Организация В (&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДатыКалендаря.НачалоМесяца,
	|	НастройкиУчетаНДСПриУСН.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период";
	
	Возврат ТекстЗапроса;

КонецФункции
#КонецОбласти

Функция ПараметрыСодержанияДохода()
	
	ПараметрыПервичногоДокумента = Новый Структура;
	ПараметрыПервичногоДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	ПараметрыПервичногоДокумента.Вставить("ИнформацияОПлатеже", "");
	ПараметрыПервичногоДокумента.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ПараметрыПервичногоДокумента.Вставить("ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.ПустаяСсылка());
	ПараметрыПервичногоДокумента.Вставить("Магазин", Справочники.Склады.ПустаяСсылка());
	Возврат ПараметрыПервичногоДокумента;
	
КонецФункции

Функция СодержаниеДохода(ПараметрыСодержанияДохода)
	
	Содержание = Строка(ПараметрыСодержанияДохода.ХозяйственнаяОперация);
	
	НаименованиеКонтрагента = ?(ЗначениеЗаполнено(ПараметрыСодержанияДохода.Контрагент), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСодержанияДохода.Контрагент, "НаименованиеПолное"), "");
	
	МассивОперацийСКлиентом = Новый Массив;
	МассивОперацийСКлиентом.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОперацийСКлиентом.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивОперацийСКлиентом.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	
	Если ЗначениеЗаполнено(НаименованиеКонтрагента) И МассивОперацийСКлиентом.Найти(ПараметрыСодержанияДохода.ХозяйственнаяОперация) <> Неопределено Тогда
		Если ПараметрыСодержанияДохода.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
			Содержание = НСтр("ru = 'Поступление безналичной оплаты от ""%1""';
								|en = 'Electronic payment receipt from ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли ПараметрыСодержанияДохода.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
			Содержание = НСтр("ru = 'Поступление оплаты наличными от ""%1""';
								|en = 'Receipt of cash payment from ""%1"" '", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			Содержание = Содержание + " " + """%1""";
		КонецЕсли;
		Содержание = СтрШаблон(Содержание, НаименованиеКонтрагента);
	КонецЕсли;
	
	МассивОперацийВозвратаСКлиентом = Новый Массив;
	МассивОперацийВозвратаСКлиентом.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОперацийВозвратаСКлиентом.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	Если ЗначениеЗаполнено(НаименованиеКонтрагента) И МассивОперацийВозвратаСКлиентом.Найти(ПараметрыСодержанияДохода.ХозяйственнаяОперация) <> Неопределено Тогда
		Если ПараметрыСодержанияДохода.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
			Содержание = НСтр("ru = 'Возврат безналичной оплаты клиенту ""%1""';
								|en = 'Refund to the ""%1"" customer'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли ПараметрыСодержанияДохода.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
			Содержание = НСтр("ru = 'Возврат оплаты наличными клиенту ""%1""';
								|en = 'Refund in cash to the ""%1"" customer'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			Содержание = Содержание + " " + """%1""";
		КонецЕсли;
		Содержание = СтрШаблон(Содержание, НаименованиеКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		Содержание = Содержание + ".";
	КонецЕсли;
	
	ИнформацияОПлатеже = ПараметрыСодержанияДохода.ИнформацияОПлатеже;
	Если ПараметрыСодержанияДохода.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера Тогда
		ИнформацияОПлатеже = НСтр("ru = 'Отражение дохода при удержании комиссионного вознаграждения.';
									|en = 'Record income if commission is kept.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	Если ПараметрыСодержанияДохода.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоЗаймамВыданным Тогда
		ИнформацияОПлатеже = НСтр("ru = 'Начисление процентов по займу.';
									|en = 'Accrual of loan interest'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСодержанияДохода.Магазин) Тогда
		ИнформацияОПлатеже = СтрШаблон(НСтр("ru = 'Магазин: ""%1"".';
											|en = 'Store: ""%1"".'", ОбщегоНазначения.КодОсновногоЯзыка()), ПараметрыСодержанияДохода.Магазин);
	КонецЕсли;
	Если ПараметрыСодержанияДохода.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КомиссияПоЭквайрингу 
	     ИЛИ ПараметрыСодержанияДохода.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга Тогда
		ИнформацияОПлатеже = СтрШаблон(НСтр("ru = 'Начислена комиссия банком ""%1""';
											|en = 'Fee is accrued by the ""%1"" bank'", ОбщегоНазначения.КодОсновногоЯзыка()), ПараметрыСодержанияДохода.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОПлатеже) Тогда
		Содержание = Содержание + Символы.ПС + ИнформацияОПлатеже;
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

#КонецОбласти

#Область ПризнаниеРасходов

#Область ЗаполнениеРегистровПоДаннымВыборки

Процедура ЗаполнитьРегистрыРасходовУСН(ИсходныеДанные, КоэффициентОтнесенияРасходовКПрочейДеятельности, Движения, КоличествоОбработанныхДанных = 0)
	
	Результат = ВыборкаДокументовДляЗаполненияРасходов(ИсходныеДанные);
	ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаОстатков = ВыборкаТаблицыОстатков(ИсходныеДанные);
	ВыборкаСуммыОплатПоДокументам = ВыборкаСуммОплат(ИсходныеДанные);
	ДокументыОплатПоЕНП = ВыборкаСуммОплатЕНП(ИсходныеДанные).Выгрузить();
	НаборЗаписейКУДиР = Движения.КнигаУчетаДоходовИРасходов;
		
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ЕНП = ЛОЖЬ;
		
		Если ВыборкаДокументов.СуммаОплаты > 0 Тогда
			// Это документ оплаты, найдем общую сумму оплаты по этому документу...
			СтруктураПоиска = Новый Структура("ДокументОплаты", ВыборкаДокументов.Регистратор);
			Если ВыборкаСуммыОплатПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
				СуммаОплатыПоДокументу = ВыборкаСуммыОплатПоДокументам.Сумма;
				ЕНП = ВыборкаСуммыОплатПоДокументам.ЕНП;
			Иначе
				ВыборкаСуммыОплатПоДокументам.Сбросить();
				Если ВыборкаСуммыОплатПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
				     СуммаОплатыПоДокументу = ВыборкаСуммыОплатПоДокументам.Сумма;  
				     ЕНП = ВыборкаСуммыОплатПоДокументам.ЕНП;   
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДвиженияДокумента = Новый Структура;
		СуммаПоПлатежу = СуммаОплатыПоДокументу;
		ДокументВозникновенияРасхода = Неопределено;
		
		Выборка = ВыборкаДокументов.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОперацииВозникновенияРасходов = СтрРазделить("Приход,ДопРасходы,РасходПриОплате,Амортизация,Таможня,СторноВНО", ",");
			МассивРезультатов = Новый Массив;
			
			ДанныеДляОбработки = ИнициализироватьДанныеДляОбработки(Выборка);
			
			ДанныеДляОбработки.Вставить("КоэффициентЕНВД", 0);
			Если КоэффициентОтнесенияРасходовКПрочейДеятельности <> Неопределено И Выборка.ПризнаватьРасходамиПриУСН Тогда
				ДанныеДляОбработки.КоэффициентЕНВД = ?(Выборка.ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения, 1, 0);
				Если Выборка.ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
					ДанныеДляОбработки.КоэффициентЕНВД = КоэффициентОтнесенияРасходовКПрочейДеятельности;
				КонецЕсли;
			КонецЕсли;
			
			#Область ОплатаРасходов
			
			Если Выборка.ВидОперации = "Аванс" ИЛИ Выборка.ВидОперации = "Оплата" ИЛИ Выборка.ВидОперации = "АвансБезРазбивкиПоДокументам"
				ИЛИ Выборка.ВидОперации = "ОплатаБезРазбивкиПоДокументам" Тогда
				
				Если ЕНП Тогда 
					СтруктураПоиска = Новый Структура("ДокументОплаты, СтатьяРасходов", Выборка.Регистратор,Выборка.СтатьяРасходов);
					СтрокиОплатыПоВидуНалога = ДокументыОплатПоЕНП.НайтиСтроки(СтруктураПоиска);  
					Если СтрокиОплатыПоВидуНалога.Количество() > 0 Тогда
						СуммаОплатыПоДокументу = СтрокиОплатыПоВидуНалога[0].Сумма;
					Иначе СуммаОплатыПоДокументу = 0;
					КонецЕсли;
				Иначе
					Если ДокументВозникновенияРасхода <> Выборка.ДокументВозникновенияРасходов Тогда
						ДокументВозникновенияРасхода = Выборка.ДокументВозникновенияРасходов;
						СуммаОплатыПоДокументу = Мин(СуммаПоПлатежу,Выборка.СуммаОплаты);
					КонецЕсли;	
				КонецЕсли;
				
				Если СуммаОплатыПоДокументу = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеДляОбработки.Вставить("СуммаОплатыПоДокументу", СуммаОплатыПоДокументу);
				ДанныеДляОбработки.Вставить("СуммаПоПлатежу", СуммаПоПлатежу);
				МассивРезультатов = РезультатОплатыРасходов(ДанныеДляОбработки, ТаблицаОстатков);
				СуммаОплатыПоДокументу = ДанныеДляОбработки.СуммаОплатыПоДокументу;
				СуммаПоПлатежу = ДанныеДляОбработки.СуммаПоПлатежу;
				
				Если ЕНП Тогда
					СтрокиОплатыПоВидуНалога[0].Сумма = ДанныеДляОбработки.СуммаОплатыПоДокументу;
				КонецЕсли;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ВозникновениеРасходов
			
			Если ОперацииВозникновенияРасходов.Найти(Выборка.ВидОперации) <> Неопределено И Не Выборка.Сторно
				ИЛИ Выборка.ВидОперации = "ВозвратПоставщику" И Выборка.Сторно Тогда
				
				МассивРезультатов = РезультатВозникновенияРасходов(ДанныеДляОбработки, ТаблицаОстатков);
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ВозвратСписанияРасходов
			
			Если Выборка.ВидОперации = "ВозвратКлиента" И Не Выборка.Сторно ИЛИ Выборка.Сторно И Выборка.ВидОперации = "Списание" Тогда
				
				СоздаватьНовуюСтрокуОстатка = Истина;
				СтруктураПоискаОстатка = Неопределено;
				ОбновитьСтруктуруПоиска(СтруктураПоискаОстатка, ДанныеДляОбработки);
				СтрокиОстатка = СтрокиОстаткаПоСтруктуреПоиска(ТаблицаОстатков, СтруктураПоискаОстатка, СоздаватьНовуюСтрокуОстатка);
				
				Если СтрокиОстатка.Количество() = 0 Тогда
					Информация = 
						НСтр("ru = 'При записи информации о возврате клиенту, не были найдены исходные расходы по документу возникновения расходов.';
							|en = 'When recording customer return information, no original expenses were found for the expense occurrence document.'",
						ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
					ЗаписатьИнформациюОбОшибке(Информация, ДанныеДляОбработки.ВидРасходов, ДанныеДляОбработки.Регистратор);
					Продолжить;
				КонецЕсли;
				
				СтрокаОстатка = СтрокиОстатка.Получить(0);
				
				Если СтрокаОстатка.РасходыВсего = СтрокаОстатка.СуммаРасходов И СтрокаОстатка.ТипОстатка = "Возврат" Тогда
					// Данные по расходу уже были списаны со служебного регистра. Необходимо вернуть данные по расходу обратно.
					ИмяРегистра = ИмяРегистраПоВидуРасходов(СтрокаОстатка.ВидРасходов);
					НаборЗаписейРасходов = Движения[ИмяРегистра];
					ЗаписьРасхода = НаборЗаписейРасходов.ДобавитьРасход();
					ЗаписьРасхода.Период = НачалоМесяца(Выборка.Период);
					ЗаполнитьЗначенияСвойств(ЗаписьРасхода, СтрокаОстатка);
					ЗаписьРасхода.СуммаРасходов = - СтрокаОстатка.СуммаРасходов;
					ЗаписьРасхода.СуммаОплаты = - СтрокаОстатка.СуммаОплаты;
					Если ИмяРегистра = "РасходыПриУСНТовары" Или ИмяРегистра = "РасходыПриУСНМатериалы" Тогда
						ЗаписьРасхода.СуммаОтгрузки = - СтрокаОстатка.СуммаОтгрузки;
					КонецЕсли;
					ЗаписьРасхода.НДС = - СтрокаОстатка.НДС;
					ЗаписьРасхода.Признано = - СтрокаОстатка.Признано;
					ЗаписьРасхода.НеПризнано = - СтрокаОстатка.НеПризнано;
					ЗаписьРасхода.Регистратор = НаборЗаписейКУДиР.Отбор.Регистратор.Значение;
					ЗаписьРасхода.Организация = Выборка.Организация;
				КонецЕсли;
				
				МассивРезультатов = РезультатВозвратаСписанияРасходов(ДанныеДляОбработки, СтрокаОстатка);
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ВозвратРасходов
			
			Если Выборка.ВидОперации = "ВозвратПоставщику" И Не Выборка.Сторно
				ИЛИ ОперацииВозникновенияРасходов.Найти(Выборка.ВидОперации) <> Неопределено И Выборка.Сторно Тогда
				
				МассивРезультатов = РезультатВозвратаРасходов(ДанныеДляОбработки, ТаблицаОстатков);
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область СписаниеРасходов
			
			Если Выборка.ВидОперации = "ВозвратКлиента" И Выборка.Сторно ИЛИ НЕ Выборка.Сторно И Выборка.ВидОперации = "Списание" Тогда
				
				МассивРезультатов = РезультатСписанияРасходов(ДанныеДляОбработки, ТаблицаОстатков);
				
			КонецЕсли;
			
			#КонецОбласти
			
			КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + 1;
			
			Для каждого ЗаписьРасхода Из МассивРезультатов Цикл
				
				// Добавляем запись в регистр
				НаборЗаписей = НаборЗаписейРегистраПоВидуРасходов(ДвиженияДокумента, ЗаписьРасхода);
				Если НаборЗаписей = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьРасхода);
				
				Если ЗаписьРасхода.РасходыВсего <> 0 Или ЗаписьРасхода.РасходыУСН <> 0 Или ЗаписьРасхода.РасходыЕНВД <> 0 Тогда
					ЗаписьКУДиР = НаборЗаписейКУДиР.Добавить();
					ЗаписьКУДиР.Регистратор = НаборЗаписейКУДиР.Отбор.Регистратор.Значение;
					ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(Выборка.Регистратор, Выборка);
					ЗаполнитьЗаписьКУДиР(ЗаписьКУДиР, ЗаписьРасхода, Выборка.ПризнаватьНДС);
				КонецЕсли;
				
				Если Выборка.Сторно И ЗаписьРасхода.РасходыУСН <= 0 И ЗаписьКУДиР <> Неопределено Тогда
					ЗаписьКУДиР.Содержание = ЗаписьКУДиР.Содержание + " " + НСтр("ru = 'Причина непризнания: ввод документа сторно.';
																				|en = 'Reason for non-recognition: entry of storno document.'", ОбщегоНазначения.КодОсновногоЯзыка());
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого ВидРегистра Из ДвиженияДокумента Цикл
			Если ВидРегистра.Значение.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ВидРегистра.Значение.Записать(Ложь);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаОстатка Из ТаблицаОстатков Цикл
		
		ИмяРегистра = ИмяРегистраПоВидуРасходов(СтрокаОстатка.ВидРасходов);
		Если ИмяРегистра <> "РасходыПриУСНОСиНМА" И СтрокаОстатка.СуммаРасходов = СтрокаОстатка.СуммаОплаты И СтрокаОстатка.СуммаРасходов <> 0
			И ?(ИмяРегистра = "РасходыПриУСН", Истина, СтрокаОстатка.СуммаРасходов = СтрокаОстатка.СуммаОтгрузки) Тогда
			НаборЗаписейРасходов = Движения[ИмяРегистра];
			ЗаписьРасхода = НаборЗаписейРасходов.ДобавитьРасход();
			ЗаписьРасхода.Период = НаборЗаписейКУДиР.Отбор.Регистратор.Значение.Дата;
			ЗаполнитьЗначенияСвойств(ЗаписьРасхода, СтрокаОстатка);
			ЗаписьРасхода.Регистратор = НаборЗаписейКУДиР.Отбор.Регистратор.Значение;
			ЗаписьРасхода.Организация = НаборЗаписейКУДиР.Отбор.Регистратор.Значение.Организация;
			Если СтрокаОстатка.ТипОстатка = "Возврат" И СтрокаОстатка.СуммаРасходов < 0 И СтрокаОстатка.ВидРасходов = Перечисления.ВидыРасходовУСН.Услуги Тогда
				// Это возврат данных на служебный регистр, отразим его на начало месяца:
				ЗаписьРасхода.Период = НачалоМесяца(ЗаписьРасхода.Период);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатОплатыРасходов(Данные, ТаблицаОстатков, СтруктураПоискаОстатка = Неопределено)
	
	ОплатаВнеЗависимостиОтРасходов = Данные.ВидРасходов = Перечисления.ВидыРасходовУСН.Лизинг
		ИЛИ Данные.ВидРасходов = Перечисления.ВидыРасходовУСН.Кредиты;
	
	СоздаватьНовуюСтрокуОстатка = СтруктураПоискаОстатка = Неопределено И ОплатаВнеЗависимостиОтРасходов;
	ОбновитьСтруктуруПоиска(СтруктураПоискаОстатка, Данные);
	СтрокиОстатка = СтрокиОстаткаПоСтруктуреПоиска(ТаблицаОстатков, СтруктураПоискаОстатка, СоздаватьНовуюСтрокуОстатка);
	
	МассивРезультатов = Новый Массив;
	
	Для каждого СтрокаОстатка Из СтрокиОстатка Цикл
		
		Результат = ИнициализироватьДанныеРезультата(Данные);
		
		ЗаполнитьЗначенияСвойств(Результат, СтрокаОстатка, "ВидРасходов,ЭлементРасходов,СтатьяРасходов");
		Данные.СтатьяРасходов = СтрокаОстатка.СтатьяРасходов;
		Результат.Содержание = СодержаниеРасхода(Данные, СтрокаОстатка.ВидРасходов);
		Если Данные.Период < СтрокаОстатка.ДатаВозникновенияРасходов Тогда
			// Это авансовый платеж, запишем его текущим периодом возникновения расходов:
			Результат.Период = СтрокаОстатка.ДатаВозникновенияРасходов;
		КонецЕсли;
		
		ОсталосьОплатитьПоТекущейВыборке = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.СуммаОплаты;
		СуммаОплаты = Мин(Данные.СуммаОплаты, Данные.СуммаОплатыПоДокументу);
		
		Если (ОсталосьОплатитьПоТекущейВыборке > 0 ИЛИ ОплатаВнеЗависимостиОтРасходов) И СуммаОплаты > 0 Тогда
			
			Результат.СуммаОплаты = ?(ОплатаВнеЗависимостиОтРасходов, СуммаОплаты, Мин(СуммаОплаты, ОсталосьОплатитьПоТекущейВыборке));
			
			Результат.ЭлементРасходов = СтрокаОстатка.ЭлементРасходов;
			Результат.ВидРасходов = СтрокаОстатка.ВидРасходов;
			
			Данные.СуммаОплатыПоДокументу = Данные.СуммаОплатыПоДокументу - Результат.СуммаОплаты;
			Данные.СуммаОплаты = Данные.СуммаОплаты - Результат.СуммаОплаты;
			Данные.СуммаПоПлатежу = Данные.СуммаПоПлатежу - Результат.СуммаОплаты;
			
			ВсегоКПризнанию = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.РасходыВсего;
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовТовары().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено Тогда
				ОтгруженоНоНеПризнано = СтрокаОстатка.СуммаОтгрузки - СтрокаОстатка.РасходыВсего;
				ВсегоКПризнанию = ?(ОтгруженоНоНеПризнано > 0, ОтгруженоНоНеПризнано, 0);
			КонецЕсли;
			
			Если Не Перечисления.ВидыРасходовУСН.ПризнаетсяКакОСНМА(СтрокаОстатка.ВидРасходов)
				И Данные.Период >= СтрокаОстатка.ДатаВозникновенияРасходов Тогда
				
				ПризнаваемаяСумма = Мин(Результат.СуммаОплаты, ВсегоКПризнанию);
				Результат.НеПризнано = ?(Не Данные.ПризнаватьРасходамиПриУСН, ПризнаваемаяСумма, 0);
				Результат.РасходыУСН = ПризнаваемаяСумма - Результат.НеПризнано;
				
				ДозаполнитьСуммыПризнания(Результат, СтрокаОстатка);
				
			КонецЕсли;
			
			Если Перечисления.ВидыРасходовУСН.ПризнаетсяКакОСНМА(СтрокаОстатка.ВидРасходов) Тогда
				
				Результат.ДатаОплаты = Данные.Период;
				
			КонецЕсли;
			
			СтрокаОстатка.СуммаОплаты =  СтрокаОстатка.СуммаОплаты + Результат.СуммаОплаты;
			
			ОбработатьРезультатВСлучаеСтарогоМетода(Результат, СтрокаОстатка.ТипОстатка);
			
			МассивРезультатов.Добавить(Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Данные.СуммаОплатыПоДокументу > 0 И Данные.СуммаОплаты > 0 И СтруктураПоискаОстатка.Количество() Тогда
		
		МассивРезультатовРеклассификации = РезультатОплатыРасходов(Данные, ТаблицаОстатков, СтруктураПоискаОстатка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРезультатов, МассивРезультатовРеклассификации);
		
	КонецЕсли;
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция РезультатВозникновенияРасходов(Данные, ТаблицаОстатков, СтруктураПоискаОстатка = Неопределено)
	
	СоздаватьНовуюСтрокуОстатка = Истина;
	ОбновитьСтруктуруПоиска(СтруктураПоискаОстатка, Данные);
	СтрокиОстатка = СтрокиОстаткаПоСтруктуреПоиска(ТаблицаОстатков, СтруктураПоискаОстатка, СоздаватьНовуюСтрокуОстатка);
	
	Если СтрокиОстатка.Количество() = 0 Тогда
		Информация = 
			НСтр("ru = 'При записи информации о расходе, не были найдены исходные расходы по документу возникновения расходов.';
				|en = 'When recording expense information, no original expenses were found for the expense occurrence document.'",
			ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		ЗаписатьИнформациюОбОшибке(Информация, Данные.ВидРасходов, Данные.Регистратор);
		Возврат Новый Массив;
	КонецЕсли;
	
	СтрокаОстатка = СтрокиОстатка.Получить(0);
	
	Результат = ИнициализироватьДанныеРезультата(Данные);
	
	Разрядность = ?(ТипыНалоговНДФЛ().Найти(Данные.СтатьяРасходов) = Неопределено, 2, 0);
	Результат.СуммаРасходов = Окр(Данные.СуммаРасходов, Разрядность);
	Результат.НДС = Окр(Данные.НДС, Разрядность);
	Результат.СуммаОплаты = Данные.СуммаОплаты;
	СтрокаОстатка.СуммаОплаты = СтрокаОстатка.СуммаОплаты + Результат.СуммаОплаты;
	
	СуммаНеПризнания = ?(Не Данные.ПризнаватьРасходамиПриУСН, Результат.СуммаРасходов, 0);
	СуммаНеПризнанияЕНВД = Окр(Результат.СуммаРасходов * Данные.КоэффициентЕНВД, 2);
	СуммаПризнания = 0;
	ВсегоКПризнанию = СтрокаОстатка.СуммаОплаты;
	Если Перечисления.ВидыРасходовУСН.ПризнаетсяКакТовар(СтрокаОстатка.ВидРасходов) Тогда
		ОтгруженоНоНеПризнано = СтрокаОстатка.СуммаОтгрузки - СтрокаОстатка.РасходыВсего;
		ВсегоКПризнанию = ?(ОтгруженоНоНеПризнано > 0, Мин(ОтгруженоНоНеПризнано, ВсегоКПризнанию), 0);
	КонецЕсли;
	ВсегоКПризнанию = ВсегоКПризнанию - СуммаНеПризнания - СуммаНеПризнанияЕНВД - СтрокаОстатка.РасходыВсего;
	Если ВсегоКПризнанию > 0 И НЕ Перечисления.ВидыРасходовУСН.ПризнаетсяКакОСНМА(СтрокаОстатка.ВидРасходов) Тогда
		СуммаПризнания = Мин(ВсегоКПризнанию, Результат.СуммаРасходов); // Сумма расходов может быть меньше остатка, так как там хранится общая сумма (без разбивки по хоз. операциям)
	КонецЕсли;
	
	Если СтрокаОстатка.СуммаОтгрузки > 0 И СуммаНеПризнанияЕНВД > 0 Тогда
		// Уже были продажи, уменьшим сумму не признания на них (они уже были либо признаны либо не признаны):
		СуммаНеПризнанияЕНВД = СуммаНеПризнанияЕНВД - СтрокаОстатка.СуммаОтгрузки;
	КонецЕсли;
	
	Результат.НеПризнано = СуммаНеПризнания + СуммаНеПризнанияЕНВД;
	Результат.РасходыУСН = СуммаПризнания;
	Результат.РасходыЕНВД = СуммаНеПризнанияЕНВД;
	
	Если Данные.ВидРасходов = Перечисления.ВидыРасходовУСН.Лизинг ИЛИ Данные.ВидРасходов = Перечисления.ВидыРасходовУСН.Кредиты Тогда
		СтрокаОстатка.СуммаРасходов = СтрокаОстатка.СуммаРасходов + Результат.СуммаРасходов;
		СтрокаОстатка.НДС = СтрокаОстатка.НДС + Результат.НДС;
	КонецЕсли;
		
	ДозаполнитьСуммыПризнания(Результат, СтрокаОстатка);
	
	Если Данные.ВидОперации = "СторноВНО" Тогда
		Результат.СуммаОплаты = СтрокаОстатка.СуммаОплаты;
		Результат.СуммаРасходов = 0;
		Результат.НДС = 0;
	КонецЕсли;
		
	ОбработатьРезультатВСлучаеСтарогоМетода(Результат, СтрокаОстатка.ТипОстатка);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
	
КонецФункции

Функция РезультатВозвратаСписанияРасходов(Данные, СтрокаОстатка)
	
	Результат = ИнициализироватьДанныеРезультата(Данные);
	Результат.СуммаОтгрузки = Данные.СуммаОтгрузки;
	
	// Вид расходов определяется на основании остатков, так как там содержится информация о первоначальной классификации расхода, а не фактической:
	Результат.ВидРасходов = СтрокаОстатка.ВидРасходов;
	
	Если Перечисления.ВидыРасходовУСН.ПризнаетсяКакТовар(Данные.ВидРасходов) Тогда
		
		Если СтрокаОстатка.Признано > 0 Тогда
			
			НеОплаченныеРасходы = СтрокаОстатка.СуммаОтгрузки - СтрокаОстатка.СуммаОплаты;
			НеОплаченныеРасходы = ?(НеОплаченныеРасходы > 0, НеОплаченныеРасходы, 0);
			
			Результат.РасходыВсего = Данные.СуммаОтгрузки + НеОплаченныеРасходы;
			Результат.РасходыВсего = ?(Результат.РасходыВсего < 0, Результат.РасходыВсего, 0);
			Результат.РасходыВсего = Макс(Результат.РасходыВсего, -СтрокаОстатка.Признано);
			Результат.РасходыЕНВД = Окр(Результат.РасходыВсего * Данные.КоэффициентЕНВД, 2);
			Результат.РасходыУСН = Результат.РасходыВсего - Результат.РасходыЕНВД;
			
			Результат.НеПризнано = Результат.РасходыЕНВД;
			
			ДозаполнитьСуммыПризнания(Результат, СтрокаОстатка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаОстатка.СуммаОтгрузки = СтрокаОстатка.СуммаОтгрузки + Результат.СуммаОтгрузки;
	
	ОбработатьРезультатВСлучаеСтарогоМетода(Результат, СтрокаОстатка.ТипОстатка);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
	
КонецФункции

Функция РезультатВозвратаРасходов(Данные, ТаблицаОстатков, СтруктураПоискаОстатка = Неопределено)
	
	СоздаватьНовуюСтрокуОстатка = (Данные.ВидРасходов = Перечисления.ВидыРасходовУСН.Услуги); // при возврате услуг (корректировка) возможна ситуация, когда остатков уже нет.
	ОбновитьСтруктуруПоиска(СтруктураПоискаОстатка, Данные);
	СтрокиОстатка = СтрокиОстаткаПоСтруктуреПоиска(ТаблицаОстатков, СтруктураПоискаОстатка, СоздаватьНовуюСтрокуОстатка);
	
	Если СтрокиОстатка.Количество() = 0 Тогда
		Информация = 
			НСтр("ru = 'При записи информации о возврате поставщику, не были найдены исходные расходы по документу возникновения расходов.';
				|en = 'When recording supplier return information, no original expenses were found for the expense occurrence document.'",
			ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
		ЗаписатьИнформациюОбОшибке(Информация, Данные.ВидРасходов, Данные.Регистратор);
		Возврат Новый Массив;
	КонецЕсли;
	
	СтрокаОстатка = СтрокиОстатка.Получить(0);
	
	Результат = ИнициализироватьДанныеРезультата(Данные);
	
	Результат.СуммаРасходов = Данные.СуммаРасходов;
	СуммаРасходовВозврата = -Данные.СуммаРасходов;
	ОсталосьОплатитьПоТекущейВыборке = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.СуммаОплаты;
	Если ОсталосьОплатитьПоТекущейВыборке < СуммаРасходовВозврата Тогда
		Результат.СуммаОплаты = ОсталосьОплатитьПоТекущейВыборке - СуммаРасходовВозврата;
	КонецЕсли;
	Результат.НДС = Данные.НДС;
	
	ВсегоКПризнанию = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.РасходыВсего;
	
	Если ВсегоКПризнанию < СуммаРасходовВозврата Тогда
		
		Результат.НеПризнано = -Мин(СтрокаОстатка.НеПризнано, СуммаРасходовВозврата - ВсегоКПризнанию);
		Результат.РасходыУСН = -Мин(СтрокаОстатка.Признано, СуммаРасходовВозврата - ВсегоКПризнанию + Результат.НеПризнано);
		Результат.РасходыЕНВД = Данные.КоэффициентЕНВД * Результат.НеПризнано;
		
		ДозаполнитьСуммыПризнания(Результат, СтрокаОстатка);
		
	КонецЕсли;
	
	СтрокаОстатка.СуммаРасходов = СтрокаОстатка.СуммаРасходов + Результат.СуммаРасходов;
	СтрокаОстатка.СуммаОплаты = СтрокаОстатка.СуммаОплаты + Результат.СуммаОплаты;
	СтрокаОстатка.НДС = СтрокаОстатка.НДС + Результат.НДС;
	
	Если Данные.ВидРасходов = Перечисления.ВидыРасходовУСН.Услуги И СтрокаОстатка.ТипОстатка = "Возврат" Тогда
		// Производится корректировка поступления расходов, полностью признанных и списанных в прошлом месяце.
		// Изменим все суммы остатков, чтобы в служебном регистре отразились изменения лишь на суммы возврата.
		ЗаполнитьЗначенияСвойств(СтрокаОстатка, Результат, "СуммаРасходов,СуммаОплаты,НДС,РасходыВсего,Признано,НеПризнано");
	КонецЕсли;
	
	Если Данные.ВидОперации = "СторноВНО" Тогда
		// Если это сторно ввода остатков, обнулим данные по сумме расходов, НДС и оплате, так как исходная операция уже минусует эти данные:
		Результат.СуммаРасходов = Результат.СуммаРасходов - Данные.СуммаРасходов;
		Результат.НДС = Результат.НДС - Данные.НДС;
		Результат.СуммаОплаты = Результат.СуммаОплаты - Данные.СуммаОплаты;
		Результат.СуммаОтгрузки = Результат.СуммаОтгрузки - Данные.СуммаОтгрузки;
	КонецЕсли;
	
	ОбработатьРезультатВСлучаеСтарогоМетода(Результат, СтрокаОстатка.ТипОстатка);
	
	МассивВозврата = Новый Массив;
	Если Результат.СуммаРасходов <> 0 ИЛИ Результат.СуммаОплаты <> 0 ИЛИ Результат.СуммаОтгрузки <> 0
		ИЛИ Результат.НеПризнано <> 0 ИЛИ Результат.РасходыУСН <> 0 ИЛИ Результат.РасходыЕНВД <> 0 Тогда
		МассивВозврата.Добавить(Результат);
	КонецЕсли;
	
	Если Данные.ВидОперации = "СторноВНО" И СтруктураПоискаОстатка.Свойство("СтатьяРасходов") Тогда
		// Если это сторно ввода остатков, он может заменять расход другой статьей, проверим это:
		СтруктураПоискаОстатка.Удалить("СтатьяРасходов");
		СтрокиОстатка = СтрокиОстаткаПоСтруктуреПоиска(ТаблицаОстатков, СтруктураПоискаОстатка, Ложь);
		Для каждого СтрокаОстатка Из СтрокиОстатка Цикл
			Если СтрокаОстатка.СтатьяРасходов = Результат.СтатьяРасходов Тогда
				// Этот остаток мы уже рассмотрели
				Продолжить;
			КонецЕсли;
			Если СтрокаОстатка.ДокументВозникновенияРасходов = Результат.ДокументВозникновенияРасходов
				И СтрокаОстатка.ВидРасходов = Результат.ВидРасходов Тогда
				// Это новый остаток, который является исправлением текущего документа ввода начальных остатков,
				// перенесем на него сумму оплаты и сумму отгрузки из сторнируемого документа:
				Если Результат.СуммаОплаты < 0 Тогда
					СтрокаОстатка.СуммаОплаты = Мин(СтрокаОстатка.СуммаРасходов, -Результат.СуммаОплаты);
				КонецЕсли;
				Если Результат.СуммаОтгрузки < 0 Тогда
					СтрокаОстатка.СуммаОтгрузки = Мин(СтрокаОстатка.СуммаРасходов, -Результат.СуммаОтгрузки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция РезультатСписанияРасходов(Данные, ТаблицаОстатков, СтруктураПоискаОстатка = Неопределено)
	
	СоздаватьНовуюСтрокуОстатка = СтруктураПоискаОстатка = Неопределено;
	ОбновитьСтруктуруПоиска(СтруктураПоискаОстатка, Данные);
	СтрокиОстатка = СтрокиОстаткаПоСтруктуреПоиска(ТаблицаОстатков, СтруктураПоискаОстатка, СоздаватьНовуюСтрокуОстатка);
	
	МассивРезультатов = Новый Массив;
	
	Для каждого СтрокаОстатка Из СтрокиОстатка Цикл
		
		ОсталосьОтгрузить = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.СуммаОтгрузки;
		ОсталосьОтгрузить = ?(ОсталосьОтгрузить > 0, ОсталосьОтгрузить, 0);
		СуммаОтгрузки = Мин(ОсталосьОтгрузить, Данные.СуммаОтгрузки);
		ВсегоКПризнанию = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.РасходыВсего;
		
		Если ОсталосьОтгрузить <= 0 И Не СоздаватьНовуюСтрокуОстатка Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ИнициализироватьДанныеРезультата(Данные);
		
		СуммаНеПризнания = ?(Не Данные.ПризнаватьРасходамиПриУСН, СуммаОтгрузки, 0);
		СуммаНеПризнанияЕНВД = Окр(СуммаОтгрузки * Данные.КоэффициентЕНВД, 2);
		СуммаПризнания = СуммаОтгрузки - СуммаНеПризнания - СуммаНеПризнанияЕНВД;
		
		РеклассификацияРасходов = Данные.ВидРасходов <> СтрокаОстатка.ВидРасходов ИЛИ Данные.ЭлементРасходов <> СтрокаОстатка.ЭлементРасходов;
		
		Если ОсталосьОтгрузить > 0 И Не РеклассификацияРасходов Тогда
			
			Результат.СуммаОтгрузки = СуммаОтгрузки;
			
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовТовары().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				// Товары:
				
				ОплаченоНоНеПризнано = ?(СтрокаОстатка.СуммаОплаты - СтрокаОстатка.СуммаОтгрузки > 0 И СтрокаОстатка.СуммаОплаты <> 0, СтрокаОстатка.СуммаОплаты - СтрокаОстатка.СуммаОтгрузки, 0);
				НеПодтвержденныйЕНВД = СтрокаОстатка.РасходыВсего - СтрокаОстатка.СуммаОтгрузки;
				
				СуммаПризнания = Мин(СуммаПризнания, ОплаченоНоНеПризнано);
				Если СтрокаОстатка.РасходыВсего - СтрокаОстатка.Признано > Мин(СтрокаОстатка.СуммаОплаты, СтрокаОстатка.СуммаОтгрузки)
					И СтрокаОстатка.РасходыВсего <> 0 И НеПодтвержденныйЕНВД > 0 Тогда
					СуммаНеПризнанияЕНВД = СуммаНеПризнанияЕНВД - Данные.СуммаОтгрузки;
				КонецЕсли;
				
			ИначеЕсли Перечисления.ВидыРасходовУСН.ВидыРасходовМатериалы().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				// Материалы:
				
				НеПодтвержденныеОтгрузки = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.СуммаОтгрузки;
				СписаноНеНаУСН = СтрокаОстатка.РасходыВсего - СтрокаОстатка.Признано;
				
				Если СписаноНеНаУСН > Мин(СтрокаОстатка.СуммаОплаты, СтрокаОстатка.СуммаОтгрузки) И НеПодтвержденныеОтгрузки > 0 Тогда
					СуммаНеПризнанияЕНВД = СуммаНеПризнанияЕНВД - Данные.СуммаОтгрузки;
				КонецЕсли;
				
				Если ВсегоКПризнанию < СуммаНеПризнания + СуммаНеПризнанияЕНВД И СуммаНеПризнания + СуммаНеПризнанияЕНВД > 0 Тогда
					СуммаПризнания = - СуммаНеПризнания - СуммаНеПризнанияЕНВД + ВсегоКПризнанию;
				ИначеЕсли ВсегоКПризнанию > 0 ИЛИ СписаноНеНаУСН > Мин(СтрокаОстатка.СуммаОплаты, СтрокаОстатка.СуммаОтгрузки) Тогда
					СуммаПризнания = Мин(СтрокаОстатка.СуммаОплаты - СтрокаОстатка.Признано, СуммаПризнания);
				Иначе
					СуммаПризнания = 0;
				КонецЕсли;
				
			Иначе
				
				СуммаНеПризнанияЕНВД = 0;
				СуммаНеПризнания = 0;
				СуммаПризнания = 0;
				
			КонецЕсли;
			
			Если СуммаНеПризнанияЕНВД <> 0 Или СуммаНеПризнания <> 0
				Или (СуммаПризнания <> 0 И Данные.Период >= СтрокаОстатка.ДатаВозникновенияРасходов) Тогда
				
				Результат.РасходыВсего = Мин(СуммаПризнания + СуммаНеПризнания + СуммаНеПризнанияЕНВД, ВсегоКПризнанию);
				Результат.РасходыУСН = СуммаПризнания;
				Результат.РасходыЕНВД = СуммаНеПризнанияЕНВД;
				Результат.НеПризнано = СуммаНеПризнания + СуммаНеПризнанияЕНВД;
				
				ДозаполнитьСуммыПризнания(Результат, СтрокаОстатка);
				
			КонецЕсли;
			СтрокаОстатка.СуммаОтгрузки = СтрокаОстатка.СуммаОтгрузки + СуммаОтгрузки;
			
		КонецЕсли;
		
		Если ОсталосьОтгрузить > 0 И РеклассификацияРасходов Тогда
			
			// Реклассификация расходов
			
			// Оплату переносим когда расходы признаются (а ранее были не признаны):
			ПереносимаяСуммаОплаты = 0;
			Если СуммаПризнания > 0 И ВсегоКПризнанию = 0 Тогда
				ПереносимаяСуммаОплаты = Мин(СтрокаОстатка.СуммаОплаты, СуммаОтгрузки);
			КонецЕсли;
			// Оплату переносим когда оплат больше не будет:
			ОсталосьОплатить = СтрокаОстатка.СуммаРасходов - СтрокаОстатка.СуммаОплаты;
			Если ОсталосьОплатить < СуммаОтгрузки Тогда
				ПереносимаяСуммаОплаты = СуммаОтгрузки - ОсталосьОплатить;
			КонецЕсли;
			
			// Для товаров, оплату переносим когда расходы признаются, но суммы по оплаченным расходам еще не признаны:
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовТовары().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено И ПереносимаяСуммаОплаты = 0 Тогда
				ПризнанныеПодтвержденные = СтрокаОстатка.СуммаОтгрузки - (СтрокаОстатка.РасходыВсего - СтрокаОстатка.Признано);
				ПризнанныеПодтвержденные = ?(ПризнанныеПодтвержденные > 0, ПризнанныеПодтвержденные, 0);
				НеПодтвержденнаяОплата = СтрокаОстатка.СуммаОплаты - ПризнанныеПодтвержденные;
				НеПодтвержденнаяОплата = ?(НеПодтвержденнаяОплата > 0, НеПодтвержденнаяОплата, 0);
				ПереносимаяСуммаОплаты = Мин(НеПодтвержденнаяОплата, СуммаОтгрузки);
			КонецЕсли;
			
			//Результат.Содержание = СтрЗаменить(СодержаниеРасхода(Выборка, СтрокаОстатка.ВидРасходов), НСтр("ru = 'Признаны'"), НСтр("ru = 'Не признаны'"));
			Результат.Содержание = СодержаниеРасхода(Данные, СтрокаОстатка.ВидРасходов);
			ПереносимыйНДС = ?(СтрокаОстатка.СуммаРасходов = 0, 0, СуммаОтгрузки * СтрокаОстатка.НДС / СтрокаОстатка.СуммаРасходов);
			
			// Уменьшаем текущие записи регистра
			Результат.СуммаРасходов = -СуммаОтгрузки;
			Результат.НДС = -ПереносимыйНДС;
			Результат.СуммаОплаты = -ПереносимаяСуммаОплаты;
			Результат.СуммаОтгрузки = 0;
			Результат.ЭлементРасходов = СтрокаОстатка.ЭлементРасходов;
			Результат.ВидРасходов = СтрокаОстатка.ВидРасходов;
			
			// Был товар, стал ОС/НМА:
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовТовары().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено
				И Перечисления.ВидыРасходовУСН.ВидыРасходовОСНМА().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				
				Результат.НеПризнано = ?(СтрокаОстатка.РасходыВсего = СтрокаОстатка.СуммаРасходов, Результат.СуммаРасходов, 0);
				Результат.Содержание = Результат.Содержание + " " + НСтр("ru = 'Причина непризнания: реклассификация с товаров на ОС/НМА';
																		|en = 'Reason for non-recognition: reclassification from goods to FA/IA'");
				
			КонецЕсли;
			
			// Был материал, стал ОС/НМА:
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовМатериалы().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено
				И Перечисления.ВидыРасходовУСН.ВидыРасходовОСНМА().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				
				Результат.РасходыУСН = ?(СтрокаОстатка.Признано > 0, Результат.СуммаОплаты, 0);
				Результат.НеПризнано = ?(Результат.РасходыУСН = 0 И СтрокаОстатка.РасходыВсего = СтрокаОстатка.СуммаРасходов, Результат.СуммаРасходов, 0);
				Результат.Содержание = Результат.Содержание + " " + НСтр("ru = 'Причина непризнания: реклассификация с материалов на ОС/НМА';
																		|en = 'Reason for non-recognition: reclassification from materials to FA/IA'");
				
			КонецЕсли;
			
			// Был товар, стал материал:
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовТовары().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено
				И Перечисления.ВидыРасходовУСН.ВидыРасходовМатериалы().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				
				Результат.НеПризнано = ?(СтрокаОстатка.РасходыВсего = СтрокаОстатка.СуммаРасходов, Результат.СуммаРасходов, 0);
				Результат.Содержание = Результат.Содержание + " " + НСтр("ru = 'Причина непризнания: реклассификация с товаров на материалы';
																		|en = 'Reason for non-recognition: reclassification from goods to materials'");
				
			КонецЕсли;
			
			// Был материал, стал товар:
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовМатериалы().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено
				И Перечисления.ВидыРасходовУСН.ВидыРасходовТовары().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				
				Результат.РасходыУСН = ?(СтрокаОстатка.Признано > 0, Результат.СуммаОплаты, 0);
				Результат.НеПризнано = ?(Результат.РасходыУСН = 0 И СтрокаОстатка.РасходыВсего = СтрокаОстатка.СуммаРасходов, Результат.СуммаРасходов, 0);
				Результат.Содержание = Результат.Содержание + " " + НСтр("ru = 'Причина непризнания: реклассификация с материалов на товары';
																		|en = 'Reason for non-recognition: reclassification from materials to goods'");
				
			КонецЕсли;
			
			// Был ОС/НМА, стал товар:
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовОСНМА().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено
				И Перечисления.ВидыРасходовУСН.ВидыРасходовТовары().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				
				Результат.РасходыУСН = Результат.СуммаОплаты;
				Результат.НеПризнано = 0;
				Результат.Содержание = Результат.Содержание + " " + НСтр("ru = 'Причина непризнания: реклассификация с ОС/НМА на товары';
																		|en = 'Reason for non-recognition: reclassification from FA/IA to goods'");
				
			КонецЕсли;
			
			// Был ОС/НМА, стал материал:
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовОСНМА().Найти(СтрокаОстатка.ВидРасходов) <> Неопределено
				И Перечисления.ВидыРасходовУСН.ВидыРасходовМатериалы().Найти(Данные.ВидРасходов) <> Неопределено Тогда
				
				Результат.РасходыУСН = Результат.СуммаОплаты;
				Результат.НеПризнано = 0;
				Результат.Содержание = Результат.Содержание + " " + НСтр("ru = 'Причина непризнания: реклассификация с ОС/НМА на материалы';
																		|en = 'Reason for non-recognition: reclassification from FA/IA to materials'");
				
			КонецЕсли;
			
			Если Результат.РасходыУСН <> 0 ИЛИ Результат.НеПризнано <> 0 Тогда
				Результат.РасходыЕНВД = Результат.НеПризнано;
				ДозаполнитьСуммыПризнания(Результат, СтрокаОстатка);
			КонецЕсли;
			
			СтрокаОстатка.СуммаРасходов = СтрокаОстатка.СуммаРасходов + Результат.СуммаРасходов;
			СтрокаОстатка.СуммаОплаты = СтрокаОстатка.СуммаОплаты + Результат.СуммаОплаты;
			СтрокаОстатка.НДС = СтрокаОстатка.НДС + Результат.НДС;
			
		КонецЕсли;
		
		Данные.СуммаОтгрузки = Данные.СуммаОтгрузки - СуммаОтгрузки;
		
		ОбработатьРезультатВСлучаеСтарогоМетода(Результат, СтрокаОстатка.ТипОстатка);
		
		МассивРезультатов.Добавить(Результат);
		
	КонецЦикла;
	
	Если Данные.СуммаОтгрузки > 0 И СтруктураПоискаОстатка.Количество() Тогда
		
		МассивРезультатовРеклассификации = РезультатСписанияРасходов(Данные, ТаблицаОстатков, СтруктураПоискаОстатка);
		
		Если Не СоздаватьНовуюСтрокуОстатка Тогда
			Возврат МассивРезультатовРеклассификации;
		КонецЕсли;
		
		Результат = МассивРезультатов.Получить(0);
		
		Для каждого ЗаписьРеклассификации Из МассивРезультатовРеклассификации Цикл
			
			СуммаОтгрузки = -ЗаписьРеклассификации.СуммаРасходов;
			Результат.СуммаРасходов = Результат.СуммаРасходов - ЗаписьРеклассификации.СуммаРасходов;
			Результат.НДС = Результат.НДС - ЗаписьРеклассификации.НДС;
			Результат.СуммаОплаты = Результат.СуммаОплаты - ЗаписьРеклассификации.СуммаОплаты;
			Результат.СуммаОтгрузки = Результат.СуммаОтгрузки + СуммаОтгрузки;
			
			СуммаНеПризнания = 0;
			СуммаНеПризнанияЕНВД = 0;
			СуммаПризнания = 0;
			
			Если Перечисления.ВидыРасходовУСН.ВидыРасходовОСНМА().Найти(Данные.ВидРасходов) = Неопределено Тогда
				// Для материалов и товаров заполняем суммы признания и не признания:
				
				СуммаНеПризнания = ?(Не Данные.ПризнаватьРасходамиПриУСН, СуммаОтгрузки, 0);
				СуммаНеПризнанияЕНВД = Окр(СуммаОтгрузки * Данные.КоэффициентЕНВД, 2);
				СуммаПризнания = Мин(СуммаОтгрузки, -ЗаписьРеклассификации.СуммаРасходов, -ЗаписьРеклассификации.СуммаОплаты);
				СуммаПризнания = ?(СуммаПризнания - СуммаНеПризнания - СуммаНеПризнанияЕНВД > 0, СуммаПризнания - СуммаНеПризнания - СуммаНеПризнанияЕНВД, 0);
				
				Результат.НеПризнано = Результат.НеПризнано + СуммаНеПризнания + СуммаНеПризнанияЕНВД;
				Результат.Признано = Результат.Признано + СуммаПризнания;
				
				Результат.РасходыВсего = Результат.РасходыВсего + СуммаПризнания + СуммаНеПризнания + СуммаНеПризнанияЕНВД;
				Результат.РасходыУСН = Результат.РасходыУСН + СуммаПризнания;
				Результат.РасходыЕНВД = Результат.РасходыЕНВД + СуммаНеПризнанияЕНВД;
				
			КонецЕсли;
			
			СтрокаОстатка.СуммаРасходов = СтрокаОстатка.СуммаРасходов + Результат.СуммаРасходов;
			СтрокаОстатка.СуммаОплаты = СтрокаОстатка.СуммаОплаты + Результат.СуммаОплаты;
			СтрокаОстатка.НДС = СтрокаОстатка.НДС + Результат.НДС;
			СтрокаОстатка.СуммаОтгрузки = СтрокаОстатка.СуммаОтгрузки + СуммаОтгрузки;
			СтрокаОстатка.НеПризнано = СтрокаОстатка.НеПризнано + СуммаНеПризнания + СуммаНеПризнанияЕНВД;
			СтрокаОстатка.Признано = СтрокаОстатка.Признано + СуммаПризнания;
			СтрокаОстатка.РасходыВсего = СтрокаОстатка.РасходыВсего + СуммаПризнания + СуммаНеПризнания + СуммаНеПризнанияЕНВД;
			
			Результат.РасходыНДС = ?(СтрокаОстатка.СуммаРасходов = 0, 0, Результат.РасходыВсего * СтрокаОстатка.НДС / СтрокаОстатка.СуммаРасходов);
			
			МассивРезультатов.Добавить(ЗаписьРеклассификации);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивРезультатов;
	
КонецФункции

Процедура ЗаполнитьЗаписьКУДиР(ЗаписьКУДиР, ДанныеЗаписи, ПризнаватьНДС)
	
	ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, ДанныеЗаписи);
	ЗаписьКУДиР.ДокументВозникновенияДоходовРасходов = ДанныеЗаписи.ДокументВозникновенияРасходов;
	ЗаписьКУДиР.Статья = ДанныеЗаписи.СтатьяРасходов;
	ЗаписьКУДиР.Графа6 = ДанныеЗаписи.РасходыВсего;
	ЗаписьКУДиР.РасходЕНВД = ДанныеЗаписи.РасходыЕНВД;
	Если ПризнаватьНДС Тогда  
		ЗаписьКУДиР.Графа7 = ДанныеЗаписи.РасходыУСН;
		ЗаписьКУДиР.НДС = ДанныеЗаписи.РасходыНДС;
	Иначе
		ЗаписьКУДиР.Графа7 = ДанныеЗаписи.РасходыУСН - ДанныеЗаписи.РасходыНДС;
		ЗаписьКУДиР.НДС = 0; 
	КонецЕсли;
	Если ДанныеЗаписи.РасходыУСН <= 0 Тогда
		ЗаписьКУДиР.Содержание = СтрЗаменить(ДанныеЗаписи.Содержание, НСтр("ru = 'Признаны';
																			|en = 'Recognized'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Не признаны';
																																			|en = 'Not recognized'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКУДиР2ПризнаннымиРасходами(ВременнныеТаблицыРасходовНаОС, Движения, ПризнаватьНДС = Истина)
	
	ПорядокУчета = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ;
	ВидыДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат;
	
	ТаблицаРасходовКПризнанию = ТаблицаПринимаемыхРасходовНаОС(ВременнныеТаблицыРасходовНаОС);
	
	Для Каждого СтрокаРасходов Из ТаблицаРасходовКПризнанию Цикл
		
		Если СтрокаРасходов.ПорядокУчета <> ПорядокУчета.ВключитьВСоставАмортизируемогоИмущества
			И СтрокаРасходов.Период < НачалоМесяца(СтрокаРасходов.КонДата) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаОплаты = СтрокаРасходов.СуммаОплаты;
		
		Если СтрокаРасходов.ПорядокУчета = ПорядокУчета.ВключитьВСоставАмортизируемогоИмущества Тогда
			
			СуммаПризнания = Окр(СуммаОплаты / СтрокаРасходов.Графа9_КолКварталовВНалПериоде, 2);
		
			ОстатокПослеВычетаОкругленнойСуммыПризнания = СуммаОплаты 
				- СуммаПризнания * СтрокаРасходов.Графа9_КолКварталовВНалПериоде;
			// В конце года могут остаться копейки (за счет округления признания), учтем их вместе с последним платежом:
			Если СтрокаРасходов.Период = КонецГода(СтрокаРасходов.Период)
				И ОстатокПослеВычетаОкругленнойСуммыПризнания <> 0 Тогда
					СуммаПризнания = СуммаПризнания + ОстатокПослеВычетаОкругленнойСуммыПризнания;
			КонецЕсли;
				
		Иначе
			
			СуммаПризнания = СуммаОплаты;
			
		КонецЕсли;
		
		ЗаписьРасхода = Движения.РасходыПриУСНОСиНМА.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(ЗаписьРасхода, СтрокаРасходов);
		
		ЗаписьРасхода.СуммаРасходов = СуммаПризнания;
		ЗаписьРасхода.СуммаОплаты = СуммаПризнания;
		ЗаписьРасхода.НДС = ЗаписьРасхода.СуммаРасходов * СтрокаРасходов.НДС / СтрокаРасходов.СуммаРасходов;
		
		Если СтрокаРасходов.ПорядокУчета = ПорядокУчета.ВключитьВСоставАмортизируемогоИмущества
			И СтрокаРасходов.ВидДеятельности <> ВидыДеятельности.ОсобыйПорядокНалогообложения
			И СтрокаРасходов.ПризнаватьРасходамиПриУСН Тогда
			
			ЗаписьКУДиР = Движения.КнигаУчетаДоходовИРасходовРаздел2.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, СтрокаРасходов);
			
			Если СтрокаРасходов.Период = КонецГода(СтрокаРасходов.Период) Тогда
				ЗаписьКУДиР.Графа12_СуммаРасходовЗаОтчетнПериод = СуммаОплаты;
			Иначе
				КварталовПрошло = Месяц(СтрокаРасходов.Период) / 3 - (4 - СтрокаРасходов.Графа9_КолКварталовВНалПериоде);
				ЗаписьКУДиР.Графа12_СуммаРасходовЗаОтчетнПериод = СуммаПризнания * КварталовПрошло;
			КонецЕсли;
			ЗаписьКУДиР.Графа13_СуммаРасходовЗаКвартал = СуммаПризнания;
			ЗаписьКУДиР.Графа15_ОстатокРасходов = СуммаОплаты - ЗаписьКУДиР.Графа12_СуммаРасходовЗаОтчетнПериод;
			ЗаписьКУДиР.Графа11_ДоляРасходовЗаКвартал = Окр(100 / СтрокаРасходов.Графа9_КолКварталовВНалПериоде, 2);
			
		КонецЕсли;
		
		ЗаписьПризнания = Движения.РасходыПриУСНОСиНМА.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(ЗаписьПризнания, СтрокаРасходов, , "СуммаРасходов,СуммаОплаты,НДС");
		
		Если СтрокаРасходов.ПорядокУчета <> ПорядокУчета.СтоимостьНеВключаетсяВРасходы
			И СтрокаРасходов.ПризнаватьРасходамиПриУСН Тогда
			
			ЗаписьКУДиР = Движения.КнигаУчетаДоходовИРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, СтрокаРасходов);
			ЗаписьКУДиР.ДокументВозникновенияДоходовРасходов = СтрокаРасходов.ДокументВозникновенияРасходов;
			Если СтрокаРасходов.ПорядокУчета = ПорядокУчета.ВключениеВРасходыПриПринятииКУчету Тогда
				// В "Статью" запишем элемент расходов, для того, чтобы в отчете по расходам данные по признанию могли быть
				// сопоставлены с конкретным ОС/НМА:
				ЗаписьКУДиР.Статья = СтрокаРасходов.ЭлементРасходов;
			КонецЕсли;
			ЗаписьКУДиР.Графа6 = СуммаПризнания;
			Если ПризнаватьНДС Тогда
				ЗаписьКУДиР.НДС = ЗаписьРасхода.НДС;
				ЗаписьКУДиР.Графа7 = ?(СтрокаРасходов.ВидДеятельности <> ВидыДеятельности.ОсобыйПорядокНалогообложения, СуммаПризнания, 0);
			Иначе
				ЗаписьКУДиР.НДС = 0;
				ЗаписьКУДиР.Графа7 = ?(СтрокаРасходов.ВидДеятельности <> ВидыДеятельности.ОсобыйПорядокНалогообложения, СуммаПризнания - ЗаписьРасхода.НДС, 0);
			КонецЕсли;
			ЗаписьКУДиР.РасходЕНВД = ?(СтрокаРасходов.ВидДеятельности = ВидыДеятельности.ОсобыйПорядокНалогообложения, СуммаПризнания, 0);
			Если СтрокаРасходов.ВидРасходов = Перечисления.ВидыРасходовУСН.ОС Тогда
				ЗаписьКУДиР.Содержание = НСтр("ru = 'Признание расходов на приобретение основного средства';
												|en = 'Recognition of expenses for fixed asset acquisition'", ОбщегоНазначения.КодОсновногоЯзыка());
			Иначе
				ЗаписьКУДиР.Содержание = НСтр("ru = 'Признание расходов на приобретение нематериального актива';
												|en = 'Recognition of expenses for intangible asset acquisition'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			ЗаписьКУДиР.Содержание = ЗаписьКУДиР.Содержание + " " + СтрШаблон(НСтр("ru = '""%1"" (дата оплаты: %2).';
																					|en = '""%1"" (payment date: %2).'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Строка(СтрокаРасходов.ЭлементРасходов), Формат(СтрокаРасходов.ДатаОплаты, "ДЛФ=D"));
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = СтрШаблон(НСтр("ru = '%1, № %2';
																		|en = '%1, No. %2'"),
					Формат(СтрокаРасходов.Период, "ДЛФ=D"), СтрокаРасходов.Номер);
			
			ЗаписьРасхода.Признано = ЗаписьКУДиР.Графа7;
			ЗаписьРасхода.НеПризнано = ЗаписьКУДиР.РасходЕНВД;
			ЗаписьПризнания.Признано = ЗаписьКУДиР.Графа7;
			ЗаписьПризнания.НеПризнано = ЗаписьКУДиР.РасходЕНВД;
		Иначе
			ЗаписьРасхода.НеПризнано = СуммаПризнания;
			ЗаписьПризнания.НеПризнано = СуммаПризнания;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаПринимаемыхРасходовНаОС(ВременныеТаблицыРасходовНаОС)
	
	ТаблицаРасходовКПризнанию = Новый ТаблицаЗначений;
	
	РезультатЗапросаРасходыЗаПериод = РезультатЗапросаВыборкаРасходовНаОС(ВременныеТаблицыРасходовНаОС);
	ОплатыПереквалификация = ТаблицаОплатПереквалифицированныхРасходовНаОС(ВременныеТаблицыРасходовНаОС);
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ОплатыПереквалификация, "НомерСтроки");
	
	Для Каждого КолонкаРезультата Из РезультатЗапросаРасходыЗаПериод.Колонки Цикл
		ТаблицаРасходовКПризнанию.Колонки.Добавить(КолонкаРезультата.Имя, КолонкаРезультата.ТипЗначения);
	КонецЦикла;
	
	ВыборкаРасходовЗаПериод = РезультатЗапросаРасходыЗаПериод.Выбрать();
	
	Пока ВыборкаРасходовЗаПериод.Следующий() Цикл
		
		// Если оплата сразу отнесена к расходам на конкретный элемент ОС - добавляем ее как есть.
		
		Если ВыборкаРасходовЗаПериод.СуммаОплаты > 0 Тогда
			СтрокаКПризнанию = ТаблицаРасходовКПризнанию.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКПризнанию, ВыборкаРасходовЗаПериод, , "ПервоначальнаяСуммаОплаты");
		КонецЕсли;
		
		// Оплату, не отнесенную на конкретный элемент ОС, ищем в данных об оплате переквалифицированных расходов.
		
		Если ВыборкаРасходовЗаПериод.ПервоначальнаяСуммаОплаты > 0 Тогда
			
			НераспределеннаяСумма = ВыборкаРасходовЗаПериод.ПервоначальнаяСуммаОплаты;
			
			Отбор = Новый Структура("ДокументВозникновенияРасходов", ВыборкаРасходовЗаПериод.ДокументВозникновенияРасходов);
			ПереквалифицированныеОплаты = ОплатыПереквалификация.Скопировать(Отбор);
			ПереквалифицированныеОплаты.Сортировать("ДатаОплаты, ДокументВозникновенияРасходов", Новый СравнениеЗначений);
			
			Для Каждого Оплата Из ПереквалифицированныеОплаты Цикл
				
				Если НераспределеннаяСумма = 0 Тогда
					Прервать;
				КонецЕсли;
				Если Оплата.СуммаОплаты <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаОплаты = Мин(Оплата.СуммаОплаты, НераспределеннаяСумма);
				
				СтрокаКПризнанию = ТаблицаРасходовКПризнанию.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКПризнанию, ВыборкаРасходовЗаПериод, , "ПервоначальнаяСуммаОплаты");
				
				СтрокаКПризнанию.СуммаОплаты = СуммаОплаты;
				СтрокаКПризнанию.Графа5_ПервоначальнаяСтоимость = СуммаОплаты;
				СтрокаКПризнанию.ДатаОплаты = Оплата.ДатаОплаты;
				
				ПериодНачалаПризнанияРасходов = Макс(СтрокаКПризнанию.ДатаОплаты, СтрокаКПризнанию.Графа3_ДатаВводаВЭксплуатацию, НачалоГода(СтрокаКПризнанию.Период));
				СтрокаКПризнанию.Графа9_КолКварталовВНалПериоде = 5 - Цел(Месяц(КонецКвартала(ПериодНачалаПризнанияРасходов))/3);
				
				НераспределеннаяСумма = НераспределеннаяСумма - СуммаОплаты;
				ОплатыПереквалификация[Оплата.НомерСтроки].СуммаОплаты = ОплатыПереквалификация[Оплата.НомерСтроки].СуммаОплаты - СуммаОплаты;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасходовКПризнанию;
	
КонецФункции

Функция РезультатЗапросаВыборкаРасходовНаОС(ВременныеТаблицыРасходовНаОС)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыРасходовНаОС;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыКПризнанию.ЭлементРасходов КАК ЭлементРасходов,
	|	РасходыКПризнанию.Организация КАК Организация,
	|	РасходыКПризнанию.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	РасходыКПризнанию.ВидРасходов КАК ВидРасходов,
	|	РасходыКПризнанию.Графа3_ДатаВводаВЭксплуатацию КАК Графа3_ДатаВводаВЭксплуатацию,
	|	РасходыКПризнанию.ПорядокУчета КАК ПорядокУчета,
	|	РасходыКПризнанию.ВидДеятельности КАК ВидДеятельности,
	|	РасходыКПризнанию.ПризнаватьРасходамиПриУСН КАК ПризнаватьРасходамиПриУСН,
	|	РасходыКПризнанию.Период КАК ДатаВозникновения,
	|	РасходыКПризнанию.СуммаРасходов КАК СуммаРасходов,
	|	РасходыКПризнанию.НДС КАК НДС,
	|	РасходыКПризнанию.ПервоначальнаяСуммаОплаты КАК ПервоначальнаяСуммаОплаты,
	|	РасходыКПризнанию.ДатаОплаты КАК ДатаОплаты,
	|	РасходыКПризнанию.Период КАК Период,
	|	РасходыКПризнанию.Графа9_КолКварталовВНалПериоде КАК Графа9_КолКварталовВНалПериоде,
	|	РасходыКПризнанию.Графа8_КолКварталовВОтчетномПериоде КАК Графа8_КолКварталовВОтчетномПериоде,
	|	РасходыКПризнанию.Графа5_ПервоначальнаяСтоимость КАК Графа5_ПервоначальнаяСтоимость,
	|	РасходыКПризнанию.СуммаОплаты КАК СуммаОплаты,
	|	РасходыКПризнанию.Графа10_ДоляРасходовЗаНалПериод КАК Графа10_ДоляРасходовЗаНалПериод,
	|	РасходыКПризнанию.Регистратор КАК Регистратор,
	|	РасходыКПризнанию.ТипОперации КАК ТипОперации,
	|	РасходыКПризнанию.КонДата КАК КонДата,
	|	РасходыКПризнанию.Номер КАК Номер
	|ИЗ
	|	РасходыКПризнанию КАК РасходыКПризнанию
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Регистратор УБЫВ";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТаблицаОплатПереквалифицированныхРасходовНаОС(ВременныеТаблицыРасходовНаОС)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыРасходовНаОС;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатыПереквалификация.Организация КАК Организация,
	|	ОплатыПереквалификация.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ОплатыПереквалификация.ДатаОплаты КАК ДатаОплаты,
	|	ОплатыПереквалификация.ДокументОплаты КАК ДокументОплаты,
	|	ОплатыПереквалификация.СуммаОплаты КАК СуммаОплаты
	|ИЗ
	|	ОплатыПереквалификация КАК ОплатыПереквалификация";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ПризнанныеРасходыПоАмортизации(ПараметрыЗапроса)
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = ИнициализироватьЗапросПоПараметрам(ПараметрыЗапроса, ВременныеТаблицы);
	Запрос.УстановитьПараметр("ДатаРегистрацииОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Организация, "ДатаРегистрации"));
	
	Запрос.Текст = ТекстЗапросаРасходыНаПриобретениеОС();
	
	Запрос.Выполнить();
	
	Возврат ВременныеТаблицы;
	
КонецФункции

Функция ВременныеТаблицыДляЗаполненияРасходов(Параметры)
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметровЗапроса = Параметры;
	ДополнитьПараметрамиПоУмолчанию(СтруктураПараметровЗапроса);    
	
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(
		"НастройкиУчетаНДСПриУСН",
		ВременныеТаблицы,
		СтруктураПараметровЗапроса.Дата,
		"ВТУчетнаяПолитикаНДС",
		СтруктураПараметровЗапроса.СписокОрганизаций.ВыгрузитьЗначения());
	
	Запрос = ИнициализироватьЗапросПоПараметрам(СтруктураПараметровЗапроса, ВременныеТаблицы);
	
	Запрос.Текст = ТекстЗапросаЗаполненияРасходов();
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Функция ТекстЗапросаВводаНачальныхОстатков()
	
	МассивТекстовЗапроса = Новый Массив;
	
#Область НачОстаткиМатериаловТекущегоПериода
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ДанныеРегистра.Партия КАК Партия,
	|	ДанныеРегистра.СуммаРасходов КАК СуммаРасходов,
	|	ДанныеРегистра.НДС КАК НДС,
	|	ДанныеРегистра.СуммаОплаты КАК СуммаОплаты,
	|	ДанныеРегистра.ВидРасходов КАК ВидРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	ДанныеРегистра.СуммаОтгрузки КАК СуммаОтгрузки,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДанныеРегистра.Признано КАК Признано,
	|	ДанныеРегистра.НеПризнано КАК НеПризнано,
	|	РеестрДокументов.Контрагент КАК Контрагент,
	|	РеестрДокументов.Договор КАК Договор,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА РеестрДокументов.СторноИсправление ТОГДА ""СторноВНО"" ИНАЧЕ ""ВНО"" КОНЕЦ КАК ВидОперации
	|ПОМЕСТИТЬ ВтВводНачальныхОстатков
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНМатериалы КАК ДанныеРегистра
	|	ПО
	|		РеестрДокументов.Ссылка = ДанныеРегистра.Регистратор
	|		И РеестрДокументов.Организация = ДанныеРегистра.Организация
	|		И ДанныеРегистра.Период МЕЖДУ &НачДата И &КонДата
	|		И ДанныеРегистра.ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка)
	|		И ДанныеРегистра.Партия <> Неопределено
	|ГДЕ
	|	РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковРасходовУСНПоМатериалам)
	|	И РеестрДокументов.Организация = &Организация
	|	И РеестрДокументов.ДатаДокументаИБ МЕЖДУ &НачДата И &КонДата
	|	И РеестрДокументов.Проведен
	|	И ДанныеРегистра.СуммаРасходов <> 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область НачОстаткиТоваровТекущегоПериода
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ДанныеРегистра.Партия КАК Партия,
	|	ДанныеРегистра.СуммаРасходов КАК СуммаРасходов,
	|	ДанныеРегистра.НДС КАК НДС,
	|	ДанныеРегистра.СуммаОплаты КАК СуммаОплаты,
	|	ДанныеРегистра.ВидРасходов КАК ВидРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	ДанныеРегистра.СуммаОтгрузки КАК СуммаОтгрузки,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДанныеРегистра.Признано КАК Признано,
	|	ДанныеРегистра.НеПризнано КАК НеПризнано,
	|	РеестрДокументов.Контрагент КАК Контрагент,
	|	РеестрДокументов.Договор КАК Договор,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА РеестрДокументов.СторноИсправление ТОГДА ""СторноВНО"" ИНАЧЕ ""ВНО"" КОНЕЦ КАК ВидОперации
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСНТовары КАК ДанныеРегистра
	|	ПО
	|		РеестрДокументов.Ссылка = ДанныеРегистра.Регистратор
	|		И РеестрДокументов.Организация = ДанныеРегистра.Организация
	|		И ДанныеРегистра.Период МЕЖДУ &НачДата И &КонДата
	|		И ДанныеРегистра.ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка)
	|		И ДанныеРегистра.Партия <> Неопределено
	|ГДЕ
	|	РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковРасходовУСНПоТоварам)
	|	И РеестрДокументов.Организация = &Организация
	|	И РеестрДокументов.ДатаДокументаИБ МЕЖДУ &НачДата И &КонДата
	|	И РеестрДокументов.Проведен
	|	И ДанныеРегистра.СуммаРасходов <> 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область НачОстаткиПрочихРасходовТекущегоПериода
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ДанныеРегистра.ДокументВозникновенияРасходов КАК Партия,
	|	ДанныеРегистра.СуммаРасходов КАК СуммаРасходов,
	|	ДанныеРегистра.НДС КАК НДС,
	|	ДанныеРегистра.СуммаОплаты КАК СуммаОплаты,
	|	ДанныеРегистра.ВидРасходов КАК ВидРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	0 КАК СуммаОтгрузки,
	|	ДанныеРегистра.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДанныеРегистра.Признано КАК Признано,
	|	ДанныеРегистра.НеПризнано КАК НеПризнано,
	|	РеестрДокументов.Контрагент КАК Контрагент,
	|	РеестрДокументов.Договор КАК Договор,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА РеестрДокументов.СторноИсправление ТОГДА ""СторноВНО"" ИНАЧЕ ""ВНО"" КОНЕЦ КАК ВидОперации
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН КАК ДанныеРегистра
	|	ПО
	|		РеестрДокументов.Ссылка = ДанныеРегистра.Регистратор
	|		И РеестрДокументов.Организация = ДанныеРегистра.Организация
	|		И ДанныеРегистра.Период МЕЖДУ &НачДата И &КонДата
	|		И НЕ ДанныеРегистра.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Лизинг),ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты),ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка))
	|ГДЕ
	|	РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПрочихРасходовУСН)
	|	И РеестрДокументов.Организация = &Организация
	|	И РеестрДокументов.ДатаДокументаИБ МЕЖДУ &НачДата И &КонДата
	|	И РеестрДокументов.Проведен
	|	И ДанныеРегистра.СуммаРасходов <> 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстатковПриСтаромМетодеХраненияДопРасходов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПриУСНМатериалыОстатки.Организация КАК Организация,
	|	РасходыПриУСНМатериалыОстатки.ДокументВозникновенияРасходов КАК Партия,
	|	РасходыПриУСНМатериалыОстатки.СуммаРасходовОстаток КАК СуммаРасходов,
	|	РасходыПриУСНМатериалыОстатки.НДСОстаток КАК НДС,
	|	РасходыПриУСНМатериалыОстатки.СуммаОплатыОстаток КАК СуммаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы) КАК ВидРасходов,
	|	0 КАК СуммаОтгрузки
	|ПОМЕСТИТЬ ОстаткиСтарогоМетодаБезДокументовВозникновенияРасходов
	|ИЗ
	|	РегистрНакопления.РасходыПриУСНМатериалы.Остатки(&НачГраница, Организация = &Организация
	|		И ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка) И Партия = Неопределено) КАК РасходыПриУСНМатериалыОстатки
	|ГДЕ
	|	РасходыПриУСНМатериалыОстатки.СуммаРасходовОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходыПриУСНТоварыОстатки.Организация,
	|	РасходыПриУСНТоварыОстатки.ДокументВозникновенияРасходов КАК Партия,
	|	РасходыПриУСНТоварыОстатки.СуммаРасходовОстаток,
	|	РасходыПриУСНТоварыОстатки.НДСОстаток,
	|	РасходыПриУСНТоварыОстатки.СуммаОплатыОстаток,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура),
	|	РасходыПриУСНТоварыОстатки.СуммаОтгрузкиОстаток
	|ИЗ
	|	РегистрНакопления.РасходыПриУСНТовары.Остатки(&НачГраница, Организация = &Организация
	|		И ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка) И Партия = Неопределено) КАК РасходыПриУСНТоварыОстатки
	|ГДЕ
	|	РасходыПриУСНТоварыОстатки.СуммаРасходовОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Организация КАК Организация,
	|	Остатки.Партия,
	|	Партии.ДокументПоступления КАК ДокументВозникновенияРасходов,
	|	СУММА(ЕСТЬNULL(Партии.СтоимостьБезНДСОборот + Партии.НДСОборот, Остатки.СуммаРасходов)) КАК СуммаРасходов,
	|	СУММА(ЕСТЬNULL(Партии.НДСОборот, Остатки.НДС)) КАК НДС,
	|	ВЫБОР КОГДА СУММА(Остатки.СуммаРасходов) = 0 ТОГДА СУММА(Остатки.СуммаОплаты) ИНАЧЕ
	|		СУММА(Остатки.СуммаОплаты) * СУММА(ЕСТЬNULL(Партии.СтоимостьБезНДСОборот + Партии.НДСОборот, Остатки.СуммаРасходов)) / СУММА(Остатки.СуммаРасходов) КОНЕЦ КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА Партии.ДокументПоступления = Партии.Партия
	|		ТОГДА Остатки.ВидРасходов
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		ТОГДА ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы) КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы) КОНЕЦ КОНЕЦ КАК ВидРасходов,
	|	СУММА(Остатки.СуммаОтгрузки) КАК СуммаОтгрузки
	|ПОМЕСТИТЬ ОстаткиСтарогоМетода
	|ИЗ
	|	ОстаткиСтарогоМетодаБезДокументовВозникновенияРасходов КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН.Обороты(
	|			ДОБАВИТЬКДАТЕ(&НачДата, ГОД, -1), &НачГраница, Регистратор, Организация = &Организация) КАК Партии
	|		ПО Остатки.Организация = Партии.Организация
	|			И Остатки.Партия = Партии.Партия
	|			И (Остатки.Партия = Партии.Партия ИЛИ Партии.Партия = НЕОПРЕДЕЛЕНО И Остатки.Партия = Партии.ДокументПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Партии.ДокументПоступления = Партии.Партия
	|		ТОГДА Остатки.ВидРасходов
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		ТОГДА ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы) КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы) КОНЕЦ КОНЕЦ,
	|	Остатки.Партия,
	|	Остатки.Организация,
	|	Партии.ДокументПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Организация КАК Организация,
	|	Остатки.Партия,
	|	Партии.ДокументПоступления КАК ДокументВозникновенияРасходов,
	|	СУММА(ЕСТЬNULL(Партии.СтоимостьБезНДСОборот + Партии.НДСОборот, Остатки.СуммаРасходов)) КАК СуммаРасходов,
	|	СУММА(ЕСТЬNULL(Партии.НДСОборот, Остатки.НДС)) КАК НДС,
	|	ВЫБОР КОГДА СУММА(Остатки.СуммаРасходов) = 0 ТОГДА СУММА(Остатки.СуммаОплаты) ИНАЧЕ
	|		СУММА(Остатки.СуммаОплаты) * СУММА(ЕСТЬNULL(Партии.СтоимостьБезНДСОборот + Партии.НДСОборот, Остатки.СуммаРасходов)) / СУММА(Остатки.СуммаРасходов) КОНЕЦ КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА Партии.ДокументПоступления = Партии.Партия
	|		ТОГДА Остатки.ВидРасходов
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		ТОГДА ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы) КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы) КОНЕЦ КОНЕЦ КАК ВидРасходов,
	|	СУММА(Остатки.СуммаОтгрузки) КАК СуммаОтгрузки
	|ИЗ
	|	ОстаткиСтарогоМетодаБезДокументовВозникновенияРасходов КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.Обороты(
	|			ДОБАВИТЬКДАТЕ(&НачДата, ГОД, -1), &НачГраница, Регистратор, Организация = &Организация) КАК Партии
	|		ПО Остатки.Организация = Партии.Организация
	|			И Остатки.Партия = Партии.Партия
	|			И (Остатки.Партия = Партии.Партия ИЛИ Партии.Партия = НЕОПРЕДЕЛЕНО И Остатки.Партия = Партии.ДокументПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Партии.ДокументПоступления = Партии.Партия
	|		ТОГДА Остатки.ВидРасходов
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		ТОГДА ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы) КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы) КОНЕЦ КОНЕЦ,
	|	Остатки.Партия,
	|	Остатки.Организация,
	|	Партии.ДокументПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.Партия,
	|	Партии.ДокументПоступленияРасходов,
	|	СУММА(ЕСТЬNULL(Партии.СтоимостьРеглОборот + Партии.НДСРеглОборот, Остатки.СуммаРасходов)),
	|	СУММА(ЕСТЬNULL(Партии.НДСРеглОборот, Остатки.НДС)),
	|	ВЫБОР КОГДА СУММА(Остатки.СуммаРасходов) = 0 ТОГДА СУММА(Остатки.СуммаОплаты) ИНАЧЕ
	|		СУММА(Остатки.СуммаОплаты) * СУММА(ЕСТЬNULL(Партии.СтоимостьРеглОборот + Партии.НДСРеглОборот, Остатки.СуммаРасходов)) / СУММА(Остатки.СуммаРасходов) КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Партии.ДокументПоступленияРасходов = Партии.ДокументПоступления
	|		ТОГДА Остатки.ВидРасходов
	|		КОГДА Партии.ДокументПоступленияРасходов ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		ТОГДА ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы) КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы) КОНЕЦ КОНЕЦ,
	|	СУММА(Остатки.СуммаОтгрузки)
	|ИЗ
	|	ОстаткиСтарогоМетодаБезДокументовВозникновенияРасходов КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров.Обороты(
	|			ДОБАВИТЬКДАТЕ(&НачДата, ГОД, -1), &НачГраница, Регистратор, Организация = &Организация) КАК Партии
	|		ПО Остатки.Организация = Партии.Организация
	|			И Остатки.Партия = Партии.ДокументПоступления
	|			И (Остатки.Партия = Партии.ДокументПоступления ИЛИ Партии.ДокументПоступления = НЕОПРЕДЕЛЕНО И Остатки.Партия = Партии.ДокументПоступленияРасходов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Партии.ДокументПоступленияРасходов = Партии.ДокументПоступления
	|		ТОГДА Остатки.ВидРасходов
	|		КОГДА Партии.ДокументПоступленияРасходов ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		ТОГДА ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы) КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы) КОНЕЦ КОНЕЦ,
	|	Остатки.Партия,
	|	Остатки.Организация,
	|	Партии.ДокументПоступленияРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстатков()
	
	МассивТекстовЗапроса = Новый Массив;
	
	#Область ОстаткиМатериалов
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиРасходов.Организация КАК Организация,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ОстаткиРасходов.Партия КАК Партия,
	|	ОстаткиРасходов.СуммаРасходовОстаток КАК СуммаРасходов,
	|	ОстаткиРасходов.НДСОстаток КАК НДС,
	|	ОстаткиРасходов.СуммаОплатыОстаток КАК СуммаОплаты,
	|	ОстаткиРасходов.ВидРасходов КАК ВидРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	ОстаткиРасходов.СуммаОтгрузкиОстаток КАК СуммаОтгрузки,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|	ЛОЖЬ КАК ОстаткиСтарогоМетода,
	|	ОстаткиРасходов.ПризнаноОстаток КАК Признано,
	|	ОстаткиРасходов.НеПризнаноОстаток КАК НеПризнано
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.РасходыПриУСНМатериалы.Остатки(&НачГраница, Организация = &Организация
	|		И ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка) И Партия <> Неопределено) КАК ОстаткиРасходов
	|ГДЕ
	|	ОстаткиРасходов.СуммаРасходовОстаток > 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОстаткиТоваров
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиРасходов.Организация,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов,
	|	ОстаткиРасходов.Партия,
	|	ОстаткиРасходов.СуммаРасходовОстаток,
	|	ОстаткиРасходов.НДСОстаток,
	|	ОстаткиРасходов.СуммаОплатыОстаток,
	|	ОстаткиРасходов.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	ОстаткиРасходов.СуммаОтгрузкиОстаток,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ОстаткиРасходов.ПризнаноОстаток,
	|	ОстаткиРасходов.НеПризнаноОстаток
	|ИЗ
	|	РегистрНакопления.РасходыПриУСНТовары.Остатки(&НачГраница, Организация = &Организация
	|		И ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ПустаяСсылка) И Партия <> Неопределено) КАК ОстаткиРасходов
	|ГДЕ
	|	ОстаткиРасходов.СуммаРасходовОстаток > 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОстаткиПрочихРасходов
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиРасходов.Организация,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов,
	|	СУММА(ОстаткиРасходов.СуммаРасходовОстаток),
	|	СУММА(ОстаткиРасходов.НДСОстаток),
	|	СУММА(ОстаткиРасходов.СуммаОплатыОстаток),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиРасходов.ДокументВозникновенияРасходов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|				И ОстаткиРасходов.ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты)
	|		ИНАЧЕ ОстаткиРасходов.ВидРасходов
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	0,
	|	ОстаткиРасходов.СтатьяРасходов,
	|	ЛОЖЬ,
	|	СУММА(ОстаткиРасходов.ПризнаноОстаток),
	|	СУММА(ОстаткиРасходов.НеПризнаноОстаток)
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Остатки(&НачГраница, Организация = &Организация) КАК ОстаткиРасходов
	|ГДЕ
	|	ОстаткиРасходов.СуммаРасходовОстаток > 0
	|		ИЛИ ОстаткиРасходов.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Лизинг), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты))
	|		ИЛИ ТИПЗНАЧЕНИЯ(ОстаткиРасходов.ДокументВозникновенияРасходов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиРасходов.ДокументВозникновенияРасходов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|				И ОстаткиРасходов.ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты)
	|		ИНАЧЕ ОстаткиРасходов.ВидРасходов
	|	КОНЕЦ,
	|	ОстаткиРасходов.Организация,
	|	ОстаткиРасходов.СтатьяРасходов,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОстаткиОСиНМА
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиРасходов.Организация,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов,
	|	ОстаткиРасходов.СуммаРасходовНачальныйОстаток + ОстаткиРасходов.СуммаРасходовПриход,
	|	ОстаткиРасходов.НДСНачальныйОстаток + ОстаткиРасходов.НДСПриход,
	|	ОстаткиРасходов.СуммаОплатыНачальныйОстаток + ОстаткиРасходов.СуммаОплатыПриход,
	|	ОстаткиРасходов.ВидРасходов,
	|	ОстаткиРасходов.ЭлементРасходов,
	|	0,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ОстаткиРасходов.ПризнаноНачальныйОстаток + ОстаткиРасходов.ПризнаноПриход,
	|	ОстаткиРасходов.НеПризнаноНачальныйОстаток + ОстаткиРасходов.НеПризнаноПриход
	|ИЗ
	|	РегистрНакопления.РасходыПриУСНОСиНМА.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&НачДата, ГОД), &НачДата,,, Организация = &Организация) КАК ОстаткиРасходов
	|ГДЕ ОстаткиРасходов.СуммаРасходовКонечныйОстаток > 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОстаткиСтарогоМетода
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиРасходов.Организация,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов,
	|	ОстаткиРасходов.Партия,
	|	ОстаткиРасходов.СуммаРасходов,
	|	ОстаткиРасходов.НДС,
	|	ОстаткиРасходов.СуммаОплаты,
	|	ОстаткиРасходов.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	ОстаткиРасходов.СуммаОтгрузки,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|	ИСТИНА,
	|	0,
	|	0
	|ИЗ
	|	ОстаткиСтарогоМетода КАК ОстаткиРасходов";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область ВводНачальныхОстатковТекущегоПериода
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиРасходов.Организация,
	|	ОстаткиРасходов.ДокументВозникновенияРасходов,
	|	ОстаткиРасходов.Партия,
	|	ОстаткиРасходов.СуммаРасходов,
	|	ОстаткиРасходов.НДС,
	|	ОстаткиРасходов.СуммаОплаты,
	|	ОстаткиРасходов.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасходов,
	|	ОстаткиРасходов.СуммаОтгрузки,
	|	ОстаткиРасходов.СтатьяРасходов,
	|	ЛОЖЬ,
	|	ОстаткиРасходов.Признано,
	|	ОстаткиРасходов.НеПризнано
	|ИЗ
	|	ВтВводНачальныхОстатков КАК ОстаткиРасходов
	|ГДЕ
	|	НЕ ОстаткиРасходов.ВидОперации = ""СторноВНО""";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияРасходов,
	|	ВидРасходов,
	|	СтатьяРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОпределенияМатериалов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкладыУчетаМатериалов.Ссылка КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы) КАК ВидРасходов
	|ПОМЕСТИТЬ СкладыУчетаМатериалов
	|ИЗ
	|	Справочник.Склады КАК СкладыУчетаМатериалов
	|ГДЕ
	|	СкладыУчетаМатериалов.ЦеховаяКладовая
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокОтражения.АналитикаУчета КАК ГруппаФинансовогоУчета,
	|	ПорядокОтражения.МестоУчета КАК Склад,
	|	ВЫБОР
	|		КОГДА ПорядокОтражения.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		КОГДА ПорядокОтражения.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|	КОНЕЦ КАК ВидРасходов
	|ПОМЕСТИТЬ ВидыРасходовПорядкаОтражения
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтражения
	|ГДЕ
	|	ПорядокОтражения.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе)
	|	И ПорядокОтражения.Организация = &Организация
	|	И ПорядокОтражения.МестоУчета <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГруппаФинансовогоУчета,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокОтраженияПоАналитикеУчета.АналитикаУчета КАК ГруппаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПорядокОтраженияПоОрганизации.СчетУчета, ПорядокОтраженияПоАналитикеУчета.СчетУчета) В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС)
	|	КОНЕЦ КАК ВидРасходов
	|ПОМЕСТИТЬ ГруппыФинансовогоУчетаНеТовары
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияПоАналитикеУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияПоОрганизации
	|	ПО 
	|		ПорядокОтраженияПоОрганизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе)
	|		И ПорядокОтраженияПоОрганизации.Организация = &Организация
	|		И ПорядокОтраженияПоАналитикеУчета.АналитикаУчета = ПорядокОтраженияПоОрганизации.АналитикаУчета
	|		И ПорядокОтраженияПоОрганизации.МестоУчета = НЕОПРЕДЕЛЕНО
	|ГДЕ
	|	ПорядокОтраженияПоАналитикеУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе)
	|	И ПорядокОтраженияПоАналитикеУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ПорядокОтраженияПоАналитикеУчета.МестоУчета = НЕОПРЕДЕЛЕНО
	|	И ЕСТЬNULL(ПорядокОтраженияПоОрганизации.СчетУчета, ПорядокОтраженияПоАналитикеУчета.СчетУчета) В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГруппаФинансовогоУчета";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// При поступлении импортных товаров или сборке товаров, исходные документы поступления заменяются новыми (сборкой или
// таможенной декларацией) в партионном учете, что приводит к тому, что документ возникновения расходов один, а отгрузка
// уже прошла по другому. Для контроля таких случаев будем использовать таблицу, хранящую данные по документу
// возникновения расходов текущему и исходному, для правильной отработки алгоритма.
Функция ТекстЗапросаСоответствияДокументовВозникновенияРасходов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК НовыйДокументВозникновенияРасходов,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ДокументПоступления КАК ИсходныйДокументВозникновенияРасходов,
	|	0 КАК Сумма,
	|	0 КАК НДС
	|ПОМЕСТИТЬ СоответствиеДокументовВозникновенияРасходов
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Период < &КонДата
	|	И ДанныеРегистра.Организация = &Организация
	|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ДанныеРегистра.Партия,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Регистратор,
	|	0 КАК Сумма,
	|	0 КАК НДС
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Период <= &КонДата
	|	И ДанныеРегистра.Организация = &Организация 
	|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|	И ДанныеРегистра.Партия ССЫЛКА Документ.ПоступлениеТоваровНаСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПродукции.Номенклатура КАК Номенклатура,
	|	ДанныеРегистра.АналитикаУчетаПродукции.Характеристика КАК Характеристика,
	|	ДанныеРегистра.АналитикаУчетаПродукции.Серия КАК Серия,
	|	ДанныеРегистра.АналитикаУчетаПродукции.Назначение КАК Назначение,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ДокументПоступления,
	|	ДанныеРегистра.СтоимостьРегл КАК Сумма,
	|	ДанныеРегистра.НДСРегл КАК НДС
	|ИЗ
	|	РегистрНакопления.ПартииЗатратНаВыпуск КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Период < &КонДата
	|	И ДанныеРегистра.Организация = &Организация
	|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.СборкаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НовыйДокументВозникновенияРасходов,
	|	Номенклатура,
	|	Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// При реализации без перехода права собственности, исходные документы партии заменяются новыми (документом реализации)
// в детализации партий, что приводит к тому, что документ партии один, а отгрузка
// уже прошла по другому. Для контроля таких случаев будем использовать таблицу, хранящую данные по документу
// возникновения расходов текущему и исходному, для правильной отработки алгоритма.
Функция ТекстЗапросаПартийРеализацийБезПереходаПраваСобственности()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партии.Партия КАК ДокументРеализации
	|ПОМЕСТИТЬ РеализацииБезПереходаПраваСобственности
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН.ОстаткиИОбороты(&НачГраница, &КонГраница,,, Организация = &Организация И Партия ССЫЛКА Документ.РеализацияТоваровУслуг) КАК Партии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партии.Партия
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ОстаткиИОбороты(&НачГраница, &КонГраница,,, Организация = &Организация И Партия ССЫЛКА Документ.РеализацияТоваровУслуг) КАК Партии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партии.Партия
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&НачГраница, &КонГраница,,, Организация = &Организация И Партия ССЫЛКА Документ.РеализацияТоваровУслуг) КАК Партии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацииБезПереходаПраваСобственности.ДокументРеализации,
	|	Партии.Партия КАК Партия
	|ПОМЕСТИТЬ ВТПартииРеализацийБезПереходаПраваСобственности
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацииБезПереходаПраваСобственности КАК РеализацииБезПереходаПраваСобственности
	|		ПО Партии.КорПартия = РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.Партия КАК Партия,
	|	Партии.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(Партии.НДС) КАК НДС,
	|	СУММА(Партии.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	РеализацииБезПереходаПраваСобственности.ДокументРеализации КАК ДокументРеализации
	|ПОМЕСТИТЬ ПартииРеализацийБезПереходаПраваСобственности
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацииБезПереходаПраваСобственности КАК РеализацииБезПереходаПраваСобственности
	|		ПО Партии.Регистратор = РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|			И Партии.Партия <> РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Партия,
	|	Партии.ДокументПоступления,
	|	РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партии.Партия КАК Партия,
	|	Партии.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(Партии.НДС) КАК НДС,
	|	СУММА(Партии.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	РеализацииБезПереходаПраваСобственности.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацииБезПереходаПраваСобственности КАК РеализацииБезПереходаПраваСобственности
	|		ПО Партии.Регистратор = РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|			И Партии.Партия <> РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Партия,
	|	Партии.ДокументПоступления,
	|	РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацииБезПереходаПраваСобственности.Партия КАК Партия,
	|	Партии.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(Партии.НДС) КАК НДС,
	|	СУММА(Партии.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	РеализацииБезПереходаПраваСобственности.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	ВТСтоимостьПартийНДС КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПартииРеализацийБезПереходаПраваСобственности КАК РеализацииБезПереходаПраваСобственности
	|		ПО Партии.Регистратор = РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацииБезПереходаПраваСобственности.Партия,
	|	Партии.ДокументПоступления,
	|	РеализацииБезПереходаПраваСобственности.ДокументРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРеализации,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РеализацииБезПереходаПраваСобственности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПартииРеализацийБезПереходаПраваСобственности";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасходовПоСебестоимостиПредварительная()
	
	МассивТекстовЗапросов = Новый Массив;
	
	#Область ПартииТоваровОрганизаций
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партии.Организация КАК Организация,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Период КАК Период,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ЕСТЬ NULL
	|			И ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА ИсходныеДокументыВозникновенияРасходов.НДС
	|		ИНАЧЕ Партии.НДСРегл
	|	КОНЕЦ) КАК НДС,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ЕСТЬ NULL
	|			И ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА ИсходныеДокументыВозникновенияРасходов.Сумма
	|		ИНАЧЕ Партии.СтоимостьРегл
	|	КОНЕЦ) КАК Сумма,
	|	Партии.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|					И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Партии.СтоимостьРегл > 0
	|			ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Партии.СтоимостьРегл < 0
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И НЕ Партии.Регистратор = Партии.ДокументПоступления
	|			ТОГДА ""ДопРасходы""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ КАК ВидОперации,
	|	ЕСТЬNULL(СкладыУчетаМатериалов.ВидРасходов, ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))) КАК ВидРасходов,
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления) КАК Партия,
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления) КАК ДокументВозникновенияРасходов,
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(Партии.ВидЗапасов.НалогообложениеНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ Партии.НалогообложениеНДС
	|	КОНЕЦ КАК НалогообложениеНДС,
	|	Партии.СтатьяРасходовСписания КАК СтатьяРасходов,
	|	ЛОЖЬ КАК ДопРасход,
	|	ЛОЖЬ КАК Сторно
	|ПОМЕСТИТЬ ДанныеПоСебестоимостиПредварительные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыРасходовПорядкаОтражения КАК ВидыРасходовПорядкаОтражения
	|		ПО Партии.Номенклатура.ГруппаФинансовогоУчета = ВидыРасходовПорядкаОтражения.ГруппаФинансовогоУчета
	|			И Партии.АналитикаУчетаНоменклатуры.МестоХранения = ВидыРасходовПорядкаОтражения.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыФинансовогоУчетаНеТовары КАК ГруппыФинансовогоУчета
	|		ПО Партии.Номенклатура.ГруппаФинансовогоУчета = ГруппыФинансовогоУчета.ГруппаФинансовогоУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыУчетаМатериалов КАК СкладыУчетаМатериалов
	|		ПО Партии.АналитикаУчетаНоменклатуры.МестоХранения = СкладыУчетаМатериалов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеДокументовВозникновенияРасходов КАК ИсходныеДокументыВозникновенияРасходов
	|		ПО Партии.Организация = ИсходныеДокументыВозникновенияРасходов.Организация
	|			И Партии.ДокументПоступления = ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов
	|			И Партии.АналитикаУчетаНоменклатуры.Номенклатура = ИсходныеДокументыВозникновенияРасходов.Номенклатура
	|			И Партии.АналитикаУчетаНоменклатуры.Характеристика = ИсходныеДокументыВозникновенияРасходов.Характеристика
	|			И Партии.АналитикаУчетаНоменклатуры.Серия = ИсходныеДокументыВозникновенияРасходов.Серия
	|			И Партии.АналитикаУчетаНоменклатуры.Назначение = ИсходныеДокументыВозникновенияРасходов.Назначение
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачДата И &КонДата
	|	И Партии.Организация = &Организация
	|	И НЕ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	И НЕ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ВозвратМатериаловИзПроизводства
	//++ Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ВозвратСырьяОтПереработчика
	//-- Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.КорректировкаНазначенияТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.КорректировкаНалогообложенияНДСПартийТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.КорректировкаОбособленногоУчетаЗапасов
	|	И НЕ Партии.ДокументПоступления ССЫЛКА Документ.ОприходованиеИзлишковТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОСписании
	|	И НЕ Партии.ДокументПоступления ССЫЛКА Документ.ОтчетКомитентуОСписании
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании
	|	И НЕ Партии.ДокументПоступления ССЫЛКА Документ.ПересортицаТоваров
	|	И НЕ Партии.ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.СборкаТоваров
	|	И НЕ Партии.ДокументПоступления ССЫЛКА Документ.ВыпускПродукции
	|	И (НЕ Партии.Регистратор ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|		ИЛИ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов,
	|			ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура))) = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ВозвратСырьяДавальцу
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ПередачаДавальцу
	|	И НЕ Партии.ДокументПоступления ССЫЛКА Документ.ПоступлениеСырьяОтДавальца
	//-- Устарело_Переработка24

	//-- НЕ УТКА
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	Партии.Регистратор,
	|	Партии.Период,
	|	Партии.ХозяйственнаяОперация,
	|	ЕСТЬNULL(СкладыУчетаМатериалов.ВидРасходов, ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))),
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления),
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(Партии.ВидЗапасов.НалогообложениеНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ Партии.НалогообложениеНДС
	|		КОНЕЦ,
	|	Партии.СтатьяРасходовСписания,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|			ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления)
	|			ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|				И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Партии.СтоимостьРегл > 0
	|		ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И Партии.СтоимостьРегл < 0
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ Партии.Регистратор = Партии.ДокументПоступления
	|			ТОГДА ""ДопРасходы""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПартииРасходовНаСебестоимостьТоваров
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партии.Организация,
	|	Партии.Регистратор,
	|	Партии.Период,
	|	СУММА(Партии.НДСРегл),
	|	СУММА(Партии.СтоимостьРегл),
	|	ВЫБОР
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы)
	|		ИНАЧЕ Партии.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И Партии.Регистратор = Партии.ДокументПоступления
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И НЕ Партии.Регистратор = Партии.ДокументПоступления
	|			ТОГДА ""ДопРасходы""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Партии.СтоимостьРегл < 0
	|			ТОГДА ""ВозвратКлиента""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ,
	|	ЕСТЬNULL(СкладыУчетаМатериалов.ВидРасходов, ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))),
	|	ВЫБОР КОГДА Партии.ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступленияРасходов
	|		ИНАЧЕ Партии.ДокументПоступления КОНЕЦ,
	|	Партии.ДокументПоступленияРасходов,
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(Партии.ВидЗапасов.НалогообложениеНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ Партии.НалогообложениеНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовСписания,
	|	ИСТИНА КАК ДопРасход,
	|	ЛОЖЬ КАК Сторно
	|ИЗ
	|	РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыРасходовПорядкаОтражения КАК ВидыРасходовПорядкаОтражения
	|		ПО Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета = ВидыРасходовПорядкаОтражения.ГруппаФинансовогоУчета
	|			И Партии.АналитикаУчетаНоменклатуры.МестоХранения = ВидыРасходовПорядкаОтражения.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыФинансовогоУчетаНеТовары КАК ГруппыФинансовогоУчета
	|		ПО Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета = ГруппыФинансовогоУчета.ГруппаФинансовогоУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыУчетаМатериалов КАК СкладыУчетаМатериалов
	|		ПО Партии.АналитикаУчетаНоменклатуры.МестоХранения = СкладыУчетаМатериалов.Склад
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачДата И &КонДата
	|	И Партии.Организация = &Организация
	|	И (Партии.СтоимостьРегл <> 0 ИЛИ Партии.НДСРегл <> 0)
	|	И НЕ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	И НЕ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.АктВыполненныхРабот
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ВозвратМатериаловИзПроизводства
	//++ Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ВозвратСырьяОтПереработчика
	//-- Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.КорректировкаНазначенияТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.КорректировкаНалогообложенияНДСПартийТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.КорректировкаОбособленногоУчетаЗапасов
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.НачислениеОценочныхОбязательствПоОтпускам
	//++ Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика2_5
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ВыпускПродукции
	|		И НЕ Партии.Регистратор ССЫЛКА Документ.СчетФактураНалоговыйАгент
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.СчетФактураПолученныйНалоговыйАгент
	|	И (НЕ Партии.Регистратор ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|			ИЛИ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура))) = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы))
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ВозвратСырьяДавальцу
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетДавальцу
	|	И НЕ Партии.Регистратор ССЫЛКА Документ.ПередачаДавальцу
	//-- Устарело_Переработка24

	//-- НЕ УТКА
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	Партии.Регистратор,
	|	Партии.Период,
	|	ВЫБОР
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы)
	|		ИНАЧЕ Партии.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	ЕСТЬNULL(СкладыУчетаМатериалов.ВидРасходов, ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))),
	|	ВЫБОР КОГДА Партии.ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступленияРасходов
	|		ИНАЧЕ Партии.ДокументПоступления КОНЕЦ,
	|	Партии.ДокументПоступленияРасходов,
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(Партии.ВидЗапасов.НалогообложениеНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ Партии.НалогообложениеНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовСписания,

	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И Партии.Регистратор = Партии.ДокументПоступления
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И НЕ Партии.Регистратор = Партии.ДокументПоступления
	|			ТОГДА ""ДопРасходы""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Партии.СтоимостьРегл < 0
	|			ТОГДА ""ВозвратКлиента""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПартииТоваровПереданныеНаКомиссию
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партии.Организация,
	|	Партии.Регистратор,
	|	Партии.Период,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ЕСТЬ NULL
	|			И ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА ИсходныеДокументыВозникновенияРасходов.НДС
	|		ИНАЧЕ Партии.НДСРегл
	|	КОНЕЦ),
	|	СУММА(ВЫБОР
	|		КОГДА НЕ ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ЕСТЬ NULL
	|			И ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА ИсходныеДокументыВозникновенияРасходов.Сумма
	|		ИНАЧЕ Партии.СтоимостьРегл
	|	КОНЕЦ),
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомиссионера)
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями)
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОСписании
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомиссионераОСписании)
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациямиОСписании)
	|		ИНАЧЕ Партии.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	""Списание"",
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура),
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления),
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления),
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(Партии.ВидЗапасов.НалогообложениеНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ Партии.НалогообложениеНДС
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|	ЛОЖЬ КАК ДопРасход,
	|	ЛОЖЬ КАК Сторно
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеНаКомиссию КАК Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыРасходовПорядкаОтражения КАК ВидыРасходовПорядкаОтражения
	|		ПО Партии.Номенклатура.ГруппаФинансовогоУчета = ВидыРасходовПорядкаОтражения.ГруппаФинансовогоУчета
	|			И Партии.АналитикаУчетаНоменклатуры.МестоХранения = ВидыРасходовПорядкаОтражения.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыФинансовогоУчетаНеТовары КАК ГруппыФинансовогоУчета
	|		ПО Партии.Номенклатура.ГруппаФинансовогоУчета = ГруппыФинансовогоУчета.ГруппаФинансовогоУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыУчетаМатериалов КАК СкладыУчетаМатериалов
	|		ПО Партии.АналитикаУчетаНоменклатуры.МестоХранения = СкладыУчетаМатериалов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеДокументовВозникновенияРасходов КАК ИсходныеДокументыВозникновенияРасходов
	|		ПО Партии.Организация = ИсходныеДокументыВозникновенияРасходов.Организация
	|			И Партии.ДокументПоступления = ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов
	|			И Партии.АналитикаУчетаНоменклатуры.Номенклатура = ИсходныеДокументыВозникновенияРасходов.Номенклатура
	|			И Партии.АналитикаУчетаНоменклатуры.Характеристика = ИсходныеДокументыВозникновенияРасходов.Характеристика
	|			И Партии.АналитикаУчетаНоменклатуры.Серия = ИсходныеДокументыВозникновенияРасходов.Серия
	|			И Партии.АналитикаУчетаНоменклатуры.Назначение = ИсходныеДокументыВозникновенияРасходов.Назначение
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачДата И &КонДата
	|	И Партии.Организация = &Организация
	|	И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И ЕСТЬNULL(СкладыУчетаМатериалов.ВидРасходов, ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))) = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	Партии.Регистратор,
	|	Партии.Период,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомиссионера)
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями)
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОСписании
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомиссионераОСписании)
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациямиОСписании)
	|		ИНАЧЕ Партии.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления),
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(Партии.ВидЗапасов.НалогообложениеНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ Партии.НалогообложениеНДС
	|	КОНЕЦ";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ДетализацияПартийТоваровДляНДСиУСН
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партии.Организация КАК Организация,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Период КАК Период,
	|	СУММА(Партии.НДС) КАК НДС,
	|	СУММА(Партии.СтоимостьБезНДС) КАК Сумма,
	|	Партии.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт ИЛИ Партии.ДокументИсточник ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Партии.Сторно
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|					И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Партии.СтоимостьБезНДС > 0
	|			ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Партии.СтоимостьБезНДС < 0 И НЕ Партии.Сторно ИЛИ Партии.СтоимостьБезНДС > 0 И Партии.Сторно)
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.Партия
	|			ИЛИ Партии.Партия = Неопределено И Партии.Регистратор = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
	|			ИЛИ Партии.Сторно И (Партии.ДокументИсточник = Партии.Партия ИЛИ Партии.Партия = Неопределено
	|				И Партии.ДокументИсточник = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)))
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат И Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ИЛИ Партии.Сторно И Партии.ДокументИсточник ССЫЛКА Документ.КорректировкаПриобретения)
	|			ТОГДА ""ДопРасходы""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	//++ Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение) ИЛИ НЕ СкладыУчетаМатериалов.Склад ЕСТЬ NULL
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		КОГДА ВЫРАЗИТЬ(Партии.СтатьяРасходовАктивов КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ТИПЗНАЧЕНИЯ(Партии.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|			ТОГДА Партии.АналитикаРасходов
	|		ИНАЧЕ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))
	|	КОНЕЦ КАК ВидРасходов,
	|	ВЫБОР
	|		КОГДА Партии.Партия = НЕОПРЕДЕЛЕНО ИЛИ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступления
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия))
	|	КОНЕЦ КАК Партия,
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления) КАК ДокументВозникновенияРасходов,
	|	ВЫБОР
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА Партии.ВидДеятельностиНДС
	|	ИНАЧЕ Партии.КорВидДеятельностиНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовАктивов,
	|	Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			И НЕ ТИПЗНАЧЕНИЯ(Партии.Партия) В (
	//++ Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика),
	//-- Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика2_5))
	|		ИЛИ (Партии.Партия <> НЕОПРЕДЕЛЕНО
	|			И НЕ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|			И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) <> Партии.ДокументПоступления) КАК ДопРасход,
	|	Партии.Сторно
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВидыРасходовПорядкаОтражения КАК ВидыРасходовПорядкаОтражения
	|	ПО Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета = ВидыРасходовПорядкаОтражения.ГруппаФинансовогоУчета
	|		И Партии.АналитикаУчетаНоменклатуры.МестоХранения = ВидыРасходовПорядкаОтражения.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГруппыФинансовогоУчетаНеТовары КАК ГруппыФинансовогоУчета
	|	ПО Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета = ГруппыФинансовогоУчета.ГруппаФинансовогоУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ СкладыУчетаМатериалов КАК СкладыУчетаМатериалов
	|	ПО Партии.АналитикаУчетаНоменклатуры.МестоХранения = СкладыУчетаМатериалов.Склад
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО Партии.АналитикаУчетаНоменклатуры.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПартииРеализацийБезПереходаПраваСобственности КАК ПартииРеализацийБезПереходаПраваСобственности
	|	ПО Партии.Партия = ПартииРеализацийБезПереходаПраваСобственности.ДокументРеализации
	|		И Партии.ДокументПоступления = ПартииРеализацийБезПереходаПраваСобственности.ДокументПоступления
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеДокументовВозникновенияРасходов КАК ИсходныеДокументыВозникновенияРасходов
	|	ПО Партии.Организация = ИсходныеДокументыВозникновенияРасходов.Организация
	|		И Партии.ДокументПоступления = ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия)
	|		И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		И Партии.ДокументПоступления = ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов
	|		И Партии.АналитикаУчетаНоменклатуры.Номенклатура = ИсходныеДокументыВозникновенияРасходов.Номенклатура
	|		И Партии.АналитикаУчетаНоменклатуры.Характеристика = ИсходныеДокументыВозникновенияРасходов.Характеристика
	|		И Партии.АналитикаУчетаНоменклатуры.Серия = ИсходныеДокументыВозникновенияРасходов.Серия
	|		И Партии.АналитикаУчетаНоменклатуры.Назначение = ИсходныеДокументыВозникновенияРасходов.Назначение
	|
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачДата И &КонДата
	|	И Партии.Организация = &Организация
	|	И НЕ Партии.ХозяйственнаяОперация В (&ИсключающиесяХозОперацииСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ИсключающиесяРегистраторыСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.Партия) В (&ИсключающиесяДокументыПартийСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.ДокументПоступления) В (&ИсключающиесяДокументыПоступленияСебестоимости)
	|	И Партии.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение)
	|	И (НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	//++ Устарело_Переработка24
	|		И НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|		ИЛИ Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходы) И Партии.Регистратор = Партии.ДокументИсточник)
	|	И (Партии.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|		ИЛИ НЕ ПартииРеализацийБезПереходаПраваСобственности.Партия ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	Партии.Регистратор,
	|	Партии.Период,
	|	Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			И НЕ ТИПЗНАЧЕНИЯ(Партии.Партия) В (
	//++ Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика),
	//-- Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика2_5))
	|		ИЛИ (Партии.Партия <> НЕОПРЕДЕЛЕНО
	|			И НЕ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|			И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) <> Партии.ДокументПоступления),
	|	Партии.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	//++ Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение) ИЛИ НЕ СкладыУчетаМатериалов.Склад ЕСТЬ NULL
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		КОГДА ВЫРАЗИТЬ(Партии.СтатьяРасходовАктивов КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ТИПЗНАЧЕНИЯ(Партии.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|			ТОГДА Партии.АналитикаРасходов
	|		ИНАЧЕ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Партии.Партия = НЕОПРЕДЕЛЕНО ИЛИ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступления
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия))
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления),
	|	ВЫБОР
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА Партии.ВидДеятельностиНДС
	|		ИНАЧЕ Партии.КорВидДеятельностиНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовАктивов,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт ИЛИ Партии.ДокументИсточник ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Партии.Сторно
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|					И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Партии.СтоимостьБезНДС > 0
	|			ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Партии.СтоимостьБезНДС < 0 И НЕ Партии.Сторно ИЛИ Партии.СтоимостьБезНДС > 0 И Партии.Сторно)
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.Партия
	|			ИЛИ Партии.Партия = Неопределено И Партии.Регистратор = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
	|			ИЛИ Партии.Сторно И (Партии.ДокументИсточник = Партии.Партия ИЛИ Партии.Партия = Неопределено
	|				И Партии.ДокументИсточник = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)))
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат И Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ИЛИ Партии.Сторно И Партии.ДокументИсточник ССЫЛКА Документ.КорректировкаПриобретения)
	|			ТОГДА ""ДопРасходы""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ,
	|	Партии.Сторно";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ДетализацияПартийТоваровДляНДСиУСН2_4
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партии.Организация КАК Организация,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Период КАК Период,
	|	СУММА(ЕСТЬNULL(СебестоимостьТоваров.НДСРегл, Партии.НДС)) КАК НДС,
	|	СУММА(ЕСТЬNULL(СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл - 
	|		ВЫБОР КОГДА СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|			ИЛИ СебестоимостьТоваров.ВидДеятельностиНДС В (&ТипыНеОблагаемыеНДС)
	|		ТОГДА СебестоимостьТоваров.НДСРегл ИНАЧЕ 0 КОНЕЦ, Партии.СтоимостьБезНДС)) КАК Сумма,
	|	Партии.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт ИЛИ Партии.ДокументИсточник ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Партии.Сторно
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|					И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Партии.СтоимостьБезНДС > 0
	|			ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Партии.СтоимостьБезНДС < 0 И НЕ Партии.Сторно ИЛИ Партии.СтоимостьБезНДС > 0 И Партии.Сторно)
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.Партия
	|			И НЕ (Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	//++ Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика2_5)
	|			ИЛИ Партии.Партия = Неопределено И Партии.Регистратор = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
	|			ИЛИ Партии.Сторно И (Партии.ДокументИсточник = Партии.Партия ИЛИ Партии.Партия = Неопределено
	|				И Партии.ДокументИсточник = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)))
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.ДокументПоступления
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.КорректировкаПриобретения ИЛИ Партии.Сторно И Партии.ДокументИсточник = Партии.ДокументПоступления
	|			ИЛИ Партии.Сторно И Партии.ДокументИсточник ССЫЛКА Документ.КорректировкаПриобретения)
	|			ТОГДА ""ДопРасходы""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	//++ Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОГДА НЕ Аналитика.МестоХранения ЕСТЬ NULL И Аналитика.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение) ИЛИ НЕ СкладыУчетаМатериалов.Склад ЕСТЬ NULL
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		КОГДА ВЫРАЗИТЬ(Партии.СтатьяРасходовАктивов КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ТИПЗНАЧЕНИЯ(Партии.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|			ТОГДА Партии.АналитикаРасходов
	|		ИНАЧЕ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))
	|	КОНЕЦ КАК ВидРасходов,
	|	ВЫБОР
	|		КОГДА Партии.Партия = НЕОПРЕДЕЛЕНО ИЛИ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступления
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия))
	|	КОНЕЦ КАК Партия,
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления) КАК ДокументВозникновенияРасходов,
	|	ВЫБОР
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА Партии.ВидДеятельностиНДС
	|		ИНАЧЕ Партии.КорВидДеятельностиНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовАктивов,
	|	Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			И НЕ ТИПЗНАЧЕНИЯ(Партии.Партия) В (
	//++ Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика),
	//-- Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика2_5))
	|		ИЛИ (Партии.Партия <> НЕОПРЕДЕЛЕНО
	|			И НЕ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|			И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) <> Партии.ДокументПоступления) КАК ДопРасход,
	|	Партии.Сторно
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 КАК Партии
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ПО Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Партии.Регистратор = СебестоимостьТоваров.Регистратор
	|		И Партии.Организация = СебестоимостьТоваров.Организация
	|		И Партии.ВидДвижения = СебестоимостьТоваров.ВидДвижения
	|		И Партии.Партия = СебестоимостьТоваров.Партия
	|		И ВЫБОР
	|			КОГДА Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика2_5
	//++ Устарело_Переработка24
	|				ИЛИ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|				ТОГДА Партии.ДокументИсточник = СебестоимостьТоваров.ДокументИсточник
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		И (Партии.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|			ИЛИ Партии.АналитикаУчетаПартий = СебестоимостьТоваров.АналитикаУчетаПартий)
	|		И Партии.ВидДеятельностиНДС = СебестоимостьТоваров.ВидДеятельностиНДС
	|		И (Партии.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ Партии.Номенклатура = СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура)
	|		И (Партии.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ Партии.Характеристика = СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Характеристика)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО (ЕСТЬNULL(СебестоимостьТоваров.АналитикаУчетаНоменклатуры, Партии.КорАналитикаУчетаНоменклатуры) = Аналитика.Ссылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВидыРасходовПорядкаОтражения КАК ВидыРасходовПорядкаОтражения
	|	ПО ЕСТЬNULL(Аналитика.Номенклатура.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) = ВидыРасходовПорядкаОтражения.ГруппаФинансовогоУчета
	|		И ЕСТЬNULL(Аналитика.МестоХранения, НЕОПРЕДЕЛЕНО) = ВидыРасходовПорядкаОтражения.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГруппыФинансовогоУчетаНеТовары КАК ГруппыФинансовогоУчета
	|	ПО Аналитика.Номенклатура.ГруппаФинансовогоУчета = ГруппыФинансовогоУчета.ГруппаФинансовогоУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ СкладыУчетаМатериалов КАК СкладыУчетаМатериалов
	|	ПО ЕСТЬNULL(Аналитика.МестоХранения, НЕОПРЕДЕЛЕНО) = СкладыУчетаМатериалов.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ЕСТЬNULL(Аналитика.Номенклатура.ВидНоменклатуры, НЕОПРЕДЕЛЕНО) = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПартииРеализацийБезПереходаПраваСобственности КАК ПартииРеализацийБезПереходаПраваСобственности
	|	ПО Партии.Партия = ПартииРеализацийБезПереходаПраваСобственности.ДокументРеализации
	|		И Партии.ДокументПоступления = ПартииРеализацийБезПереходаПраваСобственности.ДокументПоступления
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеДокументовВозникновенияРасходов КАК ИсходныеДокументыВозникновенияРасходов
	|	ПО Партии.Организация = ИсходныеДокументыВозникновенияРасходов.Организация
	|		И Партии.ДокументПоступления = ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия)
	|		И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|		И Партии.ДокументПоступления = ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов
	|		И Аналитика.Номенклатура = ИсходныеДокументыВозникновенияРасходов.Номенклатура
	|		И Аналитика.Характеристика = ИсходныеДокументыВозникновенияРасходов.Характеристика
	|		И Аналитика.Серия = ИсходныеДокументыВозникновенияРасходов.Серия
	|		И Аналитика.Назначение = ИсходныеДокументыВозникновенияРасходов.Назначение
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачДата И &КонДата
	|	И Партии.Организация = &Организация
	|	И НЕ Партии.ХозяйственнаяОперация В (&ИсключающиесяХозОперацииСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ИсключающиесяРегистраторыСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.Партия) В (&ИсключающиесяДокументыПартийСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.ДокументПоступления) В (&ИсключающиесяДокументыПоступленияСебестоимости)
	|	И Партии.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение)
	|	И (НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	//++ Устарело_Переработка24
	|		И НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|		ИЛИ Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходы) И Партии.Регистратор = Партии.ДокументИсточник)
	|	И (Партии.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|		ИЛИ НЕ ПартииРеализацийБезПереходаПраваСобственности.Партия ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	Партии.Регистратор,
	|	Партии.Период,
	|	Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			И НЕ ТИПЗНАЧЕНИЯ(Партии.Партия) В (
	//++ Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика),
	//-- Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика2_5))
	|		ИЛИ (Партии.Партия <> НЕОПРЕДЕЛЕНО
	|			И НЕ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|			И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) <> Партии.ДокументПоступления),
	|	Партии.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В
	|					(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	//++ Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОГДА НЕ Аналитика.МестоХранения ЕСТЬ NULL И Аналитика.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|			ИЛИ НЕ СкладыУчетаМатериалов.Склад ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		КОГДА ВЫРАЗИТЬ(Партии.СтатьяРасходовАктивов КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ТИПЗНАЧЕНИЯ(Партии.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|			ТОГДА Партии.АналитикаРасходов
	|		ИНАЧЕ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Партии.Партия = НЕОПРЕДЕЛЕНО ИЛИ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступления
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия))
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления),
	|	ВЫБОР
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА Партии.ВидДеятельностиНДС
	|		ИНАЧЕ Партии.КорВидДеятельностиНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовАктивов,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт ИЛИ Партии.ДокументИсточник ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Партии.Сторно
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления)
	|				ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|					И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Партии.СтоимостьБезНДС > 0
	|			ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Партии.СтоимостьБезНДС < 0 И НЕ Партии.Сторно ИЛИ Партии.СтоимостьБезНДС > 0 И Партии.Сторно)
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.Партия
	|			И НЕ (Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	//++ Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика2_5)
	|			ИЛИ Партии.Партия = Неопределено И Партии.Регистратор = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
	|			ИЛИ Партии.Сторно И (Партии.ДокументИсточник = Партии.Партия ИЛИ Партии.Партия = Неопределено
	|				И Партии.ДокументИсточник = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)))
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.ДокументПоступления
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.КорректировкаПриобретения ИЛИ Партии.Сторно И Партии.ДокументИсточник = Партии.ДокументПоступления
	|			ИЛИ Партии.Сторно И Партии.ДокументИсточник ССЫЛКА Документ.КорректировкаПриобретения)
	|			ТОГДА ""ДопРасходы""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ,
	|	ВЫБОР КОГДА Партии.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) И НЕ Партии.Партия ССЫЛКА Документ.СборкаТоваров ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|	Партии.Сторно";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ДетализацияСебестоимостиТоваров
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партии.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ПоступлениеТоваровНаСклад
	|			ТОГДА ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.Регистратор)
	|		ИНАЧЕ Партии.Регистратор
	|	КОНЕЦ КАК Регистратор,
	|	Партии.Период КАК Период,
	|	СУММА(Партии.НДС) КАК НДС,
	|	СУММА(Партии.СтоимостьБезНДС) КАК Сумма,
	|	Партии.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт ИЛИ Партии.ДокументИсточник ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Партии.Сторно
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПриобретенияПрошлогоПериода))
	|			ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|				И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Партии.СтоимостьБезНДС > 0
	|			ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|				И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И Партии.СтоимостьБезНДС < 0
	|			ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Партии.СтоимостьБезНДС < 0 И НЕ Партии.Сторно ИЛИ Партии.СтоимостьБезНДС > 0 И Партии.Сторно)
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.Партия
	|			И НЕ (Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	//++ Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика2_5)
	|			ИЛИ Партии.Партия = Неопределено И Партии.Регистратор = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
	|			ИЛИ Партии.Сторно И (Партии.ДокументИсточник = Партии.Партия ИЛИ Партии.Партия = Неопределено
	|				И Партии.ДокументИсточник = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)))
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат И Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			ИЛИ Партии.Сторно И Партии.ДокументИсточник ССЫЛКА Документ.КорректировкаПриобретения)
	|			ТОГДА ""ДопРасходы""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	//++ Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОГДА НЕ Аналитика.МестоХранения ЕСТЬ NULL И Аналитика.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение) ИЛИ НЕ СкладыУчетаМатериалов.Склад ЕСТЬ NULL
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		КОГДА ВЫРАЗИТЬ(Партии.СтатьяРасходовСписания КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ТИПЗНАЧЕНИЯ(Партии.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|			ТОГДА Партии.АналитикаРасходов
	|       КОГДА Партии.Регистратор ССЫЛКА Документ.ПроизводствоБезЗаказа  
	|       	ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)	
	|		ИНАЧЕ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))
	|	КОНЕЦ КАК ВидРасходов,
	|	ВЫБОР
	|		КОГДА Партии.Партия = НЕОПРЕДЕЛЕНО ИЛИ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступления
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия))
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	// Корректировка в сторону уменьшения - всегда возврат, а значит ДокументВозникновенияРасхода должен соответстовать партии
	|		КОГДА Партии.Регистратор Ссылка Документ.КорректировкаПриобретения И Партии.СтоимостьБезНДС > 0 И Партии.Регистратор <> Партии.Партия
	|		ТОГДА Партии.Регистратор
	// Корректировка в сторону увеличения - доп. расходы, чтобы можно было искать оплату по ней, а значит ДокументВозникновенияРасхода должен соответстовать самой корректировке.
	|		КОГДА Партии.Регистратор Ссылка Документ.КорректировкаПриобретения
	|		ТОГДА Партии.Партия
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления)
	|	КОНЕЦ КАК ДокументВозникновенияРасходов,
	|	ВЫБОР
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА Партии.ВидДеятельностиНДС
	|		ИНАЧЕ Партии.КорВидДеятельностиНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовСписания,
	|	Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	//++ Устарело_Переработка24
	|		И НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|		И НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ИЛИ (Партии.Партия <> НЕОПРЕДЕЛЕНО И НЕ Партии.Партия ССЫЛКА Документ.СборкаТоваров И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) <> Партии.ДокументПоступления)
	|		ИЛИ Партии.Регистратор Ссылка Документ.КорректировкаПриобретения И Партии.СтоимостьБезНДС > 0 И Партии.Регистратор <> Партии.Партия КАК ДопРасход,
	|	Партии.Сторно
	|ИЗ
	|	ВТСтоимостьПартийНДС КАК Партии
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО Партии.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВидыРасходовПорядкаОтражения КАК ВидыРасходовПорядкаОтражения
	|	ПО ЕСТЬNULL(Аналитика.Номенклатура.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) = ВидыРасходовПорядкаОтражения.ГруппаФинансовогоУчета
	|		И ЕСТЬNULL(Аналитика.МестоХранения, НЕОПРЕДЕЛЕНО) = ВидыРасходовПорядкаОтражения.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГруппыФинансовогоУчетаНеТовары КАК ГруппыФинансовогоУчета
	|	ПО Аналитика.Номенклатура.ГруппаФинансовогоУчета = ГруппыФинансовогоУчета.ГруппаФинансовогоУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ СкладыУчетаМатериалов КАК СкладыУчетаМатериалов
	|	ПО ЕСТЬNULL(Аналитика.МестоХранения, НЕОПРЕДЕЛЕНО) = СкладыУчетаМатериалов.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ЕСТЬNULL(Аналитика.Номенклатура.ВидНоменклатуры, НЕОПРЕДЕЛЕНО) = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПартииРеализацийБезПереходаПраваСобственности КАК ПартииРеализацийБезПереходаПраваСобственности
	|	ПО Партии.Партия = ПартииРеализацийБезПереходаПраваСобственности.ДокументРеализации
	|		И Партии.ДокументПоступления = ПартииРеализацийБезПереходаПраваСобственности.ДокументПоступления
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеДокументовВозникновенияРасходов КАК ИсходныеДокументыВозникновенияРасходов
	|	ПО Партии.Организация = ИсходныеДокументыВозникновенияРасходов.Организация
	|		И Партии.ДокументПоступления = ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия)
	|		И ТИПЗНАЧЕНИЯ(ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия)) В ( ТИП(Документ.ТаможеннаяДекларацияИмпорт), ТИП(Документ.ПоступлениеТоваровНаСклад))
	|		И Партии.ДокументПоступления = ИсходныеДокументыВозникновенияРасходов.НовыйДокументВозникновенияРасходов
	|		И Аналитика.Номенклатура = ИсходныеДокументыВозникновенияРасходов.Номенклатура
	|		И Аналитика.Характеристика = ИсходныеДокументыВозникновенияРасходов.Характеристика
	|		И Аналитика.Серия = ИсходныеДокументыВозникновенияРасходов.Серия
	|		И Аналитика.Назначение = ИсходныеДокументыВозникновенияРасходов.Назначение
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачДата И &КонДата
	|	И Партии.Организация = &Организация
	|	И НЕ Партии.ХозяйственнаяОперация В (&ИсключающиесяХозОперацииСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ИсключающиесяРегистраторыСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.Партия) В (&ИсключающиесяДокументыПартийСебестоимости)
	|	И НЕ ТИПЗНАЧЕНИЯ(Партии.ДокументПоступления) В (&ИсключающиесяДокументыПоступленияСебестоимости)
	|	И Партии.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение)
	|	И (Партии.ДокументИсточник = НЕОПРЕДЕЛЕНО
	//++ Устарело_Переработка24
	|		ИЛИ НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|		ИЛИ НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ИЛИ ЛОЖЬ)
	|	И (Партии.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|		ИЛИ НЕ ПартииРеализацийБезПереходаПраваСобственности.Партия ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ПоступлениеТоваровНаСклад
	|			ТОГДА ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.Регистратор)
	|		ИНАЧЕ Партии.Регистратор
	|	КОНЕЦ,
	|	Партии.Период,
	|	Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	//++ Устарело_Переработка24
	|		И НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|		И НЕ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ИЛИ (Партии.Партия <> НЕОПРЕДЕЛЕНО И НЕ Партии.Партия ССЫЛКА Документ.СборкаТоваров И ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия) <> Партии.ДокументПоступления)
	|		ИЛИ Партии.Регистратор Ссылка Документ.КорректировкаПриобретения И Партии.СтоимостьБезНДС > 0 И Партии.Регистратор <> Партии.Партия,
	|	Партии.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	//++ Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			ИЛИ Партии.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОГДА НЕ Аналитика.МестоХранения ЕСТЬ NULL И Аналитика.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение) ИЛИ НЕ СкладыУчетаМатериалов.Склад ЕСТЬ NULL
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		КОГДА ВЫРАЗИТЬ(Партии.СтатьяРасходовСписания КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ТИПЗНАЧЕНИЯ(Партии.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|			ТОГДА Партии.АналитикаРасходов
	|       КОГДА Партии.Регистратор ССЫЛКА Документ.ПроизводствоБезЗаказа  
	|       	ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)	
	|		ИНАЧЕ ЕСТЬNULL(ВидыРасходовПорядкаОтражения.ВидРасходов, ЕСТЬNULL(ГруппыФинансовогоУчета.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Партии.Партия = НЕОПРЕДЕЛЕНО ИЛИ Партии.Партия ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Партии.ДокументПоступления
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, ЕСТЬNULL(ПартииРеализацийБезПереходаПраваСобственности.Партия, Партии.Партия))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор Ссылка Документ.КорректировкаПриобретения И Партии.СтоимостьБезНДС > 0 И Партии.Регистратор <> Партии.Партия
	|		ТОГДА Партии.Регистратор
	|		КОГДА Партии.Регистратор Ссылка Документ.КорректировкаПриобретения
	|		ТОГДА Партии.Партия
	|		ИНАЧЕ ЕСТЬNULL(ИсходныеДокументыВозникновенияРасходов.ИсходныйДокументВозникновенияРасходов, Партии.ДокументПоступления)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА Партии.ВидДеятельностиНДС
	|		ИНАЧЕ Партии.КорВидДеятельностиНДС
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовСписания,
	|	ВЫБОР
	|		КОГДА Партии.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт ИЛИ Партии.ДокументИсточник ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Партии.Сторно
	|			ТОГДА ""Таможня""
	|		КОГДА Партии.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноПоступления),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПриобретенияПрошлогоПериода))
	|			ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|					И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Партии.СтоимостьБезНДС > 0
	|			ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|				И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И Партии.СтоимостьБезНДС < 0
	|			ТОГДА ""ВозвратПоставщику""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Партии.СтоимостьБезНДС < 0 И НЕ Партии.Сторно ИЛИ Партии.СтоимостьБезНДС > 0 И Партии.Сторно)
	|			ТОГДА ""ВозвратКлиента""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор = Партии.Партия
	|			И НЕ (Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	//++ Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика
	//-- Устарело_Переработка24
	|			И НЕ Партии.Регистратор ССЫЛКА Документ.ОтчетПереработчика2_5)
	|			ИЛИ Партии.Партия = Неопределено И Партии.Регистратор = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
	|			ИЛИ Партии.Сторно И (Партии.ДокументИсточник = Партии.Партия ИЛИ Партии.Партия = Неопределено
	|				И Партии.ДокументИсточник = Партии.ДокументПоступления И Партии.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)))
	|			ТОГДА ""Приход""
	|		КОГДА Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (Партии.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат И Партии.ТипЗаписи В (&ТипыЗаписейСебестоимостиДопРасходов)
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ИЛИ Партии.Регистратор ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			ИЛИ Партии.Сторно И Партии.ДокументИсточник ССЫЛКА Документ.КорректировкаПриобретения)
	|			ТОГДА ""ДопРасходы""
	|		ИНАЧЕ ""Списание""
	|	КОНЕЦ,
	|	Партии.Сторно";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасходовПоСебестоимости()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Данные.Организация КАК Организация,
	|	Данные.Регистратор,
	|	Данные.Период КАК Период,
	|	СУММА(ВЫБОР КОГДА Данные.ВидОперации = ""ВозвратПоставщику"" И Данные.НДС > 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * Данные.НДС) КАК НДС,
	|	СУММА(ВЫБОР КОГДА Данные.ВидОперации = ""ВозвратПоставщику"" И Данные.Сумма > 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * (Данные.Сумма + Данные.НДС)) КАК Сумма,
	|	ВЫБОР
	|		КОГДА Данные.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимость)
	|			И Данные.Регистратор ССЫЛКА Документ.ПриобретениеУслугПрочихАктивов
	|		ТОГДА ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.ПриобретениеУслугПрочихАктивов).ХозяйственнаяОперация
	|		ИНАЧЕ Данные.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	Данные.ВидОперации,
	|	ВЫБОР
	|		КОГДА Данные.ДокументВозникновенияРасходов ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Данные.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|		КОГДА Данные.ДокументВозникновенияРасходов ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт И Данные.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы)
	|		КОГДА Данные.ДопРасход И Данные.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|		КОГДА Данные.ДопРасход И Данные.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы)
	|		КОГДА НЕ Данные.ВидРасходов ССЫЛКА Перечисление.ВидыРасходовУСН
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС)
	|		ИНАЧЕ Данные.ВидРасходов
	|	КОНЕЦ КАК ВидРасходов,
	|	ВЫБОР КОГДА НЕ Данные.ВидРасходов ССЫЛКА Перечисление.ВидыРасходовУСН
	|		ТОГДА Данные.ВидРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЭлементРасходов,
	|	Данные.Партия КАК Партия,
	|	Данные.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ВЫБОР
	|		КОГДА Данные.ВидОперации В (""Списание"", ""ВозвратКлиента"") И НЕ Данные.Регистратор ССЫЛКА Документ.РасчетСебестоимостиТоваров
	|			ТОГДА ЕСТЬNULL(СтатьиРасходов.Ссылка, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА Данные.НалогообложениеНДС В (&ТипыОсобогоНалогообложения)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА Данные.ВидОперации В (""Списание"", ""ВозвратКлиента"")
	|		ТОГДА ЕСТЬNULL(СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА Данные.ВидОперации В (""ВозвратКлиента"")
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(СтатьиРасходов.ПризнаватьРасходамиПриУСН, ИСТИНА)
	|	КОНЕЦ КАК ПризнаватьРасходамиПриУСН,
	|	Данные.Сторно КАК Сторно
	|ПОМЕСТИТЬ ДанныеПоСебестоимости
	|ИЗ
	|	ДанныеПоСебестоимостиПредварительные КАК Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО СтатьиРасходов.Ссылка = Данные.СтатьяРасходов
	|ГДЕ
	|	(Данные.ВидОперации <> ""Списание""
	|	ИЛИ Данные.ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги))
	|	И НЕ (Данные.Партия ССЫЛКА Документ.ОтчетПереработчика2_5
	|		И Данные.ДопРасход)
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ДокументВозникновенияРасходов,
	|	Данные.ВидОперации,
	|	ВЫБОР
	|		КОГДА Данные.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимость)
	|			И Данные.Регистратор ССЫЛКА Документ.ПриобретениеУслугПрочихАктивов
	|		ТОГДА ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.ПриобретениеУслугПрочихАктивов).ХозяйственнаяОперация
	|		ИНАЧЕ Данные.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	Данные.ДопРасход,
	|	Данные.ВидРасходов,
	|	Данные.Партия,
	|	Данные.Регистратор,
	|	Данные.Период,
	|	Данные.Организация,
	|	ВЫБОР
	|		КОГДА Данные.НалогообложениеНДС В (&ТипыОсобогоНалогообложения)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА Данные.ВидОперации В (""Списание"", ""ВозвратКлиента"")
	|		ТОГДА ЕСТЬNULL(СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Данные.ВидОперации В (""ВозвратКлиента"")
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(СтатьиРасходов.ПризнаватьРасходамиПриУСН, ИСТИНА)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Данные.ВидОперации В (""Списание"", ""ВозвратКлиента"") И НЕ Данные.Регистратор ССЫЛКА Документ.РасчетСебестоимостиТоваров
	|			ТОГДА ЕСТЬNULL(СтатьиРасходов.Ссылка, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ,
	|	Данные.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияРасходов,
	|	Период";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПрочихРасходов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ХозяйственнаяОперация,
	|	ВложенныйЗапрос.СтатьяРасходов,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.НДС) КАК НДС,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации ИЛИ ВложенныйЗапрос.ВидРасходов ССЫЛКА Справочник.ОбъектыСтроительства
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС)
	|		КОГДА ВложенныйЗапрос.ВидРасходов ССЫЛКА Справочник.НематериальныеАктивы
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА)
	|		ИНАЧЕ ВложенныйЗапрос.ВидРасходов
	|	КОНЕЦ КАК ВидРасходов,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ВидРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|		ТОГДА ВложенныйЗапрос.ВидРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЭлементРасходов,
	|	ВложенныйЗапрос.ВидОперации,
	|	ВложенныйЗапрос.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ВложенныйЗапрос.ВидДеятельности,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.Сторно КАК Сторно
	|ПОМЕСТИТЬ ПрочиеРасходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор,
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяРасходов,
	|		ДанныеРегистра.СуммаРеглОборот КАК Сумма,
	|		ДанныеРегистра.СуммаНДСРеглОборот КАК НДС,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги) КАК ВидРасходов,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КомиссияПоЭквайрингу),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеНедостачиПриИнвентаризацииДенежныхСредств))
	|				ТОГДА ""РасходПриОплате""
	|			КОГДА ДанныеРегистра.СуммаРеглОборот < 0 И ДокСторно.Ссылка ЕСТЬ NULL
	|					ИЛИ ДанныеРегистра.СуммаРеглОборот > 0 И НЕ ДокСторно.Ссылка ЕСТЬ NULL
	|				ТОГДА ""ВозвратПоставщику""
	|			ИНАЧЕ ""Приход""
	|		КОНЕЦ КАК ВидОперации,
	|		ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) КАК ДокументВозникновенияРасходов,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
	|		ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.Контрагент, ЕСТЬNULL(РасходныйКассовыйОрдер.Контрагент,
	|			ЕСТЬNULL(Контрагенты.Ссылка, """")))  КАК Контрагент,
	|		ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.Договор, ЕСТЬNULL(РасходныйКассовыйОрдер.Договор, """")) КАК Договор,
	|		НЕ ДокСторно.Ссылка ЕСТЬ NULL КАК Сторно
	|	ИЗ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
	|				&НачДата,
	|				&КонГраница,
	|				Регистратор,
	|				Организация = &Организация
	|					И СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|					И НЕ ХозяйственнаяОперация В (&ИсключающиесяХозОперацииПрочиеРасходы)) КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО СписаниеБезналичныхДенежныхСредств.Ссылка = ДанныеРегистра.Регистратор
	|		И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО РасходныйКассовыйОрдер.Ссылка = ДанныеРегистра.Регистратор
	|		И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеРегистра.ДенежныеСредства = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторно КАК ДокСторно
	|		ПО ДанныеРегистра.Регистратор = ДокСторно.Ссылка
	|	ГДЕ
	|		НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|		И (НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств))
	|		И (НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств))
	|		И (НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|               ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга) 
	|				ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КомиссияПоЭквайрингу))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Период,
	|		ДанныеРегистра.Регистратор,
	|		ДанныеРегистра.Организация,
	|		ДанныеРегистра.ХозяйственнаяОперация,
	|		ДанныеРегистра.СтатьяДоходовРасходов,
	|		СУММА(ДанныеРегистра.СуммаРеглОборот),
	|		ВЫБОР
	|			КОГДА СУММА(ДанныеРегистра.СуммаРеглБезНДСОборот) = 0
	|				ТОГДА 0
	|			ИНАЧЕ СУММА(ДанныеРегистра.СуммаРеглОборот) - СУММА(ДанныеРегистра.СуммаРеглБезНДСОборот)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) Ссылка Документ.ТаможеннаяДекларацияИмпорт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежи)
	|			КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|					И ТИПЗНАЧЕНИЯ(ДанныеРегистра.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|				ТОГДА ДанныеРегистра.АналитикаРасходов
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) Ссылка Документ.ТаможеннаяДекларацияИмпорт
	|				ТОГДА ""Таможня""
	|			КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|					И ТИПЗНАЧЕНИЯ(ДанныеРегистра.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|				ТОГДА ""Амортизация""
	|			КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) КАК Документ.ОтчетКомиссионера).УдержатьВознаграждение, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).УдержатьВознаграждение, ЛОЖЬ)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)
	|				ТОГДА ""РасходПриОплате""
	|			КОГДА ДанныеРегистра.СуммаРеглОборот < 0 И ДокСторно.Ссылка ЕСТЬ NULL
	|					ИЛИ ДанныеРегистра.СуммаРеглОборот > 0 И НЕ ДокСторно.Ссылка ЕСТЬ NULL
	|				ТОГДА ""ВозвратПоставщику""
	|			ИНАЧЕ ""Приход""
	|		КОНЕЦ,
	|		ЕСТЬNULL(ОбъектыРасчетов.Объект, ВЫБОР
	|				КОГДА ДанныеРегистра.СуммаРеглОборот < 0 И ДокСторно.Ссылка ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(КорректировкаПриобретения.ДокументОснование, ДанныеРегистра.Регистратор)
	|				ИНАЧЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор)
	|			КОНЕЦ),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|		ДанныеРегистра.Контрагент,
	|		ДанныеРегистра.Договор,
	|		НЕ ДокСторно.Ссылка ЕСТЬ NULL КАК Сторно
	|	ИЗ
	|		РегистрНакопления.ДвиженияКонтрагентДоходыРасходы.Обороты(&НачДата, &КонГраница, Регистратор,
	|			Организация = &Организация И НЕ ХозяйственнаяОперация В (&ИсключающиесяХозОперацииПрочиеРасходы)) КАК ДанныеРегистра
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|				ПО ДанныеРегистра.СтатьяДоходовРасходов = СтатьиРасходов.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторно КАК ДокСторно
	|				ПО ДанныеРегистра.Регистратор = ДокСторно.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|				ПО ДанныеРегистра.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|					И ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|					И НЕ ОбъектыРасчетов.Объект ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					И НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|				ПО ДанныеРегистра.Регистратор = КорректировкаПриобретения.Ссылка
	|					И ОбъектыРасчетов.Ссылка ЕСТЬ NULL
	|	ГДЕ
	|		НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.НачисленияКредитовИДепозитов
	|		И НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам
	|		И НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) В
	|					(ВЫБРАТЬ
	|						ДанныеПоСебестоимости.ДокументВозникновенияРасходов
	|					ИЗ
	|						ДанныеПоСебестоимости
	|					ГДЕ
	|						ДанныеПоСебестоимости.ВидОперации В (""ДопРасходы"", ""Таможня"")
	// Корректировка может идти и на увеличение стоимости и на списание на расходы одновременно. В этом случае данные по ней будут в себестоимости, но в прочие расходы данные тоже должны попадать.
	|						И КорректировкаПриобретения.Ссылка ЕСТЬ NULL)
	|		И НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеРегистра.Период,
	|		ДанныеРегистра.Регистратор,
	|		ДанныеРегистра.Организация,
	|		ДанныеРегистра.ХозяйственнаяОперация,
	|		ДанныеРегистра.СтатьяДоходовРасходов,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) Ссылка Документ.ТаможеннаяДекларацияИмпорт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежи)
	|			КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|					И ТИПЗНАЧЕНИЯ(ДанныеРегистра.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|				ТОГДА ДанныеРегистра.АналитикаРасходов
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) Ссылка Документ.ТаможеннаяДекларацияИмпорт
	|				ТОГДА ""Таможня""
	|			КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|					И ТИПЗНАЧЕНИЯ(ДанныеРегистра.АналитикаРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|				ТОГДА ""Амортизация""
	|			КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) КАК Документ.ОтчетКомиссионера).УдержатьВознаграждение, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).УдержатьВознаграждение, ЛОЖЬ)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)
	|				ТОГДА ""РасходПриОплате""
	|			КОГДА ДанныеРегистра.СуммаРеглОборот < 0 И ДокСторно.Ссылка ЕСТЬ NULL
	|					ИЛИ ДанныеРегистра.СуммаРеглОборот > 0 И НЕ ДокСторно.Ссылка ЕСТЬ NULL
	|				ТОГДА ""ВозвратПоставщику""
	|			ИНАЧЕ ""Приход""
	|		КОНЕЦ,
	|		ЕСТЬNULL(ОбъектыРасчетов.Объект, ВЫБОР
	|				КОГДА ДанныеРегистра.СуммаРеглОборот < 0 И ДокСторно.Ссылка ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(КорректировкаПриобретения.ДокументОснование, ДанныеРегистра.Регистратор)
	|				ИНАЧЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор)
	|			КОНЕЦ),
	|		ДанныеРегистра.Контрагент,
	|		ДанныеРегистра.Договор,
	|		НЕ ДокСторно.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Период,
	|		ДанныеРегистра.Регистратор,
	|		ДанныеРегистра.Организация,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация
	//++ Устарело_Переработка24
	|			КОГДА ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.ОтчетПереработчика
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) КАК Документ.ОтчетПереработчика).ХозяйственнаяОперация
	//-- Устарело_Переработка24
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|		КОНЕЦ,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|		ДанныеРегистра.СтоимостьРеглПриход + ДанныеРегистра.НДСРеглПриход,
	|		ДанныеРегистра.НДСРеглПриход,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги),
	|		""Приход"",
	|		ДанныеРегистра.ДокументПоступления,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.АналитикаУчетаПартий.НалогообложениеНДС В (&ТипыОсобогоНалогообложения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОНЕЦ,
	|		"""",
	|		"""",
	|		НЕ ДокСторно.Ссылка ЕСТЬ NULL КАК Сторно
	|	ИЗ
	|		РегистрНакопления.ПартииПроизводственныхЗатрат.Обороты(
	|				&НачДата,
	|				&КонГраница,
	|				Регистратор,
	|				Организация = &Организация
	|					И АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)) КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторно КАК ДокСторно
	|			ПО ДанныеРегистра.Регистратор = ДокСторно.Ссылка
	|	ГДЕ
	|		(ДанныеРегистра.СтоимостьРеглПриход > 0 И ДокСторно.Ссылка ЕСТЬ NULL
	|		ИЛИ ДанныеРегистра.СтоимостьРеглПриход < 0 И НЕ ДокСторно.Ссылка ЕСТЬ NULL)
	//++ НЕ УТ
	|		И НЕ ЕСТЬNULL(ДокСторно.СторнируемыйДокумент, ДанныеРегистра.Регистратор) ССЫЛКА Документ.ПроизводствоБезЗаказа
	//-- НЕ УТ
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.ДокументВозникновенияРасходов,
	|	ВложенныйЗапрос.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации ИЛИ ВложенныйЗапрос.ВидРасходов ССЫЛКА Справочник.ОбъектыСтроительства
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС)
	|		КОГДА ВложенныйЗапрос.ВидРасходов ССЫЛКА Справочник.НематериальныеАктивы
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА)
	|		ИНАЧЕ ВложенныйЗапрос.ВидРасходов
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ВидРасходов) В (ТИП(Справочник.ОбъектыСтроительства), ТИП(Справочник.НематериальныеАктивы), ТИП(Справочник.ОбъектыЭксплуатации))
	|		ТОГДА ВложенныйЗапрос.ВидРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВложенныйЗапрос.ВидДеятельности,
	|	ВложенныйЗапрос.ВидОперации,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.СтатьяРасходов,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасходовПоЗарплатеИНалогам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.Период КАК Период,
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.Регистратор КАК Регистратор,
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.Организация КАК Организация,
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ДвиженияДоходыРасходыПрочиеАктивыПассивы.АналитикаАктивовПассивов
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорАналитикаАктивовПассивов
	|		ИНАЧЕ ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья
	|	КОНЕЦ КАК СтатьяРасходов,
	|	СУММА(ДвиженияДоходыРасходыПрочиеАктивыПассивы.СуммаРегл) КАК Сумма,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|				И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	КОНЕЦ КАК ВидРасходов,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ""Оплата""
	|		ИНАЧЕ ""Приход""
	|	КОНЕЦ КАК ВидОперации,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)) КАК ВидДеятельности,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиРасходов).ПризнаватьРасходамиПриУСН,
	|		ИСТИНА) КАК ПризнаватьРасходамиПриУСН,
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.СпособРасчетов КАК СпособРасчетов,
	|	НЕ ДвиженияДоходыРасходыПрочиеАктивыПассивы.НеОблагаетсяНДФЛ КАК ОблагаетсяНДФЛ
	|ПОМЕСТИТЬ РасходыПоЗарплатеИНалогамВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы КАК ДвиженияДоходыРасходыПрочиеАктивыПассивы
	|ГДЕ
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.Период МЕЖДУ &НачДата И &КонДата
	|	И ДвиженияДоходыРасходыПрочиеАктивыПассивы.Организация = &Организация
	|	И ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|	И ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов) В (&СтатьиЗарплатыИНалогов)
	|	И НЕ ДвиженияДоходыРасходыПрочиеАктивыПассивы.Регистратор ССЫЛКА Документ.НачислениеОценочныхОбязательствПоОтпускам
	|	И НЕ ДвиженияДоходыРасходыПрочиеАктивыПассивы.АналитикаАктивовПассивов В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_Доходы), ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_МинимальныйНалог), ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_ДоходыМинусРасходы))
	|	И НЕ ДвиженияДоходыРасходыПрочиеАктивыПассивы.ВидОперацииПоЗарплате В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.ХозяйственнаяОперация,
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.Организация,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ДвиженияДоходыРасходыПрочиеАктивыПассивы.АналитикаАктивовПассивов
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорАналитикаАктивовПассивов
	|		ИНАЧЕ ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья
	|	КОНЕЦ,
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.Период,
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.Регистратор,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|				И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ""Оплата""
	|		ИНАЧЕ ""Приход""
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДвиженияДоходыРасходыПрочиеАктивыПассивы.КорСтатья КАК ПланВидовХарактеристик.СтатьиРасходов).ПризнаватьРасходамиПриУСН,
	|		ИСТИНА),
	|	ДвиженияДоходыРасходыПрочиеАктивыПассивы.СпособРасчетов,
	|	НЕ ДвиженияДоходыРасходыПрочиеАктивыПассивы.НеОблагаетсяНДФЛ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеЗарплатыВФинансовомУчете.Период,
	|	ОтражениеЗарплатыВФинансовомУчете.Регистратор,
	|	ОтражениеЗарплатыВФинансовомУчете.Организация,
	|	ВЫБОР
	|		КОГДА ОтражениеЗарплатыВФинансовомУчете.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеСдельнойЗаработнойПлаты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеНалоговВзносовСоСдельнойЗаработнойПлаты)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтражениеЗарплатыВФинансовомУчете.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|		ИНАЧЕ ОтражениеЗарплатыВФинансовомУчете.ТипНалога
	|	КОНЕЦ,
	|	СУММА(ОтражениеЗарплатыВФинансовомУчете.СуммаРегл),
	|	ВЫБОР
	|		КОГДА ОтражениеЗарплатыВФинансовомУчете.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	КОНЕЦ,
	|	""Приход"",
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|	ИСТИНА КАК ПризнаватьРасходамиПриУСН,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка),
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ОтражениеЗарплатыВФинансовомУчете КАК ОтражениеЗарплатыВФинансовомУчете
	|ГДЕ
	|	ОтражениеЗарплатыВФинансовомУчете.Период МЕЖДУ &НачДата И &КонДата
	|	И ОтражениеЗарплатыВФинансовомУчете.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтражениеЗарплатыВФинансовомУчете.Период,
	|	ОтражениеЗарплатыВФинансовомУчете.Регистратор,
	|	ОтражениеЗарплатыВФинансовомУчете.Организация,
	|	ОтражениеЗарплатыВФинансовомУчете.ТипНалога
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходов,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоЗарплате.Период КАК Период,
	|	РасходыПоЗарплате.Регистратор КАК Регистратор,
	|	РасходыПоЗарплате.Организация КАК Организация,
	|	РасходыПоЗарплате.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходыПоЗарплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(РасходыПоЗарплате.Сумма) КАК Сумма,
	|	РасходыПоЗарплате.ВидРасходов КАК ВидРасходов,
	|	0 КАК НДС,
	|	РасходыПоЗарплате.Регистратор КАК ДокументВозникновенияРасходов,
	|	РасходыПоЗарплате.ВидОперации КАК ВидОперации,
	|	РасходыПоЗарплате.ВидДеятельности КАК ВидДеятельности,
	|	РасходыПоЗарплате.ПризнаватьРасходамиПриУСН КАК ПризнаватьРасходамиПриУСН,
	|	РасходыПоЗарплате.СпособРасчетов
	|ПОМЕСТИТЬ РасходыУменьшаемыеНаСуммуНДФЛ
	|ИЗ
	|	РасходыПоЗарплатеИНалогамВременнаяТаблица КАК РасходыПоЗарплате
	|ГДЕ
	|	РасходыПоЗарплате.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|	И РасходыПоЗарплате.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|	И РасходыПоЗарплате.ВидОперации = ""Приход""
	|	И РасходыПоЗарплате.ОблагаетсяНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоЗарплате.Период,
	|	РасходыПоЗарплате.Регистратор,
	|	РасходыПоЗарплате.Организация,
	|	РасходыПоЗарплате.ХозяйственнаяОперация,
	|	РасходыПоЗарплате.СтатьяРасходов,
	|	РасходыПоЗарплате.ВидРасходов,
	|	РасходыПоЗарплате.ВидОперации,
	|	РасходыПоЗарплате.ВидДеятельности,
	|	РасходыПоЗарплате.ПризнаватьРасходамиПриУСН,
	|	РасходыПоЗарплате.СпособРасчетов
	|
	|ИМЕЮЩИЕ СУММА(РасходыПоЗарплате.Сумма) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходыПоЗарплатеВозмещенные.Период,
	|	РасходыПоЗарплатеВозмещенные.Регистратор,
	|	РасходыПоЗарплатеВозмещенные.Организация,
	|	РасходыПоЗарплатеВозмещенные.ХозяйственнаяОперация,
	|	РасходыПоЗарплатеВозмещенные.СтатьяРасходов,
	|	СУММА(РасходыПоЗарплатеВозмещенные.Сумма),
	|	РасходыПоЗарплатеВозмещенные.ВидРасходов,
	|	0,
	|	РасходыПоЗарплатеВозмещенные.Регистратор,
	|	РасходыПоЗарплатеВозмещенные.ВидОперации,
	|	РасходыПоЗарплатеВозмещенные.ВидДеятельности,
	|	РасходыПоЗарплатеВозмещенные.ПризнаватьРасходамиПриУСН,
	|	РасходыПоЗарплатеВозмещенные.СпособРасчетов
	|ИЗ
	|	РасходыПоЗарплатеИНалогамВременнаяТаблица КАК РасходыПоЗарплатеВозмещенные
	|ГДЕ
	|	РасходыПоЗарплатеВозмещенные.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	И РасходыПоЗарплатеВозмещенные.СтатьяРасходов ССЫЛКА Перечисление.ТипыНалогов
	|	И РасходыПоЗарплатеВозмещенные.ВидОперации = ""Оплата""
	|	И РасходыПоЗарплатеВозмещенные.ОблагаетсяНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоЗарплатеВозмещенные.Период,
	|	РасходыПоЗарплатеВозмещенные.Регистратор,
	|	РасходыПоЗарплатеВозмещенные.Организация,
	|	РасходыПоЗарплатеВозмещенные.ХозяйственнаяОперация,
	|	РасходыПоЗарплатеВозмещенные.СтатьяРасходов,
	|	РасходыПоЗарплатеВозмещенные.ВидРасходов,
	|	РасходыПоЗарплатеВозмещенные.ВидОперации,
	|	РасходыПоЗарплатеВозмещенные.ВидДеятельности,
	|	РасходыПоЗарплатеВозмещенные.ПризнаватьРасходамиПриУСН,
	|	РасходыПоЗарплатеВозмещенные.СпособРасчетов
	|
	|ИМЕЮЩИЕ СУММА(РасходыПоЗарплатеВозмещенные.Сумма) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоНалогамНДФЛ.Период КАК Период,
	|	РасходыПоНалогамНДФЛ.Регистратор КАК Регистратор,
	|	РасходыПоНалогамНДФЛ.Организация КАК Организация,
	|	РасходыПоНалогамНДФЛ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ХозяйственнаяОперация КАК ХозяйственнаяОперацияПоЗарплате,
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.СтатьяРасходов КАК СтатьяРасходовЗарплаты,
	|	ВЫРАЗИТЬ(РасходыПоНалогамНДФЛ.Сумма * РасходыУменьшаемыеНаСуммуНДФЛ.Сумма / СУММА(РасходыУменьшаемыеНаСуммуНДФЛИтоги.Сумма) КАК ЧИСЛО(15,0)) КАК Сумма,
	|	РасходыПоНалогамНДФЛ.ВидРасходов КАК ВидРасходов,
	|	0 КАК НДС,
	|	РасходыПоНалогамНДФЛ.Регистратор КАК ДокументВозникновенияРасходов,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ВидОперации КАК ВидОперации,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ВидДеятельности КАК ВидДеятельности,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ПризнаватьРасходамиПриУСН КАК ПризнаватьРасходамиПриУСН,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.СпособРасчетов
	|ПОМЕСТИТЬ РасходыПоНалогамКВычетуИзЗарплаты
	|ИЗ
	|	РасходыПоЗарплатеИНалогамВременнаяТаблица КАК РасходыПоНалогамНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходыУменьшаемыеНаСуммуНДФЛ КАК РасходыУменьшаемыеНаСуммуНДФЛ
	|		ПО РасходыПоНалогамНДФЛ.Период = РасходыУменьшаемыеНаСуммуНДФЛ.Период
	|			И РасходыПоНалогамНДФЛ.Регистратор = РасходыУменьшаемыеНаСуммуНДФЛ.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходыУменьшаемыеНаСуммуНДФЛ КАК РасходыУменьшаемыеНаСуммуНДФЛИтоги
	|		ПО РасходыПоНалогамНДФЛ.Период = РасходыУменьшаемыеНаСуммуНДФЛИтоги.Период
	|			И РасходыПоНалогамНДФЛ.Регистратор = РасходыУменьшаемыеНаСуммуНДФЛИтоги.Регистратор
	|
	|ГДЕ
	|	РасходыПоНалогамНДФЛ.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	И РасходыПоНалогамНДФЛ.СтатьяРасходов В (&ТипыНалоговНДФЛ)
	|	И РасходыПоНалогамНДФЛ.ВидОперации = ""Приход""
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоНалогамНДФЛ.Период,
	|	РасходыПоНалогамНДФЛ.Регистратор,
	|	РасходыПоНалогамНДФЛ.Организация,
	|	РасходыПоНалогамНДФЛ.ХозяйственнаяОперация,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ХозяйственнаяОперация,
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.СтатьяРасходов,
	|	РасходыПоНалогамНДФЛ.ВидРасходов,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ВидОперации,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ВидДеятельности,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.ПризнаватьРасходамиПриУСН,
	|	РасходыПоНалогамНДФЛ.Сумма,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.Сумма,
	|	РасходыУменьшаемыеНаСуммуНДФЛ.СпособРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период,
	|	СтатьяРасходовЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоЗарплатеИНалогам.Период КАК Период,
	|	РасходыПоЗарплатеИНалогам.Регистратор КАК Регистратор,
	|	РасходыПоЗарплатеИНалогам.Организация КАК Организация,
	|	РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов КАК СтатьяРасходов,
	|	РасходыПоЗарплатеИНалогам.Сумма - СУММА(ЕСТЬNULL(РасходыПоНалогамКВычетуИзЗарплаты.Сумма, 0)) КАК Сумма,
	|	РасходыПоЗарплатеИНалогам.ВидРасходов КАК ВидРасходов,
	|	РасходыПоЗарплатеИНалогам.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ РасходыПоЗарплатеДетально
	|ИЗ
	|	РасходыУменьшаемыеНаСуммуНДФЛ КАК РасходыПоЗарплатеИНалогам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасходыПоНалогамКВычетуИзЗарплаты КАК РасходыПоНалогамКВычетуИзЗарплаты
	|		ПО РасходыПоЗарплатеИНалогам.Регистратор = РасходыПоНалогамКВычетуИзЗарплаты.Регистратор
	|			И РасходыПоЗарплатеИНалогам.Период = РасходыПоНалогамКВычетуИзЗарплаты.Период
	|			И РасходыПоЗарплатеИНалогам.СтатьяРасходов = РасходыПоНалогамКВычетуИзЗарплаты.СтатьяРасходовЗарплаты
	|			И РасходыПоЗарплатеИНалогам.СпособРасчетов = РасходыПоНалогамКВычетуИзЗарплаты.СпособРасчетов
	|			И РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация = РасходыПоНалогамКВычетуИзЗарплаты.ХозяйственнаяОперацияПоЗарплате
	|			И РасходыПоНалогамКВычетуИзЗарплаты.ВидОперации = ""Приход""
	|ГДЕ
	|	РасходыПоЗарплатеИНалогам.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|	И РасходыПоЗарплатеИНалогам.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоЗарплатеИНалогам.Период,
	|	РасходыПоЗарплатеИНалогам.Регистратор,
	|	РасходыПоЗарплатеИНалогам.Организация,
	|	РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов,
	|	РасходыПоЗарплатеИНалогам.ВидРасходов,
	|	РасходыПоЗарплатеИНалогам.ВидОперации,
	|	РасходыПоЗарплатеИНалогам.Сумма
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходыПоЗарплате.Период КАК Период,
	|	РасходыПоЗарплате.Регистратор КАК Регистратор,
	|	РасходыПоЗарплате.Организация КАК Организация,
	|	РасходыПоЗарплате.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходыПоЗарплате.СтатьяРасходов КАК СтатьяРасходов,
	|	РасходыПоЗарплате.Сумма КАК Сумма,
	|	РасходыПоЗарплате.ВидРасходов КАК ВидРасходов,
	|	РасходыПоЗарплате.ВидОперации КАК ВидОперации
	|ИЗ
	|	РасходыПоЗарплатеИНалогамВременнаяТаблица КАК РасходыПоЗарплате
	|ГДЕ
	|	РасходыПоЗарплате.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|	И РасходыПоЗарплате.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|	И РасходыПоЗарплате.ВидОперации = ""Приход""
	|	И НЕ РасходыПоЗарплате.ОблагаетсяНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоЗарплате.Период КАК Период,
	|	РасходыПоЗарплате.Регистратор КАК Регистратор,
	|	РасходыПоЗарплате.Организация КАК Организация,
	|	РасходыПоЗарплате.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходыПоЗарплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(РасходыПоЗарплате.Сумма) КАК Сумма,
	|	РасходыПоЗарплате.ВидРасходов КАК ВидРасходов,
	|	0 КАК НДС,
	|	РасходыПоЗарплате.Регистратор КАК ДокументВозникновенияРасходов,
	|	РасходыПоЗарплате.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ РасходыПоЗарплате
	|ИЗ
	|	РасходыПоЗарплатеДетально КАК РасходыПоЗарплате
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоЗарплате.Период,
	|	РасходыПоЗарплате.Регистратор,
	|	РасходыПоЗарплате.Организация,
	|	РасходыПоЗарплате.ХозяйственнаяОперация,
	|	РасходыПоЗарплате.СтатьяРасходов,
	|	РасходыПоЗарплате.ВидРасходов,
	|	РасходыПоЗарплате.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтатьяРасходов,
	|	ВидРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоЗарплатеИНалогам.Период КАК Период,
	|	РасходыПоЗарплатеИНалогам.Регистратор КАК Регистратор,
	|	РасходыПоЗарплатеИНалогам.Организация КАК Организация,
	|	РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(РасходыПоЗарплатеИНалогам.Сумма) - СУММА(ЕСТЬNULL(РасходыПоНалогамКВычетуИзЗарплаты.Сумма, 0)) КАК Сумма,
	|	РасходыПоЗарплатеИНалогам.ВидРасходов КАК ВидРасходов,
	|	СУММА(0) КАК НДС,
	|	РасходыПоЗарплатеИНалогам.Регистратор КАК ДокументВозникновенияРасходов,
	|	РасходыПоЗарплатеИНалогам.ВидОперации КАК ВидОперации,
	|	РасходыПоЗарплатеИНалогам.ВидДеятельности КАК ВидДеятельности,
	|	РасходыПоЗарплатеИНалогам.ПризнаватьРасходамиПриУСН КАК ПризнаватьРасходамиПриУСН
	|ПОМЕСТИТЬ РасходыПоНалогам
	|ИЗ
	|	РасходыПоЗарплатеИНалогамВременнаяТаблица КАК РасходыПоЗарплатеИНалогам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасходыПоНалогамКВычетуИзЗарплаты КАК РасходыПоНалогамКВычетуИзЗарплаты
	|		ПО РасходыПоЗарплатеИНалогам.Регистратор = РасходыПоНалогамКВычетуИзЗарплаты.Регистратор
	|			И РасходыПоЗарплатеИНалогам.Период = РасходыПоНалогамКВычетуИзЗарплаты.Период
	|			И РасходыПоЗарплатеИНалогам.СтатьяРасходов = РасходыПоНалогамКВычетуИзЗарплаты.СтатьяРасходовЗарплаты
	|			И РасходыПоЗарплатеИНалогам.ВидОперации = РасходыПоНалогамКВычетуИзЗарплаты.ВидОперации
	|			И РасходыПоЗарплатеИНалогам.СпособРасчетов = РасходыПоНалогамКВычетуИзЗарплаты.СпособРасчетов
	|			И РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация = РасходыПоНалогамКВычетуИзЗарплаты.ХозяйственнаяОперацияПоЗарплате
	|ГДЕ
	|	РасходыПоЗарплатеИНалогам.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	И НЕ РасходыПоЗарплатеИНалогам.СтатьяРасходов В (&ТипыНалоговНДФЛ)
	|	И РасходыПоЗарплатеИНалогам.ВидОперации = ""Приход""
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоЗарплатеИНалогам.Период,
	|	РасходыПоЗарплатеИНалогам.Регистратор,
	|	РасходыПоЗарплатеИНалогам.Организация,
	|	РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов,
	|	РасходыПоЗарплатеИНалогам.ВидРасходов,
	|	РасходыПоЗарплатеИНалогам.ВидОперации,
	|	РасходыПоЗарплатеИНалогам.ВидДеятельности,
	|	РасходыПоЗарплатеИНалогам.ПризнаватьРасходамиПриУСН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходыПоНалогамНДФЛ.Период,
	|	РасходыПоНалогамНДФЛ.Регистратор,
	|	РасходыПоНалогамНДФЛ.Организация,
	|	РасходыПоНалогамНДФЛ.ХозяйственнаяОперация,
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов,
	|	СУММА(РасходыПоНалогамНДФЛ.Сумма),
	|	РасходыПоНалогамНДФЛ.ВидРасходов,
	|	СУММА(РасходыПоНалогамНДФЛ.НДС),
	|	РасходыПоНалогамНДФЛ.ДокументВозникновенияРасходов,
	|	РасходыПоНалогамНДФЛ.ВидОперации,
	|	РасходыПоНалогамНДФЛ.ВидДеятельности,
	|	РасходыПоНалогамНДФЛ.ПризнаватьРасходамиПриУСН
	|ИЗ
	|	РасходыПоНалогамКВычетуИзЗарплаты КАК РасходыПоНалогамНДФЛ
	|ГДЕ
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов В (&ТипыНалоговНДФЛ)
	|	И РасходыПоНалогамНДФЛ.ВидОперации = ""Приход""
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоНалогамНДФЛ.Период,
	|	РасходыПоНалогамНДФЛ.Регистратор,
	|	РасходыПоНалогамНДФЛ.Организация,
	|	РасходыПоНалогамНДФЛ.ХозяйственнаяОперация,
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов,
	|	РасходыПоНалогамНДФЛ.ВидРасходов,
	|	РасходыПоНалогамНДФЛ.ДокументВозникновенияРасходов,
	|	РасходыПоНалогамНДФЛ.ВидОперации,
	|	РасходыПоНалогамНДФЛ.ВидДеятельности,
	|	РасходыПоНалогамНДФЛ.ПризнаватьРасходамиПриУСН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходыПоНалогамНДФЛ.Период,
	|	РасходыПоНалогамНДФЛ.Регистратор,
	|	РасходыПоНалогамНДФЛ.Организация,
	|	РасходыПоНалогамНДФЛ.ХозяйственнаяОперация,
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов,
	|	СУММА(РасходыПоНалогамНДФЛ.Сумма),
	|	РасходыПоНалогамНДФЛ.ВидРасходов,
	|	СУММА(РасходыПоНалогамНДФЛ.НДС),
	|	РасходыПоНалогамНДФЛ.ДокументВозникновенияРасходов,
	|	""Приход"",
	|	РасходыПоНалогамНДФЛ.ВидДеятельности,
	|	ЛОЖЬ
	|ИЗ
	|	РасходыПоНалогамКВычетуИзЗарплаты КАК РасходыПоНалогамНДФЛ
	|ГДЕ
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов В (&ТипыНалоговНДФЛ)
	|	И РасходыПоНалогамНДФЛ.ВидОперации = ""Оплата""
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоНалогамНДФЛ.Период,
	|	РасходыПоНалогамНДФЛ.Регистратор,
	|	РасходыПоНалогамНДФЛ.Организация,
	|	РасходыПоНалогамНДФЛ.ХозяйственнаяОперация,
	|	РасходыПоНалогамНДФЛ.СтатьяРасходов,
	|	РасходыПоНалогамНДФЛ.ВидРасходов,
	|	РасходыПоНалогамНДФЛ.ДокументВозникновенияРасходов,
	|	РасходыПоНалогамНДФЛ.ВидДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтатьяРасходов,
	|	ВидРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоЗарплатеИНалогам.Период КАК Период,
	|	РасходыПоЗарплатеИНалогам.Регистратор КАК Регистратор,
	|	РасходыПоЗарплатеИНалогам.Организация КАК Организация,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(РасходыПоЗарплатеИНалогам.Сумма) КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги) КАК ВидРасходов,
	|	СУММА(0) КАК НДС,
	|	""Оплата"" КАК ВидОперации
	|ПОМЕСТИТЬ ОплатыЗаСчетРанееВнесенныхСтраховыхВзносов
	|ИЗ
	|	РасходыУменьшаемыеНаСуммуНДФЛ КАК РасходыПоЗарплатеИНалогам
	|ГДЕ
	|	РасходыПоЗарплатеИНалогам.ВидОперации = ""Оплата""
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоЗарплатеИНалогам.Период,
	|	РасходыПоЗарплатеИНалогам.Регистратор,
	|	РасходыПоЗарплатеИНалогам.Организация,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтатьяРасходов,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасходыПоЗарплатеИНалогамВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасходыУменьшаемыеНаСуммуНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасходыПоНалогамКВычетуИзЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасходыПоЗарплатеДетально";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасходовПоКредитамИЛизингу()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыПоФинансовымИнструментам.Период КАК Период,
	|	РасчетыПоФинансовымИнструментам.Регистратор КАК Регистратор,
	|	ДоговорыКредитовИДепозитов.Организация КАК Организация,
	|	РасчетыПоФинансовымИнструментам.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			И ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовПроцентов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовПроцентов
	|		КОГДА РасчетыПоФинансовымИнструментам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|			И ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовКомиссии ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовКомиссии
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	СУММА(РасчетыПоФинансовымИнструментам.СуммаРегл) КАК Сумма,
	|	РасчетыПоФинансовымИнструментам.Договор КАК ДокументВозникновенияРасходов,
	|	СУММА(0) КАК НДС,
	|	ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Оплата""
	|	КОНЕЦ КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты) КАК ВидРасходов,
	|	ДоговорыКредитовИДепозитов.Контрагент КАК Контрагент,
	|	РасчетыПоФинансовымИнструментам.Договор КАК Договор,
	|	РасчетыПоФинансовымИнструментам.Сторно КАК Сторно
	|ПОМЕСТИТЬ РасходыПоКредитамЛизингу
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК РасчетыПоФинансовымИнструментам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|		ПО РасчетыПоФинансовымИнструментам.Договор = ДоговорыКредитовИДепозитов.Ссылка
	|ГДЕ
	|	РасчетыПоФинансовымИнструментам.Период МЕЖДУ &НачДата И &КонДата
	|	И ДоговорыКредитовИДепозитов.Организация = &Организация
	|	И ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|	И РасчетыПоФинансовымИнструментам.Сумма <> 0
	|	И ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			ТОГДА ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовПроцентов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				ИЛИ ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовПроцентов = НЕОПРЕДЕЛЕНО
	|		КОГДА РасчетыПоФинансовымИнструментам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|			ТОГДА ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовКомиссии ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				ИЛИ ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовКомиссии = НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоФинансовымИнструментам.Регистратор,
	|	РасчетыПоФинансовымИнструментам.Период,
	|	ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			И ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовПроцентов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовПроцентов
	|		КОГДА РасчетыПоФинансовымИнструментам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|			И ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовКомиссии ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ДоговорыКредитовИДепозитов.СтатьяДоходовРасходовКомиссии
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ,
	|	РасчетыПоФинансовымИнструментам.Договор,
	|	ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Оплата""
	|	КОНЕЦ,
	|	ДоговорыКредитовИДепозитов.Организация,
	|	РасчетыПоФинансовымИнструментам.ХозяйственнаяОперация,
	|	ДоговорыКредитовИДепозитов.Контрагент,
	|	РасчетыПоФинансовымИнструментам.Сторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоФинансовымИнструментам.Период,
	|	РасчетыПоФинансовымИнструментам.Регистратор,
	|	Аналитика.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеУслугПоАренде),
	|	РасчетыПоФинансовымИнструментам.ТипСуммы,
	|	СУММА(РасчетыПоФинансовымИнструментам.СуммаРегл) + СУММА(ЕСТЬNULL(СуммыНДС.СуммаНДСРегл, 0)),
	|	РасчетыПоФинансовымИнструментам.Договор,
	|	СУММА(ЕСТЬNULL(СуммыНДС.СуммаНДСРегл, 0)),
	|	ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Оплата""
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Лизинг),
	|	Аналитика.Контрагент КАК Контрагент,
	|	РасчетыПоФинансовымИнструментам.Договор КАК Договор,
	|	РасчетыПоФинансовымИнструментам.Сторно КАК Сторно
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК РасчетыПоФинансовымИнструментам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыПоФинансовымИнструментам.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыНДС
	|		ПО РасчетыПоФинансовымИнструментам.Регистратор = СуммыНДС.Регистратор
	|			И РасчетыПоФинансовымИнструментам.ИдентификаторСтроки = СуммыНДС.ИдентификаторСтроки
	|ГДЕ
	|	РасчетыПоФинансовымИнструментам.Период МЕЖДУ &НачДата И &КонДата
	|	И Аналитика.Организация = &Организация
	|	И РасчетыПоФинансовымИнструментам.Договор ССЫЛКА Справочник.ДоговорыАренды
	|	И НЕ РасчетыПоФинансовымИнструментам.ТипСуммы В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимость),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимостьАванс),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.НДС), 
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ПустаяСсылка))
	|	И РасчетыПоФинансовымИнструментам.Сумма <> 0
	|	И (РасчетыПоФинансовымИнструментам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоФинансовымИнструментам.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафиковФинансовыхИнструментов.Оплаты)
	|	ИЛИ РасчетыПоФинансовымИнструментам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоФинансовымИнструментам.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафиковФинансовыхИнструментов.Начисления))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоФинансовымИнструментам.Регистратор,
	|	РасчетыПоФинансовымИнструментам.Период,
	|	РасчетыПоФинансовымИнструментам.Договор,
	|	ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Оплата""
	|	КОНЕЦ,
	|	Аналитика.Организация,
	|	РасчетыПоФинансовымИнструментам.ТипСуммы,
	|	Аналитика.Контрагент,
	|	РасчетыПоФинансовымИнструментам.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОплатам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аналитика.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоДокументам.Предоплата = 0
	|			ТОГДА РасчетыСПоставщикамиПоДокументам.Регистратор
	|		ИНАЧЕ ЕСТЬNULL(Авансы.Регистратор, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоДокументам.Предоплата = 0
	|			ТОГДА РасчетыСПоставщикамиПоДокументам.Период
	|		ИНАЧЕ ЕСТЬNULL(Авансы.Период, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата > 0
	|			ТОГДА РасчетыСПоставщикамиПоДокументам.Регистратор
	|		ИНАЧЕ РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
	|	КОНЕЦ КАК ДокументВозникновенияРасходов,
	|	СУММА(0) КАК НДС,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0
	|				ТОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0
	|						ТОГДА -РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|					ИНАЧЕ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|				КОНЕЦ
	|		КОНЕЦ) КАК Сумма,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСПоставщикамиПоДокументам.Долг = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|		ИНАЧЕ РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоДокументам.Предоплата = 0
	|			ТОГДА ""Оплата""
	|		ИНАЧЕ ""Аванс""
	|	КОНЕЦ КАК ВидОперации,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Договор КАК Договор,
	|	ЛОЖЬ КАК Сторно
	|ПОМЕСТИТЬ ПлатежныеДокументы
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|			И Аналитика.Организация = &Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Авансы
	|		ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = Авансы.РасчетныйДокумент
	|			И (Авансы.АналитикаУчетаПоПартнерам.Организация = &Организация)
	|			И РасчетыСПоставщикамиПоДокументам.Период >= Авансы.Период
	|			И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = Авансы.ЗаказПоставщику
	|			И (НЕ Авансы.Регистратор ССЫЛКА Документ.ОтчетКомитенту)
	|			И (Авансы.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками))
	|			И (Авансы.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|			И (Авансы.Предоплата > 0)
	|			И (Авансы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|ГДЕ
	|	РасчетыСПоставщикамиПоДокументам.Период МЕЖДУ &НачДата И &КонДата
	|	И (РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоДокументам.Предоплата <= 0
	|				И НЕ РасчетыСПоставщикамиПоДокументам.Долг = 0
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСПоставщикамиПоДокументам.Долг = 0
	|				И НЕ РасчетыСПоставщикамиПоДокументам.Предоплата = 0
	|				И (РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику <> РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)))
	|	И РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками)
	|	И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ОтчетКомитенту
	|	И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|	И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоДокументам.Предоплата = 0
	|			ТОГДА РасчетыСПоставщикамиПоДокументам.Период
	|		ИНАЧЕ ЕСТЬNULL(Авансы.Период, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСПоставщикамиПоДокументам.Долг = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|		ИНАЧЕ РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоДокументам.Предоплата = 0
	|			ТОГДА РасчетыСПоставщикамиПоДокументам.Регистратор
	|		ИНАЧЕ ЕСТЬNULL(Авансы.Регистратор, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоДокументам.Предоплата = 0
	|			ТОГДА ""Оплата""
	|		ИНАЧЕ ""Аванс""
	|	КОНЕЦ,
	|	Аналитика.Организация,
	|	Аналитика.Контрагент,
	|	Аналитика.Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата > 0
	|			ТОГДА РасчетыСПоставщикамиПоДокументам.Регистратор
	|		ИНАЧЕ РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОплатамПодотчетникам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДенежныеСредстваУПодотчетныхЛицОстаткиИОбороты.Период) КАК Период,
	|	ДенежныеСредстваУПодотчетныхЛицОстатки.Организация,
	|	ДенежныеСредстваУПодотчетныхЛицОстатки.ПодотчетноеЛицо,
	|	СУММА(ДенежныеСредстваУПодотчетныхЛицОстаткиИОбороты.СуммаОборот) КАК СуммаОборот,
	|	ДенежныеСредстваУПодотчетныхЛицОстатки.СуммаРеглОстаток
	|ПОМЕСТИТЬ ПериодПоследнейЗадолженности
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&НачГраница, Организация = &Организация) КАК ДенежныеСредстваУПодотчетныхЛицОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(, &НачГраница, Регистратор, , Организация = &Организация) КАК ДенежныеСредстваУПодотчетныхЛицОстаткиИОбороты
	|		ПО ДенежныеСредстваУПодотчетныхЛицОстатки.Организация = ДенежныеСредстваУПодотчетныхЛицОстаткиИОбороты.Организация
	|			И ДенежныеСредстваУПодотчетныхЛицОстатки.ПодотчетноеЛицо = ДенежныеСредстваУПодотчетныхЛицОстаткиИОбороты.ПодотчетноеЛицо
	|			И (ДенежныеСредстваУПодотчетныхЛицОстаткиИОбороты.СуммаНачальныйОстаток < 0)
	|ГДЕ
	|	ДенежныеСредстваУПодотчетныхЛицОстатки.СуммаРеглОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваУПодотчетныхЛицОстатки.Организация,
	|	ДенежныеСредстваУПодотчетныхЛицОстатки.ПодотчетноеЛицо,
	|	ДенежныеСредстваУПодотчетныхЛицОстатки.СуммаРеглОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваУПодотчетныхЛиц.Период,
	|	ДенежныеСредстваУПодотчетныхЛиц.Регистратор,
	|	ДенежныеСредстваУПодотчетныхЛиц.Организация,
	|	ДенежныеСредстваУПодотчетныхЛиц.ХозяйственнаяОперация,
	|	СУММА(ДенежныеСредстваУПодотчетныхЛиц.СуммаРегл) КАК СуммаОплаты,
	|	ДенежныеСредстваУПодотчетныхЛиц.ПодотчетноеЛицо,
	|	ДенежныеСредстваУПодотчетныхЛиц.ВидДвижения,
	|	ПериодПоследнейЗадолженности.СуммаРеглОстаток КАК СуммаОстаток,
	|	СУММА(ДенежныеСредстваУПодотчетныхЛиц.СуммаРегл) КАК Сумма,
	|	ДенежныеСредстваУПодотчетныхЛиц.МоментВремени
	|ПОМЕСТИТЬ ДокументыПериодаПоложительногоАванса
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваУПодотчетныхЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодПоследнейЗадолженности КАК ПериодПоследнейЗадолженности
	|		ПО ДенежныеСредстваУПодотчетныхЛиц.Организация = ПериодПоследнейЗадолженности.Организация
	|			И ДенежныеСредстваУПодотчетныхЛиц.ПодотчетноеЛицо = ПериодПоследнейЗадолженности.ПодотчетноеЛицо
	|ГДЕ
	|	ДенежныеСредстваУПодотчетныхЛиц.СуммаРегл <> 0
	|	И ДенежныеСредстваУПодотчетныхЛиц.Период >= ЕСТЬNULL(ПериодПоследнейЗадолженности.Период, ДАТАВРЕМЯ(1,1,1))
	|	И ДенежныеСредстваУПодотчетныхЛиц.Период < &НачДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваУПодотчетныхЛиц.Период,
	|	ДенежныеСредстваУПодотчетныхЛиц.Регистратор,
	|	ДенежныеСредстваУПодотчетныхЛиц.Организация,
	|	ДенежныеСредстваУПодотчетныхЛиц.ХозяйственнаяОперация,
	|	ДенежныеСредстваУПодотчетныхЛиц.ПодотчетноеЛицо,
	|	ДенежныеСредстваУПодотчетныхЛиц.ВидДвижения,
	|	ДенежныеСредстваУПодотчетныхЛиц.МоментВремени,
	|	ПериодПоследнейЗадолженности.СуммаРеглОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПериодаПоложительногоАванса.Период КАК Период,
	|	ДокументыПериодаПоложительногоАванса.Регистратор,
	|	ВЫБОР
	|		КОГДА СводныеДанные.СуммаОстаток- СУММА(ВЫБОР
	|					КОГДА СводныеДанные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							И СводныеДанные.МоментВремени > ДокументыПериодаПоложительногоАванса.МоментВремени
	|						ТОГДА СводныеДанные.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ) < ДокументыПериодаПоложительногоАванса.Сумма
	|			ТОГДА СводныеДанные.СуммаОстаток - СУММА(ВЫБОР
	|						КОГДА СводныеДанные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|								И СводныеДанные.МоментВремени > ДокументыПериодаПоложительногоАванса.МоментВремени
	|							ТОГДА СводныеДанные.Сумма
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ ДокументыПериодаПоложительногоАванса.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ДокументыПериодаПоложительногоАванса.Организация КАК Организация,
	|	ДокументыПериодаПоложительногоАванса.ХозяйственнаяОперация,
	|	ДокументыПериодаПоложительногоАванса.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги) КАК ВидРасходов
	|ПОМЕСТИТЬ ДокументыОплатыПодотчетникам
	|ИЗ
	|	ДокументыПериодаПоложительногоАванса КАК ДокументыПериодаПоложительногоАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПериодаПоложительногоАванса КАК СводныеДанные
	|		ПО ДокументыПериодаПоложительногоАванса.Организация = СводныеДанные.Организация
	|			И ДокументыПериодаПоложительногоАванса.ПодотчетноеЛицо = СводныеДанные.ПодотчетноеЛицо
	|ГДЕ
	|	ДокументыПериодаПоложительногоАванса.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПериодаПоложительногоАванса.Организация,
	|	ДокументыПериодаПоложительногоАванса.ХозяйственнаяОперация,
	|	ДокументыПериодаПоложительногоАванса.Период,
	|	ДокументыПериодаПоложительногоАванса.Регистратор,
	|	ДокументыПериодаПоложительногоАванса.ПодотчетноеЛицо,
	|	СводныеДанные.СуммаОстаток,
	|	ДокументыПериодаПоложительногоАванса.СуммаОплаты,
	|	ДокументыПериодаПоложительногоАванса.Сумма
	|
	|ИМЕЮЩИЕ
	|	СводныеДанные.СуммаОстаток - СУММА(ВЫБОР
	|			КОГДА СводныеДанные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И СводныеДанные.МоментВремени > ДокументыПериодаПоложительногоАванса.МоментВремени
	|				ТОГДА СводныеДанные.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредстваУПодотчетныхЛиц.Период,
	|	ДенежныеСредстваУПодотчетныхЛиц.Регистратор,
	|	СУММА(ДенежныеСредстваУПодотчетныхЛиц.СуммаРегл),
	|	ДенежныеСредстваУПодотчетныхЛиц.Организация,
	|	ДенежныеСредстваУПодотчетныхЛиц.ХозяйственнаяОперация,
	|	ДенежныеСредстваУПодотчетныхЛиц.ПодотчетноеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваУПодотчетныхЛиц
	|ГДЕ
	|	ДенежныеСредстваУПодотчетныхЛиц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДенежныеСредстваУПодотчетныхЛиц.Организация = &Организация
	|	И ДенежныеСредстваУПодотчетныхЛиц.Период МЕЖДУ &НачДата И &КонДата
	|	И ДенежныеСредстваУПодотчетныхЛиц.СуммаРегл <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваУПодотчетныхЛиц.Регистратор,
	|	ДенежныеСредстваУПодотчетныхЛиц.Период,
	|	ДенежныеСредстваУПодотчетныхЛиц.Организация,
	|	ДенежныеСредстваУПодотчетныхЛиц.ХозяйственнаяОперация,
	|	ДенежныеСредстваУПодотчетныхЛиц.ПодотчетноеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПодотчетноеЛицо";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОплатамЗарплатыИНалогов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.Период,
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.Регистратор КАК Регистратор,
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.Организация КАК Организация,
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДенежныеСредстваДоходыРасходыОбороты.СтатьяДоходовРасходов КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|			ТОГДА ДвиженияДенежныеСредстваДоходыРасходыОбороты.СтатьяДоходовРасходов
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДенежныеСредстваДоходыРасходыОбороты.СтатьяДоходовРасходов КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДепонированнаяЗарплата)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|		ИНАЧЕ ДвиженияДенежныеСредстваДоходыРасходыОбороты.АналитикаАктивовПассивов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.СуммаРеглОборот КАК Сумма,
	|	0 КАК НДС,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДвиженияДенежныеСредстваДоходыРасходыОбороты.СтатьяДоходовРасходов КАК ПланВидовХарактеристик.СтатьиАктивовПассивов)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|	КОНЕЦ КАК ВидРасходов,
	|	""Приход"" КАК ВидОперации,
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.Регистратор КАК ДокументВозникновенияРасходов,
	|   ИСТИНА КАК НеЕНП
	|ПОМЕСТИТЬ ДокументыОплатыНалогаИЗарплаты
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
	|			&ДатаНачалаАнализаОплатыНалогов,
	|			&КонГраница,
	|			Регистратор,
	|			Организация = &Организация
	|				И АналитикаАктивовПассивов <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ЕдиныйНалоговыйПлатеж)
	|				И СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|				И ВЫРАЗИТЬ(СтатьяДоходовРасходов КАК ПланВидовХарактеристик.СтатьиАктивовПассивов) В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда), ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги), ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДепонированнаяЗарплата))) КАК ДвиженияДенежныеСредстваДоходыРасходыОбороты
	|ГДЕ
	|	(ДвиженияДенежныеСредстваДоходыРасходыОбороты.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|			ИЛИ ДвиженияДенежныеСредстваДоходыРасходыОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ИЛИ ДвиженияДенежныеСредстваДоходыРасходыОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ИЛИ ДвиженияДенежныеСредстваДоходыРасходыОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УплатыНалогов.Период КАК Период,
	|	УплатыНалогов.ПлатежныйДокумент КАК Регистратор,
	|	УплатыНалогов.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	УплатыНалогов.Налог КАК СтатьяРасходов,
	|	УплатыНалогов.Сумма КАК Сумма,
	|	0 КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги) КАК ВидРасходов,
	|	""Приход"" КАК ВидОперации,
	|	УплатыНалогов.Регистратор КАК ДокументВозникновенияРасходов,
	|   ЛОЖЬ КАК НеЕНП
	|
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК УплатыНалогов
	|ГДЕ
	|	УплатыНалогов.Период МЕЖДУ &НачДата И &КонДата
	|	И УплатыНалогов.Организация = &Организация
	|	И УплатыНалогов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И УплатыНалогов.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ВидРасходов,
	|	СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплатыНалогаИЗарплаты.Период,
	|	ДокументыОплатыНалогаИЗарплаты.Регистратор,
	|	ДокументыОплатыНалогаИЗарплаты.НеЕНП,
	|	ДокументыОплатыНалогаИЗарплаты.Организация КАК Организация,
	|	ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов КАК СтатьяРасходов,
	|	ЕСТЬNULL(РасходныйКассовыйОрдер.ХозяйственнаяОперация, СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ссылка.ХозяйственнаяОперация) КАК ХозяйственнаяОперация,
	|	СУММА(ВЫБОР
	|		КОГДА СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ведомость ЕСТЬ NULL
	|			ТОГДА ДокументыОплатыНалогаИЗарплаты.Сумма
	|		ИНАЧЕ СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Сумма
	|	КОНЕЦ) КАК Сумма,
	|	ЕСТЬNULL(РасходныйКассовыйОрдер.Ведомость.ПериодРегистрации, СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ведомость.ПериодРегистрации) КАК ПериодРегистрации,
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов
	|ПОМЕСТИТЬ ДокументыОплатыЗарплатыБезУчетаЗачтенныхОплат
	|ИЗ
	|	ДокументыОплатыНалогаИЗарплаты КАК ДокументыОплатыНалогаИЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ДокументыОплатыНалогаИЗарплаты.Регистратор = РасходныйКассовыйОрдер.Ссылка
	|			И (РасходныйКассовыйОрдер.Проведен)
	|			И (ДокументыОплатыНалогаИЗарплаты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты
	|		ПО ДокументыОплатыНалогаИЗарплаты.Регистратор = СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ссылка
	|			И (СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ссылка.Проведен)
	|			И (СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ведомость <> НЕОПРЕДЕЛЕНО)
	|			И (ДокументыОплатыНалогаИЗарплаты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата))
	|ГДЕ
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|	И ВЫБОР
	|			КОГДА СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ведомость ЕСТЬ NULL 
	|				ТОГДА ДокументыОплатыНалогаИЗарплаты.Сумма
	|			ИНАЧЕ СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Сумма
	|		КОНЕЦ > 0
	|	И ЕСТЬNULL(РасходныйКассовыйОрдер.Ведомость.ПериодРегистрации, СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ведомость.ПериодРегистрации) <= &КонДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(РасходныйКассовыйОрдер.Ведомость.ПериодРегистрации, СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ведомость.ПериодРегистрации),
	|	ДокументыОплатыНалогаИЗарплаты.Период,
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.Регистратор,
	|	ДокументыОплатыНалогаИЗарплаты.НеЕНП,
	|	ДокументыОплатыНалогаИЗарплаты.Организация,
	|	ЕСТЬNULL(РасходныйКассовыйОрдер.ХозяйственнаяОперация, СписаниеБезналичныхДенежныхСредствВедомостиНаВыплатуЗарплаты.Ссылка.ХозяйственнаяОперация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Организация,
	|	ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплатыНалогаИЗарплаты.Период,
	|	ДокументыОплатыНалогаИЗарплаты.Регистратор,
	|	ДокументыОплатыНалогаИЗарплаты.Организация КАК Организация,
	|	ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов КАК СтатьяРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументыОплатыНалогаИЗарплаты.Сумма - СУММА(ЕСТЬNULL(РасходыПриУСН.СуммаОплатыПриход, 0)) КАК Сумма,
	|	ДокументыОплатыНалогаИЗарплаты.ПериодРегистрации КАК ПериодРегистрации,
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов
	|ПОМЕСТИТЬ ДокументыОплатыЗарплаты
	|ИЗ
	|	ДокументыОплатыЗарплатыБезУчетаЗачтенныхОплат КАК ДокументыОплатыНалогаИЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН.Обороты(
	|				ДОБАВИТЬКДАТЕ(&НачДата, ГОД, -1),
	|				&НачДата,
	|				Регистратор,
	|				Организация = &Организация
	|					И ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)) КАК РасходыПриУСН
	|		ПО ДокументыОплатыНалогаИЗарплаты.Регистратор = РасходыПриУСН.Регистратор
	|			И ДокументыОплатыНалогаИЗарплаты.Организация = РасходыПриУСН.Организация
	|			И (РасходыПриУСН.СуммаОплатыПриход > 0)
	|			И ДокументыОплатыНалогаИЗарплаты.НеЕНП 
	|			И (ДокументыОплатыНалогаИЗарплаты.ПериодРегистрации =
	|					ВЫРАЗИТЬ(РасходыПриУСН.ДокументВозникновенияРасходов КАК Документ.ОтражениеЗарплатыВФинансовомУчете).ПериодРегистрации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплатыНалогаИЗарплаты.Период,
	|	ДокументыОплатыНалогаИЗарплаты.Регистратор,
	|	ДокументыОплатыНалогаИЗарплаты.Организация,
	|	ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.ХозяйственнаяОперация,
	|	ДокументыОплатыНалогаИЗарплаты.Сумма,
	|	ДокументыОплатыНалогаИЗарплаты.ПериодРегистрации,
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов
	|	
	|ИМЕЮЩИЕ
	|	ДокументыОплатыНалогаИЗарплаты.Сумма - СУММА(ЕСТЬNULL(РасходыПриУСН.СуммаОплатыПриход, 0)) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтатьяРасходов,
	|	ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплатыНалогаИЗарплаты.Организация,
	|	ДокументыОплатыНалогаИЗарплаты.Сумма - СУММА(ЕСТЬNULL(РасходыПриУСН.СуммаОплатыПриход, 0)) КАК Сумма,
	|	ДокументыОплатыНалогаИЗарплаты.Период,
	|	НЕ ДокументыОплатыНалогаИЗарплаты.НеЕНП КАК ЕНП,
	|	ДокументыОплатыНалогаИЗарплаты.Регистратор,
	|	ДокументыОплатыНалогаИЗарплаты.ХозяйственнаяОперация,
	|	ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов
	|ПОМЕСТИТЬ ДокументыОплатыНалога
	|ИЗ
	|	ДокументыОплатыНалогаИЗарплаты КАК ДокументыОплатыНалогаИЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыПриУСН.Обороты(
	|				ДОБАВИТЬКДАТЕ(&НачДата, ГОД, -1),
	|				&НачДата,
	|				Регистратор,
	|				Организация = &Организация
	|					И ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)) КАК РасходыПриУСН
	|		ПО ДокументыОплатыНалогаИЗарплаты.Регистратор = РасходыПриУСН.Регистратор
	|			И ДокументыОплатыНалогаИЗарплаты.Организация = РасходыПриУСН.Организация
	|			И ДокументыОплатыНалогаИЗарплаты.НеЕНП 
	|			И ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов = РасходыПриУСН.СтатьяРасходов
	|			И (РасходыПриУСН.СуммаОплатыПриход > 0)
	|ГДЕ
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	И ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплатыНалогаИЗарплаты.Регистратор,
	|	ДокументыОплатыНалогаИЗарплаты.Сумма,
	|	ДокументыОплатыНалогаИЗарплаты.Организация,
	|	ДокументыОплатыНалогаИЗарплаты.НеЕНП,
	|	ДокументыОплатыНалогаИЗарплаты.ХозяйственнаяОперация,
	|	ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.Период
	|	
	|ИМЕЮЩИЕ
	|	ДокументыОплатыНалогаИЗарплаты.Сумма - СУММА(ЕСТЬNULL(РасходыПриУСН.СуммаОплатыПриход, 0)) > 0;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплатыНалогаИЗарплаты.Организация,
	|	ПодтверждениеОплатыНДСВБюджет.Сумма КАК Сумма,
	|	ДокументыОплатыНалогаИЗарплаты.Период,
	|	ДокументыОплатыНалогаИЗарплаты.Регистратор,
	|	ДокументыОплатыНалогаИЗарплаты.ХозяйственнаяОперация,
	|	ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов,
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов,
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура КАК ДокументВозникновенияРасходов,
	|	NULL КАК НомерОтметкиОРегистрации,
	|	NULL КАК ДатаПодтвержденияОплаты 
	|ПОМЕСТИТЬ ДокументыОплатыНДСТоваровИзЕАЭС
	|ИЗ
	|	ДокументыОплатыНалогаИЗарплаты КАК ДокументыОплатыНалогаИЗарплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО ДокументыОплатыНалогаИЗарплаты.Регистратор = ПодтверждениеОплатыНДСВБюджет.ДокументРегистратор
	|			И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.Оплачено)
	|ГДЕ
	|	ДокументыОплатыНалогаИЗарплаты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)
	|	И ДокументыОплатыНалогаИЗарплаты.СтатьяРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПодтверждениеОплатыНДСВБюджет.СчетФактура КАК Документ.ЗаявлениеОВвозеТоваров).Организация,
	|	ОжидаетОплатыНДСВБюджет.Сумма,
	|	ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты,
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги),
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура,
	|	ПодтверждениеОплатыНДСВБюджет.НомерОтметкиОРегистрации,
	|	ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ОжидаетОплатыНДСВБюджет
	|		ПО (ОжидаетОплатыНДСВБюджет.СчетФактура = ПодтверждениеОплатыНДСВБюджет.СчетФактура)
	|			И (ОжидаетОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ОжидаетОплаты))
	|ГДЕ
	|	ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|	И ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты МЕЖДУ &НачДата И &КонДата
	|	И ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты >= &ДатаПереходаНаЕНП	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОплатыНалогаИЗарплаты;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОплатыЗарплатыБезУчетаЗачтенныхОплат";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКДокументамВозникновенияРасходов()
	
	МассивТекстовЗапросов = Новый Массив;
	
	#Область ДанныеПоСебестоимости
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоСебестоимости.Организация КАК Организация,
	|	ДанныеПоСебестоимости.Регистратор КАК Регистратор,
	|	ДанныеПоСебестоимости.Период,
	|	ДанныеПоСебестоимости.НДС,
	|	ДанныеПоСебестоимости.Сумма,
	|	0 КАК СуммаОплаты,
	|	ДанныеПоСебестоимости.ХозяйственнаяОперация,
	|	ДанныеПоСебестоимости.ВидОперации,
	|	ДанныеПоСебестоимости.ВидРасходов КАК ВидРасходов,
	|	ДанныеПоСебестоимости.ЭлементРасходов КАК ЭлементРасходов,
	|	ДанныеПоСебестоимости.Партия КАК Партия,
	|	ДанныеПоСебестоимости.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ДанныеПоСебестоимости.СтатьяРасходов,
	|	ДанныеПоСебестоимости.ВидДеятельности КАК ВидДеятельности,
	|	ДанныеПоСебестоимости.ПризнаватьРасходамиПриУСН КАК ПризнаватьРасходамиПриУСН,
	|	ЕСТЬNULL(ПлатежныеДокументы.Контрагент, """") КАК Контрагент,
	|	ЕСТЬNULL(ПлатежныеДокументы.Договор, """") КАК Договор,
	|	ДанныеПоСебестоимости.Сторно КАК Сторно
	|ПОМЕСТИТЬ ДокументыВозникновенияРасходов
	|ИЗ
	|	ДанныеПоСебестоимости КАК ДанныеПоСебестоимости
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПлатежныеДокументы КАК ПлатежныеДокументы
	|	ПО ПлатежныеДокументы.Организация = ДанныеПоСебестоимости.Организация
	|		И ПлатежныеДокументы.ДокументВозникновенияРасходов = ДанныеПоСебестоимости.ДокументВозникновенияРасходов
	|ГДЕ
	|	НЕ ДанныеПоСебестоимости.ВидОперации В (""Списание"", ""ВозвратКлиента"")
	|	И НЕ (ДанныеПоСебестоимости.ВидОперации = ""ДопРасходы""
	|		И ДанныеПоСебестоимости.Партия = ДанныеПоСебестоимости.ДокументВозникновенияРасходов)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПрочиеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасходы.Организация,
	|	ПрочиеРасходы.Регистратор,
	|	ПрочиеРасходы.Период,
	|	СУММА(ПрочиеРасходы.НДС),
	|	СУММА(ПрочиеРасходы.Сумма),
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.ВидОперации = ""РасходПриОплате""
	|		ТОГДА СУММА(ПрочиеРасходы.Сумма)
	|		ИНАЧЕ СУММА(0)
	|	КОНЕЦ,
	|	ПрочиеРасходы.ХозяйственнаяОперация,
	|	ПрочиеРасходы.ВидОперации,
	|	ПрочиеРасходы.ВидРасходов,
	|	ПрочиеРасходы.ЭлементРасходов,
	|	ПрочиеРасходы.ДокументВозникновенияРасходов,
	|	ПрочиеРасходы.ДокументВозникновенияРасходов,
	|	ПрочиеРасходы.СтатьяРасходов,
	|	ПрочиеРасходы.ВидДеятельности,
	|	ИСТИНА,
	|	ПрочиеРасходы.Контрагент,
	|	ПрочиеРасходы.Договор,
	|	ПрочиеРасходы.Сторно
	|ИЗ
	|	ПрочиеРасходы КАК ПрочиеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.Организация,
	|	ПрочиеРасходы.СтатьяРасходов,
	|	ПрочиеРасходы.Регистратор,
	|	ПрочиеРасходы.Период,
	|	ПрочиеРасходы.ХозяйственнаяОперация,
	|	ПрочиеРасходы.ВидРасходов,
	|	ПрочиеРасходы.ЭлементРасходов,
	|	ПрочиеРасходы.ДокументВозникновенияРасходов,
	|	ПрочиеРасходы.ВидОперации,
	|	ПрочиеРасходы.ВидДеятельности,
	|	ПрочиеРасходы.Контрагент,
	|	ПрочиеРасходы.Договор,
	|	ПрочиеРасходы.Сторно";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область РасходыПоЗарплате
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходыПоЗарплатеИНалогам.Организация,
	|	РасходыПоЗарплатеИНалогам.Регистратор,
	|	РасходыПоЗарплатеИНалогам.Период,
	|	РасходыПоЗарплатеИНалогам.НДС,
	|	РасходыПоЗарплатеИНалогам.Сумма,
	|	0 КАК СуммаОплаты,
	|	РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация,
	|	РасходыПоЗарплатеИНалогам.ВидОперации,
	|	РасходыПоЗарплатеИНалогам.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	РасходыПоЗарплатеИНалогам.ДокументВозникновенияРасходов,
	|	РасходыПоЗарплатеИНалогам.ДокументВозникновенияРасходов,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|	ИСТИНА,
	|	"""" КАК Контрагент,
	|	"""" КАК Договор,
	|	ЛОЖЬ
	|ИЗ
	|	РасходыПоЗарплате КАК РасходыПоЗарплатеИНалогам
	|ГДЕ
	|	РасходыПоЗарплатеИНалогам.Сумма > 0";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область РасходыПоНалогам
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходыПоЗарплатеИНалогам.Организация,
	|	РасходыПоЗарплатеИНалогам.Регистратор,
	|	РасходыПоЗарплатеИНалогам.Период,
	|	РасходыПоЗарплатеИНалогам.НДС,
	|	РасходыПоЗарплатеИНалогам.Сумма,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(ОплатаЗаСчетБольничного.Сумма, 0) > РасходыПоЗарплатеИНалогам.Сумма
	|		ТОГДА РасходыПоЗарплатеИНалогам.Сумма
	|		ИНАЧЕ ЕстьNULL(ОплатаЗаСчетБольничного.Сумма, 0)
	|	КОНЕЦ,
	|	РасходыПоЗарплатеИНалогам.ХозяйственнаяОперация,
	|	РасходыПоЗарплатеИНалогам.ВидОперации,
	|	РасходыПоЗарплатеИНалогам.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	РасходыПоЗарплатеИНалогам.ДокументВозникновенияРасходов,
	|	РасходыПоЗарплатеИНалогам.ДокументВозникновенияРасходов,
	|	РасходыПоЗарплатеИНалогам.СтатьяРасходов,
	|	РасходыПоЗарплатеИНалогам.ВидДеятельности,
	|	РасходыПоЗарплатеИНалогам.ПризнаватьРасходамиПриУСН,
	|	"""" КАК Контрагент,
	|	"""" КАК Договор,
	|	ЛОЖЬ
	|ИЗ
	|	РасходыПоНалогам КАК РасходыПоЗарплатеИНалогам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыЗаСчетРанееВнесенныхСтраховыхВзносов КАК ОплатаЗаСчетБольничного
	|			ПО РасходыПоЗарплатеИНалогам.Организация = ОплатаЗаСчетБольничного.Организация
	|			И РасходыПоЗарплатеИНалогам.СтатьяРасходов = ОплатаЗаСчетБольничного.СтатьяРасходов
	|			И РасходыПоЗарплатеИНалогам.ДокументВозникновенияРасходов = ОплатаЗаСчетБольничного.Регистратор
	|		
	|ГДЕ
	|	РасходыПоЗарплатеИНалогам.Сумма > 0";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область РасходыПоКредитамЛизингу
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходыПоКредитамЛизингу.Организация,
	|	РасходыПоКредитамЛизингу.Регистратор,
	|	РасходыПоКредитамЛизингу.Период,
	|	РасходыПоКредитамЛизингу.НДС,
	|	РасходыПоКредитамЛизингу.Сумма,
	|	0 КАК СуммаОплаты,
	|	РасходыПоКредитамЛизингу.ХозяйственнаяОперация,
	|	РасходыПоКредитамЛизингу.ВидОперации,
	|	РасходыПоКредитамЛизингу.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	РасходыПоКредитамЛизингу.ДокументВозникновенияРасходов,
	|	РасходыПоКредитамЛизингу.ДокументВозникновенияРасходов,
	|	РасходыПоКредитамЛизингу.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|	ИСТИНА,
	|	РасходыПоКредитамЛизингу.Контрагент,
	|	РасходыПоКредитамЛизингу.Договор,
	|	РасходыПоКредитамЛизингу.Сторно
	|ИЗ
	|	РасходыПоКредитамЛизингу КАК РасходыПоКредитамЛизингу
	|ГДЕ
	|	РасходыПоКредитамЛизингу.ВидОперации = ""Приход""";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область СторноВводаНачальныхОстатков
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВводНачальныхОстатков.Организация,
	|	ВводНачальныхОстатков.Регистратор,
	|	ВводНачальныхОстатков.Период,
	|	ВводНачальныхОстатков.НДС,
	|	ВводНачальныхОстатков.СуммаРасходов,
	|	ВводНачальныхОстатков.СуммаОплаты КАК СуммаОплаты,
	|	ВводНачальныхОстатков.ХозяйственнаяОперация,
	|	ВводНачальныхОстатков.ВидОперации,
	|	ВводНачальныхОстатков.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	ВводНачальныхОстатков.Партия,
	|	ВводНачальныхОстатков.ДокументВозникновенияРасходов,
	|	ВводНачальныхОстатков.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|	ИСТИНА,
	|	ВводНачальныхОстатков.Контрагент,
	|	ВводНачальныхОстатков.Договор,
	|	ВводНачальныхОстатков.Сторно
	|ИЗ
	|	ВтВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.ВидОперации = ""СторноВНО""";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияРасходов,
	|	Регистратор,
	|	ВидРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКДокументамСписанияРасходов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоСебестоимости.Организация КАК Организация,
	|	ДанныеПоСебестоимости.Регистратор КАК Регистратор,
	|	ДанныеПоСебестоимости.Период,
	|	ДанныеПоСебестоимости.НДС,
	|	ДанныеПоСебестоимости.Сумма,
	|	ДанныеПоСебестоимости.ХозяйственнаяОперация,
	|	ДанныеПоСебестоимости.ВидОперации,
	|	ДанныеПоСебестоимости.ВидРасходов,
	|	ВЫБОР
	|		КОГДА ДанныеПоСебестоимости.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары) И ДанныеПоСебестоимости.ХозяйственнаяОперация В (&ХозОперацииСписанияМатериалов)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы)
	|		КОГДА ДанныеПоСебестоимости.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы) И ДанныеПоСебестоимости.ХозяйственнаяОперация В (&ХозОперацииСписанияТоваров)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары)
	|		КОГДА ДанныеПоСебестоимости.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары) И ДанныеПоСебестоимости.ХозяйственнаяОперация В (&ХозОперацииСписанияМатериалов)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы)
	|		КОГДА ДанныеПоСебестоимости.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы) И ДанныеПоСебестоимости.ХозяйственнаяОперация В (&ХозОперацииСписанияТоваров)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары)
	|		КОГДА ДанныеПоСебестоимости.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы) И ДанныеПоСебестоимости.ХозяйственнаяОперация В (&ХозОперацииСписанияТоваров)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|		КОГДА ДанныеПоСебестоимости.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) И ДанныеПоСебестоимости.ХозяйственнаяОперация В (&ХозОперацииСписанияМатериалов)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		ИНАЧЕ ДанныеПоСебестоимости.ВидРасходов
	|	КОНЕЦ КАК ВидРасходовСУчетомХозОперации,
	|	ДанныеПоСебестоимости.ЭлементРасходов,
	|	ДанныеПоСебестоимости.ДокументВозникновенияРасходов,
	|	ДанныеПоСебестоимости.Партия,
	|	ДанныеПоСебестоимости.СтатьяРасходов,
	|	ДанныеПоСебестоимости.ВидДеятельности,
	|	ДанныеПоСебестоимости.ПризнаватьРасходамиПриУСН,
	|	ЕСТЬNULL(Аналитика.Контрагент, ПервичныеДокументы.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(Аналитика.Договор, ПервичныеДокументы.Договор) КАК Договор,
	|	ДанныеПоСебестоимости.Сторно
	|ПОМЕСТИТЬ ДокументыСписанияРасходов
	|ИЗ
	|	ДанныеПоСебестоимости КАК ДанныеПоСебестоимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПереопределяемый
	|		ПО (ДанныеПоСебестоимости.ДокументВозникновенияРасходов = РасчетыСПоставщикамиПереопределяемый.РасчетныйДокумент
	|				ИЛИ ДанныеПоСебестоимости.ДокументВозникновенияРасходов = РасчетыСПоставщикамиПереопределяемый.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщикамиПереопределяемый.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|			И ДанныеПоСебестоимости.Организация = Аналитика.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПервичныйДокумент КАК ПервичныеДокументы
	|		ПО ДанныеПоСебестоимости.ДокументВозникновенияРасходов = ПервичныеДокументы.Ссылка
	|ГДЕ
	|	ДанныеПоСебестоимости.ВидОперации В (""Списание"", ""ВозвратКлиента"")
	|	И ЕСТЬNULL(ДанныеПоСебестоимости.ДокументВозникновенияРасходов, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|	И (НЕ ЕСТЬNULL(Аналитика.Организация, ПервичныеДокументы.Организация) ЕСТЬ NULL ИЛИ РасчетыСПоставщикамиПереопределяемый.Регистратор ЕСТЬ NULL)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ВидРасходов";
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСПоставщикамиПоДокументам", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПоставщикамиПереопределяемый.Регистратор", "РасчетыСПоставщикамиПереопределяемый.ДокументРегистратор");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКДокументамОплатыРасходов()
	
	МассивТекстовЗапросов = Новый Массив;
	
	#Область ОплатыПоставщикамЗакрывающиеОстатки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежныеДокументы.Организация,
	|	ПлатежныеДокументы.Регистратор,
	|	ПлатежныеДокументы.Период,
	|	ПлатежныеДокументы.ДокументВозникновенияРасходов,
	|	Остатки.Партия,
	|	ПлатежныеДокументы.НДС,
	|	ПлатежныеДокументы.Сумма,
	|	ПлатежныеДокументы.ХозяйственнаяОперация,
	|	ПлатежныеДокументы.ВидОперации,
	|	Остатки.ВидРасходов,
	|	Остатки.ЭлементРасходов,
	|	Остатки.СтатьяРасходов,
	|	Остатки.НДС КАК НДСРасходов,
	|	Остатки.СуммаРасходов КАК СуммаРасходов,
	|	ПлатежныеДокументы.Контрагент КАК Контрагент,
	|	ПлатежныеДокументы.Договор КАК Договор,
	|	ПлатежныеДокументы.Сторно КАК Сторно
	|ПОМЕСТИТЬ ДокументыОплаты
	|ИЗ
	|	ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ПлатежныеДокументы.Организация = Остатки.Организация
	|			И ПлатежныеДокументы.ДокументВозникновенияРасходов = Остатки.ДокументВозникновенияРасходов
	|			И НЕ Остатки.ДокументВозникновенияРасходов ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			И НЕ Остатки.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА))";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыПоставщикамЗакрывающиеТекущиеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежныеДокументы.Организация,
	|	ПлатежныеДокументы.Регистратор КАК Регистратор,
	|	ПлатежныеДокументы.Период КАК Период,
	|	ПлатежныеДокументы.ДокументВозникновенияРасходов,
	|	ДокументыВозникновенияРасходов.Партия,
	|	ПлатежныеДокументы.НДС,
	|	ПлатежныеДокументы.Сумма,
	|	ПлатежныеДокументы.ХозяйственнаяОперация,
	|	ПлатежныеДокументы.ВидОперации,
	|	ДокументыВозникновенияРасходов.ВидРасходов КАК ВидРасходов,
	|	ДокументыВозникновенияРасходов.ЭлементРасходов,
	|	ДокументыВозникновенияРасходов.СтатьяРасходов,
	|	ДокументыВозникновенияРасходов.НДС КАК НДСРасходов,
	|	ДокументыВозникновенияРасходов.Сумма КАК СуммаРасходов,
	|	ПлатежныеДокументы.Контрагент КАК Контрагент,
	|	ПлатежныеДокументы.Договор КАК Договор,
	|	ПлатежныеДокументы.Сторно
	|ИЗ
	|	ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходов
	|		ПО ПлатежныеДокументы.Организация = ДокументыВозникновенияРасходов.Организация
	|			И ПлатежныеДокументы.ДокументВозникновенияРасходов = ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов
	|			И НЕ ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			И НЕ ДокументыВозникновенияРасходов.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги))
	|			И (ДокументыВозникновенияРасходов.ВидОперации <> ""ВозвратПоставщику"")
	|ГДЕ
	|	НЕ ДокументыВозникновенияРасходов.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги))
	|	И ДокументыВозникновенияРасходов.ВидОперации <> ""ВозвратПоставщику""";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыПоставщикамЗакрывающиеДопРасходыПриКорректировкеПриобретения
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежныеДокументы.Организация,
	|	ПлатежныеДокументы.Регистратор,
	|	ПлатежныеДокументы.Период,
	|	Остатки.ДокументВозникновенияРасходов,
	|	Остатки.Партия,
	|	ВЫБОР КОГДА ПлатежныеДокументы.НДС < Остатки.НДС ТОГДА ПлатежныеДокументы.НДС ИНАЧЕ Остатки.НДС КОНЕЦ,
	|	ВЫБОР КОГДА ПлатежныеДокументы.Сумма < Остатки.СуммаРасходов ТОГДА ПлатежныеДокументы.Сумма ИНАЧЕ Остатки.СуммаРасходов КОНЕЦ,
	|	ПлатежныеДокументы.ХозяйственнаяОперация,
	|	ПлатежныеДокументы.ВидОперации,
	|	Остатки.ВидРасходов,
	|	Остатки.ЭлементРасходов,
	|	Остатки.СтатьяРасходов,
	|	Остатки.НДС,
	|	Остатки.СуммаРасходов,
	|	ПлатежныеДокументы.Контрагент КАК Контрагент,
	|	ПлатежныеДокументы.Договор КАК Договор,
	|	ПлатежныеДокументы.Сторно
	|ИЗ
	|	ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ПлатежныеДокументы.Организация = Остатки.Организация
	|			И (ВЫРАЗИТЬ(ПлатежныеДокументы.ДокументВозникновенияРасходов КАК Документ.КорректировкаПриобретения).ДокументОснование = Остатки.ДокументВозникновенияРасходов)
	|			И Остатки.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары),
	|										ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ТекущиеРасходы
	|		ПО ПлатежныеДокументы.Организация = ТекущиеРасходы.Организация
	|			И ПлатежныеДокументы.ДокументВозникновенияРасходов = ТекущиеРасходы.Регистратор
	|ГДЕ
	|	ТекущиеРасходы.Регистратор ЕСТЬ NULL";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыПоКредитамИЛизингу
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КредитЛизингОплаты.Организация,
	|	КредитЛизингОплаты.Регистратор,
	|	КредитЛизингОплаты.Период,
	|	КредитЛизингОплаты.ДокументВозникновенияРасходов,
	|	КредитЛизингОплаты.ДокументВозникновенияРасходов,
	|	КредитЛизингОплаты.НДС,
	|	КредитЛизингОплаты.Сумма,
	|	КредитЛизингОплаты.ХозяйственнаяОперация,
	|	КредитЛизингОплаты.ВидОперации,
	|	КредитЛизингОплаты.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	КредитЛизингОплаты.СтатьяРасходов,
	|	0,
	|	0,
	|	КредитЛизингОплаты.Контрагент,
	|	КредитЛизингОплаты.Договор,
	|	КредитЛизингОплаты.Сторно
	|ИЗ
	|	РасходыПоКредитамЛизингу КАК КредитЛизингОплаты
	|ГДЕ
	|	КредитЛизингОплаты.ВидОперации = ""Оплата""";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыНалоговЗакрывающиеОстатки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыНалога.Организация,
	|	ДокументыОплатыНалога.Регистратор,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыНалога.Период < &НачДата
	|			ТОГДА &НачДата
	|		ИНАЧЕ ДокументыОплатыНалога.Период
	|	КОНЕЦ,
	|	Остатки.ДокументВозникновенияРасходов,
	|	Остатки.ДокументВозникновенияРасходов,
	|	0,
	|	ДокументыОплатыНалога.Сумма,
	|	ДокументыОплатыНалога.ХозяйственнаяОперация,
	|	""ОплатаБезРазбивкиПоДокументам"",
	|	Остатки.ВидРасходов,
	|	Остатки.ЭлементРасходов,
	|	ДокументыОплатыНалога.СтатьяРасходов,
	|	Остатки.НДС,
	|	Остатки.СуммаРасходов,
	|	"""",
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыНалога КАК ДокументыОплатыНалога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ДокументыОплатыНалога.Организация = Остатки.Организация
	|			И ДокументыОплатыНалога.СтатьяРасходов = Остатки.СтатьяРасходов
	|			И (Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги))
	|ГДЕ
	|	Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыНалоговЗакрывающиеТекущиеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыНалога.Организация,
	|	ДокументыОплатыНалога.Регистратор,
	|	ДокументыОплатыНалога.Период,
	|	ДокументыНачисленияНалогов.ДокументВозникновенияРасходов,
	|	ДокументыНачисленияНалогов.ДокументВозникновенияРасходов,
	|	0,
	|	ДокументыОплатыНалога.Сумма,
	|	ДокументыОплатыНалога.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыНалога.Период > ДокументыНачисленияНалогов.Период
	|			ТОГДА ""ОплатаБезРазбивкиПоДокументам""
	|		ИНАЧЕ ""АвансБезРазбивкиПоДокументам""
	|	КОНЕЦ,
	|	ДокументыНачисленияНалогов.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	ДокументыОплатыНалога.СтатьяРасходов,
	|	ДокументыНачисленияНалогов.НДС,
	|	ДокументыНачисленияНалогов.Сумма,
	|	"""",
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыНалога КАК ДокументыОплатыНалога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходыПоНалогам КАК ДокументыНачисленияНалогов
	|		ПО ДокументыОплатыНалога.Организация = ДокументыНачисленияНалогов.Организация
	|			И ДокументыОплатыНалога.СтатьяРасходов = ДокументыНачисленияНалогов.СтатьяРасходов
	|			И (ДокументыНачисленияНалогов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги))
	|ГДЕ
	|	ДокументыНачисленияНалогов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыЗарплатыЗакрывающиеОстатки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыЗарплаты.Организация,
	|	ДокументыОплатыЗарплаты.Регистратор,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыЗарплаты.Период < &НачДата
	|			ТОГДА &НачДата
	|		ИНАЧЕ ДокументыОплатыЗарплаты.Период
	|	КОНЕЦ,
	|	Остатки.ДокументВозникновенияРасходов,
	|	Остатки.ДокументВозникновенияРасходов,
	|	0,
	|	ДокументыОплатыЗарплаты.Сумма,
	|	ДокументыОплатыЗарплаты.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыЗарплаты.Период > ДокументыОплатыЗарплаты.ПериодРегистрации
	|			ТОГДА ""ОплатаБезРазбивкиПоДокументам""
	|		ИНАЧЕ ""АвансБезРазбивкиПоДокументам""
	|	КОНЕЦ,
	|	Остатки.ВидРасходов,
	|	Остатки.ЭлементРасходов,
	|	Остатки.СтатьяРасходов,
	|	Остатки.НДС,
	|	Остатки.СуммаРасходов,
	|	"""",
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыЗарплаты КАК ДокументыОплатыЗарплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ДокументыОплатыЗарплаты.Организация = Остатки.Организация
	|			И ДокументыОплатыЗарплаты.ВидРасходов = Остатки.ВидРасходов
	|			И (ДокументыОплатыЗарплаты.ПериодРегистрации = ВЫРАЗИТЬ(Остатки.ДокументВозникновенияРасходов КАК Документ.ОтражениеЗарплатыВФинансовомУчете).ПериодРегистрации)
	|			И (Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата))
	|ГДЕ
	|	Остатки.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыЗарплатыЗакрывающиеТекущиеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыЗарплаты.Организация,
	|	ДокументыОплатыЗарплаты.Регистратор,
	|	ДокументыОплатыЗарплаты.Период,
	|	ДокументыНачисленияЗарплаты.ДокументВозникновенияРасходов,
	|	ДокументыНачисленияЗарплаты.ДокументВозникновенияРасходов,
	|	0,
	|	ДокументыОплатыЗарплаты.Сумма,
	|	ДокументыОплатыЗарплаты.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыЗарплаты.Период > ДокументыНачисленияЗарплаты.Период
	|			ТОГДА ""ОплатаБезРазбивкиПоДокументам""
	|		ИНАЧЕ ""АвансБезРазбивкиПоДокументам""
	|	КОНЕЦ,
	|	ДокументыНачисленияЗарплаты.ВидРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	ДокументыНачисленияЗарплаты.СтатьяРасходов,
	|	ДокументыНачисленияЗарплаты.НДС,
	|	ДокументыНачисленияЗарплаты.Сумма,
	|	"""",
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыЗарплаты КАК ДокументыОплатыЗарплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходыПоЗарплате КАК ДокументыНачисленияЗарплаты
	|		ПО ДокументыОплатыЗарплаты.Организация = ДокументыНачисленияЗарплаты.Организация
	|			И ДокументыОплатыЗарплаты.ВидРасходов = ДокументыНачисленияЗарплаты.ВидРасходов
	|			И (ДокументыОплатыЗарплаты.ПериодРегистрации = ВЫРАЗИТЬ(ДокументыНачисленияЗарплаты.ДокументВозникновенияРасходов КАК Документ.ОтражениеЗарплатыВФинансовомУчете).ПериодРегистрации)
	|			И (ДокументыНачисленияЗарплаты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата))
	|			И НЕ ДокументыНачисленияЗарплаты.СтатьяРасходов В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ФСС), ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ФССНС))
	|ГДЕ
	|	ДокументыНачисленияЗарплаты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата)
	|	И НЕ ДокументыНачисленияЗарплаты.СтатьяРасходов В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ФСС), ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ФССНС))";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыПодотчетникамЗакрывающиеОстатки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыПодотчетникам.Организация,
	|	ДокументыОплатыПодотчетникам.Регистратор,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыПодотчетникам.Период < &НачДата
	|			ТОГДА &НачДата
	|		ИНАЧЕ ДокументыОплатыПодотчетникам.Период
	|	КОНЕЦ,
	|	Остатки.ДокументВозникновенияРасходов,
	|	Остатки.Партия,
	|	0,
	|	ДокументыОплатыПодотчетникам.Сумма,
	|	ДокументыОплатыПодотчетникам.ХозяйственнаяОперация,
	|	""ОплатаБезРазбивкиПоДокументам"",
	|	Остатки.ВидРасходов,
	|	Остатки.ЭлементРасходов,
	|	Остатки.СтатьяРасходов,
	|	Остатки.НДС,
	|	Остатки.СуммаРасходов,
	|	ДокументыОплатыПодотчетникам.ПодотчетноеЛицо,
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыПодотчетникам КАК ДокументыОплатыПодотчетникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ДокументыОплатыПодотчетникам.Организация = Остатки.Организация
	|			И (ДокументыОплатыПодотчетникам.ПодотчетноеЛицо = ВЫРАЗИТЬ(Остатки.ДокументВозникновенияРасходов КАК Документ.АвансовыйОтчет).ПодотчетноеЛицо
	|				ИЛИ ДокументыОплатыПодотчетникам.ПодотчетноеЛицо = ВЫРАЗИТЬ(Остатки.ДокументВозникновенияРасходов КАК Документ.ПриобретениеТоваровУслуг).ПодотчетноеЛицо
	|				ИЛИ ДокументыОплатыПодотчетникам.ПодотчетноеЛицо = ВЫРАЗИТЬ(Остатки.ДокументВозникновенияРасходов КАК Документ.ПриобретениеУслугПрочихАктивов).ПодотчетноеЛицо)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыПодотчетникамЗакрывающиеТекущиеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыПодотчетникам.Организация,
	|	ДокументыОплатыПодотчетникам.Регистратор,
	|	ДокументыОплатыПодотчетникам.Период,
	|	ДокументыОтчетовПодотчетников.ДокументВозникновенияРасходов,
	|	ДокументыОтчетовПодотчетников.Партия,
	|	0,
	|	ДокументыОплатыПодотчетникам.Сумма,
	|	ДокументыОплатыПодотчетникам.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыПодотчетникам.Период > ДокументыОтчетовПодотчетников.Период
	|			ТОГДА ""ОплатаБезРазбивкиПоДокументам""
	|		ИНАЧЕ ""АвансБезРазбивкиПоДокументам""
	|	КОНЕЦ,
	|	ДокументыОтчетовПодотчетников.ВидРасходов,
	|	ДокументыОтчетовПодотчетников.ЭлементРасходов,
	|	ДокументыОтчетовПодотчетников.СтатьяРасходов,
	|	ДокументыОтчетовПодотчетников.НДС,
	|	ДокументыОтчетовПодотчетников.Сумма,
	|	ДокументыОплатыПодотчетникам.ПодотчетноеЛицо,
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыПодотчетникам КАК ДокументыОплатыПодотчетникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ДокументыОтчетовПодотчетников
	|		ПО ДокументыОплатыПодотчетникам.Организация = ДокументыОтчетовПодотчетников.Организация
	|			И (ДокументыОплатыПодотчетникам.ПодотчетноеЛицо = ВЫРАЗИТЬ(ДокументыОтчетовПодотчетников.ДокументВозникновенияРасходов КАК Документ.АвансовыйОтчет).ПодотчетноеЛицо
	|				ИЛИ ДокументыОплатыПодотчетникам.ПодотчетноеЛицо = ВЫРАЗИТЬ(ДокументыОтчетовПодотчетников.ДокументВозникновенияРасходов КАК Документ.ПриобретениеТоваровУслуг).ПодотчетноеЛицо
	|				ИЛИ ДокументыОплатыПодотчетникам.ПодотчетноеЛицо = ВЫРАЗИТЬ(ДокументыОтчетовПодотчетников.ДокументВозникновенияРасходов КАК Документ.ПриобретениеУслугПрочихАктивов).ПодотчетноеЛицо)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыПоставщикамЗаОСНМАЗакрывающиеОстатки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиДетально.Организация,
	|	ПлатежныеДокументы.Регистратор,
	|	ПлатежныеДокументы.Период,
	|	ОстаткиДетально.ДокументВозникновенияРасходов,
	|	ОстаткиДетально.ДокументВозникновенияРасходов,
	|	ПлатежныеДокументы.НДС,
	|	ПлатежныеДокументы.Сумма,
	|	ПлатежныеДокументы.ХозяйственнаяОперация,
	|	ПлатежныеДокументы.ВидОперации,
	|	ОстаткиДетально.ВидРасходов,
	|	ОстаткиДетально.ЭлементРасходов,
	|	ОстаткиДетально.СтатьяРасходов,
	|	СУММА(ОстаткиИтого.НДС),
	|	СУММА(ОстаткиИтого.СуммаРасходов),
	|	ПлатежныеДокументы.Контрагент,
	|	ПлатежныеДокументы.Договор,
	|	ПлатежныеДокументы.Сторно
	|ИЗ
	|	ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК ОстаткиДетально
	|		ПО ПлатежныеДокументы.Организация = ОстаткиДетально.Организация
	|			И ПлатежныеДокументы.ДокументВозникновенияРасходов = ОстаткиДетально.ДокументВозникновенияРасходов
	|			И ОстаткиДетально.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК ОстаткиИтого
	|		ПО ПлатежныеДокументы.Организация = ОстаткиИтого.Организация
	|			И ПлатежныеДокументы.ДокументВозникновенияРасходов = ОстаткиИтого.ДокументВозникновенияРасходов
	|			И ОстаткиИтого.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиДетально.Организация,
	|	ПлатежныеДокументы.Регистратор,
	|	ПлатежныеДокументы.Период,
	|	ОстаткиДетально.ДокументВозникновенияРасходов,
	|	ПлатежныеДокументы.НДС,
	|	ПлатежныеДокументы.Сумма,
	|	ПлатежныеДокументы.ХозяйственнаяОперация,
	|	ПлатежныеДокументы.ВидОперации,
	|	ОстаткиДетально.ВидРасходов,
	|	ОстаткиДетально.ЭлементРасходов,
	|	ОстаткиДетально.СтатьяРасходов,
	|	ОстаткиДетально.НДС,
	|	ОстаткиДетально.СуммаРасходов,
	|	ОстаткиДетально.ДокументВозникновенияРасходов,
	|	ПлатежныеДокументы.Контрагент,
	|	ПлатежныеДокументы.Договор,
	|	ПлатежныеДокументы.Сторно,
	|	0";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыПоставщикамЗаОСНМАЗакрывающиеТекущиеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежныеДокументы.Организация,
	|	ПлатежныеДокументы.Регистратор КАК Регистратор,
	|	ПлатежныеДокументы.Период КАК Период,
	|	ПлатежныеДокументы.ДокументВозникновенияРасходов,
	|	ДокументыВозникновенияРасходов.Партия,
	|	ПлатежныеДокументы.НДС,
	|	ПлатежныеДокументы.Сумма,
	|	ПлатежныеДокументы.ХозяйственнаяОперация,
	|	ПлатежныеДокументы.ВидОперации,
	|	ДокументыВозникновенияРасходов.ВидРасходов КАК ВидРасходов,
	|	ДокументыВозникновенияРасходов.ЭлементРасходов,
	|	ДокументыВозникновенияРасходов.СтатьяРасходов,
	|	СУММА(ДокументыВозникновенияРасходовИтого.НДС),
	|	СУММА(ДокументыВозникновенияРасходовИтого.Сумма),
	|	ПлатежныеДокументы.Контрагент,
	|	ПлатежныеДокументы.Договор,
	|	ПлатежныеДокументы.Сторно
	|ИЗ
	|	ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходов
	|		ПО ПлатежныеДокументы.Организация = ДокументыВозникновенияРасходов.Организация
	|			И ПлатежныеДокументы.ДокументВозникновенияРасходов = ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов
	|			И ДокументыВозникновенияРасходов.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходовИтого
	|		ПО ПлатежныеДокументы.Организация = ДокументыВозникновенияРасходовИтого.Организация
	|			И ПлатежныеДокументы.ДокументВозникновенияРасходов = ДокументыВозникновенияРасходовИтого.ДокументВозникновенияРасходов
	|			И ДокументыВозникновенияРасходовИтого.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныеДокументы.Организация,
	|	ПлатежныеДокументы.Регистратор,
	|	ПлатежныеДокументы.ДокументВозникновенияРасходов,
	|	ДокументыВозникновенияРасходов.Партия,
	|	ПлатежныеДокументы.НДС,
	|	ПлатежныеДокументы.Сумма,
	|	ПлатежныеДокументы.ХозяйственнаяОперация,
	|	ПлатежныеДокументы.ВидОперации,
	|	ДокументыВозникновенияРасходов.ВидРасходов,
	|	ДокументыВозникновенияРасходов.ЭлементРасходов,
	|	ДокументыВозникновенияРасходов.СтатьяРасходов,
	|	ДокументыВозникновенияРасходов.НДС,
	|	ДокументыВозникновенияРасходов.Сумма,
	|	ПлатежныеДокументы.Период,
	|	ПлатежныеДокументы.Контрагент,
	|	ПлатежныеДокументы.Договор,
	|	ПлатежныеДокументы.Сторно";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыВБюджетНДСВвозИзЕАЭСЗакрывающиеОстатки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыНалога.Организация,
	|	ДокументыОплатыНалога.Регистратор,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыНалога.Период < &НачДата
	|			ТОГДА &НачДата
	|		ИНАЧЕ ДокументыОплатыНалога.Период
	|	КОНЕЦ,
	|	Остатки.ДокументВозникновенияРасходов,
	|	Остатки.Партия,
	|	ДокументыОплатыНалога.Сумма,
	|	ДокументыОплатыНалога.Сумма,
	|	ДокументыОплатыНалога.ХозяйственнаяОперация,
	|	""Оплата"",
	|	Остатки.ВидРасходов,
	|	Остатки.ЭлементРасходов,
	|	ДокументыОплатыНалога.СтатьяРасходов,
	|	Остатки.НДС,
	|	Остатки.СуммаРасходов,
	|	"""",
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыНДСТоваровИзЕАЭС КАК ДокументыОплатыНалога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ДокументыОплатыНалога.Организация = Остатки.Организация
	|			И ДокументыОплатыНалога.ДокументВозникновенияРасходов = Остатки.ДокументВозникновенияРасходов
	|			И Остатки.ДокументВозникновенияРасходов ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			И НЕ Остатки.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС),
	|										ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА),
	|										ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата),
	|										ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги))";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОплатыВБюджетНДСВвозИзЕАЭСЗакрывающиеТекущиеРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыОплатыНалога.Организация,
	|	ДокументыОплатыНалога.Регистратор,
	|	ДокументыОплатыНалога.Период,
	|	ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов,
	|	ДокументыВозникновенияРасходов.Партия,
	|	ДокументыОплатыНалога.Сумма,
	|	ДокументыОплатыНалога.Сумма,
	|	ДокументыОплатыНалога.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДокументыОплатыНалога.Период > ДокументыВозникновенияРасходов.Период
	|			ТОГДА ""Оплата""
	|		ИНАЧЕ ""Аванс""
	|	КОНЕЦ,
	|	ДокументыВозникновенияРасходов.ВидРасходов,
	|	ДокументыВозникновенияРасходов.ЭлементРасходов,
	|	ДокументыОплатыНалога.СтатьяРасходов,
	|	ДокументыВозникновенияРасходов.НДС,
	|	ДокументыВозникновенияРасходов.Сумма,
	|	"""",
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	ДокументыОплатыНДСТоваровИзЕАЭС КАК ДокументыОплатыНалога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходов
	|		ПО ДокументыОплатыНалога.Организация = ДокументыВозникновенияРасходов.Организация
	|			И ДокументыОплатыНалога.ДокументВозникновенияРасходов = ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов
	|			И ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			И НЕ ДокументыВозникновенияРасходов.ВидРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ОС),
	|																ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.НМА),
	|																ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата),
	|																ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги))
	|			И ДокументыВозникновенияРасходов.ВидОперации <> ""ВозвратПоставщику""";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ВидРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицыРегистраторовРасходов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходов,
	|	ДокументыВозникновенияРасходов.Партия КАК Партия,
	|	ДокументыВозникновенияРасходов.Регистратор КАК Регистратор,
	|	ВЫБОР
	|	    КОГДА ДокументыВозникновенияРасходов.Период >= &ДатаПереходаНаЕНП И ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов  ССЫЛКА Документ.СчетФактураНалоговыйАгент и ДокументыВозникновенияРасходов.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат //Для КУДиР берем дату и номе СФ Налогового  Агента 
	|	      ТОГДА ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов
	|       ИНАЧЕ ДокументыВозникновенияРасходов.Регистратор
	|	КОНЕЦ КАК ДокументДляСвязи,
	|	ВЫБОР
	|	    КОГДА ДокументыВозникновенияРасходов.Период >= &ДатаПереходаНаЕНП И ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов  ССЫЛКА Документ.СчетФактураНалоговыйАгент
	|	      ТОГДА ДокументыВозникновенияРасходов.Сумма
	|		ИНАЧЕ ДокументыВозникновенияРасходов.СуммаОплаты
	|	КОНЕЦ КАК СуммаОплаты,
	|	0 КАК СуммаОтгрузки,
	|	ДокументыВозникновенияРасходов.ВидОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
	|		ИНАЧЕ ДокументыВозникновенияРасходов.ВидРасходов
	|	КОНЕЦ КАК ВидРасходов,
	|	ДокументыВозникновенияРасходов.ЭлементРасходов,
	|	ДокументыВозникновенияРасходов.СтатьяРасходов,
	|	ДокументыВозникновенияРасходов.Период КАК Период,
	|	ДокументыВозникновенияРасходов.ХозяйственнаяОперация,
	|	ДокументыВозникновенияРасходов.Организация,
	|	ДокументыВозникновенияРасходов.НДС КАК НДС,
	|	ДокументыВозникновенияРасходов.Сумма КАК СуммаРасходов,
	|	ЕСТЬNULL(СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат, ДокументыВозникновенияРасходов.ВидДеятельности) КАК ВидДеятельности,
	|	ЕСТЬNULL(СтатьиРасходов.ПризнаватьРасходамиПриУСН, ДокументыВозникновенияРасходов.ПризнаватьРасходамиПриУСН) КАК ПризнаватьРасходамиПриУСН,
	|	ДокументыВозникновенияРасходов.Контрагент,
	|	ДокументыВозникновенияРасходов.Договор,
	|	ДокументыВозникновенияРасходов.Сторно
	|ПОМЕСТИТЬ ТаблицаРегистраторовРасходов
	|ИЗ
	|	ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО СтатьиРасходов.Ссылка = ДокументыВозникновенияРасходов.СтатьяРасходов
	|		И ДокументыВозникновенияРасходов.ВидОперации <> ""Амортизация""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыСписанияРасходов.ДокументВозникновенияРасходов,
	|	ДокументыСписанияРасходов.Партия КАК Партия,
	|	ДокументыСписанияРасходов.Регистратор,
	|	ВЫБОР
	|	    КОГДА ДокументыСписанияРасходов.Период >= &ДатаПереходаНаЕНП И ДокументыСписанияРасходов.ДокументВозникновенияРасходов  ССЫЛКА Документ.СчетФактураНалоговыйАгент 
	|             И ДокументыСписанияРасходов.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат //Для КУДиР берем дату и номер СФ Налогового  Агента 
	|	    ТОГДА ДокументыСписанияРасходов.ДокументВозникновенияРасходов
	|       ИНАЧЕ ДокументыСписанияРасходов.Регистратор
	|	КОНЕЦ КАК ДокументДляСвязи,
	|	0,
	|	ДокументыСписанияРасходов.Сумма,
	|	ДокументыСписанияРасходов.ВидОперации,
	|	ДокументыСписанияРасходов.ВидРасходовСУчетомХозОперации,
	|	ДокументыСписанияРасходов.ЭлементРасходов,
	|	ДокументыСписанияРасходов.СтатьяРасходов,
	|	ДокументыСписанияРасходов.Период,
	|	ДокументыСписанияРасходов.ХозяйственнаяОперация,
	|	ДокументыСписанияРасходов.Организация,
	|	ДокументыСписанияРасходов.НДС,
	|	0,
	|	ДокументыСписанияРасходов.ВидДеятельности,
	|	ДокументыСписанияРасходов.ПризнаватьРасходамиПриУСН,
	|	ДокументыСписанияРасходов.Контрагент,
	|	ДокументыСписанияРасходов.Договор,
	|	ДокументыСписанияРасходов.Сторно
	|ИЗ
	|	ДокументыСписанияРасходов КАК ДокументыСписанияРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОплаты.ДокументВозникновенияРасходов,
	|	ДокументыОплаты.Партия,
	|	ДокументыОплаты.Регистратор,
	|	ДокументыОплаты.Регистратор КАК ДокументДляСвязи,
	|	СУММА(ДокументыОплаты.Сумма),
	|	СУММА(0),
	|	ДокументыОплаты.ВидОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
	|		ИНАЧЕ ДокументыОплаты.ВидРасходов
	|	КОНЕЦ,
	|	ДокументыОплаты.ЭлементРасходов,
	|	ДокументыОплаты.СтатьяРасходов,
	|	ДокументыОплаты.Период,
	|	ДокументыОплаты.ХозяйственнаяОперация,
	|	ДокументыОплаты.Организация,
	|	СУММА(0),
	|	СУММА(0),
	|	ЕСТЬNULL(СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)),
	|	ВЫБОР КОГДА (ДокументыОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|		ИЛИ ДокументыОплаты.Регистратор ССЫЛКА Документ.КорректировкаЗадолженности) И ДокументыОплаты.Регистратор <> ДокументыОплаты.ДокументВозникновенияРасходов
	|		ТОГДА ЛОЖЬ ИНАЧЕ ЕСТЬNULL(СтатьиРасходов.ПризнаватьРасходамиПриУСН, ИСТИНА) КОНЕЦ,
	|	ДокументыОплаты.Контрагент,
	|	ДокументыОплаты.Договор,
	|	ДокументыОплаты.Сторно
	|ИЗ
	|	ДокументыОплаты КАК ДокументыОплаты
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО СтатьиРасходов.Ссылка = ДокументыОплаты.СтатьяРасходов
	|		И СтатьиРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплаты.Регистратор,
	|	ДокументыОплаты.Партия,
	|	ДокументыОплаты.СтатьяРасходов,
	|	ДокументыОплаты.ДокументВозникновенияРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
	|		ИНАЧЕ ДокументыОплаты.ВидРасходов
	|	КОНЕЦ,
	|	ДокументыОплаты.ЭлементРасходов,
	|	ДокументыОплаты.Период,
	|	ДокументыОплаты.Организация,
	|	ДокументыОплаты.ВидОперации,
	|	ДокументыОплаты.ХозяйственнаяОперация,
	|	ЕСТЬNULL(СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)),
	|	ВЫБОР КОГДА (ДокументыОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|		ИЛИ ДокументыОплаты.Регистратор ССЫЛКА Документ.КорректировкаЗадолженности) И ДокументыОплаты.Регистратор <> ДокументыОплаты.ДокументВозникновенияРасходов
	|		ТОГДА ЛОЖЬ ИНАЧЕ ЕСТЬNULL(СтатьиРасходов.ПризнаватьРасходамиПриУСН, ИСТИНА) КОНЕЦ,
	|	ДокументыОплаты.Контрагент,
	|	ДокументыОплаты.Договор,
	|	ДокументыОплаты.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицыНачальнойТаблицы()
	
	МассивТекстовЗапросов = Новый Массив;
	
	#Область ОстаткиПоДаннымСлужебныхРегистров
	ТекстЗапроса = 

	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Остатки.ОстаткиСтарогоМетода
	|		ТОГДА Остатки.Партия
	|		ИНАЧЕ Остатки.ДокументВозникновенияРасходов
	|	КОНЕЦ КАК ДокументВозникновенияРасходов,
	|	Остатки.Партия КАК Партия,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаВозникновенияРасходов,
	|	СУММА(ВЫБОР
	|		КОГДА (Остатки.СуммаОплаты) > (Остатки.СуммаРасходов) И НЕ Остатки.ВидРасходов В
	|			(ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Лизинг), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты))
	|			ТОГДА (Остатки.СуммаРасходов)
	|		ИНАЧЕ (Остатки.СуммаОплаты)
	|	КОНЕЦ) КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА Остатки.ОстаткиСтарогоМетода И Остатки.ВидРасходов В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|		КОГДА Остатки.ОстаткиСтарогоМетода И Остатки.ВидРасходов В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		ИНАЧЕ Остатки.ВидРасходов
	|	КОНЕЦ КАК ВидРасходов,
	|	Остатки.ЭлементРасходов КАК ЭлементРасходов,
	|	Остатки.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Остатки.СуммаРасходов) КАК СуммаРасходов,
	|	СУММА(Остатки.НДС) КАК НДС,
	|	СУММА(Остатки.СуммаОтгрузки) КАК СуммаОтгрузки,
	|	ВЫБОР КОГДА Остатки.ОстаткиСтарогоМетода
	|		ТОГДА ""СтарыйМетод""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипОстатка,
	|	СУММА(Остатки.Признано + Остатки.НеПризнано) КАК РасходыВсего,
	|	СУММА(Остатки.Признано) КАК Признано,
	|	СУММА(Остатки.НеПризнано) КАК НеПризнано
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Остатки.ОстаткиСтарогоМетода
	|		ТОГДА Остатки.Партия
	|		ИНАЧЕ Остатки.ДокументВозникновенияРасходов
	|	КОНЕЦ,
	|	Остатки.Партия,
	|	ВЫБОР
	|		КОГДА Остатки.ОстаткиСтарогоМетода И Остатки.ВидРасходов В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыТовары), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиТовары))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|		КОГДА Остатки.ОстаткиСтарогоМетода И Остатки.ВидРасходов В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходыМатериалы), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Материалы)
	|		ИНАЧЕ Остатки.ВидРасходов
	|	КОНЕЦ,
	|	Остатки.ЭлементРасходов,
	|	Остатки.СтатьяРасходов,
	|	Остатки.СуммаРасходов,
	|	Остатки.НДС,
	|	Остатки.СуммаОтгрузки,
	|	ВЫБОР КОГДА Остатки.ОстаткиСтарогоМетода
	|		ТОГДА ""СтарыйМетод""
	|		ИНАЧЕ """"
	|	КОНЕЦ";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОстаткиФормирующиесяПоТекущимЗаписям
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов,
	|	ДокументыВозникновенияРасходов.Партия,
	|	ДокументыВозникновенияРасходов.Период КАК ДатаВозникновенияРасходов,
	|	0,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
	|		ИНАЧЕ ДокументыВозникновенияРасходов.ВидРасходов
	|	КОНЕЦ,
	|	ДокументыВозникновенияРасходов.ЭлементРасходов,
	|	ДокументыВозникновенияРасходов.СтатьяРасходов,
	|	ДокументыВозникновенияРасходов.Сумма,
	|	ДокументыВозникновенияРасходов.НДС,
	|	0,
	|	"""",
	|	0,
	|	0,
	|	0
	|ИЗ
	|	ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО СтатьиРасходов.Ссылка = ДокументыВозникновенияРасходов.СтатьяРасходов
	|		И СтатьиРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|ГДЕ
	|	НЕ ДокументыВозникновенияРасходов.ВидОперации = ""ВозвратПоставщику""
	|	И НЕ ДокументыВозникновенияРасходов.Сторно
	|	И НЕ ДокументыВозникновенияРасходов.ВидРасходов В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Лизинг), ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Кредиты))";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОстаткиФормирующиесяПоВозвратамОтКлиентовЗаТовары
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.ДокументВозникновенияРасходов,
	|	Возвраты.Партия,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаВозникновенияРасходов,
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	Возвраты.ВидРасходов,
	|	Возвраты.ЭлементРасходов,
	|	Возвраты.СтатьяРасходов,
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.НДСОборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	""Возврат"",
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа7Оборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот - ДанныеПоПризнанию.Графа7Оборот, 0)
	|ИЗ
	|	ДокументыСписанияРасходов КАК Возвраты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|	ПО Остатки.ДокументВозникновенияРасходов = Возвраты.ДокументВозникновенияРасходов
	|		И Остатки.Организация = Возвраты.Организация
	|		И Остатки.ВидРасходов = Возвраты.ВидРасходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходов
	|	ПО ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов = Возвраты.ДокументВозникновенияРасходов
	|		И ДокументыВозникновенияРасходов.Организация = Возвраты.Организация
	|		И ДокументыВозникновенияРасходов.ВидРасходов = Возвраты.ВидРасходов
	|		И НЕ (ДокументыВозникновенияРасходов.ВидОперации = ""ВозвратПоставщику"" И НЕ ДокументыВозникновенияРасходов.Сторно
	|		ИЛИ ДокументыВозникновенияРасходов.ВидОперации <> ""ВозвратПоставщику"" И ДокументыВозникновенияРасходов.Сторно)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(, &НачДата,, Организация = &Организация) КАК ДанныеПоПризнанию
	|	ПО Возвраты.ДокументВозникновенияРасходов = ДанныеПоПризнанию.ДокументВозникновенияДоходовРасходов
	|		И Возвраты.Организация = ДанныеПоПризнанию.Организация
	|		И Возвраты.ВидРасходовСУчетомХозОперации = ДанныеПоПризнанию.ВидРасходов
	|ГДЕ
	|	(Возвраты.ВидОперации В (""ВозвратКлиента"") И НЕ Возвраты.Сторно
	|		ИЛИ Возвраты.ВидОперации <> ""ВозвратКлиента"" И Возвраты.Сторно)
	|	И Остатки.Организация ЕСТЬ NULL
	|	И ДокументыВозникновенияРасходов.Организация ЕСТЬ NULL";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОстаткиФормирующиесяПоВозвратамПоставщикуЗаУслуги
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.ДокументВозникновенияРасходов,
	|	Возвраты.Партия,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаВозникновенияРасходов,
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	Возвраты.ВидРасходов,
	|	Возвраты.ЭлементРасходов,
	|	Возвраты.СтатьяРасходов,
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.НДСОборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	""Возврат"",
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа7Оборот, 0),
	|	ЕСТЬNULL(ДанныеПоПризнанию.Графа6Оборот - ДанныеПоПризнанию.Графа7Оборот, 0)
	|ИЗ
	|	ДокументыВозникновенияРасходов КАК Возвраты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|	ПО Остатки.ДокументВозникновенияРасходов = Возвраты.ДокументВозникновенияРасходов
	|		И Остатки.Организация = Возвраты.Организация
	|		И Остатки.ВидРасходов = Возвраты.ВидРасходов
	|		И Остатки.СтатьяРасходов = Возвраты.СтатьяРасходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыВозникновенияРасходов КАК ДокументыВозникновенияРасходов
	|	ПО ДокументыВозникновенияРасходов.ДокументВозникновенияРасходов = Возвраты.ДокументВозникновенияРасходов
	|		И ДокументыВозникновенияРасходов.Организация = Возвраты.Организация
	|		И ДокументыВозникновенияРасходов.ВидРасходов = Возвраты.ВидРасходов
	|		И ДокументыВозникновенияРасходов.СтатьяРасходов = Возвраты.СтатьяРасходов
	|		И НЕ (ДокументыВозникновенияРасходов.ВидОперации = ""ВозвратПоставщику"" И НЕ ДокументыВозникновенияРасходов.Сторно
	|		ИЛИ ДокументыВозникновенияРасходов.ВидОперации <> ""ВозвратПоставщику"" И ДокументыВозникновенияРасходов.Сторно)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(, &НачДата,, Организация = &Организация) КАК ДанныеПоПризнанию
	|	ПО Возвраты.ДокументВозникновенияРасходов = ДанныеПоПризнанию.ДокументВозникновенияДоходовРасходов
	|		И Возвраты.Организация = ДанныеПоПризнанию.Организация
	|		И Возвраты.ВидРасходов = ДанныеПоПризнанию.ВидРасходов
	|		И Возвраты.СтатьяРасходов = ДанныеПоПризнанию.Статья
	|ГДЕ
	|	(Возвраты.ВидОперации = ""ВозвратПоставщику"" И НЕ Возвраты.Сторно
	|		ИЛИ Возвраты.ВидОперации <> ""ВозвратПоставщику"" И Возвраты.Сторно)
	|	И Возвраты.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
	|	И Остатки.Организация ЕСТЬ NULL
	|	И ДокументыВозникновенияРасходов.Организация ЕСТЬ NULL";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыборкаДокументовДляЗаполненияРасходов(ВременныеТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Текст = ТекстЗапросаВыборкиДокументовДляЗаполненияРасходов();
	Запрос.УстановитьПараметр("ДатаПереходаНаЕНП", ДатаПримененияЕНП());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ВыборкаТаблицыОстатков(ВременныеТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.ДокументВозникновенияРасходов,
	|	ТаблицаОстатков.Партия,
	|	ТаблицаОстатков.ДатаВозникновенияРасходов,
	|	СУММА(ТаблицаОстатков.СуммаОплаты) КАК СуммаОплаты,
	|	ТаблицаОстатков.ВидРасходов,
	|	ТаблицаОстатков.ЭлементРасходов,
	|	ТаблицаОстатков.СтатьяРасходов,
	|	СУММА(ТаблицаОстатков.СуммаРасходов) КАК СуммаРасходов,
	|	СУММА(ТаблицаОстатков.НДС) КАК НДС,
	|	СУММА(ТаблицаОстатков.СуммаОтгрузки) КАК СуммаОтгрузки,
	|	ТаблицаОстатков.ТипОстатка КАК ТипОстатка,
	|	СУММА(ТаблицаОстатков.РасходыВсего) КАК РасходыВсего,
	|	СУММА(ТаблицаОстатков.Признано) КАК Признано,
	|	СУММА(ТаблицаОстатков.НеПризнано) КАК НеПризнано
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.ВидРасходов,
	|	ТаблицаОстатков.ЭлементРасходов,
	|	ТаблицаОстатков.СтатьяРасходов,
	|	ТаблицаОстатков.ДокументВозникновенияРасходов,
	|	ТаблицаОстатков.Партия,
	|	ТаблицаОстатков.ДатаВозникновенияРасходов,
	|	ТаблицаОстатков.ТипОстатка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("ДокументВозникновенияРасходов, ВидРасходов, СтатьяРасходов");
	
	Возврат Результат;
	
КонецФункции

Функция ВыборкаСуммОплатЕНП(ВременныеТаблицы)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыОплатыНалога.Регистратор КАК ДокументОплаты,
	|	СУММА(0) НДС,
	|	СУММА(ДокументыОплатыНалога.Сумма) КАК Сумма, 
	|	ДокументыОплатыНалога.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ДокументыОплатыНалога КАК ДокументыОплатыНалога 
	|ГДЕ
    |	ДокументыОплатыНалога.ЕНП
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплатыНалога.Регистратор,
	|	ДокументыОплатыНалога.СтатьяРасходов";

	Возврат Запрос.Выполнить();

КонецФункции

Функция ВыборкаСуммОплат(ВременныеТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежныеДокументы.Регистратор КАК ДокументОплаты,
	|	СУММА(ПлатежныеДокументы.НДС) КАК НДС,
	|	СУММА(ПлатежныеДокументы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ЕНП
	|ИЗ
	|	ПлатежныеДокументы КАК ПлатежныеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныеДокументы.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПоКредитамЛизингуОплаты.Регистратор,
	|	СУММА(РасходыПоКредитамЛизингуОплаты.НДС),
	|	СУММА(РасходыПоКредитамЛизингуОплаты.Сумма),
	|	ЛОЖЬ КАК ЕНП
	|ИЗ
	|	РасходыПоКредитамЛизингу КАК РасходыПоКредитамЛизингуОплаты
	|ГДЕ
	|	РасходыПоКредитамЛизингуОплаты.ВидОперации = ""Оплата""
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоКредитамЛизингуОплаты.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОплатыНалога.Регистратор,
	|	СУММА(0),
	|	СУММА(ДокументыОплатыНалога.Сумма),
	|	ДокументыОплатыНалога.ЕНП
	|ИЗ
	|	ДокументыОплатыНалога КАК ДокументыОплатыНалога
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплатыНалога.Регистратор,
	|	ДокументыОплатыНалога.ЕНП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОплатыЗарплаты.Регистратор,
	|	СУММА(0),
	|	СУММА(ДокументыОплатыЗарплаты.Сумма),
	|	ЛОЖЬ КАК ЕНП
	|ИЗ
	|	ДокументыОплатыЗарплаты КАК ДокументыОплатыЗарплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплатыЗарплаты.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОплатыПодотчетникам.Регистратор,
	|	СУММА(0),
	|	СУММА(ДокументыОплатыПодотчетникам.Сумма),
	|	ЛОЖЬ КАК ЕНП
	|ИЗ
	|	ДокументыОплатыПодотчетникам КАК ДокументыОплатыПодотчетникам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплатыПодотчетникам.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОплатыНДСТоваровИзЕАЭС.Регистратор,
	|	СУММА(ДокументыОплатыНДСТоваровИзЕАЭС.Сумма),
	|	СУММА(ДокументыОплатыНДСТоваровИзЕАЭС.Сумма),
	|	ЛОЖЬ КАК ЕНП
	|ИЗ
	|	ДокументыОплатыНДСТоваровИзЕАЭС КАК ДокументыОплатыНДСТоваровИзЕАЭС
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплатыНДСТоваровИзЕАЭС.Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ТекстЗапросаПоОплатамНоваяАрхитектураРасчетов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аналитика.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ДолгРегл > 0
	|			ТОГДА РасчетыСПоставщиками.ДокументРегистратор
	|		ИНАЧЕ РасчетыСПоставщиками.РасчетныйДокумент
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ДолгРегл > 0
	|			ТОГДА НачалоПериода(РасчетыСПоставщиками.Период, День)
	|		ИНАЧЕ РасчетыСПоставщиками.ДатаВозникновения
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ДолгРегл > 0
	|			ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСПоставщиками.ДокументРегистратор
	|	КОНЕЦ КАК ДокументВозникновенияРасходов,
	|	СУММА(0) КАК НДС,
	|	СУММА(РасчетыСПоставщиками.ДолгРегл + РасчетыСПоставщиками.ПредоплатаРегл) КАК Сумма,
	|	РасчетыСПоставщиками.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ДолгРегл > 0
	|			ТОГДА ""Оплата""
	|		ИНАЧЕ ""Аванс""
	|	КОНЕЦ КАК ВидОперации,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Договор КАК Договор,
	|	РасчетыСПоставщиками.Сторно
	|ПОМЕСТИТЬ ПлатежныеДокументы
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|			И Аналитика.Организация = &Организация
	// Корректировка может являться оплатой при погашении долга только тогда, когда она зачитывает другой документ возникновения расходов.
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрочиеРасходы КАК КорректировкиУменьшающиеДругиеДокументыРасходов
	|		ПО РасчетыСПоставщиками.ДокументРегистратор = КорректировкиУменьшающиеДругиеДокументыРасходов.Регистратор
	|			И РасчетыСПоставщиками.ДокументРегистратор ССЫЛКА Документ.КорректировкаПриобретения	
	|			И РасчетыСПоставщиками.РасчетныйДокумент <> КорректировкиУменьшающиеДругиеДокументыРасходов.ДокументВозникновенияРасходов	
	|			И РасчетыСПоставщиками.РасчетныйДокумент <> РасчетыСПоставщиками.ДокументРегистратор
	|			И РасчетыСПоставщиками.ДолгРегл <> 0
	|ГДЕ
	|	РасчетыСПоставщиками.Период МЕЖДУ &НачДата И &КонДата
	|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыСПоставщиками.ДокументРегистратор <> РасчетыСПоставщиками.РасчетныйДокумент
	|	И (РасчетыСПоставщиками.ДолгРегл > 0 ИЛИ РасчетыСПоставщиками.ПредоплатаРегл > 0
	|			И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками)
	|	И НЕ РасчетыСПоставщиками.ДокументРегистратор ССЫЛКА Документ.ОтчетКомитенту
	|	И НЕ РасчетыСПоставщиками.ДокументРегистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|	И (НЕ РасчетыСПоставщиками.ДокументРегистратор ССЫЛКА Документ.КорректировкаПриобретения
	|		ИЛИ НЕ КорректировкиУменьшающиеДругиеДокументыРасходов.Регистратор ЕСТЬ NULL
	|		ИЛИ РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|		И РасчетыСПоставщиками.ПредоплатаРегл <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Организация,
	|	РасчетыСПоставщиками.ДокументРегистратор,
	|	РасчетыСПоставщиками.РасчетныйДокумент,
	|	РасчетыСПоставщиками.ХозяйственнаяОперация,
	|	РасчетыСПоставщиками.ДолгРегл,
	|	РасчетыСПоставщиками.Период,
	|	РасчетыСПоставщиками.ДатаВозникновения,
	|	Аналитика.Контрагент,
	|	Аналитика.Договор,
	|	РасчетыСПоставщиками.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументВозникновенияРасходов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция КоэффициентОтнесенияРасходовКПрочейДеятельности(Параметры)
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"НастройкиСистемыНалогообложения", Параметры.Организация, Параметры.НачДата);
	ВедетсяПрочаяДеятельность = ПараметрыУчетнойПолитики <> Неопределено И (ПараметрыУчетнойПолитики.ПрименяетсяЕНВД ИЛИ ПараметрыУчетнойПолитики.ПрименяетсяПСН);
	Если Не ВедетсяПрочаяДеятельность Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапросПоПараметрам(Параметры, Новый МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕстьNULL(СУММА(ДанныеРегистра.Графа5Оборот), 0) КАК ДоходУСН,
	|	ЕстьNULL(СУММА(ДанныеРегистра.ДоходЕНВДОборот + ДанныеРегистра.ДоходПатентОборот), 0) КАК ДоходПрочий
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачДата, &КонГраница, , Организация = &Организация) КАК ДанныеРегистра";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Коэффициент = 0;
	Если Выборка.Следующий() Тогда
		ОбщийДоход = Выборка.ДоходУСН + Выборка.ДоходПрочий;
		Коэффициент = ?(ОбщийДоход = 0, 0, Выборка.ДоходПрочий / ОбщийДоход);
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

Функция СтрокиОстаткаПоСтруктуреПоиска(ТаблицаОстатков, СтруктураПоиска, СоздаватьНовуюСтрокуОстатка)
	
	СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
	Если СтрокиОстатка.Количество() = 0 И СоздаватьНовуюСтрокуОстатка Тогда
		СтрокаОстатка = ТаблицаОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОстатка, СтруктураПоиска);
		СтрокаОстатка.ДатаВозникновенияРасходов = Дата(1,1,1);
		СтрокаОстатка.СуммаОплаты = 0;
		СтрокаОстатка.СуммаРасходов = 0;
		СтрокаОстатка.НДС = 0;
		СтрокаОстатка.СуммаОтгрузки = 0;
		СтрокаОстатка.ТипОстатка = "";
		СтрокаОстатка.Признано = 0;
		СтрокаОстатка.НеПризнано = 0;
		СтрокаОстатка.РасходыВсего = 0;
		СтрокиОстатка.Добавить(СтрокаОстатка);
	КонецЕсли;
	
	Возврат СтрокиОстатка;
	
КонецФункции

Процедура ОбновитьСтруктуруПоиска(СтруктураПоиска, Выборка)
	
	ВидыОперацийДляКоторыхИщемРеклассификацию = Новый Массив;
	ВидыОперацийДляКоторыхИщемРеклассификацию.Добавить("Аванс");
	ВидыОперацийДляКоторыхИщемРеклассификацию.Добавить("Оплата");
	ВидыОперацийДляКоторыхИщемРеклассификацию.Добавить("АвансБезРазбивкиПоДокументам");
	ВидыОперацийДляКоторыхИщемРеклассификацию.Добавить("ОплатаБезРазбивкиПоДокументам");
	ВидыОперацийДляКоторыхИщемРеклассификацию.Добавить("Списание");
	
	ВидыРасходов = Перечисления.ВидыРасходовУСН;
	
	ВидыРасходовДляКоторыхВозможнаРеклассификация = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыРасходовДляКоторыхВозможнаРеклассификация, ВидыРасходов.ВидыРасходовТовары());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыРасходовДляКоторыхВозможнаРеклассификация, ВидыРасходов.ВидыРасходовМатериалы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыРасходовДляКоторыхВозможнаРеклассификация, ВидыРасходов.ВидыРасходовОСНМА());
	
	Если СтруктураПоиска = Неопределено Тогда
		// Инициализируем структуру поиска по всем параметрам, доступным для отбора:
		СтруктураПоиска = Новый Структура("ВидРасходов, ДокументВозникновенияРасходов, Партия");
		Если ВидыРасходов.ВидыРасходовПрочие().Найти(Выборка.ВидРасходов) <> Неопределено Тогда
			// Поиск по статье расходов справедлив только для прочих расходов:
			СтруктураПоиска.Вставить("СтатьяРасходов");
		КонецЕсли;
		Если ВидыРасходов.ВидыРасходовОСНМА().Найти(Выборка.ВидРасходов) <> Неопределено Тогда
			// Поиск по элементу расходов справедлив только для ОС/НМА:
			СтруктураПоиска.Вставить("ЭлементРасходов");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		//СтруктураПоиска.Вставить("СоздаватьНовуюСтрокуОстатка", Истина);
		Возврат;
	КонецЕсли;
	
	//СтруктураПоиска.СоздаватьНовуюСтрокуОстатка = Ложь;
	
	Если СтруктураПоиска.Свойство("ВидРасходов") И ВидыОперацийДляКоторыхИщемРеклассификацию.Найти(Выборка.ВидОперации) <> Неопределено
		И ВидыРасходовДляКоторыхВозможнаРеклассификация.Найти(СтруктураПоиска.ВидРасходов) <> Неопределено Тогда
		// Возможно расходы реклассифицированы с одного регистра на другой, поищем без учета вида расходов:
		СтруктураПоиска.Удалить("ВидРасходов"); 
		Если СтруктураПоиска.Свойство("ЭлементРасходов") И ВидыОперацийДляКоторыхИщемРеклассификацию.Найти(Выборка.ВидОперации) <> Неопределено Тогда
		  // Поищем расходы без учета элемента расходов (расходы определены как ОС/НМА, но не списаны были сразу):
		  СтруктураПоиска.Удалить("ЭлементРасходов");
		  Возврат;
	    КонецЕсли;
	
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска.Очистить();
	
КонецПроцедуры

Функция ИнициализироватьДанныеДляОбработки(Выборка)
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Регистратор");
	СтруктураВозврата.Вставить("Период");
	СтруктураВозврата.Вставить("ДокументВозникновенияРасходов");
	СтруктураВозврата.Вставить("Партия");
	СтруктураВозврата.Вставить("Организация");
	
	СтруктураВозврата.Вставить("ВидРасходов");
	СтруктураВозврата.Вставить("ЭлементРасходов");
	СтруктураВозврата.Вставить("СтатьяРасходов");
	СтруктураВозврата.Вставить("ХозяйственнаяОперация");
	СтруктураВозврата.Вставить("ПризнаватьРасходамиПриУСН");
	
	СтруктураВозврата.Вставить("ВидОперации");
	СтруктураВозврата.Вставить("Сторно");
	
	СтруктураВозврата.Вставить("НаименованиеКонтрагента");
	СтруктураВозврата.Вставить("Договор");
	СтруктураВозврата.Вставить("ПризнаватьРасходамиПриУСН");
	СтруктураВозврата.Вставить("ВидДеятельности");
	
	СтруктураВозврата.Вставить("СуммаРасходов", 0);
	СтруктураВозврата.Вставить("НДС", 0);
	СтруктураВозврата.Вставить("СуммаОплаты", 0);
	СтруктураВозврата.Вставить("СуммаОтгрузки", 0);
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ИнициализироватьДанныеРезультата(Выборка)
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Регистратор");
	СтруктураВозврата.Вставить("Период");
	СтруктураВозврата.Вставить("ДокументВозникновенияРасходов");
	СтруктураВозврата.Вставить("Партия");
	СтруктураВозврата.Вставить("Организация");
	
	СтруктураВозврата.Вставить("ВидРасходов");
	СтруктураВозврата.Вставить("ЭлементРасходов");
	СтруктураВозврата.Вставить("СтатьяРасходов");
	СтруктураВозврата.Вставить("ДатаОплаты");
	СтруктураВозврата.Вставить("ХозяйственнаяОперация");
	
	СтруктураВозврата.Вставить("СуммаРасходов", 0);
	СтруктураВозврата.Вставить("НДС", 0);
	СтруктураВозврата.Вставить("СуммаОплаты", 0);
	СтруктураВозврата.Вставить("СуммаОтгрузки", 0);
	СтруктураВозврата.Вставить("Признано", 0);
	СтруктураВозврата.Вставить("НеПризнано", 0);
	
	СтруктураВозврата.Вставить("РасходыВсего", 0);
	СтруктураВозврата.Вставить("РасходыНДС", 0);
	СтруктураВозврата.Вставить("РасходыУСН", 0);
	СтруктураВозврата.Вставить("РасходыЕНВД", 0);
	СтруктураВозврата.Вставить("Содержание");
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка, , "СуммаРасходов, НДС, СуммаОплаты, СуммаОтгрузки");
	
	СтруктураВозврата.Содержание = СодержаниеРасхода(Выборка, Выборка.ВидРасходов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ДозаполнитьСуммыПризнания(ДанныеРезультата, СтрокаОстатка)
	
	Если ДанныеРезультата.РасходыВсего = 0 Тогда
		ДанныеРезультата.РасходыВсего = ДанныеРезультата.РасходыУСН + ДанныеРезультата.НеПризнано;
	КонецЕсли;
	ДанныеРезультата.Признано = ДанныеРезультата.РасходыУСН;
	ДанныеРезультата.РасходыНДС = ?(СтрокаОстатка.СуммаРасходов = 0, 0, ДанныеРезультата.РасходыВсего * СтрокаОстатка.НДС / СтрокаОстатка.СуммаРасходов);
	
	СтрокаОстатка.РасходыВсего = СтрокаОстатка.РасходыВсего + ДанныеРезультата.РасходыВсего;
	СтрокаОстатка.Признано = СтрокаОстатка.Признано + ДанныеРезультата.Признано;
	СтрокаОстатка.НеПризнано = СтрокаОстатка.НеПризнано + ДанныеРезультата.НеПризнано;
	
КонецПроцедуры

Функция НаборЗаписейРегистраПоВидуРасходов(ДвиженияДокумента, Данные)
	
	ИмяСобытияДляЗаписиОшибкиВЖурналРегистрации = 
		НСтр("ru = 'Признание расходов при УСН. Не выполнена запись расходов в служебный регистр УСН.';
			|en = 'Expense recognition in STS. Expenses are not written to the STS service register.'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	
	ВидРегистра = ИмяРегистраПоВидуРасходов(Данные.ВидРасходов);
	Если Не ДвиженияДокумента.Свойство(ВидРегистра) Тогда
		ДвиженияДокумента.Вставить(ВидРегистра, РегистрыНакопления[ВидРегистра].СоздатьНаборЗаписей());
		ДвиженияДокумента[ВидРегистра].ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
		ДвиженияДокумента[ВидРегистра].Отбор.Регистратор.Установить(Данные.Регистратор);
	КонецЕсли;
	
	НаборЗаписей = ДвиженияДокумента[ВидРегистра];
	
	Если НЕ ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЗаписиОшибкиВЖурналРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыНакопления[ВидРегистра],
			Данные.Регистратор,
			НСтр("ru = 'Документ, регистрирующий расходы, не является регистратором для служебного регистра УСН.';
				|en = 'Document that registers expenses is not a recorder for the STS service register. '", ОбщегоНазначения.КодОсновногоЯзыка()),  // строка записывается в ИБ
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.ДокументВозникновенияРасходов) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЗаписиОшибкиВЖурналРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыНакопления[ВидРегистра],
			Данные.Регистратор,
			НСтр("ru = 'Не задан документ возникновения расходов.';
				|en = 'Expense incurrence document is not specified.  '", ОбщегоНазначения.КодОсновногоЯзыка()),  // строка записывается в ИБ
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ИмяРегистраПоВидуРасходов(ВидРасходов)
	
	СоответствиеВидаРасходовРегистру = Новый Соответствие;
	Для каждого ВидТоваров Из Перечисления.ВидыРасходовУСН.ВидыРасходовТовары() Цикл
		СоответствиеВидаРасходовРегистру.Вставить(ВидТоваров, "РасходыПриУСНТовары");
	КонецЦикла;
	Для каждого ВидМатериалов Из Перечисления.ВидыРасходовУСН.ВидыРасходовМатериалы() Цикл
		СоответствиеВидаРасходовРегистру.Вставить(ВидМатериалов, "РасходыПриУСНМатериалы");
	КонецЦикла;
	Для каждого ВидОСНМА Из Перечисления.ВидыРасходовУСН.ВидыРасходовОСНМА() Цикл
		СоответствиеВидаРасходовРегистру.Вставить(ВидОСНМА, "РасходыПриУСНОСиНМА");
	КонецЦикла;
	Для каждого ВидПрочихРасходов Из Перечисления.ВидыРасходовУСН.ВидыРасходовПризнаваемыеПоОплате() Цикл
		Если Перечисления.ВидыРасходовУСН.ВидыРасходовМатериалы().Найти(ВидПрочихРасходов) = Неопределено Тогда
			СоответствиеВидаРасходовРегистру.Вставить(ВидПрочихРасходов, "РасходыПриУСН");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеВидаРасходовРегистру.Получить(ВидРасходов);
	
КонецФункции

Функция СодержаниеРасхода(Данные, ВидРасходов)
	
	Если ВидРасходов = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
		Информация = НСтр("ru = 'Признаны расходы на приобретение товаров';
							|en = 'Goods purchase expenses are recognized '", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.Материалы Тогда
		Информация = НСтр("ru = 'Признаны расходы на приобретение материалов';
							|en = 'Material purchase expenses recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.ДопРасходыТовары Тогда
		Информация = НСтр("ru = 'Признаны доп. расходы по товарам';
							|en = 'Add. expenses on goods recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.ДопРасходыМатериалы Тогда
		Информация = НСтр("ru = 'Признаны доп. расходы по материалам';
							|en = 'Add. expenses on materials recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежиТовары Тогда
		Информация = НСтр("ru = 'Признаны таможенные расходы по товарам';
							|en = 'Customs expenses by goods recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежиМатериалы Тогда
		Информация = НСтр("ru = 'Признаны таможенные расходы по материалам';
							|en = 'Customs expenses by materials recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.Зарплата Тогда
		Информация = НСтр("ru = 'Признаны расходы по зарплате';
							|en = 'Salary expenses are recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.Налоги Тогда
		Информация = НСтр("ru = 'Признаны расходы по налогам';
							|en = 'Tax expenses are recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.Лизинг Тогда
		Информация = НСтр("ru = 'Признаны расходы по лизингу';
							|en = 'Leasing expenses are recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовУСН.Кредиты Тогда
		Информация = НСтр("ru = 'Признаны расходы по кредитам';
							|en = 'Loan expenses are recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Информация = НСтр("ru = 'Признаны расходы';
							|en = 'Costs are recognized'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности
		ИЛИ ТипЗнч(Данные.Регистратор) = Тип("ДокументСсылка.КорректировкаЗадолженности") Тогда
		Информация = СтрЗаменить(Информация, НСтр("ru = 'Признаны';
													|en = 'Recognized'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Не признаны';
																												|en = 'Not recognized'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	МассивСодержания = Новый Массив;
	МассивСодержания.Добавить(Строка(Данные.ХозяйственнаяОперация) + ".");
	МассивСодержания.Добавить(Информация);
	
	Если ЗначениеЗаполнено(Данные.НаименованиеКонтрагента) Тогда
		ПредставлениеПоставщика = НСтр("ru = 'поставщика';
										|en = 'supplier'", ОбщегоНазначения.КодОсновногоЯзыка());
		Если Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераКомиссия Тогда
			ПредставлениеПоставщика = НСтр("ru = 'комиссионера';
											|en = 'consignee'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		Если Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
			ПредставлениеПоставщика = НСтр("ru = 'подотчетника';
											|en = 'advance holder'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		МассивСодержания.Добавить(СтрШаблон(НСтр("ru = 'от %1 ""%2""';
												|en = 'dated %1 ""%2""'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПоставщика, Данные.НаименованиеКонтрагента));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Договор) Тогда
		МассивСодержания.Добавить(СтрШаблон(НСтр("ru = 'по договору ""%1""';
												|en = 'under the ""%1"" contract'", ОбщегоНазначения.КодОсновногоЯзыка()), Данные.Договор));
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "СтатьяРасходов") И ЗначениеЗаполнено(Данные.СтатьяРасходов) Тогда
		ВидСтатьи = "";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "ПризнаватьРасходамиПриУСН") И Не Данные.ПризнаватьРасходамиПриУСН Тогда
			ВидСтатьи = НСтр("ru = 'не признаваемую';
							|en = 'not recognizable'", ОбщегоНазначения.КодОсновногоЯзыка()) + " ";
		КонецЕсли;
		МассивСодержания.Добавить(СтрШаблон(НСтр("ru = 'на %1статью расходов ""%2""';
												|en = 'to %1cost item ""%2""'", ОбщегоНазначения.КодОсновногоЯзыка()), ВидСтатьи, Данные.СтатьяРасходов));
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "ВидДеятельности") Тогда
		СтрокаПоясненияСторно = "";
		Если Данные.ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
			СтрокаПоясненияСторно = НСтр("ru = 'в результате списания на деятельность %1';
										|en = 'as a result of writing off as %1 activity'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли Данные.ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
			СтрокаПоясненияСторно = НСтр("ru = 'в результате распределения УСН и %1';
										|en = 'as a result of STS and %1 allocation'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоясненияСторно) Тогда
			СтрокаПоясненияСторно = СтрШаблон(СтрокаПоясненияСторно, ПредставлениеОсобогоНалогообложения());
			МассивСодержания.Добавить(СтрокаПоясненияСторно);
		КонецЕсли;
	КонецЕсли;
	
	Содержание = СтрСоединить(МассивСодержания, " ") + ".";
	
	Возврат Содержание;
	
КонецФункции

Процедура ОбработатьРезультатВСлучаеСтарогоМетода(Результат, ТипОстатка)
	
	Если ТипОстатка <> "СтарыйМетод" Тогда
		Возврат;
	КонецЕсли;
	
	Результат.ВидРасходов = Перечисления.ВидыРасходовУСН.ПустаяСсылка();
	Если Результат.Партия <> Неопределено Тогда
		// Партия уже будет не заполнена если используется не рекомендуемый метод оценки товаров
		Результат.ДокументВозникновенияРасходов = Результат.Партия;
	КонецЕсли;
	Результат.Партия = Неопределено;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибке(Информация, ВидРасходов, Регистратор)
	
	ИмяСобытияДляЗаписиОшибкиВЖурналРегистрации = 
		НСтр("ru = 'Признание расходов при УСН. Не выполнена запись расходов в служебный регистр УСН.';
			|en = 'Expense recognition in STS. Expenses are not written to the STS service register.'",
		ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	
	ВидРегистра = ИмяРегистраПоВидуРасходов(ВидРасходов);
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ВидРегистра];
	
	ЗаписьЖурналаРегистрации(ИмяСобытияДляЗаписиОшибкиВЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,
		МетаданныеРегистра, Регистратор, Информация, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
КонецПроцедуры

#КонецОбласти

#Область ОпределениеСлужебныхЗначений

// Возвращает имя служебного доп. свойства, устанавливаемого у всех объектов, записываемых этим механизмом.
//
Функция ИмяСлужебногоДополнительногоСвойстваОбъекта()
	Возврат "ПризнаниеРасходовСторноДоходовПриУСН";
КонецФункции

Функция ИсключающиесяХозОперацииВПрочихРасходах()
	
	ИсключающиесяХозОперации = Новый Массив;
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДепозитыПрибыль);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДепозитыУбыток);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСПрибыль);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСУбыток);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыЗаймыВыданныеПрибыль);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыЗаймыВыданныеУбыток);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыКредитыИЗаймыПрибыль);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыКредитыИЗаймыУбыток);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыАрендаПрибыль);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыАрендаУбыток);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакрытиеМесяца);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РаспределениеНДС);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КорректировкаРеализацииСоСписаниемНаРасходы);
	
	Возврат ИсключающиесяХозОперации;
	
КонецФункции

Функция ИсключающиесяХозОперацииВСебестоимости()
	
	ИсключающиесяХозОперации = Новый Массив;
	
	// Операции с тарой:
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТарыОтКлиентаПрошлыхПериодов);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияПереданнойВозвратнойТары);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СторноПереданнойТары);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СторноПереданнойТарыВозвратНаДругойСклад);
	
	// Операции по комиссии:
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	
	// Операции производства:
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5);
	//++ Устарело_Переработка24
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика);
	//-- Устарело_Переработка24
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика2_5);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВыкупТоваровПереданныхВПроизводство);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость);
	//++ Устарело_Переработка24
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДавальцу);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаДавальцу);
	//-- Устарело_Переработка24
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатов);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами);
	//++ Устарело_Переработка24
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика);
	//-- Устарело_Переработка24
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5);
	
	// Остальные операции:
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеРабот);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);

	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуПодразделениями);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуФилиалами);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СписаниеОшибокОкругления);
	
	// Операции покупки в пути:
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	ИсключающиесяХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	
	Возврат ИсключающиесяХозОперации;
	
КонецФункции

Функция ИсключающиесяРегистраторыСебестоимости()
	
	ИсключающиесяТипыРегистраторов = Новый Массив;
	
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВводОстатковТоваров"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВыпускПродукции"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.НачислениеОценочныхОбязательствПоОтпускам"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОтражениеЗарплатыВФинансовомУчете"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПересортицаТоваров"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.РаспределениеВозвратныхОтходов"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.РаспределениеПроизводственныхЗатрат"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.СборкаТоваров"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.СчетФактураНалоговыйАгент"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент"));
	//++ НЕ УТКА
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.МаршрутныйЛистПроизводства"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОтчетДавальцу2_5"));
	//++ Устарело_Переработка24
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОтчетДавальцу"));
	ИсключающиесяТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПоступлениеСырьяОтДавальца"));
	//-- Устарело_Переработка24

	//-- НЕ УТКА
	
	Возврат ИсключающиесяТипыРегистраторов;
	
КонецФункции

Функция ИсключающиесяДокументыПартийСебестоимости()
	
	ИсключающиесяТипыДокументыПартий = ИсключающиесяДокументыПоступленияСебестоимости();
	
	ИндексСборкиТоваров = ИсключающиесяТипыДокументыПартий.Найти(Тип("ДокументСсылка.СборкаТоваров"));
	ИсключающиесяТипыДокументыПартий.Удалить(ИндексСборкиТоваров);
	
	Возврат ИсключающиесяТипыДокументыПартий;
	
КонецФункции

Функция ИсключающиесяДокументыПоступленияСебестоимости()
	
	ИсключающиесяТипыДокументыПартий = Новый Массив;
	
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ПересортицаТоваров"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ПорчаТоваров"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваровУХранителя"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.РаспределениеВозвратныхОтходов"));
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("СправочникСсылка.ПартииПроизводства"));
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	ИсключающиесяТипыДокументыПартий.Добавить(Тип("ДокументСсылка.ПоступлениеСырьяОтДавальца"));
	//-- Устарело_Переработка24

	//-- НЕ УТКА
	
	ТипыДокументовПартийПроизводства = Метаданные.ОпределяемыеТипы.ДокументПартииПроизводства.Тип.Типы();
	//++ Устарело_Переработка24
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ТипыДокументовПартийПроизводства, Тип("ДокументСсылка.ОтчетПереработчика"));
	//-- Устарело_Переработка24
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ТипыДокументовПартийПроизводства, Тип("ДокументСсылка.ОтчетПереработчика2_5"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключающиесяТипыДокументыПартий, ТипыДокументовПартийПроизводства);
	
	Возврат ИсключающиесяТипыДокументыПартий;
	
КонецФункции

Функция СтатьиЗарплатыИНалогов()
	
	Статьи = Новый Массив;
	
	Статьи.Добавить(ПланыВидовХарактеристик.СтатьиАктивовПассивов.Налоги);
	Статьи.Добавить(ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда);
	
	Возврат Статьи;
	
КонецФункции

Функция ТипыНалоговНДФЛ()
	
	ТипыНДФЛ = Новый Массив;
	
	ВидыОперацийНДФЛ = Перечисления.ВидыОперацийПоЗарплате.НДФЛ(Новый Структура);
	Для каждого ВидОперацииНДФЛ Из ВидыОперацийНДФЛ Цикл
		ТипНДФЛ = Неопределено;
		ИнтеграцияБЗК.ЗаполнитьТипНалогаОперацииПоЗарплаты(ТипНДФЛ, ВидОперацииНДФЛ);
		Если ЗначениеЗаполнено(ТипНДФЛ) Тогда
			ТипыНДФЛ.Добавить(ТипНДФЛ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипыНДФЛ;
	
КонецФункции

Функция ТипыЗаписейСебестоимостиДопРасходов()
	
	ТипыЗаписей = Новый Массив;
	
	ТипыЗаписей.Добавить(Перечисления.ТипыЗаписейПартий.ДопРасходы);
	ТипыЗаписей.Добавить(Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии);
	ТипыЗаписей.Добавить(Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией);
	
	Возврат ТипыЗаписей;
	
КонецФункции

Функция ХозОперацииСписанияТоваров()
	
	ХозОперации = Новый Массив;
	
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВыкупТоваровПереданныхНаХранение);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВыкупТоваровХранителем);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВРозницу);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	//++ НЕ УТКА
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОтчетДавальцуМеждуОрганизациями);
	//-- НЕ УТКА
	
	Возврат ХозОперации;
	
КонецФункции

Функция ХозОперацииСписанияМатериалов()
	
	ХозОперации = Новый Массив;
	
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатациюБУНУ);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВПроизводство);
	//++ Устарело_Переработка24
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПереработчику);
	//-- Устарело_Переработка24
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваров);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров);
	
	Возврат ХозОперации;
	
КонецФункции

Функция ХозОперацииСписанияОСНМА()
	
	ХозОперацииСписанияОСНМА = Новый Массив;
	
	ХозОперацииСписанияОСНМА.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВСоставОС);
	ХозОперацииСписанияОСНМА.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА);
	
	Возврат ХозОперацииСписанияОСНМА;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Пока не считается.
Функция ПеренесенныеУбыткиПрошлыхЛет(Организация, НачалоПериода, КонецПериода)
	
	СтруктураУбытков = Новый Структура("ПеренесенныеУбытки, УбытокОтУплатыМинимальногоНалога", 0, 0);
	
	Возврат СтруктураУбытков;
	
КонецФункции

Функция ДанныеКРасчету(НомерЗадания, Операция, Организация, НачалоПериода, КонецПериода, Отказ)
	
	Результат = Неопределено;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		НачатьТранзакцию();
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация, Операция);
			Результат = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(НачалоПериода, КонецПериода, НомерЗадания, Организация, Операция);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать регистр заданий по причине: %ПричинаОшибки%';
									|en = 'Cannot lock the job register due to: %ПричинаОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПричинаОшибки%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(Строка(Операция), ОбщегоНазначения.КодОсновногоЯзыка(),
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	Иначе
		Результат = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(НачалоПериода, КонецПериода, НомерЗадания, Организация, Операция);
	КонецЕсли;
		
	Возврат Результат;	
		
КонецФункции

Процедура ЗафиксироватьРасчет(НомерЗадания, Операция, Организация, НачалоПериода, КонецПериода, ДанныеКРасчету, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		НачатьТранзакцию();
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация, Операция);
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(КонецПериода + 1, Операция, ДанныеКРасчету.ВременныеТаблицы);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось зафиксировать расчет в регистре заданий по причине: %ПричинаОшибки%';
									|en = 'Cannot register calculation in the job register due to: %ПричинаОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПричинаОшибки%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(Строка(Операция), ОбщегоНазначения.КодОсновногоЯзыка(),
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	Иначе
		ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(КонецПериода + 1, Операция, ДанныеКРасчету.ВременныеТаблицы);
	КонецЕсли;
		
КонецПроцедуры

Функция ДатаНачалаВеденияУчетаУСНДоходыМинусРасходы(Организация, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&Период,
	|			Организация = ВЫРАЗИТЬ(&Организация КАК Справочник.Организации).ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(
	|			&Период,
	|			Организация = ВЫРАЗИТЬ(&Организация КАК Справочник.Организации).ГоловнаяОрганизация) КАК НастройкиУчетаУСН
	|		ПО УчетнаяПолитикаОрганизацийСрезПоследних.Организация = НастройкиУчетаУСН.Организация
	|ГДЕ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСН И НастройкиУчетаУСН.ПрименяетсяУСНДоходыМинусРасходы
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Период, Период);
	
КонецФункции

Функция ВходящиеДанныеПоОперации(Операция)
	
	ВходящиеДанные = Новый Соответствие;
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов);
	
	Если Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаУСН Тогда
		ВходящиеДанные.Вставить(Метаданные.Справочники.Организации);
		ВходящиеДанные.Вставить(Метаданные.Документы.ЗаписьКУДиР);
		ВходящиеДанные.Вставить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	КонецЕсли;
	
	Если Операция = Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР Тогда
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам);
		Иначе
			ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам);
		КонецЕсли;
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам);
	КонецЕсли;
	
	Если Операция = Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН Тогда
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПорядокОтраженияНаСчетахУчета);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам);
		

		ВходящиеДанные.Вставить(Метаданные.Справочники.ВидыНоменклатуры);
		ВходящиеДанные.Вставить(Метаданные.Справочники.Номенклатура);
		ВходящиеДанные.Вставить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
		
		ВходящиеДанные.Вставить(Метаданные.Документы.РасходныйКассовыйОрдер);
		ВходящиеДанные.Вставить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
		ВходящиеДанные.Вставить(Метаданные.Документы.КорректировкаПриобретения);
		ВходящиеДанные.Вставить(Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете);
		ВходящиеДанные.Вставить(Метаданные.Документы.АвансовыйОтчет);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПриобретениеТоваровУслуг);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыКОформлениюДокументовИмпорта);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам);
		Иначе
			ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам);
		КонецЕсли;
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц);
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСН);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСНОСиНМА);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасходыПриУСНТовары);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходовРаздел2);
	КонецЕсли;
	
	Возврат ВходящиеДанные;
	
КонецФункции

Функция ВидыНалоговыхПлатежей()
	
	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	Возврат ВидыПлатежей;
	
КонецФункции

Функция ИнициализироватьЗапросПоПараметрам(ПараметрыЗапроса, ВременныеТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

Функция ПредставлениеОсобогоНалогообложения()
	
	МассивПредставлений = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") Тогда
		МассивПредставлений.Добавить(НСтр("ru = 'ЕНВД';
											|en = 'UTII'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	Если УчетнаяПолитикаПереопределяемый.ИспользуетсяПСН() Тогда
		МассивПредставлений.Добавить(НСтр("ru = 'ПСН';
											|en = 'PTS'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПредставлений, " / ");
	
КонецФункции

Процедура СкорректироватьНалоговуюСтавку(КонтекстРасчета, ТекущаяНалоговаяБаза, ДанныеПрогрессивнойШкалыУСН, Ошибки)
	
	СтавкаУСН = КонтекстРасчета.СтавкаНалогаУСН;
	Ставки = УчетУСНКлиентСервер.НалоговыеСтавкиПоУмолчанию();
	СтавкаУСНПоУмолчанию = ?(КонтекстРасчета.ПрименяетсяУСНДоходыМинусРасходы,
		Ставки.СтавкаУСНДоходыМинусРасходы, Ставки.СтавкаУСНДоходы);
	СтавкаУСНПовышенная = ?(КонтекстРасчета.ПрименяетсяУСНДоходыМинусРасходы,
		Ставки.СтавкаУСНДоходыМинусРасходыПовышенная, Ставки.СтавкаУСНДоходыПовышенная);
	
	Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
		Если ТекущаяНалоговаяБаза > ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитов
			И КонтекстРасчета.СтавкаНалогаУСН <= СтавкаУСНПоУмолчанию Тогда
			// Должна применяться повышенная налоговая ставка, но в учетной политике пока прописана стандартная.
			Период = НачалоКвартала(ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов);
			СтавкаУСН = СтавкаУСНПовышенная;
		ИначеЕсли ТекущаяНалоговаяБаза <= ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитов
			И КонтекстРасчета.СтавкаНалогаУСН > СтавкаУСНПоУмолчанию Тогда
			// Повышенная ставка не применяется, если в периоде превышения лимитов налоговая база уменьшилась.
			// Если в учетной политике прописана повышенная ставка, требуется заменить на стандартную.
			Период = НачалоКвартала(ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов);
			СтавкаУСН = СтавкаУСНПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка И КонтекстРасчета.СтавкаНалогаУСН > СтавкаУСНПоУмолчанию Тогда
		// Должна применять стандартная налоговая ставка, но в учетной политике пока прописана повышенная (на начало года не делается автоматический переход на стандартную ставку):
		Период = КонтекстРасчета.НачалоНалоговогоПериода;
		СтавкаУСН = СтавкаУСНПоУмолчанию;
	КонецЕсли;
	
	Если КонтекстРасчета.СтавкаНалогаУСН = СтавкаУСН Тогда
		// Налоговая ставка не меняется:
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиУчетаУСН");
	ЭлементБлокировкиДанных.УстановитьЗначение("Период", Период);
	ЭлементБлокировкиДанных.УстановитьЗначение("Организация", КонтекстРасчета.Организация);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
	
	БлокировкаДанных.Заблокировать();
	
	ПараметрыУчетнойПолитикиУСН = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"НастройкиУчетаУСН", КонтекстРасчета.Организация, Период);
	
	НаборЗаписей = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Организация.Установить(КонтекстРасчета.Организация);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыУчетнойПолитикиУСН);
	
	НоваяЗапись.Период = Период;
	НоваяЗапись.СтавкаНалогаУСН = СтавкаУСН;
	
	НаборЗаписей.Записать();
	
	Если КонтекстРасчета.СтавкаНалогаУСН <> СтавкаУСН Тогда
		КонтекстРасчета.СтавкаНалогаУСН = СтавкаУСН;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Исключение
	
	ОтменитьТранзакцию();
	
	ТекстСообщения = НСтр("ru = 'Не удалось записать настройки учета с повышенной налоговой ставкой, по причине: %Причина%.';
							|en = 'Cannot save increased tax rate accounting settings. Reason: %Причина%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	ИмяСобытия = НСтр("ru = 'Расчет налога УСН.Повышение ставки';
						|en = 'STS tax calculation.Rate increase'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.РегистрыСведений.НастройкиУчетаУСН, Неопределено, ТекстСообщения);
		
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Тип", "ПовышениеСтавки");
	ОписаниеОшибки.Вставить("ТекстСообщения", ТекстСообщения);
	Ошибки.Добавить(ОписаниеОшибки);
	
	ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


#Область УниверсальныеПроверкиЭтаповЗакрытияМесяца
//++ НЕ УТ

// Проверяет использование учета по УСН хотя бы по одной из рассчитываемых организаций в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования УСН.
//
Функция ПроверитьИспользованиеУСН(ПараметрыОбработчика)
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(
		Запрос.МенеджерВременныхТаблиц,
		Запрос.Параметры.МассивОрганизаций);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Ссылка,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ) КАК ПрименяетсяУСН,
	|	ЕСТЬNULL(УчетныеПолитикиУСН.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяЕНВД, ЛОЖЬ) КАК ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В
	|					(ВЫБРАТЬ
	|						ГоловныеОрганизации.Организация
	|					ИЗ
	|						ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК УчетныеПолитики
	|	ПО
	|		ГоловныеОрганизации.Организация = УчетныеПолитики.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НастройкиУчетаУСН.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В
	|					(ВЫБРАТЬ
	|						ГоловныеОрганизации.Организация
	|					ИЗ
	|						ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК УчетныеПолитикиУСН
	|	ПО
	|		ГоловныеОрганизации.Организация = УчетныеПолитикиУСН.Организация
	|ГДЕ
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(УчетныеПолитики.ПрименяетсяАУСН, ЛОЖЬ)";
	
	Запрос.Выполнить();
	
	// Ограничим массив организаций только организациями на УСН:
	ТаблицаРезультата = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТОрганизации"].ПолучитьДанные().Выгрузить();
	ПараметрыОбработчика.ДанныеЭтапа.МассивОрганизаций = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	
	Если ЗакрытиеМесяцаСервер.РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не ведется учет организаций на УСН';
				|en = 'STS accounting of companies is not kept'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет использование учета "УСН доходы минус расходы" хотя бы по одной из рассчитываемых организаций в
// рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования "УСН доходы минус расходы".
//
Функция ПроверитьИспользованиеУСНДоходыМинусРасходы(ПараметрыОбработчика)
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(
		Запрос.МенеджерВременныхТаблиц,
		Запрос.Параметры.МассивОрганизаций);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Ссылка,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ) КАК ПрименяетсяУСН,
	|	ЕСТЬNULL(УчетныеПолитикиУСН.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяЕНВД, ЛОЖЬ) КАК ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В
	|					(ВЫБРАТЬ
	|						ГоловныеОрганизации.Организация
	|					ИЗ
	|						ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК УчетныеПолитики
	|	ПО
	|		ГоловныеОрганизации.Организация = УчетныеПолитики.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НастройкиУчетаУСН.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В
	|					(ВЫБРАТЬ
	|						ГоловныеОрганизации.Организация
	|					ИЗ
	|						ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК УчетныеПолитикиУСН
	|	ПО
	|		ГоловныеОрганизации.Организация = УчетныеПолитикиУСН.Организация
	|ГДЕ
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(УчетныеПолитики.ПрименяетсяАУСН, ЛОЖЬ)
	|	И ЕСТЬNULL(УчетныеПолитикиУСН.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ)";
	
	Запрос.Выполнить();
	
	Если ЗакрытиеМесяцаСервер.РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не ведется учет организаций на УСН ""Доходы минус расходы""';
				|en = 'Accounting of companies under the ""Income minus expenses"" STS is not kept'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, ИмяТаблицыОтбораОрганизаций = "")
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	ВТОрганизации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Ссылка = Организации.Ссылка
	|ГДЕ
	|	КОНЕЦПЕРИОДА(ДанныеСправочника.ДатаРегистрации, ГОД) = КОНЕЦПЕРИОДА(ДанныеСправочника.ДатаРегистрации, МЕСЯЦ)
	|	И КОНЕЦПЕРИОДА(ДанныеСправочника.ДатаРегистрации, МЕСЯЦ) = &КонецПериода";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ОрганизацииЗарегистрированныеВДекабре = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		ТекстыСообщения = Новый Массив;
		ТекстыСообщения.Добавить(НСтр("ru = 'Сформированные данные';
										|en = 'Generated data'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Если Запрос.Параметры.МассивОрганизаций.Количество() <> 1 Тогда
			ТекстОрганизаций = "";
			Если ОрганизацииЗарегистрированныеВДекабре.Количество() = 1 Тогда
				ТекстОрганизаций = НСтр("ru = 'по организации ""%1""';
										|en = 'by the ""%1"" company'", ОбщегоНазначения.КодОсновногоЯзыка());
			Иначе
				ТекстОрганизаций = НСтр("ru = 'по организациям <%1>';
										|en = 'by companies <%1>'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			ТекстОрганизаций = СтрШаблон(ТекстОрганизаций, СтрСоединить(ОрганизацииЗарегистрированныеВДекабре, ", "));
			ТекстыСообщения.Добавить(ТекстОрганизаций);
		КонецЕсли;
		ТекстыСообщения.Добавить(НСтр("ru = 'включатся в отчет за следующий год.';
										|en = 'will be included in report for the next year.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ТекстыСообщения.Добавить(НСтр("ru = 'Так как книгу доходов и расходов за %Год% год формировать не нужно.';
										|en = 'As there is no need to generate the ledger of income and expenditure for %Год%.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ТекстСообщения = СтрСоединить(ТекстыСообщения, " ");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Год%", Формат(Год(Запрос.Параметры.КонецПериода), "ЧГ=0"));
			
		ЗакрытиеМесяцаСервер.ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, ТекстСообщения, , , Перечисления.ВажностьПроблемыУчета.ПолезныйСовет);
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ
#КонецОбласти

#Область ФормированиеЗаданийКЗакрытиюМесяцаСлужебные

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос)
	
	СоответствиеТекстовЗапросов = Новый Соответствие();
	//++ Локализация
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийВыручкаИСебестоимостьПродаж", ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос));
	
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДвиженияДенежныеСредстваДоходыРасходы", ТестЗапросаДвиженияДенежныеСредстваДоходыРасходы(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДвиженияДоходыРасходыПрочиеАктивыПассивы", ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДвиженияКонтрагентДоходыРасходы", ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийКнигаУчетаДоходовИРасходов", ТекстЗапросаКнигаУчетаДоходовИРасходов(Запрос));
	
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасходыПриУСН", ТекстЗапросаРасходыПриУСН(Запрос, "ТаблицаИзмененийРасходыПриУСН"));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасходыПриУСНМатериалы", ТекстЗапросаРасходыПриУСН(Запрос, "ТаблицаИзмененийРасходыПриУСНМатериалы"));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасходыПриУСНОСиНМА", ТекстЗапросаРасходыПриУСН(Запрос, "ТаблицаИзмененийРасходыПриУСНОСиНМА"));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасходыПриУСНТовары", ТекстЗапросаРасходыПриУСН(Запрос, "ТаблицаИзмененийРасходыПриУСНТовары"));
	
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыПоФинансовымИнструментам", ТекстЗапросаРасчетыПоФинансовымИнструментам(Запрос));
	
	СоответствиеТекстовЗапросов.Вставить("ПервоначальныеСведенияНМАИзменение", ТекстЗапросаПервоначальныеСведенияНМА(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ПервоначальныеСведенияОСИзменение", ТекстЗапросаПервоначальныеСведенияОС(Запрос));
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		СоответствиеТекстовЗапросов.Вставить("РасчетыСКлиентамиИзменения", ТекстЗапросаРасчетыСКлиентами(Запрос));
		СоответствиеТекстовЗапросов.Вставить("РасчетыСПоставщикамиИзменения", ТекстЗапросаРасчетыСПоставщиками(Запрос));
	КонецЕсли;
	
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДенежныеСредстваУПодотчетныхЛиц", ТекстЗапросаДенежныеСредстваУПодотчетныхЛиц(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДенежныеСредстваВПути", ТекстЗапросаДенежныеСредстваВПути(Запрос));
	
	//-- Локализация
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

Функция ИменаТаблицДляПроверкиПоОрганизациямУСН() 
	
	МассивИмен = Новый Массив();
	
	// Регистры для анализа по "доходы минус расходы":
	МассивИмен.Добавить("ТаблицаИзмененийДвиженияДенежныеСредстваДоходыРасходы");
	МассивИмен.Добавить("ТаблицаИзмененийДвиженияДоходыРасходыПрочиеАктивыПассивы");
	МассивИмен.Добавить("ТаблицаИзмененийДвиженияКонтрагентДоходыРасходы");
	МассивИмен.Добавить("ТаблицаИзмененийРасчетыПоФинансовымИнструментам");
	МассивИмен.Добавить("ПервоначальныеСведенияНМАИзменение");
	МассивИмен.Добавить("ПервоначальныеСведенияОСИзменение");
	МассивИмен.Добавить("ТаблицаИзмененийДенежныеСредстваУПодотчетныхЛиц");
	МассивИмен.Добавить("РасчетыСПоставщикамиИзменения");
	
	// Регистры для анализа по "доходы":
	МассивИмен.Добавить("ТаблицаИзмененийВыручкаИСебестоимостьПродаж");
	МассивИмен.Добавить("ТаблицаИзмененийДенежныеСредстваВПути");
	МассивИмен.Добавить("РасчетыСКлиентамиИзменения");
	
	Возврат МассивИмен
КонецФункции

// Дополняет временные таблицы для проведения, таблицей ВТДанныеПоОрганизациямНаУСН, где содержатся
// данные по организациям на УСН. Поля временной таблицы:
//		Организация - СправочникСсылка.Организации - организация, которая находится по данным учетной политики на УСН доходы минус расходы;
//		НачалоПериода - Дата - Дата начала действия соответствующей учетной политики организации;
//		КонецПериода - Дата - Дата окончания действия соответствующей учетной политики организации;
//	Используется при актуализации данных по признанию расходов в целях УСН, см. ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра;
//
//	Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Процедура ДополнитьМенеджерВременныхТаблицДаннымиПоОрганизациямНаУСН(МенеджерВременныхТаблиц)
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВТДанныеПоОрганизациямНаУСН") <> Неопределено Тогда
		// Требуемая временная таблица уже создана.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрганизацииНаУСН.Организация КАК Организация,
	|	ОрганизацииНаУСН.Период КАК НачалоПериода,
	|	ОрганизацииНаУСН.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоздниеНастройкиНеУСН.Период, ДАТАВРЕМЯ(2120, 1, 1)) < ЕСТЬNULL(ПоздниеНастройкиУСН.Период, ДАТАВРЕМЯ(2120, 1, 1)) ТОГДА
	|			ЕСТЬNULL(ПоздниеНастройкиНеУСН.Период, ДАТАВРЕМЯ(2120, 1, 1))
	|		КОГДА ЕСТЬNULL(ПоздниеНастройкиНеУСН.Период, ДАТАВРЕМЯ(2120, 1, 1)) >= ЕСТЬNULL(ПоздниеНастройкиУСН.Период, ДАТАВРЕМЯ(2120, 1, 1)) ТОГДА
	|			ЕСТЬNULL(ПоздниеНастройкиУСН.Период, ДАТАВРЕМЯ(2120, 1, 1))
	|	КОНЕЦ) КАК КонецПериода
	|ПОМЕСТИТЬ ВТДанныеПоОрганизациямНаУСН
	|ИЗ
	|	РегистрСведений.НастройкиУчетаУСН КАК ОрганизацииНаУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК ПоздниеНастройкиНеУСН
	|		ПО ОрганизацииНаУСН.Организация = ПоздниеНастройкиНеУСН.Организация
	|			И ОрганизацииНаУСН.Период < ПоздниеНастройкиНеУСН.Период
	|			И (НЕ ПоздниеНастройкиНеУСН.ПрименяетсяУСН)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН КАК ПоздниеНастройкиУСН
	|		ПО ОрганизацииНаУСН.Организация = ПоздниеНастройкиУСН.Организация
	|			И ОрганизацииНаУСН.Период < ПоздниеНастройкиУСН.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОрганизацииНаУСН.Организация,
	|	ОрганизацииНаУСН.Период,
	|	ОрганизацииНаУСН.ПрименяетсяУСНДоходыМинусРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#Область ТекстыЗапросовЗаданийКЗакрытиюМесяца

//++ Локализация

// Функция вызывается из набора записей регистра накопления для записи в регистр сведений "ЗаданияКЗакрытиюМесяца"
//	данных о необходимости пересчета признания расходов (если в данных регистра есть организации с объектом налогообложения "Доходы минус расходы").
//
// Возвращаемое значение:
//	Строка - текст запроса, для последующего его обработку в модуле менеджера набора записей регистра. Запрос содержит в себе:
//	1) проверки по умолчанию: Организация находится на УСН с объектом налогообложения доходы минус расходы;
//	2) дополнительные условия для проверки, свойственные тому регистру, из модуля которого вызвана текущая функция.
//
Функция ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра(ИмяВременнойТаблицыДляЗаписиВРегистрЗаданий = "")
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН) КАК Операция,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	#ТаблицаИзмененийРегистра КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО Константы.ИспользоватьРеглУчет
	|			И НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) >= Константы.ДатаНачалаВеденияРеглУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоОрганизациямНаУСН КАК ОрганизацииНаУСН
	|		ПО (ОрганизацииНаУСН.Организация = ТаблицаИзменений.Организация)
	|			И (ТаблицаИзменений.Период >= ОрганизацииНаУСН.НачалоПериода)
	|			И (ТаблицаИзменений.Период < ОрганизацииНаУСН.КонецПериода)
	|ГДЕ
	|	ЕСТЬNULL(ОрганизацииНаУСН.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ)
	|	И (&ДополнительныеУсловия)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР) КАК Операция,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	ТаблицаИзмененийВыручкаИСебестоимостьПродаж КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|		ПО  ТаблицаИзменений.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО Константы.ИспользоватьРеглУчет
	|			И НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) >= Константы.ДатаНачалаВеденияРеглУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПоОрганизациямНаУСН КАК ОрганизацииНаУСН
	|		ПО (ОрганизацииНаУСН.Организация = КлючиАналитикаУчетаПоПартнерам.Организация)
	|			И (ТаблицаИзменений.Период >= ОрганизацииНаУСН.НачалоПериода)
	|			И (ТаблицаИзменений.Период < ОрганизацииНаУСН.КонецПериода)
	|ГДЕ
	|	(ТаблицаИзменений.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|	ИЛИ ТаблицаИзменений.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга))
	|	И ТаблицаИзменений.СуммаВыручкиСНДСРегл + ТаблицаИзменений.СуммаВыручкиРегл <> 0
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР) КАК Операция,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	ТаблицаИзмененийВыручкаИСебестоимостьПродаж КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|		ПО ТаблицаИзменений.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО Константы.ИспользоватьРеглУчет
	|			И НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) >= Константы.ДатаНачалаВеденияРеглУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПоОрганизациямНаУСН КАК ОрганизацииНаУСН
	|		ПО (ОрганизацииНаУСН.Организация = КлючиАналитикаУчетаПоПартнерам.Организация)
	|			И (ТаблицаИзменений.Период >= ОрганизацииНаУСН.НачалоПериода)
	|			И (ТаблицаИзменений.Период < ОрганизацииНаУСН.КонецПериода)
	|ГДЕ
	|	ТаблицаИзменений.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту))
	|	И ТаблицаИзменений.СуммаВыручкиСНДСРегл + ТаблицаИзменений.СуммаВыручкиРегл <> 0";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТестЗапросаДвиженияДенежныеСредстваДоходыРасходы(Запрос)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваДоходыРасходы";

	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "#ТаблицаИзмененийРегистра", "ТаблицаИзменений"+ИмяРегистра);
	
	ДопУсловия = "(ТаблицаИзменений.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов" + Символы.ПС + Символы.Таб +
	"ИЛИ ВЫРАЗИТЬ(ТаблицаИзменений.СтатьяДоходовРасходов КАК ПланВидовХарактеристик.СтатьиАктивовПассивов) В" + Символы.ПС + Символы.Таб + Символы.Таб +
	"(ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)," + Символы.ПС + Символы.Таб + Символы.Таб +
	"ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)," + Символы.ПС + Символы.Таб + Символы.Таб +
	"ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ДепонированнаяЗарплата)))";
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", ДопУсловия);

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстАктуализацииРасходовПриУСН);
	Возврат СтруктураТекстовЗапросов

КонецФункции

Функция ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос)
	
	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "#ТаблицаИзмененийРегистра", "ТаблицаИзменений"+ИмяРегистра);
	
	ДопУсловия = "ВЫРАЗИТЬ(ТаблицаИзменений.Статья КАК ПланВидовХарактеристик.СтатьиАктивовПассивов) В 
	|		(ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги),
	|		 ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда))
	|	И НЕ ТаблицаИзменений.Регистратор ССЫЛКА Документ.НачислениеОценочныхОбязательствПоОтпускам
	|	И НЕ ТаблицаИзменений.АналитикаАктивовПассивов В 
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_Доходы),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_МинимальныйНалог),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.УСН_ДоходыМинусРасходы))";
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", ДопУсловия);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстАктуализацииРасходовПриУСН);
	Возврат СтруктураТекстовЗапросов

КонецФункции

Функция ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос)
	
	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "#ТаблицаИзмененийРегистра", "ТаблицаИзмененийДвиженияКонтрагентДоходыРасходы");
	ДопУсловия = "ТаблицаИзменений.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|	ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Организация) = ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Контрагент)
	|	И ТаблицаИзменений.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомиссионераКомиссия)";
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", ДопУсловия);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстАктуализацииРасходовПриУСН);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаКнигаУчетаДоходовИРасходов(Запрос)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ТаблицаИзменений.Период, КВАРТАЛ), МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РасчетНалогаУСН) КАК Операция,
	|	ТаблицаИзменений.Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	ТаблицаИзмененийКнигаУчетаДоходовИРасходов КАК ТаблицаИзменений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ТаблицаИзменений.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР) КАК Операция,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	ТаблицаИзмененийКнигаУчетаДоходовИРасходов КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Графа5 <> 0
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаРасходыПриУСН(Запрос, ИмяВременнойТаблицы)
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН) КАК Операция,
	|	ТаблицаИзменений.Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	&ИмяВременнойТаблицы КАК ТаблицаИзменений";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
	
КонецФункции

Функция ТекстЗапросаРасчетыПоФинансовымИнструментам(Запрос)
	
	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН,
		"#ТаблицаИзмененийРегистра КАК ТаблицаИзменений",
		"ТаблицаИзмененийРасчетыПоФинансовымИнструментам КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО ТаблицаИзменений.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики");
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "ТаблицаИзменений.Организация", "Аналитика.Организация");
	
	ДопУсловия = "НЕ ТаблицаИзменений.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|			И НЕ ТаблицаИзменений.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка)
	|			И ТаблицаИзменений.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			И ТаблицаИзменений.Сумма <> 0";
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", ДопУсловия);
	
	ТекстЗапроса = ТекстАктуализацииРасходовПриУСН;
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПервоначальныеСведенияНМА(Запрос)
	
	ИмяРегистра = "ПервоначальныеСведенияНМА";
	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "#ТаблицаИзмененийРегистра", ИмяРегистра+"Изменение");
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", "ИСТИНА");
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "Регистратор", "Документ");

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстАктуализацииРасходовПриУСН);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПервоначальныеСведенияОС(Запрос)
	
	ИмяРегистра = "ПервоначальныеСведенияОС";
	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "#ТаблицаИзмененийРегистра", ИмяРегистра+"Изменение");
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", "ИСТИНА");
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "Регистратор", "Документ");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстАктуализацииРасходовПриУСН);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаРасчетыСКлиентами(Запрос)
	
	Если НЕ Запрос.Параметры.Свойство("НовыеРасчеты") Тогда
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИзменений.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР) КАК Операция,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ РасчетыСКлиентамиИзменения КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО Константы.ИспользоватьРеглУчет
	|			И НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) >= Константы.ДатаНачалаВеденияРеглУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПоОрганизациямНаУСН КАК ОрганизацииНаУСН
	|		ПО (ОрганизацииНаУСН.Организация = ТаблицаИзменений.Организация)
	|			И (ТаблицаИзменений.Период >= ОрганизацииНаУСН.НачалоПериода)
	|			И (ТаблицаИзменений.Период < ОрганизацииНаУСН.КонецПериода)
	|ГДЕ
	|	&НовыеРасчеты И (ТаблицаИзменений.Сумма <> 0 ИЛИ ТаблицаИзменений.СуммаРегл <> 0 ИЛИ ТаблицаИзменений.СуммаУпр <> 0)
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками(Запрос)

	Если НЕ Запрос.Параметры.Свойство("НовыеРасчеты") Тогда
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	КонецЕсли;
	
	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "#ТаблицаИзмененийРегистра", "РасчетыСПоставщикамиИзменения");
	ДопУсловия = "&НовыеРасчеты И (ТаблицаИзменений.Сумма <> 0 ИЛИ ТаблицаИзменений.СуммаРегл <> 0 ИЛИ ТаблицаИзменений.СуммаУпр <> 0)";
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", ДопУсловия);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстАктуализацииРасходовПриУСН);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаДенежныеСредстваУПодотчетныхЛиц(Запрос)
	
	ТекстАктуализацииРасходовПриУСН = ТекстЗапросаОбновленияЗаданийКЗакрытиюМесяцаПриЗаписиРегистра();
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "#ТаблицаИзмененийРегистра", "ТаблицаИзмененийДенежныеСредстваУПодотчетныхЛиц");
	ДопУсловия = "ИСТИНА";
	ТекстАктуализацииРасходовПриУСН = СтрЗаменить(ТекстАктуализацииРасходовПриУСН, "&ДополнительныеУсловия", ДопУсловия);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстАктуализацииРасходовПриУСН);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаДенежныеСредстваВПути(Запрос)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.СторноДоходовКУДиР) КАК Операция,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	ТаблицаИзмененийДенежныеСредстваВПути КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО Константы.ИспользоватьРеглУчет
	|			И НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) >= Константы.ДатаНачалаВеденияРеглУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПоОрганизациямНаУСН КАК ОрганизацииНаУСН
	|		ПО (ОрганизацииНаУСН.Организация = ТаблицаИзменений.Организация)
	|			И (ТаблицаИзменений.Период >= ОрганизацииНаУСН.НачалоПериода)
	|			И (ТаблицаИзменений.Период < ОрганизацииНаУСН.КонецПериода)
	|ГДЕ
	|	ТаблицаИзменений.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)
	|	И ТаблицаИзменений.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТаблицаИзменений.СуммаРегл <> 0";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

//-- Локализация
#КонецОбласти

#КонецОбласти

#КонецОбласти
