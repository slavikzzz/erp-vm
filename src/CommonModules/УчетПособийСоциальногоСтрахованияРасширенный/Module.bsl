#Область ПрограммныйИнтерфейс

// Возвращает сведения о начислениях, отработанном времени и страхователях 
// для расчета среднего заработка ФСС.
//
// Параметры:
//  ДанныеСотрудника - Структура - см. функцию ИсходныеДанныеСотрудникаДляРасчетаСреднегоЗаработкаФСС.
//	ОтборМесяцев - Массив - (необязательный) если определен, данные будут получены только за указанные месяцы.
//	ИсключаемыйРегистратор - (необязательный) документ, движения которого будут исключены из полученных данных.
//	УчитыватьКорректировки - Булево - учет ручных корректировок при получении данных для расчета среднего.
//
// Возвращаемое значение:
// 	Структура - со свойствами:
//     * ДанныеОНачислениях - ТаблицаЗначений - содержит колонки:
//        ** Период - Дата
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** ПорядокРасчета - ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС
//        ** СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//        ** СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете
//        ** СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата
//        ** ОблагаетсяЕНВД - Булево
//        ** Источник - ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка
//        ** Сумма - Число
//     * ДанныеОВремени - ТаблицаЗначений - содержит колонки:
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** ГоловнаяОрганизация - СправочникСсылка.Организации
//        ** Период - Дата
//        ** ОтработаноДнейКалендарных - Число
//        ** ДнейБолезниУходаЗаДетьми - Число
//        ** Источник - ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка
//     * ДанныеСтрахователей - ТаблицаЗначений - содержит колонки:
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** Год - Число
//        ** Страхователь - СправочникСсылка.Организации
//        ** Сумма - Число
//        ** ДнейБолезниУходаЗаДетьми - Число
//     * ПериодыОтсутствий - ТаблицаЗначений - содержит колонки:
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** ГоловнаяОрганизация - СправочникСсылка.Организации
//        ** ВидБолезниУходаЗаДетьми - Строка
//        ** Начало - Дата
//        ** Окончание - Дата
//        ** Дни - Число
//        ** Источник - ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудника(
	ДанныеСотрудника, 
	ОтборМесяцев = Неопределено, 
	ИсключаемыйРегистратор = Неопределено, 
	УчитыватьКорректировки = Истина) Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	ДополнительныеПараметры.НачалоПериода = ДанныеСотрудника.НачалоПериода;
	ДополнительныеПараметры.ОкончаниеПериода = ДанныеСотрудника.ОкончаниеПериода;
	ДополнительныеПараметры.ПорядокРасчета = ДанныеСотрудника.ПорядокРасчета;
	ДополнительныеПараметры.ОтборМесяцев = ОтборМесяцев;
	ДополнительныеПараметры.ДокументСсылка = ИсключаемыйРегистратор;
	ДополнительныеПараметры.УчитыватьКорректировки = УчитыватьКорректировки;
	
	Возврат ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(ДанныеСотрудника.Сотрудник, ДополнительныеПараметры);
	
КонецФункции

// Возвращает структуру параметров для ДанныеДляРасчетаСреднегоЗаработкаФСССотрудника.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * Сотрудник - СправочникСсылка.Сотрудники - сотрудник организации.
//     * ПорядокРасчета - ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС - правила расчета среднего заработка ФСС.
//     * НачалоПериода - Дата - начало периода расчета среднего заработка.
//     * ОкончаниеПериода - Дата - окончание периода расчета среднего заработка.
//
Функция ИсходныеДанныеСотрудникаДляРасчетаСреднегоЗаработкаФСС() Экспорт
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	ДанныеСотрудника.Вставить("ПорядокРасчета", Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.ПустаяСсылка());
	ДанныеСотрудника.Вставить("НачалоПериода", Дата(1, 1, 1));
	ДанныеСотрудника.Вставить("ОкончаниеПериода", Дата(1, 1, 1));
	
	Возврат ДанныеСотрудника;
	
КонецФункции

// Возвращает сведения о начислениях, отработанном времени и страхователях 
// для расчета среднего заработка ФСС.
//
// Параметры:
//  ДанныеСотрудников - ТаблицаЗначений - см. функцию ИсходныеДанныеСотрудниковДляРасчетаСреднегоЗаработкаФСС.
//	ОтборМесяцев - Массив - (необязательный) если определен, данные будут получены только за указанные месяцы.
//	ИсключаемыйРегистратор - (необязательный) документ, движения которого будут исключены из полученных данных.
//	УчитыватьКорректировки - Булево - учет ручных корректировок при получении данных для расчета среднего.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * ДанныеОНачислениях - ТаблицаЗначений - содержит колонки:
//        ** Период - Дата
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** ПорядокРасчета - ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС
//        ** СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//        ** СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете
//        ** СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата
//        ** ОблагаетсяЕНВД - Булево
//        ** Источник - ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка
//        ** Сумма - Число
//     * ДанныеОВремени - ТаблицаЗначений - содержит колонки:
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** ГоловнаяОрганизация - СправочникСсылка.Организации
//        ** Период - Дата
//        ** ОтработаноДнейКалендарных - Число
//        ** ДнейБолезниУходаЗаДетьми - Число
//        ** Источник - ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка
//     * ДанныеСтрахователей - ТаблицаЗначений - содержит колонки:
//        ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//        ** Год - Число
//        ** Страхователь - СправочникСсылка.Организации
//        ** Сумма - Число
//        ** ДнейБолезниУходаЗаДетьми - Число
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудников(
	ДанныеСотрудников, 
	ОтборМесяцев = Неопределено, 
	ИсключаемыйРегистратор = Неопределено, 
	УчитыватьКорректировки = Истина) Экспорт 
	
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	ДополнительныеПараметры.ОтборМесяцев = ОтборМесяцев;
	ДополнительныеПараметры.ДокументСсылка = ИсключаемыйРегистратор;
	ДополнительныеПараметры.УчитыватьКорректировки = УчитыватьКорректировки;
	
	Возврат ДанныеДляРасчетаСреднегоЗаработкаФСССотрудниковСлужебный(ДанныеСотрудников, ДополнительныеПараметры);
	
КонецФункции

// Возвращает пустую таблицу для ДанныеДляРасчетаСреднегоЗаработкаФСССотрудников.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица с колонками:
//     * Сотрудник - СправочникСсылка.Сотрудники - сотрудник организации.
//     * ПорядокРасчета - ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС - правила расчета среднего заработка ФСС.
//     * НачалоПериода - Дата - начало периода расчета среднего заработка.
//     * ОкончаниеПериода - Дата - окончание периода расчета среднего заработка.
//
Функция ИсходныеДанныеСотрудниковДляРасчетаСреднегоЗаработкаФСС() Экспорт
	
	Возврат ПустаяТаблицаИсходныхДанныхРасчетаСреднегоЗаработкаФСС();
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов.
Функция ПредельнаяВеличинаБазыСтраховыхВзносов(Годы) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов(Годы);
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ВстраиваниеВФормы

// Обновляет элементы формы в соответствии с имеющимися в ней группами.
//   Если в форме есть пустая группа с именем "ГруппаНапоминаниеОбОтключенииПодпискиНаЭЛН"
//   то обновляет предупреждение о необходимости отключения подписок на ЭЛН.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, которую необходимо обновить.
//       В целях оптимизации в форме рекомендуется создать реквизит "ПараметрыПособий" произвольного типа.
//   ПараметрыОбновленияФормы - Структура - Необязательный.
//       См. функцию УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыОбновленияФормы().
//
Процедура ОбновитьФорму(Форма, ПараметрыОбновленияФормы = Неопределено) Экспорт
	Возврат; // Подписки на ЭЛН утратили актуальность.
	
	// Оптимизация ввиду одного внедряемого механизма - напоминаний об отключении подписок.
	Если СЭДОФССРасширенный.ИспользоватьПроактивныеВыплаты() Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка параметров обновления формы.
	Если ПараметрыОбновленияФормы = Неопределено Тогда
		ПараметрыОбновленияФормы = ПараметрыОбновленияФормы();
	КонецЕсли;
	
	// Подготовка параметров пособий.
	Структура = Новый Структура("ПараметрыПособий", 0);
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	ПараметрыПособий = Структура.ПараметрыПособий;
	Если ТипЗнч(ПараметрыПособий) <> Тип("Структура") Тогда
		// 0 используется для того, чтобы выявить ситуацию когда реквизит не добавлен в форму.
		Если ПараметрыПособий = 0 Тогда
			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыПособий", Новый ОписаниеТипов));
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		ПараметрыПособий = Новый Структура;
		Форма.ПараметрыПособий = ПараметрыПособий;
	КонецЕсли;
	
	// Обновление напоминания об отключении подписок на ЭЛН.
	СЭДОФССРасширенный.ОбновитьНапоминаниеОбОтключенииПодписокНаЭЛН(Форма, ПараметрыОбновленияФормы, ПараметрыПособий);
	
КонецПроцедуры

// Конструктор параметра ПараметрыОбновленияФормы процедуры ОбновитьФорму.
//
// Возвращаемое значение:
//   Структура - параметры размещения подключаемых команд.
//       * Организация - Неопределено, СправочникСсылка.Организация
//       * Сотрудники  - Неопределено, СправочникСсылка.Сотрудники, Массив из СправочникСсылка.Сотрудники
//       * ДатаУвольнения - Неопределено, Дата - Дата планируемого увольнения указанных сотрудников.
//           При наличии списка сотрудников и даты увольнения в форме должна присутствовать процедура по шаблону:
//           &НаКлиенте
//           Процедура Подключаемый_ЭлементыПособийНажатие(Элемент, СтандартнаяОбработка)
//           	УчетПособийСоциальногоСтрахованияРасширенныйКлиент.ЭлементыПособийНажатие(
//           		ЭтотОбъект,
//           		Элемент,
//           		СтандартнаяОбработка,
//           		<Сотрудник или массив сотрудников>);
//           КонецПроцедуры
//
Функция ПараметрыОбновленияФормы() Экспорт
	Результат = Новый Структура("Организация, Сотрудники, ДатаУвольнения, Группа");
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных.
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	СЭДОФССРасширенный.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	СписокОбъектов.Добавить(Документы.БольничныйЛист);
	СписокОбъектов.Добавить(Документы.ВходящаяСправкаОЗаработкеДляРасчетаПособий);
	СписокОбъектов.Добавить(Документы.ЕдиновременноеПособиеЗаСчетФСС);
	СписокОбъектов.Добавить(Документы.ЗапросВФССОПроверкеРаботодателя);
	СписокОбъектов.Добавить(Документы.ОплатаДнейУходаЗаДетьмиИнвалидами);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	СЭДОФССРасширенный.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf58-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.БольничныйЛист);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf60-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВходящаяСправкаОЗаработкеДляРасчетаПособий);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfaa-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЕдиновременноеПособиеЗаСчетФСС);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfa4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗапросВФССОПроверкеРаботодателя);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfd2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Работодатели);
	
	СЭДОФССРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Пособия социального страхования';
															|en = 'Social insurance allowances'");
	ГруппаПроверок.Идентификатор				= "КонтрольУчетаПособийСоциальногоСтрахования";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Начисление суммы по оплате больничного листа сотруднику после увольнения';
													|en = 'Accrual of the amount for payment of sick leave to an employee after dismissal'");
	Проверка.Причины						= НСтр("ru = 'Уволенному сотруднику начислена сумма по оплате больничного листа';
													|en = 'The amount for sick leave payment was accrued for the dismissed employee'");
	Проверка.Рекомендация					= НСтр("ru = 'Пересмотреть начисления сотрудника';
													|en = 'Review employee accruals'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаУволенныхСотрудниковСОплатойБольничного";
	Проверка.ОбработчикПроверки				= "УчетПособийСоциальногоСтрахованияПроверкиРасширенный.ПроверкаУволенныхСотрудниковСОплатойБольничного";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Больничный по причине карантина или ухода за родственником учитывает исправления отпусков';
													|en = 'Sick leave due to quarantine or relative care considers corrections of leaves'");
	Проверка.Причины						= НСтр("ru = 'После исправления отпуска не исправлен больничный лист';
													|en = 'The sick leave has not been corrected after correcting the leave'");
	Проверка.Рекомендация					= НСтр("ru = 'Исправить или пересчитать больничный лист';
													|en = 'Correct or recalculate the sick leave'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаКарантинУходУчитываетОтпуск";
	Проверка.ОбработчикПроверки				= "УчетПособийСоциальногоСтрахованияПроверкиРасширенный.ПроверкаКарантинУходУчитываетОтпуск";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	СЭДОФССРасширенный.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	Обработчики.Добавить(Документы.БольничныйЛист);
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.БольничныйЛистПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ОплатаДнейУходаЗаДетьмиИнвалидамиПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.БольничныйЛист, Истина);
	Списки.Вставить(Метаданные.Документы.ВходящаяСправкаОЗаработкеДляРасчетаПособий, Истина);
	Списки.Вставить(Метаданные.Справочники.ВходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЕдиновременноеПособиеЗаСчетФСС, Истина);
	Списки.Вставить(Метаданные.Справочники.ЕдиновременноеПособиеЗаСчетФССПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗапросВФССОПроверкеРаботодателя, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗапросВФССОПроверкеРаботодателяПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ЗапросыПФРФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.УсловияОплатыОтпускаПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ПериодыУходаЗаБольнымиРодственниками, Истина);
	
	СЭДОФССРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// RLS на РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования
	//   (подсистема ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования)
	// поставляется в роли БазовыеПраваЗарплатаКадрыРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы)
	// и в роли НастройкаНачисленияЗарплатыРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная)
	Описание = Описание + "
	|РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования.Чтение.Организации
	|РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования.Изменение.Организации";
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	Описание = Описание + "
	|Справочник.БольничныйЛистПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.БольничныйЛистПрисоединенныеФайлы.Чтение.Организации
	|Справочник.БольничныйЛистПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.БольничныйЛистПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ОплатаДнейУходаЗаДетьмиИнвалидамиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОплатаДнейУходаЗаДетьмиИнвалидамиПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОплатаДнейУходаЗаДетьмиИнвалидамиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОплатаДнейУходаЗаДетьмиИнвалидамиПрисоединенныеФайлы.Изменение.Организации
	|Документ.БольничныйЛист.Чтение.ГруппыФизическихЛиц
	|Документ.БольничныйЛист.Чтение.Организации
	|Документ.БольничныйЛист.Изменение.ГруппыФизическихЛиц
	|Документ.БольничныйЛист.Изменение.Организации
	|Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий.Чтение.ГруппыФизическихЛиц
	|Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий.Чтение.Организации
	|Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий.Изменение.ГруппыФизическихЛиц
	|Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий.Изменение.Организации
	|Справочник.ВходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВходящаяСправкаОЗаработкеДляРасчетаПособийПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЕдиновременноеПособиеЗаСчетФСС.Чтение.ГруппыФизическихЛиц
	|Документ.ЕдиновременноеПособиеЗаСчетФСС.Чтение.Организации
	|Документ.ЕдиновременноеПособиеЗаСчетФСС.Изменение.ГруппыФизическихЛиц
	|Документ.ЕдиновременноеПособиеЗаСчетФСС.Изменение.Организации
	|Справочник.ЕдиновременноеПособиеЗаСчетФССПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЕдиновременноеПособиеЗаСчетФССПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЕдиновременноеПособиеЗаСчетФССПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЕдиновременноеПособиеЗаСчетФССПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗапросВФССОПроверкеРаботодателя.Чтение.ГруппыФизическихЛиц
	|Документ.ЗапросВФССОПроверкеРаботодателя.Чтение.Организации
	|Документ.ЗапросВФССОПроверкеРаботодателя.Изменение.ГруппыФизическихЛиц
	|Документ.ЗапросВФССОПроверкеРаботодателя.Изменение.Организации
	|Справочник.ЗапросВФССОПроверкеРаботодателяПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗапросВФССОПроверкеРаботодателяПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗапросВФССОПроверкеРаботодателяПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗапросВФССОПроверкеРаботодателяПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.Чтение.ГруппыФизическихЛиц
	|Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.Чтение.Организации
	|Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.Изменение.ГруппыФизическихЛиц
	|Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.Изменение.Организации
	|ЖурналДокументов.ЗапросыПФРФСС.Чтение.Объект.Документ.ЗапросВФССОПроверкеРаботодателя
	|ЖурналДокументов.ЗапросыПФРФСС.Чтение.Объект.Документ.ЗаявлениеИЗапросВПФРОЗаработке
	|РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком.Чтение.Организации
	|РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ПериодыУходаЗаБольнымиРодственниками.Чтение.ГруппыФизическихЛиц";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	СЭДОФССРасширенный.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий",
		"Дата",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ЕдиновременноеПособиеЗаСчетФСС",
		"ПериодРегистрации",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ЗапросВФССОПроверкеРаботодателя",
		"Дата",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ОплатаДнейУходаЗаДетьмиИнвалидами",
		"ПериодРегистрации",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"РегистрСведений.РазмерыГосударственныхПособий",
		"Период",
		"Зарплата",
		"");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком",
		"Период",
		"Зарплата",
		"Организация");
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов",
		"Дата",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение",
		"Дата",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ЗаявлениеСотрудникаНаВыплатуПособия",
		"Дата",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий",
		"Дата",
		"Зарплата",
		"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий",
		"Дата",
		"Зарплата",
		"Организация");
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	СЭДОФССРасширенный.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных.
Процедура ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных) Экспорт
	
	НоваяОбласть = КатегорииПерсональныхДанных.Добавить();
	НоваяОбласть.Имя = "СостояниеЗдоровья";
	НоваяОбласть.Представление = НСтр("ru = 'Состояние здоровья';
										|en = 'State of health'");
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	Документы.БольничныйЛист.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	Документы.ВходящаяСправкаОЗаработкеДляРасчетаПособий.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	Документы.ЕдиновременноеПособиеЗаСчетФСС.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	
	// РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Сумма";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	// РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям";
	НовыеСведения.ПоляРегистрации = "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа     = "Сумма";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	// РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС";
	НовыеСведения.ПоляРегистрации = "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа     = "Сумма";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	// РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС";
	НовыеСведения.ПоляРегистрации = "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Сумма";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	// РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Сумма";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	// РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС";
	НовыеСведения.ПоляРегистрации = "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа     = "Сумма";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	// РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком.
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "КоличествоДетей,КоличествоПервыхДетей,ПрименятьЛьготыПриНачисленииПособия,ДатаНачалаСобытия,ФинансированиеФедеральнымБюджетом,ДоляНеполногоВремени,СтраховойСлучай";
	НовыеСведения.ОбластьДанных   = "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "СреднийДневнойЗаработок";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	СЭДОФССРасширенный.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений);
	
	МетаданныеОбъекта = Метаданные.Документы.ОтпускПоУходуЗаРебенком;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Реквизиты.Сотрудник.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.ДатаРожденияРебенка.ПолноеИмя());
	Поля.Добавить(
		МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.НаименованиеПодтверждающегоДокумента.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.ДатаДокумента.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.СерияДокумента.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.НомерДокумента.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.Фамилия.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.Имя.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.Отчество.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.ТабличныеЧасти.ДанныеОДетях.Реквизиты.КемВыданДокумент.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "СоставСемьи";
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных.
Процедура ПриРасчетеСроковХраненияПерсональныхДанных(ДанныеСубъектов, СрокиХранения) Экспорт
	
	ФизическиеЛица = ЗащитаПерсональныхДанныхЗарплатаКадры.ФизическиеЛицаИзДанныхСубъектов(ДанныеСубъектов,
		СрокиХранения);
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатыПолученияДоходов = МаксимальныеДатыПолученияПособий(ФизическиеЛица);
	
	Для Каждого СтрокаТаблицы Из ДатыПолученияДоходов Цикл
		
		ДобавитьСтроку = Истина;
		
		СрокХранения = ЗащитаПерсональныхДанныхЗарплатаКадры.СрокХраненияПоДатеСобытия(
			СтрокаТаблицы.Дата);
		
		НайденныеСтроки = СрокиХранения.НайтиСтроки(Новый Структура("Субъект", СтрокаТаблицы.ФизическоеЛицо));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.СрокХранения >= СрокХранения Тогда
				ДобавитьСтроку = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавитьСтроку Тогда
			НоваяСтрока = СрокиХранения.Добавить();
			НоваяСтрока.Субъект = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.Организация = СтрокаТаблицы.Организация;
			НоваяСтрока.СрокХранения = СрокХранения;
			НоваяСтрока.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 получено пособие';
					|en = 'On %1 benefit is received'"), Формат(СтрокаТаблицы.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияОбъектов

// См. ПрефиксацияОбъектовПереопределяемый.ПолучитьПрефиксообразующиеРеквизиты.
Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СЭДОФССРасширенный.ПолучитьПрефиксообразующиеРеквизиты(Объекты);
	
КонецПроцедуры

#КонецОбласти

// См. УчетПособийСоциальногоСтрахования.ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия.
Функция ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Объект) Экспорт
	Возврат УчетПособийСоциальногоСтрахованияБазовый.ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Объект);
КонецФункции

// См. УчетПособийСоциальногоСтрахования.ДанныеОЗаработкеДляЗаполнения.
Функция ДанныеОЗаработкеДляЗаполнения(ПараметрыЗаполнения) Экспорт
	Возврат УчетПособийСоциальногоСтрахованияБазовый.ДанныеОЗаработкеДляЗаполнения(ПараметрыЗаполнения);
КонецФункции

// Заполняется таблица показателей для предопределенных способов расчета пособий
//
Процедура ЗаполнитьПоказателиРасчетаПособий(ТаблицаПоказателей) Экспорт
	
	// Календарные дни
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛет;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛет;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛетНезастрахованным;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛетНезастрахованным;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.УчитыватьМРОТ");
КонецПроцедуры

// Процедура вызывает конкретные алгоритмы расчета результата.
//
// Параметры
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний,
//	- СтрокиРасчета - массив строк таблицы значений данных для расчета с колонками:
//			- ЗаписьРасчета - строка набора записей регистра расчета
//			- ИсходныеДанные - структура со значениями показателями, используемыми в контексте расчета
//	- НаборыЗаписей - структура наборов записей, моделирующая коллекцию движений документа
//			с установленным отбором по временному регистратору
//	- ДополнительныеПараметры - структура, в которой передаются значения, используемые при расчете:
//		ДанныеФормыОбъект - объект редактируемый в рассчитываемой форме
//		Организация
//		МесяцНачисления.
//
Процедура РассчитатьПособие(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт
	
	РассчитатьПособиеДоПолутораЛет(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц);
	РассчитатьПособиеПоНетрудоспособности(СпособРасчета, СтрокиРасчета, ДополнительныеПараметры);
	РассчитатьПособиеДоПолутораЛетНезастрахованным(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц);
	РассчитатьОплатуДнейУходаЗаДетьмиИнвалидами(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура РассчитатьПособиеПоСтрокамНабора(СпособРасчета, СтрокиРасчета, СтрокиНабора, УсловияОплатыПособий, ДополнительныеПараметры) Экспорт
	РассчитатьПособиеДоПолутораЛетПоСтрокамНабора(СпособРасчета, СтрокиРасчета, СтрокиНабора, УсловияОплатыПособий, ДополнительныеПараметры);
	РассчитатьПособиеПоНетрудоспособностиПоДаннымНабора(СпособРасчета, СтрокиРасчета, ДополнительныеПараметры, СтрокиНабора);
	РассчитатьПособиеДоПолутораЛетНезастрахованнымПоСтрокамНабора(СпособРасчета, СтрокиРасчета, СтрокиНабора, УсловияОплатыПособий, ДополнительныеПараметры);
	РассчитатьОплатуДнейУходаЗаДетьмиИнвалидами(СпособРасчета, СтрокиРасчета);
КонецПроцедуры	

Процедура РассчитатьПособиеДоПолутораЛетПоСтрокамНабора(СпособРасчета, СтрокиРасчета, СтрокиНабора, УсловияОплатыПособий, ДополнительныеПараметры)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛет Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для участвующих в пилотном проекте ФСС пособие не начисляется.
	ПособияПоОбязательномуСтрахованиюВыплачиваетФСС = ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокиНабора[СтрокиРасчета[0].ИдентификаторСтроки].ПериодРегистрации, СтрокиРасчета[0].Организация);
	Если ПособияПоОбязательномуСтрахованиюВыплачиваетФСС Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрПолученияРазмеровПособий = Новый ТаблицаЗначений;
	ФильтрПолученияРазмеровПособий.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		
	СтрокиПоИдентификатору = Новый Соответствие;
	ИдентификаторыСтрок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		СтрокаНабора = СтрокиНабора[СтрокаТаблицы.ИдентификаторСтроки];
		СтрокаФильтра = ФильтрПолученияРазмеровПособий.Добавить();
		СтрокаФильтра.Период = СтрокаНабора.ПериодДействияНачало;	
	КонецЦикла;
	
	ФильтрПолученияРазмеровПособий.Свернуть("Период");
	ОписаниеФильтраРазмеров = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ФильтрПолученияРазмеровПособий);
	РазмерыПособий = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних("РазмерыГосударственныхПособий", Новый МенеджерВременныхТаблиц, Ложь, ОписаниеФильтраРазмеров);
		
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(УсловияОплатыПособий, "Сотрудник");
	ОтборУсловийОплаты = Новый Структура("Сотрудник");
	
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл	
		СтрокаНабора = СтрокиНабора[СтрокаТаблицы.ИдентификаторСтроки]; 
		
		ОтборУсловийОплаты.Сотрудник = СтрокаНабора.Сотрудник;
		
		ТекущиеУсловияОплаты = Неопределено;
		СтрокиУсловийОплаты = УсловияОплатыПособий.НайтиСтроки(ОтборУсловийОплаты);
		Для Каждого СтрокаУсловийОплаты Из СтрокиУсловийОплаты Цикл
			Если ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаНабора.ПериодДействияНачало, СтрокаУсловийОплаты.ДатаНачала, СтрокаУсловийОплаты.ДатаОкончания) Тогда
				ТекущиеУсловияОплаты = СтрокаУсловийОплаты;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТекущиеУсловияОплаты = Неопределено
			Или ТекущиеУсловияОплаты.КоличествоДетей = 0 Тогда
			
			УстановитьПривилегированныйРежим(Истина);
					
			ТекстСообщения = НСтр("ru = '%1; %2: Не указано количество детей, за которыми производится уход. Возможно не зарегистрирован отпуск по уходу за ребенком.';
									|en = '%1; %2: Number of children who are cared for is not specified. Maybe, child care leave is not registered.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаНабора.Сотрудник, СтрокаНабора.ВидРасчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Ограничения = РазмерыПособий.Найти(СтрокаНабора.ПериодДействияНачало, "Период");
		
		РайонныйКоэффициентРФОрганизации = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "РайонныйКоэффициентРФ");
		МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет = ?(Ограничения = Неопределено, 0, Ограничения.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет);
		МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет = ?(Ограничения = Неопределено, 0, Ограничения.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет);
		
		ДатаЗакона343ФЗ = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаНачалаРеформыСоцСтрахования();
		
		КалендарныхДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(СтрокаТаблицы.ДатаНачала);
		// Календарных дней за фактический период действия.
		ОплачиваемыеДни = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "КалендарныеДни");
		
		КоличествоДетейВсего = ТекущиеУсловияОплаты.КоличествоДетей;
		КоличествоПервыхДетей = ТекущиеУсловияОплаты.КоличествоПервыхДетей;
		
		ОграниченныйРазмер = 0;
		Результат = 0;
		РезультатВТомЧислеЗаСчетФБ = 0;
		
		ОграниченныйРазмерНаПервогоРебенка = 0;
		РезультатНаПервогоРебенка  = 0;
		ВТомЧислеЗаСчетФБНаПервогоРебенка = 0;
		
		// Льготы предусмотрены статьей 18 Закона РФ от 15.05.1991 № 1244-1 «О социальной
		// защите граждан, подвергшихся воздействию радиации вследствие катастрофы на
		// Чернобыльской АЭС», дополнительные суммы пособия при этом финансируются
		// федеральным бюджетом.
		КоэффициентЛьготы = Макс(?(ТекущиеУсловияОплаты.ПрименятьЛьготыПриНачисленииПособия, 2, 1), 1); // если льгота не применяется, коэффициент будет равен 1
		КоэффициентФедеральногоБюджета = Мин(?(ТекущиеУсловияОплаты.ПрименятьЛьготыПриНачисленииПособия, 0.5, 0), 1);
		
		// В соответствии с частью 5.1 статьи 14 Федеральный закон от 29 декабря 2006 года № 255-ФЗ «Об обязательном социальном
		// страховании на случай временной нетрудоспособности и в связи с материнством»
		// определяем среднемесячный заработок путем умножения среднего дневного заработка на 30.4.
		МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ(
			ТекущиеУсловияОплаты.МинимальныйСреднедневнойЗаработок,
			ТекущиеУсловияОплаты.РайонныйКоэффициентРФНаНачалоСобытия,
			ТекущиеУсловияОплаты.ДатаНачалаСобытия);
		
		Если ТекущиеУсловияОплаты.СреднийДневнойЗаработок > МинимальныйСреднедневнойЗаработок Тогда
			СреднийЗаработок = Окр(ТекущиеУсловияОплаты.СреднийДневнойЗаработок * 30.4, 2);
		Иначе
			МРОТНаНачалоСобытия = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(ТекущиеУсловияОплаты.ДатаНачалаСобытия);
			СреднийЗаработок = МРОТНаНачалоСобытия * ТекущиеУсловияОплаты.РайонныйКоэффициентРФНаНачалоСобытия * ТекущиеУсловияОплаты.ДоляНеполногоВремени;
		КонецЕсли;
		
		Если ТекущиеУсловияОплаты.РасчетПоПравилам2010Года Тогда
			// Средний заработок, из которого исчисляется ежемесячное пособие по уходу за ребенком, не может превышать
			// средний заработок, определяемый путем деления предельной величины базы для начисления страховых взносов
			// в Фонд социального страхования Российской Федерации, установленной Федеральным законом "О страховых взносах
			// в Пенсионный фонд Российской Федерации, Фонд социального страхования Российской Федерации, Федеральный фонд
			// обязательного медицинского страхования и территориальные фонды обязательного медицинского страхования" на день
			// наступления страхового случая, на 12.
			СреднийЗаработок = Мин(СреднийЗаработок, Окр(РазмерОграниченияДля2010года() / 12, 2));
		КонецЕсли;
		
		Если КоэффициентЛьготы > 1 Тогда
			Если КоличествоПервыхДетей = 0 Тогда
				ДоляПервогоРебенка = 0;
			Иначе
				ДоляПервогоРебенка = 1;
				Если КоличествоДетейВсего > 1 Тогда
					ДоляПервогоРебенка =
					Макс(Окр(СреднийЗаработок * 40 / 100, 2), МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * Макс(РайонныйКоэффициентРФОрганизации, 1)) /
					Макс(Окр(СреднийЗаработок * Мин(40 * КоличествоДетейВсего, 100) / 100, 2), (МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет + МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - 1)) * Макс(РайонныйКоэффициентРФОрганизации, 1));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если среди детей есть первый ребенок, считаем пособие на него отдельно.
		Если КоличествоПервыхДетей = 1 Тогда
			РазмерПособияНаПервогоРебенка = Окр(СреднийЗаработок * 40 / 100, 2) * КоэффициентЛьготы;
			
			// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
			//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
			//	минимальный размер указанного пособия определяются с учетом этих коэффициентов.".
			ОграничениеПособияСнизуНаПервогоРебенка = МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * Макс(РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
			ОграниченныйРазмерНаПервогоРебенка = Макс(РазмерПособияНаПервогоРебенка, ОграничениеПособияСнизуНаПервогоРебенка);
			
			Если КоличествоДетейВсего = 1 Тогда
				ОграниченныйРазмер = ОграниченныйРазмерНаПервогоРебенка;
				
			Иначе // КоличествоДетейВсего > 1
				// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
				//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
				//	минимальный размер указанного пособия определяются с учетом этих коэффициентов.".
				//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия".
				ОграничениеПособияСнизуНаПоследующихДетей = МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - 1) * Макс(РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
				ОграничениеПособияСнизуНаВсехДетей = ОграничениеПособияСнизуНаПервогоРебенка + ОграничениеПособияСнизуНаПоследующихДетей;
				
				// Часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
				//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в
				//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия,
				//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов
				//	размера указанного заработка (дохода, денежного довольствия).".
				ПроцентОплатыНаПоследующихДетей = Мин(40 * (КоличествоДетейВсего - 1), 100);
				РазмерПособияНаПоследующихДетей = Окр(СреднийЗаработок * ПроцентОплатыНаПоследующихДетей / 100, 2) * КоэффициентЛьготы;
				ОграниченныйРазмерНаПоследующихДетей = Макс(РазмерПособияНаПоследующихДетей, ОграничениеПособияСнизуНаПоследующихДетей);
				
				РазмерПособияНаВсехДетей = Мин(ОграниченныйРазмерНаПервогоРебенка + ОграниченныйРазмерНаПоследующихДетей, СреднийЗаработок);
				ОграниченныйРазмер = Макс(РазмерПособияНаВсехДетей, ОграничениеПособияСнизуНаВсехДетей);
				
				Если ОграничениеПособияСнизуНаВсехДетей > РазмерПособияНаВсехДетей Тогда
					ОграниченныйРазмерНаПервогоРебенка = ОграничениеПособияСнизуНаПервогоРебенка;
				КонецЕсли;
				
				Если КоэффициентЛьготы > 1 Тогда
					ОграниченныйРазмерНаПервогоРебенка = Окр(ДоляПервогоРебенка * ОграниченныйРазмер, 2)
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
			//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в
			//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия,
			//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов
			//	размера указанного заработка (дохода, денежного довольствия).".
			ПроцентОплаты = Мин(40 * КоличествоДетейВсего, 100);
			
			// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
			//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
			//	минимальный размер указанного пособия определяются с учетом этих коэффициентов.".
			//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия".
			ОграничениеПособияСнизу = МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
			РазмерПособия = Окр(СреднийЗаработок * ПроцентОплаты / 100, 2) * КоэффициентЛьготы;
			
			// Пособие за месяц с учетом ограничений.
			ОграниченныйРазмер = Макс(Мин(РазмерПособия, СреднийЗаработок), ОграничениеПособияСнизу);
		КонецЕсли;
		
		Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
			Результат = Окр(ОграниченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
			РезультатНаПервогоРебенка = Окр(ОграниченныйРазмерНаПервогоРебенка / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
		Иначе
			Результат = ОграниченныйРазмер;
			РезультатНаПервогоРебенка = ОграниченныйРазмерНаПервогоРебенка;
		КонецЕсли;
		
		Если КоэффициентФедеральногоБюджета = 1 Тогда // пособие целиком за счет федерального бюджета
			РезультатВТомЧислеЗаСчетФБ = Результат * ?(СтрокаТаблицы.Сторно, -1, 1);
			ВТомЧислеЗаСчетФБНаПервогоРебенка = РезультатНаПервогоРебенка * ?(СтрокаТаблицы.Сторно,-1,1);
		ИначеЕсли КоэффициентФедеральногоБюджета = 0.5 Тогда // пособие за счет федерального бюджета выплачивается частично
			ОграниченныйРазмер = Макс(Окр(СреднийЗаработок * Мин(40 * КоличествоДетейВсего, 100) / 100, 2), (МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей + МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(РайонныйКоэффициентРФОрганизации, 1));
			Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
				ДопРезультат = Окр(ОграниченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
			Иначе
				ДопРезультат = ОграниченныйРазмер;
			КонецЕсли;
			РезультатВТомЧислеЗаСчетФБ = Макс(Результат - ДопРезультат, 0) * ?(СтрокаТаблицы.Сторно,-1,1);
			ВТомЧислеЗаСчетФБНаПервогоРебенка = Окр(РезультатВТомЧислеЗаСчетФБ * ДоляПервогоРебенка, 2);
		КонецЕсли;
		
		СтрокаТаблицы.Результат = Результат * ?(СтрокаТаблицы.Сторно, -1, 1);
		
		СтрокаТаблицы.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", РезультатВТомЧислеЗаСчетФБ);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаВсегоПоУходуЗаПервымРебенком", РезультатНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаСверхНормПоУходуЗаПервымРебенком", ВТомЧислеЗаСчетФБНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаВсегоПоУходуЗаВторымРебенком", Результат - РезультатНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаСверхНормПоУходуЗаВторымРебенком", РезультатВТомЧислеЗаСчетФБ - ВТомЧислеЗаСчетФБНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("ФинансированиеФедеральнымБюджетом", ТекущиеУсловияОплаты.ФинансированиеФедеральнымБюджетом);
		СтрокаТаблицы.Дополнительно.Вставить("СтраховойСлучай", ТекущиеУсловияОплаты.СтраховойСлучай);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоДетей", ТекущиеУсловияОплаты.КоличествоДетей);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоПервыхДетей", ТекущиеУсловияОплаты.КоличествоПервыхДетей);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рассчитывает строки со способом расчета "ПособиеПоУходуЗаРебенкомДоПолутораЛетНезастрахованным".
//
// Параметры
//	- СтрокиРасчета - массив строк таблицы значений данных для расчета с колонками:
//			- ЗаписьРасчета - строка набора записей регистра расчета
//			- ИсходныеДанные - структура со значениями показателями, используемыми в контексте расчета.
//
Процедура РассчитатьПособиеДоПолутораЛетНезастрахованнымПоСтрокамНабора(СпособРасчета, СтрокиРасчета, СтрокиНабора, УсловияОплатыПособий, ДополнительныеПараметры)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛетНезастрахованным Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ФильтрПолученияРазмеровПособий = Новый ТаблицаЗначений;
	ФильтрПолученияРазмеровПособий.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		
	СтрокиПоИдентификатору = Новый Соответствие;
	ИдентификаторыСтрок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		СтрокаНабора = СтрокиНабора[СтрокаТаблицы.ИдентификаторСтроки];
		СтрокаФильтра = ФильтрПолученияРазмеровПособий.Добавить();
		СтрокаФильтра.Период = СтрокаНабора.ПериодДействияНачало;	
	КонецЦикла;
	
	ФильтрПолученияРазмеровПособий.Свернуть("Период");
	ОписаниеФильтраРазмеров = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ФильтрПолученияРазмеровПособий);
	РазмерыПособий = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних("РазмерыГосударственныхПособий", Новый МенеджерВременныхТаблиц, Ложь, ОписаниеФильтраРазмеров);
	
	УсловияОплатыПособий.Сортировать("ДатаНачалаСобытия");
	МинПериод = УсловияОплатыПособий[0].ДатаНачалаСобытия;
	МаксПериод = УсловияОплатыПособий[УсловияОплатыПособий.Количество()-1].ДатаНачалаСобытия;
	
	МинПериод=ДобавитьМесяц(НачалоГода(МинПериод) - 1,-12);
	Годы = новый Массив();
	ОписаниеПределовПоГодам = Новый Соответствие();
	
	Пока МинПериод <= МаксПериод Цикл
		ОписаниеПериода = Новый Структура("КалендарныхДней",(КонецГода(МинПериод) + 1 - НачалоГода(МинПериод)) / ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
		ОписаниеПределовПоГодам.Вставить(Год(МинПериод),ОписаниеПериода);
		Годы.Добавить(Год(МинПериод));
		МинПериод = КонецГода(МинПериод)+1;
	КонецЦикла;
	ПредельныеВеличиныПоГодам = ПредельнаяВеличинаБазыСтраховыхВзносов(Годы);
	Для Каждого ОписаниеГода Из ОписаниеПределовПоГодам Цикл
		ОписаниеГода.Значение.Вставить("ПредельнаяВеличина", ПредельныеВеличиныПоГодам[ОписаниеГода.Ключ]);
	КонецЦикла;
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(УсловияОплатыПособий, "Сотрудник");
	ОтборУсловийОплаты = Новый Структура("Сотрудник");
	
	ДатаЗакона282ФЗ = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаЗакона282ФЗ();
	
	ОграничениеПособияВоеннослужащимВключаетРК = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения().ОграничениеПособияВоеннослужащимВключаетРК;
	
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		СтрокаНабора = СтрокиНабора[СтрокаТаблицы.ИдентификаторСтроки]; 
		
		ОтборУсловийОплаты.Сотрудник = СтрокаНабора.Сотрудник;
		
		ТекущиеУсловияОплаты = Неопределено;
		СтрокиУсловийОплаты = УсловияОплатыПособий.НайтиСтроки(ОтборУсловийОплаты);
		Для Каждого СтрокаУсловийОплаты Из СтрокиУсловийОплаты Цикл
			Если ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаНабора.ПериодДействияНачало, СтрокаУсловийОплаты.ДатаНачала, СтрокаУсловийОплаты.ДатаОкончания) Тогда
				ТекущиеУсловияОплаты = СтрокаУсловийОплаты;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТекущиеУсловияОплаты = Неопределено 
			Или ТекущиеУсловияОплаты.КоличествоДетей = 0 Тогда
			ТекстСообщения = НСтр("ru = '%1; %2: Не указано количество детей, за которыми производится уход. Возможно не зарегистрирован отпуск по уходу за ребенком.';
									|en = '%1; %2: Number of children who are cared for is not specified. Maybe, child care leave is not registered.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.Сотрудник, СтрокаТаблицы.ВидРасчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Ограничения = РазмерыПособий.Найти(СтрокаНабора.ПериодДействияНачало, "Период");
		
		РайонныйКоэффициентРФОрганизации = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "РайонныйКоэффициентРФ");
		МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет = ?(Ограничения = Неопределено, 0, Ограничения.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет);
		МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет = ?(Ограничения = Неопределено, 0, Ограничения.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет);
		МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет = ?(Ограничения = Неопределено, 0, Ограничения.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет);
			
		КалендарныхДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(СтрокаТаблицы.ДатаНачала);
		// Календарных дней за фактический период действия.
		ОплачиваемыеДни = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "КалендарныеДни");
		
		КоличествоДетейВсего = ТекущиеУсловияОплаты.КоличествоДетей;
		КоличествоПервыхДетей = ТекущиеУсловияОплаты.КоличествоПервыхДетей;
				
		// Часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
		//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в
		//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия,
		//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов
		//	размера указанного заработка (дохода, денежного довольствия).".
		ПроцентОплаты = Мин(40 * КоличествоДетейВсего,100);
		
		// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
		//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
		//	минимальный и максимальный размеры указанного пособия определяются с учетом этих коэффициентов.".
		
		//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
		
		ОграничениеПособияСнизу = (МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей
			+ МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(РайонныйКоэффициентРФОрганизации, 1);
		ОграничениеПособияСверху = МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(РайонныйКоэффициентРФОрганизации, 1);
		
		Если СтрокаТаблицы.ПериодДействия >= ДатаЗакона282ФЗ Тогда
			КалендарныхДней = 730;
			ПредельнаяВеличина = 0;
			ГодПо = Год(ТекущиеУсловияОплаты.ДатаНачалаСобытия)-1;
			ГодС = ГодПо-1;
			Пока ГодС <= ГодПо Цикл
				ПредельнаяВеличина = ПредельнаяВеличина +ОписаниеПределовПоГодам[ГодС].ПредельнаяВеличина;
				ГодС = ГодС + 1;
			КонецЦикла;
			СреднийДневнойЗаработок = ПредельнаяВеличина / КалендарныхДней * ?(ОграничениеПособияВоеннослужащимВключаетРК,РайонныйКоэффициентРФОрганизации,1);
			ТекущиеУсловияОплаты.СреднийДневнойЗаработок = Мин(ТекущиеУсловияОплаты.СреднийДневнойЗаработок,СреднийДневнойЗаработок);
			ОграничениеПособияСверху = Неопределено;
		КонецЕсли;
		
		// Определяем среднемесячный заработок путем умножения среднего дневного заработка на среднемесячное число календарных дней
		// согласно п.5 Разъяснения о порядке назначения и выплаты ежемесячного пособия по уходу за ребенком, утв. приказом
		// Минздравсоцразвития РФ N 270, ФСС РФ N 106 от 13.04.2007.
		
		РазмерПособия = Окр(ТекущиеУсловияОплаты.СреднийДневнойЗаработок * ПроцентОплаты / 100 * 30.4, 2);
		// пособие за месяц с учетом ограничений
		ОграниченныйРазмер = Макс(?(ЗначениеЗаполнено(ОграничениеПособияСверху),Мин(РазмерПособия, ОграничениеПособияСверху),РазмерПособия), ОграничениеПособияСнизу);
		
		Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
			Результат = Окр(ОграниченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
		Иначе
			Результат = ОграниченныйРазмер;
		КонецЕсли;
		
		СтрокаТаблицы.Результат = Результат * ?(СтрокаТаблицы.Сторно, -1, 1);
		
		СтрокаТаблицы.Дополнительно.Вставить("ФинансированиеФедеральнымБюджетом", ТекущиеУсловияОплаты.ФинансированиеФедеральнымБюджетом);
		СтрокаТаблицы.Дополнительно.Вставить("СтраховойСлучай", ТекущиеУсловияОплаты.СтраховойСлучай);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоДетей", ТекущиеУсловияОплаты.КоличествоДетей);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоПервыхДетей", ТекущиеУсловияОплаты.КоличествоПервыхДетей);
	КонецЦикла;
	
КонецПроцедуры

Функция УсловияОплатыПособийДоПолутораЛет(ТаблицаФильтр) Экспорт
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтр, "Сотрудник");
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УсловияОплатыПособий = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
								"УсловияОплатыОтпускаПоУходуЗаРебенком", 
								МенеджерВременныхТаблиц, 
								Истина,
								ОписаниеФильтра,
								ПараметрыПостроения);
	
								
								
								
								
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаФильтр, "Сотрудник");							
	СтруктураПоиска = Новый Структура("Сотрудник");
	УсловияОплатыПособий.Колонки.Период.Имя = "ДатаНачала";							
	УсловияОплатыПособий.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	УсловияОплатыПособий.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицы Из УсловияОплатыПособий Цикл
		Если ПредыдущаяСтрока <> Неопределено 
			И ПредыдущаяСтрока.Сотрудник = СтрокаТаблицы.Сотрудник Тогда
			
			ПредыдущаяСтрока.ДатаОкончания = НачалоДня(СтрокаТаблицы.ДатаНачала) - 1;
		ИначеЕсли ПредыдущаяСтрока <> Неопределено Тогда
			СтруктураПоиска.Сотрудник = ПредыдущаяСтрока.Сотрудник;
			СтрокиФильтра = ТаблицаФильтр.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицыФильтра Из СтрокиФильтра Цикл
				Если ПредыдущаяСтрока.ДатаНачала >= СтрокаТаблицыФильтра.ДатаНачала
					И ПредыдущаяСтрока.ДатаНачала <= СтрокаТаблицыФильтра.ДатаОкончания Тогда
					
					ПредыдущаяСтрока.ДатаОкончания = КонецДня(СтрокаТаблицыФильтра.ДатаОкончания);
					Прервать;
				КонецЕсли;	
			КонецЦикла;				
		КонецЕсли;	
			
		ПредыдущаяСтрока = СтрокаТаблицы;		
	КонецЦикла;	
	
	Если ПредыдущаяСтрока <> Неопределено Тогда
		СтруктураПоиска.Сотрудник = ПредыдущаяСтрока.Сотрудник;
		СтрокиФильтра = ТаблицаФильтр.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицыФильтра Из СтрокиФильтра Цикл
			Если ПредыдущаяСтрока.ДатаНачала >= СтрокаТаблицыФильтра.ДатаНачала
				И ПредыдущаяСтрока.ДатаНачала <= СтрокаТаблицыФильтра.ДатаОкончания Тогда
				
				ПредыдущаяСтрока.ДатаОкончания = КонецДня(СтрокаТаблицыФильтра.ДатаОкончания);
				Прервать;
			КонецЕсли;	
		КонецЦикла;				
	КонецЕсли;	
	
	Возврат УсловияОплатыПособий;	
КонецФункции	

// Формирует движения по регистру УсловияОплатыОтпускаПоУходуЗаРебенком
// Параметры:
//		Движения - коллекция движений регистратора
//		ЗаписиУсловийОплатыОтпуска - таблица значений с колонками
//			Организация
//			СтраховойСлучай
//			Период
//			Сотрудник
//			ФизическоеЛицо
//			СреднийДневнойЗаработок
//			КоличествоДетей
//			КоличествоПервыхДетей
//			ПрименятьЛьготыПриНачисленииПособия
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияУсловийОплатыОтпускаПоУходуЗаРебенком(Движения, ЗаписиУсловийОплатыОтпуска) Экспорт
	Для Каждого Запись Из ЗаписиУсловийОплатыОтпуска Цикл
		Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записывать = Истина;
		Движение = Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
	КонецЦикла;
	
	Если Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записывать Тогда
		Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записать();
		Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записывать = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьВозможностьЗаписиРегистраУсловияОплаты(Организация, Сотрудник, Период, Ссылка, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
	|	УсловияОплатыОтпускаПоУходуЗаРебенком.Период,
	|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор
	|ИЗ
	|	РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком КАК УсловияОплатыОтпускаПоУходуЗаРебенком
	|ГДЕ
	|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник = &Сотрудник
	|	И УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор <> &Регистратор
	|	И УсловияОплатыОтпускаПоУходуЗаРебенком.Организация = &Организация
	|	И УсловияОплатыОтпускаПоУходуЗаРебенком.Период = &Период";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Условия оплаты отпуска по уходу за ребенком по сотруднику %1 на дату %2 уже сформированы документом %3. Изменение условий в течение одного дня невозможно.';
															|en = 'Child care leave payment terms for the %1 employee as of %2 are already generated with the %3 document. Cannot change the terms within one day.'"),
			Выборка.Сотрудник, Формат(Выборка.Период, "ДЛФ=Д"), Выборка.Регистратор), , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Предназначен для сбора дат, которые подсистема «Расчет зарплаты» использует
// для разделения строк начислений на отдельные периоды.
//
Процедура СоздатьВТДатыИзмененияУсловийОплатыПособийДоПолутораЛет(МенеджерВременныхТаблиц, ИмяВТДатыИзмененияУсловийОплатыПособийДоПолутораЛет = "ВТДатыИзмененияУсловийОплатыПособийДоПолутораЛет") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Период КАК Дата
		|ПОМЕСТИТЬ ВТДатыИзмененияУсловийОплатыПособийДоПолутораЛет
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком КАК УсловияОплатыОтпускаПоУходуЗаРебенком
		|		ПО (Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет))
		|			И Начисления.Сотрудник = УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник
		|			И Начисления.Организация = УсловияОплатыОтпускаПоУходуЗаРебенком.Организация
		|			И (УсловияОплатыОтпускаПоУходуЗаРебенком.Период > Начисления.ДатаНачала)
		|			И (УсловияОплатыОтпускаПоУходуЗаРебенком.Период < Начисления.ДатаОкончания)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыИзмененияУсловийОплатыПособийДоПолутораЛет", ИмяВТДатыИзмененияУсловийОплатыПособийДоПолутораЛет);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет табличные части документа "ИсходящаяСправкаОЗаработкеДляРасчетаПособий".
//
// Параметры
//  Объект -  ДокументОбъект.ИсходящаяСправкаОЗаработкеДляРасчетаПособий
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия.
//
// Возвращаемое значение:
//	Истина, если данные в объекте были обновлены.
//
Функция ЗаполнитьСправкуДаннымиОЗаработкеИДняхОтсутствия(Объект, ПараметрыЗаполнения) Экспорт
	
	НачалоПериода = Дата(ПараметрыЗаполнения.ГодНачала, 1, 1);
	ОкончаниеПериода = КонецГода(Дата(ПараметрыЗаполнения.ГодОкончания, 1, 1));
	
	ДанныеДляРасчетаСреднего = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаПоГодам(ПараметрыЗаполнения.Сотрудник, НачалоПериода, ОкончаниеПериода, Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011);
	ПериодыДнейБолезниУходаЗаДетьми = ПериодыДнейБолезниУходаЗаДетьми(Объект.ФизическоеЛицо, ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыЗаполнения.Организация), НачалоПериода, ОкончаниеПериода, Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УчетПособийСоциальногоСтрахования.СоздатьВТПредельнаяВеличинаБазы(Запрос.МенеджерВременныхТаблиц, ДанныеДляРасчетаСреднего.Начисления.ВыгрузитьКолонку("Год"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОДоходах.Год,
	|	СведенияОДоходах.Сумма КАК Заработок
	|ПОМЕСТИТЬ ВТДанныеОЗаработкеБезОграничения
	|ИЗ
	|	&ДанныеДляРасчетаСреднегоНачисления КАК СведенияОДоходах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОЗаработкеБезОграничения.Год КАК РасчетныйГод,
	|	ВЫБОР
	|		КОГДА НЕ ПредельнаяВеличинаБазы.Размер ЕСТЬ NULL
	|				И ПредельнаяВеличинаБазы.Размер < ВТДанныеОЗаработкеБезОграничения.Заработок
	|			ТОГДА ПредельнаяВеличинаБазы.Размер
	|		ИНАЧЕ ВТДанныеОЗаработкеБезОграничения.Заработок
	|	КОНЕЦ КАК Заработок
	|ПОМЕСТИТЬ ВТДанныеОЗаработке
	|ИЗ
	|	ВТДанныеОЗаработкеБезОграничения КАК ВТДанныеОЗаработкеБезОграничения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаБазы КАК ПредельнаяВеличинаБазы
	|		ПО ВТДанныеОЗаработкеБезОграничения.Год = ПредельнаяВеличинаБазы.Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДнейБолезниУходаЗаДетьми.Дни КАК Дни,
	|	ПериодыДнейБолезниУходаЗаДетьми.Начало КАК ПериодС,
	|	ПериодыДнейБолезниУходаЗаДетьми.Окончание КАК ПериодПо,
	|	ПериодыДнейБолезниУходаЗаДетьми.ВидБолезниУходаЗаДетьми КАК НаименованиеПериода
	|ПОМЕСТИТЬ ВТПериодыДнейБолезниУходаЗаДетьми
	|ИЗ
	|	&ПериодыДнейБолезниУходаЗаДетьми КАК ПериодыДнейБолезниУходаЗаДетьми";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеДляРасчетаСреднегоНачисления", ДанныеДляРасчетаСреднего.Начисления);
	Запрос.УстановитьПараметр("ПериодыДнейБолезниУходаЗаДетьми", ПериодыДнейБолезниУходаЗаДетьми);
	Запрос.Выполнить();
	
	Модифицирован = Ложь;
	
	Если ПараметрыЗаполнения.Обновление Тогда
		Если ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, Объект, "ДанныеОЗаработке", "ВТДанныеОЗаработке")
			Или ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, Объект, "ДниБолезниУходаЗаДетьми", "ВТПериодыДнейБолезниУходаЗаДетьми") Тогда
			Модифицирован = Истина;
		КонецЕсли;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТДанныеОЗаработке.РасчетныйГод,
		|	ВТДанныеОЗаработке.Заработок
		|ИЗ
		|	ВТДанныеОЗаработке КАК ВТДанныеОЗаработке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыДнейБолезниУходаЗаДетьми.Дни,
		|	ВТПериодыДнейБолезниУходаЗаДетьми.ПериодС,
		|	ВТПериодыДнейБолезниУходаЗаДетьми.ПериодПо,
		|	ВТПериодыДнейБолезниУходаЗаДетьми.НаименованиеПериода
		|ИЗ
		|	ВТПериодыДнейБолезниУходаЗаДетьми КАК ВТПериодыДнейБолезниУходаЗаДетьми";
		Запрос.Текст = ТекстЗапроса;
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		
		Объект.ДанныеОЗаработке.Загрузить(ПакетРезультатов[0].Выгрузить());
		
		Объект.ДниБолезниУходаЗаДетьми.Загрузить(ПакетРезультатов[1].Выгрузить());
		
		Модифицирован = Истина;
		
	КонецЕсли;
	
	Возврат Модифицирован;
	
КонецФункции

// Дополняет описание параметров фиксации исходящей справки о заработке.
// Дополнительно описывается таблица периодов отсутствия.
//
Процедура ДополнитьПараметрыФиксацииИсходящаяСправкаОЗаработкеДляРасчетаПособий(ПараметрыФиксацииВторичныхДанных) Экспорт
	ДополняемоеСоответствие = Новый Соответствие(ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов);
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ФиксацияРеквизита.Вставить("ИмяРеквизита", "Дни");
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", "ПериодыОтсутствия");
	ФиксацияРеквизита.Вставить("Путь", "ДниБолезниУходаЗаДетьми");
	ФиксацияРеквизита.Вставить("РеквизитСтроки", Истина);
	ДополняемоеСоответствие.Вставить("ДниБолезниУходаЗаДетьмиДни", ФиксацияРеквизита);
	
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ФиксацияРеквизита.Вставить("ИмяРеквизита", "НаименованиеПериода");
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", "ПериодыОтсутствия");
	ФиксацияРеквизита.Вставить("Путь", "ДниБолезниУходаЗаДетьми");
	ФиксацияРеквизита.Вставить("РеквизитСтроки", Истина);
	ДополняемоеСоответствие.Вставить("ДниБолезниУходаЗаДетьмиНаименованиеПериода", ФиксацияРеквизита);
	
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ФиксацияРеквизита.Вставить("ИмяРеквизита", "ПериодПо");
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", "ПериодыОтсутствия");
	ФиксацияРеквизита.Вставить("Путь", "ДниБолезниУходаЗаДетьми");
	ФиксацияРеквизита.Вставить("РеквизитСтроки", Истина);
	ДополняемоеСоответствие.Вставить("ДниБолезниУходаЗаДетьмиПериодПо", ФиксацияРеквизита);

	ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов = ДополняемоеСоответствие;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ПериодС");
	
	ПараметрыФиксацииВторичныхДанных.ОписанияТЧ.Вставить("ДниБолезниУходаЗаДетьми", МассивПолей);
	
КонецПроцедуры

// Возвращает размер государственного пособия на дату
//
// Параметры
//  ВидПособия - строка, соответствующая имени ресурса
//	Дата - Дата на которую получается размер пособия.
//
// Возвращаемое значение:
//   Размер пособия - число.
//
Функция РазмерГосударственногоПособия(ВидПособия, Период) Экспорт
	РазмерПособия = 0;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные";
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПриПостановкеНаУчетВРанниеСрокиБеременности,
	|	РазмерПособия.ПриРожденииРебенка,
	|	РазмерПособия.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет,
	|	РазмерПособия.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет,
	|	РазмерПособия.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет,
	|	РазмерПособия.ПоУходуЗаРебенкомДоТрехЛет,
	|	РазмерПособия.ВСвязиСоСмертью
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РазмерПособия = Выборка[ВидПособия];
	КонецЕсли;
	
	Возврат РазмерПособия
КонецФункции

// Процедура подготавливает таблицы для формирования движений по пособиям
Процедура ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
	|		ИНАЧЕ Начисления.ВидПособияСоциальногоСтрахования
	|	КОНЕЦ КАК ВидПособияСоциальногоСтрахования,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоБольничныйЗаСчетРаботодателя
	|ПОМЕСТИТЬ ВТВидыРасчетаПособийБезРКСН
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПособий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеВидыРасчета.Ссылка КАК Ссылка,
	|	ОсновныеВидыРасчета.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
	|	ОсновныеВидыРасчета.ЭтоБольничныйЗаСчетРаботодателя КАК ЭтоБольничныйЗаСчетРаботодателя
	|ПОМЕСТИТЬ ВТВидыРасчетаПособий
	|ИЗ
	|	ВТВидыРасчетаПособийБезРКСН КАК ОсновныеВидыРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыРасчетаРКСН.Ссылка,
	|	ОсновныеВидыРасчета.ВидПособияСоциальногоСтрахования,
	|	ОсновныеВидыРасчета.ЭтоБольничныйЗаСчетРаботодателя
	|ИЗ
	|	ВТВидыРасчетаПособийБезРКСН КАК ОсновныеВидыРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетаРКСН
	|		ПО ОсновныеВидыРасчета.Ссылка = ВидыРасчетаРКСН.ОсновнойВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пособия.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Ссылка КАК Ссылка,
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ТаблицаНачислений.Сторно КАК Сторно,
	|	СУММА(ВЫБОР
	|			КОГДА Пособия.ЭтоБольничныйЗаСчетРаботодателя
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаНачислений.ОплаченоДней
	|		КОНЕЦ) КАК ОплаченныеДни,
	|	СУММА(ВЫБОР
	|			КОГДА Пособия.ЭтоБольничныйЗаСчетРаботодателя
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаНачислений.Результат
	|		КОНЕЦ) КАК СуммаВсего,
	|	СУММА(ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ) КАК СуммаСверхНорм,
	|	СУММА(ВЫБОР
	|			КОГДА Пособия.ЭтоБольничныйЗаСчетРаботодателя
	|				ТОГДА ТаблицаНачислений.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаФинансируемаяРаботодателем
	|ПОМЕСТИТЬ ВТСвернутыеНачисленияДляУчетаПособий
	|ИЗ
	|	ВТНачисленияДляУчетаПособий КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчетаПособий КАК Пособия
	|		ПО (Пособия.Ссылка = ТаблицаНачислений.Начисление)
	|
	|СГРУППИРОВАТЬ ПО
	|	Пособия.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаСтраховогоСлучая,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаНачислений.ОплаченныеДни = 0
	|				ТОГДА 0
	|			КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание)
	|					И ДОБАВИТЬКДАТЕ(БольничныйЛист.ДатаНачалаСобытия, ДЕНЬ, 3) >= БольничныйЛист.ДатаНачалаОплаты
	|					И ДОБАВИТЬКДАТЕ(БольничныйЛист.ДатаНачалаСобытия, ДЕНЬ, 3) <= БольничныйЛист.ДатаОкончанияОплаты
	|				ТОГДА 1
	|			КОГДА БольничныйЛист.ПричинаНетрудоспособности <> ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание)
	|					И БольничныйЛист.ДатаНачалаСобытия = БольничныйЛист.ДатаНачалаОплаты
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ТаблицаНачислений.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СтраховыеСлучаи,
	|	СУММА(ТаблицаНачислений.ОплаченныеДни) КАК ОплаченныеДни,
	|	СУММА(ТаблицаНачислений.СуммаВсего) КАК СуммаВсего,
	|	СУММА(ТаблицаНачислений.СуммаСверхНорм) КАК СуммаСверхНорм,
	|	СУММА(ТаблицаНачислений.СуммаФинансируемаяРаботодателем) КАК СуммаФинансируемаяРаботодателем
	|ИЗ
	|	ВТСвернутыеНачисленияДляУчетаПособий КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ТаблицаНачислений.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаНачислений.Сотрудник = Сотрудники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия,
	|	Сотрудники.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Сотрудник,
	|	Сотрудники.ФизическоеЛицо,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПустаяСсылка),
	|	ОплатаДнейУходаЗаДетьмиИнвалидами.ДатаНачалаСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаНачислений.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ),
	|	СУММА(ТаблицаНачислений.ОплаченныеДни),
	|	СУММА(ТаблицаНачислений.СуммаВсего),
	|	СУММА(ТаблицаНачислений.СуммаСверхНорм),
	|	СУММА(ТаблицаНачислений.СуммаФинансируемаяРаботодателем)
	|ИЗ
	|	ВТСвернутыеНачисленияДляУчетаПособий КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаДнейУходаЗаДетьмиИнвалидами КАК ОплатаДнейУходаЗаДетьмиИнвалидами
	|		ПО ТаблицаНачислений.Ссылка = ОплатаДнейУходаЗаДетьмиИнвалидами.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаНачислений.Сотрудник = Сотрудники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сотрудник,
	|	ОплатаДнейУходаЗаДетьмиИнвалидами.ДатаНачалаСобытия,
	|	Сотрудники.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Сотрудник,
	|	Сотрудники.ФизическоеЛицо,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПустаяСсылка),
	|	Отпуск.ДатаНачалаСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаНачислений.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ),
	|	СУММА(ТаблицаНачислений.ОплаченныеДни),
	|	СУММА(ТаблицаНачислений.СуммаВсего),
	|	СУММА(ТаблицаНачислений.СуммаСверхНорм),
	|	СУММА(ТаблицаНачислений.СуммаФинансируемаяРаботодателем)
	|ИЗ
	|	ВТСвернутыеНачисленияДляУчетаПособий КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
	|		ПО ТаблицаНачислений.Ссылка = Отпуск.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаНачислений.Сотрудник = Сотрудники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сотрудник,
	|	Отпуск.ДатаНачалаСобытия,
	|	Сотрудники.ФизическоеЛицо";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
			
	КатегорииПособий = Новый Массив;
	
	Если Не ПособиеПлатитУчастникПилотногоПроекта Тогда
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КонецЕсли;
	
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами);
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами);
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение);
	
	Запрос.УстановитьПараметр("КатегорииПособий", КатегорииПособий);

	ДанныеДляПроведения.Вставить("Пособия", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Процедура подготавливает таблицы для формирования движений по пособиям
Процедура ЗаполнитьСведенияОПособияхПоУходуЗаРебенком(Ссылка, ПособиеПлатитУчастникПилотногоПроекта, ДанныеДляПроведения, ИмяТабличнойЧасти = "Пособия", ИмяТабличнойЧастиПерерасчет = Неопределено, СписокФизическихЛиц = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	Если ПособиеПлатитУчастникПилотногоПроекта Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяДокумента = Ссылка.Метаданные().ПолноеИмя();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =  Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаНачала, Месяц) КАК ПериодДействия,
	|	ТаблицаНачислений.ДатаНачала,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.ИдентификаторСтрокиВидаРасчета КАК НомерСтроки,
	|	ТаблицаНачислений.ФинансированиеФедеральнымБюджетом,
	|	ТаблицаНачислений.СтраховойСлучай,
	|	ТаблицаНачислений.КоличествоДетей,
	|	ТаблицаНачислений.КоличествоПервыхДетей,
	|	ТаблицаНачислений.СуммаВсегоПоУходуЗаПервымРебенком,
	|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаПервымРебенком,
	|	ТаблицаНачислений.СуммаВсегоПоУходуЗаВторымРебенком,
	|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаВторымРебенком,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ,
	|	ЛОЖЬ КАК Сторно
	|ПОМЕСТИТЬ ВТТаблицаНачислений
	|ИЗ
	|	ИмяТаблицы КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ТаблицаНачислений.Начисление)
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ПолноеИмяДокумента + "." + ИмяТабличнойЧасти);
	Если СписокФизическихЛиц <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ТаблицаНачислений.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли;
	
	Если Не ИмяТабличнойЧастиПерерасчет = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаНачала, Месяц) КАК ПериодДействия,
		|	ТаблицаНачислений.ДатаНачала,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ВидЗанятости,
		|	ТаблицаНачислений.ИдентификаторСтрокиВидаРасчета КАК НомерСтроки,
		|	ТаблицаНачислений.ФинансированиеФедеральнымБюджетом,
		|	ТаблицаНачислений.СтраховойСлучай,
		|	ТаблицаНачислений.КоличествоДетей,
		|	ТаблицаНачислений.КоличествоПервыхДетей,
		|	ТаблицаНачислений.СуммаВсегоПоУходуЗаПервымРебенком,
		|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаПервымРебенком,
		|	ТаблицаНачислений.СуммаВсегоПоУходуЗаВторымРебенком,
		|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаВторымРебенком,
		|	ТаблицаНачислений.Результат,
		|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ,
		|	ТаблицаНачислений.Сторно
		|ИЗ
		|	ИмяТаблицы КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ТаблицаНачислений.Начисление)
		|ГДЕ
		|	ТаблицаНачислений.Ссылка = &Ссылка
		|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ПолноеИмяДокумента + "." + ИмяТабличнойЧастиПерерасчет);
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ТаблицаНачислений.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.СтраховойСлучай КАК СтраховойСлучай,
	|	МИНИМУМ(ТаблицаНачислений.ДатаНачала) КАК ДатаНачала,
	|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаНачала, МЕСЯЦ) КАК МесяцНачала
	|ПОМЕСТИТЬ ВТПервыеСтраховыеСлучаиВМесяце
	|ИЗ
	|	ВТТаблицаНачислений КАК ТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.СтраховойСлучай,
	|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаНачала, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияОплатыПоСтраховымСлучаям.НомерСтроки КАК НомерСтроки,
	|	УсловияОплатыПоСтраховымСлучаям.ДатаНачала КАК ДатаНачала,
	|	УсловияОплатыПоСтраховымСлучаям.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	ВЫБОР
	|		КОГДА НЕ ПервыеСтраховыеСлучаиВМесяце.СтраховойСлучай ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА УсловияОплатыПоСтраховымСлучаям.Сторно
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтраховыеСлучаи,
	|	ВЫБОР
	|		КОГДА НЕ ПервыеСтраховыеСлучаиВМесяце.СтраховойСлучай ЕСТЬ NULL
	|				И УсловияОплатыПоСтраховымСлучаям.КоличествоПервыхДетей > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА УсловияОплатыПоСтраховымСлучаям.Сторно
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтраховыеСлучаиПоУходуЗаПервымРебенком,
	|	ВЫБОР
	|		КОГДА НЕ ПервыеСтраховыеСлучаиВМесяце.СтраховойСлучай ЕСТЬ NULL
	|				И УсловияОплатыПоСтраховымСлучаям.КоличествоПервыхДетей < УсловияОплатыПоСтраховымСлучаям.КоличествоДетей
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА УсловияОплатыПоСтраховымСлучаям.Сторно
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтраховыеСлучаиПоУходуЗаВторымРебенком
	|ПОМЕСТИТЬ ВТУсловияОплаты
	|ИЗ
	|	ВТТаблицаНачислений КАК УсловияОплатыПоСтраховымСлучаям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервыеСтраховыеСлучаиВМесяце КАК ПервыеСтраховыеСлучаиВМесяце
	|		ПО УсловияОплатыПоСтраховымСлучаям.СтраховойСлучай = ПервыеСтраховыеСлучаиВМесяце.СтраховойСлучай
	|			И УсловияОплатыПоСтраховымСлучаям.ДатаНачала = ПервыеСтраховыеСлучаиВМесяце.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ТаблицаНачислений.ДатаНачала КАК ДатаСтраховогоСлучая,
	|	ТаблицаНачислений.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	СУММА(ЕСТЬNULL(УсловияОплаты.СтраховыеСлучаи, 1)) КАК СтраховыеСлучаи,
	|	СУММА(ЕСТЬNULL(УсловияОплаты.СтраховыеСлучаиПоУходуЗаПервымРебенком, 1)) КАК СтраховыеСлучаиПоУходуЗаПервымРебенком,
	|	СУММА(ЕСТЬNULL(УсловияОплаты.СтраховыеСлучаиПоУходуЗаВторымРебенком, 1)) КАК СтраховыеСлучаиПоУходуЗаВторымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаВсегоПоУходуЗаПервымРебенком) КАК СуммаВсегоПоУходуЗаПервымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаСверхНормПоУходуЗаПервымРебенком) КАК СуммаСверхНормПоУходуЗаПервымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаВсегоПоУходуЗаВторымРебенком) КАК СуммаВсегоПоУходуЗаВторымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаСверхНормПоУходуЗаВторымРебенком) КАК СуммаСверхНормПоУходуЗаВторымРебенком,
	|	СУММА(ТаблицаНачислений.Результат) КАК СуммаВсего
	|ИЗ
	|	ВТТаблицаНачислений КАК ТаблицаНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияОплаты КАК УсловияОплаты
	|		ПО ТаблицаНачислений.НомерСтроки = УсловияОплаты.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.ПериодДействия,
	|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо,
	|	ТаблицаНачислений.ФинансированиеФедеральнымБюджетом,
	|	ТаблицаНачислений.ДатаНачала,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ДанныеДляПроведения.Вставить("ПособияПоУходу", Результат.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиРезультатыРасчетаПособия(СтрокаДанных, ИсходныеДанные) Экспорт
	
	Если Не ИсходныеДанные.Свойство("КатегорияНачисления") Тогда
		Возврат;
	КонецЕсли;
	
	УходЗаРебенком = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	
	Нетрудоспособность = Новый Массив;
	Нетрудоспособность.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Нетрудоспособность.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	
	ИменаПолей = Новый Массив;
	
	Если УходЗаРебенком.Найти(ИсходныеДанные.КатегорияНачисления) <> Неопределено Тогда
		ИменаПолей.Добавить("РезультатВТомЧислеЗаСчетФБ");
		ИменаПолей.Добавить("СуммаВсегоПоУходуЗаПервымРебенком");
		ИменаПолей.Добавить("СуммаСверхНормПоУходуЗаПервымРебенком");
		ИменаПолей.Добавить("СуммаВсегоПоУходуЗаВторымРебенком");
		ИменаПолей.Добавить("СуммаСверхНормПоУходуЗаВторымРебенком");
		ИменаПолей.Добавить("ФинансированиеФедеральнымБюджетом");
		ИменаПолей.Добавить("СтраховойСлучай");
		ИменаПолей.Добавить("КоличествоДетей");
		ИменаПолей.Добавить("КоличествоПервыхДетей");
	КонецЕсли;
	
	Если Нетрудоспособность.Найти(ИсходныеДанные.КатегорияНачисления) <> Неопределено Тогда
		ИменаПолей.Добавить("РезультатВТомЧислеЗаСчетФБ");
	КонецЕсли;
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, ИмяПоля)
			И ИсходныеДанные.Свойство(ИмяПоля) Тогда
			СтрокаДанных[ИмяПоля] = ИсходныеДанные[ИмяПоля];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиРезультатыРасчетаОтпускаНаСанаторноКурортноеЛечение(СтрокаДанных, ИсходныеДанные, ДополнительныеПараметры) Экспорт
	
	Если Не (ИсходныеДанные.Свойство("КатегорияНачисления")
		И ИсходныеДанные.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение) Тогда
		Возврат;
	КонецЕсли;
	
	// для участвующих в пилотном проекте ФСС отпуск не начисляется
	ПособияПоОбязательномуСтрахованиюВыплачиваетФСС = ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ДополнительныеПараметры.МесяцНачисления, ДополнительныеПараметры.Организация);
	
	Если ПособияПоОбязательномуСтрахованиюВыплачиваетФСС Тогда
		
		ИменаПолей = Новый Массив;
		
		ИменаПолей.Добавить("Результат");
		ИменаПолей.Добавить("РезультатВТомЧислеЗаСчетФБ");
		
		Для Каждого ИмяПоля Из ИменаПолей Цикл
			Если РасчетЗарплатыРасширенный.ЕстьПолеВСтрокеКоллекции(СтрокаДанных, ИмяПоля)
				И ИсходныеДанные.Свойство(ИмяПоля) Тогда
				СтрокаДанных[ИмяПоля] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком() Экспорт
	
	Возврат ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	
КонецФункции

Функция НеобходимоОтбиратьУчастниковПилотногоПроекта(Параметры) Экспорт
	
	Возврат ЕстьСвойствоЭтоУчастникПилотногоПроекта(Параметры);
	
КонецФункции

Процедура ПолучитьДанныеВыбораСправочникаОрганизации(Источник, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Не ЕстьСвойствоЭтоУчастникПилотногоПроекта(Параметры) Тогда
	    Возврат;
	КонецЕсли;
	
	ЭтоУчастникПилотногоПроекта = Параметры.ЭтоУчастникПилотногоПроекта;
	
	Если ТипЗнч(ЭтоУчастникПилотногоПроекта) = Тип("Булево") Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО Организации.Ссылка = НастройкиУчетаПособийСоциальногоСтрахования.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ЭтоУчастникПилотногоПроекта
		|				ТОГДА ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|			ИНАЧЕ ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ
		|	И &ДополнительноеУсловие";
		
		Запрос.УстановитьПараметр("ЭтоУчастникПилотногоПроекта", ЭтоУчастникПилотногоПроекта);
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Организации, Параметры, Запрос, "Организации");
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команду печати "Расчет среднего заработка", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, МенеджерПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		И Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
				
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = "РасчетСреднегоЗаработка";
		КомандаПечати.Представление = НСтр("ru = 'Расчет среднего заработка';
											|en = 'Average earning calculation'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
				
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив ссылок из ПВР Начисления, соответствующих облагаемым взносами компенсациям, возмещаемым из бюджета ФСС
// (в частности, оплата 4-х дополнительных выходных дней для ухода за детьми инвалидами).
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	Массив
//
Функция НачисленияОблагаемыхВзносамиПособий() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция НачислениеЯвляетсяПособиемЗаСчетФСС(Начисление) Экспорт
	Возврат Не Начисление.ВидПособияСоциальногоСтрахования.Пустая();
КонецФункции

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	СЭДОФССРасширенный.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	РегистрыСведений.РазмерыГосударственныхПособий.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.34";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("327a7f21-00c0-11ec-835d-fac064b6cc1f");
	Обработчик.Процедура       = "РегистрыНакопления.ПериодыУходаЗаБольнымиРодственниками.ЗаполнитьДатуНачалаСобытия";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение даты начала события в регистре периодов ухода за больными родственниками.';
										|en = 'Fill in the event start date in the register of sick relative care periods.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.35";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("155baaa1-3b07-11ec-80ff-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.БольничныйЛист.ЗаполнитьКоличествоДнейОплаты";
	Обработчик.Комментарий     = НСтр("ru = 'Определение количества оплачиваемых дней в больничных для печатной формы ""Расчет пособия"".';
										|en = 'Define the number of paid days in sick leave records for the ""Allowance calculation"" print form.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.29.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5d46d663-7d82-11ee-8118-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.БольничныйЛист.ЗаполнитьСотрудникСлужащий";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение флажка ""Сотрудник служащий"" в больничных.';
										|en = 'Select the ""Service employee"" checkbox in sick leaves.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.113";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("dade2c34-0247-4dcb-91e8-26668e751177");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахованияРасширенный.ДобавитьСторноДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение регистра ""Данные для расчета среднего заработка по начислениям (ФСС)"".';
										|en = 'Заполнение регистра ""Данные для расчета среднего заработка по начислениям (ФСС)"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.114";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("6d94f0c5-8c11-43a4-bd6c-d1130d09499e");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение регистра ""Данные для расчета среднего заработка по начислениям (ФСС)"".';
										|en = 'Заполнение регистра ""Данные для расчета среднего заработка по начислениям (ФСС)"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.115";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("de76b1ab-4392-4cd9-8775-a81d4807921f");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахованияРасширенный.УдалитьТехноЗаписиДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям";
	Обработчик.Комментарий     = НСтр("ru = 'Удаление записей регистра ""Данные для расчета среднего заработка по начислениям (ФСС)"".';
										|en = 'Удаление записей регистра ""Данные для расчета среднего заработка по начислениям (ФСС)"".'");
	
КонецПроцедуры

Процедура ДобавитьСторноДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоНачислениям.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТДанныеПоНачислениямРегистраторы
		|ИЗ
		|	РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям КАК ДанныеПоНачислениям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСреднегоЗаработка.Регистратор КАК Регистратор,
		|	МАКСИМУМ(ЕСТЬNULL(ДанныеСреднегоЗаработка.Регистратор.Дата, ДанныеСреднегоЗаработка.Период)) КАК Дата
		|ПОМЕСТИТЬ ВТДанныеСторно
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеСреднегоЗаработка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПоНачислениямРегистраторы КАК ДанныеПоНачислениямРегистраторы
		|		ПО ДанныеСреднегоЗаработка.Регистратор = ДанныеПоНачислениямРегистраторы.Регистратор
		|			И (ДанныеСреднегоЗаработка.Сторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеСреднегоЗаработка.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСторно.Регистратор КАК Регистратор
		|ИЗ
		|	ВТДанныеСторно КАК ДанныеСторно
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям КАК ДанныеПоНачислениям
		|		ПО ДанныеСторно.Регистратор = ДанныеПоНачислениям.Регистратор
		|			И (ДанныеПоНачислениям.Сторно)
		|ГДЕ
		|	ДанныеПоНачислениям.Регистратор ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеСторно.Дата";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ВидыУчета = "ДанныеДляРасчетаСреднего";
	РегистрыСреднегоЗаработка = УчетСреднегоЗаработка.РегистрыСреднегоЗаработка();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Движения = Новый Структура;
			ДвиженияМетаданные = Выборка.Регистратор.Метаданные().Движения;
			Для Каждого Движение Из ДвиженияМетаданные Цикл
				Если РегистрыСреднегоЗаработка.Найти(Движение) <> Неопределено Тогда 
					МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Движение.ПолноеИмя());
					РегистрНаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
					РегистрНаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					Движения.Вставить(Движение.Имя, РегистрНаборЗаписей);
				КонецЕсли;
			КонецЦикла;
			Отказ = Ложь;
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Регистратор); 
			МенеджерДокумента.ПровестиПоУчетам(Выборка.Регистратор, РежимПроведенияДокумента.Неоперативный, Отказ, ВидыУчета, Движения);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Движения.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1';
					|en = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям, ,
				ТекстСообщения);
		КонецПопытки;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоНачислениям.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТДанныеПоНачислениямРегистраторы
		|ИЗ
		|	РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям КАК ДанныеПоНачислениям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСреднегоЗаработка.Регистратор КАК Регистратор,
		|	МАКСИМУМ(ЕСТЬNULL(ДанныеСреднегоЗаработка.Регистратор.Дата, ДанныеСреднегоЗаработка.Период)) КАК Дата
		|ПОМЕСТИТЬ ВТДатыРегистраторов
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеСреднегоЗаработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоНачислениямРегистраторы КАК ДанныеПоНачислениям
		|		ПО ДанныеСреднегоЗаработка.Регистратор = ДанныеПоНачислениям.Регистратор
		|ГДЕ
		|	ДанныеПоНачислениям.Регистратор ЕСТЬ NULL
		|	И НЕ ДанныеСреднегоЗаработка.Регистратор ССЫЛКА Документ.ПереносДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеСреднегоЗаработка.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДатыРегистраторов.Регистратор КАК Регистратор,
		|	ДатыРегистраторов.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДанныеСреднегоЗаработкаФССРегистраторы
		|ИЗ
		|	ВТДатыРегистраторов КАК ДатыРегистраторов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСреднегоЗаработкаФСС.Регистратор КАК Регистратор
		|ИЗ
		|	ВТДанныеСреднегоЗаработкаФССРегистраторы КАК ДанныеСреднегоЗаработкаФСС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеСреднегоЗаработкаФСС.Дата";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ЗавершитьОбработку = Ложь;
	Если Выборка.Количество() < 1000 Тогда
		ЗавершитьОбработку = Истина;
	КонецЕсли;
	
	ВидыУчета = "ДанныеДляРасчетаСреднего";
	РегистрыСреднегоЗаработка = УчетСреднегоЗаработка.РегистрыСреднегоЗаработка();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Движения = Новый Структура;
			ДвиженияМетаданные = Выборка.Регистратор.Метаданные().Движения;
			Для Каждого Движение Из ДвиженияМетаданные Цикл
				Если РегистрыСреднегоЗаработка.Найти(Движение) <> Неопределено Тогда 
					МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Движение.ПолноеИмя());
					РегистрНаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
					РегистрНаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					Движения.Вставить(Движение.Имя, РегистрНаборЗаписей);
				КонецЕсли;
			КонецЦикла;
			Отказ = Ложь;
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Регистратор); 
			МенеджерДокумента.ПровестиПоУчетам(Выборка.Регистратор, РежимПроведенияДокумента.Неоперативный, Отказ, ВидыУчета, Движения);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Движения.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1';
					|en = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям, ,
				ТекстСообщения);
		КонецПопытки;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоНачислениям.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТТекущиеРегистраторы
		|ИЗ
		|	РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям КАК ДанныеПоНачислениям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСреднегоЗаработкаФССРегистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТДанныеСреднегоЗаработкаФССРегистраторы КАК ДанныеСреднегоЗаработкаФССРегистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРегистраторы КАК ТекущиеРегистраторы
		|		ПО ДанныеСреднегоЗаработкаФССРегистраторы.Регистратор = ТекущиеРегистраторы.Регистратор
		|ГДЕ
		|	ТекущиеРегистраторы.Регистратор ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор("61ce47c5-9840-4c77-93d0-4a323afbbd67"));
	Организация = Справочники.Организации.ПолучитьСсылку();
	
	Пока Выборка.Следующий() Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			НаборЗаписей = РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ДатаСеанса;
			НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
			НоваяЗапись.ГоловнаяОрганизация = Организация;
			НоваяЗапись.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1';
					|en = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям, ,
				ТекстСообщения);
		КонецПопытки;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	Если ЗавершитьОбработку Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьТехноЗаписиДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор("61ce47c5-9840-4c77-93d0-4a323afbbd67"));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ДанныеПоНачислениям.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям КАК ДанныеПоНачислениям
		|ГДЕ
		|	ДанныеПоНачислениям.ФизическоеЛицо = &ФизическоеЛицо";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			НаборЗаписей = РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1';
					|en = 'Ошибка при формировании движений документа по регистру Данные для расчета среднего заработка по начислениям (ФСС): %1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям, ,
				ТекстСообщения);
		КонецПопытки;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	Если Выборка.Количество() < 1000 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПериодыУходаЗаБольнымиРодственниками

// Формирует движения по регистру ПериодыУходаЗаБольнымиРодственниками
// Параметры:
//		Движения - коллекция движений регистратора
//		ПериодыУходаЗаДетьми - таблица значений с колонками
//			ФизическоеЛицо
//			Родственник - справочник "Родственники сотрудников"
//			КоличествоДней
//			ОплаченоДней
//			НачалоПериода
//			ОкончаниеПериода
//			НачалоПериодаОплаты
//			ОкончаниеПериодаОплаты
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияПериодовУходаЗаБольнымиРодственниками(Движения, ПериодыУходаЗаРодственниками) Экспорт
	Для Каждого Запись Из ПериодыУходаЗаРодственниками Цикл
		Движения.ПериодыУходаЗаБольнымиРодственниками.Записывать = Истина;
		Движение = Движения.ПериодыУходаЗаБольнымиРодственниками.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
	КонецЦикла;
	
	Если Движения.ПериодыУходаЗаБольнымиРодственниками.Записывать Тогда
		Движения.ПериодыУходаЗаБольнымиРодственниками.Записать();
		Движения.ПериодыУходаЗаБольнымиРодственниками.Записывать = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками() Экспорт
	
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками = Новый ТаблицаЗначений;
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("Родственник", Новый ОписаниеТипов("СправочникСсылка.РодственникиФизическихЛиц"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("СлучайУходаЗаБольнымРебенком", Новый ОписаниеТипов("ПеречислениеСсылка.СлучаиУходаЗаБольнымиДетьми"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("ОплаченоДней", Новый ОписаниеТипов("Число"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("НачалоПериодаОплаты", Новый ОписаниеТипов("Дата"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("ОкончаниеПериодаОплаты", Новый ОписаниеТипов("Дата"));
	ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками.Колонки.Добавить("ДатаНачалаСобытия", Новый ОписаниеТипов("Дата"));
	
	Возврат ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками;
	
КонецФункции

Функция ОстатокОплачиваемыхДнейУходаЗаБольнымРодственником(Родственник, НачалоПериодаОплаты, СлучайУходаЗаБольнымРебенком, Ссылка) Экспорт
	Если Не ЗначениеЗаполнено(Родственник)
		Или Не ЗначениеЗаполнено(НачалоПериодаОплаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДоступноДней = УчетПособийСоциальногоСтрахования.ДнейУходаЗаРодственникомВГод(СлучайУходаЗаБольнымРебенком);
	Если ДоступноДней = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИспользованоДней = ОплаченоДнейУходаЗаБольнымРодственником(Родственник, НачалоПериодаОплаты, СлучайУходаЗаБольнымРебенком, Ссылка);
	Возврат ДоступноДней - ИспользованоДней;
КонецФункции

Функция ОплаченоДнейУходаЗаБольнымРодственником(Родственник, ДатаПроверки, СлучайУходаЗаБольнымРебенком, ИсключаемыйРегистратор)
	НачалоПериода = НачалоГода(ДатаПроверки);
	Если НачалоПериода = ДатаПроверки Тогда
		Возврат 0;
	КонецЕсли;
	ОкончаниеПериода = НачалоДня(ДатаПроверки) - 1; // Остаток получаем на конец предыдущего дня.
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТПериоды(НачалоПериода, ОкончаниеПериода, "ДЕНЬ", "Дата", "ВТДаты", Ложь);
	
	Запрос.Текст = Запрос.Текст + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ПериодыУходаЗаБольнымиРодственниками.ОплаченоДней КАК ОплаченоДней,
	|	ПериодыУходаЗаБольнымиРодственниками.Период КАК НачалоПериодаОплаты,
	|	ДОБАВИТЬКДАТЕ(ПериодыУходаЗаБольнымиРодственниками.Период, ДЕНЬ, ВЫБОР
	|			КОГДА ПериодыУходаЗаБольнымиРодственниками.ОплаченоДней < 0
	|				ТОГДА -ПериодыУходаЗаБольнымиРодственниками.ОплаченоДней - 1
	|			ИНАЧЕ ПериодыУходаЗаБольнымиРодственниками.ОплаченоДней - 1
	|		КОНЕЦ) КАК ОкончаниеПериодаОплаты
	|ПОМЕСТИТЬ ВТПериодыУхода
	|ИЗ
	|	РегистрНакопления.ПериодыУходаЗаБольнымиРодственниками КАК ПериодыУходаЗаБольнымиРодственниками
	|ГДЕ
	|	ПериодыУходаЗаБольнымиРодственниками.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ПериодыУходаЗаБольнымиРодственниками.Родственник = &Родственник
	|	И ПериодыУходаЗаБольнымиРодственниками.СлучайУходаЗаБольнымРебенком В(&СлучаиУходаЗаБольнымРебенком)
	|	И ПериодыУходаЗаБольнымиРодственниками.Регистратор <> &ИсключаемыйРегистратор
	|	И ПериодыУходаЗаБольнымиРодственниками.ОплаченоДней <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДаты.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА ВТПериодыУхода.ОплаченоДней > 0
	|						ТОГДА 1
	|					КОГДА ВТПериодыУхода.ОплаченоДней < 0
	|						ТОГДА -1
	|					ИНАЧЕ 0
	|				КОНЕЦ) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеньОплачен
	|ПОМЕСТИТЬ ВТУходПоДням
	|ИЗ
	|	ВТДаты КАК ВТДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыУхода КАК ВТПериодыУхода
	|		ПО (ВТДаты.Дата МЕЖДУ ВТПериодыУхода.НачалоПериодаОплаты И ВТПериодыУхода.ОкончаниеПериодаОплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДаты.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТУходПоДням.Дата) КАК ОплаченоДней
	|ИЗ
	|	ВТУходПоДням КАК ВТУходПоДням
	|ГДЕ
	|	ВТУходПоДням.ДеньОплачен = ИСТИНА";
	
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Родственник",      Родственник);
	
	Если ЗначениеЗаполнено(ИсключаемыйРегистратор) Тогда
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПериодыУходаЗаБольнымиРодственниками.Регистратор <> &ИсключаемыйРегистратор", "");
	КонецЕсли;
	
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре Тогда
		СлучаиУходаЗаБольнымРебенком = Новый Массив;
		СлучаиУходаЗаБольнымРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно);
		СлучаиУходаЗаБольнымРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре);
		Запрос.УстановитьПараметр("СлучаиУходаЗаБольнымРебенком", СлучаиУходаЗаБольнымРебенком);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПериодыУходаЗаБольнымиРодственниками.СлучайУходаЗаБольнымРебенком В(&СлучаиУходаЗаБольнымРебенком)", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ОплаченоДней) Тогда
		Возврат Выборка.ОплаченоДней;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

#КонецОбласти

#Область СреднийЗаработокФСС

// Процедура выполняет заполнение значений специализированных показателей
//  учета среднего заработка.
//
Процедура ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(МенеджерВременныхТаблиц, ТаблицаПоказателей) Экспорт
	
	СреднийЗаработокФССПоказатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СреднийЗаработокФССПоказатель", СреднийЗаработокФССПоказатель);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.ДатаНачала,
		|	ДополнительныеПоказатели.ВремяВЧасах
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &СреднийЗаработокФССПоказатель";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПериодРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Выборка.ДатаНачала);
		ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(Выборка.ДатаНачала);
		
		ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
		ДополнительныеПараметры.НачалоПериода = ПериодРасчета.ДатаНачала;
		ДополнительныеПараметры.ОкончаниеПериода = ПериодРасчета.ДатаОкончания;
		ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
		ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(Выборка.Сотрудник, ДополнительныеПараметры);
		
		ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
		ПараметрыРасчета.ДатаНачалаСобытия = Выборка.ДатаНачала;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчета.ДатаНачала;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчета.ДатаОкончания;
		РасчетныеГоды = Новый Массив;
		РасчетныеГоды.Добавить(Год(ПериодРасчета.ДатаНачала));
		РасчетныеГоды.Добавить(Год(ПериодРасчета.ДатаОкончания));
		ПараметрыРасчета.РасчетныеГоды = РасчетныеГоды;
		ПараметрыРасчета.ПрименяетсяФЗ_421_2014 = УчетПособийСоциальногоСтрахования.ПрименяетсяФЗ_421_2014(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ФизическоеЛицо"), Выборка.ДатаНачала);
		ПараметрыРасчета.ПрименяетсяФЗ_20_2023 = УчетПособийСоциальногоСтрахования.ПрименяетсяФЗ_20_2023(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ФизическоеЛицо"), Выборка.ДатаНачала);
		ПараметрыРасчета.ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(ПараметрыРасчета.ДатаНачалаСобытия);
		ПараметрыРасчета.ДанныеНачислений = ДанныеДляРасчета.ДанныеОНачислениях;
		ПараметрыРасчета.ДанныеВремени = ДанныеДляРасчета.ДанныеОВремени;
		ПараметрыРасчета.ДанныеСтрахователей = ДанныеДляРасчета.ДанныеСтрахователей;
		
		СреднийЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		НоваяСтрока.Показатель = Выборка.Показатель;
		НоваяСтрока.Значение = СреднийЗаработок;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение значений специализированных показателей
//  учета среднего заработка.
//
Процедура ЗаполнитьЗначенияПоказателейРасчетаЗарплатыПоТаблицеЗначений(ДополнительныеПоказатели, ТаблицаПоказателей) Экспорт
	
	СреднийЗаработокФССПоказатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	
	Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателя.Показатель <> СреднийЗаработокФССПоказатель Тогда
			Продолжить;
		КонецЕсли;
		
		ПериодРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(СтрокаПоказателя.ДатаНачала);
		ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(СтрокаПоказателя.ДатаНачала);
		
		ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
		ДополнительныеПараметры.НачалоПериода = ПериодРасчета.ДатаНачала;
		ДополнительныеПараметры.ОкончаниеПериода = ПериодРасчета.ДатаОкончания;
		ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
		ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(СтрокаПоказателя.Сотрудник, ДополнительныеПараметры);
		
		ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
		ПараметрыРасчета.ДатаНачалаСобытия = СтрокаПоказателя.ДатаНачала;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчета.ДатаНачала;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчета.ДатаОкончания;
		РасчетныеГоды = Новый Массив;
		РасчетныеГоды.Добавить(Год(ПериодРасчета.ДатаНачала));
		РасчетныеГоды.Добавить(Год(ПериодРасчета.ДатаОкончания));
		ПараметрыРасчета.РасчетныеГоды = РасчетныеГоды;
		ПараметрыРасчета.ПрименяетсяФЗ_421_2014 = УчетПособийСоциальногоСтрахования.ПрименяетсяФЗ_421_2014(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоказателя.Сотрудник, "ФизическоеЛицо"), СтрокаПоказателя.ДатаНачала);
		ПараметрыРасчета.ПрименяетсяФЗ_20_2023 = УчетПособийСоциальногоСтрахования.ПрименяетсяФЗ_20_2023(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоказателя.Сотрудник, "ФизическоеЛицо"), СтрокаПоказателя.ДатаНачала);
		ПараметрыРасчета.ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(ПараметрыРасчета.ДатаНачалаСобытия);
		ПараметрыРасчета.ДанныеНачислений = ДанныеДляРасчета.ДанныеОНачислениях;
		ПараметрыРасчета.ДанныеВремени = ДанныеДляРасчета.ДанныеОВремени;
		ПараметрыРасчета.ДанныеСтрахователей = ДанныеДляРасчета.ДанныеСтрахователей;
		
		СреднийЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.ИдентификаторСтроки = СтрокаПоказателя.ИдентификаторСтроки;
		НоваяСтрока.Показатель = СтрокаПоказателя.Показатель;                                      
		НоваяСтрока.Значение = СреднийЗаработок;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели) Экспорт
	СреднийЗаработокФССПоказатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");

	Если СреднийЗаработокФССПоказатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоказатели.Добавить(СреднийЗаработокФССПоказатель);	
КонецПроцедуры

// Возвращает структуру содержащую таблицы значений с данными о начислениях для расчета среднего заработка ФСС.
//
// Параметры:
//      Сотрудник
//		НачалоПериода - начало периода расчета среднего заработка.
//		ОкончаниеПериода - окончание периода расчета среднего заработка.
//		ПорядокРасчета - правила расчета общего среднего заработка.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		ДанныеОНачислениях - таблица значений с колонками
//			ФизическоеЛицо
//			ГоловнаяОрганизация.
//			Период
//			ПорядокРасчета
//			Сумма
//		ДанныеОВремени - таблица значений с колонками
//			ФизическоеЛицо
//			ГоловнаяОрганизация.
//			Период
//			ОтработаноДнейКалендарных
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(Сотрудник, ДополнительныеПараметры) Экспорт
	
	// Извлекаем дополнительные параметры.
	НачалоПериода = ДополнительныеПараметры.НачалоПериода;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	ПорядокРасчета = ДополнительныеПараметры.ПорядокРасчета;
	
	ИсходныеДанные = ТаблицаРасчетаСреднегоФСС(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета);
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудниковСлужебный(ИсходныеДанные, ДополнительныеПараметры);
	
	// Получаем данные периодов отсутствия.
	РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сотрудник, "ФизическоеЛицо, ГоловнаяОрганизация");
	ДанныеДляРасчета.ПериодыОтсутствий = ПериодыДнейБолезниУходаЗаДетьми(РеквизитыСотрудника.ФизическоеЛицо, РеквизитыСотрудника.ГоловнаяОрганизация, НачалоПериода, ОкончаниеПериода, Истина);
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"НачалоПериода,
		|ОкончаниеПериода,
		|ПорядокРасчета,
		|ДокументСсылка,
		|ОтборМесяцев,
		|УчитыватьКорректировки");
	
	ДополнительныеПараметры.УчитыватьКорректировки = Истина;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Регистрирует данные о доходах в учете среднего заработка ФСС для документов
// разовых выплат, не участвующих в расчете общего среднего заработка. Перед вызовом
// метода нужно сформировать и записать движения доходов страховых взносов.
//
// Параметры:
//  Движения - КоллекцияДвижений - коллекция движений регистратора
//  Отказ - Булево - признак отказа выполнения операции
//  ИсточникДанных - ТаблицаЗначений, МенеджерВременныхТаблиц - таблица с колонками
//     * Организация
//     * Сотрудник
//     * ФизическоеЛицо
//     * ДатаДохода - Дата - дата отражения дохода в учете страховых взносов
//     * Начисление - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний
//     * СтатьяФинансирования 
//     * СтатьяРасходов 
//     * СпособОтраженияЗарплатыВБухучете 
//     * ОблагаетсяЕНВД - Булево 
//     * Сумма - Число
//  ИмяВТ - Строка - имя таблицы, если передается менеджер временных таблиц
//  ЗаписыватьДвижения - Булево - если Истина, движения будут записаны
//
Процедура ЗарегистрироватьДанныеСреднегоЗаработкаФССРазовыхВыплат(Движения, Отказ, ИсточникДанных, ИмяВТ = "ВТНачисления", ЗаписыватьДвижения = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Отбор.Регистратор.Значение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.ДатаДохода КАК ДатаДействия,
	               |	НАЧАЛОПЕРИОДА(Начисления.ДатаДохода, МЕСЯЦ) КАК МесяцНачисления,
	               |	НАЧАЛОПЕРИОДА(Начисления.ДатаДохода, МЕСЯЦ) КАК ПериодДействия,
				   |	НАЧАЛОПЕРИОДА(Начисления.ДатаДохода, МЕСЯЦ) КАК ДатаНачала,
	               |	КОНЕЦПЕРИОДА(Начисления.ДатаДохода, МЕСЯЦ) КАК ДатаОкончания,
	               |	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	Начисления.Организация КАК Организация,
	               |	Начисления.Сотрудник КАК Сотрудник,
	               |	Начисления.Начисление КАК Начисление,
	               |	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	               |	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	               |	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	               |	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	               |	Начисления.Сумма КАК Сумма,
	               |	&Регистратор КАК ДокументСсылка
	               |ПОМЕСТИТЬ ВТНачисленияРазовыхВыплат
	               |ИЗ
	               |	&Начисления КАК Начисления";
	
	Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Начисления", ИмяВТ);
		Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
	Иначе 
		Запрос.УстановитьПараметр("Начисления", ИсточникДанных);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ЗарегистрироватьДанныеСреднегоЗаработкаФСС(Движения, Отказ, Запрос.МенеджерВременныхТаблиц, ЗаписыватьДвижения, "ВТНачисленияРазовыхВыплат");
	
КонецПроцедуры

// Регистрирует данные о доходах и времени в учете среднего заработка ФСС.
//
Процедура ЗарегистрироватьДанныеСреднегоЗаработкаФСС(Движения, Отказ, МенеджерВременныхТаблиц, ЗаписыватьДвижения = Ложь, ИмяВТНачисления = "ВТНачисления") Экспорт
	
	// Регистрация сумм начислений для среднего заработка ФСС.
	
	// Суммы начислений для расчета среднего заработка ФСС по правилам с 1 января 2011 года заполняем по данным учета
	// доходов страховых взносов.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Отбор.Регистратор.Значение);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.МесяцНачисления КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010) КАК ПорядокРасчета,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ
		|	Начисления.ДатаДействия < ДАТАВРЕМЯ(2013, 1, 1)
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК НастройкиНачислений
		|			ГДЕ
		|				НастройкиНачислений.Ссылка = Начисления.Начисление
		|				И НастройкиНачислений.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеФСС.НеВключать))
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.МесяцНачисления,
		|	Начисления.Сотрудник,
		|	Начисления.Организация.ГоловнаяОрганизация,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД,
		|	Начисления.ФизическоеЛицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(Начисления.Сумма) <> 0";
	
	// Для порядка расчета Постановление2010 не имеет смысла регистрация данных с начала января 2013 года.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления КАК Начисления", ИмяВТНачисления + " КАК Начисления");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Добавить(), Выборка);
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записывать = Истина;
	КонецЦикла;
	
	// Выберем доходы по страховым взносам и распределим их пропорционально начислениям.
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	Запрос.УстановитьПараметр("ДатаОбъединенияВзносов", УчетСтраховыхВзносов.ДатаОбъединенияВзносов());
	Если ИспользоватьСтатьиФинансирования Тогда 
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
			|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
			|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|	Начисления.ДатаНачала КАК ДатаДействия,
			|	СУММА(Начисления.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ВТНачисленияПоСтатьямФинансирования
			|ИЗ
			|	ВТНачисления КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НастройкиНачисления
			|		ПО (НастройкиНачисления.Ссылка = Начисления.Начисление)
			|
			|СГРУППИРОВАТЬ ПО
			|	Начисления.Сотрудник,
			|	Начисления.Начисление,
			|	Начисления.СтатьяФинансирования,
			|	Начисления.СпособОтраженияЗарплатыВБухучете,
			|	Начисления.СтатьяРасходов,
			|	Начисления.ОблагаетсяЕНВД,
			|	Начисления.ДатаНачала
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ДатаДействия КАК ДатаДействия,
			|	СУММА(1) КАК КоличествоСтрок
			|ПОМЕСТИТЬ ВТКоличествоСтрокПоСтатьямФинансирования
			|ИЗ
			|	ВТНачисленияПоСтатьямФинансирования КАК Начисления
			|
			|СГРУППИРОВАТЬ ПО
			|	Начисления.Сотрудник,
			|	Начисления.Начисление,
			|	Начисления.ДатаДействия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ДокументСсылка КАК ДокументСсылка
			|ПОМЕСТИТЬ ВТДокументыНачислений
			|ИЗ
			|	ВТНачисления КАК Начисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ДоходыСтраховыхВзносов.ДатаПолученияДохода, МЕСЯЦ) КАК Период,
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011) КАК ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление КАК Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала КАК ДатаДействия,
			|	СУММА(ДоходыСтраховыхВзносов.Сумма - ДоходыСтраховыхВзносов.Скидка) КАК Сумма
			|ПОМЕСТИТЬ ВТДоходыСтраховыхВзносов
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК ДоходыСтраховыхВзносов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовПоСтраховымВзносам КАК ВидыДоходов
			|		ПО ДоходыСтраховыхВзносов.ВидДохода = ВидыДоходов.Ссылка
			|ГДЕ
			|	ДоходыСтраховыхВзносов.Регистратор = &Регистратор
			|	И НЕ ДоходыСтраховыхВзносов.Сторно
			|	И ВЫБОР
			|			КОГДА ДоходыСтраховыхВзносов.ДатаПолученияДохода < &ДатаОбъединенияВзносов
			|				ТОГДА ВидыДоходов.ВходитВБазуФСС
			|			ИНАЧЕ ВидыДоходов.ВходитВБазу2023
			|		КОНЕЦ
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоходыСтраховыхВзносов.ДатаПолученияДохода,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала
			|
			|ИМЕЮЩИЕ
			|	СУММА(ДоходыСтраховыхВзносов.Сумма - ДоходыСтраховыхВзносов.Скидка) <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоходыСтраховыхВзносов.Период КАК Период,
			|	ДоходыСтраховыхВзносов.ПорядокРасчета КАК ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление КАК Начисление,
			|	ДоходыСтраховыхВзносов.ДатаДействия КАК ДатаДействия,
			|	ВЫБОР
			|		КОГДА ДоходыСтраховыхВзносов.Начисление В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа))
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеФСС.Включать)
			|		ИНАЧЕ НастройкиНачисления.Значение
			|	КОНЕЦ КАК СпособУчета,
			|	ДоходыСтраховыхВзносов.Сумма КАК Сумма,
			|	ЕСТЬNULL(КоличествоСтрокПоСтатьямФинансирования.КоличествоСтрок, 0) КАК КоличествоСтрок
			|ИЗ
			|	ВТДоходыСтраховыхВзносов КАК ДоходыСтраховыхВзносов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтрокПоСтатьямФинансирования КАК КоличествоСтрокПоСтатьямФинансирования
			|		ПО ДоходыСтраховыхВзносов.Сотрудник = КоличествоСтрокПоСтатьямФинансирования.Сотрудник
			|			И ДоходыСтраховыхВзносов.Начисление = КоличествоСтрокПоСтатьямФинансирования.Начисление
			|			И ДоходыСтраховыхВзносов.ДатаДействия = КоличествоСтрокПоСтатьямФинансирования.ДатаДействия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК НастройкиНачисления
			|		ПО ДоходыСтраховыхВзносов.Начисление = НастройкиНачисления.Ссылка
			|			И ДоходыСтраховыхВзносов.ПорядокРасчета = НастройкиНачисления.ПорядокРасчета
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Начисление,
			|	ДатаДействия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
			|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
			|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|	Начисления.ДатаДействия КАК ДатаДействия,
			|	Начисления.Сумма КАК Сумма
			|ИЗ
			|	ВТНачисленияПоСтатьямФинансирования КАК Начисления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Начисление,
			|	Начисления.ДатаДействия";
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Начисление КАК Начисление,
			|	ВЫБОР
			|		КОГДА НастройкиНачисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|			ТОГДА Начисления.ДатаНачала
			|		ИНАЧЕ Начисления.ПериодДействия
			|	КОНЕЦ КАК ДатаДействия,
			|	МАКСИМУМ(Начисления.СпособОтраженияЗарплатыВБухучете) КАК СпособОтраженияЗарплатыВБухучете
			|ПОМЕСТИТЬ ВТНачисленияПоСпособамОтражения
			|ИЗ
			|	ВТНачисления КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НастройкиНачисления
			|		ПО (НастройкиНачисления.Ссылка = Начисления.Начисление)
			|
			|СГРУППИРОВАТЬ ПО
			|	Начисления.Сотрудник,
			|	Начисления.Начисление,
			|	ВЫБОР
			|		КОГДА НастройкиНачисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|			ТОГДА Начисления.ДатаНачала
			|		ИНАЧЕ Начисления.ПериодДействия
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ДоходыСтраховыхВзносов.ДатаПолученияДохода, МЕСЯЦ) КАК Период,
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011) КАК ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление КАК Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала КАК ДатаДействия,
			|	СУММА(ДоходыСтраховыхВзносов.Сумма - ДоходыСтраховыхВзносов.Скидка) КАК Сумма,
			|	0 КАК КоличествоСтрок
			|ПОМЕСТИТЬ ВТДоходыСтраховыхВзносов
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК ДоходыСтраховыхВзносов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовПоСтраховымВзносам КАК ВидыДоходов
			|		ПО ДоходыСтраховыхВзносов.ВидДохода = ВидыДоходов.Ссылка
			|ГДЕ
			|	ДоходыСтраховыхВзносов.Регистратор = &Регистратор
			|	И НЕ ДоходыСтраховыхВзносов.Сторно
			|	И ВЫБОР
			|			КОГДА ДоходыСтраховыхВзносов.ДатаПолученияДохода < &ДатаОбъединенияВзносов
			|				ТОГДА ВидыДоходов.ВходитВБазуФСС
			|			ИНАЧЕ ВидыДоходов.ВходитВБазу2023
			|		КОНЕЦ
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоходыСтраховыхВзносов.ДатаПолученияДохода,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала
			|
			|ИМЕЮЩИЕ
			|	СУММА(ДоходыСтраховыхВзносов.Сумма - ДоходыСтраховыхВзносов.Скидка) <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоходыСтраховыхВзносов.Период КАК Период,
			|	ДоходыСтраховыхВзносов.ПорядокРасчета КАК ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление КАК Начисление,
			|	ДоходыСтраховыхВзносов.ДатаДействия КАК ДатаДействия,
			|	НачисленияПоСпособамОтражения.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	ВЫБОР
			|		КОГДА ДоходыСтраховыхВзносов.Начисление В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа))
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеФСС.Включать)
			|		ИНАЧЕ НастройкиНачисления.Значение
			|	КОНЕЦ КАК СпособУчета,
			|	ДоходыСтраховыхВзносов.Сумма КАК Сумма,
			|	ДоходыСтраховыхВзносов.КоличествоСтрок КАК КоличествоСтрок
			|ИЗ
			|	ВТДоходыСтраховыхВзносов КАК ДоходыСтраховыхВзносов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоСпособамОтражения КАК НачисленияПоСпособамОтражения
			|		ПО ДоходыСтраховыхВзносов.Сотрудник = НачисленияПоСпособамОтражения.Сотрудник
			|			И ДоходыСтраховыхВзносов.Начисление = НачисленияПоСпособамОтражения.Начисление
			|			И ДоходыСтраховыхВзносов.ДатаДействия = НачисленияПоСпособамОтражения.ДатаДействия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК НастройкиНачисления
			|		ПО ДоходыСтраховыхВзносов.Начисление = НастройкиНачисления.Ссылка
			|			И ДоходыСтраховыхВзносов.ПорядокРасчета = НастройкиНачисления.ПорядокРасчета
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Начисление,
			|	ДатаДействия";
	КонецЕсли;		
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления КАК Начисления", ИмяВТНачисления + " КАК Начисления");
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДвижений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДвижений.Колонки.Добавить("Начисление", Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.Реквизиты.Начисление.Тип);
	ТаблицаДвижений.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ТаблицаДвижений.Колонки.Добавить("СпособУчета", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеФСС"));
	ТаблицаДвижений.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДвижений.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаДвижений.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаДвижений.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДвижений.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	
	Если ИспользоватьСтатьиФинансирования Тогда 
		ВыборкаСумм = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
		ВыборкаПоСтатьямФинансирования = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Иначе 
		ВыборкаСумм = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
		ВыборкаПоСтатьямФинансирования = Неопределено;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(
		"Сотрудник,
		|Начисление,
		|ДатаДействия");
	
	Пока ВыборкаСумм.Следующий() Цикл
		Если ВыборкаСумм.КоличествоСтрок = 0 Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСумм);
			Продолжить;
		КонецЕсли;
		// Есть данные по статьям финансирования, выполняем распределение.
		СтрокиРаспределения = Новый Массив;
		КоэффициентыРаспределения = Новый Массив;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаСумм);
		Для Индекс = 1 По ВыборкаСумм.КоличествоСтрок Цикл
			ВыборкаПоСтатьямФинансирования.НайтиСледующий(СтруктураПоиска);
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСтатьямФинансирования);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСумм);
			СтрокиРаспределения.Добавить(НоваяСтрока);
			КоэффициентыРаспределения.Добавить(ВыборкаПоСтатьямФинансирования.Сумма);
		КонецЦикла;
		Если ВыборкаСумм.КоличествоСтрок < 2 Тогда
			Продолжить;
		КонецЕсли;
		РаспределенныеСуммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ВыборкаСумм.Сумма, КоэффициентыРаспределения);
		Если РаспределенныеСуммы <> Неопределено Тогда
			Индекс = 0;
			Пока Индекс < СтрокиРаспределения.Количество() Цикл
				СтрокиРаспределения[Индекс].Сумма = РаспределенныеСуммы[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записывать = Истина;
		Движения.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.Записывать = Истина;
	КонецЕсли;
	
	ТаблицаДвижений.Свернуть("Период, ФизическоеЛицо, ГоловнаяОрганизация, Начисление, ПорядокРасчета, СпособУчета, Сотрудник, СтатьяФинансирования, СпособОтраженияЗарплатыВБухучете, СтатьяРасходов, ОблагаетсяЕНВД", "Сумма");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений, Движения.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям);
	
	ТаблицаДвижений.Свернуть("Период, ФизическоеЛицо, ГоловнаяОрганизация, ПорядокРасчета, СпособУчета, Сотрудник, СтатьяФинансирования, СпособОтраженияЗарплатыВБухучете, СтатьяРасходов, ОблагаетсяЕНВД", "Сумма");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений, Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС);
	
	Если ЗаписыватьДвижения Тогда
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записать();
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записывать = Ложь;
		Движения.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.Записать();
		Движения.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям.Записывать = Ложь;
	КонецЕсли;
	
	// Регистрация отработанного времени для среднего заработка ФСС.
	
	// Составляем коллекцию отработанных дней и дней болезни и/или ухода за больными детьми
	// для регистрации в учете среднего ФСС.
	// Согласно ст. 14 21-ФЗ следует исключать из количества календарных дней,
	// используемых при расчете среднего дневного заработка,
	// а) периоды временной нетрудоспособности, отпуска по беременности и родам, отпуска по уходу за ребенком,
	// б) дополнительные оплачиваемые выходные дни для ухода за ребенком-инвалидом,
	// в) период освобождения работника от работы с полным или частичным сохранением заработной платы
	// в соответствии с законодательством Российской Федерации,
	// если на сохраняемую заработную плату за этот период страховые взносы в ФСС не начислялись.
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(Начисления.ДатаНачала) КАК Начало,
		|	МАКСИМУМ(Начисления.ДатаОкончания) КАК Окончание
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.ЗачетНормыВремени
		|				ИЛИ ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)))
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(Начисления.ДатаНачала) ЕСТЬ НЕ NULL ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНачисления КАК Начисления", ИмяВТНачисления + " КАК Начисления");
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();

	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Выборка.Начало, Выборка.Окончание, "ДЕНЬ", "Дата", "ВТДаты");
	
	// Определение списка начислений, дни применения которых следует исключить из расчета среднего
	// (см. поля БолезньУходЗаДетьмиДень1, БолезньУходЗаДетьмиДень2, ..., БолезньУходЗаДетьмиДень31).
	// Это начисления за неотработанные дни, оплачиваемые и исключаемые из базы ФСС, 
	// а также пособия по уходу за ребенком.
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияОплачиваемыеОтсутствия
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
		|		ПО (ПВРНачисления.Ссылка = Начисления.Начисление)
		|			И (ПВРНачисления.ЗачетНормыВремени)
		|			И (НЕ ПВРНачисления.ЗачетОтработанногоВремени)
		|			И (НЕ ПВРНачисления.КодДоходаСтраховыеВзносы В (&ВидыДоходовВключаемыхВБазуФСС))
		|			И (НЕ ПВРНачисления.ОбозначениеВТабелеУчетаРабочегоВремени В (&НеоплачиваемыеВидыОтсутствий))
		|			И (НЕ ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&ИсключаемыеКатегорииНачислений))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Начисления.Начисление
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
		|		ПО (ПВРНачисления.Ссылка = Начисления.Начисление)
		|			И (ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&ВключаемыеКатегорииНачислений))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Начисления.Начисление
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
		|		ПО (ПВРНачисления.Ссылка = Начисления.Начисление)
		|			И (ПВРНачисления.ВидОтпуска В (&ВключаемыеВидыОтпусковНачислений))";
	
	ВключаемыеКатегории = Новый Массив;
	ВключаемыеКатегории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	ВключаемыеКатегории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	ВключаемыеКатегории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	
	ИсключаемыеКатегории = ПланыВидовРасчета.Начисления.КатегорииНеоплачиваемыхОтсутствий();
	
	ВключаемыеВидыОтпусков = Новый Массив;
	ВключаемыеВидыОтпусков.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	ВключаемыеВидыОтпусков.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭСОплачиваемый"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНачисления КАК Начисления", ИмяВТНачисления + " КАК Начисления");
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыДоходовВключаемыхВБазуФСС", УчетСтраховыхВзносовРасширенный.ВидыДоходовВключаемыхВБазуФСС());
	Запрос.УстановитьПараметр("НеоплачиваемыеВидыОтсутствий", УчетРабочегоВремениРасширенный.НеоплачиваемыеВидыОтсутствий());
	Запрос.УстановитьПараметр("ИсключаемыеКатегорииНачислений", ИсключаемыеКатегории);
	Запрос.УстановитьПараметр("ВключаемыеКатегорииНачислений", ВключаемыеКатегории);
	Запрос.УстановитьПараметр("ВключаемыеВидыОтпусковНачислений", ВключаемыеВидыОтпусков);
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Начисления.ДокументСсылка КАК ДокументОснование,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	ОплачиваемыеОтсутствия.Начисление КАК ВидБолезниУходаЗаДетьми,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 1
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень1,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 2
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень2,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 3
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень3,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 4
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень4,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 5
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень5,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 6
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень6,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 7
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень7,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 8
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень8,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 9
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень9,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 10
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень10,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 11
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень11,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 12
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень12,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 13
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень13,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 14
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень14,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 15
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень15,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 16
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень16,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 17
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень17,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 18
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень18,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 19
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень19,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 20
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень20,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 21
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень21,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 22
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень22,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 23
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень23,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 24
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень24,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 25
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень25,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 26
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень26,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 27
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень27,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 28
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень28,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 29
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень29,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 30
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень30,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 31
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень31,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 1
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень1,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 2
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень2,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 3
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень3,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 4
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень4,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 5
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень5,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 6
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень6,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 7
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень7,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 8
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень8,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 9
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень9,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 10
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень10,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 11
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень11,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 12
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень12,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 13
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень13,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 14
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень14,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 15
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень15,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 16
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень16,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 17
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень17,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 18
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень18,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 19
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень19,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 20
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень20,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 21
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень21,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 22
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень22,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 23
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень23,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 24
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень24,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 25
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень25,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 26
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень26,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 27
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень27,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 28
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень28,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 29
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень29,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 30
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень30,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 31
		|				ТОГДА НЕ ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеотработанДень31,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 1
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень1,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 2
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень2,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 3
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень3,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 4
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень4,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 5
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень5,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 6
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень6,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 7
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень7,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 8
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень8,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 9
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень9,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 10
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень10,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 11
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень11,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 12
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень12,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 13
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень13,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 14
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень14,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 15
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень15,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 16
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень16,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 17
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень17,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 18
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень18,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 19
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень19,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 20
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень20,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 21
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень21,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 22
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень22,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 23
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень23,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 24
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень24,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 25
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень25,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 26
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень26,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 27
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень27,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 28
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень28,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 29
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень29,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 30
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень30,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 31
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень31
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
		|		ПО (ПВРНачисления.Ссылка = Начисления.Начисление)
		|			И (ПВРНачисления.ЗачетНормыВремени
		|				ИЛИ ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДаты КАК ДанныеКалендаря
		|		ПО (ДанныеКалендаря.Дата МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияОплачиваемыеОтсутствия КАК ОплачиваемыеОтсутствия
		|		ПО (ОплачиваемыеОтсутствия.Начисление = Начисления.Начисление)
		|ГДЕ
		|	Начисления.Сторно = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ДокументСсылка,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	ОплачиваемыеОтсутствия.Начисление,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНачисления КАК Начисления", ИмяВТНачисления + " КАК Начисления");
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Добавить(), Выборка);
		Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Записать();
		Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Обслуживание проведения документа ПереносЗатратНаПерсоналМеждуСтатьями.
// Формирует таблицу значений с движениями по регистру ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.
//		Параметры
//			НачисленияСотрудников - таблица значений, соответствует структуре РН БухучетНачисленияУдержанияПоСотрудникам
//									дополнительно имеет колонки Сторно и ИдентификаторСтрокиЗатрат
//			ТаблицаПереносы - таблица значений, соответствует структуре табличной части Переносы документа ПереносЗатратНаПерсоналМеждуСтатьями
//		Возвращаемое значение
//			Таблица значений со структурой регистра ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.
//
Функция ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаПослеПереносаЗатрат(НачисленияСотрудников, ТаблицаПереносы) Экспорт

	// Таблица отбора, используется для получения данных из РН ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.
	ТаблицаОтбора = НачисленияСотрудников.Скопировать(,"Сотрудник,Регистратор");
	ТаблицаОтбора.Свернуть("Сотрудник,Регистратор");
	
	// Таблица отбора, используется для получения данных из РН СведенияОДоходахСтраховыеВзносы.
	ТаблицаОтбораВзносы = НачисленияСотрудников.Скопировать(,"Сотрудник,Начисление,ПервичныйРегистратор");
	ТаблицаОтбораВзносы.Свернуть("Сотрудник,Начисление,ПервичныйРегистратор");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	Запрос.УстановитьПараметр("ТаблицаОтбораВзносы", ТаблицаОтбораВзносы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиНачислений.Ссылка КАК Начисление
	|ПОМЕСТИТЬ ВТНачисленияУчитываемыеПриРасчете
	|ИЗ
	|	ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК НастройкиНачислений
	|ГДЕ
	|	НастройкиНачислений.ПорядокРасчета <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
	|	ТаблицаОтбора.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
	|	ТаблицаОтбора.Начисление КАК Начисление,
	|	ТаблицаОтбора.ПервичныйРегистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТТаблицаОтбораВзносы
	|ИЗ
	|	&ТаблицаОтбораВзносы КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходах.Сотрудник КАК Сотрудник,
	|	СведенияОДоходах.Регистратор КАК ПервичныйРегистратор,
	|	СведенияОДоходах.Начисление КАК Начисление,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СУММА(СведенияОДоходах.Сумма) = 0
	|				ТОГДА 0
	|			ИНАЧЕ (СУММА(СведенияОДоходах.Сумма) - СУММА(СведенияОДоходах.Скидка)) / СУММА(СведенияОДоходах.Сумма)
	|		КОНЕЦ КАК ЧИСЛО(25, 10)) КАК Доля
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК СведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияУчитываемыеПриРасчете КАК НачисленияУчитываемыеПриРасчете
	|		ПО СведенияОДоходах.Начисление = НачисленияУчитываемыеПриРасчете.Начисление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтбораВзносы КАК ТаблицаОтбора
	|		ПО СведенияОДоходах.Регистратор = ТаблицаОтбора.Регистратор
	|			И СведенияОДоходах.Сотрудник = ТаблицаОтбора.Сотрудник
	|			И СведенияОДоходах.Начисление = ТаблицаОтбора.Начисление
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Сотрудник,
	|	СведенияОДоходах.Регистратор,
	|	СведенияОДоходах.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОНачислениях.Период КАК Период,
	|	ДанныеОНачислениях.Регистратор КАК Регистратор,
	|	ДанныеОНачислениях.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеОНачислениях.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеОНачислениях.Сотрудник КАК Сотрудник,
	|	ДанныеОНачислениях.ПорядокРасчета КАК ПорядокРасчета,
	|	ДанныеОНачислениях.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеОНачислениях.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеОНачислениях.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ДанныеОНачислениях.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ДанныеОНачислениях.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеОНачислениях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтбора КАК ТаблицаОтбора
	|		ПО ДанныеОНачислениях.Регистратор = ТаблицаОтбора.Регистратор
	|			И ДанныеОНачислениях.Сотрудник = ТаблицаОтбора.Сотрудник
	|ГДЕ
	|	ДанныеОНачислениях.ПорядокРасчета <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.ВГраница();
	ТаблицаОтбора = РезультатЗапроса[КоличествоРезультатов-1].Выгрузить();
	ТекущиеДанныеОНачислениях = РезультатЗапроса[КоличествоРезультатов].Выгрузить();
	
	// таблица которую будем возвращать
	НовыеДанныеОНачислениях    = ТекущиеДанныеОНачислениях.СкопироватьКолонки();
	
	// Отберем из таблицы НачисленияСотрудников строки по тем начислениям
	// которые входят в расчет среднего заработка и поместим в таблицу НачисленияСписать.
	НачисленияСписать  = НачисленияСотрудников.СкопироватьКолонки();
	Отбор = Новый Структура("Сотрудник,ПервичныйРегистратор,Начисление,СторнируемаяСтрока");
	Для каждого СтрокаТЗ Из ТаблицаОтбора Цикл
		ДоляНачисления = Мин(?(СтрокаТЗ.Доля>0,СтрокаТЗ.Доля,-СтрокаТЗ.Доля),1);
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		Отбор.СторнируемаяСтрока = Истина;
		НайденныеСтроки = НачисленияСотрудников.НайтиСтроки(Отбор);
		Для каждого СтрокаНачисления Из НайденныеСтроки Цикл
			НоваяСтрока = НачисленияСписать.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма * ДоляНачисления,2)
		КонецЦикла;
	КонецЦикла;
	НачисленияСписать.Свернуть("Сотрудник,Регистратор,Начисление,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,ИдентификаторСтрокиЗатрат","Сумма");
	
	// отбор для поиска строк в таблице ТаблицаПереносы
	ОтборСтрокПереноса = Новый Структура("ИдентификаторСтрокиЗатрат");
	// отбор для поиска строк в таблице ТекущиеДанныеОНачислениях
	ОтборТекущиеДанныеОНачислениях = Новый Структура("Сотрудник,Регистратор,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете");
	// отбор для поиска строк в таблице ВремТаблицаДобавить
	ОтборСтрокДобавить = Новый Структура("Сотрудник,Регистратор,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете");
	
	// описание таблицы по которой будут списываться затраты
	ОписаниеТаблицыСписать = НачисленияСписать.СкопироватьКолонки();
	
	// описание таблицы по которой будут добавляться затраты
	ОписаниеТаблицыДобавит = ОписаниеТаблицыСписать.СкопироватьКолонки();
	ОписаниеТаблицыДобавит.Колонки.Добавить("НоваяСтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ОписаниеТаблицыДобавит.Колонки.Добавить("НоваяСтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ОписаниеТаблицыДобавит.Колонки.Добавить("НовыйСпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	
	ВремТаблицаСписать  = ОписаниеТаблицыСписать.СкопироватьКолонки();
	ВремТаблицаДобавить = ОписаниеТаблицыДобавит.СкопироватьКолонки();
	
	Для каждого СтрокаТЗ Из НачисленияСписать Цикл
		
		НоваяСтрока = ВремТаблицаСписать.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
		
		ОтборСтрокПереноса.ИдентификаторСтрокиЗатрат = СтрокаТЗ.ИдентификаторСтрокиЗатрат;
		СтрокиПереноса = ТаблицаПереносы.НайтиСтроки(ОтборСтрокПереноса);
		КоэффициентыПереноса = Новый Массив;
		Для каждого СтрокаПереноса Из СтрокиПереноса Цикл
			КоэффициентыПереноса.Добавить(СтрокаПереноса.Сумма);
		КонецЦикла;
		РезультатыПереноса = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(НоваяСтрока.Сумма, КоэффициентыПереноса);
		Если РезультатыПереноса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Для каждого СтрокаПереноса Из СтрокиПереноса Цикл
			НоваяСтрока = ВремТаблицаДобавить.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
			НоваяСтрока.НоваяСтатьяФинансирования 			  = СтрокаПереноса.СтатьяФинансирования;
			НоваяСтрока.НоваяСтатьяРасходов 				  = СтрокаПереноса.СтатьяРасходов;
			НоваяСтрока.НовыйСпособОтраженияЗарплатыВБухучете = СтрокаПереноса.СпособОтраженияЗарплатыВБухучете;
			НоваяСтрока.Сумма = -РезультатыПереноса[Индекс];
			Индекс = Индекс+1;
		КонецЦикла;
		
	КонецЦикла;
	
	ВремТаблицаСписать.Свернуть("Сотрудник,Регистратор,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете","Сумма");
	ВремТаблицаДобавить.Свернуть("Сотрудник,Регистратор,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,НоваяСтатьяФинансирования,НоваяСтатьяРасходов,НовыйСпособОтраженияЗарплатыВБухучете","Сумма");
	
	Для каждого СтрокаТЗ Из ВремТаблицаСписать Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборТекущиеДанныеОНачислениях, СтрокаТЗ);
		НайденныеСтроки = ТекущиеДанныеОНачислениях.НайтиСтроки(ОтборТекущиеДанныеОНачислениях);
		Коэффициенты = Новый Массив;
		СуммаТекущихДанны = 0;
		Для каждого СтрокаТекДанных Из НайденныеСтроки Цикл
			Коэффициенты.Добавить(СтрокаТекДанных.Сумма);
			СуммаТекущихДанны = СуммаТекущихДанны + СтрокаТекДанных.Сумма;
		КонецЦикла;
		
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаТЗ.Сумма, Коэффициенты);
		Если Результаты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Для каждого СтрокаТекДанных Из НайденныеСтроки Цикл
			НоваяСтрока = НовыеДанныеОНачислениях.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТекДанных);
			НоваяСтрока.СтатьяФинансирования 			 = СтрокаТЗ.СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов 					 = СтрокаТЗ.СтатьяРасходов;
			НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаТЗ.СпособОтраженияЗарплатыВБухучете;
			НоваяСтрока.Сумма = Результаты[Индекс];
			Индекс = Индекс+1;
		КонецЦикла;
		
		// Если сумма списания меньше суммы из таблицы начислений, тогда надо будет дополнительно уменьшить суммы в таблице ВремТаблицаДобавить.
		НормироватьСуммуДобавить = (?(СуммаТекущихДанны<0,-СуммаТекущихДанны,СуммаТекущихДанны) < ?(СтрокаТЗ.Сумма<0,-СтрокаТЗ.Сумма,СтрокаТЗ.Сумма));
		ЗаполнитьЗначенияСвойств(ОтборСтрокДобавить, СтрокаТЗ);
		НайденныеСтрокиПереноса = ВремТаблицаДобавить.НайтиСтроки(ОтборСтрокДобавить);
		Если НормироватьСуммуДобавить Тогда
			
			КоэффициентыПереноса = Новый Массив;
			Для каждого СтрокаПереноса Из НайденныеСтрокиПереноса Цикл
				КоэффициентыПереноса.Добавить(СтрокаПереноса.Сумма);
			КонецЦикла;
			
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаТекущихДанны, КоэффициентыПереноса);
			Если Результаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для каждого СтрокаПереноса Из НайденныеСтрокиПереноса Цикл
				СтрокаПереноса.Сумма = Результаты[Индекс];
				Индекс = Индекс+1;
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого СтрокаПереноса Из НайденныеСтрокиПереноса Цикл
			
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаПереноса.Сумма, Коэффициенты);
			Если Результаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для каждого СтрокаТекДанных Из НайденныеСтроки Цикл
				НоваяСтрока = НовыеДанныеОНачислениях.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТекДанных);
				НоваяСтрока.СтатьяФинансирования 			 = СтрокаПереноса.НоваяСтатьяФинансирования;
				НоваяСтрока.СтатьяРасходов 					 = СтрокаПереноса.НоваяСтатьяРасходов;
				НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаПереноса.НовыйСпособОтраженияЗарплатыВБухучете;
				НоваяСтрока.Сумма = Результаты[Индекс];
				Индекс = Индекс+1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НовыеДанныеОНачислениях;
	
КонецФункции

// Для участников проекта по прямым выплатам ФСС очищает результат расчета начислений за счет ФСС.
Процедура ПослеРасчетаНачислений(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, СтрокиПоИдентификатору, НаборЗаписей, НастройкиПособий) Экспорт
	ЭЛНКарантинПоКоронавирусу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиПособий, "ЭЛНКарантинПоКоронавирусу", Ложь);
	Если Не ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(
			Организация,
			ПериодРегистрации,
			ЭЛНКарантинПоКоронавирусу) Тогда
		Возврат;
	КонецЕсли;
	
	КатегорииПособийЗаСчетФСС = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииПособийЗаСчетФСС();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорииБольничного", КатегорииПособийЗаСчетФСС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки
	|ИЗ
	|	ВТРегистрРасчета_Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииБольничного)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Строка.Результат = 0;
		Строка.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", 0);
		Строка.ТерриторииУсловияТруда.Очистить();
		Строка.ЗаписьРасчета.Результат = 0;
		Строка.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = 0;
	КонецЦикла;
	
	// Обновление ВТ.
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборЗаписей, Истина);
КонецПроцедуры

// Для участников проекта по прямым выплатам ФСС очищает результат расчета начислений за счет ФСС.
Процедура ПослеРасчетаНачисленийПоДаннымНабора(ТаблицаНабора, Организация, ПериодРегистрации, СтрокиПоИдентификатору, СвойстваНачислений, НастройкиПособий) Экспорт
	ЭЛНКарантинПоКоронавирусу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиПособий, "ЭЛНКарантинПоКоронавирусу", Ложь);
	Если Не ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(
			Организация,
			ПериодРегистрации,
			ЭЛНКарантинПоКоронавирусу) Тогда
		Возврат;
	КонецЕсли;
	
	КатегорииПособийЗаСчетФСС = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииПособийЗаСчетФСС();
	КатегорииРК = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииРК();
	КатегорииСН = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииСН();
	
	КонтролируемыеНачисления = Новый Массив;
	Для Каждого КлючИЗначение Из СвойстваНачислений Цикл
		СвойстваНачисления = КлючИЗначение.Значение;
		Категория = СвойстваНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
		Если КатегорииПособийЗаСчетФСС.Найти(Категория) <> Неопределено Тогда
			КонтролируемыеНачисления.Добавить(КлючИЗначение.Ключ);
		ИначеЕсли (КатегорииРК.Найти(Категория) <> Неопределено Или КатегорииСН.Найти(Категория) <> Неопределено)
			И ЗначениеЗаполнено(СвойстваНачисления.ОсновнойВидРасчета) Тогда
			СвойстваОсновногоНачисления = СвойстваНачислений[СвойстваНачисления.ОсновнойВидРасчета];
			Если СвойстваОсновногоНачисления = Неопределено Тогда
				СвойстваОсновногоНачисления = ЗарплатаКадры.ИнформацияОВидеРасчета(СвойстваНачисления.ОсновнойВидРасчета);
			КонецЕсли;
			ОсновнаяКатегория = СвойстваОсновногоНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
			Если КатегорииПособийЗаСчетФСС.Найти(ОсновнаяКатегория) <> Неопределено Тогда
				КонтролируемыеНачисления.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если КонтролируемыеНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из СтрокиПоИдентификатору Цикл
		Строка = Элемент.Значение;
		Если Строка.ФиксСторно Или КонтролируемыеНачисления.Найти(Строка.Начисление) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Строка.РезультатФСС = Строка.Результат;
		Строка.Результат = 0;
		Строка.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", 0);
		Строка.ТерриторииУсловияТруда.Очистить();
		
		СтрокаНабора = ТаблицаНабора.Найти(Элемент.Ключ, "ИдентификаторСтроки");
		СтрокаНабора.РезультатФСС = СтрокаНабора.Результат;
		СтрокаНабора.Результат = 0;
		СтрокаНабора.РезультатВТомЧислеЗаСчетФБ = 0;
	КонецЦикла;
КонецПроцедуры

// Формирует сторно записи отменяющие движения исправленного документа по регистрам подсистемы.
//
// Параметры:
//  Движения			 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать			 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	ИмяУчета = "УчетПособийСоциальногоСтрахования";
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		Если ДвиженияВСтруктуре Тогда 
			Движения.Свойство(МетаданныеРегистра.Имя, Набор);
		Иначе 
			Набор = Движения.Найти(МетаданныеРегистра.Имя);
		КонецЕсли;
		
		Если Набор = Неопределено Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления) Экспорт
	
	СЭДОФССРасширенный.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО.
Процедура ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	
	СЭДОФССРасширенный.ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента.
Функция ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СтимулирующиеВыплатыФСС");
		Модуль.ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки);
	КонецЕсли;
	
	УчетПособийСоциальногоСтрахованияБазовый.ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки);
	
КонецФункции

#КонецОбласти

#Область ДокументБольничныйЛист

Процедура ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ) Экспорт
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	СЭДОФССРасширенный.ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ);
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает размер ограничений, используемых при расчетах "по правилам 2010 года"
//
// Возвращаемое значение:
//	число.
//
Функция РазмерОграниченияДля2010года()
	
	Возврат 415000
	
КонецФункции

// Процедура рассчитывает строки со способом расчета "ПособиеПоУходуЗаРебенкомДоПолутораЛет".
//
// Параметры
//	- СтрокиРасчета - массив строк таблицы значений данных для расчета с колонками:
//			- ЗаписьРасчета - строка набора записей регистра расчета
//			- ИсходныеДанные - структура со значениями показателями, используемыми в контексте расчета.
//
Процедура РассчитатьПособиеДоПолутораЛет(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛет Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для участвующих в пилотном проекте ФСС пособие не начисляется.
	ПособияПоОбязательномуСтрахованиюВыплачиваетФСС = ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокиРасчета[0].ЗаписьРасчета.ПериодРегистрации, СтрокиРасчета[0].Организация);
	Если ПособияПоОбязательномуСтрахованиюВыплачиваетФСС Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы);
	КонецЦикла;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиРасчета.ИдентификаторСтроки,
		|	ЗаписиРасчета.ВидРасчета КАК Начисление,
		|	ЗаписиРасчета.ПериодДействияНачало КАК Период,
		|	ЗаписиРасчета.ПериодДействияКонец КАК ДатаОкончания,
		|	ЗаписиРасчета.Сторно,
		|	ЗаписиРасчета.Сотрудник,
		|	ЗаписиРасчета.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСтрокиРасчета
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК ЗаписиРасчета
		|ГДЕ
		|	ЗаписиРасчета.ИдентификаторСтроки В(&ИдентификаторыСтрок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСтрокиРасчета.Период
		|ПОМЕСТИТЬ ВТИсходныеДанныеПериод
		|ИЗ
		|	ВТСтрокиРасчета КАК ВТСтрокиРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСтрокиРасчета.Период,
		|	ВТСтрокиРасчета.Сотрудник
		|ПОМЕСТИТЬ ВТИсходныеДанныеПериодСотрудник
		|ИЗ
		|	ВТСтрокиРасчета КАК ВТСтрокиРасчета";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСтрокиРасчета");
	УдалитьВТ.Добавить("ВТИсходныеДанныеПериод");
	УдалитьВТ.Добавить("ВТИсходныеДанныеПериодСотрудник");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанныеПериод");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("РазмерыГосударственныхПособий", МенеджерВременныхТаблиц, Ложь, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТРазмерыГосударственныхПособийСрезПоследних");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанныеПериодСотрудник", "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("УсловияОплатыОтпускаПоУходуЗаРебенком", МенеджерВременныхТаблиц, Ложь, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТУсловияОплатыОтпускаПоУходуЗаРебенкомСрезПоследних");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокиРасчета.ИдентификаторСтроки,
		|	УсловияОплатыОтпуска.Период,
		|	УсловияОплатыОтпуска.Сотрудник,
		|	ЕСТЬNULL(УсловияОплатыОтпуска.СреднийДневнойЗаработок, 0) КАК СреднийДневнойЗаработок,
		|	ЕСТЬNULL(УсловияОплатыОтпуска.МинимальныйСреднедневнойЗаработок, 0) КАК МинимальныйСреднедневнойЗаработок,
		|	ЕСТЬNULL(УсловияОплатыОтпуска.КоличествоДетей, 0) КАК КоличествоДетей,
		|	УсловияОплатыОтпуска.КоличествоПервыхДетей,
		|	УсловияОплатыОтпуска.ПрименятьЛьготыПриНачисленииПособия,
		|	УсловияОплатыОтпуска.ДатаНачалаСобытия,
		|	УсловияОплатыОтпуска.РасчетПоПравилам2010Года,
		|	УсловияОплатыОтпуска.ФинансированиеФедеральнымБюджетом,
		|	УсловияОплатыОтпуска.СтраховойСлучай,
		|	УсловияОплатыОтпуска.ДоляНеполногоВремени,
		|	УсловияОплатыОтпуска.РайонныйКоэффициентРФнаНачалоСобытия,
		|	ЕСТЬNULL(Ограничения.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет, 0) КАК МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет,
		|	ЕСТЬNULL(Ограничения.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет, 0) КАК МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет,
		|	Начисления.Наименование КАК НаименованиеВидаРасчета,
		|	Сотрудники.Наименование КАК НаименованиеСотрудника
		|ИЗ
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияОплатыОтпускаПоУходуЗаРебенкомСрезПоследних КАК УсловияОплатыОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыГосударственныхПособийСрезПоследних КАК Ограничения
		|			ПО УсловияОплатыОтпуска.Период = Ограничения.Период
		|		ПО СтрокиРасчета.Период = УсловияОплатыОтпуска.Период
		|			И СтрокиРасчета.Сотрудник = УсловияОплатыОтпуска.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО СтрокиРасчета.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СтрокиРасчета.Сотрудник = Сотрудники.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДетей = 0 Тогда
			ТекстСообщения = НСтр("ru = '%1; %2: Не указано количество детей, за которыми производится уход. Возможно не зарегистрирован отпуск по уходу за ребенком.';
									|en = '%1; %2: Number of children who are cared for is not specified. Maybe, child care leave is not registered.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НаименованиеСотрудника, Выборка.НаименованиеВидаРасчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		РайонныйКоэффициентРФОрганизации = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "РайонныйКоэффициентРФ");
		МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет = Выборка.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет;
		МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет = Выборка.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет;
		
		ДатаЗакона343ФЗ = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаНачалаРеформыСоцСтрахования();
		
		КалендарныхДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(СтрокаТаблицы.ДатаНачала);
		// Календарных дней за фактический период действия.
		ОплачиваемыеДни = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "КалендарныеДни");
		
		КоличествоДетейВсего = Выборка.КоличествоДетей;
		КоличествоПервыхДетей = Выборка.КоличествоПервыхДетей;
		
		ОграниченныйРазмер = 0;
		Результат = 0;
		РезультатВТомЧислеЗаСчетФБ = 0;
		
		ОграниченныйРазмерНаПервогоРебенка = 0;
		РезультатНаПервогоРебенка  = 0;
		ВТомЧислеЗаСчетФБНаПервогоРебенка = 0;
		
		// Льготы предусмотрены статьей 18 Закона РФ от 15.05.1991 № 1244-1 «О социальной
		// защите граждан, подвергшихся воздействию радиации вследствие катастрофы на
		// Чернобыльской АЭС», дополнительные суммы пособия при этом финансируются
		// федеральным бюджетом.
		КоэффициентЛьготы = Макс(?(Выборка.ПрименятьЛьготыПриНачисленииПособия, 2, 1), 1); // если льгота не применяется, коэффициент будет равен 1
		КоэффициентФедеральногоБюджета = Мин(?(Выборка.ПрименятьЛьготыПриНачисленииПособия, 0.5, 0), 1);
		
		// В соответствии с частью 5.1 статьи 14 Федеральный закон от 29 декабря 2006 года № 255-ФЗ «Об обязательном социальном
		// страховании на случай временной нетрудоспособности и в связи с материнством»
		// определяем среднемесячный заработок путем умножения среднего дневного заработка на 30.4.
		МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ(
			Выборка.МинимальныйСреднедневнойЗаработок,
			Выборка.РайонныйКоэффициентРФНаНачалоСобытия,
			Выборка.ДатаНачалаСобытия);
		Если Выборка.СреднийДневнойЗаработок > МинимальныйСреднедневнойЗаработок Тогда
			СреднийЗаработок = Окр(Выборка.СреднийДневнойЗаработок * 30.4, 2);
		Иначе
			МРОТНаНачалоСобытия = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(Выборка.ДатаНачалаСобытия);
			СреднийЗаработок = МРОТНаНачалоСобытия * Выборка.РайонныйКоэффициентРФНаНачалоСобытия * Выборка.ДоляНеполногоВремени;
		КонецЕсли;
		
		Если Выборка.РасчетПоПравилам2010Года Тогда
			// Средний заработок, из которого исчисляется ежемесячное пособие по уходу за ребенком, не может превышать
			// средний заработок, определяемый путем деления предельной величины базы для начисления страховых взносов
			// в Фонд социального страхования Российской Федерации, установленной Федеральным законом "О страховых взносах
			// в Пенсионный фонд Российской Федерации, Фонд социального страхования Российской Федерации, Федеральный фонд
			// обязательного медицинского страхования и территориальные фонды обязательного медицинского страхования" на день
			// наступления страхового случая, на 12.
			СреднийЗаработок = Мин(СреднийЗаработок, Окр(РазмерОграниченияДля2010года() / 12, 2));
		КонецЕсли;
		
		Если КоэффициентЛьготы > 1 Тогда
			Если КоличествоПервыхДетей = 0 Тогда
				ДоляПервогоРебенка = 0;
			Иначе
				ДоляПервогоРебенка = 1;
				Если КоличествоДетейВсего > 1 Тогда
					ДоляПервогоРебенка =
					Макс(Окр(СреднийЗаработок * 40 / 100, 2), МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * Макс(РайонныйКоэффициентРФОрганизации, 1)) /
					Макс(Окр(СреднийЗаработок * Мин(40 * КоличествоДетейВсего, 100) / 100, 2), (МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет + МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - 1)) * Макс(РайонныйКоэффициентРФОрганизации, 1));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если среди детей есть первый ребенок, считаем пособие на него отдельно.
		Если КоличествоПервыхДетей = 1 Тогда
			РазмерПособияНаПервогоРебенка = Окр(СреднийЗаработок * 40 / 100, 2) * КоэффициентЛьготы;
			
			// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
			//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
			//	минимальный размер указанного пособия определяются с учетом этих коэффициентов.".
			ОграничениеПособияСнизуНаПервогоРебенка = МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * Макс(РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
			ОграниченныйРазмерНаПервогоРебенка = Макс(РазмерПособияНаПервогоРебенка, ОграничениеПособияСнизуНаПервогоРебенка);
			
			Если КоличествоДетейВсего = 1 Тогда
				ОграниченныйРазмер = ОграниченныйРазмерНаПервогоРебенка;
				
			Иначе // КоличествоДетейВсего > 1
				// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
				//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
				//	минимальный размер указанного пособия определяются с учетом этих коэффициентов.".
				//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия".
				ОграничениеПособияСнизуНаПоследующихДетей = МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - 1) * Макс(РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
				ОграничениеПособияСнизуНаВсехДетей = ОграничениеПособияСнизуНаПервогоРебенка + ОграничениеПособияСнизуНаПоследующихДетей;
				
				// Часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
				//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в
				//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия,
				//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов
				//	размера указанного заработка (дохода, денежного довольствия).".
				ПроцентОплатыНаПоследующихДетей = Мин(40 * (КоличествоДетейВсего - 1), 100);
				РазмерПособияНаПоследующихДетей = Окр(СреднийЗаработок * ПроцентОплатыНаПоследующихДетей / 100, 2) * КоэффициентЛьготы;
				ОграниченныйРазмерНаПоследующихДетей = Макс(РазмерПособияНаПоследующихДетей, ОграничениеПособияСнизуНаПоследующихДетей);
				
				РазмерПособияНаВсехДетей = Мин(ОграниченныйРазмерНаПервогоРебенка + ОграниченныйРазмерНаПоследующихДетей, СреднийЗаработок);
				ОграниченныйРазмер = Макс(РазмерПособияНаВсехДетей, ОграничениеПособияСнизуНаВсехДетей);
				
				Если ОграничениеПособияСнизуНаВсехДетей > РазмерПособияНаВсехДетей Тогда
					ОграниченныйРазмерНаПервогоРебенка = ОграничениеПособияСнизуНаПервогоРебенка;
				КонецЕсли;
				
				Если КоэффициентЛьготы > 1 Тогда
					ОграниченныйРазмерНаПервогоРебенка = Окр(ДоляПервогоРебенка * ОграниченныйРазмер, 2)
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
			//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в
			//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия,
			//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов
			//	размера указанного заработка (дохода, денежного довольствия).".
			ПроцентОплаты = Мин(40 * КоличествоДетейВсего, 100);
			
			// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
			//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
			//	минимальный размер указанного пособия определяются с учетом этих коэффициентов.".
			//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия".
			ОграничениеПособияСнизу = МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
			РазмерПособия = Окр(СреднийЗаработок * ПроцентОплаты / 100, 2) * КоэффициентЛьготы;
			
			// Пособие за месяц с учетом ограничений.
			ОграниченныйРазмер = Макс(Мин(РазмерПособия, СреднийЗаработок), ОграничениеПособияСнизу);
		КонецЕсли;
		
		Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
			Результат = Окр(ОграниченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
			РезультатНаПервогоРебенка = Окр(ОграниченныйРазмерНаПервогоРебенка / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
		Иначе
			Результат = ОграниченныйРазмер;
			РезультатНаПервогоРебенка = ОграниченныйРазмерНаПервогоРебенка;
		КонецЕсли;
		
		Если КоэффициентФедеральногоБюджета = 1 Тогда // пособие целиком за счет федерального бюджета
			РезультатВТомЧислеЗаСчетФБ = Результат * ?(СтрокаТаблицы.Сторно, -1, 1);
			ВТомЧислеЗаСчетФБНаПервогоРебенка = РезультатНаПервогоРебенка * ?(СтрокаТаблицы.Сторно,-1,1);
		ИначеЕсли КоэффициентФедеральногоБюджета = 0.5 Тогда // пособие за счет федерального бюджета выплачивается частично
			ОграниченныйРазмер = Макс(Окр(СреднийЗаработок * Мин(40 * КоличествоДетейВсего, 100) / 100, 2), (МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей + МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(РайонныйКоэффициентРФОрганизации, 1));
			Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
				ДопРезультат = Окр(ОграниченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
			Иначе
				ДопРезультат = ОграниченныйРазмер;
			КонецЕсли;
			РезультатВТомЧислеЗаСчетФБ = Макс(Результат - ДопРезультат, 0) * ?(СтрокаТаблицы.Сторно,-1,1);
			ВТомЧислеЗаСчетФБНаПервогоРебенка = Окр(РезультатВТомЧислеЗаСчетФБ * ДоляПервогоРебенка, 2);
		КонецЕсли;
		
		СтрокаТаблицы.Результат = Результат * ?(СтрокаТаблицы.Сторно, -1, 1);
		
		СтрокаТаблицы.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", РезультатВТомЧислеЗаСчетФБ);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаВсегоПоУходуЗаПервымРебенком", РезультатНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаСверхНормПоУходуЗаПервымРебенком", ВТомЧислеЗаСчетФБНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаВсегоПоУходуЗаВторымРебенком", Результат - РезультатНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("СуммаСверхНормПоУходуЗаВторымРебенком", РезультатВТомЧислеЗаСчетФБ - ВТомЧислеЗаСчетФБНаПервогоРебенка);
		СтрокаТаблицы.Дополнительно.Вставить("ФинансированиеФедеральнымБюджетом", Выборка.ФинансированиеФедеральнымБюджетом);
		СтрокаТаблицы.Дополнительно.Вставить("СтраховойСлучай", Выборка.СтраховойСлучай);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоДетей", Выборка.КоличествоДетей);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоПервыхДетей", Выборка.КоличествоПервыхДетей);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рассчитывает строки со способом расчета "ПособиеПоУходуЗаРебенкомДоПолутораЛетНезастрахованным".
//
// Параметры
//	- СтрокиРасчета - массив строк таблицы значений данных для расчета с колонками:
//			- ЗаписьРасчета - строка набора записей регистра расчета
//			- ИсходныеДанные - структура со значениями показателями, используемыми в контексте расчета.
//
Процедура РассчитатьПособиеДоПолутораЛетНезастрахованным(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛетНезастрахованным Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СтрокиПоИдентификатору = Новый Соответствие;
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы);
	КонецЦикла;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиРасчета.ИдентификаторСтроки,
		|	ЗаписиРасчета.ВидРасчета КАК Начисление,
		|	ЗаписиРасчета.ПериодДействияНачало КАК Период,
		|	ЗаписиРасчета.ПериодДействияКонец КАК ДатаОкончания,
		|	ЗаписиРасчета.Сторно,
		|	ЗаписиРасчета.Сотрудник,
		|	ЗаписиРасчета.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСтрокиРасчета
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК ЗаписиРасчета
		|ГДЕ
		|	ЗаписиРасчета.ИдентификаторСтроки В(&ИдентификаторыСтрок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСтрокиРасчета.Период
		|ПОМЕСТИТЬ ВТИсходныеДанныеПериод
		|ИЗ
		|	ВТСтрокиРасчета КАК ВТСтрокиРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСтрокиРасчета.Период,
		|	ВТСтрокиРасчета.Сотрудник
		|ПОМЕСТИТЬ ВТИсходныеДанныеПериодСотрудник
		|ИЗ
		|	ВТСтрокиРасчета КАК ВТСтрокиРасчета";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСтрокиРасчета");
	УдалитьВТ.Добавить("ВТИсходныеДанныеПериод");
	УдалитьВТ.Добавить("ВТИсходныеДанныеПериодСотрудник");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанныеПериод");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("РазмерыГосударственныхПособий", МенеджерВременныхТаблиц, Ложь, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТРазмерыГосударственныхПособийСрезПоследних");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанныеПериодСотрудник", "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("УсловияОплатыОтпускаПоУходуЗаРебенком", МенеджерВременныхТаблиц, Ложь, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТУсловияОплатыОтпускаПоУходуЗаРебенкомСрезПоследних");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокиРасчета.ИдентификаторСтроки,
		|	УсловияОплатыОтпуска.Период,
		|	УсловияОплатыОтпуска.Сотрудник,
		|	ЕСТЬNULL(УсловияОплатыОтпуска.СреднийДневнойЗаработок, 0) КАК СреднийДневнойЗаработок,
		|	ЕСТЬNULL(УсловияОплатыОтпуска.МинимальныйСреднедневнойЗаработок, 0) КАК МинимальныйСреднедневнойЗаработок,
		|	ЕСТЬNULL(УсловияОплатыОтпуска.КоличествоДетей, 0) КАК КоличествоДетей,
		|	УсловияОплатыОтпуска.КоличествоПервыхДетей,
		|	УсловияОплатыОтпуска.ПрименятьЛьготыПриНачисленииПособия,
		|	УсловияОплатыОтпуска.ДатаНачалаСобытия,
		|	УсловияОплатыОтпуска.РасчетПоПравилам2010Года,
		|	УсловияОплатыОтпуска.ФинансированиеФедеральнымБюджетом,
		|	УсловияОплатыОтпуска.СтраховойСлучай,
		|	УсловияОплатыОтпуска.ДоляНеполногоВремени,
		|	УсловияОплатыОтпуска.РайонныйКоэффициентРФнаНачалоСобытия,
		|	ЕСТЬNULL(Ограничения.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет, 0) КАК МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет,
		|	ЕСТЬNULL(Ограничения.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет, 0) КАК МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет,
		|	ЕСТЬNULL(Ограничения.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет, 0) КАК МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет,
		|	Начисления.Наименование КАК НаименованиеВидаРасчета,
		|	Сотрудники.Наименование КАК НаименованиеСотрудника
		|ИЗ
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияОплатыОтпускаПоУходуЗаРебенкомСрезПоследних КАК УсловияОплатыОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыГосударственныхПособийСрезПоследних КАК Ограничения
		|			ПО УсловияОплатыОтпуска.Период = Ограничения.Период
		|		ПО СтрокиРасчета.Период = УсловияОплатыОтпуска.Период
		|			И СтрокиРасчета.Сотрудник = УсловияОплатыОтпуска.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО СтрокиРасчета.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СтрокиРасчета.Сотрудник = Сотрудники.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	МинПериод = '29991231';
	МаксПериод = '19000101';
	Пока Выборка.Следующий() Цикл
		МинПериод = МИН(МинПериод, Выборка.ДатаНачалаСобытия);
		МаксПериод = МАКС(МаксПериод,Выборка.ДатаНачалаСобытия);
	КонецЦикла;
	
	МинПериод=ДобавитьМесяц(НачалоГода(МинПериод) - 1,-12);
	Годы = новый Массив();
	ОписаниеПределовПоГодам = Новый Соответствие();
	
	Пока МинПериод <= МаксПериод Цикл
		ОписаниеПериода = Новый Структура("КалендарныхДней",(КонецГода(МинПериод) + 1 - НачалоГода(МинПериод)) / ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
		ОписаниеПределовПоГодам.Вставить(Год(МинПериод),ОписаниеПериода);
		Годы.Добавить(Год(МинПериод));
		МинПериод = КонецГода(МинПериод)+1;
	КонецЦикла;
	ПредельныеВеличиныПоГодам = ПредельнаяВеличинаБазыСтраховыхВзносов(Годы);
	Для Каждого ОписаниеГода Из ОписаниеПределовПоГодам Цикл
		ОписаниеГода.Значение.Вставить("ПредельнаяВеличина", ПредельныеВеличиныПоГодам[ОписаниеГода.Ключ]);
	КонецЦикла;
	
	ДатаЗакона282ФЗ = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаЗакона282ФЗ();
	
	ОграничениеПособияВоеннослужащимВключаетРК = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения().ОграничениеПособияВоеннослужащимВключаетРК;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДетей = 0 Тогда
			ТекстСообщения = НСтр("ru = '%1; %2: Не указано количество детей, за которыми производится уход. Возможно не зарегистрирован отпуск по уходу за ребенком.';
									|en = '%1; %2: Number of children who are cared for is not specified. Maybe, child care leave is not registered.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НаименованиеСотрудника, Выборка.НаименованиеВидаРасчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		РайонныйКоэффициентРФОрганизации = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "РайонныйКоэффициентРФ");
		МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет = Выборка.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет;
		МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет = Выборка.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет;
		МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет = Выборка.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет;
		
		КалендарныхДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(СтрокаТаблицы.ДатаНачала);
		// Календарных дней за фактический период действия.
		ОплачиваемыеДни = РасчетЗарплатыРасширенный.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "КалендарныеДни");
		
		КоличествоДетейВсего = Выборка.КоличествоДетей;
		КоличествоПервыхДетей = Выборка.КоличествоПервыхДетей;
		
		// Часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
		//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в
		//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия,
		//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов
		//	размера указанного заработка (дохода, денежного довольствия).".
		ПроцентОплаты = Мин(40 * КоличествоДетейВсего,100);
		
		// Части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»:
		//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате,
		//	минимальный и максимальный размеры указанного пособия определяются с учетом этих коэффициентов.".
		
		//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
		
		ОграничениеПособияСнизу = (МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей
			+ МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(РайонныйКоэффициентРФОрганизации, 1);
		ОграничениеПособияСверху = МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(РайонныйКоэффициентРФОрганизации, 1);
		
		СреднийДневнойЗаработок = Выборка.СреднийДневнойЗаработок;
		Если СтрокаТаблицы.ПериодДействия >= ДатаЗакона282ФЗ Тогда
			КалендарныхДней = 730;
			ПредельнаяВеличина = 0;
			ГодПо = Год(Выборка.ДатаНачалаСобытия)-1;
			ГодС = ГодПо-1;
			Пока ГодС <= ГодПо Цикл
				ПредельнаяВеличина = ПредельнаяВеличина +ОписаниеПределовПоГодам[ГодС].ПредельнаяВеличина;
				ГодС = ГодС + 1;
			КонецЦикла;
			СреднийДневнойЗаработок = ПредельнаяВеличина / КалендарныхДней * ?(ОграничениеПособияВоеннослужащимВключаетРК,РайонныйКоэффициентРФОрганизации,1);
			СреднийДневнойЗаработок = Мин(Выборка.СреднийДневнойЗаработок,СреднийДневнойЗаработок);
			ОграничениеПособияСверху = Неопределено;
		КонецЕсли;
		
		// Определяем среднемесячный заработок путем умножения среднего дневного заработка на среднемесячное число календарных дней
		// согласно п.5 Разъяснения о порядке назначения и выплаты ежемесячного пособия по уходу за ребенком, утв. приказом
		// Минздравсоцразвития РФ N 270, ФСС РФ N 106 от 13.04.2007.
		
		РазмерПособия = Окр(СреднийДневнойЗаработок * ПроцентОплаты / 100 * 30.4, 2);
		// пособие за месяц с учетом ограничений
		ОграниченныйРазмер = Макс(?(ЗначениеЗаполнено(ОграничениеПособияСверху),Мин(РазмерПособия, ОграничениеПособияСверху),РазмерПособия), ОграничениеПособияСнизу);
		
		Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
			Результат = Окр(ОграниченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
		Иначе
			Результат = ОграниченныйРазмер;
		КонецЕсли;
		
		
		СтрокаТаблицы.Результат = Результат * ?(СтрокаТаблицы.Сторно, -1, 1);
		
		СтрокаТаблицы.Дополнительно.Вставить("ФинансированиеФедеральнымБюджетом", Выборка.ФинансированиеФедеральнымБюджетом);
		СтрокаТаблицы.Дополнительно.Вставить("СтраховойСлучай", Выборка.СтраховойСлучай);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоДетей", Выборка.КоличествоДетей);
		СтрокаТаблицы.Дополнительно.Вставить("КоличествоПервыхДетей", Выборка.КоличествоПервыхДетей);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет на переданную дату оплачивает ли организация пособия или оплата передана в ФСС.
//
// Параметры
//	Организация - СправочникСсылка.Организации.
//
Функция ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ДатаАктуальности, Организация) Экспорт
	
	ДатаПередачиФССВыплатыПособий = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация);
	
	Возврат ЗначениеЗаполнено(ДатаПередачиФССВыплатыПособий) И ДатаАктуальности >= ДатаПередачиФССВыплатыПособий;
	
КонецФункции

Процедура РегистрыУчетаПособийСоциальногоСтрахованияРасширенная(МассивРегистров) Экспорт
	
	МассивРегистров.Добавить(Метаданные.РегистрыСведений.ДанныеОВремениДляРасчетаСреднегоФСС);
	МассивРегистров.Добавить(Метаданные.РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям);
	МассивРегистров.Добавить(Метаданные.РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС);
	МассивРегистров.Добавить(Метаданные.РегистрыНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС);
	
КонецПроцедуры

Процедура РассчитатьПособиеПоНетрудоспособности(СпособРасчета, СтрокиРасчета, ДополнительныеПараметры)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ОплатаБольничного Тогда
		Возврат;
	КонецЕсли;
		
	УчетПособийСоциальногоСтрахования.РассчитатьПособиеПоНетрудоспособности(СтрокиРасчета, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура РассчитатьПособиеПоНетрудоспособностиПоДаннымНабора(СпособРасчета, СтрокиРасчета, ДополнительныеПараметры, СтрокиНабора)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ОплатаБольничного Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		СтрокаТаблицы.ЗаписьРасчета = СтрокиНабора[СтрокаТаблицы.ИдентификаторСтроки];
	КонецЦикла;	
	
	УчетПособийСоциальногоСтрахования.РассчитатьПособиеПоНетрудоспособности(СтрокиРасчета, ДополнительныеПараметры);
	
КонецПроцедуры


Функция ЕстьСвойствоЭтоУчастникПилотногоПроекта(Параметры)
	Возврат Ложь;
КонецФункции

#Область РегистрацияДанныхДляРасчетаСреднегоЗаработкаФСС

// Выполняет запись сведений о времени для расчета среднего заработка ФСС,
// вычисляемых автоматически с использованием вспомогательных данных с разбивкой по дням.
// Используется при записи набора записей регистра данных по дням.
//
// Параметры:
//	- НаборДанныхВремениПоДням, РегистрСведенийНаборЗаписей.ДанныеОВремениДляРасчетаСреднегоФСС.
//
Процедура ЗарегистрироватьДанныеОВремениСреднегоЗаработкаФСС(НаборДанныхВремениПоДням) Экспорт
	
	// Данные по календарным дням используем для получения суммы отработанных дней за месяц физическим лицом.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КлючевыеИзмерения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КлючевыеИзмерения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	КлючевыеИзмерения.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТКлючевыеИзмерения
	|ИЗ
	|	&КлючевыеИзмерения КАК КлючевыеИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВремениПоДням.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВремениПоДням.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеВремениПоДням.Месяц КАК Месяц,
	|	ДанныеВремениПоДням.ОтработанДень1 КАК ОтработанДень1,
	|	ДанныеВремениПоДням.ОтработанДень2 КАК ОтработанДень2,
	|	ДанныеВремениПоДням.ОтработанДень3 КАК ОтработанДень3,
	|	ДанныеВремениПоДням.ОтработанДень4 КАК ОтработанДень4,
	|	ДанныеВремениПоДням.ОтработанДень5 КАК ОтработанДень5,
	|	ДанныеВремениПоДням.ОтработанДень6 КАК ОтработанДень6,
	|	ДанныеВремениПоДням.ОтработанДень7 КАК ОтработанДень7,
	|	ДанныеВремениПоДням.ОтработанДень8 КАК ОтработанДень8,
	|	ДанныеВремениПоДням.ОтработанДень9 КАК ОтработанДень9,
	|	ДанныеВремениПоДням.ОтработанДень10 КАК ОтработанДень10,
	|	ДанныеВремениПоДням.ОтработанДень11 КАК ОтработанДень11,
	|	ДанныеВремениПоДням.ОтработанДень12 КАК ОтработанДень12,
	|	ДанныеВремениПоДням.ОтработанДень13 КАК ОтработанДень13,
	|	ДанныеВремениПоДням.ОтработанДень14 КАК ОтработанДень14,
	|	ДанныеВремениПоДням.ОтработанДень15 КАК ОтработанДень15,
	|	ДанныеВремениПоДням.ОтработанДень16 КАК ОтработанДень16,
	|	ДанныеВремениПоДням.ОтработанДень17 КАК ОтработанДень17,
	|	ДанныеВремениПоДням.ОтработанДень18 КАК ОтработанДень18,
	|	ДанныеВремениПоДням.ОтработанДень19 КАК ОтработанДень19,
	|	ДанныеВремениПоДням.ОтработанДень20 КАК ОтработанДень20,
	|	ДанныеВремениПоДням.ОтработанДень21 КАК ОтработанДень21,
	|	ДанныеВремениПоДням.ОтработанДень22 КАК ОтработанДень22,
	|	ДанныеВремениПоДням.ОтработанДень23 КАК ОтработанДень23,
	|	ДанныеВремениПоДням.ОтработанДень24 КАК ОтработанДень24,
	|	ДанныеВремениПоДням.ОтработанДень25 КАК ОтработанДень25,
	|	ДанныеВремениПоДням.ОтработанДень26 КАК ОтработанДень26,
	|	ДанныеВремениПоДням.ОтработанДень27 КАК ОтработанДень27,
	|	ДанныеВремениПоДням.ОтработанДень28 КАК ОтработанДень28,
	|	ДанныеВремениПоДням.ОтработанДень29 КАК ОтработанДень29,
	|	ДанныеВремениПоДням.ОтработанДень30 КАК ОтработанДень30,
	|	ДанныеВремениПоДням.ОтработанДень31 КАК ОтработанДень31,
	|	ДанныеВремениПоДням.НеотработанДень1 КАК НеотработанДень1,
	|	ДанныеВремениПоДням.НеотработанДень2 КАК НеотработанДень2,
	|	ДанныеВремениПоДням.НеотработанДень3 КАК НеотработанДень3,
	|	ДанныеВремениПоДням.НеотработанДень4 КАК НеотработанДень4,
	|	ДанныеВремениПоДням.НеотработанДень5 КАК НеотработанДень5,
	|	ДанныеВремениПоДням.НеотработанДень6 КАК НеотработанДень6,
	|	ДанныеВремениПоДням.НеотработанДень7 КАК НеотработанДень7,
	|	ДанныеВремениПоДням.НеотработанДень8 КАК НеотработанДень8,
	|	ДанныеВремениПоДням.НеотработанДень9 КАК НеотработанДень9,
	|	ДанныеВремениПоДням.НеотработанДень10 КАК НеотработанДень10,
	|	ДанныеВремениПоДням.НеотработанДень11 КАК НеотработанДень11,
	|	ДанныеВремениПоДням.НеотработанДень12 КАК НеотработанДень12,
	|	ДанныеВремениПоДням.НеотработанДень13 КАК НеотработанДень13,
	|	ДанныеВремениПоДням.НеотработанДень14 КАК НеотработанДень14,
	|	ДанныеВремениПоДням.НеотработанДень15 КАК НеотработанДень15,
	|	ДанныеВремениПоДням.НеотработанДень16 КАК НеотработанДень16,
	|	ДанныеВремениПоДням.НеотработанДень17 КАК НеотработанДень17,
	|	ДанныеВремениПоДням.НеотработанДень18 КАК НеотработанДень18,
	|	ДанныеВремениПоДням.НеотработанДень19 КАК НеотработанДень19,
	|	ДанныеВремениПоДням.НеотработанДень20 КАК НеотработанДень20,
	|	ДанныеВремениПоДням.НеотработанДень21 КАК НеотработанДень21,
	|	ДанныеВремениПоДням.НеотработанДень22 КАК НеотработанДень22,
	|	ДанныеВремениПоДням.НеотработанДень23 КАК НеотработанДень23,
	|	ДанныеВремениПоДням.НеотработанДень24 КАК НеотработанДень24,
	|	ДанныеВремениПоДням.НеотработанДень25 КАК НеотработанДень25,
	|	ДанныеВремениПоДням.НеотработанДень26 КАК НеотработанДень26,
	|	ДанныеВремениПоДням.НеотработанДень27 КАК НеотработанДень27,
	|	ДанныеВремениПоДням.НеотработанДень28 КАК НеотработанДень28,
	|	ДанныеВремениПоДням.НеотработанДень29 КАК НеотработанДень29,
	|	ДанныеВремениПоДням.НеотработанДень30 КАК НеотработанДень30,
	|	ДанныеВремениПоДням.НеотработанДень31 КАК НеотработанДень31,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень1 КАК БолезньУходЗаДетьмиДень1,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень2 КАК БолезньУходЗаДетьмиДень2,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень3 КАК БолезньУходЗаДетьмиДень3,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень4 КАК БолезньУходЗаДетьмиДень4,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень5 КАК БолезньУходЗаДетьмиДень5,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень6 КАК БолезньУходЗаДетьмиДень6,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень7 КАК БолезньУходЗаДетьмиДень7,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень8 КАК БолезньУходЗаДетьмиДень8,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень9 КАК БолезньУходЗаДетьмиДень9,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень10 КАК БолезньУходЗаДетьмиДень10,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень11 КАК БолезньУходЗаДетьмиДень11,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень12 КАК БолезньУходЗаДетьмиДень12,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень13 КАК БолезньУходЗаДетьмиДень13,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень14 КАК БолезньУходЗаДетьмиДень14,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень15 КАК БолезньУходЗаДетьмиДень15,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень16 КАК БолезньУходЗаДетьмиДень16,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень17 КАК БолезньУходЗаДетьмиДень17,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень18 КАК БолезньУходЗаДетьмиДень18,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень19 КАК БолезньУходЗаДетьмиДень19,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень20 КАК БолезньУходЗаДетьмиДень20,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень21 КАК БолезньУходЗаДетьмиДень21,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень22 КАК БолезньУходЗаДетьмиДень22,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень23 КАК БолезньУходЗаДетьмиДень23,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень24 КАК БолезньУходЗаДетьмиДень24,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень25 КАК БолезньУходЗаДетьмиДень25,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень26 КАК БолезньУходЗаДетьмиДень26,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень27 КАК БолезньУходЗаДетьмиДень27,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень28 КАК БолезньУходЗаДетьмиДень28,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень29 КАК БолезньУходЗаДетьмиДень29,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень30 КАК БолезньУходЗаДетьмиДень30,
	|	ДанныеВремениПоДням.БолезньУходЗаДетьмиДень31 КАК БолезньУходЗаДетьмиДень31
	|ПОМЕСТИТЬ ДанныеВремениПоДням
	|ИЗ
	|	РегистрСведений.ДанныеОВремениДляРасчетаСреднегоФСС КАК ДанныеВремениПоДням
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючевыеИзмерения КАК ВТКлючевыеИзмерения
	|		ПО ДанныеВремениПоДням.ФизическоеЛицо = ВТКлючевыеИзмерения.ФизическоеЛицо
	|			И ДанныеВремениПоДням.ГоловнаяОрганизация = ВТКлючевыеИзмерения.ГоловнаяОрганизация
	|			И ДанныеВремениПоДням.Месяц = ВТКлючевыеИзмерения.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВремениПоДням.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВремениПоДням.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеВремениПоДням.Месяц КАК Месяц,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень1) КАК ОтработанДень1,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень2) КАК ОтработанДень2,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень3) КАК ОтработанДень3,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень4) КАК ОтработанДень4,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень5) КАК ОтработанДень5,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень6) КАК ОтработанДень6,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень7) КАК ОтработанДень7,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень8) КАК ОтработанДень8,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень9) КАК ОтработанДень9,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень10) КАК ОтработанДень10,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень11) КАК ОтработанДень11,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень12) КАК ОтработанДень12,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень13) КАК ОтработанДень13,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень14) КАК ОтработанДень14,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень15) КАК ОтработанДень15,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень16) КАК ОтработанДень16,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень17) КАК ОтработанДень17,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень18) КАК ОтработанДень18,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень19) КАК ОтработанДень19,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень20) КАК ОтработанДень20,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень21) КАК ОтработанДень21,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень22) КАК ОтработанДень22,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень23) КАК ОтработанДень23,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень24) КАК ОтработанДень24,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень25) КАК ОтработанДень25,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень26) КАК ОтработанДень26,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень27) КАК ОтработанДень27,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень28) КАК ОтработанДень28,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень29) КАК ОтработанДень29,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень30) КАК ОтработанДень30,
	|	МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень31) КАК ОтработанДень31,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень1) КАК НеотработанДень1,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень2) КАК НеотработанДень2,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень3) КАК НеотработанДень3,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень4) КАК НеотработанДень4,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень5) КАК НеотработанДень5,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень6) КАК НеотработанДень6,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень7) КАК НеотработанДень7,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень8) КАК НеотработанДень8,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень9) КАК НеотработанДень9,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень10) КАК НеотработанДень10,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень11) КАК НеотработанДень11,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень12) КАК НеотработанДень12,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень13) КАК НеотработанДень13,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень14) КАК НеотработанДень14,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень15) КАК НеотработанДень15,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень16) КАК НеотработанДень16,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень17) КАК НеотработанДень17,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень18) КАК НеотработанДень18,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень19) КАК НеотработанДень19,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень20) КАК НеотработанДень20,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень21) КАК НеотработанДень21,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень22) КАК НеотработанДень22,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень23) КАК НеотработанДень23,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень24) КАК НеотработанДень24,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень25) КАК НеотработанДень25,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень26) КАК НеотработанДень26,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень27) КАК НеотработанДень27,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень28) КАК НеотработанДень28,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень29) КАК НеотработанДень29,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень30) КАК НеотработанДень30,
	|	МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень31) КАК НеотработанДень31,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень1) КАК БолезньУходЗаДетьмиДень1,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень2) КАК БолезньУходЗаДетьмиДень2,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень3) КАК БолезньУходЗаДетьмиДень3,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень4) КАК БолезньУходЗаДетьмиДень4,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень5) КАК БолезньУходЗаДетьмиДень5,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень6) КАК БолезньУходЗаДетьмиДень6,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень7) КАК БолезньУходЗаДетьмиДень7,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень8) КАК БолезньУходЗаДетьмиДень8,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень9) КАК БолезньУходЗаДетьмиДень9,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень10) КАК БолезньУходЗаДетьмиДень10,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень11) КАК БолезньУходЗаДетьмиДень11,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень12) КАК БолезньУходЗаДетьмиДень12,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень13) КАК БолезньУходЗаДетьмиДень13,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень14) КАК БолезньУходЗаДетьмиДень14,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень15) КАК БолезньУходЗаДетьмиДень15,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень16) КАК БолезньУходЗаДетьмиДень16,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень17) КАК БолезньУходЗаДетьмиДень17,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень18) КАК БолезньУходЗаДетьмиДень18,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень19) КАК БолезньУходЗаДетьмиДень19,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень20) КАК БолезньУходЗаДетьмиДень20,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень21) КАК БолезньУходЗаДетьмиДень21,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень22) КАК БолезньУходЗаДетьмиДень22,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень23) КАК БолезньУходЗаДетьмиДень23,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень24) КАК БолезньУходЗаДетьмиДень24,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень25) КАК БолезньУходЗаДетьмиДень25,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень26) КАК БолезньУходЗаДетьмиДень26,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень27) КАК БолезньУходЗаДетьмиДень27,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень28) КАК БолезньУходЗаДетьмиДень28,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень29) КАК БолезньУходЗаДетьмиДень29,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень30) КАК БолезньУходЗаДетьмиДень30,
	|	МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень31) КАК БолезньУходЗаДетьмиДень31
	|ПОМЕСТИТЬ ДанныеВремениПоМесяцам
	|ИЗ
	|	ДанныеВремениПоДням КАК ДанныеВремениПоДням
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВремениПоДням.ФизическоеЛицо,
	|	ДанныеВремениПоДням.ГоловнаяОрганизация,
	|	ДанныеВремениПоДням.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВремениПоМесяцам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВремениПоМесяцам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеВремениПоМесяцам.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень1
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень2
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень3
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень3
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень4
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень4
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень5
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень5
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень6
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень6
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень7
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень7
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень8
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень8
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень9
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень9
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень10
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень10
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень11
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень11
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень12
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень12
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень13
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень13
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень14
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень14
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень15
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень15
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень16
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень16
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень17
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень17
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень18
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень18
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень19
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень19
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень20
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень20
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень21
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень21
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень22
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень22
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень23
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень23
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень24
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень24
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень25
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень25
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень26
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень26
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень27
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень27
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень28
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень28
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень29
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень29
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень30
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень30
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.ОтработанДень31
	|				И НЕ ДанныеВремениПоМесяцам.НеотработанДень31
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДнейКалендарных,
	|	ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень3
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень4
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень5
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень6
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень7
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень8
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень9
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень10
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень11
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень12
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень13
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень14
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень15
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень16
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень17
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень18
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень19
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень20
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень21
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень22
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень23
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень24
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень25
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень26
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень27
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень28
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень29
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень30
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеВремениПоМесяцам.БолезньУходЗаДетьмиДень31
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейБолезниУходаЗаДетьми
	|ИЗ
	|	ДанныеВремениПоМесяцам КАК ДанныеВремениПоМесяцам
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеВремениПоМесяцам.ФизическоеЛицо,
	|	ДанныеВремениПоМесяцам.ГоловнаяОрганизация,
	|	ДанныеВремениПоМесяцам.Месяц";
	
	КлючевыеИзмерения = Новый ТаблицаЗначений;
	КлючевыеИзмерения.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КлючевыеИзмерения.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КлючевыеИзмерения.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	// Таблицу ключевых измерений составляем из предыдущих и текущих значений полей.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДанныхВремениПоДням, КлючевыеИзмерения);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДанныхВремениПоДням.ДополнительныеСвойства["КлючевыеИзмерения"], КлючевыеИзмерения);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КлючевыеИзмерения", КлючевыеИзмерения);
	
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	ТаблицаСведений.Колонки.Добавить("ДанныеРассчитаныАвтоматически", Новый ОписаниеТипов("Булево"));
	ТаблицаСведений.ЗаполнитьЗначения(Истина, "ДанныеРассчитаныАвтоматически");
	
	// Записываем наборы записей, устанавливая отбор по таблицы ключевых изменений.
	ИменаИзмерений = "ФизическоеЛицо, ГоловнаяОрганизация, Месяц";
	КлючевыеИзмерения.Свернуть(ИменаИзмерений);
	ОтборСтрок = Новый Структура(ИменаИзмерений);
	Для Каждого СтрокаИзмерений Из КлючевыеИзмерения Цикл
		// Отбираем строки, соответствующие текущему набору измерений.
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаИзмерений);
		НайденныеСтроки = ТаблицаСведений.НайтиСтроки(ОтборСтрок);
		// Создаем и заполняем набор записей.
		НаборЗаписей = РегистрыСведений.СведенияОВремениДляРасчетаСреднегоФCC.СоздатьНаборЗаписей();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденныеСтроки, НаборЗаписей);
		// Устанавливаем отборы
		Для Каждого КлючИЗначение Из ОтборСтрок Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		// Записываем набор
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыЗаписиКорректировокСреднегоЗаработкаФСС() Экспорт
	
	Параметры = Новый Структура(
		"КорректировкиНачислений,
		|КорректировкиВремени,
		|ПериодыОтсутствий,
		|ПереноситьВДругойПорядокРасчета");
		
	Параметры.ПереноситьВДругойПорядокРасчета = Истина;
		
	Возврат Параметры;
	
КонецФункции

// Процедура выполняет запись сведений о среднем заработке ФСС
//  на основе данных, введенных пользователем.
//
// Параметры:
//	Организация
//	Сотрудник
//	КорректировкиНачислений - таблица значений, структуры аналогичной набору записей
//								регистра сведений СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.
//	КорректировкиВремени	- таблица значений, структуры аналогичной набору записей
//								регистра сведений СведенияОВремениДляРасчетаСреднегоФСС.
//	ПереноситьВДругойПорядокРасчета - признак необходимости переноса данных для других правил расчета среднего заработка.
//
Процедура ЗаписатьКорректировкиСреднегоЗаработкаФСС(Организация, Сотрудник, НачалоПериода, ОкончаниеПериода, ПараметрыКорректировок) Экспорт
	
	КорректировкиНачислений = ПараметрыКорректировок.КорректировкиНачислений;
	КорректировкиВремени = ПараметрыКорректировок.КорректировкиВремени;
	ПериодыОтсутствий = ПараметрыКорректировок.ПериодыОтсутствий;
 	ПереноситьВДругойПорядокРасчета = ПараметрыКорректировок.ПереноситьВДругойПорядокРасчета;
	
	// Корректировки начислений
	ПереименоватьКолонкуПериодВМесяц(КорректировкиНачислений);
	
	ИзмеренияНачислений = "ФизическоеЛицо, ПорядокРасчета, Начисление, Месяц";
	КорректировкиНачислений.Свернуть(ИзмеренияНачислений, "Сумма");
	
	// Если данные необходимо перенести для расчетов по другому порядку расчета,
	// необходимо скопировать их и по другим правилам.
	
	Если ПереноситьВДругойПорядокРасчета Тогда
		КоличествоСтрок = КорректировкиНачислений.Количество();
		Для Индекс = 0 По КоличествоСтрок - 1 Цикл
			ДругиеПорядкиРасчета = ДругиеПорядкиРасчетаСреднегоФСС(КорректировкиНачислений[Индекс].ПорядокРасчета);
			Для Каждого ДругойПорядокРасчета Из ДругиеПорядкиРасчета Цикл
				НоваяСтрока = КорректировкиНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КорректировкиНачислений[Индекс]);
				НоваяСтрока.ПорядокРасчета = ДругойПорядокРасчета;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
			
	// Удаляем избыточные данные
	УдалитьИзбыточныеДанныеРасчетаСреднегоЗаработкаФСС(КорректировкиНачислений);
	
	// Заполняем головную организацию и сотрудника.
	КорректировкиНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КорректировкиНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого СтрокаТаблицы Из КорректировкиНачислений Цикл
		СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		СтрокаТаблицы.Сотрудник = Сотрудник;
	КонецЦикла;
	
	// Определяем значения по умолчанию для заполнения нулевых строк.
	ЗначенияПоУмолчанию = Новый Структура(
		"Организация,
		|ГоловнаяОрганизация,
		|Сотрудник,
		|ФизическоеЛицо,
		|ПорядокРасчета");
	ЗначенияПоУмолчанию.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	ЗначенияПоУмолчанию.Сотрудник = Сотрудник;
	ЗначенияПоУмолчанию.Организация = Организация;
	ЗначенияПоУмолчанию.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	ЗначенияПоУмолчанию.ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(ОкончаниеПериода);
	
	УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
		КорректировкиНачислений,
		РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СоздатьНаборЗаписей(),
		ИзмеренияНачислений,
		НачалоПериода,
		ОкончаниеПериода,
		Истина,
		ЗначенияПоУмолчанию);
	
	// Корректировки времени
	Если КорректировкиВремени <> Неопределено Тогда
		ПереименоватьКолонкуПериодВМесяц(КорректировкиВремени);
		
		КорректировкиВремени.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Для Каждого СтрокаТаблицы Из КорректировкиВремени Цикл
			СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		КонецЦикла;
		
		ИзмеренияВремени = "ФизическоеЛицо, ГоловнаяОрганизация, Месяц";
		КорректировкиВремени.Свернуть(ИзмеренияВремени, "ОтработаноДнейКалендарных, ДнейБолезниУходаЗаДетьми");
		
		УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиВремени,
			РегистрыСведений.СведенияОВремениДляРасчетаСреднегоФCC.СоздатьНаборЗаписей(),
			ИзмеренияВремени,
			НачалоПериода,
			ОкончаниеПериода,
			Истина);
	КонецЕсли;
	
	Если РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты().ПереноситьДанныеВДругойУчетСреднегоЗаработка Тогда
		УчетСреднегоЗаработка.ПеренестиКорректировкиВСреднийЗаработокОбщий(КорректировкиНачислений, КорректировкиВремени, Организация, НачалоПериода, ОкончаниеПериода);
	КонецЕсли;
		
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
		
	// Периоды отсутствия записываем по годам.
	НаборыПоГодам = Новый Соответствие;
	Для Каждого Строка Из ПериодыОтсутствий Цикл
		НаборЗаписей = НаборыПоГодам[Год(Строка.Начало)];
		Если НаборЗаписей = Неопределено Тогда
			НаборЗаписей = РегистрыСведений.ПериодыБолезниУходаЗаДетьми.СоздатьНаборЗаписей();
			НаборыПоГодам.Вставить(Год(Строка.Начало), НаборЗаписей);
		КонецЕсли;
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		НоваяСтрока.Год = Год(Строка.Начало);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из НаборыПоГодам Цикл
		НаборЗаписей = КлючИЗначение.Значение;
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ЗарплатаКадры.ГоловнаяОрганизация(Организация));
		НаборЗаписей.Отбор.Год.Установить(КлючИЗначение.Ключ);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиКорректировкиВСреднийЗаработокФСС(КорректировкиНачислений, КорректировкиВремени, НачалоПериода, ОкончаниеПериода) Экспорт
	
	КорректировкиЗаработкаФСС = СведенияСреднегоЗаработкаФССПоКорректировкамОбщегоЗаработка(КорректировкиНачислений, КорректировкиВремени);
	
	Если КорректировкиЗаработкаФСС.Свойство("КорректировкиНачислений") Тогда
		// Удаляем избыточные данные
		КорректировкиНачисленийФСС = КорректировкиЗаработкаФСС["КорректировкиНачислений"];
		УдалитьИзбыточныеДанныеРасчетаСреднегоЗаработкаФСС(КорректировкиНачисленийФСС);
		УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиНачисленийФСС,
			РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СоздатьНаборЗаписей(),
			"ФизическоеЛицо, ГоловнаяОрганизация, Сотрудник, ПорядокРасчета, СтатьяФинансирования, СпособОтраженияЗарплатыВБухучете, СтатьяРасходов, ОблагаетсяЕНВД, Месяц",
			НачалоПериода,
			ОкончаниеПериода,
			Ложь);
	КонецЕсли;
	
	Если КорректировкиЗаработкаФСС.Свойство("КорректировкиВремени") Тогда
		УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиЗаработкаФСС["КорректировкиВремени"],
			РегистрыСведений.СведенияОВремениДляРасчетаСреднегоФCC.СоздатьНаборЗаписей(),
			"ФизическоеЛицо, ГоловнаяОрганизация, Месяц",
			НачалоПериода,
			ОкончаниеПериода,
			Ложь);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработка

// Возвращает структуру содержащую таблицы значений
// с данными о начислениях и отработанном времени
// для расчета среднего заработка по правилам ФСС.
//
// Параметры:
//	ТаблицаСотрудники - таблица значений с колонками.
//		Сотрудник
//		ДатаНачалаСобытия
//	ДокументСсылка - необязательный, ссылка на документ, движения которого будут исключены из полученных данных.
//	ОтборМесяцев - необязательный, массив месяцев, если определен, данные будут получены только за указанные месяцы.
//
// Возвращаемое значение - структура таблиц значений.
//	ДанныеОНачислениях - таблица значений с колонками
//		ФизическоеЛицо.
//		Период
//		ПорядокРасчета
//		Сумма
//	ДанныеОВремени - таблица значений с колонками.
//		Сотрудник
//		Период
//		ОтработаноДнейКалендарных
//	ДанныеСтрахователей - таблица значений с колонками
//		ФизическоеЛицо,
//		Год,
//		Страхователь,
//		Сумма,
//		ДнейБолезниУходаЗаДетьмиОборот
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудниковСлужебный(ИсходныеДанные, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	КонецЕсли;
	
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	ОтборМесяцев = ДополнительныеПараметры.ОтборМесяцев;
	УчитыватьКорректировки = ДополнительныеПараметры.УчитыватьКорректировки;
	
	// Нужно получить данные для расчета среднего заработка
	// - для указанных сотрудников,
	// - за указанные месяцы (если не указаны, то за все периоды, которые предусмотрены порядком расчета)
	// - исключая движения текущего документа
	// - для указанного порядка расчета
	// - по нескольким источникам данных:
	//	* данные учета среднего заработка (накопления)
	//	* сведения введенные за период до начала эксплуатации (сведения)
	//	* данные других страхователей по годам
	//	* данные отработанного времени за период, когда сотрудник работал, но нет ни накоплений, ни сведений.
	
	// Алгоритм получения данных следующий:
	// - определяем период расчета среднего заработка (в зависимости от порядка расчета)
	// - составляем таблицу исходных данных, в которой есть Сотрудник, Период (месяц)
	// - определяем границы - минимальную и максимальную даты для построения таблицы оборотов.
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСС();
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Добавить таблицу ВТИсходныеДанные.
	СоздатьВТИсходныеДанные(МенеджерВременныхТаблиц, ИсходныеДанные, ОтборМесяцев);
	
	// Находим граничные даты по всей таблице уже с учетом ограничений по месяцам.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(ИсходныеДанные.Период) КАК Начало,
		|	МАКСИМУМ(ИсходныеДанные.Период) КАК Окончание
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ИсходныеДанные.Период) ЕСТЬ НЕ NULL  И
		|	МАКСИМУМ(ИсходныеДанные.Период) ЕСТЬ НЕ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеДляРасчета;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("ДатаНачала", Выборка.Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Выборка.Окончание));
	Запрос.УстановитьПараметр("УчитыватьКорректировки", УчитыватьКорректировки);
	
	// Получаем данные о начислениях
	// исключаем данные по текущему регистратору.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДанныеОНачислениях.Период, МЕСЯЦ) КАК Период,
		|	ДанныеОНачислениях.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеОНачислениях.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(ДанныеФССПоНачислениям.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК Начисление,
		|	ДанныеОНачислениях.ПорядокРасчета КАК ПорядокРасчета,
		|	ДанныеОНачислениях.СпособУчета КАК СпособУчета,
		|	ДанныеОНачислениях.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеОНачислениях.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ДанныеОНачислениях.СтатьяРасходов КАК СтатьяРасходов,
		|	ДанныеОНачислениях.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(ЕСТЬNULL(ДанныеФССПоНачислениям.Сумма, ДанныеОНачислениях.Сумма)) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ДанныеОНачислениях.Регистратор ССЫЛКА Документ.ПереносДанных
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|	КОНЕЦ КАК Источник
		|ПОМЕСТИТЬ ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеОНачислениях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО ДанныеОНачислениях.ФизическоеЛицо = ИсходныеДанные.ФизическоеЛицо
		|			И ДанныеОНачислениях.ГоловнаяОрганизация = ИсходныеДанные.ГоловнаяОрганизация
		|			И ДанныеОНачислениях.ПорядокРасчета = ИсходныеДанные.ПорядокРасчета
		|			И (НАЧАЛОПЕРИОДА(ДанныеОНачислениях.Период, МЕСЯЦ) = ИсходныеДанные.Период)
		|			И (ДанныеОНачислениях.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|			И (ДанныеОНачислениях.Регистратор <> &Регистратор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаФССПоНачислениям КАК ДанныеФССПоНачислениям
		|		ПО ДанныеОНачислениях.Регистратор = ДанныеФССПоНачислениям.Регистратор
		|			И ДанныеОНачислениях.Период = ДанныеФССПоНачислениям.Период
		|			И ДанныеОНачислениях.ФизическоеЛицо = ДанныеФССПоНачислениям.ФизическоеЛицо
		|			И ДанныеОНачислениях.ГоловнаяОрганизация = ДанныеФССПоНачислениям.ГоловнаяОрганизация
		|			И ДанныеОНачислениях.Сотрудник = ДанныеФССПоНачислениям.Сотрудник
		|			И ДанныеОНачислениях.ПорядокРасчета = ДанныеФССПоНачислениям.ПорядокРасчета
		|			И ДанныеОНачислениях.СтатьяФинансирования = ДанныеФССПоНачислениям.СтатьяФинансирования
		|			И ДанныеОНачислениях.СпособОтраженияЗарплатыВБухучете = ДанныеФССПоНачислениям.СпособОтраженияЗарплатыВБухучете
		|			И ДанныеОНачислениях.СтатьяРасходов = ДанныеФССПоНачислениям.СтатьяРасходов
		|			И ДанныеОНачислениях.ОблагаетсяЕНВД = ДанныеФССПоНачислениям.ОблагаетсяЕНВД
		|			И ДанныеОНачислениях.СпособУчета = ДанныеФССПоНачислениям.СпособУчета
		|			И ДанныеОНачислениях.Сторно = ДанныеФССПоНачислениям.Сторно
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеОНачислениях.Период,
		|	ДанныеОНачислениях.ФизическоеЛицо,
		|	ДанныеОНачислениях.ГоловнаяОрганизация,
		|	ЕСТЬNULL(ДанныеФССПоНачислениям.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)),
		|	ДанныеОНачислениях.ПорядокРасчета,
		|	ДанныеОНачислениях.СпособУчета,
		|	ДанныеОНачислениях.СтатьяФинансирования,
		|	ДанныеОНачислениях.СпособОтраженияЗарплатыВБухучете,
		|	ДанныеОНачислениях.СтатьяРасходов,
		|	ДанныеОНачислениях.ОблагаетсяЕНВД,
		|	ВЫБОР
		|		КОГДА ДанныеОНачислениях.Регистратор ССЫЛКА Документ.ПереносДанных
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(ДанныеФССПоНачислениям.Сумма, ДанныеОНачислениях.Сумма)) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДанныеНачислений.Период КАК Период,
		|	ДанныеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеНачислений.Начисление КАК Начисление,
		|	ДанныеНачислений.ПорядокРасчета КАК ПорядокРасчета,
		|	ДанныеНачислений.СпособУчета КАК СпособУчета,
		|	ДанныеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ДанныеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	ДанныеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник,
		|	ДанныеНачислений.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТНачисленияДляРасчетаСреднегоЗаработкаФСС
		|ИЗ
		|	ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|ГДЕ
		|	ДанныеНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СведенияНачислений.Месяц,
		|	СведенияНачислений.ФизическоеЛицо,
		|	СведенияНачислений.Начисление,
		|	СведенияНачислений.ПорядокРасчета,
		|	СведенияНачислений.СпособУчета,
		|	СведенияНачислений.СтатьяФинансирования,
		|	СведенияНачислений.СпособОтраженияЗарплатыВБухучете,
		|	СведенияНачислений.СтатьяРасходов,
		|	СведенияНачислений.ОблагаетсяЕНВД,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации),
		|	СведенияНачислений.Сумма
		|ИЗ
		|	РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК СведенияНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО СведенияНачислений.ФизическоеЛицо = ИсходныеДанные.ФизическоеЛицо
		|			И СведенияНачислений.ГоловнаяОрганизация = ИсходныеДанные.ГоловнаяОрганизация
		|			И СведенияНачислений.Месяц = ИсходныеДанные.Период
		|			И СведенияНачислений.ПорядокРасчета = ИсходныеДанные.ПорядокРасчета
		|			И (СведенияНачислений.Сумма <> 0)
		|			И (&УчитыватьКорректировки = ИСТИНА
		|				ИЛИ НЕ ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|						ГДЕ
		|							ДанныеНачислений.ФизическоеЛицо = СведенияНачислений.ФизическоеЛицо
		|							И ДанныеНачислений.ГоловнаяОрганизация = СведенияНачислений.ГоловнаяОрганизация
		|							И ДанныеНачислений.Период = СведенияНачислений.Месяц
		|							И ДанныеНачислений.ПорядокРасчета = СведенияНачислений.ПорядокРасчета))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.ФизическоеЛицо,
		|	ДанныеНачислений.Начисление,
		|	ДанныеНачислений.ПорядокРасчета,
		|	ДанныеНачислений.СпособУчета,
		|	ДанныеНачислений.СтатьяФинансирования,
		|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ДанныеНачислений.СтатьяРасходов,
		|	ДанныеНачислений.ОблагаетсяЕНВД,
		|	ДанныеНачислений.Источник,
		|	ДанныеНачислений.Сумма
		|ИЗ
		|	ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|ГДЕ
		|	ДанныеНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(Начисления.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТНачисленияДляРасчетаСреднегоЗаработкаФССМинимальныйПриоритет
		|ИЗ
		|	ВТНачисленияДляРасчетаСреднегоЗаработкаФСС КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Период,
		|	Начисления.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|	Начисления.СпособУчета КАК СпособУчета,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Начисления.Источник КАК Источник,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.Период КАК Период,
		|		Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		Начисления.Начисление КАК Начисление,
		|		Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|		Начисления.СпособУчета КАК СпособУчета,
		|		Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|		Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|		Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|		Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|		Начисления.Источник КАК Источник,
		|		Начисления.Сумма КАК Сумма
		|	ИЗ
		|		ВТНачисленияДляРасчетаСреднегоЗаработкаФСС КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияДляРасчетаСреднегоЗаработкаФССМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Период = Начисления.Период)
		|				И (МинимальныйПриоритет.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (МинимальныйПриоритет.Приоритет = Начисления.Приоритет)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Начисления.Период,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.Начисление,
		|		Начисления.ПорядокРасчета,
		|		Начисления.СпособУчета,
		|		Начисления.СтатьяФинансирования,
		|		Начисления.СпособОтраженияЗарплатыВБухучете,
		|		Начисления.СтатьяРасходов,
		|		Начисления.ОблагаетсяЕНВД,
		|		Начисления.Источник,
		|		Начисления.Сумма
		|	ИЗ
		|		ВТНачисленияДляРасчетаСреднегоЗаработкаФСС КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияДляРасчетаСреднегоЗаработкаФССМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Период = Начисления.Период)
		|				И (МинимальныйПриоритет.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Начисления.Приоритет = 3)
		|				И (МинимальныйПриоритет.Приоритет = 1)) КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Период,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление,
		|	Начисления.ПорядокРасчета,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД,
		|	Начисления.Источник,
		|	Начисления.СпособУчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ФизическоеЛицо,
		|	Начисления.ПорядокРасчета,
		|	Начисления.Период,
		|	Начисления.СтатьяФинансирования";
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	ДанныеОНачислениях = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеУчетаВремени.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеУчетаВремени.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеУчетаВремени.Месяц КАК Месяц,
		|	ДанныеУчетаВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных,
		|	ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми КАК ДнейБолезниУходаЗаДетьми,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ПОМЕСТИТЬ ВТДанныеУчетаВремени
		|ИЗ
		|	РегистрСведений.СведенияОВремениДляРасчетаСреднегоФCC КАК ДанныеУчетаВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО ДанныеУчетаВремени.ФизическоеЛицо = ИсходныеДанные.ФизическоеЛицо
		|			И ДанныеУчетаВремени.ГоловнаяОрганизация = ИсходныеДанные.ГоловнаяОрганизация
		|			И ДанныеУчетаВремени.Месяц = ИсходныеДанные.Период
		|ГДЕ
		|	ДанныеУчетаВремени.ДанныеРассчитаныАвтоматически = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеУчетаВремени.ФизическоеЛицо,
		|	ДанныеУчетаВремени.ГоловнаяОрганизация,
		|	ДанныеУчетаВремени.Месяц,
		|	ДанныеУчетаВремени.ОтработаноДнейКалендарных,
		|	ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|ИЗ
		|	РегистрСведений.СведенияОВремениДляРасчетаСреднегоФCC КАК ДанныеУчетаВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО ДанныеУчетаВремени.ФизическоеЛицо = ИсходныеДанные.ФизическоеЛицо
		|			И ДанныеУчетаВремени.ГоловнаяОрганизация = ИсходныеДанные.ГоловнаяОрганизация
		|			И ДанныеУчетаВремени.Месяц = ИсходныеДанные.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|		ПО (ДанныеНачислений.ФизическоеЛицо = ДанныеУчетаВремени.ФизическоеЛицо)
		|			И (ДанныеНачислений.Период = ДанныеУчетаВремени.Месяц)
		|			И (&УчитыватьКорректировки = ЛОЖЬ)
		|ГДЕ
		|	ДанныеУчетаВремени.ДанныеРассчитаныАвтоматически = ЛОЖЬ
		|	И (ДанныеУчетаВремени.ОтработаноДнейКалендарных <> 0
		|			ИЛИ ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми <> 0)
		|	И (&УчитыватьКорректировки = ИСТИНА
		|			ИЛИ ДанныеНачислений.Период ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ГоловнаяОрганизация,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
			|	0 КАК ДнейБолезниУходаЗаДетьми
			|ПОМЕСТИТЬ ВТДниУходаЗаДетьми";
		
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ТаблицаСотрудники.Сотрудник) КАК Сотрудник,
			|	ИсходныеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ИсходныеДанные.Период КАК Период,
			|	НАЧАЛОПЕРИОДА(ИсходныеДанные.Период, МЕСЯЦ) КАК ДатаНачала,
			|	КОНЕЦПЕРИОДА(ИсходныеДанные.Период, МЕСЯЦ) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	ВТИсходныеДанные КАК ИсходныеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаСотрудники КАК ТаблицаСотрудники
			|		ПО ИсходныеДанные.ФизическоеЛицо = ТаблицаСотрудники.Сотрудник.ФизическоеЛицо
			|			И ИсходныеДанные.ГоловнаяОрганизация = ТаблицаСотрудники.Сотрудник.ГоловнаяОрганизация
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсходныеДанные.Период,
			|	ИсходныеДанные.ФизическоеЛицо,
			|	ИсходныеДанные.ГоловнаяОрганизация";
		
		Запрос.Выполнить();
		
		СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц);
		
		БолезньУходЗаДетьми = СостоянияБолезньУходЗаДетьми();
		Запрос.УстановитьПараметр("БолезньУходЗаДетьми", БолезньУходЗаДетьми);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПериодыСостоянийСотрудников.Сотрудник КАК Сотрудник,
			|	ПериодыСостоянийСотрудников.ДатаНачала КАК ДатаНачала,
			|	ПериодыСостоянийСотрудников.ДатаОкончания КАК ДатаОкончания,
			|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
			|				КОГДА ПериодыСостоянийСотрудников.Начало > ПериодыСостоянийСотрудников.ДатаНачала
			|					ТОГДА ПериодыСостоянийСотрудников.Начало
			|				ИНАЧЕ ПериодыСостоянийСотрудников.ДатаНачала
			|			КОНЕЦ, ВЫБОР
			|				КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|						ИЛИ ПериодыСостоянийСотрудников.Окончание > ПериодыСостоянийСотрудников.ДатаОкончания
			|					ТОГДА ПериодыСостоянийСотрудников.ДатаОкончания
			|				ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
			|			КОНЕЦ, ДЕНЬ) + 1) КАК ДнейБолезниУходаЗаДетьми
			|ПОМЕСТИТЬ ВТДниУходаЗаДетьмиПоСотрудникам
			|ИЗ
			|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
			|ГДЕ
			|	ПериодыСостоянийСотрудников.Состояние В(&БолезньУходЗаДетьми)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПериодыСостоянийСотрудников.Сотрудник,
			|	ПериодыСостоянийСотрудников.ДатаНачала,
			|	ПериодыСостоянийСотрудников.ДатаОкончания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СотрудникиПериоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СотрудникиПериоды.Период КАК Период,
			|	ДниУходаЗаДетьмиПоСотрудникам.ДнейБолезниУходаЗаДетьми КАК ДнейБолезниУходаЗаДетьми
			|ПОМЕСТИТЬ ВТДниУходаЗаДетьми
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДниУходаЗаДетьмиПоСотрудникам КАК ДниУходаЗаДетьмиПоСотрудникам
			|		ПО СотрудникиПериоды.Сотрудник = ДниУходаЗаДетьмиПоСотрудникам.Сотрудник
			|			И СотрудникиПериоды.ДатаНачала = ДниУходаЗаДетьмиПоСотрудникам.ДатаНачала
			|			И СотрудникиПериоды.ДатаОкончания = ДниУходаЗаДетьмиПоСотрудникам.ДатаОкончания";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ИсходныеДанные.Период КАК Период,
		|	ЕСТЬNULL(ДанныеУчетаВремени.ОтработаноДнейКалендарных, 0) КАК ОтработаноДнейКалендарных,
		|	ЕСТЬNULL(ДниУходаЗаДетьми.ДнейБолезниУходаЗаДетьми, ЕСТЬNULL(ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми, 0)) КАК ДнейБолезниУходаЗаДетьми,
		|	ЕСТЬNULL(ДанныеУчетаВремени.Источник, ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)) КАК Источник
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
		|		ПО ИсходныеДанные.ФизическоеЛицо = ДанныеУчетаВремени.ФизическоеЛицо
		|			И ИсходныеДанные.ГоловнаяОрганизация = ДанныеУчетаВремени.ГоловнаяОрганизация
		|			И ИсходныеДанные.Период = ДанныеУчетаВремени.Месяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниУходаЗаДетьми КАК ДниУходаЗаДетьми
		|		ПО ИсходныеДанные.ФизическоеЛицо = ДниУходаЗаДетьми.ФизическоеЛицо
		|			И ИсходныеДанные.ГоловнаяОрганизация = ДниУходаЗаДетьми.ГоловнаяОрганизация
		|			И ИсходныеДанные.Период = ДниУходаЗаДетьми.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходныеДанные.ФизическоеЛицо,
		|	ИсходныеДанные.Период";
	
	ДанныеОВремени = Запрос.Выполнить().Выгрузить();
	
	// Получаем данные других страхователей по годам.
    СоздатьВТДанныеСтрахователей(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеСтрахователей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеСтрахователей.Год КАК Год,
		|	ДанныеСтрахователей.Страхователь КАК Страхователь,
		|	ДанныеСтрахователей.Сумма,
		|	ДанныеСтрахователей.ДнейБолезниУходаЗаДетьми
		|ИЗ
		|	ВТДанныеСтрахователей КАК ДанныеСтрахователей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Год,
		|	Страхователь";
	
	ДанныеСтрахователей = Запрос.Выполнить().Выгрузить();
	
	ДанныеДляРасчета.ДанныеОНачислениях = ДанныеОНачислениях;
	ДанныеДляРасчета.ДанныеОВремени = ДанныеОВремени;
	ДанныеДляРасчета.ДанныеСтрахователей = ДанныеСтрахователей;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция СостоянияБолезньУходЗаДетьми()
	
	БолезньУходЗаДетьми = Новый Массив;
	БолезньУходЗаДетьми.Добавить(Перечисления.СостоянияСотрудника.Болезнь);
	БолезньУходЗаДетьми.Добавить(Перечисления.СостоянияСотрудника.БолезньБезОплаты);
	БолезньУходЗаДетьми.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	БолезньУходЗаДетьми.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	БолезньУходЗаДетьми.Добавить(Перечисления.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком);
	
	Возврат БолезньУходЗаДетьми;
	
КонецФункции

// Возвращает структуру содержащую таблицы значений с данными о начислениях для расчета среднего заработка ФСС,
// сгруппированную по годам.
//
// Параметры:
//      Сотрудник
//		НачалоПериода - начало периода расчета среднего заработка.
//		ОкончаниеПериода - окончание периода расчета среднего заработка.
//		ПорядокРасчета - правила расчета общего среднего заработка.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		Начисления - таблица значений с колонками.
//			Год
//			Сумма
//		ДанныеВремени - таблица значений с колонками.
//			Год
//			ОтработаноДнейКалендарных
//          ДнейБолезниУходаЗаДетьми.
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаПоГодам(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ДокументСсылка = Неопределено, ОтборМесяцев = Неопределено)
		
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	ДополнительныеПараметры.НачалоПериода = НачалоПериода;
	ДополнительныеПараметры.ОкончаниеПериода = ОкончаниеПериода;
	ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
	ДополнительныеПараметры.ДокументСсылка = ДокументСсылка;
	ДополнительныеПараметры.ОтборМесяцев = ОтборМесяцев;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(Сотрудник, ДополнительныеПараметры);
	
	НачисленияПоГодам = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ДанныеДляРасчета.ДанныеОНачислениях Цикл
		Год = Год(СтрокаТаблицы.Период);
		СуммаЗаГод = НачисленияПоГодам[Год];
		Если СуммаЗаГод = Неопределено Тогда
			СуммаЗаГод = 0;
		КонецЕсли;
		НачисленияПоГодам.Вставить(Год, СуммаЗаГод + СтрокаТаблицы.Сумма);
	КонецЦикла;
	
	ДанныеВремениПоГодам = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ДанныеДляРасчета.ДанныеОВремени Цикл
		Год = Год(СтрокаТаблицы.Период);
		ДанныеЗаГод = ДанныеВремениПоГодам[Год];
		Если ДанныеЗаГод = Неопределено Тогда
			ДанныеЗаГод = Новый Структура("ОтработаноДнейКалендарных,ДнейБолезниУходаЗаДетьми", 0, 0);
		КонецЕсли;
		ДанныеЗаГод.ОтработаноДнейКалендарных = ДанныеЗаГод.ОтработаноДнейКалендарных + СтрокаТаблицы.ОтработаноДнейКалендарных;
		ДанныеЗаГод.ДнейБолезниУходаЗаДетьми = ДанныеЗаГод.ДнейБолезниУходаЗаДетьми + СтрокаТаблицы.ДнейБолезниУходаЗаДетьми;
		ДанныеВремениПоГодам.Вставить(Год, ДанныеЗаГод);
	КонецЦикла;
	
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючИЗначение Из НачисленияПоГодам Цикл
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Год = КлючИЗначение.Ключ;
		НоваяСтрока.Сумма = КлючИЗначение.Значение;
	КонецЦикла;
	
	ДанныеВремени = Новый ТаблицаЗначений;
	ДанныеВремени.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ДанныеВремени.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"));
	ДанныеВремени.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючИЗначение Из ДанныеВремениПоГодам Цикл
		НоваяСтрока = ДанныеВремени.Добавить();
		НоваяСтрока.Год = КлючИЗначение.Ключ;
		НоваяСтрока.ОтработаноДнейКалендарных = КлючИЗначение.Значение.ОтработаноДнейКалендарных;
		НоваяСтрока.ДнейБолезниУходаЗаДетьми = КлючИЗначение.Значение.ДнейБолезниУходаЗаДетьми;
	КонецЦикла;
	
	Возврат Новый Структура("Начисления, ДанныеВремени", Начисления, ДанныеВремени);
	
КонецФункции

// Позволяет получить таблицу данных страхователей отдельно от других данных,
// необходимых для расчета среднего заработка.
//
// Параметры:
//	Сотрудник
//	ДатаНачалаСобытия
//
Функция ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСССотрудника(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ОтборМесяцев = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Составляем временные таблицы с исходными данными.
	СоздатьВТИсходныеДанныеПоСотруднику(МенеджерВременныхТаблиц, Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ОтборМесяцев);
	
	// Получаем данные ВТ с данными страхователей.
	СоздатьВТДанныеСтрахователей(МенеджерВременныхТаблиц);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеСтрахователей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСтрахователей.Год КАК Год,
	|	ДанныеСтрахователей.Страхователь КАК Страхователь,
	|	ДанныеСтрахователей.Сумма,
	|	ДанныеСтрахователей.ДнейБолезниУходаЗаДетьми
	|ИЗ
	|	ВТДанныеСтрахователей КАК ДанныеСтрахователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Год,
	|	Страхователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция составляет периоды, исключаемые из количества календарных дней при расчете среднего заработка в соответствии
// со ст. 14 21-ФЗ.
//
// Параметры:
//	ФизическоеЛицо
//	ГоловнаяОрганизация
//	Начало - дата начала анализируемого периода.
//	Окончание - дата окончания анализируемого периода.
//	ПоНаименованиямПериодов - булево, надо ли подменять виды расчетов ассоциированными наименованиями.
//
// Возвращаемое значение - таблица значений с колонками
//	ФизическоеЛицо
//	ГоловнаяОрганизация.
//	ВидБолезниУходаЗаДетьми - Если &ПоНаименованиямПериодов = Истина, то строка, наименование ассоциированное с
//	                          отсутствием,   иначе ПланВидовРасчетаСсылка.Начисления, вид расчета, связанный с
//	                          отсутствием. Т.к. у разных видов расчетов может быть одно наименование, то может повлиять
//	                          на группировку периодов, периодов по видам расчетов может быть больше.
//	Начало - дата начала интервала.
//	Окончание - дата окончания интервала.
//	Дни - количество дней.
//
Функция ПериодыДнейБолезниУходаЗаДетьми(ФизическоеЛицо, ГоловнаяОрганизация, Начало, Окончание, ПоНаименованиямПериодов = Ложь)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем таблицу подневных записей.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Начало, Окончание, "ДЕНЬ", "Дата");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	
	Запрос.УстановитьПараметр("ПоНаименованиямПериодов", ПоНаименованиямПериодов);
	Запрос.УстановитьПараметр("НаименованиеПериодаНетрудоспособности", 		НСтр("ru = 'Период временной нетрудоспособности';
																					|en = 'Temporary incapacity for work period'"));
	Запрос.УстановитьПараметр("НаименованиеПериодаОтпускаПоБеременности", 	НСтр("ru = 'Отпуск по беременности и родам';
																					|en = 'Maternity leave'"));
	Запрос.УстановитьПараметр("НаименованиеПериодаОтпускаПоУходу", 			НСтр("ru = 'Отпуск по уходу за ребенком';
																					|en = 'Child care leave'"));
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = Начало;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = Окончание;
	ПараметрыПолученияСотрудников.Организация = ГоловнаяОрганизация;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	"""" КАК ВидБолезниУходаЗаДетьми,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Начало,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
			|ПОМЕСТИТЬ ВТДниУходаЗаДетьми";
		
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.УстановитьПараметр("Сотрудник", ТаблицаСотрудников[0].Сотрудник);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	&Начало КАК ДатаНачала,
			|	&Окончание КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТСотрудникиПериоды";
		
		Запрос.Выполнить();
		
		СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц);
		
		БолезньУходЗаДетьми = СостоянияБолезньУходЗаДетьми();
		Запрос.УстановитьПараметр("БолезньУходЗаДетьми", БолезньУходЗаДетьми);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПериодыСостоянийСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ПериодыСостоянийСотрудников.Начало КАК Начало,
			|	ВЫБОР
			|		КОГДА ПериодыСостоянийСотрудников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь), ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.БолезньБезОплаты))
			|			ТОГДА &НаименованиеПериодаНетрудоспособности
			|		КОГДА ПериодыСостоянийСотрудников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам))
			|			ТОГДА &НаименованиеПериодаОтпускаПоБеременности
			|		ИНАЧЕ &НаименованиеПериодаОтпускаПоУходу
			|	КОНЕЦ КАК ВидБолезниУходаЗаДетьми,
			|	ВЫБОР
			|		КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ПериодыСостоянийСотрудников.ДатаОкончания
			|		ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
			|	КОНЕЦ КАК Окончание
			|ПОМЕСТИТЬ ВТДниУходаЗаДетьми
			|ИЗ
			|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
			|ГДЕ
			|	ПериодыСостоянийСотрудников.Состояние В(&БолезньУходЗаДетьми)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВремени.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеВремени.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА НЕ &ПоНаименованиямПериодов
		|			ТОГДА ДанныеВремени.ВидБолезниУходаЗаДетьми
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание))
		|					ТОГДА &НаименованиеПериодаНетрудоспособности
		|				КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
		|					ТОГДА &НаименованиеПериодаОтпускаПоБеременности
		|				КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
		|					ТОГДА &НаименованиеПериодаОтпускаПоУходу
		|				ИНАЧЕ Начисления.Наименование
		|			КОНЕЦ
		|	КОНЕЦ КАК ВидБолезниУходаЗаДетьми,
		|	ВЫБОР
		|		КОГДА ДанныеВремени.ВидБолезниУходаЗаДетьми.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам))
		|			ТОГДА 1
		|		КОГДА ДанныеВремени.ВидБолезниУходаЗаДетьми.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
		|			ТОГДА 2
		|		ИНАЧЕ 99
		|	КОНЕЦ КАК Приоритет,
		|	ДатыДней.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДатыДнейБолезниУходаЗаДетьмиПредварительно
		|ИЗ
		|	РегистрСведений.ДанныеОВремениДляРасчетаСреднегоФСС КАК ДанныеВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ДанныеВремени.ВидБолезниУходаЗаДетьми = Начисления.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК ДатыДней
		|		ПО (НАЧАЛОПЕРИОДА(ДатыДней.Дата, МЕСЯЦ) = ДанныеВремени.Месяц)
		|			И (ДанныеВремени.ФизическоеЛицо = &ФизическоеЛицо)
		|			И (ДанныеВремени.ГоловнаяОрганизация = &ГоловнаяОрганизация)
		|			И (ДанныеВремени.Месяц МЕЖДУ &Начало И &Окончание)
		|			И (ВЫБОР
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 1
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень1
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 2
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень2
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 3
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень3
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 4
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень4
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 5
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень5
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 6
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень6
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 7
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень7
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 8
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень8
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 9
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень9
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 10
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень10
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 11
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень11
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 12
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень12
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 13
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень13
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 14
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень14
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 15
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень15
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 16
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень16
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 17
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень17
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 18
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень18
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 19
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень19
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 20
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень20
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 21
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень21
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 22
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень22
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 23
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень23
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 24
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень24
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 25
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень25
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 26
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень26
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 27
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень27
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 28
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень28
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 29
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень29
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 30
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень30
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 31
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень31
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДнейБолезниУходаЗаДетьмиПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыДнейБолезниУходаЗаДетьмиПредварительно.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДатыДнейБолезниУходаЗаДетьмиПредварительно.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	ДатыДнейБолезниУходаЗаДетьмиПредварительно.Приоритет КАК Приоритет,
		|	ДатыДнейБолезниУходаЗаДетьмиПредварительно.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДатыДнейБолезниУходаЗаДетьми
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьмиПредварительно КАК ДатыДнейБолезниУходаЗаДетьмиПредварительно
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ФизическоеЛицо,
		|	&ГоловнаяОрганизация,
		|	ДниУходаЗаДетьми.ВидБолезниУходаЗаДетьми,
		|	99,
		|	ДатыДней.Дата
		|ИЗ
		|	ВТПериоды КАК ДатыДней
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыДнейБолезниУходаЗаДетьмиПредварительно КАК ДатыДнейБолезниУходаЗаДетьмиПредварительно
		|		ПО ДатыДней.Дата = ДатыДнейБолезниУходаЗаДетьмиПредварительно.Дата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДниУходаЗаДетьми КАК ДниУходаЗаДетьми
		|		ПО (ДатыДней.Дата МЕЖДУ ДниУходаЗаДетьми.Начало И ДниУходаЗаДетьми.Окончание)
		|ГДЕ
		|	ДатыДнейБолезниУходаЗаДетьмиПредварительно.Дата ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДнейБолезниУходаЗаДетьми.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыДнейБолезниУходаЗаДетьми.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДатыДнейБолезниУходаЗаДетьми.Дата КАК Дата,
		|	МИНИМУМ(ДатыДнейБолезниУходаЗаДетьми.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТПриоритеты
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьми КАК ДатыДнейБолезниУходаЗаДетьми
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыДнейБолезниУходаЗаДетьми.ФизическоеЛицо,
		|	ДатыДнейБолезниУходаЗаДетьми.ГоловнаяОрганизация,
		|	ДатыДнейБолезниУходаЗаДетьми.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДнейБолезни.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыДнейБолезни.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	МИНИМУМ(ДатыДнейБолезни.ВидБолезниУходаЗаДетьми) КАК ВидБолезниУходаЗаДетьми,
		|	ДатыДнейБолезни.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьми КАК ДатыДнейБолезни
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритеты КАК Приоритеты
		|		ПО (Приоритеты.ФизическоеЛицо = ДатыДнейБолезни.ФизическоеЛицо)
		|			И (Приоритеты.ГоловнаяОрганизация = ДатыДнейБолезни.ГоловнаяОрганизация)
		|			И (Приоритеты.Дата = ДатыДнейБолезни.Дата)
		|			И (Приоритеты.Приоритет = ДатыДнейБолезни.Приоритет)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыДнейБолезни.ФизическоеЛицо,
		|	ДатыДнейБолезни.ГоловнаяОрганизация,
		|	ДатыДнейБолезни.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДней.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыДней.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДатыДней.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	ВЫБОР
		|		КОГДА ДатыДнейПред.Дата ЕСТЬ NULL
		|			ТОГДА ДатыДней.Дата
		|	КОНЕЦ КАК Начало
		|ПОМЕСТИТЬ ВТДатыНачалаИнтервалов
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДней
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДнейПред
		|		ПО ДатыДней.ФизическоеЛицо = ДатыДнейПред.ФизическоеЛицо
		|			И ДатыДней.ГоловнаяОрганизация = ДатыДнейПред.ГоловнаяОрганизация
		|			И ДатыДней.ВидБолезниУходаЗаДетьми = ДатыДнейПред.ВидБолезниУходаЗаДетьми
		|			И (ДатыДней.Дата = ДОБАВИТЬКДАТЕ(ДатыДнейПред.Дата, ДЕНЬ, 1))
		|ГДЕ
		|	ДатыДнейПред.Дата ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДней.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыДней.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДатыДней.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	ВЫБОР
		|		КОГДА ДатыДнейСлед.Дата ЕСТЬ NULL
		|			ТОГДА ДатыДней.Дата
		|	КОНЕЦ КАК Окончание
		|ПОМЕСТИТЬ ВТДатыОкончанияИнтервалов
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДней
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДнейСлед
		|		ПО ДатыДней.ФизическоеЛицо = ДатыДнейСлед.ФизическоеЛицо
		|			И ДатыДней.ГоловнаяОрганизация = ДатыДнейСлед.ГоловнаяОрганизация
		|			И ДатыДней.ВидБолезниУходаЗаДетьми = ДатыДнейСлед.ВидБолезниУходаЗаДетьми
		|			И (ДатыДней.Дата = ДОБАВИТЬКДАТЕ(ДатыДнейСлед.Дата, ДЕНЬ, -1))
		|ГДЕ
		|	ДатыДнейСлед.Дата ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыНачалаИнтервалов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыНачалаИнтервалов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДатыНачалаИнтервалов.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	ДатыНачалаИнтервалов.Начало КАК Начало,
		|	МИНИМУМ(ДатыОкончанияИнтервалов.Окончание) КАК Окончание
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТДатыНачалаИнтервалов КАК ДатыНачалаИнтервалов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыОкончанияИнтервалов КАК ДатыОкончанияИнтервалов
		|		ПО ДатыНачалаИнтервалов.ФизическоеЛицо = ДатыОкончанияИнтервалов.ФизическоеЛицо
		|			И ДатыНачалаИнтервалов.ГоловнаяОрганизация = ДатыОкончанияИнтервалов.ГоловнаяОрганизация
		|			И ДатыНачалаИнтервалов.ВидБолезниУходаЗаДетьми = ДатыОкончанияИнтервалов.ВидБолезниУходаЗаДетьми
		|			И ДатыНачалаИнтервалов.Начало <= ДатыОкончанияИнтервалов.Окончание
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыНачалаИнтервалов.ФизическоеЛицо,
		|	ДатыНачалаИнтервалов.ГоловнаяОрганизация,
		|	ДатыНачалаИнтервалов.ВидБолезниУходаЗаДетьми,
		|	ДатыНачалаИнтервалов.Начало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Интервалы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Интервалы.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	Интервалы.Начало КАК Начало,
		|	Интервалы.Окончание КАК Окончание,
		|	КОЛИЧЕСТВО(ДатыДней.Дата) КАК Дни,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДней
		|		ПО Интервалы.ФизическоеЛицо = ДатыДней.ФизическоеЛицо
		|			И Интервалы.ГоловнаяОрганизация = ДатыДней.ГоловнаяОрганизация
		|			И Интервалы.ВидБолезниУходаЗаДетьми = ДатыДней.ВидБолезниУходаЗаДетьми
		|			И (ДатыДней.Дата МЕЖДУ Интервалы.Начало И Интервалы.Окончание)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ГоловнаяОрганизация,
		|	Интервалы.ВидБолезниУходаЗаДетьми,
		|	Интервалы.Начало,
		|	Интервалы.Окончание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыБолезниУходаЗаДетьми.ФизическоеЛицо,
		|	ПериодыБолезниУходаЗаДетьми.ГоловнаяОрганизация,
		|	ПериодыБолезниУходаЗаДетьми.ВидБолезниУходаЗаДетьми,
		|	ПериодыБолезниУходаЗаДетьми.Начало,
		|	ПериодыБолезниУходаЗаДетьми.Окончание,
		|	ПериодыБолезниУходаЗаДетьми.Дни,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|ИЗ
		|	РегистрСведений.ПериодыБолезниУходаЗаДетьми КАК ПериодыБолезниУходаЗаДетьми
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалы КАК Интервалы
		|		ПО (Интервалы.Начало <= ПериодыБолезниУходаЗаДетьми.Окончание)
		|			И (Интервалы.Окончание >= ПериодыБолезниУходаЗаДетьми.Начало)
		|ГДЕ
		|	Интервалы.Начало ЕСТЬ NULL
		|	И ПериодыБолезниУходаЗаДетьми.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПериодыБолезниУходаЗаДетьми.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ПериодыБолезниУходаЗаДетьми.Начало МЕЖДУ &Начало И &Окончание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало";

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработкаПоДокументу

// Создает временную таблицу с реквизитами документов необходимыми для формирования
// структуры параметров расчета среднего заработка ФСС.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц  - менеджер временных таблиц, куда будет помещена временная 
//                                                       таблица ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС
//  МассивСсылок            - Массив из ДокументСсылка - ссылки, по которым необходимо получить данные, 
//                                                       допустимые типы элементов: 
//                                                           ДокументСсылка.БольничныйЛист; 
//                                                           ДокументСсылка.ОтпускПоУходуЗаРебенком.
//
Процедура СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДатаОтдельногоРасчетаПособийПоМатеринству", УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтдельногоРасчетаПособийПоМатеринству());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве)
	|				ИЛИ БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.Профзаболевание)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПрименятьПредельнуюВеличину,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|				И БольничныйЛист.ПериодРегистрации >= &ДатаОтдельногоРасчетаПособийПоМатеринству
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьДниБолезниУходаЗаДетьми,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности <> ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|				И БольничныйЛист.ПричинаНетрудоспособности <> ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьДниПриостановленияТД,
	|	БольничныйЛист.ДнейПриостановленияТДЗаГод1 КАК ДнейПриостановленияТДЗаГод1,
	|	БольничныйЛист.ДнейПриостановленияТДЗаГод2 КАК ДнейПриостановленияТДЗаГод2,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод КАК ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	БольничныйЛист.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей,
	|	БольничныйЛист.ИсточникСреднего КАК ИсточникСреднего,
	|	БольничныйЛист.РасчетПоПравилам2010Года КАК РасчетПоПравилам2010Года,
	|	БольничныйЛист.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	БольничныйЛист.РайонныйКоэффициентРФнаНачалоСобытия КАК РайонныйКоэффициентРФ
	|ПОМЕСТИТЬ ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ОтпускПоУходуЗаРебенком.Сотрудник,
	|	ОтпускПоУходуЗаРебенком.Сотрудник,
	|	ОтпускПоУходуЗаРебенком.ДатаНачала,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенком.РасчетПоПравилам2010Года
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ОтпускПоУходуЗаРебенком.УчитыватьЗаработокПредыдущихСтрахователей,
	|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСреднегоДляПособий.ПустаяСсылка),
	|	ОтпускПоУходуЗаРебенком.РасчетПоПравилам2010Года,
	|	ОтпускПоУходуЗаРебенком.ДоляНеполногоВремени,
	|	ОтпускПоУходуЗаРебенком.РайонныйКоэффициентРФнаНачалоСобытия
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", "ДатаНачалаСобытия");

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"МинимальнаяОплатаТрудаРФ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТМинимальнаяОплатаТруда");
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументаРасчетаСреднего.Ссылка,
	|	ДанныеДокументаРасчетаСреднего.Сотрудник,
	|	ДанныеДокументаРасчетаСреднего.ФизическоеЛицо,
	|	ДанныеДокументаРасчетаСреднего.ДатаНачалаСобытия,
	|	ДанныеДокументаРасчетаСреднего.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументаРасчетаСреднего.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументаРасчетаСреднего.УчитыватьДниПриостановленияТД,
	|	ДанныеДокументаРасчетаСреднего.ДнейПриостановленияТДЗаГод1,
	|	ДанныеДокументаРасчетаСреднего.ДнейПриостановленияТДЗаГод2,
	|	ДанныеДокументаРасчетаСреднего.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДанныеДокументаРасчетаСреднего.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДанныеДокументаРасчетаСреднего.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументаРасчетаСреднего.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументаРасчетаСреднего.УчитыватьЗаработокПредыдущихСтрахователей,
	|	ДанныеДокументаРасчетаСреднего.ИсточникСреднего,
	|	ДанныеДокументаРасчетаСреднего.РасчетПоПравилам2010Года,
	|	ДанныеДокументаРасчетаСреднего.ДоляНеполногоВремени,
	|	ДанныеДокументаРасчетаСреднего.РайонныйКоэффициентРФ,
	|	МинимальнаяОплатаТруда.Размер КАК МинимальныйРазмерОплатыТрудаРФ
	|ПОМЕСТИТЬ ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ КАК ДанныеДокументаРасчетаСреднего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	|		ПО ДанныеДокументаРасчетаСреднего.ДатаНачалаСобытия = МинимальнаяОплатаТруда.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТМинимальнаяОплатаТруда";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция - Таблицы данных среднего заработка ФСС
//
// Параметры:
//  ИмяДокумента - Строка, имя документа для которого надо получить данные для расчета среднего заработка
//  МассивСсылок - массив, "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком".
//
// Возвращаемое значение:
//  ДанныеДляРасчета - структура, содержит поля с таблицами данных для расчета среднего заработка по МассивСсылок
//					ДанныеОНачислениях, Таблица значений
//					ДанныеОВремени, Таблица значений
//					ДанныеСтрахователей, Таблица значений.
//
Функция ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СреднийЗаработокФСС.Ссылка,
		|	СреднийЗаработокФСС.ПорядокРасчета,
		|	СреднийЗаработокФСС.ФизическоеЛицо,
		|	СреднийЗаработокФСС.СтатьяФинансирования,
		|	СреднийЗаработокФСС.СпособОтраженияЗарплатыВБухучете,
		|	СреднийЗаработокФСС.СтатьяРасходов,
		|	СреднийЗаработокФСС.ОблагаетсяЕНВД,
		|	СреднийЗаработокФСС.Период,
		|	СреднийЗаработокФСС.Начисление,
		|	СреднийЗаработокФСС.Сумма
		|ИЗ
		|	Документ.#ИмяДокумента#.СреднийЗаработокФСС КАК СреднийЗаработокФСС
		|ГДЕ
		|	СреднийЗаработокФСС.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработанноеВремяДляСреднегоФСС.Ссылка,
		|	ОтработанноеВремяДляСреднегоФСС.ФизическоеЛицо,
		|	ОтработанноеВремяДляСреднегоФСС.Период,
		|	ОтработанноеВремяДляСреднегоФСС.ОтработаноДнейКалендарных,
		|	ОтработанноеВремяДляСреднегоФСС.ДнейБолезниУходаЗаДетьми,
		|	ОтработанноеВремяДляСреднегоФСС.Источник
		|ИЗ
		|	Документ.#ИмяДокумента#.ОтработанноеВремяДляСреднегоФСС КАК ОтработанноеВремяДляСреднегоФСС
		|ГДЕ
		|	ОтработанноеВремяДляСреднегоФСС.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументДанныеДругихСтрахователей.Ссылка,
		|	ДокументДанныеДругихСтрахователей.ФизическоеЛицо,
		|	ДокументДанныеДругихСтрахователей.Год,
		|	ДокументДанныеДругихСтрахователей.Страхователь,
		|	ДокументДанныеДругихСтрахователей.Сумма,
		|	ДокументДанныеДругихСтрахователей.ДнейБолезниУходаЗаДетьми
		|ИЗ
		|	Документ.#ИмяДокумента#.СреднийЗаработокДанныеСтрахователей КАК ДокументДанныеДругихСтрахователей
		|ГДЕ
		|	ДокументДанныеДругихСтрахователей.Ссылка В (&МассивСсылок)";
	
	ЭтоБольничный = (СтрСравнить(ИмяДокумента, "БольничныйЛист") = 0);
	ЕстьПриостановленияТрудовыхДоговоров = ЭтоБольничный;
	
	Если ЭтоБольничный Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	*
		|ИЗ
		|	Документ.#ИмяДокумента#.ПриостановленияТрудовыхДоговоров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ.#ИмяДокумента#.СреднийЗаработокСЭДО КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента#", ИмяДокумента);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеОНачислениях 	= Результат[0].Выгрузить();
	ДанныеВремени 		= Результат[1].Выгрузить();
	ДанныеСтрахователей	= Результат[2].Выгрузить();
	
	ДанныеДляРасчета 	= Новый Структура("ДанныеОНачислениях,ДанныеОВремени,ДанныеСтрахователей", ДанныеОНачислениях, ДанныеВремени, ДанныеСтрахователей);
	
	Если ЭтоБольничный Тогда
		ДанныеДляРасчета.Вставить("ПриостановленияТрудовыхДоговоров", Результат[3].Выгрузить());
		ДанныеДляРасчета.Вставить("СреднийЗаработокСЭДО",             Результат[4].Выгрузить());
	Иначе
		ДанныеДляРасчета.Вставить("ПриостановленияТрудовыхДоговоров", Неопределено);
		ДанныеДляРасчета.Вставить("СреднийЗаработокСЭДО",             Неопределено);
	КонецЕсли;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция ОписаниеТипаСтраховательСреднийЗаработокФСС() Экспорт
	Возврат Новый ОписаниеТипов("СправочникСсылка.Работодатели,СправочникСсылка.Организации");
КонецФункции

#КонецОбласти

#Область РасчетСреднегоЗаработкаВФормах

// Процедура заполняет таблицы документа данными учета среднего заработка
// по результатам их редактирования.
//
Процедура ЗаполнитьДанныеУчетаСреднегоЗаработкаФСС(Объект, СреднийЗаработок, Форма) Экспорт
	
	РедактируемыеНачисления = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеОНачислениях);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемыеНачисления, Объект.СреднийЗаработокФСС);
	
	Если СреднийЗаработок.Свойство("ДанныеОВремени") И ЗначениеЗаполнено(СреднийЗаработок.ДанныеОВремени) Тогда
		РедактируемоеВремя = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеОВремени);
		Если РедактируемоеВремя <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемоеВремя, Объект.ОтработанноеВремяДляСреднегоФСС);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Свойство("СреднийЗаработокДанныеСтрахователей") И СреднийЗаработок.Свойство("ДанныеСтрахователей") Тогда
		РедактируемыеДанныеСтрахователей = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеСтрахователей);
		Если РедактируемыеДанныеСтрахователей <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемыеДанныеСтрахователей, Объект.СреднийЗаработокДанныеСтрахователей);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Свойство("ПериодыБолезниУходаЗаДетьми") И СреднийЗаработок.Свойство("ПериодыОтсутствий") Тогда
		ПериодыБолезниУходаЗаДетьми = ПолучитьИзВременногоХранилища(СреднийЗаработок.ПериодыОтсутствий);
		Если ПериодыБолезниУходаЗаДетьми <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПериодыБолезниУходаЗаДетьми, Объект.ПериодыБолезниУходаЗаДетьми);
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Возвращает структуру 1го параметра для процедуры ПолучитьСреднийЗаработокСотрудника.
Функция СтруктураПараметровПолученияСреднегоЗаработка() Экспорт
	Возврат Новый Структура(
	"ФизическоеЛицо,
	|ГоловнаяОрганизация,
	|Сотрудник,
	|НачалоПериода,
	|ОкончаниеПериода,
	|ПорядокРасчета,
	|НомерЛН");
КонецФункции

// Возвращает структуру 2го параметра для процедуры ПолучитьСреднийЗаработокСотрудника.
Функция СтруктураРезультатаПолученияСреднегоЗаработка() Экспорт
	Возврат Новый Структура(
	"СреднийЗаработокСЭДО,
	|ДанныеОНачислениях,
	|ДанныеОВремени,
	|ДанныеСтрахователей,
	|ПериодыОтсутствий");
КонецФункции

// Получает данные учета среднего заработка и загружает их в структуру данных документа.
// Обеспечивает сохранение пользовательских данных в документе.
//
// Параметры:
//   Параметры - Структура - Параметры получения среднего заработка.
//       Пустую структуру рекомендуется создавать функцией СтруктураПараметровПолученияСреднегоЗаработка.
//       * ФизическоеЛицо      - СправочникСсылка.ФизическиеЛица
//       * Сотрудник           - СправочникСсылка.Сотрудники
//       * ГоловнаяОрганизация - СправочникСсылка.Организации
//       * НачалоПериода       - Дата
//       * ОкончаниеПериода    - Дата
//       * ПорядокРасчета      - ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС
//       * НомерЛН             - Строка
//   Результат - Структура - Результат получения среднего заработка.
//       Пустую структуру рекомендуется создавать функцией СтруктураРезультатаПолученияСреднегоЗаработка.
//       * СреднийЗаработокСЭДО
//       * ДанныеОНачислениях
//       * ДанныеОВремени
//       * ДанныеСтрахователей
//       * ПериодыОтсутствий
//
Процедура ПолучитьСреднийЗаработокСотрудника(Параметры, Результат) Экспорт
	
	ФизическоеЛицо      = Параметры.ФизическоеЛицо;
	Сотрудник           = Параметры.Сотрудник;
	ГоловнаяОрганизация = Параметры.ГоловнаяОрганизация;
	НачалоПериода       = Параметры.НачалоПериода;
	ОкончаниеПериода    = Параметры.ОкончаниеПериода;
	ПорядокРасчета      = Параметры.ПорядокРасчета;
	НомерЛН             = Параметры.НомерЛН;
	
	СреднийЗаработокСЭДО = Результат.СреднийЗаработокСЭДО;
	ДанныеОНачислениях   = Результат.ДанныеОНачислениях;
	ДанныеОВремени       = Результат.ДанныеОВремени;
	ДанныеСтрахователей  = Результат.ДанныеСтрахователей;
	ПериодыОтсутствий    = Результат.ПериодыОтсутствий;
	
	// Удаляем строки, "не попадающие" в новый период расчета среднего.
	УчетСреднегоЗаработка.УдалитьДанныеВнеПериодаРасчетаСреднегоЗаработка(ДанныеОНачислениях, НачалоПериода, ОкончаниеПериода, ПорядокРасчета);
	УчетСреднегоЗаработка.УдалитьДанныеВнеПериодаРасчетаСреднегоЗаработка(ДанныеОВремени, НачалоПериода, ОкончаниеПериода);
		
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	ДополнительныеПараметры.НачалоПериода = НачалоПериода;
	ДополнительныеПараметры.ОкончаниеПериода = ОкончаниеПериода;
	ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(Сотрудник, ДополнительныеПараметры);
	
	// Объединение данных, полученных из учета, с данными документа осуществляется по следующим правилам
	// Данные в документе заменяются данными из учета в одном из следующих случаев
	//	- источник данных в документе не относится к группе источников "Результаты редактирования" (СведенияДоНачалаЭксплуатации и Исправления)
	//	- порядковый номер источника из учета (приоритет) выше, чем в документе.
	
	// Следовательно, необходимо в разрезе сотрудника и месяца для каждой коллекции определить максимальный приоритет источника
	// и наличие результатов редактирования.
	
	ПриоритетИсточников = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПриоритетИсточников();
	СохраняемыеЗначения = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.РезультатыРедактирования();
	
	СочетанияЗамены = Новый ТаблицаЗначений;
	СочетанияЗамены.Колонки.Добавить("ФизическоеЛицо");
	СочетанияЗамены.Колонки.Добавить("Период");
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, Период");
	
	СоответствиеКоллекций = Новый Соответствие;
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеОНачислениях);
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОВремени, ДанныеОВремени);
	
	Для Каждого КлючИЗначение Из СоответствиеКоллекций Цикл
		КоллекцияУчета = КлючИЗначение.Ключ;
		КоллекцияДокумента = КлючИЗначение.Значение;
		СочетанияЗамены.Очистить();
		Для Каждого СтрокаДанных Из КоллекцияУчета Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДанных);
			НайденныеСочетания = СочетанияЗамены.НайтиСтроки(ОтборСтрок);
			Если НайденныеСочетания.Количество() > 0 Тогда
				// Такое сочетание уже есть, пропускаем.
				Продолжить;
			КонецЕсли;
			НайденныеСтроки = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Строк за этот месяц вовсе нет в документе, добавляем.
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			ЕстьСохраняемыеЗначения = Ложь;
			ПриоритетИзДокумента = 0;
			Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
				Если СохраняемыеЗначения.Найти(СтрокаДокумента.Источник) <> Неопределено Тогда
					// Источник относится к сохраняемым значениям, пропускаем.
					ЕстьСохраняемыеЗначения = Истина;
				КонецЕсли;
				Приоритет = ПриоритетИсточников[СтрокаДокумента.Источник];
				Если ПриоритетИзДокумента < Приоритет Тогда
					ПриоритетИзДокумента = Приоритет;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьСохраняемыеЗначения Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			// Сравниваем приоритет.
			ПриоритетИзУчета = ПриоритетИсточников[СтрокаДанных.Источник];
			Если ПриоритетИзУчета > ПриоритетИзДокумента Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
			КонецЕсли;
		КонецЦикла;
		
		// Удаляем все строки, соответствующие отобранным сочетаниям Сотрудник + Период.
		Для Каждого Сочетание Из СочетанияЗамены Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
			// Переносим.
			// Удаляем существующие строки...
			СтрокиДокумента = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				КоллекцияДокумента.Удалить(СтрокаДокумента);
			КонецЦикла;
			// ..и добавляем из данных расчета.
			СтрокиУчета = КоллекцияУчета.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаУчета Из СтрокиУчета Цикл
				ЗаполнитьЗначенияСвойств(КоллекцияДокумента.Добавить(), СтрокаУчета);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Данные страхователей обновляем полностью, т.к. они не редактируются.
	ДанныеСтрахователей.Очистить();
	ТаблицаДанныхСтрахователей = ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСССотрудника(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДанныхСтрахователей, ДанныеСтрахователей);
	
	// Объединить сведения о периодах отсутствия.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаКоллекции Из ПериодыОтсутствий Цикл
		Если СохраняемыеЗначения.Найти(СтрокаКоллекции.Источник) = Неопределено Тогда
			// Не корректировки удаляем.
			УдаляемыеСтроки.Добавить(СтрокаКоллекции);
			Продолжить;
		КонецЕсли;
		// Удаляем только в случае, если в новых данных есть период, захватывающий указанный.
		Для Каждого СтрокаТаблицы Из ДанныеДляРасчета.ПериодыОтсутствий Цикл
			Если СтрокаКоллекции.Начало <= СтрокаТаблицы.Окончание И СтрокаКоллекции.Окончание >= СтрокаТаблицы.Начало Тогда
				УдаляемыеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ПериодыОтсутствий.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ПериодыОтсутствий, ПериодыОтсутствий);
	
	// Таблица СреднийЗаработокСЭДО не подразумевает ручных правок.
	Если СреднийЗаработокСЭДО <> Неопределено Тогда
		СреднийЗаработокСЭДО.Очистить();
		РасчетныеГоды = Новый Массив;
		Если ЗначениеЗаполнено(НачалоПериода) Тогда
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(РасчетныеГоды, Год(НачалоПериода));
		КонецЕсли;
		Если ЗначениеЗаполнено(ОкончаниеПериода) Тогда
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(РасчетныеГоды, Год(ОкончаниеПериода));
		КонецЕсли;
		ДанныеФонда = СреднийЗаработокПоДаннымФонда(ФизическоеЛицо, ГоловнаяОрганизация, НомерЛН, РасчетныеГоды);
		Для Каждого СтрокаТаблицы Из ДанныеФонда Цикл
			ЗаполнитьЗначенияСвойств(СреднийЗаработокСЭДО.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу с данными Фонда о доходах облагаемых взносами.
//
// Параметры:
//   ФизическоеЛицо      - СправочникСсылка.ФизическиеЛица
//   ГоловнаяОрганизация - СправочникСсылка.Организации
//   НомерЛН             - Строк
//   РасчетныеГоды       - Массив из Число
//
// Возвращаемое значение:
//   ТаблицаЗначений - См. табличную часть СреднийЗаработокСЭДО документа БольничныйЛист.
//
Функция СреднийЗаработокПоДаннымФонда(ФизическоеЛицо, ГоловнаяОрганизация, НомерЛН, РасчетныеГоды) Экспорт
	МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Результат = КоллекцииБЗК.ТаблицаЗначенийПоМетаданным(МетаданныеДокумента.ТабличныеЧасти.СреднийЗаработокСЭДО);
	Если РасчетныеГоды.Количество() = 0
		Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДобавитьСреднийИзВходящиегоЗапросаФонда(Результат, ФизическоеЛицо, ГоловнаяОрганизация, НомерЛН, РасчетныеГоды);
	ДобавитьСреднийПоДаннымУчетаФонда(Результат, ФизическоеЛицо, ГоловнаяОрганизация, НомерЛН, РасчетныеГоды);
	
	Возврат Результат;
КонецФункции

Процедура ДобавитьСреднийИзВходящиегоЗапросаФонда(Результат, ФизическоеЛицо, ГоловнаяОрганизация, НомерЛН, РасчетныеГоды)
	Если Не ЗначениеЗаполнено(НомерЛН) Или Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
	|	ВходящийЗапросФССДляРасчетаПособия.ПервыйРасчетныйГод КАК ПервыйРасчетныйГод,
	|	ВходящийЗапросФССДляРасчетаПособия.ПервыйРасчетныйГодЗаработок КАК ПервыйРасчетныйГодЗаработок,
	|	ВходящийЗапросФССДляРасчетаПособия.ПервыйРасчетныйГодВидЗаработка КАК ПервыйРасчетныйГодВидЗаработка,
	|	ВходящийЗапросФССДляРасчетаПособия.ВторойРасчетныйГод КАК ВторойРасчетныйГод,
	|	ВходящийЗапросФССДляРасчетаПособия.ВторойРасчетныйГодЗаработок КАК ВторойРасчетныйГодЗаработок,
	|	ВходящийЗапросФССДляРасчетаПособия.ВторойРасчетныйГодВидЗаработка КАК ВторойРасчетныйГодВидЗаработка,
	|	ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|		ПО СведенияОбЭЛН.ВходящийЗапрос = ВходящийЗапросФССДляРасчетаПособия.Ссылка
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	ВходящиеЗапросы = Запрос.Выполнить().Выгрузить();
	Для Каждого ВходящийЗапрос Из ВходящиеЗапросы Цикл
		Если РасчетныеГоды.Найти(ВходящийЗапрос.ПервыйРасчетныйГод) <> Неопределено Тогда
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.РасчетныйГод     = ВходящийЗапрос.ПервыйРасчетныйГод;
			СтрокаРезультата.ИсточникСреднего = Перечисления.ИсточникиСреднегоДляПособий.ВходящийЗапросФонда;
			СтрокаРезультата.Заработок        = ВходящийЗапрос.ПервыйРасчетныйГодЗаработок;
			СтрокаРезультата.Основание        = ВходящийЗапрос.Ссылка;
			СтрокаРезультата.Идентификатор    = ВходящийЗапрос.ИдентификаторСообщения;
			СтрокаРезультата.ВидЗаработка     = ВходящийЗапрос.ПервыйРасчетныйГодВидЗаработка;
			СтрокаРезультата.Период           = ПериодСреднегоПоДаннымФонда(СтрокаРезультата.РасчетныйГод);
		КонецЕсли;
		Если РасчетныеГоды.Найти(ВходящийЗапрос.ВторойРасчетныйГод) <> Неопределено Тогда
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.РасчетныйГод     = ВходящийЗапрос.ВторойРасчетныйГод;
			СтрокаРезультата.ИсточникСреднего = Перечисления.ИсточникиСреднегоДляПособий.ВходящийЗапросФонда;
			СтрокаРезультата.Заработок        = ВходящийЗапрос.ВторойРасчетныйГодЗаработок;
			СтрокаРезультата.Основание        = ВходящийЗапрос.Ссылка;
			СтрокаРезультата.Идентификатор    = ВходящийЗапрос.ИдентификаторСообщения;
			СтрокаРезультата.ВидЗаработка     = ВходящийЗапрос.ВторойРасчетныйГодВидЗаработка;
			СтрокаРезультата.Период           = ПериодСреднегоПоДаннымФонда(СтрокаРезультата.РасчетныйГод);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьСреднийПоДаннымУчетаФонда(Результат, ФизическоеЛицо, ГоловнаяОрганизация, НомерЛН, РасчетныеГоды)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СреднийЗаработокОбщийСЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СреднийЗаработокОбщийСЭДО.РасчетныйГод КАК РасчетныйГод,
	|	СреднийЗаработокОбщийСЭДО.ЗаработокПоВсем КАК ЗаработокПоВсем,
	|	СреднийЗаработокОбщийСЭДО.ЗаработокПоВсемГПХ КАК ЗаработокПоВсемГПХ,
	|	СреднийЗаработокОбщийСЭДО.Регистратор КАК Регистратор,
	|	СреднийЗаработокОбщийСЭДО.СНИЛС КАК СНИЛС,
	|	СреднийЗаработокСЭДО.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.СреднийЗаработокОбщийСЭДО.СрезПоследних(
	|			,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И РасчетныйГод В (&РасчетныеГоды)) КАК СреднийЗаработокОбщийСЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СреднийЗаработокСЭДО КАК СреднийЗаработокСЭДО
	|		ПО СреднийЗаработокОбщийСЭДО.Регистратор = СреднийЗаработокСЭДО.Ссылка
	|ГДЕ
	|	СреднийЗаработокОбщийСЭДО.ФизическоеЛицо = &ФизическоеЛицо
	|	И СреднийЗаработокОбщийСЭДО.РасчетныйГод В(&РасчетныеГоды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СреднийЗаработокСтрахователейСЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СреднийЗаработокСтрахователейСЭДО.РасчетныйГод КАК РасчетныйГод,
	|	СреднийЗаработокСтрахователейСЭДО.Страхователь КАК Страхователь,
	|	СреднийЗаработокСтрахователейСЭДО.ЗаработокПоТекущему КАК ЗаработокПоТекущему,
	|	СреднийЗаработокСтрахователейСЭДО.ЗаработокПоТекущемуГПХ КАК ЗаработокПоТекущемуГПХ,
	|	СреднийЗаработокСтрахователейСЭДО.Регистратор КАК Регистратор,
	|	СреднийЗаработокСтрахователейСЭДО.СНИЛС КАК СНИЛС,
	|	СреднийЗаработокСЭДО.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.СреднийЗаработокСтрахователейСЭДО.СрезПоследних(
	|			,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И РасчетныйГод В (&РасчетныеГоды)) КАК СреднийЗаработокСтрахователейСЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО СреднийЗаработокСтрахователейСЭДО.Страхователь = Организации.Ссылка
	|			И (Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СреднийЗаработокСЭДО КАК СреднийЗаработокСЭДО
	|		ПО СреднийЗаработокСтрахователейСЭДО.Регистратор = СреднийЗаработокСЭДО.Ссылка
	|ГДЕ
	|	СреднийЗаработокСтрахователейСЭДО.ФизическоеЛицо = &ФизическоеЛицо
	|	И СреднийЗаработокСтрахователейСЭДО.РасчетныйГод В(&РасчетныеГоды)";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("РасчетныеГоды", РасчетныеГоды);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	СреднийПоВсем          = РезультатыЗапроса[0].Выгрузить();
	СреднийПоСтрахователям = РезультатыЗапроса[1].Выгрузить();
	
	Для Каждого РасчетныйГод Из РасчетныеГоды Цикл
		Найденные = СреднийПоВсем.НайтиСтроки(Новый Структура("РасчетныйГод", РасчетныйГод));
		Для Каждого СтрокаПоВсем Из Найденные Цикл
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.РасчетныйГод     = РасчетныйГод;
			СтрокаРезультата.ИсточникСреднего = Перечисления.ИсточникиСреднегоДляПособий.УчетФонда;
			СтрокаРезультата.Заработок        = СтрокаПоВсем.ЗаработокПоВсем;
			СтрокаРезультата.Основание        = СтрокаПоВсем.Регистратор;
			СтрокаРезультата.Идентификатор    = СтрокаПоВсем.ИдентификаторСообщения;
			СтрокаРезультата.ВидЗаработка     = Перечисления.СпособыУчетаГодовогоЗаработкаСФР.ВсеСтрахователи;
			СтрокаРезультата.Период           = ПериодСреднегоПоДаннымФонда(СтрокаРезультата.РасчетныйГод);
		КонецЦикла;
		Фильтр = Новый Структура("РасчетныйГод, ГоловнаяОрганизация", РасчетныйГод, ГоловнаяОрганизация);
		Копия = СреднийПоСтрахователям.Скопировать(Фильтр);
		Если Копия.Количество() > 0 Тогда
			Регистраторы = КоллекцииБЗК.УникальныеЗначенияКолонки(Копия, "Регистратор");
			Идентификаторы = КоллекцииБЗК.УникальныеЗначенияКолонки(Копия, "ИдентификаторСообщения");
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.РасчетныйГод     = РасчетныйГод;
			СтрокаРезультата.ИсточникСреднего = Перечисления.ИсточникиСреднегоДляПособий.УчетФонда;
			СтрокаРезультата.Заработок        = Копия.Итог("ЗаработокПоТекущему");
			СтрокаРезультата.Основание        = Регистраторы[0];
			СтрокаРезультата.Идентификатор    = Идентификаторы[0];
			СтрокаРезультата.ВидЗаработка     = Перечисления.СпособыУчетаГодовогоЗаработкаСФР.ТекущийСтрахователь;
			СтрокаРезультата.Период           = ПериодСреднегоПоДаннымФонда(СтрокаРезультата.РасчетныйГод);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает значение поля Период для строки среднего заработка по данным Фонда.
Функция ПериодСреднегоПоДаннымФонда(РасчетныйГод)
	Возврат Дата(РасчетныйГод, 1, 1);
КонецФункции

// Выполняет упаковку данных среднего заработка ФСС формы документа для передачи в форму редактирования.
//
Процедура ЗаполнитьТаблицыДанныхСреднегоЗаработкаФССПоДокументу(ДанныеФормыОбъект, ПараметрыРедактирования) Экспорт
	
	// Переносим содержимое табличных частей в таблицы значений и помещаем последние во временное хранилище
	// - начисления.
	ДанныеНачислений = ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.СреднийЗаработокФСС, ДанныеНачислений);
	ПараметрыРедактирования.ДанныеОНачислениях = ПоместитьВоВременноеХранилище(ДанныеНачислений);
	
	// - отработанное время
	ОтработанноеВремя = ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ОтработанноеВремяДляСреднегоФСС, ОтработанноеВремя);
	ПараметрыРедактирования.ДанныеОВремени = ПоместитьВоВременноеХранилище(ОтработанноеВремя);
		
    // - данные страхователей
	Если Не ПараметрыРедактирования.Свойство("РасчетУвольнения") И ДанныеФормыОбъект.УчитыватьЗаработокПредыдущихСтрахователей Тогда	
		ДанныеСтрахователей = УчетПособийСоциальногоСтрахования.ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.СреднийЗаработокДанныеСтрахователей, ДанныеСтрахователей);
		ПараметрыРедактирования.ДанныеСтрахователей = ПоместитьВоВременноеХранилище(ДанныеСтрахователей);
	КонецЕсли;
	
	// Периоды отсутствия.
	ПериодыОтсутствий = ПустаяТаблицаПериодыБолезниУходаЗаДетьми();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ПериодыБолезниУходаЗаДетьми, ПериодыОтсутствий);
	ПараметрыРедактирования.ПериодыОтсутствий = ПоместитьВоВременноеХранилище(ПериодыОтсутствий);
	
КонецПроцедуры

// Процедура выполняет удаление в таблице данных о начислениях
//  избыточных с точки зрения применения данных.
// Например, для порядка расчета Постановление2010
//  не имеет смысла регистрация данных с начала января 2013 года.
//
// Параметры:
//	- ДанныеОНачислениях - таблица значений с данными о начислениях для
//  	расчета среднего заработка.
//
Процедура УдалитьИзбыточныеДанныеРасчетаСреднегоЗаработкаФСС(ДанныеОНачислениях)
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеОНачислениях Цикл
		Если СтрокаТаблицы.Месяц >= Дата(2013, 1, 1)
			И СтрокаТаблицы.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010 Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ДанныеОНачислениях.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу ВТИсходныеДанные
// в которых дополняет таблицу сотрудников (с полями Сотрудник, ДатаНачалаСобытия)
// колонками (и строками), достаточными для получения данных для расчета среднего заработка.
// Для каждого сотрудника создает отдельные строки для каждого месяца, входящего в период расчета среднего заработка.
//
Процедура СоздатьВТИсходныеДанныеПоСотруднику(МенеджерВременныхТаблиц, Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ОтборМесяцев = Неопределено)
	
	ИсходныеДанные = ПустаяТаблицаИсходныхДанныхРасчетаСреднегоЗаработкаФСС();
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.НачалоПериода = НачалоПериода;
	НоваяСтрока.ОкончаниеПериода = ОкончаниеПериода;
	НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
	
	СоздатьВТИсходныеДанные(МенеджерВременныхТаблиц, ИсходныеДанные, ОтборМесяцев);
	
КонецПроцедуры

// Функция составляет массив правил расчета среднего ФСС,
// отличных от указанного.
//
// Параметры:
//	- ПорядокРасчета, тип ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС.
//
Функция ДругиеПорядкиРасчетаСреднегоФСС(ПорядокРасчета) Экспорт
	
	ДругиеПорядкиРасчета = Новый Массив;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.ЗначенияПеречисления Цикл
		Если Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС[ЗначениеПеречисления.Имя] = ПорядокРасчета Тогда
			Продолжить;
		КонецЕсли;
		ДругиеПорядкиРасчета.Добавить(Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС[ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	Возврат ДругиеПорядкиРасчета;
	
КонецФункции

// Функция создает таблицу значения,
//  добавляет и заполняет в ней единственную строку по указанным параметрам.
//
Функция ТаблицаРасчетаСреднегоФСС(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета)
	
	ИсходныеДанные = ПустаяТаблицаИсходныхДанныхРасчетаСреднегоЗаработкаФСС();
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.НачалоПериода = НачалоПериода;
	НоваяСтрока.ОкончаниеПериода = ОкончаниеПериода;
	НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Формирует таблицу ВТИсходныеДанные
// в которых дополняет таблицу сотрудников (с полями Сотрудник, ДатаНачалаСобытия)
// колонками (и строками), достаточными для получения данных для расчета среднего заработка.
// Для каждого сотрудника создает отдельные строки для каждого месяца, входящего в период расчета среднего заработка.
//
Процедура СоздатьВТИсходныеДанные(МенеджерВременныхТаблиц, ИсходныеДанные, ОтборМесяцев = Неопределено)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСотрудники.Сотрудник,
	|	ТаблицаСотрудники.НачалоПериода КАК Начало,
	|	ТаблицаСотрудники.ОкончаниеПериода КАК Окончание,
	|	ТаблицаСотрудники.ОкончаниеПериода КАК Период,
	|	ТаблицаСотрудники.ПорядокРасчета
	|ПОМЕСТИТЬ ВТТаблицаСотрудники
	|ИЗ
	|	&ТаблицаСотрудники КАК ТаблицаСотрудники";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудники", ИсходныеДанные);
	Запрос.Выполнить();
	
	// Запрашиваем КадровыйУчет для получения кадровых данных сотрудников.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		"ВТТаблицаСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо, ГоловнаяОрганизация, ДатаПриема");
		
	// Находим граничные даты по всей таблице.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаСотрудники.Начало) КАК Начало,
	|	МАКСИМУМ(ТаблицаСотрудники.Окончание) КАК Окончание
	|ИЗ
	|	ВТТаблицаСотрудники КАК ТаблицаСотрудники";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Создаем таблицу ВТПериоды с месяцами.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Выборка.Начало, Выборка.Окончание);
		
	// Формируем таблицу исходных данных.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо,
	|	Сотрудники.ГоловнаяОрганизация,
	|	Периоды.Период,
	|	ТаблицаСотрудники.ПорядокРасчета
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	ВТТаблицаСотрудники КАК ТаблицаСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = ТаблицаСотрудники.Сотрудник)
	|			И (Сотрудники.Период = ТаблицаСотрудники.Период)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (Периоды.Период МЕЖДУ ТаблицаСотрудники.Начало И ТаблицаСотрудники.Окончание)
	|			И (Периоды.Период В (&ОтборМесяцев)
	|				ИЛИ &БезОтбораПоМесяцам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудники.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	Запрос.УстановитьПараметр("ОтборМесяцев", ОтборМесяцев);
	Запрос.УстановитьПараметр("БезОтбораПоМесяцам", ОтборМесяцев = Неопределено);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Ожидает ВТИсходныеДанные с полями ФизическоеЛицо, ГоловнаяОрганизация, Период.
// Формирует таблицу ВТДанныеСтрахователей.
//
Процедура СоздатьВТДанныеСтрахователей(МенеджерВременныхТаблиц)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсходныеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ГОД(ИсходныеДанные.Период) КАК Год
	|ПОМЕСТИТЬ ВТИсходныеДанныеПоГодам
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтрахователейОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСтрахователейОбороты.Год КАК Год,
	|	ДанныеСтрахователейОбороты.Страхователь КАК Страхователь,
	|	СУММА(ДанныеСтрахователейОбороты.Сумма) КАК Сумма,
	|	СУММА(ДанныеСтрахователейОбороты.ДнейБолезниУходаЗаДетьми) КАК ДнейБолезниУходаЗаДетьми
	|ПОМЕСТИТЬ ВТДанныеСтрахователей
	|ИЗ
	|	РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС КАК ДанныеСтрахователейОбороты
	|ГДЕ
	|	(ДанныеСтрахователейОбороты.ФизическоеЛицо, ДанныеСтрахователейОбороты.ГоловнаяОрганизация, ДанныеСтрахователейОбороты.Год) В
	|			(ВЫБРАТЬ
	|				ВТИсходныеДанныеПоГодам.ФизическоеЛицо,
	|				ВТИсходныеДанныеПоГодам.ГоловнаяОрганизация,
	|				ВТИсходныеДанныеПоГодам.Год
	|			ИЗ
	|				ВТИсходныеДанныеПоГодам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСтрахователейОбороты.ФизическоеЛицо,
	|	ДанныеСтрахователейОбороты.Год,
	|	ДанныеСтрахователейОбороты.Страхователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДанныеСтрахователей = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПереименоватьКолонкуПериодВМесяц(ТаблицаЗначений)
	
	КолонкаПериод = ТаблицаЗначений.Колонки.Найти("Период");
	
	Если КолонкаПериод <> Неопределено Тогда
		КолонкаПериод.Имя = "Месяц";
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет преобразование сведений об общем среднем заработке
//  в сведения по правилам ФСС.
//
Функция СведенияСреднегоЗаработкаФССПоКорректировкамОбщегоЗаработка(КорректировкиНачисленийОбщий, КорректировкиВремениОбщий)
	
	КорректировкиЗаработкаФСС = Новый Структура;
	
	Если КорректировкиНачисленийОбщий.Количество() > 0 Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Перенос выполняем только тех сведений,
		// для которых в учете среднего заработка ФСС нет «собственных» корректировок.
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КорректировкиНачисленийОбщий.Сотрудник КАК Сотрудник,
			|	КорректировкиНачисленийОбщий.Месяц КАК Период,
			|	КорректировкиНачисленийОбщий.Год КАК Год,
			|	КорректировкиНачисленийОбщий.ПорядокРасчета КАК ПорядокРасчета,
			|	КорректировкиНачисленийОбщий.СтатьяФинансирования КАК СтатьяФинансирования,
			|	КорректировкиНачисленийОбщий.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	КорректировкиНачисленийОбщий.СтатьяРасходов КАК СтатьяРасходов,
			|	КорректировкиНачисленийОбщий.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|	КорректировкиНачисленийОбщий.Сумма КАК Сумма
			|ПОМЕСТИТЬ ВТКорректировкиНачисленийОбщий
			|ИЗ
			|	&КорректировкиНачисленийОбщий КАК КорректировкиНачисленийОбщий";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КорректировкиНачисленийОбщий", КорректировкиНачисленийОбщий);
		Запрос.Выполнить();
		
		// Запрашиваем КадровыйУчет для получения кадровых данных сотрудников.
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			"ВТКорректировкиНачисленийОбщий");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо, ГоловнаяОрганизация");
			
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Корректировки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Корректировки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Корректировки.Сотрудник КАК Сотрудник,
			|	Корректировки.Месяц КАК Месяц,
			|	Корректировки.СтатьяФинансирования КАК СтатьяФинансирования,
			|	Корректировки.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	Корректировки.СтатьяРасходов КАК СтатьяРасходов,
			|	Корректировки.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|	Корректировки.ПорядокРасчета КАК ПорядокРасчета,
			|	СУММА(Корректировки.Сумма) КАК Сумма,
			|	Корректировки.ДанныеИзУчетаСреднегоОбщий КАК ДанныеИзУчетаСреднегоОбщий
			|ПОМЕСТИТЬ ВТКорректировкиСреднегоФСС
			|ИЗ
			|	(ВЫБРАТЬ
			|		Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|		Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|		КорректировкиНачисленийОбщий.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА КорректировкиНачисленийОбщий.Период = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 12, 1), ГОД, КорректировкиНачисленийОбщий.Год - 1)
			|			ИНАЧЕ КорректировкиНачисленийОбщий.Период
			|		КОНЕЦ КАК Месяц,
			|		КорректировкиНачисленийОбщий.СтатьяФинансирования КАК СтатьяФинансирования,
			|		КорректировкиНачисленийОбщий.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|		КорректировкиНачисленийОбщий.СтатьяРасходов КАК СтатьяРасходов,
			|		КорректировкиНачисленийОбщий.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|		ПорядокРасчетаСреднегоЗаработкаФСС.Ссылка КАК ПорядокРасчета,
			|		КорректировкиНачисленийОбщий.Сумма КАК Сумма,
			|		ИСТИНА КАК ДанныеИзУчетаСреднегоОбщий
			|	ИЗ
			|		ВТКорректировкиНачисленийОбщий КАК КорректировкиНачисленийОбщий
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК Сотрудники
			|			ПО (Сотрудники.Сотрудник = КорректировкиНачисленийОбщий.Сотрудник)
			|				И (Сотрудники.Период = КорректировкиНачисленийОбщий.Период)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС КАК ПорядокРасчетаСреднегоЗаработкаФСС
			|			ПО (ИСТИНА)
			|	ГДЕ
			|		КорректировкиНачисленийОбщий.ПорядокРасчета = &ПорядокРасчетаОбщий) КАК Корректировки
			|
			|СГРУППИРОВАТЬ ПО
			|	Корректировки.ФизическоеЛицо,
			|	Корректировки.ГоловнаяОрганизация,
			|	Корректировки.Сотрудник,
			|	Корректировки.Месяц,
			|	Корректировки.СтатьяФинансирования,
			|	Корректировки.СпособОтраженияЗарплатыВБухучете,
			|	Корректировки.СтатьяРасходов,
			|	Корректировки.ОблагаетсяЕНВД,
			|	Корректировки.ПорядокРасчета,
			|	Корректировки.ДанныеИзУчетаСреднегоОбщий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиФСС.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КорректировкиФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	КорректировкиФСС.Месяц КАК Месяц
			|ПОМЕСТИТЬ ВТСуществующиеЗаписи
			|ИЗ
			|	ВТКорректировкиСреднегоФСС КАК КорректировкиФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК СведенияОНачислениях
			|		ПО (СведенияОНачислениях.ФизическоеЛицо = КорректировкиФСС.ФизическоеЛицо)
			|			И (СведенияОНачислениях.ГоловнаяОрганизация = КорректировкиФСС.ГоловнаяОрганизация)
			|			И (СведенияОНачислениях.Месяц = КорректировкиФСС.Месяц)
			|			И (СведенияОНачислениях.ДанныеИзУчетаСреднегоОбщий = ЛОЖЬ)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиФСС.ФизическоеЛицо,
			|	КорректировкиФСС.ГоловнаяОрганизация,
			|	КорректировкиФСС.Месяц
			|ИЗ
			|	ВТКорректировкиСреднегоФСС КАК КорректировкиФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеНачислений
			|		ПО (ДанныеНачислений.ФизическоеЛицо = КорректировкиФСС.ФизическоеЛицо)
			|			И (ДанныеНачислений.ГоловнаяОрганизация = КорректировкиФСС.ГоловнаяОрганизация)
			|			И (ДанныеНачислений.Период = КорректировкиФСС.Месяц)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкиФСС.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КорректировкиФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	КорректировкиФСС.Сотрудник КАК Сотрудник,
			|	КорректировкиФСС.Месяц КАК Месяц,
			|	КорректировкиФСС.СтатьяФинансирования КАК СтатьяФинансирования,
			|	КорректировкиФСС.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	КорректировкиФСС.СтатьяРасходов КАК СтатьяРасходов,
			|	КорректировкиФСС.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|	КорректировкиФСС.ПорядокРасчета КАК ПорядокРасчета,
			|	КорректировкиФСС.Сумма КАК Сумма,
			|	ИСТИНА КАК ДанныеИзУчетаСреднегоОбщий
			|ИЗ
			|	ВТКорректировкиСреднегоФСС КАК КорректировкиФСС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеЗаписи КАК СуществующиеЗаписи
			|		ПО (СуществующиеЗаписи.ФизическоеЛицо = КорректировкиФСС.ФизическоеЛицо)
			|			И (СуществующиеЗаписи.ГоловнаяОрганизация = КорректировкиФСС.ГоловнаяОрганизация)
			|			И (СуществующиеЗаписи.Месяц = КорректировкиФСС.Месяц)
			|ГДЕ
			|	СуществующиеЗаписи.Месяц ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ПорядокРасчетаОбщий", КорректировкиНачисленийОбщий[0]["ПорядокРасчета"]);
		
		КорректировкиЗаработкаФСС.Вставить("КорректировкиНачислений", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Если КорректировкиВремениОбщий.Количество() > 0 Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КорректировкиВремениОбщий.Сотрудник,
			|	КорректировкиВремениОбщий.Месяц КАК Период,
			|	КорректировкиВремениОбщий.ПорядокРасчета,
			|	КорректировкиВремениОбщий.ОтработаноДнейКалендарных
			|ПОМЕСТИТЬ ВТКорректировкиВремениОбщий
			|ИЗ
			|	&КорректировкиВремениОбщий КАК КорректировкиВремениОбщий";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КорректировкиВремениОбщий", КорректировкиВремениОбщий);
		Запрос.Выполнить();
		
		// Запрашиваем КадровыйУчет для получения кадровых данных сотрудников.
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			"ВТКорректировкиВремениОбщий");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо, ГоловнаяОрганизация");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация,
			|	КорректировкиВремениОбщий.Сотрудник,
			|	КорректировкиВремениОбщий.Период КАК Месяц,
			|	КорректировкиВремениОбщий.ОтработаноДнейКалендарных
			|ПОМЕСТИТЬ ВТКорректировкиВремениФСС
			|ИЗ
			|	ВТКорректировкиВремениОбщий КАК КорректировкиВремениОбщий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК Сотрудники
			|		ПО (Сотрудники.Сотрудник = КорректировкиВремениОбщий.Сотрудник)
			|			И (Сотрудники.Период = КорректировкиВремениОбщий.Период)
			|ГДЕ
			|	КорректировкиВремениОбщий.ПорядокРасчета = &ПорядокРасчетаОбщий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиВремениФСС.Сотрудник,
			|	КорректировкиВремениФСС.Месяц
			|ПОМЕСТИТЬ ВТСуществующиеЗаписи
			|ИЗ
			|	ВТКорректировкиВремениФСС КАК КорректировкиВремениФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК СведенияОВремени
			|		ПО (СведенияОВремени.Сотрудник = КорректировкиВремениФСС.Сотрудник)
			|			И (СведенияОВремени.Месяц = КорректировкиВремениФСС.Месяц)
			|			И (СведенияОВремени.ДанныеИзУчетаСреднегоОбщий = ЛОЖЬ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкиВремениФСС.ФизическоеЛицо,
			|	КорректировкиВремениФСС.ГоловнаяОрганизация,
			|	КорректировкиВремениФСС.Сотрудник,
			|	КорректировкиВремениФСС.Месяц,
			|	КорректировкиВремениФСС.ОтработаноДнейКалендарных,
			|	ИСТИНА КАК ДанныеИзУчетаСреднегоОбщий
			|ИЗ
			|	ВТКорректировкиВремениФСС КАК КорректировкиВремениФСС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеЗаписи КАК СуществующиеЗаписи
			|		ПО (СуществующиеЗаписи.Сотрудник = КорректировкиВремениФСС.Сотрудник)
			|			И (СуществующиеЗаписи.Месяц = КорректировкиВремениФСС.Месяц)
			|ГДЕ
			|	СуществующиеЗаписи.Месяц ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ПорядокРасчетаОбщий", КорректировкиВремениОбщий[0]["ПорядокРасчета"]);
		
		КорректировкиЗаработкаФСС.Вставить("КорректировкиВремени", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Возврат КорректировкиЗаработкаФСС;
	
КонецФункции

#КонецОбласти

#Область ЗаполненностьСреднегоЗаработкаВФормах

// Функция формирует структуру информационных сведений о заполненности данных
//  для расчета общего среднего заработка сотрудника.
//
// Параметры:
//	Ссылка				- ДокументСсылка на документ а котором рассчитывается средний заработок
//	ЗаполнениеВыполнено	- Булево, Истина, если в документе произведено заполнение расчета среднего заработка
// 	Сотрудник
//	НачалоРасчета - дата начала периода расчета среднего заработка.
//	ОкончаниеРасчета - дата окончания периода расчета среднего заработка.
//	ДанныеНачислений - данные формы табличной части начислений общего среднего заработка.
//	ДанныеОВремени - данные формы табличной части времени общего среднего заработка.
//	УчитыватьДанныеОВремени - булево, необходимость проверки заполненности данных о времени.
//	ЭтоПорядокРасчета2011 - булево, расчет среднего заработка по правилам 2011 года.
//	РасчетныеГоды - массив лет для формирования надписи.
//
Функция ИнформацияОЗаполненностиДанныхСреднегоЗаработка(Ссылка, ЗаполнениеВыполнено, ПараметрыРасчетаСреднегоЗаработка, СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок) Экспорт
	
	Если УчетСреднегоЗаработка.ТребуетсяПерезаполнитьСведенияОСреднемЗаработке(Ссылка, ЗаполнениеВыполнено) Тогда
		
		Результат = УчетСреднегоЗаработка.ИнфонадписьТребуетсяПерезаполнитьСведенияОСреднемЗаработке();
		
	ИначеЕсли ТребуетсяДозаполнитьСведенияОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка) Тогда
		
		Результат = УчетСреднегоЗаработка.ИнфонадписьТребуетсяДозаполнитьСведенияОСреднемЗаработке();
		
	Иначе
		
		Если ПараметрыРасчетаСреднегоЗаработка.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011 Тогда
			Результат = ИнфонадписьИспользованныеДанныеОСреднемЗаработкеФСС(ПараметрыРасчетаСреднегоЗаработка.РасчетныеГоды);
		Иначе
			Результат = УчетСреднегоЗаработка.ИнфонадписьИспользованныеДанныеОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаНачало, ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаОкончание);
		КонецЕсли;
		
		МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ(
			МинимальныйСреднедневнойЗаработок, 
			ПараметрыРасчетаСреднегоЗаработка.РайонныйКоэффициентРФ, 
			ПараметрыРасчетаСреднегоЗаработка.ДатаНачалаСобытия);
		
		Если ПредупредитьОРасчетеИзМинимальногоСреднего(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ) Тогда
			
			ПредупреждениеОРасчетеСреднегоИзМРОТ = ПредупреждениеОРасчетеСреднегоИзМРОТ(МинимальныйСреднедневнойЗаработокДляСравненияСМРОТ);
			
			Результат.Текст = Новый ФорматированнаяСтрока(ПредупреждениеОРасчетеСреднегоИзМРОТ, Символы.ПС, Результат.Текст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает структуру для заполнения надписи о заполненности данных для расчета
// среднего заработка сотрудника.
//
// Параметры:
//	РасчетныеГоды - массив лет для формирования надписи.
//
Функция ИнфонадписьИспользованныеДанныеОСреднемЗаработкеФСС(РасчетныеГоды)
	
	// Формируем представление годов вида 2009, 2010, 2011.
	ГодыПредставление = "";
	Для каждого РасчетныйГод Из РасчетныеГоды Цикл
		ГодыПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2, ",
		ГодыПредставление,
		Формат(РасчетныйГод, "ЧГ="));
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ГодыПредставление, 2);
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Использованы данные о заработке за %1 г.';
																					|en = 'Earnings data for %1 is used'"), ГодыПредставление);
	
	Картинка = БиблиотекаКартинок.Информация;
	
	Возврат УчетСреднегоЗаработка.ЗаполненнаяСтруктураИнфонадписиОСреднемЗаработке(ТекстСообщения, Картинка);
	
КонецФункции

Функция ТребуетсяДозаполнитьСведенияОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка)
	
	Возврат УчетСреднегоЗаработка.ТребуетсяДозаполнитьСведенияОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка.Сотрудник,
																ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаНачало,
																ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаОкончание,
																ПараметрыРасчетаСреднегоЗаработка.ДатаНачалаСобытия,
																ПараметрыРасчетаСреднегоЗаработка.ДанныеНачислений,
																ПараметрыРасчетаСреднегоЗаработка.ДанныеВремени,
																НЕ ПараметрыРасчетаСреднегоЗаработка.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011);

КонецФункции

Функция ПредупредитьОРасчетеИзМинимальногоСреднего(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок)
	
	Возврат СреднийДневнойЗаработок < МинимальныйСреднедневнойЗаработок;
	
КонецФункции

Функция ПредупреждениеОРасчетеСреднегоИзМРОТ(МинимальныйСреднедневнойЗаработок) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пособие рассчитывается с использованием среднедневного заработка из МРОТ: %1 р.';
			|en = 'The allowance is calculated using average daily earnings from minimum wage rate: %1'"),
		МинимальныйСреднедневнойЗаработок);
	
КонецФункции

#КонецОбласти

#Область КонструкторыТаблицСреднегоЗаработкаВФормах

Функция ДанныеДляРасчетаСреднегоЗаработкаФСС()
	
	ДанныеДляРасчета = Новый Структура(
		"ДанныеОНачислениях,
		|ДанныеОВремени,
		|ПериодыОтсутствий,
		|ДанныеСтрахователей");
		
	ДанныеДляРасчета.ДанныеОНачислениях = ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	ДанныеДляРасчета.ДанныеОВремени = ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	ДанныеДляРасчета.ПериодыОтсутствий = ПустаяТаблицаПериодыБолезниУходаЗаДетьми();
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаНачисленийСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Начисление", Метаданные.ОпределяемыеТипы.ВидыНачисленийСреднегоЗаработкаФСС.Тип);
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ТаблицаДанных.Колонки.Добавить("СпособУчета", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеФСС"));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаДанных.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ОтработанноеВремяДляСреднегоФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПустаяТаблицаИсходныхДанныхРасчетаСреднегоЗаработкаФСС()
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ИсходныеДанные.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПустаяТаблицаПериодыБолезниУходаЗаДетьми() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Дни", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ВидБолезниУходаЗаДетьми", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

Процедура РассчитатьОплатуДнейУходаЗаДетьмиИнвалидами(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц = Неопределено)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УникальныеГрафики = Новый Соответствие;
	
	Для Каждого РассчитываемаяСтрока Из СтрокиРасчета Цикл
		Если РассчитываемаяСтрока.ВремяВЧасах Тогда
			УникальныеГрафики.Вставить(РассчитываемаяСтрока.ОбщийГрафик);
		КонецЕсли;
	КонецЦикла;
	
	ОбщиеГрафики = ОбщегоНазначения.ВыгрузитьКолонку(УникальныеГрафики, "Ключ");
	
	СвойстваОбщихГрафиков = УчетРабочегоВремениРасширенный.СвойстваОбщихГрафиков(ОбщиеГрафики);
	
	Для Каждого РассчитываемаяСтрока Из СтрокиРасчета Цикл
		СреднийЗаработокОбщий = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "СреднийЗаработокОбщий");
		Если СреднийЗаработокОбщий = Неопределено Тогда
			СреднийЗаработокОбщий = 0;
		КонецЕсли;
		СреднийЗаработокИндексируемый = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "СреднийЗаработокИндексируемый");
		Если СреднийЗаработокИндексируемый = Неопределено Тогда
			СреднийЗаработокИндексируемый = 0;
		КонецЕсли;
		СреднийЗаработокНеиндексируемый = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "СреднийЗаработокНеиндексируемый");
		Если СреднийЗаработокНеиндексируемый = Неопределено Тогда
			СреднийЗаработокНеиндексируемый = 0;
		КонецЕсли;
		КоэффициентИндексацииСреднегоЗаработка = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "КоэффициентИндексацииСреднегоЗаработка");
		Если КоэффициентИндексацииСреднегоЗаработка = Неопределено Тогда
			КоэффициентИндексацииСреднегоЗаработка = 0;
		КонецЕсли;
		ВремяВДнях = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "ВремяВДнях");
		Если ВремяВДнях = Неопределено Тогда
			ВремяВДнях = 0;
		КонецЕсли;
		НормаДней = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "НормаДней");
		Если НормаДней = Неопределено Тогда
			НормаДней = 0;
		КонецЕсли;
		МРОТ = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "МРОТ");
		Если МРОТ = Неопределено Тогда
			МРОТ = 0;
		КонецЕсли;
		УчитыватьМРОТ = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(РассчитываемаяСтрока.Показатели, "УчитыватьМРОТ");
		Если УчитыватьМРОТ = Неопределено Тогда
			УчитыватьМРОТ = 0;
		КонецЕсли;
		
		Если РассчитываемаяСтрока.ВремяВЧасах = Истина Тогда
						
			СвойстваГрафика = СвойстваОбщихГрафиков[РассчитываемаяСтрока.ОбщийГрафик];
			
			Если СвойстваГрафика = Неопределено
				Или Не ЗначениеЗаполнено(СвойстваГрафика.ДлительностьРабочейНедели) Тогда
				
				ПродолжительностьДня = 8;
			Иначе
				ПродолжительностьДня = Мин(СвойстваГрафика.ДлительностьРабочейНедели/5, 8);
			КонецЕсли;
			
			Если РассчитываемаяСтрока.ФиксРасчетВремени Тогда
				ОплаченоЧасов = РассчитываемаяСтрока.ОплаченоЧасов;
			Иначе
				ОплаченоЧасов = ПродолжительностьДня * ВремяВДнях;
			КонецЕсли;
			
			РассчитываемаяСтрока.Результат = Макс(СреднийЗаработокОбщий * НормаДней * ПродолжительностьДня, УчитыватьМРОТ * МРОТ) / (НормаДней * ПродолжительностьДня) * КоэффициентИндексацииСреднегоЗаработка * ОплаченоЧасов;
			РассчитываемаяСтрока.ОплаченоЧасов = ОплаченоЧасов;
			Если ПолучитьФункциональнуюОпцию("ИндексироватьСреднийЗаработокЧастично") Тогда 
				РассчитываемаяСтрока.Результат = Макс((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаДней * ПродолжительностьДня, УчитыватьМРОТ * МРОТ) / (НормаДней * ПродолжительностьДня) * ОплаченоЧасов;
			КонецЕсли;
		Иначе
			РассчитываемаяСтрока.Результат = Макс(СреднийЗаработокОбщий * НормаДней, УчитыватьМРОТ * МРОТ) / НормаДней * КоэффициентИндексацииСреднегоЗаработка * ВремяВДнях;
			Если ПолучитьФункциональнуюОпцию("ИндексироватьСреднийЗаработокЧастично") Тогда 
				РассчитываемаяСтрока.Результат = Макс((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаДней, УчитыватьМРОТ * МРОТ) / НормаДней * ВремяВДнях;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция МетаданныеРегистровПодсистемы()
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.ПособияПоСоциальномуСтрахованию);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ПособияПоУходуЗаРебенком);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ПериодыУходаЗаБольнымиРодственниками);
	
	Возврат Регистры;
КонецФункции

// Возвращает данные о датах последнего получения пособий физическими лицами.
//
// Параметры:
//	ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица, СправочникСсылка.ФизическиеЛица -
//	  ссылка или массив ссылок проверяемых физических лиц.
//
// Возвращаемое значение: см. ЗащитаПерсональныхДанныхЗарплатаКадры.НоваяТаблицаДатПолученияДоходов
Функция МаксимальныеДатыПолученияПособий(ФизическиеЛица)
	
	ДанныеОДоходах = ЗащитаПерсональныхДанныхЗарплатаКадры.НоваяТаблицаДатПолученияДоходов();
	
	Если Не ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Возврат ДанныеОДоходах;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПособияПоСоциальномуСтрахованию.ФизическоеЛицо,
	|	ПособияПоСоциальномуСтрахованию.Организация КАК Организация,
	|	ПособияПоСоциальномуСтрахованию.Период КАК Дата
	|ИЗ
	|	РегистрНакопления.ПособияПоСоциальномуСтрахованию КАК ПособияПоСоциальномуСтрахованию
	|ГДЕ
	|	ПособияПоСоциальномуСтрахованию.ФизическоеЛицо В(&ФизическиеЛица)";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеОДоходах;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		НоваяСтрока = ДанныеОДоходах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

	Возврат ДанныеОДоходах;
	
КонецФункции

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	УчетПособийСоциальногоСтрахованияБазовый.ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.Макеты.ПФ_MXL_ПриказОПредоставленииДнейУхода,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДокументПриемНаРаботу

Процедура ПередЗаписьюДокументаПриемНаРаботу(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	УчетПособийСоциальногоСтрахования.ПередЗаписьюДокументаПриемНаРаботу(
		ДокументОбъект,
		Отказ,
		РежимЗаписи,
		РежимПроведения);
КонецПроцедуры

Процедура ПриЗаписиДокументаПриемНаРаботу(ДокументОбъект, Отказ) Экспорт
	УчетПособийСоциальногоСтрахования.ПриЗаписиДокументаПриемНаРаботу(ДокументОбъект, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ДокументПриемНаРаботуСписком

Функция ОписаниеРеквизитовДокументаПриемНаРаботуСписком()
	Возврат Новый Структура("ИменаРеквизитовШапки, ИменаТаблиц", "Организация, ВерсияДанных", "Сотрудники");
КонецФункции

Процедура ПередЗаписьюДокументаПриемНаРаботуСписком(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитовДоЗаписи = УчетПособийСоциальногоСтрахования.ЗначенияРеквизитовДоЗаписи(
		ДокументОбъект,
		ОписаниеРеквизитовДокументаПриемНаРаботуСписком());
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписиДокументаПриемНаРаботуСписком(ДокументОбъект, Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаЗапуска     = НСтр("ru = 'Обновление вторичных данных учета пособий';
								|en = 'Update secondary benefit accounting data'");
	ОписаниеРеквизитов = ОписаниеРеквизитовДокументаПриемНаРаботуСписком();
	ИмяМетода          = "УчетПособийСоциальногоСтрахованияРасширенный.ПриЗаписиДокументаПриемНаРаботуСпискомВФоне";
	УчетПособийСоциальногоСтрахования.ЗапуститьФоновыйПроцессПриЗаписиДокумента(ДокументОбъект, ПричинаЗапуска, ОписаниеРеквизитов, ИмяМетода);
	
КонецПроцедуры

Процедура ПриЗаписиДокументаПриемНаРаботуСпискомВФоне(Параметры, АдресХранилища) Экспорт
	Если Не УчетПособийСоциальногоСтрахования.ДождатьсяОкончанияЗаписиОбъекта(Параметры) Тогда
		Возврат; // Обновит очередь обработки кадровых данных, запуск которой был запланирован при записи регистров.
	КонецЕсли;
	
	ТаблицаОбновления = РегистрыСведений.ЗастрахованныеЛицаСЭДО.ПустаяТаблицаОбновления();
	
	ЗначенияРеквизитовПриЗаписи = Параметры.ЗначенияРеквизитовПриЗаписи;
	Если ЗначениеЗаполнено(ЗначенияРеквизитовПриЗаписи.Организация) Тогда
		Страхователь = СЭДОФСС.СтраховательОрганизации(ЗначенияРеквизитовПриЗаписи.Организация);
		Для Каждого СтрокаТаблицы Из ЗначенияРеквизитовПриЗаписи.Сотрудники Цикл
			СтрокаТаблицы = ТаблицаОбновления.Добавить();
			СтрокаТаблицы.ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
			СтрокаТаблицы.Страхователь   = Страхователь;
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияРеквизитовДоЗаписи = Параметры.ЗначенияРеквизитовДоЗаписи;
	Если ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.Организация) Тогда
		Страхователь = СЭДОФСС.СтраховательОрганизации(ЗначенияРеквизитовДоЗаписи.Организация);
		Для Каждого СтрокаТаблицы Из ЗначенияРеквизитовДоЗаписи.Сотрудники Цикл
			СтрокаТаблицы = ТаблицаОбновления.Добавить();
			СтрокаТаблицы.ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
			СтрокаТаблицы.Страхователь   = Страхователь;
		КонецЦикла;
	КонецЕсли;
	
	РегистрыСведений.ЗастрахованныеЛицаСЭДО.ОбновитьПоТаблице(ТаблицаОбновления, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
