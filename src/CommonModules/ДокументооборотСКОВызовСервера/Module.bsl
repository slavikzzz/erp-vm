#Область ПрограммныйИнтерфейс

Функция ИспользоватьВнешнийМодуль() Экспорт
	
	Возврат Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить();
	
КонецФункции

Функция ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами(ИндексСледующейОбработкиЭДО = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КонтекстИнициализирован", 	Ложь);
	Результат.Вставить("ИндексОбработкиЭДО", 		0);
	
	ИмяОбработки_ДокументооборотСКО = Неопределено;
	КонтекстЭДО						= Неопределено;
	ЭтоПерваяИтерация				= Истина;
	ИнициализироватьКонтекст 		= Истина;
	
	Пока ИнициализироватьКонтекст Цикл
		
		ИнициализироватьКонтекст = Ложь;
		
		Если ИндексСледующейОбработкиЭДО = Неопределено Тогда
			// определяем свободный индекс для формирования уникального имени при подключени новой внешней обработки,
			// поскольку подключение новой внешней обработки с тем же именем приводит к ошибкам в уже открытых формах
			// из подключенной раньше внешней обработки
			ИнформацияОбОбработкеЭДО = СоздатьВнешнююОбработкуЭДО();
			Результат.ИндексОбработкиЭДО = ?(ИнформацияОбОбработкеЭДО.ОбработкаЭДО = Неопределено,
				0, ИнформацияОбОбработкеЭДО.ИндексОбработкиЭДО + 1);
			
		Иначе
			Результат.ИндексОбработкиЭДО = ИндексСледующейОбработкиЭДО;
		КонецЕсли;
		ИндексОбработкиЭДОСтрокой = Формат(Результат.ИндексОбработкиЭДО, "ЧДЦ=; ЧГ=");
		
		ВнешниеОбъектыХранилище = Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль;
		ДвоичныеДанныеОбработки = ВнешниеОбъектыХранилище.Получить().Получить();
		Если ДвоичныеДанныеОбработки <> Неопределено Тогда
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
			Попытка
				МенеджерВнешнихОбработок = ВнешниеОбработки;
				ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
				ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
				
				ИмяОбработки_ДокументооборотСКО = МенеджерВнешнихОбработок.Подключить(
					Адрес,
					"Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой,
					Ложь,
					ОписаниеЗащиты);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					"Электронный документооборот с контролирующими органами.Подключение внешнего модуля",
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами:
									|%1
									|Будет использован модуль, встроенный в конфигурацию.';
									|en = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами:
									|%1
									|Будет использован модуль, встроенный в конфигурацию.'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ДвоичныеДанныеОбработки = Неопределено;
			КонецПопытки;
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;
		Если ДвоичныеДанныеОбработки = Неопределено И Результат.ИндексОбработкиЭДО > 0 Тогда
			Результат.ИндексОбработкиЭДО = Результат.ИндексОбработкиЭДО - 1;
			ИндексОбработкиЭДОСтрокой = Формат(Результат.ИндексОбработкиЭДО, "ЧДЦ=; ЧГ=");
		КонецЕсли;
		
		Попытка
			ОбъектОбработка = ВнешниеОбработки.Создать("Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой);
			ОбъектОбработка.ПутьКОбъекту = "ВнешняяОбработка.Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой;
			КонтекстЭДО = НЕ (ИмяОбработки_ДокументооборотСКО = Неопределено);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				"Электронный документооборот с контролирующими органами.Подключение внешнего модуля",
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ИмяОбработки_ДокументооборотСКО = Неопределено;
			КонтекстЭДО = Неопределено;
		КонецПопытки;
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Результат.КонтекстИнициализирован = КонтекстЭДО <> Неопределено;
	Возврат Результат;
	
КонецФункции

Функция ЕстьПравоНаДОсКО(ПравоНаВнешнюю) Экспорт 
	
	Если ПравоНаВнешнюю Тогда
		Возврат Истина;
		
	Иначе
		Возврат ПравоДоступа("Использование", Метаданные.Обработки.ДокументооборотСКонтролирующимиОрганами)
			ИЛИ ПривилегированныйРежим();
	КонецЕсли;
	
КонецФункции

Функция ЕстьДоступНаЧтение()
	
	Возврат ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль)
		И ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль)
		ИЛИ ПривилегированныйРежим();
	
КонецФункции
 
Функция ПодключатьВнешнююОбработкуЭДО() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Подключать", 			Ложь);
	Результат.Вставить("ИндексОбработкиЭДО", 	0);
	
	// если есть доступ
	Если ЕстьДоступНаЧтение() Тогда
		Если Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить() Тогда
			ИнформацияОбОбработкеЭДО = СоздатьВнешнююОбработкуЭДО();
			
			Если ИнформацияОбОбработкеЭДО.ОбработкаЭДО = Неопределено Тогда
				ИнформацияОбИнициализации = ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами(0);
				Результат.Подключать 			= ИнформацияОбИнициализации.КонтекстИнициализирован;
				Результат.ИндексОбработкиЭДО 	= ИнформацияОбИнициализации.ИндексОбработкиЭДО;
				
			Иначе
				Результат.Подключать 			= Истина;
				Результат.ИндексОбработкиЭДО 	= ИнформацияОбОбработкеЭДО.ИндексОбработкиЭДО;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьВнешнююОбработкуЭДО()
	
	Результат = Новый Структура;
	Результат.Вставить("ОбработкаЭДО", 			Неопределено);
	Результат.Вставить("ИндексОбработкиЭДО", 	0);
	
	ИндексСледующейОбработкиЭДО = 0;
	Пока Истина Цикл
		ИндексСледующейОбработкиЭДОСтрокой = Формат(ИндексСледующейОбработкиЭДО, "ЧДЦ=; ЧГ=");
		Попытка
			СледующаяОбработкаЭДО = ВнешниеОбработки.Создать("Обработка_ДокументооборотСКО"
				+ ИндексСледующейОбработкиЭДОСтрокой);
		Исключение
			СледующаяОбработкаЭДО = Неопределено;
		КонецПопытки;
		
		Если СледующаяОбработкаЭДО = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат.ОбработкаЭДО 			= СледующаяОбработкаЭДО;
		Результат.ИндексОбработкиЭДО 	= ИндексСледующейОбработкиЭДО;
		
		ИндексСледующейОбработкиЭДО = ИндексСледующейОбработкиЭДО + 1;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьПараметрыФормы(ПараметрыФормы, Параметры) Экспорт
	
	ВозможныеПредопределенныеПараметры = Новый Структура("ВыборГруппИЭлементов, ЗакрыватьПриВыборе, ЗакрыватьПриЗакрытииВладельца, КлючНазначенияИспользования, МножественныйВыбор, Отбор, ПараметрыФормы, ПараметрыФункциональныхОпций, РазрешитьВыборКорня, РежимВыбора, ТекущаяСтрока, ТолькоПросмотр, ФиксированныеНастройки");
	ЗаполнитьЗначенияСвойств(ВозможныеПредопределенныеПараметры, Параметры);
	Для Каждого ВозможныйПредопределенныйПараметр Из ВозможныеПредопределенныеПараметры Цикл
		Если ЗначениеЗаполнено(ВозможныйПредопределенныйПараметр.Значение) Тогда
			ПараметрыФормы.Добавить(ВозможныйПредопределенныйПараметр.Значение, ВозможныйПредопределенныйПараметр.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекущемуПользователюАОДоступен() Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиДокументооборота) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущиеУчетныеЗаписи = ДокументооборотСКО.ТекущиеУчетныеЗаписиНалогоплательщика();
	Если ТекущиеУчетныеЗаписи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиДокументооборота.Ссылка КАК УчетнаяЗапись
	|ПОМЕСТИТЬ УчетныеЗаписи
	|ИЗ
	|	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	|ГДЕ
	|	УчетныеЗаписиДокументооборота.Ссылка В(&ТекущиеУчетныеЗаписи)
	|	И НЕ УчетныеЗаписиДокументооборота.ОтключитьАвтообмен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(Организации.УчетнаяЗаписьОбмена КАК Справочник.УчетныеЗаписиДокументооборота) КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеЗаписи КАК УчетныеЗаписи
	|		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписи.УчетнаяЗапись
	|ГДЕ
	|	Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
	|	И НЕ Организации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТекущиеУчетныеЗаписи", ТекущиеУчетныеЗаписи);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТекущемуПользователюЭДОДоступен() Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущемуПользователюАОДоступен = ТекущемуПользователюАОДоступен();
	
	Если НЕ ТекущемуПользователюАОДоступен Тогда
		ТекущемуПользователюАОДоступен = ЕстьОрганизацииСНастройкамиСЭДОБезУчетныхЗаписей();
	КонецЕсли;
	
	Возврат ТекущемуПользователюАОДоступен;
	
КонецФункции

Функция ЕстьОрганизацииСНастройкамиСЭДОБезУчетныхЗаписей()
	
	ЕстьОрганизацииСНастройкамиСЭДОБезУчетныхЗаписей = Истина;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиДокументооборота) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиОбменаФСС = НастройкиОбменаФССДляТекущегоПользователя(Истина);
	
	Если НастройкиОбменаФСС.Количество() = 0 Тогда
		ЕстьОрганизацииСНастройкамиСЭДОБезУчетныхЗаписей = Ложь;
	КонецЕсли;
	
	Возврат ЕстьОрганизацииСНастройкамиСЭДОБезУчетныхЗаписей;
	
КонецФункции

Функция НастройкиОбменаФССДляТекущегоПользователя(БезУчетныхЗаписей1СОтчетности = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиОбменаФСС.Организация КАК Организация,
	               |	НастройкиОбменаФСС.ИспользоватьОбмен КАК ИспользоватьОбмен,
	               |	НастройкиОбменаФСС.ИспользоватьНесколько КАК ИспользоватьНесколько
	               |ПОМЕСТИТЬ ВТСписокОрганизаций
	               |ИЗ
	               |	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	               |		ПО (Организации.Ссылка = НастройкиОбменаФСС.Организация)
	               |ГДЕ
	               |	&УсловиеНаУчетнуюЗапись
	               |	И НастройкиОбменаФСС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |	И НастройкиОбменаФСС.ИспользоватьОбмен = ИСТИНА
	               |	И НЕ Организации.ПометкаУдаления
	               |	И &УсловиеПоОрганизации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТСписокОрганизаций.Организация КАК Организация,
	               |	ВТСписокОрганизаций.ИспользоватьОбмен КАК ИспользоватьОбмен,
	               |	ВТСписокОрганизаций.ИспользоватьНесколько КАК ИспользоватьНесколько
	               |ИЗ
	               |	ВТСписокОрганизаций КАК ВТСписокОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
	               |		ПО ВТСписокОрганизаций.Организация = НастройкиОбменаФСС.Организация
	               |			И (НастройкиОбменаФСС.Пользователь = &ТекущийПользователь)
	               |			И (НЕ НастройкиОбменаФСС.СертификатСтрахователяОтпечаток = """")
	               |ГДЕ
	               |	(ВТСписокОрганизаций.ИспользоватьНесколько = ЛОЖЬ
	               |			ИЛИ ВТСписокОрганизаций.ИспользоватьНесколько = ИСТИНА
	               |				И НЕ НастройкиОбменаФСС.Пользователь ЕСТЬ NULL)";
	
	Если ОбщегоНазначенияБРО.ИспользуетсяАрхив() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "НЕ Организации.ВАрхиве");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "Истина");
	КонецЕсли;
	Если БезУчетныхЗаписей1СОтчетности Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаУчетнуюЗапись",
			"(Организации.УчетнаяЗаписьОбмена = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиДокументооборота.ПустаяСсылка)
			|ИЛИ НЕ Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате))");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УсловиеНаУчетнуюЗапись", Истина);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВыбранныйCSPИзВременныхНастроек() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		,,
		
	);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Отчет, ОрганизацияОтчета, КонтролирующийОрган, ПараметрыПрорисовкиКнопокОтправки, ПараметрыПрорисовкиПанели) Экспорт
	
	// прорисовываем кнопки отправки
	ПараметрыПрорисовкиКнопокОтправки 	= ПараметрыПрорисовкиКнопокОтправки(ОрганизацияОтчета, КонтролирующийОрган, Отчет);
	// прорисовываем панель отправки
	ПараметрыПрорисовкиПанели 			= ПараметрыПрорисовкиПанелиОтправки(Отчет, ОрганизацияОтчета, КонтролирующийОрган);
	
КонецПроцедуры

Функция ПараметрыПрорисовкиКнопокОтправки(ОрганизацияОтчета, КонтролирующийОрган, Отчет = Неопределено) Экспорт
	
	ПараметрыПрорисовкиКнопокОтправки = Новый Структура;
	
	Попытка
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ГруппаОтправкаВКонтролирующийОрган", Истина);
		
		СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияОтчета,
			"ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		// прорисовываем кнопки отправки
		ПредназначенаДляДокументооборотаСКонтролирующимОрганом = Истина;
		УчетнаяЗаписьДокументооборота = СвойстваОрганизации.УчетнаяЗаписьОбмена;
		
		ДокументооборотНастроенВУнивесальномФормате = 
			СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате")
			И ЗначениеЗаполнено(УчетнаяЗаписьДокументооборота);
		
		Если ДокументооборотНастроенВУнивесальномФормате Тогда
			
			Если (КонтролирующийОрган = "ФНС" И УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗаписьДокументооборота) <> Истина)
				ИЛИ (КонтролирующийОрган = "ПФР" И УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗаписьДокументооборота) <> Истина)
				ИЛИ (КонтролирующийОрган = "ФСГС" И УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗаписьДокументооборота) <> Истина) Тогда
				ПредназначенаДляДокументооборотаСКонтролирующимОрганом = Ложь;
			КонецЕсли;
			//
			ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);		
			Если НЕ ПредназначенаДляДокументооборотаСКонтролирующимОрганом Тогда
				ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
				
			Иначе
				Попытка
					ОбменИлиОнлайнПроверкаОтключена = УчетнаяЗаписьДокументооборота.ОбменНапрямую ИЛИ НЕ УчетнаяЗаписьДокументооборота.ИспользоватьСервисОнлайнПроверкиОтчетов;
				Исключение
					ОбменИлиОнлайнПроверкаОтключена = Истина;
				КонецПопытки;
				
				Если ОбменИлиОнлайнПроверкаОтключена Тогда
					ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
					
				Иначе
					Если УчетнаяЗаписьДокументооборота.СпецоператорСвязи = Перечисления.СпецоператорыСвязи.Такском Тогда
						ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);
						
					ИначеЕсли КонтекстЭДОСервер = Неопределено Тогда
						ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
						
					Иначе
						ОнлайнПроверкаКонтролирующиеОрганы =
							ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
							УчетнаяЗаписьДокументооборота.СпецоператорСвязи, "ОнлайнПроверкаКонтролирующиеОрганы");
						ОнлайнПроверкаКонтролирующиеОрганы = СокрЛП(ОнлайнПроверкаКонтролирующиеОрганы);
						ОнлайнПроверкаКонтролирующиеОрганы = ВРег(ОнлайнПроверкаКонтролирующиеОрганы);
						КонтролирующийОрганОператора = ?(КонтролирующийОрган = "ЦПРР", "ФНС", КонтролирующийОрган);
						КонтролирующийОрганОператора = ВРег(КонтролирующийОрганОператора);
						
						Если СтрНайти(";" + ОнлайнПроверкаКонтролирующиеОрганы + ";", ";" + КонтролирующийОрганОператора + ";") = 0 Тогда
							ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
						Иначе
							ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ИмяТипаДокументаСведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО = "СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО";
			Если Метаданные.Документы.Найти(ИмяТипаДокументаСведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО) <> Неопределено
				И ТипЗнч(Отчет) = Тип("ДокументСсылка." + ИмяТипаДокументаСведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО)
				И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отправка СЗВ-ДСО", '20231006') Тогда
				
				ПараметрыПрорисовкиКнопокОтправки.Вставить("ОтправитьВКонтролирующийОрган", Ложь);
				ПараметрыПрорисовкиКнопокОтправки.Вставить("ФормаОтправитьВПФР", Ложь);
			КонецЕсли;
			
		Иначе
			// Если нет учетной записи, то оставляем меню ПроверитьВИнтернете, чтобы по нему показывать предложение подключиться
			ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);
		КонецЕсли;
		
	Исключение
		
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ГруппаОтправкаВКонтролирующийОрган", Истина);
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
		
	КонецПопытки;
	
	Возврат ПараметрыПрорисовкиКнопокОтправки;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФНС
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |ГДЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПредназначенаДляДокументооборотаСФНС;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка наличия возможности отправки в ФНС для учетной записи';
				|en = 'Проверка наличия возможности отправки в ФНС для учетной записи'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСПФР
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |ГДЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПредназначенаДляДокументооборотаСПФР;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка наличия возможности отправки в ПФР для учетной записи';
				|en = 'Проверка наличия возможности отправки в ПФР для учетной записи'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФСГС
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |ГДЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПредназначенаДляДокументооборотаСФСГС;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка наличия возможности отправки в Росстат для учетной записи';
				|en = 'Проверка наличия возможности отправки в Росстат для учетной записи'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСЦБ(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСЦБ
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |ГДЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПредназначенаДляДокументооборотаСЦБ;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка наличия возможности отправки в ЦБ РФ для учетной записи';
				|en = 'Проверка наличия возможности отправки в ЦБ РФ для учетной записи'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена, ТипыСообщений = Неопределено, ПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка,
	                      |	ТранспортноеСообщение.Статус,
	                      |	ТранспортноеСообщение.Тип,
	                      |	ТранспортноеСообщение.ПометкаУдаления,
	                      |	ТранспортноеСообщение.Дата,
	                      |	ТранспортноеСообщение.ИдентификаторСообщения,
	                      |	ТранспортноеСообщение.ДатаТранспорта,
	                      |	ТранспортноеСообщение.Основание,
	                      |	ТранспортноеСообщение.ПротоколСОшибкой,
	                      |	ТранспортноеСообщение.Тема
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	Если НЕ ПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
		                      |	И ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления";
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если ТипыСообщений <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		                      |	И ТранспортноеСообщение.Тип В (&ТипыСообщений)";
		Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СообщениеЗашифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК Поле1
	                      |ИЗ
	                      |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |ГДЕ
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СообщениеРасшифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК Поле1
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьПоследнийЦиклОбмена(Объект) Экспорт
	
	Если Объект <> Неопределено Тогда
		Ссылка = Объект.Ссылка;
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ТранспортноеСообщение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
	
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			Ссылка = ПолучитьОписьВходящихДокументовПоТребованию(Ссылка);
		Иначе
			
			Попытка
			
				Таблица = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
				РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(Таблица);

				Если Таблица.Найти(ТипЗнч(Ссылка), "ТипОбъекта") <> Неопределено Тогда
					
					Ссылки = Новый Массив;
					ДокументооборотСКОПереопределяемый.ПолучитьОтправляемыйОбъектПоСсылке(Ссылка, Ссылки);
					
				КонецЕсли;
				
			Исключение
				
				ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами. Получение последнего цикла обмена';
									|en = 'Электронный документооборот с контролирующими органами. Получение последнего цикла обмена'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			
				ЗаписьЖурналаРегистрации(
					ТекстОшибки,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				Ссылки = Новый Массив;
					
			КонецПопытки;
					
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Ссылки) Тогда
			Ссылки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ЦиклОбмена.Ссылка КАК Ссылка,
		                      |	ЦиклОбмена.ДатаСоздания КАК ДатаСоздания
		                      |ПОМЕСТИТЬ ЦиклыОбмена
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклОбмена.Предмет В (&Объект)
		                      |	И ЦиклОбмена.ПометкаУдаления = ЛОЖЬ
		                      |	И ЦиклОбмена.Тип В(&Тип)
		                      |
		                      |ОБЪЕДИНИТЬ
		                      |
		                      |ВЫБРАТЬ
		                      |	ЦиклОбмена.Ссылка,
		                      |	ЦиклОбмена.ДатаСоздания
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклОбмена
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЦиклыОбмена.ДополнительныеПредметы КАК ТЧЦиклОбмена
		                      |		ПО (ТЧЦиклОбмена.Ссылка = ЦиклОбмена.Ссылка)
		                      |ГДЕ
		                      |	ЦиклОбмена.Предмет В (&Объект)
		                      |	И ЦиклОбмена.ПометкаУдаления = ЛОЖЬ
		                      |	И ЦиклОбмена.Тип В(&Тип)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
		                      |	ЦиклыОбмена.ДатаСоздания КАК ДатаСоздания
		                      |ИЗ
		                      |	ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ПО (ТранспортноеСообщение.ЦиклОбмена = ЦиклыОбмена.Ссылка)
		                      |ГДЕ
		                      |	(ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
		                      |			ИЛИ ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Отправленное)
		                      |			ИЛИ ТранспортноеСообщение.Тип В (&ТипПервичныхСообщений)
		                      |				И ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Исходящее))
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ДатаСоздания УБЫВ");

		Запрос.УстановитьПараметр("Объект", 				Ссылки);
		Запрос.УстановитьПараметр("Тип", 					ТипыЦикловОбмена());
		Запрос.УстановитьПараметр("ТипПервичныхСообщений", 	ТипПервичныхСообщений());
		
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.ЦиклОбмена) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
				Возврат Выборка.ЦиклОбмена;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами. Получение последнего цикла обмена';
							|en = 'Электронный документооборот с контролирующими органами. Получение последнего цикла обмена'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Справочники.ЦиклыОбмена.ПустаяСсылка();
		
	КонецПопытки;
		
	Возврат Справочники.ЦиклыОбмена.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСсылкуНаПротоколПоЦиклуОбмена(ЦиклОбмена)
	
	ТипыПротоколов = Новый Массив;
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И ТранспортноеСообщение.Тип В(&ТипыПротоколов)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТранспортноеСообщение.Тип.Порядок УБЫВ");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("ТипыПротоколов", ТипыПротоколов);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвойстваАктуальногоПротокола(СсылкаНаОтчет) Экспорт
	
	ЦиклОбмена = ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Протокол = ПолучитьСсылкуНаПротоколПоЦиклуОбмена(ЦиклОбмена);
	
	Возврат Новый Структура("Дата, Протокол", ЦиклОбмена.ДатаСоздания, Протокол);
	
КонецФункции

Процедура УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено)Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиДокументооборота) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = Организации.УчетнаяЗаписьОбмена
	|ГДЕ
	|	&УсловиеПоОрганизации";
	Если ОбщегоНазначенияБРО.ИспользуетсяАрхив() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "НЕ Организации.ВАрхиве");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "Истина");
	КонецЕсли;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	МассивУчетныхЗаписей = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУчетныхЗаписей.Добавить(Выборка.УчетнаяЗапись);
	КонецЦикла;
	
	Если Пользователи.ЭтоПолноправныйПользователь(,,Ложь) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗаписьОбмена
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
		|	И НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.УчетнаяЗаписьОбмена.ЭтоМультиРежим
		|	И НЕ Организации.УчетнаяЗаписьОбмена.ЭлектроннаяПодписьВМоделиСервиса
		|	И &УсловиеПоОрганизации";
		Если ОбщегоНазначенияБРО.ИспользуетсяАрхив() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "НЕ Организации.ВАрхиве");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "Истина");
		КонецЕсли;
		УчетныеЗаписиПолныхПрав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗаписьОбмена");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивУчетныхЗаписей, УчетныеЗаписиПолныхПрав, Истина);
		
	КонецЕсли;
	
	МассивУчетныхЗаписейФиксированныйМассив = Новый ФиксированныйМассив(МассивУчетныхЗаписей);
	ПараметрыСеанса.ТекущиеУчетныеЗаписиНалогоплательщика = МассивУчетныхЗаписейФиксированныйМассив;
	Если УстановленныеПараметры <> Неопределено Тогда 
		УстановленныеПараметры.Добавить("ТекущиеУчетныеЗаписиНалогоплательщика");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ОрганизацияОтчета, КонтролирующийОрган, НастроенОбменВУниверсальномФормате, УчетнаяЗаписьПредназначенаДляДокументооборотаСКО) Экспорт
	
	НастроенОбменВУниверсальномФормате = Ложь;
	УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = Ложь;
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОрганизацияОтчета, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
	
	УчетнаяЗаписьДокументооборота = СвойстваОрганизации.УчетнаяЗаписьОбмена;
	Если СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате")
	И ЗначениеЗаполнено(УчетнаяЗаписьДокументооборота) Тогда
		НастроенОбменВУниверсальномФормате = Истина;
		Если КонтролирующийОрган = "ФНС" Тогда
			УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗаписьДокументооборота);
		ИначеЕсли КонтролирующийОрган = "ПФР" Тогда
			УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗаписьДокументооборота);
		ИначеЕсли КонтролирующийОрган = "ФСГС" Тогда
			УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗаписьДокументооборота);
		ИначеЕсли КонтролирующийОрган = "ЦБ" Тогда
			УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = УчетнаяЗаписьПредназначенаДляДокументооборотаСЦБ(УчетнаяЗаписьДокументооборота);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкиФСС(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ОнлайнПроверкаДоступна = Истина;
	ИспользоватьОбмен = КонтекстЭДО.ОрганизацияИспользуетОбменСФСС(ОрганизацияСсылка, , ОнлайнПроверкаДоступна);
	
	Результат.Вставить("ИспользоватьОбмен", ИспользоватьОбмен);
	Результат.Вставить("ОнлайнПроверкаДоступна", ОнлайнПроверкаДоступна);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиФСРАР(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДО.НастройкиФСРАР(ОрганизацияСсылка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиРПН(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДО.НастройкиРПН(ОрганизацияСсылка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиФТС(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДО.НастройкиФТС(ОрганизацияСсылка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.УчетнаяЗаписьОрганизации(Организация);
	
КонецФункции

#Область НоваяФормаРегламентированнойОтчетности

Функция ПараметрыПрорисовкиПанелиОтправки(Знач Ссылка, Знач Организация = Неопределено, Знач КонтролирующийОрган = "ФНС") Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение параметров прорисовки
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 								Истина);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", 						Истина);
	ДополнительныеПараметры.Вставить("ВозвращатьДокументыРеализацииПолномочийНО", 	Истина);
	ДополнительныеПараметры.Вставить("Организация", 								Организация);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, КонтролирующийОрган, ДополнительныеПараметры);
	
	Возврат ТекущееСостояние;
	
КонецФункции

Функция ПараметрыПрорисовкиСтатуса(Знач Ссылка, КонтролирующийОрган = "ФНС", ПолучатьДаты = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", ПолучатьДаты);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Ложь);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, КонтролирующийОрган, ДополнительныеПараметры);
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат ТекущееСостояние;
	
КонецФункции

// Обновление ИБ
Процедура ЗаполнитьРегистрЖурналОтправокВКонтролирующиеОрганы(Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документы.ЗапросНаИнформационноеОбслуживаниеСтрахователя.ПерезаполнитьЗначениеРеквизитаНаДату();
	
	ВыборкаДетальныеЗаписи = ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Предмет = ВыборкаДетальныеЗаписи.Объект;
		Отказ 	= Ложь;
		
		Попытка
			
			// Запись в регистр
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
			
		Исключение
		
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при заполнении регистра ЖурналОтправокВКонтролирующиеОрганы';
					|en = 'Ошибка при заполнении регистра ЖурналОтправокВКонтролирующиеОрганы'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,, Предмет,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаОбъектовНеЗаписанныхВРегистр	= ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы();
	КоличествоОбъектов					= ВыборкаОбъектовНеЗаписанныхВРегистр.Количество();
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат  КоличествоОбъектов;
	
КонецФункции

Функция ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы() Экспорт
	
	МассивТипов = ТипыОбъектовЭДООтображаемыхВФорме1СОтчетность();
	
	// Дополняем таблицу типов объектами, не входящими в БРО
	ТаблицаОписанияОбъектовНеВходящихВБРО 	= РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	ОписанияОбъектовНеВходящихВБРО = ТаблицаОписанияОбъектовНеВходящихВБРО.НайтиСтроки(
		Новый Структура("ВидДокумента", Перечисления.СтраницыЖурналаОтчетность.Уведомления));
	
	Для каждого Описание Из ОписанияОбъектовНеВходящихВБРО Цикл
		МассивТипов.Добавить(Описание.ТипОбъекта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	// Составляем запрос
	КоличествоТипов = МассивТипов.Количество();
	МассивЗапросов = Новый Массив;
	Для каждого ТипОбъекта Из МассивТипов Цикл
		
		ОбъектМетаданных 	= Метаданные.НайтиПоТипу(ТипОбъекта);
		
		Если ОбъектМетаданных <> Неопределено Тогда
		
			ПолноеИмяТипа 		= ОбъектМетаданных.ПолноеИмя();
			ИмяТипа 			= ОбъектМетаданных.Имя;
			
			// Формируем основную часть запроса
			Текст = "ВЫБРАТЬ
				|	%1.Ссылка КАК Объект
				|ИЗ
				|	%2 КАК %1
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
				|		ПО (ЖурналОтправокВКонтролирующиеОрганы.Ссылка = %1.Ссылка)
				|ГДЕ
				|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка Есть NULL";
				
			// Берем не все электронные представление, а только относящиеся к уведомлениям
			Если ТипОбъекта = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				Текст = Текст + "
					|И (%1.ВидОтчета В (&ВидыОтчетовРазделаУведомления))";
					
				ВидыОтчетовРазделаУведомления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВидыЭлектронныхПредставленийВРазделеУведомления();
				Запрос.УстановитьПараметр("ВидыОтчетовРазделаУведомления", ВидыОтчетовРазделаУведомления);
			КонецЕсли;
				
			Текст = СтрЗаменить(Текст, "%1", ИмяТипа);
			Текст = СтрЗаменить(Текст, "%2", ПолноеИмяТипа);
			
			МассивЗапросов.Добавить(Текст);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Соединитель = "
				  |
				  |ОБЪЕДИНИТЬ ВСЕ
				  |
				  |";
	
	Запрос.Текст = СтрСоединить(МассивЗапросов, Соединитель);
	
	// Выполнение полученного запроса
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ТипыОбъектовЭДООтображаемыхВФорме1СОтчетность() Экспорт
	
	// Здесь нет МакетыПенсионныхДел и ЗаявлениеОНазначенииПенсии, потому что они отображаются в другом регистре сведений  
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОПолучателеДокументов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр"));
	МассивТипов.Добавить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЗаявленияОбОтзывеМЧДФНС"));
	МассивТипов.Добавить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС"));
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует() Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
		МассивТипов.Добавить(Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ));
	КонецЕсли;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя"));
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует() Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		МассивТипов.Добавить(Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности));
	КонецЕсли;
	
	Возврат МассивТипов;
	
КонецФункции

Функция ЦветФонаПанелиОтправкиПоСтатусу(СостояниеСдачиОтчетности, ТекстСтатуса = "") Экспорт
	
	ЦветФона = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки; 
	Если СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат 
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ТребуетсяПодтверждениеПриема Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаТекущейОтправки;// желтый
	ИначеЕсли СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтправленоИзКонтролирующегоОргана
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПриемПодтвержден Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки;// серый
	ИначеЕсли СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаОшибкиОтправки;// красный
	ИначеЕсли СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда
		Если ТекстСтатуса = "Частично отозвано" Тогда
			ЦветФона = ЦветаСтиля.ЦветФонаЧастичногоОтзыва;// желтый
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаУдачнойОтправки;// зеленый
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЦветФона;
	
КонецФункции

Функция ЕстьДоступККонтекстуЭДО() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено;
	
КонецФункции

Функция ПолучитьОписьВходящихДокументовПоТребованию(ТребованиеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.Ссылка 
						  |ИЗ
		|	Справочник.ОписиВходящихДокументовИзНалоговыхОрганов.ВходящиеДокументы КАК ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы
						  |ГДЕ
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.СсылкаНаОбъект = &ТребованиеСсылка";

	Запрос.УстановитьПараметр("ТребованиеСсылка", ТребованиеСсылка);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция ТипыЦикловОбмена() Экспорт
	
	ТипМассив = Новый Массив;
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаПФР);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Представление);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ИОН);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Документ);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Заявление);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ИОС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ПисьмоНО);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Рассылка);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаГрупповая);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаШаблоновФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОтчетностьЦБ);
	
	Возврат ТипМассив;
	
КонецФункции

Функция ТипПервичныхСообщений() Экспорт
	
	ТипМассивПервичное = Новый Массив;
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ДокументНО);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаШаблоновФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьЦБ);
	
	Возврат ТипМассивПервичное;
	
КонецФункции

#КонецОбласти

// Функцию нельзя переносить в повторное использование, так как режим могут поменять,
// а функция будет возвращать прежнее значение.
Функция ИспользуетсяРежимТестирования() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_РежимТестирования) Тогда
		Возврат Константы.ДокументооборотСКонтролирующимиОрганами_РежимТестирования.Получить();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ТипыСодержимогоТранспортногоКонтейнераПервичныхСообщений() Экспорт
	
	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РассылкаФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ШаблонФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеРассылкиШаблоновФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиЦБ);
	
	Возврат ТипыВложений;
	
КонецФункции

Функция ЭтоРегламентированныйОтчетРеестрНДС(СсылкаНаОтчет) Экспорт
	
	Если ТипЗнч(СсылкаНаОтчет)  = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ИсточникОтчета = СсылкаНаОтчет.ИсточникОтчета;
		Возврат Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрНДСПриложение") > 0
			ИЛИ Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрНДСДекларации") > 0
			ИЛИ Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрНДС_КНД") > 0;
		
	Иначе
		
		Возврат Ложь;
		
	Конецесли;
	
КонецФункции

Функция ЭтоРегламентированныйОтчетРеестрАкцизы(СсылкаНаОтчет) Экспорт
	
	Если ТипЗнч(СсылкаНаОтчет)  = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ИсточникОтчета = СсылкаНаОтчет.ИсточникОтчета;
		Возврат Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрАкцизыПриложение") > 0
			ИЛИ Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрАкцизыВычетыДенатурированныйЭтиловыйСпирт") > 0
			ИЛИ Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрАкцизыВычетыВиноматериалыВиногрИФруктСусло") > 0
			ИЛИ Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрАкцизыВычетыВиноград") > 0;
		
	Иначе
		
		Возврат Ложь;
		
	Конецесли;
	
КонецФункции

Функция ОрганизацияПодключенаКИнспекции(СсылкаНаОбъект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ОрганизацияПодключенаКИнспекции(СсылкаНаОбъект);
	
КонецФункции
	
Функция ПутьКОбъекту() Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		// Нет прав
		Возврат Неопределено;
	Иначе
		Возврат КонтекстЭДОСервер.ПутьКОбъекту;
	КонецЕсли;

КонецФункции

Процедура ВФонеОбработатьИзменившиесяКодыФСГС() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда 
		Если КонтекстЭДОСервер.ЭлектронныйДокументооборотИспользуется() = Ложь Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Задание = "ЭлектронныйДокументооборотСКонтролирующимиОрганами.ФоноваяЗаменаВОрганизацияхИПодразделенияхКодОрганаФСГС";
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить(Истина);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Замена кодов ТОГС";
	
	ДлительныеОперации.ВыполнитьВФоне(Задание, ПараметрыЗапуска, ПараметрыВыполнения);	
	
КонецПроцедуры

#Область КонтактнаяИнформация

Функция ПредставлениеКонтактнойИнформации(ЗначениеАдреса) Экспорт
	
	Результат = ЗначениеАдреса;
	Попытка
		Результат = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеАдреса);
	Исключение
		ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами. Получение представления адреса';
							|en = 'Электронный документооборот с контролирующими органами. Получение представления адреса'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
Конецфункции

Процедура ПреобразоватьАдресВФорматXML(Адрес, ВидКонтактнойИнформации) Экспорт
	
	ОбработкаЗаявленийАбонента.ПреобразоватьАдресВФорматXML(Адрес, ВидКонтактнойИнформации);
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьКодВидаДокументаФизическогоЛица(ДокументФизическогоЛица) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	
	Если ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
		Результат = РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодВидаДокументаФизическогоЛица(
			ДокументФизическогоЛица);
		
		Если НЕ ЗначениеЗаполнено(Результат)
			И ТипЗнч(ДокументФизическогоЛица) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц")
			И Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументФизическогоЛица, "КодМВД");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВидДокументаПоКодуИлиНаименованию(КодВидаДокумента, НаименованиеВидаДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(КодВидаДокумента)
		И Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
			|ГДЕ
			|	ВидыДокументовФизическихЛиц.КодМВД = &КодВидаДокумента
			|	И ВидыДокументовФизическихЛиц.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("КодВидаДокумента", Строка(КодВидаДокумента));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
		|ГДЕ
		|	ВидыДокументовФизическихЛиц.Наименование = &НаименованиеВидаДокумента
		|	И ВидыДокументовФизическихЛиц.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("НаименованиеВидаДокумента", Строка(НаименованиеВидаДокумента));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодВидаДокумента = ПолучитьКодВидаДокументаФизическогоЛица(Выборка.Ссылка);
		Если ЗначениеЗаполнено(КодВидаДокумента) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// нет видов документа с таким наименованием и заполненным кодом
	Возврат Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Строка(НаименованиеВидаДокумента), Ложь);

КонецФункции

Функция РазложитьФИО(Знач ФамилияИмяОтчество) Экспорт
	
	Возврат РегламентированнаяОтчетность.РазложитьФИО(ФамилияИмяОтчество);
	
КонецФункции

Функция ПолучитьСвойстваОрганизации(Организация) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЭтоЮридическоеЛицо", Истина);
	Если ЗначениеЗаполнено(Организация) Тогда
		Результат.ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	КонецЕсли;
	
	Результат.Вставить("ЭтоРоссийскаяОрганизация", Истина);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Результат.ЭтоРоссийскаяОрганизация = НЕ Результат.ЭтоЮридическоеЛицо
			ИЛИ РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация,, "ТипНП").ТипНП <> 5;
		
		Если Результат.ЭтоЮридическоеЛицо Тогда
			Если Результат.ЭтоРоссийскаяОрганизация Тогда
				РеквизитыОрганизации = "НаимЮЛПол, ИННЮЛ, КППЮЛ, ОГРН, АдрЮР, АдрЮР_XML, АдрЮР_JSON, КодНО, "
					+ "ФИОРук, ФамилияРук, ИмяРук, ОтчествоРук, ИННРук, ГраждРук, ПолРук, ДатаРождРук, ДолжнРук, "
					+ "КодУдЛичнРук, ВидУдЛичнРук, СерияУдЛичнРук, НомерУдЛичнРук, ДатаУдЛичнРук, ОрганВыданУдЛичнРук, "
					+ "КодПодрУдЛичнРук";
				
			Иначе
				РеквизитыОрганизации = "НаимЮЛПол, ИННЮЛ, КППЮЛ, ОГРН, АдрИО, АдрИО_XML, АдрИО_JSON, НаимИОПол, СтрИО, "
					+ "КодИОСтрРег, КодНО, "
					+ "ФИОРук, ФамилияРук, ИмяРук, ОтчествоРук, ИННРук, ГраждРук, ПолРук, ДатаРождРук, МестоРождРук, ДолжнРук, "
					+ "КодУдЛичнРук, ВидУдЛичнРук, СерияУдЛичнРук, НомерУдЛичнРук, ДатаУдЛичнРук, ОрганВыданУдЛичнРук, "
					+ "КодПодрУдЛичнРук, НаименованиеРегистрирующегоОргана";
			КонецЕсли;
			
		Иначе
			РеквизитыОрганизации = "ФИО, ФамилияИП, ИмяИП, ОтчествоИП, ИННФЛ, ОГРН, Гражд, ДатаРожд, КодНО, "
				+ "КодУдЛичн, ВидУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн, ОрганВыданУдЛичн, КодПодрУдЛичн";
		КонецЕсли;
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация,,
			РеквизитыОрганизации);
		
		Для каждого ЗначениеРеквизита Из СведенияОбОрганизации Цикл
			Результат.Вставить(ЗначениеРеквизита.Ключ, ЗначениеРеквизита.Значение);
		КонецЦикла;
		
		Если Результат.ЭтоЮридическоеЛицо Тогда
			Если НЕ ЗначениеЗаполнено(Результат.ФамилияРук) ИЛИ НЕ ЗначениеЗаполнено(Результат.ИмяРук)
				ИЛИ Результат.ИмяРук = Результат.ФИОРук Тогда
				
				СтруктураФИО = РегламентированнаяОтчетность.РазложитьФИО(Результат.ФИОРук);
				Результат.ФамилияРук 	= СокрЛП(СтруктураФИО.Фамилия);
				Результат.ИмяРук 		= СокрЛП(СтруктураФИО.Имя);
				Результат.ОтчествоРук 	= СокрЛП(СтруктураФИО.Отчество);
			КонецЕсли;
			
			Если НЕ Результат.ЭтоРоссийскаяОрганизация Тогда
				МестоРождения = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПредставлениеМестаРождения(
					Результат.МестоРождРук);
				Результат.Вставить("МестоРождения", МестоРождения);
			КонецЕсли;
			
			ВидУдостоверения = ДокументооборотСКОВызовСервера.ПолучитьВидДокументаПоКодуИлиНаименованию(
				Результат.КодУдЛичнРук, Результат.ВидУдЛичнРук);
			
		Иначе
			Если НЕ ЗначениеЗаполнено(Результат.ФамилияИП) ИЛИ НЕ ЗначениеЗаполнено(Результат.ИмяИП)
				ИЛИ Результат.ИмяИП = Результат.ФИО Тогда
				
				СтруктураФИО = РегламентированнаяОтчетность.РазложитьФИО(Результат.ФИО);
				Результат.ФамилияИП 	= СокрЛП(СтруктураФИО.Фамилия);
				Результат.ИмяИП 		= СокрЛП(СтруктураФИО.Имя);
				Результат.ОтчествоИП 	= СокрЛП(СтруктураФИО.Отчество);
			КонецЕсли;
			
			ВидУдостоверения = ДокументооборотСКОВызовСервера.ПолучитьВидДокументаПоКодуИлиНаименованию(
				Результат.КодУдЛичн, Результат.ВидУдЛичн);
		КонецЕсли;
		Результат.Вставить("ВидУдостоверения", ВидУдостоверения);
		
		КодСтраныГражданства = ?(Результат.ЭтоЮридическоеЛицо, Результат.ГраждРук, Результат.Гражд);
		Гражданство = ?(ЗначениеЗаполнено(КодСтраныГражданства), Справочники.СтраныМира.НайтиПоКоду(КодСтраныГражданства),
			Справочники.СтраныМира.ПустаяСсылка());
		Результат.Вставить("Гражданство", Гражданство);
		
		СНИЛС = "";
		Должность = "";
		Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(
			Организация);
		Если ЗначениеЗаполнено(Руководитель) Тогда
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
			ДанныеИсполнителя =
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(
				Руководитель, Организация);
			Если ЗначениеЗаполнено(ДанныеИсполнителя) И ДанныеИсполнителя.Свойство("СНИЛС") Тогда
				СНИЛС = ДанныеИсполнителя.СНИЛС;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеИсполнителя) И ДанныеИсполнителя.Свойство("Должность") Тогда
				Должность = ДанныеИсполнителя.Должность;
			КонецЕсли;
		КонецЕсли;
		Результат.Вставить("Руководитель", Руководитель);
		Результат.Вставить("СНИЛС", СНИЛС);
		Результат.Вставить("Должность", Должность);
		
		Если Результат.ЭтоЮридическоеЛицо И НЕ Результат.ЭтоРоссийскаяОрганизация Тогда
			СтранаРегистрацииИностраннойОрганизации = Справочники.СтраныМира.НайтиПоРеквизиту("НаименованиеПолное",
				СведенияОбОрганизации.СтрИО);
			Результат.Вставить("СтранаРегистрацииИностраннойОрганизации", СтранаРегистрацииИностраннойОрганизации);
			Если СтранаРегистрацииИностраннойОрганизации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
				Результат.ЭтоРоссийскаяОрганизация = Истина;
				Если ЗначениеЗаполнено(Результат.НаимИОПол) Тогда
					Результат.НаимЮЛПол = Результат.НаимИОПол;
				КонецЕсли;
				Результат.Вставить("АдрЮР", 		Результат.АдрИО);
				Результат.Вставить("АдрЮР_XML", 	Результат.АдрИО_XML);
				Результат.Вставить("АдрЮР_JSON", 	Результат.АдрИО_JSON);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСвойстваКонтрагента(Контрагент) Экспорт
	
	РеквизитНаименованиеПолноеОтсутствует 			= Истина; // допустимо отсутствие реквизита
	РеквизитЮридическоеФизическоеЛицоОтсутствует 	= Истина; // допустимо отсутствие реквизита
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганами.РеквизитыСправочникаКонтрагентовДоступны(
		РеквизитНаименованиеПолноеОтсутствует,
		РеквизитЮридическоеФизическоеЛицоОтсутствует) Тогда
		
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			?(РеквизитНаименованиеПолноеОтсутствует, "Наименование", "НаименованиеПолное")
			+ ?(РеквизитЮридическоеФизическоеЛицоОтсутствует, "", ", ЮридическоеФизическоеЛицо")
			+ ", ИНН, КПП");
		
	Иначе
		РеквизитыКонтрагента = Новый Структура;
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьРеквизитыКонтрагента(
			Контрагент,
			РеквизитыКонтрагента);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеПолное", 		"");
	Результат.Вставить("ЮридическоеФизическоеЛицо", Неопределено);
	Результат.Вставить("ИНН", 						"");
	Результат.Вставить("КПП", 						"");
	Если ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыКонтрагента);
		Если НЕ ЗначениеЗаполнено(Результат.НаименованиеПолное) И РеквизитыКонтрагента.Свойство("Наименование") Тогда
			Результат.НаименованиеПолное = РеквизитыКонтрагента.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ЭтоЮридическоеЛицо", Неопределено);
	ИмяПеречисленияЮридическоеФизическоеЛицо = "ЮридическоеФизическоеЛицо";
	Если Метаданные.Перечисления.Найти(ИмяПеречисленияЮридическоеФизическоеЛицо) <> Неопределено И
		ТипЗнч(Результат.ЮридическоеФизическоеЛицо) =
		Тип("ПеречислениеСсылка." + ИмяПеречисленияЮридическоеФизическоеЛицо) Тогда
		
		Если Результат.ЮридическоеФизическоеЛицо =
			ПредопределенноеЗначение("Перечисление." + ИмяПеречисленияЮридическоеФизическоеЛицо + ".ФизическоеЛицо") Тогда
			
			Результат.ЭтоЮридическоеЛицо = Ложь;
			
		ИначеЕсли Результат.ЮридическоеФизическоеЛицо =
			ПредопределенноеЗначение("Перечисление." + ИмяПеречисленияЮридическоеФизическоеЛицо + ".ЮридическоеЛицо")
			ИЛИ ЗначениеЗаполнено(Результат.ИНН) И ЗначениеЗаполнено(Результат.КПП) Тогда
			
			Результат.ЭтоЮридическоеЛицо = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ИНН = СокрЛП(Результат.ИНН);
	Результат.КПП = СокрЛП(Результат.КПП);
	Если Результат.ЭтоЮридическоеЛицо = Неопределено Тогда
		Если СтрДлина(Результат.ИНН) = 10 Тогда
			Результат.ЭтоЮридическоеЛицо = Истина;
		ИначеЕсли СтрДлина(Результат.ИНН) = 12 Тогда
			Результат.ЭтоЮридическоеЛицо = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Результат.КПП) Тогда
			Результат.ЭтоЮридическоеЛицо = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ЭтоЮридическоеЛицо = Ложь Тогда
		ФамилияИмяОтчество = РегламентированнаяОтчетность.РазложитьФИО(Результат.НаименованиеПолное);
		Результат.Вставить("Фамилия", 	ФамилияИмяОтчество.Фамилия);
		Результат.Вставить("Имя", 		ФамилияИмяОтчество.Имя);
		Результат.Вставить("Отчество",	ФамилияИмяОтчество.Отчество);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСвойстваФизическогоЛица(ФизическоеЛицо) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФИО", 				Новый Структура("Фамилия, Имя, Отчество", "", "", ""));
	Результат.Вставить("ИНН", 				"");
	Результат.Вставить("Серия", 			"");
	Результат.Вставить("Номер", 			"");
	Результат.Вставить("ДатаВыдачи", 		Неопределено);
	Результат.Вставить("КемВыдан", 			"");
	Результат.Вставить("ВидДокумента", 		Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
	Результат.Вставить("КодПодразделения", 	"");
	Результат.Вставить("Должность", 		"");
	Результат.Вставить("Подразделение", 	"");
	Результат.Вставить("СНИЛС", 			"");
	Результат.Вставить("ДатаРождения", 		Неопределено);
	Результат.Вставить("МестоРождения", 	"");
	Результат.Вставить("Пол", 				Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	Результат.Вставить("Гражданство", 		Справочники.СтраныМира.ПустаяСсылка());
	Результат.Вставить("ТелефонРабочий", 	"");
	
	ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(
		ФизическоеЛицо,
		Справочники.Организации.ПустаяСсылка());
	
	Если ТипЗнч(ДанныеИсполнителя) = Тип("Структура") ИЛИ ТипЗнч(ДанныеИсполнителя) = Тип("ФиксированнаяСтруктура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, ДанныеИсполнителя);
	КонецЕсли;
	
	ФамилияИмяОтчество = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если ЗначениеЗаполнено(Результат.ФИО) Тогда
		ЗаполнитьЗначенияСвойств(ФамилияИмяОтчество, Результат.ФИО);
	КонецЕсли;
	Результат.ФИО = ФамилияИмяОтчество;
	
	Если Результат.Пол = "Мужской" Тогда
		Результат.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	ИначеЕсли Результат.Пол = "Женский" Тогда
		Результат.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("ИНН");
	МассивПоказателей.Добавить("Фамилия");
	МассивПоказателей.Добавить("Имя");
	МассивПоказателей.Добавить("Отчество");
	ДатаЗначения = ТекущаяДатаСеанса();
	
	СведенияОФизическомЛице = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(
		ФизическоеЛицо,
		МассивПоказателей,
		ДатаЗначения);
	
	Если ТипЗнч(СведенияОФизическомЛице) = Тип("Структура")
		ИЛИ ТипЗнч(СведенияОФизическомЛице) = Тип("ФиксированнаяСтруктура") Тогда
		Если НЕ ЗначениеЗаполнено(Результат.ФИО.Фамилия) И НЕ ЗначениеЗаполнено(Результат.ФИО.Имя)
			И НЕ ЗначениеЗаполнено(Результат.ФИО.Отчество) Тогда
			ЗаполнитьЗначенияСвойств(Результат.ФИО, СведенияОФизическомЛице);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат.ИНН) И СведенияОФизическомЛице.Свойство("ИНН") Тогда
			Результат.ИНН = СведенияОФизическомЛице.ИНН;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЮридическоеЛицо(ОрганизацияКонтрагентИлиФизическоеЛицо, ЗначениеПоУмолчанию = Истина) Экспорт
	
	Если ТипЗнч(ОрганизацияКонтрагентИлиФизическоеЛицо) = Тип("СправочникСсылка.Организации") Тогда
		Результат = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ОрганизацияКонтрагентИлиФизическоеЛицо);
		
	ИначеЕсли ТипЗнч(ОрганизацияКонтрагентИлиФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Результат = Ложь;
		
	ИначеЕсли ОрганизацияКонтрагентИлиФизическоеЛицо = Неопределено
		ИЛИ ТипЗнч(ОрганизацияКонтрагентИлиФизическоеЛицо) = Тип("Строка") Тогда
		
		Результат = Неопределено;
		
	Иначе // ТипЗнч(ОрганизацияКонтрагентИлиФизическоеЛицо) = Тип("СправочникСсылка.Контрагенты")
		Результат = ПолучитьСвойстваКонтрагента(ОрганизацияКонтрагентИлиФизическоеЛицо).ЭтоЮридическоеЛицо;
	КонецЕсли;
	
	Возврат ?(Результат = Неопределено, ЗначениеПоУмолчанию, Результат);
	
КонецФункции

Функция НайтиФизическоеЛицо(ФИО) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование = &Наименование
		|УПОРЯДОЧИТЬ ПО ФизическиеЛица.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", ФИО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область МашиночитаемыеДоверенности

Функция ВыгрузитьМЧДРР(
		СправочникСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Истина,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ИдентификаторФайла,
		КодНалоговогоОрганаПолучателя,
		ОпределятьКодНалоговогоОрганаПолучателя,
		ФорматДоверенностиПоПриказуФНС,
		ПроверитьВыгрузку,
		ПараметрыВозврата);
	
КонецФункции

Функция ЗагрузитьМЧДРР(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка = Ложь,
		Подпись = Неопределено,
		ЗаявлениеНаОтзыв = Неопределено,
		ПодписьЗаявленияНаОтзыв = Неопределено,
		ДанныеАрхива = Неопределено) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ЗагрузитьЭлементИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка,
		Подпись,
		ЗаявлениеНаОтзыв,
		ПодписьЗаявленияНаОтзыв,
		ДанныеАрхива);
	
КонецФункции

Функция ПроверитьМЧДРР(Знач ОбъектИлиСсылка, Знач ПараметрыОперации = Неопределено) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка,
		ПараметрыОперации);
	
КонецФункции

Функция НайтиМЧДРР(НомерДоверенности, ИННДоверителя = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК МашиночитаемыеДоверенностиРаспределенныйРеестр
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.НомерДоверенности = &НомерДоверенности"
		+ ?(ИННДоверителя = Неопределено, "", "
		|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_ИНН = &ИННДоверителя
		|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительФЛ_ИНН = &ИННДоверителя)") + "
		|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования = """"
		|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования ЕСТЬ NULL)
		|	И НЕ МашиночитаемыеДоверенностиРаспределенныйРеестр.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОтправки УБЫВ");
	
	Запрос.УстановитьПараметр("НомерДоверенности", НомерДоверенности);
	Если ИННДоверителя <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИННДоверителя", ИННДоверителя);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗарегистрированныеМЧДФНС(
		НоваяИгнорируемаяЗарегистрированнаяМЧДФНС = Неопределено,
		ПроверяемыеМЧДФНС = Неопределено,
		ВыбранныеОрганизации = Неопределено) Экспорт
	
	ИгнорируемыеЗарегистрированныеМЧДФНС = Неопределено;
	Если НоваяИгнорируемаяЗарегистрированнаяМЧДФНС <> Ложь Тогда
		ИгнорируемыеЗарегистрированныеМЧДФНС = ХранилищеОбщихНастроек.Загрузить(
			"ДокументооборотСКонтролирующимиОрганами_ИгнорируемыеЗарегистрированныеМЧДФНС");
	КонецЕсли;
	Если ИгнорируемыеЗарегистрированныеМЧДФНС = Неопределено Тогда
		ИгнорируемыеЗарегистрированныеМЧДФНС = Новый Массив;
	КонецЕсли;
	
	Если НоваяИгнорируемаяЗарегистрированнаяМЧДФНС <> Неопределено
		И НоваяИгнорируемаяЗарегистрированнаяМЧДФНС <> Ложь Тогда
		
		Если ИгнорируемыеЗарегистрированныеМЧДФНС.Найти(НоваяИгнорируемаяЗарегистрированнаяМЧДФНС) = Неопределено Тогда
			ИгнорируемыеЗарегистрированныеМЧДФНС.Добавить(НоваяИгнорируемаяЗарегистрированнаяМЧДФНС);
			ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_ИгнорируемыеЗарегистрированныеМЧДФНС",,
				ИгнорируемыеЗарегистрированныеМЧДФНС);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	// объединение запросов с колонками неограниченной длины невозможно
	МинимальныйИндексЗапроса = 0;
	Если ПроверяемыеМЧДФНС <> Неопределено И ТипЗнч(ПроверяемыеМЧДФНС) <> Тип("Массив")
		И ТипЗнч(ПроверяемыеМЧДФНС) <> Тип("ФиксированныйМассив")
		И ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует() Тогда
		
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		Если ТипЗнч(ПроверяемыеМЧДФНС) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
			МинимальныйИндексЗапроса = 2;
		КонецЕсли;
	КонецЕсли;
	МаксимальныйИндексЗапроса = 2;
	ТаблицыЗапросов = Новый Массив;
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "";
	Для ИндексЗапроса = МинимальныйИндексЗапроса По МаксимальныйИндексЗапроса Цикл
		ТаблицаЗапроса = Неопределено;
		Если ИндексЗапроса = 0 Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка КАК СсылкаМЧДФНС,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаВыдачи КАК ДатаВыдачи,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОкончания КАК ДатаОкончания,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.СрокДействия КАК СрокДействия,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ВерсияФормата КАК ВерсияФормата,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.НомерДоверенности КАК НомерДоверенности,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.РегистрационныйНомерДоверенности КАК РегистрационныйНомерДоверенности,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус КАК СтатусДоверенности,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Доверитель КАК Доверитель,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Представитель КАК Представитель,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.КоличествоПредставителей КАК КоличествоПредставителей,
				|	Организации.Ссылка КАК ОрганизацияСсылка,
				|	&НаименованиеОрганизации КАК НаименованиеОрганизации,
				|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияСсылка,
				|	РегистрацииВНалоговомОргане.Код КАК КодРегистрации,
				|	РегистрацииВНалоговомОргане.КПП КАК КППРегистрации,
				|	ЕСТЬNULL(РегистрацииВНалоговомОрганеПодписанты.Доверенность, РегистрацииВНалоговомОргане.Доверенность) КАК ДоверенностьРегистрации
				|ИЗ
				|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК МашиночитаемыеДоверенностиРаспределенныйРеестр
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
				|		ПО (Организации.Ссылка = МашиночитаемыеДоверенностиРаспределенныйРеестр.Владелец)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
				|		ПО (РегистрацииВНалоговомОргане.Владелец = МашиночитаемыеДоверенностиРаспределенныйРеестр.Владелец)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане.Подписанты КАК РегистрацииВНалоговомОрганеПодписанты
				|		ПО (РегистрацииВНалоговомОрганеПодписанты.Ссылка = РегистрацииВНалоговомОргане.Ссылка)
				|			И (РегистрацииВНалоговомОрганеПодписанты.Представитель = МашиночитаемыеДоверенностиРаспределенныйРеестр.Представитель)
				|ГДЕ
				|	" + ?(НоваяИгнорируемаяЗарегистрированнаяМЧДФНС = Ложь, "",
					"МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус =
				|		ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано)
				|	И ") + "НЕ МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка В (&ИгнорируемыеЗарегистрированныеМЧДФНС)
				|	И (&ПроверяемыеМЧДФНСНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка В (&ПроверяемыеМЧДФНС))
				|	И (&ВыбранныеОрганизацииНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.Владелец В (&ВыбранныеОрганизации))
				|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования = """"
				|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования ЕСТЬ NULL)
				|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления" + ?(НоваяИгнорируемаяЗарегистрированнаяМЧДФНС = Ложь, "", "
				|	И НЕ МашиночитаемыеДоверенностиРаспределенныйРеестр.ПометкаУдаления
				|	И НЕ Организации.ПометкаУдаления") + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОкончания,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка,
				|	Организации.Ссылка,
				|	РегистрацииВНалоговомОргане.Код,
				|	РегистрацииВНалоговомОргане.КПП,
				|	РегистрацииВНалоговомОргане.Ссылка");
			
		ИначеЕсли ИндексЗапроса = 1 Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	МашиночитаемыеДоверенностиФНС.Ссылка КАК СсылкаМЧДФНС,
				|	МашиночитаемыеДоверенностиФНС.ДатаВыдачи КАК ДатаВыдачи,
				|	МашиночитаемыеДоверенностиФНС.ДатаОкончания КАК ДатаОкончания,
				|	МашиночитаемыеДоверенностиФНС.СрокДействия КАК СрокДействия,
				|	МашиночитаемыеДоверенностиФНС.ВерсияФормата КАК ВерсияФормата,
				|	МашиночитаемыеДоверенностиФНС.НомерДоверенности КАК НомерДоверенности,
				|	МашиночитаемыеДоверенностиФНС.РегистрационныйНомерДоверенности КАК РегистрационныйНомерДоверенности,
				|	ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано) КАК СтатусДоверенности,
				|	МашиночитаемыеДоверенностиФНС.Доверитель КАК Доверитель,
				|	МашиночитаемыеДоверенностиФНС.Представитель КАК Представитель,
				|	МашиночитаемыеДоверенностиФНС.КоличествоПредставителей КАК КоличествоПредставителей,
				|	Организации.Ссылка КАК ОрганизацияСсылка,
				|	&НаименованиеОрганизации КАК НаименованиеОрганизации,
				|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияСсылка,
				|	РегистрацииВНалоговомОргане.Код КАК КодРегистрации,
				|	РегистрацииВНалоговомОргане.КПП КАК КППРегистрации,
				|	ЕСТЬNULL(РегистрацииВНалоговомОрганеПодписанты.Доверенность, РегистрацииВНалоговомОргане.Доверенность) КАК ДоверенностьРегистрации
				|ИЗ
				|	Справочник.МашиночитаемыеДоверенностиФНС КАК МашиночитаемыеДоверенностиФНС
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
				|		ПО (Организации.Ссылка = МашиночитаемыеДоверенностиФНС.Организация)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
				|		ПО (РегистрацииВНалоговомОргане.Владелец = МашиночитаемыеДоверенностиФНС.Организация)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане.Подписанты КАК РегистрацииВНалоговомОрганеПодписанты
				|		ПО (РегистрацииВНалоговомОрганеПодписанты.Ссылка = РегистрацииВНалоговомОргане.Ссылка)
				|			И (РегистрацииВНалоговомОрганеПодписанты.Представитель = МашиночитаемыеДоверенностиФНС.Представитель)"
						+ ?(НоваяИгнорируемаяЗарегистрированнаяМЧДФНС = Ложь, "", "
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЦиклыОбмена КАК ЦиклыОбмена
				|		ПО (ЦиклыОбмена.Предмет = МашиночитаемыеДоверенностиФНС.Ссылка)
				|			И (ЦиклыОбмена.ДатаСоздания >= ДАТАВРЕМЯ(2023, 1, 1, 0, 0, 0))
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
				|		ПО (ТранспортноеСообщение.ЦиклОбмена = ЦиклыОбмена.Ссылка)
				|			И (ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО))
				|			И (ТранспортноеСообщение.ПротоколСОшибкой <> ИСТИНА)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
				|		ПО (ЖурналОтправокВКонтролирующиеОрганы.Ссылка = МашиночитаемыеДоверенностиФНС.Ссылка)") + "
				|ГДЕ
				|	" + ?(НоваяИгнорируемаяЗарегистрированнаяМЧДФНС = Ложь, "",
					"ЖурналОтправокВКонтролирующиеОрганы.СтатусОтправки <> &СтатусОтправки
				|	И ") + "НЕ МашиночитаемыеДоверенностиФНС.Ссылка В (&ИгнорируемыеЗарегистрированныеМЧДФНС)
				|	И (&ПроверяемыеМЧДФНСНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиФНС.Ссылка В (&ПроверяемыеМЧДФНС))
				|	И (&ВыбранныеОрганизацииНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиФНС.Организация В (&ВыбранныеОрганизации))
				|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления" + ?(НоваяИгнорируемаяЗарегистрированнаяМЧДФНС = Ложь, "", "
				|	И НЕ МашиночитаемыеДоверенностиФНС.ПометкаУдаления
				|	И НЕ Организации.ПометкаУдаления
				|	И НЕ ЦиклыОбмена.ПометкаУдаления
				|	И НЕ ТранспортноеСообщение.ПометкаУдаления") + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	МашиночитаемыеДоверенностиФНС.ДатаОкончания,
				|	МашиночитаемыеДоверенностиФНС.Ссылка,
				|	Организации.Ссылка,
				|	РегистрацииВНалоговомОргане.Код,
				|	РегистрацииВНалоговомОргане.КПП,
				|	РегистрацииВНалоговомОргане.Ссылка");
			
			Если НоваяИгнорируемаяЗарегистрированнаяМЧДФНС <> Ложь Тогда
				Запрос.УстановитьПараметр("СтатусОтправки", "Отозвано");
			КонецЕсли;
			
		Иначе
			ТаблицаЗапроса = Новый ТаблицаЗначений;
			ТаблицаЗапроса.Колонки.Добавить("СсылкаМЧДФНС");
			ТаблицаЗапроса.Колонки.Добавить("ДатаВыдачи");
			ТаблицаЗапроса.Колонки.Добавить("ДатаОкончания");
			ТаблицаЗапроса.Колонки.Добавить("СрокДействия");
			ТаблицаЗапроса.Колонки.Добавить("ВерсияФормата");
			ТаблицаЗапроса.Колонки.Добавить("НомерДоверенности");
			ТаблицаЗапроса.Колонки.Добавить("РегистрационныйНомерДоверенности");
			ТаблицаЗапроса.Колонки.Добавить("СтатусДоверенности");
			ТаблицаЗапроса.Колонки.Добавить("Доверитель");
			ТаблицаЗапроса.Колонки.Добавить("Представитель");
			ТаблицаЗапроса.Колонки.Добавить("ПредставительФЛ_Фамилия");
			ТаблицаЗапроса.Колонки.Добавить("ПредставительФЛ_Имя");
			ТаблицаЗапроса.Колонки.Добавить("ПредставительФЛ_Отчество");
			ТаблицаЗапроса.Колонки.Добавить("КоличествоПредставителей");
			ТаблицаЗапроса.Колонки.Добавить("ОрганизацияСсылка");
			ТаблицаЗапроса.Колонки.Добавить("НаименованиеОрганизации");
			ТаблицаЗапроса.Колонки.Добавить("РегистрацияСсылка");
			ТаблицаЗапроса.Колонки.Добавить("КодРегистрации");
			ТаблицаЗапроса.Колонки.Добавить("КППРегистрации");
			ТаблицаЗапроса.Колонки.Добавить("ДоверенностьРегистрации");
			
			Если ПроверяемыеМЧДФНС <> Неопределено И ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
				И ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Исп.МЧД един.фор.для ФНС") Тогда
				
				ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
				Если ТипЗнч(ПроверяемыеМЧДФНС) = Тип("Массив") ИЛИ ТипЗнч(ПроверяемыеМЧДФНС) = Тип("ФиксированныйМассив") Тогда
					МассивПроверяемыхМЧДФНС = ПроверяемыеМЧДФНС
				Иначе
					МассивПроверяемыхМЧДФНС = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПроверяемыеМЧДФНС);
				КонецЕсли;
				
				ЕстьРеквизитОрганизацииНаименованиеСокращенное = Неопределено;
				Для каждого ПроверяемаяМЧДФНС Из МассивПроверяемыхМЧДФНС Цикл
					Если ТипЗнч(ПроверяемаяМЧДФНС) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
						ЕстьПолномочиеФНС = Ложь;
						МассивПолномочий = ПолномочияМЧДЕдиногоФормата(ПроверяемаяМЧДФНС);
						Для каждого КодПолномочия Из МассивПолномочий Цикл
							КодПолномочияВРег = ВРег(КодПолномочия);
							Если СтрНайти(КодПолномочияВРег, "_FNS") <> 0 Тогда
								ЕстьПолномочиеФНС = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЕстьПолномочиеФНС Тогда
							ОрганизацияСсылка = ОрганизацияМЧДЕдиногоФормата(ПроверяемаяМЧДФНС);
							Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
								ДанныеДоверенности =
									Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ДанныеМЧДЕдиногоФормата(ПроверяемаяМЧДФНС);
								
								Если ДанныеДоверенности <> Неопределено Тогда
									Запрос = Новый Запрос(
										"ВЫБРАТЬ РАЗРЕШЕННЫЕ
										|	&НаименованиеОрганизации КАК НаименованиеОрганизации,
										|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияСсылка,
										|	РегистрацииВНалоговомОргане.Код КАК КодРегистрации,
										|	РегистрацииВНалоговомОргане.КПП КАК КППРегистрации,
										|	ЕСТЬNULL(РегистрацииВНалоговомОрганеПодписанты.Доверенность,
										|		РегистрацииВНалоговомОргане.Доверенность) КАК ДоверенностьРегистрации
										|ИЗ
										|	Справочник.Организации КАК Организации
										|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
										|		ПО РегистрацииВНалоговомОргане.Владелец = Организации.Ссылка
										|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане.Подписанты КАК РегистрацииВНалоговомОрганеПодписанты
										|		ПО РегистрацииВНалоговомОрганеПодписанты.Ссылка = РегистрацииВНалоговомОргане.Ссылка
										|			И РегистрацииВНалоговомОрганеПодписанты.Представитель = &Представитель
										|ГДЕ
										|	Организации.Ссылка = &Организация
										|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
										|
										|УПОРЯДОЧИТЬ ПО
										|	РегистрацииВНалоговомОргане.Код,
										|	РегистрацииВНалоговомОргане.КПП,
										|	РегистрацииВНалоговомОргане.Ссылка");
									Если ЕстьРеквизитОрганизацииНаименованиеСокращенное = Неопределено Тогда
										ЕстьРеквизитОрганизацииНаименованиеСокращенное =
											Метаданные.Справочники.Организации.Реквизиты.Найти("НаименованиеСокращенное") <> Неопределено;
									КонецЕсли;
									Если ЕстьРеквизитОрганизацииНаименованиеСокращенное Тогда
										Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеОрганизации", "Организации.НаименованиеСокращенное");
									Иначе
										Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеОрганизации", "Организации.Наименование");
									КонецЕсли;
									Запрос.УстановитьПараметр("Организация", 	ОрганизацияСсылка);
									Запрос.УстановитьПараметр("Представитель", 	ДанныеДоверенности.Представитель);
									ТаблицаРегистраций = Запрос.Выполнить().Выгрузить();
									
									Для каждого СтрокаРегистрации Из ТаблицаРегистраций Цикл
										СтрокаТаблицы = ТаблицаЗапроса.Добавить();
										СтрокаТаблицы.СсылкаМЧДФНС 						= ПроверяемаяМЧДФНС;
										СтрокаТаблицы.ДатаВыдачи 						= ДанныеДоверенности.ДатаВыдачи;
										СтрокаТаблицы.ДатаОкончания 					= ДанныеДоверенности.ДатаОкончания;
										СтрокаТаблицы.СрокДействия 						= "";
										СтрокаТаблицы.ВерсияФормата 					= ДанныеДоверенности.ВерсияФормата;
										СтрокаТаблицы.НомерДоверенности 				= ДанныеДоверенности.НомерДоверенности;
										СтрокаТаблицы.РегистрационныйНомерДоверенности 	= ДанныеДоверенности.РегистрационныйНомерДоверенности;
										СтрокаТаблицы.СтатусДоверенности 				= Перечисления.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано;
										СтрокаТаблицы.Доверитель 						= ОрганизацияСсылка;
										СтрокаТаблицы.Представитель 					= ДанныеДоверенности.Представитель;
										СтрокаТаблицы.ПредставительФЛ_Фамилия 			= ДанныеДоверенности.ПредставительФЛ_Фамилия;
										СтрокаТаблицы.ПредставительФЛ_Имя 				= ДанныеДоверенности.ПредставительФЛ_Имя;
										СтрокаТаблицы.ПредставительФЛ_Отчество 			= ДанныеДоверенности.ПредставительФЛ_Отчество;
										СтрокаТаблицы.КоличествоПредставителей 			= ДанныеДоверенности.КоличествоПредставителей;
										СтрокаТаблицы.ОрганизацияСсылка 				= ОрганизацияСсылка;
										СтрокаТаблицы.НаименованиеОрганизации 			= СтрокаРегистрации.НаименованиеОрганизации;
										СтрокаТаблицы.РегистрацияСсылка 				= СтрокаРегистрации.РегистрацияСсылка;
										СтрокаТаблицы.КодРегистрации 					= СтрокаРегистрации.КодРегистрации;
										СтрокаТаблицы.КППРегистрации 					= СтрокаРегистрации.КППРегистрации;
										СтрокаТаблицы.ДоверенностьРегистрации 			= СтрокаРегистрации.ДоверенностьРегистрации;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаЗапроса = Неопределено Тогда
			Запрос.УстановитьПараметр("ИгнорируемыеЗарегистрированныеМЧДФНС", ИгнорируемыеЗарегистрированныеМЧДФНС);
			УстановитьПараметрыПодключенияОтключенияМЧД(Запрос, ПроверяемыеМЧДФНС, ВыбранныеОрганизации);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		ТаблицыЗапросов.Добавить(ТаблицаЗапроса);
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Для ИндексЗапроса = 0 По МаксимальныйИндексЗапроса - МинимальныйИндексЗапроса Цикл
		Для каждого СтрокаТаблицы Из ТаблицыЗапросов[ИндексЗапроса] Цикл
			КоличествоДоверенностей = Результат.Количество();
			СсылкаМЧДФНС = ?(КоличествоДоверенностей > 0, Результат[КоличествоДоверенностей - 1].СсылкаМЧДФНС, Неопределено);
			
			Если СсылкаМЧДФНС = СтрокаТаблицы.СсылкаМЧДФНС Тогда
				СвойстваДоверенности = Результат[КоличествоДоверенностей - 1];
				
			Иначе
				ФИОПредставителя = "";
				Если ТипЗнч(СтрокаТаблицы.Представитель) = Тип("СправочникСсылка.Организации")
					И СтрокаТаблицы.Представитель = СтрокаТаблицы.Доверитель
					ИЛИ ТипЗнч(СтрокаТаблицы.Представитель) = Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФИОПредставителя = ФИОМЧДФНС(СтрокаТаблицы.СсылкаМЧДФНС,
						Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ, СтрокаТаблицы);
					Если ЗначениеЗаполнено(ФИОПредставителя)
						И ТипЗнч(СтрокаТаблицы.Представитель) = Тип("СправочникСсылка.Организации") Тогда
						
						СтрокаТаблицы.Представитель = ДокументооборотСКОВызовСервера.НайтиФизическоеЛицо(ФИОПредставителя);
						ФИОПредставителя = "";
					КонецЕсли;
				КонецЕсли;
				
				ДоверенностьМожноПодставитьВРегистрацию = (ТипЗнч(СтрокаТаблицы.Представитель) = Тип("СправочникСсылка.Контрагенты")
					ИЛИ ТипЗнч(СтрокаТаблицы.Представитель) = Тип("СправочникСсылка.ФизическиеЛица"))
					И СтрокаТаблицы.КоличествоПредставителей <= 1;
				
				СвойстваДоверенности = Новый Структура;
				СвойстваДоверенности.Вставить("СсылкаМЧДФНС", 								СтрокаТаблицы.СсылкаМЧДФНС);
				СвойстваДоверенности.Вставить("ДатаВыдачи", 								СтрокаТаблицы.ДатаВыдачи);
				СвойстваДоверенности.Вставить("ДатаОкончания", 								СтрокаТаблицы.ДатаОкончания);
				СвойстваДоверенности.Вставить("СрокДействия", 								СтрокаТаблицы.СрокДействия);
				СвойстваДоверенности.Вставить("ВерсияФормата", 								СтрокаТаблицы.ВерсияФормата);
				СвойстваДоверенности.Вставить("НомерДоверенности", 							СтрокаТаблицы.НомерДоверенности);
				СвойстваДоверенности.Вставить("РегистрационныйНомерДоверенности", 			СтрокаТаблицы.РегистрационныйНомерДоверенности);
				СвойстваДоверенности.Вставить("СтатусДоверенности", 						СтрокаТаблицы.СтатусДоверенности);
				СвойстваДоверенности.Вставить("Доверитель", 								СтрокаТаблицы.Доверитель);
				СвойстваДоверенности.Вставить("Представитель", 								СтрокаТаблицы.Представитель);
				Если ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
					И ТипЗнч(СтрокаТаблицы.СсылкаМЧДФНС) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
					СвойстваДоверенности.Вставить("ПредставительФЛ_Фамилия", 				СтрокаТаблицы.ПредставительФЛ_Фамилия);
					СвойстваДоверенности.Вставить("ПредставительФЛ_Имя", 					СтрокаТаблицы.ПредставительФЛ_Имя);
					СвойстваДоверенности.Вставить("ПредставительФЛ_Отчество", 				СтрокаТаблицы.ПредставительФЛ_Отчество);
				КонецЕсли;
				СвойстваДоверенности.Вставить("КоличествоПредставителей", 					СтрокаТаблицы.КоличествоПредставителей);
				СвойстваДоверенности.Вставить("ФИОПредставителя", 							ФИОПредставителя);
				СвойстваДоверенности.Вставить("ОрганизацияСсылка", 							СтрокаТаблицы.ОрганизацияСсылка);
				СвойстваДоверенности.Вставить("НаименованиеОрганизации", 					СтрокаТаблицы.НаименованиеОрганизации);
				СвойстваДоверенности.Вставить("РегистрацииВНалоговомОргане", 				Новый Массив);
				СвойстваДоверенности.Вставить("ДоверенностьЕстьВРегистрациях", 				Ложь);
				СвойстваДоверенности.Вставить("ДоверенностьМожноПодставитьВРегистрацию", 	ДоверенностьМожноПодставитьВРегистрацию);
				Результат.Добавить(СвойстваДоверенности);
				КоличествоДоверенностей = КоличествоДоверенностей + 1;
			КонецЕсли;
			
			КоличествоРегистрацийДоверенности = Результат[КоличествоДоверенностей - 1].РегистрацииВНалоговомОргане.Количество();
			Если КоличествоРегистрацийДоверенности = 0
				ИЛИ Результат[КоличествоДоверенностей - 1].РегистрацииВНалоговомОргане[
				КоличествоРегистрацийДоверенности - 1].РегистрацияСсылка <> СтрокаТаблицы.РегистрацияСсылка Тогда
				
				СвойстваРегистрации = Новый Структура;
				СвойстваРегистрации.Вставить("РегистрацияСсылка", 			СтрокаТаблицы.РегистрацияСсылка);
				СвойстваРегистрации.Вставить("КодРегистрации", 				СтрокаТаблицы.КодРегистрации);
				СвойстваРегистрации.Вставить("КППРегистрации", 				СтрокаТаблицы.КППРегистрации);
				СвойстваРегистрации.Вставить("ДоверенностьРегистрации", 	СтрокаТаблицы.ДоверенностьРегистрации);
				Результат[КоличествоДоверенностей - 1].РегистрацииВНалоговомОргане.Добавить(СвойстваРегистрации);
				
				Если СтрокаТаблицы.ДоверенностьРегистрации = СтрокаТаблицы.СсылкаМЧДФНС Тогда
					Результат[КоличествоДоверенностей - 1].ДоверенностьЕстьВРегистрациях = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НедействительныеМЧДФНС(
		НоваяИгнорируемаяНедействительнаяМЧДФНС = Неопределено,
		ПроверяемыеМЧДФНС = Неопределено,
		ВыбранныеОрганизации = Неопределено,
		СтатусМЧДФНС = Неопределено) Экспорт
	
	ИгнорируемыеНедействительныеМЧДФНС = Неопределено;
	Если НоваяИгнорируемаяНедействительнаяМЧДФНС <> Ложь Тогда
		ИгнорируемыеНедействительныеМЧДФНС = ХранилищеОбщихНастроек.Загрузить(
			"ДокументооборотСКонтролирующимиОрганами_ИгнорируемыеНедействительныеМЧДФНС");
	КонецЕсли;
	Если ИгнорируемыеНедействительныеМЧДФНС = Неопределено Тогда
		ИгнорируемыеНедействительныеМЧДФНС = Новый Массив;
	КонецЕсли;
	
	Если НоваяИгнорируемаяНедействительнаяМЧДФНС <> Неопределено И НоваяИгнорируемаяНедействительнаяМЧДФНС <> Ложь Тогда
		Если ИгнорируемыеНедействительныеМЧДФНС.Найти(НоваяИгнорируемаяНедействительнаяМЧДФНС) = Неопределено Тогда
			ИгнорируемыеНедействительныеМЧДФНС.Добавить(НоваяИгнорируемаяНедействительнаяМЧДФНС);
			ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_ИгнорируемыеНедействительныеМЧДФНС",,
				ИгнорируемыеНедействительныеМЧДФНС);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	// объединение запросов с колонками неограниченной длины невозможно
	МинимальныйИндексЗапроса = 0;
	Если ПроверяемыеМЧДФНС <> Неопределено И ТипЗнч(ПроверяемыеМЧДФНС) <> Тип("Массив")
		И ТипЗнч(ПроверяемыеМЧДФНС) <> Тип("ФиксированныйМассив")
		И ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует() Тогда
		
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		Если ТипЗнч(ПроверяемыеМЧДФНС) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
			МинимальныйИндексЗапроса = 2;
		КонецЕсли;
	КонецЕсли;
	МаксимальныйИндексЗапроса = 2;
	ТаблицыЗапросов = Новый Массив;
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "";
	Для ИндексЗапроса = МинимальныйИндексЗапроса По МаксимальныйИндексЗапроса Цикл
		ТаблицаЗапроса = Неопределено;
		Если ИндексЗапроса = 0 Тогда
			Запрос = Новый Запрос(
				ЗапросМЧДВРегистрациях() +
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка КАК СсылкаМЧДФНС,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаВыдачи КАК ДатаВыдачи,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОкончания КАК ДатаОкончания,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.СрокДействия КАК СрокДействия,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.НомерДоверенности КАК НомерДоверенности,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.РегистрационныйНомерДоверенности КАК РегистрационныйНомерДоверенности,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус КАК СтатусДоверенности,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.КоличествоПредставителей КАК КоличествоПредставителей,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Владелец КАК ОрганизацияДоверенности,
				|	Организации.Ссылка КАК ОрганизацияСсылка,
				|	&НаименованиеОрганизации КАК НаименованиеОрганизации,
				|	РегистрацииВНО.Ссылка КАК РегистрацияСсылка,
				|	РегистрацииВНО.Код КАК КодРегистрации,
				|	РегистрацииВНО.КПП КАК КППРегистрации,
				|	РегистрацииВНО.Доверенность КАК ДоверенностьРегистрации
				|ИЗ
				|	&РегистрацииВНО КАК РегистрацииВНО
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК МашиночитаемыеДоверенностиРаспределенныйРеестр
				|		ПО (МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка = РегистрацииВНО.Доверенность)"
							+ ?(НоваяИгнорируемаяНедействительнаяМЧДФНС = Ложь, "", "
				|			И (МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус =
				|				ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отозвано)
				|				ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус =
				|				ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.ИстекСрокДействия))") + "
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
				|		ПО (Организации.Ссылка = РегистрацииВНО.Владелец)
				|ГДЕ
				|	НЕ МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка В (&ИгнорируемыеНедействительныеМЧДФНС)
				|	И (&ПроверяемыеМЧДФНСНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка В (&ПроверяемыеМЧДФНС))
				|	И (&ВыбранныеОрганизацииНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.Владелец В (&ВыбранныеОрганизации))
				|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования = """"
				|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования ЕСТЬ NULL)"
					+ ?(НоваяИгнорируемаяНедействительнаяМЧДФНС = Ложь, "", "
				|	И НЕ МашиночитаемыеДоверенностиРаспределенныйРеестр.ПометкаУдаления
				|	И НЕ Организации.ПометкаУдаления") + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОкончания,
				|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка,
				|	Организации.Ссылка,
				|	РегистрацииВНО.Код,
				|	РегистрацииВНО.КПП,
				|	РегистрацииВНО.Ссылка");
			
		ИначеЕсли ИндексЗапроса = 1 Тогда
			Запрос = Новый Запрос(
				ЗапросМЧДВРегистрациях() + 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	МашиночитаемыеДоверенностиФНС.Ссылка КАК СсылкаМЧДФНС,
				|	МашиночитаемыеДоверенностиФНС.ДатаВыдачи КАК ДатаВыдачи,
				|	МашиночитаемыеДоверенностиФНС.ДатаОкончания КАК ДатаОкончания,
				|	МашиночитаемыеДоверенностиФНС.СрокДействия КАК СрокДействия,
				|	МашиночитаемыеДоверенностиФНС.НомерДоверенности КАК НомерДоверенности,
				|	МашиночитаемыеДоверенностиФНС.РегистрационныйНомерДоверенности КАК РегистрационныйНомерДоверенности,
				|	ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отозвано) КАК СтатусДоверенности,
				|	МашиночитаемыеДоверенностиФНС.КоличествоПредставителей КАК КоличествоПредставителей,
				|	МашиночитаемыеДоверенностиФНС.Организация КАК ОрганизацияДоверенности,
				|	Организации.Ссылка КАК ОрганизацияСсылка,
				|	&НаименованиеОрганизации КАК НаименованиеОрганизации,
				|	РегистрацииВНО.Ссылка КАК РегистрацияСсылка,
				|	РегистрацииВНО.Код КАК КодРегистрации,
				|	РегистрацииВНО.КПП КАК КППРегистрации,
				|	РегистрацииВНО.Доверенность КАК ДоверенностьРегистрации
				|ИЗ
				|	&РегистрацииВНО КАК РегистрацииВНО
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиФНС КАК МашиночитаемыеДоверенностиФНС
				|		ПО (МашиночитаемыеДоверенностиФНС.Ссылка = РегистрацииВНО.Доверенность)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
				|		ПО (Организации.Ссылка = РегистрацииВНО.Владелец)" + ?(НоваяИгнорируемаяНедействительнаяМЧДФНС = Ложь, "", "
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЦиклыОбмена КАК ЦиклыОбмена
				|		ПО (ЦиклыОбмена.Предмет = МашиночитаемыеДоверенностиФНС.Ссылка)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
				|		ПО (ТранспортноеСообщение.ЦиклОбмена = ЦиклыОбмена.Ссылка)
				|			И (ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО))
				|			И (ТранспортноеСообщение.ПротоколСОшибкой <> ИСТИНА)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
				|		ПО (ЖурналОтправокВКонтролирующиеОрганы.Ссылка = МашиночитаемыеДоверенностиФНС.Ссылка)") + "
				|ГДЕ
				|	" + ?(НоваяИгнорируемаяНедействительнаяМЧДФНС = Ложь, "",
					"ЖурналОтправокВКонтролирующиеОрганы.СтатусОтправки = &СтатусОтправки
				|	И ") + "НЕ МашиночитаемыеДоверенностиФНС.Ссылка В (&ИгнорируемыеНедействительныеМЧДФНС)
				|	И (&ПроверяемыеМЧДФНСНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиФНС.Ссылка В (&ПроверяемыеМЧДФНС))
				|	И (&ВыбранныеОрганизацииНеЗаданы
				|			ИЛИ МашиночитаемыеДоверенностиФНС.Организация В (&ВыбранныеОрганизации))"
					+ ?(НоваяИгнорируемаяНедействительнаяМЧДФНС = Ложь, "", "
				|	И НЕ МашиночитаемыеДоверенностиФНС.ПометкаУдаления
				|	И НЕ Организации.ПометкаУдаления
				|	И НЕ ЦиклыОбмена.ПометкаУдаления
				|	И НЕ ТранспортноеСообщение.ПометкаУдаления") + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	МашиночитаемыеДоверенностиФНС.ДатаОкончания,
				|	МашиночитаемыеДоверенностиФНС.Ссылка,
				|	Организации.Ссылка,
				|	РегистрацииВНО.Код,
				|	РегистрацииВНО.КПП,
				|	РегистрацииВНО.Ссылка");
			
			Если НоваяИгнорируемаяНедействительнаяМЧДФНС <> Ложь Тогда
				Запрос.УстановитьПараметр("СтатусОтправки", "Отозвано");
			КонецЕсли;
			
		Иначе
			ТаблицаЗапроса = Новый ТаблицаЗначений;
			ТаблицаЗапроса.Колонки.Добавить("СсылкаМЧДФНС");
			ТаблицаЗапроса.Колонки.Добавить("ДатаВыдачи");
			ТаблицаЗапроса.Колонки.Добавить("ДатаОкончания");
			ТаблицаЗапроса.Колонки.Добавить("СрокДействия");
			ТаблицаЗапроса.Колонки.Добавить("НомерДоверенности");
			ТаблицаЗапроса.Колонки.Добавить("РегистрационныйНомерДоверенности");
			ТаблицаЗапроса.Колонки.Добавить("СтатусДоверенности");
			ТаблицаЗапроса.Колонки.Добавить("ПредставительФЛ_Фамилия");
			ТаблицаЗапроса.Колонки.Добавить("ПредставительФЛ_Имя");
			ТаблицаЗапроса.Колонки.Добавить("ПредставительФЛ_Отчество");
			ТаблицаЗапроса.Колонки.Добавить("КоличествоПредставителей");
			ТаблицаЗапроса.Колонки.Добавить("ОрганизацияДоверенности");
			ТаблицаЗапроса.Колонки.Добавить("ОрганизацияСсылка");
			ТаблицаЗапроса.Колонки.Добавить("НаименованиеОрганизации");
			ТаблицаЗапроса.Колонки.Добавить("РегистрацияСсылка");
			ТаблицаЗапроса.Колонки.Добавить("КодРегистрации");
			ТаблицаЗапроса.Колонки.Добавить("КППРегистрации");
			ТаблицаЗапроса.Колонки.Добавить("ДоверенностьРегистрации");
			
			Если ПроверяемыеМЧДФНС <> Неопределено И ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
				И ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Исп.МЧД един.фор.для ФНС") Тогда
				
				ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
				Если ТипЗнч(ПроверяемыеМЧДФНС) = Тип("Массив") ИЛИ ТипЗнч(ПроверяемыеМЧДФНС) = Тип("ФиксированныйМассив") Тогда
					МассивПроверяемыхМЧДФНС = ПроверяемыеМЧДФНС
				Иначе
					МассивПроверяемыхМЧДФНС = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПроверяемыеМЧДФНС);
				КонецЕсли;
				
				ЕстьРеквизитОрганизацииНаименованиеСокращенное = Неопределено;
				Для каждого ПроверяемаяМЧДФНС Из МассивПроверяемыхМЧДФНС Цикл
					Если ТипЗнч(ПроверяемаяМЧДФНС) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
						ЕстьПолномочиеФНС = Ложь;
						МассивПолномочий = ПолномочияМЧДЕдиногоФормата(ПроверяемаяМЧДФНС);
						Для каждого КодПолномочия Из МассивПолномочий Цикл
							КодПолномочияВРег = ВРег(КодПолномочия);
							Если СтрНайти(КодПолномочияВРег, "_FNS") <> 0 Тогда
								ЕстьПолномочиеФНС = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЕстьПолномочиеФНС Тогда
							ОрганизацияСсылка = ОрганизацияМЧДЕдиногоФормата(ПроверяемаяМЧДФНС);
							Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
								ДанныеДоверенности =
									Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ДанныеМЧДЕдиногоФормата(ПроверяемаяМЧДФНС);
								
								Если ДанныеДоверенности <> Неопределено Тогда
									Запрос = Новый Запрос(
										"ВЫБРАТЬ РАЗРЕШЕННЫЕ
										|	Организации.Ссылка КАК ОрганизацияСсылка,
										|	&НаименованиеОрганизации КАК НаименованиеОрганизации,
										|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияСсылка,
										|	РегистрацииВНалоговомОргане.Код КАК КодРегистрации,
										|	РегистрацииВНалоговомОргане.КПП КАК КППРегистрации
										|ИЗ
										|	Справочник.Организации КАК Организации
										|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
										|		ПО РегистрацииВНалоговомОргане.Владелец = Организации.Ссылка
										|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане.Подписанты КАК РегистрацииВНалоговомОрганеПодписанты
										|		ПО РегистрацииВНалоговомОрганеПодписанты.Ссылка = РегистрацииВНалоговомОргане.Ссылка
										|ГДЕ
										|	(РегистрацииВНалоговомОргане.Доверенность = &ПроверяемаяМЧДФНС
										|		ИЛИ РегистрацииВНалоговомОрганеПодписанты.Доверенность = &ПроверяемаяМЧДФНС)
										|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
										|
										|УПОРЯДОЧИТЬ ПО
										|	РегистрацииВНалоговомОргане.Код,
										|	РегистрацииВНалоговомОргане.КПП,
										|	РегистрацииВНалоговомОргане.Ссылка");
									Если ЕстьРеквизитОрганизацииНаименованиеСокращенное = Неопределено Тогда
										ЕстьРеквизитОрганизацииНаименованиеСокращенное =
											Метаданные.Справочники.Организации.Реквизиты.Найти("НаименованиеСокращенное") <> Неопределено;
									КонецЕсли;
									Если ЕстьРеквизитОрганизацииНаименованиеСокращенное Тогда
										Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеОрганизации", "Организации.НаименованиеСокращенное");
									Иначе
										Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеОрганизации", "Организации.Наименование");
									КонецЕсли;
									Запрос.УстановитьПараметр("ПроверяемаяМЧДФНС", ПроверяемаяМЧДФНС);
									ТаблицаРегистраций = Запрос.Выполнить().Выгрузить();
									
									Для каждого СтрокаРегистрации Из ТаблицаРегистраций Цикл
										СтрокаТаблицы = ТаблицаЗапроса.Добавить();
										СтрокаТаблицы.СсылкаМЧДФНС 						= ПроверяемаяМЧДФНС;
										СтрокаТаблицы.ДатаВыдачи 						= ДанныеДоверенности.ДатаВыдачи;
										СтрокаТаблицы.ДатаОкончания 					= ДанныеДоверенности.ДатаОкончания;
										СтрокаТаблицы.СрокДействия 						= "";
										СтрокаТаблицы.НомерДоверенности 				= ДанныеДоверенности.НомерДоверенности;
										СтрокаТаблицы.РегистрационныйНомерДоверенности 	= ДанныеДоверенности.РегистрационныйНомерДоверенности;
										СтрокаТаблицы.СтатусДоверенности 				= ?(СтатусМЧДФНС = "Просрочена",
																						  Перечисления.СтатусыМашиночитаемойДоверенностиКО.ИстекСрокДействия,
																						  Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано);
										СтрокаТаблицы.ПредставительФЛ_Фамилия 			= ДанныеДоверенности.ПредставительФЛ_Фамилия;
										СтрокаТаблицы.ПредставительФЛ_Имя 				= ДанныеДоверенности.ПредставительФЛ_Имя;
										СтрокаТаблицы.ПредставительФЛ_Отчество 			= ДанныеДоверенности.ПредставительФЛ_Отчество;
										СтрокаТаблицы.КоличествоПредставителей 			= ДанныеДоверенности.КоличествоПредставителей;
										СтрокаТаблицы.ОрганизацияДоверенности 			= СтрокаРегистрации.ОрганизацияСсылка;
										СтрокаТаблицы.ОрганизацияСсылка 				= ОрганизацияСсылка;
										СтрокаТаблицы.НаименованиеОрганизации 			= СтрокаРегистрации.НаименованиеОрганизации;
										СтрокаТаблицы.РегистрацияСсылка 				= СтрокаРегистрации.РегистрацияСсылка;
										СтрокаТаблицы.КодРегистрации 					= СтрокаРегистрации.КодРегистрации;
										СтрокаТаблицы.КППРегистрации 					= СтрокаРегистрации.КППРегистрации;
										СтрокаТаблицы.ДоверенностьРегистрации 			= ПроверяемаяМЧДФНС;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаЗапроса = Неопределено Тогда
			Запрос.УстановитьПараметр("ИгнорируемыеНедействительныеМЧДФНС", ИгнорируемыеНедействительныеМЧДФНС);
			УстановитьПараметрыПодключенияОтключенияМЧД(Запрос, ПроверяемыеМЧДФНС, ВыбранныеОрганизации);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		ТаблицыЗапросов.Добавить(ТаблицаЗапроса);
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Для ИндексЗапроса = 0 По МаксимальныйИндексЗапроса - МинимальныйИндексЗапроса Цикл
		Для каждого СтрокаТаблицы Из ТаблицыЗапросов[ИндексЗапроса] Цикл
			КоличествоДоверенностей = Результат.Количество();
			СсылкаМЧДФНС = ?(КоличествоДоверенностей > 0, Результат[КоличествоДоверенностей - 1].СсылкаМЧДФНС, Неопределено);
			
			Если СсылкаМЧДФНС = СтрокаТаблицы.СсылкаМЧДФНС Тогда
				СвойстваДоверенности = Результат[КоличествоДоверенностей - 1];
				
			Иначе
				СвойстваДоверенности = Новый Структура;
				СвойстваДоверенности.Вставить("СсылкаМЧДФНС", 						СтрокаТаблицы.СсылкаМЧДФНС);
				СвойстваДоверенности.Вставить("ДатаВыдачи", 						СтрокаТаблицы.ДатаВыдачи);
				СвойстваДоверенности.Вставить("ДатаОкончания", 						СтрокаТаблицы.ДатаОкончания);
				СвойстваДоверенности.Вставить("СрокДействия", 						СтрокаТаблицы.СрокДействия);
				СвойстваДоверенности.Вставить("НомерДоверенности", 					СтрокаТаблицы.НомерДоверенности);
				СвойстваДоверенности.Вставить("РегистрационныйНомерДоверенности", 	СтрокаТаблицы.РегистрационныйНомерДоверенности);
				СвойстваДоверенности.Вставить("СтатусДоверенности", 				СтрокаТаблицы.СтатусДоверенности);
				Если ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
					И ТипЗнч(СтрокаТаблицы.СсылкаМЧДФНС) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
					СвойстваДоверенности.Вставить("ПредставительФЛ_Фамилия", 		СтрокаТаблицы.ПредставительФЛ_Фамилия);
					СвойстваДоверенности.Вставить("ПредставительФЛ_Имя", 			СтрокаТаблицы.ПредставительФЛ_Имя);
					СвойстваДоверенности.Вставить("ПредставительФЛ_Отчество", 		СтрокаТаблицы.ПредставительФЛ_Отчество);
				КонецЕсли;
				СвойстваДоверенности.Вставить("КоличествоПредставителей", 			СтрокаТаблицы.КоличествоПредставителей);
				СвойстваДоверенности.Вставить("ОрганизацияСсылка", 					СтрокаТаблицы.ОрганизацияДоверенности);
				СвойстваДоверенности.Вставить("НаименованиеОрганизации", 			СтрокаТаблицы.НаименованиеОрганизации);
				СвойстваДоверенности.Вставить("Организации", 						Новый Массив);
				СвойстваДоверенности.Вставить("РегистрацииВНалоговомОргане", 		Новый Массив);
				Результат.Добавить(СвойстваДоверенности);
				КоличествоДоверенностей = КоличествоДоверенностей + 1;
			КонецЕсли;
			
			КоличествоОргаизаций = СвойстваДоверенности.Организации.Количество();
			ОрганизацияСсылка = ?(КоличествоОргаизаций > 0,
				СвойстваДоверенности.Организации[КоличествоОргаизаций - 1].ОрганизацияСсылка, Неопределено);
			
			Если ОрганизацияСсылка <> СтрокаТаблицы.ОрганизацияСсылка Тогда
				СвойстваОрганизации = Новый Структура;
				СвойстваОрганизации.Вставить("ОрганизацияСсылка", 			СтрокаТаблицы.ОрганизацияСсылка);
				СвойстваОрганизации.Вставить("НаименованиеОрганизации", 	СтрокаТаблицы.НаименованиеОрганизации);
				СвойстваОрганизации.Вставить("РегистрацииВНалоговомОргане", Новый Массив);
				Результат[КоличествоДоверенностей - 1].Организации.Добавить(СвойстваОрганизации);
				КоличествоОргаизаций = КоличествоОргаизаций + 1;
			КонецЕсли;
			
			КоличествоРегистрацийДоверенности = Результат[КоличествоДоверенностей - 1].Организации[
				КоличествоОргаизаций - 1].РегистрацииВНалоговомОргане.Количество();
			Если КоличествоРегистрацийДоверенности = 0 ИЛИ Результат[КоличествоДоверенностей - 1].Организации[
				КоличествоОргаизаций - 1].РегистрацииВНалоговомОргане[КоличествоРегистрацийДоверенности - 1].РегистрацияСсылка <>
				СтрокаТаблицы.РегистрацияСсылка Тогда
				
				СвойстваРегистрации = Новый Структура;
				СвойстваРегистрации.Вставить("РегистрацияСсылка", 	СтрокаТаблицы.РегистрацияСсылка);
				СвойстваРегистрации.Вставить("КодРегистрации", 		СтрокаТаблицы.КодРегистрации);
				СвойстваРегистрации.Вставить("КППРегистрации", 		СтрокаТаблицы.КППРегистрации);
				Результат[КоличествоДоверенностей - 1].Организации[КоличествоОргаизаций - 1].РегистрацииВНалоговомОргане.Добавить(
					СвойстваРегистрации);
			КонецЕсли;
			
			КоличествоРегистрацийДоверенности = Результат[КоличествоДоверенностей - 1].РегистрацииВНалоговомОргане.Количество();
			Если КоличествоРегистрацийДоверенности = 0
				ИЛИ Результат[КоличествоДоверенностей - 1].РегистрацииВНалоговомОргане[
				КоличествоРегистрацийДоверенности - 1].РегистрацияСсылка <> СтрокаТаблицы.РегистрацияСсылка Тогда
				
				СвойстваРегистрации = Новый Структура;
				СвойстваРегистрации.Вставить("РегистрацияСсылка", 			СтрокаТаблицы.РегистрацияСсылка);
				СвойстваРегистрации.Вставить("КодРегистрации", 				СтрокаТаблицы.КодРегистрации);
				СвойстваРегистрации.Вставить("КППРегистрации", 				СтрокаТаблицы.КППРегистрации);
				СвойстваРегистрации.Вставить("ДоверенностьРегистрации", 	СтрокаТаблицы.ДоверенностьРегистрации);
				СвойстваРегистрации.Вставить("ОрганизацияСсылка", 			СтрокаТаблицы.ОрганизацияСсылка);
				СвойстваРегистрации.Вставить("НаименованиеОрганизации", 	СтрокаТаблицы.НаименованиеОрганизации);
				Результат[КоличествоДоверенностей - 1].РегистрацииВНалоговомОргане.Добавить(СвойстваРегистрации);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РегистрацииВНалоговомОргане(ОрганизацияСсылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияСсылка,
		|	РегистрацииВНалоговомОргане.Владелец КАК ОрганизацияСсылка,
		|	РегистрацииВНалоговомОргане.Код КАК КодРегистрации,
		|	РегистрацииВНалоговомОргане.КПП КАК КППРегистрации,
		|	РегистрацииВНалоговомОргане.НаименованиеИФНС КАК НаименованиеИФНС,
		|	ЕСТЬNULL(ТЧПодписанты.ДокументПредставителя, РегистрацииВНалоговомОргане.ДокументПредставителя) КАК ДокументПредставителя,
		|	ЕСТЬNULL(ТЧПодписанты.Представитель, РегистрацииВНалоговомОргане.Представитель) КАК Представитель,
		|	ЕСТЬNULL(ТЧПодписанты.УполномоченноеЛицоПредставителя, РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя) КАК УполномоченноеЛицоПредставителя,
		|	ЕСТЬNULL(ТЧПодписанты.Доверенность, РегистрацииВНалоговомОргане.Доверенность) КАК Доверенность
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане.Подписанты КАК ТЧПодписанты
		|		ПО (ТЧПодписанты.Ссылка = РегистрацииВНалоговомОргане.Ссылка)
		|			И (ТЧПодписанты.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Владелец В(&ОрганизацияСсылка)");
	
	Если ТипЗнч(ОрганизацияСсылка) = Тип("Массив") ИЛИ ТипЗнч(ОрганизацияСсылка) = Тип("ФиксированныйМассив") Тогда
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОрганизацияСсылка);
	Иначе
		Организации = ОрганизацияСсылка;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организации);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция КодыНалоговыхОргановМЧДФНС(ДоверенностьСсылка) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НалоговыеОрганыДействия.КодНалоговогоОргана КАК КодНалоговогоОргана
			|ИЗ
			|	Справочник.МашиночитаемыеДоверенностиФНС.НалоговыеОрганыДействия КАК НалоговыеОрганыДействия
			|ГДЕ
			|	НалоговыеОрганыДействия.Ссылка = &СсылкаМЧДФНС");
		
	ИначеЕсли ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НалоговыеОрганыДействия.КодНалоговогоОргана КАК КодНалоговогоОргана
			|ИЗ
			|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.НалоговыеОрганыДействия КАК НалоговыеОрганыДействия
			|ГДЕ
			|	НалоговыеОрганыДействия.Ссылка = &СсылкаМЧДФНС");
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ДанныеДоверенности =
			Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ДанныеМЧДЕдиногоФормата(ДоверенностьСсылка);
		Результат = Новый Массив;
		Если ДанныеДоверенности <> Неопределено Тогда
			Для каждого КодНОДействия Из ДанныеДоверенности.КодыНО Цикл
				Результат.Добавить(КодНОДействия.КодНО);
			КонецЦикла;
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СсылкаМЧДФНС", ДоверенностьСсылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодНалоговогоОргана");
	
КонецФункции

Функция ЗначенияРеквизитовМЧД(ДоверенностьСсылка, Реквизиты) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС")
		ИЛИ ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоверенностьСсылка, Реквизиты);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		Возврат Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ДанныеМЧДЕдиногоФормата(ДоверенностьСсылка,
			Реквизиты);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ФИОМЧДФНС(ДоверенностьСсылка, СубъектДоверенности, СтрокаТаблицы = Неопределено) Экспорт
	
	Выборка = Неопределено;
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ФИОМЧДФНС.Фамилия КАК Фамилия,
			|	ФИОМЧДФНС.Имя КАК Имя,
			|	ФИОМЧДФНС.Отчество КАК Отчество
			|ИЗ
			|	Справочник.МашиночитаемыеДоверенностиФНС.ФИО КАК ФИОМЧДФНС
			|ГДЕ
			|	ФИОМЧДФНС.Ссылка = &СсылкаМЧДФНС
			|	И ФИОМЧДФНС.Владелец = &СубъектДоверенности");
		
	ИначеЕсли ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ФИОМЧДФНС.Фамилия КАК Фамилия,
			|	ФИОМЧДФНС.Имя КАК Имя,
			|	ФИОМЧДФНС.Отчество КАК Отчество
			|ИЗ
			|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.ФИО КАК ФИОМЧДФНС
			|ГДЕ
			|	ФИОМЧДФНС.Ссылка = &СсылкаМЧДФНС
			|	И ФИОМЧДФНС.Владелец = &СубъектДоверенности");
		
	ИначеЕсли СтрокаТаблицы <> Неопределено И ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ДоверенностьСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		Выборка = Новый Структура;
		Выборка.Вставить("Фамилия", 	СтрокаТаблицы.ПредставительФЛ_Фамилия);
		Выборка.Вставить("Имя", 		СтрокаТаблицы.ПредставительФЛ_Имя);
		Выборка.Вставить("Отчество", 	СтрокаТаблицы.ПредставительФЛ_Отчество);
		
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Выборка = Неопределено Тогда
		Запрос.УстановитьПараметр("СсылкаМЧДФНС", 			ДоверенностьСсылка);
		Запрос.УстановитьПараметр("СубъектДоверенности", 	СубъектДоверенности);
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Выборка.Фамилия + ?(ЗначениеЗаполнено(Выборка.Фамилия) И ЗначениеЗаполнено(Выборка.Имя),
		" ", "") + Выборка.Имя + ?((ЗначениеЗаполнено(Выборка.Фамилия) ИЛИ ЗначениеЗаполнено(Выборка.Имя))
		И ЗначениеЗаполнено(Выборка.Отчество), " ", "") + Выборка.Отчество;
	
КонецФункции

Функция ВыгрузитьЗаявлениеНаОтменуМЧДРР(
		СправочникСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Истина,
		ПроверитьВыгрузку = Ложь,
		ПараметрыОперации = Неопределено) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ВыгрузитьЭлементВФайлОбменаДляОтмены(
		СправочникСсылка,
		ИдентификаторФайла,
		КодНалоговогоОрганаПолучателя,
		ОпределятьКодНалоговогоОрганаПолучателя,
		ФорматДоверенностиПоПриказуФНС,
		ПроверитьВыгрузку,
		ПараметрыОперации);
	
КонецФункции

Функция АвторизоватьсяНаСервереМЧДРР() Экспорт
	
	ПараметрыРезультатаАвторизации = ПараметрыСеанса.РезультатАвторизацииНаСервереМЧДРРСКО;
	Если ПараметрыРезультатаАвторизации <> Неопределено И ПараметрыРезультатаАвторизации.ДатаСеанса <> Неопределено
		И ПараметрыРезультатаАвторизации.РезультатАвторизации <> Неопределено Тогда
		
		ДатаСеанса = ТекущаяДатаСеанса();
		Если ПараметрыРезультатаАвторизации.ДатаСеанса >= ДатаСеанса - 60 * 60
			И ПараметрыРезультатаАвторизации.ДатаСеанса <= ДатаСеанса Тогда
			
			Возврат Новый Структура(ПараметрыРезультатаАвторизации.РезультатАвторизации);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 	Ложь);
	Результат.Вставить("АдресСервера", 			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ТокенДоступа", 			"");
	Результат.Вставить("ТекстОтвета", 			"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен токен доступа при авторизации на сервере МЧД распределенного реестра';
			|en = 'Не получен токен доступа при авторизации на сервере МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении токена доступа при авторизации на сервере МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении токена доступа при авторизации на сервере МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_grant",
		НСтр("ru = 'Некорректная авторизация на сервере МЧД распределенного реестра';
			|en = 'Некорректная авторизация на сервере МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unsupported_grant_type",
		НСтр("ru = 'Некорректный тип авторизации на сервере МЧД распределенного реестра';
			|en = 'Некорректный тип авторизации на сервере МЧД распределенного реестра'"));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/token", "/vst-oauth2/oauth/token");
	ПараметрыРесурсаНаСервере = "";
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
		ТикетАутентификацииИлиДанныеПользователя = ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки();
		
		Если ТикетАутентификацииИлиДанныеПользователя = Неопределено Тогда
			ВывестиИЗаписатьОшибкуМЧДРР(,,
				Новый Структура("ТекстОшибкиПоУмолчанию",
					НСтр("ru = 'Авторизация на сервере МЧД распределенного реестра невозможна, так как не заданы логин и пароль авторизации на Портале 1С:ИТС';
						|en = 'Авторизация на сервере МЧД распределенного реестра невозможна, так как не заданы логин и пароль авторизации на Портале 1С:ИТС'")));
			Возврат Результат;
		КонецЕсли;
		
		Если ТикетАутентификацииИлиДанныеПользователя.Свойство("Тикет") Тогда
			ПараметрыРесурсаНаСервере = "?ticket=" + КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Тикет,
				СпособКодированияСтроки.КодировкаURL);
		Иначе
			ПараметрыРесурсаНаСервере = "?login=" + КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Логин,
				СпособКодированияСтроки.КодировкаURL)
				+ "&password=" + КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Пароль,
				СпособКодированияСтроки.КодировкаURL)
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	Если НЕ СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("username", СвойстваСервераМЧДРР.ЛогинОператора);
		СтруктураЗапроса.Вставить("password", СвойстваСервераМЧДРР.ПарольОператора);
		СтруктураЗапроса.Вставить("grant_type", "password");
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗапросJSON = Новый ЗаписьJSON;
		ЗапросJSON.ОткрытьФайл(ИмяФайлаЗапроса, "utf-8");
		ЗаписатьJSON(ЗапросJSON, СтруктураЗапроса);
		ЗапросJSON.Закрыть();
		
		ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(СвойстваСервераМЧДРР.АдресСервера);
		
		Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
		Иначе
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP, ИмяФайлаОтвета);
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ТокенДоступа = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("access_token"),
			СтруктураОтвета.access_token, "");
		
		КодСостоянияПриНеверномЛогинеИлиПароле = 403;
		Если ОтветHTTP.КодСостояния = КодСостоянияПриНеверномЛогинеИлиПароле И СтруктураОтвета.Свойство("message") Тогда
			СброситьДанныеАутентификацииНаПорталеПоддержки();
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		Если НЕ СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыРезультатаАвторизации = ПараметрыРезультатаАвторизацииНаСервереМЧДРРСКО();
	ПараметрыРезультатаАвторизации.ДатаСеанса 			= ТекущаяДатаСеанса();
	ПараметрыРезультатаАвторизации.РезультатАвторизации = Новый ФиксированнаяСтруктура(Результат);
	ПараметрыСеанса.РезультатАвторизацииНаСервереМЧДРРСКО = Новый ФиксированнаяСтруктура(ПараметрыРезультатаАвторизации);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНомерМЧДРР(ТокенДоступа = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 	Ложь);
	Результат.Вставить("АдресСервера", 			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ТекстОтвета", 			"");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
			Возврат Результат;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен номер доверенности с сервера МЧД распределенного реестра';
			|en = 'Не получен номер доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении номера доверенности с сервера МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении номера доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/number", "/poar-webapp/integration/poa/generate-number");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

Функция ЗарегистрироватьМЧДРР(
		ИмяФайлаВыгрузки,
		ДанныеИлиАдресВыгрузки,
		ДанныеИлиАдресПодписи,
		ТокенДоступа = "",
		НомерДоверенности = "",
		СсылкаНаДоверенность = Неопределено,
		Настройки = Неопределено) Экспорт
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ЗаписатьСтатус", 					Ложь);
	НастройкиВызова.Вставить("ОтпечатокСертификатаАбонента", 	"");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	ДанныеВыгрузки = ?(ТипЗнч(ДанныеИлиАдресВыгрузки) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресВыгрузки), ПолучитьИзВременногоХранилища(ДанныеИлиАдресВыгрузки),
		ДанныеИлиАдресВыгрузки);
	ДанныеПодписи = ?(ТипЗнч(ДанныеИлиАдресПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресПодписи), ПолучитьИзВременногоХранилища(ДанныеИлиАдресПодписи),
		ДанныеИлиАдресПодписи);
	
	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
		ОбъектДоверенность.ИмяФайлаВыгрузки = ИмяФайлаВыгрузки;
		ОбъектДоверенность.ФайлВырузки = Новый ХранилищеЗначения(ДанныеВыгрузки,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеПодписи,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 		Ложь);
	Результат.Вставить("АдресСервера", 				СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("НомерДоверенности", 		"");
	Результат.Вставить("ХешДоверенности", 			"");
	Результат.Вставить("ИННДоверителя", 			"");
	Результат.Вставить("ТекстОтвета", 				"");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
			Возврат Результат;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор загрузки доверенности на сервер МЧД распределенного реестра';
			|en = 'Не получен идентификатор загрузки доверенности на сервер МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1';
			|en = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1';
			|en = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при загрузке доверенности на сервер МЧД распределенного реестра. %1';
			|en = 'Ошибка при загрузке доверенности на сервер МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/contract/pre_validation/failed",
		СтрШаблон(
			НСтр("ru = 'Регистрационный номер или имя файла регистрируемой доверенности ""%1"" уже используется';
				|en = 'Регистрационный номер или имя файла регистрируемой доверенности ""%1"" уже используется'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unknown-poa-type",
		СтрШаблон(
			НСтр("ru = 'Некорректный префикс имени файла доверенности ""%1"", невозможно определить тип доверенности';
				|en = 'Некорректный префикс имени файла доверенности ""%1"", невозможно определить тип доверенности'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.signature_is_invalid",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка валидности электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_cn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.certificate_cn_is_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.certificate_snils_is_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.certificate_ogrn_is_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.certificate_ogrnip_is_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка подписанта на соответствие данным сертификата электронной подписи доверенности ""%1"" или в качестве доверителя указан ИП';
				|en = 'Не пройдена проверка подписанта на соответствие данным сертификата электронной подписи доверенности ""%1"" или в качестве доверителя указан ИП'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя не указан в доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя не указан в доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.issuer_ogrnip_mismatch_with_certificate_ogrnip",
		СтрШаблон(
			НСтр("ru = 'ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""';
				|en = 'ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.issuer_snils_mismatch_with_certificate_snils",
		СтрШаблон(
			НСтр("ru = 'СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""';
				|en = 'СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН доверителя в доверенности не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРН доверителя в доверенности не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_inner_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.issuer_ogrn_mismatch_with_certificate_ogrn",
		СтрШаблон(
			НСтр("ru = 'ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""';
				|en = 'ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""';
				|en = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.issuer_signer_mismatch_with_egrul",
		СтрШаблон(
			НСтр("ru = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""';
				|en = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/nds_plus_api_exception",
		СтрШаблон(
			НСтр("ru = 'Ошибка сервиса NdsPlus API, может быть связана с временной недоступностью сервиса или неверным заполнением доверенности. Повторите попытку позже. Проверьте ИНН организации-доверителя для доверенности ""%1""';
				|en = 'Ошибка сервиса NdsPlus API, может быть связана с временной недоступностью сервиса или неверным заполнением доверенности. Повторите попытку позже. Проверьте ИНН организации-доверителя для доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныПрефиксовДляКодовОшибок.Вставить("/errors/poa.schematron_validation_failed",
		СтрШаблон(
			НСтр("ru = 'Ошибка проверки по XSD-схеме XML-файла доверенности ""%1""';
				|en = 'Ошибка проверки по XSD-схеме XML-файла доверенности ""%1""'"),
			НомерДоверенности));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poa", "/poar-webapp/integration/poa");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	// запись передаваемых файлов
	
	МассивИменФайлов = Новый Массив;
	
	СодержимоеФайла = "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""poa""; filename=""" + ИмяФайлаВыгрузки + """"
		+ Символы.ПС + "Content-Type: text/xml"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаДоверенности = ПолучитьИмяВременногоФайла();
	ТекстВыгрузки = ПолучитьСтрокуИзДвоичныхДанных(ДанныеВыгрузки, "windows-1251");
	ПолучитьДвоичныеДанныеИзСтроки(ТекстВыгрузки, "windows-1251", Истина).Записать(ИмяВременногоФайлаДоверенности);
	МассивИменФайлов.Добавить(ИмяВременногоФайлаДоверенности);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""signature""; filename=""" + ИмяФайлаВыгрузки + ".sig"""
		+ Символы.ПС + "Content-Type: application/octet-stream"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаПодписи = ПолучитьИмяВременногоФайла();
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251").Записать(ИмяВременногоФайлаПодписи);
	МассивИменФайлов.Добавить(ИмяВременногоФайлаПодписи);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr--";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	// объединение передаваемых файлов
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИменФайлов, ИмяФайлаЗапроса);
	Для каждого ИмяВременногоФайла Из МассивИменФайлов Цикл
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	КонецЦикла;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaId"),
			СтруктураОтвета.poaId, "");
		Результат.ИННДоверителя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerInn"),
			СтруктураОтвета.issuerInn, "");
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Если ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) И ЗначениеЗаполнено(СсылкаНаДоверенность)
		И НастройкиВызова.ЗаписатьСтатус Тогда
		
		ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
		ОбъектДоверенность.Статус =
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отправлено");
		ОбъектДоверенность.ДатаОтправки = ТекущаяДатаСеанса();
		ОбъектДоверенность.ДатаОбновленияСтатуса = ОбъектДоверенность.ДатаОтправки;
		ОбъектДоверенность.ИдентификаторТранзакции = Результат.ИдентификаторТранзакции;
		ОбъектДоверенность.ИмяФайлаВыгрузки = ИмяФайлаВыгрузки;
		ОбъектДоверенность.ОтпечатокСертификата = НастройкиВызова.ОтпечатокСертификатаАбонента;
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатусТранзакцииМЧДРР(ИдентификаторТранзакции, ТокенДоступа = "", НомерДоверенности = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 		Ложь);
	Результат.Вставить("АдресСервера", 				СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("СтатусТранзакции", 			"");
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ТекстОтвета", 				"");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
			Возврат Результат;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус обработки с сервера МЧД распределенного реестра';
			|en = 'Не получен статус обработки с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статус обработки с сервера МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении статус обработки с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена загрузка доверенности номер ""%1"" с идентификатором ""%2""';
				|en = 'Не найдена загрузка доверенности номер ""%1"" с идентификатором ""%2""'"),
			НомерДоверенности,
			ИдентификаторТранзакции));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/transactions?txId=" + ИдентификаторТранзакции,
		"/poar-webapp/integration/poa/" + ИдентификаторТранзакции + "/status");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.ДатаВремяТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("timestamp")
			И ЗначениеЗаполнено(СтруктураОтвета.timestamp),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.timestamp), Неопределено);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		Результат.СтатусТранзакции = "";
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧДРР(НомерДоверенности, ТокенДоступа = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 	Ложь);
	Результат.Вставить("АдресСервера", 			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ДатаРегистрации", 		Неопределено);
	Результат.Вставить("ДатаИзмененияСтатуса", 	Неопределено);
	Результат.Вставить("ПубличныйКлюч", 		"");
	Результат.Вставить("ТекстОтвета", 			"");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
			Возврат Результат;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус доверенности с сервера МЧД распределенного реестра';
			|en = 'Не получен статус доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статуса доверенности с сервера МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении статуса доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена доверенность номер ""%1""';
				|en = 'Не найдена доверенность номер ""%1""'"),
			НомерДоверенности));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poaopen?poaNumber=" + НомерДоверенности, "/poar-webapp/integration/poa/" + НомерДоверенности + "/public");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("id"),
			СтруктураОтвета.id, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ДатаВыдачи = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура")
			И СтруктураОтвета.Свойство("startDateTime") И ЗначениеЗаполнено(СтруктураОтвета.startDateTime),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.startDateTime),
			?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("startDate")
			И ЗначениеЗаполнено(СтруктураОтвета.startDate),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.startDate), Неопределено));
		Результат.ДатаОкончания = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура")
			И СтруктураОтвета.Свойство("endDateTime") И ЗначениеЗаполнено(СтруктураОтвета.endDateTime),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.endDateTime),
			?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("endDate")
			И ЗначениеЗаполнено(СтруктураОтвета.endDate), ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.endDate), Неопределено));
		Результат.ДатаРегистрации = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура")
			И СтруктураОтвета.Свойство("createdDateTime") И ЗначениеЗаполнено(СтруктураОтвета.createdDateTime),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.createdDateTime),
			?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("createdDate")
			И ЗначениеЗаполнено(СтруктураОтвета.createdDate),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.createdDate), Неопределено));
		Результат.ДатаИзмененияСтатуса = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура")
			И СтруктураОтвета.Свойство("statusDateTime") И ЗначениеЗаполнено(СтруктураОтвета.statusDateTime),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.statusDateTime),
			?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("statusDate")
			И ЗначениеЗаполнено(СтруктураОтвета.statusDate),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.statusDate), Неопределено));
		Результат.ПубличныйКлюч = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerPublicKey"),
			СтруктураОтвета.issuerPublicKey, "");
		Если ИспользуетсяРежимТестирования() Тогда
			ПараметрыМЧДФНС = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ПараметрыМЧДФНС");
			Если ПараметрыМЧДФНС <> Неопределено Тогда
				ПараметрыДоверенности = ПараметрыМЧДФНС[Результат.НомерДоверенности];
				Если ПараметрыДоверенности <> Неопределено И ПараметрыДоверенности.Свойство("ВозвращаемыйСтатус") Тогда
					Результат.СтатусДоверенности = ПараметрыДоверенности.ВозвращаемыйСтатус;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении статуса доверенности с сервера МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать ответ при получении статуса доверенности с сервера МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ХешДоверенности) И НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		Результат.СтатусДоверенности = "";
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПолныеДанныеДоверенностиНаСервереМЧДРР(
		НомерДоверенности,
		ИННДоверителя,
		ИННПредставителя,
		ТокенДоступа = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 			Ложь);
	Результат.Вставить("АдресСервера", 					СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ДанныеВыгрузки", 				Неопределено);
	Результат.Вставить("ДанныеПодписи", 				Неопределено);
	Результат.Вставить("ДанныеЗаявленияНаОтзыв", 		Неопределено);
	Результат.Вставить("ДанныеПодписиЗаявленияНаОтзыв", Неопределено);
	Результат.Вставить("ДанныеАрхива", 					Неопределено);
	Результат.Вставить("СтатусПолучения", 				"");
	Результат.Вставить("ТекстОтвета", 					"");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
			Возврат Результат;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус запроса данных доверенности с сервера МЧД распределенного реестра';
			|en = 'Не получен статус запроса данных доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении данных доверенности с сервера МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении данных доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена получаемая доверенность номер ""%1""';
				|en = 'Не найдена получаемая доверенность номер ""%1""'"),
			НомерДоверенности));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poazip?poaNumber=" + НомерДоверенности + ?(ИННДоверителя = Неопределено, "", "&issuerInn=" + ИННДоверителя)
			+ ?(ИННПредставителя = Неопределено, "", "&representativeInn=" + ИННПредставителя),
		"/poar-webapp/integration/poa/zip?poaNumber=" + НомерДоверенности
			+ ?(ИННДоверителя = Неопределено, "", "&issuerInn=" + ИННДоверителя)
			+ ?(ИННПредставителя = Неопределено, "", "&representativeInn=" + ИННПредставителя));
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Если нрег(ОтветHTTP.Заголовки["Content-Type"]) = "application/zip"
		ИЛИ нрег(ОтветHTTP.Заголовки["content-type"]) = "application/zip"
		ИЛИ нрег(ОтветHTTP.Заголовки["Content-Type"]) = "multipart"
		ИЛИ нрег(ОтветHTTP.Заголовки["content-type"]) = "multipart"
		ИЛИ нрег(Лев(ОтветHTTP.Заголовки["Content-Disposition"], 10)) = "attachment"
		ИЛИ нрег(Лев(ОтветHTTP.Заголовки["content-disposition"], 10)) = "attachment" Тогда
		
		КаталогРаспаковки = "";
		Попытка
			Результат.ДанныеАрхива = Новый ДвоичныеДанные(ИмяФайлаОтвета);
			
			ОбъектЧтение = Новый ЧтениеZipФайла(ИмяФайлаОтвета);
			Если ОбъектЧтение.Элементы.Количество() <> 0 Тогда
				КаталогРаспаковки = ПолучитьИмяВременногоФайла();
				КаталогРаспаковки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогРаспаковки);
				
				СоздатьКаталог(КаталогРаспаковки);
				Для каждого ЭлементАрхива Из ОбъектЧтение.Элементы Цикл
					РасширениеЭлемента = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭлементАрхива.Имя).Расширение;
					Если нрег(РасширениеЭлемента) = ".xml" ИЛИ нрег(РасширениеЭлемента) = ".sig"
						ИЛИ нрег(РасширениеЭлемента) = ".sign" Тогда
						
						ИмяЭлементаНРег = нрег(ЭлементАрхива.Имя);
						ЭтоОтзыв = СтрНайти(ИмяЭлементаНРег, "отм") <> 0 ИЛИ СтрНайти(ИмяЭлементаНРег, "отз") <> 0;
						ЭтоКвитанция = СтрНайти(ИмяЭлементаНРег, "квит") <> 0;
						
						Если НЕ ЭтоКвитанция Тогда
							ОбъектЧтение.Извлечь(ЭлементАрхива, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
							Если нрег(РасширениеЭлемента) = ".xml" Тогда
								Если ЭтоОтзыв Тогда
									Результат.ДанныеЗаявленияНаОтзыв = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
								Иначе
									Результат.ДанныеВыгрузки = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
								КонецЕсли;
							ИначеЕсли нрег(РасширениеЭлемента) = ".sig" ИЛИ нрег(РасширениеЭлемента) = ".sign" Тогда
								ДанныеПодписи = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
								СтрокаПодписи64 = ПолучитьСтрокуИзДвоичныхДанных(ДанныеПодписи, "windows-1251");
								ДанныеПодписи = Base64Значение(СтрокаПодписи64);
								Если ЭтоОтзыв Тогда
									Результат.ДанныеПодписиЗаявленияНаОтзыв = ДанныеПодписи;
								Иначе
									Результат.ДанныеПодписи = ДанныеПодписи;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбъектЧтение.Закрыть();
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			ВывестиИЗаписатьОшибкуМЧДРР(,,
				Новый Структура("ШаблонОшибкиИзИсключения",
					НСтр("ru = 'Не удалось распаковать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1';
						|en = 'Не удалось распаковать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1'")),,
				ПредставлениеОшибки);
			Возврат Результат;
		КонецПопытки;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		
		Если Результат.ДанныеВыгрузки = Неопределено Тогда
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			ВывестиИЗаписатьОшибкуМЧДРР(,,
				Новый Структура("ТекстОшибкиПоУмолчанию",
					НСтр("ru = 'Не получены данные доверенности с сервера МЧД распределенного реестра';
						|en = 'Не получены данные доверенности с сервера МЧД распределенного реестра'")));
			Возврат Результат;
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусПолучения = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("reqStatus"),
			СтруктураОтвета.reqStatus, "");
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.СтатусПолучения) Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьХронологическиеДанныеДоверенностиНаСервереМЧДРР(
		НомерДоверенности,
		ИННДоверителя,
		ИННПредставителя,
		ТокенДоступа = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 						Ложь);
	Результат.Вставить("АдресСервера", 								СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ДатаВремяЗапроса", 							Неопределено);
	Результат.Вставить("НомерДоверенности", 						"");
	Результат.Вставить("ВерсияФормата", 							"");
	Результат.Вставить("ИдентификаторУзлаСоздателя", 				"");
	Результат.Вставить("НаименованиеУзлаСоздателя", 				"");
	Результат.Вставить("АдресУзлаСоздателя", 						"");
	Результат.Вставить("КодТекущегоСтатуса", 						"");
	Результат.Вставить("ДатаВремяСменыТекущегоСтатуса", 			Неопределено);
	Результат.Вставить("ИдентификаторТранзакцииТекущегоСтатуса", 	"");
	Результат.Вставить("ОписаниеТекущегоСтатуса", 					"");
	Результат.Вставить("ИсторияСтатусов", 							Новый Массив);
	Результат.Вставить("ИсторияСобытий", 							Новый Массив);
	Результат.Вставить("ПерваяПричинаОтказаВПриемеМЧД", 			"");
	Результат.Вставить("ТекстОтвета", 								"");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
			Возврат Результат;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус доверенности с сервера МЧД распределенного реестра';
			|en = 'Не получен статус доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статуса доверенности с сервера МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении статуса доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена доверенность номер ""%1""';
				|en = 'Не найдена доверенность номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa_private_required_for_chronology",
		СтрШаблон(
			НСтр("ru = 'Для получения хронологии изменений статуса доверенности номер ""%1"" сначала загрузите доверенность из реестра';
				|en = 'Для получения хронологии изменений статуса доверенности номер ""%1"" сначала загрузите доверенность из реестра'"),
			НомерДоверенности));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poachron?poaNumber=" + НомерДоверенности + "&issuerInn=" + ИННДоверителя
			+ "&representativeInn=" + ИННПредставителя,
		"/poar-webapp/integration/poa/chronology?poaNumber=" + НомерДоверенности + "&issuerInn=" + ИННДоверителя
			+ "&representativeInn=" + ИННПредставителя);
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ДатаВремяЗапроса = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура")
			И СтруктураОтвета.Свойство("chronologyDateTime") И ЗначениеЗаполнено(СтруктураОтвета.chronologyDateTime),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.chronologyDateTime), Неопределено);
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("number"),
			СтруктураОтвета.number, "");
		Результат.ВерсияФормата = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("formatVersion"),
			СтруктураОтвета.formatVersion, "");
		
		УзелСоздателя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("creator")
			И ТипЗнч(СтруктураОтвета.creator) = Тип("Структура"), СтруктураОтвета.creator, Неопределено);
		Результат.ИдентификаторУзлаСоздателя = ?(УзелСоздателя <> Неопределено И УзелСоздателя.Свойство("id"),
			Строка(УзелСоздателя.id), "");
		Результат.НаименованиеУзлаСоздателя = ?(УзелСоздателя <> Неопределено И УзелСоздателя.Свойство("name"),
			Строка(УзелСоздателя.name), "");
		Результат.АдресУзлаСоздателя = ?(УзелСоздателя <> Неопределено И УзелСоздателя.Свойство("address"),
			Строка(УзелСоздателя.address), "");
		
		ТекущийСтатус = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("actualStatus")
			И ТипЗнч(СтруктураОтвета.actualStatus) = Тип("Структура"), СтруктураОтвета.actualStatus, Неопределено);
		Результат.КодТекущегоСтатуса = ?(ТекущийСтатус <> Неопределено И ТекущийСтатус.Свойство("code"),
			Строка(ТекущийСтатус.code), "");
		Результат.ДатаВремяСменыТекущегоСтатуса = ?(ТекущийСтатус <> Неопределено И ТекущийСтатус.Свойство("dateTime")
			И ЗначениеЗаполнено(ТекущийСтатус.dateTime), ДатаИзСтрокиРазныхФорматов(ТекущийСтатус.dateTime), Неопределено);
		Результат.ИдентификаторТранзакцииТекущегоСтатуса = ?(ТекущийСтатус <> Неопределено И ТекущийСтатус.Свойство("txId"),
			Строка(ТекущийСтатус.txId), "");
		Результат.ОписаниеТекущегоСтатуса = ?(ТекущийСтатус <> Неопределено И ТекущийСтатус.Свойство("description"),
			Строка(ТекущийСтатус.description), "");
		
		ИсторияСтатусов = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("events")
			И ТипЗнч(СтруктураОтвета.statusHistory) = Тип("Массив"), СтруктураОтвета.statusHistory, Новый Массив);
		Для каждого ЗаписьИсторииСтатусов Из ИсторияСтатусов Цикл
			Если ТипЗнч(ЗаписьИсторииСтатусов) = Тип("Структура") Тогда
				СведенияОСтатусе = Новый Структура;
				СведенияОСтатусе.Вставить("КодСтатуса", 					"");
				СведенияОСтатусе.Вставить("ДатаВремяСменыСтатуса", 			Неопределено);
				СведенияОСтатусе.Вставить("ИдентификаторТранзакцииСтатуса", "");
				СведенияОСтатусе.Вставить("ОписаниеСтатуса", 				"");
				
				СведенияОСтатусе.КодСтатуса = ?(ЗаписьИсторииСтатусов.Свойство("code"), Строка(ЗаписьИсторииСтатусов.code), "");
				СведенияОСтатусе.ДатаВремяСменыСтатуса = ?(ЗаписьИсторииСтатусов.Свойство("dateTime")
					И ЗначениеЗаполнено(ЗаписьИсторииСтатусов.dateTime),
					ДатаИзСтрокиРазныхФорматов(ЗаписьИсторииСтатусов.dateTime), Неопределено);
				СведенияОСтатусе.ИдентификаторТранзакцииСтатуса = ?(ЗаписьИсторииСтатусов.Свойство("txId"),
					Строка(ЗаписьИсторииСтатусов.txId), "");
				СведенияОСтатусе.ОписаниеСтатуса = ?(ЗаписьИсторииСтатусов.Свойство("description"),
					Строка(ЗаписьИсторииСтатусов.description), "");
				
				Результат.ИсторияСтатусов.Добавить(СведенияОСтатусе);
			КонецЕсли;
		КонецЦикла;
		
		ИсторияСобытий = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("statusHistory")
			И ТипЗнч(СтруктураОтвета.statusHistory) = Тип("Массив"), СтруктураОтвета.statusHistory, Новый Массив);
		Для каждого ЗаписьИсторииСобытий Из ИсторияСобытий Цикл
			Если ТипЗнч(ЗаписьИсторииСобытий) = Тип("Структура") Тогда
				СведенияОСобытии = Новый Структура;
				СведенияОСобытии.Вставить("ИдентификаторТранзакцииСобытия", 		"");
				СведенияОСобытии.Вставить("ТипСобытия", 							"");
				СведенияОСобытии.Вставить("ОписаниеСобытия", 						"");
				СведенияОСобытии.Вставить("ИдентификаторТранзакцииИздателя", 		"");
				СведенияОСобытии.Вставить("ДатаВремяИзданияТранзакции", 			"");
				СведенияОСобытии.Вставить("ИдентификаторТранзакцииИздателя", 		"");
				СведенияОСобытии.Вставить("ИдентификаторУзлаИздателяТранзакции", 	"");
				СведенияОСобытии.Вставить("НаименованиеУзлаИздателяТранзакции", 	"");
				СведенияОСобытии.Вставить("АдресУзлаИздателяТранзакции", 			"");
				СведенияОСобытии.Вставить("ПричинаОтказаВПриемеМЧД",				"");
				
				СведенияОСобытии.ИдентификаторТранзакцииСобытия = ?(ЗаписьИсторииСобытий.Свойство("id"),
					Строка(ЗаписьИсторииСобытий.id), "");
				СведенияОСобытии.ТипСобытия = ?(ЗаписьИсторииСобытий.Свойство("type"), Строка(ЗаписьИсторииСобытий.type), "");
				СведенияОСобытии.ОписаниеСобытия = ?(ЗаписьИсторииСобытий.Свойство("description"),
					Строка(ЗаписьИсторииСобытий.description), "");
				
				ТранзакцияИздателя = ?(ЗаписьИсторииСобытий.Свойство("tx") И ТипЗнч(ЗаписьИсторииСобытий.tx) = Тип("Структура"),
					ЗаписьИсторииСобытий.tx, Неопределено);
				СведенияОСобытии.ИдентификаторТранзакцииИздателя = ?(ТранзакцияИздателя <> Неопределено
					И ТранзакцияИздателя.Свойство("id"), Строка(ТранзакцияИздателя.id), "");
				СведенияОСобытии.ДатаВремяИзданияТранзакции = ?(ТранзакцияИздателя <> Неопределено
					И ТранзакцияИздателя.Свойство("timestamp") И ЗначениеЗаполнено(ТранзакцияИздателя.timestamp),
					ДатаИзСтрокиРазныхФорматов(ТранзакцияИздателя.timestamp), Неопределено);
				
				УзелИздательТранзакции = ?(ТранзакцияИздателя <> Неопределено И ТранзакцияИздателя.Свойство("sender")
					И ТипЗнч(ТранзакцияИздателя.sender) = Тип("Структура"), ТранзакцияИздателя.sender, Неопределено);
				СведенияОСобытии.ИдентификаторУзлаИздателяТранзакции = ?(УзелИздательТранзакции <> Неопределено
					И УзелИздательТранзакции.Свойство("id"), Строка(УзелИздательТранзакции.id), "");
				СведенияОСобытии.НаименованиеУзлаИздателяТранзакции = ?(УзелИздательТранзакции <> Неопределено
					И УзелИздательТранзакции.Свойство("name"), Строка(УзелИздательТранзакции.name), "");
				СведенияОСобытии.АдресУзлаИздателяТранзакции = ?(УзелИздательТранзакции <> Неопределено
					И УзелИздательТранзакции.Свойство("address"), Строка(УзелИздательТранзакции.address), "");
				
				СведенияОСобытии.ПричинаОтказаВПриемеМЧД = ?(ЗаписьИсторииСобытий.Свойство("details"),
					Строка(ЗаписьИсторииСобытий.details), "");
				Если НЕ ЗначениеЗаполнено(Результат.ПерваяПричинаОтказаВПриемеМЧД) Тогда
					Результат.ПерваяПричинаОтказаВПриемеМЧД = СведенияОСобытии.ПричинаОтказаВПриемеМЧД;
				КонецЕсли;
				
				Результат.ИсторияСобытий.Добавить(СведенияОСобытии);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении хронологии изменений статуса доверенности с сервера МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать ответ при получении хронологии изменений статуса доверенности с сервера МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) И НЕ ЗначениеЗаполнено(Результат.ВерсияФормата) Тогда
		Результат.СтатусДоверенности = "";
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

Функция ОтменитьМЧДРР(
		ИмяФайлаВыгрузки,
		ДанныеИлиАдресВыгрузки,
		ДанныеИлиАдресПодписи,
		ТокенДоступа = "",
		НомерДоверенности = "",
		СсылкаНаДоверенность = Неопределено) Экспорт
	
	ДанныеВыгрузки = ?(ТипЗнч(ДанныеИлиАдресВыгрузки) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресВыгрузки), ПолучитьИзВременногоХранилища(ДанныеИлиАдресВыгрузки),
		ДанныеИлиАдресВыгрузки);
	ДанныеПодписи = ?(ТипЗнч(ДанныеИлиАдресПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресПодписи), ПолучитьИзВременногоХранилища(ДанныеИлиАдресПодписи),
		ДанныеИлиАдресПодписи);
	
	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
		ОбъектДоверенность.ИмяФайлаЗаявленияНаОтзыв = ИмяФайлаВыгрузки;
		ОбъектДоверенность.ФайлЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеВыгрузки,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.ЭлектроннаяПодписьЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеПодписи,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 		Ложь);
	Результат.Вставить("АдресСервера", 				СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("ТекстОтвета", 				"");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
			Возврат Результат;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧДРР();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор отзыва доверенности с сервера МЧД распределенного реестра';
			|en = 'Не получен идентификатор отзыва доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1';
			|en = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1';
			|en = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при отзыве доверенности на сервере МЧД распределенного реестра. %1';
			|en = 'Ошибка при отзыве доверенности на сервере МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неаутентифицированного пользователя'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена досрочно отзываемая доверенность номер ""%1""';
				|en = 'Не найдена досрочно отзываемая доверенность номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-valid",
		СтрШаблон(
			НСтр("ru = 'Операция запрещена: данные в сертификате не совпадают с данными досрочно отзываемой доверенности номер ""%1""';
				|en = 'Операция запрещена: данные в сертификате не совпадают с данными досрочно отзываемой доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_validation_exception",
		СтрШаблон(
			НСтр("ru = 'Электронная подпись запроса на досрочный отзыв доверенности номер ""%1"" невалидна';
				|en = 'Электронная подпись запроса на досрочный отзыв доверенности номер ""%1"" невалидна'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/expired_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" истекла';
				|en = 'Досрочный отзыв недоступен: доверенность номер ""%1"" истекла'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoked_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" уже отозвана';
				|en = 'Досрочный отзыв недоступен: доверенность номер ""%1"" уже отозвана'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_terminal_poa_status",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""';
				|en = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.revoke.revocable_poa_status_is_terminal",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""';
				|en = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_signature_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи отзыва доверенности номер ""%1""';
				|en = 'Не пройдена проверка валидности электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_ogrn_or_ogrnip_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как ОГРН/ОГРНИП доверителя в отзываемой доверенности не соответствуют ОГРН/ОГРНИП в сертификате электронной подписи отзыва доверенности номер ""%1""';
				|en = 'Не пройдена проверка полномочий подписанта, так как ОГРН/ОГРНИП доверителя в отзываемой доверенности не соответствуют ОГРН/ОГРНИП в сертификате электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_ogrn_or_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен ОГРН/ОГРНИП для отзыва доверенности номер ""%1""';
				|en = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен ОГРН/ОГРНИП для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен СНИЛС владельца для отзыва доверенности номер ""%1""';
				|en = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен СНИЛС владельца для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'ННе пройдена проверка полномочий подписанта, так как СНИЛС подписанта в отзываемой доверенности не соответствуют СНИЛС в сертификате электронной подписи для отзыва доверенности номер ""%1""';
				|en = 'ННе пройдена проверка полномочий подписанта, так как СНИЛС подписанта в отзываемой доверенности не соответствуют СНИЛС в сертификате электронной подписи для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_poa_revoke_xml",
		СтрШаблон(
			НСтр("ru = 'XML-файл отзыва доверенности не соответствует XSD-схеме для отзыва доверенности номер ""%1""';
				|en = 'XML-файл отзыва доверенности не соответствует XSD-схеме для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poacancel", "/poar-webapp/integration/poa/revoke");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	// запись передаваемых файлов
	
	МассивИменФайлов = Новый Массив;
	
	СодержимоеФайла = "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""poaRevoke""; filename=""" + ИмяФайлаВыгрузки + """"
		+ Символы.ПС + "Content-Type: text/xml"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаОтмены = ПолучитьИмяВременногоФайла();
	ДанныеВыгрузки.Записать(ИмяВременногоФайлаОтмены);
	МассивИменФайлов.Добавить(ИмяВременногоФайлаОтмены);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""signature""; filename=""" + ИмяФайлаВыгрузки + ".sig"""
		+ Символы.ПС + "Content-Type: application/octet-stream"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаПодписи = ПолучитьИмяВременногоФайла();
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251").Записать(ИмяВременногоФайлаПодписи);
	МассивИменФайлов.Добавить(ИмяВременногоФайлаПодписи);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr--";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	// объединение передаваемых файлов
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИменФайлов, ИмяФайлаЗапроса);
	Для каждого ИмяВременногоФайла Из МассивИменФайлов Цикл
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	КонецЦикла;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		СоединениеHTTP = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ВывестиИЗаписатьОшибкуМЧДРР(,,
			ШаблоныОшибок,
			?(Результат.ПовторятьСоединение, "ТолькоЗаписатьВЖурналРегистрации", ""),
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при отмене доверенности на сервере МЧД распределенного реестра: %1';
				|en = 'Не удалось разобрать ответ при отмене доверенности на сервере МЧД распределенного реестра: %1'");
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,,
			ШаблоныОшибок,,
			ПредставлениеОшибки);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧДРР(
			ОтветHTTP,
			СтруктураОтвета,
			ШаблоныОшибок);
		Возврат Результат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

Функция ОбновитьСостояниеМЧДРР(СсылкаНаДоверенность = Неопределено) Экспорт
	
	Результат = ДокументооборотСКОКлиентСервер.РезультатОбновитьСостояниеМЧДРР();
	Результат.Выполнено = Истина;
	
	ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
	
	Результат.СостояниеИзменено = Ложь;
	Результат.СтатусИзменился = Ложь;
	ТокенДоступа = "";
	Если ОбъектДоверенность.Статус =
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отправлено")
		ИЛИ ОбъектДоверенность.Статус =
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв") Тогда
		
		СведенияСтатусаТранзакции = ПолучитьСтатусТранзакцииМЧДРР(
			ОбъектДоверенность.ИдентификаторТранзакции,
			ТокенДоступа,
			ОбъектДоверенность.НомерДоверенности);
		Если СведенияСтатусаТранзакции.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение 	= Истина;
			Результат.АдресСервера 			= СведенияСтатусаТранзакции.АдресСервера;
			Возврат Результат;
		КонецЕсли;
		
		Если СведенияСтатусаТранзакции.СтатусТранзакции = "SUCCESS" Тогда
			Если ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв") Тогда
				
				ОбъектДоверенность.Статус =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтвержденияОтзыва");
				
			Иначе
				ОбъектДоверенность.Статус =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтверждения");
			КонецЕсли;
			
			ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			ОбъектДоверенность.ИдентификаторТранзакции = "";
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусИзменился = Истина;
			
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = "FAILURE" Тогда
			Если ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв") Тогда
				
				ОбъектДоверенность.Статус =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОшибкаОтзыва");
				
			Иначе
				ОбъектДоверенность.Статус =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОшибкаРегистрации");
			КонецЕсли;
			
			ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			ОбъектДоверенность.ИдентификаторТранзакции = "";
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусИзменился = Истина;
			
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции <> "PENDING" Тогда // "ERROR"
			Результат.Выполнено = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектДоверенность.Статус <>
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ВРаботе")
		И ОбъектДоверенность.Статус <>
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отправлено")
		И ОбъектДоверенность.Статус <>
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОшибкаРегистрации") Тогда
		
		СведенияСтатусаДоверенности = ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧДРР(
			ОбъектДоверенность.НомерДоверенности,
			ТокенДоступа);
		Если СведенияСтатусаДоверенности.ПовторятьСоединение Тогда
			Если Результат.СостояниеИзменено Тогда
				ОбъектДоверенность.Записать();
			КонецЕсли;
			Результат.ПовторятьСоединение 	= Истина;
			Результат.АдресСервера 			= СведенияСтатусаДоверенности.АдресСервера;
			Возврат Результат;
		КонецЕсли;
		Результат.ХешДоверенности 		= СведенияСтатусаДоверенности.ХешДоверенности;
		Результат.НомерДоверенности 	= СведенияСтатусаДоверенности.НомерДоверенности;
		Результат.ДатаВыдачи 			= СведенияСтатусаДоверенности.ДатаВыдачи;
		Результат.ДатаОкончания 		= СведенияСтатусаДоверенности.ДатаОкончания;
		Результат.ДатаРегистрации 		= СведенияСтатусаДоверенности.ДатаРегистрации;
		Результат.ДатаИзмененияСтатуса 	= СведенияСтатусаДоверенности.ДатаИзмененияСтатуса;
		Результат.СтатусДоверенности 	= СведенияСтатусаДоверенности.СтатусДоверенности;
		Результат.ПубличныйКлюч 		= СведенияСтатусаДоверенности.ПубличныйКлюч;
		
		Если СведенияСтатусаДоверенности.СтатусДоверенности = "REJECTED" Тогда
			Результат.ХронологическиеДанные = ПолучитьХронологическиеДанныеДоверенностиНаСервереМЧДРР(
				ОбъектДоверенность.НомерДоверенности,
				?(ЗначениеЗаполнено(ОбъектДоверенность.ДоверительЮЛ_ИНН), ОбъектДоверенность.ДоверительЮЛ_ИНН,
					ОбъектДоверенность.ДоверительФЛ_ИНН),
				?(ЗначениеЗаполнено(ОбъектДоверенность.ПредставительЮЛ_ИНН), ОбъектДоверенность.ПредставительЮЛ_ИНН,
					ОбъектДоверенность.ПредставительФЛ_ИНН),
				ТокенДоступа);
		КонецЕсли;
		
		Если СведенияСтатусаДоверенности.СтатусДоверенности = "PROCESSING" Тогда
			Если ОбъектДоверенность.Статус <>
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтверждения")
				И ОбъектДоверенность.Статус <>
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтвержденияОтзыва") Тогда
				
				Если ОбъектДоверенность.Статус =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв") Тогда
					
					ОбъектДоверенность.Статус =
						ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтвержденияОтзыва");
					
				Иначе
					ОбъектДоверенность.Статус =
						ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтверждения");
				КонецЕсли;
				
				ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
				Результат.СостояниеИзменено = Истина;
				Результат.СтатусИзменился = Истина;
			КонецЕсли;
			Результат.Рассматривается = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "REJECTED"
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрации")
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрацииОтзыва") Тогда
			
			Если ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв")
				ИЛИ ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтвержденияОтзыва") Тогда
				
				ОбъектДоверенность.Статус =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрацииОтзыва");
				
			Иначе
				ОбъектДоверенность.Статус =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрации");
			КонецЕсли;
			
			ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			ОбъектДоверенность.ТекстОшибки = ?(Результат.ХронологическиеДанные = Неопределено,
				"", Результат.ХронологическиеДанные.ПерваяПричинаОтказаВПриемеМЧД);
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусИзменился = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "CREATED"
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ДатаНачалаДействияНеНаступила") Тогда
			
			ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ДатаНачалаДействияНеНаступила");
			ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусИзменился = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "ACTIVE"
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано")
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв")
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтвержденияОтзыва")
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрацииОтзыва")
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОшибкаОтзыва") Тогда
			
			ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано");
			ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусИзменился = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "EXPIRED"
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ИстекСрокДействия") Тогда
			
			ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ИстекСрокДействия");
			ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусИзменился = Истина;
			
		ИначеЕсли (СведенияСтатусаДоверенности.СтатусДоверенности = "DECLINED"
			ИЛИ СведенияСтатусаДоверенности.СтатусДоверенности = "REVOKED")
			И ОбъектДоверенность.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отозвано") Тогда
			
			ОбъектДоверенность.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отозвано");
			ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусИзменился = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияСтатусаДоверенности.ДатаРегистрации)
			И ОбъектДоверенность.ДатаРегистрации <> СведенияСтатусаДоверенности.ДатаРегистрации Тогда
			
			ОбъектДоверенность.ДатаРегистрации = СведенияСтатусаДоверенности.ДатаРегистрации;
			Если НЕ ЗначениеЗаполнено(ОбъектДоверенность.ДатаОтправки) Тогда
				ОбъектДоверенность.ДатаОтправки = СведенияСтатусаДоверенности.ДатаРегистрации;
			КонецЕсли;
			Результат.СостояниеИзменено = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияСтатусаДоверенности.ДатаИзмененияСтатуса)
			И ОбъектДоверенность.ДатаИзмененияСтатуса <> СведенияСтатусаДоверенности.ДатаИзмененияСтатуса Тогда
			
			ОбъектДоверенность.ДатаИзмененияСтатуса = СведенияСтатусаДоверенности.ДатаИзмененияСтатуса;
			Результат.СостояниеИзменено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.СостояниеИзменено Тогда
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьМЧД(
		ОбъектСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Ложь,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		Возврат Документы.УведомлениеОПредоставленииПолномочийПредставителю.ВыгрузитьУведомление(ОбъектСсылка);
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя") Тогда
		Возврат Документы.УведомлениеОПрекращенииПолномочийПредставителя.ВыгрузитьУведомление(ОбъектСсылка);
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Если КонтекстЭДО = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат КонтекстЭДО.ВыгрузитьЗаявленияПоЭлДокументооборотуСПФР(ОбъектСсылка);
		
	Иначе
		Возврат Справочники.МашиночитаемыеДоверенностиФНС.ВыгрузитьЭлементВФайлОбмена(
			ОбъектСсылка,
			ИдентификаторФайла,
			КодНалоговогоОрганаПолучателя,
			ОпределятьКодНалоговогоОрганаПолучателя,
			ФорматДоверенностиПоПриказуФНС,
			ПроверитьВыгрузку,
			ПараметрыВозврата);
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьМЧД(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка = Ложь, Подпись = Неопределено) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиФНС.ЗагрузитьЭлементИзФайлаОбмена(ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка, Подпись);
	
КонецФункции

Функция ПроверитьМЧД(Знач ОбъектИлиСсылка, Знач НастройкиПроверки = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС")
		И НастройкиПроверки = "ПроверятьТолькоНеподписанные" Тогда
		
		Если ОтчетОтправлен(ОбъектИлиСсылка) Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Машиночитаемая доверенность (ФНС) уже подписана и отправлена.';
					|en = 'Машиночитаемая доверенность (ФНС) уже подписана и отправлена.'"),
				""));
			Возврат Результат;
			
		ИначеЕсли МЧДПодписана(ОбъектИлиСсылка) Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Машиночитаемая доверенность (ФНС) уже подписана.';
					|en = 'Машиночитаемая доверенность (ФНС) уже подписана.'"),
				""));
			Возврат Результат;
		КонецЕсли;
		
		НастройкиПроверки = Неопределено;
	КонецЕсли;
	
	Возврат Справочники.МашиночитаемыеДоверенностиФНС.ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка, НастройкиПроверки);
	
КонецФункции

Функция ПроверитьЗаявлениеОбОтзывеМЧДФНС(Знач ОбъектИлиСсылка) Экспорт
	
	Возврат Справочники.ЗаявленияОбОтзывеМЧДФНС.ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка);
	
КонецФункции

Функция ЗагрузитьЗаявлениеОбОтзывеМЧДФНС(ВходящиеДанные, ОбновлятьСуществующий = Ложь, Подпись = Неопределено) Экспорт
	
	Возврат Справочники.ЗаявленияОбОтзывеМЧДФНС.ЗагрузитьЭлементИзФайлаОбмена(ВходящиеДанные,
		ОбновлятьСуществующий, Подпись);
	
КонецФункции

Функция ВыгрузитьЗаявлениеОбОтзывеМЧДФНС(
		СправочникСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Ложь,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	Возврат Справочники.ЗаявленияОбОтзывеМЧДФНС.ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ИдентификаторФайла,
		КодНалоговогоОрганаПолучателя,
		ОпределятьКодНалоговогоОрганаПолучателя,
		ФорматДоверенностиПоПриказуФНС,
		ПроверитьВыгрузку,
		ПараметрыВозврата);
	
КонецФункции

Процедура СохранитьПодписьМЧДФНС(
		ИмяФайлаВыгрузки,
		ДанныеИлиАдресВыгрузки,
		ДанныеИлиАдресПодписи,
		ОтпечатокСертификатаАбонента,
		СсылкаНаДоверенность) Экспорт
	
	ДанныеВыгрузки = ?(ТипЗнч(ДанныеИлиАдресВыгрузки) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресВыгрузки), ПолучитьИзВременногоХранилища(ДанныеИлиАдресВыгрузки),
		ДанныеИлиАдресВыгрузки);
	ДанныеПодписи = ?(ТипЗнч(ДанныеИлиАдресПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресПодписи), ПолучитьИзВременногоХранилища(ДанныеИлиАдресПодписи),
		ДанныеИлиАдресПодписи);
	
	ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
	ОбъектДоверенность.ИмяФайлаВыгрузки = ИмяФайлаВыгрузки;
	Если ОбъектДоверенность.Метаданные().Реквизиты.Найти("ФайлВыгрузки") <> Неопределено Тогда
		ОбъектДоверенность.ФайлВыгрузки = Новый ХранилищеЗначения(ДанныеВыгрузки,
			Новый СжатиеДанных(9));
	Иначе
		ОбъектДоверенность.ФайлВырузки = Новый ХранилищеЗначения(ДанныеВыгрузки,
			Новый СжатиеДанных(9));
	КонецЕсли;
	ОбъектДоверенность.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеПодписи,
		Новый СжатиеДанных(9));
	ОбъектДоверенность.ОтпечатокСертификата = ОтпечатокСертификатаАбонента;
	ОбъектДоверенность.Записать();
	
КонецПроцедуры

Функция ВыгрузитьМЧДФСС(
		СправочникСсылка,
		ИдентификаторФайла = "",
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиФСС.ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ИдентификаторФайла,
		ПроверитьВыгрузку,
		ПараметрыВозврата);
	
КонецФункции

Функция ЗагрузитьМЧДФСС(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка = Ложь) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиФСС.ЗагрузитьЭлементИзФайлаОбмена(ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка);
	
КонецФункции

Функция ПроверитьМЧДФСС(Знач ОбъектИлиСсылка) Экспорт
	
	Возврат Справочники.МашиночитаемыеДоверенностиФСС.ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка);
	
КонецФункции

Функция ПараметрыОтзываМашиночитаемойДоверенностиФСС(
		ОтчетСсылка,
		Организация,
		НомерДоверенности,
		Причина = "",
		ОтозватьЦепочку = Ложь,
		ВозвращатьОтправкуОтзываПриДействительностиМЧД = Неопределено,
		ДатаНачалаОтправки = Неопределено) Экспорт
	
	Если ВозвращатьОтправкуОтзываПриДействительностиМЧД <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	МашиночитаемыеДоверенностиФСС.Ссылка КАК ОтчетСсылка,
			|	МашиночитаемыеДоверенностиФСС.Статус КАК Статус,
			|	ОтправкиФСС.Ссылка КАК ОтправкаСсылка,
			|	ОтправкиФСС.СтатусОтправки КАК СтатусОтправки
			|ИЗ
			|	Справочник.МашиночитаемыеДоверенностиФСС КАК МашиночитаемыеДоверенностиФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСС КАК ОтправкиФСС
			|		ПО (ОтправкиФСС.ОтчетСсылка = МашиночитаемыеДоверенностиФСС.Ссылка)
			|ГДЕ
			|	МашиночитаемыеДоверенностиФСС.Ссылка = &ОтчетСсылка
			|	И МашиночитаемыеДоверенностиФСС.Организация = &Организация
			|	И НЕ ОтправкиФСС.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	ОтправкиФСС.ДатаОтправки УБЫВ";
		
		Запрос.УстановитьПараметр("ОтчетСсылка", ОтчетСсылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Новый Структура;
		Результат.Вставить("ЭтоСведенияОбОтчетеОперации", 	Истина);
		Результат.Вставить("ОтчетСсылка", 					Неопределено);
		Результат.Вставить("ОтправкаСсылка", 				Неопределено);
		Результат.Вставить("СтатусОтправки", 				Неопределено);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() И Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят
				И Выборка.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано Тогда
				
				Результат.ОтчетСсылка 		= Выборка.ОтчетСсылка;
				Результат.ОтправкаСсылка 	= Выборка.ОтправкаСсылка;
				Результат.СтатусОтправки 	= Выборка.СтатусОтправки;
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозвращатьОтправкуОтзываПриДействительностиМЧД = Истина Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ОтправкиФСС.Ссылка КАК ОтправкаСсылка,
			|	ОтправкиФСС.ОтчетСсылка КАК ОтчетСсылка,
			|	ОтправкиФСС.СтатусОтправки КАК СтатусОтправки
			|ИЗ
			|	Справочник.ОтправкиФСС КАК ОтправкиФСС
			|ГДЕ
			|	ОтправкиФСС.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.ОтзывМашиночитаемойДоверенностиФСС)
			|	И ОтправкиФСС.Организация = &Организация
			|	И ОтправкиФСС.ИдентификаторОтправкиНаСервере ПОДОБНО &ИдентификаторОтправкиНаСервере
			|	И ОтправкиФСС.ДатаОтправки >= &ДатаНачалаОтправки
			|	И НЕ ОтправкиФСС.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	ОтправкиФСС.ДатаОтправки УБЫВ";
		
		Запрос.УстановитьПараметр("Организация", 					Организация);
		Запрос.УстановитьПараметр("ИдентификаторОтправкиНаСервере", "%" + НомерДоверенности + "%");
		Запрос.УстановитьПараметр("ДатаНачалаОтправки", 			ДатаНачалаОтправки);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Результат.ЭтоСведенияОбОтчетеОперации 	= Ложь;
				Результат.ОтчетСсылка 					= Выборка.ОтчетСсылка;
				Результат.ОтправкаСсылка 				= Выборка.ОтправкаСсылка;
				Результат.СтатусОтправки 				= Выборка.СтатусОтправки;
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("utf-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("urn:revocationPowerOfAttorney");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:urn", "urn:ru:fss:integration:types:mchd:v01");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("urn:uuid");
	ЗаписьXML.ЗаписатьТекст(НомерДоверенности);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("urn:revokeChain");
	Если ОтозватьЦепочку Тогда
		ЗаписьXML.ЗаписатьТекст("true");
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("urn:reason");
	ЗаписьXML.ЗаписатьТекст(Причина);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	СодержимоеСообщения = ЗаписьXML.Закрыть();
	
	ТипСообщения = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО(Истина).ТипСообщенияОтзывМашиночитаемойДоверенностиФСС;
	ОписаниеОшибки =
		НСтр("ru = 'Не удалось отправить отзыв машиночитаемой доверенности (ФСС).
				   |%1';
				   |en = 'Не удалось отправить отзыв машиночитаемой доверенности (ФСС).
				   |%1'");
	
	Результат = ЭлектронныйДокументооборотСФСС.ПараметрыОтправитьСообщениеСЭДО(
		ТипСообщения,
		СодержимоеСообщения,
		Организация,
		ОписаниеОшибки);
	ДанаСеанса = ТекущаяДатаСеанса();
	Результат.Вставить("ДатаСеансаНаСервере", ДанаСеанса);
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗапросаМашиночитаемойДоверенностиФСС(
		Организация,
		НомерДоверенности,
		ВозвращатьОтправкуЗапросаПриОтсутствииМЧД = Ложь,
		ДатаНачалаОтправки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	МашиночитаемыеДоверенностиФСС.Ссылка КАК ОтчетСсылка,
		|	ОтправкиФСС.Ссылка КАК ОтправкаСсылка,
		|	ОтправкиФСС.СтатусОтправки КАК СтатусОтправки
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФСС КАК МашиночитаемыеДоверенностиФСС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСС КАК ОтправкиФСС
		|		ПО (ОтправкиФСС.ОтчетСсылка = МашиночитаемыеДоверенностиФСС.Ссылка)
		|ГДЕ
		|	МашиночитаемыеДоверенностиФСС.НомерДоверенности = &НомерДоверенности
		|	И МашиночитаемыеДоверенностиФСС.Организация = &Организация
		|	И НЕ МашиночитаемыеДоверенностиФСС.ПометкаУдаления
		|	И НЕ ОтправкиФСС.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФСС.ДатаОтправки УБЫВ";
	
	Запрос.УстановитьПараметр("НомерДоверенности", 	НомерДоверенности);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоСведенияОбОтчетеОперации", 	Истина);
	Результат.Вставить("ОтчетСсылка", 					Неопределено);
	Результат.Вставить("ОтправкаСсылка", 				Неопределено);
	Результат.Вставить("СтатусОтправки", 				Неопределено);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.ОтчетСсылка 		= Выборка.ОтчетСсылка;
			Результат.ОтправкаСсылка 	= Выборка.ОтправкаСсылка;
			Результат.СтатусОтправки 	= Выборка.СтатусОтправки;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозвращатьОтправкуЗапросаПриОтсутствииМЧД Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ОтправкиФСС.Ссылка КАК ОтправкаСсылка,
			|	ОтправкиФСС.ОтчетСсылка КАК ОтчетСсылка,
			|	ОтправкиФСС.СтатусОтправки КАК СтатусОтправки
			|ИЗ
			|	Справочник.ОтправкиФСС КАК ОтправкиФСС
			|ГДЕ
			|	ОтправкиФСС.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.ЗапросМашиночитаемойДоверенностиФСС)
			|	И ОтправкиФСС.Организация = &Организация
			|	И ОтправкиФСС.ДатаОтправки >= &ДатаНачалаОтправки
			|	И НЕ ОтправкиФСС.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	ОтправкиФСС.ДатаОтправки УБЫВ";
		
		Запрос.УстановитьПараметр("Организация", 		Организация);
		Запрос.УстановитьПараметр("ДатаНачалаОтправки", ДатаНачалаОтправки);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Результат.ЭтоСведенияОбОтчетеОперации 	= Ложь;
				Результат.ОтчетСсылка 					= Выборка.ОтчетСсылка;
				Результат.ОтправкаСсылка 				= Выборка.ОтправкаСсылка;
				Результат.СтатусОтправки 				= Выборка.СтатусОтправки;
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	ТипСообщения = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО(Истина).ТипСообщенияЗапросМашиночитаемойДоверенностиФСС;
	СодержимоеСообщения = СтрШаблон(
		"<urn:powerOfAttorneyRequest xmlns:urn=""urn:ru:fss:integration:types:mchd:v01"">
		|  <urn:uuid>%1</urn:uuid>
		|</urn:powerOfAttorneyRequest>",
		НомерДоверенности);
	ОписаниеОшибки =
		НСтр("ru = 'Не удалось отправить запрос машиночитаемой доверенности (ФСС).
				   |%1';
				   |en = 'Не удалось отправить запрос машиночитаемой доверенности (ФСС).
				   |%1'");
	
	Результат = ЭлектронныйДокументооборотСФСС.ПараметрыОтправитьСообщениеСЭДО(
		ТипСообщения,
		СодержимоеСообщения,
		Организация,
		ОписаниеОшибки);
	ДанаСеанса = ТекущаяДатаСеанса();
	Результат.Вставить("ДатаСеансаНаСервере", ДанаСеанса);
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗапросаСправочникаПолномочийМашиночитаемыхДоверенностейФСС(Организация) Экспорт
	
	ТипыСообщений = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО(Истина);
	ТипСообщения = ТипыСообщений.ТипСообщенияЗапросСправочникаПолномочийМашиночитаемыхДоверенностейФСС;
	СодержимоеСообщения =
		"<urn:dicAuthorityListRequest xmlns:urn=""urn:ru:fss:integration:types:mchd:v01""/>";
	ОписаниеОшибки =
		НСтр("ru = 'Не удалось отправить запрос справочника полномочий машиночитаемых доверенностей (ФСС).
				   |%1';
				   |en = 'Не удалось отправить запрос справочника полномочий машиночитаемых доверенностей (ФСС).
				   |%1'");
	
	Результат = ЭлектронныйДокументооборотСФСС.ПараметрыОтправитьСообщениеСЭДО(
		ТипСообщения,
		СодержимоеСообщения,
		Организация,
		ОписаниеОшибки);
	ДанаСеанса = ТекущаяДатаСеанса();
	Результат.Вставить("ДатаСеансаНаСервере", ДанаСеанса);
	Возврат Результат;
	
КонецФункции

Функция СведенияОбОтправкеСЭДО(АвтозапросПараметры) Экспорт
	
	ОтчетИлиСведенияОбОтправке = Неопределено;
	Если АвтозапросПараметры.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ОтзывМашиночитаемойДоверенностиФСС Тогда
		ВозвращатьОтправкуОтзываПриДействительностиМЧД = Истина;
		Возврат ПараметрыОтзываМашиночитаемойДоверенностиФСС(
			АвтозапросПараметры.СсылкаНаОтчет,
			АвтозапросПараметры.Организация,
			АвтозапросПараметры.НомерОтчета,,,
			ВозвращатьОтправкуОтзываПриДействительностиМЧД,
			АвтозапросПараметры.ДатаНачалаОтправки);
		
	ИначеЕсли АвтозапросПараметры.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ЗапросМашиночитаемойДоверенностиФСС Тогда
		ВозвращатьОтправкуЗапросаПриОтсутствииМЧД = Истина;
		Возврат ПараметрыЗапросаМашиночитаемойДоверенностиФСС(
			АвтозапросПараметры.Организация,
			АвтозапросПараметры.НомерОтчета,
			ВозвращатьОтправкуЗапросаПриОтсутствииМЧД,
			АвтозапросПараметры.ДатаНачалаОтправки);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьМЧДЦБ(
		СправочникСсылка,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует() Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
		Возврат Справочники[ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ].ВыгрузитьЭлементВФайлОбмена(
			СправочникСсылка,
			ПроверитьВыгрузку,
			ПараметрыВозврата);
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьМЧДЦБ(ВходящиеДанные, ОбновлятьСуществующий = Ложь, Подпись = Неопределено) Экспорт
	
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует() Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
		Возврат Справочники[ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ].ЗагрузитьЭлементИзФайлаОбмена(ВходящиеДанные,
			ОбновлятьСуществующий, Подпись);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьМЧДЦБ(Знач ОбъектИлиСсылка) Экспорт
	
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует() Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
		
		Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ)
			И МЧДПодписана(ОбъектИлиСсылка) Тогда
			
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Машиночитаемая доверенность (Банк России) уже подписана.';
					|en = 'Машиночитаемая доверенность (Банк России) уже подписана.'"),
				""));
			Возврат Результат;
		КонецЕсли;
		
		Возврат Справочники[ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ].ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка);
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьМЧДЦБСПодписью(
		ИмяФайлаВыгрузки,
		ДанныеИлиАдресВыгрузки,
		ДанныеИлиАдресПодписи,
		СсылкаНаДоверенность) Экспорт
	
	ДанныеВыгрузки = ?(ТипЗнч(ДанныеИлиАдресВыгрузки) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресВыгрузки), ПолучитьИзВременногоХранилища(ДанныеИлиАдресВыгрузки),
		ДанныеИлиАдресВыгрузки);
	ДанныеПодписи = ?(ТипЗнч(ДанныеИлиАдресПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресПодписи), ПолучитьИзВременногоХранилища(ДанныеИлиАдресПодписи),
		ДанныеИлиАдресПодписи);
	
	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
		ОбъектДоверенность.ИмяФайлаВыгрузки = ИмяФайлаВыгрузки;
		ОбъектДоверенность.ФайлВырузки = Новый ХранилищеЗначения(ДанныеВыгрузки, Новый СжатиеДанных(9));
		ОбъектДоверенность.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеПодписи, Новый СжатиеДанных(9));
		ОбъектДоверенность.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Подписано;
		ОбъектДоверенность.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьУведомлениеОПредоставленииПолномочийПредставителю(
		ДокументСсылка) Экспорт
	
	Возврат Документы.УведомлениеОПредоставленииПолномочийПредставителю.ВыгрузитьУведомление(
		ДокументСсылка);
	
КонецФункции

Функция ЗагрузитьУПУП(ВходящиеДанные, ОбновлятьСуществующий = Ложь) Экспорт
	
	Возврат Документы.УведомлениеОПредоставленииПолномочийПредставителю.ЗагрузитьДокументИзФайлаОбмена(ВходящиеДанные,
		ОбновлятьСуществующий);
	
КонецФункции

Функция ПроверитьУПУП(Знач ОбъектИлиСсылка, Знач НастройкиПроверки = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю")
		И НастройкиПроверки = "ПроверятьТолькоНеподписанные" Тогда
		
		Если ОтчетОтправлен(ОбъектИлиСсылка) Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Уведомление о предоставлении полномочий представителю уже подписано и отправлено.';
					|en = 'Уведомление о предоставлении полномочий представителю уже подписано и отправлено.'"),
				""));
			Возврат Результат;
			
		ИначеЕсли МЧДПодписана(ОбъектИлиСсылка) Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Уведомление о предоставлении полномочий представителю уже подписано.';
					|en = 'Уведомление о предоставлении полномочий представителю уже подписано.'"),
				""));
			Возврат Результат;
		КонецЕсли;
		
		НастройкиПроверки = Неопределено;
	КонецЕсли;
	
	Возврат Документы.УведомлениеОПредоставленииПолномочийПредставителю.ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка);
	
КонецФункции

Функция ВыгрузитьУведомлениеОПрекращенииПолномочийПредставителя(
		ДокументСсылка) Экспорт
	
	Возврат Документы.УведомлениеОПрекращенииПолномочийПредставителя.ВыгрузитьУведомление(
		ДокументСсылка);
	
КонецФункции

Функция ЗагрузитьУПРУП(ВходящиеДанные, ОбновлятьСуществующий = Ложь) Экспорт
	
	Возврат Документы.УведомлениеОПрекращенииПолномочийПредставителя.ЗагрузитьДокументИзФайлаОбмена(ВходящиеДанные,
		ОбновлятьСуществующий);
	
КонецФункции

Функция ПроверитьУПРУП(Знач ОбъектИлиСсылка, Знач НастройкиПроверки = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя")
		И НастройкиПроверки = "ПроверятьТолькоНеподписанные" Тогда
		
		Если ОтчетОтправлен(ОбъектИлиСсылка) Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Уведомление о прекращении полномочий представителя уже подписано и отправлено.';
					|en = 'Уведомление о прекращении полномочий представителя уже подписано и отправлено.'"),
				""));
			Возврат Результат;
			
		ИначеЕсли МЧДПодписана(ОбъектИлиСсылка) Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Уведомление о прекращении полномочий представителя уже подписано.';
					|en = 'Уведомление о прекращении полномочий представителя уже подписано.'"),
				""));
			Возврат Результат;
		КонецЕсли;
		
		НастройкиПроверки = Неопределено;
	КонецЕсли;
	
	Возврат Документы.УведомлениеОПрекращенииПолномочийПредставителя.ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка);
	
КонецФункции

Процедура УстановитьПараметрыПодключенияОтключенияМЧД(Запрос, ПроверяемыеМЧДФНС, ВыбранныеОрганизации) 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистрацииВНО", "РегистрацииВНО");
	
	ЕстьРеквизитОрганизацииНаименованиеСокращенное =
		Метаданные.Справочники.Организации.Реквизиты.Найти("НаименованиеСокращенное") <> Неопределено;

	Если ЕстьРеквизитОрганизацииНаименованиеСокращенное Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеОрганизации", "Организации.НаименованиеСокращенное");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеОрганизации", "Организации.Наименование");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПроверяемыеМЧДФНСНеЗаданы",    ПроверяемыеМЧДФНС = Неопределено);
	Запрос.УстановитьПараметр("ВыбранныеОрганизацииНеЗаданы", ВыбранныеОрганизации = Неопределено);
	
	Если ТипЗнч(ПроверяемыеМЧДФНС) = Тип("Массив") ИЛИ ТипЗнч(ПроверяемыеМЧДФНС) = Тип("ФиксированныйМассив") Тогда
		МассивПроверяемыхМЧДФНС = ПроверяемыеМЧДФНС;
	Иначе
		ПроверяемаяМЧДФНС = ПроверяемыеМЧДФНС;
		МассивПроверяемыхМЧДФНС = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПроверяемаяМЧДФНС);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПроверяемыеМЧДФНС", МассивПроверяемыхМЧДФНС);

	Если ТипЗнч(ВыбранныеОрганизации) = Тип("Массив") ИЛИ ТипЗнч(ВыбранныеОрганизации) = Тип("ФиксированныйМассив") Тогда
		МассивВыбранныхОрганизаций = ВыбранныеОрганизации;
	Иначе
		ВыбраннаяОрганизация = ВыбранныеОрганизации;
		МассивВыбранныхОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяОрганизация);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВыбранныеОрганизации", МассивВыбранныхОрганизаций);
	
КонецПроцедуры

Функция ЗапросМЧДВРегистрациях()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
		|	РегистрацииВНалоговомОргане.Код КАК Код,
		|	РегистрацииВНалоговомОргане.КПП КАК КПП,
		|	РегистрацииВНалоговомОргане.Владелец КАК Владелец,
		|	РегистрацииВНалоговомОргане.Доверенность КАК Доверенность
		|ПОМЕСТИТЬ РегистрацииВНО
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
		|	И (РегистрацииВНалоговомОргане.Доверенность ССЫЛКА Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр
		|			ИЛИ РегистрацииВНалоговомОргане.Доверенность ССЫЛКА Справочник.МашиночитаемыеДоверенностиФНС)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацииВНалоговомОрганеПодписанты.Ссылка,
		|	РегистрацииВНалоговомОрганеПодписанты.Ссылка.Код,
		|	РегистрацииВНалоговомОрганеПодписанты.Ссылка.КПП,
		|	РегистрацииВНалоговомОрганеПодписанты.Ссылка.Владелец,
		|	РегистрацииВНалоговомОрганеПодписанты.Доверенность
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане.Подписанты КАК РегистрацииВНалоговомОрганеПодписанты
		|ГДЕ
		|	НЕ РегистрацииВНалоговомОрганеПодписанты.Ссылка.ПометкаУдаления
		|	И (РегистрацииВНалоговомОрганеПодписанты.Доверенность ССЫЛКА Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр
		|			ИЛИ РегистрацииВНалоговомОрганеПодписанты.Доверенность ССЫЛКА Справочник.МашиночитаемыеДоверенностиФНС)";
	
	ТекстЗапроса = ТекстЗапроса + "; //////////////////////////////////////////////////////////////////////////////// " + Символы.ПС;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УточнитьРеквизитыПредставителяМЧДФНС(
		РеквизитыДоверенности,
		ДоверенностьПредставителя,
		ДанныеРегистрации) Экспорт
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(РеквизитыДоверенности.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РеквизитыДоверенности.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	Если НЕ ЭтоВерсия5_02 ИЛИ РеквизитыДоверенности.КоличествоПредставителей <= 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыДоверенности.Представители) = Тип("Массив") Тогда
		СтрокиПредставителей = РеквизитыДоверенности.Представители
	Иначе
		СтрокиПредставителей = РеквизитыДоверенности.Представители.Выгрузить();
	КонецЕсли;
	Если СтрокиПредставителей.Количество() <= 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеРегистрации.Представитель) Тогда
		Возврат НСтр("ru = 'Не задан представитель в регистрации налогового органа организации. Невозможно определить представителя в машиночитаемой доверенности с несколькими представителями';
					|en = 'Не задан представитель в регистрации налогового органа организации. Невозможно определить представителя в машиночитаемой доверенности с несколькими представителями'");
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыДоверенности.Представители) = Тип("Массив") Тогда
		СтрокиПредставителейСоответствующиеРегистрации = Новый Массив;
		Для каждого СтрокаПредставителя Из СтрокиПредставителей Цикл
			Если СтрокаПредставителя.Представитель = ДанныеРегистрации.Представитель Тогда
				СтрокиПредставителейСоответствующиеРегистрации.Добавить(СтрокаПредставителя);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтрокиПредставителейСоответствующиеРегистрации = СтрокиПредставителей.НайтиСтроки(Новый Структура("Представитель",
			ДанныеРегистрации.Представитель));
	КонецЕсли;
	
	Если СтрокиПредставителейСоответствующиеРегистрации.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Не удалось найти представителя в машиночитаемой доверенности с несколькими представителями, соответствующего представителю регистрации налогового органа организации';
					|en = 'Не удалось найти представителя в машиночитаемой доверенности с несколькими представителями, соответствующего представителю регистрации налогового органа организации'");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеРегистрации.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если СтрокиПредставителейСоответствующиеРегистрации[0].Статус =
			Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано Тогда
			
			Возврат НСтр("ru = 'Отозван представитель машиночитаемой доверенности с несколькими представителями, соответствующий представителю регистрации налогового органа организации';
						|en = 'Отозван представитель машиночитаемой доверенности с несколькими представителями, соответствующий представителю регистрации налогового органа организации'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДоверенности, СтрокиПредставителейСоответствующиеРегистрации[0],,
			?(РеквизитыДоверенности.Свойство("Статус"), "Статус", ""));
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ДанныеРегистрации.УполномоченноеЛицоПредставителя) Тогда
			Возврат НСтр("ru = 'Не задано уполномоченное лицо представителя в регистрации налогового органа организации. Невозможно определить представителя в машиночитаемой доверенности с несколькими представителями';
						|en = 'Не задано уполномоченное лицо представителя в регистрации налогового органа организации. Невозможно определить представителя в машиночитаемой доверенности с несколькими представителями'");
		КонецЕсли;
		
		ПредставительНайден = Ложь;
		Для каждого СтрокаПредставителяСоответствующаяРегистрации Из СтрокиПредставителейСоответствующиеРегистрации Цикл
			Если ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокаПредставителяСоответствующаяРегистрации,
				"ПредставительФЛ_") = ДанныеРегистрации.УполномоченноеЛицоПредставителя Тогда
				
				Если СтрокаПредставителяСоответствующаяРегистрации.Статус =
					Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано Тогда
					
					Возврат НСтр("ru = 'Отозван представитель машиночитаемой доверенности с несколькими представителями, соответствующий уполномоченному лицу представителя регистрации налогового органа организации';
								|en = 'Отозван представитель машиночитаемой доверенности с несколькими представителями, соответствующий уполномоченному лицу представителя регистрации налогового органа организации'");
				КонецЕсли;
				
				ПредставительНайден = Истина;
				ЗаполнитьЗначенияСвойств(РеквизитыДоверенности, СтрокаПредставителяСоответствующаяРегистрации,,
					?(РеквизитыДоверенности.Свойство("Статус"), "Статус", ""));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПредставительНайден Тогда
			Возврат НСтр("ru = 'Не удалось найти представителя в машиночитаемой доверенности с несколькими представителями, соответствующего уполномоченному лицу представителя регистрации налогового органа организации';
						|en = 'Не удалось найти представителя в машиночитаемой доверенности с несколькими представителями, соответствующего уполномоченному лицу представителя регистрации налогового органа организации'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОрганизацияМЧДЕдиногоФормата(Знач ДоверенностьСсылка, Знач ВернутьВсеОрганизации = Ложь) Экспорт
	
	Результат = ?(ВернутьВсеОрганизации, Новый Массив, Неопределено);
	
	ПараметрыМЧД = ПараметрыМЧДЕдиногоФормата();
	
	ТипУчастникаДоверитель = ОбщегоНазначенияЭДКО.БезопасноеПолучениеЗначенияПеречисления(
		ПараметрыМЧД.ПеречислениеТипыУчастниковМЧД, ПараметрыМЧД.ЗначениеПеречисленияДоверитель);
	Если Метаданные.РегистрыСведений.Найти(
		ПараметрыМЧД.РегистрСведенийМашиночитаемыеДоверенностиПредставителиИДоверители) <> Неопределено
		И ТипУчастникаДоверитель <> Неопределено Тогда
		
		ЕстьРеквизитКПП = Неопределено;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.Организация КАК Организация,
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.ИНН КАК ИНН,
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.ИННФЛ КАК ИННФЛ,
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.КПП КАК КПП
			|ИЗ
			|	&МашиночитаемыеДоверенностиПредставителиИДоверители КАК МашиночитаемыеДоверенностиПредставителиИДоверители
			|ГДЕ
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.МашиночитаемаяДоверенность = &Ссылка
			|	И МашиночитаемыеДоверенностиПредставителиИДоверители.ТипУчастника = &ТипУчастника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МашиночитаемыеДоверенностиПредставителиИДоверители",
			"РегистрСведений." + ПараметрыМЧД.РегистрСведенийМашиночитаемыеДоверенностиПредставителиИДоверители);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.Организация",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.РеквизитОрганизация);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.ИНН",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.ИзмерениеИНН);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.ИННФЛ",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.ИзмерениеИННФЛ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.КПП",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.ИзмерениеКПП);
		Запрос.УстановитьПараметр("Ссылка", 		ДоверенностьСсылка);
		Запрос.УстановитьПараметр("ТипУчастника", 	ТипУчастникаДоверитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Организация) = Тип("СправочникСсылка.Организации") Тогда
				ОрганизацияСсылка = Выборка.Организация;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ИНН) Тогда
				РеквизитыПоискаОрганизации = Новый Соответствие;
				РеквизитыПоискаОрганизации.Вставить("ИНН", Выборка.ИНН);
				Если ЗначениеЗаполнено(Выборка.КПП) Тогда
					Если ЕстьРеквизитКПП = Неопределено Тогда
						ЕстьРеквизитКПП = Метаданные.Справочники.Организации.Реквизиты.Найти("КПП") <> Неопределено;
					КонецЕсли;
					Если ЕстьРеквизитКПП Тогда
						РеквизитыПоискаОрганизации.Вставить("КПП", Выборка.КПП);
					КонецЕсли;
				КонецЕсли;
				ОрганизацияСсылка = ОбщегоНазначенияЭДКО.НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(),
					РеквизитыПоискаОрганизации);
			ИначеЕсли ЗначениеЗаполнено(Выборка.ИННФЛ) Тогда
				РеквизитыПоискаОрганизации = Новый Соответствие;
				РеквизитыПоискаОрганизации.Вставить("ИНН", Выборка.ИННФЛ);
				ОрганизацияСсылка = ОбщегоНазначенияЭДКО.НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(),
					РеквизитыПоискаОрганизации);
			Иначе
				ОрганизацияСсылка = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
				Если ВернутьВсеОрганизации Тогда
					Результат.Добавить(ОрганизацияСсылка);
				Иначе
					Результат = ОрганизацияСсылка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ?(ВернутьВсеОрганизации, Результат.Количество() = 0, НЕ ЗначениеЗаполнено(Результат)) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	МашиночитаемыеДоверенностиДоверители.Доверитель КАК Доверитель
			|ИЗ
			|	&МашиночитаемыеДоверенностиДоверители КАК МашиночитаемыеДоверенностиДоверители
			|ГДЕ
			|	МашиночитаемыеДоверенностиДоверители.Ссылка = &Ссылка");
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МашиночитаемыеДоверенностиДоверители",
			"Справочник." + ИмяТипаСправочникаМашиночитаемыеДоверенности
			+ "." + ПараметрыМЧД.ТабличнаяЧастьДоверители);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиДоверители.Доверитель",
			"МашиночитаемыеДоверенностиДоверители." + ПараметрыМЧД.РеквизитТабличнойЧастиДоверитель);
		Запрос.УстановитьПараметр("Ссылка", ДоверенностьСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Доверитель) = Тип("СправочникСсылка.Организации") Тогда
				Если ВернутьВсеОрганизации Тогда
					Результат.Добавить(Выборка.Доверитель);
				Иначе
					Результат = Выборка.Доверитель;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставителиМЧДЕдиногоФормата(ДоверенностьСсылка, ТолькоФизическиеЛица = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	ПараметрыМЧД = ПараметрыМЧДЕдиногоФормата();
	
	ТипУчастникаПредставитель = ОбщегоНазначенияЭДКО.БезопасноеПолучениеЗначенияПеречисления(
		ПараметрыМЧД.ПеречислениеТипыУчастниковМЧД, ПараметрыМЧД.ЗначениеПеречисленияПредставитель);
	Если Метаданные.РегистрыСведений.Найти(
		ПараметрыМЧД.РегистрСведенийМашиночитаемыеДоверенностиПредставителиИДоверители) <> Неопределено
		И ТипУчастникаПредставитель <> Неопределено Тогда
		
		ЕстьРеквизитСтраховойНомерПФР = Неопределено;
		ЕстьРеквизитСНИЛС = Неопределено;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.Организация КАК Организация,
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.ИННФЛ КАК ИННФЛ,
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.СНИЛС КАК СНИЛС
			|ИЗ
			|	&МашиночитаемыеДоверенностиПредставителиИДоверители КАК МашиночитаемыеДоверенностиПредставителиИДоверители
			|ГДЕ
			|	МашиночитаемыеДоверенностиПредставителиИДоверители.МашиночитаемаяДоверенность = &Ссылка
			|	И МашиночитаемыеДоверенностиПредставителиИДоверители.ТипУчастника = &ТипУчастника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МашиночитаемыеДоверенностиПредставителиИДоверители",
			"РегистрСведений." + ПараметрыМЧД.РегистрСведенийМашиночитаемыеДоверенностиПредставителиИДоверители);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.Организация",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.РеквизитОрганизация);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.ФизическоеЛицо",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.РеквизитФизическоеЛицо);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.ИННФЛ",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.ИзмерениеИННФЛ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПредставителиИДоверители.СНИЛС",
			"МашиночитаемыеДоверенностиПредставителиИДоверители." + ПараметрыМЧД.ИзмерениеСНИЛС);
		Запрос.УстановитьПараметр("Ссылка", 		ДоверенностьСсылка);
		Запрос.УстановитьПараметр("ТипУчастника", 	ТипУчастникаПредставитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТолькоФизическиеЛица И (ЗначениеЗаполнено(Выборка.ФизическоеЛицо)
				ИЛИ НЕ ЗначениеЗаполнено(Выборка.Организация) И НЕ ЗначениеЗаполнено(Выборка.ФизическоеЛицо)) Тогда
				Если ЗначениеЗаполнено(Выборка.ФизическоеЛицо) Тогда
					ФизическоеЛицоСсылка = Выборка.ФизическоеЛицо;
				ИначеЕсли ЗначениеЗаполнено(Выборка.ИННФЛ) Тогда
					РеквизитыПоискаФизическогоЛица = Новый Соответствие;
					РеквизитыПоискаФизическогоЛица.Вставить("ИНН", Выборка.ИННФЛ);
					Если ЗначениеЗаполнено(Выборка.СНИЛС) Тогда
						Если ЕстьРеквизитСтраховойНомерПФР = Неопределено Тогда
							ЕстьРеквизитСтраховойНомерПФР =
								Метаданные.Справочники.ФизическиеЛица.Реквизиты.Найти("СтраховойНомерПФР") <> Неопределено;
						КонецЕсли;
						Если ЕстьРеквизитСтраховойНомерПФР Тогда
							РеквизитыПоискаФизическогоЛица.Вставить("СтраховойНомерПФР", Выборка.СНИЛС);
						Иначе
							Если ЕстьРеквизитСНИЛС = Неопределено Тогда
								ЕстьРеквизитСНИЛС = Метаданные.Справочники.ФизическиеЛица.Реквизиты.Найти("СНИЛС") <> Неопределено;
							КонецЕсли;
							Если ЕстьРеквизитСНИЛС Тогда
								РеквизитыПоискаФизическогоЛица.Вставить("СНИЛС", Выборка.СНИЛС);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ФизическоеЛицоСсылка = ОбщегоНазначенияЭДКО.НайтиЭлементИБ(Справочники.ФизическиеЛица.ПустаяСсылка(),
						РеквизитыПоискаФизическогоЛица);
				Иначе
					ФизическоеЛицоСсылка = Неопределено;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФизическоеЛицоСсылка) Тогда
					Результат.Добавить(ФизическоеЛицоСсылка);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Выборка.Организация) Тогда
				Результат.Добавить(Выборка.Организация);
			ИначеЕсли ЗначениеЗаполнено(Выборка.ФизическоеЛицо) Тогда
				Результат.Добавить(Выборка.ФизическоеЛицо);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	МашиночитаемыеДоверенностиПредставители.Представитель КАК Представитель
			|ИЗ
			|	&МашиночитаемыеДоверенностиПредставители КАК МашиночитаемыеДоверенностиПредставители
			|ГДЕ
			|	МашиночитаемыеДоверенностиПредставители.Ссылка = &Ссылка");
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МашиночитаемыеДоверенностиПредставители",
			"Справочник." + ИмяТипаСправочникаМашиночитаемыеДоверенности + ".Представители");
		Запрос.УстановитьПараметр("Ссылка", ДоверенностьСсылка);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представитель");
		
		Если ТолькоФизическиеЛица Тогда
			КоличествоПредставителей = Результат.Количество();
			Для ИндексПредставителяСКонца = 0 По КоличествоПредставителей - 1 Цикл
				ИндексПредставителя = КоличествоПредставителей - ИндексПредставителяСКонца - 1;
				Если ТипЗнч(Результат[ИндексПредставителя]) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
					Результат.Удалить(ИндексПредставителя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваМЧДЕдиногоФормата(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МашиночитаемыеДоверенностиСтатусы.ТехническийСтатус КАК ТехническийСтатус,
		|	МашиночитаемыеДоверенностиСтатусы.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
		|	МашиночитаемыеДоверенностиСтатусы.ДатаТранзакции КАК ДатаТранзакции
		|ИЗ
		|	&МашиночитаемыеДоверенностиСтатусы КАК МашиночитаемыеДоверенностиСтатусы
		|ГДЕ
		|	МашиночитаемыеДоверенностиСтатусы.МашиночитаемаяДоверенность = &Ссылка");
	ИмяТипаРегистраСведенийМашиночитаемыеДоверенностиСтатусы = "МашиночитаемыеДоверенностиСтатусы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МашиночитаемыеДоверенностиСтатусы",
		"РегистрСведений." + ИмяТипаРегистраСведенийМашиночитаемыеДоверенностиСтатусы);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИмяТипаПеречисленияТехническиеСтатусыМЧД = "ТехническиеСтатусыМЧД";
	ТехническийСтатус 	= Перечисления[ИмяТипаПеречисленияТехническиеСтатусыМЧД].ПустаяСсылка();
	ДатаЗапросаСтатуса 	= ТекущаяДатаСеанса();
	ДатаТранзакции 		= ДатаЗапросаСтатуса;
	Если Выборка.Следующий() Тогда
		ТехническийСтатус 	= Выборка.ТехническийСтатус;
		ДатаЗапросаСтатуса 	= Выборка.ДатаЗапросаСтатуса;
		ДатаТранзакции 		= Выборка.ДатаТранзакции;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", 				Ссылка);
	Результат.Вставить("ТехническийСтатус", 	ТехническийСтатус);
	Результат.Вставить("ДатаЗапросаСтатуса", 	ДатаЗапросаСтатуса);
	Результат.Вставить("ДатаТранзакции", 		ДатаТранзакции);
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьМЧДЕдиногоФормата(Ссылка, ПараметрыВозврата = Неопределено) Экспорт
	
	ДоверенностьСсылка = Ссылка;
	
	ПараметрыМЧД = ПараметрыМЧДЕдиногоФормата();
	
	ПараметрыВозвратаВызова = Новый Структура;
	ПараметрыВозвратаВызова.Вставить("СформироватьФайлДоверенностиПриОтсутствии", 	Истина);
	ПараметрыВозвратаВызова.Вставить("ИгнорироватьОтсутствиеФайлаДоверенности", 	Ложь);
	ПараметрыВозвратаВызова.Вставить("ИсключитьВозвратДанных", 						Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьОписаниеОшибки", 					Ложь);
	Если ПараметрыВозврата <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВозвратаВызова, ПараметрыВозврата);
		
		Если ПараметрыВозврата.Свойство("Организация")
			И (ПараметрыВозврата.Организация = Неопределено
				ИЛИ ((ТипЗнч(ПараметрыВозврата.Организация) = Тип("Массив")
						ИЛИ ТипЗнч(ПараметрыВозврата.Организация) = Тип("ФиксированныйМассив"))
					И ПараметрыВозврата.Организация.Количество() = 0)) Тогда
			
			ПараметрыВозврата.Организация = ОрганизацияМЧДЕдиногоФормата(ДоверенностьСсылка,
				ПараметрыВозврата.Организация <> Неопределено)
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Массив;
	Результат.Добавить(Неопределено);
	
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДоверенностьСсылка);
	
	// есть есть МЧД для налоговых органов, но выгружаем ее
	ДляНалоговыхОрганов = Ложь;
	Если Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(
		ПараметрыМЧД.РеквизитДляНалоговыхОрганов) <> Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИСТИНА
			|ИЗ
			|	&МашиночитаемыеДоверенности КАК МашиночитаемыеДоверенности
			|ГДЕ
			|	МашиночитаемыеДоверенности.Ссылка В(&Доверенности)
			|	И МашиночитаемыеДоверенности.ДляНалоговыхОрганов");
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МашиночитаемыеДоверенности",
			"Справочник." + ИмяТипаСправочникаМашиночитаемыеДоверенности);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенности.ДляНалоговыхОрганов",
			"МашиночитаемыеДоверенности." + ПараметрыМЧД.РеквизитДляНалоговыхОрганов);
		Запрос.УстановитьПараметр("Доверенности", Доверенности);
		РезультатЗапроса = Запрос.Выполнить();
		ДляНалоговыхОрганов = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;
	
	ФайлыДоверенности = Неопределено;
	ЕстьОшибкаВыгрузки = Ложь;
	ОписанияОшибокПодписи = Новый Массив;
	СтрокиОписанийОшибок = Новый Массив;
	МодульМашиночитаемыеДоверенностиФНС = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНС");
	Попытка
		ФайлыДоверенности = МодульМашиночитаемыеДоверенностиФНС.ФайлыДоверенностей(Доверенности, ДляНалоговыхОрганов)[
			ДоверенностьСсылка];
	Исключение
		ИнформацияОбОшибке =  ИнформацияОбОшибке();
		
		ЕстьОшибкаВыгрузки = Истина;
		ОписаниеОшибки = НСтр("ru = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)';
								|en = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)'")
			+ ". " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки Тогда
			СтрокиОписанийОшибок.Добавить(ОписаниеОшибки);
		Иначе
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
		КонецЕсли;
	КонецПопытки;
	
	Если ФайлыДоверенности <> Неопределено Тогда
		Для каждого ФайлДоверенности Из ФайлыДоверенности Цикл
			Если ФайлДоверенности.ТипФайла = "Доверенность" Тогда
				Если ЗначениеЗаполнено(ФайлДоверенности.ОписаниеОшибки) Тогда
					ЕстьОшибкаВыгрузки = Истина;
					ОписаниеОшибки = НСтр("ru = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)';
											|en = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)'")
						+ ". " + ФайлДоверенности.ОписаниеОшибки;
					Если ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки Тогда
						СтрокиОписанийОшибок.Добавить(ОписаниеОшибки);
					Иначе
						ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
					КонецЕсли;
					
				ИначеЕсли Результат[0] = Неопределено Тогда
					АдресФайла = ?(ПараметрыВозвратаВызова.ИсключитьВозвратДанных, Неопределено,
						ПоместитьВоВременноеХранилище(ФайлДоверенности.ДвоичныеДанные, Новый УникальныйИдентификатор));
					Результат[0] = Новый Структура("Имя, Адрес", ФайлДоверенности.ИмяФайла, АдресФайла);
				КонецЕсли;
				
			Иначе
				Если ЗначениеЗаполнено(ФайлДоверенности.ОписаниеОшибки) Тогда
					ОписанияОшибокПодписи.Добавить(ФайлДоверенности.ОписаниеОшибки);
					
				ИначеЕсли ФайлДоверенности.ТипФайла = "Подпись" Тогда
					АдресФайла = ?(ПараметрыВозвратаВызова.ИсключитьВозвратДанных, Неопределено,
						ПоместитьВоВременноеХранилище(ФайлДоверенности.ДвоичныеДанные, Новый УникальныйИдентификатор));
					Результат.Добавить(Новый Структура("Имя, Адрес", ФайлДоверенности.ИмяФайла, АдресФайла));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибкаВыгрузки ИЛИ ОписанияОшибокПодписи.Количество() <> 0 Тогда
		Для каждого ОписаниеОшибкиПодписи Из ОписанияОшибокПодписи Цикл
			ОписаниеОшибки = НСтр("ru = 'Не удалось выгрузить подпись машиночитаемой доверенности (единый формат)';
									|en = 'Не удалось выгрузить подпись машиночитаемой доверенности (единый формат)'")
				+ ". " + ОписаниеОшибкиПодписи;
			Если ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки Тогда
				СтрокиОписанийОшибок.Добавить(ОписаниеОшибки);
			Иначе
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ?(ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки,
			СтрСоединить(СтрокиОписанийОшибок, Символы.ПС), Неопределено);
	КонецЕсли;
	
	// получаем номер доверенности и формируем выгрузку при отсутствии
	Если Результат[0] = Неопределено И Результат.Количество() = 1
		И ПараметрыВозвратаВызова.СформироватьФайлДоверенностиПриОтсутствии
		И Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(
			ПараметрыМЧД.РеквизитНомерДоверенности) <> Неопределено Тогда
		
		ОбъектДоверенности = ДоверенностьСсылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ОбъектДоверенности[ПараметрыМЧД.РеквизитФайлДоверенности])
			ИЛИ ЭлектроннаяПодпись.УстановленныеПодписи(
			ОбъектДоверенности[ПараметрыМЧД.РеквизитФайлДоверенности]).Количество() = 0 Тогда
			
			РегистрироватьВРеестре = ?(Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(
				ПараметрыМЧД.РеквизитРегистрироватьВРеестре) = Неопределено,
				Истина, ОбъектДоверенности[ПараметрыМЧД.РеквизитРегистрироватьВРеестре]);
			
			Если РегистрироватьВРеестре И НЕ ЗначениеЗаполнено(ОбъектДоверенности[ПараметрыМЧД.РеквизитНомерДоверенности]) Тогда
				РезультатПолучения = НомерМЧДЕдиногоФормата();
				
				Если РезультатПолучения <> Неопределено И РезультатПолучения.Свойство("НомерДоверенности")
					И ЗначениеЗаполнено(РезультатПолучения.НомерДоверенности) Тогда
					
					ОбъектДоверенности[ПараметрыМЧД.РеквизитНомерДоверенности] = РезультатПолучения.НомерДоверенности;
					
				Иначе
					ОписаниеОшибки = НСтр("ru = 'Не удалось получить номер доверенности';
											|en = 'Не удалось получить номер доверенности'")
						+ ?(РезультатПолучения <> Неопределено И РезультатПолучения.Ошибка <> Неопределено
							И ЗначениеЗаполнено(РезультатПолучения.Ошибка.ТекстОшибки),
						". " + РезультатПолучения.Ошибка.ТекстОшибки, "");
					Если НЕ ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки Тогда
						ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
					КонецЕсли;
					
					Возврат ?(ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки, ОписаниеОшибки, Неопределено);
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектДоверенности[ПараметрыМЧД.РеквизитНомерДоверенности]) Тогда
				ОбъектДоверенности[ПараметрыМЧД.РеквизитНомерДоверенности] = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОбъектДоверенности.ПроверитьЗаполнение() Тогда
			ОписаниеОшибки = НСтр("ru = 'Найдены ошибки заполнения машиночитаемой доверенности (единый формат)';
									|en = 'Найдены ошибки заполнения машиночитаемой доверенности (единый формат)'");
			Если НЕ ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки Тогда
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
			КонецЕсли;
			
			Возврат ?(ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки, ОписаниеОшибки, Неопределено);
		КонецЕсли;
		
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		Попытка
			ОписаниеФайлаДоверенности = Справочники[ИмяТипаСправочникаМашиночитаемыеДоверенности].СформироватьФайлДоверенности(
				ОбъектДоверенности);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Найдена ошибка заполнения машиночитаемой доверенности (единый формат): %1';
					|en = 'Найдена ошибка заполнения машиночитаемой доверенности (единый формат): %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			Если НЕ ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки Тогда
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
			КонецЕсли;
			
			Возврат ?(ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки, ОписаниеОшибки, Неопределено);
		КонецПопытки;
		
		ПотокВПамяти = Новый ПотокВПамяти;
		ЗаписьТекста = Новый ЗаписьТекста(ПотокВПамяти);
		ЗаписьТекста.Записать(ОписаниеФайлаДоверенности.Текст);
		ЗаписьТекста.Закрыть();
		ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ОбъектДоверенности[ПараметрыМЧД.РеквизитФайлДоверенности]) Тогда
			СвойстваФайла = Новый Структура;
			СвойстваФайла.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
			СвойстваФайла.Вставить("АдресВременногоХранилищаТекста", "");
			
			РаботаСФайлами.ОбновитьФайл(ОбъектДоверенности[ПараметрыМЧД.РеквизитФайлДоверенности], СвойстваФайла);
			
		Иначе
			ПараметрыДобавления = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыДобавления.ВладелецФайлов 		= ДоверенностьСсылка;
			ПараметрыДобавления.ИмяБезРасширения 	= ОписаниеФайлаДоверенности.ИмяБезРасширения;
			ПараметрыДобавления.РасширениеБезТочки 	= ОписаниеФайлаДоверенности.РасширениеБезТочки;
			ПараметрыДобавления.Служебный 			= Истина;
			ОбъектДоверенности[ПараметрыМЧД.РеквизитФайлДоверенности] = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавления,
				АдресФайлаВоВременномХранилище);
		КонецЕсли;
		
		Если ОбъектДоверенности.Модифицированность() Тогда
			ОбъектДоверенности.Записать();
		КонецЕсли;
		
		ИмяФайла = ОписаниеФайлаДоверенности.ИмяБезРасширения + ?(ЗначениеЗаполнено(
			ОписаниеФайлаДоверенности.РасширениеБезТочки), "." + ОписаниеФайлаДоверенности.РасширениеБезТочки, "");
		Если ПараметрыВозвратаВызова.ИсключитьВозвратДанных Тогда
			УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
			АдресФайлаВоВременномХранилище = Неопределено;
		КонецЕсли;
		Результат[0] = Новый Структура("Имя, Адрес", ИмяФайла, АдресФайлаВоВременномХранилище);
	КонецЕсли;
	
	Если Результат[0] = Неопределено Тогда
		Если ПараметрыВозвратаВызова.ИгнорироватьОтсутствиеФайлаДоверенности И Результат.Количество() = 1 Тогда
			Результат.Удалить(0);
			
		Иначе
			ОписаниеОшибки = НСтр("ru = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)';
									|en = 'Не удалось выгрузить машиночитаемую доверенность (единый формат)'");
			Если НЕ ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки Тогда
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
			КонецЕсли;
			
			Возврат ?(ПараметрыВозвратаВызова.ВозвращатьОписаниеОшибки, ОписаниеОшибки, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВозврата <> Неопределено Тогда
		Реквизиты = "";
		Если ПараметрыВозврата.Свойство("ФайлДоверенности") И ПараметрыВозврата.ФайлДоверенности = Неопределено Тогда
			Реквизиты = ПараметрыМЧД.РеквизитФайлДоверенности;
		КонецЕсли;
		Если ПараметрыВозврата.Свойство("Доверители") И ПараметрыВозврата.Доверители = Неопределено Тогда
			Реквизиты = ?(ЗначениеЗаполнено(Реквизиты), Реквизиты + ", ", "") + ПараметрыМЧД.ТабличнаяЧастьДоверители;
		КонецЕсли;
		Если ПараметрыВозврата.Свойство("Представители") И ПараметрыВозврата.Представители = Неопределено Тогда
			Реквизиты = ?(ЗначениеЗаполнено(Реквизиты), Реквизиты + ", ", "") + ПараметрыМЧД.ТабличнаяЧастьПредставители;
		КонецЕсли;
		ЗначенияРеквизитов = ?(ЗначениеЗаполнено(Реквизиты),
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоверенностьСсылка, Реквизиты), Новый Структура);
		Если ЗначенияРеквизитов.Свойство("ФайлДоверенности") Тогда
			ПараметрыВозврата.ФайлДоверенности = ЗначенияРеквизитов[ПараметрыМЧД.РеквизитФайлДоверенности];
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("Доверители") Тогда
			ПараметрыВозврата.Доверители =
				ЗначенияРеквизитов[ПараметрыМЧД.ТабличнаяЧастьДоверители].Выгрузить().ВыгрузитьКолонку(
				ПараметрыМЧД.РеквизитТабличнойЧастиДоверитель);
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("Представители") Тогда
			ПараметрыВозврата.Представители =
				ЗначенияРеквизитов[ПараметрыМЧД.ТабличнаяЧастьПредставители].Выгрузить().ВыгрузитьКолонку(
				ПараметрыМЧД.РеквизитТабличнойЧастиПредставитель);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолномочияМЧДЕдиногоФормата(Ссылка) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности 				= "МашиночитаемыеДоверенности";
	ИмяТабличнойЧастиПолномочияМЧДЕдиногоФормата 				= "Полномочия";
	ИмяРеквизитаКодТабличнойЧастиПолномочияМЧДЕдиногоФормата 	= "Код";
	Если Метаданные.Справочники[ИмяТипаСправочникаМашиночитаемыеДоверенности].ТабличныеЧасти.Найти(
		ИмяТабличнойЧастиПолномочияМЧДЕдиногоФормата) = Неопределено
		ИЛИ Метаданные.Справочники[ИмяТипаСправочникаМашиночитаемыеДоверенности].ТабличныеЧасти[
		ИмяТабличнойЧастиПолномочияМЧДЕдиногоФормата].Реквизиты.Найти(
		ИмяРеквизитаКодТабличнойЧастиПолномочияМЧДЕдиногоФормата) = Неопределено Тогда
		
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МашиночитаемыеДоверенностиПолномочия.Код КАК Код
		|ИЗ
		|	&МашиночитаемыеДоверенностиПолномочия КАК МашиночитаемыеДоверенностиПолномочия
		|ГДЕ
		|	МашиночитаемыеДоверенностиПолномочия.Ссылка = &Ссылка");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МашиночитаемыеДоверенностиПолномочия",
		"Справочник." + ИмяТипаСправочникаМашиночитаемыеДоверенности + "." + ИмяТабличнойЧастиПолномочияМЧДЕдиногоФормата);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "МашиночитаемыеДоверенностиПолномочия.Код",
		"МашиночитаемыеДоверенностиПолномочия." + ИмяРеквизитаКодТабличнойЧастиПолномочияМЧДЕдиногоФормата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
КонецФункции

Функция СведенияОВерсииФорматаМЧДФНС(ВерсияФорматаИзвестна = Ложь, ВерсияФорматаИлиСсылка = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АктуальнаяВерсияФормата", 	"5.03");
	Результат.Вставить("ВерсияФормата", 			Результат.АктуальнаяВерсияФормата);
	Результат.Вставить("ОтправкаРазрешена", 		Истина);
	
	ВерсияФормата = ?(ТипЗнч(ВерсияФорматаИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияФорматаИлиСсылка, "ВерсияФормата"), ВерсияФорматаИлиСсылка);
	ВерсияФормата = ?(ВерсияФорматаИзвестна, ?(ЗначениеЗаполнено(ВерсияФормата), ВерсияФормата, "5.01"), "");
	Если ЗначениеЗаполнено(ВерсияФормата) Тогда
		Результат.ВерсияФормата = ВерсияФормата;
	КонецЕсли;
	
	ПроверяемаяВерсияФормата = "5.03";
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) ИЛИ ВерсияФормата = ПроверяемаяВерсияФормата Тогда
		Результат.ОтправкаРазрешена =
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.МЧД ФНС вер.5.03", '20250110');
		Если Результат.ОтправкаРазрешена ИЛИ ЗначениеЗаполнено(ВерсияФормата) Тогда
			Результат.ВерсияФормата = ПроверяемаяВерсияФормата;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемаяВерсияФормата = "5.02";
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) ИЛИ ВерсияФормата = ПроверяемаяВерсияФормата Тогда
		Результат.ОтправкаРазрешена =
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.МЧД ФНС вер.5.02", '20240301');
		Если Результат.ОтправкаРазрешена ИЛИ ЗначениеЗаполнено(ВерсияФормата) Тогда
			Результат.ВерсияФормата = ПроверяемаяВерсияФормата;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемаяВерсияФормата = "5.01";
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) ИЛИ ВерсияФормата = ПроверяемаяВерсияФормата Тогда
		Результат.ОтправкаРазрешена =
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.МЧД ФНС вер.5.01", '20210822');
		Если Результат.ОтправкаРазрешена ИЛИ ЗначениеЗаполнено(ВерсияФормата) Тогда
			Результат.ВерсияФормата = ПроверяемаяВерсияФормата;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ОтправкаРазрешена = Ложь;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОВерсииФорматаЗаявленияОбОтзывеМЧДФНС(
		ВерсияФорматаИзвестна = Ложь,
		ВерсияФорматаИлиСсылка = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АктуальнаяВерсияФормата", 	"5.03");
	Результат.Вставить("ВерсияФормата", 			Результат.АктуальнаяВерсияФормата);
	Результат.Вставить("ОтправкаРазрешена", 		Истина);
	
	ВерсияФормата = ?(ТипЗнч(ВерсияФорматаИлиСсылка) = Тип("СправочникСсылка.ЗаявленияОбОтзывеМЧДФНС"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияФорматаИлиСсылка, "ВерсияФормата"), ВерсияФорматаИлиСсылка);
	ВерсияФормата = ?(ВерсияФорматаИзвестна, ?(ЗначениеЗаполнено(ВерсияФормата), ВерсияФормата, "5.01"), "");
	Если ЗначениеЗаполнено(ВерсияФормата) Тогда
		Результат.ВерсияФормата = ВерсияФормата;
	КонецЕсли;
	
	ПроверяемаяВерсияФормата = "5.03";
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) ИЛИ ВерсияФормата = ПроверяемаяВерсияФормата Тогда
		Результат.ОтправкаРазрешена =
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отзыв МЧД ФНС вер.5.03", '20250110');
		Если Результат.ОтправкаРазрешена ИЛИ ЗначениеЗаполнено(ВерсияФормата) Тогда
			Результат.ВерсияФормата = ПроверяемаяВерсияФормата;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемаяВерсияФормата = "5.02";
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) ИЛИ ВерсияФормата = ПроверяемаяВерсияФормата Тогда
		Результат.ОтправкаРазрешена =
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отзыв МЧД ФНС вер.5.02", '20240301');
		Если Результат.ОтправкаРазрешена ИЛИ ЗначениеЗаполнено(ВерсияФормата) Тогда
			Результат.ВерсияФормата = ПроверяемаяВерсияФормата;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемаяВерсияФормата = "5.01";
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) ИЛИ ВерсияФормата = ПроверяемаяВерсияФормата Тогда
		Результат.ОтправкаРазрешена =
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отзыв МЧД ФНС вер.5.01", '20220221');
		Если Результат.ОтправкаРазрешена ИЛИ ЗначениеЗаполнено(ВерсияФормата) Тогда
			Результат.ВерсияФормата = ПроверяемаяВерсияФормата;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ОтправкаРазрешена = Ложь;
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьДанныеПодписаннойВыгрузкиМЧДФСС(ДанныеПодписанногоЗапросаSOAP) Экспорт
	
	Результат = Неопределено;
	
	СодержимоеПодписанногоЗапросаSOAP = ПолучитьСтрокуИзДвоичныхДанных(ДанныеПодписанногоЗапросаSOAP, "utf-8");
	ПрефиксСодержимого = "<message>";
	ПозицияСодержимого = СтрНайти(СодержимоеПодписанногоЗапросаSOAP, ПрефиксСодержимого);
	Если ПозицияСодержимого <> 0 Тогда
		ПозицияСодержимого = ПозицияСодержимого + СтрДлина(ПрефиксСодержимого);
		СодержимоеПодписаннойВыгрузки64 = Сред(СодержимоеПодписанногоЗапросаSOAP, ПозицияСодержимого);
		ПозицияЗавершения = СтрНайти(СодержимоеПодписаннойВыгрузки64, "</message>");
		Если ПозицияЗавершения <> 0 Тогда
			СодержимоеПодписаннойВыгрузки64 = Лев(СодержимоеПодписаннойВыгрузки64, ПозицияЗавершения - 1);
		КонецЕсли;
		Результат = Base64Значение(СодержимоеПодписаннойВыгрузки64);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЗПЭД(Знач ОбъектСсылка, Знач НастройкиПроверки = Неопределено) Экспорт
	
	Если НастройкиПроверки = "ПроверятьТолькоНеподписанные" Тогда
		Если ОтчетОтправлен(ОбъектСсылка) Тогда
			Возврат Новый Структура("Выполнено, ОписаниеОшибки",
				Ложь, НСтр("ru = 'Заявления по эл. документообороту СФР (бывш. ПФР) уже подписано и отправлено.';
							|en = 'Заявления по эл. документообороту СФР (бывш. ПФР) уже подписано и отправлено.'"));
			
		ИначеЕсли МЧДПодписана(ОбъектСсылка) Тогда
			Возврат Новый Структура("Выполнено, ОписаниеОшибки",
				Ложь, НСтр("ru = 'Заявления по эл. документообороту СФР (бывш. ПФР) уже подписано.';
							|en = 'Заявления по эл. документообороту СФР (бывш. ПФР) уже подписано.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроверитьОбъект(ОбъектСсылка);
	
КонецФункции

Функция МЧДПодписана(ОбъектСсылка) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		СвойстваДоверенности = ДокументооборотСКОВызовСервера.СвойстваМЧДЕдиногоФормата(ОбъектСсылка);
		Возврат ЗначениеЗаполнено(СвойстваДоверенности.ТехническийСтатус)
			И СвойстваДоверенности.ТехническийСтатус <> ТехническиеСтатусыМЧДЕдиногоФормата("Создание")
			И СвойстваДоверенности.ТехническийСтатус <> ТехническиеСтатусыМЧДЕдиногоФормата("Подписание");
	КонецЕсли;
	
	РеквизитыОбъекта = ?(ЗначениеЗаполнено(ОбъектСсылка), ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОбъектСсылка, "ИмяФайлаВыгрузки, ЭлектроннаяПодпись"), Неопределено);
	Возврат РеквизитыОбъекта <> Неопределено И ЗначениеЗаполнено(РеквизитыОбъекта.ИмяФайлаВыгрузки)
		И РеквизитыОбъекта.ЭлектроннаяПодпись.Получить() <> Неопределено;
	
КонецФункции

Функция МЧДОбмена(Знач Организация, Знач КодКонтролирующегоОргана, Знач Пользователь = Неопределено) Экспорт
	
	Если ТипЗнч(КодКонтролирующегоОргана) = Тип("ПеречислениеСсылка.ТипыКонтролирующихОрганов") Тогда
		ИндексКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.Индекс(КодКонтролирующегоОргана);
		КодКонтролирующегоОргана = ?(ИндексКонтролирующегоОргана = -1, "",
			Метаданные.Перечисления.ТипыКонтролирующихОрганов.ЗначенияПеречисления[ИндексКонтролирующегоОргана].Имя);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МашиночитаемыеДоверенностиОбмена.Пользователь КАК Пользователь,
		|	МашиночитаемыеДоверенностиОбмена.Доверенность КАК Доверенность
		|ИЗ
		|	РегистрСведений.МашиночитаемыеДоверенностиОбмена КАК МашиночитаемыеДоверенностиОбмена
		|ГДЕ
		|	МашиночитаемыеДоверенностиОбмена.Организация = &Организация
		|	И МашиночитаемыеДоверенностиОбмена.КодКонтролирующегоОргана = &КодКонтролирующегоОргана");
	Если Пользователь <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И МашиночитаемыеДоверенностиОбмена.Пользователь = &Пользователь";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("КодКонтролирующегоОргана", 	КодКонтролирующегоОргана);
	Если Пользователь <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаписатьМЧДОбмена(
		Знач Организация,
		Знач КодКонтролирующегоОргана,
		Знач ОтчетностьПодписываетПредставитель,
		Знач Доверенность,
		Знач Подписанты) Экспорт
	
	Если ТипЗнч(КодКонтролирующегоОргана) = Тип("ПеречислениеСсылка.ТипыКонтролирующихОрганов") Тогда
		ИндексКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.Индекс(КодКонтролирующегоОргана);
		КодКонтролирующегоОргана = ?(ИндексКонтролирующегоОргана = -1, "",
			Метаданные.Перечисления.ТипыКонтролирующихОрганов.ЗначенияПеречисления[ИндексКонтролирующегоОргана].Имя);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.МашиночитаемыеДоверенностиОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.КодКонтролирующегоОргана.Установить(КодКонтролирующегоОргана);
	
	Если ОтчетностьПодписываетПредставитель = 1 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
		НоваяЗапись.КодПолучателя = "";
		НоваяЗапись.Пользователь = Справочники.Пользователи.ПустаяСсылка();
		НоваяЗапись.Доверенность = Доверенность;
		
	ИначеЕсли ОтчетностьПодписываетПредставитель = 2 Тогда
		Для каждого СтрокаПодписанта Из Подписанты Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
			НоваяЗапись.КодПолучателя = "";
			НоваяЗапись.Пользователь = СтрокаПодписанта.Пользователь;
			НоваяЗапись.Доверенность = СтрокаПодписанта.Доверенность;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция МЧДТребуетПодключения(Доверенность, КодКонтролирующегоОргана) Экспорт
	
	ИгнорируемыеЗарегистрированныеМЧД = ХранилищеОбщихНастроек.Загрузить(
		"ДокументооборотСКонтролирующимиОрганами_ИгнорируемыеЗарегистрированныеМЧД" + КодКонтролирующегоОргана);
	Если ИгнорируемыеЗарегистрированныеМЧД <> Неопределено
		И ИгнорируемыеЗарегистрированныеМЧД.Найти(Доверенность) <> Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	МассивПолномочий = ПолномочияМЧДЕдиногоФормата(Доверенность);
	Если КодКонтролирующегоОргана = "ФСГС" И МассивПолномочий.Найти("ROSSTAT_STAT_001") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОрганизацияСсылка = ОрганизацияМЧДЕдиногоФормата(Доверенность);
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗаписьСсылка = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(ОрганизацияСсылка);
	Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
		ОрганизацияУчетнойЗаписи = КонтекстЭДОСервер.ОрганизацияУчетнойЗаписи(УчетнаяЗаписьСсылка);
		Если НЕ ЗначениеЗаполнено(ОрганизацияУчетнойЗаписи) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если КодКонтролирующегоОргана = "ФСГС" И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьСсылка,
			"ПредназначенаДляДокументооборотаСФСГС") <> Истина Тогда
			
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивПредставителей = ПредставителиМЧДЕдиногоФормата(Доверенность, Истина);
	Если МассивПредставителей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Мультирежим.ЭтоМультиРежим(УчетнаяЗаписьСсылка) Тогда
		ТаблицаМЧД = МЧДОбмена(ОрганизацияСсылка, КодКонтролирующегоОргана);
		МЧДПодключена = Истина;
		Для каждого ПредставительФизическоеЛицо Из МассивПредставителей Цикл
			ПредставительПользователь = Мультирежим.ПользовательПоФизЛицуИзСправочникаПользователи(ПредставительФизическоеЛицо);
			Если ЗначениеЗаполнено(ПредставительПользователь) Тогда
				СтрокаМЧД = ТаблицаМЧД.Найти(ПредставительПользователь, "Пользователь");
				Если СтрокаМЧД = Неопределено ИЛИ СтрокаМЧД.Доверенность <> Доверенность Тогда
					МЧДПодключена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если МЧДПодключена Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ТаблицаМЧД = МЧДОбмена(ОрганизацияСсылка, КодКонтролирующегоОргана, Справочники.Пользователи.ПустаяСсылка());
		Если ТаблицаМЧД.Количество() <> 0 И ТаблицаМЧД[0].Доверенность = Доверенность Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция МЧДТребуетОтключения(Доверенность, КодКонтролирующегоОргана) Экспорт
	
	ИгнорируемыеНедействительныеМЧД = ХранилищеОбщихНастроек.Загрузить(
		"ДокументооборотСКонтролирующимиОрганами_ИгнорируемыеНедействительныеМЧД" + КодКонтролирующегоОргана);
	Если ИгнорируемыеНедействительныеМЧД <> Неопределено
		И ИгнорируемыеНедействительныеМЧД.Найти(Доверенность) <> Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	МассивПолномочий = ПолномочияМЧДЕдиногоФормата(Доверенность);
	Если КодКонтролирующегоОргана = "ФСГС" И МассивПолномочий.Найти("ROSSTAT_STAT_001") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОрганизацияСсылка = ОрганизацияМЧДЕдиногоФормата(Доверенность);
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗаписьСсылка = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(ОрганизацияСсылка);
	Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
		ОрганизацияУчетнойЗаписи = КонтекстЭДОСервер.ОрганизацияУчетнойЗаписи(УчетнаяЗаписьСсылка);
		Если НЕ ЗначениеЗаполнено(ОрганизацияУчетнойЗаписи) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если КодКонтролирующегоОргана = "ФСГС" И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьСсылка,
			"ПредназначенаДляДокументооборотаСФСГС") <> Истина Тогда
			
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивПредставителей = ПредставителиМЧДЕдиногоФормата(Доверенность, Истина);
	Если МассивПредставителей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Мультирежим.ЭтоМультиРежим(УчетнаяЗаписьСсылка) Тогда
		ТаблицаМЧД = МЧДОбмена(ОрганизацияСсылка, КодКонтролирующегоОргана);
		МЧДПодключена = Ложь;
		Для каждого ПредставительФизическоеЛицо Из МассивПредставителей Цикл
			ПредставительПользователь = Мультирежим.ПользовательПоФизЛицуИзСправочникаПользователи(ПредставительФизическоеЛицо);
			Если ЗначениеЗаполнено(ПредставительПользователь) Тогда
				СтрокаМЧД = ТаблицаМЧД.Найти(ПредставительПользователь, "Пользователь");
				Если СтрокаМЧД <> Неопределено И СтрокаМЧД.Доверенность = Доверенность Тогда
					МЧДПодключена = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ МЧДПодключена Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ТаблицаМЧД = МЧДОбмена(ОрганизацияСсылка, КодКонтролирующегоОргана, Справочники.Пользователи.ПустаяСсылка());
		Если ТаблицаМЧД.Количество() = 0 ИЛИ ТаблицаМЧД[0].Доверенность <> Доверенность Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ОрганизацияПоОбъектуОтправки(ОбъектСсылка) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		Возврат ОрганизацияМЧДЕдиногоФормата(ОбъектСсылка);
		
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Организация");
	КонецЕсли;
	
КонецФункции

Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	МодульИнтернетПоддержкаПользователей =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.МодульИнтернетПоддержкаПользователей();
	
	Возврат МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

Функция ДатаИзСтрокиРазныхФорматов(СтрокаДаты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаДаты) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДаты) = Тип("Дата") Тогда
		Возврат СтрокаДаты;
	КонецЕсли;
	
	Результат = СокрЛП(СтрокаДаты);
	
	ДатаИзСтроки = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Результат);
	Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
		Возврат ДатаИзСтроки;
	КонецЕсли;
	
	ПозицияЧасовогоПояса = СтрНайти(Результат, "+");
	Если ПозицияЧасовогоПояса <> 0 Тогда
		Результат = Лев(Результат, ПозицияЧасовогоПояса - 1);
		
		ДатаИзСтроки = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Результат);
		Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
			Возврат ДатаИзСтроки;
		КонецЕсли;
	КонецЕсли;
	
	Префикс = "\/Date(";
	Постфикс = ")\/";
	НачалоПрефикса = СтрНайти(Результат, Префикс);
	Если НачалоПрефикса <> 0 Тогда
		ДлинаПрефикса = СтрДлина(Префикс);
		ЧисловаяДата = Сред(Результат, НачалоПрефикса + ДлинаПрефикса);
		
		КонецПрефикса = СтрНайти(Результат, Постфикс);
		Если КонецПрефикса > 0 Тогда
			ЧисловаяДата = Лев(ЧисловаяДата, КонецПрефикса - 1);
		КонецЕсли;
		
		Попытка
			Возврат '00010101000000' + Число(ЧисловаяДата) / 1000 + ('19700101000000' - '00010101000000');
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "T", " "); // поддержка формата "2015-03-13T18:34:13", "2015-03-13T18:34:13Z"
	Результат = СтрЗаменить(Результат, "Z", "");
	
	Если СтрДлина(Результат) = 10 Тогда
		Результат = Результат + " 00:00:00";
		
	ИначеЕсли СтрДлина(Результат) = 16 Тогда
		Результат = Результат + ":00"
	КонецЕсли;
	
	Если (СтрДлина(Результат) = 19 ИЛИ (СтрДлина(Результат) >= 21 И СтрДлина(Результат) <= 23)) И Сред(Результат, 11, 1) = " " И
		(Сред(Результат, 14, 1) = ":" ИЛИ Сред(Результат, 14, 1) = ".") И (Сред(Результат, 17, 1) = ":" ИЛИ Сред(Результат, 17, 1) = ".") Тогда
		
		Если (Сред(Результат, 3, 1) = "." ИЛИ Сред(Результат, 3, 1) = "-") И (Сред(Результат, 6, 1) = "." ИЛИ Сред(Результат, 6, 1) = "-") Тогда
			Результат = Сред(Результат, 7, 4) + Сред(Результат, 4, 2) + Сред(Результат, 1, 2) + Сред(Результат, 12, 2) + Сред(Результат, 15, 2) + Сред(Результат, 18, 2);
			
		ИначеЕсли (Сред(Результат, 5, 1) = "." ИЛИ Сред(Результат, 5, 1) = "-") И (Сред(Результат, 8, 1) = "." ИЛИ Сред(Результат, 8, 1) = "-") Тогда
			Результат = Сред(Результат, 1, 4) + Сред(Результат, 6, 2) + Сред(Результат, 9, 2) + Сред(Результат, 12, 2) + Сред(Результат, 15, 2) + Сред(Результат, 18, 2);
		КонецЕсли;
	КонецЕсли;
	
	ДатаИзСтроки = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Результат);
	Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
		Возврат ДатаИзСтроки;
	КонецЕсли;
	
	Возврат СтрокаДаты;
	
КонецФункции

Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 32) Экспорт
	
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаСимволов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция АдресаСерверовМетокВремени(СтрокаИлиМассивПоУмолчанию = "http://dss.1stdss.1c.ru/TSP/tsp.srf") Экспорт
	
	АдресСервисаМеткиВремени = Константы.ДокументооборотСКонтролирующимиОрганами_АдресСервисаШтампаВремени.Получить();
	
	Если ЗначениеЗаполнено(АдресСервисаМеткиВремени) Тогда
		Результат = СтрРазделить(АдресСервисаМеткиВремени, Символы.ПС, Ложь);
		
		КоличествоЭлементов = Результат.Количество();
		Для ИндексЭлемента = 0 По КоличествоЭлементов - 1 Цикл
			Если НЕ ЗначениеЗаполнено(Результат[КоличествоЭлементов - ИндексЭлемента - 1]) Тогда
				Результат.Удалить(КоличествоЭлементов - ИндексЭлемента - 1);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокаИлиМассивПоУмолчанию) = Тип("Строка") Тогда
		Результат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИлиМассивПоУмолчанию);
		
	Иначе
		Результат = СтрокаИлиМассивПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьШтампыЭЦПКСодержимомуТабличногоДокумента(ТабличныйДокумент, ТабДокШтампыЭЦП) Экспорт
	
	Если ТабличныйДокумент.Области.Найти("СтрокаШтампов") <> Неопределено
	 ИЛИ ТабДокШтампыЭЦП.Области.Найти("СтрокаШтампов") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоследняяСтрокаСтраницы = ТабличныйДокумент.ПолучитьОбласть(
	ТабличныйДокумент.ВысотаТаблицы, , ТабличныйДокумент.ВысотаТаблицы);
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(
	ТабличныйДокумент.ВысотаТаблицы, ,ТабличныйДокумент.ВысотаТаблицы), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ПоследняяСтрокаСтраницы.Область(1, ,ПоследняяСтрокаСтраницы.ВысотаТаблицы).СоздатьФорматСтрок();
	ПоследняяСтрокаСтраницы.Область(1, ,ПоследняяСтрокаСтраницы.ВысотаТаблицы).КонецСтраницы = Ложь;
	ПоследняяСтрокаСтраницы.Область(1, ,ПоследняяСтрокаСтраницы.ВысотаТаблицы).РастягиватьПоГоризонтали = Ложь;
	
	Отступ = ПоследняяСтрокаСтраницы.ПолучитьОбласть(1, 1, ПоследняяСтрокаСтраницы.ВысотаТаблицы, 1);
	Отступ.Область().Очистить( , , Истина);
	
	ТабличныйДокумент.Вывести(ПоследняяСтрокаСтраницы.ПолучитьОбласть(1, 1,
	ПоследняяСтрокаСтраницы.ВысотаТаблицы, ПоследняяСтрокаСтраницы.ШиринаТаблицы));
	
	КоличествоСтраниц = 0;
	ПринтерДоступен = Истина;
	Попытка
		КоличествоСтраниц = ТабличныйДокумент.КоличествоСтраниц();
	Исключение
		ПринтерДоступен = Ложь;
	КонецПопытки;
	
	Разделитель = Новый ТабличныйДокумент;
	
	СерыйЦвет = Новый Цвет(192, 192, 192);
	Граница  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	
	СекцияОгр = Разделитель.ПолучитьОбласть(1, 1, 2, 1);
	СекцияОгр.Область().ВысотаСтроки = 7.5;
	СекцияОгр.Область().ЦветРамки = СерыйЦвет;
	СекцияОгр.Область().РастягиватьПоГоризонтали = Ложь;
	СекцияОгр.Область().ШиринаКолонки = Отступ.Область(1, 1).ШиринаКолонки;
	
	СекцияКол = СекцияОгр.ПолучитьОбласть();
	СекцияКол.Область(1, 1).ГраницаСнизу = Граница;
	
	Разделитель.Вывести(СекцияОгр);
	Для НомКол = 2 По ПоследняяСтрокаСтраницы.ШиринаТаблицы Цикл
		Секция = ?(НомКол = ПоследняяСтрокаСтраницы.ШиринаТаблицы, СекцияОгр, СекцияКол);
		Секция.Область().ШиринаКолонки = ПоследняяСтрокаСтраницы.Область(1, НомКол).ШиринаКолонки;
		Разделитель.Присоединить(Секция);
	КонецЦикла;
	Разделитель.Область(1, ,Разделитель.ВысотаТаблицы).СоздатьФорматСтрок();
	
	СтрокаШтампов = ТабДокШтампыЭЦП.ПолучитьОбласть("СтрокаШтампов");
	СтрокаШтампов.Область(1, 1, СтрокаШтампов.ВысотаТаблицы, 1).ШиринаКолонки = Отступ.Область(1, 1).ШиринаКолонки;
	
	НачальнаяВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	
	Если ПринтерДоступен Тогда
		ПроверяемыеТабДок = Новый Массив();
		ПроверяемыеТабДок.Добавить(Разделитель);
		ПроверяемыеТабДок.Добавить(СтрокаШтампов);
		ПроверяемыеТабДок.Добавить(Разделитель); // не выводится
		
		ИндДопЯчейки = 0;
		Пока НЕ ТабличныйДокумент.ПроверитьВывод(ПроверяемыеТабДок) Цикл
			ТабличныйДокумент.Присоединить(Отступ);
			ИндДопЯчейки = ИндДопЯчейки + 1;
			Если ИндДопЯчейки > 300 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Разделитель);
	ТабличныйДокумент.Вывести(СтрокаШтампов);
	
	ТабличныйДокумент.Область(НачальнаяВысотаТаблицы, ,ТабличныйДокумент.ВысотаТаблицы).ВместеСоСледующим = Истина;
	ТабличныйДокумент.Область(НачальнаяВысотаТаблицы, ,ТабличныйДокумент.ВысотаТаблицы).НачалоСтраницы = Ложь;
	
	Возврат Истина;
	
КонецФункции

Функция НастройкиОбменаЕГАИС(Организация, НастройкиОбмена = Неопределено) Экспорт
	
	Если НастройкиОбмена <> Неопределено Тогда
		НастройкиОбмена.Очистить();
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ТаблицаНастроекОбменаЕГАИС = Неопределено;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриПолученииНастроекОбменаЕГАИС(
		Организация,
		ТаблицаНастроекОбменаЕГАИС,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ОбъектМетаданныхНастройкиОбменаЕГАИС = Метаданные.РегистрыСведений.Найти("НастройкиОбменаЕГАИС");
		
		Результат = ОбъектМетаданныхНастройкиОбменаЕГАИС <> Неопределено
			И ОбъектМетаданныхНастройкиОбменаЕГАИС.Измерения.Найти("ИдентификаторФСРАР") <> Неопределено
			И ОбъектМетаданныхНастройкиОбменаЕГАИС.Ресурсы.Найти("АдресУТМ") <> Неопределено
			И ОбъектМетаданныхНастройкиОбменаЕГАИС.Ресурсы.Найти("ПортУТМ") <> Неопределено
			И ОбъектМетаданныхНастройкиОбменаЕГАИС.Ресурсы.Найти("Таймаут") <> Неопределено
			И ОбъектМетаданныхНастройкиОбменаЕГАИС.Ресурсы.Найти("ОбменНаСервере") <> Неопределено;
		
		Если Результат Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
				|	НастройкиОбменаЕГАИС.АдресУТМ КАК АдресУТМ,
				|	НастройкиОбменаЕГАИС.ПортУТМ КАК ПортУТМ,
				|	НастройкиОбменаЕГАИС.Таймаут КАК Таймаут,
				|	НастройкиОбменаЕГАИС.ОбменНаСервере КАК ОбменНаСервере
				|ИЗ
				|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
				|УПОРЯДОЧИТЬ ПО
				|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР");
			
			ТаблицаНастроекОбменаЕГАИС = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	Иначе
		Результат = (ТаблицаНастроекОбменаЕГАИС <> Неопределено);
	КонецЕсли;
	
	Если Результат Тогда
		Для каждого СтрокаНастроекОбмена Из ТаблицаНастроекОбменаЕГАИС Цикл
			ЭлементНастроекОбмена = Новый Структура();
			ЭлементНастроекОбмена.Вставить("АдресУТМ", СтрокаНастроекОбмена.АдресУТМ);
			ЭлементНастроекОбмена.Вставить("ПортУТМ", СтрокаНастроекОбмена.ПортУТМ);
			ЭлементНастроекОбмена.Вставить("Таймаут", СтрокаНастроекОбмена.Таймаут);
			ЭлементНастроекОбмена.Вставить("ОбменНаСервере", СтрокаНастроекОбмена.ОбменНаСервере);
			
			ПредставлениеЭлементаНастроекОбмена = СтрШаблон(
				НСтр("ru = '%1:%2 (таймаут %3 с., %4, код %5)';
					|en = '%1:%2 (таймаут %3 с., %4, код %5)'"),
				СтрокаНастроекОбмена.АдресУТМ,
				Формат(СтрокаНастроекОбмена.ПортУТМ, "ЧДЦ=; ЧН=; ЧГ="),
				Формат(СтрокаНастроекОбмена.Таймаут, "ЧДЦ=; ЧН=; ЧГ="),
				?(СтрокаНастроекОбмена.ОбменНаСервере, НСтр("ru = 'обмен на сервере 1С:Предприятия';
															|en = 'обмен на сервере 1С:Предприятия'"),
					НСтр("ru = 'обмен на локальном компьютере';
						|en = 'обмен на локальном компьютере'")),
				СтрокаНастроекОбмена.ИдентификаторФСРАР);
			
			Если НастройкиОбмена <> Неопределено Тогда
				НастройкиОбмена.Добавить(ЭлементНастроекОбмена, ПредставлениеЭлементаНастроекОбмена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтформатироватьДату(Дата) Экспорт
	
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаТекстом = СтрШаблон(
			НСтр("ru = 'сегодня %1';
				|en = 'сегодня %1'"),
			Формат(Дата, "ДФ='ЧЧ:мм'"));
		
	Иначе
		ДатаТекстом = Формат(Дата, "ДФ='дд.ММ.гггг ЧЧ:мм'");
	КонецЕсли;
	
	Возврат ДатаТекстом;
	
КонецФункции

#Область СлужебныйПрограммныйИнтерфейс

Функция ПредставлениеСверкиСФНС(ЗапросИОН, ТекстXML) Экспорт 
	ВизуализацияВходящихИзвещенийФНС = ОбщегоНазначения.ОбщийМодуль("Отчеты.ВизуализацияВходящихИзвещенийФНС");
	Возврат ВизуализацияВходящихИзвещенийФНС.ПредставлениеСверкиСФНС(ЗапросИОН, ТекстXML);
КонецФункции

#КонецОбласти

Функция КраткоеНаименованиеОрганизации(Организация) Экспорт
	
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("НаименованиеСокращенное") = Неопределено Тогда
		Результат = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Организация,, "НаимЮЛСокр").НаимЮЛСокр;
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
		КонецЕсли;
		
	Иначе
		СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация, "Наименование, НаименованиеСокращенное");
		Результат = ?(ЗначениеЗаполнено(СвойстваОрганизации.НаименованиеСокращенное),
			СвойстваОрганизации.НаименованиеСокращенное, СвойстваОрганизации.Наименование);
	КонецЕсли;
	
	Результат = СокрЛП(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(ОтчетСсылка) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	РезультатВыполнения = ?(КонтекстЭДО = Неопределено, Неопределено,
		КонтекстЭДО.ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(ОтчетСсылка));
	Если РезультатВыполнения = Неопределено Тогда
		Результат = Неопределено;
		
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Ссылка", 					РезультатВыполнения.Ссылка);
		Результат.Вставить("Идентификатор", 			РезультатВыполнения.Идентификатор);
		Результат.Вставить("ИмяФайлаВыгрузки", 			РезультатВыполнения.ИмяФайлаВыгрузки);
		Результат.Вставить("Статус", 					РезультатВыполнения.Статус);
		Результат.Вставить("ДатаОтправки", 				РезультатВыполнения.ДатаОтправки);
		Результат.Вставить("ДатаПолученияРезультата", 	РезультатВыполнения.ДатаПолученияРезультата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьОбъект(Знач ОбъектСсылка, ПолучитьИУдалитьСообщенияПользователю = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 		Ложь);
	Результат.Вставить("ОписаниеОшибки", 	"");
	
	Результат.Выполнено = ОбъектСсылка.ПолучитьОбъект().ПроверитьЗаполнение();
	Если НЕ Результат.Выполнено И ПолучитьИУдалитьСообщенияПользователю Тогда
		МассивОписанийОшибок = Новый Массив;
		МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		Для каждого СведенияСообщения Из МассивСообщений Цикл
			МассивОписанийОшибок.Добавить(СведенияСообщения.Текст);
		КонецЦикла;
		Результат.ОписаниеОшибки = СтрСоединить(МассивОписанийОшибок, Символы.ПС + Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтчетОтправлен(ОтчетСсылка, ТекстСообщенияПолучитьОбработкуЭДО = "") Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		СвойстваОтправкиФТС = ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(ОтчетСсылка);
		СтатусОтправкиФТС = ?(СвойстваОтправкиФТС = Неопределено, Неопределено, СвойстваОтправкиФТС.Статус);
		ОтчетОтправленВФТСИлиБезСдачиВФТС = (СвойстваОтправкиФТС = Неопределено
			ИЛИ СтатусОтправкиФТС = Перечисления.СтатусыОтправки.Отправлен
			ИЛИ СтатусОтправкиФТС = Перечисления.СтатусыОтправки.Доставлен
			ИЛИ СтатусОтправкиФТС = Перечисления.СтатусыОтправки.Сдан
			ИЛИ СтатусОтправкиФТС = Перечисления.СтатусыОтправки.НеПринят
			ИЛИ СтатусОтправкиФТС = Перечисления.СтатусыОтправки.ПринятЕстьОшибки);
		
		СвойстваДоверенности = ДокументооборотСКОВызовСервера.СвойстваМЧДЕдиногоФормата(ОтчетСсылка);
		
		Возврат ОтчетОтправленВФТСИлиБезСдачиВФТС И ЗначениеЗаполнено(СвойстваДоверенности.ТехническийСтатус)
			И СвойстваДоверенности.ТехническийСтатус <> ТехническиеСтатусыМЧДЕдиногоФормата("Создание")
			И СвойстваДоверенности.ТехническийСтатус <> ТехническиеСтатусыМЧДЕдиногоФормата("Подписание")
			И СвойстваДоверенности.ТехническийСтатус <> ТехническиеСтатусыМЧДЕдиногоФормата("Подписана");
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтатусОтправки = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(ОтчетСсылка);
	
	Возврат ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
	
КонецФункции

Функция ОтчетНеПринят(ОтчетСсылка, ТекстСообщенияПолучитьОбработкуЭДО = "") Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		СвойстваОтправкиФТС = ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(ОтчетСсылка);
		СтатусОтправкиФТС = ?(СвойстваОтправкиФТС = Неопределено, Неопределено, СвойстваОтправкиФТС.Статус);
		ОтчетНеПринятВФТС = СтатусОтправкиФТС = Перечисления.СтатусыОтправки.НеПринят;
		
		СвойстваДоверенности = ДокументооборотСКОВызовСервера.СвойстваМЧДЕдиногоФормата(ОтчетСсылка);
		
		Возврат ОтчетНеПринятВФТС ИЛИ СвойстваДоверенности.ТехническийСтатус = ТехническиеСтатусыМЧДЕдиногоФормата("ОшибкаРегистрации");
			
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтатусОтправки = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(ОтчетСсылка);
	
	Возврат СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
	
КонецФункции

Функция ЗапоминаниеОшибок(
		СчетчикЗапоминаниеОшибок = 0,
		ПредыдущиеОшибки = Неопределено,
		ТолькоВернутьСчетчик = Ложь,
		ЗапоминаемыеПараметры = Неопределено) Экспорт
	
	ЗначенияПараметровДлительнойОтправки = ДлительнаяОтправкаКлиентСервер.ЗначенияПараметровДлительнойОтправки();
	
	Если ТолькоВернутьСчетчик Тогда
		СчетчикЗапоминаниеОшибок = ЗначенияПараметровДлительнойОтправки.Получить("СчетчикЗапоминаниеОшибок");
		СчетчикЗапоминаниеОшибок = ?(ЗначениеЗаполнено(СчетчикЗапоминаниеОшибок), СчетчикЗапоминаниеОшибок, 0);
		
		Если ЗапоминаемыеПараметры <> Неопределено Тогда
			Если ТипЗнч(ЗапоминаемыеПараметры) = Тип("Строка") Тогда
				Если СчетчикЗапоминаниеОшибок = 0 Тогда
					Возврат Неопределено;
				Иначе
					КлючЗапоминаемогоПараметра = ЗапоминаемыеПараметры;
					Возврат ЗначенияПараметровДлительнойОтправки.Получить(КлючЗапоминаемогоПараметра);
				КонецЕсли;
			КонецЕсли;
			
			КлючиЗапоминаемыхПараметров = Новый Массив;
			Для каждого ЗапоминаемыйПараметр Из ЗапоминаемыеПараметры Цикл
				КлючиЗапоминаемыхПараметров.Добавить(ЗапоминаемыйПараметр.Ключ);
			КонецЦикла;
			Для каждого КлючЗапоминаемогоПараметра Из КлючиЗапоминаемыхПараметров Цикл
				ЗначениеЗапоминаемогоПараметра = ЗначенияПараметровДлительнойОтправки.Получить(КлючЗапоминаемогоПараметра);
				ЗапоминаемыеПараметры.Вставить(КлючЗапоминаемогоПараметра, ЗначениеЗапоминаемогоПараметра);
			КонецЦикла;
		КонецЕсли;
		
		Возврат СчетчикЗапоминаниеОшибок;
	КонецЕсли;
	
	Если ПредыдущиеОшибки = Неопределено Тогда
		ПредыдущиеОшибки = ДлительнаяОтправкаКлиентСервер.ЗначенияПараметровПоУмолчанию()["Ошибки"];
	КонецЕсли;
	
	Результат = ЗначенияПараметровДлительнойОтправки.Получить("Ошибки");
	ДлительнаяОтправкаВызовСервера.ИзменитьПараметрыДлительнойОтправкиСервер("Ошибки", ПредыдущиеОшибки);
	ДлительнаяОтправкаВызовСервера.ИзменитьПараметрыДлительнойОтправкиСервер("СчетчикЗапоминаниеОшибок",
		СчетчикЗапоминаниеОшибок);
	
	Если ЗапоминаемыеПараметры <> Неопределено Тогда
		Для каждого ЗапоминаемыйПараметр Из ЗапоминаемыеПараметры Цикл
			ДлительнаяОтправкаВызовСервера.ИзменитьПараметрыДлительнойОтправкиСервер(ЗапоминаемыйПараметр.Ключ,
				ЗапоминаемыйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзВременногоХранилищаИУдалить(Адрес) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(Адрес);
	УдалитьИзВременногоХранилища(Адрес);
	Возврат Результат;
	
КонецФункции

Функция ИННОрганизации(
		Знач Организация,
		Знач ЗначениеПоУмолчаниюДляИНН = "",
		Знач ПолучитьПолноеНаименованиеОрганизации = Ложь,
		ПолноеНаименованиеОрганизации = "") Экспорт
	
	Если Организация <> Неопределено Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
			СвойстваОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация,,
				?(ПолучитьПолноеНаименованиеОрганизации, "НаимЮЛПол, ", "") + "ИННЮЛ");
			Результат = СвойстваОрганизации.ИННЮЛ;
		Иначе
			СвойстваОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация,,
				?(ПолучитьПолноеНаименованиеОрганизации, "НаимЮЛПол, ", "") + "ИННФЛ");
			Результат = СвойстваОрганизации.ИННФЛ;
		КонецЕсли;
		
		Если ПолучитьПолноеНаименованиеОрганизации Тогда
			ПолноеНаименованиеОрганизации = СвойстваОрганизации.НаимЮЛПол;
		КонецЕсли;
		Возврат Результат;
		
	Иначе
		Если ПолучитьПолноеНаименованиеОрганизации Тогда
			ПолноеНаименованиеОрганизации = "";
		КонецЕсли;
		Возврат ЗначениеПоУмолчаниюДляИНН;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьТекстОшибкиСертификатаКА(ТекстИсключения) Экспорт
	
	ДоверенныйКорневой = "http://x1.i.lencr.org/";
	Промежуточный      = "https://letsencrypt.org/certs/lets-encrypt-r3.der";
	
	УжеДобавлено = 
		СтрНайти(Строка(ТекстИсключения), ДоверенныйКорневой)
		ИЛИ СтрНайти(Строка(ТекстИсключения), Промежуточный);
		
	ДобавитьПояснения = 
		СтрНайти(Строка(ТекстИсключения), "Удаленный узел не прошел проверку")
		И НЕ УжеДобавлено;
	
	Если ДобавитьПояснения Тогда
	
		БазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
		Если БазаФайловая Тогда
			Текст1 = НСтр("ru = 'Возможно, причина в том, что на компьютере не установлены сертификаты сервера АО ""Калуга Астрал"".';
							|en = 'Возможно, причина в том, что на компьютере не установлены сертификаты сервера АО ""Калуга Астрал"".'");
		Иначе
			Текст1 = НСтр("ru = 'Возможно, причина в том, что на сервере 1С не установлены сертификаты сервера АО ""Калуга Астрал"".';
							|en = 'Возможно, причина в том, что на сервере 1С не установлены сертификаты сервера АО ""Калуга Астрал"".'");
		КонецЕсли;
		
		Текст2 = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат ';
				|en = 'Сертификат '"),
			Новый ФорматированнаяСтрока(ДоверенныйКорневой,,,,ДоверенныйКорневой),
			НСтр("ru = ' должен быть установлен в хранилище ""Доверенные корневые центры сертификации"".';
				|en = ' должен быть установлен в хранилище ""Доверенные корневые центры сертификации"".'"));
		
		Текст3 = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат ';
				|en = 'Сертификат '"),
			Новый ФорматированнаяСтрока(Промежуточный,,,,Промежуточный),
			НСтр("ru = ' должен быть установлен в хранилище ""Промежуточные центры сертификации"".';
				|en = ' должен быть установлен в хранилище ""Промежуточные центры сертификации"".'"));
			
		ТекстИсключения = Новый ФорматированнаяСтрока(
			ТекстИсключения,
			Символы.ПС,
			Текст1,
			Символы.ПС,
			Текст2,
			Символы.ПС,
			Текст3);
		
		// Записываем в журнал
		ЗаголовокОшибки = 
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Удаленный узел не прошел проверку';
				|en = 'Электронный документооборот с контролирующими органами. Удаленный узел не прошел проверку'",
			ОбщегоНазначения.КодОсновногоЯзыка());

		ЗаписьЖурналаРегистрации(
			ЗаголовокОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстИсключения);
		
	КонецЕсли;
	
	Возврат ТекстИсключения;
	
КонецФункции

Функция ЕстьУведомление(ИмяВида) Экспорт
	
	Уведомления = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ПолучитьСоответствиеВидовУведомленийИменамОтчетов();
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения[ИмяВида];
	
	Уведомление = Уведомления[ВидУведомления];
	
	Есть = Метаданные.Отчеты.Найти(Уведомление) <> Неопределено;
	
	Возврат Есть;
	
КонецФункции

Функция КНДФайлаПоАдресу(Адрес, Кодировка = Неопределено) Экспорт
	
	Возврат ЗначениеXMLФайлаПоАдресу(Адрес, "КНД", Кодировка);

КонецФункции

Функция ЗначениеXMLФайлаПоАдресу(Адрес, ИмяУзла, Кодировка = Неопределено) Экспорт
	
	ДвДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ДвДанные.Записать(ИмяФайла);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ЧтениеТекста = КонтекстЭДОСервер.НовыйЧтениеТекстаНаСервере(ИмяФайла, Кодировка);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Значение = ЗначениеXMLФайлаПоТексту(Текст, ИмяУзла);
	
	Возврат Значение;

КонецФункции

Функция ЗначениеXMLФайлаПоТексту(Текст, ИмяУзла) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ДеревоXML = КонтекстЭДОСервер.ЗагрузитьXMLВДеревоЗначений(, Текст); 
	
	Значение = КонтекстЭДОСервер.ИзвлечьДанное(ДеревоXML, ИмяУзла);
	
	Возврат Значение;

КонецФункции

#Область ЗаявленияВПФР

Функция ВидЗаявленияВПФР(ЗаявлениеПФР) Экспорт
	
	Возврат ЗаявлениеПФР.Вид;
	
КонецФункции

Функция ЗаявленияПоЭДООтправляютсяВПФР() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЗаявленияПоЭДООтправляютсяВПФР(); 
	
КонецФункции

Функция ДопКомментарийЭтапаВЗаявленииПФР(Знач Ссылка, Знач Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение параметров прорисовки
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Ложь);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, "ПФР", ДополнительныеПараметры);
	
	Если ТекущееСостояние = Неопределено ИЛИ ТекущееСостояние.ТекущийЭтапОтправки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СостояниеСдачиОтчетности = ТекущееСостояние.ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
	ДокументооборотНеНачат   = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	Если НЕ СостояниеСдачиОтчетности = ДокументооборотНеНачат Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Неопределено;
	Иначе
		Возврат КонтекстЭДОСервер.ПредложениеПодключить1СОтчетностьИзПанели();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
КонецФункции

Функция ПолучитьРеквизит(ОбъектДляЧтения, ИмяРеквизита) Экспорт
	
	МетаданныеОбъекта = ОбъектДляЧтения.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда 
		Возврат ОбъектДляЧтения[ИмяРеквизита];
	ИначеЕсли ИмяРеквизита = "Наименование" Тогда
		Возврат ОбъектДляЧтения[ИмяРеквизита];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЭтоПакетСДопДокументами(ОписьИсхДок) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЭтоПакетСДопДокументами(ОписьИсхДок);
	
КонецФункции

Функция ЗагрузитьНастройку(Ключ) Экспорт
	Возврат ХранилищеОбщихНастроек.Загрузить(Ключ);
КонецФункции

Функция СохранитьНастройку(Ключ, Значение) Экспорт
	ХранилищеОбщихНастроек.Сохранить(Ключ, , Значение);
КонецФункции

Функция ЭтоТарифКадровыеРешения(Организация) Экспорт
	
	Результат = ЭтоНужныйТариф(Организация, Перечисления.ТарифыОператораЭДО.КадровыеРешения);
	Возврат Результат;
	
КонецФункции

Функция ЭтоТарифПромоЕНС(Организация) Экспорт
	
	Результат = ЭтоНужныйТариф(Организация, Перечисления.ТарифыОператораЭДО.ПромоЕНС);
	Возврат Результат;
	
КонецФункции

Функция СобытиеПромоЕНСНаступило() Экспорт
	
	Поддерживает = Ложь;
	ДокументооборотСКОПереопределяемый.КонфигурацияПоддерживаетТарифПромоЕНС(Поддерживает);
	
	Возврат Поддерживает;
	
КонецФункции

Функция ЭтоНужныйТариф(Организация, Тариф) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Врег(УчетнаяЗапись.ЛицензияНаименование) = Врег(Строка(Тариф));
	
КонецФункции

Функция ТарифОператораЭДО(Организация) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Перечисления.ТарифыОператораЭДО.ПустаяСсылка();
	КонецЕсли;
	
	ЛицензияНаименование = УчетнаяЗапись.ЛицензияНаименование;
	
	Тарифы = Метаданные.Перечисления.ТарифыОператораЭДО.ЗначенияПеречисления;
	Для каждого Тариф Из Тарифы Цикл
		Если Врег(Тариф.Синоним) = Врег(ЛицензияНаименование) Тогда
			Возврат Перечисления.ТарифыОператораЭДО[Тариф.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Перечисления.ТарифыОператораЭДО.ПустаяСсылка();
	
КонецФункции

Функция ОтправкаОбъектаЗапрещенаНаТарифеПромоЕНС(СсылкаНаОбъект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СведенияПоОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(СсылкаНаОбъект);
	
	Организация = СведенияПоОбъекту.Организация;
	
	Если НЕ ЭтоТарифПромоЕНС(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыУведомлений = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		И (СсылкаНаОбъект.ВидУведомления = ВидыУведомлений.ИсчисленныеСуммыНалогов
		ИЛИ СсылкаНаОбъект.ВидУведомления = ВидыУведомлений.ЗапросСуммЕНП
		ИЛИ СсылкаНаОбъект.ВидУведомления = ВидыУведомлений.ВозвратЕдиногоНалоговогоПлатежа
		ИЛИ СсылкаНаОбъект.ВидУведомления = ВидыУведомлений.СогласиеНаРаскрытиеНалоговойТайны
		ИЛИ СсылкаНаОбъект.ВидУведомления = ВидыУведомлений.ЗаявлениеОЗачетеНалога) Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.УведомлениеОПолучателеДокументов") Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
		
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область МашиночитаемыеДоверенности

Функция СвойстваСервераМЧДРР()
	
	Результат = НастройкиМЧД();
	
	Если ИспользуетсяРежимТестирования() Тогда
		СохраненныеНастройкиМЧД = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_НастройкиМЧД");
		Если СохраненныеНастройкиМЧД <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, СохраненныеНастройкиМЧД);
		КонецЕсли;
		Если Результат.ИспользоватьРасширенияAPI Тогда
			Результат.ЛогинОператора 	= "";
			Результат.ПарольОператора 	= "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	URLСервера = Константы.ДокументооборотСКонтролирующимиОрганами_АдресСервисаМЧДРР.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если НЕ ЗначениеЗаполнено(URLСервера) Тогда
		URLСервера = "https://1cpoagate.1c.ru/applications/MChD/api/clientpoa";
	КонецЕсли;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLСервера);
	ЛогинПароль = ?(ЗначениеЗаполнено(СтруктураURI.Логин) ИЛИ ЗначениеЗаполнено(СтруктураURI.Пароль),
		СтруктураURI.Логин + ":" + СтруктураURI.Пароль + "@", "");
	
	Результат.Вставить("АдресСервера", 					СтруктураURI.Схема + "://" + ЛогинПароль + СтруктураURI.ИмяСервера);
	Результат.Вставить("АдресСервераБезАутентификации", СтруктураURI.Схема + "://" + СтруктураURI.ИмяСервера);
	Результат.Вставить("РесурсКорняAPI", 				"/" + СтруктураURI.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиМЧД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЛогинОператора", 			"");
	Результат.Вставить("ПарольОператора", 			"");
	Результат.Вставить("ИспользоватьРасширенияAPI", Истина);
	Результат.Вставить("ТестовыйСервер", 			"test");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОшибкиHTTP(КодСостояния) Экспорт
	
	Если КодСостояния < 300 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 300 Тогда
		Возврат НСтр("ru = 'Множественный выбор при отправке ответа сервера';
					|en = 'Множественный выбор при отправке ответа сервера'");
	ИначеЕсли КодСостояния = 301 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен';
					|en = 'Ресурс перемещен'");
	ИначеЕсли КодСостояния = 302 Тогда
		Возврат НСтр("ru = 'Ресурс временно перемещен';
					|en = 'Ресурс временно перемещен'");
	ИначеЕсли КодСостояния = 303 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен на другой адрес';
					|en = 'Ресурс перемещен на другой адрес'");
	ИначеЕсли КодСостояния = 304 Тогда
		Возврат НСтр("ru = 'Неожиданный ответ об отсутствии изменений страницы';
					|en = 'Неожиданный ответ об отсутствии изменений страницы'");
	ИначеЕсли КодСостояния = 305 Тогда
		Возврат НСтр("ru = 'Для доступа к ресурсу требуется прокси';
					|en = 'Для доступа к ресурсу требуется прокси'");
	ИначеЕсли КодСостояния = 306 Тогда
		Возврат НСтр("ru = 'Неиспользуемый код перенаправления запроса';
					|en = 'Неиспользуемый код перенаправления запроса'");
	ИначеЕсли КодСостояния = 307 Тогда
		Возврат НСтр("ru = 'Временное перенаправление';
					|en = 'Временное перенаправление'");
	ИначеЕсли КодСостояния < 400 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка по перенаправлению запроса с кодом %1';
				|en = 'Ошибка по перенаправлению запроса с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат НСтр("ru = 'Неверный формат запроса';
					|en = 'Неверный формат запроса'");
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация';
					|en = 'Требуется аутентификация'");
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат НСтр("ru = 'Требуется оплата';
					|en = 'Требуется оплата'");
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат НСтр("ru = 'Доступ к ресурсу запрещен';
					|en = 'Доступ к ресурсу запрещен'");
	ИначеЕсли КодСостояния = 404 Тогда
		Возврат НСтр("ru = 'Запрошенная страница не найдена';
					|en = 'Запрошенная страница не найдена'");
	ИначеЕсли КодСостояния = 405 Тогда
		Возврат НСтр("ru = 'Используемый метод запрещен';
					|en = 'Используемый метод запрещен'");
	ИначеЕсли КодСостояния = 406 Тогда
		Возврат НСтр("ru = 'Отсутствуют подходящие ответы';
					|en = 'Отсутствуют подходящие ответы'");
	ИначеЕсли КодСостояния = 407 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация прокси';
					|en = 'Требуется аутентификация прокси'");
	ИначеЕсли КодСостояния = 408 Тогда
		Возврат НСтр("ru = 'Лимит времени сервера при ожидании запроса исчерпан';
					|en = 'Лимит времени сервера при ожидании запроса исчерпан'");
	ИначеЕсли КодСостояния = 409 Тогда
		Возврат НСтр("ru = 'Конфликт с текущим состоянием ресурса, требуется больше информации';
					|en = 'Конфликт с текущим состоянием ресурса, требуется больше информации'");
	ИначеЕсли КодСостояния = 410 Тогда
		Возврат НСтр("ru = 'Ресурс более недоступен';
					|en = 'Ресурс более недоступен'");
	ИначеЕсли КодСостояния = 411 Тогда
		Возврат НСтр("ru = 'Требуется задание длины соержимого';
					|en = 'Требуется задание длины соержимого'");
	ИначеЕсли КодСостояния = 412 Тогда
		Возврат НСтр("ru = 'Ошибочные условия заголовочных полей';
					|en = 'Ошибочные условия заголовочных полей'");
	ИначеЕсли КодСостояния = 413 Тогда
		Возврат НСтр("ru = 'Слишком большая длина запроса';
					|en = 'Слишком большая длина запроса'");
	ИначеЕсли КодСостояния = 414 Тогда
		Возврат НСтр("ru = 'Запрошенный идентификатор слишком велик';
					|en = 'Запрошенный идентификатор слишком велик'");
	ИначеЕсли КодСостояния = 415 Тогда
		Возврат НСтр("ru = 'Неподдерживаемый тип данных запроса';
					|en = 'Неподдерживаемый тип данных запроса'");
	ИначеЕсли КодСостояния = 416 Тогда
		Возврат НСтр("ru = 'Запрошенный промежуток невыполним';
					|en = 'Запрошенный промежуток невыполним'");
	ИначеЕсли КодСостояния = 417 Тогда
		Возврат НСтр("ru = 'Несоответстие ожиданиям';
					|en = 'Несоответстие ожиданиям'");
	ИначеЕсли КодСостояния = 422 Тогда
		Возврат НСтр("ru = 'Необрабатываемый объект';
					|en = 'Необрабатываемый объект'");
	ИначеЕсли КодСостояния = 423 Тогда
		Возврат НСтр("ru = 'Заблокировано';
					|en = 'Заблокировано'");
	ИначеЕсли КодСостояния = 424 Тогда
		Возврат НСтр("ru = 'Сбой взаимосвязанного вызова';
					|en = 'Сбой взаимосвязанного вызова'");
	ИначеЕсли КодСостояния = 449 Тогда
		Возврат НСтр("ru = 'Возврат запроса после необходимого действия';
					|en = 'Возврат запроса после необходимого действия'");
	ИначеЕсли КодСостояния < 500 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка клиента с кодом %1';
				|en = 'Ошибка клиента с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат НСтр("ru = 'Внутренняя ошибка сервера';
					|en = 'Внутренняя ошибка сервера'");
	ИначеЕсли КодСостояния = 501 Тогда
		Возврат НСтр("ru = 'Процесс для данного запроса не поддерживается сервером';
					|en = 'Процесс для данного запроса не поддерживается сервером'");
	ИначеЕсли КодСостояния = 502 Тогда
		Возврат НСтр("ru = 'Gateway-сервер получил ошибочный ответ';
					|en = 'Gateway-сервер получил ошибочный ответ'");
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат НСтр("ru = 'Сервер временно недоступен';
					|en = 'Сервер временно недоступен'");
	ИначеЕсли КодСостояния = 504 Тогда
		Возврат НСтр("ru = 'Превышено время ожидание ответа на запрос Gateway-сервера';
					|en = 'Превышено время ожидание ответа на запрос Gateway-сервера'");
	ИначеЕсли КодСостояния = 505 Тогда
		Возврат НСтр("ru = 'Версия HTTP не поддерживается сервером';
					|en = 'Версия HTTP не поддерживается сервером'");
	ИначеЕсли КодСостояния = 506 Тогда
		Возврат НСтр("ru = 'Вариантный тип содержит также вариант';
					|en = 'Вариантный тип содержит также вариант'");
	ИначеЕсли КодСостояния = 507 Тогда
		Возврат НСтр("ru = 'Переполнение хранилища';
					|en = 'Переполнение хранилища'");
	ИначеЕсли КодСостояния = 510 Тогда
		Возврат НСтр("ru = 'Отсутствует поддержка расширений';
					|en = 'Отсутствует поддержка расширений'");
	ИначеЕсли КодСостояния < 600 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка сервера с кодом %1';
				|en = 'Ошибка сервера с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 999 Тогда
		Возврат НСтр("ru = 'Разрушительный сбой сервера';
					|en = 'Разрушительный сбой сервера'");
	Иначе
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка с кодом %1';
				|en = 'Ошибка с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	КонецЕсли;

КонецФункции

Функция СтруктураШаблоновОшибокМЧДРР()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстОшибкиПоУмолчанию", 			"");
	Результат.Вставить("ШаблонОшибкиИзИсключения", 			"");
	Результат.Вставить("ШаблонОшибкиДляКодаСостояния", 		"");
	Результат.Вставить("ШаблонОшибкиИзОтвета", 				"");
	Результат.Вставить("ШаблоныДляКодовОшибок", 			Новый Соответствие);
	Результат.Вставить("ШаблоныПрефиксовДляКодовОшибок", 	Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиИЗаписатьОшибкуМЧДРР(
		ОтветHTTP = Неопределено,
		СтруктураОтвета = Неопределено,
		ШаблоныОшибок = Неопределено,
		РежимВыводаИЗаписи = "",
		ПредставлениеОшибки = "")
	
	ШаблоныОшибокВызова = СтруктураШаблоновОшибокМЧДРР();
	Если ШаблоныОшибок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ШаблоныОшибокВызова, ШаблоныОшибок);
	КонецЕсли;
	
	КодОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("type"),
		СтруктураОтвета.type, "");
	ЗаголовокОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
		СтруктураОтвета.title, "");
	ТекстОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("detail"),
		СтруктураОтвета.detail, "");
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("message"),
			СтруктураОтвета.message, "");
	КонецЕсли;
	
	ПредставлениеОшибкиДобавленоВТекст = Ложь;
	Если ЗначениеЗаполнено(КодОшибки) И ШаблоныОшибокВызова.ШаблоныДляКодовОшибок <> Неопределено
		И ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки]) Тогда
		
		ТекстОшибки = ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки];
		
	ИначеЕсли ЗначениеЗаполнено(КодОшибки) И ШаблоныОшибокВызова.ШаблоныПрефиксовДляКодовОшибок <> Неопределено
		И ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблоныПрефиксовДляКодовОшибок[КодОшибки]) Тогда
		
		ШаблонПрефиксаДляКодаОшибки = ШаблоныОшибокВызова.ШаблоныПрефиксовДляКодовОшибок[КодОшибки];
		ТекстОшибки = ЗаголовокОшибки + ?(ЗначениеЗаполнено(ЗаголовокОшибки) И ЗначениеЗаполнено(ТекстОшибки), ": ", "")
			+ ТекстОшибки;
		ТекстОшибки = ШаблонПрефиксаДляКодаОшибки
			+ ?(ЗначениеЗаполнено(ШаблонПрефиксаДляКодаОшибки) И ЗначениеЗаполнено(ТекстОшибки),
			?(Прав(ШаблонПрефиксаДляКодаОшибки, 1) = ".", " ", ". "), "") + ТекстОшибки;
		
	ИначеЕсли ЗначениеЗаполнено(ЗаголовокОшибки) ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(
			ШаблоныОшибокВызова.ШаблонОшибкиИзОтвета,
			ЗаголовокОшибки + ?(ЗначениеЗаполнено(ЗаголовокОшибки) И ЗначениеЗаполнено(ТекстОшибки), ": ", "") + ТекстОшибки);
		
	Иначе
		ТекстОшибки = ?(ОтветHTTP = Неопределено, "", ОписаниеОшибкиHTTP(ОтветHTTP.КодСостояния));
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиДляКодаСостояния,
				ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения,
				ПредставлениеОшибки);
			ПредставлениеОшибкиДобавленоВТекст = Истина;
			
		Иначе
			ТекстОшибки = ШаблоныОшибокВызова.ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоЗаписатьВЖурналРегистрации" Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоВывестиОшибку" Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. МЧД распределенного реестра';
				|en = 'Электронный документооборот с контролирующими органами. МЧД распределенного реестра'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки + ?(НЕ ПредставлениеОшибкиДобавленоВТекст И ЗначениеЗаполнено(ПредставлениеОшибки), "
				|" + ПредставлениеОшибки, ""));
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПараметрыРезультатаАвторизацииНаСервереМЧДРРСКО() Экспорт
	
	ПараметрыРезультатаАвторизации = Новый Структура;
	ПараметрыРезультатаАвторизации.Вставить("ДатаСеанса", 			Неопределено);
	ПараметрыРезультатаАвторизации.Вставить("РезультатАвторизации", Неопределено);
	Возврат ПараметрыРезультатаАвторизации;
	
КонецФункции

// Используется для инициализации параметра сеанса в рамках механизмов БСП
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановитьПараметрСеансаРезультатАвторизацииНаСервереМЧДРРСКО(
		ИмяПараметра = Неопределено,
		УстановленныеПараметры = Неопределено) Экспорт
	
	Если ИмяПараметра = "РезультатАвторизацииНаСервереМЧДРРСКО" Тогда
		ПараметрыРезультатаАвторизации = ПараметрыРезультатаАвторизацииНаСервереМЧДРРСКО();
		ПараметрыСеанса.РезультатАвторизацииНаСервереМЧДРРСКО = Новый ФиксированнаяСтруктура(ПараметрыРезультатаАвторизации);
		УстановленныеПараметры.Добавить("РезультатАвторизацииАвторизацииНаСервереМЧДРРСКО");
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРезультатовОбработкиМЧДСКО() Экспорт
	
	ПараметрыРезультатовОбработки = Новый Структура;
	ПараметрыРезультатовОбработки.Вставить("ИзменилсяСтатусМЧДФНС", Неопределено);
	Возврат ПараметрыРезультатовОбработки;
	
КонецФункции

// Используется для инициализации параметра сеанса в рамках механизмов БСП
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановитьПараметрСеансаРезультатыОбработкиМЧДСКО(
		ИмяПараметра = Неопределено,
		УстановленныеПараметры = Неопределено) Экспорт
	
	Если ИмяПараметра = "РезультатыОбработкиМЧДСКО" Тогда
		ПараметрыРезультатовОбработки = ПараметрыРезультатовОбработкиМЧДСКО();
		ПараметрыСеанса.РезультатыОбработкиМЧДСКО = Новый ФиксированнаяСтруктура(ПараметрыРезультатовОбработки);
		УстановленныеПараметры.Добавить("РезультатыОбработкиМЧДСКО");
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяТипаСправочникаМашиночитаемыеДоверенности() Экспорт
	
	Возврат ?(ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует(), "МашиночитаемыеДоверенности", "");
	
КонецФункции

// Метод по реализации в БСП.
Функция ПараметрыМЧДЕдиногоФормата() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РеквизитРегистрироватьВРеестре", 		"РегистрироватьВРеестре");
	Результат.Вставить("РеквизитФайлДоверенности", 				"ФайлДоверенности");
	Результат.Вставить("ТабличнаяЧастьДоверители", 				"Доверители");
	Результат.Вставить("РеквизитТабличнойЧастиДоверитель", 		"Доверитель");
	Результат.Вставить("ТабличнаяЧастьПредставители", 			"Представители");
	Результат.Вставить("РеквизитТабличнойЧастиПредставитель", 	"Представитель");
	
	// есть проверка наличия в метаданных
	Результат.Вставить("РеквизитСтатус", 						"Статус");
	Результат.Вставить("РеквизитДатаВыдачи", 					"ДатаВыдачи");
	Результат.Вставить("РеквизитДатаОкончания", 				"ДатаОкончания");
	Результат.Вставить("РеквизитНомерДоверенности", 			"НомерДоверенности");
	Результат.Вставить("РеквизитДляНалоговыхОрганов", 			"ДляНалоговыхОрганов");
	Результат.Вставить("РеквизитСтатусВернаУстановленВручную", 	"СтатусВернаУстановленВручную");
	Результат.Вставить("РеквизитУстановившийСтатусВерна", 		"УстановившийСтатусВерна");
	Результат.Вставить("РеквизитВерна", 						"Верна");
	Результат.Вставить("РеквизитДатаПроверки", 					"ДатаПроверки");
	
	Результат.Вставить("РегистрСведенийМашиночитаемыеДоверенностиПредставителиИДоверители",
		"МашиночитаемыеДоверенностиПредставителиИДоверители");
	Результат.Вставить("ИзмерениеТипУчастника", 				"ТипУчастника");
	Результат.Вставить("ИзмерениеМашиночитаемаяДоверенность", 	"МашиночитаемаяДоверенность");
	Результат.Вставить("ИзмерениеИНН", 							"ИНН");
	Результат.Вставить("ИзмерениеИННФЛ", 						"ИННФЛ");
	Результат.Вставить("ИзмерениеСНИЛС", 						"СНИЛС");
	Результат.Вставить("ИзмерениеКПП", 							"КПП");
	Результат.Вставить("РеквизитОрганизация", 					"Организация");
	Результат.Вставить("РеквизитФизическоеЛицо", 				"ФизическоеЛицо");
	
	Результат.Вставить("ПеречислениеТипыУчастниковМЧД", 		"ТипыУчастниковМЧД");
	Результат.Вставить("ЗначениеПеречисленияДоверитель", 		"Доверитель");
	Результат.Вставить("ЗначениеПеречисленияПредставитель", 	"Представитель");
	
	Возврат Результат;
	
КонецФункции

// Используется для инициализации параметра сеанса в рамках механизмов БСП
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановитьПараметрСеансаОрганизацииПринятыхЗПЭД(
		ИмяПараметра = Неопределено,
		УстановленныеПараметры = Неопределено) Экспорт
	
	Если ИмяПараметра = "ОрганизацииПринятыхЗПЭД" Тогда
		ПараметрыСеанса.ОрганизацииПринятыхЗПЭД = Новый ФиксированныйМассив(Новый Массив);
		УстановленныеПараметры.Добавить("ОрганизацииПринятыхЗПЭД");
	КонецЕсли;
	
КонецПроцедуры

// Метод по реализации в БСП.
Функция НомерМЧДЕдиногоФормата() Экспорт
	
	Результат = Неопределено;
	
	МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНССлужебный");
	
	Попытка
		Результат = МодульМашиночитаемыеДоверенностиФНССлужебный.НомерМЧДРР();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Номер МЧД';
				|en = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Номер МЧД'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	КорректноеЗаполнение = (Результат = Неопределено)
		ИЛИ (ТипЗнч(Результат) = Тип("Структура") ИЛИ ТипЗнч(Результат) = Тип("ФиксированнаяСтруктура"))
			И (Результат.Свойство("НомерДоверенности") И ТипЗнч(Результат.НомерДоверенности) = Тип("Строка")
					И ЗначениеЗаполнено(Результат.НомерДоверенности)
				ИЛИ Результат.Свойство("Ошибка")
					И (Результат.Ошибка = Неопределено
						ИЛИ ((ТипЗнч(Результат.Ошибка) = Тип("Структура")
								ИЛИ ТипЗнч(Результат.Ошибка) = Тип("ФиксированнаяСтруктура"))
							И Результат.Ошибка.Свойство("ТекстОшибки") И ТипЗнч(Результат.Ошибка.ТекстОшибки) = Тип("Строка"))));
	Если НЕ КорректноеЗаполнение Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Метод по реализации в БСП.
Функция УстановитьСтатусРегистрацииМЧДЕдиногоФормата(ДоверенностьСсылка) Экспорт
	
	Результат = Ложь;
	
	МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНССлужебный");
	
	Попытка
		МодульМашиночитаемыеДоверенностиФНССлужебный.УстановитьСтатусРегистрации(ДоверенностьСсылка);
		Результат = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Установить статус регистрации';
				|en = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Установить статус регистрации'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Метод по реализации в БСП.
Функция ОбновлениеСтатусовМЧДЕдиногоФормата(ДоверенностьСсылка) Экспорт
	
	Результат = Ложь;
	
	ИмяТипаРегистраСведенийМашиночитаемыеДоверенностиСтатусы = "МашиночитаемыеДоверенностиСтатусы";
	
	Если Метаданные.РегистрыСведений.Найти(ИмяТипаРегистраСведенийМашиночитаемыеДоверенностиСтатусы) <> Неопределено Тогда
		РегистрСведенийМашиночитаемыеДоверенностиСтатусы =
			РегистрыСведений[ИмяТипаРегистраСведенийМашиночитаемыеДоверенностиСтатусы];
		
		Попытка
			РегистрСведенийМашиночитаемыеДоверенностиСтатусы.ОбновлениеСтатусовМЧД(ДоверенностьСсылка);
			Результат = Истина;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Обновление статусов МЧД';
					|en = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Обновление статусов МЧД'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Метод по реализации в БСП.
Функция ПрочитатьСостояниеМЧДЕдиногоФормата(ДоверенностьСсылка) Экспорт
	
	РезультатВыполнения = Неопределено;
	
	МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНССлужебный");
	
	Попытка
		РезультатВыполнения = МодульМашиночитаемыеДоверенностиФНССлужебный.ПрочитатьСостояниеМЧД(ДоверенностьСсылка);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Установить статус регистрации';
				|en = 'Электронный документооброт с контролирующими органами. МЧД единого формата. Установить статус регистрации'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	КорректноеЗаполнение = (РезультатВыполнения = Неопределено)
		ИЛИ (ТипЗнч(РезультатВыполнения) = Тип("Структура") ИЛИ ТипЗнч(РезультатВыполнения) = Тип("ФиксированнаяСтруктура"))
			И (РезультатВыполнения.Свойство("ТехническийСтатус")
				ИЛИ РезультатВыполнения.Свойство("Статус")
				ИЛИ РезультатВыполнения.Свойство("Подписана")
				ИЛИ РезультатВыполнения.Свойство("ДанныеОшибкиЗапросаСтатуса"));
	Если КорректноеЗаполнение Тогда
		Результат = Новый Структура;
		Результат.Вставить("ТехническийСтатус", 			Неопределено);
		Результат.Вставить("Статус", 						Неопределено);
		Результат.Вставить("Подписана", 					Ложь);
		Результат.Вставить("ДанныеОшибкиЗапросаСтатуса", 	Неопределено);
		ЗаполнитьЗначенияСвойств(Результат, РезультатВыполнения);
		
		ТехническийСтатусПодписана = (Результат.ТехническийСтатус <> Неопределено
			И Результат.ТехническийСтатус = ТехническиеСтатусыМЧДЕдиногоФормата("Подписана"));
		ТехническийСтатусПросрочена = (Результат.ТехническийСтатус <> Неопределено
			И Результат.ТехническийСтатус = ТехническиеСтатусыМЧДЕдиногоФормата("Просрочена"));
		ТехническийСтатусОшибкаРегистрации = (Результат.ТехническийСтатус <> Неопределено
			И Результат.ТехническийСтатус = ТехническиеСтатусыМЧДЕдиногоФормата("ОшибкаРегистрации"));
		Результат.Вставить("ТехническийСтатусПодписана", 			ТехническийСтатусПодписана);
		Результат.Вставить("ТехническийСтатусПросрочена", 			ТехническийСтатусПросрочена);
		Результат.Вставить("ТехническийСтатусОшибкаРегистрации", 	ТехническийСтатусОшибкаРегистрации);
		
		Если ТипЗнч(Результат.ДанныеОшибкиЗапросаСтатуса) <> Тип("Структура")
			И ТипЗнч(Результат.ДанныеОшибкиЗапросаСтатуса) <> Тип("ФиксированнаяСтруктура") Тогда
			Результат.ДанныеОшибкиЗапросаСтатуса = Новый Структура;
		КонецЕсли;
		Если НЕ Результат.ДанныеОшибкиЗапросаСтатуса.Свойство("ТекстОшибки") ИЛИ
			(ТипЗнч("Результат.ДанныеОшибкиЗапросаСтатуса.ТекстОшибки") <> Тип("Строка")
				И ТипЗнч("Результат.ДанныеОшибкиЗапросаСтатуса.ТекстОшибки") <> Тип("ФорматированнаяСтрока")) Тогда
			Если ТипЗнч(Результат.ДанныеОшибкиЗапросаСтатуса) = Тип("ФиксированнаяСтруктура") Тогда
				Результат.ДанныеОшибкиЗапросаСтатуса = Новый Структура(Результат.ДанныеОшибкиЗапросаСтатуса);
			КонецЕсли;
			Результат.ДанныеОшибкиЗапросаСтатуса.Вставить("ТекстОшибки", "");
		КонецЕсли;
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Метод по реализации в БСП.
Функция ТехническиеСтатусыМЧДЕдиногоФормата(ИмяСтатуса = Неопределено) Экспорт
	
	ИмяТипаПеречисленияТехническиеСтатусыМЧД = "ТехническиеСтатусыМЧД";
	Возврат ОбщегоНазначенияЭДКО.БезопасноеПолучениеЗначенияПеречисления(
		ИмяТипаПеречисленияТехническиеСтатусыМЧД, ИмяСтатуса);
	
КонецФункции

Функция СтатусМЧДРРПоСтатусуМЧДЕдиногоФормата(ТехническийСтатус) Экспорт
	
	Если ТехническийСтатус = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТехническийСтатус) Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ПустаяСсылка();
		
	ИначеЕсли ТехническийСтатус = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Создание") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ВРаботе;
		
	ИначеЕсли ТехническийСтатус = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Подписание") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ВРаботе;
		
	ИначеЕсли ТехническийСтатус = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Подписана") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.Подписано;
		
	ИначеЕсли ТехническийСтатус = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Активна") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано;
		
	ИначеЕсли ТехническийСтатус = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Просрочена") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ИстекСрокДействия;
		
	ИначеЕсли ТехническийСтатус = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Регистрация") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отправлено;
		
	ИначеЕсли ТехническийСтатус =
		ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Зарегистрирована") Тогда
		
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтверждения;
		
	ИначеЕсли ТехническийСтатус =
		ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("РегистрацияОтмены") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОжиданиеПодтвержденияОтзыва;
		
	ИначеЕсли ТехническийСтатус = ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("Отменена") Тогда
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано;
		
	ИначеЕсли ТехническийСтатус =
		ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("ОшибкаРегистрации") Тогда
		
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОшибкаРегистрации;
		
	ИначеЕсли ТехническийСтатус =
		ДокументооборотСКОВызовСервера.ТехническиеСтатусыМЧДЕдиногоФормата("ДатаНачалаДействияНеНаступила") Тогда
		
		Возврат Перечисления.СтатусыМашиночитаемойДоверенностиКО.ДатаНачалаДействияНеНаступила;
		
	Иначе
		Возврат ТехническийСтатус;
	КонецЕсли; 
	
КонецФункции

Функция ДобавитьПодписьДляМЧДЕдиногоФормата(ФайлДоверенности, Знач СвойстваПодписи) Экспорт
	
	Ошибки = Новый Массив;
	
	Если ТипЗнч(СвойстваПодписи) = Тип("Массив") Тогда
		МодульМашиночитаемыеДоверенностиФНС = Неопределено;
		Для каждого Подпись Из СвойстваПодписи Цикл
			Свойства = ПолучитьИзВременногоХранилища(Подпись);
			Если МодульМашиночитаемыеДоверенностиФНС = Неопределено Тогда
				МодульМашиночитаемыеДоверенностиФНС = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНС");
			КонецЕсли;
			Результат = МодульМашиночитаемыеДоверенностиФНС.ДобавитьПодписьКФайлуДоверенности(ФайлДоверенности, Свойства);
			
			Если Результат <> Истина Тогда
				Ошибки.Добавить(Результат);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		МодульМашиночитаемыеДоверенностиФНС = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНС");
		Результат = МодульМашиночитаемыеДоверенностиФНС.ДобавитьПодписьКФайлуДоверенности(ФайлДоверенности, СвойстваПодписи);
		Если Результат <> Истина Тогда
			Ошибки.Добавить(Результат);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

Процедура ОбновитьСтатусПослеПодписанияМЧДЕдиногоФормата(Знач ДоверенностьСсылка) Экспорт
	
	ПараметрыМЧД = ПараметрыМЧДЕдиногоФормата();
	
	ДоверенностьОбъект = ДоверенностьСсылка.ПолучитьОбъект();
	
	Если Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(
		ПараметрыМЧД.РеквизитСтатусВернаУстановленВручную) <> Неопределено Тогда
		ДоверенностьОбъект[ПараметрыМЧД.РеквизитСтатусВернаУстановленВручную] = Ложь;
	КонецЕсли;
	Если Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(
		ПараметрыМЧД.РеквизитУстановившийСтатусВерна) <> Неопределено Тогда
		ДоверенностьОбъект[ПараметрыМЧД.РеквизитУстановившийСтатусВерна] = Неопределено;
	КонецЕсли;
	Если Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(
		ПараметрыМЧД.РеквизитВерна) <> Неопределено Тогда
		ДоверенностьОбъект[ПараметрыМЧД.РеквизитВерна] = Истина;
	КонецЕсли;
	Если Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(
		ПараметрыМЧД.РеквизитДатаПроверки) <> Неопределено Тогда
		ДоверенностьОбъект[ПараметрыМЧД.РеквизитДатаПроверки] = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДоверенностьОбъект.Записать();
	
КонецПроцедуры

Функция УстановитьСтатусРегистрацииВРеестрахМЧДЕдиногоФормата(
		Знач ДоверенностьСсылка,
		Знач РегистрироватьВРеестреФНС = Истина,
		Знач РегистрироватьВДругомРеестре = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаписаноИзменение", Ложь);
	Результат.Вставить("ОписаниеОшибки", 	"");
	
	Если РегистрироватьВДругомРеестре Тогда
		ИнтерфейсыВзаимодействияБРОВызовСервера.ПриРегистрацииДоверенности(ДоверенностьСсылка);
	КонецЕсли;
	
	Если РегистрироватьВРеестреФНС Тогда
		УстановитьСтатусРегистрацииМЧДЕдиногоФормата(ДоверенностьСсылка);
		
		ПараметрыМЧД = ПараметрыМЧДЕдиногоФормата();
		
		ОбновлениеСтатусовМЧДЕдиногоФормата(ДоверенностьСсылка);
		ДанныеСостояния = ПрочитатьСостояниеМЧДЕдиногоФормата(ДоверенностьСсылка);
		Если ДанныеСостояния <> Неопределено
			И Метаданные.Справочники.МашиночитаемыеДоверенности.Реквизиты.Найти(ПараметрыМЧД.РеквизитСтатус) <> Неопределено
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоверенностьСсылка, ПараметрыМЧД.РеквизитСтатус) <>
				ДанныеСостояния.Статус Тогда
			
			ДоверенностьОбъект = ДоверенностьСсылка.ПолучитьОбъект();
			ДоверенностьОбъект[ПараметрыМЧД.РеквизитСтатус] = ДанныеСостояния.Статус;
			
			ДоверенностьОбъект.Записать();
			Результат.ЗаписаноИзменение = Истина;
		КонецЕсли;
		
		Если ДанныеСостояния <> Неопределено И ДанныеСостояния.ТехническийСтатусПросрочена Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Машиночитаемая доверенность (единый формат) просрочена';
											|en = 'Машиночитаемая доверенность (единый формат) просрочена'");
			
		ИначеЕсли ДанныеСостояния <> Неопределено И ДанныеСостояния.ТехническийСтатусОшибкаРегистрации Тогда
			Результат.ОписаниеОшибки = ?(ЗначениеЗаполнено(ДанныеСостояния.ДанныеОшибкиЗапросаСтатуса.ТекстОшибки),
				Строка(ДанныеСостояния.ДанныеОшибкиЗапросаСтатуса.ТекстОшибки),
				НСтр("ru = 'Ошибка регистрации машиночитаемой доверенности (единый формат) в распределенном реестре';
					|en = 'Ошибка регистрации машиночитаемой доверенности (единый формат) в распределенном реестре'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульИнтернетПоддержкаПользователей =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.МодульИнтернетПоддержкаПользователей();
	
	Если МодульИнтернетПоддержкаПользователей <> Неопределено
		И МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		ВладелецТикета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВладелецТикета();
		
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
		
		Если РезультатПолученияТикета = Неопределено ИЛИ НЕ ЗначениеЗаполнено(РезультатПолученияТикета.Тикет) Тогда
			Возврат МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Иначе
			Возврат РезультатПолученияТикета;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СброситьДанныеАутентификацииНаПорталеПоддержки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульИнтернетПоддержкаПользователей =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.МодульИнтернетПоддержкаПользователей();
	
	Если МодульИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки() Тогда
		МодульИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтправкаВСФРСервер(
		СсылкаНаОбъект = Неопределено,
		ИмяФайла = "",
		ДатаОтправки = Неопределено,
		КонтролирующийОрганИлиВидЦиклаОбмена = Неопределено,
		ТипЦиклаОбмена = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайлаВРег = ВРег(ИмяФайла);
		Если СтрНайти(ИмяФайлаВРег, "_ЕФС-1_") <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИсточникОтчета");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ИсточникОтчета = "РегламентированныйОтчет4ФСС" ИЛИ ИсточникОтчета = "РегламентированныйОтчетРСВ1"
			ИЛИ ИсточникОтчета = "РегламентированныйОтчетРСВ2" ИЛИ ИсточникОтчета = "РегламентированныйОтчетРВ3" Тогда
			
			Возврат Ложь;
			
		Иначе
			Возврат НЕ ЗначениеЗаполнено(ДатаОтправки)
				ИЛИ ДатаОтправки >= ДокументооборотСКОКлиентСервер.ДатаОбъединенияПФРиФССвСФР();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ВидОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВидОтчета");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ВедомостьУплатыАДВ11
			ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1
			ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РСВ1
			ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РСВ2
			ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РВ3
			ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.Отчет4ФСС Тогда
			
			Возврат Ложь;
			
		Иначе
			Возврат НЕ ЗначениеЗаполнено(ДатаОтправки)
				ИЛИ ДатаОтправки >= ДокументооборотСКОКлиентСервер.ДатаОбъединенияПФРиФССвСФР();
		КонецЕсли;
		
	Иначе
		ИмяТипаДокументаВедомостьУплатыАДВ_11 = "ВедомостьУплатыАДВ_11";
		ИмяТипаДокументаПачкаДокументовСПВ_1 = "ПачкаДокументовСПВ_1";
		ИмяТипаСправочникаКомплектыОтчетностиПерсУчета = "КомплектыОтчетностиПерсУчета";
		
		Если Метаданные.Документы.Найти(ИмяТипаДокументаВедомостьУплатыАДВ_11) <> Неопределено
				И ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка." + ИмяТипаДокументаВедомостьУплатыАДВ_11)
			ИЛИ Метаданные.Документы.Найти(ИмяТипаДокументаПачкаДокументовСПВ_1) <> Неопределено
				И ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка." + ИмяТипаДокументаПачкаДокументовСПВ_1)
			ИЛИ Метаданные.Справочники.Найти(ИмяТипаСправочникаКомплектыОтчетностиПерсУчета) <> Неопределено
				И ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка." + ИмяТипаСправочникаКомплектыОтчетностиПерсУчета) Тогда
			
			Возврат Ложь;
		
		Иначе
			Возврат НЕ ЗначениеЗаполнено(ДатаОтправки)
				ИЛИ ДатаОтправки >= ДокументооборотСКОКлиентСервер.ДатаОбъединенияПФРиФССвСФР();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСсылкуНаРекомендации(Форма, ЭлементПосле = Неопределено, МассивОшибокИлиТекст = Неопределено) Экспорт
	
	ОрганизацииСОшибками = Новый Массив;
	
	ПризнакОбменаЧерезОператора = Новый Соответствие;
	
	Если МассивОшибокИлиТекст = Неопределено Тогда
		ЕстьОшибкиСЭДО = Истина;
	Иначе
		ЕстьОшибкиСЭДО = Ложь;
		Если ТипЗнч(МассивОшибокИлиТекст) = Тип("Строка") Тогда
			МассивОшибок = Новый Массив;
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ОписаниеОшибки", МассивОшибокИлиТекст);
			СтруктураОшибки.Вставить("Организация", Неопределено);
			МассивОшибок.Добавить(СтруктураОшибки);
		Иначе
			МассивОшибок = МассивОшибокИлиТекст;
		КонецЕсли;
		Для Каждого СтруктураОшибки Из МассивОшибок Цикл
			Организация = СтруктураОшибки.Организация;
			Если ЗначениеЗаполнено(Организация) Тогда
				ОбменЧерезОператора = ПризнакОбменаЧерезОператора[Организация];
				Если ОбменЧерезОператора = Неопределено Тогда
					НастройкиВызова = Новый Структура;
					НастройкиВызова.Вставить("БезУчетаПользователя", Истина);
					СвойстваОбменаПоСЭДОЧерезОператора =
						ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(Организация,,
							НастройкиВызова);
					ОбменЧерезОператора = НЕ СвойстваОбменаПоСЭДОЧерезОператора.ОбменПоСЭДОНапрямую;
					ПризнакОбменаЧерезОператора[Организация] = ОбменЧерезОператора;
				КонецЕсли;
				Если ОбменЧерезОператора Тогда
					Продолжить;
				КонецЕсли;
				ОрганизацииСОшибками.Добавить(Организация);
			КонецЕсли;
			Если (СтрНайти(СтруктураОшибки.ОписаниеОшибки, "Не удалось получить") > 0
					ИЛИ СтрНайти(СтруктураОшибки.ОписаниеОшибки, "Не удалось обратиться") > 0)
				И СтрНайти(СтруктураОшибки.ОписаниеОшибки, "СЭДО") > 0 Тогда
				ЕстьОшибкиСЭДО = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ЕстьОшибкиСЭДО = Истина Тогда
		МассивЧастейНадписи = Новый Массив;
		МассивЧастейНадписи.Добавить(НСтр("ru = 'Ознакомьтесь с ';
											|en = 'Ознакомьтесь с '"));
		МассивЧастейНадписи.Добавить(Новый ФорматированнаяСтрока("рекомендациями",,,, 
			"РекомендацииСЭДО"));
		МассивЧастейНадписи.Добавить(НСтр("ru = ' при ошибках обмена с сервером СЭДО';
											|en = ' при ошибках обмена с сервером СЭДО'"));
		
		Если ЭлементПосле = Неопределено Тогда
			ГруппаРодитель = Форма.Элементы.Вставить("ГруппаРекомендации", Тип("ГруппаФормы"));
		Иначе
			ГруппаРодитель = Форма.Элементы.Вставить("ГруппаРекомендации", Тип("ГруппаФормы"), ЭлементПосле.Родитель, ЭлементПосле);
		КонецЕсли;
		ГруппаРодитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРодитель.РастягиватьПоГоризонтали = Истина;
		ГруппаРодитель.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		ГруппаРодитель.Высота = 1;
		ГруппаРодитель.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаРодитель.ОтображатьЗаголовок = Ложь;
		
		НадписьРекомендации = Форма.Элементы.Добавить("НадписьРекомендации", Тип("ДекорацияФормы"), ГруппаРодитель);
		НадписьРекомендации.Вид = ВидДекорацииФормы.Надпись;
		НадписьРекомендации.Заголовок = Новый ФорматированнаяСтрока(МассивЧастейНадписи);
		НадписьРекомендации.РастягиватьПоГоризонтали = Истина;
		НадписьРекомендации.АвтоМаксимальнаяШирина = Ложь;
		НадписьРекомендации.Высота = 1;
		
		ДобавляемыеРеквизиты = Новый Массив;
		// Добавляем реквизит произвольного типа.
		НовыйРеквизит = Новый РеквизитФормы("РекомендацияСЭДО_ДанныеОшибок",
			Новый ОписаниеТипов());
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ДанныеОшибок = Новый Структура;
		ДанныеОшибок.Вставить("ОрганизацииСОшибками", ОрганизацииСОшибками);
		Форма.РекомендацияСЭДО_ДанныеОшибок = ДанныеОшибок;
		
		НадписьРекомендации.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_НадписьРекомендацииОбработкаНавигационнойСсылки");
		
	КонецЕсли;
	
КонецПроцедуры

Функция СобытиеНаступилоИспользоватьРегНомерСФР() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоРежимОблачной1СО() Экспорт
	
	Возврат ДокументооборотСКОПовтИсп.ЭтоРежимОблачной1СО();
	
КонецФункции

Процедура УбратьПанельРазделов() Экспорт

	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	СоставФорм = НачальнаяСтраница.ПолучитьСоставФорм();

	СоставФорм.ЛеваяКолонка.Очистить();
	СоставФорм.ПраваяКолонка.Очистить();
	НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница);

	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	Настройки.УстановитьСостав(НастройкиСостава);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки);

КонецПроцедуры

Функция УстановитьНастройкиНачалаРаботы(ОбновитьВсе) Экспорт
	
	Возврат Обработки.НачалоРаботыОблачной1СО.УстановитьНастройкиНачалаРаботы(ОбновитьВсе);
	
КонецФункции

Функция ОтпечатокРуководителя(Организация, ВладелецЭЦП = Неопределено) Экспорт
	
	// ВладелецЭЦП будет заполнен при запуске помощника из заявления 
	Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
		ВладелецЭтоРуководитель = ВладелецЭЦП = Руководитель;
	Иначе
		ВладелецЭтоРуководитель = Мультирежим.ВладелецЭЦПЭтоРуководитель(Организация);
	КонецЕсли;
	
	Если ВладелецЭтоРуководитель Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
		
		Отпечаток = Мультирежим.СертификатПользователя(УчетнаяЗапись, "Отпечаток").Отпечаток;
		Возврат Отпечаток;
	КонецЕсли;
	
	Возврат "";

КонецФункции

Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъекта,
		КлючНастроек,
		Настройки);
		
КонецПроцедуры

Процедура ОбновитьПараметрыИнтро(ПоказатьИнтроТекущемуПользователю = Ложь) Экспорт
	
	Облачная1СОСлужебныйПереопределяемый.ОбновитьПараметрыИнтро(ПоказатьИнтроТекущемуПользователю);

КонецПроцедуры

Функция СобытиеНаступилоНовыйФорматПояснДеклНДС() Экспорт

	Возврат Истина;
	
КонецФункции

#КонецОбласти