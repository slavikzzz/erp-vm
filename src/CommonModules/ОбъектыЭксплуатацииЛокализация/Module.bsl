////////////////////////////////////////////////////////////////////////////////
// Процедуры, используемые для локализации справочника "Объекты эксплуатации".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОС6") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОС6",
			НСтр("ru = 'Инвентарная карточка ОС (ОС-6)';
				|en = 'Inventory card FA (FA-6)'"),
			ПечатьОС6_2003(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт

	//++ Локализация
	
	Команда = Документы.ПараметрыНачисленияНалогаНаИмущество.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПараметрыНачисленияТранспортногоНалога.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ТипОС", Перечисления.ТипыОС.ОбъектЭксплуатации);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ГруппаОС", Перечисления.ГруппыОС.ЗемельныеУчастки);
		
	КонецЕсли;
	
	Команда = Документы.ПринятиеКУчетуОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.ИзменениеСостоянияОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.СписаниеОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Команда = Документы.ПринятиеКУчетуОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.ПеремещениеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.СписаниеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.ОбъектыЭксплуатации) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ОС6";
		КомандаПечати.Представление = НСтр("ru = 'Инвентарная карточка ОС (ОС-6)';
											|en = 'Inventory card FA (FA-6)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСпискаСоСведениями";
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	
	Команда = Отчеты.ВедомостьПоОС2_4.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	Команда = Отчеты.СправкаРасчетАмортизацииОС2_4.ДобавитьКомандуОтчетаПоОС(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Команда = Отчеты.КарточкаОСМеждународныйУчет.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда

		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";

		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Отчеты.СравнениеОС.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
			
	КонецЕсли;
	
	//-- НЕ УТКА
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ФормаЭлемента

Процедура ПриИзмененииРеквизита(ИмяЭлемента, Форма, ДополнительныеПараметры) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если ИмяЭлемента = Элементы.КодПоОКОФ.Имя Тогда
		
		КодОКОФПриИзменении(Форма);
		
	ИначеЕсли ИмяЭлемента = "ОбработатьВыборКодаПоОКОФ" Тогда
		
		ОбработатьВыборКодаПоОКОФ(Форма, ДополнительныеПараметры);
		
	ИначеЕсли ИмяЭлемента = Элементы.ДрагоценныеМатериалыДрагоценныйМатериал.Имя Тогда
		
		ДрагоценныеМатериалыДрагоценныйМатериалПриИзменении(Форма);
		
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

Процедура УстановитьВидимостьКомандВводаНаОсновании(Форма, ТаблицаКоманд) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ПолучитьФункциональнуюОпцию("ОтображатьВнеоборотныеАктивы2_2") Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПринятКУчету = ВнеоборотныеАктивы.ОбъектЭксплуатацииПринятКУчету(Объект.Ссылка);
			//++ НЕ УТКА
			Организация = МеждународныйУчетВнеоборотныеАктивы.ОрганизацияВКоторойОСПринятоКУчету(Объект.Ссылка);
			ПринятКЧетуМФУ = ЗначениеЗаполнено(Организация);
			//-- НЕ УТКА
		Иначе
			ПринятКУчету = Ложь;
			ПринятКЧетуМФУ = Ложь;
		КонецЕсли;
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуОС) Тогда
			ВнеоборотныеАктивыСлужебный.УстановитьВидимостьКомандыВводаНаОсновании(
				Элементы, "ПринятиеКУчетуОС", ТаблицаКоманд, НЕ ПринятКУчету);
		КонецЕсли;

		Если ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеСостоянияОС) Тогда
			ВнеоборотныеАктивыСлужебный.УстановитьВидимостьКомандыВводаНаОсновании(
				Элементы, "ИзменениеСостоянияОС", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли;
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеПараметровОС) Тогда
			ВнеоборотныеАктивыСлужебный.УстановитьВидимостьКомандыВводаНаОсновании(
				Элементы, "ИзменениеПараметровОС", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли;
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеОС) Тогда
			ВнеоборотныеАктивыСлужебный.УстановитьВидимостьКомандыВводаНаОсновании(
				Элементы, "СписаниеОС", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуОСМеждународныйУчет) Тогда
			ВнеоборотныеАктивыСлужебный.УстановитьВидимостьКомандыВводаНаОсновании(
				Элементы, "ПринятиеКУчетуОСМеждународныйУчет", ТаблицаКоманд, НЕ ПринятКЧетуМФУ);
		КонецЕсли; 
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеОСМеждународныйУчет) Тогда
			ВнеоборотныеАктивыСлужебный.УстановитьВидимостьКомандыВводаНаОсновании(
				Элементы, "СписаниеОСМеждународныйУчет", ТаблицаКоманд, ПринятКЧетуМФУ);
		КонецЕсли; 
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеОСМеждународныйУчет) Тогда
			ВнеоборотныеАктивыСлужебный.УстановитьВидимостьКомандыВводаНаОсновании(
				Элементы, "ПеремещениеОСМеждународныйУчет", ТаблицаКоманд, ПринятКЧетуМФУ);
		КонецЕсли; 
		//-- НЕ УТКА
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчете(Форма, СведенияОбУчете, ПредставлениеСведений) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Если СведенияОбУчете <> Неопределено Тогда
		ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СведенияОбУчете.Организация);
	Иначе
		ВалютаРегл = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли; 
	Если ВалютаУпр <> ВалютаРегл Тогда
		Элементы.ДекорацияЗаголовокНУ.Заголовок = СтрШаблон(НСтр("ru = 'НУ (%1):';
																|en = 'TA (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокПР.Заголовок = СтрШаблон(НСтр("ru = 'ПР (%1):';
																|en = 'PD (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокВР.Заголовок = СтрШаблон(НСтр("ru = 'ВР (%1):';
																|en = 'TD (%1):'"), Строка(ВалютаРегл));
	КонецЕсли; 
	
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияПринятКУчету2, ПредставлениеСведений.СведенияПринятКУчету2);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования2, ПредставлениеСведений.СведенияСрокИспользования2);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСнятСУчета2, ПредставлениеСведений.СведенияСнятСУчета2);

	//-- Локализация
	
КонецПроцедуры

Процедура ЗаполнитьСтоимостьИАмортизацию(Форма, СведенияОбУчете, СтоимостьИАмортизация) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
	
	СтоимостьИАмортизация = ВнеоборотныеАктивы.СтоимостьИАмортизацияОС(Объект.Ссылка);
	
	Если СведенияОбУчете <> Неопределено
		И СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
		
		Форма.ВосстановительнаяСтоимостьБУ = СтоимостьИАмортизация.ЗалоговаяСтоимость;
	Иначе	
		Форма.ВосстановительнаяСтоимостьБУ = СтоимостьИАмортизация.СтоимостьРегл;
	КонецЕсли; 
	
	Форма.ВосстановительнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ;
	Форма.ВосстановительнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР;
	Форма.ВосстановительнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ;
	Форма.ВосстановительнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ;
	Форма.ВосстановительнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ;
	Форма.ВосстановительнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР;
	Форма.ВосстановительнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ;
	
	Форма.НакопленнаяАмортизацияБУЦФ = СтоимостьИАмортизация.АмортизацияЦФ;
	Форма.НакопленнаяАмортизацияВР   = СтоимостьИАмортизация.АмортизацияВР;
	Форма.НакопленнаяАмортизацияВРЦФ = СтоимостьИАмортизация.АмортизацияВРЦФ;
	Форма.НакопленнаяАмортизацияНУ   = СтоимостьИАмортизация.АмортизацияНУ;
	Форма.НакопленнаяАмортизацияНУЦФ = СтоимостьИАмортизация.АмортизацияНУЦФ;
	Форма.НакопленнаяАмортизацияПР   = СтоимостьИАмортизация.АмортизацияПР;
	Форма.НакопленнаяАмортизацияПРЦФ = СтоимостьИАмортизация.АмортизацияПРЦФ;
	
	Если СведенияОбУчете <> Неопределено
		И СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
		
		Форма.ОстаточнаяСтоимостьБУ = СтоимостьИАмортизация.ЗалоговаяСтоимость;
	Иначе
		Форма.ОстаточнаяСтоимостьБУ = СтоимостьИАмортизация.СтоимостьРегл - СтоимостьИАмортизация.АмортизацияРегл - СтоимостьИАмортизация.ОбесценениеРегл;
	КонецЕсли;
	
	Форма.ОстаточнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ   - СтоимостьИАмортизация.АмортизацияЦФ;
	Форма.ОстаточнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР   - СтоимостьИАмортизация.АмортизацияВР;
	Форма.ОстаточнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ - СтоимостьИАмортизация.АмортизацияВРЦФ;
	Форма.ОстаточнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ   - СтоимостьИАмортизация.АмортизацияНУ;
	Форма.ОстаточнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ - СтоимостьИАмортизация.АмортизацияНУЦФ;
	Форма.ОстаточнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР   - СтоимостьИАмортизация.АмортизацияПР;
	Форма.ОстаточнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ - СтоимостьИАмортизация.АмортизацияПРЦФ;
	
	Если НЕ ПлательщикНалогаНаПрибыль Тогда
		Элементы.ВосстановительнаяСтоимостьНУ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПР.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВР.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияНУ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПР.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияВР.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьНУ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПР.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВР.Видимость          = Ложь;
		Элементы.ДекорацияЗаголовокНУ.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокВР.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокПР.Видимость           = Ложь;
	КонецЕсли; 
	
	Если СтоимостьИАмортизация.СтоимостьЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьПРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияПРЦФ <> 0 Тогда
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Собственные средства:';
																		|en = 'Own funds:'");
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Собственные средства:';
																		|en = 'Own funds:'");
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Собственные средства:';
																		|en = 'Own funds:'");
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Истина;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Истина;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Истина;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Истина;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Истина;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Истина;
		
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Истина;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Истина;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Истина;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		
	Иначе
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Восстановительная стоимость:';
																		|en = 'Replacement cost:'");
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Накопленная амортизация:';
																		|en = 'Accumulated depreciation:'");
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Остаточная стоимость:';
																		|en = 'Net book value:'");
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Ложь;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Ложь;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Ложь;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Ложь;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Ложь;
		
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = Ложь;
		
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт

	//++ Локализация
	
	ЗаполнитьПодсказкуКодОКОФ(Форма);
	
	Форма.ИспользоватьУчетДрагоценныхМатериалов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");
	
	//-- Локализация
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	//++ НЕ УТКА
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДрагоценныеМатериалыРасположение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДрагоценныеМатериалы.ДрагоценныйМатериал");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ДрагоценныеМатериалы.Алмазы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//-- НЕ УТКА
	
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область ФормаСписка

Процедура ДополнитьСведения2_4(ВнеоборотныйАктив, СведенияОбУчете, СтоимостьИАмортизация, МассивСумм, Сведения2_4) Экспорт

	//++ Локализация
	
	Если СведенияОбУчете <> Неопределено Тогда
		ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
		ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СведенияОбУчете.Организация);
	Иначе
		ПлательщикНалогаНаПрибыль = Ложь;
		ВалютаРегл = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли; 

		
	// БУ
	ДанныеУчета = Новый Структура;
	ДанныеУчета.Вставить("Учет", "БУ");
	ДанныеУчета.Вставить("Валюта", ВалютаРегл);
	
	Если СведенияОбУчете <> Неопределено
		И СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
		
		ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.ЗалоговаяСтоимость);
		ДанныеУчета.Вставить("НакопленнаяАмортизация", 0);
		ДанныеУчета.Вставить("Обесценение", 0);
		ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.ЗалоговаяСтоимость);
		
	Иначе
		
		ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьРегл + СтоимостьИАмортизация.СтоимостьЦФ);
		ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияРегл + СтоимостьИАмортизация.АмортизацияЦФ);
		ДанныеУчета.Вставить("Обесценение", СтоимостьИАмортизация.ОбесценениеРегл);
		
		ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьРегл 
														+ СтоимостьИАмортизация.СтоимостьЦФ 
														- СтоимостьИАмортизация.АмортизацияРегл 
														- СтоимостьИАмортизация.АмортизацияЦФ
														- СтоимостьИАмортизация.ОбесценениеРегл);
	КонецЕсли; 
	
	МассивСумм.Добавить(ДанныеУчета);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		И ПлательщикНалогаНаПрибыль
		И (СведенияОбУчете = Неопределено
			ИЛИ СведенияОбУчете.СостояниеБУ <> Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету) Тогда
			
		// НУ
		ДанныеУчета = Новый Структура;
		ДанныеУчета.Вставить("Учет", "НУ");
		ДанныеУчета.Вставить("Валюта", ВалютаРегл);
		ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьНУ + СтоимостьИАмортизация.СтоимостьНУЦФ);
		ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияНУ + СтоимостьИАмортизация.АмортизацияНУЦФ);
		ДанныеУчета.Вставить("Обесценение", 0);
		
		ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьНУ 
														+ СтоимостьИАмортизация.СтоимостьНУЦФ 
														- СтоимостьИАмортизация.АмортизацияНУ 
														- СтоимостьИАмортизация.АмортизацияНУЦФ);
		МассивСумм.Добавить(ДанныеУчета);
		
		Если ПолучитьФункциональнуюОпцию("ВедетсяУчетПостоянныхИВременныхРазниц") Тогда
			
			// ПР
			ДанныеУчета = Новый Структура;
			ДанныеУчета.Вставить("Учет", "ПР");
			ДанныеУчета.Вставить("Валюта", ВалютаРегл);
			ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьПР + СтоимостьИАмортизация.СтоимостьПРЦФ);
			ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияПР + СтоимостьИАмортизация.АмортизацияПРЦФ);
			ДанныеУчета.Вставить("Обесценение", 0);
			
			ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьПР 
															+ СтоимостьИАмортизация.СтоимостьПРЦФ 
															- СтоимостьИАмортизация.АмортизацияПР 
															- СтоимостьИАмортизация.АмортизацияПРЦФ);
			МассивСумм.Добавить(ДанныеУчета);
			
			// ВР
			ДанныеУчета = Новый Структура;
			ДанныеУчета.Вставить("Учет", "ВР");
			ДанныеУчета.Вставить("Валюта", ВалютаРегл);
			ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьВР + СтоимостьИАмортизация.СтоимостьВРЦФ);
			ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияВР + СтоимостьИАмортизация.АмортизацияВРЦФ);
			ДанныеУчета.Вставить("Обесценение", 0);
			ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьВР 
															+ СтоимостьИАмортизация.СтоимостьВРЦФ 
															- СтоимостьИАмортизация.АмортизацияВР 
															- СтоимостьИАмортизация.АмортизацияВРЦФ);
			МассивСумм.Добавить(ДанныеУчета);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнеоборотныйАктив, "ГруппаОС,КодПоОКОФ");
	Если ЗначениеЗаполнено(РеквизитыОбъекта.ГруппаОС) Тогда
		ТекстСтроки = СтрШаблон(НСтр("ru = 'Группа ОС: %1';
									|en = 'FA group: %1'"), РеквизитыОбъекта.ГруппаОС);
		СведенияГруппаОС = Новый ФорматированнаяСтрока(ТекстСтроки);
		Сведения2_4.Вставить("СведенияГруппаОС", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияГруппаОС));
	Иначе
		Сведения2_4.Вставить("СведенияГруппаОС", Неопределено);
	КонецЕсли; 
	Если ЗначениеЗаполнено(РеквизитыОбъекта.КодПоОКОФ) Тогда
		ТекстСтроки = СтрШаблон(НСтр("ru = 'Код по ОКОФ: %1';
									|en = 'Code by RNCFA: %1'"), РеквизитыОбъекта.КодПоОКОФ);
		СведенияКодПоОКОФ = Новый ФорматированнаяСтрока(ТекстСтроки);
		Сведения2_4.Вставить("СведенияКодПоОКОФ", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияКодПоОКОФ));
	Иначе
		Сведения2_4.Вставить("СведенияКодПоОКОФ", Неопределено);
	КонецЕсли; 
	
	Если СведенияОбУчете <> Неопределено
		И ЗначениеЗаполнено(СведенияОбУчете.АмортизационнаяГруппа) Тогда
		ТекстСтроки = СтрШаблон(НСтр("ru = 'Амортизационная группа: %1';
									|en = 'Depreciation group: %1'"), СведенияОбУчете.АмортизационнаяГруппа);
		СведенияАмортизационнаяГруппа = Новый ФорматированнаяСтрока(ТекстСтроки);
		Сведения2_4.Вставить("СведенияАмортизационнаяГруппа", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияАмортизационнаяГруппа));
	Иначе
		Сведения2_4.Вставить("СведенияАмортизационнаяГруппа", Неопределено);
	КонецЕсли; 

	//-- Локализация
	
КонецПроцедуры

Функция ПолучитьСведения2_2(Знач ВнеоборотныйАктив, Знач ОтборОрганизация) Экспорт
	
	Сведения2_2 = Неопределено;
	
	//++ Локализация
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("СтоимостьБУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьНУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьПР", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьВР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияБУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияНУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияПР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияВР", 0);
	ЗначенияПоУмолчанию.Вставить("НачислениеИзноса", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация));
	Запрос.УстановитьПараметр("ОтборОрганизация", ОтборОрганизация);
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.ОсновноеСредство КАК ОбъектУчета,
	|	СчетаОтражения.СчетУчета КАК СчетУчета,
	|	СчетаОтражения.СчетНачисленияАмортизации КАК СчетАмортизации,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования, ЛОЖЬ) КАК ПрименениеЦелевогоФинансирования,
	|	ПараметрыЦелевогоФинансирования.СчетУчета КАК СчетУчетаЦФ,
	|	ПараметрыЦелевогоФинансирования.СчетАмортизации КАК СчетАмортизацииЦФ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведения.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачислениеИзноса
	|ПОМЕСТИТЬ втАктивыИСчетаУчета
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(, ОсновноеСредство = &ВнеоборотныйАктив) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|				,
	|				ОсновноеСредство = &ВнеоборотныйАктив) КАК СчетаОтражения
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаОтражения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияОС.СрезПоследних(, ОсновноеСредство = &ВнеоборотныйАктив) КАК ПараметрыЦелевогоФинансирования
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыЦелевогоФинансирования.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втСчетаОстатков
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизации
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчетаЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизацииЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втСчетаОстатков КАК Т),
	|			&ВидСубконтоОС,
	|			Субконто1 В (&ВнеоборотныйАктив)
	|				И (НЕ &ОтборПООрганизации
	|					ИЛИ Организация = &ОтборОрганизация)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Стоимость.СуммаБУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(Стоимость.СуммаВР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаВР, 0) КАК СтоимостьВР,
	|	ЕСТЬNULL(-Амортизация.СуммаБУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(-Амортизация.СуммаНУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(-Амортизация.СуммаПР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаПР, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(-Амортизация.СуммаВР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаВР, 0) КАК АмортизацияВР,
	|	втАктивыИСчетаУчета.НачислениеИзноса КАК НачислениеИзноса
	|ИЗ
	|	втАктивыИСчетаУчета КАК втАктивыИСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Стоимость
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Стоимость.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Амортизация
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Амортизация.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК СтоимостьЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СтоимостьЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчетаЦФ = СтоимостьЦФ.Счет
	|			И втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК АмортизацияЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = АмортизацияЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизацииЦФ = АмортизацияЦФ.Счет
	|			И втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчанию, Выборка);
	КонецЕсли;
	
	Поля = "Представление, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР";
	
	Сведения2_2 = Новый Массив;
	
	Строка = Новый Структура(Поля);
	Строка.Представление = НСтр("ru = 'Восстановительная стоимость:';
								|en = 'Replacement cost:'");
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР;
	Сведения2_2.Добавить(Строка);
	
	ЗаголовокАмортизации = НСтр("ru = 'Накопленная амортизация:';
								|en = 'Accumulated depreciation:'");
	МножительАмортизации = 1;
	Если ЗначенияПоУмолчанию.НачислениеИзноса Тогда
		ЗаголовокАмортизации = НСтр("ru = 'Накопленный износ:';
									|en = 'Accumulated wear:'");
		МножительАмортизации = -1;
	КонецЕсли;
	
	Строка = Новый Структура(Поля);
	Строка.Представление = ЗаголовокАмортизации;
	Строка.СуммаБУ = ЗначенияПоУмолчанию.АмортизацияБУ * МножительАмортизации;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.АмортизацияНУ * МножительАмортизации;
	Строка.СуммаПР = ЗначенияПоУмолчанию.АмортизацияПР * МножительАмортизации;
	Строка.СуммаВР = ЗначенияПоУмолчанию.АмортизацияВР * МножительАмортизации;
	Сведения2_2.Добавить(Строка);
	
	Если Не ЗначенияПоУмолчанию.НачислениеИзноса Тогда
		
		Строка = Новый Структура(Поля);
		Строка.Представление = НСтр("ru = 'Остаточная стоимость:';
									|en = 'Net book value:'");
		Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ-ЗначенияПоУмолчанию.АмортизацияБУ;
		Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ-ЗначенияПоУмолчанию.АмортизацияНУ;
		Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР-ЗначенияПоУмолчанию.АмортизацияПР;
		Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР-ЗначенияПоУмолчанию.АмортизацияВР;
		Сведения2_2.Добавить(Строка);
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат Сведения2_2;
	
КонецФункции

Функция ТекстЗапросаФормыСписка() Экспорт

	ТекстЗапроса = Неопределено;
	
	//++ Локализация
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникОбъектыЭксплуатации.Ссылка,
	|	СправочникОбъектыЭксплуатации.ПометкаУдаления,
	|	СправочникОбъектыЭксплуатации.Родитель,
	|	СправочникОбъектыЭксплуатации.ЭтоГруппа,
	|	СправочникОбъектыЭксплуатации.Код,
	|	СправочникОбъектыЭксплуатации.ТипОС,
	|	СправочникОбъектыЭксплуатации.Наименование,
	|	СправочникОбъектыЭксплуатации.НаименованиеПолное,
	|	СправочникОбъектыЭксплуатации.Изготовитель,
	|	СправочникОбъектыЭксплуатации.ЗаводскойНомер,
	|	СправочникОбъектыЭксплуатации.НомерПаспорта,
	|	СправочникОбъектыЭксплуатации.ДатаВыпуска,
	|	СправочникОбъектыЭксплуатации.КодПоОКОФ КАК КодПоОКОФ,
	|	СправочникОбъектыЭксплуатации.ГруппаОС КАК ГруппаОС,
	|	СправочникОбъектыЭксплуатации.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|	СправочникОбъектыЭксплуатации.Комментарий,
	|	СправочникОбъектыЭксплуатации.Расположение,
	|	СправочникОбъектыЭксплуатации.Модель,
	|	СправочникОбъектыЭксплуатации.СерийныйНомер,
	|	СправочникОбъектыЭксплуатации.ИнвентарныйНомер,
	|
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) КАК АмортизационнаяГруппа,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.МОЛАрендатора
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	КОНЕЦ КАК МОЛ,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.ПодразделениеАрендатора
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	КОНЕЦ КАК Подразделение,		
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.Арендатор
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) 
	|	КОНЕЦ КАК Организация,
	|
	|	ВЫБОР 
	|		КОГДА СправочникОбъектыЭксплуатации.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|				И НЕ ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|
	|		КОГДА &Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА &Состояние = ПорядокУчетаОСБУ.СостояниеБУ
	|						ТОГДА ПорядокУчетаОСБУ.СостояниеБУ
	|
	|					КОГДА &Состояние = ПорядокУчетаОСБУ.СостояниеНУ
	|						ТОГДА ПорядокУчетаОСБУ.СостояниеНУ
	|
	|					КОГДА &Состояние = ПорядокУчетаОСУУ.Состояние
	|						ТОГДА ПорядокУчетаОСУУ.Состояние
	|					ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))))
	|				КОНЕЦ
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|
	|	КОНЕЦ КАК Состояние,
	|
	|	ВЫБОР 
	|		КОГДА СправочникОбъектыЭксплуатации.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|				И НЕ ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|		КОГДА ПорядокУчетаОСБУ.СостояниеБУ <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|			ТОГДА ПорядокУчетаОСБУ.СостояниеБУ
	|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
	|	КОНЕЦ КАК СостояниеРегл,
	|
	|	ВЫБОР 
	|		КОГДА СправочникОбъектыЭксплуатации.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|				И НЕ ПорядокУчетаОСУУ.Состояние ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) 
	|	КОНЕЦ КАК СостояниеУпр,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				И (ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, ДАТАВРЕМЯ(1, 1, 1)) < ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1))
	|						ИЛИ ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, ДАТАВРЕМЯ(1, 1, 1))
	|	 	ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаПринятияКУчетуРегл,
	|
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчетуУпр,
	|
	|	ВЫБОР
	|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL ТОГДА 0
	|		КОГДА НаличиеФайлов.ЕстьФайлы ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы
	|
	|{ВЫБРАТЬ
	|	АмортизационнаяГруппа,
	|	АдресМестонахождения,
	|	МОЛ,
	|	Подразделение,		
	|	Организация,
	|	Состояние,
	|	СостояниеРегл,
	|	СостояниеУпр,
	|	ДатаПринятияКУчетуРегл,
	|	ДатаПринятияКУчетуУпр
	|}
	|
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК СправочникОбъектыЭксплуатации
	|
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|		ПО СправочникОбъектыЭксплуатации.Ссылка = НаличиеФайлов.ОбъектСФайлами}
	|
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних КАК МестонахождениеОС
	|		ПО (МестонахождениеОС.ОсновноеСредство = СправочникОбъектыЭксплуатации.Ссылка)}
	|
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних КАК ПервоначальныеСведенияОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|			И ПервоначальныеСведенияОС.Организация = МестонахождениеОС.Организация}
	|
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних КАК ПорядокУчетаОСБУ
	|		ПО (ПорядокУчетаОСБУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация)}
	|
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних КАК ПорядокУчетаОСУУ
	|		ПО (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)}
	|
	|{ГДЕ
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) КАК АмортизационнаяГруппа,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.МОЛАрендатора
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	КОНЕЦ КАК МОЛ,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.ПодразделениеАрендатора
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	КОНЕЦ КАК Подразделение,		
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.Арендатор
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) 
	|	КОНЕЦ КАК Организация,
	|
	|	ВЫБОР 
	|		КОГДА СправочникОбъектыЭксплуатации.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|				И НЕ ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|
	|		КОГДА &Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА &Состояние = ПорядокУчетаОСБУ.СостояниеБУ
	|						ТОГДА ПорядокУчетаОСБУ.СостояниеБУ
	|
	|					КОГДА &Состояние = ПорядокУчетаОСБУ.СостояниеНУ
	|						ТОГДА ПорядокУчетаОСБУ.СостояниеНУ
	|
	|					КОГДА &Состояние = ПорядокУчетаОСУУ.Состояние
	|						ТОГДА ПорядокУчетаОСУУ.Состояние
	|
	|					ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))))
	|				КОНЕЦ
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|
	|	КОНЕЦ КАК Состояние
	|}";
	
	//-- Локализация

	Возврат ТекстЗапроса;
	
КонецФункции
 
#КонецОбласти

#Область Прочее

Функция ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	
	Если ВидФормы = "ФормаВыбора" 
		И ВнеоборотныеАктивыСлужебный.ДоступенВыборОбъектовЭксплуатации2_4(Параметры) Тогда
		
		// В концепции 2.4 своя форма выбора
		ВыбраннаяФорма = "ФормаВыбора2_4";
		СтандартнаяОбработка = Ложь;

	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		ВыбраннаяФорма = "ФормаВыбора";
		
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		
		//++ НЕ УТКА
		ВнеоборотныеАктивыЛокализация.ЗаполнитьОтборыОСМФУ(Параметры);
		//-- НЕ УТКА
		
		Если Параметры.Отбор.Свойство("ГруппаОС") Тогда
			Параметры.Отбор.Вставить("БУГруппаОС", Параметры.Отбор.ГруппаОС);
		ИначеЕсли Параметры.Свойство("БУГруппаОС") Тогда
			Параметры.Отбор.Вставить("ГруппаОС", Параметры.Отбор.БУГруппаОС);
		КонецЕсли;
		Если Параметры.Отбор.Свойство("АмортизационнаяГруппа") Тогда
			Параметры.Отбор.Вставить("БУАмортизационнаяГруппа", Параметры.Отбор.АмортизационнаяГруппа);
		ИначеЕсли Параметры.Свойство("БУАмортизационнаяГруппа") Тогда
			Параметры.Отбор.Вставить("АмортизационнаяГруппа", Параметры.Отбор.БУАмортизационнаяГруппа);
		КонецЕсли;
		
		Если Параметры.Свойство("Договор") И ЗначениеЗаполнено(Параметры.Договор) Тогда
			Параметры.Отбор.Вставить("НаправлениеДеятельности", ВнеоборотныеАктивыВызовСервера.НаправлениеДеятельности(Параметры.Договор));
		КонецЕсли;
		
		Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
			И Параметры.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется") Тогда
			Параметры.Отбор.Удалить("НаправлениеДеятельности");
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Истина;
		
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы, МассивОбъектов) Экспорт

	ОписаниеЗапросаДляВыбора = Неопределено;
	
	//++ Локализация
	
	Если Параметры.Свойство("Контекст") Тогда
		ДоступныеКонтексты = Новый Структура(Параметры.Контекст);
	Иначе
		ДоступныеКонтексты = Новый Структура("БУ,УУ"); // По умолчанию доступны все контексты.
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		ОтборСписка = Параметры.Отбор;
	Иначе
		ОтборСписка = Новый Структура;
	КонецЕсли;
	
	Если ОтборСписка.Свойство("ОтражатьВРеглУчете")
		И НЕ ОтборСписка.ОтражатьВРеглУчете
		И ДоступныеКонтексты.Свойство("БУ") Тогда
		ДоступныеКонтексты.Удалить("БУ"); // Доступен выбор отражения в учете и в регл. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ОтражатьВУпрУчете")
		И НЕ ОтборСписка.ОтражатьВУпрУчете
		И ДоступныеКонтексты.Свойство("УУ") Тогда
		ДоступныеКонтексты.Удалить("УУ"); // Доступен выбор отражения в учете и в упр. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("АмортизационнаяГруппа") Тогда
		Если ЗначениеЗаполнено(ОтборСписка.АмортизационнаяГруппа) Тогда
			СписокВыбора = Новый Массив;
			СписокВыбора.Добавить(ОтборСписка.АмортизационнаяГруппа);
			СписокВыбора.Добавить(Перечисления.АмортизационныеГруппы.ПустаяСсылка());
			ОтборСписка.Вставить("АмортизационнаяГруппа", СписокВыбора);
		Иначе
			ОтборСписка.Удалить("АмортизационнаяГруппа");
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ГруппаОС") Тогда
		Если ЗначениеЗаполнено(ОтборСписка.ГруппаОС) Тогда
			СписокВыбора = Новый Массив;
			СписокВыбора.Добавить(ОтборСписка.ГруппаОС);
			СписокВыбора.Добавить(Перечисления.ГруппыОС.ПустаяСсылка());
			ОтборСписка.Вставить("ГруппаОС", СписокВыбора);
		Иначе
			ОтборСписка.Удалить("ГруппаОС");
		КонецЕсли; 
	КонецЕсли; 
	
	Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
		И (Параметры.ВариантПримененияЦелевогоФинансирования = Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется
			ИЛИ НЕ ЗначениеЗаполнено(Параметры.ВариантПримененияЦелевогоФинансирования)) Тогда
		ОтборСписка.Удалить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если ОтборСписка.Свойство("НаправлениеДеятельности")
		И НЕ ЗначениеЗаполнено(ОтборСписка.НаправлениеДеятельности) Тогда
		ОтборСписка.Удалить("НаправлениеДеятельности");
	КонецЕсли; 
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		ОтборСписка.Удалить("Подразделение");
		ОтборСписка.Удалить("Организация");
		ОтборСписка.Удалить("МОЛ");
	КонецЕсли;
	
	Если ОтборСписка.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Организация) Тогда
		ОтборСписка.Удалить("Организация");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Подразделение) Тогда
		ОтборСписка.Удалить("Подразделение");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("МОЛ")
		И НЕ ЗначениеЗаполнено(ОтборСписка.МОЛ) Тогда
		ОтборСписка.Удалить("МОЛ");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("СрокИспользованияУУ")
		И НЕ ЗначениеЗаполнено(ОтборСписка.СрокИспользованияУУ) Тогда
		ОтборСписка.Удалить("СрокИспользованияУУ");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("СрокИспользованияБУ")
		И НЕ ЗначениеЗаполнено(ОтборСписка.СрокИспользованияБУ) Тогда
		ОтборСписка.Удалить("СрокИспользованияБУ");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("СрокИспользованияНУ")
		И НЕ ЗначениеЗаполнено(ОтборСписка.СрокИспользованияНУ) Тогда
		ОтборСписка.Удалить("СрокИспользованияНУ");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("НалогообложениеНДС")
		И НЕ ЗначениеЗаполнено(ОтборСписка.НалогообложениеНДС) Тогда
		ОтборСписка.Удалить("НалогообложениеНДС");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("Договор")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Договор) Тогда
		ОтборСписка.Удалить("Договор");
	КонецЕсли; 

	ЭтоВыборУзлаКомпонента = Ложь;
	ЭтоВыборОС = Ложь;
	Если ОтборСписка.Свойство("ТипОС")
		И (ОтборСписка.ТипОС = Перечисления.ТипыОС.Узел
		Или ОтборСписка.ТипОС = Перечисления.ТипыОС.КомпонентАмортизации) Тогда
		ЭтоВыборУзлаКомпонента = Истина;
	ИначеЕсли ОтборСписка.Свойство("ТипОС")
		И ОтборСписка.ТипОС = Перечисления.ТипыОС.ОбъектЭксплуатации Тогда
		ЭтоВыборОС = Истина;
	КонецЕсли;
	
	ИсключитьКомпоненты = Ложь;
	Если ОтборСписка.Свойство("Владелец")
		И ТипЗнч(ОтборСписка.Владелец) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")
		И ДоступныеКонтексты.Свойство("БУ") Тогда
		ИсключитьКомпоненты = Истина; // Компоненты амортизации запрещены для выбора в качестве аналитики расходов
	КонецЕсли; 
	
	ДополнительныеПоля = "";
	ТекстОтборы = "";
	ПараметрыЗапроса = Новый Структура;
	ДоступныеПоля = Новый Массив;
	НеобходимыеТаблицы = Новый Структура;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		
		ПолеОрганизация = "ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		ПолеМОЛ = "ЕСТЬNULL(МестонахождениеОС.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
		ПолеПодразделение = "ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
		ПолеАдресМестонахождения = "ЕСТЬNULL(МестонахождениеОС.АдресМестонахождения, """""""")";
		ПолеАрендатор = "ЕСТЬNULL(МестонахождениеОС.Арендатор, НЕОПРЕДЕЛЕНО)";
		
	Иначе
		
		ПолеОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		ПолеМОЛ = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
		ПолеПодразделение = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		ПолеАдресМестонахождения = """""";
		ПолеАрендатор = "НЕОПРЕДЕЛЕНО";
		
	КонецЕсли;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС) Тогда
		
		ПолеАрендодатель = "ЕСТЬNULL(ПервоначальныеСведенияОС.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))";
		
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
		
	Иначе
		
		ПолеАрендодатель = "ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)";
		
	КонецЕсли;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС) Тогда
		
		ПолеГФУ = "ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка))";
		
	Иначе
		
		ПолеГФУ = "ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)";
		
	КонецЕсли;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		
		ПолеДатаПринятияКУчетуРегл = "ВЫБОР 
			|	КОГДА ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
			|			И (ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) <= ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, ДАТАВРЕМЯ(1, 1, 1))
			|				ИЛИ ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1))
			|		ТОГДА ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1))
			|	ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, ДАТАВРЕМЯ(1, 1, 1))
			|КОНЕЦ";
		ПолеДатаПринятияКУчетуУпр = "ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1))";
		
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
		
	Иначе
		ПолеДатаПринятияКУчетуРегл = "ДАТАВРЕМЯ(1, 1, 1)";
		ПолеДатаПринятияКУчетуУпр = "ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;

	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ОтборСписка.Свойство("Договор")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.АрендованныеОС) Тогда
		
		ПолеДоговор = "ЕСТЬNULL(АрендованныеОС.Договор, НЕОПРЕДЕЛЕНО)";
		
		НеобходимыеТаблицы.Вставить("АрендованныеОС");
		
	Иначе
		ПолеДоговор = "НЕОПРЕДЕЛЕНО";
	КонецЕсли;

	Если Параметры.Свойство("РеквизитыКоторыеДолжныСовпадать")
			И СтрНайти(Параметры.РеквизитыКоторыеДолжныСовпадать, "СрокИспользованияУУ") <> 0 
		ИЛИ ОтборСписка.Свойство("СрокИспользованияУУ") Тогда
		
		ПолеСрокИспользованияУУ = "ЕСТЬNULL(ПараметрыАмортизацииОСУУ.СрокИспользования, 0)";
		
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСУУ");
		
	Иначе
		
		ПолеСрокИспользованияУУ = "0";
		
	КонецЕсли;
	
	Если Параметры.Свойство("РеквизитыКоторыеДолжныСовпадать")
			И СтрНайти(Параметры.РеквизитыКоторыеДолжныСовпадать, "СрокИспользованияБУ") <> 0 
		ИЛИ ОтборСписка.Свойство("СрокИспользованияБУ") Тогда
		
		ПолеСрокИспользованияБУ = "ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ, 0)";
		ПолеСрокИспользованияНУ = "ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияНУ, 0)";
		
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСБУ");
		
	Иначе
		
		ПолеСрокИспользованияБУ = "0";
		ПолеСрокИспользованияНУ = "0";
		
	КонецЕсли;
	
	Если Параметры.Свойство("ИспользоватьОтборПоОстаточномуСПИ") И Параметры.Свойство("ДатаСведений")
		И ЗначениеЗаполнено(Параметры.ДатаСведений) Тогда
		
		ПолеОстаточныйСрокИспользованияУУ = 
			"ВЫБОР 
			|	КОГДА ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ ЕСТЬ NULL
			|		ТОГДА 0
			|	КОГДА ПараметрыАмортизацииОСУУ.СрокИспользования - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ) < 0
			|		ТОГДА 0
			|	ИНАЧЕ ПараметрыАмортизацииОСУУ.СрокИспользования - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ)
			|	КОНЕЦ";
		
		ПолеОстаточныйСрокИспользованияБУ = 
			"ВЫБОР 
			|	КОГДА ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ ЕСТЬ NULL
			|		ТОГДА 0
			|	КОГДА ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ) < 0
			|		ТОГДА 0
			|	ИНАЧЕ ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ)
			|	КОНЕЦ";
		
		ПолеОстаточныйСрокИспользованияНУ = 
			"ВЫБОР 
			|	КОГДА ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ ЕСТЬ NULL
			|		ТОГДА 0
			|	КОГДА ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияНУ - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ) < 0
			|		ТОГДА 0
			|	ИНАЧЕ ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияНУ - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ)
			|	КОНЕЦ";
		
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСУУ");
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСБУ");
		
	Иначе
		
		ПолеОстаточныйСрокИспользованияУУ = "0";
		ПолеОстаточныйСрокИспользованияБУ = "0";
		ПолеОстаточныйСрокИспользованияНУ = "0";
		
	КонецЕсли;
	
	Если Параметры.Свойство("РегистрацияНаработки")
		ИЛИ Параметры.Свойство("УстановкаНаработки")
		ИЛИ Параметры.Свойство("ИсточникПоказателяНаработки") Тогда
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСУУ");
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
	КонецЕсли;
	
	ДополнительныеПоля = ДополнительныеПоля + "
		|, " + ПолеОрганизация + " КАК Организация
		|, " + ПолеМОЛ + " КАК МОЛ
		|, " + ПолеПодразделение + " КАК Подразделение
		|, " + ПолеАдресМестонахождения + " КАК АдресМестонахождения
		|, " + ПолеГФУ + " КАК ГруппаФинансовогоУчета
		|, " + ПолеДатаПринятияКУчетуРегл + " КАК ДатаПринятияКУчетуРегл
		|, " + ПолеДатаПринятияКУчетуУпр + " КАК ДатаПринятияКУчетуУпр
		|, " + ПолеСрокИспользованияУУ + " КАК СрокИспользованияУУ
		|, " + ПолеСрокИспользованияБУ + " КАК СрокИспользованияБУ
		|, " + ПолеСрокИспользованияНУ + " КАК СрокИспользованияНУ
		|, " + ПолеОстаточныйСрокИспользованияУУ + " КАК ОстаточныйСрокИспользованияУУ
		|, " + ПолеОстаточныйСрокИспользованияБУ + " КАК ОстаточныйСрокИспользованияБУ
		|, " + ПолеОстаточныйСрокИспользованияНУ + " КАК ОстаточныйСрокИспользованияНУ
		|, " + ПолеАрендатор + " КАК Арендатор
		|, " + ПолеАрендодатель + " КАК Арендодатель
		|, " + ПолеДоговор + " КАК Договор";
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ")) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС) Тогда
		
		ДополнительныеПоля = ДополнительныеПоля + "
		|,ЕСТЬNULL(ПорядокУчетаОС.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности";
		
		НеобходимыеТаблицы.Вставить("ПорядокУчетаОС");
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + "
		|,ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности";
		
	КонецЕсли; 
	
	Если ДоступныеКонтексты.Свойство("БУ") 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		ДоступныеПоля.Добавить("СостояниеБУ");
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОГДА ПорядокУчетаОСБУ.СостояниеБУ <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|		ТОГДА ПорядокУчетаОСБУ.СостояниеБУ
			|	ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
			|	КОНЕЦ КАК СостояниеБУ
			|
			|,ЕСТЬNULL(ПорядокУчетаОСБУ.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
			|
			|,ВЫБОР
			|	КОГДА НЕ ПорядокУчетаОСБУ.НедвижимоеИмущество ЕСТЬ NULL
			|		ТОГДА ПорядокУчетаОСБУ.НедвижимоеИмущество
			|	ИНАЧЕ СправочникОбъектыЭксплуатации.ГруппаОС В (
			|				ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания),
			|				ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения),
			|				ЗНАЧЕНИЕ(Перечисление.ГруппыОС.МноголетниеНасаждения),
			|				ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации))
			|КОНЕЦ КАК НедвижимоеИмущество
			|
			|,ЕСТЬNULL(ПорядокУчетаОСБУ.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) КАК АмортизационнаяГруппа";
	
		ПолеНалогообложениеНДС = "ЕСТЬNULL(ПорядокУчетаОСБУ.НалогообложениеНДС, НЕОПРЕДЕЛЕНО)";
		
		НеобходимыеТаблицы.Вставить("ПорядокУчетаОСБУ");
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОНЕЦ КАК СостояниеБУ
			|,НЕОПРЕДЕЛЕНО КАК НалогообложениеНДС
			|,ЛОЖЬ КАК НедвижимоеИмущество
			|,ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка) КАК АмортизационнаяГруппа";
		
		ПолеНалогообложениеНДС = "НЕОПРЕДЕЛЕНО";
		
	КонецЕсли; 
	
	Если ДоступныеКонтексты.Свойство("УУ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОНЕЦ КАК СостояниеУУ";
		
		НеобходимыеТаблицы.Вставить("ПорядокУчетаОСУУ");
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + ",ВЫБОР 
			|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОНЕЦ КАК СостояниеУУ";
		
	КонецЕсли;
	
	ДоступенВыборУчета = (ОтборСписка.Свойство("ОтражатьВРеглУчете") ИЛИ ОтборСписка.Свойство("ОтражатьВУпрУчете"));
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		Если ОтборСписка.Свойство("Состояние") Тогда
			
			Если Параметры.Свойство("ОтражатьВБУ") Тогда
				ОтражатьВБУ = Параметры.ОтражатьВБУ;
			ИначеЕсли ОтборСписка.Свойство("ОтражатьВРеглУчете") Тогда
				ОтражатьВБУ = ОтборСписка.ОтражатьВРеглУчете;
			Иначе
				ОтражатьВБУ = Ложь;
			КонецЕсли;
			
			Если Параметры.Свойство("ОтражатьВНУ") Тогда
				ОтражатьВНУ = Параметры.ОтражатьВНУ;
			ИначеЕсли ОтборСписка.Свойство("ОтражатьВРеглУчете") Тогда
				ОтражатьВНУ = ОтборСписка.ОтражатьВРеглУчете;
			Иначе
				ОтражатьВНУ = Ложь;
			КонецЕсли;
			
			Если ОтборСписка.Свойство("ОтражатьВУпрУчете") Тогда
				ОтражатьВУпрУчете = ОтборСписка.ОтражатьВУпрУчете;
			Иначе
				ОтражатьВУпрУчете = Ложь;
			КонецЕсли;
			
			ТекстУсловия = "";
			
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				
				Если ДоступенВыборУчета Тогда
					
					Если ОтражатьВУпрУчете Тогда
						ТекстУсловия = ТекстУсловия 
						+ ?(ТекстУсловия <> "", " И ", "") + " ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
					КонецЕсли;

					Если ОтражатьВБУ И ОтражатьВНУ И НЕ Параметры.Свойство("ОтражатьВНУ") Тогда
						ТекстУсловия = ТекстУсловия
							+ ?(ТекстУсловия <> "", " И ", "")
							+ "	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
							|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние))";
					
					Иначе
						
						Если ОтражатьВБУ Тогда
							ТекстУсловия = 
							"	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
						КонецЕсли;
						Если ОтражатьВНУ Тогда
							ТекстУсловия = ТекстУсловия 
							+ ?(ТекстУсловия <> "", " И ", "") + " ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ТекстУсловия = 
					"	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние))";
					
				КонецЕсли; 
			
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				
				Если ДоступенВыборУчета Тогда
					
					Если ОтражатьВБУ И ОтражатьВНУ И НЕ Параметры.Свойство("ОтражатьВНУ") Тогда
						
						ТекстУсловия = ТекстУсловия
							+ ?(ТекстУсловия <> "", " И ", "")
							+ "	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
							|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние))";
					
					Иначе
					
						Если ОтражатьВБУ Тогда
							ТекстУсловия = ТекстУсловия
							+ ?(ТекстУсловия <> "", " И ", "")
							+ "	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
						КонецЕсли;
						
						Если ОтражатьВНУ Тогда
							ТекстУсловия = ТекстУсловия 
							+ ?(ТекстУсловия <> "", " И ", "")
							+ " ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
						КонецЕсли;
						
					КонецЕсли;
						
				Иначе
					ТекстУсловия = 
					"	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние))";
				КонецЕсли;
			
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = 
				"ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
				
			КонецЕсли;
			
			Если ТипЗнч(ОтборСписка.Состояние) = Тип("ФиксированныйМассив") Тогда
				ПараметрыЗапроса.Вставить("Состояние", Новый Массив(ОтборСписка.Состояние));
			Иначе
				ПараметрыЗапроса.Вставить("Состояние", ОтборСписка.Состояние);
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыЗапроса.Состояние) = Тип("Массив") Тогда
				
				Если ПараметрыЗапроса.Состояние.Найти(Перечисления.СостоянияОС.НеПринятоКУчету) <> Неопределено
					И ПараметрыЗапроса.Состояние.Найти(Перечисления.СостоянияОС.ПустаяСсылка()) = Неопределено Тогда
					ПараметрыЗапроса.Состояние.Добавить(Перечисления.СостоянияОС.ПустаяСсылка());
				КонецЕсли;
			
			ИначеЕсли ПараметрыЗапроса.Состояние = Перечисления.СостоянияОС.НеПринятоКУчету Тогда
				
				ПараметрыЗапроса.Состояние = Новый Массив;
				ПараметрыЗапроса.Состояние.Добавить(Перечисления.СостоянияОС.ПустаяСсылка());
				ПараметрыЗапроса.Состояние.Добавить(Перечисления.СостоянияОС.НеПринятоКУчету);
			
			КонецЕсли;
			
			Если ТекстУсловия <> "" Тогда
				ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			КонецЕсли;

			ОтборСписка.Удалить("Состояние");
			
		Иначе
			
			ТекстУсловия = "";
			
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
				
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
				
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
				
			КонецЕсли;
			
			Если ТекстУсловия <> "" Тогда
				ПараметрыЗапроса.Вставить("Состояние", Перечисления.СостоянияОС.ПустаяСсылка());
				ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Параметры.Свойство("ДвижимоеИмуществоПринятоеДо2013") Тогда
		
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
		
		ТекстУсловия = 
		"ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ < ДАТАВРЕМЯ(2013, 1, 1)
		|	И НЕ ПорядокУчетаОСБУ.НедвижимоеИмущество";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
						
	ИначеЕсли Параметры.Свойство("ДвижимоеИмуществоПринятоеС2013") Тогда
		
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
		
		ТекстУсловия = 
		"ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ >= ДАТАВРЕМЯ(2013, 1, 1)
		|	И НЕ ПорядокУчетаОСБУ.НедвижимоеИмущество";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
							
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ВидНалога") Тогда
		
		ТекстУсловия = ВнеоборотныеАктивыЛокализация.УсловияОтбораПоВидуНалога(
					"СправочникОбъектыЭксплуатации", 
					"ЕСТЬNULL(ПорядокУчетаОСБУ.АмортизационнаяГруппа, НЕОПРЕДЕЛЕНО)",
					"ПорядокУчетаОСБУ.НедвижимоеИмущество");
					
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
		
		ПараметрыЗапроса.Вставить("ВидНалога", ОтборСписка.ВидНалога);
		
		Если НЕ ПараметрыЗапроса.Свойство("ДатаСведений") Тогда
			ПараметрыЗапроса.Вставить("ДатаСведений", ТекущаяДатаСеанса());
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Параметры.Свойство("РегистрацияНаработки")
		ИЛИ Параметры.Свойство("УстановкаНаработки")
		ИЛИ Параметры.Свойство("ИсточникПоказателяНаработки") Тогда
		
		ТекстУсловия = "";
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами") Тогда
			
			//++ НЕ УТКА
			ПараметрыЗапроса.Вставить(
				"РегистрацияНаработки",
				?(Параметры.Свойство("РегистрацияНаработки"), Параметры.РегистрацияНаработки, Ложь));
	
			ПараметрыЗапроса.Вставить(
				"УстановкаНаработки",
				?(Параметры.Свойство("УстановкаНаработки"), Параметры.УстановкаНаработки, Ложь));
	
			ПараметрыЗапроса.Вставить(
				"ИсточникПоказателяНаработки",
				?(Параметры.Свойство("ИсточникПоказателяНаработки"), Параметры.ИсточникПоказателяНаработки, Ложь));
	
			ПараметрыЗапроса.Вставить(
				"ПоказательНаработки",
				?(Параметры.Свойство("ПоказательНаработки"), Параметры.ПоказательНаработки, Неопределено));

			ТекстУсловия = "СправочникОбъектыЭксплуатации.Класс В
			|	(ВЫБРАТЬ
			|		ПараметрыПоказателейКласса.Ссылка
			|	ИЗ
			|		Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПараметрыПоказателейКласса
			|	ГДЕ
			|		НЕ ПараметрыПоказателейКласса.Ссылка.ПометкаУдаления
			|		И ВЫБОР
			|			КОГДА &РегистрацияНаработки
			|				ТОГДА НЕ ПараметрыПоказателейКласса.РегистрироватьОтИсточника
			|			КОГДА &УстановкаНаработки
			|				ТОГДА ИСТИНА
			|			КОГДА &ИсточникПоказателяНаработки
			|				ТОГДА ПараметрыПоказателейКласса.ПоказательНаработки = &ПоказательНаработки
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ)";
			//-- НЕ УТКА
			
		Иначе
			
			ТекстУсловия = "(ЕСТЬNULL(ПараметрыАмортизацииОСУУ.МетодНачисленияАмортизации, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
			|	ИЛИ ЕСТЬNULL(ПервоначальныеСведенияОС.МетодНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции))";
			
		КонецЕсли;
			
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
		
	КонецЕсли;
	
	Если Параметры.Свойство("УчитыватьВВидеГрупповогоОС")
		И Параметры.УчитыватьВВидеГрупповогоОС Тогда
		
		ТекстУсловия = "СправочникОбъектыЭксплуатации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС)";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			
	КонецЕсли;
	
	Если ЭтоВыборОС Тогда
		
		ТекстУсловия = "СправочникОбъектыЭксплуатации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации)";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			
	ИначеЕсли ИсключитьКомпоненты Тогда
		
		ТекстУсловия = "(НЕ СправочникОбъектыЭксплуатации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
			|	ИЛИ СправочникОбъектыЭксплуатации.УчитыватьСтоимостьЛиквидационногоОбязательства)";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			
	КонецЕсли;
		
	Если УстановитьВсеОтборы Тогда
		
		Для каждого КлючИЗначение Из ОтборСписка Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "Организация" Тогда
				ПутьКПолю = ПолеОрганизация;
			ИначеЕсли КлючИЗначение.Ключ = "Подразделение" Тогда
				ПутьКПолю = ПолеПодразделение;
			ИначеЕсли КлючИЗначение.Ключ = "МОЛ" Тогда
				ПутьКПолю = ПолеМОЛ;
			ИначеЕсли КлючИЗначение.Ключ = "НалогообложениеНДС" Тогда
				ПутьКПолю = ПолеНалогообложениеНДС;
			ИначеЕсли КлючИЗначение.Ключ = "СрокИспользованияБУ" Тогда
				ПутьКПолю = ПолеСрокИспользованияБУ;
			ИначеЕсли КлючИЗначение.Ключ = "СрокИспользованияНУ" Тогда
				ПутьКПолю = ПолеСрокИспользованияНУ;
			ИначеЕсли КлючИЗначение.Ключ = "СрокИспользованияУУ" Тогда
				ПутьКПолю = ПолеСрокИспользованияУУ;
			ИначеЕсли КлючИЗначение.Ключ = "Арендатор" Тогда
				ПутьКПолю = ПолеАрендатор;
			ИначеЕсли КлючИЗначение.Ключ = "Арендодатель" Тогда
				ПутьКПолю = ПолеАрендодатель;
			ИначеЕсли КлючИЗначение.Ключ = "Договор" Тогда
				ПутьКПолю = ПолеДоговор;
			ИначеЕсли КлючИЗначение.Ключ = "НаправлениеДеятельности" Тогда
				ПутьКПолю = "ЕСТЬNULL(ПорядокУчетаОС.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))";
			ИначеЕсли КлючИЗначение.Ключ = "АмортизационнаяГруппа" Тогда
				ПутьКПолю = "ЕСТЬNULL(ПорядокУчетаОСБУ.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка))";
			ИначеЕсли КлючИЗначение.Ключ = "ГруппаОС"
				ИЛИ КлючИЗначение.Ключ = "Статус"
				ИЛИ КлючИЗначение.Ключ = "УчитыватьСтоимостьЛиквидационногоОбязательства"
				ИЛИ КлючИЗначение.Ключ = "ТипОС" Тогда
				
				ПутьКПолю = "СправочникОбъектыЭксплуатации." + КлючИЗначение.Ключ;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЭтоМассив = ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") 
						ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив");
						
			ТекстУсловия = ПутьКПолю + ?(ЭтоМассив, " В (&" + КлючИЗначение.Ключ + ")", " = &" + КлючИЗначение.Ключ);
			ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
							
			ПараметрыЗапроса.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ТекстСоединения = "";
	
	Если НеобходимыеТаблицы.Свойство("МестонахождениеОС")
		ИЛИ НеобходимыеТаблицы.Свойство("ПервоначальныеСведенияОС")
		ИЛИ НеобходимыеТаблицы.Свойство("ПорядокУчетаОСУУ")
		ИЛИ НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСУУ")
		ИЛИ НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСБУ")
		ИЛИ НеобходимыеТаблицы.Свойство("ПорядокУчетаОСБУ") Тогда
		
		НеобходимыеТаблицы.Вставить("МестонахождениеОС");
		
		Если ЭтоВыборУзлаКомпонента Тогда
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(
			|			&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата,
			|			&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК УзлыКомпоненты
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = УзлыКомпоненты.УзелКомпонент
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
			|		ПО УзлыКомпоненты.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
		Иначе
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = МестонахождениеОС.ОсновноеСредство";
		КонецЕсли;
	
	КонецЕсли;

	Если НеобходимыеТаблицы.Свойство("ПервоначальныеСведенияОС") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата,
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПервоначальныеСведенияОС
		|		ПО ПервоначальныеСведенияОС.Организация = МестонахождениеОС.Организация
		|			И СправочникОбъектыЭксплуатации.Ссылка = ПервоначальныеСведенияОС.ОсновноеСредство";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОСУУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата,
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПорядокУчетаОСУУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСУУ.ОсновноеСредство
		|			И ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСУУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПараметрыАмортизацииОСУУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПараметрыАмортизацииОСУУ.ОсновноеСредство
		|			И ПараметрыАмортизацииОСУУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСБУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
		|					&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|					ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|						И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПараметрыАмортизацииОСБУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПараметрыАмортизацииОСБУ.ОсновноеСредство
		|			И ПараметрыАмортизацииОСБУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("АрендованныеОС") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата) КАК АрендованныеОС
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = АрендованныеОС.ОсновноеСредство";
	КонецЕсли;

	Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОСБУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|			&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата,
		|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПорядокУчетаОСБУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСБУ.ОсновноеСредство
		|			И ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;

	Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОС") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПорядокУчетаОС
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОС.ОсновноеСредство";
	КонецЕсли;

	ТекстПервые = "";
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		ТекстУсловия = 
			"(СправочникОбъектыЭксплуатации.Наименование ПОДОБНО &СтрокаПоиска
			|			ИЛИ СправочникОбъектыЭксплуатации.ИнвентарныйНомер ПОДОБНО &СтрокаПоиска)
			|	И НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа
			|	И НЕ СправочникОбъектыЭксплуатации.ПометкаУдаления";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);

		ТекстПервые = "РАЗРЕШЕННЫЕ ПЕРВЫЕ 10";
		ПараметрыЗапроса.Вставить("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
	КонецЕсли;
	
	Если МассивОбъектов <> Неопределено Тогда
		ТекстУсловия = 
			"СправочникОбъектыЭксплуатации.Ссылка В(&МассивОбъектов)
			|	И НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа
			|	И НЕ СправочникОбъектыЭксплуатации.ПометкаУдаления";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);

		ПараметрыЗапроса.Вставить("МассивОбъектов", МассивОбъектов);
	КонецЕсли; 
	
	Если Параметры.Свойство("ЕстьПараметрыНачисленияТранспортногоНалога") Тогда
		ТекстУсловия = 
		"СправочникОбъектыЭксплуатации.Ссылка В (
		|	ВЫБРАТЬ 
		|		ДанныеРегистра.ОсновноеСредство 
		|	ИЗ 
		|		РегистрСведений.ПараметрыНачисленияТранспортногоНалога.СрезПоследних(
		|			&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата,
		|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Регистрация) КАК ДанныеРегистра
		|	ГДЕ
		|		ДанныеРегистра.ВидЗаписи = ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.Регистрация))";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
	КонецЕсли; 
	
	Если Параметры.Свойство("ЕстьПараметрыНачисленияЗемельногоНалога") Тогда
		ТекстУсловия = 
		"СправочникОбъектыЭксплуатации.Ссылка В (
		|	ВЫБРАТЬ 
		|		ДанныеРегистра.ОсновноеСредство 
		|	ИЗ 
		|		РегистрСведений.ПараметрыНачисленияЗемельногоНалога.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата,
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Регистрация) КАК ДанныеРегистра
		|	ГДЕ
		|		ДанныеРегистра.ВидЗаписи = ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.Регистрация))";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(ТекстОтборы) Тогда
		ТекстОтборы = "
		|ГДЕ
		|" + ТекстОтборы;
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("МестонахождениеОС") Тогда
		ТекстВТ = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МестонахождениеОС.Организация КАК Организация,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Местонахождение КАК Местонахождение,
		|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
		|	МестонахождениеОС.Арендатор КАК Арендатор
		|ПОМЕСТИТЬ МестонахождениеОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК МестонахождениеОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация
		|;
		|";
	Иначе
		ТекстВТ = "";
	КонецЕсли;
	
	ТекстЗапроса = ТекстВТ +
	"ВЫБРАТЬ //ПЕРВЫЕ//
	|	СправочникОбъектыЭксплуатации.Ссылка,
	|	СправочникОбъектыЭксплуатации.ПометкаУдаления,
	|	СправочникОбъектыЭксплуатации.Родитель,
	|	СправочникОбъектыЭксплуатации.ЭтоГруппа,
	|	СправочникОбъектыЭксплуатации.Код,
	|	СправочникОбъектыЭксплуатации.Наименование,
	|	СправочникОбъектыЭксплуатации.ТипОС,
	|	СправочникОбъектыЭксплуатации.ИнвентарныйНомер,
	|	СправочникОбъектыЭксплуатации.ГруппаОС,
	|	СправочникОбъектыЭксплуатации.ГруппаОСМеждународныйУчет,
	|	СправочникОбъектыЭксплуатации.КодПоОКОФ,
	|	СправочникОбъектыЭксплуатации.ШифрПоЕНАОФ,
	|	СправочникОбъектыЭксплуатации.ДатаВыпуска,
	|	СправочникОбъектыЭксплуатации.ЗаводскойНомер,
	|	СправочникОбъектыЭксплуатации.Изготовитель,
	|	СправочникОбъектыЭксплуатации.Класс,
	|	СправочникОбъектыЭксплуатации.Модель,
	|	СправочникОбъектыЭксплуатации.НаименованиеПолное,
	|	СправочникОбъектыЭксплуатации.НомерПаспорта,
	|	СправочникОбъектыЭксплуатации.ОбъектБытовогоНазначения,
	|	СправочникОбъектыЭксплуатации.Подкласс,
	|	СправочникОбъектыЭксплуатации.Расположение,
	|	СправочникОбъектыЭксплуатации.РемонтирующееПодразделение,
	|	СправочникОбъектыЭксплуатации.ЭксплуатирующееПодразделение,
	|	СправочникОбъектыЭксплуатации.СерийныйНомер,
	|	СправочникОбъектыЭксплуатации.Статус,
	|	СправочникОбъектыЭксплуатации.Комментарий
	|
	|	//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//
	|
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК СправочникОбъектыЭксплуатации
	|
	|	//СОЕДИНЕНИЯ//
	|	//ОТБОРЫ//";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//", ДополнительныеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СОЕДИНЕНИЯ//", ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОТБОРЫ//", ТекстОтборы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ//", ТекстПервые);

	ПараметрыСрезаПоследнихДата = "";
	ПараметрыСрезаПоследних = "ИСТИНА";
	Если Параметры.Свойство("ДатаСведений") Тогда
		ПараметрыСрезаПоследнихДата = "&ДатаСведений";
		ПараметрыЗапроса.Вставить("ДатаСведений", КонецДня(Параметры.ДатаСведений));
	КонецЕсли; 
	Если Параметры.Свойство("ТекущийРегистратор") Тогда
		ПараметрыСрезаПоследних = "Регистратор <> &ТекущийРегистратор";
		ПараметрыЗапроса.Вставить("ТекущийРегистратор", Параметры.ТекущийРегистратор);
	КонецЕсли; 
	
	Если Параметры.Свойство("ЕстьПараметрыНачисленияТранспортногоНалога")
		ИЛИ Параметры.Свойство("ЕстьПараметрыНачисленияЗемельногоНалога") Тогда
		
		ПараметрыСрезаПоследних_Регистрация = ПараметрыСрезаПоследних;
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
			ПараметрыСрезаПоследних_Регистрация = 
				ПараметрыСрезаПоследних_Регистрация 
				+ ?(ПараметрыСрезаПоследних_Регистрация <> "", " И ", "")
				+ "Организация = &Организация";
			ПараметрыЗапроса.Вставить("Организация", Параметры.Организация);
		КонецЕсли; 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Регистрация", ПараметрыСрезаПоследних_Регистрация);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата", ПараметрыСрезаПоследнихДата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия", ПараметрыСрезаПоследних);
	
	ОписаниеЗапросаДляВыбора = Новый Структура("ТекстЗапроса,ПараметрыЗапроса,ДоступныеПоля", ТекстЗапроса, ПараметрыЗапроса, ДоступныеПоля);
	
	//-- Локализация
	
	Возврат ОписаниеЗапросаДляВыбора;
	
КонецФункции

Функция ЕстьПраваНаЧтениеСведений() Экспорт

	//++ Локализация
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		Возврат Ложь;
	КонецЕсли;

	//-- Локализация
	
	Возврат Истина;
	
КонецФункции

Функция ТекстЗапросаПоказательНаработки() Экспорт

	ТекстЗапроса = Неопределено;
	
	//++ Локализация
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОС.ПоказательНаработки
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|		&Дата, 
	|		ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|			И ОсновноеСредство = &Объект) КАК ПорядокУчетаОС";
	
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПервоначальныеСведения(ОсновноеСредствоИлиСписок, Период) Экспорт

	Результат = Неопределено;
	
	//++ Локализация
	
	ПервоначальныеСведения = Новый Структура;
	ПервоначальныеСведения.Вставить("Организация", Неопределено);
	ПервоначальныеСведения.Вставить("Местонахождение", Неопределено);
	ПервоначальныеСведения.Вставить("МОЛ", Неопределено);
	ПервоначальныеСведения.Вставить("НаправлениеДеятельности", Неопределено);
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюБУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюНУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюУУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюБУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюНУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюУУ", Неопределено);
	ПервоначальныеСведения.Вставить("СостояниеУУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	ПервоначальныеСведения.Вставить("СостояниеБУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	ПервоначальныеСведения.Вставить("СостояниеНУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	ПервоначальныеСведения.Вставить("ЛиквидационнаяСтоимость", 0);
	ПервоначальныеСведения.Вставить("ЛиквидационнаяСтоимостьРегл", 0);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		Возврат ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), Новый Соответствие, ПервоначальныеСведения);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.ОсновноеСредство,
	|	МестонахождениеОС.Организация,
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.МОЛ,
	|	ПорядокУчетаОС.НаправлениеДеятельности,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюНУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ,
	|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеБУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимостьРегл
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(&Период, ДатаИсправления = ДАТАВРЕМЯ(1,1,1) И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
	|		ПО МестонахождениеОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПервоначальныеСведенияОС.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОС
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|				&Период,
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПорядокУчетаОСУУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|				&Период,
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСБУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПорядокУчетаОСБУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПараметрыАмортизацииОСБУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСУУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПараметрыАмортизацииОСУУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПараметрыАмортизацииОСУУ.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("Период", Период);
	
	СписокОС = ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), 
						ОсновноеСредствоИлиСписок, 
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредствоИлиСписок));
						
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), Новый Соответствие, ПервоначальныеСведения);
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив") Тогда
		Результат = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПервоначальныеСведенияОС = ОбщегоНазначения.СкопироватьРекурсивно(ПервоначальныеСведения);
			ЗаполнитьЗначенияСвойств(ПервоначальныеСведенияОС, Выборка);
			Результат.Вставить(Выборка.ОсновноеСредство, ПервоначальныеСведенияОС);
		КонецЦикла;
	Иначе
		Результат = ПервоначальныеСведения;
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли; 
	
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОбУчете(ОсновноеСредство, ОтборОрганизация) Экспорт

	СведенияОбУчете = NULL;
	
	//++ Локализация
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииОСУУ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ВидОбъектаУчета,
	|
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюУУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюНУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюУУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаНУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаУУ,
	|
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ ССЫЛКА Документ.СписаниеОС2_4
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ КАК Документ.СписаниеОС2_4).СписаниеСПрошлойДаты, ЛОЖЬ)
	|			ТОГДА ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ КАК Документ.СписаниеОС2_4).ДатаСписания
	|		ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаСнятияСУчетаБУ,
	|
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОС.ДокументСнятияСУчетаНУ ССЫЛКА Документ.СписаниеОС2_4
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаНУ КАК Документ.СписаниеОС2_4).СписаниеСПрошлойДаты, ЛОЖЬ)
	|			ТОГДА ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаНУ КАК Документ.СписаниеОС2_4).ДатаСписания
	|		ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаНУ.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаСнятияСУчетаНУ,
	|
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ ССЫЛКА Документ.СписаниеОС2_4
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ КАК Документ.СписаниеОС2_4).СписаниеСПрошлойДаты, ЛОЖЬ)
	|			ТОГДА ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ КАК Документ.СписаниеОС2_4).ДатаСписания
	|		ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаСнятияСУчетаУУ,
	|
	|	ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК ГруппаФинансовогоУчета,
	|	ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета.Представление, """") КАК ГруппаФинансовогоУчетаПредставление,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) КАК АмортизационнаяГруппа,
	|
	|	ВЫБОР 
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|				И НЕ ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
	|	КОНЕЦ КАК СостояниеБУ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|				И НЕ ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
	|	КОНЕЦ КАК СостояниеНУ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|				И НЕ ПорядокУчетаОСУУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
	|	КОНЕЦ КАК СостояниеУУ,
	|
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.СрокИспользования, 0) КАК СрокИспользованияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимостьРегл,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияНУ, 0) КАК СрокИспользованияНУ,
	|	МестонахождениеОС.Период КАК ПериодСведенийОМестонахождении,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.Арендатор
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) 
	|	КОНЕЦ КАК Организация,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(МестонахождениеОС.Арендатор КАК Справочник.Организации).Представление, """")
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.Организация.Представление, """")
	|	КОНЕЦ КАК ОрганизацияПредставление,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.МОЛАрендатора
	|		ИНАЧЕ МестонахождениеОС.МОЛ
	|	КОНЕЦ КАК МОЛ,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА ЕСТЬNULL(МестонахождениеОС.МОЛАрендатора.Представление, """")
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.МОЛ.Представление, """")
	|	КОНЕЦ КАК МОЛПредставление,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА МестонахождениеОС.ПодразделениеАрендатора
	|		ИНАЧЕ МестонахождениеОС.Местонахождение
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР
	|		КОГДА &ОтборПоОрганизации И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА ЕСТЬNULL(МестонахождениеОС.ПодразделениеАрендатора.Представление, """")
	|		ИНАЧЕ ЕСТЬNULL(МестонахождениеОС.Местонахождение.Представление, """")
	|	КОНЕЦ КАК ПодразделениеПредставление,
	|
	|	ВЫБОР 
	|		КОГДА &ОтборПоОрганизации 
	|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПолученоВАрендуОтДругойОрганизации,
	|
	|	МестонахождениеОС.ОсновноеСредство.ТипОС КАК ТипОС,
	|	НЕ АрендованныеОС.ОсновноеСредство ЕСТЬ NULL КАК ПолученВАренду,
	|	НЕ ПереданныеВАрендуОС.ОсновноеСредство ЕСТЬ NULL КАК ПереданВАренду,
	|	ЕСТЬNULL(АрендованныеОС.Партнер, ЕСТЬNULL(ПереданныеВАрендуОС.Партнер, НЕОПРЕДЕЛЕНО)) КАК Партнер,
	|	ЕСТЬNULL(АрендованныеОС.Партнер.Представление, ЕСТЬNULL(ПереданныеВАрендуОС.Партнер.Представление, """")) КАК ПартнерПредставление,
	|	ЕСТЬNULL(АрендованныеОС.Контрагент, ЕСТЬNULL(ПереданныеВАрендуОС.Контрагент, НЕОПРЕДЕЛЕНО)) КАК Контрагент,
	|	ЕСТЬNULL(АрендованныеОС.Контрагент.Представление, ЕСТЬNULL(ПереданныеВАрендуОС.Контрагент.Представление, """")) КАК КонтрагентПредставление,
	|	ЕСТЬNULL(АрендованныеОС.Договор, ЕСТЬNULL(ПереданныеВАрендуОС.Договор, НЕОПРЕДЕЛЕНО)) КАК Договор,
	|	ЕСТЬNULL(АрендованныеОС.Договор.Представление, ЕСТЬNULL(ПереданныеВАрендуОС.Договор.Представление, """")) КАК ДоговорПредставление
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(, ДатаИсправления = ДАТАВРЕМЯ(1,1,1) И ОсновноеСредство = &Ссылка) КАК МестонахождениеОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|				, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
	|					И ОсновноеСредство = &Ссылка) КАК ПервоначальныеСведенияОС
	|		ПО (ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПервоначальныеСведенияОС.Организация = МестонахождениеОС.Организация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|				, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
	|					И ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОС
	|		ПО (ПорядокУчетаОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|				, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
	|					И ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСУУ
	|		ПО (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|				, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСБУ
	|		ПО (ПорядокУчетаОСБУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
	|				, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство = &Ссылка) КАК ПараметрыАмортизацииОСБУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСБУСрезПоследних.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПараметрыАмортизацииОСБУСрезПоследних.Организация = МестонахождениеОС.Организация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|				, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
	|					И ОсновноеСредство = &Ссылка) КАК ПараметрыАмортизацииОСУУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСУУСрезПоследних.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПараметрыАмортизацииОСУУСрезПоследних.Организация = МестонахождениеОС.Организация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПереданныеВАрендуОС
	|		ПО (ПереданныеВАрендуОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
	|			И (ПереданныеВАрендуОС.Организация = МестонахождениеОС.Организация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК АрендованныеОС
	|		ПО (АрендованныеОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ОсновноеСредство);
	Запрос.УстановитьПараметр("ОтборОрганизация", ОтборОрганизация);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОбУчете = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		СведенияОбУчете.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СведенияОбУчете, Выборка);
	
	//-- Локализация
	
	Возврат СведенияОбУчете;

КонецФункции

Функция ТекстЗапросаДоступныхДляВыбораОбъектов() Экспорт

	ТекстЗапроса = Неопределено;
	
	//++ Локализация
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСУУ.ОсновноеСредство КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|		, 
	|		&РегистрацияНаработки 
	|			И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)) КАК ПараметрыАмортизацииОСУУ
	|ГДЕ
	|	ПараметрыАмортизацииОСУУ.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|		, 
	|		&РегистрацияНаработки 
	|			И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)) КАК ПервоначальныеСведенияОС
	|ГДЕ
	|	МетодНачисленияАмортизацииБУ В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции), 
	|			ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега))";
	
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДополнитьВспомогательныеРеквизиты(ВспомогательныеРеквизиты) Экспорт

	//++ Локализация
	ВспомогательныеРеквизиты.Вставить("ИспользоватьУчетДрагоценныхМатериалов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов"));
	//-- Локализация
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

//++ Локализация

Функция ПечатьОС6_2003(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОсновныеСредства_ОС6";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ОбъектыЭксплуатации.ПФ_MXL_ОС6");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2 = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3 = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3 = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4 = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4 = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1 = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6 = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1 = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	СтрокиРаздела7_1 = Макет.ПолучитьОбласть("СтрокиРаздела7_1");
	ШапкаРаздела7_2 = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2 = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	Если ПараметрыПечати.Свойство("ДатаСведений") Тогда
		ДатаСведений = ПараметрыПечати.ДатаСведений;
	Иначе
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеПечатнойФормы = ДанныеПечатнойФормыОС6_2003(МассивОбъектов, ДатаСведений);
	
	ТекстЗапросаТекущиеСведения = ТекстЗапросаТекущиеСведения(ДатаСведений);
	
	ИспользоватьУчетДМ = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");
	ЕстьПереоценки = Не ДанныеПечатнойФормы.ПоПереоценкам.Пустой();
	
	ПервыйДокумент = Истина;
	
	СведенияАктуальны = Истина;
	
	ВыборкаПереоценок = ДанныеПечатнойФормы.ПоПереоценкам.Выбрать();
	
	ВыборкаОбъектов = ДанныеПечатнойФормы.ПоОбъектам.Выбрать();
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапросаТекущиеСведения;
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Запрос.УстановитьПараметр("КонецМесяцаГраница", Новый Граница(КонецМесяца(ДатаСведений), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		
		ТекущиеСведенияОС = Запрос.Выполнить().Выбрать();
		ТекущиеСведенияОС.Следующий();
		
		Если НЕ ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		СчетУчетаСтоимостиБУ = ТекущиеСведенияОС.СчетУчета;
		СрокИспользования = ТекущиеСведенияОС.СрокПолезногоИспользования;
		ДатаПринятия = ТекущиеСведенияОС.ДатаПринятия;
		ДокументПринятия = ТекущиеСведенияОС.ДокументПринятия;
		ДокументПринятияНомер = ТекущиеСведенияОС.ДокументПринятияНомер;
		ДатаСписания = ТекущиеСведенияОС.ДатаСписания;
		ДатаПоследнейМодернизации = ТекущиеСведенияОС.ДатаПоследнейМодернизации;
		
		Отбор  = Новый Структура( "ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Подразделение  = ТекущиеСведенияОС.МестонахождениеНаименование;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаОбъектов.Организация, ТекущаяДатаСеанса());
		
		Шапка.Параметры.Заполнить(ВыборкаОбъектов);
		Шапка.Параметры.Заполнить(ТекущиеСведенияОС);
		
		Шапка.Параметры.Организация = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		Шапка.Параметры.КодПоОКПО = ВыборкаОбъектов.Организация.КодПоОКПО;
		Шапка.Параметры.Подразделение = Подразделение;
		Шапка.Параметры.НаименованиеОС = ?(НЕ ЗначениеЗаполнено(ВыборкаОбъектов.НаименованиеПолное), ВыборкаОбъектов.Наименование, ВыборкаОбъектов.НаименованиеПолное);
		
		Шапка.Параметры.НомерДок = ТекущиеСведенияОС.ИнвентарныйНомер;
		Шапка.Параметры.ДатаДок = Формат(ДатаСведений,"ДЛФ=D");
		Шапка.Параметры.МестоНахождениеОС = Подразделение;
		Шапка.Параметры.ИзготовительОС = ВыборкаОбъектов.Изготовитель;
		Шапка.Параметры.НомерГруппы = ТекущиеСведенияОС.АмортизационнаяГруппа;
		Если ТекущиеСведенияОС.АмортизационнаяГруппа = 11 Тогда
			Шапка.Параметры.НомерГруппы = НСтр("ru = 'Отдельная';
												|en = 'Separate'");
		КонецЕсли;
		Шапка.Параметры.НомерПаспорта = ВыборкаОбъектов.НомерПаспорта;
		Шапка.Параметры.ЗаводскойНомер = ВыборкаОбъектов.ЗаводскойНомер;
		Шапка.Параметры.ИнвентарныйНомер = ТекущиеСведенияОС.ИнвентарныйНомер;
		Шапка.Параметры.СубСчет = Строка(СчетУчетаСтоимостиБУ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОСОрганизацийСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
		|			&ДатаСведений,
		|			ОсновноеСредство = &ОсновноеСредство
		|				И Событие.ВидСобытияОС В (&МодернизацияИКапРемонт)) КАК СобытияОСОрганизацийСрезПоследних
		|ГДЕ
		|	СобытияОСОрганизацийСрезПоследних.Период >= &ДатаВводаВЭксплуатациюБУ";
		
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Запрос.УстановитьПараметр("ДатаВводаВЭксплуатациюБУ", ВыборкаОбъектов.ДатаВводаВЭксплуатациюБУ);
		
		ВидыСобытий = Новый СписокЗначений;
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
		Запрос.УстановитьПараметр("МодернизацияИКапРемонт", ВидыСобытий);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДатаПоследнейМодернизации = Выборка.Период;
		КонецЦикла;
		
		Шапка.Параметры.ДатаВвода = ДатаПринятия;
		Шапка.Параметры.ДатаСписания = ДатаСписания;
		
		ТабДок.Вывести(Шапка);
		
		// Балансовая стоимость ОС на момент поступления и первоначально принятый срок полезного использования.
		ШапкаРазделов1и2.Параметры.Заполнить(ВыборкаОбъектов);
		ШапкаРазделов1и2.Параметры.Заполнить(ТекущиеСведенияОС);
		ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость= ТекущиеСведенияОС.ПервоначальнаяСтоимость;
		ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользования, Ложь);
		Если ЗначениеЗаполнено(ДатаПринятия) Тогда
			ШапкаРазделов1и2.Параметры.ДокументВвода = ДокументПринятия;
			ШапкаРазделов1и2.Параметры.ДокументВводаДата = ДатаПринятия;
			ШапкаРазделов1и2.Параметры.ДокументВводаНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументПринятияНомер, Истина, Ложь);
			ШапкаРазделов1и2.Параметры.ДатаКапремонта = ДатаПоследнейМодернизации;
			ШапкаРазделов1и2.Параметры.СрокЭксплуатации = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(
				УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
					ДатаПринятия, ?(ЗначениеЗаполнено(ДатаСписания), ДатаСписания, ТекущаяДатаСеанса())), Ложь);
		КонецЕсли;
		
		ТабДок.Вывести(ШапкаРазделов1и2);
		
		// Переоценки
		ТабДок.Вывести(ШапкаРаздела3);
		Если ЕстьПереоценки Тогда
			ВосстановительнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
			ЗаполненныхПереоценок = 0;
			СтруктураПустойСтроки = Новый Структура(
				"ДатаПереоценки1, КоэффициентПереоценки1, ВосстановительнаяСтоимостьПереоценки1,
				|ДатаПереоценки2, КоэффициентПереоценки2, ВосстановительнаяСтоимостьПереоценки2,
				|ДатаПереоценки3, КоэффициентПереоценки3, ВосстановительнаяСтоимостьПереоценки3");
			
			Пока Истина Цикл
				
				Если ЗаполненныхПереоценок = 3 Тогда
					ТабДок.Вывести(СтрокиРаздела3);
					ЗаполненныхПереоценок = 0;
					СтрокиРаздела3.Параметры.Заполнить(СтруктураПустойСтроки);
				КонецЕсли;
				
				Если ВыборкаПереоценок.НайтиСледующий(Отбор) Тогда
					ЗаполненныхПереоценок = ЗаполненныхПереоценок + 1;
					СтрокиРаздела3.Параметры["ДатаПереоценки" + ЗаполненныхПереоценок] = ВыборкаПереоценок.ДатаПереоценки;
					
					СтрокиРаздела3.Параметры["ВосстановительнаяСтоимостьПереоценки" + ЗаполненныхПереоценок] = 
						ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки;
					
					СтрокиРаздела3.Параметры["КоэффициентПереоценки" + ЗаполненныхПереоценок] =
						Формат(ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки / ВосстановительнаяСтоимость, "ЧЦ=15; ЧДЦ=3");
					
					ВосстановительнаяСтоимость = ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки;
				Иначе
					Если ЗаполненныхПереоценок > 0 Тогда
						ТабДок.Вывести(СтрокиРаздела3);
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			ТабДок.Вывести(СтрокиРаздела3);
		КонецЕсли;
		
		// Сведения о приемке, внутренних перемещениях и выбытии	
		ТабДок.Вывести(ШапкаРаздела4);
		
		ВыборкаЗаписей = ВыборкаПриемкаПеремещениеВыбытие(ДатаСведений, ВыборкаОбъектов);
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			ТекущаяОперация = ВыборкаЗаписей.Событие;
			
			СтрокаРаздела4.Параметры.Регистратор = ВыборкаЗаписей.Регистратор;
			
			СтрокаРаздела4.Параметры.ДатаНомерДокумента = СтрШаблон(
				НСтр("ru = '%1 № %2 от %3';
					|en = '%1 No. %2 from %3'"),
				Строка(ВыборкаЗаписей.НазваниеДокумента),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаписей.НомерДокумента),
				Формат(ВыборкаЗаписей.Период,"ДЛФ=D"));
			
			СтрокаРаздела4.Параметры.ВидОперации = ТекущаяОперация;
			СтрокаРаздела4.Параметры.ФИОМОЛДвижения = "";
			СтрокаРаздела4.Параметры.Подразделение = "";
			СтрокаРаздела4.Параметры.ФИОМОЛДвижения = ВыборкаЗаписей.МОЛ;
			СтрокаРаздела4.Параметры.Подразделение = ВыборкаЗаписей.Местонахождение;
				
			Если ВыборкаЗаписей.СтоимостьОборот = NULL И ВыборкаЗаписей.АмортизацияОборот = NULL Тогда // ввод начальных остатков
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
				
			Иначе
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ВыборкаЗаписей.ОстаточнаяСтоимость;
				
			КонецЕсли;
			
			ТабДок.Вывести(СтрокаРаздела4);
			
		КонецЦикла;
		
		ТабДок.Вывести(ПодвалСтраницы1);
		
		// Модернизация ОС и ремонт
		ТабДок.Вывести(ШапкаРазделов5и6);
		
		СписокМодернизаций = Новый Массив;
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("УсловиеМодернизаций", СписокМодернизаций);
		Запрос.УстановитьПараметр("ТекстМодернизация", НСтр("ru = 'Модернизация';
															|en = 'Renovation'"));
		Запрос.УстановитьПараметр("ТекстРазукомплектация", НСтр("ru = 'Разукомплектация';
																|en = 'Disassembling'"));
		Запрос.УстановитьПараметр("ТекстЧастичнаяЛиквидация", НСтр("ru = 'Частичная ликвидация';
																	|en = 'Partial disposal'"));
		Запрос.УстановитьПараметр("ТекстПрисоединение", НСтр("ru = 'Реконструкция';
															|en = 'Reconstruction'"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОСОрганизаций.СуммаЗатратБУ КАК СуммаЗатратБУМодернизаций,
		|	СобытияОСОрганизаций.Регистратор КАК Регистратор,
		|	СобытияОСОрганизаций.Период КАК Период,
		|
		|	ВЫБОР 
		|		КОГДА СобытияОСОрганизаций.Событие <> ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка)
		|			ТОГДА СобытияОСОрганизаций.Событие 
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.МодернизацияОС2_4)
		|			ТОГДА &ТекстМодернизация 
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
		|			ТОГДА &ТекстЧастичнаяЛиквидация 
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
		|			ТОГДА &ТекстРазукомплектация 
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ОбъединениеОС)
		|			ТОГДА &ТекстПрисоединение 
		|	КОНЕЦ КАК Операция,
		|
		|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
		|	ВЫРАЗИТЬ(СобытияОСОрганизаций.НазваниеДокумента КАК СТРОКА(200)) КАК НазваниеДокумента
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК РазукомплектацияОС
		|		ПО РазукомплектацияОС.Ссылка = СобытияОСОрганизаций.Регистратор
		|			И РазукомплектацияОС.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеОС2_4 КАК СписаниеОС2_4
		|		ПО СписаниеОС2_4.Ссылка = СобытияОСОрганизаций.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбъединениеОС КАК ОбъединениеОС
		|		ПО ОбъединениеОС.Ссылка = СобытияОСОрганизаций.Регистратор
		|			И ОбъединениеОС.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
		|ГДЕ
		|	СобытияОСОрганизаций.Организация = &Организация
		|	И СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|	И (СобытияОСОрганизаций.Событие.ВидСобытияОС В (&УсловиеМодернизаций)
		|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.МодернизацияОС2_4)
		|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
		|			И НЕ РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
		|			И СобытияОСОрганизаций.Событие = ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка)
		|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
		|			И СписаниеОС2_4.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
		|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ОбъединениеОС)
		|			И ОбъединениеОС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрисоединениеОС)
		|			И СобытияОСОрганизаций.Событие = ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Регистратор";
		
		Результат = Запрос.Выполнить();
		
		ТаблицаИзмененияСтоимости = Новый ТаблицаЗначений;
		ТаблицаИзмененияСтоимости.Колонки.Добавить("Модернизация");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ДокМодернизации");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ДокМодернизацииДата");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ДокМодернизацииНомер");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ЗатратыНаМодернизацию");
		
		ВыборкаРегистраторов = Результат.Выбрать();
		Пока ВыборкаРегистраторов.Следующий() Цикл
			
			НоваяСтрока = ТаблицаИзмененияСтоимости.Добавить();
			НоваяСтрока.Модернизация = ВыборкаРегистраторов.Операция;
			НоваяСтрока.ДокМодернизации = ВыборкаРегистраторов.НазваниеДокумента;
			НоваяСтрока.ДокМодернизацииНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаРегистраторов.НомерДокумента);
			НоваяСтрока.ДокМодернизацииДата = Формат(ВыборкаРегистраторов.Период, "ДЛФ=D");
			НоваяСтрока.ЗатратыНаМодернизацию = ВыборкаРегистраторов.СуммаЗатратБУМодернизаций;
			
		КонецЦикла;
		
		КоличествоСтрок = ТаблицаИзмененияСтоимости.Количество(); 
		
		//++ НЕ УТКА
		СтруктураПоиска = Новый Структура("ОбъектЭксплуатации", ВыборкаОбъектов.Ссылка);
		ТаблицаРемонтов = ДанныеПечатнойФормы.ЗатратыНаРемонт.Скопировать(СтруктураПоиска);
		ТаблицаРемонтов.Сортировать("ДокРемонтаДата,ДокРемонтаНомер");
		Для каждого ДанныеРемонт Из ТаблицаРемонтов Цикл
			ДанныеРемонт.ДокРемонтаНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеРемонт.ДокРемонтаНомер);
		КонецЦикла;
		
		КоличествоСтрок = Макс(ТаблицаИзмененияСтоимости.Количество(), ТаблицаРемонтов.Количество(),1); 
		//-- НЕ УТКА
		
		Для СчетСтрок = 1 По КоличествоСтрок Цикл
			
			ПараметрыОбласти = Новый Структура(
			"Модернизация,ДокМодернизации,ДокМодернизацииДата,ДокМодернизацииНомер,ЗатратыНаМодернизацию,
			|Ремонт,ДокРемонта,ДокРемонтаНаименование,ДокРемонтаДата,ДокРемонтаНомер,ЗатратыНаРемонт");
			
			Если СчетСтрок <= ТаблицаИзмененияСтоимости.Количество() Тогда
				СтрокаТаблицы = ТаблицаИзмененияСтоимости.Получить(СчетСтрок - 1);
				ЗаполнитьЗначенияСвойств(ПараметрыОбласти, СтрокаТаблицы);
			КонецЕсли;
			
			//++ НЕ УТКА
			Если СчетСтрок <= ТаблицаРемонтов.Количество() Тогда
				СтрокаТаблицы = ТаблицаРемонтов.Получить(СчетСтрок - 1);
				ЗаполнитьЗначенияСвойств(ПараметрыОбласти, СтрокаТаблицы);
			КонецЕсли;
			//-- НЕ УТКА
			
			СтрокаРазделов5и6.Параметры.Заполнить(ПараметрыОбласти);
			
			ТабДок.Вывести(СтрокаРазделов5и6);
			
		КонецЦикла;
		
		ТабДок.Вывести(ШапкаРаздела7_1);
		ТаблицаДМ = ВыборкаОбъектов.ДрагоценныеМатериалы.Выгрузить();
		Если ИспользоватьУчетДМ И ТаблицаДМ.Количество() <> 0 Тогда
			Для Каждого Строка Из ТаблицаДМ Цикл
				СтрокиРаздела7_1.Параметры.Заполнить(Строка);
				ТабДок.Вывести(СтрокиРаздела7_1);
			КонецЦикла;
		Иначе
			Для к=0 По 6 Цикл // Вывод пустых строк для заполнения вручную
				ТабДок.Вывести(СтрокиРаздела7_1);
			КонецЦикла;
		КонецЕсли;
		ТабДок.Вывести(ШапкаРаздела7_2);
		ТабДок.Вывести(ПодвалСтраницы2);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ВыборкаОбъектов.Ссылка);
		
		Если НЕ ВыборкаОбъектов.СведенияАктуальны Тогда
			СведенияАктуальны = Ложь;
		КонецЕсли; 
		
	КонецЦикла;
	
	ВнеоборотныеАктивы.ДобавитьПредупреждениеЕслиСведенияНеАктуальны(СведенияАктуальны);
	
	Возврат ТабДок;
	
КонецФункции

Функция ДанныеПечатнойФормыОС6_2003(МассивОбъектов, ДатаСведений)

	СписокЗапросов = Новый Массив;
	
	//++ НЕ УТКА
	
	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ДатаСведений) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МестонахождениеОС.Организация КАК Организация
		|ПОМЕСТИТЬ МестонахождениеОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(
		|			&ДатаСведений, 
		|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И ОсновноеСредство В (&МассивОбъектов)) КАК МестонахождениеОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ
		|ПОМЕСТИТЬ ДатыПринятияКУчету
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|			&ДатаСведений,
		|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И (ОсновноеСредство, Организация) В
		|					(ВЫБРАТЬ
		|						МестонахождениеОС.ОсновноеСредство,
		|						МестонахождениеОС.Организация
		|					ИЗ
		|						МестонахождениеОС)) КАК ПервоначальныеСведенияОС
		|ГДЕ
		|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка) КАК ОсновноеСредство,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВводаВЭксплуатациюБУ
		|ПОМЕСТИТЬ ДатыПринятияКУчету
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		
	КонецЕсли; 
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказНаРемонт.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗаказыНаРемонт
	|ИЗ
	|	Документ.ЗаказНаРемонт КАК ЗаказНаРемонт
	|ГДЕ
	|	ЗаказНаРемонт.ОбъектЭксплуатации В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходовНаЗаказыНаРемонт
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.РасходыНаЗаказыНаРемонт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаРемонт.Ссылка КАК ДокРемонта,
	|	ЗаказНаРемонт.Дата КАК ДокРемонтаДата,
	|	ЗаказНаРемонт.Номер КАК ДокРемонтаНомер,
	|	ЗаказНаРемонт.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	ЗаказНаРемонт.ОбщийВидРемонта КАК Ремонт,
	|	&НаименованиеДокРемонта КАК ДокРемонтаНаименование,
	|	СУММА(ПрочиеРасходыОбороты.СуммаРеглПриход) КАК ЗатратыНаРемонт
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			,
	|			&ДатаСведений,
	|			День,
	|			СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						СтатьиРасходовНаЗаказыНаРемонт.Ссылка
	|					ИЗ
	|						СтатьиРасходовНаЗаказыНаРемонт)
	|				И АналитикаРасходов В
	|					(ВЫБРАТЬ
	|						ЗаказыНаРемонт.Ссылка
	|					ИЗ
	|						ЗаказыНаРемонт)) КАК ПрочиеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт КАК ЗаказНаРемонт
	|		ПО (ЗаказНаРемонт.Ссылка = ПрочиеРасходыОбороты.АналитикаРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПринятияКУчету КАК ДатыПринятияКУчету
	|		ПО (ЗаказНаРемонт.ОбъектЭксплуатации = ПрочиеРасходыОбороты.АналитикаРасходов)
	|ГДЕ
	|	ПрочиеРасходыОбороты.Период >= ЕСТЬNULL(ДатыПринятияКУчету.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаРемонт.Ссылка,
	|	ЗаказНаРемонт.ОбъектЭксплуатации,
	|	ЗаказНаРемонт.ОбщийВидРемонта,
	|	ЗаказНаРемонт.Дата,
	|	ЗаказНаРемонт.Номер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПрочиеРасходыОбороты.СуммаРеглПриход) <> 0";
	СписокЗапросов.Добавить(ТекстЗапроса);
	//-- НЕ УТКА
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОС,
	|	ПервоначальныеСведенияОС.Организация КАК Организация,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ
	|ПОМЕСТИТЬ СведенияПоОрганизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|			&ДатаСведений, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И ОсновноеСредство В (&МассивОбъектов)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеСредства.Ссылка КАК Ссылка,
	|	ОсновныеСредства.Код КАК Код,
	|	ОсновныеСредства.Наименование КАК Наименование,
	|	ОсновныеСредства.ДатаВыпуска КАК ДатаВыпуска,
	|	ОсновныеСредства.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОсновныеСредства.Изготовитель КАК Изготовитель,
	|	ОсновныеСредства.НаименованиеПолное КАК НаименованиеПолное,
	|	ОсновныеСредства.НомерПаспорта КАК НомерПаспорта,
	|	ЕСТЬNULL(СведенияПоОрганизации.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	СведенияПоОрганизации.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ,
	|	НЕ ОсновныеСредства.Ссылка В (&ОбъектыДляКоторыхСведенияНеАктуальны) КАК СведенияАктуальны,
	|	ОсновныеСредства.ДрагоценныеМатериалы.(
	|		ДрагоценныйМатериал КАК ДрагоценныйМатериал,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК ДрагоценныеМатериалы
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПоОрганизации КАК СведенияПоОрганизации
	|		ПО ОсновныеСредства.Ссылка = СведенияПоОрганизации.ОС
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&МассивОбъектов)
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переоценка.Дата КАК ДатаПереоценки,
	|	ПереоценкаТЧ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереоценкаТЧ.Стоимость КАК ВосстановительнаяСтоимостьПереоценки
	|ИЗ
	|	СведенияПоОрганизации КАК СведенияПоОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СведенияПоОрганизации.ОС = СобытияОСОрганизаций.ОсновноеСредство
	|			И СведенияПоОрганизации.Организация = СобытияОСОрганизаций.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС.ОС КАК ПереоценкаТЧ
	|		ПО (СобытияОСОрганизаций.Регистратор = ПереоценкаТЧ.Ссылка)
	|			И (СобытияОСОрганизаций.ОсновноеСредство = ПереоценкаТЧ.ОсновноеСредство)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС КАК Переоценка
	|		ПО (СобытияОСОрганизаций.Регистратор = Переоценка.Ссылка)
	|ГДЕ
	|	СобытияОСОрганизаций.Событие.ВидСобытияОС = &ВидСобытияПереоценки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Переоценка.Дата КАК ДатаПереоценки,
	|	ПереоценкаТЧ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереоценкаТЧ.СтоимостьБУ КАК ВосстановительнаяСтоимостьПереоценки
	|ИЗ
	|	СведенияПоОрганизации КАК СведенияПоОрганизации
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СобытияОСОрганизаций.ОсновноеСредство = СведенияПоОрганизации.ОС
	|			И СобытияОСОрганизаций.Период >= СведенияПоОрганизации.ДатаВводаВЭксплуатациюБУ
	|			И СобытияОСОрганизаций.Регистратор ССЫЛКА Документ.ПереоценкаОС2_4
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС2_4.ОС КАК ПереоценкаТЧ
	|		ПО (СобытияОСОрганизаций.Регистратор = ПереоценкаТЧ.Ссылка)
	|			И (СобытияОСОрганизаций.ОсновноеСредство = ПереоценкаТЧ.ОсновноеСредство)
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС2_4 КАК Переоценка
	|		ПО (СобытияОСОрганизаций.Регистратор = Переоценка.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДатаПереоценки";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВидСобытияПереоценки", Перечисления.ВидыСобытийОС.Переоценка);
	Запрос.УстановитьПараметр("НаименованиеДокРемонта", НСтр("ru = 'Заказ на ремонт';
															|en = 'R&M order'"));
	
	ОбъектыДляКоторыхСведенияНеАктуальны = ОтложенноеФормированиеДвиженийВНА.ОбъектыДляКоторыхДвиженияНеАктуальны(МассивОбъектов);
	Запрос.УстановитьПараметр("ОбъектыДляКоторыхСведенияНеАктуальны", ОбъектыДляКоторыхСведенияНеАктуальны);
	
	Пакет = Запрос.ВыполнитьПакет();

	ДанныеПечатнойФормы = Новый Структура;
	ДанныеПечатнойФормы.Вставить("ПоОбъектам", Пакет[Пакет.ВГраница()-1]);
	ДанныеПечатнойФормы.Вставить("ПоПереоценкам", Пакет[Пакет.ВГраница()]);
	//++ НЕ УТКА
	ДанныеПечатнойФормы.Вставить("ЗатратыНаРемонт", Пакет[Пакет.ВГраница()-3].Выгрузить());
	ДанныеПечатнойФормы.ЗатратыНаРемонт.Индексы.Добавить("ОбъектЭксплуатации");
	//-- НЕ УТКА
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Функция ТекстЗапросаТекущиеСведения(ДатаСведений)

	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПорядокУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(СчетаУчетаСтоимости.СчетУчета, ПорядокУчетаОС.СчетУчета) КАК СчетУчета,
	|	ЕСТЬNULL(СчетаУчетаАмортизации.СчетУчета, ПорядокУчетаОС.СчетНачисленияАмортизации) КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СчетаЗабалансовогоУчета.СчетУчета, ПорядокУчетаОС.СчетУчета) КАК СчетЗабалансовогоУчета
	|ПОМЕСТИТЬ втСчетаУчета
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&ДатаСведений,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПорядокУчетаОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаСтоимости
	|		ПО СчетаУчетаСтоимости.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА)
	|			И СчетаУчетаСтоимости.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И СчетаУчетаСтоимости.АналитикаУчета = ПорядокУчетаОС.ГруппаФинансовогоУчета
	|			И СчетаУчетаСтоимости.МестоУчета = НЕОПРЕДЕЛЕНО
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаАмортизации
	|		ПО СчетаУчетаАмортизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА)
	|			И СчетаУчетаАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И СчетаУчетаАмортизации.АналитикаУчета = ПорядокУчетаОС.ГруппаФинансовогоУчета
	|			И СчетаУчетаАмортизации.МестоУчета = НЕОПРЕДЕЛЕНО
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаЗабалансовогоУчета
	|		ПО СчетаУчетаАмортизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ЗабалансовыйУчетВНА)
	|			И СчетаУчетаАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И СчетаУчетаАмортизации.АналитикаУчета = ПорядокУчетаОС.ГруппаФинансовогоУчета
	|			И СчетаУчетаАмортизации.МестоУчета = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПервоначальныеСведения.МетодНачисленияАмортизацииБУ КАК СпособНачисленияАмортизации,
	|	ТаблицаПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство.КодПоОКОФ.Код КАК КодПоОКОФ,
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|	ТаблицаПервоначальныеСведения.Контрагент КАК Арендодатель,
	|	ТаблицаПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ,
	|	ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ КАК ДокументВводаВЭксплуатациюБУ,
	|	ТаблицаПервоначальныеСведения.ДокументСнятияСУчетаБУ КАК ДокументСнятияСУчетаБУ
	|ПОМЕСТИТЬ ТаблицаПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|			&ДатаСведений,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаПервоначальныеСведения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПараметрыАмортизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПараметрыАмортизации.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентАмортизацииБУ КАК КоэффициентАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ТаблицаПараметрыАмортизации.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	ТаблицаПараметрыАмортизации.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
	|			&ДатаСведений,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаПараметрыАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМестонахождение.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаМестонахождение.Местонахождение КАК Местонахождение,
	|	ТаблицаМестонахождение.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ ТаблицаМестонахождение
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&ДатаСведений,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаМестонахождение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.СостояниеБУ КАК СостояниеБУ,
	|	ПорядокУчетаОСБУ.СостояниеНУ КАК СостояниеНУ,
	|	ПорядокУчетаОСБУ.АмортизационнаяГруппа.Порядок + 1 КАК АмортизационнаяГруппа
	|ПОМЕСТИТЬ ТаблицаПорядокУчетаОСБУ
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&ДатаСведений,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПорядокУчетаОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ДатаСведений) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСтоимость.ОсновноеСредство КАК ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
		|	ТаблицаСтоимость.СтоимостьРеглОстаток + ТаблицаСтоимость.СтоимостьЦФОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаСтоимость
		|ИЗ
		|	РегистрНакопления.СтоимостьОС.Остатки(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаСтоимость
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАмортизация.ОсновноеСредство КАК ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО КАК СчетНачисленияАмортизации,
		|	-ТаблицаАмортизация.АмортизацияРеглОстаток - ТаблицаАмортизация.АмортизацияЦФОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаАмортизация
		|ИЗ
		|	РегистрНакопления.АмортизацияОС.Остатки(
		|			&КонецМесяцаГраница,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаАмортизация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиСчетУчета.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиСчетУчета.Счет КАК СчетУчета,
		|	ХозрасчетныйОстаткиСчетУчета.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаСтоимость
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет В
		|				(ВЫБРАТЬ
		|					втСчетаУчета.СчетУчета
		|				ИЗ
		|					втСчетаУчета КАК втСчетаУчета),
		|			&СубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСчетУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиСчетАмортизации.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиСчетАмортизации.Счет КАК СчетНачисленияАмортизации,
		|	-ХозрасчетныйОстаткиСчетАмортизации.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет В
		|				(ВЫБРАТЬ
		|					втСчетаУчета.СчетНачисленияАмортизации
		|				ИЗ
		|					втСчетаУчета КАК втСчетаУчета),
		|			&СубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСчетАмортизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	СчетНачисленияАмортизации";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПараметрыАмортизации.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ТаблицаПараметрыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ТаблицаПараметрыАмортизации.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаПервоначальныеСведения.Арендодатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ТаблицаСчетаБухгалтерскогоУчета.СчетЗабалансовогоУчета
	|		ИНАЧЕ ТаблицаСчетаБухгалтерскогоУчета.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаСчетаБухгалтерскогоУчета.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ТаблицаМестонахождение.Местонахождение КАК Местонахождение,
	|	ТаблицаМестонахождение.МОЛ КАК МОЛ,
	|	ТаблицаМестонахождение.Местонахождение.Наименование КАК МестонахождениеНаименование,
	|	ТаблицаПервоначальныеСведения.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ВЫБОР
	|		КОГДА ТаблицаПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПервоначальныеСведения.ПервоначальнаяСтоимость 
	|	КОНЕЦ КАК ПервоначальнаяСтоимость,
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаПервоначальныеСведения.ГруппаОС КАК ГруппаОС,
	|	ТаблицаПервоначальныеСведения.КодПоОКОФ КАК КодПоОКОФ,
	|	ТаблицаПервоначальныеСведения.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВводОстатков22.НазваниеДокументаПринятияКУчету, """") <> """"
	|			ТОГДА ВводОстатков22.НазваниеДокументаПринятияКУчету
	|		КОГДА ЕСТЬNULL(ВводОстатков24.НазваниеДокументаПринятияКУчету, """") <> """"
	|			ТОГДА ВводОстатков24.НазваниеДокументаПринятияКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ПринятиеКУчетуОС)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ПринятиеКУчетуОС2_4)
	|			ТОГДА ""Принятие к учету ОС""
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ПринятиеКУчетуУзловКомпонентовАмортизации)
	|			ТОГДА ""Принятие к учету узлов и компонентов амортизации""
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|			ТОГДА ""Ввод остатков ОС""
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ОбъединениеОС)
	|			ТОГДА ""Объединение ОС""
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.РазукомплектацияОС)
	|			ТОГДА ""Разукомплектация ОС""
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ПоступлениеАрендованныхОС)
	|			ТОГДА ""Поступление арендованных ОС""
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ) = ТИП(Документ.ЗаключениеДоговораАренды)
	|			ТОГДА ""Заключение договора аренды""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НазваниеДокумента,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВводОстатков22.НомерДокументаПринятияКУчету, """") <> """"
	|			ТОГДА ВводОстатков22.НомерДокументаПринятияКУчету
	|		КОГДА ЕСТЬNULL(ВводОстатков24.НомерДокументаПринятияКУчету, """") <> """"
	|			ТОГДА ВводОстатков24.НомерДокументаПринятияКУчету
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ.Номер, """")
	|	КОНЕЦ КАК ДокументПринятияНомер,
	|	
	|	ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ КАК ДокументПринятия,
	|	ТаблицаПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ КАК ДатаПринятия,
	|	ТаблицаПервоначальныеСведения.ДокументСнятияСУчетаБУ.Дата КАК ДатаСписания,
	|	
	|	ЕСТЬNULL(ВводОстатков22.ДатаМодернизации, ЕСТЬNULL(ВводОстатков24.ДатаИзмененияПараметровБУ, ДАТАВРЕМЯ(1,1,1))) КАК ДатаПоследнейМодернизации,
	|
	|	ТаблицаПорядокУчетаОСБУ.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ВЫБОР
	|		КОГДА ТаблицаПорядокУчетаОСБУ.СостояниеБУ В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))
	|				ИЛИ ТаблицаПорядокУчетаОСБУ.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|			ТОГДА ЕСТЬNULL(ТаблицаСтоимость.СуммаОстаток, 0) - ЕСТЬNULL(ТаблицаАмортизация.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстаточнаяСтоимость,
	|	ЕСТЬNULL(ТаблицаАмортизация.СуммаОстаток, 0) КАК СуммаНачисленнойАмортизации
	|ИЗ
	|	ТаблицаПервоначальныеСведения КАК ТаблицаПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов.ОС КАК ВводОстатков22
	|		ПО ВводОстатков22.Ссылка = ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ
	|			И ВводОстатков22.ОсновноеСредство = ТаблицаПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ВводОстатков24
	|		ПО ВводОстатков24.Ссылка = ТаблицаПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ
	|			И ВводОстатков24.ОсновноеСредство = ТаблицаПервоначальныеСведения.ОсновноеСредство
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметрыАмортизации КАК ТаблицаПараметрыАмортизации
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаУчета КАК ТаблицаСчетаБухгалтерскогоУчета
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаСчетаБухгалтерскогоУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМестонахождение КАК ТаблицаМестонахождение
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаМестонахождение.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПорядокУчетаОСБУ КАК ТаблицаПорядокУчетаОСБУ
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаПорядокУчетаОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтоимость КАК ТаблицаСтоимость
	|		ПО (ТаблицаСчетаБухгалтерскогоУчета.ОсновноеСредство = ТаблицаСтоимость.ОсновноеСредство)
	|			И (ТаблицаСчетаБухгалтерскогоУчета.СчетУчета = ТаблицаСтоимость.СчетУчета
	|				ИЛИ ТаблицаСтоимость.СчетУчета = НЕОПРЕДЕЛЕНО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизация КАК ТаблицаАмортизация
	|		ПО (ТаблицаСчетаБухгалтерскогоУчета.ОсновноеСредство = ТаблицаАмортизация.ОсновноеСредство)
	|			И (ТаблицаСчетаБухгалтерскогоУчета.СчетНачисленияАмортизации = ТаблицаАмортизация.СчетНачисленияАмортизации
	|				ИЛИ ТаблицаАмортизация.СчетНачисленияАмортизации = НЕОПРЕДЕЛЕНО)";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыборкаПриемкаПеремещениеВыбытие(ДатаСведений, ВыборкаОбъектов)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ДатаСведений);
	Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
	Запрос.УстановитьПараметр("ДатаВводаВЭксплуатациюБУ", ВыборкаОбъектов.ДатаВводаВЭксплуатациюБУ);
	Запрос.УстановитьПараметр("ТекстПринятиеКУчету",      НСтр("ru = 'Принятие к учету';
																|en = 'Recognition'"));
	Запрос.УстановитьПараметр("ТекстПеремещение",         НСтр("ru = 'Внутреннее перемещение';
																|en = 'Internal transfer'"));
	Запрос.УстановитьПараметр("ТекстСписание",            НСтр("ru = 'Списание';
																|en = 'Write-off'"));
	Запрос.УстановитьПараметр("ТекстПодготовкаКПередаче", НСтр("ru = 'Подготовка к передаче';
																|en = 'Transfer preparation'"));
	Запрос.УстановитьПараметр("ТекстРазукомплектацияОС",  НСтр("ru = 'Разукомплектация';
																|en = 'Disassembling'"));
	Запрос.УстановитьПараметр("ТекстВыбытие",             НСтр("ru = 'Выбытие';
																|en = 'Outflow'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СобытияОС.Ссылка
	|ПОМЕСТИТЬ втСписокСобытий
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|ГДЕ
	|	СобытияОС.ВидСобытияОС В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВнутреннееПеремещение), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияОСОрганизаций.Организация КАК Организация,
	|	СобытияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СобытияОСОрганизаций.НазваниеДокумента КАК НазваниеДокумента,
	|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
	|	СобытияОСОрганизаций.Период КАК Период,
	|	СобытияОСОрганизаций.Период КАК ПериодОстатков,
	|	ВЫБОР
	|		КОГДА СобытияОСОрганизаций.Событие <> ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка)
	|			ТОГДА СобытияОСОрганизаций.Событие
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС2_4)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуУзловКомпонентовАмортизации)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И НЕ РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА &ТекстРазукомплектацияОС
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС)
	|			ТОГДА &ТекстПеремещение
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС2_4)
	|			ТОГДА &ТекстПеремещение
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС)
	|			ТОГДА &ТекстСписание
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
	|			ТОГДА &ТекстСписание
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС)
	|			ТОГДА &ТекстПодготовкаКПередаче
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС2_4)
	|			ТОГДА &ТекстПодготовкаКПередаче
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ОбъединениеОС)
	|				И НЕ ОбъединениеОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ОбъединениеОС)
	|				И ОбъединениеОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА &ТекстСписание
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПоступлениеАрендованныхОС)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВыбытиеАрендованныхОС)
	|			ТОГДА &ТекстВыбытие
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА СобытияОСОрганизаций.Событие <> ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка)
	|			ТОГДА СобытияОСОрганизаций.Событие.ВидСобытияОС
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуУзловКомпонентовАмортизации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВнутреннееПеремещение)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВнутреннееПеремещение)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ОбъединениеОС)
	|				И НЕ ОбъединениеОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Реконструкция)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ОбъединениеОС)
	|				И ОбъединениеОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПоступлениеАрендованныхОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВыбытиеАрендованныхОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание)
	|	КОНЕЦ КАК ВидСобытияОС,
	|	СобытияОСОрганизаций.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ СобытияОС
	|ИЗ
	|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК РазукомплектацияОС
	|		ПО (РазукомплектацияОС.Ссылка = СобытияОСОрганизаций.Регистратор)
	|			И (РазукомплектацияОС.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеОС КАК СписаниеОС
	|		ПО (СписаниеОС.Ссылка = СобытияОСОрганизаций.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеОС2_4 КАК СписаниеОС24
	|		ПО (СписаниеОС24.Ссылка = СобытияОСОрганизаций.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбъединениеОС КАК ОбъединениеОС
	|		ПО (ОбъединениеОС.Ссылка = СобытияОСОрганизаций.Регистратор)
	|			И (ОбъединениеОС.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство)
	|ГДЕ
	|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|	И СобытияОСОрганизаций.Период < &Период
	|	И СобытияОСОрганизаций.Период >= &ДатаВводаВЭксплуатациюБУ
	|	И (СобытияОСОрганизаций.Событие В
	|				(ВЫБРАТЬ
	|					СобытияОС.Ссылка
	|				ИЗ
	|					втСписокСобытий КАК СобытияОС)
	|			ИЛИ (ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) В (
	|						ТИП(Документ.ПринятиеКУчетуОС), 
	|						ТИП(Документ.ПринятиеКУчетуОС2_4), 
	|						ТИП(Документ.ПринятиеКУчетуУзловКомпонентовАмортизации), 
	|						ТИП(Документ.РазукомплектацияОС), 
	|						ТИП(Документ.ВводОстатковВнеоборотныхАктивов), 
	|						ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4), 
	|						ТИП(Документ.ПеремещениеОС), 
	|						ТИП(Документ.ПеремещениеОС2_4), 
	|						ТИП(Документ.ПодготовкаКПередачеОС), 
	|						ТИП(Документ.ПодготовкаКПередачеОС2_4),
	|						ТИП(Документ.ПоступлениеАрендованныхОС),
	|						ТИП(Документ.ВыбытиеАрендованныхОС))
	|				ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС)
	|					И НЕ СписаниеОС.ЧастичнаяЛиквидация
	|				ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
	|					И СписаниеОС24.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|				ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|					И РазукомплектацияОС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазукомплектацияОСПолная)
	|				ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ОбъединениеОС)
	|					И (ОбъединениеОС.ОсновноеСредство ЕСТЬ NULL
	|						ИЛИ ОбъединениеОС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОбъединениеОС))))";
	
	Запрос.Выполнить();
	
	СписокЗапросов = Новый Массив;
	
	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ДатаСведений) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОС.Регистратор КАК Ссылка,
		|	ЕСТЬNULL(ВводОстатков.Дата, ЕСТЬNULL(ВводОстатков2_4.Дата, СобытияОС.Период)) КАК Дата,
		|	СобытияОС.Организация КАК Организация,
		|	СобытияОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втОбъектыДокументов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов КАК ВводОстатков
		|		ПО ВводОстатков.Ссылка = СобытияОС.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ВводОстатков2_4
		|		ПО ВводОстатков2_4.Ссылка = СобытияОС.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СобытияОС.Регистратор КАК Регистратор
		|ИЗ
		|	СобытияОС КАК СобытияОС";
		
		Результат = Запрос.Выполнить();
		
		ВнеоборотныеАктивыЛокализация.ПолучитьСведенияОбОсновныхСредствахВДокументах(
			Запрос.МенеджерВременныхТаблиц, 
			Результат.Выгрузить().ВыгрузитьКолонку("Регистратор"));
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) КАК НазваниеДокумента,
		|	СобытияОС.НомерДокумента КАК НомерДокумента,
		|	СобытияОС.Период КАК Период,
		|	СобытияОС.Событие КАК Событие,
		|	СобытияОС.Регистратор КАК Регистратор,
		|	втСведенияОбъектовДокументов.МОЛ КАК МОЛ,
		|	втСведенияОбъектовДокументов.Местонахождение КАК Местонахождение,
		|	втСведенияОбъектовДокументов.СтоимостьОборот КАК СтоимостьОборот,
		|	втСведенияОбъектовДокументов.АмортизацияОборот КАК АмортизацияОборот,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) В (
		|					ТИП(Документ.СписаниеОС),
		|					ТИП(Документ.СписаниеОС2_4),
		|					ТИП(Документ.РазукомплектацияОС),
		|					ТИП(Документ.ОбъединениеОС))
		|			ТОГДА ЕСТЬNULL(втСведенияОбъектовДокументов.СтоимостьРасход, 0) - ЕСТЬNULL(втСведенияОбъектовДокументов.АмортизацияРасход, 0)
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС)
		|				ИЛИ ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС2_4)
		|			ТОГДА ЕСТЬNULL(втСведенияОбъектовДокументов.СтоимостьРасход, 0) - ЕСТЬNULL(втСведенияОбъектовДокументов.АмортизацияРасход, 0)
		|		ИНАЧЕ ЕСТЬNULL(втСведенияОбъектовДокументов.ОстаточнаяСтоимость, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимость
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОбъектовДокументов КАК втСведенияОбъектовДокументов
		|		ПО СобытияОС.Регистратор = втСведенияОбъектовДокументов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	НомерДокумента";

		СписокЗапросов.Добавить(ТекстЗапроса);
		
	Иначе	
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МестонахождениеОС.Период КАК Период,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Местонахождение КАК Местонахождение
		|ПОМЕСТИТЬ МестонахождениеОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОС КАК МестонахождениеОС
		|ГДЕ
		|	МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
		|	И МестонахождениеОС.Организация = &Организация
		|	И МестонахождениеОС.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.Период КАК Период,
		|	МАКСИМУМ(МестонахождениеОС.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ МестонахождениеОССрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
		|		ПО СобытияОС.Период >= МестонахождениеОС.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОССрезПоследнихПериодов.Период КАК Период,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Местонахождение КАК Местонахождение
		|ПОМЕСТИТЬ МестонахождениеОССрезПоследних
		|ИЗ
		|	МестонахождениеОССрезПоследнихПериодов КАК МестонахождениеОССрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
		|		ПО МестонахождениеОССрезПоследнихПериодов.ПоследнийПериод = МестонахождениеОС.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПорядокУчетаОС.Период КАК Период,
		|	ЕСТЬNULL(СчетаУчетаСтоимости.СчетУчета, ПорядокУчетаОС.СчетУчета) КАК СчетУчета,
		|	ЕСТЬNULL(СчетаУчетаАмортизации.СчетУчета, ПорядокУчетаОС.СчетНачисленияАмортизации) КАК СчетНачисленияАмортизации
		|ПОМЕСТИТЬ ПорядокУчетаОС
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС КАК ПорядокУчетаОС
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаСтоимости
		|		ПО СчетаУчетаСтоимости.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА)
		|			И СчетаУчетаСтоимости.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			И СчетаУчетаСтоимости.АналитикаУчета = ПорядокУчетаОС.ГруппаФинансовогоУчета
		|			И СчетаУчетаСтоимости.МестоУчета = НЕОПРЕДЕЛЕНО
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаАмортизации
		|		ПО СчетаУчетаАмортизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА)
		|			И СчетаУчетаАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			И СчетаУчетаАмортизации.АналитикаУчета = ПорядокУчетаОС.ГруппаФинансовогоУчета
		|			И СчетаУчетаАмортизации.МестоУчета = НЕОПРЕДЕЛЕНО
		|ГДЕ
		|	ПорядокУчетаОС.ОсновноеСредство = &ОсновноеСредство
		|	И ПорядокУчетаОС.Организация = &Организация
		|	И ПорядокУчетаОС.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.ПериодОстатков КАК ПериодОстатков,
		|	МАКСИМУМ(ПорядокУчетаОС.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ ПорядокУчетаОССрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокУчетаОС КАК ПорядокУчетаОС
		|		ПО СобытияОС.ПериодОстатков >= ПорядокУчетаОС.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.ПериодОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПорядокУчетаОССрезПоследнихПериодов.ПериодОстатков КАК ПериодОстатков,
		|	ПорядокУчетаОС.СчетУчета КАК СчетУчета,
		|	ПорядокУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
		|ПОМЕСТИТЬ ПорядокУчетаОССрезПоследних
		|ИЗ
		|	ПорядокУчетаОССрезПоследнихПериодов КАК ПорядокУчетаОССрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокУчетаОС КАК ПорядокУчетаОС
		|		ПО ПорядокУчетаОССрезПоследнихПериодов.ПоследнийПериод = ПорядокУчетаОС.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			,
		|			&Период,
		|			Регистратор,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПорядокУчетаОССрезПоследних.СчетУчета
		|				ИЗ
		|					ПорядокУчетаОССрезПоследних
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПорядокУчетаОССрезПоследних.СчетНачисленияАмортизации
		|				ИЗ
		|					ПорядокУчетаОССрезПоследних),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	НЕ ХозрасчетныйОстаткиИОбороты.Регистратор = НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.ПериодОстатков КАК ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	МАКСИМУМ(ХозрасчетныйОстаткиИОбороты.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СобытияОС.ПериодОстатков >= ХозрасчетныйОстаткиИОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.ПериодОстатков КАК ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОборотыСрезПоследних
		|ИЗ
		|	ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов КАК ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК ХозрасчетныйОстаткиИОбороты
		|		ПО ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.ПоследнийПериод = ХозрасчетныйОстаткиИОбороты.Период
		|			И ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.Счет = ХозрасчетныйОстаткиИОбороты.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) КАК НазваниеДокумента,
		|	СобытияОС.НомерДокумента КАК НомерДокумента,
		|	СобытияОС.Период КАК Период,
		|	СобытияОС.Событие КАК Событие,
		|	СобытияОС.Регистратор КАК Регистратор,
		|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ,
		|	МестонахождениеОССрезПоследних.Местонахождение КАК Местонахождение,
		|	СтоимостьОС.СуммаОборотКт КАК СтоимостьОборот,
		|	АмортизацияОС.СуммаОборотДт КАК АмортизацияОборот,
		|	ВЫБОР
		|		КОГДА СобытияОС.ВидСобытияОС В (ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача))
		|			ТОГДА ЕСТЬNULL(СтоимостьОС.СуммаОборотКт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаОборотДт, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОС.СуммаКонечныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаКонечныйОстатокКт, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимость
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОССрезПоследних КАК МестонахождениеОССрезПоследних
		|		ПО СобытияОС.Период = МестонахождениеОССрезПоследних.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокУчетаОССрезПоследних КАК ПорядокУчетаОССрезПоследних
		|		ПО СобытияОС.ПериодОстатков = ПорядокУчетаОССрезПоследних.ПериодОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОборотыСрезПоследних КАК СтоимостьОС
		|		ПО (ПорядокУчетаОССрезПоследних.ПериодОстатков = СтоимостьОС.ПериодОстатков)
		|			И (ПорядокУчетаОССрезПоследних.СчетУчета = СтоимостьОС.Счет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОборотыСрезПоследних КАК АмортизацияОС
		|		ПО (ПорядокУчетаОССрезПоследних.ПериодОстатков = АмортизацияОС.ПериодОстатков)
		|			И (ПорядокУчетаОССрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет)";

		СписокЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли; 
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;

КонецФункции

//-- Локализация

#КонецОбласти

#Область ФормаЭлемента

Процедура ПрочитатьПериодическиеРеквизиты(Форма) Экспорт

	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОСБУ.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ПорядокУчетаОСБУ.НедвижимоеИмущество КАК НедвижимоеИмущество
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПорядокУчетаОСБУ
	|		ПО (ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация)
	|			И (ПорядокУчетаОСБУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Форма.АмортизационнаяГруппа = Выборка.АмортизационнаяГруппа;
		ИсторияИзменений = Справочники.ОбъектыЭксплуатации.ИсторияИзмененияРеквизита(Объект.Ссылка, "АмортизационнаяГруппа");
		Элементы.АмортизационнаяГруппаИстория.Видимость = (ИсторияИзменений.Количество() <> 0);
			
		Форма.НедвижимоеИмущество = Выборка.НедвижимоеИмущество;
		ИсторияИзменений = Справочники.ОбъектыЭксплуатации.ИсторияИзмененияРеквизита(Объект.Ссылка, "НедвижимоеИмущество");
		Элементы.НедвижимоеИмуществоИстория.Видимость = (ИсторияИзменений.Количество() <> 0);
			
	Иначе
		
		Форма.АмортизационнаяГруппа = Справочники.НаправленияДеятельности.ПустаяСсылка();
		Элементы.АмортизационнаяГруппаИстория.Видимость = Ложь;
		
		Форма.НедвижимоеИмущество = Ложь;
		Элементы.НедвижимоеИмуществоИстория.Видимость = Ложь;
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры
 
//++ Локализация

Процедура КодОКОФПриИзменении(Форма)

	ЗаполнитьПодсказкуКодОКОФ(Форма);

КонецПроцедуры

Процедура ОбработатьВыборКодаПоОКОФ(Форма, ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	СтарыйОКОФ = Объект.КодПоОКОФ;
	
	КодПоОКОФ = ВыбранноеЗначение.ОКОФ;
	
	Объект.КодПоОКОФ = КодПоОКОФ;
	
	Форма.Модифицированность =
		Форма.Модифицированность
		Или СтарыйОКОФ <> КодПоОКОФ;
		
	ЗаполнитьПодсказкуКодОКОФ(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьПодсказкуКодОКОФ(Форма)
	
	Объект = Форма.Объект;

	ТекстПодсказки = НСтр("ru = 'Код по классификатору основных фондов';
							|en = 'Code by All-Russian Classifier of Fixed Assets'");
	
	Если ЗначениеЗаполнено(Объект.КодПоОКОФ) Тогда
		ТекстПодсказки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодПоОКОФ, "Наименование");
	КонецЕсли; 
	
	Форма.Элементы.КодПоОКОФ.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

Процедура ДрагоценныеМатериалыДрагоценныйМатериалПриИзменении(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТекущаяСтрока = Элементы.ДрагоценныеМатериалы.ТекущаяСтрока;
	ТекущиеДанные = Объект.ДрагоценныеМатериалы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДрагоценныйМатериал) Тогда
		ТекущиеДанные.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДрагоценныйМатериал, "ЕдиницаИзмерения");
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли; 
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область ФормаИсторияИзменений

Процедура ПриСозданииНаСервере_ИсторияИзменений(Форма) Экспорт

	//++ Локализация
	
	Параметры = Форма.Параметры;
	
	Если Параметры.ИмяРеквизита = "АмортизационнаяГруппа" Тогда
		Форма.Заголовок = НСтр("ru = 'История изменения амортизационной группы';
								|en = 'Change history of depreciation group'");
	ИначеЕсли Параметры.ИмяРеквизита = "НедвижимоеИмущество" Тогда
		Форма.Заголовок = НСтр("ru = 'История изменения признака ""Недвижимое имущество""';
								|en = 'Change history of the ""Real estate"" flag'");
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область ФормаВыбора2_4

Процедура ПриСозданииНаСервере_ФормаВыбора2_4(Форма) Экспорт

	//++ Локализация

	Параметры = Форма.Параметры;
	
	ОтборСписка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Отбор", Новый Структура);
	
	Если ОтборСписка.Свойство("ЗарегистрированоВРеестреСистемыПлатон") Тогда
		
		Форма.Заголовок = НСтр("ru = 'Транспортные средства, зарегистрированные в системе ""Платон""';
								|en = 'Vehicles registered in Platon system'");

	ИначеЕсли Параметры.Свойство("ЕстьПараметрыНачисленияТранспортногоНалога") Тогда

		Форма.Заголовок = НСтр("ru = 'Зарегистрированные транспортные средства';
								|en = 'Registered vehicles'");

	ИначеЕсли Параметры.Свойство("ЕстьПараметрыНачисленияЗемельногоНалога") Тогда

		Форма.Заголовок = НСтр("ru = 'Зарегистрированные земельные участки';
								|en = 'Registered land plots'");

	ИначеЕсли ОтборСписка.Свойство("ВидНалога") Тогда

		ДатаСведений = ?(Параметры.Свойство("ДатаСведений"), Параметры.ДатаСведений, ТекущаяДатаСеанса());
		Форма.Заголовок = ЗаголовокФормыВыбораОСПоВидуНалога(ОтборСписка.ВидНалога, ДатаСведений);

	ИначеЕсли Параметры.Свойство("УчитыватьВВидеГрупповогоОС")
		И Параметры.УчитыватьВВидеГрупповогоОС Тогда
			
		Форма.Заголовок = НСтр("ru = 'Групповые основные средства';
								|en = 'Group fixed assets'");

	КонецЕсли;
	
	//-- Локализация

КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область Прочее

Функция АмортизационныеГруппыОС(СписокОС, Дата) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОС.Организация КАК Организация
	|ПОМЕСТИТЬ МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&Дата, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУчетаОСБУСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУСрезПоследних.АмортизационнаяГруппа КАК АмортизационнаяГруппа
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&Дата,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И (ОсновноеСредство, Организация) В
	|					(ВЫБРАТЬ
	|						МестонахождениеОС.ОсновноеСредство,
	|						МестонахождениеОС.Организация
	|					ИЗ
	|						МестонахождениеОС КАК МестонахождениеОС)) КАК ПорядокУчетаОСБУСрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОС", ?(ТипЗнч(СписокОС) = Тип("Массив"), СписокОС, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокОС)));
	Запрос.УстановитьПараметр("Дата", ?(Дата <> '000101010000', Дата, ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	АмортизационныеГруппыОС = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		АмортизационныеГруппыОС.Вставить(Выборка.ОсновноеСредство, Выборка.АмортизационнаяГруппа);
	КонецЦикла;

	Возврат АмортизационныеГруппыОС;
	
КонецФункции

Функция ЗаголовокФормыВыбораОСПоВидуНалога(ВидНалога, ДатаСведений) Экспорт

	Если ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		
		Если ДатаСведений >= '201901010000' Тогда
			Заголовок = НСтр("ru = 'Недвижимое имущество';
							|en = 'Real estate'");
		Иначе
			Заголовок = НСтр("ru = 'Основные средства, облагаемые налогом на имущество';
							|en = 'Fixed assets subject to property tax'");
		КонецЕсли;
		
	ИначеЕсли ВидНалога = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог Тогда
		Заголовок = НСтр("ru = 'Основные средства, облагаемые транспортным налогом';
						|en = 'Fixed assets subject to vehicle tax'");
	ИначеЕсли ВидНалога = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда
		Заголовок = НСтр("ru = 'Основные средства, облагаемые земельным налогом';
						|en = 'Fixed assets subject to land value tax'");
	Иначе
		Заголовок = НСтр("ru = 'Основные средства, облагаемые имущественными налогами';
						|en = 'Fixed assets subject to property tax'");
	КонецЕсли; 

	Возврат Заголовок;
	
КонецФункции

#КонецОбласти

//-- Локализация

#КонецОбласти
