///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйИнтерфейс

#Область ОбработчикиСобытийныхПодписок

Функция НужнаРегистрацияДанныхОбновленияЧерезКопию()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ОбновлениеЧерезКопиюПовтИсп.НужнаРегистрацияДанныхОбновленияЧерезКопию();
	
КонецФункции

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - ДокументОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  РежимЗаписи - РежимЗаписиДокумента - см. в синтакс-помощнике РежимЗаписиДокумента.
//  РежимПроведения - РежимПроведенияДокумента - см. в синтакс-помощнике РежимПроведенияДокумента.
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если НЕ НужнаРегистрацияДанныхОбновленияЧерезКопию() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента(
		ОбновлениеЧерезКопиюПовтИсп.ИмяПланаОбменаОбновления(), Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации
// объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - СправочникОбъект, ПланВидовХарактеристикОбъект - источник события, кроме типа ДокументОбъект.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ НужнаРегистрацияДанныхОбновленияЧерезКопию() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью(ОбновлениеЧерезКопиюПовтИсп.ИмяПланаОбменаОбновления(), Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - РегистрСведенийНаборЗаписей,
//                   РегистрНакопленияНаборЗаписей,
//                   РегистрБухгалтерииНаборЗаписей,
//                   РегистрРасчетаНаборЗаписей - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  Замещение      - Булево - признак замещения существующего набора записей.
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ НужнаРегистрацияДанныхОбновленияЧерезКопию() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра(
		ОбновлениеЧерезКопиюПовтИсп.ИмяПланаОбменаОбновления(), Источник, Отказ, Замещение);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" константы для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - КонстантаМенеджерЗначения - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюКонстанты(Источник, Отказ) Экспорт
	
	Если НЕ НужнаРегистрацияДанныхОбновленияЧерезКопию() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты(
		ОбновлениеЧерезКопиюПовтИсп.ИмяПланаОбменаОбновления(), Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - СправочникОбъект, ДокументОбъект, ПланВидовХарактеристикОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура МеханизмРегистрацииОбъектовПередУдалением(Источник, Отказ) Экспорт
	
	Если НЕ НужнаРегистрацияДанныхОбновленияЧерезКопию() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты(
		ОбновлениеЧерезКопиюПовтИсп.ИмяПланаОбменаОбновления(), Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Статистика

Функция ЗарегистрированныеОбъекты(УзелОчереди = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелОчереди", УзелОчереди);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбновлениеИнформационнойБазы.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбновлениеИнформационнойБазы КАК ОбновлениеИнформационнойБазы
	|{ГДЕ
	|	ОбновлениеИнформационнойБазы.Ссылка = &УзелОчереди}";

	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивУзлов = Результат.ВыгрузитьКолонку("Ссылка");
	СписокУзлов = Новый СписокЗначений;
	СписокУзлов.ЗагрузитьЗначения(МассивУзлов);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("СинонимКонфигурации");
	ТаблицаРезультата.Колонки.Добавить("ПолноеИмя");
	ТаблицаРезультата.Колонки.Добавить("ТипОбъекта");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("ТипМетаданных");
	ТаблицаРезультата.Колонки.Добавить("КоличествоОбъектов");
	ТаблицаРезультата.Колонки.Добавить("Очередь");
	ТаблицаРезультата.Колонки.Добавить("ОбработчикОбновления");
	ТаблицаРезультата.Колонки.Добавить("ВсегоОбъектов", Новый ОписаниеТипов("Число"));
	
	СоставПланаОбмена = Метаданные.ПланыОбмена.ОбновлениеИнформационнойБазы.Состав;
	СоответствиеПредставлений = Новый Соответствие;
	
	СинонимКонфигурации = Метаданные.Синоним;
	ТекстЗапроса = "";
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("СписокУзлов", СписокУзлов);
	Ограничение  = 0;
	Для Каждого ЭлементПланаОбмена Из СоставПланаОбмена Цикл
		ОбъектМетаданных = ЭлементПланаОбмена.Метаданные;
		Если Не ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		Представление    = ОбъектМетаданных.Представление();
		ПолноеИмя        = ОбъектМетаданных.ПолноеИмя();
		ПолноеИмяЧастями = СтрРазделить(ПолноеИмя, ".");
		
		// Преобразование из "РегистрРасчета._ДемоОсновныеНачисления.Перерасчет.ПерерасчетОсновныхНачислений.Изменения"
		// в "РегистрРасчета._ДемоОсновныеНачисления.ПерерасчетОсновныхНачислений.Изменения".
		Если ПолноеИмяЧастями[0] = "РегистрРасчета" И ПолноеИмяЧастями.Количество() = 4 И ПолноеИмяЧастями[2] = "Перерасчет" Тогда
			ПолноеИмяЧастями.Удалить(2); // удалить лишний "Перерасчет"
			ПолноеИмя = СтрСоединить(ПолноеИмяЧастями, ".");
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ") + "
			|ВЫБРАТЬ
			|	""" + ПредставлениеТипаМетаданных(ПолноеИмяЧастями[0]) + """ КАК ТипМетаданных,
			|	""" + ПолноеИмяЧастями[1] + """ КАК ТипОбъекта,
			|	""" + ПолноеИмя + """ КАК ПолноеИмя,
			|	Узел.Очередь КАК Очередь,
			|	КОЛИЧЕСТВО(*) КАК КоличествоОбъектов
			|ИЗ
			|	" + ПолноеИмя + ".Изменения
			|ГДЕ
			|	Узел В (&СписокУзлов)
			|СГРУППИРОВАТЬ ПО
			|	Узел
			|";
			
		Ограничение = Ограничение + 1;
		СоответствиеПредставлений.Вставить(ПолноеИмяЧастями[1], Представление);
		Если Ограничение = 200 Тогда
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Строка = ТаблицаРезультата.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				Строка.СинонимКонфигурации = СинонимКонфигурации;
				Строка.Представление = СоответствиеПредставлений[Строка.ТипОбъекта];
			КонецЦикла;
			Ограничение  = 0;
			ТекстЗапроса = "";
			СоответствиеПредставлений = Новый Соответствие;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстЗапроса <> "" Тогда
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Строка = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.СинонимКонфигурации = СинонимКонфигурации;
			Строка.Представление = СоответствиеПредставлений[Строка.ТипОбъекта];
		КонецЦикла;
	КонецЕсли;
	
	ДанныеПоОбработчикам = ОбработчикиОбновления();
	Для Каждого ДанныеПоОбработчику Из ДанныеПоОбработчикам Цикл
		
		ИмяОбработчика = ДанныеПоОбработчику.ИмяОбработчика;
		СтруктураОбновляемыхДанных = ДанныеПоОбработчику.ОбрабатываемыеДанные.Получить();
		
		Если ТипЗнч(СтруктураОбновляемыхДанных) <> Тип("Структура")
			ИЛИ НЕ СтруктураОбновляемыхДанных.Свойство("ДанныеОбработчика")
			ИЛИ ТипЗнч(СтруктураОбновляемыхДанных.ДанныеОбработчика) <> Тип("Соответствие") Тогда
			
			Продолжить;
			
		КонецЕсли;

		Для Каждого ДанныеПоОбъекту Из СтруктураОбновляемыхДанных.ДанныеОбработчика Цикл
			
			ПолноеИмяОбъекта = ДанныеПоОбъекту.Ключ;
			Очередь    = ДанныеПоОбъекту.Значение.Очередь;
			Количество = ДанныеПоОбъекту.Значение.Количество;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ПолноеИмя", ПолноеИмяОбъекта);
			ПараметрыОтбора.Вставить("Очередь", Очередь);
			
			Строки = ТаблицаРезультата.НайтиСтроки(ПараметрыОтбора);
			Для Каждого Строка Из Строки Цикл
				Если Не ЗначениеЗаполнено(Строка.ОбработчикОбновления) Тогда
					Строка.ОбработчикОбновления = ИмяОбработчика;
				Иначе
					Строка.ОбработчикОбновления = Строка.ОбработчикОбновления + "," + Символы.ПС + ИмяОбработчика;
				КонецЕсли;
				Строка.ВсегоОбъектов = Строка.ВсегоОбъектов + Количество;
			КонецЦикла;
			
			// Объект полностью обработан.
			Если Строки.Количество() = 0 Тогда
				Строка = ТаблицаРезультата.Добавить();
				ПолноеИмяЧастями = СтрРазделить(ПолноеИмяОбъекта, ".");
				
				Строка.СинонимКонфигурации = СинонимКонфигурации;
				Строка.ПолноеИмя     = ПолноеИмяОбъекта;
				Строка.ТипОбъекта    = ПолноеИмяЧастями[1];
				Строка.Представление = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта).Представление();
				Строка.ТипМетаданных = ПредставлениеТипаМетаданных(ПолноеИмяЧастями[0]);
				Строка.Очередь       = Очередь;
				Строка.ОбработчикОбновления = ИмяОбработчика;
				Строка.ВсегоОбъектов = Строка.ВсегоОбъектов + Количество;
				Строка.КоличествоОбъектов = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбработчикОбновления", Неопределено);
	РезультатПоиска = ТаблицаРезультата.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из РезультатПоиска Цикл
		ТаблицаРезультата.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПредставлениеТипаМетаданных(ТипМетаданных)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Константа", НСтр("ru = 'Константы';
											|en = 'Constants'"));
	Соответствие.Вставить("Справочник", НСтр("ru = 'Справочники';
											|en = 'Catalogs'"));
	Соответствие.Вставить("Документ", НСтр("ru = 'Документы';
											|en = 'Documents'"));
	Соответствие.Вставить("ПланВидовХарактеристик", НСтр("ru = 'Планы видов характеристик';
														|en = 'Charts of characteristic types'"));
	Соответствие.Вставить("ПланСчетов", НСтр("ru = 'Планы счетов';
											|en = 'Charts of accounts'"));
	Соответствие.Вставить("ПланВидовРасчета", НСтр("ru = 'Планы видов расчета';
													|en = 'Charts of calculation types'"));
	Соответствие.Вставить("РегистрСведений", НСтр("ru = 'Регистры сведений';
													|en = 'Information registers'"));
	Соответствие.Вставить("РегистрНакопления", НСтр("ru = 'Регистры накопления';
													|en = 'Accumulation registers'"));
	Соответствие.Вставить("РегистрБухгалтерии", НСтр("ru = 'Регистры бухгалтерии';
													|en = 'Accounting registers'"));
	Соответствие.Вставить("РегистрРасчета", НСтр("ru = 'Регистры расчета';
												|en = 'Calculation registers'"));
	Соответствие.Вставить("БизнесПроцесс", НСтр("ru = 'Бизнес процессы';
												|en = 'Business processes'"));
	Соответствие.Вставить("Задача", НСтр("ru = 'Задачи';
										|en = 'Tasks'"));
	
	Возврат Соответствие[ТипМетаданных];
	
КонецФункции

Функция ОбработчикиОбновления()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
	|	ОбработчикиОбновления.ОбрабатываемыеДанные КАК ОбрабатываемыеДанные
	|ИЗ
	|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
	|ГДЕ
	|	ОбработчикиОбновления.РежимВыполнения = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОбработчиков.Отложенно)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДинамикаПроцесса(Источник, Отказ) Экспорт
	
	ТекущееСостояние = Константы.ОбновлениеЧерезКопиюСостояние.Получить();
	Если (ТекущееСостояние <> Перечисления.СостоянияОбновлениеЧерезКопию.ЗагрузкаОбновлениеЧерезКопию) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗарегистрированоОбъектов = ЗарегистрированныеОбъекты(Источник);
	Если ЗарегистрированоОбъектов.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментЗаписи = ТекущаяДатаСеанса();
	
	НаборЗаписейРС = РегистрыСведений.ОбновлениеЧерезКопиюДинамикаПроцесса.СоздатьНаборЗаписей();
	НаборЗаписейРС.Отбор.Период.Установить(МоментЗаписи, Истина);
	НаборЗаписейРС.Отбор.Направление.Установить("+", Истина);
	НаборЗаписейРС.Прочитать();
	НаборЗаписейРС.Очистить();
	
	Для каждого СтрокаТаблицы Из ЗарегистрированоОбъектов Цикл
		
		ЗаписьНабора = НаборЗаписейРС.Добавить();
		ЗаписьНабора.Период = МоментЗаписи;
		ЗаписьНабора.Очередь = СтрокаТаблицы.Очередь;
		ЗаписьНабора.Направление = "+";
		ЗаписьНабора.ЗарегистрированоНаУзле = СтрокаТаблицы.ВсегоОбъектов;
		ЗаписьНабора.ОбновляемыйОбъект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(СтрокаТаблицы.ПолноеИмя);
		
	КонецЦикла;
	
	НаборЗаписейРС.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСтатистику(Отправитель, ИмяФайлаСообщения) Экспорт
	
	Если ТипЗнч(Отправитель) <> Тип("ПланОбменаСсылка.ОбновлениеЧерезКопию") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Константы.ОбновлениеЧерезКопиюСостояние.Получить() <> Перечисления.СостоянияОбновлениеЧерезКопию.ЗагрузкаОбновлениеЧерезКопию Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатАнализаДанныхКЗагрузке = ОбменДаннымиСервер.РезультатАнализаДанныхКЗагрузке(ИмяФайлаСообщения, Ложь, Ложь);
	КоличествоПолученныхОбъектов = РезультатАнализаДанныхКЗагрузке.КоличествоОбъектовКЗагрузке;
	
	Попытка
		
		МенеджерЗаписиРС = РегистрыСведений.ОбновлениеЧерезКопиюДинамикаПроцесса.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРС.Период = ТекущаяДатаСеанса();
		МенеджерЗаписиРС.Направление = "+";
		МенеджерЗаписиРС.КоличествоПолученныхОбъектов = КоличествоПолученныхОбъектов;
		МенеджерЗаписиРС.ОбновляемыйОбъект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.ОбновлениеЧерезКопию");
		МенеджерЗаписиРС.Записать(Истина);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ОбновлениеЧерезКопию.ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Функция ИмяСобытияЖР(Уточнение = "") Экспорт

	ИмяСобытия = НСтр("ru = 'Обновление через копию';
						|en = 'Update via copy'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если ПустаяСтрока(Уточнение) Тогда
		
		ИмяСобытия = СтрШаблон("%1.%2", ИмяСобытия, Уточнение);
		
	КонецЕсли;
	
	Возврат ИмяСобытия;
	
КонецФункции

Функция АктивныйУзелОбмена(ВерсияКорреспондента = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		
		ВерсияКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена.ОбновлениеЧерезКопию.ЭтотУзел(), "ВерсияКорреспондента");
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("УзелОбновленияЭтот", Неопределено);
	Результат.Вставить("УзелОбновленияКорреспондента", Неопределено);
	Результат.Вставить("УзелОбновленияКорреспондентаПервыйЗапуск", Неопределено);
	Результат.Вставить("УзелОбновленияСвободный", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсияКорреспондента", ВерсияКорреспондента);
	Запрос.УстановитьПараметр("ТекущаяВерсия", Метаданные.Версия);
	
	Запрос.Текст = 
	"
	|// Этот узел для идентификации ИБ
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбновлениеЧерезКопию.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбновлениеЧерезКопию КАК ОбновлениеЧерезКопию
	|ГДЕ
	|	НЕ ОбновлениеЧерезКопию.ПометкаУдаления
	|	И ОбновлениеЧерезКопию.ЭтотУзел = ИСТИНА
	|;
	|// Узел с заполненными версиями, обновление уже запущено
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбновлениеЧерезКопию.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбновлениеЧерезКопию КАК ОбновлениеЧерезКопию
	|ГДЕ
	|	НЕ ОбновлениеЧерезКопию.ПометкаУдаления
	|	И ОбновлениеЧерезКопию.Код = &ВерсияКорреспондента
	|	И ОбновлениеЧерезКопию.ВерсияКорреспондента = &ТекущаяВерсия
	|	И ОбновлениеЧерезКопию.ЭтотУзел <> ИСТИНА
	|;
	|// Узел подходящий для первого запуска в обновляемой копии
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбновлениеЧерезКопию.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбновлениеЧерезКопию КАК ОбновлениеЧерезКопию
	|ГДЕ
	|	НЕ ОбновлениеЧерезКопию.ПометкаУдаления
	|	И ОбновлениеЧерезКопию.Код = &ТекущаяВерсия
	|	И ОбновлениеЧерезКопию.ЭтотУзел <> ИСТИНА
	|;
	|// Узел от пред. обновления, который можно начать использовать в рабочей ИБ
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбновлениеЧерезКопию.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбновлениеЧерезКопию КАК ОбновлениеЧерезКопию
	|ГДЕ
	|	НЕ ОбновлениеЧерезКопию.ПометкаУдаления
	|	И ОбновлениеЧерезКопию.ЭтотУзел <> ИСТИНА";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОбновлениеЗапущенное = РезультатЗапроса[0].Выбрать();
	Если ВыборкаОбновлениеЗапущенное.Следующий() Тогда
		
		Результат.УзелОбновленияЭтот = ВыборкаОбновлениеЗапущенное.УзелОбмена;
		
	КонецЕсли;
	
	ВыборкаОбновлениеНовое = РезультатЗапроса[1].Выбрать();
	Если ВыборкаОбновлениеНовое.Следующий() Тогда
		
		Результат.УзелОбновленияКорреспондента = ВыборкаОбновлениеНовое.УзелОбмена;
		
	КонецЕсли;
	
	ВыборкаОбновлениеПервыйЗапуск = РезультатЗапроса[2].Выбрать();
	Если ВыборкаОбновлениеПервыйЗапуск.Следующий() Тогда
		
		Результат.УзелОбновленияКорреспондентаПервыйЗапуск = ВыборкаОбновлениеПервыйЗапуск.УзелОбмена;
		
	КонецЕсли;
	
	ВыборкаОбновлениеСвободный = РезультатЗапроса[3].Выбрать();
	Если ВыборкаОбновлениеСвободный.Следующий() Тогда
		
		Результат.УзелОбновленияСвободный = ВыборкаОбновлениеСвободный.УзелОбмена;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	Перем ЗначениеСвойства;
	
	СведенияХранилище = Константы.СведенияОБлокируемыхОбъектах.Получить();
	
	СведенияСтруктура = СведенияХранилище.Получить();
	Если ТипЗнч(СведенияСтруктура) = Тип("Структура") Тогда
		
		СведенияСтруктура.Свойство("ОтложенноеОбновлениеЗавершеноУспешно", ЗначениеСвойства);
		
	КонецЕсли;
	
	Возврат (ЗначениеСвойства = Истина);
	
КонецФункции

Функция ОпределитьВозможноеДействиеПриОбмене(ЭтотУзел, УзелОбновления) Экспорт
	
	ДействиеПриОбмене = Неопределено;
	Если ЭтотУзел.Код <> Метаданные.Версия Тогда
		
		Возврат ДействиеПриОбмене;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УзелОбновления) Тогда
		
		Возврат ДействиеПриОбмене;
		
	КонецЕсли;
	
	Если ПустаяСтрока(УзелОбновления.Код) Тогда
		
		Возврат ДействиеПриОбмене;
		
	КонецЕсли;
	
	ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	
	Если НЕ ЭтоНомерВерсии(ЭтотУзел.Код)
		ИЛИ НЕ ЭтоНомерВерсии(УзелОбновления.Код) Тогда
		
		Возврат ДействиеПриОбмене;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ЭтотУзел.Код, УзелОбновления.Код);
	Если Результат > 0 Тогда
		
		ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
		
	КонецЕсли;
		
	Возврат ДействиеПриОбмене;
	
КонецФункции

Функция ЭтоНомерВерсии(НомерСтрокой) Экспорт
	
	МассивСтрок = СтрРазделить(НомерСтрокой, ".");
	Возврат (МассивСтрок.Количество() = 4);
	
КонецФункции

Функция ИтерацииОбновления()
	
	ИмяОсновнойКонфигурации = Метаданные.Имя;
	ИтерацияОбновлениеОсновнойПодсистемы = Неопределено;
	
	ИтерацииОбновления = Новый Массив;
	ОписанияПодсистем  = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			
			Продолжить;
			
		КонецЕсли;
		Модуль = ОбщегоНазначения.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		
		ИтерацияОбновления = ОбновлениеИнформационнойБазыСлужебный.ИтерацияОбновления(ОписаниеПодсистемы.Имя, ОписаниеПодсистемы.Версия, 
			ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления(), ОписаниеПодсистемы.Имя = ИмяОсновнойКонфигурации);
		ИтерацияОбновления.ИмяОсновногоСерверногоМодуля = ОписаниеПодсистемы.ОсновнойСерверныйМодуль;
		ИтерацияОбновления.ОсновнойСерверныйМодуль = Модуль;
		ИтерацияОбновления.ПредыдущаяВерсия = ОбновлениеИнформационнойБазы.ВерсияИБ(ОписаниеПодсистемы.Имя);
		ИтерацииОбновления.Добавить(ИтерацияОбновления);
		
		Модуль.ПриДобавленииОбработчиковОбновления(ИтерацияОбновления.Обработчики);
		
		Если ОписаниеПодсистемы.Имя = ИмяОсновнойКонфигурации Тогда
			ИтерацияОбновлениеОсновнойПодсистемы = ИтерацияОбновления;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИтерацияОбновлениеОсновнойПодсистемы = Неопределено И ИмяОсновнойКонфигурации = "БиблиотекаСтандартныхПодсистем" Тогда
		ТекстСообщения = НСтр("ru = 'Файл поставки 1С:Библиотека стандартных подсистем не предназначен для создания
			|информационных баз по шаблону. Перед использованием необходимо
			|ознакомиться с документацией на ИТС (http://its.1c.ru/db/bspdoc)';
			|en = 'The 1C:Standard Subsystems Library distribution file is not intended
			|for template-based infobase creation. Before you start using it, 
			|read the documentation available on ITS (http://its.1c.ru/db/bspdoc, in Russian).'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ИтерацииОбновления;
	
КонецФункции

Функция ТекстСообщенияБлокировкиСеансовПользователей()
	
	Возврат НСтр("ru = 'Установлена блокировка саенсов пользователей на время выполнения монопольных обработчиков обновления.
		|Процесс запущен вследствии получения нового сообщения.';
		|en = 'User sessions are locked until the execution of exclusive update handlers is completed.
		|The process was started due to receiving a new message.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура ПередЗапускомРегистрацииДанныхОтложенногоОбновленияИБ()
	
	Обработчики = ОбновлениеИнформационнойБазыСлужебный.ОбработчикиДляОтложеннойРегистрацииДанных(Истина);
	Для Каждого Обработчик Из Обработчики Цикл
		
		ОписаниеОбрабатываемыхДанных = ОбновлениеИнформационнойБазыСлужебный.НовоеОписаниеОбрабатываемыхДанных(
			Обработчик.Многопоточный,
			Истина);
			
		Если Обработчик.Многопоточный Тогда
			ОписаниеОбрабатываемыхДанных.ПараметрыВыборки =
				ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки();
		КонецЕсли;
		
		ОписаниеОбрабатываемыхДанных.ИмяОбработчика = Обработчик.ИмяОбработчика;
		ОписаниеОбрабатываемыхДанных.Очередь = Обработчик.ОчередьОтложеннойОбработки;
		ОписаниеОбрабатываемыхДанных.ПроцедураЗаполнения = Обработчик.ПроцедураЗаполненияДанныхОбновления;
		
		ОписаниеОбрабатываемыхДанных = Новый ХранилищеЗначения(ОписаниеОбрабатываемыхДанных, Новый СжатиеДанных(9));
		ОбновлениеИнформационнойБазыСлужебный.УстановитьСвойствоОбработчика(Обработчик.ИмяОбработчика, "ОбрабатываемыеДанные", ОписаниеОбрабатываемыхДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭмулироватьМонопольноеОбновлениеИБ(УзелПланаОбмен, ИтерацииОбновления)

	ХодВыполненияОбработчиков = Новый Структура("ВсегоОбработчиков, ВыполненоОбработчиков", 0, 0);
	СтруктураПоиска = Новый Структура("ИмяПодсистемы");
	
	ИтерацииОбновления = ИтерацииОбновления();
	Для каждого СтруктураИтерации Из ИтерацииОбновления Цикл
		
		СтруктураПоиска.ИмяПодсистемы = СтруктураИтерации.Подсистема;
		
		НайденныйСтроки = УзелПланаОбмен.ВерсииПодсистем.НайтиСтроки(СтруктураПоиска);
		Если НайденныйСтроки.Количество() > 0 Тогда
			
			СтруктураИтерации.ПредыдущаяВерсия = НайденныйСтроки[0].Версия;
			ХодВыполненияОбработчиков.ВсегоОбработчиков = ХодВыполненияОбработчиков.ВсегоОбработчиков + СтруктураИтерации.Обработчики.Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ХодВыполненияОбработчиков", ХодВыполненияОбработчиков);
	ПараметрыВыполнения.Вставить("ОперативноеОбновление", Ложь);
	ПараметрыВыполнения.Вставить("ВФоне", Ложь);
	
	Для каждого СтруктураИтерации Из ИтерацииОбновления Цикл
		
		ОбновлениеИнформационнойБазыСлужебный.ВыполнитьИтерациюОбновления(СтруктураИтерации, ПараметрыВыполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭмулироватьОтложеннуюЧастьОбновленияИБ(ИтерацииОбновления)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	СведенияОбОбновлении       = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
	Если СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно = Неопределено
		И Не ИнформационнаяБазаФайловая Тогда
		ОбновлениеИнформационнойБазыСлужебный.ПриВключенииОтложенногоОбновления(Ложь);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяМетода", "ОбновлениеИнформационнойБазыСлужебный.ВыполнитьОтложенноеОбновление");
		ПараметрыОтбора.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
		Если МассивФоновыхЗаданий.Количество() = 1 Тогда
			ФоновоеЗадание = МассивФоновыхЗаданий[0];
			ФоновоеЗадание.Отменить();
		КонецЕсли;
		
	КонецЕсли;
	
	Обработки.ОписаниеОбработчиковОбновления.ЗаполнитьНомерОчереди(ИтерацииОбновления);
	ОбновлениеИнформационнойБазыСлужебный.ОбновитьСписокВыполняемыхОбработчиковОбновления(ИтерацииОбновления, Ложь);
	
	// запуск регистрации данных в несколько потоков
	ПередЗапускомРегистрацииДанныхОтложенногоОбновленияИБ();
	ОбновлениеИнформационнойБазыСлужебный.ЗапускРегистрацииДанныхОтложенногоОбновления(Неопределено, Неопределено);
	
	Если ИнформационнаяБазаФайловая Тогда
		
		ОбновлениеИнформационнойБазыСлужебный.ВыполнитьОтложенноеОбновлениеСейчас();
		
	Иначе
		
		ОбновлениеИнформационнойБазыСлужебный.ПриВключенииОтложенногоОбновления(Истина);
		 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияИтерацииОбмена(УзелПланаОбмен)
	
	ИтерацииОбновления = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		
		Попытка
			
			// на время монопольного обновления заблокируем работу пользователей
			ОбработкаОбъект = Обработки.БлокировкаРаботыПользователей.Создать();
			ОбработкаОбъект.КодДляРазблокировки = "12345";
			ОбработкаОбъект.ЗапретитьРаботуПользователей = Истина;
			ОбработкаОбъект.ОкончаниеДействияБлокировки = ТекущаяДата() + 1 * 60 *60;
			ОбработкаОбъект.СообщениеДляПользователей = ТекстСообщенияБлокировкиСеансовПользователей();
			ОбработкаОбъект.ВыполнитьУстановку();
			
		Исключение
			
			ТекстЖурналаРегистрации = НСтр("ru = 'Не удалось установить блокировку сеансов пользователей.';
											|en = 'Cannot lock user sessions.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ОбновлениеЧерезКопию.ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка, , , ТекстЖурналаРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
	ЭмулироватьМонопольноеОбновлениеИБ(УзелПланаОбмен, ИтерацииОбновления);
	ОбновлениеИнформационнойБазыСлужебный.ОтметитьРегистрациюОтложенныхОбработчиковОбновления(Неопределено, Истина);
	
	ОбработкаОбъект.ОтменитьБлокировку();
	ОбработкаОбъект = Неопределено;
	
	ЭмулироватьОтложеннуюЧастьОбновленияИБ(ИтерацииОбновления);
	
	ДинамикаПроцесса(Неопределено, Ложь);
	
КонецПроцедуры

Процедура ОтправитьПолучитьДанные(ПараметрыФормирования = Неопределено, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	Перем ЭтотУзел, УзелОбновления;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УзлыОбновлений = АктивныйУзелОбмена();
	
	УзлыОбновлений.Свойство("УзелОбновленияЭтот", ЭтотУзел);
	УзлыОбновлений.Свойство("УзелОбновленияКорреспондента", УзелОбновления);
	
	Отказ = Ложь;
	
	ДействияПриОбмене = ОпределитьВозможноеДействиеПриОбмене(ЭтотУзел, УзелОбновления);
	Если ДействияПриОбмене <> Неопределено Тогда
		
		Если ДействияПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
			
			// Из новой ИБ выгружаем только квиток, данные отправлять не нужно
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбновления); 
			
		КонецЕсли;
		
		ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FILE; // поддерживается только один вид транспорта
		
		ДействияПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
		ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, УзелОбновления, ДействияПриОбмене, ВидТранспорта);
		
		ДействияПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
		ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, УзелОбновления, ДействияПриОбмене, ВидТранспорта);
		
	КонецЕсли;
	
	ТекущееСостояние = Константы.ОбновлениеЧерезКопиюСостояние.Получить();
	Если ТекущееСостояние = Перечисления.СостоянияОбновлениеЧерезКопию.ЗагрузкаОбновлениеЧерезКопию Тогда
		
		ПослеВыполненияИтерацииОбмена(УзелОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти