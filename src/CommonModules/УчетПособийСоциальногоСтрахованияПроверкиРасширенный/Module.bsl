#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверкаУволенныхСотрудниковСОплатойБольничного(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РезультатПроверкиУволенныхСотрудниковСОплатойБольничного();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ПредставлениеДокументов = "";
		Пока Выборка.Следующий() Цикл
			ДобавитьПредставлениеДокумента(ПредставлениеДокументов, Выборка.БольничныйЛист);
		КонецЦикла;
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
		Проблема.ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Предупреждение;
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Начислена сумма по оплате больничного после увольнения
                                                     |%1';
                                                     |en = 'Accrued amount for sick leave after dismissal
                                                     |%1'"), ПредставлениеДокументов);
		УстановитьПривилегированныйРежим(Истина);
		КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКарантинУходУчитываетОтпуск(Проверка, ПараметрыПроверки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = ЗапросПоОшибкамКарантинУходНеУчитываетОтпуск();
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	Предупреждение = Перечисления["ВажностьПроблемыУчета"].Предупреждение;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		СписокДат1 = Новый СписокЗначений;
		СписокДат2 = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипПроблемы = 1 Тогда
				СписокДат1.Добавить(Выборка.Дата);
			Иначе
				СписокДат2.Добавить(Выборка.Дата);
			КонецЕсли;
		КонецЦикла;
		
		ЧастиПредложения = Новый Массив;
		Если СписокДат1.Количество() > 0 Тогда
			НаименованияПериодов = НаименованияПериодовИзСпискаДат(СписокДат1);
			Если НаименованияПериодов.Количество() = 1 Тогда
				Шаблон = НСтр("ru = 'Из оплаты избыточно исключен период %1';
								|en = 'Period %1 is excessively excluded from payment'");
			Иначе
				Шаблон = НСтр("ru = 'Из оплаты избыточно исключены периоды %1';
								|en = 'Periods %1 are excessively excluded from payment'");
			КонецЕсли;
			ЧастиПредложения.Добавить(СтрШаблон(Шаблон, СтрСоединить(НаименованияПериодов, ", ")));
		КонецЕсли;
		Если СписокДат2.Количество() > 0 Тогда
			НаименованияПериодов = НаименованияПериодовИзСпискаДат(СписокДат2);
			ЧастиПредложения.Добавить(СтрШаблон(
				НСтр("ru = 'Расчет не учитывает отпуск %1 (дни отпуска избыточного оплачиваются за счет ФСС)';
					|en = 'The calculation does not consider leave %1 (days of excess leave are paid for by SSF)'"),
				СтрСоединить(НаименованияПериодов, ", ")));
		КонецЕсли;
		
		Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.ВажностьПроблемы  = Предупреждение;
		Проблема.УточнениеПроблемы = СтрСоединить(ЧастиПредложения, "; ") + ".";
		КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатПроверкиУволенныхСотрудниковСОплатойБольничного()
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ТекущийРасчетныйМесяц = ЗарплатаКадрыБазовый.РасчетныйМесяц(ТекущаяДатаСеанса());
	СостоянияСотрудников.СоздатьВТСостоянияСотрудников(
		МенеджерВТ, , Перечисления.СостоянияСотрудника.Увольнение, ТекущийРасчетныйМесяц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТДопустимыеБольничные
		|ИЗ
		|	ВТСостоянияСотрудников КАК УволенныеСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
		|		ПО УволенныеСотрудники.Сотрудник = БольничныйЛист.Сотрудник
		|			И (БольничныйЛист.Проведен)
		|			И (БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание))
		|			И (БольничныйЛист.ПроцентОплаты = 60)
		|			И (БольничныйЛист.ДатаНачалаСобытия МЕЖДУ УволенныеСотрудники.Начало И ДОБАВИТЬКДАТЕ(УволенныеСотрудники.Начало, ДЕНЬ, 30))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БольничныйЛист.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УволенныеСотрудники.Сотрудник КАК Сотрудник,
		|	БольничныйЛист.Ссылка КАК БольничныйЛист
		|ИЗ
		|	ВТСостоянияСотрудников КАК УволенныеСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
		|		ПО УволенныеСотрудники.Сотрудник = БольничныйЛист.Сотрудник
		|			И (БольничныйЛист.ДатаНачалаСобытия >= УволенныеСотрудники.Начало)
		|			И (НЕ БольничныйЛист.Ссылка В
		|					(ВЫБРАТЬ
		|						ДопустимыеБольничные.Ссылка
		|					ИЗ
		|						ВТДопустимыеБольничные КАК ДопустимыеБольничные))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ДобавитьПредставлениеДокумента(Представление, ДокументСсылка)
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = Представление + Символы.ПС;
	КонецЕсли;
	
	Представление = Представление + ДокументСсылка;
	
КонецПроцедуры

// Возвращает периоды Карантина и Ухода, в которых нет состояния сотрудника, или есть сразу 2: Больничный и Отпуск.
Функция ЗапросПоОшибкамКарантинУходНеУчитываетОтпуск()
	ТекущаяДата   = ТекущаяДатаСеанса();
	ДатаНачала    = НачалоГода(ДобавитьМесяц(ТекущаяДата, -12*6));
	ДатаОкончания = КонецГода(ТекущаяДата);
	МенеджерВТ    = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
		МенеджерВТ,
		ДатаНачала,
		ДатаОкончания,
		"ДЕНЬ",
		"Дата",
		"ВТДаты");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("Причины", Перечисления.ПричиныНетрудоспособности.ПричиныВытесняемыеОтпуском());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Больничный.Ссылка КАК Ссылка,
	|	Больничный.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	Больничный.Сотрудник КАК Сотрудник,
	|	Больничный.АвтозаполнениеПериодовОплаты КАК АвтозаполнениеПериодовОплаты,
	|	Больничный.ДатаНачала КАК ДатаНачала,
	|	Больничный.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТБольничные
	|ИЗ
	|	Документ.БольничныйЛист КАК Больничный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК Исправление
	|		ПО (Исправление.ИсправленныйДокумент = Больничный.Ссылка)
	|ГДЕ
	|	Больничный.ДатаОкончания >= &ДатаНачала
	|	И Больничный.ПричинаНетрудоспособности В(&Причины)
	|	И Исправление.Ссылка ЕСТЬ NULL
	|	И Больничный.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Больничный.Ссылка КАК Ссылка,
	|	Больничный.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	Больничный.Сотрудник КАК Сотрудник,
	|	Больничный.АвтозаполнениеПериодовОплаты КАК АвтозаполнениеПериодовОплаты,
	|	Больничный.ДатаНачала КАК ДатаНачала,
	|	Больничный.ДатаОкончания КАК ДатаОкончания,
	|	ВТДаты.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДатыБольничных
	|ИЗ
	|	ВТБольничные КАК Больничный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДаты КАК ВТДаты
	|		ПО Больничный.ДатаНачала <= ВТДаты.Дата
	|			И Больничный.ДатаОкончания >= ВТДаты.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТБольничные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Больничный.Ссылка КАК Ссылка,
	|	Больничный.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	Больничный.Сотрудник КАК Сотрудник,
	|	Больничный.ДатаНачала КАК ДатаНачала,
	|	Больничный.ДатаОкончания КАК ДатаОкончания,
	|	Больничный.Дата КАК Дата,
	|	1 КАК ТипПроблемы
	|ИЗ
	|	ВТДатыБольничных КАК Больничный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.ИсключаемыеПериоды КАК ИсключаемыеПериоды
	|		ПО Больничный.Ссылка = ИсключаемыеПериоды.Ссылка
	|			И Больничный.Дата >= ИсключаемыеПериоды.ДатаНачала
	|			И Больничный.Дата <= ИсключаемыеПериоды.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ЛюбыеСостояния
	|		ПО Больничный.Сотрудник = ЛюбыеСостояния.Сотрудник
	|			И Больничный.Дата >= ЛюбыеСостояния.Начало
	|			И Больничный.Дата <= ЛюбыеСостояния.Окончание
	|ГДЕ
	|	ЛюбыеСостояния.Сотрудник ЕСТЬ NULL
	|	И (Больничный.АвтозаполнениеПериодовОплаты
	|			ИЛИ ИсключаемыеПериоды.Изменил = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Больничный.Ссылка,
	|	Больничный.ПричинаНетрудоспособности,
	|	Больничный.Сотрудник,
	|	Больничный.ДатаНачала,
	|	Больничный.ДатаОкончания,
	|	Больничный.Дата,
	|	2
	|ИЗ
	|	ВТДатыБольничных КАК Больничный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК СостоянияОтпусков
	|		ПО Больничный.Сотрудник = СостоянияОтпусков.Сотрудник
	|			И Больничный.Дата >= СостоянияОтпусков.Начало
	|			И Больничный.Дата <= СостоянияОтпусков.Окончание
	|			И (СостоянияОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускОсновной))
	|			И (НЕ СостоянияОтпусков.Сторно)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК СостоянияБольничных
	|		ПО Больничный.Ссылка = СостоянияБольничных.Регистратор
	|			И Больничный.Дата >= СостоянияБольничных.Начало
	|			И Больничный.Дата <= СостоянияБольничных.Окончание
	|			И (НЕ СостоянияБольничных.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Ссылка,
	|	Дата,
	|	ТипПроблемы";
	Возврат Запрос;
КонецФункции

// Возвращает представление периодов по списку дней.
Функция НаименованияПериодовИзСпискаДат(СписокДат)
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Периоды = ОбщегоНазначенияБЗК.ПериодыИзМассиваДат(СписокДат.ВыгрузитьЗначения());
	НаименованияПериодов = Новый Массив;
	Для Каждого Период Из Периоды Цикл
		НаименованияПериодов.Добавить(ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания));
	КонецЦикла;
	Возврат НаименованияПериодов;
КонецФункции

#КонецОбласти

#КонецЕсли