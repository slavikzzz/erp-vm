
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.СоздатьЗаявкиОтпускПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("87ff9782-60fc-4677-b3d9-b3babc36318f");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок на отпуск сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок на отпуск сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.СоздатьЗаявкиЛичныеДанныеПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("aefb5364-e39c-4d26-9537-63e8dab23cef");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок на изменение личных данных сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок на изменение личных данных сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.СоздатьЗаявкиНалоговыйВычетПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("d55ebc0f-2803-480b-84f7-73ed73d6554c");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок на налоговые вычеты сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок на налоговые вычеты сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.СоздатьЗаявкиСправкиНДФЛПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("274019af-befc-4eb6-b496-146180bc1a99");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок на 2-НДФЛ сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок на 2-НДФЛ сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.СоздатьЗаявкиОбращенияПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("95ed957d-32c6-445c-88c4-b240ea5c943e");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос произвольных обращений сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос произвольных обращений сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.СоздатьЗаявкиБолезньПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("3ad61901-9f6c-4c26-a726-eeb624b1125d");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок отсутствие по болезни сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок отсутствие по болезни сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.ЗаполнитьПравилаОбработкиЗаявок";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("956b57e1-c298-4ad0-a54b-da5a02f73017");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение правил обработки заявок сервиса 1С:Кабинет сотрудника.';
											|en = 'Заполнение правил обработки заявок сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.124";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.ЗаполнитьОбъектДополнительнойАдресации";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("dde11261-89e5-4e60-a8fc-649207a60cc7");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение адресации исполнителей задач обращений сотрудников.';
											|en = 'Заполнение адресации исполнителей задач обращений сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.172";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.ОчиститьПустыеДокументыПоЗаявкам";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("1b7aff7a-e755-405c-b5ef-29553f618554");
	Обработчик.Комментарий 		= НСтр("ru = 'Обработка документов по заявкам сервиса 1С:Кабинет сотрудника.';
											|en = 'Обработка документов по заявкам сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.173";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.ЗаполнитьДокументыПоЗаявкамОтпускПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("5a302710-f42c-43a9-858f-8f2f334a328a");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение документов по заявкам на отпуск сервиса 1С:Кабинет сотрудника.';
											|en = 'Заполнение документов по заявкам на отпуск сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.173";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.ЗаполнитьДокументыПоЗаявкамНалоговыйВычетПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("0ab3a1ae-71dc-46c9-a7b6-84175cf949c1");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение документов по заявкам на налоговые вычеты сервиса 1С:Кабинет сотрудника.';
											|en = 'Заполнение документов по заявкам на налоговые вычеты сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.173";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.ЗаполнитьДокументыПоЗаявкамСправкиНДФЛПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("a86ab709-0590-440f-b66f-7c9e6033745d");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение документов по заявкам на 2-НДФЛ сервиса 1С:Кабинет сотрудника.';
											|en = 'Заполнение документов по заявкам на 2-НДФЛ сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.173";
	Обработчик.Процедура 		= "ЗаявкиСотрудников.ЗаполнитьДокументыПоЗаявкамБолезньПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("3af0b0d7-0c13-47c4-a8e4-0912a99de831");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение документов по заявкам по болезни сервиса 1С:Кабинет сотрудника.';
											|en = 'Заполнение документов по заявкам по болезни сервиса 1С:Кабинет сотрудника.'");
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.БизнесПроцессы.ИсполнениеЗаявкиСотрудника, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ЗаявкиКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаОтпускКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаОтпускКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаОтпускБезОплатыКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаОтпускБезОплатыКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаПрежняяВерсияКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаНалоговыеВычетыКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаНалоговыеВычетыКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаОтсутствиеКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаОтсутствиеКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаСправка2НДФЛКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаСправка2НДФЛКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ОбращениеКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОбращениеКабинетСотрудника, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ИсполнениеЗаявкиСотрудника
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ИсполнениеЗаявкиСотрудника
	|БизнесПроцесс.ИсполнениеЗаявкиСотрудника.Чтение.ГруппыФизическихЛиц
	|БизнесПроцесс.ИсполнениеЗаявкиСотрудника.Чтение.Организации
	|БизнесПроцесс.ИсполнениеЗаявкиСотрудника.Изменение.ГруппыФизическихЛиц
	|БизнесПроцесс.ИсполнениеЗаявкиСотрудника.Изменение.Организации
	|ЖурналДокументов.ЗаявкиКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ЗаявкиКабинетСотрудника.Чтение.Организации
	|Справочник.ЗаявкаОтпускКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаОтпускКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаОтпускКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаОтпускКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаОтпускКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаОтпускКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаОтпускКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаОтпускКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаОтпускБезОплатыКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаОтпускБезОплатыКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаОтпускБезОплатыКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаОтпускБезОплатыКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаОтпускБезОплатыКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаОтпускБезОплатыКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаОтпускБезОплатыКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаОтпускБезОплатыКабинетСотрудника.Изменение.Организации
	|Документ.ЗаявкаПрежняяВерсияКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаПрежняяВерсияКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаПрежняяВерсияКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаПрежняяВерсияКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаНалоговыеВычетыКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаНалоговыеВычетыКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаНалоговыеВычетыКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаНалоговыеВычетыКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаНалоговыеВычетыКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаНалоговыеВычетыКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаНалоговыеВычетыКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаНалоговыеВычетыКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаОтсутствиеКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаОтсутствиеКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаОтсутствиеКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаОтсутствиеКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаОтсутствиеКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаОтсутствиеКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаОтсутствиеКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаОтсутствиеКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаСправка2НДФЛКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаСправка2НДФЛКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаСправка2НДФЛКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаСправка2НДФЛКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаСправка2НДФЛКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаСправка2НДФЛКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаСправка2НДФЛКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаСправка2НДФЛКабинетСотрудника.Изменение.Организации
	|Справочник.ОбращениеКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОбращениеКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОбращениеКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОбращениеКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОбращениеКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ОбращениеКабинетСотрудника.Чтение.Организации
	|Документ.ОбращениеКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ОбращениеКабинетСотрудника.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ЗаявкаОтпускКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаОтпускБезОплатыКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаНалоговыеВычетыКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаОтсутствиеКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаСправка2НДФЛКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ОбращениеКабинетСотрудника);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "751ba279-c891-468f-8de1-7be225534168", Метаданные.Документы.ЗаявкаОтпускКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "80dc512f-5a50-4c3b-8c67-bec83631a1d0", Метаданные.Документы.ЗаявкаОтпускБезОплатыКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "1eed601e-a45c-4d7e-9ba5-448433aee9ed", Метаданные.Документы.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "25f60e9a-c5b5-47f2-b1ff-7ec2af885fee", Метаданные.Документы.ЗаявкаНалоговыеВычетыКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "43687084-d42d-4f96-8a2a-311635f3cdf2", Метаданные.Документы.ЗаявкаОтсутствиеКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "dcc8b4fa-3825-43c7-8ad3-87281f01b7e9", Метаданные.Документы.ЗаявкаСправка2НДФЛКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "da9021db-6093-4996-bd4f-ce98dbb4fc71", Метаданные.Документы.ОбращениеКабинетСотрудника);
	
КонецПроцедуры

#КонецОбласти

#Область КадровыйЭДО

Функция ТребуетсяПечатнаяФормаСПодписью(Ссылки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Ссылки.Количество() <> 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Ссылки[0]) <> Тип("ДокументСсылка.СправкаНДФЛ") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылки[0]);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыПоЗаявкам.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета
	|ИЗ
	|	РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|ГДЕ
	|	ДокументыПоЗаявкам.ДокументПоЗаявке = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВладелецЗаявкаСотрудника(Ссылки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Ссылки.Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗаявкиСотрудниковВнутренний.ВладелецЗаявкаСотрудника(Ссылки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Ссылки[0]) <> Тип("ДокументСсылка.СправкаНДФЛ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылки[0]);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыПоЗаявкам.Заявка КАК Заявка
	|ИЗ
	|	РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|ГДЕ
	|	ДокументыПоЗаявкам.ДокументПоЗаявке = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ТребуетсяОтправлятьФайл(Ссылки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Ссылки.Количество() <> 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Ссылки[0]) <> Тип("ДокументСсылка.СправкаНДФЛ") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылки[0]);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыПоЗаявкам.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета
	|ИЗ
	|	РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|ГДЕ
	|	ДокументыПоЗаявкам.ДокументПоЗаявке = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП)
				Или (Выборка.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлДляВыводаНаПринтер);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	ЗаявкиСотрудниковВнутренний.ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
КонецПроцедуры

Процедура ЗавершитьЗаявкиСотрудниковПослеПодписанияСправок() Экспорт
	
	Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	Если Не Настройки.ЗавершатьЗаявкиПослеПодписанияСправки Тогда
		Возврат;
	КонецЕсли;
	
	ПодписанныеФайлыЗаявок = Новый ТаблицаЗначений;
	ПодписанныеФайлыЗаявок.Колонки.Добавить("Заявка");
	ПодписанныеФайлыЗаявок.Колонки.Добавить("Файл");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаявки
	|ИЗ
	|	Документ.ЗаявкаСправка2НДФЛКабинетСотрудника КАК Заявки
	|ГДЕ
	|	НЕ Заявки.Выполнена
	|	И НЕ Заявки.ПометкаУдаления
	|	И Заявки.ВариантФормированияФайлаОтвета = ЗНАЧЕНИЕ(Перечисление.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоЗаявке.Ссылка КАК Заявка,
	|	ПрисоединенныеФайлы.Ссылка КАК Файл
	|ИЗ
	|	Документ.ЗаявкаСправка2НДФЛКабинетСотрудника.ДокументыПоЗаявке КАК ДокументыПоЗаявке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаявки КАК Заявки
	|		ПО ДокументыПоЗаявке.Ссылка = Заявки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СправкаНДФЛПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО ДокументыПоЗаявке.ДокументСсылка = ПрисоединенныеФайлы.ВладелецФайла
	|			И (НЕ ПрисоединенныеФайлы.ПометкаУдаления)
	|			И (ПрисоединенныеФайлы.ПодписанЭП)";
	ПодписанныеФайлы = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(ПодписанныеФайлы) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПодписанныеФайлы, ПодписанныеФайлыЗаявок);
	КонецЕсли;
	
	ПодписанныеФайлы = ЗаявкиСотрудниковВнутренний.ПодписанныеФайлыЗаявок();
	Если ЗначениеЗаполнено(ПодписанныеФайлы) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПодписанныеФайлы, ПодписанныеФайлыЗаявок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодписанныеФайлыЗаявок) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыДляПроверки = ПодписанныеФайлыЗаявок.ВыгрузитьКолонку("Файл");
	
	Запрос.УстановитьПараметр("Файлы", ФайлыДляПроверки);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДействияСФайлами.ПрисоединенныйФайл КАК Файл
	|ИЗ
	|	РегистрСведений.ЗапланированныеДействияСФайламиДокументовКЭДО КАК ДействияСФайлами
	|ГДЕ
	|	ДействияСФайлами.ПрисоединенныйФайл В(&Файлы)
	|	И ДействияСФайлами.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСФайламиДокументовКЭДО.Подписать)";
	НеПодписанныеФайлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Файл");
	
	ЗаявкиДляИсключения = Новый Массив;
	Для каждого Файл Из НеПодписанныеФайлы Цикл
		СтрокаТаблицы = ПодписанныеФайлыЗаявок.Найти(Файл, "Файл");
		ЗаявкиДляИсключения.Добавить(СтрокаТаблицы.Заявка);
	КонецЦикла;
	ЗаявкиДляИсключения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаявкиДляИсключения);
	
	ВсеЗаявки = ОбщегоНазначения.ВыгрузитьКолонку(ПодписанныеФайлыЗаявок, "Заявка", Истина);
	ЗаявкиКВыполнению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеЗаявки, ЗаявкиДляИсключения);
	
	Для каждого Заявка Из ЗаявкиКВыполнению Цикл
		
		ЗаявкаМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заявка);
		Если Не ЗаявкаМенеджер.ЗаявкаГотоваДляАвтоматическогоВыполненияПослеПодписанияФайла(Заявка) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		Если ЗаявкаОбъект.Выполнена Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Результат = Новый Структура("РезультатВыполнения,Исполнитель");
			Результат.РезультатВыполнения 	= Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			Результат.Исполнитель 			= "";
			
			ЗаявкаОбъект.ДополнительныеСвойства.Вставить("РезультатВыполненияЗаявки", Результат);
			ЗаявкаОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Ошибка автоматического выполнения заявки сотрудника';
									|en = 'Ошибка автоматического выполнения заявки сотрудника'");
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтрШаблон("%1: %2%3%4", ТекстСообщения, Строка(Заявка), Символы.ПС, ПодробноеПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Заполняет список бизнес-процессов, которые подключены к подсистеме
// и модули менеджеров которых содержат следующие экспортные процедуры и функции:
//  - ПриПеренаправленииЗадачи.
//  - ФормаВыполненияЗадачи.
//  - ОбработкаВыполненияПоУмолчанию.
//
// Параметры:
//   ПодключенныеБизнесПроцессы - Соответствие из КлючИЗначение:
//     * Ключ - Строка - полное имя объекта метаданных, подключенного к подсистеме;
//     * Значение - Строка - пустая строка.
//
// Пример:
//   ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.ЗаданиеСРолевойАдресацией.ПолноеИмя(), "");
//
Процедура ПриОпределенииБизнесПроцессов(ПодключенныеБизнесПроцессы) Экспорт
	
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.ИсполнениеЗаявкиСотрудника.ПолноеИмя(), "");
	
КонецПроцедуры

Процедура ОбновитьСтатусПрежнейЗаявки(ЗаявкаЗадание, Выполнена, Аннулирована = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задание", ЗаявкаЗадание);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Заявки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявки
	|ГДЕ
	|	Заявки.Задание = &Задание";
	Заявки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если Не ЗначениеЗаполнено(Заявки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
	ЗаявкаОбъект.Выполнена = Истина;
	Если Выполнена Тогда
		ЗаявкаОбъект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
	ИначеЕсли Аннулирована Тогда
		ЗаявкаОбъект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована;
	Иначе
		ЗаявкаОбъект.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
	КонецЕсли;
	ЗаявкаОбъект.Записать();

КонецПроцедуры

Процедура СоздатьПрежнююЗаявку(ЗаявкаСотрудника) Экспорт

	ПоляДокумента = "Организация,Сотрудник,ФизическоеЛицо,СрокИсполнения,ИдентификаторЗаявки,ИдентификаторЭлектронногоДокумента,ЗаСвойСчет,ПричинаОтсутствия,ПоБеременности";
	ДанныеЗаполнения = Новый Структура(ПоляДокумента);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЗаявкаСотрудника);
	
	НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, ДанныеЗаполнения);
	
	НовыйДокумент.ДатаСоздания 	= ЗаявкаСотрудника.Дата;
	НовыйДокумент.Дата 			= ЗаявкаСотрудника.Дата;
	НовыйДокумент.Задание 		= ЗаявкаСотрудника.Ссылка;
	
		
	ТипЗаявкиСотрудника = ЗаявкаСотрудника.ТипЗаявкиКабинетСотрудника;
	Если ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
		ТипЗаявки = ТипЗаявкиСотрудника;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска Тогда
		ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.КомпенсацияОтпуска;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных Тогда
		ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ Тогда
		ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
		ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск Тогда
		Если ДанныеЗаполнения.ЗаСвойСчет = Истина Тогда
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОтпускБезОплаты;
		Иначе
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Отпуск;
		КонецЕсли;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
		ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска;
		ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Истина, НовыйДокумент.ФизическоеЛицо, ЗаявкаСотрудника.Дата);
		НовыйДокумент.Сотрудник = ОсновныеСотрудники[НовыйДокумент.ФизическоеЛицо];
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, НовыйДокумент.Сотрудник, "Организация", ЗаявкаСотрудника.Дата);
		Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
			НовыйДокумент.Организация = ТаблицаДанных[0].Организация;
		КонецЕсли;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты Тогда
		ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ОбращениеСотрудника Тогда
		ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОбращениеСотрудника;
	ИначеЕсли ТипЗаявкиСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
		Если ДанныеЗаполнения.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание
			Или ДанныеЗаполнения.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела Тогда
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОпозданиеЛичныеДела;
		ИначеЕсли ДанныеЗаполнения.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.УчебныйОтпуск;
		ИначеЕсли ДанныеЗаполнения.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком Тогда
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком;
		ИначеЕсли ДанныеЗаполнения.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отгул Тогда
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Отгул;
		ИначеЕсли ДанныеЗаполнения.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Командировка Тогда
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Командировка;
		ИначеЕсли ДанныеЗаполнения.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами Тогда
			ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами;
		Иначе
			Если ДанныеЗаполнения.ПоБеременности = Ложь Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Болезнь;
			ИначеЕсли ДанныеЗаполнения.ПоБеременности = Истина Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйДокумент.Сотрудник) Тогда
		НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
	КонецЕсли;

	НовыйДокумент.ТипЗаявки = ТипЗаявки;
	
	НовыйДокумент.Записать();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияНовыхЗаявок

Процедура ЗарегистрироватьНовуюЗаявку(ДокументМенеджер, ОписаниеДокумента, ПараметрыРегистрации) Экспорт
	
	НачатьТранзакцию(); 
	
	Попытка
		
		Если ЗначениеЗаполнено(ОписаниеДокумента.Организация) Тогда
			Организация = ОписаниеДокумента.Организация;
		Иначе
			Организация = ПараметрыРегистрации.ОрганизацииФизическихЛиц[ОписаниеДокумента.ФизическоеЛицо];
			ОписаниеДокумента.Организация = Организация;
		КонецЕсли;
		
		ОсновнойОбъектАдресации = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеДокумента.Сотрудник) Тогда
			ОсновнойОбъектАдресации = ПараметрыРегистрации.ОбъектыАдресацииПоСотруднику[ОписаниеДокумента.Сотрудник];
		ИначеЕсли ЗначениеЗаполнено(ОписаниеДокумента.Организация) Тогда
			ОсновнойОбъектАдресации = ПараметрыРегистрации.ОбъектыАдресацииПоОрганизации[ОписаниеДокумента.Организация][ОписаниеДокумента.ФизическоеЛицо];
		Иначе
			ОсновнойОбъектАдресации = ПараметрыРегистрации.ОбъектыАдресацииПоФизическомуЛицу[ОписаниеДокумента.ФизическоеЛицо];
		КонецЕсли;
		
		РольИсполнителя = ДокументМенеджер.РольИсполнителяЗаявки();
		
		Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
		ДнейНаИсполнение = 0;
		Если Настройки.ИспользоватьДетализациюПоПодразделениям Тогда
			СрокиИсполнения = ПараметрыРегистрации.СрокиИсполненияЗаявок[РольИсполнителя];
			Если СрокиИсполнения <> Неопределено Тогда
				СрокПоОбъектуАдресации = СрокиИсполнения[ОсновнойОбъектАдресации]; 
				Если СрокПоОбъектуАдресации <> Неопределено Тогда
					ДнейНаИсполнение = СрокПоОбъектуАдресации;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДнейНаИсполнение = ПараметрыРегистрации.СрокиИсполненияЗаявок[РольИсполнителя];
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДнейНаИсполнение) Тогда
			ДнейНаИсполнение = Настройки.ДнейНаИсполнение;
		КонецЕсли;
		
		СрокИсполнения = ТекущаяДатаСеанса() + ДнейНаИсполнение*86400;
		ОписаниеДокумента.СрокИсполнения = СрокИсполнения;
		
		ОписаниеДокумента.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
		ДокументОбъект.Заполнить(ОписаниеДокумента);
		ДокументОбъект.Записать();
		
		Для Каждого Вложение Из ОписаниеДокумента.Вложения Цикл
			ПрисоединитьФайл(ДокументОбъект.Ссылка, Вложение, Истина);
		КонецЦикла;
		
		Если ОписаниеДокумента.Свойство("Фотография") И ЗначениеЗаполнено(ОписаниеДокумента.Фотография) Тогда
			ПрисоединитьФайл(ДокументОбъект.Ссылка, ОписаниеДокумента.Фотография, Истина, Истина);
		КонецЕсли;
		
		ЭлектронныйДокумент = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеДокумента.ЭлектронныйДокумент) Тогда
			ЭлектронныйДокумент = ПрисоединитьФайл(ДокументОбъект.Ссылка, ОписаниеДокумента.ЭлектронныйДокумент);
			Если ОписаниеДокумента.ЭлектронныйДокумент.Свойство("ОригиналВMXL") Тогда
				РегистрыСведений.ПодписанныеПечатныеФормы.ЗарегистрироватьПечатнуюФорму(
					ОписаниеДокумента.ЭлектронныйДокумент.ОригиналВMXL,
					ДокументОбъект.Ссылка,
					ЭлектронныйДокумент,
					Организация,
					ДокументОбъект.ФизическоеЛицо,
					ДокументОбъект.Метаданные().Имя,
					ОписаниеДокумента.ЭлектронныйДокумент.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
		СоздатьДокументКЭДОЗаявлениеСотрудника(ДокументОбъект, ЭлектронныйДокумент);
		
		РегистрироватьЗадачу = Не ЗаявкаВыполненаАвтоматически(ДокументОбъект);
		
		Если РегистрироватьЗадачу Тогда
			
			// Создание и старт бизнес-процесса.
			ИменаПолей = "Дата,Наименование,Содержание,Предмет,Исполнитель,СрокИсполнения,ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации";
			ПараметрыЗаполнения = Новый Структура(ИменаПолей);
			ПараметрыЗаполнения.Дата 				= ДокументОбъект.Дата;
			ПараметрыЗаполнения.Наименование 		= ДокументМенеджер.НаименованиеЗадачи(ДокументОбъект);
			ПараметрыЗаполнения.Содержание 			= ДокументМенеджер.СодержаниеЗадачи(ДокументОбъект);
			ПараметрыЗаполнения.Предмет 			= ДокументОбъект.Ссылка;
			ПараметрыЗаполнения.Исполнитель 		= РольИсполнителя;
			ПараметрыЗаполнения.СрокИсполнения 		= СрокИсполнения;
			ПараметрыЗаполнения.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОбращениеКабинетСотрудника") И ЗначениеЗаполнено(ДокументОбъект.ШаблонДокумента) Тогда
				ПараметрыЗаполнения.ДополнительныйОбъектАдресации = ДокументОбъект.ШаблонДокумента;
			КонецЕсли;
			
			БизнесПроцессМенеджер = ДокументМенеджер.БизнесПроцессМенеджер();
			БизнесПроцесс = БизнесПроцессМенеджер.СоздатьБизнесПроцесс();
			БизнесПроцесс.Заполнить(ПараметрыЗаполнения);
			
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт();
			
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Ошибка записи заявки сотрудника.';
								|en = 'Ошибка записи заявки сотрудника.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1%2%3", ТекстСообщения, Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПрисоединитьФайл(ВладелецФайлов, ОписаниеФайла, Вложение = Ложь, Фотография = Ложь)
	
	АдресВложения = ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные);
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Вложение,Фотография");
	ПараметрыФайла.ВладелецФайлов 		= ВладелецФайлов;
	ПараметрыФайла.ИмяБезРасширения 	= ОписаниеФайла.ИмяФайла;
	ПараметрыФайла.РасширениеБезТочки 	= ОписаниеФайла.РасширениеФайла;
	ПараметрыФайла.Вложение 			= Вложение;
	ПараметрыФайла.Фотография 			= Фотография;
	
	Возврат РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВложения);
	
КонецФункции

Функция ПараметрыРегистрацииЗаявок(ТаблицаЗаявок) Экспорт
	
	Параметры = Новый Структура("
	|ОбъектыАдресацииПоФизическомуЛицу,
	|ОбъектыАдресацииПоОрганизации,
	|ОбъектыАдресацииПоСотруднику,
	|ОрганизацииФизическихЛиц,
	|СрокиИсполненияЗаявок,
	|ЗарегистрированныеЗаявки,
	|ОтменяемыеЗаявки");
	
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаявок, "ФизическоеЛицо", Истина);
	
	// Объекты адресации.
	Данные = ОбъектыАдресацииПоФизическимЛицам(СписокФизическихЛиц);
	Параметры.ОбъектыАдресацииПоФизическомуЛицу = Данные.ОбъектыАдресации;
	Параметры.ОрганизацииФизическихЛиц 			= Данные.ОрганизацииФизическихЛиц;
	Параметры.ОбъектыАдресацииПоОрганизации 	= ОбъектыАдресацииПоОрганизации(СписокФизическихЛиц);
	Параметры.ОбъектыАдресацииПоСотруднику 		= ОбъектыАдресацииПоСотруднику(СписокФизическихЛиц);
	
	// Срок исполнения, требование подписи.
	СрокиИсполненияЗаявок = Новый Соответствие;
	Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(Параметры.ОбъектыАдресацииПоСотруднику, "Значение", Истина);
	Для Каждого ЭлементКоллекции Из Параметры.ОбъектыАдресацииПоОрганизации Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, ОбщегоНазначения.ВыгрузитьКолонку(ЭлементКоллекции.Значение, "Значение", Истина), Истина);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, ОбщегоНазначения.ВыгрузитьКолонку(Параметры.ОбъектыАдресацииПоФизическомуЛицу, "Значение", Истина), Истина);
	Параметры.СрокиИсполненияЗаявок = СрокиИсполненияЗаявок(Подразделения);
	
	// Уже зарегистрированные заявки.
	Идентификаторы = ТаблицаЗаявок.ВыгрузитьКолонку("ИдентификаторЗаявки");
	Параметры.ЗарегистрированныеЗаявки = ЗарегистрированныеЗаявки(Идентификаторы);
	
	// Отменяемые заявки.
	Идентификаторы = ТаблицаЗаявок.ВыгрузитьКолонку("ИдентификаторОтменяемойЗаявки");
	ОбщегоНазначенияБЗККлиентСервер.УдалитьПустыеЗначенияИзМассива(Идентификаторы);
	Параметры.ОтменяемыеЗаявки = ЗарегистрированныеЗаявки(Идентификаторы);
	
	Возврат Параметры;

КонецФункции

Функция ЗарегистрированныеЗаявки(Идентификаторы)
	
	ЗарегистрированныеЗаявки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявки.Заявка КАК Заявка,
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Заявки.ИдентификаторЭлектронногоДокумента КАК ИдентификаторЭлектронногоДокумента
	|ИЗ
	|	РегистрСведений.ДанныеЗаявокКабинетСотрудника КАК Заявки
	|ГДЕ
	|	Заявки.ИдентификаторЗаявки В(&Идентификаторы)
	|	И НЕ Заявки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторЗаявки";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторЗаявки") Цикл
		ИдентификаторыЭлектронныхДокументов = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Если Не ПустаяСтрока(Выборка.ИдентификаторЭлектронногоДокумента) Тогда
				ИдентификаторыЭлектронныхДокументов.Вставить(Выборка.ИдентификаторЭлектронногоДокумента, Выборка.Заявка);
			КонецЕсли;
		КонецЦикла;
		Если ИдентификаторыЭлектронныхДокументов.Количество() = 0 Тогда
			ЗарегистрированныеЗаявки.Вставить(Выборка.ИдентификаторЗаявки, Выборка.Заявка);
		Иначе
			ЗарегистрированныеЗаявки.Вставить(Выборка.ИдентификаторЗаявки, ИдентификаторыЭлектронныхДокументов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗарегистрированныеЗаявки;

КонецФункции

Функция ОбъектыАдресацииПоФизическимЛицам(СписокФизическихЛиц)
	
	ОбъектыАдресацииЗаявокИОрганизации = Новый Структура("
	|ОбъектыАдресации,
	|ОрганизацииФизическихЛиц");
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Истина, СписокФизическихЛиц, ДатаАктуальности);
		
	ОбъектыАдресации 			= Новый Соответствие;
	ОрганизацииФизическихЛиц 	= Новый Соответствие;
	
	ОсновныеСотрудники = Новый Массив;
	Для каждого ЭлементКоллекции Из ОсновныеСотрудникиФизическихЛиц Цикл
		ОсновныеСотрудники.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		КадровыеДанные = "Организация,Подразделение";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные, ДатаАктуальности);
		ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ИмяПоляПодразделение = "Подразделение";
		
	Иначе
		
		ИмяОпции = "ИспользоватьШтатноеРасписание";
		ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
		ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанные = "Организация,МестоВСтруктуреПредприятия";
		Иначе
			КадровыеДанные = "Организация,Подразделение,Должность";
		КонецЕсли;
		
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные, ДатаАктуальности);
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.Организация КАК Организация
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанные КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Организация КАК Организация,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			
			УстановитьПривилегированныйРежим(Истина);
			ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			
			ПозицииСотрудников = Новый Соответствие;
			Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
				ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
			КонецЦикла;
			
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
			СтруктураПредприятия = ЗаявкиСотрудниковВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
			ПодразделенияПозиций = Новый Соответствие;
			Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
				ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
			КонецЦикла;
			
			ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
			Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
				ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
				СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
			КонецЦикла;
			
		КонецЕсли;
		
		ПустоеПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		ИмяПоляПодразделение = "МестоВСтруктуреПредприятия";
		
	КонецЕсли;
		
	ТаблицаДанных.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		Отбор.Сотрудник = ОсновныеСотрудникиФизическихЛиц[ФизическоеЛицо];
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
		Подразделение = ПустоеПодразделение;
		Организация = ПустаяОрганизация;
		Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0][ИмяПоляПодразделение]) Тогда
			Подразделение = НайденныеСтроки[0][ИмяПоляПодразделение];
			Организация = НайденныеСтроки[0].Организация;
		КонецЕсли;
		ОбъектыАдресации.Вставить(ФизическоеЛицо, Подразделение);
		ОрганизацииФизическихЛиц.Вставить(ФизическоеЛицо, Организация);
	КонецЦикла;
	
	ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресации = ОбъектыАдресации;
	ОбъектыАдресацииЗаявокИОрганизации.ОрганизацииФизическихЛиц = ОрганизацииФизическихЛиц;
	Возврат ОбъектыАдресацииЗаявокИОрганизации;
	
КонецФункции

Функция ОбъектыАдресацииПоОрганизации(СписокФизическихЛиц)
	
	ОбъектыАдресацииЗаявок = Новый Соответствие;
	
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	НЕ Организации.ПометкаУдаления
	               |	И НЕ Организации.Предопределенный";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		ОбъектыАдресации = Новый Соответствие;
		
		ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Истина, ВыборкаОрганизаций.Ссылка, ДатаАктуальности);
		ОсновныеСотрудники = ОсновныеСотрудникиФизическихЛиц.ВыгрузитьКолонку("Сотрудник");
		
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			
			КадровыеДанные = "ФизическоеЛицо,Подразделение";
			ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные, ДатаАктуальности);
			ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ИмяПоляПодразделение = "Подразделение";
			
		Иначе
			
			ИмяОпции = "ИспользоватьШтатноеРасписание";
			ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
			ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
			Если ВедетсяШтатноеРасписание Тогда
				КадровыеДанные = "ФизическоеЛицо, МестоВСтруктуреПредприятия";
			Иначе
				КадровыеДанные = "ФизическоеЛицо, Подразделение, Должность";
			КонецЕсли;
			
			ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные, ДатаАктуальности);
			Если Не ВедетсяШтатноеРасписание Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
				|	КадровыеДанные.Сотрудник КАК Сотрудник,
				|	КадровыеДанные.Подразделение КАК Подразделение,
				|	КадровыеДанные.Должность КАК Должность
				|ПОМЕСТИТЬ ВТКадровыеДанные
				|ИЗ
				|	&КадровыеДанные КАК КадровыеДанные
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КадровыеДанные.Сотрудник КАК Сотрудник,
				|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
				|ИЗ
				|	ВТКадровыеДанные КАК КадровыеДанные
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
				|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
				|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
				
				УстановитьПривилегированныйРежим(Истина);
				ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
				УстановитьПривилегированныйРежим(Ложь);
				
				ПозицииСотрудников = Новый Соответствие;
				Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
					ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
				КонецЦикла;
				
				Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
				СтруктураПредприятия = ЗаявкиСотрудниковВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
				ПодразделенияПозиций = Новый Соответствие;
				Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
					ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
				КонецЦикла;
				
				ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
				Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
					ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
					СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
				КонецЦикла;
				
			КонецЕсли;
			
			ПустоеПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
			ИмяПоляПодразделение = "МестоВСтруктуреПредприятия";
			
		КонецЕсли;
	
		ТаблицаДанных.Индексы.Добавить("Сотрудник");
		Отбор = Новый Структура("ФизическоеЛицо");
		Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
			Отбор.ФизическоеЛицо = ФизическоеЛицо;
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
			Подразделение = ПустоеПодразделение;
			Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0][ИмяПоляПодразделение]) Тогда
				Подразделение = НайденныеСтроки[0][ИмяПоляПодразделение];
			КонецЕсли;
			ОбъектыАдресации.Вставить(ФизическоеЛицо, Подразделение);
		КонецЦикла;
		
		ОбъектыАдресацииЗаявок.Вставить(ВыборкаОрганизаций.Ссылка, ОбъектыАдресации);
		
	КонецЦикла;
	
	Возврат ОбъектыАдресацииЗаявок;
		
КонецФункции

Функция ОбъектыАдресацииПоСотруднику(СписокФизическихЛиц)
	
	ОбъектыАдресации = Новый Соответствие;
	
	СотрудникиФизическихЛиц = КадровыйУчет.СотрудникиФизическихЛиц(СписокФизическихЛиц);
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		КадровыеДанные = "Подразделение";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СотрудникиФизическихЛиц, КадровыеДанные, ДатаАктуальности);
		ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ИмяПоляПодразделение = "Подразделение";
		
	Иначе
		
		ИмяОпции = "ИспользоватьШтатноеРасписание";
		ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
		ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанные = "МестоВСтруктуреПредприятия";
		Иначе
			КадровыеДанные = "Подразделение, Должность";
		КонецЕсли;
		
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СотрудникиФизическихЛиц, КадровыеДанные, ДатаАктуальности);
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанные КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			
			УстановитьПривилегированныйРежим(Истина);
			ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			
			ПозицииСотрудников = Новый Соответствие;
			Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
				ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
			КонецЦикла;
			
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
			СтруктураПредприятия = ЗаявкиСотрудниковВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
			ПодразделенияПозиций = Новый Соответствие;
			Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
				ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
			КонецЦикла;
			
			ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
			Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
				ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
				СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
			КонецЦикла;
			
		КонецЕсли;
		
		ПустоеПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		ИмяПоляПодразделение = "МестоВСтруктуреПредприятия";
		
	КонецЕсли;
	
	ТаблицаДанных.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	Для каждого СтрокаТЗ Из СотрудникиФизическихЛиц Цикл
		Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
		Подразделение = ПустоеПодразделение;
		Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0][ИмяПоляПодразделение]) Тогда
			Подразделение = НайденныеСтроки[0][ИмяПоляПодразделение];
		КонецЕсли;
		ОбъектыАдресации.Вставить(СтрокаТЗ.Сотрудник, Подразделение);
	КонецЦикла;
	
	Возврат ОбъектыАдресации;
		
КонецФункции

Функция СрокиИсполненияЗаявок(Подразделения)
	
	СрокиИсполнения = Новый Соответствие;
	РолиИсполнителей = РолиИсполнителейЗадач();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Роли", РолиИсполнителей);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	
	Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	Если Настройки.ИспользоватьДетализациюПоПодразделениям Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Правила.РольИсполнителя КАК РольИсполнителя,
		|	Правила.Подразделение КАК Подразделение,
		|	Правила.ДнейНаИсполнение КАК ДнейНаИсполнение
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника КАК Правила
		|ГДЕ
		|	Правила.РольИсполнителя В(&Роли)
		|	И Правила.Подразделение В(&Подразделения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РольИсполнителя";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("РольИсполнителя") Цикл
			СрокиРоли = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				СрокиРоли.Вставить(Выборка.Подразделение, Выборка.ДнейНаИсполнение);
			КонецЦикла;
			СрокиИсполнения.Вставить(Выборка.РольИсполнителя, СрокиРоли);
		КонецЦикла;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Правила.РольИсполнителя КАК РольИсполнителя,
		|	Правила.ДнейНаИсполнение КАК ДнейНаИсполнение
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника КАК Правила
		|ГДЕ
		|	Правила.РольИсполнителя В(&Роли)";
		Таблица = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из Таблица Цикл
			СрокиИсполнения.Вставить(СтрокаТЗ.РольИсполнителя, СтрокаТЗ.ДнейНаИсполнение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СрокиИсполнения;
	
КонецФункции 

Функция ДокументМенеджерНовойЗаявки(ТипОбъекта, Объект, ОтменяемаяЗаявка) Экспорт
	
	Если ЗначениеЗаполнено(ОтменяемаяЗаявка) Тогда
		Возврат ДокументМенеджерОтменяющейЗаявки(ОтменяемаяЗаявка);
	Иначе
		Возврат ДокументМенеджерПоТипуОбъекта(ТипОбъекта, Объект);
	КонецЕсли;

КонецФункции

Функция ДокументМенеджерПоТипуОбъекта(ТипОбъекта, Объект)
	
	ДокументМенеджер = Неопределено;
	Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаОтпуск Тогда
		Если Объект.ЗаСвойСчет Тогда
			ДокументМенеджер = Документы.ЗаявкаОтпускБезОплатыКабинетСотрудника;
		Иначе
			ДокументМенеджер = Документы.ЗаявкаОтпускКабинетСотрудника;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаИзменениеЛичныхДанных Тогда
		ДокументМенеджер = Документы.ЗаявкаИзменениеЛичныхДанныхКабинетСотрудника;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНалоговыйВычет Тогда
		ДокументМенеджер = Документы.ЗаявкаНалоговыеВычетыКабинетСотрудника;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Отсутствие Тогда
		Если Объект.ПричинаОтсутствия <> Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
			ДокументМенеджер = Документы.ЗаявкаОтсутствиеКабинетСотрудника;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправки2НДФЛ Тогда
		ДокументМенеджер = Документы.ЗаявкаСправка2НДФЛКабинетСотрудника;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОбращениеСотрудника Тогда
		ДокументМенеджер = Документы.ОбращениеКабинетСотрудника;
	КонецЕсли;
	
	Если ДокументМенеджер = Неопределено Тогда
		ДокументМенеджер = ЗаявкиСотрудниковВнутренний.ДокументМенеджерПоТипуОбъекта(ТипОбъекта, Объект);
	КонецЕсли;
	
	Возврат ДокументМенеджер;

КонецФункции

Функция ДокументМенеджерОтменяющейЗаявки(ОтменяемаяЗаявка)
	
	ДокументМенеджер = Неопределено;
	
	Если ТипЗнч(ОтменяемаяЗаявка) <> Тип("ДокументСсылка.ЗаявкаПрежняяВерсияКабинетСотрудника") Тогда
		ДокументМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОтменяемаяЗаявка);
	Иначе
		Задание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтменяемаяЗаявка, "Задание");
		Если ТипЗнч(Задание) = Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаОтпуск") Тогда
			РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "ТипЗаявкиКабинетСотрудника,ЗаСвойСчет");
			ТипОтменяемойЗаявки = РеквизитыЗаявки.ТипЗаявкиКабинетСотрудника;
			Если ТипОтменяемойЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск Тогда
				Если РеквизитыЗаявки.ЗаСвойСчет Тогда
					ДокументМенеджер = Документы.ЗаявкаОтпускБезОплатыКабинетСотрудника;
				Иначе
					ДокументМенеджер = Документы.ЗаявкаОтпускКабинетСотрудника;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументМенеджер = Неопределено Тогда
		ЗаявкиСотрудниковВнутренний.ДокументМенеджерОтменяющейЗаявки(ОтменяемаяЗаявка);
	КонецЕсли;
	
	Возврат ДокументМенеджер;

КонецФункции

Процедура СоздатьДокументКЭДОЗаявлениеСотрудника(ЗаявкаОбъект, ЭлектронныйДокумент)
	
	ВариантПодписания = Перечисления.ВариантыПодписанияДокументовКЭДО.Требуется;
	Если ЗаявкаОбъект.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
		ВариантПодписания = Перечисления.ВариантыПодписанияДокументовКЭДО.НеТребуется;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаОбъект.ИдентификаторЭлектронногоДокумента) Тогда
		ИдентификаторДокумента = ЗаявкаОбъект.ИдентификаторЭлектронногоДокумента;
	Иначе
		ИдентификаторДокумента = ЗаявкаОбъект.ИдентификаторЗаявки;
	КонецЕсли;
	
	КодДокументаКадровогоМероприятия = Неопределено;
	Если ТипЗнч(ЗаявкаОбъект) = Тип("ДокументОбъект.ОбращениеКабинетСотрудника") Тогда
		КодДокументаКадровогоМероприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаОбъект.ШаблонДокумента, "КодДокументаКадровогоМероприятия");
	КонецЕсли;
	
	ОписаниеДокументаКЭДО = Документы.ДокументКадровогоЭДО.СвойстваДокумента(ЭлектронныйДокумент, ЗаявкаОбъект.Организация, ЗаявкаОбъект.ФизическоеЛицо);
	ОписаниеДокументаКЭДО.Дата 						= ЗаявкаОбъект.Дата;
	ОписаниеДокументаКЭДО.ИдентификаторДокумента 	= ИдентификаторДокумента;
	ОписаниеДокументаКЭДО.ОснованиеДокумента 		= ЗаявкаОбъект.Ссылка;
	ОписаниеДокументаКЭДО.КатегорияДокумента 		= Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника;
	ОписаниеДокументаКЭДО.СодержимоеДокумента 		= Перечисления.СодержимоеДокументов.НеСодержитЗарплаты;
	ОписаниеДокументаКЭДО.ВариантПодписания 		= ВариантПодписания;
	ОписаниеДокументаКЭДО.ИдентификаторЗаявкиКабинетСотрудника 	= ЗаявкаОбъект.ИдентификаторЗаявки;
	ОписаниеДокументаКЭДО.КодДокументаКадровогоМероприятия 		= КодДокументаКадровогоМероприятия;
	
	Документы.ДокументКадровогоЭДО.Добавить(ОписаниеДокументаКЭДО);
	
КонецПроцедуры

Функция ЗаявкаВыполненаАвтоматически(ЗаявкаОбъект)

	Возврат ЗаявкиСотрудниковВнутренний.ЗаявкаВыполненаАвтоматически(ЗаявкаОбъект);

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхЗаявокПриВыгрузке

Функция ДанныеЗаявокДляВыгрузки(Заявки) Экспорт
	
	ТипыЗаявокНеПодписываются = Новый Массив;
	ТипыЗаявокНеПодписываются.Добавить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", Заявки);
	Запрос.УстановитьПараметр("ТипыЗаявокНеПодписываются", ТипыЗаявокНеПодписываются);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Заявка КАК Заявка,
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.РезультатВыполнения КАК РезультатВыполнения,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.ОтветПоЗаявке КАК Комментарий,
	|	Таблица.Исполнитель КАК Исполнитель,
	|	Таблица.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	ВЫБОР
	|		КОГДА Таблица.ТипЗаявки В (&ТипыЗаявокНеПодписываются)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаявкаПодписывается
	|ИЗ
	|	РегистрСведений.ДанныеЗаявокКабинетСотрудника КАК Таблица
	|ГДЕ
	|	Таблица.Заявка В(&Заявки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипОбъекта";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ФайлыОтветаЗаявокДляВыгрузки(Заявки, ТипДанных) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Заявка");
	ТаблицаФайлов.Колонки.Добавить("ФайлЗаявки");
	
	ЗаявкиСотрудниковВнутренний.ЗаполнитьФайлыОтветаЗаявокДляВыгрузки(Заявки, ТипДанных, ТаблицаФайлов);
	
	Возврат ТаблицаФайлов

КонецФункции

Процедура СоздатьВТСправки2НДФЛЗаявок(МенеджерВТ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкиСправки.Ссылка КАК Заявка,
	|	ЗаявкиСправки.ДокументСсылка КАК СправкаНДФЛ,
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Заявки.ОтветПоЗаявке КАК ОтветПоЗаявке,
	|	Заявки.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	Заявки.РезультатВыполнения КАК РезультатВыполнения
	|ПОМЕСТИТЬ ВТСправки2НДФЛЗаявок
	|ИЗ
	|	Документ.ЗаявкаСправка2НДФЛКабинетСотрудника.ДокументыПоЗаявке КАК ЗаявкиСправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСсылки КАК СправкиНДФЛ
	|		ПО ЗаявкиСправки.ДокументСсылка = СправкиНДФЛ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаСправка2НДФЛКабинетСотрудника КАК Заявки
	|		ПО ЗаявкиСправки.Ссылка = Заявки.Ссылка";
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗаявкиПриВыполнении

Функция РезультатЗаписиВыполненияЗаявки(Форма, РезультатВыполненияЗаявки, ОписаниеДокумента) Экспорт
	
	Если ОписаниеДокумента.ПроверятьСвязанныеЗаявки Тогда
		
		Результат = Новый Структура("СообщениеПроверки");
		
		// Если есть связанные заявки и все "на выполнении", проверим еще раз.
		Если ЗначениеЗаполнено(Форма.СвязанныеЗаявки) И Не ЗначениеЗаполнено(Форма.РезультатВыполненияСвязаннойЗаявки) Тогда
			ЗаявкиСотрудниковФормы.ПрочитатьВывестиСвязанныеЗаявки(Форма, Форма.Объект, ОписаниеДокумента);
			Если ЗначениеЗаполнено(Форма.РезультатВыполненияСвязаннойЗаявки) Тогда
				ТекстСообщения = "";
				Если РезультатВыполненияЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена
					И Форма.РезультатВыполненияСвязаннойЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена Тогда
					ТекстСообщения = Форма.СообщениеСвязаннаяЗаявкаОтклонена;
				ИначеЕсли РезультатВыполненияЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена
					И Форма.РезультатВыполненияСвязаннойЗаявки = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
					ТекстСообщения = Форма.СообщениеСвязаннаяЗаявкаВыполнена;
				КонецЕсли;
				Если Не ПустаяСтрока(ТекстСообщения) Тогда
					Результат.СообщениеПроверки = ТекстСообщения;
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДанныеДокумента = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(ДокументОбъект);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДокументСсылка", 		Форма.Объект.Ссылка);
	ПараметрыЗаписи.Вставить("ДанныеДокумента", 	ДанныеДокумента);
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполненияЗаявки);
	ПараметрыЗаписи.Вставить("Исполнитель", 		Форма.ТекущийПользователь);
	ПараметрыЗаписи.Вставить("Отказ", Ложь);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания", НСтр("ru = 'Запись заявки';
																			|en = 'Запись заявки'"));
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ЗаявкиСотрудников.ЗаписатьЗаявкуПриВыполненииФоновоеЗадание", ПараметрыЗаписи, ПараметрыВыполненияВФоне);
	
КонецФункции

Процедура ЗаписатьЗаявкуПриВыполненииФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ДокументОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(Параметры.ДанныеДокумента);
	
	Результат = Новый Структура("РезультатВыполнения,Исполнитель");
	Результат.РезультатВыполнения 	= Параметры.РезультатВыполнения;
	Результат.Исполнитель 			= Параметры.Исполнитель;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("РезультатВыполненияЗаявки", Результат);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	ПоместитьВоВременноеХранилище(ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(ДокументОбъект), АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаписиОбъектовЗаявка

// Выполняет запись связанных данных при регистрации выполнения заявки.
// Вызывается из обработчика ПередЗаписью модуля объекта.
//
// Параметры:
// 		Объект - ДокументОбъект - Заявка, которая регистрируется как выполненная.
// 		РезультатВыполненияЗаявки - ПеречислениеСсылка.РезультатыВыполненияЗаявокКабинетСотрудника
// 		Отказ - Булево.
//
Процедура ПередЗаписьюВыполняемойЗаявки(Объект, РезультатВыполненияЗаявки, Отказ) Экспорт
	
	ДатаИсполнения = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Предмет = &Предмет
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	ТекущиеЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТекущаяЗадача = Неопределено;
	Если ЗначениеЗаполнено(ТекущиеЗадачи) Тогда 
		ТекущаяЗадача = ТекущиеЗадачи[0];
	КонецЕсли;
	
	ЕстьОтменяемаяЗаявка = ОбщегоНазначения.ЕстьРеквизитОбъекта("ОтменяемаяЗаявка", Объект.Ссылка.Метаданные());
	
	Попытка
		Если ЗначениеЗаполнено(РезультатВыполненияЗаявки.Исполнитель) Тогда
			Документы.ДокументКадровогоЭДО.ОбновитьОтветственногоПоОснованиюДокумента(Объект.Ссылка, РезультатВыполненияЗаявки.Исполнитель);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда 
			ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.Выполнена 				= Ложь;
			ЗадачаОбъект.ДатаИсполнения 		= ДатаИсполнения;
			ЗадачаОбъект.Исполнитель 			= РезультатВыполненияЗаявки.Исполнитель;
			ЗадачаОбъект.РезультатВыполнения 	= НСтр("ru = 'Задача выполнена';
														|en = 'Задача выполнена'");
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЕсли;
		Если ЕстьОтменяемаяЗаявка И ЗначениеЗаполнено(Объект.ОтменяемаяЗаявка)
			И РезультатВыполненияЗаявки.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
			ЗарегистрироватьАннулированиеЗаявки(Объект.ОтменяемаяЗаявка, РезультатВыполненияЗаявки.Исполнитель);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не удалось изменить статус заявки.';
								|en = 'Не удалось изменить статус заявки.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1%2%3", ТекстСообщения, Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	КонецПопытки;
	
	Если Не Отказ Тогда
		Объект.Исполнитель 			= РезультатВыполненияЗаявки.Исполнитель;
		Объект.ДатаИсполнения 		= ДатаИсполнения;
		Объект.Выполнена 			= Истина;
		Объект.РезультатВыполнения 	= РезультатВыполненияЗаявки.РезультатВыполнения;
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьАннулированиеЗаявки(Заявка, Исполнитель)
	
	РезультатВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "РезультатВыполнения");
	Если РезультатВыполнения <> Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована Тогда
		
		Если ТипЗнч(Заявка) <> Тип("ДокументСсылка.ЗаявкаПрежняяВерсияКабинетСотрудника") Тогда
			ЗаявкаОбъект = Заявка.ПолучитьОбъект();
			Результат = Новый Структура("РезультатВыполнения,Исполнитель");
			Результат.РезультатВыполнения 	= Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована;
			Результат.Исполнитель 			= Исполнитель;
			ЗаявкаОбъект.ДополнительныеСвойства.Вставить("РезультатВыполненияЗаявки", Результат);
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			
			ЗаявкаЗадание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "Задание");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Задание", ЗаявкаЗадание);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &Задание
			|	И НЕ ЗадачаИсполнителя.Выполнена";
			ТекущиеЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			ТекущаяЗадача = Неопределено;
			Если ЗначениеЗаполнено(ТекущиеЗадачи) Тогда 
				ТекущаяЗадача = ТекущиеЗадачи[0];
			КонецЕсли;
			
			ОбновитьСтатусПрежнейЗаявки(ЗаявкаЗадание, Ложь, Истина);
			
			ЗаявкаОбъект = ЗаявкаЗадание.ПолучитьОбъект();
			ЗаявкаОбъект.ОтветПоЗаявке = НСтр("ru = 'Отменена сотрудником.';
												|en = 'Отменена сотрудником.'");
			ЗаявкаОбъект.Записать();
			
			Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда 
				ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
				ЗадачаОбъект.Исполнитель 			= Исполнитель;
				ЗадачаОбъект.Выполнена 				= Ложь;
				ЗадачаОбъект.ДатаИсполнения 		= ТекущаяДатаСеанса();
				ЗадачаОбъект.РезультатВыполнения 	= НСтр("ru = 'Задача выполнена. Отменена сотрудником.';
															|en = 'Задача выполнена. Отменена сотрудником.'");
				ЗадачаОбъект.ВыполнитьЗадачу();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОтправкуФайловСправокДокументов(Объект, РезультатВыполненияЗаявки, Отказ) Экспорт

	Если РезультатВыполненияЗаявки.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена
		И Объект.ОтправлятьEmail И ЗначениеЗаполнено(Объект.АдресEmail) Тогда
		
		Справки = Объект.ДокументыПоЗаявке.Выгрузить().ВыгрузитьКолонку("ДокументСсылка");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Справки", Справки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ОснованиеДокумента В(&Справки)
		|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления";
		
		ФайлыЗаявки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
		РегистрыСведений.ФайлыДляОтправкиНаПочтуКабинетСотрудника.ЗарегистрироватьФайлы(Объект.Ссылка, ФайлыЗаявки, Объект.АдресEmail);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОтправкуФайловСправокЗаявки(Объект, РезультатВыполненияЗаявки, Отказ) Экспорт

	Если РезультатВыполненияЗаявки.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена
		И Объект.ОтправлятьEmail И ЗначениеЗаполнено(Объект.АдресEmail) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОснованиеДокумента", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ОснованиеДокумента = &ОснованиеДокумента
		|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления";
		
		ФайлыЗаявки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
		РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ФайлыЗаявки, "ФайлОтвета");
		ФайлыДляРегистрации = Новый Массив;
		Для каждого КлючИЗначение Из РеквизитыФайлов Цикл
			ФайлДляРегистрации = КлючИЗначение.Ключ;
			РеквизитыФайла = КлючИЗначение.Значение;
			Если РеквизитыФайла.ФайлОтвета Тогда
				ФайлыДляРегистрации.Добавить(ФайлДляРегистрации);
			КонецЕсли;
		КонецЦикла;
		РегистрыСведений.ФайлыДляОтправкиНаПочтуКабинетСотрудника.ЗарегистрироватьФайлы(Объект.Ссылка, ФайлыДляРегистрации, Объект.АдресEmail);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСРолямиИсполнителейЗадач

Функция РолиИсполнителейЗадач() Экспорт

	Роли = Новый Массив;
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий);
	Если ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал() Тогда
		Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков);
		Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы);
		Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаУдержаниеДСВ);
	КонецЕсли;
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников);
	
	Возврат Роли;

КонецФункции

Функция ДоступныеРолиИсполнителейЗадач() Экспорт
	
	Роли = РолиИсполнителейЗадач();
	Если Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.2") Тогда
		РольНаУдаление = Роли.Найти(Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников);
		Роли.Удалить(РольНаУдаление);
	КонецЕсли;
	
	Если ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал() Тогда
		Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		Если Не Настройки.ЗаявленияНаДСВ Тогда
			РольНаУдаление = Роли.Найти(Справочники.РолиИсполнителей.ОтветственныйЗаУдержаниеДСВ);
			Роли.Удалить(РольНаУдаление);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Роли;

КонецФункции

Функция ИспользуетсяДополнительнаяАдресация() Экспорт

	Возврат ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.2");

КонецФункции

Функция ШаблоныДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	НЕ ШаблоныДокументов.ПометкаУдаления
	|	И НЕ ШаблоныДокументов.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныДокументов.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область НачальноеЗаполнениеИсполнителейЗадач

// Установка значений реквизитов предопределенных элементов справочника РолиИсполнителей,
// относящихся к обработке заявок сотрудников.
//
Процедура ИнициализироватьРолиИсполнителей() Экспорт
	
	РолиИсполнителейЗадач = РолиИсполнителейЗадач();
	
	Отбор = ОбновлениеИнформационнойБазы.ПараметрыОбновленияПредопределенныхЭлементов();
	Отбор.Элементы = РолиИсполнителейЗадач;
	
	ОбновлениеИнформационнойБазы.ОбновитьПредопределенныеЭлементы(Метаданные.Справочники.РолиИсполнителей, Отбор);
	
КонецПроцедуры

Процедура НачальноеЗаполнениеИсполнителейЗадач(Исполнитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РолиИсполнителейЗадач = РолиИсполнителейЗадач();
	Подразделения = ПодразделенияДляНачальногоЗаполненияИсполнителейЗадач();
	
	ШаблоныДокументов = Новый Массив;
	Если ИспользуетсяДополнительнаяАдресация() Тогда
		ШаблоныДокументов = ШаблоныДокументов();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	Для каждого Роль Из РолиИсполнителейЗадач Цикл
		НаборЗаписей.Очистить();
		Если Роль = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
			Для каждого ШаблонДокумента Из ШаблоныДокументов Цикл
				Для каждого СтрокаТЗ Из Подразделения Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.РольИсполнителя 				= Роль;
					НоваяЗапись.Исполнитель 					= Исполнитель;
					НоваяЗапись.ОсновнойОбъектАдресации 		= СтрокаТЗ.Ссылка;
					НоваяЗапись.ДополнительныйОбъектАдресации 	= ШаблонДокумента;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из Подразделения Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РольИсполнителя = Роль;
				НоваяЗапись.Исполнитель = Исполнитель;
				НоваяЗапись.ОсновнойОбъектАдресации = СтрокаТЗ.Ссылка;
			КонецЦикла;
		КонецЕсли;
		НаборЗаписей.Отбор.РольИсполнителя.Установить(Роль);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	Настройки.Координатор = Исполнитель;
	РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.СохранитьНастройки(Настройки);
	
КонецПроцедуры

Функция ПодразделенияДляНачальногоЗаполненияИсполнителейЗадач()
	
	Запрос = Новый Запрос;
	
	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.Предопределенный
		|	И НЕ Организации.ПометкаУдаления";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ЗаписьНастроекПравилОбработкиЗаявок

Процедура ЗаполнитьСтрокиТаблицыИсполнителиЗадач(ТаблицаИсполнителиЗадач, СтрокаТЗ, КоллекцияСтрокДерева, ДетализацияПоПодразделениям, ОбновитьВсеПравила)
	
	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		Если ОбновитьВсеПравила Или Не ДетализацияПоПодразделениям Или СтрокаДерева.ИзмененыИсполнители Тогда
			НоваяСтрока = ТаблицаИсполнителиЗадач.Добавить();
			НоваяСтрока.РольИсполнителя 		= СтрокаТЗ.РольИсполнителя;
			НоваяСтрока.ОсновнойОбъектАдресации = СтрокаДерева.Подразделение;
			Если СтрокаТЗ.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
				НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаТЗ.ШаблонДокумента;
			КонецЕсли;
			Если ДетализацияПоПодразделениям Тогда
				НоваяСтрока.Исполнители = СтрокаДерева.Исполнители.ВыгрузитьЗначения();
			Иначе
				НоваяСтрока.Исполнители = СтрокаТЗ.Исполнители.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиТаблицыИсполнителиЗадач(ТаблицаИсполнителиЗадач, СтрокаТЗ, СтрокаДерева.Строки, ДетализацияПоПодразделениям, ОбновитьВсеПравила);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиТаблицыНовыеПравила(ТаблицаПравил, СтрокаТЗ, КоллекцияСтрокДерева)

	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		НоваяСтрока = ТаблицаПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, "РольИсполнителя,ШаблонДокумента");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева, "Подразделение,ДнейНаИсполнение,ТребуетсяПодпись,ИзмененыПравила");
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиТаблицыНовыеПравила(ТаблицаПравил, СтрокаТЗ, СтрокаДерева.Строки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьНастройкиПравилОбработки(ПараметрыНастроек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуетсяДополнительнаяАдресация = ЗаявкиСотрудников.ИспользуетсяДополнительнаяАдресация();
	
	НастройкиПравилОбработки 	= ПараметрыНастроек.НастройкиПравилОбработкиЗаявок;
	НастройкиПравил 			= ПараметрыНастроек.НастройкиПравил;
	
	// Обработка данных для записи правил - ТаблицаПравилДляЗаписи.
	ТаблицаПравилДляЗаписи = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ПравилаОбработкиЗаявокКабинетСотрудника");
	ТаблицаНовыеПравила = ТаблицаПравилДляЗаписи.СкопироватьКолонки();
	ТаблицаНовыеПравила.Колонки.Добавить("ИзмененыПравила", Новый ОписаниеТипов("Булево"));
	Если Не НастройкиПравилОбработки.ИспользоватьДетализациюПоПодразделениям Тогда
		Для каждого СтрокаТЗ Из НастройкиПравил Цикл
			НоваяСтрока = ТаблицаНовыеПравила.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
	Иначе
		Для каждого СтрокаТЗ Из НастройкиПравил Цикл
			ЗаполнитьСтрокиТаблицыНовыеПравила(ТаблицаНовыеПравила, СтрокаТЗ, СтрокаТЗ.ПоПодразделениям.Строки);
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеНастройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	ОбновитьВсеПравила = (НастройкиПравилОбработки.ИспользоватьДетализациюПоПодразделениям <> ТекущиеНастройки.ИспользоватьДетализациюПоПодразделениям);
	Если ОбновитьВсеПравила Тогда
		ТаблицаПравилДляЗаписи = ТаблицаНовыеПравила;
	Иначе
		Отбор = Новый Структура("ИзмененыПравила", Истина);
		ТаблицаПравилДляЗаписи = ТаблицаНовыеПравила.Скопировать(Отбор);
	КонецЕсли;
	
	// Обработка данных для записи исполнителей задач - ТаблицаИсполнителиДляЗаписи.
	ТаблицаИсполнителиДляЗаписи = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ИсполнителиЗадач");
	ТаблицаИсполнителиДляЗаписи.Колонки.Добавить("Исполнители");
	Для каждого СтрокаТЗ Из НастройкиПравил Цикл
		Если Не ОбновитьВсеПравила И Не СтрокаТЗ.ИзмененыИсполнители И Не НастройкиПравилОбработки.ИспользоватьДетализациюПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьСтрокиТаблицыИсполнителиЗадач(ТаблицаИсполнителиДляЗаписи, СтрокаТЗ,  СтрокаТЗ.ПоПодразделениям.Строки,
			НастройкиПравилОбработки.ИспользоватьДетализациюПоПодразделениям, ОбновитьВсеПравила);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника");
		Если ОбновитьВсеПравила Тогда
			Блокировка.Добавить("РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника");
		ИначеЕсли ТаблицаПравилДляЗаписи.Количество() > 0 Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ТаблицаПравилДляЗаписи;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РольИсполнителя", "РольИсполнителя");
		КонецЕсли;
		Если ТаблицаИсполнителиДляЗаписи.Количество() > 0 Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИсполнителиЗадач");
			ЭлементБлокировки.ИсточникДанных = ТаблицаИсполнителиДляЗаписи;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РольИсполнителя", "РольИсполнителя");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОсновнойОбъектАдресации", "ОсновнойОбъектАдресации");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДополнительныйОбъектАдресации", "ДополнительныйОбъектАдресации");
		КонецЕсли;
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.СохранитьНастройки(НастройкиПравилОбработки);
		
		Если ОбновитьВсеПравила Тогда
			НаборЗаписей = РегистрыСведений.ПравилаОбработкиЗаявокКабинетСотрудника.СоздатьНаборЗаписей();
			Для каждого СтрокаТЗ Из ТаблицаПравилДляЗаписи Цикл
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
			КонецЦикла;
			НаборЗаписей.Записать();
		Иначе
			Для каждого СтрокаТЗ Из ТаблицаПравилДляЗаписи Цикл
				НаборЗаписей = РегистрыСведений.ПравилаОбработкиЗаявокКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.РольИсполнителя.Установить(СтрокаТЗ.РольИсполнителя);
				Если ЗначениеЗаполнено(СтрокаТЗ.ШаблонДокумента) Тогда
					НаборЗаписей.Отбор.ШаблонДокумента.Установить(СтрокаТЗ.ШаблонДокумента);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЗ.Подразделение) Тогда
					НаборЗаписей.Отбор.Подразделение.Установить(СтрокаТЗ.Подразделение);
				КонецЕсли;
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из ТаблицаИсполнителиДляЗаписи Цикл
			НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РольИсполнителя.Установить(СтрокаТЗ.РольИсполнителя);
			НаборЗаписей.Отбор.ОсновнойОбъектАдресации.Установить(СтрокаТЗ.ОсновнойОбъектАдресации);
			НаборЗаписей.Отбор.ДополнительныйОбъектАдресации.Установить(СтрокаТЗ.ДополнительныйОбъектАдресации);
			Для каждого Исполнитель Из СтрокаТЗ.Исполнители Цикл
				Если Не ЗначениеЗаполнено(Исполнитель) Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
				ЗаписьНабора.Исполнитель = Исполнитель;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

Процедура СоздатьЗаявкиОтпускПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.ИдентификаторЭлектронногоДокумента КАК ИдентификаторЭлектронногоДокумента,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника,
	|	Таблица.ЗаСвойСчет КАК ЗаСвойСчет
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаОтпуск КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,Сотрудник,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки,ИдентификаторЭлектронногоДокумента");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			
			Если Не ОбщегоНазначения.СсылкаСуществует(НовыйДокумент.Сотрудник) Тогда
				НовыйДокумент.Сотрудник = Неопределено;
			КонецЕсли;
			
			Если Выборка.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.КомпенсацияОтпуска;
			ИначеЕсли Выборка.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.УчебныйОтпуск;
			ИначеЕсли Выборка.ЗаСвойСчет Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОтпускБезОплаты;
			Иначе
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Отпуск;
			КонецЕсли;
			НовыйДокумент.ТипЗаявки = ТипЗаявки;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиЛичныеДанныеПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаИзменитьЛичныеДанные КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			НовыйДокумент.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиНалоговыйВычетПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаНалоговыйВычет КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			НовыйДокумент.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиСправкиНДФЛПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			НовыйДокумент.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиОбращенияПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ОбращениеСотрудника КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			НовыйДокумент.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОбращениеСотрудника;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиБолезньПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.ИдентификаторЭлектронногоДокумента КАК ИдентификаторЭлектронногоДокумента,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ПоБеременности КАК ПоБеременности,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаОтсутствиеПоБолезни КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			
			Если Выборка.ПоБеременности Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам;
			Иначе
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Болезнь;
			КонецЕсли;
			НовыйДокумент.ТипЗаявки = ТипЗаявки;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПравилаОбработкиЗаявок(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника")
		Или Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.0") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Правила.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника КАК Правила";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПервыеЭтапыЗаявок = ПервыеЭтапыЗаявок();
	Запрос.УстановитьПараметр("Этапы", ПервыеЭтапыЗаявок);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыеПравила.РольИсполнителя КАК РольИсполнителя,
	|	СтарыеПравила.Подразделение КАК Подразделение,
	|	СтарыеПравила.СрокЗадачи КАК ДнейНаИсполнение,
	|	СтарыеПравила.ТребуетсяПодпись КАК ТребуетсяПодпись
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК СтарыеПравила
	|ГДЕ
	|	СтарыеПравила.Этап В(&Этапы)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПравилаОбработки = РезультатЗапроса.Выгрузить();
	
	ИспользуетсяДополнительнаяАдресация = ИспользуетсяДополнительнаяАдресация();
	ШаблоныДокументов = Новый Массив;
	Если ИспользуетсяДополнительнаяАдресация Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|ГДЕ
		|	НЕ ШаблоныДокументов.ПометкаУдаления
		|	И НЕ ШаблоныДокументов.Предопределенный
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШаблоныДокументов.Наименование";
		ШаблоныДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ПравилаОбработки Цикл
	
		НаборЗаписей = РегистрыСведений.ПравилаОбработкиЗаявокКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РольИсполнителя.Установить(СтрокаТЗ.РольИсполнителя);
		НаборЗаписей.Отбор.Подразделение.Установить(СтрокаТЗ.Подразделение);
		
		Если ИспользуетсяДополнительнаяАдресация
			И СтрокаТЗ.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
			Для каждого ШаблонДокумента Из ШаблоныДокументов Цикл
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
				ЗаписьНабора.ШаблонДокумента = ШаблонДокумента;
			КонецЦикла;
			Если НаборЗаписей.Количество() > 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	КонецЦикла;
	
	Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	Настройки.ДнейНаИсполнение = 7;
	Настройки.ЗавершатьЗаявкиПослеПодписанияСправки = Константы.ЗавершатьЗаявкиСотрудниковПослеПодписанияСправки.Получить();
	Настройки.ИспользоватьДетализациюПоПодразделениям = ЗначениеЗаполнено(ПравилаОбработки[0].Подразделение);
	
	НаборЗаписей = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, Настройки);
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура ЗаполнитьОбъектДополнительнойАдресации(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника")
		Или Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.2") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	НЕ ШаблоныДокументов.ПометкаУдаления
	|	И НЕ ШаблоныДокументов.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныДокументов.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	ШаблоныДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
	|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = НЕОПРЕДЕЛЕНО";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	ИсполнителиЗадач = Запрос.Выполнить().Выгрузить();
	
	
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
		ПараметрыОбновления, "РегистрСведений.ИсполнителиЗадач", "РольИсполнителя", Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Возврат;
	КонецЕсли;
	
	Для Каждого ШаблонДокумента Из ШаблоныДокументов Цикл
		
		Для Каждого СтрокаТЗ Из ИсполнителиЗадач Цикл
			
			НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РольИсполнителя.Установить(СтрокаТЗ.РольИсполнителя);
			НаборЗаписей.Отбор.Исполнитель.Установить(СтрокаТЗ.Исполнитель);
			НаборЗаписей.Отбор.ОсновнойОбъектАдресации.Установить(СтрокаТЗ.ОсновнойОбъектАдресации);
			НаборЗаписей.Отбор.ДополнительныйОбъектАдресации.Установить(ШаблонДокумента);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
			ЗаписьНабора.ДополнительныйОбъектАдресации = ШаблонДокумента;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура ОчиститьПустыеДокументыПоЗаявкам(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеДокументыПоЗаявкам", ПустыеЗначенияДокументПоЗаявке());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ДокументыПоЗаявкам.Заявка КАК Заявка
	|ИЗ
	|	РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|ГДЕ
	|	ДокументыПоЗаявкам.ДокументПоЗаявке В(&ПустыеДокументыПоЗаявкам)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументыПоЗаявкамОтпускПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПустыеЗначенияДокументПоЗаявке = Новый Массив;
	ПустыеЗначенияДокументПоЗаявке.Добавить(Неопределено);
	ПустыеЗначенияДокументПоЗаявке.Добавить(Null);
	Для Каждого ТипДокументПоЗаявке Из Метаданные.ОпределяемыеТипы.ДокументОтпускЗаявкаСотрудника.Тип.Типы() Цикл
		ПустыеЗначенияДокументПоЗаявке.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументПоЗаявке).ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеЗначенияДокументПоЗаявке", ПустыеЗначенияДокументПоЗаявке);
	Запрос.УстановитьПараметр("ДопустимыеТипы", ДопустимыеТипыДокументовПоЗаявкам());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.Ссылка КАК Задание,
	|	Заявки.Ссылка КАК Заявка
	|ПОМЕСТИТЬ ВТЗаявкиКОбработке
	|ИЗ
	|	Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаОтпуск КАК Таблица
	|		ПО Заявки.Задание = Таблица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|		ПО Заявки.Ссылка = ДокументыПоЗаявкам.Заявка
	|ГДЕ
	|	ДокументыПоЗаявкам.НеподтвержденнаяЗапись ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявки.Заявка КАК Заявка,
	|	ДокументыПоЗаявке.Отпуск КАК ДокументПоЗаявке
	|ИЗ
	|	ВТЗаявкиКОбработке КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаОтпуск.Отпуска КАК ДокументыПоЗаявке
	|		ПО Заявки.Задание = ДокументыПоЗаявке.Ссылка
	|ГДЕ
	|	НЕ ДокументыПоЗаявке.Отпуск В (&ПустыеЗначенияДокументПоЗаявке)
	|	И ТИПЗНАЧЕНИЯ(ДокументыПоЗаявке.Отпуск) В (&ДопустимыеТипы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заявка,
	|	ДокументПоЗаявке";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Заявка") Цикл
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументыПоЗаявкамНалоговыйВычетПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПустыеЗначенияДокументПоЗаявке = Новый Массив;
	ПустыеЗначенияДокументПоЗаявке.Добавить(Неопределено);
	ПустыеЗначенияДокументПоЗаявке.Добавить(Null);
	Для Каждого ТипДокументПоЗаявке Из Метаданные.БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет.Реквизиты.ЗаявлениеНаВычет.Тип.Типы() Цикл
		ПустыеЗначенияДокументПоЗаявке.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументПоЗаявке).ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеЗначенияДокументПоЗаявке", ПустыеЗначенияДокументПоЗаявке);
	Запрос.УстановитьПараметр("ДопустимыеТипы", ДопустимыеТипыДокументовПоЗаявкам());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Заявки.Ссылка КАК Заявка,
	|	Таблица.ЗаявлениеНаВычет КАК ДокументПоЗаявке
	|ИЗ
	|	Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаНалоговыйВычет КАК Таблица
	|		ПО Заявки.Задание = Таблица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|		ПО Заявки.Ссылка = ДокументыПоЗаявкам.Заявка
	|ГДЕ
	|	ДокументыПоЗаявкам.НеподтвержденнаяЗапись ЕСТЬ NULL
	|	И НЕ Таблица.ЗаявлениеНаВычет В (&ПустыеЗначенияДокументПоЗаявке)
	|	И ТИПЗНАЧЕНИЯ(Таблица.ЗаявлениеНаВычет) В (&ДопустимыеТипы)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументыПоЗаявкамСправкиНДФЛПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПустыеЗначенияДокументПоЗаявке = Новый Массив;
	ПустыеЗначенияДокументПоЗаявке.Добавить(Неопределено);
	ПустыеЗначенияДокументПоЗаявке.Добавить(Null);
	Для Каждого ТипДокументПоЗаявке Из Метаданные.БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.ТабличныеЧасти.СправкиНДФЛ.Реквизиты.СправкаНДФЛ.Тип.Типы() Цикл
		ПустыеЗначенияДокументПоЗаявке.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументПоЗаявке).ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеЗначенияДокументПоЗаявке", ПустыеЗначенияДокументПоЗаявке);
	Запрос.УстановитьПараметр("ДопустимыеТипы", ДопустимыеТипыДокументовПоЗаявкам());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.Ссылка КАК Задание,
	|	Заявки.Ссылка КАК Заявка,
	|	Таблица.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета
	|ПОМЕСТИТЬ ВТЗаявкиКОбработке
	|ИЗ
	|	Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ КАК Таблица
	|		ПО Заявки.Задание = Таблица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|		ПО Заявки.Ссылка = ДокументыПоЗаявкам.Заявка
	|ГДЕ
	|	ДокументыПоЗаявкам.НеподтвержденнаяЗапись ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявки.Заявка КАК Заявка,
	|	ДокументыПоЗаявке.СправкаНДФЛ КАК ДокументПоЗаявке,
	|	Заявки.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета
	|ИЗ
	|	ВТЗаявкиКОбработке КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ.СправкиНДФЛ КАК ДокументыПоЗаявке
	|		ПО Заявки.Задание = ДокументыПоЗаявке.Ссылка
	|ГДЕ
	|	НЕ ДокументыПоЗаявке.СправкаНДФЛ В (&ПустыеЗначенияДокументПоЗаявке)
	|	И ТИПЗНАЧЕНИЯ(ДокументыПоЗаявке.СправкаНДФЛ) В (&ДопустимыеТипы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заявка,
	|	ДокументПоЗаявке";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Заявка") Цикл
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументыПоЗаявкамБолезньПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПустыеЗначенияДокументПоЗаявке = Новый Массив;
	ПустыеЗначенияДокументПоЗаявке.Добавить(Неопределено);
	ПустыеЗначенияДокументПоЗаявке.Добавить(Null);
	Для Каждого ТипДокументПоЗаявке Из Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.Реквизиты.БольничныйЛист.Тип.Типы() Цикл
		ПустыеЗначенияДокументПоЗаявке.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументПоЗаявке).ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеЗначенияДокументПоЗаявке", ПустыеЗначенияДокументПоЗаявке);
	Запрос.УстановитьПараметр("ДопустимыеТипы", ДопустимыеТипыДокументовПоЗаявкам());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Заявки.Ссылка КАК Заявка,
	|	Таблица.БольничныйЛист КАК ДокументПоЗаявке
	|ИЗ
	|	Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаОтсутствиеПоБолезни КАК Таблица
	|		ПО Заявки.Задание = Таблица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|		ПО Заявки.Ссылка = ДокументыПоЗаявкам.Заявка
	|ГДЕ
	|	ДокументыПоЗаявкам.НеподтвержденнаяЗапись ЕСТЬ NULL
	|	И НЕ Таблица.БольничныйЛист В (&ПустыеЗначенияДокументПоЗаявке)
	|	И ТИПЗНАЧЕНИЯ(Таблица.БольничныйЛист) В (&ДопустимыеТипы)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ЭтоСогласуемаяЗаявка(Заявка) Экспорт

	Возврат Метаданные.ОпределяемыеТипы.СогласуемыеЗаявкиКабинетСотрудника.Тип.СодержитТип(ТипЗнч(Заявка));

КонецФункции

Функция СвязанныеЗаявкиСотрудника(Заявка, ИдентификаторЗаявки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Заявка); 
	Запрос.УстановитьПараметр("ИдентификаторЗаявки", ИдентификаторЗаявки);
	Запрос.УстановитьПараметр("Выполнена", НСтр("ru = 'Выполнена';
												|en = 'Выполнена'"));
	Запрос.УстановитьПараметр("Отклонена", НСтр("ru = 'Отклонена';
												|en = 'Отклонена'"));
	Запрос.УстановитьПараметр("НаВыполнении", НСтр("ru = 'На выполнении';
													|en = 'На выполнении'"));
	Запрос.УстановитьПараметр("Аннулирована", НСтр("ru = 'Аннулирована';
													|en = 'Аннулирована'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ссылка,
	|	Заявка.РезультатВыполнения КАК РезультатВыполнения,
	|	ВЫБОР
	|		КОГДА Заявка.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена)
	|			ТОГДА &Выполнена
	|		КОГДА Заявка.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена)
	|			ТОГДА &Отклонена
	|		КОГДА Заявка.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована)
	|			ТОГДА &Аннулирована
	|		ИНАЧЕ &НаВыполнении
	|	КОНЕЦ КАК СостояниеЗаявки
	|ИЗ
	|	#Таблица КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка <> &Ссылка
	|	И Заявка.ИдентификаторЗаявки = &ИдентификаторЗаявки
	|	И НЕ Заявка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заявка.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ОбщегоНазначения.ИмяТаблицыПоСсылке(Заявка));
	
	УстановитьПривилегированныйРежим(Истина);
	ВсеЗаявки = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СвязанныеЗаявки = ВсеЗаявки.СкопироватьКолонки();
	СвязанныеЗаявки.Колонки.Добавить("ПредставлениеНедоступна");
	Если Не ЗначениеЗаполнено(ВсеЗаявки) Тогда
		Возврат СвязанныеЗаявки;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	ДоступныеЗаявки = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из ВсеЗаявки Цикл
		Если ДоступныеЗаявки.Найти(СтрокаТЗ.Ссылка, "Ссылка") <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СвязанныеЗаявки.Добавить(), СтрокаТЗ);
		Иначе
			НоваяСтрока = СвязанныеЗаявки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,"Ссылка");
			НоваяСтрока.ПредставлениеНедоступна = НСтр("ru = '<заявка недоступна>';
														|en = '<заявка недоступна>'")
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвязанныеЗаявки;
	
КонецФункции

Функция ТребуетсяПодписьПриВыполненииЗаявки(Заявка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заявка);
	РольИсполнителя = ДокументМенеджер.РольИсполнителяЗаявки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	
	Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	Если Настройки.ИспользоватьДетализациюПоПодразделениям Тогда
		Запрос.УстановитьПараметр("Предмет", Заявка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Задания.ОсновнойОбъектАдресации КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделения
		|ИЗ
		|	БизнесПроцесс.ИсполнениеЗаявкиСотрудника КАК Задания
		|ГДЕ
		|	Задания.Предмет = &Предмет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Правила.ТребуетсяПодпись КАК ТребуетсяПодпись
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника КАК Правила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК Подразделения
		|		ПО Правила.Подразделение = Подразделения.Подразделение
		|ГДЕ
		|	Правила.РольИсполнителя = &РольИсполнителя";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Правила.ТребуетсяПодпись КАК ТребуетсяПодпись
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника КАК Правила
		|ГДЕ
		|	Правила.РольИсполнителя = &РольИсполнителя";
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ТребуетсяПодпись")[0];
	КонецЕсли;

КонецФункции

Процедура ЗарегистрироватьРезультатСогласованияЗаявки(Заявка, РезультатСогласования) Экспорт

	Если Не ЭтоСогласуемаяЗаявка(Заявка) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.РезультатыСогласованияЗаявокКабинетСотрудника.СоздатьМенеджерЗаписи();
	Запись.Заявка = Заявка;
	Запись.Подписант 				= РезультатСогласования.Подписант;
	Запись.РольПодписанта 			= РезультатСогласования.РольПодписанта;
	Запись.ДатаСогласования 		= РезультатСогласования.ДатаПодписи;
	Запись.РезультатСогласования 	= РезультатСогласования.РезультатСогласования;
	Запись.Записать();

КонецПроцедуры

Процедура СоздатьДокументКЭДОСправкаСотруднику(Организация, ФизическоеЛицо, ОснованиеДокумента, ЭлектронныйДокумент, РегистрироватьИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеСоставаОбъекта = Документы.ДокументКадровогоЭДО.СвойстваДокумента(
		ЭлектронныйДокумент, Организация, ФизическоеЛицо, ОснованиеДокумента,
		Перечисления.КатегорииДокументовКадровогоЭДО.СправкаСотруднику,,,, Перечисления.ВариантыПодписанияДокументовКЭДО.НеТребуется);
		
	ОписаниеСоставаОбъекта.Внешний = Истина;
	ОписаниеСоставаОбъекта.ДополнительныеСвойства = Новый Структура("РегистрироватьИзмененияКабинетСотрудника", РегистрироватьИзменения);
	Документы.ДокументКадровогоЭДО.Добавить(ОписаниеСоставаОбъекта);

КонецПроцедуры

Процедура ЗарегистрироватьДокументКЭДОКВыгрузке(ЭлектронныйДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	НЕ ДокументКадровогоЭДО.ПометкаУдаления
	|	И ДокументКадровогоЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	ДокументыКЭДО = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из ДокументыКЭДО Цикл
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
		МенеджерЗаписи.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
	КонецЦикла;

КонецПроцедуры

Функция ТипЗаявкаСотрудникаСправкаСМестаРаботы() Экспорт

	Возврат ЗаявкиСотрудниковВнутренний.ТипЗаявкаСотрудникаСправкаСМестаРаботы();

КонецФункции

Функция ДоступныеТипыЗаявок() Экспорт

	ТипыЗаявок = Новый Массив;
	ТипыЗаявок.Добавить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск);
	ТипыЗаявок.Добавить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия);
	Если ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.2") Тогда
		ТипыЗаявок.Добавить(Перечисления.ТипыЗаявокКабинетСотрудника.ОбращениеСотрудника);
	КонецЕсли;
	
	Возврат ТипыЗаявок;

КонецФункции

Процедура ВыполнитьПереходНаВерсиюDTO_2_0() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Правила.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника КАК Правила";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПервыеЭтапыЗаявок = ПервыеЭтапыЗаявок();
	Запрос.УстановитьПараметр("Этапы", ПервыеЭтапыЗаявок);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыеПравила.РольИсполнителя КАК РольИсполнителя,
	|	СтарыеПравила.Подразделение КАК Подразделение,
	|	СтарыеПравила.СрокЗадачи КАК ДнейНаИсполнение,
	|	СтарыеПравила.ТребуетсяПодпись КАК ТребуетсяПодпись
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК СтарыеПравила
	|ГДЕ
	|	СтарыеПравила.Этап В(&Этапы)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаОбработки = РезультатЗапроса.Выгрузить();
	НаборЗаписей = РегистрыСведений.ПравилаОбработкиЗаявокКабинетСотрудника.СоздатьНаборЗаписей();
	Для каждого СтрокаТЗ Из ПравилаОбработки Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
	КонецЦикла;
	НаборЗаписей.Записать();
	
	Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	Настройки.ДнейНаИсполнение = 7;
	Настройки.ЗавершатьЗаявкиПослеПодписанияСправки = Константы.ЗавершатьЗаявкиСотрудниковПослеПодписанияСправки.Получить();
	Настройки.ИспользоватьДетализациюПоПодразделениям = ЗначениеЗаполнено(ПравилаОбработки[0].Подразделение);
	
	НаборЗаписей = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, Настройки);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПервыеЭтапыЗаявок()

	Этапы = Новый Массив;
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.СогласованиеКадрыИзменитьЛичныеДанные);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.ОбработкаОбращенияСотрудника);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.СогласованиеКадрыДобровольныеСтраховыеВзносы);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.СогласованиеКадрыНалоговыйВычет);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствиеПоБолезни);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтпуск);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствие);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.ФормированиеСправка2НДФЛ);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.ФормированиеСправкаОстаткиОтпусков);
	Этапы.Добавить(Справочники.ЭтапыЗаявокСотрудников.ФормированиеСправкаСМестаРаботы);
	
	Возврат Этапы;

КонецФункции

Процедура ЗарегистрироватьДокументыПоЗаявкеПредварительно(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПоЗаявкам.Заявка КАК Заявка,
	|	ДокументыПоЗаявкам.ДокументПоЗаявке КАК ДокументПоЗаявке,
	|	ДокументыПоЗаявкам.НеподтвержденнаяЗапись КАК НеподтвержденнаяЗапись,
	|	ДокументыПоЗаявкам.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	ДокументыПоЗаявкам.ДатаЗаписи КАК ДатаЗаписи
	|ИЗ
	|	РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|ГДЕ
	|	ДокументыПоЗаявкам.Заявка = &Заявка";
	
	УстановитьПривилегированныйРежим(Истина);
	ДокументыПоЗаявке = Запрос.Выполнить().Выгрузить();
	
	ОбновитьДокументыПоЗаявке = Ложь;
	СтрокиКУдалению = Новый Массив;
	Отбор = Новый Структура("ДокументСсылка");
	Для каждого СтрокаТЗ Из ДокументыПоЗаявке Цикл
		Если СтрокаТЗ.НеподтвержденнаяЗапись Тогда
			Отбор.ДокументСсылка = СтрокаТЗ.ДокументПоЗаявке;
			Если Не ЗначениеЗаполнено(Объект.ДокументыПоЗаявке.НайтиСтроки(Отбор)) Тогда
				СтрокиКУдалению.Добавить(СтрокаТЗ);
				ОбновитьДокументыПоЗаявке = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
		ДокументыПоЗаявке.Удалить(СтрокаТЗ);
	КонецЦикла;
	
	ДатаЗаписи = ТекущаяДатаСеанса();
	Для каждого СтрокаТЧ Из Объект.ДокументыПоЗаявке Цикл
		НайденнаяСтрока = ДокументыПоЗаявке.Найти(СтрокаТЧ.ДокументСсылка, "ДокументПоЗаявке");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ДокументыПоЗаявке.Добавить();
			НоваяСтрока.Заявка 					= Объект.Ссылка;
			НоваяСтрока.ДокументПоЗаявке 		= СтрокаТЧ.ДокументСсылка;
			НоваяСтрока.НеподтвержденнаяЗапись 	= Истина;
			НоваяСтрока.ДатаЗаписи 				= ДатаЗаписи;
			НоваяСтрока.ВариантФормированияФайлаОтвета = Объект.ВариантФормированияФайлаОтвета;
			ОбновитьДокументыПоЗаявке = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновитьДокументыПоЗаявке Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("Заявка", Объект.Ссылка);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Объект.Ссылка);
			Для каждого СтрокаТЗ Из ДокументыПоЗаявке Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ШаблонОписания = НСтр("ru = 'Ошибка регистрации документа по заявке.
			|%1';
			|en = 'Ошибка регистрации документа по заявке.
			|%1'");
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Функция ДопустимыеТипыДокументовПоЗаявкам() Экспорт
	
	ДопустимыеТипы = Новый Массив;
	Для Каждого ДопустимыйТип Из Метаданные.ОпределяемыеТипы.ДокументыПоЗаявкомКабинетСотрудника.Тип.Типы() Цикл
		ДопустимыеТипы.Добавить(ДопустимыйТип);
	КонецЦикла;
	
	Возврат ДопустимыеТипы;
	
КонецФункции

Функция ПустыеЗначенияДокументПоЗаявке()
	
	ПустыеЗначенияДокументПоЗаявке = Новый Массив;
	ПустыеЗначенияДокументПоЗаявке.Добавить(Неопределено);
	ПустыеЗначенияДокументПоЗаявке.Добавить(Null);
	Для Каждого ТипДокументПоЗаявке Из Метаданные.ОпределяемыеТипы.ДокументыПоЗаявкомКабинетСотрудника.Тип.Типы() Цикл
		ПустыеЗначенияДокументПоЗаявке.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументПоЗаявке).ПустаяСсылка());
	КонецЦикла;
	
	Возврат ПустыеЗначенияДокументПоЗаявке;
	
КонецФункции

#КонецОбласти

#КонецОбласти