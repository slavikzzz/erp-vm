#Область СлужебныеПроцедурыИФункции

Функция ТаблицаДокументы(Документ = Неопределено) Экспорт
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка",              Метаданные.Справочники.ИСМППрисоединенныеФайлы.Реквизиты.Документ.Тип);
	ТаблицаДокументы.Колонки.Добавить("Статус",              Метаданные.РегистрыСведений.СтатусыДокументовИСМП.Ресурсы.Статус.Тип);
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие1", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие2", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие3", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП"));
	
	Если Документ <> Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Документ            КАК Ссылка,
		|	Таблица.Статус              КАК Статус,
		|	Таблица.ДальнейшееДействие1 КАК ДальнейшееДействие1,
		|	Таблица.ДальнейшееДействие2 КАК ДальнейшееДействие2,
		|	Таблица.ДальнейшееДействие3 КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Таблица
		|ГДЕ
		|	Таблица.Документ = &ДокументСсылка
		|");
		
		Запрос.УстановитьПараметр("ДокументСсылка", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДокументы;
	
КонецФункции

Процедура ЗаполнитьПоДокументу(Форма, ТаблицаДокументы, ОтображатьСИерархией = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
	|ИЗ
	|	&ТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.ДатаМодификацииУниверсальная       КАК ДатаМодификацииУниверсальная,
	|	ИСМППрисоединенныеФайлы.Документ                           КАК Документ,
	|	ИСМППрисоединенныеФайлы.Ссылка                             КАК Ссылка,
	|	&ВидПродукцииЗаказНаЭмиссию                                КАК ВидПродукции,
	|	ИСМППрисоединенныеФайлы.ТипСообщения                       КАК ТипСообщения,
	|	ИСМППрисоединенныеФайлы.Операция                           КАК Операция,
	|	ИСМППрисоединенныеФайлы.СтатусОбработки                    КАК СтатусОбработки,
	|	
	|	// Версия и Описание - из присоединенных файлов
	|	ВЫРАЗИТЬ(ИСМППрисоединенныеФайлы.Описание КАК Строка(255)) КАК Описание,
	|	ИСМППрисоединенныеФайлы.Версия                             КАК Версия,
	|	НЕОПРЕДЕЛЕНО                                               КАК РеквизитыИсходящегоСообщения,
	|	НЕОПРЕДЕЛЕНО                                               КАК ПротоколОбмена
	|ПОМЕСТИТЬ Сообщения
	|ИЗ
	|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ПО ИСМППрисоединенныеФайлы.Документ = ВременнаяТаблицаДокументы.Ссылка
	|		//&ТаблицаЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|		
	|ГДЕ
	|	НЕ ИСМППрисоединенныеФайлы.Операция В (&АбстрактныеОперации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьСообщенийИСМП.ДатаСоздания КАК ДатаМодификацииУниверсальная,
	|	ОчередьСообщенийИСМП.Документ     КАК Документ,
	|	ОчередьСообщенийИСМП.Сообщение    КАК Ссылка,
	|	ОчередьСообщенийИСМП.ВидПродукции КАК ВидПродукции,
	|	НЕОПРЕДЕЛЕНО                      КАК ТипСообщения,
	|	ОчередьСообщенийИСМП.Операция     КАК Операция,
	|	
	|	ВЫБОР КОГДА ОчередьСообщенийИСМП.ИдентификаторЗаявки = """" ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиСообщенийИСМП.КПередаче)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается)
	|	КОНЕЦ КАК СтатусОбработки,
	|	
	|	// Версия и Описание - из реквизитов исходящего сообщения
	|	""""                                              КАК Описание,
	|	НЕОПРЕДЕЛЕНО                                      КАК Версия,
	|	ОчередьСообщенийИСМП.РеквизитыИсходящегоСообщения КАК РеквизитыИсходящегоСообщения,
	|	ВЫБОР
	|		КОГДА ОчередьСообщенийИСМП.ВидПродукции = Значение(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|			И ОчередьСообщенийИСМП.Операция = Значение(Перечисление.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки)
	|		ТОГДА ОчередьСообщенийИСМП.ПротоколОбмена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                             КАК ПротоколОбмена
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщенийИСМП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ПО ОчередьСообщенийИСМП.Документ = ВременнаяТаблицаДокументы.Ссылка
	|ГДЕ
	|	ОчередьСообщенийИСМП.СообщениеОснование В(&ПустоеОснование)
	|	И НЕ ОчередьСообщенийИСМП.Операция В (&АбстрактныеОперации)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка                                     КАК Документ,
	|	ЕСТЬNULL(Сообщения.Ссылка, &ПустаяСсылка)                            КАК Ссылка,
	|	ЕСТЬNULL(Сообщения.ВидПродукции, НЕОПРЕДЕЛЕНО)                       КАК ВидПродукции,
	|	ЕСТЬNULL(Сообщения.Операция, НЕОПРЕДЕЛЕНО)                           КАК Операция,
	|	ЕСТЬNULL(Сообщения.ДатаМодификацииУниверсальная, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаМодификацииУниверсальная,
	|	ЕСТЬNULL(Сообщения.Описание, """")                                   КАК Описание,
	|	ЕСТЬNULL(Сообщения.Версия, 1)                                        КАК Версия,
	|	ЕСТЬNULL(Сообщения.РеквизитыИсходящегоСообщения, НЕОПРЕДЕЛЕНО)       КАК РеквизитыИсходящегоСообщения,
	|	ЕСТЬNULL(Сообщения.ПротоколОбмена, НЕОПРЕДЕЛЕНО)                     КАК ПротоколОбмена
	|ИЗ
	|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сообщения КАК Сообщения
	|		ПО Сообщения.Документ = ВременнаяТаблицаДокументы.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Сообщения.ДатаМодификацииУниверсальная
	|ИТОГИ
	|	МАКСИМУМ(ДатаМодификацииУниверсальная),
	|	МАКСИМУМ(ВидПродукции)
	|ПО
	|	Документ
	|");
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидПродукцииЗаказНаЭмиссию", "ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ВидПродукции");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"//&ТаблицаЗаказНаЭмиссиюКодовМаркировкиСУЗ",
			"ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
			|ПО ИСМППрисоединенныеФайлы.Документ = ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка");
	Иначе
		Запрос.УстановитьПараметр("ВидПродукцииЗаказНаЭмиссию", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	КонецЕсли;
	
	ПустыеОснования = Новый Массив;
	ПустыеОснования.Добавить(Неопределено);
	ПустыеОснования.Добавить("");
	ПустыеОснования.Добавить(Справочники.ИСМППрисоединенныеФайлы.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ТаблицаДокументы", ТаблицаДокументы);
	Запрос.УстановитьПараметр("ПустоеОснование",  ПустыеОснования);
	Запрос.УстановитьПараметр("ПустаяСсылка",     Справочники.ИСМППрисоединенныеФайлы.ПустаяСсылка());
	
	АбстрактныеОперации = Новый Массив;
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки);
	
	Запрос.УстановитьПараметр("АбстрактныеОперации", АбстрактныеОперации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ПолноеИмя = ВыборкаПоДокументам.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ПоследовательностьОпераций = МенеджерОбъекта.ПоследовательностьОпераций(ВыборкаПоДокументам.Документ, Истина);
		
		Если ОтображатьСИерархией Тогда
			СтрокаПервогоУровня = Форма.ДеревоФайлов.ПолучитьЭлементы().Добавить();
			СтрокаПервогоУровня.Документ       = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.Представление  = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.ИндексКартинки = 5;
		Иначе
			СтрокаПервогоУровня = Форма.ДеревоФайлов;
		КонецЕсли;
		
		Операция          = Неопределено;
		ЕстьОшибка        = Ложь;
		ТребуетсяОжидание = Ложь;
		
		ВыборкаПоФайлам = ВыборкаПоДокументам.Выбрать();
		
		ТаблицаРасчетаКоличества = НоваяТаблицаРасчетаКоличестваОпераций();
		
		Пока ВыборкаПоФайлам.Следующий() Цикл
			
			Версия = Неопределено;
			Если ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка") Тогда
				Реквизиты = ВыборкаПоФайлам.РеквизитыИсходящегоСообщения.Получить();
				Если Реквизиты <> Неопределено Тогда
					Версия = Реквизиты.Версия;
				КонецЕсли;
			Иначе
				Версия = ВыборкаПоФайлам.Версия;
			КонецЕсли;
			
			НоваяСтрока            = ТаблицаРасчетаКоличества.Добавить();
			НоваяСтрока.Версия     = Версия;
			НоваяСтрока.Операция   = ВыборкаПоФайлам.Операция;
			НоваяСтрока.Ссылка     = ВыборкаПоФайлам.Ссылка;
			НоваяСтрока.Количество = 1;
			
		КонецЦикла;
		
		РассчитатьКоличествоДляПредставления(ТаблицаРасчетаКоличества);
		
		ВыборкаПоФайлам.Сбросить();
		
		Пока ВыборкаПоФайлам.Следующий() Цикл
			
			Операция = ВыборкаПоФайлам.Операция;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоФайлам.Ссылка) Тогда
				// Если по документу еще не создано файлов
				Если ЗначениеЗаполнено(ПоследовательностьОпераций) Тогда
					Операция = ПоследовательностьОпераций[0].Операция;
				Иначе
					Операция = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Операция", Операция);
			НайденныеСтроки = ПоследовательностьОпераций.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаПоследовательности = Неопределено;
			Иначе
				СтрокаПоследовательности = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			КонецЕсли;
			
			СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
			СтрокаВторогоУровня.Документ       = ВыборкаПоФайлам.Документ;
			СтрокаВторогоУровня.Файл           = ВыборкаПоФайлам.Ссылка;
			СтрокаВторогоУровня.Операция       = Операция;
			Если ЗначениеЗаполнено(ВыборкаПоФайлам.ДатаМодификацииУниверсальная) Тогда
				СтрокаВторогоУровня.Дата = МестноеВремя(ВыборкаПоФайлам.ДатаМодификацииУниверсальная);
			КонецЕсли;

			Если ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка") Тогда
				РеквизитыИсходящегоСообщения = ВыборкаПоФайлам.РеквизитыИсходящегоСообщения.Получить();
				РеквизитыИсходящегоСообщения.Вставить("Ссылка",         ВыборкаПоФайлам.Ссылка);
				РеквизитыИсходящегоСообщения.Вставить("ВидПродукции",   ВыборкаПоФайлам.ВидПродукции);
				РеквизитыИсходящегоСообщения.Вставить("Операция",       ВыборкаПоФайлам.Операция);
				РеквизитыИсходящегоСообщения.Вставить("ПротоколОбмена", ВыборкаПоФайлам.ПротоколОбмена);
				
				СтрокаВторогоУровня.Представление = ПредставлениеОперации(
					СтрокаПоследовательности,
					ВыборкаПоФайлам.Документ,
					РеквизитыИсходящегоСообщения,
					ТаблицаРасчетаКоличества);
				ДополнитьПредставлениеОперации(СтрокаВторогоУровня, РеквизитыИсходящегоСообщения);
			Иначе
				СтрокаВторогоУровня.Представление = ПредставлениеОперации(
					СтрокаПоследовательности,
					ВыборкаПоФайлам.Документ,
					ВыборкаПоФайлам,
					ТаблицаРасчетаКоличества);
				ДополнитьПредставлениеОперации(СтрокаВторогоУровня, ВыборкаПоФайлам);
			КонецЕсли;
			
			ЕстьОшибкаСтроки  = ЗначениеЗаполнено(ВыборкаПоФайлам.Описание);
			ТребуетсяОжидание = ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка");
			
			Если Не ТребуетсяОжидание И СтрокаПоследовательности <> Неопределено Тогда
				Для Каждого ДальнейшееДействие Из СтрокаПоследовательности.ДальнейшиеДействия Цикл
					СтрокаВторогоУровня.ДальнейшиеДействия.Добавить(ДальнейшееДействие);
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьОшибкаСтроки Тогда
				СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеОшибка";
				СтрокаВторогоУровня.ИндексКартинки     = 4;
				ЕстьОшибка = Истина;
			ИначеЕсли ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка") Тогда
				СтрокаВторогоУровня.ИндексКартинки = 3;
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоФайлам.Ссылка) Тогда
				СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
				СтрокаВторогоУровня.ИндексКартинки     = ПротоколОбменаИС.ИндексКартинкиЗапроса(СтрокаПоследовательности, Истина);
			Иначе
				СтрокаВторогоУровня.ИндексКартинки = ПротоколОбменаИС.ИндексКартинкиЗапроса(СтрокаПоследовательности);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибка Тогда
			СтрокаПоследовательности = ПротоколОбменаИС.ПредыдущаяОперация(ПоследовательностьОпераций, СтрокаПоследовательности);
		КонецЕсли;
		
		Если СтрокаПоследовательности <> Неопределено Тогда
			
			Индекс = ПоследовательностьОпераций.Индекс(СтрокаПоследовательности);
			
			Для Итератор = Индекс + 1 По ПоследовательностьОпераций.Количество() - 1 Цикл
				
				СтрокаСледующаяОперация = ПоследовательностьОпераций.Получить(Итератор);
				Если СтрокаСледующаяОперация.Индекс = 0
					Или СтрокаПоследовательности.Индекс = СтрокаСледующаяОперация.Индекс Тогда
					
					СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
					СтрокаВторогоУровня.Документ           = ВыборкаПоДокументам.Документ;
					СтрокаВторогоУровня.Операция           = СтрокаСледующаяОперация.Операция;
					СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
					СтрокаВторогоУровня.Представление      = ПредставлениеОперации(СтрокаСледующаяОперация, СтрокаВторогоУровня.Документ, Неопределено);
					СтрокаВторогоУровня.ИндексКартинки     = ПротоколОбменаИС.ИндексКартинкиЗапроса(СтрокаСледующаяОперация, Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОперации(СтрокаПоследовательности, ДокументСсылка, ВыборкаПоФайлам = Неопределено, ТаблицаРасчетаКоличества = Неопределено)
	
	Если СтрокаПоследовательности = Неопределено Тогда
		
		Возврат "";
		
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
		
		Если ВыборкаПоФайлам = Неопределено Тогда
			Возврат ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(СтрокаПоследовательности.Операция, Неопределено, Неопределено);
		Иначе
			
			ТекстПоКоличествуСообщений = Неопределено;
			
			Если ТаблицаРасчетаКоличества <> Неопределено Тогда
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Ссылка",   ВыборкаПоФайлам.Ссылка);
				СтруктураПоиска.Вставить("Версия",   ВыборкаПоФайлам.Версия);
				СтруктураПоиска.Вставить("Операция", ВыборкаПоФайлам.Операция);
				
				ПоискСтрок = ТаблицаРасчетаКоличества.НайтиСтроки(СтруктураПоиска);
				
				Если ПоискСтрок.Количество() > 0 И ПоискСтрок[0].СоставнаяОперация Тогда
					ТекстПоКоличествуСообщений = СтрШаблон(
						НСтр("ru = '%1 из %2';
							|en = '%1 из %2'"), ПоискСтрок[0].ТекущийНомер , ПоискСтрок[0].Количество);
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
				СтрокаПоследовательности.Операция, Неопределено, ВыборкаПоФайлам.Версия, ТекстПоКоличествуСообщений);
			
		КонецЕсли;
		
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий Тогда
		
		Возврат ОбменДаннымиИСМП.ОписаниеОперацииПолученияДанных(СтрокаПоследовательности.Операция);
		
	Иначе
		
		Возврат Строка(СтрокаПоследовательности.Операция);
		
	КонецЕсли;
	
КонецФункции

Процедура РассчитатьКоличествоДляПредставления(ТаблицаРасчетаКоличества)

	ВременнаяТаблицаРасчета = ТаблицаРасчетаКоличества.Скопировать();
	ВременнаяТаблицаРасчета.Свернуть("Версия, Операция", "Количество");
	
	Для Каждого СтрокаГруппы Из ВременнаяТаблицаРасчета Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Версия",   СтрокаГруппы.Версия);
		СтруктураПоиска.Вставить("Операция", СтрокаГруппы.Операция);
		
		ПоискСтрок = ТаблицаРасчетаКоличества.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из ПоискСтрок Цикл
			НайденнаяСтрока.Количество        = СтрокаГруппы.Количество;
			НайденнаяСтрока.ТекущийНомер      = ПоискСтрок.Найти(НайденнаяСтрока) + 1;
			НайденнаяСтрока.СоставнаяОперация = ПоискСтрок.Количество() > 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПредставлениеОперации(СтрокаВторогоУровня, ПараметрыОбновления)
	
	Если ПараметрыОбновления.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
		Или ПараметрыОбновления.Операция <> Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОбновления.Ссылка) = Тип("Строка") Тогда
		Если ПараметрыОбновления.ПротоколОбмена <> Неопределено Тогда
			ПротоколОбмена = ПараметрыОбновления.ПротоколОбмена.Получить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыОбновления.Ссылка) <> Тип("Структура") Тогда
		ПротоколОбмена = ОбщегоНазначения.ЗначениеИзСтрокиXML(
			ПротоколОбменаИС.ТекстСообщенияXMLИзПротокола(ПараметрыОбновления.Ссылка));
	КонецЕсли;
	
	Если ТипЗнч(ПротоколОбмена) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийСтатус   = Неопределено;
	ЕстьКолонкаСтатус = Неопределено;
	
	Для Каждого СтрокаПротокола Из ПротоколОбмена Цикл
		Если ЕстьКолонкаСтатус = Неопределено Тогда
			ЕстьКолонкаСтатус = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПротокола, "Статус");
			Если Не ЕстьКолонкаСтатус Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаПротокола.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеСтатусаПулаКодовМаркировкиИзСУЗ Тогда
			ПоследнийСтатус = СтрокаПротокола.Статус;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПоследнийСтатус) Тогда
		СтрокаВторогоУровня.Представление = СтрШаблон(
			"%1, %2",
			СтрокаВторогоУровня.Представление,
			ПоследнийСтатус);
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаРасчетаКоличестваОпераций()
	
	ТаблицаРасчетаКоличества = Новый ТаблицаЗначений();
	ТаблицаРасчетаКоличества.Колонки.Добавить("Версия");
	ТаблицаРасчетаКоличества.Колонки.Добавить("Операция");
	ТаблицаРасчетаКоличества.Колонки.Добавить("Ссылка");
	ТаблицаРасчетаКоличества.Колонки.Добавить("ТекущийНомер");
	ТаблицаРасчетаКоличества.Колонки.Добавить("Количество");
	ТаблицаРасчетаКоличества.Колонки.Добавить("СоставнаяОперация");
	
	ТаблицаРасчетаКоличества.Индексы.Добавить("Версия, Операция");
	ТаблицаРасчетаКоличества.Индексы.Добавить("Ссылка, Версия, Операция");
	
	Возврат ТаблицаРасчетаКоличества;
	
КонецФункции

#КонецОбласти