
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваКВыплате);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ЛимитыРасходаДенежныхСредств);
		
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаКомандировку") Тогда
			Параметры.ЕстьПроизводныеДвижения = Истина;
		КонецЕсли;
		
		КонтролироватьЛимиты =
			ПолучитьФункциональнуюОпцию("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств")
			И ((ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
				И Документ.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена
				И Не Документ.СверхЛимита)
				Или
				(ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаКомандировку")
				И (Документ.Статус <> Перечисления.СтатусыЗаявокСотрудников.Отклонена
					И Документ.Статус <> Перечисления.СтатусыЗаявокСотрудников.Отозвана)
				И Документ.ВыдачаПодОтчет.Количество()
				И Не Документ.СверхЛимита));
		
		Если КонтролироватьЛимиты Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ЛимитыРасходаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Если Не Свойства.ЭтоНовый
			И (ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
				Или ТипЗнч(Документ) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
					И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств"))
		Или Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ((ТипЗнч(Документ) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте")
				Или ТипЗнч(Документ) = Тип("ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств")
				//++ Локализация
				Или ТипЗнч(Документ) = Тип("ДокументОбъект.УведомлениеОЗачисленииВалюты")
				//-- Локализация
				Или ТипЗнч(Документ) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
				Или ТипЗнч(Документ) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств"))
				И (ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
					Или ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаКомандировку"))
			)
		Или ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ)
		Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваКВыплате);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваКВыплате;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
		
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ЛимитыРасходаДенежныхСредств;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
			
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам планирования и контроля денежных средств.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваКВыплате");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЛимитыРасходаДенежныхСредств");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область ДенежныеСредстваКВыплате
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ТаблицаОстатков.БанковскийСчетКасса                 КАК БанковскийСчетКасса,
		|	ТаблицаОстатков.Получатель                          КАК Получатель,
		|	ТаблицаОстатков.Организация                         КАК Организация,
		|	ТаблицаОстатков.СуммаОстаток                        КАК Сумма,
		|
		|	Заявка.Организация                                  КАК ОрганизацияЗаявки,
		|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
		|	) ТОГДА
		|		Заявка.ПодотчетноеЛицо
		|	КОГДА Заявка.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
		|	) ТОГДА
		|		Заявка.ОрганизацияПолучатель
		|	ИНАЧЕ
		|		Заявка.Контрагент
		|	КОНЕЦ                                               КАК ПолучательЗаявки,
		|	Заявка.Валюта                                       КАК Валюта,
		|	Заявка.ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
		|	Заявка.СписокФизЛиц                                 КАК СписокФизЛиц,
		|	Заявка.СписокКонтрагентов                           КАК СписокКонтрагентов
		|
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
		|		(ЗаявкаНаРасходованиеДенежныхСредств, БанковскийСчетКасса, Получатель, Организация) В
		|		(ВЫБРАТЬ
		|			Таблица.ЗаявкаНаРасходованиеДенежныхСредств,
		|			Таблица.БанковскийСчетКасса,
		|			Таблица.Получатель,
		|			Таблица.Организация
		|		ИЗ
		|			ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|		ГДЕ
		|			Таблица.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|		)
		|		) КАК ТаблицаОстатков
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
		|	ПО
		|		ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ТаблицаОстатков.БанковскийСчетКасса                 КАК БанковскийСчетКасса,
		|	ТаблицаОстатков.Получатель                          КАК Получатель,
		|	ТаблицаОстатков.Организация                         КАК Организация,
		|	ТаблицаОстатков.СуммаОстаток                        КАК Сумма,
		|
		|	Заявка.Организация                                  КАК ОрганизацияЗаявки,
		|	Заявка.Сотрудник                                    КАК ПолучательЗаявки,
		|	Заявка.Валюта                                       КАК Валюта,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) КАК ХозяйственнаяОперация,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
		|		(ЗаявкаНаРасходованиеДенежныхСредств, БанковскийСчетКасса, Получатель, Организация) В
		|		(ВЫБРАТЬ
		|			Таблица.ЗаявкаНаРасходованиеДенежныхСредств,
		|			Таблица.БанковскийСчетКасса,
		|			Таблица.Получатель,
		|			Таблица.Организация
		|		ИЗ
		|			ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|		ГДЕ
		|			Таблица.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаКомандировку
		|		)
		|		) КАК ТаблицаОстатков
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ЗаявкаНаКомандировку КАК Заявка
		|	ПО
		|		ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток < 0
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиДенежныеСредстваКВыплате");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЛимитыРасходаДенежныхСредств
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЛимитыРасходаДенежныхСредствИзменение") Тогда
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЛимитыРасхода.Ссылка.МоментВремени КАК МоментВремени,
			|	ЛимитыРасхода.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ЛимитыРасхода.ЕстьЛимит КАК ЕстьЛимит
			|ПОМЕСТИТЬ ВременнаяТаблицаСтатьиДДС
			|ИЗ
			|	Документ.ЛимитыРасходаДенежныхСредств.Лимиты КАК ЛимитыРасхода
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияЛимитыРасходаДенежныхСредствИзменение КАК Таблица
			|		ПО (ЛимитыРасхода.Ссылка.Организация = Таблица.Организация
			|				ИЛИ НЕ &ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям)
			|			И (ЛимитыРасхода.Ссылка.Подразделение = Таблица.Подразделение
			|				ИЛИ НЕ &ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям)
			|			И ЛимитыРасхода.СтатьяДвиженияДенежныхСредств = Таблица.СтатьяДвиженияДенежныхСредств
			|ГДЕ
			|	&КонтролироватьПревышениеЛимитовРасходаДенежныхСредств
			|	И НЕ Таблица.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL
			|	И ЛимитыРасхода.Ссылка.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодЛимитаРасходаДС, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодЛимитаРасходаДС, МЕСЯЦ)
			|	И ЛимитыРасхода.Ссылка.Проведен");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ВременнаяТаблицаСтатьиДДС.СтатьяДвиженияДенежныхСредств
			|ПОМЕСТИТЬ ВременнаяТаблицаСтатьиДДСЛимитНеОграничен
			|ИЗ
			|	ВременнаяТаблицаСтатьиДДС КАК ВременнаяТаблицаСтатьиДДС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатьиДДС КАК Отбор
			|		ПО ВременнаяТаблицаСтатьиДДС.СтатьяДвиженияДенежныхСредств = Отбор.СтатьяДвиженияДенежныхСредств
			|			И ВременнаяТаблицаСтатьиДДС.МоментВремени < Отбор.МоментВремени
			|ГДЕ
			|	Отбор.МоментВремени ЕСТЬ NULL
			|	И НЕ ВременнаяТаблицаСтатьиДДС.ЕстьЛимит");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Таблица.СтатьяДвиженияДенежныхСредств,
			|	Таблица.Организация,
			|	Таблица.Подразделение
			|ПОМЕСТИТЬ ИзмененияЛимитов
			|ИЗ
			|	ДвиженияЛимитыРасходаДенежныхСредствИзменение КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатьиДДСЛимитНеОграничен КАК СтатьиДДСЛимитНеОграничен
			|		ПО Таблица.СтатьяДвиженияДенежныхСредств = СтатьиДДСЛимитНеОграничен.СтатьяДвиженияДенежныхСредств
			|ГДЕ
			|	СтатьиДДСЛимитНеОграничен.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL
			|	И Таблица.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)");
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОборотов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаОборотов.Организация КАК Организация,
			|	ТаблицаОборотов.Подразделение КАК Подразделение,
			|	ТаблицаОборотов.РасходВПределахЛимитаОборот - ТаблицаОборотов.ЛимитОборот КАК ПревышениеЛимита
			|ИЗ
			|	РегистрНакопления.ЛимитыРасходаДенежныхСредств.Обороты(
			|			НАЧАЛОПЕРИОДА(&ПериодЛимитаРасходаДС, МЕСЯЦ),
			|			КОНЕЦПЕРИОДА(&ПериодЛимитаРасходаДС, МЕСЯЦ),
			|			,
			|			(СтатьяДвиженияДенежныхСредств, Организация, Подразделение) В
			|				(ВЫБРАТЬ
			|					ИзмененияЛимитов.СтатьяДвиженияДенежныхСредств,
			|					ИзмененияЛимитов.Организация,
			|					ИзмененияЛимитов.Подразделение
			|				ИЗ
			|					ИзмененияЛимитов)) КАК ТаблицаОборотов
			|ГДЕ
			|	&КонтролироватьПревышениеЛимитовРасходаДенежныхСредств
			|	И ТаблицаОборотов.РасходВПределахЛимитаОборот - ТаблицаОборотов.ЛимитОборот > 0";
		
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			И ЗначениеЗаполнено(Документ.ДатаПлатежа) Тогда
			Период = Документ.ДатаПлатежа;
		ИначеЕсли ЗначениеЗаполнено(Документ.ЖелательнаяДатаПлатежа) Тогда
			Период = Документ.ЖелательнаяДатаПлатежа;
		Иначе
			Период = Документ.Дата;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПериодЛимитаРасходаДС", Период);
		Запрос.УстановитьПараметр("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям",
			ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям"));
		Запрос.УстановитьПараметр("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям",
			ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям"));
		Запрос.УстановитьПараметр("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств",
			ПолучитьФункциональнуюОпцию("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств"));
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЛимитыРасходаДенежныхСредств");
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область ДенежныеСредстваКВыплате
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда
		
		ЕстьРасхожденияРеквизитов = Ложь;
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиДенежныеСредстваКВыплате Цикл
			
			ТекстСообщения = "";
			ЭтоЗаявкаНаРасходованиеДС =
				ТипЗнч(СтрокаОшибки.ЗаявкаНаРасходованиеДенежныхСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств");
			
			Если ЭтоЗаявкаНаРасходованиеДС И СтрокаОшибки.Организация <> СтрокаОшибки.ОрганизацияЗаявки Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Организация %1 в документе оплаты не соответствует организации %2 в заявке';
												|en = 'Company %1 in the AR/AP transaction does not correspond to company %2 in the request'"),
					СтрокаОшибки.Организация, СтрокаОшибки.ОрганизацияЗаявки);
				ЕстьРасхожденияРеквизитов = Истина;
			КонецЕсли;
			
			Если ЭтоЗаявкаНаРасходованиеДС И СтрокаОшибки.Получатель <> СтрокаОшибки.ПолучательЗаявки
				И СтрокаОшибки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
				И НЕ (СтрокаОшибки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
				И СтрокаОшибки.СписокФизЛиц)
				И НЕ (СтрокаОшибки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
				И СтрокаОшибки.СписокКонтрагентов) Тогда
				
				ТекстСообщения = ТекстСообщения + ?(Не ПустаяСтрока(ТекстСообщения), Символы.ПС, "")
					+ СтрШаблон(НСтр("ru = 'Получатель %1 в документе оплаты не соответствует получателю %2 в заявке';
									|en = 'The %1 recipient in the AR/AP transaction does not match the %2 recipient in the request'"),
						СтрокаОшибки.Получатель, СтрокаОшибки.ПолучательЗаявки);
				ЕстьРасхожденияРеквизитов = Истина;
			КонецЕсли;
			
			Если Не ЕстьРасхожденияРеквизитов Тогда
				Если ЭтоЗаявкаНаРасходованиеДС Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'По заявке %1 оплачено больше, чем утверждено в заявке, на %2 %3';
													|en = 'Amount paid against the %1 request exceeds the amount confirmed in the request by %2 %3'"),
						СтрокаОшибки.ЗаявкаНаРасходованиеДенежныхСредств, -СтрокаОшибки.Сумма, СтрокаОшибки.Валюта);
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'По документу %1 оплачено больше, чем утверждено в распоряжении, на %2 %3';
													|en = 'Amount paid against document %1 exceeds the amount confirmed in the reference by %2 %3'"),
						СтрокаОшибки.ЗаявкаНаРасходованиеДенежныхСредств, -СтрокаОшибки.Сумма, СтрокаОшибки.Валюта);
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ, ,, Отказ);
			
			Если ЕстьРасхожденияРеквизитов Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЛимитыРасходаДенежныхСредств
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЛимитыРасходаДенежныхСредствИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышен лимит расхода по статье %1 на сумму %2 %3';
								|en = 'Expense limit by item %1 is exceeded for the amount of %2 %3'");
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЛимитыРасходаДенежныхСредств Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.СтатьяДвиженияДенежныхСредств,
				СтрокаОшибки.ПревышениеЛимита, ВалютаУправленческогоУчета);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РезультатыКонтроля.ОшибкиЛимитыРасходаДенежныхСредств)
			И Не Документ.СверхЛимита
			И ПолучитьФункциональнуюОпцию("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств") Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	//++ НЕ УТ
	КонтролироватьЛимиты =
		ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования")
		И ((ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			И Документ.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена
			И Не Документ.СверхЛимита)
			Или
			(ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаКомандировку")
			И (Документ.Статус <> Перечисления.СтатусыЗаявокСотрудников.Отклонена
				И Документ.Статус <> Перечисления.СтатусыЗаявокСотрудников.Отозвана)
			И Документ.ВыдачаПодОтчет.Количество()
			И Не Документ.СверхЛимита));
			
	Если КонтролироватьЛимиты Тогда
		Ошибки = Неопределено;
		НарушеныТолькоИнформационныеЛимиты = Ложь;
		ЗаявкаПроходитПоЛимитамБюджетирования(Документ, Ошибки, НарушеныТолькоИнформационныеЛимиты);
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
		Если ЗначениеЗаполнено(Ошибки) И Не НарушеныТолькоИнформационныеЛимиты Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаКомандировку"))
		И Документ.Закрыта Тогда
		Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗакрытьЗаявки(Документ.Ссылка, Истина);
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

// Вызывается из Отчет.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования.МодульОбъекта
// Плановое и фактическое состояние по лимитам на расходование ДС.
// 
// Параметры:
//	ДатаПроверки - Дата - дата, на которую проверяется состояние лимитов.
//	Документ     - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - документ, для которого формируются временные движения по регистрам ДС.
//	             - Неопределено - Значение по умолчанию.
//	ВалютаЗаявки - СправочникСсылка.Валюты - валюта, в которой нужно получить план-факт.
//	             - Неопределено - Значение по умолчанию.
//	ОтборРасшифровки - Структура - Отбор, накладываемый расшифровкой отчета (вышестоящие от расшифровываемой ячейки значения полей).
//	                               При расшифровке сравнение только на равенство:
//	 *ИспользоватьОтбор - Булево - Флаг использования отбора.
//	 *РасшифровкаПоРегистратору - Булево - Флаг использования расшифровки по регистратору. Расшифровка по регистратору может выполняться
//	                                       только если отбор задан, и отбор включает в себя отбор по правилу получения факта.
//	 *МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - отбор по модели бюджетирования (если отбор задан).
//	 *ПравилоЛимитов - СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - отбор по правилу лимитов (если отбор задан).
//	 *ОтборПоАналитикамПлана - Массив из Структура - отбор по вышестоящим аналитикам плана (если задан):
//	   **ИмяИзмеренияНомерАналитики - Строка - Имя измерения или путь к нумерованной аналитике (вида "Аналитика1", здесь номер тот, который задан в статье бюджетов).
//	   **Значение - Характеристика.АналитикиСтатейБюджетов - Значение измерения или аналитики.
//	 *ОтборПоАналитикамФакта - Массив из Структура - отбор по вышестоящим аналитикам факта (если задан):
//	   **ИмяИзмеренияНомерАналитики - Строка - Имя измерения или путь к нумерованной аналитике (вида "Аналитика1", здесь номер тот, который задан в статье бюджетов).
//	   **Значение - Характеристика.АналитикиСтатейБюджетов - Значение измерения или аналитики.
//
// Возвращаемое значение:
//	ТаблицаЗначений - данные о плановом и фактическом состоянии лимитов на расходование ДС.
// 
Функция ПланФактЛимитов(ДатаПроверки, Знач Документ = Неопределено, Знач ВалютаЗаявки = Неопределено, ОтборРасшифровки = Неопределено) Экспорт
	
	ПланПриОтсутствииФакта = Не ЗначениеЗаполнено(Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПродолжитьРасчет = Истина;
	
	КоличествоФормальноДействующихЛимитов = 0;
	КоличествоСработавшихЛимитов = 0;
	
	#Область ПараметрыЗаявки
	
	РеквизитыЗаявки = Новый Структура;
	РеквизитыЗаявки.Вставить("ДатаПроверки", ДатаПроверки);
	РеквизитыЗаявки.Вставить("СсылкаНаЗаявку", Документ);
	РеквизитыЗаявки.Вставить("ВалютаЗаявки", ВалютаЗаявки);
	
	ВозможенКонтрольПоДокументу = Не Документ = Неопределено И Документ.Проведен;
	
	#КонецОбласти 
	
	ДопОтборПоПравиламЛимитирования = ОтборПоПравиламРасшифровкиОтчета(ОтборРасшифровки);
	
	#Область Этап1_ОпределениеРегистровСДвижениями
	
	Если ВозможенКонтрольПоДокументу Тогда
		ЗаявкаОбъект = Документ.ПолучитьОбъект();
		СсылкаНаЗаявку = ЗаявкаОбъект.Ссылка;
		ВалютаЗаявки = ЗаявкаОбъект.Валюта;
		
		ИменаРегистровНепустыхНаборов = ИменаРегистровНепустыхНаборов(ЗаявкаОбъект.Движения, Истина);
		
		// Уточним регистры, в которых есть движения
		ИсточникиСДвижениями = Новый Массив;
		Для Каждого ИмяРегистра Из ИменаРегистровНепустыхНаборов Цикл 
			Если ЕстьДвиженияПоРегистру(СсылкаНаЗаявку, ИмяРегистра) Тогда
				ИсточникиСДвижениями.Добавить(ИмяРегистра);
			КонецЕсли;
		КонецЦикла;
		
		Если ИменаРегистровНепустыхНаборов.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап2_ОпределениеФормальноДействующихЛимитов
	
	Если ПродолжитьРасчет Тогда
		
		ДействующиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки,,, ДопОтборПоПравиламЛимитирования);
		ДействующиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку;
		ДействующиеЛимиты.ОтборИсточниковПоИменамРегистров = ИменаРегистровНепустыхНаборов;
		
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап3_ОпределениеПотенциальноПодходящихЛимитов
	
	Если ПродолжитьРасчет Тогда
		УточнитьСоставЛимитовПоИменамРегистров(ДействующиеЛимиты);
		
		КоличествоФормальноДействующихЛимитов = ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество();
		Если КоличествоФормальноДействующихЛимитов = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	#КонецОбласти 
	
	#Область Этап4_ОпределениеЛимитовСработавшихПоДокументу
	Если ПродолжитьРасчет Тогда
		Если ВозможенКонтрольПоДокументу Тогда
			ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки,
				ДействующиеЛимиты, Истина, ОтборРасшифровки);
			
			ФактПоЗаявке = БюджетированиеСервер.ФактПоВидуБюджета(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
				ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
				РеквизитыЗаявки.ВалютаЗаявки,
				Перечисления.РежимПолученияДанныхБюджетирования.Все);
			
			Если ФактПоЗаявке.Количество() = 0 Тогда
				ПродолжитьРасчет = Ложь;
			КонецЕсли;
			
			Если ПродолжитьРасчет Тогда
				СработавшиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки,
				                                      ФактПоЗаявке.ВыгрузитьКолонку("СтатьяБюджетов"),,
				                                      ДопОтборПоПравиламЛимитирования);
				СработавшиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку; 
				
				КоличествоСработавшихЛимитов = СработавшиеЛимиты.ЛимитыДействующиеНаДату.Количество();
				Если КоличествоСработавшихЛимитов = 0 Тогда
					ПродолжитьРасчет = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СработавшиеЛимиты = ДействующиеЛимиты;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап5_ПолучениеФактПоСработавшимЛимитам
	Если ПродолжитьРасчет Тогда
		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки,
			СработавшиеЛимиты, Ложь, ОтборРасшифровки);
		
		ФактПоЗаявкам = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			РеквизитыЗаявки.ВалютаЗаявки,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап6_ПланФактныйАнализСработавшихЛимитов
	
	ПланФактПоПравилам = Новый ТаблицаЗначений;
	Если ПродолжитьРасчет Тогда
		ФактПоЗаявкам.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		// Факт по всем заявкам получается с избытком для целей контроля, т.к. разные аналитики (измерения) могут расходовать одни и те же аналитики лимита.
		// Добавим колонку - признак участия аналитик (измерений) в исходной заявке - чтобы не контролировать лишние аналитики.
		ФактПоЗаявкам.Колонки.Добавить("ВИсходнойЗаявке", Новый ОписаниеТипов("Булево"));
		
		Если ВозможенКонтрольПоДокументу Тогда
			КолонкиПоискаПоЗаявке = "СтатьяБюджетов, НачалоПериода, КонецПериода";
			МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Аналитика" + НомерАналитики;
			КонецЦикла;
			
			Если ФактПоЗаявкам.Колонки.Найти("Организация") <> Неопределено Тогда
				КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Организация";
			КонецЕсли;
			Если ФактПоЗаявкам.Колонки.Найти("Подразделение") <> Неопределено Тогда
				КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Подразделение";
			КонецЕсли;
			
			ФактПоЗаявкам.Индексы.Добавить(КолонкиПоискаПоЗаявке);
			СтруктураПоискаФакта = Новый Структура(КолонкиПоискаПоЗаявке);
			ЕстьСтрокиИсходнойЗаявки = Ложь;
			Для каждого СтрокаИсходнойЗаявки Из ФактПоЗаявке Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаФакта, СтрокаИсходнойЗаявки);
				СтрокиОбщегоФакта = ФактПоЗаявкам.НайтиСтроки(СтруктураПоискаФакта);
				Для каждого СтрокаОбщегоФакта Из СтрокиОбщегоФакта Цикл
					СтрокаОбщегоФакта.ВИсходнойЗаявке = Истина;
					ЕстьСтрокиИсходнойЗаявки = Истина;
				КонецЦикла;
			КонецЦикла;
			Если НЕ ЕстьСтрокиИсходнойЗаявки
				И НЕ ОтборРасшифровки = Неопределено
				И ОтборРасшифровки.ИспользоватьОтбор Тогда
				// В прочих аналитиках плана есть разные аналитики факта.
				// Отбор установлен на аналитики факта, которые не совпадают с аналитиками заявки
				Для каждого СтрокаФактаЗаявки Из ФактПоЗаявке Цикл
					ДополнениеФакта = ФактПоЗаявкам.Добавить();
					ЗаполнитьЗначенияСвойств(ДополнениеФакта, СтрокаФактаЗаявки,, "СуммаПриход, СуммаРасход, СуммаВалРасход");
					ДополнениеФакта.СуммаФакт = 0;
					ДополнениеФакта.ВИсходнойЗаявке = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПланПриОтсутствииФакта И КоличествоФормальноДействующихЛимитов <> КоличествоСработавшихЛимитов Тогда
			НеСработавшиеЛимиты = ДействующиеЛимиты(
				РеквизитыЗаявки.ДатаПроверки, 
				ФактПоЗаявкам.ВыгрузитьКолонку("СтатьяБюджетов"),
				Истина,
				ДопОтборПоПравиламЛимитирования);
			
			ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(
				НеСработавшиеЛимиты.ЛимитыДействующиеНаДату,
				ФактПоЗаявкам);
		КонецЕсли;
		
		// Сбор запроса для план-факт анализа
		ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФактаДляКонтроляЛимитов,
		                                               ФактПоЗаявкам,
		                                               СработавшиеЛимиты,
		                                               Истина,
		                                               ОтборРасшифровки);
	КонецЕсли;
	
	#КонецОбласти 
	
	Возврат ПланФактПоПравилам;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

#Область КонтрольЛимитовПоДаннымБюджетирования

Процедура ЗаявкаПроходитПоЛимитамБюджетирования(ЗаявкаОбъект, Ошибки, НарушеныТолькоИнформационныеЛимиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешающийЛимитОбязателен = Истина;
	РазрешающийЛимитНайден     = Ложь;
	ИнформационныйЛимитНайден  = Ложь;
	
	РазрешающийЛимит = Перечисления.ТипыЛимитовРасходованияДС.РазрешающийВПределахЛимита;
	ИнформационныйЛимит = Перечисления.ТипыЛимитовРасходованияДС.Информационный;
	ДополнительныйЛимит = Перечисления.ТипыЛимитовРасходованияДС.ДополнительноОграничивающий;
	
	
	ПродолжитьРасчет = Истина;
	
	#Область ПараметрыЗаявки
	
	РеквизитыЗаявки = Новый Структура;
	РеквизитыЗаявки.Вставить("ДатаПроверки", ЗаявкаОбъект.ЖелательнаяДатаПлатежа);
	РеквизитыЗаявки.Вставить("СсылкаНаЗаявку", ЗаявкаОбъект.Ссылка);
	РеквизитыЗаявки.Вставить("ВалютаЗаявки", ЗаявкаОбъект.Валюта);
	
	#КонецОбласти 
	
	#Область Этап1_ОпределениеРегистровСДвижениями
	
	ИменаРегистровНепустыхНаборов = ИменаРегистровНепустыхНаборов(ЗаявкаОбъект.Движения);
	Если ИменаРегистровНепустыхНаборов.Количество() = 0 Тогда
		ПродолжитьРасчет = Ложь;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап2_ОпределениеФормальноДействующихЛимитов
	
	Если ПродолжитьРасчет Тогда
		ДействующиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки);
		ДействующиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку; 
		ДействующиеЛимиты.ОтборИсточниковПоИменамРегистров = ИменаРегистровНепустыхНаборов;
		
		РазрешающийЛимитОбязателен = ДействующиеЛимиты.ЛимитыДействующиеНаДату.Найти(РазрешающийЛимит, "ТипЛимита") <> Неопределено
			ИЛИ ДействующиеЛимиты.ЛимитыДействующиеНаДату.Найти(ДополнительныйЛимит, "ТипЛимита") <> Неопределено;
			
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап3_ОпределениеПотенциальноПодходящихЛимитов
	
	Если ПродолжитьРасчет Тогда
		УточнитьСоставЛимитовПоИменамРегистров(ДействующиеЛимиты);
		
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	#КонецОбласти 
	
	#Область Этап4_ОпределениеЛимитовСработавшихПоДокументу
	Если ПродолжитьРасчет Тогда
		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки, ДействующиеЛимиты, Истина);
		
		ФактПоЗаявке = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			РеквизитыЗаявки.ВалютаЗаявки,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
		
		Если ФактПоЗаявке.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		СработавшиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки, ФактПоЗаявке.ВыгрузитьКолонку("СтатьяБюджетов"));
		СработавшиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку; 
		
		Если СработавшиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап5_ПолучениеФактПоСработавшимЛимитам
	Если ПродолжитьРасчет Тогда
		
		Счетчик = 0;
		Пока Счетчик < СработавшиеЛимиты.ТаблицаПравилСтатей.Количество() Цикл
			Правило = СработавшиеЛимиты.ТаблицаПравилСтатей[Счетчик].Правило;
			Если ДействующиеЛимиты.ТаблицаПравилСтатей.Найти(Правило) = Неопределено Тогда
				СработавшиеЛимиты.ТаблицаПравилСтатей.Удалить(Счетчик);
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		
		ПравилаПоСработавшимЛимитам = СработавшиеЛимиты.ТаблицаПравилСтатей.Скопировать(
			Новый Структура("ПоТаблицеКорреспонденций", Истина), "Правило, ТипДанныхУчетаРасход");

		Если ПравилаПоСработавшимЛимитам.Количество() > 0 Тогда
			// Отражаем документы в бюджетировании "на лету", то есть в транзакции проведения заявки
			ИменаВидовДокументов = ИсточникиДанныхПовтИсп.ИменаВидовДокументовДляКонтроляЛимитов(
				ПравилаПоСработавшимЛимитам[0].ТипДанныхУчетаРасход);
			Для Каждого СтрокаЛимит Из СработавшиеЛимиты.ЛимитыДействующиеНаДату Цикл
				Если РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ТребуетсяОтражениеВБюджетированииДляОтчетаЗаПериод(
					СтрокаЛимит.НачалоПериода, СтрокаЛимит.КонецПериода, , Истина, ИменаВидовДокументов) Тогда
					ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании(СтрокаЛимит.НачалоПериода,
						СтрокаЛимит.КонецПериода, ИменаВидовДокументов);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки,
			СработавшиеЛимиты, Ложь);
		
		ФактПоЗаявкам = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			РеквизитыЗаявки.ВалютаЗаявки,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
		
		Если ПравилаПоСработавшимЛимитам.Количество() > 0 Тогда
			
			ПараметрыПолученияХранимогоФакта = ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта;
			ПараметрыПолученияХранимогоФакта.Вставить("РежимПолученияДанных",
				Перечисления.РежимПолученияДанныхБюджетирования.Все);

			ИсключаемыеИсточникиСуммыОперации = Новый СписокЗначений;
			ИсключаемыеИсточникиСуммыОперации.ЗагрузитьЗначения(ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(
				ИсточникиДанныхПовтИсп.ПоказателиДвиженияДенежныхСредствКВыплате()));
			НастройкиОтбора = Новый НастройкиКомпоновкиДанных;
			ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Правило.ИсточникСуммыОперации",
				ИсключаемыеИсточникиСуммыОперации, , ВидСравненияКомпоновкиДанных.НеВСписке);
			ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Правило",
				ПравилаПоСработавшимЛимитам.ВыгрузитьКолонку("Правило"), , ВидСравненияКомпоновкиДанных.ВСписке);
			ПараметрыПолученияХранимогоФакта.Вставить("ДополнительныйОтбор", НастройкиОтбора);

			ПараметрыПолученияХранимогоФакта.Вставить("ФункциональнаяВалюта", Неопределено);
			ПараметрыПолученияХранимогоФакта.Вставить("ВозвращатьУпрИРеглСуммы", Ложь);
			ПараметрыПолученияХранимогоФакта.Вставить("ВалютаОтчета", РеквизитыЗаявки.ВалютаЗаявки);
			ПараметрыПолученияХранимогоФакта.Вставить("ДействующиеЛимиты",
				СработавшиеЛимиты.ЛимитыДействующиеНаДату.Скопировать( , "СтатьяБюджетов,НачалоПериода,КонецПериода"));
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта, ПараметрыПолученияХранимогоФакта,
				Истина);

			ХранимыйФактПоЗаявкам = БюджетированиеСервер.ФактСтатьиБюджетовХранимый(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта);
			ХранимыйФактПоЗаявкам.Колонки.Сумма.Имя = "СуммаПриход";
			ХранимыйФактПоЗаявкам.Колонки.СуммаВВалюте.Имя = "СуммаВалПриход";
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ХранимыйФактПоЗаявкам, ФактПоЗаявкам);
			
		КонецЕсли;
		
		ФактПоЗаявкам.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		Если ФактПоЗаявкам.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап6_ПланФактныйАнализСработавшихЛимитов
	ПланФактПоПравилам = Новый ТаблицаЗначений;
	Если ПродолжитьРасчет Тогда
		ФактПоЗаявке.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		// Факт по всем заявкам получается с избытком для целей контроля, т.к. разные аналитики (измерения) могут расходовать одни и те же аналитики лимита.
		// Добавим колонку - признак участия аналитик (измерений) в исходной заявке - чтобы не контролировать лишние аналитики.
		ФактПоЗаявкам.Колонки.Добавить("ВИсходнойЗаявке", Новый ОписаниеТипов("Булево"));
		// Колонка для расчета суммы, которую можно списать.
		ФактПоЗаявкам.Колонки.Добавить("СуммаФактИсходнойЗаявки", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		КолонкиПоискаПоЗаявке = "СтатьяБюджетов, Валюта, НачалоПериода, КонецПериода";
		МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Аналитика" + НомерАналитики;
		КонецЦикла;
		
		Если ФактПоЗаявкам.Колонки.Найти("Организация") <> Неопределено Тогда
			КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Организация";
		КонецЕсли;
		Если ФактПоЗаявкам.Колонки.Найти("Подразделение") <> Неопределено Тогда
			КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Подразделение";
		КонецЕсли;
		
		ФактПоЗаявкам.Индексы.Добавить(КолонкиПоискаПоЗаявке);
		СтруктураПоискаФакта = Новый Структура(КолонкиПоискаПоЗаявке);
		Для каждого СтрокаИсходнойЗаявки Из ФактПоЗаявке Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаФакта, СтрокаИсходнойЗаявки);
			СтрокиОбщегоФакта = ФактПоЗаявкам.НайтиСтроки(СтруктураПоискаФакта);
			Если СтрокиОбщегоФакта.Количество() > 0 Тогда
				СтрокаОбщегоФакта = СтрокиОбщегоФакта[0];
				СтрокаОбщегоФакта.ВИсходнойЗаявке = Истина;
				СтрокаОбщегоФакта.СуммаФактИсходнойЗаявки = СтрокаИсходнойЗаявки.СуммаФакт;
			КонецЕсли;
		КонецЦикла;
		
		// Сбор запроса для план-факт анализа
		ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФактаДляКонтроляЛимитов, ФактПоЗаявкам, СработавшиеЛимиты);
		
		НарушеныТолькоИнформационныеЛимиты = Истина;
		КэшПредставлений = Новый Соответствие;
		
		// План-факт анализ
		Для Каждого СтрокаПланФакта Из ПланФактПоПравилам Цикл
			Если СтрокаПланФакта.СуммаПревышения = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИерархияАналитикПоПравилам = СработавшиеЛимиты.ИерархияАналитикПоПравилам; // Соответствие
			ИерархияАналитик = ИерархияАналитикПоПравилам.Получить(СтрокаПланФакта.Правило);
			
			ТекстСообщения = ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(
				ИерархияАналитик,
				СтрокаПланФакта, 
				РеквизитыЗаявки.ДатаПроверки,
				КэшПредставлений);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
			Если СтрокаПланФакта.ТипЛимита <> Перечисления.ТипыЛимитовРасходованияДС.Информационный Тогда
				НарушеныТолькоИнформационныеЛимиты = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	#КонецОбласти 
	
	Если ПродолжитьРасчет Тогда
		ПланФактПоПравилам.Индексы.Добавить("ТипЛимита");
		
		РазрешающийЛимитНайден    = ПланФактПоПравилам.Найти(РазрешающийЛимит, "ТипЛимита") <> Неопределено;
		ИнформационныйЛимитНайден = ПланФактПоПравилам.Найти(ИнформационныйЛимит, "ТипЛимита") <> Неопределено;
	КонецЕсли;
	
	Если НЕ РазрешающийЛимитНайден И РазрешающийЛимитОбязателен Тогда
		// Анализ, что заявка попала в один из "разрешающих лимитов".
		НарушеныТолькоИнформационныеЛимиты = Ложь;
		ТекстСообщения = НСтр("ru = 'Заявка не попадает ни в одно ""Разрешающее"" правило лимитирования. 
									|Заявка может быть только сверх-лимитной.';
									|en = 'Request is not included in any Allowing limiting rule.
									|Request can be only above the limit.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "",ТекстСообщения, "");
	ИначеЕсли НЕ РазрешающийЛимитНайден И НЕ ИнформационныйЛимитНайден Тогда
		// Если в системе на текущую дату действуют только информационные лимиты - то разрешающие лимиты не обязательны,
		// но если заявка не попадает ни в одно правило лимита, то это ошибка,
		// т.к. возможно не были учтены настройки правил сбора фактических данных.
		НарушеныТолькоИнформационныеЛимиты = Ложь;
		ТекстСообщения = НСтр("ru = 'Заявка не попадает ни в одно правило лимитирования.
									|Заявка может быть только сверх-лимитной.';
									|en = 'Request is not included in any limiting rule.
									|Request can be only above the limit.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "",ТекстСообщения, "");
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(ИерархияАналитик, СтрокаПланФакта, ДатаПроверки, КэшПредставлений)
	
	ПрименяемоеПравилоЛимита = СтрокаПланФакта.Правило; // СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования -
	
	ПравоИспользованияОтчета = ПравоДоступа("Использование", Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования);
	
	ПредставлениеАналитикЛимита = ПредставлениеЛимита(ИерархияАналитик, СтрокаПланФакта, КэшПредставлений);
	
	ПрименяемоеПравилоЛимитаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрименяемоеПравилоЛимита, "Наименование, Периодичность");
	ПериодПравила = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(ДатаПроверки, ПрименяемоеПравилоЛимитаРеквизиты.Периодичность);
	
	ПредставлениеПравилаЛимитов = КэшПредставлений.Получить(ПрименяемоеПравилоЛимита);
	Если ПредставлениеПравилаЛимитов = Неопределено Тогда
		ПредставлениеПравилаЛимитов = ПрименяемоеПравилоЛимитаРеквизиты.Наименование;
		КэшПредставлений.Вставить(ПрименяемоеПравилоЛимита, ПредставлениеПравилаЛимитов);
	КонецЕсли;
	
	Если ПравоИспользованияОтчета Тогда
		Если ЗначениеЗаполнено(ПредставлениеАналитикЛимита) Тогда
			ТекстСообщения = НСтр("ru = 'Общее превышение на %1 %4 лимита ""%5"" по аналитикам запланированного бюджета %6.';
									|en = 'Total exceeding %1 %4 of limit ""%5"" by the %6 planned budget dimensions.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Общее превышение на %1 %4 лимита ""%5"".';
									|en = 'Total exceeding %1 %4 of limit ""%5"".'");
		КонецЕсли;
		Если СтрокаПланФакта.СуммаПлан = 0 Тогда
			ТекстСообщения = ТекстСообщения
				+ Символы.ПС
				+ НСтр("ru = 'Лимит в периоде %7 не установлен.';
						|en = 'Limit in the %7 period is not set.'");
		ИначеЕсли СтрокаПланФакта.СуммаМожноСписать > 0 Тогда
			ТекстСообщения = ТекстСообщения
				+ Символы.ПС
				+ НСтр("ru = 'Всего лимит в периоде %7 - %2 %4. Можно списать %3 %4.';
						|en = 'Total limit in the %7 period - %2 %4. %3 %4 can be written off.'");
		Иначе
			ТекстСообщения = ТекстСообщения
				+ Символы.ПС
				+ НСтр("ru = 'Всего лимит в периоде %7 - %2 %4. Лимит израсходован.';
						|en = 'Total limit in the %7 period - %2 %4. Limit is exhausted.'");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПредставлениеАналитикЛимита) Тогда
			ТекстСообщения = НСтр("ru = 'Общее превышение лимита ""%5"" по аналитикам запланированного бюджета %6 за период %7.';
									|en = 'Total exceeding of limit ""%5"" by the %6 planned budget dimensions for the %7 period.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Общее превышение лимита ""%5"" за период %7.';
									|en = 'Total exceeding of limit ""%5"" for the %7 period.'");
		КонецЕсли;
		Если СтрокаПланФакта.СуммаМожноСписать > 0 Тогда
			ТекстСообщения = ТекстСообщения
			+ Символы.ПС
			+ НСтр("ru = 'Можно списать %3 %4.';
					|en = '%3 %4 can be written off.'");
		Иначе
			ТекстСообщения = ТекстСообщения
			+ Символы.ПС
			+ НСтр("ru = 'Лимит израсходован.';
					|en = 'Limit is exhausted.'");
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		СтрокаПланФакта.СуммаПревышения,
		СтрокаПланФакта.СуммаПлан,
		СтрокаПланФакта.СуммаМожноСписать,
		СтрокаПланФакта.Валюта,
		ПредставлениеПравилаЛимитов,
		ПредставлениеАналитикЛимита,
		ПериодПравила);
		
	Возврат ТекстСообщения;

КонецФункции

Функция ЕстьДвиженияПоРегистру(Регистратор, ИмяРегистра)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистр.Регистратор
		|ИЗ
		|	&ТекстЗапросаИмяТаблицы КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор = &Регистратор
		|	И Регистр.Активность");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаИмяТаблицы", ИмяРегистра);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

Функция ИменаРегистровНепустыхНаборов(Знач ДвиженияДокумента, ПроверятьТолькоНаличиеВКоллекции = Ложь)
	
	Перем ОтборИсточниковПоИменамРегистров, МетаданныеРегистра, НаборЗаписейДокумента;
	
	ОтборИсточниковПоИменамРегистров = Новый Массив;
	Для Каждого НаборЗаписейДокумента Из ДвиженияДокумента Цикл
		Если НаборЗаписейДокумента.Количество() > 0 
			Или ПроверятьТолькоНаличиеВКоллекции Тогда
			
			МетаданныеРегистра = НаборЗаписейДокумента.Метаданные();
			ИмяРегистра = МетаданныеРегистра.Имя;
			
			Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрНакопления." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрБухгалтерии." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрРасчета." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрСведений." + ИмяРегистра);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборИсточниковПоИменамРегистров;

КонецФункции

Функция ПредставлениеЛимита(ИерархияАналитик, НайденнаяСтрока, КэшПредставлений)
	
	ЧастиПредставлениеЛимита = Новый Массив;
	
	Для каждого ИспользуемаяАналитика Из ИерархияАналитик Цикл
		Если НЕ ИспользуемаяАналитика.Используется Тогда
			Продолжить;
		КонецЕсли;
		ИмяИзмеренияВидАналитики = ИспользуемаяАналитика.ИзмерениеВидАналитики;
		
		ЗначениеАналитики = НайденнаяСтрока[ИспользуемаяАналитика.ПутьКАналитике];
		Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
			ПредставлениеЗначения = КэшПредставлений.Получить(ЗначениеАналитики);
			Если ПредставлениеЗначения = Неопределено Тогда
				ПредставлениеЗначения = Строка(ЗначениеАналитики);
				КэшПредставлений.Вставить(ЗначениеАналитики, ПредставлениеЗначения);
			КонецЕсли;
		Иначе
			ПредставлениеЗначения = БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(
				ИмяИзмеренияВидАналитики, "Прочие",, КэшПредставлений);
		КонецЕсли;
		
		ЧастиПредставлениеЛимита.Добавить(ПредставлениеЗначения);
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставлениеЛимита, " / ");
	
КонецФункции

Функция ПрименятьПравило(РеквизитыПравилаПолученияФакта, ОтборИсточниковПоИменамРегистров, КэшПримененияПравил, ТипыДанныхУчетаПриходРасход)
	
	Если ОтборИсточниковПоИменамРегистров = Неопределено Тогда
		ПрименятьПравило = Истина;
	Иначе
		НайденнаяСтрока = КэшПримененияПравил.Найти(РеквизитыПравилаПолученияФакта.Правило, "Правило");
	
		Если НайденнаяСтрока = Неопределено Тогда
			Если РеквизитыПравилаПолученияФакта.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет
				И ТипыДанныхУчетаПриходРасход.Количество() > 0 Тогда
				ПрименятьПравило = Ложь;
				Для Каждого ПриходРасход Из ТипыДанныхУчетаПриходРасход Цикл
					Если ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(РеквизитыПравилаПолученияФакта, ПриходРасход, "ТипДанныхУчетаПриход,ТипДанныхУчетаРасход") Тогда
						ПрименятьПравило = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПрименятьПравило = ПрименятьПравилоСтатьи(РеквизитыПравилаПолученияФакта, ОтборИсточниковПоИменамРегистров);
			КонецЕсли;
			НоваяСтрокаТаблицыКэша = КэшПримененияПравил.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыКэша, РеквизитыПравилаПолученияФакта);
			НоваяСтрокаТаблицыКэша.ПрименятьВЗаявках = ПрименятьПравило;
		Иначе
			ПрименятьПравило = НайденнаяСтрока.ПрименятьВЗаявках;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПрименятьПравило;
	
КонецФункции

Процедура РассчитатьБлижайшиеАналитикиПланаСУчетомИерархии(ФактическиеДанные, ПравилаЛимитов, ПравилаЛимитовСДопДанными, ПлановыеДанные)
	
	ИерархияАналитикПоПравилам = ПравилаЛимитов.ИерархияАналитикПоПравилам; // Соответствие
	СценарииПравил = ПравилаЛимитов.СценарииПравил; // Соответствие
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	КолонкиАналитикПлана = Новый Массив;
	// Заполним аналитику плана по итоговому коэффициенту аналитик плана и соответствующим аналитикам
	ФактическиеДанные.Колонки.Добавить("ОрганизацияПлан", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КолонкиАналитикПлана.Добавить("ОрганизацияПлан");
	
	ФактическиеДанные.Колонки.Добавить("ПодразделениеПлан", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КолонкиАналитикПлана.Добавить("ПодразделениеПлан");
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ФактическиеДанные.Колонки.Добавить("Аналитика" + НомерАналитики + "План", БюджетированиеСервер.ВсеТипыАналитик());
		КолонкиАналитикПлана.Добавить("Аналитика" + НомерАналитики + "План");
	КонецЦикла;
	
	НеНайденныеСтрокиПлана = ПлановыеДанные.СкопироватьКолонки();
	ИменаКолонок = "Правило, СтатьяБюджетов, ОрганизацияПлан, ПодразделениеПлан, НачалоПериода, КонецПериода";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИменаКолонок = ИменаКолонок + ", " + "Аналитика" + НомерАналитики + "План";
	КонецЦикла;
	
	ПоискПлана = Новый Структура(ИменаКолонок);
	ИндексТаблицыПлана = ПлановыеДанные.Индексы.Добавить(ИменаКолонок);
	
	Для Каждого СтрокаФакта Из ФактическиеДанные Цикл
		
		ИерархияАналитик = ИерархияАналитикПоПравилам.Получить(СтрокаФакта.Правило);
		ОстатокКоэффициент = СтрокаФакта.ИтоговыйКоэффициентАналитикиПлана;
		ЕстьИспользуемыеАналитики = Ложь;
		НайденоПолноеНесовпадениеАналитик = Ложь;
		Для Каждого СтрокаИерархии Из ИерархияАналитик Цикл
			Если НЕ СтрокаИерархии.Используется Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьИспользуемыеАналитики = Истина;
			КоэффициентСовпадения = Цел(ОстатокКоэффициент / СтрокаИерархии.Коэффициент);
			ОстатокКоэффициент = ОстатокКоэффициент % СтрокаИерархии.Коэффициент;
			Если КоэффициентСовпадения = 2 Тогда
				// Точное совпадение измерения / аналитики.
				СтрокаФакта[СтрокаИерархии.ПутьКАналитике + "План"] = СтрокаФакта[СтрокаИерархии.ПутьКАналитике];
			ИначеЕсли КоэффициентСовпадения = 0 Тогда
				// Полное несовпадение аналитик для используемого вида измерения (аналитики).
				// Начиная с данного шага вся следующая по иерархии аналитика является прочей.
				НайденоПолноеНесовпадениеАналитик = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоПолноеНесовпадениеАналитик
			ИЛИ НЕ ЕстьИспользуемыеАналитики Тогда
			// Т.к. данной строки нет в плане, добавляем ее.
			ЗаполнитьЗначенияСвойств(ПоискПлана, СтрокаФакта);
			Если ПлановыеДанные.НайтиСтроки(ПоискПлана).Количество() = 0 Тогда
				СтрокаДополненияПлана = НеНайденныеСтрокиПлана.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДополненияПлана, ПоискПлана);
				СтрокаДополненияПлана.СценарийПлан = СценарииПравил.Получить(СтрокаФакта.Правило);
				СтрокаДополненияПлана.Валюта = СтрокаФакта.Валюта; // Валюты пересчитаны в валюту заявки.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПлановыеДанные.Индексы.Удалить(ИндексТаблицыПлана);
	Если НеНайденныеСтрокиПлана.Количество() > 0 Тогда
		ИменаКолонок = "";
		Для Каждого Колонка Из НеНайденныеСтрокиПлана.Колонки Цикл
			ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + Колонка.Имя;
		КонецЦикла;
		НеНайденныеСтрокиПлана.Свернуть(ИменаКолонок); // План с нулевой суммой.
		Для Каждого СтрокаДополненияПлана Из НеНайденныеСтрокиПлана Цикл
			НоваяСтрокаПлана = ПлановыеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлана, СтрокаДополненияПлана);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПланФактПоПравиламЛимитов(ПараметрыПолученияФакта, ФактическиеДанные, ПравилаЛимитов, ВРазрезеГруппировокФакта = Ложь, ДополнительныйОтборРасшифровкиОтчета = Неопределено)
	
	ПланФактПоПравиламЛимитов = Новый ТаблицаЗначений;
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ВалютаЗаявки = ПараметрыПолученияФакта.ПараметрыПолученияФакта.ВалютаСценария;
	ДатаПроверки = ПараметрыПолученияФакта.ПараметрыПолученияФакта.ДатаАктуальности;
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	РасшифровкаПоРегистратору = Ложь;
	Если НЕ ДополнительныйОтборРасшифровкиОтчета = Неопределено
		И ДополнительныйОтборРасшифровкиОтчета.ИспользоватьОтбор Тогда
		// Расшифровка отчета по лимитам. Используется только вместе с отбором по правилу лимитов.
		РасшифровкаПоРегистратору = ДополнительныйОтборРасшифровкиОтчета.РасшифровкаПоРегистратору;
	КонецЕсли;
	
	ПравилаЛимитовСДопДанными = ДанныеДополнительныхПолей(ПараметрыПолученияФакта, ПравилаЛимитов);
	
	Если Не ПараметрыПолученияФакта.ПараметрыПолученияФакта.ПоОрганизациям 
		И ФактическиеДанные.Колонки.Найти("Организация") = Неопределено Тогда
		ФактическиеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Не ПараметрыПолученияФакта.ПараметрыПолученияФакта.ПоПодразделениям 
		И ФактическиеДанные.Колонки.Найти("Подразделение") = Неопределено Тогда
		ФактическиеДанные.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ОтборПоЗаявке = ЗначениеЗаполнено(ПравилаЛимитов.СсылкаНаЗаявку);
	
	#Область ПолучениеПлановыхДанных
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтборПоЗаявке", ОтборПоЗаявке);
	ДополнительныеПараметры.Вставить("РасшифровкаПоРегистратору", РасшифровкаПоРегистратору);
	ДополнительныеПараметры.Вставить("ИспользоватьНесколькоВалют", ИспользоватьНесколькоВалют);
	ДополнительныеПараметры.Вставить("ДатаПроверки", ДатаПроверки);
	ДополнительныеПараметры.Вставить("ВалютаЗаявки", ВалютаЗаявки);
	ДополнительныеПараметры.Вставить("ДополнительныйОтборРасшифровкиОтчета", ДополнительныйОтборРасшифровкиОтчета);
	
	Если РасшифровкаПоРегистратору Тогда
		
		ПлановыеДанныеПоРегистраторам = ПлановыеДанныеДляПланФакта(ПравилаЛимитовСДопДанными,
		                                                           ФактическиеДанные,
		                                                           ДополнительныеПараметры);
		
		// Сворачиваем данные для корректного распределения.
		ПлановыеДанные = ПлановыеДанныеПоРегистраторам.Скопировать();
		Если ПлановыеДанные.Количество() > 0 Тогда
			КолонкиИзмерений = "";
			Для Каждого Колонка Из ПлановыеДанные.Колонки Цикл
				Если Колонка.Имя = "Регистратор"
					ИЛИ Колонка.Имя = "СуммаПлан" Тогда
					Продолжить;
				КонецЕсли;
				КолонкиИзмерений = КолонкиИзмерений + ?(КолонкиИзмерений = "", "", ", ") + Колонка.Имя;
			КонецЦикла;
			ПлановыеДанные.Свернуть(КолонкиИзмерений, "СуммаПлан");
		КонецЕсли;
	Иначе
		ПлановыеДанные = ПлановыеДанныеДляПланФакта(ПравилаЛимитовСДопДанными,
		                                            ФактическиеДанные,
		                                            ДополнительныеПараметры);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СверкаФактаИДополнениеПлана
	
	ФактическиеДанныеСвернутые = СвернутыйФактДляПланФакта(ПравилаЛимитовСДопДанными,
	                                                       ФактическиеДанные,
	                                                       ПлановыеДанные,
	                                                       ДополнительныеПараметры);
	
	// Дозаполнение аналитик плана в таблице свернутого факта и дополнение таблицы плана при отсутствии данных.
	РассчитатьБлижайшиеАналитикиПланаСУчетомИерархии(ФактическиеДанныеСвернутые,
		ПравилаЛимитов,
		ПравилаЛимитовСДопДанными,
		ПлановыеДанные);
	
	#КонецОбласти 
	
	#Область РасчетПланФакта
	
	Если РасшифровкаПоРегистратору Тогда
		// Таблица ФактическиеДанныеСвернутые свернута по неиспользуемым измерениям (аналитикам), но содержит регистратор.
		// Оставляем исходную таблицу для получения расшифровки.
		ФактическиеДанные = ФактическиеДанныеСвернутые.Скопировать();
		ИзмеренияФакта = "";
		Для Каждого КолонкаФакта Из ФактическиеДанные.Колонки Цикл
			Если КолонкаФакта.Имя = "СуммаФакт" Тогда
				Продолжить;
			КонецЕсли;
			ИзмеренияФакта = ИзмеренияФакта + ?(ИзмеренияФакта = "", "", ", ") + КолонкаФакта.Имя;
		КонецЦикла;
		ФактическиеДанные.Свернуть(ИзмеренияФакта, "СуммаФакт");
	Иначе
		ФактическиеДанные = ФактическиеДанныеСвернутые;
	КонецЕсли;
	
	СхемаПланФакта = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("ПланФактныйАнализЛимитов");
	
	Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(СхемаПланФакта.НаборыДанных.Факт,
		                                           "СуммаФактИсходнойЗаявки",
		                                           "СуммаФактИсходнойЗаявки",,
		                                           ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаПланФакта,
		                                                "СуммаМожноСписать",
		                                                "0",
		                                                ,
		                                                Истина,
		                                                ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		ФинансоваяОтчетностьСервер.НовыйРесурс(СхемаПланФакта, 
		                                       "СуммаМожноСписать",
		                                       "Сумма",
		                                       "ВЫБОР
		                                       | КОГДА ЕстьNull(Сумма(СуммаПлан), 0) > (ЕстьNull(Сумма(СуммаФакт), 0) - ЕстьNull(Сумма(СуммаФактИсходнойЗаявки), 0))
		                                       |     ТОГДА ЕстьNull(Сумма(СуммаПлан), 0) - (ЕстьNull(Сумма(СуммаФакт), 0) - ЕстьNull(Сумма(СуммаФактИсходнойЗаявки), 0))
		                                       |     ИНАЧЕ 0
		                                       | КОНЕЦ");
		
	КонецЕсли;
	
	КомпоновщикНастроек = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаПланФакта);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроек);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
	ВнешниеНаборыДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	ВнешниеНаборыДанных.Вставить("ПлановыеДанные",    ПлановыеДанные);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПланФакта));
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек, "ОтборПоЗаявке", ОтборПоЗаявке);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек, "ДатаПроверкиКурса",          ДатаПроверки);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек, "ВалютаОтчета",               ВалютаЗаявки);
	
	Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
		ПолеСуммаФактИсходнойЗаявки =КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеСуммаФактИсходнойЗаявки.Использование = Истина;
		ПолеСуммаФактИсходнойЗаявки.Поле = Новый ПолеКомпоновкиДанных("СуммаМожноСписать");
	КонецЕсли;
	
	Если ВРазрезеГруппировокФакта Тогда
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Если Настройки.Структура.Количество() > 0 Тогда
			Группировка = Настройки.Структура[0];
			Если Группировка.Структура.Количество() > 0
				И Группировка.Структура[0].Имя = "ГруппировкиФакта" Тогда
				Группировка.Структура[0].Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		ДеревоПланФакт = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПланФакта, КомпоновщикНастроек, ВнешниеНаборыДанных, Истина);
		
		
		ПланФактПоПравиламЛимитов = Новый ТаблицаЗначений;
		Для Каждого КолонкаДерева Из ДеревоПланФакт.Колонки Цикл
			Если КолонкаДерева.Имя = "Организация"
				ИЛИ КолонкаДерева.Имя = "ОрганизацияФакт" Тогда
				ТипКолонки = Новый ОписаниеТипов("СправочникСсылка.Организации");
			ИначеЕсли КолонкаДерева.Имя = "Подразделение"
				ИЛИ КолонкаДерева.Имя = "ПодразделениеФакт" Тогда
				ТипКолонки = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
			Иначе
				ТипКолонки = КолонкаДерева.ТипЗначения;
			КонецЕсли;
			ПланФактПоПравиламЛимитов.Колонки.Добавить(КолонкаДерева.Имя, ТипКолонки);
		КонецЦикла;
		ПланФактПоПравиламЛимитов.Колонки.Добавить("ЭтоСтрокаФакта", Новый ОписаниеТипов("Булево"));
		ПланФактПоПравиламЛимитов.Колонки.Добавить("ИмеетСтрокиФакта", Новый ОписаниеТипов("Булево"));
		
		Если РасшифровкаПоРегистратору Тогда
			ПланФактПоПравиламЛимитов.Колонки.Добавить("Регистратор");
			
			// Соответствия, где Ключ - имя колонки ПланФакта, значение - имя колонки таблицы с регистратором.
			ПоляПоискаПлан = Новый Соответствие;
			ПоляПоискаФакт = Новый Соответствие;
			
			ПоляПоискаПлан.Вставить("Организация", "ОрганизацияПлан");
			ПоляПоискаПлан.Вставить("Подразделение", "ПодразделениеПлан");
			
			ПоляПоискаФакт.Вставить("ОрганизацияФакт", "Организация");
			ПоляПоискаФакт.Вставить("ПодразделениеФакт", "Подразделение");
			
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				ПоляПоискаПлан.Вставить("Аналитика" + НомерАналитики, "Аналитика" + НомерАналитики + "План");
				ПоляПоискаФакт.Вставить("Аналитика" + НомерАналитики + "Факт", "Аналитика" + НомерАналитики);
			КонецЦикла;
			
			КолонкиРегистраторовПлана = "Правило, СтатьяБюджетов, НачалоПериода, КонецПериода";
			КолонкиРегистраторовФакта = "Правило, СтатьяБюджетов, НачалоПериода, КонецПериода";
			
			Для каждого СоответствиеКолонок Из ПоляПоискаПлан Цикл
				КолонкиРегистраторовПлана = КолонкиРегистраторовПлана + ", " + СоответствиеКолонок.Значение;
			КонецЦикла;
			Для каждого СоответствиеКолонок Из ПоляПоискаФакт Цикл
				КолонкиРегистраторовФакта = КолонкиРегистраторовФакта + ", " + СоответствиеКолонок.Значение;
			КонецЦикла;
			
			ПлановыеДанныеПоРегистраторам.Индексы.Добавить(КолонкиРегистраторовПлана);
			ФактическиеДанныеСвернутые.Индексы.Добавить(КолонкиРегистраторовФакта);
			
			ПоискПлан = Новый Структура(КолонкиРегистраторовПлана);
			ПоискФакт = Новый Структура(КолонкиРегистраторовФакта);
			
		КонецЕсли;
		// Обходится дерево значений. На 1-ом уровне устанавливается только сумма плана, на 2-ом только сумма факта.
		// Получается таблица, помещаемая в схему компоновки отчета.
		
		Для Каждого СтрокаПлан Из ДеревоПланФакт.Строки Цикл
			
			Если РасшифровкаПоРегистратору Тогда
				
				ЗаполнитьЗначенияСвойств(ПоискПлан, СтрокаПлан, "Правило, СтатьяБюджетов, НачалоПериода, КонецПериода");
				Для Каждого СоответствиеКолонок Из ПоляПоискаПлан Цикл
					ПоискПлан[СоответствиеКолонок.Значение] = СтрокаПлан[СоответствиеКолонок.Ключ];
				КонецЦикла;
				РегистраторыПлана = ПлановыеДанныеПоРегистраторам.НайтиСтроки(ПоискПлан);
				Для Каждого СтрокаПланаСРегистратором Из РегистраторыПлана Цикл
					
					НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлан,, "СуммаФакт");
					НоваяСтрока.СуммаПлан = СтрокаПланаСРегистратором.СуммаПлан;
					НоваяСтрока.Регистратор = СтрокаПланаСРегистратором.Регистратор;
					НоваяСтрока.СуммаФакт = 0;
					НоваяСтрока.СуммаПревышения = 0;
					НоваяСтрока.ЭтоСтрокаФакта = Ложь;
					НоваяСтрока.ИмеетСтрокиФакта = (СтрокаПлан.Строки.Количество() > 0);
					
				КонецЦикла;
			Иначе
				
				НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлан,, "СуммаФакт");
				НоваяСтрока.СуммаФакт = 0;
				НоваяСтрока.ЭтоСтрокаФакта = Ложь;
				НоваяСтрока.ИмеетСтрокиФакта = (СтрокаПлан.Строки.Количество() > 0);
				
			КонецЕсли;
			
			Для Каждого СтрокаВложенногоФакта Из СтрокаПлан.Строки Цикл
				
				Если РасшифровкаПоРегистратору Тогда
					
					ЗаполнитьЗначенияСвойств(ПоискФакт, СтрокаПлан, "Правило, СтатьяБюджетов, НачалоПериода, КонецПериода");
					Для Каждого СоответствиеКолонок Из ПоляПоискаФакт Цикл
						ПоискФакт[СоответствиеКолонок.Значение] = СтрокаВложенногоФакта[СоответствиеКолонок.Ключ];
					КонецЦикла;
					
					РегистраторыФакта = ФактическиеДанныеСвернутые.НайтиСтроки(ПоискФакт);
					Для Каждого СтрокаФактаСРегистратором Из РегистраторыФакта Цикл
						
						НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВложенногоФакта,, "СуммаПлан, СуммаПревышения");
						НоваяСтрока.СуммаПлан = 0;
						НоваяСтрока.СуммаПревышения = 0;
						НоваяСтрока.СуммаФакт = СтрокаФактаСРегистратором.СуммаФакт;
						НоваяСтрока.Регистратор = СтрокаФактаСРегистратором.Регистратор;
						НоваяСтрока.ЭтоСтрокаФакта = Истина;
						
					КонецЦикла;
				Иначе
					
					НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВложенногоФакта,, "СуммаПлан, СуммаПревышения");
					НоваяСтрока.СуммаПлан = 0;
					НоваяСтрока.СуммаПревышения = 0;
					НоваяСтрока.ЭтоСтрокаФакта = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	Иначе
		
		ПланФактПоПравиламЛимитов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПланФакта, КомпоновщикНастроек, ВнешниеНаборыДанных);
		
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоВалют Тогда
		Если ПланФактПоПравиламЛимитов.Колонки.Найти("Валюта") = Неопределено Тогда
			ПланФактПоПравиламЛимитов.Колонки.Добавить("Валюта");
		КонецЕсли;
		ПланФактПоПравиламЛимитов.ЗаполнитьЗначения(Константы.ВалютаУправленческогоУчета.Получить(), "Валюта");
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ПланФактПоПравиламЛимитов;

КонецФункции

Функция ПлановыеДанныеДляПланФакта(ПравилаЛимитовСДопДанными, ФактическиеДанные, ДополнительныеПараметры)
	
	РасшифровкаПоРегистратору = ДополнительныеПараметры.РасшифровкаПоРегистратору;
	ИспользоватьНесколькоВалют = ДополнительныеПараметры.ИспользоватьНесколькоВалют;
	ДатаПроверки = ДополнительныеПараметры.ДатаПроверки;
	ВалютаЗаявки = ДополнительныеПараметры.ВалютаЗаявки;
	ДополнительныйОтборРасшифровкиОтчета = ДополнительныеПараметры.ДополнительныйОтборРасшифровкиОтчета;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
	СхемаПолученияПлана = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("ПолучениеПлана");
	Если РасшифровкаПоРегистратору Тогда
		НаборДанныхПлан = СхемаПолученияПлана.НаборыДанных.План;
		НаборДанныхПлан.Запрос = СтрЗаменить(НаборДанныхПлан.Запрос,
		                                     "//ПериодичностьРегистраторДляРасшифровки",
		                                     "Регистратор");
		НаборДанныхПлан.Запрос = СтрЗаменить(НаборДанныхПлан.Запрос,
		                                     "//ВыражениеПоляРегистраторДляРасшифровки",
		                                     "ТаблицаПлана.Регистратор КАК Регистратор,");
		НаборДанныхПлан.Запрос = СтрЗаменить(НаборДанныхПлан.Запрос,
		                                     "//ПолеРегистраторДляРасшифровки",
		                                     "Регистратор.*,");
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхПлан, "Регистратор", "Регистратор");
	КонецЕсли;
	КомпоновщикНастроекПолученияПлана = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаПолученияПлана);
	
	Если ИспользоватьНесколькоВалют Тогда
		
		КолонкиПересчетаПлана = Новый Массив;
		КолонкиПересчетаПлана.Добавить("СуммаПлан");
		
		ПараметрыПересчетаПлана = БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту();
		ПараметрыПересчетаПлана.ИмяНабораДанныхИсточника = "План";
		ПараметрыПересчетаПлана.ИсходнаяВалюта = "ВалютаПлан";
		ПараметрыПересчетаПлана.КолонкиПересчета = КолонкиПересчетаПлана;
		ПараметрыПересчетаПлана.ПериодКурса = ДатаПроверки;
		ПараметрыПересчетаПлана.ЦелеваяВалюта = ВалютаЗаявки;
		
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаПолученияПлана, КомпоновщикНастроекПолученияПлана, ПараметрыПересчетаПлана);
		
		ПолеРасчетнойВалюты = СхемаПолученияПлана.ВычисляемыеПоля.Найти("Валюта");
		ПолеРасчетнойВалюты.Выражение = "&ЦелеваяВалюта" + "План" + "1";
		
	КонецЕсли;
		
	КомпоновщикНастроекПолученияПлана.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПолученияПлана));
	КомпоновщикНастроекПолученияПлана.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроекПолученияПлана);
	
	Если НЕ ДополнительныйОтборРасшифровкиОтчета = Неопределено
		И ДополнительныйОтборРасшифровкиОтчета.ИспользоватьОтбор Тогда
		// Расшифровка отчета по лимитам. При расшифровке вид сравнения только на равенство.
		// Изменение настроек отчета не разрешено.
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("МодельБюджетирования")
			И НЕ ДополнительныйОтборРасшифровкиОтчета.Свойство("ПравилоЛимитов") Тогда
			
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаПолученияПлана,
			                                                "МодельБюджетирования",
			                                                "Правило.Владелец",
			                                                ,
			                                                Истина,
			                                                Новый ОписаниеТипов("СправочникСсылка.МоделиБюджетирования"));
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(
				КомпоновщикНастроекПолученияПлана.Настройки.Отбор,
				"МодельБюджетирования",
				ДополнительныйОтборРасшифровкиОтчета.МодельБюджетирования,,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("ПравилоЛимитов") Тогда
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(
				КомпоновщикНастроекПолученияПлана.Настройки.Отбор,
				"Правило",
				ДополнительныйОтборРасшифровкиОтчета.ПравилоЛимитов,,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ОтборПоАналитикамПлана = Неопределено;
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("ОтборПоАналитикамПлана", ОтборПоАналитикамПлана) Тогда
			Для Каждого ЭлементОтбора Из ОтборПоАналитикамПлана Цикл
				ФинансоваяОтчетностьСервер.НовыйОтбор(
					КомпоновщикНастроекПолученияПлана.Настройки.Отбор,
					ЭлементОтбора.ИмяИзмеренияНомерАналитики + "План",
					ЭлементОтбора.Значение,,
					ВидСравненияКомпоновкиДанных.Равно);
			КонецЦикла;
		КонецЕсли;
		Если РасшифровкаПоРегистратору Тогда
			ГруппировкаПорцииДанных = КомпоновщикНастроекПолученияПлана.Настройки.Структура[0];
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Регистратор");
		КонецЕсли;
	КонецЕсли;
	
	ПлановыеДанные = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПолученияПлана,
		КомпоновщикНастроекПолученияПлана,
		ВнешниеНаборыДанных);
	
	Возврат ПлановыеДанные;
КонецФункции

Функция СвернутыйФактДляПланФакта(ПравилаЛимитовСДопДанными, ФактическиеДанные, ПлановыеДанные, ДополнительныеПараметры)
	
	РасшифровкаПоРегистратору = ДополнительныеПараметры.РасшифровкаПоРегистратору;
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ИспользоватьНесколькоВалют = ДополнительныеПараметры.ИспользоватьНесколькоВалют;
	ДатаПроверки = ДополнительныеПараметры.ДатаПроверки;
	ВалютаЗаявки = ДополнительныеПараметры.ВалютаЗаявки;
	
	#Область МакетСверткиФакта
	
	// 1. Исходно факт получается с аналитикой, указанной в статье. Так как в правилах контроля лимитов
	// измерения и аналитики могут быть отключены, то необходимо свернуть строки факта в разрезе используемых правил
	// контроля лимитов (разрез по статье бюджетирования не достаточен, т.к. одна статья может быть указана в разных правилах).
	
	// 2. В схеме ПланФактныйАнализЛимитов факт присоединяется к плану. Т.е. набор данных плана должен быть
	// получен без учета параметров набора данных факта. Таблицу правил дополним возможными периодами получения плановых данных.
	
	// 3. Для каждой строки факта получим наиболее подходящую для нее одну (и только одну) строку плана с учетом иерархии измерений
	// и аналитик, указанных в правиле контроля лимитов.
	//  ПРИМЕР 1. Таким образом, если задан план:
	//     Контрагент1
	//        <Прочие договоры>   - сумма 1 плана
	//     Контрагент2
	//        <Прочие договоры>   - сумма 2 плана
	//     <Прочие контрагенты>
	//        <Прочие договоры>   - сумма 3 плана,
	//   то для строки факта Контрагент1 и Договор2, должна быть получена только сумма 1 плана, как ближайшее значение.
	//  ПРИМЕР 2. Также, если задан план:
	//     Контрагент1
	//        Договор1   - сумма 1 плана
	//     Контрагент2
	//        Договор2   - сумма 2 плана
	//     <Прочие контрагенты>
	//        <Прочие договоры>   - сумма 3 плана,
	//   то для строки факта Контрагент1 и Договор2, должна быть получена только сумма = 0
	//   по НЕ заданной аналитике плана Контрагент1 и <Прочие договоры>.
	//  ПРИМЕР 3. Также, если задан план:
	//     Контрагент1
	//        <Прочие договоры>   - сумма 1 плана
	//     Контрагент2
	//        <Прочие договоры>   - сумма 2 плана
	//     <Прочие контрагенты>
	//        <Прочие договоры>   - сумма 3 плана,
	//   то для строки факта Контрагент3 и Договор3, должна быть получена только сумма 3 плана, как ближайшее значение.
	//
	// С помощью рассчитанных коэффициентов измерений и аналитик, в СКД свертки
	// факта рассчитывается максимальный совокупный коэффициент строки подходящего плана.
	// Причем, в СКД свертки факта для целей определения ближайшей аналитики плана с учетом иерархии,
	// считается, что для строки факта подходят ВСЕ строки плана. Таким образом, если нет подходящей строки
	// плана (пример 2), то максимальный совокупный коэффициент строки подходящего плана будет рассчитан верно.
	// Коэффициент измерения (аналитики) тем больше, чем выше измерение (аналитика) в иерархии.
	// При расчете общего коэффициента считается, если аналитики совпали полностью, коэффициент умножается на 2,
	// Если в факте аналитика заполнена, а в плане <прочая>, то коэффициент умножается на 1,
	// Если аналитика в плане заполнена и не совпадает с аналитикой факта, то коэффициент умножается на 0.
	//  ПРИМЕР 1 (условия приведены выше):
	//   для строки факта Контрагент1 и Договор2 соответствуют строки плана:
	//     Контрагент1, <Прочие договоры>. Общий коэффициент = 2 * 10 + 1 * 1 = 21,
	//                                       где 2  - совпадение контрагентов
	//                                           10 - коэффициент аналитики Контрагенты
	//                                           1  - прочая аналитика договоров в плане
	//                                           1  - коэффициент аналитики Договоры.
	//     Контрагент2, Договор2. Общий коэффициент = 0 * 10 + 2 * 1 = 2.
	//     <Прочие контрагенты>, <Прочие договоры>. Общий коэффициент = 1 * 10 + 1 * 1 = 11.
	//   Таким образом максимальный коэффициент подходящей аналитики плана = 21.
	//   Обратное преобразование дает аналитику плана: 20 = 2 * 10 (Контрагент1) и 1 = 1 * 1 (<Прочие договоры>).
	//  ПРИМЕР 2 (условия приведены выше):
	//   для строки факта Контрагент1 и Договор2 соответствуют строки плана:
	//     Контрагент1, <Прочие договоры>. Общий коэффициент = 2 * 10 + 0 * 1 = 20,
	//     Контрагент2, Договор2. Общий коэффициент = 0 * 10 + 2 * 1 = 2.
	//     <Прочие контрагенты>, <Прочие договоры>. Общий коэффициент = 1 * 10 + 1 * 1 = 11.
	//   Таким образом максимальный коэффициент подходящей аналитики плана = 20.
	//   Обратное преобразование дает аналитику плана: 20 = 2 * 10 (Контрагент1) и 0 = 0 * 1 (<Прочие договоры>), хотя такая аналитика плана НЕ задана.
	//  ПРИМЕР 3 (условия приведены выше):
	//   для строки факта Контрагент3 и Договор3 соответствуют строки плана:
	//     Контрагент1, <Прочие договоры>. Общий коэффициент = 0 * 10 + 1 * 1 = 1,
	//     Контрагент2, <Прочие договоры>. Общий коэффициент = 0 * 10 + 1 * 1 = 1.
	//     <Прочие контрагенты>, <Прочие договоры>. Общий коэффициент = 1 * 10 + 1 * 1 = 11.
	//   Таким образом максимальный коэффициент подходящей аналитики плана = 11.
	//   Обратное преобразование дает аналитику плана: 10 = 1 * 10 (<Прочие контрагенты>) и 1 = 1 * 1 (<Прочие договоры>).
	
	СхемаСверткиФакта = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("СверткаФакта");
	
	// Расчет итогового коэффициента для нахождения ближайшей аналитики
	// Значения коэффициентов соответствующих измерений (аналитик) определяется их положением
	// и использованием в иерархии измерений (аналитик) в настройках правила контроля лимитов.
	// Чем выше положение в иерархии, тем кратно (в 10 раз) выше коэффициент измерения (аналитики).
	
	// Общий коэффициент наиболее подходящей аналитики плана рассчитывается как
	// сумма коэффициентов вида измерения (вида аналитики), умноженных на коэффициент
	// совпадения измерений (аналитик) плана и факта.
	// Коэффициент совпадения измерения (аналитики) плана и факта равен 2, 
	// если значения измерения (аналитики) плана и факта полностью совпадают.
	// Коэффициент совпадения измерения (аналитики) плана и факта равен 1, 
	// если значение измерения (аналитики) плана - это прочее значение.
	// Коэффициент совпадения измерения (аналитики) плана и факта равен 0, 
	// если значения измерения (аналитики) плана и факта полностью не совпадают.
	ВыражениеИтоговыйКоэффициентАналитикиПлана = "
		| КоэффициентОрганизацииПравила
		| * ВЫБОР
		|       КОГДА НЕ ПоОрганизациямПравила
		|           ТОГДА 2
		|       КОГДА ОрганизацияФакт = ОрганизацияПлан
		|           ТОГДА 2
		|       КОГДА ОрганизацияПлан = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|           ТОГДА 1
		|    ИНАЧЕ 0
		|    КОНЕЦ";
	ВыражениеИтоговыйКоэффициентАналитикиПлана = ВыражениеИтоговыйКоэффициентАналитикиПлана + "
		| + КоэффициентПодразделенияПравила
		| * ВЫБОР
		|       КОГДА НЕ ПоПодразделениямПравила
		|           ТОГДА 2
		|        КОГДА ПодразделениеФакт = ПодразделениеПлан
		|            ТОГДА 2
		|        КОГДА ПодразделениеПлан = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|            ТОГДА 1
		|        ИНАЧЕ 0
		|    КОНЕЦ";
	
	ШаблонВыраженияКоэффициентАналитикиПлана = "
		| + КоэффициентВидаАналитики%НомерАналитики%Правила
		| * ВЫБОР
		|        КОГДА ВидАналитики%НомерАналитики%Правила = НЕОПРЕДЕЛЕНО
		|            ТОГДА 2
		|        КОГДА Аналитика%НомерАналитики%Факт = Аналитика%НомерАналитики%План
		|            ТОГДА 2
		|        КОГДА Аналитика%НомерАналитики%План = НЕОПРЕДЕЛЕНО
		|            ТОГДА 1
		|        ИНАЧЕ 0
		|    КОНЕЦ";
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ВыражениеИтоговыйКоэффициентАналитикиПлана = ВыражениеИтоговыйКоэффициентАналитикиПлана
			+ СтрЗаменить(ШаблонВыраженияКоэффициентАналитикиПлана, "%НомерАналитики%", НомерАналитики);
	КонецЦикла;
	
	#КонецОбласти
	
	НаборДанныхФакт = СхемаСверткиФакта.НаборыДанных.Факт;
	Если РасшифровкаПоРегистратору Тогда
		// Регистратор факта.
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхФакт, "Регистратор", "Регистратор");
	КонецЕсли;
	Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхФакт,
		                                           "СуммаФактИсходнойЗаявки",
		                                           "СуммаФактИсходнойЗаявки",,
		                                           ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		ФинансоваяОтчетностьСервер.НовыйРесурс(СхемаСверткиФакта, "СуммаФактИсходнойЗаявки", "Сумма");
	КонецЕсли;
	
	ПолеИтоговыйКоэффициентАналитикиПлана = СхемаСверткиФакта.ВычисляемыеПоля.Найти("ИтоговыйКоэффициентАналитикиПлана");
	ПолеИтоговыйКоэффициентАналитикиПлана.Выражение = ВыражениеИтоговыйКоэффициентАналитикиПлана;
	
	КомпоновщикНастроекСверткиФакта = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаСверткиФакта);
	
	Если ИспользоватьНесколькоВалют Тогда
		
		КолонкиПересчетаПлана = Новый Массив;
		КолонкиПересчетаПлана.Добавить("СуммаФакт");
		Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
			КолонкиПересчетаПлана.Добавить("СуммаФактИсходнойЗаявки");
		КонецЕсли;
		
		ПараметрыПересчетаФакта = БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту();
		ПараметрыПересчетаФакта.ИмяНабораДанныхИсточника = "Факт";
		ПараметрыПересчетаФакта.ИсходнаяВалюта = "ВалютаФакт";
		ПараметрыПересчетаФакта.КолонкиПересчета = КолонкиПересчетаПлана;
		ПараметрыПересчетаФакта.ПериодКурса = ДатаПроверки;
		ПараметрыПересчетаФакта.ЦелеваяВалюта = ВалютаЗаявки;
		
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаСверткиФакта, КомпоновщикНастроекСверткиФакта, ПараметрыПересчетаФакта);
		
		ПолеРасчетнойВалюты = СхемаСверткиФакта.ВычисляемыеПоля.Найти("Валюта");
		ПолеРасчетнойВалюты.Выражение = "&ЦелеваяВалюта" + "Факт" + "1";
		
	КонецЕсли;
	
	КомпоновщикНастроекСверткиФакта.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСверткиФакта));
	КомпоновщикНастроекСверткиФакта.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроекСверткиФакта);
	
	Если РасшифровкаПоРегистратору Тогда
		ГруппировкаПорцииДанных = КомпоновщикНастроекСверткиФакта.Настройки.Структура[0];
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Регистратор");
	КонецЕсли;
	Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
		ПолеСуммаФактИсходнойЗаявки =КомпоновщикНастроекСверткиФакта.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеСуммаФактИсходнойЗаявки.Использование = Истина;
		ПолеСуммаФактИсходнойЗаявки.Поле = Новый ПолеКомпоновкиДанных("СуммаФактИсходнойЗаявки");
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
	ВнешниеНаборыДанных.Вставить("ПлановыеДанные", ПлановыеДанные);
	ВнешниеНаборыДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	
	ФактическиеДанныеСвернутые = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаСверткиФакта, КомпоновщикНастроекСверткиФакта, ВнешниеНаборыДанных);
	
	Возврат ФактическиеДанныеСвернутые;
КонецФункции

Функция ПрименятьПравилоСтатьи(ПравилоФакта, ОтборИсточниковПоИменамРегистров)
	
	СКД = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПравилоФакта);
	
	Возврат КомпоновкаДанныхСервер.НаборыДанныхСсылаютсяВЗапросахНаТаблицы(СКД.НаборыДанных, ОтборИсточниковПоИменамРегистров);
	
КонецФункции

Функция ДанныеДополнительныхПолей(ПараметрыПолученияФакта, ВспомогательныеДанные)
	
	ДанныеДополнительныхПолей = Новый ТаблицаЗначений;
	ДанныеДополнительныхПолей.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования"));
	ДанныеДополнительныхПолей.Колонки.Добавить("ТипЛимита", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЛимитовРасходованияДС"));
	ДанныеДополнительныхПолей.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоОрганизациям", Новый ОписаниеТипов("Булево"));
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоПодразделениям", Новый ОписаниеТипов("Булево"));
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоСценариям", Новый ОписаниеТипов("Булево"));
	ДанныеДополнительныхПолей.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	// Поля для целей определения наиболее подходящей строки плана для каждой строки факта.
	ДанныеДополнительныхПолей.Колонки.Добавить("КоэффициентОрганизации", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ДанныеДополнительныхПолей.Колонки.Добавить("КоэффициентПодразделения", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	// Поля НачалоПериода и КонецПериода для передачи параметров в наборы получения плана.
	ДанныеДополнительныхПолей.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДополнительныхПолей.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ВидыАналитикПравила = Новый Структура; 
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ДатаПроверки = ПараметрыПолученияФакта.ПараметрыПолученияФакта.ДатаАктуальности;
	ПравилаЛимитов = ВспомогательныеДанные.ЛимитыДействующиеНаДату;
	ИерархияАналитикПоПравилам = ВспомогательныеДанные.ИерархияАналитикПоПравилам; // Соответствие
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ДанныеДополнительныхПолей.Колонки.Добавить("ВидАналитики" + НомерАналитики, Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов, Null"));
		ВидыАналитикПравила.Вставить("ВидАналитики" + НомерАналитики);
		
		// Поля для целей определения наиболее подходящей строки плана для каждой строки факта.
		ДанныеДополнительныхПолей.Колонки.Добавить("КоэффициентВидаАналитики" + НомерАналитики);
		ВидыАналитикПравила.Вставить("КоэффициентВидаАналитики" + НомерАналитики, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	КонецЦикла;
	
	Для Каждого ПравилоЛимита Из ПравилаЛимитов Цикл
		// Периоды с одинаковой периодичностью будут свернуты до получения факта
		ПериодПравила = Новый СтандартныйПериод(
			БюджетированиеКлиентСервер.ДатаНачалаПериода(ДатаПроверки, ПравилоЛимита.Периодичность),
			БюджетированиеКлиентСервер.ДатаКонцаПериода(ДатаПроверки,  ПравилоЛимита.Периодичность));
			
		#Область КэшированиеНастроекПравила
		ИерархияАналитик = ИерархияАналитикПоПравилам.Получить(ПравилоЛимита.ПравилоЛимитов);
		НайденныеСтроки = ИерархияАналитик.НайтиСтроки(Новый Структура("ИзмерениеВидАналитики", "Организация"));
		Если НайденныеСтроки.Количество() > 0
		   И НайденныеСтроки[0].Используется Тогда
			ПоОрганизациям = Истина;
			КоэффициентОрганизации = НайденныеСтроки[0].Коэффициент;
		Иначе
			ПоОрганизациям = Ложь;
			КоэффициентОрганизации = 0;
		КонецЕсли;
			
		НайденныеСтроки = ИерархияАналитик.НайтиСтроки(Новый Структура("ИзмерениеВидАналитики", "Подразделение"));
		Если НайденныеСтроки.Количество() > 0
		   И НайденныеСтроки[0].Используется Тогда
			ПоПодразделениям = Истина;
			КоэффициентПодразделения = НайденныеСтроки[0].Коэффициент;
		Иначе
			ПоПодразделениям = Ложь;
			КоэффициентПодразделения = 0;
		КонецЕсли;
		
		ПоСценариям = ЗначениеЗаполнено(ПравилоЛимита.Сценарий);
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			НайденныеСтроки = ИерархияАналитик.НайтиСтроки(Новый Структура("ПутьКАналитике", "Аналитика" + НомерАналитики));
			Если НайденныеСтроки.Количество() > 0
			   И НайденныеСтроки[0].Используется Тогда
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = НайденныеСтроки[0].ИзмерениеВидАналитики;
				ВидыАналитикПравила["КоэффициентВидаАналитики" + НомерАналитики] = НайденныеСтроки[0].Коэффициент;
			Иначе
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = Неопределено;
				ВидыАналитикПравила["КоэффициентВидаАналитики" + НомерАналитики] = 0;
			КонецЕсли;
		КонецЦикла;
		
		#КонецОбласти 
		
		СтрокаДопДанных = ДанныеДополнительныхПолей.Добавить();
		
		СтрокаДопДанных.Правило                  = ПравилоЛимита.ПравилоЛимитов;
		СтрокаДопДанных.ТипЛимита                = ПравилоЛимита.ТипЛимита;
		СтрокаДопДанных.СтатьяБюджетов           = ПравилоЛимита.СтатьяБюджетов;
		СтрокаДопДанных.ПоОрганизациям           = ПоОрганизациям;
		СтрокаДопДанных.КоэффициентОрганизации   = КоэффициентОрганизации;
		СтрокаДопДанных.ПоПодразделениям         = ПоПодразделениям;
		СтрокаДопДанных.КоэффициентПодразделения = КоэффициентПодразделения;
		СтрокаДопДанных.ПоСценариям              = ПоСценариям;
		СтрокаДопДанных.Сценарий                 = ПравилоЛимита.Сценарий;
		СтрокаДопДанных.НачалоПериода            = НачалоДня(ПериодПравила.ДатаНачала);
		СтрокаДопДанных.КонецПериода             = НачалоДня(ПериодПравила.ДатаОкончания);
		
		ЗаполнитьЗначенияСвойств(СтрокаДопДанных, ВидыАналитикПравила);
	КонецЦикла;
	
	Возврат ДанныеДополнительныхПолей;
КонецФункции

// Возвращает параметры получения факта для проверки документа на соответствие лимитам бюджетирования.
//
// Параметры:
// 	РеквизитыЗаявки - Структура - Свойства заявки или параметры отчета:
// 	 *ДатаПроверки   - Дата - Дата проверки лимитов.
// 	 *СсылкаНаЗаявку - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Проверяемая заявка.
// 	 *ВалютаЗаявки   - СправочникСсылка.Валюты - Валюта заявки или отчета.
// 	ДействующиеЛимиты - см. ДействующиеЛимиты.
// 	ОтборПоЗаявке - Булево - флаг необходимости установки отбора по заявке.
// 	ДополнительныйОтборРасшифровкиОтчета - Неопределено - Значение по умолчанию.
// 	                                     - Структура - структура дополнительного отбора отчета при расшифровке:
// 	 *ИспользоватьОтбор - Булево - Флаг использования отбора. Обязательное свойство.
// 	 *ПравилоЛимитов    - СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования.
// 	 *ОтборПоАналитикамФакта - Массив из Структура - массив элементов отбора по аналитикам факта, если они заданы. Необязательное свойство:
// 	  **ИмяИзмеренияНомерАналитики - Строка - Имя измерения или имя аналитики по номеру. Например, "Аналитика1".
// 	  **Значение - Характеристика.АналитикиСтатейБюджетов - Значение отбора.
// 	 *РасшифровкаПоРегистратору - Булево - Флаг необходимости расшифровки по регистратору.
//
// Возвращаемое значение:
//	Структура - Параметры получения факта по статьям и показателя бюджетов. См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта.
//
Функция ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки, ДействующиеЛимиты, ОтборПоЗаявке, ДополнительныйОтборРасшифровкиОтчета = Неопределено)
	
	ЛимитыДействующиеНаДату              = ДействующиеЛимиты.ЛимитыДействующиеНаДату;
	ПризнакиУникальностиИсточниковДанных = ДействующиеЛимиты.ПризнакиУникальностиИсточниковДанных;
	
	// Инициализируем параметры получения факта
	РезультатФункции = Новый Структура("ПараметрыПолученияФакта, ИсточникиДанных");
	// Общие параметры получения фактических данных
	ПараметрыПолученияФакта = Новый Структура;
	ПараметрыПолученияФакта.Вставить("ВалютаСценария",    РеквизитыЗаявки.ВалютаЗаявки);
	ПараметрыПолученияФакта.Вставить("ГраницаФактДанных", РеквизитыЗаявки.ДатаПроверки);
	ПараметрыПолученияФакта.Вставить("ДатаАктуальности",  РеквизитыЗаявки.ДатаПроверки);
	ПараметрыПолученияФакта.Вставить("НачалоПериода",     РеквизитыЗаявки.ДатаПроверки); // Уточняется выражениями источников данных
	ПараметрыПолученияФакта.Вставить("КонецПериода",      РеквизитыЗаявки.ДатаПроверки); // Уточняется выражениями источников данных
	ПараметрыПолученияФакта.Вставить("ПериодКурса",       РеквизитыЗаявки.ДатаПроверки); // Переопределение даты пересчета курсов валют на дату проверки.
	ПараметрыПолученияФакта.Вставить("Сценарий",          Справочники.Сценарии.ИсполнениеБюджета);
	ПараметрыПолученияФакта.Вставить("Период",            Новый СтандартныйПериод(РеквизитыЗаявки.ДатаПроверки, РеквизитыЗаявки.ДатаПроверки));
	ПараметрыПолученияФакта.Вставить("ДополнительныеФильтрыПоАналитикам", Новый Структура);
	ПараметрыПолученияФакта.Вставить("ПоРегистратору",    Ложь);
	
	Показатели = Новый Структура("Сумма");
	ПараметрыПолученияФакта.Вставить("Показатели", Показатели);
	
	КолонкиТаблицыДанных = Новый Структура("Периодичности, Измерения, ВидыАналитик");
	КолонкиТаблицыДанных.Периодичности = ДействующиеЛимиты.Периодичности.ВыгрузитьКолонку("Периодичность");
	КолонкиТаблицыДанных.Измерения     = ДействующиеЛимиты.Измерения.ВыгрузитьКолонку("ИмяИзмерения");
	КолонкиТаблицыДанных.ВидыАналитик  = ДействующиеЛимиты.ВидыАналитик.ВыгрузитьКолонку("ВидАналитики");
	ПараметрыПолученияФакта.Вставить("КолонкиТаблицыДанных", КолонкиТаблицыДанных);
	
	Если КолонкиТаблицыДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ПоОрганизациям = Истина;
	Иначе
		ПоОрганизациям = Ложь;
	КонецЕсли;
	ПараметрыПолученияФакта.Вставить("ПоОрганизациям", ПоОрганизациям);
	
	Если КолонкиТаблицыДанных.Измерения.Найти("Подразделение") <> Неопределено Тогда
		ПоПодразделениям = Истина;
	Иначе
		ПоПодразделениям = Ложь;
	КонецЕсли;
	ПараметрыПолученияФакта.Вставить("ПоПодразделениям", ПоПодразделениям);
	
	НастройкиСоставаПолей = Новый Структура;
	НастройкиСоставаПолей.Вставить("ТребуетсяКоличество", Ложь);
	НастройкиСоставаПолей.Вставить("ТребуетсяСумма", Истина);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаНачальныйОстаток", Ложь);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаПриход", Истина);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаРасход", Ложь);
	
	ПараметрыПолученияФакта.Вставить("НастройкиСоставаПолей", НастройкиСоставаПолей);
	
	РезультатФункции.ПараметрыПолученияФакта = ПараметрыПолученияФакта;
	
	// Общие параметры источников данных
	ИсточникиДанных = Новый Массив;
	
	ОбщиеПараметрыИсточникаДанных = Новый Структура;
	ОбщиеПараметрыИсточникаДанных.Вставить("ТипИсточника", Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПериодСмещения", Неопределено);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПериодичностьСмещения", Перечисления.Периодичность.Год);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПривилегированныйРежим", Истина);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПредполагаетФактическиеДанные", "НеПредполагается");
	ОбщиеПараметрыИсточникаДанных.Вставить("ПредполагаетИсполнениеБюджета", "Предполагается");
	ОбщиеПараметрыИсточникаДанных.Вставить("ЕстьОнЛайновыеПравила", Истина);
	ОбщиеПараметрыИсточникаДанных.Вставить("ЕстьЦелевыеПоказатели", Ложь);
	
	ОбщиеПараметрыИсточникаДанных.Вставить("ДополнительныйОтбор", Новый НастройкиКомпоновкиДанных);
	Если ОтборПоЗаявке Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
			"Регистратор",
			РеквизитыЗаявки.СсылкаНаЗаявку);
	КонецЕсли;
	Если ОтборПоЗаявке Тогда
		ПараметрыПолученияФакта.Вставить("ОтборПоРегистраторуДляВсегоФакта", РеквизитыЗаявки.СсылкаНаЗаявку);
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
		"Сценарий",
		Справочники.Сценарии.ИсполнениеБюджета);
	
	Если НЕ ДополнительныйОтборРасшифровкиОтчета = Неопределено
		И ДополнительныйОтборРасшифровкиОтчета.ИспользоватьОтбор Тогда
		
		// Если задан отбор по регистратору, то действующие лимиты обязательно получены с отбором по одному правилу лимитов.
		ПараметрыПолученияФакта.ПоРегистратору = ДополнительныйОтборРасшифровкиОтчета.РасшифровкаПоРегистратору;
		
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("ОтборПоАналитикамФакта")
			И НЕ ОтборПоЗаявке Тогда
			// Правила получения факта по заявке должны выполниться без дополнительных отборов расшифровки отчета,
			// т.к. отбор по аналитике расшифровки может не совпадать с аналитикой заявки
			ОтборыПоАналитикамФакта = ДополнительныйОтборРасшифровкиОтчета.ОтборПоАналитикамФакта;
			Для каждого ЭлементОтбора Из ОтборыПоАналитикамФакта Цикл
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
					ЭлементОтбора.ИмяИзмеренияНомерАналитики,
					ЭлементОтбора.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Уникальные параметры источников данных
	Для Каждого ПризнакУникальности Из ПризнакиУникальностиИсточниковДанных Цикл 
		УникальныеПараметрыИсточникаДанных = Новый Структура("Идентификатор, Сценарий, Периодичность, Объекты,
			|ВыражениеПериодаГруппировки, ВыражениеНачалоПериода, ВыражениеКонецПериода");
		
		ЗаполнитьЗначенияСвойств(УникальныеПараметрыИсточникаДанных, ПризнакУникальности);
		УникальныеПараметрыИсточникаДанных.Идентификатор = "ИД_" + ИсточникиДанных.Количество();
		
		ИмяПериодичности = ОбщегоНазначения.ИмяЗначенияПеречисления(ПризнакУникальности.Периодичность);
		УникальныеПараметрыИсточникаДанных.ВыражениеПериодаГруппировки = СтрШаблон("НАЧАЛОПЕРИОДА(&НачалоПериода, %1)", ИмяПериодичности);
		УникальныеПараметрыИсточникаДанных.ВыражениеНачалоПериода      = СтрШаблон("НАЧАЛОПЕРИОДА(&НачалоПериода, %1)", ИмяПериодичности);
		УникальныеПараметрыИсточникаДанных.ВыражениеКонецПериода       = СтрШаблон("КОНЕЦПЕРИОДА(&КонецПериода, %1)", ИмяПериодичности);
		
		Если ПризнакиУникальностиИсточниковДанных.Количество() = 1 Тогда
			УникальныеПараметрыИсточникаДанных.Объекты = ЛимитыДействующиеНаДату.ВыгрузитьКолонку("СтатьяБюджетов");
		Иначе
			ОтборПравилЛимитов = Новый Структура("Сценарий, Периодичность");
			ЗаполнитьЗначенияСвойств(ОтборПравилЛимитов, ПризнакУникальности);
			
			УникальныеПараметрыИсточникаДанных.Объекты = ЛимитыДействующиеНаДату.Скопировать(ОтборПравилЛимитов, "СтатьяБюджетов").ВыгрузитьКолонку("СтатьяБюджетов");
		КонецЕсли;
		УникальныеПараметрыИсточникаДанных.Объекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			УникальныеПараметрыИсточникаДанных.Объекты);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(УникальныеПараметрыИсточникаДанных, ОбщиеПараметрыИсточникаДанных, Ложь);
		
		ИсточникиДанных.Добавить(УникальныеПараметрыИсточникаДанных);
	КонецЦикла;
	
	РезультатФункции.ИсточникиДанных = ИсточникиДанных;
	
	Возврат РезультатФункции;
	
КонецФункции

/// Возвращает действующие на указанную дату правила лимитов по данным бюджетирования.
// 
// Параметры:
//	ДатаЛимитов - Дата - дата, на которую проверяется состояние лимитов.
//	ОтборПоСтатямБюджетов - СправочникСсылка.СтатьиБюджетов -
//							- Массив из СправочникСсылка.СтатьиБюджетов - ограничение использования правил лимитов по бюджетам.
//	ИнвертироватьОтбор - Булево - признак применения отбора по условию Не.
//	ДополнительныйОтборПоПравиламЛимитов - СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования -
//											- Массив из СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - Дополнительный
//						не инвертируемый отбор по правилам лимитов. Применяется при расшифровке отчета по лимитам.
//						Неопределено. Значение по умолчанию.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* ПравилаЛимитов - ТаблицаЗначений - таблица лимитов в разрезе сценария, статьи, периодичности, типа лимита и используемых аналитик.
//		* ПравилаПолученияФакта - ТаблицаЗначений - таблица правил получения факта в разрезе статей бюджетов.
// 
Функция ПравилаЛимитовНаДату(ДатаЛимитов, ОтборПоСтатямБюджетов = Неопределено, ИнвертироватьОтбор = Ложь, ДополнительныйОтборПоПравиламЛимитов = Неопределено) Экспорт
	
	ПравилаЛимитовНаДату = Новый Структура;
	ПравилаЛимитовНаДату.Вставить("ПравилаЛимитов");
	ПравилаЛимитовНаДату.Вставить("ПравилаПолученияФакта");
	ПравилаЛимитовНаДату.Вставить("ПризнакиУникальностиИсточниковДанных");
	ПравилаЛимитовНаДату.Вставить("ВидыАналитик");
	ПравилаЛимитовНаДату.Вставить("Измерения");
	ПравилаЛимитовНаДату.Вставить("Периодичности");
	ПравилаЛимитовНаДату.Вставить("СценарииПравил");
	ПравилаЛимитовНаДату.Вставить("ИерархияАналитикПоПравилам");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МоделиБюджетирования.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ МоделиБюджетирования
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.НачалоДействия <= &ДатаЛимитов
	|	И (&ДатаЛимитов <= МоделиБюджетирования.КонецДействия
	|			ИЛИ (МоделиБюджетирования.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|					И МоделиБюджетирования.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМоделейБюджетирования.Действует)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов КАК СтатьяБюджетов
	|ПОМЕСТИТЬ СтатьиСДействующимиПравиламиПолученияФакта
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ТипПравила В (ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные), ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета))
	|	И ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетС <= &ДатаЛимитов
	|	И (&ДатаЛимитов <= ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо
	|			ИЛИ ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1))
	|	И &ОтборПоСтатьям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЛимитовПоДаннымБюджетирования.Ссылка КАК ПравилоЛимитов,
	|	ПравилаЛимитовПоДаннымБюджетирования.Наименование КАК Наименование,
	|	ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета КАК СтатьяБюджетов,
	|	ПравилаЛимитовПоДаннымБюджетирования.Сценарий КАК Сценарий,
	|	ПравилаЛимитовПоДаннымБюджетирования.Периодичность КАК Периодичность,
	|	ПравилаЛимитовПоДаннымБюджетирования.ТипЛимита КАК ТипЛимита,
	|	ИСТИНА КАК ПрочиеЗначенияАналитик
	|ПОМЕСТИТЬ ДействующиеПравилаЛимитов
	|ИЗ
	|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МоделиБюджетирования КАК МоделиБюджетирования
	|		ПО ПравилаЛимитовПоДаннымБюджетирования.Владелец = МоделиБюджетирования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиСДействующимиПравиламиПолученияФакта КАК СтатьиСДействующимиПравиламиПолученияФакта
	|		ПО ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета = СтатьиСДействующимиПравиламиПолученияФакта.СтатьяБюджетов
	|ГДЕ
	|	НЕ ПравилаЛимитовПоДаннымБюджетирования.ЭтоГруппа
	|	И НЕ ПравилаЛимитовПоДаннымБюджетирования.ПометкаУдаления
	|	И &ДополнительныйОтборПоПравиламЛимитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПравилаЛимитов.Периодичность КАК Периодичность,
	|	ДействующиеПравилаЛимитов.Сценарий КАК Сценарий
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействующиеПравилаЛимитов.Сценарий,
	|	ДействующиеПравилаЛимитов.Периодичность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПравилаЛимитов.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ДействующиеПравилаЛимитов.Наименование КАК Наименование,
	|	ДействующиеПравилаЛимитов.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДействующиеПравилаЛимитов.Сценарий КАК Сценарий,
	|	ДействующиеПравилаЛимитов.Периодичность КАК Периодичность,
	|	ДействующиеПравилаЛимитов.ТипЛимита КАК ТипЛимита,
	|	ДействующиеПравилаЛимитов.ПрочиеЗначенияАналитик КАК ПрочиеЗначенияАналитик
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ВидАналитики КАК ВидАналитики
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитик КАК ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик
	|		ПО ДействующиеПравилаЛимитов.ПравилоЛимитов = ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Ссылка
	|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ВидАналитики <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка))
	|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Используется)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ВидАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ИмяИзмерения КАК ИмяИзмерения
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитик КАК ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик
	|		ПО ДействующиеПравилаЛимитов.ПравилоЛимитов = ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Ссылка
	|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ИмяИзмерения <> """")
	|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Используется)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ИмяИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Правило,
	|	СтатьиСДействующимиПравиламиПолученияФакта.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных КАК РазделИсточникаДанных,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК ИсточникДанных,
	|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).Приход КАК ТипДанныхУчетаПриход,
	|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).Расход КАК ТипДанныхУчетаРасход,
	|	ВЫБОР
	|		КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет)
	|			И &НастройкаПолученияФактаПоКорреспондирующимРегистрам
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоТаблицеКорреспонденций,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ХешСхемыКомпоновкиДанных КАК ХешСхемыКомпоновкиДанных
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиСДействующимиПравиламиПолученияФакта КАК СтатьиСДействующимиПравиламиПолученияФакта
	|		ПО ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов = СтатьиСДействующимиПравиламиПолученияФакта.СтатьяБюджетов
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных ССЫЛКА Справочник.НастройкиХозяйственныхОпераций
	|			ТОГДА ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПравилаЛимитов.Периодичность КАК Периодичность
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействующиеПравилаЛимитов.Периодичность";
	
	Запрос.УстановитьПараметр("ДатаЛимитов", ДатаЛимитов);
	Запрос.УстановитьПараметр("НастройкаПолученияФактаПоКорреспондирующимРегистрам", ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам"));
	Если ДополнительныйОтборПоПравиламЛимитов = Неопределено Тогда
		ТекстДопОтбораПоПравилам = "Истина";
	Иначе
		ТекстДопОтбораПоПравилам = "ПравилаЛимитовПоДаннымБюджетирования.Ссылка В (&ДополнительныйОтборПоПравиламЛимитов)";
		Запрос.УстановитьПараметр("ДополнительныйОтборПоПравиламЛимитов", ДополнительныйОтборПоПравиламЛимитов);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныйОтборПоПравиламЛимитов", ТекстДопОтбораПоПравилам);
	
	Если ЗначениеЗаполнено(ОтборПоСтатямБюджетов) Тогда
		Если ТипЗнч(ОтборПоСтатямБюджетов) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
			МассивСтатей = Новый Массив;
			МассивСтатей.Добавить(ОтборПоСтатямБюджетов);
		ИначеЕсли ТипЗнч(ОтборПоСтатямБюджетов) = Тип("Массив") Тогда 
			МассивСтатей = ОтборПоСтатямБюджетов;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатьям", 
			СтрШаблон("ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов %1 В (&ОтборПоСтатьям)", ?(ИнвертироватьОтбор, "НЕ", "")));
		Запрос.УстановитьПараметр("ОтборПоСтатьям", МассивСтатей);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтатьям", Истина);
	КонецЕсли;
	
	СценарииПравил = Новый Соответствие;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПравилаЛимитов   = РезультатЗапроса[4].Выгрузить();
	ИерархияАналитикПоПравилам = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитикПоПравиламСУказаниемКолонокИсточника(
		ПравилаЛимитов.ВыгрузитьКолонку("ПравилоЛимитов"));
	Для каждого СтрокаПравила Из ПравилаЛимитов Цикл
		ИерархияАналитикПравила = ИерархияАналитикПоПравилам.Получить(СтрокаПравила.ПравилоЛимитов);
		ИерархияАналитикПравила.Колонки.Добавить("Коэффициент");
		СтрокВИерархии = ИерархияАналитикПравила.Количество();
		Для каждого СтрокаИерархииАналитики из ИерархияАналитикПравила Цикл
			// Определяется коэффициент влияния аналитики (измерения) с учетом иерархии.
			// Чем меньше номер строки, тем выше коэффициент, тем приоритетнее аналитика (измерение).
			КоэффициентАналитики = ?(СтрокаИерархииАналитики.Используется, 1, 0)
				* Pow(10, СтрокВИерархии - СтрокаИерархииАналитики.НомерВИерархии);
			СтрокаИерархииАналитики.Коэффициент = КоэффициентАналитики;
		КонецЦикла;
		ИерархияАналитикПоПравилам.Вставить(СтрокаПравила.ПравилоЛимитов, ИерархияАналитикПравила);
		
		СценарииПравил.Вставить(СтрокаПравила.ПравилоЛимитов, СтрокаПравила.Сценарий);
	КонецЦикла;
	
	ПравилаЛимитовНаДату.ПравилаПолученияФакта = РезультатЗапроса[7].Выгрузить();
	ПравилаЛимитовНаДату.ПравилаЛимитов = ПравилаЛимитов;
	ПравилаЛимитовНаДату.ПризнакиУникальностиИсточниковДанных = РезультатЗапроса[3].Выгрузить();
	ПравилаЛимитовНаДату.ВидыАналитик = РезультатЗапроса[5].Выгрузить();
	ПравилаЛимитовНаДату.Измерения = РезультатЗапроса[6].Выгрузить();
	ПравилаЛимитовНаДату.Периодичности = РезультатЗапроса[8].Выгрузить();
	ПравилаЛимитовНаДату.СценарииПравил = СценарииПравил;
	ПравилаЛимитовНаДату.ИерархияАналитикПоПравилам = ИерархияАналитикПоПравилам;
	
	// Уточнение данных
	ПравилаПолученияФакта = ПравилаЛимитовНаДату.ПравилаПолученияФакта; // ТаблицаЗначений - 
	ПравилаПолученияФакта.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ПравилаПолученияФакта.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	Возврат ПравилаЛимитовНаДату;
	
КонецФункции

// Обновляет состав лимитов с учетом имен регистров.
//
Процедура УточнитьСоставЛимитовПоИменамРегистров(ДействующиеЛимиты)
	
	ОтборИсточниковПоИменамРегистров = ДействующиеЛимиты.ОтборИсточниковПоИменамРегистров;
	
	ЛимитыДействующиеНаДату = ДействующиеЛимиты.ЛимитыДействующиеНаДату;
	ТаблицаПравилСтатей = ДействующиеЛимиты.ТаблицаПравилСтатей;
	КэшПримененияПравил = ДействующиеЛимиты.КэшПримененияПравил;
	
	СтрокиНеприменяемыхПравил  = Новый Массив;
	СтрокиНеприменяемыхЛимитов = Новый Массив;
	СтатьиБюджетовНеприменяемыхПравил = Новый Соответствие;
	
	ТипыДанныхУчетаПриходРасход = Новый Массив;
	Если ТаблицаПравилСтатей.Найти(Истина, "ПоТаблицеКорреспонденций") <> Неопределено Тогда
		ТипыДанныхУчетаПриходРасход = ИсточникиДанныхСервер.ТипыДанныхУчетаЗаявки(ДействующиеЛимиты.СсылкаНаЗаявку);
	КонецЕсли;
	
	Для Каждого ДействующийЛимит Из ЛимитыДействующиеНаДату Цикл
		СтрокиПравилПолученияФакта = ТаблицаПравилСтатей.НайтиСтроки(Новый Структура("СтатьяБюджетов", ДействующийЛимит.СтатьяБюджетов));
		
		Если Не СтатьиБюджетовНеприменяемыхПравил.Получить(ДействующийЛимит.СтатьяБюджетов) = Неопределено Тогда
			СтрокиНеприменяемыхЛимитов.Добавить(ДействующийЛимит); // Удалим лимиты, которые заявка не затрагивает движениями
			
			Продолжить;
		КонецЕсли;
		
		// Заполним параметры получения по периодам в разрезе правил
		КоличествоПрименяемыхПравилПоСтатье = 0;
		
		Для Каждого СтрокаПравилаПолученияФакта Из СтрокиПравилПолученияФакта Цикл
			// Проверим, что правило получения факта обращается хотя бы к одному регистру движений заявки.
			Если Не ПрименятьПравило(СтрокаПравилаПолученияФакта, ОтборИсточниковПоИменамРегистров, КэшПримененияПравил, ТипыДанныхУчетаПриходРасход) Тогда
				Если СтрокиНеприменяемыхПравил.Найти(СтрокаПравилаПолученияФакта) = Неопределено Тогда
					СтрокиНеприменяемыхПравил.Добавить(СтрокаПравилаПолученияФакта);
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			КоличествоПрименяемыхПравилПоСтатье = КоличествоПрименяемыхПравилПоСтатье + 1;
		КонецЦикла;
		
		Если КоличествоПрименяемыхПравилПоСтатье = 0 Тогда
			СтатьиБюджетовНеприменяемыхПравил.Вставить(ДействующийЛимит.СтатьяБюджетов, Истина);
			
			СтрокиНеприменяемыхЛимитов.Добавить(ДействующийЛимит); // Удалим лимиты, которые заявка не затрагивает движениями
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим содержание таблиц, отключив предварительно индексы
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ЛимитыДействующиеНаДату);
	Для Каждого СтрокаНеприменяемогоЛимита Из СтрокиНеприменяемыхЛимитов Цикл
		ЛимитыДействующиеНаДату.Удалить(СтрокаНеприменяемогоЛимита);
	КонецЦикла;
	ИндексыТаблицы = ДействующиеЛимиты.ИндексыТаблиц.Получить("ЛимитыДействующиеНаДату");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ЛимитыДействующиеНаДату, ИндексыТаблицы);
	
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	Для Каждого СтрокаНеприменяемогоПравила Из СтрокиНеприменяемыхПравил Цикл
		ТаблицаПравилСтатей.Удалить(СтрокаНеприменяемогоПравила);
	КонецЦикла;
	ИндексыТаблицы = ДействующиеЛимиты.ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
КонецПроцедуры

// Возвращает условия проверки заявки на соответствие лимитам бюджетирования.
//
// Параметры:
//	Дата - Дата - дата, на которую проверяется состояние лимитов.
//	ОтборПоСтатьямБюджетов - СправочникСсылка.СтатьиБюджетов -
//							- Массив из СправочникСсылка.СтатьиБюджетов - ограничение использования правил лимитов по бюджетам.
//	ИнвертироватьОтбор - Булево - признак применения отбора ОтборПоСтатьямБюджетов по условию Не.
//	ДополнительныйОтборПоПравиламЛимитов - СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - 
//										- Массив из СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - Дополнительный
//					не инвертируемый отбор по правилам лимитов. Применяется при расшифровке отчета по лимитам.
//					Неопределено. Значение по умолчанию.
//
// Возвращаемое значение:
//	Структура - параметры проверки заявки на соответствие лимитам бюджетирования:
//		* Дата - Дата - дата, на которую проверяется состояние лимитов.
//		* СсылкаНаЗаявку - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый документ. 
//			Значение по умолчанию - пустая ссылка.
//		* ОтборИсточниковПоИменамРегистров - Массив - имена таблиц источников данных, которые требуется использовать. 
//			Значение по умолчанию - Неопределено, значит использовать все источники данных.
//		* ЛимитыДействующиеНаДату - см. ЛимитыРасходованияДенежныхСредствСервер.ПравилаЛимитовНаДату
//		* ТаблицаПравилСтатей - ТаблицаЗначений - см. в Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.Макеты.ПравилаПолученияФакта
//		* КэшПримененияПравил - ТаблицаЗначений - кэшированный признак применения правила.
//		* ИндексыТаблиц - Соответствие из КлючИЗначение - см. ИсточникиДанныхСервер.ИменаТаблицИИндексы.
//
Функция ДействующиеЛимиты(Дата, ОтборПоСтатьямБюджетов = Неопределено, ИнвертироватьОтбор = Ложь, ДополнительныйОтборПоПравиламЛимитов = Неопределено)
	
	ДействующиеЛимиты = Новый Структура("
		|ДатаПроверки, СсылкаНаЗаявку, 
		|ЛимитыДействующиеНаДату,
		|ТаблицаПравилСтатей,
		|ПризнакиУникальностиИсточниковДанных,
		|ВидыАналитик, Измерения, Периодичности, СценарииПравил, ИерархияАналитикПоПравилам,
		|ОтборИсточниковПоИменамРегистров, КэшПримененияПравил, ИндексыТаблиц");
	
	#Область ДанныеЗаявки
		
	ДействующиеЛимиты.ДатаПроверки = Дата;
	ДействующиеЛимиты.СсылкаНаЗаявку = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка(); 
	
	#КонецОбласти 
	
	ПравилаЛимитовНаДату = ПравилаЛимитовНаДату(Дата, ОтборПоСтатьямБюджетов, ИнвертироватьОтбор, ДополнительныйОтборПоПравиламЛимитов);
	
	#Область ЛимитыДействующиеНаДату
		
	ЛимитыДействующиеНаДату = ПравилаЛимитовНаДату.ПравилаЛимитов; // ТаблицаЗначений -
	ЛимитыДействующиеНаДату.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ЛимитыДействующиеНаДату.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Для Каждого ДействующийЛимит Из ЛимитыДействующиеНаДату Цикл 
		ДействующийЛимит.НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(Дата, ДействующийЛимит.Периодичность);
		ДействующийЛимит.КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(Дата, ДействующийЛимит.Периодичность);
	КонецЦикла;
	
	ЛимитыДействующиеНаДату.Индексы.Добавить("ПравилоЛимитов"); // Ссылка на СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования
	ЛимитыДействующиеНаДату.Индексы.Добавить("Сценарий");
	ЛимитыДействующиеНаДату.Индексы.Добавить("Периодичность");
	
	ДействующиеЛимиты.ЛимитыДействующиеНаДату = ЛимитыДействующиеНаДату;
	
	#КонецОбласти 
	
	#Область ПравилаИСрезы
		
	ДействующиеЛимиты.ТаблицаПравилСтатей = ПравилаЛимитовНаДату.ПравилаПолученияФакта;
	ДействующиеЛимиты.ВидыАналитик = ПравилаЛимитовНаДату.ВидыАналитик;
	ДействующиеЛимиты.Измерения = ПравилаЛимитовНаДату.Измерения;
	ДействующиеЛимиты.Периодичности = ПравилаЛимитовНаДату.Периодичности;
	ДействующиеЛимиты.СценарииПравил = ПравилаЛимитовНаДату.СценарииПравил;
	ДействующиеЛимиты.ИерархияАналитикПоПравилам = ПравилаЛимитовНаДату.ИерархияАналитикПоПравилам;

	
	#КонецОбласти 
	
	#Область ПризнакиУникальностиИсточниковДанных
		
	ДействующиеЛимиты.ПризнакиУникальностиИсточниковДанных = ПравилаЛимитовНаДату.ПризнакиУникальностиИсточниковДанных;
	
	#КонецОбласти 
	
	#Область КэшИИндексы
		
	КэшПримененияПравил = Новый ТаблицаЗначений;
	КэшПримененияПравил.Колонки.Добавить("Правило");
	КэшПримененияПравил.Колонки.Добавить("ПрименятьВЗаявках");
	
	ДействующиеЛимиты.КэшПримененияПравил = КэшПримененияПравил;
	
	ИндексируемыеТаблицы = Новый Соответствие; // Ключ - название таблицы, значение - массив строк индексов
	ИндексируемыеТаблицы.Вставить("ЛимитыДействующиеНаДату", ДействующиеЛимиты.ЛимитыДействующиеНаДату);
	ИндексируемыеТаблицы.Вставить("ТаблицаПравилСтатей", ДействующиеЛимиты.ТаблицаПравилСтатей);
	ИндексируемыеТаблицы.Вставить("КэшПримененияПравил", ДействующиеЛимиты.КэшПримененияПравил);
	ИндексируемыеТаблицы.Вставить("ПризнакиУникальностиИсточниковДанных", ДействующиеЛимиты.ПризнакиУникальностиИсточниковДанных);
	
	ДействующиеЛимиты.ИндексыТаблиц = ИсточникиДанныхСервер.ИменаТаблицИИндексы(ИндексируемыеТаблицы);
	
	#КонецОбласти 
	
	Возврат ДействующиеЛимиты;
	
КонецФункции

Функция ОтборПоПравиламРасшифровкиОтчета(ОтборРасшифровки)
	
	ОтборПоПравиламЛимитов = Неопределено;
	Если НЕ ОтборРасшифровки = Неопределено
		И ОтборРасшифровки.ИспользоватьОтбор Тогда
		Если ОтборРасшифровки.Свойство("МодельБюджетирования")
			ИЛИ ОтборРасшифровки.Свойство("ПравилоЛимитов") Тогда
		
			// При расшифровке используются отборы только на равенство.
			// Произвольные отборы и настройка отчета не предусмотрены.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Правила.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК Правила
			|ГДЕ
			|	&ТекстОтбораПоМодели
			|	И &ТекстОтбораПоПравилу";
			
			Если ОтборРасшифровки.Свойство("МодельБюджетирования") Тогда
				ТекстОтбораПоМодели = "Правила.Владелец = &МодельБюджетирования";
				Запрос.УстановитьПараметр("МодельБюджетирования", ОтборРасшифровки.МодельБюджетирования);
			Иначе
				ТекстОтбораПоМодели = "Истина";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораПоМодели", ТекстОтбораПоМодели);
			Если ОтборРасшифровки.Свойство("ПравилоЛимитов") Тогда
				ТекстОтбораПоПравилу = "Правила.Ссылка = &ПравилоЛимитов";
				Запрос.УстановитьПараметр("ПравилоЛимитов", ОтборРасшифровки.ПравилоЛимитов);
			Иначе
				ТекстОтбораПоПравилу = "Истина";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораПоПравилу", ТекстОтбораПоПравилу);
			
			ОтборПоПравиламЛимитов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтборПоПравиламЛимитов;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#КонецОбласти 


